ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	sysexBuffer,2048,4
  20              		.global	sysexPointer
  21              		.bss
  22              		.align	2
  23              		.type	sysexPointer, %object
  24              		.size	sysexPointer, 4
  25              	sysexPointer:
  26 0000 00000000 		.space	4
  27              		.global	receivingSysex
  28              		.type	receivingSysex, %object
  29              		.size	receivingSysex, 1
  30              	receivingSysex:
  31 0004 00       		.space	1
  32              		.global	parsingSysex
  33              		.type	parsingSysex, %object
  34              		.size	parsingSysex, 1
  35              	parsingSysex:
  36 0005 00       		.space	1
  37              		.comm	presetArray,2048,4
  38              		.global	presetNumberToWrite
  39              		.type	presetNumberToWrite, %object
  40              		.size	presetNumberToWrite, 1
  41              	presetNumberToWrite:
  42 0006 00       		.space	1
  43              		.global	copedentNumberToWrite
  44              		.type	copedentNumberToWrite, %object
  45              		.size	copedentNumberToWrite, 1
  46              	copedentNumberToWrite:
  47 0007 00       		.space	1
  48              		.global	sendMessageEnd
  49              		.type	sendMessageEnd, %object
  50              		.size	sendMessageEnd, 1
  51              	sendMessageEnd:
  52 0008 00       		.space	1
  53              		.global	presetArraySection
  54              		.type	presetArraySection, %object
  55              		.size	presetArraySection, 1
  56              	presetArraySection:
  57 0009 00       		.space	1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 2


  58              		.global	messageArraySendCount
  59              		.align	1
  60              		.type	messageArraySendCount, %object
  61              		.size	messageArraySendCount, 2
  62              	messageArraySendCount:
  63 000a 0000     		.space	2
  64              		.global	messageArraySize
  65              		.align	1
  66              		.type	messageArraySize, %object
  67              		.size	messageArraySize, 2
  68              	messageArraySize:
  69 000c 0000     		.space	2
  70              		.global	sysexMessageInProgress
  71              		.type	sysexMessageInProgress, %object
  72              		.size	sysexMessageInProgress, 1
  73              	sysexMessageInProgress:
  74 000e 00       		.space	1
  75              		.global	bufCount
  76              		.type	bufCount, %object
  77              		.size	bufCount, 1
  78              	bufCount:
  79 000f 00       		.space	1
  80              		.global	sendingMessage
  81              		.type	sendingMessage, %object
  82              		.size	sendingMessage, 1
  83              	sendingMessage:
  84 0010 00       		.space	1
  85              		.global	sendKnobs
  86              		.type	sendKnobs, %object
  87              		.size	sendKnobs, 1
  88              	sendKnobs:
  89 0011 00       		.space	1
  90              		.global	currentFloat
  91 0012 0000     		.align	2
  92              		.type	currentFloat, %object
  93              		.size	currentFloat, 4
  94              	currentFloat:
  95 0014 00000000 		.space	4
  96              		.global	mapCount
  97              		.align	2
  98              		.type	mapCount, %object
  99              		.size	mapCount, 4
 100              	mapCount:
 101 0018 00000000 		.space	4
 102              		.global	valsCount
 103              		.align	1
 104              		.type	valsCount, %object
 105              		.size	valsCount, 2
 106              	valsCount:
 107 001c 0000     		.space	2
 108              		.global	mapCountExpectation
 109              		.align	1
 110              		.type	mapCountExpectation, %object
 111              		.size	mapCountExpectation, 2
 112              	mapCountExpectation:
 113 001e 0000     		.space	2
 114              		.global	numMappings
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 3


 115              		.align	1
 116              		.type	numMappings, %object
 117              		.size	numMappings, 2
 118              	numMappings:
 119 0020 0000     		.space	2
 120              		.global	parseThatMF
 121              		.type	parseThatMF, %object
 122              		.size	parseThatMF, 1
 123              	parseThatMF:
 124 0022 00       		.space	1
 125              		.global	valCheck
 126 0023 00       		.align	2
 127              		.type	valCheck, %object
 128              		.size	valCheck, 4
 129              	valCheck:
 130 0024 00000000 		.space	4
 131              		.global	testVal
 132              		.align	2
 133              		.type	testVal, %object
 134              		.size	testVal, 4
 135              	testVal:
 136 0028 00000000 		.space	4
 137              		.global	numStrings
 138              		.data
 139              		.align	2
 140              		.type	numStrings, %object
 141              		.size	numStrings, 4
 142              	numStrings:
 143 0000 0A000000 		.word	10
 144              		.global	usbActivityCounter
 145              		.bss
 146              		.type	usbActivityCounter, %object
 147              		.size	usbActivityCounter, 1
 148              	usbActivityCounter:
 149 002c 00       		.space	1
 150              		.comm	midiMsg,4,4
 151              		.global	currentVBUS
 152              		.type	currentVBUS, %object
 153              		.size	currentVBUS, 1
 154              	currentVBUS:
 155 002d 00       		.space	1
 156              		.global	prevVBUS
 157              		.type	prevVBUS, %object
 158              		.size	prevVBUS, 1
 159              	prevVBUS:
 160 002e 00       		.space	1
 161              		.global	USB_active
 162              		.type	USB_active, %object
 163              		.size	USB_active, 1
 164              	USB_active:
 165 002f 00       		.space	1
 166              		.global	USB_check_flag
 167              		.type	USB_check_flag, %object
 168              		.size	USB_check_flag, 1
 169              	USB_check_flag:
 170 0030 00       		.space	1
 171              		.comm	inBuffer,32,4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 4


 172              		.comm	myArray,32,4
 173              		.comm	myInputArray,2,4
 174              		.comm	linearPotValue32Bit,8,4
 175              		.global	i
 176              		.type	i, %object
 177              		.size	i, 1
 178              	i:
 179 0031 00       		.space	1
 180              		.global	counter
 181              		.type	counter, %object
 182              		.size	counter, 1
 183              	counter:
 184 0032 00       		.space	1
 185              		.comm	returnedData,32,4
 186              		.comm	temper,4,4
 187              		.comm	previousButtons,44,4
 188              		.global	octave
 189              		.data
 190              		.align	2
 191              		.type	octave, %object
 192              		.size	octave, 4
 193              	octave:
 194 0004 04000000 		.word	4
 195              		.comm	angle,20,4
 196              		.comm	prevAngle,20,4
 197              		.comm	ADC_values,8,4
 198              		.global	rawAngle
 199              		.bss
 200 0033 00       		.align	1
 201              		.type	rawAngle, %object
 202              		.size	rawAngle, 2
 203              	rawAngle:
 204 0034 0000     		.space	2
 205              		.global	midiSent
 206              		.align	1
 207              		.type	midiSent, %object
 208              		.size	midiSent, 2
 209              	midiSent:
 210 0036 0000     		.space	2
 211              		.global	midiOverflow
 212              		.align	1
 213              		.type	midiOverflow, %object
 214              		.size	midiOverflow, 2
 215              	midiOverflow:
 216 0038 0000     		.space	2
 217              		.comm	macroKnobValues,8,4
 218              		.global	currentCopedent
 219              		.type	currentCopedent, %object
 220              		.size	currentCopedent, 1
 221              	currentCopedent:
 222 003a 00       		.space	1
 223              		.global	necks
 224              		.data
 225              		.align	2
 226              		.type	necks, %object
 227              		.size	necks, 2
 228              	necks:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 5


 229 0008 00       		.byte	0
 230 0009 01       		.byte	1
 231              		.comm	rx1Channel,1,1
 232              		.comm	rx2Channel,1,32
 233              		.comm	rx1TD,2,4
 234              		.comm	rx2TD,2,32
 235              		.comm	txChannel,1,32
 236              		.comm	txTD,1,32
 237              		.comm	rx3Channel,1,32
 238              		.comm	rx3TD,1,32
 239              		.comm	rxBufferPluck,52,32
 240              		.comm	rxBufferBar,16,32
 241              		.comm	strings,24,4
 242              		.comm	prevStrings,24,4
 243              		.comm	bar,4,4
 244              		.comm	prevBar,4,4
 245              		.comm	maxStrings,24,4
 246              		.global	amHere
 247              		.bss
 248              		.type	amHere, %object
 249              		.size	amHere, 1
 250              	amHere:
 251 003b 00       		.space	1
 252              		.global	spiCounter
 253              		.type	spiCounter, %object
 254              		.size	spiCounter, 1
 255              	spiCounter:
 256 003c 00       		.space	1
 257              		.global	newDataFlag
 258              		.type	newDataFlag, %object
 259              		.size	newDataFlag, 1
 260              	newDataFlag:
 261 003d 00       		.space	1
 262              		.global	prevOctave
 263 003e 0000     		.align	2
 264              		.type	prevOctave, %object
 265              		.size	prevOctave, 4
 266              	prevOctave:
 267 0040 00000000 		.space	4
 268              		.global	pluck_index
 269              		.type	pluck_index, %object
 270              		.size	pluck_index, 1
 271              	pluck_index:
 272 0044 00       		.space	1
 273              		.global	amHere2
 274              		.type	amHere2, %object
 275              		.size	amHere2, 1
 276              	amHere2:
 277 0045 00       		.space	1
 278              		.global	spiCounter2
 279              		.type	spiCounter2, %object
 280              		.size	spiCounter2, 1
 281              	spiCounter2:
 282 0046 00       		.space	1
 283              		.global	newDataFlag2
 284              		.type	newDataFlag2, %object
 285              		.size	newDataFlag2, 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 6


 286              	newDataFlag2:
 287 0047 00       		.space	1
 288              		.global	currentPluckBuffer
 289              		.type	currentPluckBuffer, %object
 290              		.size	currentPluckBuffer, 1
 291              	currentPluckBuffer:
 292 0048 00       		.space	1
 293              		.global	currentBarBuffer
 294              		.type	currentBarBuffer, %object
 295              		.size	currentBarBuffer, 1
 296              	currentBarBuffer:
 297 0049 00       		.space	1
 298              		.global	pluckErrorCount
 299              		.type	pluckErrorCount, %object
 300              		.size	pluckErrorCount, 1
 301              	pluckErrorCount:
 302 004a 00       		.space	1
 303              		.global	SPI1ErrorCount
 304 004b 00       		.align	1
 305              		.type	SPI1ErrorCount, %object
 306              		.size	SPI1ErrorCount, 2
 307              	SPI1ErrorCount:
 308 004c 0000     		.space	2
 309              		.global	inputData
 310              		.type	inputData, %object
 311              		.size	inputData, 1
 312              	inputData:
 313 004e 00       		.space	1
 314              		.section	.text.spis_1_ss,"ax",%progbits
 315              		.align	2
 316              		.global	spis_1_ss
 317              		.thumb
 318              		.thumb_func
 319              		.type	spis_1_ss, %function
 320              	spis_1_ss:
 321              	.LFB64:
 322              		.file 1 "main.c"
   1:main.c        **** /*main.c
   2:main.c        **** *****************************************************************************/
   3:main.c        **** #include <device.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <math.h>
   6:main.c        **** #include "oled.h"
   7:main.c        **** #include "main.h"
   8:main.c        **** 
   9:main.c        **** 
  10:main.c        **** #define EEPROM_NECKS_OFFSET 0
  11:main.c        **** #define EEPROM_COPEDENT_OFFSET 2
  12:main.c        **** #define COPEDENT_SIZE_IN_BYTES 278 //including name bytes
  13:main.c        **** #define COPEDENT_SIZE_IN_FLOATS 132 // not including name bytes
  14:main.c        **** #define NAME_LENGTH_IN_BYTES 14
  15:main.c        **** 
  16:main.c        **** 
  17:main.c        **** 
  18:main.c        **** #define myBufferSize 32
  19:main.c        **** void parseSysex(void);
  20:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 7


  21:main.c        **** uint8_t sysexBuffer[2048];
  22:main.c        **** uint32_t sysexPointer = 0;
  23:main.c        **** uint8_t receivingSysex = 0;
  24:main.c        **** uint8_t parsingSysex = 0;
  25:main.c        **** volatile uint8_t presetArray[2048];
  26:main.c        **** uint8_t presetNumberToWrite = 0;
  27:main.c        **** uint8_t copedentNumberToWrite = 0;
  28:main.c        **** uint8_t sendMessageEnd = 0;
  29:main.c        **** enum presetArraySectionState
  30:main.c        **** {
  31:main.c        ****     presetName = 0,
  32:main.c        ****     macroNames = 1,
  33:main.c        ****     initialVals = 2,
  34:main.c        ****     mapCountNext = 3,
  35:main.c        ****     mapping = 4,
  36:main.c        ****     presetEnd = 5,
  37:main.c        **** };
  38:main.c        **** uint8_t presetArraySection = presetName;
  39:main.c        **** 
  40:main.c        **** uint16_t messageArraySendCount = 0;
  41:main.c        **** uint16_t messageArraySize = 0;
  42:main.c        **** 
  43:main.c        **** uint8_t sysexMessageInProgress = 0;
  44:main.c        **** 
  45:main.c        **** uint8_t bufCount = 0;
  46:main.c        **** volatile uint8_t sendingMessage = 0;
  47:main.c        **** volatile uint8_t sendKnobs = 0;
  48:main.c        **** uint32_t currentFloat = 0;
  49:main.c        **** uint32_t mapCount = 0;
  50:main.c        **** 
  51:main.c        **** uint16_t valsCount = 0;
  52:main.c        **** uint16_t mapCountExpectation = 0;
  53:main.c        **** uint16_t numMappings = 0;
  54:main.c        **** volatile uint8_t parseThatMF = 0;
  55:main.c        **** volatile float valCheck = 0.0f;
  56:main.c        **** volatile float testVal = 0.0f;
  57:main.c        **** 
  58:main.c        **** int numStrings = 10;
  59:main.c        **** /*
  60:main.c        **** #define TUNING_ARRAY_SIZE 258
  61:main.c        **** uint8_t tuningArray[TUNING_ARRAY_SIZE];
  62:main.c        **** */
  63:main.c        **** 
  64:main.c        **** volatile uint8 usbActivityCounter = 0u;
  65:main.c        **** uint8 midiMsg[4];
  66:main.c        **** uint8_t currentVBUS = 0;
  67:main.c        **** uint8_t prevVBUS = 0;
  68:main.c        **** volatile uint8_t USB_active = 0;
  69:main.c        **** volatile uint8_t USB_check_flag = 0;
  70:main.c        **** 
  71:main.c        **** 
  72:main.c        **** uint8 inBuffer[myBufferSize];
  73:main.c        **** 
  74:main.c        **** uint8 myArray[myBufferSize];
  75:main.c        **** uint8 myInputArray[2];
  76:main.c        **** int32_t linearPotValue32Bit[2];
  77:main.c        **** uint8_t i = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 8


  78:main.c        **** uint8_t counter = 0;
  79:main.c        **** uint8_t returnedData[myBufferSize];
  80:main.c        **** int32_t temper;
  81:main.c        **** int previousButtons[11];
  82:main.c        **** int octave = 4;
  83:main.c        **** uint16_t angle[10];
  84:main.c        **** uint16_t prevAngle[10];
  85:main.c        **** 
  86:main.c        **** uint16_t ADC_values[4];
  87:main.c        **** uint16_t rawAngle = 0;
  88:main.c        **** uint16_t midiSent = 0;
  89:main.c        **** uint16_t midiOverflow = 0;
  90:main.c        **** 
  91:main.c        **** uint8_t macroKnobValues[8];
  92:main.c        **** 
  93:main.c        **** uint8_t currentCopedent = 0;
  94:main.c        **** uint8_t necks[2] = {0,1};
  95:main.c        **** 
  96:main.c        **** void checkUSB_Vbus(void);
  97:main.c        **** void sendMIDIAllNotesOff(void);
  98:main.c        **** void sendMIDIPitchBend(int val, int channel);
  99:main.c        **** void firstCheckUSB_Vbus(void);
 100:main.c        **** void restartSystemCheck(void);
 101:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel);
 102:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel);
 103:main.c        **** CY_ISR_PROTO(SleepIsr_function);
 104:main.c        **** void noteEvent(int string);
 105:main.c        **** void I2C_reset(void);
 106:main.c        **** void CCEvent(int cc, int val);
 107:main.c        **** void DmaRxConfiguration(void);
 108:main.c        **** /* DMA Configuration for DMA_RX */
 109:main.c        **** #define DMA_RX_BYTES_PER_BURST      (1u)
 110:main.c        **** #define DMA_RX_REQUEST_PER_BURST    (1u)
 111:main.c        **** #define DMA_RX_SRC_BASE             (CYDEV_PERIPH_BASE)
 112:main.c        **** #define DMA_RX_DST_BASE             (CYDEV_SRAM_BASE)
 113:main.c        **** 
 114:main.c        **** void DmaTxConfiguration(void);
 115:main.c        **** 
 116:main.c        **** /* DMA Configuration for DMA_TX */
 117:main.c        **** #define DMA_TX_BYTES_PER_BURST      (1u)
 118:main.c        **** #define DMA_TX_REQUEST_PER_BURST    (1u)
 119:main.c        **** #define DMA_TX_SRC_BASE             (CYDEV_SRAM_BASE)
 120:main.c        **** #define DMA_TX_DST_BASE             (CYDEV_PERIPH_BASE)
 121:main.c        **** 
 122:main.c        **** #define PLUCK_BUFFER_SIZE                 (26u)
 123:main.c        **** #define BAR_BUFFER_SIZE                 (8u)
 124:main.c        **** #define STORE_TD_CFG_ONCMPLT        (1u)
 125:main.c        **** uint8 rx1Channel, rx2Channel __attribute__((aligned(32)));
 126:main.c        **** uint8 rx1TD[2], rx2TD[2]  __attribute__((aligned(32)));
 127:main.c        **** 
 128:main.c        **** volatile uint8 txChannel __attribute__((aligned(32)));
 129:main.c        **** volatile uint8 txTD __attribute__((aligned(32)));
 130:main.c        **** 
 131:main.c        **** volatile uint8 rx3Channel __attribute__((aligned(32)));
 132:main.c        **** volatile uint8 rx3TD __attribute__((aligned(32)));
 133:main.c        **** 
 134:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 9


 135:main.c        **** volatile uint8 rxBufferPluck[2][PLUCK_BUFFER_SIZE] __attribute__((aligned(32)));
 136:main.c        **** volatile uint8 rxBufferBar[2][BAR_BUFFER_SIZE] __attribute__((aligned(32)));
 137:main.c        **** 
 138:main.c        **** volatile uint16_t strings[12];
 139:main.c        **** volatile uint16_t prevStrings[12];
 140:main.c        **** volatile uint16_t bar[2];
 141:main.c        **** volatile uint16_t prevBar[2];
 142:main.c        **** volatile uint16_t maxStrings[12];
 143:main.c        **** volatile uint8_t amHere = 0;
 144:main.c        **** volatile uint8_t spiCounter = 0;
 145:main.c        **** volatile uint8_t newDataFlag = 0;
 146:main.c        **** int prevOctave = 0;
 147:main.c        **** uint8_t pluck_index = 0;
 148:main.c        **** volatile uint8_t amHere2 = 0;
 149:main.c        **** volatile uint8_t spiCounter2 = 0;
 150:main.c        **** volatile uint8_t newDataFlag2 = 0;
 151:main.c        **** volatile uint8_t currentPluckBuffer = 0;
 152:main.c        **** volatile uint8_t currentBarBuffer = 0;
 153:main.c        **** volatile uint8_t pluckErrorCount = 0;
 154:main.c        **** volatile uint16_t SPI1ErrorCount = 0;
 155:main.c        **** 
 156:main.c        **** 
 157:main.c        **** 
 158:main.c        **** volatile uint8_t inputData = 0;
 159:main.c        **** 
 160:main.c        **** 
 161:main.c        **** union breakFloat {
 162:main.c        ****  float f;
 163:main.c        ****  uint8_t b[4];  
 164:main.c        ****  uint32_t u32;
 165:main.c        **** };
 166:main.c        **** 
 167:main.c        **** 
 168:main.c        **** CY_ISR(spis_1_ss)
 169:main.c        **** {
 323              		.loc 1 169 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 8
 326              		@ frame_needed = 1, uses_anonymous_args = 0
 327 0000 90B5     		push	{r4, r7, lr}
 328              		.cfi_def_cfa_offset 12
 329              		.cfi_offset 4, -12
 330              		.cfi_offset 7, -8
 331              		.cfi_offset 14, -4
 332 0002 83B0     		sub	sp, sp, #12
 333              		.cfi_def_cfa_offset 24
 334 0004 00AF     		add	r7, sp, #0
 335              		.cfi_def_cfa_register 7
 170:main.c        ****     currentPluckBuffer = !currentPluckBuffer;
 336              		.loc 1 170 0
 337 0006 554B     		ldr	r3, .L5
 338 0008 1B78     		ldrb	r3, [r3]
 339 000a DBB2     		uxtb	r3, r3
 340 000c 002B     		cmp	r3, #0
 341 000e 0CBF     		ite	eq
 342 0010 0123     		moveq	r3, #1
 343 0012 0023     		movne	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 10


 344 0014 DBB2     		uxtb	r3, r3
 345 0016 1A46     		mov	r2, r3
 346 0018 504B     		ldr	r3, .L5
 347 001a 1A70     		strb	r2, [r3]
 171:main.c        **** 
 172:main.c        ****     if ((rxBufferPluck[!currentPluckBuffer][0] == 254) && (rxBufferPluck[!currentPluckBuffer][25] =
 348              		.loc 1 172 0
 349 001c 4F4B     		ldr	r3, .L5
 350 001e 1B78     		ldrb	r3, [r3]
 351 0020 DBB2     		uxtb	r3, r3
 352 0022 002B     		cmp	r3, #0
 353 0024 0CBF     		ite	eq
 354 0026 0123     		moveq	r3, #1
 355 0028 0023     		movne	r3, #0
 356 002a DBB2     		uxtb	r3, r3
 357 002c 1946     		mov	r1, r3
 358 002e 4C4A     		ldr	r2, .L5+4
 359 0030 1A23     		movs	r3, #26
 360 0032 03FB01F3 		mul	r3, r3, r1
 361 0036 1344     		add	r3, r3, r2
 362 0038 1B78     		ldrb	r3, [r3]
 363 003a DBB2     		uxtb	r3, r3
 364 003c FE2B     		cmp	r3, #254
 365 003e 4FD1     		bne	.L2
 366              		.loc 1 172 0 is_stmt 0 discriminator 1
 367 0040 464B     		ldr	r3, .L5
 368 0042 1B78     		ldrb	r3, [r3]
 369 0044 DBB2     		uxtb	r3, r3
 370 0046 002B     		cmp	r3, #0
 371 0048 0CBF     		ite	eq
 372 004a 0123     		moveq	r3, #1
 373 004c 0023     		movne	r3, #0
 374 004e DBB2     		uxtb	r3, r3
 375 0050 1946     		mov	r1, r3
 376 0052 434A     		ldr	r2, .L5+4
 377 0054 1A23     		movs	r3, #26
 378 0056 03FB01F3 		mul	r3, r3, r1
 379 005a 1344     		add	r3, r3, r2
 380 005c 1933     		adds	r3, r3, #25
 381 005e 1B78     		ldrb	r3, [r3]
 382 0060 DBB2     		uxtb	r3, r3
 383 0062 FD2B     		cmp	r3, #253
 384 0064 3CD1     		bne	.L2
 385              	.LBB2:
 173:main.c        ****     {
 174:main.c        ****         for (int i = 0 ; i < numStrings; i++)
 386              		.loc 1 174 0 is_stmt 1
 387 0066 0023     		movs	r3, #0
 388 0068 7B60     		str	r3, [r7, #4]
 389 006a 34E0     		b	.L3
 390              	.L4:
 175:main.c        ****         {
 176:main.c        ****             strings[i] = ((rxBufferPluck[!currentPluckBuffer][(i*2)+1] << 8) + rxBufferPluck[!curre
 391              		.loc 1 176 0 discriminator 3
 392 006c 3B4B     		ldr	r3, .L5
 393 006e 1B78     		ldrb	r3, [r3]
 394 0070 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 11


 395 0072 002B     		cmp	r3, #0
 396 0074 0CBF     		ite	eq
 397 0076 0123     		moveq	r3, #1
 398 0078 0023     		movne	r3, #0
 399 007a DBB2     		uxtb	r3, r3
 400 007c 1846     		mov	r0, r3
 401 007e 7B68     		ldr	r3, [r7, #4]
 402 0080 5B00     		lsls	r3, r3, #1
 403 0082 0133     		adds	r3, r3, #1
 404 0084 3649     		ldr	r1, .L5+4
 405 0086 1A22     		movs	r2, #26
 406 0088 02FB00F2 		mul	r2, r2, r0
 407 008c 0A44     		add	r2, r2, r1
 408 008e 1344     		add	r3, r3, r2
 409 0090 1B78     		ldrb	r3, [r3]
 410 0092 DBB2     		uxtb	r3, r3
 411 0094 9BB2     		uxth	r3, r3
 412 0096 1B02     		lsls	r3, r3, #8
 413 0098 9AB2     		uxth	r2, r3
 414 009a 304B     		ldr	r3, .L5
 415 009c 1B78     		ldrb	r3, [r3]
 416 009e DBB2     		uxtb	r3, r3
 417 00a0 002B     		cmp	r3, #0
 418 00a2 0CBF     		ite	eq
 419 00a4 0123     		moveq	r3, #1
 420 00a6 0023     		movne	r3, #0
 421 00a8 DBB2     		uxtb	r3, r3
 422 00aa 1C46     		mov	r4, r3
 423 00ac 7B68     		ldr	r3, [r7, #4]
 424 00ae 0133     		adds	r3, r3, #1
 425 00b0 5B00     		lsls	r3, r3, #1
 426 00b2 2B48     		ldr	r0, .L5+4
 427 00b4 1A21     		movs	r1, #26
 428 00b6 01FB04F1 		mul	r1, r1, r4
 429 00ba 0144     		add	r1, r1, r0
 430 00bc 0B44     		add	r3, r3, r1
 431 00be 1B78     		ldrb	r3, [r3]
 432 00c0 DBB2     		uxtb	r3, r3
 433 00c2 9BB2     		uxth	r3, r3
 434 00c4 1344     		add	r3, r3, r2
 435 00c6 99B2     		uxth	r1, r3
 436 00c8 264A     		ldr	r2, .L5+8
 437 00ca 7B68     		ldr	r3, [r7, #4]
 438 00cc 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 174:main.c        ****         {
 439              		.loc 1 174 0 discriminator 3
 440 00d0 7B68     		ldr	r3, [r7, #4]
 441 00d2 0133     		adds	r3, r3, #1
 442 00d4 7B60     		str	r3, [r7, #4]
 443              	.L3:
 174:main.c        ****         {
 444              		.loc 1 174 0 is_stmt 0 discriminator 1
 445 00d6 244B     		ldr	r3, .L5+12
 446 00d8 1B68     		ldr	r3, [r3]
 447 00da 7A68     		ldr	r2, [r7, #4]
 448 00dc 9A42     		cmp	r2, r3
 449 00de C5DB     		blt	.L4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 12


 450              	.L2:
 451              	.LBE2:
 177:main.c        ****         }
 178:main.c        ****     }
 179:main.c        ****     SPIS_1_ClearRxBuffer();
 452              		.loc 1 179 0 is_stmt 1
 453 00e0 FFF7FEFF 		bl	SPIS_1_ClearRxBuffer
 180:main.c        ****     CyDmaClearPendingDrq(rx1Channel);
 454              		.loc 1 180 0
 455 00e4 214B     		ldr	r3, .L5+16
 456 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 457 00e8 1846     		mov	r0, r3
 458 00ea FFF7FEFF 		bl	CyDmaClearPendingDrq
 181:main.c        **** 
 182:main.c        ****     //set up the next DMA transaction
 183:main.c        **** 
 184:main.c        ****     CyDmaTdSetConfiguration(rx1TD[currentPluckBuffer], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DS
 459              		.loc 1 184 0
 460 00ee 1B4B     		ldr	r3, .L5
 461 00f0 1B78     		ldrb	r3, [r3]
 462 00f2 DBB2     		uxtb	r3, r3
 463 00f4 1A46     		mov	r2, r3
 464 00f6 1E4B     		ldr	r3, .L5+20
 465 00f8 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 466 00fa 0223     		movs	r3, #2
 467 00fc FE22     		movs	r2, #254
 468 00fe 1A21     		movs	r1, #26
 469 0100 FFF7FEFF 		bl	CyDmaTdSetConfiguration
 185:main.c        ****     CyDmaTdSetAddress(rx1TD[currentPluckBuffer], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rx
 470              		.loc 1 185 0
 471 0104 154B     		ldr	r3, .L5
 472 0106 1B78     		ldrb	r3, [r3]
 473 0108 DBB2     		uxtb	r3, r3
 474 010a 1A46     		mov	r2, r3
 475 010c 184B     		ldr	r3, .L5+20
 476 010e 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 477 0110 124B     		ldr	r3, .L5
 478 0112 1B78     		ldrb	r3, [r3]
 479 0114 DBB2     		uxtb	r3, r3
 480 0116 1A46     		mov	r2, r3
 481 0118 1A23     		movs	r3, #26
 482 011a 03FB02F3 		mul	r3, r3, r2
 483 011e 104A     		ldr	r2, .L5+4
 484 0120 1344     		add	r3, r3, r2
 485 0122 9BB2     		uxth	r3, r3
 486 0124 1A46     		mov	r2, r3
 487 0126 46F25441 		movw	r1, #25684
 488 012a FFF7FEFF 		bl	CyDmaTdSetAddress
 186:main.c        ****     CyDmaChSetInitialTd(rx1Channel, rx1TD[currentPluckBuffer]);
 489              		.loc 1 186 0
 490 012e 0F4B     		ldr	r3, .L5+16
 491 0130 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 492 0132 0A4B     		ldr	r3, .L5
 493 0134 1B78     		ldrb	r3, [r3]
 494 0136 DBB2     		uxtb	r3, r3
 495 0138 1946     		mov	r1, r3
 496 013a 0D4B     		ldr	r3, .L5+20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 13


 497 013c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 498 013e 1946     		mov	r1, r3
 499 0140 1046     		mov	r0, r2
 500 0142 FFF7FEFF 		bl	CyDmaChSetInitialTd
 187:main.c        ****     CyDmaChEnable(rx1Channel, 1);
 501              		.loc 1 187 0
 502 0146 094B     		ldr	r3, .L5+16
 503 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 504 014a 0121     		movs	r1, #1
 505 014c 1846     		mov	r0, r3
 506 014e FFF7FEFF 		bl	CyDmaChEnable
 188:main.c        **** 
 189:main.c        **** }
 507              		.loc 1 189 0
 508 0152 00BF     		nop
 509 0154 0C37     		adds	r7, r7, #12
 510              		.cfi_def_cfa_offset 12
 511 0156 BD46     		mov	sp, r7
 512              		.cfi_def_cfa_register 13
 513              		@ sp needed
 514 0158 90BD     		pop	{r4, r7, pc}
 515              	.L6:
 516 015a 00BF     		.align	2
 517              	.L5:
 518 015c 00000000 		.word	currentPluckBuffer
 519 0160 00000000 		.word	rxBufferPluck
 520 0164 00000000 		.word	strings
 521 0168 00000000 		.word	numStrings
 522 016c 00000000 		.word	rx1Channel
 523 0170 00000000 		.word	rx1TD
 524              		.cfi_endproc
 525              	.LFE64:
 526              		.size	spis_1_ss, .-spis_1_ss
 527              		.global	spiAdjusted
 528              		.bss
 529              		.type	spiAdjusted, %object
 530              		.size	spiAdjusted, 1
 531              	spiAdjusted:
 532 004f 00       		.space	1
 533              		.global	mySpiCounter
 534              		.type	mySpiCounter, %object
 535              		.size	mySpiCounter, 1
 536              	mySpiCounter:
 537 0050 00       		.space	1
 538              		.global	offsetErrorCount
 539 0051 00       		.align	1
 540              		.type	offsetErrorCount, %object
 541              		.size	offsetErrorCount, 2
 542              	offsetErrorCount:
 543 0052 0000     		.space	2
 544              		.global	SPI2errorflag
 545              		.type	SPI2errorflag, %object
 546              		.size	SPI2errorflag, 1
 547              	SPI2errorflag:
 548 0054 00       		.space	1
 549              		.global	bar_index
 550 0055 000000   		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 14


 551              		.type	bar_index, %object
 552              		.size	bar_index, 4
 553              	bar_index:
 554 0058 00000000 		.space	4
 555              		.comm	knobs,4,4
 556              		.comm	prevKnobs,4,4
 557              		.global	SPI2started
 558              		.type	SPI2started, %object
 559              		.size	SPI2started, 1
 560              	SPI2started:
 561 005c 00       		.space	1
 562              		.section	.text.spis_2_ss,"ax",%progbits
 563              		.align	2
 564              		.global	spis_2_ss
 565              		.thumb
 566              		.thumb_func
 567              		.type	spis_2_ss, %function
 568              	spis_2_ss:
 569              	.LFB65:
 190:main.c        **** 
 191:main.c        **** 
 192:main.c        **** 
 193:main.c        **** uint8_t spiAdjusted = 0;
 194:main.c        **** uint8_t mySpiCounter = 0;
 195:main.c        **** volatile uint16_t offsetErrorCount = 0;
 196:main.c        **** volatile uint8_t SPI2errorflag = 0;
 197:main.c        **** volatile int bar_index = 0;
 198:main.c        **** uint8_t knobs[4];
 199:main.c        **** uint8_t prevKnobs[4];
 200:main.c        **** 
 201:main.c        **** volatile uint8_t SPI2started = 0;
 202:main.c        **** 
 203:main.c        **** 
 204:main.c        **** CY_ISR(spis_2_ss)
 205:main.c        **** {
 570              		.loc 1 205 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 1, uses_anonymous_args = 0
 574 0000 80B5     		push	{r7, lr}
 575              		.cfi_def_cfa_offset 8
 576              		.cfi_offset 7, -8
 577              		.cfi_offset 14, -4
 578 0002 00AF     		add	r7, sp, #0
 579              		.cfi_def_cfa_register 7
 206:main.c        **** 
 207:main.c        ****     currentBarBuffer = !currentBarBuffer;
 580              		.loc 1 207 0
 581 0004 214B     		ldr	r3, .L8
 582 0006 1B78     		ldrb	r3, [r3]
 583 0008 DBB2     		uxtb	r3, r3
 584 000a 002B     		cmp	r3, #0
 585 000c 0CBF     		ite	eq
 586 000e 0123     		moveq	r3, #1
 587 0010 0023     		movne	r3, #0
 588 0012 DBB2     		uxtb	r3, r3
 589 0014 1A46     		mov	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 15


 590 0016 1D4B     		ldr	r3, .L8
 591 0018 1A70     		strb	r2, [r3]
 208:main.c        ****     SPIS_2_ClearRxBuffer();
 592              		.loc 1 208 0
 593 001a FFF7FEFF 		bl	SPIS_2_ClearRxBuffer
 209:main.c        ****     CyDmaClearPendingDrq(rx2Channel);
 594              		.loc 1 209 0
 595 001e 1C4B     		ldr	r3, .L8+4
 596 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 597 0022 1846     		mov	r0, r3
 598 0024 FFF7FEFF 		bl	CyDmaClearPendingDrq
 210:main.c        **** 
 211:main.c        ****     //set up the next DMA transaction
 212:main.c        ****     CyDmaTdSetConfiguration(rx2TD[currentBarBuffer], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_AD
 599              		.loc 1 212 0
 600 0028 184B     		ldr	r3, .L8
 601 002a 1B78     		ldrb	r3, [r3]
 602 002c DBB2     		uxtb	r3, r3
 603 002e 1A46     		mov	r2, r3
 604 0030 184B     		ldr	r3, .L8+8
 605 0032 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 606 0034 0623     		movs	r3, #6
 607 0036 FE22     		movs	r2, #254
 608 0038 0821     		movs	r1, #8
 609 003a FFF7FEFF 		bl	CyDmaTdSetConfiguration
 213:main.c        ****     CyDmaTdSetAddress(rx2TD[currentBarBuffer], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBu
 610              		.loc 1 213 0
 611 003e 134B     		ldr	r3, .L8
 612 0040 1B78     		ldrb	r3, [r3]
 613 0042 DBB2     		uxtb	r3, r3
 614 0044 1A46     		mov	r2, r3
 615 0046 134B     		ldr	r3, .L8+8
 616 0048 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 617 004a 104B     		ldr	r3, .L8
 618 004c 1B78     		ldrb	r3, [r3]
 619 004e DBB2     		uxtb	r3, r3
 620 0050 DB00     		lsls	r3, r3, #3
 621 0052 114A     		ldr	r2, .L8+12
 622 0054 1344     		add	r3, r3, r2
 623 0056 9BB2     		uxth	r3, r3
 624 0058 1A46     		mov	r2, r3
 625 005a 46F25C41 		movw	r1, #25692
 626 005e FFF7FEFF 		bl	CyDmaTdSetAddress
 214:main.c        ****     CyDmaChSetInitialTd(rx2Channel, rx2TD[currentBarBuffer]);
 627              		.loc 1 214 0
 628 0062 0B4B     		ldr	r3, .L8+4
 629 0064 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 630 0066 094B     		ldr	r3, .L8
 631 0068 1B78     		ldrb	r3, [r3]
 632 006a DBB2     		uxtb	r3, r3
 633 006c 1946     		mov	r1, r3
 634 006e 094B     		ldr	r3, .L8+8
 635 0070 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 636 0072 1946     		mov	r1, r3
 637 0074 1046     		mov	r0, r2
 638 0076 FFF7FEFF 		bl	CyDmaChSetInitialTd
 215:main.c        ****     CyDmaChEnable(rx2Channel, 1);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 16


 639              		.loc 1 215 0
 640 007a 054B     		ldr	r3, .L8+4
 641 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 642 007e 0121     		movs	r1, #1
 643 0080 1846     		mov	r0, r3
 644 0082 FFF7FEFF 		bl	CyDmaChEnable
 216:main.c        **** }
 645              		.loc 1 216 0
 646 0086 00BF     		nop
 647 0088 80BD     		pop	{r7, pc}
 648              	.L9:
 649 008a 00BF     		.align	2
 650              	.L8:
 651 008c 00000000 		.word	currentBarBuffer
 652 0090 00000000 		.word	rx2Channel
 653 0094 00000000 		.word	rx2TD
 654 0098 00000000 		.word	rxBufferBar
 655              		.cfi_endproc
 656              	.LFE65:
 657              		.size	spis_2_ss, .-spis_2_ss
 658              		.bss
 659 005d 000000   		.align	2
 660              	eepromArray:
 661 0060 0000     		.space	2
 662              		.global	array
 663 0062 0000     		.align	2
 664              		.type	array, %object
 665              		.size	array, 2
 666              	array:
 667 0064 0000     		.space	2
 668              		.comm	eepromReturnValue,1,1
 669              		.global	Em_EEPROM_em_EepromStorage
 670              		.section	.rodata
 671              		.align	8
 672              		.type	Em_EEPROM_em_EepromStorage, %object
 673              		.size	Em_EEPROM_em_EepromStorage, 1024
 674              	Em_EEPROM_em_EepromStorage:
 675 0000 00000000 		.space	1024
 675      00000000 
 675      00000000 
 675      00000000 
 675      00000000 
 676              		.comm	eeprom_cnt,1,1
 677              		.comm	status,4,4
 678              		.comm	ptr,4,4
 679              		.global	barCount
 680              		.bss
 681 0066 0000     		.align	2
 682              		.type	barCount, %object
 683              		.size	barCount, 4
 684              	barCount:
 685 0068 00000000 		.space	4
 686              		.section	.text.Vbus_function,"ax",%progbits
 687              		.align	2
 688              		.global	Vbus_function
 689              		.thumb
 690              		.thumb_func
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 17


 691              		.type	Vbus_function, %function
 692              	Vbus_function:
 693              	.LFB66:
 217:main.c        **** 
 218:main.c        **** 
 219:main.c        ****     static uint8 CYCODE eepromArray[]={ 0, 0 };
 220:main.c        ****                                             
 221:main.c        ****     uint8 array[] ={ 0, 0 };
 222:main.c        ****                                 
 223:main.c        ****     /*Return status for EEPROM and UART*/ 
 224:main.c        **** cy_en_em_eeprom_status_t eepromReturnValue;
 225:main.c        **** 
 226:main.c        **** 
 227:main.c        **** /* EEPROM storage in work flash, this is defined in Em_EEPROM.c*/
 228:main.c        **** #if defined (__ICCARM__)
 229:main.c        **** #pragma data_alignment = CY_FLASH_SIZEOF_ROW
 230:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE] = {0u};
 231:main.c        **** #else
 232:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE]
 233:main.c        **** __ALIGNED(CY_FLASH_SIZEOF_ROW) = {0u};
 234:main.c        **** #endif /* defined (__ICCARM__) */
 235:main.c        **** 
 236:main.c        ****     uint8 eeprom_cnt;
 237:main.c        ****     cystatus status;
 238:main.c        ****     volatile const uint8 * ptr;
 239:main.c        **** volatile int barCount = 0;
 240:main.c        **** 
 241:main.c        **** //#define I2C_1_TIMEOUT_ENABLE 1u //overwrites the default in the i2c block
 242:main.c        ****     
 243:main.c        **** //this ISR should happen when a USB cable is plugged in or unplugged.
 244:main.c        **** 
 245:main.c        **** CY_ISR(Vbus_function)
 246:main.c        **** {
 694              		.loc 1 246 0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 0
 697              		@ frame_needed = 1, uses_anonymous_args = 0
 698 0000 80B5     		push	{r7, lr}
 699              		.cfi_def_cfa_offset 8
 700              		.cfi_offset 7, -8
 701              		.cfi_offset 14, -4
 702 0002 00AF     		add	r7, sp, #0
 703              		.cfi_def_cfa_register 7
 247:main.c        ****     //plug or unplug event
 248:main.c        ****     //check if eeprom has a flag saying you just restarted. If so, don't restart again
 249:main.c        ****     //otherwise, restart
 250:main.c        ****     my_Vbus_ISR_ClearPending();
 704              		.loc 1 250 0
 705 0004 FFF7FEFF 		bl	my_Vbus_ISR_ClearPending
 251:main.c        ****     vBusPin_ClearInterrupt();
 706              		.loc 1 251 0
 707 0008 FFF7FEFF 		bl	vBusPin_ClearInterrupt
 252:main.c        ****     restartSystemCheck();
 708              		.loc 1 252 0
 709 000c FFF7FEFF 		bl	restartSystemCheck
 253:main.c        **** 
 254:main.c        **** }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 18


 710              		.loc 1 254 0
 711 0010 00BF     		nop
 712 0012 80BD     		pop	{r7, pc}
 713              		.cfi_endproc
 714              	.LFE66:
 715              		.size	Vbus_function, .-Vbus_function
 716              		.section	.text.restartSystemCheck,"ax",%progbits
 717              		.align	2
 718              		.global	restartSystemCheck
 719              		.thumb
 720              		.thumb_func
 721              		.type	restartSystemCheck, %function
 722              	restartSystemCheck:
 723              	.LFB67:
 255:main.c        **** 
 256:main.c        **** void restartSystemCheck()
 257:main.c        **** {
 724              		.loc 1 257 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 1, uses_anonymous_args = 0
 728 0000 80B5     		push	{r7, lr}
 729              		.cfi_def_cfa_offset 8
 730              		.cfi_offset 7, -8
 731              		.cfi_offset 14, -4
 732 0002 00AF     		add	r7, sp, #0
 733              		.cfi_def_cfa_register 7
 258:main.c        ****     eepromReturnValue = Em_EEPROM_Read(0u, eepromArray, 2u);
 734              		.loc 1 258 0
 735 0004 184B     		ldr	r3, .L15
 736 0006 0222     		movs	r2, #2
 737 0008 1849     		ldr	r1, .L15+4
 738 000a 0020     		movs	r0, #0
 739 000c FFF7FEFF 		bl	Cy_Em_EEPROM_Read
 740 0010 0346     		mov	r3, r0
 741 0012 1A46     		mov	r2, r3
 742 0014 164B     		ldr	r3, .L15+8
 743 0016 1A70     		strb	r2, [r3]
 259:main.c        ****     //only do the restart check if there is a USB cable plugged in (to avoid restarting while tryin
 260:main.c        ****     if (USB_VBusPresent() == 1)
 744              		.loc 1 260 0
 745 0018 FFF7FEFF 		bl	USB_VBusPresent
 746 001c 0346     		mov	r3, r0
 747 001e 012B     		cmp	r3, #1
 748 0020 20D1     		bne	.L14
 261:main.c        ****     {
 262:main.c        ****         if (*(volatile uint8 *) &eepromArray[0] == 1u)
 749              		.loc 1 262 0
 750 0022 124B     		ldr	r3, .L15+4
 751 0024 1B78     		ldrb	r3, [r3]
 752 0026 DBB2     		uxtb	r3, r3
 753 0028 012B     		cmp	r3, #1
 754 002a 0CD1     		bne	.L13
 263:main.c        ****         {
 264:main.c        ****             //a flag says we just restarted
 265:main.c        ****             //write a zero so it knows next time that it's OK to restart
 266:main.c        ****             array[0] = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 19


 755              		.loc 1 266 0
 756 002c 114B     		ldr	r3, .L15+12
 757 002e 0022     		movs	r2, #0
 758 0030 1A70     		strb	r2, [r3]
 267:main.c        ****             Em_EEPROM_Write(0u,array,2u);     
 759              		.loc 1 267 0
 760 0032 0D4B     		ldr	r3, .L15
 761 0034 0222     		movs	r2, #2
 762 0036 0F49     		ldr	r1, .L15+12
 763 0038 0020     		movs	r0, #0
 764 003a FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 268:main.c        ****             USB_check_flag = 1;
 765              		.loc 1 268 0
 766 003e 0E4B     		ldr	r3, .L15+16
 767 0040 0122     		movs	r2, #1
 768 0042 1A70     		strb	r2, [r3]
 269:main.c        ****         }
 270:main.c        ****         else
 271:main.c        ****         {
 272:main.c        ****            //otherwise, we need to restart
 273:main.c        ****            array[0] = 1;
 274:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 275:main.c        ****             USB_Stop();
 276:main.c        ****             I2C_1_Stop();
 277:main.c        ****             CySoftwareReset();
 278:main.c        ****         }
 279:main.c        ****     }
 280:main.c        **** }
 769              		.loc 1 280 0
 770 0044 0EE0     		b	.L14
 771              	.L13:
 273:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 772              		.loc 1 273 0
 773 0046 0B4B     		ldr	r3, .L15+12
 774 0048 0122     		movs	r2, #1
 775 004a 1A70     		strb	r2, [r3]
 274:main.c        ****             USB_Stop();
 776              		.loc 1 274 0
 777 004c 064B     		ldr	r3, .L15
 778 004e 0222     		movs	r2, #2
 779 0050 0849     		ldr	r1, .L15+12
 780 0052 0020     		movs	r0, #0
 781 0054 FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 275:main.c        ****             I2C_1_Stop();
 782              		.loc 1 275 0
 783 0058 FFF7FEFF 		bl	USB_Stop
 276:main.c        ****             CySoftwareReset();
 784              		.loc 1 276 0
 785 005c FFF7FEFF 		bl	I2C_1_Stop
 277:main.c        ****         }
 786              		.loc 1 277 0
 787 0060 FFF7FEFF 		bl	CySoftwareReset
 788              	.L14:
 789              		.loc 1 280 0
 790 0064 00BF     		nop
 791 0066 80BD     		pop	{r7, pc}
 792              	.L16:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 20


 793              		.align	2
 794              	.L15:
 795 0068 00000000 		.word	Em_EEPROM_context
 796 006c 60000000 		.word	eepromArray
 797 0070 00000000 		.word	eepromReturnValue
 798 0074 00000000 		.word	array
 799 0078 00000000 		.word	USB_check_flag
 800              		.cfi_endproc
 801              	.LFE67:
 802              		.size	restartSystemCheck, .-restartSystemCheck
 803              		.global	__aeabi_fcmpgt
 804              		.global	__aeabi_fcmplt
 805              		.section	.text.LEAF_clip,"ax",%progbits
 806              		.align	2
 807              		.global	LEAF_clip
 808              		.thumb
 809              		.thumb_func
 810              		.type	LEAF_clip, %function
 811              	LEAF_clip:
 812              	.LFB68:
 281:main.c        ****     
 282:main.c        **** #define INV_440 0.0022727272727273f
 283:main.c        **** 
 284:main.c        **** float   LEAF_clip(float min, float val, float max)
 285:main.c        **** {
 813              		.loc 1 285 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 24
 816              		@ frame_needed = 1, uses_anonymous_args = 0
 817 0000 80B5     		push	{r7, lr}
 818              		.cfi_def_cfa_offset 8
 819              		.cfi_offset 7, -8
 820              		.cfi_offset 14, -4
 821 0002 86B0     		sub	sp, sp, #24
 822              		.cfi_def_cfa_offset 32
 823 0004 00AF     		add	r7, sp, #0
 824              		.cfi_def_cfa_register 7
 825 0006 F860     		str	r0, [r7, #12]	@ float
 826 0008 B960     		str	r1, [r7, #8]	@ float
 827 000a 7A60     		str	r2, [r7, #4]	@ float
 286:main.c        ****     float tempmin = min;
 828              		.loc 1 286 0
 829 000c FB68     		ldr	r3, [r7, #12]	@ float
 830 000e 7B61     		str	r3, [r7, #20]	@ float
 287:main.c        ****     float tempmax = max;
 831              		.loc 1 287 0
 832 0010 7B68     		ldr	r3, [r7, #4]	@ float
 833 0012 3B61     		str	r3, [r7, #16]	@ float
 288:main.c        ****     if (min > max)
 834              		.loc 1 288 0
 835 0014 7968     		ldr	r1, [r7, #4]	@ float
 836 0016 F868     		ldr	r0, [r7, #12]	@ float
 837 0018 FFF7FEFF 		bl	__aeabi_fcmpgt
 838 001c 0346     		mov	r3, r0
 839 001e 002B     		cmp	r3, #0
 840 0020 03D0     		beq	.L18
 289:main.c        ****     {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 21


 290:main.c        ****         tempmin = max;
 841              		.loc 1 290 0
 842 0022 7B68     		ldr	r3, [r7, #4]	@ float
 843 0024 7B61     		str	r3, [r7, #20]	@ float
 291:main.c        ****         tempmax = min;
 844              		.loc 1 291 0
 845 0026 FB68     		ldr	r3, [r7, #12]	@ float
 846 0028 3B61     		str	r3, [r7, #16]	@ float
 847              	.L18:
 292:main.c        ****     }
 293:main.c        ****     if (val < tempmin)
 848              		.loc 1 293 0
 849 002a 7969     		ldr	r1, [r7, #20]	@ float
 850 002c B868     		ldr	r0, [r7, #8]	@ float
 851 002e FFF7FEFF 		bl	__aeabi_fcmplt
 852 0032 0346     		mov	r3, r0
 853 0034 002B     		cmp	r3, #0
 854 0036 01D0     		beq	.L28
 294:main.c        ****     {
 295:main.c        ****         return tempmin;
 855              		.loc 1 295 0
 856 0038 7B69     		ldr	r3, [r7, #20]	@ float
 857 003a 09E0     		b	.L22
 858              	.L28:
 296:main.c        ****     }
 297:main.c        ****     else if (val > tempmax)
 859              		.loc 1 297 0
 860 003c 3969     		ldr	r1, [r7, #16]	@ float
 861 003e B868     		ldr	r0, [r7, #8]	@ float
 862 0040 FFF7FEFF 		bl	__aeabi_fcmpgt
 863 0044 0346     		mov	r3, r0
 864 0046 002B     		cmp	r3, #0
 865 0048 01D0     		beq	.L29
 298:main.c        ****     {
 299:main.c        ****         return tempmax;
 866              		.loc 1 299 0
 867 004a 3B69     		ldr	r3, [r7, #16]	@ float
 868 004c 00E0     		b	.L22
 869              	.L29:
 300:main.c        ****     }
 301:main.c        ****     else
 302:main.c        ****     {
 303:main.c        ****         return val;
 870              		.loc 1 303 0
 871 004e BB68     		ldr	r3, [r7, #8]	@ float
 872              	.L22:
 304:main.c        ****     }
 305:main.c        **** }
 873              		.loc 1 305 0
 874 0050 1846     		mov	r0, r3
 875 0052 1837     		adds	r7, r7, #24
 876              		.cfi_def_cfa_offset 8
 877 0054 BD46     		mov	sp, r7
 878              		.cfi_def_cfa_register 13
 879              		@ sp needed
 880 0056 80BD     		pop	{r7, pc}
 881              		.cfi_endproc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 22


 882              	.LFE68:
 883              		.size	LEAF_clip, .-LEAF_clip
 884              		.global	__aeabi_fcmple
 885              		.global	__aeabi_fmul
 886              		.section	.text.mtof,"ax",%progbits
 887              		.align	2
 888              		.global	mtof
 889              		.thumb
 890              		.thumb_func
 891              		.type	mtof, %function
 892              	mtof:
 893              	.LFB69:
 306:main.c        **** float mtof(float f)
 307:main.c        **** {
 894              		.loc 1 307 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 8
 897              		@ frame_needed = 1, uses_anonymous_args = 0
 898 0000 80B5     		push	{r7, lr}
 899              		.cfi_def_cfa_offset 8
 900              		.cfi_offset 7, -8
 901              		.cfi_offset 14, -4
 902 0002 82B0     		sub	sp, sp, #8
 903              		.cfi_def_cfa_offset 16
 904 0004 00AF     		add	r7, sp, #0
 905              		.cfi_def_cfa_register 7
 906 0006 7860     		str	r0, [r7, #4]	@ float
 308:main.c        ****     if (f <= -1500.0f) return(0);
 907              		.loc 1 308 0
 908 0008 1349     		ldr	r1, .L40
 909 000a 7868     		ldr	r0, [r7, #4]	@ float
 910 000c FFF7FEFF 		bl	__aeabi_fcmple
 911 0010 0346     		mov	r3, r0
 912 0012 002B     		cmp	r3, #0
 913 0014 02D0     		beq	.L38
 914              		.loc 1 308 0 is_stmt 0 discriminator 1
 915 0016 4FF00003 		mov	r3, #0
 916 001a 19E0     		b	.L33
 917              	.L38:
 309:main.c        ****     else if (f > 1499.0f) return(mtof(1499.0f));
 918              		.loc 1 309 0 is_stmt 1
 919 001c 0F49     		ldr	r1, .L40+4
 920 001e 7868     		ldr	r0, [r7, #4]	@ float
 921 0020 FFF7FEFF 		bl	__aeabi_fcmpgt
 922 0024 0346     		mov	r3, r0
 923 0026 002B     		cmp	r3, #0
 924 0028 04D0     		beq	.L39
 925              		.loc 1 309 0 is_stmt 0 discriminator 1
 926 002a 0C48     		ldr	r0, .L40+4
 927 002c FFF7FEFF 		bl	mtof
 928 0030 0346     		mov	r3, r0
 929 0032 0DE0     		b	.L33
 930              	.L39:
 310:main.c        ****     else return (8.17579891564f * expf(0.0577622650f * f));
 931              		.loc 1 310 0 is_stmt 1
 932 0034 0A49     		ldr	r1, .L40+8
 933 0036 7868     		ldr	r0, [r7, #4]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 23


 934 0038 FFF7FEFF 		bl	__aeabi_fmul
 935 003c 0346     		mov	r3, r0
 936 003e 1846     		mov	r0, r3
 937 0040 FFF7FEFF 		bl	expf
 938 0044 0346     		mov	r3, r0
 939 0046 0749     		ldr	r1, .L40+12
 940 0048 1846     		mov	r0, r3
 941 004a FFF7FEFF 		bl	__aeabi_fmul
 942 004e 0346     		mov	r3, r0
 943              	.L33:
 311:main.c        **** }
 944              		.loc 1 311 0
 945 0050 1846     		mov	r0, r3
 946 0052 0837     		adds	r7, r7, #8
 947              		.cfi_def_cfa_offset 8
 948 0054 BD46     		mov	sp, r7
 949              		.cfi_def_cfa_register 13
 950              		@ sp needed
 951 0056 80BD     		pop	{r7, pc}
 952              	.L41:
 953              		.align	2
 954              	.L40:
 955 0058 0080BBC4 		.word	-994344960
 956 005c 0060BB44 		.word	1153130496
 957 0060 20986C3D 		.word	1030527008
 958 0064 13D00241 		.word	1090703379
 959              		.cfi_endproc
 960              	.LFE69:
 961              		.size	mtof, .-mtof
 962              		.section	.text.ftom,"ax",%progbits
 963              		.align	2
 964              		.global	ftom
 965              		.thumb
 966              		.thumb_func
 967              		.type	ftom, %function
 968              	ftom:
 969              	.LFB70:
 312:main.c        **** 
 313:main.c        **** float ftom(float f)
 314:main.c        **** {
 970              		.loc 1 314 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 8
 973              		@ frame_needed = 1, uses_anonymous_args = 0
 974 0000 80B5     		push	{r7, lr}
 975              		.cfi_def_cfa_offset 8
 976              		.cfi_offset 7, -8
 977              		.cfi_offset 14, -4
 978 0002 82B0     		sub	sp, sp, #8
 979              		.cfi_def_cfa_offset 16
 980 0004 00AF     		add	r7, sp, #0
 981              		.cfi_def_cfa_register 7
 982 0006 7860     		str	r0, [r7, #4]	@ float
 315:main.c        ****     return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 983              		.loc 1 315 0
 984 0008 4FF00001 		mov	r1, #0
 985 000c 7868     		ldr	r0, [r7, #4]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 24


 986 000e FFF7FEFF 		bl	__aeabi_fcmpgt
 987 0012 0346     		mov	r3, r0
 988 0014 002B     		cmp	r3, #0
 989 0016 0ED0     		beq	.L48
 990              		.loc 1 315 0 is_stmt 0 discriminator 1
 991 0018 0949     		ldr	r1, .L49
 992 001a 7868     		ldr	r0, [r7, #4]	@ float
 993 001c FFF7FEFF 		bl	__aeabi_fmul
 994 0020 0346     		mov	r3, r0
 995 0022 1846     		mov	r0, r3
 996 0024 FFF7FEFF 		bl	logf
 997 0028 0346     		mov	r3, r0
 998 002a 0649     		ldr	r1, .L49+4
 999 002c 1846     		mov	r0, r3
 1000 002e FFF7FEFF 		bl	__aeabi_fmul
 1001 0032 0346     		mov	r3, r0
 1002 0034 00E0     		b	.L46
 1003              	.L48:
 1004              		.loc 1 315 0 discriminator 2
 1005 0036 044B     		ldr	r3, .L49+8
 1006              	.L46:
 316:main.c        **** }
 1007              		.loc 1 316 0 is_stmt 1 discriminator 5
 1008 0038 1846     		mov	r0, r3
 1009 003a 0837     		adds	r7, r7, #8
 1010              		.cfi_def_cfa_offset 8
 1011 003c BD46     		mov	sp, r7
 1012              		.cfi_def_cfa_register 13
 1013              		@ sp needed
 1014 003e 80BD     		pop	{r7, pc}
 1015              	.L50:
 1016              		.align	2
 1017              	.L49:
 1018 0040 D27EFA3D 		.word	1039826642
 1019 0044 AC7F8A41 		.word	1099595692
 1020 0048 0080BBC4 		.word	-994344960
 1021              		.cfi_endproc
 1022              	.LFE70:
 1023              		.size	ftom, .-ftom
 1024              		.global	__aeabi_fsub
 1025              		.global	__aeabi_fadd
 1026              		.section	.text.LEAF_interpolation_linear,"ax",%progbits
 1027              		.align	2
 1028              		.global	LEAF_interpolation_linear
 1029              		.thumb
 1030              		.thumb_func
 1031              		.type	LEAF_interpolation_linear, %function
 1032              	LEAF_interpolation_linear:
 1033              	.LFB71:
 317:main.c        **** 
 318:main.c        **** // alpha, [0.0, 1.0]
 319:main.c        **** float LEAF_interpolation_linear (float A, float B, float alpha)
 320:main.c        **** {
 1034              		.loc 1 320 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 24
 1037              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 25


 1038 0000 80B5     		push	{r7, lr}
 1039              		.cfi_def_cfa_offset 8
 1040              		.cfi_offset 7, -8
 1041              		.cfi_offset 14, -4
 1042 0002 86B0     		sub	sp, sp, #24
 1043              		.cfi_def_cfa_offset 32
 1044 0004 00AF     		add	r7, sp, #0
 1045              		.cfi_def_cfa_register 7
 1046 0006 F860     		str	r0, [r7, #12]	@ float
 1047 0008 B960     		str	r1, [r7, #8]	@ float
 1048 000a 7A60     		str	r2, [r7, #4]	@ float
 321:main.c        ****     float omAlpha = 1.0f - alpha;
 1049              		.loc 1 321 0
 1050 000c 7968     		ldr	r1, [r7, #4]	@ float
 1051 000e 4FF07E50 		mov	r0, #1065353216
 1052 0012 FFF7FEFF 		bl	__aeabi_fsub
 1053 0016 0346     		mov	r3, r0
 1054 0018 7B61     		str	r3, [r7, #20]	@ float
 322:main.c        ****     
 323:main.c        ****     // First 1/2 of interpolation
 324:main.c        ****     float out = A * omAlpha;
 1055              		.loc 1 324 0
 1056 001a 7969     		ldr	r1, [r7, #20]	@ float
 1057 001c F868     		ldr	r0, [r7, #12]	@ float
 1058 001e FFF7FEFF 		bl	__aeabi_fmul
 1059 0022 0346     		mov	r3, r0
 1060 0024 3B61     		str	r3, [r7, #16]	@ float
 325:main.c        ****     
 326:main.c        ****     out += B * alpha;
 1061              		.loc 1 326 0
 1062 0026 7968     		ldr	r1, [r7, #4]	@ float
 1063 0028 B868     		ldr	r0, [r7, #8]	@ float
 1064 002a FFF7FEFF 		bl	__aeabi_fmul
 1065 002e 0346     		mov	r3, r0
 1066 0030 1946     		mov	r1, r3
 1067 0032 3869     		ldr	r0, [r7, #16]	@ float
 1068 0034 FFF7FEFF 		bl	__aeabi_fadd
 1069 0038 0346     		mov	r3, r0
 1070 003a 3B61     		str	r3, [r7, #16]	@ float
 327:main.c        ****     
 328:main.c        ****     return out;
 1071              		.loc 1 328 0
 1072 003c 3B69     		ldr	r3, [r7, #16]	@ float
 329:main.c        **** }
 1073              		.loc 1 329 0
 1074 003e 1846     		mov	r0, r3
 1075 0040 1837     		adds	r7, r7, #24
 1076              		.cfi_def_cfa_offset 8
 1077 0042 BD46     		mov	sp, r7
 1078              		.cfi_def_cfa_register 13
 1079              		@ sp needed
 1080 0044 80BD     		pop	{r7, pc}
 1081              		.cfi_endproc
 1082              	.LFE71:
 1083              		.size	LEAF_interpolation_linear, .-LEAF_interpolation_linear
 1084              		.comm	I2Cbuff1,256,4
 1085              		.comm	I2Cbuff2,16,4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 26


 1086              		.global	send_it
 1087 0046 00BF     		.bss
 1088              		.type	send_it, %object
 1089              		.size	send_it, 1
 1090              	send_it:
 1091 006c 00       		.space	1
 1092              		.global	mux_states
 1093              		.data
 1094 000a 0000     		.align	2
 1095              		.type	mux_states, %object
 1096              		.size	mux_states, 24
 1097              	mux_states:
 1098 000c 05       		.byte	5
 1099 000d 00       		.byte	0
 1100 000e 05       		.byte	5
 1101 000f 01       		.byte	1
 1102 0010 05       		.byte	5
 1103 0011 02       		.byte	2
 1104 0012 05       		.byte	5
 1105 0013 03       		.byte	3
 1106 0014 05       		.byte	5
 1107 0015 04       		.byte	4
 1108 0016 00       		.byte	0
 1109 0017 00       		.byte	0
 1110 0018 01       		.byte	1
 1111 0019 00       		.byte	0
 1112 001a 03       		.byte	3
 1113 001b 00       		.byte	0
 1114 001c 04       		.byte	4
 1115 001d 00       		.byte	0
 1116 001e 02       		.byte	2
 1117 001f 00       		.byte	0
 1118 0020 05       		.byte	5
 1119 0021 05       		.byte	5
 1120 0022 06       		.byte	6
 1121 0023 00       		.byte	0
 1122              		.global	i2c_skipped
 1123              		.align	2
 1124              		.type	i2c_skipped, %object
 1125              		.size	i2c_skipped, 12
 1126              	i2c_skipped:
 1127 0024 00       		.byte	0
 1128 0025 00       		.byte	0
 1129 0026 00       		.byte	0
 1130 0027 00       		.byte	0
 1131 0028 00       		.byte	0
 1132 0029 00       		.byte	0
 1133 002a 00       		.byte	0
 1134 002b 01       		.byte	1
 1135 002c 01       		.byte	1
 1136 002d 01       		.byte	1
 1137 002e 00       		.byte	0
 1138 002f 00       		.byte	0
 1139              		.global	pedals_low
 1140              		.align	2
 1141              		.type	pedals_low, %object
 1142              		.size	pedals_low, 20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 27


 1143              	pedals_low:
 1144 0030 830A     		.short	2691
 1145 0032 0109     		.short	2305
 1146 0034 9909     		.short	2457
 1147 0036 0E02     		.short	526
 1148 0038 9A0E     		.short	3738
 1149 003a 0309     		.short	2307
 1150 003c C60B     		.short	3014
 1151 003e 8E08     		.short	2190
 1152 0040 E90A     		.short	2793
 1153 0042 2605     		.short	1318
 1154              		.global	pedals_high
 1155              		.align	2
 1156              		.type	pedals_high, %object
 1157              		.size	pedals_high, 20
 1158              	pedals_high:
 1159 0044 ED0A     		.short	2797
 1160 0046 6509     		.short	2405
 1161 0048 140A     		.short	2580
 1162 004a 8702     		.short	647
 1163 004c 0E0F     		.short	3854
 1164 004e 9D09     		.short	2461
 1165 0050 450C     		.short	3141
 1166 0052 3109     		.short	2353
 1167 0054 760B     		.short	2934
 1168 0056 E005     		.short	1504
 1169              		.global	deadzone
 1170              		.align	1
 1171              		.type	deadzone, %object
 1172              		.size	deadzone, 2
 1173              	deadzone:
 1174 0058 9600     		.short	150
 1175              		.global	volumePedal
 1176              		.align	1
 1177              		.type	volumePedal, %object
 1178              		.size	volumePedal, 2
 1179              	volumePedal:
 1180 005a FF0F     		.short	4095
 1181              		.comm	processed_pedals,20,4
 1182              		.comm	prev_processed_pedals,20,4
 1183              		.comm	pedals8bit,10,4
 1184              		.comm	prev_processed_volumePedal,2,2
 1185              		.comm	processed_volumePedal,2,2
 1186              		.global	fretMeasurements
 1187              		.align	2
 1188              		.type	fretMeasurements, %object
 1189              		.size	fretMeasurements, 64
 1190              	fretMeasurements:
 1191 005c 001E7547 		.word	1198857728
 1192 0060 00A07047 		.word	1198563328
 1193 0064 0052F846 		.word	1190679040
 1194 0068 00000000 		.word	0
 1195 006c 00B01A47 		.word	1192931328
 1196 0070 001C2247 		.word	1193417728
 1197 0074 00507546 		.word	1182093312
 1198 0078 00000000 		.word	0
 1199 007c 0000D746 		.word	1188495360
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 28


 1200 0080 00F0EB46 		.word	1189867520
 1201 0084 00280446 		.word	1174677504
 1202 0088 00000000 		.word	0
 1203 008c 00481446 		.word	1175734272
 1204 0090 00805446 		.word	1179942912
 1205 0094 00202745 		.word	1160192000
 1206 0098 00000000 		.word	0
 1207              		.global	currentPresetSelection
 1208              		.bss
 1209 006d 000000   		.align	2
 1210              		.type	currentPresetSelection, %object
 1211              		.size	currentPresetSelection, 4
 1212              	currentPresetSelection:
 1213 0070 00000000 		.space	4
 1214              		.comm	presetNamesArray,896,4
 1215              		.global	presetNumberToLoad
 1216              		.type	presetNumberToLoad, %object
 1217              		.size	presetNumberToLoad, 1
 1218              	presetNumberToLoad:
 1219 0074 00       		.space	1
 1220              		.global	presetLoadedResponse
 1221              		.data
 1222              		.align	2
 1223              		.type	presetLoadedResponse, %object
 1224              		.size	presetLoadedResponse, 2
 1225              	presetLoadedResponse:
 1226 009c FF       		.byte	-1
 1227 009d 00       		.byte	0
 1228              		.comm	macroNamesArray,7168,4
 1229              		.global	fretScaling
 1230 009e 0000     		.align	2
 1231              		.type	fretScaling, %object
 1232              		.size	fretScaling, 16
 1233              	fretScaling:
 1234 00a0 0000803F 		.word	1065353216
 1235 00a4 ABAA2A3F 		.word	1059760811
 1236 00a8 0000003F 		.word	1056964608
 1237 00ac 0000803E 		.word	1048576000
 1238              		.comm	pedalRatios,40,4
 1239              		.global	last_mux
 1240              		.type	last_mux, %object
 1241              		.size	last_mux, 1
 1242              	last_mux:
 1243 00b0 01       		.byte	1
 1244              		.global	main_counter
 1245              		.bss
 1246              		.type	main_counter, %object
 1247              		.size	main_counter, 1
 1248              	main_counter:
 1249 0075 00       		.space	1
 1250              		.global	neck
 1251              		.type	neck, %object
 1252              		.size	neck, 1
 1253              	neck:
 1254 0076 00       		.space	1
 1255              		.global	dualSlider
 1256              		.type	dualSlider, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 29


 1257              		.size	dualSlider, 1
 1258              	dualSlider:
 1259 0077 00       		.space	1
 1260              		.global	enterUp
 1261              		.data
 1262              		.type	enterUp, %object
 1263              		.size	enterUp, 1
 1264              	enterUp:
 1265 00b1 01       		.byte	1
 1266              		.global	voice
 1267              		.bss
 1268              		.type	voice, %object
 1269              		.size	voice, 1
 1270              	voice:
 1271 0078 00       		.space	1
 1272              		.global	editUp
 1273              		.data
 1274              		.type	editUp, %object
 1275              		.size	editUp, 1
 1276              	editUp:
 1277 00b2 01       		.byte	1
 1278              		.global	oct1Up
 1279              		.type	oct1Up, %object
 1280              		.size	oct1Up, 1
 1281              	oct1Up:
 1282 00b3 01       		.byte	1
 1283              		.global	oct4Up
 1284              		.type	oct4Up, %object
 1285              		.size	oct4Up, 1
 1286              	oct4Up:
 1287 00b4 01       		.byte	1
 1288              		.comm	encoderVal,16,4
 1289              		.global	encoderNum
 1290              		.bss
 1291 0079 000000   		.align	2
 1292              		.type	encoderNum, %object
 1293              		.size	encoderNum, 4
 1294              	encoderNum:
 1295 007c 00000000 		.space	4
 1296              		.global	button1Up
 1297              		.type	button1Up, %object
 1298              		.size	button1Up, 1
 1299              	button1Up:
 1300 0080 00       		.space	1
 1301              		.global	button2Up
 1302              		.type	button2Up, %object
 1303              		.size	button2Up, 1
 1304              	button2Up:
 1305 0081 00       		.space	1
 1306              		.global	button3Up
 1307              		.type	button3Up, %object
 1308              		.size	button3Up, 1
 1309              	button3Up:
 1310 0082 00       		.space	1
 1311              		.global	button4Up
 1312              		.type	button4Up, %object
 1313              		.size	button4Up, 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 30


 1314              	button4Up:
 1315 0083 00       		.space	1
 1316              		.global	patchNum
 1317              		.type	patchNum, %object
 1318              		.size	patchNum, 1
 1319              	patchNum:
 1320 0084 00       		.space	1
 1321              		.comm	copedent,3696,4
 1322              		.comm	copedentNamesArray,98,4
 1323              		.comm	prevStringPitchBend,48,4
 1324              		.comm	pedals,480,4
 1325              		.comm	openStringFrequencies,48,4
 1326              		.comm	stringMappedPositions,48,4
 1327              		.comm	invStringMappedPositions,48,4
 1328              		.comm	stringFrequencies,48,4
 1329              		.comm	stringOctave,48,4
 1330              		.comm	stringPitch,48,4
 1331              		.comm	stringMIDI,48,4
 1332              		.comm	openStringMIDI_Int,48,4
 1333              		.global	OLEDcount
 1334 0085 000000   		.align	2
 1335              		.type	OLEDcount, %object
 1336              		.size	OLEDcount, 4
 1337              	OLEDcount:
 1338 0088 00000000 		.space	4
 1339              		.global	mainOLEDWaitingToSend
 1340              		.align	2
 1341              		.type	mainOLEDWaitingToSend, %object
 1342              		.size	mainOLEDWaitingToSend, 4
 1343              	mainOLEDWaitingToSend:
 1344 008c 00000000 		.space	4
 1345              		.global	macroOLEDWaitingToSend
 1346              		.align	2
 1347              		.type	macroOLEDWaitingToSend, %object
 1348              		.size	macroOLEDWaitingToSend, 4
 1349              	macroOLEDWaitingToSend:
 1350 0090 00000000 		.space	4
 1351              		.comm	presetAlreadyDisplayed,256,4
 1352              		.global	pedals_float
 1353              		.align	2
 1354              		.type	pedals_float, %object
 1355              		.size	pedals_float, 40
 1356              	pedals_float:
 1357 0094 00000000 		.space	40
 1357      00000000 
 1357      00000000 
 1357      00000000 
 1357      00000000 
 1358              		.global	__aeabi_fdiv
 1359              		.section	.text.map,"ax",%progbits
 1360              		.align	2
 1361              		.global	map
 1362              		.thumb
 1363              		.thumb_func
 1364              		.type	map, %function
 1365              	map:
 1366              	.LFB72:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 31


 330:main.c        **** 
 331:main.c        **** 
 332:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode);
 333:main.c        **** uint8 I2C_MasterReadBlocking(uint8 i2CAddr, uint8 nbytes, uint8_t mode);
 334:main.c        **** void USB_service(void);
 335:main.c        **** 
 336:main.c        **** volatile uint8_t I2Cbuff1[256];
 337:main.c        **** volatile uint8_t I2Cbuff2[16];
 338:main.c        **** volatile uint8_t send_it = 0;
 339:main.c        **** 
 340:main.c        **** 
 341:main.c        **** //first mux, 0x70 is first element of array. 
 342:main.c        **** //If sent to output 5 of this first mux, signal goes to 
 343:main.c        **** // the ethernet cable, and a second mux is in the foot pedal at the end of that cable. This channel
 344:main.c        **** //so the order of I2C communication is ( foot pedals 1-5, knee levers 1-5, volume pedal, OLED displ
 345:main.c        **** uint8_t mux_states[12][2] = {{5,0}, {5,1}, {5,2}, {5,3}, {5,4}, {0, 0}, {1, 0}, {3, 0}, {4, 0}, {2,
 346:main.c        **** uint8_t i2c_skipped[12] = {0,0,0,0,0,0,0,1,1,1,0,0}; //so that pedals and levers can be marked as s
 347:main.c        **** uint16_t pedals_low[10] = {2691, 2305, 2457, 526, 3738, 2307, 3014, 2190, 2793, 1318};
 348:main.c        **** uint16_t pedals_high[10] = {2797, 2405, 2580, 647, 3854, 2461, 3141, 2353, 2934, 1504};
 349:main.c        **** uint16_t deadzone = 150;
 350:main.c        **** uint16_t volumePedal = 4095;
 351:main.c        **** uint16_t processed_pedals[10];
 352:main.c        **** uint16_t prev_processed_pedals[10];
 353:main.c        **** uint8_t pedals8bit[10];
 354:main.c        **** int16_t prev_processed_volumePedal;
 355:main.c        **** int16_t processed_volumePedal;
 356:main.c        **** 
 357:main.c        **** 
 358:main.c        **** float fretMeasurements[4][4] ={
 359:main.c        **** 
 360:main.c        **** 		{62750.0f, 61600.0f, 31785.0f, 0.0f },
 361:main.c        **** 
 362:main.c        **** 		{39600.0f, 41500.0f, 15700.0f, 0.0f},
 363:main.c        **** 
 364:main.c        **** 		{27520.0f, 30200.0f, 8458.0f, 0.0f},
 365:main.c        **** 
 366:main.c        **** 		{9490.0f, 13600.0f, 2674.0f, 0.0f}
 367:main.c        **** 
 368:main.c        **** 	};
 369:main.c        **** #define NUM_MACROS 8
 370:main.c        **** #define MAX_NUM_PRESETS 64
 371:main.c        **** int currentPresetSelection = 0;
 372:main.c        **** uint8_t presetNamesArray[MAX_NUM_PRESETS][NAME_LENGTH_IN_BYTES];
 373:main.c        **** uint8_t presetNumberToLoad = 0;
 374:main.c        **** uint8_t presetLoadedResponse[2] = {255, 0};
 375:main.c        **** 
 376:main.c        **** 
 377:main.c        **** uint8_t macroNamesArray[MAX_NUM_PRESETS][NUM_MACROS][NAME_LENGTH_IN_BYTES];
 378:main.c        **** 
 379:main.c        **** 
 380:main.c        **** 
 381:main.c        **** float fretScaling[4] = {1.0f, 0.6666666666666f, 0.5f, 0.25f};
 382:main.c        **** 
 383:main.c        **** 
 384:main.c        **** #define MAX_ENCODERS 16
 385:main.c        **** 
 386:main.c        **** float pedalRatios[10];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 32


 387:main.c        **** uint8_t last_mux = 1;
 388:main.c        **** volatile uint8_t main_counter = 0;
 389:main.c        **** uint8_t neck = 0;
 390:main.c        **** uint8_t dualSlider = 0;
 391:main.c        **** uint8_t enterUp = 1;
 392:main.c        **** uint8_t voice = 0;
 393:main.c        **** uint8_t editUp = 1;
 394:main.c        **** uint8_t oct1Up = 1;
 395:main.c        **** uint8_t oct4Up = 1;
 396:main.c        **** 
 397:main.c        **** volatile uint8_t encoderVal[MAX_ENCODERS];
 398:main.c        **** int encoderNum = 0;
 399:main.c        **** uint8_t button1Up = 0;
 400:main.c        **** uint8_t button2Up = 0;
 401:main.c        **** uint8_t button3Up = 0;
 402:main.c        **** uint8_t button4Up = 0;
 403:main.c        **** uint8_t patchNum = 0;
 404:main.c        **** #define NUM_STRINGS 12
 405:main.c        **** #define NUM_PEDALS 10
 406:main.c        **** 
 407:main.c        **** 
 408:main.c        **** #define MAX_NUM_COPEDENTS 7
 409:main.c        **** float copedent[MAX_NUM_COPEDENTS][11][NUM_STRINGS];
 410:main.c        **** uint8_t copedentNamesArray[MAX_NUM_COPEDENTS][NAME_LENGTH_IN_BYTES];
 411:main.c        **** 
 412:main.c        **** float prevStringPitchBend[NUM_STRINGS];
 413:main.c        **** 
 414:main.c        **** float pedals[NUM_PEDALS][NUM_STRINGS];
 415:main.c        **** 
 416:main.c        **** 
 417:main.c        **** float openStringFrequencies[NUM_STRINGS];
 418:main.c        **** float stringMappedPositions[NUM_STRINGS];
 419:main.c        **** float invStringMappedPositions[NUM_STRINGS];
 420:main.c        **** float stringFrequencies[NUM_STRINGS];
 421:main.c        **** float stringOctave[NUM_STRINGS];
 422:main.c        **** float stringPitch[NUM_STRINGS];
 423:main.c        **** float stringMIDI[NUM_STRINGS];
 424:main.c        **** int openStringMIDI_Int[NUM_STRINGS];
 425:main.c        **** int OLEDcount = 0;
 426:main.c        **** 
 427:main.c        **** int mainOLEDWaitingToSend = 0;
 428:main.c        **** int macroOLEDWaitingToSend = 0;
 429:main.c        **** 
 430:main.c        **** int presetAlreadyDisplayed[MAX_NUM_PRESETS];
 431:main.c        **** 
 432:main.c        **** float pedals_float[NUM_PEDALS] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
 433:main.c        **** 
 434:main.c        **** float map(float value, float istart, float istop, float ostart, float ostop)
 435:main.c        **** {
 1367              		.loc 1 435 0
 1368              		.cfi_startproc
 1369              		@ args = 4, pretend = 0, frame = 16
 1370              		@ frame_needed = 1, uses_anonymous_args = 0
 1371 0000 B0B5     		push	{r4, r5, r7, lr}
 1372              		.cfi_def_cfa_offset 16
 1373              		.cfi_offset 4, -16
 1374              		.cfi_offset 5, -12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 33


 1375              		.cfi_offset 7, -8
 1376              		.cfi_offset 14, -4
 1377 0002 84B0     		sub	sp, sp, #16
 1378              		.cfi_def_cfa_offset 32
 1379 0004 00AF     		add	r7, sp, #0
 1380              		.cfi_def_cfa_register 7
 1381 0006 F860     		str	r0, [r7, #12]	@ float
 1382 0008 B960     		str	r1, [r7, #8]	@ float
 1383 000a 7A60     		str	r2, [r7, #4]	@ float
 1384 000c 3B60     		str	r3, [r7]	@ float
 436:main.c        ****     return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 1385              		.loc 1 436 0
 1386 000e 3968     		ldr	r1, [r7]	@ float
 1387 0010 386A     		ldr	r0, [r7, #32]	@ float
 1388 0012 FFF7FEFF 		bl	__aeabi_fsub
 1389 0016 0346     		mov	r3, r0
 1390 0018 1C46     		mov	r4, r3
 1391 001a B968     		ldr	r1, [r7, #8]	@ float
 1392 001c F868     		ldr	r0, [r7, #12]	@ float
 1393 001e FFF7FEFF 		bl	__aeabi_fsub
 1394 0022 0346     		mov	r3, r0
 1395 0024 1D46     		mov	r5, r3
 1396 0026 B968     		ldr	r1, [r7, #8]	@ float
 1397 0028 7868     		ldr	r0, [r7, #4]	@ float
 1398 002a FFF7FEFF 		bl	__aeabi_fsub
 1399 002e 0346     		mov	r3, r0
 1400 0030 1946     		mov	r1, r3
 1401 0032 2846     		mov	r0, r5
 1402 0034 FFF7FEFF 		bl	__aeabi_fdiv
 1403 0038 0346     		mov	r3, r0
 1404 003a 1946     		mov	r1, r3
 1405 003c 2046     		mov	r0, r4
 1406 003e FFF7FEFF 		bl	__aeabi_fmul
 1407 0042 0346     		mov	r3, r0
 1408 0044 3968     		ldr	r1, [r7]	@ float
 1409 0046 1846     		mov	r0, r3
 1410 0048 FFF7FEFF 		bl	__aeabi_fadd
 1411 004c 0346     		mov	r3, r0
 437:main.c        **** }
 1412              		.loc 1 437 0
 1413 004e 1846     		mov	r0, r3
 1414 0050 1037     		adds	r7, r7, #16
 1415              		.cfi_def_cfa_offset 16
 1416 0052 BD46     		mov	sp, r7
 1417              		.cfi_def_cfa_register 13
 1418              		@ sp needed
 1419 0054 B0BD     		pop	{r4, r5, r7, pc}
 1420              		.cfi_endproc
 1421              	.LFE72:
 1422              		.size	map, .-map
 1423              		.global	currentNeck
 1424 0056 00BF     		.bss
 1425              		.align	2
 1426              		.type	currentNeck, %object
 1427              		.size	currentNeck, 4
 1428              	currentNeck:
 1429 00bc 00000000 		.space	4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 34


 1430              		.global	editMode
 1431              		.align	2
 1432              		.type	editMode, %object
 1433              		.size	editMode, 4
 1434              	editMode:
 1435 00c0 00000000 		.space	4
 1436              		.global	calibrationMode
 1437              		.align	2
 1438              		.type	calibrationMode, %object
 1439              		.size	calibrationMode, 4
 1440              	calibrationMode:
 1441 00c4 00000000 		.space	4
 1442              		.section	.text.burnInitialPedalZeroPositions,"ax",%progbits
 1443              		.align	2
 1444              		.global	burnInitialPedalZeroPositions
 1445              		.thumb
 1446              		.thumb_func
 1447              		.type	burnInitialPedalZeroPositions, %function
 1448              	burnInitialPedalZeroPositions:
 1449              	.LFB73:
 438:main.c        **** void displayCurrentPresetName();
 439:main.c        **** 
 440:main.c        **** int currentNeck = 0;
 441:main.c        **** 
 442:main.c        **** int editMode = 0;
 443:main.c        **** int calibrationMode = 0;
 444:main.c        **** 
 445:main.c        **** void burnInitialPedalZeroPositions()
 446:main.c        **** {
 1450              		.loc 1 446 0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 0
 1453              		@ frame_needed = 1, uses_anonymous_args = 0
 1454              		@ link register save eliminated.
 1455 0000 80B4     		push	{r7}
 1456              		.cfi_def_cfa_offset 4
 1457              		.cfi_offset 7, -4
 1458 0002 00AF     		add	r7, sp, #0
 1459              		.cfi_def_cfa_register 7
 447:main.c        ****     
 448:main.c        **** }
 1460              		.loc 1 448 0
 1461 0004 00BF     		nop
 1462 0006 BD46     		mov	sp, r7
 1463              		.cfi_def_cfa_register 13
 1464              		@ sp needed
 1465 0008 80BC     		pop	{r7}
 1466              		.cfi_restore 7
 1467              		.cfi_def_cfa_offset 0
 1468 000a 7047     		bx	lr
 1469              		.cfi_endproc
 1470              	.LFE73:
 1471              		.size	burnInitialPedalZeroPositions, .-burnInitialPedalZeroPositions
 1472              		.section	.text.calibratePedals,"ax",%progbits
 1473              		.align	2
 1474              		.global	calibratePedals
 1475              		.thumb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 35


 1476              		.thumb_func
 1477              		.type	calibratePedals, %function
 1478              	calibratePedals:
 1479              	.LFB74:
 449:main.c        **** 
 450:main.c        **** void calibratePedals()
 451:main.c        **** {
 1480              		.loc 1 451 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 1, uses_anonymous_args = 0
 1484              		@ link register save eliminated.
 1485 0000 80B4     		push	{r7}
 1486              		.cfi_def_cfa_offset 4
 1487              		.cfi_offset 7, -4
 1488 0002 00AF     		add	r7, sp, #0
 1489              		.cfi_def_cfa_register 7
 452:main.c        **** 
 453:main.c        ****     
 454:main.c        **** }
 1490              		.loc 1 454 0
 1491 0004 00BF     		nop
 1492 0006 BD46     		mov	sp, r7
 1493              		.cfi_def_cfa_register 13
 1494              		@ sp needed
 1495 0008 80BC     		pop	{r7}
 1496              		.cfi_restore 7
 1497              		.cfi_def_cfa_offset 0
 1498 000a 7047     		bx	lr
 1499              		.cfi_endproc
 1500              	.LFE74:
 1501              		.size	calibratePedals, .-calibratePedals
 1502              		.global	__aeabi_ui2f
 1503              		.global	__aeabi_i2f
 1504              		.global	__aeabi_f2uiz
 1505              		.section	.text.calculatePedalRatios,"ax",%progbits
 1506              		.align	2
 1507              		.global	calculatePedalRatios
 1508              		.thumb
 1509              		.thumb_func
 1510              		.type	calculatePedalRatios, %function
 1511              	calculatePedalRatios:
 1512              	.LFB75:
 455:main.c        **** 
 456:main.c        **** void calculatePedalRatios()
 457:main.c        **** {
 1513              		.loc 1 457 0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 8
 1516              		@ frame_needed = 1, uses_anonymous_args = 0
 1517 0000 90B5     		push	{r4, r7, lr}
 1518              		.cfi_def_cfa_offset 12
 1519              		.cfi_offset 4, -12
 1520              		.cfi_offset 7, -8
 1521              		.cfi_offset 14, -4
 1522 0002 83B0     		sub	sp, sp, #12
 1523              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 36


 1524 0004 00AF     		add	r7, sp, #0
 1525              		.cfi_def_cfa_register 7
 1526              	.LBB3:
 458:main.c        **** 
 459:main.c        ****     //add deadzones on edges of pedal sensing
 460:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 1527              		.loc 1 460 0
 1528 0006 0023     		movs	r3, #0
 1529 0008 7B60     		str	r3, [r7, #4]
 1530 000a 6EE0     		b	.L58
 1531              	.L59:
 1532              	.LBB4:
 461:main.c        ****     {
 462:main.c        **** 
 463:main.c        ****         float pedalDiff =(float)pedals_high[i] - (float)pedals_low[i];
 1533              		.loc 1 463 0 discriminator 3
 1534 000c 3A4A     		ldr	r2, .L60
 1535 000e 7B68     		ldr	r3, [r7, #4]
 1536 0010 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1537 0014 1846     		mov	r0, r3
 1538 0016 FFF7FEFF 		bl	__aeabi_ui2f
 1539 001a 0446     		mov	r4, r0
 1540 001c 374A     		ldr	r2, .L60+4
 1541 001e 7B68     		ldr	r3, [r7, #4]
 1542 0020 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1543 0024 1846     		mov	r0, r3
 1544 0026 FFF7FEFF 		bl	__aeabi_ui2f
 1545 002a 0346     		mov	r3, r0
 1546 002c 1946     		mov	r1, r3
 1547 002e 2046     		mov	r0, r4
 1548 0030 FFF7FEFF 		bl	__aeabi_fsub
 1549 0034 0346     		mov	r3, r0
 1550 0036 3B60     		str	r3, [r7]	@ float
 464:main.c        ****         pedals_low[i] = pedals_low[i] + (0.1f * pedalDiff);
 1551              		.loc 1 464 0 discriminator 3
 1552 0038 304A     		ldr	r2, .L60+4
 1553 003a 7B68     		ldr	r3, [r7, #4]
 1554 003c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1555 0040 1846     		mov	r0, r3
 1556 0042 FFF7FEFF 		bl	__aeabi_i2f
 1557 0046 0446     		mov	r4, r0
 1558 0048 2D49     		ldr	r1, .L60+8
 1559 004a 3868     		ldr	r0, [r7]	@ float
 1560 004c FFF7FEFF 		bl	__aeabi_fmul
 1561 0050 0346     		mov	r3, r0
 1562 0052 1946     		mov	r1, r3
 1563 0054 2046     		mov	r0, r4
 1564 0056 FFF7FEFF 		bl	__aeabi_fadd
 1565 005a 0346     		mov	r3, r0
 1566 005c 1846     		mov	r0, r3
 1567 005e FFF7FEFF 		bl	__aeabi_f2uiz
 1568 0062 0346     		mov	r3, r0
 1569 0064 99B2     		uxth	r1, r3
 1570 0066 254A     		ldr	r2, .L60+4
 1571 0068 7B68     		ldr	r3, [r7, #4]
 1572 006a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 465:main.c        ****         pedals_high[i] = pedals_high[i] - (0.1f * pedalDiff);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 37


 1573              		.loc 1 465 0 discriminator 3
 1574 006e 224A     		ldr	r2, .L60
 1575 0070 7B68     		ldr	r3, [r7, #4]
 1576 0072 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1577 0076 1846     		mov	r0, r3
 1578 0078 FFF7FEFF 		bl	__aeabi_i2f
 1579 007c 0446     		mov	r4, r0
 1580 007e 2049     		ldr	r1, .L60+8
 1581 0080 3868     		ldr	r0, [r7]	@ float
 1582 0082 FFF7FEFF 		bl	__aeabi_fmul
 1583 0086 0346     		mov	r3, r0
 1584 0088 1946     		mov	r1, r3
 1585 008a 2046     		mov	r0, r4
 1586 008c FFF7FEFF 		bl	__aeabi_fsub
 1587 0090 0346     		mov	r3, r0
 1588 0092 1846     		mov	r0, r3
 1589 0094 FFF7FEFF 		bl	__aeabi_f2uiz
 1590 0098 0346     		mov	r3, r0
 1591 009a 99B2     		uxth	r1, r3
 1592 009c 164A     		ldr	r2, .L60
 1593 009e 7B68     		ldr	r3, [r7, #4]
 1594 00a0 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 466:main.c        ****         pedalDiff =(float)pedals_high[i] - (float)pedals_low[i];
 1595              		.loc 1 466 0 discriminator 3
 1596 00a4 144A     		ldr	r2, .L60
 1597 00a6 7B68     		ldr	r3, [r7, #4]
 1598 00a8 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1599 00ac 1846     		mov	r0, r3
 1600 00ae FFF7FEFF 		bl	__aeabi_ui2f
 1601 00b2 0446     		mov	r4, r0
 1602 00b4 114A     		ldr	r2, .L60+4
 1603 00b6 7B68     		ldr	r3, [r7, #4]
 1604 00b8 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1605 00bc 1846     		mov	r0, r3
 1606 00be FFF7FEFF 		bl	__aeabi_ui2f
 1607 00c2 0346     		mov	r3, r0
 1608 00c4 1946     		mov	r1, r3
 1609 00c6 2046     		mov	r0, r4
 1610 00c8 FFF7FEFF 		bl	__aeabi_fsub
 1611 00cc 0346     		mov	r3, r0
 1612 00ce 3B60     		str	r3, [r7]	@ float
 467:main.c        ****         pedalRatios[i] = 4095.0f / pedalDiff;
 1613              		.loc 1 467 0 discriminator 3
 1614 00d0 3968     		ldr	r1, [r7]	@ float
 1615 00d2 0C48     		ldr	r0, .L60+12
 1616 00d4 FFF7FEFF 		bl	__aeabi_fdiv
 1617 00d8 0346     		mov	r3, r0
 1618 00da 1946     		mov	r1, r3
 1619 00dc 0A4A     		ldr	r2, .L60+16
 1620 00de 7B68     		ldr	r3, [r7, #4]
 1621 00e0 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 1622              	.LBE4:
 460:main.c        ****     {
 1623              		.loc 1 460 0 discriminator 3
 1624 00e4 7B68     		ldr	r3, [r7, #4]
 1625 00e6 0133     		adds	r3, r3, #1
 1626 00e8 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 38


 1627              	.L58:
 460:main.c        ****     {
 1628              		.loc 1 460 0 is_stmt 0 discriminator 1
 1629 00ea 7B68     		ldr	r3, [r7, #4]
 1630 00ec 092B     		cmp	r3, #9
 1631 00ee 8DDD     		ble	.L59
 1632              	.LBE3:
 468:main.c        ****     }
 469:main.c        **** }
 1633              		.loc 1 469 0 is_stmt 1
 1634 00f0 00BF     		nop
 1635 00f2 0C37     		adds	r7, r7, #12
 1636              		.cfi_def_cfa_offset 12
 1637 00f4 BD46     		mov	sp, r7
 1638              		.cfi_def_cfa_register 13
 1639              		@ sp needed
 1640 00f6 90BD     		pop	{r4, r7, pc}
 1641              	.L61:
 1642              		.align	2
 1643              	.L60:
 1644 00f8 00000000 		.word	pedals_high
 1645 00fc 00000000 		.word	pedals_low
 1646 0100 CDCCCC3D 		.word	1036831949
 1647 0104 00F07F45 		.word	1166012416
 1648 0108 00000000 		.word	pedalRatios
 1649              		.cfi_endproc
 1650              	.LFE75:
 1651              		.size	calculatePedalRatios, .-calculatePedalRatios
 1652              		.section	.rodata
 1653              		.align	2
 1654              	.LC0:
 1655 0400 2000     		.ascii	" \000"
 1656              		.global	__aeabi_f2iz
 1657              		.global	__aeabi_fcmpge
 1658 0402 0000     		.align	2
 1659              	.LC1:
 1660 0404 43414C49 		.ascii	"CALIBRATION\000"
 1660      42524154 
 1660      494F4E00 
 1661              		.align	2
 1662              	.LC2:
 1663 0410 4D4F5645 		.ascii	"MOVE PEDALS\000"
 1663      20504544 
 1663      414C5300 
 1664              		.align	2
 1665              	.LC3:
 1666 041c 414E4420 		.ascii	"AND LEVERS\000"
 1666      4C455645 
 1666      525300
 1667 0427 00       		.align	2
 1668              	.LC4:
 1669 0428 5448454E 		.ascii	"THEN EXIT\000"
 1669      20455849 
 1669      5400
 1670              		.global	__aeabi_fcmpeq
 1671              		.section	.text.main,"ax",%progbits
 1672              		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 39


 1673              		.global	main
 1674              		.thumb
 1675              		.thumb_func
 1676              		.type	main, %function
 1677              	main:
 1678              	.LFB76:
 470:main.c        **** int main(void)
 471:main.c        **** {
 1679              		.loc 1 471 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 136
 1682              		@ frame_needed = 1, uses_anonymous_args = 0
 1683 0000 90B5     		push	{r4, r7, lr}
 1684              		.cfi_def_cfa_offset 12
 1685              		.cfi_offset 4, -12
 1686              		.cfi_offset 7, -8
 1687              		.cfi_offset 14, -4
 1688 0002 A5B0     		sub	sp, sp, #148
 1689              		.cfi_def_cfa_offset 160
 1690 0004 02AF     		add	r7, sp, #8
 1691              		.cfi_def_cfa 7, 152
 472:main.c        ****     
 473:main.c        **** 	CYGlobalIntEnable; 
 1692              		.loc 1 473 0
 1693              		.syntax unified
 1694              	@ 473 "main.c" 1
 1695 0006 62B6     		CPSIE   i
 1696              	@ 0 "" 2
 474:main.c        **** 
 475:main.c        ****     EEPROM_Start();
 1697              		.loc 1 475 0
 1698              		.thumb
 1699              		.syntax unified
 1700 0008 FFF7FEFF 		bl	EEPROM_Start
 476:main.c        **** 
 477:main.c        **** 
 478:main.c        ****     
 479:main.c        ****     //read from eeprom which copedents are loaded on which necks
 480:main.c        ****     necks[0] = EEPROM_ReadByte(EEPROM_NECKS_OFFSET);
 1701              		.loc 1 480 0
 1702 000c 0020     		movs	r0, #0
 1703 000e FFF7FEFF 		bl	EEPROM_ReadByte
 1704 0012 0346     		mov	r3, r0
 1705 0014 1A46     		mov	r2, r3
 1706 0016 644B     		ldr	r3, .L200
 1707 0018 1A70     		strb	r2, [r3]
 481:main.c        ****     necks[1] = EEPROM_ReadByte(EEPROM_NECKS_OFFSET + 1);
 1708              		.loc 1 481 0
 1709 001a 0120     		movs	r0, #1
 1710 001c FFF7FEFF 		bl	EEPROM_ReadByte
 1711 0020 0346     		mov	r3, r0
 1712 0022 1A46     		mov	r2, r3
 1713 0024 604B     		ldr	r3, .L200
 1714 0026 5A70     		strb	r2, [r3, #1]
 1715              	.LBB5:
 482:main.c        ****     
 483:main.c        ****     for (int coped = 0; coped < MAX_NUM_COPEDENTS; coped++)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 40


 1716              		.loc 1 483 0
 1717 0028 0023     		movs	r3, #0
 1718 002a C7F88430 		str	r3, [r7, #132]
 1719 002e B0E0     		b	.L63
 1720              	.L70:
 1721              	.LBB6:
 484:main.c        ****     {
 485:main.c        ****         
 486:main.c        ****         for (int letter = 0; letter < NAME_LENGTH_IN_BYTES; letter++)
 1722              		.loc 1 486 0
 1723 0030 0023     		movs	r3, #0
 1724 0032 C7F88030 		str	r3, [r7, #128]
 1725 0036 29E0     		b	.L64
 1726              	.L65:
 487:main.c        ****         {
 488:main.c        ****                copedentNamesArray[coped][letter] = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + (coped*
 1727              		.loc 1 488 0 discriminator 3
 1728 0038 D7F88430 		ldr	r3, [r7, #132]
 1729 003c 9BB2     		uxth	r3, r3
 1730 003e 1A46     		mov	r2, r3	@ movhi
 1731 0040 1201     		lsls	r2, r2, #4
 1732 0042 1A44     		add	r2, r2, r3
 1733 0044 9200     		lsls	r2, r2, #2
 1734 0046 1A44     		add	r2, r2, r3
 1735 0048 5200     		lsls	r2, r2, #1
 1736 004a 1344     		add	r3, r3, r2
 1737 004c 5B00     		lsls	r3, r3, #1
 1738 004e 9AB2     		uxth	r2, r3
 1739 0050 D7F88030 		ldr	r3, [r7, #128]
 1740 0054 9BB2     		uxth	r3, r3
 1741 0056 1344     		add	r3, r3, r2
 1742 0058 9BB2     		uxth	r3, r3
 1743 005a 0233     		adds	r3, r3, #2
 1744 005c 9BB2     		uxth	r3, r3
 1745 005e 1846     		mov	r0, r3
 1746 0060 FFF7FEFF 		bl	EEPROM_ReadByte
 1747 0064 0346     		mov	r3, r0
 1748 0066 1846     		mov	r0, r3
 1749 0068 5049     		ldr	r1, .L200+4
 1750 006a D7F88420 		ldr	r2, [r7, #132]
 1751 006e 1346     		mov	r3, r2
 1752 0070 DB00     		lsls	r3, r3, #3
 1753 0072 9B1A     		subs	r3, r3, r2
 1754 0074 5B00     		lsls	r3, r3, #1
 1755 0076 CA18     		adds	r2, r1, r3
 1756 0078 D7F88030 		ldr	r3, [r7, #128]
 1757 007c 1344     		add	r3, r3, r2
 1758 007e 0246     		mov	r2, r0
 1759 0080 1A70     		strb	r2, [r3]
 486:main.c        ****         {
 1760              		.loc 1 486 0 discriminator 3
 1761 0082 D7F88030 		ldr	r3, [r7, #128]
 1762 0086 0133     		adds	r3, r3, #1
 1763 0088 C7F88030 		str	r3, [r7, #128]
 1764              	.L64:
 486:main.c        ****         {
 1765              		.loc 1 486 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 41


 1766 008c D7F88030 		ldr	r3, [r7, #128]
 1767 0090 0D2B     		cmp	r3, #13
 1768 0092 D1DD     		ble	.L65
 1769              	.LBE6:
 1770              	.LBB7:
 489:main.c        ****         }
 490:main.c        ****         for (int i = 0; i < 11; i++)
 1771              		.loc 1 490 0 is_stmt 1
 1772 0094 0023     		movs	r3, #0
 1773 0096 FB67     		str	r3, [r7, #124]
 1774 0098 73E0     		b	.L66
 1775              	.L69:
 1776              	.LBB8:
 491:main.c        ****     	{
 492:main.c        ****     		int pedalStartLoc = (i*24) + NAME_LENGTH_IN_BYTES;
 1777              		.loc 1 492 0
 1778 009a FA6F     		ldr	r2, [r7, #124]
 1779 009c 1346     		mov	r3, r2
 1780 009e 5B00     		lsls	r3, r3, #1
 1781 00a0 1344     		add	r3, r3, r2
 1782 00a2 DB00     		lsls	r3, r3, #3
 1783 00a4 0E33     		adds	r3, r3, #14
 1784 00a6 7B63     		str	r3, [r7, #52]
 1785              	.LBB9:
 493:main.c        ****             for (int j = 0; j < NUM_STRINGS; j++)
 1786              		.loc 1 493 0
 1787 00a8 0023     		movs	r3, #0
 1788 00aa BB67     		str	r3, [r7, #120]
 1789 00ac 63E0     		b	.L67
 1790              	.L68:
 1791              	.LBB10:
 494:main.c        ****     		{
 495:main.c        ****                 
 496:main.c        ****                 int stringStartLoc = (j*2) + NAME_LENGTH_IN_BYTES;
 1792              		.loc 1 496 0 discriminator 3
 1793 00ae BB6F     		ldr	r3, [r7, #120]
 1794 00b0 0733     		adds	r3, r3, #7
 1795 00b2 5B00     		lsls	r3, r3, #1
 1796 00b4 3B63     		str	r3, [r7, #48]
 497:main.c        ****                 uint16_t tempIntHigh = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + pe
 1797              		.loc 1 497 0 discriminator 3
 1798 00b6 3B6B     		ldr	r3, [r7, #48]
 1799 00b8 9AB2     		uxth	r2, r3
 1800 00ba 7B6B     		ldr	r3, [r7, #52]
 1801 00bc 9BB2     		uxth	r3, r3
 1802 00be 1344     		add	r3, r3, r2
 1803 00c0 9AB2     		uxth	r2, r3
 1804 00c2 D7F88430 		ldr	r3, [r7, #132]
 1805 00c6 9BB2     		uxth	r3, r3
 1806 00c8 1946     		mov	r1, r3	@ movhi
 1807 00ca 0901     		lsls	r1, r1, #4
 1808 00cc 1944     		add	r1, r1, r3
 1809 00ce 8900     		lsls	r1, r1, #2
 1810 00d0 1944     		add	r1, r1, r3
 1811 00d2 4900     		lsls	r1, r1, #1
 1812 00d4 0B44     		add	r3, r3, r1
 1813 00d6 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 42


 1814 00d8 9BB2     		uxth	r3, r3
 1815 00da 1344     		add	r3, r3, r2
 1816 00dc 9BB2     		uxth	r3, r3
 1817 00de 0233     		adds	r3, r3, #2
 1818 00e0 9BB2     		uxth	r3, r3
 1819 00e2 1846     		mov	r0, r3
 1820 00e4 FFF7FEFF 		bl	EEPROM_ReadByte
 1821 00e8 0346     		mov	r3, r0
 1822 00ea FB85     		strh	r3, [r7, #46]	@ movhi
 498:main.c        ****                 uint16_t tempIntLow = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + ped
 1823              		.loc 1 498 0 discriminator 3
 1824 00ec 3B6B     		ldr	r3, [r7, #48]
 1825 00ee 9AB2     		uxth	r2, r3
 1826 00f0 7B6B     		ldr	r3, [r7, #52]
 1827 00f2 9BB2     		uxth	r3, r3
 1828 00f4 1344     		add	r3, r3, r2
 1829 00f6 9AB2     		uxth	r2, r3
 1830 00f8 D7F88430 		ldr	r3, [r7, #132]
 1831 00fc 9BB2     		uxth	r3, r3
 1832 00fe 1946     		mov	r1, r3	@ movhi
 1833 0100 0901     		lsls	r1, r1, #4
 1834 0102 1944     		add	r1, r1, r3
 1835 0104 8900     		lsls	r1, r1, #2
 1836 0106 1944     		add	r1, r1, r3
 1837 0108 4900     		lsls	r1, r1, #1
 1838 010a 0B44     		add	r3, r3, r1
 1839 010c 5B00     		lsls	r3, r3, #1
 1840 010e 9BB2     		uxth	r3, r3
 1841 0110 1344     		add	r3, r3, r2
 1842 0112 9BB2     		uxth	r3, r3
 1843 0114 0333     		adds	r3, r3, #3
 1844 0116 9BB2     		uxth	r3, r3
 1845 0118 1846     		mov	r0, r3
 1846 011a FFF7FEFF 		bl	EEPROM_ReadByte
 1847 011e 0346     		mov	r3, r0
 1848 0120 BB85     		strh	r3, [r7, #44]	@ movhi
 499:main.c        ****                 copedent[coped][i][j] = (((float)((tempIntHigh << 8) + tempIntLow)) * 0.00390625f) 
 1849              		.loc 1 499 0 discriminator 3
 1850 0122 FB8D     		ldrh	r3, [r7, #46]
 1851 0124 1A02     		lsls	r2, r3, #8
 1852 0126 BB8D     		ldrh	r3, [r7, #44]
 1853 0128 1344     		add	r3, r3, r2
 1854 012a 1846     		mov	r0, r3
 1855 012c FFF7FEFF 		bl	__aeabi_i2f
 1856 0130 0346     		mov	r3, r0
 1857 0132 4FF06E51 		mov	r1, #998244352
 1858 0136 1846     		mov	r0, r3
 1859 0138 FFF7FEFF 		bl	__aeabi_fmul
 1860 013c 0346     		mov	r3, r0
 1861 013e 4FF08641 		mov	r1, #1124073472
 1862 0142 1846     		mov	r0, r3
 1863 0144 FFF7FEFF 		bl	__aeabi_fsub
 1864 0148 0346     		mov	r3, r0
 1865 014a 1C46     		mov	r4, r3
 1866 014c 1848     		ldr	r0, .L200+8
 1867 014e FB6F     		ldr	r3, [r7, #124]
 1868 0150 D7F88410 		ldr	r1, [r7, #132]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 43


 1869 0154 1A46     		mov	r2, r3
 1870 0156 5200     		lsls	r2, r2, #1
 1871 0158 1A44     		add	r2, r2, r3
 1872 015a 9300     		lsls	r3, r2, #2
 1873 015c 1A46     		mov	r2, r3
 1874 015e 0B46     		mov	r3, r1
 1875 0160 5B01     		lsls	r3, r3, #5
 1876 0162 0B44     		add	r3, r3, r1
 1877 0164 9B00     		lsls	r3, r3, #2
 1878 0166 1A44     		add	r2, r2, r3
 1879 0168 BB6F     		ldr	r3, [r7, #120]
 1880 016a 1344     		add	r3, r3, r2
 1881 016c 40F82340 		str	r4, [r0, r3, lsl #2]	@ float
 1882              	.LBE10:
 493:main.c        ****     		{
 1883              		.loc 1 493 0 discriminator 3
 1884 0170 BB6F     		ldr	r3, [r7, #120]
 1885 0172 0133     		adds	r3, r3, #1
 1886 0174 BB67     		str	r3, [r7, #120]
 1887              	.L67:
 493:main.c        ****     		{
 1888              		.loc 1 493 0 is_stmt 0 discriminator 1
 1889 0176 BB6F     		ldr	r3, [r7, #120]
 1890 0178 0B2B     		cmp	r3, #11
 1891 017a 98DD     		ble	.L68
 1892              	.LBE9:
 1893              	.LBE8:
 490:main.c        ****     	{
 1894              		.loc 1 490 0 is_stmt 1 discriminator 2
 1895 017c FB6F     		ldr	r3, [r7, #124]
 1896 017e 0133     		adds	r3, r3, #1
 1897 0180 FB67     		str	r3, [r7, #124]
 1898              	.L66:
 490:main.c        ****     	{
 1899              		.loc 1 490 0 is_stmt 0 discriminator 1
 1900 0182 FB6F     		ldr	r3, [r7, #124]
 1901 0184 0A2B     		cmp	r3, #10
 1902 0186 88DD     		ble	.L69
 1903              	.LBE7:
 483:main.c        ****     {
 1904              		.loc 1 483 0 is_stmt 1 discriminator 2
 1905 0188 D7F88430 		ldr	r3, [r7, #132]
 1906 018c 0133     		adds	r3, r3, #1
 1907 018e C7F88430 		str	r3, [r7, #132]
 1908              	.L63:
 483:main.c        ****     {
 1909              		.loc 1 483 0 is_stmt 0 discriminator 1
 1910 0192 D7F88430 		ldr	r3, [r7, #132]
 1911 0196 062B     		cmp	r3, #6
 1912 0198 7FF74AAF 		ble	.L70
 1913              	.LBE5:
 1914              	.LBB11:
 500:main.c        ****             }
 501:main.c        ****     	}
 502:main.c        ****     }
 503:main.c        **** 
 504:main.c        ****     //blank out the preset names array so that we can tell when we get the real names from the synt
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 44


 505:main.c        ****     for (int i = 0; i < MAX_NUM_PRESETS; i++)
 1915              		.loc 1 505 0 is_stmt 1
 1916 019c 0023     		movs	r3, #0
 1917 019e 7B67     		str	r3, [r7, #116]
 1918 01a0 21E0     		b	.L71
 1919              	.L74:
 1920              	.LBB12:
 506:main.c        ****     {
 507:main.c        ****         for (int j = 0; j < NAME_LENGTH_IN_BYTES; j++)
 1921              		.loc 1 507 0
 1922 01a2 0023     		movs	r3, #0
 1923 01a4 3B67     		str	r3, [r7, #112]
 1924 01a6 13E0     		b	.L72
 1925              	.L201:
 1926              		.align	2
 1927              	.L200:
 1928 01a8 00000000 		.word	necks
 1929 01ac 00000000 		.word	copedentNamesArray
 1930 01b0 00000000 		.word	copedent
 1931              	.L73:
 508:main.c        ****         {
 509:main.c        ****             presetNamesArray[i][j] = 255;
 1932              		.loc 1 509 0 discriminator 3
 1933 01b4 BF49     		ldr	r1, .L202
 1934 01b6 7A6F     		ldr	r2, [r7, #116]
 1935 01b8 1346     		mov	r3, r2
 1936 01ba DB00     		lsls	r3, r3, #3
 1937 01bc 9B1A     		subs	r3, r3, r2
 1938 01be 5B00     		lsls	r3, r3, #1
 1939 01c0 CA18     		adds	r2, r1, r3
 1940 01c2 3B6F     		ldr	r3, [r7, #112]
 1941 01c4 1344     		add	r3, r3, r2
 1942 01c6 FF22     		movs	r2, #255
 1943 01c8 1A70     		strb	r2, [r3]
 507:main.c        ****         {
 1944              		.loc 1 507 0 discriminator 3
 1945 01ca 3B6F     		ldr	r3, [r7, #112]
 1946 01cc 0133     		adds	r3, r3, #1
 1947 01ce 3B67     		str	r3, [r7, #112]
 1948              	.L72:
 507:main.c        ****         {
 1949              		.loc 1 507 0 is_stmt 0 discriminator 1
 1950 01d0 3B6F     		ldr	r3, [r7, #112]
 1951 01d2 0D2B     		cmp	r3, #13
 1952 01d4 EEDD     		ble	.L73
 1953              	.LBE12:
 510:main.c        ****         }
 511:main.c        ****         presetAlreadyDisplayed[i] = 0;
 1954              		.loc 1 511 0 is_stmt 1 discriminator 2
 1955 01d6 B84A     		ldr	r2, .L202+4
 1956 01d8 7B6F     		ldr	r3, [r7, #116]
 1957 01da 0021     		movs	r1, #0
 1958 01dc 42F82310 		str	r1, [r2, r3, lsl #2]
 505:main.c        ****     {
 1959              		.loc 1 505 0 discriminator 2
 1960 01e0 7B6F     		ldr	r3, [r7, #116]
 1961 01e2 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 45


 1962 01e4 7B67     		str	r3, [r7, #116]
 1963              	.L71:
 505:main.c        ****     {
 1964              		.loc 1 505 0 is_stmt 0 discriminator 1
 1965 01e6 7B6F     		ldr	r3, [r7, #116]
 1966 01e8 3F2B     		cmp	r3, #63
 1967 01ea DADD     		ble	.L74
 1968              	.LBE11:
 512:main.c        ****     }
 513:main.c        ****     
 514:main.c        ****     QuadDec_1_Start();
 1969              		.loc 1 514 0 is_stmt 1
 1970 01ec FFF7FEFF 		bl	QuadDec_1_Start
 515:main.c        ****     LED_amber1_Write(0);
 1971              		.loc 1 515 0
 1972 01f0 0020     		movs	r0, #0
 1973 01f2 FFF7FEFF 		bl	LED_amber1_Write
 516:main.c        ****     LED_amber2_Write(1);
 1974              		.loc 1 516 0
 1975 01f6 0120     		movs	r0, #1
 1976 01f8 FFF7FEFF 		bl	LED_amber2_Write
 517:main.c        ****     LED_amber3_Write(0);
 1977              		.loc 1 517 0
 1978 01fc 0020     		movs	r0, #0
 1979 01fe FFF7FEFF 		bl	LED_amber3_Write
 518:main.c        ****     LED_amber4_Write(0);
 1980              		.loc 1 518 0
 1981 0202 0020     		movs	r0, #0
 1982 0204 FFF7FEFF 		bl	LED_amber4_Write
 519:main.c        **** 
 520:main.c        **** 
 521:main.c        ****     eepromReturnValue = Em_EEPROM_Init((uint32_t)Em_EEPROM_em_EepromStorage);
 1983              		.loc 1 521 0
 1984 0208 AC4B     		ldr	r3, .L202+8
 1985 020a 1846     		mov	r0, r3
 1986 020c FFF7FEFF 		bl	Em_EEPROM_Init
 1987 0210 0346     		mov	r3, r0
 1988 0212 1A46     		mov	r2, r3
 1989 0214 AA4B     		ldr	r3, .L202+12
 1990 0216 1A70     		strb	r2, [r3]
 522:main.c        ****     if(eepromReturnValue != CY_EM_EEPROM_SUCCESS)
 523:main.c        ****     {
 524:main.c        ****        // HandleError();
 525:main.c        ****     }
 526:main.c        ****     uint8_t myArrayCounter = 0;
 1991              		.loc 1 526 0
 1992 0218 0023     		movs	r3, #0
 1993 021a 87F82B30 		strb	r3, [r7, #43]
 527:main.c        ****   
 528:main.c        ****     I2C_1_Start();  
 1994              		.loc 1 528 0
 1995 021e FFF7FEFF 		bl	I2C_1_Start
 529:main.c        ****     USB_SetPowerStatus(USB_DEVICE_STATUS_SELF_POWERED);
 1996              		.loc 1 529 0
 1997 0222 0120     		movs	r0, #1
 1998 0224 FFF7FEFF 		bl	USB_SetPowerStatus
 530:main.c        ****     my_Vbus_ISR_StartEx(Vbus_function);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 46


 1999              		.loc 1 530 0
 2000 0228 A648     		ldr	r0, .L202+16
 2001 022a FFF7FEFF 		bl	my_Vbus_ISR_StartEx
 531:main.c        **** 
 532:main.c        ****     
 533:main.c        ****     LED_red1_Write(0);
 2002              		.loc 1 533 0
 2003 022e 0020     		movs	r0, #0
 2004 0230 FFF7FEFF 		bl	LED_red1_Write
 534:main.c        ****     LED_green2_Write(1);
 2005              		.loc 1 534 0
 2006 0234 0120     		movs	r0, #1
 2007 0236 FFF7FEFF 		bl	LED_green2_Write
 535:main.c        **** 
 536:main.c        ****     
 537:main.c        ****     ADC_SAR_Seq_1_Start();
 2008              		.loc 1 537 0
 2009 023a FFF7FEFF 		bl	ADC_SAR_Seq_1_Start
 538:main.c        ****     ADC_SAR_Seq_1_StartConvert();
 2010              		.loc 1 538 0
 2011 023e FFF7FEFF 		bl	ADC_SAR_Seq_1_StartConvert
 539:main.c        **** 
 540:main.c        ****             
 541:main.c        ****     CyDelay(10);
 2012              		.loc 1 541 0
 2013 0242 0A20     		movs	r0, #10
 2014 0244 FFF7FEFF 		bl	CyDelay
 542:main.c        ****     
 543:main.c        ****     //set up for the OLED screen's first write
 544:main.c        ****     I2Cbuff1[0] = 1<<6;
 2015              		.loc 1 544 0
 2016 0248 9F4B     		ldr	r3, .L202+20
 2017 024a 4022     		movs	r2, #64
 2018 024c 1A70     		strb	r2, [r3]
 545:main.c        ****     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 2019              		.loc 1 545 0
 2020 024e 0022     		movs	r2, #0
 2021 0250 0121     		movs	r1, #1
 2022 0252 7020     		movs	r0, #112
 2023 0254 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2024 0258 0346     		mov	r3, r0
 2025 025a 1A46     		mov	r2, r3
 2026 025c 9B4B     		ldr	r3, .L202+24
 2027 025e 1A60     		str	r2, [r3]
 546:main.c        **** 
 547:main.c        ****     OLED_init();
 2028              		.loc 1 547 0
 2029 0260 FFF7FEFF 		bl	OLED_init
 548:main.c        ****     OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 2030              		.loc 1 548 0
 2031 0264 9A4B     		ldr	r3, .L202+28
 2032 0266 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2033 0268 1846     		mov	r0, r3
 2034 026a 0323     		movs	r3, #3
 2035 026c 0022     		movs	r2, #0
 2036 026e 0221     		movs	r1, #2
 2037 0270 FFF7FEFF 		bl	OLEDwriteInt
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 47


 549:main.c        ****     OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 2038              		.loc 1 549 0
 2039 0274 FFF7FEFF 		bl	OLEDgetCursor
 2040 0278 0246     		mov	r2, r0
 2041 027a 0323     		movs	r3, #3
 2042 027c 0121     		movs	r1, #1
 2043 027e 9548     		ldr	r0, .L202+32
 2044 0280 FFF7FEFF 		bl	OLEDwriteString
 550:main.c        ****     OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_BYTES, OLEDgetC
 2045              		.loc 1 550 0
 2046 0284 924B     		ldr	r3, .L202+28
 2047 0286 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2048 0288 1A46     		mov	r2, r3
 2049 028a 1346     		mov	r3, r2
 2050 028c DB00     		lsls	r3, r3, #3
 2051 028e 9B1A     		subs	r3, r3, r2
 2052 0290 5B00     		lsls	r3, r3, #1
 2053 0292 914A     		ldr	r2, .L202+36
 2054 0294 9C18     		adds	r4, r3, r2
 2055 0296 FFF7FEFF 		bl	OLEDgetCursor
 2056 029a 0246     		mov	r2, r0
 2057 029c 0323     		movs	r3, #3
 2058 029e 0E21     		movs	r1, #14
 2059 02a0 2046     		mov	r0, r4
 2060 02a2 FFF7FEFF 		bl	OLEDwriteString
 551:main.c        ****     OLED_draw();
 2061              		.loc 1 551 0
 2062 02a6 FFF7FEFF 		bl	OLED_draw
 552:main.c        ****     
 553:main.c        ****     //initialize the macro knob adc to scan all knobs
 554:main.c        ****     I2Cbuff1[0] = 1<<2;
 2063              		.loc 1 554 0
 2064 02aa 874B     		ldr	r3, .L202+20
 2065 02ac 0422     		movs	r2, #4
 2066 02ae 1A70     		strb	r2, [r3]
 555:main.c        ****     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 2067              		.loc 1 555 0
 2068 02b0 0022     		movs	r2, #0
 2069 02b2 0121     		movs	r1, #1
 2070 02b4 7020     		movs	r0, #112
 2071 02b6 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2072 02ba 0346     		mov	r3, r0
 2073 02bc 1A46     		mov	r2, r3
 2074 02be 834B     		ldr	r3, .L202+24
 2075 02c0 1A60     		str	r2, [r3]
 556:main.c        ****     
 557:main.c        ****     //I2Cbuff1[0] = 0xf; //message says scan single-ended mode from beginning to 8th knob (scan all
 558:main.c        ****     //status = I2C_MasterWriteBlocking(0x13, 1, I2C_1_MODE_COMPLETE_XFER);
 559:main.c        ****     
 560:main.c        **** #if 0
 561:main.c        ****     while(1)
 562:main.c        ****     {
 563:main.c        ****         for (int i=  0; i < 4; i++)
 564:main.c        ****         {
 565:main.c        ****             knobs[i] = 127 - (ADC_SAR_Seq_1_GetResult16(i)/32);
 566:main.c        ****             if (knobs[i] != prevKnobs[i])
 567:main.c        ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 48


 568:main.c        ****                // sendMIDIControlChange(80+i, knobs[i]);
 569:main.c        ****             }
 570:main.c        ****             prevKnobs[i] = knobs[i];
 571:main.c        ****         }
 572:main.c        ****         
 573:main.c        **** 
 574:main.c        ****         I2Cbuff1[0] = 1<<0;
 575:main.c        ****         uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 576:main.c        **** 
 577:main.c        ****         //CyDelayUs(100);
 578:main.c        ****         I2Cbuff1[0] = 0x0E;
 579:main.c        ****         status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 580:main.c        ****         status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 581:main.c        ****        // CyDelayUs(100);
 582:main.c        ****         angle[0] = I2Cbuff2[0] << 8;
 583:main.c        ****         angle[0] +=  I2Cbuff2[1];
 584:main.c        ****         
 585:main.c        ****     }
 586:main.c        ****     #endif
 587:main.c        ****     //OLEDclear();
 588:main.c        ****     /*
 589:main.c        ****     while(1)
 590:main.c        ****     {
 591:main.c        ****         OLEDwriteInt(bar[1], 5, 0,FirstLine);
 592:main.c        ****         OLED_draw();
 593:main.c        ****         CyDelay(1);
 594:main.c        ****         
 595:main.c        ****         OLEDwriteInt(oct1_Read(), 1, 0,SecondLine);
 596:main.c        ****         OLEDwriteInt(oct2_Read(), 1, 10,SecondLine);
 597:main.c        ****         OLEDwriteInt(oct3_Read(), 1, 20,SecondLine);
 598:main.c        ****         OLEDwriteInt(oct4_Read(), 1, 30,SecondLine);
 599:main.c        ****         for (int i=  0; i < 4; i++)
 600:main.c        ****         {
 601:main.c        ****             OLEDwriteInt( ADC_SAR_Seq_1_GetResult16(i)/8, 3, i*30,2);
 602:main.c        ****         }
 603:main.c        **** 
 604:main.c        ****     }
 605:main.c        ****     */
 606:main.c        **** #if 0
 607:main.c        ****     I2Cbuff1[0] = 1<<mux_states[10][0];
 608:main.c        ****     uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 609:main.c        **** 
 610:main.c        **** 
 611:main.c        ****     I2Cbuff1[0] = 1<<mux_states[10][1];
 612:main.c        ****     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 613:main.c        **** 
 614:main.c        ****     //address 0x48
 615:main.c        ****     I2Cbuff1[0] = 0x1;
 616:main.c        ****     I2Cbuff1[1] = 0b11000000;
 617:main.c        ****     I2Cbuff1[2] = 0b10000011;
 618:main.c        **** 
 619:main.c        ****     status = I2C_MasterWriteBlocking(0x48, 3, I2C_1_MODE_COMPLETE_XFER);
 620:main.c        ****     #endif
 621:main.c        ****     
 622:main.c        ****     SPIS_1_Start();  
 2076              		.loc 1 622 0
 2077 02c2 FFF7FEFF 		bl	SPIS_1_Start
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 49


 623:main.c        ****     SPIM_1_Start();  
 2078              		.loc 1 623 0
 2079 02c6 FFF7FEFF 		bl	SPIM_1_Start
 624:main.c        ****     SPIS_2_Start(); 
 2080              		.loc 1 624 0
 2081 02ca FFF7FEFF 		bl	SPIS_2_Start
 625:main.c        ****     DmaTxConfiguration();
 2082              		.loc 1 625 0
 2083 02ce FFF7FEFF 		bl	DmaTxConfiguration
 626:main.c        ****     DmaRxConfiguration();
 2084              		.loc 1 626 0
 2085 02d2 FFF7FEFF 		bl	DmaRxConfiguration
 627:main.c        ****     isr_SPI1_ss_StartEx(spis_1_ss);
 2086              		.loc 1 627 0
 2087 02d6 8148     		ldr	r0, .L202+40
 2088 02d8 FFF7FEFF 		bl	isr_SPI1_ss_StartEx
 628:main.c        ****     isr_SPI2_ss_StartEx(spis_2_ss);
 2089              		.loc 1 628 0
 2090 02dc 8048     		ldr	r0, .L202+44
 2091 02de FFF7FEFF 		bl	isr_SPI2_ss_StartEx
 629:main.c        ****     
 630:main.c        ****     myArray[30] = 254;
 2092              		.loc 1 630 0
 2093 02e2 804B     		ldr	r3, .L202+48
 2094 02e4 FE22     		movs	r2, #254
 2095 02e6 9A77     		strb	r2, [r3, #30]
 631:main.c        ****     myArray[31] = 253;
 2096              		.loc 1 631 0
 2097 02e8 7E4B     		ldr	r3, .L202+48
 2098 02ea FD22     		movs	r2, #253
 2099 02ec DA77     		strb	r2, [r3, #31]
 632:main.c        **** 
 633:main.c        ****     main_counter = 0;
 2100              		.loc 1 633 0
 2101 02ee 7E4B     		ldr	r3, .L202+52
 2102 02f0 0022     		movs	r2, #0
 2103 02f2 1A70     		strb	r2, [r3]
 2104              	.L191:
 634:main.c        **** 
 635:main.c        **** 	for(;;)
 636:main.c        ****     {
 637:main.c        ****         
 638:main.c        ****         if (parseThatMF)
 2105              		.loc 1 638 0
 2106 02f4 7D4B     		ldr	r3, .L202+56
 2107 02f6 1B78     		ldrb	r3, [r3]
 2108 02f8 DBB2     		uxtb	r3, r3
 2109 02fa 002B     		cmp	r3, #0
 2110 02fc 01D0     		beq	.L75
 639:main.c        ****         {
 640:main.c        ****             parseSysex();
 2111              		.loc 1 640 0
 2112 02fe FFF7FEFF 		bl	parseSysex
 2113              	.L75:
 641:main.c        ****         }
 642:main.c        ****         
 643:main.c        ****         //if (newDataFlag)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 50


 644:main.c        ****         //{
 645:main.c        ****         //}
 646:main.c        ****             /*
 647:main.c        ****             for (int i = 0; i < 5; i++)
 648:main.c        ****             {
 649:main.c        ****                 I2C_1_MasterSendStart(0x70, 0); 
 650:main.c        ****                 I2C_1_MasterWriteByte(1<<i);
 651:main.c        ****                 I2C_1_MasterSendStop(); 
 652:main.c        **** 
 653:main.c        **** 
 654:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 655:main.c        ****                 I2C_1_MasterWriteByte(0x0C);
 656:main.c        ****                 //I2C_1_MasterSendStop();
 657:main.c        ****                 I2C_1_MasterSendRestart(0x36, 1); 
 658:main.c        ****                 rawAngle = I2C_1_MasterReadByte(1) << 8;
 659:main.c        ****                 //I2C_1_MasterSendRestart(0x36, 1);
 660:main.c        ****                 rawAngle +=  I2C_1_MasterReadByte(0);
 661:main.c        ****                  I2C_1_MasterSendStop(); 
 662:main.c        ****                 
 663:main.c        ****                 CyDelay(1);
 664:main.c        **** 
 665:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 666:main.c        ****                 I2C_1_MasterWriteByte(0x01);
 667:main.c        ****                 I2C_1_MasterWriteByte(rawAngle >> 8);
 668:main.c        ****                 I2C_1_MasterWriteByte(rawAngle & 0xff);
 669:main.c        ****                 I2C_1_MasterWriteByte((rawAngle+500) >> 8);
 670:main.c        ****                 I2C_1_MasterWriteByte((rawAngle+500) & 0xff);
 671:main.c        ****                 I2C_1_MasterSendStop(); 
 672:main.c        ****                 
 673:main.c        ****                 CyDelay(2);
 674:main.c        **** 
 675:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 676:main.c        ****                 I2C_1_MasterWriteByte(0xff);
 677:main.c        ****                I2C_1_MasterWriteByte(0x80);
 678:main.c        ****                 I2C_1_MasterSendStop(); 
 679:main.c        ****                CyDelay(2);
 680:main.c        ****             }
 681:main.c        ****         */
 682:main.c        ****         //set main i2c mux
 683:main.c        ****     
 684:main.c        ****         
 685:main.c        ****         /*
 686:main.c        ****         for (int i = 0; i < 4; i++)
 687:main.c        ****         {
 688:main.c        ****             I2C_1_MasterSendStart(0x71, 0); 
 689:main.c        ****             I2C_1_MasterWriteByte(1<<(i+2));
 690:main.c        ****             I2C_1_MasterSendStop(); 
 691:main.c        **** 
 692:main.c        **** 
 693:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 694:main.c        ****             I2C_1_MasterWriteByte(0x0C);
 695:main.c        ****             //I2C_1_MasterSendStop();
 696:main.c        ****             I2C_1_MasterSendRestart(0x36, 1); 
 697:main.c        ****             rawAngle = I2C_1_MasterReadByte(1) << 8;
 698:main.c        ****             //I2C_1_MasterSendRestart(0x36, 1);
 699:main.c        ****             rawAngle +=  I2C_1_MasterReadByte(0);
 700:main.c        ****              I2C_1_MasterSendStop(); 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 51


 701:main.c        ****             
 702:main.c        ****             CyDelay(1);
 703:main.c        **** 
 704:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 705:main.c        ****             I2C_1_MasterWriteByte(0x01);
 706:main.c        ****             I2C_1_MasterWriteByte(rawAngle >> 8);
 707:main.c        ****             I2C_1_MasterWriteByte(rawAngle & 0xff);
 708:main.c        ****             I2C_1_MasterWriteByte((rawAngle+700) >> 8);
 709:main.c        ****             I2C_1_MasterWriteByte((rawAngle+700) & 0xff);
 710:main.c        ****             I2C_1_MasterSendStop(); 
 711:main.c        ****             
 712:main.c        ****             CyDelay(2);
 713:main.c        **** 
 714:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 715:main.c        ****             I2C_1_MasterWriteByte(0xff);
 716:main.c        ****             I2C_1_MasterWriteByte(0x80);
 717:main.c        ****             I2C_1_MasterSendStop(); 
 718:main.c        ****            CyDelay(2);
 719:main.c        ****         }
 720:main.c        ****             */
 721:main.c        ****         /*    
 722:main.c        ****         if (main_counter == 6)
 723:main.c        ****         {
 724:main.c        ****             main_counter = 8;
 725:main.c        ****         }
 726:main.c        ****         */    
 727:main.c        **** 
 728:main.c        ****        //sense levers and pedals
 729:main.c        ****         if (mux_states[main_counter][0] != last_mux)
 2114              		.loc 1 729 0
 2115 0302 794B     		ldr	r3, .L202+52
 2116 0304 1B78     		ldrb	r3, [r3]
 2117 0306 DBB2     		uxtb	r3, r3
 2118 0308 1A46     		mov	r2, r3
 2119 030a 794B     		ldr	r3, .L202+60
 2120 030c 13F81220 		ldrb	r2, [r3, r2, lsl #1]	@ zero_extendqisi2
 2121 0310 784B     		ldr	r3, .L202+64
 2122 0312 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2123 0314 9A42     		cmp	r2, r3
 2124 0316 14D0     		beq	.L76
 2125              	.LBB13:
 730:main.c        ****         {
 731:main.c        ****             I2Cbuff1[0] = 1<<mux_states[main_counter][0];
 2126              		.loc 1 731 0
 2127 0318 734B     		ldr	r3, .L202+52
 2128 031a 1B78     		ldrb	r3, [r3]
 2129 031c DBB2     		uxtb	r3, r3
 2130 031e 1A46     		mov	r2, r3
 2131 0320 734B     		ldr	r3, .L202+60
 2132 0322 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 2133 0326 1A46     		mov	r2, r3
 2134 0328 0123     		movs	r3, #1
 2135 032a 9340     		lsls	r3, r3, r2
 2136 032c DAB2     		uxtb	r2, r3
 2137 032e 664B     		ldr	r3, .L202+20
 2138 0330 1A70     		strb	r2, [r3]
 732:main.c        ****             uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 52


 2139              		.loc 1 732 0
 2140 0332 0022     		movs	r2, #0
 2141 0334 0121     		movs	r1, #1
 2142 0336 7020     		movs	r0, #112
 2143 0338 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2144 033c 0346     		mov	r3, r0
 2145 033e 87F82A30 		strb	r3, [r7, #42]
 2146              	.L76:
 2147              	.LBE13:
 733:main.c        ****         }
 734:main.c        ****         last_mux = mux_states[main_counter][0];
 2148              		.loc 1 734 0
 2149 0342 694B     		ldr	r3, .L202+52
 2150 0344 1B78     		ldrb	r3, [r3]
 2151 0346 DBB2     		uxtb	r3, r3
 2152 0348 1A46     		mov	r2, r3
 2153 034a 694B     		ldr	r3, .L202+60
 2154 034c 13F81220 		ldrb	r2, [r3, r2, lsl #1]	@ zero_extendqisi2
 2155 0350 684B     		ldr	r3, .L202+64
 2156 0352 1A70     		strb	r2, [r3]
 735:main.c        ****         
 736:main.c        ****         
 737:main.c        ****         CyDelayUs(10);
 2157              		.loc 1 737 0
 2158 0354 0A20     		movs	r0, #10
 2159 0356 FFF7FEFF 		bl	CyDelayUs
 738:main.c        ****         if (mux_states[main_counter][0] == 5)
 2160              		.loc 1 738 0
 2161 035a 634B     		ldr	r3, .L202+52
 2162 035c 1B78     		ldrb	r3, [r3]
 2163 035e DBB2     		uxtb	r3, r3
 2164 0360 1A46     		mov	r2, r3
 2165 0362 634B     		ldr	r3, .L202+60
 2166 0364 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 2167 0368 052B     		cmp	r3, #5
 2168 036a 1DD1     		bne	.L77
 739:main.c        ****         {
 740:main.c        ****             if (!i2c_skipped[main_counter])
 2169              		.loc 1 740 0
 2170 036c 5E4B     		ldr	r3, .L202+52
 2171 036e 1B78     		ldrb	r3, [r3]
 2172 0370 DBB2     		uxtb	r3, r3
 2173 0372 1A46     		mov	r2, r3
 2174 0374 604B     		ldr	r3, .L202+68
 2175 0376 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2176 0378 002B     		cmp	r3, #0
 2177 037a 15D1     		bne	.L77
 741:main.c        ****             {
 742:main.c        ****                 I2Cbuff1[0] = 1<<mux_states[main_counter][1];
 2178              		.loc 1 742 0
 2179 037c 5A4B     		ldr	r3, .L202+52
 2180 037e 1B78     		ldrb	r3, [r3]
 2181 0380 DBB2     		uxtb	r3, r3
 2182 0382 5B4A     		ldr	r2, .L202+60
 2183 0384 5B00     		lsls	r3, r3, #1
 2184 0386 1344     		add	r3, r3, r2
 2185 0388 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 53


 2186 038a 1A46     		mov	r2, r3
 2187 038c 0123     		movs	r3, #1
 2188 038e 9340     		lsls	r3, r3, r2
 2189 0390 DAB2     		uxtb	r2, r3
 2190 0392 4D4B     		ldr	r3, .L202+20
 2191 0394 1A70     		strb	r2, [r3]
 743:main.c        ****                 status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 2192              		.loc 1 743 0
 2193 0396 0022     		movs	r2, #0
 2194 0398 0121     		movs	r1, #1
 2195 039a 7120     		movs	r0, #113
 2196 039c FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2197 03a0 0346     		mov	r3, r0
 2198 03a2 1A46     		mov	r2, r3
 2199 03a4 494B     		ldr	r3, .L202+24
 2200 03a6 1A60     		str	r2, [r3]
 2201              	.L77:
 744:main.c        ****             }
 745:main.c        ****         }
 746:main.c        **** 
 747:main.c        ****         CyDelayUs(10);
 2202              		.loc 1 747 0
 2203 03a8 0A20     		movs	r0, #10
 2204 03aa FFF7FEFF 		bl	CyDelayUs
 748:main.c        ****         //if it's a hall sensor
 749:main.c        **** 
 750:main.c        ****         if (main_counter < 10)
 2205              		.loc 1 750 0
 2206 03ae 4E4B     		ldr	r3, .L202+52
 2207 03b0 1B78     		ldrb	r3, [r3]
 2208 03b2 DBB2     		uxtb	r3, r3
 2209 03b4 092B     		cmp	r3, #9
 2210 03b6 00F2AB80 		bhi	.L78
 751:main.c        ****         {
 752:main.c        ****             if (!i2c_skipped[main_counter])
 2211              		.loc 1 752 0
 2212 03ba 4B4B     		ldr	r3, .L202+52
 2213 03bc 1B78     		ldrb	r3, [r3]
 2214 03be DBB2     		uxtb	r3, r3
 2215 03c0 1A46     		mov	r2, r3
 2216 03c2 4D4B     		ldr	r3, .L202+68
 2217 03c4 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2218 03c6 002B     		cmp	r3, #0
 2219 03c8 40F0A280 		bne	.L78
 753:main.c        ****             {
 754:main.c        ****                 //CyDelayUs(100);
 755:main.c        ****                 I2Cbuff1[0] = 0x0E;
 2220              		.loc 1 755 0
 2221 03cc 3E4B     		ldr	r3, .L202+20
 2222 03ce 0E22     		movs	r2, #14
 2223 03d0 1A70     		strb	r2, [r3]
 756:main.c        ****                 status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 2224              		.loc 1 756 0
 2225 03d2 0222     		movs	r2, #2
 2226 03d4 0121     		movs	r1, #1
 2227 03d6 3620     		movs	r0, #54
 2228 03d8 FFF7FEFF 		bl	I2C_MasterWriteBlocking
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 54


 2229 03dc 0346     		mov	r3, r0
 2230 03de 1A46     		mov	r2, r3
 2231 03e0 3A4B     		ldr	r3, .L202+24
 2232 03e2 1A60     		str	r2, [r3]
 757:main.c        ****                 status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 2233              		.loc 1 757 0
 2234 03e4 0122     		movs	r2, #1
 2235 03e6 0221     		movs	r1, #2
 2236 03e8 3620     		movs	r0, #54
 2237 03ea FFF7FEFF 		bl	I2C_MasterReadBlocking
 2238 03ee 0346     		mov	r3, r0
 2239 03f0 1A46     		mov	r2, r3
 2240 03f2 364B     		ldr	r3, .L202+24
 2241 03f4 1A60     		str	r2, [r3]
 758:main.c        ****                // CyDelayUs(100);
 759:main.c        ****                 angle[main_counter] = I2Cbuff2[0] << 8;
 2242              		.loc 1 759 0
 2243 03f6 3C4B     		ldr	r3, .L202+52
 2244 03f8 1B78     		ldrb	r3, [r3]
 2245 03fa DBB2     		uxtb	r3, r3
 2246 03fc 1A46     		mov	r2, r3
 2247 03fe 3F4B     		ldr	r3, .L202+72
 2248 0400 1B78     		ldrb	r3, [r3]
 2249 0402 DBB2     		uxtb	r3, r3
 2250 0404 9BB2     		uxth	r3, r3
 2251 0406 1B02     		lsls	r3, r3, #8
 2252 0408 99B2     		uxth	r1, r3
 2253 040a 3D4B     		ldr	r3, .L202+76
 2254 040c 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 760:main.c        ****                 angle[main_counter] +=  I2Cbuff2[1];
 2255              		.loc 1 760 0
 2256 0410 3A4B     		ldr	r3, .L202+72
 2257 0412 5B78     		ldrb	r3, [r3, #1]
 2258 0414 D8B2     		uxtb	r0, r3
 2259 0416 344B     		ldr	r3, .L202+52
 2260 0418 1B78     		ldrb	r3, [r3]
 2261 041a DBB2     		uxtb	r3, r3
 2262 041c 1946     		mov	r1, r3
 2263 041e 1A46     		mov	r2, r3
 2264 0420 374B     		ldr	r3, .L202+76
 2265 0422 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2266 0426 83B2     		uxth	r3, r0
 2267 0428 1344     		add	r3, r3, r2
 2268 042a 9AB2     		uxth	r2, r3
 2269 042c 344B     		ldr	r3, .L202+76
 2270 042e 23F81120 		strh	r2, [r3, r1, lsl #1]	@ movhi
 761:main.c        ****                 
 762:main.c        ****                 if (calibrationMode)
 2271              		.loc 1 762 0
 2272 0432 344B     		ldr	r3, .L202+80
 2273 0434 1B68     		ldr	r3, [r3]
 2274 0436 002B     		cmp	r3, #0
 2275 0438 6AD0     		beq	.L78
 763:main.c        ****                 {
 764:main.c        ****                     if (angle[main_counter] < pedals_low[main_counter])
 2276              		.loc 1 764 0
 2277 043a 2B4B     		ldr	r3, .L202+52
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 55


 2278 043c 1B78     		ldrb	r3, [r3]
 2279 043e DBB2     		uxtb	r3, r3
 2280 0440 1A46     		mov	r2, r3
 2281 0442 2F4B     		ldr	r3, .L202+76
 2282 0444 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2283 0448 274B     		ldr	r3, .L202+52
 2284 044a 1B78     		ldrb	r3, [r3]
 2285 044c DBB2     		uxtb	r3, r3
 2286 044e 1946     		mov	r1, r3
 2287 0450 2D4B     		ldr	r3, .L202+84
 2288 0452 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 2289 0456 9A42     		cmp	r2, r3
 2290 0458 0DD2     		bcs	.L79
 765:main.c        ****                     {
 766:main.c        ****                         pedals_low[main_counter] = angle[main_counter];
 2291              		.loc 1 766 0
 2292 045a 234B     		ldr	r3, .L202+52
 2293 045c 1B78     		ldrb	r3, [r3]
 2294 045e DBB2     		uxtb	r3, r3
 2295 0460 1A46     		mov	r2, r3
 2296 0462 214B     		ldr	r3, .L202+52
 2297 0464 1B78     		ldrb	r3, [r3]
 2298 0466 DBB2     		uxtb	r3, r3
 2299 0468 1946     		mov	r1, r3
 2300 046a 254B     		ldr	r3, .L202+76
 2301 046c 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 2302 0470 254B     		ldr	r3, .L202+84
 2303 0472 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2304              	.L79:
 767:main.c        ****                         
 768:main.c        ****                     }
 769:main.c        ****                     if (angle[main_counter] > pedals_high[main_counter])
 2305              		.loc 1 769 0
 2306 0476 1C4B     		ldr	r3, .L202+52
 2307 0478 1B78     		ldrb	r3, [r3]
 2308 047a DBB2     		uxtb	r3, r3
 2309 047c 1A46     		mov	r2, r3
 2310 047e 204B     		ldr	r3, .L202+76
 2311 0480 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2312 0484 184B     		ldr	r3, .L202+52
 2313 0486 1B78     		ldrb	r3, [r3]
 2314 0488 DBB2     		uxtb	r3, r3
 2315 048a 1946     		mov	r1, r3
 2316 048c 1F4B     		ldr	r3, .L202+88
 2317 048e 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 2318 0492 9A42     		cmp	r2, r3
 2319 0494 3CD9     		bls	.L78
 770:main.c        ****                     {
 771:main.c        ****                          pedals_high[main_counter] = angle[main_counter];
 2320              		.loc 1 771 0
 2321 0496 144B     		ldr	r3, .L202+52
 2322 0498 1B78     		ldrb	r3, [r3]
 2323 049a DBB2     		uxtb	r3, r3
 2324 049c 1A46     		mov	r2, r3
 2325 049e 124B     		ldr	r3, .L202+52
 2326 04a0 1B78     		ldrb	r3, [r3]
 2327 04a2 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 56


 2328 04a4 1946     		mov	r1, r3
 2329 04a6 164B     		ldr	r3, .L202+76
 2330 04a8 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 2331 04ac 174B     		ldr	r3, .L202+88
 2332 04ae 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2333 04b2 2DE0     		b	.L203
 2334              	.L204:
 2335              		.align	2
 2336              	.L202:
 2337 04b4 00000000 		.word	presetNamesArray
 2338 04b8 00000000 		.word	presetAlreadyDisplayed
 2339 04bc 00000000 		.word	Em_EEPROM_em_EepromStorage
 2340 04c0 00000000 		.word	eepromReturnValue
 2341 04c4 00000000 		.word	Vbus_function
 2342 04c8 00000000 		.word	I2Cbuff1
 2343 04cc 00000000 		.word	status
 2344 04d0 00000000 		.word	currentCopedent
 2345 04d4 00040000 		.word	.LC0
 2346 04d8 00000000 		.word	copedentNamesArray
 2347 04dc 00000000 		.word	spis_1_ss
 2348 04e0 00000000 		.word	spis_2_ss
 2349 04e4 00000000 		.word	myArray
 2350 04e8 00000000 		.word	main_counter
 2351 04ec 00000000 		.word	parseThatMF
 2352 04f0 00000000 		.word	mux_states
 2353 04f4 00000000 		.word	last_mux
 2354 04f8 00000000 		.word	i2c_skipped
 2355 04fc 00000000 		.word	I2Cbuff2
 2356 0500 00000000 		.word	angle
 2357 0504 00000000 		.word	calibrationMode
 2358 0508 00000000 		.word	pedals_low
 2359 050c 00000000 		.word	pedals_high
 2360              	.L203:
 2361              	.L78:
 772:main.c        ****                     }
 773:main.c        ****                 }
 774:main.c        ****             }
 775:main.c        ****         }
 776:main.c        ****         
 777:main.c        ****         //in addition to the hall sensor on {2,0} (the vertical knee lever) of the muxes, there is 
 778:main.c        ****         if (main_counter == 9)
 2362              		.loc 1 778 0
 2363 0510 914B     		ldr	r3, .L205
 2364 0512 1B78     		ldrb	r3, [r3]
 2365 0514 DBB2     		uxtb	r3, r3
 2366 0516 092B     		cmp	r3, #9
 2367 0518 32D1     		bne	.L80
 779:main.c        ****         {
 780:main.c        ****             if (!i2c_skipped[main_counter])
 2368              		.loc 1 780 0
 2369 051a 8F4B     		ldr	r3, .L205
 2370 051c 1B78     		ldrb	r3, [r3]
 2371 051e DBB2     		uxtb	r3, r3
 2372 0520 1A46     		mov	r2, r3
 2373 0522 8E4B     		ldr	r3, .L205+4
 2374 0524 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2375 0526 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 57


 2376 0528 64D1     		bne	.L84
 781:main.c        ****             {
 782:main.c        ****                 //scan the knob adc
 783:main.c        ****                 I2Cbuff1[0] = 0x0;      
 2377              		.loc 1 783 0
 2378 052a 8D4B     		ldr	r3, .L205+8
 2379 052c 0022     		movs	r2, #0
 2380 052e 1A70     		strb	r2, [r3]
 784:main.c        ****                 status = I2C_MasterReadBlocking(0x13, 16, I2C_1_MODE_COMPLETE_XFER);
 2381              		.loc 1 784 0
 2382 0530 0022     		movs	r2, #0
 2383 0532 1021     		movs	r1, #16
 2384 0534 1320     		movs	r0, #19
 2385 0536 FFF7FEFF 		bl	I2C_MasterReadBlocking
 2386 053a 0346     		mov	r3, r0
 2387 053c 1A46     		mov	r2, r3
 2388 053e 894B     		ldr	r3, .L205+12
 2389 0540 1A60     		str	r2, [r3]
 2390              	.LBB14:
 785:main.c        ****                 for (int i = 0; i < NUM_MACROS; i++)
 2391              		.loc 1 785 0
 2392 0542 0023     		movs	r3, #0
 2393 0544 FB66     		str	r3, [r7, #108]
 2394 0546 10E0     		b	.L82
 2395              	.L83:
 786:main.c        ****                 {
 787:main.c        ****                     macroKnobValues[i] = ((I2Cbuff1[i*2] << 8) + (I2Cbuff1[i*2] & 255)) & 4095; // 
 2396              		.loc 1 787 0 discriminator 3
 2397 0548 FB6E     		ldr	r3, [r7, #108]
 2398 054a 5B00     		lsls	r3, r3, #1
 2399 054c 844A     		ldr	r2, .L205+8
 2400 054e D35C     		ldrb	r3, [r2, r3]
 2401 0550 FB6E     		ldr	r3, [r7, #108]
 2402 0552 5B00     		lsls	r3, r3, #1
 2403 0554 824A     		ldr	r2, .L205+8
 2404 0556 D35C     		ldrb	r3, [r2, r3]
 2405 0558 D9B2     		uxtb	r1, r3
 2406 055a 834A     		ldr	r2, .L205+16
 2407 055c FB6E     		ldr	r3, [r7, #108]
 2408 055e 1344     		add	r3, r3, r2
 2409 0560 0A46     		mov	r2, r1
 2410 0562 1A70     		strb	r2, [r3]
 785:main.c        ****                 for (int i = 0; i < NUM_MACROS; i++)
 2411              		.loc 1 785 0 discriminator 3
 2412 0564 FB6E     		ldr	r3, [r7, #108]
 2413 0566 0133     		adds	r3, r3, #1
 2414 0568 FB66     		str	r3, [r7, #108]
 2415              	.L82:
 785:main.c        ****                 for (int i = 0; i < NUM_MACROS; i++)
 2416              		.loc 1 785 0 is_stmt 0 discriminator 1
 2417 056a FB6E     		ldr	r3, [r7, #108]
 2418 056c 072B     		cmp	r3, #7
 2419 056e EBDD     		ble	.L83
 2420              	.LBE14:
 788:main.c        ****                 }
 789:main.c        ****                 //
 790:main.c        ****                 if (macroOLEDWaitingToSend)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 58


 2421              		.loc 1 790 0 is_stmt 1
 2422 0570 7E4B     		ldr	r3, .L205+20
 2423 0572 1B68     		ldr	r3, [r3]
 2424 0574 002B     		cmp	r3, #0
 2425 0576 3DD0     		beq	.L84
 791:main.c        ****                 {
 792:main.c        ****                     //send the data to the little macro OLED screens
 793:main.c        ****                     
 794:main.c        ****                     macroOLEDWaitingToSend = 0;
 2426              		.loc 1 794 0
 2427 0578 7C4B     		ldr	r3, .L205+20
 2428 057a 0022     		movs	r2, #0
 2429 057c 1A60     		str	r2, [r3]
 2430 057e 39E0     		b	.L84
 2431              	.L80:
 795:main.c        ****                 }
 796:main.c        ****             }
 797:main.c        ****             
 798:main.c        ****         }
 799:main.c        ****         //otherwise it's the ADC for the foot pedal
 800:main.c        ****         else if (main_counter == 10)
 2432              		.loc 1 800 0
 2433 0580 754B     		ldr	r3, .L205
 2434 0582 1B78     		ldrb	r3, [r3]
 2435 0584 DBB2     		uxtb	r3, r3
 2436 0586 0A2B     		cmp	r3, #10
 2437 0588 26D1     		bne	.L85
 801:main.c        ****         {
 802:main.c        ****             //0x4f (0x4D?) is the 7=-bit version of the MCP3221 address, might need to be shifted o
 803:main.c        ****             if (!i2c_skipped[main_counter])
 2438              		.loc 1 803 0
 2439 058a 734B     		ldr	r3, .L205
 2440 058c 1B78     		ldrb	r3, [r3]
 2441 058e DBB2     		uxtb	r3, r3
 2442 0590 1A46     		mov	r2, r3
 2443 0592 724B     		ldr	r3, .L205+4
 2444 0594 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2445 0596 002B     		cmp	r3, #0
 2446 0598 2CD1     		bne	.L84
 804:main.c        ****             {
 805:main.c        ****                 I2Cbuff1[0] = 0x0;      
 2447              		.loc 1 805 0
 2448 059a 714B     		ldr	r3, .L205+8
 2449 059c 0022     		movs	r2, #0
 2450 059e 1A70     		strb	r2, [r3]
 806:main.c        ****                 status = I2C_MasterReadBlocking(0x4f, 2, I2C_1_MODE_COMPLETE_XFER);
 2451              		.loc 1 806 0
 2452 05a0 0022     		movs	r2, #0
 2453 05a2 0221     		movs	r1, #2
 2454 05a4 4F20     		movs	r0, #79
 2455 05a6 FFF7FEFF 		bl	I2C_MasterReadBlocking
 2456 05aa 0346     		mov	r3, r0
 2457 05ac 1A46     		mov	r2, r3
 2458 05ae 6D4B     		ldr	r3, .L205+12
 2459 05b0 1A60     		str	r2, [r3]
 807:main.c        ****                 volumePedal = I2Cbuff2[0] << 8;
 2460              		.loc 1 807 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 59


 2461 05b2 6F4B     		ldr	r3, .L205+24
 2462 05b4 1B78     		ldrb	r3, [r3]
 2463 05b6 DBB2     		uxtb	r3, r3
 2464 05b8 9BB2     		uxth	r3, r3
 2465 05ba 1B02     		lsls	r3, r3, #8
 2466 05bc 9AB2     		uxth	r2, r3
 2467 05be 6D4B     		ldr	r3, .L205+28
 2468 05c0 1A80     		strh	r2, [r3]	@ movhi
 808:main.c        ****                 volumePedal +=  I2Cbuff2[1];
 2469              		.loc 1 808 0
 2470 05c2 6B4B     		ldr	r3, .L205+24
 2471 05c4 5B78     		ldrb	r3, [r3, #1]
 2472 05c6 DBB2     		uxtb	r3, r3
 2473 05c8 9AB2     		uxth	r2, r3
 2474 05ca 6A4B     		ldr	r3, .L205+28
 2475 05cc 1B88     		ldrh	r3, [r3]
 2476 05ce 1344     		add	r3, r3, r2
 2477 05d0 9AB2     		uxth	r2, r3
 2478 05d2 684B     		ldr	r3, .L205+28
 2479 05d4 1A80     		strh	r2, [r3]	@ movhi
 2480 05d6 0DE0     		b	.L84
 2481              	.L85:
 809:main.c        ****             }
 810:main.c        ****         }
 811:main.c        ****         else
 812:main.c        ****         if (main_counter == 11)
 2482              		.loc 1 812 0
 2483 05d8 5F4B     		ldr	r3, .L205
 2484 05da 1B78     		ldrb	r3, [r3]
 2485 05dc DBB2     		uxtb	r3, r3
 2486 05de 0B2B     		cmp	r3, #11
 2487 05e0 08D1     		bne	.L84
 813:main.c        ****         { 
 814:main.c        ****             if (mainOLEDWaitingToSend)
 2488              		.loc 1 814 0
 2489 05e2 654B     		ldr	r3, .L205+32
 2490 05e4 1B68     		ldr	r3, [r3]
 2491 05e6 002B     		cmp	r3, #0
 2492 05e8 04D0     		beq	.L84
 815:main.c        ****             {
 816:main.c        ****                 OLED_draw();
 2493              		.loc 1 816 0
 2494 05ea FFF7FEFF 		bl	OLED_draw
 817:main.c        ****                 mainOLEDWaitingToSend = 0;
 2495              		.loc 1 817 0
 2496 05ee 624B     		ldr	r3, .L205+32
 2497 05f0 0022     		movs	r2, #0
 2498 05f2 1A60     		str	r2, [r3]
 2499              	.L84:
 818:main.c        ****             }
 819:main.c        ****             
 820:main.c        ****             #if 0
 821:main.c        ****             if (OLEDcount == 0)
 822:main.c        ****             {
 823:main.c        ****                 OLEDclearLine(FirstLine);
 824:main.c        ****             }
 825:main.c        ****             else if (OLEDcount == 1)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 60


 826:main.c        ****             {
 827:main.c        ****                 OLEDwriteInt(encoderNum, 2, 0, FirstLine);
 828:main.c        **** 		    }
 829:main.c        ****             else if (OLEDcount == 2)
 830:main.c        ****             {
 831:main.c        ****                 OLEDwriteString(" ", 1, OLEDgetCursor(), FirstLine);
 832:main.c        ****             }
 833:main.c        ****             else if (OLEDcount == 3)
 834:main.c        ****             {
 835:main.c        ****                 OLEDwriteInt(encoderVal[encoderNum], 3, OLEDgetCursor(), FirstLine);
 836:main.c        ****             }
 837:main.c        ****             else if (OLEDcount == 4)
 838:main.c        ****             {
 839:main.c        ****                 OLEDwriteString("     ", 5, OLEDgetCursor(), FirstLine);
 840:main.c        ****             }
 841:main.c        ****             else if (OLEDcount == 5)
 842:main.c        ****             {
 843:main.c        ****                 OLEDwriteInt(patchNum, 2, OLEDgetCursor(), FirstLine);
 844:main.c        ****             }
 845:main.c        ****             else if (OLEDcount == 6)
 846:main.c        ****             {
 847:main.c        ****                 //OLED_drawFirstLine();
 848:main.c        ****                 
 849:main.c        ****                 //OLEDwriteInt( bar[0] , 6, 0,SecondLine);
 850:main.c        ****                 //OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 851:main.c        ****                 //OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 852:main.c        ****                 //OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_B
 853:main.c        ****                  //OLED_draw();
 854:main.c        ****             }
 855:main.c        ****             OLEDcount++;
 856:main.c        ****             if (OLEDcount > 6)
 857:main.c        ****             {
 858:main.c        ****                 OLEDcount = 0;
 859:main.c        ****             }
 860:main.c        ****             #endif
 861:main.c        ****         }
 862:main.c        ****         
 863:main.c        ****         /*
 864:main.c        ****         I2Cbuff1[0] = 1<<main_counter;
 865:main.c        ****         uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 866:main.c        **** 
 867:main.c        ****                 for (int i = 0; i < 5; i++)
 868:main.c        ****                 {
 869:main.c        ****                     I2Cbuff1[0] = 1<<i;
 870:main.c        ****                     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 871:main.c        **** 
 872:main.c        ****                     I2Cbuff1[0] = 0x0E;
 873:main.c        ****                     status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 874:main.c        **** 
 875:main.c        ****                     status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 876:main.c        **** 
 877:main.c        **** 
 878:main.c        ****                     angle[i] = I2Cbuff2[0] << 8;
 879:main.c        ****                     angle[i] +=  I2Cbuff2[1];
 880:main.c        ****                 }
 881:main.c        ****             if (main_counter == 0)
 882:main.c        ****             {               
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 61


 883:main.c        ****                 I2Cbuff1[0] = 1<<main_counter;
 884:main.c        ****                 uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 885:main.c        **** 
 886:main.c        ****                 for (int i = 0; i < 5; i++)
 887:main.c        ****                 {
 888:main.c        ****                     I2Cbuff1[0] = 1<<i;
 889:main.c        ****                     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 890:main.c        **** 
 891:main.c        ****                     I2Cbuff1[0] = 0x0E;
 892:main.c        ****                     status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 893:main.c        **** 
 894:main.c        ****                     status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 895:main.c        **** 
 896:main.c        **** 
 897:main.c        ****                     angle[i] = I2Cbuff2[0] << 8;
 898:main.c        ****                     angle[i] +=  I2Cbuff2[1];
 899:main.c        ****                 }
 900:main.c        ****             }
 901:main.c        ****             else
 902:main.c        ****             {
 903:main.c        ****                 I2Cbuff1[0] = 1<<(main_counter+1);
 904:main.c        ****                 uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 905:main.c        ****                 I2Cbuff1[0] = 0x0E;
 906:main.c        ****                 status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 907:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 908:main.c        ****                 {
 909:main.c        ****                     I2Cbuff1[0] = 1<<(main_counter+1);
 910:main.c        ****                     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 911:main.c        ****                 }
 912:main.c        ****            
 913:main.c        **** 
 914:main.c        **** 
 915:main.c        ****                 status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 916:main.c        ****                  //I2C_1_MasterReadBuf(0x36, I2Cbuff3, 2, I2C_1_MODE_REPEAT_START);
 917:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 918:main.c        ****                 {
 919:main.c        ****                     I2Cbuff1[0] = 1<<(main_counter+1);
 920:main.c        ****                     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 921:main.c        ****                 }
 922:main.c        ****                 
 923:main.c        ****                 angle[main_counter+4] = I2Cbuff2[0] << 8;
 924:main.c        ****                 angle[main_counter+4] +=  I2Cbuff2[1];
 925:main.c        ****             }    
 926:main.c        ****                 
 927:main.c        **** 
 928:main.c        ****             send_it = 1;
 929:main.c        ****         }
 930:main.c        ****         */
 931:main.c        ****         
 932:main.c        ****         if (main_counter < 10)
 2500              		.loc 1 932 0
 2501 05f4 584B     		ldr	r3, .L205
 2502 05f6 1B78     		ldrb	r3, [r3]
 2503 05f8 DBB2     		uxtb	r3, r3
 2504 05fa 092B     		cmp	r3, #9
 2505 05fc 00F29080 		bhi	.L87
 2506              	.LBB15:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 62


 933:main.c        ****         {
 934:main.c        ****             
 935:main.c        ****             //do math to make all pedals and levers report between 0 and 4095 scaled
 936:main.c        ****             int16_t tempangle = ((int16_t) angle[main_counter] - (int16_t)pedals_low[main_counter])
 2507              		.loc 1 936 0
 2508 0600 554B     		ldr	r3, .L205
 2509 0602 1B78     		ldrb	r3, [r3]
 2510 0604 DBB2     		uxtb	r3, r3
 2511 0606 1A46     		mov	r2, r3
 2512 0608 5C4B     		ldr	r3, .L205+36
 2513 060a 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2514 060e 524B     		ldr	r3, .L205
 2515 0610 1B78     		ldrb	r3, [r3]
 2516 0612 DBB2     		uxtb	r3, r3
 2517 0614 1946     		mov	r1, r3
 2518 0616 5A4B     		ldr	r3, .L205+40
 2519 0618 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 2520 061c D31A     		subs	r3, r2, r3
 2521 061e 9BB2     		uxth	r3, r3
 2522 0620 3B85     		strh	r3, [r7, #40]	@ movhi
 937:main.c        ****             
 938:main.c        ****             if (tempangle > 0)
 2523              		.loc 1 938 0
 2524 0622 B7F92830 		ldrsh	r3, [r7, #40]
 2525 0626 002B     		cmp	r3, #0
 2526 0628 1CDD     		ble	.L88
 939:main.c        ****             {
 940:main.c        ****                 processed_pedals[main_counter] = (float)tempangle * pedalRatios[main_counter];
 2527              		.loc 1 940 0
 2528 062a 4B4B     		ldr	r3, .L205
 2529 062c 1B78     		ldrb	r3, [r3]
 2530 062e DBB2     		uxtb	r3, r3
 2531 0630 1C46     		mov	r4, r3
 2532 0632 B7F92830 		ldrsh	r3, [r7, #40]
 2533 0636 1846     		mov	r0, r3
 2534 0638 FFF7FEFF 		bl	__aeabi_i2f
 2535 063c 464B     		ldr	r3, .L205
 2536 063e 1B78     		ldrb	r3, [r3]
 2537 0640 DBB2     		uxtb	r3, r3
 2538 0642 1A46     		mov	r2, r3
 2539 0644 4F4B     		ldr	r3, .L205+44
 2540 0646 53F82230 		ldr	r3, [r3, r2, lsl #2]	@ float
 2541 064a 1946     		mov	r1, r3
 2542 064c FFF7FEFF 		bl	__aeabi_fmul
 2543 0650 0346     		mov	r3, r0
 2544 0652 1846     		mov	r0, r3
 2545 0654 FFF7FEFF 		bl	__aeabi_f2uiz
 2546 0658 0346     		mov	r3, r0
 2547 065a 9AB2     		uxth	r2, r3
 2548 065c 4A4B     		ldr	r3, .L205+48
 2549 065e 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
 2550 0662 07E0     		b	.L89
 2551              	.L88:
 941:main.c        ****             }
 942:main.c        ****             else
 943:main.c        ****             {
 944:main.c        ****                 processed_pedals[main_counter] = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 63


 2552              		.loc 1 944 0
 2553 0664 3C4B     		ldr	r3, .L205
 2554 0666 1B78     		ldrb	r3, [r3]
 2555 0668 DBB2     		uxtb	r3, r3
 2556 066a 1A46     		mov	r2, r3
 2557 066c 464B     		ldr	r3, .L205+48
 2558 066e 0021     		movs	r1, #0
 2559 0670 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2560              	.L89:
 945:main.c        ****             }
 946:main.c        ****             if (processed_pedals[main_counter] > 4095)
 2561              		.loc 1 946 0
 2562 0674 384B     		ldr	r3, .L205
 2563 0676 1B78     		ldrb	r3, [r3]
 2564 0678 DBB2     		uxtb	r3, r3
 2565 067a 1A46     		mov	r2, r3
 2566 067c 424B     		ldr	r3, .L205+48
 2567 067e 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2568 0682 B3F5805F 		cmp	r3, #4096
 2569 0686 08D3     		bcc	.L90
 947:main.c        ****             {
 948:main.c        ****                 processed_pedals[main_counter] = 4095;
 2570              		.loc 1 948 0
 2571 0688 334B     		ldr	r3, .L205
 2572 068a 1B78     		ldrb	r3, [r3]
 2573 068c DBB2     		uxtb	r3, r3
 2574 068e 1A46     		mov	r2, r3
 2575 0690 3D4B     		ldr	r3, .L205+48
 2576 0692 40F6FF71 		movw	r1, #4095
 2577 0696 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2578              	.L90:
 949:main.c        ****             }
 950:main.c        ****             
 951:main.c        ****             
 952:main.c        ****             //if ( processed_pedals[main_counter] != prev_processed_pedals[main_counter])
 953:main.c        ****             {
 954:main.c        ****                 //sendMIDIControlChange(main_counter, (processed_pedals[main_counter] >> 7), 1);
 955:main.c        ****                 //sendMIDIControlChange(main_counter+36, (processed_pedals[main_counter] & 127), 1)
 956:main.c        ****             }
 957:main.c        ****             pedals_float[main_counter] = (float)processed_pedals[main_counter] * 2.442002442002442e
 2579              		.loc 1 957 0
 2580 069a 2F4B     		ldr	r3, .L205
 2581 069c 1B78     		ldrb	r3, [r3]
 2582 069e DBB2     		uxtb	r3, r3
 2583 06a0 1C46     		mov	r4, r3
 2584 06a2 2D4B     		ldr	r3, .L205
 2585 06a4 1B78     		ldrb	r3, [r3]
 2586 06a6 DBB2     		uxtb	r3, r3
 2587 06a8 1A46     		mov	r2, r3
 2588 06aa 374B     		ldr	r3, .L205+48
 2589 06ac 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2590 06b0 1846     		mov	r0, r3
 2591 06b2 FFF7FEFF 		bl	__aeabi_ui2f
 2592 06b6 0346     		mov	r3, r0
 2593 06b8 3449     		ldr	r1, .L205+52
 2594 06ba 1846     		mov	r0, r3
 2595 06bc FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 64


 2596 06c0 0346     		mov	r3, r0
 2597 06c2 1A46     		mov	r2, r3
 2598 06c4 324B     		ldr	r3, .L205+56
 2599 06c6 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 958:main.c        ****             pedals8bit[main_counter] = (float)processed_pedals[main_counter] * 0.0625f;
 2600              		.loc 1 958 0
 2601 06ca 234B     		ldr	r3, .L205
 2602 06cc 1B78     		ldrb	r3, [r3]
 2603 06ce DBB2     		uxtb	r3, r3
 2604 06d0 1C46     		mov	r4, r3
 2605 06d2 214B     		ldr	r3, .L205
 2606 06d4 1B78     		ldrb	r3, [r3]
 2607 06d6 DBB2     		uxtb	r3, r3
 2608 06d8 1A46     		mov	r2, r3
 2609 06da 2B4B     		ldr	r3, .L205+48
 2610 06dc 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2611 06e0 1846     		mov	r0, r3
 2612 06e2 FFF7FEFF 		bl	__aeabi_ui2f
 2613 06e6 0346     		mov	r3, r0
 2614 06e8 4FF07651 		mov	r1, #1031798784
 2615 06ec 1846     		mov	r0, r3
 2616 06ee FFF7FEFF 		bl	__aeabi_fmul
 2617 06f2 0346     		mov	r3, r0
 2618 06f4 1846     		mov	r0, r3
 2619 06f6 FFF7FEFF 		bl	__aeabi_f2uiz
 2620 06fa 0346     		mov	r3, r0
 2621 06fc DAB2     		uxtb	r2, r3
 2622 06fe 254B     		ldr	r3, .L205+60
 2623 0700 1A55     		strb	r2, [r3, r4]
 959:main.c        ****             prev_processed_pedals[main_counter] = processed_pedals[main_counter];
 2624              		.loc 1 959 0
 2625 0702 154B     		ldr	r3, .L205
 2626 0704 1B78     		ldrb	r3, [r3]
 2627 0706 DBB2     		uxtb	r3, r3
 2628 0708 1A46     		mov	r2, r3
 2629 070a 134B     		ldr	r3, .L205
 2630 070c 1B78     		ldrb	r3, [r3]
 2631 070e DBB2     		uxtb	r3, r3
 2632 0710 1946     		mov	r1, r3
 2633 0712 1D4B     		ldr	r3, .L205+48
 2634 0714 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 2635 0718 1F4B     		ldr	r3, .L205+64
 2636 071a 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2637              	.LBE15:
 2638 071e 6CE0     		b	.L91
 2639              	.L87:
 960:main.c        ****         }
 961:main.c        ****         else
 962:main.c        ****         {
 963:main.c        ****             processed_volumePedal = (float)volumePedal * 1.007378258730939f; //compensate for lower
 2640              		.loc 1 963 0
 2641 0720 144B     		ldr	r3, .L205+28
 2642 0722 1B88     		ldrh	r3, [r3]
 2643 0724 1846     		mov	r0, r3
 2644 0726 FFF7FEFF 		bl	__aeabi_ui2f
 2645 072a 0346     		mov	r3, r0
 2646 072c 1B49     		ldr	r1, .L205+68
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 65


 2647 072e 1846     		mov	r0, r3
 2648 0730 FFF7FEFF 		bl	__aeabi_fmul
 2649 0734 0346     		mov	r3, r0
 2650 0736 1846     		mov	r0, r3
 2651 0738 FFF7FEFF 		bl	__aeabi_f2iz
 2652 073c 0346     		mov	r3, r0
 2653 073e 1AB2     		sxth	r2, r3
 2654 0740 174B     		ldr	r3, .L205+72
 2655 0742 1A80     		strh	r2, [r3]	@ movhi
 964:main.c        **** 
 965:main.c        ****             if (processed_volumePedal < 0)
 2656              		.loc 1 965 0
 2657 0744 164B     		ldr	r3, .L205+72
 2658 0746 B3F90030 		ldrsh	r3, [r3]
 2659 074a 002B     		cmp	r3, #0
 2660 074c 2ADA     		bge	.L92
 966:main.c        ****             {
 967:main.c        ****                 processed_volumePedal = 0;
 2661              		.loc 1 967 0
 2662 074e 144B     		ldr	r3, .L205+72
 2663 0750 0022     		movs	r2, #0
 2664 0752 1A80     		strh	r2, [r3]	@ movhi
 2665 0754 30E0     		b	.L93
 2666              	.L206:
 2667 0756 00BF     		.align	2
 2668              	.L205:
 2669 0758 00000000 		.word	main_counter
 2670 075c 00000000 		.word	i2c_skipped
 2671 0760 00000000 		.word	I2Cbuff1
 2672 0764 00000000 		.word	status
 2673 0768 00000000 		.word	macroKnobValues
 2674 076c 00000000 		.word	macroOLEDWaitingToSend
 2675 0770 00000000 		.word	I2Cbuff2
 2676 0774 00000000 		.word	volumePedal
 2677 0778 00000000 		.word	mainOLEDWaitingToSend
 2678 077c 00000000 		.word	angle
 2679 0780 00000000 		.word	pedals_low
 2680 0784 00000000 		.word	pedalRatios
 2681 0788 00000000 		.word	processed_pedals
 2682 078c 01088039 		.word	964691969
 2683 0790 00000000 		.word	pedals_float
 2684 0794 00000000 		.word	pedals8bit
 2685 0798 00000000 		.word	prev_processed_pedals
 2686 079c C5F1803F 		.word	1065415109
 2687 07a0 00000000 		.word	processed_volumePedal
 2688              	.L92:
 968:main.c        ****             }
 969:main.c        ****             else if (processed_volumePedal > 4095)
 2689              		.loc 1 969 0
 2690 07a4 A34B     		ldr	r3, .L207
 2691 07a6 B3F90030 		ldrsh	r3, [r3]
 2692 07aa B3F5805F 		cmp	r3, #4096
 2693 07ae 03DB     		blt	.L93
 970:main.c        ****             {
 971:main.c        ****                  processed_volumePedal = 4095;
 2694              		.loc 1 971 0
 2695 07b0 A04B     		ldr	r3, .L207
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 66


 2696 07b2 40F6FF72 		movw	r2, #4095
 2697 07b6 1A80     		strh	r2, [r3]	@ movhi
 2698              	.L93:
 972:main.c        ****             }
 973:main.c        ****             
 974:main.c        ****             if ( processed_volumePedal != prev_processed_volumePedal)
 2699              		.loc 1 974 0
 2700 07b8 9E4B     		ldr	r3, .L207
 2701 07ba B3F90020 		ldrsh	r2, [r3]
 2702 07be 9E4B     		ldr	r3, .L207+4
 2703 07c0 B3F90030 		ldrsh	r3, [r3]
 2704 07c4 9A42     		cmp	r2, r3
 2705 07c6 13D0     		beq	.L94
 2706              	.LBB16:
 975:main.c        ****             {
 976:main.c        ****                 uint16_t tempPedal = processed_volumePedal;
 2707              		.loc 1 976 0
 2708 07c8 9A4B     		ldr	r3, .L207
 2709 07ca B3F90030 		ldrsh	r3, [r3]
 2710 07ce FB84     		strh	r3, [r7, #38]	@ movhi
 977:main.c        ****                 
 978:main.c        ****                 sendMIDIControlChange(21, ( tempPedal >> 7), 0);
 2711              		.loc 1 978 0
 2712 07d0 FB8C     		ldrh	r3, [r7, #38]
 2713 07d2 DB09     		lsrs	r3, r3, #7
 2714 07d4 9BB2     		uxth	r3, r3
 2715 07d6 0022     		movs	r2, #0
 2716 07d8 1946     		mov	r1, r3
 2717 07da 1520     		movs	r0, #21
 2718 07dc FFF7FEFF 		bl	sendMIDIControlChange
 979:main.c        ****                 sendMIDIControlChange(22, ( tempPedal & 127), 0);
 2719              		.loc 1 979 0
 2720 07e0 FB8C     		ldrh	r3, [r7, #38]
 2721 07e2 03F07F03 		and	r3, r3, #127
 2722 07e6 0022     		movs	r2, #0
 2723 07e8 1946     		mov	r1, r3
 2724 07ea 1620     		movs	r0, #22
 2725 07ec FFF7FEFF 		bl	sendMIDIControlChange
 2726              	.L94:
 2727              	.LBE16:
 980:main.c        ****             }
 981:main.c        ****              prev_processed_volumePedal = processed_volumePedal;
 2728              		.loc 1 981 0
 2729 07f0 904B     		ldr	r3, .L207
 2730 07f2 B3F90020 		ldrsh	r2, [r3]
 2731 07f6 904B     		ldr	r3, .L207+4
 2732 07f8 1A80     		strh	r2, [r3]	@ movhi
 2733              	.L91:
 982:main.c        ****         }
 983:main.c        ****         
 984:main.c        ****         main_counter++;
 2734              		.loc 1 984 0
 2735 07fa 904B     		ldr	r3, .L207+8
 2736 07fc 1B78     		ldrb	r3, [r3]
 2737 07fe DBB2     		uxtb	r3, r3
 2738 0800 0133     		adds	r3, r3, #1
 2739 0802 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 67


 2740 0804 8D4B     		ldr	r3, .L207+8
 2741 0806 1A70     		strb	r2, [r3]
 985:main.c        **** 
 986:main.c        ****         if (main_counter > 11)
 2742              		.loc 1 986 0
 2743 0808 8C4B     		ldr	r3, .L207+8
 2744 080a 1B78     		ldrb	r3, [r3]
 2745 080c DBB2     		uxtb	r3, r3
 2746 080e 0B2B     		cmp	r3, #11
 2747 0810 02D9     		bls	.L95
 987:main.c        ****         {
 988:main.c        ****             main_counter = 0;
 2748              		.loc 1 988 0
 2749 0812 8A4B     		ldr	r3, .L207+8
 2750 0814 0022     		movs	r2, #0
 2751 0816 1A70     		strb	r2, [r3]
 2752              	.L95:
 989:main.c        ****         }
 990:main.c        ****         
 991:main.c        ****         #if 0
 992:main.c        ****             
 993:main.c        ****             
 994:main.c        ****         main_counter++;
 995:main.c        ****         if (main_counter >= 11)
 996:main.c        ****         {
 997:main.c        ****                /*  
 998:main.c        ****             testpin3_Write(1);
 999:main.c        ****             I2Cbuff1[0] = 1<<6;
1000:main.c        ****     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1001:main.c        ****         OLEDwriteInt(bar[1], 5, 0,FirstLine);
1002:main.c        **** 
1003:main.c        ****         //CyDelay(1);
1004:main.c        ****         
1005:main.c        ****         OLEDwriteInt(octave, 1, 0,SecondLine);
1006:main.c        **** 
1007:main.c        ****         OLED_draw();
1008:main.c        ****                     I2Cbuff1[0] = 1<<0;
1009:main.c        ****     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1010:main.c        ****         testpin3_Write(0);
1011:main.c        ****             */
1012:main.c        ****             main_counter = 0;
1013:main.c        ****         }
1014:main.c        ****         #endif
1015:main.c        ****         if ((rxBufferBar[!currentBarBuffer][6] == 254) && (rxBufferBar[!currentBarBuffer][7] == 253
 2753              		.loc 1 1015 0
 2754 0818 894B     		ldr	r3, .L207+12
 2755 081a 1B78     		ldrb	r3, [r3]
 2756 081c DBB2     		uxtb	r3, r3
 2757 081e 002B     		cmp	r3, #0
 2758 0820 0CBF     		ite	eq
 2759 0822 0123     		moveq	r3, #1
 2760 0824 0023     		movne	r3, #0
 2761 0826 DBB2     		uxtb	r3, r3
 2762 0828 864A     		ldr	r2, .L207+16
 2763 082a DB00     		lsls	r3, r3, #3
 2764 082c 1344     		add	r3, r3, r2
 2765 082e 9B79     		ldrb	r3, [r3, #6]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 68


 2766 0830 DBB2     		uxtb	r3, r3
 2767 0832 FE2B     		cmp	r3, #254
 2768 0834 40F05281 		bne	.L96
 2769              		.loc 1 1015 0 is_stmt 0 discriminator 1
 2770 0838 814B     		ldr	r3, .L207+12
 2771 083a 1B78     		ldrb	r3, [r3]
 2772 083c DBB2     		uxtb	r3, r3
 2773 083e 002B     		cmp	r3, #0
 2774 0840 0CBF     		ite	eq
 2775 0842 0123     		moveq	r3, #1
 2776 0844 0023     		movne	r3, #0
 2777 0846 DBB2     		uxtb	r3, r3
 2778 0848 7E4A     		ldr	r2, .L207+16
 2779 084a DB00     		lsls	r3, r3, #3
 2780 084c 1344     		add	r3, r3, r2
 2781 084e DB79     		ldrb	r3, [r3, #7]
 2782 0850 DBB2     		uxtb	r3, r3
 2783 0852 FD2B     		cmp	r3, #253
 2784 0854 40F04281 		bne	.L96
 2785              	.LBB17:
1016:main.c        ****         {
1017:main.c        ****             for (int i = 0; i < 2; i++)
 2786              		.loc 1 1017 0 is_stmt 1
 2787 0858 0023     		movs	r3, #0
 2788 085a BB66     		str	r3, [r7, #104]
 2789 085c 3AE1     		b	.L97
 2790              	.L109:
1018:main.c        ****             {
1019:main.c        ****                 bar[i] = ((rxBufferBar[!currentBarBuffer][i*2] << 8) + rxBufferBar[!currentBarBuffe
 2791              		.loc 1 1019 0
 2792 085e 784B     		ldr	r3, .L207+12
 2793 0860 1B78     		ldrb	r3, [r3]
 2794 0862 DBB2     		uxtb	r3, r3
 2795 0864 002B     		cmp	r3, #0
 2796 0866 0CBF     		ite	eq
 2797 0868 0123     		moveq	r3, #1
 2798 086a 0023     		movne	r3, #0
 2799 086c DBB2     		uxtb	r3, r3
 2800 086e 1A46     		mov	r2, r3
 2801 0870 BB6E     		ldr	r3, [r7, #104]
 2802 0872 5B00     		lsls	r3, r3, #1
 2803 0874 7349     		ldr	r1, .L207+16
 2804 0876 D200     		lsls	r2, r2, #3
 2805 0878 0A44     		add	r2, r2, r1
 2806 087a 1344     		add	r3, r3, r2
 2807 087c 1B78     		ldrb	r3, [r3]
 2808 087e DBB2     		uxtb	r3, r3
 2809 0880 9BB2     		uxth	r3, r3
 2810 0882 1B02     		lsls	r3, r3, #8
 2811 0884 9AB2     		uxth	r2, r3
 2812 0886 6E4B     		ldr	r3, .L207+12
 2813 0888 1B78     		ldrb	r3, [r3]
 2814 088a DBB2     		uxtb	r3, r3
 2815 088c 002B     		cmp	r3, #0
 2816 088e 0CBF     		ite	eq
 2817 0890 0123     		moveq	r3, #1
 2818 0892 0023     		movne	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 69


 2819 0894 DBB2     		uxtb	r3, r3
 2820 0896 1946     		mov	r1, r3
 2821 0898 BB6E     		ldr	r3, [r7, #104]
 2822 089a 5B00     		lsls	r3, r3, #1
 2823 089c 0133     		adds	r3, r3, #1
 2824 089e 6948     		ldr	r0, .L207+16
 2825 08a0 C900     		lsls	r1, r1, #3
 2826 08a2 0144     		add	r1, r1, r0
 2827 08a4 0B44     		add	r3, r3, r1
 2828 08a6 1B78     		ldrb	r3, [r3]
 2829 08a8 DBB2     		uxtb	r3, r3
 2830 08aa 9BB2     		uxth	r3, r3
 2831 08ac 1344     		add	r3, r3, r2
 2832 08ae 99B2     		uxth	r1, r3
 2833 08b0 654A     		ldr	r2, .L207+20
 2834 08b2 BB6E     		ldr	r3, [r7, #104]
 2835 08b4 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1020:main.c        ****     
1021:main.c        ****                 if (bar[i] != prevBar[i])
 2836              		.loc 1 1021 0
 2837 08b8 634A     		ldr	r2, .L207+20
 2838 08ba BB6E     		ldr	r3, [r7, #104]
 2839 08bc 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2840 08c0 9AB2     		uxth	r2, r3
 2841 08c2 6249     		ldr	r1, .L207+24
 2842 08c4 BB6E     		ldr	r3, [r7, #104]
 2843 08c6 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 2844 08ca 9BB2     		uxth	r3, r3
 2845 08cc 9A42     		cmp	r2, r3
 2846 08ce 00F0F580 		beq	.L98
1022:main.c        ****                 {
1023:main.c        ****     				if ((bar[i] == 65535) || (bar[i] > fretMeasurements[0][i]))
 2847              		.loc 1 1023 0
 2848 08d2 5D4A     		ldr	r2, .L207+20
 2849 08d4 BB6E     		ldr	r3, [r7, #104]
 2850 08d6 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2851 08da 9BB2     		uxth	r3, r3
 2852 08dc 4FF6FF72 		movw	r2, #65535
 2853 08e0 9342     		cmp	r3, r2
 2854 08e2 11D0     		beq	.L99
 2855              		.loc 1 1023 0 is_stmt 0 discriminator 1
 2856 08e4 584A     		ldr	r2, .L207+20
 2857 08e6 BB6E     		ldr	r3, [r7, #104]
 2858 08e8 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2859 08ec 9BB2     		uxth	r3, r3
 2860 08ee 1846     		mov	r0, r3
 2861 08f0 FFF7FEFF 		bl	__aeabi_i2f
 2862 08f4 564A     		ldr	r2, .L207+28
 2863 08f6 BB6E     		ldr	r3, [r7, #104]
 2864 08f8 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2865 08fc 1946     		mov	r1, r3
 2866 08fe FFF7FEFF 		bl	__aeabi_fcmpgt
 2867 0902 0346     		mov	r3, r0
 2868 0904 002B     		cmp	r3, #0
 2869 0906 06D0     		beq	.L198
 2870              	.L99:
1024:main.c        ****     				{
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 70


1025:main.c        ****     					stringMappedPositions[i] = 1.0f;
 2871              		.loc 1 1025 0 is_stmt 1
 2872 0908 524A     		ldr	r2, .L207+32
 2873 090a BB6E     		ldr	r3, [r7, #104]
 2874 090c 4FF07E51 		mov	r1, #1065353216
 2875 0910 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 2876 0914 C3E0     		b	.L102
 2877              	.L198:
1026:main.c        ****     				}
1027:main.c        **** 
1028:main.c        ****     				else if ((bar[i] >= fretMeasurements[1][i]) && (bar[i] <= fretMeasurements[0][i]))
 2878              		.loc 1 1028 0
 2879 0916 4C4A     		ldr	r2, .L207+20
 2880 0918 BB6E     		ldr	r3, [r7, #104]
 2881 091a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2882 091e 9BB2     		uxth	r3, r3
 2883 0920 1846     		mov	r0, r3
 2884 0922 FFF7FEFF 		bl	__aeabi_i2f
 2885 0926 4A4A     		ldr	r2, .L207+28
 2886 0928 BB6E     		ldr	r3, [r7, #104]
 2887 092a 0433     		adds	r3, r3, #4
 2888 092c 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2889 0930 1946     		mov	r1, r3
 2890 0932 FFF7FEFF 		bl	__aeabi_fcmpge
 2891 0936 0346     		mov	r3, r0
 2892 0938 002B     		cmp	r3, #0
 2893 093a 32D0     		beq	.L103
 2894              		.loc 1 1028 0 is_stmt 0 discriminator 1
 2895 093c 424A     		ldr	r2, .L207+20
 2896 093e BB6E     		ldr	r3, [r7, #104]
 2897 0940 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2898 0944 9BB2     		uxth	r3, r3
 2899 0946 1846     		mov	r0, r3
 2900 0948 FFF7FEFF 		bl	__aeabi_i2f
 2901 094c 404A     		ldr	r2, .L207+28
 2902 094e BB6E     		ldr	r3, [r7, #104]
 2903 0950 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2904 0954 1946     		mov	r1, r3
 2905 0956 FFF7FEFF 		bl	__aeabi_fcmple
 2906 095a 0346     		mov	r3, r0
 2907 095c 002B     		cmp	r3, #0
 2908 095e 20D0     		beq	.L103
1029:main.c        ****     				{
1030:main.c        ****     					stringMappedPositions[i] = map((float)bar[i], fretMeasurements[0][i], fretMeasurements[1][
 2909              		.loc 1 1030 0 is_stmt 1
 2910 0960 394A     		ldr	r2, .L207+20
 2911 0962 BB6E     		ldr	r3, [r7, #104]
 2912 0964 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2913 0968 9BB2     		uxth	r3, r3
 2914 096a 1846     		mov	r0, r3
 2915 096c FFF7FEFF 		bl	__aeabi_ui2f
 2916 0970 0446     		mov	r4, r0
 2917 0972 374A     		ldr	r2, .L207+28
 2918 0974 BB6E     		ldr	r3, [r7, #104]
 2919 0976 52F82310 		ldr	r1, [r2, r3, lsl #2]	@ float
 2920 097a 354A     		ldr	r2, .L207+28
 2921 097c BB6E     		ldr	r3, [r7, #104]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 71


 2922 097e 0433     		adds	r3, r3, #4
 2923 0980 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 2924 0984 344B     		ldr	r3, .L207+36
 2925 0986 1868     		ldr	r0, [r3]	@ float
 2926 0988 334B     		ldr	r3, .L207+36
 2927 098a 5B68     		ldr	r3, [r3, #4]	@ float
 2928 098c 0093     		str	r3, [sp]	@ float
 2929 098e 0346     		mov	r3, r0
 2930 0990 2046     		mov	r0, r4
 2931 0992 FFF7FEFF 		bl	map
 2932 0996 0146     		mov	r1, r0
 2933 0998 2E4A     		ldr	r2, .L207+32
 2934 099a BB6E     		ldr	r3, [r7, #104]
 2935 099c 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 2936 09a0 7DE0     		b	.L102
 2937              	.L103:
1031:main.c        ****     				}
1032:main.c        **** 
1033:main.c        ****     				else if ((bar[i] >= fretMeasurements[2][i]) && (bar[i] < fretMeasurements[1][i]))
 2938              		.loc 1 1033 0
 2939 09a2 294A     		ldr	r2, .L207+20
 2940 09a4 BB6E     		ldr	r3, [r7, #104]
 2941 09a6 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2942 09aa 9BB2     		uxth	r3, r3
 2943 09ac 1846     		mov	r0, r3
 2944 09ae FFF7FEFF 		bl	__aeabi_i2f
 2945 09b2 274A     		ldr	r2, .L207+28
 2946 09b4 BB6E     		ldr	r3, [r7, #104]
 2947 09b6 0833     		adds	r3, r3, #8
 2948 09b8 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2949 09bc 1946     		mov	r1, r3
 2950 09be FFF7FEFF 		bl	__aeabi_fcmpge
 2951 09c2 0346     		mov	r3, r0
 2952 09c4 002B     		cmp	r3, #0
 2953 09c6 49D0     		beq	.L106
 2954              		.loc 1 1033 0 is_stmt 0 discriminator 1
 2955 09c8 1F4A     		ldr	r2, .L207+20
 2956 09ca BB6E     		ldr	r3, [r7, #104]
 2957 09cc 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2958 09d0 9BB2     		uxth	r3, r3
 2959 09d2 1846     		mov	r0, r3
 2960 09d4 FFF7FEFF 		bl	__aeabi_i2f
 2961 09d8 1D4A     		ldr	r2, .L207+28
 2962 09da BB6E     		ldr	r3, [r7, #104]
 2963 09dc 0433     		adds	r3, r3, #4
 2964 09de 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2965 09e2 1946     		mov	r1, r3
 2966 09e4 FFF7FEFF 		bl	__aeabi_fcmplt
 2967 09e8 0346     		mov	r3, r0
 2968 09ea 002B     		cmp	r3, #0
 2969 09ec 36D0     		beq	.L106
1034:main.c        ****     				{
1035:main.c        ****     					stringMappedPositions[i] = map((float)bar[i], fretMeasurements[1][i], fretMeasurements[2][
 2970              		.loc 1 1035 0 is_stmt 1
 2971 09ee 164A     		ldr	r2, .L207+20
 2972 09f0 BB6E     		ldr	r3, [r7, #104]
 2973 09f2 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 72


 2974 09f6 9BB2     		uxth	r3, r3
 2975 09f8 1846     		mov	r0, r3
 2976 09fa FFF7FEFF 		bl	__aeabi_ui2f
 2977 09fe 0446     		mov	r4, r0
 2978 0a00 134A     		ldr	r2, .L207+28
 2979 0a02 BB6E     		ldr	r3, [r7, #104]
 2980 0a04 0433     		adds	r3, r3, #4
 2981 0a06 52F82310 		ldr	r1, [r2, r3, lsl #2]	@ float
 2982 0a0a 114A     		ldr	r2, .L207+28
 2983 0a0c BB6E     		ldr	r3, [r7, #104]
 2984 0a0e 0833     		adds	r3, r3, #8
 2985 0a10 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 2986 0a14 104B     		ldr	r3, .L207+36
 2987 0a16 5868     		ldr	r0, [r3, #4]	@ float
 2988 0a18 0F4B     		ldr	r3, .L207+36
 2989 0a1a 9B68     		ldr	r3, [r3, #8]	@ float
 2990 0a1c 0093     		str	r3, [sp]	@ float
 2991 0a1e 0346     		mov	r3, r0
 2992 0a20 2046     		mov	r0, r4
 2993 0a22 FFF7FEFF 		bl	map
 2994 0a26 0146     		mov	r1, r0
 2995 0a28 0A4A     		ldr	r2, .L207+32
 2996 0a2a BB6E     		ldr	r3, [r7, #104]
 2997 0a2c 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 2998 0a30 35E0     		b	.L102
 2999              	.L208:
 3000 0a32 00BF     		.align	2
 3001              	.L207:
 3002 0a34 00000000 		.word	processed_volumePedal
 3003 0a38 00000000 		.word	prev_processed_volumePedal
 3004 0a3c 00000000 		.word	main_counter
 3005 0a40 00000000 		.word	currentBarBuffer
 3006 0a44 00000000 		.word	rxBufferBar
 3007 0a48 00000000 		.word	bar
 3008 0a4c 00000000 		.word	prevBar
 3009 0a50 00000000 		.word	fretMeasurements
 3010 0a54 00000000 		.word	stringMappedPositions
 3011 0a58 00000000 		.word	fretScaling
 3012              	.L106:
1036:main.c        ****     				}
1037:main.c        **** 
1038:main.c        ****     				else
1039:main.c        ****     				{
1040:main.c        ****     					stringMappedPositions[i] = map((float)bar[i], fretMeasurements[2][i], fretMeasurements[3][
 3013              		.loc 1 1040 0
 3014 0a5c 734A     		ldr	r2, .L209
 3015 0a5e BB6E     		ldr	r3, [r7, #104]
 3016 0a60 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3017 0a64 9BB2     		uxth	r3, r3
 3018 0a66 1846     		mov	r0, r3
 3019 0a68 FFF7FEFF 		bl	__aeabi_ui2f
 3020 0a6c 0446     		mov	r4, r0
 3021 0a6e 704A     		ldr	r2, .L209+4
 3022 0a70 BB6E     		ldr	r3, [r7, #104]
 3023 0a72 0833     		adds	r3, r3, #8
 3024 0a74 52F82310 		ldr	r1, [r2, r3, lsl #2]	@ float
 3025 0a78 6D4A     		ldr	r2, .L209+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 73


 3026 0a7a BB6E     		ldr	r3, [r7, #104]
 3027 0a7c 0C33     		adds	r3, r3, #12
 3028 0a7e 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 3029 0a82 6C4B     		ldr	r3, .L209+8
 3030 0a84 9868     		ldr	r0, [r3, #8]	@ float
 3031 0a86 6B4B     		ldr	r3, .L209+8
 3032 0a88 DB68     		ldr	r3, [r3, #12]	@ float
 3033 0a8a 0093     		str	r3, [sp]	@ float
 3034 0a8c 0346     		mov	r3, r0
 3035 0a8e 2046     		mov	r0, r4
 3036 0a90 FFF7FEFF 		bl	map
 3037 0a94 0146     		mov	r1, r0
 3038 0a96 684A     		ldr	r2, .L209+12
 3039 0a98 BB6E     		ldr	r3, [r7, #104]
 3040 0a9a 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 3041              	.L102:
1041:main.c        ****     				}
1042:main.c        **** 
1043:main.c        ****                     invStringMappedPositions[i] = 1.0f / stringMappedPositions[i];
 3042              		.loc 1 1043 0
 3043 0a9e 664A     		ldr	r2, .L209+12
 3044 0aa0 BB6E     		ldr	r3, [r7, #104]
 3045 0aa2 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3046 0aa6 1946     		mov	r1, r3
 3047 0aa8 4FF07E50 		mov	r0, #1065353216
 3048 0aac FFF7FEFF 		bl	__aeabi_fdiv
 3049 0ab0 0346     		mov	r3, r0
 3050 0ab2 1946     		mov	r1, r3
 3051 0ab4 614A     		ldr	r2, .L209+16
 3052 0ab6 BB6E     		ldr	r3, [r7, #104]
 3053 0ab8 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 3054              	.L98:
1044:main.c        ****                 }
1045:main.c        ****                 prevBar[i] = bar[i];
 3055              		.loc 1 1045 0 discriminator 2
 3056 0abc 5B4A     		ldr	r2, .L209
 3057 0abe BB6E     		ldr	r3, [r7, #104]
 3058 0ac0 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3059 0ac4 99B2     		uxth	r1, r3
 3060 0ac6 5E4A     		ldr	r2, .L209+20
 3061 0ac8 BB6E     		ldr	r3, [r7, #104]
 3062 0aca 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1017:main.c        ****             {
 3063              		.loc 1 1017 0 discriminator 2
 3064 0ace BB6E     		ldr	r3, [r7, #104]
 3065 0ad0 0133     		adds	r3, r3, #1
 3066 0ad2 BB66     		str	r3, [r7, #104]
 3067              	.L97:
1017:main.c        ****             {
 3068              		.loc 1 1017 0 is_stmt 0 discriminator 1
 3069 0ad4 BB6E     		ldr	r3, [r7, #104]
 3070 0ad6 012B     		cmp	r3, #1
 3071 0ad8 7FF7C1AE 		ble	.L109
 3072              	.L96:
 3073              	.LBE17:
 3074              	.LBB18:
1046:main.c        ****             }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 74


1047:main.c        ****         }
1048:main.c        **** 
1049:main.c        ****         for (int i = 0 ; i < numStrings; i++)
 3075              		.loc 1 1049 0 is_stmt 1
 3076 0adc 0023     		movs	r3, #0
 3077 0ade 7B66     		str	r3, [r7, #100]
 3078 0ae0 1AE0     		b	.L110
 3079              	.L112:
1050:main.c        ****         {
1051:main.c        ****             if (strings[i] != prevStrings[i])
 3080              		.loc 1 1051 0
 3081 0ae2 584A     		ldr	r2, .L209+24
 3082 0ae4 7B6E     		ldr	r3, [r7, #100]
 3083 0ae6 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3084 0aea 9AB2     		uxth	r2, r3
 3085 0aec 5649     		ldr	r1, .L209+28
 3086 0aee 7B6E     		ldr	r3, [r7, #100]
 3087 0af0 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 3088 0af4 9BB2     		uxth	r3, r3
 3089 0af6 9A42     		cmp	r2, r3
 3090 0af8 02D0     		beq	.L111
1052:main.c        ****             {
1053:main.c        ****                 noteEvent(i);
 3091              		.loc 1 1053 0
 3092 0afa 786E     		ldr	r0, [r7, #100]
 3093 0afc FFF7FEFF 		bl	noteEvent
 3094              	.L111:
1054:main.c        ****             }
1055:main.c        ****             prevStrings[i] = strings[i];
 3095              		.loc 1 1055 0 discriminator 2
 3096 0b00 504A     		ldr	r2, .L209+24
 3097 0b02 7B6E     		ldr	r3, [r7, #100]
 3098 0b04 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3099 0b08 99B2     		uxth	r1, r3
 3100 0b0a 4F4A     		ldr	r2, .L209+28
 3101 0b0c 7B6E     		ldr	r3, [r7, #100]
 3102 0b0e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1049:main.c        ****         {
 3103              		.loc 1 1049 0 discriminator 2
 3104 0b12 7B6E     		ldr	r3, [r7, #100]
 3105 0b14 0133     		adds	r3, r3, #1
 3106 0b16 7B66     		str	r3, [r7, #100]
 3107              	.L110:
1049:main.c        ****         {
 3108              		.loc 1 1049 0 is_stmt 0 discriminator 1
 3109 0b18 4C4B     		ldr	r3, .L209+32
 3110 0b1a 1B68     		ldr	r3, [r3]
 3111 0b1c 7A6E     		ldr	r2, [r7, #100]
 3112 0b1e 9A42     		cmp	r2, r3
 3113 0b20 DFDB     		blt	.L112
 3114              	.LBE18:
1056:main.c        ****         }
1057:main.c        ****         
1058:main.c        **** 
1059:main.c        **** 
1060:main.c        ****         
1061:main.c        ****         
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 75


1062:main.c        ****         if (!oct1_Read())
 3115              		.loc 1 1062 0 is_stmt 1
 3116 0b22 FFF7FEFF 		bl	oct1_Read
 3117 0b26 0346     		mov	r3, r0
 3118 0b28 002B     		cmp	r3, #0
 3119 0b2a 24D1     		bne	.L113
1063:main.c        ****         {
1064:main.c        ****             if (octave > 4)
 3120              		.loc 1 1064 0
 3121 0b2c 484B     		ldr	r3, .L209+36
 3122 0b2e 1B68     		ldr	r3, [r3]
 3123 0b30 042B     		cmp	r3, #4
 3124 0b32 03DD     		ble	.L114
1065:main.c        ****             {
1066:main.c        ****                 octave = 4;
 3125              		.loc 1 1066 0
 3126 0b34 464B     		ldr	r3, .L209+36
 3127 0b36 0422     		movs	r2, #4
 3128 0b38 1A60     		str	r2, [r3]
 3129 0b3a 0CE0     		b	.L115
 3130              	.L114:
1067:main.c        **** 
1068:main.c        ****             }
1069:main.c        ****             else if ((oct1Up) && (octave > 0))
 3131              		.loc 1 1069 0
 3132 0b3c 454B     		ldr	r3, .L209+40
 3133 0b3e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3134 0b40 002B     		cmp	r3, #0
 3135 0b42 08D0     		beq	.L115
 3136              		.loc 1 1069 0 is_stmt 0 discriminator 1
 3137 0b44 424B     		ldr	r3, .L209+36
 3138 0b46 1B68     		ldr	r3, [r3]
 3139 0b48 002B     		cmp	r3, #0
 3140 0b4a 04DD     		ble	.L115
1070:main.c        ****             {
1071:main.c        ****                 octave--;
 3141              		.loc 1 1071 0 is_stmt 1
 3142 0b4c 404B     		ldr	r3, .L209+36
 3143 0b4e 1B68     		ldr	r3, [r3]
 3144 0b50 013B     		subs	r3, r3, #1
 3145 0b52 3F4A     		ldr	r2, .L209+36
 3146 0b54 1360     		str	r3, [r2]
 3147              	.L115:
1072:main.c        ****             }
1073:main.c        ****             LED_amber1_Write(1);
 3148              		.loc 1 1073 0
 3149 0b56 0120     		movs	r0, #1
 3150 0b58 FFF7FEFF 		bl	LED_amber1_Write
1074:main.c        ****             LED_amber2_Write(0);
 3151              		.loc 1 1074 0
 3152 0b5c 0020     		movs	r0, #0
 3153 0b5e FFF7FEFF 		bl	LED_amber2_Write
1075:main.c        ****             LED_amber3_Write(0);
 3154              		.loc 1 1075 0
 3155 0b62 0020     		movs	r0, #0
 3156 0b64 FFF7FEFF 		bl	LED_amber3_Write
1076:main.c        ****             LED_amber4_Write(0);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 76


 3157              		.loc 1 1076 0
 3158 0b68 0020     		movs	r0, #0
 3159 0b6a FFF7FEFF 		bl	LED_amber4_Write
1077:main.c        ****             oct1Up = 0;
 3160              		.loc 1 1077 0
 3161 0b6e 394B     		ldr	r3, .L209+40
 3162 0b70 0022     		movs	r2, #0
 3163 0b72 1A70     		strb	r2, [r3]
 3164 0b74 07E0     		b	.L116
 3165              	.L113:
1078:main.c        ****         }
1079:main.c        ****         
1080:main.c        ****         else if (oct1_Read())
 3166              		.loc 1 1080 0
 3167 0b76 FFF7FEFF 		bl	oct1_Read
 3168 0b7a 0346     		mov	r3, r0
 3169 0b7c 002B     		cmp	r3, #0
 3170 0b7e 02D0     		beq	.L116
1081:main.c        ****         {
1082:main.c        ****             oct1Up = 1;
 3171              		.loc 1 1082 0
 3172 0b80 344B     		ldr	r3, .L209+40
 3173 0b82 0122     		movs	r2, #1
 3174 0b84 1A70     		strb	r2, [r3]
 3175              	.L116:
1083:main.c        ****         }
1084:main.c        ****         
1085:main.c        ****         if (!oct2_Read())
 3176              		.loc 1 1085 0
 3177 0b86 FFF7FEFF 		bl	oct2_Read
 3178 0b8a 0346     		mov	r3, r0
 3179 0b8c 002B     		cmp	r3, #0
 3180 0b8e 0ED1     		bne	.L117
1086:main.c        ****         {
1087:main.c        ****             octave = 5;
 3181              		.loc 1 1087 0
 3182 0b90 2F4B     		ldr	r3, .L209+36
 3183 0b92 0522     		movs	r2, #5
 3184 0b94 1A60     		str	r2, [r3]
1088:main.c        ****             LED_amber1_Write(0);
 3185              		.loc 1 1088 0
 3186 0b96 0020     		movs	r0, #0
 3187 0b98 FFF7FEFF 		bl	LED_amber1_Write
1089:main.c        ****             LED_amber2_Write(1);
 3188              		.loc 1 1089 0
 3189 0b9c 0120     		movs	r0, #1
 3190 0b9e FFF7FEFF 		bl	LED_amber2_Write
1090:main.c        ****             LED_amber3_Write(0);
 3191              		.loc 1 1090 0
 3192 0ba2 0020     		movs	r0, #0
 3193 0ba4 FFF7FEFF 		bl	LED_amber3_Write
1091:main.c        ****             LED_amber4_Write(0);
 3194              		.loc 1 1091 0
 3195 0ba8 0020     		movs	r0, #0
 3196 0baa FFF7FEFF 		bl	LED_amber4_Write
 3197              	.L117:
1092:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 77


1093:main.c        ****         if (!oct3_Read())
 3198              		.loc 1 1093 0
 3199 0bae FFF7FEFF 		bl	oct3_Read
 3200 0bb2 0346     		mov	r3, r0
 3201 0bb4 002B     		cmp	r3, #0
 3202 0bb6 0ED1     		bne	.L118
1094:main.c        ****         {
1095:main.c        ****             octave = 6;
 3203              		.loc 1 1095 0
 3204 0bb8 254B     		ldr	r3, .L209+36
 3205 0bba 0622     		movs	r2, #6
 3206 0bbc 1A60     		str	r2, [r3]
1096:main.c        ****             LED_amber1_Write(0);
 3207              		.loc 1 1096 0
 3208 0bbe 0020     		movs	r0, #0
 3209 0bc0 FFF7FEFF 		bl	LED_amber1_Write
1097:main.c        ****             LED_amber2_Write(0);
 3210              		.loc 1 1097 0
 3211 0bc4 0020     		movs	r0, #0
 3212 0bc6 FFF7FEFF 		bl	LED_amber2_Write
1098:main.c        ****             LED_amber3_Write(1);
 3213              		.loc 1 1098 0
 3214 0bca 0120     		movs	r0, #1
 3215 0bcc FFF7FEFF 		bl	LED_amber3_Write
1099:main.c        ****             LED_amber4_Write(0);            
 3216              		.loc 1 1099 0
 3217 0bd0 0020     		movs	r0, #0
 3218 0bd2 FFF7FEFF 		bl	LED_amber4_Write
 3219              	.L118:
1100:main.c        ****         }
1101:main.c        ****         if (!oct4_Read())
 3220              		.loc 1 1101 0
 3221 0bd6 FFF7FEFF 		bl	oct4_Read
 3222 0bda 0346     		mov	r3, r0
 3223 0bdc 002B     		cmp	r3, #0
 3224 0bde 3DD1     		bne	.L119
1102:main.c        ****         {
1103:main.c        ****             if (octave < 7)
 3225              		.loc 1 1103 0
 3226 0be0 1B4B     		ldr	r3, .L209+36
 3227 0be2 1B68     		ldr	r3, [r3]
 3228 0be4 062B     		cmp	r3, #6
 3229 0be6 03DC     		bgt	.L120
1104:main.c        ****             {
1105:main.c        ****                 octave = 7;
 3230              		.loc 1 1105 0
 3231 0be8 194B     		ldr	r3, .L209+36
 3232 0bea 0722     		movs	r2, #7
 3233 0bec 1A60     		str	r2, [r3]
 3234 0bee 0CE0     		b	.L121
 3235              	.L120:
1106:main.c        **** 
1107:main.c        ****             }
1108:main.c        ****             else if ((oct4Up) && (octave < 11))
 3236              		.loc 1 1108 0
 3237 0bf0 194B     		ldr	r3, .L209+44
 3238 0bf2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 78


 3239 0bf4 002B     		cmp	r3, #0
 3240 0bf6 08D0     		beq	.L121
 3241              		.loc 1 1108 0 is_stmt 0 discriminator 1
 3242 0bf8 154B     		ldr	r3, .L209+36
 3243 0bfa 1B68     		ldr	r3, [r3]
 3244 0bfc 0A2B     		cmp	r3, #10
 3245 0bfe 04DC     		bgt	.L121
1109:main.c        ****             {
1110:main.c        ****                 octave++;
 3246              		.loc 1 1110 0 is_stmt 1
 3247 0c00 134B     		ldr	r3, .L209+36
 3248 0c02 1B68     		ldr	r3, [r3]
 3249 0c04 0133     		adds	r3, r3, #1
 3250 0c06 124A     		ldr	r2, .L209+36
 3251 0c08 1360     		str	r3, [r2]
 3252              	.L121:
1111:main.c        **** 
1112:main.c        ****             }
1113:main.c        ****             LED_amber1_Write(0);
 3253              		.loc 1 1113 0
 3254 0c0a 0020     		movs	r0, #0
 3255 0c0c FFF7FEFF 		bl	LED_amber1_Write
1114:main.c        ****             LED_amber2_Write(0);
 3256              		.loc 1 1114 0
 3257 0c10 0020     		movs	r0, #0
 3258 0c12 FFF7FEFF 		bl	LED_amber2_Write
1115:main.c        ****             LED_amber3_Write(0);
 3259              		.loc 1 1115 0
 3260 0c16 0020     		movs	r0, #0
 3261 0c18 FFF7FEFF 		bl	LED_amber3_Write
1116:main.c        ****             LED_amber4_Write(1);
 3262              		.loc 1 1116 0
 3263 0c1c 0120     		movs	r0, #1
 3264 0c1e FFF7FEFF 		bl	LED_amber4_Write
1117:main.c        ****             oct4Up = 0;
 3265              		.loc 1 1117 0
 3266 0c22 0D4B     		ldr	r3, .L209+44
 3267 0c24 0022     		movs	r2, #0
 3268 0c26 1A70     		strb	r2, [r3]
 3269 0c28 20E0     		b	.L122
 3270              	.L210:
 3271 0c2a 00BF     		.align	2
 3272              	.L209:
 3273 0c2c 00000000 		.word	bar
 3274 0c30 00000000 		.word	fretMeasurements
 3275 0c34 00000000 		.word	fretScaling
 3276 0c38 00000000 		.word	stringMappedPositions
 3277 0c3c 00000000 		.word	invStringMappedPositions
 3278 0c40 00000000 		.word	prevBar
 3279 0c44 00000000 		.word	strings
 3280 0c48 00000000 		.word	prevStrings
 3281 0c4c 00000000 		.word	numStrings
 3282 0c50 00000000 		.word	octave
 3283 0c54 00000000 		.word	oct1Up
 3284 0c58 00000000 		.word	oct4Up
 3285              	.L119:
1118:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 79


1119:main.c        ****         
1120:main.c        ****         else if (oct4_Read())
 3286              		.loc 1 1120 0
 3287 0c5c FFF7FEFF 		bl	oct4_Read
 3288 0c60 0346     		mov	r3, r0
 3289 0c62 002B     		cmp	r3, #0
 3290 0c64 02D0     		beq	.L122
1121:main.c        ****         {
1122:main.c        ****             oct4Up = 1;
 3291              		.loc 1 1122 0
 3292 0c66 B54B     		ldr	r3, .L211
 3293 0c68 0122     		movs	r2, #1
 3294 0c6a 1A70     		strb	r2, [r3]
 3295              	.L122:
1123:main.c        ****         }
1124:main.c        ****         
1125:main.c        ****         if (!neck1_button_Read())
 3296              		.loc 1 1125 0
 3297 0c6c FFF7FEFF 		bl	neck1_button_Read
 3298 0c70 0346     		mov	r3, r0
 3299 0c72 002B     		cmp	r3, #0
 3300 0c74 32D1     		bne	.L123
1126:main.c        ****         {
1127:main.c        ****             currentNeck = 0;
 3301              		.loc 1 1127 0
 3302 0c76 B24B     		ldr	r3, .L211+4
 3303 0c78 0022     		movs	r2, #0
 3304 0c7a 1A60     		str	r2, [r3]
1128:main.c        ****             currentCopedent = necks[currentNeck];
 3305              		.loc 1 1128 0
 3306 0c7c B04B     		ldr	r3, .L211+4
 3307 0c7e 1B68     		ldr	r3, [r3]
 3308 0c80 B04A     		ldr	r2, .L211+8
 3309 0c82 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 3310 0c84 B04B     		ldr	r3, .L211+12
 3311 0c86 1A70     		strb	r2, [r3]
1129:main.c        ****             LED_red1_Write(0);
 3312              		.loc 1 1129 0
 3313 0c88 0020     		movs	r0, #0
 3314 0c8a FFF7FEFF 		bl	LED_red1_Write
1130:main.c        ****             LED_green2_Write(1);
 3315              		.loc 1 1130 0
 3316 0c8e 0120     		movs	r0, #1
 3317 0c90 FFF7FEFF 		bl	LED_green2_Write
1131:main.c        ****             OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 3318              		.loc 1 1131 0
 3319 0c94 AC4B     		ldr	r3, .L211+12
 3320 0c96 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3321 0c98 1846     		mov	r0, r3
 3322 0c9a 0323     		movs	r3, #3
 3323 0c9c 0022     		movs	r2, #0
 3324 0c9e 0221     		movs	r1, #2
 3325 0ca0 FFF7FEFF 		bl	OLEDwriteInt
1132:main.c        ****             OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 3326              		.loc 1 1132 0
 3327 0ca4 FFF7FEFF 		bl	OLEDgetCursor
 3328 0ca8 0246     		mov	r2, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 80


 3329 0caa 0323     		movs	r3, #3
 3330 0cac 0121     		movs	r1, #1
 3331 0cae A748     		ldr	r0, .L211+16
 3332 0cb0 FFF7FEFF 		bl	OLEDwriteString
1133:main.c        ****             OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_BYTES, 
 3333              		.loc 1 1133 0
 3334 0cb4 A44B     		ldr	r3, .L211+12
 3335 0cb6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3336 0cb8 1A46     		mov	r2, r3
 3337 0cba 1346     		mov	r3, r2
 3338 0cbc DB00     		lsls	r3, r3, #3
 3339 0cbe 9B1A     		subs	r3, r3, r2
 3340 0cc0 5B00     		lsls	r3, r3, #1
 3341 0cc2 A34A     		ldr	r2, .L211+20
 3342 0cc4 9C18     		adds	r4, r3, r2
 3343 0cc6 FFF7FEFF 		bl	OLEDgetCursor
 3344 0cca 0246     		mov	r2, r0
 3345 0ccc 0323     		movs	r3, #3
 3346 0cce 0E21     		movs	r1, #14
 3347 0cd0 2046     		mov	r0, r4
 3348 0cd2 FFF7FEFF 		bl	OLEDwriteString
1134:main.c        ****             mainOLEDWaitingToSend = 1;
 3349              		.loc 1 1134 0
 3350 0cd6 9F4B     		ldr	r3, .L211+24
 3351 0cd8 0122     		movs	r2, #1
 3352 0cda 1A60     		str	r2, [r3]
 3353              	.L123:
1135:main.c        ****         }
1136:main.c        ****         if (!neck2_button_Read())
 3354              		.loc 1 1136 0
 3355 0cdc FFF7FEFF 		bl	neck2_button_Read
 3356 0ce0 0346     		mov	r3, r0
 3357 0ce2 002B     		cmp	r3, #0
 3358 0ce4 3BD1     		bne	.L124
1137:main.c        ****         {
1138:main.c        ****             currentNeck = 1;
 3359              		.loc 1 1138 0
 3360 0ce6 964B     		ldr	r3, .L211+4
 3361 0ce8 0122     		movs	r2, #1
 3362 0cea 1A60     		str	r2, [r3]
1139:main.c        ****             currentCopedent = necks[currentNeck];
 3363              		.loc 1 1139 0
 3364 0cec 944B     		ldr	r3, .L211+4
 3365 0cee 1B68     		ldr	r3, [r3]
 3366 0cf0 944A     		ldr	r2, .L211+8
 3367 0cf2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 3368 0cf4 944B     		ldr	r3, .L211+12
 3369 0cf6 1A70     		strb	r2, [r3]
1140:main.c        ****             
1141:main.c        ****             LED_red1_Write(1);
 3370              		.loc 1 1141 0
 3371 0cf8 0120     		movs	r0, #1
 3372 0cfa FFF7FEFF 		bl	LED_red1_Write
1142:main.c        ****             LED_green2_Write(0);
 3373              		.loc 1 1142 0
 3374 0cfe 0020     		movs	r0, #0
 3375 0d00 FFF7FEFF 		bl	LED_green2_Write
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 81


1143:main.c        ****             EEPROM_WriteByte(currentCopedent, EEPROM_NECKS_OFFSET + currentNeck);
 3376              		.loc 1 1143 0
 3377 0d04 904B     		ldr	r3, .L211+12
 3378 0d06 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3379 0d08 8D4B     		ldr	r3, .L211+4
 3380 0d0a 1B68     		ldr	r3, [r3]
 3381 0d0c 9BB2     		uxth	r3, r3
 3382 0d0e 1946     		mov	r1, r3
 3383 0d10 1046     		mov	r0, r2
 3384 0d12 FFF7FEFF 		bl	EEPROM_WriteByte
1144:main.c        ****             OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 3385              		.loc 1 1144 0
 3386 0d16 8C4B     		ldr	r3, .L211+12
 3387 0d18 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3388 0d1a 1846     		mov	r0, r3
 3389 0d1c 0323     		movs	r3, #3
 3390 0d1e 0022     		movs	r2, #0
 3391 0d20 0221     		movs	r1, #2
 3392 0d22 FFF7FEFF 		bl	OLEDwriteInt
1145:main.c        ****             OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 3393              		.loc 1 1145 0
 3394 0d26 FFF7FEFF 		bl	OLEDgetCursor
 3395 0d2a 0246     		mov	r2, r0
 3396 0d2c 0323     		movs	r3, #3
 3397 0d2e 0121     		movs	r1, #1
 3398 0d30 8648     		ldr	r0, .L211+16
 3399 0d32 FFF7FEFF 		bl	OLEDwriteString
1146:main.c        ****             OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_BYTES, 
 3400              		.loc 1 1146 0
 3401 0d36 844B     		ldr	r3, .L211+12
 3402 0d38 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3403 0d3a 1A46     		mov	r2, r3
 3404 0d3c 1346     		mov	r3, r2
 3405 0d3e DB00     		lsls	r3, r3, #3
 3406 0d40 9B1A     		subs	r3, r3, r2
 3407 0d42 5B00     		lsls	r3, r3, #1
 3408 0d44 824A     		ldr	r2, .L211+20
 3409 0d46 9C18     		adds	r4, r3, r2
 3410 0d48 FFF7FEFF 		bl	OLEDgetCursor
 3411 0d4c 0246     		mov	r2, r0
 3412 0d4e 0323     		movs	r3, #3
 3413 0d50 0E21     		movs	r1, #14
 3414 0d52 2046     		mov	r0, r4
 3415 0d54 FFF7FEFF 		bl	OLEDwriteString
1147:main.c        ****             mainOLEDWaitingToSend = 1;
 3416              		.loc 1 1147 0
 3417 0d58 7E4B     		ldr	r3, .L211+24
 3418 0d5a 0122     		movs	r2, #1
 3419 0d5c 1A60     		str	r2, [r3]
 3420              	.L124:
1148:main.c        ****         }
1149:main.c        ****         
1150:main.c        ****         if ((!enter_button_Read()) && (enterUp))
 3421              		.loc 1 1150 0
 3422 0d5e FFF7FEFF 		bl	enter_button_Read
 3423 0d62 0346     		mov	r3, r0
 3424 0d64 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 82


 3425 0d66 16D1     		bne	.L125
 3426              		.loc 1 1150 0 is_stmt 0 discriminator 1
 3427 0d68 7B4B     		ldr	r3, .L211+28
 3428 0d6a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3429 0d6c 002B     		cmp	r3, #0
 3430 0d6e 12D0     		beq	.L125
1151:main.c        ****         {
1152:main.c        ****             dualSlider = !dualSlider;
 3431              		.loc 1 1152 0 is_stmt 1
 3432 0d70 7A4B     		ldr	r3, .L211+32
 3433 0d72 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3434 0d74 002B     		cmp	r3, #0
 3435 0d76 0CBF     		ite	eq
 3436 0d78 0123     		moveq	r3, #1
 3437 0d7a 0023     		movne	r3, #0
 3438 0d7c DBB2     		uxtb	r3, r3
 3439 0d7e 1A46     		mov	r2, r3
 3440 0d80 764B     		ldr	r3, .L211+32
 3441 0d82 1A70     		strb	r2, [r3]
1153:main.c        ****             LED_green1_Write(dualSlider);
 3442              		.loc 1 1153 0
 3443 0d84 754B     		ldr	r3, .L211+32
 3444 0d86 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3445 0d88 1846     		mov	r0, r3
 3446 0d8a FFF7FEFF 		bl	LED_green1_Write
1154:main.c        ****             enterUp = 0;
 3447              		.loc 1 1154 0
 3448 0d8e 724B     		ldr	r3, .L211+28
 3449 0d90 0022     		movs	r2, #0
 3450 0d92 1A70     		strb	r2, [r3]
 3451 0d94 07E0     		b	.L126
 3452              	.L125:
1155:main.c        ****         }
1156:main.c        ****         else if (enter_button_Read())
 3453              		.loc 1 1156 0
 3454 0d96 FFF7FEFF 		bl	enter_button_Read
 3455 0d9a 0346     		mov	r3, r0
 3456 0d9c 002B     		cmp	r3, #0
 3457 0d9e 02D0     		beq	.L126
1157:main.c        ****         {
1158:main.c        ****             enterUp = 1;
 3458              		.loc 1 1158 0
 3459 0da0 6D4B     		ldr	r3, .L211+28
 3460 0da2 0122     		movs	r2, #1
 3461 0da4 1A70     		strb	r2, [r3]
 3462              	.L126:
1159:main.c        ****         }
1160:main.c        ****         
1161:main.c        ****         
1162:main.c        ****         if (!editMode)
 3463              		.loc 1 1162 0
 3464 0da6 6E4B     		ldr	r3, .L211+36
 3465 0da8 1B68     		ldr	r3, [r3]
 3466 0daa 002B     		cmp	r3, #0
 3467 0dac 40F01081 		bne	.L127
1163:main.c        ****         {
1164:main.c        ****         
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 83


1165:main.c        ****             if ((!button1_Read()) && (button1Up))
 3468              		.loc 1 1165 0
 3469 0db0 FFF7FEFF 		bl	button1_Read
 3470 0db4 0346     		mov	r3, r0
 3471 0db6 002B     		cmp	r3, #0
 3472 0db8 47D1     		bne	.L128
 3473              		.loc 1 1165 0 is_stmt 0 discriminator 1
 3474 0dba 6A4B     		ldr	r3, .L211+40
 3475 0dbc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3476 0dbe 002B     		cmp	r3, #0
 3477 0dc0 43D0     		beq	.L128
1166:main.c        ****             {
1167:main.c        ****                 currentCopedent -= 1;
 3478              		.loc 1 1167 0 is_stmt 1
 3479 0dc2 614B     		ldr	r3, .L211+12
 3480 0dc4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3481 0dc6 013B     		subs	r3, r3, #1
 3482 0dc8 DAB2     		uxtb	r2, r3
 3483 0dca 5F4B     		ldr	r3, .L211+12
 3484 0dcc 1A70     		strb	r2, [r3]
1168:main.c        ****                 currentCopedent &= 31;
 3485              		.loc 1 1168 0
 3486 0dce 5E4B     		ldr	r3, .L211+12
 3487 0dd0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3488 0dd2 03F01F03 		and	r3, r3, #31
 3489 0dd6 DAB2     		uxtb	r2, r3
 3490 0dd8 5B4B     		ldr	r3, .L211+12
 3491 0dda 1A70     		strb	r2, [r3]
1169:main.c        ****                 necks[currentNeck] = currentCopedent;
 3492              		.loc 1 1169 0
 3493 0ddc 584B     		ldr	r3, .L211+4
 3494 0dde 1B68     		ldr	r3, [r3]
 3495 0de0 594A     		ldr	r2, .L211+12
 3496 0de2 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3497 0de4 574A     		ldr	r2, .L211+8
 3498 0de6 D154     		strb	r1, [r2, r3]
1170:main.c        ****                 EEPROM_WriteByte(currentCopedent, EEPROM_NECKS_OFFSET + currentNeck);
 3499              		.loc 1 1170 0
 3500 0de8 574B     		ldr	r3, .L211+12
 3501 0dea 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3502 0dec 544B     		ldr	r3, .L211+4
 3503 0dee 1B68     		ldr	r3, [r3]
 3504 0df0 9BB2     		uxth	r3, r3
 3505 0df2 1946     		mov	r1, r3
 3506 0df4 1046     		mov	r0, r2
 3507 0df6 FFF7FEFF 		bl	EEPROM_WriteByte
1171:main.c        ****                 OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 3508              		.loc 1 1171 0
 3509 0dfa 534B     		ldr	r3, .L211+12
 3510 0dfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3511 0dfe 1846     		mov	r0, r3
 3512 0e00 0323     		movs	r3, #3
 3513 0e02 0022     		movs	r2, #0
 3514 0e04 0221     		movs	r1, #2
 3515 0e06 FFF7FEFF 		bl	OLEDwriteInt
1172:main.c        ****                 OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 3516              		.loc 1 1172 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 84


 3517 0e0a FFF7FEFF 		bl	OLEDgetCursor
 3518 0e0e 0246     		mov	r2, r0
 3519 0e10 0323     		movs	r3, #3
 3520 0e12 0121     		movs	r1, #1
 3521 0e14 4D48     		ldr	r0, .L211+16
 3522 0e16 FFF7FEFF 		bl	OLEDwriteString
1173:main.c        ****                 OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_BYT
 3523              		.loc 1 1173 0
 3524 0e1a 4B4B     		ldr	r3, .L211+12
 3525 0e1c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3526 0e1e 1A46     		mov	r2, r3
 3527 0e20 1346     		mov	r3, r2
 3528 0e22 DB00     		lsls	r3, r3, #3
 3529 0e24 9B1A     		subs	r3, r3, r2
 3530 0e26 5B00     		lsls	r3, r3, #1
 3531 0e28 494A     		ldr	r2, .L211+20
 3532 0e2a 9C18     		adds	r4, r3, r2
 3533 0e2c FFF7FEFF 		bl	OLEDgetCursor
 3534 0e30 0246     		mov	r2, r0
 3535 0e32 0323     		movs	r3, #3
 3536 0e34 0E21     		movs	r1, #14
 3537 0e36 2046     		mov	r0, r4
 3538 0e38 FFF7FEFF 		bl	OLEDwriteString
1174:main.c        ****                 mainOLEDWaitingToSend = 1;
 3539              		.loc 1 1174 0
 3540 0e3c 454B     		ldr	r3, .L211+24
 3541 0e3e 0122     		movs	r2, #1
 3542 0e40 1A60     		str	r2, [r3]
1175:main.c        ****                 button1Up = 0;
 3543              		.loc 1 1175 0
 3544 0e42 484B     		ldr	r3, .L211+40
 3545 0e44 0022     		movs	r2, #0
 3546 0e46 1A70     		strb	r2, [r3]
 3547 0e48 07E0     		b	.L129
 3548              	.L128:
1176:main.c        ****             }
1177:main.c        ****             else if (button1_Read())
 3549              		.loc 1 1177 0
 3550 0e4a FFF7FEFF 		bl	button1_Read
 3551 0e4e 0346     		mov	r3, r0
 3552 0e50 002B     		cmp	r3, #0
 3553 0e52 02D0     		beq	.L129
1178:main.c        ****             {
1179:main.c        ****                 button1Up = 1;
 3554              		.loc 1 1179 0
 3555 0e54 434B     		ldr	r3, .L211+40
 3556 0e56 0122     		movs	r2, #1
 3557 0e58 1A70     		strb	r2, [r3]
 3558              	.L129:
1180:main.c        ****             }
1181:main.c        ****             
1182:main.c        ****             if ((!button2_Read()) && (button2Up))
 3559              		.loc 1 1182 0
 3560 0e5a FFF7FEFF 		bl	button2_Read
 3561 0e5e 0346     		mov	r3, r0
 3562 0e60 002B     		cmp	r3, #0
 3563 0e62 47D1     		bne	.L130
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 85


 3564              		.loc 1 1182 0 is_stmt 0 discriminator 1
 3565 0e64 404B     		ldr	r3, .L211+44
 3566 0e66 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3567 0e68 002B     		cmp	r3, #0
 3568 0e6a 43D0     		beq	.L130
1183:main.c        ****             {
1184:main.c        ****                 currentCopedent += 1;
 3569              		.loc 1 1184 0 is_stmt 1
 3570 0e6c 364B     		ldr	r3, .L211+12
 3571 0e6e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3572 0e70 0133     		adds	r3, r3, #1
 3573 0e72 DAB2     		uxtb	r2, r3
 3574 0e74 344B     		ldr	r3, .L211+12
 3575 0e76 1A70     		strb	r2, [r3]
1185:main.c        ****                 currentCopedent &= 31;
 3576              		.loc 1 1185 0
 3577 0e78 334B     		ldr	r3, .L211+12
 3578 0e7a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3579 0e7c 03F01F03 		and	r3, r3, #31
 3580 0e80 DAB2     		uxtb	r2, r3
 3581 0e82 314B     		ldr	r3, .L211+12
 3582 0e84 1A70     		strb	r2, [r3]
1186:main.c        ****                 necks[currentNeck] = currentCopedent;
 3583              		.loc 1 1186 0
 3584 0e86 2E4B     		ldr	r3, .L211+4
 3585 0e88 1B68     		ldr	r3, [r3]
 3586 0e8a 2F4A     		ldr	r2, .L211+12
 3587 0e8c 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3588 0e8e 2D4A     		ldr	r2, .L211+8
 3589 0e90 D154     		strb	r1, [r2, r3]
1187:main.c        ****                 EEPROM_WriteByte(currentCopedent, EEPROM_NECKS_OFFSET + currentNeck);
 3590              		.loc 1 1187 0
 3591 0e92 2D4B     		ldr	r3, .L211+12
 3592 0e94 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3593 0e96 2A4B     		ldr	r3, .L211+4
 3594 0e98 1B68     		ldr	r3, [r3]
 3595 0e9a 9BB2     		uxth	r3, r3
 3596 0e9c 1946     		mov	r1, r3
 3597 0e9e 1046     		mov	r0, r2
 3598 0ea0 FFF7FEFF 		bl	EEPROM_WriteByte
1188:main.c        ****                 OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 3599              		.loc 1 1188 0
 3600 0ea4 284B     		ldr	r3, .L211+12
 3601 0ea6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3602 0ea8 1846     		mov	r0, r3
 3603 0eaa 0323     		movs	r3, #3
 3604 0eac 0022     		movs	r2, #0
 3605 0eae 0221     		movs	r1, #2
 3606 0eb0 FFF7FEFF 		bl	OLEDwriteInt
1189:main.c        ****                 OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 3607              		.loc 1 1189 0
 3608 0eb4 FFF7FEFF 		bl	OLEDgetCursor
 3609 0eb8 0246     		mov	r2, r0
 3610 0eba 0323     		movs	r3, #3
 3611 0ebc 0121     		movs	r1, #1
 3612 0ebe 2348     		ldr	r0, .L211+16
 3613 0ec0 FFF7FEFF 		bl	OLEDwriteString
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 86


1190:main.c        ****                 OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_BYT
 3614              		.loc 1 1190 0
 3615 0ec4 204B     		ldr	r3, .L211+12
 3616 0ec6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3617 0ec8 1A46     		mov	r2, r3
 3618 0eca 1346     		mov	r3, r2
 3619 0ecc DB00     		lsls	r3, r3, #3
 3620 0ece 9B1A     		subs	r3, r3, r2
 3621 0ed0 5B00     		lsls	r3, r3, #1
 3622 0ed2 1F4A     		ldr	r2, .L211+20
 3623 0ed4 9C18     		adds	r4, r3, r2
 3624 0ed6 FFF7FEFF 		bl	OLEDgetCursor
 3625 0eda 0246     		mov	r2, r0
 3626 0edc 0323     		movs	r3, #3
 3627 0ede 0E21     		movs	r1, #14
 3628 0ee0 2046     		mov	r0, r4
 3629 0ee2 FFF7FEFF 		bl	OLEDwriteString
1191:main.c        ****                 mainOLEDWaitingToSend = 1;
 3630              		.loc 1 1191 0
 3631 0ee6 1B4B     		ldr	r3, .L211+24
 3632 0ee8 0122     		movs	r2, #1
 3633 0eea 1A60     		str	r2, [r3]
1192:main.c        ****                 button2Up = 0;
 3634              		.loc 1 1192 0
 3635 0eec 1E4B     		ldr	r3, .L211+44
 3636 0eee 0022     		movs	r2, #0
 3637 0ef0 1A70     		strb	r2, [r3]
 3638 0ef2 07E0     		b	.L131
 3639              	.L130:
1193:main.c        ****             }
1194:main.c        ****             else if (button2_Read())
 3640              		.loc 1 1194 0
 3641 0ef4 FFF7FEFF 		bl	button2_Read
 3642 0ef8 0346     		mov	r3, r0
 3643 0efa 002B     		cmp	r3, #0
 3644 0efc 02D0     		beq	.L131
1195:main.c        ****             {
1196:main.c        ****                 button2Up = 1;
 3645              		.loc 1 1196 0
 3646 0efe 1A4B     		ldr	r3, .L211+44
 3647 0f00 0122     		movs	r2, #1
 3648 0f02 1A70     		strb	r2, [r3]
 3649              	.L131:
1197:main.c        ****             }
1198:main.c        ****             
1199:main.c        ****             if ((!button3_Read()) && (button3Up))
 3650              		.loc 1 1199 0
 3651 0f04 FFF7FEFF 		bl	button3_Read
 3652 0f08 0346     		mov	r3, r0
 3653 0f0a 002B     		cmp	r3, #0
 3654 0f0c 32D1     		bne	.L132
 3655              		.loc 1 1199 0 is_stmt 0 discriminator 1
 3656 0f0e 174B     		ldr	r3, .L211+48
 3657 0f10 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3658 0f12 002B     		cmp	r3, #0
 3659 0f14 2ED0     		beq	.L132
1200:main.c        ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 87


1201:main.c        ****                 patchNum -= 1;
 3660              		.loc 1 1201 0 is_stmt 1
 3661 0f16 164B     		ldr	r3, .L211+52
 3662 0f18 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3663 0f1a 013B     		subs	r3, r3, #1
 3664 0f1c DAB2     		uxtb	r2, r3
 3665 0f1e 144B     		ldr	r3, .L211+52
 3666 0f20 1A70     		strb	r2, [r3]
1202:main.c        ****                 patchNum &= 63;
 3667              		.loc 1 1202 0
 3668 0f22 134B     		ldr	r3, .L211+52
 3669 0f24 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3670 0f26 03F03F03 		and	r3, r3, #63
 3671 0f2a DAB2     		uxtb	r2, r3
 3672 0f2c 104B     		ldr	r3, .L211+52
 3673 0f2e 1A70     		strb	r2, [r3]
1203:main.c        ****                         displayCurrentPresetName();
 3674              		.loc 1 1203 0
 3675 0f30 FFF7FEFF 		bl	displayCurrentPresetName
1204:main.c        ****                 button3Up = 0;
 3676              		.loc 1 1204 0
 3677 0f34 0D4B     		ldr	r3, .L211+48
 3678 0f36 0022     		movs	r2, #0
 3679 0f38 1A70     		strb	r2, [r3]
 3680 0f3a 23E0     		b	.L133
 3681              	.L212:
 3682              		.align	2
 3683              	.L211:
 3684 0f3c 00000000 		.word	oct4Up
 3685 0f40 00000000 		.word	currentNeck
 3686 0f44 00000000 		.word	necks
 3687 0f48 00000000 		.word	currentCopedent
 3688 0f4c 00040000 		.word	.LC0
 3689 0f50 00000000 		.word	copedentNamesArray
 3690 0f54 00000000 		.word	mainOLEDWaitingToSend
 3691 0f58 00000000 		.word	enterUp
 3692 0f5c 00000000 		.word	dualSlider
 3693 0f60 00000000 		.word	editMode
 3694 0f64 00000000 		.word	button1Up
 3695 0f68 00000000 		.word	button2Up
 3696 0f6c 00000000 		.word	button3Up
 3697 0f70 00000000 		.word	patchNum
 3698              	.L132:
1205:main.c        ****             }
1206:main.c        ****             else if (button3_Read())
 3699              		.loc 1 1206 0
 3700 0f74 FFF7FEFF 		bl	button3_Read
 3701 0f78 0346     		mov	r3, r0
 3702 0f7a 002B     		cmp	r3, #0
 3703 0f7c 02D0     		beq	.L133
1207:main.c        ****             {
1208:main.c        ****                 button3Up = 1;
 3704              		.loc 1 1208 0
 3705 0f7e 894B     		ldr	r3, .L213
 3706 0f80 0122     		movs	r2, #1
 3707 0f82 1A70     		strb	r2, [r3]
 3708              	.L133:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 88


1209:main.c        ****             }
1210:main.c        ****             
1211:main.c        ****             if ((!button4_Read()) && (button4Up))
 3709              		.loc 1 1211 0
 3710 0f84 FFF7FEFF 		bl	button4_Read
 3711 0f88 0346     		mov	r3, r0
 3712 0f8a 002B     		cmp	r3, #0
 3713 0f8c 16D1     		bne	.L134
 3714              		.loc 1 1211 0 is_stmt 0 discriminator 1
 3715 0f8e 864B     		ldr	r3, .L213+4
 3716 0f90 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3717 0f92 002B     		cmp	r3, #0
 3718 0f94 12D0     		beq	.L134
1212:main.c        ****             {
1213:main.c        ****                 patchNum += 1;
 3719              		.loc 1 1213 0 is_stmt 1
 3720 0f96 854B     		ldr	r3, .L213+8
 3721 0f98 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3722 0f9a 0133     		adds	r3, r3, #1
 3723 0f9c DAB2     		uxtb	r2, r3
 3724 0f9e 834B     		ldr	r3, .L213+8
 3725 0fa0 1A70     		strb	r2, [r3]
1214:main.c        ****                 patchNum &= 63;
 3726              		.loc 1 1214 0
 3727 0fa2 824B     		ldr	r3, .L213+8
 3728 0fa4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3729 0fa6 03F03F03 		and	r3, r3, #63
 3730 0faa DAB2     		uxtb	r2, r3
 3731 0fac 7F4B     		ldr	r3, .L213+8
 3732 0fae 1A70     		strb	r2, [r3]
1215:main.c        ****                 displayCurrentPresetName();
 3733              		.loc 1 1215 0
 3734 0fb0 FFF7FEFF 		bl	displayCurrentPresetName
1216:main.c        ****                 button4Up = 0;
 3735              		.loc 1 1216 0
 3736 0fb4 7C4B     		ldr	r3, .L213+4
 3737 0fb6 0022     		movs	r2, #0
 3738 0fb8 1A70     		strb	r2, [r3]
 3739 0fba 11E1     		b	.L136
 3740              	.L134:
1217:main.c        ****             }
1218:main.c        ****             else if (button4_Read())
 3741              		.loc 1 1218 0
 3742 0fbc FFF7FEFF 		bl	button4_Read
 3743 0fc0 0346     		mov	r3, r0
 3744 0fc2 002B     		cmp	r3, #0
 3745 0fc4 00F00C81 		beq	.L136
1219:main.c        ****             {
1220:main.c        ****                 button4Up = 1;
 3746              		.loc 1 1220 0
 3747 0fc8 774B     		ldr	r3, .L213+4
 3748 0fca 0122     		movs	r2, #1
 3749 0fcc 1A70     		strb	r2, [r3]
 3750 0fce 07E1     		b	.L136
 3751              	.L127:
1221:main.c        ****             }
1222:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 89


1223:main.c        ****         //if in edit mode, then /left right up down work differently
1224:main.c        ****         else
1225:main.c        ****         {
1226:main.c        ****         
1227:main.c        ****             if ((!button1_Read()) && (button1Up))
 3752              		.loc 1 1227 0
 3753 0fd0 FFF7FEFF 		bl	button1_Read
 3754 0fd4 0346     		mov	r3, r0
 3755 0fd6 002B     		cmp	r3, #0
 3756 0fd8 47D1     		bne	.L137
 3757              		.loc 1 1227 0 is_stmt 0 discriminator 1
 3758 0fda 754B     		ldr	r3, .L213+12
 3759 0fdc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3760 0fde 002B     		cmp	r3, #0
 3761 0fe0 43D0     		beq	.L137
1228:main.c        ****             {
1229:main.c        ****                 currentCopedent -= 1;
 3762              		.loc 1 1229 0 is_stmt 1
 3763 0fe2 744B     		ldr	r3, .L213+16
 3764 0fe4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3765 0fe6 013B     		subs	r3, r3, #1
 3766 0fe8 DAB2     		uxtb	r2, r3
 3767 0fea 724B     		ldr	r3, .L213+16
 3768 0fec 1A70     		strb	r2, [r3]
1230:main.c        ****                 currentCopedent &= 31;
 3769              		.loc 1 1230 0
 3770 0fee 714B     		ldr	r3, .L213+16
 3771 0ff0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3772 0ff2 03F01F03 		and	r3, r3, #31
 3773 0ff6 DAB2     		uxtb	r2, r3
 3774 0ff8 6E4B     		ldr	r3, .L213+16
 3775 0ffa 1A70     		strb	r2, [r3]
1231:main.c        ****                 necks[currentNeck] = currentCopedent;
 3776              		.loc 1 1231 0
 3777 0ffc 6E4B     		ldr	r3, .L213+20
 3778 0ffe 1B68     		ldr	r3, [r3]
 3779 1000 6C4A     		ldr	r2, .L213+16
 3780 1002 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3781 1004 6D4A     		ldr	r2, .L213+24
 3782 1006 D154     		strb	r1, [r2, r3]
1232:main.c        ****                 EEPROM_WriteByte(currentCopedent, EEPROM_NECKS_OFFSET + currentNeck);
 3783              		.loc 1 1232 0
 3784 1008 6A4B     		ldr	r3, .L213+16
 3785 100a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3786 100c 6A4B     		ldr	r3, .L213+20
 3787 100e 1B68     		ldr	r3, [r3]
 3788 1010 9BB2     		uxth	r3, r3
 3789 1012 1946     		mov	r1, r3
 3790 1014 1046     		mov	r0, r2
 3791 1016 FFF7FEFF 		bl	EEPROM_WriteByte
1233:main.c        ****                 OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 3792              		.loc 1 1233 0
 3793 101a 664B     		ldr	r3, .L213+16
 3794 101c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3795 101e 1846     		mov	r0, r3
 3796 1020 0323     		movs	r3, #3
 3797 1022 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 90


 3798 1024 0221     		movs	r1, #2
 3799 1026 FFF7FEFF 		bl	OLEDwriteInt
1234:main.c        ****                 OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 3800              		.loc 1 1234 0
 3801 102a FFF7FEFF 		bl	OLEDgetCursor
 3802 102e 0246     		mov	r2, r0
 3803 1030 0323     		movs	r3, #3
 3804 1032 0121     		movs	r1, #1
 3805 1034 6248     		ldr	r0, .L213+28
 3806 1036 FFF7FEFF 		bl	OLEDwriteString
1235:main.c        ****                 OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_BYT
 3807              		.loc 1 1235 0
 3808 103a 5E4B     		ldr	r3, .L213+16
 3809 103c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3810 103e 1A46     		mov	r2, r3
 3811 1040 1346     		mov	r3, r2
 3812 1042 DB00     		lsls	r3, r3, #3
 3813 1044 9B1A     		subs	r3, r3, r2
 3814 1046 5B00     		lsls	r3, r3, #1
 3815 1048 5E4A     		ldr	r2, .L213+32
 3816 104a 9C18     		adds	r4, r3, r2
 3817 104c FFF7FEFF 		bl	OLEDgetCursor
 3818 1050 0246     		mov	r2, r0
 3819 1052 0323     		movs	r3, #3
 3820 1054 0E21     		movs	r1, #14
 3821 1056 2046     		mov	r0, r4
 3822 1058 FFF7FEFF 		bl	OLEDwriteString
1236:main.c        ****                 mainOLEDWaitingToSend = 1;
 3823              		.loc 1 1236 0
 3824 105c 5A4B     		ldr	r3, .L213+36
 3825 105e 0122     		movs	r2, #1
 3826 1060 1A60     		str	r2, [r3]
1237:main.c        ****                 button1Up = 0;
 3827              		.loc 1 1237 0
 3828 1062 534B     		ldr	r3, .L213+12
 3829 1064 0022     		movs	r2, #0
 3830 1066 1A70     		strb	r2, [r3]
 3831 1068 07E0     		b	.L138
 3832              	.L137:
1238:main.c        ****             }
1239:main.c        ****             else if (button1_Read())
 3833              		.loc 1 1239 0
 3834 106a FFF7FEFF 		bl	button1_Read
 3835 106e 0346     		mov	r3, r0
 3836 1070 002B     		cmp	r3, #0
 3837 1072 02D0     		beq	.L138
1240:main.c        ****             {
1241:main.c        ****                 button1Up = 1;
 3838              		.loc 1 1241 0
 3839 1074 4E4B     		ldr	r3, .L213+12
 3840 1076 0122     		movs	r2, #1
 3841 1078 1A70     		strb	r2, [r3]
 3842              	.L138:
1242:main.c        ****             }
1243:main.c        ****             
1244:main.c        ****             if ((!button2_Read()) && (button2Up))
 3843              		.loc 1 1244 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 91


 3844 107a FFF7FEFF 		bl	button2_Read
 3845 107e 0346     		mov	r3, r0
 3846 1080 002B     		cmp	r3, #0
 3847 1082 47D1     		bne	.L139
 3848              		.loc 1 1244 0 is_stmt 0 discriminator 1
 3849 1084 514B     		ldr	r3, .L213+40
 3850 1086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3851 1088 002B     		cmp	r3, #0
 3852 108a 43D0     		beq	.L139
1245:main.c        ****             {
1246:main.c        ****                 currentCopedent += 1;
 3853              		.loc 1 1246 0 is_stmt 1
 3854 108c 494B     		ldr	r3, .L213+16
 3855 108e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3856 1090 0133     		adds	r3, r3, #1
 3857 1092 DAB2     		uxtb	r2, r3
 3858 1094 474B     		ldr	r3, .L213+16
 3859 1096 1A70     		strb	r2, [r3]
1247:main.c        ****                 currentCopedent &= 31;
 3860              		.loc 1 1247 0
 3861 1098 464B     		ldr	r3, .L213+16
 3862 109a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3863 109c 03F01F03 		and	r3, r3, #31
 3864 10a0 DAB2     		uxtb	r2, r3
 3865 10a2 444B     		ldr	r3, .L213+16
 3866 10a4 1A70     		strb	r2, [r3]
1248:main.c        ****                 necks[currentNeck] = currentCopedent;
 3867              		.loc 1 1248 0
 3868 10a6 444B     		ldr	r3, .L213+20
 3869 10a8 1B68     		ldr	r3, [r3]
 3870 10aa 424A     		ldr	r2, .L213+16
 3871 10ac 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3872 10ae 434A     		ldr	r2, .L213+24
 3873 10b0 D154     		strb	r1, [r2, r3]
1249:main.c        ****                 EEPROM_WriteByte(currentCopedent, EEPROM_NECKS_OFFSET + currentNeck);
 3874              		.loc 1 1249 0
 3875 10b2 404B     		ldr	r3, .L213+16
 3876 10b4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3877 10b6 404B     		ldr	r3, .L213+20
 3878 10b8 1B68     		ldr	r3, [r3]
 3879 10ba 9BB2     		uxth	r3, r3
 3880 10bc 1946     		mov	r1, r3
 3881 10be 1046     		mov	r0, r2
 3882 10c0 FFF7FEFF 		bl	EEPROM_WriteByte
1250:main.c        ****                 OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 3883              		.loc 1 1250 0
 3884 10c4 3B4B     		ldr	r3, .L213+16
 3885 10c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3886 10c8 1846     		mov	r0, r3
 3887 10ca 0323     		movs	r3, #3
 3888 10cc 0022     		movs	r2, #0
 3889 10ce 0221     		movs	r1, #2
 3890 10d0 FFF7FEFF 		bl	OLEDwriteInt
1251:main.c        ****                 OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 3891              		.loc 1 1251 0
 3892 10d4 FFF7FEFF 		bl	OLEDgetCursor
 3893 10d8 0246     		mov	r2, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 92


 3894 10da 0323     		movs	r3, #3
 3895 10dc 0121     		movs	r1, #1
 3896 10de 3848     		ldr	r0, .L213+28
 3897 10e0 FFF7FEFF 		bl	OLEDwriteString
1252:main.c        ****                 OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_BYT
 3898              		.loc 1 1252 0
 3899 10e4 334B     		ldr	r3, .L213+16
 3900 10e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3901 10e8 1A46     		mov	r2, r3
 3902 10ea 1346     		mov	r3, r2
 3903 10ec DB00     		lsls	r3, r3, #3
 3904 10ee 9B1A     		subs	r3, r3, r2
 3905 10f0 5B00     		lsls	r3, r3, #1
 3906 10f2 344A     		ldr	r2, .L213+32
 3907 10f4 9C18     		adds	r4, r3, r2
 3908 10f6 FFF7FEFF 		bl	OLEDgetCursor
 3909 10fa 0246     		mov	r2, r0
 3910 10fc 0323     		movs	r3, #3
 3911 10fe 0E21     		movs	r1, #14
 3912 1100 2046     		mov	r0, r4
 3913 1102 FFF7FEFF 		bl	OLEDwriteString
1253:main.c        ****                 mainOLEDWaitingToSend = 1;
 3914              		.loc 1 1253 0
 3915 1106 304B     		ldr	r3, .L213+36
 3916 1108 0122     		movs	r2, #1
 3917 110a 1A60     		str	r2, [r3]
1254:main.c        ****                 button2Up = 0;
 3918              		.loc 1 1254 0
 3919 110c 2F4B     		ldr	r3, .L213+40
 3920 110e 0022     		movs	r2, #0
 3921 1110 1A70     		strb	r2, [r3]
 3922 1112 07E0     		b	.L140
 3923              	.L139:
1255:main.c        ****             }
1256:main.c        ****             else if (button2_Read())
 3924              		.loc 1 1256 0
 3925 1114 FFF7FEFF 		bl	button2_Read
 3926 1118 0346     		mov	r3, r0
 3927 111a 002B     		cmp	r3, #0
 3928 111c 02D0     		beq	.L140
1257:main.c        ****             {
1258:main.c        ****                 button2Up = 1;
 3929              		.loc 1 1258 0
 3930 111e 2B4B     		ldr	r3, .L213+40
 3931 1120 0122     		movs	r2, #1
 3932 1122 1A70     		strb	r2, [r3]
 3933              	.L140:
1259:main.c        ****             }
1260:main.c        ****             
1261:main.c        ****             if ((!button3_Read()) && (button3Up))
 3934              		.loc 1 1261 0
 3935 1124 FFF7FEFF 		bl	button3_Read
 3936 1128 0346     		mov	r3, r0
 3937 112a 002B     		cmp	r3, #0
 3938 112c 16D1     		bne	.L141
 3939              		.loc 1 1261 0 is_stmt 0 discriminator 1
 3940 112e 1D4B     		ldr	r3, .L213
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 93


 3941 1130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3942 1132 002B     		cmp	r3, #0
 3943 1134 12D0     		beq	.L141
1262:main.c        ****             {
1263:main.c        ****                 patchNum -= 1;
 3944              		.loc 1 1263 0 is_stmt 1
 3945 1136 1D4B     		ldr	r3, .L213+8
 3946 1138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3947 113a 013B     		subs	r3, r3, #1
 3948 113c DAB2     		uxtb	r2, r3
 3949 113e 1B4B     		ldr	r3, .L213+8
 3950 1140 1A70     		strb	r2, [r3]
1264:main.c        ****                 patchNum &= 63;
 3951              		.loc 1 1264 0
 3952 1142 1A4B     		ldr	r3, .L213+8
 3953 1144 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3954 1146 03F03F03 		and	r3, r3, #63
 3955 114a DAB2     		uxtb	r2, r3
 3956 114c 174B     		ldr	r3, .L213+8
 3957 114e 1A70     		strb	r2, [r3]
1265:main.c        ****                         displayCurrentPresetName();
 3958              		.loc 1 1265 0
 3959 1150 FFF7FEFF 		bl	displayCurrentPresetName
1266:main.c        ****                 button3Up = 0;
 3960              		.loc 1 1266 0
 3961 1154 134B     		ldr	r3, .L213
 3962 1156 0022     		movs	r2, #0
 3963 1158 1A70     		strb	r2, [r3]
 3964 115a 07E0     		b	.L142
 3965              	.L141:
1267:main.c        ****             }
1268:main.c        ****             else if (button3_Read())
 3966              		.loc 1 1268 0
 3967 115c FFF7FEFF 		bl	button3_Read
 3968 1160 0346     		mov	r3, r0
 3969 1162 002B     		cmp	r3, #0
 3970 1164 02D0     		beq	.L142
1269:main.c        ****             {
1270:main.c        ****                 button3Up = 1;
 3971              		.loc 1 1270 0
 3972 1166 0F4B     		ldr	r3, .L213
 3973 1168 0122     		movs	r2, #1
 3974 116a 1A70     		strb	r2, [r3]
 3975              	.L142:
1271:main.c        ****             }
1272:main.c        ****             
1273:main.c        ****             if ((!button4_Read()) && (button4Up))
 3976              		.loc 1 1273 0
 3977 116c FFF7FEFF 		bl	button4_Read
 3978 1170 0346     		mov	r3, r0
 3979 1172 002B     		cmp	r3, #0
 3980 1174 2CD1     		bne	.L143
 3981              		.loc 1 1273 0 is_stmt 0 discriminator 1
 3982 1176 0C4B     		ldr	r3, .L213+4
 3983 1178 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3984 117a 002B     		cmp	r3, #0
 3985 117c 28D0     		beq	.L143
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 94


1274:main.c        ****             {
1275:main.c        ****                 patchNum += 1;
 3986              		.loc 1 1275 0 is_stmt 1
 3987 117e 0B4B     		ldr	r3, .L213+8
 3988 1180 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3989 1182 0133     		adds	r3, r3, #1
 3990 1184 DAB2     		uxtb	r2, r3
 3991 1186 094B     		ldr	r3, .L213+8
 3992 1188 1A70     		strb	r2, [r3]
1276:main.c        ****                 patchNum &= 63;
 3993              		.loc 1 1276 0
 3994 118a 084B     		ldr	r3, .L213+8
 3995 118c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3996 118e 03F03F03 		and	r3, r3, #63
 3997 1192 DAB2     		uxtb	r2, r3
 3998 1194 054B     		ldr	r3, .L213+8
 3999 1196 1A70     		strb	r2, [r3]
1277:main.c        ****                 displayCurrentPresetName();
 4000              		.loc 1 1277 0
 4001 1198 FFF7FEFF 		bl	displayCurrentPresetName
1278:main.c        ****                 button4Up = 0;
 4002              		.loc 1 1278 0
 4003 119c 024B     		ldr	r3, .L213+4
 4004 119e 0022     		movs	r2, #0
 4005 11a0 1A70     		strb	r2, [r3]
 4006 11a2 1DE0     		b	.L136
 4007              	.L214:
 4008              		.align	2
 4009              	.L213:
 4010 11a4 00000000 		.word	button3Up
 4011 11a8 00000000 		.word	button4Up
 4012 11ac 00000000 		.word	patchNum
 4013 11b0 00000000 		.word	button1Up
 4014 11b4 00000000 		.word	currentCopedent
 4015 11b8 00000000 		.word	currentNeck
 4016 11bc 00000000 		.word	necks
 4017 11c0 00040000 		.word	.LC0
 4018 11c4 00000000 		.word	copedentNamesArray
 4019 11c8 00000000 		.word	mainOLEDWaitingToSend
 4020 11cc 00000000 		.word	button2Up
 4021              	.L143:
1279:main.c        ****             }
1280:main.c        ****             else if (button4_Read())
 4022              		.loc 1 1280 0
 4023 11d0 FFF7FEFF 		bl	button4_Read
 4024 11d4 0346     		mov	r3, r0
 4025 11d6 002B     		cmp	r3, #0
 4026 11d8 02D0     		beq	.L136
1281:main.c        ****             {
1282:main.c        ****                 button4Up = 1;
 4027              		.loc 1 1282 0
 4028 11da 6D4B     		ldr	r3, .L215
 4029 11dc 0122     		movs	r2, #1
 4030 11de 1A70     		strb	r2, [r3]
 4031              	.L136:
1283:main.c        ****             }
1284:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 95


1285:main.c        ****         if ((!edit_button_Read()) && (editUp))
 4032              		.loc 1 1285 0
 4033 11e0 FFF7FEFF 		bl	edit_button_Read
 4034 11e4 0346     		mov	r3, r0
 4035 11e6 002B     		cmp	r3, #0
 4036 11e8 7ED1     		bne	.L144
 4037              		.loc 1 1285 0 is_stmt 0 discriminator 1
 4038 11ea 6A4B     		ldr	r3, .L215+4
 4039 11ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4040 11ee 002B     		cmp	r3, #0
 4041 11f0 7AD0     		beq	.L144
1286:main.c        ****         {
1287:main.c        ****             editMode = !editMode;
 4042              		.loc 1 1287 0 is_stmt 1
 4043 11f2 694B     		ldr	r3, .L215+8
 4044 11f4 1B68     		ldr	r3, [r3]
 4045 11f6 002B     		cmp	r3, #0
 4046 11f8 0CBF     		ite	eq
 4047 11fa 0123     		moveq	r3, #1
 4048 11fc 0023     		movne	r3, #0
 4049 11fe DBB2     		uxtb	r3, r3
 4050 1200 1A46     		mov	r2, r3
 4051 1202 654B     		ldr	r3, .L215+8
 4052 1204 1A60     		str	r2, [r3]
1288:main.c        ****             //for now edit mode is calibration mode
1289:main.c        ****             calibrationMode = !calibrationMode;
 4053              		.loc 1 1289 0
 4054 1206 654B     		ldr	r3, .L215+12
 4055 1208 1B68     		ldr	r3, [r3]
 4056 120a 002B     		cmp	r3, #0
 4057 120c 0CBF     		ite	eq
 4058 120e 0123     		moveq	r3, #1
 4059 1210 0023     		movne	r3, #0
 4060 1212 DBB2     		uxtb	r3, r3
 4061 1214 1A46     		mov	r2, r3
 4062 1216 614B     		ldr	r3, .L215+12
 4063 1218 1A60     		str	r2, [r3]
1290:main.c        ****             LED_red2_Write(editMode);
 4064              		.loc 1 1290 0
 4065 121a 5F4B     		ldr	r3, .L215+8
 4066 121c 1B68     		ldr	r3, [r3]
 4067 121e DBB2     		uxtb	r3, r3
 4068 1220 1846     		mov	r0, r3
 4069 1222 FFF7FEFF 		bl	LED_red2_Write
1291:main.c        ****             editUp = 0;
 4070              		.loc 1 1291 0
 4071 1226 5B4B     		ldr	r3, .L215+4
 4072 1228 0022     		movs	r2, #0
 4073 122a 1A70     		strb	r2, [r3]
1292:main.c        ****             if (editMode)
 4074              		.loc 1 1292 0
 4075 122c 5A4B     		ldr	r3, .L215+8
 4076 122e 1B68     		ldr	r3, [r3]
 4077 1230 002B     		cmp	r3, #0
 4078 1232 31D0     		beq	.L145
1293:main.c        ****             {
1294:main.c        ****                 OLEDclear();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 96


 4079              		.loc 1 1294 0
 4080 1234 FFF7FEFF 		bl	OLEDclear
1295:main.c        ****                 OLEDwriteString("CALIBRATION", 11, 2, FirstLine);
 4081              		.loc 1 1295 0
 4082 1238 0023     		movs	r3, #0
 4083 123a 0222     		movs	r2, #2
 4084 123c 0B21     		movs	r1, #11
 4085 123e 5848     		ldr	r0, .L215+16
 4086 1240 FFF7FEFF 		bl	OLEDwriteString
1296:main.c        ****                 OLEDwriteString("MOVE PEDALS", 11, 2, SecondLine);
 4087              		.loc 1 1296 0
 4088 1244 0123     		movs	r3, #1
 4089 1246 0222     		movs	r2, #2
 4090 1248 0B21     		movs	r1, #11
 4091 124a 5648     		ldr	r0, .L215+20
 4092 124c FFF7FEFF 		bl	OLEDwriteString
1297:main.c        ****                 OLEDwriteString("AND LEVERS", 11, 2, ThirdLine);
 4093              		.loc 1 1297 0
 4094 1250 0223     		movs	r3, #2
 4095 1252 0222     		movs	r2, #2
 4096 1254 0B21     		movs	r1, #11
 4097 1256 5448     		ldr	r0, .L215+24
 4098 1258 FFF7FEFF 		bl	OLEDwriteString
1298:main.c        ****                 OLEDwriteString("THEN EXIT", 11, 2, FourthLine);
 4099              		.loc 1 1298 0
 4100 125c 0323     		movs	r3, #3
 4101 125e 0222     		movs	r2, #2
 4102 1260 0B21     		movs	r1, #11
 4103 1262 5248     		ldr	r0, .L215+28
 4104 1264 FFF7FEFF 		bl	OLEDwriteString
1299:main.c        ****                 mainOLEDWaitingToSend = 1;
 4105              		.loc 1 1299 0
 4106 1268 514B     		ldr	r3, .L215+32
 4107 126a 0122     		movs	r2, #1
 4108 126c 1A60     		str	r2, [r3]
 4109              	.LBB19:
1300:main.c        ****                 
1301:main.c        ****                 //entering calibration mode, clear the pedals low and high arrays
1302:main.c        ****                 for (int i = 0; i < 10; i++)
 4110              		.loc 1 1302 0
 4111 126e 0023     		movs	r3, #0
 4112 1270 3B66     		str	r3, [r7, #96]
 4113 1272 0DE0     		b	.L146
 4114              	.L147:
1303:main.c        ****                 {
1304:main.c        ****                     pedals_low[i] = 4095;
 4115              		.loc 1 1304 0 discriminator 3
 4116 1274 4F4A     		ldr	r2, .L215+36
 4117 1276 3B6E     		ldr	r3, [r7, #96]
 4118 1278 40F6FF71 		movw	r1, #4095
 4119 127c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1305:main.c        ****                     pedals_high[i] = 0;
 4120              		.loc 1 1305 0 discriminator 3
 4121 1280 4D4A     		ldr	r2, .L215+40
 4122 1282 3B6E     		ldr	r3, [r7, #96]
 4123 1284 0021     		movs	r1, #0
 4124 1286 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 97


1302:main.c        ****                 {
 4125              		.loc 1 1302 0 discriminator 3
 4126 128a 3B6E     		ldr	r3, [r7, #96]
 4127 128c 0133     		adds	r3, r3, #1
 4128 128e 3B66     		str	r3, [r7, #96]
 4129              	.L146:
1302:main.c        ****                 {
 4130              		.loc 1 1302 0 is_stmt 0 discriminator 1
 4131 1290 3B6E     		ldr	r3, [r7, #96]
 4132 1292 092B     		cmp	r3, #9
 4133 1294 EEDD     		ble	.L147
 4134              	.LBE19:
1292:main.c        ****             {
 4135              		.loc 1 1292 0 is_stmt 1
 4136 1296 2FE0     		b	.L149
 4137              	.L145:
1306:main.c        ****                 }
1307:main.c        ****             }
1308:main.c        ****             else
1309:main.c        ****             {
1310:main.c        ****                 //draw normal screen
1311:main.c        ****                 OLEDclear();
 4138              		.loc 1 1311 0
 4139 1298 FFF7FEFF 		bl	OLEDclear
1312:main.c        ****                 OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 4140              		.loc 1 1312 0
 4141 129c 474B     		ldr	r3, .L215+44
 4142 129e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4143 12a0 1846     		mov	r0, r3
 4144 12a2 0323     		movs	r3, #3
 4145 12a4 0022     		movs	r2, #0
 4146 12a6 0221     		movs	r1, #2
 4147 12a8 FFF7FEFF 		bl	OLEDwriteInt
1313:main.c        ****                 OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 4148              		.loc 1 1313 0
 4149 12ac FFF7FEFF 		bl	OLEDgetCursor
 4150 12b0 0246     		mov	r2, r0
 4151 12b2 0323     		movs	r3, #3
 4152 12b4 0121     		movs	r1, #1
 4153 12b6 4248     		ldr	r0, .L215+48
 4154 12b8 FFF7FEFF 		bl	OLEDwriteString
1314:main.c        ****                 OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_BYT
 4155              		.loc 1 1314 0
 4156 12bc 3F4B     		ldr	r3, .L215+44
 4157 12be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4158 12c0 1A46     		mov	r2, r3
 4159 12c2 1346     		mov	r3, r2
 4160 12c4 DB00     		lsls	r3, r3, #3
 4161 12c6 9B1A     		subs	r3, r3, r2
 4162 12c8 5B00     		lsls	r3, r3, #1
 4163 12ca 3E4A     		ldr	r2, .L215+52
 4164 12cc 9C18     		adds	r4, r3, r2
 4165 12ce FFF7FEFF 		bl	OLEDgetCursor
 4166 12d2 0246     		mov	r2, r0
 4167 12d4 0323     		movs	r3, #3
 4168 12d6 0E21     		movs	r1, #14
 4169 12d8 2046     		mov	r0, r4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 98


 4170 12da FFF7FEFF 		bl	OLEDwriteString
1315:main.c        ****                 displayCurrentPresetName();
 4171              		.loc 1 1315 0
 4172 12de FFF7FEFF 		bl	displayCurrentPresetName
1316:main.c        ****                 calculatePedalRatios();
 4173              		.loc 1 1316 0
 4174 12e2 FFF7FEFF 		bl	calculatePedalRatios
1292:main.c        ****             {
 4175              		.loc 1 1292 0
 4176 12e6 07E0     		b	.L149
 4177              	.L144:
1317:main.c        ****                 //TODO: now need to store this in EEPROM. 
1318:main.c        ****                 // also need to make this a little more hidden - maybe first edit then Enter?
1319:main.c        ****             }
1320:main.c        ****         }
1321:main.c        ****         else if (edit_button_Read())
 4178              		.loc 1 1321 0
 4179 12e8 FFF7FEFF 		bl	edit_button_Read
 4180 12ec 0346     		mov	r3, r0
 4181 12ee 002B     		cmp	r3, #0
 4182 12f0 02D0     		beq	.L149
1322:main.c        ****         {
1323:main.c        ****             editUp = 1;
 4183              		.loc 1 1323 0
 4184 12f2 284B     		ldr	r3, .L215+4
 4185 12f4 0122     		movs	r2, #1
 4186 12f6 1A70     		strb	r2, [r3]
 4187              	.L149:
1324:main.c        ****         }
1325:main.c        ****         
1326:main.c        ****         if (octave != prevOctave)
1327:main.c        ****         {
1328:main.c        ****             //sendMIDIControlChange(90, octave);
1329:main.c        ****         }
1330:main.c        ****         prevOctave = octave;
 4188              		.loc 1 1330 0
 4189 12f8 334B     		ldr	r3, .L215+56
 4190 12fa 1B68     		ldr	r3, [r3]
 4191 12fc 334A     		ldr	r2, .L215+60
 4192 12fe 1360     		str	r3, [r2]
 4193              	.LBB20:
1331:main.c        ****         
1332:main.c        ****         
1333:main.c        ****         for (int i=  0; i < 4; i++)
 4194              		.loc 1 1333 0
 4195 1300 0023     		movs	r3, #0
 4196 1302 FB65     		str	r3, [r7, #92]
 4197 1304 3EE0     		b	.L150
 4198              	.L153:
1334:main.c        ****         {
1335:main.c        ****             knobs[i] = (ADC_SAR_Seq_1_GetResult16(i)/16);
 4199              		.loc 1 1335 0
 4200 1306 FB6D     		ldr	r3, [r7, #92]
 4201 1308 9BB2     		uxth	r3, r3
 4202 130a 1846     		mov	r0, r3
 4203 130c FFF7FEFF 		bl	ADC_SAR_Seq_1_GetResult16
 4204 1310 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 99


 4205 1312 002B     		cmp	r3, #0
 4206 1314 00DA     		bge	.L151
 4207 1316 0F33     		adds	r3, r3, #15
 4208              	.L151:
 4209 1318 1B11     		asrs	r3, r3, #4
 4210 131a 1BB2     		sxth	r3, r3
 4211 131c D9B2     		uxtb	r1, r3
 4212 131e 2C4A     		ldr	r2, .L215+64
 4213 1320 FB6D     		ldr	r3, [r7, #92]
 4214 1322 1344     		add	r3, r3, r2
 4215 1324 0A46     		mov	r2, r1
 4216 1326 1A70     		strb	r2, [r3]
1336:main.c        ****             
1337:main.c        ****             knobs[i] = 255 - knobs[i];
 4217              		.loc 1 1337 0
 4218 1328 294A     		ldr	r2, .L215+64
 4219 132a FB6D     		ldr	r3, [r7, #92]
 4220 132c 1344     		add	r3, r3, r2
 4221 132e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4222 1330 DB43     		mvns	r3, r3
 4223 1332 D9B2     		uxtb	r1, r3
 4224 1334 264A     		ldr	r2, .L215+64
 4225 1336 FB6D     		ldr	r3, [r7, #92]
 4226 1338 1344     		add	r3, r3, r2
 4227 133a 0A46     		mov	r2, r1
 4228 133c 1A70     		strb	r2, [r3]
1338:main.c        ****             
1339:main.c        ****             if (knobs[i] != prevKnobs[i])
 4229              		.loc 1 1339 0
 4230 133e 244A     		ldr	r2, .L215+64
 4231 1340 FB6D     		ldr	r3, [r7, #92]
 4232 1342 1344     		add	r3, r3, r2
 4233 1344 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4234 1346 2349     		ldr	r1, .L215+68
 4235 1348 FB6D     		ldr	r3, [r7, #92]
 4236 134a 0B44     		add	r3, r3, r1
 4237 134c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4238 134e 9A42     		cmp	r2, r3
 4239 1350 0CD0     		beq	.L152
1340:main.c        ****             {
1341:main.c        ****                 sendMIDIControlChange(i+17, knobs[i]/2, 0);
 4240              		.loc 1 1341 0
 4241 1352 FB6D     		ldr	r3, [r7, #92]
 4242 1354 03F11100 		add	r0, r3, #17
 4243 1358 1D4A     		ldr	r2, .L215+64
 4244 135a FB6D     		ldr	r3, [r7, #92]
 4245 135c 1344     		add	r3, r3, r2
 4246 135e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4247 1360 5B08     		lsrs	r3, r3, #1
 4248 1362 DBB2     		uxtb	r3, r3
 4249 1364 0022     		movs	r2, #0
 4250 1366 1946     		mov	r1, r3
 4251 1368 FFF7FEFF 		bl	sendMIDIControlChange
 4252              	.L152:
1342:main.c        ****             }
1343:main.c        ****             prevKnobs[i] = knobs[i];
 4253              		.loc 1 1343 0 discriminator 2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 100


 4254 136c 184A     		ldr	r2, .L215+64
 4255 136e FB6D     		ldr	r3, [r7, #92]
 4256 1370 1344     		add	r3, r3, r2
 4257 1372 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4258 1374 174A     		ldr	r2, .L215+68
 4259 1376 FB6D     		ldr	r3, [r7, #92]
 4260 1378 1344     		add	r3, r3, r2
 4261 137a 0A46     		mov	r2, r1
 4262 137c 1A70     		strb	r2, [r3]
1333:main.c        ****         {
 4263              		.loc 1 1333 0 discriminator 2
 4264 137e FB6D     		ldr	r3, [r7, #92]
 4265 1380 0133     		adds	r3, r3, #1
 4266 1382 FB65     		str	r3, [r7, #92]
 4267              	.L150:
1333:main.c        ****         {
 4268              		.loc 1 1333 0 is_stmt 0 discriminator 1
 4269 1384 FB6D     		ldr	r3, [r7, #92]
 4270 1386 032B     		cmp	r3, #3
 4271 1388 BDDD     		ble	.L153
 4272              	.LBE20:
 4273              	.LBB21:
1344:main.c        ****         }
1345:main.c        ****         
1346:main.c        ****        
1347:main.c        ****         //calculate the pitch of each string based on the current Copedent
1348:main.c        ****         for (int i = 0; i < numStrings; i++)
 4274              		.loc 1 1348 0 is_stmt 1
 4275 138a 0023     		movs	r3, #0
 4276 138c BB65     		str	r3, [r7, #88]
 4277 138e ACE1     		b	.L154
 4278              	.L216:
 4279              		.align	2
 4280              	.L215:
 4281 1390 00000000 		.word	button4Up
 4282 1394 00000000 		.word	editUp
 4283 1398 00000000 		.word	editMode
 4284 139c 00000000 		.word	calibrationMode
 4285 13a0 04040000 		.word	.LC1
 4286 13a4 10040000 		.word	.LC2
 4287 13a8 1C040000 		.word	.LC3
 4288 13ac 28040000 		.word	.LC4
 4289 13b0 00000000 		.word	mainOLEDWaitingToSend
 4290 13b4 00000000 		.word	pedals_low
 4291 13b8 00000000 		.word	pedals_high
 4292 13bc 00000000 		.word	currentCopedent
 4293 13c0 00040000 		.word	.LC0
 4294 13c4 00000000 		.word	copedentNamesArray
 4295 13c8 00000000 		.word	octave
 4296 13cc 00000000 		.word	prevOctave
 4297 13d0 00000000 		.word	knobs
 4298 13d4 00000000 		.word	prevKnobs
 4299              	.L159:
 4300              	.LBB22:
1349:main.c        ****     	{
1350:main.c        ****     		//interpolate ratios for each of the strings
1351:main.c        ****            /*
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 101


1352:main.c        ****             float myMappedPos;
1353:main.c        ****             if (dualSlider)
1354:main.c        ****             {
1355:main.c        ****                myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositi
1356:main.c        ****             }
1357:main.c        ****             else
1358:main.c        ****             {
1359:main.c        ****                 myMappedPos = stringMappedPositions[0];
1360:main.c        ****             }
1361:main.c        **** 
1362:main.c        ****     		stringOctave[i] = powf(2.0f,octave);
1363:main.c        ****             */
1364:main.c        ****     		//then apply those ratios to the fundamental frequencies
1365:main.c        ****     		float tempMIDI = (copedent[currentNeck][0][i] +
 4301              		.loc 1 1365 0
 4302 13d8 A94B     		ldr	r3, .L217
 4303 13da 1A68     		ldr	r2, [r3]
 4304 13dc A949     		ldr	r1, .L217+4
 4305 13de 1346     		mov	r3, r2
 4306 13e0 5B01     		lsls	r3, r3, #5
 4307 13e2 1344     		add	r3, r3, r2
 4308 13e4 9B00     		lsls	r3, r3, #2
 4309 13e6 BA6D     		ldr	r2, [r7, #88]
 4310 13e8 1344     		add	r3, r3, r2
 4311 13ea 51F82340 		ldr	r4, [r1, r3, lsl #2]	@ float
1366:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4312              		.loc 1 1366 0
 4313 13ee A64B     		ldr	r3, .L217+8
 4314 13f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4315 13f2 1A46     		mov	r2, r3
 4316 13f4 A349     		ldr	r1, .L217+4
 4317 13f6 1346     		mov	r3, r2
 4318 13f8 5B01     		lsls	r3, r3, #5
 4319 13fa 1344     		add	r3, r3, r2
 4320 13fc 9B00     		lsls	r3, r3, #2
 4321 13fe BA6D     		ldr	r2, [r7, #88]
 4322 1400 1344     		add	r3, r3, r2
 4323 1402 3033     		adds	r3, r3, #48
 4324 1404 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4325 1408 A04B     		ldr	r3, .L217+12
 4326 140a 1B68     		ldr	r3, [r3]	@ float
 4327 140c 1946     		mov	r1, r3
 4328 140e 1046     		mov	r0, r2
 4329 1410 FFF7FEFF 		bl	__aeabi_fmul
 4330 1414 0346     		mov	r3, r0
1365:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4331              		.loc 1 1365 0
 4332 1416 1946     		mov	r1, r3
 4333 1418 2046     		mov	r0, r4
 4334 141a FFF7FEFF 		bl	__aeabi_fadd
 4335 141e 0346     		mov	r3, r0
 4336 1420 1C46     		mov	r4, r3
1367:main.c        ****                         (copedent[currentCopedent][5][i] * pedals_float[1]) +
 4337              		.loc 1 1367 0
 4338 1422 994B     		ldr	r3, .L217+8
 4339 1424 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4340 1426 1A46     		mov	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 102


 4341 1428 9649     		ldr	r1, .L217+4
 4342 142a 1346     		mov	r3, r2
 4343 142c 5B01     		lsls	r3, r3, #5
 4344 142e 1344     		add	r3, r3, r2
 4345 1430 9B00     		lsls	r3, r3, #2
 4346 1432 BA6D     		ldr	r2, [r7, #88]
 4347 1434 1344     		add	r3, r3, r2
 4348 1436 3C33     		adds	r3, r3, #60
 4349 1438 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4350 143c 934B     		ldr	r3, .L217+12
 4351 143e 5B68     		ldr	r3, [r3, #4]	@ float
 4352 1440 1946     		mov	r1, r3
 4353 1442 1046     		mov	r0, r2
 4354 1444 FFF7FEFF 		bl	__aeabi_fmul
 4355 1448 0346     		mov	r3, r0
1366:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4356              		.loc 1 1366 0
 4357 144a 1946     		mov	r1, r3
 4358 144c 2046     		mov	r0, r4
 4359 144e FFF7FEFF 		bl	__aeabi_fadd
 4360 1452 0346     		mov	r3, r0
 4361 1454 1C46     		mov	r4, r3
1368:main.c        ****                         (copedent[currentCopedent][6][i] * pedals_float[2]) +
 4362              		.loc 1 1368 0
 4363 1456 8C4B     		ldr	r3, .L217+8
 4364 1458 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4365 145a 1A46     		mov	r2, r3
 4366 145c 8949     		ldr	r1, .L217+4
 4367 145e 1346     		mov	r3, r2
 4368 1460 5B01     		lsls	r3, r3, #5
 4369 1462 1344     		add	r3, r3, r2
 4370 1464 9B00     		lsls	r3, r3, #2
 4371 1466 BA6D     		ldr	r2, [r7, #88]
 4372 1468 1344     		add	r3, r3, r2
 4373 146a 4833     		adds	r3, r3, #72
 4374 146c 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4375 1470 864B     		ldr	r3, .L217+12
 4376 1472 9B68     		ldr	r3, [r3, #8]	@ float
 4377 1474 1946     		mov	r1, r3
 4378 1476 1046     		mov	r0, r2
 4379 1478 FFF7FEFF 		bl	__aeabi_fmul
 4380 147c 0346     		mov	r3, r0
1367:main.c        ****                         (copedent[currentCopedent][5][i] * pedals_float[1]) +
 4381              		.loc 1 1367 0
 4382 147e 1946     		mov	r1, r3
 4383 1480 2046     		mov	r0, r4
 4384 1482 FFF7FEFF 		bl	__aeabi_fadd
 4385 1486 0346     		mov	r3, r0
 4386 1488 1C46     		mov	r4, r3
1369:main.c        ****                         (copedent[currentCopedent][7][i] * pedals_float[3]) +
 4387              		.loc 1 1369 0
 4388 148a 7F4B     		ldr	r3, .L217+8
 4389 148c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4390 148e 1A46     		mov	r2, r3
 4391 1490 7C49     		ldr	r1, .L217+4
 4392 1492 1346     		mov	r3, r2
 4393 1494 5B01     		lsls	r3, r3, #5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 103


 4394 1496 1344     		add	r3, r3, r2
 4395 1498 9B00     		lsls	r3, r3, #2
 4396 149a BA6D     		ldr	r2, [r7, #88]
 4397 149c 1344     		add	r3, r3, r2
 4398 149e 5433     		adds	r3, r3, #84
 4399 14a0 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4400 14a4 794B     		ldr	r3, .L217+12
 4401 14a6 DB68     		ldr	r3, [r3, #12]	@ float
 4402 14a8 1946     		mov	r1, r3
 4403 14aa 1046     		mov	r0, r2
 4404 14ac FFF7FEFF 		bl	__aeabi_fmul
 4405 14b0 0346     		mov	r3, r0
1368:main.c        ****                         (copedent[currentCopedent][6][i] * pedals_float[2]) +
 4406              		.loc 1 1368 0
 4407 14b2 1946     		mov	r1, r3
 4408 14b4 2046     		mov	r0, r4
 4409 14b6 FFF7FEFF 		bl	__aeabi_fadd
 4410 14ba 0346     		mov	r3, r0
 4411 14bc 1C46     		mov	r4, r3
1370:main.c        ****                         (copedent[currentCopedent][8][i] * pedals_float[4]) +
 4412              		.loc 1 1370 0
 4413 14be 724B     		ldr	r3, .L217+8
 4414 14c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4415 14c2 1A46     		mov	r2, r3
 4416 14c4 6F49     		ldr	r1, .L217+4
 4417 14c6 1346     		mov	r3, r2
 4418 14c8 5B01     		lsls	r3, r3, #5
 4419 14ca 1344     		add	r3, r3, r2
 4420 14cc 9B00     		lsls	r3, r3, #2
 4421 14ce BA6D     		ldr	r2, [r7, #88]
 4422 14d0 1344     		add	r3, r3, r2
 4423 14d2 6033     		adds	r3, r3, #96
 4424 14d4 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4425 14d8 6C4B     		ldr	r3, .L217+12
 4426 14da 1B69     		ldr	r3, [r3, #16]	@ float
 4427 14dc 1946     		mov	r1, r3
 4428 14de 1046     		mov	r0, r2
 4429 14e0 FFF7FEFF 		bl	__aeabi_fmul
 4430 14e4 0346     		mov	r3, r0
1369:main.c        ****                         (copedent[currentCopedent][7][i] * pedals_float[3]) +
 4431              		.loc 1 1369 0
 4432 14e6 1946     		mov	r1, r3
 4433 14e8 2046     		mov	r0, r4
 4434 14ea FFF7FEFF 		bl	__aeabi_fadd
 4435 14ee 0346     		mov	r3, r0
 4436 14f0 1C46     		mov	r4, r3
1371:main.c        ****                         (copedent[currentCopedent][10][i] * pedals_float[5]) +
 4437              		.loc 1 1371 0
 4438 14f2 654B     		ldr	r3, .L217+8
 4439 14f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4440 14f6 1A46     		mov	r2, r3
 4441 14f8 6249     		ldr	r1, .L217+4
 4442 14fa 1346     		mov	r3, r2
 4443 14fc 5B01     		lsls	r3, r3, #5
 4444 14fe 1344     		add	r3, r3, r2
 4445 1500 9B00     		lsls	r3, r3, #2
 4446 1502 BA6D     		ldr	r2, [r7, #88]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 104


 4447 1504 1344     		add	r3, r3, r2
 4448 1506 7833     		adds	r3, r3, #120
 4449 1508 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4450 150c 5F4B     		ldr	r3, .L217+12
 4451 150e 5B69     		ldr	r3, [r3, #20]	@ float
 4452 1510 1946     		mov	r1, r3
 4453 1512 1046     		mov	r0, r2
 4454 1514 FFF7FEFF 		bl	__aeabi_fmul
 4455 1518 0346     		mov	r3, r0
1370:main.c        ****                         (copedent[currentCopedent][8][i] * pedals_float[4]) +
 4456              		.loc 1 1370 0
 4457 151a 1946     		mov	r1, r3
 4458 151c 2046     		mov	r0, r4
 4459 151e FFF7FEFF 		bl	__aeabi_fadd
 4460 1522 0346     		mov	r3, r0
 4461 1524 1C46     		mov	r4, r3
1372:main.c        ****                         (copedent[currentCopedent][9][i] * pedals_float[6]) +
 4462              		.loc 1 1372 0
 4463 1526 584B     		ldr	r3, .L217+8
 4464 1528 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4465 152a 1A46     		mov	r2, r3
 4466 152c 5549     		ldr	r1, .L217+4
 4467 152e 1346     		mov	r3, r2
 4468 1530 5B01     		lsls	r3, r3, #5
 4469 1532 1344     		add	r3, r3, r2
 4470 1534 9B00     		lsls	r3, r3, #2
 4471 1536 BA6D     		ldr	r2, [r7, #88]
 4472 1538 1344     		add	r3, r3, r2
 4473 153a 6C33     		adds	r3, r3, #108
 4474 153c 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4475 1540 524B     		ldr	r3, .L217+12
 4476 1542 9B69     		ldr	r3, [r3, #24]	@ float
 4477 1544 1946     		mov	r1, r3
 4478 1546 1046     		mov	r0, r2
 4479 1548 FFF7FEFF 		bl	__aeabi_fmul
 4480 154c 0346     		mov	r3, r0
1371:main.c        ****                         (copedent[currentCopedent][10][i] * pedals_float[5]) +
 4481              		.loc 1 1371 0
 4482 154e 1946     		mov	r1, r3
 4483 1550 2046     		mov	r0, r4
 4484 1552 FFF7FEFF 		bl	__aeabi_fadd
 4485 1556 0346     		mov	r3, r0
 4486 1558 1C46     		mov	r4, r3
1373:main.c        ****                         (copedent[currentCopedent][3][i] * pedals_float[7]) +
 4487              		.loc 1 1373 0
 4488 155a 4B4B     		ldr	r3, .L217+8
 4489 155c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4490 155e 1A46     		mov	r2, r3
 4491 1560 4849     		ldr	r1, .L217+4
 4492 1562 1346     		mov	r3, r2
 4493 1564 5B01     		lsls	r3, r3, #5
 4494 1566 1344     		add	r3, r3, r2
 4495 1568 9B00     		lsls	r3, r3, #2
 4496 156a BA6D     		ldr	r2, [r7, #88]
 4497 156c 1344     		add	r3, r3, r2
 4498 156e 2433     		adds	r3, r3, #36
 4499 1570 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 105


 4500 1574 454B     		ldr	r3, .L217+12
 4501 1576 DB69     		ldr	r3, [r3, #28]	@ float
 4502 1578 1946     		mov	r1, r3
 4503 157a 1046     		mov	r0, r2
 4504 157c FFF7FEFF 		bl	__aeabi_fmul
 4505 1580 0346     		mov	r3, r0
1372:main.c        ****                         (copedent[currentCopedent][9][i] * pedals_float[6]) +
 4506              		.loc 1 1372 0
 4507 1582 1946     		mov	r1, r3
 4508 1584 2046     		mov	r0, r4
 4509 1586 FFF7FEFF 		bl	__aeabi_fadd
 4510 158a 0346     		mov	r3, r0
 4511 158c 1C46     		mov	r4, r3
1374:main.c        ****                         (copedent[currentCopedent][1][i] * pedals_float[8]) +
 4512              		.loc 1 1374 0
 4513 158e 3E4B     		ldr	r3, .L217+8
 4514 1590 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4515 1592 1A46     		mov	r2, r3
 4516 1594 3B49     		ldr	r1, .L217+4
 4517 1596 1346     		mov	r3, r2
 4518 1598 5B01     		lsls	r3, r3, #5
 4519 159a 1344     		add	r3, r3, r2
 4520 159c 9B00     		lsls	r3, r3, #2
 4521 159e BA6D     		ldr	r2, [r7, #88]
 4522 15a0 1344     		add	r3, r3, r2
 4523 15a2 0C33     		adds	r3, r3, #12
 4524 15a4 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4525 15a8 384B     		ldr	r3, .L217+12
 4526 15aa 1B6A     		ldr	r3, [r3, #32]	@ float
 4527 15ac 1946     		mov	r1, r3
 4528 15ae 1046     		mov	r0, r2
 4529 15b0 FFF7FEFF 		bl	__aeabi_fmul
 4530 15b4 0346     		mov	r3, r0
1373:main.c        ****                         (copedent[currentCopedent][3][i] * pedals_float[7]) +
 4531              		.loc 1 1373 0
 4532 15b6 1946     		mov	r1, r3
 4533 15b8 2046     		mov	r0, r4
 4534 15ba FFF7FEFF 		bl	__aeabi_fadd
 4535 15be 0346     		mov	r3, r0
 4536 15c0 1C46     		mov	r4, r3
1375:main.c        ****                         (copedent[currentCopedent][2][i] * pedals_float[9]));
 4537              		.loc 1 1375 0
 4538 15c2 314B     		ldr	r3, .L217+8
 4539 15c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4540 15c6 1A46     		mov	r2, r3
 4541 15c8 2E49     		ldr	r1, .L217+4
 4542 15ca 1346     		mov	r3, r2
 4543 15cc 5B01     		lsls	r3, r3, #5
 4544 15ce 1344     		add	r3, r3, r2
 4545 15d0 9B00     		lsls	r3, r3, #2
 4546 15d2 BA6D     		ldr	r2, [r7, #88]
 4547 15d4 1344     		add	r3, r3, r2
 4548 15d6 1833     		adds	r3, r3, #24
 4549 15d8 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4550 15dc 2B4B     		ldr	r3, .L217+12
 4551 15de 5B6A     		ldr	r3, [r3, #36]	@ float
 4552 15e0 1946     		mov	r1, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 106


 4553 15e2 1046     		mov	r0, r2
 4554 15e4 FFF7FEFF 		bl	__aeabi_fmul
 4555 15e8 0346     		mov	r3, r0
1365:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4556              		.loc 1 1365 0
 4557 15ea 1946     		mov	r1, r3
 4558 15ec 2046     		mov	r0, r4
 4559 15ee FFF7FEFF 		bl	__aeabi_fadd
 4560 15f2 0346     		mov	r3, r0
 4561 15f4 3B62     		str	r3, [r7, #32]	@ float
1376:main.c        **** 
1377:main.c        ****             
1378:main.c        ****             float openStringMIDI  = copedent[currentCopedent][0][i];
 4562              		.loc 1 1378 0
 4563 15f6 244B     		ldr	r3, .L217+8
 4564 15f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4565 15fa 1A46     		mov	r2, r3
 4566 15fc 2149     		ldr	r1, .L217+4
 4567 15fe 1346     		mov	r3, r2
 4568 1600 5B01     		lsls	r3, r3, #5
 4569 1602 1344     		add	r3, r3, r2
 4570 1604 9B00     		lsls	r3, r3, #2
 4571 1606 BA6D     		ldr	r2, [r7, #88]
 4572 1608 1344     		add	r3, r3, r2
 4573 160a 51F82330 		ldr	r3, [r1, r3, lsl #2]	@ float
 4574 160e FB61     		str	r3, [r7, #28]	@ float
1379:main.c        ****             openStringMIDI_Int[i] = (int)openStringMIDI;
 4575              		.loc 1 1379 0
 4576 1610 F869     		ldr	r0, [r7, #28]	@ float
 4577 1612 FFF7FEFF 		bl	__aeabi_f2iz
 4578 1616 0146     		mov	r1, r0
 4579 1618 1D4A     		ldr	r2, .L217+16
 4580 161a BB6D     		ldr	r3, [r7, #88]
 4581 161c 42F82310 		str	r1, [r2, r3, lsl #2]
1380:main.c        ****             
1381:main.c        ****             float barMIDI = ftom((invStringMappedPositions[0]) * mtof(tempMIDI));
 4582              		.loc 1 1381 0
 4583 1620 1C4B     		ldr	r3, .L217+20
 4584 1622 1C68     		ldr	r4, [r3]	@ float
 4585 1624 386A     		ldr	r0, [r7, #32]	@ float
 4586 1626 FFF7FEFF 		bl	mtof
 4587 162a 0346     		mov	r3, r0
 4588 162c 1946     		mov	r1, r3
 4589 162e 2046     		mov	r0, r4
 4590 1630 FFF7FEFF 		bl	__aeabi_fmul
 4591 1634 0346     		mov	r3, r0
 4592 1636 1846     		mov	r0, r3
 4593 1638 FFF7FEFF 		bl	ftom
 4594 163c B861     		str	r0, [r7, #24]	@ float
1382:main.c        ****             
1383:main.c        ****             float computerMIDIOffset = barMIDI - openStringMIDI_Int[i];// + stringOctave[i];
 4595              		.loc 1 1383 0
 4596 163e 144A     		ldr	r2, .L217+16
 4597 1640 BB6D     		ldr	r3, [r7, #88]
 4598 1642 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4599 1646 1846     		mov	r0, r3
 4600 1648 FFF7FEFF 		bl	__aeabi_i2f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 107


 4601 164c 0346     		mov	r3, r0
 4602 164e 1946     		mov	r1, r3
 4603 1650 B869     		ldr	r0, [r7, #24]	@ float
 4604 1652 FFF7FEFF 		bl	__aeabi_fsub
 4605 1656 0346     		mov	r3, r0
 4606 1658 7B61     		str	r3, [r7, #20]	@ float
1384:main.c        ****             
1385:main.c        ****             float pitchBendAmount = (computerMIDIOffset * 170.6666666666667f) + 8192.0f;  // 14bit 
 4607              		.loc 1 1385 0
 4608 165a 0F49     		ldr	r1, .L217+24
 4609 165c 7869     		ldr	r0, [r7, #20]	@ float
 4610 165e FFF7FEFF 		bl	__aeabi_fmul
 4611 1662 0346     		mov	r3, r0
 4612 1664 4FF08C41 		mov	r1, #1174405120
 4613 1668 1846     		mov	r0, r3
 4614 166a FFF7FEFF 		bl	__aeabi_fadd
 4615 166e 0346     		mov	r3, r0
 4616 1670 3B61     		str	r3, [r7, #16]	@ float
1386:main.c        ****             if (pitchBendAmount != prevStringPitchBend[i])
 4617              		.loc 1 1386 0
 4618 1672 0A4A     		ldr	r2, .L217+28
 4619 1674 BB6D     		ldr	r3, [r7, #88]
 4620 1676 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 4621 167a 3969     		ldr	r1, [r7, #16]	@ float
 4622 167c 1846     		mov	r0, r3
 4623 167e 0FE0     		b	.L218
 4624              	.L219:
 4625              		.align	2
 4626              	.L217:
 4627 1680 00000000 		.word	currentNeck
 4628 1684 00000000 		.word	copedent
 4629 1688 00000000 		.word	currentCopedent
 4630 168c 00000000 		.word	pedals_float
 4631 1690 00000000 		.word	openStringMIDI_Int
 4632 1694 00000000 		.word	invStringMappedPositions
 4633 1698 ABAA2A43 		.word	1126869675
 4634 169c 00000000 		.word	prevStringPitchBend
 4635              	.L218:
 4636 16a0 FFF7FEFF 		bl	__aeabi_fcmpeq
 4637 16a4 0346     		mov	r3, r0
 4638 16a6 002B     		cmp	r3, #0
 4639 16a8 0AD1     		bne	.L155
1387:main.c        ****             {
1388:main.c        ****                 sendMIDIPitchBend((uint)pitchBendAmount, i+1);
 4640              		.loc 1 1388 0
 4641 16aa 3869     		ldr	r0, [r7, #16]	@ float
 4642 16ac FFF7FEFF 		bl	__aeabi_f2uiz
 4643 16b0 0346     		mov	r3, r0
 4644 16b2 1A46     		mov	r2, r3
 4645 16b4 BB6D     		ldr	r3, [r7, #88]
 4646 16b6 0133     		adds	r3, r3, #1
 4647 16b8 1946     		mov	r1, r3
 4648 16ba 1046     		mov	r0, r2
 4649 16bc FFF7FEFF 		bl	sendMIDIPitchBend
 4650              	.L155:
1389:main.c        ****             }
1390:main.c        ****             prevStringPitchBend[i] = pitchBendAmount;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 108


 4651              		.loc 1 1390 0
 4652 16c0 A449     		ldr	r1, .L220
 4653 16c2 BB6D     		ldr	r3, [r7, #88]
 4654 16c4 3A69     		ldr	r2, [r7, #16]	@ float
 4655 16c6 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
1391:main.c        ****             if (tempMIDI > 0.0f)
 4656              		.loc 1 1391 0
 4657 16ca 4FF00001 		mov	r1, #0
 4658 16ce 386A     		ldr	r0, [r7, #32]	@ float
 4659 16d0 FFF7FEFF 		bl	__aeabi_fcmpgt
 4660 16d4 0346     		mov	r3, r0
 4661 16d6 002B     		cmp	r3, #0
 4662 16d8 04D0     		beq	.L157
1392:main.c        ****             {
1393:main.c        ****                 stringMIDI[i] = tempMIDI;
 4663              		.loc 1 1393 0
 4664 16da 9F49     		ldr	r1, .L220+4
 4665 16dc BB6D     		ldr	r3, [r7, #88]
 4666 16de 3A6A     		ldr	r2, [r7, #32]	@ float
 4667 16e0 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 4668              	.L157:
 4669              	.LBE22:
1348:main.c        ****     	{
 4670              		.loc 1 1348 0 discriminator 2
 4671 16e4 BB6D     		ldr	r3, [r7, #88]
 4672 16e6 0133     		adds	r3, r3, #1
 4673 16e8 BB65     		str	r3, [r7, #88]
 4674              	.L154:
1348:main.c        ****     	{
 4675              		.loc 1 1348 0 is_stmt 0 discriminator 1
 4676 16ea 9C4B     		ldr	r3, .L220+8
 4677 16ec 1B68     		ldr	r3, [r3]
 4678 16ee BA6D     		ldr	r2, [r7, #88]
 4679 16f0 9A42     		cmp	r2, r3
 4680 16f2 FFF671AE 		blt	.L159
 4681              	.LBE21:
1394:main.c        ****             }
1395:main.c        ****     	}
1396:main.c        **** 
1397:main.c        ****         if (encoder_button_Read())
 4682              		.loc 1 1397 0 is_stmt 1
 4683 16f6 FFF7FEFF 		bl	encoder_button_Read
 4684 16fa 0346     		mov	r3, r0
 4685 16fc 002B     		cmp	r3, #0
 4686 16fe 10D0     		beq	.L160
1398:main.c        ****         {
1399:main.c        ****             encoderVal[encoderNum] += QuadDec_1_GetCounter() * 4;
 4687              		.loc 1 1399 0
 4688 1700 FFF7FEFF 		bl	QuadDec_1_GetCounter
 4689 1704 0346     		mov	r3, r0
 4690 1706 9800     		lsls	r0, r3, #2
 4691 1708 954B     		ldr	r3, .L220+12
 4692 170a 1B68     		ldr	r3, [r3]
 4693 170c 944A     		ldr	r2, .L220+12
 4694 170e 1268     		ldr	r2, [r2]
 4695 1710 9449     		ldr	r1, .L220+16
 4696 1712 8A5C     		ldrb	r2, [r1, r2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 109


 4697 1714 D1B2     		uxtb	r1, r2
 4698 1716 C2B2     		uxtb	r2, r0
 4699 1718 0A44     		add	r2, r2, r1
 4700 171a D1B2     		uxtb	r1, r2
 4701 171c 914A     		ldr	r2, .L220+16
 4702 171e D154     		strb	r1, [r2, r3]
 4703 1720 0FE0     		b	.L161
 4704              	.L160:
1400:main.c        ****         }
1401:main.c        ****         else
1402:main.c        ****         {
1403:main.c        ****             encoderVal[encoderNum] += QuadDec_1_GetCounter();
 4705              		.loc 1 1403 0
 4706 1722 FFF7FEFF 		bl	QuadDec_1_GetCounter
 4707 1726 0346     		mov	r3, r0
 4708 1728 1846     		mov	r0, r3
 4709 172a 8D4B     		ldr	r3, .L220+12
 4710 172c 1B68     		ldr	r3, [r3]
 4711 172e 8C4A     		ldr	r2, .L220+12
 4712 1730 1268     		ldr	r2, [r2]
 4713 1732 8C49     		ldr	r1, .L220+16
 4714 1734 8A5C     		ldrb	r2, [r1, r2]
 4715 1736 D1B2     		uxtb	r1, r2
 4716 1738 C2B2     		uxtb	r2, r0
 4717 173a 0A44     		add	r2, r2, r1
 4718 173c D1B2     		uxtb	r1, r2
 4719 173e 894A     		ldr	r2, .L220+16
 4720 1740 D154     		strb	r1, [r2, r3]
 4721              	.L161:
1404:main.c        ****         }
1405:main.c        ****         QuadDec_1_SetCounter(0);
 4722              		.loc 1 1405 0
 4723 1742 0020     		movs	r0, #0
 4724 1744 FFF7FEFF 		bl	QuadDec_1_SetCounter
1406:main.c        ****         
1407:main.c        **** 
1408:main.c        ****         
1409:main.c        ****         if (USB_check_flag)
 4725              		.loc 1 1409 0
 4726 1748 874B     		ldr	r3, .L220+20
 4727 174a 1B78     		ldrb	r3, [r3]
 4728 174c DBB2     		uxtb	r3, r3
 4729 174e 002B     		cmp	r3, #0
 4730 1750 01D0     		beq	.L162
1410:main.c        ****         {
1411:main.c        ****             checkUSB_Vbus();
 4731              		.loc 1 1411 0
 4732 1752 FFF7FEFF 		bl	checkUSB_Vbus
 4733              	.L162:
1412:main.c        ****         }
1413:main.c        ****         //only service the USB bus if there is a computer plugged in
1414:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 4734              		.loc 1 1414 0
 4735 1756 854B     		ldr	r3, .L220+24
 4736 1758 1B78     		ldrb	r3, [r3]
 4737 175a DBB2     		uxtb	r3, r3
 4738 175c 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 110


 4739 175e 13D0     		beq	.L199
 4740              		.loc 1 1414 0 is_stmt 0 discriminator 1
 4741 1760 FFF7FEFF 		bl	USB_VBusPresent
 4742 1764 0346     		mov	r3, r0
 4743 1766 002B     		cmp	r3, #0
 4744 1768 0ED0     		beq	.L199
1415:main.c        ****         {
1416:main.c        ****             if (midiSent > 64)
 4745              		.loc 1 1416 0 is_stmt 1
 4746 176a 814B     		ldr	r3, .L220+28
 4747 176c 1B88     		ldrh	r3, [r3]
 4748 176e 402B     		cmp	r3, #64
 4749 1770 05D9     		bls	.L164
1417:main.c        ****             {
1418:main.c        ****                 midiOverflow++;
 4750              		.loc 1 1418 0
 4751 1772 804B     		ldr	r3, .L220+32
 4752 1774 1B88     		ldrh	r3, [r3]
 4753 1776 0133     		adds	r3, r3, #1
 4754 1778 9AB2     		uxth	r2, r3
 4755 177a 7E4B     		ldr	r3, .L220+32
 4756 177c 1A80     		strh	r2, [r3]	@ movhi
 4757              	.L164:
1419:main.c        ****             }
1420:main.c        ****             midiSent = 0;
 4758              		.loc 1 1420 0
 4759 177e 7C4B     		ldr	r3, .L220+28
 4760 1780 0022     		movs	r2, #0
 4761 1782 1A80     		strh	r2, [r3]	@ movhi
1421:main.c        ****             USB_service();
 4762              		.loc 1 1421 0
 4763 1784 FFF7FEFF 		bl	USB_service
 4764              	.L199:
1422:main.c        ****         }
1423:main.c        **** 
1424:main.c        ****         
1425:main.c        ****         /*
1426:main.c        ****         for (int i = 0; i < 10; i++)
1427:main.c        ****         {
1428:main.c        ****             myArray[i * 2] = processed_pedals[i] >> 8;
1429:main.c        ****             myArray[(i * 2) + 1] = processed_pedals[i] & 0xff;
1430:main.c        ****         }
1431:main.c        ****         
1432:main.c        ****         myArray[20] = octave | (voice << 2) | (dualSlider << 3) | (neck << 4);
1433:main.c        ****         for (int i = 0; i < 4; i++)
1434:main.c        ****         {
1435:main.c        ****             myArray[i+21] = knobs[i];
1436:main.c        ****         }
1437:main.c        ****         myArray[25] = processed_volumePedal >> 8;
1438:main.c        ****         myArray[26] = processed_volumePedal & 0xff;
1439:main.c        ****         */
1440:main.c        ****                 //make sure previous SPI2 transmission has completed before transferring the remain
1441:main.c        ****         while (0u == ((SPIM_1_ReadTxStatus() & SPIM_1_STS_SPI_DONE) || (SPIM_1_ReadTxStatus() & SPI
 4765              		.loc 1 1441 0
 4766 1788 00BF     		nop
 4767              	.L168:
 4768              		.loc 1 1441 0 is_stmt 0 discriminator 7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 111


 4769 178a FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 4770 178e 0346     		mov	r3, r0
 4771 1790 03F00103 		and	r3, r3, #1
 4772 1794 002B     		cmp	r3, #0
 4773 1796 06D1     		bne	.L165
 4774              		.loc 1 1441 0 discriminator 2
 4775 1798 FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 4776 179c 0346     		mov	r3, r0
 4777 179e 03F01003 		and	r3, r3, #16
 4778 17a2 002B     		cmp	r3, #0
 4779 17a4 01D0     		beq	.L166
 4780              	.L165:
 4781              		.loc 1 1441 0 discriminator 3
 4782 17a6 0123     		movs	r3, #1
 4783 17a8 00E0     		b	.L167
 4784              	.L166:
 4785              		.loc 1 1441 0 discriminator 4
 4786 17aa 0023     		movs	r3, #0
 4787              	.L167:
 4788              		.loc 1 1441 0 discriminator 6
 4789 17ac 002B     		cmp	r3, #0
 4790 17ae ECD0     		beq	.L168
1442:main.c        ****         {
1443:main.c        ****             ;
1444:main.c        ****         }
1445:main.c        ****         if (sendingMessage == 1) //sending synthesis preset to synth board
 4791              		.loc 1 1445 0 is_stmt 1
 4792 17b0 714B     		ldr	r3, .L220+36
 4793 17b2 1B78     		ldrb	r3, [r3]
 4794 17b4 DBB2     		uxtb	r3, r3
 4795 17b6 012B     		cmp	r3, #1
 4796 17b8 56D1     		bne	.L169
1446:main.c        ****         {
1447:main.c        ****             if (sendMessageEnd) //send end message
 4797              		.loc 1 1447 0
 4798 17ba 704B     		ldr	r3, .L220+40
 4799 17bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4800 17be 002B     		cmp	r3, #0
 4801 17c0 1DD0     		beq	.L170
1448:main.c        ****             {
1449:main.c        ****                 myArray[0] = 253;
 4802              		.loc 1 1449 0
 4803 17c2 6F4B     		ldr	r3, .L220+44
 4804 17c4 FD22     		movs	r2, #253
 4805 17c6 1A70     		strb	r2, [r3]
1450:main.c        ****                 myArray[1] = presetNumberToWrite;
 4806              		.loc 1 1450 0
 4807 17c8 6E4B     		ldr	r3, .L220+48
 4808 17ca 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4809 17cc 6C4B     		ldr	r3, .L220+44
 4810 17ce 5A70     		strb	r2, [r3, #1]
1451:main.c        ****                 currentPresetSelection = presetNumberToWrite;
 4811              		.loc 1 1451 0
 4812 17d0 6C4B     		ldr	r3, .L220+48
 4813 17d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4814 17d4 1A46     		mov	r2, r3
 4815 17d6 6C4B     		ldr	r3, .L220+52
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 112


 4816 17d8 1A60     		str	r2, [r3]
1452:main.c        ****                 //display previous preset as loaded
1453:main.c        ****                 displayCurrentPresetName();
 4817              		.loc 1 1453 0
 4818 17da FFF7FEFF 		bl	displayCurrentPresetName
1454:main.c        ****                 //OLED_invert(0);
1455:main.c        ****                 sendMessageEnd = 0;
 4819              		.loc 1 1455 0
 4820 17de 674B     		ldr	r3, .L220+40
 4821 17e0 0022     		movs	r2, #0
 4822 17e2 1A70     		strb	r2, [r3]
1456:main.c        ****                 sendingMessage = 0;
 4823              		.loc 1 1456 0
 4824 17e4 644B     		ldr	r3, .L220+36
 4825 17e6 0022     		movs	r2, #0
 4826 17e8 1A70     		strb	r2, [r3]
1457:main.c        ****                 messageArraySendCount = 0;
 4827              		.loc 1 1457 0
 4828 17ea 684B     		ldr	r3, .L220+56
 4829 17ec 0022     		movs	r2, #0
 4830 17ee 1A80     		strh	r2, [r3]	@ movhi
1458:main.c        ****                 myArray[30] = 254;
 4831              		.loc 1 1458 0
 4832 17f0 634B     		ldr	r3, .L220+44
 4833 17f2 FE22     		movs	r2, #254
 4834 17f4 9A77     		strb	r2, [r3, #30]
1459:main.c        ****                 myArray[31] = 253;
 4835              		.loc 1 1459 0
 4836 17f6 624B     		ldr	r3, .L220+44
 4837 17f8 FD22     		movs	r2, #253
 4838 17fa DA77     		strb	r2, [r3, #31]
 4839 17fc 3BE1     		b	.L176
 4840              	.L170:
1460:main.c        ****                 
1461:main.c        ****             }
1462:main.c        ****             else //send chunks
1463:main.c        ****             {
1464:main.c        ****                 //send the next preset Chunkkkkk
1465:main.c        ****                 myArray[0] = 2;
 4841              		.loc 1 1465 0
 4842 17fe 604B     		ldr	r3, .L220+44
 4843 1800 0222     		movs	r2, #2
 4844 1802 1A70     		strb	r2, [r3]
1466:main.c        ****                 myArray[1] = presetNumberToWrite;
 4845              		.loc 1 1466 0
 4846 1804 5F4B     		ldr	r3, .L220+48
 4847 1806 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4848 1808 5D4B     		ldr	r3, .L220+44
 4849 180a 5A70     		strb	r2, [r3, #1]
 4850              	.LBB23:
1467:main.c        ****                 for (uint i = 2 ; i < myBufferSize-2; i++)
 4851              		.loc 1 1467 0
 4852 180c 0223     		movs	r3, #2
 4853 180e 7B65     		str	r3, [r7, #84]
 4854 1810 20E0     		b	.L172
 4855              	.L175:
1468:main.c        ****                 {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 113


1469:main.c        ****                     if (messageArraySendCount < messageArraySize)
 4856              		.loc 1 1469 0
 4857 1812 5E4B     		ldr	r3, .L220+56
 4858 1814 1A88     		ldrh	r2, [r3]
 4859 1816 5E4B     		ldr	r3, .L220+60
 4860 1818 1B88     		ldrh	r3, [r3]
 4861 181a 9A42     		cmp	r2, r3
 4862 181c 0FD2     		bcs	.L173
1470:main.c        ****                     {
1471:main.c        ****                         myArray[i] = presetArray[messageArraySendCount++];
 4863              		.loc 1 1471 0
 4864 181e 5B4B     		ldr	r3, .L220+56
 4865 1820 1B88     		ldrh	r3, [r3]
 4866 1822 5A1C     		adds	r2, r3, #1
 4867 1824 91B2     		uxth	r1, r2
 4868 1826 594A     		ldr	r2, .L220+56
 4869 1828 1180     		strh	r1, [r2]	@ movhi
 4870 182a 1A46     		mov	r2, r3
 4871 182c 594B     		ldr	r3, .L220+64
 4872 182e 9B5C     		ldrb	r3, [r3, r2]
 4873 1830 D9B2     		uxtb	r1, r3
 4874 1832 534A     		ldr	r2, .L220+44
 4875 1834 7B6D     		ldr	r3, [r7, #84]
 4876 1836 1344     		add	r3, r3, r2
 4877 1838 0A46     		mov	r2, r1
 4878 183a 1A70     		strb	r2, [r3]
 4879 183c 07E0     		b	.L174
 4880              	.L173:
1472:main.c        ****                     }
1473:main.c        ****                     else
1474:main.c        ****                     {
1475:main.c        ****                         myArray[i] = 0xee; // preset end ack   - done, next send a message that s
 4881              		.loc 1 1475 0
 4882 183e 504A     		ldr	r2, .L220+44
 4883 1840 7B6D     		ldr	r3, [r7, #84]
 4884 1842 1344     		add	r3, r3, r2
 4885 1844 EE22     		movs	r2, #238
 4886 1846 1A70     		strb	r2, [r3]
1476:main.c        ****                         sendMessageEnd = 1;
 4887              		.loc 1 1476 0
 4888 1848 4C4B     		ldr	r3, .L220+40
 4889 184a 0122     		movs	r2, #1
 4890 184c 1A70     		strb	r2, [r3]
 4891              	.L174:
1467:main.c        ****                 {
 4892              		.loc 1 1467 0 discriminator 2
 4893 184e 7B6D     		ldr	r3, [r7, #84]
 4894 1850 0133     		adds	r3, r3, #1
 4895 1852 7B65     		str	r3, [r7, #84]
 4896              	.L172:
1467:main.c        ****                 {
 4897              		.loc 1 1467 0 is_stmt 0 discriminator 1
 4898 1854 7B6D     		ldr	r3, [r7, #84]
 4899 1856 1D2B     		cmp	r3, #29
 4900 1858 DBD9     		bls	.L175
 4901              	.LBE23:
1477:main.c        ****                     }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 114


1478:main.c        ****                 }
1479:main.c        ****                 myArray[30] = 254;
 4902              		.loc 1 1479 0 is_stmt 1
 4903 185a 494B     		ldr	r3, .L220+44
 4904 185c FE22     		movs	r2, #254
 4905 185e 9A77     		strb	r2, [r3, #30]
1480:main.c        ****                 myArray[31] = 253;
 4906              		.loc 1 1480 0
 4907 1860 474B     		ldr	r3, .L220+44
 4908 1862 FD22     		movs	r2, #253
 4909 1864 DA77     		strb	r2, [r3, #31]
 4910 1866 06E1     		b	.L176
 4911              	.L169:
1481:main.c        ****             }    
1482:main.c        ****         }
1483:main.c        ****         else if (sendKnobs)
 4912              		.loc 1 1483 0
 4913 1868 4B4B     		ldr	r3, .L220+68
 4914 186a 1B78     		ldrb	r3, [r3]
 4915 186c DBB2     		uxtb	r3, r3
 4916 186e 002B     		cmp	r3, #0
 4917 1870 69D0     		beq	.L177
1484:main.c        ****         {
1485:main.c        ****             myArray[0] = 3; //sending knob stuff, not a preset send
 4918              		.loc 1 1485 0
 4919 1872 434B     		ldr	r3, .L220+44
 4920 1874 0322     		movs	r2, #3
 4921 1876 1A70     		strb	r2, [r3]
 4922              	.LBB24:
1486:main.c        ****             for (int i = 0; i < 8; i++)
 4923              		.loc 1 1486 0
 4924 1878 0023     		movs	r3, #0
 4925 187a 3B65     		str	r3, [r7, #80]
 4926 187c 0AE0     		b	.L178
 4927              	.L179:
1487:main.c        ****             {
1488:main.c        ****                 myArray[i + 1] = macroKnobValues[i];
 4928              		.loc 1 1488 0 discriminator 3
 4929 187e 3B6D     		ldr	r3, [r7, #80]
 4930 1880 0133     		adds	r3, r3, #1
 4931 1882 4649     		ldr	r1, .L220+72
 4932 1884 3A6D     		ldr	r2, [r7, #80]
 4933 1886 0A44     		add	r2, r2, r1
 4934 1888 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 4935 188a 3D4A     		ldr	r2, .L220+44
 4936 188c D154     		strb	r1, [r2, r3]
1486:main.c        ****             for (int i = 0; i < 8; i++)
 4937              		.loc 1 1486 0 discriminator 3
 4938 188e 3B6D     		ldr	r3, [r7, #80]
 4939 1890 0133     		adds	r3, r3, #1
 4940 1892 3B65     		str	r3, [r7, #80]
 4941              	.L178:
1486:main.c        ****             for (int i = 0; i < 8; i++)
 4942              		.loc 1 1486 0 is_stmt 0 discriminator 1
 4943 1894 3B6D     		ldr	r3, [r7, #80]
 4944 1896 072B     		cmp	r3, #7
 4945 1898 F1DD     		ble	.L179
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 115


 4946              	.LBE24:
 4947              	.LBB25:
1489:main.c        ****             }
1490:main.c        ****             for (int i = 0; i < 4; i++)
 4948              		.loc 1 1490 0 is_stmt 1
 4949 189a 0023     		movs	r3, #0
 4950 189c FB64     		str	r3, [r7, #76]
 4951 189e 0AE0     		b	.L180
 4952              	.L181:
1491:main.c        ****             {
1492:main.c        ****                 myArray[i + 9] = knobs[i];
 4953              		.loc 1 1492 0 discriminator 3
 4954 18a0 FB6C     		ldr	r3, [r7, #76]
 4955 18a2 0933     		adds	r3, r3, #9
 4956 18a4 3E49     		ldr	r1, .L220+76
 4957 18a6 FA6C     		ldr	r2, [r7, #76]
 4958 18a8 0A44     		add	r2, r2, r1
 4959 18aa 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 4960 18ac 344A     		ldr	r2, .L220+44
 4961 18ae D154     		strb	r1, [r2, r3]
1490:main.c        ****             {
 4962              		.loc 1 1490 0 discriminator 3
 4963 18b0 FB6C     		ldr	r3, [r7, #76]
 4964 18b2 0133     		adds	r3, r3, #1
 4965 18b4 FB64     		str	r3, [r7, #76]
 4966              	.L180:
1490:main.c        ****             {
 4967              		.loc 1 1490 0 is_stmt 0 discriminator 1
 4968 18b6 FB6C     		ldr	r3, [r7, #76]
 4969 18b8 032B     		cmp	r3, #3
 4970 18ba F1DD     		ble	.L181
 4971              	.LBE25:
 4972              	.LBB26:
1493:main.c        ****             }
1494:main.c        ****             for (int i = 0; i < 10; i++)
 4973              		.loc 1 1494 0 is_stmt 1
 4974 18bc 0023     		movs	r3, #0
 4975 18be BB64     		str	r3, [r7, #72]
 4976 18c0 0AE0     		b	.L182
 4977              	.L183:
1495:main.c        ****             {
1496:main.c        ****                 myArray[i + 13] = pedals8bit[i];
 4978              		.loc 1 1496 0 discriminator 3
 4979 18c2 BB6C     		ldr	r3, [r7, #72]
 4980 18c4 0D33     		adds	r3, r3, #13
 4981 18c6 3749     		ldr	r1, .L220+80
 4982 18c8 BA6C     		ldr	r2, [r7, #72]
 4983 18ca 0A44     		add	r2, r2, r1
 4984 18cc 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 4985 18ce 2C4A     		ldr	r2, .L220+44
 4986 18d0 D154     		strb	r1, [r2, r3]
1494:main.c        ****             {
 4987              		.loc 1 1494 0 discriminator 3
 4988 18d2 BB6C     		ldr	r3, [r7, #72]
 4989 18d4 0133     		adds	r3, r3, #1
 4990 18d6 BB64     		str	r3, [r7, #72]
 4991              	.L182:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 116


1494:main.c        ****             {
 4992              		.loc 1 1494 0 is_stmt 0 discriminator 1
 4993 18d8 BB6C     		ldr	r3, [r7, #72]
 4994 18da 092B     		cmp	r3, #9
 4995 18dc F1DD     		ble	.L183
 4996              	.LBE26:
1497:main.c        ****             }
1498:main.c        ****             myArray[24] = octave | (voice << 4) | (dualSlider << 5) | (neck << 6);
 4997              		.loc 1 1498 0 is_stmt 1
 4998 18de 324B     		ldr	r3, .L220+84
 4999 18e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5000 18e2 1B01     		lsls	r3, r3, #4
 5001 18e4 5AB2     		sxtb	r2, r3
 5002 18e6 314B     		ldr	r3, .L220+88
 5003 18e8 1B68     		ldr	r3, [r3]
 5004 18ea 5BB2     		sxtb	r3, r3
 5005 18ec 1343     		orrs	r3, r3, r2
 5006 18ee 5AB2     		sxtb	r2, r3
 5007 18f0 2F4B     		ldr	r3, .L220+92
 5008 18f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5009 18f4 5B01     		lsls	r3, r3, #5
 5010 18f6 5BB2     		sxtb	r3, r3
 5011 18f8 1343     		orrs	r3, r3, r2
 5012 18fa 5AB2     		sxtb	r2, r3
 5013 18fc 2D4B     		ldr	r3, .L220+96
 5014 18fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5015 1900 9B01     		lsls	r3, r3, #6
 5016 1902 5BB2     		sxtb	r3, r3
 5017 1904 1343     		orrs	r3, r3, r2
 5018 1906 5BB2     		sxtb	r3, r3
 5019 1908 DAB2     		uxtb	r2, r3
 5020 190a 1D4B     		ldr	r3, .L220+44
 5021 190c 1A76     		strb	r2, [r3, #24]
1499:main.c        ****             myArray[25] = patchNum;
 5022              		.loc 1 1499 0
 5023 190e 2A4B     		ldr	r3, .L220+100
 5024 1910 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5025 1912 1B4B     		ldr	r3, .L220+44
 5026 1914 5A76     		strb	r2, [r3, #25]
1500:main.c        ****             myArray[26] = processed_volumePedal >> 8;
 5027              		.loc 1 1500 0
 5028 1916 294B     		ldr	r3, .L220+104
 5029 1918 B3F90030 		ldrsh	r3, [r3]
 5030 191c 1B12     		asrs	r3, r3, #8
 5031 191e 1BB2     		sxth	r3, r3
 5032 1920 DAB2     		uxtb	r2, r3
 5033 1922 174B     		ldr	r3, .L220+44
 5034 1924 9A76     		strb	r2, [r3, #26]
1501:main.c        ****             myArray[27] = processed_volumePedal & 0xff;
 5035              		.loc 1 1501 0
 5036 1926 254B     		ldr	r3, .L220+104
 5037 1928 B3F90030 		ldrsh	r3, [r3]
 5038 192c DAB2     		uxtb	r2, r3
 5039 192e 144B     		ldr	r3, .L220+44
 5040 1930 DA76     		strb	r2, [r3, #27]
1502:main.c        ****             myArray[30] = 254;
 5041              		.loc 1 1502 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 117


 5042 1932 134B     		ldr	r3, .L220+44
 5043 1934 FE22     		movs	r2, #254
 5044 1936 9A77     		strb	r2, [r3, #30]
1503:main.c        ****             myArray[31] = 253;
 5045              		.loc 1 1503 0
 5046 1938 114B     		ldr	r3, .L220+44
 5047 193a FD22     		movs	r2, #253
 5048 193c DA77     		strb	r2, [r3, #31]
1504:main.c        ****             
1505:main.c        ****             
1506:main.c        ****             sendKnobs = 0;
 5049              		.loc 1 1506 0
 5050 193e 164B     		ldr	r3, .L220+68
 5051 1940 0022     		movs	r2, #0
 5052 1942 1A70     		strb	r2, [r3]
 5053 1944 97E0     		b	.L176
 5054              	.L177:
1507:main.c        ****         }
1508:main.c        ****         else
1509:main.c        ****         {
1510:main.c        ****             myArray[0] = 1; //sending normal pitch stuff, not a preset send
 5055              		.loc 1 1510 0
 5056 1946 0E4B     		ldr	r3, .L220+44
 5057 1948 0122     		movs	r2, #1
 5058 194a 1A70     		strb	r2, [r3]
 5059              	.LBB27:
1511:main.c        ****             for (int i = 0; i < 12; i++)
 5060              		.loc 1 1511 0
 5061 194c 0023     		movs	r3, #0
 5062 194e 7B64     		str	r3, [r7, #68]
 5063 1950 5BE0     		b	.L184
 5064              	.L221:
 5065 1952 00BF     		.align	2
 5066              	.L220:
 5067 1954 00000000 		.word	prevStringPitchBend
 5068 1958 00000000 		.word	stringMIDI
 5069 195c 00000000 		.word	numStrings
 5070 1960 00000000 		.word	encoderNum
 5071 1964 00000000 		.word	encoderVal
 5072 1968 00000000 		.word	USB_check_flag
 5073 196c 00000000 		.word	USB_active
 5074 1970 00000000 		.word	midiSent
 5075 1974 00000000 		.word	midiOverflow
 5076 1978 00000000 		.word	sendingMessage
 5077 197c 00000000 		.word	sendMessageEnd
 5078 1980 00000000 		.word	myArray
 5079 1984 00000000 		.word	presetNumberToWrite
 5080 1988 00000000 		.word	currentPresetSelection
 5081 198c 00000000 		.word	messageArraySendCount
 5082 1990 00000000 		.word	messageArraySize
 5083 1994 00000000 		.word	presetArray
 5084 1998 00000000 		.word	sendKnobs
 5085 199c 00000000 		.word	macroKnobValues
 5086 19a0 00000000 		.word	knobs
 5087 19a4 00000000 		.word	pedals8bit
 5088 19a8 00000000 		.word	voice
 5089 19ac 00000000 		.word	octave
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 118


 5090 19b0 00000000 		.word	dualSlider
 5091 19b4 00000000 		.word	neck
 5092 19b8 00000000 		.word	patchNum
 5093 19bc 00000000 		.word	processed_volumePedal
 5094              	.L185:
 5095              	.LBB28:
1512:main.c        ****             {
1513:main.c        ****                 int scaledMIDI = roundf(stringMIDI[i] * 512.0f); // divide by 128 multiply by 65535
 5096              		.loc 1 1513 0 discriminator 3
 5097 19c0 664A     		ldr	r2, .L222
 5098 19c2 7B6C     		ldr	r3, [r7, #68]
 5099 19c4 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 5100 19c8 4FF08841 		mov	r1, #1140850688
 5101 19cc 1846     		mov	r0, r3
 5102 19ce FFF7FEFF 		bl	__aeabi_fmul
 5103 19d2 0346     		mov	r3, r0
 5104 19d4 1846     		mov	r0, r3
 5105 19d6 FFF7FEFF 		bl	roundf
 5106 19da 0346     		mov	r3, r0
 5107 19dc 1846     		mov	r0, r3
 5108 19de FFF7FEFF 		bl	__aeabi_f2iz
 5109 19e2 0346     		mov	r3, r0
 5110 19e4 FB60     		str	r3, [r7, #12]
1514:main.c        ****                 myArray[i * 2 + 1] = scaledMIDI >> 8;
 5111              		.loc 1 1514 0 discriminator 3
 5112 19e6 7B6C     		ldr	r3, [r7, #68]
 5113 19e8 5B00     		lsls	r3, r3, #1
 5114 19ea 0133     		adds	r3, r3, #1
 5115 19ec FA68     		ldr	r2, [r7, #12]
 5116 19ee 1212     		asrs	r2, r2, #8
 5117 19f0 D1B2     		uxtb	r1, r2
 5118 19f2 5B4A     		ldr	r2, .L222+4
 5119 19f4 D154     		strb	r1, [r2, r3]
1515:main.c        ****                 myArray[(i * 2) + 2] = scaledMIDI & 255;
 5120              		.loc 1 1515 0 discriminator 3
 5121 19f6 7B6C     		ldr	r3, [r7, #68]
 5122 19f8 0133     		adds	r3, r3, #1
 5123 19fa 5B00     		lsls	r3, r3, #1
 5124 19fc FA68     		ldr	r2, [r7, #12]
 5125 19fe D1B2     		uxtb	r1, r2
 5126 1a00 574A     		ldr	r2, .L222+4
 5127 1a02 D154     		strb	r1, [r2, r3]
 5128              	.LBE28:
1511:main.c        ****             {
 5129              		.loc 1 1511 0 discriminator 3
 5130 1a04 7B6C     		ldr	r3, [r7, #68]
 5131 1a06 0133     		adds	r3, r3, #1
 5132 1a08 7B64     		str	r3, [r7, #68]
 5133              	.L184:
1511:main.c        ****             {
 5134              		.loc 1 1511 0 is_stmt 0 discriminator 1
 5135 1a0a 7B6C     		ldr	r3, [r7, #68]
 5136 1a0c 0B2B     		cmp	r3, #11
 5137 1a0e D7DD     		ble	.L185
 5138              	.LBE27:
1516:main.c        ****             }
1517:main.c        ****             
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 119


1518:main.c        ****             myArray[24] = octave | (voice << 4) | (dualSlider << 5) | (neck << 6);
 5139              		.loc 1 1518 0 is_stmt 1
 5140 1a10 544B     		ldr	r3, .L222+8
 5141 1a12 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5142 1a14 1B01     		lsls	r3, r3, #4
 5143 1a16 5AB2     		sxtb	r2, r3
 5144 1a18 534B     		ldr	r3, .L222+12
 5145 1a1a 1B68     		ldr	r3, [r3]
 5146 1a1c 5BB2     		sxtb	r3, r3
 5147 1a1e 1343     		orrs	r3, r3, r2
 5148 1a20 5AB2     		sxtb	r2, r3
 5149 1a22 524B     		ldr	r3, .L222+16
 5150 1a24 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5151 1a26 5B01     		lsls	r3, r3, #5
 5152 1a28 5BB2     		sxtb	r3, r3
 5153 1a2a 1343     		orrs	r3, r3, r2
 5154 1a2c 5AB2     		sxtb	r2, r3
 5155 1a2e 504B     		ldr	r3, .L222+20
 5156 1a30 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5157 1a32 9B01     		lsls	r3, r3, #6
 5158 1a34 5BB2     		sxtb	r3, r3
 5159 1a36 1343     		orrs	r3, r3, r2
 5160 1a38 5BB2     		sxtb	r3, r3
 5161 1a3a DAB2     		uxtb	r2, r3
 5162 1a3c 484B     		ldr	r3, .L222+4
 5163 1a3e 1A76     		strb	r2, [r3, #24]
1519:main.c        ****             /*
1520:main.c        ****             for (int i = 0; i < 4; i++)
1521:main.c        ****             {
1522:main.c        ****                 myArray[i+49] = knobs[i];
1523:main.c        ****             }
1524:main.c        ****             */
1525:main.c        ****             myArray[25] = patchNum;
 5164              		.loc 1 1525 0
 5165 1a40 4C4B     		ldr	r3, .L222+24
 5166 1a42 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5167 1a44 464B     		ldr	r3, .L222+4
 5168 1a46 5A76     		strb	r2, [r3, #25]
1526:main.c        ****             myArray[26] = processed_volumePedal >> 8;
 5169              		.loc 1 1526 0
 5170 1a48 4B4B     		ldr	r3, .L222+28
 5171 1a4a B3F90030 		ldrsh	r3, [r3]
 5172 1a4e 1B12     		asrs	r3, r3, #8
 5173 1a50 1BB2     		sxth	r3, r3
 5174 1a52 DAB2     		uxtb	r2, r3
 5175 1a54 424B     		ldr	r3, .L222+4
 5176 1a56 9A76     		strb	r2, [r3, #26]
1527:main.c        ****             myArray[27] = processed_volumePedal & 0xff;
 5177              		.loc 1 1527 0
 5178 1a58 474B     		ldr	r3, .L222+28
 5179 1a5a B3F90030 		ldrsh	r3, [r3]
 5180 1a5e DAB2     		uxtb	r2, r3
 5181 1a60 3F4B     		ldr	r3, .L222+4
 5182 1a62 DA76     		strb	r2, [r3, #27]
1528:main.c        ****             myArray[30] = 254;
 5183              		.loc 1 1528 0
 5184 1a64 3E4B     		ldr	r3, .L222+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 120


 5185 1a66 FE22     		movs	r2, #254
 5186 1a68 9A77     		strb	r2, [r3, #30]
1529:main.c        ****             myArray[31] = 253;
 5187              		.loc 1 1529 0
 5188 1a6a 3D4B     		ldr	r3, .L222+4
 5189 1a6c FD22     		movs	r2, #253
 5190 1a6e DA77     		strb	r2, [r3, #31]
1530:main.c        ****             
1531:main.c        ****             sendKnobs = 1; // for next time around, might make this slower though
 5191              		.loc 1 1531 0
 5192 1a70 424B     		ldr	r3, .L222+32
 5193 1a72 0122     		movs	r2, #1
 5194 1a74 1A70     		strb	r2, [r3]
 5195              	.L176:
1532:main.c        ****             /*
1533:main.c        ****             for (int i = 0; i < 16; i++)
1534:main.c        ****             {
1535:main.c        ****                 myArray[i+56] = encoderVal[i];
1536:main.c        ****             }
1537:main.c        ****             */
1538:main.c        ****         }
1539:main.c        ****         
1540:main.c        ****         
1541:main.c        **** 
1542:main.c        **** /*
1543:main.c        ****         for(int i = 0; i < myBufferSize; i++)
1544:main.c        ****         {
1545:main.c        ****             SPIM_1_WriteTxData(myArray[i]);
1546:main.c        ****         }
1547:main.c        ****     */    
1548:main.c        ****         
1549:main.c        **** 
1550:main.c        ****        
1551:main.c        ****         
1552:main.c        ****         
1553:main.c        ****         //parse input from synth board (names)
1554:main.c        ****         if ((inBuffer[0] == 253) && (inBuffer[31] == 254))
 5196              		.loc 1 1554 0
 5197 1a76 424B     		ldr	r3, .L222+36
 5198 1a78 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5199 1a7a FD2B     		cmp	r3, #253
 5200 1a7c 5BD1     		bne	.L186
 5201              		.loc 1 1554 0 is_stmt 0 discriminator 1
 5202 1a7e 404B     		ldr	r3, .L222+36
 5203 1a80 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 5204 1a82 FE2B     		cmp	r3, #254
 5205 1a84 57D1     		bne	.L186
 5206              	.LBB29:
1555:main.c        ****         {
1556:main.c        ****             int whichPresetToStoreName = inBuffer[1];
 5207              		.loc 1 1556 0 is_stmt 1
 5208 1a86 3E4B     		ldr	r3, .L222+36
 5209 1a88 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5210 1a8a BB60     		str	r3, [r7, #8]
1557:main.c        ****             int whichMacroToStoreName = inBuffer[16];
 5211              		.loc 1 1557 0
 5212 1a8c 3C4B     		ldr	r3, .L222+36
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 121


 5213 1a8e 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 5214 1a90 7B60     		str	r3, [r7, #4]
1558:main.c        ****             int bufferPointer = 2;
 5215              		.loc 1 1558 0
 5216 1a92 0223     		movs	r3, #2
 5217 1a94 3B64     		str	r3, [r7, #64]
 5218              	.LBB30:
1559:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5219              		.loc 1 1559 0
 5220 1a96 0023     		movs	r3, #0
 5221 1a98 FB63     		str	r3, [r7, #60]
 5222 1a9a 14E0     		b	.L187
 5223              	.L188:
1560:main.c        ****             {
1561:main.c        ****                 presetNamesArray[whichPresetToStoreName][i] = inBuffer[bufferPointer];
 5224              		.loc 1 1561 0 discriminator 3
 5225 1a9c 384A     		ldr	r2, .L222+36
 5226 1a9e 3B6C     		ldr	r3, [r7, #64]
 5227 1aa0 1344     		add	r3, r3, r2
 5228 1aa2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5229 1aa4 3749     		ldr	r1, .L222+40
 5230 1aa6 BA68     		ldr	r2, [r7, #8]
 5231 1aa8 1346     		mov	r3, r2
 5232 1aaa DB00     		lsls	r3, r3, #3
 5233 1aac 9B1A     		subs	r3, r3, r2
 5234 1aae 5B00     		lsls	r3, r3, #1
 5235 1ab0 CA18     		adds	r2, r1, r3
 5236 1ab2 FB6B     		ldr	r3, [r7, #60]
 5237 1ab4 1344     		add	r3, r3, r2
 5238 1ab6 0246     		mov	r2, r0
 5239 1ab8 1A70     		strb	r2, [r3]
1562:main.c        ****                 bufferPointer++;
 5240              		.loc 1 1562 0 discriminator 3
 5241 1aba 3B6C     		ldr	r3, [r7, #64]
 5242 1abc 0133     		adds	r3, r3, #1
 5243 1abe 3B64     		str	r3, [r7, #64]
1559:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5244              		.loc 1 1559 0 discriminator 3
 5245 1ac0 FB6B     		ldr	r3, [r7, #60]
 5246 1ac2 0133     		adds	r3, r3, #1
 5247 1ac4 FB63     		str	r3, [r7, #60]
 5248              	.L187:
1559:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5249              		.loc 1 1559 0 is_stmt 0 discriminator 1
 5250 1ac6 FB6B     		ldr	r3, [r7, #60]
 5251 1ac8 0D2B     		cmp	r3, #13
 5252 1aca E7DD     		ble	.L188
 5253              	.LBE30:
1563:main.c        ****             }
1564:main.c        ****             bufferPointer = 17;
 5254              		.loc 1 1564 0 is_stmt 1
 5255 1acc 1123     		movs	r3, #17
 5256 1ace 3B64     		str	r3, [r7, #64]
 5257              	.LBB31:
1565:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5258              		.loc 1 1565 0
 5259 1ad0 0023     		movs	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 122


 5260 1ad2 BB63     		str	r3, [r7, #56]
 5261 1ad4 1BE0     		b	.L189
 5262              	.L190:
1566:main.c        ****             {
1567:main.c        ****                 macroNamesArray[whichPresetToStoreName][whichMacroToStoreName][i] = inBuffer[buffer
 5263              		.loc 1 1567 0 discriminator 3
 5264 1ad6 2A4A     		ldr	r2, .L222+36
 5265 1ad8 3B6C     		ldr	r3, [r7, #64]
 5266 1ada 1344     		add	r3, r3, r2
 5267 1adc 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 5268 1ade 2A48     		ldr	r0, .L222+44
 5269 1ae0 7B68     		ldr	r3, [r7, #4]
 5270 1ae2 B968     		ldr	r1, [r7, #8]
 5271 1ae4 1A46     		mov	r2, r3
 5272 1ae6 D200     		lsls	r2, r2, #3
 5273 1ae8 D21A     		subs	r2, r2, r3
 5274 1aea 5300     		lsls	r3, r2, #1
 5275 1aec 1A46     		mov	r2, r3
 5276 1aee 0B46     		mov	r3, r1
 5277 1af0 DB00     		lsls	r3, r3, #3
 5278 1af2 5B1A     		subs	r3, r3, r1
 5279 1af4 1B01     		lsls	r3, r3, #4
 5280 1af6 1344     		add	r3, r3, r2
 5281 1af8 C218     		adds	r2, r0, r3
 5282 1afa BB6B     		ldr	r3, [r7, #56]
 5283 1afc 1344     		add	r3, r3, r2
 5284 1afe 2246     		mov	r2, r4
 5285 1b00 1A70     		strb	r2, [r3]
1568:main.c        ****                 bufferPointer++;
 5286              		.loc 1 1568 0 discriminator 3
 5287 1b02 3B6C     		ldr	r3, [r7, #64]
 5288 1b04 0133     		adds	r3, r3, #1
 5289 1b06 3B64     		str	r3, [r7, #64]
1565:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5290              		.loc 1 1565 0 discriminator 3
 5291 1b08 BB6B     		ldr	r3, [r7, #56]
 5292 1b0a 0133     		adds	r3, r3, #1
 5293 1b0c BB63     		str	r3, [r7, #56]
 5294              	.L189:
1565:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5295              		.loc 1 1565 0 is_stmt 0 discriminator 1
 5296 1b0e BB6B     		ldr	r3, [r7, #56]
 5297 1b10 0D2B     		cmp	r3, #13
 5298 1b12 E0DD     		ble	.L190
 5299              	.LBE31:
1569:main.c        ****             }
1570:main.c        ****             if ((whichPresetToStoreName == patchNum) && (whichMacroToStoreName == 7) && (!presetAlr
 5300              		.loc 1 1570 0 is_stmt 1
 5301 1b14 174B     		ldr	r3, .L222+24
 5302 1b16 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5303 1b18 1A46     		mov	r2, r3
 5304 1b1a BB68     		ldr	r3, [r7, #8]
 5305 1b1c 9A42     		cmp	r2, r3
 5306 1b1e 0AD1     		bne	.L186
 5307              		.loc 1 1570 0 is_stmt 0 discriminator 1
 5308 1b20 7B68     		ldr	r3, [r7, #4]
 5309 1b22 072B     		cmp	r3, #7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 123


 5310 1b24 07D1     		bne	.L186
 5311              		.loc 1 1570 0 discriminator 2
 5312 1b26 194A     		ldr	r2, .L222+48
 5313 1b28 BB68     		ldr	r3, [r7, #8]
 5314 1b2a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5315 1b2e 002B     		cmp	r3, #0
 5316 1b30 01D1     		bne	.L186
1571:main.c        ****             {
1572:main.c        ****                 displayCurrentPresetName();
 5317              		.loc 1 1572 0 is_stmt 1
 5318 1b32 FFF7FEFF 		bl	displayCurrentPresetName
 5319              	.L186:
 5320              	.LBE29:
1573:main.c        ****             }
1574:main.c        ****         }
1575:main.c        ****         
1576:main.c        ****         SPIM_1_ClearRxBuffer();
 5321              		.loc 1 1576 0
 5322 1b36 FFF7FEFF 		bl	SPIM_1_ClearRxBuffer
1577:main.c        ****         CyDmaChEnable(rx3Channel, STORE_TD_CFG_ONCMPLT);
 5323              		.loc 1 1577 0
 5324 1b3a 154B     		ldr	r3, .L222+52
 5325 1b3c 1B78     		ldrb	r3, [r3]
 5326 1b3e DBB2     		uxtb	r3, r3
 5327 1b40 0121     		movs	r1, #1
 5328 1b42 1846     		mov	r0, r3
 5329 1b44 FFF7FEFF 		bl	CyDmaChEnable
1578:main.c        ****         CyDmaChEnable(txChannel, STORE_TD_CFG_ONCMPLT);
 5330              		.loc 1 1578 0
 5331 1b48 124B     		ldr	r3, .L222+56
 5332 1b4a 1B78     		ldrb	r3, [r3]
 5333 1b4c DBB2     		uxtb	r3, r3
 5334 1b4e 0121     		movs	r1, #1
 5335 1b50 1846     		mov	r0, r3
 5336 1b52 FFF7FEFF 		bl	CyDmaChEnable
1579:main.c        ****         
1580:main.c        **** 
1581:main.c        ****        
1582:main.c        **** 
1583:main.c        ****      }
 5337              		.loc 1 1583 0
 5338 1b56 FEF7CDBB 		b	.L191
 5339              	.L223:
 5340 1b5a 00BF     		.align	2
 5341              	.L222:
 5342 1b5c 00000000 		.word	stringMIDI
 5343 1b60 00000000 		.word	myArray
 5344 1b64 00000000 		.word	voice
 5345 1b68 00000000 		.word	octave
 5346 1b6c 00000000 		.word	dualSlider
 5347 1b70 00000000 		.word	neck
 5348 1b74 00000000 		.word	patchNum
 5349 1b78 00000000 		.word	processed_volumePedal
 5350 1b7c 00000000 		.word	sendKnobs
 5351 1b80 00000000 		.word	inBuffer
 5352 1b84 00000000 		.word	presetNamesArray
 5353 1b88 00000000 		.word	macroNamesArray
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 124


 5354 1b8c 00000000 		.word	presetAlreadyDisplayed
 5355 1b90 00000000 		.word	rx3Channel
 5356 1b94 00000000 		.word	txChannel
 5357              		.cfi_endproc
 5358              	.LFE76:
 5359              		.size	main, .-main
 5360              		.section	.text.DmaTxConfiguration,"ax",%progbits
 5361              		.align	2
 5362              		.global	DmaTxConfiguration
 5363              		.thumb
 5364              		.thumb_func
 5365              		.type	DmaTxConfiguration, %function
 5366              	DmaTxConfiguration:
 5367              	.LFB77:
1584:main.c        **** }
1585:main.c        **** 
1586:main.c        **** void DmaTxConfiguration()
1587:main.c        **** {
 5368              		.loc 1 1587 0
 5369              		.cfi_startproc
 5370              		@ args = 0, pretend = 0, frame = 0
 5371              		@ frame_needed = 1, uses_anonymous_args = 0
 5372 0000 80B5     		push	{r7, lr}
 5373              		.cfi_def_cfa_offset 8
 5374              		.cfi_offset 7, -8
 5375              		.cfi_offset 14, -4
 5376 0002 00AF     		add	r7, sp, #0
 5377              		.cfi_def_cfa_register 7
1588:main.c        ****     /* Init DMA, 1 byte bursts, each burst requires a request */ 
1589:main.c        ****     txChannel = DMA_4_DmaInitialize(DMA_TX_BYTES_PER_BURST, DMA_TX_REQUEST_PER_BURST, 
 5378              		.loc 1 1589 0
 5379 0004 4FF48043 		mov	r3, #16384
 5380 0008 41F6FF72 		movw	r2, #8191
 5381 000c 0121     		movs	r1, #1
 5382 000e 0120     		movs	r0, #1
 5383 0010 FFF7FEFF 		bl	DMA_4_DmaInitialize
 5384 0014 0346     		mov	r3, r0
 5385 0016 1A46     		mov	r2, r3
 5386 0018 124B     		ldr	r3, .L225
 5387 001a 1A70     		strb	r2, [r3]
1590:main.c        ****                                         HI16(DMA_TX_SRC_BASE), HI16(DMA_TX_DST_BASE));
1591:main.c        **** 
1592:main.c        ****     txTD = CyDmaTdAllocate();
 5388              		.loc 1 1592 0
 5389 001c FFF7FEFF 		bl	CyDmaTdAllocate
 5390 0020 0346     		mov	r3, r0
 5391 0022 1A46     		mov	r2, r3
 5392 0024 104B     		ldr	r3, .L225+4
 5393 0026 1A70     		strb	r2, [r3]
1593:main.c        **** 
1594:main.c        ****     /* Configure this Td as follows:
1595:main.c        ****     *  - Increment the source address, but not the destination address   
1596:main.c        ****     */
1597:main.c        ****     CyDmaTdSetConfiguration(txTD, myBufferSize, CY_DMA_DISABLE_TD, TD_INC_SRC_ADR);
 5394              		.loc 1 1597 0
 5395 0028 0F4B     		ldr	r3, .L225+4
 5396 002a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 125


 5397 002c D8B2     		uxtb	r0, r3
 5398 002e 0123     		movs	r3, #1
 5399 0030 FE22     		movs	r2, #254
 5400 0032 2021     		movs	r1, #32
 5401 0034 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1598:main.c        **** 
1599:main.c        ****     /* From the memory to the SPIM */
1600:main.c        ****     CyDmaTdSetAddress(txTD, LO16((uint32)myArray), LO16((uint32) SPIM_1_TXDATA_PTR));
 5402              		.loc 1 1600 0
 5403 0038 0B4B     		ldr	r3, .L225+4
 5404 003a 1B78     		ldrb	r3, [r3]
 5405 003c DBB2     		uxtb	r3, r3
 5406 003e 0B4A     		ldr	r2, .L225+8
 5407 0040 91B2     		uxth	r1, r2
 5408 0042 46F24952 		movw	r2, #25929
 5409 0046 1846     		mov	r0, r3
 5410 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
1601:main.c        ****     
1602:main.c        ****     /* Associate the TD with the channel */
1603:main.c        ****     CyDmaChSetInitialTd(txChannel, txTD); 
 5411              		.loc 1 1603 0
 5412 004c 054B     		ldr	r3, .L225
 5413 004e 1B78     		ldrb	r3, [r3]
 5414 0050 DAB2     		uxtb	r2, r3
 5415 0052 054B     		ldr	r3, .L225+4
 5416 0054 1B78     		ldrb	r3, [r3]
 5417 0056 DBB2     		uxtb	r3, r3
 5418 0058 1946     		mov	r1, r3
 5419 005a 1046     		mov	r0, r2
 5420 005c FFF7FEFF 		bl	CyDmaChSetInitialTd
1604:main.c        ****    
1605:main.c        **** } 
 5421              		.loc 1 1605 0
 5422 0060 00BF     		nop
 5423 0062 80BD     		pop	{r7, pc}
 5424              	.L226:
 5425              		.align	2
 5426              	.L225:
 5427 0064 00000000 		.word	txChannel
 5428 0068 00000000 		.word	txTD
 5429 006c 00000000 		.word	myArray
 5430              		.cfi_endproc
 5431              	.LFE77:
 5432              		.size	DmaTxConfiguration, .-DmaTxConfiguration
 5433              		.section	.text.DmaRxConfiguration,"ax",%progbits
 5434              		.align	2
 5435              		.global	DmaRxConfiguration
 5436              		.thumb
 5437              		.thumb_func
 5438              		.type	DmaRxConfiguration, %function
 5439              	DmaRxConfiguration:
 5440              	.LFB78:
1606:main.c        **** 
1607:main.c        **** void DmaRxConfiguration()
1608:main.c        **** { 
 5441              		.loc 1 1608 0
 5442              		.cfi_startproc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 126


 5443              		@ args = 0, pretend = 0, frame = 0
 5444              		@ frame_needed = 1, uses_anonymous_args = 0
 5445 0000 80B5     		push	{r7, lr}
 5446              		.cfi_def_cfa_offset 8
 5447              		.cfi_offset 7, -8
 5448              		.cfi_offset 14, -4
 5449 0002 00AF     		add	r7, sp, #0
 5450              		.cfi_def_cfa_register 7
1609:main.c        ****     //pluck dma
1610:main.c        ****     rx1Channel = DMA_1_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 5451              		.loc 1 1610 0
 5452 0004 41F6FF73 		movw	r3, #8191
 5453 0008 4FF48042 		mov	r2, #16384
 5454 000c 0121     		movs	r1, #1
 5455 000e 0120     		movs	r0, #1
 5456 0010 FFF7FEFF 		bl	DMA_1_DmaInitialize
 5457 0014 0346     		mov	r3, r0
 5458 0016 1A46     		mov	r2, r3
 5459 0018 4A4B     		ldr	r3, .L228
 5460 001a 1A70     		strb	r2, [r3]
1611:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1612:main.c        ****     rx1TD[0] = CyDmaTdAllocate();
 5461              		.loc 1 1612 0
 5462 001c FFF7FEFF 		bl	CyDmaTdAllocate
 5463 0020 0346     		mov	r3, r0
 5464 0022 1A46     		mov	r2, r3
 5465 0024 484B     		ldr	r3, .L228+4
 5466 0026 1A70     		strb	r2, [r3]
1613:main.c        ****     rx1TD[1] = CyDmaTdAllocate();
 5467              		.loc 1 1613 0
 5468 0028 FFF7FEFF 		bl	CyDmaTdAllocate
 5469 002c 0346     		mov	r3, r0
 5470 002e 1A46     		mov	r2, r3
 5471 0030 454B     		ldr	r3, .L228+4
 5472 0032 5A70     		strb	r2, [r3, #1]
1614:main.c        ****     CyDmaTdSetConfiguration(rx1TD[0], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD , TD_INC_DST_ADR | DMA_1__T
 5473              		.loc 1 1614 0
 5474 0034 444B     		ldr	r3, .L228+4
 5475 0036 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5476 0038 0223     		movs	r3, #2
 5477 003a FE22     		movs	r2, #254
 5478 003c 1A21     		movs	r1, #26
 5479 003e FFF7FEFF 		bl	CyDmaTdSetConfiguration
1615:main.c        ****     CyDmaTdSetConfiguration(rx1TD[1], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_1__TD
 5480              		.loc 1 1615 0
 5481 0042 414B     		ldr	r3, .L228+4
 5482 0044 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5483 0046 0223     		movs	r3, #2
 5484 0048 FE22     		movs	r2, #254
 5485 004a 1A21     		movs	r1, #26
 5486 004c FFF7FEFF 		bl	CyDmaTdSetConfiguration
1616:main.c        ****     CyDmaTdSetAddress(rx1TD[0], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rxBufferPluck[0]));
 5487              		.loc 1 1616 0
 5488 0050 3D4B     		ldr	r3, .L228+4
 5489 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5490 0054 3D4A     		ldr	r2, .L228+8
 5491 0056 92B2     		uxth	r2, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 127


 5492 0058 46F25441 		movw	r1, #25684
 5493 005c 1846     		mov	r0, r3
 5494 005e FFF7FEFF 		bl	CyDmaTdSetAddress
1617:main.c        ****     CyDmaTdSetAddress(rx1TD[1], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rxBufferPluck[1]));
 5495              		.loc 1 1617 0
 5496 0062 394B     		ldr	r3, .L228+4
 5497 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5498 0066 3A4A     		ldr	r2, .L228+12
 5499 0068 92B2     		uxth	r2, r2
 5500 006a 46F25441 		movw	r1, #25684
 5501 006e 1846     		mov	r0, r3
 5502 0070 FFF7FEFF 		bl	CyDmaTdSetAddress
1618:main.c        **** 
1619:main.c        ****     //bar dma
1620:main.c        ****     rx2Channel = DMA_2_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 5503              		.loc 1 1620 0
 5504 0074 41F6FF73 		movw	r3, #8191
 5505 0078 4FF48042 		mov	r2, #16384
 5506 007c 0121     		movs	r1, #1
 5507 007e 0120     		movs	r0, #1
 5508 0080 FFF7FEFF 		bl	DMA_2_DmaInitialize
 5509 0084 0346     		mov	r3, r0
 5510 0086 1A46     		mov	r2, r3
 5511 0088 324B     		ldr	r3, .L228+16
 5512 008a 1A70     		strb	r2, [r3]
1621:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1622:main.c        ****     rx2TD[0] = CyDmaTdAllocate();
 5513              		.loc 1 1622 0
 5514 008c FFF7FEFF 		bl	CyDmaTdAllocate
 5515 0090 0346     		mov	r3, r0
 5516 0092 1A46     		mov	r2, r3
 5517 0094 304B     		ldr	r3, .L228+20
 5518 0096 1A70     		strb	r2, [r3]
1623:main.c        ****     rx2TD[1] = CyDmaTdAllocate();
 5519              		.loc 1 1623 0
 5520 0098 FFF7FEFF 		bl	CyDmaTdAllocate
 5521 009c 0346     		mov	r3, r0
 5522 009e 1A46     		mov	r2, r3
 5523 00a0 2D4B     		ldr	r3, .L228+20
 5524 00a2 5A70     		strb	r2, [r3, #1]
1624:main.c        ****     CyDmaTdSetConfiguration(rx2TD[0], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_2__TD_T
 5525              		.loc 1 1624 0
 5526 00a4 2C4B     		ldr	r3, .L228+20
 5527 00a6 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5528 00a8 0623     		movs	r3, #6
 5529 00aa FE22     		movs	r2, #254
 5530 00ac 0821     		movs	r1, #8
 5531 00ae FFF7FEFF 		bl	CyDmaTdSetConfiguration
1625:main.c        ****     CyDmaTdSetConfiguration(rx2TD[1], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_2__TD_T
 5532              		.loc 1 1625 0
 5533 00b2 294B     		ldr	r3, .L228+20
 5534 00b4 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5535 00b6 0623     		movs	r3, #6
 5536 00b8 FE22     		movs	r2, #254
 5537 00ba 0821     		movs	r1, #8
 5538 00bc FFF7FEFF 		bl	CyDmaTdSetConfiguration
1626:main.c        ****     CyDmaTdSetAddress(rx2TD[0], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBufferBar[0]));
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 128


 5539              		.loc 1 1626 0
 5540 00c0 254B     		ldr	r3, .L228+20
 5541 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5542 00c4 254A     		ldr	r2, .L228+24
 5543 00c6 92B2     		uxth	r2, r2
 5544 00c8 46F25C41 		movw	r1, #25692
 5545 00cc 1846     		mov	r0, r3
 5546 00ce FFF7FEFF 		bl	CyDmaTdSetAddress
1627:main.c        ****     CyDmaTdSetAddress(rx2TD[1], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBufferBar[1]));
 5547              		.loc 1 1627 0
 5548 00d2 214B     		ldr	r3, .L228+20
 5549 00d4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5550 00d6 224A     		ldr	r2, .L228+28
 5551 00d8 92B2     		uxth	r2, r2
 5552 00da 46F25C41 		movw	r1, #25692
 5553 00de 1846     		mov	r0, r3
 5554 00e0 FFF7FEFF 		bl	CyDmaTdSetAddress
1628:main.c        ****     
1629:main.c        ****         /* Init DMA, 1 byte bursts, each burst requires a request */ 
1630:main.c        ****     rx3Channel = DMA_3_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 5555              		.loc 1 1630 0
 5556 00e4 41F6FF73 		movw	r3, #8191
 5557 00e8 4FF48042 		mov	r2, #16384
 5558 00ec 0121     		movs	r1, #1
 5559 00ee 0120     		movs	r0, #1
 5560 00f0 FFF7FEFF 		bl	DMA_3_DmaInitialize
 5561 00f4 0346     		mov	r3, r0
 5562 00f6 1A46     		mov	r2, r3
 5563 00f8 1A4B     		ldr	r3, .L228+32
 5564 00fa 1A70     		strb	r2, [r3]
1631:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1632:main.c        **** 
1633:main.c        ****     rx3TD = CyDmaTdAllocate();
 5565              		.loc 1 1633 0
 5566 00fc FFF7FEFF 		bl	CyDmaTdAllocate
 5567 0100 0346     		mov	r3, r0
 5568 0102 1A46     		mov	r2, r3
 5569 0104 184B     		ldr	r3, .L228+36
 5570 0106 1A70     		strb	r2, [r3]
1634:main.c        ****     
1635:main.c        ****     /* Configure this Td as follows:
1636:main.c        ****     *  - Increment the destination address, but not the source address
1637:main.c        ****     */
1638:main.c        ****     CyDmaTdSetConfiguration(rx3TD, myBufferSize, CY_DMA_DISABLE_TD, TD_INC_DST_ADR);
 5571              		.loc 1 1638 0
 5572 0108 174B     		ldr	r3, .L228+36
 5573 010a 1B78     		ldrb	r3, [r3]
 5574 010c D8B2     		uxtb	r0, r3
 5575 010e 0223     		movs	r3, #2
 5576 0110 FE22     		movs	r2, #254
 5577 0112 2021     		movs	r1, #32
 5578 0114 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1639:main.c        **** 
1640:main.c        ****     /* From the SPIM to the memory */
1641:main.c        ****     CyDmaTdSetAddress(rx3TD, LO16((uint32)SPIM_1_RXDATA_PTR), LO16((uint32)inBuffer));
 5579              		.loc 1 1641 0
 5580 0118 134B     		ldr	r3, .L228+36
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 129


 5581 011a 1B78     		ldrb	r3, [r3]
 5582 011c DBB2     		uxtb	r3, r3
 5583 011e 134A     		ldr	r2, .L228+40
 5584 0120 92B2     		uxth	r2, r2
 5585 0122 46F25951 		movw	r1, #25945
 5586 0126 1846     		mov	r0, r3
 5587 0128 FFF7FEFF 		bl	CyDmaTdSetAddress
1642:main.c        **** 
1643:main.c        ****     /* Associate the TD with the channel */
1644:main.c        ****     CyDmaChSetInitialTd(rx3Channel, rx3TD);
 5588              		.loc 1 1644 0
 5589 012c 0D4B     		ldr	r3, .L228+32
 5590 012e 1B78     		ldrb	r3, [r3]
 5591 0130 DAB2     		uxtb	r2, r3
 5592 0132 0D4B     		ldr	r3, .L228+36
 5593 0134 1B78     		ldrb	r3, [r3]
 5594 0136 DBB2     		uxtb	r3, r3
 5595 0138 1946     		mov	r1, r3
 5596 013a 1046     		mov	r0, r2
 5597 013c FFF7FEFF 		bl	CyDmaChSetInitialTd
1645:main.c        **** }
 5598              		.loc 1 1645 0
 5599 0140 00BF     		nop
 5600 0142 80BD     		pop	{r7, pc}
 5601              	.L229:
 5602              		.align	2
 5603              	.L228:
 5604 0144 00000000 		.word	rx1Channel
 5605 0148 00000000 		.word	rx1TD
 5606 014c 00000000 		.word	rxBufferPluck
 5607 0150 1A000000 		.word	rxBufferPluck+26
 5608 0154 00000000 		.word	rx2Channel
 5609 0158 00000000 		.word	rx2TD
 5610 015c 00000000 		.word	rxBufferBar
 5611 0160 08000000 		.word	rxBufferBar+8
 5612 0164 00000000 		.word	rx3Channel
 5613 0168 00000000 		.word	rx3TD
 5614 016c 00000000 		.word	inBuffer
 5615              		.cfi_endproc
 5616              	.LFE78:
 5617              		.size	DmaRxConfiguration, .-DmaRxConfiguration
 5618              		.section	.text.I2C_MasterWriteBlocking,"ax",%progbits
 5619              		.align	2
 5620              		.global	I2C_MasterWriteBlocking
 5621              		.thumb
 5622              		.thumb_func
 5623              		.type	I2C_MasterWriteBlocking, %function
 5624              	I2C_MasterWriteBlocking:
 5625              	.LFB79:
1646:main.c        **** 
1647:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode)
1648:main.c        **** {
 5626              		.loc 1 1648 0
 5627              		.cfi_startproc
 5628              		@ args = 0, pretend = 0, frame = 16
 5629              		@ frame_needed = 1, uses_anonymous_args = 0
 5630 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 130


 5631              		.cfi_def_cfa_offset 8
 5632              		.cfi_offset 7, -8
 5633              		.cfi_offset 14, -4
 5634 0002 84B0     		sub	sp, sp, #16
 5635              		.cfi_def_cfa_offset 24
 5636 0004 00AF     		add	r7, sp, #0
 5637              		.cfi_def_cfa_register 7
 5638 0006 0346     		mov	r3, r0
 5639 0008 FB71     		strb	r3, [r7, #7]
 5640 000a 0B46     		mov	r3, r1	@ movhi
 5641 000c BB80     		strh	r3, [r7, #4]	@ movhi
 5642 000e 1346     		mov	r3, r2
 5643 0010 BB71     		strb	r3, [r7, #6]
1649:main.c        ****     uint8 volatile status;
1650:main.c        ****     uint32_t timeout = 50000;
 5644              		.loc 1 1650 0
 5645 0012 4CF25033 		movw	r3, #50000
 5646 0016 FB60     		str	r3, [r7, #12]
1651:main.c        ****     status = I2C_1_MasterClearStatus();
 5647              		.loc 1 1651 0
 5648 0018 FFF7FEFF 		bl	I2C_1_MasterClearStatus
 5649 001c 0346     		mov	r3, r0
 5650 001e FB72     		strb	r3, [r7, #11]
1652:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 5651              		.loc 1 1652 0
 5652 0020 FB7A     		ldrb	r3, [r7, #11]
 5653 0022 DBB2     		uxtb	r3, r3
 5654 0024 5BB2     		sxtb	r3, r3
 5655 0026 002B     		cmp	r3, #0
 5656 0028 3ADB     		blt	.L231
1653:main.c        ****     {
1654:main.c        ****         status = I2C_1_MasterWriteBuf(i2CAddr, (uint8 *)&I2Cbuff1, nbytes,
 5657              		.loc 1 1654 0
 5658 002a BB88     		ldrh	r3, [r7, #4]	@ movhi
 5659 002c DAB2     		uxtb	r2, r3
 5660 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5661 0030 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 5662 0032 2849     		ldr	r1, .L240
 5663 0034 FFF7FEFF 		bl	I2C_1_MasterWriteBuf
 5664 0038 0346     		mov	r3, r0
 5665 003a FB72     		strb	r3, [r7, #11]
1655:main.c        ****                                      mode);
1656:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
 5666              		.loc 1 1656 0
 5667 003c FB7A     		ldrb	r3, [r7, #11]
 5668 003e DBB2     		uxtb	r3, r3
 5669 0040 002B     		cmp	r3, #0
 5670 0042 29D1     		bne	.L232
 5671              	.L236:
1657:main.c        ****         {
1658:main.c        ****             /* wait for write complete and no error */
1659:main.c        ****             do
1660:main.c        ****             {
1661:main.c        ****                 status = I2C_1_MasterStatus();
 5672              		.loc 1 1661 0
 5673 0044 FFF7FEFF 		bl	I2C_1_MasterStatus
 5674 0048 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 131


 5675 004a FB72     		strb	r3, [r7, #11]
1662:main.c        ****                 timeout--;
 5676              		.loc 1 1662 0
 5677 004c FB68     		ldr	r3, [r7, #12]
 5678 004e 013B     		subs	r3, r3, #1
 5679 0050 FB60     		str	r3, [r7, #12]
1663:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 5680              		.loc 1 1663 0
 5681 0052 FB7A     		ldrb	r3, [r7, #11]
 5682 0054 DBB2     		uxtb	r3, r3
 5683 0056 802B     		cmp	r3, #128
 5684 0058 01D1     		bne	.L233
1664:main.c        ****                 {
1665:main.c        ****                     I2C_reset();
 5685              		.loc 1 1665 0
 5686 005a FFF7FEFF 		bl	I2C_reset
 5687              	.L233:
1666:main.c        ****                 }
1667:main.c        ****                 if (timeout == 0)
 5688              		.loc 1 1667 0
 5689 005e FB68     		ldr	r3, [r7, #12]
 5690 0060 002B     		cmp	r3, #0
 5691 0062 03D1     		bne	.L234
1668:main.c        ****                 {
1669:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 5692              		.loc 1 1669 0
 5693 0064 8023     		movs	r3, #128
 5694 0066 FB72     		strb	r3, [r7, #11]
1670:main.c        ****                     I2C_reset();
 5695              		.loc 1 1670 0
 5696 0068 FFF7FEFF 		bl	I2C_reset
 5697              	.L234:
1671:main.c        ****                 }
1672:main.c        ****                 
1673:main.c        ****                 if (status == 0)
 5698              		.loc 1 1673 0
 5699 006c FB7A     		ldrb	r3, [r7, #11]
 5700 006e DBB2     		uxtb	r3, r3
 5701 0070 002B     		cmp	r3, #0
 5702 0072 03D1     		bne	.L235
1674:main.c        ****                 {
1675:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 5703              		.loc 1 1675 0
 5704 0074 8023     		movs	r3, #128
 5705 0076 FB72     		strb	r3, [r7, #11]
1676:main.c        ****                     I2C_reset();
 5706              		.loc 1 1676 0
 5707 0078 FFF7FEFF 		bl	I2C_reset
 5708              	.L235:
1677:main.c        ****                 }
1678:main.c        ****                 
1679:main.c        ****             } while(((status & (I2C_1_MSTAT_WR_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 5709              		.loc 1 1679 0
 5710 007c FB7A     		ldrb	r3, [r7, #11]
 5711 007e DBB2     		uxtb	r3, r3
 5712 0080 03F08203 		and	r3, r3, #130
 5713 0084 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 132


 5714 0086 0BD1     		bne	.L231
 5715              		.loc 1 1679 0 is_stmt 0 discriminator 1
 5716 0088 FB7A     		ldrb	r3, [r7, #11]
 5717 008a DBB2     		uxtb	r3, r3
 5718 008c 002B     		cmp	r3, #0
 5719 008e 07D0     		beq	.L231
 5720              		.loc 1 1679 0 discriminator 2
 5721 0090 FB68     		ldr	r3, [r7, #12]
 5722 0092 002B     		cmp	r3, #0
 5723 0094 D6D1     		bne	.L236
 5724 0096 03E0     		b	.L231
 5725              	.L232:
1680:main.c        ****         }
1681:main.c        ****         else
1682:main.c        ****         {
1683:main.c        ****             /* translate from I2CM_MasterWriteBuf() error output to
1684:main.c        ****             *  I2CM_MasterStatus() error output */
1685:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 5726              		.loc 1 1685 0 is_stmt 1
 5727 0098 8023     		movs	r3, #128
 5728 009a FB72     		strb	r3, [r7, #11]
1686:main.c        ****             I2C_reset();
 5729              		.loc 1 1686 0
 5730 009c FFF7FEFF 		bl	I2C_reset
 5731              	.L231:
1687:main.c        ****         } 
1688:main.c        ****     }  
1689:main.c        ****     if ((status & I2C_1_MSTAT_ERR_ADDR_NAK) || (status & I2C_1_MSTAT_ERR_XFER))
 5732              		.loc 1 1689 0
 5733 00a0 FB7A     		ldrb	r3, [r7, #11]
 5734 00a2 DBB2     		uxtb	r3, r3
 5735 00a4 03F02003 		and	r3, r3, #32
 5736 00a8 002B     		cmp	r3, #0
 5737 00aa 04D1     		bne	.L237
 5738              		.loc 1 1689 0 is_stmt 0 discriminator 1
 5739 00ac FB7A     		ldrb	r3, [r7, #11]
 5740 00ae DBB2     		uxtb	r3, r3
 5741 00b0 5BB2     		sxtb	r3, r3
 5742 00b2 002B     		cmp	r3, #0
 5743 00b4 08DA     		bge	.L238
 5744              	.L237:
1690:main.c        ****     {
1691:main.c        ****         //mark that i2c destination to be skipped (likely unplugged) and reset the I2C module
1692:main.c        ****         i2c_skipped[main_counter] = 1;
 5745              		.loc 1 1692 0 is_stmt 1
 5746 00b6 084B     		ldr	r3, .L240+4
 5747 00b8 1B78     		ldrb	r3, [r3]
 5748 00ba DBB2     		uxtb	r3, r3
 5749 00bc 1A46     		mov	r2, r3
 5750 00be 074B     		ldr	r3, .L240+8
 5751 00c0 0121     		movs	r1, #1
 5752 00c2 9954     		strb	r1, [r3, r2]
1693:main.c        ****         I2C_reset();
 5753              		.loc 1 1693 0
 5754 00c4 FFF7FEFF 		bl	I2C_reset
 5755              	.L238:
1694:main.c        ****     }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 133


1695:main.c        ****     return status;
 5756              		.loc 1 1695 0
 5757 00c8 FB7A     		ldrb	r3, [r7, #11]
 5758 00ca DBB2     		uxtb	r3, r3
1696:main.c        **** }
 5759              		.loc 1 1696 0
 5760 00cc 1846     		mov	r0, r3
 5761 00ce 1037     		adds	r7, r7, #16
 5762              		.cfi_def_cfa_offset 8
 5763 00d0 BD46     		mov	sp, r7
 5764              		.cfi_def_cfa_register 13
 5765              		@ sp needed
 5766 00d2 80BD     		pop	{r7, pc}
 5767              	.L241:
 5768              		.align	2
 5769              	.L240:
 5770 00d4 00000000 		.word	I2Cbuff1
 5771 00d8 00000000 		.word	main_counter
 5772 00dc 00000000 		.word	i2c_skipped
 5773              		.cfi_endproc
 5774              	.LFE79:
 5775              		.size	I2C_MasterWriteBlocking, .-I2C_MasterWriteBlocking
 5776              		.section	.text.I2C_MasterReadBlocking,"ax",%progbits
 5777              		.align	2
 5778              		.global	I2C_MasterReadBlocking
 5779              		.thumb
 5780              		.thumb_func
 5781              		.type	I2C_MasterReadBlocking, %function
 5782              	I2C_MasterReadBlocking:
 5783              	.LFB80:
1697:main.c        **** 
1698:main.c        **** uint8 I2C_MasterReadBlocking(uint8 i2CAddr, uint8 nbytes, uint8_t mode)
1699:main.c        **** {
 5784              		.loc 1 1699 0
 5785              		.cfi_startproc
 5786              		@ args = 0, pretend = 0, frame = 16
 5787              		@ frame_needed = 1, uses_anonymous_args = 0
 5788 0000 80B5     		push	{r7, lr}
 5789              		.cfi_def_cfa_offset 8
 5790              		.cfi_offset 7, -8
 5791              		.cfi_offset 14, -4
 5792 0002 84B0     		sub	sp, sp, #16
 5793              		.cfi_def_cfa_offset 24
 5794 0004 00AF     		add	r7, sp, #0
 5795              		.cfi_def_cfa_register 7
 5796 0006 0346     		mov	r3, r0
 5797 0008 FB71     		strb	r3, [r7, #7]
 5798 000a 0B46     		mov	r3, r1
 5799 000c BB71     		strb	r3, [r7, #6]
 5800 000e 1346     		mov	r3, r2
 5801 0010 7B71     		strb	r3, [r7, #5]
1700:main.c        ****     uint8 volatile status;
1701:main.c        ****     uint32_t timeout = 50000;
 5802              		.loc 1 1701 0
 5803 0012 4CF25033 		movw	r3, #50000
 5804 0016 FB60     		str	r3, [r7, #12]
1702:main.c        ****     status = I2C_1_MasterClearStatus();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 134


 5805              		.loc 1 1702 0
 5806 0018 FFF7FEFF 		bl	I2C_1_MasterClearStatus
 5807 001c 0346     		mov	r3, r0
 5808 001e FB72     		strb	r3, [r7, #11]
1703:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 5809              		.loc 1 1703 0
 5810 0020 FB7A     		ldrb	r3, [r7, #11]
 5811 0022 DBB2     		uxtb	r3, r3
 5812 0024 5BB2     		sxtb	r3, r3
 5813 0026 002B     		cmp	r3, #0
 5814 0028 37DB     		blt	.L243
1704:main.c        ****     {
1705:main.c        ****         status = I2C_1_MasterReadBuf(i2CAddr,
 5815              		.loc 1 1705 0
 5816 002a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5817 002c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5818 002e F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 5819 0030 1D49     		ldr	r1, .L249
 5820 0032 FFF7FEFF 		bl	I2C_1_MasterReadBuf
 5821 0036 0346     		mov	r3, r0
 5822 0038 FB72     		strb	r3, [r7, #11]
1706:main.c        ****                                    (uint8 *)&(I2Cbuff2),
1707:main.c        ****                                     nbytes, mode); 
1708:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
 5823              		.loc 1 1708 0
 5824 003a FB7A     		ldrb	r3, [r7, #11]
 5825 003c DBB2     		uxtb	r3, r3
 5826 003e 002B     		cmp	r3, #0
 5827 0040 27D1     		bne	.L244
 5828              	.L247:
1709:main.c        ****         {
1710:main.c        ****             /* wait for read complete and no error */
1711:main.c        ****             do
1712:main.c        ****             {
1713:main.c        ****                 status = I2C_1_MasterStatus();
 5829              		.loc 1 1713 0
 5830 0042 FFF7FEFF 		bl	I2C_1_MasterStatus
 5831 0046 0346     		mov	r3, r0
 5832 0048 FB72     		strb	r3, [r7, #11]
1714:main.c        ****                 timeout--;
 5833              		.loc 1 1714 0
 5834 004a FB68     		ldr	r3, [r7, #12]
 5835 004c 013B     		subs	r3, r3, #1
 5836 004e FB60     		str	r3, [r7, #12]
1715:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 5837              		.loc 1 1715 0
 5838 0050 FB7A     		ldrb	r3, [r7, #11]
 5839 0052 DBB2     		uxtb	r3, r3
 5840 0054 802B     		cmp	r3, #128
 5841 0056 07D1     		bne	.L245
1716:main.c        ****                 {
1717:main.c        ****                     I2C_1_GENERATE_STOP_MANUAL;
 5842              		.loc 1 1717 0
 5843 0058 144B     		ldr	r3, .L249+4
 5844 005a 1022     		movs	r2, #16
 5845 005c 1A70     		strb	r2, [r3]
 5846 005e 144B     		ldr	r3, .L249+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 135


 5847 0060 0422     		movs	r2, #4
 5848 0062 1A70     		strb	r2, [r3]
1718:main.c        ****                     I2C_reset();
 5849              		.loc 1 1718 0
 5850 0064 FFF7FEFF 		bl	I2C_reset
 5851              	.L245:
1719:main.c        ****                 }
1720:main.c        ****                 if (timeout == 0)
 5852              		.loc 1 1720 0
 5853 0068 FB68     		ldr	r3, [r7, #12]
 5854 006a 002B     		cmp	r3, #0
 5855 006c 03D1     		bne	.L246
1721:main.c        ****                 {
1722:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 5856              		.loc 1 1722 0
 5857 006e 8023     		movs	r3, #128
 5858 0070 FB72     		strb	r3, [r7, #11]
1723:main.c        ****                     I2C_reset();
 5859              		.loc 1 1723 0
 5860 0072 FFF7FEFF 		bl	I2C_reset
 5861              	.L246:
1724:main.c        ****                 }
1725:main.c        ****             } while(((status & (I2C_1_MSTAT_RD_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 5862              		.loc 1 1725 0
 5863 0076 FB7A     		ldrb	r3, [r7, #11]
 5864 0078 DBB2     		uxtb	r3, r3
 5865 007a 03F08103 		and	r3, r3, #129
 5866 007e 002B     		cmp	r3, #0
 5867 0080 0BD1     		bne	.L243
 5868              		.loc 1 1725 0 is_stmt 0 discriminator 1
 5869 0082 FB7A     		ldrb	r3, [r7, #11]
 5870 0084 DBB2     		uxtb	r3, r3
 5871 0086 002B     		cmp	r3, #0
 5872 0088 07D0     		beq	.L243
 5873              		.loc 1 1725 0 discriminator 2
 5874 008a FB68     		ldr	r3, [r7, #12]
 5875 008c 002B     		cmp	r3, #0
 5876 008e D8D1     		bne	.L247
 5877 0090 03E0     		b	.L243
 5878              	.L244:
1726:main.c        ****         }
1727:main.c        ****         else
1728:main.c        ****         {
1729:main.c        ****             /* translate from I2CM_MasterReadBuf() error output to
1730:main.c        ****             *  I2CM_MasterStatus() error output */
1731:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 5879              		.loc 1 1731 0 is_stmt 1
 5880 0092 8023     		movs	r3, #128
 5881 0094 FB72     		strb	r3, [r7, #11]
1732:main.c        ****             I2C_reset();
 5882              		.loc 1 1732 0
 5883 0096 FFF7FEFF 		bl	I2C_reset
 5884              	.L243:
1733:main.c        ****         }
1734:main.c        ****     }
1735:main.c        ****     return status;
 5885              		.loc 1 1735 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 136


 5886 009a FB7A     		ldrb	r3, [r7, #11]
 5887 009c DBB2     		uxtb	r3, r3
1736:main.c        **** }
 5888              		.loc 1 1736 0
 5889 009e 1846     		mov	r0, r3
 5890 00a0 1037     		adds	r7, r7, #16
 5891              		.cfi_def_cfa_offset 8
 5892 00a2 BD46     		mov	sp, r7
 5893              		.cfi_def_cfa_register 13
 5894              		@ sp needed
 5895 00a4 80BD     		pop	{r7, pc}
 5896              	.L250:
 5897 00a6 00BF     		.align	2
 5898              	.L249:
 5899 00a8 00000000 		.word	I2Cbuff2
 5900 00ac D9490040 		.word	1073760729
 5901 00b0 D7490040 		.word	1073760727
 5902              		.cfi_endproc
 5903              	.LFE80:
 5904              		.size	I2C_MasterReadBlocking, .-I2C_MasterReadBlocking
 5905              		.section	.text.I2C_reset,"ax",%progbits
 5906              		.align	2
 5907              		.global	I2C_reset
 5908              		.thumb
 5909              		.thumb_func
 5910              		.type	I2C_reset, %function
 5911              	I2C_reset:
 5912              	.LFB81:
1737:main.c        **** 
1738:main.c        **** void I2C_reset(void)
1739:main.c        **** {
 5913              		.loc 1 1739 0
 5914              		.cfi_startproc
 5915              		@ args = 0, pretend = 0, frame = 0
 5916              		@ frame_needed = 1, uses_anonymous_args = 0
 5917 0000 80B5     		push	{r7, lr}
 5918              		.cfi_def_cfa_offset 8
 5919              		.cfi_offset 7, -8
 5920              		.cfi_offset 14, -4
 5921 0002 00AF     		add	r7, sp, #0
 5922              		.cfi_def_cfa_register 7
1740:main.c        ****   I2C_1_Stop();
 5923              		.loc 1 1740 0
 5924 0004 FFF7FEFF 		bl	I2C_1_Stop
1741:main.c        **** 
1742:main.c        ****   /* Disable/clear everything, then reinitialize. */
1743:main.c        **** 
1744:main.c        ****   I2C_1_CFG_REG = 0x00;  // NECESSARY to get MCSR to reset and clear BUS_BUSY bit.
 5925              		.loc 1 1744 0
 5926 0008 064B     		ldr	r3, .L252
 5927 000a 0022     		movs	r2, #0
 5928 000c 1A70     		strb	r2, [r3]
1745:main.c        **** 
1746:main.c        ****   I2C_1_XCFG_REG = 0x00;  // not sure if necessary.
 5929              		.loc 1 1746 0
 5930 000e 064B     		ldr	r3, .L252+4
 5931 0010 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 137


 5932 0012 1A70     		strb	r2, [r3]
1747:main.c        **** 
1748:main.c        ****   I2C_1_initVar = 0;  // MUST BE SET TO ZERO to allow I2C_1_Start() to call I2C_1_Init()
 5933              		.loc 1 1748 0
 5934 0014 054B     		ldr	r3, .L252+8
 5935 0016 0022     		movs	r2, #0
 5936 0018 1A70     		strb	r2, [r3]
1749:main.c        **** 
1750:main.c        ****   I2C_1_Start();
 5937              		.loc 1 1750 0
 5938 001a FFF7FEFF 		bl	I2C_1_Start
1751:main.c        **** }
 5939              		.loc 1 1751 0
 5940 001e 00BF     		nop
 5941 0020 80BD     		pop	{r7, pc}
 5942              	.L253:
 5943 0022 00BF     		.align	2
 5944              	.L252:
 5945 0024 D6490040 		.word	1073760726
 5946 0028 C8490040 		.word	1073760712
 5947 002c 00000000 		.word	I2C_1_initVar
 5948              		.cfi_endproc
 5949              	.LFE81:
 5950              		.size	I2C_reset, .-I2C_reset
 5951              		.section	.text.displayCurrentPresetName,"ax",%progbits
 5952              		.align	2
 5953              		.global	displayCurrentPresetName
 5954              		.thumb
 5955              		.thumb_func
 5956              		.type	displayCurrentPresetName, %function
 5957              	displayCurrentPresetName:
 5958              	.LFB82:
1752:main.c        **** 
1753:main.c        **** void displayCurrentPresetName()
1754:main.c        **** {
 5959              		.loc 1 1754 0
 5960              		.cfi_startproc
 5961              		@ args = 0, pretend = 0, frame = 0
 5962              		@ frame_needed = 1, uses_anonymous_args = 0
 5963 0000 80B5     		push	{r7, lr}
 5964              		.cfi_def_cfa_offset 8
 5965              		.cfi_offset 7, -8
 5966              		.cfi_offset 14, -4
 5967 0002 00AF     		add	r7, sp, #0
 5968              		.cfi_def_cfa_register 7
1755:main.c        ****     if (presetNamesArray[patchNum][0] != 255) //don't display if the name data still hasn't been re
 5969              		.loc 1 1755 0
 5970 0004 184B     		ldr	r3, .L257
 5971 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5972 0008 1946     		mov	r1, r3
 5973 000a 184A     		ldr	r2, .L257+4
 5974 000c 0B46     		mov	r3, r1
 5975 000e DB00     		lsls	r3, r3, #3
 5976 0010 5B1A     		subs	r3, r3, r1
 5977 0012 5B00     		lsls	r3, r3, #1
 5978 0014 1344     		add	r3, r3, r2
 5979 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 138


 5980 0018 FF2B     		cmp	r3, #255
 5981 001a 22D0     		beq	.L256
1756:main.c        ****     {
1757:main.c        ****         OLEDwriteInt(patchNum , 2, 0,FirstLine);
 5982              		.loc 1 1757 0
 5983 001c 124B     		ldr	r3, .L257
 5984 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5985 0020 1846     		mov	r0, r3
 5986 0022 0023     		movs	r3, #0
 5987 0024 0022     		movs	r2, #0
 5988 0026 0221     		movs	r1, #2
 5989 0028 FFF7FEFF 		bl	OLEDwriteInt
1758:main.c        ****         //OLEDwriteString(" ", 1, OLEDgetCursor(), FirstLine);
1759:main.c        ****         OLEDwriteString((char *)&presetNamesArray[patchNum][0], NAME_LENGTH_IN_BYTES, 0, SecondLine
 5990              		.loc 1 1759 0
 5991 002c 0E4B     		ldr	r3, .L257
 5992 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5993 0030 1A46     		mov	r2, r3
 5994 0032 1346     		mov	r3, r2
 5995 0034 DB00     		lsls	r3, r3, #3
 5996 0036 9B1A     		subs	r3, r3, r2
 5997 0038 5B00     		lsls	r3, r3, #1
 5998 003a 0C4A     		ldr	r2, .L257+4
 5999 003c 9818     		adds	r0, r3, r2
 6000 003e 0123     		movs	r3, #1
 6001 0040 0022     		movs	r2, #0
 6002 0042 0E21     		movs	r1, #14
 6003 0044 FFF7FEFF 		bl	OLEDwriteString
1760:main.c        ****         mainOLEDWaitingToSend = 1;
 6004              		.loc 1 1760 0
 6005 0048 094B     		ldr	r3, .L257+8
 6006 004a 0122     		movs	r2, #1
 6007 004c 1A60     		str	r2, [r3]
1761:main.c        ****         presetAlreadyDisplayed[patchNum] = 1;
 6008              		.loc 1 1761 0
 6009 004e 064B     		ldr	r3, .L257
 6010 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6011 0052 1946     		mov	r1, r3
 6012 0054 074B     		ldr	r3, .L257+12
 6013 0056 0122     		movs	r2, #1
 6014 0058 43F82120 		str	r2, [r3, r1, lsl #2]
1762:main.c        ****         //and update the macro OLED screens
1763:main.c        ****         macroOLEDWaitingToSend = 1;
 6015              		.loc 1 1763 0
 6016 005c 064B     		ldr	r3, .L257+16
 6017 005e 0122     		movs	r2, #1
 6018 0060 1A60     		str	r2, [r3]
 6019              	.L256:
1764:main.c        ****     }
1765:main.c        **** }
 6020              		.loc 1 1765 0
 6021 0062 00BF     		nop
 6022 0064 80BD     		pop	{r7, pc}
 6023              	.L258:
 6024 0066 00BF     		.align	2
 6025              	.L257:
 6026 0068 00000000 		.word	patchNum
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 139


 6027 006c 00000000 		.word	presetNamesArray
 6028 0070 00000000 		.word	mainOLEDWaitingToSend
 6029 0074 00000000 		.word	presetAlreadyDisplayed
 6030 0078 00000000 		.word	macroOLEDWaitingToSend
 6031              		.cfi_endproc
 6032              	.LFE82:
 6033              		.size	displayCurrentPresetName, .-displayCurrentPresetName
 6034              		.section	.text.checkUSB_Vbus,"ax",%progbits
 6035              		.align	2
 6036              		.global	checkUSB_Vbus
 6037              		.thumb
 6038              		.thumb_func
 6039              		.type	checkUSB_Vbus, %function
 6040              	checkUSB_Vbus:
 6041              	.LFB83:
1766:main.c        ****     
1767:main.c        **** void checkUSB_Vbus(void)
1768:main.c        **** {
 6042              		.loc 1 1768 0
 6043              		.cfi_startproc
 6044              		@ args = 0, pretend = 0, frame = 0
 6045              		@ frame_needed = 1, uses_anonymous_args = 0
 6046 0000 80B5     		push	{r7, lr}
 6047              		.cfi_def_cfa_offset 8
 6048              		.cfi_offset 7, -8
 6049              		.cfi_offset 14, -4
 6050 0002 00AF     		add	r7, sp, #0
 6051              		.cfi_def_cfa_register 7
1769:main.c        ****    if (USB_VBusPresent() == 0)
 6052              		.loc 1 1769 0
 6053 0004 FFF7FEFF 		bl	USB_VBusPresent
 6054 0008 0346     		mov	r3, r0
 6055 000a 002B     		cmp	r3, #0
 6056 000c 05D1     		bne	.L260
1770:main.c        ****    {
1771:main.c        ****        USB_Stop();
 6057              		.loc 1 1771 0
 6058 000e FFF7FEFF 		bl	USB_Stop
1772:main.c        ****        USB_active = 0; 
 6059              		.loc 1 1772 0
 6060 0012 0E4B     		ldr	r3, .L263
 6061 0014 0022     		movs	r2, #0
 6062 0016 1A70     		strb	r2, [r3]
 6063 0018 13E0     		b	.L261
 6064              	.L260:
1773:main.c        ****    }
1774:main.c        ****    else if (USB_active == 0 )
 6065              		.loc 1 1774 0
 6066 001a 0C4B     		ldr	r3, .L263
 6067 001c 1B78     		ldrb	r3, [r3]
 6068 001e DBB2     		uxtb	r3, r3
 6069 0020 002B     		cmp	r3, #0
 6070 0022 0ED1     		bne	.L261
1775:main.c        ****    {
1776:main.c        ****        USB_Start(0u, USB_3V_OPERATION ); 
 6071              		.loc 1 1776 0
 6072 0024 0021     		movs	r1, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 140


 6073 0026 0020     		movs	r0, #0
 6074 0028 FFF7FEFF 		bl	USB_Start
1777:main.c        ****         while (0u == USB_GetConfiguration());
 6075              		.loc 1 1777 0
 6076 002c 00BF     		nop
 6077              	.L262:
 6078              		.loc 1 1777 0 is_stmt 0 discriminator 1
 6079 002e FFF7FEFF 		bl	USB_GetConfiguration
 6080 0032 0346     		mov	r3, r0
 6081 0034 002B     		cmp	r3, #0
 6082 0036 FAD0     		beq	.L262
1778:main.c        ****         USB_MIDI_EP_Init();
 6083              		.loc 1 1778 0 is_stmt 1
 6084 0038 FFF7FEFF 		bl	USB_MIDI_Init
1779:main.c        ****        USB_active = 1;
 6085              		.loc 1 1779 0
 6086 003c 034B     		ldr	r3, .L263
 6087 003e 0122     		movs	r2, #1
 6088 0040 1A70     		strb	r2, [r3]
 6089              	.L261:
1780:main.c        ****    }
1781:main.c        ****    USB_check_flag = 0;
 6090              		.loc 1 1781 0
 6091 0042 034B     		ldr	r3, .L263+4
 6092 0044 0022     		movs	r2, #0
 6093 0046 1A70     		strb	r2, [r3]
1782:main.c        **** }
 6094              		.loc 1 1782 0
 6095 0048 00BF     		nop
 6096 004a 80BD     		pop	{r7, pc}
 6097              	.L264:
 6098              		.align	2
 6099              	.L263:
 6100 004c 00000000 		.word	USB_active
 6101 0050 00000000 		.word	USB_check_flag
 6102              		.cfi_endproc
 6103              	.LFE83:
 6104              		.size	checkUSB_Vbus, .-checkUSB_Vbus
 6105              		.section	.text.USB_service,"ax",%progbits
 6106              		.align	2
 6107              		.global	USB_service
 6108              		.thumb
 6109              		.thumb_func
 6110              		.type	USB_service, %function
 6111              	USB_service:
 6112              	.LFB84:
1783:main.c        **** 
1784:main.c        **** 
1785:main.c        **** 
1786:main.c        **** void USB_service(void)
1787:main.c        **** {
 6113              		.loc 1 1787 0
 6114              		.cfi_startproc
 6115              		@ args = 0, pretend = 0, frame = 0
 6116              		@ frame_needed = 1, uses_anonymous_args = 0
 6117 0000 80B5     		push	{r7, lr}
 6118              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 141


 6119              		.cfi_offset 7, -8
 6120              		.cfi_offset 14, -4
 6121 0002 00AF     		add	r7, sp, #0
 6122              		.cfi_def_cfa_register 7
1788:main.c        ****     if(USB_IsConfigurationChanged() != 0u)
 6123              		.loc 1 1788 0
 6124 0004 FFF7FEFF 		bl	USB_IsConfigurationChanged
 6125 0008 0346     		mov	r3, r0
 6126 000a 002B     		cmp	r3, #0
 6127 000c 10D0     		beq	.L266
1789:main.c        ****     {
1790:main.c        ****         if(USB_GetConfiguration() != 0u)   
 6128              		.loc 1 1790 0
 6129 000e FFF7FEFF 		bl	USB_GetConfiguration
 6130 0012 0346     		mov	r3, r0
 6131 0014 002B     		cmp	r3, #0
 6132 0016 0BD0     		beq	.L266
1791:main.c        ****         {
1792:main.c        ****            // Sleep_isr_StartEx(SleepIsr_function);
1793:main.c        ****             
1794:main.c        ****             //SleepTimer_Start();
1795:main.c        ****         	
1796:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 6133              		.loc 1 1796 0
 6134 0018 244B     		ldr	r3, .L272
 6135 001a 1B78     		ldrb	r3, [r3]
 6136 001c DBB2     		uxtb	r3, r3
 6137 001e 002B     		cmp	r3, #0
 6138 0020 06D0     		beq	.L266
 6139              		.loc 1 1796 0 is_stmt 0 discriminator 1
 6140 0022 FFF7FEFF 		bl	USB_VBusPresent
 6141 0026 0346     		mov	r3, r0
 6142 0028 002B     		cmp	r3, #0
 6143 002a 01D0     		beq	.L266
1797:main.c        ****             {
1798:main.c        ****                 USB_MIDI_EP_Init();
 6144              		.loc 1 1798 0 is_stmt 1
 6145 002c FFF7FEFF 		bl	USB_MIDI_Init
 6146              	.L266:
1799:main.c        ****             }
1800:main.c        ****         }
1801:main.c        ****         else
1802:main.c        ****         {
1803:main.c        ****             //SleepTimer_Stop();
1804:main.c        ****         }    
1805:main.c        ****     }        
1806:main.c        ****     
1807:main.c        ****     if(USB_GetConfiguration() != 0u)    
 6147              		.loc 1 1807 0
 6148 0030 FFF7FEFF 		bl	USB_GetConfiguration
 6149 0034 0346     		mov	r3, r0
 6150 0036 002B     		cmp	r3, #0
 6151 0038 35D0     		beq	.L271
1808:main.c        ****     {
1809:main.c        **** 
1810:main.c        ****          /* Reinitialize after SET_CONFIGURATION or SET_INTERFACE Requests */
1811:main.c        ****         if(USB_IsConfigurationChanged() != 0x00)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 142


 6152              		.loc 1 1811 0
 6153 003a FFF7FEFF 		bl	USB_IsConfigurationChanged
 6154 003e 0346     		mov	r3, r0
 6155 0040 002B     		cmp	r3, #0
 6156 0042 18D0     		beq	.L269
1812:main.c        ****         {
1813:main.c        ****             USB_LoadInEP(USB_midi_in_ep, USB_midiInBuffer,(uint16) USB_midiInPointer);
 6157              		.loc 1 1813 0
 6158 0044 1A4B     		ldr	r3, .L272+4
 6159 0046 1B78     		ldrb	r3, [r3]
 6160 0048 D8B2     		uxtb	r0, r3
 6161 004a 1A4B     		ldr	r3, .L272+8
 6162 004c 1B78     		ldrb	r3, [r3]
 6163 004e DBB2     		uxtb	r3, r3
 6164 0050 9BB2     		uxth	r3, r3
 6165 0052 1A46     		mov	r2, r3
 6166 0054 1849     		ldr	r1, .L272+12
 6167 0056 FFF7FEFF 		bl	USB_LoadInEP
1814:main.c        ****             //USB_LoadInEP(USB_midi_in_ep, USB_midiInBuffer, 64);
1815:main.c        ****             USB_ReadOutEP(USB_midi_out_ep,USB_midiOutBuffer, 64);
 6168              		.loc 1 1815 0
 6169 005a 184B     		ldr	r3, .L272+16
 6170 005c 1B78     		ldrb	r3, [r3]
 6171 005e DBB2     		uxtb	r3, r3
 6172 0060 4022     		movs	r2, #64
 6173 0062 1749     		ldr	r1, .L272+20
 6174 0064 1846     		mov	r0, r3
 6175 0066 FFF7FEFF 		bl	USB_ReadOutEP
1816:main.c        ****                                              /* configuring the DMAs for the first time only, the d
1817:main.c        ****                                              in the EP buffer is Transferred by DMA to the buffer a
1818:main.c        ****             USB_EnableOutEP(USB_midi_out_ep);       /* Note 3.*/
 6176              		.loc 1 1818 0
 6177 006a 144B     		ldr	r3, .L272+16
 6178 006c 1B78     		ldrb	r3, [r3]
 6179 006e DBB2     		uxtb	r3, r3
 6180 0070 1846     		mov	r0, r3
 6181 0072 FFF7FEFF 		bl	USB_EnableOutEP
 6182              	.L269:
1819:main.c        ****         }
1820:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 6183              		.loc 1 1820 0
 6184 0076 0D4B     		ldr	r3, .L272
 6185 0078 1B78     		ldrb	r3, [r3]
 6186 007a DBB2     		uxtb	r3, r3
 6187 007c 002B     		cmp	r3, #0
 6188 007e 06D0     		beq	.L270
 6189              		.loc 1 1820 0 is_stmt 0 discriminator 1
 6190 0080 FFF7FEFF 		bl	USB_VBusPresent
 6191 0084 0346     		mov	r3, r0
 6192 0086 002B     		cmp	r3, #0
 6193 0088 01D0     		beq	.L270
1821:main.c        ****         {
1822:main.c        ****             USB_MIDI_IN_Service();
 6194              		.loc 1 1822 0 is_stmt 1
 6195 008a FFF7FEFF 		bl	USB_MIDI_IN_Service
 6196              	.L270:
1823:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 143


1824:main.c        **** 
1825:main.c        **** 
1826:main.c        **** 
1827:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 6197              		.loc 1 1827 0
 6198 008e 074B     		ldr	r3, .L272
 6199 0090 1B78     		ldrb	r3, [r3]
 6200 0092 DBB2     		uxtb	r3, r3
 6201 0094 002B     		cmp	r3, #0
 6202 0096 06D0     		beq	.L271
 6203              		.loc 1 1827 0 is_stmt 0 discriminator 1
 6204 0098 FFF7FEFF 		bl	USB_VBusPresent
 6205 009c 0346     		mov	r3, r0
 6206 009e 002B     		cmp	r3, #0
 6207 00a0 01D0     		beq	.L271
1828:main.c        ****         {
1829:main.c        ****             USB_MIDI_OUT_Service();
 6208              		.loc 1 1829 0 is_stmt 1
 6209 00a2 FFF7FEFF 		bl	USB_MIDI_OUT_Service
 6210              	.L271:
1830:main.c        ****         }
1831:main.c        ****     }
1832:main.c        ****         
1833:main.c        **** }
 6211              		.loc 1 1833 0
 6212 00a6 00BF     		nop
 6213 00a8 80BD     		pop	{r7, pc}
 6214              	.L273:
 6215 00aa 00BF     		.align	2
 6216              	.L272:
 6217 00ac 00000000 		.word	USB_active
 6218 00b0 00000000 		.word	USB_midi_in_ep
 6219 00b4 00000000 		.word	USB_midiInPointer
 6220 00b8 00000000 		.word	USB_midiInBuffer
 6221 00bc 00000000 		.word	USB_midi_out_ep
 6222 00c0 00000000 		.word	USB_midiOutBuffer
 6223              		.cfi_endproc
 6224              	.LFE84:
 6225              		.size	USB_service, .-USB_service
 6226              		.section	.text.log2f_approx,"ax",%progbits
 6227              		.align	2
 6228              		.global	log2f_approx
 6229              		.thumb
 6230              		.thumb_func
 6231              		.type	log2f_approx, %function
 6232              	log2f_approx:
 6233              	.LFB85:
1834:main.c        **** 
1835:main.c        **** // This is a fast approximation to log2()
1836:main.c        **** // Y = C[0]*F*F*F + C[1]*F*F + C[2]*F + C[3] + E;
1837:main.c        **** float log2f_approx(float X) {
 6234              		.loc 1 1837 0
 6235              		.cfi_startproc
 6236              		@ args = 0, pretend = 0, frame = 24
 6237              		@ frame_needed = 1, uses_anonymous_args = 0
 6238 0000 80B5     		push	{r7, lr}
 6239              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 144


 6240              		.cfi_offset 7, -8
 6241              		.cfi_offset 14, -4
 6242 0002 86B0     		sub	sp, sp, #24
 6243              		.cfi_def_cfa_offset 32
 6244 0004 00AF     		add	r7, sp, #0
 6245              		.cfi_def_cfa_register 7
 6246 0006 7860     		str	r0, [r7, #4]	@ float
1838:main.c        ****   float Y, F;
1839:main.c        ****   int E;
1840:main.c        ****   F = frexpf(fabsf(X), &E);
 6247              		.loc 1 1840 0
 6248 0008 7B68     		ldr	r3, [r7, #4]
 6249 000a 23F00043 		bic	r3, r3, #-2147483648
 6250 000e 07F10C02 		add	r2, r7, #12
 6251 0012 1146     		mov	r1, r2
 6252 0014 1846     		mov	r0, r3
 6253 0016 FFF7FEFF 		bl	frexpf
 6254 001a 7861     		str	r0, [r7, #20]	@ float
1841:main.c        ****   Y = 1.23149591368684f;
 6255              		.loc 1 1841 0
 6256 001c 1A4B     		ldr	r3, .L276
 6257 001e 3B61     		str	r3, [r7, #16]	@ float
1842:main.c        ****   Y *= F;
 6258              		.loc 1 1842 0
 6259 0020 7969     		ldr	r1, [r7, #20]	@ float
 6260 0022 3869     		ldr	r0, [r7, #16]	@ float
 6261 0024 FFF7FEFF 		bl	__aeabi_fmul
 6262 0028 0346     		mov	r3, r0
 6263 002a 3B61     		str	r3, [r7, #16]	@ float
1843:main.c        ****   Y += -4.11852516267426f;
 6264              		.loc 1 1843 0
 6265 002c 1749     		ldr	r1, .L276+4
 6266 002e 3869     		ldr	r0, [r7, #16]	@ float
 6267 0030 FFF7FEFF 		bl	__aeabi_fsub
 6268 0034 0346     		mov	r3, r0
 6269 0036 3B61     		str	r3, [r7, #16]	@ float
1844:main.c        ****   Y *= F;
 6270              		.loc 1 1844 0
 6271 0038 7969     		ldr	r1, [r7, #20]	@ float
 6272 003a 3869     		ldr	r0, [r7, #16]	@ float
 6273 003c FFF7FEFF 		bl	__aeabi_fmul
 6274 0040 0346     		mov	r3, r0
 6275 0042 3B61     		str	r3, [r7, #16]	@ float
1845:main.c        ****   Y += 6.02197014179219f;
 6276              		.loc 1 1845 0
 6277 0044 1249     		ldr	r1, .L276+8
 6278 0046 3869     		ldr	r0, [r7, #16]	@ float
 6279 0048 FFF7FEFF 		bl	__aeabi_fadd
 6280 004c 0346     		mov	r3, r0
 6281 004e 3B61     		str	r3, [r7, #16]	@ float
1846:main.c        ****   Y *= F;
 6282              		.loc 1 1846 0
 6283 0050 7969     		ldr	r1, [r7, #20]	@ float
 6284 0052 3869     		ldr	r0, [r7, #16]	@ float
 6285 0054 FFF7FEFF 		bl	__aeabi_fmul
 6286 0058 0346     		mov	r3, r0
 6287 005a 3B61     		str	r3, [r7, #16]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 145


1847:main.c        ****   Y += -3.13396450166353f;
 6288              		.loc 1 1847 0
 6289 005c 0D49     		ldr	r1, .L276+12
 6290 005e 3869     		ldr	r0, [r7, #16]	@ float
 6291 0060 FFF7FEFF 		bl	__aeabi_fsub
 6292 0064 0346     		mov	r3, r0
 6293 0066 3B61     		str	r3, [r7, #16]	@ float
1848:main.c        ****   Y += E;
 6294              		.loc 1 1848 0
 6295 0068 FB68     		ldr	r3, [r7, #12]
 6296 006a 1846     		mov	r0, r3
 6297 006c FFF7FEFF 		bl	__aeabi_i2f
 6298 0070 0346     		mov	r3, r0
 6299 0072 1946     		mov	r1, r3
 6300 0074 3869     		ldr	r0, [r7, #16]	@ float
 6301 0076 FFF7FEFF 		bl	__aeabi_fadd
 6302 007a 0346     		mov	r3, r0
 6303 007c 3B61     		str	r3, [r7, #16]	@ float
1849:main.c        ****   return(Y);
 6304              		.loc 1 1849 0
 6305 007e 3B69     		ldr	r3, [r7, #16]	@ float
1850:main.c        **** }
 6306              		.loc 1 1850 0
 6307 0080 1846     		mov	r0, r3
 6308 0082 1837     		adds	r7, r7, #24
 6309              		.cfi_def_cfa_offset 8
 6310 0084 BD46     		mov	sp, r7
 6311              		.cfi_def_cfa_register 13
 6312              		@ sp needed
 6313 0086 80BD     		pop	{r7, pc}
 6314              	.L277:
 6315              		.align	2
 6316              	.L276:
 6317 0088 A8A19D3F 		.word	1067295144
 6318 008c F5CA8340 		.word	1082378997
 6319 0090 FBB3C040 		.word	1086370811
 6320 0094 E0924840 		.word	1078498016
 6321              		.cfi_endproc
 6322              	.LFE85:
 6323              		.size	log2f_approx, .-log2f_approx
 6324              		.global	prevNotes
 6325              		.bss
 6326              		.align	2
 6327              		.type	prevNotes, %object
 6328              		.size	prevNotes, 48
 6329              	prevNotes:
 6330 00c8 00000000 		.space	48
 6330      00000000 
 6330      00000000 
 6330      00000000 
 6330      00000000 
 6331              		.section	.text.noteEvent,"ax",%progbits
 6332              		.align	2
 6333              		.global	noteEvent
 6334              		.thumb
 6335              		.thumb_func
 6336              		.type	noteEvent, %function
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 146


 6337              	noteEvent:
 6338              	.LFB86:
1851:main.c        **** 
1852:main.c        **** //log10f is exactly log2(x)/log2(10.0f)
1853:main.c        **** #define log10f_fast(x)  (log2f_approx(x)*0.3010299956639812f)
1854:main.c        **** 
1855:main.c        **** int prevNotes[NUM_STRINGS] = {0,0,0,0,0,0,0,0,0,0,0,0};
1856:main.c        **** 
1857:main.c        **** void noteEvent(int string)
1858:main.c        **** {
 6339              		.loc 1 1858 0
 6340              		.cfi_startproc
 6341              		@ args = 0, pretend = 0, frame = 24
 6342              		@ frame_needed = 1, uses_anonymous_args = 0
 6343 0000 80B5     		push	{r7, lr}
 6344              		.cfi_def_cfa_offset 8
 6345              		.cfi_offset 7, -8
 6346              		.cfi_offset 14, -4
 6347 0002 86B0     		sub	sp, sp, #24
 6348              		.cfi_def_cfa_offset 32
 6349 0004 00AF     		add	r7, sp, #0
 6350              		.cfi_def_cfa_register 7
 6351 0006 7860     		str	r0, [r7, #4]
1859:main.c        ****     
1860:main.c        ****     /*
1861:main.c        ****     float tempAmp = strings[string] * 1.5259021896696421759365224689097e-5f;//divide by 65535
1862:main.c        ****     float v = 127.0f + (64.0f * log10f_fast(tempAmp));
1863:main.c        ****     int vInt  = (int) (v*4.0f);
1864:main.c        ****     if (vInt > 127)
1865:main.c        ****     {
1866:main.c        ****         vInt = 127;
1867:main.c        ****     }
1868:main.c        ****     */
1869:main.c        ****     uint16_t velocity = strings[string];
 6352              		.loc 1 1869 0
 6353 0008 2C4A     		ldr	r2, .L283
 6354 000a 7B68     		ldr	r3, [r7, #4]
 6355 000c 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 6356 0010 FB82     		strh	r3, [r7, #22]	@ movhi
1870:main.c        ****     if (velocity > 0)
 6357              		.loc 1 1870 0
 6358 0012 FB8A     		ldrh	r3, [r7, #22]
 6359 0014 002B     		cmp	r3, #0
 6360 0016 43D0     		beq	.L279
 6361              	.LBB32:
1871:main.c        ****     {
1872:main.c        ****         //velocity = (((sqrtf((float)velocity) * 0.00001525878903f) - .0239372430f) * 130.114584436
1873:main.c        ****         float tempVel = (float)velocity;
 6362              		.loc 1 1873 0
 6363 0018 FB8A     		ldrh	r3, [r7, #22]
 6364 001a 1846     		mov	r0, r3
 6365 001c FFF7FEFF 		bl	__aeabi_ui2f
 6366 0020 0346     		mov	r3, r0
 6367 0022 3B61     		str	r3, [r7, #16]	@ float
1874:main.c        ****         tempVel = tempVel * 0.00001525878903f;
 6368              		.loc 1 1874 0
 6369 0024 4FF05E51 		mov	r1, #931135488
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 147


 6370 0028 3869     		ldr	r0, [r7, #16]	@ float
 6371 002a FFF7FEFF 		bl	__aeabi_fmul
 6372 002e 0346     		mov	r3, r0
 6373 0030 3B61     		str	r3, [r7, #16]	@ float
1875:main.c        ****         tempVel = sqrtf(tempVel);
 6374              		.loc 1 1875 0
 6375 0032 3869     		ldr	r0, [r7, #16]	@ float
 6376 0034 FFF7FEFF 		bl	sqrtf
 6377 0038 3861     		str	r0, [r7, #16]	@ float
1876:main.c        ****         tempVel = tempVel - 0.0239372430f;
 6378              		.loc 1 1876 0
 6379 003a 2149     		ldr	r1, .L283+4
 6380 003c 3869     		ldr	r0, [r7, #16]	@ float
 6381 003e FFF7FEFF 		bl	__aeabi_fsub
 6382 0042 0346     		mov	r3, r0
 6383 0044 3B61     		str	r3, [r7, #16]	@ float
1877:main.c        ****         tempVel = tempVel * 130.114584436252734f;
 6384              		.loc 1 1877 0
 6385 0046 1F49     		ldr	r1, .L283+8
 6386 0048 3869     		ldr	r0, [r7, #16]	@ float
 6387 004a FFF7FEFF 		bl	__aeabi_fmul
 6388 004e 0346     		mov	r3, r0
 6389 0050 3B61     		str	r3, [r7, #16]	@ float
1878:main.c        ****         velocity = (int)tempVel;
 6390              		.loc 1 1878 0
 6391 0052 3869     		ldr	r0, [r7, #16]	@ float
 6392 0054 FFF7FEFF 		bl	__aeabi_f2iz
 6393 0058 0346     		mov	r3, r0
 6394 005a FB82     		strh	r3, [r7, #22]	@ movhi
1879:main.c        ****         
1880:main.c        **** 
1881:main.c        ****         if (velocity > 127)
 6395              		.loc 1 1881 0
 6396 005c FB8A     		ldrh	r3, [r7, #22]
 6397 005e 7F2B     		cmp	r3, #127
 6398 0060 01D9     		bls	.L280
1882:main.c        ****         {
1883:main.c        ****             velocity = 127;
 6399              		.loc 1 1883 0
 6400 0062 7F23     		movs	r3, #127
 6401 0064 FB82     		strh	r3, [r7, #22]	@ movhi
 6402              	.L280:
1884:main.c        ****         }
1885:main.c        ****         
1886:main.c        ****         //only update octave on note-ons
1887:main.c        ****         //stringOctave[string] = powf(2.0f,octave);
1888:main.c        ****         int noteToSend = ((octave - 4) * 12) + openStringMIDI_Int[string];
 6403              		.loc 1 1888 0
 6404 0066 184B     		ldr	r3, .L283+12
 6405 0068 1B68     		ldr	r3, [r3]
 6406 006a 1A1F     		subs	r2, r3, #4
 6407 006c 1346     		mov	r3, r2
 6408 006e 5B00     		lsls	r3, r3, #1
 6409 0070 1344     		add	r3, r3, r2
 6410 0072 9B00     		lsls	r3, r3, #2
 6411 0074 1946     		mov	r1, r3
 6412 0076 154A     		ldr	r2, .L283+16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 148


 6413 0078 7B68     		ldr	r3, [r7, #4]
 6414 007a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6415 007e 0B44     		add	r3, r3, r1
 6416 0080 FB60     		str	r3, [r7, #12]
1889:main.c        ****         sendMIDINoteOn(noteToSend , ((uint8_t)velocity), string+1);
 6417              		.loc 1 1889 0
 6418 0082 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6419 0084 DBB2     		uxtb	r3, r3
 6420 0086 1946     		mov	r1, r3
 6421 0088 7B68     		ldr	r3, [r7, #4]
 6422 008a 0133     		adds	r3, r3, #1
 6423 008c 1A46     		mov	r2, r3
 6424 008e F868     		ldr	r0, [r7, #12]
 6425 0090 FFF7FEFF 		bl	sendMIDINoteOn
1890:main.c        ****         prevNotes[string] = noteToSend;
 6426              		.loc 1 1890 0
 6427 0094 0E49     		ldr	r1, .L283+20
 6428 0096 7B68     		ldr	r3, [r7, #4]
 6429 0098 FA68     		ldr	r2, [r7, #12]
 6430 009a 41F82320 		str	r2, [r1, r3, lsl #2]
 6431              	.LBE32:
1891:main.c        ****             
1892:main.c        ****     }
1893:main.c        ****     else
1894:main.c        ****     {
1895:main.c        ****         sendMIDINoteOn(prevNotes[string], 0, string+1);
1896:main.c        ****     }
1897:main.c        **** 
1898:main.c        **** }
 6432              		.loc 1 1898 0
 6433 009e 09E0     		b	.L282
 6434              	.L279:
1895:main.c        ****     }
 6435              		.loc 1 1895 0
 6436 00a0 0B4A     		ldr	r2, .L283+20
 6437 00a2 7B68     		ldr	r3, [r7, #4]
 6438 00a4 52F82300 		ldr	r0, [r2, r3, lsl #2]
 6439 00a8 7B68     		ldr	r3, [r7, #4]
 6440 00aa 0133     		adds	r3, r3, #1
 6441 00ac 1A46     		mov	r2, r3
 6442 00ae 0021     		movs	r1, #0
 6443 00b0 FFF7FEFF 		bl	sendMIDINoteOn
 6444              	.L282:
 6445              		.loc 1 1898 0
 6446 00b4 00BF     		nop
 6447 00b6 1837     		adds	r7, r7, #24
 6448              		.cfi_def_cfa_offset 8
 6449 00b8 BD46     		mov	sp, r7
 6450              		.cfi_def_cfa_register 13
 6451              		@ sp needed
 6452 00ba 80BD     		pop	{r7, pc}
 6453              	.L284:
 6454              		.align	2
 6455              	.L283:
 6456 00bc 00000000 		.word	strings
 6457 00c0 0918C43C 		.word	1019484169
 6458 00c4 551D0243 		.word	1124212053
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 149


 6459 00c8 00000000 		.word	octave
 6460 00cc 00000000 		.word	openStringMIDI_Int
 6461 00d0 00000000 		.word	prevNotes
 6462              		.cfi_endproc
 6463              	.LFE86:
 6464              		.size	noteEvent, .-noteEvent
 6465              		.section	.text.CCEvent,"ax",%progbits
 6466              		.align	2
 6467              		.global	CCEvent
 6468              		.thumb
 6469              		.thumb_func
 6470              		.type	CCEvent, %function
 6471              	CCEvent:
 6472              	.LFB87:
1899:main.c        **** 
1900:main.c        **** void CCEvent(int cc, int val)
1901:main.c        **** {
 6473              		.loc 1 1901 0
 6474              		.cfi_startproc
 6475              		@ args = 0, pretend = 0, frame = 8
 6476              		@ frame_needed = 1, uses_anonymous_args = 0
 6477 0000 80B5     		push	{r7, lr}
 6478              		.cfi_def_cfa_offset 8
 6479              		.cfi_offset 7, -8
 6480              		.cfi_offset 14, -4
 6481 0002 82B0     		sub	sp, sp, #8
 6482              		.cfi_def_cfa_offset 16
 6483 0004 00AF     		add	r7, sp, #0
 6484              		.cfi_def_cfa_register 7
 6485 0006 7860     		str	r0, [r7, #4]
 6486 0008 3960     		str	r1, [r7]
1902:main.c        ****     
1903:main.c        ****     sendMIDIControlChange(cc, val, 0);
 6487              		.loc 1 1903 0
 6488 000a 0022     		movs	r2, #0
 6489 000c 3968     		ldr	r1, [r7]
 6490 000e 7868     		ldr	r0, [r7, #4]
 6491 0010 FFF7FEFF 		bl	sendMIDIControlChange
1904:main.c        **** }
 6492              		.loc 1 1904 0
 6493 0014 00BF     		nop
 6494 0016 0837     		adds	r7, r7, #8
 6495              		.cfi_def_cfa_offset 8
 6496 0018 BD46     		mov	sp, r7
 6497              		.cfi_def_cfa_register 13
 6498              		@ sp needed
 6499 001a 80BD     		pop	{r7, pc}
 6500              		.cfi_endproc
 6501              	.LFE87:
 6502              		.size	CCEvent, .-CCEvent
 6503              		.section	.text.sendMIDINoteOn,"ax",%progbits
 6504              		.align	2
 6505              		.global	sendMIDINoteOn
 6506              		.thumb
 6507              		.thumb_func
 6508              		.type	sendMIDINoteOn, %function
 6509              	sendMIDINoteOn:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 150


 6510              	.LFB88:
1905:main.c        **** 
1906:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel)
1907:main.c        **** {  
 6511              		.loc 1 1907 0
 6512              		.cfi_startproc
 6513              		@ args = 0, pretend = 0, frame = 16
 6514              		@ frame_needed = 1, uses_anonymous_args = 0
 6515 0000 80B5     		push	{r7, lr}
 6516              		.cfi_def_cfa_offset 8
 6517              		.cfi_offset 7, -8
 6518              		.cfi_offset 14, -4
 6519 0002 84B0     		sub	sp, sp, #16
 6520              		.cfi_def_cfa_offset 24
 6521 0004 00AF     		add	r7, sp, #0
 6522              		.cfi_def_cfa_register 7
 6523 0006 F860     		str	r0, [r7, #12]
 6524 0008 B960     		str	r1, [r7, #8]
 6525 000a 7A60     		str	r2, [r7, #4]
1908:main.c        ****    
1909:main.c        ****     midiMsg[0] = USB_MIDI_NOTE_ON + channel;
 6526              		.loc 1 1909 0
 6527 000c 7B68     		ldr	r3, [r7, #4]
 6528 000e DBB2     		uxtb	r3, r3
 6529 0010 703B     		subs	r3, r3, #112
 6530 0012 DAB2     		uxtb	r2, r3
 6531 0014 114B     		ldr	r3, .L288
 6532 0016 1A70     		strb	r2, [r3]
1910:main.c        ****     midiMsg[1] = MIDInoteNum;
 6533              		.loc 1 1910 0
 6534 0018 FB68     		ldr	r3, [r7, #12]
 6535 001a DAB2     		uxtb	r2, r3
 6536 001c 0F4B     		ldr	r3, .L288
 6537 001e 5A70     		strb	r2, [r3, #1]
1911:main.c        ****     midiMsg[2] = velocity;	
 6538              		.loc 1 1911 0
 6539 0020 BB68     		ldr	r3, [r7, #8]
 6540 0022 DAB2     		uxtb	r2, r3
 6541 0024 0D4B     		ldr	r3, .L288
 6542 0026 9A70     		strb	r2, [r3, #2]
1912:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 6543              		.loc 1 1912 0
 6544 0028 0D4B     		ldr	r3, .L288+4
 6545 002a 1B78     		ldrb	r3, [r3]
 6546 002c DBB2     		uxtb	r3, r3
 6547 002e 002B     		cmp	r3, #0
 6548 0030 09D0     		beq	.L287
 6549              		.loc 1 1912 0 is_stmt 0 discriminator 1
 6550 0032 FFF7FEFF 		bl	USB_VBusPresent
 6551 0036 0346     		mov	r3, r0
 6552 0038 002B     		cmp	r3, #0
 6553 003a 04D0     		beq	.L287
1913:main.c        ****     {
1914:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 6554              		.loc 1 1914 0 is_stmt 1
 6555 003c 0022     		movs	r2, #0
 6556 003e 0749     		ldr	r1, .L288
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 151


 6557 0040 0320     		movs	r0, #3
 6558 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 6559              	.L287:
1915:main.c        ****     } 
1916:main.c        ****     midiSent += 4;
 6560              		.loc 1 1916 0
 6561 0046 074B     		ldr	r3, .L288+8
 6562 0048 1B88     		ldrh	r3, [r3]
 6563 004a 0433     		adds	r3, r3, #4
 6564 004c 9AB2     		uxth	r2, r3
 6565 004e 054B     		ldr	r3, .L288+8
 6566 0050 1A80     		strh	r2, [r3]	@ movhi
1917:main.c        **** }
 6567              		.loc 1 1917 0
 6568 0052 00BF     		nop
 6569 0054 1037     		adds	r7, r7, #16
 6570              		.cfi_def_cfa_offset 8
 6571 0056 BD46     		mov	sp, r7
 6572              		.cfi_def_cfa_register 13
 6573              		@ sp needed
 6574 0058 80BD     		pop	{r7, pc}
 6575              	.L289:
 6576 005a 00BF     		.align	2
 6577              	.L288:
 6578 005c 00000000 		.word	midiMsg
 6579 0060 00000000 		.word	USB_active
 6580 0064 00000000 		.word	midiSent
 6581              		.cfi_endproc
 6582              	.LFE88:
 6583              		.size	sendMIDINoteOn, .-sendMIDINoteOn
 6584              		.section	.text.sendMIDIPolyKeyPressure,"ax",%progbits
 6585              		.align	2
 6586              		.global	sendMIDIPolyKeyPressure
 6587              		.thumb
 6588              		.thumb_func
 6589              		.type	sendMIDIPolyKeyPressure, %function
 6590              	sendMIDIPolyKeyPressure:
 6591              	.LFB89:
1918:main.c        **** 
1919:main.c        **** void sendMIDIPolyKeyPressure(int MIDInoteNum, int pressure, int channel)
1920:main.c        **** {
 6592              		.loc 1 1920 0
 6593              		.cfi_startproc
 6594              		@ args = 0, pretend = 0, frame = 16
 6595              		@ frame_needed = 1, uses_anonymous_args = 0
 6596 0000 80B5     		push	{r7, lr}
 6597              		.cfi_def_cfa_offset 8
 6598              		.cfi_offset 7, -8
 6599              		.cfi_offset 14, -4
 6600 0002 84B0     		sub	sp, sp, #16
 6601              		.cfi_def_cfa_offset 24
 6602 0004 00AF     		add	r7, sp, #0
 6603              		.cfi_def_cfa_register 7
 6604 0006 F860     		str	r0, [r7, #12]
 6605 0008 B960     		str	r1, [r7, #8]
 6606 000a 7A60     		str	r2, [r7, #4]
1921:main.c        ****     midiMsg[0] = USB_MIDI_POLY_KEY_PRESSURE + channel;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 152


 6607              		.loc 1 1921 0
 6608 000c 7B68     		ldr	r3, [r7, #4]
 6609 000e DBB2     		uxtb	r3, r3
 6610 0010 603B     		subs	r3, r3, #96
 6611 0012 DAB2     		uxtb	r2, r3
 6612 0014 114B     		ldr	r3, .L292
 6613 0016 1A70     		strb	r2, [r3]
1922:main.c        ****     midiMsg[1] = MIDInoteNum;
 6614              		.loc 1 1922 0
 6615 0018 FB68     		ldr	r3, [r7, #12]
 6616 001a DAB2     		uxtb	r2, r3
 6617 001c 0F4B     		ldr	r3, .L292
 6618 001e 5A70     		strb	r2, [r3, #1]
1923:main.c        ****     midiMsg[2] = pressure;		
 6619              		.loc 1 1923 0
 6620 0020 BB68     		ldr	r3, [r7, #8]
 6621 0022 DAB2     		uxtb	r2, r3
 6622 0024 0D4B     		ldr	r3, .L292
 6623 0026 9A70     		strb	r2, [r3, #2]
1924:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 6624              		.loc 1 1924 0
 6625 0028 0D4B     		ldr	r3, .L292+4
 6626 002a 1B78     		ldrb	r3, [r3]
 6627 002c DBB2     		uxtb	r3, r3
 6628 002e 002B     		cmp	r3, #0
 6629 0030 09D0     		beq	.L291
 6630              		.loc 1 1924 0 is_stmt 0 discriminator 1
 6631 0032 FFF7FEFF 		bl	USB_VBusPresent
 6632 0036 0346     		mov	r3, r0
 6633 0038 002B     		cmp	r3, #0
 6634 003a 04D0     		beq	.L291
1925:main.c        ****     {
1926:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 6635              		.loc 1 1926 0 is_stmt 1
 6636 003c 0022     		movs	r2, #0
 6637 003e 0749     		ldr	r1, .L292
 6638 0040 0320     		movs	r0, #3
 6639 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 6640              	.L291:
1927:main.c        ****     } 
1928:main.c        ****     midiSent += 4;
 6641              		.loc 1 1928 0
 6642 0046 074B     		ldr	r3, .L292+8
 6643 0048 1B88     		ldrh	r3, [r3]
 6644 004a 0433     		adds	r3, r3, #4
 6645 004c 9AB2     		uxth	r2, r3
 6646 004e 054B     		ldr	r3, .L292+8
 6647 0050 1A80     		strh	r2, [r3]	@ movhi
1929:main.c        **** }
 6648              		.loc 1 1929 0
 6649 0052 00BF     		nop
 6650 0054 1037     		adds	r7, r7, #16
 6651              		.cfi_def_cfa_offset 8
 6652 0056 BD46     		mov	sp, r7
 6653              		.cfi_def_cfa_register 13
 6654              		@ sp needed
 6655 0058 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 153


 6656              	.L293:
 6657 005a 00BF     		.align	2
 6658              	.L292:
 6659 005c 00000000 		.word	midiMsg
 6660 0060 00000000 		.word	USB_active
 6661 0064 00000000 		.word	midiSent
 6662              		.cfi_endproc
 6663              	.LFE89:
 6664              		.size	sendMIDIPolyKeyPressure, .-sendMIDIPolyKeyPressure
 6665              		.section	.text.sendMIDIControlChange,"ax",%progbits
 6666              		.align	2
 6667              		.global	sendMIDIControlChange
 6668              		.thumb
 6669              		.thumb_func
 6670              		.type	sendMIDIControlChange, %function
 6671              	sendMIDIControlChange:
 6672              	.LFB90:
1930:main.c        **** 
1931:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel)
1932:main.c        **** {
 6673              		.loc 1 1932 0
 6674              		.cfi_startproc
 6675              		@ args = 0, pretend = 0, frame = 16
 6676              		@ frame_needed = 1, uses_anonymous_args = 0
 6677 0000 80B5     		push	{r7, lr}
 6678              		.cfi_def_cfa_offset 8
 6679              		.cfi_offset 7, -8
 6680              		.cfi_offset 14, -4
 6681 0002 84B0     		sub	sp, sp, #16
 6682              		.cfi_def_cfa_offset 24
 6683 0004 00AF     		add	r7, sp, #0
 6684              		.cfi_def_cfa_register 7
 6685 0006 F860     		str	r0, [r7, #12]
 6686 0008 B960     		str	r1, [r7, #8]
 6687 000a 7A60     		str	r2, [r7, #4]
1933:main.c        ****     midiMsg[0] = USB_MIDI_CONTROL_CHANGE + channel;
 6688              		.loc 1 1933 0
 6689 000c 7B68     		ldr	r3, [r7, #4]
 6690 000e DBB2     		uxtb	r3, r3
 6691 0010 503B     		subs	r3, r3, #80
 6692 0012 DAB2     		uxtb	r2, r3
 6693 0014 114B     		ldr	r3, .L296
 6694 0016 1A70     		strb	r2, [r3]
1934:main.c        ****     midiMsg[1] = CCnum;
 6695              		.loc 1 1934 0
 6696 0018 FB68     		ldr	r3, [r7, #12]
 6697 001a DAB2     		uxtb	r2, r3
 6698 001c 0F4B     		ldr	r3, .L296
 6699 001e 5A70     		strb	r2, [r3, #1]
1935:main.c        ****     midiMsg[2] = CCval;			
 6700              		.loc 1 1935 0
 6701 0020 BB68     		ldr	r3, [r7, #8]
 6702 0022 DAB2     		uxtb	r2, r3
 6703 0024 0D4B     		ldr	r3, .L296
 6704 0026 9A70     		strb	r2, [r3, #2]
1936:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 6705              		.loc 1 1936 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 154


 6706 0028 0D4B     		ldr	r3, .L296+4
 6707 002a 1B78     		ldrb	r3, [r3]
 6708 002c DBB2     		uxtb	r3, r3
 6709 002e 002B     		cmp	r3, #0
 6710 0030 09D0     		beq	.L295
 6711              		.loc 1 1936 0 is_stmt 0 discriminator 1
 6712 0032 FFF7FEFF 		bl	USB_VBusPresent
 6713 0036 0346     		mov	r3, r0
 6714 0038 002B     		cmp	r3, #0
 6715 003a 04D0     		beq	.L295
1937:main.c        ****     {
1938:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 6716              		.loc 1 1938 0 is_stmt 1
 6717 003c 0022     		movs	r2, #0
 6718 003e 0749     		ldr	r1, .L296
 6719 0040 0320     		movs	r0, #3
 6720 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 6721              	.L295:
1939:main.c        ****     } 
1940:main.c        ****     midiSent += 4;
 6722              		.loc 1 1940 0
 6723 0046 074B     		ldr	r3, .L296+8
 6724 0048 1B88     		ldrh	r3, [r3]
 6725 004a 0433     		adds	r3, r3, #4
 6726 004c 9AB2     		uxth	r2, r3
 6727 004e 054B     		ldr	r3, .L296+8
 6728 0050 1A80     		strh	r2, [r3]	@ movhi
1941:main.c        **** }
 6729              		.loc 1 1941 0
 6730 0052 00BF     		nop
 6731 0054 1037     		adds	r7, r7, #16
 6732              		.cfi_def_cfa_offset 8
 6733 0056 BD46     		mov	sp, r7
 6734              		.cfi_def_cfa_register 13
 6735              		@ sp needed
 6736 0058 80BD     		pop	{r7, pc}
 6737              	.L297:
 6738 005a 00BF     		.align	2
 6739              	.L296:
 6740 005c 00000000 		.word	midiMsg
 6741 0060 00000000 		.word	USB_active
 6742 0064 00000000 		.word	midiSent
 6743              		.cfi_endproc
 6744              	.LFE90:
 6745              		.size	sendMIDIControlChange, .-sendMIDIControlChange
 6746              		.section	.text.sendMIDIPitchBend,"ax",%progbits
 6747              		.align	2
 6748              		.global	sendMIDIPitchBend
 6749              		.thumb
 6750              		.thumb_func
 6751              		.type	sendMIDIPitchBend, %function
 6752              	sendMIDIPitchBend:
 6753              	.LFB91:
1942:main.c        **** 
1943:main.c        **** void sendMIDIPitchBend(int val, int channel)
1944:main.c        **** {
 6754              		.loc 1 1944 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 155


 6755              		.cfi_startproc
 6756              		@ args = 0, pretend = 0, frame = 8
 6757              		@ frame_needed = 1, uses_anonymous_args = 0
 6758 0000 80B5     		push	{r7, lr}
 6759              		.cfi_def_cfa_offset 8
 6760              		.cfi_offset 7, -8
 6761              		.cfi_offset 14, -4
 6762 0002 82B0     		sub	sp, sp, #8
 6763              		.cfi_def_cfa_offset 16
 6764 0004 00AF     		add	r7, sp, #0
 6765              		.cfi_def_cfa_register 7
 6766 0006 7860     		str	r0, [r7, #4]
 6767 0008 3960     		str	r1, [r7]
1945:main.c        ****     midiMsg[0] = USB_MIDI_PITCH_BEND_CHANGE + channel;
 6768              		.loc 1 1945 0
 6769 000a 3B68     		ldr	r3, [r7]
 6770 000c DBB2     		uxtb	r3, r3
 6771 000e 203B     		subs	r3, r3, #32
 6772 0010 DAB2     		uxtb	r2, r3
 6773 0012 134B     		ldr	r3, .L300
 6774 0014 1A70     		strb	r2, [r3]
1946:main.c        ****     midiMsg[1] = (val & 127); //LSB
 6775              		.loc 1 1946 0
 6776 0016 7B68     		ldr	r3, [r7, #4]
 6777 0018 DBB2     		uxtb	r3, r3
 6778 001a 03F07F03 		and	r3, r3, #127
 6779 001e DAB2     		uxtb	r2, r3
 6780 0020 0F4B     		ldr	r3, .L300
 6781 0022 5A70     		strb	r2, [r3, #1]
1947:main.c        ****     midiMsg[2] = (val >> 7);	//MSB		
 6782              		.loc 1 1947 0
 6783 0024 7B68     		ldr	r3, [r7, #4]
 6784 0026 DB11     		asrs	r3, r3, #7
 6785 0028 DAB2     		uxtb	r2, r3
 6786 002a 0D4B     		ldr	r3, .L300
 6787 002c 9A70     		strb	r2, [r3, #2]
1948:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 6788              		.loc 1 1948 0
 6789 002e 0D4B     		ldr	r3, .L300+4
 6790 0030 1B78     		ldrb	r3, [r3]
 6791 0032 DBB2     		uxtb	r3, r3
 6792 0034 002B     		cmp	r3, #0
 6793 0036 09D0     		beq	.L299
 6794              		.loc 1 1948 0 is_stmt 0 discriminator 1
 6795 0038 FFF7FEFF 		bl	USB_VBusPresent
 6796 003c 0346     		mov	r3, r0
 6797 003e 002B     		cmp	r3, #0
 6798 0040 04D0     		beq	.L299
1949:main.c        ****     {
1950:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 6799              		.loc 1 1950 0 is_stmt 1
 6800 0042 0022     		movs	r2, #0
 6801 0044 0649     		ldr	r1, .L300
 6802 0046 0320     		movs	r0, #3
 6803 0048 FFF7FEFF 		bl	USB_PutUsbMidiIn
 6804              	.L299:
1951:main.c        ****     } 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 156


1952:main.c        ****     midiSent += 4;
 6805              		.loc 1 1952 0
 6806 004c 064B     		ldr	r3, .L300+8
 6807 004e 1B88     		ldrh	r3, [r3]
 6808 0050 0433     		adds	r3, r3, #4
 6809 0052 9AB2     		uxth	r2, r3
 6810 0054 044B     		ldr	r3, .L300+8
 6811 0056 1A80     		strh	r2, [r3]	@ movhi
1953:main.c        **** }
 6812              		.loc 1 1953 0
 6813 0058 00BF     		nop
 6814 005a 0837     		adds	r7, r7, #8
 6815              		.cfi_def_cfa_offset 8
 6816 005c BD46     		mov	sp, r7
 6817              		.cfi_def_cfa_register 13
 6818              		@ sp needed
 6819 005e 80BD     		pop	{r7, pc}
 6820              	.L301:
 6821              		.align	2
 6822              	.L300:
 6823 0060 00000000 		.word	midiMsg
 6824 0064 00000000 		.word	USB_active
 6825 0068 00000000 		.word	midiSent
 6826              		.cfi_endproc
 6827              	.LFE91:
 6828              		.size	sendMIDIPitchBend, .-sendMIDIPitchBend
 6829              		.section	.text.sendMIDIAllNotesOff,"ax",%progbits
 6830              		.align	2
 6831              		.global	sendMIDIAllNotesOff
 6832              		.thumb
 6833              		.thumb_func
 6834              		.type	sendMIDIAllNotesOff, %function
 6835              	sendMIDIAllNotesOff:
 6836              	.LFB92:
1954:main.c        **** 
1955:main.c        **** void sendMIDIAllNotesOff(void)
1956:main.c        **** {   
 6837              		.loc 1 1956 0
 6838              		.cfi_startproc
 6839              		@ args = 0, pretend = 0, frame = 0
 6840              		@ frame_needed = 1, uses_anonymous_args = 0
 6841 0000 80B5     		push	{r7, lr}
 6842              		.cfi_def_cfa_offset 8
 6843              		.cfi_offset 7, -8
 6844              		.cfi_offset 14, -4
 6845 0002 00AF     		add	r7, sp, #0
 6846              		.cfi_def_cfa_register 7
1957:main.c        ****     for (i = 0; i < 128; i++)
 6847              		.loc 1 1957 0
 6848 0004 144B     		ldr	r3, .L306
 6849 0006 0022     		movs	r2, #0
 6850 0008 1A70     		strb	r2, [r3]
 6851 000a 1EE0     		b	.L303
 6852              	.L305:
1958:main.c        ****     {
1959:main.c        ****         midiMsg[0] = USB_MIDI_NOTE_ON;
 6853              		.loc 1 1959 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 157


 6854 000c 134B     		ldr	r3, .L306+4
 6855 000e 9022     		movs	r2, #144
 6856 0010 1A70     		strb	r2, [r3]
1960:main.c        ****         midiMsg[1] = i;
 6857              		.loc 1 1960 0
 6858 0012 114B     		ldr	r3, .L306
 6859 0014 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6860 0016 114B     		ldr	r3, .L306+4
 6861 0018 5A70     		strb	r2, [r3, #1]
1961:main.c        ****         midiMsg[2] = 0;	
 6862              		.loc 1 1961 0
 6863 001a 104B     		ldr	r3, .L306+4
 6864 001c 0022     		movs	r2, #0
 6865 001e 9A70     		strb	r2, [r3, #2]
1962:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 6866              		.loc 1 1962 0
 6867 0020 0F4B     		ldr	r3, .L306+8
 6868 0022 1B78     		ldrb	r3, [r3]
 6869 0024 DBB2     		uxtb	r3, r3
 6870 0026 002B     		cmp	r3, #0
 6871 0028 09D0     		beq	.L304
 6872              		.loc 1 1962 0 is_stmt 0 discriminator 1
 6873 002a FFF7FEFF 		bl	USB_VBusPresent
 6874 002e 0346     		mov	r3, r0
 6875 0030 002B     		cmp	r3, #0
 6876 0032 04D0     		beq	.L304
1963:main.c        ****         {       
1964:main.c        ****             USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 6877              		.loc 1 1964 0 is_stmt 1
 6878 0034 0022     		movs	r2, #0
 6879 0036 0949     		ldr	r1, .L306+4
 6880 0038 0320     		movs	r0, #3
 6881 003a FFF7FEFF 		bl	USB_PutUsbMidiIn
 6882              	.L304:
1957:main.c        ****     {
 6883              		.loc 1 1957 0 discriminator 2
 6884 003e 064B     		ldr	r3, .L306
 6885 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6886 0042 0133     		adds	r3, r3, #1
 6887 0044 DAB2     		uxtb	r2, r3
 6888 0046 044B     		ldr	r3, .L306
 6889 0048 1A70     		strb	r2, [r3]
 6890              	.L303:
1957:main.c        ****     {
 6891              		.loc 1 1957 0 is_stmt 0 discriminator 1
 6892 004a 034B     		ldr	r3, .L306
 6893 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6894 004e 5BB2     		sxtb	r3, r3
 6895 0050 002B     		cmp	r3, #0
 6896 0052 DBDA     		bge	.L305
1965:main.c        ****         }
1966:main.c        ****     }
1967:main.c        **** }
 6897              		.loc 1 1967 0 is_stmt 1
 6898 0054 00BF     		nop
 6899 0056 80BD     		pop	{r7, pc}
 6900              	.L307:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 158


 6901              		.align	2
 6902              	.L306:
 6903 0058 00000000 		.word	i
 6904 005c 00000000 		.word	midiMsg
 6905 0060 00000000 		.word	USB_active
 6906              		.cfi_endproc
 6907              	.LFE92:
 6908              		.size	sendMIDIAllNotesOff, .-sendMIDIAllNotesOff
 6909              		.global	checkStatus
 6910              		.bss
 6911              		.type	checkStatus, %object
 6912              		.size	checkStatus, 1
 6913              	checkStatus:
 6914 00f8 00       		.space	1
 6915              		.global	checkBase
 6916              		.type	checkBase, %object
 6917              		.size	checkBase, 1
 6918              	checkBase:
 6919 00f9 00       		.space	1
 6920              		.global	SPI_errors
 6921 00fa 0000     		.align	2
 6922              		.type	SPI_errors, %object
 6923              		.size	SPI_errors, 4
 6924              	SPI_errors:
 6925 00fc 00000000 		.space	4
 6926              		.section	.text.parseSysex,"ax",%progbits
 6927              		.align	2
 6928              		.global	parseSysex
 6929              		.thumb
 6930              		.thumb_func
 6931              		.type	parseSysex, %function
 6932              	parseSysex:
 6933              	.LFB93:
1968:main.c        **** 
1969:main.c        **** 
1970:main.c        **** 
1971:main.c        **** 
1972:main.c        **** volatile uint8_t checkStatus = 0;
1973:main.c        **** volatile uint8_t checkBase = 0;
1974:main.c        **** 
1975:main.c        **** 
1976:main.c        **** 
1977:main.c        **** int SPI_errors = 0;
1978:main.c        **** 
1979:main.c        **** void parseSysex(void)
1980:main.c        **** {
 6934              		.loc 1 1980 0
 6935              		.cfi_startproc
 6936              		@ args = 0, pretend = 0, frame = 56
 6937              		@ frame_needed = 1, uses_anonymous_args = 0
 6938 0000 90B5     		push	{r4, r7, lr}
 6939              		.cfi_def_cfa_offset 12
 6940              		.cfi_offset 4, -12
 6941              		.cfi_offset 7, -8
 6942              		.cfi_offset 14, -4
 6943 0002 8FB0     		sub	sp, sp, #60
 6944              		.cfi_def_cfa_offset 72
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 159


 6945 0004 00AF     		add	r7, sp, #0
 6946              		.cfi_def_cfa_register 7
1981:main.c        ****     parsingSysex = 1;
 6947              		.loc 1 1981 0
 6948 0006 864B     		ldr	r3, .L355
 6949 0008 0122     		movs	r2, #1
 6950 000a 1A70     		strb	r2, [r3]
1982:main.c        ****     //0 = it's a preset
1983:main.c        ****     if (sysexBuffer[0] == 0)
 6951              		.loc 1 1983 0
 6952 000c 854B     		ldr	r3, .L355+4
 6953 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6954 0010 002B     		cmp	r3, #0
 6955 0012 40F09E82 		bne	.L309
 6956              	.LBB33:
1984:main.c        ****     {
1985:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
 6957              		.loc 1 1985 0
 6958 0016 844B     		ldr	r3, .L355+8
 6959 0018 0122     		movs	r2, #1
 6960 001a 1A70     		strb	r2, [r3]
1986:main.c        ****         currentFloat = 0;
 6961              		.loc 1 1986 0
 6962 001c 834B     		ldr	r3, .L355+12
 6963 001e 0022     		movs	r2, #0
 6964 0020 1A60     		str	r2, [r3]
1987:main.c        ****         presetArraySection = presetName;
 6965              		.loc 1 1987 0
 6966 0022 834B     		ldr	r3, .L355+16
 6967 0024 0022     		movs	r2, #0
 6968 0026 1A70     		strb	r2, [r3]
1988:main.c        ****         presetNumberToWrite = sysexBuffer[1];
 6969              		.loc 1 1988 0
 6970 0028 7E4B     		ldr	r3, .L355+4
 6971 002a 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 6972 002c 814B     		ldr	r3, .L355+20
 6973 002e 1A70     		strb	r2, [r3]
1989:main.c        ****         
1990:main.c        ****         union breakFloat theVal;
1991:main.c        ****         uint32_t i = 2;
 6974              		.loc 1 1991 0
 6975 0030 0223     		movs	r3, #2
 6976 0032 7B63     		str	r3, [r7, #52]
1992:main.c        ****         uint8_t stoppingPoint = NAME_LENGTH_IN_BYTES+2;
 6977              		.loc 1 1992 0
 6978 0034 1023     		movs	r3, #16
 6979 0036 FB77     		strb	r3, [r7, #31]
1993:main.c        ****         for (; i < stoppingPoint; i++)
 6980              		.loc 1 1993 0
 6981 0038 22E0     		b	.L310
 6982              	.L311:
1994:main.c        ****         {
1995:main.c        ****             presetArray[i-2] = sysexBuffer[i] & 127; // pass on the first 14 elements as 8-bit byte
 6983              		.loc 1 1995 0 discriminator 2
 6984 003a 7B6B     		ldr	r3, [r7, #52]
 6985 003c 023B     		subs	r3, r3, #2
 6986 003e 7949     		ldr	r1, .L355+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 160


 6987 0040 7A6B     		ldr	r2, [r7, #52]
 6988 0042 0A44     		add	r2, r2, r1
 6989 0044 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 6990 0046 02F07F02 		and	r2, r2, #127
 6991 004a D1B2     		uxtb	r1, r2
 6992 004c 7A4A     		ldr	r2, .L355+24
 6993 004e D154     		strb	r1, [r2, r3]
1996:main.c        ****             presetNamesArray[presetNumberToWrite][i-2] = sysexBuffer[i] & 127;
 6994              		.loc 1 1996 0 discriminator 2
 6995 0050 784B     		ldr	r3, .L355+20
 6996 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6997 0054 1846     		mov	r0, r3
 6998 0056 7B6B     		ldr	r3, [r7, #52]
 6999 0058 9A1E     		subs	r2, r3, #2
 7000 005a 7249     		ldr	r1, .L355+4
 7001 005c 7B6B     		ldr	r3, [r7, #52]
 7002 005e 0B44     		add	r3, r3, r1
 7003 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7004 0062 03F07F03 		and	r3, r3, #127
 7005 0066 DCB2     		uxtb	r4, r3
 7006 0068 7449     		ldr	r1, .L355+28
 7007 006a 0346     		mov	r3, r0
 7008 006c DB00     		lsls	r3, r3, #3
 7009 006e 1B1A     		subs	r3, r3, r0
 7010 0070 5B00     		lsls	r3, r3, #1
 7011 0072 0B44     		add	r3, r3, r1
 7012 0074 1344     		add	r3, r3, r2
 7013 0076 2246     		mov	r2, r4
 7014 0078 1A70     		strb	r2, [r3]
1993:main.c        ****         for (; i < stoppingPoint; i++)
 7015              		.loc 1 1993 0 discriminator 2
 7016 007a 7B6B     		ldr	r3, [r7, #52]
 7017 007c 0133     		adds	r3, r3, #1
 7018 007e 7B63     		str	r3, [r7, #52]
 7019              	.L310:
1993:main.c        ****         for (; i < stoppingPoint; i++)
 7020              		.loc 1 1993 0 is_stmt 0 discriminator 1
 7021 0080 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 7022 0082 7B6B     		ldr	r3, [r7, #52]
 7023 0084 9A42     		cmp	r2, r3
 7024 0086 D8D8     		bhi	.L311
1997:main.c        ****         }
1998:main.c        ****         
1999:main.c        ****         presetArraySection = macroNames;
 7025              		.loc 1 1999 0 is_stmt 1
 7026 0088 694B     		ldr	r3, .L355+16
 7027 008a 0122     		movs	r2, #1
 7028 008c 1A70     		strb	r2, [r3]
 7029              	.LBB34:
2000:main.c        **** 
2001:main.c        ****         
2002:main.c        ****         for (int j = 0; j < NUM_MACROS; j++)
 7030              		.loc 1 2002 0
 7031 008e 0023     		movs	r3, #0
 7032 0090 3B63     		str	r3, [r7, #48]
 7033 0092 34E0     		b	.L312
 7034              	.L315:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 161


 7035              	.LBB35:
2003:main.c        ****         {
2004:main.c        ****             for (int k = 0; k < NAME_LENGTH_IN_BYTES; k++)
 7036              		.loc 1 2004 0
 7037 0094 0023     		movs	r3, #0
 7038 0096 FB62     		str	r3, [r7, #44]
 7039 0098 2BE0     		b	.L313
 7040              	.L314:
2005:main.c        ****             {
2006:main.c        ****                 presetArray[i-2] = sysexBuffer[i] & 127; // pass on the first 14 elements as 8-bit 
 7041              		.loc 1 2006 0 discriminator 3
 7042 009a 7B6B     		ldr	r3, [r7, #52]
 7043 009c 023B     		subs	r3, r3, #2
 7044 009e 6149     		ldr	r1, .L355+4
 7045 00a0 7A6B     		ldr	r2, [r7, #52]
 7046 00a2 0A44     		add	r2, r2, r1
 7047 00a4 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7048 00a6 02F07F02 		and	r2, r2, #127
 7049 00aa D1B2     		uxtb	r1, r2
 7050 00ac 624A     		ldr	r2, .L355+24
 7051 00ae D154     		strb	r1, [r2, r3]
2007:main.c        ****                 macroNamesArray[presetNumberToWrite][j][k] = sysexBuffer[i] & 127; // pass on the f
 7052              		.loc 1 2007 0 discriminator 3
 7053 00b0 604B     		ldr	r3, .L355+20
 7054 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7055 00b4 1846     		mov	r0, r3
 7056 00b6 5B4A     		ldr	r2, .L355+4
 7057 00b8 7B6B     		ldr	r3, [r7, #52]
 7058 00ba 1344     		add	r3, r3, r2
 7059 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7060 00be 03F07F03 		and	r3, r3, #127
 7061 00c2 DCB2     		uxtb	r4, r3
 7062 00c4 5E49     		ldr	r1, .L355+32
 7063 00c6 3B6B     		ldr	r3, [r7, #48]
 7064 00c8 1A46     		mov	r2, r3
 7065 00ca D200     		lsls	r2, r2, #3
 7066 00cc D21A     		subs	r2, r2, r3
 7067 00ce 5300     		lsls	r3, r2, #1
 7068 00d0 1A46     		mov	r2, r3
 7069 00d2 0346     		mov	r3, r0
 7070 00d4 DB00     		lsls	r3, r3, #3
 7071 00d6 1B1A     		subs	r3, r3, r0
 7072 00d8 1B01     		lsls	r3, r3, #4
 7073 00da 1344     		add	r3, r3, r2
 7074 00dc CA18     		adds	r2, r1, r3
 7075 00de FB6A     		ldr	r3, [r7, #44]
 7076 00e0 1344     		add	r3, r3, r2
 7077 00e2 2246     		mov	r2, r4
 7078 00e4 1A70     		strb	r2, [r3]
2008:main.c        ****                 i++;
 7079              		.loc 1 2008 0 discriminator 3
 7080 00e6 7B6B     		ldr	r3, [r7, #52]
 7081 00e8 0133     		adds	r3, r3, #1
 7082 00ea 7B63     		str	r3, [r7, #52]
2004:main.c        ****             {
 7083              		.loc 1 2004 0 discriminator 3
 7084 00ec FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 162


 7085 00ee 0133     		adds	r3, r3, #1
 7086 00f0 FB62     		str	r3, [r7, #44]
 7087              	.L313:
2004:main.c        ****             {
 7088              		.loc 1 2004 0 is_stmt 0 discriminator 1
 7089 00f2 FB6A     		ldr	r3, [r7, #44]
 7090 00f4 0D2B     		cmp	r3, #13
 7091 00f6 D0DD     		ble	.L314
 7092              	.LBE35:
2002:main.c        ****         {
 7093              		.loc 1 2002 0 is_stmt 1 discriminator 2
 7094 00f8 3B6B     		ldr	r3, [r7, #48]
 7095 00fa 0133     		adds	r3, r3, #1
 7096 00fc 3B63     		str	r3, [r7, #48]
 7097              	.L312:
2002:main.c        ****         {
 7098              		.loc 1 2002 0 is_stmt 0 discriminator 1
 7099 00fe 3B6B     		ldr	r3, [r7, #48]
 7100 0100 072B     		cmp	r3, #7
 7101 0102 C7DD     		ble	.L315
 7102              	.LBE34:
2009:main.c        ****             }
2010:main.c        ****         }
2011:main.c        ****         
2012:main.c        ****         uint16_t valsStart = NAME_LENGTH_IN_BYTES + (NAME_LENGTH_IN_BYTES * NUM_MACROS);
 7103              		.loc 1 2012 0 is_stmt 1
 7104 0104 7E23     		movs	r3, #126
 7105 0106 BB83     		strh	r3, [r7, #28]	@ movhi
2013:main.c        ****         
2014:main.c        ****         presetArraySection = initialVals;
 7106              		.loc 1 2014 0
 7107 0108 494B     		ldr	r3, .L355+16
 7108 010a 0222     		movs	r2, #2
 7109 010c 1A70     		strb	r2, [r3]
2015:main.c        ****         
2016:main.c        ****         for (; i < sysexPointer; i = i+5)
 7110              		.loc 1 2016 0
 7111 010e 19E2     		b	.L316
 7112              	.L337:
2017:main.c        ****         {
2018:main.c        ****             theVal.u32 = 0;
 7113              		.loc 1 2018 0
 7114 0110 0023     		movs	r3, #0
 7115 0112 BB60     		str	r3, [r7, #8]
2019:main.c        ****             theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 7116              		.loc 1 2019 0
 7117 0114 BB68     		ldr	r3, [r7, #8]
 7118 0116 4349     		ldr	r1, .L355+4
 7119 0118 7A6B     		ldr	r2, [r7, #52]
 7120 011a 0A44     		add	r2, r2, r1
 7121 011c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7122 011e 1207     		lsls	r2, r2, #28
 7123 0120 1343     		orrs	r3, r3, r2
 7124 0122 BB60     		str	r3, [r7, #8]
2020:main.c        ****             theVal.u32 |= (sysexBuffer[i+1] << 21);
 7125              		.loc 1 2020 0
 7126 0124 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 163


 7127 0126 7A6B     		ldr	r2, [r7, #52]
 7128 0128 0132     		adds	r2, r2, #1
 7129 012a 3E49     		ldr	r1, .L355+4
 7130 012c 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7131 012e 5205     		lsls	r2, r2, #21
 7132 0130 1343     		orrs	r3, r3, r2
 7133 0132 BB60     		str	r3, [r7, #8]
2021:main.c        ****             theVal.u32 |= (sysexBuffer[i+2] << 14);
 7134              		.loc 1 2021 0
 7135 0134 BB68     		ldr	r3, [r7, #8]
 7136 0136 7A6B     		ldr	r2, [r7, #52]
 7137 0138 0232     		adds	r2, r2, #2
 7138 013a 3A49     		ldr	r1, .L355+4
 7139 013c 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7140 013e 9203     		lsls	r2, r2, #14
 7141 0140 1343     		orrs	r3, r3, r2
 7142 0142 BB60     		str	r3, [r7, #8]
2022:main.c        ****             theVal.u32 |= (sysexBuffer[i+3] << 7);
 7143              		.loc 1 2022 0
 7144 0144 BB68     		ldr	r3, [r7, #8]
 7145 0146 7A6B     		ldr	r2, [r7, #52]
 7146 0148 0332     		adds	r2, r2, #3
 7147 014a 3649     		ldr	r1, .L355+4
 7148 014c 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7149 014e D201     		lsls	r2, r2, #7
 7150 0150 1343     		orrs	r3, r3, r2
 7151 0152 BB60     		str	r3, [r7, #8]
2023:main.c        ****             theVal.u32 |= (sysexBuffer[i+4] & 127);
 7152              		.loc 1 2023 0
 7153 0154 BA68     		ldr	r2, [r7, #8]
 7154 0156 7B6B     		ldr	r3, [r7, #52]
 7155 0158 0433     		adds	r3, r3, #4
 7156 015a 3249     		ldr	r1, .L355+4
 7157 015c CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 7158 015e 03F07F03 		and	r3, r3, #127
 7159 0162 1343     		orrs	r3, r3, r2
 7160 0164 BB60     		str	r3, [r7, #8]
2024:main.c        ****             testVal = theVal.f;
 7161              		.loc 1 2024 0
 7162 0166 BB68     		ldr	r3, [r7, #8]	@ float
 7163 0168 364A     		ldr	r2, .L355+36
 7164 016a 1360     		str	r3, [r2]	@ float
2025:main.c        ****             if (presetArraySection == initialVals)
 7165              		.loc 1 2025 0
 7166 016c 304B     		ldr	r3, .L355+16
 7167 016e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7168 0170 022B     		cmp	r3, #2
 7169 0172 40F0B980 		bne	.L317
2026:main.c        ****             {
2027:main.c        **** 
2028:main.c        ****                 if (currentFloat == 0)
 7170              		.loc 1 2028 0
 7171 0176 2D4B     		ldr	r3, .L355+12
 7172 0178 1B68     		ldr	r3, [r3]
 7173 017a 002B     		cmp	r3, #0
 7174 017c 22D1     		bne	.L318
2029:main.c        ****                 {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 164


2030:main.c        ****                     valsCount = (uint16_t) theVal.f;
 7175              		.loc 1 2030 0
 7176 017e BB68     		ldr	r3, [r7, #8]	@ float
 7177 0180 1846     		mov	r0, r3
 7178 0182 FFF7FEFF 		bl	__aeabi_f2uiz
 7179 0186 0346     		mov	r3, r0
 7180 0188 9AB2     		uxth	r2, r3
 7181 018a 2F4B     		ldr	r3, .L355+40
 7182 018c 1A80     		strh	r2, [r3]	@ movhi
2031:main.c        ****                     presetArray[valsStart + currentFloat++] = valsCount >> 8;
 7183              		.loc 1 2031 0
 7184 018e BA8B     		ldrh	r2, [r7, #28]
 7185 0190 264B     		ldr	r3, .L355+12
 7186 0192 1B68     		ldr	r3, [r3]
 7187 0194 591C     		adds	r1, r3, #1
 7188 0196 2548     		ldr	r0, .L355+12
 7189 0198 0160     		str	r1, [r0]
 7190 019a 1344     		add	r3, r3, r2
 7191 019c 2A4A     		ldr	r2, .L355+40
 7192 019e 1288     		ldrh	r2, [r2]
 7193 01a0 120A     		lsrs	r2, r2, #8
 7194 01a2 92B2     		uxth	r2, r2
 7195 01a4 D1B2     		uxtb	r1, r2
 7196 01a6 244A     		ldr	r2, .L355+24
 7197 01a8 D154     		strb	r1, [r2, r3]
2032:main.c        ****                     presetArray[valsStart + currentFloat++] = valsCount & 0xff;
 7198              		.loc 1 2032 0
 7199 01aa BA8B     		ldrh	r2, [r7, #28]
 7200 01ac 1F4B     		ldr	r3, .L355+12
 7201 01ae 1B68     		ldr	r3, [r3]
 7202 01b0 591C     		adds	r1, r3, #1
 7203 01b2 1E48     		ldr	r0, .L355+12
 7204 01b4 0160     		str	r1, [r0]
 7205 01b6 1344     		add	r3, r3, r2
 7206 01b8 234A     		ldr	r2, .L355+40
 7207 01ba 1288     		ldrh	r2, [r2]
 7208 01bc D1B2     		uxtb	r1, r2
 7209 01be 1E4A     		ldr	r2, .L355+24
 7210 01c0 D154     		strb	r1, [r2, r3]
 7211 01c2 BCE1     		b	.L324
 7212              	.L318:
2033:main.c        ****                 }
2034:main.c        ****                 else if (currentFloat < ((valsCount+1)*2))
 7213              		.loc 1 2034 0
 7214 01c4 204B     		ldr	r3, .L355+40
 7215 01c6 1B88     		ldrh	r3, [r3]
 7216 01c8 0133     		adds	r3, r3, #1
 7217 01ca 5B00     		lsls	r3, r3, #1
 7218 01cc 1A46     		mov	r2, r3
 7219 01ce 174B     		ldr	r3, .L355+12
 7220 01d0 1B68     		ldr	r3, [r3]
 7221 01d2 9A42     		cmp	r2, r3
 7222 01d4 3CD9     		bls	.L320
 7223              	.LBB36:
2035:main.c        ****                 { 
2036:main.c        ****                     uint16_t intVal = (uint16_t)(theVal.f * 65535.0f);
 7224              		.loc 1 2036 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 165


 7225 01d6 BB68     		ldr	r3, [r7, #8]	@ float
 7226 01d8 1C49     		ldr	r1, .L355+44
 7227 01da 1846     		mov	r0, r3
 7228 01dc FFF7FEFF 		bl	__aeabi_fmul
 7229 01e0 0346     		mov	r3, r0
 7230 01e2 1846     		mov	r0, r3
 7231 01e4 FFF7FEFF 		bl	__aeabi_f2uiz
 7232 01e8 0346     		mov	r3, r0
 7233 01ea 7B83     		strh	r3, [r7, #26]	@ movhi
2037:main.c        ****                     presetArray[valsStart + currentFloat++] = intVal >> 8;
 7234              		.loc 1 2037 0
 7235 01ec BA8B     		ldrh	r2, [r7, #28]
 7236 01ee 0F4B     		ldr	r3, .L355+12
 7237 01f0 1B68     		ldr	r3, [r3]
 7238 01f2 591C     		adds	r1, r3, #1
 7239 01f4 0D48     		ldr	r0, .L355+12
 7240 01f6 0160     		str	r1, [r0]
 7241 01f8 1344     		add	r3, r3, r2
 7242 01fa 7A8B     		ldrh	r2, [r7, #26]
 7243 01fc 120A     		lsrs	r2, r2, #8
 7244 01fe 92B2     		uxth	r2, r2
 7245 0200 D1B2     		uxtb	r1, r2
 7246 0202 0D4A     		ldr	r2, .L355+24
 7247 0204 D154     		strb	r1, [r2, r3]
2038:main.c        ****                     presetArray[valsStart + currentFloat++] = intVal & 0xff;
 7248              		.loc 1 2038 0
 7249 0206 BA8B     		ldrh	r2, [r7, #28]
 7250 0208 084B     		ldr	r3, .L355+12
 7251 020a 1B68     		ldr	r3, [r3]
 7252 020c 591C     		adds	r1, r3, #1
 7253 020e 0748     		ldr	r0, .L355+12
 7254 0210 0160     		str	r1, [r0]
 7255 0212 1344     		add	r3, r3, r2
 7256 0214 7A8B     		ldrh	r2, [r7, #26]	@ movhi
 7257 0216 D1B2     		uxtb	r1, r2
 7258 0218 074A     		ldr	r2, .L355+24
 7259 021a D154     		strb	r1, [r2, r3]
 7260              	.LBE36:
 7261 021c 8FE1     		b	.L324
 7262              	.L356:
 7263 021e 00BF     		.align	2
 7264              	.L355:
 7265 0220 00000000 		.word	parsingSysex
 7266 0224 00000000 		.word	sysexBuffer
 7267 0228 00000000 		.word	sysexMessageInProgress
 7268 022c 00000000 		.word	currentFloat
 7269 0230 00000000 		.word	presetArraySection
 7270 0234 00000000 		.word	presetNumberToWrite
 7271 0238 00000000 		.word	presetArray
 7272 023c 00000000 		.word	presetNamesArray
 7273 0240 00000000 		.word	macroNamesArray
 7274 0244 00000000 		.word	testVal
 7275 0248 00000000 		.word	valsCount
 7276 024c 00FF7F47 		.word	1199570688
 7277              	.L320:
2039:main.c        ****                 }
2040:main.c        ****                 else if (currentFloat == ((valsCount+1)*2))
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 166


 7278              		.loc 1 2040 0
 7279 0250 854B     		ldr	r3, .L357
 7280 0252 1B88     		ldrh	r3, [r3]
 7281 0254 0133     		adds	r3, r3, #1
 7282 0256 5B00     		lsls	r3, r3, #1
 7283 0258 1A46     		mov	r2, r3
 7284 025a 844B     		ldr	r3, .L357+4
 7285 025c 1B68     		ldr	r3, [r3]
 7286 025e 9A42     		cmp	r2, r3
 7287 0260 40F06D81 		bne	.L324
2041:main.c        ****                 {
2042:main.c        ****                     valCheck = theVal.f;
 7288              		.loc 1 2042 0
 7289 0264 BB68     		ldr	r3, [r7, #8]	@ float
 7290 0266 824A     		ldr	r2, .L357+8
 7291 0268 1360     		str	r3, [r2]	@ float
2043:main.c        ****                     if ((valCheck < -1.5f) && (valCheck > -2.5f))
 7292              		.loc 1 2043 0
 7293 026a 814B     		ldr	r3, .L357+8
 7294 026c 1B68     		ldr	r3, [r3]	@ float
 7295 026e 8149     		ldr	r1, .L357+12
 7296 0270 1846     		mov	r0, r3
 7297 0272 FFF7FEFF 		bl	__aeabi_fcmplt
 7298 0276 0346     		mov	r3, r0
 7299 0278 002B     		cmp	r3, #0
 7300 027a 23D0     		beq	.L321
 7301              		.loc 1 2043 0 is_stmt 0 discriminator 1
 7302 027c 7C4B     		ldr	r3, .L357+8
 7303 027e 1B68     		ldr	r3, [r3]	@ float
 7304 0280 7D49     		ldr	r1, .L357+16
 7305 0282 1846     		mov	r0, r3
 7306 0284 FFF7FEFF 		bl	__aeabi_fcmpgt
 7307 0288 0346     		mov	r3, r0
 7308 028a 002B     		cmp	r3, #0
 7309 028c 1AD0     		beq	.L321
2044:main.c        ****                     {
2045:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xef;
 7310              		.loc 1 2045 0 is_stmt 1
 7311 028e BA8B     		ldrh	r2, [r7, #28]
 7312 0290 764B     		ldr	r3, .L357+4
 7313 0292 1B68     		ldr	r3, [r3]
 7314 0294 591C     		adds	r1, r3, #1
 7315 0296 7548     		ldr	r0, .L357+4
 7316 0298 0160     		str	r1, [r0]
 7317 029a 1344     		add	r3, r3, r2
 7318 029c 774A     		ldr	r2, .L357+20
 7319 029e EF21     		movs	r1, #239
 7320 02a0 D154     		strb	r1, [r2, r3]
2046:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xef;
 7321              		.loc 1 2046 0
 7322 02a2 BA8B     		ldrh	r2, [r7, #28]
 7323 02a4 714B     		ldr	r3, .L357+4
 7324 02a6 1B68     		ldr	r3, [r3]
 7325 02a8 591C     		adds	r1, r3, #1
 7326 02aa 7048     		ldr	r0, .L357+4
 7327 02ac 0160     		str	r1, [r0]
 7328 02ae 1344     		add	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 167


 7329 02b0 724A     		ldr	r2, .L357+20
 7330 02b2 EF21     		movs	r1, #239
 7331 02b4 D154     		strb	r1, [r2, r3]
2047:main.c        ****                         presetArraySection = mapCountNext;
 7332              		.loc 1 2047 0
 7333 02b6 724B     		ldr	r3, .L357+24
 7334 02b8 0322     		movs	r2, #3
 7335 02ba 1A70     		strb	r2, [r3]
2048:main.c        ****                         mapCount = 0;
 7336              		.loc 1 2048 0
 7337 02bc 714B     		ldr	r3, .L357+28
 7338 02be 0022     		movs	r2, #0
 7339 02c0 1A60     		str	r2, [r3]
 7340 02c2 3CE1     		b	.L324
 7341              	.L321:
2049:main.c        ****                     }
2050:main.c        ****                     else
2051:main.c        ****                     {
2052:main.c        ****                         //error state
2053:main.c        ****                         SPI_errors++;
 7342              		.loc 1 2053 0
 7343 02c4 704B     		ldr	r3, .L357+32
 7344 02c6 1B68     		ldr	r3, [r3]
 7345 02c8 0133     		adds	r3, r3, #1
 7346 02ca 6F4A     		ldr	r2, .L357+32
 7347 02cc 1360     		str	r3, [r2]
2054:main.c        ****                         sysexMessageInProgress = 0;
 7348              		.loc 1 2054 0
 7349 02ce 6F4B     		ldr	r3, .L357+36
 7350 02d0 0022     		movs	r2, #0
 7351 02d2 1A70     		strb	r2, [r3]
2055:main.c        ****                         sysexPointer = 0;
 7352              		.loc 1 2055 0
 7353 02d4 6E4B     		ldr	r3, .L357+40
 7354 02d6 0022     		movs	r2, #0
 7355 02d8 1A60     		str	r2, [r3]
2056:main.c        ****                         sendingMessage = 0;
 7356              		.loc 1 2056 0
 7357 02da 6E4B     		ldr	r3, .L357+44
 7358 02dc 0022     		movs	r2, #0
 7359 02de 1A70     		strb	r2, [r3]
2057:main.c        ****                         parseThatMF = 0;
 7360              		.loc 1 2057 0
 7361 02e0 6D4B     		ldr	r3, .L357+48
 7362 02e2 0022     		movs	r2, #0
 7363 02e4 1A70     		strb	r2, [r3]
 7364 02e6 2AE1     		b	.L324
 7365              	.L317:
2058:main.c        ****                     }
2059:main.c        ****                 }
2060:main.c        ****             }
2061:main.c        ****             else if (presetArraySection == mapCountNext)
 7366              		.loc 1 2061 0
 7367 02e8 654B     		ldr	r3, .L357+24
 7368 02ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7369 02ec 032B     		cmp	r3, #3
 7370 02ee 28D1     		bne	.L325
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 168


2062:main.c        ****             {
2063:main.c        ****                 mapCountExpectation = (uint16_t)theVal.f;
 7371              		.loc 1 2063 0
 7372 02f0 BB68     		ldr	r3, [r7, #8]	@ float
 7373 02f2 1846     		mov	r0, r3
 7374 02f4 FFF7FEFF 		bl	__aeabi_f2uiz
 7375 02f8 0346     		mov	r3, r0
 7376 02fa 9AB2     		uxth	r2, r3
 7377 02fc 674B     		ldr	r3, .L357+52
 7378 02fe 1A80     		strh	r2, [r3]	@ movhi
2064:main.c        ****                 presetArray[valsStart + currentFloat++] = mapCountExpectation >> 8;
 7379              		.loc 1 2064 0
 7380 0300 BA8B     		ldrh	r2, [r7, #28]
 7381 0302 5A4B     		ldr	r3, .L357+4
 7382 0304 1B68     		ldr	r3, [r3]
 7383 0306 591C     		adds	r1, r3, #1
 7384 0308 5848     		ldr	r0, .L357+4
 7385 030a 0160     		str	r1, [r0]
 7386 030c 1344     		add	r3, r3, r2
 7387 030e 634A     		ldr	r2, .L357+52
 7388 0310 1288     		ldrh	r2, [r2]
 7389 0312 120A     		lsrs	r2, r2, #8
 7390 0314 92B2     		uxth	r2, r2
 7391 0316 D1B2     		uxtb	r1, r2
 7392 0318 584A     		ldr	r2, .L357+20
 7393 031a D154     		strb	r1, [r2, r3]
2065:main.c        ****                 presetArray[valsStart + currentFloat++] = mapCountExpectation & 0xff;
 7394              		.loc 1 2065 0
 7395 031c BA8B     		ldrh	r2, [r7, #28]
 7396 031e 534B     		ldr	r3, .L357+4
 7397 0320 1B68     		ldr	r3, [r3]
 7398 0322 591C     		adds	r1, r3, #1
 7399 0324 5148     		ldr	r0, .L357+4
 7400 0326 0160     		str	r1, [r0]
 7401 0328 1344     		add	r3, r3, r2
 7402 032a 5C4A     		ldr	r2, .L357+52
 7403 032c 1288     		ldrh	r2, [r2]
 7404 032e D1B2     		uxtb	r1, r2
 7405 0330 524A     		ldr	r2, .L357+20
 7406 0332 D154     		strb	r1, [r2, r3]
2066:main.c        ****                 presetArraySection = mapping;
 7407              		.loc 1 2066 0
 7408 0334 524B     		ldr	r3, .L357+24
 7409 0336 0422     		movs	r2, #4
 7410 0338 1A70     		strb	r2, [r3]
2067:main.c        ****                 numMappings = 0;
 7411              		.loc 1 2067 0
 7412 033a 594B     		ldr	r3, .L357+56
 7413 033c 0022     		movs	r2, #0
 7414 033e 1A80     		strh	r2, [r3]	@ movhi
 7415 0340 FDE0     		b	.L324
 7416              	.L325:
2068:main.c        ****             }
2069:main.c        ****             else if (presetArraySection == mapping)
 7417              		.loc 1 2069 0
 7418 0342 4F4B     		ldr	r3, .L357+24
 7419 0344 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 169


 7420 0346 042B     		cmp	r3, #4
 7421 0348 40F0F980 		bne	.L324
2070:main.c        ****             {
2071:main.c        ****                 // this is the order
2072:main.c        ****                 // source (int), target (int), scalarSource (arrives as -1.0f if no scalar, send as
2073:main.c        ****                 if (numMappings < mapCountExpectation)
 7422              		.loc 1 2073 0
 7423 034c 544B     		ldr	r3, .L357+56
 7424 034e 1A88     		ldrh	r2, [r3]
 7425 0350 524B     		ldr	r3, .L357+52
 7426 0352 1B88     		ldrh	r3, [r3]
 7427 0354 9A42     		cmp	r2, r3
 7428 0356 80F0A780 		bcs	.L326
2074:main.c        ****                 {
2075:main.c        ****                     if ((mapCount % 4) == 0)
 7429              		.loc 1 2075 0
 7430 035a 4A4B     		ldr	r3, .L357+28
 7431 035c 1B68     		ldr	r3, [r3]
 7432 035e 03F00303 		and	r3, r3, #3
 7433 0362 002B     		cmp	r3, #0
 7434 0364 0FD1     		bne	.L327
2076:main.c        ****                     {
2077:main.c        ****                         presetArray[valsStart + currentFloat++] = (uint8_t)theVal.f;
 7435              		.loc 1 2077 0
 7436 0366 BA8B     		ldrh	r2, [r7, #28]
 7437 0368 404B     		ldr	r3, .L357+4
 7438 036a 1B68     		ldr	r3, [r3]
 7439 036c 591C     		adds	r1, r3, #1
 7440 036e 3F48     		ldr	r0, .L357+4
 7441 0370 0160     		str	r1, [r0]
 7442 0372 D418     		adds	r4, r2, r3
 7443 0374 BB68     		ldr	r3, [r7, #8]	@ float
 7444 0376 1846     		mov	r0, r3
 7445 0378 FFF7FEFF 		bl	__aeabi_f2uiz
 7446 037c 0346     		mov	r3, r0
 7447 037e DAB2     		uxtb	r2, r3
 7448 0380 3E4B     		ldr	r3, .L357+20
 7449 0382 1A55     		strb	r2, [r3, r4]
 7450 0384 69E0     		b	.L328
 7451              	.L327:
2078:main.c        ****                     }
2079:main.c        ****                     else if  (mapCount % 4 == 1)
 7452              		.loc 1 2079 0
 7453 0386 3F4B     		ldr	r3, .L357+28
 7454 0388 1B68     		ldr	r3, [r3]
 7455 038a 03F00303 		and	r3, r3, #3
 7456 038e 012B     		cmp	r3, #1
 7457 0390 0FD1     		bne	.L329
2080:main.c        ****                     {
2081:main.c        ****                         presetArray[valsStart + currentFloat++] = (uint8_t)theVal.f;
 7458              		.loc 1 2081 0
 7459 0392 BA8B     		ldrh	r2, [r7, #28]
 7460 0394 354B     		ldr	r3, .L357+4
 7461 0396 1B68     		ldr	r3, [r3]
 7462 0398 591C     		adds	r1, r3, #1
 7463 039a 3448     		ldr	r0, .L357+4
 7464 039c 0160     		str	r1, [r0]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 170


 7465 039e D418     		adds	r4, r2, r3
 7466 03a0 BB68     		ldr	r3, [r7, #8]	@ float
 7467 03a2 1846     		mov	r0, r3
 7468 03a4 FFF7FEFF 		bl	__aeabi_f2uiz
 7469 03a8 0346     		mov	r3, r0
 7470 03aa DAB2     		uxtb	r2, r3
 7471 03ac 334B     		ldr	r3, .L357+20
 7472 03ae 1A55     		strb	r2, [r3, r4]
 7473 03b0 53E0     		b	.L328
 7474              	.L329:
2082:main.c        ****                     }
2083:main.c        ****                     else if (mapCount % 4 == 2) //check if the scalar source is -1 (if so send 255 
 7475              		.loc 1 2083 0
 7476 03b2 344B     		ldr	r3, .L357+28
 7477 03b4 1B68     		ldr	r3, [r3]
 7478 03b6 03F00303 		and	r3, r3, #3
 7479 03ba 022B     		cmp	r3, #2
 7480 03bc 23D1     		bne	.L330
2084:main.c        ****                     {
2085:main.c        ****                         if (theVal.f < 0.0f)
 7481              		.loc 1 2085 0
 7482 03be BB68     		ldr	r3, [r7, #8]	@ float
 7483 03c0 4FF00001 		mov	r1, #0
 7484 03c4 1846     		mov	r0, r3
 7485 03c6 FFF7FEFF 		bl	__aeabi_fcmplt
 7486 03ca 0346     		mov	r3, r0
 7487 03cc 002B     		cmp	r3, #0
 7488 03ce 0AD0     		beq	.L354
2086:main.c        ****                         {
2087:main.c        ****                              presetArray[valsStart + currentFloat++] = 0xff;
 7489              		.loc 1 2087 0
 7490 03d0 BA8B     		ldrh	r2, [r7, #28]
 7491 03d2 264B     		ldr	r3, .L357+4
 7492 03d4 1B68     		ldr	r3, [r3]
 7493 03d6 591C     		adds	r1, r3, #1
 7494 03d8 2448     		ldr	r0, .L357+4
 7495 03da 0160     		str	r1, [r0]
 7496 03dc 1344     		add	r3, r3, r2
 7497 03de 274A     		ldr	r2, .L357+20
 7498 03e0 FF21     		movs	r1, #255
 7499 03e2 D154     		strb	r1, [r2, r3]
 7500 03e4 39E0     		b	.L328
 7501              	.L354:
2088:main.c        ****                         }
2089:main.c        ****                         else
2090:main.c        ****                         {
2091:main.c        ****                              presetArray[valsStart + currentFloat++] = (uint8_t)theVal.f;
 7502              		.loc 1 2091 0
 7503 03e6 BA8B     		ldrh	r2, [r7, #28]
 7504 03e8 204B     		ldr	r3, .L357+4
 7505 03ea 1B68     		ldr	r3, [r3]
 7506 03ec 591C     		adds	r1, r3, #1
 7507 03ee 1F48     		ldr	r0, .L357+4
 7508 03f0 0160     		str	r1, [r0]
 7509 03f2 D418     		adds	r4, r2, r3
 7510 03f4 BB68     		ldr	r3, [r7, #8]	@ float
 7511 03f6 1846     		mov	r0, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 171


 7512 03f8 FFF7FEFF 		bl	__aeabi_f2uiz
 7513 03fc 0346     		mov	r3, r0
 7514 03fe DAB2     		uxtb	r2, r3
 7515 0400 1E4B     		ldr	r3, .L357+20
 7516 0402 1A55     		strb	r2, [r3, r4]
 7517 0404 29E0     		b	.L328
 7518              	.L330:
 7519              	.LBB37:
2092:main.c        ****                         }
2093:main.c        ****                     }
2094:main.c        ****                     else
2095:main.c        ****                     {
2096:main.c        ****                         int16_t intVal = (int16_t)(theVal.f * 32767.0f); //keep it signed to allow 
 7520              		.loc 1 2096 0
 7521 0406 BB68     		ldr	r3, [r7, #8]	@ float
 7522 0408 2649     		ldr	r1, .L357+60
 7523 040a 1846     		mov	r0, r3
 7524 040c FFF7FEFF 		bl	__aeabi_fmul
 7525 0410 0346     		mov	r3, r0
 7526 0412 1846     		mov	r0, r3
 7527 0414 FFF7FEFF 		bl	__aeabi_f2iz
 7528 0418 0346     		mov	r3, r0
 7529 041a 3B83     		strh	r3, [r7, #24]	@ movhi
2097:main.c        ****                         presetArray[valsStart + currentFloat++] = intVal >> 8;
 7530              		.loc 1 2097 0
 7531 041c BA8B     		ldrh	r2, [r7, #28]
 7532 041e 134B     		ldr	r3, .L357+4
 7533 0420 1B68     		ldr	r3, [r3]
 7534 0422 591C     		adds	r1, r3, #1
 7535 0424 1148     		ldr	r0, .L357+4
 7536 0426 0160     		str	r1, [r0]
 7537 0428 1344     		add	r3, r3, r2
 7538 042a B7F91820 		ldrsh	r2, [r7, #24]
 7539 042e 1212     		asrs	r2, r2, #8
 7540 0430 12B2     		sxth	r2, r2
 7541 0432 D1B2     		uxtb	r1, r2
 7542 0434 114A     		ldr	r2, .L357+20
 7543 0436 D154     		strb	r1, [r2, r3]
2098:main.c        ****                         presetArray[valsStart + currentFloat++] = intVal & 0xff;
 7544              		.loc 1 2098 0
 7545 0438 BA8B     		ldrh	r2, [r7, #28]
 7546 043a 0C4B     		ldr	r3, .L357+4
 7547 043c 1B68     		ldr	r3, [r3]
 7548 043e 591C     		adds	r1, r3, #1
 7549 0440 0A48     		ldr	r0, .L357+4
 7550 0442 0160     		str	r1, [r0]
 7551 0444 1344     		add	r3, r3, r2
 7552 0446 3A8B     		ldrh	r2, [r7, #24]	@ movhi
 7553 0448 D1B2     		uxtb	r1, r2
 7554 044a 0C4A     		ldr	r2, .L357+20
 7555 044c D154     		strb	r1, [r2, r3]
2099:main.c        ****                         numMappings++;
 7556              		.loc 1 2099 0
 7557 044e 144B     		ldr	r3, .L357+56
 7558 0450 1B88     		ldrh	r3, [r3]
 7559 0452 0133     		adds	r3, r3, #1
 7560 0454 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 172


 7561 0456 124B     		ldr	r3, .L357+56
 7562 0458 1A80     		strh	r2, [r3]	@ movhi
 7563              	.L328:
 7564              	.LBE37:
2100:main.c        ****                     }
2101:main.c        ****                     mapCount++;
 7565              		.loc 1 2101 0
 7566 045a 0A4B     		ldr	r3, .L357+28
 7567 045c 1B68     		ldr	r3, [r3]
 7568 045e 0133     		adds	r3, r3, #1
 7569 0460 084A     		ldr	r2, .L357+28
 7570 0462 1360     		str	r3, [r2]
 7571 0464 6BE0     		b	.L324
 7572              	.L358:
 7573 0466 00BF     		.align	2
 7574              	.L357:
 7575 0468 00000000 		.word	valsCount
 7576 046c 00000000 		.word	currentFloat
 7577 0470 00000000 		.word	valCheck
 7578 0474 0000C0BF 		.word	-1077936128
 7579 0478 000020C0 		.word	-1071644672
 7580 047c 00000000 		.word	presetArray
 7581 0480 00000000 		.word	presetArraySection
 7582 0484 00000000 		.word	mapCount
 7583 0488 00000000 		.word	SPI_errors
 7584 048c 00000000 		.word	sysexMessageInProgress
 7585 0490 00000000 		.word	sysexPointer
 7586 0494 00000000 		.word	sendingMessage
 7587 0498 00000000 		.word	parseThatMF
 7588 049c 00000000 		.word	mapCountExpectation
 7589 04a0 00000000 		.word	numMappings
 7590 04a4 00FEFF46 		.word	1191181824
 7591              	.L326:
2102:main.c        ****                 }
2103:main.c        ****                 
2104:main.c        **** 
2105:main.c        ****                 else
2106:main.c        ****                 {
2107:main.c        ****                     //mapcount ended
2108:main.c        ****                     if ((theVal.f < -2.5f) && (theVal.f > -3.5f))
 7592              		.loc 1 2108 0
 7593 04a8 BB68     		ldr	r3, [r7, #8]	@ float
 7594 04aa 6349     		ldr	r1, .L359
 7595 04ac 1846     		mov	r0, r3
 7596 04ae FFF7FEFF 		bl	__aeabi_fcmplt
 7597 04b2 0346     		mov	r3, r0
 7598 04b4 002B     		cmp	r3, #0
 7599 04b6 31D0     		beq	.L334
 7600              		.loc 1 2108 0 is_stmt 0 discriminator 1
 7601 04b8 BB68     		ldr	r3, [r7, #8]	@ float
 7602 04ba 6049     		ldr	r1, .L359+4
 7603 04bc 1846     		mov	r0, r3
 7604 04be FFF7FEFF 		bl	__aeabi_fcmpgt
 7605 04c2 0346     		mov	r3, r0
 7606 04c4 002B     		cmp	r3, #0
 7607 04c6 29D0     		beq	.L334
2109:main.c        ****                     {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 173


2110:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xfe;
 7608              		.loc 1 2110 0 is_stmt 1
 7609 04c8 BA8B     		ldrh	r2, [r7, #28]
 7610 04ca 5D4B     		ldr	r3, .L359+8
 7611 04cc 1B68     		ldr	r3, [r3]
 7612 04ce 591C     		adds	r1, r3, #1
 7613 04d0 5B48     		ldr	r0, .L359+8
 7614 04d2 0160     		str	r1, [r0]
 7615 04d4 1344     		add	r3, r3, r2
 7616 04d6 5B4A     		ldr	r2, .L359+12
 7617 04d8 FE21     		movs	r1, #254
 7618 04da D154     		strb	r1, [r2, r3]
2111:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xfe;
 7619              		.loc 1 2111 0
 7620 04dc BA8B     		ldrh	r2, [r7, #28]
 7621 04de 584B     		ldr	r3, .L359+8
 7622 04e0 1B68     		ldr	r3, [r3]
 7623 04e2 591C     		adds	r1, r3, #1
 7624 04e4 5648     		ldr	r0, .L359+8
 7625 04e6 0160     		str	r1, [r0]
 7626 04e8 1344     		add	r3, r3, r2
 7627 04ea 564A     		ldr	r2, .L359+12
 7628 04ec FE21     		movs	r1, #254
 7629 04ee D154     		strb	r1, [r2, r3]
2112:main.c        ****                         presetArraySection = presetEnd;
 7630              		.loc 1 2112 0
 7631 04f0 554B     		ldr	r3, .L359+16
 7632 04f2 0522     		movs	r2, #5
 7633 04f4 1A70     		strb	r2, [r3]
2113:main.c        ****                         sysexMessageInProgress = 0;
 7634              		.loc 1 2113 0
 7635 04f6 554B     		ldr	r3, .L359+20
 7636 04f8 0022     		movs	r2, #0
 7637 04fa 1A70     		strb	r2, [r3]
2114:main.c        ****                         sendingMessage = 1;
 7638              		.loc 1 2114 0
 7639 04fc 544B     		ldr	r3, .L359+24
 7640 04fe 0122     		movs	r2, #1
 7641 0500 1A70     		strb	r2, [r3]
2115:main.c        ****                         patchNum = presetNumberToWrite;
 7642              		.loc 1 2115 0
 7643 0502 544B     		ldr	r3, .L359+28
 7644 0504 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 7645 0506 544B     		ldr	r3, .L359+32
 7646 0508 1A70     		strb	r2, [r3]
2116:main.c        ****                         messageArraySize = valsStart + currentFloat;
 7647              		.loc 1 2116 0
 7648 050a 4D4B     		ldr	r3, .L359+8
 7649 050c 1B68     		ldr	r3, [r3]
 7650 050e 9AB2     		uxth	r2, r3
 7651 0510 BB8B     		ldrh	r3, [r7, #28]	@ movhi
 7652 0512 1344     		add	r3, r3, r2
 7653 0514 9AB2     		uxth	r2, r3
 7654 0516 514B     		ldr	r3, .L359+36
 7655 0518 1A80     		strh	r2, [r3]	@ movhi
 7656 051a 10E0     		b	.L324
 7657              	.L334:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 174


2117:main.c        ****                     }
2118:main.c        ****                     else
2119:main.c        ****                     {
2120:main.c        ****                         //error state
2121:main.c        ****                         SPI_errors++;
 7658              		.loc 1 2121 0
 7659 051c 504B     		ldr	r3, .L359+40
 7660 051e 1B68     		ldr	r3, [r3]
 7661 0520 0133     		adds	r3, r3, #1
 7662 0522 4F4A     		ldr	r2, .L359+40
 7663 0524 1360     		str	r3, [r2]
2122:main.c        ****                         sysexMessageInProgress = 0;
 7664              		.loc 1 2122 0
 7665 0526 494B     		ldr	r3, .L359+20
 7666 0528 0022     		movs	r2, #0
 7667 052a 1A70     		strb	r2, [r3]
2123:main.c        ****                         sysexPointer = 0;
 7668              		.loc 1 2123 0
 7669 052c 4D4B     		ldr	r3, .L359+44
 7670 052e 0022     		movs	r2, #0
 7671 0530 1A60     		str	r2, [r3]
2124:main.c        ****                         sendingMessage = 0;
 7672              		.loc 1 2124 0
 7673 0532 474B     		ldr	r3, .L359+24
 7674 0534 0022     		movs	r2, #0
 7675 0536 1A70     		strb	r2, [r3]
2125:main.c        ****                         parseThatMF = 0;
 7676              		.loc 1 2125 0
 7677 0538 4B4B     		ldr	r3, .L359+48
 7678 053a 0022     		movs	r2, #0
 7679 053c 1A70     		strb	r2, [r3]
 7680              	.L324:
2016:main.c        ****         {
 7681              		.loc 1 2016 0
 7682 053e 7B6B     		ldr	r3, [r7, #52]
 7683 0540 0533     		adds	r3, r3, #5
 7684 0542 7B63     		str	r3, [r7, #52]
 7685              	.L316:
2016:main.c        ****         {
 7686              		.loc 1 2016 0 is_stmt 0 discriminator 1
 7687 0544 474B     		ldr	r3, .L359+44
 7688 0546 1B68     		ldr	r3, [r3]
 7689 0548 7A6B     		ldr	r2, [r7, #52]
 7690 054a 9A42     		cmp	r2, r3
 7691 054c FFF4E0AD 		bcc	.L337
 7692 0550 A5E1     		b	.L338
 7693              	.L309:
 7694              	.LBE33:
2126:main.c        ****                     }
2127:main.c        ****                 }
2128:main.c        ****             }
2129:main.c        ****             
2130:main.c        ****         }
2131:main.c        ****     }
2132:main.c        ****     #if 0
2133:main.c        ****     else if (sysexBuffer[0] == 1) //its a tuning
2134:main.c        ****     {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 175


2135:main.c        ****         
2136:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
2137:main.c        ****         currentFloat = 0;
2138:main.c        ****         presetNumberToWrite = sysexBuffer[1];
2139:main.c        ****         union breakFloat theVal;
2140:main.c        ****         for (uint32_t i = 2; i < sysexPointer; i = i+5)
2141:main.c        ****         {
2142:main.c        ****             theVal.u32 = 0;
2143:main.c        ****             theVal.u32 |= ((sysexBuffer[i] &15) << 28);
2144:main.c        ****             theVal.u32 |= (sysexBuffer[i+1] << 21);
2145:main.c        ****             theVal.u32 |= (sysexBuffer[i+2] << 14);
2146:main.c        ****             theVal.u32 |= (sysexBuffer[i+3] << 7);
2147:main.c        ****             theVal.u32 |= (sysexBuffer[i+4] & 127);
2148:main.c        ****             testVal = theVal.f;
2149:main.c        ****             uint16_t intVal = (uint16_t)(theVal.f * 512.0f);//(uint16_t)(theVal.f * 65535.0f);
2150:main.c        ****             tuningArray[currentFloat++] = intVal >> 8;
2151:main.c        ****             tuningArray[currentFloat++] = intVal & 0xff;
2152:main.c        ****         }
2153:main.c        ****         
2154:main.c        ****         tuningArray[currentFloat++] = 0xef;
2155:main.c        ****         tuningArray[currentFloat++] = 0xef;
2156:main.c        ****                         
2157:main.c        ****         
2158:main.c        ****         messageArraySize = currentFloat;
2159:main.c        ****                     
2160:main.c        ****         if(messageArraySize != TUNING_ARRAY_SIZE)
2161:main.c        ****         {
2162:main.c        ****             //error state
2163:main.c        ****             SPI_errors++;
2164:main.c        ****             sysexMessageInProgress = 0;
2165:main.c        ****             sysexPointer = 0;
2166:main.c        ****             sendingMessage = 0;
2167:main.c        ****             parseThatMF = 0;
2168:main.c        ****         } else 
2169:main.c        ****         {
2170:main.c        ****             sysexMessageInProgress = 0;
2171:main.c        ****             sendingMessage = 2;
2172:main.c        ****         }
2173:main.c        ****     }
2174:main.c        ****     #endif
2175:main.c        ****     else if (sysexBuffer[0] == 2) //its a copedent
 7695              		.loc 1 2175 0 is_stmt 1
 7696 0552 464B     		ldr	r3, .L359+52
 7697 0554 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7698 0556 022B     		cmp	r3, #2
 7699 0558 40F0A181 		bne	.L338
 7700              	.LBB38:
2176:main.c        ****     {
2177:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
 7701              		.loc 1 2177 0
 7702 055c 3B4B     		ldr	r3, .L359+20
 7703 055e 0122     		movs	r2, #1
 7704 0560 1A70     		strb	r2, [r3]
2178:main.c        ****         currentFloat = 0;
 7705              		.loc 1 2178 0
 7706 0562 374B     		ldr	r3, .L359+8
 7707 0564 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 176


 7708 0566 1A60     		str	r2, [r3]
2179:main.c        ****         copedentNumberToWrite = sysexBuffer[1];
 7709              		.loc 1 2179 0
 7710 0568 404B     		ldr	r3, .L359+52
 7711 056a 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 7712 056c 404B     		ldr	r3, .L359+56
 7713 056e 1A70     		strb	r2, [r3]
2180:main.c        ****         currentCopedent = copedentNumberToWrite;
 7714              		.loc 1 2180 0
 7715 0570 3F4B     		ldr	r3, .L359+56
 7716 0572 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 7717 0574 3F4B     		ldr	r3, .L359+60
 7718 0576 1A70     		strb	r2, [r3]
2181:main.c        ****         necks[currentNeck] = currentCopedent;
 7719              		.loc 1 2181 0
 7720 0578 3F4B     		ldr	r3, .L359+64
 7721 057a 1B68     		ldr	r3, [r3]
 7722 057c 3D4A     		ldr	r2, .L359+60
 7723 057e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 7724 0580 3E4A     		ldr	r2, .L359+68
 7725 0582 D154     		strb	r1, [r2, r3]
2182:main.c        **** 
2183:main.c        ****               
2184:main.c        ****         
2185:main.c        ****         union breakFloat theVal;
2186:main.c        ****         uint32_t i = 2;
 7726              		.loc 1 2186 0
 7727 0584 0223     		movs	r3, #2
 7728 0586 BB62     		str	r3, [r7, #40]
2187:main.c        ****         uint8_t stoppingPoint = NAME_LENGTH_IN_BYTES+2;
 7729              		.loc 1 2187 0
 7730 0588 1023     		movs	r3, #16
 7731 058a FB75     		strb	r3, [r7, #23]
2188:main.c        ****         for (; i < stoppingPoint; i++)
 7732              		.loc 1 2188 0
 7733 058c 3DE0     		b	.L339
 7734              	.L340:
 7735              	.LBB39:
2189:main.c        ****         {
2190:main.c        ****             //presetArray[i-2] = sysexBuffer[i] & 127; // pass on the first 14 elements as 8-bit by
2191:main.c        ****             uint8_t tempChar = sysexBuffer[i] & 127;
 7736              		.loc 1 2191 0 discriminator 2
 7737 058e 374A     		ldr	r2, .L359+52
 7738 0590 BB6A     		ldr	r3, [r7, #40]
 7739 0592 1344     		add	r3, r3, r2
 7740 0594 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7741 0596 03F07F03 		and	r3, r3, #127
 7742 059a BB75     		strb	r3, [r7, #22]
2192:main.c        ****             copedentNamesArray[copedentNumberToWrite][i-2] = tempChar;
 7743              		.loc 1 2192 0 discriminator 2
 7744 059c 344B     		ldr	r3, .L359+56
 7745 059e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7746 05a0 1846     		mov	r0, r3
 7747 05a2 BB6A     		ldr	r3, [r7, #40]
 7748 05a4 9A1E     		subs	r2, r3, #2
 7749 05a6 3649     		ldr	r1, .L359+72
 7750 05a8 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 177


 7751 05aa DB00     		lsls	r3, r3, #3
 7752 05ac 1B1A     		subs	r3, r3, r0
 7753 05ae 5B00     		lsls	r3, r3, #1
 7754 05b0 0B44     		add	r3, r3, r1
 7755 05b2 1344     		add	r3, r3, r2
 7756 05b4 BA7D     		ldrb	r2, [r7, #22]
 7757 05b6 1A70     		strb	r2, [r3]
2193:main.c        ****             checkBase = EEPROM_COPEDENT_OFFSET + (COPEDENT_SIZE_IN_BYTES * copedentNumberToWrite);
 7758              		.loc 1 2193 0 discriminator 2
 7759 05b8 2D4B     		ldr	r3, .L359+56
 7760 05ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7761 05bc 1A46     		mov	r2, r3
 7762 05be 9200     		lsls	r2, r2, #2
 7763 05c0 1A44     		add	r2, r2, r3
 7764 05c2 5200     		lsls	r2, r2, #1
 7765 05c4 1344     		add	r3, r3, r2
 7766 05c6 5B00     		lsls	r3, r3, #1
 7767 05c8 DBB2     		uxtb	r3, r3
 7768 05ca 0233     		adds	r3, r3, #2
 7769 05cc DAB2     		uxtb	r2, r3
 7770 05ce 2D4B     		ldr	r3, .L359+76
 7771 05d0 1A70     		strb	r2, [r3]
2194:main.c        ****             checkStatus = EEPROM_WriteByte(tempChar, EEPROM_COPEDENT_OFFSET + (i - 2) + (COPEDENT_S
 7772              		.loc 1 2194 0 discriminator 2
 7773 05d2 274B     		ldr	r3, .L359+56
 7774 05d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7775 05d6 9BB2     		uxth	r3, r3
 7776 05d8 1A46     		mov	r2, r3	@ movhi
 7777 05da 1201     		lsls	r2, r2, #4
 7778 05dc 1A44     		add	r2, r2, r3
 7779 05de 9200     		lsls	r2, r2, #2
 7780 05e0 1A44     		add	r2, r2, r3
 7781 05e2 5200     		lsls	r2, r2, #1
 7782 05e4 1344     		add	r3, r3, r2
 7783 05e6 5B00     		lsls	r3, r3, #1
 7784 05e8 9AB2     		uxth	r2, r3
 7785 05ea BB6A     		ldr	r3, [r7, #40]
 7786 05ec 9BB2     		uxth	r3, r3
 7787 05ee 1344     		add	r3, r3, r2
 7788 05f0 9AB2     		uxth	r2, r3
 7789 05f2 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 7790 05f4 1146     		mov	r1, r2
 7791 05f6 1846     		mov	r0, r3
 7792 05f8 FFF7FEFF 		bl	EEPROM_WriteByte
 7793 05fc 0346     		mov	r3, r0
 7794 05fe DAB2     		uxtb	r2, r3
 7795 0600 214B     		ldr	r3, .L359+80
 7796 0602 1A70     		strb	r2, [r3]
 7797              	.LBE39:
2188:main.c        ****         {
 7798              		.loc 1 2188 0 discriminator 2
 7799 0604 BB6A     		ldr	r3, [r7, #40]
 7800 0606 0133     		adds	r3, r3, #1
 7801 0608 BB62     		str	r3, [r7, #40]
 7802              	.L339:
2188:main.c        ****         {
 7803              		.loc 1 2188 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 178


 7804 060a FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 7805 060c BB6A     		ldr	r3, [r7, #40]
 7806 060e 9A42     		cmp	r2, r3
 7807 0610 BDD8     		bhi	.L340
2195:main.c        ****         }
2196:main.c        ****         
2197:main.c        ****         i = NAME_LENGTH_IN_BYTES + 2; // start after the name storage to store the actual values
 7808              		.loc 1 2197 0 is_stmt 1
 7809 0612 1023     		movs	r3, #16
 7810 0614 BB62     		str	r3, [r7, #40]
2198:main.c        **** 
2199:main.c        ****  
2200:main.c        ****         while(i < sysexPointer)
 7811              		.loc 1 2200 0
 7812 0616 FAE0     		b	.L341
 7813              	.L346:
 7814              	.LBB40:
2201:main.c        ****         {
2202:main.c        ****             for (uint32_t pedalToWrite = 0; pedalToWrite < 11; pedalToWrite++)
 7815              		.loc 1 2202 0
 7816 0618 0023     		movs	r3, #0
 7817 061a 7B62     		str	r3, [r7, #36]
 7818 061c F3E0     		b	.L342
 7819              	.L345:
 7820              	.LBB41:
2203:main.c        ****             {
2204:main.c        ****                 uint16_t pedalStartLoc = (pedalToWrite * 24) + NAME_LENGTH_IN_BYTES;
 7821              		.loc 1 2204 0
 7822 061e 7B6A     		ldr	r3, [r7, #36]
 7823 0620 9BB2     		uxth	r3, r3
 7824 0622 1A46     		mov	r2, r3	@ movhi
 7825 0624 5200     		lsls	r2, r2, #1
 7826 0626 1344     		add	r3, r3, r2
 7827 0628 DB00     		lsls	r3, r3, #3
 7828 062a 9BB2     		uxth	r3, r3
 7829 062c 0E33     		adds	r3, r3, #14
 7830 062e BB82     		strh	r3, [r7, #20]	@ movhi
 7831              	.LBB42:
2205:main.c        ****                 for (uint32_t stringChange = 0; stringChange < 12; stringChange++)
 7832              		.loc 1 2205 0
 7833 0630 0023     		movs	r3, #0
 7834 0632 3B62     		str	r3, [r7, #32]
 7835 0634 E0E0     		b	.L343
 7836              	.L360:
 7837 0636 00BF     		.align	2
 7838              	.L359:
 7839 0638 000020C0 		.word	-1071644672
 7840 063c 000060C0 		.word	-1067450368
 7841 0640 00000000 		.word	currentFloat
 7842 0644 00000000 		.word	presetArray
 7843 0648 00000000 		.word	presetArraySection
 7844 064c 00000000 		.word	sysexMessageInProgress
 7845 0650 00000000 		.word	sendingMessage
 7846 0654 00000000 		.word	presetNumberToWrite
 7847 0658 00000000 		.word	patchNum
 7848 065c 00000000 		.word	messageArraySize
 7849 0660 00000000 		.word	SPI_errors
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 179


 7850 0664 00000000 		.word	sysexPointer
 7851 0668 00000000 		.word	parseThatMF
 7852 066c 00000000 		.word	sysexBuffer
 7853 0670 00000000 		.word	copedentNumberToWrite
 7854 0674 00000000 		.word	currentCopedent
 7855 0678 00000000 		.word	currentNeck
 7856 067c 00000000 		.word	necks
 7857 0680 00000000 		.word	copedentNamesArray
 7858 0684 00000000 		.word	checkBase
 7859 0688 00000000 		.word	checkStatus
 7860              	.L344:
 7861              	.LBB43:
2206:main.c        ****                 {
2207:main.c        ****                     
2208:main.c        ****                     theVal.u32 = 0;
 7862              		.loc 1 2208 0 discriminator 3
 7863 068c 0023     		movs	r3, #0
 7864 068e 7B60     		str	r3, [r7, #4]
2209:main.c        ****                     theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 7865              		.loc 1 2209 0 discriminator 3
 7866 0690 7B68     		ldr	r3, [r7, #4]
 7867 0692 8949     		ldr	r1, .L361
 7868 0694 BA6A     		ldr	r2, [r7, #40]
 7869 0696 0A44     		add	r2, r2, r1
 7870 0698 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7871 069a 1207     		lsls	r2, r2, #28
 7872 069c 1343     		orrs	r3, r3, r2
 7873 069e 7B60     		str	r3, [r7, #4]
2210:main.c        ****                     theVal.u32 |= (sysexBuffer[i+1] << 21);
 7874              		.loc 1 2210 0 discriminator 3
 7875 06a0 7B68     		ldr	r3, [r7, #4]
 7876 06a2 BA6A     		ldr	r2, [r7, #40]
 7877 06a4 0132     		adds	r2, r2, #1
 7878 06a6 8449     		ldr	r1, .L361
 7879 06a8 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7880 06aa 5205     		lsls	r2, r2, #21
 7881 06ac 1343     		orrs	r3, r3, r2
 7882 06ae 7B60     		str	r3, [r7, #4]
2211:main.c        ****                     theVal.u32 |= (sysexBuffer[i+2] << 14);
 7883              		.loc 1 2211 0 discriminator 3
 7884 06b0 7B68     		ldr	r3, [r7, #4]
 7885 06b2 BA6A     		ldr	r2, [r7, #40]
 7886 06b4 0232     		adds	r2, r2, #2
 7887 06b6 8049     		ldr	r1, .L361
 7888 06b8 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7889 06ba 9203     		lsls	r2, r2, #14
 7890 06bc 1343     		orrs	r3, r3, r2
 7891 06be 7B60     		str	r3, [r7, #4]
2212:main.c        ****                     theVal.u32 |= (sysexBuffer[i+3] << 7);
 7892              		.loc 1 2212 0 discriminator 3
 7893 06c0 7B68     		ldr	r3, [r7, #4]
 7894 06c2 BA6A     		ldr	r2, [r7, #40]
 7895 06c4 0332     		adds	r2, r2, #3
 7896 06c6 7C49     		ldr	r1, .L361
 7897 06c8 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7898 06ca D201     		lsls	r2, r2, #7
 7899 06cc 1343     		orrs	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 180


 7900 06ce 7B60     		str	r3, [r7, #4]
2213:main.c        ****                     theVal.u32 |= (sysexBuffer[i+4] & 127);
 7901              		.loc 1 2213 0 discriminator 3
 7902 06d0 7A68     		ldr	r2, [r7, #4]
 7903 06d2 BB6A     		ldr	r3, [r7, #40]
 7904 06d4 0433     		adds	r3, r3, #4
 7905 06d6 7849     		ldr	r1, .L361
 7906 06d8 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 7907 06da 03F07F03 		and	r3, r3, #127
 7908 06de 1343     		orrs	r3, r3, r2
 7909 06e0 7B60     		str	r3, [r7, #4]
2214:main.c        ****                     copedent[copedentNumberToWrite][pedalToWrite][stringChange] = theVal.f;
 7910              		.loc 1 2214 0 discriminator 3
 7911 06e2 764B     		ldr	r3, .L361+4
 7912 06e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7913 06e6 1C46     		mov	r4, r3
 7914 06e8 7968     		ldr	r1, [r7, #4]	@ float
 7915 06ea 7548     		ldr	r0, .L361+8
 7916 06ec 7B6A     		ldr	r3, [r7, #36]
 7917 06ee 1A46     		mov	r2, r3
 7918 06f0 5200     		lsls	r2, r2, #1
 7919 06f2 1A44     		add	r2, r2, r3
 7920 06f4 9300     		lsls	r3, r2, #2
 7921 06f6 1A46     		mov	r2, r3
 7922 06f8 2346     		mov	r3, r4
 7923 06fa 5B01     		lsls	r3, r3, #5
 7924 06fc 2344     		add	r3, r3, r4
 7925 06fe 9B00     		lsls	r3, r3, #2
 7926 0700 1A44     		add	r2, r2, r3
 7927 0702 3B6A     		ldr	r3, [r7, #32]
 7928 0704 1344     		add	r3, r3, r2
 7929 0706 40F82310 		str	r1, [r0, r3, lsl #2]	@ float
2215:main.c        ****                     uint16_t tempIntVersion = (uint16_t)((theVal.f * 256.0f) + 32768.0f);
 7930              		.loc 1 2215 0 discriminator 3
 7931 070a 7B68     		ldr	r3, [r7, #4]	@ float
 7932 070c 4FF08741 		mov	r1, #1132462080
 7933 0710 1846     		mov	r0, r3
 7934 0712 FFF7FEFF 		bl	__aeabi_fmul
 7935 0716 0346     		mov	r3, r0
 7936 0718 4FF08E41 		mov	r1, #1191182336
 7937 071c 1846     		mov	r0, r3
 7938 071e FFF7FEFF 		bl	__aeabi_fadd
 7939 0722 0346     		mov	r3, r0
 7940 0724 1846     		mov	r0, r3
 7941 0726 FFF7FEFF 		bl	__aeabi_f2uiz
 7942 072a 0346     		mov	r3, r0
 7943 072c 7B82     		strh	r3, [r7, #18]	@ movhi
2216:main.c        ****                     uint8_t tempHigh = tempIntVersion >> 8;
 7944              		.loc 1 2216 0 discriminator 3
 7945 072e 7B8A     		ldrh	r3, [r7, #18]
 7946 0730 1B0A     		lsrs	r3, r3, #8
 7947 0732 9BB2     		uxth	r3, r3
 7948 0734 7B74     		strb	r3, [r7, #17]
2217:main.c        ****                     uint8_t tempLow = tempIntVersion & 255;
 7949              		.loc 1 2217 0 discriminator 3
 7950 0736 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 7951 0738 3B74     		strb	r3, [r7, #16]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 181


2218:main.c        ****                     
2219:main.c        ****                     
2220:main.c        ****                     uint16_t stringStartLoc = stringChange * 2 + NAME_LENGTH_IN_BYTES;
 7952              		.loc 1 2220 0 discriminator 3
 7953 073a 3B6A     		ldr	r3, [r7, #32]
 7954 073c 0733     		adds	r3, r3, #7
 7955 073e 9BB2     		uxth	r3, r3
 7956 0740 5B00     		lsls	r3, r3, #1
 7957 0742 FB81     		strh	r3, [r7, #14]	@ movhi
2221:main.c        ****                     checkBase = EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc + (COPEDENT
 7958              		.loc 1 2221 0 discriminator 3
 7959 0744 FB89     		ldrh	r3, [r7, #14]	@ movhi
 7960 0746 DAB2     		uxtb	r2, r3
 7961 0748 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 7962 074a DBB2     		uxtb	r3, r3
 7963 074c 1344     		add	r3, r3, r2
 7964 074e DAB2     		uxtb	r2, r3
 7965 0750 5A4B     		ldr	r3, .L361+4
 7966 0752 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7967 0754 1946     		mov	r1, r3
 7968 0756 8900     		lsls	r1, r1, #2
 7969 0758 1944     		add	r1, r1, r3
 7970 075a 4900     		lsls	r1, r1, #1
 7971 075c 0B44     		add	r3, r3, r1
 7972 075e 5B00     		lsls	r3, r3, #1
 7973 0760 DBB2     		uxtb	r3, r3
 7974 0762 1344     		add	r3, r3, r2
 7975 0764 DBB2     		uxtb	r3, r3
 7976 0766 0233     		adds	r3, r3, #2
 7977 0768 DAB2     		uxtb	r2, r3
 7978 076a 564B     		ldr	r3, .L361+12
 7979 076c 1A70     		strb	r2, [r3]
2222:main.c        ****                     checkStatus = EEPROM_WriteByte(tempHigh, EEPROM_COPEDENT_OFFSET + stringStartLo
 7980              		.loc 1 2222 0 discriminator 3
 7981 076e FA89     		ldrh	r2, [r7, #14]	@ movhi
 7982 0770 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 7983 0772 1344     		add	r3, r3, r2
 7984 0774 9AB2     		uxth	r2, r3
 7985 0776 514B     		ldr	r3, .L361+4
 7986 0778 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7987 077a 9BB2     		uxth	r3, r3
 7988 077c 1946     		mov	r1, r3	@ movhi
 7989 077e 0901     		lsls	r1, r1, #4
 7990 0780 1944     		add	r1, r1, r3
 7991 0782 8900     		lsls	r1, r1, #2
 7992 0784 1944     		add	r1, r1, r3
 7993 0786 4900     		lsls	r1, r1, #1
 7994 0788 0B44     		add	r3, r3, r1
 7995 078a 5B00     		lsls	r3, r3, #1
 7996 078c 9BB2     		uxth	r3, r3
 7997 078e 1344     		add	r3, r3, r2
 7998 0790 9BB2     		uxth	r3, r3
 7999 0792 0233     		adds	r3, r3, #2
 8000 0794 9AB2     		uxth	r2, r3
 8001 0796 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 8002 0798 1146     		mov	r1, r2
 8003 079a 1846     		mov	r0, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 182


 8004 079c FFF7FEFF 		bl	EEPROM_WriteByte
 8005 07a0 0346     		mov	r3, r0
 8006 07a2 DAB2     		uxtb	r2, r3
 8007 07a4 484B     		ldr	r3, .L361+16
 8008 07a6 1A70     		strb	r2, [r3]
2223:main.c        ****                     checkStatus = EEPROM_WriteByte(tempLow, EEPROM_COPEDENT_OFFSET + stringStartLoc
 8009              		.loc 1 2223 0 discriminator 3
 8010 07a8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 8011 07aa BB8A     		ldrh	r3, [r7, #20]	@ movhi
 8012 07ac 1344     		add	r3, r3, r2
 8013 07ae 9AB2     		uxth	r2, r3
 8014 07b0 424B     		ldr	r3, .L361+4
 8015 07b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8016 07b4 9BB2     		uxth	r3, r3
 8017 07b6 1946     		mov	r1, r3	@ movhi
 8018 07b8 0901     		lsls	r1, r1, #4
 8019 07ba 1944     		add	r1, r1, r3
 8020 07bc 8900     		lsls	r1, r1, #2
 8021 07be 1944     		add	r1, r1, r3
 8022 07c0 4900     		lsls	r1, r1, #1
 8023 07c2 0B44     		add	r3, r3, r1
 8024 07c4 5B00     		lsls	r3, r3, #1
 8025 07c6 9BB2     		uxth	r3, r3
 8026 07c8 1344     		add	r3, r3, r2
 8027 07ca 9BB2     		uxth	r3, r3
 8028 07cc 0333     		adds	r3, r3, #3
 8029 07ce 9AB2     		uxth	r2, r3
 8030 07d0 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 8031 07d2 1146     		mov	r1, r2
 8032 07d4 1846     		mov	r0, r3
 8033 07d6 FFF7FEFF 		bl	EEPROM_WriteByte
 8034 07da 0346     		mov	r3, r0
 8035 07dc DAB2     		uxtb	r2, r3
 8036 07de 3A4B     		ldr	r3, .L361+16
 8037 07e0 1A70     		strb	r2, [r3]
2224:main.c        ****                     currentFloat++;
 8038              		.loc 1 2224 0 discriminator 3
 8039 07e2 3A4B     		ldr	r3, .L361+20
 8040 07e4 1B68     		ldr	r3, [r3]
 8041 07e6 0133     		adds	r3, r3, #1
 8042 07e8 384A     		ldr	r2, .L361+20
 8043 07ea 1360     		str	r3, [r2]
2225:main.c        ****                     i = i+5;
 8044              		.loc 1 2225 0 discriminator 3
 8045 07ec BB6A     		ldr	r3, [r7, #40]
 8046 07ee 0533     		adds	r3, r3, #5
 8047 07f0 BB62     		str	r3, [r7, #40]
 8048              	.LBE43:
2205:main.c        ****                 {
 8049              		.loc 1 2205 0 discriminator 3
 8050 07f2 3B6A     		ldr	r3, [r7, #32]
 8051 07f4 0133     		adds	r3, r3, #1
 8052 07f6 3B62     		str	r3, [r7, #32]
 8053              	.L343:
2205:main.c        ****                 {
 8054              		.loc 1 2205 0 is_stmt 0 discriminator 1
 8055 07f8 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 183


 8056 07fa 0B2B     		cmp	r3, #11
 8057 07fc 7FF646AF 		bls	.L344
 8058              	.LBE42:
 8059              	.LBE41:
2202:main.c        ****             {
 8060              		.loc 1 2202 0 is_stmt 1 discriminator 2
 8061 0800 7B6A     		ldr	r3, [r7, #36]
 8062 0802 0133     		adds	r3, r3, #1
 8063 0804 7B62     		str	r3, [r7, #36]
 8064              	.L342:
2202:main.c        ****             {
 8065              		.loc 1 2202 0 is_stmt 0 discriminator 1
 8066 0806 7B6A     		ldr	r3, [r7, #36]
 8067 0808 0A2B     		cmp	r3, #10
 8068 080a 7FF608AF 		bls	.L345
 8069              	.L341:
 8070              	.LBE40:
2200:main.c        ****         {
 8071              		.loc 1 2200 0 is_stmt 1
 8072 080e 304B     		ldr	r3, .L361+24
 8073 0810 1B68     		ldr	r3, [r3]
 8074 0812 BA6A     		ldr	r2, [r7, #40]
 8075 0814 9A42     		cmp	r2, r3
 8076 0816 FFF4FFAE 		bcc	.L346
2226:main.c        ****                 }
2227:main.c        ****                 
2228:main.c        ****             }
2229:main.c        ****         }
2230:main.c        ****                         
2231:main.c        ****         
2232:main.c        ****         messageArraySize = currentFloat;
 8077              		.loc 1 2232 0
 8078 081a 2C4B     		ldr	r3, .L361+20
 8079 081c 1B68     		ldr	r3, [r3]
 8080 081e 9AB2     		uxth	r2, r3
 8081 0820 2C4B     		ldr	r3, .L361+28
 8082 0822 1A80     		strh	r2, [r3]	@ movhi
2233:main.c        ****                     
2234:main.c        ****         if(messageArraySize != COPEDENT_SIZE_IN_FLOATS)
 8083              		.loc 1 2234 0
 8084 0824 2B4B     		ldr	r3, .L361+28
 8085 0826 1B88     		ldrh	r3, [r3]
 8086 0828 842B     		cmp	r3, #132
 8087 082a 11D0     		beq	.L347
2235:main.c        ****         {
2236:main.c        ****             //error state
2237:main.c        ****             SPI_errors++;
 8088              		.loc 1 2237 0
 8089 082c 2A4B     		ldr	r3, .L361+32
 8090 082e 1B68     		ldr	r3, [r3]
 8091 0830 0133     		adds	r3, r3, #1
 8092 0832 294A     		ldr	r2, .L361+32
 8093 0834 1360     		str	r3, [r2]
2238:main.c        ****             sysexMessageInProgress = 0;
 8094              		.loc 1 2238 0
 8095 0836 294B     		ldr	r3, .L361+36
 8096 0838 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 184


 8097 083a 1A70     		strb	r2, [r3]
2239:main.c        ****             sysexPointer = 0;
 8098              		.loc 1 2239 0
 8099 083c 244B     		ldr	r3, .L361+24
 8100 083e 0022     		movs	r2, #0
 8101 0840 1A60     		str	r2, [r3]
2240:main.c        ****             sendingMessage = 0;
 8102              		.loc 1 2240 0
 8103 0842 274B     		ldr	r3, .L361+40
 8104 0844 0022     		movs	r2, #0
 8105 0846 1A70     		strb	r2, [r3]
2241:main.c        ****             parseThatMF = 0;
 8106              		.loc 1 2241 0
 8107 0848 264B     		ldr	r3, .L361+44
 8108 084a 0022     		movs	r2, #0
 8109 084c 1A70     		strb	r2, [r3]
 8110 084e 26E0     		b	.L338
 8111              	.L347:
2242:main.c        ****         } 
2243:main.c        ****         else 
2244:main.c        ****         {
2245:main.c        ****             sysexMessageInProgress = 0;
 8112              		.loc 1 2245 0
 8113 0850 224B     		ldr	r3, .L361+36
 8114 0852 0022     		movs	r2, #0
 8115 0854 1A70     		strb	r2, [r3]
2246:main.c        ****             //sendingMessage = 2;  // use this when we are ready to send copedents to the sd cards 
2247:main.c        ****             
2248:main.c        ****             OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 8116              		.loc 1 2248 0
 8117 0856 244B     		ldr	r3, .L361+48
 8118 0858 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8119 085a 1846     		mov	r0, r3
 8120 085c 0323     		movs	r3, #3
 8121 085e 0022     		movs	r2, #0
 8122 0860 0221     		movs	r1, #2
 8123 0862 FFF7FEFF 		bl	OLEDwriteInt
2249:main.c        ****             OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 8124              		.loc 1 2249 0
 8125 0866 FFF7FEFF 		bl	OLEDgetCursor
 8126 086a 0246     		mov	r2, r0
 8127 086c 0323     		movs	r3, #3
 8128 086e 0121     		movs	r1, #1
 8129 0870 1E48     		ldr	r0, .L361+52
 8130 0872 FFF7FEFF 		bl	OLEDwriteString
2250:main.c        ****             OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_BYTES, 
 8131              		.loc 1 2250 0
 8132 0876 1C4B     		ldr	r3, .L361+48
 8133 0878 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8134 087a 1A46     		mov	r2, r3
 8135 087c 1346     		mov	r3, r2
 8136 087e DB00     		lsls	r3, r3, #3
 8137 0880 9B1A     		subs	r3, r3, r2
 8138 0882 5B00     		lsls	r3, r3, #1
 8139 0884 1A4A     		ldr	r2, .L361+56
 8140 0886 9C18     		adds	r4, r3, r2
 8141 0888 FFF7FEFF 		bl	OLEDgetCursor
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 185


 8142 088c 0246     		mov	r2, r0
 8143 088e 0323     		movs	r3, #3
 8144 0890 0E21     		movs	r1, #14
 8145 0892 2046     		mov	r0, r4
 8146 0894 FFF7FEFF 		bl	OLEDwriteString
2251:main.c        ****             mainOLEDWaitingToSend = 1;
 8147              		.loc 1 2251 0
 8148 0898 164B     		ldr	r3, .L361+60
 8149 089a 0122     		movs	r2, #1
 8150 089c 1A60     		str	r2, [r3]
 8151              	.L338:
 8152              	.LBE38:
2252:main.c        ****         }
2253:main.c        ****     }
2254:main.c        ****     
2255:main.c        **** 
2256:main.c        ****     parsingSysex = 0;
 8153              		.loc 1 2256 0
 8154 089e 164B     		ldr	r3, .L361+64
 8155 08a0 0022     		movs	r2, #0
 8156 08a2 1A70     		strb	r2, [r3]
2257:main.c        ****     sysexPointer = 0;
 8157              		.loc 1 2257 0
 8158 08a4 0A4B     		ldr	r3, .L361+24
 8159 08a6 0022     		movs	r2, #0
 8160 08a8 1A60     		str	r2, [r3]
2258:main.c        ****     parseThatMF = 0;
 8161              		.loc 1 2258 0
 8162 08aa 0E4B     		ldr	r3, .L361+44
 8163 08ac 0022     		movs	r2, #0
 8164 08ae 1A70     		strb	r2, [r3]
2259:main.c        **** }
 8165              		.loc 1 2259 0
 8166 08b0 00BF     		nop
 8167 08b2 3C37     		adds	r7, r7, #60
 8168              		.cfi_def_cfa_offset 12
 8169 08b4 BD46     		mov	sp, r7
 8170              		.cfi_def_cfa_register 13
 8171              		@ sp needed
 8172 08b6 90BD     		pop	{r4, r7, pc}
 8173              	.L362:
 8174              		.align	2
 8175              	.L361:
 8176 08b8 00000000 		.word	sysexBuffer
 8177 08bc 00000000 		.word	copedentNumberToWrite
 8178 08c0 00000000 		.word	copedent
 8179 08c4 00000000 		.word	checkBase
 8180 08c8 00000000 		.word	checkStatus
 8181 08cc 00000000 		.word	currentFloat
 8182 08d0 00000000 		.word	sysexPointer
 8183 08d4 00000000 		.word	messageArraySize
 8184 08d8 00000000 		.word	SPI_errors
 8185 08dc 00000000 		.word	sysexMessageInProgress
 8186 08e0 00000000 		.word	sendingMessage
 8187 08e4 00000000 		.word	parseThatMF
 8188 08e8 00000000 		.word	currentCopedent
 8189 08ec 00040000 		.word	.LC0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 186


 8190 08f0 00000000 		.word	copedentNamesArray
 8191 08f4 00000000 		.word	mainOLEDWaitingToSend
 8192 08f8 00000000 		.word	parsingSysex
 8193              		.cfi_endproc
 8194              	.LFE93:
 8195              		.size	parseSysex, .-parseSysex
 8196              		.comm	tempMIDI,4,4
 8197              		.global	firstSysex
 8198              		.bss
 8199              		.type	firstSysex, %object
 8200              		.size	firstSysex, 1
 8201              	firstSysex:
 8202 0100 00       		.space	1
 8203              		.global	sysexPointerMask
 8204              		.section	.rodata
 8205              		.align	1
 8206              		.type	sysexPointerMask, %object
 8207              		.size	sysexPointerMask, 2
 8208              	sysexPointerMask:
 8209 0432 FF07     		.short	2047
 8210              		.section	.text.USB_callbackLocalMidiEvent,"ax",%progbits
 8211              		.align	2
 8212              		.global	USB_callbackLocalMidiEvent
 8213              		.thumb
 8214              		.thumb_func
 8215              		.type	USB_callbackLocalMidiEvent, %function
 8216              	USB_callbackLocalMidiEvent:
 8217              	.LFB94:
2260:main.c        **** 
2261:main.c        **** volatile uint8_t tempMIDI[4];
2262:main.c        **** volatile uint8_t firstSysex = 0;
2263:main.c        **** const uint16_t sysexPointerMask = 2047;
2264:main.c        **** // this gets called if the Brain gets a MIDI message from the computer host
2265:main.c        **** void USB_callbackLocalMidiEvent(uint8 cable, uint8 *midiMsg) CYREENTRANT
2266:main.c        **** {   
 8218              		.loc 1 2266 0
 8219              		.cfi_startproc
 8220              		@ args = 0, pretend = 0, frame = 16
 8221              		@ frame_needed = 1, uses_anonymous_args = 0
 8222 0000 80B5     		push	{r7, lr}
 8223              		.cfi_def_cfa_offset 8
 8224              		.cfi_offset 7, -8
 8225              		.cfi_offset 14, -4
 8226 0002 84B0     		sub	sp, sp, #16
 8227              		.cfi_def_cfa_offset 24
 8228 0004 00AF     		add	r7, sp, #0
 8229              		.cfi_def_cfa_register 7
 8230 0006 0346     		mov	r3, r0
 8231 0008 3960     		str	r1, [r7]
 8232 000a FB71     		strb	r3, [r7, #7]
2267:main.c        ****     tempMIDI[0] = midiMsg[0];
 8233              		.loc 1 2267 0
 8234 000c 3B68     		ldr	r3, [r7]
 8235 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 8236 0010 434B     		ldr	r3, .L373
 8237 0012 1A70     		strb	r2, [r3]
2268:main.c        ****     tempMIDI[1] = midiMsg[1];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 187


 8238              		.loc 1 2268 0
 8239 0014 3B68     		ldr	r3, [r7]
 8240 0016 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 8241 0018 414B     		ldr	r3, .L373
 8242 001a 5A70     		strb	r2, [r3, #1]
2269:main.c        ****      tempMIDI[2] = midiMsg[2];
 8243              		.loc 1 2269 0
 8244 001c 3B68     		ldr	r3, [r7]
 8245 001e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 8246 0020 3F4B     		ldr	r3, .L373
 8247 0022 9A70     		strb	r2, [r3, #2]
2270:main.c        ****      tempMIDI[3] = midiMsg[3];
 8248              		.loc 1 2270 0
 8249 0024 3B68     		ldr	r3, [r7]
 8250 0026 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 8251 0028 3D4B     		ldr	r3, .L373
 8252 002a DA70     		strb	r2, [r3, #3]
2271:main.c        ****     //check that we got here
2272:main.c        ****     
2273:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 8253              		.loc 1 2273 0
 8254 002c 3D4B     		ldr	r3, .L373+4
 8255 002e 1B78     		ldrb	r3, [r3]
 8256 0030 DBB2     		uxtb	r3, r3
 8257 0032 002B     		cmp	r3, #0
 8258 0034 71D0     		beq	.L363
 8259              		.loc 1 2273 0 is_stmt 0 discriminator 1
 8260 0036 FFF7FEFF 		bl	USB_VBusPresent
 8261 003a 0346     		mov	r3, r0
 8262 003c 002B     		cmp	r3, #0
 8263 003e 6CD0     		beq	.L363
2274:main.c        ****     {
2275:main.c        ****         if (receivingSysex)
 8264              		.loc 1 2275 0 is_stmt 1
 8265 0040 394B     		ldr	r3, .L373+8
 8266 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8267 0044 002B     		cmp	r3, #0
 8268 0046 29D0     		beq	.L365
 8269              	.LBB44:
2276:main.c        ****         {
2277:main.c        ****             for (int i = 0; i < 3; i++)
 8270              		.loc 1 2277 0
 8271 0048 0023     		movs	r3, #0
 8272 004a FB60     		str	r3, [r7, #12]
 8273 004c 22E0     		b	.L366
 8274              	.L369:
2278:main.c        ****             {
2279:main.c        ****                 if (midiMsg[i] < 128)
 8275              		.loc 1 2279 0
 8276 004e FB68     		ldr	r3, [r7, #12]
 8277 0050 3A68     		ldr	r2, [r7]
 8278 0052 1344     		add	r3, r3, r2
 8279 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8280 0056 5BB2     		sxtb	r3, r3
 8281 0058 002B     		cmp	r3, #0
 8282 005a 0EDB     		blt	.L367
2280:main.c        ****                 {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 188


2281:main.c        ****                     sysexBuffer[(sysexPointer++) & sysexPointerMask] = midiMsg[i];
 8283              		.loc 1 2281 0
 8284 005c 334B     		ldr	r3, .L373+12
 8285 005e 1B68     		ldr	r3, [r3]
 8286 0060 5A1C     		adds	r2, r3, #1
 8287 0062 3249     		ldr	r1, .L373+12
 8288 0064 0A60     		str	r2, [r1]
 8289 0066 40F2FF72 		movw	r2, #2047
 8290 006a 1340     		ands	r3, r3, r2
 8291 006c FA68     		ldr	r2, [r7, #12]
 8292 006e 3968     		ldr	r1, [r7]
 8293 0070 0A44     		add	r2, r2, r1
 8294 0072 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 8295 0074 2E4A     		ldr	r2, .L373+16
 8296 0076 D154     		strb	r1, [r2, r3]
 8297 0078 09E0     		b	.L368
 8298              	.L367:
2282:main.c        ****                 }
2283:main.c        ****                 else
2284:main.c        ****                 {
2285:main.c        ****                     if (midiMsg[i] == USB_MIDI_EOSEX)
 8299              		.loc 1 2285 0
 8300 007a FB68     		ldr	r3, [r7, #12]
 8301 007c 3A68     		ldr	r2, [r7]
 8302 007e 1344     		add	r3, r3, r2
 8303 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8304 0082 F72B     		cmp	r3, #247
 8305 0084 03D1     		bne	.L368
2286:main.c        ****                     {
2287:main.c        ****                         receivingSysex = 0;
 8306              		.loc 1 2287 0
 8307 0086 284B     		ldr	r3, .L373+8
 8308 0088 0022     		movs	r2, #0
 8309 008a 1A70     		strb	r2, [r3]
2288:main.c        ****                         //parseSysex();
2289:main.c        ****                         return;
 8310              		.loc 1 2289 0
 8311 008c 45E0     		b	.L363
 8312              	.L368:
2277:main.c        ****             {
 8313              		.loc 1 2277 0 discriminator 2
 8314 008e FB68     		ldr	r3, [r7, #12]
 8315 0090 0133     		adds	r3, r3, #1
 8316 0092 FB60     		str	r3, [r7, #12]
 8317              	.L366:
2277:main.c        ****             {
 8318              		.loc 1 2277 0 is_stmt 0 discriminator 1
 8319 0094 FB68     		ldr	r3, [r7, #12]
 8320 0096 022B     		cmp	r3, #2
 8321 0098 D9DD     		ble	.L369
 8322 009a 3EE0     		b	.L363
 8323              	.L365:
 8324              	.LBE44:
2290:main.c        ****                      }
2291:main.c        ****                 }
2292:main.c        ****             }
2293:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 189


2294:main.c        ****         else if (midiMsg[USB_EVENT_BYTE0] == USB_MIDI_SYSEX)
 8325              		.loc 1 2294 0 is_stmt 1
 8326 009c 3B68     		ldr	r3, [r7]
 8327 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8328 00a0 F02B     		cmp	r3, #240
 8329 00a2 3AD1     		bne	.L363
2295:main.c        ****         {
2296:main.c        ****             if (!parsingSysex)
 8330              		.loc 1 2296 0
 8331 00a4 234B     		ldr	r3, .L373+20
 8332 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8333 00a8 002B     		cmp	r3, #0
 8334 00aa 36D1     		bne	.L363
2297:main.c        ****             {
2298:main.c        ****                 if (midiMsg[1] == 126) // special message saying that sysex multi-chunk transmissio
 8335              		.loc 1 2298 0
 8336 00ac 3B68     		ldr	r3, [r7]
 8337 00ae 0133     		adds	r3, r3, #1
 8338 00b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8339 00b2 7E2B     		cmp	r3, #126
 8340 00b4 03D1     		bne	.L371
2299:main.c        ****                 {
2300:main.c        ****                     parseThatMF = 1;
 8341              		.loc 1 2300 0
 8342 00b6 204B     		ldr	r3, .L373+24
 8343 00b8 0122     		movs	r2, #1
 8344 00ba 1A70     		strb	r2, [r3]
 8345 00bc 2DE0     		b	.L363
 8346              	.L371:
2301:main.c        **** 
2302:main.c        ****                     //sysexPointer = 0;
2303:main.c        ****                 }
2304:main.c        ****                 else if (midiMsg[1] == 0 || midiMsg[1] == 1 || midiMsg[1] == 2)
 8347              		.loc 1 2304 0
 8348 00be 3B68     		ldr	r3, [r7]
 8349 00c0 0133     		adds	r3, r3, #1
 8350 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8351 00c4 002B     		cmp	r3, #0
 8352 00c6 09D0     		beq	.L372
 8353              		.loc 1 2304 0 is_stmt 0 discriminator 1
 8354 00c8 3B68     		ldr	r3, [r7]
 8355 00ca 0133     		adds	r3, r3, #1
 8356 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8357 00ce 012B     		cmp	r3, #1
 8358 00d0 04D0     		beq	.L372
 8359              		.loc 1 2304 0 discriminator 2
 8360 00d2 3B68     		ldr	r3, [r7]
 8361 00d4 0133     		adds	r3, r3, #1
 8362 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8363 00d8 022B     		cmp	r3, #2
 8364 00da 1ED1     		bne	.L363
 8365              	.L372:
2305:main.c        ****                 {
2306:main.c        ****                     receivingSysex = 1;
 8366              		.loc 1 2306 0 is_stmt 1
 8367 00dc 124B     		ldr	r3, .L373+8
 8368 00de 0122     		movs	r2, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 190


 8369 00e0 1A70     		strb	r2, [r3]
2307:main.c        ****                     
2308:main.c        ****                     // if this is the first chunk, put in the first and second elements (following 
2309:main.c        ****                     if (sysexPointer == 0)
 8370              		.loc 1 2309 0
 8371 00e2 124B     		ldr	r3, .L373+12
 8372 00e4 1B68     		ldr	r3, [r3]
 8373 00e6 002B     		cmp	r3, #0
 8374 00e8 17D1     		bne	.L363
2310:main.c        ****                     {
2311:main.c        ****                         sysexBuffer[sysexPointer++ & sysexPointerMask] = midiMsg[1];
 8375              		.loc 1 2311 0
 8376 00ea 104B     		ldr	r3, .L373+12
 8377 00ec 1B68     		ldr	r3, [r3]
 8378 00ee 5A1C     		adds	r2, r3, #1
 8379 00f0 0E49     		ldr	r1, .L373+12
 8380 00f2 0A60     		str	r2, [r1]
 8381 00f4 40F2FF72 		movw	r2, #2047
 8382 00f8 1340     		ands	r3, r3, r2
 8383 00fa 3A68     		ldr	r2, [r7]
 8384 00fc 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 8385 00fe 0C4A     		ldr	r2, .L373+16
 8386 0100 D154     		strb	r1, [r2, r3]
2312:main.c        ****                         sysexBuffer[sysexPointer++ & sysexPointerMask] = midiMsg[2];
 8387              		.loc 1 2312 0
 8388 0102 0A4B     		ldr	r3, .L373+12
 8389 0104 1B68     		ldr	r3, [r3]
 8390 0106 5A1C     		adds	r2, r3, #1
 8391 0108 0849     		ldr	r1, .L373+12
 8392 010a 0A60     		str	r2, [r1]
 8393 010c 40F2FF72 		movw	r2, #2047
 8394 0110 1340     		ands	r3, r3, r2
 8395 0112 3A68     		ldr	r2, [r7]
 8396 0114 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 8397 0116 064A     		ldr	r2, .L373+16
 8398 0118 D154     		strb	r1, [r2, r3]
 8399              	.L363:
2313:main.c        ****                     }
2314:main.c        ****                 }
2315:main.c        ****             }
2316:main.c        ****         }
2317:main.c        ****         cable = cable; // so it doesn't complain about unused variables
2318:main.c        ****     }
2319:main.c        **** }    
 8400              		.loc 1 2319 0
 8401 011a 1037     		adds	r7, r7, #16
 8402              		.cfi_def_cfa_offset 8
 8403 011c BD46     		mov	sp, r7
 8404              		.cfi_def_cfa_register 13
 8405              		@ sp needed
 8406 011e 80BD     		pop	{r7, pc}
 8407              	.L374:
 8408              		.align	2
 8409              	.L373:
 8410 0120 00000000 		.word	tempMIDI
 8411 0124 00000000 		.word	USB_active
 8412 0128 00000000 		.word	receivingSysex
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 191


 8413 012c 00000000 		.word	sysexPointer
 8414 0130 00000000 		.word	sysexBuffer
 8415 0134 00000000 		.word	parsingSysex
 8416 0138 00000000 		.word	parseThatMF
 8417              		.cfi_endproc
 8418              	.LFE94:
 8419              		.size	USB_callbackLocalMidiEvent, .-USB_callbackLocalMidiEvent
 8420              		.text
 8421              	.Letext0:
 8422              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 8423              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 8424              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 8425              		.file 5 "Generated_Source\\PSoC5/cy_em_eeprom.h"
 8426              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 8427              		.file 7 "oled.h"
 8428              		.file 8 "Generated_Source\\PSoC5/USB_midi.h"
 8429              		.file 9 "Generated_Source\\PSoC5/Em_EEPROM.h"
 8430              		.file 10 "Generated_Source\\PSoC5/I2C_1.h"
 8431              		.file 11 "Generated_Source\\PSoC5/core_cm3.h"
 8432              		.section	.debug_info,"",%progbits
 8433              	.Ldebug_info0:
 8434 0000 8C1B0000 		.4byte	0x1b8c
 8435 0004 0400     		.2byte	0x4
 8436 0006 00000000 		.4byte	.Ldebug_abbrev0
 8437 000a 04       		.byte	0x4
 8438 000b 01       		.uleb128 0x1
 8439 000c BC080000 		.4byte	.LASF301
 8440 0010 0C       		.byte	0xc
 8441 0011 2F0A0000 		.4byte	.LASF302
 8442 0015 D3060000 		.4byte	.LASF303
 8443 0019 00000000 		.4byte	.Ldebug_ranges0+0
 8444 001d 00000000 		.4byte	0
 8445 0021 00000000 		.4byte	.Ldebug_line0
 8446 0025 02       		.uleb128 0x2
 8447 0026 01       		.byte	0x1
 8448 0027 06       		.byte	0x6
 8449 0028 68030000 		.4byte	.LASF0
 8450 002c 03       		.uleb128 0x3
 8451 002d 12020000 		.4byte	.LASF2
 8452 0031 02       		.byte	0x2
 8453 0032 1D       		.byte	0x1d
 8454 0033 37000000 		.4byte	0x37
 8455 0037 02       		.uleb128 0x2
 8456 0038 01       		.byte	0x1
 8457 0039 08       		.byte	0x8
 8458 003a EF030000 		.4byte	.LASF1
 8459 003e 03       		.uleb128 0x3
 8460 003f FC0C0000 		.4byte	.LASF3
 8461 0043 02       		.byte	0x2
 8462 0044 29       		.byte	0x29
 8463 0045 49000000 		.4byte	0x49
 8464 0049 02       		.uleb128 0x2
 8465 004a 02       		.byte	0x2
 8466 004b 05       		.byte	0x5
 8467 004c B20D0000 		.4byte	.LASF4
 8468 0050 03       		.uleb128 0x3
 8469 0051 1B050000 		.4byte	.LASF5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 192


 8470 0055 02       		.byte	0x2
 8471 0056 2B       		.byte	0x2b
 8472 0057 5B000000 		.4byte	0x5b
 8473 005b 02       		.uleb128 0x2
 8474 005c 02       		.byte	0x2
 8475 005d 07       		.byte	0x7
 8476 005e 6C0F0000 		.4byte	.LASF6
 8477 0062 03       		.uleb128 0x3
 8478 0063 970F0000 		.4byte	.LASF7
 8479 0067 02       		.byte	0x2
 8480 0068 3F       		.byte	0x3f
 8481 0069 6D000000 		.4byte	0x6d
 8482 006d 02       		.uleb128 0x2
 8483 006e 04       		.byte	0x4
 8484 006f 05       		.byte	0x5
 8485 0070 65020000 		.4byte	.LASF8
 8486 0074 03       		.uleb128 0x3
 8487 0075 B3090000 		.4byte	.LASF9
 8488 0079 02       		.byte	0x2
 8489 007a 41       		.byte	0x41
 8490 007b 7F000000 		.4byte	0x7f
 8491 007f 02       		.uleb128 0x2
 8492 0080 04       		.byte	0x4
 8493 0081 07       		.byte	0x7
 8494 0082 B0070000 		.4byte	.LASF10
 8495 0086 02       		.uleb128 0x2
 8496 0087 08       		.byte	0x8
 8497 0088 05       		.byte	0x5
 8498 0089 BE090000 		.4byte	.LASF11
 8499 008d 02       		.uleb128 0x2
 8500 008e 08       		.byte	0x8
 8501 008f 07       		.byte	0x7
 8502 0090 200C0000 		.4byte	.LASF12
 8503 0094 04       		.uleb128 0x4
 8504 0095 04       		.byte	0x4
 8505 0096 05       		.byte	0x5
 8506 0097 696E7400 		.ascii	"int\000"
 8507 009b 02       		.uleb128 0x2
 8508 009c 04       		.byte	0x4
 8509 009d 07       		.byte	0x7
 8510 009e BD0A0000 		.4byte	.LASF13
 8511 00a2 03       		.uleb128 0x3
 8512 00a3 74030000 		.4byte	.LASF14
 8513 00a7 03       		.byte	0x3
 8514 00a8 18       		.byte	0x18
 8515 00a9 2C000000 		.4byte	0x2c
 8516 00ad 03       		.uleb128 0x3
 8517 00ae 0B0E0000 		.4byte	.LASF15
 8518 00b2 03       		.byte	0x3
 8519 00b3 20       		.byte	0x20
 8520 00b4 3E000000 		.4byte	0x3e
 8521 00b8 03       		.uleb128 0x3
 8522 00b9 370C0000 		.4byte	.LASF16
 8523 00bd 03       		.byte	0x3
 8524 00be 24       		.byte	0x24
 8525 00bf 50000000 		.4byte	0x50
 8526 00c3 03       		.uleb128 0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 193


 8527 00c4 99000000 		.4byte	.LASF17
 8528 00c8 03       		.byte	0x3
 8529 00c9 2C       		.byte	0x2c
 8530 00ca 62000000 		.4byte	0x62
 8531 00ce 03       		.uleb128 0x3
 8532 00cf 180F0000 		.4byte	.LASF18
 8533 00d3 03       		.byte	0x3
 8534 00d4 30       		.byte	0x30
 8535 00d5 74000000 		.4byte	0x74
 8536 00d9 05       		.uleb128 0x5
 8537 00da 860D0000 		.4byte	.LASF19
 8538 00de 04       		.byte	0x4
 8539 00df E901     		.2byte	0x1e9
 8540 00e1 37000000 		.4byte	0x37
 8541 00e5 05       		.uleb128 0x5
 8542 00e6 04100000 		.4byte	.LASF20
 8543 00ea 04       		.byte	0x4
 8544 00eb EA01     		.2byte	0x1ea
 8545 00ed 5B000000 		.4byte	0x5b
 8546 00f1 05       		.uleb128 0x5
 8547 00f2 D5000000 		.4byte	.LASF21
 8548 00f6 04       		.byte	0x4
 8549 00f7 EB01     		.2byte	0x1eb
 8550 00f9 7F000000 		.4byte	0x7f
 8551 00fd 02       		.uleb128 0x2
 8552 00fe 04       		.byte	0x4
 8553 00ff 04       		.byte	0x4
 8554 0100 680A0000 		.4byte	.LASF22
 8555 0104 02       		.uleb128 0x2
 8556 0105 08       		.byte	0x8
 8557 0106 04       		.byte	0x4
 8558 0107 280A0000 		.4byte	.LASF23
 8559 010b 02       		.uleb128 0x2
 8560 010c 01       		.byte	0x1
 8561 010d 08       		.byte	0x8
 8562 010e CF040000 		.4byte	.LASF24
 8563 0112 05       		.uleb128 0x5
 8564 0113 020B0000 		.4byte	.LASF25
 8565 0117 04       		.byte	0x4
 8566 0118 8B02     		.2byte	0x28b
 8567 011a 7F000000 		.4byte	0x7f
 8568 011e 05       		.uleb128 0x5
 8569 011f 980C0000 		.4byte	.LASF26
 8570 0123 04       		.byte	0x4
 8571 0124 9302     		.2byte	0x293
 8572 0126 2A010000 		.4byte	0x12a
 8573 012a 06       		.uleb128 0x6
 8574 012b D9000000 		.4byte	0xd9
 8575 012f 02       		.uleb128 0x2
 8576 0130 08       		.byte	0x8
 8577 0131 04       		.byte	0x4
 8578 0132 9F0B0000 		.4byte	.LASF27
 8579 0136 02       		.uleb128 0x2
 8580 0137 04       		.byte	0x4
 8581 0138 07       		.byte	0x7
 8582 0139 2A000000 		.4byte	.LASF28
 8583 013d 07       		.uleb128 0x7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 194


 8584 013e D9000000 		.4byte	0xd9
 8585 0142 4D010000 		.4byte	0x14d
 8586 0146 08       		.uleb128 0x8
 8587 0147 36010000 		.4byte	0x136
 8588 014b 03       		.byte	0x3
 8589 014c 00       		.byte	0
 8590 014d 09       		.uleb128 0x9
 8591 014e 1C       		.byte	0x1c
 8592 014f 05       		.byte	0x5
 8593 0150 1601     		.2byte	0x116
 8594 0152 BF010000 		.4byte	0x1bf
 8595 0156 0A       		.uleb128 0xa
 8596 0157 7C030000 		.4byte	.LASF29
 8597 015b 05       		.byte	0x5
 8598 015c 1B01     		.2byte	0x11b
 8599 015e F1000000 		.4byte	0xf1
 8600 0162 00       		.byte	0
 8601 0163 0A       		.uleb128 0xa
 8602 0164 D8010000 		.4byte	.LASF30
 8603 0168 05       		.byte	0x5
 8604 0169 2001     		.2byte	0x120
 8605 016b F1000000 		.4byte	0xf1
 8606 016f 04       		.byte	0x4
 8607 0170 0A       		.uleb128 0xa
 8608 0171 D50F0000 		.4byte	.LASF31
 8609 0175 05       		.byte	0x5
 8610 0176 2301     		.2byte	0x123
 8611 0178 F1000000 		.4byte	0xf1
 8612 017c 08       		.byte	0x8
 8613 017d 0A       		.uleb128 0xa
 8614 017e 200E0000 		.4byte	.LASF32
 8615 0182 05       		.byte	0x5
 8616 0183 2601     		.2byte	0x126
 8617 0185 F1000000 		.4byte	0xf1
 8618 0189 0C       		.byte	0xc
 8619 018a 0A       		.uleb128 0xa
 8620 018b 590E0000 		.4byte	.LASF33
 8621 018f 05       		.byte	0x5
 8622 0190 2B01     		.2byte	0x12b
 8623 0192 F1000000 		.4byte	0xf1
 8624 0196 10       		.byte	0x10
 8625 0197 0A       		.uleb128 0xa
 8626 0198 04020000 		.4byte	.LASF34
 8627 019c 05       		.byte	0x5
 8628 019d 2E01     		.2byte	0x12e
 8629 019f D9000000 		.4byte	0xd9
 8630 01a3 14       		.byte	0x14
 8631 01a4 0A       		.uleb128 0xa
 8632 01a5 0F0A0000 		.4byte	.LASF35
 8633 01a9 05       		.byte	0x5
 8634 01aa 3301     		.2byte	0x133
 8635 01ac D9000000 		.4byte	0xd9
 8636 01b0 15       		.byte	0x15
 8637 01b1 0A       		.uleb128 0xa
 8638 01b2 C5010000 		.4byte	.LASF36
 8639 01b6 05       		.byte	0x5
 8640 01b7 3601     		.2byte	0x136
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 195


 8641 01b9 F1000000 		.4byte	0xf1
 8642 01bd 18       		.byte	0x18
 8643 01be 00       		.byte	0
 8644 01bf 05       		.uleb128 0x5
 8645 01c0 98070000 		.4byte	.LASF37
 8646 01c4 05       		.byte	0x5
 8647 01c5 3701     		.2byte	0x137
 8648 01c7 4D010000 		.4byte	0x14d
 8649 01cb 0B       		.uleb128 0xb
 8650 01cc 01       		.byte	0x1
 8651 01cd 37000000 		.4byte	0x37
 8652 01d1 05       		.byte	0x5
 8653 01d2 5401     		.2byte	0x154
 8654 01d4 F7010000 		.4byte	0x1f7
 8655 01d8 0C       		.uleb128 0xc
 8656 01d9 84000000 		.4byte	.LASF38
 8657 01dd 00       		.byte	0
 8658 01de 0C       		.uleb128 0xc
 8659 01df FE050000 		.4byte	.LASF39
 8660 01e3 01       		.byte	0x1
 8661 01e4 0C       		.uleb128 0xc
 8662 01e5 AB010000 		.4byte	.LASF40
 8663 01e9 02       		.byte	0x2
 8664 01ea 0C       		.uleb128 0xc
 8665 01eb AB030000 		.4byte	.LASF41
 8666 01ef 03       		.byte	0x3
 8667 01f0 0C       		.uleb128 0xc
 8668 01f1 5C080000 		.4byte	.LASF42
 8669 01f5 04       		.byte	0x4
 8670 01f6 00       		.byte	0
 8671 01f7 05       		.uleb128 0x5
 8672 01f8 3E010000 		.4byte	.LASF43
 8673 01fc 05       		.byte	0x5
 8674 01fd 5A01     		.2byte	0x15a
 8675 01ff CB010000 		.4byte	0x1cb
 8676 0203 06       		.uleb128 0x6
 8677 0204 A2000000 		.4byte	0xa2
 8678 0208 06       		.uleb128 0x6
 8679 0209 B8000000 		.4byte	0xb8
 8680 020d 03       		.uleb128 0x3
 8681 020e 75050000 		.4byte	.LASF44
 8682 0212 06       		.byte	0x6
 8683 0213 6C       		.byte	0x6c
 8684 0214 9B000000 		.4byte	0x9b
 8685 0218 0D       		.uleb128 0xd
 8686 0219 C1030000 		.4byte	.LASF50
 8687 021d 01       		.byte	0x1
 8688 021e 37000000 		.4byte	0x37
 8689 0222 07       		.byte	0x7
 8690 0223 1C       		.byte	0x1c
 8691 0224 47020000 		.4byte	0x247
 8692 0228 0C       		.uleb128 0xc
 8693 0229 66090000 		.4byte	.LASF45
 8694 022d 00       		.byte	0
 8695 022e 0C       		.uleb128 0xc
 8696 022f 05030000 		.4byte	.LASF46
 8697 0233 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 196


 8698 0234 0C       		.uleb128 0xc
 8699 0235 B3000000 		.4byte	.LASF47
 8700 0239 02       		.byte	0x2
 8701 023a 0C       		.uleb128 0xc
 8702 023b 59060000 		.4byte	.LASF48
 8703 023f 03       		.byte	0x3
 8704 0240 0C       		.uleb128 0xc
 8705 0241 36010000 		.4byte	.LASF49
 8706 0245 04       		.byte	0x4
 8707 0246 00       		.byte	0
 8708 0247 0D       		.uleb128 0xd
 8709 0248 26030000 		.4byte	.LASF51
 8710 024c 01       		.byte	0x1
 8711 024d 37000000 		.4byte	0x37
 8712 0251 01       		.byte	0x1
 8713 0252 1D       		.byte	0x1d
 8714 0253 7C020000 		.4byte	0x27c
 8715 0257 0C       		.uleb128 0xc
 8716 0258 34060000 		.4byte	.LASF52
 8717 025c 00       		.byte	0
 8718 025d 0C       		.uleb128 0xc
 8719 025e B8040000 		.4byte	.LASF53
 8720 0262 01       		.byte	0x1
 8721 0263 0C       		.uleb128 0xc
 8722 0264 060D0000 		.4byte	.LASF54
 8723 0268 02       		.byte	0x2
 8724 0269 0C       		.uleb128 0xc
 8725 026a B30C0000 		.4byte	.LASF55
 8726 026e 03       		.byte	0x3
 8727 026f 0C       		.uleb128 0xc
 8728 0270 7F0F0000 		.4byte	.LASF56
 8729 0274 04       		.byte	0x4
 8730 0275 0C       		.uleb128 0xc
 8731 0276 22020000 		.4byte	.LASF57
 8732 027a 05       		.byte	0x5
 8733 027b 00       		.byte	0
 8734 027c 0E       		.uleb128 0xe
 8735 027d 570C0000 		.4byte	.LASF304
 8736 0281 04       		.byte	0x4
 8737 0282 01       		.byte	0x1
 8738 0283 A1       		.byte	0xa1
 8739 0284 A6020000 		.4byte	0x2a6
 8740 0288 0F       		.uleb128 0xf
 8741 0289 6600     		.ascii	"f\000"
 8742 028b 01       		.byte	0x1
 8743 028c A2       		.byte	0xa2
 8744 028d FD000000 		.4byte	0xfd
 8745 0291 0F       		.uleb128 0xf
 8746 0292 6200     		.ascii	"b\000"
 8747 0294 01       		.byte	0x1
 8748 0295 A3       		.byte	0xa3
 8749 0296 A6020000 		.4byte	0x2a6
 8750 029a 0F       		.uleb128 0xf
 8751 029b 75333200 		.ascii	"u32\000"
 8752 029f 01       		.byte	0x1
 8753 02a0 A4       		.byte	0xa4
 8754 02a1 CE000000 		.4byte	0xce
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 197


 8755 02a5 00       		.byte	0
 8756 02a6 07       		.uleb128 0x7
 8757 02a7 A2000000 		.4byte	0xa2
 8758 02ab B6020000 		.4byte	0x2b6
 8759 02af 08       		.uleb128 0x8
 8760 02b0 36010000 		.4byte	0x136
 8761 02b4 03       		.byte	0x3
 8762 02b5 00       		.byte	0
 8763 02b6 10       		.uleb128 0x10
 8764 02b7 A1030000 		.4byte	.LASF110
 8765 02bb 01       		.byte	0x1
 8766 02bc A8       		.byte	0xa8
 8767 02bd 00000000 		.4byte	.LFB64
 8768 02c1 74010000 		.4byte	.LFE64-.LFB64
 8769 02c5 01       		.uleb128 0x1
 8770 02c6 9C       		.byte	0x9c
 8771 02c7 E2020000 		.4byte	0x2e2
 8772 02cb 11       		.uleb128 0x11
 8773 02cc 66000000 		.4byte	.LBB2
 8774 02d0 7A000000 		.4byte	.LBE2-.LBB2
 8775 02d4 12       		.uleb128 0x12
 8776 02d5 6900     		.ascii	"i\000"
 8777 02d7 01       		.byte	0x1
 8778 02d8 AE       		.byte	0xae
 8779 02d9 94000000 		.4byte	0x94
 8780 02dd 02       		.uleb128 0x2
 8781 02de 91       		.byte	0x91
 8782 02df 6C       		.sleb128 -20
 8783 02e0 00       		.byte	0
 8784 02e1 00       		.byte	0
 8785 02e2 13       		.uleb128 0x13
 8786 02e3 6C0C0000 		.4byte	.LASF58
 8787 02e7 01       		.byte	0x1
 8788 02e8 CC       		.byte	0xcc
 8789 02e9 00000000 		.4byte	.LFB65
 8790 02ed 9C000000 		.4byte	.LFE65-.LFB65
 8791 02f1 01       		.uleb128 0x1
 8792 02f2 9C       		.byte	0x9c
 8793 02f3 13       		.uleb128 0x13
 8794 02f4 DF0A0000 		.4byte	.LASF59
 8795 02f8 01       		.byte	0x1
 8796 02f9 F5       		.byte	0xf5
 8797 02fa 00000000 		.4byte	.LFB66
 8798 02fe 14000000 		.4byte	.LFE66-.LFB66
 8799 0302 01       		.uleb128 0x1
 8800 0303 9C       		.byte	0x9c
 8801 0304 14       		.uleb128 0x14
 8802 0305 7B090000 		.4byte	.LASF60
 8803 0309 01       		.byte	0x1
 8804 030a 0001     		.2byte	0x100
 8805 030c 00000000 		.4byte	.LFB67
 8806 0310 7C000000 		.4byte	.LFE67-.LFB67
 8807 0314 01       		.uleb128 0x1
 8808 0315 9C       		.byte	0x9c
 8809 0316 15       		.uleb128 0x15
 8810 0317 F9040000 		.4byte	.LASF63
 8811 031b 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 198


 8812 031c 1C01     		.2byte	0x11c
 8813 031e FD000000 		.4byte	0xfd
 8814 0322 00000000 		.4byte	.LFB68
 8815 0326 58000000 		.4byte	.LFE68-.LFB68
 8816 032a 01       		.uleb128 0x1
 8817 032b 9C       		.byte	0x9c
 8818 032c 7C030000 		.4byte	0x37c
 8819 0330 16       		.uleb128 0x16
 8820 0331 6D696E00 		.ascii	"min\000"
 8821 0335 01       		.byte	0x1
 8822 0336 1C01     		.2byte	0x11c
 8823 0338 FD000000 		.4byte	0xfd
 8824 033c 02       		.uleb128 0x2
 8825 033d 91       		.byte	0x91
 8826 033e 6C       		.sleb128 -20
 8827 033f 16       		.uleb128 0x16
 8828 0340 76616C00 		.ascii	"val\000"
 8829 0344 01       		.byte	0x1
 8830 0345 1C01     		.2byte	0x11c
 8831 0347 FD000000 		.4byte	0xfd
 8832 034b 02       		.uleb128 0x2
 8833 034c 91       		.byte	0x91
 8834 034d 68       		.sleb128 -24
 8835 034e 16       		.uleb128 0x16
 8836 034f 6D617800 		.ascii	"max\000"
 8837 0353 01       		.byte	0x1
 8838 0354 1C01     		.2byte	0x11c
 8839 0356 FD000000 		.4byte	0xfd
 8840 035a 02       		.uleb128 0x2
 8841 035b 91       		.byte	0x91
 8842 035c 64       		.sleb128 -28
 8843 035d 17       		.uleb128 0x17
 8844 035e 070A0000 		.4byte	.LASF61
 8845 0362 01       		.byte	0x1
 8846 0363 1E01     		.2byte	0x11e
 8847 0365 FD000000 		.4byte	0xfd
 8848 0369 02       		.uleb128 0x2
 8849 036a 91       		.byte	0x91
 8850 036b 74       		.sleb128 -12
 8851 036c 17       		.uleb128 0x17
 8852 036d 68040000 		.4byte	.LASF62
 8853 0371 01       		.byte	0x1
 8854 0372 1F01     		.2byte	0x11f
 8855 0374 FD000000 		.4byte	0xfd
 8856 0378 02       		.uleb128 0x2
 8857 0379 91       		.byte	0x91
 8858 037a 70       		.sleb128 -16
 8859 037b 00       		.byte	0
 8860 037c 15       		.uleb128 0x15
 8861 037d B60F0000 		.4byte	.LASF64
 8862 0381 01       		.byte	0x1
 8863 0382 3201     		.2byte	0x132
 8864 0384 FD000000 		.4byte	0xfd
 8865 0388 00000000 		.4byte	.LFB69
 8866 038c 68000000 		.4byte	.LFE69-.LFB69
 8867 0390 01       		.uleb128 0x1
 8868 0391 9C       		.byte	0x9c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 199


 8869 0392 A4030000 		.4byte	0x3a4
 8870 0396 16       		.uleb128 0x16
 8871 0397 6600     		.ascii	"f\000"
 8872 0399 01       		.byte	0x1
 8873 039a 3201     		.2byte	0x132
 8874 039c FD000000 		.4byte	0xfd
 8875 03a0 02       		.uleb128 0x2
 8876 03a1 91       		.byte	0x91
 8877 03a2 74       		.sleb128 -12
 8878 03a3 00       		.byte	0
 8879 03a4 15       		.uleb128 0x15
 8880 03a5 DE0B0000 		.4byte	.LASF65
 8881 03a9 01       		.byte	0x1
 8882 03aa 3901     		.2byte	0x139
 8883 03ac FD000000 		.4byte	0xfd
 8884 03b0 00000000 		.4byte	.LFB70
 8885 03b4 4C000000 		.4byte	.LFE70-.LFB70
 8886 03b8 01       		.uleb128 0x1
 8887 03b9 9C       		.byte	0x9c
 8888 03ba CC030000 		.4byte	0x3cc
 8889 03be 16       		.uleb128 0x16
 8890 03bf 6600     		.ascii	"f\000"
 8891 03c1 01       		.byte	0x1
 8892 03c2 3901     		.2byte	0x139
 8893 03c4 FD000000 		.4byte	0xfd
 8894 03c8 02       		.uleb128 0x2
 8895 03c9 91       		.byte	0x91
 8896 03ca 74       		.sleb128 -12
 8897 03cb 00       		.byte	0
 8898 03cc 15       		.uleb128 0x15
 8899 03cd 74070000 		.4byte	.LASF66
 8900 03d1 01       		.byte	0x1
 8901 03d2 3F01     		.2byte	0x13f
 8902 03d4 FD000000 		.4byte	0xfd
 8903 03d8 00000000 		.4byte	.LFB71
 8904 03dc 46000000 		.4byte	.LFE71-.LFB71
 8905 03e0 01       		.uleb128 0x1
 8906 03e1 9C       		.byte	0x9c
 8907 03e2 2E040000 		.4byte	0x42e
 8908 03e6 16       		.uleb128 0x16
 8909 03e7 4100     		.ascii	"A\000"
 8910 03e9 01       		.byte	0x1
 8911 03ea 3F01     		.2byte	0x13f
 8912 03ec FD000000 		.4byte	0xfd
 8913 03f0 02       		.uleb128 0x2
 8914 03f1 91       		.byte	0x91
 8915 03f2 6C       		.sleb128 -20
 8916 03f3 16       		.uleb128 0x16
 8917 03f4 4200     		.ascii	"B\000"
 8918 03f6 01       		.byte	0x1
 8919 03f7 3F01     		.2byte	0x13f
 8920 03f9 FD000000 		.4byte	0xfd
 8921 03fd 02       		.uleb128 0x2
 8922 03fe 91       		.byte	0x91
 8923 03ff 68       		.sleb128 -24
 8924 0400 18       		.uleb128 0x18
 8925 0401 1C020000 		.4byte	.LASF67
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 200


 8926 0405 01       		.byte	0x1
 8927 0406 3F01     		.2byte	0x13f
 8928 0408 FD000000 		.4byte	0xfd
 8929 040c 02       		.uleb128 0x2
 8930 040d 91       		.byte	0x91
 8931 040e 64       		.sleb128 -28
 8932 040f 17       		.uleb128 0x17
 8933 0410 51030000 		.4byte	.LASF68
 8934 0414 01       		.byte	0x1
 8935 0415 4101     		.2byte	0x141
 8936 0417 FD000000 		.4byte	0xfd
 8937 041b 02       		.uleb128 0x2
 8938 041c 91       		.byte	0x91
 8939 041d 74       		.sleb128 -12
 8940 041e 19       		.uleb128 0x19
 8941 041f 6F757400 		.ascii	"out\000"
 8942 0423 01       		.byte	0x1
 8943 0424 4401     		.2byte	0x144
 8944 0426 FD000000 		.4byte	0xfd
 8945 042a 02       		.uleb128 0x2
 8946 042b 91       		.byte	0x91
 8947 042c 70       		.sleb128 -16
 8948 042d 00       		.byte	0
 8949 042e 1A       		.uleb128 0x1a
 8950 042f 6D617000 		.ascii	"map\000"
 8951 0433 01       		.byte	0x1
 8952 0434 B201     		.2byte	0x1b2
 8953 0436 FD000000 		.4byte	0xfd
 8954 043a 00000000 		.4byte	.LFB72
 8955 043e 56000000 		.4byte	.LFE72-.LFB72
 8956 0442 01       		.uleb128 0x1
 8957 0443 9C       		.byte	0x9c
 8958 0444 94040000 		.4byte	0x494
 8959 0448 18       		.uleb128 0x18
 8960 0449 7E040000 		.4byte	.LASF69
 8961 044d 01       		.byte	0x1
 8962 044e B201     		.2byte	0x1b2
 8963 0450 FD000000 		.4byte	0xfd
 8964 0454 02       		.uleb128 0x2
 8965 0455 91       		.byte	0x91
 8966 0456 6C       		.sleb128 -20
 8967 0457 18       		.uleb128 0x18
 8968 0458 EC010000 		.4byte	.LASF70
 8969 045c 01       		.byte	0x1
 8970 045d B201     		.2byte	0x1b2
 8971 045f FD000000 		.4byte	0xfd
 8972 0463 02       		.uleb128 0x2
 8973 0464 91       		.byte	0x91
 8974 0465 68       		.sleb128 -24
 8975 0466 18       		.uleb128 0x18
 8976 0467 A5080000 		.4byte	.LASF71
 8977 046b 01       		.byte	0x1
 8978 046c B201     		.2byte	0x1b2
 8979 046e FD000000 		.4byte	0xfd
 8980 0472 02       		.uleb128 0x2
 8981 0473 91       		.byte	0x91
 8982 0474 64       		.sleb128 -28
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 201


 8983 0475 18       		.uleb128 0x18
 8984 0476 74080000 		.4byte	.LASF72
 8985 047a 01       		.byte	0x1
 8986 047b B201     		.2byte	0x1b2
 8987 047d FD000000 		.4byte	0xfd
 8988 0481 02       		.uleb128 0x2
 8989 0482 91       		.byte	0x91
 8990 0483 60       		.sleb128 -32
 8991 0484 18       		.uleb128 0x18
 8992 0485 5A0A0000 		.4byte	.LASF73
 8993 0489 01       		.byte	0x1
 8994 048a B201     		.2byte	0x1b2
 8995 048c FD000000 		.4byte	0xfd
 8996 0490 02       		.uleb128 0x2
 8997 0491 91       		.byte	0x91
 8998 0492 00       		.sleb128 0
 8999 0493 00       		.byte	0
 9000 0494 1B       		.uleb128 0x1b
 9001 0495 87050000 		.4byte	.LASF74
 9002 0499 01       		.byte	0x1
 9003 049a BD01     		.2byte	0x1bd
 9004 049c 00000000 		.4byte	.LFB73
 9005 04a0 0C000000 		.4byte	.LFE73-.LFB73
 9006 04a4 01       		.uleb128 0x1
 9007 04a5 9C       		.byte	0x9c
 9008 04a6 1B       		.uleb128 0x1b
 9009 04a7 600D0000 		.4byte	.LASF75
 9010 04ab 01       		.byte	0x1
 9011 04ac C201     		.2byte	0x1c2
 9012 04ae 00000000 		.4byte	.LFB74
 9013 04b2 0C000000 		.4byte	.LFE74-.LFB74
 9014 04b6 01       		.uleb128 0x1
 9015 04b7 9C       		.byte	0x9c
 9016 04b8 1C       		.uleb128 0x1c
 9017 04b9 4D0F0000 		.4byte	.LASF305
 9018 04bd 01       		.byte	0x1
 9019 04be C801     		.2byte	0x1c8
 9020 04c0 00000000 		.4byte	.LFB75
 9021 04c4 0C010000 		.4byte	.LFE75-.LFB75
 9022 04c8 01       		.uleb128 0x1
 9023 04c9 9C       		.byte	0x9c
 9024 04ca FF040000 		.4byte	0x4ff
 9025 04ce 11       		.uleb128 0x11
 9026 04cf 06000000 		.4byte	.LBB3
 9027 04d3 EA000000 		.4byte	.LBE3-.LBB3
 9028 04d7 19       		.uleb128 0x19
 9029 04d8 6900     		.ascii	"i\000"
 9030 04da 01       		.byte	0x1
 9031 04db CC01     		.2byte	0x1cc
 9032 04dd 94000000 		.4byte	0x94
 9033 04e1 02       		.uleb128 0x2
 9034 04e2 91       		.byte	0x91
 9035 04e3 6C       		.sleb128 -20
 9036 04e4 11       		.uleb128 0x11
 9037 04e5 0C000000 		.4byte	.LBB4
 9038 04e9 D8000000 		.4byte	.LBE4-.LBB4
 9039 04ed 17       		.uleb128 0x17
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 202


 9040 04ee F3010000 		.4byte	.LASF76
 9041 04f2 01       		.byte	0x1
 9042 04f3 CF01     		.2byte	0x1cf
 9043 04f5 FD000000 		.4byte	0xfd
 9044 04f9 02       		.uleb128 0x2
 9045 04fa 91       		.byte	0x91
 9046 04fb 68       		.sleb128 -24
 9047 04fc 00       		.byte	0
 9048 04fd 00       		.byte	0
 9049 04fe 00       		.byte	0
 9050 04ff 15       		.uleb128 0x15
 9051 0500 CC020000 		.4byte	.LASF77
 9052 0504 01       		.byte	0x1
 9053 0505 D601     		.2byte	0x1d6
 9054 0507 94000000 		.4byte	0x94
 9055 050b 00000000 		.4byte	.LFB76
 9056 050f 981B0000 		.4byte	.LFE76-.LFB76
 9057 0513 01       		.uleb128 0x1
 9058 0514 9C       		.byte	0x9c
 9059 0515 82080000 		.4byte	0x882
 9060 0519 17       		.uleb128 0x17
 9061 051a E30F0000 		.4byte	.LASF78
 9062 051e 01       		.byte	0x1
 9063 051f 0E02     		.2byte	0x20e
 9064 0521 A2000000 		.4byte	0xa2
 9065 0525 03       		.uleb128 0x3
 9066 0526 91       		.byte	0x91
 9067 0527 937F     		.sleb128 -109
 9068 0529 1D       		.uleb128 0x1d
 9069 052a 28000000 		.4byte	.LBB5
 9070 052e 74010000 		.4byte	.LBE5-.LBB5
 9071 0532 E5050000 		.4byte	0x5e5
 9072 0536 17       		.uleb128 0x17
 9073 0537 10040000 		.4byte	.LASF79
 9074 053b 01       		.byte	0x1
 9075 053c E301     		.2byte	0x1e3
 9076 053e 94000000 		.4byte	0x94
 9077 0542 02       		.uleb128 0x2
 9078 0543 91       		.byte	0x91
 9079 0544 6C       		.sleb128 -20
 9080 0545 1D       		.uleb128 0x1d
 9081 0546 30000000 		.4byte	.LBB6
 9082 054a 64000000 		.4byte	.LBE6-.LBB6
 9083 054e 62050000 		.4byte	0x562
 9084 0552 17       		.uleb128 0x17
 9085 0553 AA0E0000 		.4byte	.LASF80
 9086 0557 01       		.byte	0x1
 9087 0558 E601     		.2byte	0x1e6
 9088 055a 94000000 		.4byte	0x94
 9089 055e 02       		.uleb128 0x2
 9090 055f 91       		.byte	0x91
 9091 0560 68       		.sleb128 -24
 9092 0561 00       		.byte	0
 9093 0562 11       		.uleb128 0x11
 9094 0563 94000000 		.4byte	.LBB7
 9095 0567 F4000000 		.4byte	.LBE7-.LBB7
 9096 056b 19       		.uleb128 0x19
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 203


 9097 056c 6900     		.ascii	"i\000"
 9098 056e 01       		.byte	0x1
 9099 056f EA01     		.2byte	0x1ea
 9100 0571 94000000 		.4byte	0x94
 9101 0575 02       		.uleb128 0x2
 9102 0576 91       		.byte	0x91
 9103 0577 64       		.sleb128 -28
 9104 0578 11       		.uleb128 0x11
 9105 0579 9A000000 		.4byte	.LBB8
 9106 057d E2000000 		.4byte	.LBE8-.LBB8
 9107 0581 17       		.uleb128 0x17
 9108 0582 21040000 		.4byte	.LASF81
 9109 0586 01       		.byte	0x1
 9110 0587 EC01     		.2byte	0x1ec
 9111 0589 94000000 		.4byte	0x94
 9112 058d 03       		.uleb128 0x3
 9113 058e 91       		.byte	0x91
 9114 058f 9C7F     		.sleb128 -100
 9115 0591 11       		.uleb128 0x11
 9116 0592 A8000000 		.4byte	.LBB9
 9117 0596 D4000000 		.4byte	.LBE9-.LBB9
 9118 059a 19       		.uleb128 0x19
 9119 059b 6A00     		.ascii	"j\000"
 9120 059d 01       		.byte	0x1
 9121 059e ED01     		.2byte	0x1ed
 9122 05a0 94000000 		.4byte	0x94
 9123 05a4 02       		.uleb128 0x2
 9124 05a5 91       		.byte	0x91
 9125 05a6 60       		.sleb128 -32
 9126 05a7 11       		.uleb128 0x11
 9127 05a8 AE000000 		.4byte	.LBB10
 9128 05ac C2000000 		.4byte	.LBE10-.LBB10
 9129 05b0 17       		.uleb128 0x17
 9130 05b1 59030000 		.4byte	.LASF82
 9131 05b5 01       		.byte	0x1
 9132 05b6 F001     		.2byte	0x1f0
 9133 05b8 94000000 		.4byte	0x94
 9134 05bc 03       		.uleb128 0x3
 9135 05bd 91       		.byte	0x91
 9136 05be 987F     		.sleb128 -104
 9137 05c0 17       		.uleb128 0x17
 9138 05c1 C20F0000 		.4byte	.LASF83
 9139 05c5 01       		.byte	0x1
 9140 05c6 F101     		.2byte	0x1f1
 9141 05c8 B8000000 		.4byte	0xb8
 9142 05cc 03       		.uleb128 0x3
 9143 05cd 91       		.byte	0x91
 9144 05ce 967F     		.sleb128 -106
 9145 05d0 17       		.uleb128 0x17
 9146 05d1 FC090000 		.4byte	.LASF84
 9147 05d5 01       		.byte	0x1
 9148 05d6 F201     		.2byte	0x1f2
 9149 05d8 B8000000 		.4byte	0xb8
 9150 05dc 03       		.uleb128 0x3
 9151 05dd 91       		.byte	0x91
 9152 05de 947F     		.sleb128 -108
 9153 05e0 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 204


 9154 05e1 00       		.byte	0
 9155 05e2 00       		.byte	0
 9156 05e3 00       		.byte	0
 9157 05e4 00       		.byte	0
 9158 05e5 1D       		.uleb128 0x1d
 9159 05e6 9C010000 		.4byte	.LBB11
 9160 05ea 50000000 		.4byte	.LBE11-.LBB11
 9161 05ee 17060000 		.4byte	0x617
 9162 05f2 19       		.uleb128 0x19
 9163 05f3 6900     		.ascii	"i\000"
 9164 05f5 01       		.byte	0x1
 9165 05f6 F901     		.2byte	0x1f9
 9166 05f8 94000000 		.4byte	0x94
 9167 05fc 02       		.uleb128 0x2
 9168 05fd 91       		.byte	0x91
 9169 05fe 5C       		.sleb128 -36
 9170 05ff 11       		.uleb128 0x11
 9171 0600 A2010000 		.4byte	.LBB12
 9172 0604 34000000 		.4byte	.LBE12-.LBB12
 9173 0608 19       		.uleb128 0x19
 9174 0609 6A00     		.ascii	"j\000"
 9175 060b 01       		.byte	0x1
 9176 060c FB01     		.2byte	0x1fb
 9177 060e 94000000 		.4byte	0x94
 9178 0612 02       		.uleb128 0x2
 9179 0613 91       		.byte	0x91
 9180 0614 58       		.sleb128 -40
 9181 0615 00       		.byte	0
 9182 0616 00       		.byte	0
 9183 0617 1D       		.uleb128 0x1d
 9184 0618 18030000 		.4byte	.LBB13
 9185 061c 2A000000 		.4byte	.LBE13-.LBB13
 9186 0620 35060000 		.4byte	0x635
 9187 0624 17       		.uleb128 0x17
 9188 0625 08080000 		.4byte	.LASF85
 9189 0629 01       		.byte	0x1
 9190 062a DC02     		.2byte	0x2dc
 9191 062c A2000000 		.4byte	0xa2
 9192 0630 03       		.uleb128 0x3
 9193 0631 91       		.byte	0x91
 9194 0632 927F     		.sleb128 -110
 9195 0634 00       		.byte	0
 9196 0635 1D       		.uleb128 0x1d
 9197 0636 42050000 		.4byte	.LBB14
 9198 063a 2E000000 		.4byte	.LBE14-.LBB14
 9199 063e 50060000 		.4byte	0x650
 9200 0642 19       		.uleb128 0x19
 9201 0643 6900     		.ascii	"i\000"
 9202 0645 01       		.byte	0x1
 9203 0646 1103     		.2byte	0x311
 9204 0648 94000000 		.4byte	0x94
 9205 064c 02       		.uleb128 0x2
 9206 064d 91       		.byte	0x91
 9207 064e 54       		.sleb128 -44
 9208 064f 00       		.byte	0
 9209 0650 1D       		.uleb128 0x1d
 9210 0651 00060000 		.4byte	.LBB15
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 205


 9211 0655 1E010000 		.4byte	.LBE15-.LBB15
 9212 0659 6E060000 		.4byte	0x66e
 9213 065d 17       		.uleb128 0x17
 9214 065e 5D000000 		.4byte	.LASF86
 9215 0662 01       		.byte	0x1
 9216 0663 A803     		.2byte	0x3a8
 9217 0665 AD000000 		.4byte	0xad
 9218 0669 03       		.uleb128 0x3
 9219 066a 91       		.byte	0x91
 9220 066b 907F     		.sleb128 -112
 9221 066d 00       		.byte	0
 9222 066e 1D       		.uleb128 0x1d
 9223 066f C8070000 		.4byte	.LBB16
 9224 0673 28000000 		.4byte	.LBE16-.LBB16
 9225 0677 8C060000 		.4byte	0x68c
 9226 067b 17       		.uleb128 0x17
 9227 067c 4F050000 		.4byte	.LASF87
 9228 0680 01       		.byte	0x1
 9229 0681 D003     		.2byte	0x3d0
 9230 0683 B8000000 		.4byte	0xb8
 9231 0687 03       		.uleb128 0x3
 9232 0688 91       		.byte	0x91
 9233 0689 8E7F     		.sleb128 -114
 9234 068b 00       		.byte	0
 9235 068c 1D       		.uleb128 0x1d
 9236 068d 58080000 		.4byte	.LBB17
 9237 0691 84020000 		.4byte	.LBE17-.LBB17
 9238 0695 A7060000 		.4byte	0x6a7
 9239 0699 19       		.uleb128 0x19
 9240 069a 6900     		.ascii	"i\000"
 9241 069c 01       		.byte	0x1
 9242 069d F903     		.2byte	0x3f9
 9243 069f 94000000 		.4byte	0x94
 9244 06a3 02       		.uleb128 0x2
 9245 06a4 91       		.byte	0x91
 9246 06a5 50       		.sleb128 -48
 9247 06a6 00       		.byte	0
 9248 06a7 1D       		.uleb128 0x1d
 9249 06a8 DC0A0000 		.4byte	.LBB18
 9250 06ac 46000000 		.4byte	.LBE18-.LBB18
 9251 06b0 C2060000 		.4byte	0x6c2
 9252 06b4 19       		.uleb128 0x19
 9253 06b5 6900     		.ascii	"i\000"
 9254 06b7 01       		.byte	0x1
 9255 06b8 1904     		.2byte	0x419
 9256 06ba 94000000 		.4byte	0x94
 9257 06be 02       		.uleb128 0x2
 9258 06bf 91       		.byte	0x91
 9259 06c0 4C       		.sleb128 -52
 9260 06c1 00       		.byte	0
 9261 06c2 1D       		.uleb128 0x1d
 9262 06c3 6E120000 		.4byte	.LBB19
 9263 06c7 28000000 		.4byte	.LBE19-.LBB19
 9264 06cb DD060000 		.4byte	0x6dd
 9265 06cf 19       		.uleb128 0x19
 9266 06d0 6900     		.ascii	"i\000"
 9267 06d2 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 206


 9268 06d3 1605     		.2byte	0x516
 9269 06d5 94000000 		.4byte	0x94
 9270 06d9 02       		.uleb128 0x2
 9271 06da 91       		.byte	0x91
 9272 06db 48       		.sleb128 -56
 9273 06dc 00       		.byte	0
 9274 06dd 1D       		.uleb128 0x1d
 9275 06de 00130000 		.4byte	.LBB20
 9276 06e2 8A000000 		.4byte	.LBE20-.LBB20
 9277 06e6 F8060000 		.4byte	0x6f8
 9278 06ea 19       		.uleb128 0x19
 9279 06eb 6900     		.ascii	"i\000"
 9280 06ed 01       		.byte	0x1
 9281 06ee 3505     		.2byte	0x535
 9282 06f0 94000000 		.4byte	0x94
 9283 06f4 02       		.uleb128 0x2
 9284 06f5 91       		.byte	0x91
 9285 06f6 44       		.sleb128 -60
 9286 06f7 00       		.byte	0
 9287 06f8 1D       		.uleb128 0x1d
 9288 06f9 8A130000 		.4byte	.LBB21
 9289 06fd 6C030000 		.4byte	.LBE21-.LBB21
 9290 0701 6D070000 		.4byte	0x76d
 9291 0705 19       		.uleb128 0x19
 9292 0706 6900     		.ascii	"i\000"
 9293 0708 01       		.byte	0x1
 9294 0709 4405     		.2byte	0x544
 9295 070b 94000000 		.4byte	0x94
 9296 070f 02       		.uleb128 0x2
 9297 0710 91       		.byte	0x91
 9298 0711 40       		.sleb128 -64
 9299 0712 11       		.uleb128 0x11
 9300 0713 D8130000 		.4byte	.LBB22
 9301 0717 0C030000 		.4byte	.LBE22-.LBB22
 9302 071b 17       		.uleb128 0x17
 9303 071c 430B0000 		.4byte	.LASF88
 9304 0720 01       		.byte	0x1
 9305 0721 5505     		.2byte	0x555
 9306 0723 FD000000 		.4byte	0xfd
 9307 0727 03       		.uleb128 0x3
 9308 0728 91       		.byte	0x91
 9309 0729 887F     		.sleb128 -120
 9310 072b 17       		.uleb128 0x17
 9311 072c FC0D0000 		.4byte	.LASF89
 9312 0730 01       		.byte	0x1
 9313 0731 6205     		.2byte	0x562
 9314 0733 FD000000 		.4byte	0xfd
 9315 0737 03       		.uleb128 0x3
 9316 0738 91       		.byte	0x91
 9317 0739 847F     		.sleb128 -124
 9318 073b 17       		.uleb128 0x17
 9319 073c A30A0000 		.4byte	.LASF90
 9320 0740 01       		.byte	0x1
 9321 0741 6505     		.2byte	0x565
 9322 0743 FD000000 		.4byte	0xfd
 9323 0747 03       		.uleb128 0x3
 9324 0748 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 207


 9325 0749 807F     		.sleb128 -128
 9326 074b 17       		.uleb128 0x17
 9327 074c CA050000 		.4byte	.LASF91
 9328 0750 01       		.byte	0x1
 9329 0751 6705     		.2byte	0x567
 9330 0753 FD000000 		.4byte	0xfd
 9331 0757 03       		.uleb128 0x3
 9332 0758 91       		.byte	0x91
 9333 0759 FC7E     		.sleb128 -132
 9334 075b 17       		.uleb128 0x17
 9335 075c 970D0000 		.4byte	.LASF92
 9336 0760 01       		.byte	0x1
 9337 0761 6905     		.2byte	0x569
 9338 0763 FD000000 		.4byte	0xfd
 9339 0767 03       		.uleb128 0x3
 9340 0768 91       		.byte	0x91
 9341 0769 F87E     		.sleb128 -136
 9342 076b 00       		.byte	0
 9343 076c 00       		.byte	0
 9344 076d 1D       		.uleb128 0x1d
 9345 076e 0C180000 		.4byte	.LBB23
 9346 0772 4E000000 		.4byte	.LBE23-.LBB23
 9347 0776 89070000 		.4byte	0x789
 9348 077a 19       		.uleb128 0x19
 9349 077b 6900     		.ascii	"i\000"
 9350 077d 01       		.byte	0x1
 9351 077e BB05     		.2byte	0x5bb
 9352 0780 0D020000 		.4byte	0x20d
 9353 0784 03       		.uleb128 0x3
 9354 0785 91       		.byte	0x91
 9355 0786 BC7F     		.sleb128 -68
 9356 0788 00       		.byte	0
 9357 0789 1D       		.uleb128 0x1d
 9358 078a 78180000 		.4byte	.LBB24
 9359 078e 22000000 		.4byte	.LBE24-.LBB24
 9360 0792 A5070000 		.4byte	0x7a5
 9361 0796 19       		.uleb128 0x19
 9362 0797 6900     		.ascii	"i\000"
 9363 0799 01       		.byte	0x1
 9364 079a CE05     		.2byte	0x5ce
 9365 079c 94000000 		.4byte	0x94
 9366 07a0 03       		.uleb128 0x3
 9367 07a1 91       		.byte	0x91
 9368 07a2 B87F     		.sleb128 -72
 9369 07a4 00       		.byte	0
 9370 07a5 1D       		.uleb128 0x1d
 9371 07a6 9A180000 		.4byte	.LBB25
 9372 07aa 22000000 		.4byte	.LBE25-.LBB25
 9373 07ae C1070000 		.4byte	0x7c1
 9374 07b2 19       		.uleb128 0x19
 9375 07b3 6900     		.ascii	"i\000"
 9376 07b5 01       		.byte	0x1
 9377 07b6 D205     		.2byte	0x5d2
 9378 07b8 94000000 		.4byte	0x94
 9379 07bc 03       		.uleb128 0x3
 9380 07bd 91       		.byte	0x91
 9381 07be B47F     		.sleb128 -76
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 208


 9382 07c0 00       		.byte	0
 9383 07c1 1D       		.uleb128 0x1d
 9384 07c2 BC180000 		.4byte	.LBB26
 9385 07c6 22000000 		.4byte	.LBE26-.LBB26
 9386 07ca DD070000 		.4byte	0x7dd
 9387 07ce 19       		.uleb128 0x19
 9388 07cf 6900     		.ascii	"i\000"
 9389 07d1 01       		.byte	0x1
 9390 07d2 D605     		.2byte	0x5d6
 9391 07d4 94000000 		.4byte	0x94
 9392 07d8 03       		.uleb128 0x3
 9393 07d9 91       		.byte	0x91
 9394 07da B07F     		.sleb128 -80
 9395 07dc 00       		.byte	0
 9396 07dd 1D       		.uleb128 0x1d
 9397 07de 4C190000 		.4byte	.LBB27
 9398 07e2 C4000000 		.4byte	.LBE27-.LBB27
 9399 07e6 13080000 		.4byte	0x813
 9400 07ea 19       		.uleb128 0x19
 9401 07eb 6900     		.ascii	"i\000"
 9402 07ed 01       		.byte	0x1
 9403 07ee E705     		.2byte	0x5e7
 9404 07f0 94000000 		.4byte	0x94
 9405 07f4 03       		.uleb128 0x3
 9406 07f5 91       		.byte	0x91
 9407 07f6 AC7F     		.sleb128 -84
 9408 07f8 11       		.uleb128 0x11
 9409 07f9 C0190000 		.4byte	.LBB28
 9410 07fd 44000000 		.4byte	.LBE28-.LBB28
 9411 0801 17       		.uleb128 0x17
 9412 0802 8D0C0000 		.4byte	.LASF93
 9413 0806 01       		.byte	0x1
 9414 0807 E905     		.2byte	0x5e9
 9415 0809 94000000 		.4byte	0x94
 9416 080d 03       		.uleb128 0x3
 9417 080e 91       		.byte	0x91
 9418 080f F47E     		.sleb128 -140
 9419 0811 00       		.byte	0
 9420 0812 00       		.byte	0
 9421 0813 11       		.uleb128 0x11
 9422 0814 861A0000 		.4byte	.LBB29
 9423 0818 B0000000 		.4byte	.LBE29-.LBB29
 9424 081c 17       		.uleb128 0x17
 9425 081d A4020000 		.4byte	.LASF94
 9426 0821 01       		.byte	0x1
 9427 0822 1406     		.2byte	0x614
 9428 0824 94000000 		.4byte	0x94
 9429 0828 03       		.uleb128 0x3
 9430 0829 91       		.byte	0x91
 9431 082a F07E     		.sleb128 -144
 9432 082c 17       		.uleb128 0x17
 9433 082d DC000000 		.4byte	.LASF95
 9434 0831 01       		.byte	0x1
 9435 0832 1506     		.2byte	0x615
 9436 0834 94000000 		.4byte	0x94
 9437 0838 03       		.uleb128 0x3
 9438 0839 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 209


 9439 083a EC7E     		.sleb128 -148
 9440 083c 17       		.uleb128 0x17
 9441 083d E30D0000 		.4byte	.LASF96
 9442 0841 01       		.byte	0x1
 9443 0842 1606     		.2byte	0x616
 9444 0844 94000000 		.4byte	0x94
 9445 0848 03       		.uleb128 0x3
 9446 0849 91       		.byte	0x91
 9447 084a A87F     		.sleb128 -88
 9448 084c 1D       		.uleb128 0x1d
 9449 084d 961A0000 		.4byte	.LBB30
 9450 0851 36000000 		.4byte	.LBE30-.LBB30
 9451 0855 68080000 		.4byte	0x868
 9452 0859 19       		.uleb128 0x19
 9453 085a 6900     		.ascii	"i\000"
 9454 085c 01       		.byte	0x1
 9455 085d 1706     		.2byte	0x617
 9456 085f 94000000 		.4byte	0x94
 9457 0863 03       		.uleb128 0x3
 9458 0864 91       		.byte	0x91
 9459 0865 A47F     		.sleb128 -92
 9460 0867 00       		.byte	0
 9461 0868 11       		.uleb128 0x11
 9462 0869 D01A0000 		.4byte	.LBB31
 9463 086d 44000000 		.4byte	.LBE31-.LBB31
 9464 0871 19       		.uleb128 0x19
 9465 0872 6900     		.ascii	"i\000"
 9466 0874 01       		.byte	0x1
 9467 0875 1D06     		.2byte	0x61d
 9468 0877 94000000 		.4byte	0x94
 9469 087b 03       		.uleb128 0x3
 9470 087c 91       		.byte	0x91
 9471 087d A07F     		.sleb128 -96
 9472 087f 00       		.byte	0
 9473 0880 00       		.byte	0
 9474 0881 00       		.byte	0
 9475 0882 14       		.uleb128 0x14
 9476 0883 03050000 		.4byte	.LASF97
 9477 0887 01       		.byte	0x1
 9478 0888 3206     		.2byte	0x632
 9479 088a 00000000 		.4byte	.LFB77
 9480 088e 70000000 		.4byte	.LFE77-.LFB77
 9481 0892 01       		.uleb128 0x1
 9482 0893 9C       		.byte	0x9c
 9483 0894 14       		.uleb128 0x14
 9484 0895 050F0000 		.4byte	.LASF98
 9485 0899 01       		.byte	0x1
 9486 089a 4706     		.2byte	0x647
 9487 089c 00000000 		.4byte	.LFB78
 9488 08a0 70010000 		.4byte	.LFE78-.LFB78
 9489 08a4 01       		.uleb128 0x1
 9490 08a5 9C       		.byte	0x9c
 9491 08a6 15       		.uleb128 0x15
 9492 08a7 33080000 		.4byte	.LASF99
 9493 08ab 01       		.byte	0x1
 9494 08ac 6F06     		.2byte	0x66f
 9495 08ae D9000000 		.4byte	0xd9
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 210


 9496 08b2 00000000 		.4byte	.LFB79
 9497 08b6 E0000000 		.4byte	.LFE79-.LFB79
 9498 08ba 01       		.uleb128 0x1
 9499 08bb 9C       		.byte	0x9c
 9500 08bc 0C090000 		.4byte	0x90c
 9501 08c0 18       		.uleb128 0x18
 9502 08c1 8E0E0000 		.4byte	.LASF100
 9503 08c5 01       		.byte	0x1
 9504 08c6 6F06     		.2byte	0x66f
 9505 08c8 D9000000 		.4byte	0xd9
 9506 08cc 02       		.uleb128 0x2
 9507 08cd 91       		.byte	0x91
 9508 08ce 6F       		.sleb128 -17
 9509 08cf 18       		.uleb128 0x18
 9510 08d0 7A010000 		.4byte	.LASF101
 9511 08d4 01       		.byte	0x1
 9512 08d5 6F06     		.2byte	0x66f
 9513 08d7 E5000000 		.4byte	0xe5
 9514 08db 02       		.uleb128 0x2
 9515 08dc 91       		.byte	0x91
 9516 08dd 6C       		.sleb128 -20
 9517 08de 18       		.uleb128 0x18
 9518 08df DE0D0000 		.4byte	.LASF102
 9519 08e3 01       		.byte	0x1
 9520 08e4 6F06     		.2byte	0x66f
 9521 08e6 A2000000 		.4byte	0xa2
 9522 08ea 02       		.uleb128 0x2
 9523 08eb 91       		.byte	0x91
 9524 08ec 6E       		.sleb128 -18
 9525 08ed 17       		.uleb128 0x17
 9526 08ee 08080000 		.4byte	.LASF85
 9527 08f2 01       		.byte	0x1
 9528 08f3 7106     		.2byte	0x671
 9529 08f5 2A010000 		.4byte	0x12a
 9530 08f9 02       		.uleb128 0x2
 9531 08fa 91       		.byte	0x91
 9532 08fb 73       		.sleb128 -13
 9533 08fc 17       		.uleb128 0x17
 9534 08fd 600A0000 		.4byte	.LASF103
 9535 0901 01       		.byte	0x1
 9536 0902 7206     		.2byte	0x672
 9537 0904 CE000000 		.4byte	0xce
 9538 0908 02       		.uleb128 0x2
 9539 0909 91       		.byte	0x91
 9540 090a 74       		.sleb128 -12
 9541 090b 00       		.byte	0
 9542 090c 15       		.uleb128 0x15
 9543 090d AB0B0000 		.4byte	.LASF104
 9544 0911 01       		.byte	0x1
 9545 0912 A206     		.2byte	0x6a2
 9546 0914 D9000000 		.4byte	0xd9
 9547 0918 00000000 		.4byte	.LFB80
 9548 091c B4000000 		.4byte	.LFE80-.LFB80
 9549 0920 01       		.uleb128 0x1
 9550 0921 9C       		.byte	0x9c
 9551 0922 72090000 		.4byte	0x972
 9552 0926 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 211


 9553 0927 8E0E0000 		.4byte	.LASF100
 9554 092b 01       		.byte	0x1
 9555 092c A206     		.2byte	0x6a2
 9556 092e D9000000 		.4byte	0xd9
 9557 0932 02       		.uleb128 0x2
 9558 0933 91       		.byte	0x91
 9559 0934 6F       		.sleb128 -17
 9560 0935 18       		.uleb128 0x18
 9561 0936 7A010000 		.4byte	.LASF101
 9562 093a 01       		.byte	0x1
 9563 093b A206     		.2byte	0x6a2
 9564 093d D9000000 		.4byte	0xd9
 9565 0941 02       		.uleb128 0x2
 9566 0942 91       		.byte	0x91
 9567 0943 6E       		.sleb128 -18
 9568 0944 18       		.uleb128 0x18
 9569 0945 DE0D0000 		.4byte	.LASF102
 9570 0949 01       		.byte	0x1
 9571 094a A206     		.2byte	0x6a2
 9572 094c A2000000 		.4byte	0xa2
 9573 0950 02       		.uleb128 0x2
 9574 0951 91       		.byte	0x91
 9575 0952 6D       		.sleb128 -19
 9576 0953 17       		.uleb128 0x17
 9577 0954 08080000 		.4byte	.LASF85
 9578 0958 01       		.byte	0x1
 9579 0959 A406     		.2byte	0x6a4
 9580 095b 2A010000 		.4byte	0x12a
 9581 095f 02       		.uleb128 0x2
 9582 0960 91       		.byte	0x91
 9583 0961 73       		.sleb128 -13
 9584 0962 17       		.uleb128 0x17
 9585 0963 600A0000 		.4byte	.LASF103
 9586 0967 01       		.byte	0x1
 9587 0968 A506     		.2byte	0x6a5
 9588 096a CE000000 		.4byte	0xce
 9589 096e 02       		.uleb128 0x2
 9590 096f 91       		.byte	0x91
 9591 0970 74       		.sleb128 -12
 9592 0971 00       		.byte	0
 9593 0972 14       		.uleb128 0x14
 9594 0973 59050000 		.4byte	.LASF105
 9595 0977 01       		.byte	0x1
 9596 0978 CA06     		.2byte	0x6ca
 9597 097a 00000000 		.4byte	.LFB81
 9598 097e 30000000 		.4byte	.LFE81-.LFB81
 9599 0982 01       		.uleb128 0x1
 9600 0983 9C       		.byte	0x9c
 9601 0984 1E       		.uleb128 0x1e
 9602 0985 C2070000 		.4byte	.LASF106
 9603 0989 01       		.byte	0x1
 9604 098a D906     		.2byte	0x6d9
 9605 098c 00000000 		.4byte	.LFB82
 9606 0990 7C000000 		.4byte	.LFE82-.LFB82
 9607 0994 01       		.uleb128 0x1
 9608 0995 9C       		.byte	0x9c
 9609 0996 14       		.uleb128 0x14
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 212


 9610 0997 26050000 		.4byte	.LASF107
 9611 099b 01       		.byte	0x1
 9612 099c E706     		.2byte	0x6e7
 9613 099e 00000000 		.4byte	.LFB83
 9614 09a2 54000000 		.4byte	.LFE83-.LFB83
 9615 09a6 01       		.uleb128 0x1
 9616 09a7 9C       		.byte	0x9c
 9617 09a8 14       		.uleb128 0x14
 9618 09a9 48040000 		.4byte	.LASF108
 9619 09ad 01       		.byte	0x1
 9620 09ae FA06     		.2byte	0x6fa
 9621 09b0 00000000 		.4byte	.LFB84
 9622 09b4 C4000000 		.4byte	.LFE84-.LFB84
 9623 09b8 01       		.uleb128 0x1
 9624 09b9 9C       		.byte	0x9c
 9625 09ba 15       		.uleb128 0x15
 9626 09bb 400A0000 		.4byte	.LASF109
 9627 09bf 01       		.byte	0x1
 9628 09c0 2D07     		.2byte	0x72d
 9629 09c2 FD000000 		.4byte	0xfd
 9630 09c6 00000000 		.4byte	.LFB85
 9631 09ca 98000000 		.4byte	.LFE85-.LFB85
 9632 09ce 01       		.uleb128 0x1
 9633 09cf 9C       		.byte	0x9c
 9634 09d0 090A0000 		.4byte	0xa09
 9635 09d4 16       		.uleb128 0x16
 9636 09d5 5800     		.ascii	"X\000"
 9637 09d7 01       		.byte	0x1
 9638 09d8 2D07     		.2byte	0x72d
 9639 09da FD000000 		.4byte	0xfd
 9640 09de 02       		.uleb128 0x2
 9641 09df 91       		.byte	0x91
 9642 09e0 64       		.sleb128 -28
 9643 09e1 19       		.uleb128 0x19
 9644 09e2 5900     		.ascii	"Y\000"
 9645 09e4 01       		.byte	0x1
 9646 09e5 2E07     		.2byte	0x72e
 9647 09e7 FD000000 		.4byte	0xfd
 9648 09eb 02       		.uleb128 0x2
 9649 09ec 91       		.byte	0x91
 9650 09ed 70       		.sleb128 -16
 9651 09ee 19       		.uleb128 0x19
 9652 09ef 4600     		.ascii	"F\000"
 9653 09f1 01       		.byte	0x1
 9654 09f2 2E07     		.2byte	0x72e
 9655 09f4 FD000000 		.4byte	0xfd
 9656 09f8 02       		.uleb128 0x2
 9657 09f9 91       		.byte	0x91
 9658 09fa 74       		.sleb128 -12
 9659 09fb 19       		.uleb128 0x19
 9660 09fc 4500     		.ascii	"E\000"
 9661 09fe 01       		.byte	0x1
 9662 09ff 2F07     		.2byte	0x72f
 9663 0a01 94000000 		.4byte	0x94
 9664 0a05 02       		.uleb128 0x2
 9665 0a06 91       		.byte	0x91
 9666 0a07 6C       		.sleb128 -20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 213


 9667 0a08 00       		.byte	0
 9668 0a09 1F       		.uleb128 0x1f
 9669 0a0a BD000000 		.4byte	.LASF111
 9670 0a0e 01       		.byte	0x1
 9671 0a0f 4107     		.2byte	0x741
 9672 0a11 00000000 		.4byte	.LFB86
 9673 0a15 D4000000 		.4byte	.LFE86-.LFB86
 9674 0a19 01       		.uleb128 0x1
 9675 0a1a 9C       		.byte	0x9c
 9676 0a1b 660A0000 		.4byte	0xa66
 9677 0a1f 18       		.uleb128 0x18
 9678 0a20 150B0000 		.4byte	.LASF112
 9679 0a24 01       		.byte	0x1
 9680 0a25 4107     		.2byte	0x741
 9681 0a27 94000000 		.4byte	0x94
 9682 0a2b 02       		.uleb128 0x2
 9683 0a2c 91       		.byte	0x91
 9684 0a2d 64       		.sleb128 -28
 9685 0a2e 17       		.uleb128 0x17
 9686 0a2f ED0A0000 		.4byte	.LASF113
 9687 0a33 01       		.byte	0x1
 9688 0a34 4D07     		.2byte	0x74d
 9689 0a36 B8000000 		.4byte	0xb8
 9690 0a3a 02       		.uleb128 0x2
 9691 0a3b 91       		.byte	0x91
 9692 0a3c 76       		.sleb128 -10
 9693 0a3d 11       		.uleb128 0x11
 9694 0a3e 18000000 		.4byte	.LBB32
 9695 0a42 86000000 		.4byte	.LBE32-.LBB32
 9696 0a46 17       		.uleb128 0x17
 9697 0a47 CC0C0000 		.4byte	.LASF114
 9698 0a4b 01       		.byte	0x1
 9699 0a4c 5107     		.2byte	0x751
 9700 0a4e FD000000 		.4byte	0xfd
 9701 0a52 02       		.uleb128 0x2
 9702 0a53 91       		.byte	0x91
 9703 0a54 70       		.sleb128 -16
 9704 0a55 17       		.uleb128 0x17
 9705 0a56 870F0000 		.4byte	.LASF115
 9706 0a5a 01       		.byte	0x1
 9707 0a5b 6007     		.2byte	0x760
 9708 0a5d 94000000 		.4byte	0x94
 9709 0a61 02       		.uleb128 0x2
 9710 0a62 91       		.byte	0x91
 9711 0a63 6C       		.sleb128 -20
 9712 0a64 00       		.byte	0
 9713 0a65 00       		.byte	0
 9714 0a66 1F       		.uleb128 0x1f
 9715 0a67 C0060000 		.4byte	.LASF116
 9716 0a6b 01       		.byte	0x1
 9717 0a6c 6C07     		.2byte	0x76c
 9718 0a6e 00000000 		.4byte	.LFB87
 9719 0a72 1C000000 		.4byte	.LFE87-.LFB87
 9720 0a76 01       		.uleb128 0x1
 9721 0a77 9C       		.byte	0x9c
 9722 0a78 9A0A0000 		.4byte	0xa9a
 9723 0a7c 16       		.uleb128 0x16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 214


 9724 0a7d 636300   		.ascii	"cc\000"
 9725 0a80 01       		.byte	0x1
 9726 0a81 6C07     		.2byte	0x76c
 9727 0a83 94000000 		.4byte	0x94
 9728 0a87 02       		.uleb128 0x2
 9729 0a88 91       		.byte	0x91
 9730 0a89 74       		.sleb128 -12
 9731 0a8a 16       		.uleb128 0x16
 9732 0a8b 76616C00 		.ascii	"val\000"
 9733 0a8f 01       		.byte	0x1
 9734 0a90 6C07     		.2byte	0x76c
 9735 0a92 94000000 		.4byte	0x94
 9736 0a96 02       		.uleb128 0x2
 9737 0a97 91       		.byte	0x91
 9738 0a98 70       		.sleb128 -16
 9739 0a99 00       		.byte	0
 9740 0a9a 1F       		.uleb128 0x1f
 9741 0a9b 4A090000 		.4byte	.LASF117
 9742 0a9f 01       		.byte	0x1
 9743 0aa0 7207     		.2byte	0x772
 9744 0aa2 00000000 		.4byte	.LFB88
 9745 0aa6 68000000 		.4byte	.LFE88-.LFB88
 9746 0aaa 01       		.uleb128 0x1
 9747 0aab 9C       		.byte	0x9c
 9748 0aac DE0A0000 		.4byte	0xade
 9749 0ab0 18       		.uleb128 0x18
 9750 0ab1 E5020000 		.4byte	.LASF118
 9751 0ab5 01       		.byte	0x1
 9752 0ab6 7207     		.2byte	0x772
 9753 0ab8 94000000 		.4byte	0x94
 9754 0abc 02       		.uleb128 0x2
 9755 0abd 91       		.byte	0x91
 9756 0abe 74       		.sleb128 -12
 9757 0abf 18       		.uleb128 0x18
 9758 0ac0 ED0A0000 		.4byte	.LASF113
 9759 0ac4 01       		.byte	0x1
 9760 0ac5 7207     		.2byte	0x772
 9761 0ac7 94000000 		.4byte	0x94
 9762 0acb 02       		.uleb128 0x2
 9763 0acc 91       		.byte	0x91
 9764 0acd 70       		.sleb128 -16
 9765 0ace 18       		.uleb128 0x18
 9766 0acf 2B080000 		.4byte	.LASF119
 9767 0ad3 01       		.byte	0x1
 9768 0ad4 7207     		.2byte	0x772
 9769 0ad6 94000000 		.4byte	0x94
 9770 0ada 02       		.uleb128 0x2
 9771 0adb 91       		.byte	0x91
 9772 0adc 6C       		.sleb128 -20
 9773 0add 00       		.byte	0
 9774 0ade 1F       		.uleb128 0x1f
 9775 0adf A5050000 		.4byte	.LASF120
 9776 0ae3 01       		.byte	0x1
 9777 0ae4 7F07     		.2byte	0x77f
 9778 0ae6 00000000 		.4byte	.LFB89
 9779 0aea 68000000 		.4byte	.LFE89-.LFB89
 9780 0aee 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 215


 9781 0aef 9C       		.byte	0x9c
 9782 0af0 220B0000 		.4byte	0xb22
 9783 0af4 18       		.uleb128 0x18
 9784 0af5 E5020000 		.4byte	.LASF118
 9785 0af9 01       		.byte	0x1
 9786 0afa 7F07     		.2byte	0x77f
 9787 0afc 94000000 		.4byte	0x94
 9788 0b00 02       		.uleb128 0x2
 9789 0b01 91       		.byte	0x91
 9790 0b02 74       		.sleb128 -12
 9791 0b03 18       		.uleb128 0x18
 9792 0b04 98040000 		.4byte	.LASF121
 9793 0b08 01       		.byte	0x1
 9794 0b09 7F07     		.2byte	0x77f
 9795 0b0b 94000000 		.4byte	0x94
 9796 0b0f 02       		.uleb128 0x2
 9797 0b10 91       		.byte	0x91
 9798 0b11 70       		.sleb128 -16
 9799 0b12 18       		.uleb128 0x18
 9800 0b13 2B080000 		.4byte	.LASF119
 9801 0b17 01       		.byte	0x1
 9802 0b18 7F07     		.2byte	0x77f
 9803 0b1a 94000000 		.4byte	0x94
 9804 0b1e 02       		.uleb128 0x2
 9805 0b1f 91       		.byte	0x91
 9806 0b20 6C       		.sleb128 -20
 9807 0b21 00       		.byte	0
 9808 0b22 1F       		.uleb128 0x1f
 9809 0b23 DD050000 		.4byte	.LASF122
 9810 0b27 01       		.byte	0x1
 9811 0b28 8B07     		.2byte	0x78b
 9812 0b2a 00000000 		.4byte	.LFB90
 9813 0b2e 68000000 		.4byte	.LFE90-.LFB90
 9814 0b32 01       		.uleb128 0x1
 9815 0b33 9C       		.byte	0x9c
 9816 0b34 660B0000 		.4byte	0xb66
 9817 0b38 18       		.uleb128 0x18
 9818 0b39 A5010000 		.4byte	.LASF123
 9819 0b3d 01       		.byte	0x1
 9820 0b3e 8B07     		.2byte	0x78b
 9821 0b40 94000000 		.4byte	0x94
 9822 0b44 02       		.uleb128 0x2
 9823 0b45 91       		.byte	0x91
 9824 0b46 74       		.sleb128 -12
 9825 0b47 18       		.uleb128 0x18
 9826 0b48 F2000000 		.4byte	.LASF124
 9827 0b4c 01       		.byte	0x1
 9828 0b4d 8B07     		.2byte	0x78b
 9829 0b4f 94000000 		.4byte	0x94
 9830 0b53 02       		.uleb128 0x2
 9831 0b54 91       		.byte	0x91
 9832 0b55 70       		.sleb128 -16
 9833 0b56 18       		.uleb128 0x18
 9834 0b57 2B080000 		.4byte	.LASF119
 9835 0b5b 01       		.byte	0x1
 9836 0b5c 8B07     		.2byte	0x78b
 9837 0b5e 94000000 		.4byte	0x94
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 216


 9838 0b62 02       		.uleb128 0x2
 9839 0b63 91       		.byte	0x91
 9840 0b64 6C       		.sleb128 -20
 9841 0b65 00       		.byte	0
 9842 0b66 1F       		.uleb128 0x1f
 9843 0b67 AB0A0000 		.4byte	.LASF125
 9844 0b6b 01       		.byte	0x1
 9845 0b6c 9707     		.2byte	0x797
 9846 0b6e 00000000 		.4byte	.LFB91
 9847 0b72 6C000000 		.4byte	.LFE91-.LFB91
 9848 0b76 01       		.uleb128 0x1
 9849 0b77 9C       		.byte	0x9c
 9850 0b78 9B0B0000 		.4byte	0xb9b
 9851 0b7c 16       		.uleb128 0x16
 9852 0b7d 76616C00 		.ascii	"val\000"
 9853 0b81 01       		.byte	0x1
 9854 0b82 9707     		.2byte	0x797
 9855 0b84 94000000 		.4byte	0x94
 9856 0b88 02       		.uleb128 0x2
 9857 0b89 91       		.byte	0x91
 9858 0b8a 74       		.sleb128 -12
 9859 0b8b 18       		.uleb128 0x18
 9860 0b8c 2B080000 		.4byte	.LASF119
 9861 0b90 01       		.byte	0x1
 9862 0b91 9707     		.2byte	0x797
 9863 0b93 94000000 		.4byte	0x94
 9864 0b97 02       		.uleb128 0x2
 9865 0b98 91       		.byte	0x91
 9866 0b99 70       		.sleb128 -16
 9867 0b9a 00       		.byte	0
 9868 0b9b 14       		.uleb128 0x14
 9869 0b9c F1020000 		.4byte	.LASF126
 9870 0ba0 01       		.byte	0x1
 9871 0ba1 A307     		.2byte	0x7a3
 9872 0ba3 00000000 		.4byte	.LFB92
 9873 0ba7 64000000 		.4byte	.LFE92-.LFB92
 9874 0bab 01       		.uleb128 0x1
 9875 0bac 9C       		.byte	0x9c
 9876 0bad 1F       		.uleb128 0x1f
 9877 0bae C8060000 		.4byte	.LASF127
 9878 0bb2 01       		.byte	0x1
 9879 0bb3 BB07     		.2byte	0x7bb
 9880 0bb5 00000000 		.4byte	.LFB93
 9881 0bb9 FC080000 		.4byte	.LFE93-.LFB93
 9882 0bbd 01       		.uleb128 0x1
 9883 0bbe 9C       		.byte	0x9c
 9884 0bbf 580D0000 		.4byte	0xd58
 9885 0bc3 1D       		.uleb128 0x1d
 9886 0bc4 16000000 		.4byte	.LBB33
 9887 0bc8 3C050000 		.4byte	.LBE33-.LBB33
 9888 0bcc 730C0000 		.4byte	0xc73
 9889 0bd0 17       		.uleb128 0x17
 9890 0bd1 FD010000 		.4byte	.LASF128
 9891 0bd5 01       		.byte	0x1
 9892 0bd6 C607     		.2byte	0x7c6
 9893 0bd8 7C020000 		.4byte	0x27c
 9894 0bdc 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 217


 9895 0bdd 91       		.byte	0x91
 9896 0bde 40       		.sleb128 -64
 9897 0bdf 19       		.uleb128 0x19
 9898 0be0 6900     		.ascii	"i\000"
 9899 0be2 01       		.byte	0x1
 9900 0be3 C707     		.2byte	0x7c7
 9901 0be5 CE000000 		.4byte	0xce
 9902 0be9 02       		.uleb128 0x2
 9903 0bea 91       		.byte	0x91
 9904 0beb 6C       		.sleb128 -20
 9905 0bec 17       		.uleb128 0x17
 9906 0bed 70040000 		.4byte	.LASF129
 9907 0bf1 01       		.byte	0x1
 9908 0bf2 C807     		.2byte	0x7c8
 9909 0bf4 A2000000 		.4byte	0xa2
 9910 0bf8 02       		.uleb128 0x2
 9911 0bf9 91       		.byte	0x91
 9912 0bfa 57       		.sleb128 -41
 9913 0bfb 17       		.uleb128 0x17
 9914 0bfc 06040000 		.4byte	.LASF130
 9915 0c00 01       		.byte	0x1
 9916 0c01 DC07     		.2byte	0x7dc
 9917 0c03 B8000000 		.4byte	0xb8
 9918 0c07 02       		.uleb128 0x2
 9919 0c08 91       		.byte	0x91
 9920 0c09 54       		.sleb128 -44
 9921 0c0a 1D       		.uleb128 0x1d
 9922 0c0b 8E000000 		.4byte	.LBB34
 9923 0c0f 76000000 		.4byte	.LBE34-.LBB34
 9924 0c13 3C0C0000 		.4byte	0xc3c
 9925 0c17 19       		.uleb128 0x19
 9926 0c18 6A00     		.ascii	"j\000"
 9927 0c1a 01       		.byte	0x1
 9928 0c1b D207     		.2byte	0x7d2
 9929 0c1d 94000000 		.4byte	0x94
 9930 0c21 02       		.uleb128 0x2
 9931 0c22 91       		.byte	0x91
 9932 0c23 68       		.sleb128 -24
 9933 0c24 11       		.uleb128 0x11
 9934 0c25 94000000 		.4byte	.LBB35
 9935 0c29 64000000 		.4byte	.LBE35-.LBB35
 9936 0c2d 19       		.uleb128 0x19
 9937 0c2e 6B00     		.ascii	"k\000"
 9938 0c30 01       		.byte	0x1
 9939 0c31 D407     		.2byte	0x7d4
 9940 0c33 94000000 		.4byte	0x94
 9941 0c37 02       		.uleb128 0x2
 9942 0c38 91       		.byte	0x91
 9943 0c39 64       		.sleb128 -28
 9944 0c3a 00       		.byte	0
 9945 0c3b 00       		.byte	0
 9946 0c3c 1D       		.uleb128 0x1d
 9947 0c3d D6010000 		.4byte	.LBB36
 9948 0c41 46000000 		.4byte	.LBE36-.LBB36
 9949 0c45 590C0000 		.4byte	0xc59
 9950 0c49 17       		.uleb128 0x17
 9951 0c4a E5010000 		.4byte	.LASF131
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 218


 9952 0c4e 01       		.byte	0x1
 9953 0c4f F407     		.2byte	0x7f4
 9954 0c51 B8000000 		.4byte	0xb8
 9955 0c55 02       		.uleb128 0x2
 9956 0c56 91       		.byte	0x91
 9957 0c57 52       		.sleb128 -46
 9958 0c58 00       		.byte	0
 9959 0c59 11       		.uleb128 0x11
 9960 0c5a 06040000 		.4byte	.LBB37
 9961 0c5e 54000000 		.4byte	.LBE37-.LBB37
 9962 0c62 17       		.uleb128 0x17
 9963 0c63 E5010000 		.4byte	.LASF131
 9964 0c67 01       		.byte	0x1
 9965 0c68 3008     		.2byte	0x830
 9966 0c6a AD000000 		.4byte	0xad
 9967 0c6e 02       		.uleb128 0x2
 9968 0c6f 91       		.byte	0x91
 9969 0c70 50       		.sleb128 -48
 9970 0c71 00       		.byte	0
 9971 0c72 00       		.byte	0
 9972 0c73 11       		.uleb128 0x11
 9973 0c74 5C050000 		.4byte	.LBB38
 9974 0c78 42030000 		.4byte	.LBE38-.LBB38
 9975 0c7c 17       		.uleb128 0x17
 9976 0c7d FD010000 		.4byte	.LASF128
 9977 0c81 01       		.byte	0x1
 9978 0c82 8908     		.2byte	0x889
 9979 0c84 7C020000 		.4byte	0x27c
 9980 0c88 03       		.uleb128 0x3
 9981 0c89 91       		.byte	0x91
 9982 0c8a BC7F     		.sleb128 -68
 9983 0c8c 19       		.uleb128 0x19
 9984 0c8d 6900     		.ascii	"i\000"
 9985 0c8f 01       		.byte	0x1
 9986 0c90 8A08     		.2byte	0x88a
 9987 0c92 CE000000 		.4byte	0xce
 9988 0c96 02       		.uleb128 0x2
 9989 0c97 91       		.byte	0x91
 9990 0c98 60       		.sleb128 -32
 9991 0c99 17       		.uleb128 0x17
 9992 0c9a 70040000 		.4byte	.LASF129
 9993 0c9e 01       		.byte	0x1
 9994 0c9f 8B08     		.2byte	0x88b
 9995 0ca1 A2000000 		.4byte	0xa2
 9996 0ca5 02       		.uleb128 0x2
 9997 0ca6 91       		.byte	0x91
 9998 0ca7 4F       		.sleb128 -49
 9999 0ca8 1D       		.uleb128 0x1d
 10000 0ca9 8E050000 		.4byte	.LBB39
 10001 0cad 76000000 		.4byte	.LBE39-.LBB39
 10002 0cb1 C50C0000 		.4byte	0xcc5
 10003 0cb5 17       		.uleb128 0x17
 10004 0cb6 4D0D0000 		.4byte	.LASF132
 10005 0cba 01       		.byte	0x1
 10006 0cbb 8F08     		.2byte	0x88f
 10007 0cbd A2000000 		.4byte	0xa2
 10008 0cc1 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 219


 10009 0cc2 91       		.byte	0x91
 10010 0cc3 4E       		.sleb128 -50
 10011 0cc4 00       		.byte	0
 10012 0cc5 11       		.uleb128 0x11
 10013 0cc6 18060000 		.4byte	.LBB40
 10014 0cca F6010000 		.4byte	.LBE40-.LBB40
 10015 0cce 17       		.uleb128 0x17
 10016 0ccf 130E0000 		.4byte	.LASF133
 10017 0cd3 01       		.byte	0x1
 10018 0cd4 9A08     		.2byte	0x89a
 10019 0cd6 CE000000 		.4byte	0xce
 10020 0cda 02       		.uleb128 0x2
 10021 0cdb 91       		.byte	0x91
 10022 0cdc 5C       		.sleb128 -36
 10023 0cdd 11       		.uleb128 0x11
 10024 0cde 1E060000 		.4byte	.LBB41
 10025 0ce2 E2010000 		.4byte	.LBE41-.LBB41
 10026 0ce6 17       		.uleb128 0x17
 10027 0ce7 21040000 		.4byte	.LASF81
 10028 0ceb 01       		.byte	0x1
 10029 0cec 9C08     		.2byte	0x89c
 10030 0cee B8000000 		.4byte	0xb8
 10031 0cf2 02       		.uleb128 0x2
 10032 0cf3 91       		.byte	0x91
 10033 0cf4 4C       		.sleb128 -52
 10034 0cf5 11       		.uleb128 0x11
 10035 0cf6 30060000 		.4byte	.LBB42
 10036 0cfa D0010000 		.4byte	.LBE42-.LBB42
 10037 0cfe 17       		.uleb128 0x17
 10038 0cff BD050000 		.4byte	.LASF134
 10039 0d03 01       		.byte	0x1
 10040 0d04 9D08     		.2byte	0x89d
 10041 0d06 CE000000 		.4byte	0xce
 10042 0d0a 02       		.uleb128 0x2
 10043 0d0b 91       		.byte	0x91
 10044 0d0c 58       		.sleb128 -40
 10045 0d0d 11       		.uleb128 0x11
 10046 0d0e 8C060000 		.4byte	.LBB43
 10047 0d12 66010000 		.4byte	.LBE43-.LBB43
 10048 0d16 17       		.uleb128 0x17
 10049 0d17 D4030000 		.4byte	.LASF135
 10050 0d1b 01       		.byte	0x1
 10051 0d1c A708     		.2byte	0x8a7
 10052 0d1e B8000000 		.4byte	0xb8
 10053 0d22 02       		.uleb128 0x2
 10054 0d23 91       		.byte	0x91
 10055 0d24 4A       		.sleb128 -54
 10056 0d25 17       		.uleb128 0x17
 10057 0d26 400C0000 		.4byte	.LASF136
 10058 0d2a 01       		.byte	0x1
 10059 0d2b A808     		.2byte	0x8a8
 10060 0d2d A2000000 		.4byte	0xa2
 10061 0d31 02       		.uleb128 0x2
 10062 0d32 91       		.byte	0x91
 10063 0d33 49       		.sleb128 -55
 10064 0d34 17       		.uleb128 0x17
 10065 0d35 21010000 		.4byte	.LASF137
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 220


 10066 0d39 01       		.byte	0x1
 10067 0d3a A908     		.2byte	0x8a9
 10068 0d3c A2000000 		.4byte	0xa2
 10069 0d40 02       		.uleb128 0x2
 10070 0d41 91       		.byte	0x91
 10071 0d42 48       		.sleb128 -56
 10072 0d43 17       		.uleb128 0x17
 10073 0d44 59030000 		.4byte	.LASF82
 10074 0d48 01       		.byte	0x1
 10075 0d49 AC08     		.2byte	0x8ac
 10076 0d4b B8000000 		.4byte	0xb8
 10077 0d4f 02       		.uleb128 0x2
 10078 0d50 91       		.byte	0x91
 10079 0d51 46       		.sleb128 -58
 10080 0d52 00       		.byte	0
 10081 0d53 00       		.byte	0
 10082 0d54 00       		.byte	0
 10083 0d55 00       		.byte	0
 10084 0d56 00       		.byte	0
 10085 0d57 00       		.byte	0
 10086 0d58 1F       		.uleb128 0x1f
 10087 0d59 86030000 		.4byte	.LASF138
 10088 0d5d 01       		.byte	0x1
 10089 0d5e D908     		.2byte	0x8d9
 10090 0d60 00000000 		.4byte	.LFB94
 10091 0d64 3C010000 		.4byte	.LFE94-.LFB94
 10092 0d68 01       		.uleb128 0x1
 10093 0d69 9C       		.byte	0x9c
 10094 0d6a A40D0000 		.4byte	0xda4
 10095 0d6e 18       		.uleb128 0x18
 10096 0d6f D90A0000 		.4byte	.LASF139
 10097 0d73 01       		.byte	0x1
 10098 0d74 D908     		.2byte	0x8d9
 10099 0d76 D9000000 		.4byte	0xd9
 10100 0d7a 02       		.uleb128 0x2
 10101 0d7b 91       		.byte	0x91
 10102 0d7c 6F       		.sleb128 -17
 10103 0d7d 18       		.uleb128 0x18
 10104 0d7e 030C0000 		.4byte	.LASF140
 10105 0d82 01       		.byte	0x1
 10106 0d83 D908     		.2byte	0x8d9
 10107 0d85 A40D0000 		.4byte	0xda4
 10108 0d89 02       		.uleb128 0x2
 10109 0d8a 91       		.byte	0x91
 10110 0d8b 68       		.sleb128 -24
 10111 0d8c 11       		.uleb128 0x11
 10112 0d8d 48000000 		.4byte	.LBB44
 10113 0d91 54000000 		.4byte	.LBE44-.LBB44
 10114 0d95 19       		.uleb128 0x19
 10115 0d96 6900     		.ascii	"i\000"
 10116 0d98 01       		.byte	0x1
 10117 0d99 E508     		.2byte	0x8e5
 10118 0d9b 94000000 		.4byte	0x94
 10119 0d9f 02       		.uleb128 0x2
 10120 0da0 91       		.byte	0x91
 10121 0da1 74       		.sleb128 -12
 10122 0da2 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 221


 10123 0da3 00       		.byte	0
 10124 0da4 20       		.uleb128 0x20
 10125 0da5 04       		.byte	0x4
 10126 0da6 D9000000 		.4byte	0xd9
 10127 0daa 07       		.uleb128 0x7
 10128 0dab D9000000 		.4byte	0xd9
 10129 0daf BA0D0000 		.4byte	0xdba
 10130 0db3 08       		.uleb128 0x8
 10131 0db4 36010000 		.4byte	0x136
 10132 0db8 01       		.byte	0x1
 10133 0db9 00       		.byte	0
 10134 0dba 21       		.uleb128 0x21
 10135 0dbb D4040000 		.4byte	.LASF141
 10136 0dbf 01       		.byte	0x1
 10137 0dc0 DB       		.byte	0xdb
 10138 0dc1 AA0D0000 		.4byte	0xdaa
 10139 0dc5 05       		.uleb128 0x5
 10140 0dc6 03       		.byte	0x3
 10141 0dc7 60000000 		.4byte	eepromArray
 10142 0dcb 22       		.uleb128 0x22
 10143 0dcc 6C0E0000 		.4byte	.LASF142
 10144 0dd0 08       		.byte	0x8
 10145 0dd1 F3       		.byte	0xf3
 10146 0dd2 2A010000 		.4byte	0x12a
 10147 0dd6 22       		.uleb128 0x22
 10148 0dd7 F60E0000 		.4byte	.LASF143
 10149 0ddb 08       		.byte	0x8
 10150 0ddc F9       		.byte	0xf9
 10151 0ddd 2A010000 		.4byte	0x12a
 10152 0de1 07       		.uleb128 0x7
 10153 0de2 D9000000 		.4byte	0xd9
 10154 0de6 F10D0000 		.4byte	0xdf1
 10155 0dea 08       		.uleb128 0x8
 10156 0deb 36010000 		.4byte	0x136
 10157 0def 3F       		.byte	0x3f
 10158 0df0 00       		.byte	0
 10159 0df1 22       		.uleb128 0x22
 10160 0df2 AB080000 		.4byte	.LASF144
 10161 0df6 08       		.byte	0x8
 10162 0df7 FA       		.byte	0xfa
 10163 0df8 E10D0000 		.4byte	0xde1
 10164 0dfc 22       		.uleb128 0x22
 10165 0dfd 3F050000 		.4byte	.LASF145
 10166 0e01 08       		.byte	0x8
 10167 0e02 FE       		.byte	0xfe
 10168 0e03 2A010000 		.4byte	0x12a
 10169 0e07 22       		.uleb128 0x22
 10170 0e08 B10E0000 		.4byte	.LASF146
 10171 0e0c 08       		.byte	0x8
 10172 0e0d FF       		.byte	0xff
 10173 0e0e E10D0000 		.4byte	0xde1
 10174 0e12 22       		.uleb128 0x22
 10175 0e13 A1000000 		.4byte	.LASF147
 10176 0e17 09       		.byte	0x9
 10177 0e18 82       		.byte	0x82
 10178 0e19 BF010000 		.4byte	0x1bf
 10179 0e1d 07       		.uleb128 0x7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 222


 10180 0e1e 2E0E0000 		.4byte	0xe2e
 10181 0e22 2E0E0000 		.4byte	0xe2e
 10182 0e26 23       		.uleb128 0x23
 10183 0e27 36010000 		.4byte	0x136
 10184 0e2b FF03     		.2byte	0x3ff
 10185 0e2d 00       		.byte	0
 10186 0e2e 24       		.uleb128 0x24
 10187 0e2f A2000000 		.4byte	0xa2
 10188 0e33 25       		.uleb128 0x25
 10189 0e34 DB070000 		.4byte	.LASF148
 10190 0e38 01       		.byte	0x1
 10191 0e39 E8       		.byte	0xe8
 10192 0e3a 440E0000 		.4byte	0xe44
 10193 0e3e 05       		.uleb128 0x5
 10194 0e3f 03       		.byte	0x3
 10195 0e40 00000000 		.4byte	Em_EEPROM_em_EepromStorage
 10196 0e44 24       		.uleb128 0x24
 10197 0e45 1D0E0000 		.4byte	0xe1d
 10198 0e49 22       		.uleb128 0x22
 10199 0e4a 26060000 		.4byte	.LASF149
 10200 0e4e 0A       		.byte	0xa
 10201 0e4f F9       		.byte	0xf9
 10202 0e50 D9000000 		.4byte	0xd9
 10203 0e54 26       		.uleb128 0x26
 10204 0e55 4D0A0000 		.4byte	.LASF150
 10205 0e59 0B       		.byte	0xb
 10206 0e5a 1207     		.2byte	0x712
 10207 0e5c 600E0000 		.4byte	0xe60
 10208 0e60 06       		.uleb128 0x6
 10209 0e61 C3000000 		.4byte	0xc3
 10210 0e65 07       		.uleb128 0x7
 10211 0e66 03020000 		.4byte	0x203
 10212 0e6a 750E0000 		.4byte	0xe75
 10213 0e6e 08       		.uleb128 0x8
 10214 0e6f 36010000 		.4byte	0x136
 10215 0e73 FF       		.byte	0xff
 10216 0e74 00       		.byte	0
 10217 0e75 27       		.uleb128 0x27
 10218 0e76 04010000 		.4byte	.LASF151
 10219 0e7a 01       		.byte	0x1
 10220 0e7b 5001     		.2byte	0x150
 10221 0e7d 870E0000 		.4byte	0xe87
 10222 0e81 05       		.uleb128 0x5
 10223 0e82 03       		.byte	0x3
 10224 0e83 00000000 		.4byte	I2Cbuff1
 10225 0e87 06       		.uleb128 0x6
 10226 0e88 650E0000 		.4byte	0xe65
 10227 0e8c 07       		.uleb128 0x7
 10228 0e8d A2000000 		.4byte	0xa2
 10229 0e91 9D0E0000 		.4byte	0xe9d
 10230 0e95 23       		.uleb128 0x23
 10231 0e96 36010000 		.4byte	0x136
 10232 0e9a FF07     		.2byte	0x7ff
 10233 0e9c 00       		.byte	0
 10234 0e9d 25       		.uleb128 0x25
 10235 0e9e 280D0000 		.4byte	.LASF152
 10236 0ea2 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 223


 10237 0ea3 15       		.byte	0x15
 10238 0ea4 8C0E0000 		.4byte	0xe8c
 10239 0ea8 05       		.uleb128 0x5
 10240 0ea9 03       		.byte	0x3
 10241 0eaa 00000000 		.4byte	sysexBuffer
 10242 0eae 25       		.uleb128 0x25
 10243 0eaf 44030000 		.4byte	.LASF153
 10244 0eb3 01       		.byte	0x1
 10245 0eb4 16       		.byte	0x16
 10246 0eb5 CE000000 		.4byte	0xce
 10247 0eb9 05       		.uleb128 0x5
 10248 0eba 03       		.byte	0x3
 10249 0ebb 00000000 		.4byte	sysexPointer
 10250 0ebf 25       		.uleb128 0x25
 10251 0ec0 CA0A0000 		.4byte	.LASF154
 10252 0ec4 01       		.byte	0x1
 10253 0ec5 17       		.byte	0x17
 10254 0ec6 A2000000 		.4byte	0xa2
 10255 0eca 05       		.uleb128 0x5
 10256 0ecb 03       		.byte	0x3
 10257 0ecc 00000000 		.4byte	receivingSysex
 10258 0ed0 25       		.uleb128 0x25
 10259 0ed1 3F060000 		.4byte	.LASF155
 10260 0ed5 01       		.byte	0x1
 10261 0ed6 18       		.byte	0x18
 10262 0ed7 A2000000 		.4byte	0xa2
 10263 0edb 05       		.uleb128 0x5
 10264 0edc 03       		.byte	0x3
 10265 0edd 00000000 		.4byte	parsingSysex
 10266 0ee1 07       		.uleb128 0x7
 10267 0ee2 03020000 		.4byte	0x203
 10268 0ee6 F20E0000 		.4byte	0xef2
 10269 0eea 23       		.uleb128 0x23
 10270 0eeb 36010000 		.4byte	0x136
 10271 0eef FF07     		.2byte	0x7ff
 10272 0ef1 00       		.byte	0
 10273 0ef2 25       		.uleb128 0x25
 10274 0ef3 13000000 		.4byte	.LASF156
 10275 0ef7 01       		.byte	0x1
 10276 0ef8 19       		.byte	0x19
 10277 0ef9 030F0000 		.4byte	0xf03
 10278 0efd 05       		.uleb128 0x5
 10279 0efe 03       		.byte	0x3
 10280 0eff 00000000 		.4byte	presetArray
 10281 0f03 06       		.uleb128 0x6
 10282 0f04 E10E0000 		.4byte	0xee1
 10283 0f08 25       		.uleb128 0x25
 10284 0f09 90020000 		.4byte	.LASF157
 10285 0f0d 01       		.byte	0x1
 10286 0f0e 1A       		.byte	0x1a
 10287 0f0f A2000000 		.4byte	0xa2
 10288 0f13 05       		.uleb128 0x5
 10289 0f14 03       		.byte	0x3
 10290 0f15 00000000 		.4byte	presetNumberToWrite
 10291 0f19 25       		.uleb128 0x25
 10292 0f1a 9D0C0000 		.4byte	.LASF158
 10293 0f1e 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 224


 10294 0f1f 1B       		.byte	0x1b
 10295 0f20 A2000000 		.4byte	0xa2
 10296 0f24 05       		.uleb128 0x5
 10297 0f25 03       		.byte	0x3
 10298 0f26 00000000 		.4byte	copedentNumberToWrite
 10299 0f2a 25       		.uleb128 0x25
 10300 0f2b 35020000 		.4byte	.LASF159
 10301 0f2f 01       		.byte	0x1
 10302 0f30 1C       		.byte	0x1c
 10303 0f31 A2000000 		.4byte	0xa2
 10304 0f35 05       		.uleb128 0x5
 10305 0f36 03       		.byte	0x3
 10306 0f37 00000000 		.4byte	sendMessageEnd
 10307 0f3b 25       		.uleb128 0x25
 10308 0f3c 00000000 		.4byte	.LASF160
 10309 0f40 01       		.byte	0x1
 10310 0f41 26       		.byte	0x26
 10311 0f42 A2000000 		.4byte	0xa2
 10312 0f46 05       		.uleb128 0x5
 10313 0f47 03       		.byte	0x3
 10314 0f48 00000000 		.4byte	presetArraySection
 10315 0f4c 25       		.uleb128 0x25
 10316 0f4d 9D090000 		.4byte	.LASF161
 10317 0f51 01       		.byte	0x1
 10318 0f52 28       		.byte	0x28
 10319 0f53 B8000000 		.4byte	0xb8
 10320 0f57 05       		.uleb128 0x5
 10321 0f58 03       		.byte	0x3
 10322 0f59 00000000 		.4byte	messageArraySendCount
 10323 0f5d 25       		.uleb128 0x25
 10324 0f5e BC0D0000 		.4byte	.LASF162
 10325 0f62 01       		.byte	0x1
 10326 0f63 29       		.byte	0x29
 10327 0f64 B8000000 		.4byte	0xb8
 10328 0f68 05       		.uleb128 0x5
 10329 0f69 03       		.byte	0x3
 10330 0f6a 00000000 		.4byte	messageArraySize
 10331 0f6e 25       		.uleb128 0x25
 10332 0f6f A9060000 		.4byte	.LASF163
 10333 0f73 01       		.byte	0x1
 10334 0f74 2B       		.byte	0x2b
 10335 0f75 A2000000 		.4byte	0xa2
 10336 0f79 05       		.uleb128 0x5
 10337 0f7a 03       		.byte	0x3
 10338 0f7b 00000000 		.4byte	sysexMessageInProgress
 10339 0f7f 25       		.uleb128 0x25
 10340 0f80 340D0000 		.4byte	.LASF164
 10341 0f84 01       		.byte	0x1
 10342 0f85 2D       		.byte	0x2d
 10343 0f86 A2000000 		.4byte	0xa2
 10344 0f8a 05       		.uleb128 0x5
 10345 0f8b 03       		.byte	0x3
 10346 0f8c 00000000 		.4byte	bufCount
 10347 0f90 25       		.uleb128 0x25
 10348 0f91 33000000 		.4byte	.LASF165
 10349 0f95 01       		.byte	0x1
 10350 0f96 2E       		.byte	0x2e
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 225


 10351 0f97 03020000 		.4byte	0x203
 10352 0f9b 05       		.uleb128 0x5
 10353 0f9c 03       		.byte	0x3
 10354 0f9d 00000000 		.4byte	sendingMessage
 10355 0fa1 25       		.uleb128 0x25
 10356 0fa2 1C030000 		.4byte	.LASF166
 10357 0fa6 01       		.byte	0x1
 10358 0fa7 2F       		.byte	0x2f
 10359 0fa8 03020000 		.4byte	0x203
 10360 0fac 05       		.uleb128 0x5
 10361 0fad 03       		.byte	0x3
 10362 0fae 00000000 		.4byte	sendKnobs
 10363 0fb2 25       		.uleb128 0x25
 10364 0fb3 6E020000 		.4byte	.LASF167
 10365 0fb7 01       		.byte	0x1
 10366 0fb8 30       		.byte	0x30
 10367 0fb9 CE000000 		.4byte	0xce
 10368 0fbd 05       		.uleb128 0x5
 10369 0fbe 03       		.byte	0x3
 10370 0fbf 00000000 		.4byte	currentFloat
 10371 0fc3 25       		.uleb128 0x25
 10372 0fc4 CB030000 		.4byte	.LASF168
 10373 0fc8 01       		.byte	0x1
 10374 0fc9 31       		.byte	0x31
 10375 0fca CE000000 		.4byte	0xce
 10376 0fce 05       		.uleb128 0x5
 10377 0fcf 03       		.byte	0x3
 10378 0fd0 00000000 		.4byte	mapCount
 10379 0fd4 25       		.uleb128 0x25
 10380 0fd5 94010000 		.4byte	.LASF169
 10381 0fd9 01       		.byte	0x1
 10382 0fda 33       		.byte	0x33
 10383 0fdb B8000000 		.4byte	0xb8
 10384 0fdf 05       		.uleb128 0x5
 10385 0fe0 03       		.byte	0x3
 10386 0fe1 00000000 		.4byte	valsCount
 10387 0fe5 25       		.uleb128 0x25
 10388 0fe6 54040000 		.4byte	.LASF170
 10389 0fea 01       		.byte	0x1
 10390 0feb 34       		.byte	0x34
 10391 0fec B8000000 		.4byte	0xb8
 10392 0ff0 05       		.uleb128 0x5
 10393 0ff1 03       		.byte	0x3
 10394 0ff2 00000000 		.4byte	mapCountExpectation
 10395 0ff6 25       		.uleb128 0x25
 10396 0ff7 F8000000 		.4byte	.LASF171
 10397 0ffb 01       		.byte	0x1
 10398 0ffc 35       		.byte	0x35
 10399 0ffd B8000000 		.4byte	0xb8
 10400 1001 05       		.uleb128 0x5
 10401 1002 03       		.byte	0x3
 10402 1003 00000000 		.4byte	numMappings
 10403 1007 25       		.uleb128 0x25
 10404 1008 F00C0000 		.4byte	.LASF172
 10405 100c 01       		.byte	0x1
 10406 100d 36       		.byte	0x36
 10407 100e 03020000 		.4byte	0x203
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 226


 10408 1012 05       		.uleb128 0x5
 10409 1013 03       		.byte	0x3
 10410 1014 00000000 		.4byte	parseThatMF
 10411 1018 25       		.uleb128 0x25
 10412 1019 FD030000 		.4byte	.LASF173
 10413 101d 01       		.byte	0x1
 10414 101e 37       		.byte	0x37
 10415 101f 29100000 		.4byte	0x1029
 10416 1023 05       		.uleb128 0x5
 10417 1024 03       		.byte	0x3
 10418 1025 00000000 		.4byte	valCheck
 10419 1029 06       		.uleb128 0x6
 10420 102a FD000000 		.4byte	0xfd
 10421 102e 25       		.uleb128 0x25
 10422 102f 490C0000 		.4byte	.LASF174
 10423 1033 01       		.byte	0x1
 10424 1034 38       		.byte	0x38
 10425 1035 29100000 		.4byte	0x1029
 10426 1039 05       		.uleb128 0x5
 10427 103a 03       		.byte	0x3
 10428 103b 00000000 		.4byte	testVal
 10429 103f 25       		.uleb128 0x25
 10430 1040 51080000 		.4byte	.LASF175
 10431 1044 01       		.byte	0x1
 10432 1045 3A       		.byte	0x3a
 10433 1046 94000000 		.4byte	0x94
 10434 104a 05       		.uleb128 0x5
 10435 104b 03       		.byte	0x3
 10436 104c 00000000 		.4byte	numStrings
 10437 1050 25       		.uleb128 0x25
 10438 1051 D40C0000 		.4byte	.LASF176
 10439 1055 01       		.byte	0x1
 10440 1056 40       		.byte	0x40
 10441 1057 2A010000 		.4byte	0x12a
 10442 105b 05       		.uleb128 0x5
 10443 105c 03       		.byte	0x3
 10444 105d 00000000 		.4byte	usbActivityCounter
 10445 1061 25       		.uleb128 0x25
 10446 1062 030C0000 		.4byte	.LASF140
 10447 1066 01       		.byte	0x1
 10448 1067 41       		.byte	0x41
 10449 1068 3D010000 		.4byte	0x13d
 10450 106c 05       		.uleb128 0x5
 10451 106d 03       		.byte	0x3
 10452 106e 00000000 		.4byte	midiMsg
 10453 1072 25       		.uleb128 0x25
 10454 1073 3A0F0000 		.4byte	.LASF177
 10455 1077 01       		.byte	0x1
 10456 1078 42       		.byte	0x42
 10457 1079 A2000000 		.4byte	0xa2
 10458 107d 05       		.uleb128 0x5
 10459 107e 03       		.byte	0x3
 10460 107f 00000000 		.4byte	currentVBUS
 10461 1083 25       		.uleb128 0x25
 10462 1084 2B0F0000 		.4byte	.LASF178
 10463 1088 01       		.byte	0x1
 10464 1089 43       		.byte	0x43
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 227


 10465 108a A2000000 		.4byte	0xa2
 10466 108e 05       		.uleb128 0x5
 10467 108f 03       		.byte	0x3
 10468 1090 00000000 		.4byte	prevVBUS
 10469 1094 25       		.uleb128 0x25
 10470 1095 120D0000 		.4byte	.LASF179
 10471 1099 01       		.byte	0x1
 10472 109a 44       		.byte	0x44
 10473 109b 03020000 		.4byte	0x203
 10474 109f 05       		.uleb128 0x5
 10475 10a0 03       		.byte	0x3
 10476 10a1 00000000 		.4byte	USB_active
 10477 10a5 25       		.uleb128 0x25
 10478 10a6 8E090000 		.4byte	.LASF180
 10479 10aa 01       		.byte	0x1
 10480 10ab 45       		.byte	0x45
 10481 10ac 03020000 		.4byte	0x203
 10482 10b0 05       		.uleb128 0x5
 10483 10b1 03       		.byte	0x3
 10484 10b2 00000000 		.4byte	USB_check_flag
 10485 10b6 07       		.uleb128 0x7
 10486 10b7 D9000000 		.4byte	0xd9
 10487 10bb C6100000 		.4byte	0x10c6
 10488 10bf 08       		.uleb128 0x8
 10489 10c0 36010000 		.4byte	0x136
 10490 10c4 1F       		.byte	0x1f
 10491 10c5 00       		.byte	0
 10492 10c6 25       		.uleb128 0x25
 10493 10c7 960E0000 		.4byte	.LASF181
 10494 10cb 01       		.byte	0x1
 10495 10cc 48       		.byte	0x48
 10496 10cd B6100000 		.4byte	0x10b6
 10497 10d1 05       		.uleb128 0x5
 10498 10d2 03       		.byte	0x3
 10499 10d3 00000000 		.4byte	inBuffer
 10500 10d7 25       		.uleb128 0x25
 10501 10d8 0B100000 		.4byte	.LASF182
 10502 10dc 01       		.byte	0x1
 10503 10dd 4A       		.byte	0x4a
 10504 10de B6100000 		.4byte	0x10b6
 10505 10e2 05       		.uleb128 0x5
 10506 10e3 03       		.byte	0x3
 10507 10e4 00000000 		.4byte	myArray
 10508 10e8 25       		.uleb128 0x25
 10509 10e9 A90F0000 		.4byte	.LASF183
 10510 10ed 01       		.byte	0x1
 10511 10ee 4B       		.byte	0x4b
 10512 10ef AA0D0000 		.4byte	0xdaa
 10513 10f3 05       		.uleb128 0x5
 10514 10f4 03       		.byte	0x3
 10515 10f5 00000000 		.4byte	myInputArray
 10516 10f9 07       		.uleb128 0x7
 10517 10fa C3000000 		.4byte	0xc3
 10518 10fe 09110000 		.4byte	0x1109
 10519 1102 08       		.uleb128 0x8
 10520 1103 36010000 		.4byte	0x136
 10521 1107 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 228


 10522 1108 00       		.byte	0
 10523 1109 25       		.uleb128 0x25
 10524 110a 17080000 		.4byte	.LASF184
 10525 110e 01       		.byte	0x1
 10526 110f 4C       		.byte	0x4c
 10527 1110 F9100000 		.4byte	0x10f9
 10528 1114 05       		.uleb128 0x5
 10529 1115 03       		.byte	0x3
 10530 1116 00000000 		.4byte	linearPotValue32Bit
 10531 111a 28       		.uleb128 0x28
 10532 111b 6900     		.ascii	"i\000"
 10533 111d 01       		.byte	0x1
 10534 111e 4D       		.byte	0x4d
 10535 111f A2000000 		.4byte	0xa2
 10536 1123 05       		.uleb128 0x5
 10537 1124 03       		.byte	0x3
 10538 1125 00000000 		.4byte	i
 10539 1129 25       		.uleb128 0x25
 10540 112a CC090000 		.4byte	.LASF185
 10541 112e 01       		.byte	0x1
 10542 112f 4E       		.byte	0x4e
 10543 1130 A2000000 		.4byte	0xa2
 10544 1134 05       		.uleb128 0x5
 10545 1135 03       		.byte	0x3
 10546 1136 00000000 		.4byte	counter
 10547 113a 07       		.uleb128 0x7
 10548 113b A2000000 		.4byte	0xa2
 10549 113f 4A110000 		.4byte	0x114a
 10550 1143 08       		.uleb128 0x8
 10551 1144 36010000 		.4byte	0x136
 10552 1148 1F       		.byte	0x1f
 10553 1149 00       		.byte	0
 10554 114a 25       		.uleb128 0x25
 10555 114b 4C060000 		.4byte	.LASF186
 10556 114f 01       		.byte	0x1
 10557 1150 4F       		.byte	0x4f
 10558 1151 3A110000 		.4byte	0x113a
 10559 1155 05       		.uleb128 0x5
 10560 1156 03       		.byte	0x3
 10561 1157 00000000 		.4byte	returnedData
 10562 115b 25       		.uleb128 0x25
 10563 115c 9E010000 		.4byte	.LASF187
 10564 1160 01       		.byte	0x1
 10565 1161 50       		.byte	0x50
 10566 1162 C3000000 		.4byte	0xc3
 10567 1166 05       		.uleb128 0x5
 10568 1167 03       		.byte	0x3
 10569 1168 00000000 		.4byte	temper
 10570 116c 07       		.uleb128 0x7
 10571 116d 94000000 		.4byte	0x94
 10572 1171 7C110000 		.4byte	0x117c
 10573 1175 08       		.uleb128 0x8
 10574 1176 36010000 		.4byte	0x136
 10575 117a 0A       		.byte	0xa
 10576 117b 00       		.byte	0
 10577 117c 25       		.uleb128 0x25
 10578 117d 490E0000 		.4byte	.LASF188
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 229


 10579 1181 01       		.byte	0x1
 10580 1182 51       		.byte	0x51
 10581 1183 6C110000 		.4byte	0x116c
 10582 1187 05       		.uleb128 0x5
 10583 1188 03       		.byte	0x3
 10584 1189 00000000 		.4byte	previousButtons
 10585 118d 25       		.uleb128 0x25
 10586 118e 2F010000 		.4byte	.LASF189
 10587 1192 01       		.byte	0x1
 10588 1193 52       		.byte	0x52
 10589 1194 94000000 		.4byte	0x94
 10590 1198 05       		.uleb128 0x5
 10591 1199 03       		.byte	0x3
 10592 119a 00000000 		.4byte	octave
 10593 119e 07       		.uleb128 0x7
 10594 119f B8000000 		.4byte	0xb8
 10595 11a3 AE110000 		.4byte	0x11ae
 10596 11a7 08       		.uleb128 0x8
 10597 11a8 36010000 		.4byte	0x136
 10598 11ac 09       		.byte	0x9
 10599 11ad 00       		.byte	0
 10600 11ae 25       		.uleb128 0x25
 10601 11af 4B080000 		.4byte	.LASF190
 10602 11b3 01       		.byte	0x1
 10603 11b4 53       		.byte	0x53
 10604 11b5 9E110000 		.4byte	0x119e
 10605 11b9 05       		.uleb128 0x5
 10606 11ba 03       		.byte	0x3
 10607 11bb 00000000 		.4byte	angle
 10608 11bf 25       		.uleb128 0x25
 10609 11c0 890B0000 		.4byte	.LASF191
 10610 11c4 01       		.byte	0x1
 10611 11c5 54       		.byte	0x54
 10612 11c6 9E110000 		.4byte	0x119e
 10613 11ca 05       		.uleb128 0x5
 10614 11cb 03       		.byte	0x3
 10615 11cc 00000000 		.4byte	prevAngle
 10616 11d0 07       		.uleb128 0x7
 10617 11d1 B8000000 		.4byte	0xb8
 10618 11d5 E0110000 		.4byte	0x11e0
 10619 11d9 08       		.uleb128 0x8
 10620 11da 36010000 		.4byte	0x136
 10621 11de 03       		.byte	0x3
 10622 11df 00       		.byte	0
 10623 11e0 25       		.uleb128 0x25
 10624 11e1 D30B0000 		.4byte	.LASF192
 10625 11e5 01       		.byte	0x1
 10626 11e6 56       		.byte	0x56
 10627 11e7 D0110000 		.4byte	0x11d0
 10628 11eb 05       		.uleb128 0x5
 10629 11ec 03       		.byte	0x3
 10630 11ed 00000000 		.4byte	ADC_values
 10631 11f1 25       		.uleb128 0x25
 10632 11f2 F0040000 		.4byte	.LASF193
 10633 11f6 01       		.byte	0x1
 10634 11f7 57       		.byte	0x57
 10635 11f8 B8000000 		.4byte	0xb8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 230


 10636 11fc 05       		.uleb128 0x5
 10637 11fd 03       		.byte	0x3
 10638 11fe 00000000 		.4byte	rawAngle
 10639 1202 25       		.uleb128 0x25
 10640 1203 FA0B0000 		.4byte	.LASF194
 10641 1207 01       		.byte	0x1
 10642 1208 58       		.byte	0x58
 10643 1209 B8000000 		.4byte	0xb8
 10644 120d 05       		.uleb128 0x5
 10645 120e 03       		.byte	0x3
 10646 120f 00000000 		.4byte	midiSent
 10647 1213 25       		.uleb128 0x25
 10648 1214 7A050000 		.4byte	.LASF195
 10649 1218 01       		.byte	0x1
 10650 1219 59       		.byte	0x59
 10651 121a B8000000 		.4byte	0xb8
 10652 121e 05       		.uleb128 0x5
 10653 121f 03       		.byte	0x3
 10654 1220 00000000 		.4byte	midiOverflow
 10655 1224 07       		.uleb128 0x7
 10656 1225 A2000000 		.4byte	0xa2
 10657 1229 34120000 		.4byte	0x1234
 10658 122d 08       		.uleb128 0x8
 10659 122e 36010000 		.4byte	0x136
 10660 1232 07       		.byte	0x7
 10661 1233 00       		.byte	0
 10662 1234 25       		.uleb128 0x25
 10663 1235 C30E0000 		.4byte	.LASF196
 10664 1239 01       		.byte	0x1
 10665 123a 5B       		.byte	0x5b
 10666 123b 24120000 		.4byte	0x1224
 10667 123f 05       		.uleb128 0x5
 10668 1240 03       		.byte	0x3
 10669 1241 00000000 		.4byte	macroKnobValues
 10670 1245 25       		.uleb128 0x25
 10671 1246 E0040000 		.4byte	.LASF197
 10672 124a 01       		.byte	0x1
 10673 124b 5D       		.byte	0x5d
 10674 124c A2000000 		.4byte	0xa2
 10675 1250 05       		.uleb128 0x5
 10676 1251 03       		.byte	0x3
 10677 1252 00000000 		.4byte	currentCopedent
 10678 1256 07       		.uleb128 0x7
 10679 1257 A2000000 		.4byte	0xa2
 10680 125b 66120000 		.4byte	0x1266
 10681 125f 08       		.uleb128 0x8
 10682 1260 36010000 		.4byte	0x136
 10683 1264 01       		.byte	0x1
 10684 1265 00       		.byte	0
 10685 1266 25       		.uleb128 0x25
 10686 1267 29010000 		.4byte	.LASF198
 10687 126b 01       		.byte	0x1
 10688 126c 5E       		.byte	0x5e
 10689 126d 56120000 		.4byte	0x1256
 10690 1271 05       		.uleb128 0x5
 10691 1272 03       		.byte	0x3
 10692 1273 00000000 		.4byte	necks
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 231


 10693 1277 25       		.uleb128 0x25
 10694 1278 16040000 		.4byte	.LASF199
 10695 127c 01       		.byte	0x1
 10696 127d 7D       		.byte	0x7d
 10697 127e D9000000 		.4byte	0xd9
 10698 1282 05       		.uleb128 0x5
 10699 1283 03       		.byte	0x3
 10700 1284 00000000 		.4byte	rx1Channel
 10701 1288 25       		.uleb128 0x25
 10702 1289 EB0E0000 		.4byte	.LASF200
 10703 128d 01       		.byte	0x1
 10704 128e 7D       		.byte	0x7d
 10705 128f D9000000 		.4byte	0xd9
 10706 1293 05       		.uleb128 0x5
 10707 1294 03       		.byte	0x3
 10708 1295 00000000 		.4byte	rx2Channel
 10709 1299 25       		.uleb128 0x25
 10710 129a E0090000 		.4byte	.LASF201
 10711 129e 01       		.byte	0x1
 10712 129f 7E       		.byte	0x7e
 10713 12a0 AA0D0000 		.4byte	0xdaa
 10714 12a4 05       		.uleb128 0x5
 10715 12a5 03       		.byte	0x3
 10716 12a6 00000000 		.4byte	rx1TD
 10717 12aa 25       		.uleb128 0x25
 10718 12ab 510C0000 		.4byte	.LASF202
 10719 12af 01       		.byte	0x1
 10720 12b0 7E       		.byte	0x7e
 10721 12b1 AA0D0000 		.4byte	0xdaa
 10722 12b5 05       		.uleb128 0x5
 10723 12b6 03       		.byte	0x3
 10724 12b7 00000000 		.4byte	rx2TD
 10725 12bb 25       		.uleb128 0x25
 10726 12bc 580B0000 		.4byte	.LASF203
 10727 12c0 01       		.byte	0x1
 10728 12c1 80       		.byte	0x80
 10729 12c2 2A010000 		.4byte	0x12a
 10730 12c6 05       		.uleb128 0x5
 10731 12c7 03       		.byte	0x3
 10732 12c8 00000000 		.4byte	txChannel
 10733 12cc 25       		.uleb128 0x25
 10734 12cd 920F0000 		.4byte	.LASF204
 10735 12d1 01       		.byte	0x1
 10736 12d2 81       		.byte	0x81
 10737 12d3 2A010000 		.4byte	0x12a
 10738 12d7 05       		.uleb128 0x5
 10739 12d8 03       		.byte	0x3
 10740 12d9 00000000 		.4byte	txTD
 10741 12dd 25       		.uleb128 0x25
 10742 12de 1D0A0000 		.4byte	.LASF205
 10743 12e2 01       		.byte	0x1
 10744 12e3 83       		.byte	0x83
 10745 12e4 2A010000 		.4byte	0x12a
 10746 12e8 05       		.uleb128 0x5
 10747 12e9 03       		.byte	0x3
 10748 12ea 00000000 		.4byte	rx3Channel
 10749 12ee 25       		.uleb128 0x25
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 232


 10750 12ef 340F0000 		.4byte	.LASF206
 10751 12f3 01       		.byte	0x1
 10752 12f4 84       		.byte	0x84
 10753 12f5 2A010000 		.4byte	0x12a
 10754 12f9 05       		.uleb128 0x5
 10755 12fa 03       		.byte	0x3
 10756 12fb 00000000 		.4byte	rx3TD
 10757 12ff 07       		.uleb128 0x7
 10758 1300 2A010000 		.4byte	0x12a
 10759 1304 15130000 		.4byte	0x1315
 10760 1308 08       		.uleb128 0x8
 10761 1309 36010000 		.4byte	0x136
 10762 130d 01       		.byte	0x1
 10763 130e 08       		.uleb128 0x8
 10764 130f 36010000 		.4byte	0x136
 10765 1313 19       		.byte	0x19
 10766 1314 00       		.byte	0
 10767 1315 25       		.uleb128 0x25
 10768 1316 70060000 		.4byte	.LASF207
 10769 131a 01       		.byte	0x1
 10770 131b 87       		.byte	0x87
 10771 131c 26130000 		.4byte	0x1326
 10772 1320 05       		.uleb128 0x5
 10773 1321 03       		.byte	0x3
 10774 1322 00000000 		.4byte	rxBufferPluck
 10775 1326 06       		.uleb128 0x6
 10776 1327 FF120000 		.4byte	0x12ff
 10777 132b 07       		.uleb128 0x7
 10778 132c 2A010000 		.4byte	0x12a
 10779 1330 41130000 		.4byte	0x1341
 10780 1334 08       		.uleb128 0x8
 10781 1335 36010000 		.4byte	0x136
 10782 1339 01       		.byte	0x1
 10783 133a 08       		.uleb128 0x8
 10784 133b 36010000 		.4byte	0x136
 10785 133f 07       		.byte	0x7
 10786 1340 00       		.byte	0
 10787 1341 25       		.uleb128 0x25
 10788 1342 4C0B0000 		.4byte	.LASF208
 10789 1346 01       		.byte	0x1
 10790 1347 88       		.byte	0x88
 10791 1348 52130000 		.4byte	0x1352
 10792 134c 05       		.uleb128 0x5
 10793 134d 03       		.byte	0x3
 10794 134e 00000000 		.4byte	rxBufferBar
 10795 1352 06       		.uleb128 0x6
 10796 1353 2B130000 		.4byte	0x132b
 10797 1357 07       		.uleb128 0x7
 10798 1358 08020000 		.4byte	0x208
 10799 135c 67130000 		.4byte	0x1367
 10800 1360 08       		.uleb128 0x8
 10801 1361 36010000 		.4byte	0x136
 10802 1365 0B       		.byte	0xb
 10803 1366 00       		.byte	0
 10804 1367 25       		.uleb128 0x25
 10805 1368 5D020000 		.4byte	.LASF209
 10806 136c 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 233


 10807 136d 8A       		.byte	0x8a
 10808 136e 78130000 		.4byte	0x1378
 10809 1372 05       		.uleb128 0x5
 10810 1373 03       		.byte	0x3
 10811 1374 00000000 		.4byte	strings
 10812 1378 06       		.uleb128 0x6
 10813 1379 57130000 		.4byte	0x1357
 10814 137d 25       		.uleb128 0x25
 10815 137e C3040000 		.4byte	.LASF210
 10816 1382 01       		.byte	0x1
 10817 1383 8B       		.byte	0x8b
 10818 1384 8E130000 		.4byte	0x138e
 10819 1388 05       		.uleb128 0x5
 10820 1389 03       		.byte	0x3
 10821 138a 00000000 		.4byte	prevStrings
 10822 138e 06       		.uleb128 0x6
 10823 138f 57130000 		.4byte	0x1357
 10824 1393 07       		.uleb128 0x7
 10825 1394 08020000 		.4byte	0x208
 10826 1398 A3130000 		.4byte	0x13a3
 10827 139c 08       		.uleb128 0x8
 10828 139d 36010000 		.4byte	0x136
 10829 13a1 01       		.byte	0x1
 10830 13a2 00       		.byte	0
 10831 13a3 28       		.uleb128 0x28
 10832 13a4 62617200 		.ascii	"bar\000"
 10833 13a8 01       		.byte	0x1
 10834 13a9 8C       		.byte	0x8c
 10835 13aa B4130000 		.4byte	0x13b4
 10836 13ae 05       		.uleb128 0x5
 10837 13af 03       		.byte	0x3
 10838 13b0 00000000 		.4byte	bar
 10839 13b4 06       		.uleb128 0x6
 10840 13b5 93130000 		.4byte	0x1393
 10841 13b9 25       		.uleb128 0x25
 10842 13ba A10F0000 		.4byte	.LASF211
 10843 13be 01       		.byte	0x1
 10844 13bf 8D       		.byte	0x8d
 10845 13c0 CA130000 		.4byte	0x13ca
 10846 13c4 05       		.uleb128 0x5
 10847 13c5 03       		.byte	0x3
 10848 13c6 00000000 		.4byte	prevBar
 10849 13ca 06       		.uleb128 0x6
 10850 13cb 93130000 		.4byte	0x1393
 10851 13cf 25       		.uleb128 0x25
 10852 13d0 9F0E0000 		.4byte	.LASF212
 10853 13d4 01       		.byte	0x1
 10854 13d5 8E       		.byte	0x8e
 10855 13d6 E0130000 		.4byte	0x13e0
 10856 13da 05       		.uleb128 0x5
 10857 13db 03       		.byte	0x3
 10858 13dc 00000000 		.4byte	maxStrings
 10859 13e0 06       		.uleb128 0x6
 10860 13e1 57130000 		.4byte	0x1357
 10861 13e5 25       		.uleb128 0x25
 10862 13e6 800C0000 		.4byte	.LASF213
 10863 13ea 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 234


 10864 13eb 8F       		.byte	0x8f
 10865 13ec 03020000 		.4byte	0x203
 10866 13f0 05       		.uleb128 0x5
 10867 13f1 03       		.byte	0x3
 10868 13f2 00000000 		.4byte	amHere
 10869 13f6 25       		.uleb128 0x25
 10870 13f7 F3050000 		.4byte	.LASF214
 10871 13fb 01       		.byte	0x1
 10872 13fc 90       		.byte	0x90
 10873 13fd 03020000 		.4byte	0x203
 10874 1401 05       		.uleb128 0x5
 10875 1402 03       		.byte	0x3
 10876 1403 00000000 		.4byte	spiCounter
 10877 1407 25       		.uleb128 0x25
 10878 1408 2F040000 		.4byte	.LASF215
 10879 140c 01       		.byte	0x1
 10880 140d 91       		.byte	0x91
 10881 140e 03020000 		.4byte	0x203
 10882 1412 05       		.uleb128 0x5
 10883 1413 03       		.byte	0x3
 10884 1414 00000000 		.4byte	newDataFlag
 10885 1418 25       		.uleb128 0x25
 10886 1419 A70D0000 		.4byte	.LASF216
 10887 141d 01       		.byte	0x1
 10888 141e 92       		.byte	0x92
 10889 141f 94000000 		.4byte	0x94
 10890 1423 05       		.uleb128 0x5
 10891 1424 03       		.byte	0x3
 10892 1425 00000000 		.4byte	prevOctave
 10893 1429 25       		.uleb128 0x25
 10894 142a 930B0000 		.4byte	.LASF217
 10895 142e 01       		.byte	0x1
 10896 142f 93       		.byte	0x93
 10897 1430 A2000000 		.4byte	0xa2
 10898 1434 05       		.uleb128 0x5
 10899 1435 03       		.byte	0x3
 10900 1436 00000000 		.4byte	pluck_index
 10901 143a 25       		.uleb128 0x25
 10902 143b 2B0E0000 		.4byte	.LASF218
 10903 143f 01       		.byte	0x1
 10904 1440 94       		.byte	0x94
 10905 1441 03020000 		.4byte	0x203
 10906 1445 05       		.uleb128 0x5
 10907 1446 03       		.byte	0x3
 10908 1447 00000000 		.4byte	amHere2
 10909 144b 25       		.uleb128 0x25
 10910 144c C00C0000 		.4byte	.LASF219
 10911 1450 01       		.byte	0x1
 10912 1451 95       		.byte	0x95
 10913 1452 03020000 		.4byte	0x203
 10914 1456 05       		.uleb128 0x5
 10915 1457 03       		.byte	0x3
 10916 1458 00000000 		.4byte	spiCounter2
 10917 145c 25       		.uleb128 0x25
 10918 145d 67000000 		.4byte	.LASF220
 10919 1461 01       		.byte	0x1
 10920 1462 96       		.byte	0x96
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 235


 10921 1463 03020000 		.4byte	0x203
 10922 1467 05       		.uleb128 0x5
 10923 1468 03       		.byte	0x3
 10924 1469 00000000 		.4byte	newDataFlag2
 10925 146d 25       		.uleb128 0x25
 10926 146e 900A0000 		.4byte	.LASF221
 10927 1472 01       		.byte	0x1
 10928 1473 97       		.byte	0x97
 10929 1474 03020000 		.4byte	0x203
 10930 1478 05       		.uleb128 0x5
 10931 1479 03       		.byte	0x3
 10932 147a 00000000 		.4byte	currentPluckBuffer
 10933 147e 25       		.uleb128 0x25
 10934 147f C20B0000 		.4byte	.LASF222
 10935 1483 01       		.byte	0x1
 10936 1484 98       		.byte	0x98
 10937 1485 03020000 		.4byte	0x203
 10938 1489 05       		.uleb128 0x5
 10939 148a 03       		.byte	0x3
 10940 148b 00000000 		.4byte	currentBarBuffer
 10941 148f 25       		.uleb128 0x25
 10942 1490 3D0D0000 		.4byte	.LASF223
 10943 1494 01       		.byte	0x1
 10944 1495 99       		.byte	0x99
 10945 1496 03020000 		.4byte	0x203
 10946 149a 05       		.uleb128 0x5
 10947 149b 03       		.byte	0x3
 10948 149c 00000000 		.4byte	pluckErrorCount
 10949 14a0 25       		.uleb128 0x25
 10950 14a1 EB0B0000 		.4byte	.LASF224
 10951 14a5 01       		.byte	0x1
 10952 14a6 9A       		.byte	0x9a
 10953 14a7 08020000 		.4byte	0x208
 10954 14ab 05       		.uleb128 0x5
 10955 14ac 03       		.byte	0x3
 10956 14ad 00000000 		.4byte	SPI1ErrorCount
 10957 14b1 25       		.uleb128 0x25
 10958 14b2 6A070000 		.4byte	.LASF225
 10959 14b6 01       		.byte	0x1
 10960 14b7 9E       		.byte	0x9e
 10961 14b8 03020000 		.4byte	0x203
 10962 14bc 05       		.uleb128 0x5
 10963 14bd 03       		.byte	0x3
 10964 14be 00000000 		.4byte	inputData
 10965 14c2 25       		.uleb128 0x25
 10966 14c3 DF0E0000 		.4byte	.LASF226
 10967 14c7 01       		.byte	0x1
 10968 14c8 C1       		.byte	0xc1
 10969 14c9 A2000000 		.4byte	0xa2
 10970 14cd 05       		.uleb128 0x5
 10971 14ce 03       		.byte	0x3
 10972 14cf 00000000 		.4byte	spiAdjusted
 10973 14d3 25       		.uleb128 0x25
 10974 14d4 9C060000 		.4byte	.LASF227
 10975 14d8 01       		.byte	0x1
 10976 14d9 C2       		.byte	0xc2
 10977 14da A2000000 		.4byte	0xa2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 236


 10978 14de 05       		.uleb128 0x5
 10979 14df 03       		.byte	0x3
 10980 14e0 00000000 		.4byte	mySpiCounter
 10981 14e4 25       		.uleb128 0x25
 10982 14e5 1C0B0000 		.4byte	.LASF228
 10983 14e9 01       		.byte	0x1
 10984 14ea C3       		.byte	0xc3
 10985 14eb 08020000 		.4byte	0x208
 10986 14ef 05       		.uleb128 0x5
 10987 14f0 03       		.byte	0x3
 10988 14f1 00000000 		.4byte	offsetErrorCount
 10989 14f5 25       		.uleb128 0x25
 10990 14f6 C7000000 		.4byte	.LASF229
 10991 14fa 01       		.byte	0x1
 10992 14fb C4       		.byte	0xc4
 10993 14fc 03020000 		.4byte	0x203
 10994 1500 05       		.uleb128 0x5
 10995 1501 03       		.byte	0x3
 10996 1502 00000000 		.4byte	SPI2errorflag
 10997 1506 25       		.uleb128 0x25
 10998 1507 0B0B0000 		.4byte	.LASF230
 10999 150b 01       		.byte	0x1
 11000 150c C5       		.byte	0xc5
 11001 150d 17150000 		.4byte	0x1517
 11002 1511 05       		.uleb128 0x5
 11003 1512 03       		.byte	0x3
 11004 1513 00000000 		.4byte	bar_index
 11005 1517 06       		.uleb128 0x6
 11006 1518 94000000 		.4byte	0x94
 11007 151c 25       		.uleb128 0x25
 11008 151d 3E030000 		.4byte	.LASF231
 11009 1521 01       		.byte	0x1
 11010 1522 C6       		.byte	0xc6
 11011 1523 A6020000 		.4byte	0x2a6
 11012 1527 05       		.uleb128 0x5
 11013 1528 03       		.byte	0x3
 11014 1529 00000000 		.4byte	knobs
 11015 152d 25       		.uleb128 0x25
 11016 152e 92060000 		.4byte	.LASF232
 11017 1532 01       		.byte	0x1
 11018 1533 C7       		.byte	0xc7
 11019 1534 A6020000 		.4byte	0x2a6
 11020 1538 05       		.uleb128 0x5
 11021 1539 03       		.byte	0x3
 11022 153a 00000000 		.4byte	prevKnobs
 11023 153e 25       		.uleb128 0x25
 11024 153f 840A0000 		.4byte	.LASF233
 11025 1543 01       		.byte	0x1
 11026 1544 C9       		.byte	0xc9
 11027 1545 03020000 		.4byte	0x203
 11028 1549 05       		.uleb128 0x5
 11029 154a 03       		.byte	0x3
 11030 154b 00000000 		.4byte	SPI2started
 11031 154f 25       		.uleb128 0x25
 11032 1550 870C0000 		.4byte	.LASF234
 11033 1554 01       		.byte	0x1
 11034 1555 DD       		.byte	0xdd
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 237


 11035 1556 AA0D0000 		.4byte	0xdaa
 11036 155a 05       		.uleb128 0x5
 11037 155b 03       		.byte	0x3
 11038 155c 00000000 		.4byte	array
 11039 1560 25       		.uleb128 0x25
 11040 1561 F6070000 		.4byte	.LASF235
 11041 1565 01       		.byte	0x1
 11042 1566 E0       		.byte	0xe0
 11043 1567 F7010000 		.4byte	0x1f7
 11044 156b 05       		.uleb128 0x5
 11045 156c 03       		.byte	0x3
 11046 156d 00000000 		.4byte	eepromReturnValue
 11047 1571 25       		.uleb128 0x25
 11048 1572 34050000 		.4byte	.LASF236
 11049 1576 01       		.byte	0x1
 11050 1577 EC       		.byte	0xec
 11051 1578 D9000000 		.4byte	0xd9
 11052 157c 05       		.uleb128 0x5
 11053 157d 03       		.byte	0x3
 11054 157e 00000000 		.4byte	eeprom_cnt
 11055 1582 25       		.uleb128 0x25
 11056 1583 08080000 		.4byte	.LASF85
 11057 1587 01       		.byte	0x1
 11058 1588 ED       		.byte	0xed
 11059 1589 12010000 		.4byte	0x112
 11060 158d 05       		.uleb128 0x5
 11061 158e 03       		.byte	0x3
 11062 158f 00000000 		.4byte	status
 11063 1593 28       		.uleb128 0x28
 11064 1594 70747200 		.ascii	"ptr\000"
 11065 1598 01       		.byte	0x1
 11066 1599 EE       		.byte	0xee
 11067 159a A4150000 		.4byte	0x15a4
 11068 159e 05       		.uleb128 0x5
 11069 159f 03       		.byte	0x3
 11070 15a0 00000000 		.4byte	ptr
 11071 15a4 20       		.uleb128 0x20
 11072 15a5 04       		.byte	0x4
 11073 15a6 AF150000 		.4byte	0x15af
 11074 15aa 24       		.uleb128 0x24
 11075 15ab D9000000 		.4byte	0xd9
 11076 15af 06       		.uleb128 0x6
 11077 15b0 AA150000 		.4byte	0x15aa
 11078 15b4 25       		.uleb128 0x25
 11079 15b5 2C020000 		.4byte	.LASF237
 11080 15b9 01       		.byte	0x1
 11081 15ba EF       		.byte	0xef
 11082 15bb 17150000 		.4byte	0x1517
 11083 15bf 05       		.uleb128 0x5
 11084 15c0 03       		.byte	0x3
 11085 15c1 00000000 		.4byte	barCount
 11086 15c5 07       		.uleb128 0x7
 11087 15c6 03020000 		.4byte	0x203
 11088 15ca D5150000 		.4byte	0x15d5
 11089 15ce 08       		.uleb128 0x8
 11090 15cf 36010000 		.4byte	0x136
 11091 15d3 0F       		.byte	0xf
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 238


 11092 15d4 00       		.byte	0
 11093 15d5 27       		.uleb128 0x27
 11094 15d6 0D010000 		.4byte	.LASF238
 11095 15da 01       		.byte	0x1
 11096 15db 5101     		.2byte	0x151
 11097 15dd E7150000 		.4byte	0x15e7
 11098 15e1 05       		.uleb128 0x5
 11099 15e2 03       		.byte	0x3
 11100 15e3 00000000 		.4byte	I2Cbuff2
 11101 15e7 06       		.uleb128 0x6
 11102 15e8 C5150000 		.4byte	0x15c5
 11103 15ec 27       		.uleb128 0x27
 11104 15ed 0F080000 		.4byte	.LASF239
 11105 15f1 01       		.byte	0x1
 11106 15f2 5201     		.2byte	0x152
 11107 15f4 03020000 		.4byte	0x203
 11108 15f8 05       		.uleb128 0x5
 11109 15f9 03       		.byte	0x3
 11110 15fa 00000000 		.4byte	send_it
 11111 15fe 07       		.uleb128 0x7
 11112 15ff A2000000 		.4byte	0xa2
 11113 1603 14160000 		.4byte	0x1614
 11114 1607 08       		.uleb128 0x8
 11115 1608 36010000 		.4byte	0x136
 11116 160c 0B       		.byte	0xb
 11117 160d 08       		.uleb128 0x8
 11118 160e 36010000 		.4byte	0x136
 11119 1612 01       		.byte	0x1
 11120 1613 00       		.byte	0
 11121 1614 27       		.uleb128 0x27
 11122 1615 16010000 		.4byte	.LASF240
 11123 1619 01       		.byte	0x1
 11124 161a 5901     		.2byte	0x159
 11125 161c FE150000 		.4byte	0x15fe
 11126 1620 05       		.uleb128 0x5
 11127 1621 03       		.byte	0x3
 11128 1622 00000000 		.4byte	mux_states
 11129 1626 07       		.uleb128 0x7
 11130 1627 A2000000 		.4byte	0xa2
 11131 162b 36160000 		.4byte	0x1636
 11132 162f 08       		.uleb128 0x8
 11133 1630 36010000 		.4byte	0x136
 11134 1634 0B       		.byte	0xb
 11135 1635 00       		.byte	0
 11136 1636 27       		.uleb128 0x27
 11137 1637 D30E0000 		.4byte	.LASF241
 11138 163b 01       		.byte	0x1
 11139 163c 5A01     		.2byte	0x15a
 11140 163e 26160000 		.4byte	0x1626
 11141 1642 05       		.uleb128 0x5
 11142 1643 03       		.byte	0x3
 11143 1644 00000000 		.4byte	i2c_skipped
 11144 1648 27       		.uleb128 0x27
 11145 1649 8C0D0000 		.4byte	.LASF242
 11146 164d 01       		.byte	0x1
 11147 164e 5B01     		.2byte	0x15b
 11148 1650 9E110000 		.4byte	0x119e
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 239


 11149 1654 05       		.uleb128 0x5
 11150 1655 03       		.byte	0x3
 11151 1656 00000000 		.4byte	pedals_low
 11152 165a 27       		.uleb128 0x27
 11153 165b 6E010000 		.4byte	.LASF243
 11154 165f 01       		.byte	0x1
 11155 1660 5C01     		.2byte	0x15c
 11156 1662 9E110000 		.4byte	0x119e
 11157 1666 05       		.uleb128 0x5
 11158 1667 03       		.byte	0x3
 11159 1668 00000000 		.4byte	pedals_high
 11160 166c 27       		.uleb128 0x27
 11161 166d E70C0000 		.4byte	.LASF244
 11162 1671 01       		.byte	0x1
 11163 1672 5D01     		.2byte	0x15d
 11164 1674 B8000000 		.4byte	0xb8
 11165 1678 05       		.uleb128 0x5
 11166 1679 03       		.byte	0x3
 11167 167a 00000000 		.4byte	deadzone
 11168 167e 27       		.uleb128 0x27
 11169 167f 64060000 		.4byte	.LASF245
 11170 1683 01       		.byte	0x1
 11171 1684 5E01     		.2byte	0x15e
 11172 1686 B8000000 		.4byte	0xb8
 11173 168a 05       		.uleb128 0x5
 11174 168b 03       		.byte	0x3
 11175 168c 00000000 		.4byte	volumePedal
 11176 1690 27       		.uleb128 0x27
 11177 1691 620B0000 		.4byte	.LASF246
 11178 1695 01       		.byte	0x1
 11179 1696 5F01     		.2byte	0x15f
 11180 1698 9E110000 		.4byte	0x119e
 11181 169c 05       		.uleb128 0x5
 11182 169d 03       		.byte	0x3
 11183 169e 00000000 		.4byte	processed_pedals
 11184 16a2 27       		.uleb128 0x27
 11185 16a3 6E0A0000 		.4byte	.LASF247
 11186 16a7 01       		.byte	0x1
 11187 16a8 6001     		.2byte	0x160
 11188 16aa 9E110000 		.4byte	0x119e
 11189 16ae 05       		.uleb128 0x5
 11190 16af 03       		.byte	0x3
 11191 16b0 00000000 		.4byte	prev_processed_pedals
 11192 16b4 07       		.uleb128 0x7
 11193 16b5 A2000000 		.4byte	0xa2
 11194 16b9 C4160000 		.4byte	0x16c4
 11195 16bd 08       		.uleb128 0x8
 11196 16be 36010000 		.4byte	0x136
 11197 16c2 09       		.byte	0x9
 11198 16c3 00       		.byte	0
 11199 16c4 27       		.uleb128 0x27
 11200 16c5 87060000 		.4byte	.LASF248
 11201 16c9 01       		.byte	0x1
 11202 16ca 6101     		.2byte	0x161
 11203 16cc B4160000 		.4byte	0x16b4
 11204 16d0 05       		.uleb128 0x5
 11205 16d1 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 240


 11206 16d2 00000000 		.4byte	pedals8bit
 11207 16d6 27       		.uleb128 0x27
 11208 16d7 42000000 		.4byte	.LASF249
 11209 16db 01       		.byte	0x1
 11210 16dc 6201     		.2byte	0x162
 11211 16de AD000000 		.4byte	0xad
 11212 16e2 05       		.uleb128 0x5
 11213 16e3 03       		.byte	0x3
 11214 16e4 00000000 		.4byte	prev_processed_volumePedal
 11215 16e8 27       		.uleb128 0x27
 11216 16e9 2D0B0000 		.4byte	.LASF250
 11217 16ed 01       		.byte	0x1
 11218 16ee 6301     		.2byte	0x163
 11219 16f0 AD000000 		.4byte	0xad
 11220 16f4 05       		.uleb128 0x5
 11221 16f5 03       		.byte	0x3
 11222 16f6 00000000 		.4byte	processed_volumePedal
 11223 16fa 07       		.uleb128 0x7
 11224 16fb FD000000 		.4byte	0xfd
 11225 16ff 10170000 		.4byte	0x1710
 11226 1703 08       		.uleb128 0x8
 11227 1704 36010000 		.4byte	0x136
 11228 1708 03       		.byte	0x3
 11229 1709 08       		.uleb128 0x8
 11230 170a 36010000 		.4byte	0x136
 11231 170e 03       		.byte	0x3
 11232 170f 00       		.byte	0
 11233 1710 27       		.uleb128 0x27
 11234 1711 CD0D0000 		.4byte	.LASF251
 11235 1715 01       		.byte	0x1
 11236 1716 6601     		.2byte	0x166
 11237 1718 FA160000 		.4byte	0x16fa
 11238 171c 05       		.uleb128 0x5
 11239 171d 03       		.byte	0x3
 11240 171e 00000000 		.4byte	fretMeasurements
 11241 1722 27       		.uleb128 0x27
 11242 1723 7B080000 		.4byte	.LASF252
 11243 1727 01       		.byte	0x1
 11244 1728 7301     		.2byte	0x173
 11245 172a 94000000 		.4byte	0x94
 11246 172e 05       		.uleb128 0x5
 11247 172f 03       		.byte	0x3
 11248 1730 00000000 		.4byte	currentPresetSelection
 11249 1734 07       		.uleb128 0x7
 11250 1735 A2000000 		.4byte	0xa2
 11251 1739 4A170000 		.4byte	0x174a
 11252 173d 08       		.uleb128 0x8
 11253 173e 36010000 		.4byte	0x136
 11254 1742 3F       		.byte	0x3f
 11255 1743 08       		.uleb128 0x8
 11256 1744 36010000 		.4byte	0x136
 11257 1748 0D       		.byte	0xd
 11258 1749 00       		.byte	0
 11259 174a 27       		.uleb128 0x27
 11260 174b BB020000 		.4byte	.LASF253
 11261 174f 01       		.byte	0x1
 11262 1750 7401     		.2byte	0x174
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 241


 11263 1752 34170000 		.4byte	0x1734
 11264 1756 05       		.uleb128 0x5
 11265 1757 03       		.byte	0x3
 11266 1758 00000000 		.4byte	presetNamesArray
 11267 175c 27       		.uleb128 0x27
 11268 175d 44020000 		.4byte	.LASF254
 11269 1761 01       		.byte	0x1
 11270 1762 7501     		.2byte	0x175
 11271 1764 A2000000 		.4byte	0xa2
 11272 1768 05       		.uleb128 0x5
 11273 1769 03       		.byte	0x3
 11274 176a 00000000 		.4byte	presetNumberToLoad
 11275 176e 27       		.uleb128 0x27
 11276 176f 7B020000 		.4byte	.LASF255
 11277 1773 01       		.byte	0x1
 11278 1774 7601     		.2byte	0x176
 11279 1776 56120000 		.4byte	0x1256
 11280 177a 05       		.uleb128 0x5
 11281 177b 03       		.byte	0x3
 11282 177c 00000000 		.4byte	presetLoadedResponse
 11283 1780 07       		.uleb128 0x7
 11284 1781 A2000000 		.4byte	0xa2
 11285 1785 9C170000 		.4byte	0x179c
 11286 1789 08       		.uleb128 0x8
 11287 178a 36010000 		.4byte	0x136
 11288 178e 3F       		.byte	0x3f
 11289 178f 08       		.uleb128 0x8
 11290 1790 36010000 		.4byte	0x136
 11291 1794 07       		.byte	0x7
 11292 1795 08       		.uleb128 0x8
 11293 1796 36010000 		.4byte	0x136
 11294 179a 0D       		.byte	0xd
 11295 179b 00       		.byte	0
 11296 179c 27       		.uleb128 0x27
 11297 179d 74000000 		.4byte	.LASF256
 11298 17a1 01       		.byte	0x1
 11299 17a2 7901     		.2byte	0x179
 11300 17a4 80170000 		.4byte	0x1780
 11301 17a8 05       		.uleb128 0x5
 11302 17a9 03       		.byte	0x3
 11303 17aa 00000000 		.4byte	macroNamesArray
 11304 17ae 07       		.uleb128 0x7
 11305 17af FD000000 		.4byte	0xfd
 11306 17b3 BE170000 		.4byte	0x17be
 11307 17b7 08       		.uleb128 0x8
 11308 17b8 36010000 		.4byte	0x136
 11309 17bc 03       		.byte	0x3
 11310 17bd 00       		.byte	0
 11311 17be 27       		.uleb128 0x27
 11312 17bf 10030000 		.4byte	.LASF257
 11313 17c3 01       		.byte	0x1
 11314 17c4 7D01     		.2byte	0x17d
 11315 17c6 AE170000 		.4byte	0x17ae
 11316 17ca 05       		.uleb128 0x5
 11317 17cb 03       		.byte	0x3
 11318 17cc 00000000 		.4byte	fretScaling
 11319 17d0 07       		.uleb128 0x7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 242


 11320 17d1 FD000000 		.4byte	0xfd
 11321 17d5 E0170000 		.4byte	0x17e0
 11322 17d9 08       		.uleb128 0x8
 11323 17da 36010000 		.4byte	0x136
 11324 17de 09       		.byte	0x9
 11325 17df 00       		.byte	0
 11326 17e0 27       		.uleb128 0x27
 11327 17e1 E3030000 		.4byte	.LASF258
 11328 17e5 01       		.byte	0x1
 11329 17e6 8201     		.2byte	0x182
 11330 17e8 D0170000 		.4byte	0x17d0
 11331 17ec 05       		.uleb128 0x5
 11332 17ed 03       		.byte	0x3
 11333 17ee 00000000 		.4byte	pedalRatios
 11334 17f2 27       		.uleb128 0x27
 11335 17f3 84040000 		.4byte	.LASF259
 11336 17f7 01       		.byte	0x1
 11337 17f8 8301     		.2byte	0x183
 11338 17fa A2000000 		.4byte	0xa2
 11339 17fe 05       		.uleb128 0x5
 11340 17ff 03       		.byte	0x3
 11341 1800 00000000 		.4byte	last_mux
 11342 1804 27       		.uleb128 0x27
 11343 1805 59090000 		.4byte	.LASF260
 11344 1809 01       		.byte	0x1
 11345 180a 8401     		.2byte	0x184
 11346 180c 03020000 		.4byte	0x203
 11347 1810 05       		.uleb128 0x5
 11348 1811 03       		.byte	0x3
 11349 1812 00000000 		.4byte	main_counter
 11350 1816 27       		.uleb128 0x27
 11351 1817 16050000 		.4byte	.LASF261
 11352 181b 01       		.byte	0x1
 11353 181c 8501     		.2byte	0x185
 11354 181e A2000000 		.4byte	0xa2
 11355 1822 05       		.uleb128 0x5
 11356 1823 03       		.byte	0x3
 11357 1824 00000000 		.4byte	neck
 11358 1828 27       		.uleb128 0x27
 11359 1829 70090000 		.4byte	.LASF262
 11360 182d 01       		.byte	0x1
 11361 182e 8601     		.2byte	0x186
 11362 1830 A2000000 		.4byte	0xa2
 11363 1834 05       		.uleb128 0x5
 11364 1835 03       		.byte	0x3
 11365 1836 00000000 		.4byte	dualSlider
 11366 183a 27       		.uleb128 0x27
 11367 183b E30B0000 		.4byte	.LASF263
 11368 183f 01       		.byte	0x1
 11369 1840 8701     		.2byte	0x187
 11370 1842 A2000000 		.4byte	0xa2
 11371 1846 05       		.uleb128 0x5
 11372 1847 03       		.byte	0x3
 11373 1848 00000000 		.4byte	enterUp
 11374 184c 27       		.uleb128 0x27
 11375 184d 57020000 		.4byte	.LASF264
 11376 1851 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 243


 11377 1852 8801     		.2byte	0x188
 11378 1854 A2000000 		.4byte	0xa2
 11379 1858 05       		.uleb128 0x5
 11380 1859 03       		.byte	0x3
 11381 185a 00000000 		.4byte	voice
 11382 185e 27       		.uleb128 0x27
 11383 185f CE0F0000 		.4byte	.LASF265
 11384 1863 01       		.byte	0x1
 11385 1864 8901     		.2byte	0x189
 11386 1866 A2000000 		.4byte	0xa2
 11387 186a 05       		.uleb128 0x5
 11388 186b 03       		.byte	0x3
 11389 186c 00000000 		.4byte	editUp
 11390 1870 27       		.uleb128 0x27
 11391 1871 6E050000 		.4byte	.LASF266
 11392 1875 01       		.byte	0x1
 11393 1876 8A01     		.2byte	0x18a
 11394 1878 A2000000 		.4byte	0xa2
 11395 187c 05       		.uleb128 0x5
 11396 187d 03       		.byte	0x3
 11397 187e 00000000 		.4byte	oct1Up
 11398 1882 27       		.uleb128 0x27
 11399 1883 460F0000 		.4byte	.LASF267
 11400 1887 01       		.byte	0x1
 11401 1888 8B01     		.2byte	0x18b
 11402 188a A2000000 		.4byte	0xa2
 11403 188e 05       		.uleb128 0x5
 11404 188f 03       		.byte	0x3
 11405 1890 00000000 		.4byte	oct4Up
 11406 1894 27       		.uleb128 0x27
 11407 1895 8D040000 		.4byte	.LASF268
 11408 1899 01       		.byte	0x1
 11409 189a 8D01     		.2byte	0x18d
 11410 189c A6180000 		.4byte	0x18a6
 11411 18a0 05       		.uleb128 0x5
 11412 18a1 03       		.byte	0x3
 11413 18a2 00000000 		.4byte	encoderVal
 11414 18a6 06       		.uleb128 0x6
 11415 18a7 C5150000 		.4byte	0x15c5
 11416 18ab 27       		.uleb128 0x27
 11417 18ac 63050000 		.4byte	.LASF269
 11418 18b0 01       		.byte	0x1
 11419 18b1 8E01     		.2byte	0x18e
 11420 18b3 94000000 		.4byte	0x94
 11421 18b7 05       		.uleb128 0x5
 11422 18b8 03       		.byte	0x3
 11423 18b9 00000000 		.4byte	encoderNum
 11424 18bd 27       		.uleb128 0x27
 11425 18be 360A0000 		.4byte	.LASF270
 11426 18c2 01       		.byte	0x1
 11427 18c3 8F01     		.2byte	0x18f
 11428 18c5 A2000000 		.4byte	0xa2
 11429 18c9 05       		.uleb128 0x5
 11430 18ca 03       		.byte	0x3
 11431 18cb 00000000 		.4byte	button1Up
 11432 18cf 27       		.uleb128 0x27
 11433 18d0 760C0000 		.4byte	.LASF271
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 244


 11434 18d4 01       		.byte	0x1
 11435 18d5 9001     		.2byte	0x190
 11436 18d7 A2000000 		.4byte	0xa2
 11437 18db 05       		.uleb128 0x5
 11438 18dc 03       		.byte	0x3
 11439 18dd 00000000 		.4byte	button2Up
 11440 18e1 27       		.uleb128 0x27
 11441 18e2 620F0000 		.4byte	.LASF272
 11442 18e6 01       		.byte	0x1
 11443 18e7 9101     		.2byte	0x191
 11444 18e9 A2000000 		.4byte	0xa2
 11445 18ed 05       		.uleb128 0x5
 11446 18ee 03       		.byte	0x3
 11447 18ef 00000000 		.4byte	button3Up
 11448 18f3 27       		.uleb128 0x27
 11449 18f4 210F0000 		.4byte	.LASF273
 11450 18f8 01       		.byte	0x1
 11451 18f9 9201     		.2byte	0x192
 11452 18fb A2000000 		.4byte	0xa2
 11453 18ff 05       		.uleb128 0x5
 11454 1900 03       		.byte	0x3
 11455 1901 00000000 		.4byte	button4Up
 11456 1905 27       		.uleb128 0x27
 11457 1906 700D0000 		.4byte	.LASF274
 11458 190a 01       		.byte	0x1
 11459 190b 9301     		.2byte	0x193
 11460 190d A2000000 		.4byte	0xa2
 11461 1911 05       		.uleb128 0x5
 11462 1912 03       		.byte	0x3
 11463 1913 00000000 		.4byte	patchNum
 11464 1917 07       		.uleb128 0x7
 11465 1918 FD000000 		.4byte	0xfd
 11466 191c 33190000 		.4byte	0x1933
 11467 1920 08       		.uleb128 0x8
 11468 1921 36010000 		.4byte	0x136
 11469 1925 06       		.byte	0x6
 11470 1926 08       		.uleb128 0x8
 11471 1927 36010000 		.4byte	0x136
 11472 192b 0A       		.byte	0xa
 11473 192c 08       		.uleb128 0x8
 11474 192d 36010000 		.4byte	0x136
 11475 1931 0B       		.byte	0xb
 11476 1932 00       		.byte	0
 11477 1933 27       		.uleb128 0x27
 11478 1934 7E060000 		.4byte	.LASF275
 11479 1938 01       		.byte	0x1
 11480 1939 9901     		.2byte	0x199
 11481 193b 17190000 		.4byte	0x1917
 11482 193f 05       		.uleb128 0x5
 11483 1940 03       		.byte	0x3
 11484 1941 00000000 		.4byte	copedent
 11485 1945 07       		.uleb128 0x7
 11486 1946 A2000000 		.4byte	0xa2
 11487 194a 5B190000 		.4byte	0x195b
 11488 194e 08       		.uleb128 0x8
 11489 194f 36010000 		.4byte	0x136
 11490 1953 06       		.byte	0x6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 245


 11491 1954 08       		.uleb128 0x8
 11492 1955 36010000 		.4byte	0x136
 11493 1959 0D       		.byte	0xd
 11494 195a 00       		.byte	0
 11495 195b 27       		.uleb128 0x27
 11496 195c 81010000 		.4byte	.LASF276
 11497 1960 01       		.byte	0x1
 11498 1961 9A01     		.2byte	0x19a
 11499 1963 45190000 		.4byte	0x1945
 11500 1967 05       		.uleb128 0x5
 11501 1968 03       		.byte	0x3
 11502 1969 00000000 		.4byte	copedentNamesArray
 11503 196d 07       		.uleb128 0x7
 11504 196e FD000000 		.4byte	0xfd
 11505 1972 7D190000 		.4byte	0x197d
 11506 1976 08       		.uleb128 0x8
 11507 1977 36010000 		.4byte	0x136
 11508 197b 0B       		.byte	0xb
 11509 197c 00       		.byte	0
 11510 197d 27       		.uleb128 0x27
 11511 197e D1020000 		.4byte	.LASF277
 11512 1982 01       		.byte	0x1
 11513 1983 9C01     		.2byte	0x19c
 11514 1985 6D190000 		.4byte	0x196d
 11515 1989 05       		.uleb128 0x5
 11516 198a 03       		.byte	0x3
 11517 198b 00000000 		.4byte	prevStringPitchBend
 11518 198f 07       		.uleb128 0x7
 11519 1990 FD000000 		.4byte	0xfd
 11520 1994 A5190000 		.4byte	0x19a5
 11521 1998 08       		.uleb128 0x8
 11522 1999 36010000 		.4byte	0x136
 11523 199d 09       		.byte	0x9
 11524 199e 08       		.uleb128 0x8
 11525 199f 36010000 		.4byte	0x136
 11526 19a3 0B       		.byte	0xb
 11527 19a4 00       		.byte	0
 11528 19a5 27       		.uleb128 0x27
 11529 19a6 BB0F0000 		.4byte	.LASF278
 11530 19aa 01       		.byte	0x1
 11531 19ab 9E01     		.2byte	0x19e
 11532 19ad 8F190000 		.4byte	0x198f
 11533 19b1 05       		.uleb128 0x5
 11534 19b2 03       		.byte	0x3
 11535 19b3 00000000 		.4byte	pedals
 11536 19b7 27       		.uleb128 0x27
 11537 19b8 730B0000 		.4byte	.LASF279
 11538 19bc 01       		.byte	0x1
 11539 19bd A101     		.2byte	0x1a1
 11540 19bf 6D190000 		.4byte	0x196d
 11541 19c3 05       		.uleb128 0x5
 11542 19c4 03       		.byte	0x3
 11543 19c5 00000000 		.4byte	openStringFrequencies
 11544 19c9 27       		.uleb128 0x27
 11545 19ca 330E0000 		.4byte	.LASF280
 11546 19ce 01       		.byte	0x1
 11547 19cf A201     		.2byte	0x1a2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 246


 11548 19d1 6D190000 		.4byte	0x196d
 11549 19d5 05       		.uleb128 0x5
 11550 19d6 03       		.byte	0x3
 11551 19d7 00000000 		.4byte	stringMappedPositions
 11552 19db 27       		.uleb128 0x27
 11553 19dc 51070000 		.4byte	.LASF281
 11554 19e0 01       		.byte	0x1
 11555 19e1 A301     		.2byte	0x1a3
 11556 19e3 6D190000 		.4byte	0x196d
 11557 19e7 05       		.uleb128 0x5
 11558 19e8 03       		.byte	0x3
 11559 19e9 00000000 		.4byte	invStringMappedPositions
 11560 19ed 27       		.uleb128 0x27
 11561 19ee F20F0000 		.4byte	.LASF282
 11562 19f2 01       		.byte	0x1
 11563 19f3 A401     		.2byte	0x1a4
 11564 19f5 6D190000 		.4byte	0x196d
 11565 19f9 05       		.uleb128 0x5
 11566 19fa 03       		.byte	0x3
 11567 19fb 00000000 		.4byte	stringFrequencies
 11568 19ff 27       		.uleb128 0x27
 11569 1a00 3B040000 		.4byte	.LASF283
 11570 1a04 01       		.byte	0x1
 11571 1a05 A501     		.2byte	0x1a5
 11572 1a07 6D190000 		.4byte	0x196d
 11573 1a0b 05       		.uleb128 0x5
 11574 1a0c 03       		.byte	0x3
 11575 1a0d 00000000 		.4byte	stringOctave
 11576 1a11 27       		.uleb128 0x27
 11577 1a12 D4090000 		.4byte	.LASF284
 11578 1a16 01       		.byte	0x1
 11579 1a17 A601     		.2byte	0x1a6
 11580 1a19 6D190000 		.4byte	0x196d
 11581 1a1d 05       		.uleb128 0x5
 11582 1a1e 03       		.byte	0x3
 11583 1a1f 00000000 		.4byte	stringPitch
 11584 1a23 27       		.uleb128 0x27
 11585 1a24 F10D0000 		.4byte	.LASF285
 11586 1a28 01       		.byte	0x1
 11587 1a29 A701     		.2byte	0x1a7
 11588 1a2b 6D190000 		.4byte	0x196d
 11589 1a2f 05       		.uleb128 0x5
 11590 1a30 03       		.byte	0x3
 11591 1a31 00000000 		.4byte	stringMIDI
 11592 1a35 07       		.uleb128 0x7
 11593 1a36 94000000 		.4byte	0x94
 11594 1a3a 451A0000 		.4byte	0x1a45
 11595 1a3e 08       		.uleb128 0x8
 11596 1a3f 36010000 		.4byte	0x136
 11597 1a43 0B       		.byte	0xb
 11598 1a44 00       		.byte	0
 11599 1a45 27       		.uleb128 0x27
 11600 1a46 92080000 		.4byte	.LASF286
 11601 1a4a 01       		.byte	0x1
 11602 1a4b A801     		.2byte	0x1a8
 11603 1a4d 351A0000 		.4byte	0x1a35
 11604 1a51 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 247


 11605 1a52 03       		.byte	0x3
 11606 1a53 00000000 		.4byte	openStringMIDI_Int
 11607 1a57 27       		.uleb128 0x27
 11608 1a58 560D0000 		.4byte	.LASF287
 11609 1a5c 01       		.byte	0x1
 11610 1a5d A901     		.2byte	0x1a9
 11611 1a5f 94000000 		.4byte	0x94
 11612 1a63 05       		.uleb128 0x5
 11613 1a64 03       		.byte	0x3
 11614 1a65 00000000 		.4byte	OLEDcount
 11615 1a69 27       		.uleb128 0x27
 11616 1a6a E6090000 		.4byte	.LASF288
 11617 1a6e 01       		.byte	0x1
 11618 1a6f AB01     		.2byte	0x1ab
 11619 1a71 94000000 		.4byte	0x94
 11620 1a75 05       		.uleb128 0x5
 11621 1a76 03       		.byte	0x3
 11622 1a77 00000000 		.4byte	mainOLEDWaitingToSend
 11623 1a7b 27       		.uleb128 0x27
 11624 1a7c 57010000 		.4byte	.LASF289
 11625 1a80 01       		.byte	0x1
 11626 1a81 AC01     		.2byte	0x1ac
 11627 1a83 94000000 		.4byte	0x94
 11628 1a87 05       		.uleb128 0x5
 11629 1a88 03       		.byte	0x3
 11630 1a89 00000000 		.4byte	macroOLEDWaitingToSend
 11631 1a8d 07       		.uleb128 0x7
 11632 1a8e 94000000 		.4byte	0x94
 11633 1a92 9D1A0000 		.4byte	0x1a9d
 11634 1a96 08       		.uleb128 0x8
 11635 1a97 36010000 		.4byte	0x136
 11636 1a9b 3F       		.byte	0x3f
 11637 1a9c 00       		.byte	0
 11638 1a9d 27       		.uleb128 0x27
 11639 1a9e A1040000 		.4byte	.LASF290
 11640 1aa2 01       		.byte	0x1
 11641 1aa3 AE01     		.2byte	0x1ae
 11642 1aa5 8D1A0000 		.4byte	0x1a8d
 11643 1aa9 05       		.uleb128 0x5
 11644 1aaa 03       		.byte	0x3
 11645 1aab 00000000 		.4byte	presetAlreadyDisplayed
 11646 1aaf 27       		.uleb128 0x27
 11647 1ab0 790D0000 		.4byte	.LASF291
 11648 1ab4 01       		.byte	0x1
 11649 1ab5 B001     		.2byte	0x1b0
 11650 1ab7 D0170000 		.4byte	0x17d0
 11651 1abb 05       		.uleb128 0x5
 11652 1abc 03       		.byte	0x3
 11653 1abd 00000000 		.4byte	pedals_float
 11654 1ac1 27       		.uleb128 0x27
 11655 1ac2 0B0C0000 		.4byte	.LASF292
 11656 1ac6 01       		.byte	0x1
 11657 1ac7 B801     		.2byte	0x1b8
 11658 1ac9 94000000 		.4byte	0x94
 11659 1acd 05       		.uleb128 0x5
 11660 1ace 03       		.byte	0x3
 11661 1acf 00000000 		.4byte	currentNeck
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 248


 11662 1ad3 27       		.uleb128 0x27
 11663 1ad4 170C0000 		.4byte	.LASF293
 11664 1ad8 01       		.byte	0x1
 11665 1ad9 BA01     		.2byte	0x1ba
 11666 1adb 94000000 		.4byte	0x94
 11667 1adf 05       		.uleb128 0x5
 11668 1ae0 03       		.byte	0x3
 11669 1ae1 00000000 		.4byte	editMode
 11670 1ae5 27       		.uleb128 0x27
 11671 1ae6 7E0E0000 		.4byte	.LASF294
 11672 1aea 01       		.byte	0x1
 11673 1aeb BB01     		.2byte	0x1bb
 11674 1aed 94000000 		.4byte	0x94
 11675 1af1 05       		.uleb128 0x5
 11676 1af2 03       		.byte	0x3
 11677 1af3 00000000 		.4byte	calibrationMode
 11678 1af7 27       		.uleb128 0x27
 11679 1af8 8E070000 		.4byte	.LASF295
 11680 1afc 01       		.byte	0x1
 11681 1afd 3F07     		.2byte	0x73f
 11682 1aff 351A0000 		.4byte	0x1a35
 11683 1b03 05       		.uleb128 0x5
 11684 1b04 03       		.byte	0x3
 11685 1b05 00000000 		.4byte	prevNotes
 11686 1b09 27       		.uleb128 0x27
 11687 1b0a F60A0000 		.4byte	.LASF296
 11688 1b0e 01       		.byte	0x1
 11689 1b0f B407     		.2byte	0x7b4
 11690 1b11 03020000 		.4byte	0x203
 11691 1b15 05       		.uleb128 0x5
 11692 1b16 03       		.byte	0x3
 11693 1b17 00000000 		.4byte	checkStatus
 11694 1b1b 27       		.uleb128 0x27
 11695 1b1c 620C0000 		.4byte	.LASF297
 11696 1b20 01       		.byte	0x1
 11697 1b21 B507     		.2byte	0x7b5
 11698 1b23 03020000 		.4byte	0x203
 11699 1b27 05       		.uleb128 0x5
 11700 1b28 03       		.byte	0x3
 11701 1b29 00000000 		.4byte	checkBase
 11702 1b2d 27       		.uleb128 0x27
 11703 1b2e 1D0D0000 		.4byte	.LASF298
 11704 1b32 01       		.byte	0x1
 11705 1b33 B907     		.2byte	0x7b9
 11706 1b35 94000000 		.4byte	0x94
 11707 1b39 05       		.uleb128 0x5
 11708 1b3a 03       		.byte	0x3
 11709 1b3b 00000000 		.4byte	SPI_errors
 11710 1b3f 07       		.uleb128 0x7
 11711 1b40 03020000 		.4byte	0x203
 11712 1b44 4F1B0000 		.4byte	0x1b4f
 11713 1b48 08       		.uleb128 0x8
 11714 1b49 36010000 		.4byte	0x136
 11715 1b4d 03       		.byte	0x3
 11716 1b4e 00       		.byte	0
 11717 1b4f 27       		.uleb128 0x27
 11718 1b50 430B0000 		.4byte	.LASF88
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 249


 11719 1b54 01       		.byte	0x1
 11720 1b55 D508     		.2byte	0x8d5
 11721 1b57 611B0000 		.4byte	0x1b61
 11722 1b5b 05       		.uleb128 0x5
 11723 1b5c 03       		.byte	0x3
 11724 1b5d 00000000 		.4byte	tempMIDI
 11725 1b61 06       		.uleb128 0x6
 11726 1b62 3F1B0000 		.4byte	0x1b3f
 11727 1b66 27       		.uleb128 0x27
 11728 1b67 1F000000 		.4byte	.LASF299
 11729 1b6b 01       		.byte	0x1
 11730 1b6c D608     		.2byte	0x8d6
 11731 1b6e 03020000 		.4byte	0x203
 11732 1b72 05       		.uleb128 0x5
 11733 1b73 03       		.byte	0x3
 11734 1b74 00000000 		.4byte	firstSysex
 11735 1b78 27       		.uleb128 0x27
 11736 1b79 15060000 		.4byte	.LASF300
 11737 1b7d 01       		.byte	0x1
 11738 1b7e D708     		.2byte	0x8d7
 11739 1b80 8A1B0000 		.4byte	0x1b8a
 11740 1b84 05       		.uleb128 0x5
 11741 1b85 03       		.byte	0x3
 11742 1b86 00000000 		.4byte	sysexPointerMask
 11743 1b8a 24       		.uleb128 0x24
 11744 1b8b B8000000 		.4byte	0xb8
 11745 1b8f 00       		.byte	0
 11746              		.section	.debug_abbrev,"",%progbits
 11747              	.Ldebug_abbrev0:
 11748 0000 01       		.uleb128 0x1
 11749 0001 11       		.uleb128 0x11
 11750 0002 01       		.byte	0x1
 11751 0003 25       		.uleb128 0x25
 11752 0004 0E       		.uleb128 0xe
 11753 0005 13       		.uleb128 0x13
 11754 0006 0B       		.uleb128 0xb
 11755 0007 03       		.uleb128 0x3
 11756 0008 0E       		.uleb128 0xe
 11757 0009 1B       		.uleb128 0x1b
 11758 000a 0E       		.uleb128 0xe
 11759 000b 55       		.uleb128 0x55
 11760 000c 17       		.uleb128 0x17
 11761 000d 11       		.uleb128 0x11
 11762 000e 01       		.uleb128 0x1
 11763 000f 10       		.uleb128 0x10
 11764 0010 17       		.uleb128 0x17
 11765 0011 00       		.byte	0
 11766 0012 00       		.byte	0
 11767 0013 02       		.uleb128 0x2
 11768 0014 24       		.uleb128 0x24
 11769 0015 00       		.byte	0
 11770 0016 0B       		.uleb128 0xb
 11771 0017 0B       		.uleb128 0xb
 11772 0018 3E       		.uleb128 0x3e
 11773 0019 0B       		.uleb128 0xb
 11774 001a 03       		.uleb128 0x3
 11775 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 250


 11776 001c 00       		.byte	0
 11777 001d 00       		.byte	0
 11778 001e 03       		.uleb128 0x3
 11779 001f 16       		.uleb128 0x16
 11780 0020 00       		.byte	0
 11781 0021 03       		.uleb128 0x3
 11782 0022 0E       		.uleb128 0xe
 11783 0023 3A       		.uleb128 0x3a
 11784 0024 0B       		.uleb128 0xb
 11785 0025 3B       		.uleb128 0x3b
 11786 0026 0B       		.uleb128 0xb
 11787 0027 49       		.uleb128 0x49
 11788 0028 13       		.uleb128 0x13
 11789 0029 00       		.byte	0
 11790 002a 00       		.byte	0
 11791 002b 04       		.uleb128 0x4
 11792 002c 24       		.uleb128 0x24
 11793 002d 00       		.byte	0
 11794 002e 0B       		.uleb128 0xb
 11795 002f 0B       		.uleb128 0xb
 11796 0030 3E       		.uleb128 0x3e
 11797 0031 0B       		.uleb128 0xb
 11798 0032 03       		.uleb128 0x3
 11799 0033 08       		.uleb128 0x8
 11800 0034 00       		.byte	0
 11801 0035 00       		.byte	0
 11802 0036 05       		.uleb128 0x5
 11803 0037 16       		.uleb128 0x16
 11804 0038 00       		.byte	0
 11805 0039 03       		.uleb128 0x3
 11806 003a 0E       		.uleb128 0xe
 11807 003b 3A       		.uleb128 0x3a
 11808 003c 0B       		.uleb128 0xb
 11809 003d 3B       		.uleb128 0x3b
 11810 003e 05       		.uleb128 0x5
 11811 003f 49       		.uleb128 0x49
 11812 0040 13       		.uleb128 0x13
 11813 0041 00       		.byte	0
 11814 0042 00       		.byte	0
 11815 0043 06       		.uleb128 0x6
 11816 0044 35       		.uleb128 0x35
 11817 0045 00       		.byte	0
 11818 0046 49       		.uleb128 0x49
 11819 0047 13       		.uleb128 0x13
 11820 0048 00       		.byte	0
 11821 0049 00       		.byte	0
 11822 004a 07       		.uleb128 0x7
 11823 004b 01       		.uleb128 0x1
 11824 004c 01       		.byte	0x1
 11825 004d 49       		.uleb128 0x49
 11826 004e 13       		.uleb128 0x13
 11827 004f 01       		.uleb128 0x1
 11828 0050 13       		.uleb128 0x13
 11829 0051 00       		.byte	0
 11830 0052 00       		.byte	0
 11831 0053 08       		.uleb128 0x8
 11832 0054 21       		.uleb128 0x21
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 251


 11833 0055 00       		.byte	0
 11834 0056 49       		.uleb128 0x49
 11835 0057 13       		.uleb128 0x13
 11836 0058 2F       		.uleb128 0x2f
 11837 0059 0B       		.uleb128 0xb
 11838 005a 00       		.byte	0
 11839 005b 00       		.byte	0
 11840 005c 09       		.uleb128 0x9
 11841 005d 13       		.uleb128 0x13
 11842 005e 01       		.byte	0x1
 11843 005f 0B       		.uleb128 0xb
 11844 0060 0B       		.uleb128 0xb
 11845 0061 3A       		.uleb128 0x3a
 11846 0062 0B       		.uleb128 0xb
 11847 0063 3B       		.uleb128 0x3b
 11848 0064 05       		.uleb128 0x5
 11849 0065 01       		.uleb128 0x1
 11850 0066 13       		.uleb128 0x13
 11851 0067 00       		.byte	0
 11852 0068 00       		.byte	0
 11853 0069 0A       		.uleb128 0xa
 11854 006a 0D       		.uleb128 0xd
 11855 006b 00       		.byte	0
 11856 006c 03       		.uleb128 0x3
 11857 006d 0E       		.uleb128 0xe
 11858 006e 3A       		.uleb128 0x3a
 11859 006f 0B       		.uleb128 0xb
 11860 0070 3B       		.uleb128 0x3b
 11861 0071 05       		.uleb128 0x5
 11862 0072 49       		.uleb128 0x49
 11863 0073 13       		.uleb128 0x13
 11864 0074 38       		.uleb128 0x38
 11865 0075 0B       		.uleb128 0xb
 11866 0076 00       		.byte	0
 11867 0077 00       		.byte	0
 11868 0078 0B       		.uleb128 0xb
 11869 0079 04       		.uleb128 0x4
 11870 007a 01       		.byte	0x1
 11871 007b 0B       		.uleb128 0xb
 11872 007c 0B       		.uleb128 0xb
 11873 007d 49       		.uleb128 0x49
 11874 007e 13       		.uleb128 0x13
 11875 007f 3A       		.uleb128 0x3a
 11876 0080 0B       		.uleb128 0xb
 11877 0081 3B       		.uleb128 0x3b
 11878 0082 05       		.uleb128 0x5
 11879 0083 01       		.uleb128 0x1
 11880 0084 13       		.uleb128 0x13
 11881 0085 00       		.byte	0
 11882 0086 00       		.byte	0
 11883 0087 0C       		.uleb128 0xc
 11884 0088 28       		.uleb128 0x28
 11885 0089 00       		.byte	0
 11886 008a 03       		.uleb128 0x3
 11887 008b 0E       		.uleb128 0xe
 11888 008c 1C       		.uleb128 0x1c
 11889 008d 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 252


 11890 008e 00       		.byte	0
 11891 008f 00       		.byte	0
 11892 0090 0D       		.uleb128 0xd
 11893 0091 04       		.uleb128 0x4
 11894 0092 01       		.byte	0x1
 11895 0093 03       		.uleb128 0x3
 11896 0094 0E       		.uleb128 0xe
 11897 0095 0B       		.uleb128 0xb
 11898 0096 0B       		.uleb128 0xb
 11899 0097 49       		.uleb128 0x49
 11900 0098 13       		.uleb128 0x13
 11901 0099 3A       		.uleb128 0x3a
 11902 009a 0B       		.uleb128 0xb
 11903 009b 3B       		.uleb128 0x3b
 11904 009c 0B       		.uleb128 0xb
 11905 009d 01       		.uleb128 0x1
 11906 009e 13       		.uleb128 0x13
 11907 009f 00       		.byte	0
 11908 00a0 00       		.byte	0
 11909 00a1 0E       		.uleb128 0xe
 11910 00a2 17       		.uleb128 0x17
 11911 00a3 01       		.byte	0x1
 11912 00a4 03       		.uleb128 0x3
 11913 00a5 0E       		.uleb128 0xe
 11914 00a6 0B       		.uleb128 0xb
 11915 00a7 0B       		.uleb128 0xb
 11916 00a8 3A       		.uleb128 0x3a
 11917 00a9 0B       		.uleb128 0xb
 11918 00aa 3B       		.uleb128 0x3b
 11919 00ab 0B       		.uleb128 0xb
 11920 00ac 01       		.uleb128 0x1
 11921 00ad 13       		.uleb128 0x13
 11922 00ae 00       		.byte	0
 11923 00af 00       		.byte	0
 11924 00b0 0F       		.uleb128 0xf
 11925 00b1 0D       		.uleb128 0xd
 11926 00b2 00       		.byte	0
 11927 00b3 03       		.uleb128 0x3
 11928 00b4 08       		.uleb128 0x8
 11929 00b5 3A       		.uleb128 0x3a
 11930 00b6 0B       		.uleb128 0xb
 11931 00b7 3B       		.uleb128 0x3b
 11932 00b8 0B       		.uleb128 0xb
 11933 00b9 49       		.uleb128 0x49
 11934 00ba 13       		.uleb128 0x13
 11935 00bb 00       		.byte	0
 11936 00bc 00       		.byte	0
 11937 00bd 10       		.uleb128 0x10
 11938 00be 2E       		.uleb128 0x2e
 11939 00bf 01       		.byte	0x1
 11940 00c0 3F       		.uleb128 0x3f
 11941 00c1 19       		.uleb128 0x19
 11942 00c2 03       		.uleb128 0x3
 11943 00c3 0E       		.uleb128 0xe
 11944 00c4 3A       		.uleb128 0x3a
 11945 00c5 0B       		.uleb128 0xb
 11946 00c6 3B       		.uleb128 0x3b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 253


 11947 00c7 0B       		.uleb128 0xb
 11948 00c8 27       		.uleb128 0x27
 11949 00c9 19       		.uleb128 0x19
 11950 00ca 11       		.uleb128 0x11
 11951 00cb 01       		.uleb128 0x1
 11952 00cc 12       		.uleb128 0x12
 11953 00cd 06       		.uleb128 0x6
 11954 00ce 40       		.uleb128 0x40
 11955 00cf 18       		.uleb128 0x18
 11956 00d0 9642     		.uleb128 0x2116
 11957 00d2 19       		.uleb128 0x19
 11958 00d3 01       		.uleb128 0x1
 11959 00d4 13       		.uleb128 0x13
 11960 00d5 00       		.byte	0
 11961 00d6 00       		.byte	0
 11962 00d7 11       		.uleb128 0x11
 11963 00d8 0B       		.uleb128 0xb
 11964 00d9 01       		.byte	0x1
 11965 00da 11       		.uleb128 0x11
 11966 00db 01       		.uleb128 0x1
 11967 00dc 12       		.uleb128 0x12
 11968 00dd 06       		.uleb128 0x6
 11969 00de 00       		.byte	0
 11970 00df 00       		.byte	0
 11971 00e0 12       		.uleb128 0x12
 11972 00e1 34       		.uleb128 0x34
 11973 00e2 00       		.byte	0
 11974 00e3 03       		.uleb128 0x3
 11975 00e4 08       		.uleb128 0x8
 11976 00e5 3A       		.uleb128 0x3a
 11977 00e6 0B       		.uleb128 0xb
 11978 00e7 3B       		.uleb128 0x3b
 11979 00e8 0B       		.uleb128 0xb
 11980 00e9 49       		.uleb128 0x49
 11981 00ea 13       		.uleb128 0x13
 11982 00eb 02       		.uleb128 0x2
 11983 00ec 18       		.uleb128 0x18
 11984 00ed 00       		.byte	0
 11985 00ee 00       		.byte	0
 11986 00ef 13       		.uleb128 0x13
 11987 00f0 2E       		.uleb128 0x2e
 11988 00f1 00       		.byte	0
 11989 00f2 3F       		.uleb128 0x3f
 11990 00f3 19       		.uleb128 0x19
 11991 00f4 03       		.uleb128 0x3
 11992 00f5 0E       		.uleb128 0xe
 11993 00f6 3A       		.uleb128 0x3a
 11994 00f7 0B       		.uleb128 0xb
 11995 00f8 3B       		.uleb128 0x3b
 11996 00f9 0B       		.uleb128 0xb
 11997 00fa 27       		.uleb128 0x27
 11998 00fb 19       		.uleb128 0x19
 11999 00fc 11       		.uleb128 0x11
 12000 00fd 01       		.uleb128 0x1
 12001 00fe 12       		.uleb128 0x12
 12002 00ff 06       		.uleb128 0x6
 12003 0100 40       		.uleb128 0x40
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 254


 12004 0101 18       		.uleb128 0x18
 12005 0102 9642     		.uleb128 0x2116
 12006 0104 19       		.uleb128 0x19
 12007 0105 00       		.byte	0
 12008 0106 00       		.byte	0
 12009 0107 14       		.uleb128 0x14
 12010 0108 2E       		.uleb128 0x2e
 12011 0109 00       		.byte	0
 12012 010a 3F       		.uleb128 0x3f
 12013 010b 19       		.uleb128 0x19
 12014 010c 03       		.uleb128 0x3
 12015 010d 0E       		.uleb128 0xe
 12016 010e 3A       		.uleb128 0x3a
 12017 010f 0B       		.uleb128 0xb
 12018 0110 3B       		.uleb128 0x3b
 12019 0111 05       		.uleb128 0x5
 12020 0112 27       		.uleb128 0x27
 12021 0113 19       		.uleb128 0x19
 12022 0114 11       		.uleb128 0x11
 12023 0115 01       		.uleb128 0x1
 12024 0116 12       		.uleb128 0x12
 12025 0117 06       		.uleb128 0x6
 12026 0118 40       		.uleb128 0x40
 12027 0119 18       		.uleb128 0x18
 12028 011a 9642     		.uleb128 0x2116
 12029 011c 19       		.uleb128 0x19
 12030 011d 00       		.byte	0
 12031 011e 00       		.byte	0
 12032 011f 15       		.uleb128 0x15
 12033 0120 2E       		.uleb128 0x2e
 12034 0121 01       		.byte	0x1
 12035 0122 3F       		.uleb128 0x3f
 12036 0123 19       		.uleb128 0x19
 12037 0124 03       		.uleb128 0x3
 12038 0125 0E       		.uleb128 0xe
 12039 0126 3A       		.uleb128 0x3a
 12040 0127 0B       		.uleb128 0xb
 12041 0128 3B       		.uleb128 0x3b
 12042 0129 05       		.uleb128 0x5
 12043 012a 27       		.uleb128 0x27
 12044 012b 19       		.uleb128 0x19
 12045 012c 49       		.uleb128 0x49
 12046 012d 13       		.uleb128 0x13
 12047 012e 11       		.uleb128 0x11
 12048 012f 01       		.uleb128 0x1
 12049 0130 12       		.uleb128 0x12
 12050 0131 06       		.uleb128 0x6
 12051 0132 40       		.uleb128 0x40
 12052 0133 18       		.uleb128 0x18
 12053 0134 9642     		.uleb128 0x2116
 12054 0136 19       		.uleb128 0x19
 12055 0137 01       		.uleb128 0x1
 12056 0138 13       		.uleb128 0x13
 12057 0139 00       		.byte	0
 12058 013a 00       		.byte	0
 12059 013b 16       		.uleb128 0x16
 12060 013c 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 255


 12061 013d 00       		.byte	0
 12062 013e 03       		.uleb128 0x3
 12063 013f 08       		.uleb128 0x8
 12064 0140 3A       		.uleb128 0x3a
 12065 0141 0B       		.uleb128 0xb
 12066 0142 3B       		.uleb128 0x3b
 12067 0143 05       		.uleb128 0x5
 12068 0144 49       		.uleb128 0x49
 12069 0145 13       		.uleb128 0x13
 12070 0146 02       		.uleb128 0x2
 12071 0147 18       		.uleb128 0x18
 12072 0148 00       		.byte	0
 12073 0149 00       		.byte	0
 12074 014a 17       		.uleb128 0x17
 12075 014b 34       		.uleb128 0x34
 12076 014c 00       		.byte	0
 12077 014d 03       		.uleb128 0x3
 12078 014e 0E       		.uleb128 0xe
 12079 014f 3A       		.uleb128 0x3a
 12080 0150 0B       		.uleb128 0xb
 12081 0151 3B       		.uleb128 0x3b
 12082 0152 05       		.uleb128 0x5
 12083 0153 49       		.uleb128 0x49
 12084 0154 13       		.uleb128 0x13
 12085 0155 02       		.uleb128 0x2
 12086 0156 18       		.uleb128 0x18
 12087 0157 00       		.byte	0
 12088 0158 00       		.byte	0
 12089 0159 18       		.uleb128 0x18
 12090 015a 05       		.uleb128 0x5
 12091 015b 00       		.byte	0
 12092 015c 03       		.uleb128 0x3
 12093 015d 0E       		.uleb128 0xe
 12094 015e 3A       		.uleb128 0x3a
 12095 015f 0B       		.uleb128 0xb
 12096 0160 3B       		.uleb128 0x3b
 12097 0161 05       		.uleb128 0x5
 12098 0162 49       		.uleb128 0x49
 12099 0163 13       		.uleb128 0x13
 12100 0164 02       		.uleb128 0x2
 12101 0165 18       		.uleb128 0x18
 12102 0166 00       		.byte	0
 12103 0167 00       		.byte	0
 12104 0168 19       		.uleb128 0x19
 12105 0169 34       		.uleb128 0x34
 12106 016a 00       		.byte	0
 12107 016b 03       		.uleb128 0x3
 12108 016c 08       		.uleb128 0x8
 12109 016d 3A       		.uleb128 0x3a
 12110 016e 0B       		.uleb128 0xb
 12111 016f 3B       		.uleb128 0x3b
 12112 0170 05       		.uleb128 0x5
 12113 0171 49       		.uleb128 0x49
 12114 0172 13       		.uleb128 0x13
 12115 0173 02       		.uleb128 0x2
 12116 0174 18       		.uleb128 0x18
 12117 0175 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 256


 12118 0176 00       		.byte	0
 12119 0177 1A       		.uleb128 0x1a
 12120 0178 2E       		.uleb128 0x2e
 12121 0179 01       		.byte	0x1
 12122 017a 3F       		.uleb128 0x3f
 12123 017b 19       		.uleb128 0x19
 12124 017c 03       		.uleb128 0x3
 12125 017d 08       		.uleb128 0x8
 12126 017e 3A       		.uleb128 0x3a
 12127 017f 0B       		.uleb128 0xb
 12128 0180 3B       		.uleb128 0x3b
 12129 0181 05       		.uleb128 0x5
 12130 0182 27       		.uleb128 0x27
 12131 0183 19       		.uleb128 0x19
 12132 0184 49       		.uleb128 0x49
 12133 0185 13       		.uleb128 0x13
 12134 0186 11       		.uleb128 0x11
 12135 0187 01       		.uleb128 0x1
 12136 0188 12       		.uleb128 0x12
 12137 0189 06       		.uleb128 0x6
 12138 018a 40       		.uleb128 0x40
 12139 018b 18       		.uleb128 0x18
 12140 018c 9642     		.uleb128 0x2116
 12141 018e 19       		.uleb128 0x19
 12142 018f 01       		.uleb128 0x1
 12143 0190 13       		.uleb128 0x13
 12144 0191 00       		.byte	0
 12145 0192 00       		.byte	0
 12146 0193 1B       		.uleb128 0x1b
 12147 0194 2E       		.uleb128 0x2e
 12148 0195 00       		.byte	0
 12149 0196 3F       		.uleb128 0x3f
 12150 0197 19       		.uleb128 0x19
 12151 0198 03       		.uleb128 0x3
 12152 0199 0E       		.uleb128 0xe
 12153 019a 3A       		.uleb128 0x3a
 12154 019b 0B       		.uleb128 0xb
 12155 019c 3B       		.uleb128 0x3b
 12156 019d 05       		.uleb128 0x5
 12157 019e 11       		.uleb128 0x11
 12158 019f 01       		.uleb128 0x1
 12159 01a0 12       		.uleb128 0x12
 12160 01a1 06       		.uleb128 0x6
 12161 01a2 40       		.uleb128 0x40
 12162 01a3 18       		.uleb128 0x18
 12163 01a4 9742     		.uleb128 0x2117
 12164 01a6 19       		.uleb128 0x19
 12165 01a7 00       		.byte	0
 12166 01a8 00       		.byte	0
 12167 01a9 1C       		.uleb128 0x1c
 12168 01aa 2E       		.uleb128 0x2e
 12169 01ab 01       		.byte	0x1
 12170 01ac 3F       		.uleb128 0x3f
 12171 01ad 19       		.uleb128 0x19
 12172 01ae 03       		.uleb128 0x3
 12173 01af 0E       		.uleb128 0xe
 12174 01b0 3A       		.uleb128 0x3a
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 257


 12175 01b1 0B       		.uleb128 0xb
 12176 01b2 3B       		.uleb128 0x3b
 12177 01b3 05       		.uleb128 0x5
 12178 01b4 11       		.uleb128 0x11
 12179 01b5 01       		.uleb128 0x1
 12180 01b6 12       		.uleb128 0x12
 12181 01b7 06       		.uleb128 0x6
 12182 01b8 40       		.uleb128 0x40
 12183 01b9 18       		.uleb128 0x18
 12184 01ba 9642     		.uleb128 0x2116
 12185 01bc 19       		.uleb128 0x19
 12186 01bd 01       		.uleb128 0x1
 12187 01be 13       		.uleb128 0x13
 12188 01bf 00       		.byte	0
 12189 01c0 00       		.byte	0
 12190 01c1 1D       		.uleb128 0x1d
 12191 01c2 0B       		.uleb128 0xb
 12192 01c3 01       		.byte	0x1
 12193 01c4 11       		.uleb128 0x11
 12194 01c5 01       		.uleb128 0x1
 12195 01c6 12       		.uleb128 0x12
 12196 01c7 06       		.uleb128 0x6
 12197 01c8 01       		.uleb128 0x1
 12198 01c9 13       		.uleb128 0x13
 12199 01ca 00       		.byte	0
 12200 01cb 00       		.byte	0
 12201 01cc 1E       		.uleb128 0x1e
 12202 01cd 2E       		.uleb128 0x2e
 12203 01ce 00       		.byte	0
 12204 01cf 3F       		.uleb128 0x3f
 12205 01d0 19       		.uleb128 0x19
 12206 01d1 03       		.uleb128 0x3
 12207 01d2 0E       		.uleb128 0xe
 12208 01d3 3A       		.uleb128 0x3a
 12209 01d4 0B       		.uleb128 0xb
 12210 01d5 3B       		.uleb128 0x3b
 12211 01d6 05       		.uleb128 0x5
 12212 01d7 11       		.uleb128 0x11
 12213 01d8 01       		.uleb128 0x1
 12214 01d9 12       		.uleb128 0x12
 12215 01da 06       		.uleb128 0x6
 12216 01db 40       		.uleb128 0x40
 12217 01dc 18       		.uleb128 0x18
 12218 01dd 9642     		.uleb128 0x2116
 12219 01df 19       		.uleb128 0x19
 12220 01e0 00       		.byte	0
 12221 01e1 00       		.byte	0
 12222 01e2 1F       		.uleb128 0x1f
 12223 01e3 2E       		.uleb128 0x2e
 12224 01e4 01       		.byte	0x1
 12225 01e5 3F       		.uleb128 0x3f
 12226 01e6 19       		.uleb128 0x19
 12227 01e7 03       		.uleb128 0x3
 12228 01e8 0E       		.uleb128 0xe
 12229 01e9 3A       		.uleb128 0x3a
 12230 01ea 0B       		.uleb128 0xb
 12231 01eb 3B       		.uleb128 0x3b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 258


 12232 01ec 05       		.uleb128 0x5
 12233 01ed 27       		.uleb128 0x27
 12234 01ee 19       		.uleb128 0x19
 12235 01ef 11       		.uleb128 0x11
 12236 01f0 01       		.uleb128 0x1
 12237 01f1 12       		.uleb128 0x12
 12238 01f2 06       		.uleb128 0x6
 12239 01f3 40       		.uleb128 0x40
 12240 01f4 18       		.uleb128 0x18
 12241 01f5 9642     		.uleb128 0x2116
 12242 01f7 19       		.uleb128 0x19
 12243 01f8 01       		.uleb128 0x1
 12244 01f9 13       		.uleb128 0x13
 12245 01fa 00       		.byte	0
 12246 01fb 00       		.byte	0
 12247 01fc 20       		.uleb128 0x20
 12248 01fd 0F       		.uleb128 0xf
 12249 01fe 00       		.byte	0
 12250 01ff 0B       		.uleb128 0xb
 12251 0200 0B       		.uleb128 0xb
 12252 0201 49       		.uleb128 0x49
 12253 0202 13       		.uleb128 0x13
 12254 0203 00       		.byte	0
 12255 0204 00       		.byte	0
 12256 0205 21       		.uleb128 0x21
 12257 0206 34       		.uleb128 0x34
 12258 0207 00       		.byte	0
 12259 0208 03       		.uleb128 0x3
 12260 0209 0E       		.uleb128 0xe
 12261 020a 3A       		.uleb128 0x3a
 12262 020b 0B       		.uleb128 0xb
 12263 020c 3B       		.uleb128 0x3b
 12264 020d 0B       		.uleb128 0xb
 12265 020e 49       		.uleb128 0x49
 12266 020f 13       		.uleb128 0x13
 12267 0210 02       		.uleb128 0x2
 12268 0211 18       		.uleb128 0x18
 12269 0212 00       		.byte	0
 12270 0213 00       		.byte	0
 12271 0214 22       		.uleb128 0x22
 12272 0215 34       		.uleb128 0x34
 12273 0216 00       		.byte	0
 12274 0217 03       		.uleb128 0x3
 12275 0218 0E       		.uleb128 0xe
 12276 0219 3A       		.uleb128 0x3a
 12277 021a 0B       		.uleb128 0xb
 12278 021b 3B       		.uleb128 0x3b
 12279 021c 0B       		.uleb128 0xb
 12280 021d 49       		.uleb128 0x49
 12281 021e 13       		.uleb128 0x13
 12282 021f 3F       		.uleb128 0x3f
 12283 0220 19       		.uleb128 0x19
 12284 0221 3C       		.uleb128 0x3c
 12285 0222 19       		.uleb128 0x19
 12286 0223 00       		.byte	0
 12287 0224 00       		.byte	0
 12288 0225 23       		.uleb128 0x23
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 259


 12289 0226 21       		.uleb128 0x21
 12290 0227 00       		.byte	0
 12291 0228 49       		.uleb128 0x49
 12292 0229 13       		.uleb128 0x13
 12293 022a 2F       		.uleb128 0x2f
 12294 022b 05       		.uleb128 0x5
 12295 022c 00       		.byte	0
 12296 022d 00       		.byte	0
 12297 022e 24       		.uleb128 0x24
 12298 022f 26       		.uleb128 0x26
 12299 0230 00       		.byte	0
 12300 0231 49       		.uleb128 0x49
 12301 0232 13       		.uleb128 0x13
 12302 0233 00       		.byte	0
 12303 0234 00       		.byte	0
 12304 0235 25       		.uleb128 0x25
 12305 0236 34       		.uleb128 0x34
 12306 0237 00       		.byte	0
 12307 0238 03       		.uleb128 0x3
 12308 0239 0E       		.uleb128 0xe
 12309 023a 3A       		.uleb128 0x3a
 12310 023b 0B       		.uleb128 0xb
 12311 023c 3B       		.uleb128 0x3b
 12312 023d 0B       		.uleb128 0xb
 12313 023e 49       		.uleb128 0x49
 12314 023f 13       		.uleb128 0x13
 12315 0240 3F       		.uleb128 0x3f
 12316 0241 19       		.uleb128 0x19
 12317 0242 02       		.uleb128 0x2
 12318 0243 18       		.uleb128 0x18
 12319 0244 00       		.byte	0
 12320 0245 00       		.byte	0
 12321 0246 26       		.uleb128 0x26
 12322 0247 34       		.uleb128 0x34
 12323 0248 00       		.byte	0
 12324 0249 03       		.uleb128 0x3
 12325 024a 0E       		.uleb128 0xe
 12326 024b 3A       		.uleb128 0x3a
 12327 024c 0B       		.uleb128 0xb
 12328 024d 3B       		.uleb128 0x3b
 12329 024e 05       		.uleb128 0x5
 12330 024f 49       		.uleb128 0x49
 12331 0250 13       		.uleb128 0x13
 12332 0251 3F       		.uleb128 0x3f
 12333 0252 19       		.uleb128 0x19
 12334 0253 3C       		.uleb128 0x3c
 12335 0254 19       		.uleb128 0x19
 12336 0255 00       		.byte	0
 12337 0256 00       		.byte	0
 12338 0257 27       		.uleb128 0x27
 12339 0258 34       		.uleb128 0x34
 12340 0259 00       		.byte	0
 12341 025a 03       		.uleb128 0x3
 12342 025b 0E       		.uleb128 0xe
 12343 025c 3A       		.uleb128 0x3a
 12344 025d 0B       		.uleb128 0xb
 12345 025e 3B       		.uleb128 0x3b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 260


 12346 025f 05       		.uleb128 0x5
 12347 0260 49       		.uleb128 0x49
 12348 0261 13       		.uleb128 0x13
 12349 0262 3F       		.uleb128 0x3f
 12350 0263 19       		.uleb128 0x19
 12351 0264 02       		.uleb128 0x2
 12352 0265 18       		.uleb128 0x18
 12353 0266 00       		.byte	0
 12354 0267 00       		.byte	0
 12355 0268 28       		.uleb128 0x28
 12356 0269 34       		.uleb128 0x34
 12357 026a 00       		.byte	0
 12358 026b 03       		.uleb128 0x3
 12359 026c 08       		.uleb128 0x8
 12360 026d 3A       		.uleb128 0x3a
 12361 026e 0B       		.uleb128 0xb
 12362 026f 3B       		.uleb128 0x3b
 12363 0270 0B       		.uleb128 0xb
 12364 0271 49       		.uleb128 0x49
 12365 0272 13       		.uleb128 0x13
 12366 0273 3F       		.uleb128 0x3f
 12367 0274 19       		.uleb128 0x19
 12368 0275 02       		.uleb128 0x2
 12369 0276 18       		.uleb128 0x18
 12370 0277 00       		.byte	0
 12371 0278 00       		.byte	0
 12372 0279 00       		.byte	0
 12373              		.section	.debug_aranges,"",%progbits
 12374 0000 0C010000 		.4byte	0x10c
 12375 0004 0200     		.2byte	0x2
 12376 0006 00000000 		.4byte	.Ldebug_info0
 12377 000a 04       		.byte	0x4
 12378 000b 00       		.byte	0
 12379 000c 0000     		.2byte	0
 12380 000e 0000     		.2byte	0
 12381 0010 00000000 		.4byte	.LFB64
 12382 0014 74010000 		.4byte	.LFE64-.LFB64
 12383 0018 00000000 		.4byte	.LFB65
 12384 001c 9C000000 		.4byte	.LFE65-.LFB65
 12385 0020 00000000 		.4byte	.LFB66
 12386 0024 14000000 		.4byte	.LFE66-.LFB66
 12387 0028 00000000 		.4byte	.LFB67
 12388 002c 7C000000 		.4byte	.LFE67-.LFB67
 12389 0030 00000000 		.4byte	.LFB68
 12390 0034 58000000 		.4byte	.LFE68-.LFB68
 12391 0038 00000000 		.4byte	.LFB69
 12392 003c 68000000 		.4byte	.LFE69-.LFB69
 12393 0040 00000000 		.4byte	.LFB70
 12394 0044 4C000000 		.4byte	.LFE70-.LFB70
 12395 0048 00000000 		.4byte	.LFB71
 12396 004c 46000000 		.4byte	.LFE71-.LFB71
 12397 0050 00000000 		.4byte	.LFB72
 12398 0054 56000000 		.4byte	.LFE72-.LFB72
 12399 0058 00000000 		.4byte	.LFB73
 12400 005c 0C000000 		.4byte	.LFE73-.LFB73
 12401 0060 00000000 		.4byte	.LFB74
 12402 0064 0C000000 		.4byte	.LFE74-.LFB74
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 261


 12403 0068 00000000 		.4byte	.LFB75
 12404 006c 0C010000 		.4byte	.LFE75-.LFB75
 12405 0070 00000000 		.4byte	.LFB76
 12406 0074 981B0000 		.4byte	.LFE76-.LFB76
 12407 0078 00000000 		.4byte	.LFB77
 12408 007c 70000000 		.4byte	.LFE77-.LFB77
 12409 0080 00000000 		.4byte	.LFB78
 12410 0084 70010000 		.4byte	.LFE78-.LFB78
 12411 0088 00000000 		.4byte	.LFB79
 12412 008c E0000000 		.4byte	.LFE79-.LFB79
 12413 0090 00000000 		.4byte	.LFB80
 12414 0094 B4000000 		.4byte	.LFE80-.LFB80
 12415 0098 00000000 		.4byte	.LFB81
 12416 009c 30000000 		.4byte	.LFE81-.LFB81
 12417 00a0 00000000 		.4byte	.LFB82
 12418 00a4 7C000000 		.4byte	.LFE82-.LFB82
 12419 00a8 00000000 		.4byte	.LFB83
 12420 00ac 54000000 		.4byte	.LFE83-.LFB83
 12421 00b0 00000000 		.4byte	.LFB84
 12422 00b4 C4000000 		.4byte	.LFE84-.LFB84
 12423 00b8 00000000 		.4byte	.LFB85
 12424 00bc 98000000 		.4byte	.LFE85-.LFB85
 12425 00c0 00000000 		.4byte	.LFB86
 12426 00c4 D4000000 		.4byte	.LFE86-.LFB86
 12427 00c8 00000000 		.4byte	.LFB87
 12428 00cc 1C000000 		.4byte	.LFE87-.LFB87
 12429 00d0 00000000 		.4byte	.LFB88
 12430 00d4 68000000 		.4byte	.LFE88-.LFB88
 12431 00d8 00000000 		.4byte	.LFB89
 12432 00dc 68000000 		.4byte	.LFE89-.LFB89
 12433 00e0 00000000 		.4byte	.LFB90
 12434 00e4 68000000 		.4byte	.LFE90-.LFB90
 12435 00e8 00000000 		.4byte	.LFB91
 12436 00ec 6C000000 		.4byte	.LFE91-.LFB91
 12437 00f0 00000000 		.4byte	.LFB92
 12438 00f4 64000000 		.4byte	.LFE92-.LFB92
 12439 00f8 00000000 		.4byte	.LFB93
 12440 00fc FC080000 		.4byte	.LFE93-.LFB93
 12441 0100 00000000 		.4byte	.LFB94
 12442 0104 3C010000 		.4byte	.LFE94-.LFB94
 12443 0108 00000000 		.4byte	0
 12444 010c 00000000 		.4byte	0
 12445              		.section	.debug_ranges,"",%progbits
 12446              	.Ldebug_ranges0:
 12447 0000 00000000 		.4byte	.LFB64
 12448 0004 74010000 		.4byte	.LFE64
 12449 0008 00000000 		.4byte	.LFB65
 12450 000c 9C000000 		.4byte	.LFE65
 12451 0010 00000000 		.4byte	.LFB66
 12452 0014 14000000 		.4byte	.LFE66
 12453 0018 00000000 		.4byte	.LFB67
 12454 001c 7C000000 		.4byte	.LFE67
 12455 0020 00000000 		.4byte	.LFB68
 12456 0024 58000000 		.4byte	.LFE68
 12457 0028 00000000 		.4byte	.LFB69
 12458 002c 68000000 		.4byte	.LFE69
 12459 0030 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 262


 12460 0034 4C000000 		.4byte	.LFE70
 12461 0038 00000000 		.4byte	.LFB71
 12462 003c 46000000 		.4byte	.LFE71
 12463 0040 00000000 		.4byte	.LFB72
 12464 0044 56000000 		.4byte	.LFE72
 12465 0048 00000000 		.4byte	.LFB73
 12466 004c 0C000000 		.4byte	.LFE73
 12467 0050 00000000 		.4byte	.LFB74
 12468 0054 0C000000 		.4byte	.LFE74
 12469 0058 00000000 		.4byte	.LFB75
 12470 005c 0C010000 		.4byte	.LFE75
 12471 0060 00000000 		.4byte	.LFB76
 12472 0064 981B0000 		.4byte	.LFE76
 12473 0068 00000000 		.4byte	.LFB77
 12474 006c 70000000 		.4byte	.LFE77
 12475 0070 00000000 		.4byte	.LFB78
 12476 0074 70010000 		.4byte	.LFE78
 12477 0078 00000000 		.4byte	.LFB79
 12478 007c E0000000 		.4byte	.LFE79
 12479 0080 00000000 		.4byte	.LFB80
 12480 0084 B4000000 		.4byte	.LFE80
 12481 0088 00000000 		.4byte	.LFB81
 12482 008c 30000000 		.4byte	.LFE81
 12483 0090 00000000 		.4byte	.LFB82
 12484 0094 7C000000 		.4byte	.LFE82
 12485 0098 00000000 		.4byte	.LFB83
 12486 009c 54000000 		.4byte	.LFE83
 12487 00a0 00000000 		.4byte	.LFB84
 12488 00a4 C4000000 		.4byte	.LFE84
 12489 00a8 00000000 		.4byte	.LFB85
 12490 00ac 98000000 		.4byte	.LFE85
 12491 00b0 00000000 		.4byte	.LFB86
 12492 00b4 D4000000 		.4byte	.LFE86
 12493 00b8 00000000 		.4byte	.LFB87
 12494 00bc 1C000000 		.4byte	.LFE87
 12495 00c0 00000000 		.4byte	.LFB88
 12496 00c4 68000000 		.4byte	.LFE88
 12497 00c8 00000000 		.4byte	.LFB89
 12498 00cc 68000000 		.4byte	.LFE89
 12499 00d0 00000000 		.4byte	.LFB90
 12500 00d4 68000000 		.4byte	.LFE90
 12501 00d8 00000000 		.4byte	.LFB91
 12502 00dc 6C000000 		.4byte	.LFE91
 12503 00e0 00000000 		.4byte	.LFB92
 12504 00e4 64000000 		.4byte	.LFE92
 12505 00e8 00000000 		.4byte	.LFB93
 12506 00ec FC080000 		.4byte	.LFE93
 12507 00f0 00000000 		.4byte	.LFB94
 12508 00f4 3C010000 		.4byte	.LFE94
 12509 00f8 00000000 		.4byte	0
 12510 00fc 00000000 		.4byte	0
 12511              		.section	.debug_line,"",%progbits
 12512              	.Ldebug_line0:
 12513 0000 EE0A0000 		.section	.debug_str,"MS",%progbits,1
 12513      02009B01 
 12513      00000201 
 12513      FB0E0D00 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 263


 12513      01010101 
 12514              	.LASF160:
 12515 0000 70726573 		.ascii	"presetArraySection\000"
 12515      65744172 
 12515      72617953 
 12515      65637469 
 12515      6F6E00
 12516              	.LASF156:
 12517 0013 70726573 		.ascii	"presetArray\000"
 12517      65744172 
 12517      72617900 
 12518              	.LASF299:
 12519 001f 66697273 		.ascii	"firstSysex\000"
 12519      74537973 
 12519      657800
 12520              	.LASF28:
 12521 002a 73697A65 		.ascii	"sizetype\000"
 12521      74797065 
 12521      00
 12522              	.LASF165:
 12523 0033 73656E64 		.ascii	"sendingMessage\000"
 12523      696E674D 
 12523      65737361 
 12523      676500
 12524              	.LASF249:
 12525 0042 70726576 		.ascii	"prev_processed_volumePedal\000"
 12525      5F70726F 
 12525      63657373 
 12525      65645F76 
 12525      6F6C756D 
 12526              	.LASF86:
 12527 005d 74656D70 		.ascii	"tempangle\000"
 12527      616E676C 
 12527      6500
 12528              	.LASF220:
 12529 0067 6E657744 		.ascii	"newDataFlag2\000"
 12529      61746146 
 12529      6C616732 
 12529      00
 12530              	.LASF256:
 12531 0074 6D616372 		.ascii	"macroNamesArray\000"
 12531      6F4E616D 
 12531      65734172 
 12531      72617900 
 12532              	.LASF38:
 12533 0084 43595F45 		.ascii	"CY_EM_EEPROM_SUCCESS\000"
 12533      4D5F4545 
 12533      50524F4D 
 12533      5F535543 
 12533      43455353 
 12534              	.LASF17:
 12535 0099 696E7433 		.ascii	"int32_t\000"
 12535      325F7400 
 12536              	.LASF147:
 12537 00a1 456D5F45 		.ascii	"Em_EEPROM_context\000"
 12537      4550524F 
 12537      4D5F636F 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 264


 12537      6E746578 
 12537      7400
 12538              	.LASF47:
 12539 00b3 54686972 		.ascii	"ThirdLine\000"
 12539      644C696E 
 12539      6500
 12540              	.LASF111:
 12541 00bd 6E6F7465 		.ascii	"noteEvent\000"
 12541      4576656E 
 12541      7400
 12542              	.LASF229:
 12543 00c7 53504932 		.ascii	"SPI2errorflag\000"
 12543      6572726F 
 12543      72666C61 
 12543      6700
 12544              	.LASF21:
 12545 00d5 75696E74 		.ascii	"uint32\000"
 12545      333200
 12546              	.LASF95:
 12547 00dc 77686963 		.ascii	"whichMacroToStoreName\000"
 12547      684D6163 
 12547      726F546F 
 12547      53746F72 
 12547      654E616D 
 12548              	.LASF124:
 12549 00f2 43437661 		.ascii	"CCval\000"
 12549      6C00
 12550              	.LASF171:
 12551 00f8 6E756D4D 		.ascii	"numMappings\000"
 12551      61707069 
 12551      6E677300 
 12552              	.LASF151:
 12553 0104 49324362 		.ascii	"I2Cbuff1\000"
 12553      75666631 
 12553      00
 12554              	.LASF238:
 12555 010d 49324362 		.ascii	"I2Cbuff2\000"
 12555      75666632 
 12555      00
 12556              	.LASF240:
 12557 0116 6D75785F 		.ascii	"mux_states\000"
 12557      73746174 
 12557      657300
 12558              	.LASF137:
 12559 0121 74656D70 		.ascii	"tempLow\000"
 12559      4C6F7700 
 12560              	.LASF198:
 12561 0129 6E65636B 		.ascii	"necks\000"
 12561      7300
 12562              	.LASF189:
 12563 012f 6F637461 		.ascii	"octave\000"
 12563      766500
 12564              	.LASF49:
 12565 0136 4E696C4C 		.ascii	"NilLine\000"
 12565      696E6500 
 12566              	.LASF43:
 12567 013e 63795F65 		.ascii	"cy_en_em_eeprom_status_t\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 265


 12567      6E5F656D 
 12567      5F656570 
 12567      726F6D5F 
 12567      73746174 
 12568              	.LASF289:
 12569 0157 6D616372 		.ascii	"macroOLEDWaitingToSend\000"
 12569      6F4F4C45 
 12569      44576169 
 12569      74696E67 
 12569      546F5365 
 12570              	.LASF243:
 12571 016e 70656461 		.ascii	"pedals_high\000"
 12571      6C735F68 
 12571      69676800 
 12572              	.LASF101:
 12573 017a 6E627974 		.ascii	"nbytes\000"
 12573      657300
 12574              	.LASF276:
 12575 0181 636F7065 		.ascii	"copedentNamesArray\000"
 12575      64656E74 
 12575      4E616D65 
 12575      73417272 
 12575      617900
 12576              	.LASF169:
 12577 0194 76616C73 		.ascii	"valsCount\000"
 12577      436F756E 
 12577      7400
 12578              	.LASF187:
 12579 019e 74656D70 		.ascii	"temper\000"
 12579      657200
 12580              	.LASF123:
 12581 01a5 43436E75 		.ascii	"CCnum\000"
 12581      6D00
 12582              	.LASF40:
 12583 01ab 43595F45 		.ascii	"CY_EM_EEPROM_BAD_CHECKSUM\000"
 12583      4D5F4545 
 12583      50524F4D 
 12583      5F424144 
 12583      5F434845 
 12584              	.LASF36:
 12585 01c5 75736572 		.ascii	"userFlashStartAddr\000"
 12585      466C6173 
 12585      68537461 
 12585      72744164 
 12585      647200
 12586              	.LASF30:
 12587 01d8 6E756D62 		.ascii	"numberOfRows\000"
 12587      65724F66 
 12587      526F7773 
 12587      00
 12588              	.LASF131:
 12589 01e5 696E7456 		.ascii	"intVal\000"
 12589      616C00
 12590              	.LASF70:
 12591 01ec 69737461 		.ascii	"istart\000"
 12591      727400
 12592              	.LASF76:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 266


 12593 01f3 70656461 		.ascii	"pedalDiff\000"
 12593      6C446966 
 12593      6600
 12594              	.LASF128:
 12595 01fd 74686556 		.ascii	"theVal\000"
 12595      616C00
 12596              	.LASF34:
 12597 0204 72656475 		.ascii	"redundantCopy\000"
 12597      6E64616E 
 12597      74436F70 
 12597      7900
 12598              	.LASF2:
 12599 0212 5F5F7569 		.ascii	"__uint8_t\000"
 12599      6E74385F 
 12599      7400
 12600              	.LASF67:
 12601 021c 616C7068 		.ascii	"alpha\000"
 12601      6100
 12602              	.LASF57:
 12603 0222 70726573 		.ascii	"presetEnd\000"
 12603      6574456E 
 12603      6400
 12604              	.LASF237:
 12605 022c 62617243 		.ascii	"barCount\000"
 12605      6F756E74 
 12605      00
 12606              	.LASF159:
 12607 0235 73656E64 		.ascii	"sendMessageEnd\000"
 12607      4D657373 
 12607      61676545 
 12607      6E6400
 12608              	.LASF254:
 12609 0244 70726573 		.ascii	"presetNumberToLoad\000"
 12609      65744E75 
 12609      6D626572 
 12609      546F4C6F 
 12609      616400
 12610              	.LASF264:
 12611 0257 766F6963 		.ascii	"voice\000"
 12611      6500
 12612              	.LASF209:
 12613 025d 73747269 		.ascii	"strings\000"
 12613      6E677300 
 12614              	.LASF8:
 12615 0265 6C6F6E67 		.ascii	"long int\000"
 12615      20696E74 
 12615      00
 12616              	.LASF167:
 12617 026e 63757272 		.ascii	"currentFloat\000"
 12617      656E7446 
 12617      6C6F6174 
 12617      00
 12618              	.LASF255:
 12619 027b 70726573 		.ascii	"presetLoadedResponse\000"
 12619      65744C6F 
 12619      61646564 
 12619      52657370 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 267


 12619      6F6E7365 
 12620              	.LASF157:
 12621 0290 70726573 		.ascii	"presetNumberToWrite\000"
 12621      65744E75 
 12621      6D626572 
 12621      546F5772 
 12621      69746500 
 12622              	.LASF94:
 12623 02a4 77686963 		.ascii	"whichPresetToStoreName\000"
 12623      68507265 
 12623      73657454 
 12623      6F53746F 
 12623      72654E61 
 12624              	.LASF253:
 12625 02bb 70726573 		.ascii	"presetNamesArray\000"
 12625      65744E61 
 12625      6D657341 
 12625      72726179 
 12625      00
 12626              	.LASF77:
 12627 02cc 6D61696E 		.ascii	"main\000"
 12627      00
 12628              	.LASF277:
 12629 02d1 70726576 		.ascii	"prevStringPitchBend\000"
 12629      53747269 
 12629      6E675069 
 12629      74636842 
 12629      656E6400 
 12630              	.LASF118:
 12631 02e5 4D494449 		.ascii	"MIDInoteNum\000"
 12631      6E6F7465 
 12631      4E756D00 
 12632              	.LASF126:
 12633 02f1 73656E64 		.ascii	"sendMIDIAllNotesOff\000"
 12633      4D494449 
 12633      416C6C4E 
 12633      6F746573 
 12633      4F666600 
 12634              	.LASF46:
 12635 0305 5365636F 		.ascii	"SecondLine\000"
 12635      6E644C69 
 12635      6E6500
 12636              	.LASF257:
 12637 0310 66726574 		.ascii	"fretScaling\000"
 12637      5363616C 
 12637      696E6700 
 12638              	.LASF166:
 12639 031c 73656E64 		.ascii	"sendKnobs\000"
 12639      4B6E6F62 
 12639      7300
 12640              	.LASF51:
 12641 0326 70726573 		.ascii	"presetArraySectionState\000"
 12641      65744172 
 12641      72617953 
 12641      65637469 
 12641      6F6E5374 
 12642              	.LASF231:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 268


 12643 033e 6B6E6F62 		.ascii	"knobs\000"
 12643      7300
 12644              	.LASF153:
 12645 0344 73797365 		.ascii	"sysexPointer\000"
 12645      78506F69 
 12645      6E746572 
 12645      00
 12646              	.LASF68:
 12647 0351 6F6D416C 		.ascii	"omAlpha\000"
 12647      70686100 
 12648              	.LASF82:
 12649 0359 73747269 		.ascii	"stringStartLoc\000"
 12649      6E675374 
 12649      6172744C 
 12649      6F6300
 12650              	.LASF0:
 12651 0368 7369676E 		.ascii	"signed char\000"
 12651      65642063 
 12651      68617200 
 12652              	.LASF14:
 12653 0374 75696E74 		.ascii	"uint8_t\000"
 12653      385F7400 
 12654              	.LASF29:
 12655 037c 776C456E 		.ascii	"wlEndAddr\000"
 12655      64416464 
 12655      7200
 12656              	.LASF138:
 12657 0386 5553425F 		.ascii	"USB_callbackLocalMidiEvent\000"
 12657      63616C6C 
 12657      6261636B 
 12657      4C6F6361 
 12657      6C4D6964 
 12658              	.LASF110:
 12659 03a1 73706973 		.ascii	"spis_1_ss\000"
 12659      5F315F73 
 12659      7300
 12660              	.LASF41:
 12661 03ab 43595F45 		.ascii	"CY_EM_EEPROM_BAD_DATA\000"
 12661      4D5F4545 
 12661      50524F4D 
 12661      5F424144 
 12661      5F444154 
 12662              	.LASF50:
 12663 03c1 5F4F4C45 		.ascii	"_OLEDLine\000"
 12663      444C696E 
 12663      6500
 12664              	.LASF168:
 12665 03cb 6D617043 		.ascii	"mapCount\000"
 12665      6F756E74 
 12665      00
 12666              	.LASF135:
 12667 03d4 74656D70 		.ascii	"tempIntVersion\000"
 12667      496E7456 
 12667      65727369 
 12667      6F6E00
 12668              	.LASF258:
 12669 03e3 70656461 		.ascii	"pedalRatios\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 269


 12669      6C526174 
 12669      696F7300 
 12670              	.LASF1:
 12671 03ef 756E7369 		.ascii	"unsigned char\000"
 12671      676E6564 
 12671      20636861 
 12671      7200
 12672              	.LASF173:
 12673 03fd 76616C43 		.ascii	"valCheck\000"
 12673      6865636B 
 12673      00
 12674              	.LASF130:
 12675 0406 76616C73 		.ascii	"valsStart\000"
 12675      53746172 
 12675      7400
 12676              	.LASF79:
 12677 0410 636F7065 		.ascii	"coped\000"
 12677      6400
 12678              	.LASF199:
 12679 0416 72783143 		.ascii	"rx1Channel\000"
 12679      68616E6E 
 12679      656C00
 12680              	.LASF81:
 12681 0421 70656461 		.ascii	"pedalStartLoc\000"
 12681      6C537461 
 12681      72744C6F 
 12681      6300
 12682              	.LASF215:
 12683 042f 6E657744 		.ascii	"newDataFlag\000"
 12683      61746146 
 12683      6C616700 
 12684              	.LASF283:
 12685 043b 73747269 		.ascii	"stringOctave\000"
 12685      6E674F63 
 12685      74617665 
 12685      00
 12686              	.LASF108:
 12687 0448 5553425F 		.ascii	"USB_service\000"
 12687      73657276 
 12687      69636500 
 12688              	.LASF170:
 12689 0454 6D617043 		.ascii	"mapCountExpectation\000"
 12689      6F756E74 
 12689      45787065 
 12689      63746174 
 12689      696F6E00 
 12690              	.LASF62:
 12691 0468 74656D70 		.ascii	"tempmax\000"
 12691      6D617800 
 12692              	.LASF129:
 12693 0470 73746F70 		.ascii	"stoppingPoint\000"
 12693      70696E67 
 12693      506F696E 
 12693      7400
 12694              	.LASF69:
 12695 047e 76616C75 		.ascii	"value\000"
 12695      6500
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 270


 12696              	.LASF259:
 12697 0484 6C617374 		.ascii	"last_mux\000"
 12697      5F6D7578 
 12697      00
 12698              	.LASF268:
 12699 048d 656E636F 		.ascii	"encoderVal\000"
 12699      64657256 
 12699      616C00
 12700              	.LASF121:
 12701 0498 70726573 		.ascii	"pressure\000"
 12701      73757265 
 12701      00
 12702              	.LASF290:
 12703 04a1 70726573 		.ascii	"presetAlreadyDisplayed\000"
 12703      6574416C 
 12703      72656164 
 12703      79446973 
 12703      706C6179 
 12704              	.LASF53:
 12705 04b8 6D616372 		.ascii	"macroNames\000"
 12705      6F4E616D 
 12705      657300
 12706              	.LASF210:
 12707 04c3 70726576 		.ascii	"prevStrings\000"
 12707      53747269 
 12707      6E677300 
 12708              	.LASF24:
 12709 04cf 63686172 		.ascii	"char\000"
 12709      00
 12710              	.LASF141:
 12711 04d4 65657072 		.ascii	"eepromArray\000"
 12711      6F6D4172 
 12711      72617900 
 12712              	.LASF197:
 12713 04e0 63757272 		.ascii	"currentCopedent\000"
 12713      656E7443 
 12713      6F706564 
 12713      656E7400 
 12714              	.LASF193:
 12715 04f0 72617741 		.ascii	"rawAngle\000"
 12715      6E676C65 
 12715      00
 12716              	.LASF63:
 12717 04f9 4C454146 		.ascii	"LEAF_clip\000"
 12717      5F636C69 
 12717      7000
 12718              	.LASF97:
 12719 0503 446D6154 		.ascii	"DmaTxConfiguration\000"
 12719      78436F6E 
 12719      66696775 
 12719      72617469 
 12719      6F6E00
 12720              	.LASF261:
 12721 0516 6E65636B 		.ascii	"neck\000"
 12721      00
 12722              	.LASF5:
 12723 051b 5F5F7569 		.ascii	"__uint16_t\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 271


 12723      6E743136 
 12723      5F7400
 12724              	.LASF107:
 12725 0526 63686563 		.ascii	"checkUSB_Vbus\000"
 12725      6B555342 
 12725      5F566275 
 12725      7300
 12726              	.LASF236:
 12727 0534 65657072 		.ascii	"eeprom_cnt\000"
 12727      6F6D5F63 
 12727      6E7400
 12728              	.LASF145:
 12729 053f 5553425F 		.ascii	"USB_midi_out_ep\000"
 12729      6D696469 
 12729      5F6F7574 
 12729      5F657000 
 12730              	.LASF87:
 12731 054f 74656D70 		.ascii	"tempPedal\000"
 12731      50656461 
 12731      6C00
 12732              	.LASF105:
 12733 0559 4932435F 		.ascii	"I2C_reset\000"
 12733      72657365 
 12733      7400
 12734              	.LASF269:
 12735 0563 656E636F 		.ascii	"encoderNum\000"
 12735      6465724E 
 12735      756D00
 12736              	.LASF266:
 12737 056e 6F637431 		.ascii	"oct1Up\000"
 12737      557000
 12738              	.LASF44:
 12739 0575 75696E74 		.ascii	"uint\000"
 12739      00
 12740              	.LASF195:
 12741 057a 6D696469 		.ascii	"midiOverflow\000"
 12741      4F766572 
 12741      666C6F77 
 12741      00
 12742              	.LASF74:
 12743 0587 6275726E 		.ascii	"burnInitialPedalZeroPositions\000"
 12743      496E6974 
 12743      69616C50 
 12743      6564616C 
 12743      5A65726F 
 12744              	.LASF120:
 12745 05a5 73656E64 		.ascii	"sendMIDIPolyKeyPressure\000"
 12745      4D494449 
 12745      506F6C79 
 12745      4B657950 
 12745      72657373 
 12746              	.LASF134:
 12747 05bd 73747269 		.ascii	"stringChange\000"
 12747      6E674368 
 12747      616E6765 
 12747      00
 12748              	.LASF91:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 272


 12749 05ca 636F6D70 		.ascii	"computerMIDIOffset\000"
 12749      75746572 
 12749      4D494449 
 12749      4F666673 
 12749      657400
 12750              	.LASF122:
 12751 05dd 73656E64 		.ascii	"sendMIDIControlChange\000"
 12751      4D494449 
 12751      436F6E74 
 12751      726F6C43 
 12751      68616E67 
 12752              	.LASF214:
 12753 05f3 73706943 		.ascii	"spiCounter\000"
 12753      6F756E74 
 12753      657200
 12754              	.LASF39:
 12755 05fe 43595F45 		.ascii	"CY_EM_EEPROM_BAD_PARAM\000"
 12755      4D5F4545 
 12755      50524F4D 
 12755      5F424144 
 12755      5F504152 
 12756              	.LASF300:
 12757 0615 73797365 		.ascii	"sysexPointerMask\000"
 12757      78506F69 
 12757      6E746572 
 12757      4D61736B 
 12757      00
 12758              	.LASF149:
 12759 0626 4932435F 		.ascii	"I2C_1_initVar\000"
 12759      315F696E 
 12759      69745661 
 12759      7200
 12760              	.LASF52:
 12761 0634 70726573 		.ascii	"presetName\000"
 12761      65744E61 
 12761      6D6500
 12762              	.LASF155:
 12763 063f 70617273 		.ascii	"parsingSysex\000"
 12763      696E6753 
 12763      79736578 
 12763      00
 12764              	.LASF186:
 12765 064c 72657475 		.ascii	"returnedData\000"
 12765      726E6564 
 12765      44617461 
 12765      00
 12766              	.LASF48:
 12767 0659 466F7572 		.ascii	"FourthLine\000"
 12767      74684C69 
 12767      6E6500
 12768              	.LASF245:
 12769 0664 766F6C75 		.ascii	"volumePedal\000"
 12769      6D655065 
 12769      64616C00 
 12770              	.LASF207:
 12771 0670 72784275 		.ascii	"rxBufferPluck\000"
 12771      66666572 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 273


 12771      506C7563 
 12771      6B00
 12772              	.LASF275:
 12773 067e 636F7065 		.ascii	"copedent\000"
 12773      64656E74 
 12773      00
 12774              	.LASF248:
 12775 0687 70656461 		.ascii	"pedals8bit\000"
 12775      6C733862 
 12775      697400
 12776              	.LASF232:
 12777 0692 70726576 		.ascii	"prevKnobs\000"
 12777      4B6E6F62 
 12777      7300
 12778              	.LASF227:
 12779 069c 6D795370 		.ascii	"mySpiCounter\000"
 12779      69436F75 
 12779      6E746572 
 12779      00
 12780              	.LASF163:
 12781 06a9 73797365 		.ascii	"sysexMessageInProgress\000"
 12781      784D6573 
 12781      73616765 
 12781      496E5072 
 12781      6F677265 
 12782              	.LASF116:
 12783 06c0 43434576 		.ascii	"CCEvent\000"
 12783      656E7400 
 12784              	.LASF127:
 12785 06c8 70617273 		.ascii	"parseSysex\000"
 12785      65537973 
 12785      657800
 12786              	.LASF303:
 12787 06d3 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\dev\\Electrosteel_embedded\\"
 12787      73657273 
 12787      5C4A6566 
 12787      66536E79 
 12787      6465725C 
 12788 0701 50534F43 		.ascii	"PSOC5_electrosteel_stringsensors_newpcb_brain\\CE21"
 12788      355F656C 
 12788      65637472 
 12788      6F737465 
 12788      656C5F73 
 12789 0733 30353134 		.ascii	"0514_PSOC3_5_Thermistor.cydsn\000"
 12789      5F50534F 
 12789      43335F35 
 12789      5F546865 
 12789      726D6973 
 12790              	.LASF281:
 12791 0751 696E7653 		.ascii	"invStringMappedPositions\000"
 12791      7472696E 
 12791      674D6170 
 12791      70656450 
 12791      6F736974 
 12792              	.LASF225:
 12793 076a 696E7075 		.ascii	"inputData\000"
 12793      74446174 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 274


 12793      6100
 12794              	.LASF66:
 12795 0774 4C454146 		.ascii	"LEAF_interpolation_linear\000"
 12795      5F696E74 
 12795      6572706F 
 12795      6C617469 
 12795      6F6E5F6C 
 12796              	.LASF295:
 12797 078e 70726576 		.ascii	"prevNotes\000"
 12797      4E6F7465 
 12797      7300
 12798              	.LASF37:
 12799 0798 63795F73 		.ascii	"cy_stc_eeprom_context_t\000"
 12799      74635F65 
 12799      6570726F 
 12799      6D5F636F 
 12799      6E746578 
 12800              	.LASF10:
 12801 07b0 6C6F6E67 		.ascii	"long unsigned int\000"
 12801      20756E73 
 12801      69676E65 
 12801      6420696E 
 12801      7400
 12802              	.LASF106:
 12803 07c2 64697370 		.ascii	"displayCurrentPresetName\000"
 12803      6C617943 
 12803      75727265 
 12803      6E745072 
 12803      65736574 
 12804              	.LASF148:
 12805 07db 456D5F45 		.ascii	"Em_EEPROM_em_EepromStorage\000"
 12805      4550524F 
 12805      4D5F656D 
 12805      5F456570 
 12805      726F6D53 
 12806              	.LASF235:
 12807 07f6 65657072 		.ascii	"eepromReturnValue\000"
 12807      6F6D5265 
 12807      7475726E 
 12807      56616C75 
 12807      6500
 12808              	.LASF85:
 12809 0808 73746174 		.ascii	"status\000"
 12809      757300
 12810              	.LASF239:
 12811 080f 73656E64 		.ascii	"send_it\000"
 12811      5F697400 
 12812              	.LASF184:
 12813 0817 6C696E65 		.ascii	"linearPotValue32Bit\000"
 12813      6172506F 
 12813      7456616C 
 12813      75653332 
 12813      42697400 
 12814              	.LASF119:
 12815 082b 6368616E 		.ascii	"channel\000"
 12815      6E656C00 
 12816              	.LASF99:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 275


 12817 0833 4932435F 		.ascii	"I2C_MasterWriteBlocking\000"
 12817      4D617374 
 12817      65725772 
 12817      69746542 
 12817      6C6F636B 
 12818              	.LASF190:
 12819 084b 616E676C 		.ascii	"angle\000"
 12819      6500
 12820              	.LASF175:
 12821 0851 6E756D53 		.ascii	"numStrings\000"
 12821      7472696E 
 12821      677300
 12822              	.LASF42:
 12823 085c 43595F45 		.ascii	"CY_EM_EEPROM_WRITE_FAIL\000"
 12823      4D5F4545 
 12823      50524F4D 
 12823      5F575249 
 12823      54455F46 
 12824              	.LASF72:
 12825 0874 6F737461 		.ascii	"ostart\000"
 12825      727400
 12826              	.LASF252:
 12827 087b 63757272 		.ascii	"currentPresetSelection\000"
 12827      656E7450 
 12827      72657365 
 12827      7453656C 
 12827      65637469 
 12828              	.LASF286:
 12829 0892 6F70656E 		.ascii	"openStringMIDI_Int\000"
 12829      53747269 
 12829      6E674D49 
 12829      44495F49 
 12829      6E7400
 12830              	.LASF71:
 12831 08a5 6973746F 		.ascii	"istop\000"
 12831      7000
 12832              	.LASF144:
 12833 08ab 5553425F 		.ascii	"USB_midiInBuffer\000"
 12833      6D696469 
 12833      496E4275 
 12833      66666572 
 12833      00
 12834              	.LASF301:
 12835 08bc 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 12835      43313120 
 12835      352E342E 
 12835      31203230 
 12835      31363036 
 12836 08ef 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 12836      20726576 
 12836      6973696F 
 12836      6E203233 
 12836      37373135 
 12837 0922 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 12837      66756E63 
 12837      74696F6E 
 12837      2D736563 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 276


 12837      74696F6E 
 12838              	.LASF117:
 12839 094a 73656E64 		.ascii	"sendMIDINoteOn\000"
 12839      4D494449 
 12839      4E6F7465 
 12839      4F6E00
 12840              	.LASF260:
 12841 0959 6D61696E 		.ascii	"main_counter\000"
 12841      5F636F75 
 12841      6E746572 
 12841      00
 12842              	.LASF45:
 12843 0966 46697273 		.ascii	"FirstLine\000"
 12843      744C696E 
 12843      6500
 12844              	.LASF262:
 12845 0970 6475616C 		.ascii	"dualSlider\000"
 12845      536C6964 
 12845      657200
 12846              	.LASF60:
 12847 097b 72657374 		.ascii	"restartSystemCheck\000"
 12847      61727453 
 12847      79737465 
 12847      6D436865 
 12847      636B00
 12848              	.LASF180:
 12849 098e 5553425F 		.ascii	"USB_check_flag\000"
 12849      63686563 
 12849      6B5F666C 
 12849      616700
 12850              	.LASF161:
 12851 099d 6D657373 		.ascii	"messageArraySendCount\000"
 12851      61676541 
 12851      72726179 
 12851      53656E64 
 12851      436F756E 
 12852              	.LASF9:
 12853 09b3 5F5F7569 		.ascii	"__uint32_t\000"
 12853      6E743332 
 12853      5F7400
 12854              	.LASF11:
 12855 09be 6C6F6E67 		.ascii	"long long int\000"
 12855      206C6F6E 
 12855      6720696E 
 12855      7400
 12856              	.LASF185:
 12857 09cc 636F756E 		.ascii	"counter\000"
 12857      74657200 
 12858              	.LASF284:
 12859 09d4 73747269 		.ascii	"stringPitch\000"
 12859      6E675069 
 12859      74636800 
 12860              	.LASF201:
 12861 09e0 72783154 		.ascii	"rx1TD\000"
 12861      4400
 12862              	.LASF288:
 12863 09e6 6D61696E 		.ascii	"mainOLEDWaitingToSend\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 277


 12863      4F4C4544 
 12863      57616974 
 12863      696E6754 
 12863      6F53656E 
 12864              	.LASF84:
 12865 09fc 74656D70 		.ascii	"tempIntLow\000"
 12865      496E744C 
 12865      6F7700
 12866              	.LASF61:
 12867 0a07 74656D70 		.ascii	"tempmin\000"
 12867      6D696E00 
 12868              	.LASF35:
 12869 0a0f 626C6F63 		.ascii	"blockingWrite\000"
 12869      6B696E67 
 12869      57726974 
 12869      6500
 12870              	.LASF205:
 12871 0a1d 72783343 		.ascii	"rx3Channel\000"
 12871      68616E6E 
 12871      656C00
 12872              	.LASF23:
 12873 0a28 646F7562 		.ascii	"double\000"
 12873      6C6500
 12874              	.LASF302:
 12875 0a2f 6D61696E 		.ascii	"main.c\000"
 12875      2E6300
 12876              	.LASF270:
 12877 0a36 62757474 		.ascii	"button1Up\000"
 12877      6F6E3155 
 12877      7000
 12878              	.LASF109:
 12879 0a40 6C6F6732 		.ascii	"log2f_approx\000"
 12879      665F6170 
 12879      70726F78 
 12879      00
 12880              	.LASF150:
 12881 0a4d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 12881      52784275 
 12881      66666572 
 12881      00
 12882              	.LASF73:
 12883 0a5a 6F73746F 		.ascii	"ostop\000"
 12883      7000
 12884              	.LASF103:
 12885 0a60 74696D65 		.ascii	"timeout\000"
 12885      6F757400 
 12886              	.LASF22:
 12887 0a68 666C6F61 		.ascii	"float\000"
 12887      7400
 12888              	.LASF247:
 12889 0a6e 70726576 		.ascii	"prev_processed_pedals\000"
 12889      5F70726F 
 12889      63657373 
 12889      65645F70 
 12889      6564616C 
 12890              	.LASF233:
 12891 0a84 53504932 		.ascii	"SPI2started\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 278


 12891      73746172 
 12891      74656400 
 12892              	.LASF221:
 12893 0a90 63757272 		.ascii	"currentPluckBuffer\000"
 12893      656E7450 
 12893      6C75636B 
 12893      42756666 
 12893      657200
 12894              	.LASF90:
 12895 0aa3 6261724D 		.ascii	"barMIDI\000"
 12895      49444900 
 12896              	.LASF125:
 12897 0aab 73656E64 		.ascii	"sendMIDIPitchBend\000"
 12897      4D494449 
 12897      50697463 
 12897      6842656E 
 12897      6400
 12898              	.LASF13:
 12899 0abd 756E7369 		.ascii	"unsigned int\000"
 12899      676E6564 
 12899      20696E74 
 12899      00
 12900              	.LASF154:
 12901 0aca 72656365 		.ascii	"receivingSysex\000"
 12901      6976696E 
 12901      67537973 
 12901      657800
 12902              	.LASF139:
 12903 0ad9 6361626C 		.ascii	"cable\000"
 12903      6500
 12904              	.LASF59:
 12905 0adf 56627573 		.ascii	"Vbus_function\000"
 12905      5F66756E 
 12905      6374696F 
 12905      6E00
 12906              	.LASF113:
 12907 0aed 76656C6F 		.ascii	"velocity\000"
 12907      63697479 
 12907      00
 12908              	.LASF296:
 12909 0af6 63686563 		.ascii	"checkStatus\000"
 12909      6B537461 
 12909      74757300 
 12910              	.LASF25:
 12911 0b02 63797374 		.ascii	"cystatus\000"
 12911      61747573 
 12911      00
 12912              	.LASF230:
 12913 0b0b 6261725F 		.ascii	"bar_index\000"
 12913      696E6465 
 12913      7800
 12914              	.LASF112:
 12915 0b15 73747269 		.ascii	"string\000"
 12915      6E6700
 12916              	.LASF228:
 12917 0b1c 6F666673 		.ascii	"offsetErrorCount\000"
 12917      65744572 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 279


 12917      726F7243 
 12917      6F756E74 
 12917      00
 12918              	.LASF250:
 12919 0b2d 70726F63 		.ascii	"processed_volumePedal\000"
 12919      65737365 
 12919      645F766F 
 12919      6C756D65 
 12919      50656461 
 12920              	.LASF88:
 12921 0b43 74656D70 		.ascii	"tempMIDI\000"
 12921      4D494449 
 12921      00
 12922              	.LASF208:
 12923 0b4c 72784275 		.ascii	"rxBufferBar\000"
 12923      66666572 
 12923      42617200 
 12924              	.LASF203:
 12925 0b58 74784368 		.ascii	"txChannel\000"
 12925      616E6E65 
 12925      6C00
 12926              	.LASF246:
 12927 0b62 70726F63 		.ascii	"processed_pedals\000"
 12927      65737365 
 12927      645F7065 
 12927      64616C73 
 12927      00
 12928              	.LASF279:
 12929 0b73 6F70656E 		.ascii	"openStringFrequencies\000"
 12929      53747269 
 12929      6E674672 
 12929      65717565 
 12929      6E636965 
 12930              	.LASF191:
 12931 0b89 70726576 		.ascii	"prevAngle\000"
 12931      416E676C 
 12931      6500
 12932              	.LASF217:
 12933 0b93 706C7563 		.ascii	"pluck_index\000"
 12933      6B5F696E 
 12933      64657800 
 12934              	.LASF27:
 12935 0b9f 6C6F6E67 		.ascii	"long double\000"
 12935      20646F75 
 12935      626C6500 
 12936              	.LASF104:
 12937 0bab 4932435F 		.ascii	"I2C_MasterReadBlocking\000"
 12937      4D617374 
 12937      65725265 
 12937      6164426C 
 12937      6F636B69 
 12938              	.LASF222:
 12939 0bc2 63757272 		.ascii	"currentBarBuffer\000"
 12939      656E7442 
 12939      61724275 
 12939      66666572 
 12939      00
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 280


 12940              	.LASF192:
 12941 0bd3 4144435F 		.ascii	"ADC_values\000"
 12941      76616C75 
 12941      657300
 12942              	.LASF65:
 12943 0bde 66746F6D 		.ascii	"ftom\000"
 12943      00
 12944              	.LASF263:
 12945 0be3 656E7465 		.ascii	"enterUp\000"
 12945      72557000 
 12946              	.LASF224:
 12947 0beb 53504931 		.ascii	"SPI1ErrorCount\000"
 12947      4572726F 
 12947      72436F75 
 12947      6E7400
 12948              	.LASF194:
 12949 0bfa 6D696469 		.ascii	"midiSent\000"
 12949      53656E74 
 12949      00
 12950              	.LASF140:
 12951 0c03 6D696469 		.ascii	"midiMsg\000"
 12951      4D736700 
 12952              	.LASF292:
 12953 0c0b 63757272 		.ascii	"currentNeck\000"
 12953      656E744E 
 12953      65636B00 
 12954              	.LASF293:
 12955 0c17 65646974 		.ascii	"editMode\000"
 12955      4D6F6465 
 12955      00
 12956              	.LASF12:
 12957 0c20 6C6F6E67 		.ascii	"long long unsigned int\000"
 12957      206C6F6E 
 12957      6720756E 
 12957      7369676E 
 12957      65642069 
 12958              	.LASF16:
 12959 0c37 75696E74 		.ascii	"uint16_t\000"
 12959      31365F74 
 12959      00
 12960              	.LASF136:
 12961 0c40 74656D70 		.ascii	"tempHigh\000"
 12961      48696768 
 12961      00
 12962              	.LASF174:
 12963 0c49 74657374 		.ascii	"testVal\000"
 12963      56616C00 
 12964              	.LASF202:
 12965 0c51 72783254 		.ascii	"rx2TD\000"
 12965      4400
 12966              	.LASF304:
 12967 0c57 62726561 		.ascii	"breakFloat\000"
 12967      6B466C6F 
 12967      617400
 12968              	.LASF297:
 12969 0c62 63686563 		.ascii	"checkBase\000"
 12969      6B426173 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 281


 12969      6500
 12970              	.LASF58:
 12971 0c6c 73706973 		.ascii	"spis_2_ss\000"
 12971      5F325F73 
 12971      7300
 12972              	.LASF271:
 12973 0c76 62757474 		.ascii	"button2Up\000"
 12973      6F6E3255 
 12973      7000
 12974              	.LASF213:
 12975 0c80 616D4865 		.ascii	"amHere\000"
 12975      726500
 12976              	.LASF234:
 12977 0c87 61727261 		.ascii	"array\000"
 12977      7900
 12978              	.LASF93:
 12979 0c8d 7363616C 		.ascii	"scaledMIDI\000"
 12979      65644D49 
 12979      444900
 12980              	.LASF26:
 12981 0c98 72656738 		.ascii	"reg8\000"
 12981      00
 12982              	.LASF158:
 12983 0c9d 636F7065 		.ascii	"copedentNumberToWrite\000"
 12983      64656E74 
 12983      4E756D62 
 12983      6572546F 
 12983      57726974 
 12984              	.LASF55:
 12985 0cb3 6D617043 		.ascii	"mapCountNext\000"
 12985      6F756E74 
 12985      4E657874 
 12985      00
 12986              	.LASF219:
 12987 0cc0 73706943 		.ascii	"spiCounter2\000"
 12987      6F756E74 
 12987      65723200 
 12988              	.LASF114:
 12989 0ccc 74656D70 		.ascii	"tempVel\000"
 12989      56656C00 
 12990              	.LASF176:
 12991 0cd4 75736241 		.ascii	"usbActivityCounter\000"
 12991      63746976 
 12991      69747943 
 12991      6F756E74 
 12991      657200
 12992              	.LASF244:
 12993 0ce7 64656164 		.ascii	"deadzone\000"
 12993      7A6F6E65 
 12993      00
 12994              	.LASF172:
 12995 0cf0 70617273 		.ascii	"parseThatMF\000"
 12995      65546861 
 12995      744D4600 
 12996              	.LASF3:
 12997 0cfc 5F5F696E 		.ascii	"__int16_t\000"
 12997      7431365F 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 282


 12997      7400
 12998              	.LASF54:
 12999 0d06 696E6974 		.ascii	"initialVals\000"
 12999      69616C56 
 12999      616C7300 
 13000              	.LASF179:
 13001 0d12 5553425F 		.ascii	"USB_active\000"
 13001      61637469 
 13001      766500
 13002              	.LASF298:
 13003 0d1d 5350495F 		.ascii	"SPI_errors\000"
 13003      6572726F 
 13003      727300
 13004              	.LASF152:
 13005 0d28 73797365 		.ascii	"sysexBuffer\000"
 13005      78427566 
 13005      66657200 
 13006              	.LASF164:
 13007 0d34 62756643 		.ascii	"bufCount\000"
 13007      6F756E74 
 13007      00
 13008              	.LASF223:
 13009 0d3d 706C7563 		.ascii	"pluckErrorCount\000"
 13009      6B457272 
 13009      6F72436F 
 13009      756E7400 
 13010              	.LASF132:
 13011 0d4d 74656D70 		.ascii	"tempChar\000"
 13011      43686172 
 13011      00
 13012              	.LASF287:
 13013 0d56 4F4C4544 		.ascii	"OLEDcount\000"
 13013      636F756E 
 13013      7400
 13014              	.LASF75:
 13015 0d60 63616C69 		.ascii	"calibratePedals\000"
 13015      62726174 
 13015      65506564 
 13015      616C7300 
 13016              	.LASF274:
 13017 0d70 70617463 		.ascii	"patchNum\000"
 13017      684E756D 
 13017      00
 13018              	.LASF291:
 13019 0d79 70656461 		.ascii	"pedals_float\000"
 13019      6C735F66 
 13019      6C6F6174 
 13019      00
 13020              	.LASF19:
 13021 0d86 75696E74 		.ascii	"uint8\000"
 13021      3800
 13022              	.LASF242:
 13023 0d8c 70656461 		.ascii	"pedals_low\000"
 13023      6C735F6C 
 13023      6F7700
 13024              	.LASF92:
 13025 0d97 70697463 		.ascii	"pitchBendAmount\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 283


 13025      6842656E 
 13025      64416D6F 
 13025      756E7400 
 13026              	.LASF216:
 13027 0da7 70726576 		.ascii	"prevOctave\000"
 13027      4F637461 
 13027      766500
 13028              	.LASF4:
 13029 0db2 73686F72 		.ascii	"short int\000"
 13029      7420696E 
 13029      7400
 13030              	.LASF162:
 13031 0dbc 6D657373 		.ascii	"messageArraySize\000"
 13031      61676541 
 13031      72726179 
 13031      53697A65 
 13031      00
 13032              	.LASF251:
 13033 0dcd 66726574 		.ascii	"fretMeasurements\000"
 13033      4D656173 
 13033      7572656D 
 13033      656E7473 
 13033      00
 13034              	.LASF102:
 13035 0dde 6D6F6465 		.ascii	"mode\000"
 13035      00
 13036              	.LASF96:
 13037 0de3 62756666 		.ascii	"bufferPointer\000"
 13037      6572506F 
 13037      696E7465 
 13037      7200
 13038              	.LASF285:
 13039 0df1 73747269 		.ascii	"stringMIDI\000"
 13039      6E674D49 
 13039      444900
 13040              	.LASF89:
 13041 0dfc 6F70656E 		.ascii	"openStringMIDI\000"
 13041      53747269 
 13041      6E674D49 
 13041      444900
 13042              	.LASF15:
 13043 0e0b 696E7431 		.ascii	"int16_t\000"
 13043      365F7400 
 13044              	.LASF133:
 13045 0e13 70656461 		.ascii	"pedalToWrite\000"
 13045      6C546F57 
 13045      72697465 
 13045      00
 13046              	.LASF32:
 13047 0e20 65657072 		.ascii	"eepromSize\000"
 13047      6F6D5369 
 13047      7A6500
 13048              	.LASF218:
 13049 0e2b 616D4865 		.ascii	"amHere2\000"
 13049      72653200 
 13050              	.LASF280:
 13051 0e33 73747269 		.ascii	"stringMappedPositions\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 284


 13051      6E674D61 
 13051      70706564 
 13051      506F7369 
 13051      74696F6E 
 13052              	.LASF188:
 13053 0e49 70726576 		.ascii	"previousButtons\000"
 13053      696F7573 
 13053      42757474 
 13053      6F6E7300 
 13054              	.LASF33:
 13055 0e59 77656172 		.ascii	"wearLevelingFactor\000"
 13055      4C657665 
 13055      6C696E67 
 13055      46616374 
 13055      6F7200
 13056              	.LASF142:
 13057 0e6c 5553425F 		.ascii	"USB_midiInPointer\000"
 13057      6D696469 
 13057      496E506F 
 13057      696E7465 
 13057      7200
 13058              	.LASF294:
 13059 0e7e 63616C69 		.ascii	"calibrationMode\000"
 13059      62726174 
 13059      696F6E4D 
 13059      6F646500 
 13060              	.LASF100:
 13061 0e8e 69324341 		.ascii	"i2CAddr\000"
 13061      64647200 
 13062              	.LASF181:
 13063 0e96 696E4275 		.ascii	"inBuffer\000"
 13063      66666572 
 13063      00
 13064              	.LASF212:
 13065 0e9f 6D617853 		.ascii	"maxStrings\000"
 13065      7472696E 
 13065      677300
 13066              	.LASF80:
 13067 0eaa 6C657474 		.ascii	"letter\000"
 13067      657200
 13068              	.LASF146:
 13069 0eb1 5553425F 		.ascii	"USB_midiOutBuffer\000"
 13069      6D696469 
 13069      4F757442 
 13069      75666665 
 13069      7200
 13070              	.LASF196:
 13071 0ec3 6D616372 		.ascii	"macroKnobValues\000"
 13071      6F4B6E6F 
 13071      6256616C 
 13071      75657300 
 13072              	.LASF241:
 13073 0ed3 6932635F 		.ascii	"i2c_skipped\000"
 13073      736B6970 
 13073      70656400 
 13074              	.LASF226:
 13075 0edf 73706941 		.ascii	"spiAdjusted\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 285


 13075      646A7573 
 13075      74656400 
 13076              	.LASF200:
 13077 0eeb 72783243 		.ascii	"rx2Channel\000"
 13077      68616E6E 
 13077      656C00
 13078              	.LASF143:
 13079 0ef6 5553425F 		.ascii	"USB_midi_in_ep\000"
 13079      6D696469 
 13079      5F696E5F 
 13079      657000
 13080              	.LASF98:
 13081 0f05 446D6152 		.ascii	"DmaRxConfiguration\000"
 13081      78436F6E 
 13081      66696775 
 13081      72617469 
 13081      6F6E00
 13082              	.LASF18:
 13083 0f18 75696E74 		.ascii	"uint32_t\000"
 13083      33325F74 
 13083      00
 13084              	.LASF273:
 13085 0f21 62757474 		.ascii	"button4Up\000"
 13085      6F6E3455 
 13085      7000
 13086              	.LASF178:
 13087 0f2b 70726576 		.ascii	"prevVBUS\000"
 13087      56425553 
 13087      00
 13088              	.LASF206:
 13089 0f34 72783354 		.ascii	"rx3TD\000"
 13089      4400
 13090              	.LASF177:
 13091 0f3a 63757272 		.ascii	"currentVBUS\000"
 13091      656E7456 
 13091      42555300 
 13092              	.LASF267:
 13093 0f46 6F637434 		.ascii	"oct4Up\000"
 13093      557000
 13094              	.LASF305:
 13095 0f4d 63616C63 		.ascii	"calculatePedalRatios\000"
 13095      756C6174 
 13095      65506564 
 13095      616C5261 
 13095      74696F73 
 13096              	.LASF272:
 13097 0f62 62757474 		.ascii	"button3Up\000"
 13097      6F6E3355 
 13097      7000
 13098              	.LASF6:
 13099 0f6c 73686F72 		.ascii	"short unsigned int\000"
 13099      7420756E 
 13099      7369676E 
 13099      65642069 
 13099      6E7400
 13100              	.LASF56:
 13101 0f7f 6D617070 		.ascii	"mapping\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccnGp09d.s 			page 286


 13101      696E6700 
 13102              	.LASF115:
 13103 0f87 6E6F7465 		.ascii	"noteToSend\000"
 13103      546F5365 
 13103      6E6400
 13104              	.LASF204:
 13105 0f92 74785444 		.ascii	"txTD\000"
 13105      00
 13106              	.LASF7:
 13107 0f97 5F5F696E 		.ascii	"__int32_t\000"
 13107      7433325F 
 13107      7400
 13108              	.LASF211:
 13109 0fa1 70726576 		.ascii	"prevBar\000"
 13109      42617200 
 13110              	.LASF183:
 13111 0fa9 6D79496E 		.ascii	"myInputArray\000"
 13111      70757441 
 13111      72726179 
 13111      00
 13112              	.LASF64:
 13113 0fb6 6D746F66 		.ascii	"mtof\000"
 13113      00
 13114              	.LASF278:
 13115 0fbb 70656461 		.ascii	"pedals\000"
 13115      6C7300
 13116              	.LASF83:
 13117 0fc2 74656D70 		.ascii	"tempIntHigh\000"
 13117      496E7448 
 13117      69676800 
 13118              	.LASF265:
 13119 0fce 65646974 		.ascii	"editUp\000"
 13119      557000
 13120              	.LASF31:
 13121 0fd5 6C617374 		.ascii	"lastWrRowAddr\000"
 13121      5772526F 
 13121      77416464 
 13121      7200
 13122              	.LASF78:
 13123 0fe3 6D794172 		.ascii	"myArrayCounter\000"
 13123      72617943 
 13123      6F756E74 
 13123      657200
 13124              	.LASF282:
 13125 0ff2 73747269 		.ascii	"stringFrequencies\000"
 13125      6E674672 
 13125      65717565 
 13125      6E636965 
 13125      7300
 13126              	.LASF20:
 13127 1004 75696E74 		.ascii	"uint16\000"
 13127      313600
 13128              	.LASF182:
 13129 100b 6D794172 		.ascii	"myArray\000"
 13129      72617900 
 13130              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
