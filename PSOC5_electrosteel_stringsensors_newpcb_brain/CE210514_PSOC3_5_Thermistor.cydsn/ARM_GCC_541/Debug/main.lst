ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	sysexBuffer,2048,4
  20              		.global	sysexPointer
  21              		.bss
  22              		.align	2
  23              		.type	sysexPointer, %object
  24              		.size	sysexPointer, 4
  25              	sysexPointer:
  26 0000 00000000 		.space	4
  27              		.global	receivingSysex
  28              		.type	receivingSysex, %object
  29              		.size	receivingSysex, 1
  30              	receivingSysex:
  31 0004 00       		.space	1
  32              		.global	parsingSysex
  33              		.type	parsingSysex, %object
  34              		.size	parsingSysex, 1
  35              	parsingSysex:
  36 0005 00       		.space	1
  37              		.comm	presetArray,2048,4
  38              		.global	presetNumberToWrite
  39              		.type	presetNumberToWrite, %object
  40              		.size	presetNumberToWrite, 1
  41              	presetNumberToWrite:
  42 0006 00       		.space	1
  43              		.global	copedentNumberToWrite
  44              		.type	copedentNumberToWrite, %object
  45              		.size	copedentNumberToWrite, 1
  46              	copedentNumberToWrite:
  47 0007 00       		.space	1
  48              		.global	sendMessageEnd
  49              		.type	sendMessageEnd, %object
  50              		.size	sendMessageEnd, 1
  51              	sendMessageEnd:
  52 0008 00       		.space	1
  53              		.global	sendSingleParamUpdate
  54              		.type	sendSingleParamUpdate, %object
  55              		.size	sendSingleParamUpdate, 1
  56              	sendSingleParamUpdate:
  57 0009 00       		.space	1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 2


  58              		.global	singleParamToUpdateHigh
  59              		.type	singleParamToUpdateHigh, %object
  60              		.size	singleParamToUpdateHigh, 1
  61              	singleParamToUpdateHigh:
  62 000a 00       		.space	1
  63              		.global	singleParamToUpdateLow
  64              		.type	singleParamToUpdateLow, %object
  65              		.size	singleParamToUpdateLow, 1
  66              	singleParamToUpdateLow:
  67 000b 00       		.space	1
  68              		.global	singleParamValueHigh
  69              		.type	singleParamValueHigh, %object
  70              		.size	singleParamValueHigh, 1
  71              	singleParamValueHigh:
  72 000c 00       		.space	1
  73              		.global	singleParamValueLow
  74              		.type	singleParamValueLow, %object
  75              		.size	singleParamValueLow, 1
  76              	singleParamValueLow:
  77 000d 00       		.space	1
  78              		.global	sendMappingChangeUpdate
  79              		.type	sendMappingChangeUpdate, %object
  80              		.size	sendMappingChangeUpdate, 1
  81              	sendMappingChangeUpdate:
  82 000e 00       		.space	1
  83              		.global	transposeSemitones
  84              		.type	transposeSemitones, %object
  85              		.size	transposeSemitones, 1
  86              	transposeSemitones:
  87 000f 00       		.space	1
  88              		.global	transposeCents
  89              		.type	transposeCents, %object
  90              		.size	transposeCents, 1
  91              	transposeCents:
  92 0010 00       		.space	1
  93              		.global	midiSendOn
  94              		.type	midiSendOn, %object
  95              		.size	midiSendOn, 1
  96              	midiSendOn:
  97 0011 00       		.space	1
  98              		.global	midiBarSendOn
  99              		.type	midiBarSendOn, %object
 100              		.size	midiBarSendOn, 1
 101              	midiBarSendOn:
 102 0012 00       		.space	1
 103              		.global	pitchSmoothing
 104              		.type	pitchSmoothing, %object
 105              		.size	pitchSmoothing, 1
 106              	pitchSmoothing:
 107 0013 00       		.space	1
 108              		.global	controlSmoothing
 109              		.type	controlSmoothing, %object
 110              		.size	controlSmoothing, 1
 111              	controlSmoothing:
 112 0014 00       		.space	1
 113              		.global	deadzones
 114              		.type	deadzones, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 3


 115              		.size	deadzones, 1
 116              	deadzones:
 117 0015 00       		.space	1
 118              		.global	octaveAction
 119              		.type	octaveAction, %object
 120              		.size	octaveAction, 1
 121              	octaveAction:
 122 0016 00       		.space	1
 123              		.global	stringRepresentation
 124              		.data
 125              		.align	2
 126              		.type	stringRepresentation, %object
 127              		.size	stringRepresentation, 2
 128              	stringRepresentation:
 129 0000 03       		.byte	3
 130 0001 08       		.byte	8
 131              		.global	presetArraySection
 132              		.bss
 133              		.type	presetArraySection, %object
 134              		.size	presetArraySection, 1
 135              	presetArraySection:
 136 0017 00       		.space	1
 137              		.global	messageArraySendCount
 138              		.align	1
 139              		.type	messageArraySendCount, %object
 140              		.size	messageArraySendCount, 2
 141              	messageArraySendCount:
 142 0018 0000     		.space	2
 143              		.global	messageArraySize
 144              		.align	1
 145              		.type	messageArraySize, %object
 146              		.size	messageArraySize, 2
 147              	messageArraySize:
 148 001a 0000     		.space	2
 149              		.global	sysexMessageInProgress
 150              		.type	sysexMessageInProgress, %object
 151              		.size	sysexMessageInProgress, 1
 152              	sysexMessageInProgress:
 153 001c 00       		.space	1
 154              		.global	bufCount
 155              		.type	bufCount, %object
 156              		.size	bufCount, 1
 157              	bufCount:
 158 001d 00       		.space	1
 159              		.global	sendingMessage
 160              		.type	sendingMessage, %object
 161              		.size	sendingMessage, 1
 162              	sendingMessage:
 163 001e 00       		.space	1
 164              		.global	sendKnobs
 165              		.type	sendKnobs, %object
 166              		.size	sendKnobs, 1
 167              	sendKnobs:
 168 001f 00       		.space	1
 169              		.global	currentFloat
 170              		.align	2
 171              		.type	currentFloat, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 4


 172              		.size	currentFloat, 4
 173              	currentFloat:
 174 0020 00000000 		.space	4
 175              		.global	mapCount
 176              		.align	2
 177              		.type	mapCount, %object
 178              		.size	mapCount, 4
 179              	mapCount:
 180 0024 00000000 		.space	4
 181              		.global	valsCount
 182              		.align	1
 183              		.type	valsCount, %object
 184              		.size	valsCount, 2
 185              	valsCount:
 186 0028 0000     		.space	2
 187              		.global	mapCountExpectation
 188              		.align	1
 189              		.type	mapCountExpectation, %object
 190              		.size	mapCountExpectation, 2
 191              	mapCountExpectation:
 192 002a 0000     		.space	2
 193              		.global	numMappings
 194              		.align	1
 195              		.type	numMappings, %object
 196              		.size	numMappings, 2
 197              	numMappings:
 198 002c 0000     		.space	2
 199              		.global	parseThatMF
 200              		.type	parseThatMF, %object
 201              		.size	parseThatMF, 1
 202              	parseThatMF:
 203 002e 00       		.space	1
 204              		.global	valCheck
 205 002f 00       		.align	2
 206              		.type	valCheck, %object
 207              		.size	valCheck, 4
 208              	valCheck:
 209 0030 00000000 		.space	4
 210              		.global	testVal
 211              		.align	2
 212              		.type	testVal, %object
 213              		.size	testVal, 4
 214              	testVal:
 215 0034 00000000 		.space	4
 216              		.global	numStrings
 217              		.data
 218 0002 0000     		.align	2
 219              		.type	numStrings, %object
 220              		.size	numStrings, 4
 221              	numStrings:
 222 0004 0A000000 		.word	10
 223              		.global	usbActivityCounter
 224              		.bss
 225              		.type	usbActivityCounter, %object
 226              		.size	usbActivityCounter, 1
 227              	usbActivityCounter:
 228 0038 00       		.space	1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 5


 229              		.comm	midiMsg,4,4
 230              		.global	currentVBUS
 231              		.type	currentVBUS, %object
 232              		.size	currentVBUS, 1
 233              	currentVBUS:
 234 0039 00       		.space	1
 235              		.global	prevVBUS
 236              		.type	prevVBUS, %object
 237              		.size	prevVBUS, 1
 238              	prevVBUS:
 239 003a 00       		.space	1
 240              		.global	USB_active
 241              		.type	USB_active, %object
 242              		.size	USB_active, 1
 243              	USB_active:
 244 003b 00       		.space	1
 245              		.global	USB_check_flag
 246              		.type	USB_check_flag, %object
 247              		.size	USB_check_flag, 1
 248              	USB_check_flag:
 249 003c 00       		.space	1
 250              		.comm	mappingArray,6,4
 251              		.comm	inBuffer,32,4
 252              		.comm	myArray,32,4
 253              		.comm	myInputArray,2,4
 254              		.comm	linearPotValue32Bit,8,4
 255              		.global	i
 256              		.type	i, %object
 257              		.size	i, 1
 258              	i:
 259 003d 00       		.space	1
 260              		.global	counter
 261              		.type	counter, %object
 262              		.size	counter, 1
 263              	counter:
 264 003e 00       		.space	1
 265              		.comm	returnedData,32,4
 266              		.comm	temper,4,4
 267              		.comm	previousButtons,44,4
 268              		.global	octave
 269              		.data
 270              		.align	2
 271              		.type	octave, %object
 272              		.size	octave, 4
 273              	octave:
 274 0008 05000000 		.word	5
 275              		.comm	angle,20,4
 276              		.comm	prevAngle,20,4
 277              		.comm	ADC_values,8,4
 278              		.global	rawAngle
 279              		.bss
 280 003f 00       		.align	1
 281              		.type	rawAngle, %object
 282              		.size	rawAngle, 2
 283              	rawAngle:
 284 0040 0000     		.space	2
 285              		.global	midiSent
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 6


 286              		.align	1
 287              		.type	midiSent, %object
 288              		.size	midiSent, 2
 289              	midiSent:
 290 0042 0000     		.space	2
 291              		.global	midiOverflow
 292              		.align	1
 293              		.type	midiOverflow, %object
 294              		.size	midiOverflow, 2
 295              	midiOverflow:
 296 0044 0000     		.space	2
 297              		.comm	macroKnobValues,8,4
 298              		.global	currentCopedent
 299              		.type	currentCopedent, %object
 300              		.size	currentCopedent, 1
 301              	currentCopedent:
 302 0046 00       		.space	1
 303              		.global	necks
 304              		.data
 305              		.align	2
 306              		.type	necks, %object
 307              		.size	necks, 2
 308              	necks:
 309 000c 00       		.byte	0
 310 000d 01       		.byte	1
 311              		.comm	rx1Channel,1,1
 312              		.comm	rx2Channel,1,32
 313              		.comm	rx1TD,2,4
 314              		.comm	rx2TD,2,32
 315              		.comm	txChannel,1,32
 316              		.comm	txTD,1,32
 317              		.comm	rx3Channel,1,32
 318              		.comm	rx3TD,1,32
 319              		.comm	rxBufferPluck,52,32
 320              		.comm	rxBufferBar,16,32
 321              		.comm	strings,24,4
 322              		.comm	prevStrings,24,4
 323              		.comm	bar,4,4
 324              		.comm	prevBar,4,4
 325              		.comm	maxStrings,24,4
 326              		.global	amHere
 327              		.bss
 328              		.type	amHere, %object
 329              		.size	amHere, 1
 330              	amHere:
 331 0047 00       		.space	1
 332              		.global	spiCounter
 333              		.type	spiCounter, %object
 334              		.size	spiCounter, 1
 335              	spiCounter:
 336 0048 00       		.space	1
 337              		.global	newDataFlag
 338              		.type	newDataFlag, %object
 339              		.size	newDataFlag, 1
 340              	newDataFlag:
 341 0049 00       		.space	1
 342              		.global	prevOctave
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 7


 343 004a 0000     		.align	2
 344              		.type	prevOctave, %object
 345              		.size	prevOctave, 4
 346              	prevOctave:
 347 004c 00000000 		.space	4
 348              		.global	pluck_index
 349              		.type	pluck_index, %object
 350              		.size	pluck_index, 1
 351              	pluck_index:
 352 0050 00       		.space	1
 353              		.global	amHere2
 354              		.type	amHere2, %object
 355              		.size	amHere2, 1
 356              	amHere2:
 357 0051 00       		.space	1
 358              		.global	spiCounter2
 359              		.type	spiCounter2, %object
 360              		.size	spiCounter2, 1
 361              	spiCounter2:
 362 0052 00       		.space	1
 363              		.global	newDataFlag2
 364              		.type	newDataFlag2, %object
 365              		.size	newDataFlag2, 1
 366              	newDataFlag2:
 367 0053 00       		.space	1
 368              		.global	currentPluckBuffer
 369              		.type	currentPluckBuffer, %object
 370              		.size	currentPluckBuffer, 1
 371              	currentPluckBuffer:
 372 0054 00       		.space	1
 373              		.global	currentBarBuffer
 374              		.type	currentBarBuffer, %object
 375              		.size	currentBarBuffer, 1
 376              	currentBarBuffer:
 377 0055 00       		.space	1
 378              		.global	pluckErrorCount
 379              		.type	pluckErrorCount, %object
 380              		.size	pluckErrorCount, 1
 381              	pluckErrorCount:
 382 0056 00       		.space	1
 383              		.global	SPI1ErrorCount
 384 0057 00       		.align	1
 385              		.type	SPI1ErrorCount, %object
 386              		.size	SPI1ErrorCount, 2
 387              	SPI1ErrorCount:
 388 0058 0000     		.space	2
 389              		.global	inputData
 390              		.type	inputData, %object
 391              		.size	inputData, 1
 392              	inputData:
 393 005a 00       		.space	1
 394              		.section	.text.spis_1_ss,"ax",%progbits
 395              		.align	2
 396              		.global	spis_1_ss
 397              		.thumb
 398              		.thumb_func
 399              		.type	spis_1_ss, %function
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 8


 400              	spis_1_ss:
 401              	.LFB64:
 402              		.file 1 "main.c"
   1:main.c        **** /*main.c
   2:main.c        **** *****************************************************************************/
   3:main.c        **** #include <device.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <math.h>
   6:main.c        **** #include "oled.h"
   7:main.c        **** #include "main.h"
   8:main.c        **** 
   9:main.c        **** 
  10:main.c        **** //#define BOOTLOAD_STYLE
  11:main.c        **** 
  12:main.c        **** #define EEPROM_COPEDENT_OFFSET 0
  13:main.c        **** #define COPEDENT_SIZE_IN_BYTES 278 //including name bytes
  14:main.c        **** #define COPEDENT_SIZE_IN_FLOATS 132 // not including name bytes
  15:main.c        **** #define NAME_LENGTH_IN_BYTES 14
  16:main.c        **** #define NUM_FRET_MEASUREMENTS 12
  17:main.c        **** #define NUM_SLIDERS 2
  18:main.c        **** #define EEPROM_LEVER_CALIBRATION_OFFSET (EEPROM_COPEDENT_OFFSET + (MAX_NUM_COPEDENTS * COPEDENT_SIZ
  19:main.c        **** #define LEVER_CALIBRATION_SIZE_IN_BYTES NUM_PEDALS * 4 //for each pedal, store 2 bytes for high and
  20:main.c        **** #define EEPROM_FRET_CALIBRATION_OFFSET (EEPROM_LEVER_CALIBRATION_OFFSET + LEVER_CALIBRATION_SIZE_IN
  21:main.c        **** #define FRET_CALIBRATION_SIZE_IN_BYTES NUM_FRET_MEASUREMENTS * NUM_SLIDERS * 2 //(measurement point
  22:main.c        **** #define EEPROM_CURRENT_PRESET_OFFSET EEPROM_FRET_CALIBRATION_OFFSET + FRET_CALIBRATION_SIZE_IN_BYTE
  23:main.c        **** #define CURRENT_PRESET_SIZE_IN_BYTES 1
  24:main.c        **** #define EEPROM_STRING_REP_OFFSET EEPROM_CURRENT_PRESET_OFFSET + CURRENT_PRESET_SIZE_IN_BYTES
  25:main.c        **** #define STRING_REP_SIZE_IN_BYTES 1
  26:main.c        **** #define EEPROM_TRANSPOSE_OFFSET EEPROM_STRING_REP_OFFSET + STRING_REP_SIZE_IN_BYTES
  27:main.c        **** #define TRANSPOSE_SIZE_IN_BYTES 2
  28:main.c        **** #define EEPROM_OCTAVE_ACTION_OFFSET EEPROM_TRANSPOSE_OFFSET + TRANSPOSE_SIZE_IN_BYTES
  29:main.c        **** #define OCTAVE_ACTION_SIZE_IN_BYTES 1
  30:main.c        **** #define EEPROM_DEADZONES_OFFSET EEPROM_OCTAVE_ACTION_OFFSET + OCTAVE_ACTION_SIZE_IN_BYTES
  31:main.c        **** #define DEADZONES_SIZE_IN_BYTES 1
  32:main.c        **** #define EEPROM_PITCHSMOOTHING_OFFSET EEPROM_DEADZONES_OFFSET + DEADZONES_SIZE_IN_BYTES
  33:main.c        **** #define PITCHSMOOTHING_SIZE_IN_BYTES 1
  34:main.c        **** #define EEPROM_CONTROLSMOOTHING_OFFSET EEPROM_PITCHSMOOTHING_OFFSET + PITCHSMOOTHING_SIZE_IN_BYTES
  35:main.c        **** #define CONTROLSMOOTHING_SIZE_IN_BYTES 1
  36:main.c        **** #define EEPROM_MIDI_SEND_OFFSET EEPROM_CONTROLSMOOTHING_OFFSET + CONTROLSMOOTHING_SIZE_IN_BYTES
  37:main.c        **** #define MIDI_SEND_SIZE_IN_BYTES 1
  38:main.c        **** #define EEPROM_PEDAL_INVERTED_OFFSET EEPROM_MIDI_SEND_OFFSET + MIDI_SEND_SIZE_IN_BYTES
  39:main.c        **** #define PEDAL_INVERTED_SIZE_IN_BYTES 2
  40:main.c        **** #define EEPROM_DUAL_SLIDER_OFFSET EEPROM_PEDAL_INVERTED_OFFSET + PEDAL_INVERTED_SIZE_IN_BYTES
  41:main.c        **** #define DUAL_SLIDER_SIZE_IN_BYTES 1
  42:main.c        **** #define EEPROM_NECKS_OFFSET EEPROM_DUAL_SLIDER_OFFSET + DUAL_SLIDER_SIZE_IN_BYTES
  43:main.c        **** #define NECKS_SIZE_IN_BYTES 1
  44:main.c        **** 
  45:main.c        **** #define MACRO_CLIPPED_LENGTH 9
  46:main.c        **** #define NAME_CLIPPED_LENGTH 12
  47:main.c        **** #define COPEDENT_NAME_CLIPPED_LENGTH 9
  48:main.c        **** #define myBufferSize 32
  49:main.c        **** void parseSysex(void);
  50:main.c        **** 
  51:main.c        **** uint8_t sysexBuffer[2048];
  52:main.c        **** uint32_t sysexPointer = 0;
  53:main.c        **** uint8_t receivingSysex = 0;
  54:main.c        **** uint8_t parsingSysex = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 9


  55:main.c        **** volatile uint8_t presetArray[2048];
  56:main.c        **** uint8_t presetNumberToWrite = 0;
  57:main.c        **** uint8_t copedentNumberToWrite = 0;
  58:main.c        **** uint8_t sendMessageEnd = 0;
  59:main.c        **** 
  60:main.c        **** uint8_t sendSingleParamUpdate = 0;
  61:main.c        **** uint8_t singleParamToUpdateHigh = 0;
  62:main.c        **** uint8_t singleParamToUpdateLow = 0;
  63:main.c        **** uint8_t singleParamValueHigh = 0;
  64:main.c        **** uint8_t singleParamValueLow = 0;
  65:main.c        ****             
  66:main.c        **** uint8_t sendMappingChangeUpdate = 0;
  67:main.c        ****             
  68:main.c        **** 
  69:main.c        **** int8_t transposeSemitones = 0;
  70:main.c        **** int8_t transposeCents = 0;
  71:main.c        **** uint8_t midiSendOn = 0;
  72:main.c        **** uint8_t midiBarSendOn = 0;
  73:main.c        **** uint8_t pitchSmoothing = 0;
  74:main.c        **** uint8_t controlSmoothing = 0;
  75:main.c        **** uint8_t deadzones = 0;
  76:main.c        **** uint8_t octaveAction = 0;
  77:main.c        **** uint8_t stringRepresentation[2] = {3,8};
  78:main.c        **** 
  79:main.c        **** enum presetArraySectionState
  80:main.c        **** {
  81:main.c        ****     presetName = 0,
  82:main.c        ****     macroNames = 1,
  83:main.c        ****     initialVals = 2,
  84:main.c        ****     mapCountNext = 3,
  85:main.c        ****     mapping = 4,
  86:main.c        ****     presetEnd = 5,
  87:main.c        **** };
  88:main.c        **** uint8_t presetArraySection = presetName;
  89:main.c        **** 
  90:main.c        **** uint16_t messageArraySendCount = 0;
  91:main.c        **** uint16_t messageArraySize = 0;
  92:main.c        **** 
  93:main.c        **** uint8_t sysexMessageInProgress = 0;
  94:main.c        **** 
  95:main.c        **** uint8_t bufCount = 0;
  96:main.c        **** volatile uint8_t sendingMessage = 0;
  97:main.c        **** volatile uint8_t sendKnobs = 0;
  98:main.c        **** uint32_t currentFloat = 0;
  99:main.c        **** uint32_t mapCount = 0;
 100:main.c        **** 
 101:main.c        **** uint16_t valsCount = 0;
 102:main.c        **** uint16_t mapCountExpectation = 0;
 103:main.c        **** uint16_t numMappings = 0;
 104:main.c        **** volatile uint8_t parseThatMF = 0;
 105:main.c        **** volatile float valCheck = 0.0f;
 106:main.c        **** volatile float testVal = 0.0f;
 107:main.c        **** 
 108:main.c        **** int numStrings = 10;
 109:main.c        **** /*
 110:main.c        **** #define TUNING_ARRAY_SIZE 258
 111:main.c        **** uint8_t tuningArray[TUNING_ARRAY_SIZE];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 10


 112:main.c        **** */
 113:main.c        **** 
 114:main.c        **** volatile uint8 usbActivityCounter = 0u;
 115:main.c        **** uint8 midiMsg[4];
 116:main.c        **** uint8_t currentVBUS = 0;
 117:main.c        **** uint8_t prevVBUS = 0;
 118:main.c        **** volatile uint8_t USB_active = 0;
 119:main.c        **** volatile uint8_t USB_check_flag = 0;
 120:main.c        **** 
 121:main.c        **** uint8_t mappingArray[6];
 122:main.c        **** 
 123:main.c        **** uint8 inBuffer[myBufferSize];
 124:main.c        **** 
 125:main.c        **** uint8 myArray[myBufferSize];
 126:main.c        **** uint8 myInputArray[2];
 127:main.c        **** int32_t linearPotValue32Bit[2];
 128:main.c        **** uint8_t i = 0;
 129:main.c        **** uint8_t counter = 0;
 130:main.c        **** uint8_t returnedData[myBufferSize];
 131:main.c        **** int32_t temper;
 132:main.c        **** int previousButtons[11];
 133:main.c        **** int octave = 5;
 134:main.c        **** uint16_t angle[10];
 135:main.c        **** uint16_t prevAngle[10];
 136:main.c        **** 
 137:main.c        **** uint16_t ADC_values[4];
 138:main.c        **** uint16_t rawAngle = 0;
 139:main.c        **** uint16_t midiSent = 0;
 140:main.c        **** uint16_t midiOverflow = 0;
 141:main.c        **** 
 142:main.c        **** uint8_t macroKnobValues[8];
 143:main.c        **** 
 144:main.c        **** uint8_t currentCopedent = 0;
 145:main.c        **** uint8_t necks[2] = {0,1};
 146:main.c        **** 
 147:main.c        **** void checkUSB_Vbus(void);
 148:main.c        **** void sendMIDIAllNotesOff(void);
 149:main.c        **** void sendMIDIPitchBend(int val, int channel);
 150:main.c        **** void firstCheckUSB_Vbus(void);
 151:main.c        **** void restartSystemCheck(void);
 152:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel);
 153:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel);
 154:main.c        **** CY_ISR_PROTO(SleepIsr_function);
 155:main.c        **** void noteEvent(int string);
 156:main.c        **** void I2C_reset(void);
 157:main.c        **** void CCEvent(int cc, int val);
 158:main.c        **** void DmaRxConfiguration(void);
 159:main.c        **** void scanUI(void);
 160:main.c        **** void enterEditModeMenu(void);
 161:main.c        **** void exitEditModeMenu(void);
 162:main.c        **** void leftPressed();
 163:main.c        **** void rightPressed();
 164:main.c        **** void downPressed();
 165:main.c        **** void upPressed();
 166:main.c        **** void enterLeverCalibrationMode(void);
 167:main.c        **** void exitLeverCalibrationMode(void);
 168:main.c        **** void enterFretCalibrationMode(void);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 11


 169:main.c        **** void exitFretCalibrationMode(void);
 170:main.c        **** 
 171:main.c        **** /* DMA Configuration for DMA_RX */
 172:main.c        **** #define DMA_RX_BYTES_PER_BURST      (1u)
 173:main.c        **** #define DMA_RX_REQUEST_PER_BURST    (1u)
 174:main.c        **** #define DMA_RX_SRC_BASE             (CYDEV_PERIPH_BASE)
 175:main.c        **** #define DMA_RX_DST_BASE             (CYDEV_SRAM_BASE)
 176:main.c        **** 
 177:main.c        **** void DmaTxConfiguration(void);
 178:main.c        **** 
 179:main.c        **** /* DMA Configuration for DMA_TX */
 180:main.c        **** #define DMA_TX_BYTES_PER_BURST      (1u)
 181:main.c        **** #define DMA_TX_REQUEST_PER_BURST    (1u)
 182:main.c        **** #define DMA_TX_SRC_BASE             (CYDEV_SRAM_BASE)
 183:main.c        **** #define DMA_TX_DST_BASE             (CYDEV_PERIPH_BASE)
 184:main.c        **** 
 185:main.c        **** #define PLUCK_BUFFER_SIZE                 (26u)
 186:main.c        **** #define BAR_BUFFER_SIZE                 (8u)
 187:main.c        **** #define STORE_TD_CFG_ONCMPLT        (1u)
 188:main.c        **** uint8 rx1Channel, rx2Channel __attribute__((aligned(32)));
 189:main.c        **** uint8 rx1TD[2], rx2TD[2]  __attribute__((aligned(32)));
 190:main.c        **** 
 191:main.c        **** volatile uint8 txChannel __attribute__((aligned(32)));
 192:main.c        **** volatile uint8 txTD __attribute__((aligned(32)));
 193:main.c        **** 
 194:main.c        **** volatile uint8 rx3Channel __attribute__((aligned(32)));
 195:main.c        **** volatile uint8 rx3TD __attribute__((aligned(32)));
 196:main.c        **** 
 197:main.c        **** 
 198:main.c        **** volatile uint8 rxBufferPluck[2][PLUCK_BUFFER_SIZE] __attribute__((aligned(32)));
 199:main.c        **** volatile uint8 rxBufferBar[2][BAR_BUFFER_SIZE] __attribute__((aligned(32)));
 200:main.c        **** 
 201:main.c        **** volatile uint16_t strings[12];
 202:main.c        **** volatile uint16_t prevStrings[12];
 203:main.c        **** volatile uint16_t bar[2];
 204:main.c        **** volatile uint16_t prevBar[2];
 205:main.c        **** volatile uint16_t maxStrings[12];
 206:main.c        **** volatile uint8_t amHere = 0;
 207:main.c        **** volatile uint8_t spiCounter = 0;
 208:main.c        **** volatile uint8_t newDataFlag = 0;
 209:main.c        **** int prevOctave = 0;
 210:main.c        **** uint8_t pluck_index = 0;
 211:main.c        **** volatile uint8_t amHere2 = 0;
 212:main.c        **** volatile uint8_t spiCounter2 = 0;
 213:main.c        **** volatile uint8_t newDataFlag2 = 0;
 214:main.c        **** volatile uint8_t currentPluckBuffer = 0;
 215:main.c        **** volatile uint8_t currentBarBuffer = 0;
 216:main.c        **** volatile uint8_t pluckErrorCount = 0;
 217:main.c        **** volatile uint16_t SPI1ErrorCount = 0;
 218:main.c        **** 
 219:main.c        **** 
 220:main.c        **** 
 221:main.c        **** volatile uint8_t inputData = 0;
 222:main.c        **** 
 223:main.c        **** 
 224:main.c        **** union breakFloat {
 225:main.c        ****  float f;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 12


 226:main.c        ****  uint8_t b[4];  
 227:main.c        ****  uint32_t u32;
 228:main.c        **** };
 229:main.c        **** 
 230:main.c        **** 
 231:main.c        **** CY_ISR(spis_1_ss)
 232:main.c        **** {
 403              		.loc 1 232 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 8
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407 0000 90B5     		push	{r4, r7, lr}
 408              		.cfi_def_cfa_offset 12
 409              		.cfi_offset 4, -12
 410              		.cfi_offset 7, -8
 411              		.cfi_offset 14, -4
 412 0002 83B0     		sub	sp, sp, #12
 413              		.cfi_def_cfa_offset 24
 414 0004 00AF     		add	r7, sp, #0
 415              		.cfi_def_cfa_register 7
 233:main.c        ****     currentPluckBuffer = !currentPluckBuffer;
 416              		.loc 1 233 0
 417 0006 554B     		ldr	r3, .L5
 418 0008 1B78     		ldrb	r3, [r3]
 419 000a DBB2     		uxtb	r3, r3
 420 000c 002B     		cmp	r3, #0
 421 000e 0CBF     		ite	eq
 422 0010 0123     		moveq	r3, #1
 423 0012 0023     		movne	r3, #0
 424 0014 DBB2     		uxtb	r3, r3
 425 0016 1A46     		mov	r2, r3
 426 0018 504B     		ldr	r3, .L5
 427 001a 1A70     		strb	r2, [r3]
 234:main.c        **** 
 235:main.c        ****     if ((rxBufferPluck[!currentPluckBuffer][0] == 254) && (rxBufferPluck[!currentPluckBuffer][25] =
 428              		.loc 1 235 0
 429 001c 4F4B     		ldr	r3, .L5
 430 001e 1B78     		ldrb	r3, [r3]
 431 0020 DBB2     		uxtb	r3, r3
 432 0022 002B     		cmp	r3, #0
 433 0024 0CBF     		ite	eq
 434 0026 0123     		moveq	r3, #1
 435 0028 0023     		movne	r3, #0
 436 002a DBB2     		uxtb	r3, r3
 437 002c 1946     		mov	r1, r3
 438 002e 4C4A     		ldr	r2, .L5+4
 439 0030 1A23     		movs	r3, #26
 440 0032 03FB01F3 		mul	r3, r3, r1
 441 0036 1344     		add	r3, r3, r2
 442 0038 1B78     		ldrb	r3, [r3]
 443 003a DBB2     		uxtb	r3, r3
 444 003c FE2B     		cmp	r3, #254
 445 003e 4FD1     		bne	.L2
 446              		.loc 1 235 0 is_stmt 0 discriminator 1
 447 0040 464B     		ldr	r3, .L5
 448 0042 1B78     		ldrb	r3, [r3]
 449 0044 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 13


 450 0046 002B     		cmp	r3, #0
 451 0048 0CBF     		ite	eq
 452 004a 0123     		moveq	r3, #1
 453 004c 0023     		movne	r3, #0
 454 004e DBB2     		uxtb	r3, r3
 455 0050 1946     		mov	r1, r3
 456 0052 434A     		ldr	r2, .L5+4
 457 0054 1A23     		movs	r3, #26
 458 0056 03FB01F3 		mul	r3, r3, r1
 459 005a 1344     		add	r3, r3, r2
 460 005c 1933     		adds	r3, r3, #25
 461 005e 1B78     		ldrb	r3, [r3]
 462 0060 DBB2     		uxtb	r3, r3
 463 0062 FD2B     		cmp	r3, #253
 464 0064 3CD1     		bne	.L2
 465              	.LBB2:
 236:main.c        ****     {
 237:main.c        ****         for (int i = 0 ; i < numStrings; i++)
 466              		.loc 1 237 0 is_stmt 1
 467 0066 0023     		movs	r3, #0
 468 0068 7B60     		str	r3, [r7, #4]
 469 006a 34E0     		b	.L3
 470              	.L4:
 238:main.c        ****         {
 239:main.c        ****             strings[i] = ((rxBufferPluck[!currentPluckBuffer][(i*2)+1] << 8) + rxBufferPluck[!curre
 471              		.loc 1 239 0 discriminator 3
 472 006c 3B4B     		ldr	r3, .L5
 473 006e 1B78     		ldrb	r3, [r3]
 474 0070 DBB2     		uxtb	r3, r3
 475 0072 002B     		cmp	r3, #0
 476 0074 0CBF     		ite	eq
 477 0076 0123     		moveq	r3, #1
 478 0078 0023     		movne	r3, #0
 479 007a DBB2     		uxtb	r3, r3
 480 007c 1846     		mov	r0, r3
 481 007e 7B68     		ldr	r3, [r7, #4]
 482 0080 5B00     		lsls	r3, r3, #1
 483 0082 0133     		adds	r3, r3, #1
 484 0084 3649     		ldr	r1, .L5+4
 485 0086 1A22     		movs	r2, #26
 486 0088 02FB00F2 		mul	r2, r2, r0
 487 008c 0A44     		add	r2, r2, r1
 488 008e 1344     		add	r3, r3, r2
 489 0090 1B78     		ldrb	r3, [r3]
 490 0092 DBB2     		uxtb	r3, r3
 491 0094 9BB2     		uxth	r3, r3
 492 0096 1B02     		lsls	r3, r3, #8
 493 0098 9AB2     		uxth	r2, r3
 494 009a 304B     		ldr	r3, .L5
 495 009c 1B78     		ldrb	r3, [r3]
 496 009e DBB2     		uxtb	r3, r3
 497 00a0 002B     		cmp	r3, #0
 498 00a2 0CBF     		ite	eq
 499 00a4 0123     		moveq	r3, #1
 500 00a6 0023     		movne	r3, #0
 501 00a8 DBB2     		uxtb	r3, r3
 502 00aa 1C46     		mov	r4, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 14


 503 00ac 7B68     		ldr	r3, [r7, #4]
 504 00ae 0133     		adds	r3, r3, #1
 505 00b0 5B00     		lsls	r3, r3, #1
 506 00b2 2B48     		ldr	r0, .L5+4
 507 00b4 1A21     		movs	r1, #26
 508 00b6 01FB04F1 		mul	r1, r1, r4
 509 00ba 0144     		add	r1, r1, r0
 510 00bc 0B44     		add	r3, r3, r1
 511 00be 1B78     		ldrb	r3, [r3]
 512 00c0 DBB2     		uxtb	r3, r3
 513 00c2 9BB2     		uxth	r3, r3
 514 00c4 1344     		add	r3, r3, r2
 515 00c6 99B2     		uxth	r1, r3
 516 00c8 264A     		ldr	r2, .L5+8
 517 00ca 7B68     		ldr	r3, [r7, #4]
 518 00cc 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 237:main.c        ****         {
 519              		.loc 1 237 0 discriminator 3
 520 00d0 7B68     		ldr	r3, [r7, #4]
 521 00d2 0133     		adds	r3, r3, #1
 522 00d4 7B60     		str	r3, [r7, #4]
 523              	.L3:
 237:main.c        ****         {
 524              		.loc 1 237 0 is_stmt 0 discriminator 1
 525 00d6 244B     		ldr	r3, .L5+12
 526 00d8 1B68     		ldr	r3, [r3]
 527 00da 7A68     		ldr	r2, [r7, #4]
 528 00dc 9A42     		cmp	r2, r3
 529 00de C5DB     		blt	.L4
 530              	.L2:
 531              	.LBE2:
 240:main.c        ****         }
 241:main.c        ****     }
 242:main.c        ****     SPIS_1_ClearRxBuffer();
 532              		.loc 1 242 0 is_stmt 1
 533 00e0 FFF7FEFF 		bl	SPIS_1_ClearRxBuffer
 243:main.c        ****     CyDmaClearPendingDrq(rx1Channel);
 534              		.loc 1 243 0
 535 00e4 214B     		ldr	r3, .L5+16
 536 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 537 00e8 1846     		mov	r0, r3
 538 00ea FFF7FEFF 		bl	CyDmaClearPendingDrq
 244:main.c        **** 
 245:main.c        ****     //set up the next DMA transaction
 246:main.c        **** 
 247:main.c        ****     CyDmaTdSetConfiguration(rx1TD[currentPluckBuffer], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DS
 539              		.loc 1 247 0
 540 00ee 1B4B     		ldr	r3, .L5
 541 00f0 1B78     		ldrb	r3, [r3]
 542 00f2 DBB2     		uxtb	r3, r3
 543 00f4 1A46     		mov	r2, r3
 544 00f6 1E4B     		ldr	r3, .L5+20
 545 00f8 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 546 00fa 0223     		movs	r3, #2
 547 00fc FE22     		movs	r2, #254
 548 00fe 1A21     		movs	r1, #26
 549 0100 FFF7FEFF 		bl	CyDmaTdSetConfiguration
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 15


 248:main.c        ****     CyDmaTdSetAddress(rx1TD[currentPluckBuffer], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rx
 550              		.loc 1 248 0
 551 0104 154B     		ldr	r3, .L5
 552 0106 1B78     		ldrb	r3, [r3]
 553 0108 DBB2     		uxtb	r3, r3
 554 010a 1A46     		mov	r2, r3
 555 010c 184B     		ldr	r3, .L5+20
 556 010e 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 557 0110 124B     		ldr	r3, .L5
 558 0112 1B78     		ldrb	r3, [r3]
 559 0114 DBB2     		uxtb	r3, r3
 560 0116 1A46     		mov	r2, r3
 561 0118 1A23     		movs	r3, #26
 562 011a 03FB02F3 		mul	r3, r3, r2
 563 011e 104A     		ldr	r2, .L5+4
 564 0120 1344     		add	r3, r3, r2
 565 0122 9BB2     		uxth	r3, r3
 566 0124 1A46     		mov	r2, r3
 567 0126 46F25D41 		movw	r1, #25693
 568 012a FFF7FEFF 		bl	CyDmaTdSetAddress
 249:main.c        ****     CyDmaChSetInitialTd(rx1Channel, rx1TD[currentPluckBuffer]);
 569              		.loc 1 249 0
 570 012e 0F4B     		ldr	r3, .L5+16
 571 0130 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 572 0132 0A4B     		ldr	r3, .L5
 573 0134 1B78     		ldrb	r3, [r3]
 574 0136 DBB2     		uxtb	r3, r3
 575 0138 1946     		mov	r1, r3
 576 013a 0D4B     		ldr	r3, .L5+20
 577 013c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 578 013e 1946     		mov	r1, r3
 579 0140 1046     		mov	r0, r2
 580 0142 FFF7FEFF 		bl	CyDmaChSetInitialTd
 250:main.c        ****     CyDmaChEnable(rx1Channel, 1);
 581              		.loc 1 250 0
 582 0146 094B     		ldr	r3, .L5+16
 583 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 584 014a 0121     		movs	r1, #1
 585 014c 1846     		mov	r0, r3
 586 014e FFF7FEFF 		bl	CyDmaChEnable
 251:main.c        **** 
 252:main.c        **** }
 587              		.loc 1 252 0
 588 0152 00BF     		nop
 589 0154 0C37     		adds	r7, r7, #12
 590              		.cfi_def_cfa_offset 12
 591 0156 BD46     		mov	sp, r7
 592              		.cfi_def_cfa_register 13
 593              		@ sp needed
 594 0158 90BD     		pop	{r4, r7, pc}
 595              	.L6:
 596 015a 00BF     		.align	2
 597              	.L5:
 598 015c 00000000 		.word	currentPluckBuffer
 599 0160 00000000 		.word	rxBufferPluck
 600 0164 00000000 		.word	strings
 601 0168 00000000 		.word	numStrings
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 16


 602 016c 00000000 		.word	rx1Channel
 603 0170 00000000 		.word	rx1TD
 604              		.cfi_endproc
 605              	.LFE64:
 606              		.size	spis_1_ss, .-spis_1_ss
 607              		.global	spiAdjusted
 608              		.bss
 609              		.type	spiAdjusted, %object
 610              		.size	spiAdjusted, 1
 611              	spiAdjusted:
 612 005b 00       		.space	1
 613              		.global	mySpiCounter
 614              		.type	mySpiCounter, %object
 615              		.size	mySpiCounter, 1
 616              	mySpiCounter:
 617 005c 00       		.space	1
 618              		.global	offsetErrorCount
 619 005d 00       		.align	1
 620              		.type	offsetErrorCount, %object
 621              		.size	offsetErrorCount, 2
 622              	offsetErrorCount:
 623 005e 0000     		.space	2
 624              		.global	SPI2errorflag
 625              		.type	SPI2errorflag, %object
 626              		.size	SPI2errorflag, 1
 627              	SPI2errorflag:
 628 0060 00       		.space	1
 629              		.global	bar_index
 630 0061 000000   		.align	2
 631              		.type	bar_index, %object
 632              		.size	bar_index, 4
 633              	bar_index:
 634 0064 00000000 		.space	4
 635              		.comm	knobs,4,4
 636              		.comm	prevKnobs,4,4
 637              		.comm	knobs7bit,4,4
 638              		.comm	prevKnobs7bit,4,4
 639              		.global	u7bit_volumePedal
 640              		.type	u7bit_volumePedal, %object
 641              		.size	u7bit_volumePedal, 1
 642              	u7bit_volumePedal:
 643 0068 00       		.space	1
 644              		.global	prev_7bit_volumePedal
 645              		.type	prev_7bit_volumePedal, %object
 646              		.size	prev_7bit_volumePedal, 1
 647              	prev_7bit_volumePedal:
 648 0069 00       		.space	1
 649              		.global	SPI2started
 650              		.type	SPI2started, %object
 651              		.size	SPI2started, 1
 652              	SPI2started:
 653 006a 00       		.space	1
 654              		.global	whichMacro
 655              		.type	whichMacro, %object
 656              		.size	whichMacro, 1
 657              	whichMacro:
 658 006b 00       		.space	1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 17


 659              		.comm	macroKnobValues7bit,8,4
 660              		.comm	prevMacroKnobValues7bit,8,4
 661              		.section	.text.spis_2_ss,"ax",%progbits
 662              		.align	2
 663              		.global	spis_2_ss
 664              		.thumb
 665              		.thumb_func
 666              		.type	spis_2_ss, %function
 667              	spis_2_ss:
 668              	.LFB65:
 253:main.c        **** 
 254:main.c        **** 
 255:main.c        **** 
 256:main.c        **** uint8_t spiAdjusted = 0;
 257:main.c        **** uint8_t mySpiCounter = 0;
 258:main.c        **** volatile uint16_t offsetErrorCount = 0;
 259:main.c        **** volatile uint8_t SPI2errorflag = 0;
 260:main.c        **** volatile int bar_index = 0;
 261:main.c        **** uint8_t knobs[4];
 262:main.c        **** uint8_t prevKnobs[4];
 263:main.c        **** 
 264:main.c        **** uint8_t knobs7bit[4];
 265:main.c        **** uint8_t prevKnobs7bit[4];
 266:main.c        **** 
 267:main.c        **** uint8_t u7bit_volumePedal = 0;
 268:main.c        **** uint8_t prev_7bit_volumePedal = 0;
 269:main.c        **** volatile uint8_t SPI2started = 0;
 270:main.c        **** 
 271:main.c        **** uint8_t whichMacro = 0;
 272:main.c        **** 
 273:main.c        **** uint8_t macroKnobValues7bit[8];
 274:main.c        **** uint8_t prevMacroKnobValues7bit[8];
 275:main.c        **** 
 276:main.c        **** 
 277:main.c        **** CY_ISR(spis_2_ss)
 278:main.c        **** {
 669              		.loc 1 278 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 1, uses_anonymous_args = 0
 673 0000 80B5     		push	{r7, lr}
 674              		.cfi_def_cfa_offset 8
 675              		.cfi_offset 7, -8
 676              		.cfi_offset 14, -4
 677 0002 00AF     		add	r7, sp, #0
 678              		.cfi_def_cfa_register 7
 279:main.c        **** 
 280:main.c        ****     currentBarBuffer = !currentBarBuffer;
 679              		.loc 1 280 0
 680 0004 214B     		ldr	r3, .L8
 681 0006 1B78     		ldrb	r3, [r3]
 682 0008 DBB2     		uxtb	r3, r3
 683 000a 002B     		cmp	r3, #0
 684 000c 0CBF     		ite	eq
 685 000e 0123     		moveq	r3, #1
 686 0010 0023     		movne	r3, #0
 687 0012 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 18


 688 0014 1A46     		mov	r2, r3
 689 0016 1D4B     		ldr	r3, .L8
 690 0018 1A70     		strb	r2, [r3]
 281:main.c        ****     SPIS_2_ClearRxBuffer();
 691              		.loc 1 281 0
 692 001a FFF7FEFF 		bl	SPIS_2_ClearRxBuffer
 282:main.c        ****     CyDmaClearPendingDrq(rx2Channel);
 693              		.loc 1 282 0
 694 001e 1C4B     		ldr	r3, .L8+4
 695 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 696 0022 1846     		mov	r0, r3
 697 0024 FFF7FEFF 		bl	CyDmaClearPendingDrq
 283:main.c        **** 
 284:main.c        ****     //set up the next DMA transaction
 285:main.c        ****     CyDmaTdSetConfiguration(rx2TD[currentBarBuffer], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_AD
 698              		.loc 1 285 0
 699 0028 184B     		ldr	r3, .L8
 700 002a 1B78     		ldrb	r3, [r3]
 701 002c DBB2     		uxtb	r3, r3
 702 002e 1A46     		mov	r2, r3
 703 0030 184B     		ldr	r3, .L8+8
 704 0032 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 705 0034 0623     		movs	r3, #6
 706 0036 FE22     		movs	r2, #254
 707 0038 0821     		movs	r1, #8
 708 003a FFF7FEFF 		bl	CyDmaTdSetConfiguration
 286:main.c        ****     CyDmaTdSetAddress(rx2TD[currentBarBuffer], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBu
 709              		.loc 1 286 0
 710 003e 134B     		ldr	r3, .L8
 711 0040 1B78     		ldrb	r3, [r3]
 712 0042 DBB2     		uxtb	r3, r3
 713 0044 1A46     		mov	r2, r3
 714 0046 134B     		ldr	r3, .L8+8
 715 0048 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 716 004a 104B     		ldr	r3, .L8
 717 004c 1B78     		ldrb	r3, [r3]
 718 004e DBB2     		uxtb	r3, r3
 719 0050 DB00     		lsls	r3, r3, #3
 720 0052 114A     		ldr	r2, .L8+12
 721 0054 1344     		add	r3, r3, r2
 722 0056 9BB2     		uxth	r3, r3
 723 0058 1A46     		mov	r2, r3
 724 005a 46F25551 		movw	r1, #25941
 725 005e FFF7FEFF 		bl	CyDmaTdSetAddress
 287:main.c        ****     CyDmaChSetInitialTd(rx2Channel, rx2TD[currentBarBuffer]);
 726              		.loc 1 287 0
 727 0062 0B4B     		ldr	r3, .L8+4
 728 0064 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 729 0066 094B     		ldr	r3, .L8
 730 0068 1B78     		ldrb	r3, [r3]
 731 006a DBB2     		uxtb	r3, r3
 732 006c 1946     		mov	r1, r3
 733 006e 094B     		ldr	r3, .L8+8
 734 0070 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 735 0072 1946     		mov	r1, r3
 736 0074 1046     		mov	r0, r2
 737 0076 FFF7FEFF 		bl	CyDmaChSetInitialTd
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 19


 288:main.c        ****     CyDmaChEnable(rx2Channel, 1);
 738              		.loc 1 288 0
 739 007a 054B     		ldr	r3, .L8+4
 740 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 741 007e 0121     		movs	r1, #1
 742 0080 1846     		mov	r0, r3
 743 0082 FFF7FEFF 		bl	CyDmaChEnable
 289:main.c        **** }
 744              		.loc 1 289 0
 745 0086 00BF     		nop
 746 0088 80BD     		pop	{r7, pc}
 747              	.L9:
 748 008a 00BF     		.align	2
 749              	.L8:
 750 008c 00000000 		.word	currentBarBuffer
 751 0090 00000000 		.word	rx2Channel
 752 0094 00000000 		.word	rx2TD
 753 0098 00000000 		.word	rxBufferBar
 754              		.cfi_endproc
 755              	.LFE65:
 756              		.size	spis_2_ss, .-spis_2_ss
 757              		.bss
 758              		.align	2
 759              	eepromArray:
 760 006c 0000     		.space	2
 761              		.global	array
 762 006e 0000     		.align	2
 763              		.type	array, %object
 764              		.size	array, 2
 765              	array:
 766 0070 0000     		.space	2
 767              		.comm	eepromReturnValue,1,1
 768              		.global	Em_EEPROM_em_EepromStorage
 769              		.section	.rodata
 770              		.align	8
 771              		.type	Em_EEPROM_em_EepromStorage, %object
 772              		.size	Em_EEPROM_em_EepromStorage, 1024
 773              	Em_EEPROM_em_EepromStorage:
 774 0000 00000000 		.space	1024
 774      00000000 
 774      00000000 
 774      00000000 
 774      00000000 
 775              		.comm	eeprom_cnt,1,1
 776              		.comm	status,4,4
 777              		.comm	ptr,4,4
 778              		.global	barCount
 779              		.bss
 780 0072 0000     		.align	2
 781              		.type	barCount, %object
 782              		.size	barCount, 4
 783              	barCount:
 784 0074 00000000 		.space	4
 785              		.section	.text.Vbus_function,"ax",%progbits
 786              		.align	2
 787              		.global	Vbus_function
 788              		.thumb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 20


 789              		.thumb_func
 790              		.type	Vbus_function, %function
 791              	Vbus_function:
 792              	.LFB66:
 290:main.c        **** 
 291:main.c        **** 
 292:main.c        ****     static uint8 CYCODE eepromArray[]={ 0, 0 };
 293:main.c        ****                                             
 294:main.c        ****     uint8 array[] ={ 0, 0 };
 295:main.c        ****                                 
 296:main.c        ****     /*Return status for EEPROM and UART*/ 
 297:main.c        **** cy_en_em_eeprom_status_t eepromReturnValue;
 298:main.c        **** 
 299:main.c        **** 
 300:main.c        **** /* EEPROM storage in work flash, this is defined in Em_EEPROM.c*/
 301:main.c        **** #if defined (__ICCARM__)
 302:main.c        **** #pragma data_alignment = CY_FLASH_SIZEOF_ROW
 303:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE] = {0u};
 304:main.c        **** #else
 305:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE]
 306:main.c        **** __ALIGNED(CY_FLASH_SIZEOF_ROW) = {0u};
 307:main.c        **** #endif /* defined (__ICCARM__) */
 308:main.c        **** 
 309:main.c        ****     uint8 eeprom_cnt;
 310:main.c        ****     cystatus status;
 311:main.c        ****     volatile const uint8 * ptr;
 312:main.c        **** volatile int barCount = 0;
 313:main.c        **** 
 314:main.c        **** //#define I2C_1_TIMEOUT_ENABLE 1u //overwrites the default in the i2c block
 315:main.c        ****     
 316:main.c        **** //this ISR should happen when a USB cable is plugged in or unplugged.
 317:main.c        **** 
 318:main.c        **** CY_ISR(Vbus_function)
 319:main.c        **** {
 793              		.loc 1 319 0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 0
 796              		@ frame_needed = 1, uses_anonymous_args = 0
 797 0000 80B5     		push	{r7, lr}
 798              		.cfi_def_cfa_offset 8
 799              		.cfi_offset 7, -8
 800              		.cfi_offset 14, -4
 801 0002 00AF     		add	r7, sp, #0
 802              		.cfi_def_cfa_register 7
 320:main.c        ****     //plug or unplug event
 321:main.c        ****     //check if eeprom has a flag saying you just restarted. If so, don't restart again
 322:main.c        ****     //otherwise, restart
 323:main.c        ****     my_Vbus_ISR_ClearPending();
 803              		.loc 1 323 0
 804 0004 FFF7FEFF 		bl	my_Vbus_ISR_ClearPending
 324:main.c        ****     vBusPin_ClearInterrupt();
 805              		.loc 1 324 0
 806 0008 FFF7FEFF 		bl	vBusPin_ClearInterrupt
 325:main.c        ****     restartSystemCheck();
 807              		.loc 1 325 0
 808 000c FFF7FEFF 		bl	restartSystemCheck
 326:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 21


 327:main.c        **** }
 809              		.loc 1 327 0
 810 0010 00BF     		nop
 811 0012 80BD     		pop	{r7, pc}
 812              		.cfi_endproc
 813              	.LFE66:
 814              		.size	Vbus_function, .-Vbus_function
 815              		.section	.text.restartSystemCheck,"ax",%progbits
 816              		.align	2
 817              		.global	restartSystemCheck
 818              		.thumb
 819              		.thumb_func
 820              		.type	restartSystemCheck, %function
 821              	restartSystemCheck:
 822              	.LFB67:
 328:main.c        **** 
 329:main.c        **** void restartSystemCheck()
 330:main.c        **** {
 823              		.loc 1 330 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 1, uses_anonymous_args = 0
 827 0000 80B5     		push	{r7, lr}
 828              		.cfi_def_cfa_offset 8
 829              		.cfi_offset 7, -8
 830              		.cfi_offset 14, -4
 831 0002 00AF     		add	r7, sp, #0
 832              		.cfi_def_cfa_register 7
 331:main.c        ****     eepromReturnValue = Em_EEPROM_Read(0u, eepromArray, 2u);
 833              		.loc 1 331 0
 834 0004 184B     		ldr	r3, .L15
 835 0006 0222     		movs	r2, #2
 836 0008 1849     		ldr	r1, .L15+4
 837 000a 0020     		movs	r0, #0
 838 000c FFF7FEFF 		bl	Cy_Em_EEPROM_Read
 839 0010 0346     		mov	r3, r0
 840 0012 1A46     		mov	r2, r3
 841 0014 164B     		ldr	r3, .L15+8
 842 0016 1A70     		strb	r2, [r3]
 332:main.c        ****     //only do the restart check if there is a USB cable plugged in (to avoid restarting while tryin
 333:main.c        ****     if (USB_VBusPresent() == 1)
 843              		.loc 1 333 0
 844 0018 FFF7FEFF 		bl	USB_VBusPresent
 845 001c 0346     		mov	r3, r0
 846 001e 012B     		cmp	r3, #1
 847 0020 20D1     		bne	.L14
 334:main.c        ****     {
 335:main.c        ****         if (*(volatile uint8 *) &eepromArray[0] == 1u)
 848              		.loc 1 335 0
 849 0022 124B     		ldr	r3, .L15+4
 850 0024 1B78     		ldrb	r3, [r3]
 851 0026 DBB2     		uxtb	r3, r3
 852 0028 012B     		cmp	r3, #1
 853 002a 0CD1     		bne	.L13
 336:main.c        ****         {
 337:main.c        ****             //a flag says we just restarted
 338:main.c        ****             //write a zero so it knows next time that it's OK to restart
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 22


 339:main.c        ****             array[0] = 0;
 854              		.loc 1 339 0
 855 002c 114B     		ldr	r3, .L15+12
 856 002e 0022     		movs	r2, #0
 857 0030 1A70     		strb	r2, [r3]
 340:main.c        ****             Em_EEPROM_Write(0u,array,2u);     
 858              		.loc 1 340 0
 859 0032 0D4B     		ldr	r3, .L15
 860 0034 0222     		movs	r2, #2
 861 0036 0F49     		ldr	r1, .L15+12
 862 0038 0020     		movs	r0, #0
 863 003a FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 341:main.c        ****             USB_check_flag = 1;
 864              		.loc 1 341 0
 865 003e 0E4B     		ldr	r3, .L15+16
 866 0040 0122     		movs	r2, #1
 867 0042 1A70     		strb	r2, [r3]
 342:main.c        ****         }
 343:main.c        ****         else
 344:main.c        ****         {
 345:main.c        ****            //otherwise, we need to restart
 346:main.c        ****            array[0] = 1;
 347:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 348:main.c        ****             USB_Stop();
 349:main.c        ****             I2C_1_Stop();
 350:main.c        ****             CySoftwareReset();
 351:main.c        ****         }
 352:main.c        ****     }
 353:main.c        **** }
 868              		.loc 1 353 0
 869 0044 0EE0     		b	.L14
 870              	.L13:
 346:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 871              		.loc 1 346 0
 872 0046 0B4B     		ldr	r3, .L15+12
 873 0048 0122     		movs	r2, #1
 874 004a 1A70     		strb	r2, [r3]
 347:main.c        ****             USB_Stop();
 875              		.loc 1 347 0
 876 004c 064B     		ldr	r3, .L15
 877 004e 0222     		movs	r2, #2
 878 0050 0849     		ldr	r1, .L15+12
 879 0052 0020     		movs	r0, #0
 880 0054 FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 348:main.c        ****             I2C_1_Stop();
 881              		.loc 1 348 0
 882 0058 FFF7FEFF 		bl	USB_Stop
 349:main.c        ****             CySoftwareReset();
 883              		.loc 1 349 0
 884 005c FFF7FEFF 		bl	I2C_1_Stop
 350:main.c        ****         }
 885              		.loc 1 350 0
 886 0060 FFF7FEFF 		bl	CySoftwareReset
 887              	.L14:
 888              		.loc 1 353 0
 889 0064 00BF     		nop
 890 0066 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 23


 891              	.L16:
 892              		.align	2
 893              	.L15:
 894 0068 00000000 		.word	Em_EEPROM_context
 895 006c 6C000000 		.word	eepromArray
 896 0070 00000000 		.word	eepromReturnValue
 897 0074 00000000 		.word	array
 898 0078 00000000 		.word	USB_check_flag
 899              		.cfi_endproc
 900              	.LFE67:
 901              		.size	restartSystemCheck, .-restartSystemCheck
 902              		.global	__aeabi_fcmpgt
 903              		.global	__aeabi_fcmplt
 904              		.section	.text.LEAF_clip,"ax",%progbits
 905              		.align	2
 906              		.global	LEAF_clip
 907              		.thumb
 908              		.thumb_func
 909              		.type	LEAF_clip, %function
 910              	LEAF_clip:
 911              	.LFB68:
 354:main.c        ****     
 355:main.c        **** #define INV_440 0.0022727272727273f
 356:main.c        **** 
 357:main.c        **** float   LEAF_clip(float min, float val, float max)
 358:main.c        **** {
 912              		.loc 1 358 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 24
 915              		@ frame_needed = 1, uses_anonymous_args = 0
 916 0000 80B5     		push	{r7, lr}
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 7, -8
 919              		.cfi_offset 14, -4
 920 0002 86B0     		sub	sp, sp, #24
 921              		.cfi_def_cfa_offset 32
 922 0004 00AF     		add	r7, sp, #0
 923              		.cfi_def_cfa_register 7
 924 0006 F860     		str	r0, [r7, #12]	@ float
 925 0008 B960     		str	r1, [r7, #8]	@ float
 926 000a 7A60     		str	r2, [r7, #4]	@ float
 359:main.c        ****     float tempmin = min;
 927              		.loc 1 359 0
 928 000c FB68     		ldr	r3, [r7, #12]	@ float
 929 000e 7B61     		str	r3, [r7, #20]	@ float
 360:main.c        ****     float tempmax = max;
 930              		.loc 1 360 0
 931 0010 7B68     		ldr	r3, [r7, #4]	@ float
 932 0012 3B61     		str	r3, [r7, #16]	@ float
 361:main.c        ****     if (min > max)
 933              		.loc 1 361 0
 934 0014 7968     		ldr	r1, [r7, #4]	@ float
 935 0016 F868     		ldr	r0, [r7, #12]	@ float
 936 0018 FFF7FEFF 		bl	__aeabi_fcmpgt
 937 001c 0346     		mov	r3, r0
 938 001e 002B     		cmp	r3, #0
 939 0020 03D0     		beq	.L18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 24


 362:main.c        ****     {
 363:main.c        ****         tempmin = max;
 940              		.loc 1 363 0
 941 0022 7B68     		ldr	r3, [r7, #4]	@ float
 942 0024 7B61     		str	r3, [r7, #20]	@ float
 364:main.c        ****         tempmax = min;
 943              		.loc 1 364 0
 944 0026 FB68     		ldr	r3, [r7, #12]	@ float
 945 0028 3B61     		str	r3, [r7, #16]	@ float
 946              	.L18:
 365:main.c        ****     }
 366:main.c        ****     if (val < tempmin)
 947              		.loc 1 366 0
 948 002a 7969     		ldr	r1, [r7, #20]	@ float
 949 002c B868     		ldr	r0, [r7, #8]	@ float
 950 002e FFF7FEFF 		bl	__aeabi_fcmplt
 951 0032 0346     		mov	r3, r0
 952 0034 002B     		cmp	r3, #0
 953 0036 01D0     		beq	.L28
 367:main.c        ****     {
 368:main.c        ****         return tempmin;
 954              		.loc 1 368 0
 955 0038 7B69     		ldr	r3, [r7, #20]	@ float
 956 003a 09E0     		b	.L22
 957              	.L28:
 369:main.c        ****     }
 370:main.c        ****     else if (val > tempmax)
 958              		.loc 1 370 0
 959 003c 3969     		ldr	r1, [r7, #16]	@ float
 960 003e B868     		ldr	r0, [r7, #8]	@ float
 961 0040 FFF7FEFF 		bl	__aeabi_fcmpgt
 962 0044 0346     		mov	r3, r0
 963 0046 002B     		cmp	r3, #0
 964 0048 01D0     		beq	.L29
 371:main.c        ****     {
 372:main.c        ****         return tempmax;
 965              		.loc 1 372 0
 966 004a 3B69     		ldr	r3, [r7, #16]	@ float
 967 004c 00E0     		b	.L22
 968              	.L29:
 373:main.c        ****     }
 374:main.c        ****     else
 375:main.c        ****     {
 376:main.c        ****         return val;
 969              		.loc 1 376 0
 970 004e BB68     		ldr	r3, [r7, #8]	@ float
 971              	.L22:
 377:main.c        ****     }
 378:main.c        **** }
 972              		.loc 1 378 0
 973 0050 1846     		mov	r0, r3
 974 0052 1837     		adds	r7, r7, #24
 975              		.cfi_def_cfa_offset 8
 976 0054 BD46     		mov	sp, r7
 977              		.cfi_def_cfa_register 13
 978              		@ sp needed
 979 0056 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 25


 980              		.cfi_endproc
 981              	.LFE68:
 982              		.size	LEAF_clip, .-LEAF_clip
 983              		.global	__aeabi_fcmple
 984              		.global	__aeabi_fmul
 985              		.section	.text.mtof,"ax",%progbits
 986              		.align	2
 987              		.global	mtof
 988              		.thumb
 989              		.thumb_func
 990              		.type	mtof, %function
 991              	mtof:
 992              	.LFB69:
 379:main.c        **** float mtof(float f)
 380:main.c        **** {
 993              		.loc 1 380 0
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 8
 996              		@ frame_needed = 1, uses_anonymous_args = 0
 997 0000 80B5     		push	{r7, lr}
 998              		.cfi_def_cfa_offset 8
 999              		.cfi_offset 7, -8
 1000              		.cfi_offset 14, -4
 1001 0002 82B0     		sub	sp, sp, #8
 1002              		.cfi_def_cfa_offset 16
 1003 0004 00AF     		add	r7, sp, #0
 1004              		.cfi_def_cfa_register 7
 1005 0006 7860     		str	r0, [r7, #4]	@ float
 381:main.c        ****     if (f <= -1500.0f) return(0);
 1006              		.loc 1 381 0
 1007 0008 1349     		ldr	r1, .L40
 1008 000a 7868     		ldr	r0, [r7, #4]	@ float
 1009 000c FFF7FEFF 		bl	__aeabi_fcmple
 1010 0010 0346     		mov	r3, r0
 1011 0012 002B     		cmp	r3, #0
 1012 0014 02D0     		beq	.L38
 1013              		.loc 1 381 0 is_stmt 0 discriminator 1
 1014 0016 4FF00003 		mov	r3, #0
 1015 001a 19E0     		b	.L33
 1016              	.L38:
 382:main.c        ****     else if (f > 1499.0f) return(mtof(1499.0f));
 1017              		.loc 1 382 0 is_stmt 1
 1018 001c 0F49     		ldr	r1, .L40+4
 1019 001e 7868     		ldr	r0, [r7, #4]	@ float
 1020 0020 FFF7FEFF 		bl	__aeabi_fcmpgt
 1021 0024 0346     		mov	r3, r0
 1022 0026 002B     		cmp	r3, #0
 1023 0028 04D0     		beq	.L39
 1024              		.loc 1 382 0 is_stmt 0 discriminator 1
 1025 002a 0C48     		ldr	r0, .L40+4
 1026 002c FFF7FEFF 		bl	mtof
 1027 0030 0346     		mov	r3, r0
 1028 0032 0DE0     		b	.L33
 1029              	.L39:
 383:main.c        ****     else return (8.17579891564f * expf(0.0577622650f * f));
 1030              		.loc 1 383 0 is_stmt 1
 1031 0034 0A49     		ldr	r1, .L40+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 26


 1032 0036 7868     		ldr	r0, [r7, #4]	@ float
 1033 0038 FFF7FEFF 		bl	__aeabi_fmul
 1034 003c 0346     		mov	r3, r0
 1035 003e 1846     		mov	r0, r3
 1036 0040 FFF7FEFF 		bl	expf
 1037 0044 0346     		mov	r3, r0
 1038 0046 0749     		ldr	r1, .L40+12
 1039 0048 1846     		mov	r0, r3
 1040 004a FFF7FEFF 		bl	__aeabi_fmul
 1041 004e 0346     		mov	r3, r0
 1042              	.L33:
 384:main.c        **** }
 1043              		.loc 1 384 0
 1044 0050 1846     		mov	r0, r3
 1045 0052 0837     		adds	r7, r7, #8
 1046              		.cfi_def_cfa_offset 8
 1047 0054 BD46     		mov	sp, r7
 1048              		.cfi_def_cfa_register 13
 1049              		@ sp needed
 1050 0056 80BD     		pop	{r7, pc}
 1051              	.L41:
 1052              		.align	2
 1053              	.L40:
 1054 0058 0080BBC4 		.word	-994344960
 1055 005c 0060BB44 		.word	1153130496
 1056 0060 20986C3D 		.word	1030527008
 1057 0064 13D00241 		.word	1090703379
 1058              		.cfi_endproc
 1059              	.LFE69:
 1060              		.size	mtof, .-mtof
 1061              		.section	.text.ftom,"ax",%progbits
 1062              		.align	2
 1063              		.global	ftom
 1064              		.thumb
 1065              		.thumb_func
 1066              		.type	ftom, %function
 1067              	ftom:
 1068              	.LFB70:
 385:main.c        **** 
 386:main.c        **** float ftom(float f)
 387:main.c        **** {
 1069              		.loc 1 387 0
 1070              		.cfi_startproc
 1071              		@ args = 0, pretend = 0, frame = 8
 1072              		@ frame_needed = 1, uses_anonymous_args = 0
 1073 0000 80B5     		push	{r7, lr}
 1074              		.cfi_def_cfa_offset 8
 1075              		.cfi_offset 7, -8
 1076              		.cfi_offset 14, -4
 1077 0002 82B0     		sub	sp, sp, #8
 1078              		.cfi_def_cfa_offset 16
 1079 0004 00AF     		add	r7, sp, #0
 1080              		.cfi_def_cfa_register 7
 1081 0006 7860     		str	r0, [r7, #4]	@ float
 388:main.c        ****     return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 1082              		.loc 1 388 0
 1083 0008 4FF00001 		mov	r1, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 27


 1084 000c 7868     		ldr	r0, [r7, #4]	@ float
 1085 000e FFF7FEFF 		bl	__aeabi_fcmpgt
 1086 0012 0346     		mov	r3, r0
 1087 0014 002B     		cmp	r3, #0
 1088 0016 0ED0     		beq	.L48
 1089              		.loc 1 388 0 is_stmt 0 discriminator 1
 1090 0018 0949     		ldr	r1, .L49
 1091 001a 7868     		ldr	r0, [r7, #4]	@ float
 1092 001c FFF7FEFF 		bl	__aeabi_fmul
 1093 0020 0346     		mov	r3, r0
 1094 0022 1846     		mov	r0, r3
 1095 0024 FFF7FEFF 		bl	logf
 1096 0028 0346     		mov	r3, r0
 1097 002a 0649     		ldr	r1, .L49+4
 1098 002c 1846     		mov	r0, r3
 1099 002e FFF7FEFF 		bl	__aeabi_fmul
 1100 0032 0346     		mov	r3, r0
 1101 0034 00E0     		b	.L46
 1102              	.L48:
 1103              		.loc 1 388 0 discriminator 2
 1104 0036 044B     		ldr	r3, .L49+8
 1105              	.L46:
 389:main.c        **** }
 1106              		.loc 1 389 0 is_stmt 1 discriminator 5
 1107 0038 1846     		mov	r0, r3
 1108 003a 0837     		adds	r7, r7, #8
 1109              		.cfi_def_cfa_offset 8
 1110 003c BD46     		mov	sp, r7
 1111              		.cfi_def_cfa_register 13
 1112              		@ sp needed
 1113 003e 80BD     		pop	{r7, pc}
 1114              	.L50:
 1115              		.align	2
 1116              	.L49:
 1117 0040 D27EFA3D 		.word	1039826642
 1118 0044 AC7F8A41 		.word	1099595692
 1119 0048 0080BBC4 		.word	-994344960
 1120              		.cfi_endproc
 1121              	.LFE70:
 1122              		.size	ftom, .-ftom
 1123              		.global	__aeabi_fsub
 1124              		.global	__aeabi_fadd
 1125              		.section	.text.LEAF_interpolation_linear,"ax",%progbits
 1126              		.align	2
 1127              		.global	LEAF_interpolation_linear
 1128              		.thumb
 1129              		.thumb_func
 1130              		.type	LEAF_interpolation_linear, %function
 1131              	LEAF_interpolation_linear:
 1132              	.LFB71:
 390:main.c        **** 
 391:main.c        **** // alpha, [0.0, 1.0]
 392:main.c        **** float LEAF_interpolation_linear (float A, float B, float alpha)
 393:main.c        **** {
 1133              		.loc 1 393 0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 28


 1136              		@ frame_needed = 1, uses_anonymous_args = 0
 1137 0000 80B5     		push	{r7, lr}
 1138              		.cfi_def_cfa_offset 8
 1139              		.cfi_offset 7, -8
 1140              		.cfi_offset 14, -4
 1141 0002 86B0     		sub	sp, sp, #24
 1142              		.cfi_def_cfa_offset 32
 1143 0004 00AF     		add	r7, sp, #0
 1144              		.cfi_def_cfa_register 7
 1145 0006 F860     		str	r0, [r7, #12]	@ float
 1146 0008 B960     		str	r1, [r7, #8]	@ float
 1147 000a 7A60     		str	r2, [r7, #4]	@ float
 394:main.c        ****     float omAlpha = 1.0f - alpha;
 1148              		.loc 1 394 0
 1149 000c 7968     		ldr	r1, [r7, #4]	@ float
 1150 000e 4FF07E50 		mov	r0, #1065353216
 1151 0012 FFF7FEFF 		bl	__aeabi_fsub
 1152 0016 0346     		mov	r3, r0
 1153 0018 7B61     		str	r3, [r7, #20]	@ float
 395:main.c        ****     
 396:main.c        ****     // First 1/2 of interpolation
 397:main.c        ****     float out = A * omAlpha;
 1154              		.loc 1 397 0
 1155 001a 7969     		ldr	r1, [r7, #20]	@ float
 1156 001c F868     		ldr	r0, [r7, #12]	@ float
 1157 001e FFF7FEFF 		bl	__aeabi_fmul
 1158 0022 0346     		mov	r3, r0
 1159 0024 3B61     		str	r3, [r7, #16]	@ float
 398:main.c        ****     
 399:main.c        ****     out += B * alpha;
 1160              		.loc 1 399 0
 1161 0026 7968     		ldr	r1, [r7, #4]	@ float
 1162 0028 B868     		ldr	r0, [r7, #8]	@ float
 1163 002a FFF7FEFF 		bl	__aeabi_fmul
 1164 002e 0346     		mov	r3, r0
 1165 0030 1946     		mov	r1, r3
 1166 0032 3869     		ldr	r0, [r7, #16]	@ float
 1167 0034 FFF7FEFF 		bl	__aeabi_fadd
 1168 0038 0346     		mov	r3, r0
 1169 003a 3B61     		str	r3, [r7, #16]	@ float
 400:main.c        ****     
 401:main.c        ****     return out;
 1170              		.loc 1 401 0
 1171 003c 3B69     		ldr	r3, [r7, #16]	@ float
 402:main.c        **** }
 1172              		.loc 1 402 0
 1173 003e 1846     		mov	r0, r3
 1174 0040 1837     		adds	r7, r7, #24
 1175              		.cfi_def_cfa_offset 8
 1176 0042 BD46     		mov	sp, r7
 1177              		.cfi_def_cfa_register 13
 1178              		@ sp needed
 1179 0044 80BD     		pop	{r7, pc}
 1180              		.cfi_endproc
 1181              	.LFE71:
 1182              		.size	LEAF_interpolation_linear, .-LEAF_interpolation_linear
 1183              		.comm	I2Cbuff1,256,4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 29


 1184              		.comm	I2Cbuff2,16,4
 1185              		.global	send_it
 1186 0046 00BF     		.bss
 1187              		.type	send_it, %object
 1188              		.size	send_it, 1
 1189              	send_it:
 1190 0078 00       		.space	1
 1191              		.global	mux_states
 1192              		.data
 1193 000e 0000     		.align	2
 1194              		.type	mux_states, %object
 1195              		.size	mux_states, 24
 1196              	mux_states:
 1197 0010 05       		.byte	5
 1198 0011 00       		.byte	0
 1199 0012 05       		.byte	5
 1200 0013 01       		.byte	1
 1201 0014 05       		.byte	5
 1202 0015 02       		.byte	2
 1203 0016 05       		.byte	5
 1204 0017 03       		.byte	3
 1205 0018 05       		.byte	5
 1206 0019 04       		.byte	4
 1207 001a 00       		.byte	0
 1208 001b 00       		.byte	0
 1209 001c 01       		.byte	1
 1210 001d 00       		.byte	0
 1211 001e 03       		.byte	3
 1212 001f 00       		.byte	0
 1213 0020 04       		.byte	4
 1214 0021 00       		.byte	0
 1215 0022 02       		.byte	2
 1216 0023 00       		.byte	0
 1217 0024 05       		.byte	5
 1218 0025 05       		.byte	5
 1219 0026 06       		.byte	6
 1220 0027 00       		.byte	0
 1221              		.global	i2c_skipped
 1222              		.bss
 1223 0079 000000   		.align	2
 1224              		.type	i2c_skipped, %object
 1225              		.size	i2c_skipped, 12
 1226              	i2c_skipped:
 1227 007c 00000000 		.space	12
 1227      00000000 
 1227      00000000 
 1228              		.global	pedals_low
 1229              		.data
 1230              		.align	2
 1231              		.type	pedals_low, %object
 1232              		.size	pedals_low, 20
 1233              	pedals_low:
 1234 0028 830A     		.short	2691
 1235 002a 0109     		.short	2305
 1236 002c 9909     		.short	2457
 1237 002e 0E02     		.short	526
 1238 0030 9A0E     		.short	3738
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 30


 1239 0032 0309     		.short	2307
 1240 0034 C60B     		.short	3014
 1241 0036 8E08     		.short	2190
 1242 0038 E90A     		.short	2793
 1243 003a 2605     		.short	1318
 1244              		.global	pedals_high
 1245              		.align	2
 1246              		.type	pedals_high, %object
 1247              		.size	pedals_high, 20
 1248              	pedals_high:
 1249 003c ED0A     		.short	2797
 1250 003e 6509     		.short	2405
 1251 0040 140A     		.short	2580
 1252 0042 8702     		.short	647
 1253 0044 0E0F     		.short	3854
 1254 0046 9D09     		.short	2461
 1255 0048 450C     		.short	3141
 1256 004a 3109     		.short	2353
 1257 004c 760B     		.short	2934
 1258 004e E005     		.short	1504
 1259              		.global	pedals_lowWithDeadZone
 1260              		.align	2
 1261              		.type	pedals_lowWithDeadZone, %object
 1262              		.size	pedals_lowWithDeadZone, 20
 1263              	pedals_lowWithDeadZone:
 1264 0050 830A     		.short	2691
 1265 0052 0109     		.short	2305
 1266 0054 9909     		.short	2457
 1267 0056 0E02     		.short	526
 1268 0058 9A0E     		.short	3738
 1269 005a 0309     		.short	2307
 1270 005c C60B     		.short	3014
 1271 005e 8E08     		.short	2190
 1272 0060 E90A     		.short	2793
 1273 0062 2605     		.short	1318
 1274              		.global	pedals_highWithDeadZone
 1275              		.align	2
 1276              		.type	pedals_highWithDeadZone, %object
 1277              		.size	pedals_highWithDeadZone, 20
 1278              	pedals_highWithDeadZone:
 1279 0064 ED0A     		.short	2797
 1280 0066 6509     		.short	2405
 1281 0068 140A     		.short	2580
 1282 006a 8702     		.short	647
 1283 006c 0E0F     		.short	3854
 1284 006e 9D09     		.short	2461
 1285 0070 450C     		.short	3141
 1286 0072 3109     		.short	2353
 1287 0074 760B     		.short	2934
 1288 0076 E005     		.short	1504
 1289              		.global	deadzone
 1290              		.align	1
 1291              		.type	deadzone, %object
 1292              		.size	deadzone, 2
 1293              	deadzone:
 1294 0078 9600     		.short	150
 1295              		.global	volumePedal
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 31


 1296              		.align	1
 1297              		.type	volumePedal, %object
 1298              		.size	volumePedal, 2
 1299              	volumePedal:
 1300 007a FF0F     		.short	4095
 1301              		.comm	processed_pedals,20,4
 1302              		.comm	prev_processed_pedals,20,4
 1303              		.comm	pedals8bit,10,4
 1304              		.comm	pedals7bit,10,4
 1305              		.comm	prevPedals7bit,10,4
 1306              		.comm	prev_processed_volumePedal,2,2
 1307              		.comm	processed_volumePedal,2,2
 1308              		.comm	fretMeasurements,48,4
 1309              		.global	currentPresetSelection
 1310              		.bss
 1311              		.align	2
 1312              		.type	currentPresetSelection, %object
 1313              		.size	currentPresetSelection, 4
 1314              	currentPresetSelection:
 1315 0088 00000000 		.space	4
 1316              		.comm	presetNamesArray,896,4
 1317              		.global	presetNumberToLoad
 1318              		.type	presetNumberToLoad, %object
 1319              		.size	presetNumberToLoad, 1
 1320              	presetNumberToLoad:
 1321 008c 00       		.space	1
 1322              		.global	presetLoadedResponse
 1323              		.data
 1324              		.align	2
 1325              		.type	presetLoadedResponse, %object
 1326              		.size	presetLoadedResponse, 2
 1327              	presetLoadedResponse:
 1328 007c FF       		.byte	-1
 1329 007d 00       		.byte	0
 1330              		.comm	macroNamesArray,7168,4
 1331              		.global	fretScaling
 1332 007e 0000     		.align	2
 1333              		.type	fretScaling, %object
 1334              		.size	fretScaling, 48
 1335              	fretScaling:
 1336 0080 0000803F 		.word	1065353216
 1337 0084 BAA1713F 		.word	1064411578
 1338 0088 F644573F 		.word	1062683894
 1339 008c 8EC83F3F 		.word	1061144718
 1340 0090 0ADC2A3F 		.word	1059773450
 1341 0094 F837183F 		.word	1058551800
 1342 0098 0000003F 		.word	1056964608
 1343 009c F644D73E 		.word	1054295286
 1344 00a0 8EC8BF3E 		.word	1052756110
 1345 00a4 0ADCAA3E 		.word	1051384842
 1346 00a8 F837983E 		.word	1050163192
 1347 00ac 0000803E 		.word	1048576000
 1348              		.comm	pedalRatios,40,4
 1349              		.global	last_mux
 1350              		.type	last_mux, %object
 1351              		.size	last_mux, 1
 1352              	last_mux:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 32


 1353 00b0 01       		.byte	1
 1354              		.global	main_counter
 1355              		.bss
 1356              		.type	main_counter, %object
 1357              		.size	main_counter, 1
 1358              	main_counter:
 1359 008d 00       		.space	1
 1360              		.global	neck
 1361              		.type	neck, %object
 1362              		.size	neck, 1
 1363              	neck:
 1364 008e 00       		.space	1
 1365              		.global	dualSlider
 1366              		.type	dualSlider, %object
 1367              		.size	dualSlider, 1
 1368              	dualSlider:
 1369 008f 00       		.space	1
 1370              		.global	shiftUp
 1371              		.data
 1372              		.type	shiftUp, %object
 1373              		.size	shiftUp, 1
 1374              	shiftUp:
 1375 00b1 01       		.byte	1
 1376              		.global	voice
 1377              		.bss
 1378              		.type	voice, %object
 1379              		.size	voice, 1
 1380              	voice:
 1381 0090 00       		.space	1
 1382              		.global	editUp
 1383              		.data
 1384              		.type	editUp, %object
 1385              		.size	editUp, 1
 1386              	editUp:
 1387 00b2 01       		.byte	1
 1388              		.global	oct1Up
 1389              		.type	oct1Up, %object
 1390              		.size	oct1Up, 1
 1391              	oct1Up:
 1392 00b3 01       		.byte	1
 1393              		.global	oct4Up
 1394              		.type	oct4Up, %object
 1395              		.size	oct4Up, 1
 1396              	oct4Up:
 1397 00b4 01       		.byte	1
 1398              		.global	encoderUp
 1399              		.type	encoderUp, %object
 1400              		.size	encoderUp, 1
 1401              	encoderUp:
 1402 00b5 01       		.byte	1
 1403              		.comm	encoderVal,16,4
 1404              		.global	encoderNum
 1405              		.bss
 1406 0091 000000   		.align	2
 1407              		.type	encoderNum, %object
 1408              		.size	encoderNum, 4
 1409              	encoderNum:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 33


 1410 0094 00000000 		.space	4
 1411              		.global	button1Up
 1412              		.type	button1Up, %object
 1413              		.size	button1Up, 1
 1414              	button1Up:
 1415 0098 00       		.space	1
 1416              		.global	button2Up
 1417              		.type	button2Up, %object
 1418              		.size	button2Up, 1
 1419              	button2Up:
 1420 0099 00       		.space	1
 1421              		.global	button3Up
 1422              		.type	button3Up, %object
 1423              		.size	button3Up, 1
 1424              	button3Up:
 1425 009a 00       		.space	1
 1426              		.global	button4Up
 1427              		.type	button4Up, %object
 1428              		.size	button4Up, 1
 1429              	button4Up:
 1430 009b 00       		.space	1
 1431              		.global	patchNum
 1432              		.type	patchNum, %object
 1433              		.size	patchNum, 1
 1434              	patchNum:
 1435 009c 00       		.space	1
 1436              		.global	pedal_inverted
 1437 009d 000000   		.align	2
 1438              		.type	pedal_inverted, %object
 1439              		.size	pedal_inverted, 10
 1440              	pedal_inverted:
 1441 00a0 00000000 		.space	10
 1441      00000000 
 1441      0000
 1442              		.comm	copedent,3696,4
 1443              		.comm	copedentNamesArray,98,4
 1444              		.comm	prevStringPitchBend,48,4
 1445              		.comm	pedals,480,4
 1446              		.global	pedal_cc_assignments
 1447              		.data
 1448 00b6 0000     		.align	2
 1449              		.type	pedal_cc_assignments, %object
 1450              		.size	pedal_cc_assignments, 10
 1451              	pedal_cc_assignments:
 1452 00b8 00       		.byte	0
 1453 00b9 01       		.byte	1
 1454 00ba 02       		.byte	2
 1455 00bb 03       		.byte	3
 1456 00bc 04       		.byte	4
 1457 00bd 08       		.byte	8
 1458 00be 09       		.byte	9
 1459 00bf 07       		.byte	7
 1460 00c0 06       		.byte	6
 1461 00c1 05       		.byte	5
 1462              		.comm	openStringFrequencies,48,4
 1463              		.comm	stringMappedPositions,48,4
 1464              		.comm	invStringMappedPositions,48,4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 34


 1465              		.comm	stringFrequencies,48,4
 1466              		.comm	stringOctave,48,4
 1467              		.comm	stringPitch,48,4
 1468              		.comm	stringMIDI,48,4
 1469              		.comm	openStringMIDI_Int,48,4
 1470              		.global	OLEDcount
 1471              		.bss
 1472 00aa 0000     		.align	2
 1473              		.type	OLEDcount, %object
 1474              		.size	OLEDcount, 4
 1475              	OLEDcount:
 1476 00ac 00000000 		.space	4
 1477              		.global	mainOLEDWaitingToSend
 1478              		.align	2
 1479              		.type	mainOLEDWaitingToSend, %object
 1480              		.size	mainOLEDWaitingToSend, 4
 1481              	mainOLEDWaitingToSend:
 1482 00b0 00000000 		.space	4
 1483              		.global	macroOLEDWaitingToSend
 1484              		.align	2
 1485              		.type	macroOLEDWaitingToSend, %object
 1486              		.size	macroOLEDWaitingToSend, 4
 1487              	macroOLEDWaitingToSend:
 1488 00b4 00000000 		.space	4
 1489              		.comm	presetAlreadyDisplayed,256,4
 1490              		.global	pedals_float
 1491              		.align	2
 1492              		.type	pedals_float, %object
 1493              		.size	pedals_float, 40
 1494              	pedals_float:
 1495 00b8 00000000 		.space	40
 1495      00000000 
 1495      00000000 
 1495      00000000 
 1495      00000000 
 1496              		.global	__aeabi_fdiv
 1497              		.section	.text.map,"ax",%progbits
 1498              		.align	2
 1499              		.global	map
 1500              		.thumb
 1501              		.thumb_func
 1502              		.type	map, %function
 1503              	map:
 1504              	.LFB72:
 403:main.c        **** 
 404:main.c        **** 
 405:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode);
 406:main.c        **** uint8 I2C_MasterReadBlocking(uint8 i2CAddr, uint8 nbytes, uint8_t mode);
 407:main.c        **** void USB_service(void);
 408:main.c        **** 
 409:main.c        **** volatile uint8_t I2Cbuff1[256];
 410:main.c        **** volatile uint8_t I2Cbuff2[16];
 411:main.c        **** volatile uint8_t send_it = 0;
 412:main.c        **** 
 413:main.c        **** 
 414:main.c        **** //first mux, 0x70 is first element of array. 
 415:main.c        **** //If sent to output 5 of this first mux, signal goes to 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 35


 416:main.c        **** // the ethernet cable, and a second mux is in the foot pedal at the end of that cable. This channel
 417:main.c        **** //so the order of I2C communication is ( foot pedals 1-5, knee levers 1-5, volume pedal, OLED displ
 418:main.c        **** uint8_t mux_states[12][2] = {{5,0}, {5,1}, {5,2}, {5,3}, {5,4}, {0, 0}, {1, 0}, {3, 0}, {4, 0}, {2,
 419:main.c        **** uint8_t i2c_skipped[12] = {0,0,0,0,0,0,0,0,0,0,0,0}; //so that pedals and levers can be marked as s
 420:main.c        **** uint16_t pedals_low[10] = {2691, 2305, 2457, 526, 3738, 2307, 3014, 2190, 2793, 1318};
 421:main.c        **** uint16_t pedals_high[10] = {2797, 2405, 2580, 647, 3854, 2461, 3141, 2353, 2934, 1504};
 422:main.c        **** uint16_t pedals_lowWithDeadZone[10] = {2691, 2305, 2457, 526, 3738, 2307, 3014, 2190, 2793, 1318};
 423:main.c        **** uint16_t pedals_highWithDeadZone[10] = {2797, 2405, 2580, 647, 3854, 2461, 3141, 2353, 2934, 1504};
 424:main.c        **** uint16_t deadzone = 150;
 425:main.c        **** uint16_t volumePedal = 4095;
 426:main.c        **** uint16_t processed_pedals[10];
 427:main.c        **** uint16_t prev_processed_pedals[10];
 428:main.c        **** uint8_t pedals8bit[10];
 429:main.c        **** uint8_t pedals7bit[10];
 430:main.c        **** uint8_t prevPedals7bit[10];
 431:main.c        **** int16_t prev_processed_volumePedal;
 432:main.c        **** int16_t processed_volumePedal;
 433:main.c        **** 
 434:main.c        **** 
 435:main.c        **** uint16_t fretMeasurements[NUM_SLIDERS][NUM_FRET_MEASUREMENTS];
 436:main.c        **** 
 437:main.c        **** #define NUM_MACROS 8
 438:main.c        **** #define MAX_NUM_PRESETS 64
 439:main.c        **** int currentPresetSelection = 0;
 440:main.c        **** uint8_t presetNamesArray[MAX_NUM_PRESETS][NAME_LENGTH_IN_BYTES];
 441:main.c        **** uint8_t presetNumberToLoad = 0;
 442:main.c        **** uint8_t presetLoadedResponse[2] = {255, 0};
 443:main.c        **** 
 444:main.c        **** 
 445:main.c        **** uint8_t macroNamesArray[MAX_NUM_PRESETS][NUM_MACROS][NAME_LENGTH_IN_BYTES];
 446:main.c        **** 
 447:main.c        **** 
 448:main.c        **** 
 449:main.c        **** //frets 0, 1, 3, 5, 7, 9, 12, 15, 17, 19, 21, 24
 450:main.c        **** float fretScaling[NUM_FRET_MEASUREMENTS] = {1.0f, 0.943874f, 0.840896f, 0.749154f, 0.66742f, 0.5946
 451:main.c        **** 
 452:main.c        **** 
 453:main.c        **** #define MAX_ENCODERS 16
 454:main.c        **** 
 455:main.c        **** float pedalRatios[10];
 456:main.c        **** uint8_t last_mux = 1;
 457:main.c        **** volatile uint8_t main_counter = 0;
 458:main.c        **** uint8_t neck = 0;
 459:main.c        **** uint8_t dualSlider = 0;
 460:main.c        **** uint8_t shiftUp = 1;
 461:main.c        **** uint8_t voice = 0;
 462:main.c        **** uint8_t editUp = 1;
 463:main.c        **** uint8_t oct1Up = 1;
 464:main.c        **** uint8_t oct4Up = 1;
 465:main.c        **** uint8_t encoderUp = 1;
 466:main.c        **** 
 467:main.c        **** volatile uint8_t encoderVal[MAX_ENCODERS];
 468:main.c        **** int encoderNum = 0;
 469:main.c        **** uint8_t button1Up = 0;
 470:main.c        **** uint8_t button2Up = 0;
 471:main.c        **** uint8_t button3Up = 0;
 472:main.c        **** uint8_t button4Up = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 36


 473:main.c        **** uint8_t patchNum = 0;
 474:main.c        **** #define NUM_STRINGS 12
 475:main.c        **** #define NUM_PEDALS 10
 476:main.c        **** uint8_t pedal_inverted[NUM_PEDALS] = {0,0,0,0,0,0,0,0,0,0};
 477:main.c        **** 
 478:main.c        **** #define MAX_NUM_COPEDENTS 7
 479:main.c        **** float copedent[MAX_NUM_COPEDENTS][11][NUM_STRINGS];
 480:main.c        **** uint8_t copedentNamesArray[MAX_NUM_COPEDENTS][NAME_LENGTH_IN_BYTES];
 481:main.c        **** 
 482:main.c        **** float prevStringPitchBend[NUM_STRINGS];
 483:main.c        **** 
 484:main.c        **** float pedals[NUM_PEDALS][NUM_STRINGS];
 485:main.c        **** 
 486:main.c        **** uint8_t pedal_cc_assignments[NUM_PEDALS] = {0, 1, 2, 3, 4, 8, 9, 7, 6, 5};
 487:main.c        **** float openStringFrequencies[NUM_STRINGS];
 488:main.c        **** float stringMappedPositions[NUM_STRINGS];
 489:main.c        **** float invStringMappedPositions[NUM_STRINGS];
 490:main.c        **** float stringFrequencies[NUM_STRINGS];
 491:main.c        **** float stringOctave[NUM_STRINGS];
 492:main.c        **** float stringPitch[NUM_STRINGS];
 493:main.c        **** float stringMIDI[NUM_STRINGS];
 494:main.c        **** int openStringMIDI_Int[NUM_STRINGS];
 495:main.c        **** int OLEDcount = 0;
 496:main.c        **** 
 497:main.c        **** int mainOLEDWaitingToSend = 0;
 498:main.c        **** int macroOLEDWaitingToSend = 0;
 499:main.c        **** 
 500:main.c        **** int presetAlreadyDisplayed[MAX_NUM_PRESETS];
 501:main.c        **** 
 502:main.c        **** float pedals_float[NUM_PEDALS] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
 503:main.c        **** 
 504:main.c        **** float map(float value, float istart, float istop, float ostart, float ostop)
 505:main.c        **** {
 1505              		.loc 1 505 0
 1506              		.cfi_startproc
 1507              		@ args = 4, pretend = 0, frame = 16
 1508              		@ frame_needed = 1, uses_anonymous_args = 0
 1509 0000 B0B5     		push	{r4, r5, r7, lr}
 1510              		.cfi_def_cfa_offset 16
 1511              		.cfi_offset 4, -16
 1512              		.cfi_offset 5, -12
 1513              		.cfi_offset 7, -8
 1514              		.cfi_offset 14, -4
 1515 0002 84B0     		sub	sp, sp, #16
 1516              		.cfi_def_cfa_offset 32
 1517 0004 00AF     		add	r7, sp, #0
 1518              		.cfi_def_cfa_register 7
 1519 0006 F860     		str	r0, [r7, #12]	@ float
 1520 0008 B960     		str	r1, [r7, #8]	@ float
 1521 000a 7A60     		str	r2, [r7, #4]	@ float
 1522 000c 3B60     		str	r3, [r7]	@ float
 506:main.c        ****     return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 1523              		.loc 1 506 0
 1524 000e 3968     		ldr	r1, [r7]	@ float
 1525 0010 386A     		ldr	r0, [r7, #32]	@ float
 1526 0012 FFF7FEFF 		bl	__aeabi_fsub
 1527 0016 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 37


 1528 0018 1C46     		mov	r4, r3
 1529 001a B968     		ldr	r1, [r7, #8]	@ float
 1530 001c F868     		ldr	r0, [r7, #12]	@ float
 1531 001e FFF7FEFF 		bl	__aeabi_fsub
 1532 0022 0346     		mov	r3, r0
 1533 0024 1D46     		mov	r5, r3
 1534 0026 B968     		ldr	r1, [r7, #8]	@ float
 1535 0028 7868     		ldr	r0, [r7, #4]	@ float
 1536 002a FFF7FEFF 		bl	__aeabi_fsub
 1537 002e 0346     		mov	r3, r0
 1538 0030 1946     		mov	r1, r3
 1539 0032 2846     		mov	r0, r5
 1540 0034 FFF7FEFF 		bl	__aeabi_fdiv
 1541 0038 0346     		mov	r3, r0
 1542 003a 1946     		mov	r1, r3
 1543 003c 2046     		mov	r0, r4
 1544 003e FFF7FEFF 		bl	__aeabi_fmul
 1545 0042 0346     		mov	r3, r0
 1546 0044 3968     		ldr	r1, [r7]	@ float
 1547 0046 1846     		mov	r0, r3
 1548 0048 FFF7FEFF 		bl	__aeabi_fadd
 1549 004c 0346     		mov	r3, r0
 507:main.c        **** }
 1550              		.loc 1 507 0
 1551 004e 1846     		mov	r0, r3
 1552 0050 1037     		adds	r7, r7, #16
 1553              		.cfi_def_cfa_offset 16
 1554 0052 BD46     		mov	sp, r7
 1555              		.cfi_def_cfa_register 13
 1556              		@ sp needed
 1557 0054 B0BD     		pop	{r4, r5, r7, pc}
 1558              		.cfi_endproc
 1559              	.LFE72:
 1560              		.size	map, .-map
 1561              		.global	currentNeck
 1562 0056 00BF     		.bss
 1563              		.align	2
 1564              		.type	currentNeck, %object
 1565              		.size	currentNeck, 4
 1566              	currentNeck:
 1567 00e0 00000000 		.space	4
 1568              		.global	neckByte
 1569              		.type	neckByte, %object
 1570              		.size	neckByte, 1
 1571              	neckByte:
 1572 00e4 00       		.space	1
 1573              		.global	editMode
 1574 00e5 000000   		.align	2
 1575              		.type	editMode, %object
 1576              		.size	editMode, 4
 1577              	editMode:
 1578 00e8 00000000 		.space	4
 1579              		.global	leverCalibrationMode
 1580              		.align	2
 1581              		.type	leverCalibrationMode, %object
 1582              		.size	leverCalibrationMode, 4
 1583              	leverCalibrationMode:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 38


 1584 00ec 00000000 		.space	4
 1585              		.global	fretCalibrationMode
 1586              		.align	2
 1587              		.type	fretCalibrationMode, %object
 1588              		.size	fretCalibrationMode, 4
 1589              	fretCalibrationMode:
 1590 00f0 00000000 		.space	4
 1591              		.section	.text.burnInitialPedalZeroPositions,"ax",%progbits
 1592              		.align	2
 1593              		.global	burnInitialPedalZeroPositions
 1594              		.thumb
 1595              		.thumb_func
 1596              		.type	burnInitialPedalZeroPositions, %function
 1597              	burnInitialPedalZeroPositions:
 1598              	.LFB73:
 508:main.c        **** void displayCurrentPresetNameAndCopedent();
 509:main.c        **** 
 510:main.c        **** int currentNeck = 0;
 511:main.c        **** uint8_t neckByte = 0;
 512:main.c        **** 
 513:main.c        **** int editMode = 0;
 514:main.c        **** int leverCalibrationMode = 0;
 515:main.c        **** int fretCalibrationMode = 0;
 516:main.c        **** 
 517:main.c        **** void burnInitialPedalZeroPositions()
 518:main.c        **** {
 1599              		.loc 1 518 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 1, uses_anonymous_args = 0
 1603              		@ link register save eliminated.
 1604 0000 80B4     		push	{r7}
 1605              		.cfi_def_cfa_offset 4
 1606              		.cfi_offset 7, -4
 1607 0002 00AF     		add	r7, sp, #0
 1608              		.cfi_def_cfa_register 7
 519:main.c        ****     
 520:main.c        **** }
 1609              		.loc 1 520 0
 1610 0004 00BF     		nop
 1611 0006 BD46     		mov	sp, r7
 1612              		.cfi_def_cfa_register 13
 1613              		@ sp needed
 1614 0008 80BC     		pop	{r7}
 1615              		.cfi_restore 7
 1616              		.cfi_def_cfa_offset 0
 1617 000a 7047     		bx	lr
 1618              		.cfi_endproc
 1619              	.LFE73:
 1620              		.size	burnInitialPedalZeroPositions, .-burnInitialPedalZeroPositions
 1621              		.comm	stringScaling,4,4
 1622              		.comm	stringOffset,4,4
 1623              		.global	__aeabi_ui2f
 1624              		.global	__aeabi_f2uiz
 1625              		.global	__aeabi_i2f
 1626              		.section	.text.calculatePedalRatios,"ax",%progbits
 1627              		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 39


 1628              		.global	calculatePedalRatios
 1629              		.thumb
 1630              		.thumb_func
 1631              		.type	calculatePedalRatios, %function
 1632              	calculatePedalRatios:
 1633              	.LFB74:
 521:main.c        **** 
 522:main.c        **** float stringScaling;
 523:main.c        **** float stringOffset;
 524:main.c        **** 
 525:main.c        **** 
 526:main.c        **** 
 527:main.c        **** void calculatePedalRatios()
 528:main.c        **** {
 1634              		.loc 1 528 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 8
 1637              		@ frame_needed = 1, uses_anonymous_args = 0
 1638 0000 90B5     		push	{r4, r7, lr}
 1639              		.cfi_def_cfa_offset 12
 1640              		.cfi_offset 4, -12
 1641              		.cfi_offset 7, -8
 1642              		.cfi_offset 14, -4
 1643 0002 83B0     		sub	sp, sp, #12
 1644              		.cfi_def_cfa_offset 24
 1645 0004 00AF     		add	r7, sp, #0
 1646              		.cfi_def_cfa_register 7
 1647              	.LBB3:
 529:main.c        **** 
 530:main.c        ****     //add deadzones on edges of pedal sensing
 531:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 1648              		.loc 1 531 0
 1649 0006 0023     		movs	r3, #0
 1650 0008 7B60     		str	r3, [r7, #4]
 1651 000a 67E0     		b	.L57
 1652              	.L58:
 1653              	.LBB4:
 532:main.c        ****     {
 533:main.c        **** 
 534:main.c        ****         float pedalDiff =(float)pedals_high[i] - (float)pedals_low[i]; //temporary diff to calculat
 1654              		.loc 1 534 0 discriminator 3
 1655 000c 374A     		ldr	r2, .L59
 1656 000e 7B68     		ldr	r3, [r7, #4]
 1657 0010 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1658 0014 1846     		mov	r0, r3
 1659 0016 FFF7FEFF 		bl	__aeabi_ui2f
 1660 001a 0446     		mov	r4, r0
 1661 001c 344A     		ldr	r2, .L59+4
 1662 001e 7B68     		ldr	r3, [r7, #4]
 1663 0020 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1664 0024 1846     		mov	r0, r3
 1665 0026 FFF7FEFF 		bl	__aeabi_ui2f
 1666 002a 0346     		mov	r3, r0
 1667 002c 1946     		mov	r1, r3
 1668 002e 2046     		mov	r0, r4
 1669 0030 FFF7FEFF 		bl	__aeabi_fsub
 1670 0034 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 40


 1671 0036 3B60     		str	r3, [r7]	@ float
 535:main.c        ****         pedals_lowWithDeadZone[i] = (float)pedals_low[i] + (0.1f * pedalDiff);
 1672              		.loc 1 535 0 discriminator 3
 1673 0038 2D4A     		ldr	r2, .L59+4
 1674 003a 7B68     		ldr	r3, [r7, #4]
 1675 003c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1676 0040 1846     		mov	r0, r3
 1677 0042 FFF7FEFF 		bl	__aeabi_ui2f
 1678 0046 0446     		mov	r4, r0
 1679 0048 2A49     		ldr	r1, .L59+8
 1680 004a 3868     		ldr	r0, [r7]	@ float
 1681 004c FFF7FEFF 		bl	__aeabi_fmul
 1682 0050 0346     		mov	r3, r0
 1683 0052 1946     		mov	r1, r3
 1684 0054 2046     		mov	r0, r4
 1685 0056 FFF7FEFF 		bl	__aeabi_fadd
 1686 005a 0346     		mov	r3, r0
 1687 005c 1846     		mov	r0, r3
 1688 005e FFF7FEFF 		bl	__aeabi_f2uiz
 1689 0062 0346     		mov	r3, r0
 1690 0064 99B2     		uxth	r1, r3
 1691 0066 244A     		ldr	r2, .L59+12
 1692 0068 7B68     		ldr	r3, [r7, #4]
 1693 006a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 536:main.c        ****         pedals_highWithDeadZone[i] =(float)pedals_high[i] - (0.1f * pedalDiff);
 1694              		.loc 1 536 0 discriminator 3
 1695 006e 1F4A     		ldr	r2, .L59
 1696 0070 7B68     		ldr	r3, [r7, #4]
 1697 0072 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1698 0076 1846     		mov	r0, r3
 1699 0078 FFF7FEFF 		bl	__aeabi_ui2f
 1700 007c 0446     		mov	r4, r0
 1701 007e 1D49     		ldr	r1, .L59+8
 1702 0080 3868     		ldr	r0, [r7]	@ float
 1703 0082 FFF7FEFF 		bl	__aeabi_fmul
 1704 0086 0346     		mov	r3, r0
 1705 0088 1946     		mov	r1, r3
 1706 008a 2046     		mov	r0, r4
 1707 008c FFF7FEFF 		bl	__aeabi_fsub
 1708 0090 0346     		mov	r3, r0
 1709 0092 1846     		mov	r0, r3
 1710 0094 FFF7FEFF 		bl	__aeabi_f2uiz
 1711 0098 0346     		mov	r3, r0
 1712 009a 99B2     		uxth	r1, r3
 1713 009c 174A     		ldr	r2, .L59+16
 1714 009e 7B68     		ldr	r3, [r7, #4]
 1715 00a0 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 537:main.c        ****         pedalDiff = pedals_highWithDeadZone[i] - pedals_lowWithDeadZone[i]; //final diff to calcula
 1716              		.loc 1 537 0 discriminator 3
 1717 00a4 154A     		ldr	r2, .L59+16
 1718 00a6 7B68     		ldr	r3, [r7, #4]
 1719 00a8 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1720 00ac 1946     		mov	r1, r3
 1721 00ae 124A     		ldr	r2, .L59+12
 1722 00b0 7B68     		ldr	r3, [r7, #4]
 1723 00b2 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1724 00b6 CB1A     		subs	r3, r1, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 41


 1725 00b8 1846     		mov	r0, r3
 1726 00ba FFF7FEFF 		bl	__aeabi_i2f
 1727 00be 0346     		mov	r3, r0
 1728 00c0 3B60     		str	r3, [r7]	@ float
 538:main.c        ****         pedalRatios[i] = 4095.0f / pedalDiff;
 1729              		.loc 1 538 0 discriminator 3
 1730 00c2 3968     		ldr	r1, [r7]	@ float
 1731 00c4 0E48     		ldr	r0, .L59+20
 1732 00c6 FFF7FEFF 		bl	__aeabi_fdiv
 1733 00ca 0346     		mov	r3, r0
 1734 00cc 1946     		mov	r1, r3
 1735 00ce 0D4A     		ldr	r2, .L59+24
 1736 00d0 7B68     		ldr	r3, [r7, #4]
 1737 00d2 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 1738              	.LBE4:
 531:main.c        ****     {
 1739              		.loc 1 531 0 discriminator 3
 1740 00d6 7B68     		ldr	r3, [r7, #4]
 1741 00d8 0133     		adds	r3, r3, #1
 1742 00da 7B60     		str	r3, [r7, #4]
 1743              	.L57:
 531:main.c        ****     {
 1744              		.loc 1 531 0 is_stmt 0 discriminator 1
 1745 00dc 7B68     		ldr	r3, [r7, #4]
 1746 00de 092B     		cmp	r3, #9
 1747 00e0 94DD     		ble	.L58
 1748              	.LBE3:
 539:main.c        ****     }
 540:main.c        **** }
 1749              		.loc 1 540 0 is_stmt 1
 1750 00e2 00BF     		nop
 1751 00e4 0C37     		adds	r7, r7, #12
 1752              		.cfi_def_cfa_offset 12
 1753 00e6 BD46     		mov	sp, r7
 1754              		.cfi_def_cfa_register 13
 1755              		@ sp needed
 1756 00e8 90BD     		pop	{r4, r7, pc}
 1757              	.L60:
 1758 00ea 00BF     		.align	2
 1759              	.L59:
 1760 00ec 00000000 		.word	pedals_high
 1761 00f0 00000000 		.word	pedals_low
 1762 00f4 CDCCCC3D 		.word	1036831949
 1763 00f8 00000000 		.word	pedals_lowWithDeadZone
 1764 00fc 00000000 		.word	pedals_highWithDeadZone
 1765 0100 00F07F45 		.word	1166012416
 1766 0104 00000000 		.word	pedalRatios
 1767              		.cfi_endproc
 1768              	.LFE74:
 1769              		.size	calculatePedalRatios, .-calculatePedalRatios
 1770              		.section	.rodata
 1771              		.align	2
 1772              	.LC0:
 1773 0400 2000     		.ascii	" \000"
 1774              		.global	__aeabi_f2iz
 1775              		.global	__aeabi_fcmpeq
 1776 0402 0000     		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 42


 1777              	.LC1:
 1778 0404 4649524D 		.ascii	"FIRMWARE   \000"
 1778      57415245 
 1778      20202000 
 1779              		.align	2
 1780              	.LC2:
 1781 0410 55504441 		.ascii	"UPDATE     \000"
 1781      54452020 
 1781      20202000 
 1782              		.align	2
 1783              	.LC3:
 1784 041c 20202020 		.ascii	"           \000"
 1784      20202020 
 1784      20202000 
 1785              		.section	.text.main,"ax",%progbits
 1786              		.align	2
 1787              		.global	main
 1788              		.thumb
 1789              		.thumb_func
 1790              		.type	main, %function
 1791              	main:
 1792              	.LFB75:
 541:main.c        **** int main(void)
 542:main.c        **** {
 1793              		.loc 1 542 0
 1794              		.cfi_startproc
 1795              		@ args = 0, pretend = 0, frame = 168
 1796              		@ frame_needed = 1, uses_anonymous_args = 0
 1797 0000 B0B5     		push	{r4, r5, r7, lr}
 1798              		.cfi_def_cfa_offset 16
 1799              		.cfi_offset 4, -16
 1800              		.cfi_offset 5, -12
 1801              		.cfi_offset 7, -8
 1802              		.cfi_offset 14, -4
 1803 0002 ACB0     		sub	sp, sp, #176
 1804              		.cfi_def_cfa_offset 192
 1805 0004 02AF     		add	r7, sp, #8
 1806              		.cfi_def_cfa 7, 184
 543:main.c        ****     
 544:main.c        **** 	CYGlobalIntEnable; 
 1807              		.loc 1 544 0
 1808              		.syntax unified
 1809              	@ 544 "main.c" 1
 1810 0006 62B6     		CPSIE   i
 1811              	@ 0 "" 2
 545:main.c        ****     EEPROM_Start();
 1812              		.loc 1 545 0
 1813              		.thumb
 1814              		.syntax unified
 1815 0008 FFF7FEFF 		bl	EEPROM_Start
 546:main.c        ****      #ifdef BOOTLOAD_STYLE
 547:main.c        ****      //since we sucessfully booted this firmware, set it to be the default until the brain chip get
 548:main.c        ****     Bootloadable_SET_RUN_TYPE(Bootloadable_SCHEDULE_BTLDB);
 549:main.c        ****     #endif
 550:main.c        **** 
 551:main.c        ****     
 552:main.c        ****     eepromReturnValue = Em_EEPROM_Init((uint32_t)Em_EEPROM_em_EepromStorage);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 43


 1816              		.loc 1 552 0
 1817 000c C84B     		ldr	r3, .L183
 1818 000e 1846     		mov	r0, r3
 1819 0010 FFF7FEFF 		bl	Em_EEPROM_Init
 1820 0014 0346     		mov	r3, r0
 1821 0016 1A46     		mov	r2, r3
 1822 0018 C64B     		ldr	r3, .L183+4
 1823 001a 1A70     		strb	r2, [r3]
 553:main.c        ****     if(eepromReturnValue != CY_EM_EEPROM_SUCCESS)
 554:main.c        ****     {
 555:main.c        ****        // HandleError();
 556:main.c        ****     }
 557:main.c        ****     uint8_t myArrayCounter = 0;
 1824              		.loc 1 557 0
 1825 001c 0023     		movs	r3, #0
 1826 001e 87F83730 		strb	r3, [r7, #55]
 558:main.c        ****   
 559:main.c        ****     I2C_1_Start();  
 1827              		.loc 1 559 0
 1828 0022 FFF7FEFF 		bl	I2C_1_Start
 560:main.c        ****     USB_SetPowerStatus(USB_DEVICE_STATUS_SELF_POWERED);
 1829              		.loc 1 560 0
 1830 0026 0120     		movs	r0, #1
 1831 0028 FFF7FEFF 		bl	USB_SetPowerStatus
 561:main.c        ****     my_Vbus_ISR_StartEx(Vbus_function);
 1832              		.loc 1 561 0
 1833 002c C248     		ldr	r0, .L183+8
 1834 002e FFF7FEFF 		bl	my_Vbus_ISR_StartEx
 562:main.c        ****     
 563:main.c        **** 
 564:main.c        **** 
 565:main.c        ****     
 566:main.c        ****     CyDelay(2000);
 1835              		.loc 1 566 0
 1836 0032 4FF4FA60 		mov	r0, #2000
 1837 0036 FFF7FEFF 		bl	CyDelay
 567:main.c        ****     //read from eeprom which copedents are loaded on which necks
 568:main.c        ****     patchNum = EEPROM_ReadByte(EEPROM_CURRENT_PRESET_OFFSET);
 1838              		.loc 1 568 0
 1839 003a 40F2F270 		movw	r0, #2034
 1840 003e FFF7FEFF 		bl	EEPROM_ReadByte
 1841 0042 0346     		mov	r3, r0
 1842 0044 1A46     		mov	r2, r3
 1843 0046 BD4B     		ldr	r3, .L183+12
 1844 0048 1A70     		strb	r2, [r3]
 569:main.c        ****     neckByte = EEPROM_ReadByte(EEPROM_NECKS_OFFSET);
 1845              		.loc 1 569 0
 1846 004a 40F2FE70 		movw	r0, #2046
 1847 004e FFF7FEFF 		bl	EEPROM_ReadByte
 1848 0052 0346     		mov	r3, r0
 1849 0054 1A46     		mov	r2, r3
 1850 0056 BA4B     		ldr	r3, .L183+16
 1851 0058 1A70     		strb	r2, [r3]
 570:main.c        ****     necks[0] = (neckByte >> 5) & 7;
 1852              		.loc 1 570 0
 1853 005a B94B     		ldr	r3, .L183+16
 1854 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 44


 1855 005e 5B09     		lsrs	r3, r3, #5
 1856 0060 DAB2     		uxtb	r2, r3
 1857 0062 B84B     		ldr	r3, .L183+20
 1858 0064 1A70     		strb	r2, [r3]
 571:main.c        ****     necks[1] = (neckByte >> 2) & 7;
 1859              		.loc 1 571 0
 1860 0066 B64B     		ldr	r3, .L183+16
 1861 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1862 006a 9B08     		lsrs	r3, r3, #2
 1863 006c DBB2     		uxtb	r3, r3
 1864 006e 03F00703 		and	r3, r3, #7
 1865 0072 DAB2     		uxtb	r2, r3
 1866 0074 B34B     		ldr	r3, .L183+20
 1867 0076 5A70     		strb	r2, [r3, #1]
 572:main.c        ****     currentNeck = neckByte & 1;
 1868              		.loc 1 572 0
 1869 0078 B14B     		ldr	r3, .L183+16
 1870 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1871 007c 03F00103 		and	r3, r3, #1
 1872 0080 B14A     		ldr	r2, .L183+24
 1873 0082 1360     		str	r3, [r2]
 573:main.c        ****     transposeSemitones = (int8_t)EEPROM_ReadByte(EEPROM_TRANSPOSE_OFFSET);
 1874              		.loc 1 573 0
 1875 0084 40F2F470 		movw	r0, #2036
 1876 0088 FFF7FEFF 		bl	EEPROM_ReadByte
 1877 008c 0346     		mov	r3, r0
 1878 008e 5AB2     		sxtb	r2, r3
 1879 0090 AE4B     		ldr	r3, .L183+28
 1880 0092 1A70     		strb	r2, [r3]
 574:main.c        ****     transposeCents = (int8_t)EEPROM_ReadByte(EEPROM_TRANSPOSE_OFFSET + 1);
 1881              		.loc 1 574 0
 1882 0094 40F2F570 		movw	r0, #2037
 1883 0098 FFF7FEFF 		bl	EEPROM_ReadByte
 1884 009c 0346     		mov	r3, r0
 1885 009e 5AB2     		sxtb	r2, r3
 1886 00a0 AB4B     		ldr	r3, .L183+32
 1887 00a2 1A70     		strb	r2, [r3]
 575:main.c        ****     midiSendOn = EEPROM_ReadByte(EEPROM_MIDI_SEND_OFFSET)&1;
 1888              		.loc 1 575 0
 1889 00a4 40F2FA70 		movw	r0, #2042
 1890 00a8 FFF7FEFF 		bl	EEPROM_ReadByte
 1891 00ac 0346     		mov	r3, r0
 1892 00ae 03F00103 		and	r3, r3, #1
 1893 00b2 DAB2     		uxtb	r2, r3
 1894 00b4 A74B     		ldr	r3, .L183+36
 1895 00b6 1A70     		strb	r2, [r3]
 576:main.c        ****     midiBarSendOn = EEPROM_ReadByte(EEPROM_MIDI_SEND_OFFSET)&(1<<1);
 1896              		.loc 1 576 0
 1897 00b8 40F2FA70 		movw	r0, #2042
 1898 00bc FFF7FEFF 		bl	EEPROM_ReadByte
 1899 00c0 0346     		mov	r3, r0
 1900 00c2 03F00203 		and	r3, r3, #2
 1901 00c6 DAB2     		uxtb	r2, r3
 1902 00c8 A34B     		ldr	r3, .L183+40
 1903 00ca 1A70     		strb	r2, [r3]
 577:main.c        ****     pitchSmoothing = EEPROM_ReadByte(EEPROM_PITCHSMOOTHING_OFFSET);
 1904              		.loc 1 577 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 45


 1905 00cc 4FF4FF60 		mov	r0, #2040
 1906 00d0 FFF7FEFF 		bl	EEPROM_ReadByte
 1907 00d4 0346     		mov	r3, r0
 1908 00d6 1A46     		mov	r2, r3
 1909 00d8 A04B     		ldr	r3, .L183+44
 1910 00da 1A70     		strb	r2, [r3]
 578:main.c        ****     controlSmoothing = EEPROM_ReadByte(EEPROM_CONTROLSMOOTHING_OFFSET);
 1911              		.loc 1 578 0
 1912 00dc 40F2F970 		movw	r0, #2041
 1913 00e0 FFF7FEFF 		bl	EEPROM_ReadByte
 1914 00e4 0346     		mov	r3, r0
 1915 00e6 1A46     		mov	r2, r3
 1916 00e8 9D4B     		ldr	r3, .L183+48
 1917 00ea 1A70     		strb	r2, [r3]
 579:main.c        ****     deadzones = EEPROM_ReadByte(EEPROM_DEADZONES_OFFSET);
 1918              		.loc 1 579 0
 1919 00ec 40F2F770 		movw	r0, #2039
 1920 00f0 FFF7FEFF 		bl	EEPROM_ReadByte
 1921 00f4 0346     		mov	r3, r0
 1922 00f6 1A46     		mov	r2, r3
 1923 00f8 9A4B     		ldr	r3, .L183+52
 1924 00fa 1A70     		strb	r2, [r3]
 580:main.c        ****     octaveAction = EEPROM_ReadByte(EEPROM_OCTAVE_ACTION_OFFSET);
 1925              		.loc 1 580 0
 1926 00fc 40F2F670 		movw	r0, #2038
 1927 0100 FFF7FEFF 		bl	EEPROM_ReadByte
 1928 0104 0346     		mov	r3, r0
 1929 0106 1A46     		mov	r2, r3
 1930 0108 974B     		ldr	r3, .L183+56
 1931 010a 1A70     		strb	r2, [r3]
 581:main.c        ****     stringRepresentation[0] = (EEPROM_ReadByte(EEPROM_STRING_REP_OFFSET)>>4) & 15; //first 4 bits o
 1932              		.loc 1 581 0
 1933 010c 40F2F370 		movw	r0, #2035
 1934 0110 FFF7FEFF 		bl	EEPROM_ReadByte
 1935 0114 0346     		mov	r3, r0
 1936 0116 1B09     		lsrs	r3, r3, #4
 1937 0118 DAB2     		uxtb	r2, r3
 1938 011a 944B     		ldr	r3, .L183+60
 1939 011c 1A70     		strb	r2, [r3]
 582:main.c        ****     stringRepresentation[1] = EEPROM_ReadByte(EEPROM_STRING_REP_OFFSET) & 15;//last 4 bits of the b
 1940              		.loc 1 582 0
 1941 011e 40F2F370 		movw	r0, #2035
 1942 0122 FFF7FEFF 		bl	EEPROM_ReadByte
 1943 0126 0346     		mov	r3, r0
 1944 0128 03F00F03 		and	r3, r3, #15
 1945 012c DAB2     		uxtb	r2, r3
 1946 012e 8F4B     		ldr	r3, .L183+60
 1947 0130 5A70     		strb	r2, [r3, #1]
 583:main.c        ****     dualSlider = EEPROM_ReadByte(EEPROM_DUAL_SLIDER_OFFSET) & 1;
 1948              		.loc 1 583 0
 1949 0132 40F2FD70 		movw	r0, #2045
 1950 0136 FFF7FEFF 		bl	EEPROM_ReadByte
 1951 013a 0346     		mov	r3, r0
 1952 013c 03F00103 		and	r3, r3, #1
 1953 0140 DAB2     		uxtb	r2, r3
 1954 0142 8B4B     		ldr	r3, .L183+64
 1955 0144 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 46


 584:main.c        ****     uint16_t pedal_inverted_byte = (EEPROM_ReadByte(EEPROM_PEDAL_INVERTED_OFFSET) << 8) + EEPROM_Re
 1956              		.loc 1 584 0
 1957 0146 40F2FB70 		movw	r0, #2043
 1958 014a FFF7FEFF 		bl	EEPROM_ReadByte
 1959 014e 0346     		mov	r3, r0
 1960 0150 9BB2     		uxth	r3, r3
 1961 0152 1B02     		lsls	r3, r3, #8
 1962 0154 9CB2     		uxth	r4, r3
 1963 0156 40F2FC70 		movw	r0, #2044
 1964 015a FFF7FEFF 		bl	EEPROM_ReadByte
 1965 015e 0346     		mov	r3, r0
 1966 0160 9BB2     		uxth	r3, r3
 1967 0162 2344     		add	r3, r3, r4
 1968 0164 BB86     		strh	r3, [r7, #52]	@ movhi
 1969              	.LBB5:
 585:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 1970              		.loc 1 585 0
 1971 0166 0023     		movs	r3, #0
 1972 0168 C7F8A430 		str	r3, [r7, #164]
 1973 016c 15E0     		b	.L62
 1974              	.L63:
 586:main.c        ****     {
 587:main.c        ****         pedal_inverted[i] = pedal_inverted_byte & (1<<i);
 1975              		.loc 1 587 0 discriminator 3
 1976 016e BB8E     		ldrh	r3, [r7, #52]	@ movhi
 1977 0170 5AB2     		sxtb	r2, r3
 1978 0172 0121     		movs	r1, #1
 1979 0174 D7F8A430 		ldr	r3, [r7, #164]
 1980 0178 01FA03F3 		lsl	r3, r1, r3
 1981 017c 5BB2     		sxtb	r3, r3
 1982 017e 1340     		ands	r3, r3, r2
 1983 0180 5BB2     		sxtb	r3, r3
 1984 0182 D9B2     		uxtb	r1, r3
 1985 0184 7B4A     		ldr	r2, .L183+68
 1986 0186 D7F8A430 		ldr	r3, [r7, #164]
 1987 018a 1344     		add	r3, r3, r2
 1988 018c 0A46     		mov	r2, r1
 1989 018e 1A70     		strb	r2, [r3]
 585:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 1990              		.loc 1 585 0 discriminator 3
 1991 0190 D7F8A430 		ldr	r3, [r7, #164]
 1992 0194 0133     		adds	r3, r3, #1
 1993 0196 C7F8A430 		str	r3, [r7, #164]
 1994              	.L62:
 585:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 1995              		.loc 1 585 0 is_stmt 0 discriminator 1
 1996 019a D7F8A430 		ldr	r3, [r7, #164]
 1997 019e 092B     		cmp	r3, #9
 1998 01a0 E5DD     		ble	.L63
 1999              	.LBE5:
 2000              	.LBB6:
 588:main.c        ****     }
 589:main.c        ****     for (int coped = 0; coped < MAX_NUM_COPEDENTS; coped++)
 2001              		.loc 1 589 0 is_stmt 1
 2002 01a2 0023     		movs	r3, #0
 2003 01a4 C7F8A030 		str	r3, [r7, #160]
 2004 01a8 B9E0     		b	.L64
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 47


 2005              	.L71:
 2006              	.LBB7:
 590:main.c        ****     {
 591:main.c        ****         for (int letter = 0; letter < NAME_LENGTH_IN_BYTES; letter++)
 2007              		.loc 1 591 0
 2008 01aa 0023     		movs	r3, #0
 2009 01ac C7F89C30 		str	r3, [r7, #156]
 2010 01b0 27E0     		b	.L65
 2011              	.L66:
 592:main.c        ****         {
 593:main.c        ****                copedentNamesArray[coped][letter] = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + (coped*
 2012              		.loc 1 593 0 discriminator 3
 2013 01b2 D7F8A030 		ldr	r3, [r7, #160]
 2014 01b6 9BB2     		uxth	r3, r3
 2015 01b8 1A46     		mov	r2, r3	@ movhi
 2016 01ba 1201     		lsls	r2, r2, #4
 2017 01bc 1A44     		add	r2, r2, r3
 2018 01be 9200     		lsls	r2, r2, #2
 2019 01c0 1A44     		add	r2, r2, r3
 2020 01c2 5200     		lsls	r2, r2, #1
 2021 01c4 1344     		add	r3, r3, r2
 2022 01c6 5B00     		lsls	r3, r3, #1
 2023 01c8 9AB2     		uxth	r2, r3
 2024 01ca D7F89C30 		ldr	r3, [r7, #156]
 2025 01ce 9BB2     		uxth	r3, r3
 2026 01d0 1344     		add	r3, r3, r2
 2027 01d2 9BB2     		uxth	r3, r3
 2028 01d4 1846     		mov	r0, r3
 2029 01d6 FFF7FEFF 		bl	EEPROM_ReadByte
 2030 01da 0346     		mov	r3, r0
 2031 01dc 1846     		mov	r0, r3
 2032 01de 6649     		ldr	r1, .L183+72
 2033 01e0 D7F8A020 		ldr	r2, [r7, #160]
 2034 01e4 1346     		mov	r3, r2
 2035 01e6 DB00     		lsls	r3, r3, #3
 2036 01e8 9B1A     		subs	r3, r3, r2
 2037 01ea 5B00     		lsls	r3, r3, #1
 2038 01ec CA18     		adds	r2, r1, r3
 2039 01ee D7F89C30 		ldr	r3, [r7, #156]
 2040 01f2 1344     		add	r3, r3, r2
 2041 01f4 0246     		mov	r2, r0
 2042 01f6 1A70     		strb	r2, [r3]
 591:main.c        ****         {
 2043              		.loc 1 591 0 discriminator 3
 2044 01f8 D7F89C30 		ldr	r3, [r7, #156]
 2045 01fc 0133     		adds	r3, r3, #1
 2046 01fe C7F89C30 		str	r3, [r7, #156]
 2047              	.L65:
 591:main.c        ****         {
 2048              		.loc 1 591 0 is_stmt 0 discriminator 1
 2049 0202 D7F89C30 		ldr	r3, [r7, #156]
 2050 0206 0D2B     		cmp	r3, #13
 2051 0208 D3DD     		ble	.L66
 2052              	.LBE7:
 2053              	.LBB8:
 594:main.c        ****         }
 595:main.c        ****         for (int i = 0; i < 11; i++)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 48


 2054              		.loc 1 595 0 is_stmt 1
 2055 020a 0023     		movs	r3, #0
 2056 020c C7F89830 		str	r3, [r7, #152]
 2057 0210 7BE0     		b	.L67
 2058              	.L70:
 2059              	.LBB9:
 596:main.c        ****     	{
 597:main.c        ****     		int pedalStartLoc = (i*24);
 2060              		.loc 1 597 0
 2061 0212 D7F89820 		ldr	r2, [r7, #152]
 2062 0216 1346     		mov	r3, r2
 2063 0218 5B00     		lsls	r3, r3, #1
 2064 021a 1344     		add	r3, r3, r2
 2065 021c DB00     		lsls	r3, r3, #3
 2066 021e 3B63     		str	r3, [r7, #48]
 2067              	.LBB10:
 598:main.c        ****             for (int j = 0; j < NUM_STRINGS; j++)
 2068              		.loc 1 598 0
 2069 0220 0023     		movs	r3, #0
 2070 0222 C7F89430 		str	r3, [r7, #148]
 2071 0226 67E0     		b	.L68
 2072              	.L69:
 2073              	.LBB11:
 599:main.c        ****     		{
 600:main.c        ****                 
 601:main.c        ****                 int stringStartLoc = (j*2);
 2074              		.loc 1 601 0 discriminator 3
 2075 0228 D7F89430 		ldr	r3, [r7, #148]
 2076 022c 5B00     		lsls	r3, r3, #1
 2077 022e FB62     		str	r3, [r7, #44]
 602:main.c        ****                 uint16_t tempIntHigh = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + pe
 2078              		.loc 1 602 0 discriminator 3
 2079 0230 FB6A     		ldr	r3, [r7, #44]
 2080 0232 9AB2     		uxth	r2, r3
 2081 0234 3B6B     		ldr	r3, [r7, #48]
 2082 0236 9BB2     		uxth	r3, r3
 2083 0238 1344     		add	r3, r3, r2
 2084 023a 9AB2     		uxth	r2, r3
 2085 023c D7F8A030 		ldr	r3, [r7, #160]
 2086 0240 9BB2     		uxth	r3, r3
 2087 0242 1946     		mov	r1, r3	@ movhi
 2088 0244 0901     		lsls	r1, r1, #4
 2089 0246 1944     		add	r1, r1, r3
 2090 0248 8900     		lsls	r1, r1, #2
 2091 024a 1944     		add	r1, r1, r3
 2092 024c 4900     		lsls	r1, r1, #1
 2093 024e 0B44     		add	r3, r3, r1
 2094 0250 5B00     		lsls	r3, r3, #1
 2095 0252 9BB2     		uxth	r3, r3
 2096 0254 1344     		add	r3, r3, r2
 2097 0256 9BB2     		uxth	r3, r3
 2098 0258 0E33     		adds	r3, r3, #14
 2099 025a 9BB2     		uxth	r3, r3
 2100 025c 1846     		mov	r0, r3
 2101 025e FFF7FEFF 		bl	EEPROM_ReadByte
 2102 0262 0346     		mov	r3, r0
 2103 0264 7B85     		strh	r3, [r7, #42]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 49


 603:main.c        ****                 uint16_t tempIntLow = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + ped
 2104              		.loc 1 603 0 discriminator 3
 2105 0266 FB6A     		ldr	r3, [r7, #44]
 2106 0268 9AB2     		uxth	r2, r3
 2107 026a 3B6B     		ldr	r3, [r7, #48]
 2108 026c 9BB2     		uxth	r3, r3
 2109 026e 1344     		add	r3, r3, r2
 2110 0270 9AB2     		uxth	r2, r3
 2111 0272 D7F8A030 		ldr	r3, [r7, #160]
 2112 0276 9BB2     		uxth	r3, r3
 2113 0278 1946     		mov	r1, r3	@ movhi
 2114 027a 0901     		lsls	r1, r1, #4
 2115 027c 1944     		add	r1, r1, r3
 2116 027e 8900     		lsls	r1, r1, #2
 2117 0280 1944     		add	r1, r1, r3
 2118 0282 4900     		lsls	r1, r1, #1
 2119 0284 0B44     		add	r3, r3, r1
 2120 0286 5B00     		lsls	r3, r3, #1
 2121 0288 9BB2     		uxth	r3, r3
 2122 028a 1344     		add	r3, r3, r2
 2123 028c 9BB2     		uxth	r3, r3
 2124 028e 0F33     		adds	r3, r3, #15
 2125 0290 9BB2     		uxth	r3, r3
 2126 0292 1846     		mov	r0, r3
 2127 0294 FFF7FEFF 		bl	EEPROM_ReadByte
 2128 0298 0346     		mov	r3, r0
 2129 029a 3B85     		strh	r3, [r7, #40]	@ movhi
 604:main.c        ****                 copedent[coped][i][j] = (((float)((tempIntHigh << 8) + tempIntLow)) * 0.00390625f) 
 2130              		.loc 1 604 0 discriminator 3
 2131 029c 7B8D     		ldrh	r3, [r7, #42]
 2132 029e 1A02     		lsls	r2, r3, #8
 2133 02a0 3B8D     		ldrh	r3, [r7, #40]
 2134 02a2 1344     		add	r3, r3, r2
 2135 02a4 1846     		mov	r0, r3
 2136 02a6 FFF7FEFF 		bl	__aeabi_i2f
 2137 02aa 0346     		mov	r3, r0
 2138 02ac 4FF06E51 		mov	r1, #998244352
 2139 02b0 1846     		mov	r0, r3
 2140 02b2 FFF7FEFF 		bl	__aeabi_fmul
 2141 02b6 0346     		mov	r3, r0
 2142 02b8 4FF08641 		mov	r1, #1124073472
 2143 02bc 1846     		mov	r0, r3
 2144 02be FFF7FEFF 		bl	__aeabi_fsub
 2145 02c2 0346     		mov	r3, r0
 2146 02c4 1C46     		mov	r4, r3
 2147 02c6 2D48     		ldr	r0, .L183+76
 2148 02c8 D7F89830 		ldr	r3, [r7, #152]
 2149 02cc D7F8A010 		ldr	r1, [r7, #160]
 2150 02d0 1A46     		mov	r2, r3
 2151 02d2 5200     		lsls	r2, r2, #1
 2152 02d4 1A44     		add	r2, r2, r3
 2153 02d6 9300     		lsls	r3, r2, #2
 2154 02d8 1A46     		mov	r2, r3
 2155 02da 0B46     		mov	r3, r1
 2156 02dc 5B01     		lsls	r3, r3, #5
 2157 02de 0B44     		add	r3, r3, r1
 2158 02e0 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 50


 2159 02e2 1A44     		add	r2, r2, r3
 2160 02e4 D7F89430 		ldr	r3, [r7, #148]
 2161 02e8 1344     		add	r3, r3, r2
 2162 02ea 40F82340 		str	r4, [r0, r3, lsl #2]	@ float
 2163              	.LBE11:
 598:main.c        ****     		{
 2164              		.loc 1 598 0 discriminator 3
 2165 02ee D7F89430 		ldr	r3, [r7, #148]
 2166 02f2 0133     		adds	r3, r3, #1
 2167 02f4 C7F89430 		str	r3, [r7, #148]
 2168              	.L68:
 598:main.c        ****     		{
 2169              		.loc 1 598 0 is_stmt 0 discriminator 1
 2170 02f8 D7F89430 		ldr	r3, [r7, #148]
 2171 02fc 0B2B     		cmp	r3, #11
 2172 02fe 93DD     		ble	.L69
 2173              	.LBE10:
 2174              	.LBE9:
 595:main.c        ****     	{
 2175              		.loc 1 595 0 is_stmt 1 discriminator 2
 2176 0300 D7F89830 		ldr	r3, [r7, #152]
 2177 0304 0133     		adds	r3, r3, #1
 2178 0306 C7F89830 		str	r3, [r7, #152]
 2179              	.L67:
 595:main.c        ****     	{
 2180              		.loc 1 595 0 is_stmt 0 discriminator 1
 2181 030a D7F89830 		ldr	r3, [r7, #152]
 2182 030e 0A2B     		cmp	r3, #10
 2183 0310 7FF77FAF 		ble	.L70
 2184              	.LBE8:
 589:main.c        ****     {
 2185              		.loc 1 589 0 is_stmt 1 discriminator 2
 2186 0314 D7F8A030 		ldr	r3, [r7, #160]
 2187 0318 0133     		adds	r3, r3, #1
 2188 031a C7F8A030 		str	r3, [r7, #160]
 2189              	.L64:
 589:main.c        ****     {
 2190              		.loc 1 589 0 is_stmt 0 discriminator 1
 2191 031e D7F8A030 		ldr	r3, [r7, #160]
 2192 0322 062B     		cmp	r3, #6
 2193 0324 7FF741AF 		ble	.L71
 2194              	.LBE6:
 2195              	.LBB12:
 605:main.c        ****             }
 606:main.c        ****     	}
 607:main.c        ****     }
 608:main.c        **** 
 609:main.c        ****     
 610:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 2196              		.loc 1 610 0 is_stmt 1
 2197 0328 0023     		movs	r3, #0
 2198 032a C7F89030 		str	r3, [r7, #144]
 2199 032e 71E0     		b	.L72
 2200              	.L184:
 2201              		.align	2
 2202              	.L183:
 2203 0330 00000000 		.word	Em_EEPROM_em_EepromStorage
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 51


 2204 0334 00000000 		.word	eepromReturnValue
 2205 0338 00000000 		.word	Vbus_function
 2206 033c 00000000 		.word	patchNum
 2207 0340 00000000 		.word	neckByte
 2208 0344 00000000 		.word	necks
 2209 0348 00000000 		.word	currentNeck
 2210 034c 00000000 		.word	transposeSemitones
 2211 0350 00000000 		.word	transposeCents
 2212 0354 00000000 		.word	midiSendOn
 2213 0358 00000000 		.word	midiBarSendOn
 2214 035c 00000000 		.word	pitchSmoothing
 2215 0360 00000000 		.word	controlSmoothing
 2216 0364 00000000 		.word	deadzones
 2217 0368 00000000 		.word	octaveAction
 2218 036c 00000000 		.word	stringRepresentation
 2219 0370 00000000 		.word	dualSlider
 2220 0374 00000000 		.word	pedal_inverted
 2221 0378 00000000 		.word	copedentNamesArray
 2222 037c 00000000 		.word	copedent
 2223              	.L73:
 611:main.c        ****     {
 612:main.c        ****         pedals_low[i] = (EEPROM_ReadByte(EEPROM_LEVER_CALIBRATION_OFFSET + (i*4)) << 8) + (EEPROM_R
 2224              		.loc 1 612 0 discriminator 3
 2225 0380 D7F89030 		ldr	r3, [r7, #144]
 2226 0384 9BB2     		uxth	r3, r3
 2227 0386 9B00     		lsls	r3, r3, #2
 2228 0388 9BB2     		uxth	r3, r3
 2229 038a 03F29A73 		addw	r3, r3, #1946
 2230 038e 9BB2     		uxth	r3, r3
 2231 0390 1846     		mov	r0, r3
 2232 0392 FFF7FEFF 		bl	EEPROM_ReadByte
 2233 0396 0346     		mov	r3, r0
 2234 0398 9BB2     		uxth	r3, r3
 2235 039a 1B02     		lsls	r3, r3, #8
 2236 039c 9CB2     		uxth	r4, r3
 2237 039e D7F89030 		ldr	r3, [r7, #144]
 2238 03a2 9BB2     		uxth	r3, r3
 2239 03a4 9B00     		lsls	r3, r3, #2
 2240 03a6 9BB2     		uxth	r3, r3
 2241 03a8 03F29B73 		addw	r3, r3, #1947
 2242 03ac 9BB2     		uxth	r3, r3
 2243 03ae 1846     		mov	r0, r3
 2244 03b0 FFF7FEFF 		bl	EEPROM_ReadByte
 2245 03b4 0346     		mov	r3, r0
 2246 03b6 9BB2     		uxth	r3, r3
 2247 03b8 2344     		add	r3, r3, r4
 2248 03ba 99B2     		uxth	r1, r3
 2249 03bc AA4A     		ldr	r2, .L185
 2250 03be D7F89030 		ldr	r3, [r7, #144]
 2251 03c2 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 613:main.c        ****         pedals_high[i] = (EEPROM_ReadByte(EEPROM_LEVER_CALIBRATION_OFFSET + ((i*4) + 2)) << 8) + (E
 2252              		.loc 1 613 0 discriminator 3
 2253 03c6 D7F89030 		ldr	r3, [r7, #144]
 2254 03ca 03F2E713 		addw	r3, r3, #487
 2255 03ce 9BB2     		uxth	r3, r3
 2256 03d0 9B00     		lsls	r3, r3, #2
 2257 03d2 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 52


 2258 03d4 1846     		mov	r0, r3
 2259 03d6 FFF7FEFF 		bl	EEPROM_ReadByte
 2260 03da 0346     		mov	r3, r0
 2261 03dc 9BB2     		uxth	r3, r3
 2262 03de 1B02     		lsls	r3, r3, #8
 2263 03e0 9CB2     		uxth	r4, r3
 2264 03e2 D7F89030 		ldr	r3, [r7, #144]
 2265 03e6 9BB2     		uxth	r3, r3
 2266 03e8 9B00     		lsls	r3, r3, #2
 2267 03ea 9BB2     		uxth	r3, r3
 2268 03ec 03F29D73 		addw	r3, r3, #1949
 2269 03f0 9BB2     		uxth	r3, r3
 2270 03f2 1846     		mov	r0, r3
 2271 03f4 FFF7FEFF 		bl	EEPROM_ReadByte
 2272 03f8 0346     		mov	r3, r0
 2273 03fa 9BB2     		uxth	r3, r3
 2274 03fc 2344     		add	r3, r3, r4
 2275 03fe 99B2     		uxth	r1, r3
 2276 0400 9A4A     		ldr	r2, .L185+4
 2277 0402 D7F89030 		ldr	r3, [r7, #144]
 2278 0406 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 610:main.c        ****     {
 2279              		.loc 1 610 0 discriminator 3
 2280 040a D7F89030 		ldr	r3, [r7, #144]
 2281 040e 0133     		adds	r3, r3, #1
 2282 0410 C7F89030 		str	r3, [r7, #144]
 2283              	.L72:
 610:main.c        ****     {
 2284              		.loc 1 610 0 is_stmt 0 discriminator 1
 2285 0414 D7F89030 		ldr	r3, [r7, #144]
 2286 0418 092B     		cmp	r3, #9
 2287 041a B1DD     		ble	.L73
 2288              	.LBE12:
 614:main.c        ****     }
 615:main.c        ****     calculatePedalRatios();
 2289              		.loc 1 615 0 is_stmt 1
 2290 041c FFF7FEFF 		bl	calculatePedalRatios
 2291              	.LBB13:
 616:main.c        ****                 
 617:main.c        ****     
 618:main.c        ****     for (int i = 0; i < NUM_FRET_MEASUREMENTS; i++)
 2292              		.loc 1 618 0
 2293 0420 0023     		movs	r3, #0
 2294 0422 C7F88C30 		str	r3, [r7, #140]
 2295 0426 4AE0     		b	.L74
 2296              	.L75:
 619:main.c        ****     {
 620:main.c        ****         fretMeasurements[0][i] = (EEPROM_ReadByte(EEPROM_FRET_CALIBRATION_OFFSET + (i*4)) << 8) + (
 2297              		.loc 1 620 0 discriminator 3
 2298 0428 D7F88C30 		ldr	r3, [r7, #140]
 2299 042c 9BB2     		uxth	r3, r3
 2300 042e 9B00     		lsls	r3, r3, #2
 2301 0430 9BB2     		uxth	r3, r3
 2302 0432 03F2C273 		addw	r3, r3, #1986
 2303 0436 9BB2     		uxth	r3, r3
 2304 0438 1846     		mov	r0, r3
 2305 043a FFF7FEFF 		bl	EEPROM_ReadByte
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 53


 2306 043e 0346     		mov	r3, r0
 2307 0440 9BB2     		uxth	r3, r3
 2308 0442 1B02     		lsls	r3, r3, #8
 2309 0444 9CB2     		uxth	r4, r3
 2310 0446 D7F88C30 		ldr	r3, [r7, #140]
 2311 044a 9BB2     		uxth	r3, r3
 2312 044c 9B00     		lsls	r3, r3, #2
 2313 044e 9BB2     		uxth	r3, r3
 2314 0450 03F2C373 		addw	r3, r3, #1987
 2315 0454 9BB2     		uxth	r3, r3
 2316 0456 1846     		mov	r0, r3
 2317 0458 FFF7FEFF 		bl	EEPROM_ReadByte
 2318 045c 0346     		mov	r3, r0
 2319 045e 9BB2     		uxth	r3, r3
 2320 0460 2344     		add	r3, r3, r4
 2321 0462 99B2     		uxth	r1, r3
 2322 0464 824A     		ldr	r2, .L185+8
 2323 0466 D7F88C30 		ldr	r3, [r7, #140]
 2324 046a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 621:main.c        ****         fretMeasurements[1][i] = (EEPROM_ReadByte(EEPROM_FRET_CALIBRATION_OFFSET + ((i*4) + 2)) << 
 2325              		.loc 1 621 0 discriminator 3
 2326 046e D7F88C30 		ldr	r3, [r7, #140]
 2327 0472 03F2F113 		addw	r3, r3, #497
 2328 0476 9BB2     		uxth	r3, r3
 2329 0478 9B00     		lsls	r3, r3, #2
 2330 047a 9BB2     		uxth	r3, r3
 2331 047c 1846     		mov	r0, r3
 2332 047e FFF7FEFF 		bl	EEPROM_ReadByte
 2333 0482 0346     		mov	r3, r0
 2334 0484 9BB2     		uxth	r3, r3
 2335 0486 1B02     		lsls	r3, r3, #8
 2336 0488 9CB2     		uxth	r4, r3
 2337 048a D7F88C30 		ldr	r3, [r7, #140]
 2338 048e 9BB2     		uxth	r3, r3
 2339 0490 9B00     		lsls	r3, r3, #2
 2340 0492 9BB2     		uxth	r3, r3
 2341 0494 03F2C573 		addw	r3, r3, #1989
 2342 0498 9BB2     		uxth	r3, r3
 2343 049a 1846     		mov	r0, r3
 2344 049c FFF7FEFF 		bl	EEPROM_ReadByte
 2345 04a0 0346     		mov	r3, r0
 2346 04a2 9BB2     		uxth	r3, r3
 2347 04a4 2344     		add	r3, r3, r4
 2348 04a6 99B2     		uxth	r1, r3
 2349 04a8 714A     		ldr	r2, .L185+8
 2350 04aa D7F88C30 		ldr	r3, [r7, #140]
 2351 04ae 0C33     		adds	r3, r3, #12
 2352 04b0 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 618:main.c        ****     {
 2353              		.loc 1 618 0 discriminator 3
 2354 04b4 D7F88C30 		ldr	r3, [r7, #140]
 2355 04b8 0133     		adds	r3, r3, #1
 2356 04ba C7F88C30 		str	r3, [r7, #140]
 2357              	.L74:
 618:main.c        ****     {
 2358              		.loc 1 618 0 is_stmt 0 discriminator 1
 2359 04be D7F88C30 		ldr	r3, [r7, #140]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 54


 2360 04c2 0B2B     		cmp	r3, #11
 2361 04c4 B0DD     		ble	.L75
 2362              	.LBE13:
 2363              	.LBB14:
 622:main.c        ****     }
 623:main.c        ****     //blank out the preset names array so that we can tell when we get the real names from the synt
 624:main.c        ****     for (int i = 0; i < MAX_NUM_PRESETS; i++)
 2364              		.loc 1 624 0 is_stmt 1
 2365 04c6 0023     		movs	r3, #0
 2366 04c8 C7F88830 		str	r3, [r7, #136]
 2367 04cc 4EE0     		b	.L76
 2368              	.L83:
 2369              	.LBB15:
 625:main.c        ****     {
 626:main.c        ****         for (int j = 0; j < NAME_LENGTH_IN_BYTES; j++)
 2370              		.loc 1 626 0
 2371 04ce 0023     		movs	r3, #0
 2372 04d0 C7F88430 		str	r3, [r7, #132]
 2373 04d4 11E0     		b	.L77
 2374              	.L78:
 627:main.c        ****         {
 628:main.c        ****             presetNamesArray[i][j] = 255;
 2375              		.loc 1 628 0 discriminator 3
 2376 04d6 6749     		ldr	r1, .L185+12
 2377 04d8 D7F88820 		ldr	r2, [r7, #136]
 2378 04dc 1346     		mov	r3, r2
 2379 04de DB00     		lsls	r3, r3, #3
 2380 04e0 9B1A     		subs	r3, r3, r2
 2381 04e2 5B00     		lsls	r3, r3, #1
 2382 04e4 CA18     		adds	r2, r1, r3
 2383 04e6 D7F88430 		ldr	r3, [r7, #132]
 2384 04ea 1344     		add	r3, r3, r2
 2385 04ec FF22     		movs	r2, #255
 2386 04ee 1A70     		strb	r2, [r3]
 626:main.c        ****         {
 2387              		.loc 1 626 0 discriminator 3
 2388 04f0 D7F88430 		ldr	r3, [r7, #132]
 2389 04f4 0133     		adds	r3, r3, #1
 2390 04f6 C7F88430 		str	r3, [r7, #132]
 2391              	.L77:
 626:main.c        ****         {
 2392              		.loc 1 626 0 is_stmt 0 discriminator 1
 2393 04fa D7F88430 		ldr	r3, [r7, #132]
 2394 04fe 0D2B     		cmp	r3, #13
 2395 0500 E9DD     		ble	.L78
 2396              	.LBE15:
 2397              	.LBB16:
 629:main.c        **** 
 630:main.c        ****         }
 631:main.c        ****         for (int j = 0; j < NUM_MACROS; j++)
 2398              		.loc 1 631 0 is_stmt 1
 2399 0502 0023     		movs	r3, #0
 2400 0504 C7F88030 		str	r3, [r7, #128]
 2401 0508 21E0     		b	.L79
 2402              	.L82:
 2403              	.LBB17:
 632:main.c        ****         {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 55


 633:main.c        ****             for (int k = 0; k < NAME_LENGTH_IN_BYTES; k++)
 2404              		.loc 1 633 0
 2405 050a 0023     		movs	r3, #0
 2406 050c FB67     		str	r3, [r7, #124]
 2407 050e 16E0     		b	.L80
 2408              	.L81:
 634:main.c        ****             {
 635:main.c        ****                 macroNamesArray[i][j][k] = 255;
 2409              		.loc 1 635 0 discriminator 3
 2410 0510 5948     		ldr	r0, .L185+16
 2411 0512 D7F88030 		ldr	r3, [r7, #128]
 2412 0516 D7F88810 		ldr	r1, [r7, #136]
 2413 051a 1A46     		mov	r2, r3
 2414 051c D200     		lsls	r2, r2, #3
 2415 051e D21A     		subs	r2, r2, r3
 2416 0520 5300     		lsls	r3, r2, #1
 2417 0522 1A46     		mov	r2, r3
 2418 0524 0B46     		mov	r3, r1
 2419 0526 DB00     		lsls	r3, r3, #3
 2420 0528 5B1A     		subs	r3, r3, r1
 2421 052a 1B01     		lsls	r3, r3, #4
 2422 052c 1344     		add	r3, r3, r2
 2423 052e C218     		adds	r2, r0, r3
 2424 0530 FB6F     		ldr	r3, [r7, #124]
 2425 0532 1344     		add	r3, r3, r2
 2426 0534 FF22     		movs	r2, #255
 2427 0536 1A70     		strb	r2, [r3]
 633:main.c        ****             {
 2428              		.loc 1 633 0 discriminator 3
 2429 0538 FB6F     		ldr	r3, [r7, #124]
 2430 053a 0133     		adds	r3, r3, #1
 2431 053c FB67     		str	r3, [r7, #124]
 2432              	.L80:
 633:main.c        ****             {
 2433              		.loc 1 633 0 is_stmt 0 discriminator 1
 2434 053e FB6F     		ldr	r3, [r7, #124]
 2435 0540 0D2B     		cmp	r3, #13
 2436 0542 E5DD     		ble	.L81
 2437              	.LBE17:
 631:main.c        ****         {
 2438              		.loc 1 631 0 is_stmt 1 discriminator 2
 2439 0544 D7F88030 		ldr	r3, [r7, #128]
 2440 0548 0133     		adds	r3, r3, #1
 2441 054a C7F88030 		str	r3, [r7, #128]
 2442              	.L79:
 631:main.c        ****         {
 2443              		.loc 1 631 0 is_stmt 0 discriminator 1
 2444 054e D7F88030 		ldr	r3, [r7, #128]
 2445 0552 072B     		cmp	r3, #7
 2446 0554 D9DD     		ble	.L82
 2447              	.LBE16:
 636:main.c        ****             }
 637:main.c        ****         }
 638:main.c        ****         presetAlreadyDisplayed[i] = 0;
 2448              		.loc 1 638 0 is_stmt 1 discriminator 2
 2449 0556 494A     		ldr	r2, .L185+20
 2450 0558 D7F88830 		ldr	r3, [r7, #136]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 56


 2451 055c 0021     		movs	r1, #0
 2452 055e 42F82310 		str	r1, [r2, r3, lsl #2]
 624:main.c        ****     {
 2453              		.loc 1 624 0 discriminator 2
 2454 0562 D7F88830 		ldr	r3, [r7, #136]
 2455 0566 0133     		adds	r3, r3, #1
 2456 0568 C7F88830 		str	r3, [r7, #136]
 2457              	.L76:
 624:main.c        ****     {
 2458              		.loc 1 624 0 is_stmt 0 discriminator 1
 2459 056c D7F88830 		ldr	r3, [r7, #136]
 2460 0570 3F2B     		cmp	r3, #63
 2461 0572 ACDD     		ble	.L83
 2462              	.LBE14:
 639:main.c        ****     }
 640:main.c        ****     
 641:main.c        ****     //QuadDec_1_Start();
 642:main.c        ****     LED_amber1_Write(0);
 2463              		.loc 1 642 0 is_stmt 1
 2464 0574 0020     		movs	r0, #0
 2465 0576 FFF7FEFF 		bl	LED_amber1_Write
 643:main.c        ****     LED_amber2_Write(1);
 2466              		.loc 1 643 0
 2467 057a 0120     		movs	r0, #1
 2468 057c FFF7FEFF 		bl	LED_amber2_Write
 644:main.c        ****     LED_amber3_Write(0);
 2469              		.loc 1 644 0
 2470 0580 0020     		movs	r0, #0
 2471 0582 FFF7FEFF 		bl	LED_amber3_Write
 645:main.c        ****     LED_amber4_Write(0);
 2472              		.loc 1 645 0
 2473 0586 0020     		movs	r0, #0
 2474 0588 FFF7FEFF 		bl	LED_amber4_Write
 646:main.c        ****     LED_green1_Write(dualSlider);
 2475              		.loc 1 646 0
 2476 058c 3C4B     		ldr	r3, .L185+24
 2477 058e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2478 0590 1846     		mov	r0, r3
 2479 0592 FFF7FEFF 		bl	LED_green1_Write
 647:main.c        **** 
 648:main.c        **** 
 649:main.c        **** 
 650:main.c        **** 
 651:main.c        **** 
 652:main.c        ****     LED_red1_Write(currentNeck);
 2480              		.loc 1 652 0
 2481 0596 3B4B     		ldr	r3, .L185+28
 2482 0598 1B68     		ldr	r3, [r3]
 2483 059a DBB2     		uxtb	r3, r3
 2484 059c 1846     		mov	r0, r3
 2485 059e FFF7FEFF 		bl	LED_red1_Write
 653:main.c        ****     LED_green2_Write(!currentNeck);
 2486              		.loc 1 653 0
 2487 05a2 384B     		ldr	r3, .L185+28
 2488 05a4 1B68     		ldr	r3, [r3]
 2489 05a6 002B     		cmp	r3, #0
 2490 05a8 0CBF     		ite	eq
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 57


 2491 05aa 0123     		moveq	r3, #1
 2492 05ac 0023     		movne	r3, #0
 2493 05ae DBB2     		uxtb	r3, r3
 2494 05b0 1846     		mov	r0, r3
 2495 05b2 FFF7FEFF 		bl	LED_green2_Write
 654:main.c        **** 
 655:main.c        **** 
 656:main.c        ****     
 657:main.c        ****     ADC_SAR_Seq_1_Start();
 2496              		.loc 1 657 0
 2497 05b6 FFF7FEFF 		bl	ADC_SAR_Seq_1_Start
 658:main.c        ****     ADC_SAR_Seq_1_StartConvert();
 2498              		.loc 1 658 0
 2499 05ba FFF7FEFF 		bl	ADC_SAR_Seq_1_StartConvert
 659:main.c        **** 
 660:main.c        ****             
 661:main.c        ****     currentCopedent = necks[currentNeck];
 2500              		.loc 1 661 0
 2501 05be 314B     		ldr	r3, .L185+28
 2502 05c0 1B68     		ldr	r3, [r3]
 2503 05c2 314A     		ldr	r2, .L185+32
 2504 05c4 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 2505 05c6 314B     		ldr	r3, .L185+36
 2506 05c8 1A70     		strb	r2, [r3]
 662:main.c        ****     CyDelay(10);
 2507              		.loc 1 662 0
 2508 05ca 0A20     		movs	r0, #10
 2509 05cc FFF7FEFF 		bl	CyDelay
 663:main.c        ****     
 664:main.c        ****     //set up for the OLED screen's first write
 665:main.c        ****     I2Cbuff1[0] = 1<<6;
 2510              		.loc 1 665 0
 2511 05d0 2F4B     		ldr	r3, .L185+40
 2512 05d2 4022     		movs	r2, #64
 2513 05d4 1A70     		strb	r2, [r3]
 666:main.c        ****     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 2514              		.loc 1 666 0
 2515 05d6 0022     		movs	r2, #0
 2516 05d8 0121     		movs	r1, #1
 2517 05da 7020     		movs	r0, #112
 2518 05dc FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2519 05e0 0346     		mov	r3, r0
 2520 05e2 1A46     		mov	r2, r3
 2521 05e4 2B4B     		ldr	r3, .L185+44
 2522 05e6 1A60     		str	r2, [r3]
 667:main.c        ****     myGFX_init(128, 64);
 2523              		.loc 1 667 0
 2524 05e8 4021     		movs	r1, #64
 2525 05ea 8020     		movs	r0, #128
 2526 05ec FFF7FEFF 		bl	myGFX_init
 668:main.c        ****     myGFX_setFont(0);
 2527              		.loc 1 668 0
 2528 05f0 0020     		movs	r0, #0
 2529 05f2 FFF7FEFF 		bl	myGFX_setFont
 669:main.c        ****     OLED_init(128, 64);
 2530              		.loc 1 669 0
 2531 05f6 4021     		movs	r1, #64
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 58


 2532 05f8 8020     		movs	r0, #128
 2533 05fa FFF7FEFF 		bl	OLED_init
 670:main.c        ****     OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 2534              		.loc 1 670 0
 2535 05fe 234B     		ldr	r3, .L185+36
 2536 0600 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2537 0602 1846     		mov	r0, r3
 2538 0604 0323     		movs	r3, #3
 2539 0606 0022     		movs	r2, #0
 2540 0608 0221     		movs	r1, #2
 2541 060a FFF7FEFF 		bl	OLEDwriteInt
 671:main.c        ****     OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 2542              		.loc 1 671 0
 2543 060e FFF7FEFF 		bl	OLEDgetCursor
 2544 0612 0246     		mov	r2, r0
 2545 0614 0323     		movs	r3, #3
 2546 0616 0121     		movs	r1, #1
 2547 0618 1F48     		ldr	r0, .L185+48
 2548 061a FFF7FEFF 		bl	OLEDwriteString
 672:main.c        ****     OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], COPEDENT_NAME_CLIPPED_LENGTH, 
 2549              		.loc 1 672 0
 2550 061e 1B4B     		ldr	r3, .L185+36
 2551 0620 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2552 0622 1A46     		mov	r2, r3
 2553 0624 1346     		mov	r3, r2
 2554 0626 DB00     		lsls	r3, r3, #3
 2555 0628 9B1A     		subs	r3, r3, r2
 2556 062a 5B00     		lsls	r3, r3, #1
 2557 062c 1B4A     		ldr	r2, .L185+52
 2558 062e 9C18     		adds	r4, r3, r2
 2559 0630 FFF7FEFF 		bl	OLEDgetCursor
 2560 0634 0246     		mov	r2, r0
 2561 0636 0323     		movs	r3, #3
 2562 0638 0921     		movs	r1, #9
 2563 063a 2046     		mov	r0, r4
 2564 063c FFF7FEFF 		bl	OLEDwriteString
 673:main.c        ****     OLED_draw(128, 64);
 2565              		.loc 1 673 0
 2566 0640 4021     		movs	r1, #64
 2567 0642 8020     		movs	r0, #128
 2568 0644 FFF7FEFF 		bl	OLED_draw
 674:main.c        ****     
 675:main.c        ****     
 676:main.c        ****     I2Cbuff1[0] = 1<<2;
 2569              		.loc 1 676 0
 2570 0648 114B     		ldr	r3, .L185+40
 2571 064a 0422     		movs	r2, #4
 2572 064c 1A70     		strb	r2, [r3]
 677:main.c        ****     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 2573              		.loc 1 677 0
 2574 064e 0022     		movs	r2, #0
 2575 0650 0121     		movs	r1, #1
 2576 0652 7020     		movs	r0, #112
 2577 0654 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2578 0658 0346     		mov	r3, r0
 2579 065a 1A46     		mov	r2, r3
 2580 065c 0D4B     		ldr	r3, .L185+44
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 59


 2581 065e 1A60     		str	r2, [r3]
 2582              	.LBB18:
 678:main.c        **** 
 679:main.c        ****     for (int w = 0; w < 8; w++)
 2583              		.loc 1 679 0
 2584 0660 0023     		movs	r3, #0
 2585 0662 BB67     		str	r3, [r7, #120]
 2586 0664 32E0     		b	.L84
 2587              	.L186:
 2588 0666 00BF     		.align	2
 2589              	.L185:
 2590 0668 00000000 		.word	pedals_low
 2591 066c 00000000 		.word	pedals_high
 2592 0670 00000000 		.word	fretMeasurements
 2593 0674 00000000 		.word	presetNamesArray
 2594 0678 00000000 		.word	macroNamesArray
 2595 067c 00000000 		.word	presetAlreadyDisplayed
 2596 0680 00000000 		.word	dualSlider
 2597 0684 00000000 		.word	currentNeck
 2598 0688 00000000 		.word	necks
 2599 068c 00000000 		.word	currentCopedent
 2600 0690 00000000 		.word	I2Cbuff1
 2601 0694 00000000 		.word	status
 2602 0698 00040000 		.word	.LC0
 2603 069c 00000000 		.word	copedentNamesArray
 2604              	.L85:
 680:main.c        ****     {
 681:main.c        ****         I2Cbuff1[0] = (1 << 3) + w;
 2605              		.loc 1 681 0 discriminator 3
 2606 06a0 BB6F     		ldr	r3, [r7, #120]
 2607 06a2 DBB2     		uxtb	r3, r3
 2608 06a4 0833     		adds	r3, r3, #8
 2609 06a6 DAB2     		uxtb	r2, r3
 2610 06a8 9B4B     		ldr	r3, .L187
 2611 06aa 1A70     		strb	r2, [r3]
 682:main.c        ****         status = I2C_MasterWriteBlocking(0x72, 1, I2C_1_MODE_COMPLETE_XFER); 
 2612              		.loc 1 682 0 discriminator 3
 2613 06ac 0022     		movs	r2, #0
 2614 06ae 0121     		movs	r1, #1
 2615 06b0 7220     		movs	r0, #114
 2616 06b2 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2617 06b6 0346     		mov	r3, r0
 2618 06b8 1A46     		mov	r2, r3
 2619 06ba 984B     		ldr	r3, .L187+4
 2620 06bc 1A60     		str	r2, [r3]
 683:main.c        ****         OLED_init(128, 32);
 2621              		.loc 1 683 0 discriminator 3
 2622 06be 2021     		movs	r1, #32
 2623 06c0 8020     		movs	r0, #128
 2624 06c2 FFF7FEFF 		bl	OLED_init
 679:main.c        ****     {
 2625              		.loc 1 679 0 discriminator 3
 2626 06c6 BB6F     		ldr	r3, [r7, #120]
 2627 06c8 0133     		adds	r3, r3, #1
 2628 06ca BB67     		str	r3, [r7, #120]
 2629              	.L84:
 679:main.c        ****     {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 60


 2630              		.loc 1 679 0 is_stmt 0 discriminator 1
 2631 06cc BB6F     		ldr	r3, [r7, #120]
 2632 06ce 072B     		cmp	r3, #7
 2633 06d0 E6DD     		ble	.L85
 2634              	.LBE18:
 684:main.c        ****         //OLEDwriteInt(w , 1, 0,FirstLine);
 685:main.c        ****         //OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 686:main.c        ****         //OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_BYTES, OL
 687:main.c        ****        // OLED_draw(128, 32);
 688:main.c        ****     }
 689:main.c        **** 
 690:main.c        ****     //initialize the macro knob adc to scan all knobs
 691:main.c        ****     I2Cbuff1[0] = 1<<2;
 2635              		.loc 1 691 0 is_stmt 1
 2636 06d2 914B     		ldr	r3, .L187
 2637 06d4 0422     		movs	r2, #4
 2638 06d6 1A70     		strb	r2, [r3]
 692:main.c        ****     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 2639              		.loc 1 692 0
 2640 06d8 0022     		movs	r2, #0
 2641 06da 0121     		movs	r1, #1
 2642 06dc 7020     		movs	r0, #112
 2643 06de FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2644 06e2 0346     		mov	r3, r0
 2645 06e4 1A46     		mov	r2, r3
 2646 06e6 8D4B     		ldr	r3, .L187+4
 2647 06e8 1A60     		str	r2, [r3]
 693:main.c        ****     main_counter = 9;
 2648              		.loc 1 693 0
 2649 06ea 8D4B     		ldr	r3, .L187+8
 2650 06ec 0922     		movs	r2, #9
 2651 06ee 1A70     		strb	r2, [r3]
 694:main.c        **** 
 695:main.c        ****     I2Cbuff1[0] = 0xf; //message says scan single-ended mode from beginning to 8th knob (scan all k
 2652              		.loc 1 695 0
 2653 06f0 894B     		ldr	r3, .L187
 2654 06f2 0F22     		movs	r2, #15
 2655 06f4 1A70     		strb	r2, [r3]
 696:main.c        ****     status = I2C_MasterWriteBlocking(0x35, 1, I2C_1_MODE_COMPLETE_XFER);
 2656              		.loc 1 696 0
 2657 06f6 0022     		movs	r2, #0
 2658 06f8 0121     		movs	r1, #1
 2659 06fa 3520     		movs	r0, #53
 2660 06fc FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2661 0700 0346     		mov	r3, r0
 2662 0702 1A46     		mov	r2, r3
 2663 0704 854B     		ldr	r3, .L187+4
 2664 0706 1A60     		str	r2, [r3]
 697:main.c        ****     
 698:main.c        **** #if 0
 699:main.c        ****     while(1)
 700:main.c        ****     {
 701:main.c        ****         for (int i=  0; i < 4; i++)
 702:main.c        ****         {
 703:main.c        ****             knobs[i] = 127 - (ADC_SAR_Seq_1_GetResult16(i)/32);
 704:main.c        ****             if (knobs[i] != prevKnobs[i])
 705:main.c        ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 61


 706:main.c        ****                // sendMIDIControlChange(80+i, knobs[i]);
 707:main.c        ****             }
 708:main.c        ****             prevKnobs[i] = knobs[i];
 709:main.c        ****         }
 710:main.c        ****         
 711:main.c        **** 
 712:main.c        ****         I2Cbuff1[0] = 1<<0;
 713:main.c        ****         uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 714:main.c        **** 
 715:main.c        ****         //CyDelayUs(100);
 716:main.c        ****         I2Cbuff1[0] = 0x0E;
 717:main.c        ****         status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 718:main.c        ****         status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 719:main.c        ****        // CyDelayUs(100);
 720:main.c        ****         angle[0] = I2Cbuff2[0] << 8;
 721:main.c        ****         angle[0] +=  I2Cbuff2[1];
 722:main.c        ****         
 723:main.c        ****     }
 724:main.c        ****     #endif
 725:main.c        ****     //OLEDclear();
 726:main.c        ****     /*
 727:main.c        ****     while(1)
 728:main.c        ****     {
 729:main.c        ****         OLEDwriteInt(bar[1], 5, 0,FirstLine);
 730:main.c        ****         OLED_draw();
 731:main.c        ****         CyDelay(1);
 732:main.c        ****         
 733:main.c        ****         OLEDwriteInt(oct1_Read(), 1, 0,SecondLine);
 734:main.c        ****         OLEDwriteInt(oct2_Read(), 1, 10,SecondLine);
 735:main.c        ****         OLEDwriteInt(oct3_Read(), 1, 20,SecondLine);
 736:main.c        ****         OLEDwriteInt(oct4_Read(), 1, 30,SecondLine);
 737:main.c        ****         for (int i=  0; i < 4; i++)
 738:main.c        ****         {
 739:main.c        ****             OLEDwriteInt( ADC_SAR_Seq_1_GetResult16(i)/8, 3, i*30,2);
 740:main.c        ****         }
 741:main.c        **** 
 742:main.c        ****     }
 743:main.c        ****     */
 744:main.c        **** #if 0
 745:main.c        ****     I2Cbuff1[0] = 1<<mux_states[10][0];
 746:main.c        ****     uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 747:main.c        **** 
 748:main.c        **** 
 749:main.c        ****     I2Cbuff1[0] = 1<<mux_states[10][1];
 750:main.c        ****     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 751:main.c        **** 
 752:main.c        ****     //address 0x48
 753:main.c        ****     I2Cbuff1[0] = 0x1;
 754:main.c        ****     I2Cbuff1[1] = 0b11000000;
 755:main.c        ****     I2Cbuff1[2] = 0b10000011;
 756:main.c        **** 
 757:main.c        ****     status = I2C_MasterWriteBlocking(0x48, 3, I2C_1_MODE_COMPLETE_XFER);
 758:main.c        ****     #endif
 759:main.c        **** 
 760:main.c        ****     SPIS_1_Start();  
 2665              		.loc 1 760 0
 2666 0708 FFF7FEFF 		bl	SPIS_1_Start
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 62


 761:main.c        ****     SPIM_1_Start();  
 2667              		.loc 1 761 0
 2668 070c FFF7FEFF 		bl	SPIM_1_Start
 762:main.c        ****     SPIS_2_Start(); 
 2669              		.loc 1 762 0
 2670 0710 FFF7FEFF 		bl	SPIS_2_Start
 763:main.c        ****     DmaTxConfiguration();
 2671              		.loc 1 763 0
 2672 0714 FFF7FEFF 		bl	DmaTxConfiguration
 764:main.c        ****     DmaRxConfiguration();
 2673              		.loc 1 764 0
 2674 0718 FFF7FEFF 		bl	DmaRxConfiguration
 765:main.c        ****     isr_SPI1_ss_StartEx(spis_1_ss);
 2675              		.loc 1 765 0
 2676 071c 8148     		ldr	r0, .L187+12
 2677 071e FFF7FEFF 		bl	isr_SPI1_ss_StartEx
 766:main.c        ****     isr_SPI2_ss_StartEx(spis_2_ss);
 2678              		.loc 1 766 0
 2679 0722 8148     		ldr	r0, .L187+16
 2680 0724 FFF7FEFF 		bl	isr_SPI2_ss_StartEx
 767:main.c        ****     
 768:main.c        ****     myArray[30] = 254;
 2681              		.loc 1 768 0
 2682 0728 804B     		ldr	r3, .L187+20
 2683 072a FE22     		movs	r2, #254
 2684 072c 9A77     		strb	r2, [r3, #30]
 769:main.c        ****     myArray[31] = 253;
 2685              		.loc 1 769 0
 2686 072e 7F4B     		ldr	r3, .L187+20
 2687 0730 FD22     		movs	r2, #253
 2688 0732 DA77     		strb	r2, [r3, #31]
 770:main.c        **** 
 771:main.c        ****     main_counter = 0;
 2689              		.loc 1 771 0
 2690 0734 7A4B     		ldr	r3, .L187+8
 2691 0736 0022     		movs	r2, #0
 2692 0738 1A70     		strb	r2, [r3]
 2693              	.L178:
 772:main.c        **** 
 773:main.c        **** 	for(;;)
 774:main.c        ****     {
 775:main.c        ****         
 776:main.c        ****         if (parseThatMF)
 2694              		.loc 1 776 0
 2695 073a 7D4B     		ldr	r3, .L187+24
 2696 073c 1B78     		ldrb	r3, [r3]
 2697 073e DBB2     		uxtb	r3, r3
 2698 0740 002B     		cmp	r3, #0
 2699 0742 01D0     		beq	.L86
 777:main.c        ****         {
 778:main.c        ****             parseSysex();
 2700              		.loc 1 778 0
 2701 0744 FFF7FEFF 		bl	parseSysex
 2702              	.L86:
 779:main.c        ****         }
 780:main.c        ****         
 781:main.c        ****         //if (newDataFlag)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 63


 782:main.c        ****         //{
 783:main.c        ****         //}
 784:main.c        ****             /*
 785:main.c        ****             for (int i = 0; i < 5; i++)
 786:main.c        ****             {
 787:main.c        ****                 I2C_1_MasterSendStart(0x70, 0); 
 788:main.c        ****                 I2C_1_MasterWriteByte(1<<i);
 789:main.c        ****                 I2C_1_MasterSendStop(); 
 790:main.c        **** 
 791:main.c        **** 
 792:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 793:main.c        ****                 I2C_1_MasterWriteByte(0x0C);
 794:main.c        ****                 //I2C_1_MasterSendStop();
 795:main.c        ****                 I2C_1_MasterSendRestart(0x36, 1); 
 796:main.c        ****                 rawAngle = I2C_1_MasterReadByte(1) << 8;
 797:main.c        ****                 //I2C_1_MasterSendRestart(0x36, 1);
 798:main.c        ****                 rawAngle +=  I2C_1_MasterReadByte(0);
 799:main.c        ****                  I2C_1_MasterSendStop(); 
 800:main.c        ****                 
 801:main.c        ****                 CyDelay(1);
 802:main.c        **** 
 803:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 804:main.c        ****                 I2C_1_MasterWriteByte(0x01);
 805:main.c        ****                 I2C_1_MasterWriteByte(rawAngle >> 8);
 806:main.c        ****                 I2C_1_MasterWriteByte(rawAngle & 0xff);
 807:main.c        ****                 I2C_1_MasterWriteByte((rawAngle+500) >> 8);
 808:main.c        ****                 I2C_1_MasterWriteByte((rawAngle+500) & 0xff);
 809:main.c        ****                 I2C_1_MasterSendStop(); 
 810:main.c        ****                 
 811:main.c        ****                 CyDelay(2);
 812:main.c        **** 
 813:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 814:main.c        ****                 I2C_1_MasterWriteByte(0xff);
 815:main.c        ****                I2C_1_MasterWriteByte(0x80);
 816:main.c        ****                 I2C_1_MasterSendStop(); 
 817:main.c        ****                CyDelay(2);
 818:main.c        ****             }
 819:main.c        ****         */
 820:main.c        ****         //set main i2c mux
 821:main.c        ****     
 822:main.c        ****         
 823:main.c        ****         /*
 824:main.c        ****         for (int i = 0; i < 4; i++)
 825:main.c        ****         {
 826:main.c        ****             I2C_1_MasterSendStart(0x71, 0); 
 827:main.c        ****             I2C_1_MasterWriteByte(1<<(i+2));
 828:main.c        ****             I2C_1_MasterSendStop(); 
 829:main.c        **** 
 830:main.c        **** 
 831:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 832:main.c        ****             I2C_1_MasterWriteByte(0x0C);
 833:main.c        ****             //I2C_1_MasterSendStop();
 834:main.c        ****             I2C_1_MasterSendRestart(0x36, 1); 
 835:main.c        ****             rawAngle = I2C_1_MasterReadByte(1) << 8;
 836:main.c        ****             //I2C_1_MasterSendRestart(0x36, 1);
 837:main.c        ****             rawAngle +=  I2C_1_MasterReadByte(0);
 838:main.c        ****              I2C_1_MasterSendStop(); 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 64


 839:main.c        ****             
 840:main.c        ****             CyDelay(1);
 841:main.c        **** 
 842:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 843:main.c        ****             I2C_1_MasterWriteByte(0x01);
 844:main.c        ****             I2C_1_MasterWriteByte(rawAngle >> 8);
 845:main.c        ****             I2C_1_MasterWriteByte(rawAngle & 0xff);
 846:main.c        ****             I2C_1_MasterWriteByte((rawAngle+700) >> 8);
 847:main.c        ****             I2C_1_MasterWriteByte((rawAngle+700) & 0xff);
 848:main.c        ****             I2C_1_MasterSendStop(); 
 849:main.c        ****             
 850:main.c        ****             CyDelay(2);
 851:main.c        **** 
 852:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 853:main.c        ****             I2C_1_MasterWriteByte(0xff);
 854:main.c        ****             I2C_1_MasterWriteByte(0x80);
 855:main.c        ****             I2C_1_MasterSendStop(); 
 856:main.c        ****            CyDelay(2);
 857:main.c        ****         }
 858:main.c        ****             */
 859:main.c        ****         /*    
 860:main.c        ****         if (main_counter == 6)
 861:main.c        ****         {
 862:main.c        ****             main_counter = 8;
 863:main.c        ****         }
 864:main.c        ****         */    
 865:main.c        ****         testpin3_Write(1);
 2703              		.loc 1 865 0
 2704 0748 0120     		movs	r0, #1
 2705 074a FFF7FEFF 		bl	testpin3_Write
 866:main.c        ****        //sense levers and pedals
 867:main.c        ****         if (mux_states[main_counter][0] != last_mux)
 2706              		.loc 1 867 0
 2707 074e 744B     		ldr	r3, .L187+8
 2708 0750 1B78     		ldrb	r3, [r3]
 2709 0752 DBB2     		uxtb	r3, r3
 2710 0754 1A46     		mov	r2, r3
 2711 0756 774B     		ldr	r3, .L187+28
 2712 0758 13F81220 		ldrb	r2, [r3, r2, lsl #1]	@ zero_extendqisi2
 2713 075c 764B     		ldr	r3, .L187+32
 2714 075e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2715 0760 9A42     		cmp	r2, r3
 2716 0762 26D0     		beq	.L87
 2717              	.LBB19:
 868:main.c        ****         {
 869:main.c        ****             I2Cbuff1[0] = 1<<mux_states[main_counter][0];
 2718              		.loc 1 869 0
 2719 0764 6E4B     		ldr	r3, .L187+8
 2720 0766 1B78     		ldrb	r3, [r3]
 2721 0768 DBB2     		uxtb	r3, r3
 2722 076a 1A46     		mov	r2, r3
 2723 076c 714B     		ldr	r3, .L187+28
 2724 076e 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 2725 0772 1A46     		mov	r2, r3
 2726 0774 0123     		movs	r3, #1
 2727 0776 9340     		lsls	r3, r3, r2
 2728 0778 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 65


 2729 077a 674B     		ldr	r3, .L187
 2730 077c 1A70     		strb	r2, [r3]
 870:main.c        ****             if (mux_states[main_counter][0] == 5) //slow down I2C communication if it's going throu
 2731              		.loc 1 870 0
 2732 077e 684B     		ldr	r3, .L187+8
 2733 0780 1B78     		ldrb	r3, [r3]
 2734 0782 DBB2     		uxtb	r3, r3
 2735 0784 1A46     		mov	r2, r3
 2736 0786 6B4B     		ldr	r3, .L187+28
 2737 0788 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 2738 078c 052B     		cmp	r3, #5
 2739 078e 04D1     		bne	.L88
 871:main.c        ****             {
 872:main.c        ****                 Clock_2_SetDividerValue(13); //slow speed 400k
 2740              		.loc 1 872 0
 2741 0790 0121     		movs	r1, #1
 2742 0792 0C20     		movs	r0, #12
 2743 0794 FFF7FEFF 		bl	Clock_2_SetDividerRegister
 2744 0798 03E0     		b	.L89
 2745              	.L88:
 873:main.c        ****             }
 874:main.c        ****             else
 875:main.c        ****             {
 876:main.c        ****                 Clock_2_SetDividerValue(5); //otherwise full speed 1000k
 2746              		.loc 1 876 0
 2747 079a 0121     		movs	r1, #1
 2748 079c 0420     		movs	r0, #4
 2749 079e FFF7FEFF 		bl	Clock_2_SetDividerRegister
 2750              	.L89:
 877:main.c        ****             }
 878:main.c        ****             uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 2751              		.loc 1 878 0
 2752 07a2 0022     		movs	r2, #0
 2753 07a4 0121     		movs	r1, #1
 2754 07a6 7020     		movs	r0, #112
 2755 07a8 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2756 07ac 0346     		mov	r3, r0
 2757 07ae 87F82730 		strb	r3, [r7, #39]
 2758              	.L87:
 2759              	.LBE19:
 879:main.c        ****         }
 880:main.c        ****         last_mux = mux_states[main_counter][0];
 2760              		.loc 1 880 0
 2761 07b2 5B4B     		ldr	r3, .L187+8
 2762 07b4 1B78     		ldrb	r3, [r3]
 2763 07b6 DBB2     		uxtb	r3, r3
 2764 07b8 1A46     		mov	r2, r3
 2765 07ba 5E4B     		ldr	r3, .L187+28
 2766 07bc 13F81220 		ldrb	r2, [r3, r2, lsl #1]	@ zero_extendqisi2
 2767 07c0 5D4B     		ldr	r3, .L187+32
 2768 07c2 1A70     		strb	r2, [r3]
 881:main.c        ****         
 882:main.c        ****         
 883:main.c        ****         CyDelayUs(10);
 2769              		.loc 1 883 0
 2770 07c4 0A20     		movs	r0, #10
 2771 07c6 FFF7FEFF 		bl	CyDelayUs
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 66


 884:main.c        ****         if (mux_states[main_counter][0] == 5)
 2772              		.loc 1 884 0
 2773 07ca 554B     		ldr	r3, .L187+8
 2774 07cc 1B78     		ldrb	r3, [r3]
 2775 07ce DBB2     		uxtb	r3, r3
 2776 07d0 1A46     		mov	r2, r3
 2777 07d2 584B     		ldr	r3, .L187+28
 2778 07d4 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 2779 07d8 052B     		cmp	r3, #5
 2780 07da 1DD1     		bne	.L90
 885:main.c        ****         {
 886:main.c        ****             if (!i2c_skipped[main_counter])
 2781              		.loc 1 886 0
 2782 07dc 504B     		ldr	r3, .L187+8
 2783 07de 1B78     		ldrb	r3, [r3]
 2784 07e0 DBB2     		uxtb	r3, r3
 2785 07e2 1A46     		mov	r2, r3
 2786 07e4 554B     		ldr	r3, .L187+36
 2787 07e6 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2788 07e8 002B     		cmp	r3, #0
 2789 07ea 15D1     		bne	.L90
 887:main.c        ****             {
 888:main.c        ****                 I2Cbuff1[0] = 1<<mux_states[main_counter][1];
 2790              		.loc 1 888 0
 2791 07ec 4C4B     		ldr	r3, .L187+8
 2792 07ee 1B78     		ldrb	r3, [r3]
 2793 07f0 DBB2     		uxtb	r3, r3
 2794 07f2 504A     		ldr	r2, .L187+28
 2795 07f4 5B00     		lsls	r3, r3, #1
 2796 07f6 1344     		add	r3, r3, r2
 2797 07f8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2798 07fa 1A46     		mov	r2, r3
 2799 07fc 0123     		movs	r3, #1
 2800 07fe 9340     		lsls	r3, r3, r2
 2801 0800 DAB2     		uxtb	r2, r3
 2802 0802 454B     		ldr	r3, .L187
 2803 0804 1A70     		strb	r2, [r3]
 889:main.c        ****                 status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 2804              		.loc 1 889 0
 2805 0806 0022     		movs	r2, #0
 2806 0808 0121     		movs	r1, #1
 2807 080a 7120     		movs	r0, #113
 2808 080c FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2809 0810 0346     		mov	r3, r0
 2810 0812 1A46     		mov	r2, r3
 2811 0814 414B     		ldr	r3, .L187+4
 2812 0816 1A60     		str	r2, [r3]
 2813              	.L90:
 890:main.c        ****             }
 891:main.c        ****         }
 892:main.c        **** 
 893:main.c        ****         CyDelayUs(10);
 2814              		.loc 1 893 0
 2815 0818 0A20     		movs	r0, #10
 2816 081a FFF7FEFF 		bl	CyDelayUs
 894:main.c        ****         //if it's a hall sensor
 895:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 67


 896:main.c        ****         //temporarily don't scan vertical knee lever, should be <10 normally
 897:main.c        ****         if (main_counter < 10)
 2817              		.loc 1 897 0
 2818 081e 404B     		ldr	r3, .L187+8
 2819 0820 1B78     		ldrb	r3, [r3]
 2820 0822 DBB2     		uxtb	r3, r3
 2821 0824 092B     		cmp	r3, #9
 2822 0826 00F2BF80 		bhi	.L91
 898:main.c        ****         {
 899:main.c        ****             if (!i2c_skipped[main_counter])
 2823              		.loc 1 899 0
 2824 082a 3D4B     		ldr	r3, .L187+8
 2825 082c 1B78     		ldrb	r3, [r3]
 2826 082e DBB2     		uxtb	r3, r3
 2827 0830 1A46     		mov	r2, r3
 2828 0832 424B     		ldr	r3, .L187+36
 2829 0834 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2830 0836 002B     		cmp	r3, #0
 2831 0838 40F0B680 		bne	.L91
 900:main.c        ****             {
 901:main.c        ****                 //CyDelayUs(100);
 902:main.c        ****                 I2Cbuff1[0] = 0x0E;
 2832              		.loc 1 902 0
 2833 083c 364B     		ldr	r3, .L187
 2834 083e 0E22     		movs	r2, #14
 2835 0840 1A70     		strb	r2, [r3]
 903:main.c        ****                 status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 2836              		.loc 1 903 0
 2837 0842 0222     		movs	r2, #2
 2838 0844 0121     		movs	r1, #1
 2839 0846 3620     		movs	r0, #54
 2840 0848 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2841 084c 0346     		mov	r3, r0
 2842 084e 1A46     		mov	r2, r3
 2843 0850 324B     		ldr	r3, .L187+4
 2844 0852 1A60     		str	r2, [r3]
 904:main.c        ****                 if (status == 0)
 2845              		.loc 1 904 0
 2846 0854 314B     		ldr	r3, .L187+4
 2847 0856 1B68     		ldr	r3, [r3]
 2848 0858 002B     		cmp	r3, #0
 2849 085a 08D1     		bne	.L92
 905:main.c        ****                 {
 906:main.c        ****                     status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 2850              		.loc 1 906 0
 2851 085c 0122     		movs	r2, #1
 2852 085e 0221     		movs	r1, #2
 2853 0860 3620     		movs	r0, #54
 2854 0862 FFF7FEFF 		bl	I2C_MasterReadBlocking
 2855 0866 0346     		mov	r3, r0
 2856 0868 1A46     		mov	r2, r3
 2857 086a 2C4B     		ldr	r3, .L187+4
 2858 086c 1A60     		str	r2, [r3]
 2859              	.L92:
 907:main.c        ****                 }
 908:main.c        ****                 if (status  == 0)
 2860              		.loc 1 908 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 68


 2861 086e 2B4B     		ldr	r3, .L187+4
 2862 0870 1B68     		ldr	r3, [r3]
 2863 0872 002B     		cmp	r3, #0
 2864 0874 40F09880 		bne	.L91
 909:main.c        ****                 {
 910:main.c        ****                     //CyDelayUs(100);
 911:main.c        ****                     angle[main_counter] = I2Cbuff2[0] << 8;
 2865              		.loc 1 911 0
 2866 0878 294B     		ldr	r3, .L187+8
 2867 087a 1B78     		ldrb	r3, [r3]
 2868 087c DBB2     		uxtb	r3, r3
 2869 087e 1A46     		mov	r2, r3
 2870 0880 2F4B     		ldr	r3, .L187+40
 2871 0882 1B78     		ldrb	r3, [r3]
 2872 0884 DBB2     		uxtb	r3, r3
 2873 0886 9BB2     		uxth	r3, r3
 2874 0888 1B02     		lsls	r3, r3, #8
 2875 088a 99B2     		uxth	r1, r3
 2876 088c 2D4B     		ldr	r3, .L187+44
 2877 088e 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 912:main.c        ****                     angle[main_counter] +=  I2Cbuff2[1];
 2878              		.loc 1 912 0
 2879 0892 2B4B     		ldr	r3, .L187+40
 2880 0894 5B78     		ldrb	r3, [r3, #1]
 2881 0896 D8B2     		uxtb	r0, r3
 2882 0898 214B     		ldr	r3, .L187+8
 2883 089a 1B78     		ldrb	r3, [r3]
 2884 089c DBB2     		uxtb	r3, r3
 2885 089e 1946     		mov	r1, r3
 2886 08a0 1A46     		mov	r2, r3
 2887 08a2 284B     		ldr	r3, .L187+44
 2888 08a4 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2889 08a8 83B2     		uxth	r3, r0
 2890 08aa 1344     		add	r3, r3, r2
 2891 08ac 9AB2     		uxth	r2, r3
 2892 08ae 254B     		ldr	r3, .L187+44
 2893 08b0 23F81120 		strh	r2, [r3, r1, lsl #1]	@ movhi
 913:main.c        ****                     
 914:main.c        ****                     if (leverCalibrationMode)
 2894              		.loc 1 914 0
 2895 08b4 244B     		ldr	r3, .L187+48
 2896 08b6 1B68     		ldr	r3, [r3]
 2897 08b8 002B     		cmp	r3, #0
 2898 08ba 75D0     		beq	.L91
 915:main.c        ****                     {
 916:main.c        ****                         if (angle[main_counter] < pedals_low[main_counter])
 2899              		.loc 1 916 0
 2900 08bc 184B     		ldr	r3, .L187+8
 2901 08be 1B78     		ldrb	r3, [r3]
 2902 08c0 DBB2     		uxtb	r3, r3
 2903 08c2 1A46     		mov	r2, r3
 2904 08c4 1F4B     		ldr	r3, .L187+44
 2905 08c6 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2906 08ca 154B     		ldr	r3, .L187+8
 2907 08cc 1B78     		ldrb	r3, [r3]
 2908 08ce DBB2     		uxtb	r3, r3
 2909 08d0 1946     		mov	r1, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 69


 2910 08d2 1E4B     		ldr	r3, .L187+52
 2911 08d4 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 2912 08d8 9A42     		cmp	r2, r3
 2913 08da 47D2     		bcs	.L93
 917:main.c        ****                         {
 918:main.c        ****                             if (main_counter == 0)
 2914              		.loc 1 918 0
 2915 08dc 104B     		ldr	r3, .L187+8
 2916 08de 1B78     		ldrb	r3, [r3]
 2917 08e0 DBB2     		uxtb	r3, r3
 2918 08e2 002B     		cmp	r3, #0
 2919 08e4 34D1     		bne	.L94
 919:main.c        ****                             {
 920:main.c        ****                                 if (angle[main_counter] != 0)
 2920              		.loc 1 920 0
 2921 08e6 0E4B     		ldr	r3, .L187+8
 2922 08e8 1B78     		ldrb	r3, [r3]
 2923 08ea DBB2     		uxtb	r3, r3
 2924 08ec 1A46     		mov	r2, r3
 2925 08ee 154B     		ldr	r3, .L187+44
 2926 08f0 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2927 08f4 002B     		cmp	r3, #0
 2928 08f6 39D0     		beq	.L93
 921:main.c        ****                                 {
 922:main.c        ****                                      pedals_low[main_counter] = angle[main_counter];
 2929              		.loc 1 922 0
 2930 08f8 094B     		ldr	r3, .L187+8
 2931 08fa 1B78     		ldrb	r3, [r3]
 2932 08fc DBB2     		uxtb	r3, r3
 2933 08fe 1A46     		mov	r2, r3
 2934 0900 074B     		ldr	r3, .L187+8
 2935 0902 1B78     		ldrb	r3, [r3]
 2936 0904 DBB2     		uxtb	r3, r3
 2937 0906 1946     		mov	r1, r3
 2938 0908 0E4B     		ldr	r3, .L187+44
 2939 090a 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 2940 090e 0F4B     		ldr	r3, .L187+52
 2941 0910 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2942 0914 2AE0     		b	.L93
 2943              	.L188:
 2944 0916 00BF     		.align	2
 2945              	.L187:
 2946 0918 00000000 		.word	I2Cbuff1
 2947 091c 00000000 		.word	status
 2948 0920 00000000 		.word	main_counter
 2949 0924 00000000 		.word	spis_1_ss
 2950 0928 00000000 		.word	spis_2_ss
 2951 092c 00000000 		.word	myArray
 2952 0930 00000000 		.word	parseThatMF
 2953 0934 00000000 		.word	mux_states
 2954 0938 00000000 		.word	last_mux
 2955 093c 00000000 		.word	i2c_skipped
 2956 0940 00000000 		.word	I2Cbuff2
 2957 0944 00000000 		.word	angle
 2958 0948 00000000 		.word	leverCalibrationMode
 2959 094c 00000000 		.word	pedals_low
 2960              	.L94:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 70


 923:main.c        ****                                      //calculatePedalRatios();
 924:main.c        ****                                 }
 925:main.c        ****                             }
 926:main.c        ****                             else
 927:main.c        ****                             {
 928:main.c        ****                                 pedals_low[main_counter] = angle[main_counter];
 2961              		.loc 1 928 0
 2962 0950 884B     		ldr	r3, .L189
 2963 0952 1B78     		ldrb	r3, [r3]
 2964 0954 DBB2     		uxtb	r3, r3
 2965 0956 1A46     		mov	r2, r3
 2966 0958 864B     		ldr	r3, .L189
 2967 095a 1B78     		ldrb	r3, [r3]
 2968 095c DBB2     		uxtb	r3, r3
 2969 095e 1946     		mov	r1, r3
 2970 0960 854B     		ldr	r3, .L189+4
 2971 0962 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 2972 0966 854B     		ldr	r3, .L189+8
 2973 0968 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2974              	.L93:
 929:main.c        ****                                 //calculatePedalRatios();
 930:main.c        ****                             }
 931:main.c        ****                             
 932:main.c        ****                         }
 933:main.c        ****                         if (angle[main_counter] > pedals_high[main_counter])
 2975              		.loc 1 933 0
 2976 096c 814B     		ldr	r3, .L189
 2977 096e 1B78     		ldrb	r3, [r3]
 2978 0970 DBB2     		uxtb	r3, r3
 2979 0972 1A46     		mov	r2, r3
 2980 0974 804B     		ldr	r3, .L189+4
 2981 0976 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2982 097a 7E4B     		ldr	r3, .L189
 2983 097c 1B78     		ldrb	r3, [r3]
 2984 097e DBB2     		uxtb	r3, r3
 2985 0980 1946     		mov	r1, r3
 2986 0982 7F4B     		ldr	r3, .L189+12
 2987 0984 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 2988 0988 9A42     		cmp	r2, r3
 2989 098a 0DD9     		bls	.L91
 934:main.c        ****                         {
 935:main.c        ****                              pedals_high[main_counter] = angle[main_counter];
 2990              		.loc 1 935 0
 2991 098c 794B     		ldr	r3, .L189
 2992 098e 1B78     		ldrb	r3, [r3]
 2993 0990 DBB2     		uxtb	r3, r3
 2994 0992 1A46     		mov	r2, r3
 2995 0994 774B     		ldr	r3, .L189
 2996 0996 1B78     		ldrb	r3, [r3]
 2997 0998 DBB2     		uxtb	r3, r3
 2998 099a 1946     		mov	r1, r3
 2999 099c 764B     		ldr	r3, .L189+4
 3000 099e 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 3001 09a2 774B     		ldr	r3, .L189+12
 3002 09a4 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 3003              	.L91:
 936:main.c        ****                              //calculatePedalRatios();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 71


 937:main.c        ****                         }
 938:main.c        ****                     }
 939:main.c        ****                 }
 940:main.c        ****             }
 941:main.c        ****         }
 942:main.c        ****         
 943:main.c        ****         //in addition to the hall sensor on {2,0} (the vertical knee lever) of the muxes, there is 
 944:main.c        ****         if (main_counter == 9)
 3004              		.loc 1 944 0
 3005 09a8 724B     		ldr	r3, .L189
 3006 09aa 1B78     		ldrb	r3, [r3]
 3007 09ac DBB2     		uxtb	r3, r3
 3008 09ae 092B     		cmp	r3, #9
 3009 09b0 40F0AF80 		bne	.L96
 945:main.c        ****         {
 946:main.c        ****             if (!i2c_skipped[main_counter])
 3010              		.loc 1 946 0
 3011 09b4 6F4B     		ldr	r3, .L189
 3012 09b6 1B78     		ldrb	r3, [r3]
 3013 09b8 DBB2     		uxtb	r3, r3
 3014 09ba 1A46     		mov	r2, r3
 3015 09bc 714B     		ldr	r3, .L189+16
 3016 09be 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 3017 09c0 002B     		cmp	r3, #0
 3018 09c2 40F00E81 		bne	.L101
 947:main.c        ****             {
 948:main.c        ****                 //scan the knob adc
 949:main.c        ****                 I2Cbuff1[0] = 0x0;      
 3019              		.loc 1 949 0
 3020 09c6 704B     		ldr	r3, .L189+20
 3021 09c8 0022     		movs	r2, #0
 3022 09ca 1A70     		strb	r2, [r3]
 950:main.c        ****                 status = I2C_MasterReadBlocking(0x35, 16, I2C_1_MODE_COMPLETE_XFER);
 3023              		.loc 1 950 0
 3024 09cc 0022     		movs	r2, #0
 3025 09ce 1021     		movs	r1, #16
 3026 09d0 3520     		movs	r0, #53
 3027 09d2 FFF7FEFF 		bl	I2C_MasterReadBlocking
 3028 09d6 0346     		mov	r3, r0
 3029 09d8 1A46     		mov	r2, r3
 3030 09da 6C4B     		ldr	r3, .L189+24
 3031 09dc 1A60     		str	r2, [r3]
 951:main.c        ****                 if (status == 0)
 3032              		.loc 1 951 0
 3033 09de 6B4B     		ldr	r3, .L189+24
 3034 09e0 1B68     		ldr	r3, [r3]
 3035 09e2 002B     		cmp	r3, #0
 3036 09e4 40F0FD80 		bne	.L101
 3037              	.LBB20:
 952:main.c        ****                 {
 953:main.c        ****                     for (int i = 0; i < NUM_MACROS; i++)
 3038              		.loc 1 953 0
 3039 09e8 0023     		movs	r3, #0
 3040 09ea 7B67     		str	r3, [r7, #116]
 3041 09ec 49E0     		b	.L98
 3042              	.L100:
 3043              	.LBB21:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 72


 954:main.c        ****                     {
 955:main.c        ****                        uint16_t tempInt =((I2Cbuff2[i*2] << 8) + (I2Cbuff2[(i*2) + 1] & 255)) & 409
 3044              		.loc 1 955 0
 3045 09ee 7B6F     		ldr	r3, [r7, #116]
 3046 09f0 5B00     		lsls	r3, r3, #1
 3047 09f2 674A     		ldr	r2, .L189+28
 3048 09f4 D35C     		ldrb	r3, [r2, r3]
 3049 09f6 DBB2     		uxtb	r3, r3
 3050 09f8 9BB2     		uxth	r3, r3
 3051 09fa 1B02     		lsls	r3, r3, #8
 3052 09fc 9AB2     		uxth	r2, r3
 3053 09fe 7B6F     		ldr	r3, [r7, #116]
 3054 0a00 5B00     		lsls	r3, r3, #1
 3055 0a02 0133     		adds	r3, r3, #1
 3056 0a04 6249     		ldr	r1, .L189+28
 3057 0a06 CB5C     		ldrb	r3, [r1, r3]
 3058 0a08 DBB2     		uxtb	r3, r3
 3059 0a0a 9BB2     		uxth	r3, r3
 3060 0a0c 1344     		add	r3, r3, r2
 3061 0a0e 9BB2     		uxth	r3, r3
 3062 0a10 C3F30B03 		ubfx	r3, r3, #0, #12
 3063 0a14 3B80     		strh	r3, [r7]	@ movhi
 956:main.c        ****                         macroKnobValues[i] = 255 - (tempInt >> 4); //now squish it down to 8 bit fo
 3064              		.loc 1 956 0
 3065 0a16 3B88     		ldrh	r3, [r7]
 3066 0a18 1B09     		lsrs	r3, r3, #4
 3067 0a1a 9BB2     		uxth	r3, r3
 3068 0a1c DBB2     		uxtb	r3, r3
 3069 0a1e DB43     		mvns	r3, r3
 3070 0a20 D9B2     		uxtb	r1, r3
 3071 0a22 5C4A     		ldr	r2, .L189+32
 3072 0a24 7B6F     		ldr	r3, [r7, #116]
 3073 0a26 1344     		add	r3, r3, r2
 3074 0a28 0A46     		mov	r2, r1
 3075 0a2a 1A70     		strb	r2, [r3]
 957:main.c        ****                         macroKnobValues7bit[i] = macroKnobValues[i] >> 1;
 3076              		.loc 1 957 0
 3077 0a2c 594A     		ldr	r2, .L189+32
 3078 0a2e 7B6F     		ldr	r3, [r7, #116]
 3079 0a30 1344     		add	r3, r3, r2
 3080 0a32 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3081 0a34 5B08     		lsrs	r3, r3, #1
 3082 0a36 D9B2     		uxtb	r1, r3
 3083 0a38 574A     		ldr	r2, .L189+36
 3084 0a3a 7B6F     		ldr	r3, [r7, #116]
 3085 0a3c 1344     		add	r3, r3, r2
 3086 0a3e 0A46     		mov	r2, r1
 3087 0a40 1A70     		strb	r2, [r3]
 958:main.c        ****                         if (macroKnobValues7bit[i] != prevMacroKnobValues7bit[i])
 3088              		.loc 1 958 0
 3089 0a42 554A     		ldr	r2, .L189+36
 3090 0a44 7B6F     		ldr	r3, [r7, #116]
 3091 0a46 1344     		add	r3, r3, r2
 3092 0a48 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3093 0a4a 5449     		ldr	r1, .L189+40
 3094 0a4c 7B6F     		ldr	r3, [r7, #116]
 3095 0a4e 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 73


 3096 0a50 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3097 0a52 9A42     		cmp	r2, r3
 3098 0a54 09D0     		beq	.L99
 959:main.c        ****                         {
 960:main.c        ****                             sendMIDIControlChange(i+1, macroKnobValues7bit[i], 0);
 3099              		.loc 1 960 0
 3100 0a56 7B6F     		ldr	r3, [r7, #116]
 3101 0a58 581C     		adds	r0, r3, #1
 3102 0a5a 4F4A     		ldr	r2, .L189+36
 3103 0a5c 7B6F     		ldr	r3, [r7, #116]
 3104 0a5e 1344     		add	r3, r3, r2
 3105 0a60 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3106 0a62 0022     		movs	r2, #0
 3107 0a64 1946     		mov	r1, r3
 3108 0a66 FFF7FEFF 		bl	sendMIDIControlChange
 3109              	.L99:
 961:main.c        ****                         }
 962:main.c        ****                         prevMacroKnobValues7bit[i] = macroKnobValues7bit[i];
 3110              		.loc 1 962 0 discriminator 2
 3111 0a6a 4B4A     		ldr	r2, .L189+36
 3112 0a6c 7B6F     		ldr	r3, [r7, #116]
 3113 0a6e 1344     		add	r3, r3, r2
 3114 0a70 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3115 0a72 4A4A     		ldr	r2, .L189+40
 3116 0a74 7B6F     		ldr	r3, [r7, #116]
 3117 0a76 1344     		add	r3, r3, r2
 3118 0a78 0A46     		mov	r2, r1
 3119 0a7a 1A70     		strb	r2, [r3]
 3120              	.LBE21:
 953:main.c        ****                     {
 3121              		.loc 1 953 0 discriminator 2
 3122 0a7c 7B6F     		ldr	r3, [r7, #116]
 3123 0a7e 0133     		adds	r3, r3, #1
 3124 0a80 7B67     		str	r3, [r7, #116]
 3125              	.L98:
 953:main.c        ****                     {
 3126              		.loc 1 953 0 is_stmt 0 discriminator 1
 3127 0a82 7B6F     		ldr	r3, [r7, #116]
 3128 0a84 072B     		cmp	r3, #7
 3129 0a86 B2DD     		ble	.L100
 3130              	.LBE20:
 963:main.c        ****                     }
 964:main.c        ****                     //
 965:main.c        ****                     if (macroOLEDWaitingToSend == 2)
 3131              		.loc 1 965 0 is_stmt 1
 3132 0a88 454B     		ldr	r3, .L189+44
 3133 0a8a 1B68     		ldr	r3, [r3]
 3134 0a8c 022B     		cmp	r3, #2
 3135 0a8e 40F0A880 		bne	.L101
 966:main.c        ****                     {
 967:main.c        ****                         //send the data to the little macro OLED screens
 968:main.c        ****                         
 969:main.c        ****                         I2Cbuff1[0] = (1 << 3) + whichMacro;
 3136              		.loc 1 969 0
 3137 0a92 444B     		ldr	r3, .L189+48
 3138 0a94 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3139 0a96 0833     		adds	r3, r3, #8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 74


 3140 0a98 DAB2     		uxtb	r2, r3
 3141 0a9a 3B4B     		ldr	r3, .L189+20
 3142 0a9c 1A70     		strb	r2, [r3]
 970:main.c        ****                         status = I2C_MasterWriteBlocking(0x72, 1, I2C_1_MODE_COMPLETE_XFER); 
 3143              		.loc 1 970 0
 3144 0a9e 0022     		movs	r2, #0
 3145 0aa0 0121     		movs	r1, #1
 3146 0aa2 7220     		movs	r0, #114
 3147 0aa4 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 3148 0aa8 0346     		mov	r3, r0
 3149 0aaa 1A46     		mov	r2, r3
 3150 0aac 374B     		ldr	r3, .L189+24
 3151 0aae 1A60     		str	r2, [r3]
 971:main.c        ****                         //OLED_init(128, 32);
 972:main.c        ****                         OLEDclear(128, 32);
 3152              		.loc 1 972 0
 3153 0ab0 2021     		movs	r1, #32
 3154 0ab2 8020     		movs	r0, #128
 3155 0ab4 FFF7FEFF 		bl	OLEDclear
 973:main.c        ****                         //OLEDwriteInt(w , 1, 0,FirstLine);
 974:main.c        ****                         //OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 975:main.c        ****                         myGFX_setFont(1);
 3156              		.loc 1 975 0
 3157 0ab8 0120     		movs	r0, #1
 3158 0aba FFF7FEFF 		bl	myGFX_setFont
 976:main.c        ****                         //GFXsetFont(&theGFX,  &SourceCodePro_Regular14pt7b);
 977:main.c        ****                         OLEDwriteLineMiddle((char *)&macroNamesArray[patchNum][whichMacro][0], MACR
 3159              		.loc 1 977 0
 3160 0abe 3A4B     		ldr	r3, .L189+52
 3161 0ac0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3162 0ac2 1946     		mov	r1, r3
 3163 0ac4 374B     		ldr	r3, .L189+48
 3164 0ac6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3165 0ac8 1A46     		mov	r2, r3
 3166 0aca D200     		lsls	r2, r2, #3
 3167 0acc D21A     		subs	r2, r2, r3
 3168 0ace 5300     		lsls	r3, r2, #1
 3169 0ad0 1A46     		mov	r2, r3
 3170 0ad2 0B46     		mov	r3, r1
 3171 0ad4 DB00     		lsls	r3, r3, #3
 3172 0ad6 5B1A     		subs	r3, r3, r1
 3173 0ad8 1B01     		lsls	r3, r3, #4
 3174 0ada 1344     		add	r3, r3, r2
 3175 0adc 334A     		ldr	r2, .L189+56
 3176 0ade 1344     		add	r3, r3, r2
 3177 0ae0 0921     		movs	r1, #9
 3178 0ae2 1846     		mov	r0, r3
 3179 0ae4 FFF7FEFF 		bl	OLEDwriteLineMiddle
 978:main.c        ****                         OLED_draw(128, 32);
 3180              		.loc 1 978 0
 3181 0ae8 2021     		movs	r1, #32
 3182 0aea 8020     		movs	r0, #128
 3183 0aec FFF7FEFF 		bl	OLED_draw
 979:main.c        **** 
 980:main.c        ****                         whichMacro++;
 3184              		.loc 1 980 0
 3185 0af0 2C4B     		ldr	r3, .L189+48
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 75


 3186 0af2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3187 0af4 0133     		adds	r3, r3, #1
 3188 0af6 DAB2     		uxtb	r2, r3
 3189 0af8 2A4B     		ldr	r3, .L189+48
 3190 0afa 1A70     		strb	r2, [r3]
 981:main.c        ****                         if (whichMacro >=8)
 3191              		.loc 1 981 0
 3192 0afc 294B     		ldr	r3, .L189+48
 3193 0afe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3194 0b00 072B     		cmp	r3, #7
 3195 0b02 6ED9     		bls	.L101
 982:main.c        ****                         {
 983:main.c        ****                             macroOLEDWaitingToSend = 0;
 3196              		.loc 1 983 0
 3197 0b04 264B     		ldr	r3, .L189+44
 3198 0b06 0022     		movs	r2, #0
 3199 0b08 1A60     		str	r2, [r3]
 984:main.c        ****                             whichMacro = 0;
 3200              		.loc 1 984 0
 3201 0b0a 264B     		ldr	r3, .L189+48
 3202 0b0c 0022     		movs	r2, #0
 3203 0b0e 1A70     		strb	r2, [r3]
 3204 0b10 67E0     		b	.L101
 3205              	.L96:
 985:main.c        ****                         }
 986:main.c        ****                     }
 987:main.c        ****                 }
 988:main.c        ****             }
 989:main.c        ****             
 990:main.c        ****         }
 991:main.c        ****         //otherwise it's the ADC for the foot pedal
 992:main.c        ****         else if (main_counter == 10)
 3206              		.loc 1 992 0
 3207 0b12 184B     		ldr	r3, .L189
 3208 0b14 1B78     		ldrb	r3, [r3]
 3209 0b16 DBB2     		uxtb	r3, r3
 3210 0b18 0A2B     		cmp	r3, #10
 3211 0b1a 4BD1     		bne	.L102
 993:main.c        ****         {
 994:main.c        ****             //0x4f (0x4D?) is the 7=-bit version of the MCP3221 address, might need to be shifted o
 995:main.c        ****             if (!i2c_skipped[main_counter])
 3212              		.loc 1 995 0
 3213 0b1c 154B     		ldr	r3, .L189
 3214 0b1e 1B78     		ldrb	r3, [r3]
 3215 0b20 DBB2     		uxtb	r3, r3
 3216 0b22 1A46     		mov	r2, r3
 3217 0b24 174B     		ldr	r3, .L189+16
 3218 0b26 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 3219 0b28 002B     		cmp	r3, #0
 3220 0b2a 5AD1     		bne	.L101
 996:main.c        ****             {
 997:main.c        ****                 I2Cbuff1[0] = 0x0;      
 3221              		.loc 1 997 0
 3222 0b2c 164B     		ldr	r3, .L189+20
 3223 0b2e 0022     		movs	r2, #0
 3224 0b30 1A70     		strb	r2, [r3]
 998:main.c        ****                 status = I2C_MasterReadBlocking(0x4f, 2, I2C_1_MODE_COMPLETE_XFER);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 76


 3225              		.loc 1 998 0
 3226 0b32 0022     		movs	r2, #0
 3227 0b34 0221     		movs	r1, #2
 3228 0b36 4F20     		movs	r0, #79
 3229 0b38 FFF7FEFF 		bl	I2C_MasterReadBlocking
 3230 0b3c 0346     		mov	r3, r0
 3231 0b3e 1A46     		mov	r2, r3
 3232 0b40 124B     		ldr	r3, .L189+24
 3233 0b42 1A60     		str	r2, [r3]
 999:main.c        ****                 if (status == 0)
 3234              		.loc 1 999 0
 3235 0b44 114B     		ldr	r3, .L189+24
 3236 0b46 1B68     		ldr	r3, [r3]
 3237 0b48 002B     		cmp	r3, #0
 3238 0b4a 4AD1     		bne	.L101
1000:main.c        ****                 {
1001:main.c        ****                     volumePedal = I2Cbuff2[0] << 8;
 3239              		.loc 1 1001 0
 3240 0b4c 104B     		ldr	r3, .L189+28
 3241 0b4e 1B78     		ldrb	r3, [r3]
 3242 0b50 DBB2     		uxtb	r3, r3
 3243 0b52 9BB2     		uxth	r3, r3
 3244 0b54 1B02     		lsls	r3, r3, #8
 3245 0b56 9AB2     		uxth	r2, r3
 3246 0b58 154B     		ldr	r3, .L189+60
 3247 0b5a 1A80     		strh	r2, [r3]	@ movhi
1002:main.c        ****                     volumePedal +=  I2Cbuff2[1];
 3248              		.loc 1 1002 0
 3249 0b5c 0C4B     		ldr	r3, .L189+28
 3250 0b5e 5B78     		ldrb	r3, [r3, #1]
 3251 0b60 DBB2     		uxtb	r3, r3
 3252 0b62 9AB2     		uxth	r2, r3
 3253 0b64 124B     		ldr	r3, .L189+60
 3254 0b66 1B88     		ldrh	r3, [r3]
 3255 0b68 1344     		add	r3, r3, r2
 3256 0b6a 9AB2     		uxth	r2, r3
 3257 0b6c 104B     		ldr	r3, .L189+60
 3258 0b6e 1A80     		strh	r2, [r3]	@ movhi
 3259 0b70 37E0     		b	.L101
 3260              	.L190:
 3261 0b72 00BF     		.align	2
 3262              	.L189:
 3263 0b74 00000000 		.word	main_counter
 3264 0b78 00000000 		.word	angle
 3265 0b7c 00000000 		.word	pedals_low
 3266 0b80 00000000 		.word	pedals_high
 3267 0b84 00000000 		.word	i2c_skipped
 3268 0b88 00000000 		.word	I2Cbuff1
 3269 0b8c 00000000 		.word	status
 3270 0b90 00000000 		.word	I2Cbuff2
 3271 0b94 00000000 		.word	macroKnobValues
 3272 0b98 00000000 		.word	macroKnobValues7bit
 3273 0b9c 00000000 		.word	prevMacroKnobValues7bit
 3274 0ba0 00000000 		.word	macroOLEDWaitingToSend
 3275 0ba4 00000000 		.word	whichMacro
 3276 0ba8 00000000 		.word	patchNum
 3277 0bac 00000000 		.word	macroNamesArray
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 77


 3278 0bb0 00000000 		.word	volumePedal
 3279              	.L102:
1003:main.c        ****                 }
1004:main.c        ****             }
1005:main.c        ****         }
1006:main.c        ****         else
1007:main.c        ****         if (main_counter == 11)
 3280              		.loc 1 1007 0
 3281 0bb4 8D4B     		ldr	r3, .L191
 3282 0bb6 1B78     		ldrb	r3, [r3]
 3283 0bb8 DBB2     		uxtb	r3, r3
 3284 0bba 0B2B     		cmp	r3, #11
 3285 0bbc 11D1     		bne	.L101
1008:main.c        ****         { 
1009:main.c        ****             if (mainOLEDWaitingToSend)
 3286              		.loc 1 1009 0
 3287 0bbe 8C4B     		ldr	r3, .L191+4
 3288 0bc0 1B68     		ldr	r3, [r3]
 3289 0bc2 002B     		cmp	r3, #0
 3290 0bc4 06D0     		beq	.L104
1010:main.c        ****             {
1011:main.c        ****                 OLED_draw(128, 64);
 3291              		.loc 1 1011 0
 3292 0bc6 4021     		movs	r1, #64
 3293 0bc8 8020     		movs	r0, #128
 3294 0bca FFF7FEFF 		bl	OLED_draw
1012:main.c        ****                 mainOLEDWaitingToSend = 0;
 3295              		.loc 1 1012 0
 3296 0bce 884B     		ldr	r3, .L191+4
 3297 0bd0 0022     		movs	r2, #0
 3298 0bd2 1A60     		str	r2, [r3]
 3299              	.L104:
1013:main.c        ****             }
1014:main.c        ****             if (macroOLEDWaitingToSend == 1)
 3300              		.loc 1 1014 0
 3301 0bd4 874B     		ldr	r3, .L191+8
 3302 0bd6 1B68     		ldr	r3, [r3]
 3303 0bd8 012B     		cmp	r3, #1
 3304 0bda 02D1     		bne	.L101
1015:main.c        ****             {
1016:main.c        ****                 macroOLEDWaitingToSend = 2;
 3305              		.loc 1 1016 0
 3306 0bdc 854B     		ldr	r3, .L191+8
 3307 0bde 0222     		movs	r2, #2
 3308 0be0 1A60     		str	r2, [r3]
 3309              	.L101:
1017:main.c        ****             }
1018:main.c        ****         }
1019:main.c        **** 
1020:main.c        ****         /*
1021:main.c        ****         I2Cbuff1[0] = 1<<main_counter;
1022:main.c        ****         uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1023:main.c        **** 
1024:main.c        ****                 for (int i = 0; i < 5; i++)
1025:main.c        ****                 {
1026:main.c        ****                     I2Cbuff1[0] = 1<<i;
1027:main.c        ****                     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 78


1028:main.c        **** 
1029:main.c        ****                     I2Cbuff1[0] = 0x0E;
1030:main.c        ****                     status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
1031:main.c        **** 
1032:main.c        ****                     status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
1033:main.c        **** 
1034:main.c        **** 
1035:main.c        ****                     angle[i] = I2Cbuff2[0] << 8;
1036:main.c        ****                     angle[i] +=  I2Cbuff2[1];
1037:main.c        ****                 }
1038:main.c        ****             if (main_counter == 0)
1039:main.c        ****             {               
1040:main.c        ****                 I2Cbuff1[0] = 1<<main_counter;
1041:main.c        ****                 uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1042:main.c        **** 
1043:main.c        ****                 for (int i = 0; i < 5; i++)
1044:main.c        ****                 {
1045:main.c        ****                     I2Cbuff1[0] = 1<<i;
1046:main.c        ****                     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
1047:main.c        **** 
1048:main.c        ****                     I2Cbuff1[0] = 0x0E;
1049:main.c        ****                     status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
1050:main.c        **** 
1051:main.c        ****                     status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
1052:main.c        **** 
1053:main.c        **** 
1054:main.c        ****                     angle[i] = I2Cbuff2[0] << 8;
1055:main.c        ****                     angle[i] +=  I2Cbuff2[1];
1056:main.c        ****                 }
1057:main.c        ****             }
1058:main.c        ****             else
1059:main.c        ****             {
1060:main.c        ****                 I2Cbuff1[0] = 1<<(main_counter+1);
1061:main.c        ****                 uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1062:main.c        ****                 I2Cbuff1[0] = 0x0E;
1063:main.c        ****                 status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
1064:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
1065:main.c        ****                 {
1066:main.c        ****                     I2Cbuff1[0] = 1<<(main_counter+1);
1067:main.c        ****                     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1068:main.c        ****                 }
1069:main.c        ****            
1070:main.c        **** 
1071:main.c        **** 
1072:main.c        ****                 status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
1073:main.c        ****                  //I2C_1_MasterReadBuf(0x36, I2Cbuff3, 2, I2C_1_MODE_REPEAT_START);
1074:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
1075:main.c        ****                 {
1076:main.c        ****                     I2Cbuff1[0] = 1<<(main_counter+1);
1077:main.c        ****                     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1078:main.c        ****                 }
1079:main.c        ****                 
1080:main.c        ****                 angle[main_counter+4] = I2Cbuff2[0] << 8;
1081:main.c        ****                 angle[main_counter+4] +=  I2Cbuff2[1];
1082:main.c        ****             }    
1083:main.c        ****                 
1084:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 79


1085:main.c        ****             send_it = 1;
1086:main.c        ****         }
1087:main.c        ****         */
1088:main.c        ****         
1089:main.c        ****         if (main_counter < 10)
 3310              		.loc 1 1089 0
 3311 0be2 824B     		ldr	r3, .L191
 3312 0be4 1B78     		ldrb	r3, [r3]
 3313 0be6 DBB2     		uxtb	r3, r3
 3314 0be8 092B     		cmp	r3, #9
 3315 0bea 00F2E480 		bhi	.L105
 3316              	.LBB22:
1090:main.c        ****         {
1091:main.c        ****             
1092:main.c        ****             //do math to make all pedals and levers report between 0 and 4095 scaled
1093:main.c        ****             int16_t tempangle = ((int16_t) angle[main_counter] - (int16_t)pedals_lowWithDeadZone[ma
 3317              		.loc 1 1093 0
 3318 0bee 7F4B     		ldr	r3, .L191
 3319 0bf0 1B78     		ldrb	r3, [r3]
 3320 0bf2 DBB2     		uxtb	r3, r3
 3321 0bf4 1A46     		mov	r2, r3
 3322 0bf6 804B     		ldr	r3, .L191+12
 3323 0bf8 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 3324 0bfc 7B4B     		ldr	r3, .L191
 3325 0bfe 1B78     		ldrb	r3, [r3]
 3326 0c00 DBB2     		uxtb	r3, r3
 3327 0c02 1946     		mov	r1, r3
 3328 0c04 7D4B     		ldr	r3, .L191+16
 3329 0c06 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 3330 0c0a D31A     		subs	r3, r2, r3
 3331 0c0c 9BB2     		uxth	r3, r3
 3332 0c0e BB84     		strh	r3, [r7, #36]	@ movhi
1094:main.c        ****             
1095:main.c        ****             if (tempangle > 0)
 3333              		.loc 1 1095 0
 3334 0c10 B7F92430 		ldrsh	r3, [r7, #36]
 3335 0c14 002B     		cmp	r3, #0
 3336 0c16 1CDD     		ble	.L106
1096:main.c        ****             {
1097:main.c        ****                 processed_pedals[main_counter] = (float)tempangle * pedalRatios[main_counter];
 3337              		.loc 1 1097 0
 3338 0c18 744B     		ldr	r3, .L191
 3339 0c1a 1B78     		ldrb	r3, [r3]
 3340 0c1c DBB2     		uxtb	r3, r3
 3341 0c1e 1C46     		mov	r4, r3
 3342 0c20 B7F92430 		ldrsh	r3, [r7, #36]
 3343 0c24 1846     		mov	r0, r3
 3344 0c26 FFF7FEFF 		bl	__aeabi_i2f
 3345 0c2a 704B     		ldr	r3, .L191
 3346 0c2c 1B78     		ldrb	r3, [r3]
 3347 0c2e DBB2     		uxtb	r3, r3
 3348 0c30 1A46     		mov	r2, r3
 3349 0c32 734B     		ldr	r3, .L191+20
 3350 0c34 53F82230 		ldr	r3, [r3, r2, lsl #2]	@ float
 3351 0c38 1946     		mov	r1, r3
 3352 0c3a FFF7FEFF 		bl	__aeabi_fmul
 3353 0c3e 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 80


 3354 0c40 1846     		mov	r0, r3
 3355 0c42 FFF7FEFF 		bl	__aeabi_f2uiz
 3356 0c46 0346     		mov	r3, r0
 3357 0c48 9AB2     		uxth	r2, r3
 3358 0c4a 6E4B     		ldr	r3, .L191+24
 3359 0c4c 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
 3360 0c50 07E0     		b	.L107
 3361              	.L106:
1098:main.c        ****             }
1099:main.c        ****             else
1100:main.c        ****             {
1101:main.c        ****                 processed_pedals[main_counter] = 0;
 3362              		.loc 1 1101 0
 3363 0c52 664B     		ldr	r3, .L191
 3364 0c54 1B78     		ldrb	r3, [r3]
 3365 0c56 DBB2     		uxtb	r3, r3
 3366 0c58 1A46     		mov	r2, r3
 3367 0c5a 6A4B     		ldr	r3, .L191+24
 3368 0c5c 0021     		movs	r1, #0
 3369 0c5e 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 3370              	.L107:
1102:main.c        ****             }
1103:main.c        ****             if (processed_pedals[main_counter] > 4095)
 3371              		.loc 1 1103 0
 3372 0c62 624B     		ldr	r3, .L191
 3373 0c64 1B78     		ldrb	r3, [r3]
 3374 0c66 DBB2     		uxtb	r3, r3
 3375 0c68 1A46     		mov	r2, r3
 3376 0c6a 664B     		ldr	r3, .L191+24
 3377 0c6c 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3378 0c70 B3F5805F 		cmp	r3, #4096
 3379 0c74 08D3     		bcc	.L108
1104:main.c        ****             {
1105:main.c        ****                 processed_pedals[main_counter] = 4095;
 3380              		.loc 1 1105 0
 3381 0c76 5D4B     		ldr	r3, .L191
 3382 0c78 1B78     		ldrb	r3, [r3]
 3383 0c7a DBB2     		uxtb	r3, r3
 3384 0c7c 1A46     		mov	r2, r3
 3385 0c7e 614B     		ldr	r3, .L191+24
 3386 0c80 40F6FF71 		movw	r1, #4095
 3387 0c84 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 3388              	.L108:
1106:main.c        ****             }
1107:main.c        ****             //invert the ones that are sensing rotation backwards
1108:main.c        ****             if (pedal_inverted[main_counter])
 3389              		.loc 1 1108 0
 3390 0c88 584B     		ldr	r3, .L191
 3391 0c8a 1B78     		ldrb	r3, [r3]
 3392 0c8c DBB2     		uxtb	r3, r3
 3393 0c8e 1A46     		mov	r2, r3
 3394 0c90 5D4B     		ldr	r3, .L191+28
 3395 0c92 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 3396 0c94 002B     		cmp	r3, #0
 3397 0c96 11D0     		beq	.L109
1109:main.c        ****             {
1110:main.c        ****                 processed_pedals[main_counter] = 4095 - processed_pedals[main_counter];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 81


 3398              		.loc 1 1110 0
 3399 0c98 544B     		ldr	r3, .L191
 3400 0c9a 1B78     		ldrb	r3, [r3]
 3401 0c9c DBB2     		uxtb	r3, r3
 3402 0c9e 1A46     		mov	r2, r3
 3403 0ca0 524B     		ldr	r3, .L191
 3404 0ca2 1B78     		ldrb	r3, [r3]
 3405 0ca4 DBB2     		uxtb	r3, r3
 3406 0ca6 1946     		mov	r1, r3
 3407 0ca8 564B     		ldr	r3, .L191+24
 3408 0caa 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 3409 0cae C3F57F63 		rsb	r3, r3, #4080
 3410 0cb2 0F33     		adds	r3, r3, #15
 3411 0cb4 99B2     		uxth	r1, r3
 3412 0cb6 534B     		ldr	r3, .L191+24
 3413 0cb8 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 3414              	.L109:
1111:main.c        ****             }
1112:main.c        ****             
1113:main.c        ****             //if ( processed_pedals[main_counter] != prev_processed_pedals[main_counter])
1114:main.c        ****             {
1115:main.c        ****                 //sendMIDIControlChange(main_counter, (processed_pedals[main_counter] >> 7), 1);
1116:main.c        ****                 //sendMIDIControlChange(main_counter+36, (processed_pedals[main_counter] & 127), 1)
1117:main.c        ****             }
1118:main.c        ****             pedals_float[main_counter] = (float)processed_pedals[main_counter] * 2.442002442002442e
 3415              		.loc 1 1118 0
 3416 0cbc 4B4B     		ldr	r3, .L191
 3417 0cbe 1B78     		ldrb	r3, [r3]
 3418 0cc0 DBB2     		uxtb	r3, r3
 3419 0cc2 1C46     		mov	r4, r3
 3420 0cc4 494B     		ldr	r3, .L191
 3421 0cc6 1B78     		ldrb	r3, [r3]
 3422 0cc8 DBB2     		uxtb	r3, r3
 3423 0cca 1A46     		mov	r2, r3
 3424 0ccc 4D4B     		ldr	r3, .L191+24
 3425 0cce 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3426 0cd2 1846     		mov	r0, r3
 3427 0cd4 FFF7FEFF 		bl	__aeabi_ui2f
 3428 0cd8 0346     		mov	r3, r0
 3429 0cda 4C49     		ldr	r1, .L191+32
 3430 0cdc 1846     		mov	r0, r3
 3431 0cde FFF7FEFF 		bl	__aeabi_fmul
 3432 0ce2 0346     		mov	r3, r0
 3433 0ce4 1A46     		mov	r2, r3
 3434 0ce6 4A4B     		ldr	r3, .L191+36
 3435 0ce8 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
1119:main.c        ****             pedals8bit[main_counter] = (float)processed_pedals[pedal_cc_assignments[main_counter]] 
 3436              		.loc 1 1119 0
 3437 0cec 3F4B     		ldr	r3, .L191
 3438 0cee 1B78     		ldrb	r3, [r3]
 3439 0cf0 DBB2     		uxtb	r3, r3
 3440 0cf2 1C46     		mov	r4, r3
 3441 0cf4 3D4B     		ldr	r3, .L191
 3442 0cf6 1B78     		ldrb	r3, [r3]
 3443 0cf8 DBB2     		uxtb	r3, r3
 3444 0cfa 1A46     		mov	r2, r3
 3445 0cfc 454B     		ldr	r3, .L191+40
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 82


 3446 0cfe 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 3447 0d00 1A46     		mov	r2, r3
 3448 0d02 404B     		ldr	r3, .L191+24
 3449 0d04 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3450 0d08 1846     		mov	r0, r3
 3451 0d0a FFF7FEFF 		bl	__aeabi_ui2f
 3452 0d0e 0346     		mov	r3, r0
 3453 0d10 4FF07651 		mov	r1, #1031798784
 3454 0d14 1846     		mov	r0, r3
 3455 0d16 FFF7FEFF 		bl	__aeabi_fmul
 3456 0d1a 0346     		mov	r3, r0
 3457 0d1c 1846     		mov	r0, r3
 3458 0d1e FFF7FEFF 		bl	__aeabi_f2uiz
 3459 0d22 0346     		mov	r3, r0
 3460 0d24 DAB2     		uxtb	r2, r3
 3461 0d26 3C4B     		ldr	r3, .L191+44
 3462 0d28 1A55     		strb	r2, [r3, r4]
1120:main.c        ****             pedals7bit[main_counter] = pedals8bit[main_counter] >> 1;
 3463              		.loc 1 1120 0
 3464 0d2a 304B     		ldr	r3, .L191
 3465 0d2c 1B78     		ldrb	r3, [r3]
 3466 0d2e DBB2     		uxtb	r3, r3
 3467 0d30 1A46     		mov	r2, r3
 3468 0d32 2E4B     		ldr	r3, .L191
 3469 0d34 1B78     		ldrb	r3, [r3]
 3470 0d36 DBB2     		uxtb	r3, r3
 3471 0d38 1946     		mov	r1, r3
 3472 0d3a 374B     		ldr	r3, .L191+44
 3473 0d3c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 3474 0d3e 5B08     		lsrs	r3, r3, #1
 3475 0d40 D9B2     		uxtb	r1, r3
 3476 0d42 364B     		ldr	r3, .L191+48
 3477 0d44 9954     		strb	r1, [r3, r2]
1121:main.c        ****             if (pedals7bit[main_counter] != prevPedals7bit[main_counter])
 3478              		.loc 1 1121 0
 3479 0d46 294B     		ldr	r3, .L191
 3480 0d48 1B78     		ldrb	r3, [r3]
 3481 0d4a DBB2     		uxtb	r3, r3
 3482 0d4c 1A46     		mov	r2, r3
 3483 0d4e 334B     		ldr	r3, .L191+48
 3484 0d50 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 3485 0d52 264B     		ldr	r3, .L191
 3486 0d54 1B78     		ldrb	r3, [r3]
 3487 0d56 DBB2     		uxtb	r3, r3
 3488 0d58 1946     		mov	r1, r3
 3489 0d5a 314B     		ldr	r3, .L191+52
 3490 0d5c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 3491 0d5e 9A42     		cmp	r2, r3
 3492 0d60 0ED0     		beq	.L110
1122:main.c        ****             {
1123:main.c        ****                 sendMIDIControlChange(main_counter + 14, (pedals7bit[main_counter]), 1);
 3493              		.loc 1 1123 0
 3494 0d62 224B     		ldr	r3, .L191
 3495 0d64 1B78     		ldrb	r3, [r3]
 3496 0d66 DBB2     		uxtb	r3, r3
 3497 0d68 03F10E00 		add	r0, r3, #14
 3498 0d6c 1F4B     		ldr	r3, .L191
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 83


 3499 0d6e 1B78     		ldrb	r3, [r3]
 3500 0d70 DBB2     		uxtb	r3, r3
 3501 0d72 1A46     		mov	r2, r3
 3502 0d74 294B     		ldr	r3, .L191+48
 3503 0d76 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 3504 0d78 0122     		movs	r2, #1
 3505 0d7a 1946     		mov	r1, r3
 3506 0d7c FFF7FEFF 		bl	sendMIDIControlChange
 3507              	.L110:
1124:main.c        ****             }
1125:main.c        ****             prevPedals7bit[main_counter] = pedals7bit[main_counter];
 3508              		.loc 1 1125 0
 3509 0d80 1A4B     		ldr	r3, .L191
 3510 0d82 1B78     		ldrb	r3, [r3]
 3511 0d84 DBB2     		uxtb	r3, r3
 3512 0d86 1A46     		mov	r2, r3
 3513 0d88 184B     		ldr	r3, .L191
 3514 0d8a 1B78     		ldrb	r3, [r3]
 3515 0d8c DBB2     		uxtb	r3, r3
 3516 0d8e 1946     		mov	r1, r3
 3517 0d90 224B     		ldr	r3, .L191+48
 3518 0d92 595C     		ldrb	r1, [r3, r1]	@ zero_extendqisi2
 3519 0d94 224B     		ldr	r3, .L191+52
 3520 0d96 9954     		strb	r1, [r3, r2]
1126:main.c        ****             prev_processed_pedals[main_counter] = processed_pedals[main_counter];
 3521              		.loc 1 1126 0
 3522 0d98 144B     		ldr	r3, .L191
 3523 0d9a 1B78     		ldrb	r3, [r3]
 3524 0d9c DBB2     		uxtb	r3, r3
 3525 0d9e 1A46     		mov	r2, r3
 3526 0da0 124B     		ldr	r3, .L191
 3527 0da2 1B78     		ldrb	r3, [r3]
 3528 0da4 DBB2     		uxtb	r3, r3
 3529 0da6 1946     		mov	r1, r3
 3530 0da8 164B     		ldr	r3, .L191+24
 3531 0daa 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 3532 0dae 1D4B     		ldr	r3, .L191+56
 3533 0db0 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 3534              	.LBE22:
 3535 0db4 61E0     		b	.L111
 3536              	.L105:
1127:main.c        ****         }
1128:main.c        ****         else
1129:main.c        ****         {
1130:main.c        ****             processed_volumePedal = (float)volumePedal * 1.007378258730939f; //compensate for lower
 3537              		.loc 1 1130 0
 3538 0db6 1C4B     		ldr	r3, .L191+60
 3539 0db8 1B88     		ldrh	r3, [r3]
 3540 0dba 1846     		mov	r0, r3
 3541 0dbc FFF7FEFF 		bl	__aeabi_ui2f
 3542 0dc0 0346     		mov	r3, r0
 3543 0dc2 1A49     		ldr	r1, .L191+64
 3544 0dc4 1846     		mov	r0, r3
 3545 0dc6 FFF7FEFF 		bl	__aeabi_fmul
 3546 0dca 0346     		mov	r3, r0
 3547 0dcc 1846     		mov	r0, r3
 3548 0dce FFF7FEFF 		bl	__aeabi_f2iz
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 84


 3549 0dd2 0346     		mov	r3, r0
 3550 0dd4 1AB2     		sxth	r2, r3
 3551 0dd6 164B     		ldr	r3, .L191+68
 3552 0dd8 1A80     		strh	r2, [r3]	@ movhi
1131:main.c        **** 
1132:main.c        ****             if (processed_volumePedal < 0)
 3553              		.loc 1 1132 0
 3554 0dda 154B     		ldr	r3, .L191+68
 3555 0ddc B3F90030 		ldrsh	r3, [r3]
 3556 0de0 002B     		cmp	r3, #0
 3557 0de2 27DA     		bge	.L112
1133:main.c        ****             {
1134:main.c        ****                 processed_volumePedal = 0;
 3558              		.loc 1 1134 0
 3559 0de4 124B     		ldr	r3, .L191+68
 3560 0de6 0022     		movs	r2, #0
 3561 0de8 1A80     		strh	r2, [r3]	@ movhi
 3562 0dea 2DE0     		b	.L113
 3563              	.L192:
 3564              		.align	2
 3565              	.L191:
 3566 0dec 00000000 		.word	main_counter
 3567 0df0 00000000 		.word	mainOLEDWaitingToSend
 3568 0df4 00000000 		.word	macroOLEDWaitingToSend
 3569 0df8 00000000 		.word	angle
 3570 0dfc 00000000 		.word	pedals_lowWithDeadZone
 3571 0e00 00000000 		.word	pedalRatios
 3572 0e04 00000000 		.word	processed_pedals
 3573 0e08 00000000 		.word	pedal_inverted
 3574 0e0c 01088039 		.word	964691969
 3575 0e10 00000000 		.word	pedals_float
 3576 0e14 00000000 		.word	pedal_cc_assignments
 3577 0e18 00000000 		.word	pedals8bit
 3578 0e1c 00000000 		.word	pedals7bit
 3579 0e20 00000000 		.word	prevPedals7bit
 3580 0e24 00000000 		.word	prev_processed_pedals
 3581 0e28 00000000 		.word	volumePedal
 3582 0e2c C5F1803F 		.word	1065415109
 3583 0e30 00000000 		.word	processed_volumePedal
 3584              	.L112:
1135:main.c        ****             }
1136:main.c        ****             else if (processed_volumePedal > 4095)
 3585              		.loc 1 1136 0
 3586 0e34 954B     		ldr	r3, .L193
 3587 0e36 B3F90030 		ldrsh	r3, [r3]
 3588 0e3a B3F5805F 		cmp	r3, #4096
 3589 0e3e 03DB     		blt	.L113
1137:main.c        ****             {
1138:main.c        ****                  processed_volumePedal = 4095;
 3590              		.loc 1 1138 0
 3591 0e40 924B     		ldr	r3, .L193
 3592 0e42 40F6FF72 		movw	r2, #4095
 3593 0e46 1A80     		strh	r2, [r3]	@ movhi
 3594              	.L113:
1139:main.c        ****             }
1140:main.c        ****             u7bit_volumePedal = processed_volumePedal >> 5;
 3595              		.loc 1 1140 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 85


 3596 0e48 904B     		ldr	r3, .L193
 3597 0e4a B3F90030 		ldrsh	r3, [r3]
 3598 0e4e 5B11     		asrs	r3, r3, #5
 3599 0e50 1BB2     		sxth	r3, r3
 3600 0e52 DAB2     		uxtb	r2, r3
 3601 0e54 8E4B     		ldr	r3, .L193+4
 3602 0e56 1A70     		strb	r2, [r3]
1141:main.c        ****             if ( u7bit_volumePedal != prev_7bit_volumePedal)
 3603              		.loc 1 1141 0
 3604 0e58 8D4B     		ldr	r3, .L193+4
 3605 0e5a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3606 0e5c 8D4B     		ldr	r3, .L193+8
 3607 0e5e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3608 0e60 9A42     		cmp	r2, r3
 3609 0e62 06D0     		beq	.L114
1142:main.c        ****             {
1143:main.c        ****                 //uint16_t tempPedal = processed_volumePedal;
1144:main.c        ****                 
1145:main.c        ****                 sendMIDIControlChange(13, u7bit_volumePedal, 0);
 3610              		.loc 1 1145 0
 3611 0e64 8A4B     		ldr	r3, .L193+4
 3612 0e66 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3613 0e68 0022     		movs	r2, #0
 3614 0e6a 1946     		mov	r1, r3
 3615 0e6c 0D20     		movs	r0, #13
 3616 0e6e FFF7FEFF 		bl	sendMIDIControlChange
 3617              	.L114:
1146:main.c        ****                 //sendMIDIControlChange(22, ( tempPedal & 127), 0);
1147:main.c        ****             }
1148:main.c        ****              //prev_processed_volumePedal = processed_volumePedal;
1149:main.c        ****             prev_7bit_volumePedal = u7bit_volumePedal;
 3618              		.loc 1 1149 0
 3619 0e72 874B     		ldr	r3, .L193+4
 3620 0e74 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3621 0e76 874B     		ldr	r3, .L193+8
 3622 0e78 1A70     		strb	r2, [r3]
 3623              	.L111:
1150:main.c        ****         }
1151:main.c        ****         
1152:main.c        ****         main_counter++;
 3624              		.loc 1 1152 0
 3625 0e7a 874B     		ldr	r3, .L193+12
 3626 0e7c 1B78     		ldrb	r3, [r3]
 3627 0e7e DBB2     		uxtb	r3, r3
 3628 0e80 0133     		adds	r3, r3, #1
 3629 0e82 DAB2     		uxtb	r2, r3
 3630 0e84 844B     		ldr	r3, .L193+12
 3631 0e86 1A70     		strb	r2, [r3]
1153:main.c        **** 
1154:main.c        ****         if (main_counter > 11)
 3632              		.loc 1 1154 0
 3633 0e88 834B     		ldr	r3, .L193+12
 3634 0e8a 1B78     		ldrb	r3, [r3]
 3635 0e8c DBB2     		uxtb	r3, r3
 3636 0e8e 0B2B     		cmp	r3, #11
 3637 0e90 02D9     		bls	.L115
1155:main.c        ****         {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 86


1156:main.c        ****             main_counter = 0;
 3638              		.loc 1 1156 0
 3639 0e92 814B     		ldr	r3, .L193+12
 3640 0e94 0022     		movs	r2, #0
 3641 0e96 1A70     		strb	r2, [r3]
 3642              	.L115:
1157:main.c        ****         }
1158:main.c        ****         testpin3_Write(0);
 3643              		.loc 1 1158 0
 3644 0e98 0020     		movs	r0, #0
 3645 0e9a FFF7FEFF 		bl	testpin3_Write
1159:main.c        **** 
1160:main.c        ****         testpin5_Write(1);
 3646              		.loc 1 1160 0
 3647 0e9e 0120     		movs	r0, #1
 3648 0ea0 FFF7FEFF 		bl	testpin5_Write
1161:main.c        ****         
1162:main.c        ****         if ((rxBufferBar[!currentBarBuffer][6] == 254) && (rxBufferBar[!currentBarBuffer][7] == 253
 3649              		.loc 1 1162 0
 3650 0ea4 7D4B     		ldr	r3, .L193+16
 3651 0ea6 1B78     		ldrb	r3, [r3]
 3652 0ea8 DBB2     		uxtb	r3, r3
 3653 0eaa 002B     		cmp	r3, #0
 3654 0eac 0CBF     		ite	eq
 3655 0eae 0123     		moveq	r3, #1
 3656 0eb0 0023     		movne	r3, #0
 3657 0eb2 DBB2     		uxtb	r3, r3
 3658 0eb4 7A4A     		ldr	r2, .L193+20
 3659 0eb6 DB00     		lsls	r3, r3, #3
 3660 0eb8 1344     		add	r3, r3, r2
 3661 0eba 9B79     		ldrb	r3, [r3, #6]
 3662 0ebc DBB2     		uxtb	r3, r3
 3663 0ebe FE2B     		cmp	r3, #254
 3664 0ec0 40F07781 		bne	.L116
 3665              		.loc 1 1162 0 is_stmt 0 discriminator 1
 3666 0ec4 754B     		ldr	r3, .L193+16
 3667 0ec6 1B78     		ldrb	r3, [r3]
 3668 0ec8 DBB2     		uxtb	r3, r3
 3669 0eca 002B     		cmp	r3, #0
 3670 0ecc 0CBF     		ite	eq
 3671 0ece 0123     		moveq	r3, #1
 3672 0ed0 0023     		movne	r3, #0
 3673 0ed2 DBB2     		uxtb	r3, r3
 3674 0ed4 724A     		ldr	r2, .L193+20
 3675 0ed6 DB00     		lsls	r3, r3, #3
 3676 0ed8 1344     		add	r3, r3, r2
 3677 0eda DB79     		ldrb	r3, [r3, #7]
 3678 0edc DBB2     		uxtb	r3, r3
 3679 0ede FD2B     		cmp	r3, #253
 3680 0ee0 40F06781 		bne	.L116
 3681              	.LBB23:
1163:main.c        ****         {
1164:main.c        ****             for (int i = 0; i < NUM_SLIDERS; i++)
 3682              		.loc 1 1164 0 is_stmt 1
 3683 0ee4 0023     		movs	r3, #0
 3684 0ee6 3B67     		str	r3, [r7, #112]
 3685 0ee8 5FE1     		b	.L117
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 87


 3686              	.L128:
1165:main.c        ****             {
1166:main.c        ****                 bar[i] = ((rxBufferBar[!currentBarBuffer][i*2] << 8) + rxBufferBar[!currentBarBuffe
 3687              		.loc 1 1166 0
 3688 0eea 6C4B     		ldr	r3, .L193+16
 3689 0eec 1B78     		ldrb	r3, [r3]
 3690 0eee DBB2     		uxtb	r3, r3
 3691 0ef0 002B     		cmp	r3, #0
 3692 0ef2 0CBF     		ite	eq
 3693 0ef4 0123     		moveq	r3, #1
 3694 0ef6 0023     		movne	r3, #0
 3695 0ef8 DBB2     		uxtb	r3, r3
 3696 0efa 1A46     		mov	r2, r3
 3697 0efc 3B6F     		ldr	r3, [r7, #112]
 3698 0efe 5B00     		lsls	r3, r3, #1
 3699 0f00 6749     		ldr	r1, .L193+20
 3700 0f02 D200     		lsls	r2, r2, #3
 3701 0f04 0A44     		add	r2, r2, r1
 3702 0f06 1344     		add	r3, r3, r2
 3703 0f08 1B78     		ldrb	r3, [r3]
 3704 0f0a DBB2     		uxtb	r3, r3
 3705 0f0c 9BB2     		uxth	r3, r3
 3706 0f0e 1B02     		lsls	r3, r3, #8
 3707 0f10 9AB2     		uxth	r2, r3
 3708 0f12 624B     		ldr	r3, .L193+16
 3709 0f14 1B78     		ldrb	r3, [r3]
 3710 0f16 DBB2     		uxtb	r3, r3
 3711 0f18 002B     		cmp	r3, #0
 3712 0f1a 0CBF     		ite	eq
 3713 0f1c 0123     		moveq	r3, #1
 3714 0f1e 0023     		movne	r3, #0
 3715 0f20 DBB2     		uxtb	r3, r3
 3716 0f22 1946     		mov	r1, r3
 3717 0f24 3B6F     		ldr	r3, [r7, #112]
 3718 0f26 5B00     		lsls	r3, r3, #1
 3719 0f28 0133     		adds	r3, r3, #1
 3720 0f2a 5D48     		ldr	r0, .L193+20
 3721 0f2c C900     		lsls	r1, r1, #3
 3722 0f2e 0144     		add	r1, r1, r0
 3723 0f30 0B44     		add	r3, r3, r1
 3724 0f32 1B78     		ldrb	r3, [r3]
 3725 0f34 DBB2     		uxtb	r3, r3
 3726 0f36 9BB2     		uxth	r3, r3
 3727 0f38 1344     		add	r3, r3, r2
 3728 0f3a 99B2     		uxth	r1, r3
 3729 0f3c 594A     		ldr	r2, .L193+24
 3730 0f3e 3B6F     		ldr	r3, [r7, #112]
 3731 0f40 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1167:main.c        ****                 //
1168:main.c        ****                 if(bar[i] != prevBar[i])
 3732              		.loc 1 1168 0
 3733 0f44 574A     		ldr	r2, .L193+24
 3734 0f46 3B6F     		ldr	r3, [r7, #112]
 3735 0f48 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3736 0f4c 9AB2     		uxth	r2, r3
 3737 0f4e 5649     		ldr	r1, .L193+28
 3738 0f50 3B6F     		ldr	r3, [r7, #112]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 88


 3739 0f52 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 3740 0f56 9BB2     		uxth	r3, r3
 3741 0f58 9A42     		cmp	r2, r3
 3742 0f5a 00F01A81 		beq	.L118
1169:main.c        ****                 {
1170:main.c        ****     				
1171:main.c        ****                     if ((bar[i] == 65535) || (bar[i] > fretMeasurements[i][0]))
 3743              		.loc 1 1171 0
 3744 0f5e 514A     		ldr	r2, .L193+24
 3745 0f60 3B6F     		ldr	r3, [r7, #112]
 3746 0f62 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3747 0f66 9BB2     		uxth	r3, r3
 3748 0f68 4FF6FF72 		movw	r2, #65535
 3749 0f6c 9342     		cmp	r3, r2
 3750 0f6e 0ED0     		beq	.L119
 3751              		.loc 1 1171 0 is_stmt 0 discriminator 1
 3752 0f70 4C4A     		ldr	r2, .L193+24
 3753 0f72 3B6F     		ldr	r3, [r7, #112]
 3754 0f74 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3755 0f78 99B2     		uxth	r1, r3
 3756 0f7a 4C48     		ldr	r0, .L193+32
 3757 0f7c 3A6F     		ldr	r2, [r7, #112]
 3758 0f7e 1346     		mov	r3, r2
 3759 0f80 5B00     		lsls	r3, r3, #1
 3760 0f82 1344     		add	r3, r3, r2
 3761 0f84 DB00     		lsls	r3, r3, #3
 3762 0f86 0344     		add	r3, r3, r0
 3763 0f88 1B88     		ldrh	r3, [r3]
 3764 0f8a 9942     		cmp	r1, r3
 3765 0f8c 06D9     		bls	.L120
 3766              	.L119:
1172:main.c        ****     				{
1173:main.c        ****     					stringMappedPositions[i] = 1.0f;
 3767              		.loc 1 1173 0 is_stmt 1
 3768 0f8e 484A     		ldr	r2, .L193+36
 3769 0f90 3B6F     		ldr	r3, [r7, #112]
 3770 0f92 4FF07E51 		mov	r1, #1065353216
 3771 0f96 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 3772 0f9a C0E0     		b	.L121
 3773              	.L120:
1174:main.c        ****     				}
1175:main.c        ****                     else if (bar[i] > fretMeasurements[i][NUM_FRET_MEASUREMENTS-1])
 3774              		.loc 1 1175 0
 3775 0f9c 414A     		ldr	r2, .L193+24
 3776 0f9e 3B6F     		ldr	r3, [r7, #112]
 3777 0fa0 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3778 0fa4 99B2     		uxth	r1, r3
 3779 0fa6 4148     		ldr	r0, .L193+32
 3780 0fa8 3A6F     		ldr	r2, [r7, #112]
 3781 0faa 1346     		mov	r3, r2
 3782 0fac 5B00     		lsls	r3, r3, #1
 3783 0fae 1344     		add	r3, r3, r2
 3784 0fb0 DB00     		lsls	r3, r3, #3
 3785 0fb2 0344     		add	r3, r3, r0
 3786 0fb4 1633     		adds	r3, r3, #22
 3787 0fb6 1B88     		ldrh	r3, [r3]
 3788 0fb8 9942     		cmp	r1, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 89


 3789 0fba 7DD9     		bls	.L122
 3790              	.LBB24:
1176:main.c        ****                     {
1177:main.c        ****                         for (int j = 0; j < NUM_FRET_MEASUREMENTS-1; j++)
 3791              		.loc 1 1177 0
 3792 0fbc 0023     		movs	r3, #0
 3793 0fbe FB66     		str	r3, [r7, #108]
 3794 0fc0 60E0     		b	.L123
 3795              	.L126:
1178:main.c        ****                         {
1179:main.c        ****                             if ((bar[i] <=  fretMeasurements[i][j]) && (bar[i] >  fretMeasurements[
 3796              		.loc 1 1179 0
 3797 0fc2 384A     		ldr	r2, .L193+24
 3798 0fc4 3B6F     		ldr	r3, [r7, #112]
 3799 0fc6 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3800 0fca 99B2     		uxth	r1, r3
 3801 0fcc 3748     		ldr	r0, .L193+32
 3802 0fce 3A6F     		ldr	r2, [r7, #112]
 3803 0fd0 1346     		mov	r3, r2
 3804 0fd2 5B00     		lsls	r3, r3, #1
 3805 0fd4 1344     		add	r3, r3, r2
 3806 0fd6 9B00     		lsls	r3, r3, #2
 3807 0fd8 FA6E     		ldr	r2, [r7, #108]
 3808 0fda 1344     		add	r3, r3, r2
 3809 0fdc 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 3810 0fe0 9942     		cmp	r1, r3
 3811 0fe2 4CD8     		bhi	.L124
 3812              		.loc 1 1179 0 is_stmt 0 discriminator 1
 3813 0fe4 2F4A     		ldr	r2, .L193+24
 3814 0fe6 3B6F     		ldr	r3, [r7, #112]
 3815 0fe8 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3816 0fec 99B2     		uxth	r1, r3
 3817 0fee FB6E     		ldr	r3, [r7, #108]
 3818 0ff0 581C     		adds	r0, r3, #1
 3819 0ff2 2E4C     		ldr	r4, .L193+32
 3820 0ff4 3A6F     		ldr	r2, [r7, #112]
 3821 0ff6 1346     		mov	r3, r2
 3822 0ff8 5B00     		lsls	r3, r3, #1
 3823 0ffa 1344     		add	r3, r3, r2
 3824 0ffc 9B00     		lsls	r3, r3, #2
 3825 0ffe 0344     		add	r3, r3, r0
 3826 1000 34F81330 		ldrh	r3, [r4, r3, lsl #1]
 3827 1004 9942     		cmp	r1, r3
 3828 1006 3AD9     		bls	.L124
1180:main.c        ****                             {
1181:main.c        ****                                 stringMappedPositions[i] = map((float)bar[i], fretMeasurements[i][j
 3829              		.loc 1 1181 0 is_stmt 1
 3830 1008 264A     		ldr	r2, .L193+24
 3831 100a 3B6F     		ldr	r3, [r7, #112]
 3832 100c 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3833 1010 9BB2     		uxth	r3, r3
 3834 1012 1846     		mov	r0, r3
 3835 1014 FFF7FEFF 		bl	__aeabi_ui2f
 3836 1018 0446     		mov	r4, r0
 3837 101a 2449     		ldr	r1, .L193+32
 3838 101c 3A6F     		ldr	r2, [r7, #112]
 3839 101e 1346     		mov	r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 90


 3840 1020 5B00     		lsls	r3, r3, #1
 3841 1022 1344     		add	r3, r3, r2
 3842 1024 9B00     		lsls	r3, r3, #2
 3843 1026 FA6E     		ldr	r2, [r7, #108]
 3844 1028 1344     		add	r3, r3, r2
 3845 102a 31F81330 		ldrh	r3, [r1, r3, lsl #1]
 3846 102e 1846     		mov	r0, r3
 3847 1030 FFF7FEFF 		bl	__aeabi_ui2f
 3848 1034 0546     		mov	r5, r0
 3849 1036 FB6E     		ldr	r3, [r7, #108]
 3850 1038 591C     		adds	r1, r3, #1
 3851 103a 1C48     		ldr	r0, .L193+32
 3852 103c 3A6F     		ldr	r2, [r7, #112]
 3853 103e 1346     		mov	r3, r2
 3854 1040 5B00     		lsls	r3, r3, #1
 3855 1042 1344     		add	r3, r3, r2
 3856 1044 9B00     		lsls	r3, r3, #2
 3857 1046 0B44     		add	r3, r3, r1
 3858 1048 30F81330 		ldrh	r3, [r0, r3, lsl #1]
 3859 104c 1846     		mov	r0, r3
 3860 104e FFF7FEFF 		bl	__aeabi_ui2f
 3861 1052 184A     		ldr	r2, .L193+40
 3862 1054 FB6E     		ldr	r3, [r7, #108]
 3863 1056 52F82310 		ldr	r1, [r2, r3, lsl #2]	@ float
 3864 105a FB6E     		ldr	r3, [r7, #108]
 3865 105c 0133     		adds	r3, r3, #1
 3866 105e 154A     		ldr	r2, .L193+40
 3867 1060 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3868 1064 0093     		str	r3, [sp]	@ float
 3869 1066 0B46     		mov	r3, r1
 3870 1068 0246     		mov	r2, r0
 3871 106a 2946     		mov	r1, r5
 3872 106c 2046     		mov	r0, r4
 3873 106e FFF7FEFF 		bl	map
 3874 1072 0146     		mov	r1, r0
 3875 1074 0E4A     		ldr	r2, .L193+36
 3876 1076 3B6F     		ldr	r3, [r7, #112]
 3877 1078 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
1182:main.c        ****                                 break;
 3878              		.loc 1 1182 0
 3879 107c 4FE0     		b	.L121
 3880              	.L124:
1177:main.c        ****                         {
 3881              		.loc 1 1177 0 discriminator 2
 3882 107e FB6E     		ldr	r3, [r7, #108]
 3883 1080 0133     		adds	r3, r3, #1
 3884 1082 FB66     		str	r3, [r7, #108]
 3885              	.L123:
1177:main.c        ****                         {
 3886              		.loc 1 1177 0 is_stmt 0 discriminator 1
 3887 1084 FB6E     		ldr	r3, [r7, #108]
 3888 1086 0A2B     		cmp	r3, #10
 3889 1088 9BDD     		ble	.L126
 3890 108a 48E0     		b	.L121
 3891              	.L194:
 3892              		.align	2
 3893              	.L193:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 91


 3894 108c 00000000 		.word	processed_volumePedal
 3895 1090 00000000 		.word	u7bit_volumePedal
 3896 1094 00000000 		.word	prev_7bit_volumePedal
 3897 1098 00000000 		.word	main_counter
 3898 109c 00000000 		.word	currentBarBuffer
 3899 10a0 00000000 		.word	rxBufferBar
 3900 10a4 00000000 		.word	bar
 3901 10a8 00000000 		.word	prevBar
 3902 10ac 00000000 		.word	fretMeasurements
 3903 10b0 00000000 		.word	stringMappedPositions
 3904 10b4 00000000 		.word	fretScaling
 3905              	.L122:
 3906              	.LBE24:
1183:main.c        ****                             }
1184:main.c        ****                         }
1185:main.c        ****                     }
1186:main.c        ****                     else
1187:main.c        ****                     {
1188:main.c        ****                         stringMappedPositions[i] = map((float)bar[i], fretMeasurements[i][NUM_FRET_
 3907              		.loc 1 1188 0 is_stmt 1
 3908 10b8 844A     		ldr	r2, .L195
 3909 10ba 3B6F     		ldr	r3, [r7, #112]
 3910 10bc 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3911 10c0 9BB2     		uxth	r3, r3
 3912 10c2 1846     		mov	r0, r3
 3913 10c4 FFF7FEFF 		bl	__aeabi_ui2f
 3914 10c8 0446     		mov	r4, r0
 3915 10ca 8149     		ldr	r1, .L195+4
 3916 10cc 3A6F     		ldr	r2, [r7, #112]
 3917 10ce 1346     		mov	r3, r2
 3918 10d0 5B00     		lsls	r3, r3, #1
 3919 10d2 1344     		add	r3, r3, r2
 3920 10d4 DB00     		lsls	r3, r3, #3
 3921 10d6 0B44     		add	r3, r3, r1
 3922 10d8 1433     		adds	r3, r3, #20
 3923 10da 1B88     		ldrh	r3, [r3]
 3924 10dc 1846     		mov	r0, r3
 3925 10de FFF7FEFF 		bl	__aeabi_ui2f
 3926 10e2 0546     		mov	r5, r0
 3927 10e4 7A49     		ldr	r1, .L195+4
 3928 10e6 3A6F     		ldr	r2, [r7, #112]
 3929 10e8 1346     		mov	r3, r2
 3930 10ea 5B00     		lsls	r3, r3, #1
 3931 10ec 1344     		add	r3, r3, r2
 3932 10ee DB00     		lsls	r3, r3, #3
 3933 10f0 0B44     		add	r3, r3, r1
 3934 10f2 1633     		adds	r3, r3, #22
 3935 10f4 1B88     		ldrh	r3, [r3]
 3936 10f6 1846     		mov	r0, r3
 3937 10f8 FFF7FEFF 		bl	__aeabi_ui2f
 3938 10fc 0146     		mov	r1, r0
 3939 10fe 754B     		ldr	r3, .L195+8
 3940 1100 9A6A     		ldr	r2, [r3, #40]	@ float
 3941 1102 744B     		ldr	r3, .L195+8
 3942 1104 DB6A     		ldr	r3, [r3, #44]	@ float
 3943 1106 0093     		str	r3, [sp]	@ float
 3944 1108 1346     		mov	r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 92


 3945 110a 0A46     		mov	r2, r1
 3946 110c 2946     		mov	r1, r5
 3947 110e 2046     		mov	r0, r4
 3948 1110 FFF7FEFF 		bl	map
 3949 1114 0146     		mov	r1, r0
 3950 1116 704A     		ldr	r2, .L195+12
 3951 1118 3B6F     		ldr	r3, [r7, #112]
 3952 111a 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 3953              	.L121:
1189:main.c        ****                     }
1190:main.c        **** 
1191:main.c        ****                     invStringMappedPositions[i] = 1.0f / stringMappedPositions[i];
 3954              		.loc 1 1191 0
 3955 111e 6E4A     		ldr	r2, .L195+12
 3956 1120 3B6F     		ldr	r3, [r7, #112]
 3957 1122 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3958 1126 1946     		mov	r1, r3
 3959 1128 4FF07E50 		mov	r0, #1065353216
 3960 112c FFF7FEFF 		bl	__aeabi_fdiv
 3961 1130 0346     		mov	r3, r0
 3962 1132 1946     		mov	r1, r3
 3963 1134 694A     		ldr	r2, .L195+16
 3964 1136 3B6F     		ldr	r3, [r7, #112]
 3965 1138 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
1192:main.c        ****                     if (midiBarSendOn)
 3966              		.loc 1 1192 0
 3967 113c 684B     		ldr	r3, .L195+20
 3968 113e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3969 1140 002B     		cmp	r3, #0
 3970 1142 26D0     		beq	.L118
 3971              	.LBB25:
1193:main.c        ****                     {
1194:main.c        ****                         int16_t MidiBarPosition = (invStringMappedPositions[i] * 8192.0f)-8192.0f;
 3972              		.loc 1 1194 0
 3973 1144 654A     		ldr	r2, .L195+16
 3974 1146 3B6F     		ldr	r3, [r7, #112]
 3975 1148 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3976 114c 4FF08C41 		mov	r1, #1174405120
 3977 1150 1846     		mov	r0, r3
 3978 1152 FFF7FEFF 		bl	__aeabi_fmul
 3979 1156 0346     		mov	r3, r0
 3980 1158 4FF08C41 		mov	r1, #1174405120
 3981 115c 1846     		mov	r0, r3
 3982 115e FFF7FEFF 		bl	__aeabi_fsub
 3983 1162 0346     		mov	r3, r0
 3984 1164 1846     		mov	r0, r3
 3985 1166 FFF7FEFF 		bl	__aeabi_f2iz
 3986 116a 0346     		mov	r3, r0
 3987 116c A7F86A30 		strh	r3, [r7, #106]	@ movhi
1195:main.c        ****                         if (MidiBarPosition> 16383)
 3988              		.loc 1 1195 0
 3989 1170 B7F96A30 		ldrsh	r3, [r7, #106]
 3990 1174 B3F5804F 		cmp	r3, #16384
 3991 1178 03DB     		blt	.L127
1196:main.c        ****                         {
1197:main.c        ****                             MidiBarPosition = 16383;
 3992              		.loc 1 1197 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 93


 3993 117a 43F6FF73 		movw	r3, #16383
 3994 117e A7F86A30 		strh	r3, [r7, #106]	@ movhi
 3995              	.L127:
1198:main.c        ****                         }
1199:main.c        ****                         sendMIDIPitchBend(MidiBarPosition, 12+i);
 3996              		.loc 1 1199 0
 3997 1182 B7F96A20 		ldrsh	r2, [r7, #106]
 3998 1186 3B6F     		ldr	r3, [r7, #112]
 3999 1188 0C33     		adds	r3, r3, #12
 4000 118a 1946     		mov	r1, r3
 4001 118c 1046     		mov	r0, r2
 4002 118e FFF7FEFF 		bl	sendMIDIPitchBend
 4003              	.L118:
 4004              	.LBE25:
1200:main.c        ****                     }
1201:main.c        ****                 }
1202:main.c        ****                 //
1203:main.c        ****                 prevBar[i] = bar[i];
 4005              		.loc 1 1203 0 discriminator 2
 4006 1192 4E4A     		ldr	r2, .L195
 4007 1194 3B6F     		ldr	r3, [r7, #112]
 4008 1196 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 4009 119a 99B2     		uxth	r1, r3
 4010 119c 514A     		ldr	r2, .L195+24
 4011 119e 3B6F     		ldr	r3, [r7, #112]
 4012 11a0 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1164:main.c        ****             {
 4013              		.loc 1 1164 0 discriminator 2
 4014 11a4 3B6F     		ldr	r3, [r7, #112]
 4015 11a6 0133     		adds	r3, r3, #1
 4016 11a8 3B67     		str	r3, [r7, #112]
 4017              	.L117:
1164:main.c        ****             {
 4018              		.loc 1 1164 0 is_stmt 0 discriminator 1
 4019 11aa 3B6F     		ldr	r3, [r7, #112]
 4020 11ac 012B     		cmp	r3, #1
 4021 11ae 7FF79CAE 		ble	.L128
 4022              	.L116:
 4023              	.LBE23:
1204:main.c        ****             }
1205:main.c        ****         }
1206:main.c        ****         
1207:main.c        ****         testpin5_Write(0);
 4024              		.loc 1 1207 0 is_stmt 1
 4025 11b2 0020     		movs	r0, #0
 4026 11b4 FFF7FEFF 		bl	testpin5_Write
 4027              	.LBB26:
1208:main.c        ****         for (int i = 0 ; i < numStrings; i++)
 4028              		.loc 1 1208 0
 4029 11b8 0023     		movs	r3, #0
 4030 11ba 7B66     		str	r3, [r7, #100]
 4031 11bc 1AE0     		b	.L129
 4032              	.L131:
1209:main.c        ****         {
1210:main.c        ****             if (strings[i] != prevStrings[i])
 4033              		.loc 1 1210 0
 4034 11be 4A4A     		ldr	r2, .L195+28
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 94


 4035 11c0 7B6E     		ldr	r3, [r7, #100]
 4036 11c2 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 4037 11c6 9AB2     		uxth	r2, r3
 4038 11c8 4849     		ldr	r1, .L195+32
 4039 11ca 7B6E     		ldr	r3, [r7, #100]
 4040 11cc 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 4041 11d0 9BB2     		uxth	r3, r3
 4042 11d2 9A42     		cmp	r2, r3
 4043 11d4 02D0     		beq	.L130
1211:main.c        ****             {
1212:main.c        ****                 noteEvent(i);
 4044              		.loc 1 1212 0
 4045 11d6 786E     		ldr	r0, [r7, #100]
 4046 11d8 FFF7FEFF 		bl	noteEvent
 4047              	.L130:
1213:main.c        ****             }
1214:main.c        ****             prevStrings[i] = strings[i];
 4048              		.loc 1 1214 0 discriminator 2
 4049 11dc 424A     		ldr	r2, .L195+28
 4050 11de 7B6E     		ldr	r3, [r7, #100]
 4051 11e0 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 4052 11e4 99B2     		uxth	r1, r3
 4053 11e6 414A     		ldr	r2, .L195+32
 4054 11e8 7B6E     		ldr	r3, [r7, #100]
 4055 11ea 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1208:main.c        ****         {
 4056              		.loc 1 1208 0 discriminator 2
 4057 11ee 7B6E     		ldr	r3, [r7, #100]
 4058 11f0 0133     		adds	r3, r3, #1
 4059 11f2 7B66     		str	r3, [r7, #100]
 4060              	.L129:
1208:main.c        ****         {
 4061              		.loc 1 1208 0 is_stmt 0 discriminator 1
 4062 11f4 3E4B     		ldr	r3, .L195+36
 4063 11f6 1B68     		ldr	r3, [r3]
 4064 11f8 7A6E     		ldr	r2, [r7, #100]
 4065 11fa 9A42     		cmp	r2, r3
 4066 11fc DFDB     		blt	.L131
 4067              	.LBE26:
1215:main.c        ****         }
1216:main.c        ****        
1217:main.c        ****         scanUI();
 4068              		.loc 1 1217 0 is_stmt 1
 4069 11fe FFF7FEFF 		bl	scanUI
 4070              	.LBB27:
1218:main.c        ****         
1219:main.c        ****         for (int i=  0; i < 4; i++)
 4071              		.loc 1 1219 0
 4072 1202 0023     		movs	r3, #0
 4073 1204 3B66     		str	r3, [r7, #96]
 4074 1206 44E0     		b	.L132
 4075              	.L134:
1220:main.c        ****         {
1221:main.c        ****             knobs[i] = (ADC_SAR_Seq_1_GetResult16(i)>>4); //divide by 16
 4076              		.loc 1 1221 0
 4077 1208 3B6E     		ldr	r3, [r7, #96]
 4078 120a 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 95


 4079 120c 1846     		mov	r0, r3
 4080 120e FFF7FEFF 		bl	ADC_SAR_Seq_1_GetResult16
 4081 1212 0346     		mov	r3, r0
 4082 1214 1B11     		asrs	r3, r3, #4
 4083 1216 1BB2     		sxth	r3, r3
 4084 1218 D9B2     		uxtb	r1, r3
 4085 121a 364A     		ldr	r2, .L195+40
 4086 121c 3B6E     		ldr	r3, [r7, #96]
 4087 121e 1344     		add	r3, r3, r2
 4088 1220 0A46     		mov	r2, r1
 4089 1222 1A70     		strb	r2, [r3]
1222:main.c        ****             
1223:main.c        ****             knobs[i] = 255 - knobs[i];
 4090              		.loc 1 1223 0
 4091 1224 334A     		ldr	r2, .L195+40
 4092 1226 3B6E     		ldr	r3, [r7, #96]
 4093 1228 1344     		add	r3, r3, r2
 4094 122a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4095 122c DB43     		mvns	r3, r3
 4096 122e D9B2     		uxtb	r1, r3
 4097 1230 304A     		ldr	r2, .L195+40
 4098 1232 3B6E     		ldr	r3, [r7, #96]
 4099 1234 1344     		add	r3, r3, r2
 4100 1236 0A46     		mov	r2, r1
 4101 1238 1A70     		strb	r2, [r3]
1224:main.c        ****             knobs7bit[i] = knobs[i] >> 1;
 4102              		.loc 1 1224 0
 4103 123a 2E4A     		ldr	r2, .L195+40
 4104 123c 3B6E     		ldr	r3, [r7, #96]
 4105 123e 1344     		add	r3, r3, r2
 4106 1240 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4107 1242 5B08     		lsrs	r3, r3, #1
 4108 1244 D9B2     		uxtb	r1, r3
 4109 1246 2C4A     		ldr	r2, .L195+44
 4110 1248 3B6E     		ldr	r3, [r7, #96]
 4111 124a 1344     		add	r3, r3, r2
 4112 124c 0A46     		mov	r2, r1
 4113 124e 1A70     		strb	r2, [r3]
1225:main.c        ****             
1226:main.c        ****             if (knobs7bit[i] != prevKnobs7bit[i])
 4114              		.loc 1 1226 0
 4115 1250 294A     		ldr	r2, .L195+44
 4116 1252 3B6E     		ldr	r3, [r7, #96]
 4117 1254 1344     		add	r3, r3, r2
 4118 1256 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4119 1258 2849     		ldr	r1, .L195+48
 4120 125a 3B6E     		ldr	r3, [r7, #96]
 4121 125c 0B44     		add	r3, r3, r1
 4122 125e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4123 1260 9A42     		cmp	r2, r3
 4124 1262 0AD0     		beq	.L133
1227:main.c        ****             {
1228:main.c        ****                 sendMIDIControlChange(i+9, knobs7bit[i], 0);
 4125              		.loc 1 1228 0
 4126 1264 3B6E     		ldr	r3, [r7, #96]
 4127 1266 03F10900 		add	r0, r3, #9
 4128 126a 234A     		ldr	r2, .L195+44
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 96


 4129 126c 3B6E     		ldr	r3, [r7, #96]
 4130 126e 1344     		add	r3, r3, r2
 4131 1270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4132 1272 0022     		movs	r2, #0
 4133 1274 1946     		mov	r1, r3
 4134 1276 FFF7FEFF 		bl	sendMIDIControlChange
 4135              	.L133:
1229:main.c        ****             }
1230:main.c        ****             prevKnobs7bit[i] = knobs7bit[i];
 4136              		.loc 1 1230 0 discriminator 2
 4137 127a 1F4A     		ldr	r2, .L195+44
 4138 127c 3B6E     		ldr	r3, [r7, #96]
 4139 127e 1344     		add	r3, r3, r2
 4140 1280 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4141 1282 1E4A     		ldr	r2, .L195+48
 4142 1284 3B6E     		ldr	r3, [r7, #96]
 4143 1286 1344     		add	r3, r3, r2
 4144 1288 0A46     		mov	r2, r1
 4145 128a 1A70     		strb	r2, [r3]
1219:main.c        ****         {
 4146              		.loc 1 1219 0 discriminator 2
 4147 128c 3B6E     		ldr	r3, [r7, #96]
 4148 128e 0133     		adds	r3, r3, #1
 4149 1290 3B66     		str	r3, [r7, #96]
 4150              	.L132:
1219:main.c        ****         {
 4151              		.loc 1 1219 0 is_stmt 0 discriminator 1
 4152 1292 3B6E     		ldr	r3, [r7, #96]
 4153 1294 032B     		cmp	r3, #3
 4154 1296 B7DD     		ble	.L134
 4155              	.LBE27:
1231:main.c        ****             
1232:main.c        ****         }
1233:main.c        ****         
1234:main.c        ****         testpin4_Write(1);
 4156              		.loc 1 1234 0 is_stmt 1
 4157 1298 0120     		movs	r0, #1
 4158 129a FFF7FEFF 		bl	testpin4_Write
 4159              	.LBB28:
1235:main.c        ****         //calculate the pitch of each string based on the current Copedent
1236:main.c        ****         for (int i = 0; i < numStrings; i++)
 4160              		.loc 1 1236 0
 4161 129e 0023     		movs	r3, #0
 4162 12a0 FB65     		str	r3, [r7, #92]
 4163 12a2 C0E1     		b	.L135
 4164              	.L142:
 4165              	.LBB29:
1237:main.c        ****     	{
1238:main.c        ****     		//interpolate ratios for each of the strings
1239:main.c        ****            
1240:main.c        ****             float myMappedPos;
1241:main.c        ****             if (dualSlider)
 4166              		.loc 1 1241 0
 4167 12a4 164B     		ldr	r3, .L195+52
 4168 12a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4169 12a8 002B     		cmp	r3, #0
 4170 12aa 2DD0     		beq	.L136
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 97


1242:main.c        ****             {
1243:main.c        ****                myMappedPos = map(i, 2, 7, invStringMappedPositions[0], invStringMappedPositions[1])
 4171              		.loc 1 1243 0
 4172 12ac F86D     		ldr	r0, [r7, #92]
 4173 12ae FFF7FEFF 		bl	__aeabi_i2f
 4174 12b2 0A4B     		ldr	r3, .L195+16
 4175 12b4 1A68     		ldr	r2, [r3]	@ float
 4176 12b6 094B     		ldr	r3, .L195+16
 4177 12b8 5B68     		ldr	r3, [r3, #4]	@ float
 4178 12ba 0093     		str	r3, [sp]	@ float
 4179 12bc 1346     		mov	r3, r2
 4180 12be 114A     		ldr	r2, .L195+56
 4181 12c0 4FF08041 		mov	r1, #1073741824
 4182 12c4 FFF7FEFF 		bl	map
 4183 12c8 B865     		str	r0, [r7, #88]	@ float
 4184 12ca 20E0     		b	.L137
 4185              	.L196:
 4186              		.align	2
 4187              	.L195:
 4188 12cc 00000000 		.word	bar
 4189 12d0 00000000 		.word	fretMeasurements
 4190 12d4 00000000 		.word	fretScaling
 4191 12d8 00000000 		.word	stringMappedPositions
 4192 12dc 00000000 		.word	invStringMappedPositions
 4193 12e0 00000000 		.word	midiBarSendOn
 4194 12e4 00000000 		.word	prevBar
 4195 12e8 00000000 		.word	strings
 4196 12ec 00000000 		.word	prevStrings
 4197 12f0 00000000 		.word	numStrings
 4198 12f4 00000000 		.word	knobs
 4199 12f8 00000000 		.word	knobs7bit
 4200 12fc 00000000 		.word	prevKnobs7bit
 4201 1300 00000000 		.word	dualSlider
 4202 1304 0000E040 		.word	1088421888
 4203              	.L136:
1244:main.c        ****             }
1245:main.c        ****             else
1246:main.c        ****             {
1247:main.c        ****                 myMappedPos = invStringMappedPositions[0];
 4204              		.loc 1 1247 0
 4205 1308 A94B     		ldr	r3, .L197
 4206 130a 1B68     		ldr	r3, [r3]	@ float
 4207 130c BB65     		str	r3, [r7, #88]	@ float
 4208              	.L137:
1248:main.c        ****             }
1249:main.c        **** 
1250:main.c        ****             
1251:main.c        ****     		//then apply those ratios to the fundamental frequencies
1252:main.c        ****     		float tempMIDI = (copedent[necks[currentNeck]][0][i] +
 4209              		.loc 1 1252 0
 4210 130e A94B     		ldr	r3, .L197+4
 4211 1310 1B68     		ldr	r3, [r3]
 4212 1312 A94A     		ldr	r2, .L197+8
 4213 1314 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4214 1316 1A46     		mov	r2, r3
 4215 1318 A849     		ldr	r1, .L197+12
 4216 131a 1346     		mov	r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 98


 4217 131c 5B01     		lsls	r3, r3, #5
 4218 131e 1344     		add	r3, r3, r2
 4219 1320 9B00     		lsls	r3, r3, #2
 4220 1322 FA6D     		ldr	r2, [r7, #92]
 4221 1324 1344     		add	r3, r3, r2
 4222 1326 51F82340 		ldr	r4, [r1, r3, lsl #2]	@ float
1253:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4223              		.loc 1 1253 0
 4224 132a A54B     		ldr	r3, .L197+16
 4225 132c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4226 132e 1A46     		mov	r2, r3
 4227 1330 A249     		ldr	r1, .L197+12
 4228 1332 1346     		mov	r3, r2
 4229 1334 5B01     		lsls	r3, r3, #5
 4230 1336 1344     		add	r3, r3, r2
 4231 1338 9B00     		lsls	r3, r3, #2
 4232 133a FA6D     		ldr	r2, [r7, #92]
 4233 133c 1344     		add	r3, r3, r2
 4234 133e 3033     		adds	r3, r3, #48
 4235 1340 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4236 1344 9F4B     		ldr	r3, .L197+20
 4237 1346 1B68     		ldr	r3, [r3]	@ float
 4238 1348 1946     		mov	r1, r3
 4239 134a 1046     		mov	r0, r2
 4240 134c FFF7FEFF 		bl	__aeabi_fmul
 4241 1350 0346     		mov	r3, r0
1252:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4242              		.loc 1 1252 0
 4243 1352 1946     		mov	r1, r3
 4244 1354 2046     		mov	r0, r4
 4245 1356 FFF7FEFF 		bl	__aeabi_fadd
 4246 135a 0346     		mov	r3, r0
 4247 135c 1C46     		mov	r4, r3
1254:main.c        ****                         (copedent[currentCopedent][5][i] * pedals_float[1]) +
 4248              		.loc 1 1254 0
 4249 135e 984B     		ldr	r3, .L197+16
 4250 1360 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4251 1362 1A46     		mov	r2, r3
 4252 1364 9549     		ldr	r1, .L197+12
 4253 1366 1346     		mov	r3, r2
 4254 1368 5B01     		lsls	r3, r3, #5
 4255 136a 1344     		add	r3, r3, r2
 4256 136c 9B00     		lsls	r3, r3, #2
 4257 136e FA6D     		ldr	r2, [r7, #92]
 4258 1370 1344     		add	r3, r3, r2
 4259 1372 3C33     		adds	r3, r3, #60
 4260 1374 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4261 1378 924B     		ldr	r3, .L197+20
 4262 137a 5B68     		ldr	r3, [r3, #4]	@ float
 4263 137c 1946     		mov	r1, r3
 4264 137e 1046     		mov	r0, r2
 4265 1380 FFF7FEFF 		bl	__aeabi_fmul
 4266 1384 0346     		mov	r3, r0
1253:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4267              		.loc 1 1253 0
 4268 1386 1946     		mov	r1, r3
 4269 1388 2046     		mov	r0, r4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 99


 4270 138a FFF7FEFF 		bl	__aeabi_fadd
 4271 138e 0346     		mov	r3, r0
 4272 1390 1C46     		mov	r4, r3
1255:main.c        ****                         (copedent[currentCopedent][6][i] * pedals_float[2]) +
 4273              		.loc 1 1255 0
 4274 1392 8B4B     		ldr	r3, .L197+16
 4275 1394 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4276 1396 1A46     		mov	r2, r3
 4277 1398 8849     		ldr	r1, .L197+12
 4278 139a 1346     		mov	r3, r2
 4279 139c 5B01     		lsls	r3, r3, #5
 4280 139e 1344     		add	r3, r3, r2
 4281 13a0 9B00     		lsls	r3, r3, #2
 4282 13a2 FA6D     		ldr	r2, [r7, #92]
 4283 13a4 1344     		add	r3, r3, r2
 4284 13a6 4833     		adds	r3, r3, #72
 4285 13a8 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4286 13ac 854B     		ldr	r3, .L197+20
 4287 13ae 9B68     		ldr	r3, [r3, #8]	@ float
 4288 13b0 1946     		mov	r1, r3
 4289 13b2 1046     		mov	r0, r2
 4290 13b4 FFF7FEFF 		bl	__aeabi_fmul
 4291 13b8 0346     		mov	r3, r0
1254:main.c        ****                         (copedent[currentCopedent][5][i] * pedals_float[1]) +
 4292              		.loc 1 1254 0
 4293 13ba 1946     		mov	r1, r3
 4294 13bc 2046     		mov	r0, r4
 4295 13be FFF7FEFF 		bl	__aeabi_fadd
 4296 13c2 0346     		mov	r3, r0
 4297 13c4 1C46     		mov	r4, r3
1256:main.c        ****                         (copedent[currentCopedent][7][i] * pedals_float[3]) +
 4298              		.loc 1 1256 0
 4299 13c6 7E4B     		ldr	r3, .L197+16
 4300 13c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4301 13ca 1A46     		mov	r2, r3
 4302 13cc 7B49     		ldr	r1, .L197+12
 4303 13ce 1346     		mov	r3, r2
 4304 13d0 5B01     		lsls	r3, r3, #5
 4305 13d2 1344     		add	r3, r3, r2
 4306 13d4 9B00     		lsls	r3, r3, #2
 4307 13d6 FA6D     		ldr	r2, [r7, #92]
 4308 13d8 1344     		add	r3, r3, r2
 4309 13da 5433     		adds	r3, r3, #84
 4310 13dc 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4311 13e0 784B     		ldr	r3, .L197+20
 4312 13e2 DB68     		ldr	r3, [r3, #12]	@ float
 4313 13e4 1946     		mov	r1, r3
 4314 13e6 1046     		mov	r0, r2
 4315 13e8 FFF7FEFF 		bl	__aeabi_fmul
 4316 13ec 0346     		mov	r3, r0
1255:main.c        ****                         (copedent[currentCopedent][6][i] * pedals_float[2]) +
 4317              		.loc 1 1255 0
 4318 13ee 1946     		mov	r1, r3
 4319 13f0 2046     		mov	r0, r4
 4320 13f2 FFF7FEFF 		bl	__aeabi_fadd
 4321 13f6 0346     		mov	r3, r0
 4322 13f8 1C46     		mov	r4, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 100


1257:main.c        ****                         (copedent[currentCopedent][8][i] * pedals_float[4]) +
 4323              		.loc 1 1257 0
 4324 13fa 714B     		ldr	r3, .L197+16
 4325 13fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4326 13fe 1A46     		mov	r2, r3
 4327 1400 6E49     		ldr	r1, .L197+12
 4328 1402 1346     		mov	r3, r2
 4329 1404 5B01     		lsls	r3, r3, #5
 4330 1406 1344     		add	r3, r3, r2
 4331 1408 9B00     		lsls	r3, r3, #2
 4332 140a FA6D     		ldr	r2, [r7, #92]
 4333 140c 1344     		add	r3, r3, r2
 4334 140e 6033     		adds	r3, r3, #96
 4335 1410 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4336 1414 6B4B     		ldr	r3, .L197+20
 4337 1416 1B69     		ldr	r3, [r3, #16]	@ float
 4338 1418 1946     		mov	r1, r3
 4339 141a 1046     		mov	r0, r2
 4340 141c FFF7FEFF 		bl	__aeabi_fmul
 4341 1420 0346     		mov	r3, r0
1256:main.c        ****                         (copedent[currentCopedent][7][i] * pedals_float[3]) +
 4342              		.loc 1 1256 0
 4343 1422 1946     		mov	r1, r3
 4344 1424 2046     		mov	r0, r4
 4345 1426 FFF7FEFF 		bl	__aeabi_fadd
 4346 142a 0346     		mov	r3, r0
 4347 142c 1C46     		mov	r4, r3
1258:main.c        ****                         (copedent[currentCopedent][10][i] * pedals_float[5]) +
 4348              		.loc 1 1258 0
 4349 142e 644B     		ldr	r3, .L197+16
 4350 1430 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4351 1432 1A46     		mov	r2, r3
 4352 1434 6149     		ldr	r1, .L197+12
 4353 1436 1346     		mov	r3, r2
 4354 1438 5B01     		lsls	r3, r3, #5
 4355 143a 1344     		add	r3, r3, r2
 4356 143c 9B00     		lsls	r3, r3, #2
 4357 143e FA6D     		ldr	r2, [r7, #92]
 4358 1440 1344     		add	r3, r3, r2
 4359 1442 7833     		adds	r3, r3, #120
 4360 1444 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4361 1448 5E4B     		ldr	r3, .L197+20
 4362 144a 5B69     		ldr	r3, [r3, #20]	@ float
 4363 144c 1946     		mov	r1, r3
 4364 144e 1046     		mov	r0, r2
 4365 1450 FFF7FEFF 		bl	__aeabi_fmul
 4366 1454 0346     		mov	r3, r0
1257:main.c        ****                         (copedent[currentCopedent][8][i] * pedals_float[4]) +
 4367              		.loc 1 1257 0
 4368 1456 1946     		mov	r1, r3
 4369 1458 2046     		mov	r0, r4
 4370 145a FFF7FEFF 		bl	__aeabi_fadd
 4371 145e 0346     		mov	r3, r0
 4372 1460 1C46     		mov	r4, r3
1259:main.c        ****                         (copedent[currentCopedent][9][i] * pedals_float[6]) +
 4373              		.loc 1 1259 0
 4374 1462 574B     		ldr	r3, .L197+16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 101


 4375 1464 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4376 1466 1A46     		mov	r2, r3
 4377 1468 5449     		ldr	r1, .L197+12
 4378 146a 1346     		mov	r3, r2
 4379 146c 5B01     		lsls	r3, r3, #5
 4380 146e 1344     		add	r3, r3, r2
 4381 1470 9B00     		lsls	r3, r3, #2
 4382 1472 FA6D     		ldr	r2, [r7, #92]
 4383 1474 1344     		add	r3, r3, r2
 4384 1476 6C33     		adds	r3, r3, #108
 4385 1478 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4386 147c 514B     		ldr	r3, .L197+20
 4387 147e 9B69     		ldr	r3, [r3, #24]	@ float
 4388 1480 1946     		mov	r1, r3
 4389 1482 1046     		mov	r0, r2
 4390 1484 FFF7FEFF 		bl	__aeabi_fmul
 4391 1488 0346     		mov	r3, r0
1258:main.c        ****                         (copedent[currentCopedent][10][i] * pedals_float[5]) +
 4392              		.loc 1 1258 0
 4393 148a 1946     		mov	r1, r3
 4394 148c 2046     		mov	r0, r4
 4395 148e FFF7FEFF 		bl	__aeabi_fadd
 4396 1492 0346     		mov	r3, r0
 4397 1494 1C46     		mov	r4, r3
1260:main.c        ****                         (copedent[currentCopedent][3][i] * pedals_float[7]) +
 4398              		.loc 1 1260 0
 4399 1496 4A4B     		ldr	r3, .L197+16
 4400 1498 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4401 149a 1A46     		mov	r2, r3
 4402 149c 4749     		ldr	r1, .L197+12
 4403 149e 1346     		mov	r3, r2
 4404 14a0 5B01     		lsls	r3, r3, #5
 4405 14a2 1344     		add	r3, r3, r2
 4406 14a4 9B00     		lsls	r3, r3, #2
 4407 14a6 FA6D     		ldr	r2, [r7, #92]
 4408 14a8 1344     		add	r3, r3, r2
 4409 14aa 2433     		adds	r3, r3, #36
 4410 14ac 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4411 14b0 444B     		ldr	r3, .L197+20
 4412 14b2 DB69     		ldr	r3, [r3, #28]	@ float
 4413 14b4 1946     		mov	r1, r3
 4414 14b6 1046     		mov	r0, r2
 4415 14b8 FFF7FEFF 		bl	__aeabi_fmul
 4416 14bc 0346     		mov	r3, r0
1259:main.c        ****                         (copedent[currentCopedent][9][i] * pedals_float[6]) +
 4417              		.loc 1 1259 0
 4418 14be 1946     		mov	r1, r3
 4419 14c0 2046     		mov	r0, r4
 4420 14c2 FFF7FEFF 		bl	__aeabi_fadd
 4421 14c6 0346     		mov	r3, r0
 4422 14c8 1C46     		mov	r4, r3
1261:main.c        ****                         (copedent[currentCopedent][1][i] * pedals_float[8]) +
 4423              		.loc 1 1261 0
 4424 14ca 3D4B     		ldr	r3, .L197+16
 4425 14cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4426 14ce 1A46     		mov	r2, r3
 4427 14d0 3A49     		ldr	r1, .L197+12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 102


 4428 14d2 1346     		mov	r3, r2
 4429 14d4 5B01     		lsls	r3, r3, #5
 4430 14d6 1344     		add	r3, r3, r2
 4431 14d8 9B00     		lsls	r3, r3, #2
 4432 14da FA6D     		ldr	r2, [r7, #92]
 4433 14dc 1344     		add	r3, r3, r2
 4434 14de 0C33     		adds	r3, r3, #12
 4435 14e0 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4436 14e4 374B     		ldr	r3, .L197+20
 4437 14e6 1B6A     		ldr	r3, [r3, #32]	@ float
 4438 14e8 1946     		mov	r1, r3
 4439 14ea 1046     		mov	r0, r2
 4440 14ec FFF7FEFF 		bl	__aeabi_fmul
 4441 14f0 0346     		mov	r3, r0
1260:main.c        ****                         (copedent[currentCopedent][3][i] * pedals_float[7]) +
 4442              		.loc 1 1260 0
 4443 14f2 1946     		mov	r1, r3
 4444 14f4 2046     		mov	r0, r4
 4445 14f6 FFF7FEFF 		bl	__aeabi_fadd
 4446 14fa 0346     		mov	r3, r0
 4447 14fc 1C46     		mov	r4, r3
1262:main.c        ****                         (copedent[currentCopedent][2][i] * pedals_float[9]));
 4448              		.loc 1 1262 0
 4449 14fe 304B     		ldr	r3, .L197+16
 4450 1500 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4451 1502 1A46     		mov	r2, r3
 4452 1504 2D49     		ldr	r1, .L197+12
 4453 1506 1346     		mov	r3, r2
 4454 1508 5B01     		lsls	r3, r3, #5
 4455 150a 1344     		add	r3, r3, r2
 4456 150c 9B00     		lsls	r3, r3, #2
 4457 150e FA6D     		ldr	r2, [r7, #92]
 4458 1510 1344     		add	r3, r3, r2
 4459 1512 1833     		adds	r3, r3, #24
 4460 1514 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4461 1518 2A4B     		ldr	r3, .L197+20
 4462 151a 5B6A     		ldr	r3, [r3, #36]	@ float
 4463 151c 1946     		mov	r1, r3
 4464 151e 1046     		mov	r0, r2
 4465 1520 FFF7FEFF 		bl	__aeabi_fmul
 4466 1524 0346     		mov	r3, r0
1252:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4467              		.loc 1 1252 0
 4468 1526 1946     		mov	r1, r3
 4469 1528 2046     		mov	r0, r4
 4470 152a FFF7FEFF 		bl	__aeabi_fadd
 4471 152e 0346     		mov	r3, r0
 4472 1530 3B62     		str	r3, [r7, #32]	@ float
1263:main.c        **** 
1264:main.c        ****             
1265:main.c        ****             float openStringMIDI  = copedent[currentCopedent][0][i];
 4473              		.loc 1 1265 0
 4474 1532 234B     		ldr	r3, .L197+16
 4475 1534 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4476 1536 1A46     		mov	r2, r3
 4477 1538 2049     		ldr	r1, .L197+12
 4478 153a 1346     		mov	r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 103


 4479 153c 5B01     		lsls	r3, r3, #5
 4480 153e 1344     		add	r3, r3, r2
 4481 1540 9B00     		lsls	r3, r3, #2
 4482 1542 FA6D     		ldr	r2, [r7, #92]
 4483 1544 1344     		add	r3, r3, r2
 4484 1546 51F82330 		ldr	r3, [r1, r3, lsl #2]	@ float
 4485 154a FB61     		str	r3, [r7, #28]	@ float
1266:main.c        ****             openStringMIDI_Int[i] = (int)openStringMIDI;
 4486              		.loc 1 1266 0
 4487 154c F869     		ldr	r0, [r7, #28]	@ float
 4488 154e FFF7FEFF 		bl	__aeabi_f2iz
 4489 1552 0146     		mov	r1, r0
 4490 1554 1C4A     		ldr	r2, .L197+24
 4491 1556 FB6D     		ldr	r3, [r7, #92]
 4492 1558 42F82310 		str	r1, [r2, r3, lsl #2]
1267:main.c        ****             
1268:main.c        ****             float barMIDI = ftom(myMappedPos * mtof(tempMIDI));
 4493              		.loc 1 1268 0
 4494 155c 386A     		ldr	r0, [r7, #32]	@ float
 4495 155e FFF7FEFF 		bl	mtof
 4496 1562 0346     		mov	r3, r0
 4497 1564 B96D     		ldr	r1, [r7, #88]	@ float
 4498 1566 1846     		mov	r0, r3
 4499 1568 FFF7FEFF 		bl	__aeabi_fmul
 4500 156c 0346     		mov	r3, r0
 4501 156e 1846     		mov	r0, r3
 4502 1570 FFF7FEFF 		bl	ftom
 4503 1574 B861     		str	r0, [r7, #24]	@ float
1269:main.c        ****             
1270:main.c        ****             float computerMIDIOffset = barMIDI - openStringMIDI_Int[i];// + stringOctave[i];
 4504              		.loc 1 1270 0
 4505 1576 144A     		ldr	r2, .L197+24
 4506 1578 FB6D     		ldr	r3, [r7, #92]
 4507 157a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4508 157e 1846     		mov	r0, r3
 4509 1580 FFF7FEFF 		bl	__aeabi_i2f
 4510 1584 0346     		mov	r3, r0
 4511 1586 1946     		mov	r1, r3
 4512 1588 B869     		ldr	r0, [r7, #24]	@ float
 4513 158a FFF7FEFF 		bl	__aeabi_fsub
 4514 158e 0346     		mov	r3, r0
 4515 1590 7B61     		str	r3, [r7, #20]	@ float
1271:main.c        ****             
1272:main.c        ****             float pitchBendAmount = (computerMIDIOffset * 170.6666666666667f) + 8192.0f;  // 14bit 
 4516              		.loc 1 1272 0
 4517 1592 0E49     		ldr	r1, .L197+28
 4518 1594 7869     		ldr	r0, [r7, #20]	@ float
 4519 1596 FFF7FEFF 		bl	__aeabi_fmul
 4520 159a 0346     		mov	r3, r0
 4521 159c 4FF08C41 		mov	r1, #1174405120
 4522 15a0 1846     		mov	r0, r3
 4523 15a2 FFF7FEFF 		bl	__aeabi_fadd
 4524 15a6 0346     		mov	r3, r0
 4525 15a8 3B61     		str	r3, [r7, #16]	@ float
1273:main.c        ****             if (pitchBendAmount != prevStringPitchBend[i])
 4526              		.loc 1 1273 0
 4527 15aa 094A     		ldr	r2, .L197+32
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 104


 4528 15ac FB6D     		ldr	r3, [r7, #92]
 4529 15ae 11E0     		b	.L198
 4530              	.L199:
 4531              		.align	2
 4532              	.L197:
 4533 15b0 00000000 		.word	invStringMappedPositions
 4534 15b4 00000000 		.word	currentNeck
 4535 15b8 00000000 		.word	necks
 4536 15bc 00000000 		.word	copedent
 4537 15c0 00000000 		.word	currentCopedent
 4538 15c4 00000000 		.word	pedals_float
 4539 15c8 00000000 		.word	openStringMIDI_Int
 4540 15cc ABAA2A43 		.word	1126869675
 4541 15d0 00000000 		.word	prevStringPitchBend
 4542              	.L198:
 4543 15d4 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 4544 15d8 3969     		ldr	r1, [r7, #16]	@ float
 4545 15da 1846     		mov	r0, r3
 4546 15dc FFF7FEFF 		bl	__aeabi_fcmpeq
 4547 15e0 0346     		mov	r3, r0
 4548 15e2 002B     		cmp	r3, #0
 4549 15e4 0AD1     		bne	.L138
1274:main.c        ****             {
1275:main.c        ****                 sendMIDIPitchBend((uint)pitchBendAmount, i+1);
 4550              		.loc 1 1275 0
 4551 15e6 3869     		ldr	r0, [r7, #16]	@ float
 4552 15e8 FFF7FEFF 		bl	__aeabi_f2uiz
 4553 15ec 0346     		mov	r3, r0
 4554 15ee 1A46     		mov	r2, r3
 4555 15f0 FB6D     		ldr	r3, [r7, #92]
 4556 15f2 0133     		adds	r3, r3, #1
 4557 15f4 1946     		mov	r1, r3
 4558 15f6 1046     		mov	r0, r2
 4559 15f8 FFF7FEFF 		bl	sendMIDIPitchBend
 4560              	.L138:
1276:main.c        ****             }
1277:main.c        ****             prevStringPitchBend[i] = pitchBendAmount;
 4561              		.loc 1 1277 0
 4562 15fc 9449     		ldr	r1, .L200
 4563 15fe FB6D     		ldr	r3, [r7, #92]
 4564 1600 3A69     		ldr	r2, [r7, #16]	@ float
 4565 1602 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
1278:main.c        ****             
1279:main.c        ****             if (tempMIDI > 0.0f)
 4566              		.loc 1 1279 0
 4567 1606 4FF00001 		mov	r1, #0
 4568 160a 386A     		ldr	r0, [r7, #32]	@ float
 4569 160c FFF7FEFF 		bl	__aeabi_fcmpgt
 4570 1610 0346     		mov	r3, r0
 4571 1612 002B     		cmp	r3, #0
 4572 1614 04D0     		beq	.L140
1280:main.c        ****             {
1281:main.c        ****                 stringMIDI[i] = tempMIDI;
 4573              		.loc 1 1281 0
 4574 1616 8F49     		ldr	r1, .L200+4
 4575 1618 FB6D     		ldr	r3, [r7, #92]
 4576 161a 3A6A     		ldr	r2, [r7, #32]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 105


 4577 161c 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 4578              	.L140:
 4579              	.LBE29:
1236:main.c        ****     	{
 4580              		.loc 1 1236 0 discriminator 2
 4581 1620 FB6D     		ldr	r3, [r7, #92]
 4582 1622 0133     		adds	r3, r3, #1
 4583 1624 FB65     		str	r3, [r7, #92]
 4584              	.L135:
1236:main.c        ****     	{
 4585              		.loc 1 1236 0 is_stmt 0 discriminator 1
 4586 1626 8C4B     		ldr	r3, .L200+8
 4587 1628 1B68     		ldr	r3, [r3]
 4588 162a FA6D     		ldr	r2, [r7, #92]
 4589 162c 9A42     		cmp	r2, r3
 4590 162e FFF639AE 		blt	.L142
 4591              	.LBE28:
1282:main.c        ****             }
1283:main.c        ****     	}
1284:main.c        ****         testpin4_Write(0);
 4592              		.loc 1 1284 0 is_stmt 1
 4593 1632 0020     		movs	r0, #0
 4594 1634 FFF7FEFF 		bl	testpin4_Write
1285:main.c        ****         //if (encoder_button_Read())
1286:main.c        ****         {
1287:main.c        ****             //encoderVal[encoderNum] += QuadDec_1_GetCounter() * 4;
1288:main.c        ****         }
1289:main.c        ****         //else
1290:main.c        ****         {
1291:main.c        ****             //encoderVal[encoderNum] += QuadDec_1_GetCounter();
1292:main.c        ****         }
1293:main.c        ****         //QuadDec_1_SetCounter(0);
1294:main.c        ****         
1295:main.c        **** 
1296:main.c        ****         
1297:main.c        ****         if (USB_check_flag)
 4595              		.loc 1 1297 0
 4596 1638 884B     		ldr	r3, .L200+12
 4597 163a 1B78     		ldrb	r3, [r3]
 4598 163c DBB2     		uxtb	r3, r3
 4599 163e 002B     		cmp	r3, #0
 4600 1640 01D0     		beq	.L143
1298:main.c        ****         {
1299:main.c        ****             checkUSB_Vbus();
 4601              		.loc 1 1299 0
 4602 1642 FFF7FEFF 		bl	checkUSB_Vbus
 4603              	.L143:
1300:main.c        ****         }
1301:main.c        ****         //only service the USB bus if there is a computer plugged in
1302:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 4604              		.loc 1 1302 0
 4605 1646 864B     		ldr	r3, .L200+16
 4606 1648 1B78     		ldrb	r3, [r3]
 4607 164a DBB2     		uxtb	r3, r3
 4608 164c 002B     		cmp	r3, #0
 4609 164e 13D0     		beq	.L182
 4610              		.loc 1 1302 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 106


 4611 1650 FFF7FEFF 		bl	USB_VBusPresent
 4612 1654 0346     		mov	r3, r0
 4613 1656 002B     		cmp	r3, #0
 4614 1658 0ED0     		beq	.L182
1303:main.c        ****         {
1304:main.c        ****             if (midiSent > 64)
 4615              		.loc 1 1304 0 is_stmt 1
 4616 165a 824B     		ldr	r3, .L200+20
 4617 165c 1B88     		ldrh	r3, [r3]
 4618 165e 402B     		cmp	r3, #64
 4619 1660 05D9     		bls	.L145
1305:main.c        ****             {
1306:main.c        ****                 midiOverflow++;
 4620              		.loc 1 1306 0
 4621 1662 814B     		ldr	r3, .L200+24
 4622 1664 1B88     		ldrh	r3, [r3]
 4623 1666 0133     		adds	r3, r3, #1
 4624 1668 9AB2     		uxth	r2, r3
 4625 166a 7F4B     		ldr	r3, .L200+24
 4626 166c 1A80     		strh	r2, [r3]	@ movhi
 4627              	.L145:
1307:main.c        ****             }
1308:main.c        ****             midiSent = 0;
 4628              		.loc 1 1308 0
 4629 166e 7D4B     		ldr	r3, .L200+20
 4630 1670 0022     		movs	r2, #0
 4631 1672 1A80     		strh	r2, [r3]	@ movhi
1309:main.c        ****             USB_service();
 4632              		.loc 1 1309 0
 4633 1674 FFF7FEFF 		bl	USB_service
 4634              	.L182:
1310:main.c        ****         }
1311:main.c        **** 
1312:main.c        ****         
1313:main.c        ****         /*
1314:main.c        ****         for (int i = 0; i < 10; i++)
1315:main.c        ****         {
1316:main.c        ****             myArray[i * 2] = processed_pedals[i] >> 8;
1317:main.c        ****             myArray[(i * 2) + 1] = processed_pedals[i] & 0xff;
1318:main.c        ****         }
1319:main.c        ****         
1320:main.c        ****         myArray[20] = octave | (voice << 2) | (dualSlider << 3) | (neck << 4);
1321:main.c        ****         for (int i = 0; i < 4; i++)
1322:main.c        ****         {
1323:main.c        ****             myArray[i+21] = knobs[i];
1324:main.c        ****         }
1325:main.c        ****         myArray[25] = processed_volumePedal >> 8;
1326:main.c        ****         myArray[26] = processed_volumePedal & 0xff;
1327:main.c        ****         */
1328:main.c        ****                 //make sure previous SPI2 transmission has completed before transferring the remain
1329:main.c        ****         while (0u == ((SPIM_1_ReadTxStatus() & SPIM_1_STS_SPI_DONE) || (SPIM_1_ReadTxStatus() & SPI
 4635              		.loc 1 1329 0
 4636 1678 00BF     		nop
 4637              	.L149:
 4638              		.loc 1 1329 0 is_stmt 0 discriminator 7
 4639 167a FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 4640 167e 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 107


 4641 1680 03F00103 		and	r3, r3, #1
 4642 1684 002B     		cmp	r3, #0
 4643 1686 06D1     		bne	.L146
 4644              		.loc 1 1329 0 discriminator 2
 4645 1688 FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 4646 168c 0346     		mov	r3, r0
 4647 168e 03F01003 		and	r3, r3, #16
 4648 1692 002B     		cmp	r3, #0
 4649 1694 01D0     		beq	.L147
 4650              	.L146:
 4651              		.loc 1 1329 0 discriminator 3
 4652 1696 0123     		movs	r3, #1
 4653 1698 00E0     		b	.L148
 4654              	.L147:
 4655              		.loc 1 1329 0 discriminator 4
 4656 169a 0023     		movs	r3, #0
 4657              	.L148:
 4658              		.loc 1 1329 0 discriminator 6
 4659 169c 002B     		cmp	r3, #0
 4660 169e ECD0     		beq	.L149
1330:main.c        ****         {
1331:main.c        ****             ;
1332:main.c        ****         }
1333:main.c        ****         testpin6_Write(1);
 4661              		.loc 1 1333 0 is_stmt 1
 4662 16a0 0120     		movs	r0, #1
 4663 16a2 FFF7FEFF 		bl	testpin6_Write
1334:main.c        ****         if (sendingMessage == 1) //sending synthesis preset to synth board
 4664              		.loc 1 1334 0
 4665 16a6 714B     		ldr	r3, .L200+28
 4666 16a8 1B78     		ldrb	r3, [r3]
 4667 16aa DBB2     		uxtb	r3, r3
 4668 16ac 012B     		cmp	r3, #1
 4669 16ae 56D1     		bne	.L150
1335:main.c        ****         {
1336:main.c        ****             if (sendMessageEnd) //send end message
 4670              		.loc 1 1336 0
 4671 16b0 6F4B     		ldr	r3, .L200+32
 4672 16b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4673 16b4 002B     		cmp	r3, #0
 4674 16b6 1DD0     		beq	.L151
1337:main.c        ****             {
1338:main.c        ****                 myArray[0] = 253;
 4675              		.loc 1 1338 0
 4676 16b8 6E4B     		ldr	r3, .L200+36
 4677 16ba FD22     		movs	r2, #253
 4678 16bc 1A70     		strb	r2, [r3]
1339:main.c        ****                 myArray[1] = presetNumberToWrite;
 4679              		.loc 1 1339 0
 4680 16be 6E4B     		ldr	r3, .L200+40
 4681 16c0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4682 16c2 6C4B     		ldr	r3, .L200+36
 4683 16c4 5A70     		strb	r2, [r3, #1]
1340:main.c        ****                 currentPresetSelection = presetNumberToWrite;
 4684              		.loc 1 1340 0
 4685 16c6 6C4B     		ldr	r3, .L200+40
 4686 16c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 108


 4687 16ca 1A46     		mov	r2, r3
 4688 16cc 6B4B     		ldr	r3, .L200+44
 4689 16ce 1A60     		str	r2, [r3]
1341:main.c        ****                 //display previous preset as loaded
1342:main.c        ****                 displayCurrentPresetNameAndCopedent();
 4690              		.loc 1 1342 0
 4691 16d0 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
1343:main.c        ****                 //OLED_invert(0);
1344:main.c        ****                 sendMessageEnd = 0;
 4692              		.loc 1 1344 0
 4693 16d4 664B     		ldr	r3, .L200+32
 4694 16d6 0022     		movs	r2, #0
 4695 16d8 1A70     		strb	r2, [r3]
1345:main.c        ****                 sendingMessage = 0;
 4696              		.loc 1 1345 0
 4697 16da 644B     		ldr	r3, .L200+28
 4698 16dc 0022     		movs	r2, #0
 4699 16de 1A70     		strb	r2, [r3]
1346:main.c        ****                 messageArraySendCount = 0;
 4700              		.loc 1 1346 0
 4701 16e0 674B     		ldr	r3, .L200+48
 4702 16e2 0022     		movs	r2, #0
 4703 16e4 1A80     		strh	r2, [r3]	@ movhi
1347:main.c        ****                 myArray[30] = 254;
 4704              		.loc 1 1347 0
 4705 16e6 634B     		ldr	r3, .L200+36
 4706 16e8 FE22     		movs	r2, #254
 4707 16ea 9A77     		strb	r2, [r3, #30]
1348:main.c        ****                 myArray[31] = 253;
 4708              		.loc 1 1348 0
 4709 16ec 614B     		ldr	r3, .L200+36
 4710 16ee FD22     		movs	r2, #253
 4711 16f0 DA77     		strb	r2, [r3, #31]
 4712 16f2 9EE1     		b	.L157
 4713              	.L151:
1349:main.c        ****                 
1350:main.c        ****             }
1351:main.c        ****             else //send chunks
1352:main.c        ****             {
1353:main.c        ****                 //send the next preset Chunkkkkk
1354:main.c        ****                 myArray[0] = 2;
 4714              		.loc 1 1354 0
 4715 16f4 5F4B     		ldr	r3, .L200+36
 4716 16f6 0222     		movs	r2, #2
 4717 16f8 1A70     		strb	r2, [r3]
1355:main.c        ****                 myArray[1] = presetNumberToWrite;
 4718              		.loc 1 1355 0
 4719 16fa 5F4B     		ldr	r3, .L200+40
 4720 16fc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4721 16fe 5D4B     		ldr	r3, .L200+36
 4722 1700 5A70     		strb	r2, [r3, #1]
 4723              	.LBB30:
1356:main.c        ****                 for (uint i = 2 ; i < myBufferSize-2; i++)
 4724              		.loc 1 1356 0
 4725 1702 0223     		movs	r3, #2
 4726 1704 7B65     		str	r3, [r7, #84]
 4727 1706 20E0     		b	.L153
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 109


 4728              	.L156:
1357:main.c        ****                 {
1358:main.c        ****                     if (messageArraySendCount < messageArraySize)
 4729              		.loc 1 1358 0
 4730 1708 5D4B     		ldr	r3, .L200+48
 4731 170a 1A88     		ldrh	r2, [r3]
 4732 170c 5D4B     		ldr	r3, .L200+52
 4733 170e 1B88     		ldrh	r3, [r3]
 4734 1710 9A42     		cmp	r2, r3
 4735 1712 0FD2     		bcs	.L154
1359:main.c        ****                     {
1360:main.c        ****                         myArray[i] = presetArray[messageArraySendCount++];
 4736              		.loc 1 1360 0
 4737 1714 5A4B     		ldr	r3, .L200+48
 4738 1716 1B88     		ldrh	r3, [r3]
 4739 1718 5A1C     		adds	r2, r3, #1
 4740 171a 91B2     		uxth	r1, r2
 4741 171c 584A     		ldr	r2, .L200+48
 4742 171e 1180     		strh	r1, [r2]	@ movhi
 4743 1720 1A46     		mov	r2, r3
 4744 1722 594B     		ldr	r3, .L200+56
 4745 1724 9B5C     		ldrb	r3, [r3, r2]
 4746 1726 D9B2     		uxtb	r1, r3
 4747 1728 524A     		ldr	r2, .L200+36
 4748 172a 7B6D     		ldr	r3, [r7, #84]
 4749 172c 1344     		add	r3, r3, r2
 4750 172e 0A46     		mov	r2, r1
 4751 1730 1A70     		strb	r2, [r3]
 4752 1732 07E0     		b	.L155
 4753              	.L154:
1361:main.c        ****                     }
1362:main.c        ****                     else
1363:main.c        ****                     {
1364:main.c        ****                         myArray[i] = 0xee; // preset end ack   - done, next send a message that s
 4754              		.loc 1 1364 0
 4755 1734 4F4A     		ldr	r2, .L200+36
 4756 1736 7B6D     		ldr	r3, [r7, #84]
 4757 1738 1344     		add	r3, r3, r2
 4758 173a EE22     		movs	r2, #238
 4759 173c 1A70     		strb	r2, [r3]
1365:main.c        ****                         sendMessageEnd = 1;
 4760              		.loc 1 1365 0
 4761 173e 4C4B     		ldr	r3, .L200+32
 4762 1740 0122     		movs	r2, #1
 4763 1742 1A70     		strb	r2, [r3]
 4764              	.L155:
1356:main.c        ****                 {
 4765              		.loc 1 1356 0 discriminator 2
 4766 1744 7B6D     		ldr	r3, [r7, #84]
 4767 1746 0133     		adds	r3, r3, #1
 4768 1748 7B65     		str	r3, [r7, #84]
 4769              	.L153:
1356:main.c        ****                 {
 4770              		.loc 1 1356 0 is_stmt 0 discriminator 1
 4771 174a 7B6D     		ldr	r3, [r7, #84]
 4772 174c 1D2B     		cmp	r3, #29
 4773 174e DBD9     		bls	.L156
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 110


 4774              	.LBE30:
1366:main.c        ****                     }
1367:main.c        ****                 }
1368:main.c        ****                 myArray[30] = 254;
 4775              		.loc 1 1368 0 is_stmt 1
 4776 1750 484B     		ldr	r3, .L200+36
 4777 1752 FE22     		movs	r2, #254
 4778 1754 9A77     		strb	r2, [r3, #30]
1369:main.c        ****                 myArray[31] = 253;
 4779              		.loc 1 1369 0
 4780 1756 474B     		ldr	r3, .L200+36
 4781 1758 FD22     		movs	r2, #253
 4782 175a DA77     		strb	r2, [r3, #31]
 4783 175c 69E1     		b	.L157
 4784              	.L150:
1370:main.c        ****             }    
1371:main.c        ****         }
1372:main.c        ****         
1373:main.c        ****         else if (sendSingleParamUpdate)
 4785              		.loc 1 1373 0
 4786 175e 4B4B     		ldr	r3, .L200+60
 4787 1760 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4788 1762 002B     		cmp	r3, #0
 4789 1764 1CD0     		beq	.L158
1374:main.c        ****         {
1375:main.c        ****             myArray[0] = 6;
 4790              		.loc 1 1375 0
 4791 1766 434B     		ldr	r3, .L200+36
 4792 1768 0622     		movs	r2, #6
 4793 176a 1A70     		strb	r2, [r3]
1376:main.c        ****             myArray[1] = singleParamToUpdateHigh;
 4794              		.loc 1 1376 0
 4795 176c 484B     		ldr	r3, .L200+64
 4796 176e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4797 1770 404B     		ldr	r3, .L200+36
 4798 1772 5A70     		strb	r2, [r3, #1]
1377:main.c        ****             myArray[2] = singleParamToUpdateLow;
 4799              		.loc 1 1377 0
 4800 1774 474B     		ldr	r3, .L200+68
 4801 1776 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4802 1778 3E4B     		ldr	r3, .L200+36
 4803 177a 9A70     		strb	r2, [r3, #2]
1378:main.c        ****             myArray[3] = singleParamValueHigh;
 4804              		.loc 1 1378 0
 4805 177c 464B     		ldr	r3, .L200+72
 4806 177e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4807 1780 3C4B     		ldr	r3, .L200+36
 4808 1782 DA70     		strb	r2, [r3, #3]
1379:main.c        ****             myArray[4] = singleParamValueLow;
 4809              		.loc 1 1379 0
 4810 1784 454B     		ldr	r3, .L200+76
 4811 1786 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4812 1788 3A4B     		ldr	r3, .L200+36
 4813 178a 1A71     		strb	r2, [r3, #4]
1380:main.c        ****             myArray[30] = 254;
 4814              		.loc 1 1380 0
 4815 178c 394B     		ldr	r3, .L200+36
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 111


 4816 178e FE22     		movs	r2, #254
 4817 1790 9A77     		strb	r2, [r3, #30]
1381:main.c        ****             myArray[31] = 253;
 4818              		.loc 1 1381 0
 4819 1792 384B     		ldr	r3, .L200+36
 4820 1794 FD22     		movs	r2, #253
 4821 1796 DA77     		strb	r2, [r3, #31]
1382:main.c        ****             sendSingleParamUpdate = 0;
 4822              		.loc 1 1382 0
 4823 1798 3C4B     		ldr	r3, .L200+60
 4824 179a 0022     		movs	r2, #0
 4825 179c 1A70     		strb	r2, [r3]
 4826 179e 48E1     		b	.L157
 4827              	.L158:
1383:main.c        ****         }
1384:main.c        ****         
1385:main.c        ****         else if (sendMappingChangeUpdate)
 4828              		.loc 1 1385 0
 4829 17a0 3F4B     		ldr	r3, .L200+80
 4830 17a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4831 17a4 002B     		cmp	r3, #0
 4832 17a6 24D0     		beq	.L159
1386:main.c        ****         {
1387:main.c        ****             myArray[0] = 7;
 4833              		.loc 1 1387 0
 4834 17a8 324B     		ldr	r3, .L200+36
 4835 17aa 0722     		movs	r2, #7
 4836 17ac 1A70     		strb	r2, [r3]
1388:main.c        ****             myArray[1] = mappingArray[0];
 4837              		.loc 1 1388 0
 4838 17ae 3D4B     		ldr	r3, .L200+84
 4839 17b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4840 17b2 304B     		ldr	r3, .L200+36
 4841 17b4 5A70     		strb	r2, [r3, #1]
1389:main.c        ****             myArray[2] =  mappingArray[1];
 4842              		.loc 1 1389 0
 4843 17b6 3B4B     		ldr	r3, .L200+84
 4844 17b8 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 4845 17ba 2E4B     		ldr	r3, .L200+36
 4846 17bc 9A70     		strb	r2, [r3, #2]
1390:main.c        ****             myArray[3] =  mappingArray[2];
 4847              		.loc 1 1390 0
 4848 17be 394B     		ldr	r3, .L200+84
 4849 17c0 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 4850 17c2 2C4B     		ldr	r3, .L200+36
 4851 17c4 DA70     		strb	r2, [r3, #3]
1391:main.c        ****             myArray[4] =  mappingArray[3];
 4852              		.loc 1 1391 0
 4853 17c6 374B     		ldr	r3, .L200+84
 4854 17c8 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 4855 17ca 2A4B     		ldr	r3, .L200+36
 4856 17cc 1A71     		strb	r2, [r3, #4]
1392:main.c        ****              myArray[5] =  mappingArray[4];
 4857              		.loc 1 1392 0
 4858 17ce 354B     		ldr	r3, .L200+84
 4859 17d0 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 4860 17d2 284B     		ldr	r3, .L200+36
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 112


 4861 17d4 5A71     		strb	r2, [r3, #5]
1393:main.c        ****              myArray[6] =  mappingArray[5];
 4862              		.loc 1 1393 0
 4863 17d6 334B     		ldr	r3, .L200+84
 4864 17d8 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 4865 17da 264B     		ldr	r3, .L200+36
 4866 17dc 9A71     		strb	r2, [r3, #6]
1394:main.c        ****             myArray[30] = 254;
 4867              		.loc 1 1394 0
 4868 17de 254B     		ldr	r3, .L200+36
 4869 17e0 FE22     		movs	r2, #254
 4870 17e2 9A77     		strb	r2, [r3, #30]
1395:main.c        ****             myArray[31] = 253;
 4871              		.loc 1 1395 0
 4872 17e4 234B     		ldr	r3, .L200+36
 4873 17e6 FD22     		movs	r2, #253
 4874 17e8 DA77     		strb	r2, [r3, #31]
1396:main.c        ****             sendMappingChangeUpdate = 0;
 4875              		.loc 1 1396 0
 4876 17ea 2D4B     		ldr	r3, .L200+80
 4877 17ec 0022     		movs	r2, #0
 4878 17ee 1A70     		strb	r2, [r3]
 4879 17f0 1FE1     		b	.L157
 4880              	.L159:
1397:main.c        ****         }
1398:main.c        ****         
1399:main.c        ****         
1400:main.c        ****         else if (sendKnobs)
 4881              		.loc 1 1400 0
 4882 17f2 2D4B     		ldr	r3, .L200+88
 4883 17f4 1B78     		ldrb	r3, [r3]
 4884 17f6 DBB2     		uxtb	r3, r3
 4885 17f8 002B     		cmp	r3, #0
 4886 17fa 00F0AB80 		beq	.L160
1401:main.c        ****         {
1402:main.c        ****             myArray[0] = 3; //sending knob stuff, not a preset send
 4887              		.loc 1 1402 0
 4888 17fe 1D4B     		ldr	r3, .L200+36
 4889 1800 0322     		movs	r2, #3
 4890 1802 1A70     		strb	r2, [r3]
 4891              	.LBB31:
1403:main.c        ****             for (int i = 0; i < 8; i++)
 4892              		.loc 1 1403 0
 4893 1804 0023     		movs	r3, #0
 4894 1806 3B65     		str	r3, [r7, #80]
 4895 1808 0AE0     		b	.L161
 4896              	.L162:
1404:main.c        ****             {
1405:main.c        ****                 myArray[i + 1] = macroKnobValues[i];
 4897              		.loc 1 1405 0 discriminator 3
 4898 180a 3B6D     		ldr	r3, [r7, #80]
 4899 180c 0133     		adds	r3, r3, #1
 4900 180e 2749     		ldr	r1, .L200+92
 4901 1810 3A6D     		ldr	r2, [r7, #80]
 4902 1812 0A44     		add	r2, r2, r1
 4903 1814 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 4904 1816 174A     		ldr	r2, .L200+36
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 113


 4905 1818 D154     		strb	r1, [r2, r3]
1403:main.c        ****             for (int i = 0; i < 8; i++)
 4906              		.loc 1 1403 0 discriminator 3
 4907 181a 3B6D     		ldr	r3, [r7, #80]
 4908 181c 0133     		adds	r3, r3, #1
 4909 181e 3B65     		str	r3, [r7, #80]
 4910              	.L161:
1403:main.c        ****             for (int i = 0; i < 8; i++)
 4911              		.loc 1 1403 0 is_stmt 0 discriminator 1
 4912 1820 3B6D     		ldr	r3, [r7, #80]
 4913 1822 072B     		cmp	r3, #7
 4914 1824 F1DD     		ble	.L162
 4915              	.LBE31:
 4916              	.LBB32:
1406:main.c        ****             }
1407:main.c        ****             for (int i = 0; i < 4; i++)
 4917              		.loc 1 1407 0 is_stmt 1
 4918 1826 0023     		movs	r3, #0
 4919 1828 FB64     		str	r3, [r7, #76]
 4920 182a 0AE0     		b	.L163
 4921              	.L164:
1408:main.c        ****             {
1409:main.c        ****                 myArray[i + 9] = knobs[i];
 4922              		.loc 1 1409 0 discriminator 3
 4923 182c FB6C     		ldr	r3, [r7, #76]
 4924 182e 0933     		adds	r3, r3, #9
 4925 1830 1F49     		ldr	r1, .L200+96
 4926 1832 FA6C     		ldr	r2, [r7, #76]
 4927 1834 0A44     		add	r2, r2, r1
 4928 1836 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 4929 1838 0E4A     		ldr	r2, .L200+36
 4930 183a D154     		strb	r1, [r2, r3]
1407:main.c        ****             {
 4931              		.loc 1 1407 0 discriminator 3
 4932 183c FB6C     		ldr	r3, [r7, #76]
 4933 183e 0133     		adds	r3, r3, #1
 4934 1840 FB64     		str	r3, [r7, #76]
 4935              	.L163:
1407:main.c        ****             {
 4936              		.loc 1 1407 0 is_stmt 0 discriminator 1
 4937 1842 FB6C     		ldr	r3, [r7, #76]
 4938 1844 032B     		cmp	r3, #3
 4939 1846 F1DD     		ble	.L164
 4940              	.LBE32:
 4941              	.LBB33:
1410:main.c        ****             }
1411:main.c        ****             for (int i = 0; i < 10; i++)
 4942              		.loc 1 1411 0 is_stmt 1
 4943 1848 0023     		movs	r3, #0
 4944 184a BB64     		str	r3, [r7, #72]
 4945 184c 3DE0     		b	.L165
 4946              	.L201:
 4947 184e 00BF     		.align	2
 4948              	.L200:
 4949 1850 00000000 		.word	prevStringPitchBend
 4950 1854 00000000 		.word	stringMIDI
 4951 1858 00000000 		.word	numStrings
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 114


 4952 185c 00000000 		.word	USB_check_flag
 4953 1860 00000000 		.word	USB_active
 4954 1864 00000000 		.word	midiSent
 4955 1868 00000000 		.word	midiOverflow
 4956 186c 00000000 		.word	sendingMessage
 4957 1870 00000000 		.word	sendMessageEnd
 4958 1874 00000000 		.word	myArray
 4959 1878 00000000 		.word	presetNumberToWrite
 4960 187c 00000000 		.word	currentPresetSelection
 4961 1880 00000000 		.word	messageArraySendCount
 4962 1884 00000000 		.word	messageArraySize
 4963 1888 00000000 		.word	presetArray
 4964 188c 00000000 		.word	sendSingleParamUpdate
 4965 1890 00000000 		.word	singleParamToUpdateHigh
 4966 1894 00000000 		.word	singleParamToUpdateLow
 4967 1898 00000000 		.word	singleParamValueHigh
 4968 189c 00000000 		.word	singleParamValueLow
 4969 18a0 00000000 		.word	sendMappingChangeUpdate
 4970 18a4 00000000 		.word	mappingArray
 4971 18a8 00000000 		.word	sendKnobs
 4972 18ac 00000000 		.word	macroKnobValues
 4973 18b0 00000000 		.word	knobs
 4974              	.L166:
1412:main.c        ****             {
1413:main.c        ****                 myArray[i + 13] = pedals8bit[i];
 4975              		.loc 1 1413 0 discriminator 3
 4976 18b4 BB6C     		ldr	r3, [r7, #72]
 4977 18b6 0D33     		adds	r3, r3, #13
 4978 18b8 9049     		ldr	r1, .L202
 4979 18ba BA6C     		ldr	r2, [r7, #72]
 4980 18bc 0A44     		add	r2, r2, r1
 4981 18be 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 4982 18c0 8F4A     		ldr	r2, .L202+4
 4983 18c2 D154     		strb	r1, [r2, r3]
1411:main.c        ****             {
 4984              		.loc 1 1411 0 discriminator 3
 4985 18c4 BB6C     		ldr	r3, [r7, #72]
 4986 18c6 0133     		adds	r3, r3, #1
 4987 18c8 BB64     		str	r3, [r7, #72]
 4988              	.L165:
1411:main.c        ****             {
 4989              		.loc 1 1411 0 is_stmt 0 discriminator 1
 4990 18ca BB6C     		ldr	r3, [r7, #72]
 4991 18cc 092B     		cmp	r3, #9
 4992 18ce F1DD     		ble	.L166
 4993              	.LBE33:
1414:main.c        ****             }
1415:main.c        ****             myArray[24] = octave | (voice << 4) | (dualSlider << 5) | (neck << 6);
 4994              		.loc 1 1415 0 is_stmt 1
 4995 18d0 8C4B     		ldr	r3, .L202+8
 4996 18d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4997 18d4 1B01     		lsls	r3, r3, #4
 4998 18d6 5AB2     		sxtb	r2, r3
 4999 18d8 8B4B     		ldr	r3, .L202+12
 5000 18da 1B68     		ldr	r3, [r3]
 5001 18dc 5BB2     		sxtb	r3, r3
 5002 18de 1343     		orrs	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 115


 5003 18e0 5AB2     		sxtb	r2, r3
 5004 18e2 8A4B     		ldr	r3, .L202+16
 5005 18e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5006 18e6 5B01     		lsls	r3, r3, #5
 5007 18e8 5BB2     		sxtb	r3, r3
 5008 18ea 1343     		orrs	r3, r3, r2
 5009 18ec 5AB2     		sxtb	r2, r3
 5010 18ee 884B     		ldr	r3, .L202+20
 5011 18f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5012 18f2 9B01     		lsls	r3, r3, #6
 5013 18f4 5BB2     		sxtb	r3, r3
 5014 18f6 1343     		orrs	r3, r3, r2
 5015 18f8 5BB2     		sxtb	r3, r3
 5016 18fa DAB2     		uxtb	r2, r3
 5017 18fc 804B     		ldr	r3, .L202+4
 5018 18fe 1A76     		strb	r2, [r3, #24]
1416:main.c        ****             myArray[25] = patchNum;
 5019              		.loc 1 1416 0
 5020 1900 844B     		ldr	r3, .L202+24
 5021 1902 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5022 1904 7E4B     		ldr	r3, .L202+4
 5023 1906 5A76     		strb	r2, [r3, #25]
1417:main.c        ****             myArray[26] = processed_volumePedal >> 8;
 5024              		.loc 1 1417 0
 5025 1908 834B     		ldr	r3, .L202+28
 5026 190a B3F90030 		ldrsh	r3, [r3]
 5027 190e 1B12     		asrs	r3, r3, #8
 5028 1910 1BB2     		sxth	r3, r3
 5029 1912 DAB2     		uxtb	r2, r3
 5030 1914 7A4B     		ldr	r3, .L202+4
 5031 1916 9A76     		strb	r2, [r3, #26]
1418:main.c        ****             myArray[27] = processed_volumePedal & 0xff;
 5032              		.loc 1 1418 0
 5033 1918 7F4B     		ldr	r3, .L202+28
 5034 191a B3F90030 		ldrsh	r3, [r3]
 5035 191e DAB2     		uxtb	r2, r3
 5036 1920 774B     		ldr	r3, .L202+4
 5037 1922 DA76     		strb	r2, [r3, #27]
1419:main.c        ****             myArray[28] = bar[1] >> 8;
 5038              		.loc 1 1419 0
 5039 1924 7D4B     		ldr	r3, .L202+32
 5040 1926 5B88     		ldrh	r3, [r3, #2]	@ movhi
 5041 1928 9BB2     		uxth	r3, r3
 5042 192a 1B0A     		lsrs	r3, r3, #8
 5043 192c 9BB2     		uxth	r3, r3
 5044 192e DAB2     		uxtb	r2, r3
 5045 1930 734B     		ldr	r3, .L202+4
 5046 1932 1A77     		strb	r2, [r3, #28]
1420:main.c        ****             myArray[29] = bar[1] & 0xff;
 5047              		.loc 1 1420 0
 5048 1934 794B     		ldr	r3, .L202+32
 5049 1936 5B88     		ldrh	r3, [r3, #2]	@ movhi
 5050 1938 9BB2     		uxth	r3, r3
 5051 193a DAB2     		uxtb	r2, r3
 5052 193c 704B     		ldr	r3, .L202+4
 5053 193e 5A77     		strb	r2, [r3, #29]
1421:main.c        ****             myArray[30] = 254;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 116


 5054              		.loc 1 1421 0
 5055 1940 6F4B     		ldr	r3, .L202+4
 5056 1942 FE22     		movs	r2, #254
 5057 1944 9A77     		strb	r2, [r3, #30]
1422:main.c        ****             myArray[31] = 253;
 5058              		.loc 1 1422 0
 5059 1946 6E4B     		ldr	r3, .L202+4
 5060 1948 FD22     		movs	r2, #253
 5061 194a DA77     		strb	r2, [r3, #31]
1423:main.c        ****             
1424:main.c        ****             
1425:main.c        ****             sendKnobs = 0;
 5062              		.loc 1 1425 0
 5063 194c 744B     		ldr	r3, .L202+36
 5064 194e 0022     		movs	r2, #0
 5065 1950 1A70     		strb	r2, [r3]
 5066 1952 6EE0     		b	.L157
 5067              	.L160:
1426:main.c        ****         }
1427:main.c        ****         else
1428:main.c        ****         {
1429:main.c        ****             myArray[0] = 1; //sending normal pitch stuff, not a preset send
 5068              		.loc 1 1429 0
 5069 1954 6A4B     		ldr	r3, .L202+4
 5070 1956 0122     		movs	r2, #1
 5071 1958 1A70     		strb	r2, [r3]
 5072              	.LBB34:
1430:main.c        ****             for (int i = 0; i < 12; i++)
 5073              		.loc 1 1430 0
 5074 195a 0023     		movs	r3, #0
 5075 195c 7B64     		str	r3, [r7, #68]
 5076 195e 24E0     		b	.L167
 5077              	.L168:
 5078              	.LBB35:
1431:main.c        ****             {
1432:main.c        ****                 int scaledMIDI = roundf(stringMIDI[i] * 512.0f); // divide by 128 multiply by 65535
 5079              		.loc 1 1432 0 discriminator 3
 5080 1960 704A     		ldr	r2, .L202+40
 5081 1962 7B6C     		ldr	r3, [r7, #68]
 5082 1964 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 5083 1968 4FF08841 		mov	r1, #1140850688
 5084 196c 1846     		mov	r0, r3
 5085 196e FFF7FEFF 		bl	__aeabi_fmul
 5086 1972 0346     		mov	r3, r0
 5087 1974 1846     		mov	r0, r3
 5088 1976 FFF7FEFF 		bl	roundf
 5089 197a 0346     		mov	r3, r0
 5090 197c 1846     		mov	r0, r3
 5091 197e FFF7FEFF 		bl	__aeabi_f2iz
 5092 1982 0346     		mov	r3, r0
 5093 1984 FB60     		str	r3, [r7, #12]
1433:main.c        ****                 myArray[i * 2 + 1] = scaledMIDI >> 8;
 5094              		.loc 1 1433 0 discriminator 3
 5095 1986 7B6C     		ldr	r3, [r7, #68]
 5096 1988 5B00     		lsls	r3, r3, #1
 5097 198a 0133     		adds	r3, r3, #1
 5098 198c FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 117


 5099 198e 1212     		asrs	r2, r2, #8
 5100 1990 D1B2     		uxtb	r1, r2
 5101 1992 5B4A     		ldr	r2, .L202+4
 5102 1994 D154     		strb	r1, [r2, r3]
1434:main.c        ****                 myArray[(i * 2) + 2] = scaledMIDI & 255;
 5103              		.loc 1 1434 0 discriminator 3
 5104 1996 7B6C     		ldr	r3, [r7, #68]
 5105 1998 0133     		adds	r3, r3, #1
 5106 199a 5B00     		lsls	r3, r3, #1
 5107 199c FA68     		ldr	r2, [r7, #12]
 5108 199e D1B2     		uxtb	r1, r2
 5109 19a0 574A     		ldr	r2, .L202+4
 5110 19a2 D154     		strb	r1, [r2, r3]
 5111              	.LBE35:
1430:main.c        ****             {
 5112              		.loc 1 1430 0 discriminator 3
 5113 19a4 7B6C     		ldr	r3, [r7, #68]
 5114 19a6 0133     		adds	r3, r3, #1
 5115 19a8 7B64     		str	r3, [r7, #68]
 5116              	.L167:
1430:main.c        ****             {
 5117              		.loc 1 1430 0 is_stmt 0 discriminator 1
 5118 19aa 7B6C     		ldr	r3, [r7, #68]
 5119 19ac 0B2B     		cmp	r3, #11
 5120 19ae D7DD     		ble	.L168
 5121              	.LBE34:
1435:main.c        ****             }
1436:main.c        ****             
1437:main.c        ****             myArray[24] = octave | (voice << 4) | (dualSlider << 5) | (neck << 6);
 5122              		.loc 1 1437 0 is_stmt 1
 5123 19b0 544B     		ldr	r3, .L202+8
 5124 19b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5125 19b4 1B01     		lsls	r3, r3, #4
 5126 19b6 5AB2     		sxtb	r2, r3
 5127 19b8 534B     		ldr	r3, .L202+12
 5128 19ba 1B68     		ldr	r3, [r3]
 5129 19bc 5BB2     		sxtb	r3, r3
 5130 19be 1343     		orrs	r3, r3, r2
 5131 19c0 5AB2     		sxtb	r2, r3
 5132 19c2 524B     		ldr	r3, .L202+16
 5133 19c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5134 19c6 5B01     		lsls	r3, r3, #5
 5135 19c8 5BB2     		sxtb	r3, r3
 5136 19ca 1343     		orrs	r3, r3, r2
 5137 19cc 5AB2     		sxtb	r2, r3
 5138 19ce 504B     		ldr	r3, .L202+20
 5139 19d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5140 19d2 9B01     		lsls	r3, r3, #6
 5141 19d4 5BB2     		sxtb	r3, r3
 5142 19d6 1343     		orrs	r3, r3, r2
 5143 19d8 5BB2     		sxtb	r3, r3
 5144 19da DAB2     		uxtb	r2, r3
 5145 19dc 484B     		ldr	r3, .L202+4
 5146 19de 1A76     		strb	r2, [r3, #24]
1438:main.c        ****             myArray[25] = patchNum;
 5147              		.loc 1 1438 0
 5148 19e0 4C4B     		ldr	r3, .L202+24
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 118


 5149 19e2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5150 19e4 464B     		ldr	r3, .L202+4
 5151 19e6 5A76     		strb	r2, [r3, #25]
1439:main.c        ****             myArray[26] = processed_volumePedal >> 8;
 5152              		.loc 1 1439 0
 5153 19e8 4B4B     		ldr	r3, .L202+28
 5154 19ea B3F90030 		ldrsh	r3, [r3]
 5155 19ee 1B12     		asrs	r3, r3, #8
 5156 19f0 1BB2     		sxth	r3, r3
 5157 19f2 DAB2     		uxtb	r2, r3
 5158 19f4 424B     		ldr	r3, .L202+4
 5159 19f6 9A76     		strb	r2, [r3, #26]
1440:main.c        ****             myArray[27] = processed_volumePedal & 0xff;
 5160              		.loc 1 1440 0
 5161 19f8 474B     		ldr	r3, .L202+28
 5162 19fa B3F90030 		ldrsh	r3, [r3]
 5163 19fe DAB2     		uxtb	r2, r3
 5164 1a00 3F4B     		ldr	r3, .L202+4
 5165 1a02 DA76     		strb	r2, [r3, #27]
1441:main.c        ****             myArray[28] = bar[0] >> 8;
 5166              		.loc 1 1441 0
 5167 1a04 454B     		ldr	r3, .L202+32
 5168 1a06 1B88     		ldrh	r3, [r3]	@ movhi
 5169 1a08 9BB2     		uxth	r3, r3
 5170 1a0a 1B0A     		lsrs	r3, r3, #8
 5171 1a0c 9BB2     		uxth	r3, r3
 5172 1a0e DAB2     		uxtb	r2, r3
 5173 1a10 3B4B     		ldr	r3, .L202+4
 5174 1a12 1A77     		strb	r2, [r3, #28]
1442:main.c        ****             myArray[29] = bar[0] & 0xff;
 5175              		.loc 1 1442 0
 5176 1a14 414B     		ldr	r3, .L202+32
 5177 1a16 1B88     		ldrh	r3, [r3]	@ movhi
 5178 1a18 9BB2     		uxth	r3, r3
 5179 1a1a DAB2     		uxtb	r2, r3
 5180 1a1c 384B     		ldr	r3, .L202+4
 5181 1a1e 5A77     		strb	r2, [r3, #29]
1443:main.c        ****             myArray[30] = 254;
 5182              		.loc 1 1443 0
 5183 1a20 374B     		ldr	r3, .L202+4
 5184 1a22 FE22     		movs	r2, #254
 5185 1a24 9A77     		strb	r2, [r3, #30]
1444:main.c        ****             myArray[31] = 253;
 5186              		.loc 1 1444 0
 5187 1a26 364B     		ldr	r3, .L202+4
 5188 1a28 FD22     		movs	r2, #253
 5189 1a2a DA77     		strb	r2, [r3, #31]
1445:main.c        ****             
1446:main.c        ****             sendKnobs = 1; // for next time around, might make this slower though
 5190              		.loc 1 1446 0
 5191 1a2c 3C4B     		ldr	r3, .L202+36
 5192 1a2e 0122     		movs	r2, #1
 5193 1a30 1A70     		strb	r2, [r3]
 5194              	.L157:
1447:main.c        ****             /*
1448:main.c        ****             for (int i = 0; i < 16; i++)
1449:main.c        ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 119


1450:main.c        ****                 myArray[i+56] = encoderVal[i];
1451:main.c        ****             }
1452:main.c        ****             */
1453:main.c        ****         }
1454:main.c        **** 
1455:main.c        ****         
1456:main.c        **** 
1457:main.c        **** /*
1458:main.c        ****         for(int i = 0; i < myBufferSize; i++)
1459:main.c        ****         {
1460:main.c        ****             SPIM_1_WriteTxData(myArray[i]);
1461:main.c        ****         }
1462:main.c        ****     */    
1463:main.c        ****         
1464:main.c        **** 
1465:main.c        ****        
1466:main.c        ****         
1467:main.c        ****         
1468:main.c        ****         //parse input from synth board (names)
1469:main.c        ****         if ((inBuffer[0] == 253) && (inBuffer[31] == 254))
 5195              		.loc 1 1469 0
 5196 1a32 3D4B     		ldr	r3, .L202+44
 5197 1a34 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5198 1a36 FD2B     		cmp	r3, #253
 5199 1a38 7ED1     		bne	.L169
 5200              		.loc 1 1469 0 is_stmt 0 discriminator 1
 5201 1a3a 3B4B     		ldr	r3, .L202+44
 5202 1a3c DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 5203 1a3e FE2B     		cmp	r3, #254
 5204 1a40 7AD1     		bne	.L169
 5205              	.LBB36:
1470:main.c        ****         {
1471:main.c        ****             int whichPresetToStoreName = inBuffer[1];
 5206              		.loc 1 1471 0 is_stmt 1
 5207 1a42 394B     		ldr	r3, .L202+44
 5208 1a44 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5209 1a46 BB60     		str	r3, [r7, #8]
1472:main.c        ****             int whichMacroToStoreName = inBuffer[16];
 5210              		.loc 1 1472 0
 5211 1a48 374B     		ldr	r3, .L202+44
 5212 1a4a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 5213 1a4c 7B60     		str	r3, [r7, #4]
1473:main.c        ****             int bufferPointer = 2;
 5214              		.loc 1 1473 0
 5215 1a4e 0223     		movs	r3, #2
 5216 1a50 3B64     		str	r3, [r7, #64]
 5217              	.LBB37:
1474:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5218              		.loc 1 1474 0
 5219 1a52 0023     		movs	r3, #0
 5220 1a54 FB63     		str	r3, [r7, #60]
 5221 1a56 14E0     		b	.L170
 5222              	.L171:
1475:main.c        ****             {
1476:main.c        ****                 presetNamesArray[whichPresetToStoreName][i] = inBuffer[bufferPointer];
 5223              		.loc 1 1476 0 discriminator 3
 5224 1a58 334A     		ldr	r2, .L202+44
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 120


 5225 1a5a 3B6C     		ldr	r3, [r7, #64]
 5226 1a5c 1344     		add	r3, r3, r2
 5227 1a5e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5228 1a60 3249     		ldr	r1, .L202+48
 5229 1a62 BA68     		ldr	r2, [r7, #8]
 5230 1a64 1346     		mov	r3, r2
 5231 1a66 DB00     		lsls	r3, r3, #3
 5232 1a68 9B1A     		subs	r3, r3, r2
 5233 1a6a 5B00     		lsls	r3, r3, #1
 5234 1a6c CA18     		adds	r2, r1, r3
 5235 1a6e FB6B     		ldr	r3, [r7, #60]
 5236 1a70 1344     		add	r3, r3, r2
 5237 1a72 0246     		mov	r2, r0
 5238 1a74 1A70     		strb	r2, [r3]
1477:main.c        ****                 bufferPointer++;
 5239              		.loc 1 1477 0 discriminator 3
 5240 1a76 3B6C     		ldr	r3, [r7, #64]
 5241 1a78 0133     		adds	r3, r3, #1
 5242 1a7a 3B64     		str	r3, [r7, #64]
1474:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5243              		.loc 1 1474 0 discriminator 3
 5244 1a7c FB6B     		ldr	r3, [r7, #60]
 5245 1a7e 0133     		adds	r3, r3, #1
 5246 1a80 FB63     		str	r3, [r7, #60]
 5247              	.L170:
1474:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5248              		.loc 1 1474 0 is_stmt 0 discriminator 1
 5249 1a82 FB6B     		ldr	r3, [r7, #60]
 5250 1a84 0D2B     		cmp	r3, #13
 5251 1a86 E7DD     		ble	.L171
 5252              	.LBE37:
1478:main.c        ****             }
1479:main.c        ****             bufferPointer = 17;
 5253              		.loc 1 1479 0 is_stmt 1
 5254 1a88 1123     		movs	r3, #17
 5255 1a8a 3B64     		str	r3, [r7, #64]
 5256              	.LBB38:
1480:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5257              		.loc 1 1480 0
 5258 1a8c 0023     		movs	r3, #0
 5259 1a8e BB63     		str	r3, [r7, #56]
 5260 1a90 1BE0     		b	.L172
 5261              	.L173:
1481:main.c        ****             {
1482:main.c        ****                 macroNamesArray[whichPresetToStoreName][whichMacroToStoreName][i] = inBuffer[buffer
 5262              		.loc 1 1482 0 discriminator 3
 5263 1a92 254A     		ldr	r2, .L202+44
 5264 1a94 3B6C     		ldr	r3, [r7, #64]
 5265 1a96 1344     		add	r3, r3, r2
 5266 1a98 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 5267 1a9a 2548     		ldr	r0, .L202+52
 5268 1a9c 7B68     		ldr	r3, [r7, #4]
 5269 1a9e B968     		ldr	r1, [r7, #8]
 5270 1aa0 1A46     		mov	r2, r3
 5271 1aa2 D200     		lsls	r2, r2, #3
 5272 1aa4 D21A     		subs	r2, r2, r3
 5273 1aa6 5300     		lsls	r3, r2, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 121


 5274 1aa8 1A46     		mov	r2, r3
 5275 1aaa 0B46     		mov	r3, r1
 5276 1aac DB00     		lsls	r3, r3, #3
 5277 1aae 5B1A     		subs	r3, r3, r1
 5278 1ab0 1B01     		lsls	r3, r3, #4
 5279 1ab2 1344     		add	r3, r3, r2
 5280 1ab4 C218     		adds	r2, r0, r3
 5281 1ab6 BB6B     		ldr	r3, [r7, #56]
 5282 1ab8 1344     		add	r3, r3, r2
 5283 1aba 2246     		mov	r2, r4
 5284 1abc 1A70     		strb	r2, [r3]
1483:main.c        ****                 bufferPointer++;
 5285              		.loc 1 1483 0 discriminator 3
 5286 1abe 3B6C     		ldr	r3, [r7, #64]
 5287 1ac0 0133     		adds	r3, r3, #1
 5288 1ac2 3B64     		str	r3, [r7, #64]
1480:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5289              		.loc 1 1480 0 discriminator 3
 5290 1ac4 BB6B     		ldr	r3, [r7, #56]
 5291 1ac6 0133     		adds	r3, r3, #1
 5292 1ac8 BB63     		str	r3, [r7, #56]
 5293              	.L172:
1480:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5294              		.loc 1 1480 0 is_stmt 0 discriminator 1
 5295 1aca BB6B     		ldr	r3, [r7, #56]
 5296 1acc 0D2B     		cmp	r3, #13
 5297 1ace E0DD     		ble	.L173
 5298              	.LBE38:
1484:main.c        ****             }
1485:main.c        ****             if ((whichPresetToStoreName == patchNum) && (whichMacroToStoreName == 7) && (!presetAlr
 5299              		.loc 1 1485 0 is_stmt 1
 5300 1ad0 104B     		ldr	r3, .L202+24
 5301 1ad2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5302 1ad4 1A46     		mov	r2, r3
 5303 1ad6 BB68     		ldr	r3, [r7, #8]
 5304 1ad8 9A42     		cmp	r2, r3
 5305 1ada 40F0AF80 		bne	.L181
 5306              		.loc 1 1485 0 is_stmt 0 discriminator 1
 5307 1ade 7B68     		ldr	r3, [r7, #4]
 5308 1ae0 072B     		cmp	r3, #7
 5309 1ae2 40F0AB80 		bne	.L181
 5310              		.loc 1 1485 0 discriminator 2
 5311 1ae6 134A     		ldr	r2, .L202+56
 5312 1ae8 BB68     		ldr	r3, [r7, #8]
 5313 1aea 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5314 1aee 002B     		cmp	r3, #0
 5315 1af0 40F0A480 		bne	.L181
1486:main.c        ****             {
1487:main.c        ****                 displayCurrentPresetNameAndCopedent();
 5316              		.loc 1 1487 0 is_stmt 1
 5317 1af4 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
 5318              	.LBE36:
1470:main.c        ****             int whichPresetToStoreName = inBuffer[1];
 5319              		.loc 1 1470 0
 5320 1af8 A0E0     		b	.L181
 5321              	.L203:
 5322 1afa 00BF     		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 122


 5323              	.L202:
 5324 1afc 00000000 		.word	pedals8bit
 5325 1b00 00000000 		.word	myArray
 5326 1b04 00000000 		.word	voice
 5327 1b08 00000000 		.word	octave
 5328 1b0c 00000000 		.word	dualSlider
 5329 1b10 00000000 		.word	neck
 5330 1b14 00000000 		.word	patchNum
 5331 1b18 00000000 		.word	processed_volumePedal
 5332 1b1c 00000000 		.word	bar
 5333 1b20 00000000 		.word	sendKnobs
 5334 1b24 00000000 		.word	stringMIDI
 5335 1b28 00000000 		.word	inBuffer
 5336 1b2c 00000000 		.word	presetNamesArray
 5337 1b30 00000000 		.word	macroNamesArray
 5338 1b34 00000000 		.word	presetAlreadyDisplayed
 5339              	.L169:
1488:main.c        ****             }
1489:main.c        ****         }
1490:main.c        ****         else if ((inBuffer[0] == 252) && (inBuffer[31] == 254))
 5340              		.loc 1 1490 0
 5341 1b38 4B4B     		ldr	r3, .L204
 5342 1b3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5343 1b3c FC2B     		cmp	r3, #252
 5344 1b3e 7ED1     		bne	.L175
 5345              		.loc 1 1490 0 is_stmt 0 discriminator 1
 5346 1b40 494B     		ldr	r3, .L204
 5347 1b42 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 5348 1b44 FE2B     		cmp	r3, #254
 5349 1b46 7AD1     		bne	.L175
1491:main.c        ****         {
1492:main.c        ****             //oop this means we're about to get new firmware. Reset to bootloader
1493:main.c        ****             SPIM_1_Stop();
 5350              		.loc 1 1493 0 is_stmt 1
 5351 1b48 FFF7FEFF 		bl	SPIM_1_Stop
1494:main.c        ****             myGFX_setFont(0);
 5352              		.loc 1 1494 0
 5353 1b4c 0020     		movs	r0, #0
 5354 1b4e FFF7FEFF 		bl	myGFX_setFont
1495:main.c        ****             OLEDwriteString("FIRMWARE   ", 11, 1, FirstLine);
 5355              		.loc 1 1495 0
 5356 1b52 0023     		movs	r3, #0
 5357 1b54 0122     		movs	r2, #1
 5358 1b56 0B21     		movs	r1, #11
 5359 1b58 4448     		ldr	r0, .L204+4
 5360 1b5a FFF7FEFF 		bl	OLEDwriteString
1496:main.c        ****             OLEDwriteString("UPDATE     ", 11, 1, SecondLine);
 5361              		.loc 1 1496 0
 5362 1b5e 0123     		movs	r3, #1
 5363 1b60 0122     		movs	r2, #1
 5364 1b62 0B21     		movs	r1, #11
 5365 1b64 4248     		ldr	r0, .L204+8
 5366 1b66 FFF7FEFF 		bl	OLEDwriteString
1497:main.c        ****             OLEDwriteString("           ", 11, 1, ThirdLine);
 5367              		.loc 1 1497 0
 5368 1b6a 0223     		movs	r3, #2
 5369 1b6c 0122     		movs	r2, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 123


 5370 1b6e 0B21     		movs	r1, #11
 5371 1b70 4048     		ldr	r0, .L204+12
 5372 1b72 FFF7FEFF 		bl	OLEDwriteString
1498:main.c        ****             OLEDwriteString("           ", 11, 1, FourthLine);
 5373              		.loc 1 1498 0
 5374 1b76 0323     		movs	r3, #3
 5375 1b78 0122     		movs	r2, #1
 5376 1b7a 0B21     		movs	r1, #11
 5377 1b7c 3D48     		ldr	r0, .L204+12
 5378 1b7e FFF7FEFF 		bl	OLEDwriteString
1499:main.c        ****             main_counter = 11;
 5379              		.loc 1 1499 0
 5380 1b82 3D4B     		ldr	r3, .L204+16
 5381 1b84 0B22     		movs	r2, #11
 5382 1b86 1A70     		strb	r2, [r3]
1500:main.c        ****                    //set muxes to write to main OLED
1501:main.c        ****             if (mux_states[main_counter][0] != last_mux)
 5383              		.loc 1 1501 0
 5384 1b88 3B4B     		ldr	r3, .L204+16
 5385 1b8a 1B78     		ldrb	r3, [r3]
 5386 1b8c DBB2     		uxtb	r3, r3
 5387 1b8e 1A46     		mov	r2, r3
 5388 1b90 3A4B     		ldr	r3, .L204+20
 5389 1b92 13F81220 		ldrb	r2, [r3, r2, lsl #1]	@ zero_extendqisi2
 5390 1b96 3A4B     		ldr	r3, .L204+24
 5391 1b98 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5392 1b9a 9A42     		cmp	r2, r3
 5393 1b9c 13D0     		beq	.L176
 5394              	.LBB39:
1502:main.c        ****             {
1503:main.c        ****                 I2Cbuff1[0] = 1<<mux_states[main_counter][0];
 5395              		.loc 1 1503 0
 5396 1b9e 364B     		ldr	r3, .L204+16
 5397 1ba0 1B78     		ldrb	r3, [r3]
 5398 1ba2 DBB2     		uxtb	r3, r3
 5399 1ba4 1A46     		mov	r2, r3
 5400 1ba6 354B     		ldr	r3, .L204+20
 5401 1ba8 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 5402 1bac 1A46     		mov	r2, r3
 5403 1bae 0123     		movs	r3, #1
 5404 1bb0 9340     		lsls	r3, r3, r2
 5405 1bb2 DAB2     		uxtb	r2, r3
 5406 1bb4 334B     		ldr	r3, .L204+28
 5407 1bb6 1A70     		strb	r2, [r3]
1504:main.c        ****                 uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 5408              		.loc 1 1504 0
 5409 1bb8 0022     		movs	r2, #0
 5410 1bba 0121     		movs	r1, #1
 5411 1bbc 7020     		movs	r0, #112
 5412 1bbe FFF7FEFF 		bl	I2C_MasterWriteBlocking
 5413 1bc2 0346     		mov	r3, r0
 5414 1bc4 FB70     		strb	r3, [r7, #3]
 5415              	.L176:
 5416              	.LBE39:
1505:main.c        ****             }
1506:main.c        ****             last_mux = mux_states[main_counter][0];
 5417              		.loc 1 1506 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 124


 5418 1bc6 2C4B     		ldr	r3, .L204+16
 5419 1bc8 1B78     		ldrb	r3, [r3]
 5420 1bca DBB2     		uxtb	r3, r3
 5421 1bcc 1A46     		mov	r2, r3
 5422 1bce 2B4B     		ldr	r3, .L204+20
 5423 1bd0 13F81220 		ldrb	r2, [r3, r2, lsl #1]	@ zero_extendqisi2
 5424 1bd4 2A4B     		ldr	r3, .L204+24
 5425 1bd6 1A70     		strb	r2, [r3]
1507:main.c        ****             
1508:main.c        ****             
1509:main.c        ****             CyDelayUs(10);
 5426              		.loc 1 1509 0
 5427 1bd8 0A20     		movs	r0, #10
 5428 1bda FFF7FEFF 		bl	CyDelayUs
1510:main.c        ****             if (mux_states[main_counter][0] == 5)
 5429              		.loc 1 1510 0
 5430 1bde 264B     		ldr	r3, .L204+16
 5431 1be0 1B78     		ldrb	r3, [r3]
 5432 1be2 DBB2     		uxtb	r3, r3
 5433 1be4 1A46     		mov	r2, r3
 5434 1be6 254B     		ldr	r3, .L204+20
 5435 1be8 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 5436 1bec 052B     		cmp	r3, #5
 5437 1bee 1DD1     		bne	.L177
1511:main.c        ****             {
1512:main.c        ****                 if (!i2c_skipped[main_counter])
 5438              		.loc 1 1512 0
 5439 1bf0 214B     		ldr	r3, .L204+16
 5440 1bf2 1B78     		ldrb	r3, [r3]
 5441 1bf4 DBB2     		uxtb	r3, r3
 5442 1bf6 1A46     		mov	r2, r3
 5443 1bf8 234B     		ldr	r3, .L204+32
 5444 1bfa 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 5445 1bfc 002B     		cmp	r3, #0
 5446 1bfe 15D1     		bne	.L177
1513:main.c        ****                 {
1514:main.c        ****                     I2Cbuff1[0] = 1<<mux_states[main_counter][1];
 5447              		.loc 1 1514 0
 5448 1c00 1D4B     		ldr	r3, .L204+16
 5449 1c02 1B78     		ldrb	r3, [r3]
 5450 1c04 DBB2     		uxtb	r3, r3
 5451 1c06 1D4A     		ldr	r2, .L204+20
 5452 1c08 5B00     		lsls	r3, r3, #1
 5453 1c0a 1344     		add	r3, r3, r2
 5454 1c0c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5455 1c0e 1A46     		mov	r2, r3
 5456 1c10 0123     		movs	r3, #1
 5457 1c12 9340     		lsls	r3, r3, r2
 5458 1c14 DAB2     		uxtb	r2, r3
 5459 1c16 1B4B     		ldr	r3, .L204+28
 5460 1c18 1A70     		strb	r2, [r3]
1515:main.c        ****                     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 5461              		.loc 1 1515 0
 5462 1c1a 0022     		movs	r2, #0
 5463 1c1c 0121     		movs	r1, #1
 5464 1c1e 7120     		movs	r0, #113
 5465 1c20 FFF7FEFF 		bl	I2C_MasterWriteBlocking
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 125


 5466 1c24 0346     		mov	r3, r0
 5467 1c26 1A46     		mov	r2, r3
 5468 1c28 184B     		ldr	r3, .L204+36
 5469 1c2a 1A60     		str	r2, [r3]
 5470              	.L177:
1516:main.c        ****                 }
1517:main.c        ****             }
1518:main.c        **** 
1519:main.c        ****             CyDelayUs(10);
 5471              		.loc 1 1519 0
 5472 1c2c 0A20     		movs	r0, #10
 5473 1c2e FFF7FEFF 		bl	CyDelayUs
1520:main.c        **** 
1521:main.c        ****             OLED_draw(128, 64);
 5474              		.loc 1 1521 0
 5475 1c32 4021     		movs	r1, #64
 5476 1c34 8020     		movs	r0, #128
 5477 1c36 FFF7FEFF 		bl	OLED_draw
 5478 1c3a 00E0     		b	.L175
 5479              	.L181:
1470:main.c        ****             int whichPresetToStoreName = inBuffer[1];
 5480              		.loc 1 1470 0
 5481 1c3c 00BF     		nop
 5482              	.L175:
1522:main.c        ****             #ifdef BOOTLOAD_STYLE
1523:main.c        ****             Bootloadable_Load();
1524:main.c        ****                 #endif
1525:main.c        ****         }
1526:main.c        ****         
1527:main.c        ****         SPIM_1_ClearRxBuffer();
 5483              		.loc 1 1527 0
 5484 1c3e FFF7FEFF 		bl	SPIM_1_ClearRxBuffer
1528:main.c        ****         CyDmaChEnable(rx3Channel, STORE_TD_CFG_ONCMPLT);
 5485              		.loc 1 1528 0
 5486 1c42 134B     		ldr	r3, .L204+40
 5487 1c44 1B78     		ldrb	r3, [r3]
 5488 1c46 DBB2     		uxtb	r3, r3
 5489 1c48 0121     		movs	r1, #1
 5490 1c4a 1846     		mov	r0, r3
 5491 1c4c FFF7FEFF 		bl	CyDmaChEnable
1529:main.c        ****         CyDmaChEnable(txChannel, STORE_TD_CFG_ONCMPLT);
 5492              		.loc 1 1529 0
 5493 1c50 104B     		ldr	r3, .L204+44
 5494 1c52 1B78     		ldrb	r3, [r3]
 5495 1c54 DBB2     		uxtb	r3, r3
 5496 1c56 0121     		movs	r1, #1
 5497 1c58 1846     		mov	r0, r3
 5498 1c5a FFF7FEFF 		bl	CyDmaChEnable
1530:main.c        ****         
1531:main.c        ****         testpin6_Write(0);
 5499              		.loc 1 1531 0
 5500 1c5e 0020     		movs	r0, #0
 5501 1c60 FFF7FEFF 		bl	testpin6_Write
1532:main.c        ****        
1533:main.c        **** 
1534:main.c        ****      }
 5502              		.loc 1 1534 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 126


 5503 1c64 FEF769BD 		b	.L178
 5504              	.L205:
 5505              		.align	2
 5506              	.L204:
 5507 1c68 00000000 		.word	inBuffer
 5508 1c6c 04040000 		.word	.LC1
 5509 1c70 10040000 		.word	.LC2
 5510 1c74 1C040000 		.word	.LC3
 5511 1c78 00000000 		.word	main_counter
 5512 1c7c 00000000 		.word	mux_states
 5513 1c80 00000000 		.word	last_mux
 5514 1c84 00000000 		.word	I2Cbuff1
 5515 1c88 00000000 		.word	i2c_skipped
 5516 1c8c 00000000 		.word	status
 5517 1c90 00000000 		.word	rx3Channel
 5518 1c94 00000000 		.word	txChannel
 5519              		.cfi_endproc
 5520              	.LFE75:
 5521              		.size	main, .-main
 5522              		.section	.text.DmaTxConfiguration,"ax",%progbits
 5523              		.align	2
 5524              		.global	DmaTxConfiguration
 5525              		.thumb
 5526              		.thumb_func
 5527              		.type	DmaTxConfiguration, %function
 5528              	DmaTxConfiguration:
 5529              	.LFB76:
1535:main.c        **** }
1536:main.c        **** 
1537:main.c        **** void DmaTxConfiguration()
1538:main.c        **** {
 5530              		.loc 1 1538 0
 5531              		.cfi_startproc
 5532              		@ args = 0, pretend = 0, frame = 0
 5533              		@ frame_needed = 1, uses_anonymous_args = 0
 5534 0000 80B5     		push	{r7, lr}
 5535              		.cfi_def_cfa_offset 8
 5536              		.cfi_offset 7, -8
 5537              		.cfi_offset 14, -4
 5538 0002 00AF     		add	r7, sp, #0
 5539              		.cfi_def_cfa_register 7
1539:main.c        ****     /* Init DMA, 1 byte bursts, each burst requires a request */ 
1540:main.c        ****     txChannel = DMA_4_DmaInitialize(DMA_TX_BYTES_PER_BURST, DMA_TX_REQUEST_PER_BURST, 
 5540              		.loc 1 1540 0
 5541 0004 4FF48043 		mov	r3, #16384
 5542 0008 41F6FF72 		movw	r2, #8191
 5543 000c 0121     		movs	r1, #1
 5544 000e 0120     		movs	r0, #1
 5545 0010 FFF7FEFF 		bl	DMA_4_DmaInitialize
 5546 0014 0346     		mov	r3, r0
 5547 0016 1A46     		mov	r2, r3
 5548 0018 124B     		ldr	r3, .L207
 5549 001a 1A70     		strb	r2, [r3]
1541:main.c        ****                                         HI16(DMA_TX_SRC_BASE), HI16(DMA_TX_DST_BASE));
1542:main.c        **** 
1543:main.c        ****     txTD = CyDmaTdAllocate();
 5550              		.loc 1 1543 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 127


 5551 001c FFF7FEFF 		bl	CyDmaTdAllocate
 5552 0020 0346     		mov	r3, r0
 5553 0022 1A46     		mov	r2, r3
 5554 0024 104B     		ldr	r3, .L207+4
 5555 0026 1A70     		strb	r2, [r3]
1544:main.c        **** 
1545:main.c        ****     /* Configure this Td as follows:
1546:main.c        ****     *  - Increment the source address, but not the destination address   
1547:main.c        ****     */
1548:main.c        ****     CyDmaTdSetConfiguration(txTD, myBufferSize, CY_DMA_DISABLE_TD, TD_INC_SRC_ADR);
 5556              		.loc 1 1548 0
 5557 0028 0F4B     		ldr	r3, .L207+4
 5558 002a 1B78     		ldrb	r3, [r3]
 5559 002c D8B2     		uxtb	r0, r3
 5560 002e 0123     		movs	r3, #1
 5561 0030 FE22     		movs	r2, #254
 5562 0032 2021     		movs	r1, #32
 5563 0034 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1549:main.c        **** 
1550:main.c        ****     /* From the memory to the SPIM */
1551:main.c        ****     CyDmaTdSetAddress(txTD, LO16((uint32)myArray), LO16((uint32) SPIM_1_TXDATA_PTR));
 5564              		.loc 1 1551 0
 5565 0038 0B4B     		ldr	r3, .L207+4
 5566 003a 1B78     		ldrb	r3, [r3]
 5567 003c DBB2     		uxtb	r3, r3
 5568 003e 0B4A     		ldr	r2, .L207+8
 5569 0040 91B2     		uxth	r1, r2
 5570 0042 46F24742 		movw	r2, #25671
 5571 0046 1846     		mov	r0, r3
 5572 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
1552:main.c        ****     
1553:main.c        ****     /* Associate the TD with the channel */
1554:main.c        ****     CyDmaChSetInitialTd(txChannel, txTD); 
 5573              		.loc 1 1554 0
 5574 004c 054B     		ldr	r3, .L207
 5575 004e 1B78     		ldrb	r3, [r3]
 5576 0050 DAB2     		uxtb	r2, r3
 5577 0052 054B     		ldr	r3, .L207+4
 5578 0054 1B78     		ldrb	r3, [r3]
 5579 0056 DBB2     		uxtb	r3, r3
 5580 0058 1946     		mov	r1, r3
 5581 005a 1046     		mov	r0, r2
 5582 005c FFF7FEFF 		bl	CyDmaChSetInitialTd
1555:main.c        ****    
1556:main.c        **** } 
 5583              		.loc 1 1556 0
 5584 0060 00BF     		nop
 5585 0062 80BD     		pop	{r7, pc}
 5586              	.L208:
 5587              		.align	2
 5588              	.L207:
 5589 0064 00000000 		.word	txChannel
 5590 0068 00000000 		.word	txTD
 5591 006c 00000000 		.word	myArray
 5592              		.cfi_endproc
 5593              	.LFE76:
 5594              		.size	DmaTxConfiguration, .-DmaTxConfiguration
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 128


 5595              		.section	.text.DmaRxConfiguration,"ax",%progbits
 5596              		.align	2
 5597              		.global	DmaRxConfiguration
 5598              		.thumb
 5599              		.thumb_func
 5600              		.type	DmaRxConfiguration, %function
 5601              	DmaRxConfiguration:
 5602              	.LFB77:
1557:main.c        **** 
1558:main.c        **** void DmaRxConfiguration()
1559:main.c        **** { 
 5603              		.loc 1 1559 0
 5604              		.cfi_startproc
 5605              		@ args = 0, pretend = 0, frame = 0
 5606              		@ frame_needed = 1, uses_anonymous_args = 0
 5607 0000 80B5     		push	{r7, lr}
 5608              		.cfi_def_cfa_offset 8
 5609              		.cfi_offset 7, -8
 5610              		.cfi_offset 14, -4
 5611 0002 00AF     		add	r7, sp, #0
 5612              		.cfi_def_cfa_register 7
1560:main.c        ****     //pluck dma
1561:main.c        ****     rx1Channel = DMA_1_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 5613              		.loc 1 1561 0
 5614 0004 41F6FF73 		movw	r3, #8191
 5615 0008 4FF48042 		mov	r2, #16384
 5616 000c 0121     		movs	r1, #1
 5617 000e 0120     		movs	r0, #1
 5618 0010 FFF7FEFF 		bl	DMA_1_DmaInitialize
 5619 0014 0346     		mov	r3, r0
 5620 0016 1A46     		mov	r2, r3
 5621 0018 4A4B     		ldr	r3, .L210
 5622 001a 1A70     		strb	r2, [r3]
1562:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1563:main.c        ****     rx1TD[0] = CyDmaTdAllocate();
 5623              		.loc 1 1563 0
 5624 001c FFF7FEFF 		bl	CyDmaTdAllocate
 5625 0020 0346     		mov	r3, r0
 5626 0022 1A46     		mov	r2, r3
 5627 0024 484B     		ldr	r3, .L210+4
 5628 0026 1A70     		strb	r2, [r3]
1564:main.c        ****     rx1TD[1] = CyDmaTdAllocate();
 5629              		.loc 1 1564 0
 5630 0028 FFF7FEFF 		bl	CyDmaTdAllocate
 5631 002c 0346     		mov	r3, r0
 5632 002e 1A46     		mov	r2, r3
 5633 0030 454B     		ldr	r3, .L210+4
 5634 0032 5A70     		strb	r2, [r3, #1]
1565:main.c        ****     CyDmaTdSetConfiguration(rx1TD[0], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD , TD_INC_DST_ADR | DMA_1__T
 5635              		.loc 1 1565 0
 5636 0034 444B     		ldr	r3, .L210+4
 5637 0036 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5638 0038 0223     		movs	r3, #2
 5639 003a FE22     		movs	r2, #254
 5640 003c 1A21     		movs	r1, #26
 5641 003e FFF7FEFF 		bl	CyDmaTdSetConfiguration
1566:main.c        ****     CyDmaTdSetConfiguration(rx1TD[1], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_1__TD
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 129


 5642              		.loc 1 1566 0
 5643 0042 414B     		ldr	r3, .L210+4
 5644 0044 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5645 0046 0223     		movs	r3, #2
 5646 0048 FE22     		movs	r2, #254
 5647 004a 1A21     		movs	r1, #26
 5648 004c FFF7FEFF 		bl	CyDmaTdSetConfiguration
1567:main.c        ****     CyDmaTdSetAddress(rx1TD[0], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rxBufferPluck[0]));
 5649              		.loc 1 1567 0
 5650 0050 3D4B     		ldr	r3, .L210+4
 5651 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5652 0054 3D4A     		ldr	r2, .L210+8
 5653 0056 92B2     		uxth	r2, r2
 5654 0058 46F25D41 		movw	r1, #25693
 5655 005c 1846     		mov	r0, r3
 5656 005e FFF7FEFF 		bl	CyDmaTdSetAddress
1568:main.c        ****     CyDmaTdSetAddress(rx1TD[1], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rxBufferPluck[1]));
 5657              		.loc 1 1568 0
 5658 0062 394B     		ldr	r3, .L210+4
 5659 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5660 0066 3A4A     		ldr	r2, .L210+12
 5661 0068 92B2     		uxth	r2, r2
 5662 006a 46F25D41 		movw	r1, #25693
 5663 006e 1846     		mov	r0, r3
 5664 0070 FFF7FEFF 		bl	CyDmaTdSetAddress
1569:main.c        **** 
1570:main.c        ****     //bar dma
1571:main.c        ****     rx2Channel = DMA_2_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 5665              		.loc 1 1571 0
 5666 0074 41F6FF73 		movw	r3, #8191
 5667 0078 4FF48042 		mov	r2, #16384
 5668 007c 0121     		movs	r1, #1
 5669 007e 0120     		movs	r0, #1
 5670 0080 FFF7FEFF 		bl	DMA_2_DmaInitialize
 5671 0084 0346     		mov	r3, r0
 5672 0086 1A46     		mov	r2, r3
 5673 0088 324B     		ldr	r3, .L210+16
 5674 008a 1A70     		strb	r2, [r3]
1572:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1573:main.c        ****     rx2TD[0] = CyDmaTdAllocate();
 5675              		.loc 1 1573 0
 5676 008c FFF7FEFF 		bl	CyDmaTdAllocate
 5677 0090 0346     		mov	r3, r0
 5678 0092 1A46     		mov	r2, r3
 5679 0094 304B     		ldr	r3, .L210+20
 5680 0096 1A70     		strb	r2, [r3]
1574:main.c        ****     rx2TD[1] = CyDmaTdAllocate();
 5681              		.loc 1 1574 0
 5682 0098 FFF7FEFF 		bl	CyDmaTdAllocate
 5683 009c 0346     		mov	r3, r0
 5684 009e 1A46     		mov	r2, r3
 5685 00a0 2D4B     		ldr	r3, .L210+20
 5686 00a2 5A70     		strb	r2, [r3, #1]
1575:main.c        ****     CyDmaTdSetConfiguration(rx2TD[0], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_2__TD_T
 5687              		.loc 1 1575 0
 5688 00a4 2C4B     		ldr	r3, .L210+20
 5689 00a6 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 130


 5690 00a8 0623     		movs	r3, #6
 5691 00aa FE22     		movs	r2, #254
 5692 00ac 0821     		movs	r1, #8
 5693 00ae FFF7FEFF 		bl	CyDmaTdSetConfiguration
1576:main.c        ****     CyDmaTdSetConfiguration(rx2TD[1], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_2__TD_T
 5694              		.loc 1 1576 0
 5695 00b2 294B     		ldr	r3, .L210+20
 5696 00b4 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5697 00b6 0623     		movs	r3, #6
 5698 00b8 FE22     		movs	r2, #254
 5699 00ba 0821     		movs	r1, #8
 5700 00bc FFF7FEFF 		bl	CyDmaTdSetConfiguration
1577:main.c        ****     CyDmaTdSetAddress(rx2TD[0], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBufferBar[0]));
 5701              		.loc 1 1577 0
 5702 00c0 254B     		ldr	r3, .L210+20
 5703 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5704 00c4 254A     		ldr	r2, .L210+24
 5705 00c6 92B2     		uxth	r2, r2
 5706 00c8 46F25551 		movw	r1, #25941
 5707 00cc 1846     		mov	r0, r3
 5708 00ce FFF7FEFF 		bl	CyDmaTdSetAddress
1578:main.c        ****     CyDmaTdSetAddress(rx2TD[1], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBufferBar[1]));
 5709              		.loc 1 1578 0
 5710 00d2 214B     		ldr	r3, .L210+20
 5711 00d4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5712 00d6 224A     		ldr	r2, .L210+28
 5713 00d8 92B2     		uxth	r2, r2
 5714 00da 46F25551 		movw	r1, #25941
 5715 00de 1846     		mov	r0, r3
 5716 00e0 FFF7FEFF 		bl	CyDmaTdSetAddress
1579:main.c        ****     
1580:main.c        ****         /* Init DMA, 1 byte bursts, each burst requires a request */ 
1581:main.c        ****     rx3Channel = DMA_3_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 5717              		.loc 1 1581 0
 5718 00e4 41F6FF73 		movw	r3, #8191
 5719 00e8 4FF48042 		mov	r2, #16384
 5720 00ec 0121     		movs	r1, #1
 5721 00ee 0120     		movs	r0, #1
 5722 00f0 FFF7FEFF 		bl	DMA_3_DmaInitialize
 5723 00f4 0346     		mov	r3, r0
 5724 00f6 1A46     		mov	r2, r3
 5725 00f8 1A4B     		ldr	r3, .L210+32
 5726 00fa 1A70     		strb	r2, [r3]
1582:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1583:main.c        **** 
1584:main.c        ****     rx3TD = CyDmaTdAllocate();
 5727              		.loc 1 1584 0
 5728 00fc FFF7FEFF 		bl	CyDmaTdAllocate
 5729 0100 0346     		mov	r3, r0
 5730 0102 1A46     		mov	r2, r3
 5731 0104 184B     		ldr	r3, .L210+36
 5732 0106 1A70     		strb	r2, [r3]
1585:main.c        ****     
1586:main.c        ****     /* Configure this Td as follows:
1587:main.c        ****     *  - Increment the destination address, but not the source address
1588:main.c        ****     */
1589:main.c        ****     CyDmaTdSetConfiguration(rx3TD, myBufferSize, CY_DMA_DISABLE_TD, TD_INC_DST_ADR);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 131


 5733              		.loc 1 1589 0
 5734 0108 174B     		ldr	r3, .L210+36
 5735 010a 1B78     		ldrb	r3, [r3]
 5736 010c D8B2     		uxtb	r0, r3
 5737 010e 0223     		movs	r3, #2
 5738 0110 FE22     		movs	r2, #254
 5739 0112 2021     		movs	r1, #32
 5740 0114 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1590:main.c        **** 
1591:main.c        ****     /* From the SPIM to the memory */
1592:main.c        ****     CyDmaTdSetAddress(rx3TD, LO16((uint32)SPIM_1_RXDATA_PTR), LO16((uint32)inBuffer));
 5741              		.loc 1 1592 0
 5742 0118 134B     		ldr	r3, .L210+36
 5743 011a 1B78     		ldrb	r3, [r3]
 5744 011c DBB2     		uxtb	r3, r3
 5745 011e 134A     		ldr	r2, .L210+40
 5746 0120 92B2     		uxth	r2, r2
 5747 0122 46F25741 		movw	r1, #25687
 5748 0126 1846     		mov	r0, r3
 5749 0128 FFF7FEFF 		bl	CyDmaTdSetAddress
1593:main.c        **** 
1594:main.c        ****     /* Associate the TD with the channel */
1595:main.c        ****     CyDmaChSetInitialTd(rx3Channel, rx3TD);
 5750              		.loc 1 1595 0
 5751 012c 0D4B     		ldr	r3, .L210+32
 5752 012e 1B78     		ldrb	r3, [r3]
 5753 0130 DAB2     		uxtb	r2, r3
 5754 0132 0D4B     		ldr	r3, .L210+36
 5755 0134 1B78     		ldrb	r3, [r3]
 5756 0136 DBB2     		uxtb	r3, r3
 5757 0138 1946     		mov	r1, r3
 5758 013a 1046     		mov	r0, r2
 5759 013c FFF7FEFF 		bl	CyDmaChSetInitialTd
1596:main.c        **** }
 5760              		.loc 1 1596 0
 5761 0140 00BF     		nop
 5762 0142 80BD     		pop	{r7, pc}
 5763              	.L211:
 5764              		.align	2
 5765              	.L210:
 5766 0144 00000000 		.word	rx1Channel
 5767 0148 00000000 		.word	rx1TD
 5768 014c 00000000 		.word	rxBufferPluck
 5769 0150 1A000000 		.word	rxBufferPluck+26
 5770 0154 00000000 		.word	rx2Channel
 5771 0158 00000000 		.word	rx2TD
 5772 015c 00000000 		.word	rxBufferBar
 5773 0160 08000000 		.word	rxBufferBar+8
 5774 0164 00000000 		.word	rx3Channel
 5775 0168 00000000 		.word	rx3TD
 5776 016c 00000000 		.word	inBuffer
 5777              		.cfi_endproc
 5778              	.LFE77:
 5779              		.size	DmaRxConfiguration, .-DmaRxConfiguration
 5780              		.section	.text.I2C_MasterWriteBlocking,"ax",%progbits
 5781              		.align	2
 5782              		.global	I2C_MasterWriteBlocking
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 132


 5783              		.thumb
 5784              		.thumb_func
 5785              		.type	I2C_MasterWriteBlocking, %function
 5786              	I2C_MasterWriteBlocking:
 5787              	.LFB78:
1597:main.c        **** 
1598:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode)
1599:main.c        **** {
 5788              		.loc 1 1599 0
 5789              		.cfi_startproc
 5790              		@ args = 0, pretend = 0, frame = 24
 5791              		@ frame_needed = 1, uses_anonymous_args = 0
 5792 0000 80B5     		push	{r7, lr}
 5793              		.cfi_def_cfa_offset 8
 5794              		.cfi_offset 7, -8
 5795              		.cfi_offset 14, -4
 5796 0002 86B0     		sub	sp, sp, #24
 5797              		.cfi_def_cfa_offset 32
 5798 0004 00AF     		add	r7, sp, #0
 5799              		.cfi_def_cfa_register 7
 5800 0006 0346     		mov	r3, r0
 5801 0008 FB71     		strb	r3, [r7, #7]
 5802 000a 0B46     		mov	r3, r1	@ movhi
 5803 000c BB80     		strh	r3, [r7, #4]	@ movhi
 5804 000e 1346     		mov	r3, r2
 5805 0010 BB71     		strb	r3, [r7, #6]
1600:main.c        ****     uint8 volatile status;
1601:main.c        ****     uint8_t error = 0;
 5806              		.loc 1 1601 0
 5807 0012 0023     		movs	r3, #0
 5808 0014 FB75     		strb	r3, [r7, #23]
1602:main.c        ****     uint32_t timeout = 1000;
 5809              		.loc 1 1602 0
 5810 0016 4FF47A73 		mov	r3, #1000
 5811 001a 3B61     		str	r3, [r7, #16]
1603:main.c        ****     status = I2C_1_MasterClearStatus();
 5812              		.loc 1 1603 0
 5813 001c FFF7FEFF 		bl	I2C_1_MasterClearStatus
 5814 0020 0346     		mov	r3, r0
 5815 0022 FB73     		strb	r3, [r7, #15]
1604:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 5816              		.loc 1 1604 0
 5817 0024 FB7B     		ldrb	r3, [r7, #15]
 5818 0026 DBB2     		uxtb	r3, r3
 5819 0028 5BB2     		sxtb	r3, r3
 5820 002a 002B     		cmp	r3, #0
 5821 002c 42DB     		blt	.L213
1605:main.c        ****     {
1606:main.c        ****         status = I2C_1_MasterWriteBuf(i2CAddr, (uint8 *)&I2Cbuff1, nbytes,
 5822              		.loc 1 1606 0
 5823 002e BB88     		ldrh	r3, [r7, #4]	@ movhi
 5824 0030 DAB2     		uxtb	r2, r3
 5825 0032 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5826 0034 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 5827 0036 2949     		ldr	r1, .L222
 5828 0038 FFF7FEFF 		bl	I2C_1_MasterWriteBuf
 5829 003c 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 133


 5830 003e FB73     		strb	r3, [r7, #15]
1607:main.c        ****                                      mode);
1608:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
 5831              		.loc 1 1608 0
 5832 0040 FB7B     		ldrb	r3, [r7, #15]
 5833 0042 DBB2     		uxtb	r3, r3
 5834 0044 002B     		cmp	r3, #0
 5835 0046 2FD1     		bne	.L214
 5836              	.L218:
1609:main.c        ****         {
1610:main.c        ****             /* wait for write complete and no error */
1611:main.c        ****             do
1612:main.c        ****             {
1613:main.c        ****                 status = I2C_1_MasterStatus();
 5837              		.loc 1 1613 0
 5838 0048 FFF7FEFF 		bl	I2C_1_MasterStatus
 5839 004c 0346     		mov	r3, r0
 5840 004e FB73     		strb	r3, [r7, #15]
1614:main.c        ****                 timeout--;
 5841              		.loc 1 1614 0
 5842 0050 3B69     		ldr	r3, [r7, #16]
 5843 0052 013B     		subs	r3, r3, #1
 5844 0054 3B61     		str	r3, [r7, #16]
1615:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 5845              		.loc 1 1615 0
 5846 0056 FB7B     		ldrb	r3, [r7, #15]
 5847 0058 DBB2     		uxtb	r3, r3
 5848 005a 802B     		cmp	r3, #128
 5849 005c 03D1     		bne	.L215
1616:main.c        ****                 {
1617:main.c        ****                     I2C_reset();
 5850              		.loc 1 1617 0
 5851 005e FFF7FEFF 		bl	I2C_reset
1618:main.c        ****                     error = 1;
 5852              		.loc 1 1618 0
 5853 0062 0123     		movs	r3, #1
 5854 0064 FB75     		strb	r3, [r7, #23]
 5855              	.L215:
1619:main.c        ****                 }
1620:main.c        ****                 if (timeout == 0)
 5856              		.loc 1 1620 0
 5857 0066 3B69     		ldr	r3, [r7, #16]
 5858 0068 002B     		cmp	r3, #0
 5859 006a 05D1     		bne	.L216
1621:main.c        ****                 {
1622:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 5860              		.loc 1 1622 0
 5861 006c 8023     		movs	r3, #128
 5862 006e FB73     		strb	r3, [r7, #15]
1623:main.c        ****                     I2C_reset();
 5863              		.loc 1 1623 0
 5864 0070 FFF7FEFF 		bl	I2C_reset
1624:main.c        ****                     error = 1;
 5865              		.loc 1 1624 0
 5866 0074 0123     		movs	r3, #1
 5867 0076 FB75     		strb	r3, [r7, #23]
 5868              	.L216:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 134


1625:main.c        ****                 }
1626:main.c        ****                 
1627:main.c        ****                 if (status == 0)
 5869              		.loc 1 1627 0
 5870 0078 FB7B     		ldrb	r3, [r7, #15]
 5871 007a DBB2     		uxtb	r3, r3
 5872 007c 002B     		cmp	r3, #0
 5873 007e 05D1     		bne	.L217
1628:main.c        ****                 {
1629:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 5874              		.loc 1 1629 0
 5875 0080 8023     		movs	r3, #128
 5876 0082 FB73     		strb	r3, [r7, #15]
1630:main.c        ****                     I2C_reset();
 5877              		.loc 1 1630 0
 5878 0084 FFF7FEFF 		bl	I2C_reset
1631:main.c        ****                     error = 1;
 5879              		.loc 1 1631 0
 5880 0088 0123     		movs	r3, #1
 5881 008a FB75     		strb	r3, [r7, #23]
 5882              	.L217:
1632:main.c        ****                 }
1633:main.c        ****                 
1634:main.c        ****             } while(((status & (I2C_1_MSTAT_WR_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 5883              		.loc 1 1634 0
 5884 008c FB7B     		ldrb	r3, [r7, #15]
 5885 008e DBB2     		uxtb	r3, r3
 5886 0090 03F08203 		and	r3, r3, #130
 5887 0094 002B     		cmp	r3, #0
 5888 0096 0DD1     		bne	.L213
 5889              		.loc 1 1634 0 is_stmt 0 discriminator 1
 5890 0098 FB7B     		ldrb	r3, [r7, #15]
 5891 009a DBB2     		uxtb	r3, r3
 5892 009c 002B     		cmp	r3, #0
 5893 009e 09D0     		beq	.L213
 5894              		.loc 1 1634 0 discriminator 2
 5895 00a0 3B69     		ldr	r3, [r7, #16]
 5896 00a2 002B     		cmp	r3, #0
 5897 00a4 D0D1     		bne	.L218
 5898 00a6 05E0     		b	.L213
 5899              	.L214:
1635:main.c        ****         }
1636:main.c        ****         else
1637:main.c        ****         {
1638:main.c        ****             /* translate from I2CM_MasterWriteBuf() error output to
1639:main.c        ****             *  I2CM_MasterStatus() error output */
1640:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 5900              		.loc 1 1640 0 is_stmt 1
 5901 00a8 8023     		movs	r3, #128
 5902 00aa FB73     		strb	r3, [r7, #15]
1641:main.c        ****             I2C_reset();
 5903              		.loc 1 1641 0
 5904 00ac FFF7FEFF 		bl	I2C_reset
1642:main.c        ****             error = 1;
 5905              		.loc 1 1642 0
 5906 00b0 0123     		movs	r3, #1
 5907 00b2 FB75     		strb	r3, [r7, #23]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 135


 5908              	.L213:
1643:main.c        ****         } 
1644:main.c        ****     }  
1645:main.c        ****     if ((status & I2C_1_MSTAT_ERR_ADDR_NAK) || (status & I2C_1_MSTAT_ERR_XFER))
 5909              		.loc 1 1645 0
 5910 00b4 FB7B     		ldrb	r3, [r7, #15]
 5911 00b6 DBB2     		uxtb	r3, r3
 5912 00b8 03F02003 		and	r3, r3, #32
 5913 00bc 002B     		cmp	r3, #0
 5914 00be 04D1     		bne	.L219
 5915              		.loc 1 1645 0 is_stmt 0 discriminator 1
 5916 00c0 FB7B     		ldrb	r3, [r7, #15]
 5917 00c2 DBB2     		uxtb	r3, r3
 5918 00c4 5BB2     		sxtb	r3, r3
 5919 00c6 002B     		cmp	r3, #0
 5920 00c8 03DA     		bge	.L220
 5921              	.L219:
1646:main.c        ****     {
1647:main.c        ****         //mark that i2c destination to be skipped (likely unplugged) and reset the I2C module
1648:main.c        ****         //i2c_skipped[main_counter] = 1;
1649:main.c        ****         I2C_reset();
 5922              		.loc 1 1649 0 is_stmt 1
 5923 00ca FFF7FEFF 		bl	I2C_reset
1650:main.c        ****         error = 1;
 5924              		.loc 1 1650 0
 5925 00ce 0123     		movs	r3, #1
 5926 00d0 FB75     		strb	r3, [r7, #23]
 5927              	.L220:
1651:main.c        ****     }
1652:main.c        ****     return error;
 5928              		.loc 1 1652 0
 5929 00d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1653:main.c        **** }
 5930              		.loc 1 1653 0
 5931 00d4 1846     		mov	r0, r3
 5932 00d6 1837     		adds	r7, r7, #24
 5933              		.cfi_def_cfa_offset 8
 5934 00d8 BD46     		mov	sp, r7
 5935              		.cfi_def_cfa_register 13
 5936              		@ sp needed
 5937 00da 80BD     		pop	{r7, pc}
 5938              	.L223:
 5939              		.align	2
 5940              	.L222:
 5941 00dc 00000000 		.word	I2Cbuff1
 5942              		.cfi_endproc
 5943              	.LFE78:
 5944              		.size	I2C_MasterWriteBlocking, .-I2C_MasterWriteBlocking
 5945              		.section	.text.I2C_MasterReadBlocking,"ax",%progbits
 5946              		.align	2
 5947              		.global	I2C_MasterReadBlocking
 5948              		.thumb
 5949              		.thumb_func
 5950              		.type	I2C_MasterReadBlocking, %function
 5951              	I2C_MasterReadBlocking:
 5952              	.LFB79:
1654:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 136


1655:main.c        **** uint8 I2C_MasterReadBlocking(uint8 i2CAddr, uint8 nbytes, uint8_t mode)
1656:main.c        **** {
 5953              		.loc 1 1656 0
 5954              		.cfi_startproc
 5955              		@ args = 0, pretend = 0, frame = 16
 5956              		@ frame_needed = 1, uses_anonymous_args = 0
 5957 0000 80B5     		push	{r7, lr}
 5958              		.cfi_def_cfa_offset 8
 5959              		.cfi_offset 7, -8
 5960              		.cfi_offset 14, -4
 5961 0002 84B0     		sub	sp, sp, #16
 5962              		.cfi_def_cfa_offset 24
 5963 0004 00AF     		add	r7, sp, #0
 5964              		.cfi_def_cfa_register 7
 5965 0006 0346     		mov	r3, r0
 5966 0008 FB71     		strb	r3, [r7, #7]
 5967 000a 0B46     		mov	r3, r1
 5968 000c BB71     		strb	r3, [r7, #6]
 5969 000e 1346     		mov	r3, r2
 5970 0010 7B71     		strb	r3, [r7, #5]
1657:main.c        ****     uint8 volatile status;
1658:main.c        ****     uint32_t timeout = 50000;
 5971              		.loc 1 1658 0
 5972 0012 4CF25033 		movw	r3, #50000
 5973 0016 FB60     		str	r3, [r7, #12]
1659:main.c        ****     uint8_t error = 0;
 5974              		.loc 1 1659 0
 5975 0018 0023     		movs	r3, #0
 5976 001a FB72     		strb	r3, [r7, #11]
1660:main.c        ****     status = I2C_1_MasterClearStatus();
 5977              		.loc 1 1660 0
 5978 001c FFF7FEFF 		bl	I2C_1_MasterClearStatus
 5979 0020 0346     		mov	r3, r0
 5980 0022 BB72     		strb	r3, [r7, #10]
1661:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 5981              		.loc 1 1661 0
 5982 0024 BB7A     		ldrb	r3, [r7, #10]
 5983 0026 DBB2     		uxtb	r3, r3
 5984 0028 5BB2     		sxtb	r3, r3
 5985 002a 002B     		cmp	r3, #0
 5986 002c 46DB     		blt	.L225
1662:main.c        ****     {
1663:main.c        ****         status = I2C_1_MasterReadBuf(i2CAddr,
 5987              		.loc 1 1663 0
 5988 002e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 5989 0030 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 5990 0032 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 5991 0034 2B49     		ldr	r1, .L234
 5992 0036 FFF7FEFF 		bl	I2C_1_MasterReadBuf
 5993 003a 0346     		mov	r3, r0
 5994 003c BB72     		strb	r3, [r7, #10]
1664:main.c        ****                                    (uint8 *)&(I2Cbuff2),
1665:main.c        ****                                     nbytes, mode); 
1666:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
 5995              		.loc 1 1666 0
 5996 003e BB7A     		ldrb	r3, [r7, #10]
 5997 0040 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 137


 5998 0042 002B     		cmp	r3, #0
 5999 0044 34D1     		bne	.L226
 6000              	.L230:
1667:main.c        ****         {
1668:main.c        ****             /* wait for read complete and no error */
1669:main.c        ****             do
1670:main.c        ****             {
1671:main.c        ****                 status = I2C_1_MasterStatus();
 6001              		.loc 1 1671 0
 6002 0046 FFF7FEFF 		bl	I2C_1_MasterStatus
 6003 004a 0346     		mov	r3, r0
 6004 004c BB72     		strb	r3, [r7, #10]
1672:main.c        ****                 timeout--;
 6005              		.loc 1 1672 0
 6006 004e FB68     		ldr	r3, [r7, #12]
 6007 0050 013B     		subs	r3, r3, #1
 6008 0052 FB60     		str	r3, [r7, #12]
1673:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 6009              		.loc 1 1673 0
 6010 0054 BB7A     		ldrb	r3, [r7, #10]
 6011 0056 DBB2     		uxtb	r3, r3
 6012 0058 802B     		cmp	r3, #128
 6013 005a 12D1     		bne	.L227
1674:main.c        ****                 {
1675:main.c        ****                     I2C_1_GENERATE_STOP_MANUAL;
 6014              		.loc 1 1675 0
 6015 005c 224B     		ldr	r3, .L234+4
 6016 005e 5222     		movs	r2, #82
 6017 0060 1A70     		strb	r2, [r3]
 6018 0062 224B     		ldr	r3, .L234+8
 6019 0064 FF22     		movs	r2, #255
 6020 0066 1A70     		strb	r2, [r3]
 6021 0068 214B     		ldr	r3, .L234+12
 6022 006a 0022     		movs	r2, #0
 6023 006c 1A70     		strb	r2, [r3]
 6024 006e 00BF     		nop
 6025              	.L228:
 6026              		.loc 1 1675 0 is_stmt 0 discriminator 2
 6027 0070 1E4B     		ldr	r3, .L234+8
 6028 0072 1B78     		ldrb	r3, [r3]
 6029 0074 DBB2     		uxtb	r3, r3
 6030 0076 002B     		cmp	r3, #0
 6031 0078 FAD1     		bne	.L228
1676:main.c        ****                     I2C_reset();
 6032              		.loc 1 1676 0 is_stmt 1
 6033 007a FFF7FEFF 		bl	I2C_reset
1677:main.c        ****                     error = 1;
 6034              		.loc 1 1677 0
 6035 007e 0123     		movs	r3, #1
 6036 0080 FB72     		strb	r3, [r7, #11]
 6037              	.L227:
1678:main.c        ****                 }
1679:main.c        ****                 if (timeout == 0)
 6038              		.loc 1 1679 0
 6039 0082 FB68     		ldr	r3, [r7, #12]
 6040 0084 002B     		cmp	r3, #0
 6041 0086 05D1     		bne	.L229
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 138


1680:main.c        ****                 {
1681:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 6042              		.loc 1 1681 0
 6043 0088 8023     		movs	r3, #128
 6044 008a BB72     		strb	r3, [r7, #10]
1682:main.c        ****                     I2C_reset();
 6045              		.loc 1 1682 0
 6046 008c FFF7FEFF 		bl	I2C_reset
1683:main.c        ****                     error = 1;
 6047              		.loc 1 1683 0
 6048 0090 0123     		movs	r3, #1
 6049 0092 FB72     		strb	r3, [r7, #11]
 6050              	.L229:
1684:main.c        ****                 }
1685:main.c        ****             } while(((status & (I2C_1_MSTAT_RD_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 6051              		.loc 1 1685 0
 6052 0094 BB7A     		ldrb	r3, [r7, #10]
 6053 0096 DBB2     		uxtb	r3, r3
 6054 0098 03F08103 		and	r3, r3, #129
 6055 009c 002B     		cmp	r3, #0
 6056 009e 0DD1     		bne	.L225
 6057              		.loc 1 1685 0 is_stmt 0 discriminator 1
 6058 00a0 BB7A     		ldrb	r3, [r7, #10]
 6059 00a2 DBB2     		uxtb	r3, r3
 6060 00a4 002B     		cmp	r3, #0
 6061 00a6 09D0     		beq	.L225
 6062              		.loc 1 1685 0 discriminator 2
 6063 00a8 FB68     		ldr	r3, [r7, #12]
 6064 00aa 002B     		cmp	r3, #0
 6065 00ac CBD1     		bne	.L230
 6066 00ae 05E0     		b	.L225
 6067              	.L226:
1686:main.c        ****         }
1687:main.c        ****         else
1688:main.c        ****         {
1689:main.c        ****             /* translate from I2CM_MasterReadBuf() error output to
1690:main.c        ****             *  I2CM_MasterStatus() error output */
1691:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 6068              		.loc 1 1691 0 is_stmt 1
 6069 00b0 8023     		movs	r3, #128
 6070 00b2 BB72     		strb	r3, [r7, #10]
1692:main.c        ****             I2C_reset();
 6071              		.loc 1 1692 0
 6072 00b4 FFF7FEFF 		bl	I2C_reset
1693:main.c        ****             error = 1;
 6073              		.loc 1 1693 0
 6074 00b8 0123     		movs	r3, #1
 6075 00ba FB72     		strb	r3, [r7, #11]
 6076              	.L225:
1694:main.c        ****         }
1695:main.c        ****     }
1696:main.c        ****     if ((status & I2C_1_MSTAT_ERR_ADDR_NAK) || (status & I2C_1_MSTAT_ERR_XFER))
 6077              		.loc 1 1696 0
 6078 00bc BB7A     		ldrb	r3, [r7, #10]
 6079 00be DBB2     		uxtb	r3, r3
 6080 00c0 03F02003 		and	r3, r3, #32
 6081 00c4 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 139


 6082 00c6 04D1     		bne	.L231
 6083              		.loc 1 1696 0 is_stmt 0 discriminator 1
 6084 00c8 BB7A     		ldrb	r3, [r7, #10]
 6085 00ca DBB2     		uxtb	r3, r3
 6086 00cc 5BB2     		sxtb	r3, r3
 6087 00ce 002B     		cmp	r3, #0
 6088 00d0 03DA     		bge	.L232
 6089              	.L231:
1697:main.c        ****     {
1698:main.c        ****         //mark that i2c destination to be skipped (likely unplugged) and reset the I2C module
1699:main.c        ****         //i2c_skipped[main_counter] = 1;
1700:main.c        ****         I2C_reset();
 6090              		.loc 1 1700 0 is_stmt 1
 6091 00d2 FFF7FEFF 		bl	I2C_reset
1701:main.c        ****         error = 1;
 6092              		.loc 1 1701 0
 6093 00d6 0123     		movs	r3, #1
 6094 00d8 FB72     		strb	r3, [r7, #11]
 6095              	.L232:
1702:main.c        ****     }
1703:main.c        ****     return error;
 6096              		.loc 1 1703 0
 6097 00da FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1704:main.c        **** }
 6098              		.loc 1 1704 0
 6099 00dc 1846     		mov	r0, r3
 6100 00de 1037     		adds	r7, r7, #16
 6101              		.cfi_def_cfa_offset 8
 6102 00e0 BD46     		mov	sp, r7
 6103              		.cfi_def_cfa_register 13
 6104              		@ sp needed
 6105 00e2 80BD     		pop	{r7, pc}
 6106              	.L235:
 6107              		.align	2
 6108              	.L234:
 6109 00e4 00000000 		.word	I2Cbuff2
 6110 00e8 7B650040 		.word	1073767803
 6111 00ec 14640040 		.word	1073767444
 6112 00f0 54640040 		.word	1073767508
 6113              		.cfi_endproc
 6114              	.LFE79:
 6115              		.size	I2C_MasterReadBlocking, .-I2C_MasterReadBlocking
 6116              		.section	.text.I2C_reset,"ax",%progbits
 6117              		.align	2
 6118              		.global	I2C_reset
 6119              		.thumb
 6120              		.thumb_func
 6121              		.type	I2C_reset, %function
 6122              	I2C_reset:
 6123              	.LFB80:
1705:main.c        **** 
1706:main.c        **** void I2C_reset(void)
1707:main.c        **** {
 6124              		.loc 1 1707 0
 6125              		.cfi_startproc
 6126              		@ args = 0, pretend = 0, frame = 0
 6127              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 140


 6128 0000 80B5     		push	{r7, lr}
 6129              		.cfi_def_cfa_offset 8
 6130              		.cfi_offset 7, -8
 6131              		.cfi_offset 14, -4
 6132 0002 00AF     		add	r7, sp, #0
 6133              		.cfi_def_cfa_register 7
1708:main.c        ****   I2C_1_Stop();
 6134              		.loc 1 1708 0
 6135 0004 FFF7FEFF 		bl	I2C_1_Stop
1709:main.c        **** 
1710:main.c        ****   /* Disable/clear everything, then reinitialize. */
1711:main.c        **** 
1712:main.c        ****   I2C_1_CFG_REG = 0x00;  // NECESSARY to get MCSR to reset and clear BUS_BUSY bit.
 6136              		.loc 1 1712 0
 6137 0008 044B     		ldr	r3, .L237
 6138 000a 0022     		movs	r2, #0
 6139 000c 1A70     		strb	r2, [r3]
1713:main.c        **** 
1714:main.c        ****   //I2C_1_XCFG_REG = 0x00;  // not sure if necessary.
1715:main.c        **** 
1716:main.c        ****   I2C_1_initVar = 0;  // MUST BE SET TO ZERO to allow I2C_1_Start() to call I2C_1_Init()
 6140              		.loc 1 1716 0
 6141 000e 044B     		ldr	r3, .L237+4
 6142 0010 0022     		movs	r2, #0
 6143 0012 1A70     		strb	r2, [r3]
1717:main.c        **** 
1718:main.c        ****   I2C_1_Start();
 6144              		.loc 1 1718 0
 6145 0014 FFF7FEFF 		bl	I2C_1_Start
1719:main.c        **** }
 6146              		.loc 1 1719 0
 6147 0018 00BF     		nop
 6148 001a 80BD     		pop	{r7, pc}
 6149              	.L238:
 6150              		.align	2
 6151              	.L237:
 6152 001c 7B650040 		.word	1073767803
 6153 0020 00000000 		.word	I2C_1_initVar
 6154              		.cfi_endproc
 6155              	.LFE80:
 6156              		.size	I2C_reset, .-I2C_reset
 6157              		.section	.text.displayCurrentPresetNameAndCopedent,"ax",%progbits
 6158              		.align	2
 6159              		.global	displayCurrentPresetNameAndCopedent
 6160              		.thumb
 6161              		.thumb_func
 6162              		.type	displayCurrentPresetNameAndCopedent, %function
 6163              	displayCurrentPresetNameAndCopedent:
 6164              	.LFB81:
1720:main.c        **** 
1721:main.c        **** void displayCurrentPresetNameAndCopedent()
1722:main.c        **** {
 6165              		.loc 1 1722 0
 6166              		.cfi_startproc
 6167              		@ args = 0, pretend = 0, frame = 8
 6168              		@ frame_needed = 1, uses_anonymous_args = 0
 6169 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 141


 6170              		.cfi_def_cfa_offset 12
 6171              		.cfi_offset 4, -12
 6172              		.cfi_offset 7, -8
 6173              		.cfi_offset 14, -4
 6174 0002 83B0     		sub	sp, sp, #12
 6175              		.cfi_def_cfa_offset 24
 6176 0004 00AF     		add	r7, sp, #0
 6177              		.cfi_def_cfa_register 7
1723:main.c        ****     int macroCheck = 0;
 6178              		.loc 1 1723 0
 6179 0006 0023     		movs	r3, #0
 6180 0008 7B60     		str	r3, [r7, #4]
 6181              	.LBB40:
1724:main.c        ****     for (int i = 0; i < 8; i++)
 6182              		.loc 1 1724 0
 6183 000a 0023     		movs	r3, #0
 6184 000c 3B60     		str	r3, [r7]
 6185 000e 17E0     		b	.L240
 6186              	.L242:
1725:main.c        ****     {
1726:main.c        ****         if (macroNamesArray[patchNum][i][0] == 255)
 6187              		.loc 1 1726 0
 6188 0010 374B     		ldr	r3, .L245
 6189 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6190 0014 1846     		mov	r0, r3
 6191 0016 3749     		ldr	r1, .L245+4
 6192 0018 3B68     		ldr	r3, [r7]
 6193 001a 1A46     		mov	r2, r3
 6194 001c D200     		lsls	r2, r2, #3
 6195 001e D21A     		subs	r2, r2, r3
 6196 0020 5300     		lsls	r3, r2, #1
 6197 0022 1A46     		mov	r2, r3
 6198 0024 0346     		mov	r3, r0
 6199 0026 DB00     		lsls	r3, r3, #3
 6200 0028 1B1A     		subs	r3, r3, r0
 6201 002a 1B01     		lsls	r3, r3, #4
 6202 002c 1344     		add	r3, r3, r2
 6203 002e 0B44     		add	r3, r3, r1
 6204 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6205 0032 FF2B     		cmp	r3, #255
 6206 0034 01D1     		bne	.L241
1727:main.c        ****         {
1728:main.c        ****             macroCheck = 1;
 6207              		.loc 1 1728 0
 6208 0036 0123     		movs	r3, #1
 6209 0038 7B60     		str	r3, [r7, #4]
 6210              	.L241:
1724:main.c        ****     {
 6211              		.loc 1 1724 0 discriminator 2
 6212 003a 3B68     		ldr	r3, [r7]
 6213 003c 0133     		adds	r3, r3, #1
 6214 003e 3B60     		str	r3, [r7]
 6215              	.L240:
1724:main.c        ****     {
 6216              		.loc 1 1724 0 is_stmt 0 discriminator 1
 6217 0040 3B68     		ldr	r3, [r7]
 6218 0042 072B     		cmp	r3, #7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 142


 6219 0044 E4DD     		ble	.L242
 6220              	.LBE40:
1729:main.c        ****         }  
1730:main.c        ****     }
1731:main.c        ****     if (macroCheck == 0) //don't display if the name data still hasn't been retrieved by the SPI bu
 6221              		.loc 1 1731 0 is_stmt 1
 6222 0046 7B68     		ldr	r3, [r7, #4]
 6223 0048 002B     		cmp	r3, #0
 6224 004a 4DD1     		bne	.L244
1732:main.c        ****     {
1733:main.c        ****         OLEDclear(128, 64);
 6225              		.loc 1 1733 0
 6226 004c 4021     		movs	r1, #64
 6227 004e 8020     		movs	r0, #128
 6228 0050 FFF7FEFF 		bl	OLEDclear
1734:main.c        ****         
1735:main.c        ****         myGFX_setFont(0);
 6229              		.loc 1 1735 0
 6230 0054 0020     		movs	r0, #0
 6231 0056 FFF7FEFF 		bl	myGFX_setFont
1736:main.c        ****         OLEDwriteInt(patchNum , 2, 0,FirstLine);
 6232              		.loc 1 1736 0
 6233 005a 254B     		ldr	r3, .L245
 6234 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6235 005e 1846     		mov	r0, r3
 6236 0060 0023     		movs	r3, #0
 6237 0062 0022     		movs	r2, #0
 6238 0064 0221     		movs	r1, #2
 6239 0066 FFF7FEFF 		bl	OLEDwriteInt
1737:main.c        ****         //OLEDwriteString(" ", 1, OLEDgetCursor(), FirstLine);
1738:main.c        ****         OLEDwriteString((char *)&presetNamesArray[patchNum][0], NAME_CLIPPED_LENGTH, 0, SecondLine)
 6240              		.loc 1 1738 0
 6241 006a 214B     		ldr	r3, .L245
 6242 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6243 006e 1A46     		mov	r2, r3
 6244 0070 1346     		mov	r3, r2
 6245 0072 DB00     		lsls	r3, r3, #3
 6246 0074 9B1A     		subs	r3, r3, r2
 6247 0076 5B00     		lsls	r3, r3, #1
 6248 0078 1F4A     		ldr	r2, .L245+8
 6249 007a 9818     		adds	r0, r3, r2
 6250 007c 0123     		movs	r3, #1
 6251 007e 0022     		movs	r2, #0
 6252 0080 0C21     		movs	r1, #12
 6253 0082 FFF7FEFF 		bl	OLEDwriteString
1739:main.c        ****         OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 6254              		.loc 1 1739 0
 6255 0086 1D4B     		ldr	r3, .L245+12
 6256 0088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6257 008a 1846     		mov	r0, r3
 6258 008c 0323     		movs	r3, #3
 6259 008e 0022     		movs	r2, #0
 6260 0090 0221     		movs	r1, #2
 6261 0092 FFF7FEFF 		bl	OLEDwriteInt
1740:main.c        ****         OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 6262              		.loc 1 1740 0
 6263 0096 FFF7FEFF 		bl	OLEDgetCursor
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 143


 6264 009a 0246     		mov	r2, r0
 6265 009c 0323     		movs	r3, #3
 6266 009e 0121     		movs	r1, #1
 6267 00a0 1748     		ldr	r0, .L245+16
 6268 00a2 FFF7FEFF 		bl	OLEDwriteString
1741:main.c        ****         OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], COPEDENT_NAME_CLIPPED_LENG
 6269              		.loc 1 1741 0
 6270 00a6 154B     		ldr	r3, .L245+12
 6271 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6272 00aa 1A46     		mov	r2, r3
 6273 00ac 1346     		mov	r3, r2
 6274 00ae DB00     		lsls	r3, r3, #3
 6275 00b0 9B1A     		subs	r3, r3, r2
 6276 00b2 5B00     		lsls	r3, r3, #1
 6277 00b4 134A     		ldr	r2, .L245+20
 6278 00b6 9C18     		adds	r4, r3, r2
 6279 00b8 FFF7FEFF 		bl	OLEDgetCursor
 6280 00bc 0246     		mov	r2, r0
 6281 00be 0323     		movs	r3, #3
 6282 00c0 0921     		movs	r1, #9
 6283 00c2 2046     		mov	r0, r4
 6284 00c4 FFF7FEFF 		bl	OLEDwriteString
1742:main.c        ****         mainOLEDWaitingToSend = 1;
 6285              		.loc 1 1742 0
 6286 00c8 0F4B     		ldr	r3, .L245+24
 6287 00ca 0122     		movs	r2, #1
 6288 00cc 1A60     		str	r2, [r3]
1743:main.c        ****         presetAlreadyDisplayed[patchNum] = 1;
 6289              		.loc 1 1743 0
 6290 00ce 084B     		ldr	r3, .L245
 6291 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6292 00d2 1946     		mov	r1, r3
 6293 00d4 0D4B     		ldr	r3, .L245+28
 6294 00d6 0122     		movs	r2, #1
 6295 00d8 43F82120 		str	r2, [r3, r1, lsl #2]
1744:main.c        ****         //and update the macro OLED screens
1745:main.c        ****         whichMacro = 0;
 6296              		.loc 1 1745 0
 6297 00dc 0C4B     		ldr	r3, .L245+32
 6298 00de 0022     		movs	r2, #0
 6299 00e0 1A70     		strb	r2, [r3]
1746:main.c        ****         macroOLEDWaitingToSend = 1;
 6300              		.loc 1 1746 0
 6301 00e2 0C4B     		ldr	r3, .L245+36
 6302 00e4 0122     		movs	r2, #1
 6303 00e6 1A60     		str	r2, [r3]
 6304              	.L244:
1747:main.c        ****     }
1748:main.c        **** }
 6305              		.loc 1 1748 0
 6306 00e8 00BF     		nop
 6307 00ea 0C37     		adds	r7, r7, #12
 6308              		.cfi_def_cfa_offset 12
 6309 00ec BD46     		mov	sp, r7
 6310              		.cfi_def_cfa_register 13
 6311              		@ sp needed
 6312 00ee 90BD     		pop	{r4, r7, pc}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 144


 6313              	.L246:
 6314              		.align	2
 6315              	.L245:
 6316 00f0 00000000 		.word	patchNum
 6317 00f4 00000000 		.word	macroNamesArray
 6318 00f8 00000000 		.word	presetNamesArray
 6319 00fc 00000000 		.word	currentCopedent
 6320 0100 00040000 		.word	.LC0
 6321 0104 00000000 		.word	copedentNamesArray
 6322 0108 00000000 		.word	mainOLEDWaitingToSend
 6323 010c 00000000 		.word	presetAlreadyDisplayed
 6324 0110 00000000 		.word	whichMacro
 6325 0114 00000000 		.word	macroOLEDWaitingToSend
 6326              		.cfi_endproc
 6327              	.LFE81:
 6328              		.size	displayCurrentPresetNameAndCopedent, .-displayCurrentPresetNameAndCopedent
 6329              		.section	.text.checkUSB_Vbus,"ax",%progbits
 6330              		.align	2
 6331              		.global	checkUSB_Vbus
 6332              		.thumb
 6333              		.thumb_func
 6334              		.type	checkUSB_Vbus, %function
 6335              	checkUSB_Vbus:
 6336              	.LFB82:
1749:main.c        ****     
1750:main.c        **** void checkUSB_Vbus(void)
1751:main.c        **** {
 6337              		.loc 1 1751 0
 6338              		.cfi_startproc
 6339              		@ args = 0, pretend = 0, frame = 0
 6340              		@ frame_needed = 1, uses_anonymous_args = 0
 6341 0000 80B5     		push	{r7, lr}
 6342              		.cfi_def_cfa_offset 8
 6343              		.cfi_offset 7, -8
 6344              		.cfi_offset 14, -4
 6345 0002 00AF     		add	r7, sp, #0
 6346              		.cfi_def_cfa_register 7
1752:main.c        ****    if (USB_VBusPresent() == 0)
 6347              		.loc 1 1752 0
 6348 0004 FFF7FEFF 		bl	USB_VBusPresent
 6349 0008 0346     		mov	r3, r0
 6350 000a 002B     		cmp	r3, #0
 6351 000c 05D1     		bne	.L248
1753:main.c        ****    {
1754:main.c        ****        USB_Stop();
 6352              		.loc 1 1754 0
 6353 000e FFF7FEFF 		bl	USB_Stop
1755:main.c        ****        USB_active = 0; 
 6354              		.loc 1 1755 0
 6355 0012 0E4B     		ldr	r3, .L251
 6356 0014 0022     		movs	r2, #0
 6357 0016 1A70     		strb	r2, [r3]
 6358 0018 13E0     		b	.L249
 6359              	.L248:
1756:main.c        ****    }
1757:main.c        ****    else if (USB_active == 0 )
 6360              		.loc 1 1757 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 145


 6361 001a 0C4B     		ldr	r3, .L251
 6362 001c 1B78     		ldrb	r3, [r3]
 6363 001e DBB2     		uxtb	r3, r3
 6364 0020 002B     		cmp	r3, #0
 6365 0022 0ED1     		bne	.L249
1758:main.c        ****    {
1759:main.c        ****        USB_Start(0u, USB_3V_OPERATION ); 
 6366              		.loc 1 1759 0
 6367 0024 0021     		movs	r1, #0
 6368 0026 0020     		movs	r0, #0
 6369 0028 FFF7FEFF 		bl	USB_Start
1760:main.c        ****         while (0u == USB_GetConfiguration());
 6370              		.loc 1 1760 0
 6371 002c 00BF     		nop
 6372              	.L250:
 6373              		.loc 1 1760 0 is_stmt 0 discriminator 1
 6374 002e FFF7FEFF 		bl	USB_GetConfiguration
 6375 0032 0346     		mov	r3, r0
 6376 0034 002B     		cmp	r3, #0
 6377 0036 FAD0     		beq	.L250
1761:main.c        ****         USB_MIDI_EP_Init();
 6378              		.loc 1 1761 0 is_stmt 1
 6379 0038 FFF7FEFF 		bl	USB_MIDI_Init
1762:main.c        ****        USB_active = 1;
 6380              		.loc 1 1762 0
 6381 003c 034B     		ldr	r3, .L251
 6382 003e 0122     		movs	r2, #1
 6383 0040 1A70     		strb	r2, [r3]
 6384              	.L249:
1763:main.c        ****    }
1764:main.c        ****    USB_check_flag = 0;
 6385              		.loc 1 1764 0
 6386 0042 034B     		ldr	r3, .L251+4
 6387 0044 0022     		movs	r2, #0
 6388 0046 1A70     		strb	r2, [r3]
1765:main.c        **** }
 6389              		.loc 1 1765 0
 6390 0048 00BF     		nop
 6391 004a 80BD     		pop	{r7, pc}
 6392              	.L252:
 6393              		.align	2
 6394              	.L251:
 6395 004c 00000000 		.word	USB_active
 6396 0050 00000000 		.word	USB_check_flag
 6397              		.cfi_endproc
 6398              	.LFE82:
 6399              		.size	checkUSB_Vbus, .-checkUSB_Vbus
 6400              		.section	.text.USB_service,"ax",%progbits
 6401              		.align	2
 6402              		.global	USB_service
 6403              		.thumb
 6404              		.thumb_func
 6405              		.type	USB_service, %function
 6406              	USB_service:
 6407              	.LFB83:
1766:main.c        **** 
1767:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 146


1768:main.c        **** 
1769:main.c        **** void USB_service(void)
1770:main.c        **** {
 6408              		.loc 1 1770 0
 6409              		.cfi_startproc
 6410              		@ args = 0, pretend = 0, frame = 0
 6411              		@ frame_needed = 1, uses_anonymous_args = 0
 6412 0000 80B5     		push	{r7, lr}
 6413              		.cfi_def_cfa_offset 8
 6414              		.cfi_offset 7, -8
 6415              		.cfi_offset 14, -4
 6416 0002 00AF     		add	r7, sp, #0
 6417              		.cfi_def_cfa_register 7
1771:main.c        ****     if(USB_IsConfigurationChanged() != 0u)
 6418              		.loc 1 1771 0
 6419 0004 FFF7FEFF 		bl	USB_IsConfigurationChanged
 6420 0008 0346     		mov	r3, r0
 6421 000a 002B     		cmp	r3, #0
 6422 000c 10D0     		beq	.L254
1772:main.c        ****     {
1773:main.c        ****         if(USB_GetConfiguration() != 0u)   
 6423              		.loc 1 1773 0
 6424 000e FFF7FEFF 		bl	USB_GetConfiguration
 6425 0012 0346     		mov	r3, r0
 6426 0014 002B     		cmp	r3, #0
 6427 0016 0BD0     		beq	.L254
1774:main.c        ****         {
1775:main.c        ****            // Sleep_isr_StartEx(SleepIsr_function);
1776:main.c        ****             
1777:main.c        ****             //SleepTimer_Start();
1778:main.c        ****         	
1779:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 6428              		.loc 1 1779 0
 6429 0018 244B     		ldr	r3, .L260
 6430 001a 1B78     		ldrb	r3, [r3]
 6431 001c DBB2     		uxtb	r3, r3
 6432 001e 002B     		cmp	r3, #0
 6433 0020 06D0     		beq	.L254
 6434              		.loc 1 1779 0 is_stmt 0 discriminator 1
 6435 0022 FFF7FEFF 		bl	USB_VBusPresent
 6436 0026 0346     		mov	r3, r0
 6437 0028 002B     		cmp	r3, #0
 6438 002a 01D0     		beq	.L254
1780:main.c        ****             {
1781:main.c        ****                 USB_MIDI_EP_Init();
 6439              		.loc 1 1781 0 is_stmt 1
 6440 002c FFF7FEFF 		bl	USB_MIDI_Init
 6441              	.L254:
1782:main.c        ****             }
1783:main.c        ****         }
1784:main.c        ****         else
1785:main.c        ****         {
1786:main.c        ****             //SleepTimer_Stop();
1787:main.c        ****         }    
1788:main.c        ****     }        
1789:main.c        ****     
1790:main.c        ****     if(USB_GetConfiguration() != 0u)    
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 147


 6442              		.loc 1 1790 0
 6443 0030 FFF7FEFF 		bl	USB_GetConfiguration
 6444 0034 0346     		mov	r3, r0
 6445 0036 002B     		cmp	r3, #0
 6446 0038 35D0     		beq	.L259
1791:main.c        ****     {
1792:main.c        **** 
1793:main.c        ****          /* Reinitialize after SET_CONFIGURATION or SET_INTERFACE Requests */
1794:main.c        ****         if(USB_IsConfigurationChanged() != 0x00)
 6447              		.loc 1 1794 0
 6448 003a FFF7FEFF 		bl	USB_IsConfigurationChanged
 6449 003e 0346     		mov	r3, r0
 6450 0040 002B     		cmp	r3, #0
 6451 0042 18D0     		beq	.L257
1795:main.c        ****         {
1796:main.c        ****             USB_LoadInEP(USB_midi_in_ep, USB_midiInBuffer,(uint16) USB_midiInPointer);
 6452              		.loc 1 1796 0
 6453 0044 1A4B     		ldr	r3, .L260+4
 6454 0046 1B78     		ldrb	r3, [r3]
 6455 0048 D8B2     		uxtb	r0, r3
 6456 004a 1A4B     		ldr	r3, .L260+8
 6457 004c 1B78     		ldrb	r3, [r3]
 6458 004e DBB2     		uxtb	r3, r3
 6459 0050 9BB2     		uxth	r3, r3
 6460 0052 1A46     		mov	r2, r3
 6461 0054 1849     		ldr	r1, .L260+12
 6462 0056 FFF7FEFF 		bl	USB_LoadInEP
1797:main.c        ****             //USB_LoadInEP(USB_midi_in_ep, USB_midiInBuffer, 64);
1798:main.c        ****             USB_ReadOutEP(USB_midi_out_ep,USB_midiOutBuffer, 64);
 6463              		.loc 1 1798 0
 6464 005a 184B     		ldr	r3, .L260+16
 6465 005c 1B78     		ldrb	r3, [r3]
 6466 005e DBB2     		uxtb	r3, r3
 6467 0060 4022     		movs	r2, #64
 6468 0062 1749     		ldr	r1, .L260+20
 6469 0064 1846     		mov	r0, r3
 6470 0066 FFF7FEFF 		bl	USB_ReadOutEP
1799:main.c        ****                                              /* configuring the DMAs for the first time only, the d
1800:main.c        ****                                              in the EP buffer is Transferred by DMA to the buffer a
1801:main.c        ****             USB_EnableOutEP(USB_midi_out_ep);       /* Note 3.*/
 6471              		.loc 1 1801 0
 6472 006a 144B     		ldr	r3, .L260+16
 6473 006c 1B78     		ldrb	r3, [r3]
 6474 006e DBB2     		uxtb	r3, r3
 6475 0070 1846     		mov	r0, r3
 6476 0072 FFF7FEFF 		bl	USB_EnableOutEP
 6477              	.L257:
1802:main.c        ****         }
1803:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 6478              		.loc 1 1803 0
 6479 0076 0D4B     		ldr	r3, .L260
 6480 0078 1B78     		ldrb	r3, [r3]
 6481 007a DBB2     		uxtb	r3, r3
 6482 007c 002B     		cmp	r3, #0
 6483 007e 06D0     		beq	.L258
 6484              		.loc 1 1803 0 is_stmt 0 discriminator 1
 6485 0080 FFF7FEFF 		bl	USB_VBusPresent
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 148


 6486 0084 0346     		mov	r3, r0
 6487 0086 002B     		cmp	r3, #0
 6488 0088 01D0     		beq	.L258
1804:main.c        ****         {
1805:main.c        ****             USB_MIDI_IN_Service();
 6489              		.loc 1 1805 0 is_stmt 1
 6490 008a FFF7FEFF 		bl	USB_MIDI_IN_Service
 6491              	.L258:
1806:main.c        ****         }
1807:main.c        **** 
1808:main.c        **** 
1809:main.c        **** 
1810:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 6492              		.loc 1 1810 0
 6493 008e 074B     		ldr	r3, .L260
 6494 0090 1B78     		ldrb	r3, [r3]
 6495 0092 DBB2     		uxtb	r3, r3
 6496 0094 002B     		cmp	r3, #0
 6497 0096 06D0     		beq	.L259
 6498              		.loc 1 1810 0 is_stmt 0 discriminator 1
 6499 0098 FFF7FEFF 		bl	USB_VBusPresent
 6500 009c 0346     		mov	r3, r0
 6501 009e 002B     		cmp	r3, #0
 6502 00a0 01D0     		beq	.L259
1811:main.c        ****         {
1812:main.c        ****             USB_MIDI_OUT_Service();
 6503              		.loc 1 1812 0 is_stmt 1
 6504 00a2 FFF7FEFF 		bl	USB_MIDI_OUT_Service
 6505              	.L259:
1813:main.c        ****         }
1814:main.c        ****     }
1815:main.c        ****         
1816:main.c        **** }
 6506              		.loc 1 1816 0
 6507 00a6 00BF     		nop
 6508 00a8 80BD     		pop	{r7, pc}
 6509              	.L261:
 6510 00aa 00BF     		.align	2
 6511              	.L260:
 6512 00ac 00000000 		.word	USB_active
 6513 00b0 00000000 		.word	USB_midi_in_ep
 6514 00b4 00000000 		.word	USB_midiInPointer
 6515 00b8 00000000 		.word	USB_midiInBuffer
 6516 00bc 00000000 		.word	USB_midi_out_ep
 6517 00c0 00000000 		.word	USB_midiOutBuffer
 6518              		.cfi_endproc
 6519              	.LFE83:
 6520              		.size	USB_service, .-USB_service
 6521              		.section	.text.log2f_approx,"ax",%progbits
 6522              		.align	2
 6523              		.global	log2f_approx
 6524              		.thumb
 6525              		.thumb_func
 6526              		.type	log2f_approx, %function
 6527              	log2f_approx:
 6528              	.LFB84:
1817:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 149


1818:main.c        **** // This is a fast approximation to log2()
1819:main.c        **** // Y = C[0]*F*F*F + C[1]*F*F + C[2]*F + C[3] + E;
1820:main.c        **** float log2f_approx(float X) {
 6529              		.loc 1 1820 0
 6530              		.cfi_startproc
 6531              		@ args = 0, pretend = 0, frame = 24
 6532              		@ frame_needed = 1, uses_anonymous_args = 0
 6533 0000 80B5     		push	{r7, lr}
 6534              		.cfi_def_cfa_offset 8
 6535              		.cfi_offset 7, -8
 6536              		.cfi_offset 14, -4
 6537 0002 86B0     		sub	sp, sp, #24
 6538              		.cfi_def_cfa_offset 32
 6539 0004 00AF     		add	r7, sp, #0
 6540              		.cfi_def_cfa_register 7
 6541 0006 7860     		str	r0, [r7, #4]	@ float
1821:main.c        ****   float Y, F;
1822:main.c        ****   int E;
1823:main.c        ****   F = frexpf(fabsf(X), &E);
 6542              		.loc 1 1823 0
 6543 0008 7B68     		ldr	r3, [r7, #4]
 6544 000a 23F00043 		bic	r3, r3, #-2147483648
 6545 000e 07F10C02 		add	r2, r7, #12
 6546 0012 1146     		mov	r1, r2
 6547 0014 1846     		mov	r0, r3
 6548 0016 FFF7FEFF 		bl	frexpf
 6549 001a 7861     		str	r0, [r7, #20]	@ float
1824:main.c        ****   Y = 1.23149591368684f;
 6550              		.loc 1 1824 0
 6551 001c 1A4B     		ldr	r3, .L264
 6552 001e 3B61     		str	r3, [r7, #16]	@ float
1825:main.c        ****   Y *= F;
 6553              		.loc 1 1825 0
 6554 0020 7969     		ldr	r1, [r7, #20]	@ float
 6555 0022 3869     		ldr	r0, [r7, #16]	@ float
 6556 0024 FFF7FEFF 		bl	__aeabi_fmul
 6557 0028 0346     		mov	r3, r0
 6558 002a 3B61     		str	r3, [r7, #16]	@ float
1826:main.c        ****   Y += -4.11852516267426f;
 6559              		.loc 1 1826 0
 6560 002c 1749     		ldr	r1, .L264+4
 6561 002e 3869     		ldr	r0, [r7, #16]	@ float
 6562 0030 FFF7FEFF 		bl	__aeabi_fsub
 6563 0034 0346     		mov	r3, r0
 6564 0036 3B61     		str	r3, [r7, #16]	@ float
1827:main.c        ****   Y *= F;
 6565              		.loc 1 1827 0
 6566 0038 7969     		ldr	r1, [r7, #20]	@ float
 6567 003a 3869     		ldr	r0, [r7, #16]	@ float
 6568 003c FFF7FEFF 		bl	__aeabi_fmul
 6569 0040 0346     		mov	r3, r0
 6570 0042 3B61     		str	r3, [r7, #16]	@ float
1828:main.c        ****   Y += 6.02197014179219f;
 6571              		.loc 1 1828 0
 6572 0044 1249     		ldr	r1, .L264+8
 6573 0046 3869     		ldr	r0, [r7, #16]	@ float
 6574 0048 FFF7FEFF 		bl	__aeabi_fadd
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 150


 6575 004c 0346     		mov	r3, r0
 6576 004e 3B61     		str	r3, [r7, #16]	@ float
1829:main.c        ****   Y *= F;
 6577              		.loc 1 1829 0
 6578 0050 7969     		ldr	r1, [r7, #20]	@ float
 6579 0052 3869     		ldr	r0, [r7, #16]	@ float
 6580 0054 FFF7FEFF 		bl	__aeabi_fmul
 6581 0058 0346     		mov	r3, r0
 6582 005a 3B61     		str	r3, [r7, #16]	@ float
1830:main.c        ****   Y += -3.13396450166353f;
 6583              		.loc 1 1830 0
 6584 005c 0D49     		ldr	r1, .L264+12
 6585 005e 3869     		ldr	r0, [r7, #16]	@ float
 6586 0060 FFF7FEFF 		bl	__aeabi_fsub
 6587 0064 0346     		mov	r3, r0
 6588 0066 3B61     		str	r3, [r7, #16]	@ float
1831:main.c        ****   Y += E;
 6589              		.loc 1 1831 0
 6590 0068 FB68     		ldr	r3, [r7, #12]
 6591 006a 1846     		mov	r0, r3
 6592 006c FFF7FEFF 		bl	__aeabi_i2f
 6593 0070 0346     		mov	r3, r0
 6594 0072 1946     		mov	r1, r3
 6595 0074 3869     		ldr	r0, [r7, #16]	@ float
 6596 0076 FFF7FEFF 		bl	__aeabi_fadd
 6597 007a 0346     		mov	r3, r0
 6598 007c 3B61     		str	r3, [r7, #16]	@ float
1832:main.c        ****   return(Y);
 6599              		.loc 1 1832 0
 6600 007e 3B69     		ldr	r3, [r7, #16]	@ float
1833:main.c        **** }
 6601              		.loc 1 1833 0
 6602 0080 1846     		mov	r0, r3
 6603 0082 1837     		adds	r7, r7, #24
 6604              		.cfi_def_cfa_offset 8
 6605 0084 BD46     		mov	sp, r7
 6606              		.cfi_def_cfa_register 13
 6607              		@ sp needed
 6608 0086 80BD     		pop	{r7, pc}
 6609              	.L265:
 6610              		.align	2
 6611              	.L264:
 6612 0088 A8A19D3F 		.word	1067295144
 6613 008c F5CA8340 		.word	1082378997
 6614 0090 FBB3C040 		.word	1086370811
 6615 0094 E0924840 		.word	1078498016
 6616              		.cfi_endproc
 6617              	.LFE84:
 6618              		.size	log2f_approx, .-log2f_approx
 6619              		.global	prevNotes
 6620              		.bss
 6621              		.align	2
 6622              		.type	prevNotes, %object
 6623              		.size	prevNotes, 48
 6624              	prevNotes:
 6625 00f4 00000000 		.space	48
 6625      00000000 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 151


 6625      00000000 
 6625      00000000 
 6625      00000000 
 6626              		.section	.text.noteEvent,"ax",%progbits
 6627              		.align	2
 6628              		.global	noteEvent
 6629              		.thumb
 6630              		.thumb_func
 6631              		.type	noteEvent, %function
 6632              	noteEvent:
 6633              	.LFB85:
1834:main.c        **** 
1835:main.c        **** //log10f is exactly log2(x)/log2(10.0f)
1836:main.c        **** #define log10f_fast(x)  (log2f_approx(x)*0.3010299956639812f)
1837:main.c        **** 
1838:main.c        **** int prevNotes[NUM_STRINGS] = {0,0,0,0,0,0,0,0,0,0,0,0};
1839:main.c        **** 
1840:main.c        **** void noteEvent(int string)
1841:main.c        **** {
 6634              		.loc 1 1841 0
 6635              		.cfi_startproc
 6636              		@ args = 0, pretend = 0, frame = 24
 6637              		@ frame_needed = 1, uses_anonymous_args = 0
 6638 0000 80B5     		push	{r7, lr}
 6639              		.cfi_def_cfa_offset 8
 6640              		.cfi_offset 7, -8
 6641              		.cfi_offset 14, -4
 6642 0002 86B0     		sub	sp, sp, #24
 6643              		.cfi_def_cfa_offset 32
 6644 0004 00AF     		add	r7, sp, #0
 6645              		.cfi_def_cfa_register 7
 6646 0006 7860     		str	r0, [r7, #4]
1842:main.c        ****     
1843:main.c        ****     /*
1844:main.c        ****     float tempAmp = strings[string] * 1.5259021896696421759365224689097e-5f;//divide by 65535
1845:main.c        ****     float v = 127.0f + (64.0f * log10f_fast(tempAmp));
1846:main.c        ****     int vInt  = (int) (v*4.0f);
1847:main.c        ****     if (vInt > 127)
1848:main.c        ****     {
1849:main.c        ****         vInt = 127;
1850:main.c        ****     }
1851:main.c        ****     */
1852:main.c        ****     uint16_t velocity = strings[string];
 6647              		.loc 1 1852 0
 6648 0008 2C4A     		ldr	r2, .L271
 6649 000a 7B68     		ldr	r3, [r7, #4]
 6650 000c 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 6651 0010 FB82     		strh	r3, [r7, #22]	@ movhi
1853:main.c        ****     if (velocity > 0)
 6652              		.loc 1 1853 0
 6653 0012 FB8A     		ldrh	r3, [r7, #22]
 6654 0014 002B     		cmp	r3, #0
 6655 0016 43D0     		beq	.L267
 6656              	.LBB41:
1854:main.c        ****     {
1855:main.c        ****         //velocity = (((sqrtf((float)velocity) * 0.00001525878903f) - .0239372430f) * 130.114584436
1856:main.c        ****         float tempVel = (float)velocity;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 152


 6657              		.loc 1 1856 0
 6658 0018 FB8A     		ldrh	r3, [r7, #22]
 6659 001a 1846     		mov	r0, r3
 6660 001c FFF7FEFF 		bl	__aeabi_ui2f
 6661 0020 0346     		mov	r3, r0
 6662 0022 3B61     		str	r3, [r7, #16]	@ float
1857:main.c        ****         tempVel = tempVel * 0.00001525878903f;
 6663              		.loc 1 1857 0
 6664 0024 4FF05E51 		mov	r1, #931135488
 6665 0028 3869     		ldr	r0, [r7, #16]	@ float
 6666 002a FFF7FEFF 		bl	__aeabi_fmul
 6667 002e 0346     		mov	r3, r0
 6668 0030 3B61     		str	r3, [r7, #16]	@ float
1858:main.c        ****         tempVel = sqrtf(tempVel);
 6669              		.loc 1 1858 0
 6670 0032 3869     		ldr	r0, [r7, #16]	@ float
 6671 0034 FFF7FEFF 		bl	sqrtf
 6672 0038 3861     		str	r0, [r7, #16]	@ float
1859:main.c        ****         tempVel = tempVel - 0.0239372430f;
 6673              		.loc 1 1859 0
 6674 003a 2149     		ldr	r1, .L271+4
 6675 003c 3869     		ldr	r0, [r7, #16]	@ float
 6676 003e FFF7FEFF 		bl	__aeabi_fsub
 6677 0042 0346     		mov	r3, r0
 6678 0044 3B61     		str	r3, [r7, #16]	@ float
1860:main.c        ****         tempVel = tempVel * 130.114584436252734f;
 6679              		.loc 1 1860 0
 6680 0046 1F49     		ldr	r1, .L271+8
 6681 0048 3869     		ldr	r0, [r7, #16]	@ float
 6682 004a FFF7FEFF 		bl	__aeabi_fmul
 6683 004e 0346     		mov	r3, r0
 6684 0050 3B61     		str	r3, [r7, #16]	@ float
1861:main.c        ****         velocity = (int)tempVel;
 6685              		.loc 1 1861 0
 6686 0052 3869     		ldr	r0, [r7, #16]	@ float
 6687 0054 FFF7FEFF 		bl	__aeabi_f2iz
 6688 0058 0346     		mov	r3, r0
 6689 005a FB82     		strh	r3, [r7, #22]	@ movhi
1862:main.c        ****         
1863:main.c        **** 
1864:main.c        ****         if (velocity > 127)
 6690              		.loc 1 1864 0
 6691 005c FB8A     		ldrh	r3, [r7, #22]
 6692 005e 7F2B     		cmp	r3, #127
 6693 0060 01D9     		bls	.L268
1865:main.c        ****         {
1866:main.c        ****             velocity = 127;
 6694              		.loc 1 1866 0
 6695 0062 7F23     		movs	r3, #127
 6696 0064 FB82     		strh	r3, [r7, #22]	@ movhi
 6697              	.L268:
1867:main.c        ****         }
1868:main.c        ****         
1869:main.c        ****         //only update octave on note-ons
1870:main.c        ****         //stringOctave[string] = powf(2.0f,octave);
1871:main.c        ****         int noteToSend = ((octave - 4) * 12) + openStringMIDI_Int[string];
 6698              		.loc 1 1871 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 153


 6699 0066 184B     		ldr	r3, .L271+12
 6700 0068 1B68     		ldr	r3, [r3]
 6701 006a 1A1F     		subs	r2, r3, #4
 6702 006c 1346     		mov	r3, r2
 6703 006e 5B00     		lsls	r3, r3, #1
 6704 0070 1344     		add	r3, r3, r2
 6705 0072 9B00     		lsls	r3, r3, #2
 6706 0074 1946     		mov	r1, r3
 6707 0076 154A     		ldr	r2, .L271+16
 6708 0078 7B68     		ldr	r3, [r7, #4]
 6709 007a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6710 007e 0B44     		add	r3, r3, r1
 6711 0080 FB60     		str	r3, [r7, #12]
1872:main.c        ****         sendMIDINoteOn(noteToSend , ((uint8_t)velocity), string+1);
 6712              		.loc 1 1872 0
 6713 0082 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6714 0084 DBB2     		uxtb	r3, r3
 6715 0086 1946     		mov	r1, r3
 6716 0088 7B68     		ldr	r3, [r7, #4]
 6717 008a 0133     		adds	r3, r3, #1
 6718 008c 1A46     		mov	r2, r3
 6719 008e F868     		ldr	r0, [r7, #12]
 6720 0090 FFF7FEFF 		bl	sendMIDINoteOn
1873:main.c        ****         prevNotes[string] = noteToSend;
 6721              		.loc 1 1873 0
 6722 0094 0E49     		ldr	r1, .L271+20
 6723 0096 7B68     		ldr	r3, [r7, #4]
 6724 0098 FA68     		ldr	r2, [r7, #12]
 6725 009a 41F82320 		str	r2, [r1, r3, lsl #2]
 6726              	.LBE41:
1874:main.c        ****             
1875:main.c        ****     }
1876:main.c        ****     else
1877:main.c        ****     {
1878:main.c        ****         sendMIDINoteOn(prevNotes[string], 0, string+1);
1879:main.c        ****     }
1880:main.c        **** 
1881:main.c        **** }
 6727              		.loc 1 1881 0
 6728 009e 09E0     		b	.L270
 6729              	.L267:
1878:main.c        ****     }
 6730              		.loc 1 1878 0
 6731 00a0 0B4A     		ldr	r2, .L271+20
 6732 00a2 7B68     		ldr	r3, [r7, #4]
 6733 00a4 52F82300 		ldr	r0, [r2, r3, lsl #2]
 6734 00a8 7B68     		ldr	r3, [r7, #4]
 6735 00aa 0133     		adds	r3, r3, #1
 6736 00ac 1A46     		mov	r2, r3
 6737 00ae 0021     		movs	r1, #0
 6738 00b0 FFF7FEFF 		bl	sendMIDINoteOn
 6739              	.L270:
 6740              		.loc 1 1881 0
 6741 00b4 00BF     		nop
 6742 00b6 1837     		adds	r7, r7, #24
 6743              		.cfi_def_cfa_offset 8
 6744 00b8 BD46     		mov	sp, r7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 154


 6745              		.cfi_def_cfa_register 13
 6746              		@ sp needed
 6747 00ba 80BD     		pop	{r7, pc}
 6748              	.L272:
 6749              		.align	2
 6750              	.L271:
 6751 00bc 00000000 		.word	strings
 6752 00c0 0918C43C 		.word	1019484169
 6753 00c4 551D0243 		.word	1124212053
 6754 00c8 00000000 		.word	octave
 6755 00cc 00000000 		.word	openStringMIDI_Int
 6756 00d0 00000000 		.word	prevNotes
 6757              		.cfi_endproc
 6758              	.LFE85:
 6759              		.size	noteEvent, .-noteEvent
 6760              		.section	.text.CCEvent,"ax",%progbits
 6761              		.align	2
 6762              		.global	CCEvent
 6763              		.thumb
 6764              		.thumb_func
 6765              		.type	CCEvent, %function
 6766              	CCEvent:
 6767              	.LFB86:
1882:main.c        **** 
1883:main.c        **** void CCEvent(int cc, int val)
1884:main.c        **** {
 6768              		.loc 1 1884 0
 6769              		.cfi_startproc
 6770              		@ args = 0, pretend = 0, frame = 8
 6771              		@ frame_needed = 1, uses_anonymous_args = 0
 6772 0000 80B5     		push	{r7, lr}
 6773              		.cfi_def_cfa_offset 8
 6774              		.cfi_offset 7, -8
 6775              		.cfi_offset 14, -4
 6776 0002 82B0     		sub	sp, sp, #8
 6777              		.cfi_def_cfa_offset 16
 6778 0004 00AF     		add	r7, sp, #0
 6779              		.cfi_def_cfa_register 7
 6780 0006 7860     		str	r0, [r7, #4]
 6781 0008 3960     		str	r1, [r7]
1885:main.c        ****     
1886:main.c        ****     sendMIDIControlChange(cc, val, 0);
 6782              		.loc 1 1886 0
 6783 000a 0022     		movs	r2, #0
 6784 000c 3968     		ldr	r1, [r7]
 6785 000e 7868     		ldr	r0, [r7, #4]
 6786 0010 FFF7FEFF 		bl	sendMIDIControlChange
1887:main.c        **** }
 6787              		.loc 1 1887 0
 6788 0014 00BF     		nop
 6789 0016 0837     		adds	r7, r7, #8
 6790              		.cfi_def_cfa_offset 8
 6791 0018 BD46     		mov	sp, r7
 6792              		.cfi_def_cfa_register 13
 6793              		@ sp needed
 6794 001a 80BD     		pop	{r7, pc}
 6795              		.cfi_endproc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 155


 6796              	.LFE86:
 6797              		.size	CCEvent, .-CCEvent
 6798              		.section	.text.sendMIDINoteOn,"ax",%progbits
 6799              		.align	2
 6800              		.global	sendMIDINoteOn
 6801              		.thumb
 6802              		.thumb_func
 6803              		.type	sendMIDINoteOn, %function
 6804              	sendMIDINoteOn:
 6805              	.LFB87:
1888:main.c        **** 
1889:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel)
1890:main.c        **** {  
 6806              		.loc 1 1890 0
 6807              		.cfi_startproc
 6808              		@ args = 0, pretend = 0, frame = 16
 6809              		@ frame_needed = 1, uses_anonymous_args = 0
 6810 0000 80B5     		push	{r7, lr}
 6811              		.cfi_def_cfa_offset 8
 6812              		.cfi_offset 7, -8
 6813              		.cfi_offset 14, -4
 6814 0002 84B0     		sub	sp, sp, #16
 6815              		.cfi_def_cfa_offset 24
 6816 0004 00AF     		add	r7, sp, #0
 6817              		.cfi_def_cfa_register 7
 6818 0006 F860     		str	r0, [r7, #12]
 6819 0008 B960     		str	r1, [r7, #8]
 6820 000a 7A60     		str	r2, [r7, #4]
1891:main.c        ****    
1892:main.c        ****     midiMsg[0] = USB_MIDI_NOTE_ON + channel;
 6821              		.loc 1 1892 0
 6822 000c 7B68     		ldr	r3, [r7, #4]
 6823 000e DBB2     		uxtb	r3, r3
 6824 0010 703B     		subs	r3, r3, #112
 6825 0012 DAB2     		uxtb	r2, r3
 6826 0014 114B     		ldr	r3, .L276
 6827 0016 1A70     		strb	r2, [r3]
1893:main.c        ****     midiMsg[1] = MIDInoteNum;
 6828              		.loc 1 1893 0
 6829 0018 FB68     		ldr	r3, [r7, #12]
 6830 001a DAB2     		uxtb	r2, r3
 6831 001c 0F4B     		ldr	r3, .L276
 6832 001e 5A70     		strb	r2, [r3, #1]
1894:main.c        ****     midiMsg[2] = velocity;	
 6833              		.loc 1 1894 0
 6834 0020 BB68     		ldr	r3, [r7, #8]
 6835 0022 DAB2     		uxtb	r2, r3
 6836 0024 0D4B     		ldr	r3, .L276
 6837 0026 9A70     		strb	r2, [r3, #2]
1895:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 6838              		.loc 1 1895 0
 6839 0028 0D4B     		ldr	r3, .L276+4
 6840 002a 1B78     		ldrb	r3, [r3]
 6841 002c DBB2     		uxtb	r3, r3
 6842 002e 002B     		cmp	r3, #0
 6843 0030 09D0     		beq	.L275
 6844              		.loc 1 1895 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 156


 6845 0032 FFF7FEFF 		bl	USB_VBusPresent
 6846 0036 0346     		mov	r3, r0
 6847 0038 002B     		cmp	r3, #0
 6848 003a 04D0     		beq	.L275
1896:main.c        ****     {
1897:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 6849              		.loc 1 1897 0 is_stmt 1
 6850 003c 0022     		movs	r2, #0
 6851 003e 0749     		ldr	r1, .L276
 6852 0040 0320     		movs	r0, #3
 6853 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 6854              	.L275:
1898:main.c        ****     } 
1899:main.c        ****     midiSent += 4;
 6855              		.loc 1 1899 0
 6856 0046 074B     		ldr	r3, .L276+8
 6857 0048 1B88     		ldrh	r3, [r3]
 6858 004a 0433     		adds	r3, r3, #4
 6859 004c 9AB2     		uxth	r2, r3
 6860 004e 054B     		ldr	r3, .L276+8
 6861 0050 1A80     		strh	r2, [r3]	@ movhi
1900:main.c        **** }
 6862              		.loc 1 1900 0
 6863 0052 00BF     		nop
 6864 0054 1037     		adds	r7, r7, #16
 6865              		.cfi_def_cfa_offset 8
 6866 0056 BD46     		mov	sp, r7
 6867              		.cfi_def_cfa_register 13
 6868              		@ sp needed
 6869 0058 80BD     		pop	{r7, pc}
 6870              	.L277:
 6871 005a 00BF     		.align	2
 6872              	.L276:
 6873 005c 00000000 		.word	midiMsg
 6874 0060 00000000 		.word	USB_active
 6875 0064 00000000 		.word	midiSent
 6876              		.cfi_endproc
 6877              	.LFE87:
 6878              		.size	sendMIDINoteOn, .-sendMIDINoteOn
 6879              		.section	.text.sendMIDIPolyKeyPressure,"ax",%progbits
 6880              		.align	2
 6881              		.global	sendMIDIPolyKeyPressure
 6882              		.thumb
 6883              		.thumb_func
 6884              		.type	sendMIDIPolyKeyPressure, %function
 6885              	sendMIDIPolyKeyPressure:
 6886              	.LFB88:
1901:main.c        **** 
1902:main.c        **** void sendMIDIPolyKeyPressure(int MIDInoteNum, int pressure, int channel)
1903:main.c        **** {
 6887              		.loc 1 1903 0
 6888              		.cfi_startproc
 6889              		@ args = 0, pretend = 0, frame = 16
 6890              		@ frame_needed = 1, uses_anonymous_args = 0
 6891 0000 80B5     		push	{r7, lr}
 6892              		.cfi_def_cfa_offset 8
 6893              		.cfi_offset 7, -8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 157


 6894              		.cfi_offset 14, -4
 6895 0002 84B0     		sub	sp, sp, #16
 6896              		.cfi_def_cfa_offset 24
 6897 0004 00AF     		add	r7, sp, #0
 6898              		.cfi_def_cfa_register 7
 6899 0006 F860     		str	r0, [r7, #12]
 6900 0008 B960     		str	r1, [r7, #8]
 6901 000a 7A60     		str	r2, [r7, #4]
1904:main.c        ****     midiMsg[0] = USB_MIDI_POLY_KEY_PRESSURE + channel;
 6902              		.loc 1 1904 0
 6903 000c 7B68     		ldr	r3, [r7, #4]
 6904 000e DBB2     		uxtb	r3, r3
 6905 0010 603B     		subs	r3, r3, #96
 6906 0012 DAB2     		uxtb	r2, r3
 6907 0014 114B     		ldr	r3, .L280
 6908 0016 1A70     		strb	r2, [r3]
1905:main.c        ****     midiMsg[1] = MIDInoteNum;
 6909              		.loc 1 1905 0
 6910 0018 FB68     		ldr	r3, [r7, #12]
 6911 001a DAB2     		uxtb	r2, r3
 6912 001c 0F4B     		ldr	r3, .L280
 6913 001e 5A70     		strb	r2, [r3, #1]
1906:main.c        ****     midiMsg[2] = pressure;		
 6914              		.loc 1 1906 0
 6915 0020 BB68     		ldr	r3, [r7, #8]
 6916 0022 DAB2     		uxtb	r2, r3
 6917 0024 0D4B     		ldr	r3, .L280
 6918 0026 9A70     		strb	r2, [r3, #2]
1907:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 6919              		.loc 1 1907 0
 6920 0028 0D4B     		ldr	r3, .L280+4
 6921 002a 1B78     		ldrb	r3, [r3]
 6922 002c DBB2     		uxtb	r3, r3
 6923 002e 002B     		cmp	r3, #0
 6924 0030 09D0     		beq	.L279
 6925              		.loc 1 1907 0 is_stmt 0 discriminator 1
 6926 0032 FFF7FEFF 		bl	USB_VBusPresent
 6927 0036 0346     		mov	r3, r0
 6928 0038 002B     		cmp	r3, #0
 6929 003a 04D0     		beq	.L279
1908:main.c        ****     {
1909:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 6930              		.loc 1 1909 0 is_stmt 1
 6931 003c 0022     		movs	r2, #0
 6932 003e 0749     		ldr	r1, .L280
 6933 0040 0320     		movs	r0, #3
 6934 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 6935              	.L279:
1910:main.c        ****     } 
1911:main.c        ****     midiSent += 4;
 6936              		.loc 1 1911 0
 6937 0046 074B     		ldr	r3, .L280+8
 6938 0048 1B88     		ldrh	r3, [r3]
 6939 004a 0433     		adds	r3, r3, #4
 6940 004c 9AB2     		uxth	r2, r3
 6941 004e 054B     		ldr	r3, .L280+8
 6942 0050 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 158


1912:main.c        **** }
 6943              		.loc 1 1912 0
 6944 0052 00BF     		nop
 6945 0054 1037     		adds	r7, r7, #16
 6946              		.cfi_def_cfa_offset 8
 6947 0056 BD46     		mov	sp, r7
 6948              		.cfi_def_cfa_register 13
 6949              		@ sp needed
 6950 0058 80BD     		pop	{r7, pc}
 6951              	.L281:
 6952 005a 00BF     		.align	2
 6953              	.L280:
 6954 005c 00000000 		.word	midiMsg
 6955 0060 00000000 		.word	USB_active
 6956 0064 00000000 		.word	midiSent
 6957              		.cfi_endproc
 6958              	.LFE88:
 6959              		.size	sendMIDIPolyKeyPressure, .-sendMIDIPolyKeyPressure
 6960              		.section	.text.sendMIDIControlChange,"ax",%progbits
 6961              		.align	2
 6962              		.global	sendMIDIControlChange
 6963              		.thumb
 6964              		.thumb_func
 6965              		.type	sendMIDIControlChange, %function
 6966              	sendMIDIControlChange:
 6967              	.LFB89:
1913:main.c        **** 
1914:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel)
1915:main.c        **** {
 6968              		.loc 1 1915 0
 6969              		.cfi_startproc
 6970              		@ args = 0, pretend = 0, frame = 16
 6971              		@ frame_needed = 1, uses_anonymous_args = 0
 6972 0000 80B5     		push	{r7, lr}
 6973              		.cfi_def_cfa_offset 8
 6974              		.cfi_offset 7, -8
 6975              		.cfi_offset 14, -4
 6976 0002 84B0     		sub	sp, sp, #16
 6977              		.cfi_def_cfa_offset 24
 6978 0004 00AF     		add	r7, sp, #0
 6979              		.cfi_def_cfa_register 7
 6980 0006 F860     		str	r0, [r7, #12]
 6981 0008 B960     		str	r1, [r7, #8]
 6982 000a 7A60     		str	r2, [r7, #4]
1916:main.c        ****     midiMsg[0] = USB_MIDI_CONTROL_CHANGE + channel;
 6983              		.loc 1 1916 0
 6984 000c 7B68     		ldr	r3, [r7, #4]
 6985 000e DBB2     		uxtb	r3, r3
 6986 0010 503B     		subs	r3, r3, #80
 6987 0012 DAB2     		uxtb	r2, r3
 6988 0014 114B     		ldr	r3, .L284
 6989 0016 1A70     		strb	r2, [r3]
1917:main.c        ****     midiMsg[1] = CCnum;
 6990              		.loc 1 1917 0
 6991 0018 FB68     		ldr	r3, [r7, #12]
 6992 001a DAB2     		uxtb	r2, r3
 6993 001c 0F4B     		ldr	r3, .L284
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 159


 6994 001e 5A70     		strb	r2, [r3, #1]
1918:main.c        ****     midiMsg[2] = CCval;			
 6995              		.loc 1 1918 0
 6996 0020 BB68     		ldr	r3, [r7, #8]
 6997 0022 DAB2     		uxtb	r2, r3
 6998 0024 0D4B     		ldr	r3, .L284
 6999 0026 9A70     		strb	r2, [r3, #2]
1919:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 7000              		.loc 1 1919 0
 7001 0028 0D4B     		ldr	r3, .L284+4
 7002 002a 1B78     		ldrb	r3, [r3]
 7003 002c DBB2     		uxtb	r3, r3
 7004 002e 002B     		cmp	r3, #0
 7005 0030 09D0     		beq	.L283
 7006              		.loc 1 1919 0 is_stmt 0 discriminator 1
 7007 0032 FFF7FEFF 		bl	USB_VBusPresent
 7008 0036 0346     		mov	r3, r0
 7009 0038 002B     		cmp	r3, #0
 7010 003a 04D0     		beq	.L283
1920:main.c        ****     {
1921:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 7011              		.loc 1 1921 0 is_stmt 1
 7012 003c 0022     		movs	r2, #0
 7013 003e 0749     		ldr	r1, .L284
 7014 0040 0320     		movs	r0, #3
 7015 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 7016              	.L283:
1922:main.c        ****     } 
1923:main.c        ****     midiSent += 4;
 7017              		.loc 1 1923 0
 7018 0046 074B     		ldr	r3, .L284+8
 7019 0048 1B88     		ldrh	r3, [r3]
 7020 004a 0433     		adds	r3, r3, #4
 7021 004c 9AB2     		uxth	r2, r3
 7022 004e 054B     		ldr	r3, .L284+8
 7023 0050 1A80     		strh	r2, [r3]	@ movhi
1924:main.c        **** }
 7024              		.loc 1 1924 0
 7025 0052 00BF     		nop
 7026 0054 1037     		adds	r7, r7, #16
 7027              		.cfi_def_cfa_offset 8
 7028 0056 BD46     		mov	sp, r7
 7029              		.cfi_def_cfa_register 13
 7030              		@ sp needed
 7031 0058 80BD     		pop	{r7, pc}
 7032              	.L285:
 7033 005a 00BF     		.align	2
 7034              	.L284:
 7035 005c 00000000 		.word	midiMsg
 7036 0060 00000000 		.word	USB_active
 7037 0064 00000000 		.word	midiSent
 7038              		.cfi_endproc
 7039              	.LFE89:
 7040              		.size	sendMIDIControlChange, .-sendMIDIControlChange
 7041              		.section	.text.sendMIDIPitchBend,"ax",%progbits
 7042              		.align	2
 7043              		.global	sendMIDIPitchBend
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 160


 7044              		.thumb
 7045              		.thumb_func
 7046              		.type	sendMIDIPitchBend, %function
 7047              	sendMIDIPitchBend:
 7048              	.LFB90:
1925:main.c        **** 
1926:main.c        **** void sendMIDIPitchBend(int val, int channel)
1927:main.c        **** {
 7049              		.loc 1 1927 0
 7050              		.cfi_startproc
 7051              		@ args = 0, pretend = 0, frame = 8
 7052              		@ frame_needed = 1, uses_anonymous_args = 0
 7053 0000 80B5     		push	{r7, lr}
 7054              		.cfi_def_cfa_offset 8
 7055              		.cfi_offset 7, -8
 7056              		.cfi_offset 14, -4
 7057 0002 82B0     		sub	sp, sp, #8
 7058              		.cfi_def_cfa_offset 16
 7059 0004 00AF     		add	r7, sp, #0
 7060              		.cfi_def_cfa_register 7
 7061 0006 7860     		str	r0, [r7, #4]
 7062 0008 3960     		str	r1, [r7]
1928:main.c        ****     midiMsg[0] = USB_MIDI_PITCH_BEND_CHANGE + channel;
 7063              		.loc 1 1928 0
 7064 000a 3B68     		ldr	r3, [r7]
 7065 000c DBB2     		uxtb	r3, r3
 7066 000e 203B     		subs	r3, r3, #32
 7067 0010 DAB2     		uxtb	r2, r3
 7068 0012 134B     		ldr	r3, .L288
 7069 0014 1A70     		strb	r2, [r3]
1929:main.c        ****     midiMsg[1] = (val & 127); //LSB
 7070              		.loc 1 1929 0
 7071 0016 7B68     		ldr	r3, [r7, #4]
 7072 0018 DBB2     		uxtb	r3, r3
 7073 001a 03F07F03 		and	r3, r3, #127
 7074 001e DAB2     		uxtb	r2, r3
 7075 0020 0F4B     		ldr	r3, .L288
 7076 0022 5A70     		strb	r2, [r3, #1]
1930:main.c        ****     midiMsg[2] = (val >> 7);	//MSB		
 7077              		.loc 1 1930 0
 7078 0024 7B68     		ldr	r3, [r7, #4]
 7079 0026 DB11     		asrs	r3, r3, #7
 7080 0028 DAB2     		uxtb	r2, r3
 7081 002a 0D4B     		ldr	r3, .L288
 7082 002c 9A70     		strb	r2, [r3, #2]
1931:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 7083              		.loc 1 1931 0
 7084 002e 0D4B     		ldr	r3, .L288+4
 7085 0030 1B78     		ldrb	r3, [r3]
 7086 0032 DBB2     		uxtb	r3, r3
 7087 0034 002B     		cmp	r3, #0
 7088 0036 09D0     		beq	.L287
 7089              		.loc 1 1931 0 is_stmt 0 discriminator 1
 7090 0038 FFF7FEFF 		bl	USB_VBusPresent
 7091 003c 0346     		mov	r3, r0
 7092 003e 002B     		cmp	r3, #0
 7093 0040 04D0     		beq	.L287
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 161


1932:main.c        ****     {
1933:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 7094              		.loc 1 1933 0 is_stmt 1
 7095 0042 0022     		movs	r2, #0
 7096 0044 0649     		ldr	r1, .L288
 7097 0046 0320     		movs	r0, #3
 7098 0048 FFF7FEFF 		bl	USB_PutUsbMidiIn
 7099              	.L287:
1934:main.c        ****     } 
1935:main.c        ****     midiSent += 4;
 7100              		.loc 1 1935 0
 7101 004c 064B     		ldr	r3, .L288+8
 7102 004e 1B88     		ldrh	r3, [r3]
 7103 0050 0433     		adds	r3, r3, #4
 7104 0052 9AB2     		uxth	r2, r3
 7105 0054 044B     		ldr	r3, .L288+8
 7106 0056 1A80     		strh	r2, [r3]	@ movhi
1936:main.c        **** }
 7107              		.loc 1 1936 0
 7108 0058 00BF     		nop
 7109 005a 0837     		adds	r7, r7, #8
 7110              		.cfi_def_cfa_offset 8
 7111 005c BD46     		mov	sp, r7
 7112              		.cfi_def_cfa_register 13
 7113              		@ sp needed
 7114 005e 80BD     		pop	{r7, pc}
 7115              	.L289:
 7116              		.align	2
 7117              	.L288:
 7118 0060 00000000 		.word	midiMsg
 7119 0064 00000000 		.word	USB_active
 7120 0068 00000000 		.word	midiSent
 7121              		.cfi_endproc
 7122              	.LFE90:
 7123              		.size	sendMIDIPitchBend, .-sendMIDIPitchBend
 7124              		.section	.text.sendMIDIAllNotesOff,"ax",%progbits
 7125              		.align	2
 7126              		.global	sendMIDIAllNotesOff
 7127              		.thumb
 7128              		.thumb_func
 7129              		.type	sendMIDIAllNotesOff, %function
 7130              	sendMIDIAllNotesOff:
 7131              	.LFB91:
1937:main.c        **** 
1938:main.c        **** void sendMIDIAllNotesOff(void)
1939:main.c        **** {   
 7132              		.loc 1 1939 0
 7133              		.cfi_startproc
 7134              		@ args = 0, pretend = 0, frame = 0
 7135              		@ frame_needed = 1, uses_anonymous_args = 0
 7136 0000 80B5     		push	{r7, lr}
 7137              		.cfi_def_cfa_offset 8
 7138              		.cfi_offset 7, -8
 7139              		.cfi_offset 14, -4
 7140 0002 00AF     		add	r7, sp, #0
 7141              		.cfi_def_cfa_register 7
1940:main.c        ****     for (i = 0; i < 128; i++)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 162


 7142              		.loc 1 1940 0
 7143 0004 144B     		ldr	r3, .L294
 7144 0006 0022     		movs	r2, #0
 7145 0008 1A70     		strb	r2, [r3]
 7146 000a 1EE0     		b	.L291
 7147              	.L293:
1941:main.c        ****     {
1942:main.c        ****         midiMsg[0] = USB_MIDI_NOTE_ON;
 7148              		.loc 1 1942 0
 7149 000c 134B     		ldr	r3, .L294+4
 7150 000e 9022     		movs	r2, #144
 7151 0010 1A70     		strb	r2, [r3]
1943:main.c        ****         midiMsg[1] = i;
 7152              		.loc 1 1943 0
 7153 0012 114B     		ldr	r3, .L294
 7154 0014 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 7155 0016 114B     		ldr	r3, .L294+4
 7156 0018 5A70     		strb	r2, [r3, #1]
1944:main.c        ****         midiMsg[2] = 0;	
 7157              		.loc 1 1944 0
 7158 001a 104B     		ldr	r3, .L294+4
 7159 001c 0022     		movs	r2, #0
 7160 001e 9A70     		strb	r2, [r3, #2]
1945:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 7161              		.loc 1 1945 0
 7162 0020 0F4B     		ldr	r3, .L294+8
 7163 0022 1B78     		ldrb	r3, [r3]
 7164 0024 DBB2     		uxtb	r3, r3
 7165 0026 002B     		cmp	r3, #0
 7166 0028 09D0     		beq	.L292
 7167              		.loc 1 1945 0 is_stmt 0 discriminator 1
 7168 002a FFF7FEFF 		bl	USB_VBusPresent
 7169 002e 0346     		mov	r3, r0
 7170 0030 002B     		cmp	r3, #0
 7171 0032 04D0     		beq	.L292
1946:main.c        ****         {       
1947:main.c        ****             USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 7172              		.loc 1 1947 0 is_stmt 1
 7173 0034 0022     		movs	r2, #0
 7174 0036 0949     		ldr	r1, .L294+4
 7175 0038 0320     		movs	r0, #3
 7176 003a FFF7FEFF 		bl	USB_PutUsbMidiIn
 7177              	.L292:
1940:main.c        ****     {
 7178              		.loc 1 1940 0 discriminator 2
 7179 003e 064B     		ldr	r3, .L294
 7180 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7181 0042 0133     		adds	r3, r3, #1
 7182 0044 DAB2     		uxtb	r2, r3
 7183 0046 044B     		ldr	r3, .L294
 7184 0048 1A70     		strb	r2, [r3]
 7185              	.L291:
1940:main.c        ****     {
 7186              		.loc 1 1940 0 is_stmt 0 discriminator 1
 7187 004a 034B     		ldr	r3, .L294
 7188 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7189 004e 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 163


 7190 0050 002B     		cmp	r3, #0
 7191 0052 DBDA     		bge	.L293
1948:main.c        ****         }
1949:main.c        ****     }
1950:main.c        **** }
 7192              		.loc 1 1950 0 is_stmt 1
 7193 0054 00BF     		nop
 7194 0056 80BD     		pop	{r7, pc}
 7195              	.L295:
 7196              		.align	2
 7197              	.L294:
 7198 0058 00000000 		.word	i
 7199 005c 00000000 		.word	midiMsg
 7200 0060 00000000 		.word	USB_active
 7201              		.cfi_endproc
 7202              	.LFE91:
 7203              		.size	sendMIDIAllNotesOff, .-sendMIDIAllNotesOff
 7204              		.global	checkStatus
 7205              		.bss
 7206              		.type	checkStatus, %object
 7207              		.size	checkStatus, 1
 7208              	checkStatus:
 7209 0124 00       		.space	1
 7210              		.global	checkBase
 7211 0125 00       		.align	1
 7212              		.type	checkBase, %object
 7213              		.size	checkBase, 2
 7214              	checkBase:
 7215 0126 0000     		.space	2
 7216              		.global	SPI_errors
 7217              		.align	2
 7218              		.type	SPI_errors, %object
 7219              		.size	SPI_errors, 4
 7220              	SPI_errors:
 7221 0128 00000000 		.space	4
 7222              		.section	.text.parseSysex,"ax",%progbits
 7223              		.align	2
 7224              		.global	parseSysex
 7225              		.thumb
 7226              		.thumb_func
 7227              		.type	parseSysex, %function
 7228              	parseSysex:
 7229              	.LFB92:
1951:main.c        **** 
1952:main.c        **** 
1953:main.c        **** 
1954:main.c        **** 
1955:main.c        **** volatile uint8_t checkStatus = 0;
1956:main.c        **** volatile uint16_t checkBase = 0;
1957:main.c        **** 
1958:main.c        **** 
1959:main.c        **** 
1960:main.c        **** int SPI_errors = 0;
1961:main.c        **** 
1962:main.c        **** void parseSysex(void)
1963:main.c        **** {
 7230              		.loc 1 1963 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 164


 7231              		.cfi_startproc
 7232              		@ args = 0, pretend = 0, frame = 80
 7233              		@ frame_needed = 1, uses_anonymous_args = 0
 7234 0000 90B5     		push	{r4, r7, lr}
 7235              		.cfi_def_cfa_offset 12
 7236              		.cfi_offset 4, -12
 7237              		.cfi_offset 7, -8
 7238              		.cfi_offset 14, -4
 7239 0002 95B0     		sub	sp, sp, #84
 7240              		.cfi_def_cfa_offset 96
 7241 0004 00AF     		add	r7, sp, #0
 7242              		.cfi_def_cfa_register 7
1964:main.c        ****     parsingSysex = 1;
 7243              		.loc 1 1964 0
 7244 0006 8F4B     		ldr	r3, .L349
 7245 0008 0122     		movs	r2, #1
 7246 000a 1A70     		strb	r2, [r3]
1965:main.c        ****     //0 = it's a preset
1966:main.c        ****     if (sysexBuffer[0] == 0)
 7247              		.loc 1 1966 0
 7248 000c 8E4B     		ldr	r3, .L349+4
 7249 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7250 0010 002B     		cmp	r3, #0
 7251 0012 40F0E082 		bne	.L297
 7252              	.LBB42:
1967:main.c        ****     {
1968:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
 7253              		.loc 1 1968 0
 7254 0016 8D4B     		ldr	r3, .L349+8
 7255 0018 0122     		movs	r2, #1
 7256 001a 1A70     		strb	r2, [r3]
1969:main.c        ****         currentFloat = 0;
 7257              		.loc 1 1969 0
 7258 001c 8C4B     		ldr	r3, .L349+12
 7259 001e 0022     		movs	r2, #0
 7260 0020 1A60     		str	r2, [r3]
1970:main.c        ****         presetArraySection = presetName;
 7261              		.loc 1 1970 0
 7262 0022 8C4B     		ldr	r3, .L349+16
 7263 0024 0022     		movs	r2, #0
 7264 0026 1A70     		strb	r2, [r3]
1971:main.c        ****         presetNumberToWrite = sysexBuffer[1];
 7265              		.loc 1 1971 0
 7266 0028 874B     		ldr	r3, .L349+4
 7267 002a 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 7268 002c 8A4B     		ldr	r3, .L349+20
 7269 002e 1A70     		strb	r2, [r3]
1972:main.c        ****         presetArray[0] = sysexBuffer[2];
 7270              		.loc 1 1972 0
 7271 0030 854B     		ldr	r3, .L349+4
 7272 0032 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 7273 0034 894B     		ldr	r3, .L349+24
 7274 0036 1A70     		strb	r2, [r3]
1973:main.c        ****         presetArray[1] = sysexBuffer[3];
 7275              		.loc 1 1973 0
 7276 0038 834B     		ldr	r3, .L349+4
 7277 003a DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 165


 7278 003c 874B     		ldr	r3, .L349+24
 7279 003e 5A70     		strb	r2, [r3, #1]
1974:main.c        ****         presetArray[2] = sysexBuffer[4];
 7280              		.loc 1 1974 0
 7281 0040 814B     		ldr	r3, .L349+4
 7282 0042 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 7283 0044 854B     		ldr	r3, .L349+24
 7284 0046 9A70     		strb	r2, [r3, #2]
1975:main.c        ****         presetArray[3] = sysexBuffer[5];
 7285              		.loc 1 1975 0
 7286 0048 7F4B     		ldr	r3, .L349+4
 7287 004a 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 7288 004c 834B     		ldr	r3, .L349+24
 7289 004e DA70     		strb	r2, [r3, #3]
1976:main.c        ****         
1977:main.c        ****         union breakFloat theVal;
1978:main.c        ****         uint32_t i = 6;
 7290              		.loc 1 1978 0
 7291 0050 0623     		movs	r3, #6
 7292 0052 FB64     		str	r3, [r7, #76]
1979:main.c        ****         uint8_t stoppingPoint = NAME_LENGTH_IN_BYTES+6;
 7293              		.loc 1 1979 0
 7294 0054 1423     		movs	r3, #20
 7295 0056 87F83730 		strb	r3, [r7, #55]
1980:main.c        ****         for (; i < stoppingPoint; i++)
 7296              		.loc 1 1980 0
 7297 005a 22E0     		b	.L298
 7298              	.L299:
1981:main.c        ****         {
1982:main.c        ****             presetArray[i-2] = sysexBuffer[i] & 127; // pass on the first 14 elements as 8-bit byte
 7299              		.loc 1 1982 0 discriminator 2
 7300 005c FB6C     		ldr	r3, [r7, #76]
 7301 005e 023B     		subs	r3, r3, #2
 7302 0060 7949     		ldr	r1, .L349+4
 7303 0062 FA6C     		ldr	r2, [r7, #76]
 7304 0064 0A44     		add	r2, r2, r1
 7305 0066 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7306 0068 02F07F02 		and	r2, r2, #127
 7307 006c D1B2     		uxtb	r1, r2
 7308 006e 7B4A     		ldr	r2, .L349+24
 7309 0070 D154     		strb	r1, [r2, r3]
1983:main.c        ****             presetNamesArray[presetNumberToWrite][i-6] = sysexBuffer[i] & 127;
 7310              		.loc 1 1983 0 discriminator 2
 7311 0072 794B     		ldr	r3, .L349+20
 7312 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7313 0076 1846     		mov	r0, r3
 7314 0078 FB6C     		ldr	r3, [r7, #76]
 7315 007a 9A1F     		subs	r2, r3, #6
 7316 007c 7249     		ldr	r1, .L349+4
 7317 007e FB6C     		ldr	r3, [r7, #76]
 7318 0080 0B44     		add	r3, r3, r1
 7319 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7320 0084 03F07F03 		and	r3, r3, #127
 7321 0088 DCB2     		uxtb	r4, r3
 7322 008a 7549     		ldr	r1, .L349+28
 7323 008c 0346     		mov	r3, r0
 7324 008e DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 166


 7325 0090 1B1A     		subs	r3, r3, r0
 7326 0092 5B00     		lsls	r3, r3, #1
 7327 0094 0B44     		add	r3, r3, r1
 7328 0096 1344     		add	r3, r3, r2
 7329 0098 2246     		mov	r2, r4
 7330 009a 1A70     		strb	r2, [r3]
1980:main.c        ****         for (; i < stoppingPoint; i++)
 7331              		.loc 1 1980 0 discriminator 2
 7332 009c FB6C     		ldr	r3, [r7, #76]
 7333 009e 0133     		adds	r3, r3, #1
 7334 00a0 FB64     		str	r3, [r7, #76]
 7335              	.L298:
1980:main.c        ****         for (; i < stoppingPoint; i++)
 7336              		.loc 1 1980 0 is_stmt 0 discriminator 1
 7337 00a2 97F83720 		ldrb	r2, [r7, #55]	@ zero_extendqisi2
 7338 00a6 FB6C     		ldr	r3, [r7, #76]
 7339 00a8 9A42     		cmp	r2, r3
 7340 00aa D7D8     		bhi	.L299
1984:main.c        ****         }
1985:main.c        ****         
1986:main.c        ****         presetArraySection = macroNames;
 7341              		.loc 1 1986 0 is_stmt 1
 7342 00ac 694B     		ldr	r3, .L349+16
 7343 00ae 0122     		movs	r2, #1
 7344 00b0 1A70     		strb	r2, [r3]
 7345              	.LBB43:
1987:main.c        **** 
1988:main.c        ****         
1989:main.c        ****         for (int j = 0; j < NUM_MACROS; j++)
 7346              		.loc 1 1989 0
 7347 00b2 0023     		movs	r3, #0
 7348 00b4 BB64     		str	r3, [r7, #72]
 7349 00b6 34E0     		b	.L300
 7350              	.L303:
 7351              	.LBB44:
1990:main.c        ****         {
1991:main.c        ****             for (int k = 0; k < NAME_LENGTH_IN_BYTES; k++)
 7352              		.loc 1 1991 0
 7353 00b8 0023     		movs	r3, #0
 7354 00ba 7B64     		str	r3, [r7, #68]
 7355 00bc 2BE0     		b	.L301
 7356              	.L302:
1992:main.c        ****             {
1993:main.c        ****                 presetArray[i-2] = sysexBuffer[i] & 127; // pass on the first 14 elements as 8-bit 
 7357              		.loc 1 1993 0 discriminator 3
 7358 00be FB6C     		ldr	r3, [r7, #76]
 7359 00c0 023B     		subs	r3, r3, #2
 7360 00c2 6149     		ldr	r1, .L349+4
 7361 00c4 FA6C     		ldr	r2, [r7, #76]
 7362 00c6 0A44     		add	r2, r2, r1
 7363 00c8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7364 00ca 02F07F02 		and	r2, r2, #127
 7365 00ce D1B2     		uxtb	r1, r2
 7366 00d0 624A     		ldr	r2, .L349+24
 7367 00d2 D154     		strb	r1, [r2, r3]
1994:main.c        ****                 macroNamesArray[presetNumberToWrite][j][k] = sysexBuffer[i] & 127; // pass on the f
 7368              		.loc 1 1994 0 discriminator 3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 167


 7369 00d4 604B     		ldr	r3, .L349+20
 7370 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7371 00d8 1846     		mov	r0, r3
 7372 00da 5B4A     		ldr	r2, .L349+4
 7373 00dc FB6C     		ldr	r3, [r7, #76]
 7374 00de 1344     		add	r3, r3, r2
 7375 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7376 00e2 03F07F03 		and	r3, r3, #127
 7377 00e6 DCB2     		uxtb	r4, r3
 7378 00e8 5E49     		ldr	r1, .L349+32
 7379 00ea BB6C     		ldr	r3, [r7, #72]
 7380 00ec 1A46     		mov	r2, r3
 7381 00ee D200     		lsls	r2, r2, #3
 7382 00f0 D21A     		subs	r2, r2, r3
 7383 00f2 5300     		lsls	r3, r2, #1
 7384 00f4 1A46     		mov	r2, r3
 7385 00f6 0346     		mov	r3, r0
 7386 00f8 DB00     		lsls	r3, r3, #3
 7387 00fa 1B1A     		subs	r3, r3, r0
 7388 00fc 1B01     		lsls	r3, r3, #4
 7389 00fe 1344     		add	r3, r3, r2
 7390 0100 CA18     		adds	r2, r1, r3
 7391 0102 7B6C     		ldr	r3, [r7, #68]
 7392 0104 1344     		add	r3, r3, r2
 7393 0106 2246     		mov	r2, r4
 7394 0108 1A70     		strb	r2, [r3]
1995:main.c        ****                 i++;
 7395              		.loc 1 1995 0 discriminator 3
 7396 010a FB6C     		ldr	r3, [r7, #76]
 7397 010c 0133     		adds	r3, r3, #1
 7398 010e FB64     		str	r3, [r7, #76]
1991:main.c        ****             {
 7399              		.loc 1 1991 0 discriminator 3
 7400 0110 7B6C     		ldr	r3, [r7, #68]
 7401 0112 0133     		adds	r3, r3, #1
 7402 0114 7B64     		str	r3, [r7, #68]
 7403              	.L301:
1991:main.c        ****             {
 7404              		.loc 1 1991 0 is_stmt 0 discriminator 1
 7405 0116 7B6C     		ldr	r3, [r7, #68]
 7406 0118 0D2B     		cmp	r3, #13
 7407 011a D0DD     		ble	.L302
 7408              	.LBE44:
1989:main.c        ****         {
 7409              		.loc 1 1989 0 is_stmt 1 discriminator 2
 7410 011c BB6C     		ldr	r3, [r7, #72]
 7411 011e 0133     		adds	r3, r3, #1
 7412 0120 BB64     		str	r3, [r7, #72]
 7413              	.L300:
1989:main.c        ****         {
 7414              		.loc 1 1989 0 is_stmt 0 discriminator 1
 7415 0122 BB6C     		ldr	r3, [r7, #72]
 7416 0124 072B     		cmp	r3, #7
 7417 0126 C7DD     		ble	.L303
 7418              	.LBE43:
1996:main.c        ****             }
1997:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 168


1998:main.c        ****         
1999:main.c        ****         uint16_t valsStart = 4 + NAME_LENGTH_IN_BYTES + (NAME_LENGTH_IN_BYTES * NUM_MACROS);
 7419              		.loc 1 1999 0 is_stmt 1
 7420 0128 8223     		movs	r3, #130
 7421 012a BB86     		strh	r3, [r7, #52]	@ movhi
2000:main.c        ****         
2001:main.c        ****         presetArraySection = initialVals;
 7422              		.loc 1 2001 0
 7423 012c 494B     		ldr	r3, .L349+16
 7424 012e 0222     		movs	r2, #2
 7425 0130 1A70     		strb	r2, [r3]
2002:main.c        ****         
2003:main.c        ****         for (; i < sysexPointer; i = i+5)
 7426              		.loc 1 2003 0
 7427 0132 49E2     		b	.L304
 7428              	.L326:
2004:main.c        ****         {
2005:main.c        ****             theVal.u32 = 0;
 7429              		.loc 1 2005 0
 7430 0134 0023     		movs	r3, #0
 7431 0136 3B61     		str	r3, [r7, #16]
2006:main.c        ****             theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 7432              		.loc 1 2006 0
 7433 0138 3B69     		ldr	r3, [r7, #16]
 7434 013a 4349     		ldr	r1, .L349+4
 7435 013c FA6C     		ldr	r2, [r7, #76]
 7436 013e 0A44     		add	r2, r2, r1
 7437 0140 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7438 0142 1207     		lsls	r2, r2, #28
 7439 0144 1343     		orrs	r3, r3, r2
 7440 0146 3B61     		str	r3, [r7, #16]
2007:main.c        ****             theVal.u32 |= (sysexBuffer[i+1] << 21);
 7441              		.loc 1 2007 0
 7442 0148 3B69     		ldr	r3, [r7, #16]
 7443 014a FA6C     		ldr	r2, [r7, #76]
 7444 014c 0132     		adds	r2, r2, #1
 7445 014e 3E49     		ldr	r1, .L349+4
 7446 0150 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7447 0152 5205     		lsls	r2, r2, #21
 7448 0154 1343     		orrs	r3, r3, r2
 7449 0156 3B61     		str	r3, [r7, #16]
2008:main.c        ****             theVal.u32 |= (sysexBuffer[i+2] << 14);
 7450              		.loc 1 2008 0
 7451 0158 3B69     		ldr	r3, [r7, #16]
 7452 015a FA6C     		ldr	r2, [r7, #76]
 7453 015c 0232     		adds	r2, r2, #2
 7454 015e 3A49     		ldr	r1, .L349+4
 7455 0160 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7456 0162 9203     		lsls	r2, r2, #14
 7457 0164 1343     		orrs	r3, r3, r2
 7458 0166 3B61     		str	r3, [r7, #16]
2009:main.c        ****             theVal.u32 |= (sysexBuffer[i+3] << 7);
 7459              		.loc 1 2009 0
 7460 0168 3B69     		ldr	r3, [r7, #16]
 7461 016a FA6C     		ldr	r2, [r7, #76]
 7462 016c 0332     		adds	r2, r2, #3
 7463 016e 3649     		ldr	r1, .L349+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 169


 7464 0170 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7465 0172 D201     		lsls	r2, r2, #7
 7466 0174 1343     		orrs	r3, r3, r2
 7467 0176 3B61     		str	r3, [r7, #16]
2010:main.c        ****             theVal.u32 |= (sysexBuffer[i+4] & 127);
 7468              		.loc 1 2010 0
 7469 0178 3A69     		ldr	r2, [r7, #16]
 7470 017a FB6C     		ldr	r3, [r7, #76]
 7471 017c 0433     		adds	r3, r3, #4
 7472 017e 3249     		ldr	r1, .L349+4
 7473 0180 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 7474 0182 03F07F03 		and	r3, r3, #127
 7475 0186 1343     		orrs	r3, r3, r2
 7476 0188 3B61     		str	r3, [r7, #16]
2011:main.c        ****             testVal = theVal.f;
 7477              		.loc 1 2011 0
 7478 018a 3B69     		ldr	r3, [r7, #16]	@ float
 7479 018c 364A     		ldr	r2, .L349+36
 7480 018e 1360     		str	r3, [r2]	@ float
2012:main.c        ****             if (presetArraySection == initialVals)
 7481              		.loc 1 2012 0
 7482 0190 304B     		ldr	r3, .L349+16
 7483 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7484 0194 022B     		cmp	r3, #2
 7485 0196 40F0B980 		bne	.L305
2013:main.c        ****             {
2014:main.c        **** 
2015:main.c        ****                 if (currentFloat == 0)
 7486              		.loc 1 2015 0
 7487 019a 2D4B     		ldr	r3, .L349+12
 7488 019c 1B68     		ldr	r3, [r3]
 7489 019e 002B     		cmp	r3, #0
 7490 01a0 22D1     		bne	.L306
2016:main.c        ****                 {
2017:main.c        ****                     valsCount = (uint16_t) theVal.f;
 7491              		.loc 1 2017 0
 7492 01a2 3B69     		ldr	r3, [r7, #16]	@ float
 7493 01a4 1846     		mov	r0, r3
 7494 01a6 FFF7FEFF 		bl	__aeabi_f2uiz
 7495 01aa 0346     		mov	r3, r0
 7496 01ac 9AB2     		uxth	r2, r3
 7497 01ae 2F4B     		ldr	r3, .L349+40
 7498 01b0 1A80     		strh	r2, [r3]	@ movhi
2018:main.c        ****                     presetArray[valsStart + currentFloat++] = valsCount >> 8;
 7499              		.loc 1 2018 0
 7500 01b2 BA8E     		ldrh	r2, [r7, #52]
 7501 01b4 264B     		ldr	r3, .L349+12
 7502 01b6 1B68     		ldr	r3, [r3]
 7503 01b8 591C     		adds	r1, r3, #1
 7504 01ba 2548     		ldr	r0, .L349+12
 7505 01bc 0160     		str	r1, [r0]
 7506 01be 1344     		add	r3, r3, r2
 7507 01c0 2A4A     		ldr	r2, .L349+40
 7508 01c2 1288     		ldrh	r2, [r2]
 7509 01c4 120A     		lsrs	r2, r2, #8
 7510 01c6 92B2     		uxth	r2, r2
 7511 01c8 D1B2     		uxtb	r1, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 170


 7512 01ca 244A     		ldr	r2, .L349+24
 7513 01cc D154     		strb	r1, [r2, r3]
2019:main.c        ****                     presetArray[valsStart + currentFloat++] = valsCount & 0xff;
 7514              		.loc 1 2019 0
 7515 01ce BA8E     		ldrh	r2, [r7, #52]
 7516 01d0 1F4B     		ldr	r3, .L349+12
 7517 01d2 1B68     		ldr	r3, [r3]
 7518 01d4 591C     		adds	r1, r3, #1
 7519 01d6 1E48     		ldr	r0, .L349+12
 7520 01d8 0160     		str	r1, [r0]
 7521 01da 1344     		add	r3, r3, r2
 7522 01dc 234A     		ldr	r2, .L349+40
 7523 01de 1288     		ldrh	r2, [r2]
 7524 01e0 D1B2     		uxtb	r1, r2
 7525 01e2 1E4A     		ldr	r2, .L349+24
 7526 01e4 D154     		strb	r1, [r2, r3]
 7527 01e6 ECE1     		b	.L312
 7528              	.L306:
2020:main.c        ****                 }
2021:main.c        ****                 else if (currentFloat < ((valsCount+1)*2))
 7529              		.loc 1 2021 0
 7530 01e8 204B     		ldr	r3, .L349+40
 7531 01ea 1B88     		ldrh	r3, [r3]
 7532 01ec 0133     		adds	r3, r3, #1
 7533 01ee 5B00     		lsls	r3, r3, #1
 7534 01f0 1A46     		mov	r2, r3
 7535 01f2 174B     		ldr	r3, .L349+12
 7536 01f4 1B68     		ldr	r3, [r3]
 7537 01f6 9A42     		cmp	r2, r3
 7538 01f8 3CD9     		bls	.L308
 7539              	.LBB45:
2022:main.c        ****                 { 
2023:main.c        ****                     uint16_t intVal = (uint16_t)(theVal.f * 65535.0f);
 7540              		.loc 1 2023 0
 7541 01fa 3B69     		ldr	r3, [r7, #16]	@ float
 7542 01fc 1C49     		ldr	r1, .L349+44
 7543 01fe 1846     		mov	r0, r3
 7544 0200 FFF7FEFF 		bl	__aeabi_fmul
 7545 0204 0346     		mov	r3, r0
 7546 0206 1846     		mov	r0, r3
 7547 0208 FFF7FEFF 		bl	__aeabi_f2uiz
 7548 020c 0346     		mov	r3, r0
 7549 020e 7B86     		strh	r3, [r7, #50]	@ movhi
2024:main.c        ****                     presetArray[valsStart + currentFloat++] = intVal >> 8;
 7550              		.loc 1 2024 0
 7551 0210 BA8E     		ldrh	r2, [r7, #52]
 7552 0212 0F4B     		ldr	r3, .L349+12
 7553 0214 1B68     		ldr	r3, [r3]
 7554 0216 591C     		adds	r1, r3, #1
 7555 0218 0D48     		ldr	r0, .L349+12
 7556 021a 0160     		str	r1, [r0]
 7557 021c 1344     		add	r3, r3, r2
 7558 021e 7A8E     		ldrh	r2, [r7, #50]
 7559 0220 120A     		lsrs	r2, r2, #8
 7560 0222 92B2     		uxth	r2, r2
 7561 0224 D1B2     		uxtb	r1, r2
 7562 0226 0D4A     		ldr	r2, .L349+24
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 171


 7563 0228 D154     		strb	r1, [r2, r3]
2025:main.c        ****                     presetArray[valsStart + currentFloat++] = intVal & 0xff;
 7564              		.loc 1 2025 0
 7565 022a BA8E     		ldrh	r2, [r7, #52]
 7566 022c 084B     		ldr	r3, .L349+12
 7567 022e 1B68     		ldr	r3, [r3]
 7568 0230 591C     		adds	r1, r3, #1
 7569 0232 0748     		ldr	r0, .L349+12
 7570 0234 0160     		str	r1, [r0]
 7571 0236 1344     		add	r3, r3, r2
 7572 0238 7A8E     		ldrh	r2, [r7, #50]	@ movhi
 7573 023a D1B2     		uxtb	r1, r2
 7574 023c 074A     		ldr	r2, .L349+24
 7575 023e D154     		strb	r1, [r2, r3]
 7576              	.LBE45:
 7577 0240 BFE1     		b	.L312
 7578              	.L350:
 7579 0242 00BF     		.align	2
 7580              	.L349:
 7581 0244 00000000 		.word	parsingSysex
 7582 0248 00000000 		.word	sysexBuffer
 7583 024c 00000000 		.word	sysexMessageInProgress
 7584 0250 00000000 		.word	currentFloat
 7585 0254 00000000 		.word	presetArraySection
 7586 0258 00000000 		.word	presetNumberToWrite
 7587 025c 00000000 		.word	presetArray
 7588 0260 00000000 		.word	presetNamesArray
 7589 0264 00000000 		.word	macroNamesArray
 7590 0268 00000000 		.word	testVal
 7591 026c 00000000 		.word	valsCount
 7592 0270 00FF7F47 		.word	1199570688
 7593              	.L308:
2026:main.c        ****                 }
2027:main.c        ****                 else if (currentFloat == ((valsCount+1)*2))
 7594              		.loc 1 2027 0
 7595 0274 9C4B     		ldr	r3, .L351
 7596 0276 1B88     		ldrh	r3, [r3]
 7597 0278 0133     		adds	r3, r3, #1
 7598 027a 5B00     		lsls	r3, r3, #1
 7599 027c 1A46     		mov	r2, r3
 7600 027e 9B4B     		ldr	r3, .L351+4
 7601 0280 1B68     		ldr	r3, [r3]
 7602 0282 9A42     		cmp	r2, r3
 7603 0284 40F09D81 		bne	.L312
2028:main.c        ****                 {
2029:main.c        ****                     valCheck = theVal.f;
 7604              		.loc 1 2029 0
 7605 0288 3B69     		ldr	r3, [r7, #16]	@ float
 7606 028a 994A     		ldr	r2, .L351+8
 7607 028c 1360     		str	r3, [r2]	@ float
2030:main.c        ****                     if ((valCheck < -1.5f) && (valCheck > -2.5f))
 7608              		.loc 1 2030 0
 7609 028e 984B     		ldr	r3, .L351+8
 7610 0290 1B68     		ldr	r3, [r3]	@ float
 7611 0292 9849     		ldr	r1, .L351+12
 7612 0294 1846     		mov	r0, r3
 7613 0296 FFF7FEFF 		bl	__aeabi_fcmplt
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 172


 7614 029a 0346     		mov	r3, r0
 7615 029c 002B     		cmp	r3, #0
 7616 029e 23D0     		beq	.L309
 7617              		.loc 1 2030 0 is_stmt 0 discriminator 1
 7618 02a0 934B     		ldr	r3, .L351+8
 7619 02a2 1B68     		ldr	r3, [r3]	@ float
 7620 02a4 9449     		ldr	r1, .L351+16
 7621 02a6 1846     		mov	r0, r3
 7622 02a8 FFF7FEFF 		bl	__aeabi_fcmpgt
 7623 02ac 0346     		mov	r3, r0
 7624 02ae 002B     		cmp	r3, #0
 7625 02b0 1AD0     		beq	.L309
2031:main.c        ****                     {
2032:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xef;
 7626              		.loc 1 2032 0 is_stmt 1
 7627 02b2 BA8E     		ldrh	r2, [r7, #52]
 7628 02b4 8D4B     		ldr	r3, .L351+4
 7629 02b6 1B68     		ldr	r3, [r3]
 7630 02b8 591C     		adds	r1, r3, #1
 7631 02ba 8C48     		ldr	r0, .L351+4
 7632 02bc 0160     		str	r1, [r0]
 7633 02be 1344     		add	r3, r3, r2
 7634 02c0 8E4A     		ldr	r2, .L351+20
 7635 02c2 EF21     		movs	r1, #239
 7636 02c4 D154     		strb	r1, [r2, r3]
2033:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xef;
 7637              		.loc 1 2033 0
 7638 02c6 BA8E     		ldrh	r2, [r7, #52]
 7639 02c8 884B     		ldr	r3, .L351+4
 7640 02ca 1B68     		ldr	r3, [r3]
 7641 02cc 591C     		adds	r1, r3, #1
 7642 02ce 8748     		ldr	r0, .L351+4
 7643 02d0 0160     		str	r1, [r0]
 7644 02d2 1344     		add	r3, r3, r2
 7645 02d4 894A     		ldr	r2, .L351+20
 7646 02d6 EF21     		movs	r1, #239
 7647 02d8 D154     		strb	r1, [r2, r3]
2034:main.c        ****                         presetArraySection = mapCountNext;
 7648              		.loc 1 2034 0
 7649 02da 894B     		ldr	r3, .L351+24
 7650 02dc 0322     		movs	r2, #3
 7651 02de 1A70     		strb	r2, [r3]
2035:main.c        ****                         mapCount = 0;
 7652              		.loc 1 2035 0
 7653 02e0 884B     		ldr	r3, .L351+28
 7654 02e2 0022     		movs	r2, #0
 7655 02e4 1A60     		str	r2, [r3]
 7656 02e6 6CE1     		b	.L312
 7657              	.L309:
2036:main.c        ****                     }
2037:main.c        ****                     else
2038:main.c        ****                     {
2039:main.c        ****                         //error state
2040:main.c        ****                         SPI_errors++;
 7658              		.loc 1 2040 0
 7659 02e8 874B     		ldr	r3, .L351+32
 7660 02ea 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 173


 7661 02ec 0133     		adds	r3, r3, #1
 7662 02ee 864A     		ldr	r2, .L351+32
 7663 02f0 1360     		str	r3, [r2]
2041:main.c        ****                         sysexMessageInProgress = 0;
 7664              		.loc 1 2041 0
 7665 02f2 864B     		ldr	r3, .L351+36
 7666 02f4 0022     		movs	r2, #0
 7667 02f6 1A70     		strb	r2, [r3]
2042:main.c        ****                         sysexPointer = 0;
 7668              		.loc 1 2042 0
 7669 02f8 854B     		ldr	r3, .L351+40
 7670 02fa 0022     		movs	r2, #0
 7671 02fc 1A60     		str	r2, [r3]
2043:main.c        ****                         sendingMessage = 0;
 7672              		.loc 1 2043 0
 7673 02fe 854B     		ldr	r3, .L351+44
 7674 0300 0022     		movs	r2, #0
 7675 0302 1A70     		strb	r2, [r3]
2044:main.c        ****                         parseThatMF = 0;
 7676              		.loc 1 2044 0
 7677 0304 844B     		ldr	r3, .L351+48
 7678 0306 0022     		movs	r2, #0
 7679 0308 1A70     		strb	r2, [r3]
 7680 030a 5AE1     		b	.L312
 7681              	.L305:
2045:main.c        ****                     }
2046:main.c        ****                 }
2047:main.c        ****             }
2048:main.c        ****             else if (presetArraySection == mapCountNext)
 7682              		.loc 1 2048 0
 7683 030c 7C4B     		ldr	r3, .L351+24
 7684 030e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7685 0310 032B     		cmp	r3, #3
 7686 0312 28D1     		bne	.L313
2049:main.c        ****             {
2050:main.c        ****                 mapCountExpectation = (uint16_t)theVal.f;
 7687              		.loc 1 2050 0
 7688 0314 3B69     		ldr	r3, [r7, #16]	@ float
 7689 0316 1846     		mov	r0, r3
 7690 0318 FFF7FEFF 		bl	__aeabi_f2uiz
 7691 031c 0346     		mov	r3, r0
 7692 031e 9AB2     		uxth	r2, r3
 7693 0320 7E4B     		ldr	r3, .L351+52
 7694 0322 1A80     		strh	r2, [r3]	@ movhi
2051:main.c        ****                 presetArray[valsStart + currentFloat++] = mapCountExpectation >> 8;
 7695              		.loc 1 2051 0
 7696 0324 BA8E     		ldrh	r2, [r7, #52]
 7697 0326 714B     		ldr	r3, .L351+4
 7698 0328 1B68     		ldr	r3, [r3]
 7699 032a 591C     		adds	r1, r3, #1
 7700 032c 6F48     		ldr	r0, .L351+4
 7701 032e 0160     		str	r1, [r0]
 7702 0330 1344     		add	r3, r3, r2
 7703 0332 7A4A     		ldr	r2, .L351+52
 7704 0334 1288     		ldrh	r2, [r2]
 7705 0336 120A     		lsrs	r2, r2, #8
 7706 0338 92B2     		uxth	r2, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 174


 7707 033a D1B2     		uxtb	r1, r2
 7708 033c 6F4A     		ldr	r2, .L351+20
 7709 033e D154     		strb	r1, [r2, r3]
2052:main.c        ****                 presetArray[valsStart + currentFloat++] = mapCountExpectation & 0xff;
 7710              		.loc 1 2052 0
 7711 0340 BA8E     		ldrh	r2, [r7, #52]
 7712 0342 6A4B     		ldr	r3, .L351+4
 7713 0344 1B68     		ldr	r3, [r3]
 7714 0346 591C     		adds	r1, r3, #1
 7715 0348 6848     		ldr	r0, .L351+4
 7716 034a 0160     		str	r1, [r0]
 7717 034c 1344     		add	r3, r3, r2
 7718 034e 734A     		ldr	r2, .L351+52
 7719 0350 1288     		ldrh	r2, [r2]
 7720 0352 D1B2     		uxtb	r1, r2
 7721 0354 694A     		ldr	r2, .L351+20
 7722 0356 D154     		strb	r1, [r2, r3]
2053:main.c        ****                 presetArraySection = mapping;
 7723              		.loc 1 2053 0
 7724 0358 694B     		ldr	r3, .L351+24
 7725 035a 0422     		movs	r2, #4
 7726 035c 1A70     		strb	r2, [r3]
2054:main.c        ****                 numMappings = 0;
 7727              		.loc 1 2054 0
 7728 035e 704B     		ldr	r3, .L351+56
 7729 0360 0022     		movs	r2, #0
 7730 0362 1A80     		strh	r2, [r3]	@ movhi
 7731 0364 2DE1     		b	.L312
 7732              	.L313:
2055:main.c        ****             }
2056:main.c        ****             else if (presetArraySection == mapping)
 7733              		.loc 1 2056 0
 7734 0366 664B     		ldr	r3, .L351+24
 7735 0368 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7736 036a 042B     		cmp	r3, #4
 7737 036c 40F02981 		bne	.L312
2057:main.c        ****             {
2058:main.c        ****                 // this is the order
2059:main.c        ****                 // source (int), target (int), scalarSource (arrives as -1.0f if no scalar, send as
2060:main.c        ****                 if (numMappings < mapCountExpectation)
 7738              		.loc 1 2060 0
 7739 0370 6B4B     		ldr	r3, .L351+56
 7740 0372 1A88     		ldrh	r2, [r3]
 7741 0374 694B     		ldr	r3, .L351+52
 7742 0376 1B88     		ldrh	r3, [r3]
 7743 0378 9A42     		cmp	r2, r3
 7744 037a 80F0D780 		bcs	.L314
2061:main.c        ****                 {
2062:main.c        ****                     if ((mapCount % 5) == 0)
 7745              		.loc 1 2062 0
 7746 037e 614B     		ldr	r3, .L351+28
 7747 0380 1968     		ldr	r1, [r3]
 7748 0382 684B     		ldr	r3, .L351+60
 7749 0384 A3FB0123 		umull	r2, r3, r3, r1
 7750 0388 9A08     		lsrs	r2, r3, #2
 7751 038a 1346     		mov	r3, r2
 7752 038c 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 175


 7753 038e 1344     		add	r3, r3, r2
 7754 0390 CA1A     		subs	r2, r1, r3
 7755 0392 002A     		cmp	r2, #0
 7756 0394 0FD1     		bne	.L315
2063:main.c        ****                     {
2064:main.c        ****                         presetArray[valsStart + currentFloat++] = (uint8_t)theVal.f;
 7757              		.loc 1 2064 0
 7758 0396 BA8E     		ldrh	r2, [r7, #52]
 7759 0398 544B     		ldr	r3, .L351+4
 7760 039a 1B68     		ldr	r3, [r3]
 7761 039c 591C     		adds	r1, r3, #1
 7762 039e 5348     		ldr	r0, .L351+4
 7763 03a0 0160     		str	r1, [r0]
 7764 03a2 D418     		adds	r4, r2, r3
 7765 03a4 3B69     		ldr	r3, [r7, #16]	@ float
 7766 03a6 1846     		mov	r0, r3
 7767 03a8 FFF7FEFF 		bl	__aeabi_f2uiz
 7768 03ac 0346     		mov	r3, r0
 7769 03ae DAB2     		uxtb	r2, r3
 7770 03b0 524B     		ldr	r3, .L351+20
 7771 03b2 1A55     		strb	r2, [r3, r4]
 7772 03b4 91E0     		b	.L316
 7773              	.L315:
2065:main.c        ****                     }
2066:main.c        ****                     else if  (mapCount % 5 == 1)
 7774              		.loc 1 2066 0
 7775 03b6 534B     		ldr	r3, .L351+28
 7776 03b8 1968     		ldr	r1, [r3]
 7777 03ba 5A4B     		ldr	r3, .L351+60
 7778 03bc A3FB0123 		umull	r2, r3, r3, r1
 7779 03c0 9A08     		lsrs	r2, r3, #2
 7780 03c2 1346     		mov	r3, r2
 7781 03c4 9B00     		lsls	r3, r3, #2
 7782 03c6 1344     		add	r3, r3, r2
 7783 03c8 CA1A     		subs	r2, r1, r3
 7784 03ca 012A     		cmp	r2, #1
 7785 03cc 0FD1     		bne	.L317
2067:main.c        ****                     {
2068:main.c        ****                         presetArray[valsStart + currentFloat++] = (uint8_t)theVal.f;
 7786              		.loc 1 2068 0
 7787 03ce BA8E     		ldrh	r2, [r7, #52]
 7788 03d0 464B     		ldr	r3, .L351+4
 7789 03d2 1B68     		ldr	r3, [r3]
 7790 03d4 591C     		adds	r1, r3, #1
 7791 03d6 4548     		ldr	r0, .L351+4
 7792 03d8 0160     		str	r1, [r0]
 7793 03da D418     		adds	r4, r2, r3
 7794 03dc 3B69     		ldr	r3, [r7, #16]	@ float
 7795 03de 1846     		mov	r0, r3
 7796 03e0 FFF7FEFF 		bl	__aeabi_f2uiz
 7797 03e4 0346     		mov	r3, r0
 7798 03e6 DAB2     		uxtb	r2, r3
 7799 03e8 444B     		ldr	r3, .L351+20
 7800 03ea 1A55     		strb	r2, [r3, r4]
 7801 03ec 75E0     		b	.L316
 7802              	.L317:
2069:main.c        ****                     }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 176


2070:main.c        ****                     else if (mapCount % 5 == 2) //check if the scalar source is -1 (if so send 255 
 7803              		.loc 1 2070 0
 7804 03ee 454B     		ldr	r3, .L351+28
 7805 03f0 1968     		ldr	r1, [r3]
 7806 03f2 4C4B     		ldr	r3, .L351+60
 7807 03f4 A3FB0123 		umull	r2, r3, r3, r1
 7808 03f8 9A08     		lsrs	r2, r3, #2
 7809 03fa 1346     		mov	r3, r2
 7810 03fc 9B00     		lsls	r3, r3, #2
 7811 03fe 1344     		add	r3, r3, r2
 7812 0400 CA1A     		subs	r2, r1, r3
 7813 0402 022A     		cmp	r2, #2
 7814 0404 23D1     		bne	.L318
2071:main.c        ****                     {
2072:main.c        ****                         if (theVal.f < 0.0f)
 7815              		.loc 1 2072 0
 7816 0406 3B69     		ldr	r3, [r7, #16]	@ float
 7817 0408 4FF00001 		mov	r1, #0
 7818 040c 1846     		mov	r0, r3
 7819 040e FFF7FEFF 		bl	__aeabi_fcmplt
 7820 0412 0346     		mov	r3, r0
 7821 0414 002B     		cmp	r3, #0
 7822 0416 0AD0     		beq	.L348
2073:main.c        ****                         {
2074:main.c        ****                              presetArray[valsStart + currentFloat++] = 0xff;
 7823              		.loc 1 2074 0
 7824 0418 BA8E     		ldrh	r2, [r7, #52]
 7825 041a 344B     		ldr	r3, .L351+4
 7826 041c 1B68     		ldr	r3, [r3]
 7827 041e 591C     		adds	r1, r3, #1
 7828 0420 3248     		ldr	r0, .L351+4
 7829 0422 0160     		str	r1, [r0]
 7830 0424 1344     		add	r3, r3, r2
 7831 0426 354A     		ldr	r2, .L351+20
 7832 0428 FF21     		movs	r1, #255
 7833 042a D154     		strb	r1, [r2, r3]
 7834 042c 55E0     		b	.L316
 7835              	.L348:
2075:main.c        ****                         }
2076:main.c        ****                         else
2077:main.c        ****                         {
2078:main.c        ****                              presetArray[valsStart + currentFloat++] = (uint8_t)theVal.f;
 7836              		.loc 1 2078 0
 7837 042e BA8E     		ldrh	r2, [r7, #52]
 7838 0430 2E4B     		ldr	r3, .L351+4
 7839 0432 1B68     		ldr	r3, [r3]
 7840 0434 591C     		adds	r1, r3, #1
 7841 0436 2D48     		ldr	r0, .L351+4
 7842 0438 0160     		str	r1, [r0]
 7843 043a D418     		adds	r4, r2, r3
 7844 043c 3B69     		ldr	r3, [r7, #16]	@ float
 7845 043e 1846     		mov	r0, r3
 7846 0440 FFF7FEFF 		bl	__aeabi_f2uiz
 7847 0444 0346     		mov	r3, r0
 7848 0446 DAB2     		uxtb	r2, r3
 7849 0448 2C4B     		ldr	r3, .L351+20
 7850 044a 1A55     		strb	r2, [r3, r4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 177


 7851 044c 45E0     		b	.L316
 7852              	.L318:
2079:main.c        ****                         }
2080:main.c        ****                     }
2081:main.c        ****                     else if (mapCount % 5 == 3)
 7853              		.loc 1 2081 0
 7854 044e 2D4B     		ldr	r3, .L351+28
 7855 0450 1968     		ldr	r1, [r3]
 7856 0452 344B     		ldr	r3, .L351+60
 7857 0454 A3FB0123 		umull	r2, r3, r3, r1
 7858 0458 9A08     		lsrs	r2, r3, #2
 7859 045a 1346     		mov	r3, r2
 7860 045c 9B00     		lsls	r3, r3, #2
 7861 045e 1344     		add	r3, r3, r2
 7862 0460 CA1A     		subs	r2, r1, r3
 7863 0462 032A     		cmp	r2, #3
 7864 0464 24D1     		bne	.L322
 7865              	.LBB46:
2082:main.c        ****                     {
2083:main.c        ****                         int16_t intVal = (int16_t)(theVal.f * 32767.0f); //keep it signed to allow 
 7866              		.loc 1 2083 0
 7867 0466 3B69     		ldr	r3, [r7, #16]	@ float
 7868 0468 2F49     		ldr	r1, .L351+64
 7869 046a 1846     		mov	r0, r3
 7870 046c FFF7FEFF 		bl	__aeabi_fmul
 7871 0470 0346     		mov	r3, r0
 7872 0472 1846     		mov	r0, r3
 7873 0474 FFF7FEFF 		bl	__aeabi_f2iz
 7874 0478 0346     		mov	r3, r0
 7875 047a 3B86     		strh	r3, [r7, #48]	@ movhi
2084:main.c        ****                         presetArray[valsStart + currentFloat++] = intVal >> 8;
 7876              		.loc 1 2084 0
 7877 047c BA8E     		ldrh	r2, [r7, #52]
 7878 047e 1B4B     		ldr	r3, .L351+4
 7879 0480 1B68     		ldr	r3, [r3]
 7880 0482 591C     		adds	r1, r3, #1
 7881 0484 1948     		ldr	r0, .L351+4
 7882 0486 0160     		str	r1, [r0]
 7883 0488 1344     		add	r3, r3, r2
 7884 048a B7F93020 		ldrsh	r2, [r7, #48]
 7885 048e 1212     		asrs	r2, r2, #8
 7886 0490 12B2     		sxth	r2, r2
 7887 0492 D1B2     		uxtb	r1, r2
 7888 0494 194A     		ldr	r2, .L351+20
 7889 0496 D154     		strb	r1, [r2, r3]
2085:main.c        ****                         presetArray[valsStart + currentFloat++] = intVal & 0xff;
 7890              		.loc 1 2085 0
 7891 0498 BA8E     		ldrh	r2, [r7, #52]
 7892 049a 144B     		ldr	r3, .L351+4
 7893 049c 1B68     		ldr	r3, [r3]
 7894 049e 591C     		adds	r1, r3, #1
 7895 04a0 1248     		ldr	r0, .L351+4
 7896 04a2 0160     		str	r1, [r0]
 7897 04a4 1344     		add	r3, r3, r2
 7898 04a6 3A8E     		ldrh	r2, [r7, #48]	@ movhi
 7899 04a8 D1B2     		uxtb	r1, r2
 7900 04aa 144A     		ldr	r2, .L351+20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 178


 7901 04ac D154     		strb	r1, [r2, r3]
 7902              	.LBE46:
 7903 04ae 14E0     		b	.L316
 7904              	.L322:
2086:main.c        **** 
2087:main.c        ****                     }
2088:main.c        ****                     else
2089:main.c        ****                     {
2090:main.c        ****                         presetArray[valsStart + currentFloat++] = (uint8_t)theVal.f;
 7905              		.loc 1 2090 0
 7906 04b0 BA8E     		ldrh	r2, [r7, #52]
 7907 04b2 0E4B     		ldr	r3, .L351+4
 7908 04b4 1B68     		ldr	r3, [r3]
 7909 04b6 591C     		adds	r1, r3, #1
 7910 04b8 0C48     		ldr	r0, .L351+4
 7911 04ba 0160     		str	r1, [r0]
 7912 04bc D418     		adds	r4, r2, r3
 7913 04be 3B69     		ldr	r3, [r7, #16]	@ float
 7914 04c0 1846     		mov	r0, r3
 7915 04c2 FFF7FEFF 		bl	__aeabi_f2uiz
 7916 04c6 0346     		mov	r3, r0
 7917 04c8 DAB2     		uxtb	r2, r3
 7918 04ca 0C4B     		ldr	r3, .L351+20
 7919 04cc 1A55     		strb	r2, [r3, r4]
2091:main.c        ****                         numMappings++;
 7920              		.loc 1 2091 0
 7921 04ce 144B     		ldr	r3, .L351+56
 7922 04d0 1B88     		ldrh	r3, [r3]
 7923 04d2 0133     		adds	r3, r3, #1
 7924 04d4 9AB2     		uxth	r2, r3
 7925 04d6 124B     		ldr	r3, .L351+56
 7926 04d8 1A80     		strh	r2, [r3]	@ movhi
 7927              	.L316:
2092:main.c        ****                     }
2093:main.c        ****                     mapCount++;
 7928              		.loc 1 2093 0
 7929 04da 0A4B     		ldr	r3, .L351+28
 7930 04dc 1B68     		ldr	r3, [r3]
 7931 04de 0133     		adds	r3, r3, #1
 7932 04e0 084A     		ldr	r2, .L351+28
 7933 04e2 1360     		str	r3, [r2]
 7934 04e4 6DE0     		b	.L312
 7935              	.L352:
 7936 04e6 00BF     		.align	2
 7937              	.L351:
 7938 04e8 00000000 		.word	valsCount
 7939 04ec 00000000 		.word	currentFloat
 7940 04f0 00000000 		.word	valCheck
 7941 04f4 0000C0BF 		.word	-1077936128
 7942 04f8 000020C0 		.word	-1071644672
 7943 04fc 00000000 		.word	presetArray
 7944 0500 00000000 		.word	presetArraySection
 7945 0504 00000000 		.word	mapCount
 7946 0508 00000000 		.word	SPI_errors
 7947 050c 00000000 		.word	sysexMessageInProgress
 7948 0510 00000000 		.word	sysexPointer
 7949 0514 00000000 		.word	sendingMessage
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 179


 7950 0518 00000000 		.word	parseThatMF
 7951 051c 00000000 		.word	mapCountExpectation
 7952 0520 00000000 		.word	numMappings
 7953 0524 CDCCCCCC 		.word	-858993459
 7954 0528 00FEFF46 		.word	1191181824
 7955              	.L314:
2094:main.c        ****                 }
2095:main.c        ****                 
2096:main.c        **** 
2097:main.c        ****                 else
2098:main.c        ****                 {
2099:main.c        ****                     //mapcount ended
2100:main.c        ****                     if ((theVal.f < -2.5f) && (theVal.f > -3.5f))
 7956              		.loc 1 2100 0
 7957 052c 3B69     		ldr	r3, [r7, #16]	@ float
 7958 052e 6649     		ldr	r1, .L353
 7959 0530 1846     		mov	r0, r3
 7960 0532 FFF7FEFF 		bl	__aeabi_fcmplt
 7961 0536 0346     		mov	r3, r0
 7962 0538 002B     		cmp	r3, #0
 7963 053a 31D0     		beq	.L323
 7964              		.loc 1 2100 0 is_stmt 0 discriminator 1
 7965 053c 3B69     		ldr	r3, [r7, #16]	@ float
 7966 053e 6349     		ldr	r1, .L353+4
 7967 0540 1846     		mov	r0, r3
 7968 0542 FFF7FEFF 		bl	__aeabi_fcmpgt
 7969 0546 0346     		mov	r3, r0
 7970 0548 002B     		cmp	r3, #0
 7971 054a 29D0     		beq	.L323
2101:main.c        ****                     {
2102:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xfe;
 7972              		.loc 1 2102 0 is_stmt 1
 7973 054c BA8E     		ldrh	r2, [r7, #52]
 7974 054e 604B     		ldr	r3, .L353+8
 7975 0550 1B68     		ldr	r3, [r3]
 7976 0552 591C     		adds	r1, r3, #1
 7977 0554 5E48     		ldr	r0, .L353+8
 7978 0556 0160     		str	r1, [r0]
 7979 0558 1344     		add	r3, r3, r2
 7980 055a 5E4A     		ldr	r2, .L353+12
 7981 055c FE21     		movs	r1, #254
 7982 055e D154     		strb	r1, [r2, r3]
2103:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xfe;
 7983              		.loc 1 2103 0
 7984 0560 BA8E     		ldrh	r2, [r7, #52]
 7985 0562 5B4B     		ldr	r3, .L353+8
 7986 0564 1B68     		ldr	r3, [r3]
 7987 0566 591C     		adds	r1, r3, #1
 7988 0568 5948     		ldr	r0, .L353+8
 7989 056a 0160     		str	r1, [r0]
 7990 056c 1344     		add	r3, r3, r2
 7991 056e 594A     		ldr	r2, .L353+12
 7992 0570 FE21     		movs	r1, #254
 7993 0572 D154     		strb	r1, [r2, r3]
2104:main.c        ****                         presetArraySection = presetEnd;
 7994              		.loc 1 2104 0
 7995 0574 584B     		ldr	r3, .L353+16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 180


 7996 0576 0522     		movs	r2, #5
 7997 0578 1A70     		strb	r2, [r3]
2105:main.c        ****                         sysexMessageInProgress = 0;
 7998              		.loc 1 2105 0
 7999 057a 584B     		ldr	r3, .L353+20
 8000 057c 0022     		movs	r2, #0
 8001 057e 1A70     		strb	r2, [r3]
2106:main.c        ****                         sendingMessage = 1;
 8002              		.loc 1 2106 0
 8003 0580 574B     		ldr	r3, .L353+24
 8004 0582 0122     		movs	r2, #1
 8005 0584 1A70     		strb	r2, [r3]
2107:main.c        ****                         patchNum = presetNumberToWrite;
 8006              		.loc 1 2107 0
 8007 0586 574B     		ldr	r3, .L353+28
 8008 0588 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 8009 058a 574B     		ldr	r3, .L353+32
 8010 058c 1A70     		strb	r2, [r3]
2108:main.c        ****                         messageArraySize = valsStart + currentFloat;
 8011              		.loc 1 2108 0
 8012 058e 504B     		ldr	r3, .L353+8
 8013 0590 1B68     		ldr	r3, [r3]
 8014 0592 9AB2     		uxth	r2, r3
 8015 0594 BB8E     		ldrh	r3, [r7, #52]	@ movhi
 8016 0596 1344     		add	r3, r3, r2
 8017 0598 9AB2     		uxth	r2, r3
 8018 059a 544B     		ldr	r3, .L353+36
 8019 059c 1A80     		strh	r2, [r3]	@ movhi
 8020 059e 10E0     		b	.L312
 8021              	.L323:
2109:main.c        ****                     }
2110:main.c        ****                     else
2111:main.c        ****                     {
2112:main.c        ****                         //error state
2113:main.c        ****                         SPI_errors++;
 8022              		.loc 1 2113 0
 8023 05a0 534B     		ldr	r3, .L353+40
 8024 05a2 1B68     		ldr	r3, [r3]
 8025 05a4 0133     		adds	r3, r3, #1
 8026 05a6 524A     		ldr	r2, .L353+40
 8027 05a8 1360     		str	r3, [r2]
2114:main.c        ****                         sysexMessageInProgress = 0;
 8028              		.loc 1 2114 0
 8029 05aa 4C4B     		ldr	r3, .L353+20
 8030 05ac 0022     		movs	r2, #0
 8031 05ae 1A70     		strb	r2, [r3]
2115:main.c        ****                         sysexPointer = 0;
 8032              		.loc 1 2115 0
 8033 05b0 504B     		ldr	r3, .L353+44
 8034 05b2 0022     		movs	r2, #0
 8035 05b4 1A60     		str	r2, [r3]
2116:main.c        ****                         sendingMessage = 0;
 8036              		.loc 1 2116 0
 8037 05b6 4A4B     		ldr	r3, .L353+24
 8038 05b8 0022     		movs	r2, #0
 8039 05ba 1A70     		strb	r2, [r3]
2117:main.c        ****                         parseThatMF = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 181


 8040              		.loc 1 2117 0
 8041 05bc 4E4B     		ldr	r3, .L353+48
 8042 05be 0022     		movs	r2, #0
 8043 05c0 1A70     		strb	r2, [r3]
 8044              	.L312:
2003:main.c        ****         {
 8045              		.loc 1 2003 0
 8046 05c2 FB6C     		ldr	r3, [r7, #76]
 8047 05c4 0533     		adds	r3, r3, #5
 8048 05c6 FB64     		str	r3, [r7, #76]
 8049              	.L304:
2003:main.c        ****         {
 8050              		.loc 1 2003 0 is_stmt 0 discriminator 1
 8051 05c8 4A4B     		ldr	r3, .L353+44
 8052 05ca 1B68     		ldr	r3, [r3]
 8053 05cc FA6C     		ldr	r2, [r7, #76]
 8054 05ce 9A42     		cmp	r2, r3
 8055 05d0 FFF4B0AD 		bcc	.L326
 8056 05d4 F0E2     		b	.L327
 8057              	.L297:
 8058              	.LBE42:
2118:main.c        ****                     }
2119:main.c        ****                 }
2120:main.c        ****             }
2121:main.c        ****             
2122:main.c        ****         }
2123:main.c        ****     }
2124:main.c        ****     #if 0
2125:main.c        ****     else if (sysexBuffer[0] == 1) //its a tuning
2126:main.c        ****     {
2127:main.c        ****         
2128:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
2129:main.c        ****         currentFloat = 0;
2130:main.c        ****         presetNumberToWrite = sysexBuffer[1];
2131:main.c        ****         union breakFloat theVal;
2132:main.c        ****         for (uint32_t i = 2; i < sysexPointer; i = i+5)
2133:main.c        ****         {
2134:main.c        ****             theVal.u32 = 0;
2135:main.c        ****             theVal.u32 |= ((sysexBuffer[i] &15) << 28);
2136:main.c        ****             theVal.u32 |= (sysexBuffer[i+1] << 21);
2137:main.c        ****             theVal.u32 |= (sysexBuffer[i+2] << 14);
2138:main.c        ****             theVal.u32 |= (sysexBuffer[i+3] << 7);
2139:main.c        ****             theVal.u32 |= (sysexBuffer[i+4] & 127);
2140:main.c        ****             testVal = theVal.f;
2141:main.c        ****             uint16_t intVal = (uint16_t)(theVal.f * 512.0f);//(uint16_t)(theVal.f * 65535.0f);
2142:main.c        ****             tuningArray[currentFloat++] = intVal >> 8;
2143:main.c        ****             tuningArray[currentFloat++] = intVal & 0xff;
2144:main.c        ****         }
2145:main.c        ****         
2146:main.c        ****         tuningArray[currentFloat++] = 0xef;
2147:main.c        ****         tuningArray[currentFloat++] = 0xef;
2148:main.c        ****                         
2149:main.c        ****         
2150:main.c        ****         messageArraySize = currentFloat;
2151:main.c        ****                     
2152:main.c        ****         if(messageArraySize != TUNING_ARRAY_SIZE)
2153:main.c        ****         {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 182


2154:main.c        ****             //error state
2155:main.c        ****             SPI_errors++;
2156:main.c        ****             sysexMessageInProgress = 0;
2157:main.c        ****             sysexPointer = 0;
2158:main.c        ****             sendingMessage = 0;
2159:main.c        ****             parseThatMF = 0;
2160:main.c        ****         } else 
2161:main.c        ****         {
2162:main.c        ****             sysexMessageInProgress = 0;
2163:main.c        ****             sendingMessage = 2;
2164:main.c        ****         }
2165:main.c        ****     }
2166:main.c        ****     #endif
2167:main.c        ****     
2168:main.c        **** 
2169:main.c        ****     
2170:main.c        ****     else if (sysexBuffer[0] == 2) //its a copedent
 8059              		.loc 1 2170 0 is_stmt 1
 8060 05d6 494B     		ldr	r3, .L353+52
 8061 05d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8062 05da 022B     		cmp	r3, #2
 8063 05dc 40F08281 		bne	.L328
 8064              	.LBB47:
2171:main.c        ****     {
2172:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
 8065              		.loc 1 2172 0
 8066 05e0 3E4B     		ldr	r3, .L353+20
 8067 05e2 0122     		movs	r2, #1
 8068 05e4 1A70     		strb	r2, [r3]
2173:main.c        ****         currentFloat = 0;
 8069              		.loc 1 2173 0
 8070 05e6 3A4B     		ldr	r3, .L353+8
 8071 05e8 0022     		movs	r2, #0
 8072 05ea 1A60     		str	r2, [r3]
2174:main.c        ****         copedentNumberToWrite = sysexBuffer[1];
 8073              		.loc 1 2174 0
 8074 05ec 434B     		ldr	r3, .L353+52
 8075 05ee 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 8076 05f0 434B     		ldr	r3, .L353+56
 8077 05f2 1A70     		strb	r2, [r3]
2175:main.c        ****         currentCopedent = copedentNumberToWrite;
 8078              		.loc 1 2175 0
 8079 05f4 424B     		ldr	r3, .L353+56
 8080 05f6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 8081 05f8 424B     		ldr	r3, .L353+60
 8082 05fa 1A70     		strb	r2, [r3]
2176:main.c        ****         necks[currentNeck] = currentCopedent;
 8083              		.loc 1 2176 0
 8084 05fc 424B     		ldr	r3, .L353+64
 8085 05fe 1B68     		ldr	r3, [r3]
 8086 0600 404A     		ldr	r2, .L353+60
 8087 0602 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 8088 0604 414A     		ldr	r2, .L353+68
 8089 0606 D154     		strb	r1, [r2, r3]
2177:main.c        **** 
2178:main.c        ****               
2179:main.c        ****         
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 183


2180:main.c        ****         union breakFloat theVal;
2181:main.c        ****         uint32_t i = 2;
 8090              		.loc 1 2181 0
 8091 0608 0223     		movs	r3, #2
 8092 060a 3B64     		str	r3, [r7, #64]
2182:main.c        ****         uint8_t stoppingPoint = NAME_LENGTH_IN_BYTES+2;
 8093              		.loc 1 2182 0
 8094 060c 1023     		movs	r3, #16
 8095 060e 87F82F30 		strb	r3, [r7, #47]
2183:main.c        ****         for (; i < stoppingPoint; i++)
 8096              		.loc 1 2183 0
 8097 0612 43E0     		b	.L329
 8098              	.L330:
 8099              	.LBB48:
2184:main.c        ****         {
2185:main.c        ****             //presetArray[i-2] = sysexBuffer[i] & 127; // pass on the first 14 elements as 8-bit by
2186:main.c        ****             uint8_t tempChar = sysexBuffer[i] & 127;
 8100              		.loc 1 2186 0 discriminator 2
 8101 0614 394A     		ldr	r2, .L353+52
 8102 0616 3B6C     		ldr	r3, [r7, #64]
 8103 0618 1344     		add	r3, r3, r2
 8104 061a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8105 061c 03F07F03 		and	r3, r3, #127
 8106 0620 87F82E30 		strb	r3, [r7, #46]
2187:main.c        ****             copedentNamesArray[copedentNumberToWrite][i-2] = tempChar;
 8107              		.loc 1 2187 0 discriminator 2
 8108 0624 364B     		ldr	r3, .L353+56
 8109 0626 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8110 0628 1846     		mov	r0, r3
 8111 062a 3B6C     		ldr	r3, [r7, #64]
 8112 062c 9A1E     		subs	r2, r3, #2
 8113 062e 3849     		ldr	r1, .L353+72
 8114 0630 0346     		mov	r3, r0
 8115 0632 DB00     		lsls	r3, r3, #3
 8116 0634 1B1A     		subs	r3, r3, r0
 8117 0636 5B00     		lsls	r3, r3, #1
 8118 0638 0B44     		add	r3, r3, r1
 8119 063a 1344     		add	r3, r3, r2
 8120 063c 97F82E20 		ldrb	r2, [r7, #46]
 8121 0640 1A70     		strb	r2, [r3]
2188:main.c        ****             checkBase = EEPROM_COPEDENT_OFFSET + (COPEDENT_SIZE_IN_BYTES * copedentNumberToWrite);
 8122              		.loc 1 2188 0 discriminator 2
 8123 0642 2F4B     		ldr	r3, .L353+56
 8124 0644 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8125 0646 9BB2     		uxth	r3, r3
 8126 0648 1A46     		mov	r2, r3	@ movhi
 8127 064a 1201     		lsls	r2, r2, #4
 8128 064c 1A44     		add	r2, r2, r3
 8129 064e 9200     		lsls	r2, r2, #2
 8130 0650 1A44     		add	r2, r2, r3
 8131 0652 5200     		lsls	r2, r2, #1
 8132 0654 1344     		add	r3, r3, r2
 8133 0656 5B00     		lsls	r3, r3, #1
 8134 0658 9AB2     		uxth	r2, r3
 8135 065a 2E4B     		ldr	r3, .L353+76
 8136 065c 1A80     		strh	r2, [r3]	@ movhi
2189:main.c        ****             checkStatus = EEPROM_WriteByte(tempChar, EEPROM_COPEDENT_OFFSET + (i - 2) + (COPEDENT_S
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 184


 8137              		.loc 1 2189 0 discriminator 2
 8138 065e 284B     		ldr	r3, .L353+56
 8139 0660 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8140 0662 9BB2     		uxth	r3, r3
 8141 0664 1A46     		mov	r2, r3	@ movhi
 8142 0666 1201     		lsls	r2, r2, #4
 8143 0668 1A44     		add	r2, r2, r3
 8144 066a 9200     		lsls	r2, r2, #2
 8145 066c 1A44     		add	r2, r2, r3
 8146 066e 5200     		lsls	r2, r2, #1
 8147 0670 1344     		add	r3, r3, r2
 8148 0672 5B00     		lsls	r3, r3, #1
 8149 0674 9AB2     		uxth	r2, r3
 8150 0676 3B6C     		ldr	r3, [r7, #64]
 8151 0678 9BB2     		uxth	r3, r3
 8152 067a 1344     		add	r3, r3, r2
 8153 067c 9BB2     		uxth	r3, r3
 8154 067e 023B     		subs	r3, r3, #2
 8155 0680 9AB2     		uxth	r2, r3
 8156 0682 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 8157 0686 1146     		mov	r1, r2
 8158 0688 1846     		mov	r0, r3
 8159 068a FFF7FEFF 		bl	EEPROM_WriteByte
 8160 068e 0346     		mov	r3, r0
 8161 0690 DAB2     		uxtb	r2, r3
 8162 0692 214B     		ldr	r3, .L353+80
 8163 0694 1A70     		strb	r2, [r3]
 8164              	.LBE48:
2183:main.c        ****         {
 8165              		.loc 1 2183 0 discriminator 2
 8166 0696 3B6C     		ldr	r3, [r7, #64]
 8167 0698 0133     		adds	r3, r3, #1
 8168 069a 3B64     		str	r3, [r7, #64]
 8169              	.L329:
2183:main.c        ****         {
 8170              		.loc 1 2183 0 is_stmt 0 discriminator 1
 8171 069c 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 8172 06a0 3B6C     		ldr	r3, [r7, #64]
 8173 06a2 9A42     		cmp	r2, r3
 8174 06a4 B6D8     		bhi	.L330
2190:main.c        ****         }
2191:main.c        ****         
2192:main.c        ****         i = NAME_LENGTH_IN_BYTES + 2; // start after the name storage to store the actual values
 8175              		.loc 1 2192 0 is_stmt 1
 8176 06a6 1023     		movs	r3, #16
 8177 06a8 3B64     		str	r3, [r7, #64]
2193:main.c        **** 
2194:main.c        ****  
2195:main.c        ****         while(i < sysexPointer)
 8178              		.loc 1 2195 0
 8179 06aa DCE0     		b	.L331
 8180              	.L336:
 8181              	.LBB49:
2196:main.c        ****         {
2197:main.c        ****             for (uint32_t pedalToWrite = 0; pedalToWrite < 11; pedalToWrite++)
 8182              		.loc 1 2197 0
 8183 06ac 0023     		movs	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 185


 8184 06ae FB63     		str	r3, [r7, #60]
 8185 06b0 D5E0     		b	.L332
 8186              	.L335:
 8187              	.LBB50:
2198:main.c        ****             {
2199:main.c        ****                 uint16_t pedalStartLoc = (pedalToWrite * 24);
 8188              		.loc 1 2199 0
 8189 06b2 FB6B     		ldr	r3, [r7, #60]
 8190 06b4 9BB2     		uxth	r3, r3
 8191 06b6 1A46     		mov	r2, r3	@ movhi
 8192 06b8 5200     		lsls	r2, r2, #1
 8193 06ba 1344     		add	r3, r3, r2
 8194 06bc DB00     		lsls	r3, r3, #3
 8195 06be BB85     		strh	r3, [r7, #44]	@ movhi
 8196              	.LBB51:
2200:main.c        ****                 for (uint32_t stringChange = 0; stringChange < 12; stringChange++)
 8197              		.loc 1 2200 0
 8198 06c0 0023     		movs	r3, #0
 8199 06c2 BB63     		str	r3, [r7, #56]
 8200 06c4 C4E0     		b	.L333
 8201              	.L354:
 8202 06c6 00BF     		.align	2
 8203              	.L353:
 8204 06c8 000020C0 		.word	-1071644672
 8205 06cc 000060C0 		.word	-1067450368
 8206 06d0 00000000 		.word	currentFloat
 8207 06d4 00000000 		.word	presetArray
 8208 06d8 00000000 		.word	presetArraySection
 8209 06dc 00000000 		.word	sysexMessageInProgress
 8210 06e0 00000000 		.word	sendingMessage
 8211 06e4 00000000 		.word	presetNumberToWrite
 8212 06e8 00000000 		.word	patchNum
 8213 06ec 00000000 		.word	messageArraySize
 8214 06f0 00000000 		.word	SPI_errors
 8215 06f4 00000000 		.word	sysexPointer
 8216 06f8 00000000 		.word	parseThatMF
 8217 06fc 00000000 		.word	sysexBuffer
 8218 0700 00000000 		.word	copedentNumberToWrite
 8219 0704 00000000 		.word	currentCopedent
 8220 0708 00000000 		.word	currentNeck
 8221 070c 00000000 		.word	necks
 8222 0710 00000000 		.word	copedentNamesArray
 8223 0714 00000000 		.word	checkBase
 8224 0718 00000000 		.word	checkStatus
 8225              	.L334:
 8226              	.LBB52:
2201:main.c        ****                 {
2202:main.c        ****                     
2203:main.c        ****                     theVal.u32 = 0;
 8227              		.loc 1 2203 0 discriminator 3
 8228 071c 0023     		movs	r3, #0
 8229 071e FB60     		str	r3, [r7, #12]
2204:main.c        ****                     theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 8230              		.loc 1 2204 0 discriminator 3
 8231 0720 FB68     		ldr	r3, [r7, #12]
 8232 0722 6449     		ldr	r1, .L355
 8233 0724 3A6C     		ldr	r2, [r7, #64]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 186


 8234 0726 0A44     		add	r2, r2, r1
 8235 0728 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8236 072a 1207     		lsls	r2, r2, #28
 8237 072c 1343     		orrs	r3, r3, r2
 8238 072e FB60     		str	r3, [r7, #12]
2205:main.c        ****                     theVal.u32 |= (sysexBuffer[i+1] << 21);
 8239              		.loc 1 2205 0 discriminator 3
 8240 0730 FB68     		ldr	r3, [r7, #12]
 8241 0732 3A6C     		ldr	r2, [r7, #64]
 8242 0734 0132     		adds	r2, r2, #1
 8243 0736 5F49     		ldr	r1, .L355
 8244 0738 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8245 073a 5205     		lsls	r2, r2, #21
 8246 073c 1343     		orrs	r3, r3, r2
 8247 073e FB60     		str	r3, [r7, #12]
2206:main.c        ****                     theVal.u32 |= (sysexBuffer[i+2] << 14);
 8248              		.loc 1 2206 0 discriminator 3
 8249 0740 FB68     		ldr	r3, [r7, #12]
 8250 0742 3A6C     		ldr	r2, [r7, #64]
 8251 0744 0232     		adds	r2, r2, #2
 8252 0746 5B49     		ldr	r1, .L355
 8253 0748 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8254 074a 9203     		lsls	r2, r2, #14
 8255 074c 1343     		orrs	r3, r3, r2
 8256 074e FB60     		str	r3, [r7, #12]
2207:main.c        ****                     theVal.u32 |= (sysexBuffer[i+3] << 7);
 8257              		.loc 1 2207 0 discriminator 3
 8258 0750 FB68     		ldr	r3, [r7, #12]
 8259 0752 3A6C     		ldr	r2, [r7, #64]
 8260 0754 0332     		adds	r2, r2, #3
 8261 0756 5749     		ldr	r1, .L355
 8262 0758 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8263 075a D201     		lsls	r2, r2, #7
 8264 075c 1343     		orrs	r3, r3, r2
 8265 075e FB60     		str	r3, [r7, #12]
2208:main.c        ****                     theVal.u32 |= (sysexBuffer[i+4] & 127);
 8266              		.loc 1 2208 0 discriminator 3
 8267 0760 FA68     		ldr	r2, [r7, #12]
 8268 0762 3B6C     		ldr	r3, [r7, #64]
 8269 0764 0433     		adds	r3, r3, #4
 8270 0766 5349     		ldr	r1, .L355
 8271 0768 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8272 076a 03F07F03 		and	r3, r3, #127
 8273 076e 1343     		orrs	r3, r3, r2
 8274 0770 FB60     		str	r3, [r7, #12]
2209:main.c        ****                     copedent[copedentNumberToWrite][pedalToWrite][stringChange] = theVal.f;
 8275              		.loc 1 2209 0 discriminator 3
 8276 0772 514B     		ldr	r3, .L355+4
 8277 0774 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8278 0776 1C46     		mov	r4, r3
 8279 0778 F968     		ldr	r1, [r7, #12]	@ float
 8280 077a 5048     		ldr	r0, .L355+8
 8281 077c FB6B     		ldr	r3, [r7, #60]
 8282 077e 1A46     		mov	r2, r3
 8283 0780 5200     		lsls	r2, r2, #1
 8284 0782 1A44     		add	r2, r2, r3
 8285 0784 9300     		lsls	r3, r2, #2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 187


 8286 0786 1A46     		mov	r2, r3
 8287 0788 2346     		mov	r3, r4
 8288 078a 5B01     		lsls	r3, r3, #5
 8289 078c 2344     		add	r3, r3, r4
 8290 078e 9B00     		lsls	r3, r3, #2
 8291 0790 1A44     		add	r2, r2, r3
 8292 0792 BB6B     		ldr	r3, [r7, #56]
 8293 0794 1344     		add	r3, r3, r2
 8294 0796 40F82310 		str	r1, [r0, r3, lsl #2]	@ float
2210:main.c        ****                     uint16_t tempIntVersion = (uint16_t)((theVal.f * 256.0f) + 32768.0f);
 8295              		.loc 1 2210 0 discriminator 3
 8296 079a FB68     		ldr	r3, [r7, #12]	@ float
 8297 079c 4FF08741 		mov	r1, #1132462080
 8298 07a0 1846     		mov	r0, r3
 8299 07a2 FFF7FEFF 		bl	__aeabi_fmul
 8300 07a6 0346     		mov	r3, r0
 8301 07a8 4FF08E41 		mov	r1, #1191182336
 8302 07ac 1846     		mov	r0, r3
 8303 07ae FFF7FEFF 		bl	__aeabi_fadd
 8304 07b2 0346     		mov	r3, r0
 8305 07b4 1846     		mov	r0, r3
 8306 07b6 FFF7FEFF 		bl	__aeabi_f2uiz
 8307 07ba 0346     		mov	r3, r0
 8308 07bc 7B85     		strh	r3, [r7, #42]	@ movhi
2211:main.c        ****                     uint8_t tempHigh = tempIntVersion >> 8;
 8309              		.loc 1 2211 0 discriminator 3
 8310 07be 7B8D     		ldrh	r3, [r7, #42]
 8311 07c0 1B0A     		lsrs	r3, r3, #8
 8312 07c2 9BB2     		uxth	r3, r3
 8313 07c4 87F82930 		strb	r3, [r7, #41]
2212:main.c        ****                     uint8_t tempLow = tempIntVersion & 255;
 8314              		.loc 1 2212 0 discriminator 3
 8315 07c8 7B8D     		ldrh	r3, [r7, #42]	@ movhi
 8316 07ca 87F82830 		strb	r3, [r7, #40]
2213:main.c        ****                     
2214:main.c        ****                     
2215:main.c        ****                     uint16_t stringStartLoc = stringChange * 2;
 8317              		.loc 1 2215 0 discriminator 3
 8318 07ce BB6B     		ldr	r3, [r7, #56]
 8319 07d0 9BB2     		uxth	r3, r3
 8320 07d2 5B00     		lsls	r3, r3, #1
 8321 07d4 FB84     		strh	r3, [r7, #38]	@ movhi
2216:main.c        ****                     checkBase = EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc + (COPEDENT
 8322              		.loc 1 2216 0 discriminator 3
 8323 07d6 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 8324 07d8 BB8D     		ldrh	r3, [r7, #44]	@ movhi
 8325 07da 1344     		add	r3, r3, r2
 8326 07dc 9AB2     		uxth	r2, r3
 8327 07de 364B     		ldr	r3, .L355+4
 8328 07e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8329 07e2 9BB2     		uxth	r3, r3
 8330 07e4 1946     		mov	r1, r3	@ movhi
 8331 07e6 0901     		lsls	r1, r1, #4
 8332 07e8 1944     		add	r1, r1, r3
 8333 07ea 8900     		lsls	r1, r1, #2
 8334 07ec 1944     		add	r1, r1, r3
 8335 07ee 4900     		lsls	r1, r1, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 188


 8336 07f0 0B44     		add	r3, r3, r1
 8337 07f2 5B00     		lsls	r3, r3, #1
 8338 07f4 9BB2     		uxth	r3, r3
 8339 07f6 1344     		add	r3, r3, r2
 8340 07f8 9BB2     		uxth	r3, r3
 8341 07fa 0E33     		adds	r3, r3, #14
 8342 07fc 9AB2     		uxth	r2, r3
 8343 07fe 304B     		ldr	r3, .L355+12
 8344 0800 1A80     		strh	r2, [r3]	@ movhi
2217:main.c        ****                     checkStatus = EEPROM_WriteByte(tempHigh, checkBase);
 8345              		.loc 1 2217 0 discriminator 3
 8346 0802 2F4B     		ldr	r3, .L355+12
 8347 0804 1B88     		ldrh	r3, [r3]	@ movhi
 8348 0806 9AB2     		uxth	r2, r3
 8349 0808 97F82930 		ldrb	r3, [r7, #41]	@ zero_extendqisi2
 8350 080c 1146     		mov	r1, r2
 8351 080e 1846     		mov	r0, r3
 8352 0810 FFF7FEFF 		bl	EEPROM_WriteByte
 8353 0814 0346     		mov	r3, r0
 8354 0816 DAB2     		uxtb	r2, r3
 8355 0818 2A4B     		ldr	r3, .L355+16
 8356 081a 1A70     		strb	r2, [r3]
2218:main.c        ****                     checkStatus = EEPROM_WriteByte(tempLow, checkBase + 1);
 8357              		.loc 1 2218 0 discriminator 3
 8358 081c 284B     		ldr	r3, .L355+12
 8359 081e 1B88     		ldrh	r3, [r3]	@ movhi
 8360 0820 9BB2     		uxth	r3, r3
 8361 0822 0133     		adds	r3, r3, #1
 8362 0824 9AB2     		uxth	r2, r3
 8363 0826 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 8364 082a 1146     		mov	r1, r2
 8365 082c 1846     		mov	r0, r3
 8366 082e FFF7FEFF 		bl	EEPROM_WriteByte
 8367 0832 0346     		mov	r3, r0
 8368 0834 DAB2     		uxtb	r2, r3
 8369 0836 234B     		ldr	r3, .L355+16
 8370 0838 1A70     		strb	r2, [r3]
2219:main.c        ****                     currentFloat++;
 8371              		.loc 1 2219 0 discriminator 3
 8372 083a 234B     		ldr	r3, .L355+20
 8373 083c 1B68     		ldr	r3, [r3]
 8374 083e 0133     		adds	r3, r3, #1
 8375 0840 214A     		ldr	r2, .L355+20
 8376 0842 1360     		str	r3, [r2]
2220:main.c        ****                     i = i+5;
 8377              		.loc 1 2220 0 discriminator 3
 8378 0844 3B6C     		ldr	r3, [r7, #64]
 8379 0846 0533     		adds	r3, r3, #5
 8380 0848 3B64     		str	r3, [r7, #64]
 8381              	.LBE52:
2200:main.c        ****                 {
 8382              		.loc 1 2200 0 discriminator 3
 8383 084a BB6B     		ldr	r3, [r7, #56]
 8384 084c 0133     		adds	r3, r3, #1
 8385 084e BB63     		str	r3, [r7, #56]
 8386              	.L333:
2200:main.c        ****                 {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 189


 8387              		.loc 1 2200 0 is_stmt 0 discriminator 1
 8388 0850 BB6B     		ldr	r3, [r7, #56]
 8389 0852 0B2B     		cmp	r3, #11
 8390 0854 7FF662AF 		bls	.L334
 8391              	.LBE51:
 8392              	.LBE50:
2197:main.c        ****             {
 8393              		.loc 1 2197 0 is_stmt 1 discriminator 2
 8394 0858 FB6B     		ldr	r3, [r7, #60]
 8395 085a 0133     		adds	r3, r3, #1
 8396 085c FB63     		str	r3, [r7, #60]
 8397              	.L332:
2197:main.c        ****             {
 8398              		.loc 1 2197 0 is_stmt 0 discriminator 1
 8399 085e FB6B     		ldr	r3, [r7, #60]
 8400 0860 0A2B     		cmp	r3, #10
 8401 0862 7FF626AF 		bls	.L335
 8402              	.L331:
 8403              	.LBE49:
2195:main.c        ****         {
 8404              		.loc 1 2195 0 is_stmt 1
 8405 0866 194B     		ldr	r3, .L355+24
 8406 0868 1B68     		ldr	r3, [r3]
 8407 086a 3A6C     		ldr	r2, [r7, #64]
 8408 086c 9A42     		cmp	r2, r3
 8409 086e FFF41DAF 		bcc	.L336
2221:main.c        ****                 }
2222:main.c        ****                 
2223:main.c        ****             }
2224:main.c        ****         }
2225:main.c        ****                         
2226:main.c        ****         
2227:main.c        ****         messageArraySize = currentFloat;
 8410              		.loc 1 2227 0
 8411 0872 154B     		ldr	r3, .L355+20
 8412 0874 1B68     		ldr	r3, [r3]
 8413 0876 9AB2     		uxth	r2, r3
 8414 0878 154B     		ldr	r3, .L355+28
 8415 087a 1A80     		strh	r2, [r3]	@ movhi
2228:main.c        ****                     
2229:main.c        ****         if(messageArraySize != COPEDENT_SIZE_IN_FLOATS)
 8416              		.loc 1 2229 0
 8417 087c 144B     		ldr	r3, .L355+28
 8418 087e 1B88     		ldrh	r3, [r3]
 8419 0880 842B     		cmp	r3, #132
 8420 0882 11D0     		beq	.L337
2230:main.c        ****         {
2231:main.c        ****             //error state
2232:main.c        ****             SPI_errors++;
 8421              		.loc 1 2232 0
 8422 0884 134B     		ldr	r3, .L355+32
 8423 0886 1B68     		ldr	r3, [r3]
 8424 0888 0133     		adds	r3, r3, #1
 8425 088a 124A     		ldr	r2, .L355+32
 8426 088c 1360     		str	r3, [r2]
2233:main.c        ****             sysexMessageInProgress = 0;
 8427              		.loc 1 2233 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 190


 8428 088e 124B     		ldr	r3, .L355+36
 8429 0890 0022     		movs	r2, #0
 8430 0892 1A70     		strb	r2, [r3]
2234:main.c        ****             sysexPointer = 0;
 8431              		.loc 1 2234 0
 8432 0894 0D4B     		ldr	r3, .L355+24
 8433 0896 0022     		movs	r2, #0
 8434 0898 1A60     		str	r2, [r3]
2235:main.c        ****             sendingMessage = 0;
 8435              		.loc 1 2235 0
 8436 089a 104B     		ldr	r3, .L355+40
 8437 089c 0022     		movs	r2, #0
 8438 089e 1A70     		strb	r2, [r3]
2236:main.c        ****             parseThatMF = 0;
 8439              		.loc 1 2236 0
 8440 08a0 0F4B     		ldr	r3, .L355+44
 8441 08a2 0022     		movs	r2, #0
 8442 08a4 1A70     		strb	r2, [r3]
 8443 08a6 87E1     		b	.L327
 8444              	.L337:
2237:main.c        ****         } 
2238:main.c        ****         else 
2239:main.c        ****         {
2240:main.c        ****             sysexMessageInProgress = 0;
 8445              		.loc 1 2240 0
 8446 08a8 0B4B     		ldr	r3, .L355+36
 8447 08aa 0022     		movs	r2, #0
 8448 08ac 1A70     		strb	r2, [r3]
2241:main.c        ****             //sendingMessage = 2;  // use this when we are ready to send copedents to the sd cards 
2242:main.c        ****             
2243:main.c        ****             displayCurrentPresetNameAndCopedent();
 8449              		.loc 1 2243 0
 8450 08ae FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
 8451 08b2 81E1     		b	.L327
 8452              	.L356:
 8453              		.align	2
 8454              	.L355:
 8455 08b4 00000000 		.word	sysexBuffer
 8456 08b8 00000000 		.word	copedentNumberToWrite
 8457 08bc 00000000 		.word	copedent
 8458 08c0 00000000 		.word	checkBase
 8459 08c4 00000000 		.word	checkStatus
 8460 08c8 00000000 		.word	currentFloat
 8461 08cc 00000000 		.word	sysexPointer
 8462 08d0 00000000 		.word	messageArraySize
 8463 08d4 00000000 		.word	SPI_errors
 8464 08d8 00000000 		.word	sysexMessageInProgress
 8465 08dc 00000000 		.word	sendingMessage
 8466 08e0 00000000 		.word	parseThatMF
 8467              	.L328:
 8468              	.LBE47:
2244:main.c        ****         }
2245:main.c        ****     }
2246:main.c        ****     
2247:main.c        ****     
2248:main.c        ****     else if (sysexBuffer[0] == 3) //it's a real-time parameter change
 8469              		.loc 1 2248 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 191


 8470 08e4 9F4B     		ldr	r3, .L357
 8471 08e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8472 08e8 032B     		cmp	r3, #3
 8473 08ea 40F08B80 		bne	.L339
 8474              	.LBB53:
2249:main.c        ****     {
2250:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
 8475              		.loc 1 2250 0
 8476 08ee 9E4B     		ldr	r3, .L357+4
 8477 08f0 0122     		movs	r2, #1
 8478 08f2 1A70     		strb	r2, [r3]
2251:main.c        ****         union breakFloat theVal;
2252:main.c        ****         uint32_t i = 2;
 8479              		.loc 1 2252 0
 8480 08f4 0223     		movs	r3, #2
 8481 08f6 3B62     		str	r3, [r7, #32]
2253:main.c        ****         
2254:main.c        ****         //get the parameter ID
2255:main.c        ****         theVal.u32 = 0;
 8482              		.loc 1 2255 0
 8483 08f8 0023     		movs	r3, #0
 8484 08fa BB60     		str	r3, [r7, #8]
2256:main.c        ****         theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 8485              		.loc 1 2256 0
 8486 08fc BB68     		ldr	r3, [r7, #8]
 8487 08fe 9949     		ldr	r1, .L357
 8488 0900 3A6A     		ldr	r2, [r7, #32]
 8489 0902 0A44     		add	r2, r2, r1
 8490 0904 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8491 0906 1207     		lsls	r2, r2, #28
 8492 0908 1343     		orrs	r3, r3, r2
 8493 090a BB60     		str	r3, [r7, #8]
2257:main.c        ****         theVal.u32 |= (sysexBuffer[i+1] << 21);
 8494              		.loc 1 2257 0
 8495 090c BB68     		ldr	r3, [r7, #8]
 8496 090e 3A6A     		ldr	r2, [r7, #32]
 8497 0910 0132     		adds	r2, r2, #1
 8498 0912 9449     		ldr	r1, .L357
 8499 0914 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8500 0916 5205     		lsls	r2, r2, #21
 8501 0918 1343     		orrs	r3, r3, r2
 8502 091a BB60     		str	r3, [r7, #8]
2258:main.c        ****         theVal.u32 |= (sysexBuffer[i+2] << 14);
 8503              		.loc 1 2258 0
 8504 091c BB68     		ldr	r3, [r7, #8]
 8505 091e 3A6A     		ldr	r2, [r7, #32]
 8506 0920 0232     		adds	r2, r2, #2
 8507 0922 9049     		ldr	r1, .L357
 8508 0924 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8509 0926 9203     		lsls	r2, r2, #14
 8510 0928 1343     		orrs	r3, r3, r2
 8511 092a BB60     		str	r3, [r7, #8]
2259:main.c        ****         theVal.u32 |= (sysexBuffer[i+3] << 7);
 8512              		.loc 1 2259 0
 8513 092c BB68     		ldr	r3, [r7, #8]
 8514 092e 3A6A     		ldr	r2, [r7, #32]
 8515 0930 0332     		adds	r2, r2, #3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 192


 8516 0932 8C49     		ldr	r1, .L357
 8517 0934 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8518 0936 D201     		lsls	r2, r2, #7
 8519 0938 1343     		orrs	r3, r3, r2
 8520 093a BB60     		str	r3, [r7, #8]
2260:main.c        ****         theVal.u32 |= (sysexBuffer[i+4] & 127);
 8521              		.loc 1 2260 0
 8522 093c BA68     		ldr	r2, [r7, #8]
 8523 093e 3B6A     		ldr	r3, [r7, #32]
 8524 0940 0433     		adds	r3, r3, #4
 8525 0942 8849     		ldr	r1, .L357
 8526 0944 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8527 0946 03F07F03 		and	r3, r3, #127
 8528 094a 1343     		orrs	r3, r3, r2
 8529 094c BB60     		str	r3, [r7, #8]
2261:main.c        ****         uint16_t roundedIndex = (uint16_t)roundf(theVal.f);
 8530              		.loc 1 2261 0
 8531 094e BB68     		ldr	r3, [r7, #8]	@ float
 8532 0950 1846     		mov	r0, r3
 8533 0952 FFF7FEFF 		bl	roundf
 8534 0956 0346     		mov	r3, r0
 8535 0958 1846     		mov	r0, r3
 8536 095a FFF7FEFF 		bl	__aeabi_f2uiz
 8537 095e 0346     		mov	r3, r0
 8538 0960 FB83     		strh	r3, [r7, #30]	@ movhi
2262:main.c        ****         singleParamToUpdateHigh = (roundedIndex << 8);
 8539              		.loc 1 2262 0
 8540 0962 824B     		ldr	r3, .L357+8
 8541 0964 0022     		movs	r2, #0
 8542 0966 1A70     		strb	r2, [r3]
2263:main.c        ****         singleParamToUpdateLow = roundedIndex & 0xff;
 8543              		.loc 1 2263 0
 8544 0968 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 8545 096a DAB2     		uxtb	r2, r3
 8546 096c 804B     		ldr	r3, .L357+12
 8547 096e 1A70     		strb	r2, [r3]
2264:main.c        ****         
2265:main.c        ****         i = i+5;
 8548              		.loc 1 2265 0
 8549 0970 3B6A     		ldr	r3, [r7, #32]
 8550 0972 0533     		adds	r3, r3, #5
 8551 0974 3B62     		str	r3, [r7, #32]
2266:main.c        ****         
2267:main.c        ****         //get the parameter value
2268:main.c        ****         theVal.u32 = 0;
 8552              		.loc 1 2268 0
 8553 0976 0023     		movs	r3, #0
 8554 0978 BB60     		str	r3, [r7, #8]
2269:main.c        ****         theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 8555              		.loc 1 2269 0
 8556 097a BB68     		ldr	r3, [r7, #8]
 8557 097c 7949     		ldr	r1, .L357
 8558 097e 3A6A     		ldr	r2, [r7, #32]
 8559 0980 0A44     		add	r2, r2, r1
 8560 0982 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8561 0984 1207     		lsls	r2, r2, #28
 8562 0986 1343     		orrs	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 193


 8563 0988 BB60     		str	r3, [r7, #8]
2270:main.c        ****         theVal.u32 |= (sysexBuffer[i+1] << 21);
 8564              		.loc 1 2270 0
 8565 098a BB68     		ldr	r3, [r7, #8]
 8566 098c 3A6A     		ldr	r2, [r7, #32]
 8567 098e 0132     		adds	r2, r2, #1
 8568 0990 7449     		ldr	r1, .L357
 8569 0992 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8570 0994 5205     		lsls	r2, r2, #21
 8571 0996 1343     		orrs	r3, r3, r2
 8572 0998 BB60     		str	r3, [r7, #8]
2271:main.c        ****         theVal.u32 |= (sysexBuffer[i+2] << 14);
 8573              		.loc 1 2271 0
 8574 099a BB68     		ldr	r3, [r7, #8]
 8575 099c 3A6A     		ldr	r2, [r7, #32]
 8576 099e 0232     		adds	r2, r2, #2
 8577 09a0 7049     		ldr	r1, .L357
 8578 09a2 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8579 09a4 9203     		lsls	r2, r2, #14
 8580 09a6 1343     		orrs	r3, r3, r2
 8581 09a8 BB60     		str	r3, [r7, #8]
2272:main.c        ****         theVal.u32 |= (sysexBuffer[i+3] << 7);
 8582              		.loc 1 2272 0
 8583 09aa BB68     		ldr	r3, [r7, #8]
 8584 09ac 3A6A     		ldr	r2, [r7, #32]
 8585 09ae 0332     		adds	r2, r2, #3
 8586 09b0 6C49     		ldr	r1, .L357
 8587 09b2 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8588 09b4 D201     		lsls	r2, r2, #7
 8589 09b6 1343     		orrs	r3, r3, r2
 8590 09b8 BB60     		str	r3, [r7, #8]
2273:main.c        ****         theVal.u32 |= (sysexBuffer[i+4] & 127);
 8591              		.loc 1 2273 0
 8592 09ba BA68     		ldr	r2, [r7, #8]
 8593 09bc 3B6A     		ldr	r3, [r7, #32]
 8594 09be 0433     		adds	r3, r3, #4
 8595 09c0 6849     		ldr	r1, .L357
 8596 09c2 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8597 09c4 03F07F03 		and	r3, r3, #127
 8598 09c8 1343     		orrs	r3, r3, r2
 8599 09ca BB60     		str	r3, [r7, #8]
2274:main.c        ****         
2275:main.c        ****         uint16_t intVal = (uint16_t)(theVal.f * 65535.0f);
 8600              		.loc 1 2275 0
 8601 09cc BB68     		ldr	r3, [r7, #8]	@ float
 8602 09ce 6949     		ldr	r1, .L357+16
 8603 09d0 1846     		mov	r0, r3
 8604 09d2 FFF7FEFF 		bl	__aeabi_fmul
 8605 09d6 0346     		mov	r3, r0
 8606 09d8 1846     		mov	r0, r3
 8607 09da FFF7FEFF 		bl	__aeabi_f2uiz
 8608 09de 0346     		mov	r3, r0
 8609 09e0 BB83     		strh	r3, [r7, #28]	@ movhi
2276:main.c        ****         singleParamValueHigh = intVal >> 8;
 8610              		.loc 1 2276 0
 8611 09e2 BB8B     		ldrh	r3, [r7, #28]
 8612 09e4 1B0A     		lsrs	r3, r3, #8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 194


 8613 09e6 9BB2     		uxth	r3, r3
 8614 09e8 DAB2     		uxtb	r2, r3
 8615 09ea 634B     		ldr	r3, .L357+20
 8616 09ec 1A70     		strb	r2, [r3]
2277:main.c        ****         singleParamValueLow = intVal & 0xff;
 8617              		.loc 1 2277 0
 8618 09ee BB8B     		ldrh	r3, [r7, #28]	@ movhi
 8619 09f0 DAB2     		uxtb	r2, r3
 8620 09f2 624B     		ldr	r3, .L357+24
 8621 09f4 1A70     		strb	r2, [r3]
2278:main.c        ****         
2279:main.c        ****         sysexMessageInProgress = 0;
 8622              		.loc 1 2279 0
 8623 09f6 5C4B     		ldr	r3, .L357+4
 8624 09f8 0022     		movs	r2, #0
 8625 09fa 1A70     		strb	r2, [r3]
2280:main.c        ****         sendSingleParamUpdate = 1;
 8626              		.loc 1 2280 0
 8627 09fc 604B     		ldr	r3, .L357+28
 8628 09fe 0122     		movs	r2, #1
 8629 0a00 1A70     		strb	r2, [r3]
 8630              	.LBE53:
 8631 0a02 D9E0     		b	.L327
 8632              	.L339:
2281:main.c        ****     }
2282:main.c        ****     
2283:main.c        ****      else if (sysexBuffer[0] == 4) //it's a real-time mapping change
 8633              		.loc 1 2283 0
 8634 0a04 574B     		ldr	r3, .L357
 8635 0a06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8636 0a08 042B     		cmp	r3, #4
 8637 0a0a 40F0D580 		bne	.L327
 8638              	.LBB54:
2284:main.c        ****     {
2285:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
 8639              		.loc 1 2285 0
 8640 0a0e 564B     		ldr	r3, .L357+4
 8641 0a10 0122     		movs	r2, #1
 8642 0a12 1A70     		strb	r2, [r3]
2286:main.c        ****         union breakFloat theVal;
2287:main.c        ****         uint32_t i = 2;
 8643              		.loc 1 2287 0
 8644 0a14 0223     		movs	r3, #2
 8645 0a16 BB61     		str	r3, [r7, #24]
2288:main.c        ****         
2289:main.c        ****         //get the destination number
2290:main.c        ****         theVal.u32 = 0;
 8646              		.loc 1 2290 0
 8647 0a18 0023     		movs	r3, #0
 8648 0a1a 7B60     		str	r3, [r7, #4]
2291:main.c        ****         theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 8649              		.loc 1 2291 0
 8650 0a1c 7B68     		ldr	r3, [r7, #4]
 8651 0a1e 5149     		ldr	r1, .L357
 8652 0a20 BA69     		ldr	r2, [r7, #24]
 8653 0a22 0A44     		add	r2, r2, r1
 8654 0a24 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 195


 8655 0a26 1207     		lsls	r2, r2, #28
 8656 0a28 1343     		orrs	r3, r3, r2
 8657 0a2a 7B60     		str	r3, [r7, #4]
2292:main.c        ****         theVal.u32 |= (sysexBuffer[i+1] << 21);
 8658              		.loc 1 2292 0
 8659 0a2c 7B68     		ldr	r3, [r7, #4]
 8660 0a2e BA69     		ldr	r2, [r7, #24]
 8661 0a30 0132     		adds	r2, r2, #1
 8662 0a32 4C49     		ldr	r1, .L357
 8663 0a34 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8664 0a36 5205     		lsls	r2, r2, #21
 8665 0a38 1343     		orrs	r3, r3, r2
 8666 0a3a 7B60     		str	r3, [r7, #4]
2293:main.c        ****         theVal.u32 |= (sysexBuffer[i+2] << 14);
 8667              		.loc 1 2293 0
 8668 0a3c 7B68     		ldr	r3, [r7, #4]
 8669 0a3e BA69     		ldr	r2, [r7, #24]
 8670 0a40 0232     		adds	r2, r2, #2
 8671 0a42 4849     		ldr	r1, .L357
 8672 0a44 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8673 0a46 9203     		lsls	r2, r2, #14
 8674 0a48 1343     		orrs	r3, r3, r2
 8675 0a4a 7B60     		str	r3, [r7, #4]
2294:main.c        ****         theVal.u32 |= (sysexBuffer[i+3] << 7);
 8676              		.loc 1 2294 0
 8677 0a4c 7B68     		ldr	r3, [r7, #4]
 8678 0a4e BA69     		ldr	r2, [r7, #24]
 8679 0a50 0332     		adds	r2, r2, #3
 8680 0a52 4449     		ldr	r1, .L357
 8681 0a54 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8682 0a56 D201     		lsls	r2, r2, #7
 8683 0a58 1343     		orrs	r3, r3, r2
 8684 0a5a 7B60     		str	r3, [r7, #4]
2295:main.c        ****         theVal.u32 |= (sysexBuffer[i+4] & 127);
 8685              		.loc 1 2295 0
 8686 0a5c 7A68     		ldr	r2, [r7, #4]
 8687 0a5e BB69     		ldr	r3, [r7, #24]
 8688 0a60 0433     		adds	r3, r3, #4
 8689 0a62 4049     		ldr	r1, .L357
 8690 0a64 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8691 0a66 03F07F03 		and	r3, r3, #127
 8692 0a6a 1343     		orrs	r3, r3, r2
 8693 0a6c 7B60     		str	r3, [r7, #4]
2296:main.c        ****         uint16_t roundedIndex = (uint16_t)roundf(theVal.f);
 8694              		.loc 1 2296 0
 8695 0a6e 7B68     		ldr	r3, [r7, #4]	@ float
 8696 0a70 1846     		mov	r0, r3
 8697 0a72 FFF7FEFF 		bl	roundf
 8698 0a76 0346     		mov	r3, r0
 8699 0a78 1846     		mov	r0, r3
 8700 0a7a FFF7FEFF 		bl	__aeabi_f2uiz
 8701 0a7e 0346     		mov	r3, r0
 8702 0a80 FB82     		strh	r3, [r7, #22]	@ movhi
2297:main.c        ****         mappingArray[0] = (roundedIndex << 8);
 8703              		.loc 1 2297 0
 8704 0a82 404B     		ldr	r3, .L357+32
 8705 0a84 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 196


 8706 0a86 1A70     		strb	r2, [r3]
2298:main.c        ****         mappingArray[1] = roundedIndex & 0xff;
 8707              		.loc 1 2298 0
 8708 0a88 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 8709 0a8a DAB2     		uxtb	r2, r3
 8710 0a8c 3D4B     		ldr	r3, .L357+32
 8711 0a8e 5A70     		strb	r2, [r3, #1]
2299:main.c        ****         
2300:main.c        ****         
2301:main.c        ****         mappingArray[2] = sysexBuffer[i+5]; //slot id
 8712              		.loc 1 2301 0
 8713 0a90 BB69     		ldr	r3, [r7, #24]
 8714 0a92 0533     		adds	r3, r3, #5
 8715 0a94 334A     		ldr	r2, .L357
 8716 0a96 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8717 0a98 3A4B     		ldr	r3, .L357+32
 8718 0a9a 9A70     		strb	r2, [r3, #2]
2302:main.c        ****         mappingArray[3] = sysexBuffer[i+6]; //mapping change type
 8719              		.loc 1 2302 0
 8720 0a9c BB69     		ldr	r3, [r7, #24]
 8721 0a9e 0633     		adds	r3, r3, #6
 8722 0aa0 304A     		ldr	r2, .L357
 8723 0aa2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8724 0aa4 374B     		ldr	r3, .L357+32
 8725 0aa6 DA70     		strb	r2, [r3, #3]
2303:main.c        ****         
2304:main.c        ****         i = i+7;
 8726              		.loc 1 2304 0
 8727 0aa8 BB69     		ldr	r3, [r7, #24]
 8728 0aaa 0733     		adds	r3, r3, #7
 8729 0aac BB61     		str	r3, [r7, #24]
2305:main.c        ****         
2306:main.c        ****         //get the parameter value
2307:main.c        ****         theVal.u32 = 0;
 8730              		.loc 1 2307 0
 8731 0aae 0023     		movs	r3, #0
 8732 0ab0 7B60     		str	r3, [r7, #4]
2308:main.c        ****         theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 8733              		.loc 1 2308 0
 8734 0ab2 7B68     		ldr	r3, [r7, #4]
 8735 0ab4 2B49     		ldr	r1, .L357
 8736 0ab6 BA69     		ldr	r2, [r7, #24]
 8737 0ab8 0A44     		add	r2, r2, r1
 8738 0aba 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8739 0abc 1207     		lsls	r2, r2, #28
 8740 0abe 1343     		orrs	r3, r3, r2
 8741 0ac0 7B60     		str	r3, [r7, #4]
2309:main.c        ****         theVal.u32 |= (sysexBuffer[i+1] << 21);
 8742              		.loc 1 2309 0
 8743 0ac2 7B68     		ldr	r3, [r7, #4]
 8744 0ac4 BA69     		ldr	r2, [r7, #24]
 8745 0ac6 0132     		adds	r2, r2, #1
 8746 0ac8 2649     		ldr	r1, .L357
 8747 0aca 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8748 0acc 5205     		lsls	r2, r2, #21
 8749 0ace 1343     		orrs	r3, r3, r2
 8750 0ad0 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 197


2310:main.c        ****         theVal.u32 |= (sysexBuffer[i+2] << 14);
 8751              		.loc 1 2310 0
 8752 0ad2 7B68     		ldr	r3, [r7, #4]
 8753 0ad4 BA69     		ldr	r2, [r7, #24]
 8754 0ad6 0232     		adds	r2, r2, #2
 8755 0ad8 2249     		ldr	r1, .L357
 8756 0ada 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8757 0adc 9203     		lsls	r2, r2, #14
 8758 0ade 1343     		orrs	r3, r3, r2
 8759 0ae0 7B60     		str	r3, [r7, #4]
2311:main.c        ****         theVal.u32 |= (sysexBuffer[i+3] << 7);
 8760              		.loc 1 2311 0
 8761 0ae2 7B68     		ldr	r3, [r7, #4]
 8762 0ae4 BA69     		ldr	r2, [r7, #24]
 8763 0ae6 0332     		adds	r2, r2, #3
 8764 0ae8 1E49     		ldr	r1, .L357
 8765 0aea 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8766 0aec D201     		lsls	r2, r2, #7
 8767 0aee 1343     		orrs	r3, r3, r2
 8768 0af0 7B60     		str	r3, [r7, #4]
2312:main.c        ****         theVal.u32 |= (sysexBuffer[i+4] & 127);
 8769              		.loc 1 2312 0
 8770 0af2 7A68     		ldr	r2, [r7, #4]
 8771 0af4 BB69     		ldr	r3, [r7, #24]
 8772 0af6 0433     		adds	r3, r3, #4
 8773 0af8 1A49     		ldr	r1, .L357
 8774 0afa CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8775 0afc 03F07F03 		and	r3, r3, #127
 8776 0b00 1343     		orrs	r3, r3, r2
 8777 0b02 7B60     		str	r3, [r7, #4]
2313:main.c        ****         if (mappingArray[3] == 0) // source id
 8778              		.loc 1 2313 0
 8779 0b04 1F4B     		ldr	r3, .L357+32
 8780 0b06 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 8781 0b08 002B     		cmp	r3, #0
 8782 0b0a 10D1     		bne	.L340
2314:main.c        ****         {
2315:main.c        ****             mappingArray[4] = 0;
 8783              		.loc 1 2315 0
 8784 0b0c 1D4B     		ldr	r3, .L357+32
 8785 0b0e 0022     		movs	r2, #0
 8786 0b10 1A71     		strb	r2, [r3, #4]
2316:main.c        ****             mappingArray[5] = (int16_t)(roundf(theVal.f));
 8787              		.loc 1 2316 0
 8788 0b12 7B68     		ldr	r3, [r7, #4]	@ float
 8789 0b14 1846     		mov	r0, r3
 8790 0b16 FFF7FEFF 		bl	roundf
 8791 0b1a 0346     		mov	r3, r0
 8792 0b1c 1846     		mov	r0, r3
 8793 0b1e FFF7FEFF 		bl	__aeabi_f2iz
 8794 0b22 0346     		mov	r3, r0
 8795 0b24 1BB2     		sxth	r3, r3
 8796 0b26 DAB2     		uxtb	r2, r3
 8797 0b28 164B     		ldr	r3, .L357+32
 8798 0b2a 5A71     		strb	r2, [r3, #5]
 8799 0b2c 3EE0     		b	.L341
 8800              	.L340:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 198


2317:main.c        ****         }
2318:main.c        ****         else if (mappingArray[3] == 1) // amount
 8801              		.loc 1 2318 0
 8802 0b2e 154B     		ldr	r3, .L357+32
 8803 0b30 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 8804 0b32 012B     		cmp	r3, #1
 8805 0b34 2AD1     		bne	.L342
 8806              	.LBB55:
2319:main.c        ****         {
2320:main.c        ****             int16_t intVal = (int16_t)(theVal.f * 32767.0f);
 8807              		.loc 1 2320 0
 8808 0b36 7B68     		ldr	r3, [r7, #4]	@ float
 8809 0b38 1349     		ldr	r1, .L357+36
 8810 0b3a 1846     		mov	r0, r3
 8811 0b3c FFF7FEFF 		bl	__aeabi_fmul
 8812 0b40 0346     		mov	r3, r0
 8813 0b42 1846     		mov	r0, r3
 8814 0b44 FFF7FEFF 		bl	__aeabi_f2iz
 8815 0b48 0346     		mov	r3, r0
 8816 0b4a BB82     		strh	r3, [r7, #20]	@ movhi
2321:main.c        ****             mappingArray[4] = intVal >> 8;
 8817              		.loc 1 2321 0
 8818 0b4c B7F91430 		ldrsh	r3, [r7, #20]
 8819 0b50 1B12     		asrs	r3, r3, #8
 8820 0b52 1BB2     		sxth	r3, r3
 8821 0b54 DAB2     		uxtb	r2, r3
 8822 0b56 0B4B     		ldr	r3, .L357+32
 8823 0b58 1A71     		strb	r2, [r3, #4]
2322:main.c        ****             mappingArray[5] = intVal & 0xff;
 8824              		.loc 1 2322 0
 8825 0b5a BB8A     		ldrh	r3, [r7, #20]	@ movhi
 8826 0b5c DAB2     		uxtb	r2, r3
 8827 0b5e 094B     		ldr	r3, .L357+32
 8828 0b60 5A71     		strb	r2, [r3, #5]
 8829              	.LBE55:
 8830 0b62 23E0     		b	.L341
 8831              	.L358:
 8832              		.align	2
 8833              	.L357:
 8834 0b64 00000000 		.word	sysexBuffer
 8835 0b68 00000000 		.word	sysexMessageInProgress
 8836 0b6c 00000000 		.word	singleParamToUpdateHigh
 8837 0b70 00000000 		.word	singleParamToUpdateLow
 8838 0b74 00FF7F47 		.word	1199570688
 8839 0b78 00000000 		.word	singleParamValueHigh
 8840 0b7c 00000000 		.word	singleParamValueLow
 8841 0b80 00000000 		.word	sendSingleParamUpdate
 8842 0b84 00000000 		.word	mappingArray
 8843 0b88 00FEFF46 		.word	1191181824
 8844              	.L342:
2323:main.c        ****         }
2324:main.c        ****         else // scalar source
2325:main.c        ****         {
2326:main.c        ****             mappingArray[4] = 0;
 8845              		.loc 1 2326 0
 8846 0b8c 114B     		ldr	r3, .L359
 8847 0b8e 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 199


 8848 0b90 1A71     		strb	r2, [r3, #4]
2327:main.c        ****             mappingArray[5] = (int16_t)(roundf(theVal.f));
 8849              		.loc 1 2327 0
 8850 0b92 7B68     		ldr	r3, [r7, #4]	@ float
 8851 0b94 1846     		mov	r0, r3
 8852 0b96 FFF7FEFF 		bl	roundf
 8853 0b9a 0346     		mov	r3, r0
 8854 0b9c 1846     		mov	r0, r3
 8855 0b9e FFF7FEFF 		bl	__aeabi_f2iz
 8856 0ba2 0346     		mov	r3, r0
 8857 0ba4 1BB2     		sxth	r3, r3
 8858 0ba6 DAB2     		uxtb	r2, r3
 8859 0ba8 0A4B     		ldr	r3, .L359
 8860 0baa 5A71     		strb	r2, [r3, #5]
 8861              	.L341:
2328:main.c        ****         }
2329:main.c        ****         
2330:main.c        ****         
2331:main.c        ****         sysexMessageInProgress = 0;
 8862              		.loc 1 2331 0
 8863 0bac 0A4B     		ldr	r3, .L359+4
 8864 0bae 0022     		movs	r2, #0
 8865 0bb0 1A70     		strb	r2, [r3]
2332:main.c        ****         sendMappingChangeUpdate = 1;
 8866              		.loc 1 2332 0
 8867 0bb2 0A4B     		ldr	r3, .L359+8
 8868 0bb4 0122     		movs	r2, #1
 8869 0bb6 1A70     		strb	r2, [r3]
 8870              	.L327:
 8871              	.LBE54:
2333:main.c        ****     }
2334:main.c        **** 
2335:main.c        ****     parsingSysex = 0;
 8872              		.loc 1 2335 0
 8873 0bb8 094B     		ldr	r3, .L359+12
 8874 0bba 0022     		movs	r2, #0
 8875 0bbc 1A70     		strb	r2, [r3]
2336:main.c        ****     sysexPointer = 0;
 8876              		.loc 1 2336 0
 8877 0bbe 094B     		ldr	r3, .L359+16
 8878 0bc0 0022     		movs	r2, #0
 8879 0bc2 1A60     		str	r2, [r3]
2337:main.c        ****     parseThatMF = 0;
 8880              		.loc 1 2337 0
 8881 0bc4 084B     		ldr	r3, .L359+20
 8882 0bc6 0022     		movs	r2, #0
 8883 0bc8 1A70     		strb	r2, [r3]
2338:main.c        **** }
 8884              		.loc 1 2338 0
 8885 0bca 00BF     		nop
 8886 0bcc 5437     		adds	r7, r7, #84
 8887              		.cfi_def_cfa_offset 12
 8888 0bce BD46     		mov	sp, r7
 8889              		.cfi_def_cfa_register 13
 8890              		@ sp needed
 8891 0bd0 90BD     		pop	{r4, r7, pc}
 8892              	.L360:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 200


 8893 0bd2 00BF     		.align	2
 8894              	.L359:
 8895 0bd4 00000000 		.word	mappingArray
 8896 0bd8 00000000 		.word	sysexMessageInProgress
 8897 0bdc 00000000 		.word	sendMappingChangeUpdate
 8898 0be0 00000000 		.word	parsingSysex
 8899 0be4 00000000 		.word	sysexPointer
 8900 0be8 00000000 		.word	parseThatMF
 8901              		.cfi_endproc
 8902              	.LFE92:
 8903              		.size	parseSysex, .-parseSysex
 8904              		.comm	tempMIDI,4,4
 8905              		.global	firstSysex
 8906              		.bss
 8907              		.type	firstSysex, %object
 8908              		.size	firstSysex, 1
 8909              	firstSysex:
 8910 012c 00       		.space	1
 8911              		.global	sysexPointerMask
 8912              		.section	.rodata
 8913              		.align	1
 8914              		.type	sysexPointerMask, %object
 8915              		.size	sysexPointerMask, 2
 8916              	sysexPointerMask:
 8917 0428 FF07     		.short	2047
 8918              		.section	.text.USB_callbackLocalMidiEvent,"ax",%progbits
 8919              		.align	2
 8920              		.global	USB_callbackLocalMidiEvent
 8921              		.thumb
 8922              		.thumb_func
 8923              		.type	USB_callbackLocalMidiEvent, %function
 8924              	USB_callbackLocalMidiEvent:
 8925              	.LFB93:
2339:main.c        **** 
2340:main.c        **** volatile uint8_t tempMIDI[4];
2341:main.c        **** volatile uint8_t firstSysex = 0;
2342:main.c        **** const uint16_t sysexPointerMask = 2047;
2343:main.c        **** // this gets called if the Brain gets a MIDI message from the computer host
2344:main.c        **** void USB_callbackLocalMidiEvent(uint8 cable, uint8 *midiMsg) CYREENTRANT
2345:main.c        **** {   
 8926              		.loc 1 2345 0
 8927              		.cfi_startproc
 8928              		@ args = 0, pretend = 0, frame = 16
 8929              		@ frame_needed = 1, uses_anonymous_args = 0
 8930 0000 80B5     		push	{r7, lr}
 8931              		.cfi_def_cfa_offset 8
 8932              		.cfi_offset 7, -8
 8933              		.cfi_offset 14, -4
 8934 0002 84B0     		sub	sp, sp, #16
 8935              		.cfi_def_cfa_offset 24
 8936 0004 00AF     		add	r7, sp, #0
 8937              		.cfi_def_cfa_register 7
 8938 0006 0346     		mov	r3, r0
 8939 0008 3960     		str	r1, [r7]
 8940 000a FB71     		strb	r3, [r7, #7]
2346:main.c        ****     tempMIDI[0] = midiMsg[0];
 8941              		.loc 1 2346 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 201


 8942 000c 3B68     		ldr	r3, [r7]
 8943 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 8944 0010 484B     		ldr	r3, .L371
 8945 0012 1A70     		strb	r2, [r3]
2347:main.c        ****     tempMIDI[1] = midiMsg[1];
 8946              		.loc 1 2347 0
 8947 0014 3B68     		ldr	r3, [r7]
 8948 0016 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 8949 0018 464B     		ldr	r3, .L371
 8950 001a 5A70     		strb	r2, [r3, #1]
2348:main.c        ****      tempMIDI[2] = midiMsg[2];
 8951              		.loc 1 2348 0
 8952 001c 3B68     		ldr	r3, [r7]
 8953 001e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 8954 0020 444B     		ldr	r3, .L371
 8955 0022 9A70     		strb	r2, [r3, #2]
2349:main.c        ****      tempMIDI[3] = midiMsg[3];
 8956              		.loc 1 2349 0
 8957 0024 3B68     		ldr	r3, [r7]
 8958 0026 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 8959 0028 424B     		ldr	r3, .L371
 8960 002a DA70     		strb	r2, [r3, #3]
2350:main.c        ****     //check that we got here
2351:main.c        ****     
2352:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 8961              		.loc 1 2352 0
 8962 002c 424B     		ldr	r3, .L371+4
 8963 002e 1B78     		ldrb	r3, [r3]
 8964 0030 DBB2     		uxtb	r3, r3
 8965 0032 002B     		cmp	r3, #0
 8966 0034 7BD0     		beq	.L361
 8967              		.loc 1 2352 0 is_stmt 0 discriminator 1
 8968 0036 FFF7FEFF 		bl	USB_VBusPresent
 8969 003a 0346     		mov	r3, r0
 8970 003c 002B     		cmp	r3, #0
 8971 003e 76D0     		beq	.L361
2353:main.c        ****     {
2354:main.c        ****         if (receivingSysex)
 8972              		.loc 1 2354 0 is_stmt 1
 8973 0040 3E4B     		ldr	r3, .L371+8
 8974 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8975 0044 002B     		cmp	r3, #0
 8976 0046 29D0     		beq	.L363
 8977              	.LBB56:
2355:main.c        ****         {
2356:main.c        ****             for (int i = 0; i < 3; i++)
 8978              		.loc 1 2356 0
 8979 0048 0023     		movs	r3, #0
 8980 004a FB60     		str	r3, [r7, #12]
 8981 004c 22E0     		b	.L364
 8982              	.L367:
2357:main.c        ****             {
2358:main.c        ****                 if (midiMsg[i] < 128)
 8983              		.loc 1 2358 0
 8984 004e FB68     		ldr	r3, [r7, #12]
 8985 0050 3A68     		ldr	r2, [r7]
 8986 0052 1344     		add	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 202


 8987 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8988 0056 5BB2     		sxtb	r3, r3
 8989 0058 002B     		cmp	r3, #0
 8990 005a 0EDB     		blt	.L365
2359:main.c        ****                 {
2360:main.c        ****                     sysexBuffer[(sysexPointer++) & sysexPointerMask] = midiMsg[i];
 8991              		.loc 1 2360 0
 8992 005c 384B     		ldr	r3, .L371+12
 8993 005e 1B68     		ldr	r3, [r3]
 8994 0060 5A1C     		adds	r2, r3, #1
 8995 0062 3749     		ldr	r1, .L371+12
 8996 0064 0A60     		str	r2, [r1]
 8997 0066 40F2FF72 		movw	r2, #2047
 8998 006a 1340     		ands	r3, r3, r2
 8999 006c FA68     		ldr	r2, [r7, #12]
 9000 006e 3968     		ldr	r1, [r7]
 9001 0070 0A44     		add	r2, r2, r1
 9002 0072 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 9003 0074 334A     		ldr	r2, .L371+16
 9004 0076 D154     		strb	r1, [r2, r3]
 9005 0078 09E0     		b	.L366
 9006              	.L365:
2361:main.c        ****                 }
2362:main.c        ****                 else
2363:main.c        ****                 {
2364:main.c        ****                     if (midiMsg[i] == USB_MIDI_EOSEX)
 9007              		.loc 1 2364 0
 9008 007a FB68     		ldr	r3, [r7, #12]
 9009 007c 3A68     		ldr	r2, [r7]
 9010 007e 1344     		add	r3, r3, r2
 9011 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9012 0082 F72B     		cmp	r3, #247
 9013 0084 03D1     		bne	.L366
2365:main.c        ****                     {
2366:main.c        ****                         receivingSysex = 0;
 9014              		.loc 1 2366 0
 9015 0086 2D4B     		ldr	r3, .L371+8
 9016 0088 0022     		movs	r2, #0
 9017 008a 1A70     		strb	r2, [r3]
2367:main.c        ****                         //parseSysex();
2368:main.c        ****                         return;
 9018              		.loc 1 2368 0
 9019 008c 4FE0     		b	.L361
 9020              	.L366:
2356:main.c        ****             {
 9021              		.loc 1 2356 0 discriminator 2
 9022 008e FB68     		ldr	r3, [r7, #12]
 9023 0090 0133     		adds	r3, r3, #1
 9024 0092 FB60     		str	r3, [r7, #12]
 9025              	.L364:
2356:main.c        ****             {
 9026              		.loc 1 2356 0 is_stmt 0 discriminator 1
 9027 0094 FB68     		ldr	r3, [r7, #12]
 9028 0096 022B     		cmp	r3, #2
 9029 0098 D9DD     		ble	.L367
 9030 009a 48E0     		b	.L361
 9031              	.L363:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 203


 9032              	.LBE56:
2369:main.c        ****                      }
2370:main.c        ****                 }
2371:main.c        ****             }
2372:main.c        ****         }
2373:main.c        ****         else if (midiMsg[USB_EVENT_BYTE0] == USB_MIDI_SYSEX)
 9033              		.loc 1 2373 0 is_stmt 1
 9034 009c 3B68     		ldr	r3, [r7]
 9035 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9036 00a0 F02B     		cmp	r3, #240
 9037 00a2 44D1     		bne	.L361
2374:main.c        ****         {
2375:main.c        ****             if (!parsingSysex)
 9038              		.loc 1 2375 0
 9039 00a4 284B     		ldr	r3, .L371+20
 9040 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9041 00a8 002B     		cmp	r3, #0
 9042 00aa 40D1     		bne	.L361
2376:main.c        ****             {
2377:main.c        ****                 if (midiMsg[1] == 126) // special message saying that sysex multi-chunk transmissio
 9043              		.loc 1 2377 0
 9044 00ac 3B68     		ldr	r3, [r7]
 9045 00ae 0133     		adds	r3, r3, #1
 9046 00b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9047 00b2 7E2B     		cmp	r3, #126
 9048 00b4 03D1     		bne	.L369
2378:main.c        ****                 {
2379:main.c        ****                     parseThatMF = 1;
 9049              		.loc 1 2379 0
 9050 00b6 254B     		ldr	r3, .L371+24
 9051 00b8 0122     		movs	r2, #1
 9052 00ba 1A70     		strb	r2, [r3]
 9053 00bc 37E0     		b	.L361
 9054              	.L369:
2380:main.c        **** 
2381:main.c        ****                     //sysexPointer = 0;
2382:main.c        ****                 }
2383:main.c        ****                 else if (midiMsg[1] == 0 || midiMsg[1] == 1 || midiMsg[1] == 2 || midiMsg[1] == 3 |
 9055              		.loc 1 2383 0
 9056 00be 3B68     		ldr	r3, [r7]
 9057 00c0 0133     		adds	r3, r3, #1
 9058 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9059 00c4 002B     		cmp	r3, #0
 9060 00c6 13D0     		beq	.L370
 9061              		.loc 1 2383 0 is_stmt 0 discriminator 1
 9062 00c8 3B68     		ldr	r3, [r7]
 9063 00ca 0133     		adds	r3, r3, #1
 9064 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9065 00ce 012B     		cmp	r3, #1
 9066 00d0 0ED0     		beq	.L370
 9067              		.loc 1 2383 0 discriminator 2
 9068 00d2 3B68     		ldr	r3, [r7]
 9069 00d4 0133     		adds	r3, r3, #1
 9070 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9071 00d8 022B     		cmp	r3, #2
 9072 00da 09D0     		beq	.L370
 9073              		.loc 1 2383 0 discriminator 3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 204


 9074 00dc 3B68     		ldr	r3, [r7]
 9075 00de 0133     		adds	r3, r3, #1
 9076 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9077 00e2 032B     		cmp	r3, #3
 9078 00e4 04D0     		beq	.L370
 9079              		.loc 1 2383 0 discriminator 4
 9080 00e6 3B68     		ldr	r3, [r7]
 9081 00e8 0133     		adds	r3, r3, #1
 9082 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9083 00ec 042B     		cmp	r3, #4
 9084 00ee 1ED1     		bne	.L361
 9085              	.L370:
2384:main.c        ****                 {
2385:main.c        ****                     receivingSysex = 1;
 9086              		.loc 1 2385 0 is_stmt 1
 9087 00f0 124B     		ldr	r3, .L371+8
 9088 00f2 0122     		movs	r2, #1
 9089 00f4 1A70     		strb	r2, [r3]
2386:main.c        ****                     
2387:main.c        ****                     // if this is the first chunk, put in the first and second elements (following 
2388:main.c        ****                     if (sysexPointer == 0)
 9090              		.loc 1 2388 0
 9091 00f6 124B     		ldr	r3, .L371+12
 9092 00f8 1B68     		ldr	r3, [r3]
 9093 00fa 002B     		cmp	r3, #0
 9094 00fc 17D1     		bne	.L361
2389:main.c        ****                     {
2390:main.c        ****                         sysexBuffer[sysexPointer++ & sysexPointerMask] = midiMsg[1];
 9095              		.loc 1 2390 0
 9096 00fe 104B     		ldr	r3, .L371+12
 9097 0100 1B68     		ldr	r3, [r3]
 9098 0102 5A1C     		adds	r2, r3, #1
 9099 0104 0E49     		ldr	r1, .L371+12
 9100 0106 0A60     		str	r2, [r1]
 9101 0108 40F2FF72 		movw	r2, #2047
 9102 010c 1340     		ands	r3, r3, r2
 9103 010e 3A68     		ldr	r2, [r7]
 9104 0110 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 9105 0112 0C4A     		ldr	r2, .L371+16
 9106 0114 D154     		strb	r1, [r2, r3]
2391:main.c        ****                         sysexBuffer[sysexPointer++ & sysexPointerMask] = midiMsg[2];
 9107              		.loc 1 2391 0
 9108 0116 0A4B     		ldr	r3, .L371+12
 9109 0118 1B68     		ldr	r3, [r3]
 9110 011a 5A1C     		adds	r2, r3, #1
 9111 011c 0849     		ldr	r1, .L371+12
 9112 011e 0A60     		str	r2, [r1]
 9113 0120 40F2FF72 		movw	r2, #2047
 9114 0124 1340     		ands	r3, r3, r2
 9115 0126 3A68     		ldr	r2, [r7]
 9116 0128 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 9117 012a 064A     		ldr	r2, .L371+16
 9118 012c D154     		strb	r1, [r2, r3]
 9119              	.L361:
2392:main.c        ****                     }
2393:main.c        ****                 }
2394:main.c        ****             }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 205


2395:main.c        ****         }
2396:main.c        ****         cable = cable; // so it doesn't complain about unused variables
2397:main.c        ****     }
2398:main.c        **** }    
 9120              		.loc 1 2398 0
 9121 012e 1037     		adds	r7, r7, #16
 9122              		.cfi_def_cfa_offset 8
 9123 0130 BD46     		mov	sp, r7
 9124              		.cfi_def_cfa_register 13
 9125              		@ sp needed
 9126 0132 80BD     		pop	{r7, pc}
 9127              	.L372:
 9128              		.align	2
 9129              	.L371:
 9130 0134 00000000 		.word	tempMIDI
 9131 0138 00000000 		.word	USB_active
 9132 013c 00000000 		.word	receivingSysex
 9133 0140 00000000 		.word	sysexPointer
 9134 0144 00000000 		.word	sysexBuffer
 9135 0148 00000000 		.word	parsingSysex
 9136 014c 00000000 		.word	parseThatMF
 9137              		.cfi_endproc
 9138              	.LFE93:
 9139              		.size	USB_callbackLocalMidiEvent, .-USB_callbackLocalMidiEvent
 9140              		.section	.text.scanUI,"ax",%progbits
 9141              		.align	2
 9142              		.global	scanUI
 9143              		.thumb
 9144              		.thumb_func
 9145              		.type	scanUI, %function
 9146              	scanUI:
 9147              	.LFB94:
2399:main.c        **** 
2400:main.c        **** void scanUI(void)
2401:main.c        **** {
 9148              		.loc 1 2401 0
 9149              		.cfi_startproc
 9150              		@ args = 0, pretend = 0, frame = 8
 9151              		@ frame_needed = 1, uses_anonymous_args = 0
 9152 0000 80B5     		push	{r7, lr}
 9153              		.cfi_def_cfa_offset 8
 9154              		.cfi_offset 7, -8
 9155              		.cfi_offset 14, -4
 9156 0002 82B0     		sub	sp, sp, #8
 9157              		.cfi_def_cfa_offset 16
 9158 0004 00AF     		add	r7, sp, #0
 9159              		.cfi_def_cfa_register 7
2402:main.c        ****     uint8_t tempButtons = Status_Reg_1_Read();
 9160              		.loc 1 2402 0
 9161 0006 FFF7FEFF 		bl	Status_Reg_1_Read
 9162 000a 0346     		mov	r3, r0
 9163 000c FB71     		strb	r3, [r7, #7]
2403:main.c        ****         if (!(tempButtons&(1<<4)))
 9164              		.loc 1 2403 0
 9165 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9166 0010 03F01003 		and	r3, r3, #16
 9167 0014 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 206


 9168 0016 24D1     		bne	.L374
2404:main.c        ****         {
2405:main.c        ****             if (octave > 4)
 9169              		.loc 1 2405 0
 9170 0018 AC4B     		ldr	r3, .L404
 9171 001a 1B68     		ldr	r3, [r3]
 9172 001c 042B     		cmp	r3, #4
 9173 001e 03DD     		ble	.L375
2406:main.c        ****             {
2407:main.c        ****                 octave = 4;
 9174              		.loc 1 2407 0
 9175 0020 AA4B     		ldr	r3, .L404
 9176 0022 0422     		movs	r2, #4
 9177 0024 1A60     		str	r2, [r3]
 9178 0026 0CE0     		b	.L376
 9179              	.L375:
2408:main.c        ****             }
2409:main.c        ****             else if ((oct1Up) && (octave > 0))
 9180              		.loc 1 2409 0
 9181 0028 A94B     		ldr	r3, .L404+4
 9182 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9183 002c 002B     		cmp	r3, #0
 9184 002e 08D0     		beq	.L376
 9185              		.loc 1 2409 0 is_stmt 0 discriminator 1
 9186 0030 A64B     		ldr	r3, .L404
 9187 0032 1B68     		ldr	r3, [r3]
 9188 0034 002B     		cmp	r3, #0
 9189 0036 04DD     		ble	.L376
2410:main.c        ****             {
2411:main.c        ****                 octave--;
 9190              		.loc 1 2411 0 is_stmt 1
 9191 0038 A44B     		ldr	r3, .L404
 9192 003a 1B68     		ldr	r3, [r3]
 9193 003c 013B     		subs	r3, r3, #1
 9194 003e A34A     		ldr	r2, .L404
 9195 0040 1360     		str	r3, [r2]
 9196              	.L376:
2412:main.c        ****             }
2413:main.c        ****             LED_amber1_Write(1);
 9197              		.loc 1 2413 0
 9198 0042 0120     		movs	r0, #1
 9199 0044 FFF7FEFF 		bl	LED_amber1_Write
2414:main.c        ****             LED_amber2_Write(0);
 9200              		.loc 1 2414 0
 9201 0048 0020     		movs	r0, #0
 9202 004a FFF7FEFF 		bl	LED_amber2_Write
2415:main.c        ****             LED_amber3_Write(0);
 9203              		.loc 1 2415 0
 9204 004e 0020     		movs	r0, #0
 9205 0050 FFF7FEFF 		bl	LED_amber3_Write
2416:main.c        ****             LED_amber4_Write(0);
 9206              		.loc 1 2416 0
 9207 0054 0020     		movs	r0, #0
 9208 0056 FFF7FEFF 		bl	LED_amber4_Write
2417:main.c        ****             oct1Up = 0;
 9209              		.loc 1 2417 0
 9210 005a 9D4B     		ldr	r3, .L404+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 207


 9211 005c 0022     		movs	r2, #0
 9212 005e 1A70     		strb	r2, [r3]
 9213 0060 07E0     		b	.L377
 9214              	.L374:
2418:main.c        ****         }
2419:main.c        ****         
2420:main.c        ****         else if ((tempButtons&(1<<4)))
 9215              		.loc 1 2420 0
 9216 0062 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9217 0064 03F01003 		and	r3, r3, #16
 9218 0068 002B     		cmp	r3, #0
 9219 006a 02D0     		beq	.L377
2421:main.c        ****         {
2422:main.c        ****             oct1Up = 1;
 9220              		.loc 1 2422 0
 9221 006c 984B     		ldr	r3, .L404+4
 9222 006e 0122     		movs	r2, #1
 9223 0070 1A70     		strb	r2, [r3]
 9224              	.L377:
2423:main.c        ****         }
2424:main.c        ****         
2425:main.c        ****         if (!oct2_Read())
 9225              		.loc 1 2425 0
 9226 0072 FFF7FEFF 		bl	oct2_Read
 9227 0076 0346     		mov	r3, r0
 9228 0078 002B     		cmp	r3, #0
 9229 007a 0ED1     		bne	.L378
2426:main.c        ****         {
2427:main.c        ****             octave = 5;
 9230              		.loc 1 2427 0
 9231 007c 934B     		ldr	r3, .L404
 9232 007e 0522     		movs	r2, #5
 9233 0080 1A60     		str	r2, [r3]
2428:main.c        ****             LED_amber1_Write(0);
 9234              		.loc 1 2428 0
 9235 0082 0020     		movs	r0, #0
 9236 0084 FFF7FEFF 		bl	LED_amber1_Write
2429:main.c        ****             LED_amber2_Write(1);
 9237              		.loc 1 2429 0
 9238 0088 0120     		movs	r0, #1
 9239 008a FFF7FEFF 		bl	LED_amber2_Write
2430:main.c        ****             LED_amber3_Write(0);
 9240              		.loc 1 2430 0
 9241 008e 0020     		movs	r0, #0
 9242 0090 FFF7FEFF 		bl	LED_amber3_Write
2431:main.c        ****             LED_amber4_Write(0);
 9243              		.loc 1 2431 0
 9244 0094 0020     		movs	r0, #0
 9245 0096 FFF7FEFF 		bl	LED_amber4_Write
 9246              	.L378:
2432:main.c        ****         }
2433:main.c        ****         if (!oct3_Read())
 9247              		.loc 1 2433 0
 9248 009a FFF7FEFF 		bl	oct3_Read
 9249 009e 0346     		mov	r3, r0
 9250 00a0 002B     		cmp	r3, #0
 9251 00a2 0ED1     		bne	.L379
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 208


2434:main.c        ****         {
2435:main.c        ****             octave = 6;
 9252              		.loc 1 2435 0
 9253 00a4 894B     		ldr	r3, .L404
 9254 00a6 0622     		movs	r2, #6
 9255 00a8 1A60     		str	r2, [r3]
2436:main.c        ****             LED_amber1_Write(0);
 9256              		.loc 1 2436 0
 9257 00aa 0020     		movs	r0, #0
 9258 00ac FFF7FEFF 		bl	LED_amber1_Write
2437:main.c        ****             LED_amber2_Write(0);
 9259              		.loc 1 2437 0
 9260 00b0 0020     		movs	r0, #0
 9261 00b2 FFF7FEFF 		bl	LED_amber2_Write
2438:main.c        ****             LED_amber3_Write(1);
 9262              		.loc 1 2438 0
 9263 00b6 0120     		movs	r0, #1
 9264 00b8 FFF7FEFF 		bl	LED_amber3_Write
2439:main.c        ****             LED_amber4_Write(0);            
 9265              		.loc 1 2439 0
 9266 00bc 0020     		movs	r0, #0
 9267 00be FFF7FEFF 		bl	LED_amber4_Write
 9268              	.L379:
2440:main.c        ****         }
2441:main.c        ****         if (!(tempButtons&(1<<5)))
 9269              		.loc 1 2441 0
 9270 00c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9271 00c4 03F02003 		and	r3, r3, #32
 9272 00c8 002B     		cmp	r3, #0
 9273 00ca 24D1     		bne	.L380
2442:main.c        ****         {
2443:main.c        ****             if (octave < 7)
 9274              		.loc 1 2443 0
 9275 00cc 7F4B     		ldr	r3, .L404
 9276 00ce 1B68     		ldr	r3, [r3]
 9277 00d0 062B     		cmp	r3, #6
 9278 00d2 03DC     		bgt	.L381
2444:main.c        ****             {
2445:main.c        ****                 octave = 7;
 9279              		.loc 1 2445 0
 9280 00d4 7D4B     		ldr	r3, .L404
 9281 00d6 0722     		movs	r2, #7
 9282 00d8 1A60     		str	r2, [r3]
 9283 00da 0CE0     		b	.L382
 9284              	.L381:
2446:main.c        **** 
2447:main.c        ****             }
2448:main.c        ****             else if ((oct4Up) && (octave < 11))
 9285              		.loc 1 2448 0
 9286 00dc 7D4B     		ldr	r3, .L404+8
 9287 00de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9288 00e0 002B     		cmp	r3, #0
 9289 00e2 08D0     		beq	.L382
 9290              		.loc 1 2448 0 is_stmt 0 discriminator 1
 9291 00e4 794B     		ldr	r3, .L404
 9292 00e6 1B68     		ldr	r3, [r3]
 9293 00e8 0A2B     		cmp	r3, #10
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 209


 9294 00ea 04DC     		bgt	.L382
2449:main.c        ****             {
2450:main.c        ****                 octave++;
 9295              		.loc 1 2450 0 is_stmt 1
 9296 00ec 774B     		ldr	r3, .L404
 9297 00ee 1B68     		ldr	r3, [r3]
 9298 00f0 0133     		adds	r3, r3, #1
 9299 00f2 764A     		ldr	r2, .L404
 9300 00f4 1360     		str	r3, [r2]
 9301              	.L382:
2451:main.c        **** 
2452:main.c        ****             }
2453:main.c        ****             LED_amber1_Write(0);
 9302              		.loc 1 2453 0
 9303 00f6 0020     		movs	r0, #0
 9304 00f8 FFF7FEFF 		bl	LED_amber1_Write
2454:main.c        ****             LED_amber2_Write(0);
 9305              		.loc 1 2454 0
 9306 00fc 0020     		movs	r0, #0
 9307 00fe FFF7FEFF 		bl	LED_amber2_Write
2455:main.c        ****             LED_amber3_Write(0);
 9308              		.loc 1 2455 0
 9309 0102 0020     		movs	r0, #0
 9310 0104 FFF7FEFF 		bl	LED_amber3_Write
2456:main.c        ****             LED_amber4_Write(1);
 9311              		.loc 1 2456 0
 9312 0108 0120     		movs	r0, #1
 9313 010a FFF7FEFF 		bl	LED_amber4_Write
2457:main.c        ****             oct4Up = 0;
 9314              		.loc 1 2457 0
 9315 010e 714B     		ldr	r3, .L404+8
 9316 0110 0022     		movs	r2, #0
 9317 0112 1A70     		strb	r2, [r3]
 9318 0114 07E0     		b	.L383
 9319              	.L380:
2458:main.c        ****         }
2459:main.c        ****         
2460:main.c        ****         else if ((tempButtons&(1<<5)))
 9320              		.loc 1 2460 0
 9321 0116 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9322 0118 03F02003 		and	r3, r3, #32
 9323 011c 002B     		cmp	r3, #0
 9324 011e 02D0     		beq	.L383
2461:main.c        ****         {
2462:main.c        ****             oct4Up = 1;
 9325              		.loc 1 2462 0
 9326 0120 6C4B     		ldr	r3, .L404+8
 9327 0122 0122     		movs	r2, #1
 9328 0124 1A70     		strb	r2, [r3]
 9329              	.L383:
2463:main.c        ****         }
2464:main.c        ****         
2465:main.c        ****         if (!neck1_button_Read())
 9330              		.loc 1 2465 0
 9331 0126 FFF7FEFF 		bl	neck1_button_Read
 9332 012a 0346     		mov	r3, r0
 9333 012c 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 210


 9334 012e 2FD1     		bne	.L384
2466:main.c        ****         {
2467:main.c        ****             currentNeck = 0;
 9335              		.loc 1 2467 0
 9336 0130 694B     		ldr	r3, .L404+12
 9337 0132 0022     		movs	r2, #0
 9338 0134 1A60     		str	r2, [r3]
2468:main.c        ****             currentCopedent = necks[currentNeck];
 9339              		.loc 1 2468 0
 9340 0136 684B     		ldr	r3, .L404+12
 9341 0138 1B68     		ldr	r3, [r3]
 9342 013a 684A     		ldr	r2, .L404+16
 9343 013c D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 9344 013e 684B     		ldr	r3, .L404+20
 9345 0140 1A70     		strb	r2, [r3]
2469:main.c        ****             neckByte = (necks[0]<<5) + (necks[1]<<2) + currentNeck;
 9346              		.loc 1 2469 0
 9347 0142 664B     		ldr	r3, .L404+16
 9348 0144 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9349 0146 5B01     		lsls	r3, r3, #5
 9350 0148 DAB2     		uxtb	r2, r3
 9351 014a 644B     		ldr	r3, .L404+16
 9352 014c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 9353 014e 9B00     		lsls	r3, r3, #2
 9354 0150 DBB2     		uxtb	r3, r3
 9355 0152 1344     		add	r3, r3, r2
 9356 0154 DAB2     		uxtb	r2, r3
 9357 0156 604B     		ldr	r3, .L404+12
 9358 0158 1B68     		ldr	r3, [r3]
 9359 015a DBB2     		uxtb	r3, r3
 9360 015c 1344     		add	r3, r3, r2
 9361 015e DAB2     		uxtb	r2, r3
 9362 0160 604B     		ldr	r3, .L404+24
 9363 0162 1A70     		strb	r2, [r3]
2470:main.c        ****             EEPROM_WriteByte(neckByte, EEPROM_NECKS_OFFSET);
 9364              		.loc 1 2470 0
 9365 0164 5F4B     		ldr	r3, .L404+24
 9366 0166 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9367 0168 40F2FE71 		movw	r1, #2046
 9368 016c 1846     		mov	r0, r3
 9369 016e FFF7FEFF 		bl	EEPROM_WriteByte
2471:main.c        ****             LED_red1_Write(0);
 9370              		.loc 1 2471 0
 9371 0172 0020     		movs	r0, #0
 9372 0174 FFF7FEFF 		bl	LED_red1_Write
2472:main.c        ****             LED_green2_Write(1);
 9373              		.loc 1 2472 0
 9374 0178 0120     		movs	r0, #1
 9375 017a FFF7FEFF 		bl	LED_green2_Write
2473:main.c        ****             if (!editMode)
 9376              		.loc 1 2473 0
 9377 017e 5A4B     		ldr	r3, .L404+28
 9378 0180 1B68     		ldr	r3, [r3]
 9379 0182 002B     		cmp	r3, #0
 9380 0184 02D1     		bne	.L385
2474:main.c        ****             {
2475:main.c        ****                 displayCurrentPresetNameAndCopedent();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 211


 9381              		.loc 1 2475 0
 9382 0186 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
 9383 018a 01E0     		b	.L384
 9384              	.L385:
2476:main.c        ****             }
2477:main.c        ****             else
2478:main.c        ****             {
2479:main.c        ****                 exitEditModeMenu();   
 9385              		.loc 1 2479 0
 9386 018c FFF7FEFF 		bl	exitEditModeMenu
 9387              	.L384:
2480:main.c        ****             }
2481:main.c        ****         }
2482:main.c        ****         if (!neck2_button_Read())
 9388              		.loc 1 2482 0
 9389 0190 FFF7FEFF 		bl	neck2_button_Read
 9390 0194 0346     		mov	r3, r0
 9391 0196 002B     		cmp	r3, #0
 9392 0198 2FD1     		bne	.L386
2483:main.c        ****         {
2484:main.c        ****             currentNeck = 1;
 9393              		.loc 1 2484 0
 9394 019a 4F4B     		ldr	r3, .L404+12
 9395 019c 0122     		movs	r2, #1
 9396 019e 1A60     		str	r2, [r3]
2485:main.c        ****             currentCopedent = necks[currentNeck];    
 9397              		.loc 1 2485 0
 9398 01a0 4D4B     		ldr	r3, .L404+12
 9399 01a2 1B68     		ldr	r3, [r3]
 9400 01a4 4D4A     		ldr	r2, .L404+16
 9401 01a6 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 9402 01a8 4D4B     		ldr	r3, .L404+20
 9403 01aa 1A70     		strb	r2, [r3]
2486:main.c        ****             neckByte = (necks[0]<<5) + (necks[1]<<2) + currentNeck;
 9404              		.loc 1 2486 0
 9405 01ac 4B4B     		ldr	r3, .L404+16
 9406 01ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9407 01b0 5B01     		lsls	r3, r3, #5
 9408 01b2 DAB2     		uxtb	r2, r3
 9409 01b4 494B     		ldr	r3, .L404+16
 9410 01b6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 9411 01b8 9B00     		lsls	r3, r3, #2
 9412 01ba DBB2     		uxtb	r3, r3
 9413 01bc 1344     		add	r3, r3, r2
 9414 01be DAB2     		uxtb	r2, r3
 9415 01c0 454B     		ldr	r3, .L404+12
 9416 01c2 1B68     		ldr	r3, [r3]
 9417 01c4 DBB2     		uxtb	r3, r3
 9418 01c6 1344     		add	r3, r3, r2
 9419 01c8 DAB2     		uxtb	r2, r3
 9420 01ca 464B     		ldr	r3, .L404+24
 9421 01cc 1A70     		strb	r2, [r3]
2487:main.c        ****             EEPROM_WriteByte(neckByte, EEPROM_NECKS_OFFSET);
 9422              		.loc 1 2487 0
 9423 01ce 454B     		ldr	r3, .L404+24
 9424 01d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9425 01d2 40F2FE71 		movw	r1, #2046
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 212


 9426 01d6 1846     		mov	r0, r3
 9427 01d8 FFF7FEFF 		bl	EEPROM_WriteByte
2488:main.c        ****             LED_red1_Write(1);
 9428              		.loc 1 2488 0
 9429 01dc 0120     		movs	r0, #1
 9430 01de FFF7FEFF 		bl	LED_red1_Write
2489:main.c        ****             LED_green2_Write(0);          
 9431              		.loc 1 2489 0
 9432 01e2 0020     		movs	r0, #0
 9433 01e4 FFF7FEFF 		bl	LED_green2_Write
2490:main.c        ****             if (!editMode)
 9434              		.loc 1 2490 0
 9435 01e8 3F4B     		ldr	r3, .L404+28
 9436 01ea 1B68     		ldr	r3, [r3]
 9437 01ec 002B     		cmp	r3, #0
 9438 01ee 02D1     		bne	.L387
2491:main.c        ****             {
2492:main.c        ****                 displayCurrentPresetNameAndCopedent();
 9439              		.loc 1 2492 0
 9440 01f0 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
 9441 01f4 01E0     		b	.L386
 9442              	.L387:
2493:main.c        ****             }
2494:main.c        ****             else
2495:main.c        ****             {
2496:main.c        ****                 exitEditModeMenu();   
 9443              		.loc 1 2496 0
 9444 01f6 FFF7FEFF 		bl	exitEditModeMenu
 9445              	.L386:
2497:main.c        ****             }
2498:main.c        ****         }
2499:main.c        ****         
2500:main.c        ****         if ((!(tempButtons&(1<<6))) && (shiftUp))
 9446              		.loc 1 2500 0
 9447 01fa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9448 01fc 03F04003 		and	r3, r3, #64
 9449 0200 002B     		cmp	r3, #0
 9450 0202 1DD1     		bne	.L388
 9451              		.loc 1 2500 0 is_stmt 0 discriminator 1
 9452 0204 394B     		ldr	r3, .L404+32
 9453 0206 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9454 0208 002B     		cmp	r3, #0
 9455 020a 19D0     		beq	.L388
2501:main.c        ****         {
2502:main.c        ****             dualSlider = !dualSlider;
 9456              		.loc 1 2502 0 is_stmt 1
 9457 020c 384B     		ldr	r3, .L404+36
 9458 020e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9459 0210 002B     		cmp	r3, #0
 9460 0212 0CBF     		ite	eq
 9461 0214 0123     		moveq	r3, #1
 9462 0216 0023     		movne	r3, #0
 9463 0218 DBB2     		uxtb	r3, r3
 9464 021a 1A46     		mov	r2, r3
 9465 021c 344B     		ldr	r3, .L404+36
 9466 021e 1A70     		strb	r2, [r3]
2503:main.c        ****             LED_green1_Write(dualSlider);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 213


 9467              		.loc 1 2503 0
 9468 0220 334B     		ldr	r3, .L404+36
 9469 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9470 0224 1846     		mov	r0, r3
 9471 0226 FFF7FEFF 		bl	LED_green1_Write
2504:main.c        ****             EEPROM_WriteByte(dualSlider, EEPROM_DUAL_SLIDER_OFFSET);
 9472              		.loc 1 2504 0
 9473 022a 314B     		ldr	r3, .L404+36
 9474 022c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9475 022e 40F2FD71 		movw	r1, #2045
 9476 0232 1846     		mov	r0, r3
 9477 0234 FFF7FEFF 		bl	EEPROM_WriteByte
2505:main.c        ****             shiftUp = 0;
 9478              		.loc 1 2505 0
 9479 0238 2C4B     		ldr	r3, .L404+32
 9480 023a 0022     		movs	r2, #0
 9481 023c 1A70     		strb	r2, [r3]
 9482 023e 07E0     		b	.L389
 9483              	.L388:
2506:main.c        ****         }
2507:main.c        ****         else if ((tempButtons&(1<<6)))
 9484              		.loc 1 2507 0
 9485 0240 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9486 0242 03F04003 		and	r3, r3, #64
 9487 0246 002B     		cmp	r3, #0
 9488 0248 02D0     		beq	.L389
2508:main.c        ****         {
2509:main.c        ****             shiftUp = 1;
 9489              		.loc 1 2509 0
 9490 024a 284B     		ldr	r3, .L404+32
 9491 024c 0122     		movs	r2, #1
 9492 024e 1A70     		strb	r2, [r3]
 9493              	.L389:
2510:main.c        ****         }
2511:main.c        **** 
2512:main.c        ****         if ((!(tempButtons&(1<<0))) && (button1Up))
 9494              		.loc 1 2512 0
 9495 0250 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9496 0252 03F00103 		and	r3, r3, #1
 9497 0256 002B     		cmp	r3, #0
 9498 0258 09D1     		bne	.L390
 9499              		.loc 1 2512 0 is_stmt 0 discriminator 1
 9500 025a 264B     		ldr	r3, .L404+40
 9501 025c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9502 025e 002B     		cmp	r3, #0
 9503 0260 05D0     		beq	.L390
2513:main.c        ****         {
2514:main.c        ****             leftPressed();
 9504              		.loc 1 2514 0 is_stmt 1
 9505 0262 FFF7FEFF 		bl	leftPressed
2515:main.c        ****             button1Up = 0;
 9506              		.loc 1 2515 0
 9507 0266 234B     		ldr	r3, .L404+40
 9508 0268 0022     		movs	r2, #0
 9509 026a 1A70     		strb	r2, [r3]
 9510 026c 07E0     		b	.L391
 9511              	.L390:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 214


2516:main.c        ****         }
2517:main.c        ****         else if ((tempButtons&(1<<0)))
 9512              		.loc 1 2517 0
 9513 026e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9514 0270 03F00103 		and	r3, r3, #1
 9515 0274 002B     		cmp	r3, #0
 9516 0276 02D0     		beq	.L391
2518:main.c        ****         {
2519:main.c        ****             button1Up = 1;
 9517              		.loc 1 2519 0
 9518 0278 1E4B     		ldr	r3, .L404+40
 9519 027a 0122     		movs	r2, #1
 9520 027c 1A70     		strb	r2, [r3]
 9521              	.L391:
2520:main.c        ****         }
2521:main.c        ****         
2522:main.c        ****         if ((!(tempButtons&(1<<1))) && (button2Up))
 9522              		.loc 1 2522 0
 9523 027e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9524 0280 03F00203 		and	r3, r3, #2
 9525 0284 002B     		cmp	r3, #0
 9526 0286 09D1     		bne	.L392
 9527              		.loc 1 2522 0 is_stmt 0 discriminator 1
 9528 0288 1B4B     		ldr	r3, .L404+44
 9529 028a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9530 028c 002B     		cmp	r3, #0
 9531 028e 05D0     		beq	.L392
2523:main.c        ****         {
2524:main.c        ****             rightPressed();
 9532              		.loc 1 2524 0 is_stmt 1
 9533 0290 FFF7FEFF 		bl	rightPressed
2525:main.c        ****             button2Up = 0;
 9534              		.loc 1 2525 0
 9535 0294 184B     		ldr	r3, .L404+44
 9536 0296 0022     		movs	r2, #0
 9537 0298 1A70     		strb	r2, [r3]
 9538 029a 07E0     		b	.L393
 9539              	.L392:
2526:main.c        ****         }
2527:main.c        ****         else if ((tempButtons&(1<<1)))
 9540              		.loc 1 2527 0
 9541 029c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9542 029e 03F00203 		and	r3, r3, #2
 9543 02a2 002B     		cmp	r3, #0
 9544 02a4 02D0     		beq	.L393
2528:main.c        ****         {
2529:main.c        ****             button2Up = 1;
 9545              		.loc 1 2529 0
 9546 02a6 144B     		ldr	r3, .L404+44
 9547 02a8 0122     		movs	r2, #1
 9548 02aa 1A70     		strb	r2, [r3]
 9549              	.L393:
2530:main.c        ****         }
2531:main.c        ****         
2532:main.c        ****         if ((!(tempButtons&(1<<2))) && (button3Up))
 9550              		.loc 1 2532 0
 9551 02ac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 215


 9552 02ae 03F00403 		and	r3, r3, #4
 9553 02b2 002B     		cmp	r3, #0
 9554 02b4 24D1     		bne	.L394
 9555              		.loc 1 2532 0 is_stmt 0 discriminator 1
 9556 02b6 114B     		ldr	r3, .L404+48
 9557 02b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9558 02ba 002B     		cmp	r3, #0
 9559 02bc 20D0     		beq	.L394
2533:main.c        ****         {
2534:main.c        ****             downPressed();
 9560              		.loc 1 2534 0 is_stmt 1
 9561 02be FFF7FEFF 		bl	downPressed
2535:main.c        ****             button3Up = 0;
 9562              		.loc 1 2535 0
 9563 02c2 0E4B     		ldr	r3, .L404+48
 9564 02c4 0022     		movs	r2, #0
 9565 02c6 1A70     		strb	r2, [r3]
 9566 02c8 22E0     		b	.L395
 9567              	.L405:
 9568 02ca 00BF     		.align	2
 9569              	.L404:
 9570 02cc 00000000 		.word	octave
 9571 02d0 00000000 		.word	oct1Up
 9572 02d4 00000000 		.word	oct4Up
 9573 02d8 00000000 		.word	currentNeck
 9574 02dc 00000000 		.word	necks
 9575 02e0 00000000 		.word	currentCopedent
 9576 02e4 00000000 		.word	neckByte
 9577 02e8 00000000 		.word	editMode
 9578 02ec 00000000 		.word	shiftUp
 9579 02f0 00000000 		.word	dualSlider
 9580 02f4 00000000 		.word	button1Up
 9581 02f8 00000000 		.word	button2Up
 9582 02fc 00000000 		.word	button3Up
 9583              	.L394:
2536:main.c        ****         }
2537:main.c        ****         else if ((tempButtons&(1<<2)))
 9584              		.loc 1 2537 0
 9585 0300 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9586 0302 03F00403 		and	r3, r3, #4
 9587 0306 002B     		cmp	r3, #0
 9588 0308 02D0     		beq	.L395
2538:main.c        ****         {
2539:main.c        ****             button3Up = 1;
 9589              		.loc 1 2539 0
 9590 030a 2C4B     		ldr	r3, .L406
 9591 030c 0122     		movs	r2, #1
 9592 030e 1A70     		strb	r2, [r3]
 9593              	.L395:
2540:main.c        ****         }
2541:main.c        ****         
2542:main.c        ****         if ((!(tempButtons&(1<<3))) && (button4Up))
 9594              		.loc 1 2542 0
 9595 0310 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9596 0312 03F00803 		and	r3, r3, #8
 9597 0316 002B     		cmp	r3, #0
 9598 0318 09D1     		bne	.L396
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 216


 9599              		.loc 1 2542 0 is_stmt 0 discriminator 1
 9600 031a 294B     		ldr	r3, .L406+4
 9601 031c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9602 031e 002B     		cmp	r3, #0
 9603 0320 05D0     		beq	.L396
2543:main.c        ****         {
2544:main.c        ****             upPressed();
 9604              		.loc 1 2544 0 is_stmt 1
 9605 0322 FFF7FEFF 		bl	upPressed
2545:main.c        ****             button4Up = 0;
 9606              		.loc 1 2545 0
 9607 0326 264B     		ldr	r3, .L406+4
 9608 0328 0022     		movs	r2, #0
 9609 032a 1A70     		strb	r2, [r3]
 9610 032c 07E0     		b	.L397
 9611              	.L396:
2546:main.c        ****         }
2547:main.c        ****         else if ((tempButtons&(1<<3)))
 9612              		.loc 1 2547 0
 9613 032e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 9614 0330 03F00803 		and	r3, r3, #8
 9615 0334 002B     		cmp	r3, #0
 9616 0336 02D0     		beq	.L397
2548:main.c        ****         {
2549:main.c        ****             button4Up = 1;
 9617              		.loc 1 2549 0
 9618 0338 214B     		ldr	r3, .L406+4
 9619 033a 0122     		movs	r2, #1
 9620 033c 1A70     		strb	r2, [r3]
 9621              	.L397:
2550:main.c        ****         }
2551:main.c        ****         
2552:main.c        ****         if ((!edit_button_Read()) && (editUp))
 9622              		.loc 1 2552 0
 9623 033e FFF7FEFF 		bl	edit_button_Read
 9624 0342 0346     		mov	r3, r0
 9625 0344 002B     		cmp	r3, #0
 9626 0346 1AD1     		bne	.L398
 9627              		.loc 1 2552 0 is_stmt 0 discriminator 1
 9628 0348 1E4B     		ldr	r3, .L406+8
 9629 034a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9630 034c 002B     		cmp	r3, #0
 9631 034e 16D0     		beq	.L398
2553:main.c        ****         {
2554:main.c        ****             editMode = !editMode;
 9632              		.loc 1 2554 0 is_stmt 1
 9633 0350 1D4B     		ldr	r3, .L406+12
 9634 0352 1B68     		ldr	r3, [r3]
 9635 0354 002B     		cmp	r3, #0
 9636 0356 0CBF     		ite	eq
 9637 0358 0123     		moveq	r3, #1
 9638 035a 0023     		movne	r3, #0
 9639 035c DBB2     		uxtb	r3, r3
 9640 035e 1A46     		mov	r2, r3
 9641 0360 194B     		ldr	r3, .L406+12
 9642 0362 1A60     		str	r2, [r3]
2555:main.c        ****             if (editMode)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 217


 9643              		.loc 1 2555 0
 9644 0364 184B     		ldr	r3, .L406+12
 9645 0366 1B68     		ldr	r3, [r3]
 9646 0368 002B     		cmp	r3, #0
 9647 036a 02D0     		beq	.L399
2556:main.c        ****             {
2557:main.c        ****                 enterEditModeMenu();
 9648              		.loc 1 2557 0
 9649 036c FFF7FEFF 		bl	enterEditModeMenu
 9650 0370 01E0     		b	.L400
 9651              	.L399:
2558:main.c        ****             }
2559:main.c        ****             else
2560:main.c        ****             {
2561:main.c        ****                 exitEditModeMenu();
 9652              		.loc 1 2561 0
 9653 0372 FFF7FEFF 		bl	exitEditModeMenu
 9654              	.L400:
2562:main.c        ****             }
2563:main.c        ****             editUp = 0;
 9655              		.loc 1 2563 0
 9656 0376 134B     		ldr	r3, .L406+8
 9657 0378 0022     		movs	r2, #0
 9658 037a 1A70     		strb	r2, [r3]
 9659 037c 07E0     		b	.L401
 9660              	.L398:
2564:main.c        ****         }
2565:main.c        ****         else if (edit_button_Read())
 9661              		.loc 1 2565 0
 9662 037e FFF7FEFF 		bl	edit_button_Read
 9663 0382 0346     		mov	r3, r0
 9664 0384 002B     		cmp	r3, #0
 9665 0386 02D0     		beq	.L401
2566:main.c        ****         {
2567:main.c        ****             editUp = 1;
 9666              		.loc 1 2567 0
 9667 0388 0E4B     		ldr	r3, .L406+8
 9668 038a 0122     		movs	r2, #1
 9669 038c 1A70     		strb	r2, [r3]
 9670              	.L401:
2568:main.c        ****         }
2569:main.c        ****         
2570:main.c        ****         if ((!(tempButtons&(1<<7))) && (encoderUp))
 9671              		.loc 1 2570 0
 9672 038e 97F90730 		ldrsb	r3, [r7, #7]
 9673 0392 002B     		cmp	r3, #0
 9674 0394 03DB     		blt	.L402
 9675              		.loc 1 2570 0 is_stmt 0 discriminator 1
 9676 0396 0D4B     		ldr	r3, .L406+16
 9677 0398 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9678 039a 002B     		cmp	r3, #0
 9679 039c 06D1     		bne	.L403
 9680              	.L402:
2571:main.c        ****         {
2572:main.c        ****             
2573:main.c        ****         }
2574:main.c        ****         else if ((tempButtons&(1<<7)))
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 218


 9681              		.loc 1 2574 0 is_stmt 1
 9682 039e 97F90730 		ldrsb	r3, [r7, #7]
 9683 03a2 002B     		cmp	r3, #0
 9684 03a4 02DA     		bge	.L403
2575:main.c        ****         {
2576:main.c        ****             encoderUp = 1;
 9685              		.loc 1 2576 0
 9686 03a6 094B     		ldr	r3, .L406+16
 9687 03a8 0122     		movs	r2, #1
 9688 03aa 1A70     		strb	r2, [r3]
 9689              	.L403:
2577:main.c        ****         }
2578:main.c        ****         
2579:main.c        ****         prevOctave = octave;
 9690              		.loc 1 2579 0
 9691 03ac 084B     		ldr	r3, .L406+20
 9692 03ae 1B68     		ldr	r3, [r3]
 9693 03b0 084A     		ldr	r2, .L406+24
 9694 03b2 1360     		str	r3, [r2]
2580:main.c        **** }
 9695              		.loc 1 2580 0
 9696 03b4 00BF     		nop
 9697 03b6 0837     		adds	r7, r7, #8
 9698              		.cfi_def_cfa_offset 8
 9699 03b8 BD46     		mov	sp, r7
 9700              		.cfi_def_cfa_register 13
 9701              		@ sp needed
 9702 03ba 80BD     		pop	{r7, pc}
 9703              	.L407:
 9704              		.align	2
 9705              	.L406:
 9706 03bc 00000000 		.word	button3Up
 9707 03c0 00000000 		.word	button4Up
 9708 03c4 00000000 		.word	editUp
 9709 03c8 00000000 		.word	editMode
 9710 03cc 00000000 		.word	encoderUp
 9711 03d0 00000000 		.word	octave
 9712 03d4 00000000 		.word	prevOctave
 9713              		.cfi_endproc
 9714              	.LFE94:
 9715              		.size	scanUI, .-scanUI
 9716              		.comm	menuPosition,6,4
 9717              		.global	calibrationNames
 9718              		.section	.rodata
 9719 042a 0000     		.align	2
 9720              	.LC4:
 9721 042c 20205345 		.ascii	"  SET LEVERS \000"
 9721      54204C45 
 9721      56455253 
 9721      2000
 9722 043a 0000     		.align	2
 9723              	.LC5:
 9724 043c 20205345 		.ascii	"  SET FRETS  \000"
 9724      54204652 
 9724      45545320 
 9724      2000
 9725 044a 0000     		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 219


 9726              		.type	calibrationNames, %object
 9727              		.size	calibrationNames, 12
 9728              	calibrationNames:
 9729 044c 2C040000 		.word	.LC4
 9730 0450 3C040000 		.word	.LC5
 9731 0454 00000000 		.word	0
 9732              		.global	mainMenuNames
 9733              		.align	2
 9734              	.LC6:
 9735 0458 20204341 		.ascii	"  CALIBRATION\000"
 9735      4C494252 
 9735      4154494F 
 9735      4E00
 9736 0466 0000     		.align	2
 9737              	.LC7:
 9738 0468 20205345 		.ascii	"  SETTINGS   \000"
 9738      5454494E 
 9738      47532020 
 9738      2000
 9739 0476 0000     		.align	2
 9740              		.type	mainMenuNames, %object
 9741              		.size	mainMenuNames, 12
 9742              	mainMenuNames:
 9743 0478 58040000 		.word	.LC6
 9744 047c 68040000 		.word	.LC7
 9745 0480 00000000 		.word	0
 9746              		.global	settingsNames
 9747              		.align	2
 9748              	.LC8:
 9749 0484 20205452 		.ascii	"  TRANSPOSE  \000"
 9749      414E5350 
 9749      4F534520 
 9749      2000
 9750 0492 0000     		.align	2
 9751              	.LC9:
 9752 0494 20204F43 		.ascii	"  OCTAVE ACTION\000"
 9752      54415645 
 9752      20414354 
 9752      494F4E00 
 9753              		.align	2
 9754              	.LC10:
 9755 04a4 20204445 		.ascii	"  DEADZONES    \000"
 9755      41445A4F 
 9755      4E455320 
 9755      20202000 
 9756              		.align	2
 9757              	.LC11:
 9758 04b4 2020534C 		.ascii	"  SLIDER REPR \000"
 9758      49444552 
 9758      20524550 
 9758      522000
 9759 04c3 00       		.align	2
 9760              	.LC12:
 9761 04c4 2020534D 		.ascii	"  SMOOTHING   \000"
 9761      4F4F5448 
 9761      494E4720 
 9761      202000
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 220


 9762 04d3 00       		.align	2
 9763              	.LC13:
 9764 04d4 20204D49 		.ascii	"  MIDI SEND  \000"
 9764      44492053 
 9764      454E4420 
 9764      2000
 9765 04e2 0000     		.align	2
 9766              		.type	settingsNames, %object
 9767              		.size	settingsNames, 28
 9768              	settingsNames:
 9769 04e4 84040000 		.word	.LC8
 9770 04e8 94040000 		.word	.LC9
 9771 04ec A4040000 		.word	.LC10
 9772 04f0 B4040000 		.word	.LC11
 9773 04f4 C4040000 		.word	.LC12
 9774 04f8 D4040000 		.word	.LC13
 9775 04fc 00000000 		.word	0
 9776              		.global	numMainMenuItems
 9777              		.data
 9778              		.type	numMainMenuItems, %object
 9779              		.size	numMainMenuItems, 1
 9780              	numMainMenuItems:
 9781 00c2 02       		.byte	2
 9782              		.global	numCalibrationItems
 9783              		.type	numCalibrationItems, %object
 9784              		.size	numCalibrationItems, 1
 9785              	numCalibrationItems:
 9786 00c3 02       		.byte	2
 9787              		.global	numSettingsItems
 9788              		.type	numSettingsItems, %object
 9789              		.size	numSettingsItems, 1
 9790              	numSettingsItems:
 9791 00c4 06       		.byte	6
 9792              		.section	.rodata
 9793              		.align	2
 9794              	.LC14:
 9795 0500 20204341 		.ascii	"  CALIBRATION     \000"
 9795      4C494252 
 9795      4154494F 
 9795      4E202020 
 9795      202000
 9796 0513 00       		.align	2
 9797              	.LC15:
 9798 0514 20205345 		.ascii	"  SETTINGS       \000"
 9798      5454494E 
 9798      47532020 
 9798      20202020 
 9798      2000
 9799              		.section	.text.enterEditModeMenu,"ax",%progbits
 9800              		.align	2
 9801              		.global	enterEditModeMenu
 9802              		.thumb
 9803              		.thumb_func
 9804              		.type	enterEditModeMenu, %function
 9805              	enterEditModeMenu:
 9806              	.LFB95:
2581:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 221


2582:main.c        **** //signed so that we can check if it goes below zero
2583:main.c        **** int8_t menuPosition[3][2];
2584:main.c        **** enum direction{Left, Right, Down, Up, Enter};
2585:main.c        **** 
2586:main.c        **** 
2587:main.c        **** const char* const calibrationNames[] = { "  SET LEVERS ", "  SET FRETS  ", 0 }; 
2588:main.c        **** const char* const mainMenuNames[] =    { "  CALIBRATION", "  SETTINGS   ", 0 }; 
2589:main.c        **** const char* const settingsNames[] =   { "  TRANSPOSE  ", "  OCTAVE ACTION", "  DEADZONES    ", "  S
2590:main.c        **** uint8_t numMainMenuItems = 2;
2591:main.c        **** uint8_t numCalibrationItems = 2;
2592:main.c        **** uint8_t numSettingsItems = 6;
2593:main.c        **** 
2594:main.c        **** void enterEditModeMenu(void)
2595:main.c        **** {
 9807              		.loc 1 2595 0
 9808              		.cfi_startproc
 9809              		@ args = 0, pretend = 0, frame = 0
 9810              		@ frame_needed = 1, uses_anonymous_args = 0
 9811 0000 80B5     		push	{r7, lr}
 9812              		.cfi_def_cfa_offset 8
 9813              		.cfi_offset 7, -8
 9814              		.cfi_offset 14, -4
 9815 0002 00AF     		add	r7, sp, #0
 9816              		.cfi_def_cfa_register 7
2596:main.c        **** 
2597:main.c        ****     OLEDclear(128, 64);
 9817              		.loc 1 2597 0
 9818 0004 4021     		movs	r1, #64
 9819 0006 8020     		movs	r0, #128
 9820 0008 FFF7FEFF 		bl	OLEDclear
2598:main.c        ****     myGFX_setFont(2);
 9821              		.loc 1 2598 0
 9822 000c 0220     		movs	r0, #2
 9823 000e FFF7FEFF 		bl	myGFX_setFont
2599:main.c        ****     OLEDtextColor(0, 1);
 9824              		.loc 1 2599 0
 9825 0012 0121     		movs	r1, #1
 9826 0014 0020     		movs	r0, #0
 9827 0016 FFF7FEFF 		bl	OLEDtextColor
2600:main.c        ****     OLEDwriteString("  CALIBRATION     ", 15, 0, FirstLine);
 9828              		.loc 1 2600 0
 9829 001a 0023     		movs	r3, #0
 9830 001c 0022     		movs	r2, #0
 9831 001e 0F21     		movs	r1, #15
 9832 0020 1A48     		ldr	r0, .L409
 9833 0022 FFF7FEFF 		bl	OLEDwriteString
2601:main.c        ****     OLEDwriteArrow(0, FirstLine);
 9834              		.loc 1 2601 0
 9835 0026 0021     		movs	r1, #0
 9836 0028 0020     		movs	r0, #0
 9837 002a FFF7FEFF 		bl	OLEDwriteArrow
2602:main.c        ****     OLEDtextColor(1, 0);
 9838              		.loc 1 2602 0
 9839 002e 0021     		movs	r1, #0
 9840 0030 0120     		movs	r0, #1
 9841 0032 FFF7FEFF 		bl	OLEDtextColor
2603:main.c        ****     OLEDwriteString("  SETTINGS       ", 15, 0, SecondLine);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 222


 9842              		.loc 1 2603 0
 9843 0036 0123     		movs	r3, #1
 9844 0038 0022     		movs	r2, #0
 9845 003a 0F21     		movs	r1, #15
 9846 003c 1448     		ldr	r0, .L409+4
 9847 003e FFF7FEFF 		bl	OLEDwriteString
2604:main.c        ****     OLEDtextColor(1, 0);
 9848              		.loc 1 2604 0
 9849 0042 0021     		movs	r1, #0
 9850 0044 0120     		movs	r0, #1
 9851 0046 FFF7FEFF 		bl	OLEDtextColor
2605:main.c        ****     mainOLEDWaitingToSend = 1;
 9852              		.loc 1 2605 0
 9853 004a 124B     		ldr	r3, .L409+8
 9854 004c 0122     		movs	r2, #1
 9855 004e 1A60     		str	r2, [r3]
2606:main.c        ****     editMode = 1;
 9856              		.loc 1 2606 0
 9857 0050 114B     		ldr	r3, .L409+12
 9858 0052 0122     		movs	r2, #1
 9859 0054 1A60     		str	r2, [r3]
2607:main.c        ****     LED_red2_Write(editMode);
 9860              		.loc 1 2607 0
 9861 0056 104B     		ldr	r3, .L409+12
 9862 0058 1B68     		ldr	r3, [r3]
 9863 005a DBB2     		uxtb	r3, r3
 9864 005c 1846     		mov	r0, r3
 9865 005e FFF7FEFF 		bl	LED_red2_Write
2608:main.c        ****     //initialize menu position to all zero
2609:main.c        ****     menuPosition[0][0] = 0; //x
 9866              		.loc 1 2609 0
 9867 0062 0E4B     		ldr	r3, .L409+16
 9868 0064 0022     		movs	r2, #0
 9869 0066 1A70     		strb	r2, [r3]
2610:main.c        ****     menuPosition[0][1] = 0; //y
 9870              		.loc 1 2610 0
 9871 0068 0C4B     		ldr	r3, .L409+16
 9872 006a 0022     		movs	r2, #0
 9873 006c 5A70     		strb	r2, [r3, #1]
2611:main.c        ****     menuPosition[1][0] = 0; //x
 9874              		.loc 1 2611 0
 9875 006e 0B4B     		ldr	r3, .L409+16
 9876 0070 0022     		movs	r2, #0
 9877 0072 9A70     		strb	r2, [r3, #2]
2612:main.c        ****     menuPosition[1][1] = 0; //y
 9878              		.loc 1 2612 0
 9879 0074 094B     		ldr	r3, .L409+16
 9880 0076 0022     		movs	r2, #0
 9881 0078 DA70     		strb	r2, [r3, #3]
2613:main.c        ****     menuPosition[2][0] = 0; //x
 9882              		.loc 1 2613 0
 9883 007a 084B     		ldr	r3, .L409+16
 9884 007c 0022     		movs	r2, #0
 9885 007e 1A71     		strb	r2, [r3, #4]
2614:main.c        ****     menuPosition[2][1] = 0; //y
 9886              		.loc 1 2614 0
 9887 0080 064B     		ldr	r3, .L409+16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 223


 9888 0082 0022     		movs	r2, #0
 9889 0084 5A71     		strb	r2, [r3, #5]
2615:main.c        **** }
 9890              		.loc 1 2615 0
 9891 0086 00BF     		nop
 9892 0088 80BD     		pop	{r7, pc}
 9893              	.L410:
 9894 008a 00BF     		.align	2
 9895              	.L409:
 9896 008c 00050000 		.word	.LC14
 9897 0090 14050000 		.word	.LC15
 9898 0094 00000000 		.word	mainOLEDWaitingToSend
 9899 0098 00000000 		.word	editMode
 9900 009c 00000000 		.word	menuPosition
 9901              		.cfi_endproc
 9902              	.LFE95:
 9903              		.size	enterEditModeMenu, .-enterEditModeMenu
 9904              		.section	.text.exitEditModeMenu,"ax",%progbits
 9905              		.align	2
 9906              		.global	exitEditModeMenu
 9907              		.thumb
 9908              		.thumb_func
 9909              		.type	exitEditModeMenu, %function
 9910              	exitEditModeMenu:
 9911              	.LFB96:
2616:main.c        **** 
2617:main.c        **** void exitEditModeMenu(void)
2618:main.c        **** {
 9912              		.loc 1 2618 0
 9913              		.cfi_startproc
 9914              		@ args = 0, pretend = 0, frame = 0
 9915              		@ frame_needed = 1, uses_anonymous_args = 0
 9916 0000 80B5     		push	{r7, lr}
 9917              		.cfi_def_cfa_offset 8
 9918              		.cfi_offset 7, -8
 9919              		.cfi_offset 14, -4
 9920 0002 00AF     		add	r7, sp, #0
 9921              		.cfi_def_cfa_register 7
2619:main.c        ****     
2620:main.c        ****     if (leverCalibrationMode == 1)
 9922              		.loc 1 2620 0
 9923 0004 0C4B     		ldr	r3, .L414
 9924 0006 1B68     		ldr	r3, [r3]
 9925 0008 012B     		cmp	r3, #1
 9926 000a 01D1     		bne	.L412
2621:main.c        ****     {
2622:main.c        ****         exitLeverCalibrationMode();
 9927              		.loc 1 2622 0
 9928 000c FFF7FEFF 		bl	exitLeverCalibrationMode
 9929              	.L412:
2623:main.c        ****     }
2624:main.c        ****     if (fretCalibrationMode == 1)
 9930              		.loc 1 2624 0
 9931 0010 0A4B     		ldr	r3, .L414+4
 9932 0012 1B68     		ldr	r3, [r3]
 9933 0014 012B     		cmp	r3, #1
 9934 0016 01D1     		bne	.L413
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 224


2625:main.c        ****     {
2626:main.c        ****         exitFretCalibrationMode();
 9935              		.loc 1 2626 0
 9936 0018 FFF7FEFF 		bl	exitFretCalibrationMode
 9937              	.L413:
2627:main.c        ****     }
2628:main.c        ****     editMode = 0;
 9938              		.loc 1 2628 0
 9939 001c 084B     		ldr	r3, .L414+8
 9940 001e 0022     		movs	r2, #0
 9941 0020 1A60     		str	r2, [r3]
2629:main.c        ****     LED_red2_Write(editMode);
 9942              		.loc 1 2629 0
 9943 0022 074B     		ldr	r3, .L414+8
 9944 0024 1B68     		ldr	r3, [r3]
 9945 0026 DBB2     		uxtb	r3, r3
 9946 0028 1846     		mov	r0, r3
 9947 002a FFF7FEFF 		bl	LED_red2_Write
2630:main.c        ****     displayCurrentPresetNameAndCopedent();
 9948              		.loc 1 2630 0
 9949 002e FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
2631:main.c        **** }
 9950              		.loc 1 2631 0
 9951 0032 00BF     		nop
 9952 0034 80BD     		pop	{r7, pc}
 9953              	.L415:
 9954 0036 00BF     		.align	2
 9955              	.L414:
 9956 0038 00000000 		.word	leverCalibrationMode
 9957 003c 00000000 		.word	fretCalibrationMode
 9958 0040 00000000 		.word	editMode
 9959              		.cfi_endproc
 9960              	.LFE96:
 9961              		.size	exitEditModeMenu, .-exitEditModeMenu
 9962              		.global	fretToCalibrate
 9963              		.bss
 9964              		.type	fretToCalibrate, %object
 9965              		.size	fretToCalibrate, 1
 9966              	fretToCalibrate:
 9967 012d 00       		.space	1
 9968              		.global	whichFretArray
 9969              		.data
 9970 00c5 000000   		.align	2
 9971              		.type	whichFretArray, %object
 9972              		.size	whichFretArray, 12
 9973              	whichFretArray:
 9974 00c8 00       		.byte	0
 9975 00c9 01       		.byte	1
 9976 00ca 03       		.byte	3
 9977 00cb 05       		.byte	5
 9978 00cc 07       		.byte	7
 9979 00cd 09       		.byte	9
 9980 00ce 0C       		.byte	12
 9981 00cf 0F       		.byte	15
 9982 00d0 11       		.byte	17
 9983 00d1 13       		.byte	19
 9984 00d2 15       		.byte	21
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 225


 9985 00d3 18       		.byte	24
 9986              		.section	.rodata
 9987 0526 0000     		.align	2
 9988              	.LC16:
 9989 0528 4E4F5720 		.ascii	"NOW PUT ALL\000"
 9989      50555420 
 9989      414C4C00 
 9990              		.align	2
 9991              	.LC17:
 9992 0534 50454441 		.ascii	"PEDALS/LEVERS  \000"
 9992      4C532F4C 
 9992      45564552 
 9992      53202000 
 9993              		.align	2
 9994              	.LC18:
 9995 0544 494E2052 		.ascii	"IN RESTING STATE\000"
 9995      45535449 
 9995      4E472053 
 9995      54415445 
 9995      00
 9996 0555 000000   		.align	2
 9997              	.LC19:
 9998 0558 414E4420 		.ascii	"AND PRESS EDIT\000"
 9998      50524553 
 9998      53204544 
 9998      495400
 9999 0567 00       		.align	2
 10000              	.LC20:
 10001 0568 20202020 		.ascii	"               \000"
 10001      20202020 
 10001      20202020 
 10001      20202000 
 10002              		.section	.text.menuAction,"ax",%progbits
 10003              		.align	2
 10004              		.global	menuAction
 10005              		.thumb
 10006              		.thumb_func
 10007              		.type	menuAction, %function
 10008              	menuAction:
 10009              	.LFB97:
2632:main.c        **** 
2633:main.c        **** uint8_t fretToCalibrate = 0;
2634:main.c        **** uint8_t whichFretArray[NUM_FRET_MEASUREMENTS] = {0, 1, 3, 5, 7, 9, 12, 15, 17, 19, 21, 24};
2635:main.c        **** void menuAction(enum direction action)
2636:main.c        **** {
 10010              		.loc 1 2636 0
 10011              		.cfi_startproc
 10012              		@ args = 0, pretend = 0, frame = 32
 10013              		@ frame_needed = 1, uses_anonymous_args = 0
 10014 0000 80B5     		push	{r7, lr}
 10015              		.cfi_def_cfa_offset 8
 10016              		.cfi_offset 7, -8
 10017              		.cfi_offset 14, -4
 10018 0002 88B0     		sub	sp, sp, #32
 10019              		.cfi_def_cfa_offset 40
 10020 0004 00AF     		add	r7, sp, #0
 10021              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 226


 10022 0006 0346     		mov	r3, r0
 10023 0008 FB71     		strb	r3, [r7, #7]
2637:main.c        ****     uint8_t whatToDraw = 0;
 10024              		.loc 1 2637 0
 10025 000a 0023     		movs	r3, #0
 10026 000c FB77     		strb	r3, [r7, #31]
2638:main.c        ****     
2639:main.c        ****     if (menuPosition[0][0] == 0) //we are at the main menu
 10027              		.loc 1 2639 0
 10028 000e A04B     		ldr	r3, .L467
 10029 0010 93F90030 		ldrsb	r3, [r3]
 10030 0014 002B     		cmp	r3, #0
 10031 0016 4BD1     		bne	.L417
2640:main.c        ****     {
2641:main.c        ****         //if we went up or down, switch the menu item
2642:main.c        ****         if (action == Up)
 10032              		.loc 1 2642 0
 10033 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10034 001a 032B     		cmp	r3, #3
 10035 001c 13D1     		bne	.L418
2643:main.c        ****         {
2644:main.c        ****             menuPosition[0][1]--;
 10036              		.loc 1 2644 0
 10037 001e 9C4B     		ldr	r3, .L467
 10038 0020 93F90130 		ldrsb	r3, [r3, #1]
 10039 0024 DBB2     		uxtb	r3, r3
 10040 0026 013B     		subs	r3, r3, #1
 10041 0028 DBB2     		uxtb	r3, r3
 10042 002a 5AB2     		sxtb	r2, r3
 10043 002c 984B     		ldr	r3, .L467
 10044 002e 5A70     		strb	r2, [r3, #1]
2645:main.c        ****             if (menuPosition[0][1] < 0)
 10045              		.loc 1 2645 0
 10046 0030 974B     		ldr	r3, .L467
 10047 0032 93F90130 		ldrsb	r3, [r3, #1]
 10048 0036 002B     		cmp	r3, #0
 10049 0038 02DA     		bge	.L419
2646:main.c        ****             {
2647:main.c        ****                 menuPosition[0][1] = 0;
 10050              		.loc 1 2647 0
 10051 003a 954B     		ldr	r3, .L467
 10052 003c 0022     		movs	r2, #0
 10053 003e 5A70     		strb	r2, [r3, #1]
 10054              	.L419:
2648:main.c        ****             }
2649:main.c        ****             whatToDraw = 1;
 10055              		.loc 1 2649 0
 10056 0040 0123     		movs	r3, #1
 10057 0042 FB77     		strb	r3, [r7, #31]
 10058 0044 70E1     		b	.L424
 10059              	.L418:
2650:main.c        ****         }
2651:main.c        ****         else if (action == Down)
 10060              		.loc 1 2651 0
 10061 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10062 0048 022B     		cmp	r3, #2
 10063 004a 1AD1     		bne	.L421
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 227


2652:main.c        ****         {
2653:main.c        ****             menuPosition[0][1]++;
 10064              		.loc 1 2653 0
 10065 004c 904B     		ldr	r3, .L467
 10066 004e 93F90130 		ldrsb	r3, [r3, #1]
 10067 0052 DBB2     		uxtb	r3, r3
 10068 0054 0133     		adds	r3, r3, #1
 10069 0056 DBB2     		uxtb	r3, r3
 10070 0058 5AB2     		sxtb	r2, r3
 10071 005a 8D4B     		ldr	r3, .L467
 10072 005c 5A70     		strb	r2, [r3, #1]
2654:main.c        ****             if (menuPosition[0][1] >= numMainMenuItems)
 10073              		.loc 1 2654 0
 10074 005e 8C4B     		ldr	r3, .L467
 10075 0060 93F90130 		ldrsb	r3, [r3, #1]
 10076 0064 1A46     		mov	r2, r3
 10077 0066 8B4B     		ldr	r3, .L467+4
 10078 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10079 006a 9A42     		cmp	r2, r3
 10080 006c 06DB     		blt	.L422
2655:main.c        ****             {
2656:main.c        ****                 menuPosition[0][1] = numMainMenuItems-1;
 10081              		.loc 1 2656 0
 10082 006e 894B     		ldr	r3, .L467+4
 10083 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10084 0072 013B     		subs	r3, r3, #1
 10085 0074 DBB2     		uxtb	r3, r3
 10086 0076 5AB2     		sxtb	r2, r3
 10087 0078 854B     		ldr	r3, .L467
 10088 007a 5A70     		strb	r2, [r3, #1]
 10089              	.L422:
2657:main.c        ****             }
2658:main.c        ****             whatToDraw = 1;
 10090              		.loc 1 2658 0
 10091 007c 0123     		movs	r3, #1
 10092 007e FB77     		strb	r3, [r7, #31]
 10093 0080 52E1     		b	.L424
 10094              	.L421:
2659:main.c        ****         }
2660:main.c        ****         else if ((action == Right) || (action == Enter))
 10095              		.loc 1 2660 0
 10096 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10097 0084 012B     		cmp	r3, #1
 10098 0086 03D0     		beq	.L423
 10099              		.loc 1 2660 0 is_stmt 0 discriminator 1
 10100 0088 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10101 008a 042B     		cmp	r3, #4
 10102 008c 40F04C81 		bne	.L424
 10103              	.L423:
2661:main.c        ****         {
2662:main.c        ****             //select this submenu from the main menu
2663:main.c        ****             menuPosition[0][0] = menuPosition[0][1]+1; //now [0][0] = 1 means calibration and [0][0
 10104              		.loc 1 2663 0 is_stmt 1
 10105 0090 7F4B     		ldr	r3, .L467
 10106 0092 93F90130 		ldrsb	r3, [r3, #1]
 10107 0096 DBB2     		uxtb	r3, r3
 10108 0098 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 228


 10109 009a DBB2     		uxtb	r3, r3
 10110 009c 5AB2     		sxtb	r2, r3
 10111 009e 7C4B     		ldr	r3, .L467
 10112 00a0 1A70     		strb	r2, [r3]
2664:main.c        ****             whatToDraw = menuPosition[0][0]+1;
 10113              		.loc 1 2664 0
 10114 00a2 7B4B     		ldr	r3, .L467
 10115 00a4 93F90030 		ldrsb	r3, [r3]
 10116 00a8 DBB2     		uxtb	r3, r3
 10117 00aa 0133     		adds	r3, r3, #1
 10118 00ac FB77     		strb	r3, [r7, #31]
 10119 00ae 3BE1     		b	.L424
 10120              	.L417:
2665:main.c        ****         }
2666:main.c        ****         //ignore left button
2667:main.c        ****     }
2668:main.c        ****     else if (menuPosition[0][0] == 1) //we are at the calibration submenu
 10121              		.loc 1 2668 0
 10122 00b0 774B     		ldr	r3, .L467
 10123 00b2 93F90030 		ldrsb	r3, [r3]
 10124 00b6 012B     		cmp	r3, #1
 10125 00b8 5ED1     		bne	.L425
2669:main.c        ****     {
2670:main.c        ****         //if we went up or down, switch the menu item
2671:main.c        ****         if (action == Up)
 10126              		.loc 1 2671 0
 10127 00ba FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10128 00bc 032B     		cmp	r3, #3
 10129 00be 13D1     		bne	.L426
2672:main.c        ****         {
2673:main.c        ****             menuPosition[1][1]--;
 10130              		.loc 1 2673 0
 10131 00c0 734B     		ldr	r3, .L467
 10132 00c2 93F90330 		ldrsb	r3, [r3, #3]
 10133 00c6 DBB2     		uxtb	r3, r3
 10134 00c8 013B     		subs	r3, r3, #1
 10135 00ca DBB2     		uxtb	r3, r3
 10136 00cc 5AB2     		sxtb	r2, r3
 10137 00ce 704B     		ldr	r3, .L467
 10138 00d0 DA70     		strb	r2, [r3, #3]
2674:main.c        ****             if (menuPosition[1][1] < 0)
 10139              		.loc 1 2674 0
 10140 00d2 6F4B     		ldr	r3, .L467
 10141 00d4 93F90330 		ldrsb	r3, [r3, #3]
 10142 00d8 002B     		cmp	r3, #0
 10143 00da 02DA     		bge	.L427
2675:main.c        ****             {
2676:main.c        ****                 menuPosition[1][1] = 0;
 10144              		.loc 1 2676 0
 10145 00dc 6C4B     		ldr	r3, .L467
 10146 00de 0022     		movs	r2, #0
 10147 00e0 DA70     		strb	r2, [r3, #3]
 10148              	.L427:
2677:main.c        ****             }
2678:main.c        ****             whatToDraw = 2;
 10149              		.loc 1 2678 0
 10150 00e2 0223     		movs	r3, #2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 229


 10151 00e4 FB77     		strb	r3, [r7, #31]
 10152 00e6 1FE1     		b	.L424
 10153              	.L426:
2679:main.c        ****         }
2680:main.c        ****         else if (action == Down)
 10154              		.loc 1 2680 0
 10155 00e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10156 00ea 022B     		cmp	r3, #2
 10157 00ec 1AD1     		bne	.L429
2681:main.c        ****         {
2682:main.c        ****             menuPosition[1][1]++;
 10158              		.loc 1 2682 0
 10159 00ee 684B     		ldr	r3, .L467
 10160 00f0 93F90330 		ldrsb	r3, [r3, #3]
 10161 00f4 DBB2     		uxtb	r3, r3
 10162 00f6 0133     		adds	r3, r3, #1
 10163 00f8 DBB2     		uxtb	r3, r3
 10164 00fa 5AB2     		sxtb	r2, r3
 10165 00fc 644B     		ldr	r3, .L467
 10166 00fe DA70     		strb	r2, [r3, #3]
2683:main.c        ****             if (menuPosition[1][1] >= numCalibrationItems)
 10167              		.loc 1 2683 0
 10168 0100 634B     		ldr	r3, .L467
 10169 0102 93F90330 		ldrsb	r3, [r3, #3]
 10170 0106 1A46     		mov	r2, r3
 10171 0108 634B     		ldr	r3, .L467+8
 10172 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10173 010c 9A42     		cmp	r2, r3
 10174 010e 06DB     		blt	.L430
2684:main.c        ****             {
2685:main.c        ****                 menuPosition[1][1] = numCalibrationItems-1;
 10175              		.loc 1 2685 0
 10176 0110 614B     		ldr	r3, .L467+8
 10177 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10178 0114 013B     		subs	r3, r3, #1
 10179 0116 DBB2     		uxtb	r3, r3
 10180 0118 5AB2     		sxtb	r2, r3
 10181 011a 5D4B     		ldr	r3, .L467
 10182 011c DA70     		strb	r2, [r3, #3]
 10183              	.L430:
2686:main.c        ****             }
2687:main.c        ****             whatToDraw = 2;
 10184              		.loc 1 2687 0
 10185 011e 0223     		movs	r3, #2
 10186 0120 FB77     		strb	r3, [r7, #31]
 10187 0122 01E1     		b	.L424
 10188              	.L429:
2688:main.c        ****         }
2689:main.c        ****         else if ((action == Right) || (action == Enter))
 10189              		.loc 1 2689 0
 10190 0124 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10191 0126 012B     		cmp	r3, #1
 10192 0128 02D0     		beq	.L431
 10193              		.loc 1 2689 0 is_stmt 0 discriminator 1
 10194 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10195 012c 042B     		cmp	r3, #4
 10196 012e 19D1     		bne	.L432
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 230


 10197              	.L431:
2690:main.c        ****         {
2691:main.c        ****             if (menuPosition[1][1] == 0)
 10198              		.loc 1 2691 0 is_stmt 1
 10199 0130 574B     		ldr	r3, .L467
 10200 0132 93F90330 		ldrsb	r3, [r3, #3]
 10201 0136 002B     		cmp	r3, #0
 10202 0138 06D1     		bne	.L433
2692:main.c        ****             {
2693:main.c        ****                 //calibrate levers
2694:main.c        ****                 menuPosition[0][0] = 3; //means calibrating levers now
 10203              		.loc 1 2694 0
 10204 013a 554B     		ldr	r3, .L467
 10205 013c 0322     		movs	r2, #3
 10206 013e 1A70     		strb	r2, [r3]
2695:main.c        ****                 whatToDraw = 0;
 10207              		.loc 1 2695 0
 10208 0140 0023     		movs	r3, #0
 10209 0142 FB77     		strb	r3, [r7, #31]
2696:main.c        ****                 enterLeverCalibrationMode();
 10210              		.loc 1 2696 0
 10211 0144 FFF7FEFF 		bl	enterLeverCalibrationMode
 10212              	.L433:
2697:main.c        ****             }
2698:main.c        ****             if (menuPosition[1][1] == 1)
 10213              		.loc 1 2698 0
 10214 0148 514B     		ldr	r3, .L467
 10215 014a 93F90330 		ldrsb	r3, [r3, #3]
 10216 014e 012B     		cmp	r3, #1
 10217 0150 40F0EA80 		bne	.L424
2699:main.c        ****             {
2700:main.c        ****                 //calibrate bar slider frets
2701:main.c        ****                 menuPosition[0][0] = 4; //means calibrating frets now
 10218              		.loc 1 2701 0
 10219 0154 4E4B     		ldr	r3, .L467
 10220 0156 0422     		movs	r2, #4
 10221 0158 1A70     		strb	r2, [r3]
2702:main.c        ****                 whatToDraw = 0;
 10222              		.loc 1 2702 0
 10223 015a 0023     		movs	r3, #0
 10224 015c FB77     		strb	r3, [r7, #31]
2703:main.c        ****                 enterFretCalibrationMode();
 10225              		.loc 1 2703 0
 10226 015e FFF7FEFF 		bl	enterFretCalibrationMode
2698:main.c        ****             {
 10227              		.loc 1 2698 0
 10228 0162 E1E0     		b	.L424
 10229              	.L432:
2704:main.c        ****             }
2705:main.c        ****         }
2706:main.c        ****         else if (action == Left) 
 10230              		.loc 1 2706 0
 10231 0164 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10232 0166 002B     		cmp	r3, #0
 10233 0168 40F0DE80 		bne	.L424
2707:main.c        ****         {
2708:main.c        ****             //go back to main menu
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 231


2709:main.c        ****             menuPosition[0][0] = 0;
 10234              		.loc 1 2709 0
 10235 016c 484B     		ldr	r3, .L467
 10236 016e 0022     		movs	r2, #0
 10237 0170 1A70     		strb	r2, [r3]
2710:main.c        ****             whatToDraw = 1;
 10238              		.loc 1 2710 0
 10239 0172 0123     		movs	r3, #1
 10240 0174 FB77     		strb	r3, [r7, #31]
 10241 0176 D7E0     		b	.L424
 10242              	.L425:
2711:main.c        ****         }
2712:main.c        ****     }
2713:main.c        ****     else if (menuPosition[0][0] == 2) //we are at the settings submenu
 10243              		.loc 1 2713 0
 10244 0178 454B     		ldr	r3, .L467
 10245 017a 93F90030 		ldrsb	r3, [r3]
 10246 017e 022B     		cmp	r3, #2
 10247 0180 50D1     		bne	.L435
2714:main.c        ****     {
2715:main.c        ****         //if we went up or down, switch the menu item
2716:main.c        ****         if (action == Up)
 10248              		.loc 1 2716 0
 10249 0182 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10250 0184 032B     		cmp	r3, #3
 10251 0186 13D1     		bne	.L436
2717:main.c        ****         {
2718:main.c        ****             menuPosition[2][1]--;
 10252              		.loc 1 2718 0
 10253 0188 414B     		ldr	r3, .L467
 10254 018a 93F90530 		ldrsb	r3, [r3, #5]
 10255 018e DBB2     		uxtb	r3, r3
 10256 0190 013B     		subs	r3, r3, #1
 10257 0192 DBB2     		uxtb	r3, r3
 10258 0194 5AB2     		sxtb	r2, r3
 10259 0196 3E4B     		ldr	r3, .L467
 10260 0198 5A71     		strb	r2, [r3, #5]
2719:main.c        ****             if (menuPosition[2][1] < 0)
 10261              		.loc 1 2719 0
 10262 019a 3D4B     		ldr	r3, .L467
 10263 019c 93F90530 		ldrsb	r3, [r3, #5]
 10264 01a0 002B     		cmp	r3, #0
 10265 01a2 02DA     		bge	.L437
2720:main.c        ****             {
2721:main.c        ****                 menuPosition[2][1] = 0;
 10266              		.loc 1 2721 0
 10267 01a4 3A4B     		ldr	r3, .L467
 10268 01a6 0022     		movs	r2, #0
 10269 01a8 5A71     		strb	r2, [r3, #5]
 10270              	.L437:
2722:main.c        ****             }
2723:main.c        ****             whatToDraw = 3;
 10271              		.loc 1 2723 0
 10272 01aa 0323     		movs	r3, #3
 10273 01ac FB77     		strb	r3, [r7, #31]
 10274 01ae BBE0     		b	.L424
 10275              	.L436:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 232


2724:main.c        ****         }
2725:main.c        ****         else if (action == Down)
 10276              		.loc 1 2725 0
 10277 01b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10278 01b2 022B     		cmp	r3, #2
 10279 01b4 1AD1     		bne	.L439
2726:main.c        ****         {
2727:main.c        ****             menuPosition[2][1]++;
 10280              		.loc 1 2727 0
 10281 01b6 364B     		ldr	r3, .L467
 10282 01b8 93F90530 		ldrsb	r3, [r3, #5]
 10283 01bc DBB2     		uxtb	r3, r3
 10284 01be 0133     		adds	r3, r3, #1
 10285 01c0 DBB2     		uxtb	r3, r3
 10286 01c2 5AB2     		sxtb	r2, r3
 10287 01c4 324B     		ldr	r3, .L467
 10288 01c6 5A71     		strb	r2, [r3, #5]
2728:main.c        ****             if (menuPosition[2][1] >= numSettingsItems)
 10289              		.loc 1 2728 0
 10290 01c8 314B     		ldr	r3, .L467
 10291 01ca 93F90530 		ldrsb	r3, [r3, #5]
 10292 01ce 1A46     		mov	r2, r3
 10293 01d0 324B     		ldr	r3, .L467+12
 10294 01d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10295 01d4 9A42     		cmp	r2, r3
 10296 01d6 06DB     		blt	.L440
2729:main.c        ****             {
2730:main.c        ****                 menuPosition[2][1] = numSettingsItems-1;
 10297              		.loc 1 2730 0
 10298 01d8 304B     		ldr	r3, .L467+12
 10299 01da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10300 01dc 013B     		subs	r3, r3, #1
 10301 01de DBB2     		uxtb	r3, r3
 10302 01e0 5AB2     		sxtb	r2, r3
 10303 01e2 2B4B     		ldr	r3, .L467
 10304 01e4 5A71     		strb	r2, [r3, #5]
 10305              	.L440:
2731:main.c        ****             }
2732:main.c        ****             whatToDraw = 3;
 10306              		.loc 1 2732 0
 10307 01e6 0323     		movs	r3, #3
 10308 01e8 FB77     		strb	r3, [r7, #31]
 10309 01ea 9DE0     		b	.L424
 10310              	.L439:
2733:main.c        ****         }
2734:main.c        ****         else if ((action == Right) || (action == Enter))
 10311              		.loc 1 2734 0
 10312 01ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10313 01ee 012B     		cmp	r3, #1
 10314 01f0 02D0     		beq	.L441
 10315              		.loc 1 2734 0 is_stmt 0 discriminator 1
 10316 01f2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10317 01f4 042B     		cmp	r3, #4
 10318 01f6 0BD1     		bne	.L442
 10319              	.L441:
2735:main.c        ****         {
2736:main.c        ****             if (menuPosition[2][1] == 0)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 233


 10320              		.loc 1 2736 0 is_stmt 1
 10321 01f8 254B     		ldr	r3, .L467
 10322 01fa 93F90530 		ldrsb	r3, [r3, #5]
 10323 01fe 002B     		cmp	r3, #0
 10324 0200 40F09280 		bne	.L424
2737:main.c        ****             {
2738:main.c        ****                 //calibrate levers
2739:main.c        ****                 menuPosition[0][0] = 5; //means first setting
 10325              		.loc 1 2739 0
 10326 0204 224B     		ldr	r3, .L467
 10327 0206 0522     		movs	r2, #5
 10328 0208 1A70     		strb	r2, [r3]
2740:main.c        ****                 whatToDraw = 0;
 10329              		.loc 1 2740 0
 10330 020a 0023     		movs	r3, #0
 10331 020c FB77     		strb	r3, [r7, #31]
2736:main.c        ****             {
 10332              		.loc 1 2736 0
 10333 020e 8BE0     		b	.L424
 10334              	.L442:
2741:main.c        ****                 
2742:main.c        ****             }
2743:main.c        ****         }
2744:main.c        ****         else if (action == Left) 
 10335              		.loc 1 2744 0
 10336 0210 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10337 0212 002B     		cmp	r3, #0
 10338 0214 40F08880 		bne	.L424
2745:main.c        ****         {
2746:main.c        ****             //go back to main menu
2747:main.c        ****             menuPosition[0][0] = 0;
 10339              		.loc 1 2747 0
 10340 0218 1D4B     		ldr	r3, .L467
 10341 021a 0022     		movs	r2, #0
 10342 021c 1A70     		strb	r2, [r3]
2748:main.c        ****             whatToDraw = 1;
 10343              		.loc 1 2748 0
 10344 021e 0123     		movs	r3, #1
 10345 0220 FB77     		strb	r3, [r7, #31]
 10346 0222 81E0     		b	.L424
 10347              	.L435:
2749:main.c        ****         }
2750:main.c        ****     }
2751:main.c        ****     
2752:main.c        ****     else if (menuPosition[0][0] == 3) //we are in lever calibration
 10348              		.loc 1 2752 0
 10349 0224 1A4B     		ldr	r3, .L467
 10350 0226 93F90030 		ldrsb	r3, [r3]
 10351 022a 032B     		cmp	r3, #3
 10352 022c 42D1     		bne	.L444
2753:main.c        ****     {
2754:main.c        ****         //when user presses -> button, then store the current fret and increment which fret to stor
2755:main.c        ****         if ((action == Right) || (action == Enter))
 10353              		.loc 1 2755 0
 10354 022e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10355 0230 012B     		cmp	r3, #1
 10356 0232 02D0     		beq	.L445
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 234


 10357              		.loc 1 2755 0 is_stmt 0 discriminator 1
 10358 0234 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10359 0236 042B     		cmp	r3, #4
 10360 0238 76D1     		bne	.L424
 10361              	.L445:
2756:main.c        ****         {
2757:main.c        ****             OLEDclear(128, 64);
 10362              		.loc 1 2757 0 is_stmt 1
 10363 023a 4021     		movs	r1, #64
 10364 023c 8020     		movs	r0, #128
 10365 023e FFF7FEFF 		bl	OLEDclear
2758:main.c        ****             myGFX_setFont(2);
 10366              		.loc 1 2758 0
 10367 0242 0220     		movs	r0, #2
 10368 0244 FFF7FEFF 		bl	myGFX_setFont
2759:main.c        ****             OLEDtextColor(0, 1);
 10369              		.loc 1 2759 0
 10370 0248 0121     		movs	r1, #1
 10371 024a 0020     		movs	r0, #0
 10372 024c FFF7FEFF 		bl	OLEDtextColor
2760:main.c        ****             OLEDwriteString("NOW PUT ALL", 11, 1, FirstLine);
 10373              		.loc 1 2760 0
 10374 0250 0023     		movs	r3, #0
 10375 0252 0122     		movs	r2, #1
 10376 0254 0B21     		movs	r1, #11
 10377 0256 1248     		ldr	r0, .L467+16
 10378 0258 FFF7FEFF 		bl	OLEDwriteString
2761:main.c        ****             OLEDwriteString("PEDALS/LEVERS  ", 15, 1, SecondLine);
 10379              		.loc 1 2761 0
 10380 025c 0123     		movs	r3, #1
 10381 025e 0122     		movs	r2, #1
 10382 0260 0F21     		movs	r1, #15
 10383 0262 1048     		ldr	r0, .L467+20
 10384 0264 FFF7FEFF 		bl	OLEDwriteString
2762:main.c        ****             OLEDwriteString("IN RESTING STATE", 16, 1, ThirdLine);
 10385              		.loc 1 2762 0
 10386 0268 0223     		movs	r3, #2
 10387 026a 0122     		movs	r2, #1
 10388 026c 1021     		movs	r1, #16
 10389 026e 0E48     		ldr	r0, .L467+24
 10390 0270 FFF7FEFF 		bl	OLEDwriteString
2763:main.c        ****             OLEDwriteString("AND PRESS EDIT", 14, 1, FourthLine);
 10391              		.loc 1 2763 0
 10392 0274 0323     		movs	r3, #3
 10393 0276 0122     		movs	r2, #1
 10394 0278 0E21     		movs	r1, #14
 10395 027a 0C48     		ldr	r0, .L467+28
 10396 027c FFF7FEFF 		bl	OLEDwriteString
2764:main.c        ****             mainOLEDWaitingToSend = 1;
 10397              		.loc 1 2764 0
 10398 0280 0B4B     		ldr	r3, .L467+32
 10399 0282 0122     		movs	r2, #1
 10400 0284 1A60     		str	r2, [r3]
2765:main.c        ****             OLEDtextColor(1, 0);
 10401              		.loc 1 2765 0
 10402 0286 0021     		movs	r1, #0
 10403 0288 0120     		movs	r0, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 235


 10404 028a FFF7FEFF 		bl	OLEDtextColor
 10405 028e 4BE0     		b	.L424
 10406              	.L468:
 10407              		.align	2
 10408              	.L467:
 10409 0290 00000000 		.word	menuPosition
 10410 0294 00000000 		.word	numMainMenuItems
 10411 0298 00000000 		.word	numCalibrationItems
 10412 029c 00000000 		.word	numSettingsItems
 10413 02a0 28050000 		.word	.LC16
 10414 02a4 34050000 		.word	.LC17
 10415 02a8 44050000 		.word	.LC18
 10416 02ac 58050000 		.word	.LC19
 10417 02b0 00000000 		.word	mainOLEDWaitingToSend
 10418              	.L444:
2766:main.c        ****         }
2767:main.c        ****     }
2768:main.c        ****     else if (menuPosition[0][0] == 4) //we are in fret calibration
 10419              		.loc 1 2768 0
 10420 02b4 9A4B     		ldr	r3, .L469
 10421 02b6 93F90030 		ldrsb	r3, [r3]
 10422 02ba 042B     		cmp	r3, #4
 10423 02bc 34D1     		bne	.L424
2769:main.c        ****     {
2770:main.c        ****         //when user presses -> button, then store the current fret and increment which fret to stor
2771:main.c        ****         if ((action == Right) || (action == Enter))
 10424              		.loc 1 2771 0
 10425 02be FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10426 02c0 012B     		cmp	r3, #1
 10427 02c2 02D0     		beq	.L447
 10428              		.loc 1 2771 0 is_stmt 0 discriminator 1
 10429 02c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 10430 02c6 042B     		cmp	r3, #4
 10431 02c8 2ED1     		bne	.L424
 10432              	.L447:
2772:main.c        ****         {
2773:main.c        ****             fretMeasurements[0][fretToCalibrate] = bar[0];
 10433              		.loc 1 2773 0 is_stmt 1
 10434 02ca 964B     		ldr	r3, .L469+4
 10435 02cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10436 02ce 1A46     		mov	r2, r3
 10437 02d0 954B     		ldr	r3, .L469+8
 10438 02d2 1B88     		ldrh	r3, [r3]	@ movhi
 10439 02d4 99B2     		uxth	r1, r3
 10440 02d6 954B     		ldr	r3, .L469+12
 10441 02d8 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
2774:main.c        ****             fretMeasurements[1][fretToCalibrate] = bar[1];
 10442              		.loc 1 2774 0
 10443 02dc 914B     		ldr	r3, .L469+4
 10444 02de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10445 02e0 1846     		mov	r0, r3
 10446 02e2 914B     		ldr	r3, .L469+8
 10447 02e4 5B88     		ldrh	r3, [r3, #2]	@ movhi
 10448 02e6 99B2     		uxth	r1, r3
 10449 02e8 904A     		ldr	r2, .L469+12
 10450 02ea 00F10C03 		add	r3, r0, #12
 10451 02ee 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 236


2775:main.c        ****             fretToCalibrate++;
 10452              		.loc 1 2775 0
 10453 02f2 8C4B     		ldr	r3, .L469+4
 10454 02f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10455 02f6 0133     		adds	r3, r3, #1
 10456 02f8 DAB2     		uxtb	r2, r3
 10457 02fa 8A4B     		ldr	r3, .L469+4
 10458 02fc 1A70     		strb	r2, [r3]
2776:main.c        ****             if (fretToCalibrate == NUM_FRET_MEASUREMENTS)
 10459              		.loc 1 2776 0
 10460 02fe 894B     		ldr	r3, .L469+4
 10461 0300 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10462 0302 0C2B     		cmp	r3, #12
 10463 0304 02D1     		bne	.L448
2777:main.c        ****             {
2778:main.c        ****                 exitFretCalibrationMode();
 10464              		.loc 1 2778 0
 10465 0306 FFF7FEFF 		bl	exitFretCalibrationMode
 10466 030a 0DE0     		b	.L424
 10467              	.L448:
2779:main.c        ****             }
2780:main.c        ****             else
2781:main.c        ****             {
2782:main.c        ****                OLEDwriteInt(whichFretArray[fretToCalibrate], 2, 40, ThirdLine);
 10468              		.loc 1 2782 0
 10469 030c 854B     		ldr	r3, .L469+4
 10470 030e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10471 0310 1A46     		mov	r2, r3
 10472 0312 874B     		ldr	r3, .L469+16
 10473 0314 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 10474 0316 1846     		mov	r0, r3
 10475 0318 0223     		movs	r3, #2
 10476 031a 2822     		movs	r2, #40
 10477 031c 0221     		movs	r1, #2
 10478 031e FFF7FEFF 		bl	OLEDwriteInt
2783:main.c        ****                mainOLEDWaitingToSend = 1;
 10479              		.loc 1 2783 0
 10480 0322 844B     		ldr	r3, .L469+20
 10481 0324 0122     		movs	r2, #1
 10482 0326 1A60     		str	r2, [r3]
 10483              	.L424:
2784:main.c        ****             }
2785:main.c        ****         }
2786:main.c        ****     }
2787:main.c        ****     if (whatToDraw == 1)
 10484              		.loc 1 2787 0
 10485 0328 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 10486 032a 012B     		cmp	r3, #1
 10487 032c 44D1     		bne	.L449
2788:main.c        ****     {
2789:main.c        ****         //draw main menu
2790:main.c        ****         OLEDclear(128, 64);
 10488              		.loc 1 2790 0
 10489 032e 4021     		movs	r1, #64
 10490 0330 8020     		movs	r0, #128
 10491 0332 FFF7FEFF 		bl	OLEDclear
2791:main.c        ****         myGFX_setFont(2);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 237


 10492              		.loc 1 2791 0
 10493 0336 0220     		movs	r0, #2
 10494 0338 FFF7FEFF 		bl	myGFX_setFont
 10495              	.LBB57:
2792:main.c        ****         for (int i = 0; i < numMainMenuItems; i++)
 10496              		.loc 1 2792 0
 10497 033c 0023     		movs	r3, #0
 10498 033e BB61     		str	r3, [r7, #24]
 10499 0340 2CE0     		b	.L450
 10500              	.L453:
2793:main.c        ****         {
2794:main.c        ****             if (menuPosition[0][1] == i)
 10501              		.loc 1 2794 0
 10502 0342 774B     		ldr	r3, .L469
 10503 0344 93F90130 		ldrsb	r3, [r3, #1]
 10504 0348 1A46     		mov	r2, r3
 10505 034a BB69     		ldr	r3, [r7, #24]
 10506 034c 9A42     		cmp	r2, r3
 10507 034e 14D1     		bne	.L451
2795:main.c        ****             {
2796:main.c        ****                 OLEDtextColor(0, 1);
 10508              		.loc 1 2796 0
 10509 0350 0121     		movs	r1, #1
 10510 0352 0020     		movs	r0, #0
 10511 0354 FFF7FEFF 		bl	OLEDtextColor
2797:main.c        ****                 OLEDwriteString(mainMenuNames[i], 15, 0, i);
 10512              		.loc 1 2797 0
 10513 0358 774A     		ldr	r2, .L469+24
 10514 035a BB69     		ldr	r3, [r7, #24]
 10515 035c 52F82300 		ldr	r0, [r2, r3, lsl #2]
 10516 0360 BB69     		ldr	r3, [r7, #24]
 10517 0362 DBB2     		uxtb	r3, r3
 10518 0364 0022     		movs	r2, #0
 10519 0366 0F21     		movs	r1, #15
 10520 0368 FFF7FEFF 		bl	OLEDwriteString
2798:main.c        ****                 OLEDwriteArrow(0, i);
 10521              		.loc 1 2798 0
 10522 036c BB69     		ldr	r3, [r7, #24]
 10523 036e DBB2     		uxtb	r3, r3
 10524 0370 1946     		mov	r1, r3
 10525 0372 0020     		movs	r0, #0
 10526 0374 FFF7FEFF 		bl	OLEDwriteArrow
 10527 0378 0DE0     		b	.L452
 10528              	.L451:
2799:main.c        ****             }
2800:main.c        ****             else
2801:main.c        ****             {
2802:main.c        ****                 OLEDtextColor(1, 0);
 10529              		.loc 1 2802 0
 10530 037a 0021     		movs	r1, #0
 10531 037c 0120     		movs	r0, #1
 10532 037e FFF7FEFF 		bl	OLEDtextColor
2803:main.c        ****                 OLEDwriteString(mainMenuNames[i], 15, 0, i);
 10533              		.loc 1 2803 0
 10534 0382 6D4A     		ldr	r2, .L469+24
 10535 0384 BB69     		ldr	r3, [r7, #24]
 10536 0386 52F82300 		ldr	r0, [r2, r3, lsl #2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 238


 10537 038a BB69     		ldr	r3, [r7, #24]
 10538 038c DBB2     		uxtb	r3, r3
 10539 038e 0022     		movs	r2, #0
 10540 0390 0F21     		movs	r1, #15
 10541 0392 FFF7FEFF 		bl	OLEDwriteString
 10542              	.L452:
2792:main.c        ****         {
 10543              		.loc 1 2792 0 discriminator 2
 10544 0396 BB69     		ldr	r3, [r7, #24]
 10545 0398 0133     		adds	r3, r3, #1
 10546 039a BB61     		str	r3, [r7, #24]
 10547              	.L450:
2792:main.c        ****         {
 10548              		.loc 1 2792 0 is_stmt 0 discriminator 1
 10549 039c 674B     		ldr	r3, .L469+28
 10550 039e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10551 03a0 1A46     		mov	r2, r3
 10552 03a2 BB69     		ldr	r3, [r7, #24]
 10553 03a4 9A42     		cmp	r2, r3
 10554 03a6 CCDC     		bgt	.L453
 10555              	.LBE57:
2804:main.c        ****                 
2805:main.c        ****             }
2806:main.c        **** 
2807:main.c        ****         }
2808:main.c        ****         OLEDtextColor(1, 0);
 10556              		.loc 1 2808 0 is_stmt 1
 10557 03a8 0021     		movs	r1, #0
 10558 03aa 0120     		movs	r0, #1
 10559 03ac FFF7FEFF 		bl	OLEDtextColor
2809:main.c        ****         mainOLEDWaitingToSend = 1;
 10560              		.loc 1 2809 0
 10561 03b0 604B     		ldr	r3, .L469+20
 10562 03b2 0122     		movs	r2, #1
 10563 03b4 1A60     		str	r2, [r3]
2810:main.c        ****     }
2811:main.c        ****     else if (whatToDraw == 2)
2812:main.c        ****     {
2813:main.c        ****         //draw calibration menu
2814:main.c        ****         OLEDclear(128, 64);
2815:main.c        ****         myGFX_setFont(2);
2816:main.c        ****         for (int i = 0; i < numCalibrationItems; i++)
2817:main.c        ****         {
2818:main.c        ****             if (menuPosition[1][1] == i)
2819:main.c        ****             {
2820:main.c        ****                 OLEDtextColor(0, 1);
2821:main.c        ****                 OLEDwriteString(calibrationNames[i], 15, 0, i);
2822:main.c        ****                 OLEDwriteArrow(0, i);
2823:main.c        ****             }
2824:main.c        ****             else
2825:main.c        ****             {
2826:main.c        ****                 OLEDtextColor(1, 0);
2827:main.c        ****                 OLEDwriteString(calibrationNames[i], 15, 0, i);
2828:main.c        ****                 
2829:main.c        ****             }
2830:main.c        ****         }
2831:main.c        ****         OLEDtextColor(1, 0);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 239


2832:main.c        ****         mainOLEDWaitingToSend = 1;
2833:main.c        ****     }
2834:main.c        ****     else if (whatToDraw == 3)
2835:main.c        ****     {
2836:main.c        ****         //draw settings menu
2837:main.c        ****         OLEDclear(128, 64);
2838:main.c        ****         myGFX_setFont(2);
2839:main.c        ****         uint8_t tempPos = 0;
2840:main.c        ****         for (int i = 0; i < numSettingsItems; i++)
2841:main.c        ****         {
2842:main.c        ****             if (menuPosition[2][1] == i)
2843:main.c        ****             {
2844:main.c        ****                 OLEDtextColor(0, 1);
2845:main.c        ****                 OLEDwriteString(settingsNames[i], 15, 0, 0);
2846:main.c        ****                 OLEDwriteArrow(0, 0);
2847:main.c        ****             }
2848:main.c        ****             else if (i > menuPosition[2][1])
2849:main.c        ****             {
2850:main.c        ****                 OLEDtextColor(1, 0);
2851:main.c        ****                 tempPos = (i - menuPosition[2][1]);
2852:main.c        ****                 if (tempPos < 4)
2853:main.c        ****                 {
2854:main.c        ****                     OLEDwriteString(settingsNames[i], 15, 0, tempPos);
2855:main.c        ****                 } 
2856:main.c        ****             }
2857:main.c        ****         }
2858:main.c        ****         tempPos++;
2859:main.c        ****         OLEDtextColor(1, 0);
2860:main.c        ****         while (tempPos < 4)
2861:main.c        ****         {
2862:main.c        ****             OLEDwriteString("               ", 15, 0, tempPos);
2863:main.c        ****             tempPos++;
2864:main.c        ****         }
2865:main.c        ****         mainOLEDWaitingToSend = 1;
2866:main.c        ****     }
2867:main.c        **** }
 10564              		.loc 1 2867 0
 10565 03b6 AEE0     		b	.L466
 10566              	.L449:
2811:main.c        ****     {
 10567              		.loc 1 2811 0
 10568 03b8 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 10569 03ba 022B     		cmp	r3, #2
 10570 03bc 44D1     		bne	.L455
2814:main.c        ****         myGFX_setFont(2);
 10571              		.loc 1 2814 0
 10572 03be 4021     		movs	r1, #64
 10573 03c0 8020     		movs	r0, #128
 10574 03c2 FFF7FEFF 		bl	OLEDclear
2815:main.c        ****         for (int i = 0; i < numCalibrationItems; i++)
 10575              		.loc 1 2815 0
 10576 03c6 0220     		movs	r0, #2
 10577 03c8 FFF7FEFF 		bl	myGFX_setFont
 10578              	.LBB58:
2816:main.c        ****         {
 10579              		.loc 1 2816 0
 10580 03cc 0023     		movs	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 240


 10581 03ce 7B61     		str	r3, [r7, #20]
 10582 03d0 2CE0     		b	.L456
 10583              	.L459:
2818:main.c        ****             {
 10584              		.loc 1 2818 0
 10585 03d2 534B     		ldr	r3, .L469
 10586 03d4 93F90330 		ldrsb	r3, [r3, #3]
 10587 03d8 1A46     		mov	r2, r3
 10588 03da 7B69     		ldr	r3, [r7, #20]
 10589 03dc 9A42     		cmp	r2, r3
 10590 03de 14D1     		bne	.L457
2820:main.c        ****                 OLEDwriteString(calibrationNames[i], 15, 0, i);
 10591              		.loc 1 2820 0
 10592 03e0 0121     		movs	r1, #1
 10593 03e2 0020     		movs	r0, #0
 10594 03e4 FFF7FEFF 		bl	OLEDtextColor
2821:main.c        ****                 OLEDwriteArrow(0, i);
 10595              		.loc 1 2821 0
 10596 03e8 554A     		ldr	r2, .L469+32
 10597 03ea 7B69     		ldr	r3, [r7, #20]
 10598 03ec 52F82300 		ldr	r0, [r2, r3, lsl #2]
 10599 03f0 7B69     		ldr	r3, [r7, #20]
 10600 03f2 DBB2     		uxtb	r3, r3
 10601 03f4 0022     		movs	r2, #0
 10602 03f6 0F21     		movs	r1, #15
 10603 03f8 FFF7FEFF 		bl	OLEDwriteString
2822:main.c        ****             }
 10604              		.loc 1 2822 0
 10605 03fc 7B69     		ldr	r3, [r7, #20]
 10606 03fe DBB2     		uxtb	r3, r3
 10607 0400 1946     		mov	r1, r3
 10608 0402 0020     		movs	r0, #0
 10609 0404 FFF7FEFF 		bl	OLEDwriteArrow
 10610 0408 0DE0     		b	.L458
 10611              	.L457:
2826:main.c        ****                 OLEDwriteString(calibrationNames[i], 15, 0, i);
 10612              		.loc 1 2826 0
 10613 040a 0021     		movs	r1, #0
 10614 040c 0120     		movs	r0, #1
 10615 040e FFF7FEFF 		bl	OLEDtextColor
2827:main.c        ****                 
 10616              		.loc 1 2827 0
 10617 0412 4B4A     		ldr	r2, .L469+32
 10618 0414 7B69     		ldr	r3, [r7, #20]
 10619 0416 52F82300 		ldr	r0, [r2, r3, lsl #2]
 10620 041a 7B69     		ldr	r3, [r7, #20]
 10621 041c DBB2     		uxtb	r3, r3
 10622 041e 0022     		movs	r2, #0
 10623 0420 0F21     		movs	r1, #15
 10624 0422 FFF7FEFF 		bl	OLEDwriteString
 10625              	.L458:
2816:main.c        ****         {
 10626              		.loc 1 2816 0 discriminator 2
 10627 0426 7B69     		ldr	r3, [r7, #20]
 10628 0428 0133     		adds	r3, r3, #1
 10629 042a 7B61     		str	r3, [r7, #20]
 10630              	.L456:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 241


2816:main.c        ****         {
 10631              		.loc 1 2816 0 is_stmt 0 discriminator 1
 10632 042c 454B     		ldr	r3, .L469+36
 10633 042e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10634 0430 1A46     		mov	r2, r3
 10635 0432 7B69     		ldr	r3, [r7, #20]
 10636 0434 9A42     		cmp	r2, r3
 10637 0436 CCDC     		bgt	.L459
 10638              	.LBE58:
2831:main.c        ****         mainOLEDWaitingToSend = 1;
 10639              		.loc 1 2831 0 is_stmt 1
 10640 0438 0021     		movs	r1, #0
 10641 043a 0120     		movs	r0, #1
 10642 043c FFF7FEFF 		bl	OLEDtextColor
2832:main.c        ****     }
 10643              		.loc 1 2832 0
 10644 0440 3C4B     		ldr	r3, .L469+20
 10645 0442 0122     		movs	r2, #1
 10646 0444 1A60     		str	r2, [r3]
 10647              		.loc 1 2867 0
 10648 0446 66E0     		b	.L466
 10649              	.L455:
2834:main.c        ****     {
 10650              		.loc 1 2834 0
 10651 0448 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 10652 044a 032B     		cmp	r3, #3
 10653 044c 63D1     		bne	.L466
 10654              	.LBB59:
2837:main.c        ****         myGFX_setFont(2);
 10655              		.loc 1 2837 0
 10656 044e 4021     		movs	r1, #64
 10657 0450 8020     		movs	r0, #128
 10658 0452 FFF7FEFF 		bl	OLEDclear
2838:main.c        ****         uint8_t tempPos = 0;
 10659              		.loc 1 2838 0
 10660 0456 0220     		movs	r0, #2
 10661 0458 FFF7FEFF 		bl	myGFX_setFont
2839:main.c        ****         for (int i = 0; i < numSettingsItems; i++)
 10662              		.loc 1 2839 0
 10663 045c 0023     		movs	r3, #0
 10664 045e FB74     		strb	r3, [r7, #19]
 10665              	.LBB60:
2840:main.c        ****         {
 10666              		.loc 1 2840 0
 10667 0460 0023     		movs	r3, #0
 10668 0462 FB60     		str	r3, [r7, #12]
 10669 0464 3AE0     		b	.L460
 10670              	.L463:
2842:main.c        ****             {
 10671              		.loc 1 2842 0
 10672 0466 2E4B     		ldr	r3, .L469
 10673 0468 93F90530 		ldrsb	r3, [r3, #5]
 10674 046c 1A46     		mov	r2, r3
 10675 046e FB68     		ldr	r3, [r7, #12]
 10676 0470 9A42     		cmp	r2, r3
 10677 0472 11D1     		bne	.L461
2844:main.c        ****                 OLEDwriteString(settingsNames[i], 15, 0, 0);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 242


 10678              		.loc 1 2844 0
 10679 0474 0121     		movs	r1, #1
 10680 0476 0020     		movs	r0, #0
 10681 0478 FFF7FEFF 		bl	OLEDtextColor
2845:main.c        ****                 OLEDwriteArrow(0, 0);
 10682              		.loc 1 2845 0
 10683 047c 324A     		ldr	r2, .L469+40
 10684 047e FB68     		ldr	r3, [r7, #12]
 10685 0480 52F82300 		ldr	r0, [r2, r3, lsl #2]
 10686 0484 0023     		movs	r3, #0
 10687 0486 0022     		movs	r2, #0
 10688 0488 0F21     		movs	r1, #15
 10689 048a FFF7FEFF 		bl	OLEDwriteString
2846:main.c        ****             }
 10690              		.loc 1 2846 0
 10691 048e 0021     		movs	r1, #0
 10692 0490 0020     		movs	r0, #0
 10693 0492 FFF7FEFF 		bl	OLEDwriteArrow
 10694 0496 1EE0     		b	.L462
 10695              	.L461:
2848:main.c        ****             {
 10696              		.loc 1 2848 0
 10697 0498 214B     		ldr	r3, .L469
 10698 049a 93F90530 		ldrsb	r3, [r3, #5]
 10699 049e 1A46     		mov	r2, r3
 10700 04a0 FB68     		ldr	r3, [r7, #12]
 10701 04a2 9A42     		cmp	r2, r3
 10702 04a4 17DA     		bge	.L462
2850:main.c        ****                 tempPos = (i - menuPosition[2][1]);
 10703              		.loc 1 2850 0
 10704 04a6 0021     		movs	r1, #0
 10705 04a8 0120     		movs	r0, #1
 10706 04aa FFF7FEFF 		bl	OLEDtextColor
2851:main.c        ****                 if (tempPos < 4)
 10707              		.loc 1 2851 0
 10708 04ae FB68     		ldr	r3, [r7, #12]
 10709 04b0 DAB2     		uxtb	r2, r3
 10710 04b2 1B4B     		ldr	r3, .L469
 10711 04b4 93F90530 		ldrsb	r3, [r3, #5]
 10712 04b8 DBB2     		uxtb	r3, r3
 10713 04ba D31A     		subs	r3, r2, r3
 10714 04bc FB74     		strb	r3, [r7, #19]
2852:main.c        ****                 {
 10715              		.loc 1 2852 0
 10716 04be FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 10717 04c0 032B     		cmp	r3, #3
 10718 04c2 08D8     		bhi	.L462
2854:main.c        ****                 } 
 10719              		.loc 1 2854 0
 10720 04c4 204A     		ldr	r2, .L469+40
 10721 04c6 FB68     		ldr	r3, [r7, #12]
 10722 04c8 52F82300 		ldr	r0, [r2, r3, lsl #2]
 10723 04cc FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 10724 04ce 0022     		movs	r2, #0
 10725 04d0 0F21     		movs	r1, #15
 10726 04d2 FFF7FEFF 		bl	OLEDwriteString
 10727              	.L462:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 243


2840:main.c        ****         {
 10728              		.loc 1 2840 0 discriminator 2
 10729 04d6 FB68     		ldr	r3, [r7, #12]
 10730 04d8 0133     		adds	r3, r3, #1
 10731 04da FB60     		str	r3, [r7, #12]
 10732              	.L460:
2840:main.c        ****         {
 10733              		.loc 1 2840 0 is_stmt 0 discriminator 1
 10734 04dc 1B4B     		ldr	r3, .L469+44
 10735 04de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10736 04e0 1A46     		mov	r2, r3
 10737 04e2 FB68     		ldr	r3, [r7, #12]
 10738 04e4 9A42     		cmp	r2, r3
 10739 04e6 BEDC     		bgt	.L463
 10740              	.LBE60:
2858:main.c        ****         OLEDtextColor(1, 0);
 10741              		.loc 1 2858 0 is_stmt 1
 10742 04e8 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 10743 04ea 0133     		adds	r3, r3, #1
 10744 04ec FB74     		strb	r3, [r7, #19]
2859:main.c        ****         while (tempPos < 4)
 10745              		.loc 1 2859 0
 10746 04ee 0021     		movs	r1, #0
 10747 04f0 0120     		movs	r0, #1
 10748 04f2 FFF7FEFF 		bl	OLEDtextColor
2860:main.c        ****         {
 10749              		.loc 1 2860 0
 10750 04f6 08E0     		b	.L464
 10751              	.L465:
2862:main.c        ****             tempPos++;
 10752              		.loc 1 2862 0
 10753 04f8 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 10754 04fa 0022     		movs	r2, #0
 10755 04fc 0F21     		movs	r1, #15
 10756 04fe 1448     		ldr	r0, .L469+48
 10757 0500 FFF7FEFF 		bl	OLEDwriteString
2863:main.c        ****         }
 10758              		.loc 1 2863 0
 10759 0504 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 10760 0506 0133     		adds	r3, r3, #1
 10761 0508 FB74     		strb	r3, [r7, #19]
 10762              	.L464:
2860:main.c        ****         {
 10763              		.loc 1 2860 0
 10764 050a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 10765 050c 032B     		cmp	r3, #3
 10766 050e F3D9     		bls	.L465
2865:main.c        ****     }
 10767              		.loc 1 2865 0
 10768 0510 084B     		ldr	r3, .L469+20
 10769 0512 0122     		movs	r2, #1
 10770 0514 1A60     		str	r2, [r3]
 10771              	.L466:
 10772              	.LBE59:
 10773              		.loc 1 2867 0
 10774 0516 00BF     		nop
 10775 0518 2037     		adds	r7, r7, #32
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 244


 10776              		.cfi_def_cfa_offset 8
 10777 051a BD46     		mov	sp, r7
 10778              		.cfi_def_cfa_register 13
 10779              		@ sp needed
 10780 051c 80BD     		pop	{r7, pc}
 10781              	.L470:
 10782 051e 00BF     		.align	2
 10783              	.L469:
 10784 0520 00000000 		.word	menuPosition
 10785 0524 00000000 		.word	fretToCalibrate
 10786 0528 00000000 		.word	bar
 10787 052c 00000000 		.word	fretMeasurements
 10788 0530 00000000 		.word	whichFretArray
 10789 0534 00000000 		.word	mainOLEDWaitingToSend
 10790 0538 00000000 		.word	mainMenuNames
 10791 053c 00000000 		.word	numMainMenuItems
 10792 0540 00000000 		.word	calibrationNames
 10793 0544 00000000 		.word	numCalibrationItems
 10794 0548 00000000 		.word	settingsNames
 10795 054c 00000000 		.word	numSettingsItems
 10796 0550 68050000 		.word	.LC20
 10797              		.cfi_endproc
 10798              	.LFE97:
 10799              		.size	menuAction, .-menuAction
 10800              		.section	.text.leftPressed,"ax",%progbits
 10801              		.align	2
 10802              		.global	leftPressed
 10803              		.thumb
 10804              		.thumb_func
 10805              		.type	leftPressed, %function
 10806              	leftPressed:
 10807              	.LFB98:
2868:main.c        **** 
2869:main.c        **** 
2870:main.c        **** 
2871:main.c        **** void leftPressed()
2872:main.c        **** {
 10808              		.loc 1 2872 0
 10809              		.cfi_startproc
 10810              		@ args = 0, pretend = 0, frame = 0
 10811              		@ frame_needed = 1, uses_anonymous_args = 0
 10812 0000 80B5     		push	{r7, lr}
 10813              		.cfi_def_cfa_offset 8
 10814              		.cfi_offset 7, -8
 10815              		.cfi_offset 14, -4
 10816 0002 00AF     		add	r7, sp, #0
 10817              		.cfi_def_cfa_register 7
2873:main.c        ****     if (!editMode) //normal behavior
 10818              		.loc 1 2873 0
 10819 0004 1F4B     		ldr	r3, .L477
 10820 0006 1B68     		ldr	r3, [r3]
 10821 0008 002B     		cmp	r3, #0
 10822 000a 35D1     		bne	.L472
2874:main.c        ****     {
2875:main.c        ****         if (currentCopedent == 0)
 10823              		.loc 1 2875 0
 10824 000c 1E4B     		ldr	r3, .L477+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 245


 10825 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10826 0010 002B     		cmp	r3, #0
 10827 0012 03D1     		bne	.L473
2876:main.c        ****         {
2877:main.c        ****             currentCopedent = MAX_NUM_COPEDENTS-1;
 10828              		.loc 1 2877 0
 10829 0014 1C4B     		ldr	r3, .L477+4
 10830 0016 0622     		movs	r2, #6
 10831 0018 1A70     		strb	r2, [r3]
 10832 001a 05E0     		b	.L474
 10833              	.L473:
2878:main.c        ****         }
2879:main.c        ****         else
2880:main.c        ****         {
2881:main.c        ****             currentCopedent -= 1;
 10834              		.loc 1 2881 0
 10835 001c 1A4B     		ldr	r3, .L477+4
 10836 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10837 0020 013B     		subs	r3, r3, #1
 10838 0022 DAB2     		uxtb	r2, r3
 10839 0024 184B     		ldr	r3, .L477+4
 10840 0026 1A70     		strb	r2, [r3]
 10841              	.L474:
2882:main.c        ****         }
2883:main.c        ****         necks[currentNeck] = currentCopedent;
 10842              		.loc 1 2883 0
 10843 0028 184B     		ldr	r3, .L477+8
 10844 002a 1B68     		ldr	r3, [r3]
 10845 002c 164A     		ldr	r2, .L477+4
 10846 002e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 10847 0030 174A     		ldr	r2, .L477+12
 10848 0032 D154     		strb	r1, [r2, r3]
2884:main.c        ****         neckByte |= (necks[0]<<5) + (necks[1]<<2) + currentNeck;
 10849              		.loc 1 2884 0
 10850 0034 164B     		ldr	r3, .L477+12
 10851 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10852 0038 5B01     		lsls	r3, r3, #5
 10853 003a DAB2     		uxtb	r2, r3
 10854 003c 144B     		ldr	r3, .L477+12
 10855 003e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 10856 0040 9B00     		lsls	r3, r3, #2
 10857 0042 DBB2     		uxtb	r3, r3
 10858 0044 1344     		add	r3, r3, r2
 10859 0046 DAB2     		uxtb	r2, r3
 10860 0048 104B     		ldr	r3, .L477+8
 10861 004a 1B68     		ldr	r3, [r3]
 10862 004c DBB2     		uxtb	r3, r3
 10863 004e 1344     		add	r3, r3, r2
 10864 0050 DBB2     		uxtb	r3, r3
 10865 0052 5AB2     		sxtb	r2, r3
 10866 0054 0F4B     		ldr	r3, .L477+16
 10867 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10868 0058 5BB2     		sxtb	r3, r3
 10869 005a 1343     		orrs	r3, r3, r2
 10870 005c 5BB2     		sxtb	r3, r3
 10871 005e DAB2     		uxtb	r2, r3
 10872 0060 0C4B     		ldr	r3, .L477+16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 246


 10873 0062 1A70     		strb	r2, [r3]
2885:main.c        ****         EEPROM_WriteByte(neckByte, EEPROM_NECKS_OFFSET);
 10874              		.loc 1 2885 0
 10875 0064 0B4B     		ldr	r3, .L477+16
 10876 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10877 0068 40F2FE71 		movw	r1, #2046
 10878 006c 1846     		mov	r0, r3
 10879 006e FFF7FEFF 		bl	EEPROM_WriteByte
2886:main.c        ****         displayCurrentPresetNameAndCopedent();
 10880              		.loc 1 2886 0
 10881 0072 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
2887:main.c        ****     }
2888:main.c        ****     else
2889:main.c        ****     {
2890:main.c        ****         menuAction(Left);
2891:main.c        ****     }
2892:main.c        **** }
 10882              		.loc 1 2892 0
 10883 0076 02E0     		b	.L476
 10884              	.L472:
2890:main.c        ****     }
 10885              		.loc 1 2890 0
 10886 0078 0020     		movs	r0, #0
 10887 007a FFF7FEFF 		bl	menuAction
 10888              	.L476:
 10889              		.loc 1 2892 0
 10890 007e 00BF     		nop
 10891 0080 80BD     		pop	{r7, pc}
 10892              	.L478:
 10893 0082 00BF     		.align	2
 10894              	.L477:
 10895 0084 00000000 		.word	editMode
 10896 0088 00000000 		.word	currentCopedent
 10897 008c 00000000 		.word	currentNeck
 10898 0090 00000000 		.word	necks
 10899 0094 00000000 		.word	neckByte
 10900              		.cfi_endproc
 10901              	.LFE98:
 10902              		.size	leftPressed, .-leftPressed
 10903              		.section	.text.rightPressed,"ax",%progbits
 10904              		.align	2
 10905              		.global	rightPressed
 10906              		.thumb
 10907              		.thumb_func
 10908              		.type	rightPressed, %function
 10909              	rightPressed:
 10910              	.LFB99:
2893:main.c        **** 
2894:main.c        **** void rightPressed()
2895:main.c        **** {
 10911              		.loc 1 2895 0
 10912              		.cfi_startproc
 10913              		@ args = 0, pretend = 0, frame = 0
 10914              		@ frame_needed = 1, uses_anonymous_args = 0
 10915 0000 80B5     		push	{r7, lr}
 10916              		.cfi_def_cfa_offset 8
 10917              		.cfi_offset 7, -8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 247


 10918              		.cfi_offset 14, -4
 10919 0002 00AF     		add	r7, sp, #0
 10920              		.cfi_def_cfa_register 7
2896:main.c        ****     if (!editMode) //normal behavior
 10921              		.loc 1 2896 0
 10922 0004 1E4B     		ldr	r3, .L484
 10923 0006 1B68     		ldr	r3, [r3]
 10924 0008 002B     		cmp	r3, #0
 10925 000a 34D1     		bne	.L480
2897:main.c        ****     {
2898:main.c        ****         currentCopedent += 1;
 10926              		.loc 1 2898 0
 10927 000c 1D4B     		ldr	r3, .L484+4
 10928 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10929 0010 0133     		adds	r3, r3, #1
 10930 0012 DAB2     		uxtb	r2, r3
 10931 0014 1B4B     		ldr	r3, .L484+4
 10932 0016 1A70     		strb	r2, [r3]
2899:main.c        ****         if (currentCopedent >= MAX_NUM_COPEDENTS)
 10933              		.loc 1 2899 0
 10934 0018 1A4B     		ldr	r3, .L484+4
 10935 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10936 001c 062B     		cmp	r3, #6
 10937 001e 02D9     		bls	.L481
2900:main.c        ****         {
2901:main.c        ****             currentCopedent = 0;
 10938              		.loc 1 2901 0
 10939 0020 184B     		ldr	r3, .L484+4
 10940 0022 0022     		movs	r2, #0
 10941 0024 1A70     		strb	r2, [r3]
 10942              	.L481:
2902:main.c        ****         }
2903:main.c        ****         necks[currentNeck] = currentCopedent;
 10943              		.loc 1 2903 0
 10944 0026 184B     		ldr	r3, .L484+8
 10945 0028 1B68     		ldr	r3, [r3]
 10946 002a 164A     		ldr	r2, .L484+4
 10947 002c 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 10948 002e 174A     		ldr	r2, .L484+12
 10949 0030 D154     		strb	r1, [r2, r3]
2904:main.c        ****         neckByte |= (necks[0]<<5) + (necks[1]<<2) + currentNeck;
 10950              		.loc 1 2904 0
 10951 0032 164B     		ldr	r3, .L484+12
 10952 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10953 0036 5B01     		lsls	r3, r3, #5
 10954 0038 DAB2     		uxtb	r2, r3
 10955 003a 144B     		ldr	r3, .L484+12
 10956 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 10957 003e 9B00     		lsls	r3, r3, #2
 10958 0040 DBB2     		uxtb	r3, r3
 10959 0042 1344     		add	r3, r3, r2
 10960 0044 DAB2     		uxtb	r2, r3
 10961 0046 104B     		ldr	r3, .L484+8
 10962 0048 1B68     		ldr	r3, [r3]
 10963 004a DBB2     		uxtb	r3, r3
 10964 004c 1344     		add	r3, r3, r2
 10965 004e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 248


 10966 0050 5AB2     		sxtb	r2, r3
 10967 0052 0F4B     		ldr	r3, .L484+16
 10968 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10969 0056 5BB2     		sxtb	r3, r3
 10970 0058 1343     		orrs	r3, r3, r2
 10971 005a 5BB2     		sxtb	r3, r3
 10972 005c DAB2     		uxtb	r2, r3
 10973 005e 0C4B     		ldr	r3, .L484+16
 10974 0060 1A70     		strb	r2, [r3]
2905:main.c        ****         EEPROM_WriteByte(neckByte, EEPROM_NECKS_OFFSET);
 10975              		.loc 1 2905 0
 10976 0062 0B4B     		ldr	r3, .L484+16
 10977 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 10978 0066 40F2FE71 		movw	r1, #2046
 10979 006a 1846     		mov	r0, r3
 10980 006c FFF7FEFF 		bl	EEPROM_WriteByte
2906:main.c        ****         displayCurrentPresetNameAndCopedent();
 10981              		.loc 1 2906 0
 10982 0070 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
2907:main.c        ****     }
2908:main.c        ****     else
2909:main.c        ****     {
2910:main.c        ****        menuAction(Right);
2911:main.c        ****     }
2912:main.c        **** }
 10983              		.loc 1 2912 0
 10984 0074 02E0     		b	.L483
 10985              	.L480:
2910:main.c        ****     }
 10986              		.loc 1 2910 0
 10987 0076 0120     		movs	r0, #1
 10988 0078 FFF7FEFF 		bl	menuAction
 10989              	.L483:
 10990              		.loc 1 2912 0
 10991 007c 00BF     		nop
 10992 007e 80BD     		pop	{r7, pc}
 10993              	.L485:
 10994              		.align	2
 10995              	.L484:
 10996 0080 00000000 		.word	editMode
 10997 0084 00000000 		.word	currentCopedent
 10998 0088 00000000 		.word	currentNeck
 10999 008c 00000000 		.word	necks
 11000 0090 00000000 		.word	neckByte
 11001              		.cfi_endproc
 11002              	.LFE99:
 11003              		.size	rightPressed, .-rightPressed
 11004              		.section	.text.downPressed,"ax",%progbits
 11005              		.align	2
 11006              		.global	downPressed
 11007              		.thumb
 11008              		.thumb_func
 11009              		.type	downPressed, %function
 11010              	downPressed:
 11011              	.LFB100:
2913:main.c        **** 
2914:main.c        **** void downPressed()
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 249


2915:main.c        **** {
 11012              		.loc 1 2915 0
 11013              		.cfi_startproc
 11014              		@ args = 0, pretend = 0, frame = 0
 11015              		@ frame_needed = 1, uses_anonymous_args = 0
 11016 0000 80B5     		push	{r7, lr}
 11017              		.cfi_def_cfa_offset 8
 11018              		.cfi_offset 7, -8
 11019              		.cfi_offset 14, -4
 11020 0002 00AF     		add	r7, sp, #0
 11021              		.cfi_def_cfa_register 7
2916:main.c        ****     if (!editMode) //normal behavior
 11022              		.loc 1 2916 0
 11023 0004 0F4B     		ldr	r3, .L490
 11024 0006 1B68     		ldr	r3, [r3]
 11025 0008 002B     		cmp	r3, #0
 11026 000a 16D1     		bne	.L487
2917:main.c        ****     {
2918:main.c        ****         patchNum -= 1;
 11027              		.loc 1 2918 0
 11028 000c 0E4B     		ldr	r3, .L490+4
 11029 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11030 0010 013B     		subs	r3, r3, #1
 11031 0012 DAB2     		uxtb	r2, r3
 11032 0014 0C4B     		ldr	r3, .L490+4
 11033 0016 1A70     		strb	r2, [r3]
2919:main.c        ****         patchNum &= 63;
 11034              		.loc 1 2919 0
 11035 0018 0B4B     		ldr	r3, .L490+4
 11036 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11037 001c 03F03F03 		and	r3, r3, #63
 11038 0020 DAB2     		uxtb	r2, r3
 11039 0022 094B     		ldr	r3, .L490+4
 11040 0024 1A70     		strb	r2, [r3]
2920:main.c        ****         EEPROM_WriteByte(patchNum, EEPROM_CURRENT_PRESET_OFFSET);
 11041              		.loc 1 2920 0
 11042 0026 084B     		ldr	r3, .L490+4
 11043 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11044 002a 40F2F271 		movw	r1, #2034
 11045 002e 1846     		mov	r0, r3
 11046 0030 FFF7FEFF 		bl	EEPROM_WriteByte
2921:main.c        ****         displayCurrentPresetNameAndCopedent();
 11047              		.loc 1 2921 0
 11048 0034 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
2922:main.c        ****     }
2923:main.c        ****     else
2924:main.c        ****     {
2925:main.c        ****         menuAction(Down);
2926:main.c        ****     }
2927:main.c        **** }
 11049              		.loc 1 2927 0
 11050 0038 02E0     		b	.L489
 11051              	.L487:
2925:main.c        ****     }
 11052              		.loc 1 2925 0
 11053 003a 0220     		movs	r0, #2
 11054 003c FFF7FEFF 		bl	menuAction
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 250


 11055              	.L489:
 11056              		.loc 1 2927 0
 11057 0040 00BF     		nop
 11058 0042 80BD     		pop	{r7, pc}
 11059              	.L491:
 11060              		.align	2
 11061              	.L490:
 11062 0044 00000000 		.word	editMode
 11063 0048 00000000 		.word	patchNum
 11064              		.cfi_endproc
 11065              	.LFE100:
 11066              		.size	downPressed, .-downPressed
 11067              		.section	.text.upPressed,"ax",%progbits
 11068              		.align	2
 11069              		.global	upPressed
 11070              		.thumb
 11071              		.thumb_func
 11072              		.type	upPressed, %function
 11073              	upPressed:
 11074              	.LFB101:
2928:main.c        **** 
2929:main.c        **** void upPressed()
2930:main.c        **** {
 11075              		.loc 1 2930 0
 11076              		.cfi_startproc
 11077              		@ args = 0, pretend = 0, frame = 0
 11078              		@ frame_needed = 1, uses_anonymous_args = 0
 11079 0000 80B5     		push	{r7, lr}
 11080              		.cfi_def_cfa_offset 8
 11081              		.cfi_offset 7, -8
 11082              		.cfi_offset 14, -4
 11083 0002 00AF     		add	r7, sp, #0
 11084              		.cfi_def_cfa_register 7
2931:main.c        ****     if (!editMode) //normal behavior
 11085              		.loc 1 2931 0
 11086 0004 0F4B     		ldr	r3, .L496
 11087 0006 1B68     		ldr	r3, [r3]
 11088 0008 002B     		cmp	r3, #0
 11089 000a 16D1     		bne	.L493
2932:main.c        ****     {
2933:main.c        ****         patchNum += 1;
 11090              		.loc 1 2933 0
 11091 000c 0E4B     		ldr	r3, .L496+4
 11092 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11093 0010 0133     		adds	r3, r3, #1
 11094 0012 DAB2     		uxtb	r2, r3
 11095 0014 0C4B     		ldr	r3, .L496+4
 11096 0016 1A70     		strb	r2, [r3]
2934:main.c        ****         patchNum &= 63;
 11097              		.loc 1 2934 0
 11098 0018 0B4B     		ldr	r3, .L496+4
 11099 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11100 001c 03F03F03 		and	r3, r3, #63
 11101 0020 DAB2     		uxtb	r2, r3
 11102 0022 094B     		ldr	r3, .L496+4
 11103 0024 1A70     		strb	r2, [r3]
2935:main.c        ****         EEPROM_WriteByte(patchNum, EEPROM_CURRENT_PRESET_OFFSET);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 251


 11104              		.loc 1 2935 0
 11105 0026 084B     		ldr	r3, .L496+4
 11106 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11107 002a 40F2F271 		movw	r1, #2034
 11108 002e 1846     		mov	r0, r3
 11109 0030 FFF7FEFF 		bl	EEPROM_WriteByte
2936:main.c        ****         displayCurrentPresetNameAndCopedent();
 11110              		.loc 1 2936 0
 11111 0034 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
2937:main.c        ****     }
2938:main.c        ****     else
2939:main.c        ****     {
2940:main.c        ****         menuAction(Up);
2941:main.c        ****     }
2942:main.c        **** }
 11112              		.loc 1 2942 0
 11113 0038 02E0     		b	.L495
 11114              	.L493:
2940:main.c        ****     }
 11115              		.loc 1 2940 0
 11116 003a 0320     		movs	r0, #3
 11117 003c FFF7FEFF 		bl	menuAction
 11118              	.L495:
 11119              		.loc 1 2942 0
 11120 0040 00BF     		nop
 11121 0042 80BD     		pop	{r7, pc}
 11122              	.L497:
 11123              		.align	2
 11124              	.L496:
 11125 0044 00000000 		.word	editMode
 11126 0048 00000000 		.word	patchNum
 11127              		.cfi_endproc
 11128              	.LFE101:
 11129              		.size	upPressed, .-upPressed
 11130              		.section	.text.enterPressed,"ax",%progbits
 11131              		.align	2
 11132              		.global	enterPressed
 11133              		.thumb
 11134              		.thumb_func
 11135              		.type	enterPressed, %function
 11136              	enterPressed:
 11137              	.LFB102:
2943:main.c        **** 
2944:main.c        **** void enterPressed()
2945:main.c        **** {
 11138              		.loc 1 2945 0
 11139              		.cfi_startproc
 11140              		@ args = 0, pretend = 0, frame = 0
 11141              		@ frame_needed = 1, uses_anonymous_args = 0
 11142 0000 80B5     		push	{r7, lr}
 11143              		.cfi_def_cfa_offset 8
 11144              		.cfi_offset 7, -8
 11145              		.cfi_offset 14, -4
 11146 0002 00AF     		add	r7, sp, #0
 11147              		.cfi_def_cfa_register 7
2946:main.c        ****     if (!editMode) //normal behavior
 11148              		.loc 1 2946 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 252


 11149 0004 044B     		ldr	r3, .L501
 11150 0006 1B68     		ldr	r3, [r3]
 11151 0008 002B     		cmp	r3, #0
 11152 000a 02D0     		beq	.L500
2947:main.c        ****     {
2948:main.c        ****         ;//nothing
2949:main.c        ****     }
2950:main.c        ****     else
2951:main.c        ****     {
2952:main.c        ****         menuAction(Enter);
 11153              		.loc 1 2952 0
 11154 000c 0420     		movs	r0, #4
 11155 000e FFF7FEFF 		bl	menuAction
 11156              	.L500:
2953:main.c        ****     }
2954:main.c        **** }
 11157              		.loc 1 2954 0
 11158 0012 00BF     		nop
 11159 0014 80BD     		pop	{r7, pc}
 11160              	.L502:
 11161 0016 00BF     		.align	2
 11162              	.L501:
 11163 0018 00000000 		.word	editMode
 11164              		.cfi_endproc
 11165              	.LFE102:
 11166              		.size	enterPressed, .-enterPressed
 11167              		.section	.rodata
 11168              		.align	2
 11169              	.LC21:
 11170 0578 43414C49 		.ascii	"CALIBRATION\000"
 11170      42524154 
 11170      494F4E00 
 11171              		.align	2
 11172              	.LC22:
 11173 0584 4D4F5645 		.ascii	"MOVE ALL PEDALS\000"
 11173      20414C4C 
 11173      20504544 
 11173      414C5300 
 11174              		.align	2
 11175              	.LC23:
 11176 0594 414E4420 		.ascii	"AND LEVERS\000"
 11176      4C455645 
 11176      525300
 11177 059f 00       		.align	2
 11178              	.LC24:
 11179 05a0 5448454E 		.ascii	"THEN PRESS ->\000"
 11179      20505245 
 11179      5353202D 
 11179      3E00
 11180              		.section	.text.enterLeverCalibrationMode,"ax",%progbits
 11181              		.align	2
 11182              		.global	enterLeverCalibrationMode
 11183              		.thumb
 11184              		.thumb_func
 11185              		.type	enterLeverCalibrationMode, %function
 11186              	enterLeverCalibrationMode:
 11187              	.LFB103:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 253


2955:main.c        **** 
2956:main.c        **** void enterLeverCalibrationMode(void)
2957:main.c        **** {
 11188              		.loc 1 2957 0
 11189              		.cfi_startproc
 11190              		@ args = 0, pretend = 0, frame = 8
 11191              		@ frame_needed = 1, uses_anonymous_args = 0
 11192 0000 80B5     		push	{r7, lr}
 11193              		.cfi_def_cfa_offset 8
 11194              		.cfi_offset 7, -8
 11195              		.cfi_offset 14, -4
 11196 0002 82B0     		sub	sp, sp, #8
 11197              		.cfi_def_cfa_offset 16
 11198 0004 00AF     		add	r7, sp, #0
 11199              		.cfi_def_cfa_register 7
2958:main.c        ****     OLEDclear(128, 64);
 11200              		.loc 1 2958 0
 11201 0006 4021     		movs	r1, #64
 11202 0008 8020     		movs	r0, #128
 11203 000a FFF7FEFF 		bl	OLEDclear
2959:main.c        ****     myGFX_setFont(2);
 11204              		.loc 1 2959 0
 11205 000e 0220     		movs	r0, #2
 11206 0010 FFF7FEFF 		bl	myGFX_setFont
2960:main.c        ****     OLEDtextColor(0, 1);
 11207              		.loc 1 2960 0
 11208 0014 0121     		movs	r1, #1
 11209 0016 0020     		movs	r0, #0
 11210 0018 FFF7FEFF 		bl	OLEDtextColor
2961:main.c        ****     OLEDwriteString("CALIBRATION", 11, 1, FirstLine);
 11211              		.loc 1 2961 0
 11212 001c 0023     		movs	r3, #0
 11213 001e 0122     		movs	r2, #1
 11214 0020 0B21     		movs	r1, #11
 11215 0022 1B48     		ldr	r0, .L506
 11216 0024 FFF7FEFF 		bl	OLEDwriteString
2962:main.c        ****     OLEDwriteString("MOVE ALL PEDALS", 15, 1, SecondLine);
 11217              		.loc 1 2962 0
 11218 0028 0123     		movs	r3, #1
 11219 002a 0122     		movs	r2, #1
 11220 002c 0F21     		movs	r1, #15
 11221 002e 1948     		ldr	r0, .L506+4
 11222 0030 FFF7FEFF 		bl	OLEDwriteString
2963:main.c        ****     OLEDwriteString("AND LEVERS", 10, 1, ThirdLine);
 11223              		.loc 1 2963 0
 11224 0034 0223     		movs	r3, #2
 11225 0036 0122     		movs	r2, #1
 11226 0038 0A21     		movs	r1, #10
 11227 003a 1748     		ldr	r0, .L506+8
 11228 003c FFF7FEFF 		bl	OLEDwriteString
2964:main.c        ****     OLEDwriteString("THEN PRESS ->", 15, 1, FourthLine);
 11229              		.loc 1 2964 0
 11230 0040 0323     		movs	r3, #3
 11231 0042 0122     		movs	r2, #1
 11232 0044 0F21     		movs	r1, #15
 11233 0046 1548     		ldr	r0, .L506+12
 11234 0048 FFF7FEFF 		bl	OLEDwriteString
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 254


2965:main.c        ****     mainOLEDWaitingToSend = 1;
 11235              		.loc 1 2965 0
 11236 004c 144B     		ldr	r3, .L506+16
 11237 004e 0122     		movs	r2, #1
 11238 0050 1A60     		str	r2, [r3]
2966:main.c        ****     OLEDtextColor(1, 0);
 11239              		.loc 1 2966 0
 11240 0052 0021     		movs	r1, #0
 11241 0054 0120     		movs	r0, #1
 11242 0056 FFF7FEFF 		bl	OLEDtextColor
 11243              	.LBB61:
2967:main.c        ****     //entering calibration mode, clear the pedals low and high arrays
2968:main.c        ****     for (int i = 0; i < 10; i++)
 11244              		.loc 1 2968 0
 11245 005a 0023     		movs	r3, #0
 11246 005c 7B60     		str	r3, [r7, #4]
 11247 005e 0DE0     		b	.L504
 11248              	.L505:
2969:main.c        ****     {
2970:main.c        ****         pedals_low[i] = 4095;
 11249              		.loc 1 2970 0 discriminator 3
 11250 0060 104A     		ldr	r2, .L506+20
 11251 0062 7B68     		ldr	r3, [r7, #4]
 11252 0064 40F6FF71 		movw	r1, #4095
 11253 0068 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
2971:main.c        ****         pedals_high[i] = 0;
 11254              		.loc 1 2971 0 discriminator 3
 11255 006c 0E4A     		ldr	r2, .L506+24
 11256 006e 7B68     		ldr	r3, [r7, #4]
 11257 0070 0021     		movs	r1, #0
 11258 0072 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
2968:main.c        ****     {
 11259              		.loc 1 2968 0 discriminator 3
 11260 0076 7B68     		ldr	r3, [r7, #4]
 11261 0078 0133     		adds	r3, r3, #1
 11262 007a 7B60     		str	r3, [r7, #4]
 11263              	.L504:
2968:main.c        ****     {
 11264              		.loc 1 2968 0 is_stmt 0 discriminator 1
 11265 007c 7B68     		ldr	r3, [r7, #4]
 11266 007e 092B     		cmp	r3, #9
 11267 0080 EEDD     		ble	.L505
 11268              	.LBE61:
2972:main.c        ****     }
2973:main.c        ****     leverCalibrationMode = 1;
 11269              		.loc 1 2973 0 is_stmt 1
 11270 0082 0A4B     		ldr	r3, .L506+28
 11271 0084 0122     		movs	r2, #1
 11272 0086 1A60     		str	r2, [r3]
2974:main.c        **** }
 11273              		.loc 1 2974 0
 11274 0088 00BF     		nop
 11275 008a 0837     		adds	r7, r7, #8
 11276              		.cfi_def_cfa_offset 8
 11277 008c BD46     		mov	sp, r7
 11278              		.cfi_def_cfa_register 13
 11279              		@ sp needed
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 255


 11280 008e 80BD     		pop	{r7, pc}
 11281              	.L507:
 11282              		.align	2
 11283              	.L506:
 11284 0090 78050000 		.word	.LC21
 11285 0094 84050000 		.word	.LC22
 11286 0098 94050000 		.word	.LC23
 11287 009c A0050000 		.word	.LC24
 11288 00a0 00000000 		.word	mainOLEDWaitingToSend
 11289 00a4 00000000 		.word	pedals_low
 11290 00a8 00000000 		.word	pedals_high
 11291 00ac 00000000 		.word	leverCalibrationMode
 11292              		.cfi_endproc
 11293              	.LFE103:
 11294              		.size	enterLeverCalibrationMode, .-enterLeverCalibrationMode
 11295              		.section	.text.exitLeverCalibrationMode,"ax",%progbits
 11296              		.align	2
 11297              		.global	exitLeverCalibrationMode
 11298              		.thumb
 11299              		.thumb_func
 11300              		.type	exitLeverCalibrationMode, %function
 11301              	exitLeverCalibrationMode:
 11302              	.LFB104:
2975:main.c        **** 
2976:main.c        **** void exitLeverCalibrationMode(void)
2977:main.c        **** {
 11303              		.loc 1 2977 0
 11304              		.cfi_startproc
 11305              		@ args = 0, pretend = 0, frame = 16
 11306              		@ frame_needed = 1, uses_anonymous_args = 0
 11307 0000 80B5     		push	{r7, lr}
 11308              		.cfi_def_cfa_offset 8
 11309              		.cfi_offset 7, -8
 11310              		.cfi_offset 14, -4
 11311 0002 84B0     		sub	sp, sp, #16
 11312              		.cfi_def_cfa_offset 24
 11313 0004 00AF     		add	r7, sp, #0
 11314              		.cfi_def_cfa_register 7
2978:main.c        ****     leverCalibrationMode = 0;
 11315              		.loc 1 2978 0
 11316 0006 4E4B     		ldr	r3, .L517
 11317 0008 0022     		movs	r2, #0
 11318 000a 1A60     		str	r2, [r3]
 11319              	.LBB62:
2979:main.c        ****     //draw normal screen
2980:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 11320              		.loc 1 2980 0
 11321 000c 0023     		movs	r3, #0
 11322 000e FB60     		str	r3, [r7, #12]
 11323 0010 19E0     		b	.L509
 11324              	.L512:
2981:main.c        ****     {
2982:main.c        ****         //if you are closer to pedal high than pedal low, then switch high and low, the sensor is r
2983:main.c        ****         if (angle[i] > (pedals_low[i]+20))
 11325              		.loc 1 2983 0
 11326 0012 4C4A     		ldr	r2, .L517+4
 11327 0014 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 256


 11328 0016 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 11329 001a 1946     		mov	r1, r3
 11330 001c 4A4A     		ldr	r2, .L517+8
 11331 001e FB68     		ldr	r3, [r7, #12]
 11332 0020 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 11333 0024 1433     		adds	r3, r3, #20
 11334 0026 9942     		cmp	r1, r3
 11335 0028 05DD     		ble	.L510
2984:main.c        ****         {
2985:main.c        ****             pedal_inverted[i] = 1;
 11336              		.loc 1 2985 0
 11337 002a 484A     		ldr	r2, .L517+12
 11338 002c FB68     		ldr	r3, [r7, #12]
 11339 002e 1344     		add	r3, r3, r2
 11340 0030 0122     		movs	r2, #1
 11341 0032 1A70     		strb	r2, [r3]
 11342 0034 04E0     		b	.L511
 11343              	.L510:
2986:main.c        ****         }
2987:main.c        ****         else
2988:main.c        ****         {
2989:main.c        ****             pedal_inverted[i] = 0;
 11344              		.loc 1 2989 0
 11345 0036 454A     		ldr	r2, .L517+12
 11346 0038 FB68     		ldr	r3, [r7, #12]
 11347 003a 1344     		add	r3, r3, r2
 11348 003c 0022     		movs	r2, #0
 11349 003e 1A70     		strb	r2, [r3]
 11350              	.L511:
2980:main.c        ****     {
 11351              		.loc 1 2980 0 discriminator 2
 11352 0040 FB68     		ldr	r3, [r7, #12]
 11353 0042 0133     		adds	r3, r3, #1
 11354 0044 FB60     		str	r3, [r7, #12]
 11355              	.L509:
2980:main.c        ****     {
 11356              		.loc 1 2980 0 is_stmt 0 discriminator 1
 11357 0046 FB68     		ldr	r3, [r7, #12]
 11358 0048 092B     		cmp	r3, #9
 11359 004a E2DD     		ble	.L512
 11360              	.LBE62:
2990:main.c        ****         }
2991:main.c        ****     }
2992:main.c        ****     uint16_t pedal_inverted_byte = 0;
 11361              		.loc 1 2992 0 is_stmt 1
 11362 004c 0023     		movs	r3, #0
 11363 004e 7B81     		strh	r3, [r7, #10]	@ movhi
 11364              	.LBB63:
2993:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 11365              		.loc 1 2993 0
 11366 0050 0023     		movs	r3, #0
 11367 0052 7B60     		str	r3, [r7, #4]
 11368 0054 0EE0     		b	.L513
 11369              	.L514:
2994:main.c        ****     {
2995:main.c        ****         pedal_inverted_byte += pedal_inverted[i] << i;
 11370              		.loc 1 2995 0 discriminator 3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 257


 11371 0056 3D4A     		ldr	r2, .L517+12
 11372 0058 7B68     		ldr	r3, [r7, #4]
 11373 005a 1344     		add	r3, r3, r2
 11374 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11375 005e 1A46     		mov	r2, r3
 11376 0060 7B68     		ldr	r3, [r7, #4]
 11377 0062 02FA03F3 		lsl	r3, r2, r3
 11378 0066 9AB2     		uxth	r2, r3
 11379 0068 7B89     		ldrh	r3, [r7, #10]	@ movhi
 11380 006a 1344     		add	r3, r3, r2
 11381 006c 7B81     		strh	r3, [r7, #10]	@ movhi
2993:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 11382              		.loc 1 2993 0 discriminator 3
 11383 006e 7B68     		ldr	r3, [r7, #4]
 11384 0070 0133     		adds	r3, r3, #1
 11385 0072 7B60     		str	r3, [r7, #4]
 11386              	.L513:
2993:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 11387              		.loc 1 2993 0 is_stmt 0 discriminator 1
 11388 0074 7B68     		ldr	r3, [r7, #4]
 11389 0076 092B     		cmp	r3, #9
 11390 0078 EDDD     		ble	.L514
 11391              	.LBE63:
2996:main.c        ****     }
2997:main.c        ****     EEPROM_WriteByte(pedal_inverted_byte>>8, EEPROM_PEDAL_INVERTED_OFFSET);
 11392              		.loc 1 2997 0 is_stmt 1
 11393 007a 7B89     		ldrh	r3, [r7, #10]
 11394 007c 1B0A     		lsrs	r3, r3, #8
 11395 007e 9BB2     		uxth	r3, r3
 11396 0080 DBB2     		uxtb	r3, r3
 11397 0082 40F2FB71 		movw	r1, #2043
 11398 0086 1846     		mov	r0, r3
 11399 0088 FFF7FEFF 		bl	EEPROM_WriteByte
2998:main.c        ****     EEPROM_WriteByte(pedal_inverted_byte& 255, EEPROM_PEDAL_INVERTED_OFFSET+1);
 11400              		.loc 1 2998 0
 11401 008c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 11402 008e DBB2     		uxtb	r3, r3
 11403 0090 40F2FC71 		movw	r1, #2044
 11404 0094 1846     		mov	r0, r3
 11405 0096 FFF7FEFF 		bl	EEPROM_WriteByte
2999:main.c        ****     calculatePedalRatios();
 11406              		.loc 1 2999 0
 11407 009a FFF7FEFF 		bl	calculatePedalRatios
 11408              	.LBB64:
3000:main.c        ****     //now need to store this in EEPROM.                
3001:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 11409              		.loc 1 3001 0
 11410 009e 0023     		movs	r3, #0
 11411 00a0 3B60     		str	r3, [r7]
 11412 00a2 45E0     		b	.L515
 11413              	.L516:
3002:main.c        ****     {
3003:main.c        ****          EEPROM_WriteByte((pedals_low[i] >> 8), EEPROM_LEVER_CALIBRATION_OFFSET + (i*4));
 11414              		.loc 1 3003 0 discriminator 3
 11415 00a4 284A     		ldr	r2, .L517+8
 11416 00a6 3B68     		ldr	r3, [r7]
 11417 00a8 32F81330 		ldrh	r3, [r2, r3, lsl #1]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 258


 11418 00ac 1B0A     		lsrs	r3, r3, #8
 11419 00ae 9BB2     		uxth	r3, r3
 11420 00b0 DAB2     		uxtb	r2, r3
 11421 00b2 3B68     		ldr	r3, [r7]
 11422 00b4 9BB2     		uxth	r3, r3
 11423 00b6 9B00     		lsls	r3, r3, #2
 11424 00b8 9BB2     		uxth	r3, r3
 11425 00ba 03F29A73 		addw	r3, r3, #1946
 11426 00be 9BB2     		uxth	r3, r3
 11427 00c0 1946     		mov	r1, r3
 11428 00c2 1046     		mov	r0, r2
 11429 00c4 FFF7FEFF 		bl	EEPROM_WriteByte
3004:main.c        ****          EEPROM_WriteByte((pedals_low[i] & 255), EEPROM_LEVER_CALIBRATION_OFFSET + ((i*4) + 1));
 11430              		.loc 1 3004 0 discriminator 3
 11431 00c8 1F4A     		ldr	r2, .L517+8
 11432 00ca 3B68     		ldr	r3, [r7]
 11433 00cc 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 11434 00d0 DAB2     		uxtb	r2, r3
 11435 00d2 3B68     		ldr	r3, [r7]
 11436 00d4 9BB2     		uxth	r3, r3
 11437 00d6 9B00     		lsls	r3, r3, #2
 11438 00d8 9BB2     		uxth	r3, r3
 11439 00da 03F29B73 		addw	r3, r3, #1947
 11440 00de 9BB2     		uxth	r3, r3
 11441 00e0 1946     		mov	r1, r3
 11442 00e2 1046     		mov	r0, r2
 11443 00e4 FFF7FEFF 		bl	EEPROM_WriteByte
3005:main.c        ****          EEPROM_WriteByte((pedals_high[i] >> 8), EEPROM_LEVER_CALIBRATION_OFFSET + ((i*4) + 2));
 11444              		.loc 1 3005 0 discriminator 3
 11445 00e8 194A     		ldr	r2, .L517+16
 11446 00ea 3B68     		ldr	r3, [r7]
 11447 00ec 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 11448 00f0 1B0A     		lsrs	r3, r3, #8
 11449 00f2 9BB2     		uxth	r3, r3
 11450 00f4 DAB2     		uxtb	r2, r3
 11451 00f6 3B68     		ldr	r3, [r7]
 11452 00f8 03F2E713 		addw	r3, r3, #487
 11453 00fc 9BB2     		uxth	r3, r3
 11454 00fe 9B00     		lsls	r3, r3, #2
 11455 0100 9BB2     		uxth	r3, r3
 11456 0102 1946     		mov	r1, r3
 11457 0104 1046     		mov	r0, r2
 11458 0106 FFF7FEFF 		bl	EEPROM_WriteByte
3006:main.c        ****          EEPROM_WriteByte((pedals_high[i] & 255), EEPROM_LEVER_CALIBRATION_OFFSET + ((i*4) + 3));
 11459              		.loc 1 3006 0 discriminator 3
 11460 010a 114A     		ldr	r2, .L517+16
 11461 010c 3B68     		ldr	r3, [r7]
 11462 010e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 11463 0112 DAB2     		uxtb	r2, r3
 11464 0114 3B68     		ldr	r3, [r7]
 11465 0116 9BB2     		uxth	r3, r3
 11466 0118 9B00     		lsls	r3, r3, #2
 11467 011a 9BB2     		uxth	r3, r3
 11468 011c 03F29D73 		addw	r3, r3, #1949
 11469 0120 9BB2     		uxth	r3, r3
 11470 0122 1946     		mov	r1, r3
 11471 0124 1046     		mov	r0, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 259


 11472 0126 FFF7FEFF 		bl	EEPROM_WriteByte
3001:main.c        ****     {
 11473              		.loc 1 3001 0 discriminator 3
 11474 012a 3B68     		ldr	r3, [r7]
 11475 012c 0133     		adds	r3, r3, #1
 11476 012e 3B60     		str	r3, [r7]
 11477              	.L515:
3001:main.c        ****     {
 11478              		.loc 1 3001 0 is_stmt 0 discriminator 1
 11479 0130 3B68     		ldr	r3, [r7]
 11480 0132 092B     		cmp	r3, #9
 11481 0134 B6DD     		ble	.L516
 11482              	.LBE64:
3007:main.c        ****     }
3008:main.c        **** }
 11483              		.loc 1 3008 0 is_stmt 1
 11484 0136 00BF     		nop
 11485 0138 1037     		adds	r7, r7, #16
 11486              		.cfi_def_cfa_offset 8
 11487 013a BD46     		mov	sp, r7
 11488              		.cfi_def_cfa_register 13
 11489              		@ sp needed
 11490 013c 80BD     		pop	{r7, pc}
 11491              	.L518:
 11492 013e 00BF     		.align	2
 11493              	.L517:
 11494 0140 00000000 		.word	leverCalibrationMode
 11495 0144 00000000 		.word	angle
 11496 0148 00000000 		.word	pedals_low
 11497 014c 00000000 		.word	pedal_inverted
 11498 0150 00000000 		.word	pedals_high
 11499              		.cfi_endproc
 11500              	.LFE104:
 11501              		.size	exitLeverCalibrationMode, .-exitLeverCalibrationMode
 11502              		.section	.rodata
 11503 05ae 0000     		.align	2
 11504              	.LC25:
 11505 05b0 504C4143 		.ascii	"PLACE BAR AT \000"
 11505      45204241 
 11505      52204154 
 11505      2000
 11506 05be 0000     		.align	2
 11507              	.LC26:
 11508 05c0 46524554 		.ascii	"FRET \000"
 11508      2000
 11509              		.section	.text.enterFretCalibrationMode,"ax",%progbits
 11510              		.align	2
 11511              		.global	enterFretCalibrationMode
 11512              		.thumb
 11513              		.thumb_func
 11514              		.type	enterFretCalibrationMode, %function
 11515              	enterFretCalibrationMode:
 11516              	.LFB105:
3009:main.c        **** 
3010:main.c        **** 
3011:main.c        **** void enterFretCalibrationMode(void)
3012:main.c        **** {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 260


 11517              		.loc 1 3012 0
 11518              		.cfi_startproc
 11519              		@ args = 0, pretend = 0, frame = 0
 11520              		@ frame_needed = 1, uses_anonymous_args = 0
 11521 0000 80B5     		push	{r7, lr}
 11522              		.cfi_def_cfa_offset 8
 11523              		.cfi_offset 7, -8
 11524              		.cfi_offset 14, -4
 11525 0002 00AF     		add	r7, sp, #0
 11526              		.cfi_def_cfa_register 7
3013:main.c        ****     OLEDclear(128, 64);
 11527              		.loc 1 3013 0
 11528 0004 4021     		movs	r1, #64
 11529 0006 8020     		movs	r0, #128
 11530 0008 FFF7FEFF 		bl	OLEDclear
3014:main.c        ****     myGFX_setFont(2);
 11531              		.loc 1 3014 0
 11532 000c 0220     		movs	r0, #2
 11533 000e FFF7FEFF 		bl	myGFX_setFont
3015:main.c        ****     OLEDtextColor(0, 1);
 11534              		.loc 1 3015 0
 11535 0012 0121     		movs	r1, #1
 11536 0014 0020     		movs	r0, #0
 11537 0016 FFF7FEFF 		bl	OLEDtextColor
3016:main.c        ****     fretToCalibrate = 0;
 11538              		.loc 1 3016 0
 11539 001a 194B     		ldr	r3, .L520
 11540 001c 0022     		movs	r2, #0
 11541 001e 1A70     		strb	r2, [r3]
3017:main.c        ****     OLEDwriteString("CALIBRATION", 11, 1, FirstLine);
 11542              		.loc 1 3017 0
 11543 0020 0023     		movs	r3, #0
 11544 0022 0122     		movs	r2, #1
 11545 0024 0B21     		movs	r1, #11
 11546 0026 1748     		ldr	r0, .L520+4
 11547 0028 FFF7FEFF 		bl	OLEDwriteString
3018:main.c        ****     OLEDwriteString("PLACE BAR AT ", 15, 1, SecondLine);
 11548              		.loc 1 3018 0
 11549 002c 0123     		movs	r3, #1
 11550 002e 0122     		movs	r2, #1
 11551 0030 0F21     		movs	r1, #15
 11552 0032 1548     		ldr	r0, .L520+8
 11553 0034 FFF7FEFF 		bl	OLEDwriteString
3019:main.c        ****     OLEDwriteString("FRET ", 5, 1, ThirdLine);
 11554              		.loc 1 3019 0
 11555 0038 0223     		movs	r3, #2
 11556 003a 0122     		movs	r2, #1
 11557 003c 0521     		movs	r1, #5
 11558 003e 1348     		ldr	r0, .L520+12
 11559 0040 FFF7FEFF 		bl	OLEDwriteString
3020:main.c        ****     OLEDwriteInt(whichFretArray[fretToCalibrate], 2, 40, ThirdLine);
 11560              		.loc 1 3020 0
 11561 0044 0E4B     		ldr	r3, .L520
 11562 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 11563 0048 1A46     		mov	r2, r3
 11564 004a 114B     		ldr	r3, .L520+16
 11565 004c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 261


 11566 004e 1846     		mov	r0, r3
 11567 0050 0223     		movs	r3, #2
 11568 0052 2822     		movs	r2, #40
 11569 0054 0221     		movs	r1, #2
 11570 0056 FFF7FEFF 		bl	OLEDwriteInt
3021:main.c        ****     OLEDwriteString("THEN PRESS ->", 15, 1, FourthLine);
 11571              		.loc 1 3021 0
 11572 005a 0323     		movs	r3, #3
 11573 005c 0122     		movs	r2, #1
 11574 005e 0F21     		movs	r1, #15
 11575 0060 0C48     		ldr	r0, .L520+20
 11576 0062 FFF7FEFF 		bl	OLEDwriteString
3022:main.c        ****     mainOLEDWaitingToSend = 1;
 11577              		.loc 1 3022 0
 11578 0066 0C4B     		ldr	r3, .L520+24
 11579 0068 0122     		movs	r2, #1
 11580 006a 1A60     		str	r2, [r3]
3023:main.c        ****     OLEDtextColor(1, 0);
 11581              		.loc 1 3023 0
 11582 006c 0021     		movs	r1, #0
 11583 006e 0120     		movs	r0, #1
 11584 0070 FFF7FEFF 		bl	OLEDtextColor
3024:main.c        ****     fretCalibrationMode = 1;
 11585              		.loc 1 3024 0
 11586 0074 094B     		ldr	r3, .L520+28
 11587 0076 0122     		movs	r2, #1
 11588 0078 1A60     		str	r2, [r3]
3025:main.c        **** }
 11589              		.loc 1 3025 0
 11590 007a 00BF     		nop
 11591 007c 80BD     		pop	{r7, pc}
 11592              	.L521:
 11593 007e 00BF     		.align	2
 11594              	.L520:
 11595 0080 00000000 		.word	fretToCalibrate
 11596 0084 78050000 		.word	.LC21
 11597 0088 B0050000 		.word	.LC25
 11598 008c C0050000 		.word	.LC26
 11599 0090 00000000 		.word	whichFretArray
 11600 0094 A0050000 		.word	.LC24
 11601 0098 00000000 		.word	mainOLEDWaitingToSend
 11602 009c 00000000 		.word	fretCalibrationMode
 11603              		.cfi_endproc
 11604              	.LFE105:
 11605              		.size	enterFretCalibrationMode, .-enterFretCalibrationMode
 11606              		.section	.text.exitFretCalibrationMode,"ax",%progbits
 11607              		.align	2
 11608              		.global	exitFretCalibrationMode
 11609              		.thumb
 11610              		.thumb_func
 11611              		.type	exitFretCalibrationMode, %function
 11612              	exitFretCalibrationMode:
 11613              	.LFB106:
3026:main.c        **** 
3027:main.c        **** void exitFretCalibrationMode(void)
3028:main.c        **** {
 11614              		.loc 1 3028 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 262


 11615              		.cfi_startproc
 11616              		@ args = 0, pretend = 0, frame = 8
 11617              		@ frame_needed = 1, uses_anonymous_args = 0
 11618 0000 80B5     		push	{r7, lr}
 11619              		.cfi_def_cfa_offset 8
 11620              		.cfi_offset 7, -8
 11621              		.cfi_offset 14, -4
 11622 0002 82B0     		sub	sp, sp, #8
 11623              		.cfi_def_cfa_offset 16
 11624 0004 00AF     		add	r7, sp, #0
 11625              		.cfi_def_cfa_register 7
3029:main.c        ****     fretCalibrationMode = 0;
 11626              		.loc 1 3029 0
 11627 0006 2B4B     		ldr	r3, .L525
 11628 0008 0022     		movs	r2, #0
 11629 000a 1A60     		str	r2, [r3]
 11630              	.LBB65:
3030:main.c        ****     //now need to store this in EEPROM.                
3031:main.c        ****     for (int i = 0; i < NUM_FRET_MEASUREMENTS; i++)
 11631              		.loc 1 3031 0
 11632 000c 0023     		movs	r3, #0
 11633 000e 7B60     		str	r3, [r7, #4]
 11634 0010 47E0     		b	.L523
 11635              	.L524:
3032:main.c        ****     {
3033:main.c        ****          EEPROM_WriteByte((fretMeasurements[0][i] >> 8), EEPROM_FRET_CALIBRATION_OFFSET + (i*4));
 11636              		.loc 1 3033 0 discriminator 3
 11637 0012 294A     		ldr	r2, .L525+4
 11638 0014 7B68     		ldr	r3, [r7, #4]
 11639 0016 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 11640 001a 1B0A     		lsrs	r3, r3, #8
 11641 001c 9BB2     		uxth	r3, r3
 11642 001e DAB2     		uxtb	r2, r3
 11643 0020 7B68     		ldr	r3, [r7, #4]
 11644 0022 9BB2     		uxth	r3, r3
 11645 0024 9B00     		lsls	r3, r3, #2
 11646 0026 9BB2     		uxth	r3, r3
 11647 0028 03F2C273 		addw	r3, r3, #1986
 11648 002c 9BB2     		uxth	r3, r3
 11649 002e 1946     		mov	r1, r3
 11650 0030 1046     		mov	r0, r2
 11651 0032 FFF7FEFF 		bl	EEPROM_WriteByte
3034:main.c        ****          EEPROM_WriteByte((fretMeasurements[0][i] & 255), EEPROM_FRET_CALIBRATION_OFFSET + ((i*4) +
 11652              		.loc 1 3034 0 discriminator 3
 11653 0036 204A     		ldr	r2, .L525+4
 11654 0038 7B68     		ldr	r3, [r7, #4]
 11655 003a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 11656 003e DAB2     		uxtb	r2, r3
 11657 0040 7B68     		ldr	r3, [r7, #4]
 11658 0042 9BB2     		uxth	r3, r3
 11659 0044 9B00     		lsls	r3, r3, #2
 11660 0046 9BB2     		uxth	r3, r3
 11661 0048 03F2C373 		addw	r3, r3, #1987
 11662 004c 9BB2     		uxth	r3, r3
 11663 004e 1946     		mov	r1, r3
 11664 0050 1046     		mov	r0, r2
 11665 0052 FFF7FEFF 		bl	EEPROM_WriteByte
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 263


3035:main.c        ****          EEPROM_WriteByte((fretMeasurements[1][i] >> 8), EEPROM_FRET_CALIBRATION_OFFSET + ((i*4) + 
 11666              		.loc 1 3035 0 discriminator 3
 11667 0056 184A     		ldr	r2, .L525+4
 11668 0058 7B68     		ldr	r3, [r7, #4]
 11669 005a 0C33     		adds	r3, r3, #12
 11670 005c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 11671 0060 1B0A     		lsrs	r3, r3, #8
 11672 0062 9BB2     		uxth	r3, r3
 11673 0064 DAB2     		uxtb	r2, r3
 11674 0066 7B68     		ldr	r3, [r7, #4]
 11675 0068 03F2F113 		addw	r3, r3, #497
 11676 006c 9BB2     		uxth	r3, r3
 11677 006e 9B00     		lsls	r3, r3, #2
 11678 0070 9BB2     		uxth	r3, r3
 11679 0072 1946     		mov	r1, r3
 11680 0074 1046     		mov	r0, r2
 11681 0076 FFF7FEFF 		bl	EEPROM_WriteByte
3036:main.c        ****          EEPROM_WriteByte((fretMeasurements[1][i] & 255), EEPROM_FRET_CALIBRATION_OFFSET + ((i*4) +
 11682              		.loc 1 3036 0 discriminator 3
 11683 007a 0F4A     		ldr	r2, .L525+4
 11684 007c 7B68     		ldr	r3, [r7, #4]
 11685 007e 0C33     		adds	r3, r3, #12
 11686 0080 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 11687 0084 DAB2     		uxtb	r2, r3
 11688 0086 7B68     		ldr	r3, [r7, #4]
 11689 0088 9BB2     		uxth	r3, r3
 11690 008a 9B00     		lsls	r3, r3, #2
 11691 008c 9BB2     		uxth	r3, r3
 11692 008e 03F2C573 		addw	r3, r3, #1989
 11693 0092 9BB2     		uxth	r3, r3
 11694 0094 1946     		mov	r1, r3
 11695 0096 1046     		mov	r0, r2
 11696 0098 FFF7FEFF 		bl	EEPROM_WriteByte
3031:main.c        ****     {
 11697              		.loc 1 3031 0 discriminator 3
 11698 009c 7B68     		ldr	r3, [r7, #4]
 11699 009e 0133     		adds	r3, r3, #1
 11700 00a0 7B60     		str	r3, [r7, #4]
 11701              	.L523:
3031:main.c        ****     {
 11702              		.loc 1 3031 0 is_stmt 0 discriminator 1
 11703 00a2 7B68     		ldr	r3, [r7, #4]
 11704 00a4 0B2B     		cmp	r3, #11
 11705 00a6 B4DD     		ble	.L524
 11706              	.LBE65:
3037:main.c        ****     }
3038:main.c        ****     exitEditModeMenu();
 11707              		.loc 1 3038 0 is_stmt 1
 11708 00a8 FFF7FEFF 		bl	exitEditModeMenu
3039:main.c        **** 
3040:main.c        **** }
 11709              		.loc 1 3040 0
 11710 00ac 00BF     		nop
 11711 00ae 0837     		adds	r7, r7, #8
 11712              		.cfi_def_cfa_offset 8
 11713 00b0 BD46     		mov	sp, r7
 11714              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 264


 11715              		@ sp needed
 11716 00b2 80BD     		pop	{r7, pc}
 11717              	.L526:
 11718              		.align	2
 11719              	.L525:
 11720 00b4 00000000 		.word	fretCalibrationMode
 11721 00b8 00000000 		.word	fretMeasurements
 11722              		.cfi_endproc
 11723              	.LFE106:
 11724              		.size	exitFretCalibrationMode, .-exitFretCalibrationMode
 11725              		.text
 11726              	.Letext0:
 11727              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 11728              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 11729              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 11730              		.file 5 "Generated_Source\\PSoC5/cy_em_eeprom.h"
 11731              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 11732              		.file 7 "oled.h"
 11733              		.file 8 "Generated_Source\\PSoC5/USB_midi.h"
 11734              		.file 9 "Generated_Source\\PSoC5/Em_EEPROM.h"
 11735              		.file 10 "Generated_Source\\PSoC5/I2C_1.h"
 11736              		.file 11 "Generated_Source\\PSoC5/core_cm3.h"
 11737              		.section	.debug_info,"",%progbits
 11738              	.Ldebug_info0:
 11739 0000 1F230000 		.4byte	0x231f
 11740 0004 0400     		.2byte	0x4
 11741 0006 00000000 		.4byte	.Ldebug_abbrev0
 11742 000a 04       		.byte	0x4
 11743 000b 01       		.uleb128 0x1
 11744 000c 690A0000 		.4byte	.LASF374
 11745 0010 0C       		.byte	0xc
 11746 0011 F10B0000 		.4byte	.LASF375
 11747 0015 3D080000 		.4byte	.LASF376
 11748 0019 00000000 		.4byte	.Ldebug_ranges0+0
 11749 001d 00000000 		.4byte	0
 11750 0021 00000000 		.4byte	.Ldebug_line0
 11751 0025 02       		.uleb128 0x2
 11752 0026 670E0000 		.4byte	.LASF0
 11753 002a 02       		.byte	0x2
 11754 002b 1B       		.byte	0x1b
 11755 002c 30000000 		.4byte	0x30
 11756 0030 03       		.uleb128 0x3
 11757 0031 01       		.byte	0x1
 11758 0032 06       		.byte	0x6
 11759 0033 30040000 		.4byte	.LASF2
 11760 0037 02       		.uleb128 0x2
 11761 0038 7D020000 		.4byte	.LASF1
 11762 003c 02       		.byte	0x2
 11763 003d 1D       		.byte	0x1d
 11764 003e 42000000 		.4byte	0x42
 11765 0042 03       		.uleb128 0x3
 11766 0043 01       		.byte	0x1
 11767 0044 08       		.byte	0x8
 11768 0045 DA040000 		.4byte	.LASF3
 11769 0049 02       		.uleb128 0x2
 11770 004a BD0F0000 		.4byte	.LASF4
 11771 004e 02       		.byte	0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 265


 11772 004f 29       		.byte	0x29
 11773 0050 54000000 		.4byte	0x54
 11774 0054 03       		.uleb128 0x3
 11775 0055 02       		.byte	0x2
 11776 0056 05       		.byte	0x5
 11777 0057 05110000 		.4byte	.LASF5
 11778 005b 02       		.uleb128 0x2
 11779 005c 12060000 		.4byte	.LASF6
 11780 0060 02       		.byte	0x2
 11781 0061 2B       		.byte	0x2b
 11782 0062 66000000 		.4byte	0x66
 11783 0066 03       		.uleb128 0x3
 11784 0067 02       		.byte	0x2
 11785 0068 07       		.byte	0x7
 11786 0069 5E130000 		.4byte	.LASF7
 11787 006d 02       		.uleb128 0x2
 11788 006e A4130000 		.4byte	.LASF8
 11789 0072 02       		.byte	0x2
 11790 0073 3F       		.byte	0x3f
 11791 0074 78000000 		.4byte	0x78
 11792 0078 03       		.uleb128 0x3
 11793 0079 04       		.byte	0x4
 11794 007a 05       		.byte	0x5
 11795 007b FF020000 		.4byte	.LASF9
 11796 007f 02       		.uleb128 0x2
 11797 0080 600B0000 		.4byte	.LASF10
 11798 0084 02       		.byte	0x2
 11799 0085 41       		.byte	0x41
 11800 0086 8A000000 		.4byte	0x8a
 11801 008a 03       		.uleb128 0x3
 11802 008b 04       		.byte	0x4
 11803 008c 07       		.byte	0x7
 11804 008d 1A090000 		.4byte	.LASF11
 11805 0091 03       		.uleb128 0x3
 11806 0092 08       		.byte	0x8
 11807 0093 05       		.byte	0x5
 11808 0094 6B0B0000 		.4byte	.LASF12
 11809 0098 03       		.uleb128 0x3
 11810 0099 08       		.byte	0x8
 11811 009a 07       		.byte	0x7
 11812 009b 850E0000 		.4byte	.LASF13
 11813 009f 04       		.uleb128 0x4
 11814 00a0 04       		.byte	0x4
 11815 00a1 05       		.byte	0x5
 11816 00a2 696E7400 		.ascii	"int\000"
 11817 00a6 03       		.uleb128 0x3
 11818 00a7 04       		.byte	0x4
 11819 00a8 07       		.byte	0x7
 11820 00a9 BE0C0000 		.4byte	.LASF14
 11821 00ad 02       		.uleb128 0x2
 11822 00ae 13000000 		.4byte	.LASF15
 11823 00b2 03       		.byte	0x3
 11824 00b3 14       		.byte	0x14
 11825 00b4 25000000 		.4byte	0x25
 11826 00b8 02       		.uleb128 0x2
 11827 00b9 3C040000 		.4byte	.LASF16
 11828 00bd 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 266


 11829 00be 18       		.byte	0x18
 11830 00bf 37000000 		.4byte	0x37
 11831 00c3 02       		.uleb128 0x2
 11832 00c4 69110000 		.4byte	.LASF17
 11833 00c8 03       		.byte	0x3
 11834 00c9 20       		.byte	0x20
 11835 00ca 49000000 		.4byte	0x49
 11836 00ce 02       		.uleb128 0x2
 11837 00cf 9C0E0000 		.4byte	.LASF18
 11838 00d3 03       		.byte	0x3
 11839 00d4 24       		.byte	0x24
 11840 00d5 5B000000 		.4byte	0x5b
 11841 00d9 02       		.uleb128 0x2
 11842 00da BB000000 		.4byte	.LASF19
 11843 00de 03       		.byte	0x3
 11844 00df 2C       		.byte	0x2c
 11845 00e0 6D000000 		.4byte	0x6d
 11846 00e4 02       		.uleb128 0x2
 11847 00e5 FD120000 		.4byte	.LASF20
 11848 00e9 03       		.byte	0x3
 11849 00ea 30       		.byte	0x30
 11850 00eb 7F000000 		.4byte	0x7f
 11851 00ef 05       		.uleb128 0x5
 11852 00f0 BB100000 		.4byte	.LASF21
 11853 00f4 04       		.byte	0x4
 11854 00f5 E901     		.2byte	0x1e9
 11855 00f7 42000000 		.4byte	0x42
 11856 00fb 05       		.uleb128 0x5
 11857 00fc 3D140000 		.4byte	.LASF22
 11858 0100 04       		.byte	0x4
 11859 0101 EA01     		.2byte	0x1ea
 11860 0103 66000000 		.4byte	0x66
 11861 0107 05       		.uleb128 0x5
 11862 0108 F7000000 		.4byte	.LASF23
 11863 010c 04       		.byte	0x4
 11864 010d EB01     		.2byte	0x1eb
 11865 010f 8A000000 		.4byte	0x8a
 11866 0113 03       		.uleb128 0x3
 11867 0114 04       		.byte	0x4
 11868 0115 04       		.byte	0x4
 11869 0116 610C0000 		.4byte	.LASF24
 11870 011a 03       		.uleb128 0x3
 11871 011b 08       		.byte	0x8
 11872 011c 04       		.byte	0x4
 11873 011d EA0B0000 		.4byte	.LASF25
 11874 0121 03       		.uleb128 0x3
 11875 0122 01       		.byte	0x1
 11876 0123 08       		.byte	0x8
 11877 0124 C6050000 		.4byte	.LASF26
 11878 0128 05       		.uleb128 0x5
 11879 0129 420D0000 		.4byte	.LASF27
 11880 012d 04       		.byte	0x4
 11881 012e 8B02     		.2byte	0x28b
 11882 0130 8A000000 		.4byte	0x8a
 11883 0134 05       		.uleb128 0x5
 11884 0135 410F0000 		.4byte	.LASF28
 11885 0139 04       		.byte	0x4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 267


 11886 013a 9302     		.2byte	0x293
 11887 013c 40010000 		.4byte	0x140
 11888 0140 06       		.uleb128 0x6
 11889 0141 EF000000 		.4byte	0xef
 11890 0145 03       		.uleb128 0x3
 11891 0146 08       		.byte	0x8
 11892 0147 04       		.byte	0x4
 11893 0148 F50D0000 		.4byte	.LASF29
 11894 014c 03       		.uleb128 0x3
 11895 014d 04       		.byte	0x4
 11896 014e 07       		.byte	0x7
 11897 014f 31000000 		.4byte	.LASF30
 11898 0153 07       		.uleb128 0x7
 11899 0154 04       		.byte	0x4
 11900 0155 59010000 		.4byte	0x159
 11901 0159 08       		.uleb128 0x8
 11902 015a 21010000 		.4byte	0x121
 11903 015e 09       		.uleb128 0x9
 11904 015f EF000000 		.4byte	0xef
 11905 0163 6E010000 		.4byte	0x16e
 11906 0167 0A       		.uleb128 0xa
 11907 0168 4C010000 		.4byte	0x14c
 11908 016c 03       		.byte	0x3
 11909 016d 00       		.byte	0
 11910 016e 0B       		.uleb128 0xb
 11911 016f 1C       		.byte	0x1c
 11912 0170 05       		.byte	0x5
 11913 0171 1601     		.2byte	0x116
 11914 0173 E0010000 		.4byte	0x1e0
 11915 0177 0C       		.uleb128 0xc
 11916 0178 44040000 		.4byte	.LASF31
 11917 017c 05       		.byte	0x5
 11918 017d 1B01     		.2byte	0x11b
 11919 017f 07010000 		.4byte	0x107
 11920 0183 00       		.byte	0
 11921 0184 0C       		.uleb128 0xc
 11922 0185 43020000 		.4byte	.LASF32
 11923 0189 05       		.byte	0x5
 11924 018a 2001     		.2byte	0x120
 11925 018c 07010000 		.4byte	0x107
 11926 0190 04       		.byte	0x4
 11927 0191 0C       		.uleb128 0xc
 11928 0192 0E140000 		.4byte	.LASF33
 11929 0196 05       		.byte	0x5
 11930 0197 2301     		.2byte	0x123
 11931 0199 07010000 		.4byte	0x107
 11932 019d 08       		.byte	0x8
 11933 019e 0C       		.uleb128 0xc
 11934 019f 7E110000 		.4byte	.LASF34
 11935 01a3 05       		.byte	0x5
 11936 01a4 2601     		.2byte	0x126
 11937 01a6 07010000 		.4byte	0x107
 11938 01aa 0C       		.byte	0xc
 11939 01ab 0C       		.uleb128 0xc
 11940 01ac E0110000 		.4byte	.LASF35
 11941 01b0 05       		.byte	0x5
 11942 01b1 2B01     		.2byte	0x12b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 268


 11943 01b3 07010000 		.4byte	0x107
 11944 01b7 10       		.byte	0x10
 11945 01b8 0C       		.uleb128 0xc
 11946 01b9 6F020000 		.4byte	.LASF36
 11947 01bd 05       		.byte	0x5
 11948 01be 2E01     		.2byte	0x12e
 11949 01c0 EF000000 		.4byte	0xef
 11950 01c4 14       		.byte	0x14
 11951 01c5 0C       		.uleb128 0xc
 11952 01c6 D10B0000 		.4byte	.LASF37
 11953 01ca 05       		.byte	0x5
 11954 01cb 3301     		.2byte	0x133
 11955 01cd EF000000 		.4byte	0xef
 11956 01d1 15       		.byte	0x15
 11957 01d2 0C       		.uleb128 0xc
 11958 01d3 18020000 		.4byte	.LASF38
 11959 01d7 05       		.byte	0x5
 11960 01d8 3601     		.2byte	0x136
 11961 01da 07010000 		.4byte	0x107
 11962 01de 18       		.byte	0x18
 11963 01df 00       		.byte	0
 11964 01e0 05       		.uleb128 0x5
 11965 01e1 02090000 		.4byte	.LASF39
 11966 01e5 05       		.byte	0x5
 11967 01e6 3701     		.2byte	0x137
 11968 01e8 6E010000 		.4byte	0x16e
 11969 01ec 0D       		.uleb128 0xd
 11970 01ed 01       		.byte	0x1
 11971 01ee 42000000 		.4byte	0x42
 11972 01f2 05       		.byte	0x5
 11973 01f3 5401     		.2byte	0x154
 11974 01f5 18020000 		.4byte	0x218
 11975 01f9 0E       		.uleb128 0xe
 11976 01fa 95000000 		.4byte	.LASF40
 11977 01fe 00       		.byte	0
 11978 01ff 0E       		.uleb128 0xe
 11979 0200 52070000 		.4byte	.LASF41
 11980 0204 01       		.byte	0x1
 11981 0205 0E       		.uleb128 0xe
 11982 0206 FE010000 		.4byte	.LASF42
 11983 020a 02       		.byte	0x2
 11984 020b 0E       		.uleb128 0xe
 11985 020c 88040000 		.4byte	.LASF43
 11986 0210 03       		.byte	0x3
 11987 0211 0E       		.uleb128 0xe
 11988 0212 F5090000 		.4byte	.LASF44
 11989 0216 04       		.byte	0x4
 11990 0217 00       		.byte	0
 11991 0218 05       		.uleb128 0x5
 11992 0219 86010000 		.4byte	.LASF45
 11993 021d 05       		.byte	0x5
 11994 021e 5A01     		.2byte	0x15a
 11995 0220 EC010000 		.4byte	0x1ec
 11996 0224 06       		.uleb128 0x6
 11997 0225 B8000000 		.4byte	0xb8
 11998 0229 06       		.uleb128 0x6
 11999 022a CE000000 		.4byte	0xce
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 269


 12000 022e 02       		.uleb128 0x2
 12001 022f 8E060000 		.4byte	.LASF46
 12002 0233 06       		.byte	0x6
 12003 0234 6C       		.byte	0x6c
 12004 0235 A6000000 		.4byte	0xa6
 12005 0239 0F       		.uleb128 0xf
 12006 023a AC040000 		.4byte	.LASF52
 12007 023e 01       		.byte	0x1
 12008 023f 42000000 		.4byte	0x42
 12009 0243 07       		.byte	0x7
 12010 0244 1D       		.byte	0x1d
 12011 0245 68020000 		.4byte	0x268
 12012 0249 0E       		.uleb128 0xe
 12013 024a 130B0000 		.4byte	.LASF47
 12014 024e 00       		.byte	0
 12015 024f 0E       		.uleb128 0xe
 12016 0250 A5030000 		.4byte	.LASF48
 12017 0254 01       		.byte	0x1
 12018 0255 0E       		.uleb128 0xe
 12019 0256 D5000000 		.4byte	.LASF49
 12020 025a 02       		.byte	0x2
 12021 025b 0E       		.uleb128 0xe
 12022 025c AD070000 		.4byte	.LASF50
 12023 0260 03       		.byte	0x3
 12024 0261 0E       		.uleb128 0xe
 12025 0262 7E010000 		.4byte	.LASF51
 12026 0266 04       		.byte	0x4
 12027 0267 00       		.byte	0
 12028 0268 0F       		.uleb128 0xf
 12029 0269 C6030000 		.4byte	.LASF53
 12030 026d 01       		.byte	0x1
 12031 026e 42000000 		.4byte	0x42
 12032 0272 01       		.byte	0x1
 12033 0273 4F       		.byte	0x4f
 12034 0274 9D020000 		.4byte	0x29d
 12035 0278 0E       		.uleb128 0xe
 12036 0279 88070000 		.4byte	.LASF54
 12037 027d 00       		.byte	0
 12038 027e 0E       		.uleb128 0xe
 12039 027f AF050000 		.4byte	.LASF55
 12040 0283 01       		.byte	0x1
 12041 0284 0E       		.uleb128 0xe
 12042 0285 C70F0000 		.4byte	.LASF56
 12043 0289 02       		.byte	0x2
 12044 028a 0E       		.uleb128 0xe
 12045 028b 5C0F0000 		.4byte	.LASF57
 12046 028f 03       		.byte	0x3
 12047 0290 0E       		.uleb128 0xe
 12048 0291 8C130000 		.4byte	.LASF58
 12049 0295 04       		.byte	0x4
 12050 0296 0E       		.uleb128 0xe
 12051 0297 8D020000 		.4byte	.LASF59
 12052 029b 05       		.byte	0x5
 12053 029c 00       		.byte	0
 12054 029d 10       		.uleb128 0x10
 12055 029e E80E0000 		.4byte	.LASF377
 12056 02a2 04       		.byte	0x4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 270


 12057 02a3 01       		.byte	0x1
 12058 02a4 E0       		.byte	0xe0
 12059 02a5 C7020000 		.4byte	0x2c7
 12060 02a9 11       		.uleb128 0x11
 12061 02aa 6600     		.ascii	"f\000"
 12062 02ac 01       		.byte	0x1
 12063 02ad E1       		.byte	0xe1
 12064 02ae 13010000 		.4byte	0x113
 12065 02b2 11       		.uleb128 0x11
 12066 02b3 6200     		.ascii	"b\000"
 12067 02b5 01       		.byte	0x1
 12068 02b6 E2       		.byte	0xe2
 12069 02b7 C7020000 		.4byte	0x2c7
 12070 02bb 11       		.uleb128 0x11
 12071 02bc 75333200 		.ascii	"u32\000"
 12072 02c0 01       		.byte	0x1
 12073 02c1 E3       		.byte	0xe3
 12074 02c2 E4000000 		.4byte	0xe4
 12075 02c6 00       		.byte	0
 12076 02c7 09       		.uleb128 0x9
 12077 02c8 B8000000 		.4byte	0xb8
 12078 02cc D7020000 		.4byte	0x2d7
 12079 02d0 0A       		.uleb128 0xa
 12080 02d1 4C010000 		.4byte	0x14c
 12081 02d5 03       		.byte	0x3
 12082 02d6 00       		.byte	0
 12083 02d7 12       		.uleb128 0x12
 12084 02d8 AD010000 		.4byte	.LASF60
 12085 02dc 01       		.byte	0x1
 12086 02dd 42000000 		.4byte	0x42
 12087 02e1 01       		.byte	0x1
 12088 02e2 180A     		.2byte	0xa18
 12089 02e4 06030000 		.4byte	0x306
 12090 02e8 0E       		.uleb128 0xe
 12091 02e9 4E040000 		.4byte	.LASF61
 12092 02ed 00       		.byte	0
 12093 02ee 0E       		.uleb128 0xe
 12094 02ef AF020000 		.4byte	.LASF62
 12095 02f3 01       		.byte	0x1
 12096 02f4 0E       		.uleb128 0xe
 12097 02f5 750F0000 		.4byte	.LASF63
 12098 02f9 02       		.byte	0x2
 12099 02fa 13       		.uleb128 0x13
 12100 02fb 557000   		.ascii	"Up\000"
 12101 02fe 03       		.byte	0x3
 12102 02ff 0E       		.uleb128 0xe
 12103 0300 DE030000 		.4byte	.LASF64
 12104 0304 04       		.byte	0x4
 12105 0305 00       		.byte	0
 12106 0306 14       		.uleb128 0x14
 12107 0307 7E040000 		.4byte	.LASF121
 12108 030b 01       		.byte	0x1
 12109 030c E7       		.byte	0xe7
 12110 030d 00000000 		.4byte	.LFB64
 12111 0311 74010000 		.4byte	.LFE64-.LFB64
 12112 0315 01       		.uleb128 0x1
 12113 0316 9C       		.byte	0x9c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 271


 12114 0317 32030000 		.4byte	0x332
 12115 031b 15       		.uleb128 0x15
 12116 031c 66000000 		.4byte	.LBB2
 12117 0320 7A000000 		.4byte	.LBE2-.LBB2
 12118 0324 16       		.uleb128 0x16
 12119 0325 6900     		.ascii	"i\000"
 12120 0327 01       		.byte	0x1
 12121 0328 ED       		.byte	0xed
 12122 0329 9F000000 		.4byte	0x9f
 12123 032d 02       		.uleb128 0x2
 12124 032e 91       		.byte	0x91
 12125 032f 6C       		.sleb128 -20
 12126 0330 00       		.byte	0
 12127 0331 00       		.byte	0
 12128 0332 17       		.uleb128 0x17
 12129 0333 FD0E0000 		.4byte	.LASF65
 12130 0337 01       		.byte	0x1
 12131 0338 1501     		.2byte	0x115
 12132 033a 00000000 		.4byte	.LFB65
 12133 033e 9C000000 		.4byte	.LFE65-.LFB65
 12134 0342 01       		.uleb128 0x1
 12135 0343 9C       		.byte	0x9c
 12136 0344 17       		.uleb128 0x17
 12137 0345 100D0000 		.4byte	.LASF66
 12138 0349 01       		.byte	0x1
 12139 034a 3E01     		.2byte	0x13e
 12140 034c 00000000 		.4byte	.LFB66
 12141 0350 14000000 		.4byte	.LFE66-.LFB66
 12142 0354 01       		.uleb128 0x1
 12143 0355 9C       		.byte	0x9c
 12144 0356 17       		.uleb128 0x17
 12145 0357 280B0000 		.4byte	.LASF67
 12146 035b 01       		.byte	0x1
 12147 035c 4901     		.2byte	0x149
 12148 035e 00000000 		.4byte	.LFB67
 12149 0362 7C000000 		.4byte	.LFE67-.LFB67
 12150 0366 01       		.uleb128 0x1
 12151 0367 9C       		.byte	0x9c
 12152 0368 18       		.uleb128 0x18
 12153 0369 F0050000 		.4byte	.LASF70
 12154 036d 01       		.byte	0x1
 12155 036e 6501     		.2byte	0x165
 12156 0370 13010000 		.4byte	0x113
 12157 0374 00000000 		.4byte	.LFB68
 12158 0378 58000000 		.4byte	.LFE68-.LFB68
 12159 037c 01       		.uleb128 0x1
 12160 037d 9C       		.byte	0x9c
 12161 037e CE030000 		.4byte	0x3ce
 12162 0382 19       		.uleb128 0x19
 12163 0383 6D696E00 		.ascii	"min\000"
 12164 0387 01       		.byte	0x1
 12165 0388 6501     		.2byte	0x165
 12166 038a 13010000 		.4byte	0x113
 12167 038e 02       		.uleb128 0x2
 12168 038f 91       		.byte	0x91
 12169 0390 6C       		.sleb128 -20
 12170 0391 19       		.uleb128 0x19
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 272


 12171 0392 76616C00 		.ascii	"val\000"
 12172 0396 01       		.byte	0x1
 12173 0397 6501     		.2byte	0x165
 12174 0399 13010000 		.4byte	0x113
 12175 039d 02       		.uleb128 0x2
 12176 039e 91       		.byte	0x91
 12177 039f 68       		.sleb128 -24
 12178 03a0 19       		.uleb128 0x19
 12179 03a1 6D617800 		.ascii	"max\000"
 12180 03a5 01       		.byte	0x1
 12181 03a6 6501     		.2byte	0x165
 12182 03a8 13010000 		.4byte	0x113
 12183 03ac 02       		.uleb128 0x2
 12184 03ad 91       		.byte	0x91
 12185 03ae 64       		.sleb128 -28
 12186 03af 1A       		.uleb128 0x1a
 12187 03b0 C90B0000 		.4byte	.LASF68
 12188 03b4 01       		.byte	0x1
 12189 03b5 6701     		.2byte	0x167
 12190 03b7 13010000 		.4byte	0x113
 12191 03bb 02       		.uleb128 0x2
 12192 03bc 91       		.byte	0x91
 12193 03bd 74       		.sleb128 -12
 12194 03be 1A       		.uleb128 0x1a
 12195 03bf 5F050000 		.4byte	.LASF69
 12196 03c3 01       		.byte	0x1
 12197 03c4 6801     		.2byte	0x168
 12198 03c6 13010000 		.4byte	0x113
 12199 03ca 02       		.uleb128 0x2
 12200 03cb 91       		.byte	0x91
 12201 03cc 70       		.sleb128 -16
 12202 03cd 00       		.byte	0
 12203 03ce 18       		.uleb128 0x18
 12204 03cf D6130000 		.4byte	.LASF71
 12205 03d3 01       		.byte	0x1
 12206 03d4 7B01     		.2byte	0x17b
 12207 03d6 13010000 		.4byte	0x113
 12208 03da 00000000 		.4byte	.LFB69
 12209 03de 68000000 		.4byte	.LFE69-.LFB69
 12210 03e2 01       		.uleb128 0x1
 12211 03e3 9C       		.byte	0x9c
 12212 03e4 F6030000 		.4byte	0x3f6
 12213 03e8 19       		.uleb128 0x19
 12214 03e9 6600     		.ascii	"f\000"
 12215 03eb 01       		.byte	0x1
 12216 03ec 7B01     		.2byte	0x17b
 12217 03ee 13010000 		.4byte	0x113
 12218 03f2 02       		.uleb128 0x2
 12219 03f3 91       		.byte	0x91
 12220 03f4 74       		.sleb128 -12
 12221 03f5 00       		.byte	0
 12222 03f6 18       		.uleb128 0x18
 12223 03f7 420E0000 		.4byte	.LASF72
 12224 03fb 01       		.byte	0x1
 12225 03fc 8201     		.2byte	0x182
 12226 03fe 13010000 		.4byte	0x113
 12227 0402 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 273


 12228 0406 4C000000 		.4byte	.LFE70-.LFB70
 12229 040a 01       		.uleb128 0x1
 12230 040b 9C       		.byte	0x9c
 12231 040c 1E040000 		.4byte	0x41e
 12232 0410 19       		.uleb128 0x19
 12233 0411 6600     		.ascii	"f\000"
 12234 0413 01       		.byte	0x1
 12235 0414 8201     		.2byte	0x182
 12236 0416 13010000 		.4byte	0x113
 12237 041a 02       		.uleb128 0x2
 12238 041b 91       		.byte	0x91
 12239 041c 74       		.sleb128 -12
 12240 041d 00       		.byte	0
 12241 041e 18       		.uleb128 0x18
 12242 041f DE080000 		.4byte	.LASF73
 12243 0423 01       		.byte	0x1
 12244 0424 8801     		.2byte	0x188
 12245 0426 13010000 		.4byte	0x113
 12246 042a 00000000 		.4byte	.LFB71
 12247 042e 46000000 		.4byte	.LFE71-.LFB71
 12248 0432 01       		.uleb128 0x1
 12249 0433 9C       		.byte	0x9c
 12250 0434 80040000 		.4byte	0x480
 12251 0438 19       		.uleb128 0x19
 12252 0439 4100     		.ascii	"A\000"
 12253 043b 01       		.byte	0x1
 12254 043c 8801     		.2byte	0x188
 12255 043e 13010000 		.4byte	0x113
 12256 0442 02       		.uleb128 0x2
 12257 0443 91       		.byte	0x91
 12258 0444 6C       		.sleb128 -20
 12259 0445 19       		.uleb128 0x19
 12260 0446 4200     		.ascii	"B\000"
 12261 0448 01       		.byte	0x1
 12262 0449 8801     		.2byte	0x188
 12263 044b 13010000 		.4byte	0x113
 12264 044f 02       		.uleb128 0x2
 12265 0450 91       		.byte	0x91
 12266 0451 68       		.sleb128 -24
 12267 0452 1B       		.uleb128 0x1b
 12268 0453 87020000 		.4byte	.LASF74
 12269 0457 01       		.byte	0x1
 12270 0458 8801     		.2byte	0x188
 12271 045a 13010000 		.4byte	0x113
 12272 045e 02       		.uleb128 0x2
 12273 045f 91       		.byte	0x91
 12274 0460 64       		.sleb128 -28
 12275 0461 1A       		.uleb128 0x1a
 12276 0462 05040000 		.4byte	.LASF75
 12277 0466 01       		.byte	0x1
 12278 0467 8A01     		.2byte	0x18a
 12279 0469 13010000 		.4byte	0x113
 12280 046d 02       		.uleb128 0x2
 12281 046e 91       		.byte	0x91
 12282 046f 74       		.sleb128 -12
 12283 0470 1C       		.uleb128 0x1c
 12284 0471 6F757400 		.ascii	"out\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 274


 12285 0475 01       		.byte	0x1
 12286 0476 8D01     		.2byte	0x18d
 12287 0478 13010000 		.4byte	0x113
 12288 047c 02       		.uleb128 0x2
 12289 047d 91       		.byte	0x91
 12290 047e 70       		.sleb128 -16
 12291 047f 00       		.byte	0
 12292 0480 1D       		.uleb128 0x1d
 12293 0481 6D617000 		.ascii	"map\000"
 12294 0485 01       		.byte	0x1
 12295 0486 F801     		.2byte	0x1f8
 12296 0488 13010000 		.4byte	0x113
 12297 048c 00000000 		.4byte	.LFB72
 12298 0490 56000000 		.4byte	.LFE72-.LFB72
 12299 0494 01       		.uleb128 0x1
 12300 0495 9C       		.byte	0x9c
 12301 0496 E6040000 		.4byte	0x4e6
 12302 049a 1B       		.uleb128 0x1b
 12303 049b 75050000 		.4byte	.LASF76
 12304 049f 01       		.byte	0x1
 12305 04a0 F801     		.2byte	0x1f8
 12306 04a2 13010000 		.4byte	0x113
 12307 04a6 02       		.uleb128 0x2
 12308 04a7 91       		.byte	0x91
 12309 04a8 6C       		.sleb128 -20
 12310 04a9 1B       		.uleb128 0x1b
 12311 04aa 57020000 		.4byte	.LASF77
 12312 04ae 01       		.byte	0x1
 12313 04af F801     		.2byte	0x1f8
 12314 04b1 13010000 		.4byte	0x113
 12315 04b5 02       		.uleb128 0x2
 12316 04b6 91       		.byte	0x91
 12317 04b7 68       		.sleb128 -24
 12318 04b8 1B       		.uleb128 0x1b
 12319 04b9 3E0A0000 		.4byte	.LASF78
 12320 04bd 01       		.byte	0x1
 12321 04be F801     		.2byte	0x1f8
 12322 04c0 13010000 		.4byte	0x113
 12323 04c4 02       		.uleb128 0x2
 12324 04c5 91       		.byte	0x91
 12325 04c6 64       		.sleb128 -28
 12326 04c7 1B       		.uleb128 0x1b
 12327 04c8 0D0A0000 		.4byte	.LASF79
 12328 04cc 01       		.byte	0x1
 12329 04cd F801     		.2byte	0x1f8
 12330 04cf 13010000 		.4byte	0x113
 12331 04d3 02       		.uleb128 0x2
 12332 04d4 91       		.byte	0x91
 12333 04d5 60       		.sleb128 -32
 12334 04d6 1B       		.uleb128 0x1b
 12335 04d7 530C0000 		.4byte	.LASF80
 12336 04db 01       		.byte	0x1
 12337 04dc F801     		.2byte	0x1f8
 12338 04de 13010000 		.4byte	0x113
 12339 04e2 02       		.uleb128 0x2
 12340 04e3 91       		.byte	0x91
 12341 04e4 00       		.sleb128 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 275


 12342 04e5 00       		.byte	0
 12343 04e6 1E       		.uleb128 0x1e
 12344 04e7 A0060000 		.4byte	.LASF161
 12345 04eb 01       		.byte	0x1
 12346 04ec 0502     		.2byte	0x205
 12347 04ee 00000000 		.4byte	.LFB73
 12348 04f2 0C000000 		.4byte	.LFE73-.LFB73
 12349 04f6 01       		.uleb128 0x1
 12350 04f7 9C       		.byte	0x9c
 12351 04f8 1F       		.uleb128 0x1f
 12352 04f9 3F130000 		.4byte	.LASF115
 12353 04fd 01       		.byte	0x1
 12354 04fe 0F02     		.2byte	0x20f
 12355 0500 00000000 		.4byte	.LFB74
 12356 0504 08010000 		.4byte	.LFE74-.LFB74
 12357 0508 01       		.uleb128 0x1
 12358 0509 9C       		.byte	0x9c
 12359 050a 3F050000 		.4byte	0x53f
 12360 050e 15       		.uleb128 0x15
 12361 050f 06000000 		.4byte	.LBB3
 12362 0513 DC000000 		.4byte	.LBE3-.LBB3
 12363 0517 1C       		.uleb128 0x1c
 12364 0518 6900     		.ascii	"i\000"
 12365 051a 01       		.byte	0x1
 12366 051b 1302     		.2byte	0x213
 12367 051d 9F000000 		.4byte	0x9f
 12368 0521 02       		.uleb128 0x2
 12369 0522 91       		.byte	0x91
 12370 0523 6C       		.sleb128 -20
 12371 0524 15       		.uleb128 0x15
 12372 0525 0C000000 		.4byte	.LBB4
 12373 0529 CA000000 		.4byte	.LBE4-.LBB4
 12374 052d 1A       		.uleb128 0x1a
 12375 052e 5E020000 		.4byte	.LASF81
 12376 0532 01       		.byte	0x1
 12377 0533 1602     		.2byte	0x216
 12378 0535 13010000 		.4byte	0x113
 12379 0539 02       		.uleb128 0x2
 12380 053a 91       		.byte	0x91
 12381 053b 68       		.sleb128 -24
 12382 053c 00       		.byte	0
 12383 053d 00       		.byte	0
 12384 053e 00       		.byte	0
 12385 053f 18       		.uleb128 0x18
 12386 0540 66030000 		.4byte	.LASF82
 12387 0544 01       		.byte	0x1
 12388 0545 1D02     		.2byte	0x21d
 12389 0547 9F000000 		.4byte	0x9f
 12390 054b 00000000 		.4byte	.LFB75
 12391 054f 981C0000 		.4byte	.LFE75-.LFB75
 12392 0553 01       		.uleb128 0x1
 12393 0554 9C       		.byte	0x9c
 12394 0555 BA090000 		.4byte	0x9ba
 12395 0559 1A       		.uleb128 0x1a
 12396 055a 1C140000 		.4byte	.LASF83
 12397 055e 01       		.byte	0x1
 12398 055f 2D02     		.2byte	0x22d
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 276


 12399 0561 B8000000 		.4byte	0xb8
 12400 0565 03       		.uleb128 0x3
 12401 0566 91       		.byte	0x91
 12402 0567 FF7E     		.sleb128 -129
 12403 0569 1A       		.uleb128 0x1a
 12404 056a 440A0000 		.4byte	.LASF84
 12405 056e 01       		.byte	0x1
 12406 056f 4802     		.2byte	0x248
 12407 0571 CE000000 		.4byte	0xce
 12408 0575 03       		.uleb128 0x3
 12409 0576 91       		.byte	0x91
 12410 0577 FC7E     		.sleb128 -132
 12411 0579 20       		.uleb128 0x20
 12412 057a 66010000 		.4byte	.LBB5
 12413 057e 3C000000 		.4byte	.LBE5-.LBB5
 12414 0582 94050000 		.4byte	0x594
 12415 0586 1C       		.uleb128 0x1c
 12416 0587 6900     		.ascii	"i\000"
 12417 0589 01       		.byte	0x1
 12418 058a 4902     		.2byte	0x249
 12419 058c 9F000000 		.4byte	0x9f
 12420 0590 02       		.uleb128 0x2
 12421 0591 91       		.byte	0x91
 12422 0592 6C       		.sleb128 -20
 12423 0593 00       		.byte	0
 12424 0594 20       		.uleb128 0x20
 12425 0595 A2010000 		.4byte	.LBB6
 12426 0599 86010000 		.4byte	.LBE6-.LBB6
 12427 059d 50060000 		.4byte	0x650
 12428 05a1 1A       		.uleb128 0x1a
 12429 05a2 FB040000 		.4byte	.LASF85
 12430 05a6 01       		.byte	0x1
 12431 05a7 4D02     		.2byte	0x24d
 12432 05a9 9F000000 		.4byte	0x9f
 12433 05ad 02       		.uleb128 0x2
 12434 05ae 91       		.byte	0x91
 12435 05af 68       		.sleb128 -24
 12436 05b0 20       		.uleb128 0x20
 12437 05b1 AA010000 		.4byte	.LBB7
 12438 05b5 60000000 		.4byte	.LBE7-.LBB7
 12439 05b9 CD050000 		.4byte	0x5cd
 12440 05bd 1A       		.uleb128 0x1a
 12441 05be 33120000 		.4byte	.LASF86
 12442 05c2 01       		.byte	0x1
 12443 05c3 4F02     		.2byte	0x24f
 12444 05c5 9F000000 		.4byte	0x9f
 12445 05c9 02       		.uleb128 0x2
 12446 05ca 91       		.byte	0x91
 12447 05cb 64       		.sleb128 -28
 12448 05cc 00       		.byte	0
 12449 05cd 15       		.uleb128 0x15
 12450 05ce 0A020000 		.4byte	.LBB8
 12451 05d2 0A010000 		.4byte	.LBE8-.LBB8
 12452 05d6 1C       		.uleb128 0x1c
 12453 05d7 6900     		.ascii	"i\000"
 12454 05d9 01       		.byte	0x1
 12455 05da 5302     		.2byte	0x253
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 277


 12456 05dc 9F000000 		.4byte	0x9f
 12457 05e0 02       		.uleb128 0x2
 12458 05e1 91       		.byte	0x91
 12459 05e2 60       		.sleb128 -32
 12460 05e3 15       		.uleb128 0x15
 12461 05e4 12020000 		.4byte	.LBB9
 12462 05e8 EE000000 		.4byte	.LBE9-.LBB9
 12463 05ec 1A       		.uleb128 0x1a
 12464 05ed 0C050000 		.4byte	.LASF87
 12465 05f1 01       		.byte	0x1
 12466 05f2 5502     		.2byte	0x255
 12467 05f4 9F000000 		.4byte	0x9f
 12468 05f8 03       		.uleb128 0x3
 12469 05f9 91       		.byte	0x91
 12470 05fa F87E     		.sleb128 -136
 12471 05fc 15       		.uleb128 0x15
 12472 05fd 20020000 		.4byte	.LBB10
 12473 0601 E0000000 		.4byte	.LBE10-.LBB10
 12474 0605 1C       		.uleb128 0x1c
 12475 0606 6A00     		.ascii	"j\000"
 12476 0608 01       		.byte	0x1
 12477 0609 5602     		.2byte	0x256
 12478 060b 9F000000 		.4byte	0x9f
 12479 060f 02       		.uleb128 0x2
 12480 0610 91       		.byte	0x91
 12481 0611 5C       		.sleb128 -36
 12482 0612 15       		.uleb128 0x15
 12483 0613 28020000 		.4byte	.LBB11
 12484 0617 C6000000 		.4byte	.LBE11-.LBB11
 12485 061b 1A       		.uleb128 0x1a
 12486 061c 0D040000 		.4byte	.LASF88
 12487 0620 01       		.byte	0x1
 12488 0621 5902     		.2byte	0x259
 12489 0623 9F000000 		.4byte	0x9f
 12490 0627 03       		.uleb128 0x3
 12491 0628 91       		.byte	0x91
 12492 0629 F47E     		.sleb128 -140
 12493 062b 1A       		.uleb128 0x1a
 12494 062c FB130000 		.4byte	.LASF89
 12495 0630 01       		.byte	0x1
 12496 0631 5A02     		.2byte	0x25a
 12497 0633 CE000000 		.4byte	0xce
 12498 0637 03       		.uleb128 0x3
 12499 0638 91       		.byte	0x91
 12500 0639 F27E     		.sleb128 -142
 12501 063b 1A       		.uleb128 0x1a
 12502 063c BE0B0000 		.4byte	.LASF90
 12503 0640 01       		.byte	0x1
 12504 0641 5B02     		.2byte	0x25b
 12505 0643 CE000000 		.4byte	0xce
 12506 0647 03       		.uleb128 0x3
 12507 0648 91       		.byte	0x91
 12508 0649 F07E     		.sleb128 -144
 12509 064b 00       		.byte	0
 12510 064c 00       		.byte	0
 12511 064d 00       		.byte	0
 12512 064e 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 278


 12513 064f 00       		.byte	0
 12514 0650 20       		.uleb128 0x20
 12515 0651 28030000 		.4byte	.LBB12
 12516 0655 F4000000 		.4byte	.LBE12-.LBB12
 12517 0659 6B060000 		.4byte	0x66b
 12518 065d 1C       		.uleb128 0x1c
 12519 065e 6900     		.ascii	"i\000"
 12520 0660 01       		.byte	0x1
 12521 0661 6202     		.2byte	0x262
 12522 0663 9F000000 		.4byte	0x9f
 12523 0667 02       		.uleb128 0x2
 12524 0668 91       		.byte	0x91
 12525 0669 58       		.sleb128 -40
 12526 066a 00       		.byte	0
 12527 066b 20       		.uleb128 0x20
 12528 066c 20040000 		.4byte	.LBB13
 12529 0670 A6000000 		.4byte	.LBE13-.LBB13
 12530 0674 86060000 		.4byte	0x686
 12531 0678 1C       		.uleb128 0x1c
 12532 0679 6900     		.ascii	"i\000"
 12533 067b 01       		.byte	0x1
 12534 067c 6A02     		.2byte	0x26a
 12535 067e 9F000000 		.4byte	0x9f
 12536 0682 02       		.uleb128 0x2
 12537 0683 91       		.byte	0x91
 12538 0684 54       		.sleb128 -44
 12539 0685 00       		.byte	0
 12540 0686 20       		.uleb128 0x20
 12541 0687 C6040000 		.4byte	.LBB14
 12542 068b AE000000 		.4byte	.LBE14-.LBB14
 12543 068f EA060000 		.4byte	0x6ea
 12544 0693 1C       		.uleb128 0x1c
 12545 0694 6900     		.ascii	"i\000"
 12546 0696 01       		.byte	0x1
 12547 0697 7002     		.2byte	0x270
 12548 0699 9F000000 		.4byte	0x9f
 12549 069d 02       		.uleb128 0x2
 12550 069e 91       		.byte	0x91
 12551 069f 50       		.sleb128 -48
 12552 06a0 20       		.uleb128 0x20
 12553 06a1 CE040000 		.4byte	.LBB15
 12554 06a5 34000000 		.4byte	.LBE15-.LBB15
 12555 06a9 BB060000 		.4byte	0x6bb
 12556 06ad 1C       		.uleb128 0x1c
 12557 06ae 6A00     		.ascii	"j\000"
 12558 06b0 01       		.byte	0x1
 12559 06b1 7202     		.2byte	0x272
 12560 06b3 9F000000 		.4byte	0x9f
 12561 06b7 02       		.uleb128 0x2
 12562 06b8 91       		.byte	0x91
 12563 06b9 4C       		.sleb128 -52
 12564 06ba 00       		.byte	0
 12565 06bb 15       		.uleb128 0x15
 12566 06bc 02050000 		.4byte	.LBB16
 12567 06c0 54000000 		.4byte	.LBE16-.LBB16
 12568 06c4 1C       		.uleb128 0x1c
 12569 06c5 6A00     		.ascii	"j\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 279


 12570 06c7 01       		.byte	0x1
 12571 06c8 7702     		.2byte	0x277
 12572 06ca 9F000000 		.4byte	0x9f
 12573 06ce 02       		.uleb128 0x2
 12574 06cf 91       		.byte	0x91
 12575 06d0 48       		.sleb128 -56
 12576 06d1 15       		.uleb128 0x15
 12577 06d2 0A050000 		.4byte	.LBB17
 12578 06d6 3A000000 		.4byte	.LBE17-.LBB17
 12579 06da 1C       		.uleb128 0x1c
 12580 06db 6B00     		.ascii	"k\000"
 12581 06dd 01       		.byte	0x1
 12582 06de 7902     		.2byte	0x279
 12583 06e0 9F000000 		.4byte	0x9f
 12584 06e4 02       		.uleb128 0x2
 12585 06e5 91       		.byte	0x91
 12586 06e6 44       		.sleb128 -60
 12587 06e7 00       		.byte	0
 12588 06e8 00       		.byte	0
 12589 06e9 00       		.byte	0
 12590 06ea 20       		.uleb128 0x20
 12591 06eb 60060000 		.4byte	.LBB18
 12592 06ef 72000000 		.4byte	.LBE18-.LBB18
 12593 06f3 05070000 		.4byte	0x705
 12594 06f7 1C       		.uleb128 0x1c
 12595 06f8 7700     		.ascii	"w\000"
 12596 06fa 01       		.byte	0x1
 12597 06fb A702     		.2byte	0x2a7
 12598 06fd 9F000000 		.4byte	0x9f
 12599 0701 02       		.uleb128 0x2
 12600 0702 91       		.byte	0x91
 12601 0703 40       		.sleb128 -64
 12602 0704 00       		.byte	0
 12603 0705 20       		.uleb128 0x20
 12604 0706 64070000 		.4byte	.LBB19
 12605 070a 4E000000 		.4byte	.LBE19-.LBB19
 12606 070e 23070000 		.4byte	0x723
 12607 0712 1A       		.uleb128 0x1a
 12608 0713 6C090000 		.4byte	.LASF91
 12609 0717 01       		.byte	0x1
 12610 0718 6E03     		.2byte	0x36e
 12611 071a B8000000 		.4byte	0xb8
 12612 071e 03       		.uleb128 0x3
 12613 071f 91       		.byte	0x91
 12614 0720 EF7E     		.sleb128 -145
 12615 0722 00       		.byte	0
 12616 0723 20       		.uleb128 0x20
 12617 0724 E8090000 		.4byte	.LBB20
 12618 0728 A0000000 		.4byte	.LBE20-.LBB20
 12619 072c 59070000 		.4byte	0x759
 12620 0730 1C       		.uleb128 0x1c
 12621 0731 6900     		.ascii	"i\000"
 12622 0733 01       		.byte	0x1
 12623 0734 B903     		.2byte	0x3b9
 12624 0736 9F000000 		.4byte	0x9f
 12625 073a 03       		.uleb128 0x3
 12626 073b 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 280


 12627 073c BC7F     		.sleb128 -68
 12628 073e 15       		.uleb128 0x15
 12629 073f EE090000 		.4byte	.LBB21
 12630 0743 8E000000 		.4byte	.LBE21-.LBB21
 12631 0747 1A       		.uleb128 0x1a
 12632 0748 64090000 		.4byte	.LASF92
 12633 074c 01       		.byte	0x1
 12634 074d BB03     		.2byte	0x3bb
 12635 074f CE000000 		.4byte	0xce
 12636 0753 03       		.uleb128 0x3
 12637 0754 91       		.byte	0x91
 12638 0755 C87E     		.sleb128 -184
 12639 0757 00       		.byte	0
 12640 0758 00       		.byte	0
 12641 0759 20       		.uleb128 0x20
 12642 075a EE0B0000 		.4byte	.LBB22
 12643 075e C6010000 		.4byte	.LBE22-.LBB22
 12644 0762 77070000 		.4byte	0x777
 12645 0766 1A       		.uleb128 0x1a
 12646 0767 6E000000 		.4byte	.LASF93
 12647 076b 01       		.byte	0x1
 12648 076c 4504     		.2byte	0x445
 12649 076e C3000000 		.4byte	0xc3
 12650 0772 03       		.uleb128 0x3
 12651 0773 91       		.byte	0x91
 12652 0774 EC7E     		.sleb128 -148
 12653 0776 00       		.byte	0
 12654 0777 20       		.uleb128 0x20
 12655 0778 E40E0000 		.4byte	.LBB23
 12656 077c CE020000 		.4byte	.LBE23-.LBB23
 12657 0780 C9070000 		.4byte	0x7c9
 12658 0784 1C       		.uleb128 0x1c
 12659 0785 6900     		.ascii	"i\000"
 12660 0787 01       		.byte	0x1
 12661 0788 8C04     		.2byte	0x48c
 12662 078a 9F000000 		.4byte	0x9f
 12663 078e 03       		.uleb128 0x3
 12664 078f 91       		.byte	0x91
 12665 0790 B87F     		.sleb128 -72
 12666 0792 20       		.uleb128 0x20
 12667 0793 BC0F0000 		.4byte	.LBB24
 12668 0797 FC000000 		.4byte	.LBE24-.LBB24
 12669 079b AE070000 		.4byte	0x7ae
 12670 079f 1C       		.uleb128 0x1c
 12671 07a0 6A00     		.ascii	"j\000"
 12672 07a2 01       		.byte	0x1
 12673 07a3 9904     		.2byte	0x499
 12674 07a5 9F000000 		.4byte	0x9f
 12675 07a9 03       		.uleb128 0x3
 12676 07aa 91       		.byte	0x91
 12677 07ab B47F     		.sleb128 -76
 12678 07ad 00       		.byte	0
 12679 07ae 15       		.uleb128 0x15
 12680 07af 44110000 		.4byte	.LBB25
 12681 07b3 4E000000 		.4byte	.LBE25-.LBB25
 12682 07b7 1A       		.uleb128 0x1a
 12683 07b8 C70E0000 		.4byte	.LASF94
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 281


 12684 07bc 01       		.byte	0x1
 12685 07bd AA04     		.2byte	0x4aa
 12686 07bf C3000000 		.4byte	0xc3
 12687 07c3 03       		.uleb128 0x3
 12688 07c4 91       		.byte	0x91
 12689 07c5 B27F     		.sleb128 -78
 12690 07c7 00       		.byte	0
 12691 07c8 00       		.byte	0
 12692 07c9 20       		.uleb128 0x20
 12693 07ca B8110000 		.4byte	.LBB26
 12694 07ce 46000000 		.4byte	.LBE26-.LBB26
 12695 07d2 E5070000 		.4byte	0x7e5
 12696 07d6 1C       		.uleb128 0x1c
 12697 07d7 6900     		.ascii	"i\000"
 12698 07d9 01       		.byte	0x1
 12699 07da B804     		.2byte	0x4b8
 12700 07dc 9F000000 		.4byte	0x9f
 12701 07e0 03       		.uleb128 0x3
 12702 07e1 91       		.byte	0x91
 12703 07e2 AC7F     		.sleb128 -84
 12704 07e4 00       		.byte	0
 12705 07e5 20       		.uleb128 0x20
 12706 07e6 02120000 		.4byte	.LBB27
 12707 07ea 96000000 		.4byte	.LBE27-.LBB27
 12708 07ee 01080000 		.4byte	0x801
 12709 07f2 1C       		.uleb128 0x1c
 12710 07f3 6900     		.ascii	"i\000"
 12711 07f5 01       		.byte	0x1
 12712 07f6 C304     		.2byte	0x4c3
 12713 07f8 9F000000 		.4byte	0x9f
 12714 07fc 03       		.uleb128 0x3
 12715 07fd 91       		.byte	0x91
 12716 07fe A87F     		.sleb128 -88
 12717 0800 00       		.byte	0
 12718 0801 20       		.uleb128 0x20
 12719 0802 9E120000 		.4byte	.LBB28
 12720 0806 94030000 		.4byte	.LBE28-.LBB28
 12721 080a 87080000 		.4byte	0x887
 12722 080e 1C       		.uleb128 0x1c
 12723 080f 6900     		.ascii	"i\000"
 12724 0811 01       		.byte	0x1
 12725 0812 D404     		.2byte	0x4d4
 12726 0814 9F000000 		.4byte	0x9f
 12727 0818 03       		.uleb128 0x3
 12728 0819 91       		.byte	0x91
 12729 081a A47F     		.sleb128 -92
 12730 081c 15       		.uleb128 0x15
 12731 081d A4120000 		.4byte	.LBB29
 12732 0821 7C030000 		.4byte	.LBE29-.LBB29
 12733 0825 1A       		.uleb128 0x1a
 12734 0826 77100000 		.4byte	.LASF95
 12735 082a 01       		.byte	0x1
 12736 082b D804     		.2byte	0x4d8
 12737 082d 13010000 		.4byte	0x113
 12738 0831 03       		.uleb128 0x3
 12739 0832 91       		.byte	0x91
 12740 0833 A07F     		.sleb128 -96
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 282


 12741 0835 1A       		.uleb128 0x1a
 12742 0836 8D0D0000 		.4byte	.LASF96
 12743 083a 01       		.byte	0x1
 12744 083b E404     		.2byte	0x4e4
 12745 083d 13010000 		.4byte	0x113
 12746 0841 03       		.uleb128 0x3
 12747 0842 91       		.byte	0x91
 12748 0843 E87E     		.sleb128 -152
 12749 0845 1A       		.uleb128 0x1a
 12750 0846 5A110000 		.4byte	.LASF97
 12751 084a 01       		.byte	0x1
 12752 084b F104     		.2byte	0x4f1
 12753 084d 13010000 		.4byte	0x113
 12754 0851 03       		.uleb128 0x3
 12755 0852 91       		.byte	0x91
 12756 0853 E47E     		.sleb128 -156
 12757 0855 1A       		.uleb128 0x1a
 12758 0856 A40C0000 		.4byte	.LASF98
 12759 085a 01       		.byte	0x1
 12760 085b F404     		.2byte	0x4f4
 12761 085d 13010000 		.4byte	0x113
 12762 0861 03       		.uleb128 0x3
 12763 0862 91       		.byte	0x91
 12764 0863 E07E     		.sleb128 -160
 12765 0865 1A       		.uleb128 0x1a
 12766 0866 E3060000 		.4byte	.LASF99
 12767 086a 01       		.byte	0x1
 12768 086b F604     		.2byte	0x4f6
 12769 086d 13010000 		.4byte	0x113
 12770 0871 03       		.uleb128 0x3
 12771 0872 91       		.byte	0x91
 12772 0873 DC7E     		.sleb128 -164
 12773 0875 1A       		.uleb128 0x1a
 12774 0876 DD100000 		.4byte	.LASF100
 12775 087a 01       		.byte	0x1
 12776 087b F804     		.2byte	0x4f8
 12777 087d 13010000 		.4byte	0x113
 12778 0881 03       		.uleb128 0x3
 12779 0882 91       		.byte	0x91
 12780 0883 D87E     		.sleb128 -168
 12781 0885 00       		.byte	0
 12782 0886 00       		.byte	0
 12783 0887 20       		.uleb128 0x20
 12784 0888 02170000 		.4byte	.LBB30
 12785 088c 4E000000 		.4byte	.LBE30-.LBB30
 12786 0890 A3080000 		.4byte	0x8a3
 12787 0894 1C       		.uleb128 0x1c
 12788 0895 6900     		.ascii	"i\000"
 12789 0897 01       		.byte	0x1
 12790 0898 4C05     		.2byte	0x54c
 12791 089a 2E020000 		.4byte	0x22e
 12792 089e 03       		.uleb128 0x3
 12793 089f 91       		.byte	0x91
 12794 08a0 9C7F     		.sleb128 -100
 12795 08a2 00       		.byte	0
 12796 08a3 20       		.uleb128 0x20
 12797 08a4 04180000 		.4byte	.LBB31
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 283


 12798 08a8 22000000 		.4byte	.LBE31-.LBB31
 12799 08ac BF080000 		.4byte	0x8bf
 12800 08b0 1C       		.uleb128 0x1c
 12801 08b1 6900     		.ascii	"i\000"
 12802 08b3 01       		.byte	0x1
 12803 08b4 7B05     		.2byte	0x57b
 12804 08b6 9F000000 		.4byte	0x9f
 12805 08ba 03       		.uleb128 0x3
 12806 08bb 91       		.byte	0x91
 12807 08bc 987F     		.sleb128 -104
 12808 08be 00       		.byte	0
 12809 08bf 20       		.uleb128 0x20
 12810 08c0 26180000 		.4byte	.LBB32
 12811 08c4 22000000 		.4byte	.LBE32-.LBB32
 12812 08c8 DB080000 		.4byte	0x8db
 12813 08cc 1C       		.uleb128 0x1c
 12814 08cd 6900     		.ascii	"i\000"
 12815 08cf 01       		.byte	0x1
 12816 08d0 7F05     		.2byte	0x57f
 12817 08d2 9F000000 		.4byte	0x9f
 12818 08d6 03       		.uleb128 0x3
 12819 08d7 91       		.byte	0x91
 12820 08d8 947F     		.sleb128 -108
 12821 08da 00       		.byte	0
 12822 08db 20       		.uleb128 0x20
 12823 08dc 48180000 		.4byte	.LBB33
 12824 08e0 88000000 		.4byte	.LBE33-.LBB33
 12825 08e4 F7080000 		.4byte	0x8f7
 12826 08e8 1C       		.uleb128 0x1c
 12827 08e9 6900     		.ascii	"i\000"
 12828 08eb 01       		.byte	0x1
 12829 08ec 8305     		.2byte	0x583
 12830 08ee 9F000000 		.4byte	0x9f
 12831 08f2 03       		.uleb128 0x3
 12832 08f3 91       		.byte	0x91
 12833 08f4 907F     		.sleb128 -112
 12834 08f6 00       		.byte	0
 12835 08f7 20       		.uleb128 0x20
 12836 08f8 5A190000 		.4byte	.LBB34
 12837 08fc 56000000 		.4byte	.LBE34-.LBB34
 12838 0900 2D090000 		.4byte	0x92d
 12839 0904 1C       		.uleb128 0x1c
 12840 0905 6900     		.ascii	"i\000"
 12841 0907 01       		.byte	0x1
 12842 0908 9605     		.2byte	0x596
 12843 090a 9F000000 		.4byte	0x9f
 12844 090e 03       		.uleb128 0x3
 12845 090f 91       		.byte	0x91
 12846 0910 8C7F     		.sleb128 -116
 12847 0912 15       		.uleb128 0x15
 12848 0913 60190000 		.4byte	.LBB35
 12849 0917 44000000 		.4byte	.LBE35-.LBB35
 12850 091b 1A       		.uleb128 0x1a
 12851 091c 360F0000 		.4byte	.LASF101
 12852 0920 01       		.byte	0x1
 12853 0921 9805     		.2byte	0x598
 12854 0923 9F000000 		.4byte	0x9f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 284


 12855 0927 03       		.uleb128 0x3
 12856 0928 91       		.byte	0x91
 12857 0929 D47E     		.sleb128 -172
 12858 092b 00       		.byte	0
 12859 092c 00       		.byte	0
 12860 092d 20       		.uleb128 0x20
 12861 092e 421A0000 		.4byte	.LBB36
 12862 0932 B6000000 		.4byte	.LBE36-.LBB36
 12863 0936 9F090000 		.4byte	0x99f
 12864 093a 1A       		.uleb128 0x1a
 12865 093b 3E030000 		.4byte	.LASF102
 12866 093f 01       		.byte	0x1
 12867 0940 BF05     		.2byte	0x5bf
 12868 0942 9F000000 		.4byte	0x9f
 12869 0946 03       		.uleb128 0x3
 12870 0947 91       		.byte	0x91
 12871 0948 D07E     		.sleb128 -176
 12872 094a 1A       		.uleb128 0x1a
 12873 094b FE000000 		.4byte	.LASF103
 12874 094f 01       		.byte	0x1
 12875 0950 C005     		.2byte	0x5c0
 12876 0952 9F000000 		.4byte	0x9f
 12877 0956 03       		.uleb128 0x3
 12878 0957 91       		.byte	0x91
 12879 0958 CC7E     		.sleb128 -180
 12880 095a 1A       		.uleb128 0x1a
 12881 095b 36110000 		.4byte	.LASF104
 12882 095f 01       		.byte	0x1
 12883 0960 C105     		.2byte	0x5c1
 12884 0962 9F000000 		.4byte	0x9f
 12885 0966 03       		.uleb128 0x3
 12886 0967 91       		.byte	0x91
 12887 0968 887F     		.sleb128 -120
 12888 096a 20       		.uleb128 0x20
 12889 096b 521A0000 		.4byte	.LBB37
 12890 096f 36000000 		.4byte	.LBE37-.LBB37
 12891 0973 86090000 		.4byte	0x986
 12892 0977 1C       		.uleb128 0x1c
 12893 0978 6900     		.ascii	"i\000"
 12894 097a 01       		.byte	0x1
 12895 097b C205     		.2byte	0x5c2
 12896 097d 9F000000 		.4byte	0x9f
 12897 0981 03       		.uleb128 0x3
 12898 0982 91       		.byte	0x91
 12899 0983 847F     		.sleb128 -124
 12900 0985 00       		.byte	0
 12901 0986 15       		.uleb128 0x15
 12902 0987 8C1A0000 		.4byte	.LBB38
 12903 098b 44000000 		.4byte	.LBE38-.LBB38
 12904 098f 1C       		.uleb128 0x1c
 12905 0990 6900     		.ascii	"i\000"
 12906 0992 01       		.byte	0x1
 12907 0993 C805     		.2byte	0x5c8
 12908 0995 9F000000 		.4byte	0x9f
 12909 0999 03       		.uleb128 0x3
 12910 099a 91       		.byte	0x91
 12911 099b 807F     		.sleb128 -128
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 285


 12912 099d 00       		.byte	0
 12913 099e 00       		.byte	0
 12914 099f 15       		.uleb128 0x15
 12915 09a0 9E1B0000 		.4byte	.LBB39
 12916 09a4 28000000 		.4byte	.LBE39-.LBB39
 12917 09a8 1A       		.uleb128 0x1a
 12918 09a9 6C090000 		.4byte	.LASF91
 12919 09ad 01       		.byte	0x1
 12920 09ae E005     		.2byte	0x5e0
 12921 09b0 B8000000 		.4byte	0xb8
 12922 09b4 03       		.uleb128 0x3
 12923 09b5 91       		.byte	0x91
 12924 09b6 CB7E     		.sleb128 -181
 12925 09b8 00       		.byte	0
 12926 09b9 00       		.byte	0
 12927 09ba 17       		.uleb128 0x17
 12928 09bb FA050000 		.4byte	.LASF105
 12929 09bf 01       		.byte	0x1
 12930 09c0 0106     		.2byte	0x601
 12931 09c2 00000000 		.4byte	.LFB76
 12932 09c6 70000000 		.4byte	.LFE76-.LFB76
 12933 09ca 01       		.uleb128 0x1
 12934 09cb 9C       		.byte	0x9c
 12935 09cc 17       		.uleb128 0x17
 12936 09cd EA120000 		.4byte	.LASF106
 12937 09d1 01       		.byte	0x1
 12938 09d2 1606     		.2byte	0x616
 12939 09d4 00000000 		.4byte	.LFB77
 12940 09d8 70010000 		.4byte	.LFE77-.LFB77
 12941 09dc 01       		.uleb128 0x1
 12942 09dd 9C       		.byte	0x9c
 12943 09de 18       		.uleb128 0x18
 12944 09df CC090000 		.4byte	.LASF107
 12945 09e3 01       		.byte	0x1
 12946 09e4 3E06     		.2byte	0x63e
 12947 09e6 EF000000 		.4byte	0xef
 12948 09ea 00000000 		.4byte	.LFB78
 12949 09ee E0000000 		.4byte	.LFE78-.LFB78
 12950 09f2 01       		.uleb128 0x1
 12951 09f3 9C       		.byte	0x9c
 12952 09f4 530A0000 		.4byte	0xa53
 12953 09f8 1B       		.uleb128 0x1b
 12954 09f9 05120000 		.4byte	.LASF108
 12955 09fd 01       		.byte	0x1
 12956 09fe 3E06     		.2byte	0x63e
 12957 0a00 EF000000 		.4byte	0xef
 12958 0a04 02       		.uleb128 0x2
 12959 0a05 91       		.byte	0x91
 12960 0a06 67       		.sleb128 -25
 12961 0a07 1B       		.uleb128 0x1b
 12962 0a08 C3010000 		.4byte	.LASF109
 12963 0a0c 01       		.byte	0x1
 12964 0a0d 3E06     		.2byte	0x63e
 12965 0a0f FB000000 		.4byte	0xfb
 12966 0a13 02       		.uleb128 0x2
 12967 0a14 91       		.byte	0x91
 12968 0a15 64       		.sleb128 -28
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 286


 12969 0a16 1B       		.uleb128 0x1b
 12970 0a17 31110000 		.4byte	.LASF110
 12971 0a1b 01       		.byte	0x1
 12972 0a1c 3E06     		.2byte	0x63e
 12973 0a1e B8000000 		.4byte	0xb8
 12974 0a22 02       		.uleb128 0x2
 12975 0a23 91       		.byte	0x91
 12976 0a24 66       		.sleb128 -26
 12977 0a25 1A       		.uleb128 0x1a
 12978 0a26 6C090000 		.4byte	.LASF91
 12979 0a2a 01       		.byte	0x1
 12980 0a2b 4006     		.2byte	0x640
 12981 0a2d 40010000 		.4byte	0x140
 12982 0a31 02       		.uleb128 0x2
 12983 0a32 91       		.byte	0x91
 12984 0a33 6F       		.sleb128 -17
 12985 0a34 1A       		.uleb128 0x1a
 12986 0a35 9F030000 		.4byte	.LASF111
 12987 0a39 01       		.byte	0x1
 12988 0a3a 4106     		.2byte	0x641
 12989 0a3c B8000000 		.4byte	0xb8
 12990 0a40 02       		.uleb128 0x2
 12991 0a41 91       		.byte	0x91
 12992 0a42 77       		.sleb128 -9
 12993 0a43 1A       		.uleb128 0x1a
 12994 0a44 590C0000 		.4byte	.LASF112
 12995 0a48 01       		.byte	0x1
 12996 0a49 4206     		.2byte	0x642
 12997 0a4b E4000000 		.4byte	0xe4
 12998 0a4f 02       		.uleb128 0x2
 12999 0a50 91       		.byte	0x91
 13000 0a51 70       		.sleb128 -16
 13001 0a52 00       		.byte	0
 13002 0a53 18       		.uleb128 0x18
 13003 0a54 010E0000 		.4byte	.LASF113
 13004 0a58 01       		.byte	0x1
 13005 0a59 7706     		.2byte	0x677
 13006 0a5b EF000000 		.4byte	0xef
 13007 0a5f 00000000 		.4byte	.LFB79
 13008 0a63 F4000000 		.4byte	.LFE79-.LFB79
 13009 0a67 01       		.uleb128 0x1
 13010 0a68 9C       		.byte	0x9c
 13011 0a69 C80A0000 		.4byte	0xac8
 13012 0a6d 1B       		.uleb128 0x1b
 13013 0a6e 05120000 		.4byte	.LASF108
 13014 0a72 01       		.byte	0x1
 13015 0a73 7706     		.2byte	0x677
 13016 0a75 EF000000 		.4byte	0xef
 13017 0a79 02       		.uleb128 0x2
 13018 0a7a 91       		.byte	0x91
 13019 0a7b 6F       		.sleb128 -17
 13020 0a7c 1B       		.uleb128 0x1b
 13021 0a7d C3010000 		.4byte	.LASF109
 13022 0a81 01       		.byte	0x1
 13023 0a82 7706     		.2byte	0x677
 13024 0a84 EF000000 		.4byte	0xef
 13025 0a88 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 287


 13026 0a89 91       		.byte	0x91
 13027 0a8a 6E       		.sleb128 -18
 13028 0a8b 1B       		.uleb128 0x1b
 13029 0a8c 31110000 		.4byte	.LASF110
 13030 0a90 01       		.byte	0x1
 13031 0a91 7706     		.2byte	0x677
 13032 0a93 B8000000 		.4byte	0xb8
 13033 0a97 02       		.uleb128 0x2
 13034 0a98 91       		.byte	0x91
 13035 0a99 6D       		.sleb128 -19
 13036 0a9a 1A       		.uleb128 0x1a
 13037 0a9b 6C090000 		.4byte	.LASF91
 13038 0a9f 01       		.byte	0x1
 13039 0aa0 7906     		.2byte	0x679
 13040 0aa2 40010000 		.4byte	0x140
 13041 0aa6 02       		.uleb128 0x2
 13042 0aa7 91       		.byte	0x91
 13043 0aa8 72       		.sleb128 -14
 13044 0aa9 1A       		.uleb128 0x1a
 13045 0aaa 590C0000 		.4byte	.LASF112
 13046 0aae 01       		.byte	0x1
 13047 0aaf 7A06     		.2byte	0x67a
 13048 0ab1 E4000000 		.4byte	0xe4
 13049 0ab5 02       		.uleb128 0x2
 13050 0ab6 91       		.byte	0x91
 13051 0ab7 74       		.sleb128 -12
 13052 0ab8 1A       		.uleb128 0x1a
 13053 0ab9 9F030000 		.4byte	.LASF111
 13054 0abd 01       		.byte	0x1
 13055 0abe 7B06     		.2byte	0x67b
 13056 0ac0 B8000000 		.4byte	0xb8
 13057 0ac4 02       		.uleb128 0x2
 13058 0ac5 91       		.byte	0x91
 13059 0ac6 73       		.sleb128 -13
 13060 0ac7 00       		.byte	0
 13061 0ac8 17       		.uleb128 0x17
 13062 0ac9 53060000 		.4byte	.LASF114
 13063 0acd 01       		.byte	0x1
 13064 0ace AA06     		.2byte	0x6aa
 13065 0ad0 00000000 		.4byte	.LFB80
 13066 0ad4 24000000 		.4byte	.LFE80-.LFB80
 13067 0ad8 01       		.uleb128 0x1
 13068 0ad9 9C       		.byte	0x9c
 13069 0ada 1F       		.uleb128 0x1f
 13070 0adb 96110000 		.4byte	.LASF116
 13071 0adf 01       		.byte	0x1
 13072 0ae0 B906     		.2byte	0x6b9
 13073 0ae2 00000000 		.4byte	.LFB81
 13074 0ae6 18010000 		.4byte	.LFE81-.LFB81
 13075 0aea 01       		.uleb128 0x1
 13076 0aeb 9C       		.byte	0x9c
 13077 0aec 170B0000 		.4byte	0xb17
 13078 0af0 1A       		.uleb128 0x1a
 13079 0af1 44110000 		.4byte	.LASF117
 13080 0af5 01       		.byte	0x1
 13081 0af6 BB06     		.2byte	0x6bb
 13082 0af8 9F000000 		.4byte	0x9f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 288


 13083 0afc 02       		.uleb128 0x2
 13084 0afd 91       		.byte	0x91
 13085 0afe 6C       		.sleb128 -20
 13086 0aff 15       		.uleb128 0x15
 13087 0b00 0A000000 		.4byte	.LBB40
 13088 0b04 3C000000 		.4byte	.LBE40-.LBB40
 13089 0b08 1C       		.uleb128 0x1c
 13090 0b09 6900     		.ascii	"i\000"
 13091 0b0b 01       		.byte	0x1
 13092 0b0c BC06     		.2byte	0x6bc
 13093 0b0e 9F000000 		.4byte	0x9f
 13094 0b12 02       		.uleb128 0x2
 13095 0b13 91       		.byte	0x91
 13096 0b14 68       		.sleb128 -24
 13097 0b15 00       		.byte	0
 13098 0b16 00       		.byte	0
 13099 0b17 17       		.uleb128 0x17
 13100 0b18 1D060000 		.4byte	.LASF118
 13101 0b1c 01       		.byte	0x1
 13102 0b1d D606     		.2byte	0x6d6
 13103 0b1f 00000000 		.4byte	.LFB82
 13104 0b23 54000000 		.4byte	.LFE82-.LFB82
 13105 0b27 01       		.uleb128 0x1
 13106 0b28 9C       		.byte	0x9c
 13107 0b29 17       		.uleb128 0x17
 13108 0b2a 33050000 		.4byte	.LASF119
 13109 0b2e 01       		.byte	0x1
 13110 0b2f E906     		.2byte	0x6e9
 13111 0b31 00000000 		.4byte	.LFB83
 13112 0b35 C4000000 		.4byte	.LFE83-.LFB83
 13113 0b39 01       		.uleb128 0x1
 13114 0b3a 9C       		.byte	0x9c
 13115 0b3b 18       		.uleb128 0x18
 13116 0b3c 020C0000 		.4byte	.LASF120
 13117 0b40 01       		.byte	0x1
 13118 0b41 1C07     		.2byte	0x71c
 13119 0b43 13010000 		.4byte	0x113
 13120 0b47 00000000 		.4byte	.LFB84
 13121 0b4b 98000000 		.4byte	.LFE84-.LFB84
 13122 0b4f 01       		.uleb128 0x1
 13123 0b50 9C       		.byte	0x9c
 13124 0b51 8A0B0000 		.4byte	0xb8a
 13125 0b55 19       		.uleb128 0x19
 13126 0b56 5800     		.ascii	"X\000"
 13127 0b58 01       		.byte	0x1
 13128 0b59 1C07     		.2byte	0x71c
 13129 0b5b 13010000 		.4byte	0x113
 13130 0b5f 02       		.uleb128 0x2
 13131 0b60 91       		.byte	0x91
 13132 0b61 64       		.sleb128 -28
 13133 0b62 1C       		.uleb128 0x1c
 13134 0b63 5900     		.ascii	"Y\000"
 13135 0b65 01       		.byte	0x1
 13136 0b66 1D07     		.2byte	0x71d
 13137 0b68 13010000 		.4byte	0x113
 13138 0b6c 02       		.uleb128 0x2
 13139 0b6d 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 289


 13140 0b6e 70       		.sleb128 -16
 13141 0b6f 1C       		.uleb128 0x1c
 13142 0b70 4600     		.ascii	"F\000"
 13143 0b72 01       		.byte	0x1
 13144 0b73 1D07     		.2byte	0x71d
 13145 0b75 13010000 		.4byte	0x113
 13146 0b79 02       		.uleb128 0x2
 13147 0b7a 91       		.byte	0x91
 13148 0b7b 74       		.sleb128 -12
 13149 0b7c 1C       		.uleb128 0x1c
 13150 0b7d 4500     		.ascii	"E\000"
 13151 0b7f 01       		.byte	0x1
 13152 0b80 1E07     		.2byte	0x71e
 13153 0b82 9F000000 		.4byte	0x9f
 13154 0b86 02       		.uleb128 0x2
 13155 0b87 91       		.byte	0x91
 13156 0b88 6C       		.sleb128 -20
 13157 0b89 00       		.byte	0
 13158 0b8a 21       		.uleb128 0x21
 13159 0b8b DF000000 		.4byte	.LASF122
 13160 0b8f 01       		.byte	0x1
 13161 0b90 3007     		.2byte	0x730
 13162 0b92 00000000 		.4byte	.LFB85
 13163 0b96 D4000000 		.4byte	.LFE85-.LFB85
 13164 0b9a 01       		.uleb128 0x1
 13165 0b9b 9C       		.byte	0x9c
 13166 0b9c E70B0000 		.4byte	0xbe7
 13167 0ba0 1B       		.uleb128 0x1b
 13168 0ba1 5F0D0000 		.4byte	.LASF123
 13169 0ba5 01       		.byte	0x1
 13170 0ba6 3007     		.2byte	0x730
 13171 0ba8 9F000000 		.4byte	0x9f
 13172 0bac 02       		.uleb128 0x2
 13173 0bad 91       		.byte	0x91
 13174 0bae 64       		.sleb128 -28
 13175 0baf 1A       		.uleb128 0x1a
 13176 0bb0 2D0D0000 		.4byte	.LASF124
 13177 0bb4 01       		.byte	0x1
 13178 0bb5 3C07     		.2byte	0x73c
 13179 0bb7 CE000000 		.4byte	0xce
 13180 0bbb 02       		.uleb128 0x2
 13181 0bbc 91       		.byte	0x91
 13182 0bbd 76       		.sleb128 -10
 13183 0bbe 15       		.uleb128 0x15
 13184 0bbf 18000000 		.4byte	.LBB41
 13185 0bc3 86000000 		.4byte	.LBE41-.LBB41
 13186 0bc7 1A       		.uleb128 0x1a
 13187 0bc8 7A0F0000 		.4byte	.LASF125
 13188 0bcc 01       		.byte	0x1
 13189 0bcd 4007     		.2byte	0x740
 13190 0bcf 13010000 		.4byte	0x113
 13191 0bd3 02       		.uleb128 0x2
 13192 0bd4 91       		.byte	0x91
 13193 0bd5 70       		.sleb128 -16
 13194 0bd6 1A       		.uleb128 0x1a
 13195 0bd7 94130000 		.4byte	.LASF126
 13196 0bdb 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 290


 13197 0bdc 4F07     		.2byte	0x74f
 13198 0bde 9F000000 		.4byte	0x9f
 13199 0be2 02       		.uleb128 0x2
 13200 0be3 91       		.byte	0x91
 13201 0be4 6C       		.sleb128 -20
 13202 0be5 00       		.byte	0
 13203 0be6 00       		.byte	0
 13204 0be7 21       		.uleb128 0x21
 13205 0be8 2A080000 		.4byte	.LASF127
 13206 0bec 01       		.byte	0x1
 13207 0bed 5B07     		.2byte	0x75b
 13208 0bef 00000000 		.4byte	.LFB86
 13209 0bf3 1C000000 		.4byte	.LFE86-.LFB86
 13210 0bf7 01       		.uleb128 0x1
 13211 0bf8 9C       		.byte	0x9c
 13212 0bf9 1B0C0000 		.4byte	0xc1b
 13213 0bfd 19       		.uleb128 0x19
 13214 0bfe 636300   		.ascii	"cc\000"
 13215 0c01 01       		.byte	0x1
 13216 0c02 5B07     		.2byte	0x75b
 13217 0c04 9F000000 		.4byte	0x9f
 13218 0c08 02       		.uleb128 0x2
 13219 0c09 91       		.byte	0x91
 13220 0c0a 74       		.sleb128 -12
 13221 0c0b 19       		.uleb128 0x19
 13222 0c0c 76616C00 		.ascii	"val\000"
 13223 0c10 01       		.byte	0x1
 13224 0c11 5B07     		.2byte	0x75b
 13225 0c13 9F000000 		.4byte	0x9f
 13226 0c17 02       		.uleb128 0x2
 13227 0c18 91       		.byte	0x91
 13228 0c19 70       		.sleb128 -16
 13229 0c1a 00       		.byte	0
 13230 0c1b 21       		.uleb128 0x21
 13231 0c1c F70A0000 		.4byte	.LASF128
 13232 0c20 01       		.byte	0x1
 13233 0c21 6107     		.2byte	0x761
 13234 0c23 00000000 		.4byte	.LFB87
 13235 0c27 68000000 		.4byte	.LFE87-.LFB87
 13236 0c2b 01       		.uleb128 0x1
 13237 0c2c 9C       		.byte	0x9c
 13238 0c2d 5F0C0000 		.4byte	0xc5f
 13239 0c31 1B       		.uleb128 0x1b
 13240 0c32 7F030000 		.4byte	.LASF129
 13241 0c36 01       		.byte	0x1
 13242 0c37 6107     		.2byte	0x761
 13243 0c39 9F000000 		.4byte	0x9f
 13244 0c3d 02       		.uleb128 0x2
 13245 0c3e 91       		.byte	0x91
 13246 0c3f 74       		.sleb128 -12
 13247 0c40 1B       		.uleb128 0x1b
 13248 0c41 2D0D0000 		.4byte	.LASF124
 13249 0c45 01       		.byte	0x1
 13250 0c46 6107     		.2byte	0x761
 13251 0c48 9F000000 		.4byte	0x9f
 13252 0c4c 02       		.uleb128 0x2
 13253 0c4d 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 291


 13254 0c4e 70       		.sleb128 -16
 13255 0c4f 1B       		.uleb128 0x1b
 13256 0c50 8F090000 		.4byte	.LASF130
 13257 0c54 01       		.byte	0x1
 13258 0c55 6107     		.2byte	0x761
 13259 0c57 9F000000 		.4byte	0x9f
 13260 0c5b 02       		.uleb128 0x2
 13261 0c5c 91       		.byte	0x91
 13262 0c5d 6C       		.sleb128 -20
 13263 0c5e 00       		.byte	0
 13264 0c5f 21       		.uleb128 0x21
 13265 0c60 BE060000 		.4byte	.LASF131
 13266 0c64 01       		.byte	0x1
 13267 0c65 6E07     		.2byte	0x76e
 13268 0c67 00000000 		.4byte	.LFB88
 13269 0c6b 68000000 		.4byte	.LFE88-.LFB88
 13270 0c6f 01       		.uleb128 0x1
 13271 0c70 9C       		.byte	0x9c
 13272 0c71 A30C0000 		.4byte	0xca3
 13273 0c75 1B       		.uleb128 0x1b
 13274 0c76 7F030000 		.4byte	.LASF129
 13275 0c7a 01       		.byte	0x1
 13276 0c7b 6E07     		.2byte	0x76e
 13277 0c7d 9F000000 		.4byte	0x9f
 13278 0c81 02       		.uleb128 0x2
 13279 0c82 91       		.byte	0x91
 13280 0c83 74       		.sleb128 -12
 13281 0c84 1B       		.uleb128 0x1b
 13282 0c85 8F050000 		.4byte	.LASF132
 13283 0c89 01       		.byte	0x1
 13284 0c8a 6E07     		.2byte	0x76e
 13285 0c8c 9F000000 		.4byte	0x9f
 13286 0c90 02       		.uleb128 0x2
 13287 0c91 91       		.byte	0x91
 13288 0c92 70       		.sleb128 -16
 13289 0c93 1B       		.uleb128 0x1b
 13290 0c94 8F090000 		.4byte	.LASF130
 13291 0c98 01       		.byte	0x1
 13292 0c99 6E07     		.2byte	0x76e
 13293 0c9b 9F000000 		.4byte	0x9f
 13294 0c9f 02       		.uleb128 0x2
 13295 0ca0 91       		.byte	0x91
 13296 0ca1 6C       		.sleb128 -20
 13297 0ca2 00       		.byte	0
 13298 0ca3 21       		.uleb128 0x21
 13299 0ca4 0A070000 		.4byte	.LASF133
 13300 0ca8 01       		.byte	0x1
 13301 0ca9 7A07     		.2byte	0x77a
 13302 0cab 00000000 		.4byte	.LFB89
 13303 0caf 68000000 		.4byte	.LFE89-.LFB89
 13304 0cb3 01       		.uleb128 0x1
 13305 0cb4 9C       		.byte	0x9c
 13306 0cb5 E70C0000 		.4byte	0xce7
 13307 0cb9 1B       		.uleb128 0x1b
 13308 0cba F8010000 		.4byte	.LASF134
 13309 0cbe 01       		.byte	0x1
 13310 0cbf 7A07     		.2byte	0x77a
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 292


 13311 0cc1 9F000000 		.4byte	0x9f
 13312 0cc5 02       		.uleb128 0x2
 13313 0cc6 91       		.byte	0x91
 13314 0cc7 74       		.sleb128 -12
 13315 0cc8 1B       		.uleb128 0x1b
 13316 0cc9 14010000 		.4byte	.LASF135
 13317 0ccd 01       		.byte	0x1
 13318 0cce 7A07     		.2byte	0x77a
 13319 0cd0 9F000000 		.4byte	0x9f
 13320 0cd4 02       		.uleb128 0x2
 13321 0cd5 91       		.byte	0x91
 13322 0cd6 70       		.sleb128 -16
 13323 0cd7 1B       		.uleb128 0x1b
 13324 0cd8 8F090000 		.4byte	.LASF130
 13325 0cdc 01       		.byte	0x1
 13326 0cdd 7A07     		.2byte	0x77a
 13327 0cdf 9F000000 		.4byte	0x9f
 13328 0ce3 02       		.uleb128 0x2
 13329 0ce4 91       		.byte	0x91
 13330 0ce5 6C       		.sleb128 -20
 13331 0ce6 00       		.byte	0
 13332 0ce7 21       		.uleb128 0x21
 13333 0ce8 AC0C0000 		.4byte	.LASF136
 13334 0cec 01       		.byte	0x1
 13335 0ced 8607     		.2byte	0x786
 13336 0cef 00000000 		.4byte	.LFB90
 13337 0cf3 6C000000 		.4byte	.LFE90-.LFB90
 13338 0cf7 01       		.uleb128 0x1
 13339 0cf8 9C       		.byte	0x9c
 13340 0cf9 1C0D0000 		.4byte	0xd1c
 13341 0cfd 19       		.uleb128 0x19
 13342 0cfe 76616C00 		.ascii	"val\000"
 13343 0d02 01       		.byte	0x1
 13344 0d03 8607     		.2byte	0x786
 13345 0d05 9F000000 		.4byte	0x9f
 13346 0d09 02       		.uleb128 0x2
 13347 0d0a 91       		.byte	0x91
 13348 0d0b 74       		.sleb128 -12
 13349 0d0c 1B       		.uleb128 0x1b
 13350 0d0d 8F090000 		.4byte	.LASF130
 13351 0d11 01       		.byte	0x1
 13352 0d12 8607     		.2byte	0x786
 13353 0d14 9F000000 		.4byte	0x9f
 13354 0d18 02       		.uleb128 0x2
 13355 0d19 91       		.byte	0x91
 13356 0d1a 70       		.sleb128 -16
 13357 0d1b 00       		.byte	0
 13358 0d1c 17       		.uleb128 0x17
 13359 0d1d 8B030000 		.4byte	.LASF137
 13360 0d21 01       		.byte	0x1
 13361 0d22 9207     		.2byte	0x792
 13362 0d24 00000000 		.4byte	.LFB91
 13363 0d28 64000000 		.4byte	.LFE91-.LFB91
 13364 0d2c 01       		.uleb128 0x1
 13365 0d2d 9C       		.byte	0x9c
 13366 0d2e 21       		.uleb128 0x21
 13367 0d2f 32080000 		.4byte	.LASF138
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 293


 13368 0d33 01       		.byte	0x1
 13369 0d34 AA07     		.2byte	0x7aa
 13370 0d36 00000000 		.4byte	.LFB92
 13371 0d3a EC0B0000 		.4byte	.LFE92-.LFB92
 13372 0d3e 01       		.uleb128 0x1
 13373 0d3f 9C       		.byte	0x9c
 13374 0d40 7B0F0000 		.4byte	0xf7b
 13375 0d44 20       		.uleb128 0x20
 13376 0d45 16000000 		.4byte	.LBB42
 13377 0d49 C0050000 		.4byte	.LBE42-.LBB42
 13378 0d4d F50D0000 		.4byte	0xdf5
 13379 0d51 1A       		.uleb128 0x1a
 13380 0d52 68020000 		.4byte	.LASF139
 13381 0d56 01       		.byte	0x1
 13382 0d57 B907     		.2byte	0x7b9
 13383 0d59 9D020000 		.4byte	0x29d
 13384 0d5d 03       		.uleb128 0x3
 13385 0d5e 91       		.byte	0x91
 13386 0d5f B07F     		.sleb128 -80
 13387 0d61 1C       		.uleb128 0x1c
 13388 0d62 6900     		.ascii	"i\000"
 13389 0d64 01       		.byte	0x1
 13390 0d65 BA07     		.2byte	0x7ba
 13391 0d67 E4000000 		.4byte	0xe4
 13392 0d6b 02       		.uleb128 0x2
 13393 0d6c 91       		.byte	0x91
 13394 0d6d 6C       		.sleb128 -20
 13395 0d6e 1A       		.uleb128 0x1a
 13396 0d6f 67050000 		.4byte	.LASF140
 13397 0d73 01       		.byte	0x1
 13398 0d74 BB07     		.2byte	0x7bb
 13399 0d76 B8000000 		.4byte	0xb8
 13400 0d7a 02       		.uleb128 0x2
 13401 0d7b 91       		.byte	0x91
 13402 0d7c 57       		.sleb128 -41
 13403 0d7d 1A       		.uleb128 0x1a
 13404 0d7e F1040000 		.4byte	.LASF141
 13405 0d82 01       		.byte	0x1
 13406 0d83 CF07     		.2byte	0x7cf
 13407 0d85 CE000000 		.4byte	0xce
 13408 0d89 02       		.uleb128 0x2
 13409 0d8a 91       		.byte	0x91
 13410 0d8b 54       		.sleb128 -44
 13411 0d8c 20       		.uleb128 0x20
 13412 0d8d B2000000 		.4byte	.LBB43
 13413 0d91 76000000 		.4byte	.LBE43-.LBB43
 13414 0d95 BE0D0000 		.4byte	0xdbe
 13415 0d99 1C       		.uleb128 0x1c
 13416 0d9a 6A00     		.ascii	"j\000"
 13417 0d9c 01       		.byte	0x1
 13418 0d9d C507     		.2byte	0x7c5
 13419 0d9f 9F000000 		.4byte	0x9f
 13420 0da3 02       		.uleb128 0x2
 13421 0da4 91       		.byte	0x91
 13422 0da5 68       		.sleb128 -24
 13423 0da6 15       		.uleb128 0x15
 13424 0da7 B8000000 		.4byte	.LBB44
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 294


 13425 0dab 64000000 		.4byte	.LBE44-.LBB44
 13426 0daf 1C       		.uleb128 0x1c
 13427 0db0 6B00     		.ascii	"k\000"
 13428 0db2 01       		.byte	0x1
 13429 0db3 C707     		.2byte	0x7c7
 13430 0db5 9F000000 		.4byte	0x9f
 13431 0db9 02       		.uleb128 0x2
 13432 0dba 91       		.byte	0x91
 13433 0dbb 64       		.sleb128 -28
 13434 0dbc 00       		.byte	0
 13435 0dbd 00       		.byte	0
 13436 0dbe 20       		.uleb128 0x20
 13437 0dbf FA010000 		.4byte	.LBB45
 13438 0dc3 46000000 		.4byte	.LBE45-.LBB45
 13439 0dc7 DB0D0000 		.4byte	0xddb
 13440 0dcb 1A       		.uleb128 0x1a
 13441 0dcc 50020000 		.4byte	.LASF142
 13442 0dd0 01       		.byte	0x1
 13443 0dd1 E707     		.2byte	0x7e7
 13444 0dd3 CE000000 		.4byte	0xce
 13445 0dd7 02       		.uleb128 0x2
 13446 0dd8 91       		.byte	0x91
 13447 0dd9 52       		.sleb128 -46
 13448 0dda 00       		.byte	0
 13449 0ddb 15       		.uleb128 0x15
 13450 0ddc 66040000 		.4byte	.LBB46
 13451 0de0 48000000 		.4byte	.LBE46-.LBB46
 13452 0de4 1A       		.uleb128 0x1a
 13453 0de5 50020000 		.4byte	.LASF142
 13454 0de9 01       		.byte	0x1
 13455 0dea 2308     		.2byte	0x823
 13456 0dec C3000000 		.4byte	0xc3
 13457 0df0 02       		.uleb128 0x2
 13458 0df1 91       		.byte	0x91
 13459 0df2 50       		.sleb128 -48
 13460 0df3 00       		.byte	0
 13461 0df4 00       		.byte	0
 13462 0df5 20       		.uleb128 0x20
 13463 0df6 E0050000 		.4byte	.LBB47
 13464 0dfa 04030000 		.4byte	.LBE47-.LBB47
 13465 0dfe DD0E0000 		.4byte	0xedd
 13466 0e02 1A       		.uleb128 0x1a
 13467 0e03 68020000 		.4byte	.LASF139
 13468 0e07 01       		.byte	0x1
 13469 0e08 8408     		.2byte	0x884
 13470 0e0a 9D020000 		.4byte	0x29d
 13471 0e0e 03       		.uleb128 0x3
 13472 0e0f 91       		.byte	0x91
 13473 0e10 AC7F     		.sleb128 -84
 13474 0e12 1C       		.uleb128 0x1c
 13475 0e13 6900     		.ascii	"i\000"
 13476 0e15 01       		.byte	0x1
 13477 0e16 8508     		.2byte	0x885
 13478 0e18 E4000000 		.4byte	0xe4
 13479 0e1c 02       		.uleb128 0x2
 13480 0e1d 91       		.byte	0x91
 13481 0e1e 60       		.sleb128 -32
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 295


 13482 0e1f 1A       		.uleb128 0x1a
 13483 0e20 67050000 		.4byte	.LASF140
 13484 0e24 01       		.byte	0x1
 13485 0e25 8608     		.2byte	0x886
 13486 0e27 B8000000 		.4byte	0xb8
 13487 0e2b 02       		.uleb128 0x2
 13488 0e2c 91       		.byte	0x91
 13489 0e2d 4F       		.sleb128 -49
 13490 0e2e 20       		.uleb128 0x20
 13491 0e2f 14060000 		.4byte	.LBB48
 13492 0e33 82000000 		.4byte	.LBE48-.LBB48
 13493 0e37 4B0E0000 		.4byte	0xe4b
 13494 0e3b 1A       		.uleb128 0x1a
 13495 0e3c 4E100000 		.4byte	.LASF143
 13496 0e40 01       		.byte	0x1
 13497 0e41 8A08     		.2byte	0x88a
 13498 0e43 B8000000 		.4byte	0xb8
 13499 0e47 02       		.uleb128 0x2
 13500 0e48 91       		.byte	0x91
 13501 0e49 4E       		.sleb128 -50
 13502 0e4a 00       		.byte	0
 13503 0e4b 15       		.uleb128 0x15
 13504 0e4c AC060000 		.4byte	.LBB49
 13505 0e50 BA010000 		.4byte	.LBE49-.LBB49
 13506 0e54 1A       		.uleb128 0x1a
 13507 0e55 71110000 		.4byte	.LASF144
 13508 0e59 01       		.byte	0x1
 13509 0e5a 9508     		.2byte	0x895
 13510 0e5c E4000000 		.4byte	0xe4
 13511 0e60 02       		.uleb128 0x2
 13512 0e61 91       		.byte	0x91
 13513 0e62 5C       		.sleb128 -36
 13514 0e63 15       		.uleb128 0x15
 13515 0e64 B2060000 		.4byte	.LBB50
 13516 0e68 A6010000 		.4byte	.LBE50-.LBB50
 13517 0e6c 1A       		.uleb128 0x1a
 13518 0e6d 0C050000 		.4byte	.LASF87
 13519 0e71 01       		.byte	0x1
 13520 0e72 9708     		.2byte	0x897
 13521 0e74 CE000000 		.4byte	0xce
 13522 0e78 02       		.uleb128 0x2
 13523 0e79 91       		.byte	0x91
 13524 0e7a 4C       		.sleb128 -52
 13525 0e7b 15       		.uleb128 0x15
 13526 0e7c C0060000 		.4byte	.LBB51
 13527 0e80 98010000 		.4byte	.LBE51-.LBB51
 13528 0e84 1A       		.uleb128 0x1a
 13529 0e85 D6060000 		.4byte	.LASF145
 13530 0e89 01       		.byte	0x1
 13531 0e8a 9808     		.2byte	0x898
 13532 0e8c E4000000 		.4byte	0xe4
 13533 0e90 02       		.uleb128 0x2
 13534 0e91 91       		.byte	0x91
 13535 0e92 58       		.sleb128 -40
 13536 0e93 15       		.uleb128 0x15
 13537 0e94 1C070000 		.4byte	.LBB52
 13538 0e98 2E010000 		.4byte	.LBE52-.LBB52
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 296


 13539 0e9c 1A       		.uleb128 0x1a
 13540 0e9d BF040000 		.4byte	.LASF146
 13541 0ea1 01       		.byte	0x1
 13542 0ea2 A208     		.2byte	0x8a2
 13543 0ea4 CE000000 		.4byte	0xce
 13544 0ea8 02       		.uleb128 0x2
 13545 0ea9 91       		.byte	0x91
 13546 0eaa 4A       		.sleb128 -54
 13547 0eab 1A       		.uleb128 0x1a
 13548 0eac A50E0000 		.4byte	.LASF147
 13549 0eb0 01       		.byte	0x1
 13550 0eb1 A308     		.2byte	0x8a3
 13551 0eb3 B8000000 		.4byte	0xb8
 13552 0eb7 02       		.uleb128 0x2
 13553 0eb8 91       		.byte	0x91
 13554 0eb9 49       		.sleb128 -55
 13555 0eba 1A       		.uleb128 0x1a
 13556 0ebb 69010000 		.4byte	.LASF148
 13557 0ebf 01       		.byte	0x1
 13558 0ec0 A408     		.2byte	0x8a4
 13559 0ec2 B8000000 		.4byte	0xb8
 13560 0ec6 02       		.uleb128 0x2
 13561 0ec7 91       		.byte	0x91
 13562 0ec8 48       		.sleb128 -56
 13563 0ec9 1A       		.uleb128 0x1a
 13564 0eca 0D040000 		.4byte	.LASF88
 13565 0ece 01       		.byte	0x1
 13566 0ecf A708     		.2byte	0x8a7
 13567 0ed1 CE000000 		.4byte	0xce
 13568 0ed5 02       		.uleb128 0x2
 13569 0ed6 91       		.byte	0x91
 13570 0ed7 46       		.sleb128 -58
 13571 0ed8 00       		.byte	0
 13572 0ed9 00       		.byte	0
 13573 0eda 00       		.byte	0
 13574 0edb 00       		.byte	0
 13575 0edc 00       		.byte	0
 13576 0edd 20       		.uleb128 0x20
 13577 0ede EE080000 		.4byte	.LBB53
 13578 0ee2 14010000 		.4byte	.LBE53-.LBB53
 13579 0ee6 280F0000 		.4byte	0xf28
 13580 0eea 1A       		.uleb128 0x1a
 13581 0eeb 68020000 		.4byte	.LASF139
 13582 0eef 01       		.byte	0x1
 13583 0ef0 CB08     		.2byte	0x8cb
 13584 0ef2 9D020000 		.4byte	0x29d
 13585 0ef6 03       		.uleb128 0x3
 13586 0ef7 91       		.byte	0x91
 13587 0ef8 A87F     		.sleb128 -88
 13588 0efa 1C       		.uleb128 0x1c
 13589 0efb 6900     		.ascii	"i\000"
 13590 0efd 01       		.byte	0x1
 13591 0efe CC08     		.2byte	0x8cc
 13592 0f00 E4000000 		.4byte	0xe4
 13593 0f04 02       		.uleb128 0x2
 13594 0f05 91       		.byte	0x91
 13595 0f06 40       		.sleb128 -64
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 297


 13596 0f07 1A       		.uleb128 0x1a
 13597 0f08 2B060000 		.4byte	.LASF149
 13598 0f0c 01       		.byte	0x1
 13599 0f0d D508     		.2byte	0x8d5
 13600 0f0f CE000000 		.4byte	0xce
 13601 0f13 03       		.uleb128 0x3
 13602 0f14 91       		.byte	0x91
 13603 0f15 BE7F     		.sleb128 -66
 13604 0f17 1A       		.uleb128 0x1a
 13605 0f18 50020000 		.4byte	.LASF142
 13606 0f1c 01       		.byte	0x1
 13607 0f1d E308     		.2byte	0x8e3
 13608 0f1f CE000000 		.4byte	0xce
 13609 0f23 03       		.uleb128 0x3
 13610 0f24 91       		.byte	0x91
 13611 0f25 BC7F     		.sleb128 -68
 13612 0f27 00       		.byte	0
 13613 0f28 15       		.uleb128 0x15
 13614 0f29 0E0A0000 		.4byte	.LBB54
 13615 0f2d AA010000 		.4byte	.LBE54-.LBB54
 13616 0f31 1A       		.uleb128 0x1a
 13617 0f32 68020000 		.4byte	.LASF139
 13618 0f36 01       		.byte	0x1
 13619 0f37 EE08     		.2byte	0x8ee
 13620 0f39 9D020000 		.4byte	0x29d
 13621 0f3d 03       		.uleb128 0x3
 13622 0f3e 91       		.byte	0x91
 13623 0f3f A47F     		.sleb128 -92
 13624 0f41 1C       		.uleb128 0x1c
 13625 0f42 6900     		.ascii	"i\000"
 13626 0f44 01       		.byte	0x1
 13627 0f45 EF08     		.2byte	0x8ef
 13628 0f47 E4000000 		.4byte	0xe4
 13629 0f4b 03       		.uleb128 0x3
 13630 0f4c 91       		.byte	0x91
 13631 0f4d B87F     		.sleb128 -72
 13632 0f4f 1A       		.uleb128 0x1a
 13633 0f50 2B060000 		.4byte	.LASF149
 13634 0f54 01       		.byte	0x1
 13635 0f55 F808     		.2byte	0x8f8
 13636 0f57 CE000000 		.4byte	0xce
 13637 0f5b 03       		.uleb128 0x3
 13638 0f5c 91       		.byte	0x91
 13639 0f5d B67F     		.sleb128 -74
 13640 0f5f 15       		.uleb128 0x15
 13641 0f60 360B0000 		.4byte	.LBB55
 13642 0f64 2C000000 		.4byte	.LBE55-.LBB55
 13643 0f68 1A       		.uleb128 0x1a
 13644 0f69 50020000 		.4byte	.LASF142
 13645 0f6d 01       		.byte	0x1
 13646 0f6e 1009     		.2byte	0x910
 13647 0f70 C3000000 		.4byte	0xc3
 13648 0f74 03       		.uleb128 0x3
 13649 0f75 91       		.byte	0x91
 13650 0f76 B47F     		.sleb128 -76
 13651 0f78 00       		.byte	0
 13652 0f79 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 298


 13653 0f7a 00       		.byte	0
 13654 0f7b 21       		.uleb128 0x21
 13655 0f7c 5C040000 		.4byte	.LASF150
 13656 0f80 01       		.byte	0x1
 13657 0f81 2809     		.2byte	0x928
 13658 0f83 00000000 		.4byte	.LFB93
 13659 0f87 50010000 		.4byte	.LFE93-.LFB93
 13660 0f8b 01       		.uleb128 0x1
 13661 0f8c 9C       		.byte	0x9c
 13662 0f8d C70F0000 		.4byte	0xfc7
 13663 0f91 1B       		.uleb128 0x1b
 13664 0f92 EF0C0000 		.4byte	.LASF151
 13665 0f96 01       		.byte	0x1
 13666 0f97 2809     		.2byte	0x928
 13667 0f99 EF000000 		.4byte	0xef
 13668 0f9d 02       		.uleb128 0x2
 13669 0f9e 91       		.byte	0x91
 13670 0f9f 6F       		.sleb128 -17
 13671 0fa0 1B       		.uleb128 0x1b
 13672 0fa1 5F0E0000 		.4byte	.LASF152
 13673 0fa5 01       		.byte	0x1
 13674 0fa6 2809     		.2byte	0x928
 13675 0fa8 C70F0000 		.4byte	0xfc7
 13676 0fac 02       		.uleb128 0x2
 13677 0fad 91       		.byte	0x91
 13678 0fae 68       		.sleb128 -24
 13679 0faf 15       		.uleb128 0x15
 13680 0fb0 48000000 		.4byte	.LBB56
 13681 0fb4 54000000 		.4byte	.LBE56-.LBB56
 13682 0fb8 1C       		.uleb128 0x1c
 13683 0fb9 6900     		.ascii	"i\000"
 13684 0fbb 01       		.byte	0x1
 13685 0fbc 3409     		.2byte	0x934
 13686 0fbe 9F000000 		.4byte	0x9f
 13687 0fc2 02       		.uleb128 0x2
 13688 0fc3 91       		.byte	0x91
 13689 0fc4 74       		.sleb128 -12
 13690 0fc5 00       		.byte	0
 13691 0fc6 00       		.byte	0
 13692 0fc7 07       		.uleb128 0x7
 13693 0fc8 04       		.byte	0x4
 13694 0fc9 EF000000 		.4byte	0xef
 13695 0fcd 21       		.uleb128 0x21
 13696 0fce 47100000 		.4byte	.LASF153
 13697 0fd2 01       		.byte	0x1
 13698 0fd3 6009     		.2byte	0x960
 13699 0fd5 00000000 		.4byte	.LFB94
 13700 0fd9 D8030000 		.4byte	.LFE94-.LFB94
 13701 0fdd 01       		.uleb128 0x1
 13702 0fde 9C       		.byte	0x9c
 13703 0fdf F30F0000 		.4byte	0xff3
 13704 0fe3 1A       		.uleb128 0x1a
 13705 0fe4 3F050000 		.4byte	.LASF154
 13706 0fe8 01       		.byte	0x1
 13707 0fe9 6209     		.2byte	0x962
 13708 0feb B8000000 		.4byte	0xb8
 13709 0fef 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 299


 13710 0ff0 91       		.byte	0x91
 13711 0ff1 77       		.sleb128 -9
 13712 0ff2 00       		.byte	0
 13713 0ff3 17       		.uleb128 0x17
 13714 0ff4 0D120000 		.4byte	.LASF155
 13715 0ff8 01       		.byte	0x1
 13716 0ff9 220A     		.2byte	0xa22
 13717 0ffb 00000000 		.4byte	.LFB95
 13718 0fff A0000000 		.4byte	.LFE95-.LFB95
 13719 1003 01       		.uleb128 0x1
 13720 1004 9C       		.byte	0x9c
 13721 1005 17       		.uleb128 0x17
 13722 1006 B5120000 		.4byte	.LASF156
 13723 100a 01       		.byte	0x1
 13724 100b 390A     		.2byte	0xa39
 13725 100d 00000000 		.4byte	.LFB96
 13726 1011 44000000 		.4byte	.LFE96-.LFB96
 13727 1015 01       		.uleb128 0x1
 13728 1016 9C       		.byte	0x9c
 13729 1017 21       		.uleb128 0x21
 13730 1018 B6130000 		.4byte	.LASF157
 13731 101c 01       		.byte	0x1
 13732 101d 4B0A     		.2byte	0xa4b
 13733 101f 00000000 		.4byte	.LFB97
 13734 1023 54050000 		.4byte	.LFE97-.LFB97
 13735 1027 01       		.uleb128 0x1
 13736 1028 9C       		.byte	0x9c
 13737 1029 B2100000 		.4byte	0x10b2
 13738 102d 1B       		.uleb128 0x1b
 13739 102e 77040000 		.4byte	.LASF158
 13740 1032 01       		.byte	0x1
 13741 1033 4B0A     		.2byte	0xa4b
 13742 1035 D7020000 		.4byte	0x2d7
 13743 1039 02       		.uleb128 0x2
 13744 103a 91       		.byte	0x91
 13745 103b 5F       		.sleb128 -33
 13746 103c 1A       		.uleb128 0x1a
 13747 103d 2C090000 		.4byte	.LASF159
 13748 1041 01       		.byte	0x1
 13749 1042 4D0A     		.2byte	0xa4d
 13750 1044 B8000000 		.4byte	0xb8
 13751 1048 02       		.uleb128 0x2
 13752 1049 91       		.byte	0x91
 13753 104a 77       		.sleb128 -9
 13754 104b 20       		.uleb128 0x20
 13755 104c 3C030000 		.4byte	.LBB57
 13756 1050 6C000000 		.4byte	.LBE57-.LBB57
 13757 1054 66100000 		.4byte	0x1066
 13758 1058 1C       		.uleb128 0x1c
 13759 1059 6900     		.ascii	"i\000"
 13760 105b 01       		.byte	0x1
 13761 105c E80A     		.2byte	0xae8
 13762 105e 9F000000 		.4byte	0x9f
 13763 1062 02       		.uleb128 0x2
 13764 1063 91       		.byte	0x91
 13765 1064 70       		.sleb128 -16
 13766 1065 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 300


 13767 1066 20       		.uleb128 0x20
 13768 1067 CC030000 		.4byte	.LBB58
 13769 106b 6C000000 		.4byte	.LBE58-.LBB58
 13770 106f 81100000 		.4byte	0x1081
 13771 1073 1C       		.uleb128 0x1c
 13772 1074 6900     		.ascii	"i\000"
 13773 1076 01       		.byte	0x1
 13774 1077 000B     		.2byte	0xb00
 13775 1079 9F000000 		.4byte	0x9f
 13776 107d 02       		.uleb128 0x2
 13777 107e 91       		.byte	0x91
 13778 107f 6C       		.sleb128 -20
 13779 1080 00       		.byte	0
 13780 1081 15       		.uleb128 0x15
 13781 1082 4E040000 		.4byte	.LBB59
 13782 1086 C8000000 		.4byte	.LBE59-.LBB59
 13783 108a 1A       		.uleb128 0x1a
 13784 108b 68120000 		.4byte	.LASF160
 13785 108f 01       		.byte	0x1
 13786 1090 170B     		.2byte	0xb17
 13787 1092 B8000000 		.4byte	0xb8
 13788 1096 02       		.uleb128 0x2
 13789 1097 91       		.byte	0x91
 13790 1098 6B       		.sleb128 -21
 13791 1099 15       		.uleb128 0x15
 13792 109a 60040000 		.4byte	.LBB60
 13793 109e 88000000 		.4byte	.LBE60-.LBB60
 13794 10a2 1C       		.uleb128 0x1c
 13795 10a3 6900     		.ascii	"i\000"
 13796 10a5 01       		.byte	0x1
 13797 10a6 180B     		.2byte	0xb18
 13798 10a8 9F000000 		.4byte	0x9f
 13799 10ac 02       		.uleb128 0x2
 13800 10ad 91       		.byte	0x91
 13801 10ae 64       		.sleb128 -28
 13802 10af 00       		.byte	0
 13803 10b0 00       		.byte	0
 13804 10b1 00       		.byte	0
 13805 10b2 22       		.uleb128 0x22
 13806 10b3 71130000 		.4byte	.LASF162
 13807 10b7 01       		.byte	0x1
 13808 10b8 370B     		.2byte	0xb37
 13809 10ba 00000000 		.4byte	.LFB98
 13810 10be 98000000 		.4byte	.LFE98-.LFB98
 13811 10c2 01       		.uleb128 0x1
 13812 10c3 9C       		.byte	0x9c
 13813 10c4 22       		.uleb128 0x22
 13814 10c5 44140000 		.4byte	.LASF163
 13815 10c9 01       		.byte	0x1
 13816 10ca 4E0B     		.2byte	0xb4e
 13817 10cc 00000000 		.4byte	.LFB99
 13818 10d0 94000000 		.4byte	.LFE99-.LFB99
 13819 10d4 01       		.uleb128 0x1
 13820 10d5 9C       		.byte	0x9c
 13821 10d6 22       		.uleb128 0x22
 13822 10d7 A20D0000 		.4byte	.LASF164
 13823 10db 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 301


 13824 10dc 620B     		.2byte	0xb62
 13825 10de 00000000 		.4byte	.LFB100
 13826 10e2 4C000000 		.4byte	.LFE100-.LFB100
 13827 10e6 01       		.uleb128 0x1
 13828 10e7 9C       		.byte	0x9c
 13829 10e8 22       		.uleb128 0x22
 13830 10e9 B0090000 		.4byte	.LASF165
 13831 10ed 01       		.byte	0x1
 13832 10ee 710B     		.2byte	0xb71
 13833 10f0 00000000 		.4byte	.LFB101
 13834 10f4 4C000000 		.4byte	.LFE101-.LFB101
 13835 10f8 01       		.uleb128 0x1
 13836 10f9 9C       		.byte	0x9c
 13837 10fa 22       		.uleb128 0x22
 13838 10fb 89110000 		.4byte	.LASF166
 13839 10ff 01       		.byte	0x1
 13840 1100 800B     		.2byte	0xb80
 13841 1102 00000000 		.4byte	.LFB102
 13842 1106 1C000000 		.4byte	.LFE102-.LFB102
 13843 110a 01       		.uleb128 0x1
 13844 110b 9C       		.byte	0x9c
 13845 110c 21       		.uleb128 0x21
 13846 110d 2D100000 		.4byte	.LASF167
 13847 1111 01       		.byte	0x1
 13848 1112 8C0B     		.2byte	0xb8c
 13849 1114 00000000 		.4byte	.LFB103
 13850 1118 B0000000 		.4byte	.LFE103-.LFB103
 13851 111c 01       		.uleb128 0x1
 13852 111d 9C       		.byte	0x9c
 13853 111e 3A110000 		.4byte	0x113a
 13854 1122 15       		.uleb128 0x15
 13855 1123 5A000000 		.4byte	.LBB61
 13856 1127 28000000 		.4byte	.LBE61-.LBB61
 13857 112b 1C       		.uleb128 0x1c
 13858 112c 6900     		.ascii	"i\000"
 13859 112e 01       		.byte	0x1
 13860 112f 980B     		.2byte	0xb98
 13861 1131 9F000000 		.4byte	0x9f
 13862 1135 02       		.uleb128 0x2
 13863 1136 91       		.byte	0x91
 13864 1137 74       		.sleb128 -12
 13865 1138 00       		.byte	0
 13866 1139 00       		.byte	0
 13867 113a 21       		.uleb128 0x21
 13868 113b 97090000 		.4byte	.LASF168
 13869 113f 01       		.byte	0x1
 13870 1140 A00B     		.2byte	0xba0
 13871 1142 00000000 		.4byte	.LFB104
 13872 1146 54010000 		.4byte	.LFE104-.LFB104
 13873 114a 01       		.uleb128 0x1
 13874 114b 9C       		.byte	0x9c
 13875 114c AD110000 		.4byte	0x11ad
 13876 1150 1A       		.uleb128 0x1a
 13877 1151 440A0000 		.4byte	.LASF84
 13878 1155 01       		.byte	0x1
 13879 1156 B00B     		.2byte	0xbb0
 13880 1158 CE000000 		.4byte	0xce
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 302


 13881 115c 02       		.uleb128 0x2
 13882 115d 91       		.byte	0x91
 13883 115e 72       		.sleb128 -14
 13884 115f 20       		.uleb128 0x20
 13885 1160 0C000000 		.4byte	.LBB62
 13886 1164 40000000 		.4byte	.LBE62-.LBB62
 13887 1168 7A110000 		.4byte	0x117a
 13888 116c 1C       		.uleb128 0x1c
 13889 116d 6900     		.ascii	"i\000"
 13890 116f 01       		.byte	0x1
 13891 1170 A40B     		.2byte	0xba4
 13892 1172 9F000000 		.4byte	0x9f
 13893 1176 02       		.uleb128 0x2
 13894 1177 91       		.byte	0x91
 13895 1178 74       		.sleb128 -12
 13896 1179 00       		.byte	0
 13897 117a 20       		.uleb128 0x20
 13898 117b 50000000 		.4byte	.LBB63
 13899 117f 2A000000 		.4byte	.LBE63-.LBB63
 13900 1183 95110000 		.4byte	0x1195
 13901 1187 1C       		.uleb128 0x1c
 13902 1188 6900     		.ascii	"i\000"
 13903 118a 01       		.byte	0x1
 13904 118b B10B     		.2byte	0xbb1
 13905 118d 9F000000 		.4byte	0x9f
 13906 1191 02       		.uleb128 0x2
 13907 1192 91       		.byte	0x91
 13908 1193 6C       		.sleb128 -20
 13909 1194 00       		.byte	0
 13910 1195 15       		.uleb128 0x15
 13911 1196 9E000000 		.4byte	.LBB64
 13912 119a 98000000 		.4byte	.LBE64-.LBB64
 13913 119e 1C       		.uleb128 0x1c
 13914 119f 6900     		.ascii	"i\000"
 13915 11a1 01       		.byte	0x1
 13916 11a2 B90B     		.2byte	0xbb9
 13917 11a4 9F000000 		.4byte	0x9f
 13918 11a8 02       		.uleb128 0x2
 13919 11a9 91       		.byte	0x91
 13920 11aa 68       		.sleb128 -24
 13921 11ab 00       		.byte	0
 13922 11ac 00       		.byte	0
 13923 11ad 17       		.uleb128 0x17
 13924 11ae DB130000 		.4byte	.LASF169
 13925 11b2 01       		.byte	0x1
 13926 11b3 C30B     		.2byte	0xbc3
 13927 11b5 00000000 		.4byte	.LFB105
 13928 11b9 A0000000 		.4byte	.LFE105-.LFB105
 13929 11bd 01       		.uleb128 0x1
 13930 11be 9C       		.byte	0x9c
 13931 11bf 21       		.uleb128 0x21
 13932 11c0 3A070000 		.4byte	.LASF170
 13933 11c4 01       		.byte	0x1
 13934 11c5 D30B     		.2byte	0xbd3
 13935 11c7 00000000 		.4byte	.LFB106
 13936 11cb BC000000 		.4byte	.LFE106-.LFB106
 13937 11cf 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 303


 13938 11d0 9C       		.byte	0x9c
 13939 11d1 ED110000 		.4byte	0x11ed
 13940 11d5 15       		.uleb128 0x15
 13941 11d6 0C000000 		.4byte	.LBB65
 13942 11da 9C000000 		.4byte	.LBE65-.LBB65
 13943 11de 1C       		.uleb128 0x1c
 13944 11df 6900     		.ascii	"i\000"
 13945 11e1 01       		.byte	0x1
 13946 11e2 D70B     		.2byte	0xbd7
 13947 11e4 9F000000 		.4byte	0x9f
 13948 11e8 02       		.uleb128 0x2
 13949 11e9 91       		.byte	0x91
 13950 11ea 74       		.sleb128 -12
 13951 11eb 00       		.byte	0
 13952 11ec 00       		.byte	0
 13953 11ed 09       		.uleb128 0x9
 13954 11ee EF000000 		.4byte	0xef
 13955 11f2 FD110000 		.4byte	0x11fd
 13956 11f6 0A       		.uleb128 0xa
 13957 11f7 4C010000 		.4byte	0x14c
 13958 11fb 01       		.byte	0x1
 13959 11fc 00       		.byte	0
 13960 11fd 1A       		.uleb128 0x1a
 13961 11fe CB050000 		.4byte	.LASF171
 13962 1202 01       		.byte	0x1
 13963 1203 2401     		.2byte	0x124
 13964 1205 ED110000 		.4byte	0x11ed
 13965 1209 05       		.uleb128 0x5
 13966 120a 03       		.byte	0x3
 13967 120b 6C000000 		.4byte	eepromArray
 13968 120f 23       		.uleb128 0x23
 13969 1210 F3110000 		.4byte	.LASF172
 13970 1214 08       		.byte	0x8
 13971 1215 F3       		.byte	0xf3
 13972 1216 40010000 		.4byte	0x140
 13973 121a 23       		.uleb128 0x23
 13974 121b DB120000 		.4byte	.LASF173
 13975 121f 08       		.byte	0x8
 13976 1220 F9       		.byte	0xf9
 13977 1221 40010000 		.4byte	0x140
 13978 1225 09       		.uleb128 0x9
 13979 1226 EF000000 		.4byte	0xef
 13980 122a 35120000 		.4byte	0x1235
 13981 122e 0A       		.uleb128 0xa
 13982 122f 4C010000 		.4byte	0x14c
 13983 1233 3F       		.byte	0x3f
 13984 1234 00       		.byte	0
 13985 1235 23       		.uleb128 0x23
 13986 1236 580A0000 		.4byte	.LASF174
 13987 123a 08       		.byte	0x8
 13988 123b FA       		.byte	0xfa
 13989 123c 25120000 		.4byte	0x1225
 13990 1240 23       		.uleb128 0x23
 13991 1241 43060000 		.4byte	.LASF175
 13992 1245 08       		.byte	0x8
 13993 1246 FE       		.byte	0xfe
 13994 1247 40010000 		.4byte	0x140
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 304


 13995 124b 23       		.uleb128 0x23
 13996 124c 3A120000 		.4byte	.LASF176
 13997 1250 08       		.byte	0x8
 13998 1251 FF       		.byte	0xff
 13999 1252 25120000 		.4byte	0x1225
 14000 1256 23       		.uleb128 0x23
 14001 1257 C3000000 		.4byte	.LASF177
 14002 125b 09       		.byte	0x9
 14003 125c 82       		.byte	0x82
 14004 125d E0010000 		.4byte	0x1e0
 14005 1261 09       		.uleb128 0x9
 14006 1262 72120000 		.4byte	0x1272
 14007 1266 72120000 		.4byte	0x1272
 14008 126a 24       		.uleb128 0x24
 14009 126b 4C010000 		.4byte	0x14c
 14010 126f FF03     		.2byte	0x3ff
 14011 1271 00       		.byte	0
 14012 1272 08       		.uleb128 0x8
 14013 1273 B8000000 		.4byte	0xb8
 14014 1277 25       		.uleb128 0x25
 14015 1278 37090000 		.4byte	.LASF178
 14016 127c 01       		.byte	0x1
 14017 127d 3101     		.2byte	0x131
 14018 127f 89120000 		.4byte	0x1289
 14019 1283 05       		.uleb128 0x5
 14020 1284 03       		.byte	0x3
 14021 1285 00000000 		.4byte	Em_EEPROM_em_EepromStorage
 14022 1289 08       		.uleb128 0x8
 14023 128a 61120000 		.4byte	0x1261
 14024 128e 23       		.uleb128 0x23
 14025 128f 7A070000 		.4byte	.LASF179
 14026 1293 0A       		.byte	0xa
 14027 1294 F9       		.byte	0xf9
 14028 1295 EF000000 		.4byte	0xef
 14029 1299 26       		.uleb128 0x26
 14030 129a 2F0C0000 		.4byte	.LASF180
 14031 129e 0B       		.byte	0xb
 14032 129f 1207     		.2byte	0x712
 14033 12a1 A5120000 		.4byte	0x12a5
 14034 12a5 06       		.uleb128 0x6
 14035 12a6 D9000000 		.4byte	0xd9
 14036 12aa 09       		.uleb128 0x9
 14037 12ab 24020000 		.4byte	0x224
 14038 12af BA120000 		.4byte	0x12ba
 14039 12b3 0A       		.uleb128 0xa
 14040 12b4 4C010000 		.4byte	0x14c
 14041 12b8 FF       		.byte	0xff
 14042 12b9 00       		.byte	0
 14043 12ba 25       		.uleb128 0x25
 14044 12bb 26010000 		.4byte	.LASF181
 14045 12bf 01       		.byte	0x1
 14046 12c0 9901     		.2byte	0x199
 14047 12c2 CC120000 		.4byte	0x12cc
 14048 12c6 05       		.uleb128 0x5
 14049 12c7 03       		.byte	0x3
 14050 12c8 00000000 		.4byte	I2Cbuff1
 14051 12cc 06       		.uleb128 0x6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 305


 14052 12cd AA120000 		.4byte	0x12aa
 14053 12d1 09       		.uleb128 0x9
 14054 12d2 B8000000 		.4byte	0xb8
 14055 12d6 E2120000 		.4byte	0x12e2
 14056 12da 24       		.uleb128 0x24
 14057 12db 4C010000 		.4byte	0x14c
 14058 12df FF07     		.2byte	0x7ff
 14059 12e1 00       		.byte	0
 14060 12e2 27       		.uleb128 0x27
 14061 12e3 08100000 		.4byte	.LASF182
 14062 12e7 01       		.byte	0x1
 14063 12e8 33       		.byte	0x33
 14064 12e9 D1120000 		.4byte	0x12d1
 14065 12ed 05       		.uleb128 0x5
 14066 12ee 03       		.byte	0x3
 14067 12ef 00000000 		.4byte	sysexBuffer
 14068 12f3 27       		.uleb128 0x27
 14069 12f4 F8030000 		.4byte	.LASF183
 14070 12f8 01       		.byte	0x1
 14071 12f9 34       		.byte	0x34
 14072 12fa E4000000 		.4byte	0xe4
 14073 12fe 05       		.uleb128 0x5
 14074 12ff 03       		.byte	0x3
 14075 1300 00000000 		.4byte	sysexPointer
 14076 1304 27       		.uleb128 0x27
 14077 1305 E00C0000 		.4byte	.LASF184
 14078 1309 01       		.byte	0x1
 14079 130a 35       		.byte	0x35
 14080 130b B8000000 		.4byte	0xb8
 14081 130f 05       		.uleb128 0x5
 14082 1310 03       		.byte	0x3
 14083 1311 00000000 		.4byte	receivingSysex
 14084 1315 27       		.uleb128 0x27
 14085 1316 93070000 		.4byte	.LASF185
 14086 131a 01       		.byte	0x1
 14087 131b 36       		.byte	0x36
 14088 131c B8000000 		.4byte	0xb8
 14089 1320 05       		.uleb128 0x5
 14090 1321 03       		.byte	0x3
 14091 1322 00000000 		.4byte	parsingSysex
 14092 1326 09       		.uleb128 0x9
 14093 1327 24020000 		.4byte	0x224
 14094 132b 37130000 		.4byte	0x1337
 14095 132f 24       		.uleb128 0x24
 14096 1330 4C010000 		.4byte	0x14c
 14097 1334 FF07     		.2byte	0x7ff
 14098 1336 00       		.byte	0
 14099 1337 27       		.uleb128 0x27
 14100 1338 1A000000 		.4byte	.LASF186
 14101 133c 01       		.byte	0x1
 14102 133d 37       		.byte	0x37
 14103 133e 48130000 		.4byte	0x1348
 14104 1342 05       		.uleb128 0x5
 14105 1343 03       		.byte	0x3
 14106 1344 00000000 		.4byte	presetArray
 14107 1348 06       		.uleb128 0x6
 14108 1349 26130000 		.4byte	0x1326
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 306


 14109 134d 27       		.uleb128 0x27
 14110 134e 2A030000 		.4byte	.LASF187
 14111 1352 01       		.byte	0x1
 14112 1353 38       		.byte	0x38
 14113 1354 B8000000 		.4byte	0xb8
 14114 1358 05       		.uleb128 0x5
 14115 1359 03       		.byte	0x3
 14116 135a 00000000 		.4byte	presetNumberToWrite
 14117 135e 27       		.uleb128 0x27
 14118 135f 460F0000 		.4byte	.LASF188
 14119 1363 01       		.byte	0x1
 14120 1364 39       		.byte	0x39
 14121 1365 B8000000 		.4byte	0xb8
 14122 1369 05       		.uleb128 0x5
 14123 136a 03       		.byte	0x3
 14124 136b 00000000 		.4byte	copedentNumberToWrite
 14125 136f 27       		.uleb128 0x27
 14126 1370 A0020000 		.4byte	.LASF189
 14127 1374 01       		.byte	0x1
 14128 1375 3A       		.byte	0x3a
 14129 1376 B8000000 		.4byte	0xb8
 14130 137a 05       		.uleb128 0x5
 14131 137b 03       		.byte	0x3
 14132 137c 00000000 		.4byte	sendMessageEnd
 14133 1380 27       		.uleb128 0x27
 14134 1381 F20F0000 		.4byte	.LASF190
 14135 1385 01       		.byte	0x1
 14136 1386 3C       		.byte	0x3c
 14137 1387 B8000000 		.4byte	0xb8
 14138 138b 05       		.uleb128 0x5
 14139 138c 03       		.byte	0x3
 14140 138d 00000000 		.4byte	sendSingleParamUpdate
 14141 1391 27       		.uleb128 0x27
 14142 1392 ED100000 		.4byte	.LASF191
 14143 1396 01       		.byte	0x1
 14144 1397 3D       		.byte	0x3d
 14145 1398 B8000000 		.4byte	0xb8
 14146 139c 05       		.uleb128 0x5
 14147 139d 03       		.byte	0x3
 14148 139e 00000000 		.4byte	singleParamToUpdateHigh
 14149 13a2 27       		.uleb128 0x27
 14150 13a3 3C0C0000 		.4byte	.LASF192
 14151 13a7 01       		.byte	0x1
 14152 13a8 3E       		.byte	0x3e
 14153 13a9 B8000000 		.4byte	0xb8
 14154 13ad 05       		.uleb128 0x5
 14155 13ae 03       		.byte	0x3
 14156 13af 00000000 		.4byte	singleParamToUpdateLow
 14157 13b3 27       		.uleb128 0x27
 14158 13b4 1A0C0000 		.4byte	.LASF193
 14159 13b8 01       		.byte	0x1
 14160 13b9 3F       		.byte	0x3f
 14161 13ba B8000000 		.4byte	0xb8
 14162 13be 05       		.uleb128 0x5
 14163 13bf 03       		.byte	0x3
 14164 13c0 00000000 		.4byte	singleParamValueHigh
 14165 13c4 27       		.uleb128 0x27
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 307


 14166 13c5 F6060000 		.4byte	.LASF194
 14167 13c9 01       		.byte	0x1
 14168 13ca 40       		.byte	0x40
 14169 13cb B8000000 		.4byte	0xb8
 14170 13cf 05       		.uleb128 0x5
 14171 13d0 03       		.byte	0x3
 14172 13d1 00000000 		.4byte	singleParamValueLow
 14173 13d5 27       		.uleb128 0x27
 14174 13d6 110F0000 		.4byte	.LASF195
 14175 13da 01       		.byte	0x1
 14176 13db 42       		.byte	0x42
 14177 13dc B8000000 		.4byte	0xb8
 14178 13e0 05       		.uleb128 0x5
 14179 13e1 03       		.byte	0x3
 14180 13e2 00000000 		.4byte	sendMappingChangeUpdate
 14181 13e6 27       		.uleb128 0x27
 14182 13e7 9E0F0000 		.4byte	.LASF196
 14183 13eb 01       		.byte	0x1
 14184 13ec 45       		.byte	0x45
 14185 13ed AD000000 		.4byte	0xad
 14186 13f1 05       		.uleb128 0x5
 14187 13f2 03       		.byte	0x3
 14188 13f3 00000000 		.4byte	transposeSemitones
 14189 13f7 27       		.uleb128 0x27
 14190 13f8 2B070000 		.4byte	.LASF197
 14191 13fc 01       		.byte	0x1
 14192 13fd 46       		.byte	0x46
 14193 13fe AD000000 		.4byte	0xad
 14194 1402 05       		.uleb128 0x5
 14195 1403 03       		.byte	0x3
 14196 1404 00000000 		.4byte	transposeCents
 14197 1408 27       		.uleb128 0x27
 14198 1409 0F0C0000 		.4byte	.LASF198
 14199 140d 01       		.byte	0x1
 14200 140e 47       		.byte	0x47
 14201 140f B8000000 		.4byte	0xb8
 14202 1413 05       		.uleb128 0x5
 14203 1414 03       		.byte	0x3
 14204 1415 00000000 		.4byte	midiSendOn
 14205 1419 27       		.uleb128 0x27
 14206 141a E4030000 		.4byte	.LASF199
 14207 141e 01       		.byte	0x1
 14208 141f 48       		.byte	0x48
 14209 1420 B8000000 		.4byte	0xb8
 14210 1424 05       		.uleb128 0x5
 14211 1425 03       		.byte	0x3
 14212 1426 00000000 		.4byte	midiBarSendOn
 14213 142a 27       		.uleb128 0x27
 14214 142b 7D130000 		.4byte	.LASF200
 14215 142f 01       		.byte	0x1
 14216 1430 49       		.byte	0x49
 14217 1431 B8000000 		.4byte	0xb8
 14218 1435 05       		.uleb128 0x5
 14219 1436 03       		.byte	0x3
 14220 1437 00000000 		.4byte	pitchSmoothing
 14221 143b 27       		.uleb128 0x27
 14222 143c D70E0000 		.4byte	.LASF201
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 308


 14223 1440 01       		.byte	0x1
 14224 1441 4A       		.byte	0x4a
 14225 1442 B8000000 		.4byte	0xb8
 14226 1446 05       		.uleb128 0x5
 14227 1447 03       		.byte	0x3
 14228 1448 00000000 		.4byte	controlSmoothing
 14229 144c 27       		.uleb128 0x27
 14230 144d 49000000 		.4byte	.LASF202
 14231 1451 01       		.byte	0x1
 14232 1452 4B       		.byte	0x4b
 14233 1453 B8000000 		.4byte	0xb8
 14234 1457 05       		.uleb128 0x5
 14235 1458 03       		.byte	0x3
 14236 1459 00000000 		.4byte	deadzones
 14237 145d 27       		.uleb128 0x27
 14238 145e 06130000 		.4byte	.LASF203
 14239 1462 01       		.byte	0x1
 14240 1463 4C       		.byte	0x4c
 14241 1464 B8000000 		.4byte	0xb8
 14242 1468 05       		.uleb128 0x5
 14243 1469 03       		.byte	0x3
 14244 146a 00000000 		.4byte	octaveAction
 14245 146e 09       		.uleb128 0x9
 14246 146f B8000000 		.4byte	0xb8
 14247 1473 7E140000 		.4byte	0x147e
 14248 1477 0A       		.uleb128 0xa
 14249 1478 4C010000 		.4byte	0x14c
 14250 147c 01       		.byte	0x1
 14251 147d 00       		.byte	0
 14252 147e 27       		.uleb128 0x27
 14253 147f 8D0B0000 		.4byte	.LASF204
 14254 1483 01       		.byte	0x1
 14255 1484 4D       		.byte	0x4d
 14256 1485 6E140000 		.4byte	0x146e
 14257 1489 05       		.uleb128 0x5
 14258 148a 03       		.byte	0x3
 14259 148b 00000000 		.4byte	stringRepresentation
 14260 148f 27       		.uleb128 0x27
 14261 1490 00000000 		.4byte	.LASF205
 14262 1494 01       		.byte	0x1
 14263 1495 58       		.byte	0x58
 14264 1496 B8000000 		.4byte	0xb8
 14265 149a 05       		.uleb128 0x5
 14266 149b 03       		.byte	0x3
 14267 149c 00000000 		.4byte	presetArraySection
 14268 14a0 27       		.uleb128 0x27
 14269 14a1 4A0B0000 		.4byte	.LASF206
 14270 14a5 01       		.byte	0x1
 14271 14a6 5A       		.byte	0x5a
 14272 14a7 CE000000 		.4byte	0xce
 14273 14ab 05       		.uleb128 0x5
 14274 14ac 03       		.byte	0x3
 14275 14ad 00000000 		.4byte	messageArraySendCount
 14276 14b1 27       		.uleb128 0x27
 14277 14b2 0F110000 		.4byte	.LASF207
 14278 14b6 01       		.byte	0x1
 14279 14b7 5B       		.byte	0x5b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 309


 14280 14b8 CE000000 		.4byte	0xce
 14281 14bc 05       		.uleb128 0x5
 14282 14bd 03       		.byte	0x3
 14283 14be 00000000 		.4byte	messageArraySize
 14284 14c2 27       		.uleb128 0x27
 14285 14c3 08080000 		.4byte	.LASF208
 14286 14c7 01       		.byte	0x1
 14287 14c8 5D       		.byte	0x5d
 14288 14c9 B8000000 		.4byte	0xb8
 14289 14cd 05       		.uleb128 0x5
 14290 14ce 03       		.byte	0x3
 14291 14cf 00000000 		.4byte	sysexMessageInProgress
 14292 14d3 27       		.uleb128 0x27
 14293 14d4 14100000 		.4byte	.LASF209
 14294 14d8 01       		.byte	0x1
 14295 14d9 5F       		.byte	0x5f
 14296 14da B8000000 		.4byte	0xb8
 14297 14de 05       		.uleb128 0x5
 14298 14df 03       		.byte	0x3
 14299 14e0 00000000 		.4byte	bufCount
 14300 14e4 27       		.uleb128 0x27
 14301 14e5 3A000000 		.4byte	.LASF210
 14302 14e9 01       		.byte	0x1
 14303 14ea 60       		.byte	0x60
 14304 14eb 24020000 		.4byte	0x224
 14305 14ef 05       		.uleb128 0x5
 14306 14f0 03       		.byte	0x3
 14307 14f1 00000000 		.4byte	sendingMessage
 14308 14f5 27       		.uleb128 0x27
 14309 14f6 BC030000 		.4byte	.LASF211
 14310 14fa 01       		.byte	0x1
 14311 14fb 61       		.byte	0x61
 14312 14fc 24020000 		.4byte	0x224
 14313 1500 05       		.uleb128 0x5
 14314 1501 03       		.byte	0x3
 14315 1502 00000000 		.4byte	sendKnobs
 14316 1506 27       		.uleb128 0x27
 14317 1507 08030000 		.4byte	.LASF212
 14318 150b 01       		.byte	0x1
 14319 150c 62       		.byte	0x62
 14320 150d E4000000 		.4byte	0xe4
 14321 1511 05       		.uleb128 0x5
 14322 1512 03       		.byte	0x3
 14323 1513 00000000 		.4byte	currentFloat
 14324 1517 27       		.uleb128 0x27
 14325 1518 B6040000 		.4byte	.LASF213
 14326 151c 01       		.byte	0x1
 14327 151d 63       		.byte	0x63
 14328 151e E4000000 		.4byte	0xe4
 14329 1522 05       		.uleb128 0x5
 14330 1523 03       		.byte	0x3
 14331 1524 00000000 		.4byte	mapCount
 14332 1528 27       		.uleb128 0x27
 14333 1529 DD010000 		.4byte	.LASF214
 14334 152d 01       		.byte	0x1
 14335 152e 65       		.byte	0x65
 14336 152f CE000000 		.4byte	0xce
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 310


 14337 1533 05       		.uleb128 0x5
 14338 1534 03       		.byte	0x3
 14339 1535 00000000 		.4byte	valsCount
 14340 1539 27       		.uleb128 0x27
 14341 153a 4B050000 		.4byte	.LASF215
 14342 153e 01       		.byte	0x1
 14343 153f 66       		.byte	0x66
 14344 1540 CE000000 		.4byte	0xce
 14345 1544 05       		.uleb128 0x5
 14346 1545 03       		.byte	0x3
 14347 1546 00000000 		.4byte	mapCountExpectation
 14348 154a 27       		.uleb128 0x27
 14349 154b 1A010000 		.4byte	.LASF216
 14350 154f 01       		.byte	0x1
 14351 1550 67       		.byte	0x67
 14352 1551 CE000000 		.4byte	0xce
 14353 1555 05       		.uleb128 0x5
 14354 1556 03       		.byte	0x3
 14355 1557 00000000 		.4byte	numMappings
 14356 155b 27       		.uleb128 0x27
 14357 155c B10F0000 		.4byte	.LASF217
 14358 1560 01       		.byte	0x1
 14359 1561 68       		.byte	0x68
 14360 1562 24020000 		.4byte	0x224
 14361 1566 05       		.uleb128 0x5
 14362 1567 03       		.byte	0x3
 14363 1568 00000000 		.4byte	parseThatMF
 14364 156c 27       		.uleb128 0x27
 14365 156d E8040000 		.4byte	.LASF218
 14366 1571 01       		.byte	0x1
 14367 1572 69       		.byte	0x69
 14368 1573 7D150000 		.4byte	0x157d
 14369 1577 05       		.uleb128 0x5
 14370 1578 03       		.byte	0x3
 14371 1579 00000000 		.4byte	valCheck
 14372 157d 06       		.uleb128 0x6
 14373 157e 13010000 		.4byte	0x113
 14374 1582 27       		.uleb128 0x27
 14375 1583 AE0E0000 		.4byte	.LASF219
 14376 1587 01       		.byte	0x1
 14377 1588 6A       		.byte	0x6a
 14378 1589 7D150000 		.4byte	0x157d
 14379 158d 05       		.uleb128 0x5
 14380 158e 03       		.byte	0x3
 14381 158f 00000000 		.4byte	testVal
 14382 1593 27       		.uleb128 0x27
 14383 1594 EA090000 		.4byte	.LASF220
 14384 1598 01       		.byte	0x1
 14385 1599 6C       		.byte	0x6c
 14386 159a 9F000000 		.4byte	0x9f
 14387 159e 05       		.uleb128 0x5
 14388 159f 03       		.byte	0x3
 14389 15a0 00000000 		.4byte	numStrings
 14390 15a4 27       		.uleb128 0x27
 14391 15a5 820F0000 		.4byte	.LASF221
 14392 15a9 01       		.byte	0x1
 14393 15aa 72       		.byte	0x72
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 311


 14394 15ab 40010000 		.4byte	0x140
 14395 15af 05       		.uleb128 0x5
 14396 15b0 03       		.byte	0x3
 14397 15b1 00000000 		.4byte	usbActivityCounter
 14398 15b5 27       		.uleb128 0x27
 14399 15b6 5F0E0000 		.4byte	.LASF152
 14400 15ba 01       		.byte	0x1
 14401 15bb 73       		.byte	0x73
 14402 15bc 5E010000 		.4byte	0x15e
 14403 15c0 05       		.uleb128 0x5
 14404 15c1 03       		.byte	0x3
 14405 15c2 00000000 		.4byte	midiMsg
 14406 15c6 27       		.uleb128 0x27
 14407 15c7 2C130000 		.4byte	.LASF222
 14408 15cb 01       		.byte	0x1
 14409 15cc 74       		.byte	0x74
 14410 15cd B8000000 		.4byte	0xb8
 14411 15d1 05       		.uleb128 0x5
 14412 15d2 03       		.byte	0x3
 14413 15d3 00000000 		.4byte	currentVBUS
 14414 15d7 27       		.uleb128 0x27
 14415 15d8 1D130000 		.4byte	.LASF223
 14416 15dc 01       		.byte	0x1
 14417 15dd 75       		.byte	0x75
 14418 15de B8000000 		.4byte	0xb8
 14419 15e2 05       		.uleb128 0x5
 14420 15e3 03       		.byte	0x3
 14421 15e4 00000000 		.4byte	prevVBUS
 14422 15e8 27       		.uleb128 0x27
 14423 15e9 D30F0000 		.4byte	.LASF224
 14424 15ed 01       		.byte	0x1
 14425 15ee 76       		.byte	0x76
 14426 15ef 24020000 		.4byte	0x224
 14427 15f3 05       		.uleb128 0x5
 14428 15f4 03       		.byte	0x3
 14429 15f5 00000000 		.4byte	USB_active
 14430 15f9 27       		.uleb128 0x27
 14431 15fa 3B0B0000 		.4byte	.LASF225
 14432 15fe 01       		.byte	0x1
 14433 15ff 77       		.byte	0x77
 14434 1600 24020000 		.4byte	0x224
 14435 1604 05       		.uleb128 0x5
 14436 1605 03       		.byte	0x3
 14437 1606 00000000 		.4byte	USB_check_flag
 14438 160a 09       		.uleb128 0x9
 14439 160b B8000000 		.4byte	0xb8
 14440 160f 1A160000 		.4byte	0x161a
 14441 1613 0A       		.uleb128 0xa
 14442 1614 4C010000 		.4byte	0x14c
 14443 1618 05       		.byte	0x5
 14444 1619 00       		.byte	0
 14445 161a 27       		.uleb128 0x27
 14446 161b 91120000 		.4byte	.LASF226
 14447 161f 01       		.byte	0x1
 14448 1620 79       		.byte	0x79
 14449 1621 0A160000 		.4byte	0x160a
 14450 1625 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 312


 14451 1626 03       		.byte	0x3
 14452 1627 00000000 		.4byte	mappingArray
 14453 162b 09       		.uleb128 0x9
 14454 162c EF000000 		.4byte	0xef
 14455 1630 3B160000 		.4byte	0x163b
 14456 1634 0A       		.uleb128 0xa
 14457 1635 4C010000 		.4byte	0x14c
 14458 1639 1F       		.byte	0x1f
 14459 163a 00       		.byte	0
 14460 163b 27       		.uleb128 0x27
 14461 163c 1F120000 		.4byte	.LASF227
 14462 1640 01       		.byte	0x1
 14463 1641 7B       		.byte	0x7b
 14464 1642 2B160000 		.4byte	0x162b
 14465 1646 05       		.uleb128 0x5
 14466 1647 03       		.byte	0x3
 14467 1648 00000000 		.4byte	inBuffer
 14468 164c 27       		.uleb128 0x27
 14469 164d 51140000 		.4byte	.LASF228
 14470 1651 01       		.byte	0x1
 14471 1652 7D       		.byte	0x7d
 14472 1653 2B160000 		.4byte	0x162b
 14473 1657 05       		.uleb128 0x5
 14474 1658 03       		.byte	0x3
 14475 1659 00000000 		.4byte	myArray
 14476 165d 27       		.uleb128 0x27
 14477 165e C9130000 		.4byte	.LASF229
 14478 1662 01       		.byte	0x1
 14479 1663 7E       		.byte	0x7e
 14480 1664 ED110000 		.4byte	0x11ed
 14481 1668 05       		.uleb128 0x5
 14482 1669 03       		.byte	0x3
 14483 166a 00000000 		.4byte	myInputArray
 14484 166e 09       		.uleb128 0x9
 14485 166f D9000000 		.4byte	0xd9
 14486 1673 7E160000 		.4byte	0x167e
 14487 1677 0A       		.uleb128 0xa
 14488 1678 4C010000 		.4byte	0x14c
 14489 167c 01       		.byte	0x1
 14490 167d 00       		.byte	0
 14491 167e 27       		.uleb128 0x27
 14492 167f 7B090000 		.4byte	.LASF230
 14493 1683 01       		.byte	0x1
 14494 1684 7F       		.byte	0x7f
 14495 1685 6E160000 		.4byte	0x166e
 14496 1689 05       		.uleb128 0x5
 14497 168a 03       		.byte	0x3
 14498 168b 00000000 		.4byte	linearPotValue32Bit
 14499 168f 28       		.uleb128 0x28
 14500 1690 6900     		.ascii	"i\000"
 14501 1692 01       		.byte	0x1
 14502 1693 80       		.byte	0x80
 14503 1694 B8000000 		.4byte	0xb8
 14504 1698 05       		.uleb128 0x5
 14505 1699 03       		.byte	0x3
 14506 169a 00000000 		.4byte	i
 14507 169e 27       		.uleb128 0x27
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 313


 14508 169f 790B0000 		.4byte	.LASF231
 14509 16a3 01       		.byte	0x1
 14510 16a4 81       		.byte	0x81
 14511 16a5 B8000000 		.4byte	0xb8
 14512 16a9 05       		.uleb128 0x5
 14513 16aa 03       		.byte	0x3
 14514 16ab 00000000 		.4byte	counter
 14515 16af 09       		.uleb128 0x9
 14516 16b0 B8000000 		.4byte	0xb8
 14517 16b4 BF160000 		.4byte	0x16bf
 14518 16b8 0A       		.uleb128 0xa
 14519 16b9 4C010000 		.4byte	0x14c
 14520 16bd 1F       		.byte	0x1f
 14521 16be 00       		.byte	0
 14522 16bf 27       		.uleb128 0x27
 14523 16c0 A0070000 		.4byte	.LASF232
 14524 16c4 01       		.byte	0x1
 14525 16c5 82       		.byte	0x82
 14526 16c6 AF160000 		.4byte	0x16af
 14527 16ca 05       		.uleb128 0x5
 14528 16cb 03       		.byte	0x3
 14529 16cc 00000000 		.4byte	returnedData
 14530 16d0 27       		.uleb128 0x27
 14531 16d1 E7010000 		.4byte	.LASF233
 14532 16d5 01       		.byte	0x1
 14533 16d6 83       		.byte	0x83
 14534 16d7 D9000000 		.4byte	0xd9
 14535 16db 05       		.uleb128 0x5
 14536 16dc 03       		.byte	0x3
 14537 16dd 00000000 		.4byte	temper
 14538 16e1 09       		.uleb128 0x9
 14539 16e2 9F000000 		.4byte	0x9f
 14540 16e6 F1160000 		.4byte	0x16f1
 14541 16ea 0A       		.uleb128 0xa
 14542 16eb 4C010000 		.4byte	0x14c
 14543 16ef 0A       		.byte	0xa
 14544 16f0 00       		.byte	0
 14545 16f1 27       		.uleb128 0x27
 14546 16f2 D0110000 		.4byte	.LASF234
 14547 16f6 01       		.byte	0x1
 14548 16f7 84       		.byte	0x84
 14549 16f8 E1160000 		.4byte	0x16e1
 14550 16fc 05       		.uleb128 0x5
 14551 16fd 03       		.byte	0x3
 14552 16fe 00000000 		.4byte	previousButtons
 14553 1702 27       		.uleb128 0x27
 14554 1703 77010000 		.4byte	.LASF235
 14555 1707 01       		.byte	0x1
 14556 1708 85       		.byte	0x85
 14557 1709 9F000000 		.4byte	0x9f
 14558 170d 05       		.uleb128 0x5
 14559 170e 03       		.byte	0x3
 14560 170f 00000000 		.4byte	octave
 14561 1713 09       		.uleb128 0x9
 14562 1714 CE000000 		.4byte	0xce
 14563 1718 23170000 		.4byte	0x1723
 14564 171c 0A       		.uleb128 0xa
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 314


 14565 171d 4C010000 		.4byte	0x14c
 14566 1721 09       		.byte	0x9
 14567 1722 00       		.byte	0
 14568 1723 27       		.uleb128 0x27
 14569 1724 E4090000 		.4byte	.LASF236
 14570 1728 01       		.byte	0x1
 14571 1729 86       		.byte	0x86
 14572 172a 13170000 		.4byte	0x1713
 14573 172e 05       		.uleb128 0x5
 14574 172f 03       		.byte	0x3
 14575 1730 00000000 		.4byte	angle
 14576 1734 27       		.uleb128 0x27
 14577 1735 DF0D0000 		.4byte	.LASF237
 14578 1739 01       		.byte	0x1
 14579 173a 87       		.byte	0x87
 14580 173b 13170000 		.4byte	0x1713
 14581 173f 05       		.uleb128 0x5
 14582 1740 03       		.byte	0x3
 14583 1741 00000000 		.4byte	prevAngle
 14584 1745 09       		.uleb128 0x9
 14585 1746 CE000000 		.4byte	0xce
 14586 174a 55170000 		.4byte	0x1755
 14587 174e 0A       		.uleb128 0xa
 14588 174f 4C010000 		.4byte	0x14c
 14589 1753 03       		.byte	0x3
 14590 1754 00       		.byte	0
 14591 1755 27       		.uleb128 0x27
 14592 1756 370E0000 		.4byte	.LASF238
 14593 175a 01       		.byte	0x1
 14594 175b 89       		.byte	0x89
 14595 175c 45170000 		.4byte	0x1745
 14596 1760 05       		.uleb128 0x5
 14597 1761 03       		.byte	0x3
 14598 1762 00000000 		.4byte	ADC_values
 14599 1766 27       		.uleb128 0x27
 14600 1767 E7050000 		.4byte	.LASF239
 14601 176b 01       		.byte	0x1
 14602 176c 8A       		.byte	0x8a
 14603 176d CE000000 		.4byte	0xce
 14604 1771 05       		.uleb128 0x5
 14605 1772 03       		.byte	0x3
 14606 1773 00000000 		.4byte	rawAngle
 14607 1777 27       		.uleb128 0x27
 14608 1778 560E0000 		.4byte	.LASF240
 14609 177c 01       		.byte	0x1
 14610 177d 8B       		.byte	0x8b
 14611 177e CE000000 		.4byte	0xce
 14612 1782 05       		.uleb128 0x5
 14613 1783 03       		.byte	0x3
 14614 1784 00000000 		.4byte	midiSent
 14615 1788 27       		.uleb128 0x27
 14616 1789 93060000 		.4byte	.LASF241
 14617 178d 01       		.byte	0x1
 14618 178e 8C       		.byte	0x8c
 14619 178f CE000000 		.4byte	0xce
 14620 1793 05       		.uleb128 0x5
 14621 1794 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 315


 14622 1795 00000000 		.4byte	midiOverflow
 14623 1799 09       		.uleb128 0x9
 14624 179a B8000000 		.4byte	0xb8
 14625 179e A9170000 		.4byte	0x17a9
 14626 17a2 0A       		.uleb128 0xa
 14627 17a3 4C010000 		.4byte	0x14c
 14628 17a7 07       		.byte	0x7
 14629 17a8 00       		.byte	0
 14630 17a9 27       		.uleb128 0x27
 14631 17aa 4C120000 		.4byte	.LASF242
 14632 17ae 01       		.byte	0x1
 14633 17af 8E       		.byte	0x8e
 14634 17b0 99170000 		.4byte	0x1799
 14635 17b4 05       		.uleb128 0x5
 14636 17b5 03       		.byte	0x3
 14637 17b6 00000000 		.4byte	macroKnobValues
 14638 17ba 27       		.uleb128 0x27
 14639 17bb D7050000 		.4byte	.LASF243
 14640 17bf 01       		.byte	0x1
 14641 17c0 90       		.byte	0x90
 14642 17c1 B8000000 		.4byte	0xb8
 14643 17c5 05       		.uleb128 0x5
 14644 17c6 03       		.byte	0x3
 14645 17c7 00000000 		.4byte	currentCopedent
 14646 17cb 27       		.uleb128 0x27
 14647 17cc 71010000 		.4byte	.LASF244
 14648 17d0 01       		.byte	0x1
 14649 17d1 91       		.byte	0x91
 14650 17d2 6E140000 		.4byte	0x146e
 14651 17d6 05       		.uleb128 0x5
 14652 17d7 03       		.byte	0x3
 14653 17d8 00000000 		.4byte	necks
 14654 17dc 27       		.uleb128 0x27
 14655 17dd 01050000 		.4byte	.LASF245
 14656 17e1 01       		.byte	0x1
 14657 17e2 BC       		.byte	0xbc
 14658 17e3 EF000000 		.4byte	0xef
 14659 17e7 05       		.uleb128 0x5
 14660 17e8 03       		.byte	0x3
 14661 17e9 00000000 		.4byte	rx1Channel
 14662 17ed 27       		.uleb128 0x27
 14663 17ee AA120000 		.4byte	.LASF246
 14664 17f2 01       		.byte	0x1
 14665 17f3 BC       		.byte	0xbc
 14666 17f4 EF000000 		.4byte	0xef
 14667 17f8 05       		.uleb128 0x5
 14668 17f9 03       		.byte	0x3
 14669 17fa 00000000 		.4byte	rx2Channel
 14670 17fe 27       		.uleb128 0x27
 14671 17ff A20B0000 		.4byte	.LASF247
 14672 1803 01       		.byte	0x1
 14673 1804 BD       		.byte	0xbd
 14674 1805 ED110000 		.4byte	0x11ed
 14675 1809 05       		.uleb128 0x5
 14676 180a 03       		.byte	0x3
 14677 180b 00000000 		.4byte	rx1TD
 14678 180f 27       		.uleb128 0x27
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 316


 14679 1810 B60E0000 		.4byte	.LASF248
 14680 1814 01       		.byte	0x1
 14681 1815 BD       		.byte	0xbd
 14682 1816 ED110000 		.4byte	0x11ed
 14683 181a 05       		.uleb128 0x5
 14684 181b 03       		.byte	0x3
 14685 181c 00000000 		.4byte	rx2TD
 14686 1820 27       		.uleb128 0x27
 14687 1821 AE0D0000 		.4byte	.LASF249
 14688 1825 01       		.byte	0x1
 14689 1826 BF       		.byte	0xbf
 14690 1827 40010000 		.4byte	0x140
 14691 182b 05       		.uleb128 0x5
 14692 182c 03       		.byte	0x3
 14693 182d 00000000 		.4byte	txChannel
 14694 1831 27       		.uleb128 0x27
 14695 1832 9F130000 		.4byte	.LASF250
 14696 1836 01       		.byte	0x1
 14697 1837 C0       		.byte	0xc0
 14698 1838 40010000 		.4byte	0x140
 14699 183c 05       		.uleb128 0x5
 14700 183d 03       		.byte	0x3
 14701 183e 00000000 		.4byte	txTD
 14702 1842 27       		.uleb128 0x27
 14703 1843 DF0B0000 		.4byte	.LASF251
 14704 1847 01       		.byte	0x1
 14705 1848 C2       		.byte	0xc2
 14706 1849 40010000 		.4byte	0x140
 14707 184d 05       		.uleb128 0x5
 14708 184e 03       		.byte	0x3
 14709 184f 00000000 		.4byte	rx3Channel
 14710 1853 27       		.uleb128 0x27
 14711 1854 26130000 		.4byte	.LASF252
 14712 1858 01       		.byte	0x1
 14713 1859 C3       		.byte	0xc3
 14714 185a 40010000 		.4byte	0x140
 14715 185e 05       		.uleb128 0x5
 14716 185f 03       		.byte	0x3
 14717 1860 00000000 		.4byte	rx3TD
 14718 1864 09       		.uleb128 0x9
 14719 1865 40010000 		.4byte	0x140
 14720 1869 7A180000 		.4byte	0x187a
 14721 186d 0A       		.uleb128 0xa
 14722 186e 4C010000 		.4byte	0x14c
 14723 1872 01       		.byte	0x1
 14724 1873 0A       		.uleb128 0xa
 14725 1874 4C010000 		.4byte	0x14c
 14726 1878 19       		.byte	0x19
 14727 1879 00       		.byte	0
 14728 187a 27       		.uleb128 0x27
 14729 187b CF070000 		.4byte	.LASF253
 14730 187f 01       		.byte	0x1
 14731 1880 C6       		.byte	0xc6
 14732 1881 8B180000 		.4byte	0x188b
 14733 1885 05       		.uleb128 0x5
 14734 1886 03       		.byte	0x3
 14735 1887 00000000 		.4byte	rxBufferPluck
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 317


 14736 188b 06       		.uleb128 0x6
 14737 188c 64180000 		.4byte	0x1864
 14738 1890 09       		.uleb128 0x9
 14739 1891 40010000 		.4byte	0x140
 14740 1895 A6180000 		.4byte	0x18a6
 14741 1899 0A       		.uleb128 0xa
 14742 189a 4C010000 		.4byte	0x14c
 14743 189e 01       		.byte	0x1
 14744 189f 0A       		.uleb128 0xa
 14745 18a0 4C010000 		.4byte	0x14c
 14746 18a4 07       		.byte	0x7
 14747 18a5 00       		.byte	0
 14748 18a6 27       		.uleb128 0x27
 14749 18a7 960D0000 		.4byte	.LASF254
 14750 18ab 01       		.byte	0x1
 14751 18ac C7       		.byte	0xc7
 14752 18ad B7180000 		.4byte	0x18b7
 14753 18b1 05       		.uleb128 0x5
 14754 18b2 03       		.byte	0x3
 14755 18b3 00000000 		.4byte	rxBufferBar
 14756 18b7 06       		.uleb128 0x6
 14757 18b8 90180000 		.4byte	0x1890
 14758 18bc 09       		.uleb128 0x9
 14759 18bd 29020000 		.4byte	0x229
 14760 18c1 CC180000 		.4byte	0x18cc
 14761 18c5 0A       		.uleb128 0xa
 14762 18c6 4C010000 		.4byte	0x14c
 14763 18ca 0B       		.byte	0xb
 14764 18cb 00       		.byte	0
 14765 18cc 27       		.uleb128 0x27
 14766 18cd E6020000 		.4byte	.LASF255
 14767 18d1 01       		.byte	0x1
 14768 18d2 C9       		.byte	0xc9
 14769 18d3 DD180000 		.4byte	0x18dd
 14770 18d7 05       		.uleb128 0x5
 14771 18d8 03       		.byte	0x3
 14772 18d9 00000000 		.4byte	strings
 14773 18dd 06       		.uleb128 0x6
 14774 18de BC180000 		.4byte	0x18bc
 14775 18e2 27       		.uleb128 0x27
 14776 18e3 BA050000 		.4byte	.LASF256
 14777 18e7 01       		.byte	0x1
 14778 18e8 CA       		.byte	0xca
 14779 18e9 F3180000 		.4byte	0x18f3
 14780 18ed 05       		.uleb128 0x5
 14781 18ee 03       		.byte	0x3
 14782 18ef 00000000 		.4byte	prevStrings
 14783 18f3 06       		.uleb128 0x6
 14784 18f4 BC180000 		.4byte	0x18bc
 14785 18f8 09       		.uleb128 0x9
 14786 18f9 29020000 		.4byte	0x229
 14787 18fd 08190000 		.4byte	0x1908
 14788 1901 0A       		.uleb128 0xa
 14789 1902 4C010000 		.4byte	0x14c
 14790 1906 01       		.byte	0x1
 14791 1907 00       		.byte	0
 14792 1908 28       		.uleb128 0x28
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 318


 14793 1909 62617200 		.ascii	"bar\000"
 14794 190d 01       		.byte	0x1
 14795 190e CB       		.byte	0xcb
 14796 190f 19190000 		.4byte	0x1919
 14797 1913 05       		.uleb128 0x5
 14798 1914 03       		.byte	0x3
 14799 1915 00000000 		.4byte	bar
 14800 1919 06       		.uleb128 0x6
 14801 191a F8180000 		.4byte	0x18f8
 14802 191e 27       		.uleb128 0x27
 14803 191f AE130000 		.4byte	.LASF257
 14804 1923 01       		.byte	0x1
 14805 1924 CC       		.byte	0xcc
 14806 1925 2F190000 		.4byte	0x192f
 14807 1929 05       		.uleb128 0x5
 14808 192a 03       		.byte	0x3
 14809 192b 00000000 		.4byte	prevBar
 14810 192f 06       		.uleb128 0x6
 14811 1930 F8180000 		.4byte	0x18f8
 14812 1934 27       		.uleb128 0x27
 14813 1935 28120000 		.4byte	.LASF258
 14814 1939 01       		.byte	0x1
 14815 193a CD       		.byte	0xcd
 14816 193b 45190000 		.4byte	0x1945
 14817 193f 05       		.uleb128 0x5
 14818 1940 03       		.byte	0x3
 14819 1941 00000000 		.4byte	maxStrings
 14820 1945 06       		.uleb128 0x6
 14821 1946 BC180000 		.4byte	0x18bc
 14822 194a 27       		.uleb128 0x27
 14823 194b 290F0000 		.4byte	.LASF259
 14824 194f 01       		.byte	0x1
 14825 1950 CE       		.byte	0xce
 14826 1951 24020000 		.4byte	0x224
 14827 1955 05       		.uleb128 0x5
 14828 1956 03       		.byte	0x3
 14829 1957 00000000 		.4byte	amHere
 14830 195b 27       		.uleb128 0x27
 14831 195c 20070000 		.4byte	.LASF260
 14832 1960 01       		.byte	0x1
 14833 1961 CF       		.byte	0xcf
 14834 1962 24020000 		.4byte	0x224
 14835 1966 05       		.uleb128 0x5
 14836 1967 03       		.byte	0x3
 14837 1968 00000000 		.4byte	spiCounter
 14838 196c 27       		.uleb128 0x27
 14839 196d 1A050000 		.4byte	.LASF261
 14840 1971 01       		.byte	0x1
 14841 1972 D0       		.byte	0xd0
 14842 1973 24020000 		.4byte	0x224
 14843 1977 05       		.uleb128 0x5
 14844 1978 03       		.byte	0x3
 14845 1979 00000000 		.4byte	newDataFlag
 14846 197d 27       		.uleb128 0x27
 14847 197e BC0E0000 		.4byte	.LASF262
 14848 1982 01       		.byte	0x1
 14849 1983 D1       		.byte	0xd1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 319


 14850 1984 9F000000 		.4byte	0x9f
 14851 1988 05       		.uleb128 0x5
 14852 1989 03       		.byte	0x3
 14853 198a 00000000 		.4byte	prevOctave
 14854 198e 27       		.uleb128 0x27
 14855 198f E90D0000 		.4byte	.LASF263
 14856 1993 01       		.byte	0x1
 14857 1994 D2       		.byte	0xd2
 14858 1995 B8000000 		.4byte	0xb8
 14859 1999 05       		.uleb128 0x5
 14860 199a 03       		.byte	0x3
 14861 199b 00000000 		.4byte	pluck_index
 14862 199f 27       		.uleb128 0x27
 14863 19a0 7D0C0000 		.4byte	.LASF264
 14864 19a4 01       		.byte	0x1
 14865 19a5 D3       		.byte	0xd3
 14866 19a6 24020000 		.4byte	0x224
 14867 19aa 05       		.uleb128 0x5
 14868 19ab 03       		.byte	0x3
 14869 19ac 00000000 		.4byte	amHere2
 14870 19b0 27       		.uleb128 0x27
 14871 19b1 690F0000 		.4byte	.LASF265
 14872 19b5 01       		.byte	0x1
 14873 19b6 D4       		.byte	0xd4
 14874 19b7 24020000 		.4byte	0x224
 14875 19bb 05       		.uleb128 0x5
 14876 19bc 03       		.byte	0x3
 14877 19bd 00000000 		.4byte	spiCounter2
 14878 19c1 27       		.uleb128 0x27
 14879 19c2 78000000 		.4byte	.LASF266
 14880 19c6 01       		.byte	0x1
 14881 19c7 D5       		.byte	0xd5
 14882 19c8 24020000 		.4byte	0x224
 14883 19cc 05       		.uleb128 0x5
 14884 19cd 03       		.byte	0x3
 14885 19ce 00000000 		.4byte	newDataFlag2
 14886 19d2 27       		.uleb128 0x27
 14887 19d3 910C0000 		.4byte	.LASF267
 14888 19d7 01       		.byte	0x1
 14889 19d8 D6       		.byte	0xd6
 14890 19d9 24020000 		.4byte	0x224
 14891 19dd 05       		.uleb128 0x5
 14892 19de 03       		.byte	0x3
 14893 19df 00000000 		.4byte	currentPluckBuffer
 14894 19e3 27       		.uleb128 0x27
 14895 19e4 260E0000 		.4byte	.LASF268
 14896 19e8 01       		.byte	0x1
 14897 19e9 D7       		.byte	0xd7
 14898 19ea 24020000 		.4byte	0x224
 14899 19ee 05       		.uleb128 0x5
 14900 19ef 03       		.byte	0x3
 14901 19f0 00000000 		.4byte	currentBarBuffer
 14902 19f4 27       		.uleb128 0x27
 14903 19f5 1D100000 		.4byte	.LASF269
 14904 19f9 01       		.byte	0x1
 14905 19fa D8       		.byte	0xd8
 14906 19fb 24020000 		.4byte	0x224
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 320


 14907 19ff 05       		.uleb128 0x5
 14908 1a00 03       		.byte	0x3
 14909 1a01 00000000 		.4byte	pluckErrorCount
 14910 1a05 27       		.uleb128 0x27
 14911 1a06 470E0000 		.4byte	.LASF270
 14912 1a0a 01       		.byte	0x1
 14913 1a0b D9       		.byte	0xd9
 14914 1a0c 29020000 		.4byte	0x229
 14915 1a10 05       		.uleb128 0x5
 14916 1a11 03       		.byte	0x3
 14917 1a12 00000000 		.4byte	SPI1ErrorCount
 14918 1a16 27       		.uleb128 0x27
 14919 1a17 D4080000 		.4byte	.LASF271
 14920 1a1b 01       		.byte	0x1
 14921 1a1c DD       		.byte	0xdd
 14922 1a1d 24020000 		.4byte	0x224
 14923 1a21 05       		.uleb128 0x5
 14924 1a22 03       		.byte	0x3
 14925 1a23 00000000 		.4byte	inputData
 14926 1a27 25       		.uleb128 0x25
 14927 1a28 9E120000 		.4byte	.LASF272
 14928 1a2c 01       		.byte	0x1
 14929 1a2d 0001     		.2byte	0x100
 14930 1a2f B8000000 		.4byte	0xb8
 14931 1a33 05       		.uleb128 0x5
 14932 1a34 03       		.byte	0x3
 14933 1a35 00000000 		.4byte	spiAdjusted
 14934 1a39 25       		.uleb128 0x25
 14935 1a3a FB070000 		.4byte	.LASF273
 14936 1a3e 01       		.byte	0x1
 14937 1a3f 0101     		.2byte	0x101
 14938 1a41 B8000000 		.4byte	0xb8
 14939 1a45 05       		.uleb128 0x5
 14940 1a46 03       		.byte	0x3
 14941 1a47 00000000 		.4byte	mySpiCounter
 14942 1a4b 25       		.uleb128 0x25
 14943 1a4c 660D0000 		.4byte	.LASF274
 14944 1a50 01       		.byte	0x1
 14945 1a51 0201     		.2byte	0x102
 14946 1a53 29020000 		.4byte	0x229
 14947 1a57 05       		.uleb128 0x5
 14948 1a58 03       		.byte	0x3
 14949 1a59 00000000 		.4byte	offsetErrorCount
 14950 1a5d 25       		.uleb128 0x25
 14951 1a5e E9000000 		.4byte	.LASF275
 14952 1a62 01       		.byte	0x1
 14953 1a63 0301     		.2byte	0x103
 14954 1a65 24020000 		.4byte	0x224
 14955 1a69 05       		.uleb128 0x5
 14956 1a6a 03       		.byte	0x3
 14957 1a6b 00000000 		.4byte	SPI2errorflag
 14958 1a6f 25       		.uleb128 0x25
 14959 1a70 4B0D0000 		.4byte	.LASF276
 14960 1a74 01       		.byte	0x1
 14961 1a75 0401     		.2byte	0x104
 14962 1a77 811A0000 		.4byte	0x1a81
 14963 1a7b 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 321


 14964 1a7c 03       		.byte	0x3
 14965 1a7d 00000000 		.4byte	bar_index
 14966 1a81 06       		.uleb128 0x6
 14967 1a82 9F000000 		.4byte	0x9f
 14968 1a86 25       		.uleb128 0x25
 14969 1a87 F2030000 		.4byte	.LASF277
 14970 1a8b 01       		.byte	0x1
 14971 1a8c 0501     		.2byte	0x105
 14972 1a8e C7020000 		.4byte	0x2c7
 14973 1a92 05       		.uleb128 0x5
 14974 1a93 03       		.byte	0x3
 14975 1a94 00000000 		.4byte	knobs
 14976 1a98 25       		.uleb128 0x25
 14977 1a99 F1070000 		.4byte	.LASF278
 14978 1a9d 01       		.byte	0x1
 14979 1a9e 0601     		.2byte	0x106
 14980 1aa0 C7020000 		.4byte	0x2c7
 14981 1aa4 05       		.uleb128 0x5
 14982 1aa5 03       		.byte	0x3
 14983 1aa6 00000000 		.4byte	prevKnobs
 14984 1aaa 25       		.uleb128 0x25
 14985 1aab 550D0000 		.4byte	.LASF279
 14986 1aaf 01       		.byte	0x1
 14987 1ab0 0801     		.2byte	0x108
 14988 1ab2 C7020000 		.4byte	0x2c7
 14989 1ab6 05       		.uleb128 0x5
 14990 1ab7 03       		.byte	0x3
 14991 1ab8 00000000 		.4byte	knobs7bit
 14992 1abc 25       		.uleb128 0x25
 14993 1abd 020D0000 		.4byte	.LASF280
 14994 1ac1 01       		.byte	0x1
 14995 1ac2 0901     		.2byte	0x109
 14996 1ac4 C7020000 		.4byte	0x2c7
 14997 1ac8 05       		.uleb128 0x5
 14998 1ac9 03       		.byte	0x3
 14999 1aca 00000000 		.4byte	prevKnobs7bit
 15000 1ace 25       		.uleb128 0x25
 15001 1acf BA090000 		.4byte	.LASF281
 15002 1ad3 01       		.byte	0x1
 15003 1ad4 0B01     		.2byte	0x10b
 15004 1ad6 B8000000 		.4byte	0xb8
 15005 1ada 05       		.uleb128 0x5
 15006 1adb 03       		.byte	0x3
 15007 1adc 00000000 		.4byte	u7bit_volumePedal
 15008 1ae0 25       		.uleb128 0x25
 15009 1ae1 7B120000 		.4byte	.LASF282
 15010 1ae5 01       		.byte	0x1
 15011 1ae6 0C01     		.2byte	0x10c
 15012 1ae8 B8000000 		.4byte	0xb8
 15013 1aec 05       		.uleb128 0x5
 15014 1aed 03       		.byte	0x3
 15015 1aee 00000000 		.4byte	prev_7bit_volumePedal
 15016 1af2 25       		.uleb128 0x25
 15017 1af3 850C0000 		.4byte	.LASF283
 15018 1af7 01       		.byte	0x1
 15019 1af8 0D01     		.2byte	0x10d
 15020 1afa 24020000 		.4byte	0x224
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 322


 15021 1afe 05       		.uleb128 0x5
 15022 1aff 03       		.byte	0x3
 15023 1b00 00000000 		.4byte	SPI2started
 15024 1b04 25       		.uleb128 0x25
 15025 1b05 B8070000 		.4byte	.LASF284
 15026 1b09 01       		.byte	0x1
 15027 1b0a 0F01     		.2byte	0x10f
 15028 1b0c B8000000 		.4byte	0xb8
 15029 1b10 05       		.uleb128 0x5
 15030 1b11 03       		.byte	0x3
 15031 1b12 00000000 		.4byte	whichMacro
 15032 1b16 25       		.uleb128 0x25
 15033 1b17 A7100000 		.4byte	.LASF285
 15034 1b1b 01       		.byte	0x1
 15035 1b1c 1101     		.2byte	0x111
 15036 1b1e 99170000 		.4byte	0x1799
 15037 1b22 05       		.uleb128 0x5
 15038 1b23 03       		.byte	0x3
 15039 1b24 00000000 		.4byte	macroKnobValues7bit
 15040 1b28 25       		.uleb128 0x25
 15041 1b29 2B020000 		.4byte	.LASF286
 15042 1b2d 01       		.byte	0x1
 15043 1b2e 1201     		.2byte	0x112
 15044 1b30 99170000 		.4byte	0x1799
 15045 1b34 05       		.uleb128 0x5
 15046 1b35 03       		.byte	0x3
 15047 1b36 00000000 		.4byte	prevMacroKnobValues7bit
 15048 1b3a 25       		.uleb128 0x25
 15049 1b3b 300F0000 		.4byte	.LASF287
 15050 1b3f 01       		.byte	0x1
 15051 1b40 2601     		.2byte	0x126
 15052 1b42 ED110000 		.4byte	0x11ed
 15053 1b46 05       		.uleb128 0x5
 15054 1b47 03       		.byte	0x3
 15055 1b48 00000000 		.4byte	array
 15056 1b4c 25       		.uleb128 0x25
 15057 1b4d 52090000 		.4byte	.LASF288
 15058 1b51 01       		.byte	0x1
 15059 1b52 2901     		.2byte	0x129
 15060 1b54 18020000 		.4byte	0x218
 15061 1b58 05       		.uleb128 0x5
 15062 1b59 03       		.byte	0x3
 15063 1b5a 00000000 		.4byte	eepromReturnValue
 15064 1b5e 25       		.uleb128 0x25
 15065 1b5f 38060000 		.4byte	.LASF289
 15066 1b63 01       		.byte	0x1
 15067 1b64 3501     		.2byte	0x135
 15068 1b66 EF000000 		.4byte	0xef
 15069 1b6a 05       		.uleb128 0x5
 15070 1b6b 03       		.byte	0x3
 15071 1b6c 00000000 		.4byte	eeprom_cnt
 15072 1b70 25       		.uleb128 0x25
 15073 1b71 6C090000 		.4byte	.LASF91
 15074 1b75 01       		.byte	0x1
 15075 1b76 3601     		.2byte	0x136
 15076 1b78 28010000 		.4byte	0x128
 15077 1b7c 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 323


 15078 1b7d 03       		.byte	0x3
 15079 1b7e 00000000 		.4byte	status
 15080 1b82 29       		.uleb128 0x29
 15081 1b83 70747200 		.ascii	"ptr\000"
 15082 1b87 01       		.byte	0x1
 15083 1b88 3701     		.2byte	0x137
 15084 1b8a 941B0000 		.4byte	0x1b94
 15085 1b8e 05       		.uleb128 0x5
 15086 1b8f 03       		.byte	0x3
 15087 1b90 00000000 		.4byte	ptr
 15088 1b94 07       		.uleb128 0x7
 15089 1b95 04       		.byte	0x4
 15090 1b96 9F1B0000 		.4byte	0x1b9f
 15091 1b9a 08       		.uleb128 0x8
 15092 1b9b EF000000 		.4byte	0xef
 15093 1b9f 06       		.uleb128 0x6
 15094 1ba0 9A1B0000 		.4byte	0x1b9a
 15095 1ba4 25       		.uleb128 0x25
 15096 1ba5 97020000 		.4byte	.LASF290
 15097 1ba9 01       		.byte	0x1
 15098 1baa 3801     		.2byte	0x138
 15099 1bac 811A0000 		.4byte	0x1a81
 15100 1bb0 05       		.uleb128 0x5
 15101 1bb1 03       		.byte	0x3
 15102 1bb2 00000000 		.4byte	barCount
 15103 1bb6 09       		.uleb128 0x9
 15104 1bb7 24020000 		.4byte	0x224
 15105 1bbb C61B0000 		.4byte	0x1bc6
 15106 1bbf 0A       		.uleb128 0xa
 15107 1bc0 4C010000 		.4byte	0x14c
 15108 1bc4 0F       		.byte	0xf
 15109 1bc5 00       		.byte	0
 15110 1bc6 25       		.uleb128 0x25
 15111 1bc7 2F010000 		.4byte	.LASF291
 15112 1bcb 01       		.byte	0x1
 15113 1bcc 9A01     		.2byte	0x19a
 15114 1bce D81B0000 		.4byte	0x1bd8
 15115 1bd2 05       		.uleb128 0x5
 15116 1bd3 03       		.byte	0x3
 15117 1bd4 00000000 		.4byte	I2Cbuff2
 15118 1bd8 06       		.uleb128 0x6
 15119 1bd9 B61B0000 		.4byte	0x1bb6
 15120 1bdd 25       		.uleb128 0x25
 15121 1bde 73090000 		.4byte	.LASF292
 15122 1be2 01       		.byte	0x1
 15123 1be3 9B01     		.2byte	0x19b
 15124 1be5 24020000 		.4byte	0x224
 15125 1be9 05       		.uleb128 0x5
 15126 1bea 03       		.byte	0x3
 15127 1beb 00000000 		.4byte	send_it
 15128 1bef 09       		.uleb128 0x9
 15129 1bf0 B8000000 		.4byte	0xb8
 15130 1bf4 051C0000 		.4byte	0x1c05
 15131 1bf8 0A       		.uleb128 0xa
 15132 1bf9 4C010000 		.4byte	0x14c
 15133 1bfd 0B       		.byte	0xb
 15134 1bfe 0A       		.uleb128 0xa
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 324


 15135 1bff 4C010000 		.4byte	0x14c
 15136 1c03 01       		.byte	0x1
 15137 1c04 00       		.byte	0
 15138 1c05 25       		.uleb128 0x25
 15139 1c06 5E010000 		.4byte	.LASF293
 15140 1c0a 01       		.byte	0x1
 15141 1c0b A201     		.2byte	0x1a2
 15142 1c0d EF1B0000 		.4byte	0x1bef
 15143 1c11 05       		.uleb128 0x5
 15144 1c12 03       		.byte	0x3
 15145 1c13 00000000 		.4byte	mux_states
 15146 1c17 09       		.uleb128 0x9
 15147 1c18 B8000000 		.4byte	0xb8
 15148 1c1c 271C0000 		.4byte	0x1c27
 15149 1c20 0A       		.uleb128 0xa
 15150 1c21 4C010000 		.4byte	0x14c
 15151 1c25 0B       		.byte	0xb
 15152 1c26 00       		.byte	0
 15153 1c27 25       		.uleb128 0x25
 15154 1c28 5C120000 		.4byte	.LASF294
 15155 1c2c 01       		.byte	0x1
 15156 1c2d A301     		.2byte	0x1a3
 15157 1c2f 171C0000 		.4byte	0x1c17
 15158 1c33 05       		.uleb128 0x5
 15159 1c34 03       		.byte	0x3
 15160 1c35 00000000 		.4byte	i2c_skipped
 15161 1c39 25       		.uleb128 0x25
 15162 1c3a C1100000 		.4byte	.LASF295
 15163 1c3e 01       		.byte	0x1
 15164 1c3f A401     		.2byte	0x1a4
 15165 1c41 13170000 		.4byte	0x1713
 15166 1c45 05       		.uleb128 0x5
 15167 1c46 03       		.byte	0x3
 15168 1c47 00000000 		.4byte	pedals_low
 15169 1c4b 25       		.uleb128 0x25
 15170 1c4c B7010000 		.4byte	.LASF296
 15171 1c50 01       		.byte	0x1
 15172 1c51 A501     		.2byte	0x1a5
 15173 1c53 13170000 		.4byte	0x1713
 15174 1c57 05       		.uleb128 0x5
 15175 1c58 03       		.byte	0x3
 15176 1c59 00000000 		.4byte	pedals_high
 15177 1c5d 25       		.uleb128 0x25
 15178 1c5e 90100000 		.4byte	.LASF297
 15179 1c62 01       		.byte	0x1
 15180 1c63 A601     		.2byte	0x1a6
 15181 1c65 13170000 		.4byte	0x1713
 15182 1c69 05       		.uleb128 0x5
 15183 1c6a 03       		.byte	0x3
 15184 1c6b 00000000 		.4byte	pedals_lowWithDeadZone
 15185 1c6f 25       		.uleb128 0x25
 15186 1c70 B5020000 		.4byte	.LASF298
 15187 1c74 01       		.byte	0x1
 15188 1c75 A701     		.2byte	0x1a7
 15189 1c77 13170000 		.4byte	0x1713
 15190 1c7b 05       		.uleb128 0x5
 15191 1c7c 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 325


 15192 1c7d 00000000 		.4byte	pedals_highWithDeadZone
 15193 1c81 25       		.uleb128 0x25
 15194 1c82 950F0000 		.4byte	.LASF299
 15195 1c86 01       		.byte	0x1
 15196 1c87 A801     		.2byte	0x1a8
 15197 1c89 CE000000 		.4byte	0xce
 15198 1c8d 05       		.uleb128 0x5
 15199 1c8e 03       		.byte	0x3
 15200 1c8f 00000000 		.4byte	deadzone
 15201 1c93 25       		.uleb128 0x25
 15202 1c94 C3070000 		.4byte	.LASF300
 15203 1c98 01       		.byte	0x1
 15204 1c99 A901     		.2byte	0x1a9
 15205 1c9b CE000000 		.4byte	0xce
 15206 1c9f 05       		.uleb128 0x5
 15207 1ca0 03       		.byte	0x3
 15208 1ca1 00000000 		.4byte	volumePedal
 15209 1ca5 25       		.uleb128 0x25
 15210 1ca6 B80D0000 		.4byte	.LASF301
 15211 1caa 01       		.byte	0x1
 15212 1cab AA01     		.2byte	0x1aa
 15213 1cad 13170000 		.4byte	0x1713
 15214 1cb1 05       		.uleb128 0x5
 15215 1cb2 03       		.byte	0x3
 15216 1cb3 00000000 		.4byte	processed_pedals
 15217 1cb7 25       		.uleb128 0x25
 15218 1cb8 670C0000 		.4byte	.LASF302
 15219 1cbc 01       		.byte	0x1
 15220 1cbd AB01     		.2byte	0x1ab
 15221 1cbf 13170000 		.4byte	0x1713
 15222 1cc3 05       		.uleb128 0x5
 15223 1cc4 03       		.byte	0x3
 15224 1cc5 00000000 		.4byte	prev_processed_pedals
 15225 1cc9 09       		.uleb128 0x9
 15226 1cca B8000000 		.4byte	0xb8
 15227 1cce D91C0000 		.4byte	0x1cd9
 15228 1cd2 0A       		.uleb128 0xa
 15229 1cd3 4C010000 		.4byte	0x14c
 15230 1cd7 09       		.byte	0x9
 15231 1cd8 00       		.byte	0
 15232 1cd9 25       		.uleb128 0x25
 15233 1cda E6070000 		.4byte	.LASF303
 15234 1cde 01       		.byte	0x1
 15235 1cdf AC01     		.2byte	0x1ac
 15236 1ce1 C91C0000 		.4byte	0x1cc9
 15237 1ce5 05       		.uleb128 0x5
 15238 1ce6 03       		.byte	0x3
 15239 1ce7 00000000 		.4byte	pedals8bit
 15240 1ceb 25       		.uleb128 0x25
 15241 1cec 70120000 		.4byte	.LASF304
 15242 1cf0 01       		.byte	0x1
 15243 1cf1 AD01     		.2byte	0x1ad
 15244 1cf3 C91C0000 		.4byte	0x1cc9
 15245 1cf7 05       		.uleb128 0x5
 15246 1cf8 03       		.byte	0x3
 15247 1cf9 00000000 		.4byte	pedals7bit
 15248 1cfd 25       		.uleb128 0x25
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 326


 15249 1cfe 1E0D0000 		.4byte	.LASF305
 15250 1d02 01       		.byte	0x1
 15251 1d03 AE01     		.2byte	0x1ae
 15252 1d05 C91C0000 		.4byte	0x1cc9
 15253 1d09 05       		.uleb128 0x5
 15254 1d0a 03       		.byte	0x3
 15255 1d0b 00000000 		.4byte	prevPedals7bit
 15256 1d0f 25       		.uleb128 0x25
 15257 1d10 53000000 		.4byte	.LASF306
 15258 1d14 01       		.byte	0x1
 15259 1d15 AF01     		.2byte	0x1af
 15260 1d17 C3000000 		.4byte	0xc3
 15261 1d1b 05       		.uleb128 0x5
 15262 1d1c 03       		.byte	0x3
 15263 1d1d 00000000 		.4byte	prev_processed_volumePedal
 15264 1d21 25       		.uleb128 0x25
 15265 1d22 770D0000 		.4byte	.LASF307
 15266 1d26 01       		.byte	0x1
 15267 1d27 B001     		.2byte	0x1b0
 15268 1d29 C3000000 		.4byte	0xc3
 15269 1d2d 05       		.uleb128 0x5
 15270 1d2e 03       		.byte	0x3
 15271 1d2f 00000000 		.4byte	processed_volumePedal
 15272 1d33 09       		.uleb128 0x9
 15273 1d34 CE000000 		.4byte	0xce
 15274 1d38 491D0000 		.4byte	0x1d49
 15275 1d3c 0A       		.uleb128 0xa
 15276 1d3d 4C010000 		.4byte	0x14c
 15277 1d41 01       		.byte	0x1
 15278 1d42 0A       		.uleb128 0xa
 15279 1d43 4C010000 		.4byte	0x14c
 15280 1d47 0B       		.byte	0xb
 15281 1d48 00       		.byte	0
 15282 1d49 25       		.uleb128 0x25
 15283 1d4a 20110000 		.4byte	.LASF308
 15284 1d4e 01       		.byte	0x1
 15285 1d4f B301     		.2byte	0x1b3
 15286 1d51 331D0000 		.4byte	0x1d33
 15287 1d55 05       		.uleb128 0x5
 15288 1d56 03       		.byte	0x3
 15289 1d57 00000000 		.4byte	fretMeasurements
 15290 1d5b 25       		.uleb128 0x25
 15291 1d5c 140A0000 		.4byte	.LASF309
 15292 1d60 01       		.byte	0x1
 15293 1d61 B701     		.2byte	0x1b7
 15294 1d63 9F000000 		.4byte	0x9f
 15295 1d67 05       		.uleb128 0x5
 15296 1d68 03       		.byte	0x3
 15297 1d69 00000000 		.4byte	currentPresetSelection
 15298 1d6d 09       		.uleb128 0x9
 15299 1d6e B8000000 		.4byte	0xb8
 15300 1d72 831D0000 		.4byte	0x1d83
 15301 1d76 0A       		.uleb128 0xa
 15302 1d77 4C010000 		.4byte	0x14c
 15303 1d7b 3F       		.byte	0x3f
 15304 1d7c 0A       		.uleb128 0xa
 15305 1d7d 4C010000 		.4byte	0x14c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 327


 15306 1d81 0D       		.byte	0xd
 15307 1d82 00       		.byte	0
 15308 1d83 25       		.uleb128 0x25
 15309 1d84 55030000 		.4byte	.LASF310
 15310 1d88 01       		.byte	0x1
 15311 1d89 B801     		.2byte	0x1b8
 15312 1d8b 6D1D0000 		.4byte	0x1d6d
 15313 1d8f 05       		.uleb128 0x5
 15314 1d90 03       		.byte	0x3
 15315 1d91 00000000 		.4byte	presetNamesArray
 15316 1d95 25       		.uleb128 0x25
 15317 1d96 CD020000 		.4byte	.LASF311
 15318 1d9a 01       		.byte	0x1
 15319 1d9b B901     		.2byte	0x1b9
 15320 1d9d B8000000 		.4byte	0xb8
 15321 1da1 05       		.uleb128 0x5
 15322 1da2 03       		.byte	0x3
 15323 1da3 00000000 		.4byte	presetNumberToLoad
 15324 1da7 25       		.uleb128 0x25
 15325 1da8 15030000 		.4byte	.LASF312
 15326 1dac 01       		.byte	0x1
 15327 1dad BA01     		.2byte	0x1ba
 15328 1daf 6E140000 		.4byte	0x146e
 15329 1db3 05       		.uleb128 0x5
 15330 1db4 03       		.byte	0x3
 15331 1db5 00000000 		.4byte	presetLoadedResponse
 15332 1db9 09       		.uleb128 0x9
 15333 1dba B8000000 		.4byte	0xb8
 15334 1dbe D51D0000 		.4byte	0x1dd5
 15335 1dc2 0A       		.uleb128 0xa
 15336 1dc3 4C010000 		.4byte	0x14c
 15337 1dc7 3F       		.byte	0x3f
 15338 1dc8 0A       		.uleb128 0xa
 15339 1dc9 4C010000 		.4byte	0x14c
 15340 1dcd 07       		.byte	0x7
 15341 1dce 0A       		.uleb128 0xa
 15342 1dcf 4C010000 		.4byte	0x14c
 15343 1dd3 0D       		.byte	0xd
 15344 1dd4 00       		.byte	0
 15345 1dd5 25       		.uleb128 0x25
 15346 1dd6 85000000 		.4byte	.LASF313
 15347 1dda 01       		.byte	0x1
 15348 1ddb BD01     		.2byte	0x1bd
 15349 1ddd B91D0000 		.4byte	0x1db9
 15350 1de1 05       		.uleb128 0x5
 15351 1de2 03       		.byte	0x3
 15352 1de3 00000000 		.4byte	macroNamesArray
 15353 1de7 09       		.uleb128 0x9
 15354 1de8 13010000 		.4byte	0x113
 15355 1dec F71D0000 		.4byte	0x1df7
 15356 1df0 0A       		.uleb128 0xa
 15357 1df1 4C010000 		.4byte	0x14c
 15358 1df5 0B       		.byte	0xb
 15359 1df6 00       		.byte	0
 15360 1df7 25       		.uleb128 0x25
 15361 1df8 B0030000 		.4byte	.LASF314
 15362 1dfc 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 328


 15363 1dfd C201     		.2byte	0x1c2
 15364 1dff E71D0000 		.4byte	0x1de7
 15365 1e03 05       		.uleb128 0x5
 15366 1e04 03       		.byte	0x3
 15367 1e05 00000000 		.4byte	fretScaling
 15368 1e09 09       		.uleb128 0x9
 15369 1e0a 13010000 		.4byte	0x113
 15370 1e0e 191E0000 		.4byte	0x1e19
 15371 1e12 0A       		.uleb128 0xa
 15372 1e13 4C010000 		.4byte	0x14c
 15373 1e17 09       		.byte	0x9
 15374 1e18 00       		.byte	0
 15375 1e19 25       		.uleb128 0x25
 15376 1e1a CE040000 		.4byte	.LASF315
 15377 1e1e 01       		.byte	0x1
 15378 1e1f C701     		.2byte	0x1c7
 15379 1e21 091E0000 		.4byte	0x1e09
 15380 1e25 05       		.uleb128 0x5
 15381 1e26 03       		.byte	0x3
 15382 1e27 00000000 		.4byte	pedalRatios
 15383 1e2b 25       		.uleb128 0x25
 15384 1e2c 7B050000 		.4byte	.LASF316
 15385 1e30 01       		.byte	0x1
 15386 1e31 C801     		.2byte	0x1c8
 15387 1e33 B8000000 		.4byte	0xb8
 15388 1e37 05       		.uleb128 0x5
 15389 1e38 03       		.byte	0x3
 15390 1e39 00000000 		.4byte	last_mux
 15391 1e3d 25       		.uleb128 0x25
 15392 1e3e 060B0000 		.4byte	.LASF317
 15393 1e42 01       		.byte	0x1
 15394 1e43 C901     		.2byte	0x1c9
 15395 1e45 24020000 		.4byte	0x224
 15396 1e49 05       		.uleb128 0x5
 15397 1e4a 03       		.byte	0x3
 15398 1e4b 00000000 		.4byte	main_counter
 15399 1e4f 25       		.uleb128 0x25
 15400 1e50 0D060000 		.4byte	.LASF318
 15401 1e54 01       		.byte	0x1
 15402 1e55 CA01     		.2byte	0x1ca
 15403 1e57 B8000000 		.4byte	0xb8
 15404 1e5b 05       		.uleb128 0x5
 15405 1e5c 03       		.byte	0x3
 15406 1e5d 00000000 		.4byte	neck
 15407 1e61 25       		.uleb128 0x25
 15408 1e62 1D0B0000 		.4byte	.LASF319
 15409 1e66 01       		.byte	0x1
 15410 1e67 CB01     		.2byte	0x1cb
 15411 1e69 B8000000 		.4byte	0xb8
 15412 1e6d 05       		.uleb128 0x5
 15413 1e6e 03       		.byte	0x3
 15414 1e6f 00000000 		.4byte	dualSlider
 15415 1e73 25       		.uleb128 0x25
 15416 1e74 C1130000 		.4byte	.LASF320
 15417 1e78 01       		.byte	0x1
 15418 1e79 CC01     		.2byte	0x1cc
 15419 1e7b B8000000 		.4byte	0xb8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 329


 15420 1e7f 05       		.uleb128 0x5
 15421 1e80 03       		.byte	0x3
 15422 1e81 00000000 		.4byte	shiftUp
 15423 1e85 25       		.uleb128 0x25
 15424 1e86 E0020000 		.4byte	.LASF321
 15425 1e8a 01       		.byte	0x1
 15426 1e8b CD01     		.2byte	0x1cd
 15427 1e8d B8000000 		.4byte	0xb8
 15428 1e91 05       		.uleb128 0x5
 15429 1e92 03       		.byte	0x3
 15430 1e93 00000000 		.4byte	voice
 15431 1e97 25       		.uleb128 0x25
 15432 1e98 07140000 		.4byte	.LASF322
 15433 1e9c 01       		.byte	0x1
 15434 1e9d CE01     		.2byte	0x1ce
 15435 1e9f B8000000 		.4byte	0xb8
 15436 1ea3 05       		.uleb128 0x5
 15437 1ea4 03       		.byte	0x3
 15438 1ea5 00000000 		.4byte	editUp
 15439 1ea9 25       		.uleb128 0x25
 15440 1eaa 87060000 		.4byte	.LASF323
 15441 1eae 01       		.byte	0x1
 15442 1eaf CF01     		.2byte	0x1cf
 15443 1eb1 B8000000 		.4byte	0xb8
 15444 1eb5 05       		.uleb128 0x5
 15445 1eb6 03       		.byte	0x3
 15446 1eb7 00000000 		.4byte	oct1Up
 15447 1ebb 25       		.uleb128 0x25
 15448 1ebc 38130000 		.4byte	.LASF324
 15449 1ec0 01       		.byte	0x1
 15450 1ec1 D001     		.2byte	0x1d0
 15451 1ec3 B8000000 		.4byte	0xb8
 15452 1ec7 05       		.uleb128 0x5
 15453 1ec8 03       		.byte	0x3
 15454 1ec9 00000000 		.4byte	oct4Up
 15455 1ecd 25       		.uleb128 0x25
 15456 1ece EE010000 		.4byte	.LASF325
 15457 1ed2 01       		.byte	0x1
 15458 1ed3 D101     		.2byte	0x1d1
 15459 1ed5 B8000000 		.4byte	0xb8
 15460 1ed9 05       		.uleb128 0x5
 15461 1eda 03       		.byte	0x3
 15462 1edb 00000000 		.4byte	encoderUp
 15463 1edf 25       		.uleb128 0x25
 15464 1ee0 84050000 		.4byte	.LASF326
 15465 1ee4 01       		.byte	0x1
 15466 1ee5 D301     		.2byte	0x1d3
 15467 1ee7 F11E0000 		.4byte	0x1ef1
 15468 1eeb 05       		.uleb128 0x5
 15469 1eec 03       		.byte	0x3
 15470 1eed 00000000 		.4byte	encoderVal
 15471 1ef1 06       		.uleb128 0x6
 15472 1ef2 B61B0000 		.4byte	0x1bb6
 15473 1ef6 25       		.uleb128 0x25
 15474 1ef7 7C060000 		.4byte	.LASF327
 15475 1efb 01       		.byte	0x1
 15476 1efc D401     		.2byte	0x1d4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 330


 15477 1efe 9F000000 		.4byte	0x9f
 15478 1f02 05       		.uleb128 0x5
 15479 1f03 03       		.byte	0x3
 15480 1f04 00000000 		.4byte	encoderNum
 15481 1f08 25       		.uleb128 0x25
 15482 1f09 F80B0000 		.4byte	.LASF328
 15483 1f0d 01       		.byte	0x1
 15484 1f0e D501     		.2byte	0x1d5
 15485 1f10 B8000000 		.4byte	0xb8
 15486 1f14 05       		.uleb128 0x5
 15487 1f15 03       		.byte	0x3
 15488 1f16 00000000 		.4byte	button1Up
 15489 1f1a 25       		.uleb128 0x25
 15490 1f1b 070F0000 		.4byte	.LASF329
 15491 1f1f 01       		.byte	0x1
 15492 1f20 D601     		.2byte	0x1d6
 15493 1f22 B8000000 		.4byte	0xb8
 15494 1f26 05       		.uleb128 0x5
 15495 1f27 03       		.byte	0x3
 15496 1f28 00000000 		.4byte	button2Up
 15497 1f2c 25       		.uleb128 0x25
 15498 1f2d 54130000 		.4byte	.LASF330
 15499 1f31 01       		.byte	0x1
 15500 1f32 D701     		.2byte	0x1d7
 15501 1f34 B8000000 		.4byte	0xb8
 15502 1f38 05       		.uleb128 0x5
 15503 1f39 03       		.byte	0x3
 15504 1f3a 00000000 		.4byte	button3Up
 15505 1f3e 25       		.uleb128 0x25
 15506 1f3f 13130000 		.4byte	.LASF331
 15507 1f43 01       		.byte	0x1
 15508 1f44 D801     		.2byte	0x1d8
 15509 1f46 B8000000 		.4byte	0xb8
 15510 1f4a 05       		.uleb128 0x5
 15511 1f4b 03       		.byte	0x3
 15512 1f4c 00000000 		.4byte	button4Up
 15513 1f50 25       		.uleb128 0x25
 15514 1f51 6E100000 		.4byte	.LASF332
 15515 1f55 01       		.byte	0x1
 15516 1f56 D901     		.2byte	0x1d9
 15517 1f58 B8000000 		.4byte	0xb8
 15518 1f5c 05       		.uleb128 0x5
 15519 1f5d 03       		.byte	0x3
 15520 1f5e 00000000 		.4byte	patchNum
 15521 1f62 25       		.uleb128 0x25
 15522 1f63 5D060000 		.4byte	.LASF333
 15523 1f67 01       		.byte	0x1
 15524 1f68 DC01     		.2byte	0x1dc
 15525 1f6a C91C0000 		.4byte	0x1cc9
 15526 1f6e 05       		.uleb128 0x5
 15527 1f6f 03       		.byte	0x3
 15528 1f70 00000000 		.4byte	pedal_inverted
 15529 1f74 09       		.uleb128 0x9
 15530 1f75 13010000 		.4byte	0x113
 15531 1f79 901F0000 		.4byte	0x1f90
 15532 1f7d 0A       		.uleb128 0xa
 15533 1f7e 4C010000 		.4byte	0x14c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 331


 15534 1f82 06       		.byte	0x6
 15535 1f83 0A       		.uleb128 0xa
 15536 1f84 4C010000 		.4byte	0x14c
 15537 1f88 0A       		.byte	0xa
 15538 1f89 0A       		.uleb128 0xa
 15539 1f8a 4C010000 		.4byte	0x14c
 15540 1f8e 0B       		.byte	0xb
 15541 1f8f 00       		.byte	0
 15542 1f90 25       		.uleb128 0x25
 15543 1f91 DD070000 		.4byte	.LASF334
 15544 1f95 01       		.byte	0x1
 15545 1f96 DF01     		.2byte	0x1df
 15546 1f98 741F0000 		.4byte	0x1f74
 15547 1f9c 05       		.uleb128 0x5
 15548 1f9d 03       		.byte	0x3
 15549 1f9e 00000000 		.4byte	copedent
 15550 1fa2 09       		.uleb128 0x9
 15551 1fa3 B8000000 		.4byte	0xb8
 15552 1fa7 B81F0000 		.4byte	0x1fb8
 15553 1fab 0A       		.uleb128 0xa
 15554 1fac 4C010000 		.4byte	0x14c
 15555 1fb0 06       		.byte	0x6
 15556 1fb1 0A       		.uleb128 0xa
 15557 1fb2 4C010000 		.4byte	0x14c
 15558 1fb6 0D       		.byte	0xd
 15559 1fb7 00       		.byte	0
 15560 1fb8 25       		.uleb128 0x25
 15561 1fb9 CA010000 		.4byte	.LASF335
 15562 1fbd 01       		.byte	0x1
 15563 1fbe E001     		.2byte	0x1e0
 15564 1fc0 A21F0000 		.4byte	0x1fa2
 15565 1fc4 05       		.uleb128 0x5
 15566 1fc5 03       		.byte	0x3
 15567 1fc6 00000000 		.4byte	copedentNamesArray
 15568 1fca 25       		.uleb128 0x25
 15569 1fcb 6B030000 		.4byte	.LASF336
 15570 1fcf 01       		.byte	0x1
 15571 1fd0 E201     		.2byte	0x1e2
 15572 1fd2 E71D0000 		.4byte	0x1de7
 15573 1fd6 05       		.uleb128 0x5
 15574 1fd7 03       		.byte	0x3
 15575 1fd8 00000000 		.4byte	prevStringPitchBend
 15576 1fdc 09       		.uleb128 0x9
 15577 1fdd 13010000 		.4byte	0x113
 15578 1fe1 F21F0000 		.4byte	0x1ff2
 15579 1fe5 0A       		.uleb128 0xa
 15580 1fe6 4C010000 		.4byte	0x14c
 15581 1fea 09       		.byte	0x9
 15582 1feb 0A       		.uleb128 0xa
 15583 1fec 4C010000 		.4byte	0x14c
 15584 1ff0 0B       		.byte	0xb
 15585 1ff1 00       		.byte	0
 15586 1ff2 25       		.uleb128 0x25
 15587 1ff3 F4130000 		.4byte	.LASF337
 15588 1ff7 01       		.byte	0x1
 15589 1ff8 E401     		.2byte	0x1e4
 15590 1ffa DC1F0000 		.4byte	0x1fdc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 332


 15591 1ffe 05       		.uleb128 0x5
 15592 1fff 03       		.byte	0x3
 15593 2000 00000000 		.4byte	pedals
 15594 2004 25       		.uleb128 0x25
 15595 2005 CB0C0000 		.4byte	.LASF338
 15596 2009 01       		.byte	0x1
 15597 200a E601     		.2byte	0x1e6
 15598 200c C91C0000 		.4byte	0x1cc9
 15599 2010 05       		.uleb128 0x5
 15600 2011 03       		.byte	0x3
 15601 2012 00000000 		.4byte	pedal_cc_assignments
 15602 2016 25       		.uleb128 0x25
 15603 2017 C90D0000 		.4byte	.LASF339
 15604 201b 01       		.byte	0x1
 15605 201c E701     		.2byte	0x1e7
 15606 201e E71D0000 		.4byte	0x1de7
 15607 2022 05       		.uleb128 0x5
 15608 2023 03       		.byte	0x3
 15609 2024 00000000 		.4byte	openStringFrequencies
 15610 2028 25       		.uleb128 0x25
 15611 2029 BA110000 		.4byte	.LASF340
 15612 202d 01       		.byte	0x1
 15613 202e E801     		.2byte	0x1e8
 15614 2030 E71D0000 		.4byte	0x1de7
 15615 2034 05       		.uleb128 0x5
 15616 2035 03       		.byte	0x3
 15617 2036 00000000 		.4byte	stringMappedPositions
 15618 203a 25       		.uleb128 0x25
 15619 203b BB080000 		.4byte	.LASF341
 15620 203f 01       		.byte	0x1
 15621 2040 E901     		.2byte	0x1e9
 15622 2042 E71D0000 		.4byte	0x1de7
 15623 2046 05       		.uleb128 0x5
 15624 2047 03       		.byte	0x3
 15625 2048 00000000 		.4byte	invStringMappedPositions
 15626 204c 25       		.uleb128 0x25
 15627 204d 2B140000 		.4byte	.LASF342
 15628 2051 01       		.byte	0x1
 15629 2052 EA01     		.2byte	0x1ea
 15630 2054 E71D0000 		.4byte	0x1de7
 15631 2058 05       		.uleb128 0x5
 15632 2059 03       		.byte	0x3
 15633 205a 00000000 		.4byte	stringFrequencies
 15634 205e 25       		.uleb128 0x25
 15635 205f 26050000 		.4byte	.LASF343
 15636 2063 01       		.byte	0x1
 15637 2064 EB01     		.2byte	0x1eb
 15638 2066 E71D0000 		.4byte	0x1de7
 15639 206a 05       		.uleb128 0x5
 15640 206b 03       		.byte	0x3
 15641 206c 00000000 		.4byte	stringOctave
 15642 2070 25       		.uleb128 0x25
 15643 2071 810B0000 		.4byte	.LASF344
 15644 2075 01       		.byte	0x1
 15645 2076 EC01     		.2byte	0x1ec
 15646 2078 E71D0000 		.4byte	0x1de7
 15647 207c 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 333


 15648 207d 03       		.byte	0x3
 15649 207e 00000000 		.4byte	stringPitch
 15650 2082 25       		.uleb128 0x25
 15651 2083 4F110000 		.4byte	.LASF345
 15652 2087 01       		.byte	0x1
 15653 2088 ED01     		.2byte	0x1ed
 15654 208a E71D0000 		.4byte	0x1de7
 15655 208e 05       		.uleb128 0x5
 15656 208f 03       		.byte	0x3
 15657 2090 00000000 		.4byte	stringMIDI
 15658 2094 09       		.uleb128 0x9
 15659 2095 9F000000 		.4byte	0x9f
 15660 2099 A4200000 		.4byte	0x20a4
 15661 209d 0A       		.uleb128 0xa
 15662 209e 4C010000 		.4byte	0x14c
 15663 20a2 0B       		.byte	0xb
 15664 20a3 00       		.byte	0
 15665 20a4 25       		.uleb128 0x25
 15666 20a5 2B0A0000 		.4byte	.LASF346
 15667 20a9 01       		.byte	0x1
 15668 20aa EE01     		.2byte	0x1ee
 15669 20ac 94200000 		.4byte	0x2094
 15670 20b0 05       		.uleb128 0x5
 15671 20b1 03       		.byte	0x3
 15672 20b2 00000000 		.4byte	openStringMIDI_Int
 15673 20b6 25       		.uleb128 0x25
 15674 20b7 57100000 		.4byte	.LASF347
 15675 20bb 01       		.byte	0x1
 15676 20bc EF01     		.2byte	0x1ef
 15677 20be 9F000000 		.4byte	0x9f
 15678 20c2 05       		.uleb128 0x5
 15679 20c3 03       		.byte	0x3
 15680 20c4 00000000 		.4byte	OLEDcount
 15681 20c8 25       		.uleb128 0x25
 15682 20c9 A80B0000 		.4byte	.LASF348
 15683 20cd 01       		.byte	0x1
 15684 20ce F101     		.2byte	0x1f1
 15685 20d0 9F000000 		.4byte	0x9f
 15686 20d4 05       		.uleb128 0x5
 15687 20d5 03       		.byte	0x3
 15688 20d6 00000000 		.4byte	mainOLEDWaitingToSend
 15689 20da 25       		.uleb128 0x25
 15690 20db 47010000 		.4byte	.LASF349
 15691 20df 01       		.byte	0x1
 15692 20e0 F201     		.2byte	0x1f2
 15693 20e2 9F000000 		.4byte	0x9f
 15694 20e6 05       		.uleb128 0x5
 15695 20e7 03       		.byte	0x3
 15696 20e8 00000000 		.4byte	macroOLEDWaitingToSend
 15697 20ec 09       		.uleb128 0x9
 15698 20ed 9F000000 		.4byte	0x9f
 15699 20f1 FC200000 		.4byte	0x20fc
 15700 20f5 0A       		.uleb128 0xa
 15701 20f6 4C010000 		.4byte	0x14c
 15702 20fa 3F       		.byte	0x3f
 15703 20fb 00       		.byte	0
 15704 20fc 25       		.uleb128 0x25
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 334


 15705 20fd 98050000 		.4byte	.LASF350
 15706 2101 01       		.byte	0x1
 15707 2102 F401     		.2byte	0x1f4
 15708 2104 EC200000 		.4byte	0x20ec
 15709 2108 05       		.uleb128 0x5
 15710 2109 03       		.byte	0x3
 15711 210a 00000000 		.4byte	presetAlreadyDisplayed
 15712 210e 25       		.uleb128 0x25
 15713 210f 83100000 		.4byte	.LASF351
 15714 2113 01       		.byte	0x1
 15715 2114 F601     		.2byte	0x1f6
 15716 2116 091E0000 		.4byte	0x1e09
 15717 211a 05       		.uleb128 0x5
 15718 211b 03       		.byte	0x3
 15719 211c 00000000 		.4byte	pedals_float
 15720 2120 25       		.uleb128 0x25
 15721 2121 700E0000 		.4byte	.LASF352
 15722 2125 01       		.byte	0x1
 15723 2126 FE01     		.2byte	0x1fe
 15724 2128 9F000000 		.4byte	0x9f
 15725 212c 05       		.uleb128 0x5
 15726 212d 03       		.byte	0x3
 15727 212e 00000000 		.4byte	currentNeck
 15728 2132 25       		.uleb128 0x25
 15729 2133 53040000 		.4byte	.LASF353
 15730 2137 01       		.byte	0x1
 15731 2138 FF01     		.2byte	0x1ff
 15732 213a B8000000 		.4byte	0xb8
 15733 213e 05       		.uleb128 0x5
 15734 213f 03       		.byte	0x3
 15735 2140 00000000 		.4byte	neckByte
 15736 2144 25       		.uleb128 0x25
 15737 2145 7C0E0000 		.4byte	.LASF354
 15738 2149 01       		.byte	0x1
 15739 214a 0102     		.2byte	0x201
 15740 214c 9F000000 		.4byte	0x9f
 15741 2150 05       		.uleb128 0x5
 15742 2151 03       		.byte	0x3
 15743 2152 00000000 		.4byte	editMode
 15744 2156 25       		.uleb128 0x25
 15745 2157 C6120000 		.4byte	.LASF355
 15746 215b 01       		.byte	0x1
 15747 215c 0202     		.2byte	0x202
 15748 215e 9F000000 		.4byte	0x9f
 15749 2162 05       		.uleb128 0x5
 15750 2163 03       		.byte	0x3
 15751 2164 00000000 		.4byte	leverCalibrationMode
 15752 2168 25       		.uleb128 0x25
 15753 2169 DE0F0000 		.4byte	.LASF356
 15754 216d 01       		.byte	0x1
 15755 216e 0302     		.2byte	0x203
 15756 2170 9F000000 		.4byte	0x9f
 15757 2174 05       		.uleb128 0x5
 15758 2175 03       		.byte	0x3
 15759 2176 00000000 		.4byte	fretCalibrationMode
 15760 217a 25       		.uleb128 0x25
 15761 217b 9F010000 		.4byte	.LASF357
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 335


 15762 217f 01       		.byte	0x1
 15763 2180 0A02     		.2byte	0x20a
 15764 2182 13010000 		.4byte	0x113
 15765 2186 05       		.uleb128 0x5
 15766 2187 03       		.byte	0x3
 15767 2188 00000000 		.4byte	stringScaling
 15768 218c 25       		.uleb128 0x25
 15769 218d 61100000 		.4byte	.LASF358
 15770 2191 01       		.byte	0x1
 15771 2192 0B02     		.2byte	0x20b
 15772 2194 13010000 		.4byte	0x113
 15773 2198 05       		.uleb128 0x5
 15774 2199 03       		.byte	0x3
 15775 219a 00000000 		.4byte	stringOffset
 15776 219e 25       		.uleb128 0x25
 15777 219f F8080000 		.4byte	.LASF359
 15778 21a3 01       		.byte	0x1
 15779 21a4 2E07     		.2byte	0x72e
 15780 21a6 94200000 		.4byte	0x2094
 15781 21aa 05       		.uleb128 0x5
 15782 21ab 03       		.byte	0x3
 15783 21ac 00000000 		.4byte	prevNotes
 15784 21b0 25       		.uleb128 0x25
 15785 21b1 360D0000 		.4byte	.LASF360
 15786 21b5 01       		.byte	0x1
 15787 21b6 A307     		.2byte	0x7a3
 15788 21b8 24020000 		.4byte	0x224
 15789 21bc 05       		.uleb128 0x5
 15790 21bd 03       		.byte	0x3
 15791 21be 00000000 		.4byte	checkStatus
 15792 21c2 25       		.uleb128 0x25
 15793 21c3 F30E0000 		.4byte	.LASF361
 15794 21c7 01       		.byte	0x1
 15795 21c8 A407     		.2byte	0x7a4
 15796 21ca 29020000 		.4byte	0x229
 15797 21ce 05       		.uleb128 0x5
 15798 21cf 03       		.byte	0x3
 15799 21d0 00000000 		.4byte	checkBase
 15800 21d4 25       		.uleb128 0x25
 15801 21d5 1F080000 		.4byte	.LASF362
 15802 21d9 01       		.byte	0x1
 15803 21da A807     		.2byte	0x7a8
 15804 21dc 9F000000 		.4byte	0x9f
 15805 21e0 05       		.uleb128 0x5
 15806 21e1 03       		.byte	0x3
 15807 21e2 00000000 		.4byte	SPI_errors
 15808 21e6 09       		.uleb128 0x9
 15809 21e7 24020000 		.4byte	0x224
 15810 21eb F6210000 		.4byte	0x21f6
 15811 21ef 0A       		.uleb128 0xa
 15812 21f0 4C010000 		.4byte	0x14c
 15813 21f4 03       		.byte	0x3
 15814 21f5 00       		.byte	0
 15815 21f6 25       		.uleb128 0x25
 15816 21f7 8D0D0000 		.4byte	.LASF96
 15817 21fb 01       		.byte	0x1
 15818 21fc 2409     		.2byte	0x924
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 336


 15819 21fe 08220000 		.4byte	0x2208
 15820 2202 05       		.uleb128 0x5
 15821 2203 03       		.byte	0x3
 15822 2204 00000000 		.4byte	tempMIDI
 15823 2208 06       		.uleb128 0x6
 15824 2209 E6210000 		.4byte	0x21e6
 15825 220d 25       		.uleb128 0x25
 15826 220e 26000000 		.4byte	.LASF363
 15827 2212 01       		.byte	0x1
 15828 2213 2509     		.2byte	0x925
 15829 2215 24020000 		.4byte	0x224
 15830 2219 05       		.uleb128 0x5
 15831 221a 03       		.byte	0x3
 15832 221b 00000000 		.4byte	firstSysex
 15833 221f 25       		.uleb128 0x25
 15834 2220 69070000 		.4byte	.LASF364
 15835 2224 01       		.byte	0x1
 15836 2225 2609     		.2byte	0x926
 15837 2227 31220000 		.4byte	0x2231
 15838 222b 05       		.uleb128 0x5
 15839 222c 03       		.byte	0x3
 15840 222d 00000000 		.4byte	sysexPointerMask
 15841 2231 08       		.uleb128 0x8
 15842 2232 CE000000 		.4byte	0xce
 15843 2236 09       		.uleb128 0x9
 15844 2237 AD000000 		.4byte	0xad
 15845 223b 4C220000 		.4byte	0x224c
 15846 223f 0A       		.uleb128 0xa
 15847 2240 4C010000 		.4byte	0x14c
 15848 2244 02       		.byte	0x2
 15849 2245 0A       		.uleb128 0xa
 15850 2246 4C010000 		.4byte	0x14c
 15851 224a 01       		.byte	0x1
 15852 224b 00       		.byte	0
 15853 224c 25       		.uleb128 0x25
 15854 224d F50C0000 		.4byte	.LASF365
 15855 2251 01       		.byte	0x1
 15856 2252 170A     		.2byte	0xa17
 15857 2254 36220000 		.4byte	0x2236
 15858 2258 05       		.uleb128 0x5
 15859 2259 03       		.byte	0x3
 15860 225a 00000000 		.4byte	menuPosition
 15861 225e 09       		.uleb128 0x9
 15862 225f 6E220000 		.4byte	0x226e
 15863 2263 6E220000 		.4byte	0x226e
 15864 2267 0A       		.uleb128 0xa
 15865 2268 4C010000 		.4byte	0x14c
 15866 226c 02       		.byte	0x2
 15867 226d 00       		.byte	0
 15868 226e 08       		.uleb128 0x8
 15869 226f 53010000 		.4byte	0x153
 15870 2273 25       		.uleb128 0x25
 15871 2274 CC100000 		.4byte	.LASF366
 15872 2278 01       		.byte	0x1
 15873 2279 1B0A     		.2byte	0xa1b
 15874 227b 85220000 		.4byte	0x2285
 15875 227f 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 337


 15876 2280 03       		.byte	0x3
 15877 2281 00000000 		.4byte	calibrationNames
 15878 2285 08       		.uleb128 0x8
 15879 2286 5E220000 		.4byte	0x225e
 15880 228a 25       		.uleb128 0x25
 15881 228b 180E0000 		.4byte	.LASF367
 15882 228f 01       		.byte	0x1
 15883 2290 1C0A     		.2byte	0xa1c
 15884 2292 9C220000 		.4byte	0x229c
 15885 2296 05       		.uleb128 0x5
 15886 2297 03       		.byte	0x3
 15887 2298 00000000 		.4byte	mainMenuNames
 15888 229c 08       		.uleb128 0x8
 15889 229d 5E220000 		.4byte	0x225e
 15890 22a1 09       		.uleb128 0x9
 15891 22a2 6E220000 		.4byte	0x226e
 15892 22a6 B1220000 		.4byte	0x22b1
 15893 22aa 0A       		.uleb128 0xa
 15894 22ab 4C010000 		.4byte	0x14c
 15895 22af 06       		.byte	0x6
 15896 22b0 00       		.byte	0
 15897 22b1 25       		.uleb128 0x25
 15898 22b2 9E040000 		.4byte	.LASF368
 15899 22b6 01       		.byte	0x1
 15900 22b7 1D0A     		.2byte	0xa1d
 15901 22b9 C3220000 		.4byte	0x22c3
 15902 22bd 05       		.uleb128 0x5
 15903 22be 03       		.byte	0x3
 15904 22bf 00000000 		.4byte	settingsNames
 15905 22c3 08       		.uleb128 0x8
 15906 22c4 A1220000 		.4byte	0x22a1
 15907 22c8 25       		.uleb128 0x25
 15908 22c9 EE020000 		.4byte	.LASF369
 15909 22cd 01       		.byte	0x1
 15910 22ce 1E0A     		.2byte	0xa1e
 15911 22d0 B8000000 		.4byte	0xb8
 15912 22d4 05       		.uleb128 0x5
 15913 22d5 03       		.byte	0x3
 15914 22d6 00000000 		.4byte	numMainMenuItems
 15915 22da 25       		.uleb128 0x25
 15916 22db 1C040000 		.4byte	.LASF370
 15917 22df 01       		.byte	0x1
 15918 22e0 1F0A     		.2byte	0xa1f
 15919 22e2 B8000000 		.4byte	0xb8
 15920 22e6 05       		.uleb128 0x5
 15921 22e7 03       		.byte	0x3
 15922 22e8 00000000 		.4byte	numCalibrationItems
 15923 22ec 25       		.uleb128 0x25
 15924 22ed AA000000 		.4byte	.LASF371
 15925 22f1 01       		.byte	0x1
 15926 22f2 200A     		.2byte	0xa20
 15927 22f4 B8000000 		.4byte	0xb8
 15928 22f8 05       		.uleb128 0x5
 15929 22f9 03       		.byte	0x3
 15930 22fa 00000000 		.4byte	numSettingsItems
 15931 22fe 25       		.uleb128 0x25
 15932 22ff 6C060000 		.4byte	.LASF372
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 338


 15933 2303 01       		.byte	0x1
 15934 2304 490A     		.2byte	0xa49
 15935 2306 B8000000 		.4byte	0xb8
 15936 230a 05       		.uleb128 0x5
 15937 230b 03       		.byte	0x3
 15938 230c 00000000 		.4byte	fretToCalibrate
 15939 2310 25       		.uleb128 0x25
 15940 2311 38010000 		.4byte	.LASF373
 15941 2315 01       		.byte	0x1
 15942 2316 4A0A     		.2byte	0xa4a
 15943 2318 171C0000 		.4byte	0x1c17
 15944 231c 05       		.uleb128 0x5
 15945 231d 03       		.byte	0x3
 15946 231e 00000000 		.4byte	whichFretArray
 15947 2322 00       		.byte	0
 15948              		.section	.debug_abbrev,"",%progbits
 15949              	.Ldebug_abbrev0:
 15950 0000 01       		.uleb128 0x1
 15951 0001 11       		.uleb128 0x11
 15952 0002 01       		.byte	0x1
 15953 0003 25       		.uleb128 0x25
 15954 0004 0E       		.uleb128 0xe
 15955 0005 13       		.uleb128 0x13
 15956 0006 0B       		.uleb128 0xb
 15957 0007 03       		.uleb128 0x3
 15958 0008 0E       		.uleb128 0xe
 15959 0009 1B       		.uleb128 0x1b
 15960 000a 0E       		.uleb128 0xe
 15961 000b 55       		.uleb128 0x55
 15962 000c 17       		.uleb128 0x17
 15963 000d 11       		.uleb128 0x11
 15964 000e 01       		.uleb128 0x1
 15965 000f 10       		.uleb128 0x10
 15966 0010 17       		.uleb128 0x17
 15967 0011 00       		.byte	0
 15968 0012 00       		.byte	0
 15969 0013 02       		.uleb128 0x2
 15970 0014 16       		.uleb128 0x16
 15971 0015 00       		.byte	0
 15972 0016 03       		.uleb128 0x3
 15973 0017 0E       		.uleb128 0xe
 15974 0018 3A       		.uleb128 0x3a
 15975 0019 0B       		.uleb128 0xb
 15976 001a 3B       		.uleb128 0x3b
 15977 001b 0B       		.uleb128 0xb
 15978 001c 49       		.uleb128 0x49
 15979 001d 13       		.uleb128 0x13
 15980 001e 00       		.byte	0
 15981 001f 00       		.byte	0
 15982 0020 03       		.uleb128 0x3
 15983 0021 24       		.uleb128 0x24
 15984 0022 00       		.byte	0
 15985 0023 0B       		.uleb128 0xb
 15986 0024 0B       		.uleb128 0xb
 15987 0025 3E       		.uleb128 0x3e
 15988 0026 0B       		.uleb128 0xb
 15989 0027 03       		.uleb128 0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 339


 15990 0028 0E       		.uleb128 0xe
 15991 0029 00       		.byte	0
 15992 002a 00       		.byte	0
 15993 002b 04       		.uleb128 0x4
 15994 002c 24       		.uleb128 0x24
 15995 002d 00       		.byte	0
 15996 002e 0B       		.uleb128 0xb
 15997 002f 0B       		.uleb128 0xb
 15998 0030 3E       		.uleb128 0x3e
 15999 0031 0B       		.uleb128 0xb
 16000 0032 03       		.uleb128 0x3
 16001 0033 08       		.uleb128 0x8
 16002 0034 00       		.byte	0
 16003 0035 00       		.byte	0
 16004 0036 05       		.uleb128 0x5
 16005 0037 16       		.uleb128 0x16
 16006 0038 00       		.byte	0
 16007 0039 03       		.uleb128 0x3
 16008 003a 0E       		.uleb128 0xe
 16009 003b 3A       		.uleb128 0x3a
 16010 003c 0B       		.uleb128 0xb
 16011 003d 3B       		.uleb128 0x3b
 16012 003e 05       		.uleb128 0x5
 16013 003f 49       		.uleb128 0x49
 16014 0040 13       		.uleb128 0x13
 16015 0041 00       		.byte	0
 16016 0042 00       		.byte	0
 16017 0043 06       		.uleb128 0x6
 16018 0044 35       		.uleb128 0x35
 16019 0045 00       		.byte	0
 16020 0046 49       		.uleb128 0x49
 16021 0047 13       		.uleb128 0x13
 16022 0048 00       		.byte	0
 16023 0049 00       		.byte	0
 16024 004a 07       		.uleb128 0x7
 16025 004b 0F       		.uleb128 0xf
 16026 004c 00       		.byte	0
 16027 004d 0B       		.uleb128 0xb
 16028 004e 0B       		.uleb128 0xb
 16029 004f 49       		.uleb128 0x49
 16030 0050 13       		.uleb128 0x13
 16031 0051 00       		.byte	0
 16032 0052 00       		.byte	0
 16033 0053 08       		.uleb128 0x8
 16034 0054 26       		.uleb128 0x26
 16035 0055 00       		.byte	0
 16036 0056 49       		.uleb128 0x49
 16037 0057 13       		.uleb128 0x13
 16038 0058 00       		.byte	0
 16039 0059 00       		.byte	0
 16040 005a 09       		.uleb128 0x9
 16041 005b 01       		.uleb128 0x1
 16042 005c 01       		.byte	0x1
 16043 005d 49       		.uleb128 0x49
 16044 005e 13       		.uleb128 0x13
 16045 005f 01       		.uleb128 0x1
 16046 0060 13       		.uleb128 0x13
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 340


 16047 0061 00       		.byte	0
 16048 0062 00       		.byte	0
 16049 0063 0A       		.uleb128 0xa
 16050 0064 21       		.uleb128 0x21
 16051 0065 00       		.byte	0
 16052 0066 49       		.uleb128 0x49
 16053 0067 13       		.uleb128 0x13
 16054 0068 2F       		.uleb128 0x2f
 16055 0069 0B       		.uleb128 0xb
 16056 006a 00       		.byte	0
 16057 006b 00       		.byte	0
 16058 006c 0B       		.uleb128 0xb
 16059 006d 13       		.uleb128 0x13
 16060 006e 01       		.byte	0x1
 16061 006f 0B       		.uleb128 0xb
 16062 0070 0B       		.uleb128 0xb
 16063 0071 3A       		.uleb128 0x3a
 16064 0072 0B       		.uleb128 0xb
 16065 0073 3B       		.uleb128 0x3b
 16066 0074 05       		.uleb128 0x5
 16067 0075 01       		.uleb128 0x1
 16068 0076 13       		.uleb128 0x13
 16069 0077 00       		.byte	0
 16070 0078 00       		.byte	0
 16071 0079 0C       		.uleb128 0xc
 16072 007a 0D       		.uleb128 0xd
 16073 007b 00       		.byte	0
 16074 007c 03       		.uleb128 0x3
 16075 007d 0E       		.uleb128 0xe
 16076 007e 3A       		.uleb128 0x3a
 16077 007f 0B       		.uleb128 0xb
 16078 0080 3B       		.uleb128 0x3b
 16079 0081 05       		.uleb128 0x5
 16080 0082 49       		.uleb128 0x49
 16081 0083 13       		.uleb128 0x13
 16082 0084 38       		.uleb128 0x38
 16083 0085 0B       		.uleb128 0xb
 16084 0086 00       		.byte	0
 16085 0087 00       		.byte	0
 16086 0088 0D       		.uleb128 0xd
 16087 0089 04       		.uleb128 0x4
 16088 008a 01       		.byte	0x1
 16089 008b 0B       		.uleb128 0xb
 16090 008c 0B       		.uleb128 0xb
 16091 008d 49       		.uleb128 0x49
 16092 008e 13       		.uleb128 0x13
 16093 008f 3A       		.uleb128 0x3a
 16094 0090 0B       		.uleb128 0xb
 16095 0091 3B       		.uleb128 0x3b
 16096 0092 05       		.uleb128 0x5
 16097 0093 01       		.uleb128 0x1
 16098 0094 13       		.uleb128 0x13
 16099 0095 00       		.byte	0
 16100 0096 00       		.byte	0
 16101 0097 0E       		.uleb128 0xe
 16102 0098 28       		.uleb128 0x28
 16103 0099 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 341


 16104 009a 03       		.uleb128 0x3
 16105 009b 0E       		.uleb128 0xe
 16106 009c 1C       		.uleb128 0x1c
 16107 009d 0B       		.uleb128 0xb
 16108 009e 00       		.byte	0
 16109 009f 00       		.byte	0
 16110 00a0 0F       		.uleb128 0xf
 16111 00a1 04       		.uleb128 0x4
 16112 00a2 01       		.byte	0x1
 16113 00a3 03       		.uleb128 0x3
 16114 00a4 0E       		.uleb128 0xe
 16115 00a5 0B       		.uleb128 0xb
 16116 00a6 0B       		.uleb128 0xb
 16117 00a7 49       		.uleb128 0x49
 16118 00a8 13       		.uleb128 0x13
 16119 00a9 3A       		.uleb128 0x3a
 16120 00aa 0B       		.uleb128 0xb
 16121 00ab 3B       		.uleb128 0x3b
 16122 00ac 0B       		.uleb128 0xb
 16123 00ad 01       		.uleb128 0x1
 16124 00ae 13       		.uleb128 0x13
 16125 00af 00       		.byte	0
 16126 00b0 00       		.byte	0
 16127 00b1 10       		.uleb128 0x10
 16128 00b2 17       		.uleb128 0x17
 16129 00b3 01       		.byte	0x1
 16130 00b4 03       		.uleb128 0x3
 16131 00b5 0E       		.uleb128 0xe
 16132 00b6 0B       		.uleb128 0xb
 16133 00b7 0B       		.uleb128 0xb
 16134 00b8 3A       		.uleb128 0x3a
 16135 00b9 0B       		.uleb128 0xb
 16136 00ba 3B       		.uleb128 0x3b
 16137 00bb 0B       		.uleb128 0xb
 16138 00bc 01       		.uleb128 0x1
 16139 00bd 13       		.uleb128 0x13
 16140 00be 00       		.byte	0
 16141 00bf 00       		.byte	0
 16142 00c0 11       		.uleb128 0x11
 16143 00c1 0D       		.uleb128 0xd
 16144 00c2 00       		.byte	0
 16145 00c3 03       		.uleb128 0x3
 16146 00c4 08       		.uleb128 0x8
 16147 00c5 3A       		.uleb128 0x3a
 16148 00c6 0B       		.uleb128 0xb
 16149 00c7 3B       		.uleb128 0x3b
 16150 00c8 0B       		.uleb128 0xb
 16151 00c9 49       		.uleb128 0x49
 16152 00ca 13       		.uleb128 0x13
 16153 00cb 00       		.byte	0
 16154 00cc 00       		.byte	0
 16155 00cd 12       		.uleb128 0x12
 16156 00ce 04       		.uleb128 0x4
 16157 00cf 01       		.byte	0x1
 16158 00d0 03       		.uleb128 0x3
 16159 00d1 0E       		.uleb128 0xe
 16160 00d2 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 342


 16161 00d3 0B       		.uleb128 0xb
 16162 00d4 49       		.uleb128 0x49
 16163 00d5 13       		.uleb128 0x13
 16164 00d6 3A       		.uleb128 0x3a
 16165 00d7 0B       		.uleb128 0xb
 16166 00d8 3B       		.uleb128 0x3b
 16167 00d9 05       		.uleb128 0x5
 16168 00da 01       		.uleb128 0x1
 16169 00db 13       		.uleb128 0x13
 16170 00dc 00       		.byte	0
 16171 00dd 00       		.byte	0
 16172 00de 13       		.uleb128 0x13
 16173 00df 28       		.uleb128 0x28
 16174 00e0 00       		.byte	0
 16175 00e1 03       		.uleb128 0x3
 16176 00e2 08       		.uleb128 0x8
 16177 00e3 1C       		.uleb128 0x1c
 16178 00e4 0B       		.uleb128 0xb
 16179 00e5 00       		.byte	0
 16180 00e6 00       		.byte	0
 16181 00e7 14       		.uleb128 0x14
 16182 00e8 2E       		.uleb128 0x2e
 16183 00e9 01       		.byte	0x1
 16184 00ea 3F       		.uleb128 0x3f
 16185 00eb 19       		.uleb128 0x19
 16186 00ec 03       		.uleb128 0x3
 16187 00ed 0E       		.uleb128 0xe
 16188 00ee 3A       		.uleb128 0x3a
 16189 00ef 0B       		.uleb128 0xb
 16190 00f0 3B       		.uleb128 0x3b
 16191 00f1 0B       		.uleb128 0xb
 16192 00f2 27       		.uleb128 0x27
 16193 00f3 19       		.uleb128 0x19
 16194 00f4 11       		.uleb128 0x11
 16195 00f5 01       		.uleb128 0x1
 16196 00f6 12       		.uleb128 0x12
 16197 00f7 06       		.uleb128 0x6
 16198 00f8 40       		.uleb128 0x40
 16199 00f9 18       		.uleb128 0x18
 16200 00fa 9642     		.uleb128 0x2116
 16201 00fc 19       		.uleb128 0x19
 16202 00fd 01       		.uleb128 0x1
 16203 00fe 13       		.uleb128 0x13
 16204 00ff 00       		.byte	0
 16205 0100 00       		.byte	0
 16206 0101 15       		.uleb128 0x15
 16207 0102 0B       		.uleb128 0xb
 16208 0103 01       		.byte	0x1
 16209 0104 11       		.uleb128 0x11
 16210 0105 01       		.uleb128 0x1
 16211 0106 12       		.uleb128 0x12
 16212 0107 06       		.uleb128 0x6
 16213 0108 00       		.byte	0
 16214 0109 00       		.byte	0
 16215 010a 16       		.uleb128 0x16
 16216 010b 34       		.uleb128 0x34
 16217 010c 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 343


 16218 010d 03       		.uleb128 0x3
 16219 010e 08       		.uleb128 0x8
 16220 010f 3A       		.uleb128 0x3a
 16221 0110 0B       		.uleb128 0xb
 16222 0111 3B       		.uleb128 0x3b
 16223 0112 0B       		.uleb128 0xb
 16224 0113 49       		.uleb128 0x49
 16225 0114 13       		.uleb128 0x13
 16226 0115 02       		.uleb128 0x2
 16227 0116 18       		.uleb128 0x18
 16228 0117 00       		.byte	0
 16229 0118 00       		.byte	0
 16230 0119 17       		.uleb128 0x17
 16231 011a 2E       		.uleb128 0x2e
 16232 011b 00       		.byte	0
 16233 011c 3F       		.uleb128 0x3f
 16234 011d 19       		.uleb128 0x19
 16235 011e 03       		.uleb128 0x3
 16236 011f 0E       		.uleb128 0xe
 16237 0120 3A       		.uleb128 0x3a
 16238 0121 0B       		.uleb128 0xb
 16239 0122 3B       		.uleb128 0x3b
 16240 0123 05       		.uleb128 0x5
 16241 0124 27       		.uleb128 0x27
 16242 0125 19       		.uleb128 0x19
 16243 0126 11       		.uleb128 0x11
 16244 0127 01       		.uleb128 0x1
 16245 0128 12       		.uleb128 0x12
 16246 0129 06       		.uleb128 0x6
 16247 012a 40       		.uleb128 0x40
 16248 012b 18       		.uleb128 0x18
 16249 012c 9642     		.uleb128 0x2116
 16250 012e 19       		.uleb128 0x19
 16251 012f 00       		.byte	0
 16252 0130 00       		.byte	0
 16253 0131 18       		.uleb128 0x18
 16254 0132 2E       		.uleb128 0x2e
 16255 0133 01       		.byte	0x1
 16256 0134 3F       		.uleb128 0x3f
 16257 0135 19       		.uleb128 0x19
 16258 0136 03       		.uleb128 0x3
 16259 0137 0E       		.uleb128 0xe
 16260 0138 3A       		.uleb128 0x3a
 16261 0139 0B       		.uleb128 0xb
 16262 013a 3B       		.uleb128 0x3b
 16263 013b 05       		.uleb128 0x5
 16264 013c 27       		.uleb128 0x27
 16265 013d 19       		.uleb128 0x19
 16266 013e 49       		.uleb128 0x49
 16267 013f 13       		.uleb128 0x13
 16268 0140 11       		.uleb128 0x11
 16269 0141 01       		.uleb128 0x1
 16270 0142 12       		.uleb128 0x12
 16271 0143 06       		.uleb128 0x6
 16272 0144 40       		.uleb128 0x40
 16273 0145 18       		.uleb128 0x18
 16274 0146 9642     		.uleb128 0x2116
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 344


 16275 0148 19       		.uleb128 0x19
 16276 0149 01       		.uleb128 0x1
 16277 014a 13       		.uleb128 0x13
 16278 014b 00       		.byte	0
 16279 014c 00       		.byte	0
 16280 014d 19       		.uleb128 0x19
 16281 014e 05       		.uleb128 0x5
 16282 014f 00       		.byte	0
 16283 0150 03       		.uleb128 0x3
 16284 0151 08       		.uleb128 0x8
 16285 0152 3A       		.uleb128 0x3a
 16286 0153 0B       		.uleb128 0xb
 16287 0154 3B       		.uleb128 0x3b
 16288 0155 05       		.uleb128 0x5
 16289 0156 49       		.uleb128 0x49
 16290 0157 13       		.uleb128 0x13
 16291 0158 02       		.uleb128 0x2
 16292 0159 18       		.uleb128 0x18
 16293 015a 00       		.byte	0
 16294 015b 00       		.byte	0
 16295 015c 1A       		.uleb128 0x1a
 16296 015d 34       		.uleb128 0x34
 16297 015e 00       		.byte	0
 16298 015f 03       		.uleb128 0x3
 16299 0160 0E       		.uleb128 0xe
 16300 0161 3A       		.uleb128 0x3a
 16301 0162 0B       		.uleb128 0xb
 16302 0163 3B       		.uleb128 0x3b
 16303 0164 05       		.uleb128 0x5
 16304 0165 49       		.uleb128 0x49
 16305 0166 13       		.uleb128 0x13
 16306 0167 02       		.uleb128 0x2
 16307 0168 18       		.uleb128 0x18
 16308 0169 00       		.byte	0
 16309 016a 00       		.byte	0
 16310 016b 1B       		.uleb128 0x1b
 16311 016c 05       		.uleb128 0x5
 16312 016d 00       		.byte	0
 16313 016e 03       		.uleb128 0x3
 16314 016f 0E       		.uleb128 0xe
 16315 0170 3A       		.uleb128 0x3a
 16316 0171 0B       		.uleb128 0xb
 16317 0172 3B       		.uleb128 0x3b
 16318 0173 05       		.uleb128 0x5
 16319 0174 49       		.uleb128 0x49
 16320 0175 13       		.uleb128 0x13
 16321 0176 02       		.uleb128 0x2
 16322 0177 18       		.uleb128 0x18
 16323 0178 00       		.byte	0
 16324 0179 00       		.byte	0
 16325 017a 1C       		.uleb128 0x1c
 16326 017b 34       		.uleb128 0x34
 16327 017c 00       		.byte	0
 16328 017d 03       		.uleb128 0x3
 16329 017e 08       		.uleb128 0x8
 16330 017f 3A       		.uleb128 0x3a
 16331 0180 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 345


 16332 0181 3B       		.uleb128 0x3b
 16333 0182 05       		.uleb128 0x5
 16334 0183 49       		.uleb128 0x49
 16335 0184 13       		.uleb128 0x13
 16336 0185 02       		.uleb128 0x2
 16337 0186 18       		.uleb128 0x18
 16338 0187 00       		.byte	0
 16339 0188 00       		.byte	0
 16340 0189 1D       		.uleb128 0x1d
 16341 018a 2E       		.uleb128 0x2e
 16342 018b 01       		.byte	0x1
 16343 018c 3F       		.uleb128 0x3f
 16344 018d 19       		.uleb128 0x19
 16345 018e 03       		.uleb128 0x3
 16346 018f 08       		.uleb128 0x8
 16347 0190 3A       		.uleb128 0x3a
 16348 0191 0B       		.uleb128 0xb
 16349 0192 3B       		.uleb128 0x3b
 16350 0193 05       		.uleb128 0x5
 16351 0194 27       		.uleb128 0x27
 16352 0195 19       		.uleb128 0x19
 16353 0196 49       		.uleb128 0x49
 16354 0197 13       		.uleb128 0x13
 16355 0198 11       		.uleb128 0x11
 16356 0199 01       		.uleb128 0x1
 16357 019a 12       		.uleb128 0x12
 16358 019b 06       		.uleb128 0x6
 16359 019c 40       		.uleb128 0x40
 16360 019d 18       		.uleb128 0x18
 16361 019e 9642     		.uleb128 0x2116
 16362 01a0 19       		.uleb128 0x19
 16363 01a1 01       		.uleb128 0x1
 16364 01a2 13       		.uleb128 0x13
 16365 01a3 00       		.byte	0
 16366 01a4 00       		.byte	0
 16367 01a5 1E       		.uleb128 0x1e
 16368 01a6 2E       		.uleb128 0x2e
 16369 01a7 00       		.byte	0
 16370 01a8 3F       		.uleb128 0x3f
 16371 01a9 19       		.uleb128 0x19
 16372 01aa 03       		.uleb128 0x3
 16373 01ab 0E       		.uleb128 0xe
 16374 01ac 3A       		.uleb128 0x3a
 16375 01ad 0B       		.uleb128 0xb
 16376 01ae 3B       		.uleb128 0x3b
 16377 01af 05       		.uleb128 0x5
 16378 01b0 11       		.uleb128 0x11
 16379 01b1 01       		.uleb128 0x1
 16380 01b2 12       		.uleb128 0x12
 16381 01b3 06       		.uleb128 0x6
 16382 01b4 40       		.uleb128 0x40
 16383 01b5 18       		.uleb128 0x18
 16384 01b6 9742     		.uleb128 0x2117
 16385 01b8 19       		.uleb128 0x19
 16386 01b9 00       		.byte	0
 16387 01ba 00       		.byte	0
 16388 01bb 1F       		.uleb128 0x1f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 346


 16389 01bc 2E       		.uleb128 0x2e
 16390 01bd 01       		.byte	0x1
 16391 01be 3F       		.uleb128 0x3f
 16392 01bf 19       		.uleb128 0x19
 16393 01c0 03       		.uleb128 0x3
 16394 01c1 0E       		.uleb128 0xe
 16395 01c2 3A       		.uleb128 0x3a
 16396 01c3 0B       		.uleb128 0xb
 16397 01c4 3B       		.uleb128 0x3b
 16398 01c5 05       		.uleb128 0x5
 16399 01c6 11       		.uleb128 0x11
 16400 01c7 01       		.uleb128 0x1
 16401 01c8 12       		.uleb128 0x12
 16402 01c9 06       		.uleb128 0x6
 16403 01ca 40       		.uleb128 0x40
 16404 01cb 18       		.uleb128 0x18
 16405 01cc 9642     		.uleb128 0x2116
 16406 01ce 19       		.uleb128 0x19
 16407 01cf 01       		.uleb128 0x1
 16408 01d0 13       		.uleb128 0x13
 16409 01d1 00       		.byte	0
 16410 01d2 00       		.byte	0
 16411 01d3 20       		.uleb128 0x20
 16412 01d4 0B       		.uleb128 0xb
 16413 01d5 01       		.byte	0x1
 16414 01d6 11       		.uleb128 0x11
 16415 01d7 01       		.uleb128 0x1
 16416 01d8 12       		.uleb128 0x12
 16417 01d9 06       		.uleb128 0x6
 16418 01da 01       		.uleb128 0x1
 16419 01db 13       		.uleb128 0x13
 16420 01dc 00       		.byte	0
 16421 01dd 00       		.byte	0
 16422 01de 21       		.uleb128 0x21
 16423 01df 2E       		.uleb128 0x2e
 16424 01e0 01       		.byte	0x1
 16425 01e1 3F       		.uleb128 0x3f
 16426 01e2 19       		.uleb128 0x19
 16427 01e3 03       		.uleb128 0x3
 16428 01e4 0E       		.uleb128 0xe
 16429 01e5 3A       		.uleb128 0x3a
 16430 01e6 0B       		.uleb128 0xb
 16431 01e7 3B       		.uleb128 0x3b
 16432 01e8 05       		.uleb128 0x5
 16433 01e9 27       		.uleb128 0x27
 16434 01ea 19       		.uleb128 0x19
 16435 01eb 11       		.uleb128 0x11
 16436 01ec 01       		.uleb128 0x1
 16437 01ed 12       		.uleb128 0x12
 16438 01ee 06       		.uleb128 0x6
 16439 01ef 40       		.uleb128 0x40
 16440 01f0 18       		.uleb128 0x18
 16441 01f1 9642     		.uleb128 0x2116
 16442 01f3 19       		.uleb128 0x19
 16443 01f4 01       		.uleb128 0x1
 16444 01f5 13       		.uleb128 0x13
 16445 01f6 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 347


 16446 01f7 00       		.byte	0
 16447 01f8 22       		.uleb128 0x22
 16448 01f9 2E       		.uleb128 0x2e
 16449 01fa 00       		.byte	0
 16450 01fb 3F       		.uleb128 0x3f
 16451 01fc 19       		.uleb128 0x19
 16452 01fd 03       		.uleb128 0x3
 16453 01fe 0E       		.uleb128 0xe
 16454 01ff 3A       		.uleb128 0x3a
 16455 0200 0B       		.uleb128 0xb
 16456 0201 3B       		.uleb128 0x3b
 16457 0202 05       		.uleb128 0x5
 16458 0203 11       		.uleb128 0x11
 16459 0204 01       		.uleb128 0x1
 16460 0205 12       		.uleb128 0x12
 16461 0206 06       		.uleb128 0x6
 16462 0207 40       		.uleb128 0x40
 16463 0208 18       		.uleb128 0x18
 16464 0209 9642     		.uleb128 0x2116
 16465 020b 19       		.uleb128 0x19
 16466 020c 00       		.byte	0
 16467 020d 00       		.byte	0
 16468 020e 23       		.uleb128 0x23
 16469 020f 34       		.uleb128 0x34
 16470 0210 00       		.byte	0
 16471 0211 03       		.uleb128 0x3
 16472 0212 0E       		.uleb128 0xe
 16473 0213 3A       		.uleb128 0x3a
 16474 0214 0B       		.uleb128 0xb
 16475 0215 3B       		.uleb128 0x3b
 16476 0216 0B       		.uleb128 0xb
 16477 0217 49       		.uleb128 0x49
 16478 0218 13       		.uleb128 0x13
 16479 0219 3F       		.uleb128 0x3f
 16480 021a 19       		.uleb128 0x19
 16481 021b 3C       		.uleb128 0x3c
 16482 021c 19       		.uleb128 0x19
 16483 021d 00       		.byte	0
 16484 021e 00       		.byte	0
 16485 021f 24       		.uleb128 0x24
 16486 0220 21       		.uleb128 0x21
 16487 0221 00       		.byte	0
 16488 0222 49       		.uleb128 0x49
 16489 0223 13       		.uleb128 0x13
 16490 0224 2F       		.uleb128 0x2f
 16491 0225 05       		.uleb128 0x5
 16492 0226 00       		.byte	0
 16493 0227 00       		.byte	0
 16494 0228 25       		.uleb128 0x25
 16495 0229 34       		.uleb128 0x34
 16496 022a 00       		.byte	0
 16497 022b 03       		.uleb128 0x3
 16498 022c 0E       		.uleb128 0xe
 16499 022d 3A       		.uleb128 0x3a
 16500 022e 0B       		.uleb128 0xb
 16501 022f 3B       		.uleb128 0x3b
 16502 0230 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 348


 16503 0231 49       		.uleb128 0x49
 16504 0232 13       		.uleb128 0x13
 16505 0233 3F       		.uleb128 0x3f
 16506 0234 19       		.uleb128 0x19
 16507 0235 02       		.uleb128 0x2
 16508 0236 18       		.uleb128 0x18
 16509 0237 00       		.byte	0
 16510 0238 00       		.byte	0
 16511 0239 26       		.uleb128 0x26
 16512 023a 34       		.uleb128 0x34
 16513 023b 00       		.byte	0
 16514 023c 03       		.uleb128 0x3
 16515 023d 0E       		.uleb128 0xe
 16516 023e 3A       		.uleb128 0x3a
 16517 023f 0B       		.uleb128 0xb
 16518 0240 3B       		.uleb128 0x3b
 16519 0241 05       		.uleb128 0x5
 16520 0242 49       		.uleb128 0x49
 16521 0243 13       		.uleb128 0x13
 16522 0244 3F       		.uleb128 0x3f
 16523 0245 19       		.uleb128 0x19
 16524 0246 3C       		.uleb128 0x3c
 16525 0247 19       		.uleb128 0x19
 16526 0248 00       		.byte	0
 16527 0249 00       		.byte	0
 16528 024a 27       		.uleb128 0x27
 16529 024b 34       		.uleb128 0x34
 16530 024c 00       		.byte	0
 16531 024d 03       		.uleb128 0x3
 16532 024e 0E       		.uleb128 0xe
 16533 024f 3A       		.uleb128 0x3a
 16534 0250 0B       		.uleb128 0xb
 16535 0251 3B       		.uleb128 0x3b
 16536 0252 0B       		.uleb128 0xb
 16537 0253 49       		.uleb128 0x49
 16538 0254 13       		.uleb128 0x13
 16539 0255 3F       		.uleb128 0x3f
 16540 0256 19       		.uleb128 0x19
 16541 0257 02       		.uleb128 0x2
 16542 0258 18       		.uleb128 0x18
 16543 0259 00       		.byte	0
 16544 025a 00       		.byte	0
 16545 025b 28       		.uleb128 0x28
 16546 025c 34       		.uleb128 0x34
 16547 025d 00       		.byte	0
 16548 025e 03       		.uleb128 0x3
 16549 025f 08       		.uleb128 0x8
 16550 0260 3A       		.uleb128 0x3a
 16551 0261 0B       		.uleb128 0xb
 16552 0262 3B       		.uleb128 0x3b
 16553 0263 0B       		.uleb128 0xb
 16554 0264 49       		.uleb128 0x49
 16555 0265 13       		.uleb128 0x13
 16556 0266 3F       		.uleb128 0x3f
 16557 0267 19       		.uleb128 0x19
 16558 0268 02       		.uleb128 0x2
 16559 0269 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 349


 16560 026a 00       		.byte	0
 16561 026b 00       		.byte	0
 16562 026c 29       		.uleb128 0x29
 16563 026d 34       		.uleb128 0x34
 16564 026e 00       		.byte	0
 16565 026f 03       		.uleb128 0x3
 16566 0270 08       		.uleb128 0x8
 16567 0271 3A       		.uleb128 0x3a
 16568 0272 0B       		.uleb128 0xb
 16569 0273 3B       		.uleb128 0x3b
 16570 0274 05       		.uleb128 0x5
 16571 0275 49       		.uleb128 0x49
 16572 0276 13       		.uleb128 0x13
 16573 0277 3F       		.uleb128 0x3f
 16574 0278 19       		.uleb128 0x19
 16575 0279 02       		.uleb128 0x2
 16576 027a 18       		.uleb128 0x18
 16577 027b 00       		.byte	0
 16578 027c 00       		.byte	0
 16579 027d 00       		.byte	0
 16580              		.section	.debug_aranges,"",%progbits
 16581 0000 6C010000 		.4byte	0x16c
 16582 0004 0200     		.2byte	0x2
 16583 0006 00000000 		.4byte	.Ldebug_info0
 16584 000a 04       		.byte	0x4
 16585 000b 00       		.byte	0
 16586 000c 0000     		.2byte	0
 16587 000e 0000     		.2byte	0
 16588 0010 00000000 		.4byte	.LFB64
 16589 0014 74010000 		.4byte	.LFE64-.LFB64
 16590 0018 00000000 		.4byte	.LFB65
 16591 001c 9C000000 		.4byte	.LFE65-.LFB65
 16592 0020 00000000 		.4byte	.LFB66
 16593 0024 14000000 		.4byte	.LFE66-.LFB66
 16594 0028 00000000 		.4byte	.LFB67
 16595 002c 7C000000 		.4byte	.LFE67-.LFB67
 16596 0030 00000000 		.4byte	.LFB68
 16597 0034 58000000 		.4byte	.LFE68-.LFB68
 16598 0038 00000000 		.4byte	.LFB69
 16599 003c 68000000 		.4byte	.LFE69-.LFB69
 16600 0040 00000000 		.4byte	.LFB70
 16601 0044 4C000000 		.4byte	.LFE70-.LFB70
 16602 0048 00000000 		.4byte	.LFB71
 16603 004c 46000000 		.4byte	.LFE71-.LFB71
 16604 0050 00000000 		.4byte	.LFB72
 16605 0054 56000000 		.4byte	.LFE72-.LFB72
 16606 0058 00000000 		.4byte	.LFB73
 16607 005c 0C000000 		.4byte	.LFE73-.LFB73
 16608 0060 00000000 		.4byte	.LFB74
 16609 0064 08010000 		.4byte	.LFE74-.LFB74
 16610 0068 00000000 		.4byte	.LFB75
 16611 006c 981C0000 		.4byte	.LFE75-.LFB75
 16612 0070 00000000 		.4byte	.LFB76
 16613 0074 70000000 		.4byte	.LFE76-.LFB76
 16614 0078 00000000 		.4byte	.LFB77
 16615 007c 70010000 		.4byte	.LFE77-.LFB77
 16616 0080 00000000 		.4byte	.LFB78
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 350


 16617 0084 E0000000 		.4byte	.LFE78-.LFB78
 16618 0088 00000000 		.4byte	.LFB79
 16619 008c F4000000 		.4byte	.LFE79-.LFB79
 16620 0090 00000000 		.4byte	.LFB80
 16621 0094 24000000 		.4byte	.LFE80-.LFB80
 16622 0098 00000000 		.4byte	.LFB81
 16623 009c 18010000 		.4byte	.LFE81-.LFB81
 16624 00a0 00000000 		.4byte	.LFB82
 16625 00a4 54000000 		.4byte	.LFE82-.LFB82
 16626 00a8 00000000 		.4byte	.LFB83
 16627 00ac C4000000 		.4byte	.LFE83-.LFB83
 16628 00b0 00000000 		.4byte	.LFB84
 16629 00b4 98000000 		.4byte	.LFE84-.LFB84
 16630 00b8 00000000 		.4byte	.LFB85
 16631 00bc D4000000 		.4byte	.LFE85-.LFB85
 16632 00c0 00000000 		.4byte	.LFB86
 16633 00c4 1C000000 		.4byte	.LFE86-.LFB86
 16634 00c8 00000000 		.4byte	.LFB87
 16635 00cc 68000000 		.4byte	.LFE87-.LFB87
 16636 00d0 00000000 		.4byte	.LFB88
 16637 00d4 68000000 		.4byte	.LFE88-.LFB88
 16638 00d8 00000000 		.4byte	.LFB89
 16639 00dc 68000000 		.4byte	.LFE89-.LFB89
 16640 00e0 00000000 		.4byte	.LFB90
 16641 00e4 6C000000 		.4byte	.LFE90-.LFB90
 16642 00e8 00000000 		.4byte	.LFB91
 16643 00ec 64000000 		.4byte	.LFE91-.LFB91
 16644 00f0 00000000 		.4byte	.LFB92
 16645 00f4 EC0B0000 		.4byte	.LFE92-.LFB92
 16646 00f8 00000000 		.4byte	.LFB93
 16647 00fc 50010000 		.4byte	.LFE93-.LFB93
 16648 0100 00000000 		.4byte	.LFB94
 16649 0104 D8030000 		.4byte	.LFE94-.LFB94
 16650 0108 00000000 		.4byte	.LFB95
 16651 010c A0000000 		.4byte	.LFE95-.LFB95
 16652 0110 00000000 		.4byte	.LFB96
 16653 0114 44000000 		.4byte	.LFE96-.LFB96
 16654 0118 00000000 		.4byte	.LFB97
 16655 011c 54050000 		.4byte	.LFE97-.LFB97
 16656 0120 00000000 		.4byte	.LFB98
 16657 0124 98000000 		.4byte	.LFE98-.LFB98
 16658 0128 00000000 		.4byte	.LFB99
 16659 012c 94000000 		.4byte	.LFE99-.LFB99
 16660 0130 00000000 		.4byte	.LFB100
 16661 0134 4C000000 		.4byte	.LFE100-.LFB100
 16662 0138 00000000 		.4byte	.LFB101
 16663 013c 4C000000 		.4byte	.LFE101-.LFB101
 16664 0140 00000000 		.4byte	.LFB102
 16665 0144 1C000000 		.4byte	.LFE102-.LFB102
 16666 0148 00000000 		.4byte	.LFB103
 16667 014c B0000000 		.4byte	.LFE103-.LFB103
 16668 0150 00000000 		.4byte	.LFB104
 16669 0154 54010000 		.4byte	.LFE104-.LFB104
 16670 0158 00000000 		.4byte	.LFB105
 16671 015c A0000000 		.4byte	.LFE105-.LFB105
 16672 0160 00000000 		.4byte	.LFB106
 16673 0164 BC000000 		.4byte	.LFE106-.LFB106
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 351


 16674 0168 00000000 		.4byte	0
 16675 016c 00000000 		.4byte	0
 16676              		.section	.debug_ranges,"",%progbits
 16677              	.Ldebug_ranges0:
 16678 0000 00000000 		.4byte	.LFB64
 16679 0004 74010000 		.4byte	.LFE64
 16680 0008 00000000 		.4byte	.LFB65
 16681 000c 9C000000 		.4byte	.LFE65
 16682 0010 00000000 		.4byte	.LFB66
 16683 0014 14000000 		.4byte	.LFE66
 16684 0018 00000000 		.4byte	.LFB67
 16685 001c 7C000000 		.4byte	.LFE67
 16686 0020 00000000 		.4byte	.LFB68
 16687 0024 58000000 		.4byte	.LFE68
 16688 0028 00000000 		.4byte	.LFB69
 16689 002c 68000000 		.4byte	.LFE69
 16690 0030 00000000 		.4byte	.LFB70
 16691 0034 4C000000 		.4byte	.LFE70
 16692 0038 00000000 		.4byte	.LFB71
 16693 003c 46000000 		.4byte	.LFE71
 16694 0040 00000000 		.4byte	.LFB72
 16695 0044 56000000 		.4byte	.LFE72
 16696 0048 00000000 		.4byte	.LFB73
 16697 004c 0C000000 		.4byte	.LFE73
 16698 0050 00000000 		.4byte	.LFB74
 16699 0054 08010000 		.4byte	.LFE74
 16700 0058 00000000 		.4byte	.LFB75
 16701 005c 981C0000 		.4byte	.LFE75
 16702 0060 00000000 		.4byte	.LFB76
 16703 0064 70000000 		.4byte	.LFE76
 16704 0068 00000000 		.4byte	.LFB77
 16705 006c 70010000 		.4byte	.LFE77
 16706 0070 00000000 		.4byte	.LFB78
 16707 0074 E0000000 		.4byte	.LFE78
 16708 0078 00000000 		.4byte	.LFB79
 16709 007c F4000000 		.4byte	.LFE79
 16710 0080 00000000 		.4byte	.LFB80
 16711 0084 24000000 		.4byte	.LFE80
 16712 0088 00000000 		.4byte	.LFB81
 16713 008c 18010000 		.4byte	.LFE81
 16714 0090 00000000 		.4byte	.LFB82
 16715 0094 54000000 		.4byte	.LFE82
 16716 0098 00000000 		.4byte	.LFB83
 16717 009c C4000000 		.4byte	.LFE83
 16718 00a0 00000000 		.4byte	.LFB84
 16719 00a4 98000000 		.4byte	.LFE84
 16720 00a8 00000000 		.4byte	.LFB85
 16721 00ac D4000000 		.4byte	.LFE85
 16722 00b0 00000000 		.4byte	.LFB86
 16723 00b4 1C000000 		.4byte	.LFE86
 16724 00b8 00000000 		.4byte	.LFB87
 16725 00bc 68000000 		.4byte	.LFE87
 16726 00c0 00000000 		.4byte	.LFB88
 16727 00c4 68000000 		.4byte	.LFE88
 16728 00c8 00000000 		.4byte	.LFB89
 16729 00cc 68000000 		.4byte	.LFE89
 16730 00d0 00000000 		.4byte	.LFB90
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 352


 16731 00d4 6C000000 		.4byte	.LFE90
 16732 00d8 00000000 		.4byte	.LFB91
 16733 00dc 64000000 		.4byte	.LFE91
 16734 00e0 00000000 		.4byte	.LFB92
 16735 00e4 EC0B0000 		.4byte	.LFE92
 16736 00e8 00000000 		.4byte	.LFB93
 16737 00ec 50010000 		.4byte	.LFE93
 16738 00f0 00000000 		.4byte	.LFB94
 16739 00f4 D8030000 		.4byte	.LFE94
 16740 00f8 00000000 		.4byte	.LFB95
 16741 00fc A0000000 		.4byte	.LFE95
 16742 0100 00000000 		.4byte	.LFB96
 16743 0104 44000000 		.4byte	.LFE96
 16744 0108 00000000 		.4byte	.LFB97
 16745 010c 54050000 		.4byte	.LFE97
 16746 0110 00000000 		.4byte	.LFB98
 16747 0114 98000000 		.4byte	.LFE98
 16748 0118 00000000 		.4byte	.LFB99
 16749 011c 94000000 		.4byte	.LFE99
 16750 0120 00000000 		.4byte	.LFB100
 16751 0124 4C000000 		.4byte	.LFE100
 16752 0128 00000000 		.4byte	.LFB101
 16753 012c 4C000000 		.4byte	.LFE101
 16754 0130 00000000 		.4byte	.LFB102
 16755 0134 1C000000 		.4byte	.LFE102
 16756 0138 00000000 		.4byte	.LFB103
 16757 013c B0000000 		.4byte	.LFE103
 16758 0140 00000000 		.4byte	.LFB104
 16759 0144 54010000 		.4byte	.LFE104
 16760 0148 00000000 		.4byte	.LFB105
 16761 014c A0000000 		.4byte	.LFE105
 16762 0150 00000000 		.4byte	.LFB106
 16763 0154 BC000000 		.4byte	.LFE106
 16764 0158 00000000 		.4byte	0
 16765 015c 00000000 		.4byte	0
 16766              		.section	.debug_line,"",%progbits
 16767              	.Ldebug_line0:
 16768 0000 7F0E0000 		.section	.debug_str,"MS",%progbits,1
 16768      02009B01 
 16768      00000201 
 16768      FB0E0D00 
 16768      01010101 
 16769              	.LASF205:
 16770 0000 70726573 		.ascii	"presetArraySection\000"
 16770      65744172 
 16770      72617953 
 16770      65637469 
 16770      6F6E00
 16771              	.LASF15:
 16772 0013 696E7438 		.ascii	"int8_t\000"
 16772      5F7400
 16773              	.LASF186:
 16774 001a 70726573 		.ascii	"presetArray\000"
 16774      65744172 
 16774      72617900 
 16775              	.LASF363:
 16776 0026 66697273 		.ascii	"firstSysex\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 353


 16776      74537973 
 16776      657800
 16777              	.LASF30:
 16778 0031 73697A65 		.ascii	"sizetype\000"
 16778      74797065 
 16778      00
 16779              	.LASF210:
 16780 003a 73656E64 		.ascii	"sendingMessage\000"
 16780      696E674D 
 16780      65737361 
 16780      676500
 16781              	.LASF202:
 16782 0049 64656164 		.ascii	"deadzones\000"
 16782      7A6F6E65 
 16782      7300
 16783              	.LASF306:
 16784 0053 70726576 		.ascii	"prev_processed_volumePedal\000"
 16784      5F70726F 
 16784      63657373 
 16784      65645F76 
 16784      6F6C756D 
 16785              	.LASF93:
 16786 006e 74656D70 		.ascii	"tempangle\000"
 16786      616E676C 
 16786      6500
 16787              	.LASF266:
 16788 0078 6E657744 		.ascii	"newDataFlag2\000"
 16788      61746146 
 16788      6C616732 
 16788      00
 16789              	.LASF313:
 16790 0085 6D616372 		.ascii	"macroNamesArray\000"
 16790      6F4E616D 
 16790      65734172 
 16790      72617900 
 16791              	.LASF40:
 16792 0095 43595F45 		.ascii	"CY_EM_EEPROM_SUCCESS\000"
 16792      4D5F4545 
 16792      50524F4D 
 16792      5F535543 
 16792      43455353 
 16793              	.LASF371:
 16794 00aa 6E756D53 		.ascii	"numSettingsItems\000"
 16794      65747469 
 16794      6E677349 
 16794      74656D73 
 16794      00
 16795              	.LASF19:
 16796 00bb 696E7433 		.ascii	"int32_t\000"
 16796      325F7400 
 16797              	.LASF177:
 16798 00c3 456D5F45 		.ascii	"Em_EEPROM_context\000"
 16798      4550524F 
 16798      4D5F636F 
 16798      6E746578 
 16798      7400
 16799              	.LASF49:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 354


 16800 00d5 54686972 		.ascii	"ThirdLine\000"
 16800      644C696E 
 16800      6500
 16801              	.LASF122:
 16802 00df 6E6F7465 		.ascii	"noteEvent\000"
 16802      4576656E 
 16802      7400
 16803              	.LASF275:
 16804 00e9 53504932 		.ascii	"SPI2errorflag\000"
 16804      6572726F 
 16804      72666C61 
 16804      6700
 16805              	.LASF23:
 16806 00f7 75696E74 		.ascii	"uint32\000"
 16806      333200
 16807              	.LASF103:
 16808 00fe 77686963 		.ascii	"whichMacroToStoreName\000"
 16808      684D6163 
 16808      726F546F 
 16808      53746F72 
 16808      654E616D 
 16809              	.LASF135:
 16810 0114 43437661 		.ascii	"CCval\000"
 16810      6C00
 16811              	.LASF216:
 16812 011a 6E756D4D 		.ascii	"numMappings\000"
 16812      61707069 
 16812      6E677300 
 16813              	.LASF181:
 16814 0126 49324362 		.ascii	"I2Cbuff1\000"
 16814      75666631 
 16814      00
 16815              	.LASF291:
 16816 012f 49324362 		.ascii	"I2Cbuff2\000"
 16816      75666632 
 16816      00
 16817              	.LASF373:
 16818 0138 77686963 		.ascii	"whichFretArray\000"
 16818      68467265 
 16818      74417272 
 16818      617900
 16819              	.LASF349:
 16820 0147 6D616372 		.ascii	"macroOLEDWaitingToSend\000"
 16820      6F4F4C45 
 16820      44576169 
 16820      74696E67 
 16820      546F5365 
 16821              	.LASF293:
 16822 015e 6D75785F 		.ascii	"mux_states\000"
 16822      73746174 
 16822      657300
 16823              	.LASF148:
 16824 0169 74656D70 		.ascii	"tempLow\000"
 16824      4C6F7700 
 16825              	.LASF244:
 16826 0171 6E65636B 		.ascii	"necks\000"
 16826      7300
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 355


 16827              	.LASF235:
 16828 0177 6F637461 		.ascii	"octave\000"
 16828      766500
 16829              	.LASF51:
 16830 017e 4E696C4C 		.ascii	"NilLine\000"
 16830      696E6500 
 16831              	.LASF45:
 16832 0186 63795F65 		.ascii	"cy_en_em_eeprom_status_t\000"
 16832      6E5F656D 
 16832      5F656570 
 16832      726F6D5F 
 16832      73746174 
 16833              	.LASF357:
 16834 019f 73747269 		.ascii	"stringScaling\000"
 16834      6E675363 
 16834      616C696E 
 16834      6700
 16835              	.LASF60:
 16836 01ad 64697265 		.ascii	"direction\000"
 16836      6374696F 
 16836      6E00
 16837              	.LASF296:
 16838 01b7 70656461 		.ascii	"pedals_high\000"
 16838      6C735F68 
 16838      69676800 
 16839              	.LASF109:
 16840 01c3 6E627974 		.ascii	"nbytes\000"
 16840      657300
 16841              	.LASF335:
 16842 01ca 636F7065 		.ascii	"copedentNamesArray\000"
 16842      64656E74 
 16842      4E616D65 
 16842      73417272 
 16842      617900
 16843              	.LASF214:
 16844 01dd 76616C73 		.ascii	"valsCount\000"
 16844      436F756E 
 16844      7400
 16845              	.LASF233:
 16846 01e7 74656D70 		.ascii	"temper\000"
 16846      657200
 16847              	.LASF325:
 16848 01ee 656E636F 		.ascii	"encoderUp\000"
 16848      64657255 
 16848      7000
 16849              	.LASF134:
 16850 01f8 43436E75 		.ascii	"CCnum\000"
 16850      6D00
 16851              	.LASF42:
 16852 01fe 43595F45 		.ascii	"CY_EM_EEPROM_BAD_CHECKSUM\000"
 16852      4D5F4545 
 16852      50524F4D 
 16852      5F424144 
 16852      5F434845 
 16853              	.LASF38:
 16854 0218 75736572 		.ascii	"userFlashStartAddr\000"
 16854      466C6173 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 356


 16854      68537461 
 16854      72744164 
 16854      647200
 16855              	.LASF286:
 16856 022b 70726576 		.ascii	"prevMacroKnobValues7bit\000"
 16856      4D616372 
 16856      6F4B6E6F 
 16856      6256616C 
 16856      75657337 
 16857              	.LASF32:
 16858 0243 6E756D62 		.ascii	"numberOfRows\000"
 16858      65724F66 
 16858      526F7773 
 16858      00
 16859              	.LASF142:
 16860 0250 696E7456 		.ascii	"intVal\000"
 16860      616C00
 16861              	.LASF77:
 16862 0257 69737461 		.ascii	"istart\000"
 16862      727400
 16863              	.LASF81:
 16864 025e 70656461 		.ascii	"pedalDiff\000"
 16864      6C446966 
 16864      6600
 16865              	.LASF139:
 16866 0268 74686556 		.ascii	"theVal\000"
 16866      616C00
 16867              	.LASF36:
 16868 026f 72656475 		.ascii	"redundantCopy\000"
 16868      6E64616E 
 16868      74436F70 
 16868      7900
 16869              	.LASF1:
 16870 027d 5F5F7569 		.ascii	"__uint8_t\000"
 16870      6E74385F 
 16870      7400
 16871              	.LASF74:
 16872 0287 616C7068 		.ascii	"alpha\000"
 16872      6100
 16873              	.LASF59:
 16874 028d 70726573 		.ascii	"presetEnd\000"
 16874      6574456E 
 16874      6400
 16875              	.LASF290:
 16876 0297 62617243 		.ascii	"barCount\000"
 16876      6F756E74 
 16876      00
 16877              	.LASF189:
 16878 02a0 73656E64 		.ascii	"sendMessageEnd\000"
 16878      4D657373 
 16878      61676545 
 16878      6E6400
 16879              	.LASF62:
 16880 02af 52696768 		.ascii	"Right\000"
 16880      7400
 16881              	.LASF298:
 16882 02b5 70656461 		.ascii	"pedals_highWithDeadZone\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 357


 16882      6C735F68 
 16882      69676857 
 16882      69746844 
 16882      6561645A 
 16883              	.LASF311:
 16884 02cd 70726573 		.ascii	"presetNumberToLoad\000"
 16884      65744E75 
 16884      6D626572 
 16884      546F4C6F 
 16884      616400
 16885              	.LASF321:
 16886 02e0 766F6963 		.ascii	"voice\000"
 16886      6500
 16887              	.LASF255:
 16888 02e6 73747269 		.ascii	"strings\000"
 16888      6E677300 
 16889              	.LASF369:
 16890 02ee 6E756D4D 		.ascii	"numMainMenuItems\000"
 16890      61696E4D 
 16890      656E7549 
 16890      74656D73 
 16890      00
 16891              	.LASF9:
 16892 02ff 6C6F6E67 		.ascii	"long int\000"
 16892      20696E74 
 16892      00
 16893              	.LASF212:
 16894 0308 63757272 		.ascii	"currentFloat\000"
 16894      656E7446 
 16894      6C6F6174 
 16894      00
 16895              	.LASF312:
 16896 0315 70726573 		.ascii	"presetLoadedResponse\000"
 16896      65744C6F 
 16896      61646564 
 16896      52657370 
 16896      6F6E7365 
 16897              	.LASF187:
 16898 032a 70726573 		.ascii	"presetNumberToWrite\000"
 16898      65744E75 
 16898      6D626572 
 16898      546F5772 
 16898      69746500 
 16899              	.LASF102:
 16900 033e 77686963 		.ascii	"whichPresetToStoreName\000"
 16900      68507265 
 16900      73657454 
 16900      6F53746F 
 16900      72654E61 
 16901              	.LASF310:
 16902 0355 70726573 		.ascii	"presetNamesArray\000"
 16902      65744E61 
 16902      6D657341 
 16902      72726179 
 16902      00
 16903              	.LASF82:
 16904 0366 6D61696E 		.ascii	"main\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 358


 16904      00
 16905              	.LASF336:
 16906 036b 70726576 		.ascii	"prevStringPitchBend\000"
 16906      53747269 
 16906      6E675069 
 16906      74636842 
 16906      656E6400 
 16907              	.LASF129:
 16908 037f 4D494449 		.ascii	"MIDInoteNum\000"
 16908      6E6F7465 
 16908      4E756D00 
 16909              	.LASF137:
 16910 038b 73656E64 		.ascii	"sendMIDIAllNotesOff\000"
 16910      4D494449 
 16910      416C6C4E 
 16910      6F746573 
 16910      4F666600 
 16911              	.LASF111:
 16912 039f 6572726F 		.ascii	"error\000"
 16912      7200
 16913              	.LASF48:
 16914 03a5 5365636F 		.ascii	"SecondLine\000"
 16914      6E644C69 
 16914      6E6500
 16915              	.LASF314:
 16916 03b0 66726574 		.ascii	"fretScaling\000"
 16916      5363616C 
 16916      696E6700 
 16917              	.LASF211:
 16918 03bc 73656E64 		.ascii	"sendKnobs\000"
 16918      4B6E6F62 
 16918      7300
 16919              	.LASF53:
 16920 03c6 70726573 		.ascii	"presetArraySectionState\000"
 16920      65744172 
 16920      72617953 
 16920      65637469 
 16920      6F6E5374 
 16921              	.LASF64:
 16922 03de 456E7465 		.ascii	"Enter\000"
 16922      7200
 16923              	.LASF199:
 16924 03e4 6D696469 		.ascii	"midiBarSendOn\000"
 16924      42617253 
 16924      656E644F 
 16924      6E00
 16925              	.LASF277:
 16926 03f2 6B6E6F62 		.ascii	"knobs\000"
 16926      7300
 16927              	.LASF183:
 16928 03f8 73797365 		.ascii	"sysexPointer\000"
 16928      78506F69 
 16928      6E746572 
 16928      00
 16929              	.LASF75:
 16930 0405 6F6D416C 		.ascii	"omAlpha\000"
 16930      70686100 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 359


 16931              	.LASF88:
 16932 040d 73747269 		.ascii	"stringStartLoc\000"
 16932      6E675374 
 16932      6172744C 
 16932      6F6300
 16933              	.LASF370:
 16934 041c 6E756D43 		.ascii	"numCalibrationItems\000"
 16934      616C6962 
 16934      72617469 
 16934      6F6E4974 
 16934      656D7300 
 16935              	.LASF2:
 16936 0430 7369676E 		.ascii	"signed char\000"
 16936      65642063 
 16936      68617200 
 16937              	.LASF16:
 16938 043c 75696E74 		.ascii	"uint8_t\000"
 16938      385F7400 
 16939              	.LASF31:
 16940 0444 776C456E 		.ascii	"wlEndAddr\000"
 16940      64416464 
 16940      7200
 16941              	.LASF61:
 16942 044e 4C656674 		.ascii	"Left\000"
 16942      00
 16943              	.LASF353:
 16944 0453 6E65636B 		.ascii	"neckByte\000"
 16944      42797465 
 16944      00
 16945              	.LASF150:
 16946 045c 5553425F 		.ascii	"USB_callbackLocalMidiEvent\000"
 16946      63616C6C 
 16946      6261636B 
 16946      4C6F6361 
 16946      6C4D6964 
 16947              	.LASF158:
 16948 0477 61637469 		.ascii	"action\000"
 16948      6F6E00
 16949              	.LASF121:
 16950 047e 73706973 		.ascii	"spis_1_ss\000"
 16950      5F315F73 
 16950      7300
 16951              	.LASF43:
 16952 0488 43595F45 		.ascii	"CY_EM_EEPROM_BAD_DATA\000"
 16952      4D5F4545 
 16952      50524F4D 
 16952      5F424144 
 16952      5F444154 
 16953              	.LASF368:
 16954 049e 73657474 		.ascii	"settingsNames\000"
 16954      696E6773 
 16954      4E616D65 
 16954      7300
 16955              	.LASF52:
 16956 04ac 5F4F4C45 		.ascii	"_OLEDLine\000"
 16956      444C696E 
 16956      6500
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 360


 16957              	.LASF213:
 16958 04b6 6D617043 		.ascii	"mapCount\000"
 16958      6F756E74 
 16958      00
 16959              	.LASF146:
 16960 04bf 74656D70 		.ascii	"tempIntVersion\000"
 16960      496E7456 
 16960      65727369 
 16960      6F6E00
 16961              	.LASF315:
 16962 04ce 70656461 		.ascii	"pedalRatios\000"
 16962      6C526174 
 16962      696F7300 
 16963              	.LASF3:
 16964 04da 756E7369 		.ascii	"unsigned char\000"
 16964      676E6564 
 16964      20636861 
 16964      7200
 16965              	.LASF218:
 16966 04e8 76616C43 		.ascii	"valCheck\000"
 16966      6865636B 
 16966      00
 16967              	.LASF141:
 16968 04f1 76616C73 		.ascii	"valsStart\000"
 16968      53746172 
 16968      7400
 16969              	.LASF85:
 16970 04fb 636F7065 		.ascii	"coped\000"
 16970      6400
 16971              	.LASF245:
 16972 0501 72783143 		.ascii	"rx1Channel\000"
 16972      68616E6E 
 16972      656C00
 16973              	.LASF87:
 16974 050c 70656461 		.ascii	"pedalStartLoc\000"
 16974      6C537461 
 16974      72744C6F 
 16974      6300
 16975              	.LASF261:
 16976 051a 6E657744 		.ascii	"newDataFlag\000"
 16976      61746146 
 16976      6C616700 
 16977              	.LASF343:
 16978 0526 73747269 		.ascii	"stringOctave\000"
 16978      6E674F63 
 16978      74617665 
 16978      00
 16979              	.LASF119:
 16980 0533 5553425F 		.ascii	"USB_service\000"
 16980      73657276 
 16980      69636500 
 16981              	.LASF154:
 16982 053f 74656D70 		.ascii	"tempButtons\000"
 16982      42757474 
 16982      6F6E7300 
 16983              	.LASF215:
 16984 054b 6D617043 		.ascii	"mapCountExpectation\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 361


 16984      6F756E74 
 16984      45787065 
 16984      63746174 
 16984      696F6E00 
 16985              	.LASF69:
 16986 055f 74656D70 		.ascii	"tempmax\000"
 16986      6D617800 
 16987              	.LASF140:
 16988 0567 73746F70 		.ascii	"stoppingPoint\000"
 16988      70696E67 
 16988      506F696E 
 16988      7400
 16989              	.LASF76:
 16990 0575 76616C75 		.ascii	"value\000"
 16990      6500
 16991              	.LASF316:
 16992 057b 6C617374 		.ascii	"last_mux\000"
 16992      5F6D7578 
 16992      00
 16993              	.LASF326:
 16994 0584 656E636F 		.ascii	"encoderVal\000"
 16994      64657256 
 16994      616C00
 16995              	.LASF132:
 16996 058f 70726573 		.ascii	"pressure\000"
 16996      73757265 
 16996      00
 16997              	.LASF350:
 16998 0598 70726573 		.ascii	"presetAlreadyDisplayed\000"
 16998      6574416C 
 16998      72656164 
 16998      79446973 
 16998      706C6179 
 16999              	.LASF55:
 17000 05af 6D616372 		.ascii	"macroNames\000"
 17000      6F4E616D 
 17000      657300
 17001              	.LASF256:
 17002 05ba 70726576 		.ascii	"prevStrings\000"
 17002      53747269 
 17002      6E677300 
 17003              	.LASF26:
 17004 05c6 63686172 		.ascii	"char\000"
 17004      00
 17005              	.LASF171:
 17006 05cb 65657072 		.ascii	"eepromArray\000"
 17006      6F6D4172 
 17006      72617900 
 17007              	.LASF243:
 17008 05d7 63757272 		.ascii	"currentCopedent\000"
 17008      656E7443 
 17008      6F706564 
 17008      656E7400 
 17009              	.LASF239:
 17010 05e7 72617741 		.ascii	"rawAngle\000"
 17010      6E676C65 
 17010      00
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 362


 17011              	.LASF70:
 17012 05f0 4C454146 		.ascii	"LEAF_clip\000"
 17012      5F636C69 
 17012      7000
 17013              	.LASF105:
 17014 05fa 446D6154 		.ascii	"DmaTxConfiguration\000"
 17014      78436F6E 
 17014      66696775 
 17014      72617469 
 17014      6F6E00
 17015              	.LASF318:
 17016 060d 6E65636B 		.ascii	"neck\000"
 17016      00
 17017              	.LASF6:
 17018 0612 5F5F7569 		.ascii	"__uint16_t\000"
 17018      6E743136 
 17018      5F7400
 17019              	.LASF118:
 17020 061d 63686563 		.ascii	"checkUSB_Vbus\000"
 17020      6B555342 
 17020      5F566275 
 17020      7300
 17021              	.LASF149:
 17022 062b 726F756E 		.ascii	"roundedIndex\000"
 17022      64656449 
 17022      6E646578 
 17022      00
 17023              	.LASF289:
 17024 0638 65657072 		.ascii	"eeprom_cnt\000"
 17024      6F6D5F63 
 17024      6E7400
 17025              	.LASF175:
 17026 0643 5553425F 		.ascii	"USB_midi_out_ep\000"
 17026      6D696469 
 17026      5F6F7574 
 17026      5F657000 
 17027              	.LASF114:
 17028 0653 4932435F 		.ascii	"I2C_reset\000"
 17028      72657365 
 17028      7400
 17029              	.LASF333:
 17030 065d 70656461 		.ascii	"pedal_inverted\000"
 17030      6C5F696E 
 17030      76657274 
 17030      656400
 17031              	.LASF372:
 17032 066c 66726574 		.ascii	"fretToCalibrate\000"
 17032      546F4361 
 17032      6C696272 
 17032      61746500 
 17033              	.LASF327:
 17034 067c 656E636F 		.ascii	"encoderNum\000"
 17034      6465724E 
 17034      756D00
 17035              	.LASF323:
 17036 0687 6F637431 		.ascii	"oct1Up\000"
 17036      557000
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 363


 17037              	.LASF46:
 17038 068e 75696E74 		.ascii	"uint\000"
 17038      00
 17039              	.LASF241:
 17040 0693 6D696469 		.ascii	"midiOverflow\000"
 17040      4F766572 
 17040      666C6F77 
 17040      00
 17041              	.LASF161:
 17042 06a0 6275726E 		.ascii	"burnInitialPedalZeroPositions\000"
 17042      496E6974 
 17042      69616C50 
 17042      6564616C 
 17042      5A65726F 
 17043              	.LASF131:
 17044 06be 73656E64 		.ascii	"sendMIDIPolyKeyPressure\000"
 17044      4D494449 
 17044      506F6C79 
 17044      4B657950 
 17044      72657373 
 17045              	.LASF145:
 17046 06d6 73747269 		.ascii	"stringChange\000"
 17046      6E674368 
 17046      616E6765 
 17046      00
 17047              	.LASF99:
 17048 06e3 636F6D70 		.ascii	"computerMIDIOffset\000"
 17048      75746572 
 17048      4D494449 
 17048      4F666673 
 17048      657400
 17049              	.LASF194:
 17050 06f6 73696E67 		.ascii	"singleParamValueLow\000"
 17050      6C655061 
 17050      72616D56 
 17050      616C7565 
 17050      4C6F7700 
 17051              	.LASF133:
 17052 070a 73656E64 		.ascii	"sendMIDIControlChange\000"
 17052      4D494449 
 17052      436F6E74 
 17052      726F6C43 
 17052      68616E67 
 17053              	.LASF260:
 17054 0720 73706943 		.ascii	"spiCounter\000"
 17054      6F756E74 
 17054      657200
 17055              	.LASF197:
 17056 072b 7472616E 		.ascii	"transposeCents\000"
 17056      73706F73 
 17056      6543656E 
 17056      747300
 17057              	.LASF170:
 17058 073a 65786974 		.ascii	"exitFretCalibrationMode\000"
 17058      46726574 
 17058      43616C69 
 17058      62726174 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 364


 17058      696F6E4D 
 17059              	.LASF41:
 17060 0752 43595F45 		.ascii	"CY_EM_EEPROM_BAD_PARAM\000"
 17060      4D5F4545 
 17060      50524F4D 
 17060      5F424144 
 17060      5F504152 
 17061              	.LASF364:
 17062 0769 73797365 		.ascii	"sysexPointerMask\000"
 17062      78506F69 
 17062      6E746572 
 17062      4D61736B 
 17062      00
 17063              	.LASF179:
 17064 077a 4932435F 		.ascii	"I2C_1_initVar\000"
 17064      315F696E 
 17064      69745661 
 17064      7200
 17065              	.LASF54:
 17066 0788 70726573 		.ascii	"presetName\000"
 17066      65744E61 
 17066      6D6500
 17067              	.LASF185:
 17068 0793 70617273 		.ascii	"parsingSysex\000"
 17068      696E6753 
 17068      79736578 
 17068      00
 17069              	.LASF232:
 17070 07a0 72657475 		.ascii	"returnedData\000"
 17070      726E6564 
 17070      44617461 
 17070      00
 17071              	.LASF50:
 17072 07ad 466F7572 		.ascii	"FourthLine\000"
 17072      74684C69 
 17072      6E6500
 17073              	.LASF284:
 17074 07b8 77686963 		.ascii	"whichMacro\000"
 17074      684D6163 
 17074      726F00
 17075              	.LASF300:
 17076 07c3 766F6C75 		.ascii	"volumePedal\000"
 17076      6D655065 
 17076      64616C00 
 17077              	.LASF253:
 17078 07cf 72784275 		.ascii	"rxBufferPluck\000"
 17078      66666572 
 17078      506C7563 
 17078      6B00
 17079              	.LASF334:
 17080 07dd 636F7065 		.ascii	"copedent\000"
 17080      64656E74 
 17080      00
 17081              	.LASF303:
 17082 07e6 70656461 		.ascii	"pedals8bit\000"
 17082      6C733862 
 17082      697400
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 365


 17083              	.LASF278:
 17084 07f1 70726576 		.ascii	"prevKnobs\000"
 17084      4B6E6F62 
 17084      7300
 17085              	.LASF273:
 17086 07fb 6D795370 		.ascii	"mySpiCounter\000"
 17086      69436F75 
 17086      6E746572 
 17086      00
 17087              	.LASF208:
 17088 0808 73797365 		.ascii	"sysexMessageInProgress\000"
 17088      784D6573 
 17088      73616765 
 17088      496E5072 
 17088      6F677265 
 17089              	.LASF362:
 17090 081f 5350495F 		.ascii	"SPI_errors\000"
 17090      6572726F 
 17090      727300
 17091              	.LASF127:
 17092 082a 43434576 		.ascii	"CCEvent\000"
 17092      656E7400 
 17093              	.LASF138:
 17094 0832 70617273 		.ascii	"parseSysex\000"
 17094      65537973 
 17094      657800
 17095              	.LASF376:
 17096 083d 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\dev\\Electrosteel_embedded\\"
 17096      73657273 
 17096      5C4A6566 
 17096      66536E79 
 17096      6465725C 
 17097 086b 50534F43 		.ascii	"PSOC5_electrosteel_stringsensors_newpcb_brain\\CE21"
 17097      355F656C 
 17097      65637472 
 17097      6F737465 
 17097      656C5F73 
 17098 089d 30353134 		.ascii	"0514_PSOC3_5_Thermistor.cydsn\000"
 17098      5F50534F 
 17098      43335F35 
 17098      5F546865 
 17098      726D6973 
 17099              	.LASF341:
 17100 08bb 696E7653 		.ascii	"invStringMappedPositions\000"
 17100      7472696E 
 17100      674D6170 
 17100      70656450 
 17100      6F736974 
 17101              	.LASF271:
 17102 08d4 696E7075 		.ascii	"inputData\000"
 17102      74446174 
 17102      6100
 17103              	.LASF73:
 17104 08de 4C454146 		.ascii	"LEAF_interpolation_linear\000"
 17104      5F696E74 
 17104      6572706F 
 17104      6C617469 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 366


 17104      6F6E5F6C 
 17105              	.LASF359:
 17106 08f8 70726576 		.ascii	"prevNotes\000"
 17106      4E6F7465 
 17106      7300
 17107              	.LASF39:
 17108 0902 63795F73 		.ascii	"cy_stc_eeprom_context_t\000"
 17108      74635F65 
 17108      6570726F 
 17108      6D5F636F 
 17108      6E746578 
 17109              	.LASF11:
 17110 091a 6C6F6E67 		.ascii	"long unsigned int\000"
 17110      20756E73 
 17110      69676E65 
 17110      6420696E 
 17110      7400
 17111              	.LASF159:
 17112 092c 77686174 		.ascii	"whatToDraw\000"
 17112      546F4472 
 17112      617700
 17113              	.LASF178:
 17114 0937 456D5F45 		.ascii	"Em_EEPROM_em_EepromStorage\000"
 17114      4550524F 
 17114      4D5F656D 
 17114      5F456570 
 17114      726F6D53 
 17115              	.LASF288:
 17116 0952 65657072 		.ascii	"eepromReturnValue\000"
 17116      6F6D5265 
 17116      7475726E 
 17116      56616C75 
 17116      6500
 17117              	.LASF92:
 17118 0964 74656D70 		.ascii	"tempInt\000"
 17118      496E7400 
 17119              	.LASF91:
 17120 096c 73746174 		.ascii	"status\000"
 17120      757300
 17121              	.LASF292:
 17122 0973 73656E64 		.ascii	"send_it\000"
 17122      5F697400 
 17123              	.LASF230:
 17124 097b 6C696E65 		.ascii	"linearPotValue32Bit\000"
 17124      6172506F 
 17124      7456616C 
 17124      75653332 
 17124      42697400 
 17125              	.LASF130:
 17126 098f 6368616E 		.ascii	"channel\000"
 17126      6E656C00 
 17127              	.LASF168:
 17128 0997 65786974 		.ascii	"exitLeverCalibrationMode\000"
 17128      4C657665 
 17128      7243616C 
 17128      69627261 
 17128      74696F6E 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 367


 17129              	.LASF165:
 17130 09b0 75705072 		.ascii	"upPressed\000"
 17130      65737365 
 17130      6400
 17131              	.LASF281:
 17132 09ba 75376269 		.ascii	"u7bit_volumePedal\000"
 17132      745F766F 
 17132      6C756D65 
 17132      50656461 
 17132      6C00
 17133              	.LASF107:
 17134 09cc 4932435F 		.ascii	"I2C_MasterWriteBlocking\000"
 17134      4D617374 
 17134      65725772 
 17134      69746542 
 17134      6C6F636B 
 17135              	.LASF236:
 17136 09e4 616E676C 		.ascii	"angle\000"
 17136      6500
 17137              	.LASF220:
 17138 09ea 6E756D53 		.ascii	"numStrings\000"
 17138      7472696E 
 17138      677300
 17139              	.LASF44:
 17140 09f5 43595F45 		.ascii	"CY_EM_EEPROM_WRITE_FAIL\000"
 17140      4D5F4545 
 17140      50524F4D 
 17140      5F575249 
 17140      54455F46 
 17141              	.LASF79:
 17142 0a0d 6F737461 		.ascii	"ostart\000"
 17142      727400
 17143              	.LASF309:
 17144 0a14 63757272 		.ascii	"currentPresetSelection\000"
 17144      656E7450 
 17144      72657365 
 17144      7453656C 
 17144      65637469 
 17145              	.LASF346:
 17146 0a2b 6F70656E 		.ascii	"openStringMIDI_Int\000"
 17146      53747269 
 17146      6E674D49 
 17146      44495F49 
 17146      6E7400
 17147              	.LASF78:
 17148 0a3e 6973746F 		.ascii	"istop\000"
 17148      7000
 17149              	.LASF84:
 17150 0a44 70656461 		.ascii	"pedal_inverted_byte\000"
 17150      6C5F696E 
 17150      76657274 
 17150      65645F62 
 17150      79746500 
 17151              	.LASF174:
 17152 0a58 5553425F 		.ascii	"USB_midiInBuffer\000"
 17152      6D696469 
 17152      496E4275 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 368


 17152      66666572 
 17152      00
 17153              	.LASF374:
 17154 0a69 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 17154      43313120 
 17154      352E342E 
 17154      31203230 
 17154      31363036 
 17155 0a9c 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 17155      20726576 
 17155      6973696F 
 17155      6E203233 
 17155      37373135 
 17156 0acf 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 17156      66756E63 
 17156      74696F6E 
 17156      2D736563 
 17156      74696F6E 
 17157              	.LASF128:
 17158 0af7 73656E64 		.ascii	"sendMIDINoteOn\000"
 17158      4D494449 
 17158      4E6F7465 
 17158      4F6E00
 17159              	.LASF317:
 17160 0b06 6D61696E 		.ascii	"main_counter\000"
 17160      5F636F75 
 17160      6E746572 
 17160      00
 17161              	.LASF47:
 17162 0b13 46697273 		.ascii	"FirstLine\000"
 17162      744C696E 
 17162      6500
 17163              	.LASF319:
 17164 0b1d 6475616C 		.ascii	"dualSlider\000"
 17164      536C6964 
 17164      657200
 17165              	.LASF67:
 17166 0b28 72657374 		.ascii	"restartSystemCheck\000"
 17166      61727453 
 17166      79737465 
 17166      6D436865 
 17166      636B00
 17167              	.LASF225:
 17168 0b3b 5553425F 		.ascii	"USB_check_flag\000"
 17168      63686563 
 17168      6B5F666C 
 17168      616700
 17169              	.LASF206:
 17170 0b4a 6D657373 		.ascii	"messageArraySendCount\000"
 17170      61676541 
 17170      72726179 
 17170      53656E64 
 17170      436F756E 
 17171              	.LASF10:
 17172 0b60 5F5F7569 		.ascii	"__uint32_t\000"
 17172      6E743332 
 17172      5F7400
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 369


 17173              	.LASF12:
 17174 0b6b 6C6F6E67 		.ascii	"long long int\000"
 17174      206C6F6E 
 17174      6720696E 
 17174      7400
 17175              	.LASF231:
 17176 0b79 636F756E 		.ascii	"counter\000"
 17176      74657200 
 17177              	.LASF344:
 17178 0b81 73747269 		.ascii	"stringPitch\000"
 17178      6E675069 
 17178      74636800 
 17179              	.LASF204:
 17180 0b8d 73747269 		.ascii	"stringRepresentation\000"
 17180      6E675265 
 17180      70726573 
 17180      656E7461 
 17180      74696F6E 
 17181              	.LASF247:
 17182 0ba2 72783154 		.ascii	"rx1TD\000"
 17182      4400
 17183              	.LASF348:
 17184 0ba8 6D61696E 		.ascii	"mainOLEDWaitingToSend\000"
 17184      4F4C4544 
 17184      57616974 
 17184      696E6754 
 17184      6F53656E 
 17185              	.LASF90:
 17186 0bbe 74656D70 		.ascii	"tempIntLow\000"
 17186      496E744C 
 17186      6F7700
 17187              	.LASF68:
 17188 0bc9 74656D70 		.ascii	"tempmin\000"
 17188      6D696E00 
 17189              	.LASF37:
 17190 0bd1 626C6F63 		.ascii	"blockingWrite\000"
 17190      6B696E67 
 17190      57726974 
 17190      6500
 17191              	.LASF251:
 17192 0bdf 72783343 		.ascii	"rx3Channel\000"
 17192      68616E6E 
 17192      656C00
 17193              	.LASF25:
 17194 0bea 646F7562 		.ascii	"double\000"
 17194      6C6500
 17195              	.LASF375:
 17196 0bf1 6D61696E 		.ascii	"main.c\000"
 17196      2E6300
 17197              	.LASF328:
 17198 0bf8 62757474 		.ascii	"button1Up\000"
 17198      6F6E3155 
 17198      7000
 17199              	.LASF120:
 17200 0c02 6C6F6732 		.ascii	"log2f_approx\000"
 17200      665F6170 
 17200      70726F78 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 370


 17200      00
 17201              	.LASF198:
 17202 0c0f 6D696469 		.ascii	"midiSendOn\000"
 17202      53656E64 
 17202      4F6E00
 17203              	.LASF193:
 17204 0c1a 73696E67 		.ascii	"singleParamValueHigh\000"
 17204      6C655061 
 17204      72616D56 
 17204      616C7565 
 17204      48696768 
 17205              	.LASF180:
 17206 0c2f 49544D5F 		.ascii	"ITM_RxBuffer\000"
 17206      52784275 
 17206      66666572 
 17206      00
 17207              	.LASF192:
 17208 0c3c 73696E67 		.ascii	"singleParamToUpdateLow\000"
 17208      6C655061 
 17208      72616D54 
 17208      6F557064 
 17208      6174654C 
 17209              	.LASF80:
 17210 0c53 6F73746F 		.ascii	"ostop\000"
 17210      7000
 17211              	.LASF112:
 17212 0c59 74696D65 		.ascii	"timeout\000"
 17212      6F757400 
 17213              	.LASF24:
 17214 0c61 666C6F61 		.ascii	"float\000"
 17214      7400
 17215              	.LASF302:
 17216 0c67 70726576 		.ascii	"prev_processed_pedals\000"
 17216      5F70726F 
 17216      63657373 
 17216      65645F70 
 17216      6564616C 
 17217              	.LASF264:
 17218 0c7d 616D4865 		.ascii	"amHere2\000"
 17218      72653200 
 17219              	.LASF283:
 17220 0c85 53504932 		.ascii	"SPI2started\000"
 17220      73746172 
 17220      74656400 
 17221              	.LASF267:
 17222 0c91 63757272 		.ascii	"currentPluckBuffer\000"
 17222      656E7450 
 17222      6C75636B 
 17222      42756666 
 17222      657200
 17223              	.LASF98:
 17224 0ca4 6261724D 		.ascii	"barMIDI\000"
 17224      49444900 
 17225              	.LASF136:
 17226 0cac 73656E64 		.ascii	"sendMIDIPitchBend\000"
 17226      4D494449 
 17226      50697463 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 371


 17226      6842656E 
 17226      6400
 17227              	.LASF14:
 17228 0cbe 756E7369 		.ascii	"unsigned int\000"
 17228      676E6564 
 17228      20696E74 
 17228      00
 17229              	.LASF338:
 17230 0ccb 70656461 		.ascii	"pedal_cc_assignments\000"
 17230      6C5F6363 
 17230      5F617373 
 17230      69676E6D 
 17230      656E7473 
 17231              	.LASF184:
 17232 0ce0 72656365 		.ascii	"receivingSysex\000"
 17232      6976696E 
 17232      67537973 
 17232      657800
 17233              	.LASF151:
 17234 0cef 6361626C 		.ascii	"cable\000"
 17234      6500
 17235              	.LASF365:
 17236 0cf5 6D656E75 		.ascii	"menuPosition\000"
 17236      506F7369 
 17236      74696F6E 
 17236      00
 17237              	.LASF280:
 17238 0d02 70726576 		.ascii	"prevKnobs7bit\000"
 17238      4B6E6F62 
 17238      73376269 
 17238      7400
 17239              	.LASF66:
 17240 0d10 56627573 		.ascii	"Vbus_function\000"
 17240      5F66756E 
 17240      6374696F 
 17240      6E00
 17241              	.LASF305:
 17242 0d1e 70726576 		.ascii	"prevPedals7bit\000"
 17242      50656461 
 17242      6C733762 
 17242      697400
 17243              	.LASF124:
 17244 0d2d 76656C6F 		.ascii	"velocity\000"
 17244      63697479 
 17244      00
 17245              	.LASF360:
 17246 0d36 63686563 		.ascii	"checkStatus\000"
 17246      6B537461 
 17246      74757300 
 17247              	.LASF27:
 17248 0d42 63797374 		.ascii	"cystatus\000"
 17248      61747573 
 17248      00
 17249              	.LASF276:
 17250 0d4b 6261725F 		.ascii	"bar_index\000"
 17250      696E6465 
 17250      7800
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 372


 17251              	.LASF279:
 17252 0d55 6B6E6F62 		.ascii	"knobs7bit\000"
 17252      73376269 
 17252      7400
 17253              	.LASF123:
 17254 0d5f 73747269 		.ascii	"string\000"
 17254      6E6700
 17255              	.LASF274:
 17256 0d66 6F666673 		.ascii	"offsetErrorCount\000"
 17256      65744572 
 17256      726F7243 
 17256      6F756E74 
 17256      00
 17257              	.LASF307:
 17258 0d77 70726F63 		.ascii	"processed_volumePedal\000"
 17258      65737365 
 17258      645F766F 
 17258      6C756D65 
 17258      50656461 
 17259              	.LASF96:
 17260 0d8d 74656D70 		.ascii	"tempMIDI\000"
 17260      4D494449 
 17260      00
 17261              	.LASF254:
 17262 0d96 72784275 		.ascii	"rxBufferBar\000"
 17262      66666572 
 17262      42617200 
 17263              	.LASF164:
 17264 0da2 646F776E 		.ascii	"downPressed\000"
 17264      50726573 
 17264      73656400 
 17265              	.LASF249:
 17266 0dae 74784368 		.ascii	"txChannel\000"
 17266      616E6E65 
 17266      6C00
 17267              	.LASF301:
 17268 0db8 70726F63 		.ascii	"processed_pedals\000"
 17268      65737365 
 17268      645F7065 
 17268      64616C73 
 17268      00
 17269              	.LASF339:
 17270 0dc9 6F70656E 		.ascii	"openStringFrequencies\000"
 17270      53747269 
 17270      6E674672 
 17270      65717565 
 17270      6E636965 
 17271              	.LASF237:
 17272 0ddf 70726576 		.ascii	"prevAngle\000"
 17272      416E676C 
 17272      6500
 17273              	.LASF263:
 17274 0de9 706C7563 		.ascii	"pluck_index\000"
 17274      6B5F696E 
 17274      64657800 
 17275              	.LASF29:
 17276 0df5 6C6F6E67 		.ascii	"long double\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 373


 17276      20646F75 
 17276      626C6500 
 17277              	.LASF113:
 17278 0e01 4932435F 		.ascii	"I2C_MasterReadBlocking\000"
 17278      4D617374 
 17278      65725265 
 17278      6164426C 
 17278      6F636B69 
 17279              	.LASF367:
 17280 0e18 6D61696E 		.ascii	"mainMenuNames\000"
 17280      4D656E75 
 17280      4E616D65 
 17280      7300
 17281              	.LASF268:
 17282 0e26 63757272 		.ascii	"currentBarBuffer\000"
 17282      656E7442 
 17282      61724275 
 17282      66666572 
 17282      00
 17283              	.LASF238:
 17284 0e37 4144435F 		.ascii	"ADC_values\000"
 17284      76616C75 
 17284      657300
 17285              	.LASF72:
 17286 0e42 66746F6D 		.ascii	"ftom\000"
 17286      00
 17287              	.LASF270:
 17288 0e47 53504931 		.ascii	"SPI1ErrorCount\000"
 17288      4572726F 
 17288      72436F75 
 17288      6E7400
 17289              	.LASF240:
 17290 0e56 6D696469 		.ascii	"midiSent\000"
 17290      53656E74 
 17290      00
 17291              	.LASF152:
 17292 0e5f 6D696469 		.ascii	"midiMsg\000"
 17292      4D736700 
 17293              	.LASF0:
 17294 0e67 5F5F696E 		.ascii	"__int8_t\000"
 17294      74385F74 
 17294      00
 17295              	.LASF352:
 17296 0e70 63757272 		.ascii	"currentNeck\000"
 17296      656E744E 
 17296      65636B00 
 17297              	.LASF354:
 17298 0e7c 65646974 		.ascii	"editMode\000"
 17298      4D6F6465 
 17298      00
 17299              	.LASF13:
 17300 0e85 6C6F6E67 		.ascii	"long long unsigned int\000"
 17300      206C6F6E 
 17300      6720756E 
 17300      7369676E 
 17300      65642069 
 17301              	.LASF18:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 374


 17302 0e9c 75696E74 		.ascii	"uint16_t\000"
 17302      31365F74 
 17302      00
 17303              	.LASF147:
 17304 0ea5 74656D70 		.ascii	"tempHigh\000"
 17304      48696768 
 17304      00
 17305              	.LASF219:
 17306 0eae 74657374 		.ascii	"testVal\000"
 17306      56616C00 
 17307              	.LASF248:
 17308 0eb6 72783254 		.ascii	"rx2TD\000"
 17308      4400
 17309              	.LASF262:
 17310 0ebc 70726576 		.ascii	"prevOctave\000"
 17310      4F637461 
 17310      766500
 17311              	.LASF94:
 17312 0ec7 4D696469 		.ascii	"MidiBarPosition\000"
 17312      42617250 
 17312      6F736974 
 17312      696F6E00 
 17313              	.LASF201:
 17314 0ed7 636F6E74 		.ascii	"controlSmoothing\000"
 17314      726F6C53 
 17314      6D6F6F74 
 17314      68696E67 
 17314      00
 17315              	.LASF377:
 17316 0ee8 62726561 		.ascii	"breakFloat\000"
 17316      6B466C6F 
 17316      617400
 17317              	.LASF361:
 17318 0ef3 63686563 		.ascii	"checkBase\000"
 17318      6B426173 
 17318      6500
 17319              	.LASF65:
 17320 0efd 73706973 		.ascii	"spis_2_ss\000"
 17320      5F325F73 
 17320      7300
 17321              	.LASF329:
 17322 0f07 62757474 		.ascii	"button2Up\000"
 17322      6F6E3255 
 17322      7000
 17323              	.LASF195:
 17324 0f11 73656E64 		.ascii	"sendMappingChangeUpdate\000"
 17324      4D617070 
 17324      696E6743 
 17324      68616E67 
 17324      65557064 
 17325              	.LASF259:
 17326 0f29 616D4865 		.ascii	"amHere\000"
 17326      726500
 17327              	.LASF287:
 17328 0f30 61727261 		.ascii	"array\000"
 17328      7900
 17329              	.LASF101:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 375


 17330 0f36 7363616C 		.ascii	"scaledMIDI\000"
 17330      65644D49 
 17330      444900
 17331              	.LASF28:
 17332 0f41 72656738 		.ascii	"reg8\000"
 17332      00
 17333              	.LASF188:
 17334 0f46 636F7065 		.ascii	"copedentNumberToWrite\000"
 17334      64656E74 
 17334      4E756D62 
 17334      6572546F 
 17334      57726974 
 17335              	.LASF57:
 17336 0f5c 6D617043 		.ascii	"mapCountNext\000"
 17336      6F756E74 
 17336      4E657874 
 17336      00
 17337              	.LASF265:
 17338 0f69 73706943 		.ascii	"spiCounter2\000"
 17338      6F756E74 
 17338      65723200 
 17339              	.LASF63:
 17340 0f75 446F776E 		.ascii	"Down\000"
 17340      00
 17341              	.LASF125:
 17342 0f7a 74656D70 		.ascii	"tempVel\000"
 17342      56656C00 
 17343              	.LASF221:
 17344 0f82 75736241 		.ascii	"usbActivityCounter\000"
 17344      63746976 
 17344      69747943 
 17344      6F756E74 
 17344      657200
 17345              	.LASF299:
 17346 0f95 64656164 		.ascii	"deadzone\000"
 17346      7A6F6E65 
 17346      00
 17347              	.LASF196:
 17348 0f9e 7472616E 		.ascii	"transposeSemitones\000"
 17348      73706F73 
 17348      6553656D 
 17348      69746F6E 
 17348      657300
 17349              	.LASF217:
 17350 0fb1 70617273 		.ascii	"parseThatMF\000"
 17350      65546861 
 17350      744D4600 
 17351              	.LASF4:
 17352 0fbd 5F5F696E 		.ascii	"__int16_t\000"
 17352      7431365F 
 17352      7400
 17353              	.LASF56:
 17354 0fc7 696E6974 		.ascii	"initialVals\000"
 17354      69616C56 
 17354      616C7300 
 17355              	.LASF224:
 17356 0fd3 5553425F 		.ascii	"USB_active\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 376


 17356      61637469 
 17356      766500
 17357              	.LASF356:
 17358 0fde 66726574 		.ascii	"fretCalibrationMode\000"
 17358      43616C69 
 17358      62726174 
 17358      696F6E4D 
 17358      6F646500 
 17359              	.LASF190:
 17360 0ff2 73656E64 		.ascii	"sendSingleParamUpdate\000"
 17360      53696E67 
 17360      6C655061 
 17360      72616D55 
 17360      70646174 
 17361              	.LASF182:
 17362 1008 73797365 		.ascii	"sysexBuffer\000"
 17362      78427566 
 17362      66657200 
 17363              	.LASF209:
 17364 1014 62756643 		.ascii	"bufCount\000"
 17364      6F756E74 
 17364      00
 17365              	.LASF269:
 17366 101d 706C7563 		.ascii	"pluckErrorCount\000"
 17366      6B457272 
 17366      6F72436F 
 17366      756E7400 
 17367              	.LASF167:
 17368 102d 656E7465 		.ascii	"enterLeverCalibrationMode\000"
 17368      724C6576 
 17368      65724361 
 17368      6C696272 
 17368      6174696F 
 17369              	.LASF153:
 17370 1047 7363616E 		.ascii	"scanUI\000"
 17370      554900
 17371              	.LASF143:
 17372 104e 74656D70 		.ascii	"tempChar\000"
 17372      43686172 
 17372      00
 17373              	.LASF347:
 17374 1057 4F4C4544 		.ascii	"OLEDcount\000"
 17374      636F756E 
 17374      7400
 17375              	.LASF358:
 17376 1061 73747269 		.ascii	"stringOffset\000"
 17376      6E674F66 
 17376      66736574 
 17376      00
 17377              	.LASF332:
 17378 106e 70617463 		.ascii	"patchNum\000"
 17378      684E756D 
 17378      00
 17379              	.LASF95:
 17380 1077 6D794D61 		.ascii	"myMappedPos\000"
 17380      70706564 
 17380      506F7300 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 377


 17381              	.LASF351:
 17382 1083 70656461 		.ascii	"pedals_float\000"
 17382      6C735F66 
 17382      6C6F6174 
 17382      00
 17383              	.LASF297:
 17384 1090 70656461 		.ascii	"pedals_lowWithDeadZone\000"
 17384      6C735F6C 
 17384      6F775769 
 17384      74684465 
 17384      61645A6F 
 17385              	.LASF285:
 17386 10a7 6D616372 		.ascii	"macroKnobValues7bit\000"
 17386      6F4B6E6F 
 17386      6256616C 
 17386      75657337 
 17386      62697400 
 17387              	.LASF21:
 17388 10bb 75696E74 		.ascii	"uint8\000"
 17388      3800
 17389              	.LASF295:
 17390 10c1 70656461 		.ascii	"pedals_low\000"
 17390      6C735F6C 
 17390      6F7700
 17391              	.LASF366:
 17392 10cc 63616C69 		.ascii	"calibrationNames\000"
 17392      62726174 
 17392      696F6E4E 
 17392      616D6573 
 17392      00
 17393              	.LASF100:
 17394 10dd 70697463 		.ascii	"pitchBendAmount\000"
 17394      6842656E 
 17394      64416D6F 
 17394      756E7400 
 17395              	.LASF191:
 17396 10ed 73696E67 		.ascii	"singleParamToUpdateHigh\000"
 17396      6C655061 
 17396      72616D54 
 17396      6F557064 
 17396      61746548 
 17397              	.LASF5:
 17398 1105 73686F72 		.ascii	"short int\000"
 17398      7420696E 
 17398      7400
 17399              	.LASF207:
 17400 110f 6D657373 		.ascii	"messageArraySize\000"
 17400      61676541 
 17400      72726179 
 17400      53697A65 
 17400      00
 17401              	.LASF308:
 17402 1120 66726574 		.ascii	"fretMeasurements\000"
 17402      4D656173 
 17402      7572656D 
 17402      656E7473 
 17402      00
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 378


 17403              	.LASF110:
 17404 1131 6D6F6465 		.ascii	"mode\000"
 17404      00
 17405              	.LASF104:
 17406 1136 62756666 		.ascii	"bufferPointer\000"
 17406      6572506F 
 17406      696E7465 
 17406      7200
 17407              	.LASF117:
 17408 1144 6D616372 		.ascii	"macroCheck\000"
 17408      6F436865 
 17408      636B00
 17409              	.LASF345:
 17410 114f 73747269 		.ascii	"stringMIDI\000"
 17410      6E674D49 
 17410      444900
 17411              	.LASF97:
 17412 115a 6F70656E 		.ascii	"openStringMIDI\000"
 17412      53747269 
 17412      6E674D49 
 17412      444900
 17413              	.LASF17:
 17414 1169 696E7431 		.ascii	"int16_t\000"
 17414      365F7400 
 17415              	.LASF144:
 17416 1171 70656461 		.ascii	"pedalToWrite\000"
 17416      6C546F57 
 17416      72697465 
 17416      00
 17417              	.LASF34:
 17418 117e 65657072 		.ascii	"eepromSize\000"
 17418      6F6D5369 
 17418      7A6500
 17419              	.LASF166:
 17420 1189 656E7465 		.ascii	"enterPressed\000"
 17420      72507265 
 17420      73736564 
 17420      00
 17421              	.LASF116:
 17422 1196 64697370 		.ascii	"displayCurrentPresetNameAndCopedent\000"
 17422      6C617943 
 17422      75727265 
 17422      6E745072 
 17422      65736574 
 17423              	.LASF340:
 17424 11ba 73747269 		.ascii	"stringMappedPositions\000"
 17424      6E674D61 
 17424      70706564 
 17424      506F7369 
 17424      74696F6E 
 17425              	.LASF234:
 17426 11d0 70726576 		.ascii	"previousButtons\000"
 17426      696F7573 
 17426      42757474 
 17426      6F6E7300 
 17427              	.LASF35:
 17428 11e0 77656172 		.ascii	"wearLevelingFactor\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 379


 17428      4C657665 
 17428      6C696E67 
 17428      46616374 
 17428      6F7200
 17429              	.LASF172:
 17430 11f3 5553425F 		.ascii	"USB_midiInPointer\000"
 17430      6D696469 
 17430      496E506F 
 17430      696E7465 
 17430      7200
 17431              	.LASF108:
 17432 1205 69324341 		.ascii	"i2CAddr\000"
 17432      64647200 
 17433              	.LASF155:
 17434 120d 656E7465 		.ascii	"enterEditModeMenu\000"
 17434      72456469 
 17434      744D6F64 
 17434      654D656E 
 17434      7500
 17435              	.LASF227:
 17436 121f 696E4275 		.ascii	"inBuffer\000"
 17436      66666572 
 17436      00
 17437              	.LASF258:
 17438 1228 6D617853 		.ascii	"maxStrings\000"
 17438      7472696E 
 17438      677300
 17439              	.LASF86:
 17440 1233 6C657474 		.ascii	"letter\000"
 17440      657200
 17441              	.LASF176:
 17442 123a 5553425F 		.ascii	"USB_midiOutBuffer\000"
 17442      6D696469 
 17442      4F757442 
 17442      75666665 
 17442      7200
 17443              	.LASF242:
 17444 124c 6D616372 		.ascii	"macroKnobValues\000"
 17444      6F4B6E6F 
 17444      6256616C 
 17444      75657300 
 17445              	.LASF294:
 17446 125c 6932635F 		.ascii	"i2c_skipped\000"
 17446      736B6970 
 17446      70656400 
 17447              	.LASF160:
 17448 1268 74656D70 		.ascii	"tempPos\000"
 17448      506F7300 
 17449              	.LASF304:
 17450 1270 70656461 		.ascii	"pedals7bit\000"
 17450      6C733762 
 17450      697400
 17451              	.LASF282:
 17452 127b 70726576 		.ascii	"prev_7bit_volumePedal\000"
 17452      5F376269 
 17452      745F766F 
 17452      6C756D65 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 380


 17452      50656461 
 17453              	.LASF226:
 17454 1291 6D617070 		.ascii	"mappingArray\000"
 17454      696E6741 
 17454      72726179 
 17454      00
 17455              	.LASF272:
 17456 129e 73706941 		.ascii	"spiAdjusted\000"
 17456      646A7573 
 17456      74656400 
 17457              	.LASF246:
 17458 12aa 72783243 		.ascii	"rx2Channel\000"
 17458      68616E6E 
 17458      656C00
 17459              	.LASF156:
 17460 12b5 65786974 		.ascii	"exitEditModeMenu\000"
 17460      45646974 
 17460      4D6F6465 
 17460      4D656E75 
 17460      00
 17461              	.LASF355:
 17462 12c6 6C657665 		.ascii	"leverCalibrationMode\000"
 17462      7243616C 
 17462      69627261 
 17462      74696F6E 
 17462      4D6F6465 
 17463              	.LASF173:
 17464 12db 5553425F 		.ascii	"USB_midi_in_ep\000"
 17464      6D696469 
 17464      5F696E5F 
 17464      657000
 17465              	.LASF106:
 17466 12ea 446D6152 		.ascii	"DmaRxConfiguration\000"
 17466      78436F6E 
 17466      66696775 
 17466      72617469 
 17466      6F6E00
 17467              	.LASF20:
 17468 12fd 75696E74 		.ascii	"uint32_t\000"
 17468      33325F74 
 17468      00
 17469              	.LASF203:
 17470 1306 6F637461 		.ascii	"octaveAction\000"
 17470      76654163 
 17470      74696F6E 
 17470      00
 17471              	.LASF331:
 17472 1313 62757474 		.ascii	"button4Up\000"
 17472      6F6E3455 
 17472      7000
 17473              	.LASF223:
 17474 131d 70726576 		.ascii	"prevVBUS\000"
 17474      56425553 
 17474      00
 17475              	.LASF252:
 17476 1326 72783354 		.ascii	"rx3TD\000"
 17476      4400
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 381


 17477              	.LASF222:
 17478 132c 63757272 		.ascii	"currentVBUS\000"
 17478      656E7456 
 17478      42555300 
 17479              	.LASF324:
 17480 1338 6F637434 		.ascii	"oct4Up\000"
 17480      557000
 17481              	.LASF115:
 17482 133f 63616C63 		.ascii	"calculatePedalRatios\000"
 17482      756C6174 
 17482      65506564 
 17482      616C5261 
 17482      74696F73 
 17483              	.LASF330:
 17484 1354 62757474 		.ascii	"button3Up\000"
 17484      6F6E3355 
 17484      7000
 17485              	.LASF7:
 17486 135e 73686F72 		.ascii	"short unsigned int\000"
 17486      7420756E 
 17486      7369676E 
 17486      65642069 
 17486      6E7400
 17487              	.LASF162:
 17488 1371 6C656674 		.ascii	"leftPressed\000"
 17488      50726573 
 17488      73656400 
 17489              	.LASF200:
 17490 137d 70697463 		.ascii	"pitchSmoothing\000"
 17490      68536D6F 
 17490      6F746869 
 17490      6E6700
 17491              	.LASF58:
 17492 138c 6D617070 		.ascii	"mapping\000"
 17492      696E6700 
 17493              	.LASF126:
 17494 1394 6E6F7465 		.ascii	"noteToSend\000"
 17494      546F5365 
 17494      6E6400
 17495              	.LASF250:
 17496 139f 74785444 		.ascii	"txTD\000"
 17496      00
 17497              	.LASF8:
 17498 13a4 5F5F696E 		.ascii	"__int32_t\000"
 17498      7433325F 
 17498      7400
 17499              	.LASF257:
 17500 13ae 70726576 		.ascii	"prevBar\000"
 17500      42617200 
 17501              	.LASF157:
 17502 13b6 6D656E75 		.ascii	"menuAction\000"
 17502      41637469 
 17502      6F6E00
 17503              	.LASF320:
 17504 13c1 73686966 		.ascii	"shiftUp\000"
 17504      74557000 
 17505              	.LASF229:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccT8fSJt.s 			page 382


 17506 13c9 6D79496E 		.ascii	"myInputArray\000"
 17506      70757441 
 17506      72726179 
 17506      00
 17507              	.LASF71:
 17508 13d6 6D746F66 		.ascii	"mtof\000"
 17508      00
 17509              	.LASF169:
 17510 13db 656E7465 		.ascii	"enterFretCalibrationMode\000"
 17510      72467265 
 17510      7443616C 
 17510      69627261 
 17510      74696F6E 
 17511              	.LASF337:
 17512 13f4 70656461 		.ascii	"pedals\000"
 17512      6C7300
 17513              	.LASF89:
 17514 13fb 74656D70 		.ascii	"tempIntHigh\000"
 17514      496E7448 
 17514      69676800 
 17515              	.LASF322:
 17516 1407 65646974 		.ascii	"editUp\000"
 17516      557000
 17517              	.LASF33:
 17518 140e 6C617374 		.ascii	"lastWrRowAddr\000"
 17518      5772526F 
 17518      77416464 
 17518      7200
 17519              	.LASF83:
 17520 141c 6D794172 		.ascii	"myArrayCounter\000"
 17520      72617943 
 17520      6F756E74 
 17520      657200
 17521              	.LASF342:
 17522 142b 73747269 		.ascii	"stringFrequencies\000"
 17522      6E674672 
 17522      65717565 
 17522      6E636965 
 17522      7300
 17523              	.LASF22:
 17524 143d 75696E74 		.ascii	"uint16\000"
 17524      313600
 17525              	.LASF163:
 17526 1444 72696768 		.ascii	"rightPressed\000"
 17526      74507265 
 17526      73736564 
 17526      00
 17527              	.LASF228:
 17528 1451 6D794172 		.ascii	"myArray\000"
 17528      72617900 
 17529              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
