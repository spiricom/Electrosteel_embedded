ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	usbActivityCounter
  20              		.bss
  21              		.type	usbActivityCounter, %object
  22              		.size	usbActivityCounter, 1
  23              	usbActivityCounter:
  24 0000 00       		.space	1
  25              		.comm	midiMsg,4,4
  26              		.global	currentVBUS
  27              		.type	currentVBUS, %object
  28              		.size	currentVBUS, 1
  29              	currentVBUS:
  30 0001 00       		.space	1
  31              		.global	prevVBUS
  32              		.type	prevVBUS, %object
  33              		.size	prevVBUS, 1
  34              	prevVBUS:
  35 0002 00       		.space	1
  36              		.global	USB_active
  37              		.type	USB_active, %object
  38              		.size	USB_active, 1
  39              	USB_active:
  40 0003 00       		.space	1
  41              		.global	USB_check_flag
  42              		.type	USB_check_flag, %object
  43              		.size	USB_check_flag, 1
  44              	USB_check_flag:
  45 0004 00       		.space	1
  46              		.comm	myArray,74,4
  47              		.comm	myInputArray,2,4
  48              		.comm	linearPotValue32Bit,16,4
  49              		.global	i
  50              		.type	i, %object
  51              		.size	i, 1
  52              	i:
  53 0005 00       		.space	1
  54              		.global	counter
  55              		.type	counter, %object
  56              		.size	counter, 1
  57              	counter:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 2


  58 0006 00       		.space	1
  59              		.comm	returnedData,74,4
  60              		.comm	temper,4,4
  61              		.comm	previousButtons,44,4
  62              		.global	octave
  63              		.data
  64              		.align	2
  65              		.type	octave, %object
  66              		.size	octave, 4
  67              	octave:
  68 0000 01000000 		.word	1
  69              		.comm	angle,20,4
  70              		.comm	prevAngle,20,4
  71              		.comm	ADC_values,8,4
  72              		.global	rawAngle
  73              		.bss
  74 0007 00       		.align	1
  75              		.type	rawAngle, %object
  76              		.size	rawAngle, 2
  77              	rawAngle:
  78 0008 0000     		.space	2
  79              		.global	midiSent
  80              		.align	1
  81              		.type	midiSent, %object
  82              		.size	midiSent, 2
  83              	midiSent:
  84 000a 0000     		.space	2
  85              		.global	midiOverflow
  86              		.align	1
  87              		.type	midiOverflow, %object
  88              		.size	midiOverflow, 2
  89              	midiOverflow:
  90 000c 0000     		.space	2
  91              		.comm	rx1Channel,1,1
  92              		.comm	rx2Channel,1,32
  93              		.comm	rx1TD,2,4
  94              		.comm	rx2TD,2,32
  95              		.comm	rxBufferPluck,52,32
  96              		.comm	rxBufferBar,16,32
  97              		.comm	strings,24,4
  98              		.comm	prevStrings,24,4
  99              		.comm	bar,4,4
 100              		.comm	prevBar,4,4
 101              		.comm	maxStrings,24,4
 102              		.global	amHere
 103              		.type	amHere, %object
 104              		.size	amHere, 1
 105              	amHere:
 106 000e 00       		.space	1
 107              		.global	spiCounter
 108              		.type	spiCounter, %object
 109              		.size	spiCounter, 1
 110              	spiCounter:
 111 000f 00       		.space	1
 112              		.global	newDataFlag
 113              		.type	newDataFlag, %object
 114              		.size	newDataFlag, 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 3


 115              	newDataFlag:
 116 0010 00       		.space	1
 117              		.global	prevOctave
 118 0011 000000   		.align	2
 119              		.type	prevOctave, %object
 120              		.size	prevOctave, 4
 121              	prevOctave:
 122 0014 00000000 		.space	4
 123              		.global	pluck_index
 124              		.type	pluck_index, %object
 125              		.size	pluck_index, 1
 126              	pluck_index:
 127 0018 00       		.space	1
 128              		.global	amHere2
 129              		.type	amHere2, %object
 130              		.size	amHere2, 1
 131              	amHere2:
 132 0019 00       		.space	1
 133              		.global	spiCounter2
 134              		.type	spiCounter2, %object
 135              		.size	spiCounter2, 1
 136              	spiCounter2:
 137 001a 00       		.space	1
 138              		.global	newDataFlag2
 139              		.type	newDataFlag2, %object
 140              		.size	newDataFlag2, 1
 141              	newDataFlag2:
 142 001b 00       		.space	1
 143              		.global	currentPluckBuffer
 144              		.type	currentPluckBuffer, %object
 145              		.size	currentPluckBuffer, 1
 146              	currentPluckBuffer:
 147 001c 00       		.space	1
 148              		.global	currentBarBuffer
 149              		.type	currentBarBuffer, %object
 150              		.size	currentBarBuffer, 1
 151              	currentBarBuffer:
 152 001d 00       		.space	1
 153              		.global	pluckErrorCount
 154              		.type	pluckErrorCount, %object
 155              		.size	pluckErrorCount, 1
 156              	pluckErrorCount:
 157 001e 00       		.space	1
 158              		.global	SPI1ErrorCount
 159 001f 00       		.align	1
 160              		.type	SPI1ErrorCount, %object
 161              		.size	SPI1ErrorCount, 2
 162              	SPI1ErrorCount:
 163 0020 0000     		.space	2
 164              		.global	inputData
 165              		.type	inputData, %object
 166              		.size	inputData, 1
 167              	inputData:
 168 0022 00       		.space	1
 169              		.section	.text.spis_1_ss,"ax",%progbits
 170              		.align	2
 171              		.global	spis_1_ss
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 4


 172              		.thumb
 173              		.thumb_func
 174              		.type	spis_1_ss, %function
 175              	spis_1_ss:
 176              	.LFB64:
 177              		.file 1 "main.c"
   1:main.c        **** /*main.c
   2:main.c        **** *****************************************************************************/
   3:main.c        **** #include <device.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <math.h>
   6:main.c        **** #include "oled.h"
   7:main.c        **** #include "main.h"
   8:main.c        **** 
   9:main.c        **** #define myBufferSize 74
  10:main.c        **** 
  11:main.c        **** 
  12:main.c        **** volatile uint8 usbActivityCounter = 0u;
  13:main.c        **** uint8 midiMsg[4];
  14:main.c        **** uint8_t currentVBUS = 0;
  15:main.c        **** uint8_t prevVBUS = 0;
  16:main.c        **** volatile uint8_t USB_active = 0;
  17:main.c        **** volatile uint8_t USB_check_flag = 0;
  18:main.c        **** 
  19:main.c        **** uint8 myArray[myBufferSize];
  20:main.c        **** uint8 myInputArray[2];
  21:main.c        **** int32_t linearPotValue32Bit[4];
  22:main.c        **** uint8_t i = 0;
  23:main.c        **** uint8_t counter = 0;
  24:main.c        **** uint8_t returnedData[myBufferSize];
  25:main.c        **** int32_t temper;
  26:main.c        **** int previousButtons[11];
  27:main.c        **** int octave = 1;
  28:main.c        **** uint16_t angle[10];
  29:main.c        **** uint16_t prevAngle[10];
  30:main.c        **** 
  31:main.c        **** uint16_t ADC_values[4];
  32:main.c        **** uint16_t rawAngle = 0;
  33:main.c        **** uint16_t midiSent = 0;
  34:main.c        **** uint16_t midiOverflow = 0;
  35:main.c        **** 
  36:main.c        **** void checkUSB_Vbus(void);
  37:main.c        **** void sendMIDIAllNotesOff(void);
  38:main.c        **** void sendMIDIPitchBend(int val, int channel);
  39:main.c        **** void firstCheckUSB_Vbus(void);
  40:main.c        **** void restartSystemCheck(void);
  41:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel);
  42:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel);
  43:main.c        **** CY_ISR_PROTO(SleepIsr_function);
  44:main.c        **** void noteEvent(int string);
  45:main.c        **** void I2C_reset(void);
  46:main.c        **** void CCEvent(int cc, int val);
  47:main.c        **** void DmaRxConfiguration(void);
  48:main.c        **** /* DMA Configuration for DMA_RX */
  49:main.c        **** #define DMA_RX_BYTES_PER_BURST      (1u)
  50:main.c        **** #define DMA_RX_REQUEST_PER_BURST    (1u)
  51:main.c        **** #define DMA_RX_SRC_BASE             (CYDEV_PERIPH_BASE)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 5


  52:main.c        **** #define DMA_RX_DST_BASE             (CYDEV_SRAM_BASE)
  53:main.c        **** 
  54:main.c        **** #define PLUCK_BUFFER_SIZE                 (26u)
  55:main.c        **** #define BAR_BUFFER_SIZE                 (8u)
  56:main.c        **** #define STORE_TD_CFG_ONCMPLT        (1u)
  57:main.c        **** uint8 rx1Channel, rx2Channel __attribute__((aligned(32)));
  58:main.c        **** uint8 rx1TD[2], rx2TD[2] __attribute__((aligned(32)));
  59:main.c        **** 
  60:main.c        **** volatile uint8 rxBufferPluck[2][PLUCK_BUFFER_SIZE] __attribute__((aligned(32)));
  61:main.c        **** volatile uint8 rxBufferBar[2][BAR_BUFFER_SIZE] __attribute__((aligned(32)));
  62:main.c        **** 
  63:main.c        **** volatile uint16_t strings[12];
  64:main.c        **** volatile uint16_t prevStrings[12];
  65:main.c        **** volatile uint16_t bar[2];
  66:main.c        **** volatile uint16_t prevBar[2];
  67:main.c        **** volatile uint16_t maxStrings[12];
  68:main.c        **** volatile uint8_t amHere = 0;
  69:main.c        **** volatile uint8_t spiCounter = 0;
  70:main.c        **** volatile uint8_t newDataFlag = 0;
  71:main.c        **** int prevOctave = 0;
  72:main.c        **** uint8_t pluck_index = 0;
  73:main.c        **** volatile uint8_t amHere2 = 0;
  74:main.c        **** volatile uint8_t spiCounter2 = 0;
  75:main.c        **** volatile uint8_t newDataFlag2 = 0;
  76:main.c        **** volatile uint8_t currentPluckBuffer = 0;
  77:main.c        **** volatile uint8_t currentBarBuffer = 0;
  78:main.c        **** volatile uint8_t pluckErrorCount = 0;
  79:main.c        **** volatile uint16_t SPI1ErrorCount = 0;
  80:main.c        **** 
  81:main.c        **** 
  82:main.c        **** 
  83:main.c        **** volatile uint8_t inputData = 0;
  84:main.c        **** 
  85:main.c        **** 
  86:main.c        **** union breakFloat {
  87:main.c        ****  float f;
  88:main.c        ****  uint8_t b[4];  
  89:main.c        ****  uint32_t u32;
  90:main.c        **** };
  91:main.c        **** 
  92:main.c        **** 
  93:main.c        **** CY_ISR(spis_1_ss)
  94:main.c        **** {
 178              		.loc 1 94 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 1, uses_anonymous_args = 0
 182 0000 80B5     		push	{r7, lr}
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 7, -8
 185              		.cfi_offset 14, -4
 186 0002 00AF     		add	r7, sp, #0
 187              		.cfi_def_cfa_register 7
  95:main.c        ****     currentPluckBuffer = !currentPluckBuffer;
 188              		.loc 1 95 0
 189 0004 224B     		ldr	r3, .L2
 190 0006 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 6


 191 0008 DBB2     		uxtb	r3, r3
 192 000a 002B     		cmp	r3, #0
 193 000c 0CBF     		ite	eq
 194 000e 0123     		moveq	r3, #1
 195 0010 0023     		movne	r3, #0
 196 0012 DBB2     		uxtb	r3, r3
 197 0014 1A46     		mov	r2, r3
 198 0016 1E4B     		ldr	r3, .L2
 199 0018 1A70     		strb	r2, [r3]
  96:main.c        **** 
  97:main.c        ****     SPIS_1_ClearRxBuffer();
 200              		.loc 1 97 0
 201 001a FFF7FEFF 		bl	SPIS_1_ClearRxBuffer
  98:main.c        ****     CyDmaClearPendingDrq(rx1Channel);
 202              		.loc 1 98 0
 203 001e 1D4B     		ldr	r3, .L2+4
 204 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 205 0022 1846     		mov	r0, r3
 206 0024 FFF7FEFF 		bl	CyDmaClearPendingDrq
  99:main.c        **** 
 100:main.c        ****     //set up the next DMA transaction
 101:main.c        **** 
 102:main.c        ****     CyDmaTdSetConfiguration(rx1TD[currentPluckBuffer], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DS
 207              		.loc 1 102 0
 208 0028 194B     		ldr	r3, .L2
 209 002a 1B78     		ldrb	r3, [r3]
 210 002c DBB2     		uxtb	r3, r3
 211 002e 1A46     		mov	r2, r3
 212 0030 194B     		ldr	r3, .L2+8
 213 0032 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 214 0034 0223     		movs	r3, #2
 215 0036 FE22     		movs	r2, #254
 216 0038 1A21     		movs	r1, #26
 217 003a FFF7FEFF 		bl	CyDmaTdSetConfiguration
 103:main.c        ****     CyDmaTdSetAddress(rx1TD[currentPluckBuffer], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rx
 218              		.loc 1 103 0
 219 003e 144B     		ldr	r3, .L2
 220 0040 1B78     		ldrb	r3, [r3]
 221 0042 DBB2     		uxtb	r3, r3
 222 0044 1A46     		mov	r2, r3
 223 0046 144B     		ldr	r3, .L2+8
 224 0048 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 225 004a 114B     		ldr	r3, .L2
 226 004c 1B78     		ldrb	r3, [r3]
 227 004e DBB2     		uxtb	r3, r3
 228 0050 1A46     		mov	r2, r3
 229 0052 1A23     		movs	r3, #26
 230 0054 03FB02F3 		mul	r3, r3, r2
 231 0058 104A     		ldr	r2, .L2+12
 232 005a 1344     		add	r3, r3, r2
 233 005c 9BB2     		uxth	r3, r3
 234 005e 1A46     		mov	r2, r3
 235 0060 46F25741 		movw	r1, #25687
 236 0064 FFF7FEFF 		bl	CyDmaTdSetAddress
 104:main.c        ****     CyDmaChSetInitialTd(rx1Channel, rx1TD[currentPluckBuffer]);
 237              		.loc 1 104 0
 238 0068 0A4B     		ldr	r3, .L2+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 7


 239 006a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 240 006c 084B     		ldr	r3, .L2
 241 006e 1B78     		ldrb	r3, [r3]
 242 0070 DBB2     		uxtb	r3, r3
 243 0072 1946     		mov	r1, r3
 244 0074 084B     		ldr	r3, .L2+8
 245 0076 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 246 0078 1946     		mov	r1, r3
 247 007a 1046     		mov	r0, r2
 248 007c FFF7FEFF 		bl	CyDmaChSetInitialTd
 105:main.c        ****     CyDmaChEnable(rx1Channel, 1);
 249              		.loc 1 105 0
 250 0080 044B     		ldr	r3, .L2+4
 251 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 252 0084 0121     		movs	r1, #1
 253 0086 1846     		mov	r0, r3
 254 0088 FFF7FEFF 		bl	CyDmaChEnable
 106:main.c        **** 
 107:main.c        ****     /*
 108:main.c        ****     //get rid of any data in the spi2 buffer
 109:main.c        ****     currentPluckBuffer = !currentPluckBuffer;
 110:main.c        ****     pluck_index = 0;
 111:main.c        ****     SPIS_1_ClearRxBuffer();
 112:main.c        ****     //set up dma to transfer with a clean start
 113:main.c        ****     //CyDmaChSetInitialTd(rx2Channel, rx2TD[0]);
 114:main.c        ****     //CyDmaChEnable(rx2Channel, 1);
 115:main.c        ****     //offsetErrorCount++;
 116:main.c        ****     //disable this interrupt until another error occurs
 117:main.c        ****     //isr_SPI2_ss_Stop();
 118:main.c        ****     */
 119:main.c        **** }
 255              		.loc 1 119 0
 256 008c 00BF     		nop
 257 008e 80BD     		pop	{r7, pc}
 258              	.L3:
 259              		.align	2
 260              	.L2:
 261 0090 00000000 		.word	currentPluckBuffer
 262 0094 00000000 		.word	rx1Channel
 263 0098 00000000 		.word	rx1TD
 264 009c 00000000 		.word	rxBufferPluck
 265              		.cfi_endproc
 266              	.LFE64:
 267              		.size	spis_1_ss, .-spis_1_ss
 268              		.section	.text.spis_1_function,"ax",%progbits
 269              		.align	2
 270              		.global	spis_1_function
 271              		.thumb
 272              		.thumb_func
 273              		.type	spis_1_function, %function
 274              	spis_1_function:
 275              	.LFB65:
 120:main.c        **** 
 121:main.c        **** CY_ISR(spis_1_function) {     /* No need to clear any interrupt source; interrupt component should 
 276              		.loc 1 121 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 8


 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280 0000 90B5     		push	{r4, r7, lr}
 281              		.cfi_def_cfa_offset 12
 282              		.cfi_offset 4, -12
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 0002 83B0     		sub	sp, sp, #12
 286              		.cfi_def_cfa_offset 24
 287 0004 00AF     		add	r7, sp, #0
 288              		.cfi_def_cfa_register 7
 122:main.c        ****     //SPI receive from pluck detector
 123:main.c        ****     while(SPIS_1_GetRxBufferSize())
 289              		.loc 1 123 0
 290 0006 17E0     		b	.L5
 291              	.L6:
 124:main.c        ****     {
 125:main.c        ****         rxBufferPluck[currentPluckBuffer][pluck_index] = CY_GET_REG8(SPIS_1_RXDATA_PTR);
 292              		.loc 1 125 0
 293 0008 3E4B     		ldr	r3, .L13
 294 000a 1B78     		ldrb	r3, [r3]
 295 000c DBB2     		uxtb	r3, r3
 296 000e 1C46     		mov	r4, r3
 297 0010 3D4B     		ldr	r3, .L13+4
 298 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 299 0014 1846     		mov	r0, r3
 300 0016 3D4B     		ldr	r3, .L13+8
 301 0018 1B78     		ldrb	r3, [r3]
 302 001a D9B2     		uxtb	r1, r3
 303 001c 3C4A     		ldr	r2, .L13+12
 304 001e 1A23     		movs	r3, #26
 305 0020 03FB04F3 		mul	r3, r3, r4
 306 0024 1344     		add	r3, r3, r2
 307 0026 0344     		add	r3, r3, r0
 308 0028 0A46     		mov	r2, r1
 309 002a 1A70     		strb	r2, [r3]
 126:main.c        ****         pluck_index++;
 310              		.loc 1 126 0
 311 002c 364B     		ldr	r3, .L13+4
 312 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 0030 0133     		adds	r3, r3, #1
 314 0032 DAB2     		uxtb	r2, r3
 315 0034 344B     		ldr	r3, .L13+4
 316 0036 1A70     		strb	r2, [r3]
 317              	.L5:
 123:main.c        ****     {
 318              		.loc 1 123 0
 319 0038 FFF7FEFF 		bl	SPIS_1_GetRxBufferSize
 320 003c 0346     		mov	r3, r0
 321 003e 002B     		cmp	r3, #0
 322 0040 E2D1     		bne	.L6
 127:main.c        ****     }
 128:main.c        ****         
 129:main.c        ****     if (pluck_index == 26)
 323              		.loc 1 129 0
 324 0042 314B     		ldr	r3, .L13+4
 325 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 326 0046 1A2B     		cmp	r3, #26
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 9


 327 0048 57D1     		bne	.L12
 130:main.c        ****     {
 131:main.c        ****         if ((rxBufferPluck[currentPluckBuffer][0] == 254) && (rxBufferPluck[currentPluckBuffer][21]
 328              		.loc 1 131 0
 329 004a 2E4B     		ldr	r3, .L13
 330 004c 1B78     		ldrb	r3, [r3]
 331 004e DBB2     		uxtb	r3, r3
 332 0050 1946     		mov	r1, r3
 333 0052 2F4A     		ldr	r2, .L13+12
 334 0054 1A23     		movs	r3, #26
 335 0056 03FB01F3 		mul	r3, r3, r1
 336 005a 1344     		add	r3, r3, r2
 337 005c 1B78     		ldrb	r3, [r3]
 338 005e DBB2     		uxtb	r3, r3
 339 0060 FE2B     		cmp	r3, #254
 340 0062 3FD1     		bne	.L8
 341              		.loc 1 131 0 is_stmt 0 discriminator 1
 342 0064 274B     		ldr	r3, .L13
 343 0066 1B78     		ldrb	r3, [r3]
 344 0068 DBB2     		uxtb	r3, r3
 345 006a 1946     		mov	r1, r3
 346 006c 284A     		ldr	r2, .L13+12
 347 006e 1A23     		movs	r3, #26
 348 0070 03FB01F3 		mul	r3, r3, r1
 349 0074 1344     		add	r3, r3, r2
 350 0076 1533     		adds	r3, r3, #21
 351 0078 1B78     		ldrb	r3, [r3]
 352 007a DBB2     		uxtb	r3, r3
 353 007c FD2B     		cmp	r3, #253
 354 007e 31D1     		bne	.L8
 355              	.LBB2:
 132:main.c        ****         {
 133:main.c        **** 
 134:main.c        ****             for (int i = 0; i < 12; i++)
 356              		.loc 1 134 0 is_stmt 1
 357 0080 0023     		movs	r3, #0
 358 0082 7B60     		str	r3, [r7, #4]
 359 0084 2AE0     		b	.L9
 360              	.L10:
 135:main.c        ****             {
 136:main.c        ****                 strings[i] = ((rxBufferPluck[currentPluckBuffer][(i*2)+1] << 7) + rxBufferPluck[cur
 361              		.loc 1 136 0 discriminator 3
 362 0086 1F4B     		ldr	r3, .L13
 363 0088 1B78     		ldrb	r3, [r3]
 364 008a DBB2     		uxtb	r3, r3
 365 008c 1846     		mov	r0, r3
 366 008e 7B68     		ldr	r3, [r7, #4]
 367 0090 5B00     		lsls	r3, r3, #1
 368 0092 0133     		adds	r3, r3, #1
 369 0094 1E49     		ldr	r1, .L13+12
 370 0096 1A22     		movs	r2, #26
 371 0098 02FB00F2 		mul	r2, r2, r0
 372 009c 0A44     		add	r2, r2, r1
 373 009e 1344     		add	r3, r3, r2
 374 00a0 1B78     		ldrb	r3, [r3]
 375 00a2 DBB2     		uxtb	r3, r3
 376 00a4 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 10


 377 00a6 DB01     		lsls	r3, r3, #7
 378 00a8 9AB2     		uxth	r2, r3
 379 00aa 164B     		ldr	r3, .L13
 380 00ac 1B78     		ldrb	r3, [r3]
 381 00ae DBB2     		uxtb	r3, r3
 382 00b0 1C46     		mov	r4, r3
 383 00b2 7B68     		ldr	r3, [r7, #4]
 384 00b4 0133     		adds	r3, r3, #1
 385 00b6 5B00     		lsls	r3, r3, #1
 386 00b8 1548     		ldr	r0, .L13+12
 387 00ba 1A21     		movs	r1, #26
 388 00bc 01FB04F1 		mul	r1, r1, r4
 389 00c0 0144     		add	r1, r1, r0
 390 00c2 0B44     		add	r3, r3, r1
 391 00c4 1B78     		ldrb	r3, [r3]
 392 00c6 DBB2     		uxtb	r3, r3
 393 00c8 9BB2     		uxth	r3, r3
 394 00ca 1344     		add	r3, r3, r2
 395 00cc 99B2     		uxth	r1, r3
 396 00ce 114A     		ldr	r2, .L13+16
 397 00d0 7B68     		ldr	r3, [r7, #4]
 398 00d2 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 134:main.c        ****             {
 399              		.loc 1 134 0 discriminator 3
 400 00d6 7B68     		ldr	r3, [r7, #4]
 401 00d8 0133     		adds	r3, r3, #1
 402 00da 7B60     		str	r3, [r7, #4]
 403              	.L9:
 134:main.c        ****             {
 404              		.loc 1 134 0 is_stmt 0 discriminator 1
 405 00dc 7B68     		ldr	r3, [r7, #4]
 406 00de 0B2B     		cmp	r3, #11
 407 00e0 D1DD     		ble	.L10
 408              	.LBE2:
 134:main.c        ****             {
 409              		.loc 1 134 0
 410 00e2 0AE0     		b	.L11
 411              	.L8:
 137:main.c        ****             }
 138:main.c        ****             
 139:main.c        ****         }
 140:main.c        ****         else
 141:main.c        ****         {
 142:main.c        ****             
 143:main.c        ****             //disable the dma chain
 144:main.c        ****             //CyDmaChDisable(rx2Channel);
 145:main.c        **** 
 146:main.c        ****             SPI1ErrorCount++;
 412              		.loc 1 146 0 is_stmt 1
 413 00e4 0C4B     		ldr	r3, .L13+20
 414 00e6 1B88     		ldrh	r3, [r3]	@ movhi
 415 00e8 9BB2     		uxth	r3, r3
 416 00ea 0133     		adds	r3, r3, #1
 417 00ec 9AB2     		uxth	r2, r3
 418 00ee 0A4B     		ldr	r3, .L13+20
 419 00f0 1A80     		strh	r2, [r3]	@ movhi
 147:main.c        ****             //enable an interrupt to reset it on the rising edge of the cs (at the end of an 8-byte
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 11


 148:main.c        ****             //isr_SPI2_ss_StartEx(spis_2_ss);
 149:main.c        **** 
 150:main.c        **** 
 151:main.c        ****             
 152:main.c        ****             amHere = 1;
 420              		.loc 1 152 0
 421 00f2 0A4B     		ldr	r3, .L13+24
 422 00f4 0122     		movs	r2, #1
 423 00f6 1A70     		strb	r2, [r3]
 153:main.c        ****         }
 154:main.c        ****     }
 155:main.c        ****     /*
 156:main.c        ****     uint8_t currentTd = 0;
 157:main.c        ****     uint8_t state = 0;
 158:main.c        ****      CyDmaChStatus(rx1Channel, &currentTd, &state);
 159:main.c        ****     
 160:main.c        **** 
 161:main.c        ****     currentPluckBuffer = (currentTd & 1);
 162:main.c        ****     if ((rxBufferPluck[currentPluckBuffer][0] == 254) && (rxBufferPluck[currentPluckBuffer][21] == 
 163:main.c        ****     {
 164:main.c        ****         for (int i = 0; i < 10; i++)
 165:main.c        ****         {
 166:main.c        ****             strings[i] = ((rxBufferPluck[currentPluckBuffer][(i*2)+1] << 7) + rxBufferPluck[current
 167:main.c        ****         }
 168:main.c        ****     }
 169:main.c        ****     else
 170:main.c        ****     {
 171:main.c        ****         pluckErrorCount++;
 172:main.c        ****     }
 173:main.c        ****     amHere = 1;
 174:main.c        ****     */
 175:main.c        **** }
 424              		.loc 1 175 0
 425 00f8 FFE7     		b	.L12
 426              	.L11:
 427              	.L12:
 428 00fa 00BF     		nop
 429 00fc 0C37     		adds	r7, r7, #12
 430              		.cfi_def_cfa_offset 12
 431 00fe BD46     		mov	sp, r7
 432              		.cfi_def_cfa_register 13
 433              		@ sp needed
 434 0100 90BD     		pop	{r4, r7, pc}
 435              	.L14:
 436 0102 00BF     		.align	2
 437              	.L13:
 438 0104 00000000 		.word	currentPluckBuffer
 439 0108 00000000 		.word	pluck_index
 440 010c 57640040 		.word	1073767511
 441 0110 00000000 		.word	rxBufferPluck
 442 0114 00000000 		.word	strings
 443 0118 00000000 		.word	SPI1ErrorCount
 444 011c 00000000 		.word	amHere
 445              		.cfi_endproc
 446              	.LFE65:
 447              		.size	spis_1_function, .-spis_1_function
 448              		.global	spiAdjusted
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 12


 449              		.bss
 450              		.type	spiAdjusted, %object
 451              		.size	spiAdjusted, 1
 452              	spiAdjusted:
 453 0023 00       		.space	1
 454              		.global	mySpiCounter
 455              		.type	mySpiCounter, %object
 456              		.size	mySpiCounter, 1
 457              	mySpiCounter:
 458 0024 00       		.space	1
 459              		.global	offsetErrorCount
 460 0025 00       		.align	1
 461              		.type	offsetErrorCount, %object
 462              		.size	offsetErrorCount, 2
 463              	offsetErrorCount:
 464 0026 0000     		.space	2
 465              		.global	SPI2errorflag
 466              		.type	SPI2errorflag, %object
 467              		.size	SPI2errorflag, 1
 468              	SPI2errorflag:
 469 0028 00       		.space	1
 470              		.global	bar_index
 471 0029 000000   		.align	2
 472              		.type	bar_index, %object
 473              		.size	bar_index, 4
 474              	bar_index:
 475 002c 00000000 		.space	4
 476              		.comm	knobs,4,4
 477              		.comm	prevKnobs,4,4
 478              		.global	SPI2started
 479              		.type	SPI2started, %object
 480              		.size	SPI2started, 1
 481              	SPI2started:
 482 0030 00       		.space	1
 483              		.section	.text.spis_2_ss,"ax",%progbits
 484              		.align	2
 485              		.global	spis_2_ss
 486              		.thumb
 487              		.thumb_func
 488              		.type	spis_2_ss, %function
 489              	spis_2_ss:
 490              	.LFB66:
 176:main.c        **** 
 177:main.c        **** uint8_t spiAdjusted = 0;
 178:main.c        **** uint8_t mySpiCounter = 0;
 179:main.c        **** volatile uint16_t offsetErrorCount = 0;
 180:main.c        **** volatile uint8_t SPI2errorflag = 0;
 181:main.c        **** volatile int bar_index = 0;
 182:main.c        **** uint8_t knobs[4];
 183:main.c        **** uint8_t prevKnobs[4];
 184:main.c        **** 
 185:main.c        **** volatile uint8_t SPI2started = 0;
 186:main.c        **** 
 187:main.c        **** 
 188:main.c        **** CY_ISR(spis_2_ss)
 189:main.c        **** {
 491              		.loc 1 189 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 13


 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 1, uses_anonymous_args = 0
 495 0000 80B5     		push	{r7, lr}
 496              		.cfi_def_cfa_offset 8
 497              		.cfi_offset 7, -8
 498              		.cfi_offset 14, -4
 499 0002 00AF     		add	r7, sp, #0
 500              		.cfi_def_cfa_register 7
 190:main.c        ****     //get rid of any data in the spi2 buffer
 191:main.c        **** 
 192:main.c        **** 
 193:main.c        ****     currentBarBuffer = !currentBarBuffer;
 501              		.loc 1 193 0
 502 0004 214B     		ldr	r3, .L16
 503 0006 1B78     		ldrb	r3, [r3]
 504 0008 DBB2     		uxtb	r3, r3
 505 000a 002B     		cmp	r3, #0
 506 000c 0CBF     		ite	eq
 507 000e 0123     		moveq	r3, #1
 508 0010 0023     		movne	r3, #0
 509 0012 DBB2     		uxtb	r3, r3
 510 0014 1A46     		mov	r2, r3
 511 0016 1D4B     		ldr	r3, .L16
 512 0018 1A70     		strb	r2, [r3]
 194:main.c        ****     SPIS_2_ClearRxBuffer();
 513              		.loc 1 194 0
 514 001a FFF7FEFF 		bl	SPIS_2_ClearRxBuffer
 195:main.c        ****     CyDmaClearPendingDrq(rx2Channel);
 515              		.loc 1 195 0
 516 001e 1C4B     		ldr	r3, .L16+4
 517 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 518 0022 1846     		mov	r0, r3
 519 0024 FFF7FEFF 		bl	CyDmaClearPendingDrq
 196:main.c        **** 
 197:main.c        ****     //set up the next DMA transaction
 198:main.c        **** 
 199:main.c        ****     CyDmaTdSetConfiguration(rx2TD[currentBarBuffer], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_AD
 520              		.loc 1 199 0
 521 0028 184B     		ldr	r3, .L16
 522 002a 1B78     		ldrb	r3, [r3]
 523 002c DBB2     		uxtb	r3, r3
 524 002e 1A46     		mov	r2, r3
 525 0030 184B     		ldr	r3, .L16+8
 526 0032 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 527 0034 0623     		movs	r3, #6
 528 0036 FE22     		movs	r2, #254
 529 0038 0821     		movs	r1, #8
 530 003a FFF7FEFF 		bl	CyDmaTdSetConfiguration
 200:main.c        ****     CyDmaTdSetAddress(rx2TD[currentBarBuffer], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBu
 531              		.loc 1 200 0
 532 003e 134B     		ldr	r3, .L16
 533 0040 1B78     		ldrb	r3, [r3]
 534 0042 DBB2     		uxtb	r3, r3
 535 0044 1A46     		mov	r2, r3
 536 0046 134B     		ldr	r3, .L16+8
 537 0048 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 14


 538 004a 104B     		ldr	r3, .L16
 539 004c 1B78     		ldrb	r3, [r3]
 540 004e DBB2     		uxtb	r3, r3
 541 0050 DB00     		lsls	r3, r3, #3
 542 0052 114A     		ldr	r2, .L16+12
 543 0054 1344     		add	r3, r3, r2
 544 0056 9BB2     		uxth	r3, r3
 545 0058 1A46     		mov	r2, r3
 546 005a 46F25B51 		movw	r1, #25947
 547 005e FFF7FEFF 		bl	CyDmaTdSetAddress
 201:main.c        ****     CyDmaChSetInitialTd(rx2Channel, rx2TD[currentBarBuffer]);
 548              		.loc 1 201 0
 549 0062 0B4B     		ldr	r3, .L16+4
 550 0064 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 551 0066 094B     		ldr	r3, .L16
 552 0068 1B78     		ldrb	r3, [r3]
 553 006a DBB2     		uxtb	r3, r3
 554 006c 1946     		mov	r1, r3
 555 006e 094B     		ldr	r3, .L16+8
 556 0070 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 557 0072 1946     		mov	r1, r3
 558 0074 1046     		mov	r0, r2
 559 0076 FFF7FEFF 		bl	CyDmaChSetInitialTd
 202:main.c        ****     CyDmaChEnable(rx2Channel, 1);
 560              		.loc 1 202 0
 561 007a 054B     		ldr	r3, .L16+4
 562 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 563 007e 0121     		movs	r1, #1
 564 0080 1846     		mov	r0, r3
 565 0082 FFF7FEFF 		bl	CyDmaChEnable
 203:main.c        ****     //SPI2started = 1;
 204:main.c        **** 
 205:main.c        ****     /*
 206:main.c        ****     //get rid of any data in the spi2 buffer
 207:main.c        ****     currentBarBuffer = !currentBarBuffer;
 208:main.c        ****     bar_index = 0;
 209:main.c        ****     SPIS_2_ClearRxBuffer();
 210:main.c        ****     */
 211:main.c        ****     //set up dma to transfer with a clean start
 212:main.c        ****     //CyDmaChSetInitialTd(rx2Channel, rx2TD[0]);
 213:main.c        ****     //CyDmaChEnable(rx2Channel, 1);
 214:main.c        ****     //offsetErrorCount++;
 215:main.c        ****     //disable this interrupt until another error occurs
 216:main.c        ****     //isr_SPI2_ss_Stop();
 217:main.c        **** }
 566              		.loc 1 217 0
 567 0086 00BF     		nop
 568 0088 80BD     		pop	{r7, pc}
 569              	.L17:
 570 008a 00BF     		.align	2
 571              	.L16:
 572 008c 00000000 		.word	currentBarBuffer
 573 0090 00000000 		.word	rx2Channel
 574 0094 00000000 		.word	rx2TD
 575 0098 00000000 		.word	rxBufferBar
 576              		.cfi_endproc
 577              	.LFE66:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 15


 578              		.size	spis_2_ss, .-spis_2_ss
 579              		.section	.text.spis_2_function,"ax",%progbits
 580              		.align	2
 581              		.global	spis_2_function
 582              		.thumb
 583              		.thumb_func
 584              		.type	spis_2_function, %function
 585              	spis_2_function:
 586              	.LFB67:
 218:main.c        **** 
 219:main.c        **** 
 220:main.c        **** CY_ISR(spis_2_function) {     /* No need to clear any interrupt source; interrupt component should 
 587              		.loc 1 220 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 1, uses_anonymous_args = 0
 591              		@ link register save eliminated.
 592 0000 80B4     		push	{r7}
 593              		.cfi_def_cfa_offset 4
 594              		.cfi_offset 7, -4
 595 0002 00AF     		add	r7, sp, #0
 596              		.cfi_def_cfa_register 7
 221:main.c        ****     //SPI receive from bar sensor
 222:main.c        ****     /*
 223:main.c        ****     while(SPIS_2_GetRxBufferSize())
 224:main.c        ****     {
 225:main.c        ****         rxBufferBar[currentBarBuffer][bar_index] = CY_GET_REG8(SPIS_2_RXDATA_PTR);
 226:main.c        ****         bar_index++;
 227:main.c        ****     }
 228:main.c        ****         
 229:main.c        ****     if (bar_index == 8)
 230:main.c        ****     {
 231:main.c        ****         if ((rxBufferBar[currentBarBuffer][6] == 254) && (rxBufferBar[currentBarBuffer][7] == 253))
 232:main.c        ****         {
 233:main.c        ****             for (int i = 0; i < 2; i++)
 234:main.c        ****             {
 235:main.c        ****                 bar[i] = ((rxBufferBar[currentBarBuffer][i*2] << 8) + rxBufferBar[currentBarBuffer]
 236:main.c        ****             }
 237:main.c        ****             
 238:main.c        ****         }
 239:main.c        ****         else
 240:main.c        ****         {
 241:main.c        ****             
 242:main.c        ****             //disable the dma chain
 243:main.c        ****             //CyDmaChDisable(rx2Channel);
 244:main.c        ****             SPI2errorflag = 1;
 245:main.c        ****             offsetErrorCount++;
 246:main.c        ****             //enable an interrupt to reset it on the rising edge of the cs (at the end of an 8-byte
 247:main.c        ****             //isr_SPI2_ss_StartEx(spis_2_ss);
 248:main.c        **** 
 249:main.c        **** 
 250:main.c        ****             
 251:main.c        ****             amHere2 = 1;
 252:main.c        ****         }
 253:main.c        ****     }
 254:main.c        ****     /*
 255:main.c        ****         uint8_t currentTd = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 16


 256:main.c        ****         uint8_t state = 0;
 257:main.c        ****         CyDmaChStatus(rx2Channel, &currentTd, &state);
 258:main.c        ****         currentBarBuffer = (currentTd & 1);
 259:main.c        ****         uint8_t datasize = 8;
 260:main.c        ****         */
 261:main.c        ****     
 262:main.c        ****     /*
 263:main.c        ****         if ((rxBufferBar[currentBarBuffer][6] == 254) && (rxBufferBar[currentBarBuffer][7] == 253))
 264:main.c        ****         {
 265:main.c        ****             for (int i = 0; i < 2; i++)
 266:main.c        ****             {
 267:main.c        ****                 bar[i] = ((rxBufferBar[currentBarBuffer][i*2] << 8) + rxBufferBar[currentBarBuffer]
 268:main.c        ****             }
 269:main.c        ****             
 270:main.c        ****         }
 271:main.c        ****         else
 272:main.c        ****         {
 273:main.c        ****             
 274:main.c        ****             //disable the dma chain
 275:main.c        ****             //CyDmaChDisable(rx2Channel);
 276:main.c        ****             SPI2errorflag = 1;
 277:main.c        ****             //enable an interrupt to reset it on the rising edge of the cs (at the end of an 8-byte
 278:main.c        ****             //isr_SPI2_ss_StartEx(spis_2_ss);
 279:main.c        **** 
 280:main.c        **** 
 281:main.c        ****             
 282:main.c        ****             amHere2 = 1;
 283:main.c        ****         }
 284:main.c        **** */
 285:main.c        ****         
 286:main.c        ****         amHere = 1;
 597              		.loc 1 286 0
 598 0004 034B     		ldr	r3, .L19
 599 0006 0122     		movs	r2, #1
 600 0008 1A70     		strb	r2, [r3]
 287:main.c        **** 
 288:main.c        **** }
 601              		.loc 1 288 0
 602 000a 00BF     		nop
 603 000c BD46     		mov	sp, r7
 604              		.cfi_def_cfa_register 13
 605              		@ sp needed
 606 000e 80BC     		pop	{r7}
 607              		.cfi_restore 7
 608              		.cfi_def_cfa_offset 0
 609 0010 7047     		bx	lr
 610              	.L20:
 611 0012 00BF     		.align	2
 612              	.L19:
 613 0014 00000000 		.word	amHere
 614              		.cfi_endproc
 615              	.LFE67:
 616              		.size	spis_2_function, .-spis_2_function
 617              		.section	.text.SleepIsr_function,"ax",%progbits
 618              		.align	2
 619              		.global	SleepIsr_function
 620              		.thumb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 17


 621              		.thumb_func
 622              		.type	SleepIsr_function, %function
 623              	SleepIsr_function:
 624              	.LFB68:
 289:main.c        **** 
 290:main.c        **** 
 291:main.c        **** 
 292:main.c        **** CY_ISR(SleepIsr_function)
 293:main.c        **** {
 625              		.loc 1 293 0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 0
 628              		@ frame_needed = 1, uses_anonymous_args = 0
 629 0000 80B5     		push	{r7, lr}
 630              		.cfi_def_cfa_offset 8
 631              		.cfi_offset 7, -8
 632              		.cfi_offset 14, -4
 633 0002 00AF     		add	r7, sp, #0
 634              		.cfi_def_cfa_register 7
 294:main.c        ****     if (USB_active)
 635              		.loc 1 294 0
 636 0004 0C4B     		ldr	r3, .L24
 637 0006 1B78     		ldrb	r3, [r3]
 638 0008 DBB2     		uxtb	r3, r3
 639 000a 002B     		cmp	r3, #0
 640 000c 0FD0     		beq	.L22
 295:main.c        ****     {
 296:main.c        ****         //check USB activity
 297:main.c        ****         if( USB_CheckActivity() != 0u ) 
 641              		.loc 1 297 0
 642 000e FFF7FEFF 		bl	USB_CheckActivity
 643 0012 0346     		mov	r3, r0
 644 0014 002B     		cmp	r3, #0
 645 0016 03D0     		beq	.L23
 298:main.c        ****         {
 299:main.c        ****             usbActivityCounter = 0u;
 646              		.loc 1 299 0
 647 0018 084B     		ldr	r3, .L24+4
 648 001a 0022     		movs	r2, #0
 649 001c 1A70     		strb	r2, [r3]
 650 001e 06E0     		b	.L22
 651              	.L23:
 300:main.c        ****         } 
 301:main.c        ****         else 
 302:main.c        ****         {
 303:main.c        ****             usbActivityCounter++;
 652              		.loc 1 303 0
 653 0020 064B     		ldr	r3, .L24+4
 654 0022 1B78     		ldrb	r3, [r3]
 655 0024 DBB2     		uxtb	r3, r3
 656 0026 0133     		adds	r3, r3, #1
 657 0028 DAB2     		uxtb	r2, r3
 658 002a 044B     		ldr	r3, .L24+4
 659 002c 1A70     		strb	r2, [r3]
 660              	.L22:
 304:main.c        ****         }
 305:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 18


 306:main.c        ****     }
 307:main.c        ****     //Clear pending interrupt
 308:main.c        ****     SleepTimer_GetStatus();
 661              		.loc 1 308 0
 662 002e FFF7FEFF 		bl	SleepTimer_GetStatus
 309:main.c        **** }
 663              		.loc 1 309 0
 664 0032 00BF     		nop
 665 0034 80BD     		pop	{r7, pc}
 666              	.L25:
 667 0036 00BF     		.align	2
 668              	.L24:
 669 0038 00000000 		.word	USB_active
 670 003c 00000000 		.word	usbActivityCounter
 671              		.cfi_endproc
 672              	.LFE68:
 673              		.size	SleepIsr_function, .-SleepIsr_function
 674              		.bss
 675 0031 000000   		.align	2
 676              	eepromArray:
 677 0034 0000     		.space	2
 678              		.global	array
 679 0036 0000     		.align	2
 680              		.type	array, %object
 681              		.size	array, 2
 682              	array:
 683 0038 0000     		.space	2
 684              		.comm	eepromReturnValue,1,1
 685              		.global	Em_EEPROM_em_EepromStorage
 686              		.section	.rodata
 687              		.align	8
 688              		.type	Em_EEPROM_em_EepromStorage, %object
 689              		.size	Em_EEPROM_em_EepromStorage, 1024
 690              	Em_EEPROM_em_EepromStorage:
 691 0000 00000000 		.space	1024
 691      00000000 
 691      00000000 
 691      00000000 
 691      00000000 
 692              		.comm	eeprom_cnt,1,1
 693              		.comm	status,4,4
 694              		.comm	ptr,4,4
 695              		.global	barCount
 696              		.bss
 697 003a 0000     		.align	2
 698              		.type	barCount, %object
 699              		.size	barCount, 4
 700              	barCount:
 701 003c 00000000 		.space	4
 702              		.section	.text.Vbus_function,"ax",%progbits
 703              		.align	2
 704              		.global	Vbus_function
 705              		.thumb
 706              		.thumb_func
 707              		.type	Vbus_function, %function
 708              	Vbus_function:
 709              	.LFB69:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 19


 310:main.c        **** 
 311:main.c        ****     static uint8 CYCODE eepromArray[]={ 0, 0 };
 312:main.c        ****                                             
 313:main.c        ****     uint8 array[] ={ 0, 0 };
 314:main.c        ****                                 
 315:main.c        ****     /*Return status for EEPROM and UART*/ 
 316:main.c        **** cy_en_em_eeprom_status_t eepromReturnValue;
 317:main.c        **** 
 318:main.c        **** 
 319:main.c        **** /* EEPROM storage in work flash, this is defined in Em_EEPROM.c*/
 320:main.c        **** #if defined (__ICCARM__)
 321:main.c        **** #pragma data_alignment = CY_FLASH_SIZEOF_ROW
 322:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE] = {0u};
 323:main.c        **** #else
 324:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE]
 325:main.c        **** __ALIGNED(CY_FLASH_SIZEOF_ROW) = {0u};
 326:main.c        **** #endif /* defined (__ICCARM__) */
 327:main.c        **** 
 328:main.c        ****     uint8 eeprom_cnt;
 329:main.c        ****     cystatus status;
 330:main.c        ****     volatile const uint8 * ptr;
 331:main.c        **** volatile int barCount = 0;
 332:main.c        **** 
 333:main.c        **** //#define I2C_1_TIMEOUT_ENABLE 1u //overwrites the default in the i2c block
 334:main.c        ****     
 335:main.c        **** //this ISR should happen when a USB cable is plugged in or unplugged.
 336:main.c        **** 
 337:main.c        **** CY_ISR(Vbus_function)
 338:main.c        **** {
 710              		.loc 1 338 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714 0000 80B5     		push	{r7, lr}
 715              		.cfi_def_cfa_offset 8
 716              		.cfi_offset 7, -8
 717              		.cfi_offset 14, -4
 718 0002 00AF     		add	r7, sp, #0
 719              		.cfi_def_cfa_register 7
 339:main.c        ****     //plug or unplug event
 340:main.c        ****     //check if eeprom has a flag saying you just restarted. If so, don't restart again
 341:main.c        ****     //otherwise, restart
 342:main.c        ****     my_Vbus_ISR_ClearPending();
 720              		.loc 1 342 0
 721 0004 FFF7FEFF 		bl	my_Vbus_ISR_ClearPending
 343:main.c        ****     vBusPin_ClearInterrupt();
 722              		.loc 1 343 0
 723 0008 FFF7FEFF 		bl	vBusPin_ClearInterrupt
 344:main.c        ****     restartSystemCheck();
 724              		.loc 1 344 0
 725 000c FFF7FEFF 		bl	restartSystemCheck
 345:main.c        **** 
 346:main.c        **** }
 726              		.loc 1 346 0
 727 0010 00BF     		nop
 728 0012 80BD     		pop	{r7, pc}
 729              		.cfi_endproc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 20


 730              	.LFE69:
 731              		.size	Vbus_function, .-Vbus_function
 732              		.section	.text.restartSystemCheck,"ax",%progbits
 733              		.align	2
 734              		.global	restartSystemCheck
 735              		.thumb
 736              		.thumb_func
 737              		.type	restartSystemCheck, %function
 738              	restartSystemCheck:
 739              	.LFB70:
 347:main.c        **** 
 348:main.c        **** void restartSystemCheck()
 349:main.c        **** {
 740              		.loc 1 349 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 1, uses_anonymous_args = 0
 744 0000 80B5     		push	{r7, lr}
 745              		.cfi_def_cfa_offset 8
 746              		.cfi_offset 7, -8
 747              		.cfi_offset 14, -4
 748 0002 00AF     		add	r7, sp, #0
 749              		.cfi_def_cfa_register 7
 350:main.c        ****     eepromReturnValue = Em_EEPROM_Read(0u, eepromArray, 2u);
 750              		.loc 1 350 0
 751 0004 164B     		ldr	r3, .L31
 752 0006 0222     		movs	r2, #2
 753 0008 1649     		ldr	r1, .L31+4
 754 000a 0020     		movs	r0, #0
 755 000c FFF7FEFF 		bl	Cy_Em_EEPROM_Read
 756 0010 0346     		mov	r3, r0
 757 0012 1A46     		mov	r2, r3
 758 0014 144B     		ldr	r3, .L31+8
 759 0016 1A70     		strb	r2, [r3]
 351:main.c        ****     if (*(volatile uint8 *) &eepromArray[0] == 1u)
 760              		.loc 1 351 0
 761 0018 124B     		ldr	r3, .L31+4
 762 001a 1B78     		ldrb	r3, [r3]
 763 001c DBB2     		uxtb	r3, r3
 764 001e 012B     		cmp	r3, #1
 765 0020 0CD1     		bne	.L28
 352:main.c        ****     {
 353:main.c        ****         //a flag says we just restarted
 354:main.c        ****         //write a zero so it knows next time that it's OK to restart
 355:main.c        ****         array[0] = 0;
 766              		.loc 1 355 0
 767 0022 124B     		ldr	r3, .L31+12
 768 0024 0022     		movs	r2, #0
 769 0026 1A70     		strb	r2, [r3]
 356:main.c        ****         Em_EEPROM_Write(0u,array,2u);     
 770              		.loc 1 356 0
 771 0028 0D4B     		ldr	r3, .L31
 772 002a 0222     		movs	r2, #2
 773 002c 0F49     		ldr	r1, .L31+12
 774 002e 0020     		movs	r0, #0
 775 0030 FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 357:main.c        ****         USB_check_flag = 1;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 21


 776              		.loc 1 357 0
 777 0034 0E4B     		ldr	r3, .L31+16
 778 0036 0122     		movs	r2, #1
 779 0038 1A70     		strb	r2, [r3]
 358:main.c        ****     }
 359:main.c        ****     else
 360:main.c        ****     {
 361:main.c        ****        //otherwise, we need to restart
 362:main.c        ****        array[0] = 1;
 363:main.c        ****        Em_EEPROM_Write(0u,array,2u);  
 364:main.c        ****         USB_Stop();
 365:main.c        ****         I2C_1_Stop();
 366:main.c        ****        CySoftwareReset();
 367:main.c        ****     }
 368:main.c        **** }
 780              		.loc 1 368 0
 781 003a 0EE0     		b	.L30
 782              	.L28:
 362:main.c        ****        Em_EEPROM_Write(0u,array,2u);  
 783              		.loc 1 362 0
 784 003c 0B4B     		ldr	r3, .L31+12
 785 003e 0122     		movs	r2, #1
 786 0040 1A70     		strb	r2, [r3]
 363:main.c        ****         USB_Stop();
 787              		.loc 1 363 0
 788 0042 074B     		ldr	r3, .L31
 789 0044 0222     		movs	r2, #2
 790 0046 0949     		ldr	r1, .L31+12
 791 0048 0020     		movs	r0, #0
 792 004a FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 364:main.c        ****         I2C_1_Stop();
 793              		.loc 1 364 0
 794 004e FFF7FEFF 		bl	USB_Stop
 365:main.c        ****        CySoftwareReset();
 795              		.loc 1 365 0
 796 0052 FFF7FEFF 		bl	I2C_1_Stop
 366:main.c        ****     }
 797              		.loc 1 366 0
 798 0056 FFF7FEFF 		bl	CySoftwareReset
 799              	.L30:
 800              		.loc 1 368 0
 801 005a 00BF     		nop
 802 005c 80BD     		pop	{r7, pc}
 803              	.L32:
 804 005e 00BF     		.align	2
 805              	.L31:
 806 0060 00000000 		.word	Em_EEPROM_context
 807 0064 34000000 		.word	eepromArray
 808 0068 00000000 		.word	eepromReturnValue
 809 006c 00000000 		.word	array
 810 0070 00000000 		.word	USB_check_flag
 811              		.cfi_endproc
 812              	.LFE70:
 813              		.size	restartSystemCheck, .-restartSystemCheck
 814              		.global	__aeabi_fcmpgt
 815              		.global	__aeabi_fcmplt
 816              		.section	.text.LEAF_clip,"ax",%progbits
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 22


 817              		.align	2
 818              		.global	LEAF_clip
 819              		.thumb
 820              		.thumb_func
 821              		.type	LEAF_clip, %function
 822              	LEAF_clip:
 823              	.LFB71:
 369:main.c        ****     
 370:main.c        **** #define INV_440 0.0022727272727273f
 371:main.c        **** 
 372:main.c        **** float   LEAF_clip(float min, float val, float max)
 373:main.c        **** {
 824              		.loc 1 373 0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 24
 827              		@ frame_needed = 1, uses_anonymous_args = 0
 828 0000 80B5     		push	{r7, lr}
 829              		.cfi_def_cfa_offset 8
 830              		.cfi_offset 7, -8
 831              		.cfi_offset 14, -4
 832 0002 86B0     		sub	sp, sp, #24
 833              		.cfi_def_cfa_offset 32
 834 0004 00AF     		add	r7, sp, #0
 835              		.cfi_def_cfa_register 7
 836 0006 F860     		str	r0, [r7, #12]	@ float
 837 0008 B960     		str	r1, [r7, #8]	@ float
 838 000a 7A60     		str	r2, [r7, #4]	@ float
 374:main.c        ****     float tempmin = min;
 839              		.loc 1 374 0
 840 000c FB68     		ldr	r3, [r7, #12]	@ float
 841 000e 7B61     		str	r3, [r7, #20]	@ float
 375:main.c        ****     float tempmax = max;
 842              		.loc 1 375 0
 843 0010 7B68     		ldr	r3, [r7, #4]	@ float
 844 0012 3B61     		str	r3, [r7, #16]	@ float
 376:main.c        ****     if (min > max)
 845              		.loc 1 376 0
 846 0014 7968     		ldr	r1, [r7, #4]	@ float
 847 0016 F868     		ldr	r0, [r7, #12]	@ float
 848 0018 FFF7FEFF 		bl	__aeabi_fcmpgt
 849 001c 0346     		mov	r3, r0
 850 001e 002B     		cmp	r3, #0
 851 0020 03D0     		beq	.L34
 377:main.c        ****     {
 378:main.c        ****         tempmin = max;
 852              		.loc 1 378 0
 853 0022 7B68     		ldr	r3, [r7, #4]	@ float
 854 0024 7B61     		str	r3, [r7, #20]	@ float
 379:main.c        ****         tempmax = min;
 855              		.loc 1 379 0
 856 0026 FB68     		ldr	r3, [r7, #12]	@ float
 857 0028 3B61     		str	r3, [r7, #16]	@ float
 858              	.L34:
 380:main.c        ****     }
 381:main.c        ****     if (val < tempmin)
 859              		.loc 1 381 0
 860 002a 7969     		ldr	r1, [r7, #20]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 23


 861 002c B868     		ldr	r0, [r7, #8]	@ float
 862 002e FFF7FEFF 		bl	__aeabi_fcmplt
 863 0032 0346     		mov	r3, r0
 864 0034 002B     		cmp	r3, #0
 865 0036 01D0     		beq	.L44
 382:main.c        ****     {
 383:main.c        ****         return tempmin;
 866              		.loc 1 383 0
 867 0038 7B69     		ldr	r3, [r7, #20]	@ float
 868 003a 09E0     		b	.L38
 869              	.L44:
 384:main.c        ****     }
 385:main.c        ****     else if (val > tempmax)
 870              		.loc 1 385 0
 871 003c 3969     		ldr	r1, [r7, #16]	@ float
 872 003e B868     		ldr	r0, [r7, #8]	@ float
 873 0040 FFF7FEFF 		bl	__aeabi_fcmpgt
 874 0044 0346     		mov	r3, r0
 875 0046 002B     		cmp	r3, #0
 876 0048 01D0     		beq	.L45
 386:main.c        ****     {
 387:main.c        ****         return tempmax;
 877              		.loc 1 387 0
 878 004a 3B69     		ldr	r3, [r7, #16]	@ float
 879 004c 00E0     		b	.L38
 880              	.L45:
 388:main.c        ****     }
 389:main.c        ****     else
 390:main.c        ****     {
 391:main.c        ****         return val;
 881              		.loc 1 391 0
 882 004e BB68     		ldr	r3, [r7, #8]	@ float
 883              	.L38:
 392:main.c        ****     }
 393:main.c        **** }
 884              		.loc 1 393 0
 885 0050 1846     		mov	r0, r3
 886 0052 1837     		adds	r7, r7, #24
 887              		.cfi_def_cfa_offset 8
 888 0054 BD46     		mov	sp, r7
 889              		.cfi_def_cfa_register 13
 890              		@ sp needed
 891 0056 80BD     		pop	{r7, pc}
 892              		.cfi_endproc
 893              	.LFE71:
 894              		.size	LEAF_clip, .-LEAF_clip
 895              		.global	__aeabi_fcmple
 896              		.global	__aeabi_fmul
 897              		.section	.text.mtof,"ax",%progbits
 898              		.align	2
 899              		.global	mtof
 900              		.thumb
 901              		.thumb_func
 902              		.type	mtof, %function
 903              	mtof:
 904              	.LFB72:
 394:main.c        **** float mtof(float f)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 24


 395:main.c        **** {
 905              		.loc 1 395 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 8
 908              		@ frame_needed = 1, uses_anonymous_args = 0
 909 0000 80B5     		push	{r7, lr}
 910              		.cfi_def_cfa_offset 8
 911              		.cfi_offset 7, -8
 912              		.cfi_offset 14, -4
 913 0002 82B0     		sub	sp, sp, #8
 914              		.cfi_def_cfa_offset 16
 915 0004 00AF     		add	r7, sp, #0
 916              		.cfi_def_cfa_register 7
 917 0006 7860     		str	r0, [r7, #4]	@ float
 396:main.c        ****     if (f <= -1500.0f) return(0);
 918              		.loc 1 396 0
 919 0008 1349     		ldr	r1, .L56
 920 000a 7868     		ldr	r0, [r7, #4]	@ float
 921 000c FFF7FEFF 		bl	__aeabi_fcmple
 922 0010 0346     		mov	r3, r0
 923 0012 002B     		cmp	r3, #0
 924 0014 02D0     		beq	.L54
 925              		.loc 1 396 0 is_stmt 0 discriminator 1
 926 0016 4FF00003 		mov	r3, #0
 927 001a 19E0     		b	.L49
 928              	.L54:
 397:main.c        ****     else if (f > 1499.0f) return(mtof(1499.0f));
 929              		.loc 1 397 0 is_stmt 1
 930 001c 0F49     		ldr	r1, .L56+4
 931 001e 7868     		ldr	r0, [r7, #4]	@ float
 932 0020 FFF7FEFF 		bl	__aeabi_fcmpgt
 933 0024 0346     		mov	r3, r0
 934 0026 002B     		cmp	r3, #0
 935 0028 04D0     		beq	.L55
 936              		.loc 1 397 0 is_stmt 0 discriminator 1
 937 002a 0C48     		ldr	r0, .L56+4
 938 002c FFF7FEFF 		bl	mtof
 939 0030 0346     		mov	r3, r0
 940 0032 0DE0     		b	.L49
 941              	.L55:
 398:main.c        ****     else return (8.17579891564f * expf(0.0577622650f * f));
 942              		.loc 1 398 0 is_stmt 1
 943 0034 0A49     		ldr	r1, .L56+8
 944 0036 7868     		ldr	r0, [r7, #4]	@ float
 945 0038 FFF7FEFF 		bl	__aeabi_fmul
 946 003c 0346     		mov	r3, r0
 947 003e 1846     		mov	r0, r3
 948 0040 FFF7FEFF 		bl	expf
 949 0044 0346     		mov	r3, r0
 950 0046 0749     		ldr	r1, .L56+12
 951 0048 1846     		mov	r0, r3
 952 004a FFF7FEFF 		bl	__aeabi_fmul
 953 004e 0346     		mov	r3, r0
 954              	.L49:
 399:main.c        **** }
 955              		.loc 1 399 0
 956 0050 1846     		mov	r0, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 25


 957 0052 0837     		adds	r7, r7, #8
 958              		.cfi_def_cfa_offset 8
 959 0054 BD46     		mov	sp, r7
 960              		.cfi_def_cfa_register 13
 961              		@ sp needed
 962 0056 80BD     		pop	{r7, pc}
 963              	.L57:
 964              		.align	2
 965              	.L56:
 966 0058 0080BBC4 		.word	-994344960
 967 005c 0060BB44 		.word	1153130496
 968 0060 20986C3D 		.word	1030527008
 969 0064 13D00241 		.word	1090703379
 970              		.cfi_endproc
 971              	.LFE72:
 972              		.size	mtof, .-mtof
 973              		.section	.text.ftom,"ax",%progbits
 974              		.align	2
 975              		.global	ftom
 976              		.thumb
 977              		.thumb_func
 978              		.type	ftom, %function
 979              	ftom:
 980              	.LFB73:
 400:main.c        **** 
 401:main.c        **** float ftom(float f)
 402:main.c        **** {
 981              		.loc 1 402 0
 982              		.cfi_startproc
 983              		@ args = 0, pretend = 0, frame = 8
 984              		@ frame_needed = 1, uses_anonymous_args = 0
 985 0000 80B5     		push	{r7, lr}
 986              		.cfi_def_cfa_offset 8
 987              		.cfi_offset 7, -8
 988              		.cfi_offset 14, -4
 989 0002 82B0     		sub	sp, sp, #8
 990              		.cfi_def_cfa_offset 16
 991 0004 00AF     		add	r7, sp, #0
 992              		.cfi_def_cfa_register 7
 993 0006 7860     		str	r0, [r7, #4]	@ float
 403:main.c        ****     return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 994              		.loc 1 403 0
 995 0008 4FF00001 		mov	r1, #0
 996 000c 7868     		ldr	r0, [r7, #4]	@ float
 997 000e FFF7FEFF 		bl	__aeabi_fcmpgt
 998 0012 0346     		mov	r3, r0
 999 0014 002B     		cmp	r3, #0
 1000 0016 0ED0     		beq	.L64
 1001              		.loc 1 403 0 is_stmt 0 discriminator 1
 1002 0018 0949     		ldr	r1, .L65
 1003 001a 7868     		ldr	r0, [r7, #4]	@ float
 1004 001c FFF7FEFF 		bl	__aeabi_fmul
 1005 0020 0346     		mov	r3, r0
 1006 0022 1846     		mov	r0, r3
 1007 0024 FFF7FEFF 		bl	logf
 1008 0028 0346     		mov	r3, r0
 1009 002a 0649     		ldr	r1, .L65+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 26


 1010 002c 1846     		mov	r0, r3
 1011 002e FFF7FEFF 		bl	__aeabi_fmul
 1012 0032 0346     		mov	r3, r0
 1013 0034 00E0     		b	.L62
 1014              	.L64:
 1015              		.loc 1 403 0 discriminator 2
 1016 0036 044B     		ldr	r3, .L65+8
 1017              	.L62:
 404:main.c        **** }
 1018              		.loc 1 404 0 is_stmt 1 discriminator 5
 1019 0038 1846     		mov	r0, r3
 1020 003a 0837     		adds	r7, r7, #8
 1021              		.cfi_def_cfa_offset 8
 1022 003c BD46     		mov	sp, r7
 1023              		.cfi_def_cfa_register 13
 1024              		@ sp needed
 1025 003e 80BD     		pop	{r7, pc}
 1026              	.L66:
 1027              		.align	2
 1028              	.L65:
 1029 0040 D27EFA3D 		.word	1039826642
 1030 0044 AC7F8A41 		.word	1099595692
 1031 0048 0080BBC4 		.word	-994344960
 1032              		.cfi_endproc
 1033              	.LFE73:
 1034              		.size	ftom, .-ftom
 1035              		.global	__aeabi_fsub
 1036              		.global	__aeabi_fadd
 1037              		.section	.text.LEAF_interpolation_linear,"ax",%progbits
 1038              		.align	2
 1039              		.global	LEAF_interpolation_linear
 1040              		.thumb
 1041              		.thumb_func
 1042              		.type	LEAF_interpolation_linear, %function
 1043              	LEAF_interpolation_linear:
 1044              	.LFB74:
 405:main.c        **** 
 406:main.c        **** // alpha, [0.0, 1.0]
 407:main.c        **** float LEAF_interpolation_linear (float A, float B, float alpha)
 408:main.c        **** {
 1045              		.loc 1 408 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 24
 1048              		@ frame_needed = 1, uses_anonymous_args = 0
 1049 0000 80B5     		push	{r7, lr}
 1050              		.cfi_def_cfa_offset 8
 1051              		.cfi_offset 7, -8
 1052              		.cfi_offset 14, -4
 1053 0002 86B0     		sub	sp, sp, #24
 1054              		.cfi_def_cfa_offset 32
 1055 0004 00AF     		add	r7, sp, #0
 1056              		.cfi_def_cfa_register 7
 1057 0006 F860     		str	r0, [r7, #12]	@ float
 1058 0008 B960     		str	r1, [r7, #8]	@ float
 1059 000a 7A60     		str	r2, [r7, #4]	@ float
 409:main.c        ****     float omAlpha = 1.0f - alpha;
 1060              		.loc 1 409 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 27


 1061 000c 7968     		ldr	r1, [r7, #4]	@ float
 1062 000e 4FF07E50 		mov	r0, #1065353216
 1063 0012 FFF7FEFF 		bl	__aeabi_fsub
 1064 0016 0346     		mov	r3, r0
 1065 0018 7B61     		str	r3, [r7, #20]	@ float
 410:main.c        ****     
 411:main.c        ****     // First 1/2 of interpolation
 412:main.c        ****     float out = A * omAlpha;
 1066              		.loc 1 412 0
 1067 001a 7969     		ldr	r1, [r7, #20]	@ float
 1068 001c F868     		ldr	r0, [r7, #12]	@ float
 1069 001e FFF7FEFF 		bl	__aeabi_fmul
 1070 0022 0346     		mov	r3, r0
 1071 0024 3B61     		str	r3, [r7, #16]	@ float
 413:main.c        ****     
 414:main.c        ****     out += B * alpha;
 1072              		.loc 1 414 0
 1073 0026 7968     		ldr	r1, [r7, #4]	@ float
 1074 0028 B868     		ldr	r0, [r7, #8]	@ float
 1075 002a FFF7FEFF 		bl	__aeabi_fmul
 1076 002e 0346     		mov	r3, r0
 1077 0030 1946     		mov	r1, r3
 1078 0032 3869     		ldr	r0, [r7, #16]	@ float
 1079 0034 FFF7FEFF 		bl	__aeabi_fadd
 1080 0038 0346     		mov	r3, r0
 1081 003a 3B61     		str	r3, [r7, #16]	@ float
 415:main.c        ****     
 416:main.c        ****     return out;
 1082              		.loc 1 416 0
 1083 003c 3B69     		ldr	r3, [r7, #16]	@ float
 417:main.c        **** }
 1084              		.loc 1 417 0
 1085 003e 1846     		mov	r0, r3
 1086 0040 1837     		adds	r7, r7, #24
 1087              		.cfi_def_cfa_offset 8
 1088 0042 BD46     		mov	sp, r7
 1089              		.cfi_def_cfa_register 13
 1090              		@ sp needed
 1091 0044 80BD     		pop	{r7, pc}
 1092              		.cfi_endproc
 1093              	.LFE74:
 1094              		.size	LEAF_interpolation_linear, .-LEAF_interpolation_linear
 1095              		.comm	I2Cbuff1,256,4
 1096              		.comm	I2Cbuff2,16,4
 1097              		.global	send_it
 1098 0046 00BF     		.bss
 1099              		.type	send_it, %object
 1100              		.size	send_it, 1
 1101              	send_it:
 1102 0040 00       		.space	1
 1103              		.global	mux_states
 1104              		.data
 1105              		.align	2
 1106              		.type	mux_states, %object
 1107              		.size	mux_states, 24
 1108              	mux_states:
 1109 0004 05       		.byte	5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 28


 1110 0005 00       		.byte	0
 1111 0006 05       		.byte	5
 1112 0007 01       		.byte	1
 1113 0008 05       		.byte	5
 1114 0009 02       		.byte	2
 1115 000a 05       		.byte	5
 1116 000b 03       		.byte	3
 1117 000c 05       		.byte	5
 1118 000d 04       		.byte	4
 1119 000e 00       		.byte	0
 1120 000f 00       		.byte	0
 1121 0010 01       		.byte	1
 1122 0011 00       		.byte	0
 1123 0012 03       		.byte	3
 1124 0013 00       		.byte	0
 1125 0014 04       		.byte	4
 1126 0015 00       		.byte	0
 1127 0016 02       		.byte	2
 1128 0017 00       		.byte	0
 1129 0018 05       		.byte	5
 1130 0019 05       		.byte	5
 1131 001a 06       		.byte	6
 1132 001b 00       		.byte	0
 1133              		.global	pedals_low
 1134              		.align	2
 1135              		.type	pedals_low, %object
 1136              		.size	pedals_low, 20
 1137              	pedals_low:
 1138 001c 830A     		.short	2691
 1139 001e 0109     		.short	2305
 1140 0020 9909     		.short	2457
 1141 0022 0E02     		.short	526
 1142 0024 9A0E     		.short	3738
 1143 0026 0309     		.short	2307
 1144 0028 C60B     		.short	3014
 1145 002a 8E08     		.short	2190
 1146 002c E90A     		.short	2793
 1147 002e 2605     		.short	1318
 1148              		.global	pedals_high
 1149              		.align	2
 1150              		.type	pedals_high, %object
 1151              		.size	pedals_high, 20
 1152              	pedals_high:
 1153 0030 ED0A     		.short	2797
 1154 0032 6509     		.short	2405
 1155 0034 140A     		.short	2580
 1156 0036 8702     		.short	647
 1157 0038 0E0F     		.short	3854
 1158 003a 9D09     		.short	2461
 1159 003c 450C     		.short	3141
 1160 003e 3109     		.short	2353
 1161 0040 760B     		.short	2934
 1162 0042 E005     		.short	1504
 1163              		.global	deadzone
 1164              		.align	1
 1165              		.type	deadzone, %object
 1166              		.size	deadzone, 2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 29


 1167              	deadzone:
 1168 0044 9600     		.short	150
 1169              		.global	volumePedal
 1170              		.align	1
 1171              		.type	volumePedal, %object
 1172              		.size	volumePedal, 2
 1173              	volumePedal:
 1174 0046 FF0F     		.short	4095
 1175              		.comm	processed_pedals,20,4
 1176              		.comm	prev_processed_pedals,20,4
 1177              		.comm	prev_processed_volumePedal,2,2
 1178              		.comm	processed_volumePedal,2,2
 1179              		.global	fretMeasurements
 1180              		.align	2
 1181              		.type	fretMeasurements, %object
 1182              		.size	fretMeasurements, 32
 1183              	fretMeasurements:
 1184 0048 00DF4D47 		.word	1196285696
 1185 004c 00097447 		.word	1198786816
 1186 0050 00A60247 		.word	1191355904
 1187 0054 00832047 		.word	1193313024
 1188 0058 0046B646 		.word	1186350592
 1189 005c 0012ED46 		.word	1189941760
 1190 0060 0000F145 		.word	1173422080
 1191 0064 00C85446 		.word	1179961344
 1192              		.global	fretScaling
 1193              		.align	2
 1194              		.type	fretScaling, %object
 1195              		.size	fretScaling, 16
 1196              	fretScaling:
 1197 0068 0000803F 		.word	1065353216
 1198 006c ABAA2A3F 		.word	1059760811
 1199 0070 0000003F 		.word	1056964608
 1200 0074 0000803E 		.word	1048576000
 1201              		.comm	pedalRatios,40,4
 1202              		.global	last_mux
 1203              		.type	last_mux, %object
 1204              		.size	last_mux, 1
 1205              	last_mux:
 1206 0078 01       		.byte	1
 1207              		.global	main_counter
 1208              		.bss
 1209              		.type	main_counter, %object
 1210              		.size	main_counter, 1
 1211              	main_counter:
 1212 0041 00       		.space	1
 1213              		.global	neck
 1214              		.type	neck, %object
 1215              		.size	neck, 1
 1216              	neck:
 1217 0042 00       		.space	1
 1218              		.global	dualSlider
 1219              		.type	dualSlider, %object
 1220              		.size	dualSlider, 1
 1221              	dualSlider:
 1222 0043 00       		.space	1
 1223              		.global	enterUp
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 30


 1224              		.data
 1225              		.type	enterUp, %object
 1226              		.size	enterUp, 1
 1227              	enterUp:
 1228 0079 01       		.byte	1
 1229              		.global	voice
 1230              		.bss
 1231              		.type	voice, %object
 1232              		.size	voice, 1
 1233              	voice:
 1234 0044 00       		.space	1
 1235              		.global	editUp
 1236              		.data
 1237              		.type	editUp, %object
 1238              		.size	editUp, 1
 1239              	editUp:
 1240 007a 01       		.byte	1
 1241              		.comm	encoderVal,16,4
 1242              		.global	encoderNum
 1243              		.bss
 1244 0045 000000   		.align	2
 1245              		.type	encoderNum, %object
 1246              		.size	encoderNum, 4
 1247              	encoderNum:
 1248 0048 00000000 		.space	4
 1249              		.global	button1Up
 1250              		.type	button1Up, %object
 1251              		.size	button1Up, 1
 1252              	button1Up:
 1253 004c 00       		.space	1
 1254              		.global	button2Up
 1255              		.type	button2Up, %object
 1256              		.size	button2Up, 1
 1257              	button2Up:
 1258 004d 00       		.space	1
 1259              		.global	button3Up
 1260              		.type	button3Up, %object
 1261              		.size	button3Up, 1
 1262              	button3Up:
 1263 004e 00       		.space	1
 1264              		.global	button4Up
 1265              		.type	button4Up, %object
 1266              		.size	button4Up, 1
 1267              	button4Up:
 1268 004f 00       		.space	1
 1269              		.global	patchNum
 1270              		.type	patchNum, %object
 1271              		.size	patchNum, 1
 1272              	patchNum:
 1273 0050 00       		.space	1
 1274              		.comm	copedent,16896,4
 1275              		.comm	prevStringPitchBend,48,4
 1276              		.comm	pedals,480,4
 1277              		.comm	openStringFrequencies,48,4
 1278              		.comm	stringMappedPositions,48,4
 1279              		.comm	invStringMappedPositions,48,4
 1280              		.comm	stringFrequencies,48,4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 31


 1281              		.comm	stringOctave,48,4
 1282              		.comm	stringPitch,48,4
 1283              		.comm	stringMIDI,48,4
 1284              		.comm	openStringMIDI_Int,48,4
 1285              		.global	OLEDcount
 1286 0051 000000   		.align	2
 1287              		.type	OLEDcount, %object
 1288              		.size	OLEDcount, 4
 1289              	OLEDcount:
 1290 0054 00000000 		.space	4
 1291              		.global	pedals_float
 1292              		.align	2
 1293              		.type	pedals_float, %object
 1294              		.size	pedals_float, 40
 1295              	pedals_float:
 1296 0058 00000000 		.space	40
 1296      00000000 
 1296      00000000 
 1296      00000000 
 1296      00000000 
 1297              		.global	__aeabi_fdiv
 1298              		.section	.text.map,"ax",%progbits
 1299              		.align	2
 1300              		.global	map
 1301              		.thumb
 1302              		.thumb_func
 1303              		.type	map, %function
 1304              	map:
 1305              	.LFB75:
 418:main.c        **** 
 419:main.c        **** 
 420:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode);
 421:main.c        **** uint8 I2C_MasterReadBlocking(uint8 i2CAddr, uint8 nbytes, uint8_t mode);
 422:main.c        **** void USB_service(void);
 423:main.c        **** 
 424:main.c        **** volatile uint8_t I2Cbuff1[256];
 425:main.c        **** volatile uint8_t I2Cbuff2[16];
 426:main.c        **** volatile uint8_t send_it = 0;
 427:main.c        **** 
 428:main.c        **** uint8_t mux_states[12][2] = {{5,0}, {5,1}, {5,2}, {5,3}, {5,4}, {0, 0}, {1, 0}, {3, 0}, {4, 0}, {2,
 429:main.c        **** uint16_t pedals_low[10] = {2691, 2305, 2457, 526, 3738, 2307, 3014, 2190, 2793, 1318};
 430:main.c        **** uint16_t pedals_high[10] = {2797, 2405, 2580, 647, 3854, 2461, 3141, 2353, 2934, 1504};
 431:main.c        **** uint16_t deadzone = 150;
 432:main.c        **** uint16_t volumePedal = 4095;
 433:main.c        **** uint16_t processed_pedals[10];
 434:main.c        **** uint16_t prev_processed_pedals[10];
 435:main.c        **** int16_t prev_processed_volumePedal;
 436:main.c        **** int16_t processed_volumePedal;
 437:main.c        **** 
 438:main.c        **** 
 439:main.c        **** float fretMeasurements[4][2] ={
 440:main.c        **** 
 441:main.c        **** 		{52703.0f, 62473.0f},
 442:main.c        **** 
 443:main.c        **** 		{33446.0f, 41091.0f},
 444:main.c        **** 
 445:main.c        **** 		{23331.0f, 30345.0f},
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 32


 446:main.c        **** 
 447:main.c        **** 		{7712.0f, 13618.0f}
 448:main.c        **** 
 449:main.c        **** 	};
 450:main.c        **** 
 451:main.c        **** 
 452:main.c        **** 
 453:main.c        **** float fretScaling[4] = {1.0f, 0.6666666666666f, 0.5f, 0.25f};
 454:main.c        **** 
 455:main.c        **** 
 456:main.c        **** #define MAX_ENCODERS 16
 457:main.c        **** 
 458:main.c        **** float pedalRatios[10];
 459:main.c        **** uint8_t last_mux = 1;
 460:main.c        **** volatile uint8_t main_counter = 0;
 461:main.c        **** uint8_t neck = 0;
 462:main.c        **** uint8_t dualSlider = 0;
 463:main.c        **** uint8_t enterUp = 1;
 464:main.c        **** uint8_t voice = 0;
 465:main.c        **** uint8_t editUp = 1;
 466:main.c        **** volatile uint8_t encoderVal[MAX_ENCODERS];
 467:main.c        **** int encoderNum = 0;
 468:main.c        **** uint8_t button1Up = 0;
 469:main.c        **** uint8_t button2Up = 0;
 470:main.c        **** uint8_t button3Up = 0;
 471:main.c        **** uint8_t button4Up = 0;
 472:main.c        **** uint8_t patchNum = 0;
 473:main.c        **** #define NUM_STRINGS 12
 474:main.c        **** #define NUM_PEDALS 10
 475:main.c        **** #if 0
 476:main.c        **** float pedalsInCents[NUM_PEDALS][NUM_STRINGS] =
 477:main.c        **** {
 478:main.c        **** 		{-0.16f, 0.0f, 0.0f, 0.0f, 1.84f, 0.0f, -0.16f, 0.0f, 0.0f, 1.84f, 0.0f, 0.0f},
 479:main.c        **** 		{0.0f, 0.0f, 116.0f, 0.0f, 0.0f, 116.0f, 0.0f, 0.0f, -14.0f, 0.0f, 116.0f, 0.0f},
 480:main.c        **** 		{-16.0f, 0.0f, 0.0f, 184.0f, 184.0f, 0.0f, -16.0f, 0.0f, 0.0f, 0.0f, 0.f, 0.0f},
 481:main.c        **** 		{0.0f, 0.0f, 0.0f, 0.0f, -200.0f, -200.0f, 0.0f, 0.0f, 0.0f, -200.0f, -200.0f, 0.0f},
 482:main.c        ****         {-2400.0f, -2400.0f, -2400.0f, -2400.0f, -2400.0f, -2400.0f, -2400.0f, -2400.0f, -2400.0f, 
 483:main.c        ****         {0.0f, 0.0f, 0.0f, -112.0f, 0.0f, 0.0f, 0.0f, -112.0f, 0.0f, 0.0f, 0.0f, -112.0f},
 484:main.c        ****         {0.0f, 0.0f, 0.0f, 75.0f, 0.0f, 0.0f, 0.0f, 75.0f, 0.0f, 0.0f, 0.0f, 75.0f},
 485:main.c        ****         {-14.0f, -204.0f, 0.0f, 0.0f, 0.0f, 0.0f, -14.0f, 0.0f, -134.0f, 0.0f, 0.0f, 0.0f},
 486:main.c        **** 		{186.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
 487:main.c        **** 		{0.0f, 0.0f, 0.0f, 0.0f, -100.0f, 0.0f, 0.0f, 0.0f, 0.0f, -100.0f, 0.0f, 0.0f},
 488:main.c        **** };
 489:main.c        **** float openStringMidinotes[NUM_STRINGS] = {66.04f,62.88f,67.86f, 64.0f,59.02f, 55.86f, 54.04f, 52.0f
 490:main.c        **** #endif
 491:main.c        **** 
 492:main.c        **** float copedent[32][11][NUM_STRINGS];
 493:main.c        **** 
 494:main.c        **** float prevStringPitchBend[NUM_STRINGS];
 495:main.c        **** 
 496:main.c        **** 
 497:main.c        **** #if 0 
 498:main.c        **** 
 499:main.c        **** 
 500:main.c        **** float pedalsInCents[NUM_PEDALS][NUM_STRINGS] =
 501:main.c        **** {
 502:main.c        ****     {0.0f, 0.0f, -100.f, 0.0f, 0.0f, -100.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 33


 503:main.c        ****     {0.0f, 0.0f, 0.0f, 0.0f, 200.0f, 0.0f, 0.0f, 0.0f, 200.0f, 0.0f, 0.0f, 0.0f},
 504:main.c        **** 	{0.0f, 0.0f, 100.0f, 0.0f, 0.0f, 100.0f, 0.0f, 0.0f, 0.0f, 100.0f, 0.0f, 0.0f},
 505:main.c        **** 	{0.0f, 0.0f, 0.0f, 200.0f, 200.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.f, 0.0f},
 506:main.c        **** 	{200.0f, 100.f, 0.0f, 0.0f, 0.0f, 0.0f, 200.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
 507:main.c        ****     
 508:main.c        ****     {0.0f, -200.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -200.0f, 0.0f, 0.0f, 0.0f, 0.0f},
 509:main.c        ****     {0.0f, 0.0f, 0.0f, -100.0f, 0.0f, 0.0f, 0.0f, -100.0f, 0.0f, 0.0f, 0.0f, 0.0f},
 510:main.c        ****     {0.0f, -100.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 300.0f, 300.0f, 0.0f, 0.0f},
 511:main.c        **** 	{0.0f, 0.0f, 0.0f, 100.0f, 0.0f, 0.0f, 0.0f, 100.0f, 0.0f, 0.0f, 0.0f, 0.0f},
 512:main.c        **** 	{0.0f, 0.0f, 0.0f, 0.0f, -100.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f},
 513:main.c        **** };
 514:main.c        **** 
 515:main.c        **** float openStringMidinotes[NUM_STRINGS] = {66.0f, 63.0f, 68.0f,  64.0f, 59.0f, 56.0f, 54.0f, 52.0f, 
 516:main.c        **** #endif
 517:main.c        **** 
 518:main.c        **** float pedals[NUM_PEDALS][NUM_STRINGS];
 519:main.c        **** 
 520:main.c        **** 
 521:main.c        **** float openStringFrequencies[NUM_STRINGS];
 522:main.c        **** float stringMappedPositions[NUM_STRINGS];
 523:main.c        **** float invStringMappedPositions[NUM_STRINGS];
 524:main.c        **** float stringFrequencies[NUM_STRINGS];
 525:main.c        **** float stringOctave[NUM_STRINGS];
 526:main.c        **** float stringPitch[NUM_STRINGS];
 527:main.c        **** float stringMIDI[NUM_STRINGS];
 528:main.c        **** int openStringMIDI_Int[NUM_STRINGS];
 529:main.c        **** int OLEDcount = 0;
 530:main.c        **** 
 531:main.c        **** /*
 532:main.c        **** float fretMeasurements[4][2] ={
 533:main.c        **** 		{53699.0f, 62199.0f},
 534:main.c        **** 		{23462.0f, 30653.0f},
 535:main.c        **** 		{27336.0f, 28186.0f},
 536:main.c        **** 		{9460.0f, 9849.0f}
 537:main.c        **** 	};
 538:main.c        **** float fretScaling[4] = {1.0f, 0.5f, 0.5f, 0.25f};
 539:main.c        **** */
 540:main.c        **** float pedals_float[NUM_PEDALS] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
 541:main.c        **** 
 542:main.c        **** float map(float value, float istart, float istop, float ostart, float ostop)
 543:main.c        **** {
 1306              		.loc 1 543 0
 1307              		.cfi_startproc
 1308              		@ args = 4, pretend = 0, frame = 16
 1309              		@ frame_needed = 1, uses_anonymous_args = 0
 1310 0000 B0B5     		push	{r4, r5, r7, lr}
 1311              		.cfi_def_cfa_offset 16
 1312              		.cfi_offset 4, -16
 1313              		.cfi_offset 5, -12
 1314              		.cfi_offset 7, -8
 1315              		.cfi_offset 14, -4
 1316 0002 84B0     		sub	sp, sp, #16
 1317              		.cfi_def_cfa_offset 32
 1318 0004 00AF     		add	r7, sp, #0
 1319              		.cfi_def_cfa_register 7
 1320 0006 F860     		str	r0, [r7, #12]	@ float
 1321 0008 B960     		str	r1, [r7, #8]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 34


 1322 000a 7A60     		str	r2, [r7, #4]	@ float
 1323 000c 3B60     		str	r3, [r7]	@ float
 544:main.c        ****     return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 1324              		.loc 1 544 0
 1325 000e 3968     		ldr	r1, [r7]	@ float
 1326 0010 386A     		ldr	r0, [r7, #32]	@ float
 1327 0012 FFF7FEFF 		bl	__aeabi_fsub
 1328 0016 0346     		mov	r3, r0
 1329 0018 1C46     		mov	r4, r3
 1330 001a B968     		ldr	r1, [r7, #8]	@ float
 1331 001c F868     		ldr	r0, [r7, #12]	@ float
 1332 001e FFF7FEFF 		bl	__aeabi_fsub
 1333 0022 0346     		mov	r3, r0
 1334 0024 1D46     		mov	r5, r3
 1335 0026 B968     		ldr	r1, [r7, #8]	@ float
 1336 0028 7868     		ldr	r0, [r7, #4]	@ float
 1337 002a FFF7FEFF 		bl	__aeabi_fsub
 1338 002e 0346     		mov	r3, r0
 1339 0030 1946     		mov	r1, r3
 1340 0032 2846     		mov	r0, r5
 1341 0034 FFF7FEFF 		bl	__aeabi_fdiv
 1342 0038 0346     		mov	r3, r0
 1343 003a 1946     		mov	r1, r3
 1344 003c 2046     		mov	r0, r4
 1345 003e FFF7FEFF 		bl	__aeabi_fmul
 1346 0042 0346     		mov	r3, r0
 1347 0044 3968     		ldr	r1, [r7]	@ float
 1348 0046 1846     		mov	r0, r3
 1349 0048 FFF7FEFF 		bl	__aeabi_fadd
 1350 004c 0346     		mov	r3, r0
 545:main.c        **** }
 1351              		.loc 1 545 0
 1352 004e 1846     		mov	r0, r3
 1353 0050 1037     		adds	r7, r7, #16
 1354              		.cfi_def_cfa_offset 16
 1355 0052 BD46     		mov	sp, r7
 1356              		.cfi_def_cfa_register 13
 1357              		@ sp needed
 1358 0054 B0BD     		pop	{r4, r5, r7, pc}
 1359              		.cfi_endproc
 1360              	.LFE75:
 1361              		.size	map, .-map
 1362              		.global	currentNeck
 1363 0056 00BF     		.bss
 1364              		.align	2
 1365              		.type	currentNeck, %object
 1366              		.size	currentNeck, 4
 1367              	currentNeck:
 1368 0080 00000000 		.space	4
 1369              		.global	__aeabi_ui2f
 1370              		.global	__aeabi_i2f
 1371              		.global	__aeabi_f2uiz
 1372              		.section	.rodata
 1373              		.align	2
 1374              	.LC0:
 1375 0400 2000     		.ascii	" \000"
 1376 0402 0000     		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 35


 1377              	.LC1:
 1378 0404 20202020 		.ascii	"     \000"
 1378      2000
 1379              		.global	__aeabi_f2iz
 1380              		.global	__aeabi_fcmpge
 1381              		.global	__aeabi_fcmpeq
 1382              		.section	.text.main,"ax",%progbits
 1383              		.align	2
 1384              		.global	main
 1385              		.thumb
 1386              		.thumb_func
 1387              		.type	main, %function
 1388              	main:
 1389              	.LFB76:
 546:main.c        **** 
 547:main.c        **** int currentNeck = 0;
 548:main.c        **** #define EEPROM_COPEDENT_OFFSET 0
 549:main.c        **** #define COPEDENT_SIZE_IN_BYTES 528
 550:main.c        **** 
 551:main.c        **** int main(void)
 552:main.c        **** {
 1390              		.loc 1 552 0
 1391              		.cfi_startproc
 1392              		@ args = 0, pretend = 0, frame = 96
 1393              		@ frame_needed = 1, uses_anonymous_args = 0
 1394 0000 90B5     		push	{r4, r7, lr}
 1395              		.cfi_def_cfa_offset 12
 1396              		.cfi_offset 4, -12
 1397              		.cfi_offset 7, -8
 1398              		.cfi_offset 14, -4
 1399 0002 9BB0     		sub	sp, sp, #108
 1400              		.cfi_def_cfa_offset 120
 1401 0004 02AF     		add	r7, sp, #8
 1402              		.cfi_def_cfa 7, 112
 553:main.c        ****     
 554:main.c        **** 	CYGlobalIntEnable; 
 1403              		.loc 1 554 0
 1404              		.syntax unified
 1405              	@ 554 "main.c" 1
 1406 0006 62B6     		CPSIE   i
 1407              	@ 0 "" 2
 555:main.c        **** 
 556:main.c        ****     EEPROM_Start();
 1408              		.loc 1 556 0
 1409              		.thumb
 1410              		.syntax unified
 1411 0008 FFF7FEFF 		bl	EEPROM_Start
 1412              	.LBB3:
 557:main.c        ****     
 558:main.c        ****     //add deadzones on edges of pedal sensing
 559:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 1413              		.loc 1 559 0
 1414 000c 0023     		movs	r3, #0
 1415 000e FB65     		str	r3, [r7, #92]
 1416 0010 6EE0     		b	.L72
 1417              	.L73:
 1418              	.LBB4:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 36


 560:main.c        ****     {
 561:main.c        **** 
 562:main.c        ****         float pedalDiff =(float)pedals_high[i] - (float)pedals_low[i];
 1419              		.loc 1 562 0 discriminator 3
 1420 0012 3F4A     		ldr	r2, .L168
 1421 0014 FB6D     		ldr	r3, [r7, #92]
 1422 0016 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1423 001a 1846     		mov	r0, r3
 1424 001c FFF7FEFF 		bl	__aeabi_ui2f
 1425 0020 0446     		mov	r4, r0
 1426 0022 3C4A     		ldr	r2, .L168+4
 1427 0024 FB6D     		ldr	r3, [r7, #92]
 1428 0026 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1429 002a 1846     		mov	r0, r3
 1430 002c FFF7FEFF 		bl	__aeabi_ui2f
 1431 0030 0346     		mov	r3, r0
 1432 0032 1946     		mov	r1, r3
 1433 0034 2046     		mov	r0, r4
 1434 0036 FFF7FEFF 		bl	__aeabi_fsub
 1435 003a 0346     		mov	r3, r0
 1436 003c 3B63     		str	r3, [r7, #48]	@ float
 563:main.c        ****         pedals_low[i] = pedals_low[i] + (0.1f * pedalDiff);
 1437              		.loc 1 563 0 discriminator 3
 1438 003e 354A     		ldr	r2, .L168+4
 1439 0040 FB6D     		ldr	r3, [r7, #92]
 1440 0042 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1441 0046 1846     		mov	r0, r3
 1442 0048 FFF7FEFF 		bl	__aeabi_i2f
 1443 004c 0446     		mov	r4, r0
 1444 004e 3249     		ldr	r1, .L168+8
 1445 0050 386B     		ldr	r0, [r7, #48]	@ float
 1446 0052 FFF7FEFF 		bl	__aeabi_fmul
 1447 0056 0346     		mov	r3, r0
 1448 0058 1946     		mov	r1, r3
 1449 005a 2046     		mov	r0, r4
 1450 005c FFF7FEFF 		bl	__aeabi_fadd
 1451 0060 0346     		mov	r3, r0
 1452 0062 1846     		mov	r0, r3
 1453 0064 FFF7FEFF 		bl	__aeabi_f2uiz
 1454 0068 0346     		mov	r3, r0
 1455 006a 99B2     		uxth	r1, r3
 1456 006c 294A     		ldr	r2, .L168+4
 1457 006e FB6D     		ldr	r3, [r7, #92]
 1458 0070 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 564:main.c        ****         pedals_high[i] = pedals_high[i] - (0.1f * pedalDiff);
 1459              		.loc 1 564 0 discriminator 3
 1460 0074 264A     		ldr	r2, .L168
 1461 0076 FB6D     		ldr	r3, [r7, #92]
 1462 0078 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1463 007c 1846     		mov	r0, r3
 1464 007e FFF7FEFF 		bl	__aeabi_i2f
 1465 0082 0446     		mov	r4, r0
 1466 0084 2449     		ldr	r1, .L168+8
 1467 0086 386B     		ldr	r0, [r7, #48]	@ float
 1468 0088 FFF7FEFF 		bl	__aeabi_fmul
 1469 008c 0346     		mov	r3, r0
 1470 008e 1946     		mov	r1, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 37


 1471 0090 2046     		mov	r0, r4
 1472 0092 FFF7FEFF 		bl	__aeabi_fsub
 1473 0096 0346     		mov	r3, r0
 1474 0098 1846     		mov	r0, r3
 1475 009a FFF7FEFF 		bl	__aeabi_f2uiz
 1476 009e 0346     		mov	r3, r0
 1477 00a0 99B2     		uxth	r1, r3
 1478 00a2 1B4A     		ldr	r2, .L168
 1479 00a4 FB6D     		ldr	r3, [r7, #92]
 1480 00a6 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 565:main.c        ****         pedalDiff =(float)pedals_high[i] - (float)pedals_low[i];
 1481              		.loc 1 565 0 discriminator 3
 1482 00aa 194A     		ldr	r2, .L168
 1483 00ac FB6D     		ldr	r3, [r7, #92]
 1484 00ae 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1485 00b2 1846     		mov	r0, r3
 1486 00b4 FFF7FEFF 		bl	__aeabi_ui2f
 1487 00b8 0446     		mov	r4, r0
 1488 00ba 164A     		ldr	r2, .L168+4
 1489 00bc FB6D     		ldr	r3, [r7, #92]
 1490 00be 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1491 00c2 1846     		mov	r0, r3
 1492 00c4 FFF7FEFF 		bl	__aeabi_ui2f
 1493 00c8 0346     		mov	r3, r0
 1494 00ca 1946     		mov	r1, r3
 1495 00cc 2046     		mov	r0, r4
 1496 00ce FFF7FEFF 		bl	__aeabi_fsub
 1497 00d2 0346     		mov	r3, r0
 1498 00d4 3B63     		str	r3, [r7, #48]	@ float
 566:main.c        ****         pedalRatios[i] = 4095.0f / pedalDiff;
 1499              		.loc 1 566 0 discriminator 3
 1500 00d6 396B     		ldr	r1, [r7, #48]	@ float
 1501 00d8 1048     		ldr	r0, .L168+12
 1502 00da FFF7FEFF 		bl	__aeabi_fdiv
 1503 00de 0346     		mov	r3, r0
 1504 00e0 1946     		mov	r1, r3
 1505 00e2 0F4A     		ldr	r2, .L168+16
 1506 00e4 FB6D     		ldr	r3, [r7, #92]
 1507 00e6 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 1508              	.LBE4:
 559:main.c        ****     {
 1509              		.loc 1 559 0 discriminator 3
 1510 00ea FB6D     		ldr	r3, [r7, #92]
 1511 00ec 0133     		adds	r3, r3, #1
 1512 00ee FB65     		str	r3, [r7, #92]
 1513              	.L72:
 559:main.c        ****     {
 1514              		.loc 1 559 0 is_stmt 0 discriminator 1
 1515 00f0 FB6D     		ldr	r3, [r7, #92]
 1516 00f2 092B     		cmp	r3, #9
 1517 00f4 8DDD     		ble	.L73
 1518              	.LBE3:
 1519              	.LBB5:
 567:main.c        ****     }
 568:main.c        ****     //for (int i = 0; i < NUM_STRINGS; i++)
 569:main.c        ****     //{
 570:main.c        ****         //openStringFrequencies[i] = mtof(openStringMidinotes[i]);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 38


 571:main.c        ****         //stringOctave[i] = 1.0f;
 572:main.c        ****    // }
 573:main.c        ****     for (int i = 0; i < 11; i++)
 1520              		.loc 1 573 0 is_stmt 1
 1521 00f6 0023     		movs	r3, #0
 1522 00f8 BB65     		str	r3, [r7, #88]
 1523 00fa A1E0     		b	.L74
 1524              	.L77:
 1525              	.LBB6:
 574:main.c        **** 	{
 575:main.c        **** 		int pedalStartLoc = i*48;
 1526              		.loc 1 575 0
 1527 00fc BA6D     		ldr	r2, [r7, #88]
 1528 00fe 1346     		mov	r3, r2
 1529 0100 5B00     		lsls	r3, r3, #1
 1530 0102 1344     		add	r3, r3, r2
 1531 0104 1B01     		lsls	r3, r3, #4
 1532 0106 FB62     		str	r3, [r7, #44]
 1533              	.LBB7:
 576:main.c        ****         //for (int j = 0; j < NUM_STRINGS; j++)
 577:main.c        **** 		//{
 578:main.c        **** 			//pedals[i][j] = pow(2.0, (pedalsInSemitones[currentNeck][i][j] / 1200.0));
 579:main.c        **** 		//}
 580:main.c        ****         for (int j = 0; j < NUM_STRINGS; j++)
 1534              		.loc 1 580 0
 1535 0108 0023     		movs	r3, #0
 1536 010a 7B65     		str	r3, [r7, #84]
 1537 010c 91E0     		b	.L75
 1538              	.L169:
 1539 010e 00BF     		.align	2
 1540              	.L168:
 1541 0110 00000000 		.word	pedals_high
 1542 0114 00000000 		.word	pedals_low
 1543 0118 CDCCCC3D 		.word	1036831949
 1544 011c 00F07F45 		.word	1166012416
 1545 0120 00000000 		.word	pedalRatios
 1546              	.L76:
 1547              	.LBB8:
 581:main.c        **** 		{
 582:main.c        **** 
 583:main.c        ****             int stringStartLoc = j*4;
 1548              		.loc 1 583 0 discriminator 3
 1549 0124 7B6D     		ldr	r3, [r7, #84]
 1550 0126 9B00     		lsls	r3, r3, #2
 1551 0128 BB62     		str	r3, [r7, #40]
 584:main.c        **** 
 585:main.c        ****             union breakFloat myTemp;
 586:main.c        ****             myTemp.b[0] = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc);
 1552              		.loc 1 586 0 discriminator 3
 1553 012a BB6A     		ldr	r3, [r7, #40]
 1554 012c 9AB2     		uxth	r2, r3
 1555 012e FB6A     		ldr	r3, [r7, #44]
 1556 0130 9BB2     		uxth	r3, r3
 1557 0132 1344     		add	r3, r3, r2
 1558 0134 9BB2     		uxth	r3, r3
 1559 0136 1846     		mov	r0, r3
 1560 0138 FFF7FEFF 		bl	EEPROM_ReadByte
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 39


 1561 013c 0346     		mov	r3, r0
 1562 013e 3B72     		strb	r3, [r7, #8]
 587:main.c        ****             myTemp.b[1] = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc +
 1563              		.loc 1 587 0 discriminator 3
 1564 0140 BB6A     		ldr	r3, [r7, #40]
 1565 0142 9AB2     		uxth	r2, r3
 1566 0144 FB6A     		ldr	r3, [r7, #44]
 1567 0146 9BB2     		uxth	r3, r3
 1568 0148 1344     		add	r3, r3, r2
 1569 014a 9BB2     		uxth	r3, r3
 1570 014c 0133     		adds	r3, r3, #1
 1571 014e 9BB2     		uxth	r3, r3
 1572 0150 1846     		mov	r0, r3
 1573 0152 FFF7FEFF 		bl	EEPROM_ReadByte
 1574 0156 0346     		mov	r3, r0
 1575 0158 7B72     		strb	r3, [r7, #9]
 588:main.c        ****             myTemp.b[2] = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc +
 1576              		.loc 1 588 0 discriminator 3
 1577 015a BB6A     		ldr	r3, [r7, #40]
 1578 015c 9AB2     		uxth	r2, r3
 1579 015e FB6A     		ldr	r3, [r7, #44]
 1580 0160 9BB2     		uxth	r3, r3
 1581 0162 1344     		add	r3, r3, r2
 1582 0164 9BB2     		uxth	r3, r3
 1583 0166 0233     		adds	r3, r3, #2
 1584 0168 9BB2     		uxth	r3, r3
 1585 016a 1846     		mov	r0, r3
 1586 016c FFF7FEFF 		bl	EEPROM_ReadByte
 1587 0170 0346     		mov	r3, r0
 1588 0172 BB72     		strb	r3, [r7, #10]
 589:main.c        ****             myTemp.b[3] = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc +
 1589              		.loc 1 589 0 discriminator 3
 1590 0174 BB6A     		ldr	r3, [r7, #40]
 1591 0176 9AB2     		uxth	r2, r3
 1592 0178 FB6A     		ldr	r3, [r7, #44]
 1593 017a 9BB2     		uxth	r3, r3
 1594 017c 1344     		add	r3, r3, r2
 1595 017e 9BB2     		uxth	r3, r3
 1596 0180 0333     		adds	r3, r3, #3
 1597 0182 9BB2     		uxth	r3, r3
 1598 0184 1846     		mov	r0, r3
 1599 0186 FFF7FEFF 		bl	EEPROM_ReadByte
 1600 018a 0346     		mov	r3, r0
 1601 018c FB72     		strb	r3, [r7, #11]
 590:main.c        ****             copedent[0][i][j] = myTemp.f;
 1602              		.loc 1 590 0 discriminator 3
 1603 018e B968     		ldr	r1, [r7, #8]	@ float
 1604 0190 B948     		ldr	r0, .L170
 1605 0192 BA6D     		ldr	r2, [r7, #88]
 1606 0194 1346     		mov	r3, r2
 1607 0196 5B00     		lsls	r3, r3, #1
 1608 0198 1344     		add	r3, r3, r2
 1609 019a 9B00     		lsls	r3, r3, #2
 1610 019c 7A6D     		ldr	r2, [r7, #84]
 1611 019e 1344     		add	r3, r3, r2
 1612 01a0 40F82310 		str	r1, [r0, r3, lsl #2]	@ float
 591:main.c        ****             
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 40


 592:main.c        ****             myTemp.b[0] = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc +
 1613              		.loc 1 592 0 discriminator 3
 1614 01a4 BB6A     		ldr	r3, [r7, #40]
 1615 01a6 9AB2     		uxth	r2, r3
 1616 01a8 FB6A     		ldr	r3, [r7, #44]
 1617 01aa 9BB2     		uxth	r3, r3
 1618 01ac 1344     		add	r3, r3, r2
 1619 01ae 9BB2     		uxth	r3, r3
 1620 01b0 03F50473 		add	r3, r3, #528
 1621 01b4 9BB2     		uxth	r3, r3
 1622 01b6 1846     		mov	r0, r3
 1623 01b8 FFF7FEFF 		bl	EEPROM_ReadByte
 1624 01bc 0346     		mov	r3, r0
 1625 01be 3B72     		strb	r3, [r7, #8]
 593:main.c        ****             myTemp.b[1] = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc +
 1626              		.loc 1 593 0 discriminator 3
 1627 01c0 BB6A     		ldr	r3, [r7, #40]
 1628 01c2 9AB2     		uxth	r2, r3
 1629 01c4 FB6A     		ldr	r3, [r7, #44]
 1630 01c6 9BB2     		uxth	r3, r3
 1631 01c8 1344     		add	r3, r3, r2
 1632 01ca 9BB2     		uxth	r3, r3
 1633 01cc 03F21123 		addw	r3, r3, #529
 1634 01d0 9BB2     		uxth	r3, r3
 1635 01d2 1846     		mov	r0, r3
 1636 01d4 FFF7FEFF 		bl	EEPROM_ReadByte
 1637 01d8 0346     		mov	r3, r0
 1638 01da 7B72     		strb	r3, [r7, #9]
 594:main.c        ****             myTemp.b[2] = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc +
 1639              		.loc 1 594 0 discriminator 3
 1640 01dc BB6A     		ldr	r3, [r7, #40]
 1641 01de 9AB2     		uxth	r2, r3
 1642 01e0 FB6A     		ldr	r3, [r7, #44]
 1643 01e2 9BB2     		uxth	r3, r3
 1644 01e4 1344     		add	r3, r3, r2
 1645 01e6 9BB2     		uxth	r3, r3
 1646 01e8 03F21223 		addw	r3, r3, #530
 1647 01ec 9BB2     		uxth	r3, r3
 1648 01ee 1846     		mov	r0, r3
 1649 01f0 FFF7FEFF 		bl	EEPROM_ReadByte
 1650 01f4 0346     		mov	r3, r0
 1651 01f6 BB72     		strb	r3, [r7, #10]
 595:main.c        ****             myTemp.b[3] = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc +
 1652              		.loc 1 595 0 discriminator 3
 1653 01f8 BB6A     		ldr	r3, [r7, #40]
 1654 01fa 9AB2     		uxth	r2, r3
 1655 01fc FB6A     		ldr	r3, [r7, #44]
 1656 01fe 9BB2     		uxth	r3, r3
 1657 0200 1344     		add	r3, r3, r2
 1658 0202 9BB2     		uxth	r3, r3
 1659 0204 03F21323 		addw	r3, r3, #531
 1660 0208 9BB2     		uxth	r3, r3
 1661 020a 1846     		mov	r0, r3
 1662 020c FFF7FEFF 		bl	EEPROM_ReadByte
 1663 0210 0346     		mov	r3, r0
 1664 0212 FB72     		strb	r3, [r7, #11]
 596:main.c        ****             copedent[1][i][j] = myTemp.f;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 41


 1665              		.loc 1 596 0 discriminator 3
 1666 0214 B968     		ldr	r1, [r7, #8]	@ float
 1667 0216 9848     		ldr	r0, .L170
 1668 0218 BA6D     		ldr	r2, [r7, #88]
 1669 021a 1346     		mov	r3, r2
 1670 021c 5B00     		lsls	r3, r3, #1
 1671 021e 1344     		add	r3, r3, r2
 1672 0220 9B00     		lsls	r3, r3, #2
 1673 0222 7A6D     		ldr	r2, [r7, #84]
 1674 0224 1344     		add	r3, r3, r2
 1675 0226 8433     		adds	r3, r3, #132
 1676 0228 40F82310 		str	r1, [r0, r3, lsl #2]	@ float
 1677              	.LBE8:
 580:main.c        **** 		{
 1678              		.loc 1 580 0 discriminator 3
 1679 022c 7B6D     		ldr	r3, [r7, #84]
 1680 022e 0133     		adds	r3, r3, #1
 1681 0230 7B65     		str	r3, [r7, #84]
 1682              	.L75:
 580:main.c        **** 		{
 1683              		.loc 1 580 0 is_stmt 0 discriminator 1
 1684 0232 7B6D     		ldr	r3, [r7, #84]
 1685 0234 0B2B     		cmp	r3, #11
 1686 0236 7FF775AF 		ble	.L76
 1687              	.LBE7:
 1688              	.LBE6:
 573:main.c        **** 	{
 1689              		.loc 1 573 0 is_stmt 1 discriminator 2
 1690 023a BB6D     		ldr	r3, [r7, #88]
 1691 023c 0133     		adds	r3, r3, #1
 1692 023e BB65     		str	r3, [r7, #88]
 1693              	.L74:
 573:main.c        **** 	{
 1694              		.loc 1 573 0 is_stmt 0 discriminator 1
 1695 0240 BB6D     		ldr	r3, [r7, #88]
 1696 0242 0A2B     		cmp	r3, #10
 1697 0244 7FF75AAF 		ble	.L77
 1698              	.LBE5:
 597:main.c        ****         }
 598:main.c        **** 	}
 599:main.c        **** 
 600:main.c        ****     
 601:main.c        ****     QuadDec_1_Start();
 1699              		.loc 1 601 0 is_stmt 1
 1700 0248 FFF7FEFF 		bl	QuadDec_1_Start
 602:main.c        ****     LED_amber1_Write(0);
 1701              		.loc 1 602 0
 1702 024c 0020     		movs	r0, #0
 1703 024e FFF7FEFF 		bl	LED_amber1_Write
 603:main.c        ****     LED_amber2_Write(1);
 1704              		.loc 1 603 0
 1705 0252 0120     		movs	r0, #1
 1706 0254 FFF7FEFF 		bl	LED_amber2_Write
 604:main.c        ****     LED_amber3_Write(0);
 1707              		.loc 1 604 0
 1708 0258 0020     		movs	r0, #0
 1709 025a FFF7FEFF 		bl	LED_amber3_Write
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 42


 605:main.c        ****     LED_amber4_Write(0);
 1710              		.loc 1 605 0
 1711 025e 0020     		movs	r0, #0
 1712 0260 FFF7FEFF 		bl	LED_amber4_Write
 606:main.c        ****     //CyDmaChEnable(rxChannel, STORE_TD_CFG_ONCMPLT);
 607:main.c        ****     
 608:main.c        **** /*
 609:main.c        ****     while(1)
 610:main.c        ****     {
 611:main.c        ****         if (!oct1_Read())
 612:main.c        ****         {
 613:main.c        ****             LED_amber1_Write(1);
 614:main.c        ****             LED_amber2_Write(0);
 615:main.c        ****             LED_amber3_Write(0);
 616:main.c        ****             LED_amber4_Write(0);
 617:main.c        ****         }
 618:main.c        ****         if (!oct2_Read())
 619:main.c        ****         {
 620:main.c        ****             LED_amber1_Write(0);
 621:main.c        ****             LED_amber2_Write(1);
 622:main.c        ****             LED_amber3_Write(0);
 623:main.c        ****             LED_amber4_Write(0);
 624:main.c        ****         }
 625:main.c        ****         if (!oct3_Read())
 626:main.c        ****         {
 627:main.c        ****             LED_amber1_Write(0);
 628:main.c        ****             LED_amber2_Write(0);
 629:main.c        ****             LED_amber3_Write(1);
 630:main.c        ****             LED_amber4_Write(0);
 631:main.c        ****         }
 632:main.c        ****         if (!oct4_Read())
 633:main.c        ****         {
 634:main.c        ****             LED_amber1_Write(0);
 635:main.c        ****             LED_amber2_Write(0);
 636:main.c        ****             LED_amber3_Write(0);
 637:main.c        ****             LED_amber4_Write(1);
 638:main.c        ****         }
 639:main.c        **** 
 640:main.c        **** 
 641:main.c        ****     }
 642:main.c        ****     */
 643:main.c        ****     SPIM_1_Start();
 1713              		.loc 1 643 0
 1714 0264 FFF7FEFF 		bl	SPIM_1_Start
 644:main.c        ****  
 645:main.c        **** 
 646:main.c        **** 
 647:main.c        ****     //CyDelay(150);
 648:main.c        ****     eepromReturnValue = Em_EEPROM_Init((uint32_t)Em_EEPROM_em_EepromStorage);
 1715              		.loc 1 648 0
 1716 0268 844B     		ldr	r3, .L170+4
 1717 026a 1846     		mov	r0, r3
 1718 026c FFF7FEFF 		bl	Em_EEPROM_Init
 1719 0270 0346     		mov	r3, r0
 1720 0272 1A46     		mov	r2, r3
 1721 0274 824B     		ldr	r3, .L170+8
 1722 0276 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 43


 649:main.c        ****     if(eepromReturnValue != CY_EM_EEPROM_SUCCESS)
 650:main.c        ****     {
 651:main.c        ****        // HandleError();
 652:main.c        ****     }
 653:main.c        ****     uint8_t myArrayCounter = 0;
 1723              		.loc 1 653 0
 1724 0278 0023     		movs	r3, #0
 1725 027a 87F82730 		strb	r3, [r7, #39]
 654:main.c        ****     I2C_1_Start();    
 1726              		.loc 1 654 0
 1727 027e FFF7FEFF 		bl	I2C_1_Start
 655:main.c        ****     USB_SetPowerStatus(USB_DEVICE_STATUS_SELF_POWERED);
 1728              		.loc 1 655 0
 1729 0282 0120     		movs	r0, #1
 1730 0284 FFF7FEFF 		bl	USB_SetPowerStatus
 656:main.c        ****     my_Vbus_ISR_StartEx(Vbus_function);
 1731              		.loc 1 656 0
 1732 0288 7E48     		ldr	r0, .L170+12
 1733 028a FFF7FEFF 		bl	my_Vbus_ISR_StartEx
 657:main.c        ****     ADC_SAR_Seq_1_Start();
 1734              		.loc 1 657 0
 1735 028e FFF7FEFF 		bl	ADC_SAR_Seq_1_Start
 658:main.c        ****     ADC_SAR_Seq_1_StartConvert();
 1736              		.loc 1 658 0
 1737 0292 FFF7FEFF 		bl	ADC_SAR_Seq_1_StartConvert
 659:main.c        ****     if (!USB_VBusPresent())
 1738              		.loc 1 659 0
 1739 0296 FFF7FEFF 		bl	USB_VBusPresent
 1740 029a 0346     		mov	r3, r0
 1741 029c 002B     		cmp	r3, #0
 1742 029e 01D1     		bne	.L78
 660:main.c        ****     {
 661:main.c        ****         restartSystemCheck();
 1743              		.loc 1 661 0
 1744 02a0 FFF7FEFF 		bl	restartSystemCheck
 1745              	.L78:
 662:main.c        ****     }
 663:main.c        **** 
 664:main.c        **** 
 665:main.c        **** 
 666:main.c        ****     CyDelay(100);
 1746              		.loc 1 666 0
 1747 02a4 6420     		movs	r0, #100
 1748 02a6 FFF7FEFF 		bl	CyDelay
 667:main.c        ****     I2Cbuff1[0] = 1<<6;
 1749              		.loc 1 667 0
 1750 02aa 774B     		ldr	r3, .L170+16
 1751 02ac 4022     		movs	r2, #64
 1752 02ae 1A70     		strb	r2, [r3]
 668:main.c        ****     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 1753              		.loc 1 668 0
 1754 02b0 0022     		movs	r2, #0
 1755 02b2 0121     		movs	r1, #1
 1756 02b4 7020     		movs	r0, #112
 1757 02b6 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 1758 02ba 0346     		mov	r3, r0
 1759 02bc 1A46     		mov	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 44


 1760 02be 734B     		ldr	r3, .L170+20
 1761 02c0 1A60     		str	r2, [r3]
 669:main.c        **** 
 670:main.c        ****     OLED_init();
 1762              		.loc 1 670 0
 1763 02c2 FFF7FEFF 		bl	OLED_init
 671:main.c        **** #if 0
 672:main.c        ****     while(1)
 673:main.c        ****     {
 674:main.c        ****         for (int i=  0; i < 4; i++)
 675:main.c        ****         {
 676:main.c        ****             knobs[i] = 127 - (ADC_SAR_Seq_1_GetResult16(i)/32);
 677:main.c        ****             if (knobs[i] != prevKnobs[i])
 678:main.c        ****             {
 679:main.c        ****                // sendMIDIControlChange(80+i, knobs[i]);
 680:main.c        ****             }
 681:main.c        ****             prevKnobs[i] = knobs[i];
 682:main.c        ****         }
 683:main.c        ****         
 684:main.c        **** 
 685:main.c        ****         I2Cbuff1[0] = 1<<0;
 686:main.c        ****         uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 687:main.c        **** 
 688:main.c        ****         //CyDelayUs(100);
 689:main.c        ****         I2Cbuff1[0] = 0x0E;
 690:main.c        ****         status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 691:main.c        ****         status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 692:main.c        ****        // CyDelayUs(100);
 693:main.c        ****         angle[0] = I2Cbuff2[0] << 8;
 694:main.c        ****         angle[0] +=  I2Cbuff2[1];
 695:main.c        ****         
 696:main.c        ****     }
 697:main.c        ****     #endif
 698:main.c        ****     //OLEDclear();
 699:main.c        ****     /*
 700:main.c        ****     while(1)
 701:main.c        ****     {
 702:main.c        ****         OLEDwriteInt(bar[1], 5, 0,FirstLine);
 703:main.c        ****         OLED_draw();
 704:main.c        ****         CyDelay(1);
 705:main.c        ****         
 706:main.c        ****         OLEDwriteInt(oct1_Read(), 1, 0,SecondLine);
 707:main.c        ****         OLEDwriteInt(oct2_Read(), 1, 10,SecondLine);
 708:main.c        ****         OLEDwriteInt(oct3_Read(), 1, 20,SecondLine);
 709:main.c        ****         OLEDwriteInt(oct4_Read(), 1, 30,SecondLine);
 710:main.c        ****         for (int i=  0; i < 4; i++)
 711:main.c        ****         {
 712:main.c        ****             OLEDwriteInt( ADC_SAR_Seq_1_GetResult16(i)/8, 3, i*30,2);
 713:main.c        ****         }
 714:main.c        **** 
 715:main.c        ****     }
 716:main.c        ****     */
 717:main.c        **** #if 0
 718:main.c        ****     I2Cbuff1[0] = 1<<mux_states[10][0];
 719:main.c        ****     uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 720:main.c        **** 
 721:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 45


 722:main.c        ****     I2Cbuff1[0] = 1<<mux_states[10][1];
 723:main.c        ****     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 724:main.c        **** 
 725:main.c        ****     //address 0x48
 726:main.c        ****     I2Cbuff1[0] = 0x1;
 727:main.c        ****     I2Cbuff1[1] = 0b11000000;
 728:main.c        ****     I2Cbuff1[2] = 0b10000011;
 729:main.c        **** 
 730:main.c        ****     status = I2C_MasterWriteBlocking(0x48, 3, I2C_1_MODE_COMPLETE_XFER);
 731:main.c        ****     #endif
 732:main.c        ****     
 733:main.c        ****     SPIS_1_Start();  
 1764              		.loc 1 733 0
 1765 02c6 FFF7FEFF 		bl	SPIS_1_Start
 734:main.c        ****     SPIM_1_Start();  
 1766              		.loc 1 734 0
 1767 02ca FFF7FEFF 		bl	SPIM_1_Start
 735:main.c        ****     SPIS_2_Start(); 
 1768              		.loc 1 735 0
 1769 02ce FFF7FEFF 		bl	SPIS_2_Start
 736:main.c        ****     DmaRxConfiguration();
 1770              		.loc 1 736 0
 1771 02d2 FFF7FEFF 		bl	DmaRxConfiguration
 737:main.c        ****     //isr_1_StartEx(isr_1_function);
 738:main.c        ****     //isr_SPI1_DMA_StartEx(spis_1_function);
 739:main.c        ****     isr_SPI1_ss_StartEx(spis_1_ss);
 1772              		.loc 1 739 0
 1773 02d6 6E48     		ldr	r0, .L170+24
 1774 02d8 FFF7FEFF 		bl	isr_SPI1_ss_StartEx
 740:main.c        ****     //isr_SPI2_DMA_StartEx(spis_2_function);
 741:main.c        ****     isr_SPI2_ss_StartEx(spis_2_ss);
 1775              		.loc 1 741 0
 1776 02dc 6D48     		ldr	r0, .L170+28
 1777 02de FFF7FEFF 		bl	isr_SPI2_ss_StartEx
 742:main.c        ****     
 743:main.c        ****     myArray[72] = 254;
 1778              		.loc 1 743 0
 1779 02e2 6D4B     		ldr	r3, .L170+32
 1780 02e4 FE22     		movs	r2, #254
 1781 02e6 83F84820 		strb	r2, [r3, #72]
 744:main.c        ****     myArray[73] = 253;
 1782              		.loc 1 744 0
 1783 02ea 6B4B     		ldr	r3, .L170+32
 1784 02ec FD22     		movs	r2, #253
 1785 02ee 83F84920 		strb	r2, [r3, #73]
 745:main.c        ****     //temporarily start on the volume pedal for testing!
 746:main.c        ****     //TODO: fix this
 747:main.c        ****     main_counter = 0;
 1786              		.loc 1 747 0
 1787 02f2 6A4B     		ldr	r3, .L170+36
 1788 02f4 0022     		movs	r2, #0
 1789 02f6 1A70     		strb	r2, [r3]
 1790              	.L160:
 748:main.c        ****     //CyDelay(1000);
 749:main.c        ****     //CyDelay(1);
 750:main.c        **** 	for(;;)
 751:main.c        ****     {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 46


 752:main.c        ****         //if (newDataFlag)
 753:main.c        ****         //{
 754:main.c        ****         //}
 755:main.c        ****             /*
 756:main.c        ****             for (int i = 0; i < 5; i++)
 757:main.c        ****             {
 758:main.c        ****                 I2C_1_MasterSendStart(0x70, 0); 
 759:main.c        ****                 I2C_1_MasterWriteByte(1<<i);
 760:main.c        ****                 I2C_1_MasterSendStop(); 
 761:main.c        **** 
 762:main.c        **** 
 763:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 764:main.c        ****                 I2C_1_MasterWriteByte(0x0C);
 765:main.c        ****                 //I2C_1_MasterSendStop();
 766:main.c        ****                 I2C_1_MasterSendRestart(0x36, 1); 
 767:main.c        ****                 rawAngle = I2C_1_MasterReadByte(1) << 8;
 768:main.c        ****                 //I2C_1_MasterSendRestart(0x36, 1);
 769:main.c        ****                 rawAngle +=  I2C_1_MasterReadByte(0);
 770:main.c        ****                  I2C_1_MasterSendStop(); 
 771:main.c        ****                 
 772:main.c        ****                 CyDelay(1);
 773:main.c        **** 
 774:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 775:main.c        ****                 I2C_1_MasterWriteByte(0x01);
 776:main.c        ****                 I2C_1_MasterWriteByte(rawAngle >> 8);
 777:main.c        ****                 I2C_1_MasterWriteByte(rawAngle & 0xff);
 778:main.c        ****                 I2C_1_MasterWriteByte((rawAngle+500) >> 8);
 779:main.c        ****                 I2C_1_MasterWriteByte((rawAngle+500) & 0xff);
 780:main.c        ****                 I2C_1_MasterSendStop(); 
 781:main.c        ****                 
 782:main.c        ****                 CyDelay(2);
 783:main.c        **** 
 784:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 785:main.c        ****                 I2C_1_MasterWriteByte(0xff);
 786:main.c        ****                I2C_1_MasterWriteByte(0x80);
 787:main.c        ****                 I2C_1_MasterSendStop(); 
 788:main.c        ****                CyDelay(2);
 789:main.c        ****             }
 790:main.c        ****         */
 791:main.c        ****         //set main i2c mux
 792:main.c        ****     
 793:main.c        ****         
 794:main.c        ****         /*
 795:main.c        ****         for (int i = 0; i < 4; i++)
 796:main.c        ****         {
 797:main.c        ****             I2C_1_MasterSendStart(0x71, 0); 
 798:main.c        ****             I2C_1_MasterWriteByte(1<<(i+2));
 799:main.c        ****             I2C_1_MasterSendStop(); 
 800:main.c        **** 
 801:main.c        **** 
 802:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 803:main.c        ****             I2C_1_MasterWriteByte(0x0C);
 804:main.c        ****             //I2C_1_MasterSendStop();
 805:main.c        ****             I2C_1_MasterSendRestart(0x36, 1); 
 806:main.c        ****             rawAngle = I2C_1_MasterReadByte(1) << 8;
 807:main.c        ****             //I2C_1_MasterSendRestart(0x36, 1);
 808:main.c        ****             rawAngle +=  I2C_1_MasterReadByte(0);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 47


 809:main.c        ****              I2C_1_MasterSendStop(); 
 810:main.c        ****             
 811:main.c        ****             CyDelay(1);
 812:main.c        **** 
 813:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 814:main.c        ****             I2C_1_MasterWriteByte(0x01);
 815:main.c        ****             I2C_1_MasterWriteByte(rawAngle >> 8);
 816:main.c        ****             I2C_1_MasterWriteByte(rawAngle & 0xff);
 817:main.c        ****             I2C_1_MasterWriteByte((rawAngle+700) >> 8);
 818:main.c        ****             I2C_1_MasterWriteByte((rawAngle+700) & 0xff);
 819:main.c        ****             I2C_1_MasterSendStop(); 
 820:main.c        ****             
 821:main.c        ****             CyDelay(2);
 822:main.c        **** 
 823:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 824:main.c        ****             I2C_1_MasterWriteByte(0xff);
 825:main.c        ****             I2C_1_MasterWriteByte(0x80);
 826:main.c        ****             I2C_1_MasterSendStop(); 
 827:main.c        ****            CyDelay(2);
 828:main.c        ****         }
 829:main.c        ****             */
 830:main.c        ****         /*    
 831:main.c        ****         if (main_counter == 6)
 832:main.c        ****         {
 833:main.c        ****             main_counter = 8;
 834:main.c        ****         }
 835:main.c        ****         */    
 836:main.c        **** 
 837:main.c        ****             
 838:main.c        ****         if (mux_states[main_counter][0] != last_mux)
 1791              		.loc 1 838 0
 1792 02f8 684B     		ldr	r3, .L170+36
 1793 02fa 1B78     		ldrb	r3, [r3]
 1794 02fc DBB2     		uxtb	r3, r3
 1795 02fe 1A46     		mov	r2, r3
 1796 0300 674B     		ldr	r3, .L170+40
 1797 0302 13F81220 		ldrb	r2, [r3, r2, lsl #1]	@ zero_extendqisi2
 1798 0306 674B     		ldr	r3, .L170+44
 1799 0308 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1800 030a 9A42     		cmp	r2, r3
 1801 030c 14D0     		beq	.L79
 1802              	.LBB9:
 839:main.c        ****         {
 840:main.c        ****             I2Cbuff1[0] = 1<<mux_states[main_counter][0];
 1803              		.loc 1 840 0
 1804 030e 634B     		ldr	r3, .L170+36
 1805 0310 1B78     		ldrb	r3, [r3]
 1806 0312 DBB2     		uxtb	r3, r3
 1807 0314 1A46     		mov	r2, r3
 1808 0316 624B     		ldr	r3, .L170+40
 1809 0318 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 1810 031c 1A46     		mov	r2, r3
 1811 031e 0123     		movs	r3, #1
 1812 0320 9340     		lsls	r3, r3, r2
 1813 0322 DAB2     		uxtb	r2, r3
 1814 0324 584B     		ldr	r3, .L170+16
 1815 0326 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 48


 841:main.c        ****             uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 1816              		.loc 1 841 0
 1817 0328 0022     		movs	r2, #0
 1818 032a 0121     		movs	r1, #1
 1819 032c 7020     		movs	r0, #112
 1820 032e FFF7FEFF 		bl	I2C_MasterWriteBlocking
 1821 0332 0346     		mov	r3, r0
 1822 0334 87F82630 		strb	r3, [r7, #38]
 1823              	.L79:
 1824              	.LBE9:
 842:main.c        ****         }
 843:main.c        ****         last_mux = mux_states[main_counter][0];
 1825              		.loc 1 843 0
 1826 0338 584B     		ldr	r3, .L170+36
 1827 033a 1B78     		ldrb	r3, [r3]
 1828 033c DBB2     		uxtb	r3, r3
 1829 033e 1A46     		mov	r2, r3
 1830 0340 574B     		ldr	r3, .L170+40
 1831 0342 13F81220 		ldrb	r2, [r3, r2, lsl #1]	@ zero_extendqisi2
 1832 0346 574B     		ldr	r3, .L170+44
 1833 0348 1A70     		strb	r2, [r3]
 844:main.c        ****         
 845:main.c        ****         CyDelayUs(10);
 1834              		.loc 1 845 0
 1835 034a 0A20     		movs	r0, #10
 1836 034c FFF7FEFF 		bl	CyDelayUs
 846:main.c        ****         if (mux_states[main_counter][0] == 5)
 1837              		.loc 1 846 0
 1838 0350 524B     		ldr	r3, .L170+36
 1839 0352 1B78     		ldrb	r3, [r3]
 1840 0354 DBB2     		uxtb	r3, r3
 1841 0356 1A46     		mov	r2, r3
 1842 0358 514B     		ldr	r3, .L170+40
 1843 035a 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 1844 035e 052B     		cmp	r3, #5
 1845 0360 15D1     		bne	.L80
 847:main.c        ****         {
 848:main.c        ****             I2Cbuff1[0] = 1<<mux_states[main_counter][1];
 1846              		.loc 1 848 0
 1847 0362 4E4B     		ldr	r3, .L170+36
 1848 0364 1B78     		ldrb	r3, [r3]
 1849 0366 DBB2     		uxtb	r3, r3
 1850 0368 4D4A     		ldr	r2, .L170+40
 1851 036a 5B00     		lsls	r3, r3, #1
 1852 036c 1344     		add	r3, r3, r2
 1853 036e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1854 0370 1A46     		mov	r2, r3
 1855 0372 0123     		movs	r3, #1
 1856 0374 9340     		lsls	r3, r3, r2
 1857 0376 DAB2     		uxtb	r2, r3
 1858 0378 434B     		ldr	r3, .L170+16
 1859 037a 1A70     		strb	r2, [r3]
 849:main.c        ****             status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 1860              		.loc 1 849 0
 1861 037c 0022     		movs	r2, #0
 1862 037e 0121     		movs	r1, #1
 1863 0380 7120     		movs	r0, #113
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 49


 1864 0382 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 1865 0386 0346     		mov	r3, r0
 1866 0388 1A46     		mov	r2, r3
 1867 038a 404B     		ldr	r3, .L170+20
 1868 038c 1A60     		str	r2, [r3]
 1869              	.L80:
 850:main.c        ****         }
 851:main.c        **** 
 852:main.c        ****         CyDelayUs(10);
 1870              		.loc 1 852 0
 1871 038e 0A20     		movs	r0, #10
 1872 0390 FFF7FEFF 		bl	CyDelayUs
 853:main.c        ****         //if it's a hall sensor
 854:main.c        ****         if (main_counter < 10)
 1873              		.loc 1 854 0
 1874 0394 414B     		ldr	r3, .L170+36
 1875 0396 1B78     		ldrb	r3, [r3]
 1876 0398 DBB2     		uxtb	r3, r3
 1877 039a 092B     		cmp	r3, #9
 1878 039c 33D8     		bhi	.L81
 855:main.c        ****         {
 856:main.c        ****             //CyDelayUs(100);
 857:main.c        ****             I2Cbuff1[0] = 0x0E;
 1879              		.loc 1 857 0
 1880 039e 3A4B     		ldr	r3, .L170+16
 1881 03a0 0E22     		movs	r2, #14
 1882 03a2 1A70     		strb	r2, [r3]
 858:main.c        ****             status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 1883              		.loc 1 858 0
 1884 03a4 0222     		movs	r2, #2
 1885 03a6 0121     		movs	r1, #1
 1886 03a8 3620     		movs	r0, #54
 1887 03aa FFF7FEFF 		bl	I2C_MasterWriteBlocking
 1888 03ae 0346     		mov	r3, r0
 1889 03b0 1A46     		mov	r2, r3
 1890 03b2 364B     		ldr	r3, .L170+20
 1891 03b4 1A60     		str	r2, [r3]
 859:main.c        ****             status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 1892              		.loc 1 859 0
 1893 03b6 0122     		movs	r2, #1
 1894 03b8 0221     		movs	r1, #2
 1895 03ba 3620     		movs	r0, #54
 1896 03bc FFF7FEFF 		bl	I2C_MasterReadBlocking
 1897 03c0 0346     		mov	r3, r0
 1898 03c2 1A46     		mov	r2, r3
 1899 03c4 314B     		ldr	r3, .L170+20
 1900 03c6 1A60     		str	r2, [r3]
 860:main.c        ****            // CyDelayUs(100);
 861:main.c        ****             angle[main_counter] = I2Cbuff2[0] << 8;
 1901              		.loc 1 861 0
 1902 03c8 344B     		ldr	r3, .L170+36
 1903 03ca 1B78     		ldrb	r3, [r3]
 1904 03cc DBB2     		uxtb	r3, r3
 1905 03ce 1A46     		mov	r2, r3
 1906 03d0 354B     		ldr	r3, .L170+48
 1907 03d2 1B78     		ldrb	r3, [r3]
 1908 03d4 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 50


 1909 03d6 9BB2     		uxth	r3, r3
 1910 03d8 1B02     		lsls	r3, r3, #8
 1911 03da 99B2     		uxth	r1, r3
 1912 03dc 334B     		ldr	r3, .L170+52
 1913 03de 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 862:main.c        ****             angle[main_counter] +=  I2Cbuff2[1];
 1914              		.loc 1 862 0
 1915 03e2 314B     		ldr	r3, .L170+48
 1916 03e4 5B78     		ldrb	r3, [r3, #1]
 1917 03e6 D8B2     		uxtb	r0, r3
 1918 03e8 2C4B     		ldr	r3, .L170+36
 1919 03ea 1B78     		ldrb	r3, [r3]
 1920 03ec DBB2     		uxtb	r3, r3
 1921 03ee 1946     		mov	r1, r3
 1922 03f0 1A46     		mov	r2, r3
 1923 03f2 2E4B     		ldr	r3, .L170+52
 1924 03f4 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 1925 03f8 83B2     		uxth	r3, r0
 1926 03fa 1344     		add	r3, r3, r2
 1927 03fc 9AB2     		uxth	r2, r3
 1928 03fe 2B4B     		ldr	r3, .L170+52
 1929 0400 23F81120 		strh	r2, [r3, r1, lsl #1]	@ movhi
 1930 0404 A9E0     		b	.L82
 1931              	.L81:
 863:main.c        ****         }
 864:main.c        ****         //otherwise it's the ADC for the foot pedal
 865:main.c        ****         else if (main_counter == 10)
 1932              		.loc 1 865 0
 1933 0406 254B     		ldr	r3, .L170+36
 1934 0408 1B78     		ldrb	r3, [r3]
 1935 040a DBB2     		uxtb	r3, r3
 1936 040c 0A2B     		cmp	r3, #10
 1937 040e 1ED1     		bne	.L83
 866:main.c        ****         {
 867:main.c        ****         //0x4D is the 7=-bit version of the MCP3221 address, might need to be shifted over by 1 to 
 868:main.c        ****             I2Cbuff1[0] = 0x0;      
 1938              		.loc 1 868 0
 1939 0410 1D4B     		ldr	r3, .L170+16
 1940 0412 0022     		movs	r2, #0
 1941 0414 1A70     		strb	r2, [r3]
 869:main.c        ****             status = I2C_MasterReadBlocking(0x4f, 2, I2C_1_MODE_COMPLETE_XFER);
 1942              		.loc 1 869 0
 1943 0416 0022     		movs	r2, #0
 1944 0418 0221     		movs	r1, #2
 1945 041a 4F20     		movs	r0, #79
 1946 041c FFF7FEFF 		bl	I2C_MasterReadBlocking
 1947 0420 0346     		mov	r3, r0
 1948 0422 1A46     		mov	r2, r3
 1949 0424 194B     		ldr	r3, .L170+20
 1950 0426 1A60     		str	r2, [r3]
 870:main.c        ****             volumePedal = I2Cbuff2[0] << 8;
 1951              		.loc 1 870 0
 1952 0428 1F4B     		ldr	r3, .L170+48
 1953 042a 1B78     		ldrb	r3, [r3]
 1954 042c DBB2     		uxtb	r3, r3
 1955 042e 9BB2     		uxth	r3, r3
 1956 0430 1B02     		lsls	r3, r3, #8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 51


 1957 0432 9AB2     		uxth	r2, r3
 1958 0434 1E4B     		ldr	r3, .L170+56
 1959 0436 1A80     		strh	r2, [r3]	@ movhi
 871:main.c        ****             volumePedal +=  I2Cbuff2[1];
 1960              		.loc 1 871 0
 1961 0438 1B4B     		ldr	r3, .L170+48
 1962 043a 5B78     		ldrb	r3, [r3, #1]
 1963 043c DBB2     		uxtb	r3, r3
 1964 043e 9AB2     		uxth	r2, r3
 1965 0440 1B4B     		ldr	r3, .L170+56
 1966 0442 1B88     		ldrh	r3, [r3]
 1967 0444 1344     		add	r3, r3, r2
 1968 0446 9AB2     		uxth	r2, r3
 1969 0448 194B     		ldr	r3, .L170+56
 1970 044a 1A80     		strh	r2, [r3]	@ movhi
 1971 044c 85E0     		b	.L82
 1972              	.L83:
 872:main.c        ****         }
 873:main.c        ****         
 874:main.c        ****         else
 875:main.c        ****         { 
 876:main.c        ****             if (OLEDcount == 0)
 1973              		.loc 1 876 0
 1974 044e 194B     		ldr	r3, .L170+60
 1975 0450 1B68     		ldr	r3, [r3]
 1976 0452 002B     		cmp	r3, #0
 1977 0454 03D1     		bne	.L84
 877:main.c        ****             {
 878:main.c        ****                 OLEDclearLine(FirstLine);
 1978              		.loc 1 878 0
 1979 0456 0020     		movs	r0, #0
 1980 0458 FFF7FEFF 		bl	OLEDclearLine
 1981 045c 71E0     		b	.L85
 1982              	.L84:
 879:main.c        ****             }
 880:main.c        ****             else if (OLEDcount == 1)
 1983              		.loc 1 880 0
 1984 045e 154B     		ldr	r3, .L170+60
 1985 0460 1B68     		ldr	r3, [r3]
 1986 0462 012B     		cmp	r3, #1
 1987 0464 2AD1     		bne	.L86
 881:main.c        ****             {
 882:main.c        ****                 OLEDwriteInt(encoderNum, 2, 0, FirstLine);
 1988              		.loc 1 882 0
 1989 0466 144B     		ldr	r3, .L170+64
 1990 0468 1B68     		ldr	r3, [r3]
 1991 046a 1846     		mov	r0, r3
 1992 046c 0023     		movs	r3, #0
 1993 046e 0022     		movs	r2, #0
 1994 0470 0221     		movs	r1, #2
 1995 0472 FFF7FEFF 		bl	OLEDwriteInt
 1996 0476 64E0     		b	.L85
 1997              	.L171:
 1998              		.align	2
 1999              	.L170:
 2000 0478 00000000 		.word	copedent
 2001 047c 00000000 		.word	Em_EEPROM_em_EepromStorage
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 52


 2002 0480 00000000 		.word	eepromReturnValue
 2003 0484 00000000 		.word	Vbus_function
 2004 0488 00000000 		.word	I2Cbuff1
 2005 048c 00000000 		.word	status
 2006 0490 00000000 		.word	spis_1_ss
 2007 0494 00000000 		.word	spis_2_ss
 2008 0498 00000000 		.word	myArray
 2009 049c 00000000 		.word	main_counter
 2010 04a0 00000000 		.word	mux_states
 2011 04a4 00000000 		.word	last_mux
 2012 04a8 00000000 		.word	I2Cbuff2
 2013 04ac 00000000 		.word	angle
 2014 04b0 00000000 		.word	volumePedal
 2015 04b4 00000000 		.word	OLEDcount
 2016 04b8 00000000 		.word	encoderNum
 2017              	.L86:
 883:main.c        **** 		    }
 884:main.c        ****             else if (OLEDcount == 2)
 2018              		.loc 1 884 0
 2019 04bc A14B     		ldr	r3, .L172
 2020 04be 1B68     		ldr	r3, [r3]
 2021 04c0 022B     		cmp	r3, #2
 2022 04c2 08D1     		bne	.L87
 885:main.c        ****             {
 886:main.c        ****                 OLEDwriteString(" ", 1, OLEDgetCursor(), FirstLine);
 2023              		.loc 1 886 0
 2024 04c4 FFF7FEFF 		bl	OLEDgetCursor
 2025 04c8 0246     		mov	r2, r0
 2026 04ca 0023     		movs	r3, #0
 2027 04cc 0121     		movs	r1, #1
 2028 04ce 9E48     		ldr	r0, .L172+4
 2029 04d0 FFF7FEFF 		bl	OLEDwriteString
 2030 04d4 35E0     		b	.L85
 2031              	.L87:
 887:main.c        ****             }
 888:main.c        ****             else if (OLEDcount == 3)
 2032              		.loc 1 888 0
 2033 04d6 9B4B     		ldr	r3, .L172
 2034 04d8 1B68     		ldr	r3, [r3]
 2035 04da 032B     		cmp	r3, #3
 2036 04dc 0ED1     		bne	.L88
 889:main.c        ****             {
 890:main.c        ****                 OLEDwriteInt(encoderVal[encoderNum], 3, OLEDgetCursor(), FirstLine);
 2037              		.loc 1 890 0
 2038 04de 9B4B     		ldr	r3, .L172+8
 2039 04e0 1B68     		ldr	r3, [r3]
 2040 04e2 9B4A     		ldr	r2, .L172+12
 2041 04e4 D35C     		ldrb	r3, [r2, r3]
 2042 04e6 DBB2     		uxtb	r3, r3
 2043 04e8 1C46     		mov	r4, r3
 2044 04ea FFF7FEFF 		bl	OLEDgetCursor
 2045 04ee 0246     		mov	r2, r0
 2046 04f0 0023     		movs	r3, #0
 2047 04f2 0321     		movs	r1, #3
 2048 04f4 2046     		mov	r0, r4
 2049 04f6 FFF7FEFF 		bl	OLEDwriteInt
 2050 04fa 22E0     		b	.L85
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 53


 2051              	.L88:
 891:main.c        ****             }
 892:main.c        ****             else if (OLEDcount == 4)
 2052              		.loc 1 892 0
 2053 04fc 914B     		ldr	r3, .L172
 2054 04fe 1B68     		ldr	r3, [r3]
 2055 0500 042B     		cmp	r3, #4
 2056 0502 08D1     		bne	.L89
 893:main.c        ****             {
 894:main.c        ****                 OLEDwriteString("     ", 5, OLEDgetCursor(), FirstLine);
 2057              		.loc 1 894 0
 2058 0504 FFF7FEFF 		bl	OLEDgetCursor
 2059 0508 0246     		mov	r2, r0
 2060 050a 0023     		movs	r3, #0
 2061 050c 0521     		movs	r1, #5
 2062 050e 9148     		ldr	r0, .L172+16
 2063 0510 FFF7FEFF 		bl	OLEDwriteString
 2064 0514 15E0     		b	.L85
 2065              	.L89:
 895:main.c        ****             }
 896:main.c        ****             else if (OLEDcount == 5)
 2066              		.loc 1 896 0
 2067 0516 8B4B     		ldr	r3, .L172
 2068 0518 1B68     		ldr	r3, [r3]
 2069 051a 052B     		cmp	r3, #5
 2070 051c 0BD1     		bne	.L90
 897:main.c        ****             {
 898:main.c        ****                 OLEDwriteInt(patchNum, 2, OLEDgetCursor(), FirstLine);
 2071              		.loc 1 898 0
 2072 051e 8E4B     		ldr	r3, .L172+20
 2073 0520 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2074 0522 1C46     		mov	r4, r3
 2075 0524 FFF7FEFF 		bl	OLEDgetCursor
 2076 0528 0246     		mov	r2, r0
 2077 052a 0023     		movs	r3, #0
 2078 052c 0221     		movs	r1, #2
 2079 052e 2046     		mov	r0, r4
 2080 0530 FFF7FEFF 		bl	OLEDwriteInt
 2081 0534 05E0     		b	.L85
 2082              	.L90:
 899:main.c        ****             }
 900:main.c        ****             else if (OLEDcount == 6)
 2083              		.loc 1 900 0
 2084 0536 834B     		ldr	r3, .L172
 2085 0538 1B68     		ldr	r3, [r3]
 2086 053a 062B     		cmp	r3, #6
 2087 053c 01D1     		bne	.L85
 901:main.c        ****             {
 902:main.c        ****                 OLED_drawFirstLine();
 2088              		.loc 1 902 0
 2089 053e FFF7FEFF 		bl	OLED_drawFirstLine
 2090              	.L85:
 903:main.c        ****             }
 904:main.c        ****             OLEDcount++;
 2091              		.loc 1 904 0
 2092 0542 804B     		ldr	r3, .L172
 2093 0544 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 54


 2094 0546 0133     		adds	r3, r3, #1
 2095 0548 7E4A     		ldr	r2, .L172
 2096 054a 1360     		str	r3, [r2]
 905:main.c        ****             if (OLEDcount > 6)
 2097              		.loc 1 905 0
 2098 054c 7D4B     		ldr	r3, .L172
 2099 054e 1B68     		ldr	r3, [r3]
 2100 0550 062B     		cmp	r3, #6
 2101 0552 02DD     		ble	.L82
 906:main.c        ****             {
 907:main.c        ****                 OLEDcount = 0;
 2102              		.loc 1 907 0
 2103 0554 7B4B     		ldr	r3, .L172
 2104 0556 0022     		movs	r2, #0
 2105 0558 1A60     		str	r2, [r3]
 2106              	.L82:
 908:main.c        ****             }
 909:main.c        ****         }
 910:main.c        ****         
 911:main.c        ****         /*
 912:main.c        ****         I2Cbuff1[0] = 1<<main_counter;
 913:main.c        ****         uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 914:main.c        **** 
 915:main.c        ****                 for (int i = 0; i < 5; i++)
 916:main.c        ****                 {
 917:main.c        ****                     I2Cbuff1[0] = 1<<i;
 918:main.c        ****                     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 919:main.c        **** 
 920:main.c        ****                     I2Cbuff1[0] = 0x0E;
 921:main.c        ****                     status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 922:main.c        **** 
 923:main.c        ****                     status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 924:main.c        **** 
 925:main.c        **** 
 926:main.c        ****                     angle[i] = I2Cbuff2[0] << 8;
 927:main.c        ****                     angle[i] +=  I2Cbuff2[1];
 928:main.c        ****                 }
 929:main.c        ****             if (main_counter == 0)
 930:main.c        ****             {               
 931:main.c        ****                 I2Cbuff1[0] = 1<<main_counter;
 932:main.c        ****                 uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 933:main.c        **** 
 934:main.c        ****                 for (int i = 0; i < 5; i++)
 935:main.c        ****                 {
 936:main.c        ****                     I2Cbuff1[0] = 1<<i;
 937:main.c        ****                     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 938:main.c        **** 
 939:main.c        ****                     I2Cbuff1[0] = 0x0E;
 940:main.c        ****                     status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 941:main.c        **** 
 942:main.c        ****                     status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 943:main.c        **** 
 944:main.c        **** 
 945:main.c        ****                     angle[i] = I2Cbuff2[0] << 8;
 946:main.c        ****                     angle[i] +=  I2Cbuff2[1];
 947:main.c        ****                 }
 948:main.c        ****             }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 55


 949:main.c        ****             else
 950:main.c        ****             {
 951:main.c        ****                 I2Cbuff1[0] = 1<<(main_counter+1);
 952:main.c        ****                 uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 953:main.c        ****                 I2Cbuff1[0] = 0x0E;
 954:main.c        ****                 status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 955:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 956:main.c        ****                 {
 957:main.c        ****                     I2Cbuff1[0] = 1<<(main_counter+1);
 958:main.c        ****                     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 959:main.c        ****                 }
 960:main.c        ****            
 961:main.c        **** 
 962:main.c        **** 
 963:main.c        ****                 status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 964:main.c        ****                  //I2C_1_MasterReadBuf(0x36, I2Cbuff3, 2, I2C_1_MODE_REPEAT_START);
 965:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 966:main.c        ****                 {
 967:main.c        ****                     I2Cbuff1[0] = 1<<(main_counter+1);
 968:main.c        ****                     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 969:main.c        ****                 }
 970:main.c        ****                 
 971:main.c        ****                 angle[main_counter+4] = I2Cbuff2[0] << 8;
 972:main.c        ****                 angle[main_counter+4] +=  I2Cbuff2[1];
 973:main.c        ****             }    
 974:main.c        ****                 
 975:main.c        **** 
 976:main.c        ****             send_it = 1;
 977:main.c        ****         }
 978:main.c        ****         */
 979:main.c        ****         
 980:main.c        ****         if (main_counter < 10)
 2107              		.loc 1 980 0
 2108 055a 804B     		ldr	r3, .L172+24
 2109 055c 1B78     		ldrb	r3, [r3]
 2110 055e DBB2     		uxtb	r3, r3
 2111 0560 092B     		cmp	r3, #9
 2112 0562 77D8     		bhi	.L91
 2113              	.LBB10:
 981:main.c        ****         {
 982:main.c        ****             
 983:main.c        ****             //do math to make all pedals and levers report between 0 and 4095 scaled
 984:main.c        ****             int16_t tempangle = ((int16_t) angle[main_counter] - (int16_t)pedals_low[main_counter])
 2114              		.loc 1 984 0
 2115 0564 7D4B     		ldr	r3, .L172+24
 2116 0566 1B78     		ldrb	r3, [r3]
 2117 0568 DBB2     		uxtb	r3, r3
 2118 056a 1A46     		mov	r2, r3
 2119 056c 7C4B     		ldr	r3, .L172+28
 2120 056e 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2121 0572 7A4B     		ldr	r3, .L172+24
 2122 0574 1B78     		ldrb	r3, [r3]
 2123 0576 DBB2     		uxtb	r3, r3
 2124 0578 1946     		mov	r1, r3
 2125 057a 7A4B     		ldr	r3, .L172+32
 2126 057c 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 2127 0580 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 56


 2128 0582 9BB2     		uxth	r3, r3
 2129 0584 BB84     		strh	r3, [r7, #36]	@ movhi
 985:main.c        ****             
 986:main.c        ****             if (tempangle > 0)
 2130              		.loc 1 986 0
 2131 0586 B7F92430 		ldrsh	r3, [r7, #36]
 2132 058a 002B     		cmp	r3, #0
 2133 058c 1CDD     		ble	.L92
 987:main.c        ****             {
 988:main.c        ****                 processed_pedals[main_counter] = (float)tempangle * pedalRatios[main_counter];
 2134              		.loc 1 988 0
 2135 058e 734B     		ldr	r3, .L172+24
 2136 0590 1B78     		ldrb	r3, [r3]
 2137 0592 DBB2     		uxtb	r3, r3
 2138 0594 1C46     		mov	r4, r3
 2139 0596 B7F92430 		ldrsh	r3, [r7, #36]
 2140 059a 1846     		mov	r0, r3
 2141 059c FFF7FEFF 		bl	__aeabi_i2f
 2142 05a0 6E4B     		ldr	r3, .L172+24
 2143 05a2 1B78     		ldrb	r3, [r3]
 2144 05a4 DBB2     		uxtb	r3, r3
 2145 05a6 1A46     		mov	r2, r3
 2146 05a8 6F4B     		ldr	r3, .L172+36
 2147 05aa 53F82230 		ldr	r3, [r3, r2, lsl #2]	@ float
 2148 05ae 1946     		mov	r1, r3
 2149 05b0 FFF7FEFF 		bl	__aeabi_fmul
 2150 05b4 0346     		mov	r3, r0
 2151 05b6 1846     		mov	r0, r3
 2152 05b8 FFF7FEFF 		bl	__aeabi_f2uiz
 2153 05bc 0346     		mov	r3, r0
 2154 05be 9AB2     		uxth	r2, r3
 2155 05c0 6A4B     		ldr	r3, .L172+40
 2156 05c2 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
 2157 05c6 07E0     		b	.L93
 2158              	.L92:
 989:main.c        ****             }
 990:main.c        ****             else
 991:main.c        ****             {
 992:main.c        ****                 processed_pedals[main_counter] = 0;
 2159              		.loc 1 992 0
 2160 05c8 644B     		ldr	r3, .L172+24
 2161 05ca 1B78     		ldrb	r3, [r3]
 2162 05cc DBB2     		uxtb	r3, r3
 2163 05ce 1A46     		mov	r2, r3
 2164 05d0 664B     		ldr	r3, .L172+40
 2165 05d2 0021     		movs	r1, #0
 2166 05d4 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2167              	.L93:
 993:main.c        ****             }
 994:main.c        ****             if (processed_pedals[main_counter] > 4095)
 2168              		.loc 1 994 0
 2169 05d8 604B     		ldr	r3, .L172+24
 2170 05da 1B78     		ldrb	r3, [r3]
 2171 05dc DBB2     		uxtb	r3, r3
 2172 05de 1A46     		mov	r2, r3
 2173 05e0 624B     		ldr	r3, .L172+40
 2174 05e2 33F81230 		ldrh	r3, [r3, r2, lsl #1]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 57


 2175 05e6 B3F5805F 		cmp	r3, #4096
 2176 05ea 08D3     		bcc	.L94
 995:main.c        ****             {
 996:main.c        ****                 processed_pedals[main_counter] = 4095;
 2177              		.loc 1 996 0
 2178 05ec 5B4B     		ldr	r3, .L172+24
 2179 05ee 1B78     		ldrb	r3, [r3]
 2180 05f0 DBB2     		uxtb	r3, r3
 2181 05f2 1A46     		mov	r2, r3
 2182 05f4 5D4B     		ldr	r3, .L172+40
 2183 05f6 40F6FF71 		movw	r1, #4095
 2184 05fa 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2185              	.L94:
 997:main.c        ****             }
 998:main.c        ****             
 999:main.c        ****             
1000:main.c        ****             if ( processed_pedals[main_counter] != prev_processed_pedals[main_counter])
 2186              		.loc 1 1000 0
 2187 05fe 574B     		ldr	r3, .L172+24
 2188 0600 1B78     		ldrb	r3, [r3]
 2189 0602 564B     		ldr	r3, .L172+24
 2190 0604 1B78     		ldrb	r3, [r3]
1001:main.c        ****             {
1002:main.c        ****                 //sendMIDIControlChange(main_counter, (processed_pedals[main_counter] >> 7), 1);
1003:main.c        ****                 //sendMIDIControlChange(main_counter+36, (processed_pedals[main_counter] & 127), 1)
1004:main.c        ****             }
1005:main.c        ****             pedals_float[main_counter] = (float)processed_pedals[main_counter] * 2.442002442002442e
 2191              		.loc 1 1005 0
 2192 0606 554B     		ldr	r3, .L172+24
 2193 0608 1B78     		ldrb	r3, [r3]
 2194 060a DBB2     		uxtb	r3, r3
 2195 060c 1C46     		mov	r4, r3
 2196 060e 534B     		ldr	r3, .L172+24
 2197 0610 1B78     		ldrb	r3, [r3]
 2198 0612 DBB2     		uxtb	r3, r3
 2199 0614 1A46     		mov	r2, r3
 2200 0616 554B     		ldr	r3, .L172+40
 2201 0618 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2202 061c 1846     		mov	r0, r3
 2203 061e FFF7FEFF 		bl	__aeabi_ui2f
 2204 0622 0346     		mov	r3, r0
 2205 0624 5249     		ldr	r1, .L172+44
 2206 0626 1846     		mov	r0, r3
 2207 0628 FFF7FEFF 		bl	__aeabi_fmul
 2208 062c 0346     		mov	r3, r0
 2209 062e 1A46     		mov	r2, r3
 2210 0630 504B     		ldr	r3, .L172+48
 2211 0632 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
1006:main.c        ****             prev_processed_pedals[main_counter] = processed_pedals[main_counter];
 2212              		.loc 1 1006 0
 2213 0636 494B     		ldr	r3, .L172+24
 2214 0638 1B78     		ldrb	r3, [r3]
 2215 063a DBB2     		uxtb	r3, r3
 2216 063c 1A46     		mov	r2, r3
 2217 063e 474B     		ldr	r3, .L172+24
 2218 0640 1B78     		ldrb	r3, [r3]
 2219 0642 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 58


 2220 0644 1946     		mov	r1, r3
 2221 0646 494B     		ldr	r3, .L172+40
 2222 0648 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 2223 064c 4A4B     		ldr	r3, .L172+52
 2224 064e 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2225              	.LBE10:
 2226 0652 45E0     		b	.L95
 2227              	.L91:
1007:main.c        ****         }
1008:main.c        ****         else
1009:main.c        ****         {
1010:main.c        ****             processed_volumePedal = (float)volumePedal * 1.007378258730939f; //compensate for lower
 2228              		.loc 1 1010 0
 2229 0654 494B     		ldr	r3, .L172+56
 2230 0656 1B88     		ldrh	r3, [r3]
 2231 0658 1846     		mov	r0, r3
 2232 065a FFF7FEFF 		bl	__aeabi_ui2f
 2233 065e 0346     		mov	r3, r0
 2234 0660 4749     		ldr	r1, .L172+60
 2235 0662 1846     		mov	r0, r3
 2236 0664 FFF7FEFF 		bl	__aeabi_fmul
 2237 0668 0346     		mov	r3, r0
 2238 066a 1846     		mov	r0, r3
 2239 066c FFF7FEFF 		bl	__aeabi_f2iz
 2240 0670 0346     		mov	r3, r0
 2241 0672 1AB2     		sxth	r2, r3
 2242 0674 434B     		ldr	r3, .L172+64
 2243 0676 1A80     		strh	r2, [r3]	@ movhi
1011:main.c        **** 
1012:main.c        ****             if (processed_volumePedal < 0)
 2244              		.loc 1 1012 0
 2245 0678 424B     		ldr	r3, .L172+64
 2246 067a B3F90030 		ldrsh	r3, [r3]
 2247 067e 002B     		cmp	r3, #0
 2248 0680 03DA     		bge	.L96
1013:main.c        ****             {
1014:main.c        ****                 processed_volumePedal = 0;
 2249              		.loc 1 1014 0
 2250 0682 404B     		ldr	r3, .L172+64
 2251 0684 0022     		movs	r2, #0
 2252 0686 1A80     		strh	r2, [r3]	@ movhi
 2253 0688 09E0     		b	.L97
 2254              	.L96:
1015:main.c        ****             }
1016:main.c        ****             else if (processed_volumePedal > 4095)
 2255              		.loc 1 1016 0
 2256 068a 3E4B     		ldr	r3, .L172+64
 2257 068c B3F90030 		ldrsh	r3, [r3]
 2258 0690 B3F5805F 		cmp	r3, #4096
 2259 0694 03DB     		blt	.L97
1017:main.c        ****             {
1018:main.c        ****                  processed_volumePedal = 4095;
 2260              		.loc 1 1018 0
 2261 0696 3B4B     		ldr	r3, .L172+64
 2262 0698 40F6FF72 		movw	r2, #4095
 2263 069c 1A80     		strh	r2, [r3]	@ movhi
 2264              	.L97:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 59


1019:main.c        ****             }
1020:main.c        ****             
1021:main.c        ****             if ( processed_volumePedal != prev_processed_volumePedal)
 2265              		.loc 1 1021 0
 2266 069e 394B     		ldr	r3, .L172+64
 2267 06a0 B3F90020 		ldrsh	r2, [r3]
 2268 06a4 384B     		ldr	r3, .L172+68
 2269 06a6 B3F90030 		ldrsh	r3, [r3]
 2270 06aa 9A42     		cmp	r2, r3
 2271 06ac 13D0     		beq	.L98
 2272              	.LBB11:
1022:main.c        ****             {
1023:main.c        ****                 uint16_t tempPedal = processed_volumePedal;
 2273              		.loc 1 1023 0
 2274 06ae 354B     		ldr	r3, .L172+64
 2275 06b0 B3F90030 		ldrsh	r3, [r3]
 2276 06b4 7B84     		strh	r3, [r7, #34]	@ movhi
1024:main.c        ****                 
1025:main.c        ****                 sendMIDIControlChange(21, ( tempPedal >> 7), 0);
 2277              		.loc 1 1025 0
 2278 06b6 7B8C     		ldrh	r3, [r7, #34]
 2279 06b8 DB09     		lsrs	r3, r3, #7
 2280 06ba 9BB2     		uxth	r3, r3
 2281 06bc 0022     		movs	r2, #0
 2282 06be 1946     		mov	r1, r3
 2283 06c0 1520     		movs	r0, #21
 2284 06c2 FFF7FEFF 		bl	sendMIDIControlChange
1026:main.c        ****                 sendMIDIControlChange(22, ( tempPedal & 127), 0);
 2285              		.loc 1 1026 0
 2286 06c6 7B8C     		ldrh	r3, [r7, #34]
 2287 06c8 03F07F03 		and	r3, r3, #127
 2288 06cc 0022     		movs	r2, #0
 2289 06ce 1946     		mov	r1, r3
 2290 06d0 1620     		movs	r0, #22
 2291 06d2 FFF7FEFF 		bl	sendMIDIControlChange
 2292              	.L98:
 2293              	.LBE11:
1027:main.c        ****             }
1028:main.c        ****              prev_processed_volumePedal = processed_volumePedal;
 2294              		.loc 1 1028 0
 2295 06d6 2B4B     		ldr	r3, .L172+64
 2296 06d8 B3F90020 		ldrsh	r2, [r3]
 2297 06dc 2A4B     		ldr	r3, .L172+68
 2298 06de 1A80     		strh	r2, [r3]	@ movhi
 2299              	.L95:
1029:main.c        ****         }
1030:main.c        ****         
1031:main.c        ****         main_counter++;
 2300              		.loc 1 1031 0
 2301 06e0 1E4B     		ldr	r3, .L172+24
 2302 06e2 1B78     		ldrb	r3, [r3]
 2303 06e4 DBB2     		uxtb	r3, r3
 2304 06e6 0133     		adds	r3, r3, #1
 2305 06e8 DAB2     		uxtb	r2, r3
 2306 06ea 1C4B     		ldr	r3, .L172+24
 2307 06ec 1A70     		strb	r2, [r3]
1032:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 60


1033:main.c        ****         if (main_counter > 11)
 2308              		.loc 1 1033 0
 2309 06ee 1B4B     		ldr	r3, .L172+24
 2310 06f0 1B78     		ldrb	r3, [r3]
 2311 06f2 DBB2     		uxtb	r3, r3
 2312 06f4 0B2B     		cmp	r3, #11
 2313 06f6 02D9     		bls	.L99
1034:main.c        ****         {
1035:main.c        ****             main_counter = 0;
 2314              		.loc 1 1035 0
 2315 06f8 184B     		ldr	r3, .L172+24
 2316 06fa 0022     		movs	r2, #0
 2317 06fc 1A70     		strb	r2, [r3]
 2318              	.L99:
1036:main.c        ****         }
1037:main.c        ****         
1038:main.c        ****         #if 0
1039:main.c        ****             
1040:main.c        ****             
1041:main.c        ****         main_counter++;
1042:main.c        ****         if (main_counter >= 11)
1043:main.c        ****         {
1044:main.c        ****                /*  
1045:main.c        ****             testpin3_Write(1);
1046:main.c        ****             I2Cbuff1[0] = 1<<6;
1047:main.c        ****     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1048:main.c        ****         OLEDwriteInt(bar[1], 5, 0,FirstLine);
1049:main.c        **** 
1050:main.c        ****         //CyDelay(1);
1051:main.c        ****         
1052:main.c        ****         OLEDwriteInt(octave, 1, 0,SecondLine);
1053:main.c        **** 
1054:main.c        ****         OLED_draw();
1055:main.c        ****                     I2Cbuff1[0] = 1<<0;
1056:main.c        ****     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1057:main.c        ****         testpin3_Write(0);
1058:main.c        ****             */
1059:main.c        ****             main_counter = 0;
1060:main.c        ****         }
1061:main.c        ****         #endif
1062:main.c        ****         if ((rxBufferBar[!currentBarBuffer][6] == 254) && (rxBufferBar[!currentBarBuffer][7] == 253
 2319              		.loc 1 1062 0
 2320 06fe 234B     		ldr	r3, .L172+72
 2321 0700 1B78     		ldrb	r3, [r3]
 2322 0702 DBB2     		uxtb	r3, r3
 2323 0704 002B     		cmp	r3, #0
 2324 0706 0CBF     		ite	eq
 2325 0708 0123     		moveq	r3, #1
 2326 070a 0023     		movne	r3, #0
 2327 070c DBB2     		uxtb	r3, r3
 2328 070e 204A     		ldr	r2, .L172+76
 2329 0710 DB00     		lsls	r3, r3, #3
 2330 0712 1344     		add	r3, r3, r2
 2331 0714 9B79     		ldrb	r3, [r3, #6]
 2332 0716 DBB2     		uxtb	r3, r3
 2333 0718 FE2B     		cmp	r3, #254
 2334 071a 40F06581 		bne	.L100
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 61


 2335              		.loc 1 1062 0 is_stmt 0 discriminator 1
 2336 071e 1B4B     		ldr	r3, .L172+72
 2337 0720 1B78     		ldrb	r3, [r3]
 2338 0722 DBB2     		uxtb	r3, r3
 2339 0724 002B     		cmp	r3, #0
 2340 0726 0CBF     		ite	eq
 2341 0728 0123     		moveq	r3, #1
 2342 072a 0023     		movne	r3, #0
 2343 072c DBB2     		uxtb	r3, r3
 2344 072e 184A     		ldr	r2, .L172+76
 2345 0730 DB00     		lsls	r3, r3, #3
 2346 0732 1344     		add	r3, r3, r2
 2347 0734 DB79     		ldrb	r3, [r3, #7]
 2348 0736 DBB2     		uxtb	r3, r3
 2349 0738 FD2B     		cmp	r3, #253
 2350 073a 40F05581 		bne	.L100
 2351              	.LBB12:
1063:main.c        ****         {
1064:main.c        ****             for (int i = 0; i < 2; i++)
 2352              		.loc 1 1064 0 is_stmt 1
 2353 073e 0023     		movs	r3, #0
 2354 0740 3B65     		str	r3, [r7, #80]
 2355 0742 4DE1     		b	.L101
 2356              	.L173:
 2357              		.align	2
 2358              	.L172:
 2359 0744 00000000 		.word	OLEDcount
 2360 0748 00040000 		.word	.LC0
 2361 074c 00000000 		.word	encoderNum
 2362 0750 00000000 		.word	encoderVal
 2363 0754 04040000 		.word	.LC1
 2364 0758 00000000 		.word	patchNum
 2365 075c 00000000 		.word	main_counter
 2366 0760 00000000 		.word	angle
 2367 0764 00000000 		.word	pedals_low
 2368 0768 00000000 		.word	pedalRatios
 2369 076c 00000000 		.word	processed_pedals
 2370 0770 01088039 		.word	964691969
 2371 0774 00000000 		.word	pedals_float
 2372 0778 00000000 		.word	prev_processed_pedals
 2373 077c 00000000 		.word	volumePedal
 2374 0780 C5F1803F 		.word	1065415109
 2375 0784 00000000 		.word	processed_volumePedal
 2376 0788 00000000 		.word	prev_processed_volumePedal
 2377 078c 00000000 		.word	currentBarBuffer
 2378 0790 00000000 		.word	rxBufferBar
 2379              	.L113:
1065:main.c        ****             {
1066:main.c        ****                 bar[i] = ((rxBufferBar[!currentBarBuffer][i*2] << 8) + rxBufferBar[!currentBarBuffe
 2380              		.loc 1 1066 0
 2381 0794 A84B     		ldr	r3, .L174
 2382 0796 1B78     		ldrb	r3, [r3]
 2383 0798 DBB2     		uxtb	r3, r3
 2384 079a 002B     		cmp	r3, #0
 2385 079c 0CBF     		ite	eq
 2386 079e 0123     		moveq	r3, #1
 2387 07a0 0023     		movne	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 62


 2388 07a2 DBB2     		uxtb	r3, r3
 2389 07a4 1A46     		mov	r2, r3
 2390 07a6 3B6D     		ldr	r3, [r7, #80]
 2391 07a8 5B00     		lsls	r3, r3, #1
 2392 07aa A449     		ldr	r1, .L174+4
 2393 07ac D200     		lsls	r2, r2, #3
 2394 07ae 0A44     		add	r2, r2, r1
 2395 07b0 1344     		add	r3, r3, r2
 2396 07b2 1B78     		ldrb	r3, [r3]
 2397 07b4 DBB2     		uxtb	r3, r3
 2398 07b6 9BB2     		uxth	r3, r3
 2399 07b8 1B02     		lsls	r3, r3, #8
 2400 07ba 9AB2     		uxth	r2, r3
 2401 07bc 9E4B     		ldr	r3, .L174
 2402 07be 1B78     		ldrb	r3, [r3]
 2403 07c0 DBB2     		uxtb	r3, r3
 2404 07c2 002B     		cmp	r3, #0
 2405 07c4 0CBF     		ite	eq
 2406 07c6 0123     		moveq	r3, #1
 2407 07c8 0023     		movne	r3, #0
 2408 07ca DBB2     		uxtb	r3, r3
 2409 07cc 1946     		mov	r1, r3
 2410 07ce 3B6D     		ldr	r3, [r7, #80]
 2411 07d0 5B00     		lsls	r3, r3, #1
 2412 07d2 0133     		adds	r3, r3, #1
 2413 07d4 9948     		ldr	r0, .L174+4
 2414 07d6 C900     		lsls	r1, r1, #3
 2415 07d8 0144     		add	r1, r1, r0
 2416 07da 0B44     		add	r3, r3, r1
 2417 07dc 1B78     		ldrb	r3, [r3]
 2418 07de DBB2     		uxtb	r3, r3
 2419 07e0 9BB2     		uxth	r3, r3
 2420 07e2 1344     		add	r3, r3, r2
 2421 07e4 99B2     		uxth	r1, r3
 2422 07e6 964A     		ldr	r2, .L174+8
 2423 07e8 3B6D     		ldr	r3, [r7, #80]
 2424 07ea 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1067:main.c        ****     
1068:main.c        ****                 if (bar[i] != prevBar[i])
 2425              		.loc 1 1068 0
 2426 07ee 944A     		ldr	r2, .L174+8
 2427 07f0 3B6D     		ldr	r3, [r7, #80]
 2428 07f2 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2429 07f6 9AB2     		uxth	r2, r3
 2430 07f8 9249     		ldr	r1, .L174+12
 2431 07fa 3B6D     		ldr	r3, [r7, #80]
 2432 07fc 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 2433 0800 9BB2     		uxth	r3, r3
 2434 0802 9A42     		cmp	r2, r3
 2435 0804 00F0E080 		beq	.L102
1069:main.c        ****                 {
1070:main.c        ****     				if ((bar[i] == 65535) || (bar[i] > fretMeasurements[0][i]))
 2436              		.loc 1 1070 0
 2437 0808 8D4A     		ldr	r2, .L174+8
 2438 080a 3B6D     		ldr	r3, [r7, #80]
 2439 080c 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2440 0810 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 63


 2441 0812 4FF6FF72 		movw	r2, #65535
 2442 0816 9342     		cmp	r3, r2
 2443 0818 11D0     		beq	.L103
 2444              		.loc 1 1070 0 is_stmt 0 discriminator 1
 2445 081a 894A     		ldr	r2, .L174+8
 2446 081c 3B6D     		ldr	r3, [r7, #80]
 2447 081e 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2448 0822 9BB2     		uxth	r3, r3
 2449 0824 1846     		mov	r0, r3
 2450 0826 FFF7FEFF 		bl	__aeabi_i2f
 2451 082a 874A     		ldr	r2, .L174+16
 2452 082c 3B6D     		ldr	r3, [r7, #80]
 2453 082e 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2454 0832 1946     		mov	r1, r3
 2455 0834 FFF7FEFF 		bl	__aeabi_fcmpgt
 2456 0838 0346     		mov	r3, r0
 2457 083a 002B     		cmp	r3, #0
 2458 083c 06D0     		beq	.L167
 2459              	.L103:
1071:main.c        ****     				{
1072:main.c        ****     					stringMappedPositions[i] = 1.0f;
 2460              		.loc 1 1072 0 is_stmt 1
 2461 083e 834A     		ldr	r2, .L174+20
 2462 0840 3B6D     		ldr	r3, [r7, #80]
 2463 0842 4FF07E51 		mov	r1, #1065353216
 2464 0846 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 2465 084a AEE0     		b	.L106
 2466              	.L167:
1073:main.c        ****     				}
1074:main.c        **** 
1075:main.c        ****     				else if ((bar[i] >= fretMeasurements[1][i]) && (bar[i] <= fretMeasurements[0][i]))
 2467              		.loc 1 1075 0
 2468 084c 7C4A     		ldr	r2, .L174+8
 2469 084e 3B6D     		ldr	r3, [r7, #80]
 2470 0850 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2471 0854 9BB2     		uxth	r3, r3
 2472 0856 1846     		mov	r0, r3
 2473 0858 FFF7FEFF 		bl	__aeabi_i2f
 2474 085c 7A4A     		ldr	r2, .L174+16
 2475 085e 3B6D     		ldr	r3, [r7, #80]
 2476 0860 0233     		adds	r3, r3, #2
 2477 0862 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2478 0866 1946     		mov	r1, r3
 2479 0868 FFF7FEFF 		bl	__aeabi_fcmpge
 2480 086c 0346     		mov	r3, r0
 2481 086e 002B     		cmp	r3, #0
 2482 0870 32D0     		beq	.L107
 2483              		.loc 1 1075 0 is_stmt 0 discriminator 1
 2484 0872 734A     		ldr	r2, .L174+8
 2485 0874 3B6D     		ldr	r3, [r7, #80]
 2486 0876 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2487 087a 9BB2     		uxth	r3, r3
 2488 087c 1846     		mov	r0, r3
 2489 087e FFF7FEFF 		bl	__aeabi_i2f
 2490 0882 714A     		ldr	r2, .L174+16
 2491 0884 3B6D     		ldr	r3, [r7, #80]
 2492 0886 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 64


 2493 088a 1946     		mov	r1, r3
 2494 088c FFF7FEFF 		bl	__aeabi_fcmple
 2495 0890 0346     		mov	r3, r0
 2496 0892 002B     		cmp	r3, #0
 2497 0894 20D0     		beq	.L107
1076:main.c        ****     				{
1077:main.c        ****     					stringMappedPositions[i] = map((float)bar[i], fretMeasurements[0][i], fretMeasurements[1][
 2498              		.loc 1 1077 0 is_stmt 1
 2499 0896 6A4A     		ldr	r2, .L174+8
 2500 0898 3B6D     		ldr	r3, [r7, #80]
 2501 089a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2502 089e 9BB2     		uxth	r3, r3
 2503 08a0 1846     		mov	r0, r3
 2504 08a2 FFF7FEFF 		bl	__aeabi_ui2f
 2505 08a6 0446     		mov	r4, r0
 2506 08a8 674A     		ldr	r2, .L174+16
 2507 08aa 3B6D     		ldr	r3, [r7, #80]
 2508 08ac 52F82310 		ldr	r1, [r2, r3, lsl #2]	@ float
 2509 08b0 654A     		ldr	r2, .L174+16
 2510 08b2 3B6D     		ldr	r3, [r7, #80]
 2511 08b4 0233     		adds	r3, r3, #2
 2512 08b6 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 2513 08ba 654B     		ldr	r3, .L174+24
 2514 08bc 1868     		ldr	r0, [r3]	@ float
 2515 08be 644B     		ldr	r3, .L174+24
 2516 08c0 5B68     		ldr	r3, [r3, #4]	@ float
 2517 08c2 0093     		str	r3, [sp]	@ float
 2518 08c4 0346     		mov	r3, r0
 2519 08c6 2046     		mov	r0, r4
 2520 08c8 FFF7FEFF 		bl	map
 2521 08cc 0146     		mov	r1, r0
 2522 08ce 5F4A     		ldr	r2, .L174+20
 2523 08d0 3B6D     		ldr	r3, [r7, #80]
 2524 08d2 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 2525 08d6 68E0     		b	.L106
 2526              	.L107:
1078:main.c        ****     				}
1079:main.c        **** 
1080:main.c        ****     				else if ((bar[i] >= fretMeasurements[2][i]) && (bar[i] < fretMeasurements[1][i]))
 2527              		.loc 1 1080 0
 2528 08d8 594A     		ldr	r2, .L174+8
 2529 08da 3B6D     		ldr	r3, [r7, #80]
 2530 08dc 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2531 08e0 9BB2     		uxth	r3, r3
 2532 08e2 1846     		mov	r0, r3
 2533 08e4 FFF7FEFF 		bl	__aeabi_i2f
 2534 08e8 574A     		ldr	r2, .L174+16
 2535 08ea 3B6D     		ldr	r3, [r7, #80]
 2536 08ec 0433     		adds	r3, r3, #4
 2537 08ee 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2538 08f2 1946     		mov	r1, r3
 2539 08f4 FFF7FEFF 		bl	__aeabi_fcmpge
 2540 08f8 0346     		mov	r3, r0
 2541 08fa 002B     		cmp	r3, #0
 2542 08fc 34D0     		beq	.L110
 2543              		.loc 1 1080 0 is_stmt 0 discriminator 1
 2544 08fe 504A     		ldr	r2, .L174+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 65


 2545 0900 3B6D     		ldr	r3, [r7, #80]
 2546 0902 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2547 0906 9BB2     		uxth	r3, r3
 2548 0908 1846     		mov	r0, r3
 2549 090a FFF7FEFF 		bl	__aeabi_i2f
 2550 090e 4E4A     		ldr	r2, .L174+16
 2551 0910 3B6D     		ldr	r3, [r7, #80]
 2552 0912 0233     		adds	r3, r3, #2
 2553 0914 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2554 0918 1946     		mov	r1, r3
 2555 091a FFF7FEFF 		bl	__aeabi_fcmplt
 2556 091e 0346     		mov	r3, r0
 2557 0920 002B     		cmp	r3, #0
 2558 0922 21D0     		beq	.L110
1081:main.c        ****     				{
1082:main.c        ****     					stringMappedPositions[i] = map((float)bar[i], fretMeasurements[1][i], fretMeasurements[2][
 2559              		.loc 1 1082 0 is_stmt 1
 2560 0924 464A     		ldr	r2, .L174+8
 2561 0926 3B6D     		ldr	r3, [r7, #80]
 2562 0928 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2563 092c 9BB2     		uxth	r3, r3
 2564 092e 1846     		mov	r0, r3
 2565 0930 FFF7FEFF 		bl	__aeabi_ui2f
 2566 0934 0446     		mov	r4, r0
 2567 0936 444A     		ldr	r2, .L174+16
 2568 0938 3B6D     		ldr	r3, [r7, #80]
 2569 093a 0233     		adds	r3, r3, #2
 2570 093c 52F82310 		ldr	r1, [r2, r3, lsl #2]	@ float
 2571 0940 414A     		ldr	r2, .L174+16
 2572 0942 3B6D     		ldr	r3, [r7, #80]
 2573 0944 0433     		adds	r3, r3, #4
 2574 0946 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 2575 094a 414B     		ldr	r3, .L174+24
 2576 094c 5868     		ldr	r0, [r3, #4]	@ float
 2577 094e 404B     		ldr	r3, .L174+24
 2578 0950 9B68     		ldr	r3, [r3, #8]	@ float
 2579 0952 0093     		str	r3, [sp]	@ float
 2580 0954 0346     		mov	r3, r0
 2581 0956 2046     		mov	r0, r4
 2582 0958 FFF7FEFF 		bl	map
 2583 095c 0146     		mov	r1, r0
 2584 095e 3B4A     		ldr	r2, .L174+20
 2585 0960 3B6D     		ldr	r3, [r7, #80]
 2586 0962 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 2587 0966 20E0     		b	.L106
 2588              	.L110:
1083:main.c        ****     				}
1084:main.c        **** 
1085:main.c        ****     				else
1086:main.c        ****     				{
1087:main.c        ****     					stringMappedPositions[i] = map((float)bar[i], fretMeasurements[2][i], fretMeasurements[3][
 2589              		.loc 1 1087 0
 2590 0968 354A     		ldr	r2, .L174+8
 2591 096a 3B6D     		ldr	r3, [r7, #80]
 2592 096c 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2593 0970 9BB2     		uxth	r3, r3
 2594 0972 1846     		mov	r0, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 66


 2595 0974 FFF7FEFF 		bl	__aeabi_ui2f
 2596 0978 0446     		mov	r4, r0
 2597 097a 334A     		ldr	r2, .L174+16
 2598 097c 3B6D     		ldr	r3, [r7, #80]
 2599 097e 0433     		adds	r3, r3, #4
 2600 0980 52F82310 		ldr	r1, [r2, r3, lsl #2]	@ float
 2601 0984 304A     		ldr	r2, .L174+16
 2602 0986 3B6D     		ldr	r3, [r7, #80]
 2603 0988 0633     		adds	r3, r3, #6
 2604 098a 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 2605 098e 304B     		ldr	r3, .L174+24
 2606 0990 9868     		ldr	r0, [r3, #8]	@ float
 2607 0992 2F4B     		ldr	r3, .L174+24
 2608 0994 DB68     		ldr	r3, [r3, #12]	@ float
 2609 0996 0093     		str	r3, [sp]	@ float
 2610 0998 0346     		mov	r3, r0
 2611 099a 2046     		mov	r0, r4
 2612 099c FFF7FEFF 		bl	map
 2613 09a0 0146     		mov	r1, r0
 2614 09a2 2A4A     		ldr	r2, .L174+20
 2615 09a4 3B6D     		ldr	r3, [r7, #80]
 2616 09a6 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 2617              	.L106:
1088:main.c        ****     				}
1089:main.c        **** 
1090:main.c        ****                     invStringMappedPositions[i] = 1.0f / stringMappedPositions[i];
 2618              		.loc 1 1090 0
 2619 09aa 284A     		ldr	r2, .L174+20
 2620 09ac 3B6D     		ldr	r3, [r7, #80]
 2621 09ae 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 2622 09b2 1946     		mov	r1, r3
 2623 09b4 4FF07E50 		mov	r0, #1065353216
 2624 09b8 FFF7FEFF 		bl	__aeabi_fdiv
 2625 09bc 0346     		mov	r3, r0
 2626 09be 1946     		mov	r1, r3
 2627 09c0 244A     		ldr	r2, .L174+28
 2628 09c2 3B6D     		ldr	r3, [r7, #80]
 2629 09c4 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 2630              	.L102:
1091:main.c        ****                 }
1092:main.c        ****                 prevBar[i] = bar[i];
 2631              		.loc 1 1092 0 discriminator 2
 2632 09c8 1D4A     		ldr	r2, .L174+8
 2633 09ca 3B6D     		ldr	r3, [r7, #80]
 2634 09cc 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2635 09d0 99B2     		uxth	r1, r3
 2636 09d2 1C4A     		ldr	r2, .L174+12
 2637 09d4 3B6D     		ldr	r3, [r7, #80]
 2638 09d6 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1064:main.c        ****             {
 2639              		.loc 1 1064 0 discriminator 2
 2640 09da 3B6D     		ldr	r3, [r7, #80]
 2641 09dc 0133     		adds	r3, r3, #1
 2642 09de 3B65     		str	r3, [r7, #80]
 2643              	.L101:
1064:main.c        ****             {
 2644              		.loc 1 1064 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 67


 2645 09e0 3B6D     		ldr	r3, [r7, #80]
 2646 09e2 012B     		cmp	r3, #1
 2647 09e4 7FF7D6AE 		ble	.L113
 2648              	.L100:
 2649              	.LBE12:
1093:main.c        ****             }
1094:main.c        ****         }
1095:main.c        ****         if ((rxBufferPluck[!currentPluckBuffer][0] == 254) && (rxBufferPluck[!currentPluckBuffer][2
 2650              		.loc 1 1095 0 is_stmt 1
 2651 09e8 1B4B     		ldr	r3, .L174+32
 2652 09ea 1B78     		ldrb	r3, [r3]
 2653 09ec DBB2     		uxtb	r3, r3
 2654 09ee 002B     		cmp	r3, #0
 2655 09f0 0CBF     		ite	eq
 2656 09f2 0123     		moveq	r3, #1
 2657 09f4 0023     		movne	r3, #0
 2658 09f6 DBB2     		uxtb	r3, r3
 2659 09f8 1946     		mov	r1, r3
 2660 09fa 184A     		ldr	r2, .L174+36
 2661 09fc 1A23     		movs	r3, #26
 2662 09fe 03FB01F3 		mul	r3, r3, r1
 2663 0a02 1344     		add	r3, r3, r2
 2664 0a04 1B78     		ldrb	r3, [r3]
 2665 0a06 DBB2     		uxtb	r3, r3
 2666 0a08 FE2B     		cmp	r3, #254
 2667 0a0a 79D1     		bne	.L114
 2668              		.loc 1 1095 0 is_stmt 0 discriminator 1
 2669 0a0c 124B     		ldr	r3, .L174+32
 2670 0a0e 1B78     		ldrb	r3, [r3]
 2671 0a10 DBB2     		uxtb	r3, r3
 2672 0a12 002B     		cmp	r3, #0
 2673 0a14 0CBF     		ite	eq
 2674 0a16 0123     		moveq	r3, #1
 2675 0a18 0023     		movne	r3, #0
 2676 0a1a DBB2     		uxtb	r3, r3
 2677 0a1c 1946     		mov	r1, r3
 2678 0a1e 0F4A     		ldr	r2, .L174+36
 2679 0a20 1A23     		movs	r3, #26
 2680 0a22 03FB01F3 		mul	r3, r3, r1
 2681 0a26 1344     		add	r3, r3, r2
 2682 0a28 1933     		adds	r3, r3, #25
 2683 0a2a 1B78     		ldrb	r3, [r3]
 2684 0a2c DBB2     		uxtb	r3, r3
 2685 0a2e FD2B     		cmp	r3, #253
 2686 0a30 66D1     		bne	.L114
 2687              	.LBB13:
1096:main.c        ****         {
1097:main.c        ****             for (int i = 0 ; i < 12; i++)
 2688              		.loc 1 1097 0 is_stmt 1
 2689 0a32 0023     		movs	r3, #0
 2690 0a34 FB64     		str	r3, [r7, #76]
 2691 0a36 60E0     		b	.L115
 2692              	.L175:
 2693              		.align	2
 2694              	.L174:
 2695 0a38 00000000 		.word	currentBarBuffer
 2696 0a3c 00000000 		.word	rxBufferBar
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 68


 2697 0a40 00000000 		.word	bar
 2698 0a44 00000000 		.word	prevBar
 2699 0a48 00000000 		.word	fretMeasurements
 2700 0a4c 00000000 		.word	stringMappedPositions
 2701 0a50 00000000 		.word	fretScaling
 2702 0a54 00000000 		.word	invStringMappedPositions
 2703 0a58 00000000 		.word	currentPluckBuffer
 2704 0a5c 00000000 		.word	rxBufferPluck
 2705              	.L117:
1098:main.c        ****             {
1099:main.c        ****                 strings[i] = ((rxBufferPluck[!currentPluckBuffer][(i*2)+1] << 7) + rxBufferPluck[!c
 2706              		.loc 1 1099 0
 2707 0a60 B24B     		ldr	r3, .L176
 2708 0a62 1B78     		ldrb	r3, [r3]
 2709 0a64 DBB2     		uxtb	r3, r3
 2710 0a66 002B     		cmp	r3, #0
 2711 0a68 0CBF     		ite	eq
 2712 0a6a 0123     		moveq	r3, #1
 2713 0a6c 0023     		movne	r3, #0
 2714 0a6e DBB2     		uxtb	r3, r3
 2715 0a70 1846     		mov	r0, r3
 2716 0a72 FB6C     		ldr	r3, [r7, #76]
 2717 0a74 5B00     		lsls	r3, r3, #1
 2718 0a76 0133     		adds	r3, r3, #1
 2719 0a78 AD49     		ldr	r1, .L176+4
 2720 0a7a 1A22     		movs	r2, #26
 2721 0a7c 02FB00F2 		mul	r2, r2, r0
 2722 0a80 0A44     		add	r2, r2, r1
 2723 0a82 1344     		add	r3, r3, r2
 2724 0a84 1B78     		ldrb	r3, [r3]
 2725 0a86 DBB2     		uxtb	r3, r3
 2726 0a88 9BB2     		uxth	r3, r3
 2727 0a8a DB01     		lsls	r3, r3, #7
 2728 0a8c 9AB2     		uxth	r2, r3
 2729 0a8e A74B     		ldr	r3, .L176
 2730 0a90 1B78     		ldrb	r3, [r3]
 2731 0a92 DBB2     		uxtb	r3, r3
 2732 0a94 002B     		cmp	r3, #0
 2733 0a96 0CBF     		ite	eq
 2734 0a98 0123     		moveq	r3, #1
 2735 0a9a 0023     		movne	r3, #0
 2736 0a9c DBB2     		uxtb	r3, r3
 2737 0a9e 1C46     		mov	r4, r3
 2738 0aa0 FB6C     		ldr	r3, [r7, #76]
 2739 0aa2 0133     		adds	r3, r3, #1
 2740 0aa4 5B00     		lsls	r3, r3, #1
 2741 0aa6 A248     		ldr	r0, .L176+4
 2742 0aa8 1A21     		movs	r1, #26
 2743 0aaa 01FB04F1 		mul	r1, r1, r4
 2744 0aae 0144     		add	r1, r1, r0
 2745 0ab0 0B44     		add	r3, r3, r1
 2746 0ab2 1B78     		ldrb	r3, [r3]
 2747 0ab4 DBB2     		uxtb	r3, r3
 2748 0ab6 9BB2     		uxth	r3, r3
 2749 0ab8 1344     		add	r3, r3, r2
 2750 0aba 99B2     		uxth	r1, r3
 2751 0abc 9D4A     		ldr	r2, .L176+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 69


 2752 0abe FB6C     		ldr	r3, [r7, #76]
 2753 0ac0 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1100:main.c        ****                 if (strings[i] != prevStrings[i])
 2754              		.loc 1 1100 0
 2755 0ac4 9B4A     		ldr	r2, .L176+8
 2756 0ac6 FB6C     		ldr	r3, [r7, #76]
 2757 0ac8 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2758 0acc 9AB2     		uxth	r2, r3
 2759 0ace 9A49     		ldr	r1, .L176+12
 2760 0ad0 FB6C     		ldr	r3, [r7, #76]
 2761 0ad2 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 2762 0ad6 9BB2     		uxth	r3, r3
 2763 0ad8 9A42     		cmp	r2, r3
 2764 0ada 02D0     		beq	.L116
1101:main.c        ****                 {
1102:main.c        ****                     noteEvent(i);
 2765              		.loc 1 1102 0
 2766 0adc F86C     		ldr	r0, [r7, #76]
 2767 0ade FFF7FEFF 		bl	noteEvent
 2768              	.L116:
1103:main.c        ****                 }
1104:main.c        ****                 
1105:main.c        ****                 prevStrings[i] = strings[i];
 2769              		.loc 1 1105 0 discriminator 2
 2770 0ae2 944A     		ldr	r2, .L176+8
 2771 0ae4 FB6C     		ldr	r3, [r7, #76]
 2772 0ae6 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 2773 0aea 99B2     		uxth	r1, r3
 2774 0aec 924A     		ldr	r2, .L176+12
 2775 0aee FB6C     		ldr	r3, [r7, #76]
 2776 0af0 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1097:main.c        ****             {
 2777              		.loc 1 1097 0 discriminator 2
 2778 0af4 FB6C     		ldr	r3, [r7, #76]
 2779 0af6 0133     		adds	r3, r3, #1
 2780 0af8 FB64     		str	r3, [r7, #76]
 2781              	.L115:
1097:main.c        ****             {
 2782              		.loc 1 1097 0 is_stmt 0 discriminator 1
 2783 0afa FB6C     		ldr	r3, [r7, #76]
 2784 0afc 0B2B     		cmp	r3, #11
 2785 0afe AFDD     		ble	.L117
 2786              	.L114:
 2787              	.LBE13:
1106:main.c        ****             }
1107:main.c        ****         }
1108:main.c        **** 
1109:main.c        **** 
1110:main.c        ****         
1111:main.c        ****         
1112:main.c        ****         if (!oct1_Read())
 2788              		.loc 1 1112 0 is_stmt 1
 2789 0b00 FFF7FEFF 		bl	oct1_Read
 2790 0b04 0346     		mov	r3, r0
 2791 0b06 002B     		cmp	r3, #0
 2792 0b08 0FD1     		bne	.L118
1113:main.c        ****         {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 70


1114:main.c        ****             octave = 0;
 2793              		.loc 1 1114 0
 2794 0b0a 8C4B     		ldr	r3, .L176+16
 2795 0b0c 0022     		movs	r2, #0
 2796 0b0e 1A60     		str	r2, [r3]
1115:main.c        ****             LED_amber1_Write(1);
 2797              		.loc 1 1115 0
 2798 0b10 0120     		movs	r0, #1
 2799 0b12 FFF7FEFF 		bl	LED_amber1_Write
1116:main.c        ****             LED_amber2_Write(0);
 2800              		.loc 1 1116 0
 2801 0b16 0020     		movs	r0, #0
 2802 0b18 FFF7FEFF 		bl	LED_amber2_Write
1117:main.c        ****             LED_amber3_Write(0);
 2803              		.loc 1 1117 0
 2804 0b1c 0020     		movs	r0, #0
 2805 0b1e FFF7FEFF 		bl	LED_amber3_Write
1118:main.c        ****             LED_amber4_Write(0);
 2806              		.loc 1 1118 0
 2807 0b22 0020     		movs	r0, #0
 2808 0b24 FFF7FEFF 		bl	LED_amber4_Write
 2809 0b28 3DE0     		b	.L119
 2810              	.L118:
1119:main.c        ****         }
1120:main.c        ****         else if (!oct2_Read())
 2811              		.loc 1 1120 0
 2812 0b2a FFF7FEFF 		bl	oct2_Read
 2813 0b2e 0346     		mov	r3, r0
 2814 0b30 002B     		cmp	r3, #0
 2815 0b32 0FD1     		bne	.L120
1121:main.c        ****         {
1122:main.c        ****             octave = 1;
 2816              		.loc 1 1122 0
 2817 0b34 814B     		ldr	r3, .L176+16
 2818 0b36 0122     		movs	r2, #1
 2819 0b38 1A60     		str	r2, [r3]
1123:main.c        ****             LED_amber1_Write(0);
 2820              		.loc 1 1123 0
 2821 0b3a 0020     		movs	r0, #0
 2822 0b3c FFF7FEFF 		bl	LED_amber1_Write
1124:main.c        ****             LED_amber2_Write(1);
 2823              		.loc 1 1124 0
 2824 0b40 0120     		movs	r0, #1
 2825 0b42 FFF7FEFF 		bl	LED_amber2_Write
1125:main.c        ****             LED_amber3_Write(0);
 2826              		.loc 1 1125 0
 2827 0b46 0020     		movs	r0, #0
 2828 0b48 FFF7FEFF 		bl	LED_amber3_Write
1126:main.c        ****             LED_amber4_Write(0);
 2829              		.loc 1 1126 0
 2830 0b4c 0020     		movs	r0, #0
 2831 0b4e FFF7FEFF 		bl	LED_amber4_Write
 2832 0b52 28E0     		b	.L119
 2833              	.L120:
1127:main.c        ****         }
1128:main.c        ****         else if (!oct3_Read())
 2834              		.loc 1 1128 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 71


 2835 0b54 FFF7FEFF 		bl	oct3_Read
 2836 0b58 0346     		mov	r3, r0
 2837 0b5a 002B     		cmp	r3, #0
 2838 0b5c 0FD1     		bne	.L121
1129:main.c        ****         {
1130:main.c        ****             octave = 2;
 2839              		.loc 1 1130 0
 2840 0b5e 774B     		ldr	r3, .L176+16
 2841 0b60 0222     		movs	r2, #2
 2842 0b62 1A60     		str	r2, [r3]
1131:main.c        ****             LED_amber1_Write(0);
 2843              		.loc 1 1131 0
 2844 0b64 0020     		movs	r0, #0
 2845 0b66 FFF7FEFF 		bl	LED_amber1_Write
1132:main.c        ****             LED_amber2_Write(0);
 2846              		.loc 1 1132 0
 2847 0b6a 0020     		movs	r0, #0
 2848 0b6c FFF7FEFF 		bl	LED_amber2_Write
1133:main.c        ****             LED_amber3_Write(1);
 2849              		.loc 1 1133 0
 2850 0b70 0120     		movs	r0, #1
 2851 0b72 FFF7FEFF 		bl	LED_amber3_Write
1134:main.c        ****             LED_amber4_Write(0);            
 2852              		.loc 1 1134 0
 2853 0b76 0020     		movs	r0, #0
 2854 0b78 FFF7FEFF 		bl	LED_amber4_Write
 2855 0b7c 13E0     		b	.L119
 2856              	.L121:
1135:main.c        ****         }
1136:main.c        ****         else if (!oct4_Read())
 2857              		.loc 1 1136 0
 2858 0b7e FFF7FEFF 		bl	oct4_Read
 2859 0b82 0346     		mov	r3, r0
 2860 0b84 002B     		cmp	r3, #0
 2861 0b86 0ED1     		bne	.L119
1137:main.c        ****         {
1138:main.c        ****             octave = 3;
 2862              		.loc 1 1138 0
 2863 0b88 6C4B     		ldr	r3, .L176+16
 2864 0b8a 0322     		movs	r2, #3
 2865 0b8c 1A60     		str	r2, [r3]
1139:main.c        ****             LED_amber1_Write(0);
 2866              		.loc 1 1139 0
 2867 0b8e 0020     		movs	r0, #0
 2868 0b90 FFF7FEFF 		bl	LED_amber1_Write
1140:main.c        ****             LED_amber2_Write(0);
 2869              		.loc 1 1140 0
 2870 0b94 0020     		movs	r0, #0
 2871 0b96 FFF7FEFF 		bl	LED_amber2_Write
1141:main.c        ****             LED_amber3_Write(0);
 2872              		.loc 1 1141 0
 2873 0b9a 0020     		movs	r0, #0
 2874 0b9c FFF7FEFF 		bl	LED_amber3_Write
1142:main.c        ****             LED_amber4_Write(1);
 2875              		.loc 1 1142 0
 2876 0ba0 0120     		movs	r0, #1
 2877 0ba2 FFF7FEFF 		bl	LED_amber4_Write
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 72


 2878              	.L119:
1143:main.c        ****         }
1144:main.c        ****         
1145:main.c        ****         if (!neck1_button_Read())
 2879              		.loc 1 1145 0
 2880 0ba6 FFF7FEFF 		bl	neck1_button_Read
 2881 0baa 0346     		mov	r3, r0
 2882 0bac 002B     		cmp	r3, #0
 2883 0bae 0BD1     		bne	.L122
1146:main.c        ****         {
1147:main.c        ****             neck = 0;
 2884              		.loc 1 1147 0
 2885 0bb0 634B     		ldr	r3, .L176+20
 2886 0bb2 0022     		movs	r2, #0
 2887 0bb4 1A70     		strb	r2, [r3]
1148:main.c        ****             currentNeck = 0;
 2888              		.loc 1 1148 0
 2889 0bb6 634B     		ldr	r3, .L176+24
 2890 0bb8 0022     		movs	r2, #0
 2891 0bba 1A60     		str	r2, [r3]
1149:main.c        ****             LED_red1_Write(0);
 2892              		.loc 1 1149 0
 2893 0bbc 0020     		movs	r0, #0
 2894 0bbe FFF7FEFF 		bl	LED_red1_Write
1150:main.c        ****             LED_green2_Write(1);
 2895              		.loc 1 1150 0
 2896 0bc2 0120     		movs	r0, #1
 2897 0bc4 FFF7FEFF 		bl	LED_green2_Write
 2898              	.L122:
1151:main.c        ****         }
1152:main.c        ****         if (!neck2_button_Read())
 2899              		.loc 1 1152 0
 2900 0bc8 FFF7FEFF 		bl	neck2_button_Read
 2901 0bcc 0346     		mov	r3, r0
 2902 0bce 002B     		cmp	r3, #0
 2903 0bd0 0BD1     		bne	.L123
1153:main.c        ****         {
1154:main.c        ****             neck = 1;
 2904              		.loc 1 1154 0
 2905 0bd2 5B4B     		ldr	r3, .L176+20
 2906 0bd4 0122     		movs	r2, #1
 2907 0bd6 1A70     		strb	r2, [r3]
1155:main.c        ****             currentNeck = 1;
 2908              		.loc 1 1155 0
 2909 0bd8 5A4B     		ldr	r3, .L176+24
 2910 0bda 0122     		movs	r2, #1
 2911 0bdc 1A60     		str	r2, [r3]
1156:main.c        ****             LED_red1_Write(1);
 2912              		.loc 1 1156 0
 2913 0bde 0120     		movs	r0, #1
 2914 0be0 FFF7FEFF 		bl	LED_red1_Write
1157:main.c        ****             LED_green2_Write(0);
 2915              		.loc 1 1157 0
 2916 0be4 0020     		movs	r0, #0
 2917 0be6 FFF7FEFF 		bl	LED_green2_Write
 2918              	.L123:
1158:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 73


1159:main.c        ****         
1160:main.c        ****         if ((!enter_button_Read()) && (enterUp))
 2919              		.loc 1 1160 0
 2920 0bea FFF7FEFF 		bl	enter_button_Read
 2921 0bee 0346     		mov	r3, r0
 2922 0bf0 002B     		cmp	r3, #0
 2923 0bf2 16D1     		bne	.L124
 2924              		.loc 1 1160 0 is_stmt 0 discriminator 1
 2925 0bf4 544B     		ldr	r3, .L176+28
 2926 0bf6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2927 0bf8 002B     		cmp	r3, #0
 2928 0bfa 12D0     		beq	.L124
1161:main.c        ****         {
1162:main.c        ****             dualSlider = !dualSlider;
 2929              		.loc 1 1162 0 is_stmt 1
 2930 0bfc 534B     		ldr	r3, .L176+32
 2931 0bfe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2932 0c00 002B     		cmp	r3, #0
 2933 0c02 0CBF     		ite	eq
 2934 0c04 0123     		moveq	r3, #1
 2935 0c06 0023     		movne	r3, #0
 2936 0c08 DBB2     		uxtb	r3, r3
 2937 0c0a 1A46     		mov	r2, r3
 2938 0c0c 4F4B     		ldr	r3, .L176+32
 2939 0c0e 1A70     		strb	r2, [r3]
1163:main.c        ****             LED_green1_Write(dualSlider);
 2940              		.loc 1 1163 0
 2941 0c10 4E4B     		ldr	r3, .L176+32
 2942 0c12 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2943 0c14 1846     		mov	r0, r3
 2944 0c16 FFF7FEFF 		bl	LED_green1_Write
1164:main.c        ****             enterUp = 0;
 2945              		.loc 1 1164 0
 2946 0c1a 4B4B     		ldr	r3, .L176+28
 2947 0c1c 0022     		movs	r2, #0
 2948 0c1e 1A70     		strb	r2, [r3]
 2949 0c20 07E0     		b	.L125
 2950              	.L124:
1165:main.c        ****         }
1166:main.c        ****         else if (enter_button_Read())
 2951              		.loc 1 1166 0
 2952 0c22 FFF7FEFF 		bl	enter_button_Read
 2953 0c26 0346     		mov	r3, r0
 2954 0c28 002B     		cmp	r3, #0
 2955 0c2a 02D0     		beq	.L125
1167:main.c        ****         {
1168:main.c        ****             enterUp = 1;
 2956              		.loc 1 1168 0
 2957 0c2c 464B     		ldr	r3, .L176+28
 2958 0c2e 0122     		movs	r2, #1
 2959 0c30 1A70     		strb	r2, [r3]
 2960              	.L125:
1169:main.c        ****         }
1170:main.c        ****         
1171:main.c        ****         
1172:main.c        ****         
1173:main.c        ****         if ((!button1_Read()) && (button1Up))
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 74


 2961              		.loc 1 1173 0
 2962 0c32 FFF7FEFF 		bl	button1_Read
 2963 0c36 0346     		mov	r3, r0
 2964 0c38 002B     		cmp	r3, #0
 2965 0c3a 12D1     		bne	.L126
 2966              		.loc 1 1173 0 is_stmt 0 discriminator 1
 2967 0c3c 444B     		ldr	r3, .L176+36
 2968 0c3e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2969 0c40 002B     		cmp	r3, #0
 2970 0c42 0ED0     		beq	.L126
1174:main.c        ****         {
1175:main.c        ****             encoderNum -= 1;
 2971              		.loc 1 1175 0 is_stmt 1
 2972 0c44 434B     		ldr	r3, .L176+40
 2973 0c46 1B68     		ldr	r3, [r3]
 2974 0c48 013B     		subs	r3, r3, #1
 2975 0c4a 424A     		ldr	r2, .L176+40
 2976 0c4c 1360     		str	r3, [r2]
1176:main.c        ****             encoderNum &= 15;
 2977              		.loc 1 1176 0
 2978 0c4e 414B     		ldr	r3, .L176+40
 2979 0c50 1B68     		ldr	r3, [r3]
 2980 0c52 03F00F03 		and	r3, r3, #15
 2981 0c56 3F4A     		ldr	r2, .L176+40
 2982 0c58 1360     		str	r3, [r2]
1177:main.c        ****             button1Up = 0;
 2983              		.loc 1 1177 0
 2984 0c5a 3D4B     		ldr	r3, .L176+36
 2985 0c5c 0022     		movs	r2, #0
 2986 0c5e 1A70     		strb	r2, [r3]
 2987 0c60 07E0     		b	.L127
 2988              	.L126:
1178:main.c        ****         }
1179:main.c        ****         else if (button1_Read())
 2989              		.loc 1 1179 0
 2990 0c62 FFF7FEFF 		bl	button1_Read
 2991 0c66 0346     		mov	r3, r0
 2992 0c68 002B     		cmp	r3, #0
 2993 0c6a 02D0     		beq	.L127
1180:main.c        ****         {
1181:main.c        ****             button1Up = 1;
 2994              		.loc 1 1181 0
 2995 0c6c 384B     		ldr	r3, .L176+36
 2996 0c6e 0122     		movs	r2, #1
 2997 0c70 1A70     		strb	r2, [r3]
 2998              	.L127:
1182:main.c        ****         }
1183:main.c        ****         
1184:main.c        ****         if ((!button2_Read()) && (button2Up))
 2999              		.loc 1 1184 0
 3000 0c72 FFF7FEFF 		bl	button2_Read
 3001 0c76 0346     		mov	r3, r0
 3002 0c78 002B     		cmp	r3, #0
 3003 0c7a 12D1     		bne	.L128
 3004              		.loc 1 1184 0 is_stmt 0 discriminator 1
 3005 0c7c 364B     		ldr	r3, .L176+44
 3006 0c7e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 75


 3007 0c80 002B     		cmp	r3, #0
 3008 0c82 0ED0     		beq	.L128
1185:main.c        ****         {
1186:main.c        ****             encoderNum += 1;
 3009              		.loc 1 1186 0 is_stmt 1
 3010 0c84 334B     		ldr	r3, .L176+40
 3011 0c86 1B68     		ldr	r3, [r3]
 3012 0c88 0133     		adds	r3, r3, #1
 3013 0c8a 324A     		ldr	r2, .L176+40
 3014 0c8c 1360     		str	r3, [r2]
1187:main.c        ****             encoderNum &= 15;
 3015              		.loc 1 1187 0
 3016 0c8e 314B     		ldr	r3, .L176+40
 3017 0c90 1B68     		ldr	r3, [r3]
 3018 0c92 03F00F03 		and	r3, r3, #15
 3019 0c96 2F4A     		ldr	r2, .L176+40
 3020 0c98 1360     		str	r3, [r2]
1188:main.c        ****             button2Up = 0;
 3021              		.loc 1 1188 0
 3022 0c9a 2F4B     		ldr	r3, .L176+44
 3023 0c9c 0022     		movs	r2, #0
 3024 0c9e 1A70     		strb	r2, [r3]
 3025 0ca0 07E0     		b	.L129
 3026              	.L128:
1189:main.c        ****         }
1190:main.c        ****         else if (button2_Read())
 3027              		.loc 1 1190 0
 3028 0ca2 FFF7FEFF 		bl	button2_Read
 3029 0ca6 0346     		mov	r3, r0
 3030 0ca8 002B     		cmp	r3, #0
 3031 0caa 02D0     		beq	.L129
1191:main.c        ****         {
1192:main.c        ****             button2Up = 1;
 3032              		.loc 1 1192 0
 3033 0cac 2A4B     		ldr	r3, .L176+44
 3034 0cae 0122     		movs	r2, #1
 3035 0cb0 1A70     		strb	r2, [r3]
 3036              	.L129:
1193:main.c        ****         }
1194:main.c        ****         
1195:main.c        ****         if ((!button3_Read()) && (button3Up))
 3037              		.loc 1 1195 0
 3038 0cb2 FFF7FEFF 		bl	button3_Read
 3039 0cb6 0346     		mov	r3, r0
 3040 0cb8 002B     		cmp	r3, #0
 3041 0cba 14D1     		bne	.L130
 3042              		.loc 1 1195 0 is_stmt 0 discriminator 1
 3043 0cbc 274B     		ldr	r3, .L176+48
 3044 0cbe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3045 0cc0 002B     		cmp	r3, #0
 3046 0cc2 10D0     		beq	.L130
1196:main.c        ****         {
1197:main.c        ****             patchNum -= 1;
 3047              		.loc 1 1197 0 is_stmt 1
 3048 0cc4 264B     		ldr	r3, .L176+52
 3049 0cc6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3050 0cc8 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 76


 3051 0cca DAB2     		uxtb	r2, r3
 3052 0ccc 244B     		ldr	r3, .L176+52
 3053 0cce 1A70     		strb	r2, [r3]
1198:main.c        ****             patchNum &= 15;
 3054              		.loc 1 1198 0
 3055 0cd0 234B     		ldr	r3, .L176+52
 3056 0cd2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3057 0cd4 03F00F03 		and	r3, r3, #15
 3058 0cd8 DAB2     		uxtb	r2, r3
 3059 0cda 214B     		ldr	r3, .L176+52
 3060 0cdc 1A70     		strb	r2, [r3]
1199:main.c        ****             button3Up = 0;
 3061              		.loc 1 1199 0
 3062 0cde 1F4B     		ldr	r3, .L176+48
 3063 0ce0 0022     		movs	r2, #0
 3064 0ce2 1A70     		strb	r2, [r3]
 3065 0ce4 07E0     		b	.L131
 3066              	.L130:
1200:main.c        ****         }
1201:main.c        ****         else if (button3_Read())
 3067              		.loc 1 1201 0
 3068 0ce6 FFF7FEFF 		bl	button3_Read
 3069 0cea 0346     		mov	r3, r0
 3070 0cec 002B     		cmp	r3, #0
 3071 0cee 02D0     		beq	.L131
1202:main.c        ****         {
1203:main.c        ****             button3Up = 1;
 3072              		.loc 1 1203 0
 3073 0cf0 1A4B     		ldr	r3, .L176+48
 3074 0cf2 0122     		movs	r2, #1
 3075 0cf4 1A70     		strb	r2, [r3]
 3076              	.L131:
1204:main.c        ****         }
1205:main.c        ****         
1206:main.c        ****         if ((!button4_Read()) && (button4Up))
 3077              		.loc 1 1206 0
 3078 0cf6 FFF7FEFF 		bl	button4_Read
 3079 0cfa 0346     		mov	r3, r0
 3080 0cfc 002B     		cmp	r3, #0
 3081 0cfe 33D1     		bne	.L132
 3082              		.loc 1 1206 0 is_stmt 0 discriminator 1
 3083 0d00 184B     		ldr	r3, .L176+56
 3084 0d02 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3085 0d04 002B     		cmp	r3, #0
 3086 0d06 2FD0     		beq	.L132
1207:main.c        ****         {
1208:main.c        ****             patchNum += 1;
 3087              		.loc 1 1208 0 is_stmt 1
 3088 0d08 154B     		ldr	r3, .L176+52
 3089 0d0a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3090 0d0c 0133     		adds	r3, r3, #1
 3091 0d0e DAB2     		uxtb	r2, r3
 3092 0d10 134B     		ldr	r3, .L176+52
 3093 0d12 1A70     		strb	r2, [r3]
1209:main.c        ****             patchNum &= 15;
 3094              		.loc 1 1209 0
 3095 0d14 124B     		ldr	r3, .L176+52
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 77


 3096 0d16 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3097 0d18 03F00F03 		and	r3, r3, #15
 3098 0d1c DAB2     		uxtb	r2, r3
 3099 0d1e 104B     		ldr	r3, .L176+52
 3100 0d20 1A70     		strb	r2, [r3]
1210:main.c        ****             button4Up = 0;
 3101              		.loc 1 1210 0
 3102 0d22 104B     		ldr	r3, .L176+56
 3103 0d24 0022     		movs	r2, #0
 3104 0d26 1A70     		strb	r2, [r3]
 3105 0d28 26E0     		b	.L133
 3106              	.L177:
 3107 0d2a 00BF     		.align	2
 3108              	.L176:
 3109 0d2c 00000000 		.word	currentPluckBuffer
 3110 0d30 00000000 		.word	rxBufferPluck
 3111 0d34 00000000 		.word	strings
 3112 0d38 00000000 		.word	prevStrings
 3113 0d3c 00000000 		.word	octave
 3114 0d40 00000000 		.word	neck
 3115 0d44 00000000 		.word	currentNeck
 3116 0d48 00000000 		.word	enterUp
 3117 0d4c 00000000 		.word	dualSlider
 3118 0d50 00000000 		.word	button1Up
 3119 0d54 00000000 		.word	encoderNum
 3120 0d58 00000000 		.word	button2Up
 3121 0d5c 00000000 		.word	button3Up
 3122 0d60 00000000 		.word	patchNum
 3123 0d64 00000000 		.word	button4Up
 3124              	.L132:
1211:main.c        ****         }
1212:main.c        ****         else if (button4_Read())
 3125              		.loc 1 1212 0
 3126 0d68 FFF7FEFF 		bl	button4_Read
 3127 0d6c 0346     		mov	r3, r0
 3128 0d6e 002B     		cmp	r3, #0
 3129 0d70 02D0     		beq	.L133
1213:main.c        ****         {
1214:main.c        ****             button4Up = 1;
 3130              		.loc 1 1214 0
 3131 0d72 404B     		ldr	r3, .L178
 3132 0d74 0122     		movs	r2, #1
 3133 0d76 1A70     		strb	r2, [r3]
 3134              	.L133:
1215:main.c        ****         }
1216:main.c        ****         
1217:main.c        ****         if ((!edit_button_Read()) && (editUp))
 3135              		.loc 1 1217 0
 3136 0d78 FFF7FEFF 		bl	edit_button_Read
 3137 0d7c 0346     		mov	r3, r0
 3138 0d7e 002B     		cmp	r3, #0
 3139 0d80 16D1     		bne	.L134
 3140              		.loc 1 1217 0 is_stmt 0 discriminator 1
 3141 0d82 3D4B     		ldr	r3, .L178+4
 3142 0d84 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3143 0d86 002B     		cmp	r3, #0
 3144 0d88 12D0     		beq	.L134
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 78


1218:main.c        ****         {
1219:main.c        ****             voice = !voice;
 3145              		.loc 1 1219 0 is_stmt 1
 3146 0d8a 3C4B     		ldr	r3, .L178+8
 3147 0d8c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3148 0d8e 002B     		cmp	r3, #0
 3149 0d90 0CBF     		ite	eq
 3150 0d92 0123     		moveq	r3, #1
 3151 0d94 0023     		movne	r3, #0
 3152 0d96 DBB2     		uxtb	r3, r3
 3153 0d98 1A46     		mov	r2, r3
 3154 0d9a 384B     		ldr	r3, .L178+8
 3155 0d9c 1A70     		strb	r2, [r3]
1220:main.c        ****             LED_red2_Write(voice);
 3156              		.loc 1 1220 0
 3157 0d9e 374B     		ldr	r3, .L178+8
 3158 0da0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3159 0da2 1846     		mov	r0, r3
 3160 0da4 FFF7FEFF 		bl	LED_red2_Write
1221:main.c        ****             editUp = 0;
 3161              		.loc 1 1221 0
 3162 0da8 334B     		ldr	r3, .L178+4
 3163 0daa 0022     		movs	r2, #0
 3164 0dac 1A70     		strb	r2, [r3]
 3165 0dae 07E0     		b	.L135
 3166              	.L134:
1222:main.c        ****         }
1223:main.c        ****         else if (edit_button_Read())
 3167              		.loc 1 1223 0
 3168 0db0 FFF7FEFF 		bl	edit_button_Read
 3169 0db4 0346     		mov	r3, r0
 3170 0db6 002B     		cmp	r3, #0
 3171 0db8 02D0     		beq	.L135
1224:main.c        ****         {
1225:main.c        ****             editUp = 1;
 3172              		.loc 1 1225 0
 3173 0dba 2F4B     		ldr	r3, .L178+4
 3174 0dbc 0122     		movs	r2, #1
 3175 0dbe 1A70     		strb	r2, [r3]
 3176              	.L135:
1226:main.c        ****         }
1227:main.c        ****         
1228:main.c        ****         if (octave != prevOctave)
1229:main.c        ****         {
1230:main.c        ****             //sendMIDIControlChange(90, octave);
1231:main.c        ****         }
1232:main.c        ****         prevOctave = octave;
 3177              		.loc 1 1232 0
 3178 0dc0 2F4B     		ldr	r3, .L178+12
 3179 0dc2 1B68     		ldr	r3, [r3]
 3180 0dc4 2F4A     		ldr	r2, .L178+16
 3181 0dc6 1360     		str	r3, [r2]
 3182              	.LBB14:
1233:main.c        ****         
1234:main.c        ****         
1235:main.c        ****         for (int i=  0; i < 4; i++)
 3183              		.loc 1 1235 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 79


 3184 0dc8 0023     		movs	r3, #0
 3185 0dca BB64     		str	r3, [r7, #72]
 3186 0dcc 4BE0     		b	.L136
 3187              	.L140:
1236:main.c        ****         {
1237:main.c        ****             knobs[i] = (ADC_SAR_Seq_1_GetResult16(i)/32);
 3188              		.loc 1 1237 0
 3189 0dce BB6C     		ldr	r3, [r7, #72]
 3190 0dd0 9BB2     		uxth	r3, r3
 3191 0dd2 1846     		mov	r0, r3
 3192 0dd4 FFF7FEFF 		bl	ADC_SAR_Seq_1_GetResult16
 3193 0dd8 0346     		mov	r3, r0
 3194 0dda 002B     		cmp	r3, #0
 3195 0ddc 00DA     		bge	.L137
 3196 0dde 1F33     		adds	r3, r3, #31
 3197              	.L137:
 3198 0de0 5B11     		asrs	r3, r3, #5
 3199 0de2 1BB2     		sxth	r3, r3
 3200 0de4 D9B2     		uxtb	r1, r3
 3201 0de6 284A     		ldr	r2, .L178+20
 3202 0de8 BB6C     		ldr	r3, [r7, #72]
 3203 0dea 1344     		add	r3, r3, r2
 3204 0dec 0A46     		mov	r2, r1
 3205 0dee 1A70     		strb	r2, [r3]
1238:main.c        ****             if (i != 1)
 3206              		.loc 1 1238 0
 3207 0df0 BB6C     		ldr	r3, [r7, #72]
 3208 0df2 012B     		cmp	r3, #1
 3209 0df4 16D0     		beq	.L138
1239:main.c        ****             {
1240:main.c        ****                 knobs[i] = 127.0f - knobs[i];
 3210              		.loc 1 1240 0
 3211 0df6 244A     		ldr	r2, .L178+20
 3212 0df8 BB6C     		ldr	r3, [r7, #72]
 3213 0dfa 1344     		add	r3, r3, r2
 3214 0dfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3215 0dfe 1846     		mov	r0, r3
 3216 0e00 FFF7FEFF 		bl	__aeabi_i2f
 3217 0e04 0346     		mov	r3, r0
 3218 0e06 1946     		mov	r1, r3
 3219 0e08 2048     		ldr	r0, .L178+24
 3220 0e0a FFF7FEFF 		bl	__aeabi_fsub
 3221 0e0e 0346     		mov	r3, r0
 3222 0e10 1846     		mov	r0, r3
 3223 0e12 FFF7FEFF 		bl	__aeabi_f2uiz
 3224 0e16 0346     		mov	r3, r0
 3225 0e18 D9B2     		uxtb	r1, r3
 3226 0e1a 1B4A     		ldr	r2, .L178+20
 3227 0e1c BB6C     		ldr	r3, [r7, #72]
 3228 0e1e 1344     		add	r3, r3, r2
 3229 0e20 0A46     		mov	r2, r1
 3230 0e22 1A70     		strb	r2, [r3]
 3231              	.L138:
1241:main.c        ****             }
1242:main.c        ****             if (knobs[i] != prevKnobs[i])
 3232              		.loc 1 1242 0
 3233 0e24 184A     		ldr	r2, .L178+20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 80


 3234 0e26 BB6C     		ldr	r3, [r7, #72]
 3235 0e28 1344     		add	r3, r3, r2
 3236 0e2a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3237 0e2c 1849     		ldr	r1, .L178+28
 3238 0e2e BB6C     		ldr	r3, [r7, #72]
 3239 0e30 0B44     		add	r3, r3, r1
 3240 0e32 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3241 0e34 9A42     		cmp	r2, r3
 3242 0e36 0AD0     		beq	.L139
1243:main.c        ****             {
1244:main.c        ****                 sendMIDIControlChange(i+17, knobs[i], 0);
 3243              		.loc 1 1244 0
 3244 0e38 BB6C     		ldr	r3, [r7, #72]
 3245 0e3a 03F11100 		add	r0, r3, #17
 3246 0e3e 124A     		ldr	r2, .L178+20
 3247 0e40 BB6C     		ldr	r3, [r7, #72]
 3248 0e42 1344     		add	r3, r3, r2
 3249 0e44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3250 0e46 0022     		movs	r2, #0
 3251 0e48 1946     		mov	r1, r3
 3252 0e4a FFF7FEFF 		bl	sendMIDIControlChange
 3253              	.L139:
1245:main.c        ****             }
1246:main.c        ****             prevKnobs[i] = knobs[i];
 3254              		.loc 1 1246 0 discriminator 2
 3255 0e4e 0E4A     		ldr	r2, .L178+20
 3256 0e50 BB6C     		ldr	r3, [r7, #72]
 3257 0e52 1344     		add	r3, r3, r2
 3258 0e54 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3259 0e56 0E4A     		ldr	r2, .L178+28
 3260 0e58 BB6C     		ldr	r3, [r7, #72]
 3261 0e5a 1344     		add	r3, r3, r2
 3262 0e5c 0A46     		mov	r2, r1
 3263 0e5e 1A70     		strb	r2, [r3]
1235:main.c        ****         {
 3264              		.loc 1 1235 0 discriminator 2
 3265 0e60 BB6C     		ldr	r3, [r7, #72]
 3266 0e62 0133     		adds	r3, r3, #1
 3267 0e64 BB64     		str	r3, [r7, #72]
 3268              	.L136:
1235:main.c        ****         {
 3269              		.loc 1 1235 0 is_stmt 0 discriminator 1
 3270 0e66 BB6C     		ldr	r3, [r7, #72]
 3271 0e68 032B     		cmp	r3, #3
 3272 0e6a B0DD     		ble	.L140
 3273              	.LBE14:
 3274              	.LBB15:
1247:main.c        ****         }
1248:main.c        ****         
1249:main.c        ****        
1250:main.c        ****         //calculate the pitch of each string based on the current Copedent
1251:main.c        ****         for (int i = 0; i < NUM_STRINGS; i++)
 3275              		.loc 1 1251 0 is_stmt 1
 3276 0e6c 0023     		movs	r3, #0
 3277 0e6e 7B64     		str	r3, [r7, #68]
 3278 0e70 8CE1     		b	.L141
 3279              	.L179:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 81


 3280 0e72 00BF     		.align	2
 3281              	.L178:
 3282 0e74 00000000 		.word	button4Up
 3283 0e78 00000000 		.word	editUp
 3284 0e7c 00000000 		.word	voice
 3285 0e80 00000000 		.word	octave
 3286 0e84 00000000 		.word	prevOctave
 3287 0e88 00000000 		.word	knobs
 3288 0e8c 0000FE42 		.word	1123942400
 3289 0e90 00000000 		.word	prevKnobs
 3290              	.L146:
 3291              	.LBB16:
1252:main.c        ****     	{
1253:main.c        ****     		//interpolate ratios for each of the strings
1254:main.c        ****            /*
1255:main.c        ****             float myMappedPos;
1256:main.c        ****             if (dualSlider)
1257:main.c        ****             {
1258:main.c        ****                myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositi
1259:main.c        ****             }
1260:main.c        ****             else
1261:main.c        ****             {
1262:main.c        ****                 myMappedPos = stringMappedPositions[0];
1263:main.c        ****             }
1264:main.c        **** 
1265:main.c        ****     		stringOctave[i] = powf(2.0f,octave);
1266:main.c        ****             */
1267:main.c        ****     		//then apply those ratios to the fundamental frequencies
1268:main.c        ****     		float tempMIDI = (copedent[currentNeck][0][i] +
 3292              		.loc 1 1268 0
 3293 0e94 A64B     		ldr	r3, .L180
 3294 0e96 1A68     		ldr	r2, [r3]
 3295 0e98 A649     		ldr	r1, .L180+4
 3296 0e9a 1346     		mov	r3, r2
 3297 0e9c 5B01     		lsls	r3, r3, #5
 3298 0e9e 1344     		add	r3, r3, r2
 3299 0ea0 9B00     		lsls	r3, r3, #2
 3300 0ea2 7A6C     		ldr	r2, [r7, #68]
 3301 0ea4 1344     		add	r3, r3, r2
 3302 0ea6 51F82340 		ldr	r4, [r1, r3, lsl #2]	@ float
1269:main.c        ****                         (copedent[currentNeck][4][i] * pedals_float[0]) +
 3303              		.loc 1 1269 0
 3304 0eaa A14B     		ldr	r3, .L180
 3305 0eac 1A68     		ldr	r2, [r3]
 3306 0eae A149     		ldr	r1, .L180+4
 3307 0eb0 1346     		mov	r3, r2
 3308 0eb2 5B01     		lsls	r3, r3, #5
 3309 0eb4 1344     		add	r3, r3, r2
 3310 0eb6 9B00     		lsls	r3, r3, #2
 3311 0eb8 7A6C     		ldr	r2, [r7, #68]
 3312 0eba 1344     		add	r3, r3, r2
 3313 0ebc 3033     		adds	r3, r3, #48
 3314 0ebe 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 3315 0ec2 9D4B     		ldr	r3, .L180+8
 3316 0ec4 1B68     		ldr	r3, [r3]	@ float
 3317 0ec6 1946     		mov	r1, r3
 3318 0ec8 1046     		mov	r0, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 82


 3319 0eca FFF7FEFF 		bl	__aeabi_fmul
 3320 0ece 0346     		mov	r3, r0
1268:main.c        ****                         (copedent[currentNeck][4][i] * pedals_float[0]) +
 3321              		.loc 1 1268 0
 3322 0ed0 1946     		mov	r1, r3
 3323 0ed2 2046     		mov	r0, r4
 3324 0ed4 FFF7FEFF 		bl	__aeabi_fadd
 3325 0ed8 0346     		mov	r3, r0
 3326 0eda 1C46     		mov	r4, r3
1270:main.c        ****                         (copedent[currentNeck][5][i] * pedals_float[1]) +
 3327              		.loc 1 1270 0
 3328 0edc 944B     		ldr	r3, .L180
 3329 0ede 1A68     		ldr	r2, [r3]
 3330 0ee0 9449     		ldr	r1, .L180+4
 3331 0ee2 1346     		mov	r3, r2
 3332 0ee4 5B01     		lsls	r3, r3, #5
 3333 0ee6 1344     		add	r3, r3, r2
 3334 0ee8 9B00     		lsls	r3, r3, #2
 3335 0eea 7A6C     		ldr	r2, [r7, #68]
 3336 0eec 1344     		add	r3, r3, r2
 3337 0eee 3C33     		adds	r3, r3, #60
 3338 0ef0 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 3339 0ef4 904B     		ldr	r3, .L180+8
 3340 0ef6 5B68     		ldr	r3, [r3, #4]	@ float
 3341 0ef8 1946     		mov	r1, r3
 3342 0efa 1046     		mov	r0, r2
 3343 0efc FFF7FEFF 		bl	__aeabi_fmul
 3344 0f00 0346     		mov	r3, r0
1269:main.c        ****                         (copedent[currentNeck][4][i] * pedals_float[0]) +
 3345              		.loc 1 1269 0
 3346 0f02 1946     		mov	r1, r3
 3347 0f04 2046     		mov	r0, r4
 3348 0f06 FFF7FEFF 		bl	__aeabi_fadd
 3349 0f0a 0346     		mov	r3, r0
 3350 0f0c 1C46     		mov	r4, r3
1271:main.c        ****                         (copedent[currentNeck][6][i] * pedals_float[2]) +
 3351              		.loc 1 1271 0
 3352 0f0e 884B     		ldr	r3, .L180
 3353 0f10 1A68     		ldr	r2, [r3]
 3354 0f12 8849     		ldr	r1, .L180+4
 3355 0f14 1346     		mov	r3, r2
 3356 0f16 5B01     		lsls	r3, r3, #5
 3357 0f18 1344     		add	r3, r3, r2
 3358 0f1a 9B00     		lsls	r3, r3, #2
 3359 0f1c 7A6C     		ldr	r2, [r7, #68]
 3360 0f1e 1344     		add	r3, r3, r2
 3361 0f20 4833     		adds	r3, r3, #72
 3362 0f22 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 3363 0f26 844B     		ldr	r3, .L180+8
 3364 0f28 9B68     		ldr	r3, [r3, #8]	@ float
 3365 0f2a 1946     		mov	r1, r3
 3366 0f2c 1046     		mov	r0, r2
 3367 0f2e FFF7FEFF 		bl	__aeabi_fmul
 3368 0f32 0346     		mov	r3, r0
1270:main.c        ****                         (copedent[currentNeck][5][i] * pedals_float[1]) +
 3369              		.loc 1 1270 0
 3370 0f34 1946     		mov	r1, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 83


 3371 0f36 2046     		mov	r0, r4
 3372 0f38 FFF7FEFF 		bl	__aeabi_fadd
 3373 0f3c 0346     		mov	r3, r0
 3374 0f3e 1C46     		mov	r4, r3
1272:main.c        ****                         (copedent[currentNeck][7][i] * pedals_float[3]) +
 3375              		.loc 1 1272 0
 3376 0f40 7B4B     		ldr	r3, .L180
 3377 0f42 1A68     		ldr	r2, [r3]
 3378 0f44 7B49     		ldr	r1, .L180+4
 3379 0f46 1346     		mov	r3, r2
 3380 0f48 5B01     		lsls	r3, r3, #5
 3381 0f4a 1344     		add	r3, r3, r2
 3382 0f4c 9B00     		lsls	r3, r3, #2
 3383 0f4e 7A6C     		ldr	r2, [r7, #68]
 3384 0f50 1344     		add	r3, r3, r2
 3385 0f52 5433     		adds	r3, r3, #84
 3386 0f54 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 3387 0f58 774B     		ldr	r3, .L180+8
 3388 0f5a DB68     		ldr	r3, [r3, #12]	@ float
 3389 0f5c 1946     		mov	r1, r3
 3390 0f5e 1046     		mov	r0, r2
 3391 0f60 FFF7FEFF 		bl	__aeabi_fmul
 3392 0f64 0346     		mov	r3, r0
1271:main.c        ****                         (copedent[currentNeck][6][i] * pedals_float[2]) +
 3393              		.loc 1 1271 0
 3394 0f66 1946     		mov	r1, r3
 3395 0f68 2046     		mov	r0, r4
 3396 0f6a FFF7FEFF 		bl	__aeabi_fadd
 3397 0f6e 0346     		mov	r3, r0
 3398 0f70 1C46     		mov	r4, r3
1273:main.c        ****                         (copedent[currentNeck][8][i] * pedals_float[4]) +
 3399              		.loc 1 1273 0
 3400 0f72 6F4B     		ldr	r3, .L180
 3401 0f74 1A68     		ldr	r2, [r3]
 3402 0f76 6F49     		ldr	r1, .L180+4
 3403 0f78 1346     		mov	r3, r2
 3404 0f7a 5B01     		lsls	r3, r3, #5
 3405 0f7c 1344     		add	r3, r3, r2
 3406 0f7e 9B00     		lsls	r3, r3, #2
 3407 0f80 7A6C     		ldr	r2, [r7, #68]
 3408 0f82 1344     		add	r3, r3, r2
 3409 0f84 6033     		adds	r3, r3, #96
 3410 0f86 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 3411 0f8a 6B4B     		ldr	r3, .L180+8
 3412 0f8c 1B69     		ldr	r3, [r3, #16]	@ float
 3413 0f8e 1946     		mov	r1, r3
 3414 0f90 1046     		mov	r0, r2
 3415 0f92 FFF7FEFF 		bl	__aeabi_fmul
 3416 0f96 0346     		mov	r3, r0
1272:main.c        ****                         (copedent[currentNeck][7][i] * pedals_float[3]) +
 3417              		.loc 1 1272 0
 3418 0f98 1946     		mov	r1, r3
 3419 0f9a 2046     		mov	r0, r4
 3420 0f9c FFF7FEFF 		bl	__aeabi_fadd
 3421 0fa0 0346     		mov	r3, r0
 3422 0fa2 1C46     		mov	r4, r3
1274:main.c        ****                         (copedent[currentNeck][10][i] * pedals_float[5]) +
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 84


 3423              		.loc 1 1274 0
 3424 0fa4 624B     		ldr	r3, .L180
 3425 0fa6 1A68     		ldr	r2, [r3]
 3426 0fa8 6249     		ldr	r1, .L180+4
 3427 0faa 1346     		mov	r3, r2
 3428 0fac 5B01     		lsls	r3, r3, #5
 3429 0fae 1344     		add	r3, r3, r2
 3430 0fb0 9B00     		lsls	r3, r3, #2
 3431 0fb2 7A6C     		ldr	r2, [r7, #68]
 3432 0fb4 1344     		add	r3, r3, r2
 3433 0fb6 7833     		adds	r3, r3, #120
 3434 0fb8 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 3435 0fbc 5E4B     		ldr	r3, .L180+8
 3436 0fbe 5B69     		ldr	r3, [r3, #20]	@ float
 3437 0fc0 1946     		mov	r1, r3
 3438 0fc2 1046     		mov	r0, r2
 3439 0fc4 FFF7FEFF 		bl	__aeabi_fmul
 3440 0fc8 0346     		mov	r3, r0
1273:main.c        ****                         (copedent[currentNeck][8][i] * pedals_float[4]) +
 3441              		.loc 1 1273 0
 3442 0fca 1946     		mov	r1, r3
 3443 0fcc 2046     		mov	r0, r4
 3444 0fce FFF7FEFF 		bl	__aeabi_fadd
 3445 0fd2 0346     		mov	r3, r0
 3446 0fd4 1C46     		mov	r4, r3
1275:main.c        ****                         (copedent[currentNeck][9][i] * pedals_float[6]) +
 3447              		.loc 1 1275 0
 3448 0fd6 564B     		ldr	r3, .L180
 3449 0fd8 1A68     		ldr	r2, [r3]
 3450 0fda 5649     		ldr	r1, .L180+4
 3451 0fdc 1346     		mov	r3, r2
 3452 0fde 5B01     		lsls	r3, r3, #5
 3453 0fe0 1344     		add	r3, r3, r2
 3454 0fe2 9B00     		lsls	r3, r3, #2
 3455 0fe4 7A6C     		ldr	r2, [r7, #68]
 3456 0fe6 1344     		add	r3, r3, r2
 3457 0fe8 6C33     		adds	r3, r3, #108
 3458 0fea 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 3459 0fee 524B     		ldr	r3, .L180+8
 3460 0ff0 9B69     		ldr	r3, [r3, #24]	@ float
 3461 0ff2 1946     		mov	r1, r3
 3462 0ff4 1046     		mov	r0, r2
 3463 0ff6 FFF7FEFF 		bl	__aeabi_fmul
 3464 0ffa 0346     		mov	r3, r0
1274:main.c        ****                         (copedent[currentNeck][10][i] * pedals_float[5]) +
 3465              		.loc 1 1274 0
 3466 0ffc 1946     		mov	r1, r3
 3467 0ffe 2046     		mov	r0, r4
 3468 1000 FFF7FEFF 		bl	__aeabi_fadd
 3469 1004 0346     		mov	r3, r0
 3470 1006 1C46     		mov	r4, r3
1276:main.c        ****                         (copedent[currentNeck][3][i] * pedals_float[7]) +
 3471              		.loc 1 1276 0
 3472 1008 494B     		ldr	r3, .L180
 3473 100a 1A68     		ldr	r2, [r3]
 3474 100c 4949     		ldr	r1, .L180+4
 3475 100e 1346     		mov	r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 85


 3476 1010 5B01     		lsls	r3, r3, #5
 3477 1012 1344     		add	r3, r3, r2
 3478 1014 9B00     		lsls	r3, r3, #2
 3479 1016 7A6C     		ldr	r2, [r7, #68]
 3480 1018 1344     		add	r3, r3, r2
 3481 101a 2433     		adds	r3, r3, #36
 3482 101c 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 3483 1020 454B     		ldr	r3, .L180+8
 3484 1022 DB69     		ldr	r3, [r3, #28]	@ float
 3485 1024 1946     		mov	r1, r3
 3486 1026 1046     		mov	r0, r2
 3487 1028 FFF7FEFF 		bl	__aeabi_fmul
 3488 102c 0346     		mov	r3, r0
1275:main.c        ****                         (copedent[currentNeck][9][i] * pedals_float[6]) +
 3489              		.loc 1 1275 0
 3490 102e 1946     		mov	r1, r3
 3491 1030 2046     		mov	r0, r4
 3492 1032 FFF7FEFF 		bl	__aeabi_fadd
 3493 1036 0346     		mov	r3, r0
 3494 1038 1C46     		mov	r4, r3
1277:main.c        ****                         (copedent[currentNeck][1][i] * pedals_float[8]) +
 3495              		.loc 1 1277 0
 3496 103a 3D4B     		ldr	r3, .L180
 3497 103c 1A68     		ldr	r2, [r3]
 3498 103e 3D49     		ldr	r1, .L180+4
 3499 1040 1346     		mov	r3, r2
 3500 1042 5B01     		lsls	r3, r3, #5
 3501 1044 1344     		add	r3, r3, r2
 3502 1046 9B00     		lsls	r3, r3, #2
 3503 1048 7A6C     		ldr	r2, [r7, #68]
 3504 104a 1344     		add	r3, r3, r2
 3505 104c 0C33     		adds	r3, r3, #12
 3506 104e 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 3507 1052 394B     		ldr	r3, .L180+8
 3508 1054 1B6A     		ldr	r3, [r3, #32]	@ float
 3509 1056 1946     		mov	r1, r3
 3510 1058 1046     		mov	r0, r2
 3511 105a FFF7FEFF 		bl	__aeabi_fmul
 3512 105e 0346     		mov	r3, r0
1276:main.c        ****                         (copedent[currentNeck][3][i] * pedals_float[7]) +
 3513              		.loc 1 1276 0
 3514 1060 1946     		mov	r1, r3
 3515 1062 2046     		mov	r0, r4
 3516 1064 FFF7FEFF 		bl	__aeabi_fadd
 3517 1068 0346     		mov	r3, r0
 3518 106a 1C46     		mov	r4, r3
1278:main.c        ****                         (copedent[currentNeck][2][i] * pedals_float[9]));
 3519              		.loc 1 1278 0
 3520 106c 304B     		ldr	r3, .L180
 3521 106e 1A68     		ldr	r2, [r3]
 3522 1070 3049     		ldr	r1, .L180+4
 3523 1072 1346     		mov	r3, r2
 3524 1074 5B01     		lsls	r3, r3, #5
 3525 1076 1344     		add	r3, r3, r2
 3526 1078 9B00     		lsls	r3, r3, #2
 3527 107a 7A6C     		ldr	r2, [r7, #68]
 3528 107c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 86


 3529 107e 1833     		adds	r3, r3, #24
 3530 1080 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 3531 1084 2C4B     		ldr	r3, .L180+8
 3532 1086 5B6A     		ldr	r3, [r3, #36]	@ float
 3533 1088 1946     		mov	r1, r3
 3534 108a 1046     		mov	r0, r2
 3535 108c FFF7FEFF 		bl	__aeabi_fmul
 3536 1090 0346     		mov	r3, r0
1268:main.c        ****                         (copedent[currentNeck][4][i] * pedals_float[0]) +
 3537              		.loc 1 1268 0
 3538 1092 1946     		mov	r1, r3
 3539 1094 2046     		mov	r0, r4
 3540 1096 FFF7FEFF 		bl	__aeabi_fadd
 3541 109a 0346     		mov	r3, r0
 3542 109c FB61     		str	r3, [r7, #28]	@ float
1279:main.c        ****     		//stringPitch[i] = tempFreq;
1280:main.c        ****             //stringMIDI[i] = ftom(stringPitch[i]);
1281:main.c        ****             
1282:main.c        ****             float openStringMIDI  = copedent[currentNeck][0][i];
 3543              		.loc 1 1282 0
 3544 109e 244B     		ldr	r3, .L180
 3545 10a0 1A68     		ldr	r2, [r3]
 3546 10a2 2449     		ldr	r1, .L180+4
 3547 10a4 1346     		mov	r3, r2
 3548 10a6 5B01     		lsls	r3, r3, #5
 3549 10a8 1344     		add	r3, r3, r2
 3550 10aa 9B00     		lsls	r3, r3, #2
 3551 10ac 7A6C     		ldr	r2, [r7, #68]
 3552 10ae 1344     		add	r3, r3, r2
 3553 10b0 51F82330 		ldr	r3, [r1, r3, lsl #2]	@ float
 3554 10b4 BB61     		str	r3, [r7, #24]	@ float
1283:main.c        ****             openStringMIDI_Int[i] = (int)openStringMIDI;
 3555              		.loc 1 1283 0
 3556 10b6 B869     		ldr	r0, [r7, #24]	@ float
 3557 10b8 FFF7FEFF 		bl	__aeabi_f2iz
 3558 10bc 0146     		mov	r1, r0
 3559 10be 1F4A     		ldr	r2, .L180+12
 3560 10c0 7B6C     		ldr	r3, [r7, #68]
 3561 10c2 42F82310 		str	r1, [r2, r3, lsl #2]
1284:main.c        ****             
1285:main.c        ****             float barMIDI = ftom((invStringMappedPositions[0]) * mtof(tempMIDI));
 3562              		.loc 1 1285 0
 3563 10c6 1E4B     		ldr	r3, .L180+16
 3564 10c8 1C68     		ldr	r4, [r3]	@ float
 3565 10ca F869     		ldr	r0, [r7, #28]	@ float
 3566 10cc FFF7FEFF 		bl	mtof
 3567 10d0 0346     		mov	r3, r0
 3568 10d2 1946     		mov	r1, r3
 3569 10d4 2046     		mov	r0, r4
 3570 10d6 FFF7FEFF 		bl	__aeabi_fmul
 3571 10da 0346     		mov	r3, r0
 3572 10dc 1846     		mov	r0, r3
 3573 10de FFF7FEFF 		bl	ftom
 3574 10e2 7861     		str	r0, [r7, #20]	@ float
1286:main.c        ****             
1287:main.c        ****             float computerMIDIOffset = barMIDI - openStringMIDI_Int[i];// + stringOctave[i];
 3575              		.loc 1 1287 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 87


 3576 10e4 154A     		ldr	r2, .L180+12
 3577 10e6 7B6C     		ldr	r3, [r7, #68]
 3578 10e8 52F82330 		ldr	r3, [r2, r3, lsl #2]
 3579 10ec 1846     		mov	r0, r3
 3580 10ee FFF7FEFF 		bl	__aeabi_i2f
 3581 10f2 0346     		mov	r3, r0
 3582 10f4 1946     		mov	r1, r3
 3583 10f6 7869     		ldr	r0, [r7, #20]	@ float
 3584 10f8 FFF7FEFF 		bl	__aeabi_fsub
 3585 10fc 0346     		mov	r3, r0
 3586 10fe 3B61     		str	r3, [r7, #16]	@ float
1288:main.c        ****             
1289:main.c        ****             float pitchBendAmount = (computerMIDIOffset* 341.0f) + 8192.0f;  // 14bit number divide
 3587              		.loc 1 1289 0
 3588 1100 1049     		ldr	r1, .L180+20
 3589 1102 3869     		ldr	r0, [r7, #16]	@ float
 3590 1104 FFF7FEFF 		bl	__aeabi_fmul
 3591 1108 0346     		mov	r3, r0
 3592 110a 4FF08C41 		mov	r1, #1174405120
 3593 110e 1846     		mov	r0, r3
 3594 1110 FFF7FEFF 		bl	__aeabi_fadd
 3595 1114 0346     		mov	r3, r0
 3596 1116 FB60     		str	r3, [r7, #12]	@ float
1290:main.c        ****             if (pitchBendAmount != prevStringPitchBend[i])
 3597              		.loc 1 1290 0
 3598 1118 0B4A     		ldr	r2, .L180+24
 3599 111a 7B6C     		ldr	r3, [r7, #68]
 3600 111c 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3601 1120 F968     		ldr	r1, [r7, #12]	@ float
 3602 1122 1846     		mov	r0, r3
 3603 1124 FFF7FEFF 		bl	__aeabi_fcmpeq
 3604 1128 0346     		mov	r3, r0
 3605 112a 002B     		cmp	r3, #0
 3606 112c 19D1     		bne	.L142
 3607 112e 0DE0     		b	.L181
 3608              	.L182:
 3609              		.align	2
 3610              	.L180:
 3611 1130 00000000 		.word	currentNeck
 3612 1134 00000000 		.word	copedent
 3613 1138 00000000 		.word	pedals_float
 3614 113c 00000000 		.word	openStringMIDI_Int
 3615 1140 00000000 		.word	invStringMappedPositions
 3616 1144 0080AA43 		.word	1135247360
 3617 1148 00000000 		.word	prevStringPitchBend
 3618              	.L181:
1291:main.c        ****             {
1292:main.c        ****                 sendMIDIPitchBend((uint)pitchBendAmount, i+1);
 3619              		.loc 1 1292 0
 3620 114c F868     		ldr	r0, [r7, #12]	@ float
 3621 114e FFF7FEFF 		bl	__aeabi_f2uiz
 3622 1152 0346     		mov	r3, r0
 3623 1154 1A46     		mov	r2, r3
 3624 1156 7B6C     		ldr	r3, [r7, #68]
 3625 1158 0133     		adds	r3, r3, #1
 3626 115a 1946     		mov	r1, r3
 3627 115c 1046     		mov	r0, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 88


 3628 115e FFF7FEFF 		bl	sendMIDIPitchBend
 3629              	.L142:
1293:main.c        ****             }
1294:main.c        ****             prevStringPitchBend[i] = pitchBendAmount;
 3630              		.loc 1 1294 0
 3631 1162 7549     		ldr	r1, .L183
 3632 1164 7B6C     		ldr	r3, [r7, #68]
 3633 1166 FA68     		ldr	r2, [r7, #12]	@ float
 3634 1168 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
1295:main.c        ****             if (tempMIDI > 0.0f)
 3635              		.loc 1 1295 0
 3636 116c 4FF00001 		mov	r1, #0
 3637 1170 F869     		ldr	r0, [r7, #28]	@ float
 3638 1172 FFF7FEFF 		bl	__aeabi_fcmpgt
 3639 1176 0346     		mov	r3, r0
 3640 1178 002B     		cmp	r3, #0
 3641 117a 04D0     		beq	.L144
1296:main.c        ****             {
1297:main.c        ****                 stringMIDI[i] = tempMIDI;
 3642              		.loc 1 1297 0
 3643 117c 6F49     		ldr	r1, .L183+4
 3644 117e 7B6C     		ldr	r3, [r7, #68]
 3645 1180 FA69     		ldr	r2, [r7, #28]	@ float
 3646 1182 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 3647              	.L144:
 3648              	.LBE16:
1251:main.c        ****     	{
 3649              		.loc 1 1251 0 discriminator 2
 3650 1186 7B6C     		ldr	r3, [r7, #68]
 3651 1188 0133     		adds	r3, r3, #1
 3652 118a 7B64     		str	r3, [r7, #68]
 3653              	.L141:
1251:main.c        ****     	{
 3654              		.loc 1 1251 0 is_stmt 0 discriminator 1
 3655 118c 7B6C     		ldr	r3, [r7, #68]
 3656 118e 0B2B     		cmp	r3, #11
 3657 1190 7FF780AE 		ble	.L146
 3658              	.LBE15:
1298:main.c        ****             }
1299:main.c        ****     	}
1300:main.c        **** 
1301:main.c        ****         if (encoder_button_Read())
 3659              		.loc 1 1301 0 is_stmt 1
 3660 1194 FFF7FEFF 		bl	encoder_button_Read
 3661 1198 0346     		mov	r3, r0
 3662 119a 002B     		cmp	r3, #0
 3663 119c 10D0     		beq	.L147
1302:main.c        ****         {
1303:main.c        ****             encoderVal[encoderNum] += QuadDec_1_GetCounter() * 4;
 3664              		.loc 1 1303 0
 3665 119e FFF7FEFF 		bl	QuadDec_1_GetCounter
 3666 11a2 0346     		mov	r3, r0
 3667 11a4 9800     		lsls	r0, r3, #2
 3668 11a6 664B     		ldr	r3, .L183+8
 3669 11a8 1B68     		ldr	r3, [r3]
 3670 11aa 654A     		ldr	r2, .L183+8
 3671 11ac 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 89


 3672 11ae 6549     		ldr	r1, .L183+12
 3673 11b0 8A5C     		ldrb	r2, [r1, r2]
 3674 11b2 D1B2     		uxtb	r1, r2
 3675 11b4 C2B2     		uxtb	r2, r0
 3676 11b6 0A44     		add	r2, r2, r1
 3677 11b8 D1B2     		uxtb	r1, r2
 3678 11ba 624A     		ldr	r2, .L183+12
 3679 11bc D154     		strb	r1, [r2, r3]
 3680 11be 0FE0     		b	.L148
 3681              	.L147:
1304:main.c        ****         }
1305:main.c        ****         else
1306:main.c        ****         {
1307:main.c        ****             encoderVal[encoderNum] += QuadDec_1_GetCounter();
 3682              		.loc 1 1307 0
 3683 11c0 FFF7FEFF 		bl	QuadDec_1_GetCounter
 3684 11c4 0346     		mov	r3, r0
 3685 11c6 1846     		mov	r0, r3
 3686 11c8 5D4B     		ldr	r3, .L183+8
 3687 11ca 1B68     		ldr	r3, [r3]
 3688 11cc 5C4A     		ldr	r2, .L183+8
 3689 11ce 1268     		ldr	r2, [r2]
 3690 11d0 5C49     		ldr	r1, .L183+12
 3691 11d2 8A5C     		ldrb	r2, [r1, r2]
 3692 11d4 D1B2     		uxtb	r1, r2
 3693 11d6 C2B2     		uxtb	r2, r0
 3694 11d8 0A44     		add	r2, r2, r1
 3695 11da D1B2     		uxtb	r1, r2
 3696 11dc 594A     		ldr	r2, .L183+12
 3697 11de D154     		strb	r1, [r2, r3]
 3698              	.L148:
1308:main.c        ****         }
1309:main.c        ****         QuadDec_1_SetCounter(0);
 3699              		.loc 1 1309 0
 3700 11e0 0020     		movs	r0, #0
 3701 11e2 FFF7FEFF 		bl	QuadDec_1_SetCounter
1310:main.c        ****         
1311:main.c        **** 
1312:main.c        ****         
1313:main.c        ****         if (USB_check_flag)
 3702              		.loc 1 1313 0
 3703 11e6 584B     		ldr	r3, .L183+16
 3704 11e8 1B78     		ldrb	r3, [r3]
 3705 11ea DBB2     		uxtb	r3, r3
 3706 11ec 002B     		cmp	r3, #0
 3707 11ee 01D0     		beq	.L149
1314:main.c        ****         {
1315:main.c        ****             checkUSB_Vbus();
 3708              		.loc 1 1315 0
 3709 11f0 FFF7FEFF 		bl	checkUSB_Vbus
 3710              	.L149:
1316:main.c        ****         }
1317:main.c        ****         //only service the USB bus if there is a computer plugged in
1318:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 3711              		.loc 1 1318 0
 3712 11f4 554B     		ldr	r3, .L183+20
 3713 11f6 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 90


 3714 11f8 DBB2     		uxtb	r3, r3
 3715 11fa 002B     		cmp	r3, #0
 3716 11fc 13D0     		beq	.L150
 3717              		.loc 1 1318 0 is_stmt 0 discriminator 1
 3718 11fe FFF7FEFF 		bl	USB_VBusPresent
 3719 1202 0346     		mov	r3, r0
 3720 1204 002B     		cmp	r3, #0
 3721 1206 0ED0     		beq	.L150
1319:main.c        ****         {
1320:main.c        ****             if (midiSent > 64)
 3722              		.loc 1 1320 0 is_stmt 1
 3723 1208 514B     		ldr	r3, .L183+24
 3724 120a 1B88     		ldrh	r3, [r3]
 3725 120c 402B     		cmp	r3, #64
 3726 120e 05D9     		bls	.L151
1321:main.c        ****             {
1322:main.c        ****                 midiOverflow++;
 3727              		.loc 1 1322 0
 3728 1210 504B     		ldr	r3, .L183+28
 3729 1212 1B88     		ldrh	r3, [r3]
 3730 1214 0133     		adds	r3, r3, #1
 3731 1216 9AB2     		uxth	r2, r3
 3732 1218 4E4B     		ldr	r3, .L183+28
 3733 121a 1A80     		strh	r2, [r3]	@ movhi
 3734              	.L151:
1323:main.c        ****             }
1324:main.c        ****             midiSent = 0;
 3735              		.loc 1 1324 0
 3736 121c 4C4B     		ldr	r3, .L183+24
 3737 121e 0022     		movs	r2, #0
 3738 1220 1A80     		strh	r2, [r3]	@ movhi
1325:main.c        ****             USB_service();
 3739              		.loc 1 1325 0
 3740 1222 FFF7FEFF 		bl	USB_service
 3741              	.L150:
 3742              	.LBB17:
1326:main.c        ****         }
1327:main.c        **** 
1328:main.c        ****         
1329:main.c        ****         /*
1330:main.c        ****         for (int i = 0; i < 10; i++)
1331:main.c        ****         {
1332:main.c        ****             myArray[i * 2] = processed_pedals[i] >> 8;
1333:main.c        ****             myArray[(i * 2) + 1] = processed_pedals[i] & 0xff;
1334:main.c        ****         }
1335:main.c        ****         
1336:main.c        ****         myArray[20] = octave | (voice << 2) | (dualSlider << 3) | (neck << 4);
1337:main.c        ****         for (int i = 0; i < 4; i++)
1338:main.c        ****         {
1339:main.c        ****             myArray[i+21] = knobs[i];
1340:main.c        ****         }
1341:main.c        ****         myArray[25] = processed_volumePedal >> 8;
1342:main.c        ****         myArray[26] = processed_volumePedal & 0xff;
1343:main.c        ****         */
1344:main.c        ****         
1345:main.c        ****         for (int i = 0; i < 12; i++)
 3743              		.loc 1 1345 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 91


 3744 1226 0023     		movs	r3, #0
 3745 1228 3B64     		str	r3, [r7, #64]
 3746 122a 1EE0     		b	.L152
 3747              	.L153:
 3748              	.LBB18:
1346:main.c        ****         {
1347:main.c        ****             union breakFloat tempBreak;
1348:main.c        ****             tempBreak.f = stringMIDI[i];
 3749              		.loc 1 1348 0 discriminator 3
 3750 122c 434A     		ldr	r2, .L183+4
 3751 122e 3B6C     		ldr	r3, [r7, #64]
 3752 1230 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3753 1234 7B60     		str	r3, [r7, #4]	@ float
1349:main.c        ****             
1350:main.c        ****             
1351:main.c        ****             myArray[i * 4] = tempBreak.b[0];
 3754              		.loc 1 1351 0 discriminator 3
 3755 1236 3B6C     		ldr	r3, [r7, #64]
 3756 1238 9B00     		lsls	r3, r3, #2
 3757 123a 3979     		ldrb	r1, [r7, #4]	@ zero_extendqisi2
 3758 123c 464A     		ldr	r2, .L183+32
 3759 123e D154     		strb	r1, [r2, r3]
1352:main.c        ****             myArray[(i * 4) + 1] = tempBreak.b[1];
 3760              		.loc 1 1352 0 discriminator 3
 3761 1240 3B6C     		ldr	r3, [r7, #64]
 3762 1242 9B00     		lsls	r3, r3, #2
 3763 1244 0133     		adds	r3, r3, #1
 3764 1246 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 3765 1248 434A     		ldr	r2, .L183+32
 3766 124a D154     		strb	r1, [r2, r3]
1353:main.c        ****             myArray[(i * 4) + 2] = tempBreak.b[2];
 3767              		.loc 1 1353 0 discriminator 3
 3768 124c 3B6C     		ldr	r3, [r7, #64]
 3769 124e 9B00     		lsls	r3, r3, #2
 3770 1250 0233     		adds	r3, r3, #2
 3771 1252 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 3772 1254 404A     		ldr	r2, .L183+32
 3773 1256 D154     		strb	r1, [r2, r3]
1354:main.c        ****             myArray[(i * 4) + 3] = tempBreak.b[3];
 3774              		.loc 1 1354 0 discriminator 3
 3775 1258 3B6C     		ldr	r3, [r7, #64]
 3776 125a 9B00     		lsls	r3, r3, #2
 3777 125c 0333     		adds	r3, r3, #3
 3778 125e F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 3779 1260 3D4A     		ldr	r2, .L183+32
 3780 1262 D154     		strb	r1, [r2, r3]
 3781              	.LBE18:
1345:main.c        ****         {
 3782              		.loc 1 1345 0 discriminator 3
 3783 1264 3B6C     		ldr	r3, [r7, #64]
 3784 1266 0133     		adds	r3, r3, #1
 3785 1268 3B64     		str	r3, [r7, #64]
 3786              	.L152:
1345:main.c        ****         {
 3787              		.loc 1 1345 0 is_stmt 0 discriminator 1
 3788 126a 3B6C     		ldr	r3, [r7, #64]
 3789 126c 0B2B     		cmp	r3, #11
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 92


 3790 126e DDDD     		ble	.L153
 3791              	.LBE17:
1355:main.c        ****         }
1356:main.c        ****         
1357:main.c        ****         myArray[48] = octave | (voice << 2) | (dualSlider << 3) | (neck << 4);
 3792              		.loc 1 1357 0 is_stmt 1
 3793 1270 3A4B     		ldr	r3, .L183+36
 3794 1272 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3795 1274 9B00     		lsls	r3, r3, #2
 3796 1276 5AB2     		sxtb	r2, r3
 3797 1278 394B     		ldr	r3, .L183+40
 3798 127a 1B68     		ldr	r3, [r3]
 3799 127c 5BB2     		sxtb	r3, r3
 3800 127e 1343     		orrs	r3, r3, r2
 3801 1280 5AB2     		sxtb	r2, r3
 3802 1282 384B     		ldr	r3, .L183+44
 3803 1284 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3804 1286 DB00     		lsls	r3, r3, #3
 3805 1288 5BB2     		sxtb	r3, r3
 3806 128a 1343     		orrs	r3, r3, r2
 3807 128c 5AB2     		sxtb	r2, r3
 3808 128e 364B     		ldr	r3, .L183+48
 3809 1290 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3810 1292 1B01     		lsls	r3, r3, #4
 3811 1294 5BB2     		sxtb	r3, r3
 3812 1296 1343     		orrs	r3, r3, r2
 3813 1298 5BB2     		sxtb	r3, r3
 3814 129a DAB2     		uxtb	r2, r3
 3815 129c 2E4B     		ldr	r3, .L183+32
 3816 129e 83F83020 		strb	r2, [r3, #48]
 3817              	.LBB19:
1358:main.c        ****         for (int i = 0; i < 4; i++)
 3818              		.loc 1 1358 0
 3819 12a2 0023     		movs	r3, #0
 3820 12a4 FB63     		str	r3, [r7, #60]
 3821 12a6 0AE0     		b	.L154
 3822              	.L155:
1359:main.c        ****         {
1360:main.c        ****             myArray[i+49] = knobs[i];
 3823              		.loc 1 1360 0 discriminator 3
 3824 12a8 FB6B     		ldr	r3, [r7, #60]
 3825 12aa 3133     		adds	r3, r3, #49
 3826 12ac 2F49     		ldr	r1, .L183+52
 3827 12ae FA6B     		ldr	r2, [r7, #60]
 3828 12b0 0A44     		add	r2, r2, r1
 3829 12b2 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3830 12b4 284A     		ldr	r2, .L183+32
 3831 12b6 D154     		strb	r1, [r2, r3]
1358:main.c        ****         for (int i = 0; i < 4; i++)
 3832              		.loc 1 1358 0 discriminator 3
 3833 12b8 FB6B     		ldr	r3, [r7, #60]
 3834 12ba 0133     		adds	r3, r3, #1
 3835 12bc FB63     		str	r3, [r7, #60]
 3836              	.L154:
1358:main.c        ****         for (int i = 0; i < 4; i++)
 3837              		.loc 1 1358 0 is_stmt 0 discriminator 1
 3838 12be FB6B     		ldr	r3, [r7, #60]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 93


 3839 12c0 032B     		cmp	r3, #3
 3840 12c2 F1DD     		ble	.L155
 3841              	.LBE19:
1361:main.c        ****         }
1362:main.c        ****         myArray[53] = processed_volumePedal >> 8;
 3842              		.loc 1 1362 0 is_stmt 1
 3843 12c4 2A4B     		ldr	r3, .L183+56
 3844 12c6 B3F90030 		ldrsh	r3, [r3]
 3845 12ca 1B12     		asrs	r3, r3, #8
 3846 12cc 1BB2     		sxth	r3, r3
 3847 12ce DAB2     		uxtb	r2, r3
 3848 12d0 214B     		ldr	r3, .L183+32
 3849 12d2 83F83520 		strb	r2, [r3, #53]
1363:main.c        ****         myArray[54] = processed_volumePedal & 0xff;
 3850              		.loc 1 1363 0
 3851 12d6 264B     		ldr	r3, .L183+56
 3852 12d8 B3F90030 		ldrsh	r3, [r3]
 3853 12dc DAB2     		uxtb	r2, r3
 3854 12de 1E4B     		ldr	r3, .L183+32
 3855 12e0 83F83620 		strb	r2, [r3, #54]
1364:main.c        ****         myArray[55] = patchNum;
 3856              		.loc 1 1364 0
 3857 12e4 234B     		ldr	r3, .L183+60
 3858 12e6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3859 12e8 1B4B     		ldr	r3, .L183+32
 3860 12ea 83F83720 		strb	r2, [r3, #55]
 3861              	.LBB20:
1365:main.c        ****         for (int i = 0; i < 16; i++)
 3862              		.loc 1 1365 0
 3863 12ee 0023     		movs	r3, #0
 3864 12f0 BB63     		str	r3, [r7, #56]
 3865 12f2 0BE0     		b	.L156
 3866              	.L157:
1366:main.c        ****         {
1367:main.c        ****             myArray[i+56] = encoderVal[i];
 3867              		.loc 1 1367 0 discriminator 3
 3868 12f4 BB6B     		ldr	r3, [r7, #56]
 3869 12f6 3833     		adds	r3, r3, #56
 3870 12f8 1249     		ldr	r1, .L183+12
 3871 12fa BA6B     		ldr	r2, [r7, #56]
 3872 12fc 0A44     		add	r2, r2, r1
 3873 12fe 1278     		ldrb	r2, [r2]
 3874 1300 D1B2     		uxtb	r1, r2
 3875 1302 154A     		ldr	r2, .L183+32
 3876 1304 D154     		strb	r1, [r2, r3]
1365:main.c        ****         for (int i = 0; i < 16; i++)
 3877              		.loc 1 1365 0 discriminator 3
 3878 1306 BB6B     		ldr	r3, [r7, #56]
 3879 1308 0133     		adds	r3, r3, #1
 3880 130a BB63     		str	r3, [r7, #56]
 3881              	.L156:
1365:main.c        ****         for (int i = 0; i < 16; i++)
 3882              		.loc 1 1365 0 is_stmt 0 discriminator 1
 3883 130c BB6B     		ldr	r3, [r7, #56]
 3884 130e 0F2B     		cmp	r3, #15
 3885 1310 F0DD     		ble	.L157
 3886              	.LBE20:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 94


 3887              	.LBB21:
1368:main.c        ****         }
1369:main.c        ****         for(int i = 0; i < 74; i++)
 3888              		.loc 1 1369 0 is_stmt 1
 3889 1312 0023     		movs	r3, #0
 3890 1314 7B63     		str	r3, [r7, #52]
 3891 1316 09E0     		b	.L158
 3892              	.L159:
1370:main.c        ****         {
1371:main.c        **** 
1372:main.c        ****             SPIM_1_WriteTxData(myArray[i]);
 3893              		.loc 1 1372 0 discriminator 3
 3894 1318 0F4A     		ldr	r2, .L183+32
 3895 131a 7B6B     		ldr	r3, [r7, #52]
 3896 131c 1344     		add	r3, r3, r2
 3897 131e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3898 1320 1846     		mov	r0, r3
 3899 1322 FFF7FEFF 		bl	SPIM_1_WriteTxData
1369:main.c        ****         {
 3900              		.loc 1 1369 0 discriminator 3
 3901 1326 7B6B     		ldr	r3, [r7, #52]
 3902 1328 0133     		adds	r3, r3, #1
 3903 132a 7B63     		str	r3, [r7, #52]
 3904              	.L158:
1369:main.c        ****         {
 3905              		.loc 1 1369 0 is_stmt 0 discriminator 1
 3906 132c 7B6B     		ldr	r3, [r7, #52]
 3907 132e 492B     		cmp	r3, #73
 3908 1330 F2DD     		ble	.L159
 3909              	.LBE21:
1373:main.c        ****         }
1374:main.c        **** 
1375:main.c        ****         //CyDelayUs(400);
1376:main.c        ****         
1377:main.c        ****         
1378:main.c        ****      }
 3910              		.loc 1 1378 0 is_stmt 1
 3911 1332 FEF7E1BF 		b	.L160
 3912              	.L184:
 3913 1336 00BF     		.align	2
 3914              	.L183:
 3915 1338 00000000 		.word	prevStringPitchBend
 3916 133c 00000000 		.word	stringMIDI
 3917 1340 00000000 		.word	encoderNum
 3918 1344 00000000 		.word	encoderVal
 3919 1348 00000000 		.word	USB_check_flag
 3920 134c 00000000 		.word	USB_active
 3921 1350 00000000 		.word	midiSent
 3922 1354 00000000 		.word	midiOverflow
 3923 1358 00000000 		.word	myArray
 3924 135c 00000000 		.word	voice
 3925 1360 00000000 		.word	octave
 3926 1364 00000000 		.word	dualSlider
 3927 1368 00000000 		.word	neck
 3928 136c 00000000 		.word	knobs
 3929 1370 00000000 		.word	processed_volumePedal
 3930 1374 00000000 		.word	patchNum
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 95


 3931              		.cfi_endproc
 3932              	.LFE76:
 3933              		.size	main, .-main
 3934              		.section	.text.DmaRxConfiguration,"ax",%progbits
 3935              		.align	2
 3936              		.global	DmaRxConfiguration
 3937              		.thumb
 3938              		.thumb_func
 3939              		.type	DmaRxConfiguration, %function
 3940              	DmaRxConfiguration:
 3941              	.LFB77:
1379:main.c        **** }
1380:main.c        **** 
1381:main.c        **** 
1382:main.c        **** 
1383:main.c        **** void DmaRxConfiguration()
1384:main.c        **** { 
 3942              		.loc 1 1384 0
 3943              		.cfi_startproc
 3944              		@ args = 0, pretend = 0, frame = 0
 3945              		@ frame_needed = 1, uses_anonymous_args = 0
 3946 0000 80B5     		push	{r7, lr}
 3947              		.cfi_def_cfa_offset 8
 3948              		.cfi_offset 7, -8
 3949              		.cfi_offset 14, -4
 3950 0002 00AF     		add	r7, sp, #0
 3951              		.cfi_def_cfa_register 7
1385:main.c        **** 
1386:main.c        ****     //pluck dma
1387:main.c        ****     rx1Channel = DMA_1_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 3952              		.loc 1 1387 0
 3953 0004 41F6FF73 		movw	r3, #8191
 3954 0008 4FF48042 		mov	r2, #16384
 3955 000c 0121     		movs	r1, #1
 3956 000e 0120     		movs	r0, #1
 3957 0010 FFF7FEFF 		bl	DMA_1_DmaInitialize
 3958 0014 0346     		mov	r3, r0
 3959 0016 1A46     		mov	r2, r3
 3960 0018 334B     		ldr	r3, .L186
 3961 001a 1A70     		strb	r2, [r3]
1388:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1389:main.c        **** 
1390:main.c        ****     rx1TD[0] = CyDmaTdAllocate();
 3962              		.loc 1 1390 0
 3963 001c FFF7FEFF 		bl	CyDmaTdAllocate
 3964 0020 0346     		mov	r3, r0
 3965 0022 1A46     		mov	r2, r3
 3966 0024 314B     		ldr	r3, .L186+4
 3967 0026 1A70     		strb	r2, [r3]
1391:main.c        ****     rx1TD[1] = CyDmaTdAllocate();
 3968              		.loc 1 1391 0
 3969 0028 FFF7FEFF 		bl	CyDmaTdAllocate
 3970 002c 0346     		mov	r3, r0
 3971 002e 1A46     		mov	r2, r3
 3972 0030 2E4B     		ldr	r3, .L186+4
 3973 0032 5A70     		strb	r2, [r3, #1]
1392:main.c        ****     CyDmaTdSetConfiguration(rx1TD[0], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD , TD_INC_DST_ADR | DMA_1__T
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 96


 3974              		.loc 1 1392 0
 3975 0034 2D4B     		ldr	r3, .L186+4
 3976 0036 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3977 0038 0223     		movs	r3, #2
 3978 003a FE22     		movs	r2, #254
 3979 003c 1A21     		movs	r1, #26
 3980 003e FFF7FEFF 		bl	CyDmaTdSetConfiguration
1393:main.c        ****     CyDmaTdSetConfiguration(rx1TD[1], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_1__TD
 3981              		.loc 1 1393 0
 3982 0042 2A4B     		ldr	r3, .L186+4
 3983 0044 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 3984 0046 0223     		movs	r3, #2
 3985 0048 FE22     		movs	r2, #254
 3986 004a 1A21     		movs	r1, #26
 3987 004c FFF7FEFF 		bl	CyDmaTdSetConfiguration
1394:main.c        ****     CyDmaTdSetAddress(rx1TD[0], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rxBufferPluck[0]));
 3988              		.loc 1 1394 0
 3989 0050 264B     		ldr	r3, .L186+4
 3990 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3991 0054 264A     		ldr	r2, .L186+8
 3992 0056 92B2     		uxth	r2, r2
 3993 0058 46F25741 		movw	r1, #25687
 3994 005c 1846     		mov	r0, r3
 3995 005e FFF7FEFF 		bl	CyDmaTdSetAddress
1395:main.c        ****     CyDmaTdSetAddress(rx1TD[1], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rxBufferPluck[1]));
 3996              		.loc 1 1395 0
 3997 0062 224B     		ldr	r3, .L186+4
 3998 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3999 0066 234A     		ldr	r2, .L186+12
 4000 0068 92B2     		uxth	r2, r2
 4001 006a 46F25741 		movw	r1, #25687
 4002 006e 1846     		mov	r0, r3
 4003 0070 FFF7FEFF 		bl	CyDmaTdSetAddress
1396:main.c        **** 
1397:main.c        ****     
1398:main.c        ****     
1399:main.c        ****     //bar dma
1400:main.c        ****     rx2Channel = DMA_2_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 4004              		.loc 1 1400 0
 4005 0074 41F6FF73 		movw	r3, #8191
 4006 0078 4FF48042 		mov	r2, #16384
 4007 007c 0121     		movs	r1, #1
 4008 007e 0120     		movs	r0, #1
 4009 0080 FFF7FEFF 		bl	DMA_2_DmaInitialize
 4010 0084 0346     		mov	r3, r0
 4011 0086 1A46     		mov	r2, r3
 4012 0088 1B4B     		ldr	r3, .L186+16
 4013 008a 1A70     		strb	r2, [r3]
1401:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1402:main.c        ****     rx2TD[0] = CyDmaTdAllocate();
 4014              		.loc 1 1402 0
 4015 008c FFF7FEFF 		bl	CyDmaTdAllocate
 4016 0090 0346     		mov	r3, r0
 4017 0092 1A46     		mov	r2, r3
 4018 0094 194B     		ldr	r3, .L186+20
 4019 0096 1A70     		strb	r2, [r3]
1403:main.c        ****     rx2TD[1] = CyDmaTdAllocate();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 97


 4020              		.loc 1 1403 0
 4021 0098 FFF7FEFF 		bl	CyDmaTdAllocate
 4022 009c 0346     		mov	r3, r0
 4023 009e 1A46     		mov	r2, r3
 4024 00a0 164B     		ldr	r3, .L186+20
 4025 00a2 5A70     		strb	r2, [r3, #1]
1404:main.c        ****     CyDmaTdSetConfiguration(rx2TD[0], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_2__TD_T
 4026              		.loc 1 1404 0
 4027 00a4 154B     		ldr	r3, .L186+20
 4028 00a6 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 4029 00a8 0623     		movs	r3, #6
 4030 00aa FE22     		movs	r2, #254
 4031 00ac 0821     		movs	r1, #8
 4032 00ae FFF7FEFF 		bl	CyDmaTdSetConfiguration
1405:main.c        ****     CyDmaTdSetConfiguration(rx2TD[1], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_2__TD_T
 4033              		.loc 1 1405 0
 4034 00b2 124B     		ldr	r3, .L186+20
 4035 00b4 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4036 00b6 0623     		movs	r3, #6
 4037 00b8 FE22     		movs	r2, #254
 4038 00ba 0821     		movs	r1, #8
 4039 00bc FFF7FEFF 		bl	CyDmaTdSetConfiguration
1406:main.c        ****     CyDmaTdSetAddress(rx2TD[0], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBufferBar[0]));
 4040              		.loc 1 1406 0
 4041 00c0 0E4B     		ldr	r3, .L186+20
 4042 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4043 00c4 0E4A     		ldr	r2, .L186+24
 4044 00c6 92B2     		uxth	r2, r2
 4045 00c8 46F25B51 		movw	r1, #25947
 4046 00cc 1846     		mov	r0, r3
 4047 00ce FFF7FEFF 		bl	CyDmaTdSetAddress
1407:main.c        ****     CyDmaTdSetAddress(rx2TD[1], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBufferBar[1]));
 4048              		.loc 1 1407 0
 4049 00d2 0A4B     		ldr	r3, .L186+20
 4050 00d4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4051 00d6 0B4A     		ldr	r2, .L186+28
 4052 00d8 92B2     		uxth	r2, r2
 4053 00da 46F25B51 		movw	r1, #25947
 4054 00de 1846     		mov	r0, r3
 4055 00e0 FFF7FEFF 		bl	CyDmaTdSetAddress
1408:main.c        **** 
1409:main.c        **** 
1410:main.c        ****     /*
1411:main.c        ****     rx1Channel = DMA_2_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
1412:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1413:main.c        **** 
1414:main.c        ****     rx1TD[0] = CyDmaTdAllocate();
1415:main.c        ****     rx1TD[1] = CyDmaTdAllocate();
1416:main.c        **** 
1417:main.c        ****     CyDmaTdSetConfiguration(rx1TD[0], BAR_BUFFER_SIZE, rx1TD[1] , TD_INC_DST_ADR | DMA_2__TD_TERMOU
1418:main.c        ****     CyDmaTdSetConfiguration(rx1TD[1], BAR_BUFFER_SIZE, rx1TD[0] , TD_INC_DST_ADR | DMA_2__TD_TERMOU
1419:main.c        ****     CyDmaTdSetAddress(rx1TD[0], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBufferBar[0]));
1420:main.c        ****     CyDmaTdSetAddress(rx1TD[1], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBufferBar[1]));
1421:main.c        ****     CyDmaChSetInitialTd(rx1Channel, rx1TD[0]);
1422:main.c        ****     CyDmaChEnable(rx1Channel, 1);
1423:main.c        ****     
1424:main.c        ****     
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 98


1425:main.c        ****     rx2Channel = DMA_1_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
1426:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1427:main.c        **** 
1428:main.c        ****     rx2TD[0] = CyDmaTdAllocate();
1429:main.c        ****     rx2TD[1] = CyDmaTdAllocate();
1430:main.c        **** 
1431:main.c        ****     CyDmaTdSetConfiguration(rx2TD[0], PLUCK_BUFFER_SIZE, rx2TD[1] , TD_INC_DST_ADR | DMA_1__TD_TERM
1432:main.c        ****     CyDmaTdSetConfiguration(rx2TD[1], PLUCK_BUFFER_SIZE, rx2TD[0] , TD_INC_DST_ADR | DMA_1__TD_TERM
1433:main.c        ****     CyDmaTdSetAddress(rx2TD[0], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rxBufferPluck[0]));
1434:main.c        ****     CyDmaTdSetAddress(rx2TD[1], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rxBufferPluck[1]));
1435:main.c        ****     CyDmaChSetInitialTd(rx2Channel, rx2TD[0]);
1436:main.c        ****     CyDmaChEnable(rx2Channel, 1);
1437:main.c        **** */
1438:main.c        **** }
 4056              		.loc 1 1438 0
 4057 00e4 00BF     		nop
 4058 00e6 80BD     		pop	{r7, pc}
 4059              	.L187:
 4060              		.align	2
 4061              	.L186:
 4062 00e8 00000000 		.word	rx1Channel
 4063 00ec 00000000 		.word	rx1TD
 4064 00f0 00000000 		.word	rxBufferPluck
 4065 00f4 1A000000 		.word	rxBufferPluck+26
 4066 00f8 00000000 		.word	rx2Channel
 4067 00fc 00000000 		.word	rx2TD
 4068 0100 00000000 		.word	rxBufferBar
 4069 0104 08000000 		.word	rxBufferBar+8
 4070              		.cfi_endproc
 4071              	.LFE77:
 4072              		.size	DmaRxConfiguration, .-DmaRxConfiguration
 4073              		.section	.text.I2C_MasterWriteBlocking,"ax",%progbits
 4074              		.align	2
 4075              		.global	I2C_MasterWriteBlocking
 4076              		.thumb
 4077              		.thumb_func
 4078              		.type	I2C_MasterWriteBlocking, %function
 4079              	I2C_MasterWriteBlocking:
 4080              	.LFB78:
1439:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode)
1440:main.c        **** {
 4081              		.loc 1 1440 0
 4082              		.cfi_startproc
 4083              		@ args = 0, pretend = 0, frame = 16
 4084              		@ frame_needed = 1, uses_anonymous_args = 0
 4085 0000 80B5     		push	{r7, lr}
 4086              		.cfi_def_cfa_offset 8
 4087              		.cfi_offset 7, -8
 4088              		.cfi_offset 14, -4
 4089 0002 84B0     		sub	sp, sp, #16
 4090              		.cfi_def_cfa_offset 24
 4091 0004 00AF     		add	r7, sp, #0
 4092              		.cfi_def_cfa_register 7
 4093 0006 0346     		mov	r3, r0
 4094 0008 FB71     		strb	r3, [r7, #7]
 4095 000a 0B46     		mov	r3, r1	@ movhi
 4096 000c BB80     		strh	r3, [r7, #4]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 99


 4097 000e 1346     		mov	r3, r2
 4098 0010 BB71     		strb	r3, [r7, #6]
1441:main.c        ****     uint8 volatile status;
1442:main.c        ****     uint32_t timeout = 50000;
 4099              		.loc 1 1442 0
 4100 0012 4CF25033 		movw	r3, #50000
 4101 0016 FB60     		str	r3, [r7, #12]
1443:main.c        ****     status = I2C_1_MasterClearStatus();
 4102              		.loc 1 1443 0
 4103 0018 FFF7FEFF 		bl	I2C_1_MasterClearStatus
 4104 001c 0346     		mov	r3, r0
 4105 001e FB72     		strb	r3, [r7, #11]
1444:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 4106              		.loc 1 1444 0
 4107 0020 FB7A     		ldrb	r3, [r7, #11]
 4108 0022 DBB2     		uxtb	r3, r3
 4109 0024 5BB2     		sxtb	r3, r3
 4110 0026 002B     		cmp	r3, #0
 4111 0028 32DB     		blt	.L189
1445:main.c        ****     {
1446:main.c        ****         status = I2C_1_MasterWriteBuf(i2CAddr, (uint8 *)&I2Cbuff1, nbytes,
 4112              		.loc 1 1446 0
 4113 002a BB88     		ldrh	r3, [r7, #4]	@ movhi
 4114 002c DAB2     		uxtb	r2, r3
 4115 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4116 0030 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4117 0032 1A49     		ldr	r1, .L195
 4118 0034 FFF7FEFF 		bl	I2C_1_MasterWriteBuf
 4119 0038 0346     		mov	r3, r0
 4120 003a FB72     		strb	r3, [r7, #11]
1447:main.c        ****                                      mode);
1448:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
 4121              		.loc 1 1448 0
 4122 003c FB7A     		ldrb	r3, [r7, #11]
 4123 003e DBB2     		uxtb	r3, r3
 4124 0040 002B     		cmp	r3, #0
 4125 0042 21D1     		bne	.L190
 4126              	.L193:
1449:main.c        ****         {
1450:main.c        ****             /* wait for write complete and no error */
1451:main.c        ****             do
1452:main.c        ****             {
1453:main.c        ****                 status = I2C_1_MasterStatus();
 4127              		.loc 1 1453 0
 4128 0044 FFF7FEFF 		bl	I2C_1_MasterStatus
 4129 0048 0346     		mov	r3, r0
 4130 004a FB72     		strb	r3, [r7, #11]
1454:main.c        ****                 timeout--;
 4131              		.loc 1 1454 0
 4132 004c FB68     		ldr	r3, [r7, #12]
 4133 004e 013B     		subs	r3, r3, #1
 4134 0050 FB60     		str	r3, [r7, #12]
1455:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 4135              		.loc 1 1455 0
 4136 0052 FB7A     		ldrb	r3, [r7, #11]
 4137 0054 DBB2     		uxtb	r3, r3
 4138 0056 802B     		cmp	r3, #128
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 100


 4139 0058 01D1     		bne	.L191
1456:main.c        ****                 {
1457:main.c        ****                     I2C_reset();
 4140              		.loc 1 1457 0
 4141 005a FFF7FEFF 		bl	I2C_reset
 4142              	.L191:
1458:main.c        ****                 }
1459:main.c        ****                 if (timeout == 0)
 4143              		.loc 1 1459 0
 4144 005e FB68     		ldr	r3, [r7, #12]
 4145 0060 002B     		cmp	r3, #0
 4146 0062 03D1     		bne	.L192
1460:main.c        ****                 {
1461:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 4147              		.loc 1 1461 0
 4148 0064 8023     		movs	r3, #128
 4149 0066 FB72     		strb	r3, [r7, #11]
1462:main.c        ****                     I2C_reset();
 4150              		.loc 1 1462 0
 4151 0068 FFF7FEFF 		bl	I2C_reset
 4152              	.L192:
1463:main.c        ****                 }
1464:main.c        ****                 /*
1465:main.c        ****                 if (status == 0)
1466:main.c        ****                 {
1467:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
1468:main.c        ****                     I2C_reset();
1469:main.c        ****                 }
1470:main.c        ****                 */
1471:main.c        ****             } while(((status & (I2C_1_MSTAT_WR_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 4153              		.loc 1 1471 0
 4154 006c FB7A     		ldrb	r3, [r7, #11]
 4155 006e DBB2     		uxtb	r3, r3
 4156 0070 03F08203 		and	r3, r3, #130
 4157 0074 002B     		cmp	r3, #0
 4158 0076 0BD1     		bne	.L189
 4159              		.loc 1 1471 0 is_stmt 0 discriminator 1
 4160 0078 FB7A     		ldrb	r3, [r7, #11]
 4161 007a DBB2     		uxtb	r3, r3
 4162 007c 002B     		cmp	r3, #0
 4163 007e 07D0     		beq	.L189
 4164              		.loc 1 1471 0 discriminator 2
 4165 0080 FB68     		ldr	r3, [r7, #12]
 4166 0082 002B     		cmp	r3, #0
 4167 0084 DED1     		bne	.L193
 4168 0086 03E0     		b	.L189
 4169              	.L190:
1472:main.c        ****         }
1473:main.c        ****         else
1474:main.c        ****         {
1475:main.c        ****             /* translate from I2CM_MasterWriteBuf() error output to
1476:main.c        ****             *  I2CM_MasterStatus() error output */
1477:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 4170              		.loc 1 1477 0 is_stmt 1
 4171 0088 8023     		movs	r3, #128
 4172 008a FB72     		strb	r3, [r7, #11]
1478:main.c        ****             I2C_reset();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 101


 4173              		.loc 1 1478 0
 4174 008c FFF7FEFF 		bl	I2C_reset
 4175              	.L189:
1479:main.c        ****         } 
1480:main.c        ****     }  
1481:main.c        ****     return status;
 4176              		.loc 1 1481 0
 4177 0090 FB7A     		ldrb	r3, [r7, #11]
 4178 0092 DBB2     		uxtb	r3, r3
1482:main.c        **** }
 4179              		.loc 1 1482 0
 4180 0094 1846     		mov	r0, r3
 4181 0096 1037     		adds	r7, r7, #16
 4182              		.cfi_def_cfa_offset 8
 4183 0098 BD46     		mov	sp, r7
 4184              		.cfi_def_cfa_register 13
 4185              		@ sp needed
 4186 009a 80BD     		pop	{r7, pc}
 4187              	.L196:
 4188              		.align	2
 4189              	.L195:
 4190 009c 00000000 		.word	I2Cbuff1
 4191              		.cfi_endproc
 4192              	.LFE78:
 4193              		.size	I2C_MasterWriteBlocking, .-I2C_MasterWriteBlocking
 4194              		.section	.text.I2C_MasterReadBlocking,"ax",%progbits
 4195              		.align	2
 4196              		.global	I2C_MasterReadBlocking
 4197              		.thumb
 4198              		.thumb_func
 4199              		.type	I2C_MasterReadBlocking, %function
 4200              	I2C_MasterReadBlocking:
 4201              	.LFB79:
1483:main.c        **** 
1484:main.c        **** uint8 I2C_MasterReadBlocking(uint8 i2CAddr, uint8 nbytes, uint8_t mode)
1485:main.c        **** {
 4202              		.loc 1 1485 0
 4203              		.cfi_startproc
 4204              		@ args = 0, pretend = 0, frame = 16
 4205              		@ frame_needed = 1, uses_anonymous_args = 0
 4206 0000 80B5     		push	{r7, lr}
 4207              		.cfi_def_cfa_offset 8
 4208              		.cfi_offset 7, -8
 4209              		.cfi_offset 14, -4
 4210 0002 84B0     		sub	sp, sp, #16
 4211              		.cfi_def_cfa_offset 24
 4212 0004 00AF     		add	r7, sp, #0
 4213              		.cfi_def_cfa_register 7
 4214 0006 0346     		mov	r3, r0
 4215 0008 FB71     		strb	r3, [r7, #7]
 4216 000a 0B46     		mov	r3, r1
 4217 000c BB71     		strb	r3, [r7, #6]
 4218 000e 1346     		mov	r3, r2
 4219 0010 7B71     		strb	r3, [r7, #5]
1486:main.c        ****     uint8 volatile status;
1487:main.c        ****     uint32_t timeout = 50000;
 4220              		.loc 1 1487 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 102


 4221 0012 4CF25033 		movw	r3, #50000
 4222 0016 FB60     		str	r3, [r7, #12]
1488:main.c        ****     status = I2C_1_MasterClearStatus();
 4223              		.loc 1 1488 0
 4224 0018 FFF7FEFF 		bl	I2C_1_MasterClearStatus
 4225 001c 0346     		mov	r3, r0
 4226 001e FB72     		strb	r3, [r7, #11]
1489:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 4227              		.loc 1 1489 0
 4228 0020 FB7A     		ldrb	r3, [r7, #11]
 4229 0022 DBB2     		uxtb	r3, r3
 4230 0024 5BB2     		sxtb	r3, r3
 4231 0026 002B     		cmp	r3, #0
 4232 0028 37DB     		blt	.L198
1490:main.c        ****     {
1491:main.c        ****         status = I2C_1_MasterReadBuf(i2CAddr,
 4233              		.loc 1 1491 0
 4234 002a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4235 002c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 4236 002e F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 4237 0030 1D49     		ldr	r1, .L204
 4238 0032 FFF7FEFF 		bl	I2C_1_MasterReadBuf
 4239 0036 0346     		mov	r3, r0
 4240 0038 FB72     		strb	r3, [r7, #11]
1492:main.c        ****                                    (uint8 *)&(I2Cbuff2),
1493:main.c        ****                                     nbytes, mode); 
1494:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
 4241              		.loc 1 1494 0
 4242 003a FB7A     		ldrb	r3, [r7, #11]
 4243 003c DBB2     		uxtb	r3, r3
 4244 003e 002B     		cmp	r3, #0
 4245 0040 27D1     		bne	.L199
 4246              	.L202:
1495:main.c        ****         {
1496:main.c        ****             /* wait for read complete and no error */
1497:main.c        ****             do
1498:main.c        ****             {
1499:main.c        ****                 status = I2C_1_MasterStatus();
 4247              		.loc 1 1499 0
 4248 0042 FFF7FEFF 		bl	I2C_1_MasterStatus
 4249 0046 0346     		mov	r3, r0
 4250 0048 FB72     		strb	r3, [r7, #11]
1500:main.c        ****                 timeout--;
 4251              		.loc 1 1500 0
 4252 004a FB68     		ldr	r3, [r7, #12]
 4253 004c 013B     		subs	r3, r3, #1
 4254 004e FB60     		str	r3, [r7, #12]
1501:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 4255              		.loc 1 1501 0
 4256 0050 FB7A     		ldrb	r3, [r7, #11]
 4257 0052 DBB2     		uxtb	r3, r3
 4258 0054 802B     		cmp	r3, #128
 4259 0056 07D1     		bne	.L200
1502:main.c        ****                 {
1503:main.c        ****                     I2C_1_GENERATE_STOP_MANUAL;
 4260              		.loc 1 1503 0
 4261 0058 144B     		ldr	r3, .L204+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 103


 4262 005a 1022     		movs	r2, #16
 4263 005c 1A70     		strb	r2, [r3]
 4264 005e 144B     		ldr	r3, .L204+8
 4265 0060 0422     		movs	r2, #4
 4266 0062 1A70     		strb	r2, [r3]
1504:main.c        ****                     I2C_reset();
 4267              		.loc 1 1504 0
 4268 0064 FFF7FEFF 		bl	I2C_reset
 4269              	.L200:
1505:main.c        ****                 }
1506:main.c        ****                 if (timeout == 0)
 4270              		.loc 1 1506 0
 4271 0068 FB68     		ldr	r3, [r7, #12]
 4272 006a 002B     		cmp	r3, #0
 4273 006c 03D1     		bne	.L201
1507:main.c        ****                 {
1508:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 4274              		.loc 1 1508 0
 4275 006e 8023     		movs	r3, #128
 4276 0070 FB72     		strb	r3, [r7, #11]
1509:main.c        ****                     I2C_reset();
 4277              		.loc 1 1509 0
 4278 0072 FFF7FEFF 		bl	I2C_reset
 4279              	.L201:
1510:main.c        ****                 }
1511:main.c        ****                 /*
1512:main.c        ****                 if (status == 0)
1513:main.c        ****                 {
1514:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
1515:main.c        ****                     I2C_reset();
1516:main.c        ****                 }
1517:main.c        ****                 */
1518:main.c        ****             } while(((status & (I2C_1_MSTAT_RD_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 4280              		.loc 1 1518 0
 4281 0076 FB7A     		ldrb	r3, [r7, #11]
 4282 0078 DBB2     		uxtb	r3, r3
 4283 007a 03F08103 		and	r3, r3, #129
 4284 007e 002B     		cmp	r3, #0
 4285 0080 0BD1     		bne	.L198
 4286              		.loc 1 1518 0 is_stmt 0 discriminator 1
 4287 0082 FB7A     		ldrb	r3, [r7, #11]
 4288 0084 DBB2     		uxtb	r3, r3
 4289 0086 002B     		cmp	r3, #0
 4290 0088 07D0     		beq	.L198
 4291              		.loc 1 1518 0 discriminator 2
 4292 008a FB68     		ldr	r3, [r7, #12]
 4293 008c 002B     		cmp	r3, #0
 4294 008e D8D1     		bne	.L202
 4295 0090 03E0     		b	.L198
 4296              	.L199:
1519:main.c        ****         }
1520:main.c        ****         else
1521:main.c        ****         {
1522:main.c        ****             /* translate from I2CM_MasterReadBuf() error output to
1523:main.c        ****             *  I2CM_MasterStatus() error output */
1524:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 4297              		.loc 1 1524 0 is_stmt 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 104


 4298 0092 8023     		movs	r3, #128
 4299 0094 FB72     		strb	r3, [r7, #11]
1525:main.c        ****             I2C_reset();
 4300              		.loc 1 1525 0
 4301 0096 FFF7FEFF 		bl	I2C_reset
 4302              	.L198:
1526:main.c        ****         }
1527:main.c        ****     }
1528:main.c        ****     return status;
 4303              		.loc 1 1528 0
 4304 009a FB7A     		ldrb	r3, [r7, #11]
 4305 009c DBB2     		uxtb	r3, r3
1529:main.c        **** }
 4306              		.loc 1 1529 0
 4307 009e 1846     		mov	r0, r3
 4308 00a0 1037     		adds	r7, r7, #16
 4309              		.cfi_def_cfa_offset 8
 4310 00a2 BD46     		mov	sp, r7
 4311              		.cfi_def_cfa_register 13
 4312              		@ sp needed
 4313 00a4 80BD     		pop	{r7, pc}
 4314              	.L205:
 4315 00a6 00BF     		.align	2
 4316              	.L204:
 4317 00a8 00000000 		.word	I2Cbuff2
 4318 00ac D9490040 		.word	1073760729
 4319 00b0 D7490040 		.word	1073760727
 4320              		.cfi_endproc
 4321              	.LFE79:
 4322              		.size	I2C_MasterReadBlocking, .-I2C_MasterReadBlocking
 4323              		.section	.text.I2C_reset,"ax",%progbits
 4324              		.align	2
 4325              		.global	I2C_reset
 4326              		.thumb
 4327              		.thumb_func
 4328              		.type	I2C_reset, %function
 4329              	I2C_reset:
 4330              	.LFB80:
1530:main.c        **** 
1531:main.c        **** void I2C_reset(void)
1532:main.c        **** {
 4331              		.loc 1 1532 0
 4332              		.cfi_startproc
 4333              		@ args = 0, pretend = 0, frame = 0
 4334              		@ frame_needed = 1, uses_anonymous_args = 0
 4335              		@ link register save eliminated.
 4336 0000 80B4     		push	{r7}
 4337              		.cfi_def_cfa_offset 4
 4338              		.cfi_offset 7, -4
 4339 0002 00AF     		add	r7, sp, #0
 4340              		.cfi_def_cfa_register 7
1533:main.c        ****     //I2C_1_GENERATE_STOP_MANUAL;
1534:main.c        ****     //I2C_1_state = I2C_1_SM_EXIT_IDLE;
1535:main.c        ****     //CyDelay(100);
1536:main.c        ****     ///I2C_1_Stop();
1537:main.c        ****     //CyDelay(100);
1538:main.c        ****     //I2C_1_Init();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 105


1539:main.c        ****     //CyDelay(100);
1540:main.c        ****     //I2C_1_Start();
1541:main.c        ****     //CyDelay(100);
1542:main.c        ****     /*
1543:main.c        ****             if (mux_states[main_counter][0] != last_mux)
1544:main.c        ****         {
1545:main.c        ****             I2Cbuff1[0] = 1<<mux_states[main_counter][0];
1546:main.c        ****             uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1547:main.c        ****         }
1548:main.c        ****         last_mux = mux_states[main_counter][0];
1549:main.c        ****         
1550:main.c        ****         CyDelayUs(10);
1551:main.c        ****         if (mux_states[main_counter][0] == 0)
1552:main.c        ****         {
1553:main.c        ****             I2Cbuff1[0] = 1<<mux_states[main_counter][1];
1554:main.c        ****             status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
1555:main.c        ****         }
1556:main.c        ****         main_counter = 0;
1557:main.c        ****     */
1558:main.c        **** }
 4341              		.loc 1 1558 0
 4342 0004 00BF     		nop
 4343 0006 BD46     		mov	sp, r7
 4344              		.cfi_def_cfa_register 13
 4345              		@ sp needed
 4346 0008 80BC     		pop	{r7}
 4347              		.cfi_restore 7
 4348              		.cfi_def_cfa_offset 0
 4349 000a 7047     		bx	lr
 4350              		.cfi_endproc
 4351              	.LFE80:
 4352              		.size	I2C_reset, .-I2C_reset
 4353              		.section	.text.checkUSB_Vbus,"ax",%progbits
 4354              		.align	2
 4355              		.global	checkUSB_Vbus
 4356              		.thumb
 4357              		.thumb_func
 4358              		.type	checkUSB_Vbus, %function
 4359              	checkUSB_Vbus:
 4360              	.LFB81:
1559:main.c        **** 
1560:main.c        **** void checkUSB_Vbus(void)
1561:main.c        **** {
 4361              		.loc 1 1561 0
 4362              		.cfi_startproc
 4363              		@ args = 0, pretend = 0, frame = 0
 4364              		@ frame_needed = 1, uses_anonymous_args = 0
 4365 0000 80B5     		push	{r7, lr}
 4366              		.cfi_def_cfa_offset 8
 4367              		.cfi_offset 7, -8
 4368              		.cfi_offset 14, -4
 4369 0002 00AF     		add	r7, sp, #0
 4370              		.cfi_def_cfa_register 7
1562:main.c        ****    if (USB_VBusPresent() == 0)
 4371              		.loc 1 1562 0
 4372 0004 FFF7FEFF 		bl	USB_VBusPresent
 4373 0008 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 106


 4374 000a 002B     		cmp	r3, #0
 4375 000c 05D1     		bne	.L208
1563:main.c        ****    {
1564:main.c        ****        USB_Stop();
 4376              		.loc 1 1564 0
 4377 000e FFF7FEFF 		bl	USB_Stop
1565:main.c        ****        //LED_PWM_Write(0);
1566:main.c        ****        USB_active = 0; 
 4378              		.loc 1 1566 0
 4379 0012 0E4B     		ldr	r3, .L211
 4380 0014 0022     		movs	r2, #0
 4381 0016 1A70     		strb	r2, [r3]
 4382 0018 13E0     		b	.L209
 4383              	.L208:
1567:main.c        ****         //CySoftwareReset();
1568:main.c        ****    }
1569:main.c        ****    else if (USB_active == 0 )
 4384              		.loc 1 1569 0
 4385 001a 0C4B     		ldr	r3, .L211
 4386 001c 1B78     		ldrb	r3, [r3]
 4387 001e DBB2     		uxtb	r3, r3
 4388 0020 002B     		cmp	r3, #0
 4389 0022 0ED1     		bne	.L209
1570:main.c        ****    {
1571:main.c        ****        USB_Start(0u, USB_3V_OPERATION ); 
 4390              		.loc 1 1571 0
 4391 0024 0021     		movs	r1, #0
 4392 0026 0020     		movs	r0, #0
 4393 0028 FFF7FEFF 		bl	USB_Start
1572:main.c        ****         while (0u == USB_GetConfiguration());
 4394              		.loc 1 1572 0
 4395 002c 00BF     		nop
 4396              	.L210:
 4397              		.loc 1 1572 0 is_stmt 0 discriminator 1
 4398 002e FFF7FEFF 		bl	USB_GetConfiguration
 4399 0032 0346     		mov	r3, r0
 4400 0034 002B     		cmp	r3, #0
 4401 0036 FAD0     		beq	.L210
1573:main.c        ****         USB_MIDI_EP_Init();
 4402              		.loc 1 1573 0 is_stmt 1
 4403 0038 FFF7FEFF 		bl	USB_MIDI_Init
1574:main.c        ****        //LED_PWM_Write(255);
1575:main.c        ****        USB_active = 1;
 4404              		.loc 1 1575 0
 4405 003c 034B     		ldr	r3, .L211
 4406 003e 0122     		movs	r2, #1
 4407 0040 1A70     		strb	r2, [r3]
 4408              	.L209:
1576:main.c        ****    }
1577:main.c        ****    USB_check_flag = 0;
 4409              		.loc 1 1577 0
 4410 0042 034B     		ldr	r3, .L211+4
 4411 0044 0022     		movs	r2, #0
 4412 0046 1A70     		strb	r2, [r3]
1578:main.c        **** }
 4413              		.loc 1 1578 0
 4414 0048 00BF     		nop
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 107


 4415 004a 80BD     		pop	{r7, pc}
 4416              	.L212:
 4417              		.align	2
 4418              	.L211:
 4419 004c 00000000 		.word	USB_active
 4420 0050 00000000 		.word	USB_check_flag
 4421              		.cfi_endproc
 4422              	.LFE81:
 4423              		.size	checkUSB_Vbus, .-checkUSB_Vbus
 4424              		.section	.text.USB_service,"ax",%progbits
 4425              		.align	2
 4426              		.global	USB_service
 4427              		.thumb
 4428              		.thumb_func
 4429              		.type	USB_service, %function
 4430              	USB_service:
 4431              	.LFB82:
1579:main.c        **** 
1580:main.c        **** 
1581:main.c        **** 
1582:main.c        **** void USB_service(void)
1583:main.c        **** {
 4432              		.loc 1 1583 0
 4433              		.cfi_startproc
 4434              		@ args = 0, pretend = 0, frame = 0
 4435              		@ frame_needed = 1, uses_anonymous_args = 0
 4436 0000 80B5     		push	{r7, lr}
 4437              		.cfi_def_cfa_offset 8
 4438              		.cfi_offset 7, -8
 4439              		.cfi_offset 14, -4
 4440 0002 00AF     		add	r7, sp, #0
 4441              		.cfi_def_cfa_register 7
1584:main.c        ****     if(USB_IsConfigurationChanged() != 0u)
 4442              		.loc 1 1584 0
 4443 0004 FFF7FEFF 		bl	USB_IsConfigurationChanged
 4444 0008 0346     		mov	r3, r0
 4445 000a 002B     		cmp	r3, #0
 4446 000c 10D0     		beq	.L214
1585:main.c        ****     {
1586:main.c        ****         if(USB_GetConfiguration() != 0u)   
 4447              		.loc 1 1586 0
 4448 000e FFF7FEFF 		bl	USB_GetConfiguration
 4449 0012 0346     		mov	r3, r0
 4450 0014 002B     		cmp	r3, #0
 4451 0016 0BD0     		beq	.L214
1587:main.c        ****         {
1588:main.c        ****            // Sleep_isr_StartEx(SleepIsr_function);
1589:main.c        ****             
1590:main.c        ****             //SleepTimer_Start();
1591:main.c        ****         	
1592:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 4452              		.loc 1 1592 0
 4453 0018 154B     		ldr	r3, .L219
 4454 001a 1B78     		ldrb	r3, [r3]
 4455 001c DBB2     		uxtb	r3, r3
 4456 001e 002B     		cmp	r3, #0
 4457 0020 06D0     		beq	.L214
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 108


 4458              		.loc 1 1592 0 is_stmt 0 discriminator 1
 4459 0022 FFF7FEFF 		bl	USB_VBusPresent
 4460 0026 0346     		mov	r3, r0
 4461 0028 002B     		cmp	r3, #0
 4462 002a 01D0     		beq	.L214
1593:main.c        ****             {
1594:main.c        ****                 USB_MIDI_EP_Init();
 4463              		.loc 1 1594 0 is_stmt 1
 4464 002c FFF7FEFF 		bl	USB_MIDI_Init
 4465              	.L214:
1595:main.c        ****             }
1596:main.c        ****         }
1597:main.c        ****         else
1598:main.c        ****         {
1599:main.c        ****             //SleepTimer_Stop();
1600:main.c        ****         }    
1601:main.c        ****     }        
1602:main.c        ****     
1603:main.c        ****     if(USB_GetConfiguration() != 0u)    
 4466              		.loc 1 1603 0
 4467 0030 FFF7FEFF 		bl	USB_GetConfiguration
 4468 0034 0346     		mov	r3, r0
 4469 0036 002B     		cmp	r3, #0
 4470 0038 17D0     		beq	.L218
1604:main.c        ****     {
1605:main.c        ****         
1606:main.c        ****         #if(USB_EP_MM != USB__EP_DMAAUTO) 
1607:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 4471              		.loc 1 1607 0
 4472 003a 0D4B     		ldr	r3, .L219
 4473 003c 1B78     		ldrb	r3, [r3]
 4474 003e DBB2     		uxtb	r3, r3
 4475 0040 002B     		cmp	r3, #0
 4476 0042 06D0     		beq	.L217
 4477              		.loc 1 1607 0 is_stmt 0 discriminator 1
 4478 0044 FFF7FEFF 		bl	USB_VBusPresent
 4479 0048 0346     		mov	r3, r0
 4480 004a 002B     		cmp	r3, #0
 4481 004c 01D0     		beq	.L217
1608:main.c        ****             {
1609:main.c        ****                 USB_MIDI_IN_Service();
 4482              		.loc 1 1609 0 is_stmt 1
 4483 004e FFF7FEFF 		bl	USB_MIDI_IN_Service
 4484              	.L217:
1610:main.c        ****             }
1611:main.c        ****         #endif
1612:main.c        **** 
1613:main.c        ****         #if(USB_EP_MM != USB__EP_DMAAUTO) 
1614:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 4485              		.loc 1 1614 0
 4486 0052 074B     		ldr	r3, .L219
 4487 0054 1B78     		ldrb	r3, [r3]
 4488 0056 DBB2     		uxtb	r3, r3
 4489 0058 002B     		cmp	r3, #0
 4490 005a 06D0     		beq	.L218
 4491              		.loc 1 1614 0 is_stmt 0 discriminator 1
 4492 005c FFF7FEFF 		bl	USB_VBusPresent
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 109


 4493 0060 0346     		mov	r3, r0
 4494 0062 002B     		cmp	r3, #0
 4495 0064 01D0     		beq	.L218
1615:main.c        ****             {
1616:main.c        ****                 USB_MIDI_OUT_Service();
 4496              		.loc 1 1616 0 is_stmt 1
 4497 0066 FFF7FEFF 		bl	USB_MIDI_OUT_Service
 4498              	.L218:
1617:main.c        ****             }
1618:main.c        ****         #endif
1619:main.c        **** 
1620:main.c        **** /*
1621:main.c        ****         if( usbActivityCounter >= 2u ) 
1622:main.c        ****         {
1623:main.c        **** 
1624:main.c        ****             USB_Suspend();
1625:main.c        **** 
1626:main.c        ****             CyPmSaveClocks();
1627:main.c        ****             CyPmSleep(PM_SLEEP_TIME_NONE, PM_SLEEP_SRC_PICU);
1628:main.c        ****             CyPmRestoreClocks();
1629:main.c        **** 
1630:main.c        ****             USB_Resume();
1631:main.c        ****             USB_MIDI_EP_Init();
1632:main.c        ****             
1633:main.c        ****             usbActivityCounter = 0u; 
1634:main.c        **** 
1635:main.c        ****         }
1636:main.c        ****         */
1637:main.c        ****     }
1638:main.c        ****         
1639:main.c        **** }
 4499              		.loc 1 1639 0
 4500 006a 00BF     		nop
 4501 006c 80BD     		pop	{r7, pc}
 4502              	.L220:
 4503 006e 00BF     		.align	2
 4504              	.L219:
 4505 0070 00000000 		.word	USB_active
 4506              		.cfi_endproc
 4507              	.LFE82:
 4508              		.size	USB_service, .-USB_service
 4509              		.section	.text.log2f_approx,"ax",%progbits
 4510              		.align	2
 4511              		.global	log2f_approx
 4512              		.thumb
 4513              		.thumb_func
 4514              		.type	log2f_approx, %function
 4515              	log2f_approx:
 4516              	.LFB83:
1640:main.c        **** 
1641:main.c        **** // This is a fast approximation to log2()
1642:main.c        **** // Y = C[0]*F*F*F + C[1]*F*F + C[2]*F + C[3] + E;
1643:main.c        **** float log2f_approx(float X) {
 4517              		.loc 1 1643 0
 4518              		.cfi_startproc
 4519              		@ args = 0, pretend = 0, frame = 24
 4520              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 110


 4521 0000 80B5     		push	{r7, lr}
 4522              		.cfi_def_cfa_offset 8
 4523              		.cfi_offset 7, -8
 4524              		.cfi_offset 14, -4
 4525 0002 86B0     		sub	sp, sp, #24
 4526              		.cfi_def_cfa_offset 32
 4527 0004 00AF     		add	r7, sp, #0
 4528              		.cfi_def_cfa_register 7
 4529 0006 7860     		str	r0, [r7, #4]	@ float
1644:main.c        ****   float Y, F;
1645:main.c        ****   int E;
1646:main.c        ****   F = frexpf(fabsf(X), &E);
 4530              		.loc 1 1646 0
 4531 0008 7B68     		ldr	r3, [r7, #4]
 4532 000a 23F00043 		bic	r3, r3, #-2147483648
 4533 000e 07F10C02 		add	r2, r7, #12
 4534 0012 1146     		mov	r1, r2
 4535 0014 1846     		mov	r0, r3
 4536 0016 FFF7FEFF 		bl	frexpf
 4537 001a 7861     		str	r0, [r7, #20]	@ float
1647:main.c        ****   Y = 1.23149591368684f;
 4538              		.loc 1 1647 0
 4539 001c 1A4B     		ldr	r3, .L223
 4540 001e 3B61     		str	r3, [r7, #16]	@ float
1648:main.c        ****   Y *= F;
 4541              		.loc 1 1648 0
 4542 0020 7969     		ldr	r1, [r7, #20]	@ float
 4543 0022 3869     		ldr	r0, [r7, #16]	@ float
 4544 0024 FFF7FEFF 		bl	__aeabi_fmul
 4545 0028 0346     		mov	r3, r0
 4546 002a 3B61     		str	r3, [r7, #16]	@ float
1649:main.c        ****   Y += -4.11852516267426f;
 4547              		.loc 1 1649 0
 4548 002c 1749     		ldr	r1, .L223+4
 4549 002e 3869     		ldr	r0, [r7, #16]	@ float
 4550 0030 FFF7FEFF 		bl	__aeabi_fsub
 4551 0034 0346     		mov	r3, r0
 4552 0036 3B61     		str	r3, [r7, #16]	@ float
1650:main.c        ****   Y *= F;
 4553              		.loc 1 1650 0
 4554 0038 7969     		ldr	r1, [r7, #20]	@ float
 4555 003a 3869     		ldr	r0, [r7, #16]	@ float
 4556 003c FFF7FEFF 		bl	__aeabi_fmul
 4557 0040 0346     		mov	r3, r0
 4558 0042 3B61     		str	r3, [r7, #16]	@ float
1651:main.c        ****   Y += 6.02197014179219f;
 4559              		.loc 1 1651 0
 4560 0044 1249     		ldr	r1, .L223+8
 4561 0046 3869     		ldr	r0, [r7, #16]	@ float
 4562 0048 FFF7FEFF 		bl	__aeabi_fadd
 4563 004c 0346     		mov	r3, r0
 4564 004e 3B61     		str	r3, [r7, #16]	@ float
1652:main.c        ****   Y *= F;
 4565              		.loc 1 1652 0
 4566 0050 7969     		ldr	r1, [r7, #20]	@ float
 4567 0052 3869     		ldr	r0, [r7, #16]	@ float
 4568 0054 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 111


 4569 0058 0346     		mov	r3, r0
 4570 005a 3B61     		str	r3, [r7, #16]	@ float
1653:main.c        ****   Y += -3.13396450166353f;
 4571              		.loc 1 1653 0
 4572 005c 0D49     		ldr	r1, .L223+12
 4573 005e 3869     		ldr	r0, [r7, #16]	@ float
 4574 0060 FFF7FEFF 		bl	__aeabi_fsub
 4575 0064 0346     		mov	r3, r0
 4576 0066 3B61     		str	r3, [r7, #16]	@ float
1654:main.c        ****   Y += E;
 4577              		.loc 1 1654 0
 4578 0068 FB68     		ldr	r3, [r7, #12]
 4579 006a 1846     		mov	r0, r3
 4580 006c FFF7FEFF 		bl	__aeabi_i2f
 4581 0070 0346     		mov	r3, r0
 4582 0072 1946     		mov	r1, r3
 4583 0074 3869     		ldr	r0, [r7, #16]	@ float
 4584 0076 FFF7FEFF 		bl	__aeabi_fadd
 4585 007a 0346     		mov	r3, r0
 4586 007c 3B61     		str	r3, [r7, #16]	@ float
1655:main.c        ****   return(Y);
 4587              		.loc 1 1655 0
 4588 007e 3B69     		ldr	r3, [r7, #16]	@ float
1656:main.c        **** }
 4589              		.loc 1 1656 0
 4590 0080 1846     		mov	r0, r3
 4591 0082 1837     		adds	r7, r7, #24
 4592              		.cfi_def_cfa_offset 8
 4593 0084 BD46     		mov	sp, r7
 4594              		.cfi_def_cfa_register 13
 4595              		@ sp needed
 4596 0086 80BD     		pop	{r7, pc}
 4597              	.L224:
 4598              		.align	2
 4599              	.L223:
 4600 0088 A8A19D3F 		.word	1067295144
 4601 008c F5CA8340 		.word	1082378997
 4602 0090 FBB3C040 		.word	1086370811
 4603 0094 E0924840 		.word	1078498016
 4604              		.cfi_endproc
 4605              	.LFE83:
 4606              		.size	log2f_approx, .-log2f_approx
 4607              		.global	prevNotes
 4608              		.bss
 4609              		.align	2
 4610              		.type	prevNotes, %object
 4611              		.size	prevNotes, 48
 4612              	prevNotes:
 4613 0084 00000000 		.space	48
 4613      00000000 
 4613      00000000 
 4613      00000000 
 4613      00000000 
 4614              		.section	.text.noteEvent,"ax",%progbits
 4615              		.align	2
 4616              		.global	noteEvent
 4617              		.thumb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 112


 4618              		.thumb_func
 4619              		.type	noteEvent, %function
 4620              	noteEvent:
 4621              	.LFB84:
1657:main.c        **** 
1658:main.c        **** //log10f is exactly log2(x)/log2(10.0f)
1659:main.c        **** #define log10f_fast(x)  (log2f_approx(x)*0.3010299956639812f)
1660:main.c        **** 
1661:main.c        **** int prevNotes[NUM_STRINGS] = {0,0,0,0,0,0,0,0,0,0,0,0};
1662:main.c        **** 
1663:main.c        **** void noteEvent(int string)
1664:main.c        **** {
 4622              		.loc 1 1664 0
 4623              		.cfi_startproc
 4624              		@ args = 0, pretend = 0, frame = 24
 4625              		@ frame_needed = 1, uses_anonymous_args = 0
 4626 0000 80B5     		push	{r7, lr}
 4627              		.cfi_def_cfa_offset 8
 4628              		.cfi_offset 7, -8
 4629              		.cfi_offset 14, -4
 4630 0002 86B0     		sub	sp, sp, #24
 4631              		.cfi_def_cfa_offset 32
 4632 0004 00AF     		add	r7, sp, #0
 4633              		.cfi_def_cfa_register 7
 4634 0006 7860     		str	r0, [r7, #4]
1665:main.c        ****     float tempAmp = strings[string] * 1.5259021896696421759365224689097e-5f;//divide by 65535
 4635              		.loc 1 1665 0
 4636 0008 394A     		ldr	r2, .L231
 4637 000a 7B68     		ldr	r3, [r7, #4]
 4638 000c 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 4639 0010 9BB2     		uxth	r3, r3
 4640 0012 1846     		mov	r0, r3
 4641 0014 FFF7FEFF 		bl	__aeabi_i2f
 4642 0018 0346     		mov	r3, r0
 4643 001a 3649     		ldr	r1, .L231+4
 4644 001c 1846     		mov	r0, r3
 4645 001e FFF7FEFF 		bl	__aeabi_fmul
 4646 0022 0346     		mov	r3, r0
 4647 0024 3B61     		str	r3, [r7, #16]	@ float
1666:main.c        ****     float v = 127.0f + (64.0f * log10f_fast(tempAmp));
 4648              		.loc 1 1666 0
 4649 0026 3869     		ldr	r0, [r7, #16]	@ float
 4650 0028 FFF7FEFF 		bl	log2f_approx
 4651 002c 0346     		mov	r3, r0
 4652 002e 3249     		ldr	r1, .L231+8
 4653 0030 1846     		mov	r0, r3
 4654 0032 FFF7FEFF 		bl	__aeabi_fmul
 4655 0036 0346     		mov	r3, r0
 4656 0038 4FF08541 		mov	r1, #1115684864
 4657 003c 1846     		mov	r0, r3
 4658 003e FFF7FEFF 		bl	__aeabi_fmul
 4659 0042 0346     		mov	r3, r0
 4660 0044 2D49     		ldr	r1, .L231+12
 4661 0046 1846     		mov	r0, r3
 4662 0048 FFF7FEFF 		bl	__aeabi_fadd
 4663 004c 0346     		mov	r3, r0
 4664 004e FB60     		str	r3, [r7, #12]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 113


1667:main.c        ****     int vInt  = (int) (v*4.0f);
 4665              		.loc 1 1667 0
 4666 0050 4FF08141 		mov	r1, #1082130432
 4667 0054 F868     		ldr	r0, [r7, #12]	@ float
 4668 0056 FFF7FEFF 		bl	__aeabi_fmul
 4669 005a 0346     		mov	r3, r0
 4670 005c 1846     		mov	r0, r3
 4671 005e FFF7FEFF 		bl	__aeabi_f2iz
 4672 0062 0346     		mov	r3, r0
 4673 0064 7B61     		str	r3, [r7, #20]
1668:main.c        ****     if (vInt > 127)
 4674              		.loc 1 1668 0
 4675 0066 7B69     		ldr	r3, [r7, #20]
 4676 0068 7F2B     		cmp	r3, #127
 4677 006a 01DD     		ble	.L226
1669:main.c        ****     {
1670:main.c        ****         vInt = 127;
 4678              		.loc 1 1670 0
 4679 006c 7F23     		movs	r3, #127
 4680 006e 7B61     		str	r3, [r7, #20]
 4681              	.L226:
1671:main.c        ****     }
1672:main.c        ****     if (strings[string] == 0)
 4682              		.loc 1 1672 0
 4683 0070 1F4A     		ldr	r2, .L231
 4684 0072 7B68     		ldr	r3, [r7, #4]
 4685 0074 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 4686 0078 9BB2     		uxth	r3, r3
 4687 007a 002B     		cmp	r3, #0
 4688 007c 0AD1     		bne	.L227
1673:main.c        ****     {
1674:main.c        ****         sendMIDINoteOn(prevNotes[string], 0, string+1);
 4689              		.loc 1 1674 0
 4690 007e 204A     		ldr	r2, .L231+16
 4691 0080 7B68     		ldr	r3, [r7, #4]
 4692 0082 52F82300 		ldr	r0, [r2, r3, lsl #2]
 4693 0086 7B68     		ldr	r3, [r7, #4]
 4694 0088 0133     		adds	r3, r3, #1
 4695 008a 1A46     		mov	r2, r3
 4696 008c 0021     		movs	r1, #0
 4697 008e FFF7FEFF 		bl	sendMIDINoteOn
1675:main.c        ****     }
1676:main.c        ****     else
1677:main.c        ****     {
1678:main.c        ****         if (vInt > 0)
1679:main.c        ****         {
1680:main.c        ****             //only update octave on note-ons
1681:main.c        ****             //stringOctave[string] = powf(2.0f,octave);
1682:main.c        ****             int noteToSend = ((octave - 1) * 12) + openStringMIDI_Int[string];
1683:main.c        ****             sendMIDINoteOn(noteToSend , ((uint8_t)vInt), string+1);
1684:main.c        ****             prevNotes[string] = noteToSend;
1685:main.c        ****         }
1686:main.c        ****         else
1687:main.c        ****         {
1688:main.c        ****              sendMIDINoteOn(prevNotes[string], 0, string+1);
1689:main.c        ****         }
1690:main.c        ****     }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 114


1691:main.c        **** }
 4698              		.loc 1 1691 0
 4699 0092 28E0     		b	.L230
 4700              	.L227:
1678:main.c        ****         {
 4701              		.loc 1 1678 0
 4702 0094 7B69     		ldr	r3, [r7, #20]
 4703 0096 002B     		cmp	r3, #0
 4704 0098 1BDD     		ble	.L229
 4705              	.LBB22:
1682:main.c        ****             sendMIDINoteOn(noteToSend , ((uint8_t)vInt), string+1);
 4706              		.loc 1 1682 0
 4707 009a 1A4B     		ldr	r3, .L231+20
 4708 009c 1B68     		ldr	r3, [r3]
 4709 009e 5A1E     		subs	r2, r3, #1
 4710 00a0 1346     		mov	r3, r2
 4711 00a2 5B00     		lsls	r3, r3, #1
 4712 00a4 1344     		add	r3, r3, r2
 4713 00a6 9B00     		lsls	r3, r3, #2
 4714 00a8 1946     		mov	r1, r3
 4715 00aa 174A     		ldr	r2, .L231+24
 4716 00ac 7B68     		ldr	r3, [r7, #4]
 4717 00ae 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4718 00b2 0B44     		add	r3, r3, r1
 4719 00b4 BB60     		str	r3, [r7, #8]
1683:main.c        ****             prevNotes[string] = noteToSend;
 4720              		.loc 1 1683 0
 4721 00b6 7B69     		ldr	r3, [r7, #20]
 4722 00b8 D9B2     		uxtb	r1, r3
 4723 00ba 7B68     		ldr	r3, [r7, #4]
 4724 00bc 0133     		adds	r3, r3, #1
 4725 00be 1A46     		mov	r2, r3
 4726 00c0 B868     		ldr	r0, [r7, #8]
 4727 00c2 FFF7FEFF 		bl	sendMIDINoteOn
1684:main.c        ****         }
 4728              		.loc 1 1684 0
 4729 00c6 0E49     		ldr	r1, .L231+16
 4730 00c8 7B68     		ldr	r3, [r7, #4]
 4731 00ca BA68     		ldr	r2, [r7, #8]
 4732 00cc 41F82320 		str	r2, [r1, r3, lsl #2]
 4733              	.LBE22:
 4734              		.loc 1 1691 0
 4735 00d0 09E0     		b	.L230
 4736              	.L229:
1688:main.c        ****         }
 4737              		.loc 1 1688 0
 4738 00d2 0B4A     		ldr	r2, .L231+16
 4739 00d4 7B68     		ldr	r3, [r7, #4]
 4740 00d6 52F82300 		ldr	r0, [r2, r3, lsl #2]
 4741 00da 7B68     		ldr	r3, [r7, #4]
 4742 00dc 0133     		adds	r3, r3, #1
 4743 00de 1A46     		mov	r2, r3
 4744 00e0 0021     		movs	r1, #0
 4745 00e2 FFF7FEFF 		bl	sendMIDINoteOn
 4746              	.L230:
 4747              		.loc 1 1691 0
 4748 00e6 00BF     		nop
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 115


 4749 00e8 1837     		adds	r7, r7, #24
 4750              		.cfi_def_cfa_offset 8
 4751 00ea BD46     		mov	sp, r7
 4752              		.cfi_def_cfa_register 13
 4753              		@ sp needed
 4754 00ec 80BD     		pop	{r7, pc}
 4755              	.L232:
 4756 00ee 00BF     		.align	2
 4757              	.L231:
 4758 00f0 00000000 		.word	strings
 4759 00f4 80008037 		.word	931135616
 4760 00f8 9B209A3E 		.word	1050288283
 4761 00fc 0000FE42 		.word	1123942400
 4762 0100 00000000 		.word	prevNotes
 4763 0104 00000000 		.word	octave
 4764 0108 00000000 		.word	openStringMIDI_Int
 4765              		.cfi_endproc
 4766              	.LFE84:
 4767              		.size	noteEvent, .-noteEvent
 4768              		.section	.text.CCEvent,"ax",%progbits
 4769              		.align	2
 4770              		.global	CCEvent
 4771              		.thumb
 4772              		.thumb_func
 4773              		.type	CCEvent, %function
 4774              	CCEvent:
 4775              	.LFB85:
1692:main.c        **** 
1693:main.c        **** void CCEvent(int cc, int val)
1694:main.c        **** {
 4776              		.loc 1 1694 0
 4777              		.cfi_startproc
 4778              		@ args = 0, pretend = 0, frame = 8
 4779              		@ frame_needed = 1, uses_anonymous_args = 0
 4780 0000 80B5     		push	{r7, lr}
 4781              		.cfi_def_cfa_offset 8
 4782              		.cfi_offset 7, -8
 4783              		.cfi_offset 14, -4
 4784 0002 82B0     		sub	sp, sp, #8
 4785              		.cfi_def_cfa_offset 16
 4786 0004 00AF     		add	r7, sp, #0
 4787              		.cfi_def_cfa_register 7
 4788 0006 7860     		str	r0, [r7, #4]
 4789 0008 3960     		str	r1, [r7]
1695:main.c        ****     
1696:main.c        ****     sendMIDIControlChange(cc, val, 0);
 4790              		.loc 1 1696 0
 4791 000a 0022     		movs	r2, #0
 4792 000c 3968     		ldr	r1, [r7]
 4793 000e 7868     		ldr	r0, [r7, #4]
 4794 0010 FFF7FEFF 		bl	sendMIDIControlChange
1697:main.c        **** }
 4795              		.loc 1 1697 0
 4796 0014 00BF     		nop
 4797 0016 0837     		adds	r7, r7, #8
 4798              		.cfi_def_cfa_offset 8
 4799 0018 BD46     		mov	sp, r7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 116


 4800              		.cfi_def_cfa_register 13
 4801              		@ sp needed
 4802 001a 80BD     		pop	{r7, pc}
 4803              		.cfi_endproc
 4804              	.LFE85:
 4805              		.size	CCEvent, .-CCEvent
 4806              		.section	.text.sendMIDINoteOn,"ax",%progbits
 4807              		.align	2
 4808              		.global	sendMIDINoteOn
 4809              		.thumb
 4810              		.thumb_func
 4811              		.type	sendMIDINoteOn, %function
 4812              	sendMIDINoteOn:
 4813              	.LFB86:
1698:main.c        **** 
1699:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel)
1700:main.c        **** {  
 4814              		.loc 1 1700 0
 4815              		.cfi_startproc
 4816              		@ args = 0, pretend = 0, frame = 16
 4817              		@ frame_needed = 1, uses_anonymous_args = 0
 4818 0000 80B5     		push	{r7, lr}
 4819              		.cfi_def_cfa_offset 8
 4820              		.cfi_offset 7, -8
 4821              		.cfi_offset 14, -4
 4822 0002 84B0     		sub	sp, sp, #16
 4823              		.cfi_def_cfa_offset 24
 4824 0004 00AF     		add	r7, sp, #0
 4825              		.cfi_def_cfa_register 7
 4826 0006 F860     		str	r0, [r7, #12]
 4827 0008 B960     		str	r1, [r7, #8]
 4828 000a 7A60     		str	r2, [r7, #4]
1701:main.c        ****    
1702:main.c        ****     midiMsg[0] = USB_MIDI_NOTE_ON + channel;
 4829              		.loc 1 1702 0
 4830 000c 7B68     		ldr	r3, [r7, #4]
 4831 000e DBB2     		uxtb	r3, r3
 4832 0010 703B     		subs	r3, r3, #112
 4833 0012 DAB2     		uxtb	r2, r3
 4834 0014 114B     		ldr	r3, .L236
 4835 0016 1A70     		strb	r2, [r3]
1703:main.c        ****     midiMsg[1] = MIDInoteNum;
 4836              		.loc 1 1703 0
 4837 0018 FB68     		ldr	r3, [r7, #12]
 4838 001a DAB2     		uxtb	r2, r3
 4839 001c 0F4B     		ldr	r3, .L236
 4840 001e 5A70     		strb	r2, [r3, #1]
1704:main.c        ****     midiMsg[2] = velocity;	
 4841              		.loc 1 1704 0
 4842 0020 BB68     		ldr	r3, [r7, #8]
 4843 0022 DAB2     		uxtb	r2, r3
 4844 0024 0D4B     		ldr	r3, .L236
 4845 0026 9A70     		strb	r2, [r3, #2]
1705:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
1706:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 4846              		.loc 1 1706 0
 4847 0028 0D4B     		ldr	r3, .L236+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 117


 4848 002a 1B78     		ldrb	r3, [r3]
 4849 002c DBB2     		uxtb	r3, r3
 4850 002e 002B     		cmp	r3, #0
 4851 0030 09D0     		beq	.L235
 4852              		.loc 1 1706 0 is_stmt 0 discriminator 1
 4853 0032 FFF7FEFF 		bl	USB_VBusPresent
 4854 0036 0346     		mov	r3, r0
 4855 0038 002B     		cmp	r3, #0
 4856 003a 04D0     		beq	.L235
1707:main.c        ****     {
1708:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 4857              		.loc 1 1708 0 is_stmt 1
 4858 003c 0022     		movs	r2, #0
 4859 003e 0749     		ldr	r1, .L236
 4860 0040 0320     		movs	r0, #3
 4861 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 4862              	.L235:
1709:main.c        ****     } 
1710:main.c        ****     midiSent += 4;
 4863              		.loc 1 1710 0
 4864 0046 074B     		ldr	r3, .L236+8
 4865 0048 1B88     		ldrh	r3, [r3]
 4866 004a 0433     		adds	r3, r3, #4
 4867 004c 9AB2     		uxth	r2, r3
 4868 004e 054B     		ldr	r3, .L236+8
 4869 0050 1A80     		strh	r2, [r3]	@ movhi
1711:main.c        **** }
 4870              		.loc 1 1711 0
 4871 0052 00BF     		nop
 4872 0054 1037     		adds	r7, r7, #16
 4873              		.cfi_def_cfa_offset 8
 4874 0056 BD46     		mov	sp, r7
 4875              		.cfi_def_cfa_register 13
 4876              		@ sp needed
 4877 0058 80BD     		pop	{r7, pc}
 4878              	.L237:
 4879 005a 00BF     		.align	2
 4880              	.L236:
 4881 005c 00000000 		.word	midiMsg
 4882 0060 00000000 		.word	USB_active
 4883 0064 00000000 		.word	midiSent
 4884              		.cfi_endproc
 4885              	.LFE86:
 4886              		.size	sendMIDINoteOn, .-sendMIDINoteOn
 4887              		.section	.text.sendMIDIPolyKeyPressure,"ax",%progbits
 4888              		.align	2
 4889              		.global	sendMIDIPolyKeyPressure
 4890              		.thumb
 4891              		.thumb_func
 4892              		.type	sendMIDIPolyKeyPressure, %function
 4893              	sendMIDIPolyKeyPressure:
 4894              	.LFB87:
1712:main.c        **** 
1713:main.c        **** void sendMIDIPolyKeyPressure(int MIDInoteNum, int pressure, int channel)
1714:main.c        **** {
 4895              		.loc 1 1714 0
 4896              		.cfi_startproc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 118


 4897              		@ args = 0, pretend = 0, frame = 16
 4898              		@ frame_needed = 1, uses_anonymous_args = 0
 4899 0000 80B5     		push	{r7, lr}
 4900              		.cfi_def_cfa_offset 8
 4901              		.cfi_offset 7, -8
 4902              		.cfi_offset 14, -4
 4903 0002 84B0     		sub	sp, sp, #16
 4904              		.cfi_def_cfa_offset 24
 4905 0004 00AF     		add	r7, sp, #0
 4906              		.cfi_def_cfa_register 7
 4907 0006 F860     		str	r0, [r7, #12]
 4908 0008 B960     		str	r1, [r7, #8]
 4909 000a 7A60     		str	r2, [r7, #4]
1715:main.c        ****     midiMsg[0] = USB_MIDI_POLY_KEY_PRESSURE + channel;
 4910              		.loc 1 1715 0
 4911 000c 7B68     		ldr	r3, [r7, #4]
 4912 000e DBB2     		uxtb	r3, r3
 4913 0010 603B     		subs	r3, r3, #96
 4914 0012 DAB2     		uxtb	r2, r3
 4915 0014 114B     		ldr	r3, .L240
 4916 0016 1A70     		strb	r2, [r3]
1716:main.c        ****     midiMsg[1] = MIDInoteNum;
 4917              		.loc 1 1716 0
 4918 0018 FB68     		ldr	r3, [r7, #12]
 4919 001a DAB2     		uxtb	r2, r3
 4920 001c 0F4B     		ldr	r3, .L240
 4921 001e 5A70     		strb	r2, [r3, #1]
1717:main.c        ****     midiMsg[2] = pressure;		
 4922              		.loc 1 1717 0
 4923 0020 BB68     		ldr	r3, [r7, #8]
 4924 0022 DAB2     		uxtb	r2, r3
 4925 0024 0D4B     		ldr	r3, .L240
 4926 0026 9A70     		strb	r2, [r3, #2]
1718:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
1719:main.c        **** 
1720:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 4927              		.loc 1 1720 0
 4928 0028 0D4B     		ldr	r3, .L240+4
 4929 002a 1B78     		ldrb	r3, [r3]
 4930 002c DBB2     		uxtb	r3, r3
 4931 002e 002B     		cmp	r3, #0
 4932 0030 09D0     		beq	.L239
 4933              		.loc 1 1720 0 is_stmt 0 discriminator 1
 4934 0032 FFF7FEFF 		bl	USB_VBusPresent
 4935 0036 0346     		mov	r3, r0
 4936 0038 002B     		cmp	r3, #0
 4937 003a 04D0     		beq	.L239
1721:main.c        ****     {
1722:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 4938              		.loc 1 1722 0 is_stmt 1
 4939 003c 0022     		movs	r2, #0
 4940 003e 0749     		ldr	r1, .L240
 4941 0040 0320     		movs	r0, #3
 4942 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 4943              	.L239:
1723:main.c        ****     } 
1724:main.c        ****     midiSent += 4;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 119


 4944              		.loc 1 1724 0
 4945 0046 074B     		ldr	r3, .L240+8
 4946 0048 1B88     		ldrh	r3, [r3]
 4947 004a 0433     		adds	r3, r3, #4
 4948 004c 9AB2     		uxth	r2, r3
 4949 004e 054B     		ldr	r3, .L240+8
 4950 0050 1A80     		strh	r2, [r3]	@ movhi
1725:main.c        **** }
 4951              		.loc 1 1725 0
 4952 0052 00BF     		nop
 4953 0054 1037     		adds	r7, r7, #16
 4954              		.cfi_def_cfa_offset 8
 4955 0056 BD46     		mov	sp, r7
 4956              		.cfi_def_cfa_register 13
 4957              		@ sp needed
 4958 0058 80BD     		pop	{r7, pc}
 4959              	.L241:
 4960 005a 00BF     		.align	2
 4961              	.L240:
 4962 005c 00000000 		.word	midiMsg
 4963 0060 00000000 		.word	USB_active
 4964 0064 00000000 		.word	midiSent
 4965              		.cfi_endproc
 4966              	.LFE87:
 4967              		.size	sendMIDIPolyKeyPressure, .-sendMIDIPolyKeyPressure
 4968              		.section	.text.sendMIDIControlChange,"ax",%progbits
 4969              		.align	2
 4970              		.global	sendMIDIControlChange
 4971              		.thumb
 4972              		.thumb_func
 4973              		.type	sendMIDIControlChange, %function
 4974              	sendMIDIControlChange:
 4975              	.LFB88:
1726:main.c        **** 
1727:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel)
1728:main.c        **** {
 4976              		.loc 1 1728 0
 4977              		.cfi_startproc
 4978              		@ args = 0, pretend = 0, frame = 16
 4979              		@ frame_needed = 1, uses_anonymous_args = 0
 4980 0000 80B5     		push	{r7, lr}
 4981              		.cfi_def_cfa_offset 8
 4982              		.cfi_offset 7, -8
 4983              		.cfi_offset 14, -4
 4984 0002 84B0     		sub	sp, sp, #16
 4985              		.cfi_def_cfa_offset 24
 4986 0004 00AF     		add	r7, sp, #0
 4987              		.cfi_def_cfa_register 7
 4988 0006 F860     		str	r0, [r7, #12]
 4989 0008 B960     		str	r1, [r7, #8]
 4990 000a 7A60     		str	r2, [r7, #4]
1729:main.c        ****     midiMsg[0] = USB_MIDI_CONTROL_CHANGE + channel;
 4991              		.loc 1 1729 0
 4992 000c 7B68     		ldr	r3, [r7, #4]
 4993 000e DBB2     		uxtb	r3, r3
 4994 0010 503B     		subs	r3, r3, #80
 4995 0012 DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 120


 4996 0014 114B     		ldr	r3, .L244
 4997 0016 1A70     		strb	r2, [r3]
1730:main.c        ****     midiMsg[1] = CCnum;
 4998              		.loc 1 1730 0
 4999 0018 FB68     		ldr	r3, [r7, #12]
 5000 001a DAB2     		uxtb	r2, r3
 5001 001c 0F4B     		ldr	r3, .L244
 5002 001e 5A70     		strb	r2, [r3, #1]
1731:main.c        ****     midiMsg[2] = CCval;			
 5003              		.loc 1 1731 0
 5004 0020 BB68     		ldr	r3, [r7, #8]
 5005 0022 DAB2     		uxtb	r2, r3
 5006 0024 0D4B     		ldr	r3, .L244
 5007 0026 9A70     		strb	r2, [r3, #2]
1732:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
1733:main.c        ****     
1734:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 5008              		.loc 1 1734 0
 5009 0028 0D4B     		ldr	r3, .L244+4
 5010 002a 1B78     		ldrb	r3, [r3]
 5011 002c DBB2     		uxtb	r3, r3
 5012 002e 002B     		cmp	r3, #0
 5013 0030 09D0     		beq	.L243
 5014              		.loc 1 1734 0 is_stmt 0 discriminator 1
 5015 0032 FFF7FEFF 		bl	USB_VBusPresent
 5016 0036 0346     		mov	r3, r0
 5017 0038 002B     		cmp	r3, #0
 5018 003a 04D0     		beq	.L243
1735:main.c        ****     {
1736:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 5019              		.loc 1 1736 0 is_stmt 1
 5020 003c 0022     		movs	r2, #0
 5021 003e 0749     		ldr	r1, .L244
 5022 0040 0320     		movs	r0, #3
 5023 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 5024              	.L243:
1737:main.c        ****     } 
1738:main.c        ****     midiSent += 4;
 5025              		.loc 1 1738 0
 5026 0046 074B     		ldr	r3, .L244+8
 5027 0048 1B88     		ldrh	r3, [r3]
 5028 004a 0433     		adds	r3, r3, #4
 5029 004c 9AB2     		uxth	r2, r3
 5030 004e 054B     		ldr	r3, .L244+8
 5031 0050 1A80     		strh	r2, [r3]	@ movhi
1739:main.c        **** }
 5032              		.loc 1 1739 0
 5033 0052 00BF     		nop
 5034 0054 1037     		adds	r7, r7, #16
 5035              		.cfi_def_cfa_offset 8
 5036 0056 BD46     		mov	sp, r7
 5037              		.cfi_def_cfa_register 13
 5038              		@ sp needed
 5039 0058 80BD     		pop	{r7, pc}
 5040              	.L245:
 5041 005a 00BF     		.align	2
 5042              	.L244:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 121


 5043 005c 00000000 		.word	midiMsg
 5044 0060 00000000 		.word	USB_active
 5045 0064 00000000 		.word	midiSent
 5046              		.cfi_endproc
 5047              	.LFE88:
 5048              		.size	sendMIDIControlChange, .-sendMIDIControlChange
 5049              		.section	.text.sendMIDIPitchBend,"ax",%progbits
 5050              		.align	2
 5051              		.global	sendMIDIPitchBend
 5052              		.thumb
 5053              		.thumb_func
 5054              		.type	sendMIDIPitchBend, %function
 5055              	sendMIDIPitchBend:
 5056              	.LFB89:
1740:main.c        **** 
1741:main.c        **** void sendMIDIPitchBend(int val, int channel)
1742:main.c        **** {
 5057              		.loc 1 1742 0
 5058              		.cfi_startproc
 5059              		@ args = 0, pretend = 0, frame = 8
 5060              		@ frame_needed = 1, uses_anonymous_args = 0
 5061 0000 80B5     		push	{r7, lr}
 5062              		.cfi_def_cfa_offset 8
 5063              		.cfi_offset 7, -8
 5064              		.cfi_offset 14, -4
 5065 0002 82B0     		sub	sp, sp, #8
 5066              		.cfi_def_cfa_offset 16
 5067 0004 00AF     		add	r7, sp, #0
 5068              		.cfi_def_cfa_register 7
 5069 0006 7860     		str	r0, [r7, #4]
 5070 0008 3960     		str	r1, [r7]
1743:main.c        ****     midiMsg[0] = USB_MIDI_PITCH_BEND_CHANGE + channel;
 5071              		.loc 1 1743 0
 5072 000a 3B68     		ldr	r3, [r7]
 5073 000c DBB2     		uxtb	r3, r3
 5074 000e 203B     		subs	r3, r3, #32
 5075 0010 DAB2     		uxtb	r2, r3
 5076 0012 134B     		ldr	r3, .L248
 5077 0014 1A70     		strb	r2, [r3]
1744:main.c        ****     midiMsg[1] = (val & 127); //LSB
 5078              		.loc 1 1744 0
 5079 0016 7B68     		ldr	r3, [r7, #4]
 5080 0018 DBB2     		uxtb	r3, r3
 5081 001a 03F07F03 		and	r3, r3, #127
 5082 001e DAB2     		uxtb	r2, r3
 5083 0020 0F4B     		ldr	r3, .L248
 5084 0022 5A70     		strb	r2, [r3, #1]
1745:main.c        ****     midiMsg[2] = (val >> 7);	//MSB		
 5085              		.loc 1 1745 0
 5086 0024 7B68     		ldr	r3, [r7, #4]
 5087 0026 DB11     		asrs	r3, r3, #7
 5088 0028 DAB2     		uxtb	r2, r3
 5089 002a 0D4B     		ldr	r3, .L248
 5090 002c 9A70     		strb	r2, [r3, #2]
1746:main.c        **** 
1747:main.c        ****     //MIDI1_UART_PutArray(midiMsg, 3);
1748:main.c        ****     
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 122


1749:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 5091              		.loc 1 1749 0
 5092 002e 0D4B     		ldr	r3, .L248+4
 5093 0030 1B78     		ldrb	r3, [r3]
 5094 0032 DBB2     		uxtb	r3, r3
 5095 0034 002B     		cmp	r3, #0
 5096 0036 09D0     		beq	.L247
 5097              		.loc 1 1749 0 is_stmt 0 discriminator 1
 5098 0038 FFF7FEFF 		bl	USB_VBusPresent
 5099 003c 0346     		mov	r3, r0
 5100 003e 002B     		cmp	r3, #0
 5101 0040 04D0     		beq	.L247
1750:main.c        ****     {
1751:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 5102              		.loc 1 1751 0 is_stmt 1
 5103 0042 0022     		movs	r2, #0
 5104 0044 0649     		ldr	r1, .L248
 5105 0046 0320     		movs	r0, #3
 5106 0048 FFF7FEFF 		bl	USB_PutUsbMidiIn
 5107              	.L247:
1752:main.c        ****     } 
1753:main.c        ****     midiSent += 4;
 5108              		.loc 1 1753 0
 5109 004c 064B     		ldr	r3, .L248+8
 5110 004e 1B88     		ldrh	r3, [r3]
 5111 0050 0433     		adds	r3, r3, #4
 5112 0052 9AB2     		uxth	r2, r3
 5113 0054 044B     		ldr	r3, .L248+8
 5114 0056 1A80     		strh	r2, [r3]	@ movhi
1754:main.c        **** }
 5115              		.loc 1 1754 0
 5116 0058 00BF     		nop
 5117 005a 0837     		adds	r7, r7, #8
 5118              		.cfi_def_cfa_offset 8
 5119 005c BD46     		mov	sp, r7
 5120              		.cfi_def_cfa_register 13
 5121              		@ sp needed
 5122 005e 80BD     		pop	{r7, pc}
 5123              	.L249:
 5124              		.align	2
 5125              	.L248:
 5126 0060 00000000 		.word	midiMsg
 5127 0064 00000000 		.word	USB_active
 5128 0068 00000000 		.word	midiSent
 5129              		.cfi_endproc
 5130              	.LFE89:
 5131              		.size	sendMIDIPitchBend, .-sendMIDIPitchBend
 5132              		.section	.text.sendMIDIAllNotesOff,"ax",%progbits
 5133              		.align	2
 5134              		.global	sendMIDIAllNotesOff
 5135              		.thumb
 5136              		.thumb_func
 5137              		.type	sendMIDIAllNotesOff, %function
 5138              	sendMIDIAllNotesOff:
 5139              	.LFB90:
1755:main.c        **** 
1756:main.c        **** void sendMIDIAllNotesOff(void)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 123


1757:main.c        **** {   
 5140              		.loc 1 1757 0
 5141              		.cfi_startproc
 5142              		@ args = 0, pretend = 0, frame = 0
 5143              		@ frame_needed = 1, uses_anonymous_args = 0
 5144 0000 80B5     		push	{r7, lr}
 5145              		.cfi_def_cfa_offset 8
 5146              		.cfi_offset 7, -8
 5147              		.cfi_offset 14, -4
 5148 0002 00AF     		add	r7, sp, #0
 5149              		.cfi_def_cfa_register 7
1758:main.c        ****     for (i = 0; i < 128; i++)
 5150              		.loc 1 1758 0
 5151 0004 144B     		ldr	r3, .L254
 5152 0006 0022     		movs	r2, #0
 5153 0008 1A70     		strb	r2, [r3]
 5154 000a 1EE0     		b	.L251
 5155              	.L253:
1759:main.c        ****     {
1760:main.c        ****         midiMsg[0] = USB_MIDI_NOTE_ON;
 5156              		.loc 1 1760 0
 5157 000c 134B     		ldr	r3, .L254+4
 5158 000e 9022     		movs	r2, #144
 5159 0010 1A70     		strb	r2, [r3]
1761:main.c        ****         midiMsg[1] = i;
 5160              		.loc 1 1761 0
 5161 0012 114B     		ldr	r3, .L254
 5162 0014 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5163 0016 114B     		ldr	r3, .L254+4
 5164 0018 5A70     		strb	r2, [r3, #1]
1762:main.c        ****         midiMsg[2] = 0;	
 5165              		.loc 1 1762 0
 5166 001a 104B     		ldr	r3, .L254+4
 5167 001c 0022     		movs	r2, #0
 5168 001e 9A70     		strb	r2, [r3, #2]
1763:main.c        ****        // MIDI1_UART_PutArray(midiMsg, 3);
1764:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 5169              		.loc 1 1764 0
 5170 0020 0F4B     		ldr	r3, .L254+8
 5171 0022 1B78     		ldrb	r3, [r3]
 5172 0024 DBB2     		uxtb	r3, r3
 5173 0026 002B     		cmp	r3, #0
 5174 0028 09D0     		beq	.L252
 5175              		.loc 1 1764 0 is_stmt 0 discriminator 1
 5176 002a FFF7FEFF 		bl	USB_VBusPresent
 5177 002e 0346     		mov	r3, r0
 5178 0030 002B     		cmp	r3, #0
 5179 0032 04D0     		beq	.L252
1765:main.c        ****         {       
1766:main.c        ****             USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 5180              		.loc 1 1766 0 is_stmt 1
 5181 0034 0022     		movs	r2, #0
 5182 0036 0949     		ldr	r1, .L254+4
 5183 0038 0320     		movs	r0, #3
 5184 003a FFF7FEFF 		bl	USB_PutUsbMidiIn
 5185              	.L252:
1758:main.c        ****     {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 124


 5186              		.loc 1 1758 0 discriminator 2
 5187 003e 064B     		ldr	r3, .L254
 5188 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5189 0042 0133     		adds	r3, r3, #1
 5190 0044 DAB2     		uxtb	r2, r3
 5191 0046 044B     		ldr	r3, .L254
 5192 0048 1A70     		strb	r2, [r3]
 5193              	.L251:
1758:main.c        ****     {
 5194              		.loc 1 1758 0 is_stmt 0 discriminator 1
 5195 004a 034B     		ldr	r3, .L254
 5196 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5197 004e 5BB2     		sxtb	r3, r3
 5198 0050 002B     		cmp	r3, #0
 5199 0052 DBDA     		bge	.L253
1767:main.c        ****         }
1768:main.c        ****     }
1769:main.c        **** }
 5200              		.loc 1 1769 0 is_stmt 1
 5201 0054 00BF     		nop
 5202 0056 80BD     		pop	{r7, pc}
 5203              	.L255:
 5204              		.align	2
 5205              	.L254:
 5206 0058 00000000 		.word	i
 5207 005c 00000000 		.word	midiMsg
 5208 0060 00000000 		.word	USB_active
 5209              		.cfi_endproc
 5210              	.LFE90:
 5211              		.size	sendMIDIAllNotesOff, .-sendMIDIAllNotesOff
 5212              		.comm	sysexBuffer,128,4
 5213              		.global	sysexPointer
 5214              		.bss
 5215              		.align	2
 5216              		.type	sysexPointer, %object
 5217              		.size	sysexPointer, 4
 5218              	sysexPointer:
 5219 00b4 00000000 		.space	4
 5220              		.global	receivingSysex
 5221              		.type	receivingSysex, %object
 5222              		.size	receivingSysex, 1
 5223              	receivingSysex:
 5224 00b8 00       		.space	1
 5225              		.global	parsingSysex
 5226              		.type	parsingSysex, %object
 5227              		.size	parsingSysex, 1
 5228              	parsingSysex:
 5229 00b9 00       		.space	1
 5230              		.global	checkStatus
 5231              		.type	checkStatus, %object
 5232              		.size	checkStatus, 1
 5233              	checkStatus:
 5234 00ba 00       		.space	1
 5235              		.global	checkBase
 5236              		.type	checkBase, %object
 5237              		.size	checkBase, 1
 5238              	checkBase:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 125


 5239 00bb 00       		.space	1
 5240              		.global	testy
 5241              		.type	testy, %object
 5242              		.size	testy, 1
 5243              	testy:
 5244 00bc 00       		.space	1
 5245              		.comm	presetArray,74,4
 5246              		.section	.text.parseSysex,"ax",%progbits
 5247              		.align	2
 5248              		.global	parseSysex
 5249              		.thumb
 5250              		.thumb_func
 5251              		.type	parseSysex, %function
 5252              	parseSysex:
 5253              	.LFB91:
1770:main.c        **** 
1771:main.c        **** 
1772:main.c        **** 
1773:main.c        **** uint8_t sysexBuffer[128];
1774:main.c        **** uint32_t sysexPointer = 0;
1775:main.c        **** uint8_t receivingSysex = 0;
1776:main.c        **** uint8_t parsingSysex = 0;
1777:main.c        **** volatile uint8_t checkStatus = 0;
1778:main.c        **** volatile uint8_t checkBase = 0;
1779:main.c        **** 
1780:main.c        **** volatile uint8_t testy = 0;
1781:main.c        **** 
1782:main.c        **** volatile uint8_t presetArray[74];
1783:main.c        **** 
1784:main.c        **** void parseSysex(void)
1785:main.c        **** {
 5254              		.loc 1 1785 0
 5255              		.cfi_startproc
 5256              		@ args = 0, pretend = 0, frame = 24
 5257              		@ frame_needed = 1, uses_anonymous_args = 0
 5258 0000 90B5     		push	{r4, r7, lr}
 5259              		.cfi_def_cfa_offset 12
 5260              		.cfi_offset 4, -12
 5261              		.cfi_offset 7, -8
 5262              		.cfi_offset 14, -4
 5263 0002 87B0     		sub	sp, sp, #28
 5264              		.cfi_def_cfa_offset 40
 5265 0004 00AF     		add	r7, sp, #0
 5266              		.cfi_def_cfa_register 7
1786:main.c        ****     // 0 = it's a preset
1787:main.c        ****     if (sysexBuffer[0] == 0)
 5267              		.loc 1 1787 0
 5268 0006 8B4B     		ldr	r3, .L265
 5269 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5270 000a 002B     		cmp	r3, #0
 5271 000c 30D1     		bne	.L257
1788:main.c        ****     {
1789:main.c        ****         testy = 1;
 5272              		.loc 1 1789 0
 5273 000e 8A4B     		ldr	r3, .L265+4
 5274 0010 0122     		movs	r2, #1
 5275 0012 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 126


 5276              	.LBB23:
1790:main.c        ****         for(uint32_t i = 0; i < 72; i++)
 5277              		.loc 1 1790 0
 5278 0014 0023     		movs	r3, #0
 5279 0016 7B61     		str	r3, [r7, #20]
 5280 0018 16E0     		b	.L258
 5281              	.L261:
1791:main.c        ****         {
1792:main.c        ****             if (i < sysexPointer)
 5282              		.loc 1 1792 0
 5283 001a 884B     		ldr	r3, .L265+8
 5284 001c 1B68     		ldr	r3, [r3]
 5285 001e 7A69     		ldr	r2, [r7, #20]
 5286 0020 9A42     		cmp	r2, r3
 5287 0022 09D2     		bcs	.L259
1793:main.c        ****             {   
1794:main.c        ****                 presetArray[i] = sysexBuffer[i];
 5288              		.loc 1 1794 0
 5289 0024 834A     		ldr	r2, .L265
 5290 0026 7B69     		ldr	r3, [r7, #20]
 5291 0028 1344     		add	r3, r3, r2
 5292 002a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 5293 002c 844A     		ldr	r2, .L265+12
 5294 002e 7B69     		ldr	r3, [r7, #20]
 5295 0030 1344     		add	r3, r3, r2
 5296 0032 0A46     		mov	r2, r1
 5297 0034 1A70     		strb	r2, [r3]
 5298 0036 04E0     		b	.L260
 5299              	.L259:
1795:main.c        ****             }
1796:main.c        ****             else
1797:main.c        ****             {
1798:main.c        ****                 presetArray[i] = 255;
 5300              		.loc 1 1798 0
 5301 0038 814A     		ldr	r2, .L265+12
 5302 003a 7B69     		ldr	r3, [r7, #20]
 5303 003c 1344     		add	r3, r3, r2
 5304 003e FF22     		movs	r2, #255
 5305 0040 1A70     		strb	r2, [r3]
 5306              	.L260:
1790:main.c        ****         {
 5307              		.loc 1 1790 0 discriminator 2
 5308 0042 7B69     		ldr	r3, [r7, #20]
 5309 0044 0133     		adds	r3, r3, #1
 5310 0046 7B61     		str	r3, [r7, #20]
 5311              	.L258:
1790:main.c        ****         {
 5312              		.loc 1 1790 0 is_stmt 0 discriminator 1
 5313 0048 7B69     		ldr	r3, [r7, #20]
 5314 004a 472B     		cmp	r3, #71
 5315 004c E5D9     		bls	.L261
 5316              	.LBE23:
1799:main.c        ****             }
1800:main.c        ****         }
1801:main.c        ****         presetArray[72] = 240;
 5317              		.loc 1 1801 0 is_stmt 1
 5318 004e 7C4B     		ldr	r3, .L265+12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 127


 5319 0050 F022     		movs	r2, #240
 5320 0052 83F84820 		strb	r2, [r3, #72]
1802:main.c        ****         presetArray[73] = 241;
 5321              		.loc 1 1802 0
 5322 0056 7A4B     		ldr	r3, .L265+12
 5323 0058 F122     		movs	r2, #241
 5324 005a 83F84920 		strb	r2, [r3, #73]
1803:main.c        ****         
1804:main.c        ****         SPIM_1_WriteTxData(presetArray[i]);
 5325              		.loc 1 1804 0
 5326 005e 794B     		ldr	r3, .L265+16
 5327 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5328 0062 1A46     		mov	r2, r3
 5329 0064 764B     		ldr	r3, .L265+12
 5330 0066 9B5C     		ldrb	r3, [r3, r2]
 5331 0068 DBB2     		uxtb	r3, r3
 5332 006a 1846     		mov	r0, r3
 5333 006c FFF7FEFF 		bl	SPIM_1_WriteTxData
 5334              	.L257:
1805:main.c        ****         
1806:main.c        ****     }
1807:main.c        ****     //1 = it's a copedent
1808:main.c        ****     if (sysexBuffer[0] == 1)
 5335              		.loc 1 1808 0
 5336 0070 704B     		ldr	r3, .L265
 5337 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5338 0074 012B     		cmp	r3, #1
 5339 0076 40F0D580 		bne	.L262
1809:main.c        ****     {
1810:main.c        ****         if ((sysexBuffer[2] > 49) && (sysexBuffer[2] <= 61))
 5340              		.loc 1 1810 0
 5341 007a 6E4B     		ldr	r3, .L265
 5342 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5343 007e 312B     		cmp	r3, #49
 5344 0080 40F2D080 		bls	.L262
 5345              		.loc 1 1810 0 is_stmt 0 discriminator 1
 5346 0084 6B4B     		ldr	r3, .L265
 5347 0086 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5348 0088 3D2B     		cmp	r3, #61
 5349 008a 00F2CB80 		bhi	.L262
 5350              	.LBB24:
1811:main.c        ****         {
1812:main.c        ****             union breakFloat theVal;
1813:main.c        ****             uint32_t currentFloat = 0;
 5351              		.loc 1 1813 0 is_stmt 1
 5352 008e 0023     		movs	r3, #0
 5353 0090 3B61     		str	r3, [r7, #16]
1814:main.c        ****             uint32_t pedalToWrite = sysexBuffer[2] - 50;
 5354              		.loc 1 1814 0
 5355 0092 684B     		ldr	r3, .L265
 5356 0094 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5357 0096 323B     		subs	r3, r3, #50
 5358 0098 BB60     		str	r3, [r7, #8]
1815:main.c        ****             uint16_t pedalStartLoc = pedalToWrite * 48;
 5359              		.loc 1 1815 0
 5360 009a BB68     		ldr	r3, [r7, #8]
 5361 009c 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 128


 5362 009e 1A46     		mov	r2, r3	@ movhi
 5363 00a0 5200     		lsls	r2, r2, #1
 5364 00a2 1344     		add	r3, r3, r2
 5365 00a4 1B01     		lsls	r3, r3, #4
 5366 00a6 FB80     		strh	r3, [r7, #6]	@ movhi
 5367              	.LBB25:
1816:main.c        **** 
1817:main.c        **** 
1818:main.c        ****             for (uint32_t i = 3; i < sysexPointer; i = i+5)
 5368              		.loc 1 1818 0
 5369 00a8 0323     		movs	r3, #3
 5370 00aa FB60     		str	r3, [r7, #12]
 5371 00ac B4E0     		b	.L263
 5372              	.L264:
 5373              	.LBB26:
1819:main.c        ****             {
1820:main.c        ****                 theVal.u32 = 0;
 5374              		.loc 1 1820 0 discriminator 3
 5375 00ae 0023     		movs	r3, #0
 5376 00b0 3B60     		str	r3, [r7]
1821:main.c        ****                 theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 5377              		.loc 1 1821 0 discriminator 3
 5378 00b2 3B68     		ldr	r3, [r7]
 5379 00b4 5F49     		ldr	r1, .L265
 5380 00b6 FA68     		ldr	r2, [r7, #12]
 5381 00b8 0A44     		add	r2, r2, r1
 5382 00ba 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5383 00bc 1207     		lsls	r2, r2, #28
 5384 00be 1343     		orrs	r3, r3, r2
 5385 00c0 3B60     		str	r3, [r7]
1822:main.c        ****                 theVal.u32 |= (sysexBuffer[i+1] << 21);
 5386              		.loc 1 1822 0 discriminator 3
 5387 00c2 3B68     		ldr	r3, [r7]
 5388 00c4 FA68     		ldr	r2, [r7, #12]
 5389 00c6 0132     		adds	r2, r2, #1
 5390 00c8 5A49     		ldr	r1, .L265
 5391 00ca 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 5392 00cc 5205     		lsls	r2, r2, #21
 5393 00ce 1343     		orrs	r3, r3, r2
 5394 00d0 3B60     		str	r3, [r7]
1823:main.c        ****                 theVal.u32 |= (sysexBuffer[i+2] << 14);
 5395              		.loc 1 1823 0 discriminator 3
 5396 00d2 3B68     		ldr	r3, [r7]
 5397 00d4 FA68     		ldr	r2, [r7, #12]
 5398 00d6 0232     		adds	r2, r2, #2
 5399 00d8 5649     		ldr	r1, .L265
 5400 00da 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 5401 00dc 9203     		lsls	r2, r2, #14
 5402 00de 1343     		orrs	r3, r3, r2
 5403 00e0 3B60     		str	r3, [r7]
1824:main.c        ****                 theVal.u32 |= (sysexBuffer[i+3] << 7);
 5404              		.loc 1 1824 0 discriminator 3
 5405 00e2 3B68     		ldr	r3, [r7]
 5406 00e4 FA68     		ldr	r2, [r7, #12]
 5407 00e6 0332     		adds	r2, r2, #3
 5408 00e8 5249     		ldr	r1, .L265
 5409 00ea 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 129


 5410 00ec D201     		lsls	r2, r2, #7
 5411 00ee 1343     		orrs	r3, r3, r2
 5412 00f0 3B60     		str	r3, [r7]
1825:main.c        ****                 theVal.u32 |= (sysexBuffer[i+4] & 127);
 5413              		.loc 1 1825 0 discriminator 3
 5414 00f2 3A68     		ldr	r2, [r7]
 5415 00f4 FB68     		ldr	r3, [r7, #12]
 5416 00f6 0433     		adds	r3, r3, #4
 5417 00f8 4E49     		ldr	r1, .L265
 5418 00fa CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 5419 00fc 03F07F03 		and	r3, r3, #127
 5420 0100 1343     		orrs	r3, r3, r2
 5421 0102 3B60     		str	r3, [r7]
1826:main.c        **** 
1827:main.c        ****                 copedent[currentNeck][pedalToWrite][currentFloat] = theVal.f;
 5422              		.loc 1 1827 0 discriminator 3
 5423 0104 504B     		ldr	r3, .L265+20
 5424 0106 1968     		ldr	r1, [r3]
 5425 0108 3868     		ldr	r0, [r7]	@ float
 5426 010a 504C     		ldr	r4, .L265+24
 5427 010c BB68     		ldr	r3, [r7, #8]
 5428 010e 1A46     		mov	r2, r3
 5429 0110 5200     		lsls	r2, r2, #1
 5430 0112 1A44     		add	r2, r2, r3
 5431 0114 9300     		lsls	r3, r2, #2
 5432 0116 1A46     		mov	r2, r3
 5433 0118 0B46     		mov	r3, r1
 5434 011a 5B01     		lsls	r3, r3, #5
 5435 011c 0B44     		add	r3, r3, r1
 5436 011e 9B00     		lsls	r3, r3, #2
 5437 0120 1A44     		add	r2, r2, r3
 5438 0122 3B69     		ldr	r3, [r7, #16]
 5439 0124 1344     		add	r3, r3, r2
 5440 0126 44F82300 		str	r0, [r4, r3, lsl #2]	@ float
1828:main.c        ****                 uint16_t stringStartLoc = currentFloat * 4;
 5441              		.loc 1 1828 0 discriminator 3
 5442 012a 3B69     		ldr	r3, [r7, #16]
 5443 012c 9BB2     		uxth	r3, r3
 5444 012e 9B00     		lsls	r3, r3, #2
 5445 0130 BB80     		strh	r3, [r7, #4]	@ movhi
1829:main.c        ****                 checkBase = EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc + (COPEDENT_SIZ
 5446              		.loc 1 1829 0 discriminator 3
 5447 0132 BB88     		ldrh	r3, [r7, #4]	@ movhi
 5448 0134 DAB2     		uxtb	r2, r3
 5449 0136 FB88     		ldrh	r3, [r7, #6]	@ movhi
 5450 0138 DBB2     		uxtb	r3, r3
 5451 013a 1344     		add	r3, r3, r2
 5452 013c DAB2     		uxtb	r2, r3
 5453 013e 424B     		ldr	r3, .L265+20
 5454 0140 1B68     		ldr	r3, [r3]
 5455 0142 DBB2     		uxtb	r3, r3
 5456 0144 1B01     		lsls	r3, r3, #4
 5457 0146 DBB2     		uxtb	r3, r3
 5458 0148 1344     		add	r3, r3, r2
 5459 014a DAB2     		uxtb	r2, r3
 5460 014c 404B     		ldr	r3, .L265+28
 5461 014e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 130


1830:main.c        ****                 checkStatus = EEPROM_WriteByte(theVal.b[0], EEPROM_COPEDENT_OFFSET + stringStartLoc
 5462              		.loc 1 1830 0 discriminator 3
 5463 0150 3878     		ldrb	r0, [r7]	@ zero_extendqisi2
 5464 0152 BA88     		ldrh	r2, [r7, #4]	@ movhi
 5465 0154 FB88     		ldrh	r3, [r7, #6]	@ movhi
 5466 0156 1344     		add	r3, r3, r2
 5467 0158 9AB2     		uxth	r2, r3
 5468 015a 3B4B     		ldr	r3, .L265+20
 5469 015c 1B68     		ldr	r3, [r3]
 5470 015e 9BB2     		uxth	r3, r3
 5471 0160 1946     		mov	r1, r3	@ movhi
 5472 0162 4901     		lsls	r1, r1, #5
 5473 0164 0B44     		add	r3, r3, r1
 5474 0166 1B01     		lsls	r3, r3, #4
 5475 0168 9BB2     		uxth	r3, r3
 5476 016a 1344     		add	r3, r3, r2
 5477 016c 9BB2     		uxth	r3, r3
 5478 016e 1946     		mov	r1, r3
 5479 0170 FFF7FEFF 		bl	EEPROM_WriteByte
 5480 0174 0346     		mov	r3, r0
 5481 0176 DAB2     		uxtb	r2, r3
 5482 0178 364B     		ldr	r3, .L265+32
 5483 017a 1A70     		strb	r2, [r3]
1831:main.c        ****                 checkStatus = EEPROM_WriteByte(theVal.b[1], EEPROM_COPEDENT_OFFSET + stringStartLoc
 5484              		.loc 1 1831 0 discriminator 3
 5485 017c 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 5486 017e BA88     		ldrh	r2, [r7, #4]	@ movhi
 5487 0180 FB88     		ldrh	r3, [r7, #6]	@ movhi
 5488 0182 1344     		add	r3, r3, r2
 5489 0184 9AB2     		uxth	r2, r3
 5490 0186 304B     		ldr	r3, .L265+20
 5491 0188 1B68     		ldr	r3, [r3]
 5492 018a 9BB2     		uxth	r3, r3
 5493 018c 1946     		mov	r1, r3	@ movhi
 5494 018e 4901     		lsls	r1, r1, #5
 5495 0190 0B44     		add	r3, r3, r1
 5496 0192 1B01     		lsls	r3, r3, #4
 5497 0194 9BB2     		uxth	r3, r3
 5498 0196 1344     		add	r3, r3, r2
 5499 0198 9BB2     		uxth	r3, r3
 5500 019a 0133     		adds	r3, r3, #1
 5501 019c 9BB2     		uxth	r3, r3
 5502 019e 1946     		mov	r1, r3
 5503 01a0 FFF7FEFF 		bl	EEPROM_WriteByte
 5504 01a4 0346     		mov	r3, r0
 5505 01a6 DAB2     		uxtb	r2, r3
 5506 01a8 2A4B     		ldr	r3, .L265+32
 5507 01aa 1A70     		strb	r2, [r3]
1832:main.c        ****                 checkStatus = EEPROM_WriteByte(theVal.b[2], EEPROM_COPEDENT_OFFSET + stringStartLoc
 5508              		.loc 1 1832 0 discriminator 3
 5509 01ac B878     		ldrb	r0, [r7, #2]	@ zero_extendqisi2
 5510 01ae BA88     		ldrh	r2, [r7, #4]	@ movhi
 5511 01b0 FB88     		ldrh	r3, [r7, #6]	@ movhi
 5512 01b2 1344     		add	r3, r3, r2
 5513 01b4 9AB2     		uxth	r2, r3
 5514 01b6 244B     		ldr	r3, .L265+20
 5515 01b8 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 131


 5516 01ba 9BB2     		uxth	r3, r3
 5517 01bc 1946     		mov	r1, r3	@ movhi
 5518 01be 4901     		lsls	r1, r1, #5
 5519 01c0 0B44     		add	r3, r3, r1
 5520 01c2 1B01     		lsls	r3, r3, #4
 5521 01c4 9BB2     		uxth	r3, r3
 5522 01c6 1344     		add	r3, r3, r2
 5523 01c8 9BB2     		uxth	r3, r3
 5524 01ca 0233     		adds	r3, r3, #2
 5525 01cc 9BB2     		uxth	r3, r3
 5526 01ce 1946     		mov	r1, r3
 5527 01d0 FFF7FEFF 		bl	EEPROM_WriteByte
 5528 01d4 0346     		mov	r3, r0
 5529 01d6 DAB2     		uxtb	r2, r3
 5530 01d8 1E4B     		ldr	r3, .L265+32
 5531 01da 1A70     		strb	r2, [r3]
1833:main.c        ****                 checkStatus = EEPROM_WriteByte(theVal.b[3], EEPROM_COPEDENT_OFFSET + stringStartLoc
 5532              		.loc 1 1833 0 discriminator 3
 5533 01dc F878     		ldrb	r0, [r7, #3]	@ zero_extendqisi2
 5534 01de BA88     		ldrh	r2, [r7, #4]	@ movhi
 5535 01e0 FB88     		ldrh	r3, [r7, #6]	@ movhi
 5536 01e2 1344     		add	r3, r3, r2
 5537 01e4 9AB2     		uxth	r2, r3
 5538 01e6 184B     		ldr	r3, .L265+20
 5539 01e8 1B68     		ldr	r3, [r3]
 5540 01ea 9BB2     		uxth	r3, r3
 5541 01ec 1946     		mov	r1, r3	@ movhi
 5542 01ee 4901     		lsls	r1, r1, #5
 5543 01f0 0B44     		add	r3, r3, r1
 5544 01f2 1B01     		lsls	r3, r3, #4
 5545 01f4 9BB2     		uxth	r3, r3
 5546 01f6 1344     		add	r3, r3, r2
 5547 01f8 9BB2     		uxth	r3, r3
 5548 01fa 0333     		adds	r3, r3, #3
 5549 01fc 9BB2     		uxth	r3, r3
 5550 01fe 1946     		mov	r1, r3
 5551 0200 FFF7FEFF 		bl	EEPROM_WriteByte
 5552 0204 0346     		mov	r3, r0
 5553 0206 DAB2     		uxtb	r2, r3
 5554 0208 124B     		ldr	r3, .L265+32
 5555 020a 1A70     		strb	r2, [r3]
1834:main.c        ****             
1835:main.c        ****                 currentFloat++;         
 5556              		.loc 1 1835 0 discriminator 3
 5557 020c 3B69     		ldr	r3, [r7, #16]
 5558 020e 0133     		adds	r3, r3, #1
 5559 0210 3B61     		str	r3, [r7, #16]
 5560              	.LBE26:
1818:main.c        ****             {
 5561              		.loc 1 1818 0 discriminator 3
 5562 0212 FB68     		ldr	r3, [r7, #12]
 5563 0214 0533     		adds	r3, r3, #5
 5564 0216 FB60     		str	r3, [r7, #12]
 5565              	.L263:
1818:main.c        ****             {
 5566              		.loc 1 1818 0 is_stmt 0 discriminator 1
 5567 0218 084B     		ldr	r3, .L265+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 132


 5568 021a 1B68     		ldr	r3, [r3]
 5569 021c FA68     		ldr	r2, [r7, #12]
 5570 021e 9A42     		cmp	r2, r3
 5571 0220 FFF445AF 		bcc	.L264
 5572              	.L262:
 5573              	.LBE25:
 5574              	.LBE24:
1836:main.c        ****             }
1837:main.c        ****         }
1838:main.c        ****     }
1839:main.c        ****     parsingSysex = 0;
 5575              		.loc 1 1839 0 is_stmt 1
 5576 0224 0C4B     		ldr	r3, .L265+36
 5577 0226 0022     		movs	r2, #0
 5578 0228 1A70     		strb	r2, [r3]
1840:main.c        ****     
1841:main.c        **** }
 5579              		.loc 1 1841 0
 5580 022a 00BF     		nop
 5581 022c 1C37     		adds	r7, r7, #28
 5582              		.cfi_def_cfa_offset 12
 5583 022e BD46     		mov	sp, r7
 5584              		.cfi_def_cfa_register 13
 5585              		@ sp needed
 5586 0230 90BD     		pop	{r4, r7, pc}
 5587              	.L266:
 5588 0232 00BF     		.align	2
 5589              	.L265:
 5590 0234 00000000 		.word	sysexBuffer
 5591 0238 00000000 		.word	testy
 5592 023c 00000000 		.word	sysexPointer
 5593 0240 00000000 		.word	presetArray
 5594 0244 00000000 		.word	i
 5595 0248 00000000 		.word	currentNeck
 5596 024c 00000000 		.word	copedent
 5597 0250 00000000 		.word	checkBase
 5598 0254 00000000 		.word	checkStatus
 5599 0258 00000000 		.word	parsingSysex
 5600              		.cfi_endproc
 5601              	.LFE91:
 5602              		.size	parseSysex, .-parseSysex
 5603              		.comm	tempMIDI,4,4
 5604              		.section	.text.USB_callbackLocalMidiEvent,"ax",%progbits
 5605              		.align	2
 5606              		.global	USB_callbackLocalMidiEvent
 5607              		.thumb
 5608              		.thumb_func
 5609              		.type	USB_callbackLocalMidiEvent, %function
 5610              	USB_callbackLocalMidiEvent:
 5611              	.LFB92:
1842:main.c        **** 
1843:main.c        **** uint8_t tempMIDI[4];
1844:main.c        **** 
1845:main.c        **** // this gets called if the Brain gets a MIDI message from the computer host
1846:main.c        **** void USB_callbackLocalMidiEvent(uint8 cable, uint8 *midiMsg) CYREENTRANT
1847:main.c        **** {   
 5612              		.loc 1 1847 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 133


 5613              		.cfi_startproc
 5614              		@ args = 0, pretend = 0, frame = 16
 5615              		@ frame_needed = 1, uses_anonymous_args = 0
 5616 0000 80B5     		push	{r7, lr}
 5617              		.cfi_def_cfa_offset 8
 5618              		.cfi_offset 7, -8
 5619              		.cfi_offset 14, -4
 5620 0002 84B0     		sub	sp, sp, #16
 5621              		.cfi_def_cfa_offset 24
 5622 0004 00AF     		add	r7, sp, #0
 5623              		.cfi_def_cfa_register 7
 5624 0006 0346     		mov	r3, r0
 5625 0008 3960     		str	r1, [r7]
 5626 000a FB71     		strb	r3, [r7, #7]
1848:main.c        ****     tempMIDI[0] = midiMsg[0];
 5627              		.loc 1 1848 0
 5628 000c 3B68     		ldr	r3, [r7]
 5629 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5630 0010 344B     		ldr	r3, .L276
 5631 0012 1A70     		strb	r2, [r3]
1849:main.c        ****     tempMIDI[1] = midiMsg[1];
 5632              		.loc 1 1849 0
 5633 0014 3B68     		ldr	r3, [r7]
 5634 0016 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5635 0018 324B     		ldr	r3, .L276
 5636 001a 5A70     		strb	r2, [r3, #1]
1850:main.c        ****      tempMIDI[2] = midiMsg[2];
 5637              		.loc 1 1850 0
 5638 001c 3B68     		ldr	r3, [r7]
 5639 001e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 5640 0020 304B     		ldr	r3, .L276
 5641 0022 9A70     		strb	r2, [r3, #2]
1851:main.c        ****      tempMIDI[3] = midiMsg[3];
 5642              		.loc 1 1851 0
 5643 0024 3B68     		ldr	r3, [r7]
 5644 0026 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 5645 0028 2E4B     		ldr	r3, .L276
 5646 002a DA70     		strb	r2, [r3, #3]
1852:main.c        ****     //check that we got here
1853:main.c        ****     
1854:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 5647              		.loc 1 1854 0
 5648 002c 2E4B     		ldr	r3, .L276+4
 5649 002e 1B78     		ldrb	r3, [r3]
 5650 0030 DBB2     		uxtb	r3, r3
 5651 0032 002B     		cmp	r3, #0
 5652 0034 52D0     		beq	.L275
 5653              		.loc 1 1854 0 is_stmt 0 discriminator 1
 5654 0036 FFF7FEFF 		bl	USB_VBusPresent
 5655 003a 0346     		mov	r3, r0
 5656 003c 002B     		cmp	r3, #0
 5657 003e 4DD0     		beq	.L275
1855:main.c        ****     { 
1856:main.c        ****         /*
1857:main.c        ****         if(midiMsg[USB_EVENT_BYTE0] == USB_MIDI_NOTE_ON)
1858:main.c        ****         {
1859:main.c        ****     
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 134


1860:main.c        ****             //write the note on into the mastrKeys array, which stores all the pitches on/off info 
1861:main.c        ****             masterKeys[ midiMsg[USB_EVENT_BYTE1] ][0] = midiMsg[USB_EVENT_BYTE2];
1862:main.c        ****             int possibleKey = (int)USB_EVENT_BYTE1 + (int)cvOffsetFinal - 32 - (int)keyOffset;
1863:main.c        ****             if ((possibleKey < NUM_KEYS) && (possibleKey >= 0))
1864:main.c        ****             {
1865:main.c        ****                 //looks like the MIDI note from the computer also lands on the keyboard with the cu
1866:main.c        ****                 masterKeys[ midiMsg[USB_EVENT_BYTE1] ][1] = possibleKey;
1867:main.c        ****             }
1868:main.c        ****             else
1869:main.c        ****             {
1870:main.c        ****                 masterKeys[ midiMsg[USB_EVENT_BYTE1] ][1] = -1;
1871:main.c        ****             }
1872:main.c        ****             if (midiMsg[USB_EVENT_BYTE2] > 0)
1873:main.c        ****             {
1874:main.c        ****                 //note on
1875:main.c        ****                 addToNoteStack(midiMsg[USB_EVENT_BYTE1]);
1876:main.c        ****                 if (mainMode == SEQUENCERMODE)
1877:main.c        ****                 {
1878:main.c        ****                     if (toggleKeys[midiMsg[USB_EVENT_BYTE1]] == 0)
1879:main.c        ****                     {
1880:main.c        ****                         toggleKeys[midiMsg[USB_EVENT_BYTE1]] = 1;
1881:main.c        ****                         addToSequencerStack(midiMsg[USB_EVENT_BYTE1]);
1882:main.c        ****                     }
1883:main.c        ****                     else
1884:main.c        ****                     {
1885:main.c        ****                         toggleKeys[midiMsg[USB_EVENT_BYTE1]] = 0;
1886:main.c        ****                         removeFromSequencerStack(midiMsg[USB_EVENT_BYTE1]);
1887:main.c        ****                     }
1888:main.c        ****                 }
1889:main.c        ****             }
1890:main.c        ****             else
1891:main.c        ****             {
1892:main.c        ****                 //note off
1893:main.c        ****                 removeFromNoteStack(midiMsg[USB_EVENT_BYTE1]);
1894:main.c        ****             }
1895:main.c        ****             
1896:main.c        ****         }
1897:main.c        ****         
1898:main.c        ****         if (midiMsg[USB_EVENT_BYTE0] == USB_MIDI_CONTROL_CHANGE)
1899:main.c        ****         {
1900:main.c        ****             computerCC[midiMsg[USB_EVENT_BYTE2]] = midiMsg[USB_EVENT_BYTE1];
1901:main.c        ****             
1902:main.c        ****             if (midiMsg[USB_EVENT_BYTE2] == 0) // low res 7-bit full value
1903:main.c        ****             {
1904:main.c        ****                 DACvalue16 = (midiMsg[USB_EVENT_BYTE1] << 5); 
1905:main.c        ****                 //send the DAC value to masterpitch sensor
1906:main.c        ****                 WriteCommandPacket((DACvalue16 >> 8),(DACvalue16 & 255) , masterPitch);
1907:main.c        ****             }
1908:main.c        ****             
1909:main.c        ****             if (midiMsg[USB_EVENT_BYTE2] == 1) // high byte
1910:main.c        ****             {
1911:main.c        ****                 DACvalue16 = (midiMsg[USB_EVENT_BYTE1] << 7) + DAClowbyte7; 
1912:main.c        ****                 //send the DAC value to masterpitch sensor
1913:main.c        ****                 WriteCommandPacket((DACvalue16 >> 8),(DACvalue16 & 255) , masterPitch);
1914:main.c        ****             }
1915:main.c        ****             if (midiMsg[USB_EVENT_BYTE2] == 2) // low byte
1916:main.c        ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 135


1917:main.c        ****                 DAClowbyte7 = midiMsg[USB_EVENT_BYTE1];
1918:main.c        ****             }
1919:main.c        **** 
1920:main.c        ****         }
1921:main.c        ****         */
1922:main.c        ****         
1923:main.c        ****         if (receivingSysex)
 5658              		.loc 1 1923 0 is_stmt 1
 5659 0040 2A4B     		ldr	r3, .L276+8
 5660 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5661 0044 002B     		cmp	r3, #0
 5662 0046 29D0     		beq	.L269
 5663              	.LBB27:
1924:main.c        ****         {
1925:main.c        ****             for (int i = 0; i < 3; i++)
 5664              		.loc 1 1925 0
 5665 0048 0023     		movs	r3, #0
 5666 004a FB60     		str	r3, [r7, #12]
 5667 004c 23E0     		b	.L270
 5668              	.L273:
1926:main.c        ****             {
1927:main.c        ****                 if (midiMsg[i] < 128)
 5669              		.loc 1 1927 0
 5670 004e FB68     		ldr	r3, [r7, #12]
 5671 0050 3A68     		ldr	r2, [r7]
 5672 0052 1344     		add	r3, r3, r2
 5673 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5674 0056 5BB2     		sxtb	r3, r3
 5675 0058 002B     		cmp	r3, #0
 5676 005a 0BDB     		blt	.L271
1928:main.c        ****                 {
1929:main.c        ****                     sysexBuffer[sysexPointer++] = midiMsg[i];
 5677              		.loc 1 1929 0
 5678 005c 244B     		ldr	r3, .L276+12
 5679 005e 1B68     		ldr	r3, [r3]
 5680 0060 5A1C     		adds	r2, r3, #1
 5681 0062 2349     		ldr	r1, .L276+12
 5682 0064 0A60     		str	r2, [r1]
 5683 0066 FA68     		ldr	r2, [r7, #12]
 5684 0068 3968     		ldr	r1, [r7]
 5685 006a 0A44     		add	r2, r2, r1
 5686 006c 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5687 006e 214A     		ldr	r2, .L276+16
 5688 0070 D154     		strb	r1, [r2, r3]
 5689 0072 0DE0     		b	.L272
 5690              	.L271:
1930:main.c        ****                 }
1931:main.c        ****                 else
1932:main.c        ****                 {
1933:main.c        ****                     if (midiMsg[i] == USB_MIDI_EOSEX)
 5691              		.loc 1 1933 0
 5692 0074 FB68     		ldr	r3, [r7, #12]
 5693 0076 3A68     		ldr	r2, [r7]
 5694 0078 1344     		add	r3, r3, r2
 5695 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5696 007c F72B     		cmp	r3, #247
 5697 007e 07D1     		bne	.L272
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 136


1934:main.c        ****                     {
1935:main.c        ****                         receivingSysex = 0;
 5698              		.loc 1 1935 0
 5699 0080 1A4B     		ldr	r3, .L276+8
 5700 0082 0022     		movs	r2, #0
 5701 0084 1A70     		strb	r2, [r3]
1936:main.c        ****                         parsingSysex = 1;
 5702              		.loc 1 1936 0
 5703 0086 1C4B     		ldr	r3, .L276+20
 5704 0088 0122     		movs	r2, #1
 5705 008a 1A70     		strb	r2, [r3]
1937:main.c        ****                         parseSysex();
 5706              		.loc 1 1937 0
 5707 008c FFF7FEFF 		bl	parseSysex
 5708              	.L272:
1925:main.c        ****             {
 5709              		.loc 1 1925 0 discriminator 2
 5710 0090 FB68     		ldr	r3, [r7, #12]
 5711 0092 0133     		adds	r3, r3, #1
 5712 0094 FB60     		str	r3, [r7, #12]
 5713              	.L270:
1925:main.c        ****             {
 5714              		.loc 1 1925 0 is_stmt 0 discriminator 1
 5715 0096 FB68     		ldr	r3, [r7, #12]
 5716 0098 022B     		cmp	r3, #2
 5717 009a D8DD     		ble	.L273
 5718              	.L269:
 5719              	.LBE27:
1938:main.c        ****                      }
1939:main.c        ****                 }
1940:main.c        ****             }
1941:main.c        **** 
1942:main.c        ****         }
1943:main.c        ****         if (midiMsg[USB_EVENT_BYTE0] == USB_MIDI_SYSEX)
 5720              		.loc 1 1943 0 is_stmt 1
 5721 009c 3B68     		ldr	r3, [r7]
 5722 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5723 00a0 F02B     		cmp	r3, #240
 5724 00a2 1BD1     		bne	.L275
1944:main.c        ****         {
1945:main.c        ****             if (!parsingSysex)
 5725              		.loc 1 1945 0
 5726 00a4 144B     		ldr	r3, .L276+20
 5727 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5728 00a8 002B     		cmp	r3, #0
 5729 00aa 17D1     		bne	.L275
1946:main.c        ****             {
1947:main.c        ****                 receivingSysex = 1;
 5730              		.loc 1 1947 0
 5731 00ac 0F4B     		ldr	r3, .L276+8
 5732 00ae 0122     		movs	r2, #1
 5733 00b0 1A70     		strb	r2, [r3]
1948:main.c        ****                 sysexPointer = 0;
 5734              		.loc 1 1948 0
 5735 00b2 0F4B     		ldr	r3, .L276+12
 5736 00b4 0022     		movs	r2, #0
 5737 00b6 1A60     		str	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 137


1949:main.c        ****                 sysexBuffer[sysexPointer++] = midiMsg[1];
 5738              		.loc 1 1949 0
 5739 00b8 0D4B     		ldr	r3, .L276+12
 5740 00ba 1B68     		ldr	r3, [r3]
 5741 00bc 5A1C     		adds	r2, r3, #1
 5742 00be 0C49     		ldr	r1, .L276+12
 5743 00c0 0A60     		str	r2, [r1]
 5744 00c2 3A68     		ldr	r2, [r7]
 5745 00c4 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 5746 00c6 0B4A     		ldr	r2, .L276+16
 5747 00c8 D154     		strb	r1, [r2, r3]
1950:main.c        ****                 sysexBuffer[sysexPointer++] = midiMsg[2];
 5748              		.loc 1 1950 0
 5749 00ca 094B     		ldr	r3, .L276+12
 5750 00cc 1B68     		ldr	r3, [r3]
 5751 00ce 5A1C     		adds	r2, r3, #1
 5752 00d0 0749     		ldr	r1, .L276+12
 5753 00d2 0A60     		str	r2, [r1]
 5754 00d4 3A68     		ldr	r2, [r7]
 5755 00d6 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 5756 00d8 064A     		ldr	r2, .L276+16
 5757 00da D154     		strb	r1, [r2, r3]
 5758              	.L275:
1951:main.c        ****             }
1952:main.c        ****         }
1953:main.c        ****         
1954:main.c        ****         cable = cable; // so it doesn't complain about unused variables
1955:main.c        ****     }
1956:main.c        **** }    
 5759              		.loc 1 1956 0
 5760 00dc 00BF     		nop
 5761 00de 1037     		adds	r7, r7, #16
 5762              		.cfi_def_cfa_offset 8
 5763 00e0 BD46     		mov	sp, r7
 5764              		.cfi_def_cfa_register 13
 5765              		@ sp needed
 5766 00e2 80BD     		pop	{r7, pc}
 5767              	.L277:
 5768              		.align	2
 5769              	.L276:
 5770 00e4 00000000 		.word	tempMIDI
 5771 00e8 00000000 		.word	USB_active
 5772 00ec 00000000 		.word	receivingSysex
 5773 00f0 00000000 		.word	sysexPointer
 5774 00f4 00000000 		.word	sysexBuffer
 5775 00f8 00000000 		.word	parsingSysex
 5776              		.cfi_endproc
 5777              	.LFE92:
 5778              		.size	USB_callbackLocalMidiEvent, .-USB_callbackLocalMidiEvent
 5779              		.text
 5780              	.Letext0:
 5781              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5782              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5783              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 5784              		.file 5 "Generated_Source\\PSoC5/cy_em_eeprom.h"
 5785              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5786              		.file 7 "Generated_Source\\PSoC5/Em_EEPROM.h"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 138


 5787              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 5788              		.file 9 "oled.h"
 5789              		.section	.debug_info,"",%progbits
 5790              	.Ldebug_info0:
 5791 0000 00150000 		.4byte	0x1500
 5792 0004 0400     		.2byte	0x4
 5793 0006 00000000 		.4byte	.Ldebug_abbrev0
 5794 000a 04       		.byte	0x4
 5795 000b 01       		.uleb128 0x1
 5796 000c A9050000 		.4byte	.LASF230
 5797 0010 0C       		.byte	0xc
 5798 0011 DA060000 		.4byte	.LASF231
 5799 0015 9D090000 		.4byte	.LASF232
 5800 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5801 001d 00000000 		.4byte	0
 5802 0021 00000000 		.4byte	.Ldebug_line0
 5803 0025 02       		.uleb128 0x2
 5804 0026 01       		.byte	0x1
 5805 0027 06       		.byte	0x6
 5806 0028 42020000 		.4byte	.LASF0
 5807 002c 03       		.uleb128 0x3
 5808 002d 74010000 		.4byte	.LASF2
 5809 0031 02       		.byte	0x2
 5810 0032 1D       		.byte	0x1d
 5811 0033 37000000 		.4byte	0x37
 5812 0037 02       		.uleb128 0x2
 5813 0038 01       		.byte	0x1
 5814 0039 08       		.byte	0x8
 5815 003a B1020000 		.4byte	.LASF1
 5816 003e 03       		.uleb128 0x3
 5817 003f 5A090000 		.4byte	.LASF3
 5818 0043 02       		.byte	0x2
 5819 0044 29       		.byte	0x29
 5820 0045 49000000 		.4byte	0x49
 5821 0049 02       		.uleb128 0x2
 5822 004a 02       		.byte	0x2
 5823 004b 05       		.byte	0x5
 5824 004c 670A0000 		.4byte	.LASF4
 5825 0050 03       		.uleb128 0x3
 5826 0051 54030000 		.4byte	.LASF5
 5827 0055 02       		.byte	0x2
 5828 0056 2B       		.byte	0x2b
 5829 0057 5B000000 		.4byte	0x5b
 5830 005b 02       		.uleb128 0x2
 5831 005c 02       		.byte	0x2
 5832 005d 07       		.byte	0x7
 5833 005e 710B0000 		.4byte	.LASF6
 5834 0062 03       		.uleb128 0x3
 5835 0063 8F0B0000 		.4byte	.LASF7
 5836 0067 02       		.byte	0x2
 5837 0068 3F       		.byte	0x3f
 5838 0069 6D000000 		.4byte	0x6d
 5839 006d 02       		.uleb128 0x2
 5840 006e 04       		.byte	0x4
 5841 006f 05       		.byte	0x5
 5842 0070 9B010000 		.4byte	.LASF8
 5843 0074 03       		.uleb128 0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 139


 5844 0075 8A060000 		.4byte	.LASF9
 5845 0079 02       		.byte	0x2
 5846 007a 41       		.byte	0x41
 5847 007b 7F000000 		.4byte	0x7f
 5848 007f 02       		.uleb128 0x2
 5849 0080 04       		.byte	0x4
 5850 0081 07       		.byte	0x7
 5851 0082 E2040000 		.4byte	.LASF10
 5852 0086 02       		.uleb128 0x2
 5853 0087 08       		.byte	0x8
 5854 0088 05       		.byte	0x5
 5855 0089 95060000 		.4byte	.LASF11
 5856 008d 02       		.uleb128 0x2
 5857 008e 08       		.byte	0x8
 5858 008f 07       		.byte	0x7
 5859 0090 C8080000 		.4byte	.LASF12
 5860 0094 04       		.uleb128 0x4
 5861 0095 04       		.byte	0x4
 5862 0096 05       		.byte	0x5
 5863 0097 696E7400 		.ascii	"int\000"
 5864 009b 02       		.uleb128 0x2
 5865 009c 04       		.byte	0x4
 5866 009d 07       		.byte	0x7
 5867 009e 68070000 		.4byte	.LASF13
 5868 00a2 03       		.uleb128 0x3
 5869 00a3 4E020000 		.4byte	.LASF14
 5870 00a7 03       		.byte	0x3
 5871 00a8 18       		.byte	0x18
 5872 00a9 2C000000 		.4byte	0x2c
 5873 00ad 03       		.uleb128 0x3
 5874 00ae A10A0000 		.4byte	.LASF15
 5875 00b2 03       		.byte	0x3
 5876 00b3 20       		.byte	0x20
 5877 00b4 3E000000 		.4byte	0x3e
 5878 00b8 03       		.uleb128 0x3
 5879 00b9 DF080000 		.4byte	.LASF16
 5880 00bd 03       		.byte	0x3
 5881 00be 24       		.byte	0x24
 5882 00bf 50000000 		.4byte	0x50
 5883 00c3 03       		.uleb128 0x3
 5884 00c4 5C000000 		.4byte	.LASF17
 5885 00c8 03       		.byte	0x3
 5886 00c9 2C       		.byte	0x2c
 5887 00ca 62000000 		.4byte	0x62
 5888 00ce 03       		.uleb128 0x3
 5889 00cf 3F0B0000 		.4byte	.LASF18
 5890 00d3 03       		.byte	0x3
 5891 00d4 30       		.byte	0x30
 5892 00d5 74000000 		.4byte	0x74
 5893 00d9 05       		.uleb128 0x5
 5894 00da 3B0A0000 		.4byte	.LASF19
 5895 00de 04       		.byte	0x4
 5896 00df E901     		.2byte	0x1e9
 5897 00e1 37000000 		.4byte	0x37
 5898 00e5 05       		.uleb128 0x5
 5899 00e6 F10B0000 		.4byte	.LASF20
 5900 00ea 04       		.byte	0x4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 140


 5901 00eb EA01     		.2byte	0x1ea
 5902 00ed 5B000000 		.4byte	0x5b
 5903 00f1 05       		.uleb128 0x5
 5904 00f2 98000000 		.4byte	.LASF21
 5905 00f6 04       		.byte	0x4
 5906 00f7 EB01     		.2byte	0x1eb
 5907 00f9 7F000000 		.4byte	0x7f
 5908 00fd 02       		.uleb128 0x2
 5909 00fe 04       		.byte	0x4
 5910 00ff 04       		.byte	0x4
 5911 0100 13070000 		.4byte	.LASF22
 5912 0104 02       		.uleb128 0x2
 5913 0105 08       		.byte	0x8
 5914 0106 04       		.byte	0x4
 5915 0107 D3060000 		.4byte	.LASF23
 5916 010b 02       		.uleb128 0x2
 5917 010c 01       		.byte	0x1
 5918 010d 08       		.byte	0x8
 5919 010e 2B030000 		.4byte	.LASF24
 5920 0112 05       		.uleb128 0x5
 5921 0113 AD070000 		.4byte	.LASF25
 5922 0117 04       		.byte	0x4
 5923 0118 8B02     		.2byte	0x28b
 5924 011a 7F000000 		.4byte	0x7f
 5925 011e 05       		.uleb128 0x5
 5926 011f 2D090000 		.4byte	.LASF26
 5927 0123 04       		.byte	0x4
 5928 0124 9302     		.2byte	0x293
 5929 0126 2A010000 		.4byte	0x12a
 5930 012a 06       		.uleb128 0x6
 5931 012b D9000000 		.4byte	0xd9
 5932 012f 02       		.uleb128 0x2
 5933 0130 08       		.byte	0x8
 5934 0131 04       		.byte	0x4
 5935 0132 50080000 		.4byte	.LASF27
 5936 0136 02       		.uleb128 0x2
 5937 0137 04       		.byte	0x4
 5938 0138 07       		.byte	0x7
 5939 0139 0C000000 		.4byte	.LASF28
 5940 013d 07       		.uleb128 0x7
 5941 013e D9000000 		.4byte	0xd9
 5942 0142 4D010000 		.4byte	0x14d
 5943 0146 08       		.uleb128 0x8
 5944 0147 36010000 		.4byte	0x136
 5945 014b 03       		.byte	0x3
 5946 014c 00       		.byte	0
 5947 014d 09       		.uleb128 0x9
 5948 014e 1C       		.byte	0x1c
 5949 014f 05       		.byte	0x5
 5950 0150 1601     		.2byte	0x116
 5951 0152 BF010000 		.4byte	0x1bf
 5952 0156 0A       		.uleb128 0xa
 5953 0157 56020000 		.4byte	.LASF29
 5954 015b 05       		.byte	0x5
 5955 015c 1B01     		.2byte	0x11b
 5956 015e F1000000 		.4byte	0xf1
 5957 0162 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 141


 5958 0163 0A       		.uleb128 0xa
 5959 0164 41010000 		.4byte	.LASF30
 5960 0168 05       		.byte	0x5
 5961 0169 2001     		.2byte	0x120
 5962 016b F1000000 		.4byte	0xf1
 5963 016f 04       		.byte	0x4
 5964 0170 0A       		.uleb128 0xa
 5965 0171 BC0B0000 		.4byte	.LASF31
 5966 0175 05       		.byte	0x5
 5967 0176 2301     		.2byte	0x123
 5968 0178 F1000000 		.4byte	0xf1
 5969 017c 08       		.byte	0x8
 5970 017d 0A       		.uleb128 0xa
 5971 017e B60A0000 		.4byte	.LASF32
 5972 0182 05       		.byte	0x5
 5973 0183 2601     		.2byte	0x126
 5974 0185 F1000000 		.4byte	0xf1
 5975 0189 0C       		.byte	0xc
 5976 018a 0A       		.uleb128 0xa
 5977 018b EF0A0000 		.4byte	.LASF33
 5978 018f 05       		.byte	0x5
 5979 0190 2B01     		.2byte	0x12b
 5980 0192 F1000000 		.4byte	0xf1
 5981 0196 10       		.byte	0x10
 5982 0197 0A       		.uleb128 0xa
 5983 0198 66010000 		.4byte	.LASF34
 5984 019c 05       		.byte	0x5
 5985 019d 2E01     		.2byte	0x12e
 5986 019f D9000000 		.4byte	0xd9
 5987 01a3 14       		.byte	0x14
 5988 01a4 0A       		.uleb128 0xa
 5989 01a5 C5060000 		.4byte	.LASF35
 5990 01a9 05       		.byte	0x5
 5991 01aa 3301     		.2byte	0x133
 5992 01ac D9000000 		.4byte	0xd9
 5993 01b0 15       		.byte	0x15
 5994 01b1 0A       		.uleb128 0xa
 5995 01b2 2E010000 		.4byte	.LASF36
 5996 01b6 05       		.byte	0x5
 5997 01b7 3601     		.2byte	0x136
 5998 01b9 F1000000 		.4byte	0xf1
 5999 01bd 18       		.byte	0x18
 6000 01be 00       		.byte	0
 6001 01bf 05       		.uleb128 0x5
 6002 01c0 CA040000 		.4byte	.LASF37
 6003 01c4 05       		.byte	0x5
 6004 01c5 3701     		.2byte	0x137
 6005 01c7 4D010000 		.4byte	0x14d
 6006 01cb 0B       		.uleb128 0xb
 6007 01cc 01       		.byte	0x1
 6008 01cd 37000000 		.4byte	0x37
 6009 01d1 05       		.byte	0x5
 6010 01d2 5401     		.2byte	0x154
 6011 01d4 F7010000 		.4byte	0x1f7
 6012 01d8 0C       		.uleb128 0xc
 6013 01d9 47000000 		.4byte	.LASF38
 6014 01dd 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 142


 6015 01de 0C       		.uleb128 0xc
 6016 01df F5030000 		.4byte	.LASF39
 6017 01e3 01       		.byte	0x1
 6018 01e4 0C       		.uleb128 0xc
 6019 01e5 14010000 		.4byte	.LASF40
 6020 01e9 02       		.byte	0x2
 6021 01ea 0C       		.uleb128 0xc
 6022 01eb 85020000 		.4byte	.LASF41
 6023 01ef 03       		.byte	0x3
 6024 01f0 0C       		.uleb128 0xc
 6025 01f1 71050000 		.4byte	.LASF42
 6026 01f5 04       		.byte	0x4
 6027 01f6 00       		.byte	0
 6028 01f7 05       		.uleb128 0x5
 6029 01f8 D1000000 		.4byte	.LASF43
 6030 01fc 05       		.byte	0x5
 6031 01fd 5A01     		.2byte	0x15a
 6032 01ff CB010000 		.4byte	0x1cb
 6033 0203 06       		.uleb128 0x6
 6034 0204 A2000000 		.4byte	0xa2
 6035 0208 06       		.uleb128 0x6
 6036 0209 B8000000 		.4byte	0xb8
 6037 020d 03       		.uleb128 0x3
 6038 020e 97030000 		.4byte	.LASF44
 6039 0212 06       		.byte	0x6
 6040 0213 6C       		.byte	0x6c
 6041 0214 9B000000 		.4byte	0x9b
 6042 0218 0D       		.uleb128 0xd
 6043 0219 9B020000 		.4byte	.LASF233
 6044 021d 01       		.byte	0x1
 6045 021e 37000000 		.4byte	0x37
 6046 0222 09       		.byte	0x9
 6047 0223 1C       		.byte	0x1c
 6048 0224 47020000 		.4byte	0x247
 6049 0228 0C       		.uleb128 0xc
 6050 0229 53060000 		.4byte	.LASF45
 6051 022d 00       		.byte	0
 6052 022e 0C       		.uleb128 0xc
 6053 022f FC010000 		.4byte	.LASF46
 6054 0233 01       		.byte	0x1
 6055 0234 0C       		.uleb128 0xc
 6056 0235 76000000 		.4byte	.LASF47
 6057 0239 02       		.byte	0x2
 6058 023a 0C       		.uleb128 0xc
 6059 023b 26040000 		.4byte	.LASF48
 6060 023f 03       		.byte	0x3
 6061 0240 0C       		.uleb128 0xc
 6062 0241 C9000000 		.4byte	.LASF49
 6063 0245 04       		.byte	0x4
 6064 0246 00       		.byte	0
 6065 0247 0E       		.uleb128 0xe
 6066 0248 F7080000 		.4byte	.LASF234
 6067 024c 04       		.byte	0x4
 6068 024d 01       		.byte	0x1
 6069 024e 56       		.byte	0x56
 6070 024f 71020000 		.4byte	0x271
 6071 0253 0F       		.uleb128 0xf
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 143


 6072 0254 6600     		.ascii	"f\000"
 6073 0256 01       		.byte	0x1
 6074 0257 57       		.byte	0x57
 6075 0258 FD000000 		.4byte	0xfd
 6076 025c 0F       		.uleb128 0xf
 6077 025d 6200     		.ascii	"b\000"
 6078 025f 01       		.byte	0x1
 6079 0260 58       		.byte	0x58
 6080 0261 71020000 		.4byte	0x271
 6081 0265 0F       		.uleb128 0xf
 6082 0266 75333200 		.ascii	"u32\000"
 6083 026a 01       		.byte	0x1
 6084 026b 59       		.byte	0x59
 6085 026c CE000000 		.4byte	0xce
 6086 0270 00       		.byte	0
 6087 0271 07       		.uleb128 0x7
 6088 0272 A2000000 		.4byte	0xa2
 6089 0276 81020000 		.4byte	0x281
 6090 027a 08       		.uleb128 0x8
 6091 027b 36010000 		.4byte	0x136
 6092 027f 03       		.byte	0x3
 6093 0280 00       		.byte	0
 6094 0281 10       		.uleb128 0x10
 6095 0282 7B020000 		.4byte	.LASF50
 6096 0286 01       		.byte	0x1
 6097 0287 5D       		.byte	0x5d
 6098 0288 00000000 		.4byte	.LFB64
 6099 028c A0000000 		.4byte	.LFE64-.LFB64
 6100 0290 01       		.uleb128 0x1
 6101 0291 9C       		.byte	0x9c
 6102 0292 11       		.uleb128 0x11
 6103 0293 1E0A0000 		.4byte	.LASF95
 6104 0297 01       		.byte	0x1
 6105 0298 79       		.byte	0x79
 6106 0299 00000000 		.4byte	.LFB65
 6107 029d 20010000 		.4byte	.LFE65-.LFB65
 6108 02a1 01       		.uleb128 0x1
 6109 02a2 9C       		.byte	0x9c
 6110 02a3 BE020000 		.4byte	0x2be
 6111 02a7 12       		.uleb128 0x12
 6112 02a8 80000000 		.4byte	.LBB2
 6113 02ac 62000000 		.4byte	.LBE2-.LBB2
 6114 02b0 13       		.uleb128 0x13
 6115 02b1 6900     		.ascii	"i\000"
 6116 02b3 01       		.byte	0x1
 6117 02b4 86       		.byte	0x86
 6118 02b5 94000000 		.4byte	0x94
 6119 02b9 02       		.uleb128 0x2
 6120 02ba 91       		.byte	0x91
 6121 02bb 6C       		.sleb128 -20
 6122 02bc 00       		.byte	0
 6123 02bd 00       		.byte	0
 6124 02be 10       		.uleb128 0x10
 6125 02bf 0C090000 		.4byte	.LASF51
 6126 02c3 01       		.byte	0x1
 6127 02c4 BC       		.byte	0xbc
 6128 02c5 00000000 		.4byte	.LFB66
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 144


 6129 02c9 9C000000 		.4byte	.LFE66-.LFB66
 6130 02cd 01       		.uleb128 0x1
 6131 02ce 9C       		.byte	0x9c
 6132 02cf 14       		.uleb128 0x14
 6133 02d0 F7070000 		.4byte	.LASF52
 6134 02d4 01       		.byte	0x1
 6135 02d5 DC       		.byte	0xdc
 6136 02d6 00000000 		.4byte	.LFB67
 6137 02da 18000000 		.4byte	.LFE67-.LFB67
 6138 02de 01       		.uleb128 0x1
 6139 02df 9C       		.byte	0x9c
 6140 02e0 15       		.uleb128 0x15
 6141 02e1 EA010000 		.4byte	.LASF53
 6142 02e5 01       		.byte	0x1
 6143 02e6 2401     		.2byte	0x124
 6144 02e8 00000000 		.4byte	.LFB68
 6145 02ec 40000000 		.4byte	.LFE68-.LFB68
 6146 02f0 01       		.uleb128 0x1
 6147 02f1 9C       		.byte	0x9c
 6148 02f2 15       		.uleb128 0x15
 6149 02f3 8A070000 		.4byte	.LASF54
 6150 02f7 01       		.byte	0x1
 6151 02f8 5101     		.2byte	0x151
 6152 02fa 00000000 		.4byte	.LFB69
 6153 02fe 14000000 		.4byte	.LFE69-.LFB69
 6154 0302 01       		.uleb128 0x1
 6155 0303 9C       		.byte	0x9c
 6156 0304 15       		.uleb128 0x15
 6157 0305 68060000 		.4byte	.LASF55
 6158 0309 01       		.byte	0x1
 6159 030a 5C01     		.2byte	0x15c
 6160 030c 00000000 		.4byte	.LFB70
 6161 0310 74000000 		.4byte	.LFE70-.LFB70
 6162 0314 01       		.uleb128 0x1
 6163 0315 9C       		.byte	0x9c
 6164 0316 16       		.uleb128 0x16
 6165 0317 45030000 		.4byte	.LASF58
 6166 031b 01       		.byte	0x1
 6167 031c 7401     		.2byte	0x174
 6168 031e FD000000 		.4byte	0xfd
 6169 0322 00000000 		.4byte	.LFB71
 6170 0326 58000000 		.4byte	.LFE71-.LFB71
 6171 032a 01       		.uleb128 0x1
 6172 032b 9C       		.byte	0x9c
 6173 032c 7C030000 		.4byte	0x37c
 6174 0330 17       		.uleb128 0x17
 6175 0331 6D696E00 		.ascii	"min\000"
 6176 0335 01       		.byte	0x1
 6177 0336 7401     		.2byte	0x174
 6178 0338 FD000000 		.4byte	0xfd
 6179 033c 02       		.uleb128 0x2
 6180 033d 91       		.byte	0x91
 6181 033e 6C       		.sleb128 -20
 6182 033f 17       		.uleb128 0x17
 6183 0340 76616C00 		.ascii	"val\000"
 6184 0344 01       		.byte	0x1
 6185 0345 7401     		.2byte	0x174
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 145


 6186 0347 FD000000 		.4byte	0xfd
 6187 034b 02       		.uleb128 0x2
 6188 034c 91       		.byte	0x91
 6189 034d 68       		.sleb128 -24
 6190 034e 17       		.uleb128 0x17
 6191 034f 6D617800 		.ascii	"max\000"
 6192 0353 01       		.byte	0x1
 6193 0354 7401     		.2byte	0x174
 6194 0356 FD000000 		.4byte	0xfd
 6195 035a 02       		.uleb128 0x2
 6196 035b 91       		.byte	0x91
 6197 035c 64       		.sleb128 -28
 6198 035d 18       		.uleb128 0x18
 6199 035e BD060000 		.4byte	.LASF56
 6200 0362 01       		.byte	0x1
 6201 0363 7601     		.2byte	0x176
 6202 0365 FD000000 		.4byte	0xfd
 6203 0369 02       		.uleb128 0x2
 6204 036a 91       		.byte	0x91
 6205 036b 74       		.sleb128 -12
 6206 036c 18       		.uleb128 0x18
 6207 036d FD020000 		.4byte	.LASF57
 6208 0371 01       		.byte	0x1
 6209 0372 7701     		.2byte	0x177
 6210 0374 FD000000 		.4byte	0xfd
 6211 0378 02       		.uleb128 0x2
 6212 0379 91       		.byte	0x91
 6213 037a 70       		.sleb128 -16
 6214 037b 00       		.byte	0
 6215 037c 16       		.uleb128 0x16
 6216 037d 13020000 		.4byte	.LASF59
 6217 0381 01       		.byte	0x1
 6218 0382 8A01     		.2byte	0x18a
 6219 0384 FD000000 		.4byte	0xfd
 6220 0388 00000000 		.4byte	.LFB72
 6221 038c 68000000 		.4byte	.LFE72-.LFB72
 6222 0390 01       		.uleb128 0x1
 6223 0391 9C       		.byte	0x9c
 6224 0392 A4030000 		.4byte	0x3a4
 6225 0396 17       		.uleb128 0x17
 6226 0397 6600     		.ascii	"f\000"
 6227 0399 01       		.byte	0x1
 6228 039a 8A01     		.2byte	0x18a
 6229 039c FD000000 		.4byte	0xfd
 6230 03a0 02       		.uleb128 0x2
 6231 03a1 91       		.byte	0x91
 6232 03a2 74       		.sleb128 -12
 6233 03a3 00       		.byte	0
 6234 03a4 16       		.uleb128 0x16
 6235 03a5 8F080000 		.4byte	.LASF60
 6236 03a9 01       		.byte	0x1
 6237 03aa 9101     		.2byte	0x191
 6238 03ac FD000000 		.4byte	0xfd
 6239 03b0 00000000 		.4byte	.LFB73
 6240 03b4 4C000000 		.4byte	.LFE73-.LFB73
 6241 03b8 01       		.uleb128 0x1
 6242 03b9 9C       		.byte	0x9c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 146


 6243 03ba CC030000 		.4byte	0x3cc
 6244 03be 17       		.uleb128 0x17
 6245 03bf 6600     		.ascii	"f\000"
 6246 03c1 01       		.byte	0x1
 6247 03c2 9101     		.2byte	0x191
 6248 03c4 FD000000 		.4byte	0xfd
 6249 03c8 02       		.uleb128 0x2
 6250 03c9 91       		.byte	0x91
 6251 03ca 74       		.sleb128 -12
 6252 03cb 00       		.byte	0
 6253 03cc 16       		.uleb128 0x16
 6254 03cd A6040000 		.4byte	.LASF61
 6255 03d1 01       		.byte	0x1
 6256 03d2 9701     		.2byte	0x197
 6257 03d4 FD000000 		.4byte	0xfd
 6258 03d8 00000000 		.4byte	.LFB74
 6259 03dc 46000000 		.4byte	.LFE74-.LFB74
 6260 03e0 01       		.uleb128 0x1
 6261 03e1 9C       		.byte	0x9c
 6262 03e2 2E040000 		.4byte	0x42e
 6263 03e6 17       		.uleb128 0x17
 6264 03e7 4100     		.ascii	"A\000"
 6265 03e9 01       		.byte	0x1
 6266 03ea 9701     		.2byte	0x197
 6267 03ec FD000000 		.4byte	0xfd
 6268 03f0 02       		.uleb128 0x2
 6269 03f1 91       		.byte	0x91
 6270 03f2 6C       		.sleb128 -20
 6271 03f3 17       		.uleb128 0x17
 6272 03f4 4200     		.ascii	"B\000"
 6273 03f6 01       		.byte	0x1
 6274 03f7 9701     		.2byte	0x197
 6275 03f9 FD000000 		.4byte	0xfd
 6276 03fd 02       		.uleb128 0x2
 6277 03fe 91       		.byte	0x91
 6278 03ff 68       		.sleb128 -24
 6279 0400 19       		.uleb128 0x19
 6280 0401 7E010000 		.4byte	.LASF62
 6281 0405 01       		.byte	0x1
 6282 0406 9701     		.2byte	0x197
 6283 0408 FD000000 		.4byte	0xfd
 6284 040c 02       		.uleb128 0x2
 6285 040d 91       		.byte	0x91
 6286 040e 64       		.sleb128 -28
 6287 040f 18       		.uleb128 0x18
 6288 0410 2B020000 		.4byte	.LASF63
 6289 0414 01       		.byte	0x1
 6290 0415 9901     		.2byte	0x199
 6291 0417 FD000000 		.4byte	0xfd
 6292 041b 02       		.uleb128 0x2
 6293 041c 91       		.byte	0x91
 6294 041d 74       		.sleb128 -12
 6295 041e 1A       		.uleb128 0x1a
 6296 041f 6F757400 		.ascii	"out\000"
 6297 0423 01       		.byte	0x1
 6298 0424 9C01     		.2byte	0x19c
 6299 0426 FD000000 		.4byte	0xfd
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 147


 6300 042a 02       		.uleb128 0x2
 6301 042b 91       		.byte	0x91
 6302 042c 70       		.sleb128 -16
 6303 042d 00       		.byte	0
 6304 042e 1B       		.uleb128 0x1b
 6305 042f 6D617000 		.ascii	"map\000"
 6306 0433 01       		.byte	0x1
 6307 0434 1E02     		.2byte	0x21e
 6308 0436 FD000000 		.4byte	0xfd
 6309 043a 00000000 		.4byte	.LFB75
 6310 043e 56000000 		.4byte	.LFE75-.LFB75
 6311 0442 01       		.uleb128 0x1
 6312 0443 9C       		.byte	0x9c
 6313 0444 94040000 		.4byte	0x494
 6314 0448 19       		.uleb128 0x19
 6315 0449 05030000 		.4byte	.LASF64
 6316 044d 01       		.byte	0x1
 6317 044e 1E02     		.2byte	0x21e
 6318 0450 FD000000 		.4byte	0xfd
 6319 0454 02       		.uleb128 0x2
 6320 0455 91       		.byte	0x91
 6321 0456 6C       		.sleb128 -20
 6322 0457 19       		.uleb128 0x19
 6323 0458 4E010000 		.4byte	.LASF65
 6324 045c 01       		.byte	0x1
 6325 045d 1E02     		.2byte	0x21e
 6326 045f FD000000 		.4byte	0xfd
 6327 0463 02       		.uleb128 0x2
 6328 0464 91       		.byte	0x91
 6329 0465 68       		.sleb128 -24
 6330 0466 19       		.uleb128 0x19
 6331 0467 A3050000 		.4byte	.LASF66
 6332 046b 01       		.byte	0x1
 6333 046c 1E02     		.2byte	0x21e
 6334 046e FD000000 		.4byte	0xfd
 6335 0472 02       		.uleb128 0x2
 6336 0473 91       		.byte	0x91
 6337 0474 64       		.sleb128 -28
 6338 0475 19       		.uleb128 0x19
 6339 0476 89050000 		.4byte	.LASF67
 6340 047a 01       		.byte	0x1
 6341 047b 1E02     		.2byte	0x21e
 6342 047d FD000000 		.4byte	0xfd
 6343 0481 02       		.uleb128 0x2
 6344 0482 91       		.byte	0x91
 6345 0483 60       		.sleb128 -32
 6346 0484 19       		.uleb128 0x19
 6347 0485 05070000 		.4byte	.LASF68
 6348 0489 01       		.byte	0x1
 6349 048a 1E02     		.2byte	0x21e
 6350 048c FD000000 		.4byte	0xfd
 6351 0490 02       		.uleb128 0x2
 6352 0491 91       		.byte	0x91
 6353 0492 00       		.sleb128 0
 6354 0493 00       		.byte	0
 6355 0494 16       		.uleb128 0x16
 6356 0495 B1010000 		.4byte	.LASF69
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 148


 6357 0499 01       		.byte	0x1
 6358 049a 2702     		.2byte	0x227
 6359 049c 94000000 		.4byte	0x94
 6360 04a0 00000000 		.4byte	.LFB76
 6361 04a4 78130000 		.4byte	.LFE76-.LFB76
 6362 04a8 01       		.uleb128 0x1
 6363 04a9 9C       		.byte	0x9c
 6364 04aa 0B070000 		.4byte	0x70b
 6365 04ae 18       		.uleb128 0x18
 6366 04af CA0B0000 		.4byte	.LASF70
 6367 04b3 01       		.byte	0x1
 6368 04b4 8D02     		.2byte	0x28d
 6369 04b6 A2000000 		.4byte	0xa2
 6370 04ba 03       		.uleb128 0x3
 6371 04bb 91       		.byte	0x91
 6372 04bc B77F     		.sleb128 -73
 6373 04be 1C       		.uleb128 0x1c
 6374 04bf 0C000000 		.4byte	.LBB3
 6375 04c3 EA000000 		.4byte	.LBE3-.LBB3
 6376 04c7 F2040000 		.4byte	0x4f2
 6377 04cb 1A       		.uleb128 0x1a
 6378 04cc 6900     		.ascii	"i\000"
 6379 04ce 01       		.byte	0x1
 6380 04cf 2F02     		.2byte	0x22f
 6381 04d1 94000000 		.4byte	0x94
 6382 04d5 02       		.uleb128 0x2
 6383 04d6 91       		.byte	0x91
 6384 04d7 6C       		.sleb128 -20
 6385 04d8 12       		.uleb128 0x12
 6386 04d9 12000000 		.4byte	.LBB4
 6387 04dd D8000000 		.4byte	.LBE4-.LBB4
 6388 04e1 18       		.uleb128 0x18
 6389 04e2 55010000 		.4byte	.LASF71
 6390 04e6 01       		.byte	0x1
 6391 04e7 3202     		.2byte	0x232
 6392 04e9 FD000000 		.4byte	0xfd
 6393 04ed 02       		.uleb128 0x2
 6394 04ee 91       		.byte	0x91
 6395 04ef 40       		.sleb128 -64
 6396 04f0 00       		.byte	0
 6397 04f1 00       		.byte	0
 6398 04f2 1C       		.uleb128 0x1c
 6399 04f3 F6000000 		.4byte	.LBB5
 6400 04f7 52010000 		.4byte	.LBE5-.LBB5
 6401 04fb 68050000 		.4byte	0x568
 6402 04ff 1A       		.uleb128 0x1a
 6403 0500 6900     		.ascii	"i\000"
 6404 0502 01       		.byte	0x1
 6405 0503 3D02     		.2byte	0x23d
 6406 0505 94000000 		.4byte	0x94
 6407 0509 02       		.uleb128 0x2
 6408 050a 91       		.byte	0x91
 6409 050b 68       		.sleb128 -24
 6410 050c 12       		.uleb128 0x12
 6411 050d FC000000 		.4byte	.LBB6
 6412 0511 3E010000 		.4byte	.LBE6-.LBB6
 6413 0515 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 149


 6414 0516 CA020000 		.4byte	.LASF72
 6415 051a 01       		.byte	0x1
 6416 051b 3F02     		.2byte	0x23f
 6417 051d 94000000 		.4byte	0x94
 6418 0521 03       		.uleb128 0x3
 6419 0522 91       		.byte	0x91
 6420 0523 BC7F     		.sleb128 -68
 6421 0525 12       		.uleb128 0x12
 6422 0526 08010000 		.4byte	.LBB7
 6423 052a 32010000 		.4byte	.LBE7-.LBB7
 6424 052e 1A       		.uleb128 0x1a
 6425 052f 6A00     		.ascii	"j\000"
 6426 0531 01       		.byte	0x1
 6427 0532 4402     		.2byte	0x244
 6428 0534 94000000 		.4byte	0x94
 6429 0538 02       		.uleb128 0x2
 6430 0539 91       		.byte	0x91
 6431 053a 64       		.sleb128 -28
 6432 053b 12       		.uleb128 0x12
 6433 053c 24010000 		.4byte	.LBB8
 6434 0540 08010000 		.4byte	.LBE8-.LBB8
 6435 0544 18       		.uleb128 0x18
 6436 0545 33020000 		.4byte	.LASF73
 6437 0549 01       		.byte	0x1
 6438 054a 4702     		.2byte	0x247
 6439 054c 94000000 		.4byte	0x94
 6440 0550 03       		.uleb128 0x3
 6441 0551 91       		.byte	0x91
 6442 0552 B87F     		.sleb128 -72
 6443 0554 18       		.uleb128 0x18
 6444 0555 64050000 		.4byte	.LASF74
 6445 0559 01       		.byte	0x1
 6446 055a 4902     		.2byte	0x249
 6447 055c 47020000 		.4byte	0x247
 6448 0560 03       		.uleb128 0x3
 6449 0561 91       		.byte	0x91
 6450 0562 987F     		.sleb128 -104
 6451 0564 00       		.byte	0
 6452 0565 00       		.byte	0
 6453 0566 00       		.byte	0
 6454 0567 00       		.byte	0
 6455 0568 1C       		.uleb128 0x1c
 6456 0569 0E030000 		.4byte	.LBB9
 6457 056d 2A000000 		.4byte	.LBE9-.LBB9
 6458 0571 86050000 		.4byte	0x586
 6459 0575 18       		.uleb128 0x18
 6460 0576 21050000 		.4byte	.LASF75
 6461 057a 01       		.byte	0x1
 6462 057b 4903     		.2byte	0x349
 6463 057d A2000000 		.4byte	0xa2
 6464 0581 03       		.uleb128 0x3
 6465 0582 91       		.byte	0x91
 6466 0583 B67F     		.sleb128 -74
 6467 0585 00       		.byte	0
 6468 0586 1C       		.uleb128 0x1c
 6469 0587 64050000 		.4byte	.LBB10
 6470 058b EE000000 		.4byte	.LBE10-.LBB10
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 150


 6471 058f A4050000 		.4byte	0x5a4
 6472 0593 18       		.uleb128 0x18
 6473 0594 30000000 		.4byte	.LASF76
 6474 0598 01       		.byte	0x1
 6475 0599 D803     		.2byte	0x3d8
 6476 059b AD000000 		.4byte	0xad
 6477 059f 03       		.uleb128 0x3
 6478 05a0 91       		.byte	0x91
 6479 05a1 B47F     		.sleb128 -76
 6480 05a3 00       		.byte	0
 6481 05a4 1C       		.uleb128 0x1c
 6482 05a5 AE060000 		.4byte	.LBB11
 6483 05a9 28000000 		.4byte	.LBE11-.LBB11
 6484 05ad C2050000 		.4byte	0x5c2
 6485 05b1 18       		.uleb128 0x18
 6486 05b2 78030000 		.4byte	.LASF77
 6487 05b6 01       		.byte	0x1
 6488 05b7 FF03     		.2byte	0x3ff
 6489 05b9 B8000000 		.4byte	0xb8
 6490 05bd 03       		.uleb128 0x3
 6491 05be 91       		.byte	0x91
 6492 05bf B27F     		.sleb128 -78
 6493 05c1 00       		.byte	0
 6494 05c2 1C       		.uleb128 0x1c
 6495 05c3 3E070000 		.4byte	.LBB12
 6496 05c7 AA020000 		.4byte	.LBE12-.LBB12
 6497 05cb DD050000 		.4byte	0x5dd
 6498 05cf 1A       		.uleb128 0x1a
 6499 05d0 6900     		.ascii	"i\000"
 6500 05d2 01       		.byte	0x1
 6501 05d3 2804     		.2byte	0x428
 6502 05d5 94000000 		.4byte	0x94
 6503 05d9 02       		.uleb128 0x2
 6504 05da 91       		.byte	0x91
 6505 05db 60       		.sleb128 -32
 6506 05dc 00       		.byte	0
 6507 05dd 1C       		.uleb128 0x1c
 6508 05de 320A0000 		.4byte	.LBB13
 6509 05e2 CE000000 		.4byte	.LBE13-.LBB13
 6510 05e6 F8050000 		.4byte	0x5f8
 6511 05ea 1A       		.uleb128 0x1a
 6512 05eb 6900     		.ascii	"i\000"
 6513 05ed 01       		.byte	0x1
 6514 05ee 4904     		.2byte	0x449
 6515 05f0 94000000 		.4byte	0x94
 6516 05f4 02       		.uleb128 0x2
 6517 05f5 91       		.byte	0x91
 6518 05f6 5C       		.sleb128 -36
 6519 05f7 00       		.byte	0
 6520 05f8 1C       		.uleb128 0x1c
 6521 05f9 C80D0000 		.4byte	.LBB14
 6522 05fd A4000000 		.4byte	.LBE14-.LBB14
 6523 0601 13060000 		.4byte	0x613
 6524 0605 1A       		.uleb128 0x1a
 6525 0606 6900     		.ascii	"i\000"
 6526 0608 01       		.byte	0x1
 6527 0609 D304     		.2byte	0x4d3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 151


 6528 060b 94000000 		.4byte	0x94
 6529 060f 02       		.uleb128 0x2
 6530 0610 91       		.byte	0x91
 6531 0611 58       		.sleb128 -40
 6532 0612 00       		.byte	0
 6533 0613 1C       		.uleb128 0x1c
 6534 0614 6C0E0000 		.4byte	.LBB15
 6535 0618 28030000 		.4byte	.LBE15-.LBB15
 6536 061c 88060000 		.4byte	0x688
 6537 0620 1A       		.uleb128 0x1a
 6538 0621 6900     		.ascii	"i\000"
 6539 0623 01       		.byte	0x1
 6540 0624 E304     		.2byte	0x4e3
 6541 0626 94000000 		.4byte	0x94
 6542 062a 02       		.uleb128 0x2
 6543 062b 91       		.byte	0x91
 6544 062c 54       		.sleb128 -44
 6545 062d 12       		.uleb128 0x12
 6546 062e 940E0000 		.4byte	.LBB16
 6547 0632 F2020000 		.4byte	.LBE16-.LBB16
 6548 0636 18       		.uleb128 0x18
 6549 0637 EE070000 		.4byte	.LASF78
 6550 063b 01       		.byte	0x1
 6551 063c F404     		.2byte	0x4f4
 6552 063e FD000000 		.4byte	0xfd
 6553 0642 03       		.uleb128 0x3
 6554 0643 91       		.byte	0x91
 6555 0644 AC7F     		.sleb128 -84
 6556 0646 18       		.uleb128 0x18
 6557 0647 920A0000 		.4byte	.LASF79
 6558 064b 01       		.byte	0x1
 6559 064c 0205     		.2byte	0x502
 6560 064e FD000000 		.4byte	0xfd
 6561 0652 03       		.uleb128 0x3
 6562 0653 91       		.byte	0x91
 6563 0654 A87F     		.sleb128 -88
 6564 0656 18       		.uleb128 0x18
 6565 0657 4E070000 		.4byte	.LASF80
 6566 065b 01       		.byte	0x1
 6567 065c 0505     		.2byte	0x505
 6568 065e FD000000 		.4byte	0xfd
 6569 0662 03       		.uleb128 0x3
 6570 0663 91       		.byte	0x91
 6571 0664 A47F     		.sleb128 -92
 6572 0666 18       		.uleb128 0x18
 6573 0667 C1030000 		.4byte	.LASF81
 6574 066b 01       		.byte	0x1
 6575 066c 0705     		.2byte	0x507
 6576 066e FD000000 		.4byte	0xfd
 6577 0672 03       		.uleb128 0x3
 6578 0673 91       		.byte	0x91
 6579 0674 A07F     		.sleb128 -96
 6580 0676 18       		.uleb128 0x18
 6581 0677 4C0A0000 		.4byte	.LASF82
 6582 067b 01       		.byte	0x1
 6583 067c 0905     		.2byte	0x509
 6584 067e FD000000 		.4byte	0xfd
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 152


 6585 0682 03       		.uleb128 0x3
 6586 0683 91       		.byte	0x91
 6587 0684 9C7F     		.sleb128 -100
 6588 0686 00       		.byte	0
 6589 0687 00       		.byte	0
 6590 0688 1C       		.uleb128 0x1c
 6591 0689 26120000 		.4byte	.LBB17
 6592 068d 4A000000 		.4byte	.LBE17-.LBB17
 6593 0691 BD060000 		.4byte	0x6bd
 6594 0695 1A       		.uleb128 0x1a
 6595 0696 6900     		.ascii	"i\000"
 6596 0698 01       		.byte	0x1
 6597 0699 4105     		.2byte	0x541
 6598 069b 94000000 		.4byte	0x94
 6599 069f 02       		.uleb128 0x2
 6600 06a0 91       		.byte	0x91
 6601 06a1 50       		.sleb128 -48
 6602 06a2 12       		.uleb128 0x12
 6603 06a3 2C120000 		.4byte	.LBB18
 6604 06a7 38000000 		.4byte	.LBE18-.LBB18
 6605 06ab 18       		.uleb128 0x18
 6606 06ac FD000000 		.4byte	.LASF83
 6607 06b0 01       		.byte	0x1
 6608 06b1 4305     		.2byte	0x543
 6609 06b3 47020000 		.4byte	0x247
 6610 06b7 03       		.uleb128 0x3
 6611 06b8 91       		.byte	0x91
 6612 06b9 947F     		.sleb128 -108
 6613 06bb 00       		.byte	0
 6614 06bc 00       		.byte	0
 6615 06bd 1C       		.uleb128 0x1c
 6616 06be A2120000 		.4byte	.LBB19
 6617 06c2 22000000 		.4byte	.LBE19-.LBB19
 6618 06c6 D8060000 		.4byte	0x6d8
 6619 06ca 1A       		.uleb128 0x1a
 6620 06cb 6900     		.ascii	"i\000"
 6621 06cd 01       		.byte	0x1
 6622 06ce 4E05     		.2byte	0x54e
 6623 06d0 94000000 		.4byte	0x94
 6624 06d4 02       		.uleb128 0x2
 6625 06d5 91       		.byte	0x91
 6626 06d6 4C       		.sleb128 -52
 6627 06d7 00       		.byte	0
 6628 06d8 1C       		.uleb128 0x1c
 6629 06d9 EE120000 		.4byte	.LBB20
 6630 06dd 24000000 		.4byte	.LBE20-.LBB20
 6631 06e1 F3060000 		.4byte	0x6f3
 6632 06e5 1A       		.uleb128 0x1a
 6633 06e6 6900     		.ascii	"i\000"
 6634 06e8 01       		.byte	0x1
 6635 06e9 5505     		.2byte	0x555
 6636 06eb 94000000 		.4byte	0x94
 6637 06ef 02       		.uleb128 0x2
 6638 06f0 91       		.byte	0x91
 6639 06f1 48       		.sleb128 -56
 6640 06f2 00       		.byte	0
 6641 06f3 12       		.uleb128 0x12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 153


 6642 06f4 12130000 		.4byte	.LBB21
 6643 06f8 20000000 		.4byte	.LBE21-.LBB21
 6644 06fc 1A       		.uleb128 0x1a
 6645 06fd 6900     		.ascii	"i\000"
 6646 06ff 01       		.byte	0x1
 6647 0700 5905     		.2byte	0x559
 6648 0702 94000000 		.4byte	0x94
 6649 0706 02       		.uleb128 0x2
 6650 0707 91       		.byte	0x91
 6651 0708 44       		.sleb128 -60
 6652 0709 00       		.byte	0
 6653 070a 00       		.byte	0
 6654 070b 15       		.uleb128 0x15
 6655 070c 2C0B0000 		.4byte	.LASF84
 6656 0710 01       		.byte	0x1
 6657 0711 6705     		.2byte	0x567
 6658 0713 00000000 		.4byte	.LFB77
 6659 0717 08010000 		.4byte	.LFE77-.LFB77
 6660 071b 01       		.uleb128 0x1
 6661 071c 9C       		.byte	0x9c
 6662 071d 16       		.uleb128 0x16
 6663 071e 4C050000 		.4byte	.LASF85
 6664 0722 01       		.byte	0x1
 6665 0723 9F05     		.2byte	0x59f
 6666 0725 D9000000 		.4byte	0xd9
 6667 0729 00000000 		.4byte	.LFB78
 6668 072d A0000000 		.4byte	.LFE78-.LFB78
 6669 0731 01       		.uleb128 0x1
 6670 0732 9C       		.byte	0x9c
 6671 0733 83070000 		.4byte	0x783
 6672 0737 19       		.uleb128 0x19
 6673 0738 020B0000 		.4byte	.LASF86
 6674 073c 01       		.byte	0x1
 6675 073d 9F05     		.2byte	0x59f
 6676 073f D9000000 		.4byte	0xd9
 6677 0743 02       		.uleb128 0x2
 6678 0744 91       		.byte	0x91
 6679 0745 6F       		.sleb128 -17
 6680 0746 19       		.uleb128 0x19
 6681 0747 F6000000 		.4byte	.LASF87
 6682 074b 01       		.byte	0x1
 6683 074c 9F05     		.2byte	0x59f
 6684 074e E5000000 		.4byte	0xe5
 6685 0752 02       		.uleb128 0x2
 6686 0753 91       		.byte	0x91
 6687 0754 6C       		.sleb128 -20
 6688 0755 19       		.uleb128 0x19
 6689 0756 820A0000 		.4byte	.LASF88
 6690 075a 01       		.byte	0x1
 6691 075b 9F05     		.2byte	0x59f
 6692 075d A2000000 		.4byte	0xa2
 6693 0761 02       		.uleb128 0x2
 6694 0762 91       		.byte	0x91
 6695 0763 6E       		.sleb128 -18
 6696 0764 18       		.uleb128 0x18
 6697 0765 21050000 		.4byte	.LASF75
 6698 0769 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 154


 6699 076a A105     		.2byte	0x5a1
 6700 076c 2A010000 		.4byte	0x12a
 6701 0770 02       		.uleb128 0x2
 6702 0771 91       		.byte	0x91
 6703 0772 73       		.sleb128 -13
 6704 0773 18       		.uleb128 0x18
 6705 0774 0B070000 		.4byte	.LASF89
 6706 0778 01       		.byte	0x1
 6707 0779 A205     		.2byte	0x5a2
 6708 077b CE000000 		.4byte	0xce
 6709 077f 02       		.uleb128 0x2
 6710 0780 91       		.byte	0x91
 6711 0781 74       		.sleb128 -12
 6712 0782 00       		.byte	0
 6713 0783 16       		.uleb128 0x16
 6714 0784 5C080000 		.4byte	.LASF90
 6715 0788 01       		.byte	0x1
 6716 0789 CC05     		.2byte	0x5cc
 6717 078b D9000000 		.4byte	0xd9
 6718 078f 00000000 		.4byte	.LFB79
 6719 0793 B4000000 		.4byte	.LFE79-.LFB79
 6720 0797 01       		.uleb128 0x1
 6721 0798 9C       		.byte	0x9c
 6722 0799 E9070000 		.4byte	0x7e9
 6723 079d 19       		.uleb128 0x19
 6724 079e 020B0000 		.4byte	.LASF86
 6725 07a2 01       		.byte	0x1
 6726 07a3 CC05     		.2byte	0x5cc
 6727 07a5 D9000000 		.4byte	0xd9
 6728 07a9 02       		.uleb128 0x2
 6729 07aa 91       		.byte	0x91
 6730 07ab 6F       		.sleb128 -17
 6731 07ac 19       		.uleb128 0x19
 6732 07ad F6000000 		.4byte	.LASF87
 6733 07b1 01       		.byte	0x1
 6734 07b2 CC05     		.2byte	0x5cc
 6735 07b4 D9000000 		.4byte	0xd9
 6736 07b8 02       		.uleb128 0x2
 6737 07b9 91       		.byte	0x91
 6738 07ba 6E       		.sleb128 -18
 6739 07bb 19       		.uleb128 0x19
 6740 07bc 820A0000 		.4byte	.LASF88
 6741 07c0 01       		.byte	0x1
 6742 07c1 CC05     		.2byte	0x5cc
 6743 07c3 A2000000 		.4byte	0xa2
 6744 07c7 02       		.uleb128 0x2
 6745 07c8 91       		.byte	0x91
 6746 07c9 6D       		.sleb128 -19
 6747 07ca 18       		.uleb128 0x18
 6748 07cb 21050000 		.4byte	.LASF75
 6749 07cf 01       		.byte	0x1
 6750 07d0 CE05     		.2byte	0x5ce
 6751 07d2 2A010000 		.4byte	0x12a
 6752 07d6 02       		.uleb128 0x2
 6753 07d7 91       		.byte	0x91
 6754 07d8 73       		.sleb128 -13
 6755 07d9 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 155


 6756 07da 0B070000 		.4byte	.LASF89
 6757 07de 01       		.byte	0x1
 6758 07df CF05     		.2byte	0x5cf
 6759 07e1 CE000000 		.4byte	0xce
 6760 07e5 02       		.uleb128 0x2
 6761 07e6 91       		.byte	0x91
 6762 07e7 74       		.sleb128 -12
 6763 07e8 00       		.byte	0
 6764 07e9 1D       		.uleb128 0x1d
 6765 07ea 82030000 		.4byte	.LASF91
 6766 07ee 01       		.byte	0x1
 6767 07ef FB05     		.2byte	0x5fb
 6768 07f1 00000000 		.4byte	.LFB80
 6769 07f5 0C000000 		.4byte	.LFE80-.LFB80
 6770 07f9 01       		.uleb128 0x1
 6771 07fa 9C       		.byte	0x9c
 6772 07fb 15       		.uleb128 0x15
 6773 07fc 5F030000 		.4byte	.LASF92
 6774 0800 01       		.byte	0x1
 6775 0801 1806     		.2byte	0x618
 6776 0803 00000000 		.4byte	.LFB81
 6777 0807 54000000 		.4byte	.LFE81-.LFB81
 6778 080b 01       		.uleb128 0x1
 6779 080c 9C       		.byte	0x9c
 6780 080d 15       		.uleb128 0x15
 6781 080e F1020000 		.4byte	.LASF93
 6782 0812 01       		.byte	0x1
 6783 0813 2E06     		.2byte	0x62e
 6784 0815 00000000 		.4byte	.LFB82
 6785 0819 74000000 		.4byte	.LFE82-.LFB82
 6786 081d 01       		.uleb128 0x1
 6787 081e 9C       		.byte	0x9c
 6788 081f 16       		.uleb128 0x16
 6789 0820 EB060000 		.4byte	.LASF94
 6790 0824 01       		.byte	0x1
 6791 0825 6B06     		.2byte	0x66b
 6792 0827 FD000000 		.4byte	0xfd
 6793 082b 00000000 		.4byte	.LFB83
 6794 082f 98000000 		.4byte	.LFE83-.LFB83
 6795 0833 01       		.uleb128 0x1
 6796 0834 9C       		.byte	0x9c
 6797 0835 6E080000 		.4byte	0x86e
 6798 0839 17       		.uleb128 0x17
 6799 083a 5800     		.ascii	"X\000"
 6800 083c 01       		.byte	0x1
 6801 083d 6B06     		.2byte	0x66b
 6802 083f FD000000 		.4byte	0xfd
 6803 0843 02       		.uleb128 0x2
 6804 0844 91       		.byte	0x91
 6805 0845 64       		.sleb128 -28
 6806 0846 1A       		.uleb128 0x1a
 6807 0847 5900     		.ascii	"Y\000"
 6808 0849 01       		.byte	0x1
 6809 084a 6C06     		.2byte	0x66c
 6810 084c FD000000 		.4byte	0xfd
 6811 0850 02       		.uleb128 0x2
 6812 0851 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 156


 6813 0852 70       		.sleb128 -16
 6814 0853 1A       		.uleb128 0x1a
 6815 0854 4600     		.ascii	"F\000"
 6816 0856 01       		.byte	0x1
 6817 0857 6C06     		.2byte	0x66c
 6818 0859 FD000000 		.4byte	0xfd
 6819 085d 02       		.uleb128 0x2
 6820 085e 91       		.byte	0x91
 6821 085f 74       		.sleb128 -12
 6822 0860 1A       		.uleb128 0x1a
 6823 0861 4500     		.ascii	"E\000"
 6824 0863 01       		.byte	0x1
 6825 0864 6D06     		.2byte	0x66d
 6826 0866 94000000 		.4byte	0x94
 6827 086a 02       		.uleb128 0x2
 6828 086b 91       		.byte	0x91
 6829 086c 6C       		.sleb128 -20
 6830 086d 00       		.byte	0
 6831 086e 1E       		.uleb128 0x1e
 6832 086f 80000000 		.4byte	.LASF96
 6833 0873 01       		.byte	0x1
 6834 0874 7F06     		.2byte	0x67f
 6835 0876 00000000 		.4byte	.LFB84
 6836 087a 0C010000 		.4byte	.LFE84-.LFB84
 6837 087e 01       		.uleb128 0x1
 6838 087f 9C       		.byte	0x9c
 6839 0880 D8080000 		.4byte	0x8d8
 6840 0884 19       		.uleb128 0x19
 6841 0885 C0070000 		.4byte	.LASF97
 6842 0889 01       		.byte	0x1
 6843 088a 7F06     		.2byte	0x67f
 6844 088c 94000000 		.4byte	0x94
 6845 0890 02       		.uleb128 0x2
 6846 0891 91       		.byte	0x91
 6847 0892 64       		.sleb128 -28
 6848 0893 18       		.uleb128 0x18
 6849 0894 8B090000 		.4byte	.LASF98
 6850 0898 01       		.byte	0x1
 6851 0899 8106     		.2byte	0x681
 6852 089b FD000000 		.4byte	0xfd
 6853 089f 02       		.uleb128 0x2
 6854 08a0 91       		.byte	0x91
 6855 08a1 70       		.sleb128 -16
 6856 08a2 1A       		.uleb128 0x1a
 6857 08a3 7600     		.ascii	"v\000"
 6858 08a5 01       		.byte	0x1
 6859 08a6 8206     		.2byte	0x682
 6860 08a8 FD000000 		.4byte	0xfd
 6861 08ac 02       		.uleb128 0x2
 6862 08ad 91       		.byte	0x91
 6863 08ae 6C       		.sleb128 -20
 6864 08af 18       		.uleb128 0x18
 6865 08b0 31040000 		.4byte	.LASF99
 6866 08b4 01       		.byte	0x1
 6867 08b5 8306     		.2byte	0x683
 6868 08b7 94000000 		.4byte	0x94
 6869 08bb 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 157


 6870 08bc 91       		.byte	0x91
 6871 08bd 74       		.sleb128 -12
 6872 08be 12       		.uleb128 0x12
 6873 08bf 9A000000 		.4byte	.LBB22
 6874 08c3 36000000 		.4byte	.LBE22-.LBB22
 6875 08c7 18       		.uleb128 0x18
 6876 08c8 840B0000 		.4byte	.LASF100
 6877 08cc 01       		.byte	0x1
 6878 08cd 9206     		.2byte	0x692
 6879 08cf 94000000 		.4byte	0x94
 6880 08d3 02       		.uleb128 0x2
 6881 08d4 91       		.byte	0x91
 6882 08d5 68       		.sleb128 -24
 6883 08d6 00       		.byte	0
 6884 08d7 00       		.byte	0
 6885 08d8 1E       		.uleb128 0x1e
 6886 08d9 70040000 		.4byte	.LASF101
 6887 08dd 01       		.byte	0x1
 6888 08de 9D06     		.2byte	0x69d
 6889 08e0 00000000 		.4byte	.LFB85
 6890 08e4 1C000000 		.4byte	.LFE85-.LFB85
 6891 08e8 01       		.uleb128 0x1
 6892 08e9 9C       		.byte	0x9c
 6893 08ea 0C090000 		.4byte	0x90c
 6894 08ee 17       		.uleb128 0x17
 6895 08ef 636300   		.ascii	"cc\000"
 6896 08f2 01       		.byte	0x1
 6897 08f3 9D06     		.2byte	0x69d
 6898 08f5 94000000 		.4byte	0x94
 6899 08f9 02       		.uleb128 0x2
 6900 08fa 91       		.byte	0x91
 6901 08fb 74       		.sleb128 -12
 6902 08fc 17       		.uleb128 0x17
 6903 08fd 76616C00 		.ascii	"val\000"
 6904 0901 01       		.byte	0x1
 6905 0902 9D06     		.2byte	0x69d
 6906 0904 94000000 		.4byte	0x94
 6907 0908 02       		.uleb128 0x2
 6908 0909 91       		.byte	0x91
 6909 090a 70       		.sleb128 -16
 6910 090b 00       		.byte	0
 6911 090c 1E       		.uleb128 0x1e
 6912 090d 37060000 		.4byte	.LASF102
 6913 0911 01       		.byte	0x1
 6914 0912 A306     		.2byte	0x6a3
 6915 0914 00000000 		.4byte	.LFB86
 6916 0918 68000000 		.4byte	.LFE86-.LFB86
 6917 091c 01       		.uleb128 0x1
 6918 091d 9C       		.byte	0x9c
 6919 091e 50090000 		.4byte	0x950
 6920 0922 19       		.uleb128 0x19
 6921 0923 CA010000 		.4byte	.LASF103
 6922 0927 01       		.byte	0x1
 6923 0928 A306     		.2byte	0x6a3
 6924 092a 94000000 		.4byte	0x94
 6925 092e 02       		.uleb128 0x2
 6926 092f 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 158


 6927 0930 74       		.sleb128 -12
 6928 0931 19       		.uleb128 0x19
 6929 0932 98070000 		.4byte	.LASF104
 6930 0936 01       		.byte	0x1
 6931 0937 A306     		.2byte	0x6a3
 6932 0939 94000000 		.4byte	0x94
 6933 093d 02       		.uleb128 0x2
 6934 093e 91       		.byte	0x91
 6935 093f 70       		.sleb128 -16
 6936 0940 19       		.uleb128 0x19
 6937 0941 44050000 		.4byte	.LASF105
 6938 0945 01       		.byte	0x1
 6939 0946 A306     		.2byte	0x6a3
 6940 0948 94000000 		.4byte	0x94
 6941 094c 02       		.uleb128 0x2
 6942 094d 91       		.byte	0x91
 6943 094e 6C       		.sleb128 -20
 6944 094f 00       		.byte	0
 6945 0950 1E       		.uleb128 0x1e
 6946 0951 A9030000 		.4byte	.LASF106
 6947 0955 01       		.byte	0x1
 6948 0956 B106     		.2byte	0x6b1
 6949 0958 00000000 		.4byte	.LFB87
 6950 095c 68000000 		.4byte	.LFE87-.LFB87
 6951 0960 01       		.uleb128 0x1
 6952 0961 9C       		.byte	0x9c
 6953 0962 94090000 		.4byte	0x994
 6954 0966 19       		.uleb128 0x19
 6955 0967 CA010000 		.4byte	.LASF103
 6956 096b 01       		.byte	0x1
 6957 096c B106     		.2byte	0x6b1
 6958 096e 94000000 		.4byte	0x94
 6959 0972 02       		.uleb128 0x2
 6960 0973 91       		.byte	0x91
 6961 0974 74       		.sleb128 -12
 6962 0975 19       		.uleb128 0x19
 6963 0976 16030000 		.4byte	.LASF107
 6964 097a 01       		.byte	0x1
 6965 097b B106     		.2byte	0x6b1
 6966 097d 94000000 		.4byte	0x94
 6967 0981 02       		.uleb128 0x2
 6968 0982 91       		.byte	0x91
 6969 0983 70       		.sleb128 -16
 6970 0984 19       		.uleb128 0x19
 6971 0985 44050000 		.4byte	.LASF105
 6972 0989 01       		.byte	0x1
 6973 098a B106     		.2byte	0x6b1
 6974 098c 94000000 		.4byte	0x94
 6975 0990 02       		.uleb128 0x2
 6976 0991 91       		.byte	0x91
 6977 0992 6C       		.sleb128 -20
 6978 0993 00       		.byte	0
 6979 0994 1E       		.uleb128 0x1e
 6980 0995 D4030000 		.4byte	.LASF108
 6981 0999 01       		.byte	0x1
 6982 099a BF06     		.2byte	0x6bf
 6983 099c 00000000 		.4byte	.LFB88
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 159


 6984 09a0 68000000 		.4byte	.LFE88-.LFB88
 6985 09a4 01       		.uleb128 0x1
 6986 09a5 9C       		.byte	0x9c
 6987 09a6 D8090000 		.4byte	0x9d8
 6988 09aa 19       		.uleb128 0x19
 6989 09ab 0E010000 		.4byte	.LASF109
 6990 09af 01       		.byte	0x1
 6991 09b0 BF06     		.2byte	0x6bf
 6992 09b2 94000000 		.4byte	0x94
 6993 09b6 02       		.uleb128 0x2
 6994 09b7 91       		.byte	0x91
 6995 09b8 74       		.sleb128 -12
 6996 09b9 19       		.uleb128 0x19
 6997 09ba 9F000000 		.4byte	.LASF110
 6998 09be 01       		.byte	0x1
 6999 09bf BF06     		.2byte	0x6bf
 7000 09c1 94000000 		.4byte	0x94
 7001 09c5 02       		.uleb128 0x2
 7002 09c6 91       		.byte	0x91
 7003 09c7 70       		.sleb128 -16
 7004 09c8 19       		.uleb128 0x19
 7005 09c9 44050000 		.4byte	.LASF105
 7006 09cd 01       		.byte	0x1
 7007 09ce BF06     		.2byte	0x6bf
 7008 09d0 94000000 		.4byte	0x94
 7009 09d4 02       		.uleb128 0x2
 7010 09d5 91       		.byte	0x91
 7011 09d6 6C       		.sleb128 -20
 7012 09d7 00       		.byte	0
 7013 09d8 1E       		.uleb128 0x1e
 7014 09d9 56070000 		.4byte	.LASF111
 7015 09dd 01       		.byte	0x1
 7016 09de CD06     		.2byte	0x6cd
 7017 09e0 00000000 		.4byte	.LFB89
 7018 09e4 6C000000 		.4byte	.LFE89-.LFB89
 7019 09e8 01       		.uleb128 0x1
 7020 09e9 9C       		.byte	0x9c
 7021 09ea 0D0A0000 		.4byte	0xa0d
 7022 09ee 17       		.uleb128 0x17
 7023 09ef 76616C00 		.ascii	"val\000"
 7024 09f3 01       		.byte	0x1
 7025 09f4 CD06     		.2byte	0x6cd
 7026 09f6 94000000 		.4byte	0x94
 7027 09fa 02       		.uleb128 0x2
 7028 09fb 91       		.byte	0x91
 7029 09fc 74       		.sleb128 -12
 7030 09fd 19       		.uleb128 0x19
 7031 09fe 44050000 		.4byte	.LASF105
 7032 0a02 01       		.byte	0x1
 7033 0a03 CD06     		.2byte	0x6cd
 7034 0a05 94000000 		.4byte	0x94
 7035 0a09 02       		.uleb128 0x2
 7036 0a0a 91       		.byte	0x91
 7037 0a0b 70       		.sleb128 -16
 7038 0a0c 00       		.byte	0
 7039 0a0d 15       		.uleb128 0x15
 7040 0a0e D6010000 		.4byte	.LASF112
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 160


 7041 0a12 01       		.byte	0x1
 7042 0a13 DC06     		.2byte	0x6dc
 7043 0a15 00000000 		.4byte	.LFB90
 7044 0a19 64000000 		.4byte	.LFE90-.LFB90
 7045 0a1d 01       		.uleb128 0x1
 7046 0a1e 9C       		.byte	0x9c
 7047 0a1f 1E       		.uleb128 0x1e
 7048 0a20 78040000 		.4byte	.LASF113
 7049 0a24 01       		.byte	0x1
 7050 0a25 F806     		.2byte	0x6f8
 7051 0a27 00000000 		.4byte	.LFB91
 7052 0a2b 5C020000 		.4byte	.LFE91-.LFB91
 7053 0a2f 01       		.uleb128 0x1
 7054 0a30 9C       		.byte	0x9c
 7055 0a31 C70A0000 		.4byte	0xac7
 7056 0a35 1C       		.uleb128 0x1c
 7057 0a36 14000000 		.4byte	.LBB23
 7058 0a3a 3A000000 		.4byte	.LBE23-.LBB23
 7059 0a3e 500A0000 		.4byte	0xa50
 7060 0a42 1A       		.uleb128 0x1a
 7061 0a43 6900     		.ascii	"i\000"
 7062 0a45 01       		.byte	0x1
 7063 0a46 FE06     		.2byte	0x6fe
 7064 0a48 CE000000 		.4byte	0xce
 7065 0a4c 02       		.uleb128 0x2
 7066 0a4d 91       		.byte	0x91
 7067 0a4e 6C       		.sleb128 -20
 7068 0a4f 00       		.byte	0
 7069 0a50 12       		.uleb128 0x12
 7070 0a51 8E000000 		.4byte	.LBB24
 7071 0a55 96010000 		.4byte	.LBE24-.LBB24
 7072 0a59 18       		.uleb128 0x18
 7073 0a5a 5F010000 		.4byte	.LASF114
 7074 0a5e 01       		.byte	0x1
 7075 0a5f 1407     		.2byte	0x714
 7076 0a61 47020000 		.4byte	0x247
 7077 0a65 02       		.uleb128 0x2
 7078 0a66 91       		.byte	0x91
 7079 0a67 58       		.sleb128 -40
 7080 0a68 18       		.uleb128 0x18
 7081 0a69 A4010000 		.4byte	.LASF115
 7082 0a6d 01       		.byte	0x1
 7083 0a6e 1507     		.2byte	0x715
 7084 0a70 CE000000 		.4byte	0xce
 7085 0a74 02       		.uleb128 0x2
 7086 0a75 91       		.byte	0x91
 7087 0a76 68       		.sleb128 -24
 7088 0a77 18       		.uleb128 0x18
 7089 0a78 A90A0000 		.4byte	.LASF116
 7090 0a7c 01       		.byte	0x1
 7091 0a7d 1607     		.2byte	0x716
 7092 0a7f CE000000 		.4byte	0xce
 7093 0a83 02       		.uleb128 0x2
 7094 0a84 91       		.byte	0x91
 7095 0a85 60       		.sleb128 -32
 7096 0a86 18       		.uleb128 0x18
 7097 0a87 CA020000 		.4byte	.LASF72
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 161


 7098 0a8b 01       		.byte	0x1
 7099 0a8c 1707     		.2byte	0x717
 7100 0a8e B8000000 		.4byte	0xb8
 7101 0a92 02       		.uleb128 0x2
 7102 0a93 91       		.byte	0x91
 7103 0a94 5E       		.sleb128 -34
 7104 0a95 12       		.uleb128 0x12
 7105 0a96 A8000000 		.4byte	.LBB25
 7106 0a9a 7C010000 		.4byte	.LBE25-.LBB25
 7107 0a9e 1A       		.uleb128 0x1a
 7108 0a9f 6900     		.ascii	"i\000"
 7109 0aa1 01       		.byte	0x1
 7110 0aa2 1A07     		.2byte	0x71a
 7111 0aa4 CE000000 		.4byte	0xce
 7112 0aa8 02       		.uleb128 0x2
 7113 0aa9 91       		.byte	0x91
 7114 0aaa 64       		.sleb128 -28
 7115 0aab 12       		.uleb128 0x12
 7116 0aac AE000000 		.4byte	.LBB26
 7117 0ab0 64010000 		.4byte	.LBE26-.LBB26
 7118 0ab4 18       		.uleb128 0x18
 7119 0ab5 33020000 		.4byte	.LASF73
 7120 0ab9 01       		.byte	0x1
 7121 0aba 2407     		.2byte	0x724
 7122 0abc B8000000 		.4byte	0xb8
 7123 0ac0 02       		.uleb128 0x2
 7124 0ac1 91       		.byte	0x91
 7125 0ac2 5C       		.sleb128 -36
 7126 0ac3 00       		.byte	0
 7127 0ac4 00       		.byte	0
 7128 0ac5 00       		.byte	0
 7129 0ac6 00       		.byte	0
 7130 0ac7 1E       		.uleb128 0x1e
 7131 0ac8 60020000 		.4byte	.LASF117
 7132 0acc 01       		.byte	0x1
 7133 0acd 3607     		.2byte	0x736
 7134 0acf 00000000 		.4byte	.LFB92
 7135 0ad3 FC000000 		.4byte	.LFE92-.LFB92
 7136 0ad7 01       		.uleb128 0x1
 7137 0ad8 9C       		.byte	0x9c
 7138 0ad9 130B0000 		.4byte	0xb13
 7139 0add 19       		.uleb128 0x19
 7140 0ade 84070000 		.4byte	.LASF118
 7141 0ae2 01       		.byte	0x1
 7142 0ae3 3607     		.2byte	0x736
 7143 0ae5 D9000000 		.4byte	0xd9
 7144 0ae9 02       		.uleb128 0x2
 7145 0aea 91       		.byte	0x91
 7146 0aeb 6F       		.sleb128 -17
 7147 0aec 19       		.uleb128 0x19
 7148 0aed B4080000 		.4byte	.LASF119
 7149 0af1 01       		.byte	0x1
 7150 0af2 3607     		.2byte	0x736
 7151 0af4 130B0000 		.4byte	0xb13
 7152 0af8 02       		.uleb128 0x2
 7153 0af9 91       		.byte	0x91
 7154 0afa 68       		.sleb128 -24
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 162


 7155 0afb 12       		.uleb128 0x12
 7156 0afc 48000000 		.4byte	.LBB27
 7157 0b00 54000000 		.4byte	.LBE27-.LBB27
 7158 0b04 1A       		.uleb128 0x1a
 7159 0b05 6900     		.ascii	"i\000"
 7160 0b07 01       		.byte	0x1
 7161 0b08 8507     		.2byte	0x785
 7162 0b0a 94000000 		.4byte	0x94
 7163 0b0e 02       		.uleb128 0x2
 7164 0b0f 91       		.byte	0x91
 7165 0b10 74       		.sleb128 -12
 7166 0b11 00       		.byte	0
 7167 0b12 00       		.byte	0
 7168 0b13 1F       		.uleb128 0x1f
 7169 0b14 04       		.byte	0x4
 7170 0b15 D9000000 		.4byte	0xd9
 7171 0b19 07       		.uleb128 0x7
 7172 0b1a D9000000 		.4byte	0xd9
 7173 0b1e 290B0000 		.4byte	0xb29
 7174 0b22 08       		.uleb128 0x8
 7175 0b23 36010000 		.4byte	0x136
 7176 0b27 01       		.byte	0x1
 7177 0b28 00       		.byte	0
 7178 0b29 18       		.uleb128 0x18
 7179 0b2a 30030000 		.4byte	.LASF120
 7180 0b2e 01       		.byte	0x1
 7181 0b2f 3701     		.2byte	0x137
 7182 0b31 190B0000 		.4byte	0xb19
 7183 0b35 05       		.uleb128 0x5
 7184 0b36 03       		.byte	0x3
 7185 0b37 34000000 		.4byte	eepromArray
 7186 0b3b 20       		.uleb128 0x20
 7187 0b3c 64000000 		.4byte	.LASF121
 7188 0b40 07       		.byte	0x7
 7189 0b41 82       		.byte	0x82
 7190 0b42 BF010000 		.4byte	0x1bf
 7191 0b46 07       		.uleb128 0x7
 7192 0b47 570B0000 		.4byte	0xb57
 7193 0b4b 570B0000 		.4byte	0xb57
 7194 0b4f 21       		.uleb128 0x21
 7195 0b50 36010000 		.4byte	0x136
 7196 0b54 FF03     		.2byte	0x3ff
 7197 0b56 00       		.byte	0
 7198 0b57 22       		.uleb128 0x22
 7199 0b58 A2000000 		.4byte	0xa2
 7200 0b5c 23       		.uleb128 0x23
 7201 0b5d F4040000 		.4byte	.LASF122
 7202 0b61 01       		.byte	0x1
 7203 0b62 4401     		.2byte	0x144
 7204 0b64 6E0B0000 		.4byte	0xb6e
 7205 0b68 05       		.uleb128 0x5
 7206 0b69 03       		.byte	0x3
 7207 0b6a 00000000 		.4byte	Em_EEPROM_em_EepromStorage
 7208 0b6e 22       		.uleb128 0x22
 7209 0b6f 460B0000 		.4byte	0xb46
 7210 0b73 24       		.uleb128 0x24
 7211 0b74 F8060000 		.4byte	.LASF123
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 163


 7212 0b78 08       		.byte	0x8
 7213 0b79 1207     		.2byte	0x712
 7214 0b7b 7F0B0000 		.4byte	0xb7f
 7215 0b7f 06       		.uleb128 0x6
 7216 0b80 C3000000 		.4byte	0xc3
 7217 0b84 07       		.uleb128 0x7
 7218 0b85 03020000 		.4byte	0x203
 7219 0b89 940B0000 		.4byte	0xb94
 7220 0b8d 08       		.uleb128 0x8
 7221 0b8e 36010000 		.4byte	0x136
 7222 0b92 FF       		.byte	0xff
 7223 0b93 00       		.byte	0
 7224 0b94 23       		.uleb128 0x23
 7225 0b95 A5000000 		.4byte	.LASF124
 7226 0b99 01       		.byte	0x1
 7227 0b9a A801     		.2byte	0x1a8
 7228 0b9c A60B0000 		.4byte	0xba6
 7229 0ba0 05       		.uleb128 0x5
 7230 0ba1 03       		.byte	0x3
 7231 0ba2 00000000 		.4byte	I2Cbuff1
 7232 0ba6 06       		.uleb128 0x6
 7233 0ba7 840B0000 		.4byte	0xb84
 7234 0bab 25       		.uleb128 0x25
 7235 0bac 3E090000 		.4byte	.LASF125
 7236 0bb0 01       		.byte	0x1
 7237 0bb1 0C       		.byte	0xc
 7238 0bb2 2A010000 		.4byte	0x12a
 7239 0bb6 05       		.uleb128 0x5
 7240 0bb7 03       		.byte	0x3
 7241 0bb8 00000000 		.4byte	usbActivityCounter
 7242 0bbc 25       		.uleb128 0x25
 7243 0bbd B4080000 		.4byte	.LASF119
 7244 0bc1 01       		.byte	0x1
 7245 0bc2 0D       		.byte	0xd
 7246 0bc3 3D010000 		.4byte	0x13d
 7247 0bc7 05       		.uleb128 0x5
 7248 0bc8 03       		.byte	0x3
 7249 0bc9 00000000 		.4byte	midiMsg
 7250 0bcd 25       		.uleb128 0x25
 7251 0bce 5B0B0000 		.4byte	.LASF126
 7252 0bd2 01       		.byte	0x1
 7253 0bd3 0E       		.byte	0xe
 7254 0bd4 A2000000 		.4byte	0xa2
 7255 0bd8 05       		.uleb128 0x5
 7256 0bd9 03       		.byte	0x3
 7257 0bda 00000000 		.4byte	currentVBUS
 7258 0bde 25       		.uleb128 0x25
 7259 0bdf 520B0000 		.4byte	.LASF127
 7260 0be3 01       		.byte	0x1
 7261 0be4 0F       		.byte	0xf
 7262 0be5 A2000000 		.4byte	0xa2
 7263 0be9 05       		.uleb128 0x5
 7264 0bea 03       		.byte	0x3
 7265 0beb 00000000 		.4byte	prevVBUS
 7266 0bef 25       		.uleb128 0x25
 7267 0bf0 64090000 		.4byte	.LASF128
 7268 0bf4 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 164


 7269 0bf5 10       		.byte	0x10
 7270 0bf6 03020000 		.4byte	0x203
 7271 0bfa 05       		.uleb128 0x5
 7272 0bfb 03       		.byte	0x3
 7273 0bfc 00000000 		.4byte	USB_active
 7274 0c00 25       		.uleb128 0x25
 7275 0c01 7B060000 		.4byte	.LASF129
 7276 0c05 01       		.byte	0x1
 7277 0c06 11       		.byte	0x11
 7278 0c07 03020000 		.4byte	0x203
 7279 0c0b 05       		.uleb128 0x5
 7280 0c0c 03       		.byte	0x3
 7281 0c0d 00000000 		.4byte	USB_check_flag
 7282 0c11 07       		.uleb128 0x7
 7283 0c12 D9000000 		.4byte	0xd9
 7284 0c16 210C0000 		.4byte	0xc21
 7285 0c1a 08       		.uleb128 0x8
 7286 0c1b 36010000 		.4byte	0x136
 7287 0c1f 49       		.byte	0x49
 7288 0c20 00       		.byte	0
 7289 0c21 25       		.uleb128 0x25
 7290 0c22 F80B0000 		.4byte	.LASF130
 7291 0c26 01       		.byte	0x1
 7292 0c27 13       		.byte	0x13
 7293 0c28 110C0000 		.4byte	0xc11
 7294 0c2c 05       		.uleb128 0x5
 7295 0c2d 03       		.byte	0x3
 7296 0c2e 00000000 		.4byte	myArray
 7297 0c32 25       		.uleb128 0x25
 7298 0c33 A10B0000 		.4byte	.LASF131
 7299 0c37 01       		.byte	0x1
 7300 0c38 14       		.byte	0x14
 7301 0c39 190B0000 		.4byte	0xb19
 7302 0c3d 05       		.uleb128 0x5
 7303 0c3e 03       		.byte	0x3
 7304 0c3f 00000000 		.4byte	myInputArray
 7305 0c43 07       		.uleb128 0x7
 7306 0c44 C3000000 		.4byte	0xc3
 7307 0c48 530C0000 		.4byte	0xc53
 7308 0c4c 08       		.uleb128 0x8
 7309 0c4d 36010000 		.4byte	0x136
 7310 0c51 03       		.byte	0x3
 7311 0c52 00       		.byte	0
 7312 0c53 25       		.uleb128 0x25
 7313 0c54 30050000 		.4byte	.LASF132
 7314 0c58 01       		.byte	0x1
 7315 0c59 15       		.byte	0x15
 7316 0c5a 430C0000 		.4byte	0xc43
 7317 0c5e 05       		.uleb128 0x5
 7318 0c5f 03       		.byte	0x3
 7319 0c60 00000000 		.4byte	linearPotValue32Bit
 7320 0c64 26       		.uleb128 0x26
 7321 0c65 6900     		.ascii	"i\000"
 7322 0c67 01       		.byte	0x1
 7323 0c68 16       		.byte	0x16
 7324 0c69 A2000000 		.4byte	0xa2
 7325 0c6d 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 165


 7326 0c6e 03       		.byte	0x3
 7327 0c6f 00000000 		.4byte	i
 7328 0c73 25       		.uleb128 0x25
 7329 0c74 A3060000 		.4byte	.LASF133
 7330 0c78 01       		.byte	0x1
 7331 0c79 17       		.byte	0x17
 7332 0c7a A2000000 		.4byte	0xa2
 7333 0c7e 05       		.uleb128 0x5
 7334 0c7f 03       		.byte	0x3
 7335 0c80 00000000 		.4byte	counter
 7336 0c84 07       		.uleb128 0x7
 7337 0c85 A2000000 		.4byte	0xa2
 7338 0c89 940C0000 		.4byte	0xc94
 7339 0c8d 08       		.uleb128 0x8
 7340 0c8e 36010000 		.4byte	0x136
 7341 0c92 49       		.byte	0x49
 7342 0c93 00       		.byte	0
 7343 0c94 25       		.uleb128 0x25
 7344 0c95 19040000 		.4byte	.LASF134
 7345 0c99 01       		.byte	0x1
 7346 0c9a 18       		.byte	0x18
 7347 0c9b 840C0000 		.4byte	0xc84
 7348 0c9f 05       		.uleb128 0x5
 7349 0ca0 03       		.byte	0x3
 7350 0ca1 00000000 		.4byte	returnedData
 7351 0ca5 25       		.uleb128 0x25
 7352 0ca6 07010000 		.4byte	.LASF135
 7353 0caa 01       		.byte	0x1
 7354 0cab 19       		.byte	0x19
 7355 0cac C3000000 		.4byte	0xc3
 7356 0cb0 05       		.uleb128 0x5
 7357 0cb1 03       		.byte	0x3
 7358 0cb2 00000000 		.4byte	temper
 7359 0cb6 07       		.uleb128 0x7
 7360 0cb7 94000000 		.4byte	0x94
 7361 0cbb C60C0000 		.4byte	0xcc6
 7362 0cbf 08       		.uleb128 0x8
 7363 0cc0 36010000 		.4byte	0x136
 7364 0cc4 0A       		.byte	0xa
 7365 0cc5 00       		.byte	0
 7366 0cc6 25       		.uleb128 0x25
 7367 0cc7 DF0A0000 		.4byte	.LASF136
 7368 0ccb 01       		.byte	0x1
 7369 0ccc 1A       		.byte	0x1a
 7370 0ccd B60C0000 		.4byte	0xcb6
 7371 0cd1 05       		.uleb128 0x5
 7372 0cd2 03       		.byte	0x3
 7373 0cd3 00000000 		.4byte	previousButtons
 7374 0cd7 25       		.uleb128 0x25
 7375 0cd8 C2000000 		.4byte	.LASF137
 7376 0cdc 01       		.byte	0x1
 7377 0cdd 1B       		.byte	0x1b
 7378 0cde 94000000 		.4byte	0x94
 7379 0ce2 05       		.uleb128 0x5
 7380 0ce3 03       		.byte	0x3
 7381 0ce4 00000000 		.4byte	octave
 7382 0ce8 07       		.uleb128 0x7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 166


 7383 0ce9 B8000000 		.4byte	0xb8
 7384 0ced F80C0000 		.4byte	0xcf8
 7385 0cf1 08       		.uleb128 0x8
 7386 0cf2 36010000 		.4byte	0x136
 7387 0cf6 09       		.byte	0x9
 7388 0cf7 00       		.byte	0
 7389 0cf8 25       		.uleb128 0x25
 7390 0cf9 6B050000 		.4byte	.LASF138
 7391 0cfd 01       		.byte	0x1
 7392 0cfe 1C       		.byte	0x1c
 7393 0cff E80C0000 		.4byte	0xce8
 7394 0d03 05       		.uleb128 0x5
 7395 0d04 03       		.byte	0x3
 7396 0d05 00000000 		.4byte	angle
 7397 0d09 25       		.uleb128 0x25
 7398 0d0a 3A080000 		.4byte	.LASF139
 7399 0d0e 01       		.byte	0x1
 7400 0d0f 1D       		.byte	0x1d
 7401 0d10 E80C0000 		.4byte	0xce8
 7402 0d14 05       		.uleb128 0x5
 7403 0d15 03       		.byte	0x3
 7404 0d16 00000000 		.4byte	prevAngle
 7405 0d1a 07       		.uleb128 0x7
 7406 0d1b B8000000 		.4byte	0xb8
 7407 0d1f 2A0D0000 		.4byte	0xd2a
 7408 0d23 08       		.uleb128 0x8
 7409 0d24 36010000 		.4byte	0x136
 7410 0d28 03       		.byte	0x3
 7411 0d29 00       		.byte	0
 7412 0d2a 25       		.uleb128 0x25
 7413 0d2b 84080000 		.4byte	.LASF140
 7414 0d2f 01       		.byte	0x1
 7415 0d30 1F       		.byte	0x1f
 7416 0d31 1A0D0000 		.4byte	0xd1a
 7417 0d35 05       		.uleb128 0x5
 7418 0d36 03       		.byte	0x3
 7419 0d37 00000000 		.4byte	ADC_values
 7420 0d3b 25       		.uleb128 0x25
 7421 0d3c 3C030000 		.4byte	.LASF141
 7422 0d40 01       		.byte	0x1
 7423 0d41 20       		.byte	0x20
 7424 0d42 B8000000 		.4byte	0xb8
 7425 0d46 05       		.uleb128 0x5
 7426 0d47 03       		.byte	0x3
 7427 0d48 00000000 		.4byte	rawAngle
 7428 0d4c 25       		.uleb128 0x25
 7429 0d4d AB080000 		.4byte	.LASF142
 7430 0d51 01       		.byte	0x1
 7431 0d52 21       		.byte	0x21
 7432 0d53 B8000000 		.4byte	0xb8
 7433 0d57 05       		.uleb128 0x5
 7434 0d58 03       		.byte	0x3
 7435 0d59 00000000 		.4byte	midiSent
 7436 0d5d 25       		.uleb128 0x25
 7437 0d5e 9C030000 		.4byte	.LASF143
 7438 0d62 01       		.byte	0x1
 7439 0d63 22       		.byte	0x22
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 167


 7440 0d64 B8000000 		.4byte	0xb8
 7441 0d68 05       		.uleb128 0x5
 7442 0d69 03       		.byte	0x3
 7443 0d6a 00000000 		.4byte	midiOverflow
 7444 0d6e 25       		.uleb128 0x25
 7445 0d6f BF020000 		.4byte	.LASF144
 7446 0d73 01       		.byte	0x1
 7447 0d74 39       		.byte	0x39
 7448 0d75 D9000000 		.4byte	0xd9
 7449 0d79 05       		.uleb128 0x5
 7450 0d7a 03       		.byte	0x3
 7451 0d7b 00000000 		.4byte	rx1Channel
 7452 0d7f 25       		.uleb128 0x25
 7453 0d80 210B0000 		.4byte	.LASF145
 7454 0d84 01       		.byte	0x1
 7455 0d85 39       		.byte	0x39
 7456 0d86 D9000000 		.4byte	0xd9
 7457 0d8a 05       		.uleb128 0x5
 7458 0d8b 03       		.byte	0x3
 7459 0d8c 00000000 		.4byte	rx2Channel
 7460 0d90 25       		.uleb128 0x25
 7461 0d91 B7060000 		.4byte	.LASF146
 7462 0d95 01       		.byte	0x1
 7463 0d96 3A       		.byte	0x3a
 7464 0d97 190B0000 		.4byte	0xb19
 7465 0d9b 05       		.uleb128 0x5
 7466 0d9c 03       		.byte	0x3
 7467 0d9d 00000000 		.4byte	rx1TD
 7468 0da1 25       		.uleb128 0x25
 7469 0da2 F1080000 		.4byte	.LASF147
 7470 0da6 01       		.byte	0x1
 7471 0da7 3A       		.byte	0x3a
 7472 0da8 190B0000 		.4byte	0xb19
 7473 0dac 05       		.uleb128 0x5
 7474 0dad 03       		.byte	0x3
 7475 0dae 00000000 		.4byte	rx2TD
 7476 0db2 07       		.uleb128 0x7
 7477 0db3 2A010000 		.4byte	0x12a
 7478 0db7 C80D0000 		.4byte	0xdc8
 7479 0dbb 08       		.uleb128 0x8
 7480 0dbc 36010000 		.4byte	0x136
 7481 0dc0 01       		.byte	0x1
 7482 0dc1 08       		.uleb128 0x8
 7483 0dc2 36010000 		.4byte	0x136
 7484 0dc6 19       		.byte	0x19
 7485 0dc7 00       		.byte	0
 7486 0dc8 25       		.uleb128 0x25
 7487 0dc9 42040000 		.4byte	.LASF148
 7488 0dcd 01       		.byte	0x1
 7489 0dce 3C       		.byte	0x3c
 7490 0dcf D90D0000 		.4byte	0xdd9
 7491 0dd3 05       		.uleb128 0x5
 7492 0dd4 03       		.byte	0x3
 7493 0dd5 00000000 		.4byte	rxBufferPluck
 7494 0dd9 06       		.uleb128 0x6
 7495 0dda B20D0000 		.4byte	0xdb2
 7496 0dde 07       		.uleb128 0x7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 168


 7497 0ddf 2A010000 		.4byte	0x12a
 7498 0de3 F40D0000 		.4byte	0xdf4
 7499 0de7 08       		.uleb128 0x8
 7500 0de8 36010000 		.4byte	0x136
 7501 0dec 01       		.byte	0x1
 7502 0ded 08       		.uleb128 0x8
 7503 0dee 36010000 		.4byte	0x136
 7504 0df2 07       		.byte	0x7
 7505 0df3 00       		.byte	0
 7506 0df4 25       		.uleb128 0x25
 7507 0df5 07080000 		.4byte	.LASF149
 7508 0df9 01       		.byte	0x1
 7509 0dfa 3D       		.byte	0x3d
 7510 0dfb 050E0000 		.4byte	0xe05
 7511 0dff 05       		.uleb128 0x5
 7512 0e00 03       		.byte	0x3
 7513 0e01 00000000 		.4byte	rxBufferBar
 7514 0e05 06       		.uleb128 0x6
 7515 0e06 DE0D0000 		.4byte	0xdde
 7516 0e0a 07       		.uleb128 0x7
 7517 0e0b 08020000 		.4byte	0x208
 7518 0e0f 1A0E0000 		.4byte	0xe1a
 7519 0e13 08       		.uleb128 0x8
 7520 0e14 36010000 		.4byte	0x136
 7521 0e18 0B       		.byte	0xb
 7522 0e19 00       		.byte	0
 7523 0e1a 25       		.uleb128 0x25
 7524 0e1b 93010000 		.4byte	.LASF150
 7525 0e1f 01       		.byte	0x1
 7526 0e20 3F       		.byte	0x3f
 7527 0e21 2B0E0000 		.4byte	0xe2b
 7528 0e25 05       		.uleb128 0x5
 7529 0e26 03       		.byte	0x3
 7530 0e27 00000000 		.4byte	strings
 7531 0e2b 06       		.uleb128 0x6
 7532 0e2c 0A0E0000 		.4byte	0xe0a
 7533 0e30 25       		.uleb128 0x25
 7534 0e31 1F030000 		.4byte	.LASF151
 7535 0e35 01       		.byte	0x1
 7536 0e36 40       		.byte	0x40
 7537 0e37 410E0000 		.4byte	0xe41
 7538 0e3b 05       		.uleb128 0x5
 7539 0e3c 03       		.byte	0x3
 7540 0e3d 00000000 		.4byte	prevStrings
 7541 0e41 06       		.uleb128 0x6
 7542 0e42 0A0E0000 		.4byte	0xe0a
 7543 0e46 07       		.uleb128 0x7
 7544 0e47 08020000 		.4byte	0x208
 7545 0e4b 560E0000 		.4byte	0xe56
 7546 0e4f 08       		.uleb128 0x8
 7547 0e50 36010000 		.4byte	0x136
 7548 0e54 01       		.byte	0x1
 7549 0e55 00       		.byte	0
 7550 0e56 26       		.uleb128 0x26
 7551 0e57 62617200 		.ascii	"bar\000"
 7552 0e5b 01       		.byte	0x1
 7553 0e5c 41       		.byte	0x41
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 169


 7554 0e5d 670E0000 		.4byte	0xe67
 7555 0e61 05       		.uleb128 0x5
 7556 0e62 03       		.byte	0x3
 7557 0e63 00000000 		.4byte	bar
 7558 0e67 06       		.uleb128 0x6
 7559 0e68 460E0000 		.4byte	0xe46
 7560 0e6c 25       		.uleb128 0x25
 7561 0e6d 990B0000 		.4byte	.LASF152
 7562 0e71 01       		.byte	0x1
 7563 0e72 42       		.byte	0x42
 7564 0e73 7D0E0000 		.4byte	0xe7d
 7565 0e77 05       		.uleb128 0x5
 7566 0e78 03       		.byte	0x3
 7567 0e79 00000000 		.4byte	prevBar
 7568 0e7d 06       		.uleb128 0x6
 7569 0e7e 460E0000 		.4byte	0xe46
 7570 0e82 25       		.uleb128 0x25
 7571 0e83 0A0B0000 		.4byte	.LASF153
 7572 0e87 01       		.byte	0x1
 7573 0e88 43       		.byte	0x43
 7574 0e89 930E0000 		.4byte	0xe93
 7575 0e8d 05       		.uleb128 0x5
 7576 0e8e 03       		.byte	0x3
 7577 0e8f 00000000 		.4byte	maxStrings
 7578 0e93 06       		.uleb128 0x6
 7579 0e94 0A0E0000 		.4byte	0xe0a
 7580 0e98 25       		.uleb128 0x25
 7581 0e99 20090000 		.4byte	.LASF154
 7582 0e9d 01       		.byte	0x1
 7583 0e9e 44       		.byte	0x44
 7584 0e9f 03020000 		.4byte	0x203
 7585 0ea3 05       		.uleb128 0x5
 7586 0ea4 03       		.byte	0x3
 7587 0ea5 00000000 		.4byte	amHere
 7588 0ea9 25       		.uleb128 0x25
 7589 0eaa EA030000 		.4byte	.LASF155
 7590 0eae 01       		.byte	0x1
 7591 0eaf 45       		.byte	0x45
 7592 0eb0 03020000 		.4byte	0x203
 7593 0eb4 05       		.uleb128 0x5
 7594 0eb5 03       		.byte	0x3
 7595 0eb6 00000000 		.4byte	spiCounter
 7596 0eba 25       		.uleb128 0x25
 7597 0ebb D8020000 		.4byte	.LASF156
 7598 0ebf 01       		.byte	0x1
 7599 0ec0 46       		.byte	0x46
 7600 0ec1 03020000 		.4byte	0x203
 7601 0ec5 05       		.uleb128 0x5
 7602 0ec6 03       		.byte	0x3
 7603 0ec7 00000000 		.4byte	newDataFlag
 7604 0ecb 25       		.uleb128 0x25
 7605 0ecc 5C0A0000 		.4byte	.LASF157
 7606 0ed0 01       		.byte	0x1
 7607 0ed1 47       		.byte	0x47
 7608 0ed2 94000000 		.4byte	0x94
 7609 0ed6 05       		.uleb128 0x5
 7610 0ed7 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 170


 7611 0ed8 00000000 		.4byte	prevOctave
 7612 0edc 25       		.uleb128 0x25
 7613 0edd 44080000 		.4byte	.LASF158
 7614 0ee1 01       		.byte	0x1
 7615 0ee2 48       		.byte	0x48
 7616 0ee3 A2000000 		.4byte	0xa2
 7617 0ee7 05       		.uleb128 0x5
 7618 0ee8 03       		.byte	0x3
 7619 0ee9 00000000 		.4byte	pluck_index
 7620 0eed 25       		.uleb128 0x25
 7621 0eee C10A0000 		.4byte	.LASF159
 7622 0ef2 01       		.byte	0x1
 7623 0ef3 49       		.byte	0x49
 7624 0ef4 03020000 		.4byte	0x203
 7625 0ef8 05       		.uleb128 0x5
 7626 0ef9 03       		.byte	0x3
 7627 0efa 00000000 		.4byte	amHere2
 7628 0efe 25       		.uleb128 0x25
 7629 0eff 32090000 		.4byte	.LASF160
 7630 0f03 01       		.byte	0x1
 7631 0f04 4A       		.byte	0x4a
 7632 0f05 03020000 		.4byte	0x203
 7633 0f09 05       		.uleb128 0x5
 7634 0f0a 03       		.byte	0x3
 7635 0f0b 00000000 		.4byte	spiCounter2
 7636 0f0f 25       		.uleb128 0x25
 7637 0f10 3A000000 		.4byte	.LASF161
 7638 0f14 01       		.byte	0x1
 7639 0f15 4B       		.byte	0x4b
 7640 0f16 03020000 		.4byte	0x203
 7641 0f1a 05       		.uleb128 0x5
 7642 0f1b 03       		.byte	0x3
 7643 0f1c 00000000 		.4byte	newDataFlag2
 7644 0f20 25       		.uleb128 0x25
 7645 0f21 3B070000 		.4byte	.LASF162
 7646 0f25 01       		.byte	0x1
 7647 0f26 4C       		.byte	0x4c
 7648 0f27 03020000 		.4byte	0x203
 7649 0f2b 05       		.uleb128 0x5
 7650 0f2c 03       		.byte	0x3
 7651 0f2d 00000000 		.4byte	currentPluckBuffer
 7652 0f31 25       		.uleb128 0x25
 7653 0f32 73080000 		.4byte	.LASF163
 7654 0f36 01       		.byte	0x1
 7655 0f37 4D       		.byte	0x4d
 7656 0f38 03020000 		.4byte	0x203
 7657 0f3c 05       		.uleb128 0x5
 7658 0f3d 03       		.byte	0x3
 7659 0f3e 00000000 		.4byte	currentBarBuffer
 7660 0f42 25       		.uleb128 0x25
 7661 0f43 7B090000 		.4byte	.LASF164
 7662 0f47 01       		.byte	0x1
 7663 0f48 4E       		.byte	0x4e
 7664 0f49 03020000 		.4byte	0x203
 7665 0f4d 05       		.uleb128 0x5
 7666 0f4e 03       		.byte	0x3
 7667 0f4f 00000000 		.4byte	pluckErrorCount
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 171


 7668 0f53 25       		.uleb128 0x25
 7669 0f54 9C080000 		.4byte	.LASF165
 7670 0f58 01       		.byte	0x1
 7671 0f59 4F       		.byte	0x4f
 7672 0f5a 08020000 		.4byte	0x208
 7673 0f5e 05       		.uleb128 0x5
 7674 0f5f 03       		.byte	0x3
 7675 0f60 00000000 		.4byte	SPI1ErrorCount
 7676 0f64 25       		.uleb128 0x25
 7677 0f65 9C040000 		.4byte	.LASF166
 7678 0f69 01       		.byte	0x1
 7679 0f6a 53       		.byte	0x53
 7680 0f6b 03020000 		.4byte	0x203
 7681 0f6f 05       		.uleb128 0x5
 7682 0f70 03       		.byte	0x3
 7683 0f71 00000000 		.4byte	inputData
 7684 0f75 25       		.uleb128 0x25
 7685 0f76 150B0000 		.4byte	.LASF167
 7686 0f7a 01       		.byte	0x1
 7687 0f7b B1       		.byte	0xb1
 7688 0f7c A2000000 		.4byte	0xa2
 7689 0f80 05       		.uleb128 0x5
 7690 0f81 03       		.byte	0x3
 7691 0f82 00000000 		.4byte	spiAdjusted
 7692 0f86 25       		.uleb128 0x25
 7693 0f87 63040000 		.4byte	.LASF168
 7694 0f8b 01       		.byte	0x1
 7695 0f8c B2       		.byte	0xb2
 7696 0f8d A2000000 		.4byte	0xa2
 7697 0f91 05       		.uleb128 0x5
 7698 0f92 03       		.byte	0x3
 7699 0f93 00000000 		.4byte	mySpiCounter
 7700 0f97 25       		.uleb128 0x25
 7701 0f98 C7070000 		.4byte	.LASF169
 7702 0f9c 01       		.byte	0x1
 7703 0f9d B3       		.byte	0xb3
 7704 0f9e 08020000 		.4byte	0x208
 7705 0fa2 05       		.uleb128 0x5
 7706 0fa3 03       		.byte	0x3
 7707 0fa4 00000000 		.4byte	offsetErrorCount
 7708 0fa8 25       		.uleb128 0x25
 7709 0fa9 8A000000 		.4byte	.LASF170
 7710 0fad 01       		.byte	0x1
 7711 0fae B4       		.byte	0xb4
 7712 0faf 03020000 		.4byte	0x203
 7713 0fb3 05       		.uleb128 0x5
 7714 0fb4 03       		.byte	0x3
 7715 0fb5 00000000 		.4byte	SPI2errorflag
 7716 0fb9 25       		.uleb128 0x25
 7717 0fba B6070000 		.4byte	.LASF171
 7718 0fbe 01       		.byte	0x1
 7719 0fbf B5       		.byte	0xb5
 7720 0fc0 CA0F0000 		.4byte	0xfca
 7721 0fc4 05       		.uleb128 0x5
 7722 0fc5 03       		.byte	0x3
 7723 0fc6 00000000 		.4byte	bar_index
 7724 0fca 06       		.uleb128 0x6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 172


 7725 0fcb 94000000 		.4byte	0x94
 7726 0fcf 25       		.uleb128 0x25
 7727 0fd0 18020000 		.4byte	.LASF172
 7728 0fd4 01       		.byte	0x1
 7729 0fd5 B6       		.byte	0xb6
 7730 0fd6 71020000 		.4byte	0x271
 7731 0fda 05       		.uleb128 0x5
 7732 0fdb 03       		.byte	0x3
 7733 0fdc 00000000 		.4byte	knobs
 7734 0fe0 25       		.uleb128 0x25
 7735 0fe1 59040000 		.4byte	.LASF173
 7736 0fe5 01       		.byte	0x1
 7737 0fe6 B7       		.byte	0xb7
 7738 0fe7 71020000 		.4byte	0x271
 7739 0feb 05       		.uleb128 0x5
 7740 0fec 03       		.byte	0x3
 7741 0fed 00000000 		.4byte	prevKnobs
 7742 0ff1 25       		.uleb128 0x25
 7743 0ff2 2F070000 		.4byte	.LASF174
 7744 0ff6 01       		.byte	0x1
 7745 0ff7 B9       		.byte	0xb9
 7746 0ff8 03020000 		.4byte	0x203
 7747 0ffc 05       		.uleb128 0x5
 7748 0ffd 03       		.byte	0x3
 7749 0ffe 00000000 		.4byte	SPI2started
 7750 1002 23       		.uleb128 0x23
 7751 1003 27090000 		.4byte	.LASF175
 7752 1007 01       		.byte	0x1
 7753 1008 3901     		.2byte	0x139
 7754 100a 190B0000 		.4byte	0xb19
 7755 100e 05       		.uleb128 0x5
 7756 100f 03       		.byte	0x3
 7757 1010 00000000 		.4byte	array
 7758 1014 23       		.uleb128 0x23
 7759 1015 0F050000 		.4byte	.LASF176
 7760 1019 01       		.byte	0x1
 7761 101a 3C01     		.2byte	0x13c
 7762 101c F7010000 		.4byte	0x1f7
 7763 1020 05       		.uleb128 0x5
 7764 1021 03       		.byte	0x3
 7765 1022 00000000 		.4byte	eepromReturnValue
 7766 1026 23       		.uleb128 0x23
 7767 1027 6D030000 		.4byte	.LASF177
 7768 102b 01       		.byte	0x1
 7769 102c 4801     		.2byte	0x148
 7770 102e D9000000 		.4byte	0xd9
 7771 1032 05       		.uleb128 0x5
 7772 1033 03       		.byte	0x3
 7773 1034 00000000 		.4byte	eeprom_cnt
 7774 1038 23       		.uleb128 0x23
 7775 1039 21050000 		.4byte	.LASF75
 7776 103d 01       		.byte	0x1
 7777 103e 4901     		.2byte	0x149
 7778 1040 12010000 		.4byte	0x112
 7779 1044 05       		.uleb128 0x5
 7780 1045 03       		.byte	0x3
 7781 1046 00000000 		.4byte	status
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 173


 7782 104a 27       		.uleb128 0x27
 7783 104b 70747200 		.ascii	"ptr\000"
 7784 104f 01       		.byte	0x1
 7785 1050 4A01     		.2byte	0x14a
 7786 1052 5C100000 		.4byte	0x105c
 7787 1056 05       		.uleb128 0x5
 7788 1057 03       		.byte	0x3
 7789 1058 00000000 		.4byte	ptr
 7790 105c 1F       		.uleb128 0x1f
 7791 105d 04       		.byte	0x4
 7792 105e 67100000 		.4byte	0x1067
 7793 1062 22       		.uleb128 0x22
 7794 1063 D9000000 		.4byte	0xd9
 7795 1067 06       		.uleb128 0x6
 7796 1068 62100000 		.4byte	0x1062
 7797 106c 23       		.uleb128 0x23
 7798 106d 84010000 		.4byte	.LASF178
 7799 1071 01       		.byte	0x1
 7800 1072 4B01     		.2byte	0x14b
 7801 1074 CA0F0000 		.4byte	0xfca
 7802 1078 05       		.uleb128 0x5
 7803 1079 03       		.byte	0x3
 7804 107a 00000000 		.4byte	barCount
 7805 107e 07       		.uleb128 0x7
 7806 107f 03020000 		.4byte	0x203
 7807 1083 8E100000 		.4byte	0x108e
 7808 1087 08       		.uleb128 0x8
 7809 1088 36010000 		.4byte	0x136
 7810 108c 0F       		.byte	0xf
 7811 108d 00       		.byte	0
 7812 108e 23       		.uleb128 0x23
 7813 108f AE000000 		.4byte	.LASF179
 7814 1093 01       		.byte	0x1
 7815 1094 A901     		.2byte	0x1a9
 7816 1096 A0100000 		.4byte	0x10a0
 7817 109a 05       		.uleb128 0x5
 7818 109b 03       		.byte	0x3
 7819 109c 00000000 		.4byte	I2Cbuff2
 7820 10a0 06       		.uleb128 0x6
 7821 10a1 7E100000 		.4byte	0x107e
 7822 10a5 23       		.uleb128 0x23
 7823 10a6 28050000 		.4byte	.LASF180
 7824 10aa 01       		.byte	0x1
 7825 10ab AA01     		.2byte	0x1aa
 7826 10ad 03020000 		.4byte	0x203
 7827 10b1 05       		.uleb128 0x5
 7828 10b2 03       		.byte	0x3
 7829 10b3 00000000 		.4byte	send_it
 7830 10b7 07       		.uleb128 0x7
 7831 10b8 A2000000 		.4byte	0xa2
 7832 10bc CD100000 		.4byte	0x10cd
 7833 10c0 08       		.uleb128 0x8
 7834 10c1 36010000 		.4byte	0x136
 7835 10c5 0B       		.byte	0xb
 7836 10c6 08       		.uleb128 0x8
 7837 10c7 36010000 		.4byte	0x136
 7838 10cb 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 174


 7839 10cc 00       		.byte	0
 7840 10cd 23       		.uleb128 0x23
 7841 10ce B7000000 		.4byte	.LASF181
 7842 10d2 01       		.byte	0x1
 7843 10d3 AC01     		.2byte	0x1ac
 7844 10d5 B7100000 		.4byte	0x10b7
 7845 10d9 05       		.uleb128 0x5
 7846 10da 03       		.byte	0x3
 7847 10db 00000000 		.4byte	mux_states
 7848 10df 23       		.uleb128 0x23
 7849 10e0 410A0000 		.4byte	.LASF182
 7850 10e4 01       		.byte	0x1
 7851 10e5 AD01     		.2byte	0x1ad
 7852 10e7 E80C0000 		.4byte	0xce8
 7853 10eb 05       		.uleb128 0x5
 7854 10ec 03       		.byte	0x3
 7855 10ed 00000000 		.4byte	pedals_low
 7856 10f1 23       		.uleb128 0x23
 7857 10f2 EA000000 		.4byte	.LASF183
 7858 10f6 01       		.byte	0x1
 7859 10f7 AE01     		.2byte	0x1ae
 7860 10f9 E80C0000 		.4byte	0xce8
 7861 10fd 05       		.uleb128 0x5
 7862 10fe 03       		.byte	0x3
 7863 10ff 00000000 		.4byte	pedals_high
 7864 1103 23       		.uleb128 0x23
 7865 1104 51090000 		.4byte	.LASF184
 7866 1108 01       		.byte	0x1
 7867 1109 AF01     		.2byte	0x1af
 7868 110b B8000000 		.4byte	0xb8
 7869 110f 05       		.uleb128 0x5
 7870 1110 03       		.byte	0x3
 7871 1111 00000000 		.4byte	deadzone
 7872 1115 23       		.uleb128 0x23
 7873 1116 36040000 		.4byte	.LASF185
 7874 111a 01       		.byte	0x1
 7875 111b B001     		.2byte	0x1b0
 7876 111d B8000000 		.4byte	0xb8
 7877 1121 05       		.uleb128 0x5
 7878 1122 03       		.byte	0x3
 7879 1123 00000000 		.4byte	volumePedal
 7880 1127 23       		.uleb128 0x23
 7881 1128 13080000 		.4byte	.LASF186
 7882 112c 01       		.byte	0x1
 7883 112d B101     		.2byte	0x1b1
 7884 112f E80C0000 		.4byte	0xce8
 7885 1133 05       		.uleb128 0x5
 7886 1134 03       		.byte	0x3
 7887 1135 00000000 		.4byte	processed_pedals
 7888 1139 23       		.uleb128 0x23
 7889 113a 19070000 		.4byte	.LASF187
 7890 113e 01       		.byte	0x1
 7891 113f B201     		.2byte	0x1b2
 7892 1141 E80C0000 		.4byte	0xce8
 7893 1145 05       		.uleb128 0x5
 7894 1146 03       		.byte	0x3
 7895 1147 00000000 		.4byte	prev_processed_pedals
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 175


 7896 114b 23       		.uleb128 0x23
 7897 114c 15000000 		.4byte	.LASF188
 7898 1150 01       		.byte	0x1
 7899 1151 B301     		.2byte	0x1b3
 7900 1153 AD000000 		.4byte	0xad
 7901 1157 05       		.uleb128 0x5
 7902 1158 03       		.byte	0x3
 7903 1159 00000000 		.4byte	prev_processed_volumePedal
 7904 115d 23       		.uleb128 0x23
 7905 115e D8070000 		.4byte	.LASF189
 7906 1162 01       		.byte	0x1
 7907 1163 B401     		.2byte	0x1b4
 7908 1165 AD000000 		.4byte	0xad
 7909 1169 05       		.uleb128 0x5
 7910 116a 03       		.byte	0x3
 7911 116b 00000000 		.4byte	processed_volumePedal
 7912 116f 07       		.uleb128 0x7
 7913 1170 FD000000 		.4byte	0xfd
 7914 1174 85110000 		.4byte	0x1185
 7915 1178 08       		.uleb128 0x8
 7916 1179 36010000 		.4byte	0x136
 7917 117d 03       		.byte	0x3
 7918 117e 08       		.uleb128 0x8
 7919 117f 36010000 		.4byte	0x136
 7920 1183 01       		.byte	0x1
 7921 1184 00       		.byte	0
 7922 1185 23       		.uleb128 0x23
 7923 1186 710A0000 		.4byte	.LASF190
 7924 118a 01       		.byte	0x1
 7925 118b B701     		.2byte	0x1b7
 7926 118d 6F110000 		.4byte	0x116f
 7927 1191 05       		.uleb128 0x5
 7928 1192 03       		.byte	0x3
 7929 1193 00000000 		.4byte	fretMeasurements
 7930 1197 07       		.uleb128 0x7
 7931 1198 FD000000 		.4byte	0xfd
 7932 119c A7110000 		.4byte	0x11a7
 7933 11a0 08       		.uleb128 0x8
 7934 11a1 36010000 		.4byte	0x136
 7935 11a5 03       		.byte	0x3
 7936 11a6 00       		.byte	0
 7937 11a7 23       		.uleb128 0x23
 7938 11a8 07020000 		.4byte	.LASF191
 7939 11ac 01       		.byte	0x1
 7940 11ad C501     		.2byte	0x1c5
 7941 11af 97110000 		.4byte	0x1197
 7942 11b3 05       		.uleb128 0x5
 7943 11b4 03       		.byte	0x3
 7944 11b5 00000000 		.4byte	fretScaling
 7945 11b9 07       		.uleb128 0x7
 7946 11ba FD000000 		.4byte	0xfd
 7947 11be C9110000 		.4byte	0x11c9
 7948 11c2 08       		.uleb128 0x8
 7949 11c3 36010000 		.4byte	0x136
 7950 11c7 09       		.byte	0x9
 7951 11c8 00       		.byte	0
 7952 11c9 23       		.uleb128 0x23
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 176


 7953 11ca A5020000 		.4byte	.LASF192
 7954 11ce 01       		.byte	0x1
 7955 11cf CA01     		.2byte	0x1ca
 7956 11d1 B9110000 		.4byte	0x11b9
 7957 11d5 05       		.uleb128 0x5
 7958 11d6 03       		.byte	0x3
 7959 11d7 00000000 		.4byte	pedalRatios
 7960 11db 23       		.uleb128 0x23
 7961 11dc E8080000 		.4byte	.LASF193
 7962 11e0 01       		.byte	0x1
 7963 11e1 CB01     		.2byte	0x1cb
 7964 11e3 A2000000 		.4byte	0xa2
 7965 11e7 05       		.uleb128 0x5
 7966 11e8 03       		.byte	0x3
 7967 11e9 00000000 		.4byte	last_mux
 7968 11ed 23       		.uleb128 0x23
 7969 11ee 46060000 		.4byte	.LASF194
 7970 11f2 01       		.byte	0x1
 7971 11f3 CC01     		.2byte	0x1cc
 7972 11f5 03020000 		.4byte	0x203
 7973 11f9 05       		.uleb128 0x5
 7974 11fa 03       		.byte	0x3
 7975 11fb 00000000 		.4byte	main_counter
 7976 11ff 23       		.uleb128 0x23
 7977 1200 4F030000 		.4byte	.LASF195
 7978 1204 01       		.byte	0x1
 7979 1205 CD01     		.2byte	0x1cd
 7980 1207 A2000000 		.4byte	0xa2
 7981 120b 05       		.uleb128 0x5
 7982 120c 03       		.byte	0x3
 7983 120d 00000000 		.4byte	neck
 7984 1211 23       		.uleb128 0x23
 7985 1212 5D060000 		.4byte	.LASF196
 7986 1216 01       		.byte	0x1
 7987 1217 CE01     		.2byte	0x1ce
 7988 1219 A2000000 		.4byte	0xa2
 7989 121d 05       		.uleb128 0x5
 7990 121e 03       		.byte	0x3
 7991 121f 00000000 		.4byte	dualSlider
 7992 1223 23       		.uleb128 0x23
 7993 1224 94080000 		.4byte	.LASF197
 7994 1228 01       		.byte	0x1
 7995 1229 CF01     		.2byte	0x1cf
 7996 122b A2000000 		.4byte	0xa2
 7997 122f 05       		.uleb128 0x5
 7998 1230 03       		.byte	0x3
 7999 1231 00000000 		.4byte	enterUp
 8000 1235 23       		.uleb128 0x23
 8001 1236 8D010000 		.4byte	.LASF198
 8002 123a 01       		.byte	0x1
 8003 123b D001     		.2byte	0x1d0
 8004 123d A2000000 		.4byte	0xa2
 8005 1241 05       		.uleb128 0x5
 8006 1242 03       		.byte	0x3
 8007 1243 00000000 		.4byte	voice
 8008 1247 23       		.uleb128 0x23
 8009 1248 B50B0000 		.4byte	.LASF199
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 177


 8010 124c 01       		.byte	0x1
 8011 124d D101     		.2byte	0x1d1
 8012 124f A2000000 		.4byte	0xa2
 8013 1253 05       		.uleb128 0x5
 8014 1254 03       		.byte	0x3
 8015 1255 00000000 		.4byte	editUp
 8016 1259 23       		.uleb128 0x23
 8017 125a 0B030000 		.4byte	.LASF200
 8018 125e 01       		.byte	0x1
 8019 125f D201     		.2byte	0x1d2
 8020 1261 6B120000 		.4byte	0x126b
 8021 1265 05       		.uleb128 0x5
 8022 1266 03       		.byte	0x3
 8023 1267 00000000 		.4byte	encoderVal
 8024 126b 06       		.uleb128 0x6
 8025 126c 7E100000 		.4byte	0x107e
 8026 1270 23       		.uleb128 0x23
 8027 1271 8C030000 		.4byte	.LASF201
 8028 1275 01       		.byte	0x1
 8029 1276 D301     		.2byte	0x1d3
 8030 1278 94000000 		.4byte	0x94
 8031 127c 05       		.uleb128 0x5
 8032 127d 03       		.byte	0x3
 8033 127e 00000000 		.4byte	encoderNum
 8034 1282 23       		.uleb128 0x23
 8035 1283 E1060000 		.4byte	.LASF202
 8036 1287 01       		.byte	0x1
 8037 1288 D401     		.2byte	0x1d4
 8038 128a A2000000 		.4byte	0xa2
 8039 128e 05       		.uleb128 0x5
 8040 128f 03       		.byte	0x3
 8041 1290 00000000 		.4byte	button1Up
 8042 1294 23       		.uleb128 0x23
 8043 1295 16090000 		.4byte	.LASF203
 8044 1299 01       		.byte	0x1
 8045 129a D501     		.2byte	0x1d5
 8046 129c A2000000 		.4byte	0xa2
 8047 12a0 05       		.uleb128 0x5
 8048 12a1 03       		.byte	0x3
 8049 12a2 00000000 		.4byte	button2Up
 8050 12a6 23       		.uleb128 0x23
 8051 12a7 670B0000 		.4byte	.LASF204
 8052 12ab 01       		.byte	0x1
 8053 12ac D601     		.2byte	0x1d6
 8054 12ae A2000000 		.4byte	0xa2
 8055 12b2 05       		.uleb128 0x5
 8056 12b3 03       		.byte	0x3
 8057 12b4 00000000 		.4byte	button3Up
 8058 12b8 23       		.uleb128 0x23
 8059 12b9 480B0000 		.4byte	.LASF205
 8060 12bd 01       		.byte	0x1
 8061 12be D701     		.2byte	0x1d7
 8062 12c0 A2000000 		.4byte	0xa2
 8063 12c4 05       		.uleb128 0x5
 8064 12c5 03       		.byte	0x3
 8065 12c6 00000000 		.4byte	button4Up
 8066 12ca 23       		.uleb128 0x23
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 178


 8067 12cb 150A0000 		.4byte	.LASF206
 8068 12cf 01       		.byte	0x1
 8069 12d0 D801     		.2byte	0x1d8
 8070 12d2 A2000000 		.4byte	0xa2
 8071 12d6 05       		.uleb128 0x5
 8072 12d7 03       		.byte	0x3
 8073 12d8 00000000 		.4byte	patchNum
 8074 12dc 07       		.uleb128 0x7
 8075 12dd FD000000 		.4byte	0xfd
 8076 12e1 F8120000 		.4byte	0x12f8
 8077 12e5 08       		.uleb128 0x8
 8078 12e6 36010000 		.4byte	0x136
 8079 12ea 1F       		.byte	0x1f
 8080 12eb 08       		.uleb128 0x8
 8081 12ec 36010000 		.4byte	0x136
 8082 12f0 0A       		.byte	0xa
 8083 12f1 08       		.uleb128 0x8
 8084 12f2 36010000 		.4byte	0x136
 8085 12f6 0B       		.byte	0xb
 8086 12f7 00       		.byte	0
 8087 12f8 23       		.uleb128 0x23
 8088 12f9 50040000 		.4byte	.LASF207
 8089 12fd 01       		.byte	0x1
 8090 12fe EC01     		.2byte	0x1ec
 8091 1300 DC120000 		.4byte	0x12dc
 8092 1304 05       		.uleb128 0x5
 8093 1305 03       		.byte	0x3
 8094 1306 00000000 		.4byte	copedent
 8095 130a 07       		.uleb128 0x7
 8096 130b FD000000 		.4byte	0xfd
 8097 130f 1A130000 		.4byte	0x131a
 8098 1313 08       		.uleb128 0x8
 8099 1314 36010000 		.4byte	0x136
 8100 1318 0B       		.byte	0xb
 8101 1319 00       		.byte	0
 8102 131a 23       		.uleb128 0x23
 8103 131b B6010000 		.4byte	.LASF208
 8104 131f 01       		.byte	0x1
 8105 1320 EE01     		.2byte	0x1ee
 8106 1322 0A130000 		.4byte	0x130a
 8107 1326 05       		.uleb128 0x5
 8108 1327 03       		.byte	0x3
 8109 1328 00000000 		.4byte	prevStringPitchBend
 8110 132c 07       		.uleb128 0x7
 8111 132d FD000000 		.4byte	0xfd
 8112 1331 42130000 		.4byte	0x1342
 8113 1335 08       		.uleb128 0x8
 8114 1336 36010000 		.4byte	0x136
 8115 133a 09       		.byte	0x9
 8116 133b 08       		.uleb128 0x8
 8117 133c 36010000 		.4byte	0x136
 8118 1340 0B       		.byte	0xb
 8119 1341 00       		.byte	0
 8120 1342 23       		.uleb128 0x23
 8121 1343 AE0B0000 		.4byte	.LASF209
 8122 1347 01       		.byte	0x1
 8123 1348 0602     		.2byte	0x206
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 179


 8124 134a 2C130000 		.4byte	0x132c
 8125 134e 05       		.uleb128 0x5
 8126 134f 03       		.byte	0x3
 8127 1350 00000000 		.4byte	pedals
 8128 1354 23       		.uleb128 0x23
 8129 1355 24080000 		.4byte	.LASF210
 8130 1359 01       		.byte	0x1
 8131 135a 0902     		.2byte	0x209
 8132 135c 0A130000 		.4byte	0x130a
 8133 1360 05       		.uleb128 0x5
 8134 1361 03       		.byte	0x3
 8135 1362 00000000 		.4byte	openStringFrequencies
 8136 1366 23       		.uleb128 0x23
 8137 1367 C90A0000 		.4byte	.LASF211
 8138 136b 01       		.byte	0x1
 8139 136c 0A02     		.2byte	0x20a
 8140 136e 0A130000 		.4byte	0x130a
 8141 1372 05       		.uleb128 0x5
 8142 1373 03       		.byte	0x3
 8143 1374 00000000 		.4byte	stringMappedPositions
 8144 1378 23       		.uleb128 0x23
 8145 1379 83040000 		.4byte	.LASF212
 8146 137d 01       		.byte	0x1
 8147 137e 0B02     		.2byte	0x20b
 8148 1380 0A130000 		.4byte	0x130a
 8149 1384 05       		.uleb128 0x5
 8150 1385 03       		.byte	0x3
 8151 1386 00000000 		.4byte	invStringMappedPositions
 8152 138a 23       		.uleb128 0x23
 8153 138b DF0B0000 		.4byte	.LASF213
 8154 138f 01       		.byte	0x1
 8155 1390 0C02     		.2byte	0x20c
 8156 1392 0A130000 		.4byte	0x130a
 8157 1396 05       		.uleb128 0x5
 8158 1397 03       		.byte	0x3
 8159 1398 00000000 		.4byte	stringFrequencies
 8160 139c 23       		.uleb128 0x23
 8161 139d E4020000 		.4byte	.LASF214
 8162 13a1 01       		.byte	0x1
 8163 13a2 0D02     		.2byte	0x20d
 8164 13a4 0A130000 		.4byte	0x130a
 8165 13a8 05       		.uleb128 0x5
 8166 13a9 03       		.byte	0x3
 8167 13aa 00000000 		.4byte	stringOctave
 8168 13ae 23       		.uleb128 0x23
 8169 13af AB060000 		.4byte	.LASF215
 8170 13b3 01       		.byte	0x1
 8171 13b4 0E02     		.2byte	0x20e
 8172 13b6 0A130000 		.4byte	0x130a
 8173 13ba 05       		.uleb128 0x5
 8174 13bb 03       		.byte	0x3
 8175 13bc 00000000 		.4byte	stringPitch
 8176 13c0 23       		.uleb128 0x23
 8177 13c1 870A0000 		.4byte	.LASF216
 8178 13c5 01       		.byte	0x1
 8179 13c6 0F02     		.2byte	0x20f
 8180 13c8 0A130000 		.4byte	0x130a
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 180


 8181 13cc 05       		.uleb128 0x5
 8182 13cd 03       		.byte	0x3
 8183 13ce 00000000 		.4byte	stringMIDI
 8184 13d2 07       		.uleb128 0x7
 8185 13d3 94000000 		.4byte	0x94
 8186 13d7 E2130000 		.4byte	0x13e2
 8187 13db 08       		.uleb128 0x8
 8188 13dc 36010000 		.4byte	0x136
 8189 13e0 0B       		.byte	0xb
 8190 13e1 00       		.byte	0
 8191 13e2 23       		.uleb128 0x23
 8192 13e3 90050000 		.4byte	.LASF217
 8193 13e7 01       		.byte	0x1
 8194 13e8 1002     		.2byte	0x210
 8195 13ea D2130000 		.4byte	0x13d2
 8196 13ee 05       		.uleb128 0x5
 8197 13ef 03       		.byte	0x3
 8198 13f0 00000000 		.4byte	openStringMIDI_Int
 8199 13f4 23       		.uleb128 0x23
 8200 13f5 93090000 		.4byte	.LASF218
 8201 13f9 01       		.byte	0x1
 8202 13fa 1102     		.2byte	0x211
 8203 13fc 94000000 		.4byte	0x94
 8204 1400 05       		.uleb128 0x5
 8205 1401 03       		.byte	0x3
 8206 1402 00000000 		.4byte	OLEDcount
 8207 1406 23       		.uleb128 0x23
 8208 1407 2E0A0000 		.4byte	.LASF219
 8209 140b 01       		.byte	0x1
 8210 140c 1C02     		.2byte	0x21c
 8211 140e B9110000 		.4byte	0x11b9
 8212 1412 05       		.uleb128 0x5
 8213 1413 03       		.byte	0x3
 8214 1414 00000000 		.4byte	pedals_float
 8215 1418 23       		.uleb128 0x23
 8216 1419 BC080000 		.4byte	.LASF220
 8217 141d 01       		.byte	0x1
 8218 141e 2302     		.2byte	0x223
 8219 1420 94000000 		.4byte	0x94
 8220 1424 05       		.uleb128 0x5
 8221 1425 03       		.byte	0x3
 8222 1426 00000000 		.4byte	currentNeck
 8223 142a 23       		.uleb128 0x23
 8224 142b C0040000 		.4byte	.LASF221
 8225 142f 01       		.byte	0x1
 8226 1430 7D06     		.2byte	0x67d
 8227 1432 D2130000 		.4byte	0x13d2
 8228 1436 05       		.uleb128 0x5
 8229 1437 03       		.byte	0x3
 8230 1438 00000000 		.4byte	prevNotes
 8231 143c 07       		.uleb128 0x7
 8232 143d A2000000 		.4byte	0xa2
 8233 1441 4C140000 		.4byte	0x144c
 8234 1445 08       		.uleb128 0x8
 8235 1446 36010000 		.4byte	0x136
 8236 144a 7F       		.byte	0x7f
 8237 144b 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 181


 8238 144c 23       		.uleb128 0x23
 8239 144d 6F090000 		.4byte	.LASF222
 8240 1451 01       		.byte	0x1
 8241 1452 ED06     		.2byte	0x6ed
 8242 1454 3C140000 		.4byte	0x143c
 8243 1458 05       		.uleb128 0x5
 8244 1459 03       		.byte	0x3
 8245 145a 00000000 		.4byte	sysexBuffer
 8246 145e 23       		.uleb128 0x23
 8247 145f 1E020000 		.4byte	.LASF223
 8248 1463 01       		.byte	0x1
 8249 1464 EE06     		.2byte	0x6ee
 8250 1466 CE000000 		.4byte	0xce
 8251 146a 05       		.uleb128 0x5
 8252 146b 03       		.byte	0x3
 8253 146c 00000000 		.4byte	sysexPointer
 8254 1470 23       		.uleb128 0x23
 8255 1471 75070000 		.4byte	.LASF224
 8256 1475 01       		.byte	0x1
 8257 1476 EF06     		.2byte	0x6ef
 8258 1478 A2000000 		.4byte	0xa2
 8259 147c 05       		.uleb128 0x5
 8260 147d 03       		.byte	0x3
 8261 147e 00000000 		.4byte	receivingSysex
 8262 1482 23       		.uleb128 0x23
 8263 1483 0C040000 		.4byte	.LASF225
 8264 1487 01       		.byte	0x1
 8265 1488 F006     		.2byte	0x6f0
 8266 148a A2000000 		.4byte	0xa2
 8267 148e 05       		.uleb128 0x5
 8268 148f 03       		.byte	0x3
 8269 1490 00000000 		.4byte	parsingSysex
 8270 1494 23       		.uleb128 0x23
 8271 1495 A1070000 		.4byte	.LASF226
 8272 1499 01       		.byte	0x1
 8273 149a F106     		.2byte	0x6f1
 8274 149c 03020000 		.4byte	0x203
 8275 14a0 05       		.uleb128 0x5
 8276 14a1 03       		.byte	0x3
 8277 14a2 00000000 		.4byte	checkStatus
 8278 14a6 23       		.uleb128 0x23
 8279 14a7 02090000 		.4byte	.LASF227
 8280 14ab 01       		.byte	0x1
 8281 14ac F206     		.2byte	0x6f2
 8282 14ae 03020000 		.4byte	0x203
 8283 14b2 05       		.uleb128 0x5
 8284 14b3 03       		.byte	0x3
 8285 14b4 00000000 		.4byte	checkBase
 8286 14b8 23       		.uleb128 0x23
 8287 14b9 D90B0000 		.4byte	.LASF228
 8288 14bd 01       		.byte	0x1
 8289 14be F406     		.2byte	0x6f4
 8290 14c0 03020000 		.4byte	0x203
 8291 14c4 05       		.uleb128 0x5
 8292 14c5 03       		.byte	0x3
 8293 14c6 00000000 		.4byte	testy
 8294 14ca 07       		.uleb128 0x7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 182


 8295 14cb 03020000 		.4byte	0x203
 8296 14cf DA140000 		.4byte	0x14da
 8297 14d3 08       		.uleb128 0x8
 8298 14d4 36010000 		.4byte	0x136
 8299 14d8 49       		.byte	0x49
 8300 14d9 00       		.byte	0
 8301 14da 23       		.uleb128 0x23
 8302 14db 00000000 		.4byte	.LASF229
 8303 14df 01       		.byte	0x1
 8304 14e0 F606     		.2byte	0x6f6
 8305 14e2 EC140000 		.4byte	0x14ec
 8306 14e6 05       		.uleb128 0x5
 8307 14e7 03       		.byte	0x3
 8308 14e8 00000000 		.4byte	presetArray
 8309 14ec 06       		.uleb128 0x6
 8310 14ed CA140000 		.4byte	0x14ca
 8311 14f1 23       		.uleb128 0x23
 8312 14f2 EE070000 		.4byte	.LASF78
 8313 14f6 01       		.byte	0x1
 8314 14f7 3307     		.2byte	0x733
 8315 14f9 71020000 		.4byte	0x271
 8316 14fd 05       		.uleb128 0x5
 8317 14fe 03       		.byte	0x3
 8318 14ff 00000000 		.4byte	tempMIDI
 8319 1503 00       		.byte	0
 8320              		.section	.debug_abbrev,"",%progbits
 8321              	.Ldebug_abbrev0:
 8322 0000 01       		.uleb128 0x1
 8323 0001 11       		.uleb128 0x11
 8324 0002 01       		.byte	0x1
 8325 0003 25       		.uleb128 0x25
 8326 0004 0E       		.uleb128 0xe
 8327 0005 13       		.uleb128 0x13
 8328 0006 0B       		.uleb128 0xb
 8329 0007 03       		.uleb128 0x3
 8330 0008 0E       		.uleb128 0xe
 8331 0009 1B       		.uleb128 0x1b
 8332 000a 0E       		.uleb128 0xe
 8333 000b 55       		.uleb128 0x55
 8334 000c 17       		.uleb128 0x17
 8335 000d 11       		.uleb128 0x11
 8336 000e 01       		.uleb128 0x1
 8337 000f 10       		.uleb128 0x10
 8338 0010 17       		.uleb128 0x17
 8339 0011 00       		.byte	0
 8340 0012 00       		.byte	0
 8341 0013 02       		.uleb128 0x2
 8342 0014 24       		.uleb128 0x24
 8343 0015 00       		.byte	0
 8344 0016 0B       		.uleb128 0xb
 8345 0017 0B       		.uleb128 0xb
 8346 0018 3E       		.uleb128 0x3e
 8347 0019 0B       		.uleb128 0xb
 8348 001a 03       		.uleb128 0x3
 8349 001b 0E       		.uleb128 0xe
 8350 001c 00       		.byte	0
 8351 001d 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 183


 8352 001e 03       		.uleb128 0x3
 8353 001f 16       		.uleb128 0x16
 8354 0020 00       		.byte	0
 8355 0021 03       		.uleb128 0x3
 8356 0022 0E       		.uleb128 0xe
 8357 0023 3A       		.uleb128 0x3a
 8358 0024 0B       		.uleb128 0xb
 8359 0025 3B       		.uleb128 0x3b
 8360 0026 0B       		.uleb128 0xb
 8361 0027 49       		.uleb128 0x49
 8362 0028 13       		.uleb128 0x13
 8363 0029 00       		.byte	0
 8364 002a 00       		.byte	0
 8365 002b 04       		.uleb128 0x4
 8366 002c 24       		.uleb128 0x24
 8367 002d 00       		.byte	0
 8368 002e 0B       		.uleb128 0xb
 8369 002f 0B       		.uleb128 0xb
 8370 0030 3E       		.uleb128 0x3e
 8371 0031 0B       		.uleb128 0xb
 8372 0032 03       		.uleb128 0x3
 8373 0033 08       		.uleb128 0x8
 8374 0034 00       		.byte	0
 8375 0035 00       		.byte	0
 8376 0036 05       		.uleb128 0x5
 8377 0037 16       		.uleb128 0x16
 8378 0038 00       		.byte	0
 8379 0039 03       		.uleb128 0x3
 8380 003a 0E       		.uleb128 0xe
 8381 003b 3A       		.uleb128 0x3a
 8382 003c 0B       		.uleb128 0xb
 8383 003d 3B       		.uleb128 0x3b
 8384 003e 05       		.uleb128 0x5
 8385 003f 49       		.uleb128 0x49
 8386 0040 13       		.uleb128 0x13
 8387 0041 00       		.byte	0
 8388 0042 00       		.byte	0
 8389 0043 06       		.uleb128 0x6
 8390 0044 35       		.uleb128 0x35
 8391 0045 00       		.byte	0
 8392 0046 49       		.uleb128 0x49
 8393 0047 13       		.uleb128 0x13
 8394 0048 00       		.byte	0
 8395 0049 00       		.byte	0
 8396 004a 07       		.uleb128 0x7
 8397 004b 01       		.uleb128 0x1
 8398 004c 01       		.byte	0x1
 8399 004d 49       		.uleb128 0x49
 8400 004e 13       		.uleb128 0x13
 8401 004f 01       		.uleb128 0x1
 8402 0050 13       		.uleb128 0x13
 8403 0051 00       		.byte	0
 8404 0052 00       		.byte	0
 8405 0053 08       		.uleb128 0x8
 8406 0054 21       		.uleb128 0x21
 8407 0055 00       		.byte	0
 8408 0056 49       		.uleb128 0x49
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 184


 8409 0057 13       		.uleb128 0x13
 8410 0058 2F       		.uleb128 0x2f
 8411 0059 0B       		.uleb128 0xb
 8412 005a 00       		.byte	0
 8413 005b 00       		.byte	0
 8414 005c 09       		.uleb128 0x9
 8415 005d 13       		.uleb128 0x13
 8416 005e 01       		.byte	0x1
 8417 005f 0B       		.uleb128 0xb
 8418 0060 0B       		.uleb128 0xb
 8419 0061 3A       		.uleb128 0x3a
 8420 0062 0B       		.uleb128 0xb
 8421 0063 3B       		.uleb128 0x3b
 8422 0064 05       		.uleb128 0x5
 8423 0065 01       		.uleb128 0x1
 8424 0066 13       		.uleb128 0x13
 8425 0067 00       		.byte	0
 8426 0068 00       		.byte	0
 8427 0069 0A       		.uleb128 0xa
 8428 006a 0D       		.uleb128 0xd
 8429 006b 00       		.byte	0
 8430 006c 03       		.uleb128 0x3
 8431 006d 0E       		.uleb128 0xe
 8432 006e 3A       		.uleb128 0x3a
 8433 006f 0B       		.uleb128 0xb
 8434 0070 3B       		.uleb128 0x3b
 8435 0071 05       		.uleb128 0x5
 8436 0072 49       		.uleb128 0x49
 8437 0073 13       		.uleb128 0x13
 8438 0074 38       		.uleb128 0x38
 8439 0075 0B       		.uleb128 0xb
 8440 0076 00       		.byte	0
 8441 0077 00       		.byte	0
 8442 0078 0B       		.uleb128 0xb
 8443 0079 04       		.uleb128 0x4
 8444 007a 01       		.byte	0x1
 8445 007b 0B       		.uleb128 0xb
 8446 007c 0B       		.uleb128 0xb
 8447 007d 49       		.uleb128 0x49
 8448 007e 13       		.uleb128 0x13
 8449 007f 3A       		.uleb128 0x3a
 8450 0080 0B       		.uleb128 0xb
 8451 0081 3B       		.uleb128 0x3b
 8452 0082 05       		.uleb128 0x5
 8453 0083 01       		.uleb128 0x1
 8454 0084 13       		.uleb128 0x13
 8455 0085 00       		.byte	0
 8456 0086 00       		.byte	0
 8457 0087 0C       		.uleb128 0xc
 8458 0088 28       		.uleb128 0x28
 8459 0089 00       		.byte	0
 8460 008a 03       		.uleb128 0x3
 8461 008b 0E       		.uleb128 0xe
 8462 008c 1C       		.uleb128 0x1c
 8463 008d 0B       		.uleb128 0xb
 8464 008e 00       		.byte	0
 8465 008f 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 185


 8466 0090 0D       		.uleb128 0xd
 8467 0091 04       		.uleb128 0x4
 8468 0092 01       		.byte	0x1
 8469 0093 03       		.uleb128 0x3
 8470 0094 0E       		.uleb128 0xe
 8471 0095 0B       		.uleb128 0xb
 8472 0096 0B       		.uleb128 0xb
 8473 0097 49       		.uleb128 0x49
 8474 0098 13       		.uleb128 0x13
 8475 0099 3A       		.uleb128 0x3a
 8476 009a 0B       		.uleb128 0xb
 8477 009b 3B       		.uleb128 0x3b
 8478 009c 0B       		.uleb128 0xb
 8479 009d 01       		.uleb128 0x1
 8480 009e 13       		.uleb128 0x13
 8481 009f 00       		.byte	0
 8482 00a0 00       		.byte	0
 8483 00a1 0E       		.uleb128 0xe
 8484 00a2 17       		.uleb128 0x17
 8485 00a3 01       		.byte	0x1
 8486 00a4 03       		.uleb128 0x3
 8487 00a5 0E       		.uleb128 0xe
 8488 00a6 0B       		.uleb128 0xb
 8489 00a7 0B       		.uleb128 0xb
 8490 00a8 3A       		.uleb128 0x3a
 8491 00a9 0B       		.uleb128 0xb
 8492 00aa 3B       		.uleb128 0x3b
 8493 00ab 0B       		.uleb128 0xb
 8494 00ac 01       		.uleb128 0x1
 8495 00ad 13       		.uleb128 0x13
 8496 00ae 00       		.byte	0
 8497 00af 00       		.byte	0
 8498 00b0 0F       		.uleb128 0xf
 8499 00b1 0D       		.uleb128 0xd
 8500 00b2 00       		.byte	0
 8501 00b3 03       		.uleb128 0x3
 8502 00b4 08       		.uleb128 0x8
 8503 00b5 3A       		.uleb128 0x3a
 8504 00b6 0B       		.uleb128 0xb
 8505 00b7 3B       		.uleb128 0x3b
 8506 00b8 0B       		.uleb128 0xb
 8507 00b9 49       		.uleb128 0x49
 8508 00ba 13       		.uleb128 0x13
 8509 00bb 00       		.byte	0
 8510 00bc 00       		.byte	0
 8511 00bd 10       		.uleb128 0x10
 8512 00be 2E       		.uleb128 0x2e
 8513 00bf 00       		.byte	0
 8514 00c0 3F       		.uleb128 0x3f
 8515 00c1 19       		.uleb128 0x19
 8516 00c2 03       		.uleb128 0x3
 8517 00c3 0E       		.uleb128 0xe
 8518 00c4 3A       		.uleb128 0x3a
 8519 00c5 0B       		.uleb128 0xb
 8520 00c6 3B       		.uleb128 0x3b
 8521 00c7 0B       		.uleb128 0xb
 8522 00c8 27       		.uleb128 0x27
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 186


 8523 00c9 19       		.uleb128 0x19
 8524 00ca 11       		.uleb128 0x11
 8525 00cb 01       		.uleb128 0x1
 8526 00cc 12       		.uleb128 0x12
 8527 00cd 06       		.uleb128 0x6
 8528 00ce 40       		.uleb128 0x40
 8529 00cf 18       		.uleb128 0x18
 8530 00d0 9642     		.uleb128 0x2116
 8531 00d2 19       		.uleb128 0x19
 8532 00d3 00       		.byte	0
 8533 00d4 00       		.byte	0
 8534 00d5 11       		.uleb128 0x11
 8535 00d6 2E       		.uleb128 0x2e
 8536 00d7 01       		.byte	0x1
 8537 00d8 3F       		.uleb128 0x3f
 8538 00d9 19       		.uleb128 0x19
 8539 00da 03       		.uleb128 0x3
 8540 00db 0E       		.uleb128 0xe
 8541 00dc 3A       		.uleb128 0x3a
 8542 00dd 0B       		.uleb128 0xb
 8543 00de 3B       		.uleb128 0x3b
 8544 00df 0B       		.uleb128 0xb
 8545 00e0 27       		.uleb128 0x27
 8546 00e1 19       		.uleb128 0x19
 8547 00e2 11       		.uleb128 0x11
 8548 00e3 01       		.uleb128 0x1
 8549 00e4 12       		.uleb128 0x12
 8550 00e5 06       		.uleb128 0x6
 8551 00e6 40       		.uleb128 0x40
 8552 00e7 18       		.uleb128 0x18
 8553 00e8 9642     		.uleb128 0x2116
 8554 00ea 19       		.uleb128 0x19
 8555 00eb 01       		.uleb128 0x1
 8556 00ec 13       		.uleb128 0x13
 8557 00ed 00       		.byte	0
 8558 00ee 00       		.byte	0
 8559 00ef 12       		.uleb128 0x12
 8560 00f0 0B       		.uleb128 0xb
 8561 00f1 01       		.byte	0x1
 8562 00f2 11       		.uleb128 0x11
 8563 00f3 01       		.uleb128 0x1
 8564 00f4 12       		.uleb128 0x12
 8565 00f5 06       		.uleb128 0x6
 8566 00f6 00       		.byte	0
 8567 00f7 00       		.byte	0
 8568 00f8 13       		.uleb128 0x13
 8569 00f9 34       		.uleb128 0x34
 8570 00fa 00       		.byte	0
 8571 00fb 03       		.uleb128 0x3
 8572 00fc 08       		.uleb128 0x8
 8573 00fd 3A       		.uleb128 0x3a
 8574 00fe 0B       		.uleb128 0xb
 8575 00ff 3B       		.uleb128 0x3b
 8576 0100 0B       		.uleb128 0xb
 8577 0101 49       		.uleb128 0x49
 8578 0102 13       		.uleb128 0x13
 8579 0103 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 187


 8580 0104 18       		.uleb128 0x18
 8581 0105 00       		.byte	0
 8582 0106 00       		.byte	0
 8583 0107 14       		.uleb128 0x14
 8584 0108 2E       		.uleb128 0x2e
 8585 0109 00       		.byte	0
 8586 010a 3F       		.uleb128 0x3f
 8587 010b 19       		.uleb128 0x19
 8588 010c 03       		.uleb128 0x3
 8589 010d 0E       		.uleb128 0xe
 8590 010e 3A       		.uleb128 0x3a
 8591 010f 0B       		.uleb128 0xb
 8592 0110 3B       		.uleb128 0x3b
 8593 0111 0B       		.uleb128 0xb
 8594 0112 27       		.uleb128 0x27
 8595 0113 19       		.uleb128 0x19
 8596 0114 11       		.uleb128 0x11
 8597 0115 01       		.uleb128 0x1
 8598 0116 12       		.uleb128 0x12
 8599 0117 06       		.uleb128 0x6
 8600 0118 40       		.uleb128 0x40
 8601 0119 18       		.uleb128 0x18
 8602 011a 9742     		.uleb128 0x2117
 8603 011c 19       		.uleb128 0x19
 8604 011d 00       		.byte	0
 8605 011e 00       		.byte	0
 8606 011f 15       		.uleb128 0x15
 8607 0120 2E       		.uleb128 0x2e
 8608 0121 00       		.byte	0
 8609 0122 3F       		.uleb128 0x3f
 8610 0123 19       		.uleb128 0x19
 8611 0124 03       		.uleb128 0x3
 8612 0125 0E       		.uleb128 0xe
 8613 0126 3A       		.uleb128 0x3a
 8614 0127 0B       		.uleb128 0xb
 8615 0128 3B       		.uleb128 0x3b
 8616 0129 05       		.uleb128 0x5
 8617 012a 27       		.uleb128 0x27
 8618 012b 19       		.uleb128 0x19
 8619 012c 11       		.uleb128 0x11
 8620 012d 01       		.uleb128 0x1
 8621 012e 12       		.uleb128 0x12
 8622 012f 06       		.uleb128 0x6
 8623 0130 40       		.uleb128 0x40
 8624 0131 18       		.uleb128 0x18
 8625 0132 9642     		.uleb128 0x2116
 8626 0134 19       		.uleb128 0x19
 8627 0135 00       		.byte	0
 8628 0136 00       		.byte	0
 8629 0137 16       		.uleb128 0x16
 8630 0138 2E       		.uleb128 0x2e
 8631 0139 01       		.byte	0x1
 8632 013a 3F       		.uleb128 0x3f
 8633 013b 19       		.uleb128 0x19
 8634 013c 03       		.uleb128 0x3
 8635 013d 0E       		.uleb128 0xe
 8636 013e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 188


 8637 013f 0B       		.uleb128 0xb
 8638 0140 3B       		.uleb128 0x3b
 8639 0141 05       		.uleb128 0x5
 8640 0142 27       		.uleb128 0x27
 8641 0143 19       		.uleb128 0x19
 8642 0144 49       		.uleb128 0x49
 8643 0145 13       		.uleb128 0x13
 8644 0146 11       		.uleb128 0x11
 8645 0147 01       		.uleb128 0x1
 8646 0148 12       		.uleb128 0x12
 8647 0149 06       		.uleb128 0x6
 8648 014a 40       		.uleb128 0x40
 8649 014b 18       		.uleb128 0x18
 8650 014c 9642     		.uleb128 0x2116
 8651 014e 19       		.uleb128 0x19
 8652 014f 01       		.uleb128 0x1
 8653 0150 13       		.uleb128 0x13
 8654 0151 00       		.byte	0
 8655 0152 00       		.byte	0
 8656 0153 17       		.uleb128 0x17
 8657 0154 05       		.uleb128 0x5
 8658 0155 00       		.byte	0
 8659 0156 03       		.uleb128 0x3
 8660 0157 08       		.uleb128 0x8
 8661 0158 3A       		.uleb128 0x3a
 8662 0159 0B       		.uleb128 0xb
 8663 015a 3B       		.uleb128 0x3b
 8664 015b 05       		.uleb128 0x5
 8665 015c 49       		.uleb128 0x49
 8666 015d 13       		.uleb128 0x13
 8667 015e 02       		.uleb128 0x2
 8668 015f 18       		.uleb128 0x18
 8669 0160 00       		.byte	0
 8670 0161 00       		.byte	0
 8671 0162 18       		.uleb128 0x18
 8672 0163 34       		.uleb128 0x34
 8673 0164 00       		.byte	0
 8674 0165 03       		.uleb128 0x3
 8675 0166 0E       		.uleb128 0xe
 8676 0167 3A       		.uleb128 0x3a
 8677 0168 0B       		.uleb128 0xb
 8678 0169 3B       		.uleb128 0x3b
 8679 016a 05       		.uleb128 0x5
 8680 016b 49       		.uleb128 0x49
 8681 016c 13       		.uleb128 0x13
 8682 016d 02       		.uleb128 0x2
 8683 016e 18       		.uleb128 0x18
 8684 016f 00       		.byte	0
 8685 0170 00       		.byte	0
 8686 0171 19       		.uleb128 0x19
 8687 0172 05       		.uleb128 0x5
 8688 0173 00       		.byte	0
 8689 0174 03       		.uleb128 0x3
 8690 0175 0E       		.uleb128 0xe
 8691 0176 3A       		.uleb128 0x3a
 8692 0177 0B       		.uleb128 0xb
 8693 0178 3B       		.uleb128 0x3b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 189


 8694 0179 05       		.uleb128 0x5
 8695 017a 49       		.uleb128 0x49
 8696 017b 13       		.uleb128 0x13
 8697 017c 02       		.uleb128 0x2
 8698 017d 18       		.uleb128 0x18
 8699 017e 00       		.byte	0
 8700 017f 00       		.byte	0
 8701 0180 1A       		.uleb128 0x1a
 8702 0181 34       		.uleb128 0x34
 8703 0182 00       		.byte	0
 8704 0183 03       		.uleb128 0x3
 8705 0184 08       		.uleb128 0x8
 8706 0185 3A       		.uleb128 0x3a
 8707 0186 0B       		.uleb128 0xb
 8708 0187 3B       		.uleb128 0x3b
 8709 0188 05       		.uleb128 0x5
 8710 0189 49       		.uleb128 0x49
 8711 018a 13       		.uleb128 0x13
 8712 018b 02       		.uleb128 0x2
 8713 018c 18       		.uleb128 0x18
 8714 018d 00       		.byte	0
 8715 018e 00       		.byte	0
 8716 018f 1B       		.uleb128 0x1b
 8717 0190 2E       		.uleb128 0x2e
 8718 0191 01       		.byte	0x1
 8719 0192 3F       		.uleb128 0x3f
 8720 0193 19       		.uleb128 0x19
 8721 0194 03       		.uleb128 0x3
 8722 0195 08       		.uleb128 0x8
 8723 0196 3A       		.uleb128 0x3a
 8724 0197 0B       		.uleb128 0xb
 8725 0198 3B       		.uleb128 0x3b
 8726 0199 05       		.uleb128 0x5
 8727 019a 27       		.uleb128 0x27
 8728 019b 19       		.uleb128 0x19
 8729 019c 49       		.uleb128 0x49
 8730 019d 13       		.uleb128 0x13
 8731 019e 11       		.uleb128 0x11
 8732 019f 01       		.uleb128 0x1
 8733 01a0 12       		.uleb128 0x12
 8734 01a1 06       		.uleb128 0x6
 8735 01a2 40       		.uleb128 0x40
 8736 01a3 18       		.uleb128 0x18
 8737 01a4 9642     		.uleb128 0x2116
 8738 01a6 19       		.uleb128 0x19
 8739 01a7 01       		.uleb128 0x1
 8740 01a8 13       		.uleb128 0x13
 8741 01a9 00       		.byte	0
 8742 01aa 00       		.byte	0
 8743 01ab 1C       		.uleb128 0x1c
 8744 01ac 0B       		.uleb128 0xb
 8745 01ad 01       		.byte	0x1
 8746 01ae 11       		.uleb128 0x11
 8747 01af 01       		.uleb128 0x1
 8748 01b0 12       		.uleb128 0x12
 8749 01b1 06       		.uleb128 0x6
 8750 01b2 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 190


 8751 01b3 13       		.uleb128 0x13
 8752 01b4 00       		.byte	0
 8753 01b5 00       		.byte	0
 8754 01b6 1D       		.uleb128 0x1d
 8755 01b7 2E       		.uleb128 0x2e
 8756 01b8 00       		.byte	0
 8757 01b9 3F       		.uleb128 0x3f
 8758 01ba 19       		.uleb128 0x19
 8759 01bb 03       		.uleb128 0x3
 8760 01bc 0E       		.uleb128 0xe
 8761 01bd 3A       		.uleb128 0x3a
 8762 01be 0B       		.uleb128 0xb
 8763 01bf 3B       		.uleb128 0x3b
 8764 01c0 05       		.uleb128 0x5
 8765 01c1 27       		.uleb128 0x27
 8766 01c2 19       		.uleb128 0x19
 8767 01c3 11       		.uleb128 0x11
 8768 01c4 01       		.uleb128 0x1
 8769 01c5 12       		.uleb128 0x12
 8770 01c6 06       		.uleb128 0x6
 8771 01c7 40       		.uleb128 0x40
 8772 01c8 18       		.uleb128 0x18
 8773 01c9 9742     		.uleb128 0x2117
 8774 01cb 19       		.uleb128 0x19
 8775 01cc 00       		.byte	0
 8776 01cd 00       		.byte	0
 8777 01ce 1E       		.uleb128 0x1e
 8778 01cf 2E       		.uleb128 0x2e
 8779 01d0 01       		.byte	0x1
 8780 01d1 3F       		.uleb128 0x3f
 8781 01d2 19       		.uleb128 0x19
 8782 01d3 03       		.uleb128 0x3
 8783 01d4 0E       		.uleb128 0xe
 8784 01d5 3A       		.uleb128 0x3a
 8785 01d6 0B       		.uleb128 0xb
 8786 01d7 3B       		.uleb128 0x3b
 8787 01d8 05       		.uleb128 0x5
 8788 01d9 27       		.uleb128 0x27
 8789 01da 19       		.uleb128 0x19
 8790 01db 11       		.uleb128 0x11
 8791 01dc 01       		.uleb128 0x1
 8792 01dd 12       		.uleb128 0x12
 8793 01de 06       		.uleb128 0x6
 8794 01df 40       		.uleb128 0x40
 8795 01e0 18       		.uleb128 0x18
 8796 01e1 9642     		.uleb128 0x2116
 8797 01e3 19       		.uleb128 0x19
 8798 01e4 01       		.uleb128 0x1
 8799 01e5 13       		.uleb128 0x13
 8800 01e6 00       		.byte	0
 8801 01e7 00       		.byte	0
 8802 01e8 1F       		.uleb128 0x1f
 8803 01e9 0F       		.uleb128 0xf
 8804 01ea 00       		.byte	0
 8805 01eb 0B       		.uleb128 0xb
 8806 01ec 0B       		.uleb128 0xb
 8807 01ed 49       		.uleb128 0x49
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 191


 8808 01ee 13       		.uleb128 0x13
 8809 01ef 00       		.byte	0
 8810 01f0 00       		.byte	0
 8811 01f1 20       		.uleb128 0x20
 8812 01f2 34       		.uleb128 0x34
 8813 01f3 00       		.byte	0
 8814 01f4 03       		.uleb128 0x3
 8815 01f5 0E       		.uleb128 0xe
 8816 01f6 3A       		.uleb128 0x3a
 8817 01f7 0B       		.uleb128 0xb
 8818 01f8 3B       		.uleb128 0x3b
 8819 01f9 0B       		.uleb128 0xb
 8820 01fa 49       		.uleb128 0x49
 8821 01fb 13       		.uleb128 0x13
 8822 01fc 3F       		.uleb128 0x3f
 8823 01fd 19       		.uleb128 0x19
 8824 01fe 3C       		.uleb128 0x3c
 8825 01ff 19       		.uleb128 0x19
 8826 0200 00       		.byte	0
 8827 0201 00       		.byte	0
 8828 0202 21       		.uleb128 0x21
 8829 0203 21       		.uleb128 0x21
 8830 0204 00       		.byte	0
 8831 0205 49       		.uleb128 0x49
 8832 0206 13       		.uleb128 0x13
 8833 0207 2F       		.uleb128 0x2f
 8834 0208 05       		.uleb128 0x5
 8835 0209 00       		.byte	0
 8836 020a 00       		.byte	0
 8837 020b 22       		.uleb128 0x22
 8838 020c 26       		.uleb128 0x26
 8839 020d 00       		.byte	0
 8840 020e 49       		.uleb128 0x49
 8841 020f 13       		.uleb128 0x13
 8842 0210 00       		.byte	0
 8843 0211 00       		.byte	0
 8844 0212 23       		.uleb128 0x23
 8845 0213 34       		.uleb128 0x34
 8846 0214 00       		.byte	0
 8847 0215 03       		.uleb128 0x3
 8848 0216 0E       		.uleb128 0xe
 8849 0217 3A       		.uleb128 0x3a
 8850 0218 0B       		.uleb128 0xb
 8851 0219 3B       		.uleb128 0x3b
 8852 021a 05       		.uleb128 0x5
 8853 021b 49       		.uleb128 0x49
 8854 021c 13       		.uleb128 0x13
 8855 021d 3F       		.uleb128 0x3f
 8856 021e 19       		.uleb128 0x19
 8857 021f 02       		.uleb128 0x2
 8858 0220 18       		.uleb128 0x18
 8859 0221 00       		.byte	0
 8860 0222 00       		.byte	0
 8861 0223 24       		.uleb128 0x24
 8862 0224 34       		.uleb128 0x34
 8863 0225 00       		.byte	0
 8864 0226 03       		.uleb128 0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 192


 8865 0227 0E       		.uleb128 0xe
 8866 0228 3A       		.uleb128 0x3a
 8867 0229 0B       		.uleb128 0xb
 8868 022a 3B       		.uleb128 0x3b
 8869 022b 05       		.uleb128 0x5
 8870 022c 49       		.uleb128 0x49
 8871 022d 13       		.uleb128 0x13
 8872 022e 3F       		.uleb128 0x3f
 8873 022f 19       		.uleb128 0x19
 8874 0230 3C       		.uleb128 0x3c
 8875 0231 19       		.uleb128 0x19
 8876 0232 00       		.byte	0
 8877 0233 00       		.byte	0
 8878 0234 25       		.uleb128 0x25
 8879 0235 34       		.uleb128 0x34
 8880 0236 00       		.byte	0
 8881 0237 03       		.uleb128 0x3
 8882 0238 0E       		.uleb128 0xe
 8883 0239 3A       		.uleb128 0x3a
 8884 023a 0B       		.uleb128 0xb
 8885 023b 3B       		.uleb128 0x3b
 8886 023c 0B       		.uleb128 0xb
 8887 023d 49       		.uleb128 0x49
 8888 023e 13       		.uleb128 0x13
 8889 023f 3F       		.uleb128 0x3f
 8890 0240 19       		.uleb128 0x19
 8891 0241 02       		.uleb128 0x2
 8892 0242 18       		.uleb128 0x18
 8893 0243 00       		.byte	0
 8894 0244 00       		.byte	0
 8895 0245 26       		.uleb128 0x26
 8896 0246 34       		.uleb128 0x34
 8897 0247 00       		.byte	0
 8898 0248 03       		.uleb128 0x3
 8899 0249 08       		.uleb128 0x8
 8900 024a 3A       		.uleb128 0x3a
 8901 024b 0B       		.uleb128 0xb
 8902 024c 3B       		.uleb128 0x3b
 8903 024d 0B       		.uleb128 0xb
 8904 024e 49       		.uleb128 0x49
 8905 024f 13       		.uleb128 0x13
 8906 0250 3F       		.uleb128 0x3f
 8907 0251 19       		.uleb128 0x19
 8908 0252 02       		.uleb128 0x2
 8909 0253 18       		.uleb128 0x18
 8910 0254 00       		.byte	0
 8911 0255 00       		.byte	0
 8912 0256 27       		.uleb128 0x27
 8913 0257 34       		.uleb128 0x34
 8914 0258 00       		.byte	0
 8915 0259 03       		.uleb128 0x3
 8916 025a 08       		.uleb128 0x8
 8917 025b 3A       		.uleb128 0x3a
 8918 025c 0B       		.uleb128 0xb
 8919 025d 3B       		.uleb128 0x3b
 8920 025e 05       		.uleb128 0x5
 8921 025f 49       		.uleb128 0x49
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 193


 8922 0260 13       		.uleb128 0x13
 8923 0261 3F       		.uleb128 0x3f
 8924 0262 19       		.uleb128 0x19
 8925 0263 02       		.uleb128 0x2
 8926 0264 18       		.uleb128 0x18
 8927 0265 00       		.byte	0
 8928 0266 00       		.byte	0
 8929 0267 00       		.byte	0
 8930              		.section	.debug_aranges,"",%progbits
 8931 0000 FC000000 		.4byte	0xfc
 8932 0004 0200     		.2byte	0x2
 8933 0006 00000000 		.4byte	.Ldebug_info0
 8934 000a 04       		.byte	0x4
 8935 000b 00       		.byte	0
 8936 000c 0000     		.2byte	0
 8937 000e 0000     		.2byte	0
 8938 0010 00000000 		.4byte	.LFB64
 8939 0014 A0000000 		.4byte	.LFE64-.LFB64
 8940 0018 00000000 		.4byte	.LFB65
 8941 001c 20010000 		.4byte	.LFE65-.LFB65
 8942 0020 00000000 		.4byte	.LFB66
 8943 0024 9C000000 		.4byte	.LFE66-.LFB66
 8944 0028 00000000 		.4byte	.LFB67
 8945 002c 18000000 		.4byte	.LFE67-.LFB67
 8946 0030 00000000 		.4byte	.LFB68
 8947 0034 40000000 		.4byte	.LFE68-.LFB68
 8948 0038 00000000 		.4byte	.LFB69
 8949 003c 14000000 		.4byte	.LFE69-.LFB69
 8950 0040 00000000 		.4byte	.LFB70
 8951 0044 74000000 		.4byte	.LFE70-.LFB70
 8952 0048 00000000 		.4byte	.LFB71
 8953 004c 58000000 		.4byte	.LFE71-.LFB71
 8954 0050 00000000 		.4byte	.LFB72
 8955 0054 68000000 		.4byte	.LFE72-.LFB72
 8956 0058 00000000 		.4byte	.LFB73
 8957 005c 4C000000 		.4byte	.LFE73-.LFB73
 8958 0060 00000000 		.4byte	.LFB74
 8959 0064 46000000 		.4byte	.LFE74-.LFB74
 8960 0068 00000000 		.4byte	.LFB75
 8961 006c 56000000 		.4byte	.LFE75-.LFB75
 8962 0070 00000000 		.4byte	.LFB76
 8963 0074 78130000 		.4byte	.LFE76-.LFB76
 8964 0078 00000000 		.4byte	.LFB77
 8965 007c 08010000 		.4byte	.LFE77-.LFB77
 8966 0080 00000000 		.4byte	.LFB78
 8967 0084 A0000000 		.4byte	.LFE78-.LFB78
 8968 0088 00000000 		.4byte	.LFB79
 8969 008c B4000000 		.4byte	.LFE79-.LFB79
 8970 0090 00000000 		.4byte	.LFB80
 8971 0094 0C000000 		.4byte	.LFE80-.LFB80
 8972 0098 00000000 		.4byte	.LFB81
 8973 009c 54000000 		.4byte	.LFE81-.LFB81
 8974 00a0 00000000 		.4byte	.LFB82
 8975 00a4 74000000 		.4byte	.LFE82-.LFB82
 8976 00a8 00000000 		.4byte	.LFB83
 8977 00ac 98000000 		.4byte	.LFE83-.LFB83
 8978 00b0 00000000 		.4byte	.LFB84
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 194


 8979 00b4 0C010000 		.4byte	.LFE84-.LFB84
 8980 00b8 00000000 		.4byte	.LFB85
 8981 00bc 1C000000 		.4byte	.LFE85-.LFB85
 8982 00c0 00000000 		.4byte	.LFB86
 8983 00c4 68000000 		.4byte	.LFE86-.LFB86
 8984 00c8 00000000 		.4byte	.LFB87
 8985 00cc 68000000 		.4byte	.LFE87-.LFB87
 8986 00d0 00000000 		.4byte	.LFB88
 8987 00d4 68000000 		.4byte	.LFE88-.LFB88
 8988 00d8 00000000 		.4byte	.LFB89
 8989 00dc 6C000000 		.4byte	.LFE89-.LFB89
 8990 00e0 00000000 		.4byte	.LFB90
 8991 00e4 64000000 		.4byte	.LFE90-.LFB90
 8992 00e8 00000000 		.4byte	.LFB91
 8993 00ec 5C020000 		.4byte	.LFE91-.LFB91
 8994 00f0 00000000 		.4byte	.LFB92
 8995 00f4 FC000000 		.4byte	.LFE92-.LFB92
 8996 00f8 00000000 		.4byte	0
 8997 00fc 00000000 		.4byte	0
 8998              		.section	.debug_ranges,"",%progbits
 8999              	.Ldebug_ranges0:
 9000 0000 00000000 		.4byte	.LFB64
 9001 0004 A0000000 		.4byte	.LFE64
 9002 0008 00000000 		.4byte	.LFB65
 9003 000c 20010000 		.4byte	.LFE65
 9004 0010 00000000 		.4byte	.LFB66
 9005 0014 9C000000 		.4byte	.LFE66
 9006 0018 00000000 		.4byte	.LFB67
 9007 001c 18000000 		.4byte	.LFE67
 9008 0020 00000000 		.4byte	.LFB68
 9009 0024 40000000 		.4byte	.LFE68
 9010 0028 00000000 		.4byte	.LFB69
 9011 002c 14000000 		.4byte	.LFE69
 9012 0030 00000000 		.4byte	.LFB70
 9013 0034 74000000 		.4byte	.LFE70
 9014 0038 00000000 		.4byte	.LFB71
 9015 003c 58000000 		.4byte	.LFE71
 9016 0040 00000000 		.4byte	.LFB72
 9017 0044 68000000 		.4byte	.LFE72
 9018 0048 00000000 		.4byte	.LFB73
 9019 004c 4C000000 		.4byte	.LFE73
 9020 0050 00000000 		.4byte	.LFB74
 9021 0054 46000000 		.4byte	.LFE74
 9022 0058 00000000 		.4byte	.LFB75
 9023 005c 56000000 		.4byte	.LFE75
 9024 0060 00000000 		.4byte	.LFB76
 9025 0064 78130000 		.4byte	.LFE76
 9026 0068 00000000 		.4byte	.LFB77
 9027 006c 08010000 		.4byte	.LFE77
 9028 0070 00000000 		.4byte	.LFB78
 9029 0074 A0000000 		.4byte	.LFE78
 9030 0078 00000000 		.4byte	.LFB79
 9031 007c B4000000 		.4byte	.LFE79
 9032 0080 00000000 		.4byte	.LFB80
 9033 0084 0C000000 		.4byte	.LFE80
 9034 0088 00000000 		.4byte	.LFB81
 9035 008c 54000000 		.4byte	.LFE81
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 195


 9036 0090 00000000 		.4byte	.LFB82
 9037 0094 74000000 		.4byte	.LFE82
 9038 0098 00000000 		.4byte	.LFB83
 9039 009c 98000000 		.4byte	.LFE83
 9040 00a0 00000000 		.4byte	.LFB84
 9041 00a4 0C010000 		.4byte	.LFE84
 9042 00a8 00000000 		.4byte	.LFB85
 9043 00ac 1C000000 		.4byte	.LFE85
 9044 00b0 00000000 		.4byte	.LFB86
 9045 00b4 68000000 		.4byte	.LFE86
 9046 00b8 00000000 		.4byte	.LFB87
 9047 00bc 68000000 		.4byte	.LFE87
 9048 00c0 00000000 		.4byte	.LFB88
 9049 00c4 68000000 		.4byte	.LFE88
 9050 00c8 00000000 		.4byte	.LFB89
 9051 00cc 6C000000 		.4byte	.LFE89
 9052 00d0 00000000 		.4byte	.LFB90
 9053 00d4 64000000 		.4byte	.LFE90
 9054 00d8 00000000 		.4byte	.LFB91
 9055 00dc 5C020000 		.4byte	.LFE91
 9056 00e0 00000000 		.4byte	.LFB92
 9057 00e4 FC000000 		.4byte	.LFE92
 9058 00e8 00000000 		.4byte	0
 9059 00ec 00000000 		.4byte	0
 9060              		.section	.debug_line,"",%progbits
 9061              	.Ldebug_line0:
 9062 0000 4F080000 		.section	.debug_str,"MS",%progbits,1
 9062      02008201 
 9062      00000201 
 9062      FB0E0D00 
 9062      01010101 
 9063              	.LASF229:
 9064 0000 70726573 		.ascii	"presetArray\000"
 9064      65744172 
 9064      72617900 
 9065              	.LASF28:
 9066 000c 73697A65 		.ascii	"sizetype\000"
 9066      74797065 
 9066      00
 9067              	.LASF188:
 9068 0015 70726576 		.ascii	"prev_processed_volumePedal\000"
 9068      5F70726F 
 9068      63657373 
 9068      65645F76 
 9068      6F6C756D 
 9069              	.LASF76:
 9070 0030 74656D70 		.ascii	"tempangle\000"
 9070      616E676C 
 9070      6500
 9071              	.LASF161:
 9072 003a 6E657744 		.ascii	"newDataFlag2\000"
 9072      61746146 
 9072      6C616732 
 9072      00
 9073              	.LASF38:
 9074 0047 43595F45 		.ascii	"CY_EM_EEPROM_SUCCESS\000"
 9074      4D5F4545 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 196


 9074      50524F4D 
 9074      5F535543 
 9074      43455353 
 9075              	.LASF17:
 9076 005c 696E7433 		.ascii	"int32_t\000"
 9076      325F7400 
 9077              	.LASF121:
 9078 0064 456D5F45 		.ascii	"Em_EEPROM_context\000"
 9078      4550524F 
 9078      4D5F636F 
 9078      6E746578 
 9078      7400
 9079              	.LASF47:
 9080 0076 54686972 		.ascii	"ThirdLine\000"
 9080      644C696E 
 9080      6500
 9081              	.LASF96:
 9082 0080 6E6F7465 		.ascii	"noteEvent\000"
 9082      4576656E 
 9082      7400
 9083              	.LASF170:
 9084 008a 53504932 		.ascii	"SPI2errorflag\000"
 9084      6572726F 
 9084      72666C61 
 9084      6700
 9085              	.LASF21:
 9086 0098 75696E74 		.ascii	"uint32\000"
 9086      333200
 9087              	.LASF110:
 9088 009f 43437661 		.ascii	"CCval\000"
 9088      6C00
 9089              	.LASF124:
 9090 00a5 49324362 		.ascii	"I2Cbuff1\000"
 9090      75666631 
 9090      00
 9091              	.LASF179:
 9092 00ae 49324362 		.ascii	"I2Cbuff2\000"
 9092      75666632 
 9092      00
 9093              	.LASF181:
 9094 00b7 6D75785F 		.ascii	"mux_states\000"
 9094      73746174 
 9094      657300
 9095              	.LASF137:
 9096 00c2 6F637461 		.ascii	"octave\000"
 9096      766500
 9097              	.LASF49:
 9098 00c9 4E696C4C 		.ascii	"NilLine\000"
 9098      696E6500 
 9099              	.LASF43:
 9100 00d1 63795F65 		.ascii	"cy_en_em_eeprom_status_t\000"
 9100      6E5F656D 
 9100      5F656570 
 9100      726F6D5F 
 9100      73746174 
 9101              	.LASF183:
 9102 00ea 70656461 		.ascii	"pedals_high\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 197


 9102      6C735F68 
 9102      69676800 
 9103              	.LASF87:
 9104 00f6 6E627974 		.ascii	"nbytes\000"
 9104      657300
 9105              	.LASF83:
 9106 00fd 74656D70 		.ascii	"tempBreak\000"
 9106      42726561 
 9106      6B00
 9107              	.LASF135:
 9108 0107 74656D70 		.ascii	"temper\000"
 9108      657200
 9109              	.LASF109:
 9110 010e 43436E75 		.ascii	"CCnum\000"
 9110      6D00
 9111              	.LASF40:
 9112 0114 43595F45 		.ascii	"CY_EM_EEPROM_BAD_CHECKSUM\000"
 9112      4D5F4545 
 9112      50524F4D 
 9112      5F424144 
 9112      5F434845 
 9113              	.LASF36:
 9114 012e 75736572 		.ascii	"userFlashStartAddr\000"
 9114      466C6173 
 9114      68537461 
 9114      72744164 
 9114      647200
 9115              	.LASF30:
 9116 0141 6E756D62 		.ascii	"numberOfRows\000"
 9116      65724F66 
 9116      526F7773 
 9116      00
 9117              	.LASF65:
 9118 014e 69737461 		.ascii	"istart\000"
 9118      727400
 9119              	.LASF71:
 9120 0155 70656461 		.ascii	"pedalDiff\000"
 9120      6C446966 
 9120      6600
 9121              	.LASF114:
 9122 015f 74686556 		.ascii	"theVal\000"
 9122      616C00
 9123              	.LASF34:
 9124 0166 72656475 		.ascii	"redundantCopy\000"
 9124      6E64616E 
 9124      74436F70 
 9124      7900
 9125              	.LASF2:
 9126 0174 5F5F7569 		.ascii	"__uint8_t\000"
 9126      6E74385F 
 9126      7400
 9127              	.LASF62:
 9128 017e 616C7068 		.ascii	"alpha\000"
 9128      6100
 9129              	.LASF178:
 9130 0184 62617243 		.ascii	"barCount\000"
 9130      6F756E74 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 198


 9130      00
 9131              	.LASF198:
 9132 018d 766F6963 		.ascii	"voice\000"
 9132      6500
 9133              	.LASF150:
 9134 0193 73747269 		.ascii	"strings\000"
 9134      6E677300 
 9135              	.LASF8:
 9136 019b 6C6F6E67 		.ascii	"long int\000"
 9136      20696E74 
 9136      00
 9137              	.LASF115:
 9138 01a4 63757272 		.ascii	"currentFloat\000"
 9138      656E7446 
 9138      6C6F6174 
 9138      00
 9139              	.LASF69:
 9140 01b1 6D61696E 		.ascii	"main\000"
 9140      00
 9141              	.LASF208:
 9142 01b6 70726576 		.ascii	"prevStringPitchBend\000"
 9142      53747269 
 9142      6E675069 
 9142      74636842 
 9142      656E6400 
 9143              	.LASF103:
 9144 01ca 4D494449 		.ascii	"MIDInoteNum\000"
 9144      6E6F7465 
 9144      4E756D00 
 9145              	.LASF112:
 9146 01d6 73656E64 		.ascii	"sendMIDIAllNotesOff\000"
 9146      4D494449 
 9146      416C6C4E 
 9146      6F746573 
 9146      4F666600 
 9147              	.LASF53:
 9148 01ea 536C6565 		.ascii	"SleepIsr_function\000"
 9148      70497372 
 9148      5F66756E 
 9148      6374696F 
 9148      6E00
 9149              	.LASF46:
 9150 01fc 5365636F 		.ascii	"SecondLine\000"
 9150      6E644C69 
 9150      6E6500
 9151              	.LASF191:
 9152 0207 66726574 		.ascii	"fretScaling\000"
 9152      5363616C 
 9152      696E6700 
 9153              	.LASF59:
 9154 0213 6D746F66 		.ascii	"mtof\000"
 9154      00
 9155              	.LASF172:
 9156 0218 6B6E6F62 		.ascii	"knobs\000"
 9156      7300
 9157              	.LASF223:
 9158 021e 73797365 		.ascii	"sysexPointer\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 199


 9158      78506F69 
 9158      6E746572 
 9158      00
 9159              	.LASF63:
 9160 022b 6F6D416C 		.ascii	"omAlpha\000"
 9160      70686100 
 9161              	.LASF73:
 9162 0233 73747269 		.ascii	"stringStartLoc\000"
 9162      6E675374 
 9162      6172744C 
 9162      6F6300
 9163              	.LASF0:
 9164 0242 7369676E 		.ascii	"signed char\000"
 9164      65642063 
 9164      68617200 
 9165              	.LASF14:
 9166 024e 75696E74 		.ascii	"uint8_t\000"
 9166      385F7400 
 9167              	.LASF29:
 9168 0256 776C456E 		.ascii	"wlEndAddr\000"
 9168      64416464 
 9168      7200
 9169              	.LASF117:
 9170 0260 5553425F 		.ascii	"USB_callbackLocalMidiEvent\000"
 9170      63616C6C 
 9170      6261636B 
 9170      4C6F6361 
 9170      6C4D6964 
 9171              	.LASF50:
 9172 027b 73706973 		.ascii	"spis_1_ss\000"
 9172      5F315F73 
 9172      7300
 9173              	.LASF41:
 9174 0285 43595F45 		.ascii	"CY_EM_EEPROM_BAD_DATA\000"
 9174      4D5F4545 
 9174      50524F4D 
 9174      5F424144 
 9174      5F444154 
 9175              	.LASF233:
 9176 029b 5F4F4C45 		.ascii	"_OLEDLine\000"
 9176      444C696E 
 9176      6500
 9177              	.LASF192:
 9178 02a5 70656461 		.ascii	"pedalRatios\000"
 9178      6C526174 
 9178      696F7300 
 9179              	.LASF1:
 9180 02b1 756E7369 		.ascii	"unsigned char\000"
 9180      676E6564 
 9180      20636861 
 9180      7200
 9181              	.LASF144:
 9182 02bf 72783143 		.ascii	"rx1Channel\000"
 9182      68616E6E 
 9182      656C00
 9183              	.LASF72:
 9184 02ca 70656461 		.ascii	"pedalStartLoc\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 200


 9184      6C537461 
 9184      72744C6F 
 9184      6300
 9185              	.LASF156:
 9186 02d8 6E657744 		.ascii	"newDataFlag\000"
 9186      61746146 
 9186      6C616700 
 9187              	.LASF214:
 9188 02e4 73747269 		.ascii	"stringOctave\000"
 9188      6E674F63 
 9188      74617665 
 9188      00
 9189              	.LASF93:
 9190 02f1 5553425F 		.ascii	"USB_service\000"
 9190      73657276 
 9190      69636500 
 9191              	.LASF57:
 9192 02fd 74656D70 		.ascii	"tempmax\000"
 9192      6D617800 
 9193              	.LASF64:
 9194 0305 76616C75 		.ascii	"value\000"
 9194      6500
 9195              	.LASF200:
 9196 030b 656E636F 		.ascii	"encoderVal\000"
 9196      64657256 
 9196      616C00
 9197              	.LASF107:
 9198 0316 70726573 		.ascii	"pressure\000"
 9198      73757265 
 9198      00
 9199              	.LASF151:
 9200 031f 70726576 		.ascii	"prevStrings\000"
 9200      53747269 
 9200      6E677300 
 9201              	.LASF24:
 9202 032b 63686172 		.ascii	"char\000"
 9202      00
 9203              	.LASF120:
 9204 0330 65657072 		.ascii	"eepromArray\000"
 9204      6F6D4172 
 9204      72617900 
 9205              	.LASF141:
 9206 033c 72617741 		.ascii	"rawAngle\000"
 9206      6E676C65 
 9206      00
 9207              	.LASF58:
 9208 0345 4C454146 		.ascii	"LEAF_clip\000"
 9208      5F636C69 
 9208      7000
 9209              	.LASF195:
 9210 034f 6E65636B 		.ascii	"neck\000"
 9210      00
 9211              	.LASF5:
 9212 0354 5F5F7569 		.ascii	"__uint16_t\000"
 9212      6E743136 
 9212      5F7400
 9213              	.LASF92:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 201


 9214 035f 63686563 		.ascii	"checkUSB_Vbus\000"
 9214      6B555342 
 9214      5F566275 
 9214      7300
 9215              	.LASF177:
 9216 036d 65657072 		.ascii	"eeprom_cnt\000"
 9216      6F6D5F63 
 9216      6E7400
 9217              	.LASF77:
 9218 0378 74656D70 		.ascii	"tempPedal\000"
 9218      50656461 
 9218      6C00
 9219              	.LASF91:
 9220 0382 4932435F 		.ascii	"I2C_reset\000"
 9220      72657365 
 9220      7400
 9221              	.LASF201:
 9222 038c 656E636F 		.ascii	"encoderNum\000"
 9222      6465724E 
 9222      756D00
 9223              	.LASF44:
 9224 0397 75696E74 		.ascii	"uint\000"
 9224      00
 9225              	.LASF143:
 9226 039c 6D696469 		.ascii	"midiOverflow\000"
 9226      4F766572 
 9226      666C6F77 
 9226      00
 9227              	.LASF106:
 9228 03a9 73656E64 		.ascii	"sendMIDIPolyKeyPressure\000"
 9228      4D494449 
 9228      506F6C79 
 9228      4B657950 
 9228      72657373 
 9229              	.LASF81:
 9230 03c1 636F6D70 		.ascii	"computerMIDIOffset\000"
 9230      75746572 
 9230      4D494449 
 9230      4F666673 
 9230      657400
 9231              	.LASF108:
 9232 03d4 73656E64 		.ascii	"sendMIDIControlChange\000"
 9232      4D494449 
 9232      436F6E74 
 9232      726F6C43 
 9232      68616E67 
 9233              	.LASF155:
 9234 03ea 73706943 		.ascii	"spiCounter\000"
 9234      6F756E74 
 9234      657200
 9235              	.LASF39:
 9236 03f5 43595F45 		.ascii	"CY_EM_EEPROM_BAD_PARAM\000"
 9236      4D5F4545 
 9236      50524F4D 
 9236      5F424144 
 9236      5F504152 
 9237              	.LASF225:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 202


 9238 040c 70617273 		.ascii	"parsingSysex\000"
 9238      696E6753 
 9238      79736578 
 9238      00
 9239              	.LASF134:
 9240 0419 72657475 		.ascii	"returnedData\000"
 9240      726E6564 
 9240      44617461 
 9240      00
 9241              	.LASF48:
 9242 0426 466F7572 		.ascii	"FourthLine\000"
 9242      74684C69 
 9242      6E6500
 9243              	.LASF99:
 9244 0431 76496E74 		.ascii	"vInt\000"
 9244      00
 9245              	.LASF185:
 9246 0436 766F6C75 		.ascii	"volumePedal\000"
 9246      6D655065 
 9246      64616C00 
 9247              	.LASF148:
 9248 0442 72784275 		.ascii	"rxBufferPluck\000"
 9248      66666572 
 9248      506C7563 
 9248      6B00
 9249              	.LASF207:
 9250 0450 636F7065 		.ascii	"copedent\000"
 9250      64656E74 
 9250      00
 9251              	.LASF173:
 9252 0459 70726576 		.ascii	"prevKnobs\000"
 9252      4B6E6F62 
 9252      7300
 9253              	.LASF168:
 9254 0463 6D795370 		.ascii	"mySpiCounter\000"
 9254      69436F75 
 9254      6E746572 
 9254      00
 9255              	.LASF101:
 9256 0470 43434576 		.ascii	"CCEvent\000"
 9256      656E7400 
 9257              	.LASF113:
 9258 0478 70617273 		.ascii	"parseSysex\000"
 9258      65537973 
 9258      657800
 9259              	.LASF212:
 9260 0483 696E7653 		.ascii	"invStringMappedPositions\000"
 9260      7472696E 
 9260      674D6170 
 9260      70656450 
 9260      6F736974 
 9261              	.LASF166:
 9262 049c 696E7075 		.ascii	"inputData\000"
 9262      74446174 
 9262      6100
 9263              	.LASF61:
 9264 04a6 4C454146 		.ascii	"LEAF_interpolation_linear\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 203


 9264      5F696E74 
 9264      6572706F 
 9264      6C617469 
 9264      6F6E5F6C 
 9265              	.LASF221:
 9266 04c0 70726576 		.ascii	"prevNotes\000"
 9266      4E6F7465 
 9266      7300
 9267              	.LASF37:
 9268 04ca 63795F73 		.ascii	"cy_stc_eeprom_context_t\000"
 9268      74635F65 
 9268      6570726F 
 9268      6D5F636F 
 9268      6E746578 
 9269              	.LASF10:
 9270 04e2 6C6F6E67 		.ascii	"long unsigned int\000"
 9270      20756E73 
 9270      69676E65 
 9270      6420696E 
 9270      7400
 9271              	.LASF122:
 9272 04f4 456D5F45 		.ascii	"Em_EEPROM_em_EepromStorage\000"
 9272      4550524F 
 9272      4D5F656D 
 9272      5F456570 
 9272      726F6D53 
 9273              	.LASF176:
 9274 050f 65657072 		.ascii	"eepromReturnValue\000"
 9274      6F6D5265 
 9274      7475726E 
 9274      56616C75 
 9274      6500
 9275              	.LASF75:
 9276 0521 73746174 		.ascii	"status\000"
 9276      757300
 9277              	.LASF180:
 9278 0528 73656E64 		.ascii	"send_it\000"
 9278      5F697400 
 9279              	.LASF132:
 9280 0530 6C696E65 		.ascii	"linearPotValue32Bit\000"
 9280      6172506F 
 9280      7456616C 
 9280      75653332 
 9280      42697400 
 9281              	.LASF105:
 9282 0544 6368616E 		.ascii	"channel\000"
 9282      6E656C00 
 9283              	.LASF85:
 9284 054c 4932435F 		.ascii	"I2C_MasterWriteBlocking\000"
 9284      4D617374 
 9284      65725772 
 9284      69746542 
 9284      6C6F636B 
 9285              	.LASF74:
 9286 0564 6D795465 		.ascii	"myTemp\000"
 9286      6D7000
 9287              	.LASF138:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 204


 9288 056b 616E676C 		.ascii	"angle\000"
 9288      6500
 9289              	.LASF42:
 9290 0571 43595F45 		.ascii	"CY_EM_EEPROM_WRITE_FAIL\000"
 9290      4D5F4545 
 9290      50524F4D 
 9290      5F575249 
 9290      54455F46 
 9291              	.LASF67:
 9292 0589 6F737461 		.ascii	"ostart\000"
 9292      727400
 9293              	.LASF217:
 9294 0590 6F70656E 		.ascii	"openStringMIDI_Int\000"
 9294      53747269 
 9294      6E674D49 
 9294      44495F49 
 9294      6E7400
 9295              	.LASF66:
 9296 05a3 6973746F 		.ascii	"istop\000"
 9296      7000
 9297              	.LASF230:
 9298 05a9 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 9298      43313120 
 9298      352E342E 
 9298      31203230 
 9298      31363036 
 9299 05dc 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 9299      20726576 
 9299      6973696F 
 9299      6E203233 
 9299      37373135 
 9300 060f 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 9300      66756E63 
 9300      74696F6E 
 9300      2D736563 
 9300      74696F6E 
 9301              	.LASF102:
 9302 0637 73656E64 		.ascii	"sendMIDINoteOn\000"
 9302      4D494449 
 9302      4E6F7465 
 9302      4F6E00
 9303              	.LASF194:
 9304 0646 6D61696E 		.ascii	"main_counter\000"
 9304      5F636F75 
 9304      6E746572 
 9304      00
 9305              	.LASF45:
 9306 0653 46697273 		.ascii	"FirstLine\000"
 9306      744C696E 
 9306      6500
 9307              	.LASF196:
 9308 065d 6475616C 		.ascii	"dualSlider\000"
 9308      536C6964 
 9308      657200
 9309              	.LASF55:
 9310 0668 72657374 		.ascii	"restartSystemCheck\000"
 9310      61727453 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 205


 9310      79737465 
 9310      6D436865 
 9310      636B00
 9311              	.LASF129:
 9312 067b 5553425F 		.ascii	"USB_check_flag\000"
 9312      63686563 
 9312      6B5F666C 
 9312      616700
 9313              	.LASF9:
 9314 068a 5F5F7569 		.ascii	"__uint32_t\000"
 9314      6E743332 
 9314      5F7400
 9315              	.LASF11:
 9316 0695 6C6F6E67 		.ascii	"long long int\000"
 9316      206C6F6E 
 9316      6720696E 
 9316      7400
 9317              	.LASF133:
 9318 06a3 636F756E 		.ascii	"counter\000"
 9318      74657200 
 9319              	.LASF215:
 9320 06ab 73747269 		.ascii	"stringPitch\000"
 9320      6E675069 
 9320      74636800 
 9321              	.LASF146:
 9322 06b7 72783154 		.ascii	"rx1TD\000"
 9322      4400
 9323              	.LASF56:
 9324 06bd 74656D70 		.ascii	"tempmin\000"
 9324      6D696E00 
 9325              	.LASF35:
 9326 06c5 626C6F63 		.ascii	"blockingWrite\000"
 9326      6B696E67 
 9326      57726974 
 9326      6500
 9327              	.LASF23:
 9328 06d3 646F7562 		.ascii	"double\000"
 9328      6C6500
 9329              	.LASF231:
 9330 06da 6D61696E 		.ascii	"main.c\000"
 9330      2E6300
 9331              	.LASF202:
 9332 06e1 62757474 		.ascii	"button1Up\000"
 9332      6F6E3155 
 9332      7000
 9333              	.LASF94:
 9334 06eb 6C6F6732 		.ascii	"log2f_approx\000"
 9334      665F6170 
 9334      70726F78 
 9334      00
 9335              	.LASF123:
 9336 06f8 49544D5F 		.ascii	"ITM_RxBuffer\000"
 9336      52784275 
 9336      66666572 
 9336      00
 9337              	.LASF68:
 9338 0705 6F73746F 		.ascii	"ostop\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 206


 9338      7000
 9339              	.LASF89:
 9340 070b 74696D65 		.ascii	"timeout\000"
 9340      6F757400 
 9341              	.LASF22:
 9342 0713 666C6F61 		.ascii	"float\000"
 9342      7400
 9343              	.LASF187:
 9344 0719 70726576 		.ascii	"prev_processed_pedals\000"
 9344      5F70726F 
 9344      63657373 
 9344      65645F70 
 9344      6564616C 
 9345              	.LASF174:
 9346 072f 53504932 		.ascii	"SPI2started\000"
 9346      73746172 
 9346      74656400 
 9347              	.LASF162:
 9348 073b 63757272 		.ascii	"currentPluckBuffer\000"
 9348      656E7450 
 9348      6C75636B 
 9348      42756666 
 9348      657200
 9349              	.LASF80:
 9350 074e 6261724D 		.ascii	"barMIDI\000"
 9350      49444900 
 9351              	.LASF111:
 9352 0756 73656E64 		.ascii	"sendMIDIPitchBend\000"
 9352      4D494449 
 9352      50697463 
 9352      6842656E 
 9352      6400
 9353              	.LASF13:
 9354 0768 756E7369 		.ascii	"unsigned int\000"
 9354      676E6564 
 9354      20696E74 
 9354      00
 9355              	.LASF224:
 9356 0775 72656365 		.ascii	"receivingSysex\000"
 9356      6976696E 
 9356      67537973 
 9356      657800
 9357              	.LASF118:
 9358 0784 6361626C 		.ascii	"cable\000"
 9358      6500
 9359              	.LASF54:
 9360 078a 56627573 		.ascii	"Vbus_function\000"
 9360      5F66756E 
 9360      6374696F 
 9360      6E00
 9361              	.LASF104:
 9362 0798 76656C6F 		.ascii	"velocity\000"
 9362      63697479 
 9362      00
 9363              	.LASF226:
 9364 07a1 63686563 		.ascii	"checkStatus\000"
 9364      6B537461 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 207


 9364      74757300 
 9365              	.LASF25:
 9366 07ad 63797374 		.ascii	"cystatus\000"
 9366      61747573 
 9366      00
 9367              	.LASF171:
 9368 07b6 6261725F 		.ascii	"bar_index\000"
 9368      696E6465 
 9368      7800
 9369              	.LASF97:
 9370 07c0 73747269 		.ascii	"string\000"
 9370      6E6700
 9371              	.LASF169:
 9372 07c7 6F666673 		.ascii	"offsetErrorCount\000"
 9372      65744572 
 9372      726F7243 
 9372      6F756E74 
 9372      00
 9373              	.LASF189:
 9374 07d8 70726F63 		.ascii	"processed_volumePedal\000"
 9374      65737365 
 9374      645F766F 
 9374      6C756D65 
 9374      50656461 
 9375              	.LASF78:
 9376 07ee 74656D70 		.ascii	"tempMIDI\000"
 9376      4D494449 
 9376      00
 9377              	.LASF52:
 9378 07f7 73706973 		.ascii	"spis_2_function\000"
 9378      5F325F66 
 9378      756E6374 
 9378      696F6E00 
 9379              	.LASF149:
 9380 0807 72784275 		.ascii	"rxBufferBar\000"
 9380      66666572 
 9380      42617200 
 9381              	.LASF186:
 9382 0813 70726F63 		.ascii	"processed_pedals\000"
 9382      65737365 
 9382      645F7065 
 9382      64616C73 
 9382      00
 9383              	.LASF210:
 9384 0824 6F70656E 		.ascii	"openStringFrequencies\000"
 9384      53747269 
 9384      6E674672 
 9384      65717565 
 9384      6E636965 
 9385              	.LASF139:
 9386 083a 70726576 		.ascii	"prevAngle\000"
 9386      416E676C 
 9386      6500
 9387              	.LASF158:
 9388 0844 706C7563 		.ascii	"pluck_index\000"
 9388      6B5F696E 
 9388      64657800 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 208


 9389              	.LASF27:
 9390 0850 6C6F6E67 		.ascii	"long double\000"
 9390      20646F75 
 9390      626C6500 
 9391              	.LASF90:
 9392 085c 4932435F 		.ascii	"I2C_MasterReadBlocking\000"
 9392      4D617374 
 9392      65725265 
 9392      6164426C 
 9392      6F636B69 
 9393              	.LASF163:
 9394 0873 63757272 		.ascii	"currentBarBuffer\000"
 9394      656E7442 
 9394      61724275 
 9394      66666572 
 9394      00
 9395              	.LASF140:
 9396 0884 4144435F 		.ascii	"ADC_values\000"
 9396      76616C75 
 9396      657300
 9397              	.LASF60:
 9398 088f 66746F6D 		.ascii	"ftom\000"
 9398      00
 9399              	.LASF197:
 9400 0894 656E7465 		.ascii	"enterUp\000"
 9400      72557000 
 9401              	.LASF165:
 9402 089c 53504931 		.ascii	"SPI1ErrorCount\000"
 9402      4572726F 
 9402      72436F75 
 9402      6E7400
 9403              	.LASF142:
 9404 08ab 6D696469 		.ascii	"midiSent\000"
 9404      53656E74 
 9404      00
 9405              	.LASF119:
 9406 08b4 6D696469 		.ascii	"midiMsg\000"
 9406      4D736700 
 9407              	.LASF220:
 9408 08bc 63757272 		.ascii	"currentNeck\000"
 9408      656E744E 
 9408      65636B00 
 9409              	.LASF12:
 9410 08c8 6C6F6E67 		.ascii	"long long unsigned int\000"
 9410      206C6F6E 
 9410      6720756E 
 9410      7369676E 
 9410      65642069 
 9411              	.LASF16:
 9412 08df 75696E74 		.ascii	"uint16_t\000"
 9412      31365F74 
 9412      00
 9413              	.LASF193:
 9414 08e8 6C617374 		.ascii	"last_mux\000"
 9414      5F6D7578 
 9414      00
 9415              	.LASF147:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 209


 9416 08f1 72783254 		.ascii	"rx2TD\000"
 9416      4400
 9417              	.LASF234:
 9418 08f7 62726561 		.ascii	"breakFloat\000"
 9418      6B466C6F 
 9418      617400
 9419              	.LASF227:
 9420 0902 63686563 		.ascii	"checkBase\000"
 9420      6B426173 
 9420      6500
 9421              	.LASF51:
 9422 090c 73706973 		.ascii	"spis_2_ss\000"
 9422      5F325F73 
 9422      7300
 9423              	.LASF203:
 9424 0916 62757474 		.ascii	"button2Up\000"
 9424      6F6E3255 
 9424      7000
 9425              	.LASF154:
 9426 0920 616D4865 		.ascii	"amHere\000"
 9426      726500
 9427              	.LASF175:
 9428 0927 61727261 		.ascii	"array\000"
 9428      7900
 9429              	.LASF26:
 9430 092d 72656738 		.ascii	"reg8\000"
 9430      00
 9431              	.LASF160:
 9432 0932 73706943 		.ascii	"spiCounter2\000"
 9432      6F756E74 
 9432      65723200 
 9433              	.LASF125:
 9434 093e 75736241 		.ascii	"usbActivityCounter\000"
 9434      63746976 
 9434      69747943 
 9434      6F756E74 
 9434      657200
 9435              	.LASF184:
 9436 0951 64656164 		.ascii	"deadzone\000"
 9436      7A6F6E65 
 9436      00
 9437              	.LASF3:
 9438 095a 5F5F696E 		.ascii	"__int16_t\000"
 9438      7431365F 
 9438      7400
 9439              	.LASF128:
 9440 0964 5553425F 		.ascii	"USB_active\000"
 9440      61637469 
 9440      766500
 9441              	.LASF222:
 9442 096f 73797365 		.ascii	"sysexBuffer\000"
 9442      78427566 
 9442      66657200 
 9443              	.LASF164:
 9444 097b 706C7563 		.ascii	"pluckErrorCount\000"
 9444      6B457272 
 9444      6F72436F 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 210


 9444      756E7400 
 9445              	.LASF98:
 9446 098b 74656D70 		.ascii	"tempAmp\000"
 9446      416D7000 
 9447              	.LASF218:
 9448 0993 4F4C4544 		.ascii	"OLEDcount\000"
 9448      636F756E 
 9448      7400
 9449              	.LASF232:
 9450 099d 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\Desktop\\psoc_steel3\\PSOC5_"
 9450      73657273 
 9450      5C4A6566 
 9450      66536E79 
 9450      6465725C 
 9451 09cb 656C6563 		.ascii	"electrosteel_stringsensors_newpcb_brain\\CE210514_P"
 9451      74726F73 
 9451      7465656C 
 9451      5F737472 
 9451      696E6773 
 9452 09fd 534F4333 		.ascii	"SOC3_5_Thermistor.cydsn\000"
 9452      5F355F54 
 9452      6865726D 
 9452      6973746F 
 9452      722E6379 
 9453              	.LASF206:
 9454 0a15 70617463 		.ascii	"patchNum\000"
 9454      684E756D 
 9454      00
 9455              	.LASF95:
 9456 0a1e 73706973 		.ascii	"spis_1_function\000"
 9456      5F315F66 
 9456      756E6374 
 9456      696F6E00 
 9457              	.LASF219:
 9458 0a2e 70656461 		.ascii	"pedals_float\000"
 9458      6C735F66 
 9458      6C6F6174 
 9458      00
 9459              	.LASF19:
 9460 0a3b 75696E74 		.ascii	"uint8\000"
 9460      3800
 9461              	.LASF182:
 9462 0a41 70656461 		.ascii	"pedals_low\000"
 9462      6C735F6C 
 9462      6F7700
 9463              	.LASF82:
 9464 0a4c 70697463 		.ascii	"pitchBendAmount\000"
 9464      6842656E 
 9464      64416D6F 
 9464      756E7400 
 9465              	.LASF157:
 9466 0a5c 70726576 		.ascii	"prevOctave\000"
 9466      4F637461 
 9466      766500
 9467              	.LASF4:
 9468 0a67 73686F72 		.ascii	"short int\000"
 9468      7420696E 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 211


 9468      7400
 9469              	.LASF190:
 9470 0a71 66726574 		.ascii	"fretMeasurements\000"
 9470      4D656173 
 9470      7572656D 
 9470      656E7473 
 9470      00
 9471              	.LASF88:
 9472 0a82 6D6F6465 		.ascii	"mode\000"
 9472      00
 9473              	.LASF216:
 9474 0a87 73747269 		.ascii	"stringMIDI\000"
 9474      6E674D49 
 9474      444900
 9475              	.LASF79:
 9476 0a92 6F70656E 		.ascii	"openStringMIDI\000"
 9476      53747269 
 9476      6E674D49 
 9476      444900
 9477              	.LASF15:
 9478 0aa1 696E7431 		.ascii	"int16_t\000"
 9478      365F7400 
 9479              	.LASF116:
 9480 0aa9 70656461 		.ascii	"pedalToWrite\000"
 9480      6C546F57 
 9480      72697465 
 9480      00
 9481              	.LASF32:
 9482 0ab6 65657072 		.ascii	"eepromSize\000"
 9482      6F6D5369 
 9482      7A6500
 9483              	.LASF159:
 9484 0ac1 616D4865 		.ascii	"amHere2\000"
 9484      72653200 
 9485              	.LASF211:
 9486 0ac9 73747269 		.ascii	"stringMappedPositions\000"
 9486      6E674D61 
 9486      70706564 
 9486      506F7369 
 9486      74696F6E 
 9487              	.LASF136:
 9488 0adf 70726576 		.ascii	"previousButtons\000"
 9488      696F7573 
 9488      42757474 
 9488      6F6E7300 
 9489              	.LASF33:
 9490 0aef 77656172 		.ascii	"wearLevelingFactor\000"
 9490      4C657665 
 9490      6C696E67 
 9490      46616374 
 9490      6F7200
 9491              	.LASF86:
 9492 0b02 69324341 		.ascii	"i2CAddr\000"
 9492      64647200 
 9493              	.LASF153:
 9494 0b0a 6D617853 		.ascii	"maxStrings\000"
 9494      7472696E 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 212


 9494      677300
 9495              	.LASF167:
 9496 0b15 73706941 		.ascii	"spiAdjusted\000"
 9496      646A7573 
 9496      74656400 
 9497              	.LASF145:
 9498 0b21 72783243 		.ascii	"rx2Channel\000"
 9498      68616E6E 
 9498      656C00
 9499              	.LASF84:
 9500 0b2c 446D6152 		.ascii	"DmaRxConfiguration\000"
 9500      78436F6E 
 9500      66696775 
 9500      72617469 
 9500      6F6E00
 9501              	.LASF18:
 9502 0b3f 75696E74 		.ascii	"uint32_t\000"
 9502      33325F74 
 9502      00
 9503              	.LASF205:
 9504 0b48 62757474 		.ascii	"button4Up\000"
 9504      6F6E3455 
 9504      7000
 9505              	.LASF127:
 9506 0b52 70726576 		.ascii	"prevVBUS\000"
 9506      56425553 
 9506      00
 9507              	.LASF126:
 9508 0b5b 63757272 		.ascii	"currentVBUS\000"
 9508      656E7456 
 9508      42555300 
 9509              	.LASF204:
 9510 0b67 62757474 		.ascii	"button3Up\000"
 9510      6F6E3355 
 9510      7000
 9511              	.LASF6:
 9512 0b71 73686F72 		.ascii	"short unsigned int\000"
 9512      7420756E 
 9512      7369676E 
 9512      65642069 
 9512      6E7400
 9513              	.LASF100:
 9514 0b84 6E6F7465 		.ascii	"noteToSend\000"
 9514      546F5365 
 9514      6E6400
 9515              	.LASF7:
 9516 0b8f 5F5F696E 		.ascii	"__int32_t\000"
 9516      7433325F 
 9516      7400
 9517              	.LASF152:
 9518 0b99 70726576 		.ascii	"prevBar\000"
 9518      42617200 
 9519              	.LASF131:
 9520 0ba1 6D79496E 		.ascii	"myInputArray\000"
 9520      70757441 
 9520      72726179 
 9520      00
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccGJM9th.s 			page 213


 9521              	.LASF209:
 9522 0bae 70656461 		.ascii	"pedals\000"
 9522      6C7300
 9523              	.LASF199:
 9524 0bb5 65646974 		.ascii	"editUp\000"
 9524      557000
 9525              	.LASF31:
 9526 0bbc 6C617374 		.ascii	"lastWrRowAddr\000"
 9526      5772526F 
 9526      77416464 
 9526      7200
 9527              	.LASF70:
 9528 0bca 6D794172 		.ascii	"myArrayCounter\000"
 9528      72617943 
 9528      6F756E74 
 9528      657200
 9529              	.LASF228:
 9530 0bd9 74657374 		.ascii	"testy\000"
 9530      7900
 9531              	.LASF213:
 9532 0bdf 73747269 		.ascii	"stringFrequencies\000"
 9532      6E674672 
 9532      65717565 
 9532      6E636965 
 9532      7300
 9533              	.LASF20:
 9534 0bf1 75696E74 		.ascii	"uint16\000"
 9534      313600
 9535              	.LASF130:
 9536 0bf8 6D794172 		.ascii	"myArray\000"
 9536      72617900 
 9537              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
