ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	sysexBuffer,2048,4
  20              		.global	sysexPointer
  21              		.bss
  22              		.align	2
  23              		.type	sysexPointer, %object
  24              		.size	sysexPointer, 4
  25              	sysexPointer:
  26 0000 00000000 		.space	4
  27              		.global	receivingSysex
  28              		.type	receivingSysex, %object
  29              		.size	receivingSysex, 1
  30              	receivingSysex:
  31 0004 00       		.space	1
  32              		.global	parsingSysex
  33              		.type	parsingSysex, %object
  34              		.size	parsingSysex, 1
  35              	parsingSysex:
  36 0005 00       		.space	1
  37              		.comm	presetArray,2048,4
  38              		.global	presetNumberToWrite
  39              		.type	presetNumberToWrite, %object
  40              		.size	presetNumberToWrite, 1
  41              	presetNumberToWrite:
  42 0006 00       		.space	1
  43              		.global	copedentNumberToWrite
  44              		.type	copedentNumberToWrite, %object
  45              		.size	copedentNumberToWrite, 1
  46              	copedentNumberToWrite:
  47 0007 00       		.space	1
  48              		.global	sendMessageEnd
  49              		.type	sendMessageEnd, %object
  50              		.size	sendMessageEnd, 1
  51              	sendMessageEnd:
  52 0008 00       		.space	1
  53              		.global	sendSingleParamUpdate
  54              		.type	sendSingleParamUpdate, %object
  55              		.size	sendSingleParamUpdate, 1
  56              	sendSingleParamUpdate:
  57 0009 00       		.space	1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 2


  58              		.global	singleParamToUpdateHigh
  59              		.type	singleParamToUpdateHigh, %object
  60              		.size	singleParamToUpdateHigh, 1
  61              	singleParamToUpdateHigh:
  62 000a 00       		.space	1
  63              		.global	singleParamToUpdateLow
  64              		.type	singleParamToUpdateLow, %object
  65              		.size	singleParamToUpdateLow, 1
  66              	singleParamToUpdateLow:
  67 000b 00       		.space	1
  68              		.global	singleParamValueHigh
  69              		.type	singleParamValueHigh, %object
  70              		.size	singleParamValueHigh, 1
  71              	singleParamValueHigh:
  72 000c 00       		.space	1
  73              		.global	singleParamValueLow
  74              		.type	singleParamValueLow, %object
  75              		.size	singleParamValueLow, 1
  76              	singleParamValueLow:
  77 000d 00       		.space	1
  78              		.global	sendMappingChangeUpdate
  79              		.type	sendMappingChangeUpdate, %object
  80              		.size	sendMappingChangeUpdate, 1
  81              	sendMappingChangeUpdate:
  82 000e 00       		.space	1
  83              		.global	presetArraySection
  84              		.type	presetArraySection, %object
  85              		.size	presetArraySection, 1
  86              	presetArraySection:
  87 000f 00       		.space	1
  88              		.global	messageArraySendCount
  89              		.align	1
  90              		.type	messageArraySendCount, %object
  91              		.size	messageArraySendCount, 2
  92              	messageArraySendCount:
  93 0010 0000     		.space	2
  94              		.global	messageArraySize
  95              		.align	1
  96              		.type	messageArraySize, %object
  97              		.size	messageArraySize, 2
  98              	messageArraySize:
  99 0012 0000     		.space	2
 100              		.global	sysexMessageInProgress
 101              		.type	sysexMessageInProgress, %object
 102              		.size	sysexMessageInProgress, 1
 103              	sysexMessageInProgress:
 104 0014 00       		.space	1
 105              		.global	bufCount
 106              		.type	bufCount, %object
 107              		.size	bufCount, 1
 108              	bufCount:
 109 0015 00       		.space	1
 110              		.global	sendingMessage
 111              		.type	sendingMessage, %object
 112              		.size	sendingMessage, 1
 113              	sendingMessage:
 114 0016 00       		.space	1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 3


 115              		.global	sendKnobs
 116              		.type	sendKnobs, %object
 117              		.size	sendKnobs, 1
 118              	sendKnobs:
 119 0017 00       		.space	1
 120              		.global	currentFloat
 121              		.align	2
 122              		.type	currentFloat, %object
 123              		.size	currentFloat, 4
 124              	currentFloat:
 125 0018 00000000 		.space	4
 126              		.global	mapCount
 127              		.align	2
 128              		.type	mapCount, %object
 129              		.size	mapCount, 4
 130              	mapCount:
 131 001c 00000000 		.space	4
 132              		.global	valsCount
 133              		.align	1
 134              		.type	valsCount, %object
 135              		.size	valsCount, 2
 136              	valsCount:
 137 0020 0000     		.space	2
 138              		.global	mapCountExpectation
 139              		.align	1
 140              		.type	mapCountExpectation, %object
 141              		.size	mapCountExpectation, 2
 142              	mapCountExpectation:
 143 0022 0000     		.space	2
 144              		.global	numMappings
 145              		.align	1
 146              		.type	numMappings, %object
 147              		.size	numMappings, 2
 148              	numMappings:
 149 0024 0000     		.space	2
 150              		.global	parseThatMF
 151              		.type	parseThatMF, %object
 152              		.size	parseThatMF, 1
 153              	parseThatMF:
 154 0026 00       		.space	1
 155              		.global	valCheck
 156 0027 00       		.align	2
 157              		.type	valCheck, %object
 158              		.size	valCheck, 4
 159              	valCheck:
 160 0028 00000000 		.space	4
 161              		.global	testVal
 162              		.align	2
 163              		.type	testVal, %object
 164              		.size	testVal, 4
 165              	testVal:
 166 002c 00000000 		.space	4
 167              		.global	numStrings
 168              		.data
 169              		.align	2
 170              		.type	numStrings, %object
 171              		.size	numStrings, 4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 4


 172              	numStrings:
 173 0000 0A000000 		.word	10
 174              		.global	usbActivityCounter
 175              		.bss
 176              		.type	usbActivityCounter, %object
 177              		.size	usbActivityCounter, 1
 178              	usbActivityCounter:
 179 0030 00       		.space	1
 180              		.comm	midiMsg,4,4
 181              		.global	currentVBUS
 182              		.type	currentVBUS, %object
 183              		.size	currentVBUS, 1
 184              	currentVBUS:
 185 0031 00       		.space	1
 186              		.global	prevVBUS
 187              		.type	prevVBUS, %object
 188              		.size	prevVBUS, 1
 189              	prevVBUS:
 190 0032 00       		.space	1
 191              		.global	USB_active
 192              		.type	USB_active, %object
 193              		.size	USB_active, 1
 194              	USB_active:
 195 0033 00       		.space	1
 196              		.global	USB_check_flag
 197              		.type	USB_check_flag, %object
 198              		.size	USB_check_flag, 1
 199              	USB_check_flag:
 200 0034 00       		.space	1
 201              		.comm	mappingArray,6,4
 202              		.comm	inBuffer,32,4
 203              		.comm	myArray,32,4
 204              		.comm	myInputArray,2,4
 205              		.comm	linearPotValue32Bit,8,4
 206              		.global	i
 207              		.type	i, %object
 208              		.size	i, 1
 209              	i:
 210 0035 00       		.space	1
 211              		.global	counter
 212              		.type	counter, %object
 213              		.size	counter, 1
 214              	counter:
 215 0036 00       		.space	1
 216              		.comm	returnedData,32,4
 217              		.comm	temper,4,4
 218              		.comm	previousButtons,44,4
 219              		.global	octave
 220              		.data
 221              		.align	2
 222              		.type	octave, %object
 223              		.size	octave, 4
 224              	octave:
 225 0004 05000000 		.word	5
 226              		.comm	angle,20,4
 227              		.comm	prevAngle,20,4
 228              		.comm	ADC_values,8,4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 5


 229              		.global	rawAngle
 230              		.bss
 231 0037 00       		.align	1
 232              		.type	rawAngle, %object
 233              		.size	rawAngle, 2
 234              	rawAngle:
 235 0038 0000     		.space	2
 236              		.global	midiSent
 237              		.align	1
 238              		.type	midiSent, %object
 239              		.size	midiSent, 2
 240              	midiSent:
 241 003a 0000     		.space	2
 242              		.global	midiOverflow
 243              		.align	1
 244              		.type	midiOverflow, %object
 245              		.size	midiOverflow, 2
 246              	midiOverflow:
 247 003c 0000     		.space	2
 248              		.comm	macroKnobValues,8,4
 249              		.global	currentCopedent
 250              		.type	currentCopedent, %object
 251              		.size	currentCopedent, 1
 252              	currentCopedent:
 253 003e 00       		.space	1
 254              		.global	necks
 255              		.data
 256              		.align	2
 257              		.type	necks, %object
 258              		.size	necks, 2
 259              	necks:
 260 0008 00       		.byte	0
 261 0009 01       		.byte	1
 262              		.comm	rx1Channel,1,1
 263              		.comm	rx2Channel,1,32
 264              		.comm	rx1TD,2,4
 265              		.comm	rx2TD,2,32
 266              		.comm	txChannel,1,32
 267              		.comm	txTD,1,32
 268              		.comm	rx3Channel,1,32
 269              		.comm	rx3TD,1,32
 270              		.comm	rxBufferPluck,52,32
 271              		.comm	rxBufferBar,16,32
 272              		.comm	strings,24,4
 273              		.comm	prevStrings,24,4
 274              		.comm	bar,4,4
 275              		.comm	prevBar,4,4
 276              		.comm	maxStrings,24,4
 277              		.global	amHere
 278              		.bss
 279              		.type	amHere, %object
 280              		.size	amHere, 1
 281              	amHere:
 282 003f 00       		.space	1
 283              		.global	spiCounter
 284              		.type	spiCounter, %object
 285              		.size	spiCounter, 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 6


 286              	spiCounter:
 287 0040 00       		.space	1
 288              		.global	newDataFlag
 289              		.type	newDataFlag, %object
 290              		.size	newDataFlag, 1
 291              	newDataFlag:
 292 0041 00       		.space	1
 293              		.global	prevOctave
 294 0042 0000     		.align	2
 295              		.type	prevOctave, %object
 296              		.size	prevOctave, 4
 297              	prevOctave:
 298 0044 00000000 		.space	4
 299              		.global	pluck_index
 300              		.type	pluck_index, %object
 301              		.size	pluck_index, 1
 302              	pluck_index:
 303 0048 00       		.space	1
 304              		.global	amHere2
 305              		.type	amHere2, %object
 306              		.size	amHere2, 1
 307              	amHere2:
 308 0049 00       		.space	1
 309              		.global	spiCounter2
 310              		.type	spiCounter2, %object
 311              		.size	spiCounter2, 1
 312              	spiCounter2:
 313 004a 00       		.space	1
 314              		.global	newDataFlag2
 315              		.type	newDataFlag2, %object
 316              		.size	newDataFlag2, 1
 317              	newDataFlag2:
 318 004b 00       		.space	1
 319              		.global	currentPluckBuffer
 320              		.type	currentPluckBuffer, %object
 321              		.size	currentPluckBuffer, 1
 322              	currentPluckBuffer:
 323 004c 00       		.space	1
 324              		.global	currentBarBuffer
 325              		.type	currentBarBuffer, %object
 326              		.size	currentBarBuffer, 1
 327              	currentBarBuffer:
 328 004d 00       		.space	1
 329              		.global	pluckErrorCount
 330              		.type	pluckErrorCount, %object
 331              		.size	pluckErrorCount, 1
 332              	pluckErrorCount:
 333 004e 00       		.space	1
 334              		.global	SPI1ErrorCount
 335 004f 00       		.align	1
 336              		.type	SPI1ErrorCount, %object
 337              		.size	SPI1ErrorCount, 2
 338              	SPI1ErrorCount:
 339 0050 0000     		.space	2
 340              		.global	inputData
 341              		.type	inputData, %object
 342              		.size	inputData, 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 7


 343              	inputData:
 344 0052 00       		.space	1
 345              		.section	.text.spis_1_ss,"ax",%progbits
 346              		.align	2
 347              		.global	spis_1_ss
 348              		.thumb
 349              		.thumb_func
 350              		.type	spis_1_ss, %function
 351              	spis_1_ss:
 352              	.LFB64:
 353              		.file 1 "main.c"
   1:main.c        **** /*main.c
   2:main.c        **** *****************************************************************************/
   3:main.c        **** #include <device.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <math.h>
   6:main.c        **** #include "oled.h"
   7:main.c        **** #include "main.h"
   8:main.c        **** 
   9:main.c        **** 
  10:main.c        **** #define EEPROM_NECKS_OFFSET 0
  11:main.c        **** #define EEPROM_COPEDENT_OFFSET 2
  12:main.c        **** #define COPEDENT_SIZE_IN_BYTES 278 //including name bytes
  13:main.c        **** #define COPEDENT_SIZE_IN_FLOATS 132 // not including name bytes
  14:main.c        **** #define NAME_LENGTH_IN_BYTES 14
  15:main.c        **** #define EEPROM_CALIBRATION_OFFSET (EEPROM_NECKS_OFFSET + EEPROM_COPEDENT_OFFSET + (MAX_NUM_COPEDENT
  16:main.c        **** #define CALIBRATION_SIZE_IN_BYTES NUM_PEDALS * 4 //for each pedal, store 2 bytes for high and 2 byt
  17:main.c        **** #define MACRO_CLIPPED_LENGTH 8
  18:main.c        **** #define NAME_CLIPPED_LENGTH 11
  19:main.c        **** #define COPEDENT_NAME_CLIPPED_LENGTH 8
  20:main.c        **** #define myBufferSize 32
  21:main.c        **** void parseSysex(void);
  22:main.c        **** 
  23:main.c        **** uint8_t sysexBuffer[2048];
  24:main.c        **** uint32_t sysexPointer = 0;
  25:main.c        **** uint8_t receivingSysex = 0;
  26:main.c        **** uint8_t parsingSysex = 0;
  27:main.c        **** volatile uint8_t presetArray[2048];
  28:main.c        **** uint8_t presetNumberToWrite = 0;
  29:main.c        **** uint8_t copedentNumberToWrite = 0;
  30:main.c        **** uint8_t sendMessageEnd = 0;
  31:main.c        **** 
  32:main.c        **** uint8_t sendSingleParamUpdate = 0;
  33:main.c        **** uint8_t singleParamToUpdateHigh = 0;
  34:main.c        **** uint8_t singleParamToUpdateLow = 0;
  35:main.c        **** uint8_t singleParamValueHigh = 0;
  36:main.c        **** uint8_t singleParamValueLow = 0;
  37:main.c        ****             
  38:main.c        **** uint8_t sendMappingChangeUpdate = 0;
  39:main.c        ****             
  40:main.c        **** enum presetArraySectionState
  41:main.c        **** {
  42:main.c        ****     presetName = 0,
  43:main.c        ****     macroNames = 1,
  44:main.c        ****     initialVals = 2,
  45:main.c        ****     mapCountNext = 3,
  46:main.c        ****     mapping = 4,
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 8


  47:main.c        ****     presetEnd = 5,
  48:main.c        **** };
  49:main.c        **** uint8_t presetArraySection = presetName;
  50:main.c        **** 
  51:main.c        **** uint16_t messageArraySendCount = 0;
  52:main.c        **** uint16_t messageArraySize = 0;
  53:main.c        **** 
  54:main.c        **** uint8_t sysexMessageInProgress = 0;
  55:main.c        **** 
  56:main.c        **** uint8_t bufCount = 0;
  57:main.c        **** volatile uint8_t sendingMessage = 0;
  58:main.c        **** volatile uint8_t sendKnobs = 0;
  59:main.c        **** uint32_t currentFloat = 0;
  60:main.c        **** uint32_t mapCount = 0;
  61:main.c        **** 
  62:main.c        **** uint16_t valsCount = 0;
  63:main.c        **** uint16_t mapCountExpectation = 0;
  64:main.c        **** uint16_t numMappings = 0;
  65:main.c        **** volatile uint8_t parseThatMF = 0;
  66:main.c        **** volatile float valCheck = 0.0f;
  67:main.c        **** volatile float testVal = 0.0f;
  68:main.c        **** 
  69:main.c        **** int numStrings = 10;
  70:main.c        **** /*
  71:main.c        **** #define TUNING_ARRAY_SIZE 258
  72:main.c        **** uint8_t tuningArray[TUNING_ARRAY_SIZE];
  73:main.c        **** */
  74:main.c        **** 
  75:main.c        **** volatile uint8 usbActivityCounter = 0u;
  76:main.c        **** uint8 midiMsg[4];
  77:main.c        **** uint8_t currentVBUS = 0;
  78:main.c        **** uint8_t prevVBUS = 0;
  79:main.c        **** volatile uint8_t USB_active = 0;
  80:main.c        **** volatile uint8_t USB_check_flag = 0;
  81:main.c        **** 
  82:main.c        **** uint8_t mappingArray[6];
  83:main.c        **** 
  84:main.c        **** uint8 inBuffer[myBufferSize];
  85:main.c        **** 
  86:main.c        **** uint8 myArray[myBufferSize];
  87:main.c        **** uint8 myInputArray[2];
  88:main.c        **** int32_t linearPotValue32Bit[2];
  89:main.c        **** uint8_t i = 0;
  90:main.c        **** uint8_t counter = 0;
  91:main.c        **** uint8_t returnedData[myBufferSize];
  92:main.c        **** int32_t temper;
  93:main.c        **** int previousButtons[11];
  94:main.c        **** int octave = 5;
  95:main.c        **** uint16_t angle[10];
  96:main.c        **** uint16_t prevAngle[10];
  97:main.c        **** 
  98:main.c        **** uint16_t ADC_values[4];
  99:main.c        **** uint16_t rawAngle = 0;
 100:main.c        **** uint16_t midiSent = 0;
 101:main.c        **** uint16_t midiOverflow = 0;
 102:main.c        **** 
 103:main.c        **** uint8_t macroKnobValues[8];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 9


 104:main.c        **** 
 105:main.c        **** uint8_t currentCopedent = 0;
 106:main.c        **** uint8_t necks[2] = {0,1};
 107:main.c        **** 
 108:main.c        **** void checkUSB_Vbus(void);
 109:main.c        **** void sendMIDIAllNotesOff(void);
 110:main.c        **** void sendMIDIPitchBend(int val, int channel);
 111:main.c        **** void firstCheckUSB_Vbus(void);
 112:main.c        **** void restartSystemCheck(void);
 113:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel);
 114:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel);
 115:main.c        **** CY_ISR_PROTO(SleepIsr_function);
 116:main.c        **** void noteEvent(int string);
 117:main.c        **** void I2C_reset(void);
 118:main.c        **** void CCEvent(int cc, int val);
 119:main.c        **** void DmaRxConfiguration(void);
 120:main.c        **** /* DMA Configuration for DMA_RX */
 121:main.c        **** #define DMA_RX_BYTES_PER_BURST      (1u)
 122:main.c        **** #define DMA_RX_REQUEST_PER_BURST    (1u)
 123:main.c        **** #define DMA_RX_SRC_BASE             (CYDEV_PERIPH_BASE)
 124:main.c        **** #define DMA_RX_DST_BASE             (CYDEV_SRAM_BASE)
 125:main.c        **** 
 126:main.c        **** void DmaTxConfiguration(void);
 127:main.c        **** 
 128:main.c        **** /* DMA Configuration for DMA_TX */
 129:main.c        **** #define DMA_TX_BYTES_PER_BURST      (1u)
 130:main.c        **** #define DMA_TX_REQUEST_PER_BURST    (1u)
 131:main.c        **** #define DMA_TX_SRC_BASE             (CYDEV_SRAM_BASE)
 132:main.c        **** #define DMA_TX_DST_BASE             (CYDEV_PERIPH_BASE)
 133:main.c        **** 
 134:main.c        **** #define PLUCK_BUFFER_SIZE                 (26u)
 135:main.c        **** #define BAR_BUFFER_SIZE                 (8u)
 136:main.c        **** #define STORE_TD_CFG_ONCMPLT        (1u)
 137:main.c        **** uint8 rx1Channel, rx2Channel __attribute__((aligned(32)));
 138:main.c        **** uint8 rx1TD[2], rx2TD[2]  __attribute__((aligned(32)));
 139:main.c        **** 
 140:main.c        **** volatile uint8 txChannel __attribute__((aligned(32)));
 141:main.c        **** volatile uint8 txTD __attribute__((aligned(32)));
 142:main.c        **** 
 143:main.c        **** volatile uint8 rx3Channel __attribute__((aligned(32)));
 144:main.c        **** volatile uint8 rx3TD __attribute__((aligned(32)));
 145:main.c        **** 
 146:main.c        **** 
 147:main.c        **** volatile uint8 rxBufferPluck[2][PLUCK_BUFFER_SIZE] __attribute__((aligned(32)));
 148:main.c        **** volatile uint8 rxBufferBar[2][BAR_BUFFER_SIZE] __attribute__((aligned(32)));
 149:main.c        **** 
 150:main.c        **** volatile uint16_t strings[12];
 151:main.c        **** volatile uint16_t prevStrings[12];
 152:main.c        **** volatile uint16_t bar[2];
 153:main.c        **** volatile uint16_t prevBar[2];
 154:main.c        **** volatile uint16_t maxStrings[12];
 155:main.c        **** volatile uint8_t amHere = 0;
 156:main.c        **** volatile uint8_t spiCounter = 0;
 157:main.c        **** volatile uint8_t newDataFlag = 0;
 158:main.c        **** int prevOctave = 0;
 159:main.c        **** uint8_t pluck_index = 0;
 160:main.c        **** volatile uint8_t amHere2 = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 10


 161:main.c        **** volatile uint8_t spiCounter2 = 0;
 162:main.c        **** volatile uint8_t newDataFlag2 = 0;
 163:main.c        **** volatile uint8_t currentPluckBuffer = 0;
 164:main.c        **** volatile uint8_t currentBarBuffer = 0;
 165:main.c        **** volatile uint8_t pluckErrorCount = 0;
 166:main.c        **** volatile uint16_t SPI1ErrorCount = 0;
 167:main.c        **** 
 168:main.c        **** 
 169:main.c        **** 
 170:main.c        **** volatile uint8_t inputData = 0;
 171:main.c        **** 
 172:main.c        **** 
 173:main.c        **** union breakFloat {
 174:main.c        ****  float f;
 175:main.c        ****  uint8_t b[4];  
 176:main.c        ****  uint32_t u32;
 177:main.c        **** };
 178:main.c        **** 
 179:main.c        **** 
 180:main.c        **** CY_ISR(spis_1_ss)
 181:main.c        **** {
 354              		.loc 1 181 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 8
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358 0000 90B5     		push	{r4, r7, lr}
 359              		.cfi_def_cfa_offset 12
 360              		.cfi_offset 4, -12
 361              		.cfi_offset 7, -8
 362              		.cfi_offset 14, -4
 363 0002 83B0     		sub	sp, sp, #12
 364              		.cfi_def_cfa_offset 24
 365 0004 00AF     		add	r7, sp, #0
 366              		.cfi_def_cfa_register 7
 182:main.c        ****     currentPluckBuffer = !currentPluckBuffer;
 367              		.loc 1 182 0
 368 0006 554B     		ldr	r3, .L5
 369 0008 1B78     		ldrb	r3, [r3]
 370 000a DBB2     		uxtb	r3, r3
 371 000c 002B     		cmp	r3, #0
 372 000e 0CBF     		ite	eq
 373 0010 0123     		moveq	r3, #1
 374 0012 0023     		movne	r3, #0
 375 0014 DBB2     		uxtb	r3, r3
 376 0016 1A46     		mov	r2, r3
 377 0018 504B     		ldr	r3, .L5
 378 001a 1A70     		strb	r2, [r3]
 183:main.c        **** 
 184:main.c        ****     if ((rxBufferPluck[!currentPluckBuffer][0] == 254) && (rxBufferPluck[!currentPluckBuffer][25] =
 379              		.loc 1 184 0
 380 001c 4F4B     		ldr	r3, .L5
 381 001e 1B78     		ldrb	r3, [r3]
 382 0020 DBB2     		uxtb	r3, r3
 383 0022 002B     		cmp	r3, #0
 384 0024 0CBF     		ite	eq
 385 0026 0123     		moveq	r3, #1
 386 0028 0023     		movne	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 11


 387 002a DBB2     		uxtb	r3, r3
 388 002c 1946     		mov	r1, r3
 389 002e 4C4A     		ldr	r2, .L5+4
 390 0030 1A23     		movs	r3, #26
 391 0032 03FB01F3 		mul	r3, r3, r1
 392 0036 1344     		add	r3, r3, r2
 393 0038 1B78     		ldrb	r3, [r3]
 394 003a DBB2     		uxtb	r3, r3
 395 003c FE2B     		cmp	r3, #254
 396 003e 4FD1     		bne	.L2
 397              		.loc 1 184 0 is_stmt 0 discriminator 1
 398 0040 464B     		ldr	r3, .L5
 399 0042 1B78     		ldrb	r3, [r3]
 400 0044 DBB2     		uxtb	r3, r3
 401 0046 002B     		cmp	r3, #0
 402 0048 0CBF     		ite	eq
 403 004a 0123     		moveq	r3, #1
 404 004c 0023     		movne	r3, #0
 405 004e DBB2     		uxtb	r3, r3
 406 0050 1946     		mov	r1, r3
 407 0052 434A     		ldr	r2, .L5+4
 408 0054 1A23     		movs	r3, #26
 409 0056 03FB01F3 		mul	r3, r3, r1
 410 005a 1344     		add	r3, r3, r2
 411 005c 1933     		adds	r3, r3, #25
 412 005e 1B78     		ldrb	r3, [r3]
 413 0060 DBB2     		uxtb	r3, r3
 414 0062 FD2B     		cmp	r3, #253
 415 0064 3CD1     		bne	.L2
 416              	.LBB2:
 185:main.c        ****     {
 186:main.c        ****         for (int i = 0 ; i < numStrings; i++)
 417              		.loc 1 186 0 is_stmt 1
 418 0066 0023     		movs	r3, #0
 419 0068 7B60     		str	r3, [r7, #4]
 420 006a 34E0     		b	.L3
 421              	.L4:
 187:main.c        ****         {
 188:main.c        ****             strings[i] = ((rxBufferPluck[!currentPluckBuffer][(i*2)+1] << 8) + rxBufferPluck[!curre
 422              		.loc 1 188 0 discriminator 3
 423 006c 3B4B     		ldr	r3, .L5
 424 006e 1B78     		ldrb	r3, [r3]
 425 0070 DBB2     		uxtb	r3, r3
 426 0072 002B     		cmp	r3, #0
 427 0074 0CBF     		ite	eq
 428 0076 0123     		moveq	r3, #1
 429 0078 0023     		movne	r3, #0
 430 007a DBB2     		uxtb	r3, r3
 431 007c 1846     		mov	r0, r3
 432 007e 7B68     		ldr	r3, [r7, #4]
 433 0080 5B00     		lsls	r3, r3, #1
 434 0082 0133     		adds	r3, r3, #1
 435 0084 3649     		ldr	r1, .L5+4
 436 0086 1A22     		movs	r2, #26
 437 0088 02FB00F2 		mul	r2, r2, r0
 438 008c 0A44     		add	r2, r2, r1
 439 008e 1344     		add	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 12


 440 0090 1B78     		ldrb	r3, [r3]
 441 0092 DBB2     		uxtb	r3, r3
 442 0094 9BB2     		uxth	r3, r3
 443 0096 1B02     		lsls	r3, r3, #8
 444 0098 9AB2     		uxth	r2, r3
 445 009a 304B     		ldr	r3, .L5
 446 009c 1B78     		ldrb	r3, [r3]
 447 009e DBB2     		uxtb	r3, r3
 448 00a0 002B     		cmp	r3, #0
 449 00a2 0CBF     		ite	eq
 450 00a4 0123     		moveq	r3, #1
 451 00a6 0023     		movne	r3, #0
 452 00a8 DBB2     		uxtb	r3, r3
 453 00aa 1C46     		mov	r4, r3
 454 00ac 7B68     		ldr	r3, [r7, #4]
 455 00ae 0133     		adds	r3, r3, #1
 456 00b0 5B00     		lsls	r3, r3, #1
 457 00b2 2B48     		ldr	r0, .L5+4
 458 00b4 1A21     		movs	r1, #26
 459 00b6 01FB04F1 		mul	r1, r1, r4
 460 00ba 0144     		add	r1, r1, r0
 461 00bc 0B44     		add	r3, r3, r1
 462 00be 1B78     		ldrb	r3, [r3]
 463 00c0 DBB2     		uxtb	r3, r3
 464 00c2 9BB2     		uxth	r3, r3
 465 00c4 1344     		add	r3, r3, r2
 466 00c6 99B2     		uxth	r1, r3
 467 00c8 264A     		ldr	r2, .L5+8
 468 00ca 7B68     		ldr	r3, [r7, #4]
 469 00cc 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 186:main.c        ****         {
 470              		.loc 1 186 0 discriminator 3
 471 00d0 7B68     		ldr	r3, [r7, #4]
 472 00d2 0133     		adds	r3, r3, #1
 473 00d4 7B60     		str	r3, [r7, #4]
 474              	.L3:
 186:main.c        ****         {
 475              		.loc 1 186 0 is_stmt 0 discriminator 1
 476 00d6 244B     		ldr	r3, .L5+12
 477 00d8 1B68     		ldr	r3, [r3]
 478 00da 7A68     		ldr	r2, [r7, #4]
 479 00dc 9A42     		cmp	r2, r3
 480 00de C5DB     		blt	.L4
 481              	.L2:
 482              	.LBE2:
 189:main.c        ****         }
 190:main.c        ****     }
 191:main.c        ****     SPIS_1_ClearRxBuffer();
 483              		.loc 1 191 0 is_stmt 1
 484 00e0 FFF7FEFF 		bl	SPIS_1_ClearRxBuffer
 192:main.c        ****     CyDmaClearPendingDrq(rx1Channel);
 485              		.loc 1 192 0
 486 00e4 214B     		ldr	r3, .L5+16
 487 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 488 00e8 1846     		mov	r0, r3
 489 00ea FFF7FEFF 		bl	CyDmaClearPendingDrq
 193:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 13


 194:main.c        ****     //set up the next DMA transaction
 195:main.c        **** 
 196:main.c        ****     CyDmaTdSetConfiguration(rx1TD[currentPluckBuffer], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DS
 490              		.loc 1 196 0
 491 00ee 1B4B     		ldr	r3, .L5
 492 00f0 1B78     		ldrb	r3, [r3]
 493 00f2 DBB2     		uxtb	r3, r3
 494 00f4 1A46     		mov	r2, r3
 495 00f6 1E4B     		ldr	r3, .L5+20
 496 00f8 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 497 00fa 0223     		movs	r3, #2
 498 00fc FE22     		movs	r2, #254
 499 00fe 1A21     		movs	r1, #26
 500 0100 FFF7FEFF 		bl	CyDmaTdSetConfiguration
 197:main.c        ****     CyDmaTdSetAddress(rx1TD[currentPluckBuffer], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rx
 501              		.loc 1 197 0
 502 0104 154B     		ldr	r3, .L5
 503 0106 1B78     		ldrb	r3, [r3]
 504 0108 DBB2     		uxtb	r3, r3
 505 010a 1A46     		mov	r2, r3
 506 010c 184B     		ldr	r3, .L5+20
 507 010e 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 508 0110 124B     		ldr	r3, .L5
 509 0112 1B78     		ldrb	r3, [r3]
 510 0114 DBB2     		uxtb	r3, r3
 511 0116 1A46     		mov	r2, r3
 512 0118 1A23     		movs	r3, #26
 513 011a 03FB02F3 		mul	r3, r3, r2
 514 011e 104A     		ldr	r2, .L5+4
 515 0120 1344     		add	r3, r3, r2
 516 0122 9BB2     		uxth	r3, r3
 517 0124 1A46     		mov	r2, r3
 518 0126 46F25451 		movw	r1, #25940
 519 012a FFF7FEFF 		bl	CyDmaTdSetAddress
 198:main.c        ****     CyDmaChSetInitialTd(rx1Channel, rx1TD[currentPluckBuffer]);
 520              		.loc 1 198 0
 521 012e 0F4B     		ldr	r3, .L5+16
 522 0130 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 523 0132 0A4B     		ldr	r3, .L5
 524 0134 1B78     		ldrb	r3, [r3]
 525 0136 DBB2     		uxtb	r3, r3
 526 0138 1946     		mov	r1, r3
 527 013a 0D4B     		ldr	r3, .L5+20
 528 013c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 529 013e 1946     		mov	r1, r3
 530 0140 1046     		mov	r0, r2
 531 0142 FFF7FEFF 		bl	CyDmaChSetInitialTd
 199:main.c        ****     CyDmaChEnable(rx1Channel, 1);
 532              		.loc 1 199 0
 533 0146 094B     		ldr	r3, .L5+16
 534 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 535 014a 0121     		movs	r1, #1
 536 014c 1846     		mov	r0, r3
 537 014e FFF7FEFF 		bl	CyDmaChEnable
 200:main.c        **** 
 201:main.c        **** }
 538              		.loc 1 201 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 14


 539 0152 00BF     		nop
 540 0154 0C37     		adds	r7, r7, #12
 541              		.cfi_def_cfa_offset 12
 542 0156 BD46     		mov	sp, r7
 543              		.cfi_def_cfa_register 13
 544              		@ sp needed
 545 0158 90BD     		pop	{r4, r7, pc}
 546              	.L6:
 547 015a 00BF     		.align	2
 548              	.L5:
 549 015c 00000000 		.word	currentPluckBuffer
 550 0160 00000000 		.word	rxBufferPluck
 551 0164 00000000 		.word	strings
 552 0168 00000000 		.word	numStrings
 553 016c 00000000 		.word	rx1Channel
 554 0170 00000000 		.word	rx1TD
 555              		.cfi_endproc
 556              	.LFE64:
 557              		.size	spis_1_ss, .-spis_1_ss
 558              		.global	spiAdjusted
 559              		.bss
 560              		.type	spiAdjusted, %object
 561              		.size	spiAdjusted, 1
 562              	spiAdjusted:
 563 0053 00       		.space	1
 564              		.global	mySpiCounter
 565              		.type	mySpiCounter, %object
 566              		.size	mySpiCounter, 1
 567              	mySpiCounter:
 568 0054 00       		.space	1
 569              		.global	offsetErrorCount
 570 0055 00       		.align	1
 571              		.type	offsetErrorCount, %object
 572              		.size	offsetErrorCount, 2
 573              	offsetErrorCount:
 574 0056 0000     		.space	2
 575              		.global	SPI2errorflag
 576              		.type	SPI2errorflag, %object
 577              		.size	SPI2errorflag, 1
 578              	SPI2errorflag:
 579 0058 00       		.space	1
 580              		.global	bar_index
 581 0059 000000   		.align	2
 582              		.type	bar_index, %object
 583              		.size	bar_index, 4
 584              	bar_index:
 585 005c 00000000 		.space	4
 586              		.comm	knobs,4,4
 587              		.comm	prevKnobs,4,4
 588              		.comm	knobs7bit,4,4
 589              		.comm	prevKnobs7bit,4,4
 590              		.global	SPI2started
 591              		.type	SPI2started, %object
 592              		.size	SPI2started, 1
 593              	SPI2started:
 594 0060 00       		.space	1
 595              		.global	whichMacro
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 15


 596              		.type	whichMacro, %object
 597              		.size	whichMacro, 1
 598              	whichMacro:
 599 0061 00       		.space	1
 600              		.section	.text.spis_2_ss,"ax",%progbits
 601              		.align	2
 602              		.global	spis_2_ss
 603              		.thumb
 604              		.thumb_func
 605              		.type	spis_2_ss, %function
 606              	spis_2_ss:
 607              	.LFB65:
 202:main.c        **** 
 203:main.c        **** 
 204:main.c        **** 
 205:main.c        **** uint8_t spiAdjusted = 0;
 206:main.c        **** uint8_t mySpiCounter = 0;
 207:main.c        **** volatile uint16_t offsetErrorCount = 0;
 208:main.c        **** volatile uint8_t SPI2errorflag = 0;
 209:main.c        **** volatile int bar_index = 0;
 210:main.c        **** uint8_t knobs[4];
 211:main.c        **** uint8_t prevKnobs[4];
 212:main.c        **** 
 213:main.c        **** uint8_t knobs7bit[4];
 214:main.c        **** uint8_t prevKnobs7bit[4];
 215:main.c        **** 
 216:main.c        **** volatile uint8_t SPI2started = 0;
 217:main.c        **** 
 218:main.c        **** uint8_t whichMacro = 0;
 219:main.c        **** 
 220:main.c        **** CY_ISR(spis_2_ss)
 221:main.c        **** {
 608              		.loc 1 221 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 1, uses_anonymous_args = 0
 612 0000 80B5     		push	{r7, lr}
 613              		.cfi_def_cfa_offset 8
 614              		.cfi_offset 7, -8
 615              		.cfi_offset 14, -4
 616 0002 00AF     		add	r7, sp, #0
 617              		.cfi_def_cfa_register 7
 222:main.c        **** 
 223:main.c        ****     currentBarBuffer = !currentBarBuffer;
 618              		.loc 1 223 0
 619 0004 214B     		ldr	r3, .L8
 620 0006 1B78     		ldrb	r3, [r3]
 621 0008 DBB2     		uxtb	r3, r3
 622 000a 002B     		cmp	r3, #0
 623 000c 0CBF     		ite	eq
 624 000e 0123     		moveq	r3, #1
 625 0010 0023     		movne	r3, #0
 626 0012 DBB2     		uxtb	r3, r3
 627 0014 1A46     		mov	r2, r3
 628 0016 1D4B     		ldr	r3, .L8
 629 0018 1A70     		strb	r2, [r3]
 224:main.c        ****     SPIS_2_ClearRxBuffer();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 16


 630              		.loc 1 224 0
 631 001a FFF7FEFF 		bl	SPIS_2_ClearRxBuffer
 225:main.c        ****     CyDmaClearPendingDrq(rx2Channel);
 632              		.loc 1 225 0
 633 001e 1C4B     		ldr	r3, .L8+4
 634 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 635 0022 1846     		mov	r0, r3
 636 0024 FFF7FEFF 		bl	CyDmaClearPendingDrq
 226:main.c        **** 
 227:main.c        ****     //set up the next DMA transaction
 228:main.c        ****     CyDmaTdSetConfiguration(rx2TD[currentBarBuffer], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_AD
 637              		.loc 1 228 0
 638 0028 184B     		ldr	r3, .L8
 639 002a 1B78     		ldrb	r3, [r3]
 640 002c DBB2     		uxtb	r3, r3
 641 002e 1A46     		mov	r2, r3
 642 0030 184B     		ldr	r3, .L8+8
 643 0032 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 644 0034 0623     		movs	r3, #6
 645 0036 FE22     		movs	r2, #254
 646 0038 0821     		movs	r1, #8
 647 003a FFF7FEFF 		bl	CyDmaTdSetConfiguration
 229:main.c        ****     CyDmaTdSetAddress(rx2TD[currentBarBuffer], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBu
 648              		.loc 1 229 0
 649 003e 134B     		ldr	r3, .L8
 650 0040 1B78     		ldrb	r3, [r3]
 651 0042 DBB2     		uxtb	r3, r3
 652 0044 1A46     		mov	r2, r3
 653 0046 134B     		ldr	r3, .L8+8
 654 0048 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 655 004a 104B     		ldr	r3, .L8
 656 004c 1B78     		ldrb	r3, [r3]
 657 004e DBB2     		uxtb	r3, r3
 658 0050 DB00     		lsls	r3, r3, #3
 659 0052 114A     		ldr	r2, .L8+12
 660 0054 1344     		add	r3, r3, r2
 661 0056 9BB2     		uxth	r3, r3
 662 0058 1A46     		mov	r2, r3
 663 005a 46F25751 		movw	r1, #25943
 664 005e FFF7FEFF 		bl	CyDmaTdSetAddress
 230:main.c        ****     CyDmaChSetInitialTd(rx2Channel, rx2TD[currentBarBuffer]);
 665              		.loc 1 230 0
 666 0062 0B4B     		ldr	r3, .L8+4
 667 0064 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 668 0066 094B     		ldr	r3, .L8
 669 0068 1B78     		ldrb	r3, [r3]
 670 006a DBB2     		uxtb	r3, r3
 671 006c 1946     		mov	r1, r3
 672 006e 094B     		ldr	r3, .L8+8
 673 0070 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 674 0072 1946     		mov	r1, r3
 675 0074 1046     		mov	r0, r2
 676 0076 FFF7FEFF 		bl	CyDmaChSetInitialTd
 231:main.c        ****     CyDmaChEnable(rx2Channel, 1);
 677              		.loc 1 231 0
 678 007a 054B     		ldr	r3, .L8+4
 679 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 17


 680 007e 0121     		movs	r1, #1
 681 0080 1846     		mov	r0, r3
 682 0082 FFF7FEFF 		bl	CyDmaChEnable
 232:main.c        **** }
 683              		.loc 1 232 0
 684 0086 00BF     		nop
 685 0088 80BD     		pop	{r7, pc}
 686              	.L9:
 687 008a 00BF     		.align	2
 688              	.L8:
 689 008c 00000000 		.word	currentBarBuffer
 690 0090 00000000 		.word	rx2Channel
 691 0094 00000000 		.word	rx2TD
 692 0098 00000000 		.word	rxBufferBar
 693              		.cfi_endproc
 694              	.LFE65:
 695              		.size	spis_2_ss, .-spis_2_ss
 696              		.bss
 697 0062 0000     		.align	2
 698              	eepromArray:
 699 0064 0000     		.space	2
 700              		.global	array
 701 0066 0000     		.align	2
 702              		.type	array, %object
 703              		.size	array, 2
 704              	array:
 705 0068 0000     		.space	2
 706              		.comm	eepromReturnValue,1,1
 707              		.global	Em_EEPROM_em_EepromStorage
 708              		.section	.rodata
 709              		.align	8
 710              		.type	Em_EEPROM_em_EepromStorage, %object
 711              		.size	Em_EEPROM_em_EepromStorage, 1024
 712              	Em_EEPROM_em_EepromStorage:
 713 0000 00000000 		.space	1024
 713      00000000 
 713      00000000 
 713      00000000 
 713      00000000 
 714              		.comm	eeprom_cnt,1,1
 715              		.comm	status,4,4
 716              		.comm	ptr,4,4
 717              		.global	barCount
 718              		.bss
 719 006a 0000     		.align	2
 720              		.type	barCount, %object
 721              		.size	barCount, 4
 722              	barCount:
 723 006c 00000000 		.space	4
 724              		.section	.text.Vbus_function,"ax",%progbits
 725              		.align	2
 726              		.global	Vbus_function
 727              		.thumb
 728              		.thumb_func
 729              		.type	Vbus_function, %function
 730              	Vbus_function:
 731              	.LFB66:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 18


 233:main.c        **** 
 234:main.c        **** 
 235:main.c        ****     static uint8 CYCODE eepromArray[]={ 0, 0 };
 236:main.c        ****                                             
 237:main.c        ****     uint8 array[] ={ 0, 0 };
 238:main.c        ****                                 
 239:main.c        ****     /*Return status for EEPROM and UART*/ 
 240:main.c        **** cy_en_em_eeprom_status_t eepromReturnValue;
 241:main.c        **** 
 242:main.c        **** 
 243:main.c        **** /* EEPROM storage in work flash, this is defined in Em_EEPROM.c*/
 244:main.c        **** #if defined (__ICCARM__)
 245:main.c        **** #pragma data_alignment = CY_FLASH_SIZEOF_ROW
 246:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE] = {0u};
 247:main.c        **** #else
 248:main.c        **** const uint8_t Em_EEPROM_em_EepromStorage[Em_EEPROM_PHYSICAL_SIZE]
 249:main.c        **** __ALIGNED(CY_FLASH_SIZEOF_ROW) = {0u};
 250:main.c        **** #endif /* defined (__ICCARM__) */
 251:main.c        **** 
 252:main.c        ****     uint8 eeprom_cnt;
 253:main.c        ****     cystatus status;
 254:main.c        ****     volatile const uint8 * ptr;
 255:main.c        **** volatile int barCount = 0;
 256:main.c        **** 
 257:main.c        **** //#define I2C_1_TIMEOUT_ENABLE 1u //overwrites the default in the i2c block
 258:main.c        ****     
 259:main.c        **** //this ISR should happen when a USB cable is plugged in or unplugged.
 260:main.c        **** 
 261:main.c        **** CY_ISR(Vbus_function)
 262:main.c        **** {
 732              		.loc 1 262 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 1, uses_anonymous_args = 0
 736 0000 80B5     		push	{r7, lr}
 737              		.cfi_def_cfa_offset 8
 738              		.cfi_offset 7, -8
 739              		.cfi_offset 14, -4
 740 0002 00AF     		add	r7, sp, #0
 741              		.cfi_def_cfa_register 7
 263:main.c        ****     //plug or unplug event
 264:main.c        ****     //check if eeprom has a flag saying you just restarted. If so, don't restart again
 265:main.c        ****     //otherwise, restart
 266:main.c        ****     my_Vbus_ISR_ClearPending();
 742              		.loc 1 266 0
 743 0004 FFF7FEFF 		bl	my_Vbus_ISR_ClearPending
 267:main.c        ****     vBusPin_ClearInterrupt();
 744              		.loc 1 267 0
 745 0008 FFF7FEFF 		bl	vBusPin_ClearInterrupt
 268:main.c        ****     restartSystemCheck();
 746              		.loc 1 268 0
 747 000c FFF7FEFF 		bl	restartSystemCheck
 269:main.c        **** 
 270:main.c        **** }
 748              		.loc 1 270 0
 749 0010 00BF     		nop
 750 0012 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 19


 751              		.cfi_endproc
 752              	.LFE66:
 753              		.size	Vbus_function, .-Vbus_function
 754              		.section	.text.restartSystemCheck,"ax",%progbits
 755              		.align	2
 756              		.global	restartSystemCheck
 757              		.thumb
 758              		.thumb_func
 759              		.type	restartSystemCheck, %function
 760              	restartSystemCheck:
 761              	.LFB67:
 271:main.c        **** 
 272:main.c        **** void restartSystemCheck()
 273:main.c        **** {
 762              		.loc 1 273 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 1, uses_anonymous_args = 0
 766 0000 80B5     		push	{r7, lr}
 767              		.cfi_def_cfa_offset 8
 768              		.cfi_offset 7, -8
 769              		.cfi_offset 14, -4
 770 0002 00AF     		add	r7, sp, #0
 771              		.cfi_def_cfa_register 7
 274:main.c        ****     eepromReturnValue = Em_EEPROM_Read(0u, eepromArray, 2u);
 772              		.loc 1 274 0
 773 0004 184B     		ldr	r3, .L15
 774 0006 0222     		movs	r2, #2
 775 0008 1849     		ldr	r1, .L15+4
 776 000a 0020     		movs	r0, #0
 777 000c FFF7FEFF 		bl	Cy_Em_EEPROM_Read
 778 0010 0346     		mov	r3, r0
 779 0012 1A46     		mov	r2, r3
 780 0014 164B     		ldr	r3, .L15+8
 781 0016 1A70     		strb	r2, [r3]
 275:main.c        ****     //only do the restart check if there is a USB cable plugged in (to avoid restarting while tryin
 276:main.c        ****     if (USB_VBusPresent() == 1)
 782              		.loc 1 276 0
 783 0018 FFF7FEFF 		bl	USB_VBusPresent
 784 001c 0346     		mov	r3, r0
 785 001e 012B     		cmp	r3, #1
 786 0020 20D1     		bne	.L14
 277:main.c        ****     {
 278:main.c        ****         if (*(volatile uint8 *) &eepromArray[0] == 1u)
 787              		.loc 1 278 0
 788 0022 124B     		ldr	r3, .L15+4
 789 0024 1B78     		ldrb	r3, [r3]
 790 0026 DBB2     		uxtb	r3, r3
 791 0028 012B     		cmp	r3, #1
 792 002a 0CD1     		bne	.L13
 279:main.c        ****         {
 280:main.c        ****             //a flag says we just restarted
 281:main.c        ****             //write a zero so it knows next time that it's OK to restart
 282:main.c        ****             array[0] = 0;
 793              		.loc 1 282 0
 794 002c 114B     		ldr	r3, .L15+12
 795 002e 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 20


 796 0030 1A70     		strb	r2, [r3]
 283:main.c        ****             Em_EEPROM_Write(0u,array,2u);     
 797              		.loc 1 283 0
 798 0032 0D4B     		ldr	r3, .L15
 799 0034 0222     		movs	r2, #2
 800 0036 0F49     		ldr	r1, .L15+12
 801 0038 0020     		movs	r0, #0
 802 003a FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 284:main.c        ****             USB_check_flag = 1;
 803              		.loc 1 284 0
 804 003e 0E4B     		ldr	r3, .L15+16
 805 0040 0122     		movs	r2, #1
 806 0042 1A70     		strb	r2, [r3]
 285:main.c        ****         }
 286:main.c        ****         else
 287:main.c        ****         {
 288:main.c        ****            //otherwise, we need to restart
 289:main.c        ****            array[0] = 1;
 290:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 291:main.c        ****             USB_Stop();
 292:main.c        ****             I2C_1_Stop();
 293:main.c        ****             CySoftwareReset();
 294:main.c        ****         }
 295:main.c        ****     }
 296:main.c        **** }
 807              		.loc 1 296 0
 808 0044 0EE0     		b	.L14
 809              	.L13:
 289:main.c        ****            Em_EEPROM_Write(0u,array,2u);  
 810              		.loc 1 289 0
 811 0046 0B4B     		ldr	r3, .L15+12
 812 0048 0122     		movs	r2, #1
 813 004a 1A70     		strb	r2, [r3]
 290:main.c        ****             USB_Stop();
 814              		.loc 1 290 0
 815 004c 064B     		ldr	r3, .L15
 816 004e 0222     		movs	r2, #2
 817 0050 0849     		ldr	r1, .L15+12
 818 0052 0020     		movs	r0, #0
 819 0054 FFF7FEFF 		bl	Cy_Em_EEPROM_Write
 291:main.c        ****             I2C_1_Stop();
 820              		.loc 1 291 0
 821 0058 FFF7FEFF 		bl	USB_Stop
 292:main.c        ****             CySoftwareReset();
 822              		.loc 1 292 0
 823 005c FFF7FEFF 		bl	I2C_1_Stop
 293:main.c        ****         }
 824              		.loc 1 293 0
 825 0060 FFF7FEFF 		bl	CySoftwareReset
 826              	.L14:
 827              		.loc 1 296 0
 828 0064 00BF     		nop
 829 0066 80BD     		pop	{r7, pc}
 830              	.L16:
 831              		.align	2
 832              	.L15:
 833 0068 00000000 		.word	Em_EEPROM_context
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 21


 834 006c 64000000 		.word	eepromArray
 835 0070 00000000 		.word	eepromReturnValue
 836 0074 00000000 		.word	array
 837 0078 00000000 		.word	USB_check_flag
 838              		.cfi_endproc
 839              	.LFE67:
 840              		.size	restartSystemCheck, .-restartSystemCheck
 841              		.global	__aeabi_fcmpgt
 842              		.global	__aeabi_fcmplt
 843              		.section	.text.LEAF_clip,"ax",%progbits
 844              		.align	2
 845              		.global	LEAF_clip
 846              		.thumb
 847              		.thumb_func
 848              		.type	LEAF_clip, %function
 849              	LEAF_clip:
 850              	.LFB68:
 297:main.c        ****     
 298:main.c        **** #define INV_440 0.0022727272727273f
 299:main.c        **** 
 300:main.c        **** float   LEAF_clip(float min, float val, float max)
 301:main.c        **** {
 851              		.loc 1 301 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 24
 854              		@ frame_needed = 1, uses_anonymous_args = 0
 855 0000 80B5     		push	{r7, lr}
 856              		.cfi_def_cfa_offset 8
 857              		.cfi_offset 7, -8
 858              		.cfi_offset 14, -4
 859 0002 86B0     		sub	sp, sp, #24
 860              		.cfi_def_cfa_offset 32
 861 0004 00AF     		add	r7, sp, #0
 862              		.cfi_def_cfa_register 7
 863 0006 F860     		str	r0, [r7, #12]	@ float
 864 0008 B960     		str	r1, [r7, #8]	@ float
 865 000a 7A60     		str	r2, [r7, #4]	@ float
 302:main.c        ****     float tempmin = min;
 866              		.loc 1 302 0
 867 000c FB68     		ldr	r3, [r7, #12]	@ float
 868 000e 7B61     		str	r3, [r7, #20]	@ float
 303:main.c        ****     float tempmax = max;
 869              		.loc 1 303 0
 870 0010 7B68     		ldr	r3, [r7, #4]	@ float
 871 0012 3B61     		str	r3, [r7, #16]	@ float
 304:main.c        ****     if (min > max)
 872              		.loc 1 304 0
 873 0014 7968     		ldr	r1, [r7, #4]	@ float
 874 0016 F868     		ldr	r0, [r7, #12]	@ float
 875 0018 FFF7FEFF 		bl	__aeabi_fcmpgt
 876 001c 0346     		mov	r3, r0
 877 001e 002B     		cmp	r3, #0
 878 0020 03D0     		beq	.L18
 305:main.c        ****     {
 306:main.c        ****         tempmin = max;
 879              		.loc 1 306 0
 880 0022 7B68     		ldr	r3, [r7, #4]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 22


 881 0024 7B61     		str	r3, [r7, #20]	@ float
 307:main.c        ****         tempmax = min;
 882              		.loc 1 307 0
 883 0026 FB68     		ldr	r3, [r7, #12]	@ float
 884 0028 3B61     		str	r3, [r7, #16]	@ float
 885              	.L18:
 308:main.c        ****     }
 309:main.c        ****     if (val < tempmin)
 886              		.loc 1 309 0
 887 002a 7969     		ldr	r1, [r7, #20]	@ float
 888 002c B868     		ldr	r0, [r7, #8]	@ float
 889 002e FFF7FEFF 		bl	__aeabi_fcmplt
 890 0032 0346     		mov	r3, r0
 891 0034 002B     		cmp	r3, #0
 892 0036 01D0     		beq	.L28
 310:main.c        ****     {
 311:main.c        ****         return tempmin;
 893              		.loc 1 311 0
 894 0038 7B69     		ldr	r3, [r7, #20]	@ float
 895 003a 09E0     		b	.L22
 896              	.L28:
 312:main.c        ****     }
 313:main.c        ****     else if (val > tempmax)
 897              		.loc 1 313 0
 898 003c 3969     		ldr	r1, [r7, #16]	@ float
 899 003e B868     		ldr	r0, [r7, #8]	@ float
 900 0040 FFF7FEFF 		bl	__aeabi_fcmpgt
 901 0044 0346     		mov	r3, r0
 902 0046 002B     		cmp	r3, #0
 903 0048 01D0     		beq	.L29
 314:main.c        ****     {
 315:main.c        ****         return tempmax;
 904              		.loc 1 315 0
 905 004a 3B69     		ldr	r3, [r7, #16]	@ float
 906 004c 00E0     		b	.L22
 907              	.L29:
 316:main.c        ****     }
 317:main.c        ****     else
 318:main.c        ****     {
 319:main.c        ****         return val;
 908              		.loc 1 319 0
 909 004e BB68     		ldr	r3, [r7, #8]	@ float
 910              	.L22:
 320:main.c        ****     }
 321:main.c        **** }
 911              		.loc 1 321 0
 912 0050 1846     		mov	r0, r3
 913 0052 1837     		adds	r7, r7, #24
 914              		.cfi_def_cfa_offset 8
 915 0054 BD46     		mov	sp, r7
 916              		.cfi_def_cfa_register 13
 917              		@ sp needed
 918 0056 80BD     		pop	{r7, pc}
 919              		.cfi_endproc
 920              	.LFE68:
 921              		.size	LEAF_clip, .-LEAF_clip
 922              		.global	__aeabi_fcmple
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 23


 923              		.global	__aeabi_fmul
 924              		.section	.text.mtof,"ax",%progbits
 925              		.align	2
 926              		.global	mtof
 927              		.thumb
 928              		.thumb_func
 929              		.type	mtof, %function
 930              	mtof:
 931              	.LFB69:
 322:main.c        **** float mtof(float f)
 323:main.c        **** {
 932              		.loc 1 323 0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 8
 935              		@ frame_needed = 1, uses_anonymous_args = 0
 936 0000 80B5     		push	{r7, lr}
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 7, -8
 939              		.cfi_offset 14, -4
 940 0002 82B0     		sub	sp, sp, #8
 941              		.cfi_def_cfa_offset 16
 942 0004 00AF     		add	r7, sp, #0
 943              		.cfi_def_cfa_register 7
 944 0006 7860     		str	r0, [r7, #4]	@ float
 324:main.c        ****     if (f <= -1500.0f) return(0);
 945              		.loc 1 324 0
 946 0008 1349     		ldr	r1, .L40
 947 000a 7868     		ldr	r0, [r7, #4]	@ float
 948 000c FFF7FEFF 		bl	__aeabi_fcmple
 949 0010 0346     		mov	r3, r0
 950 0012 002B     		cmp	r3, #0
 951 0014 02D0     		beq	.L38
 952              		.loc 1 324 0 is_stmt 0 discriminator 1
 953 0016 4FF00003 		mov	r3, #0
 954 001a 19E0     		b	.L33
 955              	.L38:
 325:main.c        ****     else if (f > 1499.0f) return(mtof(1499.0f));
 956              		.loc 1 325 0 is_stmt 1
 957 001c 0F49     		ldr	r1, .L40+4
 958 001e 7868     		ldr	r0, [r7, #4]	@ float
 959 0020 FFF7FEFF 		bl	__aeabi_fcmpgt
 960 0024 0346     		mov	r3, r0
 961 0026 002B     		cmp	r3, #0
 962 0028 04D0     		beq	.L39
 963              		.loc 1 325 0 is_stmt 0 discriminator 1
 964 002a 0C48     		ldr	r0, .L40+4
 965 002c FFF7FEFF 		bl	mtof
 966 0030 0346     		mov	r3, r0
 967 0032 0DE0     		b	.L33
 968              	.L39:
 326:main.c        ****     else return (8.17579891564f * expf(0.0577622650f * f));
 969              		.loc 1 326 0 is_stmt 1
 970 0034 0A49     		ldr	r1, .L40+8
 971 0036 7868     		ldr	r0, [r7, #4]	@ float
 972 0038 FFF7FEFF 		bl	__aeabi_fmul
 973 003c 0346     		mov	r3, r0
 974 003e 1846     		mov	r0, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 24


 975 0040 FFF7FEFF 		bl	expf
 976 0044 0346     		mov	r3, r0
 977 0046 0749     		ldr	r1, .L40+12
 978 0048 1846     		mov	r0, r3
 979 004a FFF7FEFF 		bl	__aeabi_fmul
 980 004e 0346     		mov	r3, r0
 981              	.L33:
 327:main.c        **** }
 982              		.loc 1 327 0
 983 0050 1846     		mov	r0, r3
 984 0052 0837     		adds	r7, r7, #8
 985              		.cfi_def_cfa_offset 8
 986 0054 BD46     		mov	sp, r7
 987              		.cfi_def_cfa_register 13
 988              		@ sp needed
 989 0056 80BD     		pop	{r7, pc}
 990              	.L41:
 991              		.align	2
 992              	.L40:
 993 0058 0080BBC4 		.word	-994344960
 994 005c 0060BB44 		.word	1153130496
 995 0060 20986C3D 		.word	1030527008
 996 0064 13D00241 		.word	1090703379
 997              		.cfi_endproc
 998              	.LFE69:
 999              		.size	mtof, .-mtof
 1000              		.section	.text.ftom,"ax",%progbits
 1001              		.align	2
 1002              		.global	ftom
 1003              		.thumb
 1004              		.thumb_func
 1005              		.type	ftom, %function
 1006              	ftom:
 1007              	.LFB70:
 328:main.c        **** 
 329:main.c        **** float ftom(float f)
 330:main.c        **** {
 1008              		.loc 1 330 0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 8
 1011              		@ frame_needed = 1, uses_anonymous_args = 0
 1012 0000 80B5     		push	{r7, lr}
 1013              		.cfi_def_cfa_offset 8
 1014              		.cfi_offset 7, -8
 1015              		.cfi_offset 14, -4
 1016 0002 82B0     		sub	sp, sp, #8
 1017              		.cfi_def_cfa_offset 16
 1018 0004 00AF     		add	r7, sp, #0
 1019              		.cfi_def_cfa_register 7
 1020 0006 7860     		str	r0, [r7, #4]	@ float
 331:main.c        ****     return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 1021              		.loc 1 331 0
 1022 0008 4FF00001 		mov	r1, #0
 1023 000c 7868     		ldr	r0, [r7, #4]	@ float
 1024 000e FFF7FEFF 		bl	__aeabi_fcmpgt
 1025 0012 0346     		mov	r3, r0
 1026 0014 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 25


 1027 0016 0ED0     		beq	.L48
 1028              		.loc 1 331 0 is_stmt 0 discriminator 1
 1029 0018 0949     		ldr	r1, .L49
 1030 001a 7868     		ldr	r0, [r7, #4]	@ float
 1031 001c FFF7FEFF 		bl	__aeabi_fmul
 1032 0020 0346     		mov	r3, r0
 1033 0022 1846     		mov	r0, r3
 1034 0024 FFF7FEFF 		bl	logf
 1035 0028 0346     		mov	r3, r0
 1036 002a 0649     		ldr	r1, .L49+4
 1037 002c 1846     		mov	r0, r3
 1038 002e FFF7FEFF 		bl	__aeabi_fmul
 1039 0032 0346     		mov	r3, r0
 1040 0034 00E0     		b	.L46
 1041              	.L48:
 1042              		.loc 1 331 0 discriminator 2
 1043 0036 044B     		ldr	r3, .L49+8
 1044              	.L46:
 332:main.c        **** }
 1045              		.loc 1 332 0 is_stmt 1 discriminator 5
 1046 0038 1846     		mov	r0, r3
 1047 003a 0837     		adds	r7, r7, #8
 1048              		.cfi_def_cfa_offset 8
 1049 003c BD46     		mov	sp, r7
 1050              		.cfi_def_cfa_register 13
 1051              		@ sp needed
 1052 003e 80BD     		pop	{r7, pc}
 1053              	.L50:
 1054              		.align	2
 1055              	.L49:
 1056 0040 D27EFA3D 		.word	1039826642
 1057 0044 AC7F8A41 		.word	1099595692
 1058 0048 0080BBC4 		.word	-994344960
 1059              		.cfi_endproc
 1060              	.LFE70:
 1061              		.size	ftom, .-ftom
 1062              		.global	__aeabi_fsub
 1063              		.global	__aeabi_fadd
 1064              		.section	.text.LEAF_interpolation_linear,"ax",%progbits
 1065              		.align	2
 1066              		.global	LEAF_interpolation_linear
 1067              		.thumb
 1068              		.thumb_func
 1069              		.type	LEAF_interpolation_linear, %function
 1070              	LEAF_interpolation_linear:
 1071              	.LFB71:
 333:main.c        **** 
 334:main.c        **** // alpha, [0.0, 1.0]
 335:main.c        **** float LEAF_interpolation_linear (float A, float B, float alpha)
 336:main.c        **** {
 1072              		.loc 1 336 0
 1073              		.cfi_startproc
 1074              		@ args = 0, pretend = 0, frame = 24
 1075              		@ frame_needed = 1, uses_anonymous_args = 0
 1076 0000 80B5     		push	{r7, lr}
 1077              		.cfi_def_cfa_offset 8
 1078              		.cfi_offset 7, -8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 26


 1079              		.cfi_offset 14, -4
 1080 0002 86B0     		sub	sp, sp, #24
 1081              		.cfi_def_cfa_offset 32
 1082 0004 00AF     		add	r7, sp, #0
 1083              		.cfi_def_cfa_register 7
 1084 0006 F860     		str	r0, [r7, #12]	@ float
 1085 0008 B960     		str	r1, [r7, #8]	@ float
 1086 000a 7A60     		str	r2, [r7, #4]	@ float
 337:main.c        ****     float omAlpha = 1.0f - alpha;
 1087              		.loc 1 337 0
 1088 000c 7968     		ldr	r1, [r7, #4]	@ float
 1089 000e 4FF07E50 		mov	r0, #1065353216
 1090 0012 FFF7FEFF 		bl	__aeabi_fsub
 1091 0016 0346     		mov	r3, r0
 1092 0018 7B61     		str	r3, [r7, #20]	@ float
 338:main.c        ****     
 339:main.c        ****     // First 1/2 of interpolation
 340:main.c        ****     float out = A * omAlpha;
 1093              		.loc 1 340 0
 1094 001a 7969     		ldr	r1, [r7, #20]	@ float
 1095 001c F868     		ldr	r0, [r7, #12]	@ float
 1096 001e FFF7FEFF 		bl	__aeabi_fmul
 1097 0022 0346     		mov	r3, r0
 1098 0024 3B61     		str	r3, [r7, #16]	@ float
 341:main.c        ****     
 342:main.c        ****     out += B * alpha;
 1099              		.loc 1 342 0
 1100 0026 7968     		ldr	r1, [r7, #4]	@ float
 1101 0028 B868     		ldr	r0, [r7, #8]	@ float
 1102 002a FFF7FEFF 		bl	__aeabi_fmul
 1103 002e 0346     		mov	r3, r0
 1104 0030 1946     		mov	r1, r3
 1105 0032 3869     		ldr	r0, [r7, #16]	@ float
 1106 0034 FFF7FEFF 		bl	__aeabi_fadd
 1107 0038 0346     		mov	r3, r0
 1108 003a 3B61     		str	r3, [r7, #16]	@ float
 343:main.c        ****     
 344:main.c        ****     return out;
 1109              		.loc 1 344 0
 1110 003c 3B69     		ldr	r3, [r7, #16]	@ float
 345:main.c        **** }
 1111              		.loc 1 345 0
 1112 003e 1846     		mov	r0, r3
 1113 0040 1837     		adds	r7, r7, #24
 1114              		.cfi_def_cfa_offset 8
 1115 0042 BD46     		mov	sp, r7
 1116              		.cfi_def_cfa_register 13
 1117              		@ sp needed
 1118 0044 80BD     		pop	{r7, pc}
 1119              		.cfi_endproc
 1120              	.LFE71:
 1121              		.size	LEAF_interpolation_linear, .-LEAF_interpolation_linear
 1122              		.comm	I2Cbuff1,256,4
 1123              		.comm	I2Cbuff2,16,4
 1124              		.global	send_it
 1125 0046 00BF     		.bss
 1126              		.type	send_it, %object
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 27


 1127              		.size	send_it, 1
 1128              	send_it:
 1129 0070 00       		.space	1
 1130              		.global	mux_states
 1131              		.data
 1132 000a 0000     		.align	2
 1133              		.type	mux_states, %object
 1134              		.size	mux_states, 24
 1135              	mux_states:
 1136 000c 05       		.byte	5
 1137 000d 00       		.byte	0
 1138 000e 05       		.byte	5
 1139 000f 01       		.byte	1
 1140 0010 05       		.byte	5
 1141 0011 02       		.byte	2
 1142 0012 05       		.byte	5
 1143 0013 03       		.byte	3
 1144 0014 05       		.byte	5
 1145 0015 04       		.byte	4
 1146 0016 00       		.byte	0
 1147 0017 00       		.byte	0
 1148 0018 01       		.byte	1
 1149 0019 00       		.byte	0
 1150 001a 03       		.byte	3
 1151 001b 00       		.byte	0
 1152 001c 04       		.byte	4
 1153 001d 00       		.byte	0
 1154 001e 02       		.byte	2
 1155 001f 00       		.byte	0
 1156 0020 05       		.byte	5
 1157 0021 05       		.byte	5
 1158 0022 06       		.byte	6
 1159 0023 00       		.byte	0
 1160              		.global	i2c_skipped
 1161              		.bss
 1162 0071 000000   		.align	2
 1163              		.type	i2c_skipped, %object
 1164              		.size	i2c_skipped, 12
 1165              	i2c_skipped:
 1166 0074 00000000 		.space	12
 1166      00000000 
 1166      00000000 
 1167              		.global	pedals_low
 1168              		.data
 1169              		.align	2
 1170              		.type	pedals_low, %object
 1171              		.size	pedals_low, 20
 1172              	pedals_low:
 1173 0024 830A     		.short	2691
 1174 0026 0109     		.short	2305
 1175 0028 9909     		.short	2457
 1176 002a 0E02     		.short	526
 1177 002c 9A0E     		.short	3738
 1178 002e 0309     		.short	2307
 1179 0030 C60B     		.short	3014
 1180 0032 8E08     		.short	2190
 1181 0034 E90A     		.short	2793
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 28


 1182 0036 2605     		.short	1318
 1183              		.global	pedals_high
 1184              		.align	2
 1185              		.type	pedals_high, %object
 1186              		.size	pedals_high, 20
 1187              	pedals_high:
 1188 0038 ED0A     		.short	2797
 1189 003a 6509     		.short	2405
 1190 003c 140A     		.short	2580
 1191 003e 8702     		.short	647
 1192 0040 0E0F     		.short	3854
 1193 0042 9D09     		.short	2461
 1194 0044 450C     		.short	3141
 1195 0046 3109     		.short	2353
 1196 0048 760B     		.short	2934
 1197 004a E005     		.short	1504
 1198              		.global	deadzone
 1199              		.align	1
 1200              		.type	deadzone, %object
 1201              		.size	deadzone, 2
 1202              	deadzone:
 1203 004c 9600     		.short	150
 1204              		.global	volumePedal
 1205              		.align	1
 1206              		.type	volumePedal, %object
 1207              		.size	volumePedal, 2
 1208              	volumePedal:
 1209 004e FF0F     		.short	4095
 1210              		.comm	processed_pedals,20,4
 1211              		.comm	prev_processed_pedals,20,4
 1212              		.comm	pedals8bit,10,4
 1213              		.comm	pedals7bit,10,4
 1214              		.comm	prevPedals7bit,10,4
 1215              		.comm	prev_processed_volumePedal,2,2
 1216              		.comm	processed_volumePedal,2,2
 1217              		.global	fretMeasurements
 1218              		.align	2
 1219              		.type	fretMeasurements, %object
 1220              		.size	fretMeasurements, 64
 1221              	fretMeasurements:
 1222 0050 001E7547 		.word	1198857728
 1223 0054 00A07047 		.word	1198563328
 1224 0058 0052F846 		.word	1190679040
 1225 005c 00000000 		.word	0
 1226 0060 00B01A47 		.word	1192931328
 1227 0064 001C2247 		.word	1193417728
 1228 0068 00507546 		.word	1182093312
 1229 006c 00000000 		.word	0
 1230 0070 0000D746 		.word	1188495360
 1231 0074 00F0EB46 		.word	1189867520
 1232 0078 00280446 		.word	1174677504
 1233 007c 00000000 		.word	0
 1234 0080 00481446 		.word	1175734272
 1235 0084 00805446 		.word	1179942912
 1236 0088 00202745 		.word	1160192000
 1237 008c 00000000 		.word	0
 1238              		.global	currentPresetSelection
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 29


 1239              		.bss
 1240              		.align	2
 1241              		.type	currentPresetSelection, %object
 1242              		.size	currentPresetSelection, 4
 1243              	currentPresetSelection:
 1244 0080 00000000 		.space	4
 1245              		.comm	presetNamesArray,896,4
 1246              		.global	presetNumberToLoad
 1247              		.type	presetNumberToLoad, %object
 1248              		.size	presetNumberToLoad, 1
 1249              	presetNumberToLoad:
 1250 0084 00       		.space	1
 1251              		.global	presetLoadedResponse
 1252              		.data
 1253              		.align	2
 1254              		.type	presetLoadedResponse, %object
 1255              		.size	presetLoadedResponse, 2
 1256              	presetLoadedResponse:
 1257 0090 FF       		.byte	-1
 1258 0091 00       		.byte	0
 1259              		.comm	macroNamesArray,7168,4
 1260              		.global	fretScaling
 1261 0092 0000     		.align	2
 1262              		.type	fretScaling, %object
 1263              		.size	fretScaling, 16
 1264              	fretScaling:
 1265 0094 0000803F 		.word	1065353216
 1266 0098 ABAA2A3F 		.word	1059760811
 1267 009c 0000003F 		.word	1056964608
 1268 00a0 0000803E 		.word	1048576000
 1269              		.comm	pedalRatios,40,4
 1270              		.global	last_mux
 1271              		.type	last_mux, %object
 1272              		.size	last_mux, 1
 1273              	last_mux:
 1274 00a4 01       		.byte	1
 1275              		.global	main_counter
 1276              		.bss
 1277              		.type	main_counter, %object
 1278              		.size	main_counter, 1
 1279              	main_counter:
 1280 0085 00       		.space	1
 1281              		.global	neck
 1282              		.type	neck, %object
 1283              		.size	neck, 1
 1284              	neck:
 1285 0086 00       		.space	1
 1286              		.global	dualSlider
 1287              		.type	dualSlider, %object
 1288              		.size	dualSlider, 1
 1289              	dualSlider:
 1290 0087 00       		.space	1
 1291              		.global	enterUp
 1292              		.data
 1293              		.type	enterUp, %object
 1294              		.size	enterUp, 1
 1295              	enterUp:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 30


 1296 00a5 01       		.byte	1
 1297              		.global	voice
 1298              		.bss
 1299              		.type	voice, %object
 1300              		.size	voice, 1
 1301              	voice:
 1302 0088 00       		.space	1
 1303              		.global	editUp
 1304              		.data
 1305              		.type	editUp, %object
 1306              		.size	editUp, 1
 1307              	editUp:
 1308 00a6 01       		.byte	1
 1309              		.global	oct1Up
 1310              		.type	oct1Up, %object
 1311              		.size	oct1Up, 1
 1312              	oct1Up:
 1313 00a7 01       		.byte	1
 1314              		.global	oct4Up
 1315              		.type	oct4Up, %object
 1316              		.size	oct4Up, 1
 1317              	oct4Up:
 1318 00a8 01       		.byte	1
 1319              		.comm	encoderVal,16,4
 1320              		.global	encoderNum
 1321              		.bss
 1322 0089 000000   		.align	2
 1323              		.type	encoderNum, %object
 1324              		.size	encoderNum, 4
 1325              	encoderNum:
 1326 008c 00000000 		.space	4
 1327              		.global	button1Up
 1328              		.type	button1Up, %object
 1329              		.size	button1Up, 1
 1330              	button1Up:
 1331 0090 00       		.space	1
 1332              		.global	button2Up
 1333              		.type	button2Up, %object
 1334              		.size	button2Up, 1
 1335              	button2Up:
 1336 0091 00       		.space	1
 1337              		.global	button3Up
 1338              		.type	button3Up, %object
 1339              		.size	button3Up, 1
 1340              	button3Up:
 1341 0092 00       		.space	1
 1342              		.global	button4Up
 1343              		.type	button4Up, %object
 1344              		.size	button4Up, 1
 1345              	button4Up:
 1346 0093 00       		.space	1
 1347              		.global	patchNum
 1348              		.type	patchNum, %object
 1349              		.size	patchNum, 1
 1350              	patchNum:
 1351 0094 00       		.space	1
 1352              		.comm	copedent,3696,4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 31


 1353              		.comm	copedentNamesArray,98,4
 1354              		.comm	prevStringPitchBend,48,4
 1355              		.comm	pedals,480,4
 1356              		.global	pedal_cc_assignments
 1357              		.data
 1358 00a9 000000   		.align	2
 1359              		.type	pedal_cc_assignments, %object
 1360              		.size	pedal_cc_assignments, 10
 1361              	pedal_cc_assignments:
 1362 00ac 00       		.byte	0
 1363 00ad 01       		.byte	1
 1364 00ae 02       		.byte	2
 1365 00af 03       		.byte	3
 1366 00b0 04       		.byte	4
 1367 00b1 08       		.byte	8
 1368 00b2 09       		.byte	9
 1369 00b3 07       		.byte	7
 1370 00b4 06       		.byte	6
 1371 00b5 05       		.byte	5
 1372              		.comm	openStringFrequencies,48,4
 1373              		.comm	stringMappedPositions,48,4
 1374              		.comm	invStringMappedPositions,48,4
 1375              		.comm	stringFrequencies,48,4
 1376              		.comm	stringOctave,48,4
 1377              		.comm	stringPitch,48,4
 1378              		.comm	stringMIDI,48,4
 1379              		.comm	openStringMIDI_Int,48,4
 1380              		.global	OLEDcount
 1381              		.bss
 1382 0095 000000   		.align	2
 1383              		.type	OLEDcount, %object
 1384              		.size	OLEDcount, 4
 1385              	OLEDcount:
 1386 0098 00000000 		.space	4
 1387              		.global	mainOLEDWaitingToSend
 1388              		.align	2
 1389              		.type	mainOLEDWaitingToSend, %object
 1390              		.size	mainOLEDWaitingToSend, 4
 1391              	mainOLEDWaitingToSend:
 1392 009c 00000000 		.space	4
 1393              		.global	macroOLEDWaitingToSend
 1394              		.align	2
 1395              		.type	macroOLEDWaitingToSend, %object
 1396              		.size	macroOLEDWaitingToSend, 4
 1397              	macroOLEDWaitingToSend:
 1398 00a0 00000000 		.space	4
 1399              		.comm	presetAlreadyDisplayed,256,4
 1400              		.global	pedals_float
 1401              		.align	2
 1402              		.type	pedals_float, %object
 1403              		.size	pedals_float, 40
 1404              	pedals_float:
 1405 00a4 00000000 		.space	40
 1405      00000000 
 1405      00000000 
 1405      00000000 
 1405      00000000 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 32


 1406              		.global	__aeabi_fdiv
 1407              		.section	.text.map,"ax",%progbits
 1408              		.align	2
 1409              		.global	map
 1410              		.thumb
 1411              		.thumb_func
 1412              		.type	map, %function
 1413              	map:
 1414              	.LFB72:
 346:main.c        **** 
 347:main.c        **** 
 348:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode);
 349:main.c        **** uint8 I2C_MasterReadBlocking(uint8 i2CAddr, uint8 nbytes, uint8_t mode);
 350:main.c        **** void USB_service(void);
 351:main.c        **** 
 352:main.c        **** volatile uint8_t I2Cbuff1[256];
 353:main.c        **** volatile uint8_t I2Cbuff2[16];
 354:main.c        **** volatile uint8_t send_it = 0;
 355:main.c        **** 
 356:main.c        **** 
 357:main.c        **** //first mux, 0x70 is first element of array. 
 358:main.c        **** //If sent to output 5 of this first mux, signal goes to 
 359:main.c        **** // the ethernet cable, and a second mux is in the foot pedal at the end of that cable. This channel
 360:main.c        **** //so the order of I2C communication is ( foot pedals 1-5, knee levers 1-5, volume pedal, OLED displ
 361:main.c        **** uint8_t mux_states[12][2] = {{5,0}, {5,1}, {5,2}, {5,3}, {5,4}, {0, 0}, {1, 0}, {3, 0}, {4, 0}, {2,
 362:main.c        **** uint8_t i2c_skipped[12] = {0,0,0,0,0,0,0,0,0,0,0,0}; //so that pedals and levers can be marked as s
 363:main.c        **** uint16_t pedals_low[10] = {2691, 2305, 2457, 526, 3738, 2307, 3014, 2190, 2793, 1318};
 364:main.c        **** uint16_t pedals_high[10] = {2797, 2405, 2580, 647, 3854, 2461, 3141, 2353, 2934, 1504};
 365:main.c        **** uint16_t deadzone = 150;
 366:main.c        **** uint16_t volumePedal = 4095;
 367:main.c        **** uint16_t processed_pedals[10];
 368:main.c        **** uint16_t prev_processed_pedals[10];
 369:main.c        **** uint8_t pedals8bit[10];
 370:main.c        **** uint8_t pedals7bit[10];
 371:main.c        **** uint8_t prevPedals7bit[10];
 372:main.c        **** int16_t prev_processed_volumePedal;
 373:main.c        **** int16_t processed_volumePedal;
 374:main.c        **** 
 375:main.c        **** 
 376:main.c        **** float fretMeasurements[4][4] ={
 377:main.c        **** 
 378:main.c        **** 		{62750.0f, 61600.0f, 31785.0f, 0.0f },
 379:main.c        **** 
 380:main.c        **** 		{39600.0f, 41500.0f, 15700.0f, 0.0f},
 381:main.c        **** 
 382:main.c        **** 		{27520.0f, 30200.0f, 8458.0f, 0.0f},
 383:main.c        **** 
 384:main.c        **** 		{9490.0f, 13600.0f, 2674.0f, 0.0f}
 385:main.c        **** 
 386:main.c        **** 	};
 387:main.c        **** #define NUM_MACROS 8
 388:main.c        **** #define MAX_NUM_PRESETS 64
 389:main.c        **** int currentPresetSelection = 0;
 390:main.c        **** uint8_t presetNamesArray[MAX_NUM_PRESETS][NAME_LENGTH_IN_BYTES];
 391:main.c        **** uint8_t presetNumberToLoad = 0;
 392:main.c        **** uint8_t presetLoadedResponse[2] = {255, 0};
 393:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 33


 394:main.c        **** 
 395:main.c        **** uint8_t macroNamesArray[MAX_NUM_PRESETS][NUM_MACROS][NAME_LENGTH_IN_BYTES];
 396:main.c        **** 
 397:main.c        **** 
 398:main.c        **** 
 399:main.c        **** float fretScaling[4] = {1.0f, 0.6666666666666f, 0.5f, 0.25f};
 400:main.c        **** 
 401:main.c        **** 
 402:main.c        **** #define MAX_ENCODERS 16
 403:main.c        **** 
 404:main.c        **** float pedalRatios[10];
 405:main.c        **** uint8_t last_mux = 1;
 406:main.c        **** volatile uint8_t main_counter = 0;
 407:main.c        **** uint8_t neck = 0;
 408:main.c        **** uint8_t dualSlider = 0;
 409:main.c        **** uint8_t enterUp = 1;
 410:main.c        **** uint8_t voice = 0;
 411:main.c        **** uint8_t editUp = 1;
 412:main.c        **** uint8_t oct1Up = 1;
 413:main.c        **** uint8_t oct4Up = 1;
 414:main.c        **** 
 415:main.c        **** volatile uint8_t encoderVal[MAX_ENCODERS];
 416:main.c        **** int encoderNum = 0;
 417:main.c        **** uint8_t button1Up = 0;
 418:main.c        **** uint8_t button2Up = 0;
 419:main.c        **** uint8_t button3Up = 0;
 420:main.c        **** uint8_t button4Up = 0;
 421:main.c        **** uint8_t patchNum = 0;
 422:main.c        **** #define NUM_STRINGS 12
 423:main.c        **** #define NUM_PEDALS 10
 424:main.c        **** 
 425:main.c        **** 
 426:main.c        **** #define MAX_NUM_COPEDENTS 7
 427:main.c        **** float copedent[MAX_NUM_COPEDENTS][11][NUM_STRINGS];
 428:main.c        **** uint8_t copedentNamesArray[MAX_NUM_COPEDENTS][NAME_LENGTH_IN_BYTES];
 429:main.c        **** 
 430:main.c        **** float prevStringPitchBend[NUM_STRINGS];
 431:main.c        **** 
 432:main.c        **** float pedals[NUM_PEDALS][NUM_STRINGS];
 433:main.c        **** 
 434:main.c        **** uint8_t pedal_cc_assignments[NUM_PEDALS] = {0, 1, 2, 3, 4, 8, 9, 7, 6, 5};
 435:main.c        **** float openStringFrequencies[NUM_STRINGS];
 436:main.c        **** float stringMappedPositions[NUM_STRINGS];
 437:main.c        **** float invStringMappedPositions[NUM_STRINGS];
 438:main.c        **** float stringFrequencies[NUM_STRINGS];
 439:main.c        **** float stringOctave[NUM_STRINGS];
 440:main.c        **** float stringPitch[NUM_STRINGS];
 441:main.c        **** float stringMIDI[NUM_STRINGS];
 442:main.c        **** int openStringMIDI_Int[NUM_STRINGS];
 443:main.c        **** int OLEDcount = 0;
 444:main.c        **** 
 445:main.c        **** int mainOLEDWaitingToSend = 0;
 446:main.c        **** int macroOLEDWaitingToSend = 0;
 447:main.c        **** 
 448:main.c        **** int presetAlreadyDisplayed[MAX_NUM_PRESETS];
 449:main.c        **** 
 450:main.c        **** float pedals_float[NUM_PEDALS] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 34


 451:main.c        **** 
 452:main.c        **** float map(float value, float istart, float istop, float ostart, float ostop)
 453:main.c        **** {
 1415              		.loc 1 453 0
 1416              		.cfi_startproc
 1417              		@ args = 4, pretend = 0, frame = 16
 1418              		@ frame_needed = 1, uses_anonymous_args = 0
 1419 0000 B0B5     		push	{r4, r5, r7, lr}
 1420              		.cfi_def_cfa_offset 16
 1421              		.cfi_offset 4, -16
 1422              		.cfi_offset 5, -12
 1423              		.cfi_offset 7, -8
 1424              		.cfi_offset 14, -4
 1425 0002 84B0     		sub	sp, sp, #16
 1426              		.cfi_def_cfa_offset 32
 1427 0004 00AF     		add	r7, sp, #0
 1428              		.cfi_def_cfa_register 7
 1429 0006 F860     		str	r0, [r7, #12]	@ float
 1430 0008 B960     		str	r1, [r7, #8]	@ float
 1431 000a 7A60     		str	r2, [r7, #4]	@ float
 1432 000c 3B60     		str	r3, [r7]	@ float
 454:main.c        ****     return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 1433              		.loc 1 454 0
 1434 000e 3968     		ldr	r1, [r7]	@ float
 1435 0010 386A     		ldr	r0, [r7, #32]	@ float
 1436 0012 FFF7FEFF 		bl	__aeabi_fsub
 1437 0016 0346     		mov	r3, r0
 1438 0018 1C46     		mov	r4, r3
 1439 001a B968     		ldr	r1, [r7, #8]	@ float
 1440 001c F868     		ldr	r0, [r7, #12]	@ float
 1441 001e FFF7FEFF 		bl	__aeabi_fsub
 1442 0022 0346     		mov	r3, r0
 1443 0024 1D46     		mov	r5, r3
 1444 0026 B968     		ldr	r1, [r7, #8]	@ float
 1445 0028 7868     		ldr	r0, [r7, #4]	@ float
 1446 002a FFF7FEFF 		bl	__aeabi_fsub
 1447 002e 0346     		mov	r3, r0
 1448 0030 1946     		mov	r1, r3
 1449 0032 2846     		mov	r0, r5
 1450 0034 FFF7FEFF 		bl	__aeabi_fdiv
 1451 0038 0346     		mov	r3, r0
 1452 003a 1946     		mov	r1, r3
 1453 003c 2046     		mov	r0, r4
 1454 003e FFF7FEFF 		bl	__aeabi_fmul
 1455 0042 0346     		mov	r3, r0
 1456 0044 3968     		ldr	r1, [r7]	@ float
 1457 0046 1846     		mov	r0, r3
 1458 0048 FFF7FEFF 		bl	__aeabi_fadd
 1459 004c 0346     		mov	r3, r0
 455:main.c        **** }
 1460              		.loc 1 455 0
 1461 004e 1846     		mov	r0, r3
 1462 0050 1037     		adds	r7, r7, #16
 1463              		.cfi_def_cfa_offset 16
 1464 0052 BD46     		mov	sp, r7
 1465              		.cfi_def_cfa_register 13
 1466              		@ sp needed
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 35


 1467 0054 B0BD     		pop	{r4, r5, r7, pc}
 1468              		.cfi_endproc
 1469              	.LFE72:
 1470              		.size	map, .-map
 1471              		.global	currentNeck
 1472 0056 00BF     		.bss
 1473              		.align	2
 1474              		.type	currentNeck, %object
 1475              		.size	currentNeck, 4
 1476              	currentNeck:
 1477 00cc 00000000 		.space	4
 1478              		.global	editMode
 1479              		.align	2
 1480              		.type	editMode, %object
 1481              		.size	editMode, 4
 1482              	editMode:
 1483 00d0 00000000 		.space	4
 1484              		.global	calibrationMode
 1485              		.align	2
 1486              		.type	calibrationMode, %object
 1487              		.size	calibrationMode, 4
 1488              	calibrationMode:
 1489 00d4 00000000 		.space	4
 1490              		.section	.text.burnInitialPedalZeroPositions,"ax",%progbits
 1491              		.align	2
 1492              		.global	burnInitialPedalZeroPositions
 1493              		.thumb
 1494              		.thumb_func
 1495              		.type	burnInitialPedalZeroPositions, %function
 1496              	burnInitialPedalZeroPositions:
 1497              	.LFB73:
 456:main.c        **** void displayCurrentPresetNameAndCopedent();
 457:main.c        **** 
 458:main.c        **** int currentNeck = 0;
 459:main.c        **** 
 460:main.c        **** int editMode = 0;
 461:main.c        **** int calibrationMode = 0;
 462:main.c        **** 
 463:main.c        **** void burnInitialPedalZeroPositions()
 464:main.c        **** {
 1498              		.loc 1 464 0
 1499              		.cfi_startproc
 1500              		@ args = 0, pretend = 0, frame = 0
 1501              		@ frame_needed = 1, uses_anonymous_args = 0
 1502              		@ link register save eliminated.
 1503 0000 80B4     		push	{r7}
 1504              		.cfi_def_cfa_offset 4
 1505              		.cfi_offset 7, -4
 1506 0002 00AF     		add	r7, sp, #0
 1507              		.cfi_def_cfa_register 7
 465:main.c        ****     
 466:main.c        **** }
 1508              		.loc 1 466 0
 1509 0004 00BF     		nop
 1510 0006 BD46     		mov	sp, r7
 1511              		.cfi_def_cfa_register 13
 1512              		@ sp needed
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 36


 1513 0008 80BC     		pop	{r7}
 1514              		.cfi_restore 7
 1515              		.cfi_def_cfa_offset 0
 1516 000a 7047     		bx	lr
 1517              		.cfi_endproc
 1518              	.LFE73:
 1519              		.size	burnInitialPedalZeroPositions, .-burnInitialPedalZeroPositions
 1520              		.global	__aeabi_ui2f
 1521              		.global	__aeabi_i2f
 1522              		.global	__aeabi_f2uiz
 1523              		.section	.text.calculatePedalRatios,"ax",%progbits
 1524              		.align	2
 1525              		.global	calculatePedalRatios
 1526              		.thumb
 1527              		.thumb_func
 1528              		.type	calculatePedalRatios, %function
 1529              	calculatePedalRatios:
 1530              	.LFB74:
 467:main.c        **** 
 468:main.c        **** 
 469:main.c        **** void calculatePedalRatios()
 470:main.c        **** {
 1531              		.loc 1 470 0
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 8
 1534              		@ frame_needed = 1, uses_anonymous_args = 0
 1535 0000 90B5     		push	{r4, r7, lr}
 1536              		.cfi_def_cfa_offset 12
 1537              		.cfi_offset 4, -12
 1538              		.cfi_offset 7, -8
 1539              		.cfi_offset 14, -4
 1540 0002 83B0     		sub	sp, sp, #12
 1541              		.cfi_def_cfa_offset 24
 1542 0004 00AF     		add	r7, sp, #0
 1543              		.cfi_def_cfa_register 7
 1544              	.LBB3:
 471:main.c        **** 
 472:main.c        ****     //add deadzones on edges of pedal sensing
 473:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 1545              		.loc 1 473 0
 1546 0006 0023     		movs	r3, #0
 1547 0008 7B60     		str	r3, [r7, #4]
 1548 000a 6EE0     		b	.L57
 1549              	.L58:
 1550              	.LBB4:
 474:main.c        ****     {
 475:main.c        **** 
 476:main.c        ****         float pedalDiff =(float)pedals_high[i] - (float)pedals_low[i];
 1551              		.loc 1 476 0 discriminator 3
 1552 000c 3A4A     		ldr	r2, .L59
 1553 000e 7B68     		ldr	r3, [r7, #4]
 1554 0010 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1555 0014 1846     		mov	r0, r3
 1556 0016 FFF7FEFF 		bl	__aeabi_ui2f
 1557 001a 0446     		mov	r4, r0
 1558 001c 374A     		ldr	r2, .L59+4
 1559 001e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 37


 1560 0020 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1561 0024 1846     		mov	r0, r3
 1562 0026 FFF7FEFF 		bl	__aeabi_ui2f
 1563 002a 0346     		mov	r3, r0
 1564 002c 1946     		mov	r1, r3
 1565 002e 2046     		mov	r0, r4
 1566 0030 FFF7FEFF 		bl	__aeabi_fsub
 1567 0034 0346     		mov	r3, r0
 1568 0036 3B60     		str	r3, [r7]	@ float
 477:main.c        ****         pedals_low[i] = pedals_low[i] + (0.1f * pedalDiff);
 1569              		.loc 1 477 0 discriminator 3
 1570 0038 304A     		ldr	r2, .L59+4
 1571 003a 7B68     		ldr	r3, [r7, #4]
 1572 003c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1573 0040 1846     		mov	r0, r3
 1574 0042 FFF7FEFF 		bl	__aeabi_i2f
 1575 0046 0446     		mov	r4, r0
 1576 0048 2D49     		ldr	r1, .L59+8
 1577 004a 3868     		ldr	r0, [r7]	@ float
 1578 004c FFF7FEFF 		bl	__aeabi_fmul
 1579 0050 0346     		mov	r3, r0
 1580 0052 1946     		mov	r1, r3
 1581 0054 2046     		mov	r0, r4
 1582 0056 FFF7FEFF 		bl	__aeabi_fadd
 1583 005a 0346     		mov	r3, r0
 1584 005c 1846     		mov	r0, r3
 1585 005e FFF7FEFF 		bl	__aeabi_f2uiz
 1586 0062 0346     		mov	r3, r0
 1587 0064 99B2     		uxth	r1, r3
 1588 0066 254A     		ldr	r2, .L59+4
 1589 0068 7B68     		ldr	r3, [r7, #4]
 1590 006a 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 478:main.c        ****         pedals_high[i] = pedals_high[i] - (0.1f * pedalDiff);
 1591              		.loc 1 478 0 discriminator 3
 1592 006e 224A     		ldr	r2, .L59
 1593 0070 7B68     		ldr	r3, [r7, #4]
 1594 0072 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1595 0076 1846     		mov	r0, r3
 1596 0078 FFF7FEFF 		bl	__aeabi_i2f
 1597 007c 0446     		mov	r4, r0
 1598 007e 2049     		ldr	r1, .L59+8
 1599 0080 3868     		ldr	r0, [r7]	@ float
 1600 0082 FFF7FEFF 		bl	__aeabi_fmul
 1601 0086 0346     		mov	r3, r0
 1602 0088 1946     		mov	r1, r3
 1603 008a 2046     		mov	r0, r4
 1604 008c FFF7FEFF 		bl	__aeabi_fsub
 1605 0090 0346     		mov	r3, r0
 1606 0092 1846     		mov	r0, r3
 1607 0094 FFF7FEFF 		bl	__aeabi_f2uiz
 1608 0098 0346     		mov	r3, r0
 1609 009a 99B2     		uxth	r1, r3
 1610 009c 164A     		ldr	r2, .L59
 1611 009e 7B68     		ldr	r3, [r7, #4]
 1612 00a0 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 479:main.c        ****         pedalDiff =(float)pedals_high[i] - (float)pedals_low[i];
 1613              		.loc 1 479 0 discriminator 3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 38


 1614 00a4 144A     		ldr	r2, .L59
 1615 00a6 7B68     		ldr	r3, [r7, #4]
 1616 00a8 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1617 00ac 1846     		mov	r0, r3
 1618 00ae FFF7FEFF 		bl	__aeabi_ui2f
 1619 00b2 0446     		mov	r4, r0
 1620 00b4 114A     		ldr	r2, .L59+4
 1621 00b6 7B68     		ldr	r3, [r7, #4]
 1622 00b8 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1623 00bc 1846     		mov	r0, r3
 1624 00be FFF7FEFF 		bl	__aeabi_ui2f
 1625 00c2 0346     		mov	r3, r0
 1626 00c4 1946     		mov	r1, r3
 1627 00c6 2046     		mov	r0, r4
 1628 00c8 FFF7FEFF 		bl	__aeabi_fsub
 1629 00cc 0346     		mov	r3, r0
 1630 00ce 3B60     		str	r3, [r7]	@ float
 480:main.c        ****         pedalRatios[i] = 4095.0f / pedalDiff;
 1631              		.loc 1 480 0 discriminator 3
 1632 00d0 3968     		ldr	r1, [r7]	@ float
 1633 00d2 0C48     		ldr	r0, .L59+12
 1634 00d4 FFF7FEFF 		bl	__aeabi_fdiv
 1635 00d8 0346     		mov	r3, r0
 1636 00da 1946     		mov	r1, r3
 1637 00dc 0A4A     		ldr	r2, .L59+16
 1638 00de 7B68     		ldr	r3, [r7, #4]
 1639 00e0 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 1640              	.LBE4:
 473:main.c        ****     {
 1641              		.loc 1 473 0 discriminator 3
 1642 00e4 7B68     		ldr	r3, [r7, #4]
 1643 00e6 0133     		adds	r3, r3, #1
 1644 00e8 7B60     		str	r3, [r7, #4]
 1645              	.L57:
 473:main.c        ****     {
 1646              		.loc 1 473 0 is_stmt 0 discriminator 1
 1647 00ea 7B68     		ldr	r3, [r7, #4]
 1648 00ec 092B     		cmp	r3, #9
 1649 00ee 8DDD     		ble	.L58
 1650              	.LBE3:
 481:main.c        ****     }
 482:main.c        **** }
 1651              		.loc 1 482 0 is_stmt 1
 1652 00f0 00BF     		nop
 1653 00f2 0C37     		adds	r7, r7, #12
 1654              		.cfi_def_cfa_offset 12
 1655 00f4 BD46     		mov	sp, r7
 1656              		.cfi_def_cfa_register 13
 1657              		@ sp needed
 1658 00f6 90BD     		pop	{r4, r7, pc}
 1659              	.L60:
 1660              		.align	2
 1661              	.L59:
 1662 00f8 00000000 		.word	pedals_high
 1663 00fc 00000000 		.word	pedals_low
 1664 0100 CDCCCC3D 		.word	1036831949
 1665 0104 00F07F45 		.word	1166012416
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 39


 1666 0108 00000000 		.word	pedalRatios
 1667              		.cfi_endproc
 1668              	.LFE74:
 1669              		.size	calculatePedalRatios, .-calculatePedalRatios
 1670              		.section	.rodata
 1671              		.align	2
 1672              	.LC0:
 1673 0400 2000     		.ascii	" \000"
 1674              		.global	__aeabi_f2iz
 1675              		.global	__aeabi_fcmpge
 1676 0402 0000     		.align	2
 1677              	.LC1:
 1678 0404 43414C49 		.ascii	"CALIBRATION\000"
 1678      42524154 
 1678      494F4E00 
 1679              		.align	2
 1680              	.LC2:
 1681 0410 4D4F5645 		.ascii	"MOVE PEDALS\000"
 1681      20504544 
 1681      414C5300 
 1682              		.align	2
 1683              	.LC3:
 1684 041c 414E4420 		.ascii	"AND LEVERS\000"
 1684      4C455645 
 1684      525300
 1685 0427 00       		.align	2
 1686              	.LC4:
 1687 0428 5448454E 		.ascii	"THEN EXIT\000"
 1687      20455849 
 1687      5400
 1688              		.global	__aeabi_fcmpeq
 1689              		.section	.text.main,"ax",%progbits
 1690              		.align	2
 1691              		.global	main
 1692              		.thumb
 1693              		.thumb_func
 1694              		.type	main, %function
 1695              	main:
 1696              	.LFB75:
 483:main.c        **** int main(void)
 484:main.c        **** {
 1697              		.loc 1 484 0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 160
 1700              		@ frame_needed = 1, uses_anonymous_args = 0
 1701 0000 90B5     		push	{r4, r7, lr}
 1702              		.cfi_def_cfa_offset 12
 1703              		.cfi_offset 4, -12
 1704              		.cfi_offset 7, -8
 1705              		.cfi_offset 14, -4
 1706 0002 ABB0     		sub	sp, sp, #172
 1707              		.cfi_def_cfa_offset 184
 1708 0004 02AF     		add	r7, sp, #8
 1709              		.cfi_def_cfa 7, 176
 485:main.c        ****     
 486:main.c        **** 	CYGlobalIntEnable; 
 1710              		.loc 1 486 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 40


 1711              		.syntax unified
 1712              	@ 486 "main.c" 1
 1713 0006 62B6     		CPSIE   i
 1714              	@ 0 "" 2
 487:main.c        ****     EEPROM_Start();
 1715              		.loc 1 487 0
 1716              		.thumb
 1717              		.syntax unified
 1718 0008 FFF7FEFF 		bl	EEPROM_Start
 488:main.c        ****     
 489:main.c        ****         eepromReturnValue = Em_EEPROM_Init((uint32_t)Em_EEPROM_em_EepromStorage);
 1719              		.loc 1 489 0
 1720 000c B14B     		ldr	r3, .L218
 1721 000e 1846     		mov	r0, r3
 1722 0010 FFF7FEFF 		bl	Em_EEPROM_Init
 1723 0014 0346     		mov	r3, r0
 1724 0016 1A46     		mov	r2, r3
 1725 0018 AF4B     		ldr	r3, .L218+4
 1726 001a 1A70     		strb	r2, [r3]
 490:main.c        ****     if(eepromReturnValue != CY_EM_EEPROM_SUCCESS)
 491:main.c        ****     {
 492:main.c        ****        // HandleError();
 493:main.c        ****     }
 494:main.c        ****     uint8_t myArrayCounter = 0;
 1727              		.loc 1 494 0
 1728 001c 0023     		movs	r3, #0
 1729 001e 87F83B30 		strb	r3, [r7, #59]
 495:main.c        ****   
 496:main.c        ****     I2C_1_Start();  
 1730              		.loc 1 496 0
 1731 0022 FFF7FEFF 		bl	I2C_1_Start
 497:main.c        ****     USB_SetPowerStatus(USB_DEVICE_STATUS_SELF_POWERED);
 1732              		.loc 1 497 0
 1733 0026 0120     		movs	r0, #1
 1734 0028 FFF7FEFF 		bl	USB_SetPowerStatus
 498:main.c        ****     my_Vbus_ISR_StartEx(Vbus_function);
 1735              		.loc 1 498 0
 1736 002c AB48     		ldr	r0, .L218+8
 1737 002e FFF7FEFF 		bl	my_Vbus_ISR_StartEx
 499:main.c        ****     
 500:main.c        **** 
 501:main.c        **** 
 502:main.c        ****     
 503:main.c        ****     CyDelay(2000);
 1738              		.loc 1 503 0
 1739 0032 4FF4FA60 		mov	r0, #2000
 1740 0036 FFF7FEFF 		bl	CyDelay
 504:main.c        ****     //read from eeprom which copedents are loaded on which necks
 505:main.c        ****     necks[0] = EEPROM_ReadByte(EEPROM_NECKS_OFFSET);
 1741              		.loc 1 505 0
 1742 003a 0020     		movs	r0, #0
 1743 003c FFF7FEFF 		bl	EEPROM_ReadByte
 1744 0040 0346     		mov	r3, r0
 1745 0042 1A46     		mov	r2, r3
 1746 0044 A64B     		ldr	r3, .L218+12
 1747 0046 1A70     		strb	r2, [r3]
 506:main.c        ****     necks[1] = EEPROM_ReadByte(EEPROM_NECKS_OFFSET + 1);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 41


 1748              		.loc 1 506 0
 1749 0048 0120     		movs	r0, #1
 1750 004a FFF7FEFF 		bl	EEPROM_ReadByte
 1751 004e 0346     		mov	r3, r0
 1752 0050 1A46     		mov	r2, r3
 1753 0052 A34B     		ldr	r3, .L218+12
 1754 0054 5A70     		strb	r2, [r3, #1]
 1755              	.LBB5:
 507:main.c        ****     
 508:main.c        ****     for (int coped = 0; coped < MAX_NUM_COPEDENTS; coped++)
 1756              		.loc 1 508 0
 1757 0056 0023     		movs	r3, #0
 1758 0058 C7F89C30 		str	r3, [r7, #156]
 1759 005c BBE0     		b	.L62
 1760              	.L69:
 1761              	.LBB6:
 509:main.c        ****     {
 510:main.c        ****         
 511:main.c        ****         for (int letter = 0; letter < NAME_LENGTH_IN_BYTES; letter++)
 1762              		.loc 1 511 0
 1763 005e 0023     		movs	r3, #0
 1764 0060 C7F89830 		str	r3, [r7, #152]
 1765 0064 29E0     		b	.L63
 1766              	.L64:
 512:main.c        ****         {
 513:main.c        ****                copedentNamesArray[coped][letter] = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + (coped*
 1767              		.loc 1 513 0 discriminator 3
 1768 0066 D7F89C30 		ldr	r3, [r7, #156]
 1769 006a 9BB2     		uxth	r3, r3
 1770 006c 1A46     		mov	r2, r3	@ movhi
 1771 006e 1201     		lsls	r2, r2, #4
 1772 0070 1A44     		add	r2, r2, r3
 1773 0072 9200     		lsls	r2, r2, #2
 1774 0074 1A44     		add	r2, r2, r3
 1775 0076 5200     		lsls	r2, r2, #1
 1776 0078 1344     		add	r3, r3, r2
 1777 007a 5B00     		lsls	r3, r3, #1
 1778 007c 9AB2     		uxth	r2, r3
 1779 007e D7F89830 		ldr	r3, [r7, #152]
 1780 0082 9BB2     		uxth	r3, r3
 1781 0084 1344     		add	r3, r3, r2
 1782 0086 9BB2     		uxth	r3, r3
 1783 0088 0233     		adds	r3, r3, #2
 1784 008a 9BB2     		uxth	r3, r3
 1785 008c 1846     		mov	r0, r3
 1786 008e FFF7FEFF 		bl	EEPROM_ReadByte
 1787 0092 0346     		mov	r3, r0
 1788 0094 1846     		mov	r0, r3
 1789 0096 9349     		ldr	r1, .L218+16
 1790 0098 D7F89C20 		ldr	r2, [r7, #156]
 1791 009c 1346     		mov	r3, r2
 1792 009e DB00     		lsls	r3, r3, #3
 1793 00a0 9B1A     		subs	r3, r3, r2
 1794 00a2 5B00     		lsls	r3, r3, #1
 1795 00a4 CA18     		adds	r2, r1, r3
 1796 00a6 D7F89830 		ldr	r3, [r7, #152]
 1797 00aa 1344     		add	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 42


 1798 00ac 0246     		mov	r2, r0
 1799 00ae 1A70     		strb	r2, [r3]
 511:main.c        ****         {
 1800              		.loc 1 511 0 discriminator 3
 1801 00b0 D7F89830 		ldr	r3, [r7, #152]
 1802 00b4 0133     		adds	r3, r3, #1
 1803 00b6 C7F89830 		str	r3, [r7, #152]
 1804              	.L63:
 511:main.c        ****         {
 1805              		.loc 1 511 0 is_stmt 0 discriminator 1
 1806 00ba D7F89830 		ldr	r3, [r7, #152]
 1807 00be 0D2B     		cmp	r3, #13
 1808 00c0 D1DD     		ble	.L64
 1809              	.LBE6:
 1810              	.LBB7:
 514:main.c        ****         }
 515:main.c        ****         for (int i = 0; i < 11; i++)
 1811              		.loc 1 515 0 is_stmt 1
 1812 00c2 0023     		movs	r3, #0
 1813 00c4 C7F89430 		str	r3, [r7, #148]
 1814 00c8 7BE0     		b	.L65
 1815              	.L68:
 1816              	.LBB8:
 516:main.c        ****     	{
 517:main.c        ****     		int pedalStartLoc = (i*24);
 1817              		.loc 1 517 0
 1818 00ca D7F89420 		ldr	r2, [r7, #148]
 1819 00ce 1346     		mov	r3, r2
 1820 00d0 5B00     		lsls	r3, r3, #1
 1821 00d2 1344     		add	r3, r3, r2
 1822 00d4 DB00     		lsls	r3, r3, #3
 1823 00d6 7B63     		str	r3, [r7, #52]
 1824              	.LBB9:
 518:main.c        ****             for (int j = 0; j < NUM_STRINGS; j++)
 1825              		.loc 1 518 0
 1826 00d8 0023     		movs	r3, #0
 1827 00da C7F89030 		str	r3, [r7, #144]
 1828 00de 67E0     		b	.L66
 1829              	.L67:
 1830              	.LBB10:
 519:main.c        ****     		{
 520:main.c        ****                 
 521:main.c        ****                 int stringStartLoc = (j*2);
 1831              		.loc 1 521 0 discriminator 3
 1832 00e0 D7F89030 		ldr	r3, [r7, #144]
 1833 00e4 5B00     		lsls	r3, r3, #1
 1834 00e6 3B63     		str	r3, [r7, #48]
 522:main.c        ****                 uint16_t tempIntHigh = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + pe
 1835              		.loc 1 522 0 discriminator 3
 1836 00e8 3B6B     		ldr	r3, [r7, #48]
 1837 00ea 9AB2     		uxth	r2, r3
 1838 00ec 7B6B     		ldr	r3, [r7, #52]
 1839 00ee 9BB2     		uxth	r3, r3
 1840 00f0 1344     		add	r3, r3, r2
 1841 00f2 9AB2     		uxth	r2, r3
 1842 00f4 D7F89C30 		ldr	r3, [r7, #156]
 1843 00f8 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 43


 1844 00fa 1946     		mov	r1, r3	@ movhi
 1845 00fc 0901     		lsls	r1, r1, #4
 1846 00fe 1944     		add	r1, r1, r3
 1847 0100 8900     		lsls	r1, r1, #2
 1848 0102 1944     		add	r1, r1, r3
 1849 0104 4900     		lsls	r1, r1, #1
 1850 0106 0B44     		add	r3, r3, r1
 1851 0108 5B00     		lsls	r3, r3, #1
 1852 010a 9BB2     		uxth	r3, r3
 1853 010c 1344     		add	r3, r3, r2
 1854 010e 9BB2     		uxth	r3, r3
 1855 0110 1033     		adds	r3, r3, #16
 1856 0112 9BB2     		uxth	r3, r3
 1857 0114 1846     		mov	r0, r3
 1858 0116 FFF7FEFF 		bl	EEPROM_ReadByte
 1859 011a 0346     		mov	r3, r0
 1860 011c FB85     		strh	r3, [r7, #46]	@ movhi
 523:main.c        ****                 uint16_t tempIntLow = EEPROM_ReadByte(EEPROM_COPEDENT_OFFSET + stringStartLoc + ped
 1861              		.loc 1 523 0 discriminator 3
 1862 011e 3B6B     		ldr	r3, [r7, #48]
 1863 0120 9AB2     		uxth	r2, r3
 1864 0122 7B6B     		ldr	r3, [r7, #52]
 1865 0124 9BB2     		uxth	r3, r3
 1866 0126 1344     		add	r3, r3, r2
 1867 0128 9AB2     		uxth	r2, r3
 1868 012a D7F89C30 		ldr	r3, [r7, #156]
 1869 012e 9BB2     		uxth	r3, r3
 1870 0130 1946     		mov	r1, r3	@ movhi
 1871 0132 0901     		lsls	r1, r1, #4
 1872 0134 1944     		add	r1, r1, r3
 1873 0136 8900     		lsls	r1, r1, #2
 1874 0138 1944     		add	r1, r1, r3
 1875 013a 4900     		lsls	r1, r1, #1
 1876 013c 0B44     		add	r3, r3, r1
 1877 013e 5B00     		lsls	r3, r3, #1
 1878 0140 9BB2     		uxth	r3, r3
 1879 0142 1344     		add	r3, r3, r2
 1880 0144 9BB2     		uxth	r3, r3
 1881 0146 1133     		adds	r3, r3, #17
 1882 0148 9BB2     		uxth	r3, r3
 1883 014a 1846     		mov	r0, r3
 1884 014c FFF7FEFF 		bl	EEPROM_ReadByte
 1885 0150 0346     		mov	r3, r0
 1886 0152 BB85     		strh	r3, [r7, #44]	@ movhi
 524:main.c        ****                 copedent[coped][i][j] = (((float)((tempIntHigh << 8) + tempIntLow)) * 0.00390625f) 
 1887              		.loc 1 524 0 discriminator 3
 1888 0154 FB8D     		ldrh	r3, [r7, #46]
 1889 0156 1A02     		lsls	r2, r3, #8
 1890 0158 BB8D     		ldrh	r3, [r7, #44]
 1891 015a 1344     		add	r3, r3, r2
 1892 015c 1846     		mov	r0, r3
 1893 015e FFF7FEFF 		bl	__aeabi_i2f
 1894 0162 0346     		mov	r3, r0
 1895 0164 4FF06E51 		mov	r1, #998244352
 1896 0168 1846     		mov	r0, r3
 1897 016a FFF7FEFF 		bl	__aeabi_fmul
 1898 016e 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 44


 1899 0170 4FF08641 		mov	r1, #1124073472
 1900 0174 1846     		mov	r0, r3
 1901 0176 FFF7FEFF 		bl	__aeabi_fsub
 1902 017a 0346     		mov	r3, r0
 1903 017c 1C46     		mov	r4, r3
 1904 017e 5A48     		ldr	r0, .L218+20
 1905 0180 D7F89430 		ldr	r3, [r7, #148]
 1906 0184 D7F89C10 		ldr	r1, [r7, #156]
 1907 0188 1A46     		mov	r2, r3
 1908 018a 5200     		lsls	r2, r2, #1
 1909 018c 1A44     		add	r2, r2, r3
 1910 018e 9300     		lsls	r3, r2, #2
 1911 0190 1A46     		mov	r2, r3
 1912 0192 0B46     		mov	r3, r1
 1913 0194 5B01     		lsls	r3, r3, #5
 1914 0196 0B44     		add	r3, r3, r1
 1915 0198 9B00     		lsls	r3, r3, #2
 1916 019a 1A44     		add	r2, r2, r3
 1917 019c D7F89030 		ldr	r3, [r7, #144]
 1918 01a0 1344     		add	r3, r3, r2
 1919 01a2 40F82340 		str	r4, [r0, r3, lsl #2]	@ float
 1920              	.LBE10:
 518:main.c        ****     		{
 1921              		.loc 1 518 0 discriminator 3
 1922 01a6 D7F89030 		ldr	r3, [r7, #144]
 1923 01aa 0133     		adds	r3, r3, #1
 1924 01ac C7F89030 		str	r3, [r7, #144]
 1925              	.L66:
 518:main.c        ****     		{
 1926              		.loc 1 518 0 is_stmt 0 discriminator 1
 1927 01b0 D7F89030 		ldr	r3, [r7, #144]
 1928 01b4 0B2B     		cmp	r3, #11
 1929 01b6 93DD     		ble	.L67
 1930              	.LBE9:
 1931              	.LBE8:
 515:main.c        ****     	{
 1932              		.loc 1 515 0 is_stmt 1 discriminator 2
 1933 01b8 D7F89430 		ldr	r3, [r7, #148]
 1934 01bc 0133     		adds	r3, r3, #1
 1935 01be C7F89430 		str	r3, [r7, #148]
 1936              	.L65:
 515:main.c        ****     	{
 1937              		.loc 1 515 0 is_stmt 0 discriminator 1
 1938 01c2 D7F89430 		ldr	r3, [r7, #148]
 1939 01c6 0A2B     		cmp	r3, #10
 1940 01c8 7FF77FAF 		ble	.L68
 1941              	.LBE7:
 508:main.c        ****     {
 1942              		.loc 1 508 0 is_stmt 1 discriminator 2
 1943 01cc D7F89C30 		ldr	r3, [r7, #156]
 1944 01d0 0133     		adds	r3, r3, #1
 1945 01d2 C7F89C30 		str	r3, [r7, #156]
 1946              	.L62:
 508:main.c        ****     {
 1947              		.loc 1 508 0 is_stmt 0 discriminator 1
 1948 01d6 D7F89C30 		ldr	r3, [r7, #156]
 1949 01da 062B     		cmp	r3, #6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 45


 1950 01dc 7FF73FAF 		ble	.L69
 1951              	.LBE5:
 1952              	.LBB11:
 525:main.c        ****             }
 526:main.c        ****     	}
 527:main.c        ****     }
 528:main.c        **** 
 529:main.c        ****     
 530:main.c        ****     for (int i = 0; i < NUM_PEDALS; i++)
 1953              		.loc 1 530 0 is_stmt 1
 1954 01e0 0023     		movs	r3, #0
 1955 01e2 C7F88C30 		str	r3, [r7, #140]
 1956 01e6 49E0     		b	.L70
 1957              	.L71:
 531:main.c        ****     {
 532:main.c        ****         pedals_low[i] = (EEPROM_ReadByte(EEPROM_CALIBRATION_OFFSET + (i*4)) << 8) + (EEPROM_ReadByt
 1958              		.loc 1 532 0 discriminator 3
 1959 01e8 D7F88C30 		ldr	r3, [r7, #140]
 1960 01ec 03F2E713 		addw	r3, r3, #487
 1961 01f0 9BB2     		uxth	r3, r3
 1962 01f2 9B00     		lsls	r3, r3, #2
 1963 01f4 9BB2     		uxth	r3, r3
 1964 01f6 1846     		mov	r0, r3
 1965 01f8 FFF7FEFF 		bl	EEPROM_ReadByte
 1966 01fc 0346     		mov	r3, r0
 1967 01fe 9BB2     		uxth	r3, r3
 1968 0200 1B02     		lsls	r3, r3, #8
 1969 0202 9CB2     		uxth	r4, r3
 1970 0204 D7F88C30 		ldr	r3, [r7, #140]
 1971 0208 9BB2     		uxth	r3, r3
 1972 020a 9B00     		lsls	r3, r3, #2
 1973 020c 9BB2     		uxth	r3, r3
 1974 020e 03F29D73 		addw	r3, r3, #1949
 1975 0212 9BB2     		uxth	r3, r3
 1976 0214 1846     		mov	r0, r3
 1977 0216 FFF7FEFF 		bl	EEPROM_ReadByte
 1978 021a 0346     		mov	r3, r0
 1979 021c 9BB2     		uxth	r3, r3
 1980 021e 2344     		add	r3, r3, r4
 1981 0220 99B2     		uxth	r1, r3
 1982 0222 324A     		ldr	r2, .L218+24
 1983 0224 D7F88C30 		ldr	r3, [r7, #140]
 1984 0228 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 533:main.c        ****         pedals_high[i] = (EEPROM_ReadByte(EEPROM_CALIBRATION_OFFSET + ((i*4) + 2)) << 8) + (EEPROM_
 1985              		.loc 1 533 0 discriminator 3
 1986 022c D7F88C30 		ldr	r3, [r7, #140]
 1987 0230 9BB2     		uxth	r3, r3
 1988 0232 9B00     		lsls	r3, r3, #2
 1989 0234 9BB2     		uxth	r3, r3
 1990 0236 03F29E73 		addw	r3, r3, #1950
 1991 023a 9BB2     		uxth	r3, r3
 1992 023c 1846     		mov	r0, r3
 1993 023e FFF7FEFF 		bl	EEPROM_ReadByte
 1994 0242 0346     		mov	r3, r0
 1995 0244 9BB2     		uxth	r3, r3
 1996 0246 1B02     		lsls	r3, r3, #8
 1997 0248 9CB2     		uxth	r4, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 46


 1998 024a D7F88C30 		ldr	r3, [r7, #140]
 1999 024e 9BB2     		uxth	r3, r3
 2000 0250 9B00     		lsls	r3, r3, #2
 2001 0252 9BB2     		uxth	r3, r3
 2002 0254 03F29F73 		addw	r3, r3, #1951
 2003 0258 9BB2     		uxth	r3, r3
 2004 025a 1846     		mov	r0, r3
 2005 025c FFF7FEFF 		bl	EEPROM_ReadByte
 2006 0260 0346     		mov	r3, r0
 2007 0262 9BB2     		uxth	r3, r3
 2008 0264 2344     		add	r3, r3, r4
 2009 0266 99B2     		uxth	r1, r3
 2010 0268 214A     		ldr	r2, .L218+28
 2011 026a D7F88C30 		ldr	r3, [r7, #140]
 2012 026e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 530:main.c        ****     {
 2013              		.loc 1 530 0 discriminator 3
 2014 0272 D7F88C30 		ldr	r3, [r7, #140]
 2015 0276 0133     		adds	r3, r3, #1
 2016 0278 C7F88C30 		str	r3, [r7, #140]
 2017              	.L70:
 530:main.c        ****     {
 2018              		.loc 1 530 0 is_stmt 0 discriminator 1
 2019 027c D7F88C30 		ldr	r3, [r7, #140]
 2020 0280 092B     		cmp	r3, #9
 2021 0282 B1DD     		ble	.L71
 2022              	.LBE11:
 534:main.c        ****     }
 535:main.c        ****     calculatePedalRatios();
 2023              		.loc 1 535 0 is_stmt 1
 2024 0284 FFF7FEFF 		bl	calculatePedalRatios
 2025              	.LBB12:
 536:main.c        ****                 
 537:main.c        ****     //blank out the preset names array so that we can tell when we get the real names from the synt
 538:main.c        ****     for (int i = 0; i < MAX_NUM_PRESETS; i++)
 2026              		.loc 1 538 0
 2027 0288 0023     		movs	r3, #0
 2028 028a C7F88830 		str	r3, [r7, #136]
 2029 028e 61E0     		b	.L72
 2030              	.L79:
 2031              	.LBB13:
 539:main.c        ****     {
 540:main.c        ****         for (int j = 0; j < NAME_LENGTH_IN_BYTES; j++)
 2032              		.loc 1 540 0
 2033 0290 0023     		movs	r3, #0
 2034 0292 C7F88430 		str	r3, [r7, #132]
 2035 0296 11E0     		b	.L73
 2036              	.L74:
 541:main.c        ****         {
 542:main.c        ****             presetNamesArray[i][j] = 255;
 2037              		.loc 1 542 0 discriminator 3
 2038 0298 1649     		ldr	r1, .L218+32
 2039 029a D7F88820 		ldr	r2, [r7, #136]
 2040 029e 1346     		mov	r3, r2
 2041 02a0 DB00     		lsls	r3, r3, #3
 2042 02a2 9B1A     		subs	r3, r3, r2
 2043 02a4 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 47


 2044 02a6 CA18     		adds	r2, r1, r3
 2045 02a8 D7F88430 		ldr	r3, [r7, #132]
 2046 02ac 1344     		add	r3, r3, r2
 2047 02ae FF22     		movs	r2, #255
 2048 02b0 1A70     		strb	r2, [r3]
 540:main.c        ****         {
 2049              		.loc 1 540 0 discriminator 3
 2050 02b2 D7F88430 		ldr	r3, [r7, #132]
 2051 02b6 0133     		adds	r3, r3, #1
 2052 02b8 C7F88430 		str	r3, [r7, #132]
 2053              	.L73:
 540:main.c        ****         {
 2054              		.loc 1 540 0 is_stmt 0 discriminator 1
 2055 02bc D7F88430 		ldr	r3, [r7, #132]
 2056 02c0 0D2B     		cmp	r3, #13
 2057 02c2 E9DD     		ble	.L74
 2058              	.LBE13:
 2059              	.LBB14:
 543:main.c        **** 
 544:main.c        ****         }
 545:main.c        ****         for (int j = 0; j < NUM_MACROS; j++)
 2060              		.loc 1 545 0 is_stmt 1
 2061 02c4 0023     		movs	r3, #0
 2062 02c6 C7F88030 		str	r3, [r7, #128]
 2063 02ca 34E0     		b	.L75
 2064              	.L78:
 2065              	.LBB15:
 546:main.c        ****         {
 547:main.c        ****             for (int k = 0; k < NAME_LENGTH_IN_BYTES; k++)
 2066              		.loc 1 547 0
 2067 02cc 0023     		movs	r3, #0
 2068 02ce FB67     		str	r3, [r7, #124]
 2069 02d0 29E0     		b	.L76
 2070              	.L219:
 2071 02d2 00BF     		.align	2
 2072              	.L218:
 2073 02d4 00000000 		.word	Em_EEPROM_em_EepromStorage
 2074 02d8 00000000 		.word	eepromReturnValue
 2075 02dc 00000000 		.word	Vbus_function
 2076 02e0 00000000 		.word	necks
 2077 02e4 00000000 		.word	copedentNamesArray
 2078 02e8 00000000 		.word	copedent
 2079 02ec 00000000 		.word	pedals_low
 2080 02f0 00000000 		.word	pedals_high
 2081 02f4 00000000 		.word	presetNamesArray
 2082              	.L77:
 548:main.c        ****             {
 549:main.c        ****                 macroNamesArray[i][j][k] = 255;
 2083              		.loc 1 549 0 discriminator 3
 2084 02f8 4E48     		ldr	r0, .L220
 2085 02fa D7F88030 		ldr	r3, [r7, #128]
 2086 02fe D7F88810 		ldr	r1, [r7, #136]
 2087 0302 1A46     		mov	r2, r3
 2088 0304 D200     		lsls	r2, r2, #3
 2089 0306 D21A     		subs	r2, r2, r3
 2090 0308 5300     		lsls	r3, r2, #1
 2091 030a 1A46     		mov	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 48


 2092 030c 0B46     		mov	r3, r1
 2093 030e DB00     		lsls	r3, r3, #3
 2094 0310 5B1A     		subs	r3, r3, r1
 2095 0312 1B01     		lsls	r3, r3, #4
 2096 0314 1344     		add	r3, r3, r2
 2097 0316 C218     		adds	r2, r0, r3
 2098 0318 FB6F     		ldr	r3, [r7, #124]
 2099 031a 1344     		add	r3, r3, r2
 2100 031c FF22     		movs	r2, #255
 2101 031e 1A70     		strb	r2, [r3]
 547:main.c        ****             {
 2102              		.loc 1 547 0 discriminator 3
 2103 0320 FB6F     		ldr	r3, [r7, #124]
 2104 0322 0133     		adds	r3, r3, #1
 2105 0324 FB67     		str	r3, [r7, #124]
 2106              	.L76:
 547:main.c        ****             {
 2107              		.loc 1 547 0 is_stmt 0 discriminator 1
 2108 0326 FB6F     		ldr	r3, [r7, #124]
 2109 0328 0D2B     		cmp	r3, #13
 2110 032a E5DD     		ble	.L77
 2111              	.LBE15:
 545:main.c        ****         {
 2112              		.loc 1 545 0 is_stmt 1 discriminator 2
 2113 032c D7F88030 		ldr	r3, [r7, #128]
 2114 0330 0133     		adds	r3, r3, #1
 2115 0332 C7F88030 		str	r3, [r7, #128]
 2116              	.L75:
 545:main.c        ****         {
 2117              		.loc 1 545 0 is_stmt 0 discriminator 1
 2118 0336 D7F88030 		ldr	r3, [r7, #128]
 2119 033a 072B     		cmp	r3, #7
 2120 033c C6DD     		ble	.L78
 2121              	.LBE14:
 550:main.c        ****             }
 551:main.c        ****         }
 552:main.c        ****         presetAlreadyDisplayed[i] = 0;
 2122              		.loc 1 552 0 is_stmt 1 discriminator 2
 2123 033e 3E4A     		ldr	r2, .L220+4
 2124 0340 D7F88830 		ldr	r3, [r7, #136]
 2125 0344 0021     		movs	r1, #0
 2126 0346 42F82310 		str	r1, [r2, r3, lsl #2]
 538:main.c        ****     {
 2127              		.loc 1 538 0 discriminator 2
 2128 034a D7F88830 		ldr	r3, [r7, #136]
 2129 034e 0133     		adds	r3, r3, #1
 2130 0350 C7F88830 		str	r3, [r7, #136]
 2131              	.L72:
 538:main.c        ****     {
 2132              		.loc 1 538 0 is_stmt 0 discriminator 1
 2133 0354 D7F88830 		ldr	r3, [r7, #136]
 2134 0358 3F2B     		cmp	r3, #63
 2135 035a 99DD     		ble	.L79
 2136              	.LBE12:
 553:main.c        ****     }
 554:main.c        ****     
 555:main.c        ****     QuadDec_1_Start();
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 49


 2137              		.loc 1 555 0 is_stmt 1
 2138 035c FFF7FEFF 		bl	QuadDec_1_Start
 556:main.c        ****     LED_amber1_Write(0);
 2139              		.loc 1 556 0
 2140 0360 0020     		movs	r0, #0
 2141 0362 FFF7FEFF 		bl	LED_amber1_Write
 557:main.c        ****     LED_amber2_Write(1);
 2142              		.loc 1 557 0
 2143 0366 0120     		movs	r0, #1
 2144 0368 FFF7FEFF 		bl	LED_amber2_Write
 558:main.c        ****     LED_amber3_Write(0);
 2145              		.loc 1 558 0
 2146 036c 0020     		movs	r0, #0
 2147 036e FFF7FEFF 		bl	LED_amber3_Write
 559:main.c        ****     LED_amber4_Write(0);
 2148              		.loc 1 559 0
 2149 0372 0020     		movs	r0, #0
 2150 0374 FFF7FEFF 		bl	LED_amber4_Write
 560:main.c        **** 
 561:main.c        **** 
 562:main.c        **** 
 563:main.c        **** 
 564:main.c        **** 
 565:main.c        ****     
 566:main.c        ****     LED_red1_Write(0);
 2151              		.loc 1 566 0
 2152 0378 0020     		movs	r0, #0
 2153 037a FFF7FEFF 		bl	LED_red1_Write
 567:main.c        ****     LED_green2_Write(1);
 2154              		.loc 1 567 0
 2155 037e 0120     		movs	r0, #1
 2156 0380 FFF7FEFF 		bl	LED_green2_Write
 568:main.c        **** 
 569:main.c        ****     
 570:main.c        ****     ADC_SAR_Seq_1_Start();
 2157              		.loc 1 570 0
 2158 0384 FFF7FEFF 		bl	ADC_SAR_Seq_1_Start
 571:main.c        ****     ADC_SAR_Seq_1_StartConvert();
 2159              		.loc 1 571 0
 2160 0388 FFF7FEFF 		bl	ADC_SAR_Seq_1_StartConvert
 572:main.c        **** 
 573:main.c        ****             
 574:main.c        ****     currentCopedent = necks[currentNeck];
 2161              		.loc 1 574 0
 2162 038c 2B4B     		ldr	r3, .L220+8
 2163 038e 1B68     		ldr	r3, [r3]
 2164 0390 2B4A     		ldr	r2, .L220+12
 2165 0392 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 2166 0394 2B4B     		ldr	r3, .L220+16
 2167 0396 1A70     		strb	r2, [r3]
 575:main.c        ****     CyDelay(10);
 2168              		.loc 1 575 0
 2169 0398 0A20     		movs	r0, #10
 2170 039a FFF7FEFF 		bl	CyDelay
 576:main.c        ****     
 577:main.c        ****     //set up for the OLED screen's first write
 578:main.c        ****     I2Cbuff1[0] = 1<<6;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 50


 2171              		.loc 1 578 0
 2172 039e 2A4B     		ldr	r3, .L220+20
 2173 03a0 4022     		movs	r2, #64
 2174 03a2 1A70     		strb	r2, [r3]
 579:main.c        ****     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 2175              		.loc 1 579 0
 2176 03a4 0022     		movs	r2, #0
 2177 03a6 0121     		movs	r1, #1
 2178 03a8 7020     		movs	r0, #112
 2179 03aa FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2180 03ae 0346     		mov	r3, r0
 2181 03b0 1A46     		mov	r2, r3
 2182 03b2 264B     		ldr	r3, .L220+24
 2183 03b4 1A60     		str	r2, [r3]
 580:main.c        ****     myGFX_init(128, 64);
 2184              		.loc 1 580 0
 2185 03b6 4021     		movs	r1, #64
 2186 03b8 8020     		movs	r0, #128
 2187 03ba FFF7FEFF 		bl	myGFX_init
 581:main.c        ****     myGFX_setFont(0);
 2188              		.loc 1 581 0
 2189 03be 0020     		movs	r0, #0
 2190 03c0 FFF7FEFF 		bl	myGFX_setFont
 582:main.c        ****     OLED_init(128, 64);
 2191              		.loc 1 582 0
 2192 03c4 4021     		movs	r1, #64
 2193 03c6 8020     		movs	r0, #128
 2194 03c8 FFF7FEFF 		bl	OLED_init
 583:main.c        ****     OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 2195              		.loc 1 583 0
 2196 03cc 1D4B     		ldr	r3, .L220+16
 2197 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2198 03d0 1846     		mov	r0, r3
 2199 03d2 0323     		movs	r3, #3
 2200 03d4 0022     		movs	r2, #0
 2201 03d6 0221     		movs	r1, #2
 2202 03d8 FFF7FEFF 		bl	OLEDwriteInt
 584:main.c        ****     OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 2203              		.loc 1 584 0
 2204 03dc FFF7FEFF 		bl	OLEDgetCursor
 2205 03e0 0246     		mov	r2, r0
 2206 03e2 0323     		movs	r3, #3
 2207 03e4 0121     		movs	r1, #1
 2208 03e6 1A48     		ldr	r0, .L220+28
 2209 03e8 FFF7FEFF 		bl	OLEDwriteString
 585:main.c        ****     OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], COPEDENT_NAME_CLIPPED_LENGTH, 
 2210              		.loc 1 585 0
 2211 03ec 154B     		ldr	r3, .L220+16
 2212 03ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2213 03f0 1A46     		mov	r2, r3
 2214 03f2 1346     		mov	r3, r2
 2215 03f4 DB00     		lsls	r3, r3, #3
 2216 03f6 9B1A     		subs	r3, r3, r2
 2217 03f8 5B00     		lsls	r3, r3, #1
 2218 03fa 164A     		ldr	r2, .L220+32
 2219 03fc 9C18     		adds	r4, r3, r2
 2220 03fe FFF7FEFF 		bl	OLEDgetCursor
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 51


 2221 0402 0246     		mov	r2, r0
 2222 0404 0323     		movs	r3, #3
 2223 0406 0821     		movs	r1, #8
 2224 0408 2046     		mov	r0, r4
 2225 040a FFF7FEFF 		bl	OLEDwriteString
 586:main.c        ****     OLED_draw(128, 64);
 2226              		.loc 1 586 0
 2227 040e 4021     		movs	r1, #64
 2228 0410 8020     		movs	r0, #128
 2229 0412 FFF7FEFF 		bl	OLED_draw
 587:main.c        ****     
 588:main.c        ****     
 589:main.c        ****     I2Cbuff1[0] = 1<<2;
 2230              		.loc 1 589 0
 2231 0416 0C4B     		ldr	r3, .L220+20
 2232 0418 0422     		movs	r2, #4
 2233 041a 1A70     		strb	r2, [r3]
 590:main.c        ****     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 2234              		.loc 1 590 0
 2235 041c 0022     		movs	r2, #0
 2236 041e 0121     		movs	r1, #1
 2237 0420 7020     		movs	r0, #112
 2238 0422 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2239 0426 0346     		mov	r3, r0
 2240 0428 1A46     		mov	r2, r3
 2241 042a 084B     		ldr	r3, .L220+24
 2242 042c 1A60     		str	r2, [r3]
 2243              	.LBB16:
 591:main.c        **** 
 592:main.c        ****     for (int w = 0; w < 8; w++)
 2244              		.loc 1 592 0
 2245 042e 0023     		movs	r3, #0
 2246 0430 BB67     		str	r3, [r7, #120]
 2247 0432 27E0     		b	.L80
 2248              	.L221:
 2249              		.align	2
 2250              	.L220:
 2251 0434 00000000 		.word	macroNamesArray
 2252 0438 00000000 		.word	presetAlreadyDisplayed
 2253 043c 00000000 		.word	currentNeck
 2254 0440 00000000 		.word	necks
 2255 0444 00000000 		.word	currentCopedent
 2256 0448 00000000 		.word	I2Cbuff1
 2257 044c 00000000 		.word	status
 2258 0450 00040000 		.word	.LC0
 2259 0454 00000000 		.word	copedentNamesArray
 2260              	.L81:
 593:main.c        ****     {
 594:main.c        ****         I2Cbuff1[0] = (1 << 3) + w;
 2261              		.loc 1 594 0 discriminator 3
 2262 0458 BB6F     		ldr	r3, [r7, #120]
 2263 045a DBB2     		uxtb	r3, r3
 2264 045c 0833     		adds	r3, r3, #8
 2265 045e DAB2     		uxtb	r2, r3
 2266 0460 924B     		ldr	r3, .L222
 2267 0462 1A70     		strb	r2, [r3]
 595:main.c        ****         status = I2C_MasterWriteBlocking(0x72, 1, I2C_1_MODE_COMPLETE_XFER); 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 52


 2268              		.loc 1 595 0 discriminator 3
 2269 0464 0022     		movs	r2, #0
 2270 0466 0121     		movs	r1, #1
 2271 0468 7220     		movs	r0, #114
 2272 046a FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2273 046e 0346     		mov	r3, r0
 2274 0470 1A46     		mov	r2, r3
 2275 0472 8F4B     		ldr	r3, .L222+4
 2276 0474 1A60     		str	r2, [r3]
 596:main.c        ****         OLED_init(128, 32);
 2277              		.loc 1 596 0 discriminator 3
 2278 0476 2021     		movs	r1, #32
 2279 0478 8020     		movs	r0, #128
 2280 047a FFF7FEFF 		bl	OLED_init
 592:main.c        ****     {
 2281              		.loc 1 592 0 discriminator 3
 2282 047e BB6F     		ldr	r3, [r7, #120]
 2283 0480 0133     		adds	r3, r3, #1
 2284 0482 BB67     		str	r3, [r7, #120]
 2285              	.L80:
 592:main.c        ****     {
 2286              		.loc 1 592 0 is_stmt 0 discriminator 1
 2287 0484 BB6F     		ldr	r3, [r7, #120]
 2288 0486 072B     		cmp	r3, #7
 2289 0488 E6DD     		ble	.L81
 2290              	.LBE16:
 597:main.c        ****         //OLEDwriteInt(w , 1, 0,FirstLine);
 598:main.c        ****         //OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 599:main.c        ****         //OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_BYTES, OL
 600:main.c        ****        // OLED_draw(128, 32);
 601:main.c        ****     }
 602:main.c        **** 
 603:main.c        ****     //initialize the macro knob adc to scan all knobs
 604:main.c        ****     I2Cbuff1[0] = 1<<2;
 2291              		.loc 1 604 0 is_stmt 1
 2292 048a 884B     		ldr	r3, .L222
 2293 048c 0422     		movs	r2, #4
 2294 048e 1A70     		strb	r2, [r3]
 605:main.c        ****     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 2295              		.loc 1 605 0
 2296 0490 0022     		movs	r2, #0
 2297 0492 0121     		movs	r1, #1
 2298 0494 7020     		movs	r0, #112
 2299 0496 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2300 049a 0346     		mov	r3, r0
 2301 049c 1A46     		mov	r2, r3
 2302 049e 844B     		ldr	r3, .L222+4
 2303 04a0 1A60     		str	r2, [r3]
 606:main.c        ****     main_counter = 9;
 2304              		.loc 1 606 0
 2305 04a2 844B     		ldr	r3, .L222+8
 2306 04a4 0922     		movs	r2, #9
 2307 04a6 1A70     		strb	r2, [r3]
 607:main.c        **** 
 608:main.c        ****     I2Cbuff1[0] = 0xf; //message says scan single-ended mode from beginning to 8th knob (scan all k
 2308              		.loc 1 608 0
 2309 04a8 804B     		ldr	r3, .L222
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 53


 2310 04aa 0F22     		movs	r2, #15
 2311 04ac 1A70     		strb	r2, [r3]
 609:main.c        ****     status = I2C_MasterWriteBlocking(0x35, 1, I2C_1_MODE_COMPLETE_XFER);
 2312              		.loc 1 609 0
 2313 04ae 0022     		movs	r2, #0
 2314 04b0 0121     		movs	r1, #1
 2315 04b2 3520     		movs	r0, #53
 2316 04b4 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2317 04b8 0346     		mov	r3, r0
 2318 04ba 1A46     		mov	r2, r3
 2319 04bc 7C4B     		ldr	r3, .L222+4
 2320 04be 1A60     		str	r2, [r3]
 610:main.c        ****     
 611:main.c        **** #if 0
 612:main.c        ****     while(1)
 613:main.c        ****     {
 614:main.c        ****         for (int i=  0; i < 4; i++)
 615:main.c        ****         {
 616:main.c        ****             knobs[i] = 127 - (ADC_SAR_Seq_1_GetResult16(i)/32);
 617:main.c        ****             if (knobs[i] != prevKnobs[i])
 618:main.c        ****             {
 619:main.c        ****                // sendMIDIControlChange(80+i, knobs[i]);
 620:main.c        ****             }
 621:main.c        ****             prevKnobs[i] = knobs[i];
 622:main.c        ****         }
 623:main.c        ****         
 624:main.c        **** 
 625:main.c        ****         I2Cbuff1[0] = 1<<0;
 626:main.c        ****         uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 627:main.c        **** 
 628:main.c        ****         //CyDelayUs(100);
 629:main.c        ****         I2Cbuff1[0] = 0x0E;
 630:main.c        ****         status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 631:main.c        ****         status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 632:main.c        ****        // CyDelayUs(100);
 633:main.c        ****         angle[0] = I2Cbuff2[0] << 8;
 634:main.c        ****         angle[0] +=  I2Cbuff2[1];
 635:main.c        ****         
 636:main.c        ****     }
 637:main.c        ****     #endif
 638:main.c        ****     //OLEDclear();
 639:main.c        ****     /*
 640:main.c        ****     while(1)
 641:main.c        ****     {
 642:main.c        ****         OLEDwriteInt(bar[1], 5, 0,FirstLine);
 643:main.c        ****         OLED_draw();
 644:main.c        ****         CyDelay(1);
 645:main.c        ****         
 646:main.c        ****         OLEDwriteInt(oct1_Read(), 1, 0,SecondLine);
 647:main.c        ****         OLEDwriteInt(oct2_Read(), 1, 10,SecondLine);
 648:main.c        ****         OLEDwriteInt(oct3_Read(), 1, 20,SecondLine);
 649:main.c        ****         OLEDwriteInt(oct4_Read(), 1, 30,SecondLine);
 650:main.c        ****         for (int i=  0; i < 4; i++)
 651:main.c        ****         {
 652:main.c        ****             OLEDwriteInt( ADC_SAR_Seq_1_GetResult16(i)/8, 3, i*30,2);
 653:main.c        ****         }
 654:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 54


 655:main.c        ****     }
 656:main.c        ****     */
 657:main.c        **** #if 0
 658:main.c        ****     I2Cbuff1[0] = 1<<mux_states[10][0];
 659:main.c        ****     uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 660:main.c        **** 
 661:main.c        **** 
 662:main.c        ****     I2Cbuff1[0] = 1<<mux_states[10][1];
 663:main.c        ****     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 664:main.c        **** 
 665:main.c        ****     //address 0x48
 666:main.c        ****     I2Cbuff1[0] = 0x1;
 667:main.c        ****     I2Cbuff1[1] = 0b11000000;
 668:main.c        ****     I2Cbuff1[2] = 0b10000011;
 669:main.c        **** 
 670:main.c        ****     status = I2C_MasterWriteBlocking(0x48, 3, I2C_1_MODE_COMPLETE_XFER);
 671:main.c        ****     #endif
 672:main.c        **** 
 673:main.c        ****     SPIS_1_Start();  
 2321              		.loc 1 673 0
 2322 04c0 FFF7FEFF 		bl	SPIS_1_Start
 674:main.c        ****     SPIM_1_Start();  
 2323              		.loc 1 674 0
 2324 04c4 FFF7FEFF 		bl	SPIM_1_Start
 675:main.c        ****     SPIS_2_Start(); 
 2325              		.loc 1 675 0
 2326 04c8 FFF7FEFF 		bl	SPIS_2_Start
 676:main.c        ****     DmaTxConfiguration();
 2327              		.loc 1 676 0
 2328 04cc FFF7FEFF 		bl	DmaTxConfiguration
 677:main.c        ****     DmaRxConfiguration();
 2329              		.loc 1 677 0
 2330 04d0 FFF7FEFF 		bl	DmaRxConfiguration
 678:main.c        ****     isr_SPI1_ss_StartEx(spis_1_ss);
 2331              		.loc 1 678 0
 2332 04d4 7848     		ldr	r0, .L222+12
 2333 04d6 FFF7FEFF 		bl	isr_SPI1_ss_StartEx
 679:main.c        ****     isr_SPI2_ss_StartEx(spis_2_ss);
 2334              		.loc 1 679 0
 2335 04da 7848     		ldr	r0, .L222+16
 2336 04dc FFF7FEFF 		bl	isr_SPI2_ss_StartEx
 680:main.c        ****     
 681:main.c        ****     myArray[30] = 254;
 2337              		.loc 1 681 0
 2338 04e0 774B     		ldr	r3, .L222+20
 2339 04e2 FE22     		movs	r2, #254
 2340 04e4 9A77     		strb	r2, [r3, #30]
 682:main.c        ****     myArray[31] = 253;
 2341              		.loc 1 682 0
 2342 04e6 764B     		ldr	r3, .L222+20
 2343 04e8 FD22     		movs	r2, #253
 2344 04ea DA77     		strb	r2, [r3, #31]
 683:main.c        **** 
 684:main.c        ****     main_counter = 0;
 2345              		.loc 1 684 0
 2346 04ec 714B     		ldr	r3, .L222+8
 2347 04ee 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 55


 2348 04f0 1A70     		strb	r2, [r3]
 2349              	.L209:
 685:main.c        **** 
 686:main.c        **** 	for(;;)
 687:main.c        ****     {
 688:main.c        ****         
 689:main.c        ****         if (parseThatMF)
 2350              		.loc 1 689 0
 2351 04f2 744B     		ldr	r3, .L222+24
 2352 04f4 1B78     		ldrb	r3, [r3]
 2353 04f6 DBB2     		uxtb	r3, r3
 2354 04f8 002B     		cmp	r3, #0
 2355 04fa 01D0     		beq	.L82
 690:main.c        ****         {
 691:main.c        ****             parseSysex();
 2356              		.loc 1 691 0
 2357 04fc FFF7FEFF 		bl	parseSysex
 2358              	.L82:
 692:main.c        ****         }
 693:main.c        ****         
 694:main.c        ****         //if (newDataFlag)
 695:main.c        ****         //{
 696:main.c        ****         //}
 697:main.c        ****             /*
 698:main.c        ****             for (int i = 0; i < 5; i++)
 699:main.c        ****             {
 700:main.c        ****                 I2C_1_MasterSendStart(0x70, 0); 
 701:main.c        ****                 I2C_1_MasterWriteByte(1<<i);
 702:main.c        ****                 I2C_1_MasterSendStop(); 
 703:main.c        **** 
 704:main.c        **** 
 705:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 706:main.c        ****                 I2C_1_MasterWriteByte(0x0C);
 707:main.c        ****                 //I2C_1_MasterSendStop();
 708:main.c        ****                 I2C_1_MasterSendRestart(0x36, 1); 
 709:main.c        ****                 rawAngle = I2C_1_MasterReadByte(1) << 8;
 710:main.c        ****                 //I2C_1_MasterSendRestart(0x36, 1);
 711:main.c        ****                 rawAngle +=  I2C_1_MasterReadByte(0);
 712:main.c        ****                  I2C_1_MasterSendStop(); 
 713:main.c        ****                 
 714:main.c        ****                 CyDelay(1);
 715:main.c        **** 
 716:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 717:main.c        ****                 I2C_1_MasterWriteByte(0x01);
 718:main.c        ****                 I2C_1_MasterWriteByte(rawAngle >> 8);
 719:main.c        ****                 I2C_1_MasterWriteByte(rawAngle & 0xff);
 720:main.c        ****                 I2C_1_MasterWriteByte((rawAngle+500) >> 8);
 721:main.c        ****                 I2C_1_MasterWriteByte((rawAngle+500) & 0xff);
 722:main.c        ****                 I2C_1_MasterSendStop(); 
 723:main.c        ****                 
 724:main.c        ****                 CyDelay(2);
 725:main.c        **** 
 726:main.c        ****                 I2C_1_MasterSendStart(0x36, 0); 
 727:main.c        ****                 I2C_1_MasterWriteByte(0xff);
 728:main.c        ****                I2C_1_MasterWriteByte(0x80);
 729:main.c        ****                 I2C_1_MasterSendStop(); 
 730:main.c        ****                CyDelay(2);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 56


 731:main.c        ****             }
 732:main.c        ****         */
 733:main.c        ****         //set main i2c mux
 734:main.c        ****     
 735:main.c        ****         
 736:main.c        ****         /*
 737:main.c        ****         for (int i = 0; i < 4; i++)
 738:main.c        ****         {
 739:main.c        ****             I2C_1_MasterSendStart(0x71, 0); 
 740:main.c        ****             I2C_1_MasterWriteByte(1<<(i+2));
 741:main.c        ****             I2C_1_MasterSendStop(); 
 742:main.c        **** 
 743:main.c        **** 
 744:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 745:main.c        ****             I2C_1_MasterWriteByte(0x0C);
 746:main.c        ****             //I2C_1_MasterSendStop();
 747:main.c        ****             I2C_1_MasterSendRestart(0x36, 1); 
 748:main.c        ****             rawAngle = I2C_1_MasterReadByte(1) << 8;
 749:main.c        ****             //I2C_1_MasterSendRestart(0x36, 1);
 750:main.c        ****             rawAngle +=  I2C_1_MasterReadByte(0);
 751:main.c        ****              I2C_1_MasterSendStop(); 
 752:main.c        ****             
 753:main.c        ****             CyDelay(1);
 754:main.c        **** 
 755:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 756:main.c        ****             I2C_1_MasterWriteByte(0x01);
 757:main.c        ****             I2C_1_MasterWriteByte(rawAngle >> 8);
 758:main.c        ****             I2C_1_MasterWriteByte(rawAngle & 0xff);
 759:main.c        ****             I2C_1_MasterWriteByte((rawAngle+700) >> 8);
 760:main.c        ****             I2C_1_MasterWriteByte((rawAngle+700) & 0xff);
 761:main.c        ****             I2C_1_MasterSendStop(); 
 762:main.c        ****             
 763:main.c        ****             CyDelay(2);
 764:main.c        **** 
 765:main.c        ****             I2C_1_MasterSendStart(0x36, 0); 
 766:main.c        ****             I2C_1_MasterWriteByte(0xff);
 767:main.c        ****             I2C_1_MasterWriteByte(0x80);
 768:main.c        ****             I2C_1_MasterSendStop(); 
 769:main.c        ****            CyDelay(2);
 770:main.c        ****         }
 771:main.c        ****             */
 772:main.c        ****         /*    
 773:main.c        ****         if (main_counter == 6)
 774:main.c        ****         {
 775:main.c        ****             main_counter = 8;
 776:main.c        ****         }
 777:main.c        ****         */    
 778:main.c        ****         testpin3_Write(1);
 2359              		.loc 1 778 0
 2360 0500 0120     		movs	r0, #1
 2361 0502 FFF7FEFF 		bl	testpin3_Write
 779:main.c        ****        //sense levers and pedals
 780:main.c        ****         if (mux_states[main_counter][0] != last_mux)
 2362              		.loc 1 780 0
 2363 0506 6B4B     		ldr	r3, .L222+8
 2364 0508 1B78     		ldrb	r3, [r3]
 2365 050a DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 57


 2366 050c 1A46     		mov	r2, r3
 2367 050e 6E4B     		ldr	r3, .L222+28
 2368 0510 13F81220 		ldrb	r2, [r3, r2, lsl #1]	@ zero_extendqisi2
 2369 0514 6D4B     		ldr	r3, .L222+32
 2370 0516 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2371 0518 9A42     		cmp	r2, r3
 2372 051a 14D0     		beq	.L83
 2373              	.LBB17:
 781:main.c        ****         {
 782:main.c        ****             I2Cbuff1[0] = 1<<mux_states[main_counter][0];
 2374              		.loc 1 782 0
 2375 051c 654B     		ldr	r3, .L222+8
 2376 051e 1B78     		ldrb	r3, [r3]
 2377 0520 DBB2     		uxtb	r3, r3
 2378 0522 1A46     		mov	r2, r3
 2379 0524 684B     		ldr	r3, .L222+28
 2380 0526 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 2381 052a 1A46     		mov	r2, r3
 2382 052c 0123     		movs	r3, #1
 2383 052e 9340     		lsls	r3, r3, r2
 2384 0530 DAB2     		uxtb	r2, r3
 2385 0532 5E4B     		ldr	r3, .L222
 2386 0534 1A70     		strb	r2, [r3]
 783:main.c        ****             uint8_t status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 2387              		.loc 1 783 0
 2388 0536 0022     		movs	r2, #0
 2389 0538 0121     		movs	r1, #1
 2390 053a 7020     		movs	r0, #112
 2391 053c FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2392 0540 0346     		mov	r3, r0
 2393 0542 87F82B30 		strb	r3, [r7, #43]
 2394              	.L83:
 2395              	.LBE17:
 784:main.c        ****         }
 785:main.c        ****         last_mux = mux_states[main_counter][0];
 2396              		.loc 1 785 0
 2397 0546 5B4B     		ldr	r3, .L222+8
 2398 0548 1B78     		ldrb	r3, [r3]
 2399 054a DBB2     		uxtb	r3, r3
 2400 054c 1A46     		mov	r2, r3
 2401 054e 5E4B     		ldr	r3, .L222+28
 2402 0550 13F81220 		ldrb	r2, [r3, r2, lsl #1]	@ zero_extendqisi2
 2403 0554 5D4B     		ldr	r3, .L222+32
 2404 0556 1A70     		strb	r2, [r3]
 786:main.c        ****         
 787:main.c        ****         
 788:main.c        ****         CyDelayUs(10);
 2405              		.loc 1 788 0
 2406 0558 0A20     		movs	r0, #10
 2407 055a FFF7FEFF 		bl	CyDelayUs
 789:main.c        ****         if (mux_states[main_counter][0] == 5)
 2408              		.loc 1 789 0
 2409 055e 554B     		ldr	r3, .L222+8
 2410 0560 1B78     		ldrb	r3, [r3]
 2411 0562 DBB2     		uxtb	r3, r3
 2412 0564 1A46     		mov	r2, r3
 2413 0566 584B     		ldr	r3, .L222+28
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 58


 2414 0568 13F81230 		ldrb	r3, [r3, r2, lsl #1]	@ zero_extendqisi2
 2415 056c 052B     		cmp	r3, #5
 2416 056e 1DD1     		bne	.L84
 790:main.c        ****         {
 791:main.c        ****             if (!i2c_skipped[main_counter])
 2417              		.loc 1 791 0
 2418 0570 504B     		ldr	r3, .L222+8
 2419 0572 1B78     		ldrb	r3, [r3]
 2420 0574 DBB2     		uxtb	r3, r3
 2421 0576 1A46     		mov	r2, r3
 2422 0578 554B     		ldr	r3, .L222+36
 2423 057a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2424 057c 002B     		cmp	r3, #0
 2425 057e 15D1     		bne	.L84
 792:main.c        ****             {
 793:main.c        ****                 I2Cbuff1[0] = 1<<mux_states[main_counter][1];
 2426              		.loc 1 793 0
 2427 0580 4C4B     		ldr	r3, .L222+8
 2428 0582 1B78     		ldrb	r3, [r3]
 2429 0584 DBB2     		uxtb	r3, r3
 2430 0586 504A     		ldr	r2, .L222+28
 2431 0588 5B00     		lsls	r3, r3, #1
 2432 058a 1344     		add	r3, r3, r2
 2433 058c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2434 058e 1A46     		mov	r2, r3
 2435 0590 0123     		movs	r3, #1
 2436 0592 9340     		lsls	r3, r3, r2
 2437 0594 DAB2     		uxtb	r2, r3
 2438 0596 454B     		ldr	r3, .L222
 2439 0598 1A70     		strb	r2, [r3]
 794:main.c        ****                 status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 2440              		.loc 1 794 0
 2441 059a 0022     		movs	r2, #0
 2442 059c 0121     		movs	r1, #1
 2443 059e 7120     		movs	r0, #113
 2444 05a0 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2445 05a4 0346     		mov	r3, r0
 2446 05a6 1A46     		mov	r2, r3
 2447 05a8 414B     		ldr	r3, .L222+4
 2448 05aa 1A60     		str	r2, [r3]
 2449              	.L84:
 795:main.c        ****             }
 796:main.c        ****         }
 797:main.c        **** 
 798:main.c        ****         CyDelayUs(10);
 2450              		.loc 1 798 0
 2451 05ac 0A20     		movs	r0, #10
 2452 05ae FFF7FEFF 		bl	CyDelayUs
 799:main.c        ****         //if it's a hall sensor
 800:main.c        **** 
 801:main.c        ****         //temporarily don't scan vertical knee lever, should be <10 normally
 802:main.c        ****         if (main_counter < 10)
 2453              		.loc 1 802 0
 2454 05b2 404B     		ldr	r3, .L222+8
 2455 05b4 1B78     		ldrb	r3, [r3]
 2456 05b6 DBB2     		uxtb	r3, r3
 2457 05b8 092B     		cmp	r3, #9
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 59


 2458 05ba 00F2BF80 		bhi	.L85
 803:main.c        ****         {
 804:main.c        ****             if (!i2c_skipped[main_counter])
 2459              		.loc 1 804 0
 2460 05be 3D4B     		ldr	r3, .L222+8
 2461 05c0 1B78     		ldrb	r3, [r3]
 2462 05c2 DBB2     		uxtb	r3, r3
 2463 05c4 1A46     		mov	r2, r3
 2464 05c6 424B     		ldr	r3, .L222+36
 2465 05c8 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2466 05ca 002B     		cmp	r3, #0
 2467 05cc 40F0B680 		bne	.L85
 805:main.c        ****             {
 806:main.c        ****                 //CyDelayUs(100);
 807:main.c        ****                 I2Cbuff1[0] = 0x0E;
 2468              		.loc 1 807 0
 2469 05d0 364B     		ldr	r3, .L222
 2470 05d2 0E22     		movs	r2, #14
 2471 05d4 1A70     		strb	r2, [r3]
 808:main.c        ****                 status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 2472              		.loc 1 808 0
 2473 05d6 0222     		movs	r2, #2
 2474 05d8 0121     		movs	r1, #1
 2475 05da 3620     		movs	r0, #54
 2476 05dc FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2477 05e0 0346     		mov	r3, r0
 2478 05e2 1A46     		mov	r2, r3
 2479 05e4 324B     		ldr	r3, .L222+4
 2480 05e6 1A60     		str	r2, [r3]
 809:main.c        ****                 if (status == 0)
 2481              		.loc 1 809 0
 2482 05e8 314B     		ldr	r3, .L222+4
 2483 05ea 1B68     		ldr	r3, [r3]
 2484 05ec 002B     		cmp	r3, #0
 2485 05ee 08D1     		bne	.L86
 810:main.c        ****                 {
 811:main.c        ****                     status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 2486              		.loc 1 811 0
 2487 05f0 0122     		movs	r2, #1
 2488 05f2 0221     		movs	r1, #2
 2489 05f4 3620     		movs	r0, #54
 2490 05f6 FFF7FEFF 		bl	I2C_MasterReadBlocking
 2491 05fa 0346     		mov	r3, r0
 2492 05fc 1A46     		mov	r2, r3
 2493 05fe 2C4B     		ldr	r3, .L222+4
 2494 0600 1A60     		str	r2, [r3]
 2495              	.L86:
 812:main.c        ****                 }
 813:main.c        ****                 if (status  == 0)
 2496              		.loc 1 813 0
 2497 0602 2B4B     		ldr	r3, .L222+4
 2498 0604 1B68     		ldr	r3, [r3]
 2499 0606 002B     		cmp	r3, #0
 2500 0608 40F09880 		bne	.L85
 814:main.c        ****                 {
 815:main.c        ****                     //CyDelayUs(100);
 816:main.c        ****                     angle[main_counter] = I2Cbuff2[0] << 8;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 60


 2501              		.loc 1 816 0
 2502 060c 294B     		ldr	r3, .L222+8
 2503 060e 1B78     		ldrb	r3, [r3]
 2504 0610 DBB2     		uxtb	r3, r3
 2505 0612 1A46     		mov	r2, r3
 2506 0614 2F4B     		ldr	r3, .L222+40
 2507 0616 1B78     		ldrb	r3, [r3]
 2508 0618 DBB2     		uxtb	r3, r3
 2509 061a 9BB2     		uxth	r3, r3
 2510 061c 1B02     		lsls	r3, r3, #8
 2511 061e 99B2     		uxth	r1, r3
 2512 0620 2D4B     		ldr	r3, .L222+44
 2513 0622 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 817:main.c        ****                     angle[main_counter] +=  I2Cbuff2[1];
 2514              		.loc 1 817 0
 2515 0626 2B4B     		ldr	r3, .L222+40
 2516 0628 5B78     		ldrb	r3, [r3, #1]
 2517 062a D8B2     		uxtb	r0, r3
 2518 062c 214B     		ldr	r3, .L222+8
 2519 062e 1B78     		ldrb	r3, [r3]
 2520 0630 DBB2     		uxtb	r3, r3
 2521 0632 1946     		mov	r1, r3
 2522 0634 1A46     		mov	r2, r3
 2523 0636 284B     		ldr	r3, .L222+44
 2524 0638 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2525 063c 83B2     		uxth	r3, r0
 2526 063e 1344     		add	r3, r3, r2
 2527 0640 9AB2     		uxth	r2, r3
 2528 0642 254B     		ldr	r3, .L222+44
 2529 0644 23F81120 		strh	r2, [r3, r1, lsl #1]	@ movhi
 818:main.c        ****                     
 819:main.c        ****                     if (calibrationMode)
 2530              		.loc 1 819 0
 2531 0648 244B     		ldr	r3, .L222+48
 2532 064a 1B68     		ldr	r3, [r3]
 2533 064c 002B     		cmp	r3, #0
 2534 064e 75D0     		beq	.L85
 820:main.c        ****                     {
 821:main.c        ****                         if (angle[main_counter] < pedals_low[main_counter])
 2535              		.loc 1 821 0
 2536 0650 184B     		ldr	r3, .L222+8
 2537 0652 1B78     		ldrb	r3, [r3]
 2538 0654 DBB2     		uxtb	r3, r3
 2539 0656 1A46     		mov	r2, r3
 2540 0658 1F4B     		ldr	r3, .L222+44
 2541 065a 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2542 065e 154B     		ldr	r3, .L222+8
 2543 0660 1B78     		ldrb	r3, [r3]
 2544 0662 DBB2     		uxtb	r3, r3
 2545 0664 1946     		mov	r1, r3
 2546 0666 1E4B     		ldr	r3, .L222+52
 2547 0668 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 2548 066c 9A42     		cmp	r2, r3
 2549 066e 47D2     		bcs	.L87
 822:main.c        ****                         {
 823:main.c        ****                             if (main_counter == 0)
 2550              		.loc 1 823 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 61


 2551 0670 104B     		ldr	r3, .L222+8
 2552 0672 1B78     		ldrb	r3, [r3]
 2553 0674 DBB2     		uxtb	r3, r3
 2554 0676 002B     		cmp	r3, #0
 2555 0678 34D1     		bne	.L88
 824:main.c        ****                             {
 825:main.c        ****                                 if (angle[main_counter] != 0)
 2556              		.loc 1 825 0
 2557 067a 0E4B     		ldr	r3, .L222+8
 2558 067c 1B78     		ldrb	r3, [r3]
 2559 067e DBB2     		uxtb	r3, r3
 2560 0680 1A46     		mov	r2, r3
 2561 0682 154B     		ldr	r3, .L222+44
 2562 0684 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2563 0688 002B     		cmp	r3, #0
 2564 068a 39D0     		beq	.L87
 826:main.c        ****                                 {
 827:main.c        ****                                      pedals_low[main_counter] = angle[main_counter];
 2565              		.loc 1 827 0
 2566 068c 094B     		ldr	r3, .L222+8
 2567 068e 1B78     		ldrb	r3, [r3]
 2568 0690 DBB2     		uxtb	r3, r3
 2569 0692 1A46     		mov	r2, r3
 2570 0694 074B     		ldr	r3, .L222+8
 2571 0696 1B78     		ldrb	r3, [r3]
 2572 0698 DBB2     		uxtb	r3, r3
 2573 069a 1946     		mov	r1, r3
 2574 069c 0E4B     		ldr	r3, .L222+44
 2575 069e 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 2576 06a2 0F4B     		ldr	r3, .L222+52
 2577 06a4 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2578 06a8 2AE0     		b	.L87
 2579              	.L223:
 2580 06aa 00BF     		.align	2
 2581              	.L222:
 2582 06ac 00000000 		.word	I2Cbuff1
 2583 06b0 00000000 		.word	status
 2584 06b4 00000000 		.word	main_counter
 2585 06b8 00000000 		.word	spis_1_ss
 2586 06bc 00000000 		.word	spis_2_ss
 2587 06c0 00000000 		.word	myArray
 2588 06c4 00000000 		.word	parseThatMF
 2589 06c8 00000000 		.word	mux_states
 2590 06cc 00000000 		.word	last_mux
 2591 06d0 00000000 		.word	i2c_skipped
 2592 06d4 00000000 		.word	I2Cbuff2
 2593 06d8 00000000 		.word	angle
 2594 06dc 00000000 		.word	calibrationMode
 2595 06e0 00000000 		.word	pedals_low
 2596              	.L88:
 828:main.c        ****                                 }
 829:main.c        ****                             }
 830:main.c        ****                             else
 831:main.c        ****                             {
 832:main.c        ****                                 pedals_low[main_counter] = angle[main_counter];
 2597              		.loc 1 832 0
 2598 06e4 9B4B     		ldr	r3, .L224
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 62


 2599 06e6 1B78     		ldrb	r3, [r3]
 2600 06e8 DBB2     		uxtb	r3, r3
 2601 06ea 1A46     		mov	r2, r3
 2602 06ec 994B     		ldr	r3, .L224
 2603 06ee 1B78     		ldrb	r3, [r3]
 2604 06f0 DBB2     		uxtb	r3, r3
 2605 06f2 1946     		mov	r1, r3
 2606 06f4 984B     		ldr	r3, .L224+4
 2607 06f6 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 2608 06fa 984B     		ldr	r3, .L224+8
 2609 06fc 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2610              	.L87:
 833:main.c        ****                             }
 834:main.c        ****                             
 835:main.c        ****                         }
 836:main.c        ****                         if (angle[main_counter] > pedals_high[main_counter])
 2611              		.loc 1 836 0
 2612 0700 944B     		ldr	r3, .L224
 2613 0702 1B78     		ldrb	r3, [r3]
 2614 0704 DBB2     		uxtb	r3, r3
 2615 0706 1A46     		mov	r2, r3
 2616 0708 934B     		ldr	r3, .L224+4
 2617 070a 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2618 070e 914B     		ldr	r3, .L224
 2619 0710 1B78     		ldrb	r3, [r3]
 2620 0712 DBB2     		uxtb	r3, r3
 2621 0714 1946     		mov	r1, r3
 2622 0716 924B     		ldr	r3, .L224+12
 2623 0718 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 2624 071c 9A42     		cmp	r2, r3
 2625 071e 0DD9     		bls	.L85
 837:main.c        ****                         {
 838:main.c        ****                              pedals_high[main_counter] = angle[main_counter];
 2626              		.loc 1 838 0
 2627 0720 8C4B     		ldr	r3, .L224
 2628 0722 1B78     		ldrb	r3, [r3]
 2629 0724 DBB2     		uxtb	r3, r3
 2630 0726 1A46     		mov	r2, r3
 2631 0728 8A4B     		ldr	r3, .L224
 2632 072a 1B78     		ldrb	r3, [r3]
 2633 072c DBB2     		uxtb	r3, r3
 2634 072e 1946     		mov	r1, r3
 2635 0730 894B     		ldr	r3, .L224+4
 2636 0732 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 2637 0736 8A4B     		ldr	r3, .L224+12
 2638 0738 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2639              	.L85:
 839:main.c        ****                         }
 840:main.c        ****                     }
 841:main.c        ****                 }
 842:main.c        ****             }
 843:main.c        ****         }
 844:main.c        ****         
 845:main.c        ****         //in addition to the hall sensor on {2,0} (the vertical knee lever) of the muxes, there is 
 846:main.c        ****         if (main_counter == 9)
 2640              		.loc 1 846 0
 2641 073c 854B     		ldr	r3, .L224
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 63


 2642 073e 1B78     		ldrb	r3, [r3]
 2643 0740 DBB2     		uxtb	r3, r3
 2644 0742 092B     		cmp	r3, #9
 2645 0744 40F08780 		bne	.L90
 847:main.c        ****         {
 848:main.c        ****             if (!i2c_skipped[main_counter])
 2646              		.loc 1 848 0
 2647 0748 824B     		ldr	r3, .L224
 2648 074a 1B78     		ldrb	r3, [r3]
 2649 074c DBB2     		uxtb	r3, r3
 2650 074e 1A46     		mov	r2, r3
 2651 0750 844B     		ldr	r3, .L224+16
 2652 0752 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2653 0754 002B     		cmp	r3, #0
 2654 0756 40F0C580 		bne	.L94
 849:main.c        ****             {
 850:main.c        ****                 //scan the knob adc
 851:main.c        ****                 I2Cbuff1[0] = 0x0;      
 2655              		.loc 1 851 0
 2656 075a 834B     		ldr	r3, .L224+20
 2657 075c 0022     		movs	r2, #0
 2658 075e 1A70     		strb	r2, [r3]
 852:main.c        ****                 status = I2C_MasterReadBlocking(0x35, 16, I2C_1_MODE_COMPLETE_XFER);
 2659              		.loc 1 852 0
 2660 0760 0022     		movs	r2, #0
 2661 0762 1021     		movs	r1, #16
 2662 0764 3520     		movs	r0, #53
 2663 0766 FFF7FEFF 		bl	I2C_MasterReadBlocking
 2664 076a 0346     		mov	r3, r0
 2665 076c 1A46     		mov	r2, r3
 2666 076e 7F4B     		ldr	r3, .L224+24
 2667 0770 1A60     		str	r2, [r3]
 853:main.c        ****                 if (status == 0)
 2668              		.loc 1 853 0
 2669 0772 7E4B     		ldr	r3, .L224+24
 2670 0774 1B68     		ldr	r3, [r3]
 2671 0776 002B     		cmp	r3, #0
 2672 0778 40F0B480 		bne	.L94
 2673              	.LBB18:
 854:main.c        ****                 {
 855:main.c        ****                     for (int i = 0; i < NUM_MACROS; i++)
 2674              		.loc 1 855 0
 2675 077c 0023     		movs	r3, #0
 2676 077e 7B67     		str	r3, [r7, #116]
 2677 0780 20E0     		b	.L92
 2678              	.L93:
 2679              	.LBB19:
 856:main.c        ****                     {
 857:main.c        ****                        uint16_t tempInt =((I2Cbuff2[i*2] << 8) + (I2Cbuff2[i*2] & 255)) & 4095; // 
 2680              		.loc 1 857 0 discriminator 3
 2681 0782 7B6F     		ldr	r3, [r7, #116]
 2682 0784 5B00     		lsls	r3, r3, #1
 2683 0786 7A4A     		ldr	r2, .L224+28
 2684 0788 D35C     		ldrb	r3, [r2, r3]
 2685 078a DBB2     		uxtb	r3, r3
 2686 078c 9BB2     		uxth	r3, r3
 2687 078e 1B02     		lsls	r3, r3, #8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 64


 2688 0790 9AB2     		uxth	r2, r3
 2689 0792 7B6F     		ldr	r3, [r7, #116]
 2690 0794 5B00     		lsls	r3, r3, #1
 2691 0796 7649     		ldr	r1, .L224+28
 2692 0798 CB5C     		ldrb	r3, [r1, r3]
 2693 079a DBB2     		uxtb	r3, r3
 2694 079c 9BB2     		uxth	r3, r3
 2695 079e 1344     		add	r3, r3, r2
 2696 07a0 9BB2     		uxth	r3, r3
 2697 07a2 C3F30B03 		ubfx	r3, r3, #0, #12
 2698 07a6 7B80     		strh	r3, [r7, #2]	@ movhi
 858:main.c        ****                         macroKnobValues[i] = 255 - (tempInt >> 4); //now squish it down to 8 bit fo
 2699              		.loc 1 858 0 discriminator 3
 2700 07a8 7B88     		ldrh	r3, [r7, #2]
 2701 07aa 1B09     		lsrs	r3, r3, #4
 2702 07ac 9BB2     		uxth	r3, r3
 2703 07ae DBB2     		uxtb	r3, r3
 2704 07b0 DB43     		mvns	r3, r3
 2705 07b2 D9B2     		uxtb	r1, r3
 2706 07b4 6F4A     		ldr	r2, .L224+32
 2707 07b6 7B6F     		ldr	r3, [r7, #116]
 2708 07b8 1344     		add	r3, r3, r2
 2709 07ba 0A46     		mov	r2, r1
 2710 07bc 1A70     		strb	r2, [r3]
 2711              	.LBE19:
 855:main.c        ****                     {
 2712              		.loc 1 855 0 discriminator 3
 2713 07be 7B6F     		ldr	r3, [r7, #116]
 2714 07c0 0133     		adds	r3, r3, #1
 2715 07c2 7B67     		str	r3, [r7, #116]
 2716              	.L92:
 855:main.c        ****                     {
 2717              		.loc 1 855 0 is_stmt 0 discriminator 1
 2718 07c4 7B6F     		ldr	r3, [r7, #116]
 2719 07c6 072B     		cmp	r3, #7
 2720 07c8 DBDD     		ble	.L93
 2721              	.LBE18:
 859:main.c        ****                     }
 860:main.c        ****                     //
 861:main.c        ****                     if (macroOLEDWaitingToSend == 2)
 2722              		.loc 1 861 0 is_stmt 1
 2723 07ca 6B4B     		ldr	r3, .L224+36
 2724 07cc 1B68     		ldr	r3, [r3]
 2725 07ce 022B     		cmp	r3, #2
 2726 07d0 40F08880 		bne	.L94
 862:main.c        ****                     {
 863:main.c        ****                         //send the data to the little macro OLED screens
 864:main.c        ****                         
 865:main.c        ****                         I2Cbuff1[0] = (1 << 3) + whichMacro;
 2727              		.loc 1 865 0
 2728 07d4 694B     		ldr	r3, .L224+40
 2729 07d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2730 07d8 0833     		adds	r3, r3, #8
 2731 07da DAB2     		uxtb	r2, r3
 2732 07dc 624B     		ldr	r3, .L224+20
 2733 07de 1A70     		strb	r2, [r3]
 866:main.c        ****                         status = I2C_MasterWriteBlocking(0x72, 1, I2C_1_MODE_COMPLETE_XFER); 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 65


 2734              		.loc 1 866 0
 2735 07e0 0022     		movs	r2, #0
 2736 07e2 0121     		movs	r1, #1
 2737 07e4 7220     		movs	r0, #114
 2738 07e6 FFF7FEFF 		bl	I2C_MasterWriteBlocking
 2739 07ea 0346     		mov	r3, r0
 2740 07ec 1A46     		mov	r2, r3
 2741 07ee 5F4B     		ldr	r3, .L224+24
 2742 07f0 1A60     		str	r2, [r3]
 867:main.c        ****                         //OLED_init(128, 32);
 868:main.c        ****                         OLEDclear(128, 32);
 2743              		.loc 1 868 0
 2744 07f2 2021     		movs	r1, #32
 2745 07f4 8020     		movs	r0, #128
 2746 07f6 FFF7FEFF 		bl	OLEDclear
 869:main.c        ****                         //OLEDwriteInt(w , 1, 0,FirstLine);
 870:main.c        ****                         //OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 871:main.c        ****                         myGFX_setFont(1);
 2747              		.loc 1 871 0
 2748 07fa 0120     		movs	r0, #1
 2749 07fc FFF7FEFF 		bl	myGFX_setFont
 872:main.c        ****                         //GFXsetFont(&theGFX,  &SourceCodePro_Regular14pt7b);
 873:main.c        ****                         OLEDwriteString((char *)&macroNamesArray[patchNum][whichMacro][0], MACRO_CL
 2750              		.loc 1 873 0
 2751 0800 5F4B     		ldr	r3, .L224+44
 2752 0802 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2753 0804 1946     		mov	r1, r3
 2754 0806 5D4B     		ldr	r3, .L224+40
 2755 0808 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2756 080a 1A46     		mov	r2, r3
 2757 080c D200     		lsls	r2, r2, #3
 2758 080e D21A     		subs	r2, r2, r3
 2759 0810 5300     		lsls	r3, r2, #1
 2760 0812 1A46     		mov	r2, r3
 2761 0814 0B46     		mov	r3, r1
 2762 0816 DB00     		lsls	r3, r3, #3
 2763 0818 5B1A     		subs	r3, r3, r1
 2764 081a 1B01     		lsls	r3, r3, #4
 2765 081c 1344     		add	r3, r3, r2
 2766 081e 594A     		ldr	r2, .L224+48
 2767 0820 9818     		adds	r0, r3, r2
 2768 0822 0123     		movs	r3, #1
 2769 0824 0022     		movs	r2, #0
 2770 0826 0821     		movs	r1, #8
 2771 0828 FFF7FEFF 		bl	OLEDwriteString
 874:main.c        ****                         OLED_draw(128, 32);
 2772              		.loc 1 874 0
 2773 082c 2021     		movs	r1, #32
 2774 082e 8020     		movs	r0, #128
 2775 0830 FFF7FEFF 		bl	OLED_draw
 875:main.c        **** 
 876:main.c        ****                         whichMacro++;
 2776              		.loc 1 876 0
 2777 0834 514B     		ldr	r3, .L224+40
 2778 0836 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2779 0838 0133     		adds	r3, r3, #1
 2780 083a DAB2     		uxtb	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 66


 2781 083c 4F4B     		ldr	r3, .L224+40
 2782 083e 1A70     		strb	r2, [r3]
 877:main.c        ****                         if (whichMacro >=8)
 2783              		.loc 1 877 0
 2784 0840 4E4B     		ldr	r3, .L224+40
 2785 0842 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2786 0844 072B     		cmp	r3, #7
 2787 0846 4DD9     		bls	.L94
 878:main.c        ****                         {
 879:main.c        ****                             macroOLEDWaitingToSend = 0;
 2788              		.loc 1 879 0
 2789 0848 4B4B     		ldr	r3, .L224+36
 2790 084a 0022     		movs	r2, #0
 2791 084c 1A60     		str	r2, [r3]
 880:main.c        ****                             whichMacro = 0;
 2792              		.loc 1 880 0
 2793 084e 4B4B     		ldr	r3, .L224+40
 2794 0850 0022     		movs	r2, #0
 2795 0852 1A70     		strb	r2, [r3]
 2796 0854 46E0     		b	.L94
 2797              	.L90:
 881:main.c        ****                         }
 882:main.c        ****                     }
 883:main.c        ****                 }
 884:main.c        ****             }
 885:main.c        ****             
 886:main.c        ****         }
 887:main.c        ****         //otherwise it's the ADC for the foot pedal
 888:main.c        ****         else if (main_counter == 10)
 2798              		.loc 1 888 0
 2799 0856 3F4B     		ldr	r3, .L224
 2800 0858 1B78     		ldrb	r3, [r3]
 2801 085a DBB2     		uxtb	r3, r3
 2802 085c 0A2B     		cmp	r3, #10
 2803 085e 2AD1     		bne	.L95
 889:main.c        ****         {
 890:main.c        ****             //0x4f (0x4D?) is the 7=-bit version of the MCP3221 address, might need to be shifted o
 891:main.c        ****             if (!i2c_skipped[main_counter])
 2804              		.loc 1 891 0
 2805 0860 3C4B     		ldr	r3, .L224
 2806 0862 1B78     		ldrb	r3, [r3]
 2807 0864 DBB2     		uxtb	r3, r3
 2808 0866 1A46     		mov	r2, r3
 2809 0868 3E4B     		ldr	r3, .L224+16
 2810 086a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 2811 086c 002B     		cmp	r3, #0
 2812 086e 39D1     		bne	.L94
 892:main.c        ****             {
 893:main.c        ****                 I2Cbuff1[0] = 0x0;      
 2813              		.loc 1 893 0
 2814 0870 3D4B     		ldr	r3, .L224+20
 2815 0872 0022     		movs	r2, #0
 2816 0874 1A70     		strb	r2, [r3]
 894:main.c        ****                 status = I2C_MasterReadBlocking(0x4f, 2, I2C_1_MODE_COMPLETE_XFER);
 2817              		.loc 1 894 0
 2818 0876 0022     		movs	r2, #0
 2819 0878 0221     		movs	r1, #2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 67


 2820 087a 4F20     		movs	r0, #79
 2821 087c FFF7FEFF 		bl	I2C_MasterReadBlocking
 2822 0880 0346     		mov	r3, r0
 2823 0882 1A46     		mov	r2, r3
 2824 0884 394B     		ldr	r3, .L224+24
 2825 0886 1A60     		str	r2, [r3]
 895:main.c        ****                 if (status == 0)
 2826              		.loc 1 895 0
 2827 0888 384B     		ldr	r3, .L224+24
 2828 088a 1B68     		ldr	r3, [r3]
 2829 088c 002B     		cmp	r3, #0
 2830 088e 29D1     		bne	.L94
 896:main.c        ****                 {
 897:main.c        ****                     volumePedal = I2Cbuff2[0] << 8;
 2831              		.loc 1 897 0
 2832 0890 374B     		ldr	r3, .L224+28
 2833 0892 1B78     		ldrb	r3, [r3]
 2834 0894 DBB2     		uxtb	r3, r3
 2835 0896 9BB2     		uxth	r3, r3
 2836 0898 1B02     		lsls	r3, r3, #8
 2837 089a 9AB2     		uxth	r2, r3
 2838 089c 3A4B     		ldr	r3, .L224+52
 2839 089e 1A80     		strh	r2, [r3]	@ movhi
 898:main.c        ****                     volumePedal +=  I2Cbuff2[1];
 2840              		.loc 1 898 0
 2841 08a0 334B     		ldr	r3, .L224+28
 2842 08a2 5B78     		ldrb	r3, [r3, #1]
 2843 08a4 DBB2     		uxtb	r3, r3
 2844 08a6 9AB2     		uxth	r2, r3
 2845 08a8 374B     		ldr	r3, .L224+52
 2846 08aa 1B88     		ldrh	r3, [r3]
 2847 08ac 1344     		add	r3, r3, r2
 2848 08ae 9AB2     		uxth	r2, r3
 2849 08b0 354B     		ldr	r3, .L224+52
 2850 08b2 1A80     		strh	r2, [r3]	@ movhi
 2851 08b4 16E0     		b	.L94
 2852              	.L95:
 899:main.c        ****                 }
 900:main.c        ****             }
 901:main.c        ****         }
 902:main.c        ****         else
 903:main.c        ****         if (main_counter == 11)
 2853              		.loc 1 903 0
 2854 08b6 274B     		ldr	r3, .L224
 2855 08b8 1B78     		ldrb	r3, [r3]
 2856 08ba DBB2     		uxtb	r3, r3
 2857 08bc 0B2B     		cmp	r3, #11
 2858 08be 11D1     		bne	.L94
 904:main.c        ****         { 
 905:main.c        ****             if (mainOLEDWaitingToSend)
 2859              		.loc 1 905 0
 2860 08c0 324B     		ldr	r3, .L224+56
 2861 08c2 1B68     		ldr	r3, [r3]
 2862 08c4 002B     		cmp	r3, #0
 2863 08c6 06D0     		beq	.L97
 906:main.c        ****             {
 907:main.c        ****                 OLED_draw(128, 64);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 68


 2864              		.loc 1 907 0
 2865 08c8 4021     		movs	r1, #64
 2866 08ca 8020     		movs	r0, #128
 2867 08cc FFF7FEFF 		bl	OLED_draw
 908:main.c        ****                 mainOLEDWaitingToSend = 0;
 2868              		.loc 1 908 0
 2869 08d0 2E4B     		ldr	r3, .L224+56
 2870 08d2 0022     		movs	r2, #0
 2871 08d4 1A60     		str	r2, [r3]
 2872              	.L97:
 909:main.c        ****             }
 910:main.c        ****             if (macroOLEDWaitingToSend == 1)
 2873              		.loc 1 910 0
 2874 08d6 284B     		ldr	r3, .L224+36
 2875 08d8 1B68     		ldr	r3, [r3]
 2876 08da 012B     		cmp	r3, #1
 2877 08dc 02D1     		bne	.L94
 911:main.c        ****             {
 912:main.c        ****                 macroOLEDWaitingToSend = 2;
 2878              		.loc 1 912 0
 2879 08de 264B     		ldr	r3, .L224+36
 2880 08e0 0222     		movs	r2, #2
 2881 08e2 1A60     		str	r2, [r3]
 2882              	.L94:
 913:main.c        ****             }
 914:main.c        ****             
 915:main.c        ****             #if 0
 916:main.c        ****             if (OLEDcount == 0)
 917:main.c        ****             {
 918:main.c        ****                 OLEDclearLine(FirstLine);
 919:main.c        ****             }
 920:main.c        ****             else if (OLEDcount == 1)
 921:main.c        ****             {
 922:main.c        ****                 OLEDwriteInt(encoderNum, 2, 0, FirstLine);
 923:main.c        **** 		    }
 924:main.c        ****             else if (OLEDcount == 2)
 925:main.c        ****             {
 926:main.c        ****                 OLEDwriteString(" ", 1, OLEDgetCursor(), FirstLine);
 927:main.c        ****             }
 928:main.c        ****             else if (OLEDcount == 3)
 929:main.c        ****             {
 930:main.c        ****                 OLEDwriteInt(encoderVal[encoderNum], 3, OLEDgetCursor(), FirstLine);
 931:main.c        ****             }
 932:main.c        ****             else if (OLEDcount == 4)
 933:main.c        ****             {
 934:main.c        ****                 OLEDwriteString("     ", 5, OLEDgetCursor(), FirstLine);
 935:main.c        ****             }
 936:main.c        ****             else if (OLEDcount == 5)
 937:main.c        ****             {
 938:main.c        ****                 OLEDwriteInt(patchNum, 2, OLEDgetCursor(), FirstLine);
 939:main.c        ****             }
 940:main.c        ****             else if (OLEDcount == 6)
 941:main.c        ****             {
 942:main.c        ****                 //OLED_drawFirstLine();
 943:main.c        ****                 
 944:main.c        ****                 //OLEDwriteInt( bar[0] , 6, 0,SecondLine);
 945:main.c        ****                 //OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 69


 946:main.c        ****                 //OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 947:main.c        ****                 //OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], NAME_LENGTH_IN_B
 948:main.c        ****                  //OLED_draw();
 949:main.c        ****             }
 950:main.c        ****             OLEDcount++;
 951:main.c        ****             if (OLEDcount > 6)
 952:main.c        ****             {
 953:main.c        ****                 OLEDcount = 0;
 954:main.c        ****             }
 955:main.c        ****             #endif
 956:main.c        ****         }
 957:main.c        **** 
 958:main.c        ****         /*
 959:main.c        ****         I2Cbuff1[0] = 1<<main_counter;
 960:main.c        ****         uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 961:main.c        **** 
 962:main.c        ****                 for (int i = 0; i < 5; i++)
 963:main.c        ****                 {
 964:main.c        ****                     I2Cbuff1[0] = 1<<i;
 965:main.c        ****                     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 966:main.c        **** 
 967:main.c        ****                     I2Cbuff1[0] = 0x0E;
 968:main.c        ****                     status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 969:main.c        **** 
 970:main.c        ****                     status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 971:main.c        **** 
 972:main.c        **** 
 973:main.c        ****                     angle[i] = I2Cbuff2[0] << 8;
 974:main.c        ****                     angle[i] +=  I2Cbuff2[1];
 975:main.c        ****                 }
 976:main.c        ****             if (main_counter == 0)
 977:main.c        ****             {               
 978:main.c        ****                 I2Cbuff1[0] = 1<<main_counter;
 979:main.c        ****                 uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
 980:main.c        **** 
 981:main.c        ****                 for (int i = 0; i < 5; i++)
 982:main.c        ****                 {
 983:main.c        ****                     I2Cbuff1[0] = 1<<i;
 984:main.c        ****                     status = I2C_MasterWriteBlocking(0x70, 1, I2C_1_MODE_COMPLETE_XFER);
 985:main.c        **** 
 986:main.c        ****                     I2Cbuff1[0] = 0x0E;
 987:main.c        ****                     status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
 988:main.c        **** 
 989:main.c        ****                     status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
 990:main.c        **** 
 991:main.c        **** 
 992:main.c        ****                     angle[i] = I2Cbuff2[0] << 8;
 993:main.c        ****                     angle[i] +=  I2Cbuff2[1];
 994:main.c        ****                 }
 995:main.c        ****             }
 996:main.c        ****             else
 997:main.c        ****             {
 998:main.c        ****                 I2Cbuff1[0] = 1<<(main_counter+1);
 999:main.c        ****                 uint8_t status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1000:main.c        ****                 I2Cbuff1[0] = 0x0E;
1001:main.c        ****                 status = I2C_MasterWriteBlocking(0x36, 1, I2C_1_MODE_NO_STOP);
1002:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 70


1003:main.c        ****                 {
1004:main.c        ****                     I2Cbuff1[0] = 1<<(main_counter+1);
1005:main.c        ****                     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1006:main.c        ****                 }
1007:main.c        ****            
1008:main.c        **** 
1009:main.c        **** 
1010:main.c        ****                 status = I2C_MasterReadBlocking(0x36, 2, I2C_1_MODE_REPEAT_START);
1011:main.c        ****                  //I2C_1_MasterReadBuf(0x36, I2Cbuff3, 2, I2C_1_MODE_REPEAT_START);
1012:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
1013:main.c        ****                 {
1014:main.c        ****                     I2Cbuff1[0] = 1<<(main_counter+1);
1015:main.c        ****                     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1016:main.c        ****                 }
1017:main.c        ****                 
1018:main.c        ****                 angle[main_counter+4] = I2Cbuff2[0] << 8;
1019:main.c        ****                 angle[main_counter+4] +=  I2Cbuff2[1];
1020:main.c        ****             }    
1021:main.c        ****                 
1022:main.c        **** 
1023:main.c        ****             send_it = 1;
1024:main.c        ****         }
1025:main.c        ****         */
1026:main.c        ****         
1027:main.c        ****         if (main_counter < 10)
 2883              		.loc 1 1027 0
 2884 08e4 1B4B     		ldr	r3, .L224
 2885 08e6 1B78     		ldrb	r3, [r3]
 2886 08e8 DBB2     		uxtb	r3, r3
 2887 08ea 092B     		cmp	r3, #9
 2888 08ec 00F2EC80 		bhi	.L98
 2889              	.LBB20:
1028:main.c        ****         {
1029:main.c        ****             
1030:main.c        ****             //do math to make all pedals and levers report between 0 and 4095 scaled
1031:main.c        ****             int16_t tempangle = ((int16_t) angle[main_counter] - (int16_t)pedals_low[main_counter])
 2890              		.loc 1 1031 0
 2891 08f0 184B     		ldr	r3, .L224
 2892 08f2 1B78     		ldrb	r3, [r3]
 2893 08f4 DBB2     		uxtb	r3, r3
 2894 08f6 1A46     		mov	r2, r3
 2895 08f8 174B     		ldr	r3, .L224+4
 2896 08fa 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 2897 08fe 154B     		ldr	r3, .L224
 2898 0900 1B78     		ldrb	r3, [r3]
 2899 0902 DBB2     		uxtb	r3, r3
 2900 0904 1946     		mov	r1, r3
 2901 0906 154B     		ldr	r3, .L224+8
 2902 0908 33F81130 		ldrh	r3, [r3, r1, lsl #1]
 2903 090c D31A     		subs	r3, r2, r3
 2904 090e 9BB2     		uxth	r3, r3
 2905 0910 3B85     		strh	r3, [r7, #40]	@ movhi
1032:main.c        ****             
1033:main.c        ****             if (tempangle > 0)
 2906              		.loc 1 1033 0
 2907 0912 B7F92830 		ldrsh	r3, [r7, #40]
 2908 0916 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 71


 2909 0918 3EDD     		ble	.L99
1034:main.c        ****             {
1035:main.c        ****                 processed_pedals[main_counter] = (float)tempangle * pedalRatios[main_counter];
 2910              		.loc 1 1035 0
 2911 091a 0E4B     		ldr	r3, .L224
 2912 091c 1B78     		ldrb	r3, [r3]
 2913 091e DBB2     		uxtb	r3, r3
 2914 0920 1C46     		mov	r4, r3
 2915 0922 B7F92830 		ldrsh	r3, [r7, #40]
 2916 0926 1846     		mov	r0, r3
 2917 0928 FFF7FEFF 		bl	__aeabi_i2f
 2918 092c 094B     		ldr	r3, .L224
 2919 092e 1B78     		ldrb	r3, [r3]
 2920 0930 DBB2     		uxtb	r3, r3
 2921 0932 1A46     		mov	r2, r3
 2922 0934 164B     		ldr	r3, .L224+60
 2923 0936 53F82230 		ldr	r3, [r3, r2, lsl #2]	@ float
 2924 093a 1946     		mov	r1, r3
 2925 093c FFF7FEFF 		bl	__aeabi_fmul
 2926 0940 0346     		mov	r3, r0
 2927 0942 1846     		mov	r0, r3
 2928 0944 FFF7FEFF 		bl	__aeabi_f2uiz
 2929 0948 0346     		mov	r3, r0
 2930 094a 9AB2     		uxth	r2, r3
 2931 094c 114B     		ldr	r3, .L224+64
 2932 094e 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
 2933 0952 29E0     		b	.L100
 2934              	.L225:
 2935              		.align	2
 2936              	.L224:
 2937 0954 00000000 		.word	main_counter
 2938 0958 00000000 		.word	angle
 2939 095c 00000000 		.word	pedals_low
 2940 0960 00000000 		.word	pedals_high
 2941 0964 00000000 		.word	i2c_skipped
 2942 0968 00000000 		.word	I2Cbuff1
 2943 096c 00000000 		.word	status
 2944 0970 00000000 		.word	I2Cbuff2
 2945 0974 00000000 		.word	macroKnobValues
 2946 0978 00000000 		.word	macroOLEDWaitingToSend
 2947 097c 00000000 		.word	whichMacro
 2948 0980 00000000 		.word	patchNum
 2949 0984 00000000 		.word	macroNamesArray
 2950 0988 00000000 		.word	volumePedal
 2951 098c 00000000 		.word	mainOLEDWaitingToSend
 2952 0990 00000000 		.word	pedalRatios
 2953 0994 00000000 		.word	processed_pedals
 2954              	.L99:
1036:main.c        ****             }
1037:main.c        ****             else
1038:main.c        ****             {
1039:main.c        ****                 processed_pedals[main_counter] = 0;
 2955              		.loc 1 1039 0
 2956 0998 864B     		ldr	r3, .L226
 2957 099a 1B78     		ldrb	r3, [r3]
 2958 099c DBB2     		uxtb	r3, r3
 2959 099e 1A46     		mov	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 72


 2960 09a0 854B     		ldr	r3, .L226+4
 2961 09a2 0021     		movs	r1, #0
 2962 09a4 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2963              	.L100:
1040:main.c        ****             }
1041:main.c        ****             if (processed_pedals[main_counter] > 4095)
 2964              		.loc 1 1041 0
 2965 09a8 824B     		ldr	r3, .L226
 2966 09aa 1B78     		ldrb	r3, [r3]
 2967 09ac DBB2     		uxtb	r3, r3
 2968 09ae 1A46     		mov	r2, r3
 2969 09b0 814B     		ldr	r3, .L226+4
 2970 09b2 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2971 09b6 B3F5805F 		cmp	r3, #4096
 2972 09ba 08D3     		bcc	.L101
1042:main.c        ****             {
1043:main.c        ****                 processed_pedals[main_counter] = 4095;
 2973              		.loc 1 1043 0
 2974 09bc 7D4B     		ldr	r3, .L226
 2975 09be 1B78     		ldrb	r3, [r3]
 2976 09c0 DBB2     		uxtb	r3, r3
 2977 09c2 1A46     		mov	r2, r3
 2978 09c4 7C4B     		ldr	r3, .L226+4
 2979 09c6 40F6FF71 		movw	r1, #4095
 2980 09ca 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 2981              	.L101:
1044:main.c        ****             }
1045:main.c        ****             
1046:main.c        ****             
1047:main.c        ****             //if ( processed_pedals[main_counter] != prev_processed_pedals[main_counter])
1048:main.c        ****             {
1049:main.c        ****                 //sendMIDIControlChange(main_counter, (processed_pedals[main_counter] >> 7), 1);
1050:main.c        ****                 //sendMIDIControlChange(main_counter+36, (processed_pedals[main_counter] & 127), 1)
1051:main.c        ****             }
1052:main.c        ****             pedals_float[main_counter] = (float)processed_pedals[main_counter] * 2.442002442002442e
 2982              		.loc 1 1052 0
 2983 09ce 794B     		ldr	r3, .L226
 2984 09d0 1B78     		ldrb	r3, [r3]
 2985 09d2 DBB2     		uxtb	r3, r3
 2986 09d4 1C46     		mov	r4, r3
 2987 09d6 774B     		ldr	r3, .L226
 2988 09d8 1B78     		ldrb	r3, [r3]
 2989 09da DBB2     		uxtb	r3, r3
 2990 09dc 1A46     		mov	r2, r3
 2991 09de 764B     		ldr	r3, .L226+4
 2992 09e0 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 2993 09e4 1846     		mov	r0, r3
 2994 09e6 FFF7FEFF 		bl	__aeabi_ui2f
 2995 09ea 0346     		mov	r3, r0
 2996 09ec 7349     		ldr	r1, .L226+8
 2997 09ee 1846     		mov	r0, r3
 2998 09f0 FFF7FEFF 		bl	__aeabi_fmul
 2999 09f4 0346     		mov	r3, r0
 3000 09f6 1A46     		mov	r2, r3
 3001 09f8 714B     		ldr	r3, .L226+12
 3002 09fa 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
1053:main.c        ****             pedals8bit[main_counter] = (float)processed_pedals[pedal_cc_assignments[main_counter]] 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 73


 3003              		.loc 1 1053 0
 3004 09fe 6D4B     		ldr	r3, .L226
 3005 0a00 1B78     		ldrb	r3, [r3]
 3006 0a02 DBB2     		uxtb	r3, r3
 3007 0a04 1C46     		mov	r4, r3
 3008 0a06 6B4B     		ldr	r3, .L226
 3009 0a08 1B78     		ldrb	r3, [r3]
 3010 0a0a DBB2     		uxtb	r3, r3
 3011 0a0c 1A46     		mov	r2, r3
 3012 0a0e 6D4B     		ldr	r3, .L226+16
 3013 0a10 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 3014 0a12 1A46     		mov	r2, r3
 3015 0a14 684B     		ldr	r3, .L226+4
 3016 0a16 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3017 0a1a 1846     		mov	r0, r3
 3018 0a1c FFF7FEFF 		bl	__aeabi_ui2f
 3019 0a20 0346     		mov	r3, r0
 3020 0a22 4FF07651 		mov	r1, #1031798784
 3021 0a26 1846     		mov	r0, r3
 3022 0a28 FFF7FEFF 		bl	__aeabi_fmul
 3023 0a2c 0346     		mov	r3, r0
 3024 0a2e 1846     		mov	r0, r3
 3025 0a30 FFF7FEFF 		bl	__aeabi_f2uiz
 3026 0a34 0346     		mov	r3, r0
 3027 0a36 DAB2     		uxtb	r2, r3
 3028 0a38 634B     		ldr	r3, .L226+20
 3029 0a3a 1A55     		strb	r2, [r3, r4]
1054:main.c        ****             pedals7bit[main_counter] = pedals8bit[main_counter] >> 1;
 3030              		.loc 1 1054 0
 3031 0a3c 5D4B     		ldr	r3, .L226
 3032 0a3e 1B78     		ldrb	r3, [r3]
 3033 0a40 DBB2     		uxtb	r3, r3
 3034 0a42 1A46     		mov	r2, r3
 3035 0a44 5B4B     		ldr	r3, .L226
 3036 0a46 1B78     		ldrb	r3, [r3]
 3037 0a48 DBB2     		uxtb	r3, r3
 3038 0a4a 1946     		mov	r1, r3
 3039 0a4c 5E4B     		ldr	r3, .L226+20
 3040 0a4e 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 3041 0a50 5B08     		lsrs	r3, r3, #1
 3042 0a52 D9B2     		uxtb	r1, r3
 3043 0a54 5D4B     		ldr	r3, .L226+24
 3044 0a56 9954     		strb	r1, [r3, r2]
1055:main.c        ****             if (pedals7bit[main_counter] != prevPedals7bit[main_counter])
 3045              		.loc 1 1055 0
 3046 0a58 564B     		ldr	r3, .L226
 3047 0a5a 1B78     		ldrb	r3, [r3]
 3048 0a5c DBB2     		uxtb	r3, r3
 3049 0a5e 1A46     		mov	r2, r3
 3050 0a60 5A4B     		ldr	r3, .L226+24
 3051 0a62 9A5C     		ldrb	r2, [r3, r2]	@ zero_extendqisi2
 3052 0a64 534B     		ldr	r3, .L226
 3053 0a66 1B78     		ldrb	r3, [r3]
 3054 0a68 DBB2     		uxtb	r3, r3
 3055 0a6a 1946     		mov	r1, r3
 3056 0a6c 584B     		ldr	r3, .L226+28
 3057 0a6e 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 74


 3058 0a70 9A42     		cmp	r2, r3
 3059 0a72 0ED0     		beq	.L102
1056:main.c        ****             {
1057:main.c        ****                 sendMIDIControlChange(main_counter + 14, (pedals7bit[main_counter]), 1);
 3060              		.loc 1 1057 0
 3061 0a74 4F4B     		ldr	r3, .L226
 3062 0a76 1B78     		ldrb	r3, [r3]
 3063 0a78 DBB2     		uxtb	r3, r3
 3064 0a7a 03F10E00 		add	r0, r3, #14
 3065 0a7e 4D4B     		ldr	r3, .L226
 3066 0a80 1B78     		ldrb	r3, [r3]
 3067 0a82 DBB2     		uxtb	r3, r3
 3068 0a84 1A46     		mov	r2, r3
 3069 0a86 514B     		ldr	r3, .L226+24
 3070 0a88 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 3071 0a8a 0122     		movs	r2, #1
 3072 0a8c 1946     		mov	r1, r3
 3073 0a8e FFF7FEFF 		bl	sendMIDIControlChange
 3074              	.L102:
1058:main.c        ****             }
1059:main.c        ****             prevPedals7bit[main_counter] = pedals7bit[main_counter];
 3075              		.loc 1 1059 0
 3076 0a92 484B     		ldr	r3, .L226
 3077 0a94 1B78     		ldrb	r3, [r3]
 3078 0a96 DBB2     		uxtb	r3, r3
 3079 0a98 1A46     		mov	r2, r3
 3080 0a9a 464B     		ldr	r3, .L226
 3081 0a9c 1B78     		ldrb	r3, [r3]
 3082 0a9e DBB2     		uxtb	r3, r3
 3083 0aa0 1946     		mov	r1, r3
 3084 0aa2 4A4B     		ldr	r3, .L226+24
 3085 0aa4 595C     		ldrb	r1, [r3, r1]	@ zero_extendqisi2
 3086 0aa6 4A4B     		ldr	r3, .L226+28
 3087 0aa8 9954     		strb	r1, [r3, r2]
1060:main.c        ****             prev_processed_pedals[main_counter] = processed_pedals[main_counter];
 3088              		.loc 1 1060 0
 3089 0aaa 424B     		ldr	r3, .L226
 3090 0aac 1B78     		ldrb	r3, [r3]
 3091 0aae DBB2     		uxtb	r3, r3
 3092 0ab0 1A46     		mov	r2, r3
 3093 0ab2 404B     		ldr	r3, .L226
 3094 0ab4 1B78     		ldrb	r3, [r3]
 3095 0ab6 DBB2     		uxtb	r3, r3
 3096 0ab8 1946     		mov	r1, r3
 3097 0aba 3F4B     		ldr	r3, .L226+4
 3098 0abc 33F81110 		ldrh	r1, [r3, r1, lsl #1]
 3099 0ac0 444B     		ldr	r3, .L226+32
 3100 0ac2 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 3101              	.LBE20:
 3102 0ac6 3DE0     		b	.L103
 3103              	.L98:
1061:main.c        ****         }
1062:main.c        ****         else
1063:main.c        ****         {
1064:main.c        ****             processed_volumePedal = (float)volumePedal * 1.007378258730939f; //compensate for lower
 3104              		.loc 1 1064 0
 3105 0ac8 434B     		ldr	r3, .L226+36
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 75


 3106 0aca 1B88     		ldrh	r3, [r3]
 3107 0acc 1846     		mov	r0, r3
 3108 0ace FFF7FEFF 		bl	__aeabi_ui2f
 3109 0ad2 0346     		mov	r3, r0
 3110 0ad4 4149     		ldr	r1, .L226+40
 3111 0ad6 1846     		mov	r0, r3
 3112 0ad8 FFF7FEFF 		bl	__aeabi_fmul
 3113 0adc 0346     		mov	r3, r0
 3114 0ade 1846     		mov	r0, r3
 3115 0ae0 FFF7FEFF 		bl	__aeabi_f2iz
 3116 0ae4 0346     		mov	r3, r0
 3117 0ae6 1AB2     		sxth	r2, r3
 3118 0ae8 3D4B     		ldr	r3, .L226+44
 3119 0aea 1A80     		strh	r2, [r3]	@ movhi
1065:main.c        **** 
1066:main.c        ****             if (processed_volumePedal < 0)
 3120              		.loc 1 1066 0
 3121 0aec 3C4B     		ldr	r3, .L226+44
 3122 0aee B3F90030 		ldrsh	r3, [r3]
 3123 0af2 002B     		cmp	r3, #0
 3124 0af4 03DA     		bge	.L104
1067:main.c        ****             {
1068:main.c        ****                 processed_volumePedal = 0;
 3125              		.loc 1 1068 0
 3126 0af6 3A4B     		ldr	r3, .L226+44
 3127 0af8 0022     		movs	r2, #0
 3128 0afa 1A80     		strh	r2, [r3]	@ movhi
 3129 0afc 09E0     		b	.L105
 3130              	.L104:
1069:main.c        ****             }
1070:main.c        ****             else if (processed_volumePedal > 4095)
 3131              		.loc 1 1070 0
 3132 0afe 384B     		ldr	r3, .L226+44
 3133 0b00 B3F90030 		ldrsh	r3, [r3]
 3134 0b04 B3F5805F 		cmp	r3, #4096
 3135 0b08 03DB     		blt	.L105
1071:main.c        ****             {
1072:main.c        ****                  processed_volumePedal = 4095;
 3136              		.loc 1 1072 0
 3137 0b0a 354B     		ldr	r3, .L226+44
 3138 0b0c 40F6FF72 		movw	r2, #4095
 3139 0b10 1A80     		strh	r2, [r3]	@ movhi
 3140              	.L105:
1073:main.c        ****             }
1074:main.c        ****             
1075:main.c        ****             if ( processed_volumePedal != prev_processed_volumePedal)
 3141              		.loc 1 1075 0
 3142 0b12 334B     		ldr	r3, .L226+44
 3143 0b14 B3F90020 		ldrsh	r2, [r3]
 3144 0b18 324B     		ldr	r3, .L226+48
 3145 0b1a B3F90030 		ldrsh	r3, [r3]
 3146 0b1e 9A42     		cmp	r2, r3
 3147 0b20 0BD0     		beq	.L106
 3148              	.LBB21:
1076:main.c        ****             {
1077:main.c        ****                 uint16_t tempPedal = processed_volumePedal;
 3149              		.loc 1 1077 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 76


 3150 0b22 2F4B     		ldr	r3, .L226+44
 3151 0b24 B3F90030 		ldrsh	r3, [r3]
 3152 0b28 FB84     		strh	r3, [r7, #38]	@ movhi
1078:main.c        ****                 
1079:main.c        ****                 sendMIDIControlChange(13, ( tempPedal >> 5), 0);
 3153              		.loc 1 1079 0
 3154 0b2a FB8C     		ldrh	r3, [r7, #38]
 3155 0b2c 5B09     		lsrs	r3, r3, #5
 3156 0b2e 9BB2     		uxth	r3, r3
 3157 0b30 0022     		movs	r2, #0
 3158 0b32 1946     		mov	r1, r3
 3159 0b34 0D20     		movs	r0, #13
 3160 0b36 FFF7FEFF 		bl	sendMIDIControlChange
 3161              	.L106:
 3162              	.LBE21:
1080:main.c        ****                 //sendMIDIControlChange(22, ( tempPedal & 127), 0);
1081:main.c        ****             }
1082:main.c        ****              prev_processed_volumePedal = processed_volumePedal;
 3163              		.loc 1 1082 0
 3164 0b3a 294B     		ldr	r3, .L226+44
 3165 0b3c B3F90020 		ldrsh	r2, [r3]
 3166 0b40 284B     		ldr	r3, .L226+48
 3167 0b42 1A80     		strh	r2, [r3]	@ movhi
 3168              	.L103:
1083:main.c        ****         }
1084:main.c        ****         
1085:main.c        ****         main_counter++;
 3169              		.loc 1 1085 0
 3170 0b44 1B4B     		ldr	r3, .L226
 3171 0b46 1B78     		ldrb	r3, [r3]
 3172 0b48 DBB2     		uxtb	r3, r3
 3173 0b4a 0133     		adds	r3, r3, #1
 3174 0b4c DAB2     		uxtb	r2, r3
 3175 0b4e 194B     		ldr	r3, .L226
 3176 0b50 1A70     		strb	r2, [r3]
1086:main.c        **** 
1087:main.c        ****         if (main_counter > 11)
 3177              		.loc 1 1087 0
 3178 0b52 184B     		ldr	r3, .L226
 3179 0b54 1B78     		ldrb	r3, [r3]
 3180 0b56 DBB2     		uxtb	r3, r3
 3181 0b58 0B2B     		cmp	r3, #11
 3182 0b5a 02D9     		bls	.L107
1088:main.c        ****         {
1089:main.c        ****             main_counter = 0;
 3183              		.loc 1 1089 0
 3184 0b5c 154B     		ldr	r3, .L226
 3185 0b5e 0022     		movs	r2, #0
 3186 0b60 1A70     		strb	r2, [r3]
 3187              	.L107:
1090:main.c        ****         }
1091:main.c        ****         testpin3_Write(0);
 3188              		.loc 1 1091 0
 3189 0b62 0020     		movs	r0, #0
 3190 0b64 FFF7FEFF 		bl	testpin3_Write
1092:main.c        ****         #if 0
1093:main.c        ****             
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 77


1094:main.c        ****             
1095:main.c        ****         main_counter++;
1096:main.c        ****         if (main_counter >= 11)
1097:main.c        ****         {
1098:main.c        ****                /*  
1099:main.c        ****             testpin3_Write(1);
1100:main.c        ****             I2Cbuff1[0] = 1<<6;
1101:main.c        ****     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1102:main.c        ****         OLEDwriteInt(bar[1], 5, 0,FirstLine);
1103:main.c        **** 
1104:main.c        ****         //CyDelay(1);
1105:main.c        ****         
1106:main.c        ****         OLEDwriteInt(octave, 1, 0,SecondLine);
1107:main.c        **** 
1108:main.c        ****         OLED_draw();
1109:main.c        ****                     I2Cbuff1[0] = 1<<0;
1110:main.c        ****     status = I2C_MasterWriteBlocking(0x71, 1, I2C_1_MODE_COMPLETE_XFER);
1111:main.c        ****         testpin3_Write(0);
1112:main.c        ****             */
1113:main.c        ****             main_counter = 0;
1114:main.c        ****         }
1115:main.c        ****         #endif
1116:main.c        ****         testpin5_Write(1);
 3191              		.loc 1 1116 0
 3192 0b68 0120     		movs	r0, #1
 3193 0b6a FFF7FEFF 		bl	testpin5_Write
1117:main.c        ****         
1118:main.c        ****         if ((rxBufferBar[!currentBarBuffer][6] == 254) && (rxBufferBar[!currentBarBuffer][7] == 253
 3194              		.loc 1 1118 0
 3195 0b6e 1E4B     		ldr	r3, .L226+52
 3196 0b70 1B78     		ldrb	r3, [r3]
 3197 0b72 DBB2     		uxtb	r3, r3
 3198 0b74 002B     		cmp	r3, #0
 3199 0b76 0CBF     		ite	eq
 3200 0b78 0123     		moveq	r3, #1
 3201 0b7a 0023     		movne	r3, #0
 3202 0b7c DBB2     		uxtb	r3, r3
 3203 0b7e 1B4A     		ldr	r2, .L226+56
 3204 0b80 DB00     		lsls	r3, r3, #3
 3205 0b82 1344     		add	r3, r3, r2
 3206 0b84 9B79     		ldrb	r3, [r3, #6]
 3207 0b86 DBB2     		uxtb	r3, r3
 3208 0b88 FE2B     		cmp	r3, #254
 3209 0b8a 40F05B81 		bne	.L108
 3210              		.loc 1 1118 0 is_stmt 0 discriminator 1
 3211 0b8e 164B     		ldr	r3, .L226+52
 3212 0b90 1B78     		ldrb	r3, [r3]
 3213 0b92 DBB2     		uxtb	r3, r3
 3214 0b94 002B     		cmp	r3, #0
 3215 0b96 0CBF     		ite	eq
 3216 0b98 0123     		moveq	r3, #1
 3217 0b9a 0023     		movne	r3, #0
 3218 0b9c DBB2     		uxtb	r3, r3
 3219 0b9e 134A     		ldr	r2, .L226+56
 3220 0ba0 DB00     		lsls	r3, r3, #3
 3221 0ba2 1344     		add	r3, r3, r2
 3222 0ba4 DB79     		ldrb	r3, [r3, #7]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 78


 3223 0ba6 DBB2     		uxtb	r3, r3
 3224 0ba8 FD2B     		cmp	r3, #253
 3225 0baa 40F04B81 		bne	.L108
 3226              	.LBB22:
1119:main.c        ****         {
1120:main.c        ****             for (int i = 0; i < 2; i++)
 3227              		.loc 1 1120 0 is_stmt 1
 3228 0bae 0023     		movs	r3, #0
 3229 0bb0 3B67     		str	r3, [r7, #112]
 3230 0bb2 43E1     		b	.L109
 3231              	.L227:
 3232              		.align	2
 3233              	.L226:
 3234 0bb4 00000000 		.word	main_counter
 3235 0bb8 00000000 		.word	processed_pedals
 3236 0bbc 01088039 		.word	964691969
 3237 0bc0 00000000 		.word	pedals_float
 3238 0bc4 00000000 		.word	pedal_cc_assignments
 3239 0bc8 00000000 		.word	pedals8bit
 3240 0bcc 00000000 		.word	pedals7bit
 3241 0bd0 00000000 		.word	prevPedals7bit
 3242 0bd4 00000000 		.word	prev_processed_pedals
 3243 0bd8 00000000 		.word	volumePedal
 3244 0bdc C5F1803F 		.word	1065415109
 3245 0be0 00000000 		.word	processed_volumePedal
 3246 0be4 00000000 		.word	prev_processed_volumePedal
 3247 0be8 00000000 		.word	currentBarBuffer
 3248 0bec 00000000 		.word	rxBufferBar
 3249              	.L121:
1121:main.c        ****             {
1122:main.c        ****                 bar[i] = ((rxBufferBar[!currentBarBuffer][i*2] << 8) + rxBufferBar[!currentBarBuffe
 3250              		.loc 1 1122 0
 3251 0bf0 974B     		ldr	r3, .L228
 3252 0bf2 1B78     		ldrb	r3, [r3]
 3253 0bf4 DBB2     		uxtb	r3, r3
 3254 0bf6 002B     		cmp	r3, #0
 3255 0bf8 0CBF     		ite	eq
 3256 0bfa 0123     		moveq	r3, #1
 3257 0bfc 0023     		movne	r3, #0
 3258 0bfe DBB2     		uxtb	r3, r3
 3259 0c00 1A46     		mov	r2, r3
 3260 0c02 3B6F     		ldr	r3, [r7, #112]
 3261 0c04 5B00     		lsls	r3, r3, #1
 3262 0c06 9349     		ldr	r1, .L228+4
 3263 0c08 D200     		lsls	r2, r2, #3
 3264 0c0a 0A44     		add	r2, r2, r1
 3265 0c0c 1344     		add	r3, r3, r2
 3266 0c0e 1B78     		ldrb	r3, [r3]
 3267 0c10 DBB2     		uxtb	r3, r3
 3268 0c12 9BB2     		uxth	r3, r3
 3269 0c14 1B02     		lsls	r3, r3, #8
 3270 0c16 9AB2     		uxth	r2, r3
 3271 0c18 8D4B     		ldr	r3, .L228
 3272 0c1a 1B78     		ldrb	r3, [r3]
 3273 0c1c DBB2     		uxtb	r3, r3
 3274 0c1e 002B     		cmp	r3, #0
 3275 0c20 0CBF     		ite	eq
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 79


 3276 0c22 0123     		moveq	r3, #1
 3277 0c24 0023     		movne	r3, #0
 3278 0c26 DBB2     		uxtb	r3, r3
 3279 0c28 1946     		mov	r1, r3
 3280 0c2a 3B6F     		ldr	r3, [r7, #112]
 3281 0c2c 5B00     		lsls	r3, r3, #1
 3282 0c2e 0133     		adds	r3, r3, #1
 3283 0c30 8848     		ldr	r0, .L228+4
 3284 0c32 C900     		lsls	r1, r1, #3
 3285 0c34 0144     		add	r1, r1, r0
 3286 0c36 0B44     		add	r3, r3, r1
 3287 0c38 1B78     		ldrb	r3, [r3]
 3288 0c3a DBB2     		uxtb	r3, r3
 3289 0c3c 9BB2     		uxth	r3, r3
 3290 0c3e 1344     		add	r3, r3, r2
 3291 0c40 99B2     		uxth	r1, r3
 3292 0c42 854A     		ldr	r2, .L228+8
 3293 0c44 3B6F     		ldr	r3, [r7, #112]
 3294 0c46 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1123:main.c        ****                 //
1124:main.c        ****                 if(bar[i] != prevBar[i])
 3295              		.loc 1 1124 0
 3296 0c4a 834A     		ldr	r2, .L228+8
 3297 0c4c 3B6F     		ldr	r3, [r7, #112]
 3298 0c4e 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3299 0c52 9AB2     		uxth	r2, r3
 3300 0c54 8149     		ldr	r1, .L228+12
 3301 0c56 3B6F     		ldr	r3, [r7, #112]
 3302 0c58 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 3303 0c5c 9BB2     		uxth	r3, r3
 3304 0c5e 9A42     		cmp	r2, r3
 3305 0c60 00F0E080 		beq	.L110
1125:main.c        ****                 {
1126:main.c        ****     				if ((bar[i] == 65535) || (bar[i] > fretMeasurements[0][i]))
 3306              		.loc 1 1126 0
 3307 0c64 7C4A     		ldr	r2, .L228+8
 3308 0c66 3B6F     		ldr	r3, [r7, #112]
 3309 0c68 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3310 0c6c 9BB2     		uxth	r3, r3
 3311 0c6e 4FF6FF72 		movw	r2, #65535
 3312 0c72 9342     		cmp	r3, r2
 3313 0c74 11D0     		beq	.L111
 3314              		.loc 1 1126 0 is_stmt 0 discriminator 1
 3315 0c76 784A     		ldr	r2, .L228+8
 3316 0c78 3B6F     		ldr	r3, [r7, #112]
 3317 0c7a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3318 0c7e 9BB2     		uxth	r3, r3
 3319 0c80 1846     		mov	r0, r3
 3320 0c82 FFF7FEFF 		bl	__aeabi_i2f
 3321 0c86 764A     		ldr	r2, .L228+16
 3322 0c88 3B6F     		ldr	r3, [r7, #112]
 3323 0c8a 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3324 0c8e 1946     		mov	r1, r3
 3325 0c90 FFF7FEFF 		bl	__aeabi_fcmpgt
 3326 0c94 0346     		mov	r3, r0
 3327 0c96 002B     		cmp	r3, #0
 3328 0c98 06D0     		beq	.L216
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 80


 3329              	.L111:
1127:main.c        ****     				{
1128:main.c        ****     					stringMappedPositions[i] = 1.0f;
 3330              		.loc 1 1128 0 is_stmt 1
 3331 0c9a 724A     		ldr	r2, .L228+20
 3332 0c9c 3B6F     		ldr	r3, [r7, #112]
 3333 0c9e 4FF07E51 		mov	r1, #1065353216
 3334 0ca2 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 3335 0ca6 AEE0     		b	.L114
 3336              	.L216:
1129:main.c        ****     				}
1130:main.c        **** 
1131:main.c        ****     				else if ((bar[i] >= fretMeasurements[1][i]) && (bar[i] <= fretMeasurements[0][i]))
 3337              		.loc 1 1131 0
 3338 0ca8 6B4A     		ldr	r2, .L228+8
 3339 0caa 3B6F     		ldr	r3, [r7, #112]
 3340 0cac 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3341 0cb0 9BB2     		uxth	r3, r3
 3342 0cb2 1846     		mov	r0, r3
 3343 0cb4 FFF7FEFF 		bl	__aeabi_i2f
 3344 0cb8 694A     		ldr	r2, .L228+16
 3345 0cba 3B6F     		ldr	r3, [r7, #112]
 3346 0cbc 0433     		adds	r3, r3, #4
 3347 0cbe 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3348 0cc2 1946     		mov	r1, r3
 3349 0cc4 FFF7FEFF 		bl	__aeabi_fcmpge
 3350 0cc8 0346     		mov	r3, r0
 3351 0cca 002B     		cmp	r3, #0
 3352 0ccc 32D0     		beq	.L115
 3353              		.loc 1 1131 0 is_stmt 0 discriminator 1
 3354 0cce 624A     		ldr	r2, .L228+8
 3355 0cd0 3B6F     		ldr	r3, [r7, #112]
 3356 0cd2 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3357 0cd6 9BB2     		uxth	r3, r3
 3358 0cd8 1846     		mov	r0, r3
 3359 0cda FFF7FEFF 		bl	__aeabi_i2f
 3360 0cde 604A     		ldr	r2, .L228+16
 3361 0ce0 3B6F     		ldr	r3, [r7, #112]
 3362 0ce2 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3363 0ce6 1946     		mov	r1, r3
 3364 0ce8 FFF7FEFF 		bl	__aeabi_fcmple
 3365 0cec 0346     		mov	r3, r0
 3366 0cee 002B     		cmp	r3, #0
 3367 0cf0 20D0     		beq	.L115
1132:main.c        ****     				{
1133:main.c        ****     					stringMappedPositions[i] = map((float)bar[i], fretMeasurements[0][i], fretMeasurements[1][
 3368              		.loc 1 1133 0 is_stmt 1
 3369 0cf2 594A     		ldr	r2, .L228+8
 3370 0cf4 3B6F     		ldr	r3, [r7, #112]
 3371 0cf6 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3372 0cfa 9BB2     		uxth	r3, r3
 3373 0cfc 1846     		mov	r0, r3
 3374 0cfe FFF7FEFF 		bl	__aeabi_ui2f
 3375 0d02 0446     		mov	r4, r0
 3376 0d04 564A     		ldr	r2, .L228+16
 3377 0d06 3B6F     		ldr	r3, [r7, #112]
 3378 0d08 52F82310 		ldr	r1, [r2, r3, lsl #2]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 81


 3379 0d0c 544A     		ldr	r2, .L228+16
 3380 0d0e 3B6F     		ldr	r3, [r7, #112]
 3381 0d10 0433     		adds	r3, r3, #4
 3382 0d12 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 3383 0d16 544B     		ldr	r3, .L228+24
 3384 0d18 1868     		ldr	r0, [r3]	@ float
 3385 0d1a 534B     		ldr	r3, .L228+24
 3386 0d1c 5B68     		ldr	r3, [r3, #4]	@ float
 3387 0d1e 0093     		str	r3, [sp]	@ float
 3388 0d20 0346     		mov	r3, r0
 3389 0d22 2046     		mov	r0, r4
 3390 0d24 FFF7FEFF 		bl	map
 3391 0d28 0146     		mov	r1, r0
 3392 0d2a 4E4A     		ldr	r2, .L228+20
 3393 0d2c 3B6F     		ldr	r3, [r7, #112]
 3394 0d2e 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 3395 0d32 68E0     		b	.L114
 3396              	.L115:
1134:main.c        ****     				}
1135:main.c        **** 
1136:main.c        ****     				else if ((bar[i] >= fretMeasurements[2][i]) && (bar[i] < fretMeasurements[1][i]))
 3397              		.loc 1 1136 0
 3398 0d34 484A     		ldr	r2, .L228+8
 3399 0d36 3B6F     		ldr	r3, [r7, #112]
 3400 0d38 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3401 0d3c 9BB2     		uxth	r3, r3
 3402 0d3e 1846     		mov	r0, r3
 3403 0d40 FFF7FEFF 		bl	__aeabi_i2f
 3404 0d44 464A     		ldr	r2, .L228+16
 3405 0d46 3B6F     		ldr	r3, [r7, #112]
 3406 0d48 0833     		adds	r3, r3, #8
 3407 0d4a 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3408 0d4e 1946     		mov	r1, r3
 3409 0d50 FFF7FEFF 		bl	__aeabi_fcmpge
 3410 0d54 0346     		mov	r3, r0
 3411 0d56 002B     		cmp	r3, #0
 3412 0d58 34D0     		beq	.L118
 3413              		.loc 1 1136 0 is_stmt 0 discriminator 1
 3414 0d5a 3F4A     		ldr	r2, .L228+8
 3415 0d5c 3B6F     		ldr	r3, [r7, #112]
 3416 0d5e 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3417 0d62 9BB2     		uxth	r3, r3
 3418 0d64 1846     		mov	r0, r3
 3419 0d66 FFF7FEFF 		bl	__aeabi_i2f
 3420 0d6a 3D4A     		ldr	r2, .L228+16
 3421 0d6c 3B6F     		ldr	r3, [r7, #112]
 3422 0d6e 0433     		adds	r3, r3, #4
 3423 0d70 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3424 0d74 1946     		mov	r1, r3
 3425 0d76 FFF7FEFF 		bl	__aeabi_fcmplt
 3426 0d7a 0346     		mov	r3, r0
 3427 0d7c 002B     		cmp	r3, #0
 3428 0d7e 21D0     		beq	.L118
1137:main.c        ****     				{
1138:main.c        ****     					stringMappedPositions[i] = map((float)bar[i], fretMeasurements[1][i], fretMeasurements[2][
 3429              		.loc 1 1138 0 is_stmt 1
 3430 0d80 354A     		ldr	r2, .L228+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 82


 3431 0d82 3B6F     		ldr	r3, [r7, #112]
 3432 0d84 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3433 0d88 9BB2     		uxth	r3, r3
 3434 0d8a 1846     		mov	r0, r3
 3435 0d8c FFF7FEFF 		bl	__aeabi_ui2f
 3436 0d90 0446     		mov	r4, r0
 3437 0d92 334A     		ldr	r2, .L228+16
 3438 0d94 3B6F     		ldr	r3, [r7, #112]
 3439 0d96 0433     		adds	r3, r3, #4
 3440 0d98 52F82310 		ldr	r1, [r2, r3, lsl #2]	@ float
 3441 0d9c 304A     		ldr	r2, .L228+16
 3442 0d9e 3B6F     		ldr	r3, [r7, #112]
 3443 0da0 0833     		adds	r3, r3, #8
 3444 0da2 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 3445 0da6 304B     		ldr	r3, .L228+24
 3446 0da8 5868     		ldr	r0, [r3, #4]	@ float
 3447 0daa 2F4B     		ldr	r3, .L228+24
 3448 0dac 9B68     		ldr	r3, [r3, #8]	@ float
 3449 0dae 0093     		str	r3, [sp]	@ float
 3450 0db0 0346     		mov	r3, r0
 3451 0db2 2046     		mov	r0, r4
 3452 0db4 FFF7FEFF 		bl	map
 3453 0db8 0146     		mov	r1, r0
 3454 0dba 2A4A     		ldr	r2, .L228+20
 3455 0dbc 3B6F     		ldr	r3, [r7, #112]
 3456 0dbe 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 3457 0dc2 20E0     		b	.L114
 3458              	.L118:
1139:main.c        ****     				}
1140:main.c        **** 
1141:main.c        ****     				else
1142:main.c        ****     				{
1143:main.c        ****     					stringMappedPositions[i] = map((float)bar[i], fretMeasurements[2][i], fretMeasurements[3][
 3459              		.loc 1 1143 0
 3460 0dc4 244A     		ldr	r2, .L228+8
 3461 0dc6 3B6F     		ldr	r3, [r7, #112]
 3462 0dc8 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3463 0dcc 9BB2     		uxth	r3, r3
 3464 0dce 1846     		mov	r0, r3
 3465 0dd0 FFF7FEFF 		bl	__aeabi_ui2f
 3466 0dd4 0446     		mov	r4, r0
 3467 0dd6 224A     		ldr	r2, .L228+16
 3468 0dd8 3B6F     		ldr	r3, [r7, #112]
 3469 0dda 0833     		adds	r3, r3, #8
 3470 0ddc 52F82310 		ldr	r1, [r2, r3, lsl #2]	@ float
 3471 0de0 1F4A     		ldr	r2, .L228+16
 3472 0de2 3B6F     		ldr	r3, [r7, #112]
 3473 0de4 0C33     		adds	r3, r3, #12
 3474 0de6 52F82320 		ldr	r2, [r2, r3, lsl #2]	@ float
 3475 0dea 1F4B     		ldr	r3, .L228+24
 3476 0dec 9868     		ldr	r0, [r3, #8]	@ float
 3477 0dee 1E4B     		ldr	r3, .L228+24
 3478 0df0 DB68     		ldr	r3, [r3, #12]	@ float
 3479 0df2 0093     		str	r3, [sp]	@ float
 3480 0df4 0346     		mov	r3, r0
 3481 0df6 2046     		mov	r0, r4
 3482 0df8 FFF7FEFF 		bl	map
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 83


 3483 0dfc 0146     		mov	r1, r0
 3484 0dfe 194A     		ldr	r2, .L228+20
 3485 0e00 3B6F     		ldr	r3, [r7, #112]
 3486 0e02 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 3487              	.L114:
1144:main.c        ****     				}
1145:main.c        **** 
1146:main.c        ****                     invStringMappedPositions[i] = 1.0f / stringMappedPositions[i];
 3488              		.loc 1 1146 0
 3489 0e06 174A     		ldr	r2, .L228+20
 3490 0e08 3B6F     		ldr	r3, [r7, #112]
 3491 0e0a 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 3492 0e0e 1946     		mov	r1, r3
 3493 0e10 4FF07E50 		mov	r0, #1065353216
 3494 0e14 FFF7FEFF 		bl	__aeabi_fdiv
 3495 0e18 0346     		mov	r3, r0
 3496 0e1a 1946     		mov	r1, r3
 3497 0e1c 134A     		ldr	r2, .L228+28
 3498 0e1e 3B6F     		ldr	r3, [r7, #112]
 3499 0e20 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 3500              	.L110:
1147:main.c        ****                 }
1148:main.c        ****                 //
1149:main.c        ****                 prevBar[i] = bar[i];
 3501              		.loc 1 1149 0 discriminator 2
 3502 0e24 0C4A     		ldr	r2, .L228+8
 3503 0e26 3B6F     		ldr	r3, [r7, #112]
 3504 0e28 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3505 0e2c 99B2     		uxth	r1, r3
 3506 0e2e 0B4A     		ldr	r2, .L228+12
 3507 0e30 3B6F     		ldr	r3, [r7, #112]
 3508 0e32 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1120:main.c        ****             {
 3509              		.loc 1 1120 0 discriminator 2
 3510 0e36 3B6F     		ldr	r3, [r7, #112]
 3511 0e38 0133     		adds	r3, r3, #1
 3512 0e3a 3B67     		str	r3, [r7, #112]
 3513              	.L109:
1120:main.c        ****             {
 3514              		.loc 1 1120 0 is_stmt 0 discriminator 1
 3515 0e3c 3B6F     		ldr	r3, [r7, #112]
 3516 0e3e 012B     		cmp	r3, #1
 3517 0e40 7FF7D6AE 		ble	.L121
 3518              	.L108:
 3519              	.LBE22:
1150:main.c        ****             }
1151:main.c        ****         }
1152:main.c        ****         
1153:main.c        ****         testpin5_Write(0);
 3520              		.loc 1 1153 0 is_stmt 1
 3521 0e44 0020     		movs	r0, #0
 3522 0e46 FFF7FEFF 		bl	testpin5_Write
 3523              	.LBB23:
1154:main.c        ****         for (int i = 0 ; i < numStrings; i++)
 3524              		.loc 1 1154 0
 3525 0e4a 0023     		movs	r3, #0
 3526 0e4c FB66     		str	r3, [r7, #108]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 84


 3527 0e4e 2AE0     		b	.L122
 3528              	.L229:
 3529              		.align	2
 3530              	.L228:
 3531 0e50 00000000 		.word	currentBarBuffer
 3532 0e54 00000000 		.word	rxBufferBar
 3533 0e58 00000000 		.word	bar
 3534 0e5c 00000000 		.word	prevBar
 3535 0e60 00000000 		.word	fretMeasurements
 3536 0e64 00000000 		.word	stringMappedPositions
 3537 0e68 00000000 		.word	fretScaling
 3538 0e6c 00000000 		.word	invStringMappedPositions
 3539              	.L124:
1155:main.c        ****         {
1156:main.c        ****             if (strings[i] != prevStrings[i])
 3540              		.loc 1 1156 0
 3541 0e70 AF4A     		ldr	r2, .L230
 3542 0e72 FB6E     		ldr	r3, [r7, #108]
 3543 0e74 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3544 0e78 9AB2     		uxth	r2, r3
 3545 0e7a AE49     		ldr	r1, .L230+4
 3546 0e7c FB6E     		ldr	r3, [r7, #108]
 3547 0e7e 31F81330 		ldrh	r3, [r1, r3, lsl #1]	@ movhi
 3548 0e82 9BB2     		uxth	r3, r3
 3549 0e84 9A42     		cmp	r2, r3
 3550 0e86 02D0     		beq	.L123
1157:main.c        ****             {
1158:main.c        ****                 noteEvent(i);
 3551              		.loc 1 1158 0
 3552 0e88 F86E     		ldr	r0, [r7, #108]
 3553 0e8a FFF7FEFF 		bl	noteEvent
 3554              	.L123:
1159:main.c        ****             }
1160:main.c        ****             prevStrings[i] = strings[i];
 3555              		.loc 1 1160 0 discriminator 2
 3556 0e8e A84A     		ldr	r2, .L230
 3557 0e90 FB6E     		ldr	r3, [r7, #108]
 3558 0e92 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 3559 0e96 99B2     		uxth	r1, r3
 3560 0e98 A64A     		ldr	r2, .L230+4
 3561 0e9a FB6E     		ldr	r3, [r7, #108]
 3562 0e9c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1154:main.c        ****         {
 3563              		.loc 1 1154 0 discriminator 2
 3564 0ea0 FB6E     		ldr	r3, [r7, #108]
 3565 0ea2 0133     		adds	r3, r3, #1
 3566 0ea4 FB66     		str	r3, [r7, #108]
 3567              	.L122:
1154:main.c        ****         {
 3568              		.loc 1 1154 0 is_stmt 0 discriminator 1
 3569 0ea6 A44B     		ldr	r3, .L230+8
 3570 0ea8 1B68     		ldr	r3, [r3]
 3571 0eaa FA6E     		ldr	r2, [r7, #108]
 3572 0eac 9A42     		cmp	r2, r3
 3573 0eae DFDB     		blt	.L124
 3574              	.LBE23:
1161:main.c        ****         }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 85


1162:main.c        ****         
1163:main.c        **** 
1164:main.c        **** 
1165:main.c        ****         
1166:main.c        ****         
1167:main.c        ****         if (!oct1_Read())
 3575              		.loc 1 1167 0 is_stmt 1
 3576 0eb0 FFF7FEFF 		bl	oct1_Read
 3577 0eb4 0346     		mov	r3, r0
 3578 0eb6 002B     		cmp	r3, #0
 3579 0eb8 24D1     		bne	.L125
1168:main.c        ****         {
1169:main.c        ****             if (octave > 4)
 3580              		.loc 1 1169 0
 3581 0eba A04B     		ldr	r3, .L230+12
 3582 0ebc 1B68     		ldr	r3, [r3]
 3583 0ebe 042B     		cmp	r3, #4
 3584 0ec0 03DD     		ble	.L126
1170:main.c        ****             {
1171:main.c        ****                 octave = 4;
 3585              		.loc 1 1171 0
 3586 0ec2 9E4B     		ldr	r3, .L230+12
 3587 0ec4 0422     		movs	r2, #4
 3588 0ec6 1A60     		str	r2, [r3]
 3589 0ec8 0CE0     		b	.L127
 3590              	.L126:
1172:main.c        **** 
1173:main.c        ****             }
1174:main.c        ****             else if ((oct1Up) && (octave > 0))
 3591              		.loc 1 1174 0
 3592 0eca 9D4B     		ldr	r3, .L230+16
 3593 0ecc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3594 0ece 002B     		cmp	r3, #0
 3595 0ed0 08D0     		beq	.L127
 3596              		.loc 1 1174 0 is_stmt 0 discriminator 1
 3597 0ed2 9A4B     		ldr	r3, .L230+12
 3598 0ed4 1B68     		ldr	r3, [r3]
 3599 0ed6 002B     		cmp	r3, #0
 3600 0ed8 04DD     		ble	.L127
1175:main.c        ****             {
1176:main.c        ****                 octave--;
 3601              		.loc 1 1176 0 is_stmt 1
 3602 0eda 984B     		ldr	r3, .L230+12
 3603 0edc 1B68     		ldr	r3, [r3]
 3604 0ede 013B     		subs	r3, r3, #1
 3605 0ee0 964A     		ldr	r2, .L230+12
 3606 0ee2 1360     		str	r3, [r2]
 3607              	.L127:
1177:main.c        ****             }
1178:main.c        ****             LED_amber1_Write(1);
 3608              		.loc 1 1178 0
 3609 0ee4 0120     		movs	r0, #1
 3610 0ee6 FFF7FEFF 		bl	LED_amber1_Write
1179:main.c        ****             LED_amber2_Write(0);
 3611              		.loc 1 1179 0
 3612 0eea 0020     		movs	r0, #0
 3613 0eec FFF7FEFF 		bl	LED_amber2_Write
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 86


1180:main.c        ****             LED_amber3_Write(0);
 3614              		.loc 1 1180 0
 3615 0ef0 0020     		movs	r0, #0
 3616 0ef2 FFF7FEFF 		bl	LED_amber3_Write
1181:main.c        ****             LED_amber4_Write(0);
 3617              		.loc 1 1181 0
 3618 0ef6 0020     		movs	r0, #0
 3619 0ef8 FFF7FEFF 		bl	LED_amber4_Write
1182:main.c        ****             oct1Up = 0;
 3620              		.loc 1 1182 0
 3621 0efc 904B     		ldr	r3, .L230+16
 3622 0efe 0022     		movs	r2, #0
 3623 0f00 1A70     		strb	r2, [r3]
 3624 0f02 07E0     		b	.L128
 3625              	.L125:
1183:main.c        ****         }
1184:main.c        ****         
1185:main.c        ****         else if (oct1_Read())
 3626              		.loc 1 1185 0
 3627 0f04 FFF7FEFF 		bl	oct1_Read
 3628 0f08 0346     		mov	r3, r0
 3629 0f0a 002B     		cmp	r3, #0
 3630 0f0c 02D0     		beq	.L128
1186:main.c        ****         {
1187:main.c        ****             oct1Up = 1;
 3631              		.loc 1 1187 0
 3632 0f0e 8C4B     		ldr	r3, .L230+16
 3633 0f10 0122     		movs	r2, #1
 3634 0f12 1A70     		strb	r2, [r3]
 3635              	.L128:
1188:main.c        ****         }
1189:main.c        ****         
1190:main.c        ****         if (!oct2_Read())
 3636              		.loc 1 1190 0
 3637 0f14 FFF7FEFF 		bl	oct2_Read
 3638 0f18 0346     		mov	r3, r0
 3639 0f1a 002B     		cmp	r3, #0
 3640 0f1c 0ED1     		bne	.L129
1191:main.c        ****         {
1192:main.c        ****             octave = 5;
 3641              		.loc 1 1192 0
 3642 0f1e 874B     		ldr	r3, .L230+12
 3643 0f20 0522     		movs	r2, #5
 3644 0f22 1A60     		str	r2, [r3]
1193:main.c        ****             LED_amber1_Write(0);
 3645              		.loc 1 1193 0
 3646 0f24 0020     		movs	r0, #0
 3647 0f26 FFF7FEFF 		bl	LED_amber1_Write
1194:main.c        ****             LED_amber2_Write(1);
 3648              		.loc 1 1194 0
 3649 0f2a 0120     		movs	r0, #1
 3650 0f2c FFF7FEFF 		bl	LED_amber2_Write
1195:main.c        ****             LED_amber3_Write(0);
 3651              		.loc 1 1195 0
 3652 0f30 0020     		movs	r0, #0
 3653 0f32 FFF7FEFF 		bl	LED_amber3_Write
1196:main.c        ****             LED_amber4_Write(0);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 87


 3654              		.loc 1 1196 0
 3655 0f36 0020     		movs	r0, #0
 3656 0f38 FFF7FEFF 		bl	LED_amber4_Write
 3657              	.L129:
1197:main.c        ****         }
1198:main.c        ****         if (!oct3_Read())
 3658              		.loc 1 1198 0
 3659 0f3c FFF7FEFF 		bl	oct3_Read
 3660 0f40 0346     		mov	r3, r0
 3661 0f42 002B     		cmp	r3, #0
 3662 0f44 0ED1     		bne	.L130
1199:main.c        ****         {
1200:main.c        ****             octave = 6;
 3663              		.loc 1 1200 0
 3664 0f46 7D4B     		ldr	r3, .L230+12
 3665 0f48 0622     		movs	r2, #6
 3666 0f4a 1A60     		str	r2, [r3]
1201:main.c        ****             LED_amber1_Write(0);
 3667              		.loc 1 1201 0
 3668 0f4c 0020     		movs	r0, #0
 3669 0f4e FFF7FEFF 		bl	LED_amber1_Write
1202:main.c        ****             LED_amber2_Write(0);
 3670              		.loc 1 1202 0
 3671 0f52 0020     		movs	r0, #0
 3672 0f54 FFF7FEFF 		bl	LED_amber2_Write
1203:main.c        ****             LED_amber3_Write(1);
 3673              		.loc 1 1203 0
 3674 0f58 0120     		movs	r0, #1
 3675 0f5a FFF7FEFF 		bl	LED_amber3_Write
1204:main.c        ****             LED_amber4_Write(0);            
 3676              		.loc 1 1204 0
 3677 0f5e 0020     		movs	r0, #0
 3678 0f60 FFF7FEFF 		bl	LED_amber4_Write
 3679              	.L130:
1205:main.c        ****         }
1206:main.c        ****         if (!oct4_Read())
 3680              		.loc 1 1206 0
 3681 0f64 FFF7FEFF 		bl	oct4_Read
 3682 0f68 0346     		mov	r3, r0
 3683 0f6a 002B     		cmp	r3, #0
 3684 0f6c 24D1     		bne	.L131
1207:main.c        ****         {
1208:main.c        ****             if (octave < 7)
 3685              		.loc 1 1208 0
 3686 0f6e 734B     		ldr	r3, .L230+12
 3687 0f70 1B68     		ldr	r3, [r3]
 3688 0f72 062B     		cmp	r3, #6
 3689 0f74 03DC     		bgt	.L132
1209:main.c        ****             {
1210:main.c        ****                 octave = 7;
 3690              		.loc 1 1210 0
 3691 0f76 714B     		ldr	r3, .L230+12
 3692 0f78 0722     		movs	r2, #7
 3693 0f7a 1A60     		str	r2, [r3]
 3694 0f7c 0CE0     		b	.L133
 3695              	.L132:
1211:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 88


1212:main.c        ****             }
1213:main.c        ****             else if ((oct4Up) && (octave < 11))
 3696              		.loc 1 1213 0
 3697 0f7e 714B     		ldr	r3, .L230+20
 3698 0f80 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3699 0f82 002B     		cmp	r3, #0
 3700 0f84 08D0     		beq	.L133
 3701              		.loc 1 1213 0 is_stmt 0 discriminator 1
 3702 0f86 6D4B     		ldr	r3, .L230+12
 3703 0f88 1B68     		ldr	r3, [r3]
 3704 0f8a 0A2B     		cmp	r3, #10
 3705 0f8c 04DC     		bgt	.L133
1214:main.c        ****             {
1215:main.c        ****                 octave++;
 3706              		.loc 1 1215 0 is_stmt 1
 3707 0f8e 6B4B     		ldr	r3, .L230+12
 3708 0f90 1B68     		ldr	r3, [r3]
 3709 0f92 0133     		adds	r3, r3, #1
 3710 0f94 694A     		ldr	r2, .L230+12
 3711 0f96 1360     		str	r3, [r2]
 3712              	.L133:
1216:main.c        **** 
1217:main.c        ****             }
1218:main.c        ****             LED_amber1_Write(0);
 3713              		.loc 1 1218 0
 3714 0f98 0020     		movs	r0, #0
 3715 0f9a FFF7FEFF 		bl	LED_amber1_Write
1219:main.c        ****             LED_amber2_Write(0);
 3716              		.loc 1 1219 0
 3717 0f9e 0020     		movs	r0, #0
 3718 0fa0 FFF7FEFF 		bl	LED_amber2_Write
1220:main.c        ****             LED_amber3_Write(0);
 3719              		.loc 1 1220 0
 3720 0fa4 0020     		movs	r0, #0
 3721 0fa6 FFF7FEFF 		bl	LED_amber3_Write
1221:main.c        ****             LED_amber4_Write(1);
 3722              		.loc 1 1221 0
 3723 0faa 0120     		movs	r0, #1
 3724 0fac FFF7FEFF 		bl	LED_amber4_Write
1222:main.c        ****             oct4Up = 0;
 3725              		.loc 1 1222 0
 3726 0fb0 644B     		ldr	r3, .L230+20
 3727 0fb2 0022     		movs	r2, #0
 3728 0fb4 1A70     		strb	r2, [r3]
 3729 0fb6 07E0     		b	.L134
 3730              	.L131:
1223:main.c        ****         }
1224:main.c        ****         
1225:main.c        ****         else if (oct4_Read())
 3731              		.loc 1 1225 0
 3732 0fb8 FFF7FEFF 		bl	oct4_Read
 3733 0fbc 0346     		mov	r3, r0
 3734 0fbe 002B     		cmp	r3, #0
 3735 0fc0 02D0     		beq	.L134
1226:main.c        ****         {
1227:main.c        ****             oct4Up = 1;
 3736              		.loc 1 1227 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 89


 3737 0fc2 604B     		ldr	r3, .L230+20
 3738 0fc4 0122     		movs	r2, #1
 3739 0fc6 1A70     		strb	r2, [r3]
 3740              	.L134:
1228:main.c        ****         }
1229:main.c        ****         
1230:main.c        ****         if (!neck1_button_Read())
 3741              		.loc 1 1230 0
 3742 0fc8 FFF7FEFF 		bl	neck1_button_Read
 3743 0fcc 0346     		mov	r3, r0
 3744 0fce 002B     		cmp	r3, #0
 3745 0fd0 10D1     		bne	.L135
1231:main.c        ****         {
1232:main.c        ****             currentNeck = 0;
 3746              		.loc 1 1232 0
 3747 0fd2 5D4B     		ldr	r3, .L230+24
 3748 0fd4 0022     		movs	r2, #0
 3749 0fd6 1A60     		str	r2, [r3]
1233:main.c        ****             currentCopedent = necks[currentNeck];
 3750              		.loc 1 1233 0
 3751 0fd8 5B4B     		ldr	r3, .L230+24
 3752 0fda 1B68     		ldr	r3, [r3]
 3753 0fdc 5B4A     		ldr	r2, .L230+28
 3754 0fde D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 3755 0fe0 5B4B     		ldr	r3, .L230+32
 3756 0fe2 1A70     		strb	r2, [r3]
1234:main.c        ****             LED_red1_Write(0);
 3757              		.loc 1 1234 0
 3758 0fe4 0020     		movs	r0, #0
 3759 0fe6 FFF7FEFF 		bl	LED_red1_Write
1235:main.c        ****             LED_green2_Write(1);
 3760              		.loc 1 1235 0
 3761 0fea 0120     		movs	r0, #1
 3762 0fec FFF7FEFF 		bl	LED_green2_Write
1236:main.c        ****             displayCurrentPresetNameAndCopedent();
 3763              		.loc 1 1236 0
 3764 0ff0 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
 3765              	.L135:
1237:main.c        ****         }
1238:main.c        ****         if (!neck2_button_Read())
 3766              		.loc 1 1238 0
 3767 0ff4 FFF7FEFF 		bl	neck2_button_Read
 3768 0ff8 0346     		mov	r3, r0
 3769 0ffa 002B     		cmp	r3, #0
 3770 0ffc 10D1     		bne	.L136
1239:main.c        ****         {
1240:main.c        ****             currentNeck = 1;
 3771              		.loc 1 1240 0
 3772 0ffe 524B     		ldr	r3, .L230+24
 3773 1000 0122     		movs	r2, #1
 3774 1002 1A60     		str	r2, [r3]
1241:main.c        ****             currentCopedent = necks[currentNeck];            
 3775              		.loc 1 1241 0
 3776 1004 504B     		ldr	r3, .L230+24
 3777 1006 1B68     		ldr	r3, [r3]
 3778 1008 504A     		ldr	r2, .L230+28
 3779 100a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 90


 3780 100c 504B     		ldr	r3, .L230+32
 3781 100e 1A70     		strb	r2, [r3]
1242:main.c        ****             LED_red1_Write(1);
 3782              		.loc 1 1242 0
 3783 1010 0120     		movs	r0, #1
 3784 1012 FFF7FEFF 		bl	LED_red1_Write
1243:main.c        ****             LED_green2_Write(0);          
 3785              		.loc 1 1243 0
 3786 1016 0020     		movs	r0, #0
 3787 1018 FFF7FEFF 		bl	LED_green2_Write
1244:main.c        ****             displayCurrentPresetNameAndCopedent();
 3788              		.loc 1 1244 0
 3789 101c FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
 3790              	.L136:
1245:main.c        ****         }
1246:main.c        ****         
1247:main.c        ****         if ((!enter_button_Read()) && (enterUp))
 3791              		.loc 1 1247 0
 3792 1020 FFF7FEFF 		bl	enter_button_Read
 3793 1024 0346     		mov	r3, r0
 3794 1026 002B     		cmp	r3, #0
 3795 1028 16D1     		bne	.L137
 3796              		.loc 1 1247 0 is_stmt 0 discriminator 1
 3797 102a 4A4B     		ldr	r3, .L230+36
 3798 102c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3799 102e 002B     		cmp	r3, #0
 3800 1030 12D0     		beq	.L137
1248:main.c        ****         {
1249:main.c        ****             dualSlider = !dualSlider;
 3801              		.loc 1 1249 0 is_stmt 1
 3802 1032 494B     		ldr	r3, .L230+40
 3803 1034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3804 1036 002B     		cmp	r3, #0
 3805 1038 0CBF     		ite	eq
 3806 103a 0123     		moveq	r3, #1
 3807 103c 0023     		movne	r3, #0
 3808 103e DBB2     		uxtb	r3, r3
 3809 1040 1A46     		mov	r2, r3
 3810 1042 454B     		ldr	r3, .L230+40
 3811 1044 1A70     		strb	r2, [r3]
1250:main.c        ****             LED_green1_Write(dualSlider);
 3812              		.loc 1 1250 0
 3813 1046 444B     		ldr	r3, .L230+40
 3814 1048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3815 104a 1846     		mov	r0, r3
 3816 104c FFF7FEFF 		bl	LED_green1_Write
1251:main.c        ****             enterUp = 0;
 3817              		.loc 1 1251 0
 3818 1050 404B     		ldr	r3, .L230+36
 3819 1052 0022     		movs	r2, #0
 3820 1054 1A70     		strb	r2, [r3]
 3821 1056 07E0     		b	.L138
 3822              	.L137:
1252:main.c        ****         }
1253:main.c        ****         else if (enter_button_Read())
 3823              		.loc 1 1253 0
 3824 1058 FFF7FEFF 		bl	enter_button_Read
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 91


 3825 105c 0346     		mov	r3, r0
 3826 105e 002B     		cmp	r3, #0
 3827 1060 02D0     		beq	.L138
1254:main.c        ****         {
1255:main.c        ****             enterUp = 1;
 3828              		.loc 1 1255 0
 3829 1062 3C4B     		ldr	r3, .L230+36
 3830 1064 0122     		movs	r2, #1
 3831 1066 1A70     		strb	r2, [r3]
 3832              	.L138:
1256:main.c        ****         }
1257:main.c        ****         
1258:main.c        ****         
1259:main.c        ****         if (!editMode)
 3833              		.loc 1 1259 0
 3834 1068 3C4B     		ldr	r3, .L230+44
 3835 106a 1B68     		ldr	r3, [r3]
 3836 106c 002B     		cmp	r3, #0
 3837 106e 40F0CD80 		bne	.L139
1260:main.c        ****         {
1261:main.c        ****         
1262:main.c        ****             if ((!button1_Read()) && (button1Up))
 3838              		.loc 1 1262 0
 3839 1072 FFF7FEFF 		bl	button1_Read
 3840 1076 0346     		mov	r3, r0
 3841 1078 002B     		cmp	r3, #0
 3842 107a 25D1     		bne	.L140
 3843              		.loc 1 1262 0 is_stmt 0 discriminator 1
 3844 107c 384B     		ldr	r3, .L230+48
 3845 107e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3846 1080 002B     		cmp	r3, #0
 3847 1082 21D0     		beq	.L140
1263:main.c        ****             {
1264:main.c        ****                 currentCopedent -= 1;
 3848              		.loc 1 1264 0 is_stmt 1
 3849 1084 324B     		ldr	r3, .L230+32
 3850 1086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3851 1088 013B     		subs	r3, r3, #1
 3852 108a DAB2     		uxtb	r2, r3
 3853 108c 304B     		ldr	r3, .L230+32
 3854 108e 1A70     		strb	r2, [r3]
1265:main.c        ****                 currentCopedent &= 31;
 3855              		.loc 1 1265 0
 3856 1090 2F4B     		ldr	r3, .L230+32
 3857 1092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3858 1094 03F01F03 		and	r3, r3, #31
 3859 1098 DAB2     		uxtb	r2, r3
 3860 109a 2D4B     		ldr	r3, .L230+32
 3861 109c 1A70     		strb	r2, [r3]
1266:main.c        ****                 necks[currentNeck] = currentCopedent;
 3862              		.loc 1 1266 0
 3863 109e 2A4B     		ldr	r3, .L230+24
 3864 10a0 1B68     		ldr	r3, [r3]
 3865 10a2 2B4A     		ldr	r2, .L230+32
 3866 10a4 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3867 10a6 294A     		ldr	r2, .L230+28
 3868 10a8 D154     		strb	r1, [r2, r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 92


1267:main.c        ****                 EEPROM_WriteByte(currentCopedent, EEPROM_NECKS_OFFSET + currentNeck);
 3869              		.loc 1 1267 0
 3870 10aa 294B     		ldr	r3, .L230+32
 3871 10ac 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3872 10ae 264B     		ldr	r3, .L230+24
 3873 10b0 1B68     		ldr	r3, [r3]
 3874 10b2 9BB2     		uxth	r3, r3
 3875 10b4 1946     		mov	r1, r3
 3876 10b6 1046     		mov	r0, r2
 3877 10b8 FFF7FEFF 		bl	EEPROM_WriteByte
1268:main.c        ****                 displayCurrentPresetNameAndCopedent();
 3878              		.loc 1 1268 0
 3879 10bc FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
1269:main.c        ****                 button1Up = 0;
 3880              		.loc 1 1269 0
 3881 10c0 274B     		ldr	r3, .L230+48
 3882 10c2 0022     		movs	r2, #0
 3883 10c4 1A70     		strb	r2, [r3]
 3884 10c6 07E0     		b	.L141
 3885              	.L140:
1270:main.c        ****             }
1271:main.c        ****             else if (button1_Read())
 3886              		.loc 1 1271 0
 3887 10c8 FFF7FEFF 		bl	button1_Read
 3888 10cc 0346     		mov	r3, r0
 3889 10ce 002B     		cmp	r3, #0
 3890 10d0 02D0     		beq	.L141
1272:main.c        ****             {
1273:main.c        ****                 button1Up = 1;
 3891              		.loc 1 1273 0
 3892 10d2 234B     		ldr	r3, .L230+48
 3893 10d4 0122     		movs	r2, #1
 3894 10d6 1A70     		strb	r2, [r3]
 3895              	.L141:
1274:main.c        ****             }
1275:main.c        ****             
1276:main.c        ****             if ((!button2_Read()) && (button2Up))
 3896              		.loc 1 1276 0
 3897 10d8 FFF7FEFF 		bl	button2_Read
 3898 10dc 0346     		mov	r3, r0
 3899 10de 002B     		cmp	r3, #0
 3900 10e0 42D1     		bne	.L142
 3901              		.loc 1 1276 0 is_stmt 0 discriminator 1
 3902 10e2 204B     		ldr	r3, .L230+52
 3903 10e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3904 10e6 002B     		cmp	r3, #0
 3905 10e8 3ED0     		beq	.L142
1277:main.c        ****             {
1278:main.c        ****                 currentCopedent += 1;
 3906              		.loc 1 1278 0 is_stmt 1
 3907 10ea 194B     		ldr	r3, .L230+32
 3908 10ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3909 10ee 0133     		adds	r3, r3, #1
 3910 10f0 DAB2     		uxtb	r2, r3
 3911 10f2 174B     		ldr	r3, .L230+32
 3912 10f4 1A70     		strb	r2, [r3]
1279:main.c        ****                 currentCopedent &= 31;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 93


 3913              		.loc 1 1279 0
 3914 10f6 164B     		ldr	r3, .L230+32
 3915 10f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3916 10fa 03F01F03 		and	r3, r3, #31
 3917 10fe DAB2     		uxtb	r2, r3
 3918 1100 134B     		ldr	r3, .L230+32
 3919 1102 1A70     		strb	r2, [r3]
1280:main.c        ****                 necks[currentNeck] = currentCopedent;
 3920              		.loc 1 1280 0
 3921 1104 104B     		ldr	r3, .L230+24
 3922 1106 1B68     		ldr	r3, [r3]
 3923 1108 114A     		ldr	r2, .L230+32
 3924 110a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3925 110c 0F4A     		ldr	r2, .L230+28
 3926 110e D154     		strb	r1, [r2, r3]
1281:main.c        ****                 EEPROM_WriteByte(currentCopedent, EEPROM_NECKS_OFFSET + currentNeck);
 3927              		.loc 1 1281 0
 3928 1110 0F4B     		ldr	r3, .L230+32
 3929 1112 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3930 1114 0C4B     		ldr	r3, .L230+24
 3931 1116 1B68     		ldr	r3, [r3]
 3932 1118 9BB2     		uxth	r3, r3
 3933 111a 1946     		mov	r1, r3
 3934 111c 1046     		mov	r0, r2
 3935 111e FFF7FEFF 		bl	EEPROM_WriteByte
1282:main.c        ****                 
1283:main.c        ****                 displayCurrentPresetNameAndCopedent();
 3936              		.loc 1 1283 0
 3937 1122 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
1284:main.c        ****                 button2Up = 0;
 3938              		.loc 1 1284 0
 3939 1126 0F4B     		ldr	r3, .L230+52
 3940 1128 0022     		movs	r2, #0
 3941 112a 1A70     		strb	r2, [r3]
 3942 112c 24E0     		b	.L143
 3943              	.L231:
 3944 112e 00BF     		.align	2
 3945              	.L230:
 3946 1130 00000000 		.word	strings
 3947 1134 00000000 		.word	prevStrings
 3948 1138 00000000 		.word	numStrings
 3949 113c 00000000 		.word	octave
 3950 1140 00000000 		.word	oct1Up
 3951 1144 00000000 		.word	oct4Up
 3952 1148 00000000 		.word	currentNeck
 3953 114c 00000000 		.word	necks
 3954 1150 00000000 		.word	currentCopedent
 3955 1154 00000000 		.word	enterUp
 3956 1158 00000000 		.word	dualSlider
 3957 115c 00000000 		.word	editMode
 3958 1160 00000000 		.word	button1Up
 3959 1164 00000000 		.word	button2Up
 3960              	.L142:
1285:main.c        ****             }
1286:main.c        ****             else if (button2_Read())
 3961              		.loc 1 1286 0
 3962 1168 FFF7FEFF 		bl	button2_Read
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 94


 3963 116c 0346     		mov	r3, r0
 3964 116e 002B     		cmp	r3, #0
 3965 1170 02D0     		beq	.L143
1287:main.c        ****             {
1288:main.c        ****                 button2Up = 1;
 3966              		.loc 1 1288 0
 3967 1172 AF4B     		ldr	r3, .L232
 3968 1174 0122     		movs	r2, #1
 3969 1176 1A70     		strb	r2, [r3]
 3970              	.L143:
1289:main.c        ****             }
1290:main.c        ****             
1291:main.c        ****             if ((!button3_Read()) && (button3Up))
 3971              		.loc 1 1291 0
 3972 1178 FFF7FEFF 		bl	button3_Read
 3973 117c 0346     		mov	r3, r0
 3974 117e 002B     		cmp	r3, #0
 3975 1180 16D1     		bne	.L144
 3976              		.loc 1 1291 0 is_stmt 0 discriminator 1
 3977 1182 AC4B     		ldr	r3, .L232+4
 3978 1184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3979 1186 002B     		cmp	r3, #0
 3980 1188 12D0     		beq	.L144
1292:main.c        ****             {
1293:main.c        ****                 patchNum -= 1;
 3981              		.loc 1 1293 0 is_stmt 1
 3982 118a AB4B     		ldr	r3, .L232+8
 3983 118c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3984 118e 013B     		subs	r3, r3, #1
 3985 1190 DAB2     		uxtb	r2, r3
 3986 1192 A94B     		ldr	r3, .L232+8
 3987 1194 1A70     		strb	r2, [r3]
1294:main.c        ****                 patchNum &= 63;
 3988              		.loc 1 1294 0
 3989 1196 A84B     		ldr	r3, .L232+8
 3990 1198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3991 119a 03F03F03 		and	r3, r3, #63
 3992 119e DAB2     		uxtb	r2, r3
 3993 11a0 A54B     		ldr	r3, .L232+8
 3994 11a2 1A70     		strb	r2, [r3]
1295:main.c        ****                 displayCurrentPresetNameAndCopedent();
 3995              		.loc 1 1295 0
 3996 11a4 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
1296:main.c        ****                 button3Up = 0;
 3997              		.loc 1 1296 0
 3998 11a8 A24B     		ldr	r3, .L232+4
 3999 11aa 0022     		movs	r2, #0
 4000 11ac 1A70     		strb	r2, [r3]
 4001 11ae 07E0     		b	.L145
 4002              	.L144:
1297:main.c        ****             }
1298:main.c        ****             else if (button3_Read())
 4003              		.loc 1 1298 0
 4004 11b0 FFF7FEFF 		bl	button3_Read
 4005 11b4 0346     		mov	r3, r0
 4006 11b6 002B     		cmp	r3, #0
 4007 11b8 02D0     		beq	.L145
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 95


1299:main.c        ****             {
1300:main.c        ****                 button3Up = 1;
 4008              		.loc 1 1300 0
 4009 11ba 9E4B     		ldr	r3, .L232+4
 4010 11bc 0122     		movs	r2, #1
 4011 11be 1A70     		strb	r2, [r3]
 4012              	.L145:
1301:main.c        ****             }
1302:main.c        ****             
1303:main.c        ****             if ((!button4_Read()) && (button4Up))
 4013              		.loc 1 1303 0
 4014 11c0 FFF7FEFF 		bl	button4_Read
 4015 11c4 0346     		mov	r3, r0
 4016 11c6 002B     		cmp	r3, #0
 4017 11c8 16D1     		bne	.L146
 4018              		.loc 1 1303 0 is_stmt 0 discriminator 1
 4019 11ca 9C4B     		ldr	r3, .L232+12
 4020 11cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4021 11ce 002B     		cmp	r3, #0
 4022 11d0 12D0     		beq	.L146
1304:main.c        ****             {
1305:main.c        ****                 patchNum += 1;
 4023              		.loc 1 1305 0 is_stmt 1
 4024 11d2 994B     		ldr	r3, .L232+8
 4025 11d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4026 11d6 0133     		adds	r3, r3, #1
 4027 11d8 DAB2     		uxtb	r2, r3
 4028 11da 974B     		ldr	r3, .L232+8
 4029 11dc 1A70     		strb	r2, [r3]
1306:main.c        ****                 patchNum &= 63;
 4030              		.loc 1 1306 0
 4031 11de 964B     		ldr	r3, .L232+8
 4032 11e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4033 11e2 03F03F03 		and	r3, r3, #63
 4034 11e6 DAB2     		uxtb	r2, r3
 4035 11e8 934B     		ldr	r3, .L232+8
 4036 11ea 1A70     		strb	r2, [r3]
1307:main.c        ****                 displayCurrentPresetNameAndCopedent();
 4037              		.loc 1 1307 0
 4038 11ec FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
1308:main.c        ****                 button4Up = 0;
 4039              		.loc 1 1308 0
 4040 11f0 924B     		ldr	r3, .L232+12
 4041 11f2 0022     		movs	r2, #0
 4042 11f4 1A70     		strb	r2, [r3]
 4043 11f6 B7E0     		b	.L148
 4044              	.L146:
1309:main.c        ****             }
1310:main.c        ****             else if (button4_Read())
 4045              		.loc 1 1310 0
 4046 11f8 FFF7FEFF 		bl	button4_Read
 4047 11fc 0346     		mov	r3, r0
 4048 11fe 002B     		cmp	r3, #0
 4049 1200 00F0B280 		beq	.L148
1311:main.c        ****             {
1312:main.c        ****                 button4Up = 1;
 4050              		.loc 1 1312 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 96


 4051 1204 8D4B     		ldr	r3, .L232+12
 4052 1206 0122     		movs	r2, #1
 4053 1208 1A70     		strb	r2, [r3]
 4054 120a ADE0     		b	.L148
 4055              	.L139:
1313:main.c        ****             }
1314:main.c        ****         }
1315:main.c        ****         //if in edit mode, then /left right up down work differently
1316:main.c        ****         else
1317:main.c        ****         {
1318:main.c        ****         
1319:main.c        ****             if ((!button1_Read()) && (button1Up))
 4056              		.loc 1 1319 0
 4057 120c FFF7FEFF 		bl	button1_Read
 4058 1210 0346     		mov	r3, r0
 4059 1212 002B     		cmp	r3, #0
 4060 1214 25D1     		bne	.L149
 4061              		.loc 1 1319 0 is_stmt 0 discriminator 1
 4062 1216 8A4B     		ldr	r3, .L232+16
 4063 1218 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4064 121a 002B     		cmp	r3, #0
 4065 121c 21D0     		beq	.L149
1320:main.c        ****             {
1321:main.c        ****                 currentCopedent -= 1;
 4066              		.loc 1 1321 0 is_stmt 1
 4067 121e 894B     		ldr	r3, .L232+20
 4068 1220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4069 1222 013B     		subs	r3, r3, #1
 4070 1224 DAB2     		uxtb	r2, r3
 4071 1226 874B     		ldr	r3, .L232+20
 4072 1228 1A70     		strb	r2, [r3]
1322:main.c        ****                 currentCopedent &= 31;
 4073              		.loc 1 1322 0
 4074 122a 864B     		ldr	r3, .L232+20
 4075 122c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4076 122e 03F01F03 		and	r3, r3, #31
 4077 1232 DAB2     		uxtb	r2, r3
 4078 1234 834B     		ldr	r3, .L232+20
 4079 1236 1A70     		strb	r2, [r3]
1323:main.c        ****                 necks[currentNeck] = currentCopedent;
 4080              		.loc 1 1323 0
 4081 1238 834B     		ldr	r3, .L232+24
 4082 123a 1B68     		ldr	r3, [r3]
 4083 123c 814A     		ldr	r2, .L232+20
 4084 123e 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 4085 1240 824A     		ldr	r2, .L232+28
 4086 1242 D154     		strb	r1, [r2, r3]
1324:main.c        ****                 EEPROM_WriteByte(currentCopedent, EEPROM_NECKS_OFFSET + currentNeck);
 4087              		.loc 1 1324 0
 4088 1244 7F4B     		ldr	r3, .L232+20
 4089 1246 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4090 1248 7F4B     		ldr	r3, .L232+24
 4091 124a 1B68     		ldr	r3, [r3]
 4092 124c 9BB2     		uxth	r3, r3
 4093 124e 1946     		mov	r1, r3
 4094 1250 1046     		mov	r0, r2
 4095 1252 FFF7FEFF 		bl	EEPROM_WriteByte
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 97


1325:main.c        ****                 displayCurrentPresetNameAndCopedent();
 4096              		.loc 1 1325 0
 4097 1256 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
1326:main.c        ****                 button1Up = 0;
 4098              		.loc 1 1326 0
 4099 125a 794B     		ldr	r3, .L232+16
 4100 125c 0022     		movs	r2, #0
 4101 125e 1A70     		strb	r2, [r3]
 4102 1260 07E0     		b	.L150
 4103              	.L149:
1327:main.c        ****             }
1328:main.c        ****             else if (button1_Read())
 4104              		.loc 1 1328 0
 4105 1262 FFF7FEFF 		bl	button1_Read
 4106 1266 0346     		mov	r3, r0
 4107 1268 002B     		cmp	r3, #0
 4108 126a 02D0     		beq	.L150
1329:main.c        ****             {
1330:main.c        ****                 button1Up = 1;
 4109              		.loc 1 1330 0
 4110 126c 744B     		ldr	r3, .L232+16
 4111 126e 0122     		movs	r2, #1
 4112 1270 1A70     		strb	r2, [r3]
 4113              	.L150:
1331:main.c        ****             }
1332:main.c        ****             
1333:main.c        ****             if ((!button2_Read()) && (button2Up))
 4114              		.loc 1 1333 0
 4115 1272 FFF7FEFF 		bl	button2_Read
 4116 1276 0346     		mov	r3, r0
 4117 1278 002B     		cmp	r3, #0
 4118 127a 25D1     		bne	.L151
 4119              		.loc 1 1333 0 is_stmt 0 discriminator 1
 4120 127c 6C4B     		ldr	r3, .L232
 4121 127e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4122 1280 002B     		cmp	r3, #0
 4123 1282 21D0     		beq	.L151
1334:main.c        ****             {
1335:main.c        ****                 currentCopedent += 1;
 4124              		.loc 1 1335 0 is_stmt 1
 4125 1284 6F4B     		ldr	r3, .L232+20
 4126 1286 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4127 1288 0133     		adds	r3, r3, #1
 4128 128a DAB2     		uxtb	r2, r3
 4129 128c 6D4B     		ldr	r3, .L232+20
 4130 128e 1A70     		strb	r2, [r3]
1336:main.c        ****                 currentCopedent &= 31;
 4131              		.loc 1 1336 0
 4132 1290 6C4B     		ldr	r3, .L232+20
 4133 1292 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4134 1294 03F01F03 		and	r3, r3, #31
 4135 1298 DAB2     		uxtb	r2, r3
 4136 129a 6A4B     		ldr	r3, .L232+20
 4137 129c 1A70     		strb	r2, [r3]
1337:main.c        ****                 necks[currentNeck] = currentCopedent;
 4138              		.loc 1 1337 0
 4139 129e 6A4B     		ldr	r3, .L232+24
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 98


 4140 12a0 1B68     		ldr	r3, [r3]
 4141 12a2 684A     		ldr	r2, .L232+20
 4142 12a4 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 4143 12a6 694A     		ldr	r2, .L232+28
 4144 12a8 D154     		strb	r1, [r2, r3]
1338:main.c        ****                 EEPROM_WriteByte(currentCopedent, EEPROM_NECKS_OFFSET + currentNeck);
 4145              		.loc 1 1338 0
 4146 12aa 664B     		ldr	r3, .L232+20
 4147 12ac 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4148 12ae 664B     		ldr	r3, .L232+24
 4149 12b0 1B68     		ldr	r3, [r3]
 4150 12b2 9BB2     		uxth	r3, r3
 4151 12b4 1946     		mov	r1, r3
 4152 12b6 1046     		mov	r0, r2
 4153 12b8 FFF7FEFF 		bl	EEPROM_WriteByte
1339:main.c        ****                 displayCurrentPresetNameAndCopedent();  
 4154              		.loc 1 1339 0
 4155 12bc FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
1340:main.c        ****                 button2Up = 0;
 4156              		.loc 1 1340 0
 4157 12c0 5B4B     		ldr	r3, .L232
 4158 12c2 0022     		movs	r2, #0
 4159 12c4 1A70     		strb	r2, [r3]
 4160 12c6 07E0     		b	.L152
 4161              	.L151:
1341:main.c        ****             }
1342:main.c        ****             else if (button2_Read())
 4162              		.loc 1 1342 0
 4163 12c8 FFF7FEFF 		bl	button2_Read
 4164 12cc 0346     		mov	r3, r0
 4165 12ce 002B     		cmp	r3, #0
 4166 12d0 02D0     		beq	.L152
1343:main.c        ****             {
1344:main.c        ****                 button2Up = 1;
 4167              		.loc 1 1344 0
 4168 12d2 574B     		ldr	r3, .L232
 4169 12d4 0122     		movs	r2, #1
 4170 12d6 1A70     		strb	r2, [r3]
 4171              	.L152:
1345:main.c        ****             }
1346:main.c        ****             
1347:main.c        ****             if ((!button3_Read()) && (button3Up))
 4172              		.loc 1 1347 0
 4173 12d8 FFF7FEFF 		bl	button3_Read
 4174 12dc 0346     		mov	r3, r0
 4175 12de 002B     		cmp	r3, #0
 4176 12e0 16D1     		bne	.L153
 4177              		.loc 1 1347 0 is_stmt 0 discriminator 1
 4178 12e2 544B     		ldr	r3, .L232+4
 4179 12e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4180 12e6 002B     		cmp	r3, #0
 4181 12e8 12D0     		beq	.L153
1348:main.c        ****             {
1349:main.c        ****                 patchNum -= 1;
 4182              		.loc 1 1349 0 is_stmt 1
 4183 12ea 534B     		ldr	r3, .L232+8
 4184 12ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 99


 4185 12ee 013B     		subs	r3, r3, #1
 4186 12f0 DAB2     		uxtb	r2, r3
 4187 12f2 514B     		ldr	r3, .L232+8
 4188 12f4 1A70     		strb	r2, [r3]
1350:main.c        ****                 patchNum &= 63;
 4189              		.loc 1 1350 0
 4190 12f6 504B     		ldr	r3, .L232+8
 4191 12f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4192 12fa 03F03F03 		and	r3, r3, #63
 4193 12fe DAB2     		uxtb	r2, r3
 4194 1300 4D4B     		ldr	r3, .L232+8
 4195 1302 1A70     		strb	r2, [r3]
1351:main.c        ****                 displayCurrentPresetNameAndCopedent();
 4196              		.loc 1 1351 0
 4197 1304 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
1352:main.c        ****                 button3Up = 0;
 4198              		.loc 1 1352 0
 4199 1308 4A4B     		ldr	r3, .L232+4
 4200 130a 0022     		movs	r2, #0
 4201 130c 1A70     		strb	r2, [r3]
 4202 130e 07E0     		b	.L154
 4203              	.L153:
1353:main.c        ****             }
1354:main.c        ****             else if (button3_Read())
 4204              		.loc 1 1354 0
 4205 1310 FFF7FEFF 		bl	button3_Read
 4206 1314 0346     		mov	r3, r0
 4207 1316 002B     		cmp	r3, #0
 4208 1318 02D0     		beq	.L154
1355:main.c        ****             {
1356:main.c        ****                 button3Up = 1;
 4209              		.loc 1 1356 0
 4210 131a 464B     		ldr	r3, .L232+4
 4211 131c 0122     		movs	r2, #1
 4212 131e 1A70     		strb	r2, [r3]
 4213              	.L154:
1357:main.c        ****             }
1358:main.c        ****             
1359:main.c        ****             if ((!button4_Read()) && (button4Up))
 4214              		.loc 1 1359 0
 4215 1320 FFF7FEFF 		bl	button4_Read
 4216 1324 0346     		mov	r3, r0
 4217 1326 002B     		cmp	r3, #0
 4218 1328 16D1     		bne	.L155
 4219              		.loc 1 1359 0 is_stmt 0 discriminator 1
 4220 132a 444B     		ldr	r3, .L232+12
 4221 132c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4222 132e 002B     		cmp	r3, #0
 4223 1330 12D0     		beq	.L155
1360:main.c        ****             {
1361:main.c        ****                 patchNum += 1;
 4224              		.loc 1 1361 0 is_stmt 1
 4225 1332 414B     		ldr	r3, .L232+8
 4226 1334 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4227 1336 0133     		adds	r3, r3, #1
 4228 1338 DAB2     		uxtb	r2, r3
 4229 133a 3F4B     		ldr	r3, .L232+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 100


 4230 133c 1A70     		strb	r2, [r3]
1362:main.c        ****                 patchNum &= 63;
 4231              		.loc 1 1362 0
 4232 133e 3E4B     		ldr	r3, .L232+8
 4233 1340 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4234 1342 03F03F03 		and	r3, r3, #63
 4235 1346 DAB2     		uxtb	r2, r3
 4236 1348 3B4B     		ldr	r3, .L232+8
 4237 134a 1A70     		strb	r2, [r3]
1363:main.c        ****                 displayCurrentPresetNameAndCopedent();
 4238              		.loc 1 1363 0
 4239 134c FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
1364:main.c        ****                 button4Up = 0;
 4240              		.loc 1 1364 0
 4241 1350 3A4B     		ldr	r3, .L232+12
 4242 1352 0022     		movs	r2, #0
 4243 1354 1A70     		strb	r2, [r3]
 4244 1356 07E0     		b	.L148
 4245              	.L155:
1365:main.c        ****             }
1366:main.c        ****             else if (button4_Read())
 4246              		.loc 1 1366 0
 4247 1358 FFF7FEFF 		bl	button4_Read
 4248 135c 0346     		mov	r3, r0
 4249 135e 002B     		cmp	r3, #0
 4250 1360 02D0     		beq	.L148
1367:main.c        ****             {
1368:main.c        ****                 button4Up = 1;
 4251              		.loc 1 1368 0
 4252 1362 364B     		ldr	r3, .L232+12
 4253 1364 0122     		movs	r2, #1
 4254 1366 1A70     		strb	r2, [r3]
 4255              	.L148:
1369:main.c        ****             }
1370:main.c        ****         }
1371:main.c        ****         if (((!edit_button_Read() && !encoder_button_Read()) && (editUp)) || ((!edit_button_Read() 
 4256              		.loc 1 1371 0
 4257 1368 FFF7FEFF 		bl	edit_button_Read
 4258 136c 0346     		mov	r3, r0
 4259 136e 002B     		cmp	r3, #0
 4260 1370 08D1     		bne	.L156
 4261              		.loc 1 1371 0 is_stmt 0 discriminator 1
 4262 1372 FFF7FEFF 		bl	encoder_button_Read
 4263 1376 0346     		mov	r3, r0
 4264 1378 002B     		cmp	r3, #0
 4265 137a 03D1     		bne	.L156
 4266              		.loc 1 1371 0 discriminator 3
 4267 137c 344B     		ldr	r3, .L232+32
 4268 137e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4269 1380 002B     		cmp	r3, #0
 4270 1382 0FD1     		bne	.L157
 4271              	.L156:
 4272              		.loc 1 1371 0 discriminator 5
 4273 1384 FFF7FEFF 		bl	edit_button_Read
 4274 1388 0346     		mov	r3, r0
 4275 138a 002B     		cmp	r3, #0
 4276 138c 40F0D380 		bne	.L158
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 101


 4277              		.loc 1 1371 0 discriminator 6
 4278 1390 304B     		ldr	r3, .L232+36
 4279 1392 1B68     		ldr	r3, [r3]
 4280 1394 002B     		cmp	r3, #0
 4281 1396 00F0CE80 		beq	.L158
 4282              		.loc 1 1371 0 discriminator 7
 4283 139a 2D4B     		ldr	r3, .L232+32
 4284 139c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4285 139e 002B     		cmp	r3, #0
 4286 13a0 00F0C980 		beq	.L158
 4287              	.L157:
1372:main.c        ****         {
1373:main.c        ****             editMode = !editMode;
 4288              		.loc 1 1373 0 is_stmt 1
 4289 13a4 2B4B     		ldr	r3, .L232+36
 4290 13a6 1B68     		ldr	r3, [r3]
 4291 13a8 002B     		cmp	r3, #0
 4292 13aa 0CBF     		ite	eq
 4293 13ac 0123     		moveq	r3, #1
 4294 13ae 0023     		movne	r3, #0
 4295 13b0 DBB2     		uxtb	r3, r3
 4296 13b2 1A46     		mov	r2, r3
 4297 13b4 274B     		ldr	r3, .L232+36
 4298 13b6 1A60     		str	r2, [r3]
1374:main.c        ****             //for now edit mode is calibration mode
1375:main.c        ****             calibrationMode = !calibrationMode;
 4299              		.loc 1 1375 0
 4300 13b8 274B     		ldr	r3, .L232+40
 4301 13ba 1B68     		ldr	r3, [r3]
 4302 13bc 002B     		cmp	r3, #0
 4303 13be 0CBF     		ite	eq
 4304 13c0 0123     		moveq	r3, #1
 4305 13c2 0023     		movne	r3, #0
 4306 13c4 DBB2     		uxtb	r3, r3
 4307 13c6 1A46     		mov	r2, r3
 4308 13c8 234B     		ldr	r3, .L232+40
 4309 13ca 1A60     		str	r2, [r3]
1376:main.c        ****             LED_red2_Write(editMode);
 4310              		.loc 1 1376 0
 4311 13cc 214B     		ldr	r3, .L232+36
 4312 13ce 1B68     		ldr	r3, [r3]
 4313 13d0 DBB2     		uxtb	r3, r3
 4314 13d2 1846     		mov	r0, r3
 4315 13d4 FFF7FEFF 		bl	LED_red2_Write
1377:main.c        ****             editUp = 0;
 4316              		.loc 1 1377 0
 4317 13d8 1D4B     		ldr	r3, .L232+32
 4318 13da 0022     		movs	r2, #0
 4319 13dc 1A70     		strb	r2, [r3]
1378:main.c        ****             if (editMode)
 4320              		.loc 1 1378 0
 4321 13de 1D4B     		ldr	r3, .L232+36
 4322 13e0 1B68     		ldr	r3, [r3]
 4323 13e2 002B     		cmp	r3, #0
 4324 13e4 56D0     		beq	.L159
1379:main.c        ****             {
1380:main.c        ****                 //#if 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 102


1381:main.c        ****                 OLEDclear(128, 64);
 4325              		.loc 1 1381 0
 4326 13e6 4021     		movs	r1, #64
 4327 13e8 8020     		movs	r0, #128
 4328 13ea FFF7FEFF 		bl	OLEDclear
1382:main.c        ****         
1383:main.c        ****                 myGFX_setFont(0);
 4329              		.loc 1 1383 0
 4330 13ee 0020     		movs	r0, #0
 4331 13f0 FFF7FEFF 		bl	myGFX_setFont
1384:main.c        ****                 
1385:main.c        ****                 OLEDwriteString("CALIBRATION", 11, 1, FirstLine);
 4332              		.loc 1 1385 0
 4333 13f4 0023     		movs	r3, #0
 4334 13f6 0122     		movs	r2, #1
 4335 13f8 0B21     		movs	r1, #11
 4336 13fa 1848     		ldr	r0, .L232+44
 4337 13fc FFF7FEFF 		bl	OLEDwriteString
1386:main.c        ****                 OLEDwriteString("MOVE PEDALS", 11, 1, SecondLine);
 4338              		.loc 1 1386 0
 4339 1400 0123     		movs	r3, #1
 4340 1402 0122     		movs	r2, #1
 4341 1404 0B21     		movs	r1, #11
 4342 1406 1648     		ldr	r0, .L232+48
 4343 1408 FFF7FEFF 		bl	OLEDwriteString
1387:main.c        ****                 OLEDwriteString("AND LEVERS", 11, 1, ThirdLine);
 4344              		.loc 1 1387 0
 4345 140c 0223     		movs	r3, #2
 4346 140e 0122     		movs	r2, #1
 4347 1410 0B21     		movs	r1, #11
 4348 1412 1448     		ldr	r0, .L232+52
 4349 1414 FFF7FEFF 		bl	OLEDwriteString
1388:main.c        ****                 OLEDwriteString("THEN EXIT", 11, 1, FourthLine);
 4350              		.loc 1 1388 0
 4351 1418 0323     		movs	r3, #3
 4352 141a 0122     		movs	r2, #1
 4353 141c 0B21     		movs	r1, #11
 4354 141e 1248     		ldr	r0, .L232+56
 4355 1420 FFF7FEFF 		bl	OLEDwriteString
1389:main.c        ****                 mainOLEDWaitingToSend = 1;
 4356              		.loc 1 1389 0
 4357 1424 114B     		ldr	r3, .L232+60
 4358 1426 0122     		movs	r2, #1
 4359 1428 1A60     		str	r2, [r3]
 4360              	.LBB24:
1390:main.c        ****                                // #endif
1391:main.c        ****                 //entering calibration mode, clear the pedals low and high arrays
1392:main.c        ****                 for (int i = 0; i < 10; i++)
 4361              		.loc 1 1392 0
 4362 142a 0023     		movs	r3, #0
 4363 142c BB66     		str	r3, [r7, #104]
 4364 142e 2DE0     		b	.L160
 4365              	.L233:
 4366              		.align	2
 4367              	.L232:
 4368 1430 00000000 		.word	button2Up
 4369 1434 00000000 		.word	button3Up
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 103


 4370 1438 00000000 		.word	patchNum
 4371 143c 00000000 		.word	button4Up
 4372 1440 00000000 		.word	button1Up
 4373 1444 00000000 		.word	currentCopedent
 4374 1448 00000000 		.word	currentNeck
 4375 144c 00000000 		.word	necks
 4376 1450 00000000 		.word	editUp
 4377 1454 00000000 		.word	editMode
 4378 1458 00000000 		.word	calibrationMode
 4379 145c 04040000 		.word	.LC1
 4380 1460 10040000 		.word	.LC2
 4381 1464 1C040000 		.word	.LC3
 4382 1468 28040000 		.word	.LC4
 4383 146c 00000000 		.word	mainOLEDWaitingToSend
 4384              	.L161:
1393:main.c        ****                 {
1394:main.c        ****                     pedals_low[i] = 4095;
 4385              		.loc 1 1394 0 discriminator 3
 4386 1470 614A     		ldr	r2, .L234
 4387 1472 BB6E     		ldr	r3, [r7, #104]
 4388 1474 40F6FF71 		movw	r1, #4095
 4389 1478 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1395:main.c        ****                     pedals_high[i] = 0;
 4390              		.loc 1 1395 0 discriminator 3
 4391 147c 5F4A     		ldr	r2, .L234+4
 4392 147e BB6E     		ldr	r3, [r7, #104]
 4393 1480 0021     		movs	r1, #0
 4394 1482 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
1392:main.c        ****                 {
 4395              		.loc 1 1392 0 discriminator 3
 4396 1486 BB6E     		ldr	r3, [r7, #104]
 4397 1488 0133     		adds	r3, r3, #1
 4398 148a BB66     		str	r3, [r7, #104]
 4399              	.L160:
1392:main.c        ****                 {
 4400              		.loc 1 1392 0 is_stmt 0 discriminator 1
 4401 148c BB6E     		ldr	r3, [r7, #104]
 4402 148e 092B     		cmp	r3, #9
 4403 1490 EEDD     		ble	.L161
 4404              	.LBE24:
1378:main.c        ****             {
 4405              		.loc 1 1378 0 is_stmt 1
 4406 1492 58E0     		b	.L165
 4407              	.L159:
1396:main.c        ****                 }
1397:main.c        **** 
1398:main.c        ****             }
1399:main.c        ****             else
1400:main.c        ****             {
1401:main.c        ****                 //draw normal screen
1402:main.c        ****                 displayCurrentPresetNameAndCopedent();
 4408              		.loc 1 1402 0
 4409 1494 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
1403:main.c        ****                 calculatePedalRatios();
 4410              		.loc 1 1403 0
 4411 1498 FFF7FEFF 		bl	calculatePedalRatios
 4412              	.LBB25:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 104


1404:main.c        ****                 //now need to store this in EEPROM.                
1405:main.c        ****                 for (int i = 0; i < NUM_PEDALS; i++)
 4413              		.loc 1 1405 0
 4414 149c 0023     		movs	r3, #0
 4415 149e 7B66     		str	r3, [r7, #100]
 4416 14a0 45E0     		b	.L163
 4417              	.L164:
1406:main.c        ****                 {
1407:main.c        ****                      EEPROM_WriteByte((pedals_low[i] >> 8), EEPROM_CALIBRATION_OFFSET + (i*4));
 4418              		.loc 1 1407 0 discriminator 3
 4419 14a2 554A     		ldr	r2, .L234
 4420 14a4 7B6E     		ldr	r3, [r7, #100]
 4421 14a6 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 4422 14aa 1B0A     		lsrs	r3, r3, #8
 4423 14ac 9BB2     		uxth	r3, r3
 4424 14ae DAB2     		uxtb	r2, r3
 4425 14b0 7B6E     		ldr	r3, [r7, #100]
 4426 14b2 03F2E713 		addw	r3, r3, #487
 4427 14b6 9BB2     		uxth	r3, r3
 4428 14b8 9B00     		lsls	r3, r3, #2
 4429 14ba 9BB2     		uxth	r3, r3
 4430 14bc 1946     		mov	r1, r3
 4431 14be 1046     		mov	r0, r2
 4432 14c0 FFF7FEFF 		bl	EEPROM_WriteByte
1408:main.c        ****                      EEPROM_WriteByte((pedals_low[i] & 255), EEPROM_CALIBRATION_OFFSET + ((i*4) + 1
 4433              		.loc 1 1408 0 discriminator 3
 4434 14c4 4C4A     		ldr	r2, .L234
 4435 14c6 7B6E     		ldr	r3, [r7, #100]
 4436 14c8 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 4437 14cc DAB2     		uxtb	r2, r3
 4438 14ce 7B6E     		ldr	r3, [r7, #100]
 4439 14d0 9BB2     		uxth	r3, r3
 4440 14d2 9B00     		lsls	r3, r3, #2
 4441 14d4 9BB2     		uxth	r3, r3
 4442 14d6 03F29D73 		addw	r3, r3, #1949
 4443 14da 9BB2     		uxth	r3, r3
 4444 14dc 1946     		mov	r1, r3
 4445 14de 1046     		mov	r0, r2
 4446 14e0 FFF7FEFF 		bl	EEPROM_WriteByte
1409:main.c        ****                      EEPROM_WriteByte((pedals_high[i] >> 8), EEPROM_CALIBRATION_OFFSET + ((i*4) + 2
 4447              		.loc 1 1409 0 discriminator 3
 4448 14e4 454A     		ldr	r2, .L234+4
 4449 14e6 7B6E     		ldr	r3, [r7, #100]
 4450 14e8 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 4451 14ec 1B0A     		lsrs	r3, r3, #8
 4452 14ee 9BB2     		uxth	r3, r3
 4453 14f0 DAB2     		uxtb	r2, r3
 4454 14f2 7B6E     		ldr	r3, [r7, #100]
 4455 14f4 9BB2     		uxth	r3, r3
 4456 14f6 9B00     		lsls	r3, r3, #2
 4457 14f8 9BB2     		uxth	r3, r3
 4458 14fa 03F29E73 		addw	r3, r3, #1950
 4459 14fe 9BB2     		uxth	r3, r3
 4460 1500 1946     		mov	r1, r3
 4461 1502 1046     		mov	r0, r2
 4462 1504 FFF7FEFF 		bl	EEPROM_WriteByte
1410:main.c        ****                      EEPROM_WriteByte((pedals_high[i] & 255), EEPROM_CALIBRATION_OFFSET + ((i*4) + 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 105


 4463              		.loc 1 1410 0 discriminator 3
 4464 1508 3C4A     		ldr	r2, .L234+4
 4465 150a 7B6E     		ldr	r3, [r7, #100]
 4466 150c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 4467 1510 DAB2     		uxtb	r2, r3
 4468 1512 7B6E     		ldr	r3, [r7, #100]
 4469 1514 9BB2     		uxth	r3, r3
 4470 1516 9B00     		lsls	r3, r3, #2
 4471 1518 9BB2     		uxth	r3, r3
 4472 151a 03F29F73 		addw	r3, r3, #1951
 4473 151e 9BB2     		uxth	r3, r3
 4474 1520 1946     		mov	r1, r3
 4475 1522 1046     		mov	r0, r2
 4476 1524 FFF7FEFF 		bl	EEPROM_WriteByte
1405:main.c        ****                 {
 4477              		.loc 1 1405 0 discriminator 3
 4478 1528 7B6E     		ldr	r3, [r7, #100]
 4479 152a 0133     		adds	r3, r3, #1
 4480 152c 7B66     		str	r3, [r7, #100]
 4481              	.L163:
1405:main.c        ****                 {
 4482              		.loc 1 1405 0 is_stmt 0 discriminator 1
 4483 152e 7B6E     		ldr	r3, [r7, #100]
 4484 1530 092B     		cmp	r3, #9
 4485 1532 B6DD     		ble	.L164
 4486              	.LBE25:
1378:main.c        ****             {
 4487              		.loc 1 1378 0 is_stmt 1
 4488 1534 07E0     		b	.L165
 4489              	.L158:
1411:main.c        ****                 }
1412:main.c        **** 
1413:main.c        ****                 // also need to make this a little more hidden - maybe first edit then Enter?
1414:main.c        ****             }
1415:main.c        ****         }
1416:main.c        ****         else if (edit_button_Read())
 4490              		.loc 1 1416 0
 4491 1536 FFF7FEFF 		bl	edit_button_Read
 4492 153a 0346     		mov	r3, r0
 4493 153c 002B     		cmp	r3, #0
 4494 153e 02D0     		beq	.L165
1417:main.c        ****         {
1418:main.c        ****             editUp = 1;
 4495              		.loc 1 1418 0
 4496 1540 2F4B     		ldr	r3, .L234+8
 4497 1542 0122     		movs	r2, #1
 4498 1544 1A70     		strb	r2, [r3]
 4499              	.L165:
1419:main.c        ****         }
1420:main.c        ****         
1421:main.c        ****         if (octave != prevOctave)
1422:main.c        ****         {
1423:main.c        ****             //sendMIDIControlChange(90, octave);
1424:main.c        ****         }
1425:main.c        ****         prevOctave = octave;
 4500              		.loc 1 1425 0
 4501 1546 2F4B     		ldr	r3, .L234+12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 106


 4502 1548 1B68     		ldr	r3, [r3]
 4503 154a 2F4A     		ldr	r2, .L234+16
 4504 154c 1360     		str	r3, [r2]
 4505              	.LBB26:
1426:main.c        ****         
1427:main.c        ****         
1428:main.c        ****         for (int i=  0; i < 4; i++)
 4506              		.loc 1 1428 0
 4507 154e 0023     		movs	r3, #0
 4508 1550 3B66     		str	r3, [r7, #96]
 4509 1552 47E0     		b	.L166
 4510              	.L169:
1429:main.c        ****         {
1430:main.c        ****             knobs[i] = (ADC_SAR_Seq_1_GetResult16(i)/16);
 4511              		.loc 1 1430 0
 4512 1554 3B6E     		ldr	r3, [r7, #96]
 4513 1556 9BB2     		uxth	r3, r3
 4514 1558 1846     		mov	r0, r3
 4515 155a FFF7FEFF 		bl	ADC_SAR_Seq_1_GetResult16
 4516 155e 0346     		mov	r3, r0
 4517 1560 002B     		cmp	r3, #0
 4518 1562 00DA     		bge	.L167
 4519 1564 0F33     		adds	r3, r3, #15
 4520              	.L167:
 4521 1566 1B11     		asrs	r3, r3, #4
 4522 1568 1BB2     		sxth	r3, r3
 4523 156a D9B2     		uxtb	r1, r3
 4524 156c 274A     		ldr	r2, .L234+20
 4525 156e 3B6E     		ldr	r3, [r7, #96]
 4526 1570 1344     		add	r3, r3, r2
 4527 1572 0A46     		mov	r2, r1
 4528 1574 1A70     		strb	r2, [r3]
1431:main.c        ****             
1432:main.c        ****             knobs[i] = 255 - knobs[i];
 4529              		.loc 1 1432 0
 4530 1576 254A     		ldr	r2, .L234+20
 4531 1578 3B6E     		ldr	r3, [r7, #96]
 4532 157a 1344     		add	r3, r3, r2
 4533 157c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4534 157e DB43     		mvns	r3, r3
 4535 1580 D9B2     		uxtb	r1, r3
 4536 1582 224A     		ldr	r2, .L234+20
 4537 1584 3B6E     		ldr	r3, [r7, #96]
 4538 1586 1344     		add	r3, r3, r2
 4539 1588 0A46     		mov	r2, r1
 4540 158a 1A70     		strb	r2, [r3]
1433:main.c        ****             knobs7bit[i] = knobs[i] >> 1;
 4541              		.loc 1 1433 0
 4542 158c 1F4A     		ldr	r2, .L234+20
 4543 158e 3B6E     		ldr	r3, [r7, #96]
 4544 1590 1344     		add	r3, r3, r2
 4545 1592 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4546 1594 5B08     		lsrs	r3, r3, #1
 4547 1596 D9B2     		uxtb	r1, r3
 4548 1598 1D4A     		ldr	r2, .L234+24
 4549 159a 3B6E     		ldr	r3, [r7, #96]
 4550 159c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 107


 4551 159e 0A46     		mov	r2, r1
 4552 15a0 1A70     		strb	r2, [r3]
1434:main.c        ****             
1435:main.c        ****             if (knobs7bit[i] != prevKnobs7bit[i])
 4553              		.loc 1 1435 0
 4554 15a2 1B4A     		ldr	r2, .L234+24
 4555 15a4 3B6E     		ldr	r3, [r7, #96]
 4556 15a6 1344     		add	r3, r3, r2
 4557 15a8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4558 15aa 1A49     		ldr	r1, .L234+28
 4559 15ac 3B6E     		ldr	r3, [r7, #96]
 4560 15ae 0B44     		add	r3, r3, r1
 4561 15b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4562 15b2 9A42     		cmp	r2, r3
 4563 15b4 0AD0     		beq	.L168
1436:main.c        ****             {
1437:main.c        ****                 sendMIDIControlChange(i+9, knobs7bit[i], 0);
 4564              		.loc 1 1437 0
 4565 15b6 3B6E     		ldr	r3, [r7, #96]
 4566 15b8 03F10900 		add	r0, r3, #9
 4567 15bc 144A     		ldr	r2, .L234+24
 4568 15be 3B6E     		ldr	r3, [r7, #96]
 4569 15c0 1344     		add	r3, r3, r2
 4570 15c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4571 15c4 0022     		movs	r2, #0
 4572 15c6 1946     		mov	r1, r3
 4573 15c8 FFF7FEFF 		bl	sendMIDIControlChange
 4574              	.L168:
1438:main.c        ****             }
1439:main.c        ****             prevKnobs7bit[i] = knobs7bit[i];
 4575              		.loc 1 1439 0 discriminator 2
 4576 15cc 104A     		ldr	r2, .L234+24
 4577 15ce 3B6E     		ldr	r3, [r7, #96]
 4578 15d0 1344     		add	r3, r3, r2
 4579 15d2 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4580 15d4 0F4A     		ldr	r2, .L234+28
 4581 15d6 3B6E     		ldr	r3, [r7, #96]
 4582 15d8 1344     		add	r3, r3, r2
 4583 15da 0A46     		mov	r2, r1
 4584 15dc 1A70     		strb	r2, [r3]
1428:main.c        ****         {
 4585              		.loc 1 1428 0 discriminator 2
 4586 15de 3B6E     		ldr	r3, [r7, #96]
 4587 15e0 0133     		adds	r3, r3, #1
 4588 15e2 3B66     		str	r3, [r7, #96]
 4589              	.L166:
1428:main.c        ****         {
 4590              		.loc 1 1428 0 is_stmt 0 discriminator 1
 4591 15e4 3B6E     		ldr	r3, [r7, #96]
 4592 15e6 032B     		cmp	r3, #3
 4593 15e8 B4DD     		ble	.L169
 4594              	.LBE26:
1440:main.c        ****             
1441:main.c        ****         }
1442:main.c        ****         
1443:main.c        ****         testpin4_Write(1);
 4595              		.loc 1 1443 0 is_stmt 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 108


 4596 15ea 0120     		movs	r0, #1
 4597 15ec FFF7FEFF 		bl	testpin4_Write
 4598              	.LBB27:
1444:main.c        ****         //calculate the pitch of each string based on the current Copedent
1445:main.c        ****         for (int i = 0; i < numStrings; i++)
 4599              		.loc 1 1445 0
 4600 15f0 0023     		movs	r3, #0
 4601 15f2 FB65     		str	r3, [r7, #92]
 4602 15f4 9FE1     		b	.L170
 4603              	.L235:
 4604 15f6 00BF     		.align	2
 4605              	.L234:
 4606 15f8 00000000 		.word	pedals_low
 4607 15fc 00000000 		.word	pedals_high
 4608 1600 00000000 		.word	editUp
 4609 1604 00000000 		.word	octave
 4610 1608 00000000 		.word	prevOctave
 4611 160c 00000000 		.word	knobs
 4612 1610 00000000 		.word	knobs7bit
 4613 1614 00000000 		.word	prevKnobs7bit
 4614              	.L175:
 4615              	.LBB28:
1446:main.c        ****     	{
1447:main.c        ****     		//interpolate ratios for each of the strings
1448:main.c        ****            /*
1449:main.c        ****             float myMappedPos;
1450:main.c        ****             if (dualSlider)
1451:main.c        ****             {
1452:main.c        ****                myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositi
1453:main.c        ****             }
1454:main.c        ****             else
1455:main.c        ****             {
1456:main.c        ****                 myMappedPos = stringMappedPositions[0];
1457:main.c        ****             }
1458:main.c        **** 
1459:main.c        ****     		stringOctave[i] = powf(2.0f,octave);
1460:main.c        ****             */
1461:main.c        ****     		//then apply those ratios to the fundamental frequencies
1462:main.c        ****     		float tempMIDI = (copedent[necks[currentNeck]][0][i] +
 4616              		.loc 1 1462 0
 4617 1618 AA4B     		ldr	r3, .L236
 4618 161a 1B68     		ldr	r3, [r3]
 4619 161c AA4A     		ldr	r2, .L236+4
 4620 161e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4621 1620 1A46     		mov	r2, r3
 4622 1622 AA49     		ldr	r1, .L236+8
 4623 1624 1346     		mov	r3, r2
 4624 1626 5B01     		lsls	r3, r3, #5
 4625 1628 1344     		add	r3, r3, r2
 4626 162a 9B00     		lsls	r3, r3, #2
 4627 162c FA6D     		ldr	r2, [r7, #92]
 4628 162e 1344     		add	r3, r3, r2
 4629 1630 51F82340 		ldr	r4, [r1, r3, lsl #2]	@ float
1463:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4630              		.loc 1 1463 0
 4631 1634 A64B     		ldr	r3, .L236+12
 4632 1636 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 109


 4633 1638 1A46     		mov	r2, r3
 4634 163a A449     		ldr	r1, .L236+8
 4635 163c 1346     		mov	r3, r2
 4636 163e 5B01     		lsls	r3, r3, #5
 4637 1640 1344     		add	r3, r3, r2
 4638 1642 9B00     		lsls	r3, r3, #2
 4639 1644 FA6D     		ldr	r2, [r7, #92]
 4640 1646 1344     		add	r3, r3, r2
 4641 1648 3033     		adds	r3, r3, #48
 4642 164a 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4643 164e A14B     		ldr	r3, .L236+16
 4644 1650 1B68     		ldr	r3, [r3]	@ float
 4645 1652 1946     		mov	r1, r3
 4646 1654 1046     		mov	r0, r2
 4647 1656 FFF7FEFF 		bl	__aeabi_fmul
 4648 165a 0346     		mov	r3, r0
1462:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4649              		.loc 1 1462 0
 4650 165c 1946     		mov	r1, r3
 4651 165e 2046     		mov	r0, r4
 4652 1660 FFF7FEFF 		bl	__aeabi_fadd
 4653 1664 0346     		mov	r3, r0
 4654 1666 1C46     		mov	r4, r3
1464:main.c        ****                         (copedent[currentCopedent][5][i] * pedals_float[1]) +
 4655              		.loc 1 1464 0
 4656 1668 994B     		ldr	r3, .L236+12
 4657 166a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4658 166c 1A46     		mov	r2, r3
 4659 166e 9749     		ldr	r1, .L236+8
 4660 1670 1346     		mov	r3, r2
 4661 1672 5B01     		lsls	r3, r3, #5
 4662 1674 1344     		add	r3, r3, r2
 4663 1676 9B00     		lsls	r3, r3, #2
 4664 1678 FA6D     		ldr	r2, [r7, #92]
 4665 167a 1344     		add	r3, r3, r2
 4666 167c 3C33     		adds	r3, r3, #60
 4667 167e 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4668 1682 944B     		ldr	r3, .L236+16
 4669 1684 5B68     		ldr	r3, [r3, #4]	@ float
 4670 1686 1946     		mov	r1, r3
 4671 1688 1046     		mov	r0, r2
 4672 168a FFF7FEFF 		bl	__aeabi_fmul
 4673 168e 0346     		mov	r3, r0
1463:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4674              		.loc 1 1463 0
 4675 1690 1946     		mov	r1, r3
 4676 1692 2046     		mov	r0, r4
 4677 1694 FFF7FEFF 		bl	__aeabi_fadd
 4678 1698 0346     		mov	r3, r0
 4679 169a 1C46     		mov	r4, r3
1465:main.c        ****                         (copedent[currentCopedent][6][i] * pedals_float[2]) +
 4680              		.loc 1 1465 0
 4681 169c 8C4B     		ldr	r3, .L236+12
 4682 169e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4683 16a0 1A46     		mov	r2, r3
 4684 16a2 8A49     		ldr	r1, .L236+8
 4685 16a4 1346     		mov	r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 110


 4686 16a6 5B01     		lsls	r3, r3, #5
 4687 16a8 1344     		add	r3, r3, r2
 4688 16aa 9B00     		lsls	r3, r3, #2
 4689 16ac FA6D     		ldr	r2, [r7, #92]
 4690 16ae 1344     		add	r3, r3, r2
 4691 16b0 4833     		adds	r3, r3, #72
 4692 16b2 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4693 16b6 874B     		ldr	r3, .L236+16
 4694 16b8 9B68     		ldr	r3, [r3, #8]	@ float
 4695 16ba 1946     		mov	r1, r3
 4696 16bc 1046     		mov	r0, r2
 4697 16be FFF7FEFF 		bl	__aeabi_fmul
 4698 16c2 0346     		mov	r3, r0
1464:main.c        ****                         (copedent[currentCopedent][5][i] * pedals_float[1]) +
 4699              		.loc 1 1464 0
 4700 16c4 1946     		mov	r1, r3
 4701 16c6 2046     		mov	r0, r4
 4702 16c8 FFF7FEFF 		bl	__aeabi_fadd
 4703 16cc 0346     		mov	r3, r0
 4704 16ce 1C46     		mov	r4, r3
1466:main.c        ****                         (copedent[currentCopedent][7][i] * pedals_float[3]) +
 4705              		.loc 1 1466 0
 4706 16d0 7F4B     		ldr	r3, .L236+12
 4707 16d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4708 16d4 1A46     		mov	r2, r3
 4709 16d6 7D49     		ldr	r1, .L236+8
 4710 16d8 1346     		mov	r3, r2
 4711 16da 5B01     		lsls	r3, r3, #5
 4712 16dc 1344     		add	r3, r3, r2
 4713 16de 9B00     		lsls	r3, r3, #2
 4714 16e0 FA6D     		ldr	r2, [r7, #92]
 4715 16e2 1344     		add	r3, r3, r2
 4716 16e4 5433     		adds	r3, r3, #84
 4717 16e6 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4718 16ea 7A4B     		ldr	r3, .L236+16
 4719 16ec DB68     		ldr	r3, [r3, #12]	@ float
 4720 16ee 1946     		mov	r1, r3
 4721 16f0 1046     		mov	r0, r2
 4722 16f2 FFF7FEFF 		bl	__aeabi_fmul
 4723 16f6 0346     		mov	r3, r0
1465:main.c        ****                         (copedent[currentCopedent][6][i] * pedals_float[2]) +
 4724              		.loc 1 1465 0
 4725 16f8 1946     		mov	r1, r3
 4726 16fa 2046     		mov	r0, r4
 4727 16fc FFF7FEFF 		bl	__aeabi_fadd
 4728 1700 0346     		mov	r3, r0
 4729 1702 1C46     		mov	r4, r3
1467:main.c        ****                         (copedent[currentCopedent][8][i] * pedals_float[4]) +
 4730              		.loc 1 1467 0
 4731 1704 724B     		ldr	r3, .L236+12
 4732 1706 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4733 1708 1A46     		mov	r2, r3
 4734 170a 7049     		ldr	r1, .L236+8
 4735 170c 1346     		mov	r3, r2
 4736 170e 5B01     		lsls	r3, r3, #5
 4737 1710 1344     		add	r3, r3, r2
 4738 1712 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 111


 4739 1714 FA6D     		ldr	r2, [r7, #92]
 4740 1716 1344     		add	r3, r3, r2
 4741 1718 6033     		adds	r3, r3, #96
 4742 171a 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4743 171e 6D4B     		ldr	r3, .L236+16
 4744 1720 1B69     		ldr	r3, [r3, #16]	@ float
 4745 1722 1946     		mov	r1, r3
 4746 1724 1046     		mov	r0, r2
 4747 1726 FFF7FEFF 		bl	__aeabi_fmul
 4748 172a 0346     		mov	r3, r0
1466:main.c        ****                         (copedent[currentCopedent][7][i] * pedals_float[3]) +
 4749              		.loc 1 1466 0
 4750 172c 1946     		mov	r1, r3
 4751 172e 2046     		mov	r0, r4
 4752 1730 FFF7FEFF 		bl	__aeabi_fadd
 4753 1734 0346     		mov	r3, r0
 4754 1736 1C46     		mov	r4, r3
1468:main.c        ****                         (copedent[currentCopedent][10][i] * pedals_float[5]) +
 4755              		.loc 1 1468 0
 4756 1738 654B     		ldr	r3, .L236+12
 4757 173a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4758 173c 1A46     		mov	r2, r3
 4759 173e 6349     		ldr	r1, .L236+8
 4760 1740 1346     		mov	r3, r2
 4761 1742 5B01     		lsls	r3, r3, #5
 4762 1744 1344     		add	r3, r3, r2
 4763 1746 9B00     		lsls	r3, r3, #2
 4764 1748 FA6D     		ldr	r2, [r7, #92]
 4765 174a 1344     		add	r3, r3, r2
 4766 174c 7833     		adds	r3, r3, #120
 4767 174e 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4768 1752 604B     		ldr	r3, .L236+16
 4769 1754 5B69     		ldr	r3, [r3, #20]	@ float
 4770 1756 1946     		mov	r1, r3
 4771 1758 1046     		mov	r0, r2
 4772 175a FFF7FEFF 		bl	__aeabi_fmul
 4773 175e 0346     		mov	r3, r0
1467:main.c        ****                         (copedent[currentCopedent][8][i] * pedals_float[4]) +
 4774              		.loc 1 1467 0
 4775 1760 1946     		mov	r1, r3
 4776 1762 2046     		mov	r0, r4
 4777 1764 FFF7FEFF 		bl	__aeabi_fadd
 4778 1768 0346     		mov	r3, r0
 4779 176a 1C46     		mov	r4, r3
1469:main.c        ****                         (copedent[currentCopedent][9][i] * pedals_float[6]) +
 4780              		.loc 1 1469 0
 4781 176c 584B     		ldr	r3, .L236+12
 4782 176e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4783 1770 1A46     		mov	r2, r3
 4784 1772 5649     		ldr	r1, .L236+8
 4785 1774 1346     		mov	r3, r2
 4786 1776 5B01     		lsls	r3, r3, #5
 4787 1778 1344     		add	r3, r3, r2
 4788 177a 9B00     		lsls	r3, r3, #2
 4789 177c FA6D     		ldr	r2, [r7, #92]
 4790 177e 1344     		add	r3, r3, r2
 4791 1780 6C33     		adds	r3, r3, #108
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 112


 4792 1782 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4793 1786 534B     		ldr	r3, .L236+16
 4794 1788 9B69     		ldr	r3, [r3, #24]	@ float
 4795 178a 1946     		mov	r1, r3
 4796 178c 1046     		mov	r0, r2
 4797 178e FFF7FEFF 		bl	__aeabi_fmul
 4798 1792 0346     		mov	r3, r0
1468:main.c        ****                         (copedent[currentCopedent][10][i] * pedals_float[5]) +
 4799              		.loc 1 1468 0
 4800 1794 1946     		mov	r1, r3
 4801 1796 2046     		mov	r0, r4
 4802 1798 FFF7FEFF 		bl	__aeabi_fadd
 4803 179c 0346     		mov	r3, r0
 4804 179e 1C46     		mov	r4, r3
1470:main.c        ****                         (copedent[currentCopedent][3][i] * pedals_float[7]) +
 4805              		.loc 1 1470 0
 4806 17a0 4B4B     		ldr	r3, .L236+12
 4807 17a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4808 17a4 1A46     		mov	r2, r3
 4809 17a6 4949     		ldr	r1, .L236+8
 4810 17a8 1346     		mov	r3, r2
 4811 17aa 5B01     		lsls	r3, r3, #5
 4812 17ac 1344     		add	r3, r3, r2
 4813 17ae 9B00     		lsls	r3, r3, #2
 4814 17b0 FA6D     		ldr	r2, [r7, #92]
 4815 17b2 1344     		add	r3, r3, r2
 4816 17b4 2433     		adds	r3, r3, #36
 4817 17b6 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4818 17ba 464B     		ldr	r3, .L236+16
 4819 17bc DB69     		ldr	r3, [r3, #28]	@ float
 4820 17be 1946     		mov	r1, r3
 4821 17c0 1046     		mov	r0, r2
 4822 17c2 FFF7FEFF 		bl	__aeabi_fmul
 4823 17c6 0346     		mov	r3, r0
1469:main.c        ****                         (copedent[currentCopedent][9][i] * pedals_float[6]) +
 4824              		.loc 1 1469 0
 4825 17c8 1946     		mov	r1, r3
 4826 17ca 2046     		mov	r0, r4
 4827 17cc FFF7FEFF 		bl	__aeabi_fadd
 4828 17d0 0346     		mov	r3, r0
 4829 17d2 1C46     		mov	r4, r3
1471:main.c        ****                         (copedent[currentCopedent][1][i] * pedals_float[8]) +
 4830              		.loc 1 1471 0
 4831 17d4 3E4B     		ldr	r3, .L236+12
 4832 17d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4833 17d8 1A46     		mov	r2, r3
 4834 17da 3C49     		ldr	r1, .L236+8
 4835 17dc 1346     		mov	r3, r2
 4836 17de 5B01     		lsls	r3, r3, #5
 4837 17e0 1344     		add	r3, r3, r2
 4838 17e2 9B00     		lsls	r3, r3, #2
 4839 17e4 FA6D     		ldr	r2, [r7, #92]
 4840 17e6 1344     		add	r3, r3, r2
 4841 17e8 0C33     		adds	r3, r3, #12
 4842 17ea 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4843 17ee 394B     		ldr	r3, .L236+16
 4844 17f0 1B6A     		ldr	r3, [r3, #32]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 113


 4845 17f2 1946     		mov	r1, r3
 4846 17f4 1046     		mov	r0, r2
 4847 17f6 FFF7FEFF 		bl	__aeabi_fmul
 4848 17fa 0346     		mov	r3, r0
1470:main.c        ****                         (copedent[currentCopedent][3][i] * pedals_float[7]) +
 4849              		.loc 1 1470 0
 4850 17fc 1946     		mov	r1, r3
 4851 17fe 2046     		mov	r0, r4
 4852 1800 FFF7FEFF 		bl	__aeabi_fadd
 4853 1804 0346     		mov	r3, r0
 4854 1806 1C46     		mov	r4, r3
1472:main.c        ****                         (copedent[currentCopedent][2][i] * pedals_float[9]));
 4855              		.loc 1 1472 0
 4856 1808 314B     		ldr	r3, .L236+12
 4857 180a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4858 180c 1A46     		mov	r2, r3
 4859 180e 2F49     		ldr	r1, .L236+8
 4860 1810 1346     		mov	r3, r2
 4861 1812 5B01     		lsls	r3, r3, #5
 4862 1814 1344     		add	r3, r3, r2
 4863 1816 9B00     		lsls	r3, r3, #2
 4864 1818 FA6D     		ldr	r2, [r7, #92]
 4865 181a 1344     		add	r3, r3, r2
 4866 181c 1833     		adds	r3, r3, #24
 4867 181e 51F82320 		ldr	r2, [r1, r3, lsl #2]	@ float
 4868 1822 2C4B     		ldr	r3, .L236+16
 4869 1824 5B6A     		ldr	r3, [r3, #36]	@ float
 4870 1826 1946     		mov	r1, r3
 4871 1828 1046     		mov	r0, r2
 4872 182a FFF7FEFF 		bl	__aeabi_fmul
 4873 182e 0346     		mov	r3, r0
1462:main.c        ****                         (copedent[currentCopedent][4][i] * pedals_float[0]) +
 4874              		.loc 1 1462 0
 4875 1830 1946     		mov	r1, r3
 4876 1832 2046     		mov	r0, r4
 4877 1834 FFF7FEFF 		bl	__aeabi_fadd
 4878 1838 0346     		mov	r3, r0
 4879 183a 3B62     		str	r3, [r7, #32]	@ float
1473:main.c        **** 
1474:main.c        ****             
1475:main.c        ****             float openStringMIDI  = copedent[currentCopedent][0][i];
 4880              		.loc 1 1475 0
 4881 183c 244B     		ldr	r3, .L236+12
 4882 183e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4883 1840 1A46     		mov	r2, r3
 4884 1842 2249     		ldr	r1, .L236+8
 4885 1844 1346     		mov	r3, r2
 4886 1846 5B01     		lsls	r3, r3, #5
 4887 1848 1344     		add	r3, r3, r2
 4888 184a 9B00     		lsls	r3, r3, #2
 4889 184c FA6D     		ldr	r2, [r7, #92]
 4890 184e 1344     		add	r3, r3, r2
 4891 1850 51F82330 		ldr	r3, [r1, r3, lsl #2]	@ float
 4892 1854 FB61     		str	r3, [r7, #28]	@ float
1476:main.c        ****             openStringMIDI_Int[i] = (int)openStringMIDI;
 4893              		.loc 1 1476 0
 4894 1856 F869     		ldr	r0, [r7, #28]	@ float
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 114


 4895 1858 FFF7FEFF 		bl	__aeabi_f2iz
 4896 185c 0146     		mov	r1, r0
 4897 185e 1E4A     		ldr	r2, .L236+20
 4898 1860 FB6D     		ldr	r3, [r7, #92]
 4899 1862 42F82310 		str	r1, [r2, r3, lsl #2]
1477:main.c        ****             
1478:main.c        ****             float barMIDI = ftom((invStringMappedPositions[0]) * mtof(tempMIDI));
 4900              		.loc 1 1478 0
 4901 1866 1D4B     		ldr	r3, .L236+24
 4902 1868 1C68     		ldr	r4, [r3]	@ float
 4903 186a 386A     		ldr	r0, [r7, #32]	@ float
 4904 186c FFF7FEFF 		bl	mtof
 4905 1870 0346     		mov	r3, r0
 4906 1872 1946     		mov	r1, r3
 4907 1874 2046     		mov	r0, r4
 4908 1876 FFF7FEFF 		bl	__aeabi_fmul
 4909 187a 0346     		mov	r3, r0
 4910 187c 1846     		mov	r0, r3
 4911 187e FFF7FEFF 		bl	ftom
 4912 1882 B861     		str	r0, [r7, #24]	@ float
1479:main.c        ****             
1480:main.c        ****             float computerMIDIOffset = barMIDI - openStringMIDI_Int[i];// + stringOctave[i];
 4913              		.loc 1 1480 0
 4914 1884 144A     		ldr	r2, .L236+20
 4915 1886 FB6D     		ldr	r3, [r7, #92]
 4916 1888 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4917 188c 1846     		mov	r0, r3
 4918 188e FFF7FEFF 		bl	__aeabi_i2f
 4919 1892 0346     		mov	r3, r0
 4920 1894 1946     		mov	r1, r3
 4921 1896 B869     		ldr	r0, [r7, #24]	@ float
 4922 1898 FFF7FEFF 		bl	__aeabi_fsub
 4923 189c 0346     		mov	r3, r0
 4924 189e 7B61     		str	r3, [r7, #20]	@ float
1481:main.c        ****             
1482:main.c        ****             float pitchBendAmount = (computerMIDIOffset * 170.6666666666667f) + 8192.0f;  // 14bit 
 4925              		.loc 1 1482 0
 4926 18a0 0F49     		ldr	r1, .L236+28
 4927 18a2 7869     		ldr	r0, [r7, #20]	@ float
 4928 18a4 FFF7FEFF 		bl	__aeabi_fmul
 4929 18a8 0346     		mov	r3, r0
 4930 18aa 4FF08C41 		mov	r1, #1174405120
 4931 18ae 1846     		mov	r0, r3
 4932 18b0 FFF7FEFF 		bl	__aeabi_fadd
 4933 18b4 0346     		mov	r3, r0
 4934 18b6 3B61     		str	r3, [r7, #16]	@ float
1483:main.c        ****             if (pitchBendAmount != prevStringPitchBend[i])
 4935              		.loc 1 1483 0
 4936 18b8 0A4A     		ldr	r2, .L236+32
 4937 18ba FB6D     		ldr	r3, [r7, #92]
 4938 18bc 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 4939 18c0 12E0     		b	.L237
 4940              	.L238:
 4941 18c2 00BF     		.align	2
 4942              	.L236:
 4943 18c4 00000000 		.word	currentNeck
 4944 18c8 00000000 		.word	necks
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 115


 4945 18cc 00000000 		.word	copedent
 4946 18d0 00000000 		.word	currentCopedent
 4947 18d4 00000000 		.word	pedals_float
 4948 18d8 00000000 		.word	openStringMIDI_Int
 4949 18dc 00000000 		.word	invStringMappedPositions
 4950 18e0 ABAA2A43 		.word	1126869675
 4951 18e4 00000000 		.word	prevStringPitchBend
 4952              	.L237:
 4953 18e8 3969     		ldr	r1, [r7, #16]	@ float
 4954 18ea 1846     		mov	r0, r3
 4955 18ec FFF7FEFF 		bl	__aeabi_fcmpeq
 4956 18f0 0346     		mov	r3, r0
 4957 18f2 002B     		cmp	r3, #0
 4958 18f4 0AD1     		bne	.L171
1484:main.c        ****             {
1485:main.c        ****                 sendMIDIPitchBend((uint)pitchBendAmount, i+1);
 4959              		.loc 1 1485 0
 4960 18f6 3869     		ldr	r0, [r7, #16]	@ float
 4961 18f8 FFF7FEFF 		bl	__aeabi_f2uiz
 4962 18fc 0346     		mov	r3, r0
 4963 18fe 1A46     		mov	r2, r3
 4964 1900 FB6D     		ldr	r3, [r7, #92]
 4965 1902 0133     		adds	r3, r3, #1
 4966 1904 1946     		mov	r1, r3
 4967 1906 1046     		mov	r0, r2
 4968 1908 FFF7FEFF 		bl	sendMIDIPitchBend
 4969              	.L171:
1486:main.c        ****             }
1487:main.c        ****             prevStringPitchBend[i] = pitchBendAmount;
 4970              		.loc 1 1487 0
 4971 190c A049     		ldr	r1, .L239
 4972 190e FB6D     		ldr	r3, [r7, #92]
 4973 1910 3A69     		ldr	r2, [r7, #16]	@ float
 4974 1912 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
1488:main.c        ****             
1489:main.c        ****             if (tempMIDI > 0.0f)
 4975              		.loc 1 1489 0
 4976 1916 4FF00001 		mov	r1, #0
 4977 191a 386A     		ldr	r0, [r7, #32]	@ float
 4978 191c FFF7FEFF 		bl	__aeabi_fcmpgt
 4979 1920 0346     		mov	r3, r0
 4980 1922 002B     		cmp	r3, #0
 4981 1924 04D0     		beq	.L173
1490:main.c        ****             {
1491:main.c        ****                 stringMIDI[i] = tempMIDI;
 4982              		.loc 1 1491 0
 4983 1926 9B49     		ldr	r1, .L239+4
 4984 1928 FB6D     		ldr	r3, [r7, #92]
 4985 192a 3A6A     		ldr	r2, [r7, #32]	@ float
 4986 192c 41F82320 		str	r2, [r1, r3, lsl #2]	@ float
 4987              	.L173:
 4988              	.LBE28:
1445:main.c        ****     	{
 4989              		.loc 1 1445 0 discriminator 2
 4990 1930 FB6D     		ldr	r3, [r7, #92]
 4991 1932 0133     		adds	r3, r3, #1
 4992 1934 FB65     		str	r3, [r7, #92]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 116


 4993              	.L170:
1445:main.c        ****     	{
 4994              		.loc 1 1445 0 is_stmt 0 discriminator 1
 4995 1936 984B     		ldr	r3, .L239+8
 4996 1938 1B68     		ldr	r3, [r3]
 4997 193a FA6D     		ldr	r2, [r7, #92]
 4998 193c 9A42     		cmp	r2, r3
 4999 193e FFF66BAE 		blt	.L175
 5000              	.LBE27:
1492:main.c        ****             }
1493:main.c        ****     	}
1494:main.c        ****         testpin4_Write(0);
 5001              		.loc 1 1494 0 is_stmt 1
 5002 1942 0020     		movs	r0, #0
 5003 1944 FFF7FEFF 		bl	testpin4_Write
1495:main.c        ****         if (encoder_button_Read())
 5004              		.loc 1 1495 0
 5005 1948 FFF7FEFF 		bl	encoder_button_Read
 5006 194c 0346     		mov	r3, r0
 5007 194e 002B     		cmp	r3, #0
 5008 1950 10D0     		beq	.L176
1496:main.c        ****         {
1497:main.c        ****             encoderVal[encoderNum] += QuadDec_1_GetCounter() * 4;
 5009              		.loc 1 1497 0
 5010 1952 FFF7FEFF 		bl	QuadDec_1_GetCounter
 5011 1956 0346     		mov	r3, r0
 5012 1958 9800     		lsls	r0, r3, #2
 5013 195a 904B     		ldr	r3, .L239+12
 5014 195c 1B68     		ldr	r3, [r3]
 5015 195e 8F4A     		ldr	r2, .L239+12
 5016 1960 1268     		ldr	r2, [r2]
 5017 1962 8F49     		ldr	r1, .L239+16
 5018 1964 8A5C     		ldrb	r2, [r1, r2]
 5019 1966 D1B2     		uxtb	r1, r2
 5020 1968 C2B2     		uxtb	r2, r0
 5021 196a 0A44     		add	r2, r2, r1
 5022 196c D1B2     		uxtb	r1, r2
 5023 196e 8C4A     		ldr	r2, .L239+16
 5024 1970 D154     		strb	r1, [r2, r3]
 5025 1972 0FE0     		b	.L177
 5026              	.L176:
1498:main.c        ****         }
1499:main.c        ****         else
1500:main.c        ****         {
1501:main.c        ****             encoderVal[encoderNum] += QuadDec_1_GetCounter();
 5027              		.loc 1 1501 0
 5028 1974 FFF7FEFF 		bl	QuadDec_1_GetCounter
 5029 1978 0346     		mov	r3, r0
 5030 197a 1846     		mov	r0, r3
 5031 197c 874B     		ldr	r3, .L239+12
 5032 197e 1B68     		ldr	r3, [r3]
 5033 1980 864A     		ldr	r2, .L239+12
 5034 1982 1268     		ldr	r2, [r2]
 5035 1984 8649     		ldr	r1, .L239+16
 5036 1986 8A5C     		ldrb	r2, [r1, r2]
 5037 1988 D1B2     		uxtb	r1, r2
 5038 198a C2B2     		uxtb	r2, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 117


 5039 198c 0A44     		add	r2, r2, r1
 5040 198e D1B2     		uxtb	r1, r2
 5041 1990 834A     		ldr	r2, .L239+16
 5042 1992 D154     		strb	r1, [r2, r3]
 5043              	.L177:
1502:main.c        ****         }
1503:main.c        ****         QuadDec_1_SetCounter(0);
 5044              		.loc 1 1503 0
 5045 1994 0020     		movs	r0, #0
 5046 1996 FFF7FEFF 		bl	QuadDec_1_SetCounter
1504:main.c        ****         
1505:main.c        **** 
1506:main.c        ****         
1507:main.c        ****         if (USB_check_flag)
 5047              		.loc 1 1507 0
 5048 199a 824B     		ldr	r3, .L239+20
 5049 199c 1B78     		ldrb	r3, [r3]
 5050 199e DBB2     		uxtb	r3, r3
 5051 19a0 002B     		cmp	r3, #0
 5052 19a2 01D0     		beq	.L178
1508:main.c        ****         {
1509:main.c        ****             checkUSB_Vbus();
 5053              		.loc 1 1509 0
 5054 19a4 FFF7FEFF 		bl	checkUSB_Vbus
 5055              	.L178:
1510:main.c        ****         }
1511:main.c        ****         //only service the USB bus if there is a computer plugged in
1512:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 5056              		.loc 1 1512 0
 5057 19a8 7F4B     		ldr	r3, .L239+24
 5058 19aa 1B78     		ldrb	r3, [r3]
 5059 19ac DBB2     		uxtb	r3, r3
 5060 19ae 002B     		cmp	r3, #0
 5061 19b0 13D0     		beq	.L217
 5062              		.loc 1 1512 0 is_stmt 0 discriminator 1
 5063 19b2 FFF7FEFF 		bl	USB_VBusPresent
 5064 19b6 0346     		mov	r3, r0
 5065 19b8 002B     		cmp	r3, #0
 5066 19ba 0ED0     		beq	.L217
1513:main.c        ****         {
1514:main.c        ****             if (midiSent > 64)
 5067              		.loc 1 1514 0 is_stmt 1
 5068 19bc 7B4B     		ldr	r3, .L239+28
 5069 19be 1B88     		ldrh	r3, [r3]
 5070 19c0 402B     		cmp	r3, #64
 5071 19c2 05D9     		bls	.L180
1515:main.c        ****             {
1516:main.c        ****                 midiOverflow++;
 5072              		.loc 1 1516 0
 5073 19c4 7A4B     		ldr	r3, .L239+32
 5074 19c6 1B88     		ldrh	r3, [r3]
 5075 19c8 0133     		adds	r3, r3, #1
 5076 19ca 9AB2     		uxth	r2, r3
 5077 19cc 784B     		ldr	r3, .L239+32
 5078 19ce 1A80     		strh	r2, [r3]	@ movhi
 5079              	.L180:
1517:main.c        ****             }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 118


1518:main.c        ****             midiSent = 0;
 5080              		.loc 1 1518 0
 5081 19d0 764B     		ldr	r3, .L239+28
 5082 19d2 0022     		movs	r2, #0
 5083 19d4 1A80     		strh	r2, [r3]	@ movhi
1519:main.c        ****             USB_service();
 5084              		.loc 1 1519 0
 5085 19d6 FFF7FEFF 		bl	USB_service
 5086              	.L217:
1520:main.c        ****         }
1521:main.c        **** 
1522:main.c        ****         
1523:main.c        ****         /*
1524:main.c        ****         for (int i = 0; i < 10; i++)
1525:main.c        ****         {
1526:main.c        ****             myArray[i * 2] = processed_pedals[i] >> 8;
1527:main.c        ****             myArray[(i * 2) + 1] = processed_pedals[i] & 0xff;
1528:main.c        ****         }
1529:main.c        ****         
1530:main.c        ****         myArray[20] = octave | (voice << 2) | (dualSlider << 3) | (neck << 4);
1531:main.c        ****         for (int i = 0; i < 4; i++)
1532:main.c        ****         {
1533:main.c        ****             myArray[i+21] = knobs[i];
1534:main.c        ****         }
1535:main.c        ****         myArray[25] = processed_volumePedal >> 8;
1536:main.c        ****         myArray[26] = processed_volumePedal & 0xff;
1537:main.c        ****         */
1538:main.c        ****                 //make sure previous SPI2 transmission has completed before transferring the remain
1539:main.c        ****         while (0u == ((SPIM_1_ReadTxStatus() & SPIM_1_STS_SPI_DONE) || (SPIM_1_ReadTxStatus() & SPI
 5087              		.loc 1 1539 0
 5088 19da 00BF     		nop
 5089              	.L184:
 5090              		.loc 1 1539 0 is_stmt 0 discriminator 7
 5091 19dc FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 5092 19e0 0346     		mov	r3, r0
 5093 19e2 03F00103 		and	r3, r3, #1
 5094 19e6 002B     		cmp	r3, #0
 5095 19e8 06D1     		bne	.L181
 5096              		.loc 1 1539 0 discriminator 2
 5097 19ea FFF7FEFF 		bl	SPIM_1_ReadTxStatus
 5098 19ee 0346     		mov	r3, r0
 5099 19f0 03F01003 		and	r3, r3, #16
 5100 19f4 002B     		cmp	r3, #0
 5101 19f6 01D0     		beq	.L182
 5102              	.L181:
 5103              		.loc 1 1539 0 discriminator 3
 5104 19f8 0123     		movs	r3, #1
 5105 19fa 00E0     		b	.L183
 5106              	.L182:
 5107              		.loc 1 1539 0 discriminator 4
 5108 19fc 0023     		movs	r3, #0
 5109              	.L183:
 5110              		.loc 1 1539 0 discriminator 6
 5111 19fe 002B     		cmp	r3, #0
 5112 1a00 ECD0     		beq	.L184
1540:main.c        ****         {
1541:main.c        ****             ;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 119


1542:main.c        ****         }
1543:main.c        ****         testpin6_Write(1);
 5113              		.loc 1 1543 0 is_stmt 1
 5114 1a02 0120     		movs	r0, #1
 5115 1a04 FFF7FEFF 		bl	testpin6_Write
1544:main.c        ****         if (sendingMessage == 1) //sending synthesis preset to synth board
 5116              		.loc 1 1544 0
 5117 1a08 6A4B     		ldr	r3, .L239+36
 5118 1a0a 1B78     		ldrb	r3, [r3]
 5119 1a0c DBB2     		uxtb	r3, r3
 5120 1a0e 012B     		cmp	r3, #1
 5121 1a10 56D1     		bne	.L185
1545:main.c        ****         {
1546:main.c        ****             if (sendMessageEnd) //send end message
 5122              		.loc 1 1546 0
 5123 1a12 694B     		ldr	r3, .L239+40
 5124 1a14 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5125 1a16 002B     		cmp	r3, #0
 5126 1a18 1DD0     		beq	.L186
1547:main.c        ****             {
1548:main.c        ****                 myArray[0] = 253;
 5127              		.loc 1 1548 0
 5128 1a1a 684B     		ldr	r3, .L239+44
 5129 1a1c FD22     		movs	r2, #253
 5130 1a1e 1A70     		strb	r2, [r3]
1549:main.c        ****                 myArray[1] = presetNumberToWrite;
 5131              		.loc 1 1549 0
 5132 1a20 674B     		ldr	r3, .L239+48
 5133 1a22 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5134 1a24 654B     		ldr	r3, .L239+44
 5135 1a26 5A70     		strb	r2, [r3, #1]
1550:main.c        ****                 currentPresetSelection = presetNumberToWrite;
 5136              		.loc 1 1550 0
 5137 1a28 654B     		ldr	r3, .L239+48
 5138 1a2a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5139 1a2c 1A46     		mov	r2, r3
 5140 1a2e 654B     		ldr	r3, .L239+52
 5141 1a30 1A60     		str	r2, [r3]
1551:main.c        ****                 //display previous preset as loaded
1552:main.c        ****                 displayCurrentPresetNameAndCopedent();
 5142              		.loc 1 1552 0
 5143 1a32 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
1553:main.c        ****                 //OLED_invert(0);
1554:main.c        ****                 sendMessageEnd = 0;
 5144              		.loc 1 1554 0
 5145 1a36 604B     		ldr	r3, .L239+40
 5146 1a38 0022     		movs	r2, #0
 5147 1a3a 1A70     		strb	r2, [r3]
1555:main.c        ****                 sendingMessage = 0;
 5148              		.loc 1 1555 0
 5149 1a3c 5D4B     		ldr	r3, .L239+36
 5150 1a3e 0022     		movs	r2, #0
 5151 1a40 1A70     		strb	r2, [r3]
1556:main.c        ****                 messageArraySendCount = 0;
 5152              		.loc 1 1556 0
 5153 1a42 614B     		ldr	r3, .L239+56
 5154 1a44 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 120


 5155 1a46 1A80     		strh	r2, [r3]	@ movhi
1557:main.c        ****                 myArray[30] = 254;
 5156              		.loc 1 1557 0
 5157 1a48 5C4B     		ldr	r3, .L239+44
 5158 1a4a FE22     		movs	r2, #254
 5159 1a4c 9A77     		strb	r2, [r3, #30]
1558:main.c        ****                 myArray[31] = 253;
 5160              		.loc 1 1558 0
 5161 1a4e 5B4B     		ldr	r3, .L239+44
 5162 1a50 FD22     		movs	r2, #253
 5163 1a52 DA77     		strb	r2, [r3, #31]
 5164 1a54 A0E1     		b	.L192
 5165              	.L186:
1559:main.c        ****                 
1560:main.c        ****             }
1561:main.c        ****             else //send chunks
1562:main.c        ****             {
1563:main.c        ****                 //send the next preset Chunkkkkk
1564:main.c        ****                 myArray[0] = 2;
 5166              		.loc 1 1564 0
 5167 1a56 594B     		ldr	r3, .L239+44
 5168 1a58 0222     		movs	r2, #2
 5169 1a5a 1A70     		strb	r2, [r3]
1565:main.c        ****                 myArray[1] = presetNumberToWrite;
 5170              		.loc 1 1565 0
 5171 1a5c 584B     		ldr	r3, .L239+48
 5172 1a5e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5173 1a60 564B     		ldr	r3, .L239+44
 5174 1a62 5A70     		strb	r2, [r3, #1]
 5175              	.LBB29:
1566:main.c        ****                 for (uint i = 2 ; i < myBufferSize-2; i++)
 5176              		.loc 1 1566 0
 5177 1a64 0223     		movs	r3, #2
 5178 1a66 BB65     		str	r3, [r7, #88]
 5179 1a68 20E0     		b	.L188
 5180              	.L191:
1567:main.c        ****                 {
1568:main.c        ****                     if (messageArraySendCount < messageArraySize)
 5181              		.loc 1 1568 0
 5182 1a6a 574B     		ldr	r3, .L239+56
 5183 1a6c 1A88     		ldrh	r2, [r3]
 5184 1a6e 574B     		ldr	r3, .L239+60
 5185 1a70 1B88     		ldrh	r3, [r3]
 5186 1a72 9A42     		cmp	r2, r3
 5187 1a74 0FD2     		bcs	.L189
1569:main.c        ****                     {
1570:main.c        ****                         myArray[i] = presetArray[messageArraySendCount++];
 5188              		.loc 1 1570 0
 5189 1a76 544B     		ldr	r3, .L239+56
 5190 1a78 1B88     		ldrh	r3, [r3]
 5191 1a7a 5A1C     		adds	r2, r3, #1
 5192 1a7c 91B2     		uxth	r1, r2
 5193 1a7e 524A     		ldr	r2, .L239+56
 5194 1a80 1180     		strh	r1, [r2]	@ movhi
 5195 1a82 1A46     		mov	r2, r3
 5196 1a84 524B     		ldr	r3, .L239+64
 5197 1a86 9B5C     		ldrb	r3, [r3, r2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 121


 5198 1a88 D9B2     		uxtb	r1, r3
 5199 1a8a 4C4A     		ldr	r2, .L239+44
 5200 1a8c BB6D     		ldr	r3, [r7, #88]
 5201 1a8e 1344     		add	r3, r3, r2
 5202 1a90 0A46     		mov	r2, r1
 5203 1a92 1A70     		strb	r2, [r3]
 5204 1a94 07E0     		b	.L190
 5205              	.L189:
1571:main.c        ****                     }
1572:main.c        ****                     else
1573:main.c        ****                     {
1574:main.c        ****                         myArray[i] = 0xee; // preset end ack   - done, next send a message that s
 5206              		.loc 1 1574 0
 5207 1a96 494A     		ldr	r2, .L239+44
 5208 1a98 BB6D     		ldr	r3, [r7, #88]
 5209 1a9a 1344     		add	r3, r3, r2
 5210 1a9c EE22     		movs	r2, #238
 5211 1a9e 1A70     		strb	r2, [r3]
1575:main.c        ****                         sendMessageEnd = 1;
 5212              		.loc 1 1575 0
 5213 1aa0 454B     		ldr	r3, .L239+40
 5214 1aa2 0122     		movs	r2, #1
 5215 1aa4 1A70     		strb	r2, [r3]
 5216              	.L190:
1566:main.c        ****                 {
 5217              		.loc 1 1566 0 discriminator 2
 5218 1aa6 BB6D     		ldr	r3, [r7, #88]
 5219 1aa8 0133     		adds	r3, r3, #1
 5220 1aaa BB65     		str	r3, [r7, #88]
 5221              	.L188:
1566:main.c        ****                 {
 5222              		.loc 1 1566 0 is_stmt 0 discriminator 1
 5223 1aac BB6D     		ldr	r3, [r7, #88]
 5224 1aae 1D2B     		cmp	r3, #29
 5225 1ab0 DBD9     		bls	.L191
 5226              	.LBE29:
1576:main.c        ****                     }
1577:main.c        ****                 }
1578:main.c        ****                 myArray[30] = 254;
 5227              		.loc 1 1578 0 is_stmt 1
 5228 1ab2 424B     		ldr	r3, .L239+44
 5229 1ab4 FE22     		movs	r2, #254
 5230 1ab6 9A77     		strb	r2, [r3, #30]
1579:main.c        ****                 myArray[31] = 253;
 5231              		.loc 1 1579 0
 5232 1ab8 404B     		ldr	r3, .L239+44
 5233 1aba FD22     		movs	r2, #253
 5234 1abc DA77     		strb	r2, [r3, #31]
 5235 1abe 6BE1     		b	.L192
 5236              	.L185:
1580:main.c        ****             }    
1581:main.c        ****         }
1582:main.c        ****         
1583:main.c        ****         else if (sendSingleParamUpdate)
 5237              		.loc 1 1583 0
 5238 1ac0 444B     		ldr	r3, .L239+68
 5239 1ac2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 122


 5240 1ac4 002B     		cmp	r3, #0
 5241 1ac6 1CD0     		beq	.L193
1584:main.c        ****         {
1585:main.c        ****             myArray[0] = 6;
 5242              		.loc 1 1585 0
 5243 1ac8 3C4B     		ldr	r3, .L239+44
 5244 1aca 0622     		movs	r2, #6
 5245 1acc 1A70     		strb	r2, [r3]
1586:main.c        ****             myArray[1] = singleParamToUpdateHigh;
 5246              		.loc 1 1586 0
 5247 1ace 424B     		ldr	r3, .L239+72
 5248 1ad0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5249 1ad2 3A4B     		ldr	r3, .L239+44
 5250 1ad4 5A70     		strb	r2, [r3, #1]
1587:main.c        ****             myArray[2] = singleParamToUpdateLow;
 5251              		.loc 1 1587 0
 5252 1ad6 414B     		ldr	r3, .L239+76
 5253 1ad8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5254 1ada 384B     		ldr	r3, .L239+44
 5255 1adc 9A70     		strb	r2, [r3, #2]
1588:main.c        ****             myArray[3] = singleParamValueHigh;
 5256              		.loc 1 1588 0
 5257 1ade 404B     		ldr	r3, .L239+80
 5258 1ae0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5259 1ae2 364B     		ldr	r3, .L239+44
 5260 1ae4 DA70     		strb	r2, [r3, #3]
1589:main.c        ****             myArray[4] = singleParamValueLow;
 5261              		.loc 1 1589 0
 5262 1ae6 3F4B     		ldr	r3, .L239+84
 5263 1ae8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5264 1aea 344B     		ldr	r3, .L239+44
 5265 1aec 1A71     		strb	r2, [r3, #4]
1590:main.c        ****             myArray[30] = 254;
 5266              		.loc 1 1590 0
 5267 1aee 334B     		ldr	r3, .L239+44
 5268 1af0 FE22     		movs	r2, #254
 5269 1af2 9A77     		strb	r2, [r3, #30]
1591:main.c        ****             myArray[31] = 253;
 5270              		.loc 1 1591 0
 5271 1af4 314B     		ldr	r3, .L239+44
 5272 1af6 FD22     		movs	r2, #253
 5273 1af8 DA77     		strb	r2, [r3, #31]
1592:main.c        ****             sendSingleParamUpdate = 0;
 5274              		.loc 1 1592 0
 5275 1afa 364B     		ldr	r3, .L239+68
 5276 1afc 0022     		movs	r2, #0
 5277 1afe 1A70     		strb	r2, [r3]
 5278 1b00 4AE1     		b	.L192
 5279              	.L193:
1593:main.c        ****         }
1594:main.c        ****         
1595:main.c        ****         else if (sendMappingChangeUpdate)
 5280              		.loc 1 1595 0
 5281 1b02 394B     		ldr	r3, .L239+88
 5282 1b04 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5283 1b06 002B     		cmp	r3, #0
 5284 1b08 24D0     		beq	.L194
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 123


1596:main.c        ****         {
1597:main.c        ****             myArray[0] = 7;
 5285              		.loc 1 1597 0
 5286 1b0a 2C4B     		ldr	r3, .L239+44
 5287 1b0c 0722     		movs	r2, #7
 5288 1b0e 1A70     		strb	r2, [r3]
1598:main.c        ****             myArray[1] = mappingArray[0];
 5289              		.loc 1 1598 0
 5290 1b10 364B     		ldr	r3, .L239+92
 5291 1b12 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5292 1b14 294B     		ldr	r3, .L239+44
 5293 1b16 5A70     		strb	r2, [r3, #1]
1599:main.c        ****             myArray[2] =  mappingArray[1];
 5294              		.loc 1 1599 0
 5295 1b18 344B     		ldr	r3, .L239+92
 5296 1b1a 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5297 1b1c 274B     		ldr	r3, .L239+44
 5298 1b1e 9A70     		strb	r2, [r3, #2]
1600:main.c        ****             myArray[3] =  mappingArray[2];
 5299              		.loc 1 1600 0
 5300 1b20 324B     		ldr	r3, .L239+92
 5301 1b22 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 5302 1b24 254B     		ldr	r3, .L239+44
 5303 1b26 DA70     		strb	r2, [r3, #3]
1601:main.c        ****             myArray[4] =  mappingArray[3];
 5304              		.loc 1 1601 0
 5305 1b28 304B     		ldr	r3, .L239+92
 5306 1b2a DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 5307 1b2c 234B     		ldr	r3, .L239+44
 5308 1b2e 1A71     		strb	r2, [r3, #4]
1602:main.c        ****              myArray[5] =  mappingArray[4];
 5309              		.loc 1 1602 0
 5310 1b30 2E4B     		ldr	r3, .L239+92
 5311 1b32 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 5312 1b34 214B     		ldr	r3, .L239+44
 5313 1b36 5A71     		strb	r2, [r3, #5]
1603:main.c        ****              myArray[6] =  mappingArray[5];
 5314              		.loc 1 1603 0
 5315 1b38 2C4B     		ldr	r3, .L239+92
 5316 1b3a 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 5317 1b3c 1F4B     		ldr	r3, .L239+44
 5318 1b3e 9A71     		strb	r2, [r3, #6]
1604:main.c        ****             myArray[30] = 254;
 5319              		.loc 1 1604 0
 5320 1b40 1E4B     		ldr	r3, .L239+44
 5321 1b42 FE22     		movs	r2, #254
 5322 1b44 9A77     		strb	r2, [r3, #30]
1605:main.c        ****             myArray[31] = 253;
 5323              		.loc 1 1605 0
 5324 1b46 1D4B     		ldr	r3, .L239+44
 5325 1b48 FD22     		movs	r2, #253
 5326 1b4a DA77     		strb	r2, [r3, #31]
1606:main.c        ****             sendMappingChangeUpdate = 0;
 5327              		.loc 1 1606 0
 5328 1b4c 264B     		ldr	r3, .L239+88
 5329 1b4e 0022     		movs	r2, #0
 5330 1b50 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 124


 5331 1b52 21E1     		b	.L192
 5332              	.L194:
1607:main.c        ****         }
1608:main.c        ****         
1609:main.c        ****         
1610:main.c        ****         else if (sendKnobs)
 5333              		.loc 1 1610 0
 5334 1b54 264B     		ldr	r3, .L239+96
 5335 1b56 1B78     		ldrb	r3, [r3]
 5336 1b58 DBB2     		uxtb	r3, r3
 5337 1b5a 002B     		cmp	r3, #0
 5338 1b5c 00F0AD80 		beq	.L195
1611:main.c        ****         {
1612:main.c        ****             myArray[0] = 3; //sending knob stuff, not a preset send
 5339              		.loc 1 1612 0
 5340 1b60 164B     		ldr	r3, .L239+44
 5341 1b62 0322     		movs	r2, #3
 5342 1b64 1A70     		strb	r2, [r3]
 5343              	.LBB30:
1613:main.c        ****             for (int i = 0; i < 8; i++)
 5344              		.loc 1 1613 0
 5345 1b66 0023     		movs	r3, #0
 5346 1b68 7B65     		str	r3, [r7, #84]
 5347 1b6a 0AE0     		b	.L196
 5348              	.L197:
1614:main.c        ****             {
1615:main.c        ****                 myArray[i + 1] = macroKnobValues[i];
 5349              		.loc 1 1615 0 discriminator 3
 5350 1b6c 7B6D     		ldr	r3, [r7, #84]
 5351 1b6e 0133     		adds	r3, r3, #1
 5352 1b70 2049     		ldr	r1, .L239+100
 5353 1b72 7A6D     		ldr	r2, [r7, #84]
 5354 1b74 0A44     		add	r2, r2, r1
 5355 1b76 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5356 1b78 104A     		ldr	r2, .L239+44
 5357 1b7a D154     		strb	r1, [r2, r3]
1613:main.c        ****             for (int i = 0; i < 8; i++)
 5358              		.loc 1 1613 0 discriminator 3
 5359 1b7c 7B6D     		ldr	r3, [r7, #84]
 5360 1b7e 0133     		adds	r3, r3, #1
 5361 1b80 7B65     		str	r3, [r7, #84]
 5362              	.L196:
1613:main.c        ****             for (int i = 0; i < 8; i++)
 5363              		.loc 1 1613 0 is_stmt 0 discriminator 1
 5364 1b82 7B6D     		ldr	r3, [r7, #84]
 5365 1b84 072B     		cmp	r3, #7
 5366 1b86 F1DD     		ble	.L197
 5367              	.LBE30:
 5368              	.LBB31:
1616:main.c        ****             }
1617:main.c        ****             for (int i = 0; i < 4; i++)
 5369              		.loc 1 1617 0 is_stmt 1
 5370 1b88 0023     		movs	r3, #0
 5371 1b8a 3B65     		str	r3, [r7, #80]
 5372 1b8c 3FE0     		b	.L198
 5373              	.L240:
 5374 1b8e 00BF     		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 125


 5375              	.L239:
 5376 1b90 00000000 		.word	prevStringPitchBend
 5377 1b94 00000000 		.word	stringMIDI
 5378 1b98 00000000 		.word	numStrings
 5379 1b9c 00000000 		.word	encoderNum
 5380 1ba0 00000000 		.word	encoderVal
 5381 1ba4 00000000 		.word	USB_check_flag
 5382 1ba8 00000000 		.word	USB_active
 5383 1bac 00000000 		.word	midiSent
 5384 1bb0 00000000 		.word	midiOverflow
 5385 1bb4 00000000 		.word	sendingMessage
 5386 1bb8 00000000 		.word	sendMessageEnd
 5387 1bbc 00000000 		.word	myArray
 5388 1bc0 00000000 		.word	presetNumberToWrite
 5389 1bc4 00000000 		.word	currentPresetSelection
 5390 1bc8 00000000 		.word	messageArraySendCount
 5391 1bcc 00000000 		.word	messageArraySize
 5392 1bd0 00000000 		.word	presetArray
 5393 1bd4 00000000 		.word	sendSingleParamUpdate
 5394 1bd8 00000000 		.word	singleParamToUpdateHigh
 5395 1bdc 00000000 		.word	singleParamToUpdateLow
 5396 1be0 00000000 		.word	singleParamValueHigh
 5397 1be4 00000000 		.word	singleParamValueLow
 5398 1be8 00000000 		.word	sendMappingChangeUpdate
 5399 1bec 00000000 		.word	mappingArray
 5400 1bf0 00000000 		.word	sendKnobs
 5401 1bf4 00000000 		.word	macroKnobValues
 5402              	.L199:
1618:main.c        ****             {
1619:main.c        ****                 myArray[i + 9] = knobs[i];
 5403              		.loc 1 1619 0 discriminator 3
 5404 1bf8 3B6D     		ldr	r3, [r7, #80]
 5405 1bfa 0933     		adds	r3, r3, #9
 5406 1bfc A149     		ldr	r1, .L241
 5407 1bfe 3A6D     		ldr	r2, [r7, #80]
 5408 1c00 0A44     		add	r2, r2, r1
 5409 1c02 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5410 1c04 A04A     		ldr	r2, .L241+4
 5411 1c06 D154     		strb	r1, [r2, r3]
1617:main.c        ****             {
 5412              		.loc 1 1617 0 discriminator 3
 5413 1c08 3B6D     		ldr	r3, [r7, #80]
 5414 1c0a 0133     		adds	r3, r3, #1
 5415 1c0c 3B65     		str	r3, [r7, #80]
 5416              	.L198:
1617:main.c        ****             {
 5417              		.loc 1 1617 0 is_stmt 0 discriminator 1
 5418 1c0e 3B6D     		ldr	r3, [r7, #80]
 5419 1c10 032B     		cmp	r3, #3
 5420 1c12 F1DD     		ble	.L199
 5421              	.LBE31:
 5422              	.LBB32:
1620:main.c        ****             }
1621:main.c        ****             for (int i = 0; i < 10; i++)
 5423              		.loc 1 1621 0 is_stmt 1
 5424 1c14 0023     		movs	r3, #0
 5425 1c16 FB64     		str	r3, [r7, #76]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 126


 5426 1c18 0AE0     		b	.L200
 5427              	.L201:
1622:main.c        ****             {
1623:main.c        ****                 myArray[i + 13] = pedals8bit[i];
 5428              		.loc 1 1623 0 discriminator 3
 5429 1c1a FB6C     		ldr	r3, [r7, #76]
 5430 1c1c 0D33     		adds	r3, r3, #13
 5431 1c1e 9B49     		ldr	r1, .L241+8
 5432 1c20 FA6C     		ldr	r2, [r7, #76]
 5433 1c22 0A44     		add	r2, r2, r1
 5434 1c24 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5435 1c26 984A     		ldr	r2, .L241+4
 5436 1c28 D154     		strb	r1, [r2, r3]
1621:main.c        ****             {
 5437              		.loc 1 1621 0 discriminator 3
 5438 1c2a FB6C     		ldr	r3, [r7, #76]
 5439 1c2c 0133     		adds	r3, r3, #1
 5440 1c2e FB64     		str	r3, [r7, #76]
 5441              	.L200:
1621:main.c        ****             {
 5442              		.loc 1 1621 0 is_stmt 0 discriminator 1
 5443 1c30 FB6C     		ldr	r3, [r7, #76]
 5444 1c32 092B     		cmp	r3, #9
 5445 1c34 F1DD     		ble	.L201
 5446              	.LBE32:
1624:main.c        ****             }
1625:main.c        ****             myArray[24] = octave | (voice << 4) | (dualSlider << 5) | (neck << 6);
 5447              		.loc 1 1625 0 is_stmt 1
 5448 1c36 964B     		ldr	r3, .L241+12
 5449 1c38 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5450 1c3a 1B01     		lsls	r3, r3, #4
 5451 1c3c 5AB2     		sxtb	r2, r3
 5452 1c3e 954B     		ldr	r3, .L241+16
 5453 1c40 1B68     		ldr	r3, [r3]
 5454 1c42 5BB2     		sxtb	r3, r3
 5455 1c44 1343     		orrs	r3, r3, r2
 5456 1c46 5AB2     		sxtb	r2, r3
 5457 1c48 934B     		ldr	r3, .L241+20
 5458 1c4a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5459 1c4c 5B01     		lsls	r3, r3, #5
 5460 1c4e 5BB2     		sxtb	r3, r3
 5461 1c50 1343     		orrs	r3, r3, r2
 5462 1c52 5AB2     		sxtb	r2, r3
 5463 1c54 914B     		ldr	r3, .L241+24
 5464 1c56 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5465 1c58 9B01     		lsls	r3, r3, #6
 5466 1c5a 5BB2     		sxtb	r3, r3
 5467 1c5c 1343     		orrs	r3, r3, r2
 5468 1c5e 5BB2     		sxtb	r3, r3
 5469 1c60 DAB2     		uxtb	r2, r3
 5470 1c62 894B     		ldr	r3, .L241+4
 5471 1c64 1A76     		strb	r2, [r3, #24]
1626:main.c        ****             myArray[25] = patchNum;
 5472              		.loc 1 1626 0
 5473 1c66 8E4B     		ldr	r3, .L241+28
 5474 1c68 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5475 1c6a 874B     		ldr	r3, .L241+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 127


 5476 1c6c 5A76     		strb	r2, [r3, #25]
1627:main.c        ****             myArray[26] = processed_volumePedal >> 8;
 5477              		.loc 1 1627 0
 5478 1c6e 8D4B     		ldr	r3, .L241+32
 5479 1c70 B3F90030 		ldrsh	r3, [r3]
 5480 1c74 1B12     		asrs	r3, r3, #8
 5481 1c76 1BB2     		sxth	r3, r3
 5482 1c78 DAB2     		uxtb	r2, r3
 5483 1c7a 834B     		ldr	r3, .L241+4
 5484 1c7c 9A76     		strb	r2, [r3, #26]
1628:main.c        ****             myArray[27] = processed_volumePedal & 0xff;
 5485              		.loc 1 1628 0
 5486 1c7e 894B     		ldr	r3, .L241+32
 5487 1c80 B3F90030 		ldrsh	r3, [r3]
 5488 1c84 DAB2     		uxtb	r2, r3
 5489 1c86 804B     		ldr	r3, .L241+4
 5490 1c88 DA76     		strb	r2, [r3, #27]
1629:main.c        ****             myArray[28] = bar[1] >> 8;
 5491              		.loc 1 1629 0
 5492 1c8a 874B     		ldr	r3, .L241+36
 5493 1c8c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 5494 1c8e 9BB2     		uxth	r3, r3
 5495 1c90 1B0A     		lsrs	r3, r3, #8
 5496 1c92 9BB2     		uxth	r3, r3
 5497 1c94 DAB2     		uxtb	r2, r3
 5498 1c96 7C4B     		ldr	r3, .L241+4
 5499 1c98 1A77     		strb	r2, [r3, #28]
1630:main.c        ****             myArray[29] = bar[1] & 0xff;
 5500              		.loc 1 1630 0
 5501 1c9a 834B     		ldr	r3, .L241+36
 5502 1c9c 5B88     		ldrh	r3, [r3, #2]	@ movhi
 5503 1c9e 9BB2     		uxth	r3, r3
 5504 1ca0 DAB2     		uxtb	r2, r3
 5505 1ca2 794B     		ldr	r3, .L241+4
 5506 1ca4 5A77     		strb	r2, [r3, #29]
1631:main.c        ****             myArray[30] = 254;
 5507              		.loc 1 1631 0
 5508 1ca6 784B     		ldr	r3, .L241+4
 5509 1ca8 FE22     		movs	r2, #254
 5510 1caa 9A77     		strb	r2, [r3, #30]
1632:main.c        ****             myArray[31] = 253;
 5511              		.loc 1 1632 0
 5512 1cac 764B     		ldr	r3, .L241+4
 5513 1cae FD22     		movs	r2, #253
 5514 1cb0 DA77     		strb	r2, [r3, #31]
1633:main.c        ****             
1634:main.c        ****             
1635:main.c        ****             sendKnobs = 0;
 5515              		.loc 1 1635 0
 5516 1cb2 7E4B     		ldr	r3, .L241+40
 5517 1cb4 0022     		movs	r2, #0
 5518 1cb6 1A70     		strb	r2, [r3]
 5519 1cb8 6EE0     		b	.L192
 5520              	.L195:
1636:main.c        ****         }
1637:main.c        ****         else
1638:main.c        ****         {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 128


1639:main.c        ****             myArray[0] = 1; //sending normal pitch stuff, not a preset send
 5521              		.loc 1 1639 0
 5522 1cba 734B     		ldr	r3, .L241+4
 5523 1cbc 0122     		movs	r2, #1
 5524 1cbe 1A70     		strb	r2, [r3]
 5525              	.LBB33:
1640:main.c        ****             for (int i = 0; i < 12; i++)
 5526              		.loc 1 1640 0
 5527 1cc0 0023     		movs	r3, #0
 5528 1cc2 BB64     		str	r3, [r7, #72]
 5529 1cc4 24E0     		b	.L202
 5530              	.L203:
 5531              	.LBB34:
1641:main.c        ****             {
1642:main.c        ****                 int scaledMIDI = roundf(stringMIDI[i] * 512.0f); // divide by 128 multiply by 65535
 5532              		.loc 1 1642 0 discriminator 3
 5533 1cc6 7A4A     		ldr	r2, .L241+44
 5534 1cc8 BB6C     		ldr	r3, [r7, #72]
 5535 1cca 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 5536 1cce 4FF08841 		mov	r1, #1140850688
 5537 1cd2 1846     		mov	r0, r3
 5538 1cd4 FFF7FEFF 		bl	__aeabi_fmul
 5539 1cd8 0346     		mov	r3, r0
 5540 1cda 1846     		mov	r0, r3
 5541 1cdc FFF7FEFF 		bl	roundf
 5542 1ce0 0346     		mov	r3, r0
 5543 1ce2 1846     		mov	r0, r3
 5544 1ce4 FFF7FEFF 		bl	__aeabi_f2iz
 5545 1ce8 0346     		mov	r3, r0
 5546 1cea FB60     		str	r3, [r7, #12]
1643:main.c        ****                 myArray[i * 2 + 1] = scaledMIDI >> 8;
 5547              		.loc 1 1643 0 discriminator 3
 5548 1cec BB6C     		ldr	r3, [r7, #72]
 5549 1cee 5B00     		lsls	r3, r3, #1
 5550 1cf0 0133     		adds	r3, r3, #1
 5551 1cf2 FA68     		ldr	r2, [r7, #12]
 5552 1cf4 1212     		asrs	r2, r2, #8
 5553 1cf6 D1B2     		uxtb	r1, r2
 5554 1cf8 634A     		ldr	r2, .L241+4
 5555 1cfa D154     		strb	r1, [r2, r3]
1644:main.c        ****                 myArray[(i * 2) + 2] = scaledMIDI & 255;
 5556              		.loc 1 1644 0 discriminator 3
 5557 1cfc BB6C     		ldr	r3, [r7, #72]
 5558 1cfe 0133     		adds	r3, r3, #1
 5559 1d00 5B00     		lsls	r3, r3, #1
 5560 1d02 FA68     		ldr	r2, [r7, #12]
 5561 1d04 D1B2     		uxtb	r1, r2
 5562 1d06 604A     		ldr	r2, .L241+4
 5563 1d08 D154     		strb	r1, [r2, r3]
 5564              	.LBE34:
1640:main.c        ****             {
 5565              		.loc 1 1640 0 discriminator 3
 5566 1d0a BB6C     		ldr	r3, [r7, #72]
 5567 1d0c 0133     		adds	r3, r3, #1
 5568 1d0e BB64     		str	r3, [r7, #72]
 5569              	.L202:
1640:main.c        ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 129


 5570              		.loc 1 1640 0 is_stmt 0 discriminator 1
 5571 1d10 BB6C     		ldr	r3, [r7, #72]
 5572 1d12 0B2B     		cmp	r3, #11
 5573 1d14 D7DD     		ble	.L203
 5574              	.LBE33:
1645:main.c        ****             }
1646:main.c        ****             
1647:main.c        ****             myArray[24] = octave | (voice << 4) | (dualSlider << 5) | (neck << 6);
 5575              		.loc 1 1647 0 is_stmt 1
 5576 1d16 5E4B     		ldr	r3, .L241+12
 5577 1d18 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5578 1d1a 1B01     		lsls	r3, r3, #4
 5579 1d1c 5AB2     		sxtb	r2, r3
 5580 1d1e 5D4B     		ldr	r3, .L241+16
 5581 1d20 1B68     		ldr	r3, [r3]
 5582 1d22 5BB2     		sxtb	r3, r3
 5583 1d24 1343     		orrs	r3, r3, r2
 5584 1d26 5AB2     		sxtb	r2, r3
 5585 1d28 5B4B     		ldr	r3, .L241+20
 5586 1d2a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5587 1d2c 5B01     		lsls	r3, r3, #5
 5588 1d2e 5BB2     		sxtb	r3, r3
 5589 1d30 1343     		orrs	r3, r3, r2
 5590 1d32 5AB2     		sxtb	r2, r3
 5591 1d34 594B     		ldr	r3, .L241+24
 5592 1d36 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5593 1d38 9B01     		lsls	r3, r3, #6
 5594 1d3a 5BB2     		sxtb	r3, r3
 5595 1d3c 1343     		orrs	r3, r3, r2
 5596 1d3e 5BB2     		sxtb	r3, r3
 5597 1d40 DAB2     		uxtb	r2, r3
 5598 1d42 514B     		ldr	r3, .L241+4
 5599 1d44 1A76     		strb	r2, [r3, #24]
1648:main.c        ****             myArray[25] = patchNum;
 5600              		.loc 1 1648 0
 5601 1d46 564B     		ldr	r3, .L241+28
 5602 1d48 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5603 1d4a 4F4B     		ldr	r3, .L241+4
 5604 1d4c 5A76     		strb	r2, [r3, #25]
1649:main.c        ****             myArray[26] = processed_volumePedal >> 8;
 5605              		.loc 1 1649 0
 5606 1d4e 554B     		ldr	r3, .L241+32
 5607 1d50 B3F90030 		ldrsh	r3, [r3]
 5608 1d54 1B12     		asrs	r3, r3, #8
 5609 1d56 1BB2     		sxth	r3, r3
 5610 1d58 DAB2     		uxtb	r2, r3
 5611 1d5a 4B4B     		ldr	r3, .L241+4
 5612 1d5c 9A76     		strb	r2, [r3, #26]
1650:main.c        ****             myArray[27] = processed_volumePedal & 0xff;
 5613              		.loc 1 1650 0
 5614 1d5e 514B     		ldr	r3, .L241+32
 5615 1d60 B3F90030 		ldrsh	r3, [r3]
 5616 1d64 DAB2     		uxtb	r2, r3
 5617 1d66 484B     		ldr	r3, .L241+4
 5618 1d68 DA76     		strb	r2, [r3, #27]
1651:main.c        ****             myArray[28] = bar[0] >> 8;
 5619              		.loc 1 1651 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 130


 5620 1d6a 4F4B     		ldr	r3, .L241+36
 5621 1d6c 1B88     		ldrh	r3, [r3]	@ movhi
 5622 1d6e 9BB2     		uxth	r3, r3
 5623 1d70 1B0A     		lsrs	r3, r3, #8
 5624 1d72 9BB2     		uxth	r3, r3
 5625 1d74 DAB2     		uxtb	r2, r3
 5626 1d76 444B     		ldr	r3, .L241+4
 5627 1d78 1A77     		strb	r2, [r3, #28]
1652:main.c        ****             myArray[29] = bar[0] & 0xff;
 5628              		.loc 1 1652 0
 5629 1d7a 4B4B     		ldr	r3, .L241+36
 5630 1d7c 1B88     		ldrh	r3, [r3]	@ movhi
 5631 1d7e 9BB2     		uxth	r3, r3
 5632 1d80 DAB2     		uxtb	r2, r3
 5633 1d82 414B     		ldr	r3, .L241+4
 5634 1d84 5A77     		strb	r2, [r3, #29]
1653:main.c        ****             myArray[30] = 254;
 5635              		.loc 1 1653 0
 5636 1d86 404B     		ldr	r3, .L241+4
 5637 1d88 FE22     		movs	r2, #254
 5638 1d8a 9A77     		strb	r2, [r3, #30]
1654:main.c        ****             myArray[31] = 253;
 5639              		.loc 1 1654 0
 5640 1d8c 3E4B     		ldr	r3, .L241+4
 5641 1d8e FD22     		movs	r2, #253
 5642 1d90 DA77     		strb	r2, [r3, #31]
1655:main.c        ****             
1656:main.c        ****             sendKnobs = 1; // for next time around, might make this slower though
 5643              		.loc 1 1656 0
 5644 1d92 464B     		ldr	r3, .L241+40
 5645 1d94 0122     		movs	r2, #1
 5646 1d96 1A70     		strb	r2, [r3]
 5647              	.L192:
1657:main.c        ****             /*
1658:main.c        ****             for (int i = 0; i < 16; i++)
1659:main.c        ****             {
1660:main.c        ****                 myArray[i+56] = encoderVal[i];
1661:main.c        ****             }
1662:main.c        ****             */
1663:main.c        ****         }
1664:main.c        **** 
1665:main.c        ****         
1666:main.c        **** 
1667:main.c        **** /*
1668:main.c        ****         for(int i = 0; i < myBufferSize; i++)
1669:main.c        ****         {
1670:main.c        ****             SPIM_1_WriteTxData(myArray[i]);
1671:main.c        ****         }
1672:main.c        ****     */    
1673:main.c        ****         
1674:main.c        **** 
1675:main.c        ****        
1676:main.c        ****         
1677:main.c        ****         
1678:main.c        ****         //parse input from synth board (names)
1679:main.c        ****         if ((inBuffer[0] == 253) && (inBuffer[31] == 254))
 5648              		.loc 1 1679 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 131


 5649 1d98 464B     		ldr	r3, .L241+48
 5650 1d9a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5651 1d9c FD2B     		cmp	r3, #253
 5652 1d9e 5BD1     		bne	.L204
 5653              		.loc 1 1679 0 is_stmt 0 discriminator 1
 5654 1da0 444B     		ldr	r3, .L241+48
 5655 1da2 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 5656 1da4 FE2B     		cmp	r3, #254
 5657 1da6 57D1     		bne	.L204
 5658              	.LBB35:
1680:main.c        ****         {
1681:main.c        ****             int whichPresetToStoreName = inBuffer[1];
 5659              		.loc 1 1681 0 is_stmt 1
 5660 1da8 424B     		ldr	r3, .L241+48
 5661 1daa 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5662 1dac BB60     		str	r3, [r7, #8]
1682:main.c        ****             int whichMacroToStoreName = inBuffer[16];
 5663              		.loc 1 1682 0
 5664 1dae 414B     		ldr	r3, .L241+48
 5665 1db0 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 5666 1db2 7B60     		str	r3, [r7, #4]
1683:main.c        ****             int bufferPointer = 2;
 5667              		.loc 1 1683 0
 5668 1db4 0223     		movs	r3, #2
 5669 1db6 7B64     		str	r3, [r7, #68]
 5670              	.LBB36:
1684:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5671              		.loc 1 1684 0
 5672 1db8 0023     		movs	r3, #0
 5673 1dba 3B64     		str	r3, [r7, #64]
 5674 1dbc 14E0     		b	.L205
 5675              	.L206:
1685:main.c        ****             {
1686:main.c        ****                 presetNamesArray[whichPresetToStoreName][i] = inBuffer[bufferPointer];
 5676              		.loc 1 1686 0 discriminator 3
 5677 1dbe 3D4A     		ldr	r2, .L241+48
 5678 1dc0 7B6C     		ldr	r3, [r7, #68]
 5679 1dc2 1344     		add	r3, r3, r2
 5680 1dc4 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5681 1dc6 3C49     		ldr	r1, .L241+52
 5682 1dc8 BA68     		ldr	r2, [r7, #8]
 5683 1dca 1346     		mov	r3, r2
 5684 1dcc DB00     		lsls	r3, r3, #3
 5685 1dce 9B1A     		subs	r3, r3, r2
 5686 1dd0 5B00     		lsls	r3, r3, #1
 5687 1dd2 CA18     		adds	r2, r1, r3
 5688 1dd4 3B6C     		ldr	r3, [r7, #64]
 5689 1dd6 1344     		add	r3, r3, r2
 5690 1dd8 0246     		mov	r2, r0
 5691 1dda 1A70     		strb	r2, [r3]
1687:main.c        ****                 bufferPointer++;
 5692              		.loc 1 1687 0 discriminator 3
 5693 1ddc 7B6C     		ldr	r3, [r7, #68]
 5694 1dde 0133     		adds	r3, r3, #1
 5695 1de0 7B64     		str	r3, [r7, #68]
1684:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5696              		.loc 1 1684 0 discriminator 3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 132


 5697 1de2 3B6C     		ldr	r3, [r7, #64]
 5698 1de4 0133     		adds	r3, r3, #1
 5699 1de6 3B64     		str	r3, [r7, #64]
 5700              	.L205:
1684:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5701              		.loc 1 1684 0 is_stmt 0 discriminator 1
 5702 1de8 3B6C     		ldr	r3, [r7, #64]
 5703 1dea 0D2B     		cmp	r3, #13
 5704 1dec E7DD     		ble	.L206
 5705              	.LBE36:
1688:main.c        ****             }
1689:main.c        ****             bufferPointer = 17;
 5706              		.loc 1 1689 0 is_stmt 1
 5707 1dee 1123     		movs	r3, #17
 5708 1df0 7B64     		str	r3, [r7, #68]
 5709              	.LBB37:
1690:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5710              		.loc 1 1690 0
 5711 1df2 0023     		movs	r3, #0
 5712 1df4 FB63     		str	r3, [r7, #60]
 5713 1df6 1BE0     		b	.L207
 5714              	.L208:
1691:main.c        ****             {
1692:main.c        ****                 macroNamesArray[whichPresetToStoreName][whichMacroToStoreName][i] = inBuffer[buffer
 5715              		.loc 1 1692 0 discriminator 3
 5716 1df8 2E4A     		ldr	r2, .L241+48
 5717 1dfa 7B6C     		ldr	r3, [r7, #68]
 5718 1dfc 1344     		add	r3, r3, r2
 5719 1dfe 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 5720 1e00 2E48     		ldr	r0, .L241+56
 5721 1e02 7B68     		ldr	r3, [r7, #4]
 5722 1e04 B968     		ldr	r1, [r7, #8]
 5723 1e06 1A46     		mov	r2, r3
 5724 1e08 D200     		lsls	r2, r2, #3
 5725 1e0a D21A     		subs	r2, r2, r3
 5726 1e0c 5300     		lsls	r3, r2, #1
 5727 1e0e 1A46     		mov	r2, r3
 5728 1e10 0B46     		mov	r3, r1
 5729 1e12 DB00     		lsls	r3, r3, #3
 5730 1e14 5B1A     		subs	r3, r3, r1
 5731 1e16 1B01     		lsls	r3, r3, #4
 5732 1e18 1344     		add	r3, r3, r2
 5733 1e1a C218     		adds	r2, r0, r3
 5734 1e1c FB6B     		ldr	r3, [r7, #60]
 5735 1e1e 1344     		add	r3, r3, r2
 5736 1e20 2246     		mov	r2, r4
 5737 1e22 1A70     		strb	r2, [r3]
1693:main.c        ****                 bufferPointer++;
 5738              		.loc 1 1693 0 discriminator 3
 5739 1e24 7B6C     		ldr	r3, [r7, #68]
 5740 1e26 0133     		adds	r3, r3, #1
 5741 1e28 7B64     		str	r3, [r7, #68]
1690:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5742              		.loc 1 1690 0 discriminator 3
 5743 1e2a FB6B     		ldr	r3, [r7, #60]
 5744 1e2c 0133     		adds	r3, r3, #1
 5745 1e2e FB63     		str	r3, [r7, #60]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 133


 5746              	.L207:
1690:main.c        ****             for (int i = 0; i < NAME_LENGTH_IN_BYTES; i++)
 5747              		.loc 1 1690 0 is_stmt 0 discriminator 1
 5748 1e30 FB6B     		ldr	r3, [r7, #60]
 5749 1e32 0D2B     		cmp	r3, #13
 5750 1e34 E0DD     		ble	.L208
 5751              	.LBE37:
1694:main.c        ****             }
1695:main.c        ****             if ((whichPresetToStoreName == patchNum) && (whichMacroToStoreName == 7) && (!presetAlr
 5752              		.loc 1 1695 0 is_stmt 1
 5753 1e36 1A4B     		ldr	r3, .L241+28
 5754 1e38 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5755 1e3a 1A46     		mov	r2, r3
 5756 1e3c BB68     		ldr	r3, [r7, #8]
 5757 1e3e 9A42     		cmp	r2, r3
 5758 1e40 0AD1     		bne	.L204
 5759              		.loc 1 1695 0 is_stmt 0 discriminator 1
 5760 1e42 7B68     		ldr	r3, [r7, #4]
 5761 1e44 072B     		cmp	r3, #7
 5762 1e46 07D1     		bne	.L204
 5763              		.loc 1 1695 0 discriminator 2
 5764 1e48 1D4A     		ldr	r2, .L241+60
 5765 1e4a BB68     		ldr	r3, [r7, #8]
 5766 1e4c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 5767 1e50 002B     		cmp	r3, #0
 5768 1e52 01D1     		bne	.L204
1696:main.c        ****             {
1697:main.c        ****                 displayCurrentPresetNameAndCopedent();
 5769              		.loc 1 1697 0 is_stmt 1
 5770 1e54 FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
 5771              	.L204:
 5772              	.LBE35:
1698:main.c        ****             }
1699:main.c        ****         }
1700:main.c        ****         
1701:main.c        ****         SPIM_1_ClearRxBuffer();
 5773              		.loc 1 1701 0
 5774 1e58 FFF7FEFF 		bl	SPIM_1_ClearRxBuffer
1702:main.c        ****         CyDmaChEnable(rx3Channel, STORE_TD_CFG_ONCMPLT);
 5775              		.loc 1 1702 0
 5776 1e5c 194B     		ldr	r3, .L241+64
 5777 1e5e 1B78     		ldrb	r3, [r3]
 5778 1e60 DBB2     		uxtb	r3, r3
 5779 1e62 0121     		movs	r1, #1
 5780 1e64 1846     		mov	r0, r3
 5781 1e66 FFF7FEFF 		bl	CyDmaChEnable
1703:main.c        ****         CyDmaChEnable(txChannel, STORE_TD_CFG_ONCMPLT);
 5782              		.loc 1 1703 0
 5783 1e6a 174B     		ldr	r3, .L241+68
 5784 1e6c 1B78     		ldrb	r3, [r3]
 5785 1e6e DBB2     		uxtb	r3, r3
 5786 1e70 0121     		movs	r1, #1
 5787 1e72 1846     		mov	r0, r3
 5788 1e74 FFF7FEFF 		bl	CyDmaChEnable
1704:main.c        ****         
1705:main.c        ****         testpin6_Write(0);
 5789              		.loc 1 1705 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 134


 5790 1e78 0020     		movs	r0, #0
 5791 1e7a FFF7FEFF 		bl	testpin6_Write
1706:main.c        ****        
1707:main.c        **** 
1708:main.c        ****      }
 5792              		.loc 1 1708 0
 5793 1e7e FEF738BB 		b	.L209
 5794              	.L242:
 5795 1e82 00BF     		.align	2
 5796              	.L241:
 5797 1e84 00000000 		.word	knobs
 5798 1e88 00000000 		.word	myArray
 5799 1e8c 00000000 		.word	pedals8bit
 5800 1e90 00000000 		.word	voice
 5801 1e94 00000000 		.word	octave
 5802 1e98 00000000 		.word	dualSlider
 5803 1e9c 00000000 		.word	neck
 5804 1ea0 00000000 		.word	patchNum
 5805 1ea4 00000000 		.word	processed_volumePedal
 5806 1ea8 00000000 		.word	bar
 5807 1eac 00000000 		.word	sendKnobs
 5808 1eb0 00000000 		.word	stringMIDI
 5809 1eb4 00000000 		.word	inBuffer
 5810 1eb8 00000000 		.word	presetNamesArray
 5811 1ebc 00000000 		.word	macroNamesArray
 5812 1ec0 00000000 		.word	presetAlreadyDisplayed
 5813 1ec4 00000000 		.word	rx3Channel
 5814 1ec8 00000000 		.word	txChannel
 5815              		.cfi_endproc
 5816              	.LFE75:
 5817              		.size	main, .-main
 5818              		.section	.text.DmaTxConfiguration,"ax",%progbits
 5819              		.align	2
 5820              		.global	DmaTxConfiguration
 5821              		.thumb
 5822              		.thumb_func
 5823              		.type	DmaTxConfiguration, %function
 5824              	DmaTxConfiguration:
 5825              	.LFB76:
1709:main.c        **** }
1710:main.c        **** 
1711:main.c        **** void DmaTxConfiguration()
1712:main.c        **** {
 5826              		.loc 1 1712 0
 5827              		.cfi_startproc
 5828              		@ args = 0, pretend = 0, frame = 0
 5829              		@ frame_needed = 1, uses_anonymous_args = 0
 5830 0000 80B5     		push	{r7, lr}
 5831              		.cfi_def_cfa_offset 8
 5832              		.cfi_offset 7, -8
 5833              		.cfi_offset 14, -4
 5834 0002 00AF     		add	r7, sp, #0
 5835              		.cfi_def_cfa_register 7
1713:main.c        ****     /* Init DMA, 1 byte bursts, each burst requires a request */ 
1714:main.c        ****     txChannel = DMA_4_DmaInitialize(DMA_TX_BYTES_PER_BURST, DMA_TX_REQUEST_PER_BURST, 
 5836              		.loc 1 1714 0
 5837 0004 4FF48043 		mov	r3, #16384
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 135


 5838 0008 41F6FF72 		movw	r2, #8191
 5839 000c 0121     		movs	r1, #1
 5840 000e 0120     		movs	r0, #1
 5841 0010 FFF7FEFF 		bl	DMA_4_DmaInitialize
 5842 0014 0346     		mov	r3, r0
 5843 0016 1A46     		mov	r2, r3
 5844 0018 124B     		ldr	r3, .L244
 5845 001a 1A70     		strb	r2, [r3]
1715:main.c        ****                                         HI16(DMA_TX_SRC_BASE), HI16(DMA_TX_DST_BASE));
1716:main.c        **** 
1717:main.c        ****     txTD = CyDmaTdAllocate();
 5846              		.loc 1 1717 0
 5847 001c FFF7FEFF 		bl	CyDmaTdAllocate
 5848 0020 0346     		mov	r3, r0
 5849 0022 1A46     		mov	r2, r3
 5850 0024 104B     		ldr	r3, .L244+4
 5851 0026 1A70     		strb	r2, [r3]
1718:main.c        **** 
1719:main.c        ****     /* Configure this Td as follows:
1720:main.c        ****     *  - Increment the source address, but not the destination address   
1721:main.c        ****     */
1722:main.c        ****     CyDmaTdSetConfiguration(txTD, myBufferSize, CY_DMA_DISABLE_TD, TD_INC_SRC_ADR);
 5852              		.loc 1 1722 0
 5853 0028 0F4B     		ldr	r3, .L244+4
 5854 002a 1B78     		ldrb	r3, [r3]
 5855 002c D8B2     		uxtb	r0, r3
 5856 002e 0123     		movs	r3, #1
 5857 0030 FE22     		movs	r2, #254
 5858 0032 2021     		movs	r1, #32
 5859 0034 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1723:main.c        **** 
1724:main.c        ****     /* From the memory to the SPIM */
1725:main.c        ****     CyDmaTdSetAddress(txTD, LO16((uint32)myArray), LO16((uint32) SPIM_1_TXDATA_PTR));
 5860              		.loc 1 1725 0
 5861 0038 0B4B     		ldr	r3, .L244+4
 5862 003a 1B78     		ldrb	r3, [r3]
 5863 003c DBB2     		uxtb	r3, r3
 5864 003e 0B4A     		ldr	r2, .L244+8
 5865 0040 91B2     		uxth	r1, r2
 5866 0042 46F24242 		movw	r2, #25666
 5867 0046 1846     		mov	r0, r3
 5868 0048 FFF7FEFF 		bl	CyDmaTdSetAddress
1726:main.c        ****     
1727:main.c        ****     /* Associate the TD with the channel */
1728:main.c        ****     CyDmaChSetInitialTd(txChannel, txTD); 
 5869              		.loc 1 1728 0
 5870 004c 054B     		ldr	r3, .L244
 5871 004e 1B78     		ldrb	r3, [r3]
 5872 0050 DAB2     		uxtb	r2, r3
 5873 0052 054B     		ldr	r3, .L244+4
 5874 0054 1B78     		ldrb	r3, [r3]
 5875 0056 DBB2     		uxtb	r3, r3
 5876 0058 1946     		mov	r1, r3
 5877 005a 1046     		mov	r0, r2
 5878 005c FFF7FEFF 		bl	CyDmaChSetInitialTd
1729:main.c        ****    
1730:main.c        **** } 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 136


 5879              		.loc 1 1730 0
 5880 0060 00BF     		nop
 5881 0062 80BD     		pop	{r7, pc}
 5882              	.L245:
 5883              		.align	2
 5884              	.L244:
 5885 0064 00000000 		.word	txChannel
 5886 0068 00000000 		.word	txTD
 5887 006c 00000000 		.word	myArray
 5888              		.cfi_endproc
 5889              	.LFE76:
 5890              		.size	DmaTxConfiguration, .-DmaTxConfiguration
 5891              		.section	.text.DmaRxConfiguration,"ax",%progbits
 5892              		.align	2
 5893              		.global	DmaRxConfiguration
 5894              		.thumb
 5895              		.thumb_func
 5896              		.type	DmaRxConfiguration, %function
 5897              	DmaRxConfiguration:
 5898              	.LFB77:
1731:main.c        **** 
1732:main.c        **** void DmaRxConfiguration()
1733:main.c        **** { 
 5899              		.loc 1 1733 0
 5900              		.cfi_startproc
 5901              		@ args = 0, pretend = 0, frame = 0
 5902              		@ frame_needed = 1, uses_anonymous_args = 0
 5903 0000 80B5     		push	{r7, lr}
 5904              		.cfi_def_cfa_offset 8
 5905              		.cfi_offset 7, -8
 5906              		.cfi_offset 14, -4
 5907 0002 00AF     		add	r7, sp, #0
 5908              		.cfi_def_cfa_register 7
1734:main.c        ****     //pluck dma
1735:main.c        ****     rx1Channel = DMA_1_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 5909              		.loc 1 1735 0
 5910 0004 41F6FF73 		movw	r3, #8191
 5911 0008 4FF48042 		mov	r2, #16384
 5912 000c 0121     		movs	r1, #1
 5913 000e 0120     		movs	r0, #1
 5914 0010 FFF7FEFF 		bl	DMA_1_DmaInitialize
 5915 0014 0346     		mov	r3, r0
 5916 0016 1A46     		mov	r2, r3
 5917 0018 4A4B     		ldr	r3, .L247
 5918 001a 1A70     		strb	r2, [r3]
1736:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1737:main.c        ****     rx1TD[0] = CyDmaTdAllocate();
 5919              		.loc 1 1737 0
 5920 001c FFF7FEFF 		bl	CyDmaTdAllocate
 5921 0020 0346     		mov	r3, r0
 5922 0022 1A46     		mov	r2, r3
 5923 0024 484B     		ldr	r3, .L247+4
 5924 0026 1A70     		strb	r2, [r3]
1738:main.c        ****     rx1TD[1] = CyDmaTdAllocate();
 5925              		.loc 1 1738 0
 5926 0028 FFF7FEFF 		bl	CyDmaTdAllocate
 5927 002c 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 137


 5928 002e 1A46     		mov	r2, r3
 5929 0030 454B     		ldr	r3, .L247+4
 5930 0032 5A70     		strb	r2, [r3, #1]
1739:main.c        ****     CyDmaTdSetConfiguration(rx1TD[0], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD , TD_INC_DST_ADR | DMA_1__T
 5931              		.loc 1 1739 0
 5932 0034 444B     		ldr	r3, .L247+4
 5933 0036 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5934 0038 0223     		movs	r3, #2
 5935 003a FE22     		movs	r2, #254
 5936 003c 1A21     		movs	r1, #26
 5937 003e FFF7FEFF 		bl	CyDmaTdSetConfiguration
1740:main.c        ****     CyDmaTdSetConfiguration(rx1TD[1], PLUCK_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_1__TD
 5938              		.loc 1 1740 0
 5939 0042 414B     		ldr	r3, .L247+4
 5940 0044 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5941 0046 0223     		movs	r3, #2
 5942 0048 FE22     		movs	r2, #254
 5943 004a 1A21     		movs	r1, #26
 5944 004c FFF7FEFF 		bl	CyDmaTdSetConfiguration
1741:main.c        ****     CyDmaTdSetAddress(rx1TD[0], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rxBufferPluck[0]));
 5945              		.loc 1 1741 0
 5946 0050 3D4B     		ldr	r3, .L247+4
 5947 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5948 0054 3D4A     		ldr	r2, .L247+8
 5949 0056 92B2     		uxth	r2, r2
 5950 0058 46F25451 		movw	r1, #25940
 5951 005c 1846     		mov	r0, r3
 5952 005e FFF7FEFF 		bl	CyDmaTdSetAddress
1742:main.c        ****     CyDmaTdSetAddress(rx1TD[1], LO16((uint32) SPIS_1_RXDATA_PTR), LO16((uint32) rxBufferPluck[1]));
 5953              		.loc 1 1742 0
 5954 0062 394B     		ldr	r3, .L247+4
 5955 0064 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5956 0066 3A4A     		ldr	r2, .L247+12
 5957 0068 92B2     		uxth	r2, r2
 5958 006a 46F25451 		movw	r1, #25940
 5959 006e 1846     		mov	r0, r3
 5960 0070 FFF7FEFF 		bl	CyDmaTdSetAddress
1743:main.c        **** 
1744:main.c        ****     //bar dma
1745:main.c        ****     rx2Channel = DMA_2_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 5961              		.loc 1 1745 0
 5962 0074 41F6FF73 		movw	r3, #8191
 5963 0078 4FF48042 		mov	r2, #16384
 5964 007c 0121     		movs	r1, #1
 5965 007e 0120     		movs	r0, #1
 5966 0080 FFF7FEFF 		bl	DMA_2_DmaInitialize
 5967 0084 0346     		mov	r3, r0
 5968 0086 1A46     		mov	r2, r3
 5969 0088 324B     		ldr	r3, .L247+16
 5970 008a 1A70     		strb	r2, [r3]
1746:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1747:main.c        ****     rx2TD[0] = CyDmaTdAllocate();
 5971              		.loc 1 1747 0
 5972 008c FFF7FEFF 		bl	CyDmaTdAllocate
 5973 0090 0346     		mov	r3, r0
 5974 0092 1A46     		mov	r2, r3
 5975 0094 304B     		ldr	r3, .L247+20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 138


 5976 0096 1A70     		strb	r2, [r3]
1748:main.c        ****     rx2TD[1] = CyDmaTdAllocate();
 5977              		.loc 1 1748 0
 5978 0098 FFF7FEFF 		bl	CyDmaTdAllocate
 5979 009c 0346     		mov	r3, r0
 5980 009e 1A46     		mov	r2, r3
 5981 00a0 2D4B     		ldr	r3, .L247+20
 5982 00a2 5A70     		strb	r2, [r3, #1]
1749:main.c        ****     CyDmaTdSetConfiguration(rx2TD[0], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_2__TD_T
 5983              		.loc 1 1749 0
 5984 00a4 2C4B     		ldr	r3, .L247+20
 5985 00a6 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 5986 00a8 0623     		movs	r3, #6
 5987 00aa FE22     		movs	r2, #254
 5988 00ac 0821     		movs	r1, #8
 5989 00ae FFF7FEFF 		bl	CyDmaTdSetConfiguration
1750:main.c        ****     CyDmaTdSetConfiguration(rx2TD[1], BAR_BUFFER_SIZE, DMA_DISABLE_TD, TD_INC_DST_ADR | DMA_2__TD_T
 5990              		.loc 1 1750 0
 5991 00b2 294B     		ldr	r3, .L247+20
 5992 00b4 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5993 00b6 0623     		movs	r3, #6
 5994 00b8 FE22     		movs	r2, #254
 5995 00ba 0821     		movs	r1, #8
 5996 00bc FFF7FEFF 		bl	CyDmaTdSetConfiguration
1751:main.c        ****     CyDmaTdSetAddress(rx2TD[0], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBufferBar[0]));
 5997              		.loc 1 1751 0
 5998 00c0 254B     		ldr	r3, .L247+20
 5999 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6000 00c4 254A     		ldr	r2, .L247+24
 6001 00c6 92B2     		uxth	r2, r2
 6002 00c8 46F25751 		movw	r1, #25943
 6003 00cc 1846     		mov	r0, r3
 6004 00ce FFF7FEFF 		bl	CyDmaTdSetAddress
1752:main.c        ****     CyDmaTdSetAddress(rx2TD[1], LO16((uint32) SPIS_2_RXDATA_PTR), LO16((uint32) rxBufferBar[1]));
 6005              		.loc 1 1752 0
 6006 00d2 214B     		ldr	r3, .L247+20
 6007 00d4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 6008 00d6 224A     		ldr	r2, .L247+28
 6009 00d8 92B2     		uxth	r2, r2
 6010 00da 46F25751 		movw	r1, #25943
 6011 00de 1846     		mov	r0, r3
 6012 00e0 FFF7FEFF 		bl	CyDmaTdSetAddress
1753:main.c        ****     
1754:main.c        ****         /* Init DMA, 1 byte bursts, each burst requires a request */ 
1755:main.c        ****     rx3Channel = DMA_3_DmaInitialize(DMA_RX_BYTES_PER_BURST, DMA_RX_REQUEST_PER_BURST,
 6013              		.loc 1 1755 0
 6014 00e4 41F6FF73 		movw	r3, #8191
 6015 00e8 4FF48042 		mov	r2, #16384
 6016 00ec 0121     		movs	r1, #1
 6017 00ee 0120     		movs	r0, #1
 6018 00f0 FFF7FEFF 		bl	DMA_3_DmaInitialize
 6019 00f4 0346     		mov	r3, r0
 6020 00f6 1A46     		mov	r2, r3
 6021 00f8 1A4B     		ldr	r3, .L247+32
 6022 00fa 1A70     		strb	r2, [r3]
1756:main.c        ****                                      HI16(DMA_RX_SRC_BASE), HI16(DMA_RX_DST_BASE));
1757:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 139


1758:main.c        ****     rx3TD = CyDmaTdAllocate();
 6023              		.loc 1 1758 0
 6024 00fc FFF7FEFF 		bl	CyDmaTdAllocate
 6025 0100 0346     		mov	r3, r0
 6026 0102 1A46     		mov	r2, r3
 6027 0104 184B     		ldr	r3, .L247+36
 6028 0106 1A70     		strb	r2, [r3]
1759:main.c        ****     
1760:main.c        ****     /* Configure this Td as follows:
1761:main.c        ****     *  - Increment the destination address, but not the source address
1762:main.c        ****     */
1763:main.c        ****     CyDmaTdSetConfiguration(rx3TD, myBufferSize, CY_DMA_DISABLE_TD, TD_INC_DST_ADR);
 6029              		.loc 1 1763 0
 6030 0108 174B     		ldr	r3, .L247+36
 6031 010a 1B78     		ldrb	r3, [r3]
 6032 010c D8B2     		uxtb	r0, r3
 6033 010e 0223     		movs	r3, #2
 6034 0110 FE22     		movs	r2, #254
 6035 0112 2021     		movs	r1, #32
 6036 0114 FFF7FEFF 		bl	CyDmaTdSetConfiguration
1764:main.c        **** 
1765:main.c        ****     /* From the SPIM to the memory */
1766:main.c        ****     CyDmaTdSetAddress(rx3TD, LO16((uint32)SPIM_1_RXDATA_PTR), LO16((uint32)inBuffer));
 6037              		.loc 1 1766 0
 6038 0118 134B     		ldr	r3, .L247+36
 6039 011a 1B78     		ldrb	r3, [r3]
 6040 011c DBB2     		uxtb	r3, r3
 6041 011e 134A     		ldr	r2, .L247+40
 6042 0120 92B2     		uxth	r2, r2
 6043 0122 46F25241 		movw	r1, #25682
 6044 0126 1846     		mov	r0, r3
 6045 0128 FFF7FEFF 		bl	CyDmaTdSetAddress
1767:main.c        **** 
1768:main.c        ****     /* Associate the TD with the channel */
1769:main.c        ****     CyDmaChSetInitialTd(rx3Channel, rx3TD);
 6046              		.loc 1 1769 0
 6047 012c 0D4B     		ldr	r3, .L247+32
 6048 012e 1B78     		ldrb	r3, [r3]
 6049 0130 DAB2     		uxtb	r2, r3
 6050 0132 0D4B     		ldr	r3, .L247+36
 6051 0134 1B78     		ldrb	r3, [r3]
 6052 0136 DBB2     		uxtb	r3, r3
 6053 0138 1946     		mov	r1, r3
 6054 013a 1046     		mov	r0, r2
 6055 013c FFF7FEFF 		bl	CyDmaChSetInitialTd
1770:main.c        **** }
 6056              		.loc 1 1770 0
 6057 0140 00BF     		nop
 6058 0142 80BD     		pop	{r7, pc}
 6059              	.L248:
 6060              		.align	2
 6061              	.L247:
 6062 0144 00000000 		.word	rx1Channel
 6063 0148 00000000 		.word	rx1TD
 6064 014c 00000000 		.word	rxBufferPluck
 6065 0150 1A000000 		.word	rxBufferPluck+26
 6066 0154 00000000 		.word	rx2Channel
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 140


 6067 0158 00000000 		.word	rx2TD
 6068 015c 00000000 		.word	rxBufferBar
 6069 0160 08000000 		.word	rxBufferBar+8
 6070 0164 00000000 		.word	rx3Channel
 6071 0168 00000000 		.word	rx3TD
 6072 016c 00000000 		.word	inBuffer
 6073              		.cfi_endproc
 6074              	.LFE77:
 6075              		.size	DmaRxConfiguration, .-DmaRxConfiguration
 6076              		.section	.text.I2C_MasterWriteBlocking,"ax",%progbits
 6077              		.align	2
 6078              		.global	I2C_MasterWriteBlocking
 6079              		.thumb
 6080              		.thumb_func
 6081              		.type	I2C_MasterWriteBlocking, %function
 6082              	I2C_MasterWriteBlocking:
 6083              	.LFB78:
1771:main.c        **** 
1772:main.c        **** uint8 I2C_MasterWriteBlocking(uint8 i2CAddr, uint16 nbytes, uint8_t mode)
1773:main.c        **** {
 6084              		.loc 1 1773 0
 6085              		.cfi_startproc
 6086              		@ args = 0, pretend = 0, frame = 24
 6087              		@ frame_needed = 1, uses_anonymous_args = 0
 6088 0000 80B5     		push	{r7, lr}
 6089              		.cfi_def_cfa_offset 8
 6090              		.cfi_offset 7, -8
 6091              		.cfi_offset 14, -4
 6092 0002 86B0     		sub	sp, sp, #24
 6093              		.cfi_def_cfa_offset 32
 6094 0004 00AF     		add	r7, sp, #0
 6095              		.cfi_def_cfa_register 7
 6096 0006 0346     		mov	r3, r0
 6097 0008 FB71     		strb	r3, [r7, #7]
 6098 000a 0B46     		mov	r3, r1	@ movhi
 6099 000c BB80     		strh	r3, [r7, #4]	@ movhi
 6100 000e 1346     		mov	r3, r2
 6101 0010 BB71     		strb	r3, [r7, #6]
1774:main.c        ****     uint8 volatile status;
1775:main.c        ****     uint8_t error = 0;
 6102              		.loc 1 1775 0
 6103 0012 0023     		movs	r3, #0
 6104 0014 FB75     		strb	r3, [r7, #23]
1776:main.c        ****     uint32_t timeout = 50000;
 6105              		.loc 1 1776 0
 6106 0016 4CF25033 		movw	r3, #50000
 6107 001a 3B61     		str	r3, [r7, #16]
1777:main.c        ****     status = I2C_1_MasterClearStatus();
 6108              		.loc 1 1777 0
 6109 001c FFF7FEFF 		bl	I2C_1_MasterClearStatus
 6110 0020 0346     		mov	r3, r0
 6111 0022 FB73     		strb	r3, [r7, #15]
1778:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 6112              		.loc 1 1778 0
 6113 0024 FB7B     		ldrb	r3, [r7, #15]
 6114 0026 DBB2     		uxtb	r3, r3
 6115 0028 5BB2     		sxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 141


 6116 002a 002B     		cmp	r3, #0
 6117 002c 42DB     		blt	.L250
1779:main.c        ****     {
1780:main.c        ****         status = I2C_1_MasterWriteBuf(i2CAddr, (uint8 *)&I2Cbuff1, nbytes,
 6118              		.loc 1 1780 0
 6119 002e BB88     		ldrh	r3, [r7, #4]	@ movhi
 6120 0030 DAB2     		uxtb	r2, r3
 6121 0032 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 6122 0034 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 6123 0036 2949     		ldr	r1, .L259
 6124 0038 FFF7FEFF 		bl	I2C_1_MasterWriteBuf
 6125 003c 0346     		mov	r3, r0
 6126 003e FB73     		strb	r3, [r7, #15]
1781:main.c        ****                                      mode);
1782:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
 6127              		.loc 1 1782 0
 6128 0040 FB7B     		ldrb	r3, [r7, #15]
 6129 0042 DBB2     		uxtb	r3, r3
 6130 0044 002B     		cmp	r3, #0
 6131 0046 2FD1     		bne	.L251
 6132              	.L255:
1783:main.c        ****         {
1784:main.c        ****             /* wait for write complete and no error */
1785:main.c        ****             do
1786:main.c        ****             {
1787:main.c        ****                 status = I2C_1_MasterStatus();
 6133              		.loc 1 1787 0
 6134 0048 FFF7FEFF 		bl	I2C_1_MasterStatus
 6135 004c 0346     		mov	r3, r0
 6136 004e FB73     		strb	r3, [r7, #15]
1788:main.c        ****                 timeout--;
 6137              		.loc 1 1788 0
 6138 0050 3B69     		ldr	r3, [r7, #16]
 6139 0052 013B     		subs	r3, r3, #1
 6140 0054 3B61     		str	r3, [r7, #16]
1789:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 6141              		.loc 1 1789 0
 6142 0056 FB7B     		ldrb	r3, [r7, #15]
 6143 0058 DBB2     		uxtb	r3, r3
 6144 005a 802B     		cmp	r3, #128
 6145 005c 03D1     		bne	.L252
1790:main.c        ****                 {
1791:main.c        ****                     I2C_reset();
 6146              		.loc 1 1791 0
 6147 005e FFF7FEFF 		bl	I2C_reset
1792:main.c        ****                     error = 1;
 6148              		.loc 1 1792 0
 6149 0062 0123     		movs	r3, #1
 6150 0064 FB75     		strb	r3, [r7, #23]
 6151              	.L252:
1793:main.c        ****                 }
1794:main.c        ****                 if (timeout == 0)
 6152              		.loc 1 1794 0
 6153 0066 3B69     		ldr	r3, [r7, #16]
 6154 0068 002B     		cmp	r3, #0
 6155 006a 05D1     		bne	.L253
1795:main.c        ****                 {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 142


1796:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 6156              		.loc 1 1796 0
 6157 006c 8023     		movs	r3, #128
 6158 006e FB73     		strb	r3, [r7, #15]
1797:main.c        ****                     I2C_reset();
 6159              		.loc 1 1797 0
 6160 0070 FFF7FEFF 		bl	I2C_reset
1798:main.c        ****                     error = 1;
 6161              		.loc 1 1798 0
 6162 0074 0123     		movs	r3, #1
 6163 0076 FB75     		strb	r3, [r7, #23]
 6164              	.L253:
1799:main.c        ****                 }
1800:main.c        ****                 
1801:main.c        ****                 if (status == 0)
 6165              		.loc 1 1801 0
 6166 0078 FB7B     		ldrb	r3, [r7, #15]
 6167 007a DBB2     		uxtb	r3, r3
 6168 007c 002B     		cmp	r3, #0
 6169 007e 05D1     		bne	.L254
1802:main.c        ****                 {
1803:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 6170              		.loc 1 1803 0
 6171 0080 8023     		movs	r3, #128
 6172 0082 FB73     		strb	r3, [r7, #15]
1804:main.c        ****                     I2C_reset();
 6173              		.loc 1 1804 0
 6174 0084 FFF7FEFF 		bl	I2C_reset
1805:main.c        ****                     error = 1;
 6175              		.loc 1 1805 0
 6176 0088 0123     		movs	r3, #1
 6177 008a FB75     		strb	r3, [r7, #23]
 6178              	.L254:
1806:main.c        ****                 }
1807:main.c        ****                 
1808:main.c        ****             } while(((status & (I2C_1_MSTAT_WR_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 6179              		.loc 1 1808 0
 6180 008c FB7B     		ldrb	r3, [r7, #15]
 6181 008e DBB2     		uxtb	r3, r3
 6182 0090 03F08203 		and	r3, r3, #130
 6183 0094 002B     		cmp	r3, #0
 6184 0096 0DD1     		bne	.L250
 6185              		.loc 1 1808 0 is_stmt 0 discriminator 1
 6186 0098 FB7B     		ldrb	r3, [r7, #15]
 6187 009a DBB2     		uxtb	r3, r3
 6188 009c 002B     		cmp	r3, #0
 6189 009e 09D0     		beq	.L250
 6190              		.loc 1 1808 0 discriminator 2
 6191 00a0 3B69     		ldr	r3, [r7, #16]
 6192 00a2 002B     		cmp	r3, #0
 6193 00a4 D0D1     		bne	.L255
 6194 00a6 05E0     		b	.L250
 6195              	.L251:
1809:main.c        ****         }
1810:main.c        ****         else
1811:main.c        ****         {
1812:main.c        ****             /* translate from I2CM_MasterWriteBuf() error output to
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 143


1813:main.c        ****             *  I2CM_MasterStatus() error output */
1814:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 6196              		.loc 1 1814 0 is_stmt 1
 6197 00a8 8023     		movs	r3, #128
 6198 00aa FB73     		strb	r3, [r7, #15]
1815:main.c        ****             I2C_reset();
 6199              		.loc 1 1815 0
 6200 00ac FFF7FEFF 		bl	I2C_reset
1816:main.c        ****             error = 1;
 6201              		.loc 1 1816 0
 6202 00b0 0123     		movs	r3, #1
 6203 00b2 FB75     		strb	r3, [r7, #23]
 6204              	.L250:
1817:main.c        ****         } 
1818:main.c        ****     }  
1819:main.c        ****     if ((status & I2C_1_MSTAT_ERR_ADDR_NAK) || (status & I2C_1_MSTAT_ERR_XFER))
 6205              		.loc 1 1819 0
 6206 00b4 FB7B     		ldrb	r3, [r7, #15]
 6207 00b6 DBB2     		uxtb	r3, r3
 6208 00b8 03F02003 		and	r3, r3, #32
 6209 00bc 002B     		cmp	r3, #0
 6210 00be 04D1     		bne	.L256
 6211              		.loc 1 1819 0 is_stmt 0 discriminator 1
 6212 00c0 FB7B     		ldrb	r3, [r7, #15]
 6213 00c2 DBB2     		uxtb	r3, r3
 6214 00c4 5BB2     		sxtb	r3, r3
 6215 00c6 002B     		cmp	r3, #0
 6216 00c8 03DA     		bge	.L257
 6217              	.L256:
1820:main.c        ****     {
1821:main.c        ****         //mark that i2c destination to be skipped (likely unplugged) and reset the I2C module
1822:main.c        ****         //i2c_skipped[main_counter] = 1;
1823:main.c        ****         I2C_reset();
 6218              		.loc 1 1823 0 is_stmt 1
 6219 00ca FFF7FEFF 		bl	I2C_reset
1824:main.c        ****         error = 1;
 6220              		.loc 1 1824 0
 6221 00ce 0123     		movs	r3, #1
 6222 00d0 FB75     		strb	r3, [r7, #23]
 6223              	.L257:
1825:main.c        ****     }
1826:main.c        ****     return error;
 6224              		.loc 1 1826 0
 6225 00d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1827:main.c        **** }
 6226              		.loc 1 1827 0
 6227 00d4 1846     		mov	r0, r3
 6228 00d6 1837     		adds	r7, r7, #24
 6229              		.cfi_def_cfa_offset 8
 6230 00d8 BD46     		mov	sp, r7
 6231              		.cfi_def_cfa_register 13
 6232              		@ sp needed
 6233 00da 80BD     		pop	{r7, pc}
 6234              	.L260:
 6235              		.align	2
 6236              	.L259:
 6237 00dc 00000000 		.word	I2Cbuff1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 144


 6238              		.cfi_endproc
 6239              	.LFE78:
 6240              		.size	I2C_MasterWriteBlocking, .-I2C_MasterWriteBlocking
 6241              		.section	.text.I2C_MasterReadBlocking,"ax",%progbits
 6242              		.align	2
 6243              		.global	I2C_MasterReadBlocking
 6244              		.thumb
 6245              		.thumb_func
 6246              		.type	I2C_MasterReadBlocking, %function
 6247              	I2C_MasterReadBlocking:
 6248              	.LFB79:
1828:main.c        **** 
1829:main.c        **** uint8 I2C_MasterReadBlocking(uint8 i2CAddr, uint8 nbytes, uint8_t mode)
1830:main.c        **** {
 6249              		.loc 1 1830 0
 6250              		.cfi_startproc
 6251              		@ args = 0, pretend = 0, frame = 16
 6252              		@ frame_needed = 1, uses_anonymous_args = 0
 6253 0000 80B5     		push	{r7, lr}
 6254              		.cfi_def_cfa_offset 8
 6255              		.cfi_offset 7, -8
 6256              		.cfi_offset 14, -4
 6257 0002 84B0     		sub	sp, sp, #16
 6258              		.cfi_def_cfa_offset 24
 6259 0004 00AF     		add	r7, sp, #0
 6260              		.cfi_def_cfa_register 7
 6261 0006 0346     		mov	r3, r0
 6262 0008 FB71     		strb	r3, [r7, #7]
 6263 000a 0B46     		mov	r3, r1
 6264 000c BB71     		strb	r3, [r7, #6]
 6265 000e 1346     		mov	r3, r2
 6266 0010 7B71     		strb	r3, [r7, #5]
1831:main.c        ****     uint8 volatile status;
1832:main.c        ****     uint32_t timeout = 50000;
 6267              		.loc 1 1832 0
 6268 0012 4CF25033 		movw	r3, #50000
 6269 0016 FB60     		str	r3, [r7, #12]
1833:main.c        ****     uint8_t error = 0;
 6270              		.loc 1 1833 0
 6271 0018 0023     		movs	r3, #0
 6272 001a FB72     		strb	r3, [r7, #11]
1834:main.c        ****     status = I2C_1_MasterClearStatus();
 6273              		.loc 1 1834 0
 6274 001c FFF7FEFF 		bl	I2C_1_MasterClearStatus
 6275 0020 0346     		mov	r3, r0
 6276 0022 BB72     		strb	r3, [r7, #10]
1835:main.c        ****     if(!(status & I2C_1_MSTAT_ERR_XFER))
 6277              		.loc 1 1835 0
 6278 0024 BB7A     		ldrb	r3, [r7, #10]
 6279 0026 DBB2     		uxtb	r3, r3
 6280 0028 5BB2     		sxtb	r3, r3
 6281 002a 002B     		cmp	r3, #0
 6282 002c 3DDB     		blt	.L262
1836:main.c        ****     {
1837:main.c        ****         status = I2C_1_MasterReadBuf(i2CAddr,
 6283              		.loc 1 1837 0
 6284 002e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 145


 6285 0030 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 6286 0032 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 6287 0034 2749     		ldr	r1, .L270
 6288 0036 FFF7FEFF 		bl	I2C_1_MasterReadBuf
 6289 003a 0346     		mov	r3, r0
 6290 003c BB72     		strb	r3, [r7, #10]
1838:main.c        ****                                    (uint8 *)&(I2Cbuff2),
1839:main.c        ****                                     nbytes, mode); 
1840:main.c        ****         if(status == I2C_1_MSTR_NO_ERROR)
 6291              		.loc 1 1840 0
 6292 003e BB7A     		ldrb	r3, [r7, #10]
 6293 0040 DBB2     		uxtb	r3, r3
 6294 0042 002B     		cmp	r3, #0
 6295 0044 2BD1     		bne	.L263
 6296              	.L266:
1841:main.c        ****         {
1842:main.c        ****             /* wait for read complete and no error */
1843:main.c        ****             do
1844:main.c        ****             {
1845:main.c        ****                 status = I2C_1_MasterStatus();
 6297              		.loc 1 1845 0
 6298 0046 FFF7FEFF 		bl	I2C_1_MasterStatus
 6299 004a 0346     		mov	r3, r0
 6300 004c BB72     		strb	r3, [r7, #10]
1846:main.c        ****                 timeout--;
 6301              		.loc 1 1846 0
 6302 004e FB68     		ldr	r3, [r7, #12]
 6303 0050 013B     		subs	r3, r3, #1
 6304 0052 FB60     		str	r3, [r7, #12]
1847:main.c        ****                 if (status == I2C_1_MSTAT_ERR_XFER)
 6305              		.loc 1 1847 0
 6306 0054 BB7A     		ldrb	r3, [r7, #10]
 6307 0056 DBB2     		uxtb	r3, r3
 6308 0058 802B     		cmp	r3, #128
 6309 005a 09D1     		bne	.L264
1848:main.c        ****                 {
1849:main.c        ****                     I2C_1_GENERATE_STOP_MANUAL;
 6310              		.loc 1 1849 0
 6311 005c 1E4B     		ldr	r3, .L270+4
 6312 005e 1022     		movs	r2, #16
 6313 0060 1A70     		strb	r2, [r3]
 6314 0062 1E4B     		ldr	r3, .L270+8
 6315 0064 0422     		movs	r2, #4
 6316 0066 1A70     		strb	r2, [r3]
1850:main.c        ****                     I2C_reset();
 6317              		.loc 1 1850 0
 6318 0068 FFF7FEFF 		bl	I2C_reset
1851:main.c        ****                     error = 1;
 6319              		.loc 1 1851 0
 6320 006c 0123     		movs	r3, #1
 6321 006e FB72     		strb	r3, [r7, #11]
 6322              	.L264:
1852:main.c        ****                 }
1853:main.c        ****                 if (timeout == 0)
 6323              		.loc 1 1853 0
 6324 0070 FB68     		ldr	r3, [r7, #12]
 6325 0072 002B     		cmp	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 146


 6326 0074 05D1     		bne	.L265
1854:main.c        ****                 {
1855:main.c        ****                     status = I2C_1_MSTAT_ERR_XFER;
 6327              		.loc 1 1855 0
 6328 0076 8023     		movs	r3, #128
 6329 0078 BB72     		strb	r3, [r7, #10]
1856:main.c        ****                     I2C_reset();
 6330              		.loc 1 1856 0
 6331 007a FFF7FEFF 		bl	I2C_reset
1857:main.c        ****                     error = 1;
 6332              		.loc 1 1857 0
 6333 007e 0123     		movs	r3, #1
 6334 0080 FB72     		strb	r3, [r7, #11]
 6335              	.L265:
1858:main.c        ****                 }
1859:main.c        ****             } while(((status & (I2C_1_MSTAT_RD_CMPLT | I2C_1_MSTAT_ERR_XFER)) == 0u) && (status != 
 6336              		.loc 1 1859 0
 6337 0082 BB7A     		ldrb	r3, [r7, #10]
 6338 0084 DBB2     		uxtb	r3, r3
 6339 0086 03F08103 		and	r3, r3, #129
 6340 008a 002B     		cmp	r3, #0
 6341 008c 0DD1     		bne	.L262
 6342              		.loc 1 1859 0 is_stmt 0 discriminator 1
 6343 008e BB7A     		ldrb	r3, [r7, #10]
 6344 0090 DBB2     		uxtb	r3, r3
 6345 0092 002B     		cmp	r3, #0
 6346 0094 09D0     		beq	.L262
 6347              		.loc 1 1859 0 discriminator 2
 6348 0096 FB68     		ldr	r3, [r7, #12]
 6349 0098 002B     		cmp	r3, #0
 6350 009a D4D1     		bne	.L266
 6351 009c 05E0     		b	.L262
 6352              	.L263:
1860:main.c        ****         }
1861:main.c        ****         else
1862:main.c        ****         {
1863:main.c        ****             /* translate from I2CM_MasterReadBuf() error output to
1864:main.c        ****             *  I2CM_MasterStatus() error output */
1865:main.c        ****             status = I2C_1_MSTAT_ERR_XFER;
 6353              		.loc 1 1865 0 is_stmt 1
 6354 009e 8023     		movs	r3, #128
 6355 00a0 BB72     		strb	r3, [r7, #10]
1866:main.c        ****             I2C_reset();
 6356              		.loc 1 1866 0
 6357 00a2 FFF7FEFF 		bl	I2C_reset
1867:main.c        ****             error = 1;
 6358              		.loc 1 1867 0
 6359 00a6 0123     		movs	r3, #1
 6360 00a8 FB72     		strb	r3, [r7, #11]
 6361              	.L262:
1868:main.c        ****         }
1869:main.c        ****     }
1870:main.c        ****     if ((status & I2C_1_MSTAT_ERR_ADDR_NAK) || (status & I2C_1_MSTAT_ERR_XFER))
 6362              		.loc 1 1870 0
 6363 00aa BB7A     		ldrb	r3, [r7, #10]
 6364 00ac DBB2     		uxtb	r3, r3
 6365 00ae 03F02003 		and	r3, r3, #32
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 147


 6366 00b2 002B     		cmp	r3, #0
 6367 00b4 04D1     		bne	.L267
 6368              		.loc 1 1870 0 is_stmt 0 discriminator 1
 6369 00b6 BB7A     		ldrb	r3, [r7, #10]
 6370 00b8 DBB2     		uxtb	r3, r3
 6371 00ba 5BB2     		sxtb	r3, r3
 6372 00bc 002B     		cmp	r3, #0
 6373 00be 03DA     		bge	.L268
 6374              	.L267:
1871:main.c        ****     {
1872:main.c        ****         //mark that i2c destination to be skipped (likely unplugged) and reset the I2C module
1873:main.c        ****         //i2c_skipped[main_counter] = 1;
1874:main.c        ****         I2C_reset();
 6375              		.loc 1 1874 0 is_stmt 1
 6376 00c0 FFF7FEFF 		bl	I2C_reset
1875:main.c        ****         error = 1;
 6377              		.loc 1 1875 0
 6378 00c4 0123     		movs	r3, #1
 6379 00c6 FB72     		strb	r3, [r7, #11]
 6380              	.L268:
1876:main.c        ****     }
1877:main.c        ****     return error;
 6381              		.loc 1 1877 0
 6382 00c8 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1878:main.c        **** }
 6383              		.loc 1 1878 0
 6384 00ca 1846     		mov	r0, r3
 6385 00cc 1037     		adds	r7, r7, #16
 6386              		.cfi_def_cfa_offset 8
 6387 00ce BD46     		mov	sp, r7
 6388              		.cfi_def_cfa_register 13
 6389              		@ sp needed
 6390 00d0 80BD     		pop	{r7, pc}
 6391              	.L271:
 6392 00d2 00BF     		.align	2
 6393              	.L270:
 6394 00d4 00000000 		.word	I2Cbuff2
 6395 00d8 D9490040 		.word	1073760729
 6396 00dc D7490040 		.word	1073760727
 6397              		.cfi_endproc
 6398              	.LFE79:
 6399              		.size	I2C_MasterReadBlocking, .-I2C_MasterReadBlocking
 6400              		.section	.text.I2C_reset,"ax",%progbits
 6401              		.align	2
 6402              		.global	I2C_reset
 6403              		.thumb
 6404              		.thumb_func
 6405              		.type	I2C_reset, %function
 6406              	I2C_reset:
 6407              	.LFB80:
1879:main.c        **** 
1880:main.c        **** void I2C_reset(void)
1881:main.c        **** {
 6408              		.loc 1 1881 0
 6409              		.cfi_startproc
 6410              		@ args = 0, pretend = 0, frame = 0
 6411              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 148


 6412 0000 80B5     		push	{r7, lr}
 6413              		.cfi_def_cfa_offset 8
 6414              		.cfi_offset 7, -8
 6415              		.cfi_offset 14, -4
 6416 0002 00AF     		add	r7, sp, #0
 6417              		.cfi_def_cfa_register 7
1882:main.c        ****   I2C_1_Stop();
 6418              		.loc 1 1882 0
 6419 0004 FFF7FEFF 		bl	I2C_1_Stop
1883:main.c        **** 
1884:main.c        ****   /* Disable/clear everything, then reinitialize. */
1885:main.c        **** 
1886:main.c        ****   I2C_1_CFG_REG = 0x00;  // NECESSARY to get MCSR to reset and clear BUS_BUSY bit.
 6420              		.loc 1 1886 0
 6421 0008 064B     		ldr	r3, .L273
 6422 000a 0022     		movs	r2, #0
 6423 000c 1A70     		strb	r2, [r3]
1887:main.c        **** 
1888:main.c        ****   I2C_1_XCFG_REG = 0x00;  // not sure if necessary.
 6424              		.loc 1 1888 0
 6425 000e 064B     		ldr	r3, .L273+4
 6426 0010 0022     		movs	r2, #0
 6427 0012 1A70     		strb	r2, [r3]
1889:main.c        **** 
1890:main.c        ****   I2C_1_initVar = 0;  // MUST BE SET TO ZERO to allow I2C_1_Start() to call I2C_1_Init()
 6428              		.loc 1 1890 0
 6429 0014 054B     		ldr	r3, .L273+8
 6430 0016 0022     		movs	r2, #0
 6431 0018 1A70     		strb	r2, [r3]
1891:main.c        **** 
1892:main.c        ****   I2C_1_Start();
 6432              		.loc 1 1892 0
 6433 001a FFF7FEFF 		bl	I2C_1_Start
1893:main.c        **** }
 6434              		.loc 1 1893 0
 6435 001e 00BF     		nop
 6436 0020 80BD     		pop	{r7, pc}
 6437              	.L274:
 6438 0022 00BF     		.align	2
 6439              	.L273:
 6440 0024 D6490040 		.word	1073760726
 6441 0028 C8490040 		.word	1073760712
 6442 002c 00000000 		.word	I2C_1_initVar
 6443              		.cfi_endproc
 6444              	.LFE80:
 6445              		.size	I2C_reset, .-I2C_reset
 6446              		.section	.text.displayCurrentPresetNameAndCopedent,"ax",%progbits
 6447              		.align	2
 6448              		.global	displayCurrentPresetNameAndCopedent
 6449              		.thumb
 6450              		.thumb_func
 6451              		.type	displayCurrentPresetNameAndCopedent, %function
 6452              	displayCurrentPresetNameAndCopedent:
 6453              	.LFB81:
1894:main.c        **** 
1895:main.c        **** void displayCurrentPresetNameAndCopedent()
1896:main.c        **** {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 149


 6454              		.loc 1 1896 0
 6455              		.cfi_startproc
 6456              		@ args = 0, pretend = 0, frame = 0
 6457              		@ frame_needed = 1, uses_anonymous_args = 0
 6458 0000 98B5     		push	{r3, r4, r7, lr}
 6459              		.cfi_def_cfa_offset 16
 6460              		.cfi_offset 3, -16
 6461              		.cfi_offset 4, -12
 6462              		.cfi_offset 7, -8
 6463              		.cfi_offset 14, -4
 6464 0002 00AF     		add	r7, sp, #0
 6465              		.cfi_def_cfa_register 7
1897:main.c        ****     if (macroNamesArray[patchNum][7][0] != 255) //don't display if the name data still hasn't been 
 6466              		.loc 1 1897 0
 6467 0004 2E4B     		ldr	r3, .L278
 6468 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6469 0008 1946     		mov	r1, r3
 6470 000a 2E4A     		ldr	r2, .L278+4
 6471 000c 0B46     		mov	r3, r1
 6472 000e DB00     		lsls	r3, r3, #3
 6473 0010 5B1A     		subs	r3, r3, r1
 6474 0012 1B01     		lsls	r3, r3, #4
 6475 0014 1344     		add	r3, r3, r2
 6476 0016 6233     		adds	r3, r3, #98
 6477 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6478 001a FF2B     		cmp	r3, #255
 6479 001c 4DD0     		beq	.L277
1898:main.c        ****     {
1899:main.c        ****         OLEDclear(128, 64);
 6480              		.loc 1 1899 0
 6481 001e 4021     		movs	r1, #64
 6482 0020 8020     		movs	r0, #128
 6483 0022 FFF7FEFF 		bl	OLEDclear
1900:main.c        ****         
1901:main.c        ****         myGFX_setFont(0);
 6484              		.loc 1 1901 0
 6485 0026 0020     		movs	r0, #0
 6486 0028 FFF7FEFF 		bl	myGFX_setFont
1902:main.c        ****         OLEDwriteInt(patchNum , 2, 0,FirstLine);
 6487              		.loc 1 1902 0
 6488 002c 244B     		ldr	r3, .L278
 6489 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6490 0030 1846     		mov	r0, r3
 6491 0032 0023     		movs	r3, #0
 6492 0034 0022     		movs	r2, #0
 6493 0036 0221     		movs	r1, #2
 6494 0038 FFF7FEFF 		bl	OLEDwriteInt
1903:main.c        ****         //OLEDwriteString(" ", 1, OLEDgetCursor(), FirstLine);
1904:main.c        ****         OLEDwriteString((char *)&presetNamesArray[patchNum][0], NAME_CLIPPED_LENGTH, 0, SecondLine)
 6495              		.loc 1 1904 0
 6496 003c 204B     		ldr	r3, .L278
 6497 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6498 0040 1A46     		mov	r2, r3
 6499 0042 1346     		mov	r3, r2
 6500 0044 DB00     		lsls	r3, r3, #3
 6501 0046 9B1A     		subs	r3, r3, r2
 6502 0048 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 150


 6503 004a 1F4A     		ldr	r2, .L278+8
 6504 004c 9818     		adds	r0, r3, r2
 6505 004e 0123     		movs	r3, #1
 6506 0050 0022     		movs	r2, #0
 6507 0052 0B21     		movs	r1, #11
 6508 0054 FFF7FEFF 		bl	OLEDwriteString
1905:main.c        ****         OLEDwriteInt(currentCopedent , 2, 0,FourthLine);
 6509              		.loc 1 1905 0
 6510 0058 1C4B     		ldr	r3, .L278+12
 6511 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6512 005c 1846     		mov	r0, r3
 6513 005e 0323     		movs	r3, #3
 6514 0060 0022     		movs	r2, #0
 6515 0062 0221     		movs	r1, #2
 6516 0064 FFF7FEFF 		bl	OLEDwriteInt
1906:main.c        ****         OLEDwriteString(" ", 1, OLEDgetCursor(), FourthLine);
 6517              		.loc 1 1906 0
 6518 0068 FFF7FEFF 		bl	OLEDgetCursor
 6519 006c 0246     		mov	r2, r0
 6520 006e 0323     		movs	r3, #3
 6521 0070 0121     		movs	r1, #1
 6522 0072 1748     		ldr	r0, .L278+16
 6523 0074 FFF7FEFF 		bl	OLEDwriteString
1907:main.c        ****         OLEDwriteString((char *)&copedentNamesArray[currentCopedent][0], COPEDENT_NAME_CLIPPED_LENG
 6524              		.loc 1 1907 0
 6525 0078 144B     		ldr	r3, .L278+12
 6526 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6527 007c 1A46     		mov	r2, r3
 6528 007e 1346     		mov	r3, r2
 6529 0080 DB00     		lsls	r3, r3, #3
 6530 0082 9B1A     		subs	r3, r3, r2
 6531 0084 5B00     		lsls	r3, r3, #1
 6532 0086 134A     		ldr	r2, .L278+20
 6533 0088 9C18     		adds	r4, r3, r2
 6534 008a FFF7FEFF 		bl	OLEDgetCursor
 6535 008e 0246     		mov	r2, r0
 6536 0090 0323     		movs	r3, #3
 6537 0092 0821     		movs	r1, #8
 6538 0094 2046     		mov	r0, r4
 6539 0096 FFF7FEFF 		bl	OLEDwriteString
1908:main.c        ****         mainOLEDWaitingToSend = 1;
 6540              		.loc 1 1908 0
 6541 009a 0F4B     		ldr	r3, .L278+24
 6542 009c 0122     		movs	r2, #1
 6543 009e 1A60     		str	r2, [r3]
1909:main.c        ****         presetAlreadyDisplayed[patchNum] = 1;
 6544              		.loc 1 1909 0
 6545 00a0 074B     		ldr	r3, .L278
 6546 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6547 00a4 1946     		mov	r1, r3
 6548 00a6 0D4B     		ldr	r3, .L278+28
 6549 00a8 0122     		movs	r2, #1
 6550 00aa 43F82120 		str	r2, [r3, r1, lsl #2]
1910:main.c        ****         //and update the macro OLED screens
1911:main.c        ****         whichMacro = 0;
 6551              		.loc 1 1911 0
 6552 00ae 0C4B     		ldr	r3, .L278+32
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 151


 6553 00b0 0022     		movs	r2, #0
 6554 00b2 1A70     		strb	r2, [r3]
1912:main.c        ****         macroOLEDWaitingToSend = 1;
 6555              		.loc 1 1912 0
 6556 00b4 0B4B     		ldr	r3, .L278+36
 6557 00b6 0122     		movs	r2, #1
 6558 00b8 1A60     		str	r2, [r3]
 6559              	.L277:
1913:main.c        ****     }
1914:main.c        **** }
 6560              		.loc 1 1914 0
 6561 00ba 00BF     		nop
 6562 00bc 98BD     		pop	{r3, r4, r7, pc}
 6563              	.L279:
 6564 00be 00BF     		.align	2
 6565              	.L278:
 6566 00c0 00000000 		.word	patchNum
 6567 00c4 00000000 		.word	macroNamesArray
 6568 00c8 00000000 		.word	presetNamesArray
 6569 00cc 00000000 		.word	currentCopedent
 6570 00d0 00040000 		.word	.LC0
 6571 00d4 00000000 		.word	copedentNamesArray
 6572 00d8 00000000 		.word	mainOLEDWaitingToSend
 6573 00dc 00000000 		.word	presetAlreadyDisplayed
 6574 00e0 00000000 		.word	whichMacro
 6575 00e4 00000000 		.word	macroOLEDWaitingToSend
 6576              		.cfi_endproc
 6577              	.LFE81:
 6578              		.size	displayCurrentPresetNameAndCopedent, .-displayCurrentPresetNameAndCopedent
 6579              		.section	.text.checkUSB_Vbus,"ax",%progbits
 6580              		.align	2
 6581              		.global	checkUSB_Vbus
 6582              		.thumb
 6583              		.thumb_func
 6584              		.type	checkUSB_Vbus, %function
 6585              	checkUSB_Vbus:
 6586              	.LFB82:
1915:main.c        ****     
1916:main.c        **** void checkUSB_Vbus(void)
1917:main.c        **** {
 6587              		.loc 1 1917 0
 6588              		.cfi_startproc
 6589              		@ args = 0, pretend = 0, frame = 0
 6590              		@ frame_needed = 1, uses_anonymous_args = 0
 6591 0000 80B5     		push	{r7, lr}
 6592              		.cfi_def_cfa_offset 8
 6593              		.cfi_offset 7, -8
 6594              		.cfi_offset 14, -4
 6595 0002 00AF     		add	r7, sp, #0
 6596              		.cfi_def_cfa_register 7
1918:main.c        ****    if (USB_VBusPresent() == 0)
 6597              		.loc 1 1918 0
 6598 0004 FFF7FEFF 		bl	USB_VBusPresent
 6599 0008 0346     		mov	r3, r0
 6600 000a 002B     		cmp	r3, #0
 6601 000c 05D1     		bne	.L281
1919:main.c        ****    {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 152


1920:main.c        ****        USB_Stop();
 6602              		.loc 1 1920 0
 6603 000e FFF7FEFF 		bl	USB_Stop
1921:main.c        ****        USB_active = 0; 
 6604              		.loc 1 1921 0
 6605 0012 0E4B     		ldr	r3, .L284
 6606 0014 0022     		movs	r2, #0
 6607 0016 1A70     		strb	r2, [r3]
 6608 0018 13E0     		b	.L282
 6609              	.L281:
1922:main.c        ****    }
1923:main.c        ****    else if (USB_active == 0 )
 6610              		.loc 1 1923 0
 6611 001a 0C4B     		ldr	r3, .L284
 6612 001c 1B78     		ldrb	r3, [r3]
 6613 001e DBB2     		uxtb	r3, r3
 6614 0020 002B     		cmp	r3, #0
 6615 0022 0ED1     		bne	.L282
1924:main.c        ****    {
1925:main.c        ****        USB_Start(0u, USB_3V_OPERATION ); 
 6616              		.loc 1 1925 0
 6617 0024 0021     		movs	r1, #0
 6618 0026 0020     		movs	r0, #0
 6619 0028 FFF7FEFF 		bl	USB_Start
1926:main.c        ****         while (0u == USB_GetConfiguration());
 6620              		.loc 1 1926 0
 6621 002c 00BF     		nop
 6622              	.L283:
 6623              		.loc 1 1926 0 is_stmt 0 discriminator 1
 6624 002e FFF7FEFF 		bl	USB_GetConfiguration
 6625 0032 0346     		mov	r3, r0
 6626 0034 002B     		cmp	r3, #0
 6627 0036 FAD0     		beq	.L283
1927:main.c        ****         USB_MIDI_EP_Init();
 6628              		.loc 1 1927 0 is_stmt 1
 6629 0038 FFF7FEFF 		bl	USB_MIDI_Init
1928:main.c        ****        USB_active = 1;
 6630              		.loc 1 1928 0
 6631 003c 034B     		ldr	r3, .L284
 6632 003e 0122     		movs	r2, #1
 6633 0040 1A70     		strb	r2, [r3]
 6634              	.L282:
1929:main.c        ****    }
1930:main.c        ****    USB_check_flag = 0;
 6635              		.loc 1 1930 0
 6636 0042 034B     		ldr	r3, .L284+4
 6637 0044 0022     		movs	r2, #0
 6638 0046 1A70     		strb	r2, [r3]
1931:main.c        **** }
 6639              		.loc 1 1931 0
 6640 0048 00BF     		nop
 6641 004a 80BD     		pop	{r7, pc}
 6642              	.L285:
 6643              		.align	2
 6644              	.L284:
 6645 004c 00000000 		.word	USB_active
 6646 0050 00000000 		.word	USB_check_flag
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 153


 6647              		.cfi_endproc
 6648              	.LFE82:
 6649              		.size	checkUSB_Vbus, .-checkUSB_Vbus
 6650              		.section	.text.USB_service,"ax",%progbits
 6651              		.align	2
 6652              		.global	USB_service
 6653              		.thumb
 6654              		.thumb_func
 6655              		.type	USB_service, %function
 6656              	USB_service:
 6657              	.LFB83:
1932:main.c        **** 
1933:main.c        **** 
1934:main.c        **** 
1935:main.c        **** void USB_service(void)
1936:main.c        **** {
 6658              		.loc 1 1936 0
 6659              		.cfi_startproc
 6660              		@ args = 0, pretend = 0, frame = 0
 6661              		@ frame_needed = 1, uses_anonymous_args = 0
 6662 0000 80B5     		push	{r7, lr}
 6663              		.cfi_def_cfa_offset 8
 6664              		.cfi_offset 7, -8
 6665              		.cfi_offset 14, -4
 6666 0002 00AF     		add	r7, sp, #0
 6667              		.cfi_def_cfa_register 7
1937:main.c        ****     if(USB_IsConfigurationChanged() != 0u)
 6668              		.loc 1 1937 0
 6669 0004 FFF7FEFF 		bl	USB_IsConfigurationChanged
 6670 0008 0346     		mov	r3, r0
 6671 000a 002B     		cmp	r3, #0
 6672 000c 10D0     		beq	.L287
1938:main.c        ****     {
1939:main.c        ****         if(USB_GetConfiguration() != 0u)   
 6673              		.loc 1 1939 0
 6674 000e FFF7FEFF 		bl	USB_GetConfiguration
 6675 0012 0346     		mov	r3, r0
 6676 0014 002B     		cmp	r3, #0
 6677 0016 0BD0     		beq	.L287
1940:main.c        ****         {
1941:main.c        ****            // Sleep_isr_StartEx(SleepIsr_function);
1942:main.c        ****             
1943:main.c        ****             //SleepTimer_Start();
1944:main.c        ****         	
1945:main.c        ****             if ((USB_active) && (USB_VBusPresent()))
 6678              		.loc 1 1945 0
 6679 0018 244B     		ldr	r3, .L293
 6680 001a 1B78     		ldrb	r3, [r3]
 6681 001c DBB2     		uxtb	r3, r3
 6682 001e 002B     		cmp	r3, #0
 6683 0020 06D0     		beq	.L287
 6684              		.loc 1 1945 0 is_stmt 0 discriminator 1
 6685 0022 FFF7FEFF 		bl	USB_VBusPresent
 6686 0026 0346     		mov	r3, r0
 6687 0028 002B     		cmp	r3, #0
 6688 002a 01D0     		beq	.L287
1946:main.c        ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 154


1947:main.c        ****                 USB_MIDI_EP_Init();
 6689              		.loc 1 1947 0 is_stmt 1
 6690 002c FFF7FEFF 		bl	USB_MIDI_Init
 6691              	.L287:
1948:main.c        ****             }
1949:main.c        ****         }
1950:main.c        ****         else
1951:main.c        ****         {
1952:main.c        ****             //SleepTimer_Stop();
1953:main.c        ****         }    
1954:main.c        ****     }        
1955:main.c        ****     
1956:main.c        ****     if(USB_GetConfiguration() != 0u)    
 6692              		.loc 1 1956 0
 6693 0030 FFF7FEFF 		bl	USB_GetConfiguration
 6694 0034 0346     		mov	r3, r0
 6695 0036 002B     		cmp	r3, #0
 6696 0038 35D0     		beq	.L292
1957:main.c        ****     {
1958:main.c        **** 
1959:main.c        ****          /* Reinitialize after SET_CONFIGURATION or SET_INTERFACE Requests */
1960:main.c        ****         if(USB_IsConfigurationChanged() != 0x00)
 6697              		.loc 1 1960 0
 6698 003a FFF7FEFF 		bl	USB_IsConfigurationChanged
 6699 003e 0346     		mov	r3, r0
 6700 0040 002B     		cmp	r3, #0
 6701 0042 18D0     		beq	.L290
1961:main.c        ****         {
1962:main.c        ****             USB_LoadInEP(USB_midi_in_ep, USB_midiInBuffer,(uint16) USB_midiInPointer);
 6702              		.loc 1 1962 0
 6703 0044 1A4B     		ldr	r3, .L293+4
 6704 0046 1B78     		ldrb	r3, [r3]
 6705 0048 D8B2     		uxtb	r0, r3
 6706 004a 1A4B     		ldr	r3, .L293+8
 6707 004c 1B78     		ldrb	r3, [r3]
 6708 004e DBB2     		uxtb	r3, r3
 6709 0050 9BB2     		uxth	r3, r3
 6710 0052 1A46     		mov	r2, r3
 6711 0054 1849     		ldr	r1, .L293+12
 6712 0056 FFF7FEFF 		bl	USB_LoadInEP
1963:main.c        ****             //USB_LoadInEP(USB_midi_in_ep, USB_midiInBuffer, 64);
1964:main.c        ****             USB_ReadOutEP(USB_midi_out_ep,USB_midiOutBuffer, 64);
 6713              		.loc 1 1964 0
 6714 005a 184B     		ldr	r3, .L293+16
 6715 005c 1B78     		ldrb	r3, [r3]
 6716 005e DBB2     		uxtb	r3, r3
 6717 0060 4022     		movs	r2, #64
 6718 0062 1749     		ldr	r1, .L293+20
 6719 0064 1846     		mov	r0, r3
 6720 0066 FFF7FEFF 		bl	USB_ReadOutEP
1965:main.c        ****                                              /* configuring the DMAs for the first time only, the d
1966:main.c        ****                                              in the EP buffer is Transferred by DMA to the buffer a
1967:main.c        ****             USB_EnableOutEP(USB_midi_out_ep);       /* Note 3.*/
 6721              		.loc 1 1967 0
 6722 006a 144B     		ldr	r3, .L293+16
 6723 006c 1B78     		ldrb	r3, [r3]
 6724 006e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 155


 6725 0070 1846     		mov	r0, r3
 6726 0072 FFF7FEFF 		bl	USB_EnableOutEP
 6727              	.L290:
1968:main.c        ****         }
1969:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 6728              		.loc 1 1969 0
 6729 0076 0D4B     		ldr	r3, .L293
 6730 0078 1B78     		ldrb	r3, [r3]
 6731 007a DBB2     		uxtb	r3, r3
 6732 007c 002B     		cmp	r3, #0
 6733 007e 06D0     		beq	.L291
 6734              		.loc 1 1969 0 is_stmt 0 discriminator 1
 6735 0080 FFF7FEFF 		bl	USB_VBusPresent
 6736 0084 0346     		mov	r3, r0
 6737 0086 002B     		cmp	r3, #0
 6738 0088 01D0     		beq	.L291
1970:main.c        ****         {
1971:main.c        ****             USB_MIDI_IN_Service();
 6739              		.loc 1 1971 0 is_stmt 1
 6740 008a FFF7FEFF 		bl	USB_MIDI_IN_Service
 6741              	.L291:
1972:main.c        ****         }
1973:main.c        **** 
1974:main.c        **** 
1975:main.c        **** 
1976:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 6742              		.loc 1 1976 0
 6743 008e 074B     		ldr	r3, .L293
 6744 0090 1B78     		ldrb	r3, [r3]
 6745 0092 DBB2     		uxtb	r3, r3
 6746 0094 002B     		cmp	r3, #0
 6747 0096 06D0     		beq	.L292
 6748              		.loc 1 1976 0 is_stmt 0 discriminator 1
 6749 0098 FFF7FEFF 		bl	USB_VBusPresent
 6750 009c 0346     		mov	r3, r0
 6751 009e 002B     		cmp	r3, #0
 6752 00a0 01D0     		beq	.L292
1977:main.c        ****         {
1978:main.c        ****             USB_MIDI_OUT_Service();
 6753              		.loc 1 1978 0 is_stmt 1
 6754 00a2 FFF7FEFF 		bl	USB_MIDI_OUT_Service
 6755              	.L292:
1979:main.c        ****         }
1980:main.c        ****     }
1981:main.c        ****         
1982:main.c        **** }
 6756              		.loc 1 1982 0
 6757 00a6 00BF     		nop
 6758 00a8 80BD     		pop	{r7, pc}
 6759              	.L294:
 6760 00aa 00BF     		.align	2
 6761              	.L293:
 6762 00ac 00000000 		.word	USB_active
 6763 00b0 00000000 		.word	USB_midi_in_ep
 6764 00b4 00000000 		.word	USB_midiInPointer
 6765 00b8 00000000 		.word	USB_midiInBuffer
 6766 00bc 00000000 		.word	USB_midi_out_ep
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 156


 6767 00c0 00000000 		.word	USB_midiOutBuffer
 6768              		.cfi_endproc
 6769              	.LFE83:
 6770              		.size	USB_service, .-USB_service
 6771              		.section	.text.log2f_approx,"ax",%progbits
 6772              		.align	2
 6773              		.global	log2f_approx
 6774              		.thumb
 6775              		.thumb_func
 6776              		.type	log2f_approx, %function
 6777              	log2f_approx:
 6778              	.LFB84:
1983:main.c        **** 
1984:main.c        **** // This is a fast approximation to log2()
1985:main.c        **** // Y = C[0]*F*F*F + C[1]*F*F + C[2]*F + C[3] + E;
1986:main.c        **** float log2f_approx(float X) {
 6779              		.loc 1 1986 0
 6780              		.cfi_startproc
 6781              		@ args = 0, pretend = 0, frame = 24
 6782              		@ frame_needed = 1, uses_anonymous_args = 0
 6783 0000 80B5     		push	{r7, lr}
 6784              		.cfi_def_cfa_offset 8
 6785              		.cfi_offset 7, -8
 6786              		.cfi_offset 14, -4
 6787 0002 86B0     		sub	sp, sp, #24
 6788              		.cfi_def_cfa_offset 32
 6789 0004 00AF     		add	r7, sp, #0
 6790              		.cfi_def_cfa_register 7
 6791 0006 7860     		str	r0, [r7, #4]	@ float
1987:main.c        ****   float Y, F;
1988:main.c        ****   int E;
1989:main.c        ****   F = frexpf(fabsf(X), &E);
 6792              		.loc 1 1989 0
 6793 0008 7B68     		ldr	r3, [r7, #4]
 6794 000a 23F00043 		bic	r3, r3, #-2147483648
 6795 000e 07F10C02 		add	r2, r7, #12
 6796 0012 1146     		mov	r1, r2
 6797 0014 1846     		mov	r0, r3
 6798 0016 FFF7FEFF 		bl	frexpf
 6799 001a 7861     		str	r0, [r7, #20]	@ float
1990:main.c        ****   Y = 1.23149591368684f;
 6800              		.loc 1 1990 0
 6801 001c 1A4B     		ldr	r3, .L297
 6802 001e 3B61     		str	r3, [r7, #16]	@ float
1991:main.c        ****   Y *= F;
 6803              		.loc 1 1991 0
 6804 0020 7969     		ldr	r1, [r7, #20]	@ float
 6805 0022 3869     		ldr	r0, [r7, #16]	@ float
 6806 0024 FFF7FEFF 		bl	__aeabi_fmul
 6807 0028 0346     		mov	r3, r0
 6808 002a 3B61     		str	r3, [r7, #16]	@ float
1992:main.c        ****   Y += -4.11852516267426f;
 6809              		.loc 1 1992 0
 6810 002c 1749     		ldr	r1, .L297+4
 6811 002e 3869     		ldr	r0, [r7, #16]	@ float
 6812 0030 FFF7FEFF 		bl	__aeabi_fsub
 6813 0034 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 157


 6814 0036 3B61     		str	r3, [r7, #16]	@ float
1993:main.c        ****   Y *= F;
 6815              		.loc 1 1993 0
 6816 0038 7969     		ldr	r1, [r7, #20]	@ float
 6817 003a 3869     		ldr	r0, [r7, #16]	@ float
 6818 003c FFF7FEFF 		bl	__aeabi_fmul
 6819 0040 0346     		mov	r3, r0
 6820 0042 3B61     		str	r3, [r7, #16]	@ float
1994:main.c        ****   Y += 6.02197014179219f;
 6821              		.loc 1 1994 0
 6822 0044 1249     		ldr	r1, .L297+8
 6823 0046 3869     		ldr	r0, [r7, #16]	@ float
 6824 0048 FFF7FEFF 		bl	__aeabi_fadd
 6825 004c 0346     		mov	r3, r0
 6826 004e 3B61     		str	r3, [r7, #16]	@ float
1995:main.c        ****   Y *= F;
 6827              		.loc 1 1995 0
 6828 0050 7969     		ldr	r1, [r7, #20]	@ float
 6829 0052 3869     		ldr	r0, [r7, #16]	@ float
 6830 0054 FFF7FEFF 		bl	__aeabi_fmul
 6831 0058 0346     		mov	r3, r0
 6832 005a 3B61     		str	r3, [r7, #16]	@ float
1996:main.c        ****   Y += -3.13396450166353f;
 6833              		.loc 1 1996 0
 6834 005c 0D49     		ldr	r1, .L297+12
 6835 005e 3869     		ldr	r0, [r7, #16]	@ float
 6836 0060 FFF7FEFF 		bl	__aeabi_fsub
 6837 0064 0346     		mov	r3, r0
 6838 0066 3B61     		str	r3, [r7, #16]	@ float
1997:main.c        ****   Y += E;
 6839              		.loc 1 1997 0
 6840 0068 FB68     		ldr	r3, [r7, #12]
 6841 006a 1846     		mov	r0, r3
 6842 006c FFF7FEFF 		bl	__aeabi_i2f
 6843 0070 0346     		mov	r3, r0
 6844 0072 1946     		mov	r1, r3
 6845 0074 3869     		ldr	r0, [r7, #16]	@ float
 6846 0076 FFF7FEFF 		bl	__aeabi_fadd
 6847 007a 0346     		mov	r3, r0
 6848 007c 3B61     		str	r3, [r7, #16]	@ float
1998:main.c        ****   return(Y);
 6849              		.loc 1 1998 0
 6850 007e 3B69     		ldr	r3, [r7, #16]	@ float
1999:main.c        **** }
 6851              		.loc 1 1999 0
 6852 0080 1846     		mov	r0, r3
 6853 0082 1837     		adds	r7, r7, #24
 6854              		.cfi_def_cfa_offset 8
 6855 0084 BD46     		mov	sp, r7
 6856              		.cfi_def_cfa_register 13
 6857              		@ sp needed
 6858 0086 80BD     		pop	{r7, pc}
 6859              	.L298:
 6860              		.align	2
 6861              	.L297:
 6862 0088 A8A19D3F 		.word	1067295144
 6863 008c F5CA8340 		.word	1082378997
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 158


 6864 0090 FBB3C040 		.word	1086370811
 6865 0094 E0924840 		.word	1078498016
 6866              		.cfi_endproc
 6867              	.LFE84:
 6868              		.size	log2f_approx, .-log2f_approx
 6869              		.global	prevNotes
 6870              		.bss
 6871              		.align	2
 6872              		.type	prevNotes, %object
 6873              		.size	prevNotes, 48
 6874              	prevNotes:
 6875 00d8 00000000 		.space	48
 6875      00000000 
 6875      00000000 
 6875      00000000 
 6875      00000000 
 6876              		.section	.text.noteEvent,"ax",%progbits
 6877              		.align	2
 6878              		.global	noteEvent
 6879              		.thumb
 6880              		.thumb_func
 6881              		.type	noteEvent, %function
 6882              	noteEvent:
 6883              	.LFB85:
2000:main.c        **** 
2001:main.c        **** //log10f is exactly log2(x)/log2(10.0f)
2002:main.c        **** #define log10f_fast(x)  (log2f_approx(x)*0.3010299956639812f)
2003:main.c        **** 
2004:main.c        **** int prevNotes[NUM_STRINGS] = {0,0,0,0,0,0,0,0,0,0,0,0};
2005:main.c        **** 
2006:main.c        **** void noteEvent(int string)
2007:main.c        **** {
 6884              		.loc 1 2007 0
 6885              		.cfi_startproc
 6886              		@ args = 0, pretend = 0, frame = 24
 6887              		@ frame_needed = 1, uses_anonymous_args = 0
 6888 0000 80B5     		push	{r7, lr}
 6889              		.cfi_def_cfa_offset 8
 6890              		.cfi_offset 7, -8
 6891              		.cfi_offset 14, -4
 6892 0002 86B0     		sub	sp, sp, #24
 6893              		.cfi_def_cfa_offset 32
 6894 0004 00AF     		add	r7, sp, #0
 6895              		.cfi_def_cfa_register 7
 6896 0006 7860     		str	r0, [r7, #4]
2008:main.c        ****     
2009:main.c        ****     /*
2010:main.c        ****     float tempAmp = strings[string] * 1.5259021896696421759365224689097e-5f;//divide by 65535
2011:main.c        ****     float v = 127.0f + (64.0f * log10f_fast(tempAmp));
2012:main.c        ****     int vInt  = (int) (v*4.0f);
2013:main.c        ****     if (vInt > 127)
2014:main.c        ****     {
2015:main.c        ****         vInt = 127;
2016:main.c        ****     }
2017:main.c        ****     */
2018:main.c        ****     uint16_t velocity = strings[string];
 6897              		.loc 1 2018 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 159


 6898 0008 2C4A     		ldr	r2, .L304
 6899 000a 7B68     		ldr	r3, [r7, #4]
 6900 000c 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 6901 0010 FB82     		strh	r3, [r7, #22]	@ movhi
2019:main.c        ****     if (velocity > 0)
 6902              		.loc 1 2019 0
 6903 0012 FB8A     		ldrh	r3, [r7, #22]
 6904 0014 002B     		cmp	r3, #0
 6905 0016 43D0     		beq	.L300
 6906              	.LBB38:
2020:main.c        ****     {
2021:main.c        ****         //velocity = (((sqrtf((float)velocity) * 0.00001525878903f) - .0239372430f) * 130.114584436
2022:main.c        ****         float tempVel = (float)velocity;
 6907              		.loc 1 2022 0
 6908 0018 FB8A     		ldrh	r3, [r7, #22]
 6909 001a 1846     		mov	r0, r3
 6910 001c FFF7FEFF 		bl	__aeabi_ui2f
 6911 0020 0346     		mov	r3, r0
 6912 0022 3B61     		str	r3, [r7, #16]	@ float
2023:main.c        ****         tempVel = tempVel * 0.00001525878903f;
 6913              		.loc 1 2023 0
 6914 0024 4FF05E51 		mov	r1, #931135488
 6915 0028 3869     		ldr	r0, [r7, #16]	@ float
 6916 002a FFF7FEFF 		bl	__aeabi_fmul
 6917 002e 0346     		mov	r3, r0
 6918 0030 3B61     		str	r3, [r7, #16]	@ float
2024:main.c        ****         tempVel = sqrtf(tempVel);
 6919              		.loc 1 2024 0
 6920 0032 3869     		ldr	r0, [r7, #16]	@ float
 6921 0034 FFF7FEFF 		bl	sqrtf
 6922 0038 3861     		str	r0, [r7, #16]	@ float
2025:main.c        ****         tempVel = tempVel - 0.0239372430f;
 6923              		.loc 1 2025 0
 6924 003a 2149     		ldr	r1, .L304+4
 6925 003c 3869     		ldr	r0, [r7, #16]	@ float
 6926 003e FFF7FEFF 		bl	__aeabi_fsub
 6927 0042 0346     		mov	r3, r0
 6928 0044 3B61     		str	r3, [r7, #16]	@ float
2026:main.c        ****         tempVel = tempVel * 130.114584436252734f;
 6929              		.loc 1 2026 0
 6930 0046 1F49     		ldr	r1, .L304+8
 6931 0048 3869     		ldr	r0, [r7, #16]	@ float
 6932 004a FFF7FEFF 		bl	__aeabi_fmul
 6933 004e 0346     		mov	r3, r0
 6934 0050 3B61     		str	r3, [r7, #16]	@ float
2027:main.c        ****         velocity = (int)tempVel;
 6935              		.loc 1 2027 0
 6936 0052 3869     		ldr	r0, [r7, #16]	@ float
 6937 0054 FFF7FEFF 		bl	__aeabi_f2iz
 6938 0058 0346     		mov	r3, r0
 6939 005a FB82     		strh	r3, [r7, #22]	@ movhi
2028:main.c        ****         
2029:main.c        **** 
2030:main.c        ****         if (velocity > 127)
 6940              		.loc 1 2030 0
 6941 005c FB8A     		ldrh	r3, [r7, #22]
 6942 005e 7F2B     		cmp	r3, #127
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 160


 6943 0060 01D9     		bls	.L301
2031:main.c        ****         {
2032:main.c        ****             velocity = 127;
 6944              		.loc 1 2032 0
 6945 0062 7F23     		movs	r3, #127
 6946 0064 FB82     		strh	r3, [r7, #22]	@ movhi
 6947              	.L301:
2033:main.c        ****         }
2034:main.c        ****         
2035:main.c        ****         //only update octave on note-ons
2036:main.c        ****         //stringOctave[string] = powf(2.0f,octave);
2037:main.c        ****         int noteToSend = ((octave - 4) * 12) + openStringMIDI_Int[string];
 6948              		.loc 1 2037 0
 6949 0066 184B     		ldr	r3, .L304+12
 6950 0068 1B68     		ldr	r3, [r3]
 6951 006a 1A1F     		subs	r2, r3, #4
 6952 006c 1346     		mov	r3, r2
 6953 006e 5B00     		lsls	r3, r3, #1
 6954 0070 1344     		add	r3, r3, r2
 6955 0072 9B00     		lsls	r3, r3, #2
 6956 0074 1946     		mov	r1, r3
 6957 0076 154A     		ldr	r2, .L304+16
 6958 0078 7B68     		ldr	r3, [r7, #4]
 6959 007a 52F82330 		ldr	r3, [r2, r3, lsl #2]
 6960 007e 0B44     		add	r3, r3, r1
 6961 0080 FB60     		str	r3, [r7, #12]
2038:main.c        ****         sendMIDINoteOn(noteToSend , ((uint8_t)velocity), string+1);
 6962              		.loc 1 2038 0
 6963 0082 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6964 0084 DBB2     		uxtb	r3, r3
 6965 0086 1946     		mov	r1, r3
 6966 0088 7B68     		ldr	r3, [r7, #4]
 6967 008a 0133     		adds	r3, r3, #1
 6968 008c 1A46     		mov	r2, r3
 6969 008e F868     		ldr	r0, [r7, #12]
 6970 0090 FFF7FEFF 		bl	sendMIDINoteOn
2039:main.c        ****         prevNotes[string] = noteToSend;
 6971              		.loc 1 2039 0
 6972 0094 0E49     		ldr	r1, .L304+20
 6973 0096 7B68     		ldr	r3, [r7, #4]
 6974 0098 FA68     		ldr	r2, [r7, #12]
 6975 009a 41F82320 		str	r2, [r1, r3, lsl #2]
 6976              	.LBE38:
2040:main.c        ****             
2041:main.c        ****     }
2042:main.c        ****     else
2043:main.c        ****     {
2044:main.c        ****         sendMIDINoteOn(prevNotes[string], 0, string+1);
2045:main.c        ****     }
2046:main.c        **** 
2047:main.c        **** }
 6977              		.loc 1 2047 0
 6978 009e 09E0     		b	.L303
 6979              	.L300:
2044:main.c        ****     }
 6980              		.loc 1 2044 0
 6981 00a0 0B4A     		ldr	r2, .L304+20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 161


 6982 00a2 7B68     		ldr	r3, [r7, #4]
 6983 00a4 52F82300 		ldr	r0, [r2, r3, lsl #2]
 6984 00a8 7B68     		ldr	r3, [r7, #4]
 6985 00aa 0133     		adds	r3, r3, #1
 6986 00ac 1A46     		mov	r2, r3
 6987 00ae 0021     		movs	r1, #0
 6988 00b0 FFF7FEFF 		bl	sendMIDINoteOn
 6989              	.L303:
 6990              		.loc 1 2047 0
 6991 00b4 00BF     		nop
 6992 00b6 1837     		adds	r7, r7, #24
 6993              		.cfi_def_cfa_offset 8
 6994 00b8 BD46     		mov	sp, r7
 6995              		.cfi_def_cfa_register 13
 6996              		@ sp needed
 6997 00ba 80BD     		pop	{r7, pc}
 6998              	.L305:
 6999              		.align	2
 7000              	.L304:
 7001 00bc 00000000 		.word	strings
 7002 00c0 0918C43C 		.word	1019484169
 7003 00c4 551D0243 		.word	1124212053
 7004 00c8 00000000 		.word	octave
 7005 00cc 00000000 		.word	openStringMIDI_Int
 7006 00d0 00000000 		.word	prevNotes
 7007              		.cfi_endproc
 7008              	.LFE85:
 7009              		.size	noteEvent, .-noteEvent
 7010              		.section	.text.CCEvent,"ax",%progbits
 7011              		.align	2
 7012              		.global	CCEvent
 7013              		.thumb
 7014              		.thumb_func
 7015              		.type	CCEvent, %function
 7016              	CCEvent:
 7017              	.LFB86:
2048:main.c        **** 
2049:main.c        **** void CCEvent(int cc, int val)
2050:main.c        **** {
 7018              		.loc 1 2050 0
 7019              		.cfi_startproc
 7020              		@ args = 0, pretend = 0, frame = 8
 7021              		@ frame_needed = 1, uses_anonymous_args = 0
 7022 0000 80B5     		push	{r7, lr}
 7023              		.cfi_def_cfa_offset 8
 7024              		.cfi_offset 7, -8
 7025              		.cfi_offset 14, -4
 7026 0002 82B0     		sub	sp, sp, #8
 7027              		.cfi_def_cfa_offset 16
 7028 0004 00AF     		add	r7, sp, #0
 7029              		.cfi_def_cfa_register 7
 7030 0006 7860     		str	r0, [r7, #4]
 7031 0008 3960     		str	r1, [r7]
2051:main.c        ****     
2052:main.c        ****     sendMIDIControlChange(cc, val, 0);
 7032              		.loc 1 2052 0
 7033 000a 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 162


 7034 000c 3968     		ldr	r1, [r7]
 7035 000e 7868     		ldr	r0, [r7, #4]
 7036 0010 FFF7FEFF 		bl	sendMIDIControlChange
2053:main.c        **** }
 7037              		.loc 1 2053 0
 7038 0014 00BF     		nop
 7039 0016 0837     		adds	r7, r7, #8
 7040              		.cfi_def_cfa_offset 8
 7041 0018 BD46     		mov	sp, r7
 7042              		.cfi_def_cfa_register 13
 7043              		@ sp needed
 7044 001a 80BD     		pop	{r7, pc}
 7045              		.cfi_endproc
 7046              	.LFE86:
 7047              		.size	CCEvent, .-CCEvent
 7048              		.section	.text.sendMIDINoteOn,"ax",%progbits
 7049              		.align	2
 7050              		.global	sendMIDINoteOn
 7051              		.thumb
 7052              		.thumb_func
 7053              		.type	sendMIDINoteOn, %function
 7054              	sendMIDINoteOn:
 7055              	.LFB87:
2054:main.c        **** 
2055:main.c        **** void sendMIDINoteOn(int MIDInoteNum, int velocity, int channel)
2056:main.c        **** {  
 7056              		.loc 1 2056 0
 7057              		.cfi_startproc
 7058              		@ args = 0, pretend = 0, frame = 16
 7059              		@ frame_needed = 1, uses_anonymous_args = 0
 7060 0000 80B5     		push	{r7, lr}
 7061              		.cfi_def_cfa_offset 8
 7062              		.cfi_offset 7, -8
 7063              		.cfi_offset 14, -4
 7064 0002 84B0     		sub	sp, sp, #16
 7065              		.cfi_def_cfa_offset 24
 7066 0004 00AF     		add	r7, sp, #0
 7067              		.cfi_def_cfa_register 7
 7068 0006 F860     		str	r0, [r7, #12]
 7069 0008 B960     		str	r1, [r7, #8]
 7070 000a 7A60     		str	r2, [r7, #4]
2057:main.c        ****    
2058:main.c        ****     midiMsg[0] = USB_MIDI_NOTE_ON + channel;
 7071              		.loc 1 2058 0
 7072 000c 7B68     		ldr	r3, [r7, #4]
 7073 000e DBB2     		uxtb	r3, r3
 7074 0010 703B     		subs	r3, r3, #112
 7075 0012 DAB2     		uxtb	r2, r3
 7076 0014 114B     		ldr	r3, .L309
 7077 0016 1A70     		strb	r2, [r3]
2059:main.c        ****     midiMsg[1] = MIDInoteNum;
 7078              		.loc 1 2059 0
 7079 0018 FB68     		ldr	r3, [r7, #12]
 7080 001a DAB2     		uxtb	r2, r3
 7081 001c 0F4B     		ldr	r3, .L309
 7082 001e 5A70     		strb	r2, [r3, #1]
2060:main.c        ****     midiMsg[2] = velocity;	
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 163


 7083              		.loc 1 2060 0
 7084 0020 BB68     		ldr	r3, [r7, #8]
 7085 0022 DAB2     		uxtb	r2, r3
 7086 0024 0D4B     		ldr	r3, .L309
 7087 0026 9A70     		strb	r2, [r3, #2]
2061:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 7088              		.loc 1 2061 0
 7089 0028 0D4B     		ldr	r3, .L309+4
 7090 002a 1B78     		ldrb	r3, [r3]
 7091 002c DBB2     		uxtb	r3, r3
 7092 002e 002B     		cmp	r3, #0
 7093 0030 09D0     		beq	.L308
 7094              		.loc 1 2061 0 is_stmt 0 discriminator 1
 7095 0032 FFF7FEFF 		bl	USB_VBusPresent
 7096 0036 0346     		mov	r3, r0
 7097 0038 002B     		cmp	r3, #0
 7098 003a 04D0     		beq	.L308
2062:main.c        ****     {
2063:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 7099              		.loc 1 2063 0 is_stmt 1
 7100 003c 0022     		movs	r2, #0
 7101 003e 0749     		ldr	r1, .L309
 7102 0040 0320     		movs	r0, #3
 7103 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 7104              	.L308:
2064:main.c        ****     } 
2065:main.c        ****     midiSent += 4;
 7105              		.loc 1 2065 0
 7106 0046 074B     		ldr	r3, .L309+8
 7107 0048 1B88     		ldrh	r3, [r3]
 7108 004a 0433     		adds	r3, r3, #4
 7109 004c 9AB2     		uxth	r2, r3
 7110 004e 054B     		ldr	r3, .L309+8
 7111 0050 1A80     		strh	r2, [r3]	@ movhi
2066:main.c        **** }
 7112              		.loc 1 2066 0
 7113 0052 00BF     		nop
 7114 0054 1037     		adds	r7, r7, #16
 7115              		.cfi_def_cfa_offset 8
 7116 0056 BD46     		mov	sp, r7
 7117              		.cfi_def_cfa_register 13
 7118              		@ sp needed
 7119 0058 80BD     		pop	{r7, pc}
 7120              	.L310:
 7121 005a 00BF     		.align	2
 7122              	.L309:
 7123 005c 00000000 		.word	midiMsg
 7124 0060 00000000 		.word	USB_active
 7125 0064 00000000 		.word	midiSent
 7126              		.cfi_endproc
 7127              	.LFE87:
 7128              		.size	sendMIDINoteOn, .-sendMIDINoteOn
 7129              		.section	.text.sendMIDIPolyKeyPressure,"ax",%progbits
 7130              		.align	2
 7131              		.global	sendMIDIPolyKeyPressure
 7132              		.thumb
 7133              		.thumb_func
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 164


 7134              		.type	sendMIDIPolyKeyPressure, %function
 7135              	sendMIDIPolyKeyPressure:
 7136              	.LFB88:
2067:main.c        **** 
2068:main.c        **** void sendMIDIPolyKeyPressure(int MIDInoteNum, int pressure, int channel)
2069:main.c        **** {
 7137              		.loc 1 2069 0
 7138              		.cfi_startproc
 7139              		@ args = 0, pretend = 0, frame = 16
 7140              		@ frame_needed = 1, uses_anonymous_args = 0
 7141 0000 80B5     		push	{r7, lr}
 7142              		.cfi_def_cfa_offset 8
 7143              		.cfi_offset 7, -8
 7144              		.cfi_offset 14, -4
 7145 0002 84B0     		sub	sp, sp, #16
 7146              		.cfi_def_cfa_offset 24
 7147 0004 00AF     		add	r7, sp, #0
 7148              		.cfi_def_cfa_register 7
 7149 0006 F860     		str	r0, [r7, #12]
 7150 0008 B960     		str	r1, [r7, #8]
 7151 000a 7A60     		str	r2, [r7, #4]
2070:main.c        ****     midiMsg[0] = USB_MIDI_POLY_KEY_PRESSURE + channel;
 7152              		.loc 1 2070 0
 7153 000c 7B68     		ldr	r3, [r7, #4]
 7154 000e DBB2     		uxtb	r3, r3
 7155 0010 603B     		subs	r3, r3, #96
 7156 0012 DAB2     		uxtb	r2, r3
 7157 0014 114B     		ldr	r3, .L313
 7158 0016 1A70     		strb	r2, [r3]
2071:main.c        ****     midiMsg[1] = MIDInoteNum;
 7159              		.loc 1 2071 0
 7160 0018 FB68     		ldr	r3, [r7, #12]
 7161 001a DAB2     		uxtb	r2, r3
 7162 001c 0F4B     		ldr	r3, .L313
 7163 001e 5A70     		strb	r2, [r3, #1]
2072:main.c        ****     midiMsg[2] = pressure;		
 7164              		.loc 1 2072 0
 7165 0020 BB68     		ldr	r3, [r7, #8]
 7166 0022 DAB2     		uxtb	r2, r3
 7167 0024 0D4B     		ldr	r3, .L313
 7168 0026 9A70     		strb	r2, [r3, #2]
2073:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 7169              		.loc 1 2073 0
 7170 0028 0D4B     		ldr	r3, .L313+4
 7171 002a 1B78     		ldrb	r3, [r3]
 7172 002c DBB2     		uxtb	r3, r3
 7173 002e 002B     		cmp	r3, #0
 7174 0030 09D0     		beq	.L312
 7175              		.loc 1 2073 0 is_stmt 0 discriminator 1
 7176 0032 FFF7FEFF 		bl	USB_VBusPresent
 7177 0036 0346     		mov	r3, r0
 7178 0038 002B     		cmp	r3, #0
 7179 003a 04D0     		beq	.L312
2074:main.c        ****     {
2075:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 7180              		.loc 1 2075 0 is_stmt 1
 7181 003c 0022     		movs	r2, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 165


 7182 003e 0749     		ldr	r1, .L313
 7183 0040 0320     		movs	r0, #3
 7184 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 7185              	.L312:
2076:main.c        ****     } 
2077:main.c        ****     midiSent += 4;
 7186              		.loc 1 2077 0
 7187 0046 074B     		ldr	r3, .L313+8
 7188 0048 1B88     		ldrh	r3, [r3]
 7189 004a 0433     		adds	r3, r3, #4
 7190 004c 9AB2     		uxth	r2, r3
 7191 004e 054B     		ldr	r3, .L313+8
 7192 0050 1A80     		strh	r2, [r3]	@ movhi
2078:main.c        **** }
 7193              		.loc 1 2078 0
 7194 0052 00BF     		nop
 7195 0054 1037     		adds	r7, r7, #16
 7196              		.cfi_def_cfa_offset 8
 7197 0056 BD46     		mov	sp, r7
 7198              		.cfi_def_cfa_register 13
 7199              		@ sp needed
 7200 0058 80BD     		pop	{r7, pc}
 7201              	.L314:
 7202 005a 00BF     		.align	2
 7203              	.L313:
 7204 005c 00000000 		.word	midiMsg
 7205 0060 00000000 		.word	USB_active
 7206 0064 00000000 		.word	midiSent
 7207              		.cfi_endproc
 7208              	.LFE88:
 7209              		.size	sendMIDIPolyKeyPressure, .-sendMIDIPolyKeyPressure
 7210              		.section	.text.sendMIDIControlChange,"ax",%progbits
 7211              		.align	2
 7212              		.global	sendMIDIControlChange
 7213              		.thumb
 7214              		.thumb_func
 7215              		.type	sendMIDIControlChange, %function
 7216              	sendMIDIControlChange:
 7217              	.LFB89:
2079:main.c        **** 
2080:main.c        **** void sendMIDIControlChange(int CCnum, int CCval, int channel)
2081:main.c        **** {
 7218              		.loc 1 2081 0
 7219              		.cfi_startproc
 7220              		@ args = 0, pretend = 0, frame = 16
 7221              		@ frame_needed = 1, uses_anonymous_args = 0
 7222 0000 80B5     		push	{r7, lr}
 7223              		.cfi_def_cfa_offset 8
 7224              		.cfi_offset 7, -8
 7225              		.cfi_offset 14, -4
 7226 0002 84B0     		sub	sp, sp, #16
 7227              		.cfi_def_cfa_offset 24
 7228 0004 00AF     		add	r7, sp, #0
 7229              		.cfi_def_cfa_register 7
 7230 0006 F860     		str	r0, [r7, #12]
 7231 0008 B960     		str	r1, [r7, #8]
 7232 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 166


2082:main.c        ****     midiMsg[0] = USB_MIDI_CONTROL_CHANGE + channel;
 7233              		.loc 1 2082 0
 7234 000c 7B68     		ldr	r3, [r7, #4]
 7235 000e DBB2     		uxtb	r3, r3
 7236 0010 503B     		subs	r3, r3, #80
 7237 0012 DAB2     		uxtb	r2, r3
 7238 0014 114B     		ldr	r3, .L317
 7239 0016 1A70     		strb	r2, [r3]
2083:main.c        ****     midiMsg[1] = CCnum;
 7240              		.loc 1 2083 0
 7241 0018 FB68     		ldr	r3, [r7, #12]
 7242 001a DAB2     		uxtb	r2, r3
 7243 001c 0F4B     		ldr	r3, .L317
 7244 001e 5A70     		strb	r2, [r3, #1]
2084:main.c        ****     midiMsg[2] = CCval;			
 7245              		.loc 1 2084 0
 7246 0020 BB68     		ldr	r3, [r7, #8]
 7247 0022 DAB2     		uxtb	r2, r3
 7248 0024 0D4B     		ldr	r3, .L317
 7249 0026 9A70     		strb	r2, [r3, #2]
2085:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 7250              		.loc 1 2085 0
 7251 0028 0D4B     		ldr	r3, .L317+4
 7252 002a 1B78     		ldrb	r3, [r3]
 7253 002c DBB2     		uxtb	r3, r3
 7254 002e 002B     		cmp	r3, #0
 7255 0030 09D0     		beq	.L316
 7256              		.loc 1 2085 0 is_stmt 0 discriminator 1
 7257 0032 FFF7FEFF 		bl	USB_VBusPresent
 7258 0036 0346     		mov	r3, r0
 7259 0038 002B     		cmp	r3, #0
 7260 003a 04D0     		beq	.L316
2086:main.c        ****     {
2087:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 7261              		.loc 1 2087 0 is_stmt 1
 7262 003c 0022     		movs	r2, #0
 7263 003e 0749     		ldr	r1, .L317
 7264 0040 0320     		movs	r0, #3
 7265 0042 FFF7FEFF 		bl	USB_PutUsbMidiIn
 7266              	.L316:
2088:main.c        ****     } 
2089:main.c        ****     midiSent += 4;
 7267              		.loc 1 2089 0
 7268 0046 074B     		ldr	r3, .L317+8
 7269 0048 1B88     		ldrh	r3, [r3]
 7270 004a 0433     		adds	r3, r3, #4
 7271 004c 9AB2     		uxth	r2, r3
 7272 004e 054B     		ldr	r3, .L317+8
 7273 0050 1A80     		strh	r2, [r3]	@ movhi
2090:main.c        **** }
 7274              		.loc 1 2090 0
 7275 0052 00BF     		nop
 7276 0054 1037     		adds	r7, r7, #16
 7277              		.cfi_def_cfa_offset 8
 7278 0056 BD46     		mov	sp, r7
 7279              		.cfi_def_cfa_register 13
 7280              		@ sp needed
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 167


 7281 0058 80BD     		pop	{r7, pc}
 7282              	.L318:
 7283 005a 00BF     		.align	2
 7284              	.L317:
 7285 005c 00000000 		.word	midiMsg
 7286 0060 00000000 		.word	USB_active
 7287 0064 00000000 		.word	midiSent
 7288              		.cfi_endproc
 7289              	.LFE89:
 7290              		.size	sendMIDIControlChange, .-sendMIDIControlChange
 7291              		.section	.text.sendMIDIPitchBend,"ax",%progbits
 7292              		.align	2
 7293              		.global	sendMIDIPitchBend
 7294              		.thumb
 7295              		.thumb_func
 7296              		.type	sendMIDIPitchBend, %function
 7297              	sendMIDIPitchBend:
 7298              	.LFB90:
2091:main.c        **** 
2092:main.c        **** void sendMIDIPitchBend(int val, int channel)
2093:main.c        **** {
 7299              		.loc 1 2093 0
 7300              		.cfi_startproc
 7301              		@ args = 0, pretend = 0, frame = 8
 7302              		@ frame_needed = 1, uses_anonymous_args = 0
 7303 0000 80B5     		push	{r7, lr}
 7304              		.cfi_def_cfa_offset 8
 7305              		.cfi_offset 7, -8
 7306              		.cfi_offset 14, -4
 7307 0002 82B0     		sub	sp, sp, #8
 7308              		.cfi_def_cfa_offset 16
 7309 0004 00AF     		add	r7, sp, #0
 7310              		.cfi_def_cfa_register 7
 7311 0006 7860     		str	r0, [r7, #4]
 7312 0008 3960     		str	r1, [r7]
2094:main.c        ****     midiMsg[0] = USB_MIDI_PITCH_BEND_CHANGE + channel;
 7313              		.loc 1 2094 0
 7314 000a 3B68     		ldr	r3, [r7]
 7315 000c DBB2     		uxtb	r3, r3
 7316 000e 203B     		subs	r3, r3, #32
 7317 0010 DAB2     		uxtb	r2, r3
 7318 0012 134B     		ldr	r3, .L321
 7319 0014 1A70     		strb	r2, [r3]
2095:main.c        ****     midiMsg[1] = (val & 127); //LSB
 7320              		.loc 1 2095 0
 7321 0016 7B68     		ldr	r3, [r7, #4]
 7322 0018 DBB2     		uxtb	r3, r3
 7323 001a 03F07F03 		and	r3, r3, #127
 7324 001e DAB2     		uxtb	r2, r3
 7325 0020 0F4B     		ldr	r3, .L321
 7326 0022 5A70     		strb	r2, [r3, #1]
2096:main.c        ****     midiMsg[2] = (val >> 7);	//MSB		
 7327              		.loc 1 2096 0
 7328 0024 7B68     		ldr	r3, [r7, #4]
 7329 0026 DB11     		asrs	r3, r3, #7
 7330 0028 DAB2     		uxtb	r2, r3
 7331 002a 0D4B     		ldr	r3, .L321
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 168


 7332 002c 9A70     		strb	r2, [r3, #2]
2097:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 7333              		.loc 1 2097 0
 7334 002e 0D4B     		ldr	r3, .L321+4
 7335 0030 1B78     		ldrb	r3, [r3]
 7336 0032 DBB2     		uxtb	r3, r3
 7337 0034 002B     		cmp	r3, #0
 7338 0036 09D0     		beq	.L320
 7339              		.loc 1 2097 0 is_stmt 0 discriminator 1
 7340 0038 FFF7FEFF 		bl	USB_VBusPresent
 7341 003c 0346     		mov	r3, r0
 7342 003e 002B     		cmp	r3, #0
 7343 0040 04D0     		beq	.L320
2098:main.c        ****     {
2099:main.c        ****         USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 7344              		.loc 1 2099 0 is_stmt 1
 7345 0042 0022     		movs	r2, #0
 7346 0044 0649     		ldr	r1, .L321
 7347 0046 0320     		movs	r0, #3
 7348 0048 FFF7FEFF 		bl	USB_PutUsbMidiIn
 7349              	.L320:
2100:main.c        ****     } 
2101:main.c        ****     midiSent += 4;
 7350              		.loc 1 2101 0
 7351 004c 064B     		ldr	r3, .L321+8
 7352 004e 1B88     		ldrh	r3, [r3]
 7353 0050 0433     		adds	r3, r3, #4
 7354 0052 9AB2     		uxth	r2, r3
 7355 0054 044B     		ldr	r3, .L321+8
 7356 0056 1A80     		strh	r2, [r3]	@ movhi
2102:main.c        **** }
 7357              		.loc 1 2102 0
 7358 0058 00BF     		nop
 7359 005a 0837     		adds	r7, r7, #8
 7360              		.cfi_def_cfa_offset 8
 7361 005c BD46     		mov	sp, r7
 7362              		.cfi_def_cfa_register 13
 7363              		@ sp needed
 7364 005e 80BD     		pop	{r7, pc}
 7365              	.L322:
 7366              		.align	2
 7367              	.L321:
 7368 0060 00000000 		.word	midiMsg
 7369 0064 00000000 		.word	USB_active
 7370 0068 00000000 		.word	midiSent
 7371              		.cfi_endproc
 7372              	.LFE90:
 7373              		.size	sendMIDIPitchBend, .-sendMIDIPitchBend
 7374              		.section	.text.sendMIDIAllNotesOff,"ax",%progbits
 7375              		.align	2
 7376              		.global	sendMIDIAllNotesOff
 7377              		.thumb
 7378              		.thumb_func
 7379              		.type	sendMIDIAllNotesOff, %function
 7380              	sendMIDIAllNotesOff:
 7381              	.LFB91:
2103:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 169


2104:main.c        **** void sendMIDIAllNotesOff(void)
2105:main.c        **** {   
 7382              		.loc 1 2105 0
 7383              		.cfi_startproc
 7384              		@ args = 0, pretend = 0, frame = 0
 7385              		@ frame_needed = 1, uses_anonymous_args = 0
 7386 0000 80B5     		push	{r7, lr}
 7387              		.cfi_def_cfa_offset 8
 7388              		.cfi_offset 7, -8
 7389              		.cfi_offset 14, -4
 7390 0002 00AF     		add	r7, sp, #0
 7391              		.cfi_def_cfa_register 7
2106:main.c        ****     for (i = 0; i < 128; i++)
 7392              		.loc 1 2106 0
 7393 0004 144B     		ldr	r3, .L327
 7394 0006 0022     		movs	r2, #0
 7395 0008 1A70     		strb	r2, [r3]
 7396 000a 1EE0     		b	.L324
 7397              	.L326:
2107:main.c        ****     {
2108:main.c        ****         midiMsg[0] = USB_MIDI_NOTE_ON;
 7398              		.loc 1 2108 0
 7399 000c 134B     		ldr	r3, .L327+4
 7400 000e 9022     		movs	r2, #144
 7401 0010 1A70     		strb	r2, [r3]
2109:main.c        ****         midiMsg[1] = i;
 7402              		.loc 1 2109 0
 7403 0012 114B     		ldr	r3, .L327
 7404 0014 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 7405 0016 114B     		ldr	r3, .L327+4
 7406 0018 5A70     		strb	r2, [r3, #1]
2110:main.c        ****         midiMsg[2] = 0;	
 7407              		.loc 1 2110 0
 7408 001a 104B     		ldr	r3, .L327+4
 7409 001c 0022     		movs	r2, #0
 7410 001e 9A70     		strb	r2, [r3, #2]
2111:main.c        ****         if ((USB_active) && (USB_VBusPresent()))
 7411              		.loc 1 2111 0
 7412 0020 0F4B     		ldr	r3, .L327+8
 7413 0022 1B78     		ldrb	r3, [r3]
 7414 0024 DBB2     		uxtb	r3, r3
 7415 0026 002B     		cmp	r3, #0
 7416 0028 09D0     		beq	.L325
 7417              		.loc 1 2111 0 is_stmt 0 discriminator 1
 7418 002a FFF7FEFF 		bl	USB_VBusPresent
 7419 002e 0346     		mov	r3, r0
 7420 0030 002B     		cmp	r3, #0
 7421 0032 04D0     		beq	.L325
2112:main.c        ****         {       
2113:main.c        ****             USB_PutUsbMidiIn(3u, midiMsg, USB_MIDI_CABLE_00);
 7422              		.loc 1 2113 0 is_stmt 1
 7423 0034 0022     		movs	r2, #0
 7424 0036 0949     		ldr	r1, .L327+4
 7425 0038 0320     		movs	r0, #3
 7426 003a FFF7FEFF 		bl	USB_PutUsbMidiIn
 7427              	.L325:
2106:main.c        ****     {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 170


 7428              		.loc 1 2106 0 discriminator 2
 7429 003e 064B     		ldr	r3, .L327
 7430 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7431 0042 0133     		adds	r3, r3, #1
 7432 0044 DAB2     		uxtb	r2, r3
 7433 0046 044B     		ldr	r3, .L327
 7434 0048 1A70     		strb	r2, [r3]
 7435              	.L324:
2106:main.c        ****     {
 7436              		.loc 1 2106 0 is_stmt 0 discriminator 1
 7437 004a 034B     		ldr	r3, .L327
 7438 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7439 004e 5BB2     		sxtb	r3, r3
 7440 0050 002B     		cmp	r3, #0
 7441 0052 DBDA     		bge	.L326
2114:main.c        ****         }
2115:main.c        ****     }
2116:main.c        **** }
 7442              		.loc 1 2116 0 is_stmt 1
 7443 0054 00BF     		nop
 7444 0056 80BD     		pop	{r7, pc}
 7445              	.L328:
 7446              		.align	2
 7447              	.L327:
 7448 0058 00000000 		.word	i
 7449 005c 00000000 		.word	midiMsg
 7450 0060 00000000 		.word	USB_active
 7451              		.cfi_endproc
 7452              	.LFE91:
 7453              		.size	sendMIDIAllNotesOff, .-sendMIDIAllNotesOff
 7454              		.global	checkStatus
 7455              		.bss
 7456              		.type	checkStatus, %object
 7457              		.size	checkStatus, 1
 7458              	checkStatus:
 7459 0108 00       		.space	1
 7460              		.global	checkBase
 7461 0109 00       		.align	1
 7462              		.type	checkBase, %object
 7463              		.size	checkBase, 2
 7464              	checkBase:
 7465 010a 0000     		.space	2
 7466              		.global	SPI_errors
 7467              		.align	2
 7468              		.type	SPI_errors, %object
 7469              		.size	SPI_errors, 4
 7470              	SPI_errors:
 7471 010c 00000000 		.space	4
 7472              		.section	.text.parseSysex,"ax",%progbits
 7473              		.align	2
 7474              		.global	parseSysex
 7475              		.thumb
 7476              		.thumb_func
 7477              		.type	parseSysex, %function
 7478              	parseSysex:
 7479              	.LFB92:
2117:main.c        **** 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 171


2118:main.c        **** 
2119:main.c        **** 
2120:main.c        **** 
2121:main.c        **** volatile uint8_t checkStatus = 0;
2122:main.c        **** volatile uint16_t checkBase = 0;
2123:main.c        **** 
2124:main.c        **** 
2125:main.c        **** 
2126:main.c        **** int SPI_errors = 0;
2127:main.c        **** 
2128:main.c        **** void parseSysex(void)
2129:main.c        **** {
 7480              		.loc 1 2129 0
 7481              		.cfi_startproc
 7482              		@ args = 0, pretend = 0, frame = 80
 7483              		@ frame_needed = 1, uses_anonymous_args = 0
 7484 0000 90B5     		push	{r4, r7, lr}
 7485              		.cfi_def_cfa_offset 12
 7486              		.cfi_offset 4, -12
 7487              		.cfi_offset 7, -8
 7488              		.cfi_offset 14, -4
 7489 0002 95B0     		sub	sp, sp, #84
 7490              		.cfi_def_cfa_offset 96
 7491 0004 00AF     		add	r7, sp, #0
 7492              		.cfi_def_cfa_register 7
2130:main.c        ****     parsingSysex = 1;
 7493              		.loc 1 2130 0
 7494 0006 8F4B     		ldr	r3, .L382
 7495 0008 0122     		movs	r2, #1
 7496 000a 1A70     		strb	r2, [r3]
2131:main.c        ****     //0 = it's a preset
2132:main.c        ****     if (sysexBuffer[0] == 0)
 7497              		.loc 1 2132 0
 7498 000c 8E4B     		ldr	r3, .L382+4
 7499 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7500 0010 002B     		cmp	r3, #0
 7501 0012 40F0E082 		bne	.L330
 7502              	.LBB39:
2133:main.c        ****     {
2134:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
 7503              		.loc 1 2134 0
 7504 0016 8D4B     		ldr	r3, .L382+8
 7505 0018 0122     		movs	r2, #1
 7506 001a 1A70     		strb	r2, [r3]
2135:main.c        ****         currentFloat = 0;
 7507              		.loc 1 2135 0
 7508 001c 8C4B     		ldr	r3, .L382+12
 7509 001e 0022     		movs	r2, #0
 7510 0020 1A60     		str	r2, [r3]
2136:main.c        ****         presetArraySection = presetName;
 7511              		.loc 1 2136 0
 7512 0022 8C4B     		ldr	r3, .L382+16
 7513 0024 0022     		movs	r2, #0
 7514 0026 1A70     		strb	r2, [r3]
2137:main.c        ****         presetNumberToWrite = sysexBuffer[1];
 7515              		.loc 1 2137 0
 7516 0028 874B     		ldr	r3, .L382+4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 172


 7517 002a 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 7518 002c 8A4B     		ldr	r3, .L382+20
 7519 002e 1A70     		strb	r2, [r3]
2138:main.c        ****         presetArray[0] = sysexBuffer[2];
 7520              		.loc 1 2138 0
 7521 0030 854B     		ldr	r3, .L382+4
 7522 0032 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 7523 0034 894B     		ldr	r3, .L382+24
 7524 0036 1A70     		strb	r2, [r3]
2139:main.c        ****         presetArray[1] = sysexBuffer[3];
 7525              		.loc 1 2139 0
 7526 0038 834B     		ldr	r3, .L382+4
 7527 003a DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 7528 003c 874B     		ldr	r3, .L382+24
 7529 003e 5A70     		strb	r2, [r3, #1]
2140:main.c        ****         presetArray[2] = sysexBuffer[4];
 7530              		.loc 1 2140 0
 7531 0040 814B     		ldr	r3, .L382+4
 7532 0042 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 7533 0044 854B     		ldr	r3, .L382+24
 7534 0046 9A70     		strb	r2, [r3, #2]
2141:main.c        ****         presetArray[3] = sysexBuffer[5];
 7535              		.loc 1 2141 0
 7536 0048 7F4B     		ldr	r3, .L382+4
 7537 004a 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 7538 004c 834B     		ldr	r3, .L382+24
 7539 004e DA70     		strb	r2, [r3, #3]
2142:main.c        ****         
2143:main.c        ****         union breakFloat theVal;
2144:main.c        ****         uint32_t i = 6;
 7540              		.loc 1 2144 0
 7541 0050 0623     		movs	r3, #6
 7542 0052 FB64     		str	r3, [r7, #76]
2145:main.c        ****         uint8_t stoppingPoint = NAME_LENGTH_IN_BYTES+6;
 7543              		.loc 1 2145 0
 7544 0054 1423     		movs	r3, #20
 7545 0056 87F83730 		strb	r3, [r7, #55]
2146:main.c        ****         for (; i < stoppingPoint; i++)
 7546              		.loc 1 2146 0
 7547 005a 22E0     		b	.L331
 7548              	.L332:
2147:main.c        ****         {
2148:main.c        ****             presetArray[i-2] = sysexBuffer[i] & 127; // pass on the first 14 elements as 8-bit byte
 7549              		.loc 1 2148 0 discriminator 2
 7550 005c FB6C     		ldr	r3, [r7, #76]
 7551 005e 023B     		subs	r3, r3, #2
 7552 0060 7949     		ldr	r1, .L382+4
 7553 0062 FA6C     		ldr	r2, [r7, #76]
 7554 0064 0A44     		add	r2, r2, r1
 7555 0066 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7556 0068 02F07F02 		and	r2, r2, #127
 7557 006c D1B2     		uxtb	r1, r2
 7558 006e 7B4A     		ldr	r2, .L382+24
 7559 0070 D154     		strb	r1, [r2, r3]
2149:main.c        ****             presetNamesArray[presetNumberToWrite][i-6] = sysexBuffer[i] & 127;
 7560              		.loc 1 2149 0 discriminator 2
 7561 0072 794B     		ldr	r3, .L382+20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 173


 7562 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7563 0076 1846     		mov	r0, r3
 7564 0078 FB6C     		ldr	r3, [r7, #76]
 7565 007a 9A1F     		subs	r2, r3, #6
 7566 007c 7249     		ldr	r1, .L382+4
 7567 007e FB6C     		ldr	r3, [r7, #76]
 7568 0080 0B44     		add	r3, r3, r1
 7569 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7570 0084 03F07F03 		and	r3, r3, #127
 7571 0088 DCB2     		uxtb	r4, r3
 7572 008a 7549     		ldr	r1, .L382+28
 7573 008c 0346     		mov	r3, r0
 7574 008e DB00     		lsls	r3, r3, #3
 7575 0090 1B1A     		subs	r3, r3, r0
 7576 0092 5B00     		lsls	r3, r3, #1
 7577 0094 0B44     		add	r3, r3, r1
 7578 0096 1344     		add	r3, r3, r2
 7579 0098 2246     		mov	r2, r4
 7580 009a 1A70     		strb	r2, [r3]
2146:main.c        ****         for (; i < stoppingPoint; i++)
 7581              		.loc 1 2146 0 discriminator 2
 7582 009c FB6C     		ldr	r3, [r7, #76]
 7583 009e 0133     		adds	r3, r3, #1
 7584 00a0 FB64     		str	r3, [r7, #76]
 7585              	.L331:
2146:main.c        ****         for (; i < stoppingPoint; i++)
 7586              		.loc 1 2146 0 is_stmt 0 discriminator 1
 7587 00a2 97F83720 		ldrb	r2, [r7, #55]	@ zero_extendqisi2
 7588 00a6 FB6C     		ldr	r3, [r7, #76]
 7589 00a8 9A42     		cmp	r2, r3
 7590 00aa D7D8     		bhi	.L332
2150:main.c        ****         }
2151:main.c        ****         
2152:main.c        ****         presetArraySection = macroNames;
 7591              		.loc 1 2152 0 is_stmt 1
 7592 00ac 694B     		ldr	r3, .L382+16
 7593 00ae 0122     		movs	r2, #1
 7594 00b0 1A70     		strb	r2, [r3]
 7595              	.LBB40:
2153:main.c        **** 
2154:main.c        ****         
2155:main.c        ****         for (int j = 0; j < NUM_MACROS; j++)
 7596              		.loc 1 2155 0
 7597 00b2 0023     		movs	r3, #0
 7598 00b4 BB64     		str	r3, [r7, #72]
 7599 00b6 34E0     		b	.L333
 7600              	.L336:
 7601              	.LBB41:
2156:main.c        ****         {
2157:main.c        ****             for (int k = 0; k < NAME_LENGTH_IN_BYTES; k++)
 7602              		.loc 1 2157 0
 7603 00b8 0023     		movs	r3, #0
 7604 00ba 7B64     		str	r3, [r7, #68]
 7605 00bc 2BE0     		b	.L334
 7606              	.L335:
2158:main.c        ****             {
2159:main.c        ****                 presetArray[i-2] = sysexBuffer[i] & 127; // pass on the first 14 elements as 8-bit 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 174


 7607              		.loc 1 2159 0 discriminator 3
 7608 00be FB6C     		ldr	r3, [r7, #76]
 7609 00c0 023B     		subs	r3, r3, #2
 7610 00c2 6149     		ldr	r1, .L382+4
 7611 00c4 FA6C     		ldr	r2, [r7, #76]
 7612 00c6 0A44     		add	r2, r2, r1
 7613 00c8 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7614 00ca 02F07F02 		and	r2, r2, #127
 7615 00ce D1B2     		uxtb	r1, r2
 7616 00d0 624A     		ldr	r2, .L382+24
 7617 00d2 D154     		strb	r1, [r2, r3]
2160:main.c        ****                 macroNamesArray[presetNumberToWrite][j][k] = sysexBuffer[i] & 127; // pass on the f
 7618              		.loc 1 2160 0 discriminator 3
 7619 00d4 604B     		ldr	r3, .L382+20
 7620 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7621 00d8 1846     		mov	r0, r3
 7622 00da 5B4A     		ldr	r2, .L382+4
 7623 00dc FB6C     		ldr	r3, [r7, #76]
 7624 00de 1344     		add	r3, r3, r2
 7625 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7626 00e2 03F07F03 		and	r3, r3, #127
 7627 00e6 DCB2     		uxtb	r4, r3
 7628 00e8 5E49     		ldr	r1, .L382+32
 7629 00ea BB6C     		ldr	r3, [r7, #72]
 7630 00ec 1A46     		mov	r2, r3
 7631 00ee D200     		lsls	r2, r2, #3
 7632 00f0 D21A     		subs	r2, r2, r3
 7633 00f2 5300     		lsls	r3, r2, #1
 7634 00f4 1A46     		mov	r2, r3
 7635 00f6 0346     		mov	r3, r0
 7636 00f8 DB00     		lsls	r3, r3, #3
 7637 00fa 1B1A     		subs	r3, r3, r0
 7638 00fc 1B01     		lsls	r3, r3, #4
 7639 00fe 1344     		add	r3, r3, r2
 7640 0100 CA18     		adds	r2, r1, r3
 7641 0102 7B6C     		ldr	r3, [r7, #68]
 7642 0104 1344     		add	r3, r3, r2
 7643 0106 2246     		mov	r2, r4
 7644 0108 1A70     		strb	r2, [r3]
2161:main.c        ****                 i++;
 7645              		.loc 1 2161 0 discriminator 3
 7646 010a FB6C     		ldr	r3, [r7, #76]
 7647 010c 0133     		adds	r3, r3, #1
 7648 010e FB64     		str	r3, [r7, #76]
2157:main.c        ****             {
 7649              		.loc 1 2157 0 discriminator 3
 7650 0110 7B6C     		ldr	r3, [r7, #68]
 7651 0112 0133     		adds	r3, r3, #1
 7652 0114 7B64     		str	r3, [r7, #68]
 7653              	.L334:
2157:main.c        ****             {
 7654              		.loc 1 2157 0 is_stmt 0 discriminator 1
 7655 0116 7B6C     		ldr	r3, [r7, #68]
 7656 0118 0D2B     		cmp	r3, #13
 7657 011a D0DD     		ble	.L335
 7658              	.LBE41:
2155:main.c        ****         {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 175


 7659              		.loc 1 2155 0 is_stmt 1 discriminator 2
 7660 011c BB6C     		ldr	r3, [r7, #72]
 7661 011e 0133     		adds	r3, r3, #1
 7662 0120 BB64     		str	r3, [r7, #72]
 7663              	.L333:
2155:main.c        ****         {
 7664              		.loc 1 2155 0 is_stmt 0 discriminator 1
 7665 0122 BB6C     		ldr	r3, [r7, #72]
 7666 0124 072B     		cmp	r3, #7
 7667 0126 C7DD     		ble	.L336
 7668              	.LBE40:
2162:main.c        ****             }
2163:main.c        ****         }
2164:main.c        ****         
2165:main.c        ****         uint16_t valsStart = 4 + NAME_LENGTH_IN_BYTES + (NAME_LENGTH_IN_BYTES * NUM_MACROS);
 7669              		.loc 1 2165 0 is_stmt 1
 7670 0128 8223     		movs	r3, #130
 7671 012a BB86     		strh	r3, [r7, #52]	@ movhi
2166:main.c        ****         
2167:main.c        ****         presetArraySection = initialVals;
 7672              		.loc 1 2167 0
 7673 012c 494B     		ldr	r3, .L382+16
 7674 012e 0222     		movs	r2, #2
 7675 0130 1A70     		strb	r2, [r3]
2168:main.c        ****         
2169:main.c        ****         for (; i < sysexPointer; i = i+5)
 7676              		.loc 1 2169 0
 7677 0132 49E2     		b	.L337
 7678              	.L359:
2170:main.c        ****         {
2171:main.c        ****             theVal.u32 = 0;
 7679              		.loc 1 2171 0
 7680 0134 0023     		movs	r3, #0
 7681 0136 3B61     		str	r3, [r7, #16]
2172:main.c        ****             theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 7682              		.loc 1 2172 0
 7683 0138 3B69     		ldr	r3, [r7, #16]
 7684 013a 4349     		ldr	r1, .L382+4
 7685 013c FA6C     		ldr	r2, [r7, #76]
 7686 013e 0A44     		add	r2, r2, r1
 7687 0140 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 7688 0142 1207     		lsls	r2, r2, #28
 7689 0144 1343     		orrs	r3, r3, r2
 7690 0146 3B61     		str	r3, [r7, #16]
2173:main.c        ****             theVal.u32 |= (sysexBuffer[i+1] << 21);
 7691              		.loc 1 2173 0
 7692 0148 3B69     		ldr	r3, [r7, #16]
 7693 014a FA6C     		ldr	r2, [r7, #76]
 7694 014c 0132     		adds	r2, r2, #1
 7695 014e 3E49     		ldr	r1, .L382+4
 7696 0150 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7697 0152 5205     		lsls	r2, r2, #21
 7698 0154 1343     		orrs	r3, r3, r2
 7699 0156 3B61     		str	r3, [r7, #16]
2174:main.c        ****             theVal.u32 |= (sysexBuffer[i+2] << 14);
 7700              		.loc 1 2174 0
 7701 0158 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 176


 7702 015a FA6C     		ldr	r2, [r7, #76]
 7703 015c 0232     		adds	r2, r2, #2
 7704 015e 3A49     		ldr	r1, .L382+4
 7705 0160 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7706 0162 9203     		lsls	r2, r2, #14
 7707 0164 1343     		orrs	r3, r3, r2
 7708 0166 3B61     		str	r3, [r7, #16]
2175:main.c        ****             theVal.u32 |= (sysexBuffer[i+3] << 7);
 7709              		.loc 1 2175 0
 7710 0168 3B69     		ldr	r3, [r7, #16]
 7711 016a FA6C     		ldr	r2, [r7, #76]
 7712 016c 0332     		adds	r2, r2, #3
 7713 016e 3649     		ldr	r1, .L382+4
 7714 0170 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 7715 0172 D201     		lsls	r2, r2, #7
 7716 0174 1343     		orrs	r3, r3, r2
 7717 0176 3B61     		str	r3, [r7, #16]
2176:main.c        ****             theVal.u32 |= (sysexBuffer[i+4] & 127);
 7718              		.loc 1 2176 0
 7719 0178 3A69     		ldr	r2, [r7, #16]
 7720 017a FB6C     		ldr	r3, [r7, #76]
 7721 017c 0433     		adds	r3, r3, #4
 7722 017e 3249     		ldr	r1, .L382+4
 7723 0180 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 7724 0182 03F07F03 		and	r3, r3, #127
 7725 0186 1343     		orrs	r3, r3, r2
 7726 0188 3B61     		str	r3, [r7, #16]
2177:main.c        ****             testVal = theVal.f;
 7727              		.loc 1 2177 0
 7728 018a 3B69     		ldr	r3, [r7, #16]	@ float
 7729 018c 364A     		ldr	r2, .L382+36
 7730 018e 1360     		str	r3, [r2]	@ float
2178:main.c        ****             if (presetArraySection == initialVals)
 7731              		.loc 1 2178 0
 7732 0190 304B     		ldr	r3, .L382+16
 7733 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7734 0194 022B     		cmp	r3, #2
 7735 0196 40F0B980 		bne	.L338
2179:main.c        ****             {
2180:main.c        **** 
2181:main.c        ****                 if (currentFloat == 0)
 7736              		.loc 1 2181 0
 7737 019a 2D4B     		ldr	r3, .L382+12
 7738 019c 1B68     		ldr	r3, [r3]
 7739 019e 002B     		cmp	r3, #0
 7740 01a0 22D1     		bne	.L339
2182:main.c        ****                 {
2183:main.c        ****                     valsCount = (uint16_t) theVal.f;
 7741              		.loc 1 2183 0
 7742 01a2 3B69     		ldr	r3, [r7, #16]	@ float
 7743 01a4 1846     		mov	r0, r3
 7744 01a6 FFF7FEFF 		bl	__aeabi_f2uiz
 7745 01aa 0346     		mov	r3, r0
 7746 01ac 9AB2     		uxth	r2, r3
 7747 01ae 2F4B     		ldr	r3, .L382+40
 7748 01b0 1A80     		strh	r2, [r3]	@ movhi
2184:main.c        ****                     presetArray[valsStart + currentFloat++] = valsCount >> 8;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 177


 7749              		.loc 1 2184 0
 7750 01b2 BA8E     		ldrh	r2, [r7, #52]
 7751 01b4 264B     		ldr	r3, .L382+12
 7752 01b6 1B68     		ldr	r3, [r3]
 7753 01b8 591C     		adds	r1, r3, #1
 7754 01ba 2548     		ldr	r0, .L382+12
 7755 01bc 0160     		str	r1, [r0]
 7756 01be 1344     		add	r3, r3, r2
 7757 01c0 2A4A     		ldr	r2, .L382+40
 7758 01c2 1288     		ldrh	r2, [r2]
 7759 01c4 120A     		lsrs	r2, r2, #8
 7760 01c6 92B2     		uxth	r2, r2
 7761 01c8 D1B2     		uxtb	r1, r2
 7762 01ca 244A     		ldr	r2, .L382+24
 7763 01cc D154     		strb	r1, [r2, r3]
2185:main.c        ****                     presetArray[valsStart + currentFloat++] = valsCount & 0xff;
 7764              		.loc 1 2185 0
 7765 01ce BA8E     		ldrh	r2, [r7, #52]
 7766 01d0 1F4B     		ldr	r3, .L382+12
 7767 01d2 1B68     		ldr	r3, [r3]
 7768 01d4 591C     		adds	r1, r3, #1
 7769 01d6 1E48     		ldr	r0, .L382+12
 7770 01d8 0160     		str	r1, [r0]
 7771 01da 1344     		add	r3, r3, r2
 7772 01dc 234A     		ldr	r2, .L382+40
 7773 01de 1288     		ldrh	r2, [r2]
 7774 01e0 D1B2     		uxtb	r1, r2
 7775 01e2 1E4A     		ldr	r2, .L382+24
 7776 01e4 D154     		strb	r1, [r2, r3]
 7777 01e6 ECE1     		b	.L345
 7778              	.L339:
2186:main.c        ****                 }
2187:main.c        ****                 else if (currentFloat < ((valsCount+1)*2))
 7779              		.loc 1 2187 0
 7780 01e8 204B     		ldr	r3, .L382+40
 7781 01ea 1B88     		ldrh	r3, [r3]
 7782 01ec 0133     		adds	r3, r3, #1
 7783 01ee 5B00     		lsls	r3, r3, #1
 7784 01f0 1A46     		mov	r2, r3
 7785 01f2 174B     		ldr	r3, .L382+12
 7786 01f4 1B68     		ldr	r3, [r3]
 7787 01f6 9A42     		cmp	r2, r3
 7788 01f8 3CD9     		bls	.L341
 7789              	.LBB42:
2188:main.c        ****                 { 
2189:main.c        ****                     uint16_t intVal = (uint16_t)(theVal.f * 65535.0f);
 7790              		.loc 1 2189 0
 7791 01fa 3B69     		ldr	r3, [r7, #16]	@ float
 7792 01fc 1C49     		ldr	r1, .L382+44
 7793 01fe 1846     		mov	r0, r3
 7794 0200 FFF7FEFF 		bl	__aeabi_fmul
 7795 0204 0346     		mov	r3, r0
 7796 0206 1846     		mov	r0, r3
 7797 0208 FFF7FEFF 		bl	__aeabi_f2uiz
 7798 020c 0346     		mov	r3, r0
 7799 020e 7B86     		strh	r3, [r7, #50]	@ movhi
2190:main.c        ****                     presetArray[valsStart + currentFloat++] = intVal >> 8;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 178


 7800              		.loc 1 2190 0
 7801 0210 BA8E     		ldrh	r2, [r7, #52]
 7802 0212 0F4B     		ldr	r3, .L382+12
 7803 0214 1B68     		ldr	r3, [r3]
 7804 0216 591C     		adds	r1, r3, #1
 7805 0218 0D48     		ldr	r0, .L382+12
 7806 021a 0160     		str	r1, [r0]
 7807 021c 1344     		add	r3, r3, r2
 7808 021e 7A8E     		ldrh	r2, [r7, #50]
 7809 0220 120A     		lsrs	r2, r2, #8
 7810 0222 92B2     		uxth	r2, r2
 7811 0224 D1B2     		uxtb	r1, r2
 7812 0226 0D4A     		ldr	r2, .L382+24
 7813 0228 D154     		strb	r1, [r2, r3]
2191:main.c        ****                     presetArray[valsStart + currentFloat++] = intVal & 0xff;
 7814              		.loc 1 2191 0
 7815 022a BA8E     		ldrh	r2, [r7, #52]
 7816 022c 084B     		ldr	r3, .L382+12
 7817 022e 1B68     		ldr	r3, [r3]
 7818 0230 591C     		adds	r1, r3, #1
 7819 0232 0748     		ldr	r0, .L382+12
 7820 0234 0160     		str	r1, [r0]
 7821 0236 1344     		add	r3, r3, r2
 7822 0238 7A8E     		ldrh	r2, [r7, #50]	@ movhi
 7823 023a D1B2     		uxtb	r1, r2
 7824 023c 074A     		ldr	r2, .L382+24
 7825 023e D154     		strb	r1, [r2, r3]
 7826              	.LBE42:
 7827 0240 BFE1     		b	.L345
 7828              	.L383:
 7829 0242 00BF     		.align	2
 7830              	.L382:
 7831 0244 00000000 		.word	parsingSysex
 7832 0248 00000000 		.word	sysexBuffer
 7833 024c 00000000 		.word	sysexMessageInProgress
 7834 0250 00000000 		.word	currentFloat
 7835 0254 00000000 		.word	presetArraySection
 7836 0258 00000000 		.word	presetNumberToWrite
 7837 025c 00000000 		.word	presetArray
 7838 0260 00000000 		.word	presetNamesArray
 7839 0264 00000000 		.word	macroNamesArray
 7840 0268 00000000 		.word	testVal
 7841 026c 00000000 		.word	valsCount
 7842 0270 00FF7F47 		.word	1199570688
 7843              	.L341:
2192:main.c        ****                 }
2193:main.c        ****                 else if (currentFloat == ((valsCount+1)*2))
 7844              		.loc 1 2193 0
 7845 0274 9C4B     		ldr	r3, .L384
 7846 0276 1B88     		ldrh	r3, [r3]
 7847 0278 0133     		adds	r3, r3, #1
 7848 027a 5B00     		lsls	r3, r3, #1
 7849 027c 1A46     		mov	r2, r3
 7850 027e 9B4B     		ldr	r3, .L384+4
 7851 0280 1B68     		ldr	r3, [r3]
 7852 0282 9A42     		cmp	r2, r3
 7853 0284 40F09D81 		bne	.L345
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 179


2194:main.c        ****                 {
2195:main.c        ****                     valCheck = theVal.f;
 7854              		.loc 1 2195 0
 7855 0288 3B69     		ldr	r3, [r7, #16]	@ float
 7856 028a 994A     		ldr	r2, .L384+8
 7857 028c 1360     		str	r3, [r2]	@ float
2196:main.c        ****                     if ((valCheck < -1.5f) && (valCheck > -2.5f))
 7858              		.loc 1 2196 0
 7859 028e 984B     		ldr	r3, .L384+8
 7860 0290 1B68     		ldr	r3, [r3]	@ float
 7861 0292 9849     		ldr	r1, .L384+12
 7862 0294 1846     		mov	r0, r3
 7863 0296 FFF7FEFF 		bl	__aeabi_fcmplt
 7864 029a 0346     		mov	r3, r0
 7865 029c 002B     		cmp	r3, #0
 7866 029e 23D0     		beq	.L342
 7867              		.loc 1 2196 0 is_stmt 0 discriminator 1
 7868 02a0 934B     		ldr	r3, .L384+8
 7869 02a2 1B68     		ldr	r3, [r3]	@ float
 7870 02a4 9449     		ldr	r1, .L384+16
 7871 02a6 1846     		mov	r0, r3
 7872 02a8 FFF7FEFF 		bl	__aeabi_fcmpgt
 7873 02ac 0346     		mov	r3, r0
 7874 02ae 002B     		cmp	r3, #0
 7875 02b0 1AD0     		beq	.L342
2197:main.c        ****                     {
2198:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xef;
 7876              		.loc 1 2198 0 is_stmt 1
 7877 02b2 BA8E     		ldrh	r2, [r7, #52]
 7878 02b4 8D4B     		ldr	r3, .L384+4
 7879 02b6 1B68     		ldr	r3, [r3]
 7880 02b8 591C     		adds	r1, r3, #1
 7881 02ba 8C48     		ldr	r0, .L384+4
 7882 02bc 0160     		str	r1, [r0]
 7883 02be 1344     		add	r3, r3, r2
 7884 02c0 8E4A     		ldr	r2, .L384+20
 7885 02c2 EF21     		movs	r1, #239
 7886 02c4 D154     		strb	r1, [r2, r3]
2199:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xef;
 7887              		.loc 1 2199 0
 7888 02c6 BA8E     		ldrh	r2, [r7, #52]
 7889 02c8 884B     		ldr	r3, .L384+4
 7890 02ca 1B68     		ldr	r3, [r3]
 7891 02cc 591C     		adds	r1, r3, #1
 7892 02ce 8748     		ldr	r0, .L384+4
 7893 02d0 0160     		str	r1, [r0]
 7894 02d2 1344     		add	r3, r3, r2
 7895 02d4 894A     		ldr	r2, .L384+20
 7896 02d6 EF21     		movs	r1, #239
 7897 02d8 D154     		strb	r1, [r2, r3]
2200:main.c        ****                         presetArraySection = mapCountNext;
 7898              		.loc 1 2200 0
 7899 02da 894B     		ldr	r3, .L384+24
 7900 02dc 0322     		movs	r2, #3
 7901 02de 1A70     		strb	r2, [r3]
2201:main.c        ****                         mapCount = 0;
 7902              		.loc 1 2201 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 180


 7903 02e0 884B     		ldr	r3, .L384+28
 7904 02e2 0022     		movs	r2, #0
 7905 02e4 1A60     		str	r2, [r3]
 7906 02e6 6CE1     		b	.L345
 7907              	.L342:
2202:main.c        ****                     }
2203:main.c        ****                     else
2204:main.c        ****                     {
2205:main.c        ****                         //error state
2206:main.c        ****                         SPI_errors++;
 7908              		.loc 1 2206 0
 7909 02e8 874B     		ldr	r3, .L384+32
 7910 02ea 1B68     		ldr	r3, [r3]
 7911 02ec 0133     		adds	r3, r3, #1
 7912 02ee 864A     		ldr	r2, .L384+32
 7913 02f0 1360     		str	r3, [r2]
2207:main.c        ****                         sysexMessageInProgress = 0;
 7914              		.loc 1 2207 0
 7915 02f2 864B     		ldr	r3, .L384+36
 7916 02f4 0022     		movs	r2, #0
 7917 02f6 1A70     		strb	r2, [r3]
2208:main.c        ****                         sysexPointer = 0;
 7918              		.loc 1 2208 0
 7919 02f8 854B     		ldr	r3, .L384+40
 7920 02fa 0022     		movs	r2, #0
 7921 02fc 1A60     		str	r2, [r3]
2209:main.c        ****                         sendingMessage = 0;
 7922              		.loc 1 2209 0
 7923 02fe 854B     		ldr	r3, .L384+44
 7924 0300 0022     		movs	r2, #0
 7925 0302 1A70     		strb	r2, [r3]
2210:main.c        ****                         parseThatMF = 0;
 7926              		.loc 1 2210 0
 7927 0304 844B     		ldr	r3, .L384+48
 7928 0306 0022     		movs	r2, #0
 7929 0308 1A70     		strb	r2, [r3]
 7930 030a 5AE1     		b	.L345
 7931              	.L338:
2211:main.c        ****                     }
2212:main.c        ****                 }
2213:main.c        ****             }
2214:main.c        ****             else if (presetArraySection == mapCountNext)
 7932              		.loc 1 2214 0
 7933 030c 7C4B     		ldr	r3, .L384+24
 7934 030e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7935 0310 032B     		cmp	r3, #3
 7936 0312 28D1     		bne	.L346
2215:main.c        ****             {
2216:main.c        ****                 mapCountExpectation = (uint16_t)theVal.f;
 7937              		.loc 1 2216 0
 7938 0314 3B69     		ldr	r3, [r7, #16]	@ float
 7939 0316 1846     		mov	r0, r3
 7940 0318 FFF7FEFF 		bl	__aeabi_f2uiz
 7941 031c 0346     		mov	r3, r0
 7942 031e 9AB2     		uxth	r2, r3
 7943 0320 7E4B     		ldr	r3, .L384+52
 7944 0322 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 181


2217:main.c        ****                 presetArray[valsStart + currentFloat++] = mapCountExpectation >> 8;
 7945              		.loc 1 2217 0
 7946 0324 BA8E     		ldrh	r2, [r7, #52]
 7947 0326 714B     		ldr	r3, .L384+4
 7948 0328 1B68     		ldr	r3, [r3]
 7949 032a 591C     		adds	r1, r3, #1
 7950 032c 6F48     		ldr	r0, .L384+4
 7951 032e 0160     		str	r1, [r0]
 7952 0330 1344     		add	r3, r3, r2
 7953 0332 7A4A     		ldr	r2, .L384+52
 7954 0334 1288     		ldrh	r2, [r2]
 7955 0336 120A     		lsrs	r2, r2, #8
 7956 0338 92B2     		uxth	r2, r2
 7957 033a D1B2     		uxtb	r1, r2
 7958 033c 6F4A     		ldr	r2, .L384+20
 7959 033e D154     		strb	r1, [r2, r3]
2218:main.c        ****                 presetArray[valsStart + currentFloat++] = mapCountExpectation & 0xff;
 7960              		.loc 1 2218 0
 7961 0340 BA8E     		ldrh	r2, [r7, #52]
 7962 0342 6A4B     		ldr	r3, .L384+4
 7963 0344 1B68     		ldr	r3, [r3]
 7964 0346 591C     		adds	r1, r3, #1
 7965 0348 6848     		ldr	r0, .L384+4
 7966 034a 0160     		str	r1, [r0]
 7967 034c 1344     		add	r3, r3, r2
 7968 034e 734A     		ldr	r2, .L384+52
 7969 0350 1288     		ldrh	r2, [r2]
 7970 0352 D1B2     		uxtb	r1, r2
 7971 0354 694A     		ldr	r2, .L384+20
 7972 0356 D154     		strb	r1, [r2, r3]
2219:main.c        ****                 presetArraySection = mapping;
 7973              		.loc 1 2219 0
 7974 0358 694B     		ldr	r3, .L384+24
 7975 035a 0422     		movs	r2, #4
 7976 035c 1A70     		strb	r2, [r3]
2220:main.c        ****                 numMappings = 0;
 7977              		.loc 1 2220 0
 7978 035e 704B     		ldr	r3, .L384+56
 7979 0360 0022     		movs	r2, #0
 7980 0362 1A80     		strh	r2, [r3]	@ movhi
 7981 0364 2DE1     		b	.L345
 7982              	.L346:
2221:main.c        ****             }
2222:main.c        ****             else if (presetArraySection == mapping)
 7983              		.loc 1 2222 0
 7984 0366 664B     		ldr	r3, .L384+24
 7985 0368 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 7986 036a 042B     		cmp	r3, #4
 7987 036c 40F02981 		bne	.L345
2223:main.c        ****             {
2224:main.c        ****                 // this is the order
2225:main.c        ****                 // source (int), target (int), scalarSource (arrives as -1.0f if no scalar, send as
2226:main.c        ****                 if (numMappings < mapCountExpectation)
 7988              		.loc 1 2226 0
 7989 0370 6B4B     		ldr	r3, .L384+56
 7990 0372 1A88     		ldrh	r2, [r3]
 7991 0374 694B     		ldr	r3, .L384+52
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 182


 7992 0376 1B88     		ldrh	r3, [r3]
 7993 0378 9A42     		cmp	r2, r3
 7994 037a 80F0D780 		bcs	.L347
2227:main.c        ****                 {
2228:main.c        ****                     if ((mapCount % 5) == 0)
 7995              		.loc 1 2228 0
 7996 037e 614B     		ldr	r3, .L384+28
 7997 0380 1968     		ldr	r1, [r3]
 7998 0382 684B     		ldr	r3, .L384+60
 7999 0384 A3FB0123 		umull	r2, r3, r3, r1
 8000 0388 9A08     		lsrs	r2, r3, #2
 8001 038a 1346     		mov	r3, r2
 8002 038c 9B00     		lsls	r3, r3, #2
 8003 038e 1344     		add	r3, r3, r2
 8004 0390 CA1A     		subs	r2, r1, r3
 8005 0392 002A     		cmp	r2, #0
 8006 0394 0FD1     		bne	.L348
2229:main.c        ****                     {
2230:main.c        ****                         presetArray[valsStart + currentFloat++] = (uint8_t)theVal.f;
 8007              		.loc 1 2230 0
 8008 0396 BA8E     		ldrh	r2, [r7, #52]
 8009 0398 544B     		ldr	r3, .L384+4
 8010 039a 1B68     		ldr	r3, [r3]
 8011 039c 591C     		adds	r1, r3, #1
 8012 039e 5348     		ldr	r0, .L384+4
 8013 03a0 0160     		str	r1, [r0]
 8014 03a2 D418     		adds	r4, r2, r3
 8015 03a4 3B69     		ldr	r3, [r7, #16]	@ float
 8016 03a6 1846     		mov	r0, r3
 8017 03a8 FFF7FEFF 		bl	__aeabi_f2uiz
 8018 03ac 0346     		mov	r3, r0
 8019 03ae DAB2     		uxtb	r2, r3
 8020 03b0 524B     		ldr	r3, .L384+20
 8021 03b2 1A55     		strb	r2, [r3, r4]
 8022 03b4 91E0     		b	.L349
 8023              	.L348:
2231:main.c        ****                     }
2232:main.c        ****                     else if  (mapCount % 5 == 1)
 8024              		.loc 1 2232 0
 8025 03b6 534B     		ldr	r3, .L384+28
 8026 03b8 1968     		ldr	r1, [r3]
 8027 03ba 5A4B     		ldr	r3, .L384+60
 8028 03bc A3FB0123 		umull	r2, r3, r3, r1
 8029 03c0 9A08     		lsrs	r2, r3, #2
 8030 03c2 1346     		mov	r3, r2
 8031 03c4 9B00     		lsls	r3, r3, #2
 8032 03c6 1344     		add	r3, r3, r2
 8033 03c8 CA1A     		subs	r2, r1, r3
 8034 03ca 012A     		cmp	r2, #1
 8035 03cc 0FD1     		bne	.L350
2233:main.c        ****                     {
2234:main.c        ****                         presetArray[valsStart + currentFloat++] = (uint8_t)theVal.f;
 8036              		.loc 1 2234 0
 8037 03ce BA8E     		ldrh	r2, [r7, #52]
 8038 03d0 464B     		ldr	r3, .L384+4
 8039 03d2 1B68     		ldr	r3, [r3]
 8040 03d4 591C     		adds	r1, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 183


 8041 03d6 4548     		ldr	r0, .L384+4
 8042 03d8 0160     		str	r1, [r0]
 8043 03da D418     		adds	r4, r2, r3
 8044 03dc 3B69     		ldr	r3, [r7, #16]	@ float
 8045 03de 1846     		mov	r0, r3
 8046 03e0 FFF7FEFF 		bl	__aeabi_f2uiz
 8047 03e4 0346     		mov	r3, r0
 8048 03e6 DAB2     		uxtb	r2, r3
 8049 03e8 444B     		ldr	r3, .L384+20
 8050 03ea 1A55     		strb	r2, [r3, r4]
 8051 03ec 75E0     		b	.L349
 8052              	.L350:
2235:main.c        ****                     }
2236:main.c        ****                     else if (mapCount % 5 == 2) //check if the scalar source is -1 (if so send 255 
 8053              		.loc 1 2236 0
 8054 03ee 454B     		ldr	r3, .L384+28
 8055 03f0 1968     		ldr	r1, [r3]
 8056 03f2 4C4B     		ldr	r3, .L384+60
 8057 03f4 A3FB0123 		umull	r2, r3, r3, r1
 8058 03f8 9A08     		lsrs	r2, r3, #2
 8059 03fa 1346     		mov	r3, r2
 8060 03fc 9B00     		lsls	r3, r3, #2
 8061 03fe 1344     		add	r3, r3, r2
 8062 0400 CA1A     		subs	r2, r1, r3
 8063 0402 022A     		cmp	r2, #2
 8064 0404 23D1     		bne	.L351
2237:main.c        ****                     {
2238:main.c        ****                         if (theVal.f < 0.0f)
 8065              		.loc 1 2238 0
 8066 0406 3B69     		ldr	r3, [r7, #16]	@ float
 8067 0408 4FF00001 		mov	r1, #0
 8068 040c 1846     		mov	r0, r3
 8069 040e FFF7FEFF 		bl	__aeabi_fcmplt
 8070 0412 0346     		mov	r3, r0
 8071 0414 002B     		cmp	r3, #0
 8072 0416 0AD0     		beq	.L381
2239:main.c        ****                         {
2240:main.c        ****                              presetArray[valsStart + currentFloat++] = 0xff;
 8073              		.loc 1 2240 0
 8074 0418 BA8E     		ldrh	r2, [r7, #52]
 8075 041a 344B     		ldr	r3, .L384+4
 8076 041c 1B68     		ldr	r3, [r3]
 8077 041e 591C     		adds	r1, r3, #1
 8078 0420 3248     		ldr	r0, .L384+4
 8079 0422 0160     		str	r1, [r0]
 8080 0424 1344     		add	r3, r3, r2
 8081 0426 354A     		ldr	r2, .L384+20
 8082 0428 FF21     		movs	r1, #255
 8083 042a D154     		strb	r1, [r2, r3]
 8084 042c 55E0     		b	.L349
 8085              	.L381:
2241:main.c        ****                         }
2242:main.c        ****                         else
2243:main.c        ****                         {
2244:main.c        ****                              presetArray[valsStart + currentFloat++] = (uint8_t)theVal.f;
 8086              		.loc 1 2244 0
 8087 042e BA8E     		ldrh	r2, [r7, #52]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 184


 8088 0430 2E4B     		ldr	r3, .L384+4
 8089 0432 1B68     		ldr	r3, [r3]
 8090 0434 591C     		adds	r1, r3, #1
 8091 0436 2D48     		ldr	r0, .L384+4
 8092 0438 0160     		str	r1, [r0]
 8093 043a D418     		adds	r4, r2, r3
 8094 043c 3B69     		ldr	r3, [r7, #16]	@ float
 8095 043e 1846     		mov	r0, r3
 8096 0440 FFF7FEFF 		bl	__aeabi_f2uiz
 8097 0444 0346     		mov	r3, r0
 8098 0446 DAB2     		uxtb	r2, r3
 8099 0448 2C4B     		ldr	r3, .L384+20
 8100 044a 1A55     		strb	r2, [r3, r4]
 8101 044c 45E0     		b	.L349
 8102              	.L351:
2245:main.c        ****                         }
2246:main.c        ****                     }
2247:main.c        ****                     else if (mapCount % 5 == 3)
 8103              		.loc 1 2247 0
 8104 044e 2D4B     		ldr	r3, .L384+28
 8105 0450 1968     		ldr	r1, [r3]
 8106 0452 344B     		ldr	r3, .L384+60
 8107 0454 A3FB0123 		umull	r2, r3, r3, r1
 8108 0458 9A08     		lsrs	r2, r3, #2
 8109 045a 1346     		mov	r3, r2
 8110 045c 9B00     		lsls	r3, r3, #2
 8111 045e 1344     		add	r3, r3, r2
 8112 0460 CA1A     		subs	r2, r1, r3
 8113 0462 032A     		cmp	r2, #3
 8114 0464 24D1     		bne	.L355
 8115              	.LBB43:
2248:main.c        ****                     {
2249:main.c        ****                         int16_t intVal = (int16_t)(theVal.f * 32767.0f); //keep it signed to allow 
 8116              		.loc 1 2249 0
 8117 0466 3B69     		ldr	r3, [r7, #16]	@ float
 8118 0468 2F49     		ldr	r1, .L384+64
 8119 046a 1846     		mov	r0, r3
 8120 046c FFF7FEFF 		bl	__aeabi_fmul
 8121 0470 0346     		mov	r3, r0
 8122 0472 1846     		mov	r0, r3
 8123 0474 FFF7FEFF 		bl	__aeabi_f2iz
 8124 0478 0346     		mov	r3, r0
 8125 047a 3B86     		strh	r3, [r7, #48]	@ movhi
2250:main.c        ****                         presetArray[valsStart + currentFloat++] = intVal >> 8;
 8126              		.loc 1 2250 0
 8127 047c BA8E     		ldrh	r2, [r7, #52]
 8128 047e 1B4B     		ldr	r3, .L384+4
 8129 0480 1B68     		ldr	r3, [r3]
 8130 0482 591C     		adds	r1, r3, #1
 8131 0484 1948     		ldr	r0, .L384+4
 8132 0486 0160     		str	r1, [r0]
 8133 0488 1344     		add	r3, r3, r2
 8134 048a B7F93020 		ldrsh	r2, [r7, #48]
 8135 048e 1212     		asrs	r2, r2, #8
 8136 0490 12B2     		sxth	r2, r2
 8137 0492 D1B2     		uxtb	r1, r2
 8138 0494 194A     		ldr	r2, .L384+20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 185


 8139 0496 D154     		strb	r1, [r2, r3]
2251:main.c        ****                         presetArray[valsStart + currentFloat++] = intVal & 0xff;
 8140              		.loc 1 2251 0
 8141 0498 BA8E     		ldrh	r2, [r7, #52]
 8142 049a 144B     		ldr	r3, .L384+4
 8143 049c 1B68     		ldr	r3, [r3]
 8144 049e 591C     		adds	r1, r3, #1
 8145 04a0 1248     		ldr	r0, .L384+4
 8146 04a2 0160     		str	r1, [r0]
 8147 04a4 1344     		add	r3, r3, r2
 8148 04a6 3A8E     		ldrh	r2, [r7, #48]	@ movhi
 8149 04a8 D1B2     		uxtb	r1, r2
 8150 04aa 144A     		ldr	r2, .L384+20
 8151 04ac D154     		strb	r1, [r2, r3]
 8152              	.LBE43:
 8153 04ae 14E0     		b	.L349
 8154              	.L355:
2252:main.c        **** 
2253:main.c        ****                     }
2254:main.c        ****                     else
2255:main.c        ****                     {
2256:main.c        ****                         presetArray[valsStart + currentFloat++] = (uint8_t)theVal.f;
 8155              		.loc 1 2256 0
 8156 04b0 BA8E     		ldrh	r2, [r7, #52]
 8157 04b2 0E4B     		ldr	r3, .L384+4
 8158 04b4 1B68     		ldr	r3, [r3]
 8159 04b6 591C     		adds	r1, r3, #1
 8160 04b8 0C48     		ldr	r0, .L384+4
 8161 04ba 0160     		str	r1, [r0]
 8162 04bc D418     		adds	r4, r2, r3
 8163 04be 3B69     		ldr	r3, [r7, #16]	@ float
 8164 04c0 1846     		mov	r0, r3
 8165 04c2 FFF7FEFF 		bl	__aeabi_f2uiz
 8166 04c6 0346     		mov	r3, r0
 8167 04c8 DAB2     		uxtb	r2, r3
 8168 04ca 0C4B     		ldr	r3, .L384+20
 8169 04cc 1A55     		strb	r2, [r3, r4]
2257:main.c        ****                         numMappings++;
 8170              		.loc 1 2257 0
 8171 04ce 144B     		ldr	r3, .L384+56
 8172 04d0 1B88     		ldrh	r3, [r3]
 8173 04d2 0133     		adds	r3, r3, #1
 8174 04d4 9AB2     		uxth	r2, r3
 8175 04d6 124B     		ldr	r3, .L384+56
 8176 04d8 1A80     		strh	r2, [r3]	@ movhi
 8177              	.L349:
2258:main.c        ****                     }
2259:main.c        ****                     mapCount++;
 8178              		.loc 1 2259 0
 8179 04da 0A4B     		ldr	r3, .L384+28
 8180 04dc 1B68     		ldr	r3, [r3]
 8181 04de 0133     		adds	r3, r3, #1
 8182 04e0 084A     		ldr	r2, .L384+28
 8183 04e2 1360     		str	r3, [r2]
 8184 04e4 6DE0     		b	.L345
 8185              	.L385:
 8186 04e6 00BF     		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 186


 8187              	.L384:
 8188 04e8 00000000 		.word	valsCount
 8189 04ec 00000000 		.word	currentFloat
 8190 04f0 00000000 		.word	valCheck
 8191 04f4 0000C0BF 		.word	-1077936128
 8192 04f8 000020C0 		.word	-1071644672
 8193 04fc 00000000 		.word	presetArray
 8194 0500 00000000 		.word	presetArraySection
 8195 0504 00000000 		.word	mapCount
 8196 0508 00000000 		.word	SPI_errors
 8197 050c 00000000 		.word	sysexMessageInProgress
 8198 0510 00000000 		.word	sysexPointer
 8199 0514 00000000 		.word	sendingMessage
 8200 0518 00000000 		.word	parseThatMF
 8201 051c 00000000 		.word	mapCountExpectation
 8202 0520 00000000 		.word	numMappings
 8203 0524 CDCCCCCC 		.word	-858993459
 8204 0528 00FEFF46 		.word	1191181824
 8205              	.L347:
2260:main.c        ****                 }
2261:main.c        ****                 
2262:main.c        **** 
2263:main.c        ****                 else
2264:main.c        ****                 {
2265:main.c        ****                     //mapcount ended
2266:main.c        ****                     if ((theVal.f < -2.5f) && (theVal.f > -3.5f))
 8206              		.loc 1 2266 0
 8207 052c 3B69     		ldr	r3, [r7, #16]	@ float
 8208 052e 6649     		ldr	r1, .L386
 8209 0530 1846     		mov	r0, r3
 8210 0532 FFF7FEFF 		bl	__aeabi_fcmplt
 8211 0536 0346     		mov	r3, r0
 8212 0538 002B     		cmp	r3, #0
 8213 053a 31D0     		beq	.L356
 8214              		.loc 1 2266 0 is_stmt 0 discriminator 1
 8215 053c 3B69     		ldr	r3, [r7, #16]	@ float
 8216 053e 6349     		ldr	r1, .L386+4
 8217 0540 1846     		mov	r0, r3
 8218 0542 FFF7FEFF 		bl	__aeabi_fcmpgt
 8219 0546 0346     		mov	r3, r0
 8220 0548 002B     		cmp	r3, #0
 8221 054a 29D0     		beq	.L356
2267:main.c        ****                     {
2268:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xfe;
 8222              		.loc 1 2268 0 is_stmt 1
 8223 054c BA8E     		ldrh	r2, [r7, #52]
 8224 054e 604B     		ldr	r3, .L386+8
 8225 0550 1B68     		ldr	r3, [r3]
 8226 0552 591C     		adds	r1, r3, #1
 8227 0554 5E48     		ldr	r0, .L386+8
 8228 0556 0160     		str	r1, [r0]
 8229 0558 1344     		add	r3, r3, r2
 8230 055a 5E4A     		ldr	r2, .L386+12
 8231 055c FE21     		movs	r1, #254
 8232 055e D154     		strb	r1, [r2, r3]
2269:main.c        ****                         presetArray[valsStart + currentFloat++] = 0xfe;
 8233              		.loc 1 2269 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 187


 8234 0560 BA8E     		ldrh	r2, [r7, #52]
 8235 0562 5B4B     		ldr	r3, .L386+8
 8236 0564 1B68     		ldr	r3, [r3]
 8237 0566 591C     		adds	r1, r3, #1
 8238 0568 5948     		ldr	r0, .L386+8
 8239 056a 0160     		str	r1, [r0]
 8240 056c 1344     		add	r3, r3, r2
 8241 056e 594A     		ldr	r2, .L386+12
 8242 0570 FE21     		movs	r1, #254
 8243 0572 D154     		strb	r1, [r2, r3]
2270:main.c        ****                         presetArraySection = presetEnd;
 8244              		.loc 1 2270 0
 8245 0574 584B     		ldr	r3, .L386+16
 8246 0576 0522     		movs	r2, #5
 8247 0578 1A70     		strb	r2, [r3]
2271:main.c        ****                         sysexMessageInProgress = 0;
 8248              		.loc 1 2271 0
 8249 057a 584B     		ldr	r3, .L386+20
 8250 057c 0022     		movs	r2, #0
 8251 057e 1A70     		strb	r2, [r3]
2272:main.c        ****                         sendingMessage = 1;
 8252              		.loc 1 2272 0
 8253 0580 574B     		ldr	r3, .L386+24
 8254 0582 0122     		movs	r2, #1
 8255 0584 1A70     		strb	r2, [r3]
2273:main.c        ****                         patchNum = presetNumberToWrite;
 8256              		.loc 1 2273 0
 8257 0586 574B     		ldr	r3, .L386+28
 8258 0588 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 8259 058a 574B     		ldr	r3, .L386+32
 8260 058c 1A70     		strb	r2, [r3]
2274:main.c        ****                         messageArraySize = valsStart + currentFloat;
 8261              		.loc 1 2274 0
 8262 058e 504B     		ldr	r3, .L386+8
 8263 0590 1B68     		ldr	r3, [r3]
 8264 0592 9AB2     		uxth	r2, r3
 8265 0594 BB8E     		ldrh	r3, [r7, #52]	@ movhi
 8266 0596 1344     		add	r3, r3, r2
 8267 0598 9AB2     		uxth	r2, r3
 8268 059a 544B     		ldr	r3, .L386+36
 8269 059c 1A80     		strh	r2, [r3]	@ movhi
 8270 059e 10E0     		b	.L345
 8271              	.L356:
2275:main.c        ****                     }
2276:main.c        ****                     else
2277:main.c        ****                     {
2278:main.c        ****                         //error state
2279:main.c        ****                         SPI_errors++;
 8272              		.loc 1 2279 0
 8273 05a0 534B     		ldr	r3, .L386+40
 8274 05a2 1B68     		ldr	r3, [r3]
 8275 05a4 0133     		adds	r3, r3, #1
 8276 05a6 524A     		ldr	r2, .L386+40
 8277 05a8 1360     		str	r3, [r2]
2280:main.c        ****                         sysexMessageInProgress = 0;
 8278              		.loc 1 2280 0
 8279 05aa 4C4B     		ldr	r3, .L386+20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 188


 8280 05ac 0022     		movs	r2, #0
 8281 05ae 1A70     		strb	r2, [r3]
2281:main.c        ****                         sysexPointer = 0;
 8282              		.loc 1 2281 0
 8283 05b0 504B     		ldr	r3, .L386+44
 8284 05b2 0022     		movs	r2, #0
 8285 05b4 1A60     		str	r2, [r3]
2282:main.c        ****                         sendingMessage = 0;
 8286              		.loc 1 2282 0
 8287 05b6 4A4B     		ldr	r3, .L386+24
 8288 05b8 0022     		movs	r2, #0
 8289 05ba 1A70     		strb	r2, [r3]
2283:main.c        ****                         parseThatMF = 0;
 8290              		.loc 1 2283 0
 8291 05bc 4E4B     		ldr	r3, .L386+48
 8292 05be 0022     		movs	r2, #0
 8293 05c0 1A70     		strb	r2, [r3]
 8294              	.L345:
2169:main.c        ****         {
 8295              		.loc 1 2169 0
 8296 05c2 FB6C     		ldr	r3, [r7, #76]
 8297 05c4 0533     		adds	r3, r3, #5
 8298 05c6 FB64     		str	r3, [r7, #76]
 8299              	.L337:
2169:main.c        ****         {
 8300              		.loc 1 2169 0 is_stmt 0 discriminator 1
 8301 05c8 4A4B     		ldr	r3, .L386+44
 8302 05ca 1B68     		ldr	r3, [r3]
 8303 05cc FA6C     		ldr	r2, [r7, #76]
 8304 05ce 9A42     		cmp	r2, r3
 8305 05d0 FFF4B0AD 		bcc	.L359
 8306 05d4 F0E2     		b	.L360
 8307              	.L330:
 8308              	.LBE39:
2284:main.c        ****                     }
2285:main.c        ****                 }
2286:main.c        ****             }
2287:main.c        ****             
2288:main.c        ****         }
2289:main.c        ****     }
2290:main.c        ****     #if 0
2291:main.c        ****     else if (sysexBuffer[0] == 1) //its a tuning
2292:main.c        ****     {
2293:main.c        ****         
2294:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
2295:main.c        ****         currentFloat = 0;
2296:main.c        ****         presetNumberToWrite = sysexBuffer[1];
2297:main.c        ****         union breakFloat theVal;
2298:main.c        ****         for (uint32_t i = 2; i < sysexPointer; i = i+5)
2299:main.c        ****         {
2300:main.c        ****             theVal.u32 = 0;
2301:main.c        ****             theVal.u32 |= ((sysexBuffer[i] &15) << 28);
2302:main.c        ****             theVal.u32 |= (sysexBuffer[i+1] << 21);
2303:main.c        ****             theVal.u32 |= (sysexBuffer[i+2] << 14);
2304:main.c        ****             theVal.u32 |= (sysexBuffer[i+3] << 7);
2305:main.c        ****             theVal.u32 |= (sysexBuffer[i+4] & 127);
2306:main.c        ****             testVal = theVal.f;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 189


2307:main.c        ****             uint16_t intVal = (uint16_t)(theVal.f * 512.0f);//(uint16_t)(theVal.f * 65535.0f);
2308:main.c        ****             tuningArray[currentFloat++] = intVal >> 8;
2309:main.c        ****             tuningArray[currentFloat++] = intVal & 0xff;
2310:main.c        ****         }
2311:main.c        ****         
2312:main.c        ****         tuningArray[currentFloat++] = 0xef;
2313:main.c        ****         tuningArray[currentFloat++] = 0xef;
2314:main.c        ****                         
2315:main.c        ****         
2316:main.c        ****         messageArraySize = currentFloat;
2317:main.c        ****                     
2318:main.c        ****         if(messageArraySize != TUNING_ARRAY_SIZE)
2319:main.c        ****         {
2320:main.c        ****             //error state
2321:main.c        ****             SPI_errors++;
2322:main.c        ****             sysexMessageInProgress = 0;
2323:main.c        ****             sysexPointer = 0;
2324:main.c        ****             sendingMessage = 0;
2325:main.c        ****             parseThatMF = 0;
2326:main.c        ****         } else 
2327:main.c        ****         {
2328:main.c        ****             sysexMessageInProgress = 0;
2329:main.c        ****             sendingMessage = 2;
2330:main.c        ****         }
2331:main.c        ****     }
2332:main.c        ****     #endif
2333:main.c        ****     
2334:main.c        **** 
2335:main.c        ****     
2336:main.c        ****     else if (sysexBuffer[0] == 2) //its a copedent
 8309              		.loc 1 2336 0 is_stmt 1
 8310 05d6 494B     		ldr	r3, .L386+52
 8311 05d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8312 05da 022B     		cmp	r3, #2
 8313 05dc 40F08281 		bne	.L361
 8314              	.LBB44:
2337:main.c        ****     {
2338:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
 8315              		.loc 1 2338 0
 8316 05e0 3E4B     		ldr	r3, .L386+20
 8317 05e2 0122     		movs	r2, #1
 8318 05e4 1A70     		strb	r2, [r3]
2339:main.c        ****         currentFloat = 0;
 8319              		.loc 1 2339 0
 8320 05e6 3A4B     		ldr	r3, .L386+8
 8321 05e8 0022     		movs	r2, #0
 8322 05ea 1A60     		str	r2, [r3]
2340:main.c        ****         copedentNumberToWrite = sysexBuffer[1];
 8323              		.loc 1 2340 0
 8324 05ec 434B     		ldr	r3, .L386+52
 8325 05ee 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 8326 05f0 434B     		ldr	r3, .L386+56
 8327 05f2 1A70     		strb	r2, [r3]
2341:main.c        ****         currentCopedent = copedentNumberToWrite;
 8328              		.loc 1 2341 0
 8329 05f4 424B     		ldr	r3, .L386+56
 8330 05f6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 190


 8331 05f8 424B     		ldr	r3, .L386+60
 8332 05fa 1A70     		strb	r2, [r3]
2342:main.c        ****         necks[currentNeck] = currentCopedent;
 8333              		.loc 1 2342 0
 8334 05fc 424B     		ldr	r3, .L386+64
 8335 05fe 1B68     		ldr	r3, [r3]
 8336 0600 404A     		ldr	r2, .L386+60
 8337 0602 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 8338 0604 414A     		ldr	r2, .L386+68
 8339 0606 D154     		strb	r1, [r2, r3]
2343:main.c        **** 
2344:main.c        ****               
2345:main.c        ****         
2346:main.c        ****         union breakFloat theVal;
2347:main.c        ****         uint32_t i = 2;
 8340              		.loc 1 2347 0
 8341 0608 0223     		movs	r3, #2
 8342 060a 3B64     		str	r3, [r7, #64]
2348:main.c        ****         uint8_t stoppingPoint = NAME_LENGTH_IN_BYTES+2;
 8343              		.loc 1 2348 0
 8344 060c 1023     		movs	r3, #16
 8345 060e 87F82F30 		strb	r3, [r7, #47]
2349:main.c        ****         for (; i < stoppingPoint; i++)
 8346              		.loc 1 2349 0
 8347 0612 43E0     		b	.L362
 8348              	.L363:
 8349              	.LBB45:
2350:main.c        ****         {
2351:main.c        ****             //presetArray[i-2] = sysexBuffer[i] & 127; // pass on the first 14 elements as 8-bit by
2352:main.c        ****             uint8_t tempChar = sysexBuffer[i] & 127;
 8350              		.loc 1 2352 0 discriminator 2
 8351 0614 394A     		ldr	r2, .L386+52
 8352 0616 3B6C     		ldr	r3, [r7, #64]
 8353 0618 1344     		add	r3, r3, r2
 8354 061a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8355 061c 03F07F03 		and	r3, r3, #127
 8356 0620 87F82E30 		strb	r3, [r7, #46]
2353:main.c        ****             copedentNamesArray[copedentNumberToWrite][i-2] = tempChar;
 8357              		.loc 1 2353 0 discriminator 2
 8358 0624 364B     		ldr	r3, .L386+56
 8359 0626 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8360 0628 1846     		mov	r0, r3
 8361 062a 3B6C     		ldr	r3, [r7, #64]
 8362 062c 9A1E     		subs	r2, r3, #2
 8363 062e 3849     		ldr	r1, .L386+72
 8364 0630 0346     		mov	r3, r0
 8365 0632 DB00     		lsls	r3, r3, #3
 8366 0634 1B1A     		subs	r3, r3, r0
 8367 0636 5B00     		lsls	r3, r3, #1
 8368 0638 0B44     		add	r3, r3, r1
 8369 063a 1344     		add	r3, r3, r2
 8370 063c 97F82E20 		ldrb	r2, [r7, #46]
 8371 0640 1A70     		strb	r2, [r3]
2354:main.c        ****             checkBase = EEPROM_COPEDENT_OFFSET + (COPEDENT_SIZE_IN_BYTES * copedentNumberToWrite);
 8372              		.loc 1 2354 0 discriminator 2
 8373 0642 2F4B     		ldr	r3, .L386+56
 8374 0644 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 191


 8375 0646 9BB2     		uxth	r3, r3
 8376 0648 1A46     		mov	r2, r3	@ movhi
 8377 064a 1201     		lsls	r2, r2, #4
 8378 064c 1A44     		add	r2, r2, r3
 8379 064e 9200     		lsls	r2, r2, #2
 8380 0650 1A44     		add	r2, r2, r3
 8381 0652 5200     		lsls	r2, r2, #1
 8382 0654 1344     		add	r3, r3, r2
 8383 0656 5B00     		lsls	r3, r3, #1
 8384 0658 9BB2     		uxth	r3, r3
 8385 065a 0233     		adds	r3, r3, #2
 8386 065c 9AB2     		uxth	r2, r3
 8387 065e 2D4B     		ldr	r3, .L386+76
 8388 0660 1A80     		strh	r2, [r3]	@ movhi
2355:main.c        ****             checkStatus = EEPROM_WriteByte(tempChar, EEPROM_COPEDENT_OFFSET + (i - 2) + (COPEDENT_S
 8389              		.loc 1 2355 0 discriminator 2
 8390 0662 274B     		ldr	r3, .L386+56
 8391 0664 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8392 0666 9BB2     		uxth	r3, r3
 8393 0668 1A46     		mov	r2, r3	@ movhi
 8394 066a 1201     		lsls	r2, r2, #4
 8395 066c 1A44     		add	r2, r2, r3
 8396 066e 9200     		lsls	r2, r2, #2
 8397 0670 1A44     		add	r2, r2, r3
 8398 0672 5200     		lsls	r2, r2, #1
 8399 0674 1344     		add	r3, r3, r2
 8400 0676 5B00     		lsls	r3, r3, #1
 8401 0678 9AB2     		uxth	r2, r3
 8402 067a 3B6C     		ldr	r3, [r7, #64]
 8403 067c 9BB2     		uxth	r3, r3
 8404 067e 1344     		add	r3, r3, r2
 8405 0680 9AB2     		uxth	r2, r3
 8406 0682 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 8407 0686 1146     		mov	r1, r2
 8408 0688 1846     		mov	r0, r3
 8409 068a FFF7FEFF 		bl	EEPROM_WriteByte
 8410 068e 0346     		mov	r3, r0
 8411 0690 DAB2     		uxtb	r2, r3
 8412 0692 214B     		ldr	r3, .L386+80
 8413 0694 1A70     		strb	r2, [r3]
 8414              	.LBE45:
2349:main.c        ****         {
 8415              		.loc 1 2349 0 discriminator 2
 8416 0696 3B6C     		ldr	r3, [r7, #64]
 8417 0698 0133     		adds	r3, r3, #1
 8418 069a 3B64     		str	r3, [r7, #64]
 8419              	.L362:
2349:main.c        ****         {
 8420              		.loc 1 2349 0 is_stmt 0 discriminator 1
 8421 069c 97F82F20 		ldrb	r2, [r7, #47]	@ zero_extendqisi2
 8422 06a0 3B6C     		ldr	r3, [r7, #64]
 8423 06a2 9A42     		cmp	r2, r3
 8424 06a4 B6D8     		bhi	.L363
2356:main.c        ****         }
2357:main.c        ****         
2358:main.c        ****         i = NAME_LENGTH_IN_BYTES + 2; // start after the name storage to store the actual values
 8425              		.loc 1 2358 0 is_stmt 1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 192


 8426 06a6 1023     		movs	r3, #16
 8427 06a8 3B64     		str	r3, [r7, #64]
2359:main.c        **** 
2360:main.c        ****  
2361:main.c        ****         while(i < sysexPointer)
 8428              		.loc 1 2361 0
 8429 06aa DCE0     		b	.L364
 8430              	.L369:
 8431              	.LBB46:
2362:main.c        ****         {
2363:main.c        ****             for (uint32_t pedalToWrite = 0; pedalToWrite < 11; pedalToWrite++)
 8432              		.loc 1 2363 0
 8433 06ac 0023     		movs	r3, #0
 8434 06ae FB63     		str	r3, [r7, #60]
 8435 06b0 D5E0     		b	.L365
 8436              	.L368:
 8437              	.LBB47:
2364:main.c        ****             {
2365:main.c        ****                 uint16_t pedalStartLoc = (pedalToWrite * 24);
 8438              		.loc 1 2365 0
 8439 06b2 FB6B     		ldr	r3, [r7, #60]
 8440 06b4 9BB2     		uxth	r3, r3
 8441 06b6 1A46     		mov	r2, r3	@ movhi
 8442 06b8 5200     		lsls	r2, r2, #1
 8443 06ba 1344     		add	r3, r3, r2
 8444 06bc DB00     		lsls	r3, r3, #3
 8445 06be BB85     		strh	r3, [r7, #44]	@ movhi
 8446              	.LBB48:
2366:main.c        ****                 for (uint32_t stringChange = 0; stringChange < 12; stringChange++)
 8447              		.loc 1 2366 0
 8448 06c0 0023     		movs	r3, #0
 8449 06c2 BB63     		str	r3, [r7, #56]
 8450 06c4 C4E0     		b	.L366
 8451              	.L387:
 8452 06c6 00BF     		.align	2
 8453              	.L386:
 8454 06c8 000020C0 		.word	-1071644672
 8455 06cc 000060C0 		.word	-1067450368
 8456 06d0 00000000 		.word	currentFloat
 8457 06d4 00000000 		.word	presetArray
 8458 06d8 00000000 		.word	presetArraySection
 8459 06dc 00000000 		.word	sysexMessageInProgress
 8460 06e0 00000000 		.word	sendingMessage
 8461 06e4 00000000 		.word	presetNumberToWrite
 8462 06e8 00000000 		.word	patchNum
 8463 06ec 00000000 		.word	messageArraySize
 8464 06f0 00000000 		.word	SPI_errors
 8465 06f4 00000000 		.word	sysexPointer
 8466 06f8 00000000 		.word	parseThatMF
 8467 06fc 00000000 		.word	sysexBuffer
 8468 0700 00000000 		.word	copedentNumberToWrite
 8469 0704 00000000 		.word	currentCopedent
 8470 0708 00000000 		.word	currentNeck
 8471 070c 00000000 		.word	necks
 8472 0710 00000000 		.word	copedentNamesArray
 8473 0714 00000000 		.word	checkBase
 8474 0718 00000000 		.word	checkStatus
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 193


 8475              	.L367:
 8476              	.LBB49:
2367:main.c        ****                 {
2368:main.c        ****                     
2369:main.c        ****                     theVal.u32 = 0;
 8477              		.loc 1 2369 0 discriminator 3
 8478 071c 0023     		movs	r3, #0
 8479 071e FB60     		str	r3, [r7, #12]
2370:main.c        ****                     theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 8480              		.loc 1 2370 0 discriminator 3
 8481 0720 FB68     		ldr	r3, [r7, #12]
 8482 0722 6449     		ldr	r1, .L388
 8483 0724 3A6C     		ldr	r2, [r7, #64]
 8484 0726 0A44     		add	r2, r2, r1
 8485 0728 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8486 072a 1207     		lsls	r2, r2, #28
 8487 072c 1343     		orrs	r3, r3, r2
 8488 072e FB60     		str	r3, [r7, #12]
2371:main.c        ****                     theVal.u32 |= (sysexBuffer[i+1] << 21);
 8489              		.loc 1 2371 0 discriminator 3
 8490 0730 FB68     		ldr	r3, [r7, #12]
 8491 0732 3A6C     		ldr	r2, [r7, #64]
 8492 0734 0132     		adds	r2, r2, #1
 8493 0736 5F49     		ldr	r1, .L388
 8494 0738 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8495 073a 5205     		lsls	r2, r2, #21
 8496 073c 1343     		orrs	r3, r3, r2
 8497 073e FB60     		str	r3, [r7, #12]
2372:main.c        ****                     theVal.u32 |= (sysexBuffer[i+2] << 14);
 8498              		.loc 1 2372 0 discriminator 3
 8499 0740 FB68     		ldr	r3, [r7, #12]
 8500 0742 3A6C     		ldr	r2, [r7, #64]
 8501 0744 0232     		adds	r2, r2, #2
 8502 0746 5B49     		ldr	r1, .L388
 8503 0748 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8504 074a 9203     		lsls	r2, r2, #14
 8505 074c 1343     		orrs	r3, r3, r2
 8506 074e FB60     		str	r3, [r7, #12]
2373:main.c        ****                     theVal.u32 |= (sysexBuffer[i+3] << 7);
 8507              		.loc 1 2373 0 discriminator 3
 8508 0750 FB68     		ldr	r3, [r7, #12]
 8509 0752 3A6C     		ldr	r2, [r7, #64]
 8510 0754 0332     		adds	r2, r2, #3
 8511 0756 5749     		ldr	r1, .L388
 8512 0758 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8513 075a D201     		lsls	r2, r2, #7
 8514 075c 1343     		orrs	r3, r3, r2
 8515 075e FB60     		str	r3, [r7, #12]
2374:main.c        ****                     theVal.u32 |= (sysexBuffer[i+4] & 127);
 8516              		.loc 1 2374 0 discriminator 3
 8517 0760 FA68     		ldr	r2, [r7, #12]
 8518 0762 3B6C     		ldr	r3, [r7, #64]
 8519 0764 0433     		adds	r3, r3, #4
 8520 0766 5349     		ldr	r1, .L388
 8521 0768 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8522 076a 03F07F03 		and	r3, r3, #127
 8523 076e 1343     		orrs	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 194


 8524 0770 FB60     		str	r3, [r7, #12]
2375:main.c        ****                     copedent[copedentNumberToWrite][pedalToWrite][stringChange] = theVal.f;
 8525              		.loc 1 2375 0 discriminator 3
 8526 0772 514B     		ldr	r3, .L388+4
 8527 0774 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8528 0776 1C46     		mov	r4, r3
 8529 0778 F968     		ldr	r1, [r7, #12]	@ float
 8530 077a 5048     		ldr	r0, .L388+8
 8531 077c FB6B     		ldr	r3, [r7, #60]
 8532 077e 1A46     		mov	r2, r3
 8533 0780 5200     		lsls	r2, r2, #1
 8534 0782 1A44     		add	r2, r2, r3
 8535 0784 9300     		lsls	r3, r2, #2
 8536 0786 1A46     		mov	r2, r3
 8537 0788 2346     		mov	r3, r4
 8538 078a 5B01     		lsls	r3, r3, #5
 8539 078c 2344     		add	r3, r3, r4
 8540 078e 9B00     		lsls	r3, r3, #2
 8541 0790 1A44     		add	r2, r2, r3
 8542 0792 BB6B     		ldr	r3, [r7, #56]
 8543 0794 1344     		add	r3, r3, r2
 8544 0796 40F82310 		str	r1, [r0, r3, lsl #2]	@ float
2376:main.c        ****                     uint16_t tempIntVersion = (uint16_t)((theVal.f * 256.0f) + 32768.0f);
 8545              		.loc 1 2376 0 discriminator 3
 8546 079a FB68     		ldr	r3, [r7, #12]	@ float
 8547 079c 4FF08741 		mov	r1, #1132462080
 8548 07a0 1846     		mov	r0, r3
 8549 07a2 FFF7FEFF 		bl	__aeabi_fmul
 8550 07a6 0346     		mov	r3, r0
 8551 07a8 4FF08E41 		mov	r1, #1191182336
 8552 07ac 1846     		mov	r0, r3
 8553 07ae FFF7FEFF 		bl	__aeabi_fadd
 8554 07b2 0346     		mov	r3, r0
 8555 07b4 1846     		mov	r0, r3
 8556 07b6 FFF7FEFF 		bl	__aeabi_f2uiz
 8557 07ba 0346     		mov	r3, r0
 8558 07bc 7B85     		strh	r3, [r7, #42]	@ movhi
2377:main.c        ****                     uint8_t tempHigh = tempIntVersion >> 8;
 8559              		.loc 1 2377 0 discriminator 3
 8560 07be 7B8D     		ldrh	r3, [r7, #42]
 8561 07c0 1B0A     		lsrs	r3, r3, #8
 8562 07c2 9BB2     		uxth	r3, r3
 8563 07c4 87F82930 		strb	r3, [r7, #41]
2378:main.c        ****                     uint8_t tempLow = tempIntVersion & 255;
 8564              		.loc 1 2378 0 discriminator 3
 8565 07c8 7B8D     		ldrh	r3, [r7, #42]	@ movhi
 8566 07ca 87F82830 		strb	r3, [r7, #40]
2379:main.c        ****                     
2380:main.c        ****                     
2381:main.c        ****                     uint16_t stringStartLoc = stringChange * 2;
 8567              		.loc 1 2381 0 discriminator 3
 8568 07ce BB6B     		ldr	r3, [r7, #56]
 8569 07d0 9BB2     		uxth	r3, r3
 8570 07d2 5B00     		lsls	r3, r3, #1
 8571 07d4 FB84     		strh	r3, [r7, #38]	@ movhi
2382:main.c        ****                     checkBase = EEPROM_COPEDENT_OFFSET + stringStartLoc + pedalStartLoc + (COPEDENT
 8572              		.loc 1 2382 0 discriminator 3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 195


 8573 07d6 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 8574 07d8 BB8D     		ldrh	r3, [r7, #44]	@ movhi
 8575 07da 1344     		add	r3, r3, r2
 8576 07dc 9AB2     		uxth	r2, r3
 8577 07de 364B     		ldr	r3, .L388+4
 8578 07e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8579 07e2 9BB2     		uxth	r3, r3
 8580 07e4 1946     		mov	r1, r3	@ movhi
 8581 07e6 0901     		lsls	r1, r1, #4
 8582 07e8 1944     		add	r1, r1, r3
 8583 07ea 8900     		lsls	r1, r1, #2
 8584 07ec 1944     		add	r1, r1, r3
 8585 07ee 4900     		lsls	r1, r1, #1
 8586 07f0 0B44     		add	r3, r3, r1
 8587 07f2 5B00     		lsls	r3, r3, #1
 8588 07f4 9BB2     		uxth	r3, r3
 8589 07f6 1344     		add	r3, r3, r2
 8590 07f8 9BB2     		uxth	r3, r3
 8591 07fa 1033     		adds	r3, r3, #16
 8592 07fc 9AB2     		uxth	r2, r3
 8593 07fe 304B     		ldr	r3, .L388+12
 8594 0800 1A80     		strh	r2, [r3]	@ movhi
2383:main.c        ****                     checkStatus = EEPROM_WriteByte(tempHigh, checkBase);
 8595              		.loc 1 2383 0 discriminator 3
 8596 0802 2F4B     		ldr	r3, .L388+12
 8597 0804 1B88     		ldrh	r3, [r3]	@ movhi
 8598 0806 9AB2     		uxth	r2, r3
 8599 0808 97F82930 		ldrb	r3, [r7, #41]	@ zero_extendqisi2
 8600 080c 1146     		mov	r1, r2
 8601 080e 1846     		mov	r0, r3
 8602 0810 FFF7FEFF 		bl	EEPROM_WriteByte
 8603 0814 0346     		mov	r3, r0
 8604 0816 DAB2     		uxtb	r2, r3
 8605 0818 2A4B     		ldr	r3, .L388+16
 8606 081a 1A70     		strb	r2, [r3]
2384:main.c        ****                     checkStatus = EEPROM_WriteByte(tempLow, checkBase + 1);
 8607              		.loc 1 2384 0 discriminator 3
 8608 081c 284B     		ldr	r3, .L388+12
 8609 081e 1B88     		ldrh	r3, [r3]	@ movhi
 8610 0820 9BB2     		uxth	r3, r3
 8611 0822 0133     		adds	r3, r3, #1
 8612 0824 9AB2     		uxth	r2, r3
 8613 0826 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 8614 082a 1146     		mov	r1, r2
 8615 082c 1846     		mov	r0, r3
 8616 082e FFF7FEFF 		bl	EEPROM_WriteByte
 8617 0832 0346     		mov	r3, r0
 8618 0834 DAB2     		uxtb	r2, r3
 8619 0836 234B     		ldr	r3, .L388+16
 8620 0838 1A70     		strb	r2, [r3]
2385:main.c        ****                     currentFloat++;
 8621              		.loc 1 2385 0 discriminator 3
 8622 083a 234B     		ldr	r3, .L388+20
 8623 083c 1B68     		ldr	r3, [r3]
 8624 083e 0133     		adds	r3, r3, #1
 8625 0840 214A     		ldr	r2, .L388+20
 8626 0842 1360     		str	r3, [r2]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 196


2386:main.c        ****                     i = i+5;
 8627              		.loc 1 2386 0 discriminator 3
 8628 0844 3B6C     		ldr	r3, [r7, #64]
 8629 0846 0533     		adds	r3, r3, #5
 8630 0848 3B64     		str	r3, [r7, #64]
 8631              	.LBE49:
2366:main.c        ****                 {
 8632              		.loc 1 2366 0 discriminator 3
 8633 084a BB6B     		ldr	r3, [r7, #56]
 8634 084c 0133     		adds	r3, r3, #1
 8635 084e BB63     		str	r3, [r7, #56]
 8636              	.L366:
2366:main.c        ****                 {
 8637              		.loc 1 2366 0 is_stmt 0 discriminator 1
 8638 0850 BB6B     		ldr	r3, [r7, #56]
 8639 0852 0B2B     		cmp	r3, #11
 8640 0854 7FF662AF 		bls	.L367
 8641              	.LBE48:
 8642              	.LBE47:
2363:main.c        ****             {
 8643              		.loc 1 2363 0 is_stmt 1 discriminator 2
 8644 0858 FB6B     		ldr	r3, [r7, #60]
 8645 085a 0133     		adds	r3, r3, #1
 8646 085c FB63     		str	r3, [r7, #60]
 8647              	.L365:
2363:main.c        ****             {
 8648              		.loc 1 2363 0 is_stmt 0 discriminator 1
 8649 085e FB6B     		ldr	r3, [r7, #60]
 8650 0860 0A2B     		cmp	r3, #10
 8651 0862 7FF626AF 		bls	.L368
 8652              	.L364:
 8653              	.LBE46:
2361:main.c        ****         {
 8654              		.loc 1 2361 0 is_stmt 1
 8655 0866 194B     		ldr	r3, .L388+24
 8656 0868 1B68     		ldr	r3, [r3]
 8657 086a 3A6C     		ldr	r2, [r7, #64]
 8658 086c 9A42     		cmp	r2, r3
 8659 086e FFF41DAF 		bcc	.L369
2387:main.c        ****                 }
2388:main.c        ****                 
2389:main.c        ****             }
2390:main.c        ****         }
2391:main.c        ****                         
2392:main.c        ****         
2393:main.c        ****         messageArraySize = currentFloat;
 8660              		.loc 1 2393 0
 8661 0872 154B     		ldr	r3, .L388+20
 8662 0874 1B68     		ldr	r3, [r3]
 8663 0876 9AB2     		uxth	r2, r3
 8664 0878 154B     		ldr	r3, .L388+28
 8665 087a 1A80     		strh	r2, [r3]	@ movhi
2394:main.c        ****                     
2395:main.c        ****         if(messageArraySize != COPEDENT_SIZE_IN_FLOATS)
 8666              		.loc 1 2395 0
 8667 087c 144B     		ldr	r3, .L388+28
 8668 087e 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 197


 8669 0880 842B     		cmp	r3, #132
 8670 0882 11D0     		beq	.L370
2396:main.c        ****         {
2397:main.c        ****             //error state
2398:main.c        ****             SPI_errors++;
 8671              		.loc 1 2398 0
 8672 0884 134B     		ldr	r3, .L388+32
 8673 0886 1B68     		ldr	r3, [r3]
 8674 0888 0133     		adds	r3, r3, #1
 8675 088a 124A     		ldr	r2, .L388+32
 8676 088c 1360     		str	r3, [r2]
2399:main.c        ****             sysexMessageInProgress = 0;
 8677              		.loc 1 2399 0
 8678 088e 124B     		ldr	r3, .L388+36
 8679 0890 0022     		movs	r2, #0
 8680 0892 1A70     		strb	r2, [r3]
2400:main.c        ****             sysexPointer = 0;
 8681              		.loc 1 2400 0
 8682 0894 0D4B     		ldr	r3, .L388+24
 8683 0896 0022     		movs	r2, #0
 8684 0898 1A60     		str	r2, [r3]
2401:main.c        ****             sendingMessage = 0;
 8685              		.loc 1 2401 0
 8686 089a 104B     		ldr	r3, .L388+40
 8687 089c 0022     		movs	r2, #0
 8688 089e 1A70     		strb	r2, [r3]
2402:main.c        ****             parseThatMF = 0;
 8689              		.loc 1 2402 0
 8690 08a0 0F4B     		ldr	r3, .L388+44
 8691 08a2 0022     		movs	r2, #0
 8692 08a4 1A70     		strb	r2, [r3]
 8693 08a6 87E1     		b	.L360
 8694              	.L370:
2403:main.c        ****         } 
2404:main.c        ****         else 
2405:main.c        ****         {
2406:main.c        ****             sysexMessageInProgress = 0;
 8695              		.loc 1 2406 0
 8696 08a8 0B4B     		ldr	r3, .L388+36
 8697 08aa 0022     		movs	r2, #0
 8698 08ac 1A70     		strb	r2, [r3]
2407:main.c        ****             //sendingMessage = 2;  // use this when we are ready to send copedents to the sd cards 
2408:main.c        ****             
2409:main.c        ****             displayCurrentPresetNameAndCopedent();
 8699              		.loc 1 2409 0
 8700 08ae FFF7FEFF 		bl	displayCurrentPresetNameAndCopedent
 8701 08b2 81E1     		b	.L360
 8702              	.L389:
 8703              		.align	2
 8704              	.L388:
 8705 08b4 00000000 		.word	sysexBuffer
 8706 08b8 00000000 		.word	copedentNumberToWrite
 8707 08bc 00000000 		.word	copedent
 8708 08c0 00000000 		.word	checkBase
 8709 08c4 00000000 		.word	checkStatus
 8710 08c8 00000000 		.word	currentFloat
 8711 08cc 00000000 		.word	sysexPointer
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 198


 8712 08d0 00000000 		.word	messageArraySize
 8713 08d4 00000000 		.word	SPI_errors
 8714 08d8 00000000 		.word	sysexMessageInProgress
 8715 08dc 00000000 		.word	sendingMessage
 8716 08e0 00000000 		.word	parseThatMF
 8717              	.L361:
 8718              	.LBE44:
2410:main.c        ****         }
2411:main.c        ****     }
2412:main.c        ****     
2413:main.c        ****     
2414:main.c        ****     else if (sysexBuffer[0] == 3) //it's a real-time parameter change
 8719              		.loc 1 2414 0
 8720 08e4 9F4B     		ldr	r3, .L390
 8721 08e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8722 08e8 032B     		cmp	r3, #3
 8723 08ea 40F08B80 		bne	.L372
 8724              	.LBB50:
2415:main.c        ****     {
2416:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
 8725              		.loc 1 2416 0
 8726 08ee 9E4B     		ldr	r3, .L390+4
 8727 08f0 0122     		movs	r2, #1
 8728 08f2 1A70     		strb	r2, [r3]
2417:main.c        ****         union breakFloat theVal;
2418:main.c        ****         uint32_t i = 2;
 8729              		.loc 1 2418 0
 8730 08f4 0223     		movs	r3, #2
 8731 08f6 3B62     		str	r3, [r7, #32]
2419:main.c        ****         
2420:main.c        ****         //get the parameter ID
2421:main.c        ****         theVal.u32 = 0;
 8732              		.loc 1 2421 0
 8733 08f8 0023     		movs	r3, #0
 8734 08fa BB60     		str	r3, [r7, #8]
2422:main.c        ****         theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 8735              		.loc 1 2422 0
 8736 08fc BB68     		ldr	r3, [r7, #8]
 8737 08fe 9949     		ldr	r1, .L390
 8738 0900 3A6A     		ldr	r2, [r7, #32]
 8739 0902 0A44     		add	r2, r2, r1
 8740 0904 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8741 0906 1207     		lsls	r2, r2, #28
 8742 0908 1343     		orrs	r3, r3, r2
 8743 090a BB60     		str	r3, [r7, #8]
2423:main.c        ****         theVal.u32 |= (sysexBuffer[i+1] << 21);
 8744              		.loc 1 2423 0
 8745 090c BB68     		ldr	r3, [r7, #8]
 8746 090e 3A6A     		ldr	r2, [r7, #32]
 8747 0910 0132     		adds	r2, r2, #1
 8748 0912 9449     		ldr	r1, .L390
 8749 0914 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8750 0916 5205     		lsls	r2, r2, #21
 8751 0918 1343     		orrs	r3, r3, r2
 8752 091a BB60     		str	r3, [r7, #8]
2424:main.c        ****         theVal.u32 |= (sysexBuffer[i+2] << 14);
 8753              		.loc 1 2424 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 199


 8754 091c BB68     		ldr	r3, [r7, #8]
 8755 091e 3A6A     		ldr	r2, [r7, #32]
 8756 0920 0232     		adds	r2, r2, #2
 8757 0922 9049     		ldr	r1, .L390
 8758 0924 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8759 0926 9203     		lsls	r2, r2, #14
 8760 0928 1343     		orrs	r3, r3, r2
 8761 092a BB60     		str	r3, [r7, #8]
2425:main.c        ****         theVal.u32 |= (sysexBuffer[i+3] << 7);
 8762              		.loc 1 2425 0
 8763 092c BB68     		ldr	r3, [r7, #8]
 8764 092e 3A6A     		ldr	r2, [r7, #32]
 8765 0930 0332     		adds	r2, r2, #3
 8766 0932 8C49     		ldr	r1, .L390
 8767 0934 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8768 0936 D201     		lsls	r2, r2, #7
 8769 0938 1343     		orrs	r3, r3, r2
 8770 093a BB60     		str	r3, [r7, #8]
2426:main.c        ****         theVal.u32 |= (sysexBuffer[i+4] & 127);
 8771              		.loc 1 2426 0
 8772 093c BA68     		ldr	r2, [r7, #8]
 8773 093e 3B6A     		ldr	r3, [r7, #32]
 8774 0940 0433     		adds	r3, r3, #4
 8775 0942 8849     		ldr	r1, .L390
 8776 0944 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8777 0946 03F07F03 		and	r3, r3, #127
 8778 094a 1343     		orrs	r3, r3, r2
 8779 094c BB60     		str	r3, [r7, #8]
2427:main.c        ****         uint16_t roundedIndex = (uint16_t)roundf(theVal.f);
 8780              		.loc 1 2427 0
 8781 094e BB68     		ldr	r3, [r7, #8]	@ float
 8782 0950 1846     		mov	r0, r3
 8783 0952 FFF7FEFF 		bl	roundf
 8784 0956 0346     		mov	r3, r0
 8785 0958 1846     		mov	r0, r3
 8786 095a FFF7FEFF 		bl	__aeabi_f2uiz
 8787 095e 0346     		mov	r3, r0
 8788 0960 FB83     		strh	r3, [r7, #30]	@ movhi
2428:main.c        ****         singleParamToUpdateHigh = (roundedIndex << 8);
 8789              		.loc 1 2428 0
 8790 0962 824B     		ldr	r3, .L390+8
 8791 0964 0022     		movs	r2, #0
 8792 0966 1A70     		strb	r2, [r3]
2429:main.c        ****         singleParamToUpdateLow = roundedIndex & 0xff;
 8793              		.loc 1 2429 0
 8794 0968 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 8795 096a DAB2     		uxtb	r2, r3
 8796 096c 804B     		ldr	r3, .L390+12
 8797 096e 1A70     		strb	r2, [r3]
2430:main.c        ****         
2431:main.c        ****         i = i+5;
 8798              		.loc 1 2431 0
 8799 0970 3B6A     		ldr	r3, [r7, #32]
 8800 0972 0533     		adds	r3, r3, #5
 8801 0974 3B62     		str	r3, [r7, #32]
2432:main.c        ****         
2433:main.c        ****         //get the parameter value
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 200


2434:main.c        ****         theVal.u32 = 0;
 8802              		.loc 1 2434 0
 8803 0976 0023     		movs	r3, #0
 8804 0978 BB60     		str	r3, [r7, #8]
2435:main.c        ****         theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 8805              		.loc 1 2435 0
 8806 097a BB68     		ldr	r3, [r7, #8]
 8807 097c 7949     		ldr	r1, .L390
 8808 097e 3A6A     		ldr	r2, [r7, #32]
 8809 0980 0A44     		add	r2, r2, r1
 8810 0982 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8811 0984 1207     		lsls	r2, r2, #28
 8812 0986 1343     		orrs	r3, r3, r2
 8813 0988 BB60     		str	r3, [r7, #8]
2436:main.c        ****         theVal.u32 |= (sysexBuffer[i+1] << 21);
 8814              		.loc 1 2436 0
 8815 098a BB68     		ldr	r3, [r7, #8]
 8816 098c 3A6A     		ldr	r2, [r7, #32]
 8817 098e 0132     		adds	r2, r2, #1
 8818 0990 7449     		ldr	r1, .L390
 8819 0992 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8820 0994 5205     		lsls	r2, r2, #21
 8821 0996 1343     		orrs	r3, r3, r2
 8822 0998 BB60     		str	r3, [r7, #8]
2437:main.c        ****         theVal.u32 |= (sysexBuffer[i+2] << 14);
 8823              		.loc 1 2437 0
 8824 099a BB68     		ldr	r3, [r7, #8]
 8825 099c 3A6A     		ldr	r2, [r7, #32]
 8826 099e 0232     		adds	r2, r2, #2
 8827 09a0 7049     		ldr	r1, .L390
 8828 09a2 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8829 09a4 9203     		lsls	r2, r2, #14
 8830 09a6 1343     		orrs	r3, r3, r2
 8831 09a8 BB60     		str	r3, [r7, #8]
2438:main.c        ****         theVal.u32 |= (sysexBuffer[i+3] << 7);
 8832              		.loc 1 2438 0
 8833 09aa BB68     		ldr	r3, [r7, #8]
 8834 09ac 3A6A     		ldr	r2, [r7, #32]
 8835 09ae 0332     		adds	r2, r2, #3
 8836 09b0 6C49     		ldr	r1, .L390
 8837 09b2 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8838 09b4 D201     		lsls	r2, r2, #7
 8839 09b6 1343     		orrs	r3, r3, r2
 8840 09b8 BB60     		str	r3, [r7, #8]
2439:main.c        ****         theVal.u32 |= (sysexBuffer[i+4] & 127);
 8841              		.loc 1 2439 0
 8842 09ba BA68     		ldr	r2, [r7, #8]
 8843 09bc 3B6A     		ldr	r3, [r7, #32]
 8844 09be 0433     		adds	r3, r3, #4
 8845 09c0 6849     		ldr	r1, .L390
 8846 09c2 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8847 09c4 03F07F03 		and	r3, r3, #127
 8848 09c8 1343     		orrs	r3, r3, r2
 8849 09ca BB60     		str	r3, [r7, #8]
2440:main.c        ****         
2441:main.c        ****         uint16_t intVal = (uint16_t)(theVal.f * 65535.0f);
 8850              		.loc 1 2441 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 201


 8851 09cc BB68     		ldr	r3, [r7, #8]	@ float
 8852 09ce 6949     		ldr	r1, .L390+16
 8853 09d0 1846     		mov	r0, r3
 8854 09d2 FFF7FEFF 		bl	__aeabi_fmul
 8855 09d6 0346     		mov	r3, r0
 8856 09d8 1846     		mov	r0, r3
 8857 09da FFF7FEFF 		bl	__aeabi_f2uiz
 8858 09de 0346     		mov	r3, r0
 8859 09e0 BB83     		strh	r3, [r7, #28]	@ movhi
2442:main.c        ****         singleParamValueHigh = intVal >> 8;
 8860              		.loc 1 2442 0
 8861 09e2 BB8B     		ldrh	r3, [r7, #28]
 8862 09e4 1B0A     		lsrs	r3, r3, #8
 8863 09e6 9BB2     		uxth	r3, r3
 8864 09e8 DAB2     		uxtb	r2, r3
 8865 09ea 634B     		ldr	r3, .L390+20
 8866 09ec 1A70     		strb	r2, [r3]
2443:main.c        ****         singleParamValueLow = intVal & 0xff;
 8867              		.loc 1 2443 0
 8868 09ee BB8B     		ldrh	r3, [r7, #28]	@ movhi
 8869 09f0 DAB2     		uxtb	r2, r3
 8870 09f2 624B     		ldr	r3, .L390+24
 8871 09f4 1A70     		strb	r2, [r3]
2444:main.c        ****         
2445:main.c        ****         sysexMessageInProgress = 0;
 8872              		.loc 1 2445 0
 8873 09f6 5C4B     		ldr	r3, .L390+4
 8874 09f8 0022     		movs	r2, #0
 8875 09fa 1A70     		strb	r2, [r3]
2446:main.c        ****         sendSingleParamUpdate = 1;
 8876              		.loc 1 2446 0
 8877 09fc 604B     		ldr	r3, .L390+28
 8878 09fe 0122     		movs	r2, #1
 8879 0a00 1A70     		strb	r2, [r3]
 8880              	.LBE50:
 8881 0a02 D9E0     		b	.L360
 8882              	.L372:
2447:main.c        ****     }
2448:main.c        ****     
2449:main.c        ****      else if (sysexBuffer[0] == 4) //it's a real-time mapping change
 8883              		.loc 1 2449 0
 8884 0a04 574B     		ldr	r3, .L390
 8885 0a06 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 8886 0a08 042B     		cmp	r3, #4
 8887 0a0a 40F0D580 		bne	.L360
 8888              	.LBB51:
2450:main.c        ****     {
2451:main.c        ****         sysexMessageInProgress = 1; // set a flag that we've started a sysex preset transfer. May t
 8889              		.loc 1 2451 0
 8890 0a0e 564B     		ldr	r3, .L390+4
 8891 0a10 0122     		movs	r2, #1
 8892 0a12 1A70     		strb	r2, [r3]
2452:main.c        ****         union breakFloat theVal;
2453:main.c        ****         uint32_t i = 2;
 8893              		.loc 1 2453 0
 8894 0a14 0223     		movs	r3, #2
 8895 0a16 BB61     		str	r3, [r7, #24]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 202


2454:main.c        ****         
2455:main.c        ****         //get the destination number
2456:main.c        ****         theVal.u32 = 0;
 8896              		.loc 1 2456 0
 8897 0a18 0023     		movs	r3, #0
 8898 0a1a 7B60     		str	r3, [r7, #4]
2457:main.c        ****         theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 8899              		.loc 1 2457 0
 8900 0a1c 7B68     		ldr	r3, [r7, #4]
 8901 0a1e 5149     		ldr	r1, .L390
 8902 0a20 BA69     		ldr	r2, [r7, #24]
 8903 0a22 0A44     		add	r2, r2, r1
 8904 0a24 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8905 0a26 1207     		lsls	r2, r2, #28
 8906 0a28 1343     		orrs	r3, r3, r2
 8907 0a2a 7B60     		str	r3, [r7, #4]
2458:main.c        ****         theVal.u32 |= (sysexBuffer[i+1] << 21);
 8908              		.loc 1 2458 0
 8909 0a2c 7B68     		ldr	r3, [r7, #4]
 8910 0a2e BA69     		ldr	r2, [r7, #24]
 8911 0a30 0132     		adds	r2, r2, #1
 8912 0a32 4C49     		ldr	r1, .L390
 8913 0a34 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8914 0a36 5205     		lsls	r2, r2, #21
 8915 0a38 1343     		orrs	r3, r3, r2
 8916 0a3a 7B60     		str	r3, [r7, #4]
2459:main.c        ****         theVal.u32 |= (sysexBuffer[i+2] << 14);
 8917              		.loc 1 2459 0
 8918 0a3c 7B68     		ldr	r3, [r7, #4]
 8919 0a3e BA69     		ldr	r2, [r7, #24]
 8920 0a40 0232     		adds	r2, r2, #2
 8921 0a42 4849     		ldr	r1, .L390
 8922 0a44 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8923 0a46 9203     		lsls	r2, r2, #14
 8924 0a48 1343     		orrs	r3, r3, r2
 8925 0a4a 7B60     		str	r3, [r7, #4]
2460:main.c        ****         theVal.u32 |= (sysexBuffer[i+3] << 7);
 8926              		.loc 1 2460 0
 8927 0a4c 7B68     		ldr	r3, [r7, #4]
 8928 0a4e BA69     		ldr	r2, [r7, #24]
 8929 0a50 0332     		adds	r2, r2, #3
 8930 0a52 4449     		ldr	r1, .L390
 8931 0a54 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8932 0a56 D201     		lsls	r2, r2, #7
 8933 0a58 1343     		orrs	r3, r3, r2
 8934 0a5a 7B60     		str	r3, [r7, #4]
2461:main.c        ****         theVal.u32 |= (sysexBuffer[i+4] & 127);
 8935              		.loc 1 2461 0
 8936 0a5c 7A68     		ldr	r2, [r7, #4]
 8937 0a5e BB69     		ldr	r3, [r7, #24]
 8938 0a60 0433     		adds	r3, r3, #4
 8939 0a62 4049     		ldr	r1, .L390
 8940 0a64 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 8941 0a66 03F07F03 		and	r3, r3, #127
 8942 0a6a 1343     		orrs	r3, r3, r2
 8943 0a6c 7B60     		str	r3, [r7, #4]
2462:main.c        ****         uint16_t roundedIndex = (uint16_t)roundf(theVal.f);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 203


 8944              		.loc 1 2462 0
 8945 0a6e 7B68     		ldr	r3, [r7, #4]	@ float
 8946 0a70 1846     		mov	r0, r3
 8947 0a72 FFF7FEFF 		bl	roundf
 8948 0a76 0346     		mov	r3, r0
 8949 0a78 1846     		mov	r0, r3
 8950 0a7a FFF7FEFF 		bl	__aeabi_f2uiz
 8951 0a7e 0346     		mov	r3, r0
 8952 0a80 FB82     		strh	r3, [r7, #22]	@ movhi
2463:main.c        ****         mappingArray[0] = (roundedIndex << 8);
 8953              		.loc 1 2463 0
 8954 0a82 404B     		ldr	r3, .L390+32
 8955 0a84 0022     		movs	r2, #0
 8956 0a86 1A70     		strb	r2, [r3]
2464:main.c        ****         mappingArray[1] = roundedIndex & 0xff;
 8957              		.loc 1 2464 0
 8958 0a88 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 8959 0a8a DAB2     		uxtb	r2, r3
 8960 0a8c 3D4B     		ldr	r3, .L390+32
 8961 0a8e 5A70     		strb	r2, [r3, #1]
2465:main.c        ****         
2466:main.c        ****         
2467:main.c        ****         mappingArray[2] = sysexBuffer[i+5]; //slot id
 8962              		.loc 1 2467 0
 8963 0a90 BB69     		ldr	r3, [r7, #24]
 8964 0a92 0533     		adds	r3, r3, #5
 8965 0a94 334A     		ldr	r2, .L390
 8966 0a96 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8967 0a98 3A4B     		ldr	r3, .L390+32
 8968 0a9a 9A70     		strb	r2, [r3, #2]
2468:main.c        ****         mappingArray[3] = sysexBuffer[i+6]; //mapping change type
 8969              		.loc 1 2468 0
 8970 0a9c BB69     		ldr	r3, [r7, #24]
 8971 0a9e 0633     		adds	r3, r3, #6
 8972 0aa0 304A     		ldr	r2, .L390
 8973 0aa2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 8974 0aa4 374B     		ldr	r3, .L390+32
 8975 0aa6 DA70     		strb	r2, [r3, #3]
2469:main.c        ****         
2470:main.c        ****         i = i+7;
 8976              		.loc 1 2470 0
 8977 0aa8 BB69     		ldr	r3, [r7, #24]
 8978 0aaa 0733     		adds	r3, r3, #7
 8979 0aac BB61     		str	r3, [r7, #24]
2471:main.c        ****         
2472:main.c        ****         //get the parameter value
2473:main.c        ****         theVal.u32 = 0;
 8980              		.loc 1 2473 0
 8981 0aae 0023     		movs	r3, #0
 8982 0ab0 7B60     		str	r3, [r7, #4]
2474:main.c        ****         theVal.u32 |= ((sysexBuffer[i] &15) << 28);
 8983              		.loc 1 2474 0
 8984 0ab2 7B68     		ldr	r3, [r7, #4]
 8985 0ab4 2B49     		ldr	r1, .L390
 8986 0ab6 BA69     		ldr	r2, [r7, #24]
 8987 0ab8 0A44     		add	r2, r2, r1
 8988 0aba 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 204


 8989 0abc 1207     		lsls	r2, r2, #28
 8990 0abe 1343     		orrs	r3, r3, r2
 8991 0ac0 7B60     		str	r3, [r7, #4]
2475:main.c        ****         theVal.u32 |= (sysexBuffer[i+1] << 21);
 8992              		.loc 1 2475 0
 8993 0ac2 7B68     		ldr	r3, [r7, #4]
 8994 0ac4 BA69     		ldr	r2, [r7, #24]
 8995 0ac6 0132     		adds	r2, r2, #1
 8996 0ac8 2649     		ldr	r1, .L390
 8997 0aca 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8998 0acc 5205     		lsls	r2, r2, #21
 8999 0ace 1343     		orrs	r3, r3, r2
 9000 0ad0 7B60     		str	r3, [r7, #4]
2476:main.c        ****         theVal.u32 |= (sysexBuffer[i+2] << 14);
 9001              		.loc 1 2476 0
 9002 0ad2 7B68     		ldr	r3, [r7, #4]
 9003 0ad4 BA69     		ldr	r2, [r7, #24]
 9004 0ad6 0232     		adds	r2, r2, #2
 9005 0ad8 2249     		ldr	r1, .L390
 9006 0ada 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 9007 0adc 9203     		lsls	r2, r2, #14
 9008 0ade 1343     		orrs	r3, r3, r2
 9009 0ae0 7B60     		str	r3, [r7, #4]
2477:main.c        ****         theVal.u32 |= (sysexBuffer[i+3] << 7);
 9010              		.loc 1 2477 0
 9011 0ae2 7B68     		ldr	r3, [r7, #4]
 9012 0ae4 BA69     		ldr	r2, [r7, #24]
 9013 0ae6 0332     		adds	r2, r2, #3
 9014 0ae8 1E49     		ldr	r1, .L390
 9015 0aea 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 9016 0aec D201     		lsls	r2, r2, #7
 9017 0aee 1343     		orrs	r3, r3, r2
 9018 0af0 7B60     		str	r3, [r7, #4]
2478:main.c        ****         theVal.u32 |= (sysexBuffer[i+4] & 127);
 9019              		.loc 1 2478 0
 9020 0af2 7A68     		ldr	r2, [r7, #4]
 9021 0af4 BB69     		ldr	r3, [r7, #24]
 9022 0af6 0433     		adds	r3, r3, #4
 9023 0af8 1A49     		ldr	r1, .L390
 9024 0afa CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 9025 0afc 03F07F03 		and	r3, r3, #127
 9026 0b00 1343     		orrs	r3, r3, r2
 9027 0b02 7B60     		str	r3, [r7, #4]
2479:main.c        ****         if (mappingArray[3] == 0) // source id
 9028              		.loc 1 2479 0
 9029 0b04 1F4B     		ldr	r3, .L390+32
 9030 0b06 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 9031 0b08 002B     		cmp	r3, #0
 9032 0b0a 10D1     		bne	.L373
2480:main.c        ****         {
2481:main.c        ****             mappingArray[4] = 0;
 9033              		.loc 1 2481 0
 9034 0b0c 1D4B     		ldr	r3, .L390+32
 9035 0b0e 0022     		movs	r2, #0
 9036 0b10 1A71     		strb	r2, [r3, #4]
2482:main.c        ****             mappingArray[5] = (int16_t)(roundf(theVal.f));
 9037              		.loc 1 2482 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 205


 9038 0b12 7B68     		ldr	r3, [r7, #4]	@ float
 9039 0b14 1846     		mov	r0, r3
 9040 0b16 FFF7FEFF 		bl	roundf
 9041 0b1a 0346     		mov	r3, r0
 9042 0b1c 1846     		mov	r0, r3
 9043 0b1e FFF7FEFF 		bl	__aeabi_f2iz
 9044 0b22 0346     		mov	r3, r0
 9045 0b24 1BB2     		sxth	r3, r3
 9046 0b26 DAB2     		uxtb	r2, r3
 9047 0b28 164B     		ldr	r3, .L390+32
 9048 0b2a 5A71     		strb	r2, [r3, #5]
 9049 0b2c 3EE0     		b	.L374
 9050              	.L373:
2483:main.c        ****         }
2484:main.c        ****         else if (mappingArray[3] == 1) // amount
 9051              		.loc 1 2484 0
 9052 0b2e 154B     		ldr	r3, .L390+32
 9053 0b30 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 9054 0b32 012B     		cmp	r3, #1
 9055 0b34 2AD1     		bne	.L375
 9056              	.LBB52:
2485:main.c        ****         {
2486:main.c        ****             int16_t intVal = (int16_t)(theVal.f * 32767.0f);
 9057              		.loc 1 2486 0
 9058 0b36 7B68     		ldr	r3, [r7, #4]	@ float
 9059 0b38 1349     		ldr	r1, .L390+36
 9060 0b3a 1846     		mov	r0, r3
 9061 0b3c FFF7FEFF 		bl	__aeabi_fmul
 9062 0b40 0346     		mov	r3, r0
 9063 0b42 1846     		mov	r0, r3
 9064 0b44 FFF7FEFF 		bl	__aeabi_f2iz
 9065 0b48 0346     		mov	r3, r0
 9066 0b4a BB82     		strh	r3, [r7, #20]	@ movhi
2487:main.c        ****             mappingArray[4] = intVal >> 8;
 9067              		.loc 1 2487 0
 9068 0b4c B7F91430 		ldrsh	r3, [r7, #20]
 9069 0b50 1B12     		asrs	r3, r3, #8
 9070 0b52 1BB2     		sxth	r3, r3
 9071 0b54 DAB2     		uxtb	r2, r3
 9072 0b56 0B4B     		ldr	r3, .L390+32
 9073 0b58 1A71     		strb	r2, [r3, #4]
2488:main.c        ****             mappingArray[5] = intVal & 0xff;
 9074              		.loc 1 2488 0
 9075 0b5a BB8A     		ldrh	r3, [r7, #20]	@ movhi
 9076 0b5c DAB2     		uxtb	r2, r3
 9077 0b5e 094B     		ldr	r3, .L390+32
 9078 0b60 5A71     		strb	r2, [r3, #5]
 9079              	.LBE52:
 9080 0b62 23E0     		b	.L374
 9081              	.L391:
 9082              		.align	2
 9083              	.L390:
 9084 0b64 00000000 		.word	sysexBuffer
 9085 0b68 00000000 		.word	sysexMessageInProgress
 9086 0b6c 00000000 		.word	singleParamToUpdateHigh
 9087 0b70 00000000 		.word	singleParamToUpdateLow
 9088 0b74 00FF7F47 		.word	1199570688
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 206


 9089 0b78 00000000 		.word	singleParamValueHigh
 9090 0b7c 00000000 		.word	singleParamValueLow
 9091 0b80 00000000 		.word	sendSingleParamUpdate
 9092 0b84 00000000 		.word	mappingArray
 9093 0b88 00FEFF46 		.word	1191181824
 9094              	.L375:
2489:main.c        ****         }
2490:main.c        ****         else // scalar source
2491:main.c        ****         {
2492:main.c        ****             mappingArray[4] = 0;
 9095              		.loc 1 2492 0
 9096 0b8c 114B     		ldr	r3, .L392
 9097 0b8e 0022     		movs	r2, #0
 9098 0b90 1A71     		strb	r2, [r3, #4]
2493:main.c        ****             mappingArray[5] = (int16_t)(roundf(theVal.f));
 9099              		.loc 1 2493 0
 9100 0b92 7B68     		ldr	r3, [r7, #4]	@ float
 9101 0b94 1846     		mov	r0, r3
 9102 0b96 FFF7FEFF 		bl	roundf
 9103 0b9a 0346     		mov	r3, r0
 9104 0b9c 1846     		mov	r0, r3
 9105 0b9e FFF7FEFF 		bl	__aeabi_f2iz
 9106 0ba2 0346     		mov	r3, r0
 9107 0ba4 1BB2     		sxth	r3, r3
 9108 0ba6 DAB2     		uxtb	r2, r3
 9109 0ba8 0A4B     		ldr	r3, .L392
 9110 0baa 5A71     		strb	r2, [r3, #5]
 9111              	.L374:
2494:main.c        ****         }
2495:main.c        ****         
2496:main.c        ****         
2497:main.c        ****         sysexMessageInProgress = 0;
 9112              		.loc 1 2497 0
 9113 0bac 0A4B     		ldr	r3, .L392+4
 9114 0bae 0022     		movs	r2, #0
 9115 0bb0 1A70     		strb	r2, [r3]
2498:main.c        ****         sendMappingChangeUpdate = 1;
 9116              		.loc 1 2498 0
 9117 0bb2 0A4B     		ldr	r3, .L392+8
 9118 0bb4 0122     		movs	r2, #1
 9119 0bb6 1A70     		strb	r2, [r3]
 9120              	.L360:
 9121              	.LBE51:
2499:main.c        ****     }
2500:main.c        **** 
2501:main.c        ****     parsingSysex = 0;
 9122              		.loc 1 2501 0
 9123 0bb8 094B     		ldr	r3, .L392+12
 9124 0bba 0022     		movs	r2, #0
 9125 0bbc 1A70     		strb	r2, [r3]
2502:main.c        ****     sysexPointer = 0;
 9126              		.loc 1 2502 0
 9127 0bbe 094B     		ldr	r3, .L392+16
 9128 0bc0 0022     		movs	r2, #0
 9129 0bc2 1A60     		str	r2, [r3]
2503:main.c        ****     parseThatMF = 0;
 9130              		.loc 1 2503 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 207


 9131 0bc4 084B     		ldr	r3, .L392+20
 9132 0bc6 0022     		movs	r2, #0
 9133 0bc8 1A70     		strb	r2, [r3]
2504:main.c        **** }
 9134              		.loc 1 2504 0
 9135 0bca 00BF     		nop
 9136 0bcc 5437     		adds	r7, r7, #84
 9137              		.cfi_def_cfa_offset 12
 9138 0bce BD46     		mov	sp, r7
 9139              		.cfi_def_cfa_register 13
 9140              		@ sp needed
 9141 0bd0 90BD     		pop	{r4, r7, pc}
 9142              	.L393:
 9143 0bd2 00BF     		.align	2
 9144              	.L392:
 9145 0bd4 00000000 		.word	mappingArray
 9146 0bd8 00000000 		.word	sysexMessageInProgress
 9147 0bdc 00000000 		.word	sendMappingChangeUpdate
 9148 0be0 00000000 		.word	parsingSysex
 9149 0be4 00000000 		.word	sysexPointer
 9150 0be8 00000000 		.word	parseThatMF
 9151              		.cfi_endproc
 9152              	.LFE92:
 9153              		.size	parseSysex, .-parseSysex
 9154              		.comm	tempMIDI,4,4
 9155              		.global	firstSysex
 9156              		.bss
 9157              		.type	firstSysex, %object
 9158              		.size	firstSysex, 1
 9159              	firstSysex:
 9160 0110 00       		.space	1
 9161              		.global	sysexPointerMask
 9162              		.section	.rodata
 9163              		.align	1
 9164              		.type	sysexPointerMask, %object
 9165              		.size	sysexPointerMask, 2
 9166              	sysexPointerMask:
 9167 0432 FF07     		.short	2047
 9168              		.section	.text.USB_callbackLocalMidiEvent,"ax",%progbits
 9169              		.align	2
 9170              		.global	USB_callbackLocalMidiEvent
 9171              		.thumb
 9172              		.thumb_func
 9173              		.type	USB_callbackLocalMidiEvent, %function
 9174              	USB_callbackLocalMidiEvent:
 9175              	.LFB93:
2505:main.c        **** 
2506:main.c        **** volatile uint8_t tempMIDI[4];
2507:main.c        **** volatile uint8_t firstSysex = 0;
2508:main.c        **** const uint16_t sysexPointerMask = 2047;
2509:main.c        **** // this gets called if the Brain gets a MIDI message from the computer host
2510:main.c        **** void USB_callbackLocalMidiEvent(uint8 cable, uint8 *midiMsg) CYREENTRANT
2511:main.c        **** {   
 9176              		.loc 1 2511 0
 9177              		.cfi_startproc
 9178              		@ args = 0, pretend = 0, frame = 16
 9179              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 208


 9180 0000 80B5     		push	{r7, lr}
 9181              		.cfi_def_cfa_offset 8
 9182              		.cfi_offset 7, -8
 9183              		.cfi_offset 14, -4
 9184 0002 84B0     		sub	sp, sp, #16
 9185              		.cfi_def_cfa_offset 24
 9186 0004 00AF     		add	r7, sp, #0
 9187              		.cfi_def_cfa_register 7
 9188 0006 0346     		mov	r3, r0
 9189 0008 3960     		str	r1, [r7]
 9190 000a FB71     		strb	r3, [r7, #7]
2512:main.c        ****     tempMIDI[0] = midiMsg[0];
 9191              		.loc 1 2512 0
 9192 000c 3B68     		ldr	r3, [r7]
 9193 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 9194 0010 484B     		ldr	r3, .L404
 9195 0012 1A70     		strb	r2, [r3]
2513:main.c        ****     tempMIDI[1] = midiMsg[1];
 9196              		.loc 1 2513 0
 9197 0014 3B68     		ldr	r3, [r7]
 9198 0016 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 9199 0018 464B     		ldr	r3, .L404
 9200 001a 5A70     		strb	r2, [r3, #1]
2514:main.c        ****      tempMIDI[2] = midiMsg[2];
 9201              		.loc 1 2514 0
 9202 001c 3B68     		ldr	r3, [r7]
 9203 001e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 9204 0020 444B     		ldr	r3, .L404
 9205 0022 9A70     		strb	r2, [r3, #2]
2515:main.c        ****      tempMIDI[3] = midiMsg[3];
 9206              		.loc 1 2515 0
 9207 0024 3B68     		ldr	r3, [r7]
 9208 0026 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 9209 0028 424B     		ldr	r3, .L404
 9210 002a DA70     		strb	r2, [r3, #3]
2516:main.c        ****     //check that we got here
2517:main.c        ****     
2518:main.c        ****     if ((USB_active) && (USB_VBusPresent()))
 9211              		.loc 1 2518 0
 9212 002c 424B     		ldr	r3, .L404+4
 9213 002e 1B78     		ldrb	r3, [r3]
 9214 0030 DBB2     		uxtb	r3, r3
 9215 0032 002B     		cmp	r3, #0
 9216 0034 7BD0     		beq	.L394
 9217              		.loc 1 2518 0 is_stmt 0 discriminator 1
 9218 0036 FFF7FEFF 		bl	USB_VBusPresent
 9219 003a 0346     		mov	r3, r0
 9220 003c 002B     		cmp	r3, #0
 9221 003e 76D0     		beq	.L394
2519:main.c        ****     {
2520:main.c        ****         if (receivingSysex)
 9222              		.loc 1 2520 0 is_stmt 1
 9223 0040 3E4B     		ldr	r3, .L404+8
 9224 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9225 0044 002B     		cmp	r3, #0
 9226 0046 29D0     		beq	.L396
 9227              	.LBB53:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 209


2521:main.c        ****         {
2522:main.c        ****             for (int i = 0; i < 3; i++)
 9228              		.loc 1 2522 0
 9229 0048 0023     		movs	r3, #0
 9230 004a FB60     		str	r3, [r7, #12]
 9231 004c 22E0     		b	.L397
 9232              	.L400:
2523:main.c        ****             {
2524:main.c        ****                 if (midiMsg[i] < 128)
 9233              		.loc 1 2524 0
 9234 004e FB68     		ldr	r3, [r7, #12]
 9235 0050 3A68     		ldr	r2, [r7]
 9236 0052 1344     		add	r3, r3, r2
 9237 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9238 0056 5BB2     		sxtb	r3, r3
 9239 0058 002B     		cmp	r3, #0
 9240 005a 0EDB     		blt	.L398
2525:main.c        ****                 {
2526:main.c        ****                     sysexBuffer[(sysexPointer++) & sysexPointerMask] = midiMsg[i];
 9241              		.loc 1 2526 0
 9242 005c 384B     		ldr	r3, .L404+12
 9243 005e 1B68     		ldr	r3, [r3]
 9244 0060 5A1C     		adds	r2, r3, #1
 9245 0062 3749     		ldr	r1, .L404+12
 9246 0064 0A60     		str	r2, [r1]
 9247 0066 40F2FF72 		movw	r2, #2047
 9248 006a 1340     		ands	r3, r3, r2
 9249 006c FA68     		ldr	r2, [r7, #12]
 9250 006e 3968     		ldr	r1, [r7]
 9251 0070 0A44     		add	r2, r2, r1
 9252 0072 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 9253 0074 334A     		ldr	r2, .L404+16
 9254 0076 D154     		strb	r1, [r2, r3]
 9255 0078 09E0     		b	.L399
 9256              	.L398:
2527:main.c        ****                 }
2528:main.c        ****                 else
2529:main.c        ****                 {
2530:main.c        ****                     if (midiMsg[i] == USB_MIDI_EOSEX)
 9257              		.loc 1 2530 0
 9258 007a FB68     		ldr	r3, [r7, #12]
 9259 007c 3A68     		ldr	r2, [r7]
 9260 007e 1344     		add	r3, r3, r2
 9261 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9262 0082 F72B     		cmp	r3, #247
 9263 0084 03D1     		bne	.L399
2531:main.c        ****                     {
2532:main.c        ****                         receivingSysex = 0;
 9264              		.loc 1 2532 0
 9265 0086 2D4B     		ldr	r3, .L404+8
 9266 0088 0022     		movs	r2, #0
 9267 008a 1A70     		strb	r2, [r3]
2533:main.c        ****                         //parseSysex();
2534:main.c        ****                         return;
 9268              		.loc 1 2534 0
 9269 008c 4FE0     		b	.L394
 9270              	.L399:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 210


2522:main.c        ****             {
 9271              		.loc 1 2522 0 discriminator 2
 9272 008e FB68     		ldr	r3, [r7, #12]
 9273 0090 0133     		adds	r3, r3, #1
 9274 0092 FB60     		str	r3, [r7, #12]
 9275              	.L397:
2522:main.c        ****             {
 9276              		.loc 1 2522 0 is_stmt 0 discriminator 1
 9277 0094 FB68     		ldr	r3, [r7, #12]
 9278 0096 022B     		cmp	r3, #2
 9279 0098 D9DD     		ble	.L400
 9280 009a 48E0     		b	.L394
 9281              	.L396:
 9282              	.LBE53:
2535:main.c        ****                      }
2536:main.c        ****                 }
2537:main.c        ****             }
2538:main.c        ****         }
2539:main.c        ****         else if (midiMsg[USB_EVENT_BYTE0] == USB_MIDI_SYSEX)
 9283              		.loc 1 2539 0 is_stmt 1
 9284 009c 3B68     		ldr	r3, [r7]
 9285 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9286 00a0 F02B     		cmp	r3, #240
 9287 00a2 44D1     		bne	.L394
2540:main.c        ****         {
2541:main.c        ****             if (!parsingSysex)
 9288              		.loc 1 2541 0
 9289 00a4 284B     		ldr	r3, .L404+20
 9290 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9291 00a8 002B     		cmp	r3, #0
 9292 00aa 40D1     		bne	.L394
2542:main.c        ****             {
2543:main.c        ****                 if (midiMsg[1] == 126) // special message saying that sysex multi-chunk transmissio
 9293              		.loc 1 2543 0
 9294 00ac 3B68     		ldr	r3, [r7]
 9295 00ae 0133     		adds	r3, r3, #1
 9296 00b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9297 00b2 7E2B     		cmp	r3, #126
 9298 00b4 03D1     		bne	.L402
2544:main.c        ****                 {
2545:main.c        ****                     parseThatMF = 1;
 9299              		.loc 1 2545 0
 9300 00b6 254B     		ldr	r3, .L404+24
 9301 00b8 0122     		movs	r2, #1
 9302 00ba 1A70     		strb	r2, [r3]
 9303 00bc 37E0     		b	.L394
 9304              	.L402:
2546:main.c        **** 
2547:main.c        ****                     //sysexPointer = 0;
2548:main.c        ****                 }
2549:main.c        ****                 else if (midiMsg[1] == 0 || midiMsg[1] == 1 || midiMsg[1] == 2 || midiMsg[1] == 3 |
 9305              		.loc 1 2549 0
 9306 00be 3B68     		ldr	r3, [r7]
 9307 00c0 0133     		adds	r3, r3, #1
 9308 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9309 00c4 002B     		cmp	r3, #0
 9310 00c6 13D0     		beq	.L403
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 211


 9311              		.loc 1 2549 0 is_stmt 0 discriminator 1
 9312 00c8 3B68     		ldr	r3, [r7]
 9313 00ca 0133     		adds	r3, r3, #1
 9314 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9315 00ce 012B     		cmp	r3, #1
 9316 00d0 0ED0     		beq	.L403
 9317              		.loc 1 2549 0 discriminator 2
 9318 00d2 3B68     		ldr	r3, [r7]
 9319 00d4 0133     		adds	r3, r3, #1
 9320 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9321 00d8 022B     		cmp	r3, #2
 9322 00da 09D0     		beq	.L403
 9323              		.loc 1 2549 0 discriminator 3
 9324 00dc 3B68     		ldr	r3, [r7]
 9325 00de 0133     		adds	r3, r3, #1
 9326 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9327 00e2 032B     		cmp	r3, #3
 9328 00e4 04D0     		beq	.L403
 9329              		.loc 1 2549 0 discriminator 4
 9330 00e6 3B68     		ldr	r3, [r7]
 9331 00e8 0133     		adds	r3, r3, #1
 9332 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 9333 00ec 042B     		cmp	r3, #4
 9334 00ee 1ED1     		bne	.L394
 9335              	.L403:
2550:main.c        ****                 {
2551:main.c        ****                     receivingSysex = 1;
 9336              		.loc 1 2551 0 is_stmt 1
 9337 00f0 124B     		ldr	r3, .L404+8
 9338 00f2 0122     		movs	r2, #1
 9339 00f4 1A70     		strb	r2, [r3]
2552:main.c        ****                     
2553:main.c        ****                     // if this is the first chunk, put in the first and second elements (following 
2554:main.c        ****                     if (sysexPointer == 0)
 9340              		.loc 1 2554 0
 9341 00f6 124B     		ldr	r3, .L404+12
 9342 00f8 1B68     		ldr	r3, [r3]
 9343 00fa 002B     		cmp	r3, #0
 9344 00fc 17D1     		bne	.L394
2555:main.c        ****                     {
2556:main.c        ****                         sysexBuffer[sysexPointer++ & sysexPointerMask] = midiMsg[1];
 9345              		.loc 1 2556 0
 9346 00fe 104B     		ldr	r3, .L404+12
 9347 0100 1B68     		ldr	r3, [r3]
 9348 0102 5A1C     		adds	r2, r3, #1
 9349 0104 0E49     		ldr	r1, .L404+12
 9350 0106 0A60     		str	r2, [r1]
 9351 0108 40F2FF72 		movw	r2, #2047
 9352 010c 1340     		ands	r3, r3, r2
 9353 010e 3A68     		ldr	r2, [r7]
 9354 0110 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 9355 0112 0C4A     		ldr	r2, .L404+16
 9356 0114 D154     		strb	r1, [r2, r3]
2557:main.c        ****                         sysexBuffer[sysexPointer++ & sysexPointerMask] = midiMsg[2];
 9357              		.loc 1 2557 0
 9358 0116 0A4B     		ldr	r3, .L404+12
 9359 0118 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 212


 9360 011a 5A1C     		adds	r2, r3, #1
 9361 011c 0849     		ldr	r1, .L404+12
 9362 011e 0A60     		str	r2, [r1]
 9363 0120 40F2FF72 		movw	r2, #2047
 9364 0124 1340     		ands	r3, r3, r2
 9365 0126 3A68     		ldr	r2, [r7]
 9366 0128 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 9367 012a 064A     		ldr	r2, .L404+16
 9368 012c D154     		strb	r1, [r2, r3]
 9369              	.L394:
2558:main.c        ****                     }
2559:main.c        ****                 }
2560:main.c        ****             }
2561:main.c        ****         }
2562:main.c        ****         cable = cable; // so it doesn't complain about unused variables
2563:main.c        ****     }
2564:main.c        **** }    
 9370              		.loc 1 2564 0
 9371 012e 1037     		adds	r7, r7, #16
 9372              		.cfi_def_cfa_offset 8
 9373 0130 BD46     		mov	sp, r7
 9374              		.cfi_def_cfa_register 13
 9375              		@ sp needed
 9376 0132 80BD     		pop	{r7, pc}
 9377              	.L405:
 9378              		.align	2
 9379              	.L404:
 9380 0134 00000000 		.word	tempMIDI
 9381 0138 00000000 		.word	USB_active
 9382 013c 00000000 		.word	receivingSysex
 9383 0140 00000000 		.word	sysexPointer
 9384 0144 00000000 		.word	sysexBuffer
 9385 0148 00000000 		.word	parsingSysex
 9386 014c 00000000 		.word	parseThatMF
 9387              		.cfi_endproc
 9388              	.LFE93:
 9389              		.size	USB_callbackLocalMidiEvent, .-USB_callbackLocalMidiEvent
 9390              		.text
 9391              	.Letext0:
 9392              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 9393              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 9394              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 9395              		.file 5 "Generated_Source\\PSoC5/cy_em_eeprom.h"
 9396              		.file 6 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 9397              		.file 7 "oled.h"
 9398              		.file 8 "Generated_Source\\PSoC5/USB_midi.h"
 9399              		.file 9 "Generated_Source\\PSoC5/Em_EEPROM.h"
 9400              		.file 10 "Generated_Source\\PSoC5/I2C_1.h"
 9401              		.file 11 "Generated_Source\\PSoC5/core_cm3.h"
 9402              		.section	.debug_info,"",%progbits
 9403              	.Ldebug_info0:
 9404 0000 CD1D0000 		.4byte	0x1dcd
 9405 0004 0400     		.2byte	0x4
 9406 0006 00000000 		.4byte	.Ldebug_abbrev0
 9407 000a 04       		.byte	0x4
 9408 000b 01       		.uleb128 0x1
 9409 000c E8080000 		.4byte	.LASF316
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 213


 9410 0010 0C       		.byte	0xc
 9411 0011 5B0A0000 		.4byte	.LASF317
 9412 0015 10070000 		.4byte	.LASF318
 9413 0019 00000000 		.4byte	.Ldebug_ranges0+0
 9414 001d 00000000 		.4byte	0
 9415 0021 00000000 		.4byte	.Ldebug_line0
 9416 0025 02       		.uleb128 0x2
 9417 0026 01       		.byte	0x1
 9418 0027 06       		.byte	0x6
 9419 0028 6E030000 		.4byte	.LASF0
 9420 002c 03       		.uleb128 0x3
 9421 002d 12020000 		.4byte	.LASF2
 9422 0031 02       		.byte	0x2
 9423 0032 1D       		.byte	0x1d
 9424 0033 37000000 		.4byte	0x37
 9425 0037 02       		.uleb128 0x2
 9426 0038 01       		.byte	0x1
 9427 0039 08       		.byte	0x8
 9428 003a F5030000 		.4byte	.LASF1
 9429 003e 03       		.uleb128 0x3
 9430 003f BB0D0000 		.4byte	.LASF3
 9431 0043 02       		.byte	0x2
 9432 0044 29       		.byte	0x29
 9433 0045 49000000 		.4byte	0x49
 9434 0049 02       		.uleb128 0x2
 9435 004a 02       		.byte	0x2
 9436 004b 05       		.byte	0x5
 9437 004c 790E0000 		.4byte	.LASF4
 9438 0050 03       		.uleb128 0x3
 9439 0051 21050000 		.4byte	.LASF5
 9440 0055 02       		.byte	0x2
 9441 0056 2B       		.byte	0x2b
 9442 0057 5B000000 		.4byte	0x5b
 9443 005b 02       		.uleb128 0x2
 9444 005c 02       		.byte	0x2
 9445 005d 07       		.byte	0x7
 9446 005e 67100000 		.4byte	.LASF6
 9447 0062 03       		.uleb128 0x3
 9448 0063 92100000 		.4byte	.LASF7
 9449 0067 02       		.byte	0x2
 9450 0068 3F       		.byte	0x3f
 9451 0069 6D000000 		.4byte	0x6d
 9452 006d 02       		.uleb128 0x2
 9453 006e 04       		.byte	0x4
 9454 006f 05       		.byte	0x5
 9455 0070 65020000 		.4byte	.LASF8
 9456 0074 03       		.uleb128 0x3
 9457 0075 DF090000 		.4byte	.LASF9
 9458 0079 02       		.byte	0x2
 9459 007a 41       		.byte	0x41
 9460 007b 7F000000 		.4byte	0x7f
 9461 007f 02       		.uleb128 0x2
 9462 0080 04       		.byte	0x4
 9463 0081 07       		.byte	0x7
 9464 0082 ED070000 		.4byte	.LASF10
 9465 0086 02       		.uleb128 0x2
 9466 0087 08       		.byte	0x8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 214


 9467 0088 05       		.byte	0x5
 9468 0089 EA090000 		.4byte	.LASF11
 9469 008d 02       		.uleb128 0x2
 9470 008e 08       		.byte	0x8
 9471 008f 07       		.byte	0x7
 9472 0090 BC0C0000 		.4byte	.LASF12
 9473 0094 04       		.uleb128 0x4
 9474 0095 04       		.byte	0x4
 9475 0096 05       		.byte	0x5
 9476 0097 696E7400 		.ascii	"int\000"
 9477 009b 02       		.uleb128 0x2
 9478 009c 04       		.byte	0x4
 9479 009d 07       		.byte	0x7
 9480 009e 1D0B0000 		.4byte	.LASF13
 9481 00a2 03       		.uleb128 0x3
 9482 00a3 7A030000 		.4byte	.LASF14
 9483 00a7 03       		.byte	0x3
 9484 00a8 18       		.byte	0x18
 9485 00a9 2C000000 		.4byte	0x2c
 9486 00ad 03       		.uleb128 0x3
 9487 00ae D20E0000 		.4byte	.LASF15
 9488 00b2 03       		.byte	0x3
 9489 00b3 20       		.byte	0x20
 9490 00b4 3E000000 		.4byte	0x3e
 9491 00b8 03       		.uleb128 0x3
 9492 00b9 D30C0000 		.4byte	.LASF16
 9493 00bd 03       		.byte	0x3
 9494 00be 24       		.byte	0x24
 9495 00bf 50000000 		.4byte	0x50
 9496 00c3 03       		.uleb128 0x3
 9497 00c4 99000000 		.4byte	.LASF17
 9498 00c8 03       		.byte	0x3
 9499 00c9 2C       		.byte	0x2c
 9500 00ca 62000000 		.4byte	0x62
 9501 00ce 03       		.uleb128 0x3
 9502 00cf 13100000 		.4byte	.LASF18
 9503 00d3 03       		.byte	0x3
 9504 00d4 30       		.byte	0x30
 9505 00d5 74000000 		.4byte	0x74
 9506 00d9 05       		.uleb128 0x5
 9507 00da 400E0000 		.4byte	.LASF19
 9508 00de 04       		.byte	0x4
 9509 00df E901     		.2byte	0x1e9
 9510 00e1 37000000 		.4byte	0x37
 9511 00e5 05       		.uleb128 0x5
 9512 00e6 FF100000 		.4byte	.LASF20
 9513 00ea 04       		.byte	0x4
 9514 00eb EA01     		.2byte	0x1ea
 9515 00ed 5B000000 		.4byte	0x5b
 9516 00f1 05       		.uleb128 0x5
 9517 00f2 D5000000 		.4byte	.LASF21
 9518 00f6 04       		.byte	0x4
 9519 00f7 EB01     		.2byte	0x1eb
 9520 00f9 7F000000 		.4byte	0x7f
 9521 00fd 02       		.uleb128 0x2
 9522 00fe 04       		.byte	0x4
 9523 00ff 04       		.byte	0x4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 215


 9524 0100 C00A0000 		.4byte	.LASF22
 9525 0104 02       		.uleb128 0x2
 9526 0105 08       		.byte	0x8
 9527 0106 04       		.byte	0x4
 9528 0107 540A0000 		.4byte	.LASF23
 9529 010b 02       		.uleb128 0x2
 9530 010c 01       		.byte	0x1
 9531 010d 08       		.byte	0x8
 9532 010e D5040000 		.4byte	.LASF24
 9533 0112 05       		.uleb128 0x5
 9534 0113 940B0000 		.4byte	.LASF25
 9535 0117 04       		.byte	0x4
 9536 0118 8B02     		.2byte	0x28b
 9537 011a 7F000000 		.4byte	0x7f
 9538 011e 05       		.uleb128 0x5
 9539 011f 570D0000 		.4byte	.LASF26
 9540 0123 04       		.byte	0x4
 9541 0124 9302     		.2byte	0x293
 9542 0126 2A010000 		.4byte	0x12a
 9543 012a 06       		.uleb128 0x6
 9544 012b D9000000 		.4byte	0xd9
 9545 012f 02       		.uleb128 0x2
 9546 0130 08       		.byte	0x8
 9547 0131 04       		.byte	0x4
 9548 0132 3B0C0000 		.4byte	.LASF27
 9549 0136 02       		.uleb128 0x2
 9550 0137 04       		.byte	0x4
 9551 0138 07       		.byte	0x7
 9552 0139 2A000000 		.4byte	.LASF28
 9553 013d 07       		.uleb128 0x7
 9554 013e D9000000 		.4byte	0xd9
 9555 0142 4D010000 		.4byte	0x14d
 9556 0146 08       		.uleb128 0x8
 9557 0147 36010000 		.4byte	0x136
 9558 014b 03       		.byte	0x3
 9559 014c 00       		.byte	0
 9560 014d 09       		.uleb128 0x9
 9561 014e 1C       		.byte	0x1c
 9562 014f 05       		.byte	0x5
 9563 0150 1601     		.2byte	0x116
 9564 0152 BF010000 		.4byte	0x1bf
 9565 0156 0A       		.uleb128 0xa
 9566 0157 82030000 		.4byte	.LASF29
 9567 015b 05       		.byte	0x5
 9568 015c 1B01     		.2byte	0x11b
 9569 015e F1000000 		.4byte	0xf1
 9570 0162 00       		.byte	0
 9571 0163 0A       		.uleb128 0xa
 9572 0164 D8010000 		.4byte	.LASF30
 9573 0168 05       		.byte	0x5
 9574 0169 2001     		.2byte	0x120
 9575 016b F1000000 		.4byte	0xf1
 9576 016f 04       		.byte	0x4
 9577 0170 0A       		.uleb128 0xa
 9578 0171 D0100000 		.4byte	.LASF31
 9579 0175 05       		.byte	0x5
 9580 0176 2301     		.2byte	0x123
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 216


 9581 0178 F1000000 		.4byte	0xf1
 9582 017c 08       		.byte	0x8
 9583 017d 0A       		.uleb128 0xa
 9584 017e E70E0000 		.4byte	.LASF32
 9585 0182 05       		.byte	0x5
 9586 0183 2601     		.2byte	0x126
 9587 0185 F1000000 		.4byte	0xf1
 9588 0189 0C       		.byte	0xc
 9589 018a 0A       		.uleb128 0xa
 9590 018b 3C0F0000 		.4byte	.LASF33
 9591 018f 05       		.byte	0x5
 9592 0190 2B01     		.2byte	0x12b
 9593 0192 F1000000 		.4byte	0xf1
 9594 0196 10       		.byte	0x10
 9595 0197 0A       		.uleb128 0xa
 9596 0198 04020000 		.4byte	.LASF34
 9597 019c 05       		.byte	0x5
 9598 019d 2E01     		.2byte	0x12e
 9599 019f D9000000 		.4byte	0xd9
 9600 01a3 14       		.byte	0x14
 9601 01a4 0A       		.uleb128 0xa
 9602 01a5 3B0A0000 		.4byte	.LASF35
 9603 01a9 05       		.byte	0x5
 9604 01aa 3301     		.2byte	0x133
 9605 01ac D9000000 		.4byte	0xd9
 9606 01b0 15       		.byte	0x15
 9607 01b1 0A       		.uleb128 0xa
 9608 01b2 C5010000 		.4byte	.LASF36
 9609 01b6 05       		.byte	0x5
 9610 01b7 3601     		.2byte	0x136
 9611 01b9 F1000000 		.4byte	0xf1
 9612 01bd 18       		.byte	0x18
 9613 01be 00       		.byte	0
 9614 01bf 05       		.uleb128 0x5
 9615 01c0 D5070000 		.4byte	.LASF37
 9616 01c4 05       		.byte	0x5
 9617 01c5 3701     		.2byte	0x137
 9618 01c7 4D010000 		.4byte	0x14d
 9619 01cb 0B       		.uleb128 0xb
 9620 01cc 01       		.byte	0x1
 9621 01cd 37000000 		.4byte	0x37
 9622 01d1 05       		.byte	0x5
 9623 01d2 5401     		.2byte	0x154
 9624 01d4 F7010000 		.4byte	0x1f7
 9625 01d8 0C       		.uleb128 0xc
 9626 01d9 84000000 		.4byte	.LASF38
 9627 01dd 00       		.byte	0
 9628 01de 0C       		.uleb128 0xc
 9629 01df 25060000 		.4byte	.LASF39
 9630 01e3 01       		.byte	0x1
 9631 01e4 0C       		.uleb128 0xc
 9632 01e5 AB010000 		.4byte	.LASF40
 9633 01e9 02       		.byte	0x2
 9634 01ea 0C       		.uleb128 0xc
 9635 01eb B1030000 		.4byte	.LASF41
 9636 01ef 03       		.byte	0x3
 9637 01f0 0C       		.uleb128 0xc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 217


 9638 01f1 88080000 		.4byte	.LASF42
 9639 01f5 04       		.byte	0x4
 9640 01f6 00       		.byte	0
 9641 01f7 05       		.uleb128 0x5
 9642 01f8 3E010000 		.4byte	.LASF43
 9643 01fc 05       		.byte	0x5
 9644 01fd 5A01     		.2byte	0x15a
 9645 01ff CB010000 		.4byte	0x1cb
 9646 0203 06       		.uleb128 0x6
 9647 0204 A2000000 		.4byte	0xa2
 9648 0208 06       		.uleb128 0x6
 9649 0209 B8000000 		.4byte	0xb8
 9650 020d 03       		.uleb128 0x3
 9651 020e 88050000 		.4byte	.LASF44
 9652 0212 06       		.byte	0x6
 9653 0213 6C       		.byte	0x6c
 9654 0214 9B000000 		.4byte	0x9b
 9655 0218 0D       		.uleb128 0xd
 9656 0219 C7030000 		.4byte	.LASF50
 9657 021d 01       		.byte	0x1
 9658 021e 37000000 		.4byte	0x37
 9659 0222 07       		.byte	0x7
 9660 0223 1D       		.byte	0x1d
 9661 0224 47020000 		.4byte	0x247
 9662 0228 0C       		.uleb128 0xc
 9663 0229 92090000 		.4byte	.LASF45
 9664 022d 00       		.byte	0
 9665 022e 0C       		.uleb128 0xc
 9666 022f 0B030000 		.4byte	.LASF46
 9667 0233 01       		.byte	0x1
 9668 0234 0C       		.uleb128 0xc
 9669 0235 B3000000 		.4byte	.LASF47
 9670 0239 02       		.byte	0x2
 9671 023a 0C       		.uleb128 0xc
 9672 023b 80060000 		.4byte	.LASF48
 9673 023f 03       		.byte	0x3
 9674 0240 0C       		.uleb128 0xc
 9675 0241 36010000 		.4byte	.LASF49
 9676 0245 04       		.byte	0x4
 9677 0246 00       		.byte	0
 9678 0247 0D       		.uleb128 0xd
 9679 0248 2C030000 		.4byte	.LASF51
 9680 024c 01       		.byte	0x1
 9681 024d 37000000 		.4byte	0x37
 9682 0251 01       		.byte	0x1
 9683 0252 28       		.byte	0x28
 9684 0253 7C020000 		.4byte	0x27c
 9685 0257 0C       		.uleb128 0xc
 9686 0258 5B060000 		.4byte	.LASF52
 9687 025c 00       		.byte	0
 9688 025d 0C       		.uleb128 0xc
 9689 025e BE040000 		.4byte	.LASF53
 9690 0262 01       		.byte	0x1
 9691 0263 0C       		.uleb128 0xc
 9692 0264 C50D0000 		.4byte	.LASF54
 9693 0268 02       		.byte	0x2
 9694 0269 0C       		.uleb128 0xc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 218


 9695 026a 720D0000 		.4byte	.LASF55
 9696 026e 03       		.byte	0x3
 9697 026f 0C       		.uleb128 0xc
 9698 0270 7A100000 		.4byte	.LASF56
 9699 0274 04       		.byte	0x4
 9700 0275 0C       		.uleb128 0xc
 9701 0276 22020000 		.4byte	.LASF57
 9702 027a 05       		.byte	0x5
 9703 027b 00       		.byte	0
 9704 027c 0E       		.uleb128 0xe
 9705 027d FE0C0000 		.4byte	.LASF319
 9706 0281 04       		.byte	0x4
 9707 0282 01       		.byte	0x1
 9708 0283 AD       		.byte	0xad
 9709 0284 A6020000 		.4byte	0x2a6
 9710 0288 0F       		.uleb128 0xf
 9711 0289 6600     		.ascii	"f\000"
 9712 028b 01       		.byte	0x1
 9713 028c AE       		.byte	0xae
 9714 028d FD000000 		.4byte	0xfd
 9715 0291 0F       		.uleb128 0xf
 9716 0292 6200     		.ascii	"b\000"
 9717 0294 01       		.byte	0x1
 9718 0295 AF       		.byte	0xaf
 9719 0296 A6020000 		.4byte	0x2a6
 9720 029a 0F       		.uleb128 0xf
 9721 029b 75333200 		.ascii	"u32\000"
 9722 029f 01       		.byte	0x1
 9723 02a0 B0       		.byte	0xb0
 9724 02a1 CE000000 		.4byte	0xce
 9725 02a5 00       		.byte	0
 9726 02a6 07       		.uleb128 0x7
 9727 02a7 A2000000 		.4byte	0xa2
 9728 02ab B6020000 		.4byte	0x2b6
 9729 02af 08       		.uleb128 0x8
 9730 02b0 36010000 		.4byte	0x136
 9731 02b4 03       		.byte	0x3
 9732 02b5 00       		.byte	0
 9733 02b6 10       		.uleb128 0x10
 9734 02b7 A7030000 		.4byte	.LASF111
 9735 02bb 01       		.byte	0x1
 9736 02bc B4       		.byte	0xb4
 9737 02bd 00000000 		.4byte	.LFB64
 9738 02c1 74010000 		.4byte	.LFE64-.LFB64
 9739 02c5 01       		.uleb128 0x1
 9740 02c6 9C       		.byte	0x9c
 9741 02c7 E2020000 		.4byte	0x2e2
 9742 02cb 11       		.uleb128 0x11
 9743 02cc 66000000 		.4byte	.LBB2
 9744 02d0 7A000000 		.4byte	.LBE2-.LBB2
 9745 02d4 12       		.uleb128 0x12
 9746 02d5 6900     		.ascii	"i\000"
 9747 02d7 01       		.byte	0x1
 9748 02d8 BA       		.byte	0xba
 9749 02d9 94000000 		.4byte	0x94
 9750 02dd 02       		.uleb128 0x2
 9751 02de 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 219


 9752 02df 6C       		.sleb128 -20
 9753 02e0 00       		.byte	0
 9754 02e1 00       		.byte	0
 9755 02e2 13       		.uleb128 0x13
 9756 02e3 130D0000 		.4byte	.LASF58
 9757 02e7 01       		.byte	0x1
 9758 02e8 DC       		.byte	0xdc
 9759 02e9 00000000 		.4byte	.LFB65
 9760 02ed 9C000000 		.4byte	.LFE65-.LFB65
 9761 02f1 01       		.uleb128 0x1
 9762 02f2 9C       		.byte	0x9c
 9763 02f3 14       		.uleb128 0x14
 9764 02f4 620B0000 		.4byte	.LASF59
 9765 02f8 01       		.byte	0x1
 9766 02f9 0501     		.2byte	0x105
 9767 02fb 00000000 		.4byte	.LFB66
 9768 02ff 14000000 		.4byte	.LFE66-.LFB66
 9769 0303 01       		.uleb128 0x1
 9770 0304 9C       		.byte	0x9c
 9771 0305 14       		.uleb128 0x14
 9772 0306 A7090000 		.4byte	.LASF60
 9773 030a 01       		.byte	0x1
 9774 030b 1001     		.2byte	0x110
 9775 030d 00000000 		.4byte	.LFB67
 9776 0311 7C000000 		.4byte	.LFE67-.LFB67
 9777 0315 01       		.uleb128 0x1
 9778 0316 9C       		.byte	0x9c
 9779 0317 15       		.uleb128 0x15
 9780 0318 FF040000 		.4byte	.LASF63
 9781 031c 01       		.byte	0x1
 9782 031d 2C01     		.2byte	0x12c
 9783 031f FD000000 		.4byte	0xfd
 9784 0323 00000000 		.4byte	.LFB68
 9785 0327 58000000 		.4byte	.LFE68-.LFB68
 9786 032b 01       		.uleb128 0x1
 9787 032c 9C       		.byte	0x9c
 9788 032d 7D030000 		.4byte	0x37d
 9789 0331 16       		.uleb128 0x16
 9790 0332 6D696E00 		.ascii	"min\000"
 9791 0336 01       		.byte	0x1
 9792 0337 2C01     		.2byte	0x12c
 9793 0339 FD000000 		.4byte	0xfd
 9794 033d 02       		.uleb128 0x2
 9795 033e 91       		.byte	0x91
 9796 033f 6C       		.sleb128 -20
 9797 0340 16       		.uleb128 0x16
 9798 0341 76616C00 		.ascii	"val\000"
 9799 0345 01       		.byte	0x1
 9800 0346 2C01     		.2byte	0x12c
 9801 0348 FD000000 		.4byte	0xfd
 9802 034c 02       		.uleb128 0x2
 9803 034d 91       		.byte	0x91
 9804 034e 68       		.sleb128 -24
 9805 034f 16       		.uleb128 0x16
 9806 0350 6D617800 		.ascii	"max\000"
 9807 0354 01       		.byte	0x1
 9808 0355 2C01     		.2byte	0x12c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 220


 9809 0357 FD000000 		.4byte	0xfd
 9810 035b 02       		.uleb128 0x2
 9811 035c 91       		.byte	0x91
 9812 035d 64       		.sleb128 -28
 9813 035e 17       		.uleb128 0x17
 9814 035f 330A0000 		.4byte	.LASF61
 9815 0363 01       		.byte	0x1
 9816 0364 2E01     		.2byte	0x12e
 9817 0366 FD000000 		.4byte	0xfd
 9818 036a 02       		.uleb128 0x2
 9819 036b 91       		.byte	0x91
 9820 036c 74       		.sleb128 -12
 9821 036d 17       		.uleb128 0x17
 9822 036e 6E040000 		.4byte	.LASF62
 9823 0372 01       		.byte	0x1
 9824 0373 2F01     		.2byte	0x12f
 9825 0375 FD000000 		.4byte	0xfd
 9826 0379 02       		.uleb128 0x2
 9827 037a 91       		.byte	0x91
 9828 037b 70       		.sleb128 -16
 9829 037c 00       		.byte	0
 9830 037d 15       		.uleb128 0x15
 9831 037e B1100000 		.4byte	.LASF64
 9832 0382 01       		.byte	0x1
 9833 0383 4201     		.2byte	0x142
 9834 0385 FD000000 		.4byte	0xfd
 9835 0389 00000000 		.4byte	.LFB69
 9836 038d 68000000 		.4byte	.LFE69-.LFB69
 9837 0391 01       		.uleb128 0x1
 9838 0392 9C       		.byte	0x9c
 9839 0393 A5030000 		.4byte	0x3a5
 9840 0397 16       		.uleb128 0x16
 9841 0398 6600     		.ascii	"f\000"
 9842 039a 01       		.byte	0x1
 9843 039b 4201     		.2byte	0x142
 9844 039d FD000000 		.4byte	0xfd
 9845 03a1 02       		.uleb128 0x2
 9846 03a2 91       		.byte	0x91
 9847 03a3 74       		.sleb128 -12
 9848 03a4 00       		.byte	0
 9849 03a5 15       		.uleb128 0x15
 9850 03a6 7A0C0000 		.4byte	.LASF65
 9851 03aa 01       		.byte	0x1
 9852 03ab 4901     		.2byte	0x149
 9853 03ad FD000000 		.4byte	0xfd
 9854 03b1 00000000 		.4byte	.LFB70
 9855 03b5 4C000000 		.4byte	.LFE70-.LFB70
 9856 03b9 01       		.uleb128 0x1
 9857 03ba 9C       		.byte	0x9c
 9858 03bb CD030000 		.4byte	0x3cd
 9859 03bf 16       		.uleb128 0x16
 9860 03c0 6600     		.ascii	"f\000"
 9861 03c2 01       		.byte	0x1
 9862 03c3 4901     		.2byte	0x149
 9863 03c5 FD000000 		.4byte	0xfd
 9864 03c9 02       		.uleb128 0x2
 9865 03ca 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 221


 9866 03cb 74       		.sleb128 -12
 9867 03cc 00       		.byte	0
 9868 03cd 15       		.uleb128 0x15
 9869 03ce B1070000 		.4byte	.LASF66
 9870 03d2 01       		.byte	0x1
 9871 03d3 4F01     		.2byte	0x14f
 9872 03d5 FD000000 		.4byte	0xfd
 9873 03d9 00000000 		.4byte	.LFB71
 9874 03dd 46000000 		.4byte	.LFE71-.LFB71
 9875 03e1 01       		.uleb128 0x1
 9876 03e2 9C       		.byte	0x9c
 9877 03e3 2F040000 		.4byte	0x42f
 9878 03e7 16       		.uleb128 0x16
 9879 03e8 4100     		.ascii	"A\000"
 9880 03ea 01       		.byte	0x1
 9881 03eb 4F01     		.2byte	0x14f
 9882 03ed FD000000 		.4byte	0xfd
 9883 03f1 02       		.uleb128 0x2
 9884 03f2 91       		.byte	0x91
 9885 03f3 6C       		.sleb128 -20
 9886 03f4 16       		.uleb128 0x16
 9887 03f5 4200     		.ascii	"B\000"
 9888 03f7 01       		.byte	0x1
 9889 03f8 4F01     		.2byte	0x14f
 9890 03fa FD000000 		.4byte	0xfd
 9891 03fe 02       		.uleb128 0x2
 9892 03ff 91       		.byte	0x91
 9893 0400 68       		.sleb128 -24
 9894 0401 18       		.uleb128 0x18
 9895 0402 1C020000 		.4byte	.LASF67
 9896 0406 01       		.byte	0x1
 9897 0407 4F01     		.2byte	0x14f
 9898 0409 FD000000 		.4byte	0xfd
 9899 040d 02       		.uleb128 0x2
 9900 040e 91       		.byte	0x91
 9901 040f 64       		.sleb128 -28
 9902 0410 17       		.uleb128 0x17
 9903 0411 57030000 		.4byte	.LASF68
 9904 0415 01       		.byte	0x1
 9905 0416 5101     		.2byte	0x151
 9906 0418 FD000000 		.4byte	0xfd
 9907 041c 02       		.uleb128 0x2
 9908 041d 91       		.byte	0x91
 9909 041e 74       		.sleb128 -12
 9910 041f 19       		.uleb128 0x19
 9911 0420 6F757400 		.ascii	"out\000"
 9912 0424 01       		.byte	0x1
 9913 0425 5401     		.2byte	0x154
 9914 0427 FD000000 		.4byte	0xfd
 9915 042b 02       		.uleb128 0x2
 9916 042c 91       		.byte	0x91
 9917 042d 70       		.sleb128 -16
 9918 042e 00       		.byte	0
 9919 042f 1A       		.uleb128 0x1a
 9920 0430 6D617000 		.ascii	"map\000"
 9921 0434 01       		.byte	0x1
 9922 0435 C401     		.2byte	0x1c4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 222


 9923 0437 FD000000 		.4byte	0xfd
 9924 043b 00000000 		.4byte	.LFB72
 9925 043f 56000000 		.4byte	.LFE72-.LFB72
 9926 0443 01       		.uleb128 0x1
 9927 0444 9C       		.byte	0x9c
 9928 0445 95040000 		.4byte	0x495
 9929 0449 18       		.uleb128 0x18
 9930 044a 84040000 		.4byte	.LASF69
 9931 044e 01       		.byte	0x1
 9932 044f C401     		.2byte	0x1c4
 9933 0451 FD000000 		.4byte	0xfd
 9934 0455 02       		.uleb128 0x2
 9935 0456 91       		.byte	0x91
 9936 0457 6C       		.sleb128 -20
 9937 0458 18       		.uleb128 0x18
 9938 0459 EC010000 		.4byte	.LASF70
 9939 045d 01       		.byte	0x1
 9940 045e C401     		.2byte	0x1c4
 9941 0460 FD000000 		.4byte	0xfd
 9942 0464 02       		.uleb128 0x2
 9943 0465 91       		.byte	0x91
 9944 0466 68       		.sleb128 -24
 9945 0467 18       		.uleb128 0x18
 9946 0468 D1080000 		.4byte	.LASF71
 9947 046c 01       		.byte	0x1
 9948 046d C401     		.2byte	0x1c4
 9949 046f FD000000 		.4byte	0xfd
 9950 0473 02       		.uleb128 0x2
 9951 0474 91       		.byte	0x91
 9952 0475 64       		.sleb128 -28
 9953 0476 18       		.uleb128 0x18
 9954 0477 A0080000 		.4byte	.LASF72
 9955 047b 01       		.byte	0x1
 9956 047c C401     		.2byte	0x1c4
 9957 047e FD000000 		.4byte	0xfd
 9958 0482 02       		.uleb128 0x2
 9959 0483 91       		.byte	0x91
 9960 0484 60       		.sleb128 -32
 9961 0485 18       		.uleb128 0x18
 9962 0486 B20A0000 		.4byte	.LASF73
 9963 048a 01       		.byte	0x1
 9964 048b C401     		.2byte	0x1c4
 9965 048d FD000000 		.4byte	0xfd
 9966 0491 02       		.uleb128 0x2
 9967 0492 91       		.byte	0x91
 9968 0493 00       		.sleb128 0
 9969 0494 00       		.byte	0
 9970 0495 1B       		.uleb128 0x1b
 9971 0496 9A050000 		.4byte	.LASF106
 9972 049a 01       		.byte	0x1
 9973 049b CF01     		.2byte	0x1cf
 9974 049d 00000000 		.4byte	.LFB73
 9975 04a1 0C000000 		.4byte	.LFE73-.LFB73
 9976 04a5 01       		.uleb128 0x1
 9977 04a6 9C       		.byte	0x9c
 9978 04a7 1C       		.uleb128 0x1c
 9979 04a8 48100000 		.4byte	.LASF320
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 223


 9980 04ac 01       		.byte	0x1
 9981 04ad D501     		.2byte	0x1d5
 9982 04af 00000000 		.4byte	.LFB74
 9983 04b3 0C010000 		.4byte	.LFE74-.LFB74
 9984 04b7 01       		.uleb128 0x1
 9985 04b8 9C       		.byte	0x9c
 9986 04b9 EE040000 		.4byte	0x4ee
 9987 04bd 11       		.uleb128 0x11
 9988 04be 06000000 		.4byte	.LBB3
 9989 04c2 EA000000 		.4byte	.LBE3-.LBB3
 9990 04c6 19       		.uleb128 0x19
 9991 04c7 6900     		.ascii	"i\000"
 9992 04c9 01       		.byte	0x1
 9993 04ca D901     		.2byte	0x1d9
 9994 04cc 94000000 		.4byte	0x94
 9995 04d0 02       		.uleb128 0x2
 9996 04d1 91       		.byte	0x91
 9997 04d2 6C       		.sleb128 -20
 9998 04d3 11       		.uleb128 0x11
 9999 04d4 0C000000 		.4byte	.LBB4
 10000 04d8 D8000000 		.4byte	.LBE4-.LBB4
 10001 04dc 17       		.uleb128 0x17
 10002 04dd F3010000 		.4byte	.LASF74
 10003 04e1 01       		.byte	0x1
 10004 04e2 DC01     		.2byte	0x1dc
 10005 04e4 FD000000 		.4byte	0xfd
 10006 04e8 02       		.uleb128 0x2
 10007 04e9 91       		.byte	0x91
 10008 04ea 68       		.sleb128 -24
 10009 04eb 00       		.byte	0
 10010 04ec 00       		.byte	0
 10011 04ed 00       		.byte	0
 10012 04ee 15       		.uleb128 0x15
 10013 04ef CC020000 		.4byte	.LASF75
 10014 04f3 01       		.byte	0x1
 10015 04f4 E301     		.2byte	0x1e3
 10016 04f6 94000000 		.4byte	0x94
 10017 04fa 00000000 		.4byte	.LFB75
 10018 04fe CC1E0000 		.4byte	.LFE75-.LFB75
 10019 0502 01       		.uleb128 0x1
 10020 0503 9C       		.byte	0x9c
 10021 0504 13090000 		.4byte	0x913
 10022 0508 17       		.uleb128 0x17
 10023 0509 DE100000 		.4byte	.LASF76
 10024 050d 01       		.byte	0x1
 10025 050e EE01     		.2byte	0x1ee
 10026 0510 A2000000 		.4byte	0xa2
 10027 0514 03       		.uleb128 0x3
 10028 0515 91       		.byte	0x91
 10029 0516 8B7F     		.sleb128 -117
 10030 0518 1D       		.uleb128 0x1d
 10031 0519 56000000 		.4byte	.LBB5
 10032 051d 8A010000 		.4byte	.LBE5-.LBB5
 10033 0521 D4050000 		.4byte	0x5d4
 10034 0525 17       		.uleb128 0x17
 10035 0526 16040000 		.4byte	.LASF77
 10036 052a 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 224


 10037 052b FC01     		.2byte	0x1fc
 10038 052d 94000000 		.4byte	0x94
 10039 0531 02       		.uleb128 0x2
 10040 0532 91       		.byte	0x91
 10041 0533 6C       		.sleb128 -20
 10042 0534 1D       		.uleb128 0x1d
 10043 0535 5E000000 		.4byte	.LBB6
 10044 0539 64000000 		.4byte	.LBE6-.LBB6
 10045 053d 51050000 		.4byte	0x551
 10046 0541 17       		.uleb128 0x17
 10047 0542 8D0F0000 		.4byte	.LASF78
 10048 0546 01       		.byte	0x1
 10049 0547 FF01     		.2byte	0x1ff
 10050 0549 94000000 		.4byte	0x94
 10051 054d 02       		.uleb128 0x2
 10052 054e 91       		.byte	0x91
 10053 054f 68       		.sleb128 -24
 10054 0550 00       		.byte	0
 10055 0551 11       		.uleb128 0x11
 10056 0552 C2000000 		.4byte	.LBB7
 10057 0556 0A010000 		.4byte	.LBE7-.LBB7
 10058 055a 19       		.uleb128 0x19
 10059 055b 6900     		.ascii	"i\000"
 10060 055d 01       		.byte	0x1
 10061 055e 0302     		.2byte	0x203
 10062 0560 94000000 		.4byte	0x94
 10063 0564 02       		.uleb128 0x2
 10064 0565 91       		.byte	0x91
 10065 0566 64       		.sleb128 -28
 10066 0567 11       		.uleb128 0x11
 10067 0568 CA000000 		.4byte	.LBB8
 10068 056c EE000000 		.4byte	.LBE8-.LBB8
 10069 0570 17       		.uleb128 0x17
 10070 0571 27040000 		.4byte	.LASF79
 10071 0575 01       		.byte	0x1
 10072 0576 0502     		.2byte	0x205
 10073 0578 94000000 		.4byte	0x94
 10074 057c 03       		.uleb128 0x3
 10075 057d 91       		.byte	0x91
 10076 057e 847F     		.sleb128 -124
 10077 0580 11       		.uleb128 0x11
 10078 0581 D8000000 		.4byte	.LBB9
 10079 0585 E0000000 		.4byte	.LBE9-.LBB9
 10080 0589 19       		.uleb128 0x19
 10081 058a 6A00     		.ascii	"j\000"
 10082 058c 01       		.byte	0x1
 10083 058d 0602     		.2byte	0x206
 10084 058f 94000000 		.4byte	0x94
 10085 0593 02       		.uleb128 0x2
 10086 0594 91       		.byte	0x91
 10087 0595 60       		.sleb128 -32
 10088 0596 11       		.uleb128 0x11
 10089 0597 E0000000 		.4byte	.LBB10
 10090 059b C6000000 		.4byte	.LBE10-.LBB10
 10091 059f 17       		.uleb128 0x17
 10092 05a0 5F030000 		.4byte	.LASF80
 10093 05a4 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 225


 10094 05a5 0902     		.2byte	0x209
 10095 05a7 94000000 		.4byte	0x94
 10096 05ab 03       		.uleb128 0x3
 10097 05ac 91       		.byte	0x91
 10098 05ad 807F     		.sleb128 -128
 10099 05af 17       		.uleb128 0x17
 10100 05b0 BD100000 		.4byte	.LASF81
 10101 05b4 01       		.byte	0x1
 10102 05b5 0A02     		.2byte	0x20a
 10103 05b7 B8000000 		.4byte	0xb8
 10104 05bb 03       		.uleb128 0x3
 10105 05bc 91       		.byte	0x91
 10106 05bd FE7E     		.sleb128 -130
 10107 05bf 17       		.uleb128 0x17
 10108 05c0 280A0000 		.4byte	.LASF82
 10109 05c4 01       		.byte	0x1
 10110 05c5 0B02     		.2byte	0x20b
 10111 05c7 B8000000 		.4byte	0xb8
 10112 05cb 03       		.uleb128 0x3
 10113 05cc 91       		.byte	0x91
 10114 05cd FC7E     		.sleb128 -132
 10115 05cf 00       		.byte	0
 10116 05d0 00       		.byte	0
 10117 05d1 00       		.byte	0
 10118 05d2 00       		.byte	0
 10119 05d3 00       		.byte	0
 10120 05d4 1D       		.uleb128 0x1d
 10121 05d5 E0010000 		.4byte	.LBB11
 10122 05d9 A4000000 		.4byte	.LBE11-.LBB11
 10123 05dd EF050000 		.4byte	0x5ef
 10124 05e1 19       		.uleb128 0x19
 10125 05e2 6900     		.ascii	"i\000"
 10126 05e4 01       		.byte	0x1
 10127 05e5 1202     		.2byte	0x212
 10128 05e7 94000000 		.4byte	0x94
 10129 05eb 02       		.uleb128 0x2
 10130 05ec 91       		.byte	0x91
 10131 05ed 5C       		.sleb128 -36
 10132 05ee 00       		.byte	0
 10133 05ef 1D       		.uleb128 0x1d
 10134 05f0 88020000 		.4byte	.LBB12
 10135 05f4 D4000000 		.4byte	.LBE12-.LBB12
 10136 05f8 53060000 		.4byte	0x653
 10137 05fc 19       		.uleb128 0x19
 10138 05fd 6900     		.ascii	"i\000"
 10139 05ff 01       		.byte	0x1
 10140 0600 1A02     		.2byte	0x21a
 10141 0602 94000000 		.4byte	0x94
 10142 0606 02       		.uleb128 0x2
 10143 0607 91       		.byte	0x91
 10144 0608 58       		.sleb128 -40
 10145 0609 1D       		.uleb128 0x1d
 10146 060a 90020000 		.4byte	.LBB13
 10147 060e 34000000 		.4byte	.LBE13-.LBB13
 10148 0612 24060000 		.4byte	0x624
 10149 0616 19       		.uleb128 0x19
 10150 0617 6A00     		.ascii	"j\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 226


 10151 0619 01       		.byte	0x1
 10152 061a 1C02     		.2byte	0x21c
 10153 061c 94000000 		.4byte	0x94
 10154 0620 02       		.uleb128 0x2
 10155 0621 91       		.byte	0x91
 10156 0622 54       		.sleb128 -44
 10157 0623 00       		.byte	0
 10158 0624 11       		.uleb128 0x11
 10159 0625 C4020000 		.4byte	.LBB14
 10160 0629 7A000000 		.4byte	.LBE14-.LBB14
 10161 062d 19       		.uleb128 0x19
 10162 062e 6A00     		.ascii	"j\000"
 10163 0630 01       		.byte	0x1
 10164 0631 2102     		.2byte	0x221
 10165 0633 94000000 		.4byte	0x94
 10166 0637 02       		.uleb128 0x2
 10167 0638 91       		.byte	0x91
 10168 0639 50       		.sleb128 -48
 10169 063a 11       		.uleb128 0x11
 10170 063b CC020000 		.4byte	.LBB15
 10171 063f 60000000 		.4byte	.LBE15-.LBB15
 10172 0643 19       		.uleb128 0x19
 10173 0644 6B00     		.ascii	"k\000"
 10174 0646 01       		.byte	0x1
 10175 0647 2302     		.2byte	0x223
 10176 0649 94000000 		.4byte	0x94
 10177 064d 02       		.uleb128 0x2
 10178 064e 91       		.byte	0x91
 10179 064f 4C       		.sleb128 -52
 10180 0650 00       		.byte	0
 10181 0651 00       		.byte	0
 10182 0652 00       		.byte	0
 10183 0653 1D       		.uleb128 0x1d
 10184 0654 2E040000 		.4byte	.LBB16
 10185 0658 5C000000 		.4byte	.LBE16-.LBB16
 10186 065c 6E060000 		.4byte	0x66e
 10187 0660 19       		.uleb128 0x19
 10188 0661 7700     		.ascii	"w\000"
 10189 0663 01       		.byte	0x1
 10190 0664 5002     		.2byte	0x250
 10191 0666 94000000 		.4byte	0x94
 10192 066a 02       		.uleb128 0x2
 10193 066b 91       		.byte	0x91
 10194 066c 48       		.sleb128 -56
 10195 066d 00       		.byte	0
 10196 066e 1D       		.uleb128 0x1d
 10197 066f 1C050000 		.4byte	.LBB17
 10198 0673 2A000000 		.4byte	.LBE17-.LBB17
 10199 0677 8C060000 		.4byte	0x68c
 10200 067b 17       		.uleb128 0x17
 10201 067c 34080000 		.4byte	.LASF83
 10202 0680 01       		.byte	0x1
 10203 0681 0F03     		.2byte	0x30f
 10204 0683 A2000000 		.4byte	0xa2
 10205 0687 03       		.uleb128 0x3
 10206 0688 91       		.byte	0x91
 10207 0689 FB7E     		.sleb128 -133
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 227


 10208 068b 00       		.byte	0
 10209 068c 1D       		.uleb128 0x1d
 10210 068d 7C070000 		.4byte	.LBB18
 10211 0691 4E000000 		.4byte	.LBE18-.LBB18
 10212 0695 C1060000 		.4byte	0x6c1
 10213 0699 19       		.uleb128 0x19
 10214 069a 6900     		.ascii	"i\000"
 10215 069c 01       		.byte	0x1
 10216 069d 5703     		.2byte	0x357
 10217 069f 94000000 		.4byte	0x94
 10218 06a3 02       		.uleb128 0x2
 10219 06a4 91       		.byte	0x91
 10220 06a5 44       		.sleb128 -60
 10221 06a6 11       		.uleb128 0x11
 10222 06a7 82070000 		.4byte	.LBB19
 10223 06ab 3C000000 		.4byte	.LBE19-.LBB19
 10224 06af 17       		.uleb128 0x17
 10225 06b0 2C080000 		.4byte	.LASF84
 10226 06b4 01       		.byte	0x1
 10227 06b5 5903     		.2byte	0x359
 10228 06b7 B8000000 		.4byte	0xb8
 10229 06bb 03       		.uleb128 0x3
 10230 06bc 91       		.byte	0x91
 10231 06bd D27E     		.sleb128 -174
 10232 06bf 00       		.byte	0
 10233 06c0 00       		.byte	0
 10234 06c1 1D       		.uleb128 0x1d
 10235 06c2 F0080000 		.4byte	.LBB20
 10236 06c6 D6010000 		.4byte	.LBE20-.LBB20
 10237 06ca DF060000 		.4byte	0x6df
 10238 06ce 17       		.uleb128 0x17
 10239 06cf 5D000000 		.4byte	.LASF85
 10240 06d3 01       		.byte	0x1
 10241 06d4 0704     		.2byte	0x407
 10242 06d6 AD000000 		.4byte	0xad
 10243 06da 03       		.uleb128 0x3
 10244 06db 91       		.byte	0x91
 10245 06dc F87E     		.sleb128 -136
 10246 06de 00       		.byte	0
 10247 06df 1D       		.uleb128 0x1d
 10248 06e0 220B0000 		.4byte	.LBB21
 10249 06e4 18000000 		.4byte	.LBE21-.LBB21
 10250 06e8 FD060000 		.4byte	0x6fd
 10251 06ec 17       		.uleb128 0x17
 10252 06ed 62050000 		.4byte	.LASF86
 10253 06f1 01       		.byte	0x1
 10254 06f2 3504     		.2byte	0x435
 10255 06f4 B8000000 		.4byte	0xb8
 10256 06f8 03       		.uleb128 0x3
 10257 06f9 91       		.byte	0x91
 10258 06fa F67E     		.sleb128 -138
 10259 06fc 00       		.byte	0
 10260 06fd 1D       		.uleb128 0x1d
 10261 06fe AE0B0000 		.4byte	.LBB22
 10262 0702 96020000 		.4byte	.LBE22-.LBB22
 10263 0706 18070000 		.4byte	0x718
 10264 070a 19       		.uleb128 0x19
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 228


 10265 070b 6900     		.ascii	"i\000"
 10266 070d 01       		.byte	0x1
 10267 070e 6004     		.2byte	0x460
 10268 0710 94000000 		.4byte	0x94
 10269 0714 02       		.uleb128 0x2
 10270 0715 91       		.byte	0x91
 10271 0716 40       		.sleb128 -64
 10272 0717 00       		.byte	0
 10273 0718 1D       		.uleb128 0x1d
 10274 0719 4A0E0000 		.4byte	.LBB23
 10275 071d 66000000 		.4byte	.LBE23-.LBB23
 10276 0721 34070000 		.4byte	0x734
 10277 0725 19       		.uleb128 0x19
 10278 0726 6900     		.ascii	"i\000"
 10279 0728 01       		.byte	0x1
 10280 0729 8204     		.2byte	0x482
 10281 072b 94000000 		.4byte	0x94
 10282 072f 03       		.uleb128 0x3
 10283 0730 91       		.byte	0x91
 10284 0731 BC7F     		.sleb128 -68
 10285 0733 00       		.byte	0
 10286 0734 1D       		.uleb128 0x1d
 10287 0735 2A140000 		.4byte	.LBB24
 10288 0739 68000000 		.4byte	.LBE24-.LBB24
 10289 073d 50070000 		.4byte	0x750
 10290 0741 19       		.uleb128 0x19
 10291 0742 6900     		.ascii	"i\000"
 10292 0744 01       		.byte	0x1
 10293 0745 7005     		.2byte	0x570
 10294 0747 94000000 		.4byte	0x94
 10295 074b 03       		.uleb128 0x3
 10296 074c 91       		.byte	0x91
 10297 074d B87F     		.sleb128 -72
 10298 074f 00       		.byte	0
 10299 0750 1D       		.uleb128 0x1d
 10300 0751 9C140000 		.4byte	.LBB25
 10301 0755 98000000 		.4byte	.LBE25-.LBB25
 10302 0759 6C070000 		.4byte	0x76c
 10303 075d 19       		.uleb128 0x19
 10304 075e 6900     		.ascii	"i\000"
 10305 0760 01       		.byte	0x1
 10306 0761 7D05     		.2byte	0x57d
 10307 0763 94000000 		.4byte	0x94
 10308 0767 03       		.uleb128 0x3
 10309 0768 91       		.byte	0x91
 10310 0769 B47F     		.sleb128 -76
 10311 076b 00       		.byte	0
 10312 076c 1D       		.uleb128 0x1d
 10313 076d 4E150000 		.4byte	.LBB26
 10314 0771 9C000000 		.4byte	.LBE26-.LBB26
 10315 0775 88070000 		.4byte	0x788
 10316 0779 19       		.uleb128 0x19
 10317 077a 6900     		.ascii	"i\000"
 10318 077c 01       		.byte	0x1
 10319 077d 9405     		.2byte	0x594
 10320 077f 94000000 		.4byte	0x94
 10321 0783 03       		.uleb128 0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 229


 10322 0784 91       		.byte	0x91
 10323 0785 B07F     		.sleb128 -80
 10324 0787 00       		.byte	0
 10325 0788 1D       		.uleb128 0x1d
 10326 0789 F0150000 		.4byte	.LBB27
 10327 078d 52030000 		.4byte	.LBE27-.LBB27
 10328 0791 FE070000 		.4byte	0x7fe
 10329 0795 19       		.uleb128 0x19
 10330 0796 6900     		.ascii	"i\000"
 10331 0798 01       		.byte	0x1
 10332 0799 A505     		.2byte	0x5a5
 10333 079b 94000000 		.4byte	0x94
 10334 079f 03       		.uleb128 0x3
 10335 07a0 91       		.byte	0x91
 10336 07a1 AC7F     		.sleb128 -84
 10337 07a3 11       		.uleb128 0x11
 10338 07a4 18160000 		.4byte	.LBB28
 10339 07a8 18030000 		.4byte	.LBE28-.LBB28
 10340 07ac 17       		.uleb128 0x17
 10341 07ad DF0B0000 		.4byte	.LASF87
 10342 07b1 01       		.byte	0x1
 10343 07b2 B605     		.2byte	0x5b6
 10344 07b4 FD000000 		.4byte	0xfd
 10345 07b8 03       		.uleb128 0x3
 10346 07b9 91       		.byte	0x91
 10347 07ba F07E     		.sleb128 -144
 10348 07bc 17       		.uleb128 0x17
 10349 07bd C30E0000 		.4byte	.LASF88
 10350 07c1 01       		.byte	0x1
 10351 07c2 C305     		.2byte	0x5c3
 10352 07c4 FD000000 		.4byte	0xfd
 10353 07c8 03       		.uleb128 0x3
 10354 07c9 91       		.byte	0x91
 10355 07ca EC7E     		.sleb128 -148
 10356 07cc 17       		.uleb128 0x17
 10357 07cd 030B0000 		.4byte	.LASF89
 10358 07d1 01       		.byte	0x1
 10359 07d2 C605     		.2byte	0x5c6
 10360 07d4 FD000000 		.4byte	0xfd
 10361 07d8 03       		.uleb128 0x3
 10362 07d9 91       		.byte	0x91
 10363 07da E87E     		.sleb128 -152
 10364 07dc 17       		.uleb128 0x17
 10365 07dd DD050000 		.4byte	.LASF90
 10366 07e1 01       		.byte	0x1
 10367 07e2 C805     		.2byte	0x5c8
 10368 07e4 FD000000 		.4byte	0xfd
 10369 07e8 03       		.uleb128 0x3
 10370 07e9 91       		.byte	0x91
 10371 07ea E47E     		.sleb128 -156
 10372 07ec 17       		.uleb128 0x17
 10373 07ed 510E0000 		.4byte	.LASF91
 10374 07f1 01       		.byte	0x1
 10375 07f2 CA05     		.2byte	0x5ca
 10376 07f4 FD000000 		.4byte	0xfd
 10377 07f8 03       		.uleb128 0x3
 10378 07f9 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 230


 10379 07fa E07E     		.sleb128 -160
 10380 07fc 00       		.byte	0
 10381 07fd 00       		.byte	0
 10382 07fe 1D       		.uleb128 0x1d
 10383 07ff 641A0000 		.4byte	.LBB29
 10384 0803 4E000000 		.4byte	.LBE29-.LBB29
 10385 0807 1A080000 		.4byte	0x81a
 10386 080b 19       		.uleb128 0x19
 10387 080c 6900     		.ascii	"i\000"
 10388 080e 01       		.byte	0x1
 10389 080f 1E06     		.2byte	0x61e
 10390 0811 0D020000 		.4byte	0x20d
 10391 0815 03       		.uleb128 0x3
 10392 0816 91       		.byte	0x91
 10393 0817 A87F     		.sleb128 -88
 10394 0819 00       		.byte	0
 10395 081a 1D       		.uleb128 0x1d
 10396 081b 661B0000 		.4byte	.LBB30
 10397 081f 22000000 		.4byte	.LBE30-.LBB30
 10398 0823 36080000 		.4byte	0x836
 10399 0827 19       		.uleb128 0x19
 10400 0828 6900     		.ascii	"i\000"
 10401 082a 01       		.byte	0x1
 10402 082b 4D06     		.2byte	0x64d
 10403 082d 94000000 		.4byte	0x94
 10404 0831 03       		.uleb128 0x3
 10405 0832 91       		.byte	0x91
 10406 0833 A47F     		.sleb128 -92
 10407 0835 00       		.byte	0
 10408 0836 1D       		.uleb128 0x1d
 10409 0837 881B0000 		.4byte	.LBB31
 10410 083b 8C000000 		.4byte	.LBE31-.LBB31
 10411 083f 52080000 		.4byte	0x852
 10412 0843 19       		.uleb128 0x19
 10413 0844 6900     		.ascii	"i\000"
 10414 0846 01       		.byte	0x1
 10415 0847 5106     		.2byte	0x651
 10416 0849 94000000 		.4byte	0x94
 10417 084d 03       		.uleb128 0x3
 10418 084e 91       		.byte	0x91
 10419 084f A07F     		.sleb128 -96
 10420 0851 00       		.byte	0
 10421 0852 1D       		.uleb128 0x1d
 10422 0853 141C0000 		.4byte	.LBB32
 10423 0857 22000000 		.4byte	.LBE32-.LBB32
 10424 085b 6E080000 		.4byte	0x86e
 10425 085f 19       		.uleb128 0x19
 10426 0860 6900     		.ascii	"i\000"
 10427 0862 01       		.byte	0x1
 10428 0863 5506     		.2byte	0x655
 10429 0865 94000000 		.4byte	0x94
 10430 0869 03       		.uleb128 0x3
 10431 086a 91       		.byte	0x91
 10432 086b 9C7F     		.sleb128 -100
 10433 086d 00       		.byte	0
 10434 086e 1D       		.uleb128 0x1d
 10435 086f C01C0000 		.4byte	.LBB33
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 231


 10436 0873 56000000 		.4byte	.LBE33-.LBB33
 10437 0877 A4080000 		.4byte	0x8a4
 10438 087b 19       		.uleb128 0x19
 10439 087c 6900     		.ascii	"i\000"
 10440 087e 01       		.byte	0x1
 10441 087f 6806     		.2byte	0x668
 10442 0881 94000000 		.4byte	0x94
 10443 0885 03       		.uleb128 0x3
 10444 0886 91       		.byte	0x91
 10445 0887 987F     		.sleb128 -104
 10446 0889 11       		.uleb128 0x11
 10447 088a C61C0000 		.4byte	.LBB34
 10448 088e 44000000 		.4byte	.LBE34-.LBB34
 10449 0892 17       		.uleb128 0x17
 10450 0893 4C0D0000 		.4byte	.LASF92
 10451 0897 01       		.byte	0x1
 10452 0898 6A06     		.2byte	0x66a
 10453 089a 94000000 		.4byte	0x94
 10454 089e 03       		.uleb128 0x3
 10455 089f 91       		.byte	0x91
 10456 08a0 DC7E     		.sleb128 -164
 10457 08a2 00       		.byte	0
 10458 08a3 00       		.byte	0
 10459 08a4 11       		.uleb128 0x11
 10460 08a5 A81D0000 		.4byte	.LBB35
 10461 08a9 B0000000 		.4byte	.LBE35-.LBB35
 10462 08ad 17       		.uleb128 0x17
 10463 08ae A4020000 		.4byte	.LASF93
 10464 08b2 01       		.byte	0x1
 10465 08b3 9106     		.2byte	0x691
 10466 08b5 94000000 		.4byte	0x94
 10467 08b9 03       		.uleb128 0x3
 10468 08ba 91       		.byte	0x91
 10469 08bb D87E     		.sleb128 -168
 10470 08bd 17       		.uleb128 0x17
 10471 08be DC000000 		.4byte	.LASF94
 10472 08c2 01       		.byte	0x1
 10473 08c3 9206     		.2byte	0x692
 10474 08c5 94000000 		.4byte	0x94
 10475 08c9 03       		.uleb128 0x3
 10476 08ca 91       		.byte	0x91
 10477 08cb D47E     		.sleb128 -172
 10478 08cd 17       		.uleb128 0x17
 10479 08ce AA0E0000 		.4byte	.LASF95
 10480 08d2 01       		.byte	0x1
 10481 08d3 9306     		.2byte	0x693
 10482 08d5 94000000 		.4byte	0x94
 10483 08d9 03       		.uleb128 0x3
 10484 08da 91       		.byte	0x91
 10485 08db 947F     		.sleb128 -108
 10486 08dd 1D       		.uleb128 0x1d
 10487 08de B81D0000 		.4byte	.LBB36
 10488 08e2 36000000 		.4byte	.LBE36-.LBB36
 10489 08e6 F9080000 		.4byte	0x8f9
 10490 08ea 19       		.uleb128 0x19
 10491 08eb 6900     		.ascii	"i\000"
 10492 08ed 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 232


 10493 08ee 9406     		.2byte	0x694
 10494 08f0 94000000 		.4byte	0x94
 10495 08f4 03       		.uleb128 0x3
 10496 08f5 91       		.byte	0x91
 10497 08f6 907F     		.sleb128 -112
 10498 08f8 00       		.byte	0
 10499 08f9 11       		.uleb128 0x11
 10500 08fa F21D0000 		.4byte	.LBB37
 10501 08fe 44000000 		.4byte	.LBE37-.LBB37
 10502 0902 19       		.uleb128 0x19
 10503 0903 6900     		.ascii	"i\000"
 10504 0905 01       		.byte	0x1
 10505 0906 9A06     		.2byte	0x69a
 10506 0908 94000000 		.4byte	0x94
 10507 090c 03       		.uleb128 0x3
 10508 090d 91       		.byte	0x91
 10509 090e 8C7F     		.sleb128 -116
 10510 0910 00       		.byte	0
 10511 0911 00       		.byte	0
 10512 0912 00       		.byte	0
 10513 0913 14       		.uleb128 0x14
 10514 0914 09050000 		.4byte	.LASF96
 10515 0918 01       		.byte	0x1
 10516 0919 AF06     		.2byte	0x6af
 10517 091b 00000000 		.4byte	.LFB76
 10518 091f 70000000 		.4byte	.LFE76-.LFB76
 10519 0923 01       		.uleb128 0x1
 10520 0924 9C       		.byte	0x9c
 10521 0925 14       		.uleb128 0x14
 10522 0926 00100000 		.4byte	.LASF97
 10523 092a 01       		.byte	0x1
 10524 092b C406     		.2byte	0x6c4
 10525 092d 00000000 		.4byte	.LFB77
 10526 0931 70010000 		.4byte	.LFE77-.LFB77
 10527 0935 01       		.uleb128 0x1
 10528 0936 9C       		.byte	0x9c
 10529 0937 15       		.uleb128 0x15
 10530 0938 5F080000 		.4byte	.LASF98
 10531 093c 01       		.byte	0x1
 10532 093d EC06     		.2byte	0x6ec
 10533 093f D9000000 		.4byte	0xd9
 10534 0943 00000000 		.4byte	.LFB78
 10535 0947 E0000000 		.4byte	.LFE78-.LFB78
 10536 094b 01       		.uleb128 0x1
 10537 094c 9C       		.byte	0x9c
 10538 094d AC090000 		.4byte	0x9ac
 10539 0951 18       		.uleb128 0x18
 10540 0952 710F0000 		.4byte	.LASF99
 10541 0956 01       		.byte	0x1
 10542 0957 EC06     		.2byte	0x6ec
 10543 0959 D9000000 		.4byte	0xd9
 10544 095d 02       		.uleb128 0x2
 10545 095e 91       		.byte	0x91
 10546 095f 67       		.sleb128 -25
 10547 0960 18       		.uleb128 0x18
 10548 0961 7A010000 		.4byte	.LASF100
 10549 0965 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 233


 10550 0966 EC06     		.2byte	0x6ec
 10551 0968 E5000000 		.4byte	0xe5
 10552 096c 02       		.uleb128 0x2
 10553 096d 91       		.byte	0x91
 10554 096e 64       		.sleb128 -28
 10555 096f 18       		.uleb128 0x18
 10556 0970 A50E0000 		.4byte	.LASF101
 10557 0974 01       		.byte	0x1
 10558 0975 EC06     		.2byte	0x6ec
 10559 0977 A2000000 		.4byte	0xa2
 10560 097b 02       		.uleb128 0x2
 10561 097c 91       		.byte	0x91
 10562 097d 66       		.sleb128 -26
 10563 097e 17       		.uleb128 0x17
 10564 097f 34080000 		.4byte	.LASF83
 10565 0983 01       		.byte	0x1
 10566 0984 EE06     		.2byte	0x6ee
 10567 0986 2A010000 		.4byte	0x12a
 10568 098a 02       		.uleb128 0x2
 10569 098b 91       		.byte	0x91
 10570 098c 6F       		.sleb128 -17
 10571 098d 17       		.uleb128 0x17
 10572 098e 05030000 		.4byte	.LASF102
 10573 0992 01       		.byte	0x1
 10574 0993 EF06     		.2byte	0x6ef
 10575 0995 A2000000 		.4byte	0xa2
 10576 0999 02       		.uleb128 0x2
 10577 099a 91       		.byte	0x91
 10578 099b 77       		.sleb128 -9
 10579 099c 17       		.uleb128 0x17
 10580 099d B80A0000 		.4byte	.LASF103
 10581 09a1 01       		.byte	0x1
 10582 09a2 F006     		.2byte	0x6f0
 10583 09a4 CE000000 		.4byte	0xce
 10584 09a8 02       		.uleb128 0x2
 10585 09a9 91       		.byte	0x91
 10586 09aa 70       		.sleb128 -16
 10587 09ab 00       		.byte	0
 10588 09ac 15       		.uleb128 0x15
 10589 09ad 470C0000 		.4byte	.LASF104
 10590 09b1 01       		.byte	0x1
 10591 09b2 2507     		.2byte	0x725
 10592 09b4 D9000000 		.4byte	0xd9
 10593 09b8 00000000 		.4byte	.LFB79
 10594 09bc E0000000 		.4byte	.LFE79-.LFB79
 10595 09c0 01       		.uleb128 0x1
 10596 09c1 9C       		.byte	0x9c
 10597 09c2 210A0000 		.4byte	0xa21
 10598 09c6 18       		.uleb128 0x18
 10599 09c7 710F0000 		.4byte	.LASF99
 10600 09cb 01       		.byte	0x1
 10601 09cc 2507     		.2byte	0x725
 10602 09ce D9000000 		.4byte	0xd9
 10603 09d2 02       		.uleb128 0x2
 10604 09d3 91       		.byte	0x91
 10605 09d4 6F       		.sleb128 -17
 10606 09d5 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 234


 10607 09d6 7A010000 		.4byte	.LASF100
 10608 09da 01       		.byte	0x1
 10609 09db 2507     		.2byte	0x725
 10610 09dd D9000000 		.4byte	0xd9
 10611 09e1 02       		.uleb128 0x2
 10612 09e2 91       		.byte	0x91
 10613 09e3 6E       		.sleb128 -18
 10614 09e4 18       		.uleb128 0x18
 10615 09e5 A50E0000 		.4byte	.LASF101
 10616 09e9 01       		.byte	0x1
 10617 09ea 2507     		.2byte	0x725
 10618 09ec A2000000 		.4byte	0xa2
 10619 09f0 02       		.uleb128 0x2
 10620 09f1 91       		.byte	0x91
 10621 09f2 6D       		.sleb128 -19
 10622 09f3 17       		.uleb128 0x17
 10623 09f4 34080000 		.4byte	.LASF83
 10624 09f8 01       		.byte	0x1
 10625 09f9 2707     		.2byte	0x727
 10626 09fb 2A010000 		.4byte	0x12a
 10627 09ff 02       		.uleb128 0x2
 10628 0a00 91       		.byte	0x91
 10629 0a01 72       		.sleb128 -14
 10630 0a02 17       		.uleb128 0x17
 10631 0a03 B80A0000 		.4byte	.LASF103
 10632 0a07 01       		.byte	0x1
 10633 0a08 2807     		.2byte	0x728
 10634 0a0a CE000000 		.4byte	0xce
 10635 0a0e 02       		.uleb128 0x2
 10636 0a0f 91       		.byte	0x91
 10637 0a10 74       		.sleb128 -12
 10638 0a11 17       		.uleb128 0x17
 10639 0a12 05030000 		.4byte	.LASF102
 10640 0a16 01       		.byte	0x1
 10641 0a17 2907     		.2byte	0x729
 10642 0a19 A2000000 		.4byte	0xa2
 10643 0a1d 02       		.uleb128 0x2
 10644 0a1e 91       		.byte	0x91
 10645 0a1f 73       		.sleb128 -13
 10646 0a20 00       		.byte	0
 10647 0a21 14       		.uleb128 0x14
 10648 0a22 6C050000 		.4byte	.LASF105
 10649 0a26 01       		.byte	0x1
 10650 0a27 5807     		.2byte	0x758
 10651 0a29 00000000 		.4byte	.LFB80
 10652 0a2d 30000000 		.4byte	.LFE80-.LFB80
 10653 0a31 01       		.uleb128 0x1
 10654 0a32 9C       		.byte	0x9c
 10655 0a33 1E       		.uleb128 0x1e
 10656 0a34 F20E0000 		.4byte	.LASF107
 10657 0a38 01       		.byte	0x1
 10658 0a39 6707     		.2byte	0x767
 10659 0a3b 00000000 		.4byte	.LFB81
 10660 0a3f E8000000 		.4byte	.LFE81-.LFB81
 10661 0a43 01       		.uleb128 0x1
 10662 0a44 9C       		.byte	0x9c
 10663 0a45 14       		.uleb128 0x14
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 235


 10664 0a46 2C050000 		.4byte	.LASF108
 10665 0a4a 01       		.byte	0x1
 10666 0a4b 7C07     		.2byte	0x77c
 10667 0a4d 00000000 		.4byte	.LFB82
 10668 0a51 54000000 		.4byte	.LFE82-.LFB82
 10669 0a55 01       		.uleb128 0x1
 10670 0a56 9C       		.byte	0x9c
 10671 0a57 14       		.uleb128 0x14
 10672 0a58 4E040000 		.4byte	.LASF109
 10673 0a5c 01       		.byte	0x1
 10674 0a5d 8F07     		.2byte	0x78f
 10675 0a5f 00000000 		.4byte	.LFB83
 10676 0a63 C4000000 		.4byte	.LFE83-.LFB83
 10677 0a67 01       		.uleb128 0x1
 10678 0a68 9C       		.byte	0x9c
 10679 0a69 15       		.uleb128 0x15
 10680 0a6a 6C0A0000 		.4byte	.LASF110
 10681 0a6e 01       		.byte	0x1
 10682 0a6f C207     		.2byte	0x7c2
 10683 0a71 FD000000 		.4byte	0xfd
 10684 0a75 00000000 		.4byte	.LFB84
 10685 0a79 98000000 		.4byte	.LFE84-.LFB84
 10686 0a7d 01       		.uleb128 0x1
 10687 0a7e 9C       		.byte	0x9c
 10688 0a7f B80A0000 		.4byte	0xab8
 10689 0a83 16       		.uleb128 0x16
 10690 0a84 5800     		.ascii	"X\000"
 10691 0a86 01       		.byte	0x1
 10692 0a87 C207     		.2byte	0x7c2
 10693 0a89 FD000000 		.4byte	0xfd
 10694 0a8d 02       		.uleb128 0x2
 10695 0a8e 91       		.byte	0x91
 10696 0a8f 64       		.sleb128 -28
 10697 0a90 19       		.uleb128 0x19
 10698 0a91 5900     		.ascii	"Y\000"
 10699 0a93 01       		.byte	0x1
 10700 0a94 C307     		.2byte	0x7c3
 10701 0a96 FD000000 		.4byte	0xfd
 10702 0a9a 02       		.uleb128 0x2
 10703 0a9b 91       		.byte	0x91
 10704 0a9c 70       		.sleb128 -16
 10705 0a9d 19       		.uleb128 0x19
 10706 0a9e 4600     		.ascii	"F\000"
 10707 0aa0 01       		.byte	0x1
 10708 0aa1 C307     		.2byte	0x7c3
 10709 0aa3 FD000000 		.4byte	0xfd
 10710 0aa7 02       		.uleb128 0x2
 10711 0aa8 91       		.byte	0x91
 10712 0aa9 74       		.sleb128 -12
 10713 0aaa 19       		.uleb128 0x19
 10714 0aab 4500     		.ascii	"E\000"
 10715 0aad 01       		.byte	0x1
 10716 0aae C407     		.2byte	0x7c4
 10717 0ab0 94000000 		.4byte	0x94
 10718 0ab4 02       		.uleb128 0x2
 10719 0ab5 91       		.byte	0x91
 10720 0ab6 6C       		.sleb128 -20
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 236


 10721 0ab7 00       		.byte	0
 10722 0ab8 1F       		.uleb128 0x1f
 10723 0ab9 BD000000 		.4byte	.LASF112
 10724 0abd 01       		.byte	0x1
 10725 0abe D607     		.2byte	0x7d6
 10726 0ac0 00000000 		.4byte	.LFB85
 10727 0ac4 D4000000 		.4byte	.LFE85-.LFB85
 10728 0ac8 01       		.uleb128 0x1
 10729 0ac9 9C       		.byte	0x9c
 10730 0aca 150B0000 		.4byte	0xb15
 10731 0ace 18       		.uleb128 0x18
 10732 0acf B10B0000 		.4byte	.LASF113
 10733 0ad3 01       		.byte	0x1
 10734 0ad4 D607     		.2byte	0x7d6
 10735 0ad6 94000000 		.4byte	0x94
 10736 0ada 02       		.uleb128 0x2
 10737 0adb 91       		.byte	0x91
 10738 0adc 64       		.sleb128 -28
 10739 0add 17       		.uleb128 0x17
 10740 0ade 7F0B0000 		.4byte	.LASF114
 10741 0ae2 01       		.byte	0x1
 10742 0ae3 E207     		.2byte	0x7e2
 10743 0ae5 B8000000 		.4byte	0xb8
 10744 0ae9 02       		.uleb128 0x2
 10745 0aea 91       		.byte	0x91
 10746 0aeb 76       		.sleb128 -10
 10747 0aec 11       		.uleb128 0x11
 10748 0aed 18000000 		.4byte	.LBB38
 10749 0af1 86000000 		.4byte	.LBE38-.LBB38
 10750 0af5 17       		.uleb128 0x17
 10751 0af6 8B0D0000 		.4byte	.LASF115
 10752 0afa 01       		.byte	0x1
 10753 0afb E607     		.2byte	0x7e6
 10754 0afd FD000000 		.4byte	0xfd
 10755 0b01 02       		.uleb128 0x2
 10756 0b02 91       		.byte	0x91
 10757 0b03 70       		.sleb128 -16
 10758 0b04 17       		.uleb128 0x17
 10759 0b05 82100000 		.4byte	.LASF116
 10760 0b09 01       		.byte	0x1
 10761 0b0a F507     		.2byte	0x7f5
 10762 0b0c 94000000 		.4byte	0x94
 10763 0b10 02       		.uleb128 0x2
 10764 0b11 91       		.byte	0x91
 10765 0b12 6C       		.sleb128 -20
 10766 0b13 00       		.byte	0
 10767 0b14 00       		.byte	0
 10768 0b15 1F       		.uleb128 0x1f
 10769 0b16 FD060000 		.4byte	.LASF117
 10770 0b1a 01       		.byte	0x1
 10771 0b1b 0108     		.2byte	0x801
 10772 0b1d 00000000 		.4byte	.LFB86
 10773 0b21 1C000000 		.4byte	.LFE86-.LFB86
 10774 0b25 01       		.uleb128 0x1
 10775 0b26 9C       		.byte	0x9c
 10776 0b27 490B0000 		.4byte	0xb49
 10777 0b2b 16       		.uleb128 0x16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 237


 10778 0b2c 636300   		.ascii	"cc\000"
 10779 0b2f 01       		.byte	0x1
 10780 0b30 0108     		.2byte	0x801
 10781 0b32 94000000 		.4byte	0x94
 10782 0b36 02       		.uleb128 0x2
 10783 0b37 91       		.byte	0x91
 10784 0b38 74       		.sleb128 -12
 10785 0b39 16       		.uleb128 0x16
 10786 0b3a 76616C00 		.ascii	"val\000"
 10787 0b3e 01       		.byte	0x1
 10788 0b3f 0108     		.2byte	0x801
 10789 0b41 94000000 		.4byte	0x94
 10790 0b45 02       		.uleb128 0x2
 10791 0b46 91       		.byte	0x91
 10792 0b47 70       		.sleb128 -16
 10793 0b48 00       		.byte	0
 10794 0b49 1F       		.uleb128 0x1f
 10795 0b4a 76090000 		.4byte	.LASF118
 10796 0b4e 01       		.byte	0x1
 10797 0b4f 0708     		.2byte	0x807
 10798 0b51 00000000 		.4byte	.LFB87
 10799 0b55 68000000 		.4byte	.LFE87-.LFB87
 10800 0b59 01       		.uleb128 0x1
 10801 0b5a 9C       		.byte	0x9c
 10802 0b5b 8D0B0000 		.4byte	0xb8d
 10803 0b5f 18       		.uleb128 0x18
 10804 0b60 E5020000 		.4byte	.LASF119
 10805 0b64 01       		.byte	0x1
 10806 0b65 0708     		.2byte	0x807
 10807 0b67 94000000 		.4byte	0x94
 10808 0b6b 02       		.uleb128 0x2
 10809 0b6c 91       		.byte	0x91
 10810 0b6d 74       		.sleb128 -12
 10811 0b6e 18       		.uleb128 0x18
 10812 0b6f 7F0B0000 		.4byte	.LASF114
 10813 0b73 01       		.byte	0x1
 10814 0b74 0708     		.2byte	0x807
 10815 0b76 94000000 		.4byte	0x94
 10816 0b7a 02       		.uleb128 0x2
 10817 0b7b 91       		.byte	0x91
 10818 0b7c 70       		.sleb128 -16
 10819 0b7d 18       		.uleb128 0x18
 10820 0b7e 57080000 		.4byte	.LASF120
 10821 0b82 01       		.byte	0x1
 10822 0b83 0708     		.2byte	0x807
 10823 0b85 94000000 		.4byte	0x94
 10824 0b89 02       		.uleb128 0x2
 10825 0b8a 91       		.byte	0x91
 10826 0b8b 6C       		.sleb128 -20
 10827 0b8c 00       		.byte	0
 10828 0b8d 1F       		.uleb128 0x1f
 10829 0b8e B8050000 		.4byte	.LASF121
 10830 0b92 01       		.byte	0x1
 10831 0b93 1408     		.2byte	0x814
 10832 0b95 00000000 		.4byte	.LFB88
 10833 0b99 68000000 		.4byte	.LFE88-.LFB88
 10834 0b9d 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 238


 10835 0b9e 9C       		.byte	0x9c
 10836 0b9f D10B0000 		.4byte	0xbd1
 10837 0ba3 18       		.uleb128 0x18
 10838 0ba4 E5020000 		.4byte	.LASF119
 10839 0ba8 01       		.byte	0x1
 10840 0ba9 1408     		.2byte	0x814
 10841 0bab 94000000 		.4byte	0x94
 10842 0baf 02       		.uleb128 0x2
 10843 0bb0 91       		.byte	0x91
 10844 0bb1 74       		.sleb128 -12
 10845 0bb2 18       		.uleb128 0x18
 10846 0bb3 9E040000 		.4byte	.LASF122
 10847 0bb7 01       		.byte	0x1
 10848 0bb8 1408     		.2byte	0x814
 10849 0bba 94000000 		.4byte	0x94
 10850 0bbe 02       		.uleb128 0x2
 10851 0bbf 91       		.byte	0x91
 10852 0bc0 70       		.sleb128 -16
 10853 0bc1 18       		.uleb128 0x18
 10854 0bc2 57080000 		.4byte	.LASF120
 10855 0bc6 01       		.byte	0x1
 10856 0bc7 1408     		.2byte	0x814
 10857 0bc9 94000000 		.4byte	0x94
 10858 0bcd 02       		.uleb128 0x2
 10859 0bce 91       		.byte	0x91
 10860 0bcf 6C       		.sleb128 -20
 10861 0bd0 00       		.byte	0
 10862 0bd1 1F       		.uleb128 0x1f
 10863 0bd2 04060000 		.4byte	.LASF123
 10864 0bd6 01       		.byte	0x1
 10865 0bd7 2008     		.2byte	0x820
 10866 0bd9 00000000 		.4byte	.LFB89
 10867 0bdd 68000000 		.4byte	.LFE89-.LFB89
 10868 0be1 01       		.uleb128 0x1
 10869 0be2 9C       		.byte	0x9c
 10870 0be3 150C0000 		.4byte	0xc15
 10871 0be7 18       		.uleb128 0x18
 10872 0be8 A5010000 		.4byte	.LASF124
 10873 0bec 01       		.byte	0x1
 10874 0bed 2008     		.2byte	0x820
 10875 0bef 94000000 		.4byte	0x94
 10876 0bf3 02       		.uleb128 0x2
 10877 0bf4 91       		.byte	0x91
 10878 0bf5 74       		.sleb128 -12
 10879 0bf6 18       		.uleb128 0x18
 10880 0bf7 F2000000 		.4byte	.LASF125
 10881 0bfb 01       		.byte	0x1
 10882 0bfc 2008     		.2byte	0x820
 10883 0bfe 94000000 		.4byte	0x94
 10884 0c02 02       		.uleb128 0x2
 10885 0c03 91       		.byte	0x91
 10886 0c04 70       		.sleb128 -16
 10887 0c05 18       		.uleb128 0x18
 10888 0c06 57080000 		.4byte	.LASF120
 10889 0c0a 01       		.byte	0x1
 10890 0c0b 2008     		.2byte	0x820
 10891 0c0d 94000000 		.4byte	0x94
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 239


 10892 0c11 02       		.uleb128 0x2
 10893 0c12 91       		.byte	0x91
 10894 0c13 6C       		.sleb128 -20
 10895 0c14 00       		.byte	0
 10896 0c15 1F       		.uleb128 0x1f
 10897 0c16 0B0B0000 		.4byte	.LASF126
 10898 0c1a 01       		.byte	0x1
 10899 0c1b 2C08     		.2byte	0x82c
 10900 0c1d 00000000 		.4byte	.LFB90
 10901 0c21 6C000000 		.4byte	.LFE90-.LFB90
 10902 0c25 01       		.uleb128 0x1
 10903 0c26 9C       		.byte	0x9c
 10904 0c27 4A0C0000 		.4byte	0xc4a
 10905 0c2b 16       		.uleb128 0x16
 10906 0c2c 76616C00 		.ascii	"val\000"
 10907 0c30 01       		.byte	0x1
 10908 0c31 2C08     		.2byte	0x82c
 10909 0c33 94000000 		.4byte	0x94
 10910 0c37 02       		.uleb128 0x2
 10911 0c38 91       		.byte	0x91
 10912 0c39 74       		.sleb128 -12
 10913 0c3a 18       		.uleb128 0x18
 10914 0c3b 57080000 		.4byte	.LASF120
 10915 0c3f 01       		.byte	0x1
 10916 0c40 2C08     		.2byte	0x82c
 10917 0c42 94000000 		.4byte	0x94
 10918 0c46 02       		.uleb128 0x2
 10919 0c47 91       		.byte	0x91
 10920 0c48 70       		.sleb128 -16
 10921 0c49 00       		.byte	0
 10922 0c4a 14       		.uleb128 0x14
 10923 0c4b F1020000 		.4byte	.LASF127
 10924 0c4f 01       		.byte	0x1
 10925 0c50 3808     		.2byte	0x838
 10926 0c52 00000000 		.4byte	.LFB91
 10927 0c56 64000000 		.4byte	.LFE91-.LFB91
 10928 0c5a 01       		.uleb128 0x1
 10929 0c5b 9C       		.byte	0x9c
 10930 0c5c 1F       		.uleb128 0x1f
 10931 0c5d 05070000 		.4byte	.LASF128
 10932 0c61 01       		.byte	0x1
 10933 0c62 5008     		.2byte	0x850
 10934 0c64 00000000 		.4byte	.LFB92
 10935 0c68 EC0B0000 		.4byte	.LFE92-.LFB92
 10936 0c6c 01       		.uleb128 0x1
 10937 0c6d 9C       		.byte	0x9c
 10938 0c6e A90E0000 		.4byte	0xea9
 10939 0c72 1D       		.uleb128 0x1d
 10940 0c73 16000000 		.4byte	.LBB39
 10941 0c77 C0050000 		.4byte	.LBE39-.LBB39
 10942 0c7b 230D0000 		.4byte	0xd23
 10943 0c7f 17       		.uleb128 0x17
 10944 0c80 FD010000 		.4byte	.LASF129
 10945 0c84 01       		.byte	0x1
 10946 0c85 5F08     		.2byte	0x85f
 10947 0c87 7C020000 		.4byte	0x27c
 10948 0c8b 03       		.uleb128 0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 240


 10949 0c8c 91       		.byte	0x91
 10950 0c8d B07F     		.sleb128 -80
 10951 0c8f 19       		.uleb128 0x19
 10952 0c90 6900     		.ascii	"i\000"
 10953 0c92 01       		.byte	0x1
 10954 0c93 6008     		.2byte	0x860
 10955 0c95 CE000000 		.4byte	0xce
 10956 0c99 02       		.uleb128 0x2
 10957 0c9a 91       		.byte	0x91
 10958 0c9b 6C       		.sleb128 -20
 10959 0c9c 17       		.uleb128 0x17
 10960 0c9d 76040000 		.4byte	.LASF130
 10961 0ca1 01       		.byte	0x1
 10962 0ca2 6108     		.2byte	0x861
 10963 0ca4 A2000000 		.4byte	0xa2
 10964 0ca8 02       		.uleb128 0x2
 10965 0ca9 91       		.byte	0x91
 10966 0caa 57       		.sleb128 -41
 10967 0cab 17       		.uleb128 0x17
 10968 0cac 0C040000 		.4byte	.LASF131
 10969 0cb0 01       		.byte	0x1
 10970 0cb1 7508     		.2byte	0x875
 10971 0cb3 B8000000 		.4byte	0xb8
 10972 0cb7 02       		.uleb128 0x2
 10973 0cb8 91       		.byte	0x91
 10974 0cb9 54       		.sleb128 -44
 10975 0cba 1D       		.uleb128 0x1d
 10976 0cbb B2000000 		.4byte	.LBB40
 10977 0cbf 76000000 		.4byte	.LBE40-.LBB40
 10978 0cc3 EC0C0000 		.4byte	0xcec
 10979 0cc7 19       		.uleb128 0x19
 10980 0cc8 6A00     		.ascii	"j\000"
 10981 0cca 01       		.byte	0x1
 10982 0ccb 6B08     		.2byte	0x86b
 10983 0ccd 94000000 		.4byte	0x94
 10984 0cd1 02       		.uleb128 0x2
 10985 0cd2 91       		.byte	0x91
 10986 0cd3 68       		.sleb128 -24
 10987 0cd4 11       		.uleb128 0x11
 10988 0cd5 B8000000 		.4byte	.LBB41
 10989 0cd9 64000000 		.4byte	.LBE41-.LBB41
 10990 0cdd 19       		.uleb128 0x19
 10991 0cde 6B00     		.ascii	"k\000"
 10992 0ce0 01       		.byte	0x1
 10993 0ce1 6D08     		.2byte	0x86d
 10994 0ce3 94000000 		.4byte	0x94
 10995 0ce7 02       		.uleb128 0x2
 10996 0ce8 91       		.byte	0x91
 10997 0ce9 64       		.sleb128 -28
 10998 0cea 00       		.byte	0
 10999 0ceb 00       		.byte	0
 11000 0cec 1D       		.uleb128 0x1d
 11001 0ced FA010000 		.4byte	.LBB42
 11002 0cf1 46000000 		.4byte	.LBE42-.LBB42
 11003 0cf5 090D0000 		.4byte	0xd09
 11004 0cf9 17       		.uleb128 0x17
 11005 0cfa E5010000 		.4byte	.LASF132
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 241


 11006 0cfe 01       		.byte	0x1
 11007 0cff 8D08     		.2byte	0x88d
 11008 0d01 B8000000 		.4byte	0xb8
 11009 0d05 02       		.uleb128 0x2
 11010 0d06 91       		.byte	0x91
 11011 0d07 52       		.sleb128 -46
 11012 0d08 00       		.byte	0
 11013 0d09 11       		.uleb128 0x11
 11014 0d0a 66040000 		.4byte	.LBB43
 11015 0d0e 48000000 		.4byte	.LBE43-.LBB43
 11016 0d12 17       		.uleb128 0x17
 11017 0d13 E5010000 		.4byte	.LASF132
 11018 0d17 01       		.byte	0x1
 11019 0d18 C908     		.2byte	0x8c9
 11020 0d1a AD000000 		.4byte	0xad
 11021 0d1e 02       		.uleb128 0x2
 11022 0d1f 91       		.byte	0x91
 11023 0d20 50       		.sleb128 -48
 11024 0d21 00       		.byte	0
 11025 0d22 00       		.byte	0
 11026 0d23 1D       		.uleb128 0x1d
 11027 0d24 E0050000 		.4byte	.LBB44
 11028 0d28 04030000 		.4byte	.LBE44-.LBB44
 11029 0d2c 0B0E0000 		.4byte	0xe0b
 11030 0d30 17       		.uleb128 0x17
 11031 0d31 FD010000 		.4byte	.LASF129
 11032 0d35 01       		.byte	0x1
 11033 0d36 2A09     		.2byte	0x92a
 11034 0d38 7C020000 		.4byte	0x27c
 11035 0d3c 03       		.uleb128 0x3
 11036 0d3d 91       		.byte	0x91
 11037 0d3e AC7F     		.sleb128 -84
 11038 0d40 19       		.uleb128 0x19
 11039 0d41 6900     		.ascii	"i\000"
 11040 0d43 01       		.byte	0x1
 11041 0d44 2B09     		.2byte	0x92b
 11042 0d46 CE000000 		.4byte	0xce
 11043 0d4a 02       		.uleb128 0x2
 11044 0d4b 91       		.byte	0x91
 11045 0d4c 60       		.sleb128 -32
 11046 0d4d 17       		.uleb128 0x17
 11047 0d4e 76040000 		.4byte	.LASF130
 11048 0d52 01       		.byte	0x1
 11049 0d53 2C09     		.2byte	0x92c
 11050 0d55 A2000000 		.4byte	0xa2
 11051 0d59 02       		.uleb128 0x2
 11052 0d5a 91       		.byte	0x91
 11053 0d5b 4F       		.sleb128 -49
 11054 0d5c 1D       		.uleb128 0x1d
 11055 0d5d 14060000 		.4byte	.LBB45
 11056 0d61 82000000 		.4byte	.LBE45-.LBB45
 11057 0d65 790D0000 		.4byte	0xd79
 11058 0d69 17       		.uleb128 0x17
 11059 0d6a 170E0000 		.4byte	.LASF133
 11060 0d6e 01       		.byte	0x1
 11061 0d6f 3009     		.2byte	0x930
 11062 0d71 A2000000 		.4byte	0xa2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 242


 11063 0d75 02       		.uleb128 0x2
 11064 0d76 91       		.byte	0x91
 11065 0d77 4E       		.sleb128 -50
 11066 0d78 00       		.byte	0
 11067 0d79 11       		.uleb128 0x11
 11068 0d7a AC060000 		.4byte	.LBB46
 11069 0d7e BA010000 		.4byte	.LBE46-.LBB46
 11070 0d82 17       		.uleb128 0x17
 11071 0d83 DA0E0000 		.4byte	.LASF134
 11072 0d87 01       		.byte	0x1
 11073 0d88 3B09     		.2byte	0x93b
 11074 0d8a CE000000 		.4byte	0xce
 11075 0d8e 02       		.uleb128 0x2
 11076 0d8f 91       		.byte	0x91
 11077 0d90 5C       		.sleb128 -36
 11078 0d91 11       		.uleb128 0x11
 11079 0d92 B2060000 		.4byte	.LBB47
 11080 0d96 A6010000 		.4byte	.LBE47-.LBB47
 11081 0d9a 17       		.uleb128 0x17
 11082 0d9b 27040000 		.4byte	.LASF79
 11083 0d9f 01       		.byte	0x1
 11084 0da0 3D09     		.2byte	0x93d
 11085 0da2 B8000000 		.4byte	0xb8
 11086 0da6 02       		.uleb128 0x2
 11087 0da7 91       		.byte	0x91
 11088 0da8 4C       		.sleb128 -52
 11089 0da9 11       		.uleb128 0x11
 11090 0daa C0060000 		.4byte	.LBB48
 11091 0dae 98010000 		.4byte	.LBE48-.LBB48
 11092 0db2 17       		.uleb128 0x17
 11093 0db3 D0050000 		.4byte	.LASF135
 11094 0db7 01       		.byte	0x1
 11095 0db8 3E09     		.2byte	0x93e
 11096 0dba CE000000 		.4byte	0xce
 11097 0dbe 02       		.uleb128 0x2
 11098 0dbf 91       		.byte	0x91
 11099 0dc0 58       		.sleb128 -40
 11100 0dc1 11       		.uleb128 0x11
 11101 0dc2 1C070000 		.4byte	.LBB49
 11102 0dc6 2E010000 		.4byte	.LBE49-.LBB49
 11103 0dca 17       		.uleb128 0x17
 11104 0dcb DA030000 		.4byte	.LASF136
 11105 0dcf 01       		.byte	0x1
 11106 0dd0 4809     		.2byte	0x948
 11107 0dd2 B8000000 		.4byte	0xb8
 11108 0dd6 02       		.uleb128 0x2
 11109 0dd7 91       		.byte	0x91
 11110 0dd8 4A       		.sleb128 -54
 11111 0dd9 17       		.uleb128 0x17
 11112 0dda DC0C0000 		.4byte	.LASF137
 11113 0dde 01       		.byte	0x1
 11114 0ddf 4909     		.2byte	0x949
 11115 0de1 A2000000 		.4byte	0xa2
 11116 0de5 02       		.uleb128 0x2
 11117 0de6 91       		.byte	0x91
 11118 0de7 49       		.sleb128 -55
 11119 0de8 17       		.uleb128 0x17
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 243


 11120 0de9 21010000 		.4byte	.LASF138
 11121 0ded 01       		.byte	0x1
 11122 0dee 4A09     		.2byte	0x94a
 11123 0df0 A2000000 		.4byte	0xa2
 11124 0df4 02       		.uleb128 0x2
 11125 0df5 91       		.byte	0x91
 11126 0df6 48       		.sleb128 -56
 11127 0df7 17       		.uleb128 0x17
 11128 0df8 5F030000 		.4byte	.LASF80
 11129 0dfc 01       		.byte	0x1
 11130 0dfd 4D09     		.2byte	0x94d
 11131 0dff B8000000 		.4byte	0xb8
 11132 0e03 02       		.uleb128 0x2
 11133 0e04 91       		.byte	0x91
 11134 0e05 46       		.sleb128 -58
 11135 0e06 00       		.byte	0
 11136 0e07 00       		.byte	0
 11137 0e08 00       		.byte	0
 11138 0e09 00       		.byte	0
 11139 0e0a 00       		.byte	0
 11140 0e0b 1D       		.uleb128 0x1d
 11141 0e0c EE080000 		.4byte	.LBB50
 11142 0e10 14010000 		.4byte	.LBE50-.LBB50
 11143 0e14 560E0000 		.4byte	0xe56
 11144 0e18 17       		.uleb128 0x17
 11145 0e19 FD010000 		.4byte	.LASF129
 11146 0e1d 01       		.byte	0x1
 11147 0e1e 7109     		.2byte	0x971
 11148 0e20 7C020000 		.4byte	0x27c
 11149 0e24 03       		.uleb128 0x3
 11150 0e25 91       		.byte	0x91
 11151 0e26 A87F     		.sleb128 -88
 11152 0e28 19       		.uleb128 0x19
 11153 0e29 6900     		.ascii	"i\000"
 11154 0e2b 01       		.byte	0x1
 11155 0e2c 7209     		.2byte	0x972
 11156 0e2e CE000000 		.4byte	0xce
 11157 0e32 02       		.uleb128 0x2
 11158 0e33 91       		.byte	0x91
 11159 0e34 40       		.sleb128 -64
 11160 0e35 17       		.uleb128 0x17
 11161 0e36 3A050000 		.4byte	.LASF139
 11162 0e3a 01       		.byte	0x1
 11163 0e3b 7B09     		.2byte	0x97b
 11164 0e3d B8000000 		.4byte	0xb8
 11165 0e41 03       		.uleb128 0x3
 11166 0e42 91       		.byte	0x91
 11167 0e43 BE7F     		.sleb128 -66
 11168 0e45 17       		.uleb128 0x17
 11169 0e46 E5010000 		.4byte	.LASF132
 11170 0e4a 01       		.byte	0x1
 11171 0e4b 8909     		.2byte	0x989
 11172 0e4d B8000000 		.4byte	0xb8
 11173 0e51 03       		.uleb128 0x3
 11174 0e52 91       		.byte	0x91
 11175 0e53 BC7F     		.sleb128 -68
 11176 0e55 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 244


 11177 0e56 11       		.uleb128 0x11
 11178 0e57 0E0A0000 		.4byte	.LBB51
 11179 0e5b AA010000 		.4byte	.LBE51-.LBB51
 11180 0e5f 17       		.uleb128 0x17
 11181 0e60 FD010000 		.4byte	.LASF129
 11182 0e64 01       		.byte	0x1
 11183 0e65 9409     		.2byte	0x994
 11184 0e67 7C020000 		.4byte	0x27c
 11185 0e6b 03       		.uleb128 0x3
 11186 0e6c 91       		.byte	0x91
 11187 0e6d A47F     		.sleb128 -92
 11188 0e6f 19       		.uleb128 0x19
 11189 0e70 6900     		.ascii	"i\000"
 11190 0e72 01       		.byte	0x1
 11191 0e73 9509     		.2byte	0x995
 11192 0e75 CE000000 		.4byte	0xce
 11193 0e79 03       		.uleb128 0x3
 11194 0e7a 91       		.byte	0x91
 11195 0e7b B87F     		.sleb128 -72
 11196 0e7d 17       		.uleb128 0x17
 11197 0e7e 3A050000 		.4byte	.LASF139
 11198 0e82 01       		.byte	0x1
 11199 0e83 9E09     		.2byte	0x99e
 11200 0e85 B8000000 		.4byte	0xb8
 11201 0e89 03       		.uleb128 0x3
 11202 0e8a 91       		.byte	0x91
 11203 0e8b B67F     		.sleb128 -74
 11204 0e8d 11       		.uleb128 0x11
 11205 0e8e 360B0000 		.4byte	.LBB52
 11206 0e92 2C000000 		.4byte	.LBE52-.LBB52
 11207 0e96 17       		.uleb128 0x17
 11208 0e97 E5010000 		.4byte	.LASF132
 11209 0e9b 01       		.byte	0x1
 11210 0e9c B609     		.2byte	0x9b6
 11211 0e9e AD000000 		.4byte	0xad
 11212 0ea2 03       		.uleb128 0x3
 11213 0ea3 91       		.byte	0x91
 11214 0ea4 B47F     		.sleb128 -76
 11215 0ea6 00       		.byte	0
 11216 0ea7 00       		.byte	0
 11217 0ea8 00       		.byte	0
 11218 0ea9 1F       		.uleb128 0x1f
 11219 0eaa 8C030000 		.4byte	.LASF140
 11220 0eae 01       		.byte	0x1
 11221 0eaf CE09     		.2byte	0x9ce
 11222 0eb1 00000000 		.4byte	.LFB93
 11223 0eb5 50010000 		.4byte	.LFE93-.LFB93
 11224 0eb9 01       		.uleb128 0x1
 11225 0eba 9C       		.byte	0x9c
 11226 0ebb F50E0000 		.4byte	0xef5
 11227 0ebf 18       		.uleb128 0x18
 11228 0ec0 4E0B0000 		.4byte	.LASF141
 11229 0ec4 01       		.byte	0x1
 11230 0ec5 CE09     		.2byte	0x9ce
 11231 0ec7 D9000000 		.4byte	0xd9
 11232 0ecb 02       		.uleb128 0x2
 11233 0ecc 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 245


 11234 0ecd 6F       		.sleb128 -17
 11235 0ece 18       		.uleb128 0x18
 11236 0ecf 9F0C0000 		.4byte	.LASF142
 11237 0ed3 01       		.byte	0x1
 11238 0ed4 CE09     		.2byte	0x9ce
 11239 0ed6 F50E0000 		.4byte	0xef5
 11240 0eda 02       		.uleb128 0x2
 11241 0edb 91       		.byte	0x91
 11242 0edc 68       		.sleb128 -24
 11243 0edd 11       		.uleb128 0x11
 11244 0ede 48000000 		.4byte	.LBB53
 11245 0ee2 54000000 		.4byte	.LBE53-.LBB53
 11246 0ee6 19       		.uleb128 0x19
 11247 0ee7 6900     		.ascii	"i\000"
 11248 0ee9 01       		.byte	0x1
 11249 0eea DA09     		.2byte	0x9da
 11250 0eec 94000000 		.4byte	0x94
 11251 0ef0 02       		.uleb128 0x2
 11252 0ef1 91       		.byte	0x91
 11253 0ef2 74       		.sleb128 -12
 11254 0ef3 00       		.byte	0
 11255 0ef4 00       		.byte	0
 11256 0ef5 20       		.uleb128 0x20
 11257 0ef6 04       		.byte	0x4
 11258 0ef7 D9000000 		.4byte	0xd9
 11259 0efb 07       		.uleb128 0x7
 11260 0efc D9000000 		.4byte	0xd9
 11261 0f00 0B0F0000 		.4byte	0xf0b
 11262 0f04 08       		.uleb128 0x8
 11263 0f05 36010000 		.4byte	0x136
 11264 0f09 01       		.byte	0x1
 11265 0f0a 00       		.byte	0
 11266 0f0b 21       		.uleb128 0x21
 11267 0f0c DA040000 		.4byte	.LASF143
 11268 0f10 01       		.byte	0x1
 11269 0f11 EB       		.byte	0xeb
 11270 0f12 FB0E0000 		.4byte	0xefb
 11271 0f16 05       		.uleb128 0x5
 11272 0f17 03       		.byte	0x3
 11273 0f18 64000000 		.4byte	eepromArray
 11274 0f1c 22       		.uleb128 0x22
 11275 0f1d 4F0F0000 		.4byte	.LASF144
 11276 0f21 08       		.byte	0x8
 11277 0f22 F3       		.byte	0xf3
 11278 0f23 2A010000 		.4byte	0x12a
 11279 0f27 22       		.uleb128 0x22
 11280 0f28 F10F0000 		.4byte	.LASF145
 11281 0f2c 08       		.byte	0x8
 11282 0f2d F9       		.byte	0xf9
 11283 0f2e 2A010000 		.4byte	0x12a
 11284 0f32 07       		.uleb128 0x7
 11285 0f33 D9000000 		.4byte	0xd9
 11286 0f37 420F0000 		.4byte	0xf42
 11287 0f3b 08       		.uleb128 0x8
 11288 0f3c 36010000 		.4byte	0x136
 11289 0f40 3F       		.byte	0x3f
 11290 0f41 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 246


 11291 0f42 22       		.uleb128 0x22
 11292 0f43 D7080000 		.4byte	.LASF146
 11293 0f47 08       		.byte	0x8
 11294 0f48 FA       		.byte	0xfa
 11295 0f49 320F0000 		.4byte	0xf32
 11296 0f4d 22       		.uleb128 0x22
 11297 0f4e 52050000 		.4byte	.LASF147
 11298 0f52 08       		.byte	0x8
 11299 0f53 FE       		.byte	0xfe
 11300 0f54 2A010000 		.4byte	0x12a
 11301 0f58 22       		.uleb128 0x22
 11302 0f59 940F0000 		.4byte	.LASF148
 11303 0f5d 08       		.byte	0x8
 11304 0f5e FF       		.byte	0xff
 11305 0f5f 320F0000 		.4byte	0xf32
 11306 0f63 22       		.uleb128 0x22
 11307 0f64 A1000000 		.4byte	.LASF149
 11308 0f68 09       		.byte	0x9
 11309 0f69 82       		.byte	0x82
 11310 0f6a BF010000 		.4byte	0x1bf
 11311 0f6e 07       		.uleb128 0x7
 11312 0f6f 7F0F0000 		.4byte	0xf7f
 11313 0f73 7F0F0000 		.4byte	0xf7f
 11314 0f77 23       		.uleb128 0x23
 11315 0f78 36010000 		.4byte	0x136
 11316 0f7c FF03     		.2byte	0x3ff
 11317 0f7e 00       		.byte	0
 11318 0f7f 24       		.uleb128 0x24
 11319 0f80 A2000000 		.4byte	0xa2
 11320 0f84 25       		.uleb128 0x25
 11321 0f85 FF070000 		.4byte	.LASF150
 11322 0f89 01       		.byte	0x1
 11323 0f8a F8       		.byte	0xf8
 11324 0f8b 950F0000 		.4byte	0xf95
 11325 0f8f 05       		.uleb128 0x5
 11326 0f90 03       		.byte	0x3
 11327 0f91 00000000 		.4byte	Em_EEPROM_em_EepromStorage
 11328 0f95 24       		.uleb128 0x24
 11329 0f96 6E0F0000 		.4byte	0xf6e
 11330 0f9a 22       		.uleb128 0x22
 11331 0f9b 4D060000 		.4byte	.LASF151
 11332 0f9f 0A       		.byte	0xa
 11333 0fa0 F9       		.byte	0xf9
 11334 0fa1 D9000000 		.4byte	0xd9
 11335 0fa5 26       		.uleb128 0x26
 11336 0fa6 8E0A0000 		.4byte	.LASF152
 11337 0faa 0B       		.byte	0xb
 11338 0fab 1207     		.2byte	0x712
 11339 0fad B10F0000 		.4byte	0xfb1
 11340 0fb1 06       		.uleb128 0x6
 11341 0fb2 C3000000 		.4byte	0xc3
 11342 0fb6 07       		.uleb128 0x7
 11343 0fb7 03020000 		.4byte	0x203
 11344 0fbb C60F0000 		.4byte	0xfc6
 11345 0fbf 08       		.uleb128 0x8
 11346 0fc0 36010000 		.4byte	0x136
 11347 0fc4 FF       		.byte	0xff
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 247


 11348 0fc5 00       		.byte	0
 11349 0fc6 27       		.uleb128 0x27
 11350 0fc7 04010000 		.4byte	.LASF153
 11351 0fcb 01       		.byte	0x1
 11352 0fcc 6001     		.2byte	0x160
 11353 0fce D80F0000 		.4byte	0xfd8
 11354 0fd2 05       		.uleb128 0x5
 11355 0fd3 03       		.byte	0x3
 11356 0fd4 00000000 		.4byte	I2Cbuff1
 11357 0fd8 06       		.uleb128 0x6
 11358 0fd9 B60F0000 		.4byte	0xfb6
 11359 0fdd 07       		.uleb128 0x7
 11360 0fde A2000000 		.4byte	0xa2
 11361 0fe2 EE0F0000 		.4byte	0xfee
 11362 0fe6 23       		.uleb128 0x23
 11363 0fe7 36010000 		.4byte	0x136
 11364 0feb FF07     		.2byte	0x7ff
 11365 0fed 00       		.byte	0
 11366 0fee 25       		.uleb128 0x25
 11367 0fef F20D0000 		.4byte	.LASF154
 11368 0ff3 01       		.byte	0x1
 11369 0ff4 17       		.byte	0x17
 11370 0ff5 DD0F0000 		.4byte	0xfdd
 11371 0ff9 05       		.uleb128 0x5
 11372 0ffa 03       		.byte	0x3
 11373 0ffb 00000000 		.4byte	sysexBuffer
 11374 0fff 25       		.uleb128 0x25
 11375 1000 4A030000 		.4byte	.LASF155
 11376 1004 01       		.byte	0x1
 11377 1005 18       		.byte	0x18
 11378 1006 CE000000 		.4byte	0xce
 11379 100a 05       		.uleb128 0x5
 11380 100b 03       		.byte	0x3
 11381 100c 00000000 		.4byte	sysexPointer
 11382 1010 25       		.uleb128 0x25
 11383 1011 3F0B0000 		.4byte	.LASF156
 11384 1015 01       		.byte	0x1
 11385 1016 19       		.byte	0x19
 11386 1017 A2000000 		.4byte	0xa2
 11387 101b 05       		.uleb128 0x5
 11388 101c 03       		.byte	0x3
 11389 101d 00000000 		.4byte	receivingSysex
 11390 1021 25       		.uleb128 0x25
 11391 1022 66060000 		.4byte	.LASF157
 11392 1026 01       		.byte	0x1
 11393 1027 1A       		.byte	0x1a
 11394 1028 A2000000 		.4byte	0xa2
 11395 102c 05       		.uleb128 0x5
 11396 102d 03       		.byte	0x3
 11397 102e 00000000 		.4byte	parsingSysex
 11398 1032 07       		.uleb128 0x7
 11399 1033 03020000 		.4byte	0x203
 11400 1037 43100000 		.4byte	0x1043
 11401 103b 23       		.uleb128 0x23
 11402 103c 36010000 		.4byte	0x136
 11403 1040 FF07     		.2byte	0x7ff
 11404 1042 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 248


 11405 1043 25       		.uleb128 0x25
 11406 1044 13000000 		.4byte	.LASF158
 11407 1048 01       		.byte	0x1
 11408 1049 1B       		.byte	0x1b
 11409 104a 54100000 		.4byte	0x1054
 11410 104e 05       		.uleb128 0x5
 11411 104f 03       		.byte	0x3
 11412 1050 00000000 		.4byte	presetArray
 11413 1054 06       		.uleb128 0x6
 11414 1055 32100000 		.4byte	0x1032
 11415 1059 25       		.uleb128 0x25
 11416 105a 90020000 		.4byte	.LASF159
 11417 105e 01       		.byte	0x1
 11418 105f 1C       		.byte	0x1c
 11419 1060 A2000000 		.4byte	0xa2
 11420 1064 05       		.uleb128 0x5
 11421 1065 03       		.byte	0x3
 11422 1066 00000000 		.4byte	presetNumberToWrite
 11423 106a 25       		.uleb128 0x25
 11424 106b 5C0D0000 		.4byte	.LASF160
 11425 106f 01       		.byte	0x1
 11426 1070 1D       		.byte	0x1d
 11427 1071 A2000000 		.4byte	0xa2
 11428 1075 05       		.uleb128 0x5
 11429 1076 03       		.byte	0x3
 11430 1077 00000000 		.4byte	copedentNumberToWrite
 11431 107b 25       		.uleb128 0x25
 11432 107c 35020000 		.4byte	.LASF161
 11433 1080 01       		.byte	0x1
 11434 1081 1E       		.byte	0x1e
 11435 1082 A2000000 		.4byte	0xa2
 11436 1086 05       		.uleb128 0x5
 11437 1087 03       		.byte	0x3
 11438 1088 00000000 		.4byte	sendMessageEnd
 11439 108c 25       		.uleb128 0x25
 11440 108d DC0D0000 		.4byte	.LASF162
 11441 1091 01       		.byte	0x1
 11442 1092 20       		.byte	0x20
 11443 1093 A2000000 		.4byte	0xa2
 11444 1097 05       		.uleb128 0x5
 11445 1098 03       		.byte	0x3
 11446 1099 00000000 		.4byte	sendSingleParamUpdate
 11447 109d 25       		.uleb128 0x25
 11448 109e 610E0000 		.4byte	.LASF163
 11449 10a2 01       		.byte	0x1
 11450 10a3 21       		.byte	0x21
 11451 10a4 A2000000 		.4byte	0xa2
 11452 10a8 05       		.uleb128 0x5
 11453 10a9 03       		.byte	0x3
 11454 10aa 00000000 		.4byte	singleParamToUpdateHigh
 11455 10ae 25       		.uleb128 0x25
 11456 10af 9B0A0000 		.4byte	.LASF164
 11457 10b3 01       		.byte	0x1
 11458 10b4 22       		.byte	0x22
 11459 10b5 A2000000 		.4byte	0xa2
 11460 10b9 05       		.uleb128 0x5
 11461 10ba 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 249


 11462 10bb 00000000 		.4byte	singleParamToUpdateLow
 11463 10bf 25       		.uleb128 0x25
 11464 10c0 790A0000 		.4byte	.LASF165
 11465 10c4 01       		.byte	0x1
 11466 10c5 23       		.byte	0x23
 11467 10c6 A2000000 		.4byte	0xa2
 11468 10ca 05       		.uleb128 0x5
 11469 10cb 03       		.byte	0x3
 11470 10cc 00000000 		.4byte	singleParamValueHigh
 11471 10d0 25       		.uleb128 0x25
 11472 10d1 F0050000 		.4byte	.LASF166
 11473 10d5 01       		.byte	0x1
 11474 10d6 24       		.byte	0x24
 11475 10d7 A2000000 		.4byte	0xa2
 11476 10db 05       		.uleb128 0x5
 11477 10dc 03       		.byte	0x3
 11478 10dd 00000000 		.4byte	singleParamValueLow
 11479 10e1 25       		.uleb128 0x25
 11480 10e2 270D0000 		.4byte	.LASF167
 11481 10e6 01       		.byte	0x1
 11482 10e7 26       		.byte	0x26
 11483 10e8 A2000000 		.4byte	0xa2
 11484 10ec 05       		.uleb128 0x5
 11485 10ed 03       		.byte	0x3
 11486 10ee 00000000 		.4byte	sendMappingChangeUpdate
 11487 10f2 25       		.uleb128 0x25
 11488 10f3 00000000 		.4byte	.LASF168
 11489 10f7 01       		.byte	0x1
 11490 10f8 31       		.byte	0x31
 11491 10f9 A2000000 		.4byte	0xa2
 11492 10fd 05       		.uleb128 0x5
 11493 10fe 03       		.byte	0x3
 11494 10ff 00000000 		.4byte	presetArraySection
 11495 1103 25       		.uleb128 0x25
 11496 1104 C9090000 		.4byte	.LASF169
 11497 1108 01       		.byte	0x1
 11498 1109 33       		.byte	0x33
 11499 110a B8000000 		.4byte	0xb8
 11500 110e 05       		.uleb128 0x5
 11501 110f 03       		.byte	0x3
 11502 1110 00000000 		.4byte	messageArraySendCount
 11503 1114 25       		.uleb128 0x25
 11504 1115 830E0000 		.4byte	.LASF170
 11505 1119 01       		.byte	0x1
 11506 111a 34       		.byte	0x34
 11507 111b B8000000 		.4byte	0xb8
 11508 111f 05       		.uleb128 0x5
 11509 1120 03       		.byte	0x3
 11510 1121 00000000 		.4byte	messageArraySize
 11511 1125 25       		.uleb128 0x25
 11512 1126 DB060000 		.4byte	.LASF171
 11513 112a 01       		.byte	0x1
 11514 112b 36       		.byte	0x36
 11515 112c A2000000 		.4byte	0xa2
 11516 1130 05       		.uleb128 0x5
 11517 1131 03       		.byte	0x3
 11518 1132 00000000 		.4byte	sysexMessageInProgress
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 250


 11519 1136 25       		.uleb128 0x25
 11520 1137 FE0D0000 		.4byte	.LASF172
 11521 113b 01       		.byte	0x1
 11522 113c 38       		.byte	0x38
 11523 113d A2000000 		.4byte	0xa2
 11524 1141 05       		.uleb128 0x5
 11525 1142 03       		.byte	0x3
 11526 1143 00000000 		.4byte	bufCount
 11527 1147 25       		.uleb128 0x25
 11528 1148 33000000 		.4byte	.LASF173
 11529 114c 01       		.byte	0x1
 11530 114d 39       		.byte	0x39
 11531 114e 03020000 		.4byte	0x203
 11532 1152 05       		.uleb128 0x5
 11533 1153 03       		.byte	0x3
 11534 1154 00000000 		.4byte	sendingMessage
 11535 1158 25       		.uleb128 0x25
 11536 1159 22030000 		.4byte	.LASF174
 11537 115d 01       		.byte	0x1
 11538 115e 3A       		.byte	0x3a
 11539 115f 03020000 		.4byte	0x203
 11540 1163 05       		.uleb128 0x5
 11541 1164 03       		.byte	0x3
 11542 1165 00000000 		.4byte	sendKnobs
 11543 1169 25       		.uleb128 0x25
 11544 116a 6E020000 		.4byte	.LASF175
 11545 116e 01       		.byte	0x1
 11546 116f 3B       		.byte	0x3b
 11547 1170 CE000000 		.4byte	0xce
 11548 1174 05       		.uleb128 0x5
 11549 1175 03       		.byte	0x3
 11550 1176 00000000 		.4byte	currentFloat
 11551 117a 25       		.uleb128 0x25
 11552 117b D1030000 		.4byte	.LASF176
 11553 117f 01       		.byte	0x1
 11554 1180 3C       		.byte	0x3c
 11555 1181 CE000000 		.4byte	0xce
 11556 1185 05       		.uleb128 0x5
 11557 1186 03       		.byte	0x3
 11558 1187 00000000 		.4byte	mapCount
 11559 118b 25       		.uleb128 0x25
 11560 118c 94010000 		.4byte	.LASF177
 11561 1190 01       		.byte	0x1
 11562 1191 3E       		.byte	0x3e
 11563 1192 B8000000 		.4byte	0xb8
 11564 1196 05       		.uleb128 0x5
 11565 1197 03       		.byte	0x3
 11566 1198 00000000 		.4byte	valsCount
 11567 119c 25       		.uleb128 0x25
 11568 119d 5A040000 		.4byte	.LASF178
 11569 11a1 01       		.byte	0x1
 11570 11a2 3F       		.byte	0x3f
 11571 11a3 B8000000 		.4byte	0xb8
 11572 11a7 05       		.uleb128 0x5
 11573 11a8 03       		.byte	0x3
 11574 11a9 00000000 		.4byte	mapCountExpectation
 11575 11ad 25       		.uleb128 0x25
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 251


 11576 11ae F8000000 		.4byte	.LASF179
 11577 11b2 01       		.byte	0x1
 11578 11b3 40       		.byte	0x40
 11579 11b4 B8000000 		.4byte	0xb8
 11580 11b8 05       		.uleb128 0x5
 11581 11b9 03       		.byte	0x3
 11582 11ba 00000000 		.4byte	numMappings
 11583 11be 25       		.uleb128 0x25
 11584 11bf AF0D0000 		.4byte	.LASF180
 11585 11c3 01       		.byte	0x1
 11586 11c4 41       		.byte	0x41
 11587 11c5 03020000 		.4byte	0x203
 11588 11c9 05       		.uleb128 0x5
 11589 11ca 03       		.byte	0x3
 11590 11cb 00000000 		.4byte	parseThatMF
 11591 11cf 25       		.uleb128 0x25
 11592 11d0 03040000 		.4byte	.LASF181
 11593 11d4 01       		.byte	0x1
 11594 11d5 42       		.byte	0x42
 11595 11d6 E0110000 		.4byte	0x11e0
 11596 11da 05       		.uleb128 0x5
 11597 11db 03       		.byte	0x3
 11598 11dc 00000000 		.4byte	valCheck
 11599 11e0 06       		.uleb128 0x6
 11600 11e1 FD000000 		.4byte	0xfd
 11601 11e5 25       		.uleb128 0x25
 11602 11e6 E50C0000 		.4byte	.LASF182
 11603 11ea 01       		.byte	0x1
 11604 11eb 43       		.byte	0x43
 11605 11ec E0110000 		.4byte	0x11e0
 11606 11f0 05       		.uleb128 0x5
 11607 11f1 03       		.byte	0x3
 11608 11f2 00000000 		.4byte	testVal
 11609 11f6 25       		.uleb128 0x25
 11610 11f7 7D080000 		.4byte	.LASF183
 11611 11fb 01       		.byte	0x1
 11612 11fc 45       		.byte	0x45
 11613 11fd 94000000 		.4byte	0x94
 11614 1201 05       		.uleb128 0x5
 11615 1202 03       		.byte	0x3
 11616 1203 00000000 		.4byte	numStrings
 11617 1207 25       		.uleb128 0x25
 11618 1208 930D0000 		.4byte	.LASF184
 11619 120c 01       		.byte	0x1
 11620 120d 4B       		.byte	0x4b
 11621 120e 2A010000 		.4byte	0x12a
 11622 1212 05       		.uleb128 0x5
 11623 1213 03       		.byte	0x3
 11624 1214 00000000 		.4byte	usbActivityCounter
 11625 1218 25       		.uleb128 0x25
 11626 1219 9F0C0000 		.4byte	.LASF142
 11627 121d 01       		.byte	0x1
 11628 121e 4C       		.byte	0x4c
 11629 121f 3D010000 		.4byte	0x13d
 11630 1223 05       		.uleb128 0x5
 11631 1224 03       		.byte	0x3
 11632 1225 00000000 		.4byte	midiMsg
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 252


 11633 1229 25       		.uleb128 0x25
 11634 122a 35100000 		.4byte	.LASF185
 11635 122e 01       		.byte	0x1
 11636 122f 4D       		.byte	0x4d
 11637 1230 A2000000 		.4byte	0xa2
 11638 1234 05       		.uleb128 0x5
 11639 1235 03       		.byte	0x3
 11640 1236 00000000 		.4byte	currentVBUS
 11641 123a 25       		.uleb128 0x25
 11642 123b 26100000 		.4byte	.LASF186
 11643 123f 01       		.byte	0x1
 11644 1240 4E       		.byte	0x4e
 11645 1241 A2000000 		.4byte	0xa2
 11646 1245 05       		.uleb128 0x5
 11647 1246 03       		.byte	0x3
 11648 1247 00000000 		.4byte	prevVBUS
 11649 124b 25       		.uleb128 0x25
 11650 124c D10D0000 		.4byte	.LASF187
 11651 1250 01       		.byte	0x1
 11652 1251 4F       		.byte	0x4f
 11653 1252 03020000 		.4byte	0x203
 11654 1256 05       		.uleb128 0x5
 11655 1257 03       		.byte	0x3
 11656 1258 00000000 		.4byte	USB_active
 11657 125c 25       		.uleb128 0x25
 11658 125d BA090000 		.4byte	.LASF188
 11659 1261 01       		.byte	0x1
 11660 1262 50       		.byte	0x50
 11661 1263 03020000 		.4byte	0x203
 11662 1267 05       		.uleb128 0x5
 11663 1268 03       		.byte	0x3
 11664 1269 00000000 		.4byte	USB_check_flag
 11665 126d 07       		.uleb128 0x7
 11666 126e A2000000 		.4byte	0xa2
 11667 1272 7D120000 		.4byte	0x127d
 11668 1276 08       		.uleb128 0x8
 11669 1277 36010000 		.4byte	0x136
 11670 127b 05       		.byte	0x5
 11671 127c 00       		.byte	0
 11672 127d 25       		.uleb128 0x25
 11673 127e CD0F0000 		.4byte	.LASF189
 11674 1282 01       		.byte	0x1
 11675 1283 52       		.byte	0x52
 11676 1284 6D120000 		.4byte	0x126d
 11677 1288 05       		.uleb128 0x5
 11678 1289 03       		.byte	0x3
 11679 128a 00000000 		.4byte	mappingArray
 11680 128e 07       		.uleb128 0x7
 11681 128f D9000000 		.4byte	0xd9
 11682 1293 9E120000 		.4byte	0x129e
 11683 1297 08       		.uleb128 0x8
 11684 1298 36010000 		.4byte	0x136
 11685 129c 1F       		.byte	0x1f
 11686 129d 00       		.byte	0
 11687 129e 25       		.uleb128 0x25
 11688 129f 790F0000 		.4byte	.LASF190
 11689 12a3 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 253


 11690 12a4 54       		.byte	0x54
 11691 12a5 8E120000 		.4byte	0x128e
 11692 12a9 05       		.uleb128 0x5
 11693 12aa 03       		.byte	0x3
 11694 12ab 00000000 		.4byte	inBuffer
 11695 12af 25       		.uleb128 0x25
 11696 12b0 06110000 		.4byte	.LASF191
 11697 12b4 01       		.byte	0x1
 11698 12b5 56       		.byte	0x56
 11699 12b6 8E120000 		.4byte	0x128e
 11700 12ba 05       		.uleb128 0x5
 11701 12bb 03       		.byte	0x3
 11702 12bc 00000000 		.4byte	myArray
 11703 12c0 25       		.uleb128 0x25
 11704 12c1 A4100000 		.4byte	.LASF192
 11705 12c5 01       		.byte	0x1
 11706 12c6 57       		.byte	0x57
 11707 12c7 FB0E0000 		.4byte	0xefb
 11708 12cb 05       		.uleb128 0x5
 11709 12cc 03       		.byte	0x3
 11710 12cd 00000000 		.4byte	myInputArray
 11711 12d1 07       		.uleb128 0x7
 11712 12d2 C3000000 		.4byte	0xc3
 11713 12d6 E1120000 		.4byte	0x12e1
 11714 12da 08       		.uleb128 0x8
 11715 12db 36010000 		.4byte	0x136
 11716 12df 01       		.byte	0x1
 11717 12e0 00       		.byte	0
 11718 12e1 25       		.uleb128 0x25
 11719 12e2 43080000 		.4byte	.LASF193
 11720 12e6 01       		.byte	0x1
 11721 12e7 58       		.byte	0x58
 11722 12e8 D1120000 		.4byte	0x12d1
 11723 12ec 05       		.uleb128 0x5
 11724 12ed 03       		.byte	0x3
 11725 12ee 00000000 		.4byte	linearPotValue32Bit
 11726 12f2 28       		.uleb128 0x28
 11727 12f3 6900     		.ascii	"i\000"
 11728 12f5 01       		.byte	0x1
 11729 12f6 59       		.byte	0x59
 11730 12f7 A2000000 		.4byte	0xa2
 11731 12fb 05       		.uleb128 0x5
 11732 12fc 03       		.byte	0x3
 11733 12fd 00000000 		.4byte	i
 11734 1301 25       		.uleb128 0x25
 11735 1302 F8090000 		.4byte	.LASF194
 11736 1306 01       		.byte	0x1
 11737 1307 5A       		.byte	0x5a
 11738 1308 A2000000 		.4byte	0xa2
 11739 130c 05       		.uleb128 0x5
 11740 130d 03       		.byte	0x3
 11741 130e 00000000 		.4byte	counter
 11742 1312 07       		.uleb128 0x7
 11743 1313 A2000000 		.4byte	0xa2
 11744 1317 22130000 		.4byte	0x1322
 11745 131b 08       		.uleb128 0x8
 11746 131c 36010000 		.4byte	0x136
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 254


 11747 1320 1F       		.byte	0x1f
 11748 1321 00       		.byte	0
 11749 1322 25       		.uleb128 0x25
 11750 1323 73060000 		.4byte	.LASF195
 11751 1327 01       		.byte	0x1
 11752 1328 5B       		.byte	0x5b
 11753 1329 12130000 		.4byte	0x1312
 11754 132d 05       		.uleb128 0x5
 11755 132e 03       		.byte	0x3
 11756 132f 00000000 		.4byte	returnedData
 11757 1333 25       		.uleb128 0x25
 11758 1334 9E010000 		.4byte	.LASF196
 11759 1338 01       		.byte	0x1
 11760 1339 5C       		.byte	0x5c
 11761 133a C3000000 		.4byte	0xc3
 11762 133e 05       		.uleb128 0x5
 11763 133f 03       		.byte	0x3
 11764 1340 00000000 		.4byte	temper
 11765 1344 07       		.uleb128 0x7
 11766 1345 94000000 		.4byte	0x94
 11767 1349 54130000 		.4byte	0x1354
 11768 134d 08       		.uleb128 0x8
 11769 134e 36010000 		.4byte	0x136
 11770 1352 0A       		.byte	0xa
 11771 1353 00       		.byte	0
 11772 1354 25       		.uleb128 0x25
 11773 1355 2C0F0000 		.4byte	.LASF197
 11774 1359 01       		.byte	0x1
 11775 135a 5D       		.byte	0x5d
 11776 135b 44130000 		.4byte	0x1344
 11777 135f 05       		.uleb128 0x5
 11778 1360 03       		.byte	0x3
 11779 1361 00000000 		.4byte	previousButtons
 11780 1365 25       		.uleb128 0x25
 11781 1366 2F010000 		.4byte	.LASF198
 11782 136a 01       		.byte	0x1
 11783 136b 5E       		.byte	0x5e
 11784 136c 94000000 		.4byte	0x94
 11785 1370 05       		.uleb128 0x5
 11786 1371 03       		.byte	0x3
 11787 1372 00000000 		.4byte	octave
 11788 1376 07       		.uleb128 0x7
 11789 1377 B8000000 		.4byte	0xb8
 11790 137b 86130000 		.4byte	0x1386
 11791 137f 08       		.uleb128 0x8
 11792 1380 36010000 		.4byte	0x136
 11793 1384 09       		.byte	0x9
 11794 1385 00       		.byte	0
 11795 1386 25       		.uleb128 0x25
 11796 1387 77080000 		.4byte	.LASF199
 11797 138b 01       		.byte	0x1
 11798 138c 5F       		.byte	0x5f
 11799 138d 76130000 		.4byte	0x1376
 11800 1391 05       		.uleb128 0x5
 11801 1392 03       		.byte	0x3
 11802 1393 00000000 		.4byte	angle
 11803 1397 25       		.uleb128 0x25
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 255


 11804 1398 250C0000 		.4byte	.LASF200
 11805 139c 01       		.byte	0x1
 11806 139d 60       		.byte	0x60
 11807 139e 76130000 		.4byte	0x1376
 11808 13a2 05       		.uleb128 0x5
 11809 13a3 03       		.byte	0x3
 11810 13a4 00000000 		.4byte	prevAngle
 11811 13a8 07       		.uleb128 0x7
 11812 13a9 B8000000 		.4byte	0xb8
 11813 13ad B8130000 		.4byte	0x13b8
 11814 13b1 08       		.uleb128 0x8
 11815 13b2 36010000 		.4byte	0x136
 11816 13b6 03       		.byte	0x3
 11817 13b7 00       		.byte	0
 11818 13b8 25       		.uleb128 0x25
 11819 13b9 6F0C0000 		.4byte	.LASF201
 11820 13bd 01       		.byte	0x1
 11821 13be 62       		.byte	0x62
 11822 13bf A8130000 		.4byte	0x13a8
 11823 13c3 05       		.uleb128 0x5
 11824 13c4 03       		.byte	0x3
 11825 13c5 00000000 		.4byte	ADC_values
 11826 13c9 25       		.uleb128 0x25
 11827 13ca F6040000 		.4byte	.LASF202
 11828 13ce 01       		.byte	0x1
 11829 13cf 63       		.byte	0x63
 11830 13d0 B8000000 		.4byte	0xb8
 11831 13d4 05       		.uleb128 0x5
 11832 13d5 03       		.byte	0x3
 11833 13d6 00000000 		.4byte	rawAngle
 11834 13da 25       		.uleb128 0x25
 11835 13db 960C0000 		.4byte	.LASF203
 11836 13df 01       		.byte	0x1
 11837 13e0 64       		.byte	0x64
 11838 13e1 B8000000 		.4byte	0xb8
 11839 13e5 05       		.uleb128 0x5
 11840 13e6 03       		.byte	0x3
 11841 13e7 00000000 		.4byte	midiSent
 11842 13eb 25       		.uleb128 0x25
 11843 13ec 8D050000 		.4byte	.LASF204
 11844 13f0 01       		.byte	0x1
 11845 13f1 65       		.byte	0x65
 11846 13f2 B8000000 		.4byte	0xb8
 11847 13f6 05       		.uleb128 0x5
 11848 13f7 03       		.byte	0x3
 11849 13f8 00000000 		.4byte	midiOverflow
 11850 13fc 07       		.uleb128 0x7
 11851 13fd A2000000 		.4byte	0xa2
 11852 1401 0C140000 		.4byte	0x140c
 11853 1405 08       		.uleb128 0x8
 11854 1406 36010000 		.4byte	0x136
 11855 140a 07       		.byte	0x7
 11856 140b 00       		.byte	0
 11857 140c 25       		.uleb128 0x25
 11858 140d A60F0000 		.4byte	.LASF205
 11859 1411 01       		.byte	0x1
 11860 1412 67       		.byte	0x67
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 256


 11861 1413 FC130000 		.4byte	0x13fc
 11862 1417 05       		.uleb128 0x5
 11863 1418 03       		.byte	0x3
 11864 1419 00000000 		.4byte	macroKnobValues
 11865 141d 25       		.uleb128 0x25
 11866 141e E6040000 		.4byte	.LASF206
 11867 1422 01       		.byte	0x1
 11868 1423 69       		.byte	0x69
 11869 1424 A2000000 		.4byte	0xa2
 11870 1428 05       		.uleb128 0x5
 11871 1429 03       		.byte	0x3
 11872 142a 00000000 		.4byte	currentCopedent
 11873 142e 07       		.uleb128 0x7
 11874 142f A2000000 		.4byte	0xa2
 11875 1433 3E140000 		.4byte	0x143e
 11876 1437 08       		.uleb128 0x8
 11877 1438 36010000 		.4byte	0x136
 11878 143c 01       		.byte	0x1
 11879 143d 00       		.byte	0
 11880 143e 25       		.uleb128 0x25
 11881 143f 29010000 		.4byte	.LASF207
 11882 1443 01       		.byte	0x1
 11883 1444 6A       		.byte	0x6a
 11884 1445 2E140000 		.4byte	0x142e
 11885 1449 05       		.uleb128 0x5
 11886 144a 03       		.byte	0x3
 11887 144b 00000000 		.4byte	necks
 11888 144f 25       		.uleb128 0x25
 11889 1450 1C040000 		.4byte	.LASF208
 11890 1454 01       		.byte	0x1
 11891 1455 89       		.byte	0x89
 11892 1456 D9000000 		.4byte	0xd9
 11893 145a 05       		.uleb128 0x5
 11894 145b 03       		.byte	0x3
 11895 145c 00000000 		.4byte	rx1Channel
 11896 1460 25       		.uleb128 0x25
 11897 1461 E60F0000 		.4byte	.LASF209
 11898 1465 01       		.byte	0x1
 11899 1466 89       		.byte	0x89
 11900 1467 D9000000 		.4byte	0xd9
 11901 146b 05       		.uleb128 0x5
 11902 146c 03       		.byte	0x3
 11903 146d 00000000 		.4byte	rx2Channel
 11904 1471 25       		.uleb128 0x25
 11905 1472 0C0A0000 		.4byte	.LASF210
 11906 1476 01       		.byte	0x1
 11907 1477 8A       		.byte	0x8a
 11908 1478 FB0E0000 		.4byte	0xefb
 11909 147c 05       		.uleb128 0x5
 11910 147d 03       		.byte	0x3
 11911 147e 00000000 		.4byte	rx1TD
 11912 1482 25       		.uleb128 0x25
 11913 1483 ED0C0000 		.4byte	.LASF211
 11914 1487 01       		.byte	0x1
 11915 1488 8A       		.byte	0x8a
 11916 1489 FB0E0000 		.4byte	0xefb
 11917 148d 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 257


 11918 148e 03       		.byte	0x3
 11919 148f 00000000 		.4byte	rx2TD
 11920 1493 25       		.uleb128 0x25
 11921 1494 F40B0000 		.4byte	.LASF212
 11922 1498 01       		.byte	0x1
 11923 1499 8C       		.byte	0x8c
 11924 149a 2A010000 		.4byte	0x12a
 11925 149e 05       		.uleb128 0x5
 11926 149f 03       		.byte	0x3
 11927 14a0 00000000 		.4byte	txChannel
 11928 14a4 25       		.uleb128 0x25
 11929 14a5 8D100000 		.4byte	.LASF213
 11930 14a9 01       		.byte	0x1
 11931 14aa 8D       		.byte	0x8d
 11932 14ab 2A010000 		.4byte	0x12a
 11933 14af 05       		.uleb128 0x5
 11934 14b0 03       		.byte	0x3
 11935 14b1 00000000 		.4byte	txTD
 11936 14b5 25       		.uleb128 0x25
 11937 14b6 490A0000 		.4byte	.LASF214
 11938 14ba 01       		.byte	0x1
 11939 14bb 8F       		.byte	0x8f
 11940 14bc 2A010000 		.4byte	0x12a
 11941 14c0 05       		.uleb128 0x5
 11942 14c1 03       		.byte	0x3
 11943 14c2 00000000 		.4byte	rx3Channel
 11944 14c6 25       		.uleb128 0x25
 11945 14c7 2F100000 		.4byte	.LASF215
 11946 14cb 01       		.byte	0x1
 11947 14cc 90       		.byte	0x90
 11948 14cd 2A010000 		.4byte	0x12a
 11949 14d1 05       		.uleb128 0x5
 11950 14d2 03       		.byte	0x3
 11951 14d3 00000000 		.4byte	rx3TD
 11952 14d7 07       		.uleb128 0x7
 11953 14d8 2A010000 		.4byte	0x12a
 11954 14dc ED140000 		.4byte	0x14ed
 11955 14e0 08       		.uleb128 0x8
 11956 14e1 36010000 		.4byte	0x136
 11957 14e5 01       		.byte	0x1
 11958 14e6 08       		.uleb128 0x8
 11959 14e7 36010000 		.4byte	0x136
 11960 14eb 19       		.byte	0x19
 11961 14ec 00       		.byte	0
 11962 14ed 25       		.uleb128 0x25
 11963 14ee A2060000 		.4byte	.LASF216
 11964 14f2 01       		.byte	0x1
 11965 14f3 93       		.byte	0x93
 11966 14f4 FE140000 		.4byte	0x14fe
 11967 14f8 05       		.uleb128 0x5
 11968 14f9 03       		.byte	0x3
 11969 14fa 00000000 		.4byte	rxBufferPluck
 11970 14fe 06       		.uleb128 0x6
 11971 14ff D7140000 		.4byte	0x14d7
 11972 1503 07       		.uleb128 0x7
 11973 1504 2A010000 		.4byte	0x12a
 11974 1508 19150000 		.4byte	0x1519
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 258


 11975 150c 08       		.uleb128 0x8
 11976 150d 36010000 		.4byte	0x136
 11977 1511 01       		.byte	0x1
 11978 1512 08       		.uleb128 0x8
 11979 1513 36010000 		.4byte	0x136
 11980 1517 07       		.byte	0x7
 11981 1518 00       		.byte	0
 11982 1519 25       		.uleb128 0x25
 11983 151a E80B0000 		.4byte	.LASF217
 11984 151e 01       		.byte	0x1
 11985 151f 94       		.byte	0x94
 11986 1520 2A150000 		.4byte	0x152a
 11987 1524 05       		.uleb128 0x5
 11988 1525 03       		.byte	0x3
 11989 1526 00000000 		.4byte	rxBufferBar
 11990 152a 06       		.uleb128 0x6
 11991 152b 03150000 		.4byte	0x1503
 11992 152f 07       		.uleb128 0x7
 11993 1530 08020000 		.4byte	0x208
 11994 1534 3F150000 		.4byte	0x153f
 11995 1538 08       		.uleb128 0x8
 11996 1539 36010000 		.4byte	0x136
 11997 153d 0B       		.byte	0xb
 11998 153e 00       		.byte	0
 11999 153f 25       		.uleb128 0x25
 12000 1540 5D020000 		.4byte	.LASF218
 12001 1544 01       		.byte	0x1
 12002 1545 96       		.byte	0x96
 12003 1546 50150000 		.4byte	0x1550
 12004 154a 05       		.uleb128 0x5
 12005 154b 03       		.byte	0x3
 12006 154c 00000000 		.4byte	strings
 12007 1550 06       		.uleb128 0x6
 12008 1551 2F150000 		.4byte	0x152f
 12009 1555 25       		.uleb128 0x25
 12010 1556 C9040000 		.4byte	.LASF219
 12011 155a 01       		.byte	0x1
 12012 155b 97       		.byte	0x97
 12013 155c 66150000 		.4byte	0x1566
 12014 1560 05       		.uleb128 0x5
 12015 1561 03       		.byte	0x3
 12016 1562 00000000 		.4byte	prevStrings
 12017 1566 06       		.uleb128 0x6
 12018 1567 2F150000 		.4byte	0x152f
 12019 156b 07       		.uleb128 0x7
 12020 156c 08020000 		.4byte	0x208
 12021 1570 7B150000 		.4byte	0x157b
 12022 1574 08       		.uleb128 0x8
 12023 1575 36010000 		.4byte	0x136
 12024 1579 01       		.byte	0x1
 12025 157a 00       		.byte	0
 12026 157b 28       		.uleb128 0x28
 12027 157c 62617200 		.ascii	"bar\000"
 12028 1580 01       		.byte	0x1
 12029 1581 98       		.byte	0x98
 12030 1582 8C150000 		.4byte	0x158c
 12031 1586 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 259


 12032 1587 03       		.byte	0x3
 12033 1588 00000000 		.4byte	bar
 12034 158c 06       		.uleb128 0x6
 12035 158d 6B150000 		.4byte	0x156b
 12036 1591 25       		.uleb128 0x25
 12037 1592 9C100000 		.4byte	.LASF220
 12038 1596 01       		.byte	0x1
 12039 1597 99       		.byte	0x99
 12040 1598 A2150000 		.4byte	0x15a2
 12041 159c 05       		.uleb128 0x5
 12042 159d 03       		.byte	0x3
 12043 159e 00000000 		.4byte	prevBar
 12044 15a2 06       		.uleb128 0x6
 12045 15a3 6B150000 		.4byte	0x156b
 12046 15a7 25       		.uleb128 0x25
 12047 15a8 820F0000 		.4byte	.LASF221
 12048 15ac 01       		.byte	0x1
 12049 15ad 9A       		.byte	0x9a
 12050 15ae B8150000 		.4byte	0x15b8
 12051 15b2 05       		.uleb128 0x5
 12052 15b3 03       		.byte	0x3
 12053 15b4 00000000 		.4byte	maxStrings
 12054 15b8 06       		.uleb128 0x6
 12055 15b9 2F150000 		.4byte	0x152f
 12056 15bd 25       		.uleb128 0x25
 12057 15be 3F0D0000 		.4byte	.LASF222
 12058 15c2 01       		.byte	0x1
 12059 15c3 9B       		.byte	0x9b
 12060 15c4 03020000 		.4byte	0x203
 12061 15c8 05       		.uleb128 0x5
 12062 15c9 03       		.byte	0x3
 12063 15ca 00000000 		.4byte	amHere
 12064 15ce 25       		.uleb128 0x25
 12065 15cf 1A060000 		.4byte	.LASF223
 12066 15d3 01       		.byte	0x1
 12067 15d4 9C       		.byte	0x9c
 12068 15d5 03020000 		.4byte	0x203
 12069 15d9 05       		.uleb128 0x5
 12070 15da 03       		.byte	0x3
 12071 15db 00000000 		.4byte	spiCounter
 12072 15df 25       		.uleb128 0x25
 12073 15e0 35040000 		.4byte	.LASF224
 12074 15e4 01       		.byte	0x1
 12075 15e5 9D       		.byte	0x9d
 12076 15e6 03020000 		.4byte	0x203
 12077 15ea 05       		.uleb128 0x5
 12078 15eb 03       		.byte	0x3
 12079 15ec 00000000 		.4byte	newDataFlag
 12080 15f0 25       		.uleb128 0x25
 12081 15f1 F30C0000 		.4byte	.LASF225
 12082 15f5 01       		.byte	0x1
 12083 15f6 9E       		.byte	0x9e
 12084 15f7 94000000 		.4byte	0x94
 12085 15fb 05       		.uleb128 0x5
 12086 15fc 03       		.byte	0x3
 12087 15fd 00000000 		.4byte	prevOctave
 12088 1601 25       		.uleb128 0x25
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 260


 12089 1602 2F0C0000 		.4byte	.LASF226
 12090 1606 01       		.byte	0x1
 12091 1607 9F       		.byte	0x9f
 12092 1608 A2000000 		.4byte	0xa2
 12093 160c 05       		.uleb128 0x5
 12094 160d 03       		.byte	0x3
 12095 160e 00000000 		.4byte	pluck_index
 12096 1612 25       		.uleb128 0x25
 12097 1613 DC0A0000 		.4byte	.LASF227
 12098 1617 01       		.byte	0x1
 12099 1618 A0       		.byte	0xa0
 12100 1619 03020000 		.4byte	0x203
 12101 161d 05       		.uleb128 0x5
 12102 161e 03       		.byte	0x3
 12103 161f 00000000 		.4byte	amHere2
 12104 1623 25       		.uleb128 0x25
 12105 1624 7F0D0000 		.4byte	.LASF228
 12106 1628 01       		.byte	0x1
 12107 1629 A1       		.byte	0xa1
 12108 162a 03020000 		.4byte	0x203
 12109 162e 05       		.uleb128 0x5
 12110 162f 03       		.byte	0x3
 12111 1630 00000000 		.4byte	spiCounter2
 12112 1634 25       		.uleb128 0x25
 12113 1635 67000000 		.4byte	.LASF229
 12114 1639 01       		.byte	0x1
 12115 163a A2       		.byte	0xa2
 12116 163b 03020000 		.4byte	0x203
 12117 163f 05       		.uleb128 0x5
 12118 1640 03       		.byte	0x3
 12119 1641 00000000 		.4byte	newDataFlag2
 12120 1645 25       		.uleb128 0x25
 12121 1646 F00A0000 		.4byte	.LASF230
 12122 164a 01       		.byte	0x1
 12123 164b A3       		.byte	0xa3
 12124 164c 03020000 		.4byte	0x203
 12125 1650 05       		.uleb128 0x5
 12126 1651 03       		.byte	0x3
 12127 1652 00000000 		.4byte	currentPluckBuffer
 12128 1656 25       		.uleb128 0x25
 12129 1657 5E0C0000 		.4byte	.LASF231
 12130 165b 01       		.byte	0x1
 12131 165c A4       		.byte	0xa4
 12132 165d 03020000 		.4byte	0x203
 12133 1661 05       		.uleb128 0x5
 12134 1662 03       		.byte	0x3
 12135 1663 00000000 		.4byte	currentBarBuffer
 12136 1667 25       		.uleb128 0x25
 12137 1668 070E0000 		.4byte	.LASF232
 12138 166c 01       		.byte	0x1
 12139 166d A5       		.byte	0xa5
 12140 166e 03020000 		.4byte	0x203
 12141 1672 05       		.uleb128 0x5
 12142 1673 03       		.byte	0x3
 12143 1674 00000000 		.4byte	pluckErrorCount
 12144 1678 25       		.uleb128 0x25
 12145 1679 870C0000 		.4byte	.LASF233
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 261


 12146 167d 01       		.byte	0x1
 12147 167e A6       		.byte	0xa6
 12148 167f 08020000 		.4byte	0x208
 12149 1683 05       		.uleb128 0x5
 12150 1684 03       		.byte	0x3
 12151 1685 00000000 		.4byte	SPI1ErrorCount
 12152 1689 25       		.uleb128 0x25
 12153 168a A7070000 		.4byte	.LASF234
 12154 168e 01       		.byte	0x1
 12155 168f AA       		.byte	0xaa
 12156 1690 03020000 		.4byte	0x203
 12157 1694 05       		.uleb128 0x5
 12158 1695 03       		.byte	0x3
 12159 1696 00000000 		.4byte	inputData
 12160 169a 25       		.uleb128 0x25
 12161 169b DA0F0000 		.4byte	.LASF235
 12162 169f 01       		.byte	0x1
 12163 16a0 CD       		.byte	0xcd
 12164 16a1 A2000000 		.4byte	0xa2
 12165 16a5 05       		.uleb128 0x5
 12166 16a6 03       		.byte	0x3
 12167 16a7 00000000 		.4byte	spiAdjusted
 12168 16ab 25       		.uleb128 0x25
 12169 16ac CE060000 		.4byte	.LASF236
 12170 16b0 01       		.byte	0x1
 12171 16b1 CE       		.byte	0xce
 12172 16b2 A2000000 		.4byte	0xa2
 12173 16b6 05       		.uleb128 0x5
 12174 16b7 03       		.byte	0x3
 12175 16b8 00000000 		.4byte	mySpiCounter
 12176 16bc 25       		.uleb128 0x25
 12177 16bd B80B0000 		.4byte	.LASF237
 12178 16c1 01       		.byte	0x1
 12179 16c2 CF       		.byte	0xcf
 12180 16c3 08020000 		.4byte	0x208
 12181 16c7 05       		.uleb128 0x5
 12182 16c8 03       		.byte	0x3
 12183 16c9 00000000 		.4byte	offsetErrorCount
 12184 16cd 25       		.uleb128 0x25
 12185 16ce C7000000 		.4byte	.LASF238
 12186 16d2 01       		.byte	0x1
 12187 16d3 D0       		.byte	0xd0
 12188 16d4 03020000 		.4byte	0x203
 12189 16d8 05       		.uleb128 0x5
 12190 16d9 03       		.byte	0x3
 12191 16da 00000000 		.4byte	SPI2errorflag
 12192 16de 25       		.uleb128 0x25
 12193 16df 9D0B0000 		.4byte	.LASF239
 12194 16e3 01       		.byte	0x1
 12195 16e4 D1       		.byte	0xd1
 12196 16e5 EF160000 		.4byte	0x16ef
 12197 16e9 05       		.uleb128 0x5
 12198 16ea 03       		.byte	0x3
 12199 16eb 00000000 		.4byte	bar_index
 12200 16ef 06       		.uleb128 0x6
 12201 16f0 94000000 		.4byte	0x94
 12202 16f4 25       		.uleb128 0x25
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 262


 12203 16f5 44030000 		.4byte	.LASF240
 12204 16f9 01       		.byte	0x1
 12205 16fa D2       		.byte	0xd2
 12206 16fb A6020000 		.4byte	0x2a6
 12207 16ff 05       		.uleb128 0x5
 12208 1700 03       		.byte	0x3
 12209 1701 00000000 		.4byte	knobs
 12210 1705 25       		.uleb128 0x25
 12211 1706 C4060000 		.4byte	.LASF241
 12212 170a 01       		.byte	0x1
 12213 170b D3       		.byte	0xd3
 12214 170c A6020000 		.4byte	0x2a6
 12215 1710 05       		.uleb128 0x5
 12216 1711 03       		.byte	0x3
 12217 1712 00000000 		.4byte	prevKnobs
 12218 1716 25       		.uleb128 0x25
 12219 1717 A70B0000 		.4byte	.LASF242
 12220 171b 01       		.byte	0x1
 12221 171c D5       		.byte	0xd5
 12222 171d A6020000 		.4byte	0x2a6
 12223 1721 05       		.uleb128 0x5
 12224 1722 03       		.byte	0x3
 12225 1723 00000000 		.4byte	knobs7bit
 12226 1727 25       		.uleb128 0x25
 12227 1728 540B0000 		.4byte	.LASF243
 12228 172c 01       		.byte	0x1
 12229 172d D6       		.byte	0xd6
 12230 172e A6020000 		.4byte	0x2a6
 12231 1732 05       		.uleb128 0x5
 12232 1733 03       		.byte	0x3
 12233 1734 00000000 		.4byte	prevKnobs7bit
 12234 1738 25       		.uleb128 0x25
 12235 1739 E40A0000 		.4byte	.LASF244
 12236 173d 01       		.byte	0x1
 12237 173e D8       		.byte	0xd8
 12238 173f 03020000 		.4byte	0x203
 12239 1743 05       		.uleb128 0x5
 12240 1744 03       		.byte	0x3
 12241 1745 00000000 		.4byte	SPI2started
 12242 1749 25       		.uleb128 0x25
 12243 174a 8B060000 		.4byte	.LASF245
 12244 174e 01       		.byte	0x1
 12245 174f DA       		.byte	0xda
 12246 1750 A2000000 		.4byte	0xa2
 12247 1754 05       		.uleb128 0x5
 12248 1755 03       		.byte	0x3
 12249 1756 00000000 		.4byte	whichMacro
 12250 175a 25       		.uleb128 0x25
 12251 175b 460D0000 		.4byte	.LASF246
 12252 175f 01       		.byte	0x1
 12253 1760 ED       		.byte	0xed
 12254 1761 FB0E0000 		.4byte	0xefb
 12255 1765 05       		.uleb128 0x5
 12256 1766 03       		.byte	0x3
 12257 1767 00000000 		.4byte	array
 12258 176b 25       		.uleb128 0x25
 12259 176c 1A080000 		.4byte	.LASF247
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 263


 12260 1770 01       		.byte	0x1
 12261 1771 F0       		.byte	0xf0
 12262 1772 F7010000 		.4byte	0x1f7
 12263 1776 05       		.uleb128 0x5
 12264 1777 03       		.byte	0x3
 12265 1778 00000000 		.4byte	eepromReturnValue
 12266 177c 25       		.uleb128 0x25
 12267 177d 47050000 		.4byte	.LASF248
 12268 1781 01       		.byte	0x1
 12269 1782 FC       		.byte	0xfc
 12270 1783 D9000000 		.4byte	0xd9
 12271 1787 05       		.uleb128 0x5
 12272 1788 03       		.byte	0x3
 12273 1789 00000000 		.4byte	eeprom_cnt
 12274 178d 25       		.uleb128 0x25
 12275 178e 34080000 		.4byte	.LASF83
 12276 1792 01       		.byte	0x1
 12277 1793 FD       		.byte	0xfd
 12278 1794 12010000 		.4byte	0x112
 12279 1798 05       		.uleb128 0x5
 12280 1799 03       		.byte	0x3
 12281 179a 00000000 		.4byte	status
 12282 179e 28       		.uleb128 0x28
 12283 179f 70747200 		.ascii	"ptr\000"
 12284 17a3 01       		.byte	0x1
 12285 17a4 FE       		.byte	0xfe
 12286 17a5 AF170000 		.4byte	0x17af
 12287 17a9 05       		.uleb128 0x5
 12288 17aa 03       		.byte	0x3
 12289 17ab 00000000 		.4byte	ptr
 12290 17af 20       		.uleb128 0x20
 12291 17b0 04       		.byte	0x4
 12292 17b1 BA170000 		.4byte	0x17ba
 12293 17b5 24       		.uleb128 0x24
 12294 17b6 D9000000 		.4byte	0xd9
 12295 17ba 06       		.uleb128 0x6
 12296 17bb B5170000 		.4byte	0x17b5
 12297 17bf 25       		.uleb128 0x25
 12298 17c0 2C020000 		.4byte	.LASF249
 12299 17c4 01       		.byte	0x1
 12300 17c5 FF       		.byte	0xff
 12301 17c6 EF160000 		.4byte	0x16ef
 12302 17ca 05       		.uleb128 0x5
 12303 17cb 03       		.byte	0x3
 12304 17cc 00000000 		.4byte	barCount
 12305 17d0 07       		.uleb128 0x7
 12306 17d1 03020000 		.4byte	0x203
 12307 17d5 E0170000 		.4byte	0x17e0
 12308 17d9 08       		.uleb128 0x8
 12309 17da 36010000 		.4byte	0x136
 12310 17de 0F       		.byte	0xf
 12311 17df 00       		.byte	0
 12312 17e0 27       		.uleb128 0x27
 12313 17e1 0D010000 		.4byte	.LASF250
 12314 17e5 01       		.byte	0x1
 12315 17e6 6101     		.2byte	0x161
 12316 17e8 F2170000 		.4byte	0x17f2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 264


 12317 17ec 05       		.uleb128 0x5
 12318 17ed 03       		.byte	0x3
 12319 17ee 00000000 		.4byte	I2Cbuff2
 12320 17f2 06       		.uleb128 0x6
 12321 17f3 D0170000 		.4byte	0x17d0
 12322 17f7 27       		.uleb128 0x27
 12323 17f8 3B080000 		.4byte	.LASF251
 12324 17fc 01       		.byte	0x1
 12325 17fd 6201     		.2byte	0x162
 12326 17ff 03020000 		.4byte	0x203
 12327 1803 05       		.uleb128 0x5
 12328 1804 03       		.byte	0x3
 12329 1805 00000000 		.4byte	send_it
 12330 1809 07       		.uleb128 0x7
 12331 180a A2000000 		.4byte	0xa2
 12332 180e 1F180000 		.4byte	0x181f
 12333 1812 08       		.uleb128 0x8
 12334 1813 36010000 		.4byte	0x136
 12335 1817 0B       		.byte	0xb
 12336 1818 08       		.uleb128 0x8
 12337 1819 36010000 		.4byte	0x136
 12338 181d 01       		.byte	0x1
 12339 181e 00       		.byte	0
 12340 181f 27       		.uleb128 0x27
 12341 1820 16010000 		.4byte	.LASF252
 12342 1824 01       		.byte	0x1
 12343 1825 6901     		.2byte	0x169
 12344 1827 09180000 		.4byte	0x1809
 12345 182b 05       		.uleb128 0x5
 12346 182c 03       		.byte	0x3
 12347 182d 00000000 		.4byte	mux_states
 12348 1831 07       		.uleb128 0x7
 12349 1832 A2000000 		.4byte	0xa2
 12350 1836 41180000 		.4byte	0x1841
 12351 183a 08       		.uleb128 0x8
 12352 183b 36010000 		.4byte	0x136
 12353 183f 0B       		.byte	0xb
 12354 1840 00       		.byte	0
 12355 1841 27       		.uleb128 0x27
 12356 1842 B60F0000 		.4byte	.LASF253
 12357 1846 01       		.byte	0x1
 12358 1847 6A01     		.2byte	0x16a
 12359 1849 31180000 		.4byte	0x1831
 12360 184d 05       		.uleb128 0x5
 12361 184e 03       		.byte	0x3
 12362 184f 00000000 		.4byte	i2c_skipped
 12363 1853 27       		.uleb128 0x27
 12364 1854 460E0000 		.4byte	.LASF254
 12365 1858 01       		.byte	0x1
 12366 1859 6B01     		.2byte	0x16b
 12367 185b 76130000 		.4byte	0x1376
 12368 185f 05       		.uleb128 0x5
 12369 1860 03       		.byte	0x3
 12370 1861 00000000 		.4byte	pedals_low
 12371 1865 27       		.uleb128 0x27
 12372 1866 6E010000 		.4byte	.LASF255
 12373 186a 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 265


 12374 186b 6C01     		.2byte	0x16c
 12375 186d 76130000 		.4byte	0x1376
 12376 1871 05       		.uleb128 0x5
 12377 1872 03       		.byte	0x3
 12378 1873 00000000 		.4byte	pedals_high
 12379 1877 27       		.uleb128 0x27
 12380 1878 A60D0000 		.4byte	.LASF256
 12381 187c 01       		.byte	0x1
 12382 187d 6D01     		.2byte	0x16d
 12383 187f B8000000 		.4byte	0xb8
 12384 1883 05       		.uleb128 0x5
 12385 1884 03       		.byte	0x3
 12386 1885 00000000 		.4byte	deadzone
 12387 1889 27       		.uleb128 0x27
 12388 188a 96060000 		.4byte	.LASF257
 12389 188e 01       		.byte	0x1
 12390 188f 6E01     		.2byte	0x16e
 12391 1891 B8000000 		.4byte	0xb8
 12392 1895 05       		.uleb128 0x5
 12393 1896 03       		.byte	0x3
 12394 1897 00000000 		.4byte	volumePedal
 12395 189b 27       		.uleb128 0x27
 12396 189c FE0B0000 		.4byte	.LASF258
 12397 18a0 01       		.byte	0x1
 12398 18a1 6F01     		.2byte	0x16f
 12399 18a3 76130000 		.4byte	0x1376
 12400 18a7 05       		.uleb128 0x5
 12401 18a8 03       		.byte	0x3
 12402 18a9 00000000 		.4byte	processed_pedals
 12403 18ad 27       		.uleb128 0x27
 12404 18ae C60A0000 		.4byte	.LASF259
 12405 18b2 01       		.byte	0x1
 12406 18b3 7001     		.2byte	0x170
 12407 18b5 76130000 		.4byte	0x1376
 12408 18b9 05       		.uleb128 0x5
 12409 18ba 03       		.byte	0x3
 12410 18bb 00000000 		.4byte	prev_processed_pedals
 12411 18bf 07       		.uleb128 0x7
 12412 18c0 A2000000 		.4byte	0xa2
 12413 18c4 CF180000 		.4byte	0x18cf
 12414 18c8 08       		.uleb128 0x8
 12415 18c9 36010000 		.4byte	0x136
 12416 18cd 09       		.byte	0x9
 12417 18ce 00       		.byte	0
 12418 18cf 27       		.uleb128 0x27
 12419 18d0 B9060000 		.4byte	.LASF260
 12420 18d4 01       		.byte	0x1
 12421 18d5 7101     		.2byte	0x171
 12422 18d7 BF180000 		.4byte	0x18bf
 12423 18db 05       		.uleb128 0x5
 12424 18dc 03       		.byte	0x3
 12425 18dd 00000000 		.4byte	pedals8bit
 12426 18e1 27       		.uleb128 0x27
 12427 18e2 C20F0000 		.4byte	.LASF261
 12428 18e6 01       		.byte	0x1
 12429 18e7 7201     		.2byte	0x172
 12430 18e9 BF180000 		.4byte	0x18bf
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 266


 12431 18ed 05       		.uleb128 0x5
 12432 18ee 03       		.byte	0x3
 12433 18ef 00000000 		.4byte	pedals7bit
 12434 18f3 27       		.uleb128 0x27
 12435 18f4 700B0000 		.4byte	.LASF262
 12436 18f8 01       		.byte	0x1
 12437 18f9 7301     		.2byte	0x173
 12438 18fb BF180000 		.4byte	0x18bf
 12439 18ff 05       		.uleb128 0x5
 12440 1900 03       		.byte	0x3
 12441 1901 00000000 		.4byte	prevPedals7bit
 12442 1905 27       		.uleb128 0x27
 12443 1906 42000000 		.4byte	.LASF263
 12444 190a 01       		.byte	0x1
 12445 190b 7401     		.2byte	0x174
 12446 190d AD000000 		.4byte	0xad
 12447 1911 05       		.uleb128 0x5
 12448 1912 03       		.byte	0x3
 12449 1913 00000000 		.4byte	prev_processed_volumePedal
 12450 1917 27       		.uleb128 0x27
 12451 1918 C90B0000 		.4byte	.LASF264
 12452 191c 01       		.byte	0x1
 12453 191d 7501     		.2byte	0x175
 12454 191f AD000000 		.4byte	0xad
 12455 1923 05       		.uleb128 0x5
 12456 1924 03       		.byte	0x3
 12457 1925 00000000 		.4byte	processed_volumePedal
 12458 1929 07       		.uleb128 0x7
 12459 192a FD000000 		.4byte	0xfd
 12460 192e 3F190000 		.4byte	0x193f
 12461 1932 08       		.uleb128 0x8
 12462 1933 36010000 		.4byte	0x136
 12463 1937 03       		.byte	0x3
 12464 1938 08       		.uleb128 0x8
 12465 1939 36010000 		.4byte	0x136
 12466 193d 03       		.byte	0x3
 12467 193e 00       		.byte	0
 12468 193f 27       		.uleb128 0x27
 12469 1940 940E0000 		.4byte	.LASF265
 12470 1944 01       		.byte	0x1
 12471 1945 7801     		.2byte	0x178
 12472 1947 29190000 		.4byte	0x1929
 12473 194b 05       		.uleb128 0x5
 12474 194c 03       		.byte	0x3
 12475 194d 00000000 		.4byte	fretMeasurements
 12476 1951 27       		.uleb128 0x27
 12477 1952 A7080000 		.4byte	.LASF266
 12478 1956 01       		.byte	0x1
 12479 1957 8501     		.2byte	0x185
 12480 1959 94000000 		.4byte	0x94
 12481 195d 05       		.uleb128 0x5
 12482 195e 03       		.byte	0x3
 12483 195f 00000000 		.4byte	currentPresetSelection
 12484 1963 07       		.uleb128 0x7
 12485 1964 A2000000 		.4byte	0xa2
 12486 1968 79190000 		.4byte	0x1979
 12487 196c 08       		.uleb128 0x8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 267


 12488 196d 36010000 		.4byte	0x136
 12489 1971 3F       		.byte	0x3f
 12490 1972 08       		.uleb128 0x8
 12491 1973 36010000 		.4byte	0x136
 12492 1977 0D       		.byte	0xd
 12493 1978 00       		.byte	0
 12494 1979 27       		.uleb128 0x27
 12495 197a BB020000 		.4byte	.LASF267
 12496 197e 01       		.byte	0x1
 12497 197f 8601     		.2byte	0x186
 12498 1981 63190000 		.4byte	0x1963
 12499 1985 05       		.uleb128 0x5
 12500 1986 03       		.byte	0x3
 12501 1987 00000000 		.4byte	presetNamesArray
 12502 198b 27       		.uleb128 0x27
 12503 198c 44020000 		.4byte	.LASF268
 12504 1990 01       		.byte	0x1
 12505 1991 8701     		.2byte	0x187
 12506 1993 A2000000 		.4byte	0xa2
 12507 1997 05       		.uleb128 0x5
 12508 1998 03       		.byte	0x3
 12509 1999 00000000 		.4byte	presetNumberToLoad
 12510 199d 27       		.uleb128 0x27
 12511 199e 7B020000 		.4byte	.LASF269
 12512 19a2 01       		.byte	0x1
 12513 19a3 8801     		.2byte	0x188
 12514 19a5 2E140000 		.4byte	0x142e
 12515 19a9 05       		.uleb128 0x5
 12516 19aa 03       		.byte	0x3
 12517 19ab 00000000 		.4byte	presetLoadedResponse
 12518 19af 07       		.uleb128 0x7
 12519 19b0 A2000000 		.4byte	0xa2
 12520 19b4 CB190000 		.4byte	0x19cb
 12521 19b8 08       		.uleb128 0x8
 12522 19b9 36010000 		.4byte	0x136
 12523 19bd 3F       		.byte	0x3f
 12524 19be 08       		.uleb128 0x8
 12525 19bf 36010000 		.4byte	0x136
 12526 19c3 07       		.byte	0x7
 12527 19c4 08       		.uleb128 0x8
 12528 19c5 36010000 		.4byte	0x136
 12529 19c9 0D       		.byte	0xd
 12530 19ca 00       		.byte	0
 12531 19cb 27       		.uleb128 0x27
 12532 19cc 74000000 		.4byte	.LASF270
 12533 19d0 01       		.byte	0x1
 12534 19d1 8B01     		.2byte	0x18b
 12535 19d3 AF190000 		.4byte	0x19af
 12536 19d7 05       		.uleb128 0x5
 12537 19d8 03       		.byte	0x3
 12538 19d9 00000000 		.4byte	macroNamesArray
 12539 19dd 07       		.uleb128 0x7
 12540 19de FD000000 		.4byte	0xfd
 12541 19e2 ED190000 		.4byte	0x19ed
 12542 19e6 08       		.uleb128 0x8
 12543 19e7 36010000 		.4byte	0x136
 12544 19eb 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 268


 12545 19ec 00       		.byte	0
 12546 19ed 27       		.uleb128 0x27
 12547 19ee 16030000 		.4byte	.LASF271
 12548 19f2 01       		.byte	0x1
 12549 19f3 8F01     		.2byte	0x18f
 12550 19f5 DD190000 		.4byte	0x19dd
 12551 19f9 05       		.uleb128 0x5
 12552 19fa 03       		.byte	0x3
 12553 19fb 00000000 		.4byte	fretScaling
 12554 19ff 07       		.uleb128 0x7
 12555 1a00 FD000000 		.4byte	0xfd
 12556 1a04 0F1A0000 		.4byte	0x1a0f
 12557 1a08 08       		.uleb128 0x8
 12558 1a09 36010000 		.4byte	0x136
 12559 1a0d 09       		.byte	0x9
 12560 1a0e 00       		.byte	0
 12561 1a0f 27       		.uleb128 0x27
 12562 1a10 E9030000 		.4byte	.LASF272
 12563 1a14 01       		.byte	0x1
 12564 1a15 9401     		.2byte	0x194
 12565 1a17 FF190000 		.4byte	0x19ff
 12566 1a1b 05       		.uleb128 0x5
 12567 1a1c 03       		.byte	0x3
 12568 1a1d 00000000 		.4byte	pedalRatios
 12569 1a21 27       		.uleb128 0x27
 12570 1a22 8A040000 		.4byte	.LASF273
 12571 1a26 01       		.byte	0x1
 12572 1a27 9501     		.2byte	0x195
 12573 1a29 A2000000 		.4byte	0xa2
 12574 1a2d 05       		.uleb128 0x5
 12575 1a2e 03       		.byte	0x3
 12576 1a2f 00000000 		.4byte	last_mux
 12577 1a33 27       		.uleb128 0x27
 12578 1a34 85090000 		.4byte	.LASF274
 12579 1a38 01       		.byte	0x1
 12580 1a39 9601     		.2byte	0x196
 12581 1a3b 03020000 		.4byte	0x203
 12582 1a3f 05       		.uleb128 0x5
 12583 1a40 03       		.byte	0x3
 12584 1a41 00000000 		.4byte	main_counter
 12585 1a45 27       		.uleb128 0x27
 12586 1a46 1C050000 		.4byte	.LASF275
 12587 1a4a 01       		.byte	0x1
 12588 1a4b 9701     		.2byte	0x197
 12589 1a4d A2000000 		.4byte	0xa2
 12590 1a51 05       		.uleb128 0x5
 12591 1a52 03       		.byte	0x3
 12592 1a53 00000000 		.4byte	neck
 12593 1a57 27       		.uleb128 0x27
 12594 1a58 9C090000 		.4byte	.LASF276
 12595 1a5c 01       		.byte	0x1
 12596 1a5d 9801     		.2byte	0x198
 12597 1a5f A2000000 		.4byte	0xa2
 12598 1a63 05       		.uleb128 0x5
 12599 1a64 03       		.byte	0x3
 12600 1a65 00000000 		.4byte	dualSlider
 12601 1a69 27       		.uleb128 0x27
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 269


 12602 1a6a 7F0C0000 		.4byte	.LASF277
 12603 1a6e 01       		.byte	0x1
 12604 1a6f 9901     		.2byte	0x199
 12605 1a71 A2000000 		.4byte	0xa2
 12606 1a75 05       		.uleb128 0x5
 12607 1a76 03       		.byte	0x3
 12608 1a77 00000000 		.4byte	enterUp
 12609 1a7b 27       		.uleb128 0x27
 12610 1a7c 57020000 		.4byte	.LASF278
 12611 1a80 01       		.byte	0x1
 12612 1a81 9A01     		.2byte	0x19a
 12613 1a83 A2000000 		.4byte	0xa2
 12614 1a87 05       		.uleb128 0x5
 12615 1a88 03       		.byte	0x3
 12616 1a89 00000000 		.4byte	voice
 12617 1a8d 27       		.uleb128 0x27
 12618 1a8e C9100000 		.4byte	.LASF279
 12619 1a92 01       		.byte	0x1
 12620 1a93 9B01     		.2byte	0x19b
 12621 1a95 A2000000 		.4byte	0xa2
 12622 1a99 05       		.uleb128 0x5
 12623 1a9a 03       		.byte	0x3
 12624 1a9b 00000000 		.4byte	editUp
 12625 1a9f 27       		.uleb128 0x27
 12626 1aa0 81050000 		.4byte	.LASF280
 12627 1aa4 01       		.byte	0x1
 12628 1aa5 9C01     		.2byte	0x19c
 12629 1aa7 A2000000 		.4byte	0xa2
 12630 1aab 05       		.uleb128 0x5
 12631 1aac 03       		.byte	0x3
 12632 1aad 00000000 		.4byte	oct1Up
 12633 1ab1 27       		.uleb128 0x27
 12634 1ab2 41100000 		.4byte	.LASF281
 12635 1ab6 01       		.byte	0x1
 12636 1ab7 9D01     		.2byte	0x19d
 12637 1ab9 A2000000 		.4byte	0xa2
 12638 1abd 05       		.uleb128 0x5
 12639 1abe 03       		.byte	0x3
 12640 1abf 00000000 		.4byte	oct4Up
 12641 1ac3 27       		.uleb128 0x27
 12642 1ac4 93040000 		.4byte	.LASF282
 12643 1ac8 01       		.byte	0x1
 12644 1ac9 9F01     		.2byte	0x19f
 12645 1acb D51A0000 		.4byte	0x1ad5
 12646 1acf 05       		.uleb128 0x5
 12647 1ad0 03       		.byte	0x3
 12648 1ad1 00000000 		.4byte	encoderVal
 12649 1ad5 06       		.uleb128 0x6
 12650 1ad6 D0170000 		.4byte	0x17d0
 12651 1ada 27       		.uleb128 0x27
 12652 1adb 76050000 		.4byte	.LASF283
 12653 1adf 01       		.byte	0x1
 12654 1ae0 A001     		.2byte	0x1a0
 12655 1ae2 94000000 		.4byte	0x94
 12656 1ae6 05       		.uleb128 0x5
 12657 1ae7 03       		.byte	0x3
 12658 1ae8 00000000 		.4byte	encoderNum
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 270


 12659 1aec 27       		.uleb128 0x27
 12660 1aed 620A0000 		.4byte	.LASF284
 12661 1af1 01       		.byte	0x1
 12662 1af2 A101     		.2byte	0x1a1
 12663 1af4 A2000000 		.4byte	0xa2
 12664 1af8 05       		.uleb128 0x5
 12665 1af9 03       		.byte	0x3
 12666 1afa 00000000 		.4byte	button1Up
 12667 1afe 27       		.uleb128 0x27
 12668 1aff 1D0D0000 		.4byte	.LASF285
 12669 1b03 01       		.byte	0x1
 12670 1b04 A201     		.2byte	0x1a2
 12671 1b06 A2000000 		.4byte	0xa2
 12672 1b0a 05       		.uleb128 0x5
 12673 1b0b 03       		.byte	0x3
 12674 1b0c 00000000 		.4byte	button2Up
 12675 1b10 27       		.uleb128 0x27
 12676 1b11 5D100000 		.4byte	.LASF286
 12677 1b15 01       		.byte	0x1
 12678 1b16 A301     		.2byte	0x1a3
 12679 1b18 A2000000 		.4byte	0xa2
 12680 1b1c 05       		.uleb128 0x5
 12681 1b1d 03       		.byte	0x3
 12682 1b1e 00000000 		.4byte	button3Up
 12683 1b22 27       		.uleb128 0x27
 12684 1b23 1C100000 		.4byte	.LASF287
 12685 1b27 01       		.byte	0x1
 12686 1b28 A401     		.2byte	0x1a4
 12687 1b2a A2000000 		.4byte	0xa2
 12688 1b2e 05       		.uleb128 0x5
 12689 1b2f 03       		.byte	0x3
 12690 1b30 00000000 		.4byte	button4Up
 12691 1b34 27       		.uleb128 0x27
 12692 1b35 2A0E0000 		.4byte	.LASF288
 12693 1b39 01       		.byte	0x1
 12694 1b3a A501     		.2byte	0x1a5
 12695 1b3c A2000000 		.4byte	0xa2
 12696 1b40 05       		.uleb128 0x5
 12697 1b41 03       		.byte	0x3
 12698 1b42 00000000 		.4byte	patchNum
 12699 1b46 07       		.uleb128 0x7
 12700 1b47 FD000000 		.4byte	0xfd
 12701 1b4b 621B0000 		.4byte	0x1b62
 12702 1b4f 08       		.uleb128 0x8
 12703 1b50 36010000 		.4byte	0x136
 12704 1b54 06       		.byte	0x6
 12705 1b55 08       		.uleb128 0x8
 12706 1b56 36010000 		.4byte	0x136
 12707 1b5a 0A       		.byte	0xa
 12708 1b5b 08       		.uleb128 0x8
 12709 1b5c 36010000 		.4byte	0x136
 12710 1b60 0B       		.byte	0xb
 12711 1b61 00       		.byte	0
 12712 1b62 27       		.uleb128 0x27
 12713 1b63 B0060000 		.4byte	.LASF289
 12714 1b67 01       		.byte	0x1
 12715 1b68 AB01     		.2byte	0x1ab
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 271


 12716 1b6a 461B0000 		.4byte	0x1b46
 12717 1b6e 05       		.uleb128 0x5
 12718 1b6f 03       		.byte	0x3
 12719 1b70 00000000 		.4byte	copedent
 12720 1b74 07       		.uleb128 0x7
 12721 1b75 A2000000 		.4byte	0xa2
 12722 1b79 8A1B0000 		.4byte	0x1b8a
 12723 1b7d 08       		.uleb128 0x8
 12724 1b7e 36010000 		.4byte	0x136
 12725 1b82 06       		.byte	0x6
 12726 1b83 08       		.uleb128 0x8
 12727 1b84 36010000 		.4byte	0x136
 12728 1b88 0D       		.byte	0xd
 12729 1b89 00       		.byte	0
 12730 1b8a 27       		.uleb128 0x27
 12731 1b8b 81010000 		.4byte	.LASF290
 12732 1b8f 01       		.byte	0x1
 12733 1b90 AC01     		.2byte	0x1ac
 12734 1b92 741B0000 		.4byte	0x1b74
 12735 1b96 05       		.uleb128 0x5
 12736 1b97 03       		.byte	0x3
 12737 1b98 00000000 		.4byte	copedentNamesArray
 12738 1b9c 07       		.uleb128 0x7
 12739 1b9d FD000000 		.4byte	0xfd
 12740 1ba1 AC1B0000 		.4byte	0x1bac
 12741 1ba5 08       		.uleb128 0x8
 12742 1ba6 36010000 		.4byte	0x136
 12743 1baa 0B       		.byte	0xb
 12744 1bab 00       		.byte	0
 12745 1bac 27       		.uleb128 0x27
 12746 1bad D1020000 		.4byte	.LASF291
 12747 1bb1 01       		.byte	0x1
 12748 1bb2 AE01     		.2byte	0x1ae
 12749 1bb4 9C1B0000 		.4byte	0x1b9c
 12750 1bb8 05       		.uleb128 0x5
 12751 1bb9 03       		.byte	0x3
 12752 1bba 00000000 		.4byte	prevStringPitchBend
 12753 1bbe 07       		.uleb128 0x7
 12754 1bbf FD000000 		.4byte	0xfd
 12755 1bc3 D41B0000 		.4byte	0x1bd4
 12756 1bc7 08       		.uleb128 0x8
 12757 1bc8 36010000 		.4byte	0x136
 12758 1bcc 09       		.byte	0x9
 12759 1bcd 08       		.uleb128 0x8
 12760 1bce 36010000 		.4byte	0x136
 12761 1bd2 0B       		.byte	0xb
 12762 1bd3 00       		.byte	0
 12763 1bd4 27       		.uleb128 0x27
 12764 1bd5 B6100000 		.4byte	.LASF292
 12765 1bd9 01       		.byte	0x1
 12766 1bda B001     		.2byte	0x1b0
 12767 1bdc BE1B0000 		.4byte	0x1bbe
 12768 1be0 05       		.uleb128 0x5
 12769 1be1 03       		.byte	0x3
 12770 1be2 00000000 		.4byte	pedals
 12771 1be6 27       		.uleb128 0x27
 12772 1be7 2A0B0000 		.4byte	.LASF293
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 272


 12773 1beb 01       		.byte	0x1
 12774 1bec B201     		.2byte	0x1b2
 12775 1bee BF180000 		.4byte	0x18bf
 12776 1bf2 05       		.uleb128 0x5
 12777 1bf3 03       		.byte	0x3
 12778 1bf4 00000000 		.4byte	pedal_cc_assignments
 12779 1bf8 27       		.uleb128 0x27
 12780 1bf9 0F0C0000 		.4byte	.LASF294
 12781 1bfd 01       		.byte	0x1
 12782 1bfe B301     		.2byte	0x1b3
 12783 1c00 9C1B0000 		.4byte	0x1b9c
 12784 1c04 05       		.uleb128 0x5
 12785 1c05 03       		.byte	0x3
 12786 1c06 00000000 		.4byte	openStringFrequencies
 12787 1c0a 27       		.uleb128 0x27
 12788 1c0b 160F0000 		.4byte	.LASF295
 12789 1c0f 01       		.byte	0x1
 12790 1c10 B401     		.2byte	0x1b4
 12791 1c12 9C1B0000 		.4byte	0x1b9c
 12792 1c16 05       		.uleb128 0x5
 12793 1c17 03       		.byte	0x3
 12794 1c18 00000000 		.4byte	stringMappedPositions
 12795 1c1c 27       		.uleb128 0x27
 12796 1c1d 8E070000 		.4byte	.LASF296
 12797 1c21 01       		.byte	0x1
 12798 1c22 B501     		.2byte	0x1b5
 12799 1c24 9C1B0000 		.4byte	0x1b9c
 12800 1c28 05       		.uleb128 0x5
 12801 1c29 03       		.byte	0x3
 12802 1c2a 00000000 		.4byte	invStringMappedPositions
 12803 1c2e 27       		.uleb128 0x27
 12804 1c2f ED100000 		.4byte	.LASF297
 12805 1c33 01       		.byte	0x1
 12806 1c34 B601     		.2byte	0x1b6
 12807 1c36 9C1B0000 		.4byte	0x1b9c
 12808 1c3a 05       		.uleb128 0x5
 12809 1c3b 03       		.byte	0x3
 12810 1c3c 00000000 		.4byte	stringFrequencies
 12811 1c40 27       		.uleb128 0x27
 12812 1c41 41040000 		.4byte	.LASF298
 12813 1c45 01       		.byte	0x1
 12814 1c46 B701     		.2byte	0x1b7
 12815 1c48 9C1B0000 		.4byte	0x1b9c
 12816 1c4c 05       		.uleb128 0x5
 12817 1c4d 03       		.byte	0x3
 12818 1c4e 00000000 		.4byte	stringOctave
 12819 1c52 27       		.uleb128 0x27
 12820 1c53 000A0000 		.4byte	.LASF299
 12821 1c57 01       		.byte	0x1
 12822 1c58 B801     		.2byte	0x1b8
 12823 1c5a 9C1B0000 		.4byte	0x1b9c
 12824 1c5e 05       		.uleb128 0x5
 12825 1c5f 03       		.byte	0x3
 12826 1c60 00000000 		.4byte	stringPitch
 12827 1c64 27       		.uleb128 0x27
 12828 1c65 B80E0000 		.4byte	.LASF300
 12829 1c69 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 273


 12830 1c6a B901     		.2byte	0x1b9
 12831 1c6c 9C1B0000 		.4byte	0x1b9c
 12832 1c70 05       		.uleb128 0x5
 12833 1c71 03       		.byte	0x3
 12834 1c72 00000000 		.4byte	stringMIDI
 12835 1c76 07       		.uleb128 0x7
 12836 1c77 94000000 		.4byte	0x94
 12837 1c7b 861C0000 		.4byte	0x1c86
 12838 1c7f 08       		.uleb128 0x8
 12839 1c80 36010000 		.4byte	0x136
 12840 1c84 0B       		.byte	0xb
 12841 1c85 00       		.byte	0
 12842 1c86 27       		.uleb128 0x27
 12843 1c87 BE080000 		.4byte	.LASF301
 12844 1c8b 01       		.byte	0x1
 12845 1c8c BA01     		.2byte	0x1ba
 12846 1c8e 761C0000 		.4byte	0x1c76
 12847 1c92 05       		.uleb128 0x5
 12848 1c93 03       		.byte	0x3
 12849 1c94 00000000 		.4byte	openStringMIDI_Int
 12850 1c98 27       		.uleb128 0x27
 12851 1c99 200E0000 		.4byte	.LASF302
 12852 1c9d 01       		.byte	0x1
 12853 1c9e BB01     		.2byte	0x1bb
 12854 1ca0 94000000 		.4byte	0x94
 12855 1ca4 05       		.uleb128 0x5
 12856 1ca5 03       		.byte	0x3
 12857 1ca6 00000000 		.4byte	OLEDcount
 12858 1caa 27       		.uleb128 0x27
 12859 1cab 120A0000 		.4byte	.LASF303
 12860 1caf 01       		.byte	0x1
 12861 1cb0 BD01     		.2byte	0x1bd
 12862 1cb2 94000000 		.4byte	0x94
 12863 1cb6 05       		.uleb128 0x5
 12864 1cb7 03       		.byte	0x3
 12865 1cb8 00000000 		.4byte	mainOLEDWaitingToSend
 12866 1cbc 27       		.uleb128 0x27
 12867 1cbd 57010000 		.4byte	.LASF304
 12868 1cc1 01       		.byte	0x1
 12869 1cc2 BE01     		.2byte	0x1be
 12870 1cc4 94000000 		.4byte	0x94
 12871 1cc8 05       		.uleb128 0x5
 12872 1cc9 03       		.byte	0x3
 12873 1cca 00000000 		.4byte	macroOLEDWaitingToSend
 12874 1cce 07       		.uleb128 0x7
 12875 1ccf 94000000 		.4byte	0x94
 12876 1cd3 DE1C0000 		.4byte	0x1cde
 12877 1cd7 08       		.uleb128 0x8
 12878 1cd8 36010000 		.4byte	0x136
 12879 1cdc 3F       		.byte	0x3f
 12880 1cdd 00       		.byte	0
 12881 1cde 27       		.uleb128 0x27
 12882 1cdf A7040000 		.4byte	.LASF305
 12883 1ce3 01       		.byte	0x1
 12884 1ce4 C001     		.2byte	0x1c0
 12885 1ce6 CE1C0000 		.4byte	0x1cce
 12886 1cea 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 274


 12887 1ceb 03       		.byte	0x3
 12888 1cec 00000000 		.4byte	presetAlreadyDisplayed
 12889 1cf0 27       		.uleb128 0x27
 12890 1cf1 330E0000 		.4byte	.LASF306
 12891 1cf5 01       		.byte	0x1
 12892 1cf6 C201     		.2byte	0x1c2
 12893 1cf8 FF190000 		.4byte	0x19ff
 12894 1cfc 05       		.uleb128 0x5
 12895 1cfd 03       		.byte	0x3
 12896 1cfe 00000000 		.4byte	pedals_float
 12897 1d02 27       		.uleb128 0x27
 12898 1d03 A70C0000 		.4byte	.LASF307
 12899 1d07 01       		.byte	0x1
 12900 1d08 CA01     		.2byte	0x1ca
 12901 1d0a 94000000 		.4byte	0x94
 12902 1d0e 05       		.uleb128 0x5
 12903 1d0f 03       		.byte	0x3
 12904 1d10 00000000 		.4byte	currentNeck
 12905 1d14 27       		.uleb128 0x27
 12906 1d15 B30C0000 		.4byte	.LASF308
 12907 1d19 01       		.byte	0x1
 12908 1d1a CC01     		.2byte	0x1cc
 12909 1d1c 94000000 		.4byte	0x94
 12910 1d20 05       		.uleb128 0x5
 12911 1d21 03       		.byte	0x3
 12912 1d22 00000000 		.4byte	editMode
 12913 1d26 27       		.uleb128 0x27
 12914 1d27 610F0000 		.4byte	.LASF309
 12915 1d2b 01       		.byte	0x1
 12916 1d2c CD01     		.2byte	0x1cd
 12917 1d2e 94000000 		.4byte	0x94
 12918 1d32 05       		.uleb128 0x5
 12919 1d33 03       		.byte	0x3
 12920 1d34 00000000 		.4byte	calibrationMode
 12921 1d38 27       		.uleb128 0x27
 12922 1d39 CB070000 		.4byte	.LASF310
 12923 1d3d 01       		.byte	0x1
 12924 1d3e D407     		.2byte	0x7d4
 12925 1d40 761C0000 		.4byte	0x1c76
 12926 1d44 05       		.uleb128 0x5
 12927 1d45 03       		.byte	0x3
 12928 1d46 00000000 		.4byte	prevNotes
 12929 1d4a 27       		.uleb128 0x27
 12930 1d4b 880B0000 		.4byte	.LASF311
 12931 1d4f 01       		.byte	0x1
 12932 1d50 4908     		.2byte	0x849
 12933 1d52 03020000 		.4byte	0x203
 12934 1d56 05       		.uleb128 0x5
 12935 1d57 03       		.byte	0x3
 12936 1d58 00000000 		.4byte	checkStatus
 12937 1d5c 27       		.uleb128 0x27
 12938 1d5d 090D0000 		.4byte	.LASF312
 12939 1d61 01       		.byte	0x1
 12940 1d62 4A08     		.2byte	0x84a
 12941 1d64 08020000 		.4byte	0x208
 12942 1d68 05       		.uleb128 0x5
 12943 1d69 03       		.byte	0x3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 275


 12944 1d6a 00000000 		.4byte	checkBase
 12945 1d6e 27       		.uleb128 0x27
 12946 1d6f F2060000 		.4byte	.LASF313
 12947 1d73 01       		.byte	0x1
 12948 1d74 4E08     		.2byte	0x84e
 12949 1d76 94000000 		.4byte	0x94
 12950 1d7a 05       		.uleb128 0x5
 12951 1d7b 03       		.byte	0x3
 12952 1d7c 00000000 		.4byte	SPI_errors
 12953 1d80 07       		.uleb128 0x7
 12954 1d81 03020000 		.4byte	0x203
 12955 1d85 901D0000 		.4byte	0x1d90
 12956 1d89 08       		.uleb128 0x8
 12957 1d8a 36010000 		.4byte	0x136
 12958 1d8e 03       		.byte	0x3
 12959 1d8f 00       		.byte	0
 12960 1d90 27       		.uleb128 0x27
 12961 1d91 DF0B0000 		.4byte	.LASF87
 12962 1d95 01       		.byte	0x1
 12963 1d96 CA09     		.2byte	0x9ca
 12964 1d98 A21D0000 		.4byte	0x1da2
 12965 1d9c 05       		.uleb128 0x5
 12966 1d9d 03       		.byte	0x3
 12967 1d9e 00000000 		.4byte	tempMIDI
 12968 1da2 06       		.uleb128 0x6
 12969 1da3 801D0000 		.4byte	0x1d80
 12970 1da7 27       		.uleb128 0x27
 12971 1da8 1F000000 		.4byte	.LASF314
 12972 1dac 01       		.byte	0x1
 12973 1dad CB09     		.2byte	0x9cb
 12974 1daf 03020000 		.4byte	0x203
 12975 1db3 05       		.uleb128 0x5
 12976 1db4 03       		.byte	0x3
 12977 1db5 00000000 		.4byte	firstSysex
 12978 1db9 27       		.uleb128 0x27
 12979 1dba 3C060000 		.4byte	.LASF315
 12980 1dbe 01       		.byte	0x1
 12981 1dbf CC09     		.2byte	0x9cc
 12982 1dc1 CB1D0000 		.4byte	0x1dcb
 12983 1dc5 05       		.uleb128 0x5
 12984 1dc6 03       		.byte	0x3
 12985 1dc7 00000000 		.4byte	sysexPointerMask
 12986 1dcb 24       		.uleb128 0x24
 12987 1dcc B8000000 		.4byte	0xb8
 12988 1dd0 00       		.byte	0
 12989              		.section	.debug_abbrev,"",%progbits
 12990              	.Ldebug_abbrev0:
 12991 0000 01       		.uleb128 0x1
 12992 0001 11       		.uleb128 0x11
 12993 0002 01       		.byte	0x1
 12994 0003 25       		.uleb128 0x25
 12995 0004 0E       		.uleb128 0xe
 12996 0005 13       		.uleb128 0x13
 12997 0006 0B       		.uleb128 0xb
 12998 0007 03       		.uleb128 0x3
 12999 0008 0E       		.uleb128 0xe
 13000 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 276


 13001 000a 0E       		.uleb128 0xe
 13002 000b 55       		.uleb128 0x55
 13003 000c 17       		.uleb128 0x17
 13004 000d 11       		.uleb128 0x11
 13005 000e 01       		.uleb128 0x1
 13006 000f 10       		.uleb128 0x10
 13007 0010 17       		.uleb128 0x17
 13008 0011 00       		.byte	0
 13009 0012 00       		.byte	0
 13010 0013 02       		.uleb128 0x2
 13011 0014 24       		.uleb128 0x24
 13012 0015 00       		.byte	0
 13013 0016 0B       		.uleb128 0xb
 13014 0017 0B       		.uleb128 0xb
 13015 0018 3E       		.uleb128 0x3e
 13016 0019 0B       		.uleb128 0xb
 13017 001a 03       		.uleb128 0x3
 13018 001b 0E       		.uleb128 0xe
 13019 001c 00       		.byte	0
 13020 001d 00       		.byte	0
 13021 001e 03       		.uleb128 0x3
 13022 001f 16       		.uleb128 0x16
 13023 0020 00       		.byte	0
 13024 0021 03       		.uleb128 0x3
 13025 0022 0E       		.uleb128 0xe
 13026 0023 3A       		.uleb128 0x3a
 13027 0024 0B       		.uleb128 0xb
 13028 0025 3B       		.uleb128 0x3b
 13029 0026 0B       		.uleb128 0xb
 13030 0027 49       		.uleb128 0x49
 13031 0028 13       		.uleb128 0x13
 13032 0029 00       		.byte	0
 13033 002a 00       		.byte	0
 13034 002b 04       		.uleb128 0x4
 13035 002c 24       		.uleb128 0x24
 13036 002d 00       		.byte	0
 13037 002e 0B       		.uleb128 0xb
 13038 002f 0B       		.uleb128 0xb
 13039 0030 3E       		.uleb128 0x3e
 13040 0031 0B       		.uleb128 0xb
 13041 0032 03       		.uleb128 0x3
 13042 0033 08       		.uleb128 0x8
 13043 0034 00       		.byte	0
 13044 0035 00       		.byte	0
 13045 0036 05       		.uleb128 0x5
 13046 0037 16       		.uleb128 0x16
 13047 0038 00       		.byte	0
 13048 0039 03       		.uleb128 0x3
 13049 003a 0E       		.uleb128 0xe
 13050 003b 3A       		.uleb128 0x3a
 13051 003c 0B       		.uleb128 0xb
 13052 003d 3B       		.uleb128 0x3b
 13053 003e 05       		.uleb128 0x5
 13054 003f 49       		.uleb128 0x49
 13055 0040 13       		.uleb128 0x13
 13056 0041 00       		.byte	0
 13057 0042 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 277


 13058 0043 06       		.uleb128 0x6
 13059 0044 35       		.uleb128 0x35
 13060 0045 00       		.byte	0
 13061 0046 49       		.uleb128 0x49
 13062 0047 13       		.uleb128 0x13
 13063 0048 00       		.byte	0
 13064 0049 00       		.byte	0
 13065 004a 07       		.uleb128 0x7
 13066 004b 01       		.uleb128 0x1
 13067 004c 01       		.byte	0x1
 13068 004d 49       		.uleb128 0x49
 13069 004e 13       		.uleb128 0x13
 13070 004f 01       		.uleb128 0x1
 13071 0050 13       		.uleb128 0x13
 13072 0051 00       		.byte	0
 13073 0052 00       		.byte	0
 13074 0053 08       		.uleb128 0x8
 13075 0054 21       		.uleb128 0x21
 13076 0055 00       		.byte	0
 13077 0056 49       		.uleb128 0x49
 13078 0057 13       		.uleb128 0x13
 13079 0058 2F       		.uleb128 0x2f
 13080 0059 0B       		.uleb128 0xb
 13081 005a 00       		.byte	0
 13082 005b 00       		.byte	0
 13083 005c 09       		.uleb128 0x9
 13084 005d 13       		.uleb128 0x13
 13085 005e 01       		.byte	0x1
 13086 005f 0B       		.uleb128 0xb
 13087 0060 0B       		.uleb128 0xb
 13088 0061 3A       		.uleb128 0x3a
 13089 0062 0B       		.uleb128 0xb
 13090 0063 3B       		.uleb128 0x3b
 13091 0064 05       		.uleb128 0x5
 13092 0065 01       		.uleb128 0x1
 13093 0066 13       		.uleb128 0x13
 13094 0067 00       		.byte	0
 13095 0068 00       		.byte	0
 13096 0069 0A       		.uleb128 0xa
 13097 006a 0D       		.uleb128 0xd
 13098 006b 00       		.byte	0
 13099 006c 03       		.uleb128 0x3
 13100 006d 0E       		.uleb128 0xe
 13101 006e 3A       		.uleb128 0x3a
 13102 006f 0B       		.uleb128 0xb
 13103 0070 3B       		.uleb128 0x3b
 13104 0071 05       		.uleb128 0x5
 13105 0072 49       		.uleb128 0x49
 13106 0073 13       		.uleb128 0x13
 13107 0074 38       		.uleb128 0x38
 13108 0075 0B       		.uleb128 0xb
 13109 0076 00       		.byte	0
 13110 0077 00       		.byte	0
 13111 0078 0B       		.uleb128 0xb
 13112 0079 04       		.uleb128 0x4
 13113 007a 01       		.byte	0x1
 13114 007b 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 278


 13115 007c 0B       		.uleb128 0xb
 13116 007d 49       		.uleb128 0x49
 13117 007e 13       		.uleb128 0x13
 13118 007f 3A       		.uleb128 0x3a
 13119 0080 0B       		.uleb128 0xb
 13120 0081 3B       		.uleb128 0x3b
 13121 0082 05       		.uleb128 0x5
 13122 0083 01       		.uleb128 0x1
 13123 0084 13       		.uleb128 0x13
 13124 0085 00       		.byte	0
 13125 0086 00       		.byte	0
 13126 0087 0C       		.uleb128 0xc
 13127 0088 28       		.uleb128 0x28
 13128 0089 00       		.byte	0
 13129 008a 03       		.uleb128 0x3
 13130 008b 0E       		.uleb128 0xe
 13131 008c 1C       		.uleb128 0x1c
 13132 008d 0B       		.uleb128 0xb
 13133 008e 00       		.byte	0
 13134 008f 00       		.byte	0
 13135 0090 0D       		.uleb128 0xd
 13136 0091 04       		.uleb128 0x4
 13137 0092 01       		.byte	0x1
 13138 0093 03       		.uleb128 0x3
 13139 0094 0E       		.uleb128 0xe
 13140 0095 0B       		.uleb128 0xb
 13141 0096 0B       		.uleb128 0xb
 13142 0097 49       		.uleb128 0x49
 13143 0098 13       		.uleb128 0x13
 13144 0099 3A       		.uleb128 0x3a
 13145 009a 0B       		.uleb128 0xb
 13146 009b 3B       		.uleb128 0x3b
 13147 009c 0B       		.uleb128 0xb
 13148 009d 01       		.uleb128 0x1
 13149 009e 13       		.uleb128 0x13
 13150 009f 00       		.byte	0
 13151 00a0 00       		.byte	0
 13152 00a1 0E       		.uleb128 0xe
 13153 00a2 17       		.uleb128 0x17
 13154 00a3 01       		.byte	0x1
 13155 00a4 03       		.uleb128 0x3
 13156 00a5 0E       		.uleb128 0xe
 13157 00a6 0B       		.uleb128 0xb
 13158 00a7 0B       		.uleb128 0xb
 13159 00a8 3A       		.uleb128 0x3a
 13160 00a9 0B       		.uleb128 0xb
 13161 00aa 3B       		.uleb128 0x3b
 13162 00ab 0B       		.uleb128 0xb
 13163 00ac 01       		.uleb128 0x1
 13164 00ad 13       		.uleb128 0x13
 13165 00ae 00       		.byte	0
 13166 00af 00       		.byte	0
 13167 00b0 0F       		.uleb128 0xf
 13168 00b1 0D       		.uleb128 0xd
 13169 00b2 00       		.byte	0
 13170 00b3 03       		.uleb128 0x3
 13171 00b4 08       		.uleb128 0x8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 279


 13172 00b5 3A       		.uleb128 0x3a
 13173 00b6 0B       		.uleb128 0xb
 13174 00b7 3B       		.uleb128 0x3b
 13175 00b8 0B       		.uleb128 0xb
 13176 00b9 49       		.uleb128 0x49
 13177 00ba 13       		.uleb128 0x13
 13178 00bb 00       		.byte	0
 13179 00bc 00       		.byte	0
 13180 00bd 10       		.uleb128 0x10
 13181 00be 2E       		.uleb128 0x2e
 13182 00bf 01       		.byte	0x1
 13183 00c0 3F       		.uleb128 0x3f
 13184 00c1 19       		.uleb128 0x19
 13185 00c2 03       		.uleb128 0x3
 13186 00c3 0E       		.uleb128 0xe
 13187 00c4 3A       		.uleb128 0x3a
 13188 00c5 0B       		.uleb128 0xb
 13189 00c6 3B       		.uleb128 0x3b
 13190 00c7 0B       		.uleb128 0xb
 13191 00c8 27       		.uleb128 0x27
 13192 00c9 19       		.uleb128 0x19
 13193 00ca 11       		.uleb128 0x11
 13194 00cb 01       		.uleb128 0x1
 13195 00cc 12       		.uleb128 0x12
 13196 00cd 06       		.uleb128 0x6
 13197 00ce 40       		.uleb128 0x40
 13198 00cf 18       		.uleb128 0x18
 13199 00d0 9642     		.uleb128 0x2116
 13200 00d2 19       		.uleb128 0x19
 13201 00d3 01       		.uleb128 0x1
 13202 00d4 13       		.uleb128 0x13
 13203 00d5 00       		.byte	0
 13204 00d6 00       		.byte	0
 13205 00d7 11       		.uleb128 0x11
 13206 00d8 0B       		.uleb128 0xb
 13207 00d9 01       		.byte	0x1
 13208 00da 11       		.uleb128 0x11
 13209 00db 01       		.uleb128 0x1
 13210 00dc 12       		.uleb128 0x12
 13211 00dd 06       		.uleb128 0x6
 13212 00de 00       		.byte	0
 13213 00df 00       		.byte	0
 13214 00e0 12       		.uleb128 0x12
 13215 00e1 34       		.uleb128 0x34
 13216 00e2 00       		.byte	0
 13217 00e3 03       		.uleb128 0x3
 13218 00e4 08       		.uleb128 0x8
 13219 00e5 3A       		.uleb128 0x3a
 13220 00e6 0B       		.uleb128 0xb
 13221 00e7 3B       		.uleb128 0x3b
 13222 00e8 0B       		.uleb128 0xb
 13223 00e9 49       		.uleb128 0x49
 13224 00ea 13       		.uleb128 0x13
 13225 00eb 02       		.uleb128 0x2
 13226 00ec 18       		.uleb128 0x18
 13227 00ed 00       		.byte	0
 13228 00ee 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 280


 13229 00ef 13       		.uleb128 0x13
 13230 00f0 2E       		.uleb128 0x2e
 13231 00f1 00       		.byte	0
 13232 00f2 3F       		.uleb128 0x3f
 13233 00f3 19       		.uleb128 0x19
 13234 00f4 03       		.uleb128 0x3
 13235 00f5 0E       		.uleb128 0xe
 13236 00f6 3A       		.uleb128 0x3a
 13237 00f7 0B       		.uleb128 0xb
 13238 00f8 3B       		.uleb128 0x3b
 13239 00f9 0B       		.uleb128 0xb
 13240 00fa 27       		.uleb128 0x27
 13241 00fb 19       		.uleb128 0x19
 13242 00fc 11       		.uleb128 0x11
 13243 00fd 01       		.uleb128 0x1
 13244 00fe 12       		.uleb128 0x12
 13245 00ff 06       		.uleb128 0x6
 13246 0100 40       		.uleb128 0x40
 13247 0101 18       		.uleb128 0x18
 13248 0102 9642     		.uleb128 0x2116
 13249 0104 19       		.uleb128 0x19
 13250 0105 00       		.byte	0
 13251 0106 00       		.byte	0
 13252 0107 14       		.uleb128 0x14
 13253 0108 2E       		.uleb128 0x2e
 13254 0109 00       		.byte	0
 13255 010a 3F       		.uleb128 0x3f
 13256 010b 19       		.uleb128 0x19
 13257 010c 03       		.uleb128 0x3
 13258 010d 0E       		.uleb128 0xe
 13259 010e 3A       		.uleb128 0x3a
 13260 010f 0B       		.uleb128 0xb
 13261 0110 3B       		.uleb128 0x3b
 13262 0111 05       		.uleb128 0x5
 13263 0112 27       		.uleb128 0x27
 13264 0113 19       		.uleb128 0x19
 13265 0114 11       		.uleb128 0x11
 13266 0115 01       		.uleb128 0x1
 13267 0116 12       		.uleb128 0x12
 13268 0117 06       		.uleb128 0x6
 13269 0118 40       		.uleb128 0x40
 13270 0119 18       		.uleb128 0x18
 13271 011a 9642     		.uleb128 0x2116
 13272 011c 19       		.uleb128 0x19
 13273 011d 00       		.byte	0
 13274 011e 00       		.byte	0
 13275 011f 15       		.uleb128 0x15
 13276 0120 2E       		.uleb128 0x2e
 13277 0121 01       		.byte	0x1
 13278 0122 3F       		.uleb128 0x3f
 13279 0123 19       		.uleb128 0x19
 13280 0124 03       		.uleb128 0x3
 13281 0125 0E       		.uleb128 0xe
 13282 0126 3A       		.uleb128 0x3a
 13283 0127 0B       		.uleb128 0xb
 13284 0128 3B       		.uleb128 0x3b
 13285 0129 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 281


 13286 012a 27       		.uleb128 0x27
 13287 012b 19       		.uleb128 0x19
 13288 012c 49       		.uleb128 0x49
 13289 012d 13       		.uleb128 0x13
 13290 012e 11       		.uleb128 0x11
 13291 012f 01       		.uleb128 0x1
 13292 0130 12       		.uleb128 0x12
 13293 0131 06       		.uleb128 0x6
 13294 0132 40       		.uleb128 0x40
 13295 0133 18       		.uleb128 0x18
 13296 0134 9642     		.uleb128 0x2116
 13297 0136 19       		.uleb128 0x19
 13298 0137 01       		.uleb128 0x1
 13299 0138 13       		.uleb128 0x13
 13300 0139 00       		.byte	0
 13301 013a 00       		.byte	0
 13302 013b 16       		.uleb128 0x16
 13303 013c 05       		.uleb128 0x5
 13304 013d 00       		.byte	0
 13305 013e 03       		.uleb128 0x3
 13306 013f 08       		.uleb128 0x8
 13307 0140 3A       		.uleb128 0x3a
 13308 0141 0B       		.uleb128 0xb
 13309 0142 3B       		.uleb128 0x3b
 13310 0143 05       		.uleb128 0x5
 13311 0144 49       		.uleb128 0x49
 13312 0145 13       		.uleb128 0x13
 13313 0146 02       		.uleb128 0x2
 13314 0147 18       		.uleb128 0x18
 13315 0148 00       		.byte	0
 13316 0149 00       		.byte	0
 13317 014a 17       		.uleb128 0x17
 13318 014b 34       		.uleb128 0x34
 13319 014c 00       		.byte	0
 13320 014d 03       		.uleb128 0x3
 13321 014e 0E       		.uleb128 0xe
 13322 014f 3A       		.uleb128 0x3a
 13323 0150 0B       		.uleb128 0xb
 13324 0151 3B       		.uleb128 0x3b
 13325 0152 05       		.uleb128 0x5
 13326 0153 49       		.uleb128 0x49
 13327 0154 13       		.uleb128 0x13
 13328 0155 02       		.uleb128 0x2
 13329 0156 18       		.uleb128 0x18
 13330 0157 00       		.byte	0
 13331 0158 00       		.byte	0
 13332 0159 18       		.uleb128 0x18
 13333 015a 05       		.uleb128 0x5
 13334 015b 00       		.byte	0
 13335 015c 03       		.uleb128 0x3
 13336 015d 0E       		.uleb128 0xe
 13337 015e 3A       		.uleb128 0x3a
 13338 015f 0B       		.uleb128 0xb
 13339 0160 3B       		.uleb128 0x3b
 13340 0161 05       		.uleb128 0x5
 13341 0162 49       		.uleb128 0x49
 13342 0163 13       		.uleb128 0x13
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 282


 13343 0164 02       		.uleb128 0x2
 13344 0165 18       		.uleb128 0x18
 13345 0166 00       		.byte	0
 13346 0167 00       		.byte	0
 13347 0168 19       		.uleb128 0x19
 13348 0169 34       		.uleb128 0x34
 13349 016a 00       		.byte	0
 13350 016b 03       		.uleb128 0x3
 13351 016c 08       		.uleb128 0x8
 13352 016d 3A       		.uleb128 0x3a
 13353 016e 0B       		.uleb128 0xb
 13354 016f 3B       		.uleb128 0x3b
 13355 0170 05       		.uleb128 0x5
 13356 0171 49       		.uleb128 0x49
 13357 0172 13       		.uleb128 0x13
 13358 0173 02       		.uleb128 0x2
 13359 0174 18       		.uleb128 0x18
 13360 0175 00       		.byte	0
 13361 0176 00       		.byte	0
 13362 0177 1A       		.uleb128 0x1a
 13363 0178 2E       		.uleb128 0x2e
 13364 0179 01       		.byte	0x1
 13365 017a 3F       		.uleb128 0x3f
 13366 017b 19       		.uleb128 0x19
 13367 017c 03       		.uleb128 0x3
 13368 017d 08       		.uleb128 0x8
 13369 017e 3A       		.uleb128 0x3a
 13370 017f 0B       		.uleb128 0xb
 13371 0180 3B       		.uleb128 0x3b
 13372 0181 05       		.uleb128 0x5
 13373 0182 27       		.uleb128 0x27
 13374 0183 19       		.uleb128 0x19
 13375 0184 49       		.uleb128 0x49
 13376 0185 13       		.uleb128 0x13
 13377 0186 11       		.uleb128 0x11
 13378 0187 01       		.uleb128 0x1
 13379 0188 12       		.uleb128 0x12
 13380 0189 06       		.uleb128 0x6
 13381 018a 40       		.uleb128 0x40
 13382 018b 18       		.uleb128 0x18
 13383 018c 9642     		.uleb128 0x2116
 13384 018e 19       		.uleb128 0x19
 13385 018f 01       		.uleb128 0x1
 13386 0190 13       		.uleb128 0x13
 13387 0191 00       		.byte	0
 13388 0192 00       		.byte	0
 13389 0193 1B       		.uleb128 0x1b
 13390 0194 2E       		.uleb128 0x2e
 13391 0195 00       		.byte	0
 13392 0196 3F       		.uleb128 0x3f
 13393 0197 19       		.uleb128 0x19
 13394 0198 03       		.uleb128 0x3
 13395 0199 0E       		.uleb128 0xe
 13396 019a 3A       		.uleb128 0x3a
 13397 019b 0B       		.uleb128 0xb
 13398 019c 3B       		.uleb128 0x3b
 13399 019d 05       		.uleb128 0x5
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 283


 13400 019e 11       		.uleb128 0x11
 13401 019f 01       		.uleb128 0x1
 13402 01a0 12       		.uleb128 0x12
 13403 01a1 06       		.uleb128 0x6
 13404 01a2 40       		.uleb128 0x40
 13405 01a3 18       		.uleb128 0x18
 13406 01a4 9742     		.uleb128 0x2117
 13407 01a6 19       		.uleb128 0x19
 13408 01a7 00       		.byte	0
 13409 01a8 00       		.byte	0
 13410 01a9 1C       		.uleb128 0x1c
 13411 01aa 2E       		.uleb128 0x2e
 13412 01ab 01       		.byte	0x1
 13413 01ac 3F       		.uleb128 0x3f
 13414 01ad 19       		.uleb128 0x19
 13415 01ae 03       		.uleb128 0x3
 13416 01af 0E       		.uleb128 0xe
 13417 01b0 3A       		.uleb128 0x3a
 13418 01b1 0B       		.uleb128 0xb
 13419 01b2 3B       		.uleb128 0x3b
 13420 01b3 05       		.uleb128 0x5
 13421 01b4 11       		.uleb128 0x11
 13422 01b5 01       		.uleb128 0x1
 13423 01b6 12       		.uleb128 0x12
 13424 01b7 06       		.uleb128 0x6
 13425 01b8 40       		.uleb128 0x40
 13426 01b9 18       		.uleb128 0x18
 13427 01ba 9642     		.uleb128 0x2116
 13428 01bc 19       		.uleb128 0x19
 13429 01bd 01       		.uleb128 0x1
 13430 01be 13       		.uleb128 0x13
 13431 01bf 00       		.byte	0
 13432 01c0 00       		.byte	0
 13433 01c1 1D       		.uleb128 0x1d
 13434 01c2 0B       		.uleb128 0xb
 13435 01c3 01       		.byte	0x1
 13436 01c4 11       		.uleb128 0x11
 13437 01c5 01       		.uleb128 0x1
 13438 01c6 12       		.uleb128 0x12
 13439 01c7 06       		.uleb128 0x6
 13440 01c8 01       		.uleb128 0x1
 13441 01c9 13       		.uleb128 0x13
 13442 01ca 00       		.byte	0
 13443 01cb 00       		.byte	0
 13444 01cc 1E       		.uleb128 0x1e
 13445 01cd 2E       		.uleb128 0x2e
 13446 01ce 00       		.byte	0
 13447 01cf 3F       		.uleb128 0x3f
 13448 01d0 19       		.uleb128 0x19
 13449 01d1 03       		.uleb128 0x3
 13450 01d2 0E       		.uleb128 0xe
 13451 01d3 3A       		.uleb128 0x3a
 13452 01d4 0B       		.uleb128 0xb
 13453 01d5 3B       		.uleb128 0x3b
 13454 01d6 05       		.uleb128 0x5
 13455 01d7 11       		.uleb128 0x11
 13456 01d8 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 284


 13457 01d9 12       		.uleb128 0x12
 13458 01da 06       		.uleb128 0x6
 13459 01db 40       		.uleb128 0x40
 13460 01dc 18       		.uleb128 0x18
 13461 01dd 9642     		.uleb128 0x2116
 13462 01df 19       		.uleb128 0x19
 13463 01e0 00       		.byte	0
 13464 01e1 00       		.byte	0
 13465 01e2 1F       		.uleb128 0x1f
 13466 01e3 2E       		.uleb128 0x2e
 13467 01e4 01       		.byte	0x1
 13468 01e5 3F       		.uleb128 0x3f
 13469 01e6 19       		.uleb128 0x19
 13470 01e7 03       		.uleb128 0x3
 13471 01e8 0E       		.uleb128 0xe
 13472 01e9 3A       		.uleb128 0x3a
 13473 01ea 0B       		.uleb128 0xb
 13474 01eb 3B       		.uleb128 0x3b
 13475 01ec 05       		.uleb128 0x5
 13476 01ed 27       		.uleb128 0x27
 13477 01ee 19       		.uleb128 0x19
 13478 01ef 11       		.uleb128 0x11
 13479 01f0 01       		.uleb128 0x1
 13480 01f1 12       		.uleb128 0x12
 13481 01f2 06       		.uleb128 0x6
 13482 01f3 40       		.uleb128 0x40
 13483 01f4 18       		.uleb128 0x18
 13484 01f5 9642     		.uleb128 0x2116
 13485 01f7 19       		.uleb128 0x19
 13486 01f8 01       		.uleb128 0x1
 13487 01f9 13       		.uleb128 0x13
 13488 01fa 00       		.byte	0
 13489 01fb 00       		.byte	0
 13490 01fc 20       		.uleb128 0x20
 13491 01fd 0F       		.uleb128 0xf
 13492 01fe 00       		.byte	0
 13493 01ff 0B       		.uleb128 0xb
 13494 0200 0B       		.uleb128 0xb
 13495 0201 49       		.uleb128 0x49
 13496 0202 13       		.uleb128 0x13
 13497 0203 00       		.byte	0
 13498 0204 00       		.byte	0
 13499 0205 21       		.uleb128 0x21
 13500 0206 34       		.uleb128 0x34
 13501 0207 00       		.byte	0
 13502 0208 03       		.uleb128 0x3
 13503 0209 0E       		.uleb128 0xe
 13504 020a 3A       		.uleb128 0x3a
 13505 020b 0B       		.uleb128 0xb
 13506 020c 3B       		.uleb128 0x3b
 13507 020d 0B       		.uleb128 0xb
 13508 020e 49       		.uleb128 0x49
 13509 020f 13       		.uleb128 0x13
 13510 0210 02       		.uleb128 0x2
 13511 0211 18       		.uleb128 0x18
 13512 0212 00       		.byte	0
 13513 0213 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 285


 13514 0214 22       		.uleb128 0x22
 13515 0215 34       		.uleb128 0x34
 13516 0216 00       		.byte	0
 13517 0217 03       		.uleb128 0x3
 13518 0218 0E       		.uleb128 0xe
 13519 0219 3A       		.uleb128 0x3a
 13520 021a 0B       		.uleb128 0xb
 13521 021b 3B       		.uleb128 0x3b
 13522 021c 0B       		.uleb128 0xb
 13523 021d 49       		.uleb128 0x49
 13524 021e 13       		.uleb128 0x13
 13525 021f 3F       		.uleb128 0x3f
 13526 0220 19       		.uleb128 0x19
 13527 0221 3C       		.uleb128 0x3c
 13528 0222 19       		.uleb128 0x19
 13529 0223 00       		.byte	0
 13530 0224 00       		.byte	0
 13531 0225 23       		.uleb128 0x23
 13532 0226 21       		.uleb128 0x21
 13533 0227 00       		.byte	0
 13534 0228 49       		.uleb128 0x49
 13535 0229 13       		.uleb128 0x13
 13536 022a 2F       		.uleb128 0x2f
 13537 022b 05       		.uleb128 0x5
 13538 022c 00       		.byte	0
 13539 022d 00       		.byte	0
 13540 022e 24       		.uleb128 0x24
 13541 022f 26       		.uleb128 0x26
 13542 0230 00       		.byte	0
 13543 0231 49       		.uleb128 0x49
 13544 0232 13       		.uleb128 0x13
 13545 0233 00       		.byte	0
 13546 0234 00       		.byte	0
 13547 0235 25       		.uleb128 0x25
 13548 0236 34       		.uleb128 0x34
 13549 0237 00       		.byte	0
 13550 0238 03       		.uleb128 0x3
 13551 0239 0E       		.uleb128 0xe
 13552 023a 3A       		.uleb128 0x3a
 13553 023b 0B       		.uleb128 0xb
 13554 023c 3B       		.uleb128 0x3b
 13555 023d 0B       		.uleb128 0xb
 13556 023e 49       		.uleb128 0x49
 13557 023f 13       		.uleb128 0x13
 13558 0240 3F       		.uleb128 0x3f
 13559 0241 19       		.uleb128 0x19
 13560 0242 02       		.uleb128 0x2
 13561 0243 18       		.uleb128 0x18
 13562 0244 00       		.byte	0
 13563 0245 00       		.byte	0
 13564 0246 26       		.uleb128 0x26
 13565 0247 34       		.uleb128 0x34
 13566 0248 00       		.byte	0
 13567 0249 03       		.uleb128 0x3
 13568 024a 0E       		.uleb128 0xe
 13569 024b 3A       		.uleb128 0x3a
 13570 024c 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 286


 13571 024d 3B       		.uleb128 0x3b
 13572 024e 05       		.uleb128 0x5
 13573 024f 49       		.uleb128 0x49
 13574 0250 13       		.uleb128 0x13
 13575 0251 3F       		.uleb128 0x3f
 13576 0252 19       		.uleb128 0x19
 13577 0253 3C       		.uleb128 0x3c
 13578 0254 19       		.uleb128 0x19
 13579 0255 00       		.byte	0
 13580 0256 00       		.byte	0
 13581 0257 27       		.uleb128 0x27
 13582 0258 34       		.uleb128 0x34
 13583 0259 00       		.byte	0
 13584 025a 03       		.uleb128 0x3
 13585 025b 0E       		.uleb128 0xe
 13586 025c 3A       		.uleb128 0x3a
 13587 025d 0B       		.uleb128 0xb
 13588 025e 3B       		.uleb128 0x3b
 13589 025f 05       		.uleb128 0x5
 13590 0260 49       		.uleb128 0x49
 13591 0261 13       		.uleb128 0x13
 13592 0262 3F       		.uleb128 0x3f
 13593 0263 19       		.uleb128 0x19
 13594 0264 02       		.uleb128 0x2
 13595 0265 18       		.uleb128 0x18
 13596 0266 00       		.byte	0
 13597 0267 00       		.byte	0
 13598 0268 28       		.uleb128 0x28
 13599 0269 34       		.uleb128 0x34
 13600 026a 00       		.byte	0
 13601 026b 03       		.uleb128 0x3
 13602 026c 08       		.uleb128 0x8
 13603 026d 3A       		.uleb128 0x3a
 13604 026e 0B       		.uleb128 0xb
 13605 026f 3B       		.uleb128 0x3b
 13606 0270 0B       		.uleb128 0xb
 13607 0271 49       		.uleb128 0x49
 13608 0272 13       		.uleb128 0x13
 13609 0273 3F       		.uleb128 0x3f
 13610 0274 19       		.uleb128 0x19
 13611 0275 02       		.uleb128 0x2
 13612 0276 18       		.uleb128 0x18
 13613 0277 00       		.byte	0
 13614 0278 00       		.byte	0
 13615 0279 00       		.byte	0
 13616              		.section	.debug_aranges,"",%progbits
 13617 0000 04010000 		.4byte	0x104
 13618 0004 0200     		.2byte	0x2
 13619 0006 00000000 		.4byte	.Ldebug_info0
 13620 000a 04       		.byte	0x4
 13621 000b 00       		.byte	0
 13622 000c 0000     		.2byte	0
 13623 000e 0000     		.2byte	0
 13624 0010 00000000 		.4byte	.LFB64
 13625 0014 74010000 		.4byte	.LFE64-.LFB64
 13626 0018 00000000 		.4byte	.LFB65
 13627 001c 9C000000 		.4byte	.LFE65-.LFB65
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 287


 13628 0020 00000000 		.4byte	.LFB66
 13629 0024 14000000 		.4byte	.LFE66-.LFB66
 13630 0028 00000000 		.4byte	.LFB67
 13631 002c 7C000000 		.4byte	.LFE67-.LFB67
 13632 0030 00000000 		.4byte	.LFB68
 13633 0034 58000000 		.4byte	.LFE68-.LFB68
 13634 0038 00000000 		.4byte	.LFB69
 13635 003c 68000000 		.4byte	.LFE69-.LFB69
 13636 0040 00000000 		.4byte	.LFB70
 13637 0044 4C000000 		.4byte	.LFE70-.LFB70
 13638 0048 00000000 		.4byte	.LFB71
 13639 004c 46000000 		.4byte	.LFE71-.LFB71
 13640 0050 00000000 		.4byte	.LFB72
 13641 0054 56000000 		.4byte	.LFE72-.LFB72
 13642 0058 00000000 		.4byte	.LFB73
 13643 005c 0C000000 		.4byte	.LFE73-.LFB73
 13644 0060 00000000 		.4byte	.LFB74
 13645 0064 0C010000 		.4byte	.LFE74-.LFB74
 13646 0068 00000000 		.4byte	.LFB75
 13647 006c CC1E0000 		.4byte	.LFE75-.LFB75
 13648 0070 00000000 		.4byte	.LFB76
 13649 0074 70000000 		.4byte	.LFE76-.LFB76
 13650 0078 00000000 		.4byte	.LFB77
 13651 007c 70010000 		.4byte	.LFE77-.LFB77
 13652 0080 00000000 		.4byte	.LFB78
 13653 0084 E0000000 		.4byte	.LFE78-.LFB78
 13654 0088 00000000 		.4byte	.LFB79
 13655 008c E0000000 		.4byte	.LFE79-.LFB79
 13656 0090 00000000 		.4byte	.LFB80
 13657 0094 30000000 		.4byte	.LFE80-.LFB80
 13658 0098 00000000 		.4byte	.LFB81
 13659 009c E8000000 		.4byte	.LFE81-.LFB81
 13660 00a0 00000000 		.4byte	.LFB82
 13661 00a4 54000000 		.4byte	.LFE82-.LFB82
 13662 00a8 00000000 		.4byte	.LFB83
 13663 00ac C4000000 		.4byte	.LFE83-.LFB83
 13664 00b0 00000000 		.4byte	.LFB84
 13665 00b4 98000000 		.4byte	.LFE84-.LFB84
 13666 00b8 00000000 		.4byte	.LFB85
 13667 00bc D4000000 		.4byte	.LFE85-.LFB85
 13668 00c0 00000000 		.4byte	.LFB86
 13669 00c4 1C000000 		.4byte	.LFE86-.LFB86
 13670 00c8 00000000 		.4byte	.LFB87
 13671 00cc 68000000 		.4byte	.LFE87-.LFB87
 13672 00d0 00000000 		.4byte	.LFB88
 13673 00d4 68000000 		.4byte	.LFE88-.LFB88
 13674 00d8 00000000 		.4byte	.LFB89
 13675 00dc 68000000 		.4byte	.LFE89-.LFB89
 13676 00e0 00000000 		.4byte	.LFB90
 13677 00e4 6C000000 		.4byte	.LFE90-.LFB90
 13678 00e8 00000000 		.4byte	.LFB91
 13679 00ec 64000000 		.4byte	.LFE91-.LFB91
 13680 00f0 00000000 		.4byte	.LFB92
 13681 00f4 EC0B0000 		.4byte	.LFE92-.LFB92
 13682 00f8 00000000 		.4byte	.LFB93
 13683 00fc 50010000 		.4byte	.LFE93-.LFB93
 13684 0100 00000000 		.4byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 288


 13685 0104 00000000 		.4byte	0
 13686              		.section	.debug_ranges,"",%progbits
 13687              	.Ldebug_ranges0:
 13688 0000 00000000 		.4byte	.LFB64
 13689 0004 74010000 		.4byte	.LFE64
 13690 0008 00000000 		.4byte	.LFB65
 13691 000c 9C000000 		.4byte	.LFE65
 13692 0010 00000000 		.4byte	.LFB66
 13693 0014 14000000 		.4byte	.LFE66
 13694 0018 00000000 		.4byte	.LFB67
 13695 001c 7C000000 		.4byte	.LFE67
 13696 0020 00000000 		.4byte	.LFB68
 13697 0024 58000000 		.4byte	.LFE68
 13698 0028 00000000 		.4byte	.LFB69
 13699 002c 68000000 		.4byte	.LFE69
 13700 0030 00000000 		.4byte	.LFB70
 13701 0034 4C000000 		.4byte	.LFE70
 13702 0038 00000000 		.4byte	.LFB71
 13703 003c 46000000 		.4byte	.LFE71
 13704 0040 00000000 		.4byte	.LFB72
 13705 0044 56000000 		.4byte	.LFE72
 13706 0048 00000000 		.4byte	.LFB73
 13707 004c 0C000000 		.4byte	.LFE73
 13708 0050 00000000 		.4byte	.LFB74
 13709 0054 0C010000 		.4byte	.LFE74
 13710 0058 00000000 		.4byte	.LFB75
 13711 005c CC1E0000 		.4byte	.LFE75
 13712 0060 00000000 		.4byte	.LFB76
 13713 0064 70000000 		.4byte	.LFE76
 13714 0068 00000000 		.4byte	.LFB77
 13715 006c 70010000 		.4byte	.LFE77
 13716 0070 00000000 		.4byte	.LFB78
 13717 0074 E0000000 		.4byte	.LFE78
 13718 0078 00000000 		.4byte	.LFB79
 13719 007c E0000000 		.4byte	.LFE79
 13720 0080 00000000 		.4byte	.LFB80
 13721 0084 30000000 		.4byte	.LFE80
 13722 0088 00000000 		.4byte	.LFB81
 13723 008c E8000000 		.4byte	.LFE81
 13724 0090 00000000 		.4byte	.LFB82
 13725 0094 54000000 		.4byte	.LFE82
 13726 0098 00000000 		.4byte	.LFB83
 13727 009c C4000000 		.4byte	.LFE83
 13728 00a0 00000000 		.4byte	.LFB84
 13729 00a4 98000000 		.4byte	.LFE84
 13730 00a8 00000000 		.4byte	.LFB85
 13731 00ac D4000000 		.4byte	.LFE85
 13732 00b0 00000000 		.4byte	.LFB86
 13733 00b4 1C000000 		.4byte	.LFE86
 13734 00b8 00000000 		.4byte	.LFB87
 13735 00bc 68000000 		.4byte	.LFE87
 13736 00c0 00000000 		.4byte	.LFB88
 13737 00c4 68000000 		.4byte	.LFE88
 13738 00c8 00000000 		.4byte	.LFB89
 13739 00cc 68000000 		.4byte	.LFE89
 13740 00d0 00000000 		.4byte	.LFB90
 13741 00d4 6C000000 		.4byte	.LFE90
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 289


 13742 00d8 00000000 		.4byte	.LFB91
 13743 00dc 64000000 		.4byte	.LFE91
 13744 00e0 00000000 		.4byte	.LFB92
 13745 00e4 EC0B0000 		.4byte	.LFE92
 13746 00e8 00000000 		.4byte	.LFB93
 13747 00ec 50010000 		.4byte	.LFE93
 13748 00f0 00000000 		.4byte	0
 13749 00f4 00000000 		.4byte	0
 13750              		.section	.debug_line,"",%progbits
 13751              	.Ldebug_line0:
 13752 0000 F60B0000 		.section	.debug_str,"MS",%progbits,1
 13752      02009B01 
 13752      00000201 
 13752      FB0E0D00 
 13752      01010101 
 13753              	.LASF168:
 13754 0000 70726573 		.ascii	"presetArraySection\000"
 13754      65744172 
 13754      72617953 
 13754      65637469 
 13754      6F6E00
 13755              	.LASF158:
 13756 0013 70726573 		.ascii	"presetArray\000"
 13756      65744172 
 13756      72617900 
 13757              	.LASF314:
 13758 001f 66697273 		.ascii	"firstSysex\000"
 13758      74537973 
 13758      657800
 13759              	.LASF28:
 13760 002a 73697A65 		.ascii	"sizetype\000"
 13760      74797065 
 13760      00
 13761              	.LASF173:
 13762 0033 73656E64 		.ascii	"sendingMessage\000"
 13762      696E674D 
 13762      65737361 
 13762      676500
 13763              	.LASF263:
 13764 0042 70726576 		.ascii	"prev_processed_volumePedal\000"
 13764      5F70726F 
 13764      63657373 
 13764      65645F76 
 13764      6F6C756D 
 13765              	.LASF85:
 13766 005d 74656D70 		.ascii	"tempangle\000"
 13766      616E676C 
 13766      6500
 13767              	.LASF229:
 13768 0067 6E657744 		.ascii	"newDataFlag2\000"
 13768      61746146 
 13768      6C616732 
 13768      00
 13769              	.LASF270:
 13770 0074 6D616372 		.ascii	"macroNamesArray\000"
 13770      6F4E616D 
 13770      65734172 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 290


 13770      72617900 
 13771              	.LASF38:
 13772 0084 43595F45 		.ascii	"CY_EM_EEPROM_SUCCESS\000"
 13772      4D5F4545 
 13772      50524F4D 
 13772      5F535543 
 13772      43455353 
 13773              	.LASF17:
 13774 0099 696E7433 		.ascii	"int32_t\000"
 13774      325F7400 
 13775              	.LASF149:
 13776 00a1 456D5F45 		.ascii	"Em_EEPROM_context\000"
 13776      4550524F 
 13776      4D5F636F 
 13776      6E746578 
 13776      7400
 13777              	.LASF47:
 13778 00b3 54686972 		.ascii	"ThirdLine\000"
 13778      644C696E 
 13778      6500
 13779              	.LASF112:
 13780 00bd 6E6F7465 		.ascii	"noteEvent\000"
 13780      4576656E 
 13780      7400
 13781              	.LASF238:
 13782 00c7 53504932 		.ascii	"SPI2errorflag\000"
 13782      6572726F 
 13782      72666C61 
 13782      6700
 13783              	.LASF21:
 13784 00d5 75696E74 		.ascii	"uint32\000"
 13784      333200
 13785              	.LASF94:
 13786 00dc 77686963 		.ascii	"whichMacroToStoreName\000"
 13786      684D6163 
 13786      726F546F 
 13786      53746F72 
 13786      654E616D 
 13787              	.LASF125:
 13788 00f2 43437661 		.ascii	"CCval\000"
 13788      6C00
 13789              	.LASF179:
 13790 00f8 6E756D4D 		.ascii	"numMappings\000"
 13790      61707069 
 13790      6E677300 
 13791              	.LASF153:
 13792 0104 49324362 		.ascii	"I2Cbuff1\000"
 13792      75666631 
 13792      00
 13793              	.LASF250:
 13794 010d 49324362 		.ascii	"I2Cbuff2\000"
 13794      75666632 
 13794      00
 13795              	.LASF252:
 13796 0116 6D75785F 		.ascii	"mux_states\000"
 13796      73746174 
 13796      657300
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 291


 13797              	.LASF138:
 13798 0121 74656D70 		.ascii	"tempLow\000"
 13798      4C6F7700 
 13799              	.LASF207:
 13800 0129 6E65636B 		.ascii	"necks\000"
 13800      7300
 13801              	.LASF198:
 13802 012f 6F637461 		.ascii	"octave\000"
 13802      766500
 13803              	.LASF49:
 13804 0136 4E696C4C 		.ascii	"NilLine\000"
 13804      696E6500 
 13805              	.LASF43:
 13806 013e 63795F65 		.ascii	"cy_en_em_eeprom_status_t\000"
 13806      6E5F656D 
 13806      5F656570 
 13806      726F6D5F 
 13806      73746174 
 13807              	.LASF304:
 13808 0157 6D616372 		.ascii	"macroOLEDWaitingToSend\000"
 13808      6F4F4C45 
 13808      44576169 
 13808      74696E67 
 13808      546F5365 
 13809              	.LASF255:
 13810 016e 70656461 		.ascii	"pedals_high\000"
 13810      6C735F68 
 13810      69676800 
 13811              	.LASF100:
 13812 017a 6E627974 		.ascii	"nbytes\000"
 13812      657300
 13813              	.LASF290:
 13814 0181 636F7065 		.ascii	"copedentNamesArray\000"
 13814      64656E74 
 13814      4E616D65 
 13814      73417272 
 13814      617900
 13815              	.LASF177:
 13816 0194 76616C73 		.ascii	"valsCount\000"
 13816      436F756E 
 13816      7400
 13817              	.LASF196:
 13818 019e 74656D70 		.ascii	"temper\000"
 13818      657200
 13819              	.LASF124:
 13820 01a5 43436E75 		.ascii	"CCnum\000"
 13820      6D00
 13821              	.LASF40:
 13822 01ab 43595F45 		.ascii	"CY_EM_EEPROM_BAD_CHECKSUM\000"
 13822      4D5F4545 
 13822      50524F4D 
 13822      5F424144 
 13822      5F434845 
 13823              	.LASF36:
 13824 01c5 75736572 		.ascii	"userFlashStartAddr\000"
 13824      466C6173 
 13824      68537461 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 292


 13824      72744164 
 13824      647200
 13825              	.LASF30:
 13826 01d8 6E756D62 		.ascii	"numberOfRows\000"
 13826      65724F66 
 13826      526F7773 
 13826      00
 13827              	.LASF132:
 13828 01e5 696E7456 		.ascii	"intVal\000"
 13828      616C00
 13829              	.LASF70:
 13830 01ec 69737461 		.ascii	"istart\000"
 13830      727400
 13831              	.LASF74:
 13832 01f3 70656461 		.ascii	"pedalDiff\000"
 13832      6C446966 
 13832      6600
 13833              	.LASF129:
 13834 01fd 74686556 		.ascii	"theVal\000"
 13834      616C00
 13835              	.LASF34:
 13836 0204 72656475 		.ascii	"redundantCopy\000"
 13836      6E64616E 
 13836      74436F70 
 13836      7900
 13837              	.LASF2:
 13838 0212 5F5F7569 		.ascii	"__uint8_t\000"
 13838      6E74385F 
 13838      7400
 13839              	.LASF67:
 13840 021c 616C7068 		.ascii	"alpha\000"
 13840      6100
 13841              	.LASF57:
 13842 0222 70726573 		.ascii	"presetEnd\000"
 13842      6574456E 
 13842      6400
 13843              	.LASF249:
 13844 022c 62617243 		.ascii	"barCount\000"
 13844      6F756E74 
 13844      00
 13845              	.LASF161:
 13846 0235 73656E64 		.ascii	"sendMessageEnd\000"
 13846      4D657373 
 13846      61676545 
 13846      6E6400
 13847              	.LASF268:
 13848 0244 70726573 		.ascii	"presetNumberToLoad\000"
 13848      65744E75 
 13848      6D626572 
 13848      546F4C6F 
 13848      616400
 13849              	.LASF278:
 13850 0257 766F6963 		.ascii	"voice\000"
 13850      6500
 13851              	.LASF218:
 13852 025d 73747269 		.ascii	"strings\000"
 13852      6E677300 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 293


 13853              	.LASF8:
 13854 0265 6C6F6E67 		.ascii	"long int\000"
 13854      20696E74 
 13854      00
 13855              	.LASF175:
 13856 026e 63757272 		.ascii	"currentFloat\000"
 13856      656E7446 
 13856      6C6F6174 
 13856      00
 13857              	.LASF269:
 13858 027b 70726573 		.ascii	"presetLoadedResponse\000"
 13858      65744C6F 
 13858      61646564 
 13858      52657370 
 13858      6F6E7365 
 13859              	.LASF159:
 13860 0290 70726573 		.ascii	"presetNumberToWrite\000"
 13860      65744E75 
 13860      6D626572 
 13860      546F5772 
 13860      69746500 
 13861              	.LASF93:
 13862 02a4 77686963 		.ascii	"whichPresetToStoreName\000"
 13862      68507265 
 13862      73657454 
 13862      6F53746F 
 13862      72654E61 
 13863              	.LASF267:
 13864 02bb 70726573 		.ascii	"presetNamesArray\000"
 13864      65744E61 
 13864      6D657341 
 13864      72726179 
 13864      00
 13865              	.LASF75:
 13866 02cc 6D61696E 		.ascii	"main\000"
 13866      00
 13867              	.LASF291:
 13868 02d1 70726576 		.ascii	"prevStringPitchBend\000"
 13868      53747269 
 13868      6E675069 
 13868      74636842 
 13868      656E6400 
 13869              	.LASF119:
 13870 02e5 4D494449 		.ascii	"MIDInoteNum\000"
 13870      6E6F7465 
 13870      4E756D00 
 13871              	.LASF127:
 13872 02f1 73656E64 		.ascii	"sendMIDIAllNotesOff\000"
 13872      4D494449 
 13872      416C6C4E 
 13872      6F746573 
 13872      4F666600 
 13873              	.LASF102:
 13874 0305 6572726F 		.ascii	"error\000"
 13874      7200
 13875              	.LASF46:
 13876 030b 5365636F 		.ascii	"SecondLine\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 294


 13876      6E644C69 
 13876      6E6500
 13877              	.LASF271:
 13878 0316 66726574 		.ascii	"fretScaling\000"
 13878      5363616C 
 13878      696E6700 
 13879              	.LASF174:
 13880 0322 73656E64 		.ascii	"sendKnobs\000"
 13880      4B6E6F62 
 13880      7300
 13881              	.LASF51:
 13882 032c 70726573 		.ascii	"presetArraySectionState\000"
 13882      65744172 
 13882      72617953 
 13882      65637469 
 13882      6F6E5374 
 13883              	.LASF240:
 13884 0344 6B6E6F62 		.ascii	"knobs\000"
 13884      7300
 13885              	.LASF155:
 13886 034a 73797365 		.ascii	"sysexPointer\000"
 13886      78506F69 
 13886      6E746572 
 13886      00
 13887              	.LASF68:
 13888 0357 6F6D416C 		.ascii	"omAlpha\000"
 13888      70686100 
 13889              	.LASF80:
 13890 035f 73747269 		.ascii	"stringStartLoc\000"
 13890      6E675374 
 13890      6172744C 
 13890      6F6300
 13891              	.LASF0:
 13892 036e 7369676E 		.ascii	"signed char\000"
 13892      65642063 
 13892      68617200 
 13893              	.LASF14:
 13894 037a 75696E74 		.ascii	"uint8_t\000"
 13894      385F7400 
 13895              	.LASF29:
 13896 0382 776C456E 		.ascii	"wlEndAddr\000"
 13896      64416464 
 13896      7200
 13897              	.LASF140:
 13898 038c 5553425F 		.ascii	"USB_callbackLocalMidiEvent\000"
 13898      63616C6C 
 13898      6261636B 
 13898      4C6F6361 
 13898      6C4D6964 
 13899              	.LASF111:
 13900 03a7 73706973 		.ascii	"spis_1_ss\000"
 13900      5F315F73 
 13900      7300
 13901              	.LASF41:
 13902 03b1 43595F45 		.ascii	"CY_EM_EEPROM_BAD_DATA\000"
 13902      4D5F4545 
 13902      50524F4D 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 295


 13902      5F424144 
 13902      5F444154 
 13903              	.LASF50:
 13904 03c7 5F4F4C45 		.ascii	"_OLEDLine\000"
 13904      444C696E 
 13904      6500
 13905              	.LASF176:
 13906 03d1 6D617043 		.ascii	"mapCount\000"
 13906      6F756E74 
 13906      00
 13907              	.LASF136:
 13908 03da 74656D70 		.ascii	"tempIntVersion\000"
 13908      496E7456 
 13908      65727369 
 13908      6F6E00
 13909              	.LASF272:
 13910 03e9 70656461 		.ascii	"pedalRatios\000"
 13910      6C526174 
 13910      696F7300 
 13911              	.LASF1:
 13912 03f5 756E7369 		.ascii	"unsigned char\000"
 13912      676E6564 
 13912      20636861 
 13912      7200
 13913              	.LASF181:
 13914 0403 76616C43 		.ascii	"valCheck\000"
 13914      6865636B 
 13914      00
 13915              	.LASF131:
 13916 040c 76616C73 		.ascii	"valsStart\000"
 13916      53746172 
 13916      7400
 13917              	.LASF77:
 13918 0416 636F7065 		.ascii	"coped\000"
 13918      6400
 13919              	.LASF208:
 13920 041c 72783143 		.ascii	"rx1Channel\000"
 13920      68616E6E 
 13920      656C00
 13921              	.LASF79:
 13922 0427 70656461 		.ascii	"pedalStartLoc\000"
 13922      6C537461 
 13922      72744C6F 
 13922      6300
 13923              	.LASF224:
 13924 0435 6E657744 		.ascii	"newDataFlag\000"
 13924      61746146 
 13924      6C616700 
 13925              	.LASF298:
 13926 0441 73747269 		.ascii	"stringOctave\000"
 13926      6E674F63 
 13926      74617665 
 13926      00
 13927              	.LASF109:
 13928 044e 5553425F 		.ascii	"USB_service\000"
 13928      73657276 
 13928      69636500 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 296


 13929              	.LASF178:
 13930 045a 6D617043 		.ascii	"mapCountExpectation\000"
 13930      6F756E74 
 13930      45787065 
 13930      63746174 
 13930      696F6E00 
 13931              	.LASF62:
 13932 046e 74656D70 		.ascii	"tempmax\000"
 13932      6D617800 
 13933              	.LASF130:
 13934 0476 73746F70 		.ascii	"stoppingPoint\000"
 13934      70696E67 
 13934      506F696E 
 13934      7400
 13935              	.LASF69:
 13936 0484 76616C75 		.ascii	"value\000"
 13936      6500
 13937              	.LASF273:
 13938 048a 6C617374 		.ascii	"last_mux\000"
 13938      5F6D7578 
 13938      00
 13939              	.LASF282:
 13940 0493 656E636F 		.ascii	"encoderVal\000"
 13940      64657256 
 13940      616C00
 13941              	.LASF122:
 13942 049e 70726573 		.ascii	"pressure\000"
 13942      73757265 
 13942      00
 13943              	.LASF305:
 13944 04a7 70726573 		.ascii	"presetAlreadyDisplayed\000"
 13944      6574416C 
 13944      72656164 
 13944      79446973 
 13944      706C6179 
 13945              	.LASF53:
 13946 04be 6D616372 		.ascii	"macroNames\000"
 13946      6F4E616D 
 13946      657300
 13947              	.LASF219:
 13948 04c9 70726576 		.ascii	"prevStrings\000"
 13948      53747269 
 13948      6E677300 
 13949              	.LASF24:
 13950 04d5 63686172 		.ascii	"char\000"
 13950      00
 13951              	.LASF143:
 13952 04da 65657072 		.ascii	"eepromArray\000"
 13952      6F6D4172 
 13952      72617900 
 13953              	.LASF206:
 13954 04e6 63757272 		.ascii	"currentCopedent\000"
 13954      656E7443 
 13954      6F706564 
 13954      656E7400 
 13955              	.LASF202:
 13956 04f6 72617741 		.ascii	"rawAngle\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 297


 13956      6E676C65 
 13956      00
 13957              	.LASF63:
 13958 04ff 4C454146 		.ascii	"LEAF_clip\000"
 13958      5F636C69 
 13958      7000
 13959              	.LASF96:
 13960 0509 446D6154 		.ascii	"DmaTxConfiguration\000"
 13960      78436F6E 
 13960      66696775 
 13960      72617469 
 13960      6F6E00
 13961              	.LASF275:
 13962 051c 6E65636B 		.ascii	"neck\000"
 13962      00
 13963              	.LASF5:
 13964 0521 5F5F7569 		.ascii	"__uint16_t\000"
 13964      6E743136 
 13964      5F7400
 13965              	.LASF108:
 13966 052c 63686563 		.ascii	"checkUSB_Vbus\000"
 13966      6B555342 
 13966      5F566275 
 13966      7300
 13967              	.LASF139:
 13968 053a 726F756E 		.ascii	"roundedIndex\000"
 13968      64656449 
 13968      6E646578 
 13968      00
 13969              	.LASF248:
 13970 0547 65657072 		.ascii	"eeprom_cnt\000"
 13970      6F6D5F63 
 13970      6E7400
 13971              	.LASF147:
 13972 0552 5553425F 		.ascii	"USB_midi_out_ep\000"
 13972      6D696469 
 13972      5F6F7574 
 13972      5F657000 
 13973              	.LASF86:
 13974 0562 74656D70 		.ascii	"tempPedal\000"
 13974      50656461 
 13974      6C00
 13975              	.LASF105:
 13976 056c 4932435F 		.ascii	"I2C_reset\000"
 13976      72657365 
 13976      7400
 13977              	.LASF283:
 13978 0576 656E636F 		.ascii	"encoderNum\000"
 13978      6465724E 
 13978      756D00
 13979              	.LASF280:
 13980 0581 6F637431 		.ascii	"oct1Up\000"
 13980      557000
 13981              	.LASF44:
 13982 0588 75696E74 		.ascii	"uint\000"
 13982      00
 13983              	.LASF204:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 298


 13984 058d 6D696469 		.ascii	"midiOverflow\000"
 13984      4F766572 
 13984      666C6F77 
 13984      00
 13985              	.LASF106:
 13986 059a 6275726E 		.ascii	"burnInitialPedalZeroPositions\000"
 13986      496E6974 
 13986      69616C50 
 13986      6564616C 
 13986      5A65726F 
 13987              	.LASF121:
 13988 05b8 73656E64 		.ascii	"sendMIDIPolyKeyPressure\000"
 13988      4D494449 
 13988      506F6C79 
 13988      4B657950 
 13988      72657373 
 13989              	.LASF135:
 13990 05d0 73747269 		.ascii	"stringChange\000"
 13990      6E674368 
 13990      616E6765 
 13990      00
 13991              	.LASF90:
 13992 05dd 636F6D70 		.ascii	"computerMIDIOffset\000"
 13992      75746572 
 13992      4D494449 
 13992      4F666673 
 13992      657400
 13993              	.LASF166:
 13994 05f0 73696E67 		.ascii	"singleParamValueLow\000"
 13994      6C655061 
 13994      72616D56 
 13994      616C7565 
 13994      4C6F7700 
 13995              	.LASF123:
 13996 0604 73656E64 		.ascii	"sendMIDIControlChange\000"
 13996      4D494449 
 13996      436F6E74 
 13996      726F6C43 
 13996      68616E67 
 13997              	.LASF223:
 13998 061a 73706943 		.ascii	"spiCounter\000"
 13998      6F756E74 
 13998      657200
 13999              	.LASF39:
 14000 0625 43595F45 		.ascii	"CY_EM_EEPROM_BAD_PARAM\000"
 14000      4D5F4545 
 14000      50524F4D 
 14000      5F424144 
 14000      5F504152 
 14001              	.LASF315:
 14002 063c 73797365 		.ascii	"sysexPointerMask\000"
 14002      78506F69 
 14002      6E746572 
 14002      4D61736B 
 14002      00
 14003              	.LASF151:
 14004 064d 4932435F 		.ascii	"I2C_1_initVar\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 299


 14004      315F696E 
 14004      69745661 
 14004      7200
 14005              	.LASF52:
 14006 065b 70726573 		.ascii	"presetName\000"
 14006      65744E61 
 14006      6D6500
 14007              	.LASF157:
 14008 0666 70617273 		.ascii	"parsingSysex\000"
 14008      696E6753 
 14008      79736578 
 14008      00
 14009              	.LASF195:
 14010 0673 72657475 		.ascii	"returnedData\000"
 14010      726E6564 
 14010      44617461 
 14010      00
 14011              	.LASF48:
 14012 0680 466F7572 		.ascii	"FourthLine\000"
 14012      74684C69 
 14012      6E6500
 14013              	.LASF245:
 14014 068b 77686963 		.ascii	"whichMacro\000"
 14014      684D6163 
 14014      726F00
 14015              	.LASF257:
 14016 0696 766F6C75 		.ascii	"volumePedal\000"
 14016      6D655065 
 14016      64616C00 
 14017              	.LASF216:
 14018 06a2 72784275 		.ascii	"rxBufferPluck\000"
 14018      66666572 
 14018      506C7563 
 14018      6B00
 14019              	.LASF289:
 14020 06b0 636F7065 		.ascii	"copedent\000"
 14020      64656E74 
 14020      00
 14021              	.LASF260:
 14022 06b9 70656461 		.ascii	"pedals8bit\000"
 14022      6C733862 
 14022      697400
 14023              	.LASF241:
 14024 06c4 70726576 		.ascii	"prevKnobs\000"
 14024      4B6E6F62 
 14024      7300
 14025              	.LASF236:
 14026 06ce 6D795370 		.ascii	"mySpiCounter\000"
 14026      69436F75 
 14026      6E746572 
 14026      00
 14027              	.LASF171:
 14028 06db 73797365 		.ascii	"sysexMessageInProgress\000"
 14028      784D6573 
 14028      73616765 
 14028      496E5072 
 14028      6F677265 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 300


 14029              	.LASF313:
 14030 06f2 5350495F 		.ascii	"SPI_errors\000"
 14030      6572726F 
 14030      727300
 14031              	.LASF117:
 14032 06fd 43434576 		.ascii	"CCEvent\000"
 14032      656E7400 
 14033              	.LASF128:
 14034 0705 70617273 		.ascii	"parseSysex\000"
 14034      65537973 
 14034      657800
 14035              	.LASF318:
 14036 0710 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\dev\\Electrosteel_embedded\\"
 14036      73657273 
 14036      5C4A6566 
 14036      66536E79 
 14036      6465725C 
 14037 073e 50534F43 		.ascii	"PSOC5_electrosteel_stringsensors_newpcb_brain\\CE21"
 14037      355F656C 
 14037      65637472 
 14037      6F737465 
 14037      656C5F73 
 14038 0770 30353134 		.ascii	"0514_PSOC3_5_Thermistor.cydsn\000"
 14038      5F50534F 
 14038      43335F35 
 14038      5F546865 
 14038      726D6973 
 14039              	.LASF296:
 14040 078e 696E7653 		.ascii	"invStringMappedPositions\000"
 14040      7472696E 
 14040      674D6170 
 14040      70656450 
 14040      6F736974 
 14041              	.LASF234:
 14042 07a7 696E7075 		.ascii	"inputData\000"
 14042      74446174 
 14042      6100
 14043              	.LASF66:
 14044 07b1 4C454146 		.ascii	"LEAF_interpolation_linear\000"
 14044      5F696E74 
 14044      6572706F 
 14044      6C617469 
 14044      6F6E5F6C 
 14045              	.LASF310:
 14046 07cb 70726576 		.ascii	"prevNotes\000"
 14046      4E6F7465 
 14046      7300
 14047              	.LASF37:
 14048 07d5 63795F73 		.ascii	"cy_stc_eeprom_context_t\000"
 14048      74635F65 
 14048      6570726F 
 14048      6D5F636F 
 14048      6E746578 
 14049              	.LASF10:
 14050 07ed 6C6F6E67 		.ascii	"long unsigned int\000"
 14050      20756E73 
 14050      69676E65 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 301


 14050      6420696E 
 14050      7400
 14051              	.LASF150:
 14052 07ff 456D5F45 		.ascii	"Em_EEPROM_em_EepromStorage\000"
 14052      4550524F 
 14052      4D5F656D 
 14052      5F456570 
 14052      726F6D53 
 14053              	.LASF247:
 14054 081a 65657072 		.ascii	"eepromReturnValue\000"
 14054      6F6D5265 
 14054      7475726E 
 14054      56616C75 
 14054      6500
 14055              	.LASF84:
 14056 082c 74656D70 		.ascii	"tempInt\000"
 14056      496E7400 
 14057              	.LASF83:
 14058 0834 73746174 		.ascii	"status\000"
 14058      757300
 14059              	.LASF251:
 14060 083b 73656E64 		.ascii	"send_it\000"
 14060      5F697400 
 14061              	.LASF193:
 14062 0843 6C696E65 		.ascii	"linearPotValue32Bit\000"
 14062      6172506F 
 14062      7456616C 
 14062      75653332 
 14062      42697400 
 14063              	.LASF120:
 14064 0857 6368616E 		.ascii	"channel\000"
 14064      6E656C00 
 14065              	.LASF98:
 14066 085f 4932435F 		.ascii	"I2C_MasterWriteBlocking\000"
 14066      4D617374 
 14066      65725772 
 14066      69746542 
 14066      6C6F636B 
 14067              	.LASF199:
 14068 0877 616E676C 		.ascii	"angle\000"
 14068      6500
 14069              	.LASF183:
 14070 087d 6E756D53 		.ascii	"numStrings\000"
 14070      7472696E 
 14070      677300
 14071              	.LASF42:
 14072 0888 43595F45 		.ascii	"CY_EM_EEPROM_WRITE_FAIL\000"
 14072      4D5F4545 
 14072      50524F4D 
 14072      5F575249 
 14072      54455F46 
 14073              	.LASF72:
 14074 08a0 6F737461 		.ascii	"ostart\000"
 14074      727400
 14075              	.LASF266:
 14076 08a7 63757272 		.ascii	"currentPresetSelection\000"
 14076      656E7450 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 302


 14076      72657365 
 14076      7453656C 
 14076      65637469 
 14077              	.LASF301:
 14078 08be 6F70656E 		.ascii	"openStringMIDI_Int\000"
 14078      53747269 
 14078      6E674D49 
 14078      44495F49 
 14078      6E7400
 14079              	.LASF71:
 14080 08d1 6973746F 		.ascii	"istop\000"
 14080      7000
 14081              	.LASF146:
 14082 08d7 5553425F 		.ascii	"USB_midiInBuffer\000"
 14082      6D696469 
 14082      496E4275 
 14082      66666572 
 14082      00
 14083              	.LASF316:
 14084 08e8 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 14084      43313120 
 14084      352E342E 
 14084      31203230 
 14084      31363036 
 14085 091b 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 14085      20726576 
 14085      6973696F 
 14085      6E203233 
 14085      37373135 
 14086 094e 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14086      66756E63 
 14086      74696F6E 
 14086      2D736563 
 14086      74696F6E 
 14087              	.LASF118:
 14088 0976 73656E64 		.ascii	"sendMIDINoteOn\000"
 14088      4D494449 
 14088      4E6F7465 
 14088      4F6E00
 14089              	.LASF274:
 14090 0985 6D61696E 		.ascii	"main_counter\000"
 14090      5F636F75 
 14090      6E746572 
 14090      00
 14091              	.LASF45:
 14092 0992 46697273 		.ascii	"FirstLine\000"
 14092      744C696E 
 14092      6500
 14093              	.LASF276:
 14094 099c 6475616C 		.ascii	"dualSlider\000"
 14094      536C6964 
 14094      657200
 14095              	.LASF60:
 14096 09a7 72657374 		.ascii	"restartSystemCheck\000"
 14096      61727453 
 14096      79737465 
 14096      6D436865 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 303


 14096      636B00
 14097              	.LASF188:
 14098 09ba 5553425F 		.ascii	"USB_check_flag\000"
 14098      63686563 
 14098      6B5F666C 
 14098      616700
 14099              	.LASF169:
 14100 09c9 6D657373 		.ascii	"messageArraySendCount\000"
 14100      61676541 
 14100      72726179 
 14100      53656E64 
 14100      436F756E 
 14101              	.LASF9:
 14102 09df 5F5F7569 		.ascii	"__uint32_t\000"
 14102      6E743332 
 14102      5F7400
 14103              	.LASF11:
 14104 09ea 6C6F6E67 		.ascii	"long long int\000"
 14104      206C6F6E 
 14104      6720696E 
 14104      7400
 14105              	.LASF194:
 14106 09f8 636F756E 		.ascii	"counter\000"
 14106      74657200 
 14107              	.LASF299:
 14108 0a00 73747269 		.ascii	"stringPitch\000"
 14108      6E675069 
 14108      74636800 
 14109              	.LASF210:
 14110 0a0c 72783154 		.ascii	"rx1TD\000"
 14110      4400
 14111              	.LASF303:
 14112 0a12 6D61696E 		.ascii	"mainOLEDWaitingToSend\000"
 14112      4F4C4544 
 14112      57616974 
 14112      696E6754 
 14112      6F53656E 
 14113              	.LASF82:
 14114 0a28 74656D70 		.ascii	"tempIntLow\000"
 14114      496E744C 
 14114      6F7700
 14115              	.LASF61:
 14116 0a33 74656D70 		.ascii	"tempmin\000"
 14116      6D696E00 
 14117              	.LASF35:
 14118 0a3b 626C6F63 		.ascii	"blockingWrite\000"
 14118      6B696E67 
 14118      57726974 
 14118      6500
 14119              	.LASF214:
 14120 0a49 72783343 		.ascii	"rx3Channel\000"
 14120      68616E6E 
 14120      656C00
 14121              	.LASF23:
 14122 0a54 646F7562 		.ascii	"double\000"
 14122      6C6500
 14123              	.LASF317:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 304


 14124 0a5b 6D61696E 		.ascii	"main.c\000"
 14124      2E6300
 14125              	.LASF284:
 14126 0a62 62757474 		.ascii	"button1Up\000"
 14126      6F6E3155 
 14126      7000
 14127              	.LASF110:
 14128 0a6c 6C6F6732 		.ascii	"log2f_approx\000"
 14128      665F6170 
 14128      70726F78 
 14128      00
 14129              	.LASF165:
 14130 0a79 73696E67 		.ascii	"singleParamValueHigh\000"
 14130      6C655061 
 14130      72616D56 
 14130      616C7565 
 14130      48696768 
 14131              	.LASF152:
 14132 0a8e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 14132      52784275 
 14132      66666572 
 14132      00
 14133              	.LASF164:
 14134 0a9b 73696E67 		.ascii	"singleParamToUpdateLow\000"
 14134      6C655061 
 14134      72616D54 
 14134      6F557064 
 14134      6174654C 
 14135              	.LASF73:
 14136 0ab2 6F73746F 		.ascii	"ostop\000"
 14136      7000
 14137              	.LASF103:
 14138 0ab8 74696D65 		.ascii	"timeout\000"
 14138      6F757400 
 14139              	.LASF22:
 14140 0ac0 666C6F61 		.ascii	"float\000"
 14140      7400
 14141              	.LASF259:
 14142 0ac6 70726576 		.ascii	"prev_processed_pedals\000"
 14142      5F70726F 
 14142      63657373 
 14142      65645F70 
 14142      6564616C 
 14143              	.LASF227:
 14144 0adc 616D4865 		.ascii	"amHere2\000"
 14144      72653200 
 14145              	.LASF244:
 14146 0ae4 53504932 		.ascii	"SPI2started\000"
 14146      73746172 
 14146      74656400 
 14147              	.LASF230:
 14148 0af0 63757272 		.ascii	"currentPluckBuffer\000"
 14148      656E7450 
 14148      6C75636B 
 14148      42756666 
 14148      657200
 14149              	.LASF89:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 305


 14150 0b03 6261724D 		.ascii	"barMIDI\000"
 14150      49444900 
 14151              	.LASF126:
 14152 0b0b 73656E64 		.ascii	"sendMIDIPitchBend\000"
 14152      4D494449 
 14152      50697463 
 14152      6842656E 
 14152      6400
 14153              	.LASF13:
 14154 0b1d 756E7369 		.ascii	"unsigned int\000"
 14154      676E6564 
 14154      20696E74 
 14154      00
 14155              	.LASF293:
 14156 0b2a 70656461 		.ascii	"pedal_cc_assignments\000"
 14156      6C5F6363 
 14156      5F617373 
 14156      69676E6D 
 14156      656E7473 
 14157              	.LASF156:
 14158 0b3f 72656365 		.ascii	"receivingSysex\000"
 14158      6976696E 
 14158      67537973 
 14158      657800
 14159              	.LASF141:
 14160 0b4e 6361626C 		.ascii	"cable\000"
 14160      6500
 14161              	.LASF243:
 14162 0b54 70726576 		.ascii	"prevKnobs7bit\000"
 14162      4B6E6F62 
 14162      73376269 
 14162      7400
 14163              	.LASF59:
 14164 0b62 56627573 		.ascii	"Vbus_function\000"
 14164      5F66756E 
 14164      6374696F 
 14164      6E00
 14165              	.LASF262:
 14166 0b70 70726576 		.ascii	"prevPedals7bit\000"
 14166      50656461 
 14166      6C733762 
 14166      697400
 14167              	.LASF114:
 14168 0b7f 76656C6F 		.ascii	"velocity\000"
 14168      63697479 
 14168      00
 14169              	.LASF311:
 14170 0b88 63686563 		.ascii	"checkStatus\000"
 14170      6B537461 
 14170      74757300 
 14171              	.LASF25:
 14172 0b94 63797374 		.ascii	"cystatus\000"
 14172      61747573 
 14172      00
 14173              	.LASF239:
 14174 0b9d 6261725F 		.ascii	"bar_index\000"
 14174      696E6465 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 306


 14174      7800
 14175              	.LASF242:
 14176 0ba7 6B6E6F62 		.ascii	"knobs7bit\000"
 14176      73376269 
 14176      7400
 14177              	.LASF113:
 14178 0bb1 73747269 		.ascii	"string\000"
 14178      6E6700
 14179              	.LASF237:
 14180 0bb8 6F666673 		.ascii	"offsetErrorCount\000"
 14180      65744572 
 14180      726F7243 
 14180      6F756E74 
 14180      00
 14181              	.LASF264:
 14182 0bc9 70726F63 		.ascii	"processed_volumePedal\000"
 14182      65737365 
 14182      645F766F 
 14182      6C756D65 
 14182      50656461 
 14183              	.LASF87:
 14184 0bdf 74656D70 		.ascii	"tempMIDI\000"
 14184      4D494449 
 14184      00
 14185              	.LASF217:
 14186 0be8 72784275 		.ascii	"rxBufferBar\000"
 14186      66666572 
 14186      42617200 
 14187              	.LASF212:
 14188 0bf4 74784368 		.ascii	"txChannel\000"
 14188      616E6E65 
 14188      6C00
 14189              	.LASF258:
 14190 0bfe 70726F63 		.ascii	"processed_pedals\000"
 14190      65737365 
 14190      645F7065 
 14190      64616C73 
 14190      00
 14191              	.LASF294:
 14192 0c0f 6F70656E 		.ascii	"openStringFrequencies\000"
 14192      53747269 
 14192      6E674672 
 14192      65717565 
 14192      6E636965 
 14193              	.LASF200:
 14194 0c25 70726576 		.ascii	"prevAngle\000"
 14194      416E676C 
 14194      6500
 14195              	.LASF226:
 14196 0c2f 706C7563 		.ascii	"pluck_index\000"
 14196      6B5F696E 
 14196      64657800 
 14197              	.LASF27:
 14198 0c3b 6C6F6E67 		.ascii	"long double\000"
 14198      20646F75 
 14198      626C6500 
 14199              	.LASF104:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 307


 14200 0c47 4932435F 		.ascii	"I2C_MasterReadBlocking\000"
 14200      4D617374 
 14200      65725265 
 14200      6164426C 
 14200      6F636B69 
 14201              	.LASF231:
 14202 0c5e 63757272 		.ascii	"currentBarBuffer\000"
 14202      656E7442 
 14202      61724275 
 14202      66666572 
 14202      00
 14203              	.LASF201:
 14204 0c6f 4144435F 		.ascii	"ADC_values\000"
 14204      76616C75 
 14204      657300
 14205              	.LASF65:
 14206 0c7a 66746F6D 		.ascii	"ftom\000"
 14206      00
 14207              	.LASF277:
 14208 0c7f 656E7465 		.ascii	"enterUp\000"
 14208      72557000 
 14209              	.LASF233:
 14210 0c87 53504931 		.ascii	"SPI1ErrorCount\000"
 14210      4572726F 
 14210      72436F75 
 14210      6E7400
 14211              	.LASF203:
 14212 0c96 6D696469 		.ascii	"midiSent\000"
 14212      53656E74 
 14212      00
 14213              	.LASF142:
 14214 0c9f 6D696469 		.ascii	"midiMsg\000"
 14214      4D736700 
 14215              	.LASF307:
 14216 0ca7 63757272 		.ascii	"currentNeck\000"
 14216      656E744E 
 14216      65636B00 
 14217              	.LASF308:
 14218 0cb3 65646974 		.ascii	"editMode\000"
 14218      4D6F6465 
 14218      00
 14219              	.LASF12:
 14220 0cbc 6C6F6E67 		.ascii	"long long unsigned int\000"
 14220      206C6F6E 
 14220      6720756E 
 14220      7369676E 
 14220      65642069 
 14221              	.LASF16:
 14222 0cd3 75696E74 		.ascii	"uint16_t\000"
 14222      31365F74 
 14222      00
 14223              	.LASF137:
 14224 0cdc 74656D70 		.ascii	"tempHigh\000"
 14224      48696768 
 14224      00
 14225              	.LASF182:
 14226 0ce5 74657374 		.ascii	"testVal\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 308


 14226      56616C00 
 14227              	.LASF211:
 14228 0ced 72783254 		.ascii	"rx2TD\000"
 14228      4400
 14229              	.LASF225:
 14230 0cf3 70726576 		.ascii	"prevOctave\000"
 14230      4F637461 
 14230      766500
 14231              	.LASF319:
 14232 0cfe 62726561 		.ascii	"breakFloat\000"
 14232      6B466C6F 
 14232      617400
 14233              	.LASF312:
 14234 0d09 63686563 		.ascii	"checkBase\000"
 14234      6B426173 
 14234      6500
 14235              	.LASF58:
 14236 0d13 73706973 		.ascii	"spis_2_ss\000"
 14236      5F325F73 
 14236      7300
 14237              	.LASF285:
 14238 0d1d 62757474 		.ascii	"button2Up\000"
 14238      6F6E3255 
 14238      7000
 14239              	.LASF167:
 14240 0d27 73656E64 		.ascii	"sendMappingChangeUpdate\000"
 14240      4D617070 
 14240      696E6743 
 14240      68616E67 
 14240      65557064 
 14241              	.LASF222:
 14242 0d3f 616D4865 		.ascii	"amHere\000"
 14242      726500
 14243              	.LASF246:
 14244 0d46 61727261 		.ascii	"array\000"
 14244      7900
 14245              	.LASF92:
 14246 0d4c 7363616C 		.ascii	"scaledMIDI\000"
 14246      65644D49 
 14246      444900
 14247              	.LASF26:
 14248 0d57 72656738 		.ascii	"reg8\000"
 14248      00
 14249              	.LASF160:
 14250 0d5c 636F7065 		.ascii	"copedentNumberToWrite\000"
 14250      64656E74 
 14250      4E756D62 
 14250      6572546F 
 14250      57726974 
 14251              	.LASF55:
 14252 0d72 6D617043 		.ascii	"mapCountNext\000"
 14252      6F756E74 
 14252      4E657874 
 14252      00
 14253              	.LASF228:
 14254 0d7f 73706943 		.ascii	"spiCounter2\000"
 14254      6F756E74 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 309


 14254      65723200 
 14255              	.LASF115:
 14256 0d8b 74656D70 		.ascii	"tempVel\000"
 14256      56656C00 
 14257              	.LASF184:
 14258 0d93 75736241 		.ascii	"usbActivityCounter\000"
 14258      63746976 
 14258      69747943 
 14258      6F756E74 
 14258      657200
 14259              	.LASF256:
 14260 0da6 64656164 		.ascii	"deadzone\000"
 14260      7A6F6E65 
 14260      00
 14261              	.LASF180:
 14262 0daf 70617273 		.ascii	"parseThatMF\000"
 14262      65546861 
 14262      744D4600 
 14263              	.LASF3:
 14264 0dbb 5F5F696E 		.ascii	"__int16_t\000"
 14264      7431365F 
 14264      7400
 14265              	.LASF54:
 14266 0dc5 696E6974 		.ascii	"initialVals\000"
 14266      69616C56 
 14266      616C7300 
 14267              	.LASF187:
 14268 0dd1 5553425F 		.ascii	"USB_active\000"
 14268      61637469 
 14268      766500
 14269              	.LASF162:
 14270 0ddc 73656E64 		.ascii	"sendSingleParamUpdate\000"
 14270      53696E67 
 14270      6C655061 
 14270      72616D55 
 14270      70646174 
 14271              	.LASF154:
 14272 0df2 73797365 		.ascii	"sysexBuffer\000"
 14272      78427566 
 14272      66657200 
 14273              	.LASF172:
 14274 0dfe 62756643 		.ascii	"bufCount\000"
 14274      6F756E74 
 14274      00
 14275              	.LASF232:
 14276 0e07 706C7563 		.ascii	"pluckErrorCount\000"
 14276      6B457272 
 14276      6F72436F 
 14276      756E7400 
 14277              	.LASF133:
 14278 0e17 74656D70 		.ascii	"tempChar\000"
 14278      43686172 
 14278      00
 14279              	.LASF302:
 14280 0e20 4F4C4544 		.ascii	"OLEDcount\000"
 14280      636F756E 
 14280      7400
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 310


 14281              	.LASF288:
 14282 0e2a 70617463 		.ascii	"patchNum\000"
 14282      684E756D 
 14282      00
 14283              	.LASF306:
 14284 0e33 70656461 		.ascii	"pedals_float\000"
 14284      6C735F66 
 14284      6C6F6174 
 14284      00
 14285              	.LASF19:
 14286 0e40 75696E74 		.ascii	"uint8\000"
 14286      3800
 14287              	.LASF254:
 14288 0e46 70656461 		.ascii	"pedals_low\000"
 14288      6C735F6C 
 14288      6F7700
 14289              	.LASF91:
 14290 0e51 70697463 		.ascii	"pitchBendAmount\000"
 14290      6842656E 
 14290      64416D6F 
 14290      756E7400 
 14291              	.LASF163:
 14292 0e61 73696E67 		.ascii	"singleParamToUpdateHigh\000"
 14292      6C655061 
 14292      72616D54 
 14292      6F557064 
 14292      61746548 
 14293              	.LASF4:
 14294 0e79 73686F72 		.ascii	"short int\000"
 14294      7420696E 
 14294      7400
 14295              	.LASF170:
 14296 0e83 6D657373 		.ascii	"messageArraySize\000"
 14296      61676541 
 14296      72726179 
 14296      53697A65 
 14296      00
 14297              	.LASF265:
 14298 0e94 66726574 		.ascii	"fretMeasurements\000"
 14298      4D656173 
 14298      7572656D 
 14298      656E7473 
 14298      00
 14299              	.LASF101:
 14300 0ea5 6D6F6465 		.ascii	"mode\000"
 14300      00
 14301              	.LASF95:
 14302 0eaa 62756666 		.ascii	"bufferPointer\000"
 14302      6572506F 
 14302      696E7465 
 14302      7200
 14303              	.LASF300:
 14304 0eb8 73747269 		.ascii	"stringMIDI\000"
 14304      6E674D49 
 14304      444900
 14305              	.LASF88:
 14306 0ec3 6F70656E 		.ascii	"openStringMIDI\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 311


 14306      53747269 
 14306      6E674D49 
 14306      444900
 14307              	.LASF15:
 14308 0ed2 696E7431 		.ascii	"int16_t\000"
 14308      365F7400 
 14309              	.LASF134:
 14310 0eda 70656461 		.ascii	"pedalToWrite\000"
 14310      6C546F57 
 14310      72697465 
 14310      00
 14311              	.LASF32:
 14312 0ee7 65657072 		.ascii	"eepromSize\000"
 14312      6F6D5369 
 14312      7A6500
 14313              	.LASF107:
 14314 0ef2 64697370 		.ascii	"displayCurrentPresetNameAndCopedent\000"
 14314      6C617943 
 14314      75727265 
 14314      6E745072 
 14314      65736574 
 14315              	.LASF295:
 14316 0f16 73747269 		.ascii	"stringMappedPositions\000"
 14316      6E674D61 
 14316      70706564 
 14316      506F7369 
 14316      74696F6E 
 14317              	.LASF197:
 14318 0f2c 70726576 		.ascii	"previousButtons\000"
 14318      696F7573 
 14318      42757474 
 14318      6F6E7300 
 14319              	.LASF33:
 14320 0f3c 77656172 		.ascii	"wearLevelingFactor\000"
 14320      4C657665 
 14320      6C696E67 
 14320      46616374 
 14320      6F7200
 14321              	.LASF144:
 14322 0f4f 5553425F 		.ascii	"USB_midiInPointer\000"
 14322      6D696469 
 14322      496E506F 
 14322      696E7465 
 14322      7200
 14323              	.LASF309:
 14324 0f61 63616C69 		.ascii	"calibrationMode\000"
 14324      62726174 
 14324      696F6E4D 
 14324      6F646500 
 14325              	.LASF99:
 14326 0f71 69324341 		.ascii	"i2CAddr\000"
 14326      64647200 
 14327              	.LASF190:
 14328 0f79 696E4275 		.ascii	"inBuffer\000"
 14328      66666572 
 14328      00
 14329              	.LASF221:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 312


 14330 0f82 6D617853 		.ascii	"maxStrings\000"
 14330      7472696E 
 14330      677300
 14331              	.LASF78:
 14332 0f8d 6C657474 		.ascii	"letter\000"
 14332      657200
 14333              	.LASF148:
 14334 0f94 5553425F 		.ascii	"USB_midiOutBuffer\000"
 14334      6D696469 
 14334      4F757442 
 14334      75666665 
 14334      7200
 14335              	.LASF205:
 14336 0fa6 6D616372 		.ascii	"macroKnobValues\000"
 14336      6F4B6E6F 
 14336      6256616C 
 14336      75657300 
 14337              	.LASF253:
 14338 0fb6 6932635F 		.ascii	"i2c_skipped\000"
 14338      736B6970 
 14338      70656400 
 14339              	.LASF261:
 14340 0fc2 70656461 		.ascii	"pedals7bit\000"
 14340      6C733762 
 14340      697400
 14341              	.LASF189:
 14342 0fcd 6D617070 		.ascii	"mappingArray\000"
 14342      696E6741 
 14342      72726179 
 14342      00
 14343              	.LASF235:
 14344 0fda 73706941 		.ascii	"spiAdjusted\000"
 14344      646A7573 
 14344      74656400 
 14345              	.LASF209:
 14346 0fe6 72783243 		.ascii	"rx2Channel\000"
 14346      68616E6E 
 14346      656C00
 14347              	.LASF145:
 14348 0ff1 5553425F 		.ascii	"USB_midi_in_ep\000"
 14348      6D696469 
 14348      5F696E5F 
 14348      657000
 14349              	.LASF97:
 14350 1000 446D6152 		.ascii	"DmaRxConfiguration\000"
 14350      78436F6E 
 14350      66696775 
 14350      72617469 
 14350      6F6E00
 14351              	.LASF18:
 14352 1013 75696E74 		.ascii	"uint32_t\000"
 14352      33325F74 
 14352      00
 14353              	.LASF287:
 14354 101c 62757474 		.ascii	"button4Up\000"
 14354      6F6E3455 
 14354      7000
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 313


 14355              	.LASF186:
 14356 1026 70726576 		.ascii	"prevVBUS\000"
 14356      56425553 
 14356      00
 14357              	.LASF215:
 14358 102f 72783354 		.ascii	"rx3TD\000"
 14358      4400
 14359              	.LASF185:
 14360 1035 63757272 		.ascii	"currentVBUS\000"
 14360      656E7456 
 14360      42555300 
 14361              	.LASF281:
 14362 1041 6F637434 		.ascii	"oct4Up\000"
 14362      557000
 14363              	.LASF320:
 14364 1048 63616C63 		.ascii	"calculatePedalRatios\000"
 14364      756C6174 
 14364      65506564 
 14364      616C5261 
 14364      74696F73 
 14365              	.LASF286:
 14366 105d 62757474 		.ascii	"button3Up\000"
 14366      6F6E3355 
 14366      7000
 14367              	.LASF6:
 14368 1067 73686F72 		.ascii	"short unsigned int\000"
 14368      7420756E 
 14368      7369676E 
 14368      65642069 
 14368      6E7400
 14369              	.LASF56:
 14370 107a 6D617070 		.ascii	"mapping\000"
 14370      696E6700 
 14371              	.LASF116:
 14372 1082 6E6F7465 		.ascii	"noteToSend\000"
 14372      546F5365 
 14372      6E6400
 14373              	.LASF213:
 14374 108d 74785444 		.ascii	"txTD\000"
 14374      00
 14375              	.LASF7:
 14376 1092 5F5F696E 		.ascii	"__int32_t\000"
 14376      7433325F 
 14376      7400
 14377              	.LASF220:
 14378 109c 70726576 		.ascii	"prevBar\000"
 14378      42617200 
 14379              	.LASF192:
 14380 10a4 6D79496E 		.ascii	"myInputArray\000"
 14380      70757441 
 14380      72726179 
 14380      00
 14381              	.LASF64:
 14382 10b1 6D746F66 		.ascii	"mtof\000"
 14382      00
 14383              	.LASF292:
 14384 10b6 70656461 		.ascii	"pedals\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccr732oU.s 			page 314


 14384      6C7300
 14385              	.LASF81:
 14386 10bd 74656D70 		.ascii	"tempIntHigh\000"
 14386      496E7448 
 14386      69676800 
 14387              	.LASF279:
 14388 10c9 65646974 		.ascii	"editUp\000"
 14388      557000
 14389              	.LASF31:
 14390 10d0 6C617374 		.ascii	"lastWrRowAddr\000"
 14390      5772526F 
 14390      77416464 
 14390      7200
 14391              	.LASF76:
 14392 10de 6D794172 		.ascii	"myArrayCounter\000"
 14392      72617943 
 14392      6F756E74 
 14392      657200
 14393              	.LASF297:
 14394 10ed 73747269 		.ascii	"stringFrequencies\000"
 14394      6E674672 
 14394      65717565 
 14394      6E636965 
 14394      7300
 14395              	.LASF20:
 14396 10ff 75696E74 		.ascii	"uint16\000"
 14396      313600
 14397              	.LASF191:
 14398 1106 6D794172 		.ascii	"myArray\000"
 14398      72617900 
 14399              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
