ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"gfx.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.GFXinit,"ax",%progbits
  20              		.align	2
  21              		.global	GFXinit
  22              		.thumb
  23              		.thumb_func
  24              		.type	GFXinit, %function
  25              	GFXinit:
  26              	.LFB64:
  27              		.file 1 "gfx.c"
   1:gfx.c         **** /*
   2:gfx.c         ****  * gfx.c
   3:gfx.c         ****  *  a C port of the Adafruit GFX library
   4:gfx.c         ****  *  Created on: Jul 8, 2018
   5:gfx.c         ****  *      Author: jeffsnyder
   6:gfx.c         ****  */
   7:gfx.c         **** 
   8:gfx.c         **** 
   9:gfx.c         **** /*
  10:gfx.c         ****  This is the core graphics library for all our displays, providing a common
  11:gfx.c         ****  set of graphics primitives (points, lines, circles, etc.).  It needs to be
  12:gfx.c         ****  paired with a hardware-specific library for each display device we carry
  13:gfx.c         ****  (to handle the lower-level functions).
  14:gfx.c         ****  
  15:gfx.c         ****  Adafruit invests time and resources providing this open source code, please
  16:gfx.c         ****  support Adafruit & open-source hardware by purchasing products from Adafruit!
  17:gfx.c         ****  
  18:gfx.c         ****  Copyright (c) 2013 Adafruit Industries.  All rights reserved.
  19:gfx.c         ****  
  20:gfx.c         ****  Redistribution and use in source and binary forms, with or without
  21:gfx.c         ****  modification, are permitted provided that the following conditions are met:
  22:gfx.c         ****  
  23:gfx.c         ****  - Redistributions of source code must retain the above copyright notice,
  24:gfx.c         ****  this list of conditions and the following disclaimer.
  25:gfx.c         ****  - Redistributions in binary form must reproduce the above copyright notice,
  26:gfx.c         ****  this list of conditions and the following disclaimer in the documentation
  27:gfx.c         ****  and/or other materials provided with the distribution.
  28:gfx.c         ****  
  29:gfx.c         ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  30:gfx.c         ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 2


  31:gfx.c         ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  32:gfx.c         ****  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  33:gfx.c         ****  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  34:gfx.c         ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  35:gfx.c         ****  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  36:gfx.c         ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  37:gfx.c         ****  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  38:gfx.c         ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:gfx.c         ****  POSSIBILITY OF SUCH DAMAGE.
  40:gfx.c         ****  */
  41:gfx.c         **** 
  42:gfx.c         **** 
  43:gfx.c         **** #include "gfx.h"
  44:gfx.c         **** #include <stdint.h>
  45:gfx.c         **** #include <stdlib.h>
  46:gfx.c         **** 
  47:gfx.c         ****         
  48:gfx.c         ****         // Many (but maybe not all) non-AVR board installs define macros
  49:gfx.c         ****         // for compatibility with existing PROGMEM-reading AVR code.
  50:gfx.c         ****         // Do our own checks and defines here for good measure...
  51:gfx.c         ****         
  52:gfx.c         **** #ifndef pgm_read_byte
  53:gfx.c         **** #define pgm_read_byte(addr) (*(const unsigned char *)(addr))
  54:gfx.c         **** #endif
  55:gfx.c         **** #ifndef pgm_read_word
  56:gfx.c         **** #define pgm_read_word(addr) (*(const unsigned short *)(addr))
  57:gfx.c         **** #endif
  58:gfx.c         **** #ifndef pgm_read_dword
  59:gfx.c         **** #define pgm_read_dword(addr) (*(const unsigned long long *)(addr))
  60:gfx.c         **** #endif
  61:gfx.c         ****         
  62:gfx.c         ****         // Pointers are a peculiar case...typically 16-bit on AVR boards,
  63:gfx.c         ****         // 32 bits elsewhere.  Try to accommodate both...
  64:gfx.c         ****         
  65:gfx.c         ****         
  66:gfx.c         **** #define pgm_read_pointer(addr) ((void *)pgm_read_dword(addr))
  67:gfx.c         ****         
  68:gfx.c         ****         
  69:gfx.c         **** #ifndef min
  70:gfx.c         **** #define min(a,b) (((a) < (b)) ? (a) : (b))
  71:gfx.c         **** #endif
  72:gfx.c         ****         
  73:gfx.c         **** #ifndef _swap_int16_t
  74:gfx.c         **** #define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
  75:gfx.c         **** #endif
  76:gfx.c         ****         
  77:gfx.c         ****         void GFXinit(GFX* myGfx, int16_t w, int16_t h)
  78:gfx.c         ****         {
  28              		.loc 1 78 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 3


  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
  41 0008 0B46     		mov	r3, r1
  42 000a 7B80     		strh	r3, [r7, #2]	@ movhi
  43 000c 1346     		mov	r3, r2	@ movhi
  44 000e 3B80     		strh	r3, [r7]	@ movhi
  79:gfx.c         ****             myGfx->WIDTH = w;
  45              		.loc 1 79 0
  46 0010 7B68     		ldr	r3, [r7, #4]
  47 0012 7A88     		ldrh	r2, [r7, #2]	@ movhi
  48 0014 1A80     		strh	r2, [r3]	@ movhi
  80:gfx.c         ****             myGfx->HEIGHT = h;
  49              		.loc 1 80 0
  50 0016 7B68     		ldr	r3, [r7, #4]
  51 0018 3A88     		ldrh	r2, [r7]	@ movhi
  52 001a 5A80     		strh	r2, [r3, #2]	@ movhi
  81:gfx.c         ****             myGfx->_width    = w;
  53              		.loc 1 81 0
  54 001c 7A88     		ldrh	r2, [r7, #2]
  55 001e 7B68     		ldr	r3, [r7, #4]
  56 0020 9A80     		strh	r2, [r3, #4]	@ movhi
  82:gfx.c         ****             myGfx->_height   = h;
  57              		.loc 1 82 0
  58 0022 3A88     		ldrh	r2, [r7]
  59 0024 7B68     		ldr	r3, [r7, #4]
  60 0026 DA80     		strh	r2, [r3, #6]	@ movhi
  83:gfx.c         ****             myGfx->rotation  = 0;
  61              		.loc 1 83 0
  62 0028 7B68     		ldr	r3, [r7, #4]
  63 002a 0022     		movs	r2, #0
  64 002c 1A81     		strh	r2, [r3, #8]	@ movhi
  84:gfx.c         ****             myGfx->cursor_y  = 0;
  65              		.loc 1 84 0
  66 002e 7B68     		ldr	r3, [r7, #4]
  67 0030 0022     		movs	r2, #0
  68 0032 5A81     		strh	r2, [r3, #10]	@ movhi
  85:gfx.c         ****             myGfx->cursor_x = 0;
  69              		.loc 1 85 0
  70 0034 7B68     		ldr	r3, [r7, #4]
  71 0036 0022     		movs	r2, #0
  72 0038 9A81     		strh	r2, [r3, #12]	@ movhi
  86:gfx.c         ****             myGfx->textsize  = 1;
  73              		.loc 1 86 0
  74 003a 7B68     		ldr	r3, [r7, #4]
  75 003c 0122     		movs	r2, #1
  76 003e DA81     		strh	r2, [r3, #14]	@ movhi
  87:gfx.c         ****             myGfx->textcolor = 0xFFFF;
  77              		.loc 1 87 0
  78 0040 7B68     		ldr	r3, [r7, #4]
  79 0042 4FF6FF72 		movw	r2, #65535
  80 0046 1A82     		strh	r2, [r3, #16]	@ movhi
  88:gfx.c         ****             myGfx->textbgcolor = 0xFFFF;
  81              		.loc 1 88 0
  82 0048 7B68     		ldr	r3, [r7, #4]
  83 004a 4FF6FF72 		movw	r2, #65535
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 4


  84 004e 5A82     		strh	r2, [r3, #18]	@ movhi
  89:gfx.c         ****             myGfx->wrap      = 1;
  85              		.loc 1 89 0
  86 0050 7B68     		ldr	r3, [r7, #4]
  87 0052 0122     		movs	r2, #1
  88 0054 9A82     		strh	r2, [r3, #20]	@ movhi
  90:gfx.c         ****             myGfx->_cp437    = 0;
  89              		.loc 1 90 0
  90 0056 7B68     		ldr	r3, [r7, #4]
  91 0058 0022     		movs	r2, #0
  92 005a DA82     		strh	r2, [r3, #22]	@ movhi
  91:gfx.c         ****             myGfx->gfxFont   = NULL;
  93              		.loc 1 91 0
  94 005c 7B68     		ldr	r3, [r7, #4]
  95 005e 0022     		movs	r2, #0
  96 0060 9A61     		str	r2, [r3, #24]
  92:gfx.c         ****             myGfx->rotation = 0;
  97              		.loc 1 92 0
  98 0062 7B68     		ldr	r3, [r7, #4]
  99 0064 0022     		movs	r2, #0
 100 0066 1A81     		strh	r2, [r3, #8]	@ movhi
  93:gfx.c         ****             myGfx->fontDesc = 0;
 101              		.loc 1 93 0
 102 0068 7B68     		ldr	r3, [r7, #4]
 103 006a 0022     		movs	r2, #0
 104 006c DA83     		strh	r2, [r3, #30]	@ movhi
  94:gfx.c         ****             myGfx->fontHeight = 8;
 105              		.loc 1 94 0
 106 006e 7B68     		ldr	r3, [r7, #4]
 107 0070 0822     		movs	r2, #8
 108 0072 9A83     		strh	r2, [r3, #28]	@ movhi
  95:gfx.c         ****         }
 109              		.loc 1 95 0
 110 0074 00BF     		nop
 111 0076 0C37     		adds	r7, r7, #12
 112              		.cfi_def_cfa_offset 4
 113 0078 BD46     		mov	sp, r7
 114              		.cfi_def_cfa_register 13
 115              		@ sp needed
 116 007a 80BC     		pop	{r7}
 117              		.cfi_restore 7
 118              		.cfi_def_cfa_offset 0
 119 007c 7047     		bx	lr
 120              		.cfi_endproc
 121              	.LFE64:
 122              		.size	GFXinit, .-GFXinit
 123 007e 00BF     		.section	.text.GFXwriteLine,"ax",%progbits
 124              		.align	2
 125              		.global	GFXwriteLine
 126              		.thumb
 127              		.thumb_func
 128              		.type	GFXwriteLine, %function
 129              	GFXwriteLine:
 130              	.LFB65:
  96:gfx.c         ****         
  97:gfx.c         ****         // Bresenham's algorithm - thx wikpedia
  98:gfx.c         ****         void GFXwriteLine(GFX* myGFX, int16_t x0, int16_t y0, int16_t x1, int16_t y1,
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 5


  99:gfx.c         ****                           uint16_t color) {
 131              		.loc 1 99 0
 132              		.cfi_startproc
 133              		@ args = 8, pretend = 0, frame = 40
 134              		@ frame_needed = 1, uses_anonymous_args = 0
 135 0000 80B5     		push	{r7, lr}
 136              		.cfi_def_cfa_offset 8
 137              		.cfi_offset 7, -8
 138              		.cfi_offset 14, -4
 139 0002 8AB0     		sub	sp, sp, #40
 140              		.cfi_def_cfa_offset 48
 141 0004 00AF     		add	r7, sp, #0
 142              		.cfi_def_cfa_register 7
 143 0006 F860     		str	r0, [r7, #12]
 144 0008 0846     		mov	r0, r1
 145 000a 1146     		mov	r1, r2
 146 000c 1A46     		mov	r2, r3
 147 000e 0346     		mov	r3, r0	@ movhi
 148 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 149 0012 0B46     		mov	r3, r1	@ movhi
 150 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 151 0016 1346     		mov	r3, r2	@ movhi
 152 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 100:gfx.c         ****             int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 153              		.loc 1 100 0
 154 001a B7F93020 		ldrsh	r2, [r7, #48]
 155 001e B7F90830 		ldrsh	r3, [r7, #8]
 156 0022 D31A     		subs	r3, r2, r3
 157 0024 83EAE372 		eor	r2, r3, r3, asr #31
 158 0028 A2EBE372 		sub	r2, r2, r3, asr #31
 159 002c B7F90610 		ldrsh	r1, [r7, #6]
 160 0030 B7F90A30 		ldrsh	r3, [r7, #10]
 161 0034 CB1A     		subs	r3, r1, r3
 162 0036 002B     		cmp	r3, #0
 163 0038 B8BF     		it	lt
 164 003a 5B42     		rsblt	r3, r3, #0
 165 003c 9A42     		cmp	r2, r3
 166 003e CCBF     		ite	gt
 167 0040 0123     		movgt	r3, #1
 168 0042 0023     		movle	r3, #0
 169 0044 DBB2     		uxtb	r3, r3
 170 0046 7B84     		strh	r3, [r7, #34]	@ movhi
 101:gfx.c         ****             if (steep) {
 171              		.loc 1 101 0
 172 0048 B7F92230 		ldrsh	r3, [r7, #34]
 173 004c 002B     		cmp	r3, #0
 174 004e 0BD0     		beq	.L3
 175              	.LBB2:
 102:gfx.c         ****                 _swap_int16_t(x0, y0);
 176              		.loc 1 102 0
 177 0050 7B89     		ldrh	r3, [r7, #10]	@ movhi
 178 0052 3B84     		strh	r3, [r7, #32]	@ movhi
 179 0054 3B89     		ldrh	r3, [r7, #8]	@ movhi
 180 0056 7B81     		strh	r3, [r7, #10]	@ movhi
 181 0058 3B8C     		ldrh	r3, [r7, #32]	@ movhi
 182 005a 3B81     		strh	r3, [r7, #8]	@ movhi
 183              	.LBE2:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 6


 184              	.LBB3:
 103:gfx.c         ****                 _swap_int16_t(x1, y1);
 185              		.loc 1 103 0
 186 005c FB88     		ldrh	r3, [r7, #6]	@ movhi
 187 005e FB83     		strh	r3, [r7, #30]	@ movhi
 188 0060 3B8E     		ldrh	r3, [r7, #48]	@ movhi
 189 0062 FB80     		strh	r3, [r7, #6]	@ movhi
 190 0064 FB8B     		ldrh	r3, [r7, #30]	@ movhi
 191 0066 3B86     		strh	r3, [r7, #48]	@ movhi
 192              	.L3:
 193              	.LBE3:
 104:gfx.c         ****             }
 105:gfx.c         ****             
 106:gfx.c         ****             if (x0 > x1) {
 194              		.loc 1 106 0
 195 0068 B7F90A20 		ldrsh	r2, [r7, #10]
 196 006c B7F90630 		ldrsh	r3, [r7, #6]
 197 0070 9A42     		cmp	r2, r3
 198 0072 0BDD     		ble	.L4
 199              	.LBB4:
 107:gfx.c         ****                 _swap_int16_t(x0, x1);
 200              		.loc 1 107 0
 201 0074 7B89     		ldrh	r3, [r7, #10]	@ movhi
 202 0076 BB83     		strh	r3, [r7, #28]	@ movhi
 203 0078 FB88     		ldrh	r3, [r7, #6]	@ movhi
 204 007a 7B81     		strh	r3, [r7, #10]	@ movhi
 205 007c BB8B     		ldrh	r3, [r7, #28]	@ movhi
 206 007e FB80     		strh	r3, [r7, #6]	@ movhi
 207              	.LBE4:
 208              	.LBB5:
 108:gfx.c         ****                 _swap_int16_t(y0, y1);
 209              		.loc 1 108 0
 210 0080 3B89     		ldrh	r3, [r7, #8]	@ movhi
 211 0082 7B83     		strh	r3, [r7, #26]	@ movhi
 212 0084 3B8E     		ldrh	r3, [r7, #48]	@ movhi
 213 0086 3B81     		strh	r3, [r7, #8]	@ movhi
 214 0088 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 215 008a 3B86     		strh	r3, [r7, #48]	@ movhi
 216              	.L4:
 217              	.LBE5:
 109:gfx.c         ****             }
 110:gfx.c         ****             
 111:gfx.c         ****             int16_t dx, dy;
 112:gfx.c         ****             dx = x1 - x0;
 218              		.loc 1 112 0
 219 008c FA88     		ldrh	r2, [r7, #6]
 220 008e 7B89     		ldrh	r3, [r7, #10]
 221 0090 D31A     		subs	r3, r2, r3
 222 0092 9BB2     		uxth	r3, r3
 223 0094 3B83     		strh	r3, [r7, #24]	@ movhi
 113:gfx.c         ****             dy = abs(y1 - y0);
 224              		.loc 1 113 0
 225 0096 B7F93020 		ldrsh	r2, [r7, #48]
 226 009a B7F90830 		ldrsh	r3, [r7, #8]
 227 009e D31A     		subs	r3, r2, r3
 228 00a0 002B     		cmp	r3, #0
 229 00a2 B8BF     		it	lt
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 7


 230 00a4 5B42     		rsblt	r3, r3, #0
 231 00a6 FB82     		strh	r3, [r7, #22]	@ movhi
 114:gfx.c         ****             
 115:gfx.c         ****             int16_t err = dx / 2;
 232              		.loc 1 115 0
 233 00a8 B7F91830 		ldrsh	r3, [r7, #24]
 234 00ac DA0F     		lsrs	r2, r3, #31
 235 00ae 1344     		add	r3, r3, r2
 236 00b0 5B10     		asrs	r3, r3, #1
 237 00b2 FB84     		strh	r3, [r7, #38]	@ movhi
 116:gfx.c         ****             int16_t ystep;
 117:gfx.c         ****             
 118:gfx.c         ****             if (y0 < y1) {
 238              		.loc 1 118 0
 239 00b4 B7F90820 		ldrsh	r2, [r7, #8]
 240 00b8 B7F93030 		ldrsh	r3, [r7, #48]
 241 00bc 9A42     		cmp	r2, r3
 242 00be 02DA     		bge	.L5
 119:gfx.c         ****                 ystep = 1;
 243              		.loc 1 119 0
 244 00c0 0123     		movs	r3, #1
 245 00c2 BB84     		strh	r3, [r7, #36]	@ movhi
 246 00c4 31E0     		b	.L7
 247              	.L5:
 120:gfx.c         ****             } else {
 121:gfx.c         ****                 ystep = -1;
 248              		.loc 1 121 0
 249 00c6 4FF6FF73 		movw	r3, #65535
 250 00ca BB84     		strh	r3, [r7, #36]	@ movhi
 122:gfx.c         ****             }
 123:gfx.c         ****             
 124:gfx.c         ****             for (; x0<=x1; x0++) {
 251              		.loc 1 124 0
 252 00cc 2DE0     		b	.L7
 253              	.L11:
 125:gfx.c         ****                 if (steep) {
 254              		.loc 1 125 0
 255 00ce B7F92230 		ldrsh	r3, [r7, #34]
 256 00d2 002B     		cmp	r3, #0
 257 00d4 08D0     		beq	.L8
 126:gfx.c         ****                     GFXwritePixel(myGFX, y0, x0, color);
 258              		.loc 1 126 0
 259 00d6 BB8E     		ldrh	r3, [r7, #52]
 260 00d8 B7F90A20 		ldrsh	r2, [r7, #10]
 261 00dc B7F90810 		ldrsh	r1, [r7, #8]
 262 00e0 F868     		ldr	r0, [r7, #12]
 263 00e2 FFF7FEFF 		bl	GFXwritePixel
 264 00e6 07E0     		b	.L9
 265              	.L8:
 127:gfx.c         ****                 } else {
 128:gfx.c         ****                     GFXwritePixel(myGFX, x0, y0, color);
 266              		.loc 1 128 0
 267 00e8 BB8E     		ldrh	r3, [r7, #52]
 268 00ea B7F90820 		ldrsh	r2, [r7, #8]
 269 00ee B7F90A10 		ldrsh	r1, [r7, #10]
 270 00f2 F868     		ldr	r0, [r7, #12]
 271 00f4 FFF7FEFF 		bl	GFXwritePixel
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 8


 272              	.L9:
 129:gfx.c         ****                 }
 130:gfx.c         ****                 err -= dy;
 273              		.loc 1 130 0
 274 00f8 FA8C     		ldrh	r2, [r7, #38]
 275 00fa FB8A     		ldrh	r3, [r7, #22]
 276 00fc D31A     		subs	r3, r2, r3
 277 00fe 9BB2     		uxth	r3, r3
 278 0100 FB84     		strh	r3, [r7, #38]	@ movhi
 131:gfx.c         ****                 if (err < 0) {
 279              		.loc 1 131 0
 280 0102 B7F92630 		ldrsh	r3, [r7, #38]
 281 0106 002B     		cmp	r3, #0
 282 0108 09DA     		bge	.L10
 132:gfx.c         ****                     y0 += ystep;
 283              		.loc 1 132 0
 284 010a 3A89     		ldrh	r2, [r7, #8]
 285 010c BB8C     		ldrh	r3, [r7, #36]
 286 010e 1344     		add	r3, r3, r2
 287 0110 9BB2     		uxth	r3, r3
 288 0112 3B81     		strh	r3, [r7, #8]	@ movhi
 133:gfx.c         ****                     err += dx;
 289              		.loc 1 133 0
 290 0114 FA8C     		ldrh	r2, [r7, #38]
 291 0116 3B8B     		ldrh	r3, [r7, #24]
 292 0118 1344     		add	r3, r3, r2
 293 011a 9BB2     		uxth	r3, r3
 294 011c FB84     		strh	r3, [r7, #38]	@ movhi
 295              	.L10:
 124:gfx.c         ****                 if (steep) {
 296              		.loc 1 124 0
 297 011e B7F90A30 		ldrsh	r3, [r7, #10]
 298 0122 9BB2     		uxth	r3, r3
 299 0124 0133     		adds	r3, r3, #1
 300 0126 9BB2     		uxth	r3, r3
 301 0128 7B81     		strh	r3, [r7, #10]	@ movhi
 302              	.L7:
 124:gfx.c         ****                 if (steep) {
 303              		.loc 1 124 0 is_stmt 0 discriminator 1
 304 012a B7F90A20 		ldrsh	r2, [r7, #10]
 305 012e B7F90630 		ldrsh	r3, [r7, #6]
 306 0132 9A42     		cmp	r2, r3
 307 0134 CBDD     		ble	.L11
 134:gfx.c         ****                 }
 135:gfx.c         ****             }
 136:gfx.c         ****         }
 308              		.loc 1 136 0 is_stmt 1
 309 0136 00BF     		nop
 310 0138 2837     		adds	r7, r7, #40
 311              		.cfi_def_cfa_offset 8
 312 013a BD46     		mov	sp, r7
 313              		.cfi_def_cfa_register 13
 314              		@ sp needed
 315 013c 80BD     		pop	{r7, pc}
 316              		.cfi_endproc
 317              	.LFE65:
 318              		.size	GFXwriteLine, .-GFXwriteLine
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 9


 319 013e 00BF     		.section	.text.GFXstartWrite,"ax",%progbits
 320              		.align	2
 321              		.global	GFXstartWrite
 322              		.thumb
 323              		.thumb_func
 324              		.type	GFXstartWrite, %function
 325              	GFXstartWrite:
 326              	.LFB66:
 137:gfx.c         ****         
 138:gfx.c         ****         void GFXstartWrite(GFX* myGFX){
 327              		.loc 1 138 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 8
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331              		@ link register save eliminated.
 332 0000 80B4     		push	{r7}
 333              		.cfi_def_cfa_offset 4
 334              		.cfi_offset 7, -4
 335 0002 83B0     		sub	sp, sp, #12
 336              		.cfi_def_cfa_offset 16
 337 0004 00AF     		add	r7, sp, #0
 338              		.cfi_def_cfa_register 7
 339 0006 7860     		str	r0, [r7, #4]
 139:gfx.c         ****             // Overwrite in subclasses if desired!
 140:gfx.c         ****         }
 340              		.loc 1 140 0
 341 0008 00BF     		nop
 342 000a 0C37     		adds	r7, r7, #12
 343              		.cfi_def_cfa_offset 4
 344 000c BD46     		mov	sp, r7
 345              		.cfi_def_cfa_register 13
 346              		@ sp needed
 347 000e 80BC     		pop	{r7}
 348              		.cfi_restore 7
 349              		.cfi_def_cfa_offset 0
 350 0010 7047     		bx	lr
 351              		.cfi_endproc
 352              	.LFE66:
 353              		.size	GFXstartWrite, .-GFXstartWrite
 354 0012 00BF     		.section	.text.GFXdrawPixel,"ax",%progbits
 355              		.align	2
 356              		.global	GFXdrawPixel
 357              		.thumb
 358              		.thumb_func
 359              		.type	GFXdrawPixel, %function
 360              	GFXdrawPixel:
 361              	.LFB67:
 141:gfx.c         ****         
 142:gfx.c         ****         // the most basic function, set a single pixel
 143:gfx.c         ****         void GFXdrawPixel(GFX* myGFX, int16_t x, int16_t y, uint16_t color) {
 362              		.loc 1 143 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 24
 365              		@ frame_needed = 1, uses_anonymous_args = 0
 366 0000 80B5     		push	{r7, lr}
 367              		.cfi_def_cfa_offset 8
 368              		.cfi_offset 7, -8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 10


 369              		.cfi_offset 14, -4
 370 0002 86B0     		sub	sp, sp, #24
 371              		.cfi_def_cfa_offset 32
 372 0004 00AF     		add	r7, sp, #0
 373              		.cfi_def_cfa_register 7
 374 0006 F860     		str	r0, [r7, #12]
 375 0008 0846     		mov	r0, r1
 376 000a 1146     		mov	r1, r2
 377 000c 1A46     		mov	r2, r3
 378 000e 0346     		mov	r3, r0	@ movhi
 379 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 380 0012 0B46     		mov	r3, r1	@ movhi
 381 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 382 0016 1346     		mov	r3, r2	@ movhi
 383 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 144:gfx.c         ****             if ((x < 0) || (x >= myGFX->_width) || (y < 0) || (y >= myGFX->_height))
 384              		.loc 1 144 0
 385 001a B7F90A30 		ldrsh	r3, [r7, #10]
 386 001e 002B     		cmp	r3, #0
 387 0020 C0F2D780 		blt	.L27
 388              		.loc 1 144 0 is_stmt 0 discriminator 1
 389 0024 B7F90A30 		ldrsh	r3, [r7, #10]
 390 0028 FA68     		ldr	r2, [r7, #12]
 391 002a 9288     		ldrh	r2, [r2, #4]
 392 002c 9342     		cmp	r3, r2
 393 002e 80F2D080 		bge	.L27
 394              		.loc 1 144 0 discriminator 2
 395 0032 B7F90830 		ldrsh	r3, [r7, #8]
 396 0036 002B     		cmp	r3, #0
 397 0038 C0F2CB80 		blt	.L27
 398              		.loc 1 144 0 discriminator 3
 399 003c B7F90830 		ldrsh	r3, [r7, #8]
 400 0040 FA68     		ldr	r2, [r7, #12]
 401 0042 D288     		ldrh	r2, [r2, #6]
 402 0044 9342     		cmp	r3, r2
 403 0046 80F2C480 		bge	.L27
 145:gfx.c         ****                 return;
 146:gfx.c         ****             
 147:gfx.c         ****             // check rotation, move pixel around if necessary
 148:gfx.c         ****             switch (GFXgetRotation(myGFX)) {
 404              		.loc 1 148 0 is_stmt 1
 405 004a F868     		ldr	r0, [r7, #12]
 406 004c FFF7FEFF 		bl	GFXgetRotation
 407 0050 0346     		mov	r3, r0
 408 0052 022B     		cmp	r3, #2
 409 0054 14D0     		beq	.L18
 410 0056 032B     		cmp	r3, #3
 411 0058 27D0     		beq	.L19
 412 005a 012B     		cmp	r3, #1
 413 005c 36D1     		bne	.L17
 414              	.LBB6:
 149:gfx.c         ****                 case 1:
 150:gfx.c         ****                     _swap_int16_t(x, y);
 415              		.loc 1 150 0
 416 005e 7B89     		ldrh	r3, [r7, #10]	@ movhi
 417 0060 FB82     		strh	r3, [r7, #22]	@ movhi
 418 0062 3B89     		ldrh	r3, [r7, #8]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 11


 419 0064 7B81     		strh	r3, [r7, #10]	@ movhi
 420 0066 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 421 0068 3B81     		strh	r3, [r7, #8]	@ movhi
 422              	.LBE6:
 151:gfx.c         ****                     x = myGFX->WIDTH - x - 1;
 423              		.loc 1 151 0
 424 006a FB68     		ldr	r3, [r7, #12]
 425 006c B3F90030 		ldrsh	r3, [r3]
 426 0070 9AB2     		uxth	r2, r3
 427 0072 7B89     		ldrh	r3, [r7, #10]
 428 0074 D31A     		subs	r3, r2, r3
 429 0076 9BB2     		uxth	r3, r3
 430 0078 013B     		subs	r3, r3, #1
 431 007a 9BB2     		uxth	r3, r3
 432 007c 7B81     		strh	r3, [r7, #10]	@ movhi
 152:gfx.c         ****                     break;
 433              		.loc 1 152 0
 434 007e 25E0     		b	.L17
 435              	.L18:
 153:gfx.c         ****                 case 2:
 154:gfx.c         ****                     x = myGFX->WIDTH - x - 1;
 436              		.loc 1 154 0
 437 0080 FB68     		ldr	r3, [r7, #12]
 438 0082 B3F90030 		ldrsh	r3, [r3]
 439 0086 9AB2     		uxth	r2, r3
 440 0088 7B89     		ldrh	r3, [r7, #10]
 441 008a D31A     		subs	r3, r2, r3
 442 008c 9BB2     		uxth	r3, r3
 443 008e 013B     		subs	r3, r3, #1
 444 0090 9BB2     		uxth	r3, r3
 445 0092 7B81     		strh	r3, [r7, #10]	@ movhi
 155:gfx.c         ****                     y = myGFX->HEIGHT - y - 1;
 446              		.loc 1 155 0
 447 0094 FB68     		ldr	r3, [r7, #12]
 448 0096 B3F90230 		ldrsh	r3, [r3, #2]
 449 009a 9AB2     		uxth	r2, r3
 450 009c 3B89     		ldrh	r3, [r7, #8]
 451 009e D31A     		subs	r3, r2, r3
 452 00a0 9BB2     		uxth	r3, r3
 453 00a2 013B     		subs	r3, r3, #1
 454 00a4 9BB2     		uxth	r3, r3
 455 00a6 3B81     		strh	r3, [r7, #8]	@ movhi
 156:gfx.c         ****                     break;
 456              		.loc 1 156 0
 457 00a8 10E0     		b	.L17
 458              	.L19:
 459              	.LBB7:
 157:gfx.c         ****                 case 3:
 158:gfx.c         ****                     _swap_int16_t(x, y);
 460              		.loc 1 158 0
 461 00aa 7B89     		ldrh	r3, [r7, #10]	@ movhi
 462 00ac BB82     		strh	r3, [r7, #20]	@ movhi
 463 00ae 3B89     		ldrh	r3, [r7, #8]	@ movhi
 464 00b0 7B81     		strh	r3, [r7, #10]	@ movhi
 465 00b2 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 466 00b4 3B81     		strh	r3, [r7, #8]	@ movhi
 467              	.LBE7:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 12


 159:gfx.c         ****                     y = myGFX->HEIGHT - y - 1;
 468              		.loc 1 159 0
 469 00b6 FB68     		ldr	r3, [r7, #12]
 470 00b8 B3F90230 		ldrsh	r3, [r3, #2]
 471 00bc 9AB2     		uxth	r2, r3
 472 00be 3B89     		ldrh	r3, [r7, #8]
 473 00c0 D31A     		subs	r3, r2, r3
 474 00c2 9BB2     		uxth	r3, r3
 475 00c4 013B     		subs	r3, r3, #1
 476 00c6 9BB2     		uxth	r3, r3
 477 00c8 3B81     		strh	r3, [r7, #8]	@ movhi
 160:gfx.c         ****                     break;
 478              		.loc 1 160 0
 479 00ca 00BF     		nop
 480              	.L17:
 161:gfx.c         ****             }
 162:gfx.c         ****             
 163:gfx.c         ****             // x is which column
 164:gfx.c         ****             switch (color)
 481              		.loc 1 164 0
 482 00cc FB88     		ldrh	r3, [r7, #6]
 483 00ce 012B     		cmp	r3, #1
 484 00d0 04D0     		beq	.L21
 485 00d2 022B     		cmp	r3, #2
 486 00d4 54D0     		beq	.L22
 487 00d6 002B     		cmp	r3, #0
 488 00d8 28D0     		beq	.L23
 489 00da 7BE0     		b	.L13
 490              	.L21:
 165:gfx.c         ****             {
 166:gfx.c         ****                 case WHITE:   buffer[x+ (y/8)*myGFX->WIDTH] |=  (1 << (y&7)); break;
 491              		.loc 1 166 0
 492 00dc B7F90A20 		ldrsh	r2, [r7, #10]
 493 00e0 B7F90830 		ldrsh	r3, [r7, #8]
 494 00e4 002B     		cmp	r3, #0
 495 00e6 00DA     		bge	.L24
 496 00e8 0733     		adds	r3, r3, #7
 497              	.L24:
 498 00ea DB10     		asrs	r3, r3, #3
 499 00ec 18B2     		sxth	r0, r3
 500 00ee 0146     		mov	r1, r0
 501 00f0 FB68     		ldr	r3, [r7, #12]
 502 00f2 B3F90030 		ldrsh	r3, [r3]
 503 00f6 03FB01F3 		mul	r3, r3, r1
 504 00fa 1344     		add	r3, r3, r2
 505 00fc B7F90A10 		ldrsh	r1, [r7, #10]
 506 0100 FA68     		ldr	r2, [r7, #12]
 507 0102 B2F90020 		ldrsh	r2, [r2]
 508 0106 02FB00F2 		mul	r2, r2, r0
 509 010a 0A44     		add	r2, r2, r1
 510 010c 3349     		ldr	r1, .L28
 511 010e 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 512 0110 51B2     		sxtb	r1, r2
 513 0112 3A89     		ldrh	r2, [r7, #8]
 514 0114 02F00702 		and	r2, r2, #7
 515 0118 0120     		movs	r0, #1
 516 011a 00FA02F2 		lsl	r2, r0, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 13


 517 011e 52B2     		sxtb	r2, r2
 518 0120 0A43     		orrs	r2, r2, r1
 519 0122 52B2     		sxtb	r2, r2
 520 0124 D1B2     		uxtb	r1, r2
 521 0126 2D4A     		ldr	r2, .L28
 522 0128 D154     		strb	r1, [r2, r3]
 523 012a 53E0     		b	.L13
 524              	.L23:
 167:gfx.c         ****                 case BLACK:   buffer[x+ (y/8)*myGFX->WIDTH] &= ~(1 << (y&7)); break;
 525              		.loc 1 167 0
 526 012c B7F90A20 		ldrsh	r2, [r7, #10]
 527 0130 B7F90830 		ldrsh	r3, [r7, #8]
 528 0134 002B     		cmp	r3, #0
 529 0136 00DA     		bge	.L25
 530 0138 0733     		adds	r3, r3, #7
 531              	.L25:
 532 013a DB10     		asrs	r3, r3, #3
 533 013c 18B2     		sxth	r0, r3
 534 013e 0146     		mov	r1, r0
 535 0140 FB68     		ldr	r3, [r7, #12]
 536 0142 B3F90030 		ldrsh	r3, [r3]
 537 0146 03FB01F3 		mul	r3, r3, r1
 538 014a 1344     		add	r3, r3, r2
 539 014c B7F90A10 		ldrsh	r1, [r7, #10]
 540 0150 FA68     		ldr	r2, [r7, #12]
 541 0152 B2F90020 		ldrsh	r2, [r2]
 542 0156 02FB00F2 		mul	r2, r2, r0
 543 015a 0A44     		add	r2, r2, r1
 544 015c 1F49     		ldr	r1, .L28
 545 015e 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 546 0160 51B2     		sxtb	r1, r2
 547 0162 3A89     		ldrh	r2, [r7, #8]
 548 0164 02F00702 		and	r2, r2, #7
 549 0168 0120     		movs	r0, #1
 550 016a 00FA02F2 		lsl	r2, r0, r2
 551 016e 52B2     		sxtb	r2, r2
 552 0170 D243     		mvns	r2, r2
 553 0172 52B2     		sxtb	r2, r2
 554 0174 0A40     		ands	r2, r2, r1
 555 0176 52B2     		sxtb	r2, r2
 556 0178 D1B2     		uxtb	r1, r2
 557 017a 184A     		ldr	r2, .L28
 558 017c D154     		strb	r1, [r2, r3]
 559 017e 29E0     		b	.L13
 560              	.L22:
 168:gfx.c         ****                 case INVERSE: buffer[x+ (y/8)*myGFX->WIDTH] ^=  (1 << (y&7)); break;
 561              		.loc 1 168 0
 562 0180 B7F90A20 		ldrsh	r2, [r7, #10]
 563 0184 B7F90830 		ldrsh	r3, [r7, #8]
 564 0188 002B     		cmp	r3, #0
 565 018a 00DA     		bge	.L26
 566 018c 0733     		adds	r3, r3, #7
 567              	.L26:
 568 018e DB10     		asrs	r3, r3, #3
 569 0190 18B2     		sxth	r0, r3
 570 0192 0146     		mov	r1, r0
 571 0194 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 14


 572 0196 B3F90030 		ldrsh	r3, [r3]
 573 019a 03FB01F3 		mul	r3, r3, r1
 574 019e 1344     		add	r3, r3, r2
 575 01a0 B7F90A10 		ldrsh	r1, [r7, #10]
 576 01a4 FA68     		ldr	r2, [r7, #12]
 577 01a6 B2F90020 		ldrsh	r2, [r2]
 578 01aa 02FB00F2 		mul	r2, r2, r0
 579 01ae 0A44     		add	r2, r2, r1
 580 01b0 0A49     		ldr	r1, .L28
 581 01b2 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 582 01b4 51B2     		sxtb	r1, r2
 583 01b6 3A89     		ldrh	r2, [r7, #8]
 584 01b8 02F00702 		and	r2, r2, #7
 585 01bc 0120     		movs	r0, #1
 586 01be 00FA02F2 		lsl	r2, r0, r2
 587 01c2 52B2     		sxtb	r2, r2
 588 01c4 4A40     		eors	r2, r2, r1
 589 01c6 52B2     		sxtb	r2, r2
 590 01c8 D1B2     		uxtb	r1, r2
 591 01ca 044A     		ldr	r2, .L28
 592 01cc D154     		strb	r1, [r2, r3]
 593 01ce 00BF     		nop
 594 01d0 00E0     		b	.L13
 595              	.L27:
 145:gfx.c         ****             
 596              		.loc 1 145 0
 597 01d2 00BF     		nop
 598              	.L13:
 169:gfx.c         ****             }
 170:gfx.c         ****             
 171:gfx.c         ****         }
 599              		.loc 1 171 0
 600 01d4 1837     		adds	r7, r7, #24
 601              		.cfi_def_cfa_offset 8
 602 01d6 BD46     		mov	sp, r7
 603              		.cfi_def_cfa_register 13
 604              		@ sp needed
 605 01d8 80BD     		pop	{r7, pc}
 606              	.L29:
 607 01da 00BF     		.align	2
 608              	.L28:
 609 01dc 00000000 		.word	buffer
 610              		.cfi_endproc
 611              	.LFE67:
 612              		.size	GFXdrawPixel, .-GFXdrawPixel
 613              		.section	.text.GFXwritePixel,"ax",%progbits
 614              		.align	2
 615              		.global	GFXwritePixel
 616              		.thumb
 617              		.thumb_func
 618              		.type	GFXwritePixel, %function
 619              	GFXwritePixel:
 620              	.LFB68:
 172:gfx.c         ****         
 173:gfx.c         ****         void GFXwritePixel(GFX* myGFX,int16_t x, int16_t y, uint16_t color){
 621              		.loc 1 173 0
 622              		.cfi_startproc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 15


 623              		@ args = 0, pretend = 0, frame = 16
 624              		@ frame_needed = 1, uses_anonymous_args = 0
 625 0000 80B5     		push	{r7, lr}
 626              		.cfi_def_cfa_offset 8
 627              		.cfi_offset 7, -8
 628              		.cfi_offset 14, -4
 629 0002 84B0     		sub	sp, sp, #16
 630              		.cfi_def_cfa_offset 24
 631 0004 00AF     		add	r7, sp, #0
 632              		.cfi_def_cfa_register 7
 633 0006 F860     		str	r0, [r7, #12]
 634 0008 0846     		mov	r0, r1
 635 000a 1146     		mov	r1, r2
 636 000c 1A46     		mov	r2, r3
 637 000e 0346     		mov	r3, r0	@ movhi
 638 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 639 0012 0B46     		mov	r3, r1	@ movhi
 640 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 641 0016 1346     		mov	r3, r2	@ movhi
 642 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 174:gfx.c         ****             // Overwrite in subclasses if startWrite is defined!
 175:gfx.c         ****             GFXdrawPixel(myGFX, x, y, color);
 643              		.loc 1 175 0
 644 001a FB88     		ldrh	r3, [r7, #6]
 645 001c B7F90820 		ldrsh	r2, [r7, #8]
 646 0020 B7F90A10 		ldrsh	r1, [r7, #10]
 647 0024 F868     		ldr	r0, [r7, #12]
 648 0026 FFF7FEFF 		bl	GFXdrawPixel
 176:gfx.c         ****         }
 649              		.loc 1 176 0
 650 002a 00BF     		nop
 651 002c 1037     		adds	r7, r7, #16
 652              		.cfi_def_cfa_offset 8
 653 002e BD46     		mov	sp, r7
 654              		.cfi_def_cfa_register 13
 655              		@ sp needed
 656 0030 80BD     		pop	{r7, pc}
 657              		.cfi_endproc
 658              	.LFE68:
 659              		.size	GFXwritePixel, .-GFXwritePixel
 660 0032 00BF     		.section	.text.GFXwriteFastVLine,"ax",%progbits
 661              		.align	2
 662              		.global	GFXwriteFastVLine
 663              		.thumb
 664              		.thumb_func
 665              		.type	GFXwriteFastVLine, %function
 666              	GFXwriteFastVLine:
 667              	.LFB69:
 177:gfx.c         ****         
 178:gfx.c         ****         // (x,y) is topmost point; if unsure, calling function
 179:gfx.c         ****         // should sort endpoints or call writeLine() instead
 180:gfx.c         ****         void GFXwriteFastVLine(GFX* myGFX,int16_t x, int16_t y,
 181:gfx.c         ****                                int16_t h, uint16_t color) {
 668              		.loc 1 181 0
 669              		.cfi_startproc
 670              		@ args = 4, pretend = 0, frame = 16
 671              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 16


 672 0000 80B5     		push	{r7, lr}
 673              		.cfi_def_cfa_offset 8
 674              		.cfi_offset 7, -8
 675              		.cfi_offset 14, -4
 676 0002 86B0     		sub	sp, sp, #24
 677              		.cfi_def_cfa_offset 32
 678 0004 02AF     		add	r7, sp, #8
 679              		.cfi_def_cfa 7, 24
 680 0006 F860     		str	r0, [r7, #12]
 681 0008 0846     		mov	r0, r1
 682 000a 1146     		mov	r1, r2
 683 000c 1A46     		mov	r2, r3
 684 000e 0346     		mov	r3, r0	@ movhi
 685 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 686 0012 0B46     		mov	r3, r1	@ movhi
 687 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 688 0016 1346     		mov	r3, r2	@ movhi
 689 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 182:gfx.c         ****             // Overwrite in subclasses if startWrite is defined!
 183:gfx.c         ****             // Can be just writeLine(x, y, x, y+h-1, color);
 184:gfx.c         ****             // or writeFillRect(x, y, 1, h, color);
 185:gfx.c         ****             GFXdrawFastVLine(myGFX, x, y, h, color);
 690              		.loc 1 185 0
 691 001a B7F90600 		ldrsh	r0, [r7, #6]
 692 001e B7F90820 		ldrsh	r2, [r7, #8]
 693 0022 B7F90A10 		ldrsh	r1, [r7, #10]
 694 0026 3B8B     		ldrh	r3, [r7, #24]
 695 0028 0093     		str	r3, [sp]
 696 002a 0346     		mov	r3, r0
 697 002c F868     		ldr	r0, [r7, #12]
 698 002e FFF7FEFF 		bl	GFXdrawFastVLine
 186:gfx.c         ****         }
 699              		.loc 1 186 0
 700 0032 00BF     		nop
 701 0034 1037     		adds	r7, r7, #16
 702              		.cfi_def_cfa_offset 8
 703 0036 BD46     		mov	sp, r7
 704              		.cfi_def_cfa_register 13
 705              		@ sp needed
 706 0038 80BD     		pop	{r7, pc}
 707              		.cfi_endproc
 708              	.LFE69:
 709              		.size	GFXwriteFastVLine, .-GFXwriteFastVLine
 710 003a 00BF     		.section	.text.GFXwriteFastHLine,"ax",%progbits
 711              		.align	2
 712              		.global	GFXwriteFastHLine
 713              		.thumb
 714              		.thumb_func
 715              		.type	GFXwriteFastHLine, %function
 716              	GFXwriteFastHLine:
 717              	.LFB70:
 187:gfx.c         ****         
 188:gfx.c         ****         // (x,y) is leftmost point; if unsure, calling function
 189:gfx.c         ****         // should sort endpoints or call writeLine() instead
 190:gfx.c         ****         void GFXwriteFastHLine(GFX* myGFX, int16_t x, int16_t y,
 191:gfx.c         ****                                int16_t w, uint16_t color) {
 718              		.loc 1 191 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 17


 719              		.cfi_startproc
 720              		@ args = 4, pretend = 0, frame = 16
 721              		@ frame_needed = 1, uses_anonymous_args = 0
 722 0000 80B5     		push	{r7, lr}
 723              		.cfi_def_cfa_offset 8
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 86B0     		sub	sp, sp, #24
 727              		.cfi_def_cfa_offset 32
 728 0004 02AF     		add	r7, sp, #8
 729              		.cfi_def_cfa 7, 24
 730 0006 F860     		str	r0, [r7, #12]
 731 0008 0846     		mov	r0, r1
 732 000a 1146     		mov	r1, r2
 733 000c 1A46     		mov	r2, r3
 734 000e 0346     		mov	r3, r0	@ movhi
 735 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 736 0012 0B46     		mov	r3, r1	@ movhi
 737 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 738 0016 1346     		mov	r3, r2	@ movhi
 739 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 192:gfx.c         ****             // Overwrite in subclasses if startWrite is defined!
 193:gfx.c         ****             // Example: writeLine(x, y, x+w-1, y, color);
 194:gfx.c         ****             // or writeFillRect(x, y, w, 1, color);
 195:gfx.c         ****             GFXdrawFastHLine(myGFX,x, y, w, color);
 740              		.loc 1 195 0
 741 001a B7F90600 		ldrsh	r0, [r7, #6]
 742 001e B7F90820 		ldrsh	r2, [r7, #8]
 743 0022 B7F90A10 		ldrsh	r1, [r7, #10]
 744 0026 3B8B     		ldrh	r3, [r7, #24]
 745 0028 0093     		str	r3, [sp]
 746 002a 0346     		mov	r3, r0
 747 002c F868     		ldr	r0, [r7, #12]
 748 002e FFF7FEFF 		bl	GFXdrawFastHLine
 196:gfx.c         ****         }
 749              		.loc 1 196 0
 750 0032 00BF     		nop
 751 0034 1037     		adds	r7, r7, #16
 752              		.cfi_def_cfa_offset 8
 753 0036 BD46     		mov	sp, r7
 754              		.cfi_def_cfa_register 13
 755              		@ sp needed
 756 0038 80BD     		pop	{r7, pc}
 757              		.cfi_endproc
 758              	.LFE70:
 759              		.size	GFXwriteFastHLine, .-GFXwriteFastHLine
 760 003a 00BF     		.section	.text.GFXwriteFillRect,"ax",%progbits
 761              		.align	2
 762              		.global	GFXwriteFillRect
 763              		.thumb
 764              		.thumb_func
 765              		.type	GFXwriteFillRect, %function
 766              	GFXwriteFillRect:
 767              	.LFB71:
 197:gfx.c         ****         
 198:gfx.c         ****         void GFXwriteFillRect(GFX* myGFX,int16_t x, int16_t y, int16_t w, int16_t h,
 199:gfx.c         ****                               uint16_t color) {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 18


 768              		.loc 1 199 0
 769              		.cfi_startproc
 770              		@ args = 8, pretend = 0, frame = 16
 771              		@ frame_needed = 1, uses_anonymous_args = 0
 772 0000 80B5     		push	{r7, lr}
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 7, -8
 775              		.cfi_offset 14, -4
 776 0002 86B0     		sub	sp, sp, #24
 777              		.cfi_def_cfa_offset 32
 778 0004 02AF     		add	r7, sp, #8
 779              		.cfi_def_cfa 7, 24
 780 0006 F860     		str	r0, [r7, #12]
 781 0008 0846     		mov	r0, r1
 782 000a 1146     		mov	r1, r2
 783 000c 1A46     		mov	r2, r3
 784 000e 0346     		mov	r3, r0	@ movhi
 785 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 786 0012 0B46     		mov	r3, r1	@ movhi
 787 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 788 0016 1346     		mov	r3, r2	@ movhi
 789 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 200:gfx.c         ****             // Overwrite in subclasses if desired!
 201:gfx.c         ****             GFXfillRect(myGFX,x,y,w,h,color);
 790              		.loc 1 201 0
 791 001a B7F90600 		ldrsh	r0, [r7, #6]
 792 001e B7F90820 		ldrsh	r2, [r7, #8]
 793 0022 B7F90A10 		ldrsh	r1, [r7, #10]
 794 0026 BB8B     		ldrh	r3, [r7, #28]
 795 0028 0193     		str	r3, [sp, #4]
 796 002a B7F91830 		ldrsh	r3, [r7, #24]
 797 002e 0093     		str	r3, [sp]
 798 0030 0346     		mov	r3, r0
 799 0032 F868     		ldr	r0, [r7, #12]
 800 0034 FFF7FEFF 		bl	GFXfillRect
 202:gfx.c         ****         }
 801              		.loc 1 202 0
 802 0038 00BF     		nop
 803 003a 1037     		adds	r7, r7, #16
 804              		.cfi_def_cfa_offset 8
 805 003c BD46     		mov	sp, r7
 806              		.cfi_def_cfa_register 13
 807              		@ sp needed
 808 003e 80BD     		pop	{r7, pc}
 809              		.cfi_endproc
 810              	.LFE71:
 811              		.size	GFXwriteFillRect, .-GFXwriteFillRect
 812              		.section	.text.GFXendWrite,"ax",%progbits
 813              		.align	2
 814              		.global	GFXendWrite
 815              		.thumb
 816              		.thumb_func
 817              		.type	GFXendWrite, %function
 818              	GFXendWrite:
 819              	.LFB72:
 203:gfx.c         ****         
 204:gfx.c         ****         void GFXendWrite(GFX* myGFX){
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 19


 820              		.loc 1 204 0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 8
 823              		@ frame_needed = 1, uses_anonymous_args = 0
 824              		@ link register save eliminated.
 825 0000 80B4     		push	{r7}
 826              		.cfi_def_cfa_offset 4
 827              		.cfi_offset 7, -4
 828 0002 83B0     		sub	sp, sp, #12
 829              		.cfi_def_cfa_offset 16
 830 0004 00AF     		add	r7, sp, #0
 831              		.cfi_def_cfa_register 7
 832 0006 7860     		str	r0, [r7, #4]
 205:gfx.c         ****             // Overwrite in subclasses if startWrite is defined!
 206:gfx.c         ****         }
 833              		.loc 1 206 0
 834 0008 00BF     		nop
 835 000a 0C37     		adds	r7, r7, #12
 836              		.cfi_def_cfa_offset 4
 837 000c BD46     		mov	sp, r7
 838              		.cfi_def_cfa_register 13
 839              		@ sp needed
 840 000e 80BC     		pop	{r7}
 841              		.cfi_restore 7
 842              		.cfi_def_cfa_offset 0
 843 0010 7047     		bx	lr
 844              		.cfi_endproc
 845              	.LFE72:
 846              		.size	GFXendWrite, .-GFXendWrite
 847 0012 00BF     		.section	.text.GFXdrawFastVLine,"ax",%progbits
 848              		.align	2
 849              		.global	GFXdrawFastVLine
 850              		.thumb
 851              		.thumb_func
 852              		.type	GFXdrawFastVLine, %function
 853              	GFXdrawFastVLine:
 854              	.LFB73:
 207:gfx.c         ****         
 208:gfx.c         ****         // (x,y) is topmost point; if unsure, calling function
 209:gfx.c         ****         // should sort endpoints or call drawLine() instead
 210:gfx.c         ****         void GFXdrawFastVLine(GFX* myGFX,int16_t x, int16_t y,
 211:gfx.c         ****                               int16_t h, uint16_t color) {
 855              		.loc 1 211 0
 856              		.cfi_startproc
 857              		@ args = 4, pretend = 0, frame = 16
 858              		@ frame_needed = 1, uses_anonymous_args = 0
 859 0000 90B5     		push	{r4, r7, lr}
 860              		.cfi_def_cfa_offset 12
 861              		.cfi_offset 4, -12
 862              		.cfi_offset 7, -8
 863              		.cfi_offset 14, -4
 864 0002 87B0     		sub	sp, sp, #28
 865              		.cfi_def_cfa_offset 40
 866 0004 02AF     		add	r7, sp, #8
 867              		.cfi_def_cfa 7, 32
 868 0006 F860     		str	r0, [r7, #12]
 869 0008 0846     		mov	r0, r1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 20


 870 000a 1146     		mov	r1, r2
 871 000c 1A46     		mov	r2, r3
 872 000e 0346     		mov	r3, r0	@ movhi
 873 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 874 0012 0B46     		mov	r3, r1	@ movhi
 875 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 876 0016 1346     		mov	r3, r2	@ movhi
 877 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 212:gfx.c         ****             // Update in subclasses if desired!
 213:gfx.c         ****             GFXwriteLine(myGFX,x, y, x, y+h-1, color);
 878              		.loc 1 213 0
 879 001a 3A89     		ldrh	r2, [r7, #8]
 880 001c FB88     		ldrh	r3, [r7, #6]
 881 001e 1344     		add	r3, r3, r2
 882 0020 9BB2     		uxth	r3, r3
 883 0022 013B     		subs	r3, r3, #1
 884 0024 9BB2     		uxth	r3, r3
 885 0026 1BB2     		sxth	r3, r3
 886 0028 B7F90A40 		ldrsh	r4, [r7, #10]
 887 002c B7F90800 		ldrsh	r0, [r7, #8]
 888 0030 B7F90A10 		ldrsh	r1, [r7, #10]
 889 0034 3A8C     		ldrh	r2, [r7, #32]
 890 0036 0192     		str	r2, [sp, #4]
 891 0038 0093     		str	r3, [sp]
 892 003a 2346     		mov	r3, r4
 893 003c 0246     		mov	r2, r0
 894 003e F868     		ldr	r0, [r7, #12]
 895 0040 FFF7FEFF 		bl	GFXwriteLine
 214:gfx.c         ****         }
 896              		.loc 1 214 0
 897 0044 00BF     		nop
 898 0046 1437     		adds	r7, r7, #20
 899              		.cfi_def_cfa_offset 12
 900 0048 BD46     		mov	sp, r7
 901              		.cfi_def_cfa_register 13
 902              		@ sp needed
 903 004a 90BD     		pop	{r4, r7, pc}
 904              		.cfi_endproc
 905              	.LFE73:
 906              		.size	GFXdrawFastVLine, .-GFXdrawFastVLine
 907              		.section	.text.GFXdrawFastHLine,"ax",%progbits
 908              		.align	2
 909              		.global	GFXdrawFastHLine
 910              		.thumb
 911              		.thumb_func
 912              		.type	GFXdrawFastHLine, %function
 913              	GFXdrawFastHLine:
 914              	.LFB74:
 215:gfx.c         ****         
 216:gfx.c         ****         // (x,y) is leftmost point; if unsure, calling function
 217:gfx.c         ****         // should sort endpoints or call drawLine() instead
 218:gfx.c         ****         void GFXdrawFastHLine(GFX* myGFX,int16_t x, int16_t y,
 219:gfx.c         ****                               int16_t w, uint16_t color) {
 915              		.loc 1 219 0
 916              		.cfi_startproc
 917              		@ args = 4, pretend = 0, frame = 16
 918              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 21


 919 0000 80B5     		push	{r7, lr}
 920              		.cfi_def_cfa_offset 8
 921              		.cfi_offset 7, -8
 922              		.cfi_offset 14, -4
 923 0002 86B0     		sub	sp, sp, #24
 924              		.cfi_def_cfa_offset 32
 925 0004 02AF     		add	r7, sp, #8
 926              		.cfi_def_cfa 7, 24
 927 0006 F860     		str	r0, [r7, #12]
 928 0008 0846     		mov	r0, r1
 929 000a 1146     		mov	r1, r2
 930 000c 1A46     		mov	r2, r3
 931 000e 0346     		mov	r3, r0	@ movhi
 932 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 933 0012 0B46     		mov	r3, r1	@ movhi
 934 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 935 0016 1346     		mov	r3, r2	@ movhi
 936 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 220:gfx.c         ****             // Update in subclasses if desired!
 221:gfx.c         ****             GFXwriteLine(myGFX,x, y, x+w-1, y, color);
 937              		.loc 1 221 0
 938 001a 7A89     		ldrh	r2, [r7, #10]
 939 001c FB88     		ldrh	r3, [r7, #6]
 940 001e 1344     		add	r3, r3, r2
 941 0020 9BB2     		uxth	r3, r3
 942 0022 013B     		subs	r3, r3, #1
 943 0024 9BB2     		uxth	r3, r3
 944 0026 18B2     		sxth	r0, r3
 945 0028 B7F90820 		ldrsh	r2, [r7, #8]
 946 002c B7F90A10 		ldrsh	r1, [r7, #10]
 947 0030 3B8B     		ldrh	r3, [r7, #24]
 948 0032 0193     		str	r3, [sp, #4]
 949 0034 B7F90830 		ldrsh	r3, [r7, #8]
 950 0038 0093     		str	r3, [sp]
 951 003a 0346     		mov	r3, r0
 952 003c F868     		ldr	r0, [r7, #12]
 953 003e FFF7FEFF 		bl	GFXwriteLine
 222:gfx.c         ****         }
 954              		.loc 1 222 0
 955 0042 00BF     		nop
 956 0044 1037     		adds	r7, r7, #16
 957              		.cfi_def_cfa_offset 8
 958 0046 BD46     		mov	sp, r7
 959              		.cfi_def_cfa_register 13
 960              		@ sp needed
 961 0048 80BD     		pop	{r7, pc}
 962              		.cfi_endproc
 963              	.LFE74:
 964              		.size	GFXdrawFastHLine, .-GFXdrawFastHLine
 965 004a 00BF     		.section	.text.GFXfillRect,"ax",%progbits
 966              		.align	2
 967              		.global	GFXfillRect
 968              		.thumb
 969              		.thumb_func
 970              		.type	GFXfillRect, %function
 971              	GFXfillRect:
 972              	.LFB75:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 22


 223:gfx.c         ****         
 224:gfx.c         ****         void GFXfillRect(GFX* myGFX,int16_t x, int16_t y, int16_t w, int16_t h,
 225:gfx.c         ****                          uint16_t color) {
 973              		.loc 1 225 0
 974              		.cfi_startproc
 975              		@ args = 8, pretend = 0, frame = 24
 976              		@ frame_needed = 1, uses_anonymous_args = 0
 977 0000 80B5     		push	{r7, lr}
 978              		.cfi_def_cfa_offset 8
 979              		.cfi_offset 7, -8
 980              		.cfi_offset 14, -4
 981 0002 88B0     		sub	sp, sp, #32
 982              		.cfi_def_cfa_offset 40
 983 0004 02AF     		add	r7, sp, #8
 984              		.cfi_def_cfa 7, 32
 985 0006 F860     		str	r0, [r7, #12]
 986 0008 0846     		mov	r0, r1
 987 000a 1146     		mov	r1, r2
 988 000c 1A46     		mov	r2, r3
 989 000e 0346     		mov	r3, r0	@ movhi
 990 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 991 0012 0B46     		mov	r3, r1	@ movhi
 992 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 993 0016 1346     		mov	r3, r2	@ movhi
 994 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 995              	.LBB8:
 226:gfx.c         ****             // Update in subclasses if desired!
 227:gfx.c         ****             for (int16_t i=x; i<x+w; i++) {
 996              		.loc 1 227 0
 997 001a 7B89     		ldrh	r3, [r7, #10]	@ movhi
 998 001c FB82     		strh	r3, [r7, #22]	@ movhi
 999 001e 11E0     		b	.L38
 1000              	.L39:
 228:gfx.c         ****                 GFXwriteFastVLine(myGFX,i, y, h, color);
 1001              		.loc 1 228 0 discriminator 3
 1002 0020 B7F92000 		ldrsh	r0, [r7, #32]
 1003 0024 B7F90820 		ldrsh	r2, [r7, #8]
 1004 0028 B7F91610 		ldrsh	r1, [r7, #22]
 1005 002c BB8C     		ldrh	r3, [r7, #36]
 1006 002e 0093     		str	r3, [sp]
 1007 0030 0346     		mov	r3, r0
 1008 0032 F868     		ldr	r0, [r7, #12]
 1009 0034 FFF7FEFF 		bl	GFXwriteFastVLine
 227:gfx.c         ****                 GFXwriteFastVLine(myGFX,i, y, h, color);
 1010              		.loc 1 227 0 discriminator 3
 1011 0038 B7F91630 		ldrsh	r3, [r7, #22]
 1012 003c 9BB2     		uxth	r3, r3
 1013 003e 0133     		adds	r3, r3, #1
 1014 0040 9BB2     		uxth	r3, r3
 1015 0042 FB82     		strh	r3, [r7, #22]	@ movhi
 1016              	.L38:
 227:gfx.c         ****                 GFXwriteFastVLine(myGFX,i, y, h, color);
 1017              		.loc 1 227 0 is_stmt 0 discriminator 1
 1018 0044 B7F91620 		ldrsh	r2, [r7, #22]
 1019 0048 B7F90A10 		ldrsh	r1, [r7, #10]
 1020 004c B7F90630 		ldrsh	r3, [r7, #6]
 1021 0050 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 23


 1022 0052 9A42     		cmp	r2, r3
 1023 0054 E4DB     		blt	.L39
 1024              	.LBE8:
 229:gfx.c         ****             }
 230:gfx.c         ****         }
 1025              		.loc 1 230 0 is_stmt 1
 1026 0056 00BF     		nop
 1027 0058 1837     		adds	r7, r7, #24
 1028              		.cfi_def_cfa_offset 8
 1029 005a BD46     		mov	sp, r7
 1030              		.cfi_def_cfa_register 13
 1031              		@ sp needed
 1032 005c 80BD     		pop	{r7, pc}
 1033              		.cfi_endproc
 1034              	.LFE75:
 1035              		.size	GFXfillRect, .-GFXfillRect
 1036 005e 00BF     		.section	.text.GFXfillScreen,"ax",%progbits
 1037              		.align	2
 1038              		.global	GFXfillScreen
 1039              		.thumb
 1040              		.thumb_func
 1041              		.type	GFXfillScreen, %function
 1042              	GFXfillScreen:
 1043              	.LFB76:
 231:gfx.c         ****         
 232:gfx.c         ****         void GFXfillScreen(GFX* myGFX,uint16_t color) {
 1044              		.loc 1 232 0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 8
 1047              		@ frame_needed = 1, uses_anonymous_args = 0
 1048 0000 80B5     		push	{r7, lr}
 1049              		.cfi_def_cfa_offset 8
 1050              		.cfi_offset 7, -8
 1051              		.cfi_offset 14, -4
 1052 0002 84B0     		sub	sp, sp, #16
 1053              		.cfi_def_cfa_offset 24
 1054 0004 02AF     		add	r7, sp, #8
 1055              		.cfi_def_cfa 7, 16
 1056 0006 7860     		str	r0, [r7, #4]
 1057 0008 0B46     		mov	r3, r1
 1058 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 233:gfx.c         ****             // Update in subclasses if desired!
 234:gfx.c         ****             GFXfillRect(myGFX,0, 0, myGFX->_width, myGFX->_height, color);
 1059              		.loc 1 234 0
 1060 000c 7B68     		ldr	r3, [r7, #4]
 1061 000e 9B88     		ldrh	r3, [r3, #4]
 1062 0010 19B2     		sxth	r1, r3
 1063 0012 7B68     		ldr	r3, [r7, #4]
 1064 0014 DB88     		ldrh	r3, [r3, #6]
 1065 0016 1BB2     		sxth	r3, r3
 1066 0018 7A88     		ldrh	r2, [r7, #2]
 1067 001a 0192     		str	r2, [sp, #4]
 1068 001c 0093     		str	r3, [sp]
 1069 001e 0B46     		mov	r3, r1
 1070 0020 0022     		movs	r2, #0
 1071 0022 0021     		movs	r1, #0
 1072 0024 7868     		ldr	r0, [r7, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 24


 1073 0026 FFF7FEFF 		bl	GFXfillRect
 235:gfx.c         ****         }
 1074              		.loc 1 235 0
 1075 002a 00BF     		nop
 1076 002c 0837     		adds	r7, r7, #8
 1077              		.cfi_def_cfa_offset 8
 1078 002e BD46     		mov	sp, r7
 1079              		.cfi_def_cfa_register 13
 1080              		@ sp needed
 1081 0030 80BD     		pop	{r7, pc}
 1082              		.cfi_endproc
 1083              	.LFE76:
 1084              		.size	GFXfillScreen, .-GFXfillScreen
 1085 0032 00BF     		.section	.text.GFXdrawLine,"ax",%progbits
 1086              		.align	2
 1087              		.global	GFXdrawLine
 1088              		.thumb
 1089              		.thumb_func
 1090              		.type	GFXdrawLine, %function
 1091              	GFXdrawLine:
 1092              	.LFB77:
 236:gfx.c         ****         
 237:gfx.c         ****         void GFXdrawLine(GFX* myGFX,int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 238:gfx.c         ****                          uint16_t color) {
 1093              		.loc 1 238 0
 1094              		.cfi_startproc
 1095              		@ args = 8, pretend = 0, frame = 24
 1096              		@ frame_needed = 1, uses_anonymous_args = 0
 1097 0000 80B5     		push	{r7, lr}
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 7, -8
 1100              		.cfi_offset 14, -4
 1101 0002 88B0     		sub	sp, sp, #32
 1102              		.cfi_def_cfa_offset 40
 1103 0004 02AF     		add	r7, sp, #8
 1104              		.cfi_def_cfa 7, 32
 1105 0006 F860     		str	r0, [r7, #12]
 1106 0008 0846     		mov	r0, r1
 1107 000a 1146     		mov	r1, r2
 1108 000c 1A46     		mov	r2, r3
 1109 000e 0346     		mov	r3, r0	@ movhi
 1110 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 1111 0012 0B46     		mov	r3, r1	@ movhi
 1112 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 1113 0016 1346     		mov	r3, r2	@ movhi
 1114 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 239:gfx.c         ****             // Update in subclasses if desired!
 240:gfx.c         ****             if(x0 == x1){
 1115              		.loc 1 240 0
 1116 001a B7F90A20 		ldrsh	r2, [r7, #10]
 1117 001e B7F90630 		ldrsh	r3, [r7, #6]
 1118 0022 9A42     		cmp	r2, r3
 1119 0024 1DD1     		bne	.L42
 241:gfx.c         ****                 if(y0 > y1) _swap_int16_t(y0, y1);
 1120              		.loc 1 241 0
 1121 0026 B7F90820 		ldrsh	r2, [r7, #8]
 1122 002a B7F92030 		ldrsh	r3, [r7, #32]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 25


 1123 002e 9A42     		cmp	r2, r3
 1124 0030 05DD     		ble	.L43
 1125              	.LBB9:
 1126              		.loc 1 241 0 is_stmt 0 discriminator 1
 1127 0032 3B89     		ldrh	r3, [r7, #8]	@ movhi
 1128 0034 FB82     		strh	r3, [r7, #22]	@ movhi
 1129 0036 3B8C     		ldrh	r3, [r7, #32]	@ movhi
 1130 0038 3B81     		strh	r3, [r7, #8]	@ movhi
 1131 003a FB8A     		ldrh	r3, [r7, #22]	@ movhi
 1132 003c 3B84     		strh	r3, [r7, #32]	@ movhi
 1133              	.L43:
 1134              	.LBE9:
 242:gfx.c         ****                 GFXdrawFastVLine(myGFX,x0, y0, y1 - y0 + 1, color);
 1135              		.loc 1 242 0 is_stmt 1
 1136 003e 3A8C     		ldrh	r2, [r7, #32]
 1137 0040 3B89     		ldrh	r3, [r7, #8]
 1138 0042 D31A     		subs	r3, r2, r3
 1139 0044 9BB2     		uxth	r3, r3
 1140 0046 0133     		adds	r3, r3, #1
 1141 0048 9BB2     		uxth	r3, r3
 1142 004a 18B2     		sxth	r0, r3
 1143 004c B7F90820 		ldrsh	r2, [r7, #8]
 1144 0050 B7F90A10 		ldrsh	r1, [r7, #10]
 1145 0054 BB8C     		ldrh	r3, [r7, #36]
 1146 0056 0093     		str	r3, [sp]
 1147 0058 0346     		mov	r3, r0
 1148 005a F868     		ldr	r0, [r7, #12]
 1149 005c FFF7FEFF 		bl	GFXdrawFastVLine
 243:gfx.c         ****             } else if(y0 == y1){
 244:gfx.c         ****                 if(x0 > x1) _swap_int16_t(x0, x1);
 245:gfx.c         ****                 GFXdrawFastHLine(myGFX,x0, y0, x1 - x0 + 1, color);
 246:gfx.c         ****             } else {
 247:gfx.c         ****                 GFXwriteLine(myGFX,x0, y0, x1, y1, color);
 248:gfx.c         ****             }
 249:gfx.c         ****         }
 1150              		.loc 1 249 0
 1151 0060 32E0     		b	.L47
 1152              	.L42:
 243:gfx.c         ****             } else if(y0 == y1){
 1153              		.loc 1 243 0
 1154 0062 B7F90820 		ldrsh	r2, [r7, #8]
 1155 0066 B7F92030 		ldrsh	r3, [r7, #32]
 1156 006a 9A42     		cmp	r2, r3
 1157 006c 1DD1     		bne	.L45
 244:gfx.c         ****                 GFXdrawFastHLine(myGFX,x0, y0, x1 - x0 + 1, color);
 1158              		.loc 1 244 0
 1159 006e B7F90A20 		ldrsh	r2, [r7, #10]
 1160 0072 B7F90630 		ldrsh	r3, [r7, #6]
 1161 0076 9A42     		cmp	r2, r3
 1162 0078 05DD     		ble	.L46
 1163              	.LBB10:
 244:gfx.c         ****                 GFXdrawFastHLine(myGFX,x0, y0, x1 - x0 + 1, color);
 1164              		.loc 1 244 0 is_stmt 0 discriminator 1
 1165 007a 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1166 007c BB82     		strh	r3, [r7, #20]	@ movhi
 1167 007e FB88     		ldrh	r3, [r7, #6]	@ movhi
 1168 0080 7B81     		strh	r3, [r7, #10]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 26


 1169 0082 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1170 0084 FB80     		strh	r3, [r7, #6]	@ movhi
 1171              	.L46:
 1172              	.LBE10:
 245:gfx.c         ****             } else {
 1173              		.loc 1 245 0 is_stmt 1
 1174 0086 FA88     		ldrh	r2, [r7, #6]
 1175 0088 7B89     		ldrh	r3, [r7, #10]
 1176 008a D31A     		subs	r3, r2, r3
 1177 008c 9BB2     		uxth	r3, r3
 1178 008e 0133     		adds	r3, r3, #1
 1179 0090 9BB2     		uxth	r3, r3
 1180 0092 18B2     		sxth	r0, r3
 1181 0094 B7F90820 		ldrsh	r2, [r7, #8]
 1182 0098 B7F90A10 		ldrsh	r1, [r7, #10]
 1183 009c BB8C     		ldrh	r3, [r7, #36]
 1184 009e 0093     		str	r3, [sp]
 1185 00a0 0346     		mov	r3, r0
 1186 00a2 F868     		ldr	r0, [r7, #12]
 1187 00a4 FFF7FEFF 		bl	GFXdrawFastHLine
 1188              		.loc 1 249 0
 1189 00a8 0EE0     		b	.L47
 1190              	.L45:
 247:gfx.c         ****             }
 1191              		.loc 1 247 0
 1192 00aa B7F90600 		ldrsh	r0, [r7, #6]
 1193 00ae B7F90820 		ldrsh	r2, [r7, #8]
 1194 00b2 B7F90A10 		ldrsh	r1, [r7, #10]
 1195 00b6 BB8C     		ldrh	r3, [r7, #36]
 1196 00b8 0193     		str	r3, [sp, #4]
 1197 00ba B7F92030 		ldrsh	r3, [r7, #32]
 1198 00be 0093     		str	r3, [sp]
 1199 00c0 0346     		mov	r3, r0
 1200 00c2 F868     		ldr	r0, [r7, #12]
 1201 00c4 FFF7FEFF 		bl	GFXwriteLine
 1202              	.L47:
 1203              		.loc 1 249 0
 1204 00c8 00BF     		nop
 1205 00ca 1837     		adds	r7, r7, #24
 1206              		.cfi_def_cfa_offset 8
 1207 00cc BD46     		mov	sp, r7
 1208              		.cfi_def_cfa_register 13
 1209              		@ sp needed
 1210 00ce 80BD     		pop	{r7, pc}
 1211              		.cfi_endproc
 1212              	.LFE77:
 1213              		.size	GFXdrawLine, .-GFXdrawLine
 1214              		.section	.text.GFXdrawCircle,"ax",%progbits
 1215              		.align	2
 1216              		.global	GFXdrawCircle
 1217              		.thumb
 1218              		.thumb_func
 1219              		.type	GFXdrawCircle, %function
 1220              	GFXdrawCircle:
 1221              	.LFB78:
 250:gfx.c         ****         
 251:gfx.c         ****         // Draw a circle outline
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 27


 252:gfx.c         ****         void GFXdrawCircle(GFX* myGFX,int16_t x0, int16_t y0, int16_t r,
 253:gfx.c         ****                            uint16_t color) {
 1222              		.loc 1 253 0
 1223              		.cfi_startproc
 1224              		@ args = 4, pretend = 0, frame = 32
 1225              		@ frame_needed = 1, uses_anonymous_args = 0
 1226 0000 80B5     		push	{r7, lr}
 1227              		.cfi_def_cfa_offset 8
 1228              		.cfi_offset 7, -8
 1229              		.cfi_offset 14, -4
 1230 0002 88B0     		sub	sp, sp, #32
 1231              		.cfi_def_cfa_offset 40
 1232 0004 00AF     		add	r7, sp, #0
 1233              		.cfi_def_cfa_register 7
 1234 0006 F860     		str	r0, [r7, #12]
 1235 0008 0846     		mov	r0, r1
 1236 000a 1146     		mov	r1, r2
 1237 000c 1A46     		mov	r2, r3
 1238 000e 0346     		mov	r3, r0	@ movhi
 1239 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 1240 0012 0B46     		mov	r3, r1	@ movhi
 1241 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 1242 0016 1346     		mov	r3, r2	@ movhi
 1243 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 254:gfx.c         ****             int16_t f = 1 - r;
 1244              		.loc 1 254 0
 1245 001a FB88     		ldrh	r3, [r7, #6]
 1246 001c C3F10103 		rsb	r3, r3, #1
 1247 0020 9BB2     		uxth	r3, r3
 1248 0022 FB83     		strh	r3, [r7, #30]	@ movhi
 255:gfx.c         ****             int16_t ddF_x = 1;
 1249              		.loc 1 255 0
 1250 0024 0123     		movs	r3, #1
 1251 0026 BB83     		strh	r3, [r7, #28]	@ movhi
 256:gfx.c         ****             int16_t ddF_y = -2 * r;
 1252              		.loc 1 256 0
 1253 0028 FB88     		ldrh	r3, [r7, #6]
 1254 002a 1A46     		mov	r2, r3	@ movhi
 1255 002c D203     		lsls	r2, r2, #15
 1256 002e D31A     		subs	r3, r2, r3
 1257 0030 5B00     		lsls	r3, r3, #1
 1258 0032 9BB2     		uxth	r3, r3
 1259 0034 7B83     		strh	r3, [r7, #26]	@ movhi
 257:gfx.c         ****             int16_t x = 0;
 1260              		.loc 1 257 0
 1261 0036 0023     		movs	r3, #0
 1262 0038 3B83     		strh	r3, [r7, #24]	@ movhi
 258:gfx.c         ****             int16_t y = r;
 1263              		.loc 1 258 0
 1264 003a FB88     		ldrh	r3, [r7, #6]	@ movhi
 1265 003c FB82     		strh	r3, [r7, #22]	@ movhi
 259:gfx.c         ****             
 260:gfx.c         ****             GFXwritePixel(myGFX,x0  , y0+r, color);
 1266              		.loc 1 260 0
 1267 003e 3A89     		ldrh	r2, [r7, #8]
 1268 0040 FB88     		ldrh	r3, [r7, #6]
 1269 0042 1344     		add	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 28


 1270 0044 9BB2     		uxth	r3, r3
 1271 0046 1AB2     		sxth	r2, r3
 1272 0048 3B8D     		ldrh	r3, [r7, #40]
 1273 004a B7F90A10 		ldrsh	r1, [r7, #10]
 1274 004e F868     		ldr	r0, [r7, #12]
 1275 0050 FFF7FEFF 		bl	GFXwritePixel
 261:gfx.c         ****             GFXwritePixel(myGFX,x0  , y0-r, color);
 1276              		.loc 1 261 0
 1277 0054 3A89     		ldrh	r2, [r7, #8]
 1278 0056 FB88     		ldrh	r3, [r7, #6]
 1279 0058 D31A     		subs	r3, r2, r3
 1280 005a 9BB2     		uxth	r3, r3
 1281 005c 1AB2     		sxth	r2, r3
 1282 005e 3B8D     		ldrh	r3, [r7, #40]
 1283 0060 B7F90A10 		ldrsh	r1, [r7, #10]
 1284 0064 F868     		ldr	r0, [r7, #12]
 1285 0066 FFF7FEFF 		bl	GFXwritePixel
 262:gfx.c         ****             GFXwritePixel(myGFX,x0+r, y0  , color);
 1286              		.loc 1 262 0
 1287 006a 7A89     		ldrh	r2, [r7, #10]
 1288 006c FB88     		ldrh	r3, [r7, #6]
 1289 006e 1344     		add	r3, r3, r2
 1290 0070 9BB2     		uxth	r3, r3
 1291 0072 19B2     		sxth	r1, r3
 1292 0074 3B8D     		ldrh	r3, [r7, #40]
 1293 0076 B7F90820 		ldrsh	r2, [r7, #8]
 1294 007a F868     		ldr	r0, [r7, #12]
 1295 007c FFF7FEFF 		bl	GFXwritePixel
 263:gfx.c         ****             GFXwritePixel(myGFX,x0-r, y0  , color);
 1296              		.loc 1 263 0
 1297 0080 7A89     		ldrh	r2, [r7, #10]
 1298 0082 FB88     		ldrh	r3, [r7, #6]
 1299 0084 D31A     		subs	r3, r2, r3
 1300 0086 9BB2     		uxth	r3, r3
 1301 0088 19B2     		sxth	r1, r3
 1302 008a 3B8D     		ldrh	r3, [r7, #40]
 1303 008c B7F90820 		ldrsh	r2, [r7, #8]
 1304 0090 F868     		ldr	r0, [r7, #12]
 1305 0092 FFF7FEFF 		bl	GFXwritePixel
 264:gfx.c         ****             
 265:gfx.c         ****             while (x<y) {
 1306              		.loc 1 265 0
 1307 0096 91E0     		b	.L49
 1308              	.L51:
 266:gfx.c         ****                 if (f >= 0) {
 1309              		.loc 1 266 0
 1310 0098 B7F91E30 		ldrsh	r3, [r7, #30]
 1311 009c 002B     		cmp	r3, #0
 1312 009e 0EDB     		blt	.L50
 267:gfx.c         ****                     y--;
 1313              		.loc 1 267 0
 1314 00a0 B7F91630 		ldrsh	r3, [r7, #22]
 1315 00a4 9BB2     		uxth	r3, r3
 1316 00a6 013B     		subs	r3, r3, #1
 1317 00a8 9BB2     		uxth	r3, r3
 1318 00aa FB82     		strh	r3, [r7, #22]	@ movhi
 268:gfx.c         ****                     ddF_y += 2;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 29


 1319              		.loc 1 268 0
 1320 00ac 7B8B     		ldrh	r3, [r7, #26]
 1321 00ae 0233     		adds	r3, r3, #2
 1322 00b0 9BB2     		uxth	r3, r3
 1323 00b2 7B83     		strh	r3, [r7, #26]	@ movhi
 269:gfx.c         ****                     f += ddF_y;
 1324              		.loc 1 269 0
 1325 00b4 FA8B     		ldrh	r2, [r7, #30]
 1326 00b6 7B8B     		ldrh	r3, [r7, #26]
 1327 00b8 1344     		add	r3, r3, r2
 1328 00ba 9BB2     		uxth	r3, r3
 1329 00bc FB83     		strh	r3, [r7, #30]	@ movhi
 1330              	.L50:
 270:gfx.c         ****                 }
 271:gfx.c         ****                 x++;
 1331              		.loc 1 271 0
 1332 00be B7F91830 		ldrsh	r3, [r7, #24]
 1333 00c2 9BB2     		uxth	r3, r3
 1334 00c4 0133     		adds	r3, r3, #1
 1335 00c6 9BB2     		uxth	r3, r3
 1336 00c8 3B83     		strh	r3, [r7, #24]	@ movhi
 272:gfx.c         ****                 ddF_x += 2;
 1337              		.loc 1 272 0
 1338 00ca BB8B     		ldrh	r3, [r7, #28]
 1339 00cc 0233     		adds	r3, r3, #2
 1340 00ce 9BB2     		uxth	r3, r3
 1341 00d0 BB83     		strh	r3, [r7, #28]	@ movhi
 273:gfx.c         ****                 f += ddF_x;
 1342              		.loc 1 273 0
 1343 00d2 FA8B     		ldrh	r2, [r7, #30]
 1344 00d4 BB8B     		ldrh	r3, [r7, #28]
 1345 00d6 1344     		add	r3, r3, r2
 1346 00d8 9BB2     		uxth	r3, r3
 1347 00da FB83     		strh	r3, [r7, #30]	@ movhi
 274:gfx.c         ****                 
 275:gfx.c         ****                 GFXwritePixel(myGFX,x0 + x, y0 + y, color);
 1348              		.loc 1 275 0
 1349 00dc 7A89     		ldrh	r2, [r7, #10]
 1350 00de 3B8B     		ldrh	r3, [r7, #24]
 1351 00e0 1344     		add	r3, r3, r2
 1352 00e2 9BB2     		uxth	r3, r3
 1353 00e4 19B2     		sxth	r1, r3
 1354 00e6 3A89     		ldrh	r2, [r7, #8]
 1355 00e8 FB8A     		ldrh	r3, [r7, #22]
 1356 00ea 1344     		add	r3, r3, r2
 1357 00ec 9BB2     		uxth	r3, r3
 1358 00ee 1AB2     		sxth	r2, r3
 1359 00f0 3B8D     		ldrh	r3, [r7, #40]
 1360 00f2 F868     		ldr	r0, [r7, #12]
 1361 00f4 FFF7FEFF 		bl	GFXwritePixel
 276:gfx.c         ****                 GFXwritePixel(myGFX,x0 - x, y0 + y, color);
 1362              		.loc 1 276 0
 1363 00f8 7A89     		ldrh	r2, [r7, #10]
 1364 00fa 3B8B     		ldrh	r3, [r7, #24]
 1365 00fc D31A     		subs	r3, r2, r3
 1366 00fe 9BB2     		uxth	r3, r3
 1367 0100 19B2     		sxth	r1, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 30


 1368 0102 3A89     		ldrh	r2, [r7, #8]
 1369 0104 FB8A     		ldrh	r3, [r7, #22]
 1370 0106 1344     		add	r3, r3, r2
 1371 0108 9BB2     		uxth	r3, r3
 1372 010a 1AB2     		sxth	r2, r3
 1373 010c 3B8D     		ldrh	r3, [r7, #40]
 1374 010e F868     		ldr	r0, [r7, #12]
 1375 0110 FFF7FEFF 		bl	GFXwritePixel
 277:gfx.c         ****                 GFXwritePixel(myGFX,x0 + x, y0 - y, color);
 1376              		.loc 1 277 0
 1377 0114 7A89     		ldrh	r2, [r7, #10]
 1378 0116 3B8B     		ldrh	r3, [r7, #24]
 1379 0118 1344     		add	r3, r3, r2
 1380 011a 9BB2     		uxth	r3, r3
 1381 011c 19B2     		sxth	r1, r3
 1382 011e 3A89     		ldrh	r2, [r7, #8]
 1383 0120 FB8A     		ldrh	r3, [r7, #22]
 1384 0122 D31A     		subs	r3, r2, r3
 1385 0124 9BB2     		uxth	r3, r3
 1386 0126 1AB2     		sxth	r2, r3
 1387 0128 3B8D     		ldrh	r3, [r7, #40]
 1388 012a F868     		ldr	r0, [r7, #12]
 1389 012c FFF7FEFF 		bl	GFXwritePixel
 278:gfx.c         ****                 GFXwritePixel(myGFX,x0 - x, y0 - y, color);
 1390              		.loc 1 278 0
 1391 0130 7A89     		ldrh	r2, [r7, #10]
 1392 0132 3B8B     		ldrh	r3, [r7, #24]
 1393 0134 D31A     		subs	r3, r2, r3
 1394 0136 9BB2     		uxth	r3, r3
 1395 0138 19B2     		sxth	r1, r3
 1396 013a 3A89     		ldrh	r2, [r7, #8]
 1397 013c FB8A     		ldrh	r3, [r7, #22]
 1398 013e D31A     		subs	r3, r2, r3
 1399 0140 9BB2     		uxth	r3, r3
 1400 0142 1AB2     		sxth	r2, r3
 1401 0144 3B8D     		ldrh	r3, [r7, #40]
 1402 0146 F868     		ldr	r0, [r7, #12]
 1403 0148 FFF7FEFF 		bl	GFXwritePixel
 279:gfx.c         ****                 GFXwritePixel(myGFX,x0 + y, y0 + x, color);
 1404              		.loc 1 279 0
 1405 014c 7A89     		ldrh	r2, [r7, #10]
 1406 014e FB8A     		ldrh	r3, [r7, #22]
 1407 0150 1344     		add	r3, r3, r2
 1408 0152 9BB2     		uxth	r3, r3
 1409 0154 19B2     		sxth	r1, r3
 1410 0156 3A89     		ldrh	r2, [r7, #8]
 1411 0158 3B8B     		ldrh	r3, [r7, #24]
 1412 015a 1344     		add	r3, r3, r2
 1413 015c 9BB2     		uxth	r3, r3
 1414 015e 1AB2     		sxth	r2, r3
 1415 0160 3B8D     		ldrh	r3, [r7, #40]
 1416 0162 F868     		ldr	r0, [r7, #12]
 1417 0164 FFF7FEFF 		bl	GFXwritePixel
 280:gfx.c         ****                 GFXwritePixel(myGFX,x0 - y, y0 + x, color);
 1418              		.loc 1 280 0
 1419 0168 7A89     		ldrh	r2, [r7, #10]
 1420 016a FB8A     		ldrh	r3, [r7, #22]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 31


 1421 016c D31A     		subs	r3, r2, r3
 1422 016e 9BB2     		uxth	r3, r3
 1423 0170 19B2     		sxth	r1, r3
 1424 0172 3A89     		ldrh	r2, [r7, #8]
 1425 0174 3B8B     		ldrh	r3, [r7, #24]
 1426 0176 1344     		add	r3, r3, r2
 1427 0178 9BB2     		uxth	r3, r3
 1428 017a 1AB2     		sxth	r2, r3
 1429 017c 3B8D     		ldrh	r3, [r7, #40]
 1430 017e F868     		ldr	r0, [r7, #12]
 1431 0180 FFF7FEFF 		bl	GFXwritePixel
 281:gfx.c         ****                 GFXwritePixel(myGFX,x0 + y, y0 - x, color);
 1432              		.loc 1 281 0
 1433 0184 7A89     		ldrh	r2, [r7, #10]
 1434 0186 FB8A     		ldrh	r3, [r7, #22]
 1435 0188 1344     		add	r3, r3, r2
 1436 018a 9BB2     		uxth	r3, r3
 1437 018c 19B2     		sxth	r1, r3
 1438 018e 3A89     		ldrh	r2, [r7, #8]
 1439 0190 3B8B     		ldrh	r3, [r7, #24]
 1440 0192 D31A     		subs	r3, r2, r3
 1441 0194 9BB2     		uxth	r3, r3
 1442 0196 1AB2     		sxth	r2, r3
 1443 0198 3B8D     		ldrh	r3, [r7, #40]
 1444 019a F868     		ldr	r0, [r7, #12]
 1445 019c FFF7FEFF 		bl	GFXwritePixel
 282:gfx.c         ****                 GFXwritePixel(myGFX,x0 - y, y0 - x, color);
 1446              		.loc 1 282 0
 1447 01a0 7A89     		ldrh	r2, [r7, #10]
 1448 01a2 FB8A     		ldrh	r3, [r7, #22]
 1449 01a4 D31A     		subs	r3, r2, r3
 1450 01a6 9BB2     		uxth	r3, r3
 1451 01a8 19B2     		sxth	r1, r3
 1452 01aa 3A89     		ldrh	r2, [r7, #8]
 1453 01ac 3B8B     		ldrh	r3, [r7, #24]
 1454 01ae D31A     		subs	r3, r2, r3
 1455 01b0 9BB2     		uxth	r3, r3
 1456 01b2 1AB2     		sxth	r2, r3
 1457 01b4 3B8D     		ldrh	r3, [r7, #40]
 1458 01b6 F868     		ldr	r0, [r7, #12]
 1459 01b8 FFF7FEFF 		bl	GFXwritePixel
 1460              	.L49:
 265:gfx.c         ****                 if (f >= 0) {
 1461              		.loc 1 265 0
 1462 01bc B7F91820 		ldrsh	r2, [r7, #24]
 1463 01c0 B7F91630 		ldrsh	r3, [r7, #22]
 1464 01c4 9A42     		cmp	r2, r3
 1465 01c6 FFF667AF 		blt	.L51
 283:gfx.c         ****             }
 284:gfx.c         ****             
 285:gfx.c         ****         }
 1466              		.loc 1 285 0
 1467 01ca 00BF     		nop
 1468 01cc 2037     		adds	r7, r7, #32
 1469              		.cfi_def_cfa_offset 8
 1470 01ce BD46     		mov	sp, r7
 1471              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 32


 1472              		@ sp needed
 1473 01d0 80BD     		pop	{r7, pc}
 1474              		.cfi_endproc
 1475              	.LFE78:
 1476              		.size	GFXdrawCircle, .-GFXdrawCircle
 1477 01d2 00BF     		.section	.text.GFXdrawCircleHelper,"ax",%progbits
 1478              		.align	2
 1479              		.global	GFXdrawCircleHelper
 1480              		.thumb
 1481              		.thumb_func
 1482              		.type	GFXdrawCircleHelper, %function
 1483              	GFXdrawCircleHelper:
 1484              	.LFB79:
 286:gfx.c         ****         
 287:gfx.c         ****         void GFXdrawCircleHelper(GFX* myGFX,int16_t x0, int16_t y0,
 288:gfx.c         ****                                  int16_t r, uint8_t cornername, uint16_t color) {
 1485              		.loc 1 288 0
 1486              		.cfi_startproc
 1487              		@ args = 8, pretend = 0, frame = 32
 1488              		@ frame_needed = 1, uses_anonymous_args = 0
 1489 0000 80B5     		push	{r7, lr}
 1490              		.cfi_def_cfa_offset 8
 1491              		.cfi_offset 7, -8
 1492              		.cfi_offset 14, -4
 1493 0002 88B0     		sub	sp, sp, #32
 1494              		.cfi_def_cfa_offset 40
 1495 0004 00AF     		add	r7, sp, #0
 1496              		.cfi_def_cfa_register 7
 1497 0006 F860     		str	r0, [r7, #12]
 1498 0008 0846     		mov	r0, r1
 1499 000a 1146     		mov	r1, r2
 1500 000c 1A46     		mov	r2, r3
 1501 000e 0346     		mov	r3, r0	@ movhi
 1502 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 1503 0012 0B46     		mov	r3, r1	@ movhi
 1504 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 1505 0016 1346     		mov	r3, r2	@ movhi
 1506 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 289:gfx.c         ****             int16_t f     = 1 - r;
 1507              		.loc 1 289 0
 1508 001a FB88     		ldrh	r3, [r7, #6]
 1509 001c C3F10103 		rsb	r3, r3, #1
 1510 0020 9BB2     		uxth	r3, r3
 1511 0022 FB83     		strh	r3, [r7, #30]	@ movhi
 290:gfx.c         ****             int16_t ddF_x = 1;
 1512              		.loc 1 290 0
 1513 0024 0123     		movs	r3, #1
 1514 0026 BB83     		strh	r3, [r7, #28]	@ movhi
 291:gfx.c         ****             int16_t ddF_y = -2 * r;
 1515              		.loc 1 291 0
 1516 0028 FB88     		ldrh	r3, [r7, #6]
 1517 002a 1A46     		mov	r2, r3	@ movhi
 1518 002c D203     		lsls	r2, r2, #15
 1519 002e D31A     		subs	r3, r2, r3
 1520 0030 5B00     		lsls	r3, r3, #1
 1521 0032 9BB2     		uxth	r3, r3
 1522 0034 7B83     		strh	r3, [r7, #26]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 33


 292:gfx.c         ****             int16_t x     = 0;
 1523              		.loc 1 292 0
 1524 0036 0023     		movs	r3, #0
 1525 0038 3B83     		strh	r3, [r7, #24]	@ movhi
 293:gfx.c         ****             int16_t y     = r;
 1526              		.loc 1 293 0
 1527 003a FB88     		ldrh	r3, [r7, #6]	@ movhi
 1528 003c FB82     		strh	r3, [r7, #22]	@ movhi
 294:gfx.c         ****             
 295:gfx.c         ****             while (x<y) {
 1529              		.loc 1 295 0
 1530 003e A9E0     		b	.L53
 1531              	.L58:
 296:gfx.c         ****                 if (f >= 0) {
 1532              		.loc 1 296 0
 1533 0040 B7F91E30 		ldrsh	r3, [r7, #30]
 1534 0044 002B     		cmp	r3, #0
 1535 0046 0EDB     		blt	.L54
 297:gfx.c         ****                     y--;
 1536              		.loc 1 297 0
 1537 0048 B7F91630 		ldrsh	r3, [r7, #22]
 1538 004c 9BB2     		uxth	r3, r3
 1539 004e 013B     		subs	r3, r3, #1
 1540 0050 9BB2     		uxth	r3, r3
 1541 0052 FB82     		strh	r3, [r7, #22]	@ movhi
 298:gfx.c         ****                     ddF_y += 2;
 1542              		.loc 1 298 0
 1543 0054 7B8B     		ldrh	r3, [r7, #26]
 1544 0056 0233     		adds	r3, r3, #2
 1545 0058 9BB2     		uxth	r3, r3
 1546 005a 7B83     		strh	r3, [r7, #26]	@ movhi
 299:gfx.c         ****                     f     += ddF_y;
 1547              		.loc 1 299 0
 1548 005c FA8B     		ldrh	r2, [r7, #30]
 1549 005e 7B8B     		ldrh	r3, [r7, #26]
 1550 0060 1344     		add	r3, r3, r2
 1551 0062 9BB2     		uxth	r3, r3
 1552 0064 FB83     		strh	r3, [r7, #30]	@ movhi
 1553              	.L54:
 300:gfx.c         ****                 }
 301:gfx.c         ****                 x++;
 1554              		.loc 1 301 0
 1555 0066 B7F91830 		ldrsh	r3, [r7, #24]
 1556 006a 9BB2     		uxth	r3, r3
 1557 006c 0133     		adds	r3, r3, #1
 1558 006e 9BB2     		uxth	r3, r3
 1559 0070 3B83     		strh	r3, [r7, #24]	@ movhi
 302:gfx.c         ****                 ddF_x += 2;
 1560              		.loc 1 302 0
 1561 0072 BB8B     		ldrh	r3, [r7, #28]
 1562 0074 0233     		adds	r3, r3, #2
 1563 0076 9BB2     		uxth	r3, r3
 1564 0078 BB83     		strh	r3, [r7, #28]	@ movhi
 303:gfx.c         ****                 f     += ddF_x;
 1565              		.loc 1 303 0
 1566 007a FA8B     		ldrh	r2, [r7, #30]
 1567 007c BB8B     		ldrh	r3, [r7, #28]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 34


 1568 007e 1344     		add	r3, r3, r2
 1569 0080 9BB2     		uxth	r3, r3
 1570 0082 FB83     		strh	r3, [r7, #30]	@ movhi
 304:gfx.c         ****                 if (cornername & 0x4) {
 1571              		.loc 1 304 0
 1572 0084 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1573 0088 03F00403 		and	r3, r3, #4
 1574 008c 002B     		cmp	r3, #0
 1575 008e 1BD0     		beq	.L55
 305:gfx.c         ****                     GFXwritePixel(myGFX, x0 + x, y0 + y, color);
 1576              		.loc 1 305 0
 1577 0090 7A89     		ldrh	r2, [r7, #10]
 1578 0092 3B8B     		ldrh	r3, [r7, #24]
 1579 0094 1344     		add	r3, r3, r2
 1580 0096 9BB2     		uxth	r3, r3
 1581 0098 19B2     		sxth	r1, r3
 1582 009a 3A89     		ldrh	r2, [r7, #8]
 1583 009c FB8A     		ldrh	r3, [r7, #22]
 1584 009e 1344     		add	r3, r3, r2
 1585 00a0 9BB2     		uxth	r3, r3
 1586 00a2 1AB2     		sxth	r2, r3
 1587 00a4 BB8D     		ldrh	r3, [r7, #44]
 1588 00a6 F868     		ldr	r0, [r7, #12]
 1589 00a8 FFF7FEFF 		bl	GFXwritePixel
 306:gfx.c         ****                     GFXwritePixel(myGFX, x0 + y, y0 + x, color);
 1590              		.loc 1 306 0
 1591 00ac 7A89     		ldrh	r2, [r7, #10]
 1592 00ae FB8A     		ldrh	r3, [r7, #22]
 1593 00b0 1344     		add	r3, r3, r2
 1594 00b2 9BB2     		uxth	r3, r3
 1595 00b4 19B2     		sxth	r1, r3
 1596 00b6 3A89     		ldrh	r2, [r7, #8]
 1597 00b8 3B8B     		ldrh	r3, [r7, #24]
 1598 00ba 1344     		add	r3, r3, r2
 1599 00bc 9BB2     		uxth	r3, r3
 1600 00be 1AB2     		sxth	r2, r3
 1601 00c0 BB8D     		ldrh	r3, [r7, #44]
 1602 00c2 F868     		ldr	r0, [r7, #12]
 1603 00c4 FFF7FEFF 		bl	GFXwritePixel
 1604              	.L55:
 307:gfx.c         ****                 }
 308:gfx.c         ****                 if (cornername & 0x2) {
 1605              		.loc 1 308 0
 1606 00c8 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1607 00cc 03F00203 		and	r3, r3, #2
 1608 00d0 002B     		cmp	r3, #0
 1609 00d2 1BD0     		beq	.L56
 309:gfx.c         ****                     GFXwritePixel(myGFX, x0 + x, y0 - y, color);
 1610              		.loc 1 309 0
 1611 00d4 7A89     		ldrh	r2, [r7, #10]
 1612 00d6 3B8B     		ldrh	r3, [r7, #24]
 1613 00d8 1344     		add	r3, r3, r2
 1614 00da 9BB2     		uxth	r3, r3
 1615 00dc 19B2     		sxth	r1, r3
 1616 00de 3A89     		ldrh	r2, [r7, #8]
 1617 00e0 FB8A     		ldrh	r3, [r7, #22]
 1618 00e2 D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 35


 1619 00e4 9BB2     		uxth	r3, r3
 1620 00e6 1AB2     		sxth	r2, r3
 1621 00e8 BB8D     		ldrh	r3, [r7, #44]
 1622 00ea F868     		ldr	r0, [r7, #12]
 1623 00ec FFF7FEFF 		bl	GFXwritePixel
 310:gfx.c         ****                     GFXwritePixel(myGFX, x0 + y, y0 - x, color);
 1624              		.loc 1 310 0
 1625 00f0 7A89     		ldrh	r2, [r7, #10]
 1626 00f2 FB8A     		ldrh	r3, [r7, #22]
 1627 00f4 1344     		add	r3, r3, r2
 1628 00f6 9BB2     		uxth	r3, r3
 1629 00f8 19B2     		sxth	r1, r3
 1630 00fa 3A89     		ldrh	r2, [r7, #8]
 1631 00fc 3B8B     		ldrh	r3, [r7, #24]
 1632 00fe D31A     		subs	r3, r2, r3
 1633 0100 9BB2     		uxth	r3, r3
 1634 0102 1AB2     		sxth	r2, r3
 1635 0104 BB8D     		ldrh	r3, [r7, #44]
 1636 0106 F868     		ldr	r0, [r7, #12]
 1637 0108 FFF7FEFF 		bl	GFXwritePixel
 1638              	.L56:
 311:gfx.c         ****                 }
 312:gfx.c         ****                 if (cornername & 0x8) {
 1639              		.loc 1 312 0
 1640 010c 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1641 0110 03F00803 		and	r3, r3, #8
 1642 0114 002B     		cmp	r3, #0
 1643 0116 1BD0     		beq	.L57
 313:gfx.c         ****                     GFXwritePixel(myGFX, x0 - y, y0 + x, color);
 1644              		.loc 1 313 0
 1645 0118 7A89     		ldrh	r2, [r7, #10]
 1646 011a FB8A     		ldrh	r3, [r7, #22]
 1647 011c D31A     		subs	r3, r2, r3
 1648 011e 9BB2     		uxth	r3, r3
 1649 0120 19B2     		sxth	r1, r3
 1650 0122 3A89     		ldrh	r2, [r7, #8]
 1651 0124 3B8B     		ldrh	r3, [r7, #24]
 1652 0126 1344     		add	r3, r3, r2
 1653 0128 9BB2     		uxth	r3, r3
 1654 012a 1AB2     		sxth	r2, r3
 1655 012c BB8D     		ldrh	r3, [r7, #44]
 1656 012e F868     		ldr	r0, [r7, #12]
 1657 0130 FFF7FEFF 		bl	GFXwritePixel
 314:gfx.c         ****                     GFXwritePixel(myGFX, x0 - x, y0 + y, color);
 1658              		.loc 1 314 0
 1659 0134 7A89     		ldrh	r2, [r7, #10]
 1660 0136 3B8B     		ldrh	r3, [r7, #24]
 1661 0138 D31A     		subs	r3, r2, r3
 1662 013a 9BB2     		uxth	r3, r3
 1663 013c 19B2     		sxth	r1, r3
 1664 013e 3A89     		ldrh	r2, [r7, #8]
 1665 0140 FB8A     		ldrh	r3, [r7, #22]
 1666 0142 1344     		add	r3, r3, r2
 1667 0144 9BB2     		uxth	r3, r3
 1668 0146 1AB2     		sxth	r2, r3
 1669 0148 BB8D     		ldrh	r3, [r7, #44]
 1670 014a F868     		ldr	r0, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 36


 1671 014c FFF7FEFF 		bl	GFXwritePixel
 1672              	.L57:
 315:gfx.c         ****                 }
 316:gfx.c         ****                 if (cornername & 0x1) {
 1673              		.loc 1 316 0
 1674 0150 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1675 0154 03F00103 		and	r3, r3, #1
 1676 0158 002B     		cmp	r3, #0
 1677 015a 1BD0     		beq	.L53
 317:gfx.c         ****                     GFXwritePixel(myGFX, x0 - y, y0 - x, color);
 1678              		.loc 1 317 0
 1679 015c 7A89     		ldrh	r2, [r7, #10]
 1680 015e FB8A     		ldrh	r3, [r7, #22]
 1681 0160 D31A     		subs	r3, r2, r3
 1682 0162 9BB2     		uxth	r3, r3
 1683 0164 19B2     		sxth	r1, r3
 1684 0166 3A89     		ldrh	r2, [r7, #8]
 1685 0168 3B8B     		ldrh	r3, [r7, #24]
 1686 016a D31A     		subs	r3, r2, r3
 1687 016c 9BB2     		uxth	r3, r3
 1688 016e 1AB2     		sxth	r2, r3
 1689 0170 BB8D     		ldrh	r3, [r7, #44]
 1690 0172 F868     		ldr	r0, [r7, #12]
 1691 0174 FFF7FEFF 		bl	GFXwritePixel
 318:gfx.c         ****                     GFXwritePixel(myGFX, x0 - x, y0 - y, color);
 1692              		.loc 1 318 0
 1693 0178 7A89     		ldrh	r2, [r7, #10]
 1694 017a 3B8B     		ldrh	r3, [r7, #24]
 1695 017c D31A     		subs	r3, r2, r3
 1696 017e 9BB2     		uxth	r3, r3
 1697 0180 19B2     		sxth	r1, r3
 1698 0182 3A89     		ldrh	r2, [r7, #8]
 1699 0184 FB8A     		ldrh	r3, [r7, #22]
 1700 0186 D31A     		subs	r3, r2, r3
 1701 0188 9BB2     		uxth	r3, r3
 1702 018a 1AB2     		sxth	r2, r3
 1703 018c BB8D     		ldrh	r3, [r7, #44]
 1704 018e F868     		ldr	r0, [r7, #12]
 1705 0190 FFF7FEFF 		bl	GFXwritePixel
 1706              	.L53:
 295:gfx.c         ****                 if (f >= 0) {
 1707              		.loc 1 295 0
 1708 0194 B7F91820 		ldrsh	r2, [r7, #24]
 1709 0198 B7F91630 		ldrsh	r3, [r7, #22]
 1710 019c 9A42     		cmp	r2, r3
 1711 019e FFF64FAF 		blt	.L58
 319:gfx.c         ****                 }
 320:gfx.c         ****             }
 321:gfx.c         ****         }
 1712              		.loc 1 321 0
 1713 01a2 00BF     		nop
 1714 01a4 2037     		adds	r7, r7, #32
 1715              		.cfi_def_cfa_offset 8
 1716 01a6 BD46     		mov	sp, r7
 1717              		.cfi_def_cfa_register 13
 1718              		@ sp needed
 1719 01a8 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 37


 1720              		.cfi_endproc
 1721              	.LFE79:
 1722              		.size	GFXdrawCircleHelper, .-GFXdrawCircleHelper
 1723 01aa 00BF     		.section	.text.GFXfillCircle,"ax",%progbits
 1724              		.align	2
 1725              		.global	GFXfillCircle
 1726              		.thumb
 1727              		.thumb_func
 1728              		.type	GFXfillCircle, %function
 1729              	GFXfillCircle:
 1730              	.LFB80:
 322:gfx.c         ****         
 323:gfx.c         ****         void GFXfillCircle(GFX* myGFX, int16_t x0, int16_t y0, int16_t r,
 324:gfx.c         ****                            uint16_t color) {
 1731              		.loc 1 324 0
 1732              		.cfi_startproc
 1733              		@ args = 4, pretend = 0, frame = 16
 1734              		@ frame_needed = 1, uses_anonymous_args = 0
 1735 0000 80B5     		push	{r7, lr}
 1736              		.cfi_def_cfa_offset 8
 1737              		.cfi_offset 7, -8
 1738              		.cfi_offset 14, -4
 1739 0002 88B0     		sub	sp, sp, #32
 1740              		.cfi_def_cfa_offset 40
 1741 0004 04AF     		add	r7, sp, #16
 1742              		.cfi_def_cfa 7, 24
 1743 0006 F860     		str	r0, [r7, #12]
 1744 0008 0846     		mov	r0, r1
 1745 000a 1146     		mov	r1, r2
 1746 000c 1A46     		mov	r2, r3
 1747 000e 0346     		mov	r3, r0	@ movhi
 1748 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 1749 0012 0B46     		mov	r3, r1	@ movhi
 1750 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 1751 0016 1346     		mov	r3, r2	@ movhi
 1752 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 325:gfx.c         ****             
 326:gfx.c         ****             GFXwriteFastVLine(myGFX, x0, y0-r, 2*r+1, color);
 1753              		.loc 1 326 0
 1754 001a 3A89     		ldrh	r2, [r7, #8]
 1755 001c FB88     		ldrh	r3, [r7, #6]
 1756 001e D31A     		subs	r3, r2, r3
 1757 0020 9BB2     		uxth	r3, r3
 1758 0022 1AB2     		sxth	r2, r3
 1759 0024 FB88     		ldrh	r3, [r7, #6]
 1760 0026 5B00     		lsls	r3, r3, #1
 1761 0028 9BB2     		uxth	r3, r3
 1762 002a 0133     		adds	r3, r3, #1
 1763 002c 9BB2     		uxth	r3, r3
 1764 002e 18B2     		sxth	r0, r3
 1765 0030 B7F90A10 		ldrsh	r1, [r7, #10]
 1766 0034 3B8B     		ldrh	r3, [r7, #24]
 1767 0036 0093     		str	r3, [sp]
 1768 0038 0346     		mov	r3, r0
 1769 003a F868     		ldr	r0, [r7, #12]
 1770 003c FFF7FEFF 		bl	GFXwriteFastVLine
 327:gfx.c         ****             GFXfillCircleHelper(myGFX, x0, y0, r, 3, 0, color);
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 38


 1771              		.loc 1 327 0
 1772 0040 B7F90600 		ldrsh	r0, [r7, #6]
 1773 0044 B7F90820 		ldrsh	r2, [r7, #8]
 1774 0048 B7F90A10 		ldrsh	r1, [r7, #10]
 1775 004c 3B8B     		ldrh	r3, [r7, #24]
 1776 004e 0293     		str	r3, [sp, #8]
 1777 0050 0023     		movs	r3, #0
 1778 0052 0193     		str	r3, [sp, #4]
 1779 0054 0323     		movs	r3, #3
 1780 0056 0093     		str	r3, [sp]
 1781 0058 0346     		mov	r3, r0
 1782 005a F868     		ldr	r0, [r7, #12]
 1783 005c FFF7FEFF 		bl	GFXfillCircleHelper
 328:gfx.c         ****             
 329:gfx.c         ****         }
 1784              		.loc 1 329 0
 1785 0060 00BF     		nop
 1786 0062 1037     		adds	r7, r7, #16
 1787              		.cfi_def_cfa_offset 8
 1788 0064 BD46     		mov	sp, r7
 1789              		.cfi_def_cfa_register 13
 1790              		@ sp needed
 1791 0066 80BD     		pop	{r7, pc}
 1792              		.cfi_endproc
 1793              	.LFE80:
 1794              		.size	GFXfillCircle, .-GFXfillCircle
 1795              		.section	.text.GFXfillCircleHelper,"ax",%progbits
 1796              		.align	2
 1797              		.global	GFXfillCircleHelper
 1798              		.thumb
 1799              		.thumb_func
 1800              		.type	GFXfillCircleHelper, %function
 1801              	GFXfillCircleHelper:
 1802              	.LFB81:
 330:gfx.c         ****         
 331:gfx.c         ****         // Used to do circles and roundrects
 332:gfx.c         ****         void GFXfillCircleHelper(GFX* myGFX, int16_t x0, int16_t y0, int16_t r,
 333:gfx.c         ****                                  uint8_t cornername, int16_t delta, uint16_t color) {
 1803              		.loc 1 333 0
 1804              		.cfi_startproc
 1805              		@ args = 12, pretend = 0, frame = 32
 1806              		@ frame_needed = 1, uses_anonymous_args = 0
 1807 0000 80B5     		push	{r7, lr}
 1808              		.cfi_def_cfa_offset 8
 1809              		.cfi_offset 7, -8
 1810              		.cfi_offset 14, -4
 1811 0002 8AB0     		sub	sp, sp, #40
 1812              		.cfi_def_cfa_offset 48
 1813 0004 02AF     		add	r7, sp, #8
 1814              		.cfi_def_cfa 7, 40
 1815 0006 F860     		str	r0, [r7, #12]
 1816 0008 0846     		mov	r0, r1
 1817 000a 1146     		mov	r1, r2
 1818 000c 1A46     		mov	r2, r3
 1819 000e 0346     		mov	r3, r0	@ movhi
 1820 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 1821 0012 0B46     		mov	r3, r1	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 39


 1822 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 1823 0016 1346     		mov	r3, r2	@ movhi
 1824 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 334:gfx.c         ****             
 335:gfx.c         ****             int16_t f     = 1 - r;
 1825              		.loc 1 335 0
 1826 001a FB88     		ldrh	r3, [r7, #6]
 1827 001c C3F10103 		rsb	r3, r3, #1
 1828 0020 9BB2     		uxth	r3, r3
 1829 0022 FB83     		strh	r3, [r7, #30]	@ movhi
 336:gfx.c         ****             int16_t ddF_x = 1;
 1830              		.loc 1 336 0
 1831 0024 0123     		movs	r3, #1
 1832 0026 BB83     		strh	r3, [r7, #28]	@ movhi
 337:gfx.c         ****             int16_t ddF_y = -2 * r;
 1833              		.loc 1 337 0
 1834 0028 FB88     		ldrh	r3, [r7, #6]
 1835 002a 1A46     		mov	r2, r3	@ movhi
 1836 002c D203     		lsls	r2, r2, #15
 1837 002e D31A     		subs	r3, r2, r3
 1838 0030 5B00     		lsls	r3, r3, #1
 1839 0032 9BB2     		uxth	r3, r3
 1840 0034 7B83     		strh	r3, [r7, #26]	@ movhi
 338:gfx.c         ****             int16_t x     = 0;
 1841              		.loc 1 338 0
 1842 0036 0023     		movs	r3, #0
 1843 0038 3B83     		strh	r3, [r7, #24]	@ movhi
 339:gfx.c         ****             int16_t y     = r;
 1844              		.loc 1 339 0
 1845 003a FB88     		ldrh	r3, [r7, #6]	@ movhi
 1846 003c FB82     		strh	r3, [r7, #22]	@ movhi
 340:gfx.c         ****             
 341:gfx.c         ****             while (x<y) {
 1847              		.loc 1 341 0
 1848 003e 95E0     		b	.L61
 1849              	.L64:
 342:gfx.c         ****                 if (f >= 0) {
 1850              		.loc 1 342 0
 1851 0040 B7F91E30 		ldrsh	r3, [r7, #30]
 1852 0044 002B     		cmp	r3, #0
 1853 0046 0EDB     		blt	.L62
 343:gfx.c         ****                     y--;
 1854              		.loc 1 343 0
 1855 0048 B7F91630 		ldrsh	r3, [r7, #22]
 1856 004c 9BB2     		uxth	r3, r3
 1857 004e 013B     		subs	r3, r3, #1
 1858 0050 9BB2     		uxth	r3, r3
 1859 0052 FB82     		strh	r3, [r7, #22]	@ movhi
 344:gfx.c         ****                     ddF_y += 2;
 1860              		.loc 1 344 0
 1861 0054 7B8B     		ldrh	r3, [r7, #26]
 1862 0056 0233     		adds	r3, r3, #2
 1863 0058 9BB2     		uxth	r3, r3
 1864 005a 7B83     		strh	r3, [r7, #26]	@ movhi
 345:gfx.c         ****                     f     += ddF_y;
 1865              		.loc 1 345 0
 1866 005c FA8B     		ldrh	r2, [r7, #30]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 40


 1867 005e 7B8B     		ldrh	r3, [r7, #26]
 1868 0060 1344     		add	r3, r3, r2
 1869 0062 9BB2     		uxth	r3, r3
 1870 0064 FB83     		strh	r3, [r7, #30]	@ movhi
 1871              	.L62:
 346:gfx.c         ****                 }
 347:gfx.c         ****                 x++;
 1872              		.loc 1 347 0
 1873 0066 B7F91830 		ldrsh	r3, [r7, #24]
 1874 006a 9BB2     		uxth	r3, r3
 1875 006c 0133     		adds	r3, r3, #1
 1876 006e 9BB2     		uxth	r3, r3
 1877 0070 3B83     		strh	r3, [r7, #24]	@ movhi
 348:gfx.c         ****                 ddF_x += 2;
 1878              		.loc 1 348 0
 1879 0072 BB8B     		ldrh	r3, [r7, #28]
 1880 0074 0233     		adds	r3, r3, #2
 1881 0076 9BB2     		uxth	r3, r3
 1882 0078 BB83     		strh	r3, [r7, #28]	@ movhi
 349:gfx.c         ****                 f     += ddF_x;
 1883              		.loc 1 349 0
 1884 007a FA8B     		ldrh	r2, [r7, #30]
 1885 007c BB8B     		ldrh	r3, [r7, #28]
 1886 007e 1344     		add	r3, r3, r2
 1887 0080 9BB2     		uxth	r3, r3
 1888 0082 FB83     		strh	r3, [r7, #30]	@ movhi
 350:gfx.c         ****                 
 351:gfx.c         ****                 if (cornername & 0x1) {
 1889              		.loc 1 351 0
 1890 0084 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1891 0088 03F00103 		and	r3, r3, #1
 1892 008c 002B     		cmp	r3, #0
 1893 008e 33D0     		beq	.L63
 352:gfx.c         ****                     GFXwriteFastVLine(myGFX, x0+x, y0-y, 2*y+1+delta, color);
 1894              		.loc 1 352 0
 1895 0090 7A89     		ldrh	r2, [r7, #10]
 1896 0092 3B8B     		ldrh	r3, [r7, #24]
 1897 0094 1344     		add	r3, r3, r2
 1898 0096 9BB2     		uxth	r3, r3
 1899 0098 19B2     		sxth	r1, r3
 1900 009a 3A89     		ldrh	r2, [r7, #8]
 1901 009c FB8A     		ldrh	r3, [r7, #22]
 1902 009e D31A     		subs	r3, r2, r3
 1903 00a0 9BB2     		uxth	r3, r3
 1904 00a2 18B2     		sxth	r0, r3
 1905 00a4 FB8A     		ldrh	r3, [r7, #22]
 1906 00a6 5B00     		lsls	r3, r3, #1
 1907 00a8 9AB2     		uxth	r2, r3
 1908 00aa BB8D     		ldrh	r3, [r7, #44]
 1909 00ac 1344     		add	r3, r3, r2
 1910 00ae 9BB2     		uxth	r3, r3
 1911 00b0 0133     		adds	r3, r3, #1
 1912 00b2 9BB2     		uxth	r3, r3
 1913 00b4 1AB2     		sxth	r2, r3
 1914 00b6 3B8E     		ldrh	r3, [r7, #48]
 1915 00b8 0093     		str	r3, [sp]
 1916 00ba 1346     		mov	r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 41


 1917 00bc 0246     		mov	r2, r0
 1918 00be F868     		ldr	r0, [r7, #12]
 1919 00c0 FFF7FEFF 		bl	GFXwriteFastVLine
 353:gfx.c         ****                     GFXwriteFastVLine(myGFX, x0+y, y0-x, 2*x+1+delta, color);
 1920              		.loc 1 353 0
 1921 00c4 7A89     		ldrh	r2, [r7, #10]
 1922 00c6 FB8A     		ldrh	r3, [r7, #22]
 1923 00c8 1344     		add	r3, r3, r2
 1924 00ca 9BB2     		uxth	r3, r3
 1925 00cc 19B2     		sxth	r1, r3
 1926 00ce 3A89     		ldrh	r2, [r7, #8]
 1927 00d0 3B8B     		ldrh	r3, [r7, #24]
 1928 00d2 D31A     		subs	r3, r2, r3
 1929 00d4 9BB2     		uxth	r3, r3
 1930 00d6 18B2     		sxth	r0, r3
 1931 00d8 3B8B     		ldrh	r3, [r7, #24]
 1932 00da 5B00     		lsls	r3, r3, #1
 1933 00dc 9AB2     		uxth	r2, r3
 1934 00de BB8D     		ldrh	r3, [r7, #44]
 1935 00e0 1344     		add	r3, r3, r2
 1936 00e2 9BB2     		uxth	r3, r3
 1937 00e4 0133     		adds	r3, r3, #1
 1938 00e6 9BB2     		uxth	r3, r3
 1939 00e8 1AB2     		sxth	r2, r3
 1940 00ea 3B8E     		ldrh	r3, [r7, #48]
 1941 00ec 0093     		str	r3, [sp]
 1942 00ee 1346     		mov	r3, r2
 1943 00f0 0246     		mov	r2, r0
 1944 00f2 F868     		ldr	r0, [r7, #12]
 1945 00f4 FFF7FEFF 		bl	GFXwriteFastVLine
 1946              	.L63:
 354:gfx.c         ****                 }
 355:gfx.c         ****                 if (cornername & 0x2) {
 1947              		.loc 1 355 0
 1948 00f8 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 1949 00fc 03F00203 		and	r3, r3, #2
 1950 0100 002B     		cmp	r3, #0
 1951 0102 33D0     		beq	.L61
 356:gfx.c         ****                     GFXwriteFastVLine(myGFX, x0-x, y0-y, 2*y+1+delta, color);
 1952              		.loc 1 356 0
 1953 0104 7A89     		ldrh	r2, [r7, #10]
 1954 0106 3B8B     		ldrh	r3, [r7, #24]
 1955 0108 D31A     		subs	r3, r2, r3
 1956 010a 9BB2     		uxth	r3, r3
 1957 010c 19B2     		sxth	r1, r3
 1958 010e 3A89     		ldrh	r2, [r7, #8]
 1959 0110 FB8A     		ldrh	r3, [r7, #22]
 1960 0112 D31A     		subs	r3, r2, r3
 1961 0114 9BB2     		uxth	r3, r3
 1962 0116 18B2     		sxth	r0, r3
 1963 0118 FB8A     		ldrh	r3, [r7, #22]
 1964 011a 5B00     		lsls	r3, r3, #1
 1965 011c 9AB2     		uxth	r2, r3
 1966 011e BB8D     		ldrh	r3, [r7, #44]
 1967 0120 1344     		add	r3, r3, r2
 1968 0122 9BB2     		uxth	r3, r3
 1969 0124 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 42


 1970 0126 9BB2     		uxth	r3, r3
 1971 0128 1AB2     		sxth	r2, r3
 1972 012a 3B8E     		ldrh	r3, [r7, #48]
 1973 012c 0093     		str	r3, [sp]
 1974 012e 1346     		mov	r3, r2
 1975 0130 0246     		mov	r2, r0
 1976 0132 F868     		ldr	r0, [r7, #12]
 1977 0134 FFF7FEFF 		bl	GFXwriteFastVLine
 357:gfx.c         ****                     GFXwriteFastVLine(myGFX, x0-y, y0-x, 2*x+1+delta, color);
 1978              		.loc 1 357 0
 1979 0138 7A89     		ldrh	r2, [r7, #10]
 1980 013a FB8A     		ldrh	r3, [r7, #22]
 1981 013c D31A     		subs	r3, r2, r3
 1982 013e 9BB2     		uxth	r3, r3
 1983 0140 19B2     		sxth	r1, r3
 1984 0142 3A89     		ldrh	r2, [r7, #8]
 1985 0144 3B8B     		ldrh	r3, [r7, #24]
 1986 0146 D31A     		subs	r3, r2, r3
 1987 0148 9BB2     		uxth	r3, r3
 1988 014a 18B2     		sxth	r0, r3
 1989 014c 3B8B     		ldrh	r3, [r7, #24]
 1990 014e 5B00     		lsls	r3, r3, #1
 1991 0150 9AB2     		uxth	r2, r3
 1992 0152 BB8D     		ldrh	r3, [r7, #44]
 1993 0154 1344     		add	r3, r3, r2
 1994 0156 9BB2     		uxth	r3, r3
 1995 0158 0133     		adds	r3, r3, #1
 1996 015a 9BB2     		uxth	r3, r3
 1997 015c 1AB2     		sxth	r2, r3
 1998 015e 3B8E     		ldrh	r3, [r7, #48]
 1999 0160 0093     		str	r3, [sp]
 2000 0162 1346     		mov	r3, r2
 2001 0164 0246     		mov	r2, r0
 2002 0166 F868     		ldr	r0, [r7, #12]
 2003 0168 FFF7FEFF 		bl	GFXwriteFastVLine
 2004              	.L61:
 341:gfx.c         ****                 if (f >= 0) {
 2005              		.loc 1 341 0
 2006 016c B7F91820 		ldrsh	r2, [r7, #24]
 2007 0170 B7F91630 		ldrsh	r3, [r7, #22]
 2008 0174 9A42     		cmp	r2, r3
 2009 0176 FFF663AF 		blt	.L64
 358:gfx.c         ****                 }
 359:gfx.c         ****             }
 360:gfx.c         ****         }
 2010              		.loc 1 360 0
 2011 017a 00BF     		nop
 2012 017c 2037     		adds	r7, r7, #32
 2013              		.cfi_def_cfa_offset 8
 2014 017e BD46     		mov	sp, r7
 2015              		.cfi_def_cfa_register 13
 2016              		@ sp needed
 2017 0180 80BD     		pop	{r7, pc}
 2018              		.cfi_endproc
 2019              	.LFE81:
 2020              		.size	GFXfillCircleHelper, .-GFXfillCircleHelper
 2021 0182 00BF     		.section	.text.GFXdrawRect,"ax",%progbits
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 43


 2022              		.align	2
 2023              		.global	GFXdrawRect
 2024              		.thumb
 2025              		.thumb_func
 2026              		.type	GFXdrawRect, %function
 2027              	GFXdrawRect:
 2028              	.LFB82:
 361:gfx.c         ****         
 362:gfx.c         ****         // Draw a rectangle
 363:gfx.c         ****         void GFXdrawRect(GFX* myGFX, int16_t x, int16_t y, int16_t w, int16_t h,
 364:gfx.c         ****                          uint16_t color) {
 2029              		.loc 1 364 0
 2030              		.cfi_startproc
 2031              		@ args = 8, pretend = 0, frame = 16
 2032              		@ frame_needed = 1, uses_anonymous_args = 0
 2033 0000 80B5     		push	{r7, lr}
 2034              		.cfi_def_cfa_offset 8
 2035              		.cfi_offset 7, -8
 2036              		.cfi_offset 14, -4
 2037 0002 86B0     		sub	sp, sp, #24
 2038              		.cfi_def_cfa_offset 32
 2039 0004 02AF     		add	r7, sp, #8
 2040              		.cfi_def_cfa 7, 24
 2041 0006 F860     		str	r0, [r7, #12]
 2042 0008 0846     		mov	r0, r1
 2043 000a 1146     		mov	r1, r2
 2044 000c 1A46     		mov	r2, r3
 2045 000e 0346     		mov	r3, r0	@ movhi
 2046 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 2047 0012 0B46     		mov	r3, r1	@ movhi
 2048 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 2049 0016 1346     		mov	r3, r2	@ movhi
 2050 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 365:gfx.c         ****             
 366:gfx.c         ****             GFXwriteFastHLine(myGFX, x, y, w, color);
 2051              		.loc 1 366 0
 2052 001a B7F90600 		ldrsh	r0, [r7, #6]
 2053 001e B7F90820 		ldrsh	r2, [r7, #8]
 2054 0022 B7F90A10 		ldrsh	r1, [r7, #10]
 2055 0026 BB8B     		ldrh	r3, [r7, #28]
 2056 0028 0093     		str	r3, [sp]
 2057 002a 0346     		mov	r3, r0
 2058 002c F868     		ldr	r0, [r7, #12]
 2059 002e FFF7FEFF 		bl	GFXwriteFastHLine
 367:gfx.c         ****             GFXwriteFastHLine(myGFX, x, y+h-1, w, color);
 2060              		.loc 1 367 0
 2061 0032 3A89     		ldrh	r2, [r7, #8]
 2062 0034 3B8B     		ldrh	r3, [r7, #24]
 2063 0036 1344     		add	r3, r3, r2
 2064 0038 9BB2     		uxth	r3, r3
 2065 003a 013B     		subs	r3, r3, #1
 2066 003c 9BB2     		uxth	r3, r3
 2067 003e 1AB2     		sxth	r2, r3
 2068 0040 B7F90600 		ldrsh	r0, [r7, #6]
 2069 0044 B7F90A10 		ldrsh	r1, [r7, #10]
 2070 0048 BB8B     		ldrh	r3, [r7, #28]
 2071 004a 0093     		str	r3, [sp]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 44


 2072 004c 0346     		mov	r3, r0
 2073 004e F868     		ldr	r0, [r7, #12]
 2074 0050 FFF7FEFF 		bl	GFXwriteFastHLine
 368:gfx.c         ****             GFXwriteFastVLine(myGFX, x, y, h, color);
 2075              		.loc 1 368 0
 2076 0054 B7F91800 		ldrsh	r0, [r7, #24]
 2077 0058 B7F90820 		ldrsh	r2, [r7, #8]
 2078 005c B7F90A10 		ldrsh	r1, [r7, #10]
 2079 0060 BB8B     		ldrh	r3, [r7, #28]
 2080 0062 0093     		str	r3, [sp]
 2081 0064 0346     		mov	r3, r0
 2082 0066 F868     		ldr	r0, [r7, #12]
 2083 0068 FFF7FEFF 		bl	GFXwriteFastVLine
 369:gfx.c         ****             GFXwriteFastVLine(myGFX, x+w-1, y, h, color);
 2084              		.loc 1 369 0
 2085 006c 7A89     		ldrh	r2, [r7, #10]
 2086 006e FB88     		ldrh	r3, [r7, #6]
 2087 0070 1344     		add	r3, r3, r2
 2088 0072 9BB2     		uxth	r3, r3
 2089 0074 013B     		subs	r3, r3, #1
 2090 0076 9BB2     		uxth	r3, r3
 2091 0078 19B2     		sxth	r1, r3
 2092 007a B7F91800 		ldrsh	r0, [r7, #24]
 2093 007e B7F90820 		ldrsh	r2, [r7, #8]
 2094 0082 BB8B     		ldrh	r3, [r7, #28]
 2095 0084 0093     		str	r3, [sp]
 2096 0086 0346     		mov	r3, r0
 2097 0088 F868     		ldr	r0, [r7, #12]
 2098 008a FFF7FEFF 		bl	GFXwriteFastVLine
 370:gfx.c         ****             
 371:gfx.c         ****         }
 2099              		.loc 1 371 0
 2100 008e 00BF     		nop
 2101 0090 1037     		adds	r7, r7, #16
 2102              		.cfi_def_cfa_offset 8
 2103 0092 BD46     		mov	sp, r7
 2104              		.cfi_def_cfa_register 13
 2105              		@ sp needed
 2106 0094 80BD     		pop	{r7, pc}
 2107              		.cfi_endproc
 2108              	.LFE82:
 2109              		.size	GFXdrawRect, .-GFXdrawRect
 2110 0096 00BF     		.section	.text.GFXdrawRoundRect,"ax",%progbits
 2111              		.align	2
 2112              		.global	GFXdrawRoundRect
 2113              		.thumb
 2114              		.thumb_func
 2115              		.type	GFXdrawRoundRect, %function
 2116              	GFXdrawRoundRect:
 2117              	.LFB83:
 372:gfx.c         ****         
 373:gfx.c         ****         // Draw a rounded rectangle
 374:gfx.c         ****         void GFXdrawRoundRect(GFX* myGFX, int16_t x, int16_t y, int16_t w,
 375:gfx.c         ****                               int16_t h, int16_t r, uint16_t color) {
 2118              		.loc 1 375 0
 2119              		.cfi_startproc
 2120              		@ args = 12, pretend = 0, frame = 16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 45


 2121              		@ frame_needed = 1, uses_anonymous_args = 0
 2122 0000 80B5     		push	{r7, lr}
 2123              		.cfi_def_cfa_offset 8
 2124              		.cfi_offset 7, -8
 2125              		.cfi_offset 14, -4
 2126 0002 86B0     		sub	sp, sp, #24
 2127              		.cfi_def_cfa_offset 32
 2128 0004 02AF     		add	r7, sp, #8
 2129              		.cfi_def_cfa 7, 24
 2130 0006 F860     		str	r0, [r7, #12]
 2131 0008 0846     		mov	r0, r1
 2132 000a 1146     		mov	r1, r2
 2133 000c 1A46     		mov	r2, r3
 2134 000e 0346     		mov	r3, r0	@ movhi
 2135 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 2136 0012 0B46     		mov	r3, r1	@ movhi
 2137 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 2138 0016 1346     		mov	r3, r2	@ movhi
 2139 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 376:gfx.c         ****             // smarter version
 377:gfx.c         ****             GFXwriteFastHLine(myGFX, x+r  , y    , w-2*r, color); // Top
 2140              		.loc 1 377 0
 2141 001a 7A89     		ldrh	r2, [r7, #10]
 2142 001c BB8B     		ldrh	r3, [r7, #28]
 2143 001e 1344     		add	r3, r3, r2
 2144 0020 9BB2     		uxth	r3, r3
 2145 0022 19B2     		sxth	r1, r3
 2146 0024 FA88     		ldrh	r2, [r7, #6]
 2147 0026 BB8B     		ldrh	r3, [r7, #28]
 2148 0028 5B00     		lsls	r3, r3, #1
 2149 002a 9BB2     		uxth	r3, r3
 2150 002c D31A     		subs	r3, r2, r3
 2151 002e 9BB2     		uxth	r3, r3
 2152 0030 18B2     		sxth	r0, r3
 2153 0032 B7F90820 		ldrsh	r2, [r7, #8]
 2154 0036 3B8C     		ldrh	r3, [r7, #32]
 2155 0038 0093     		str	r3, [sp]
 2156 003a 0346     		mov	r3, r0
 2157 003c F868     		ldr	r0, [r7, #12]
 2158 003e FFF7FEFF 		bl	GFXwriteFastHLine
 378:gfx.c         ****             GFXwriteFastHLine(myGFX, x+r  , y+h-1, w-2*r, color); // Bottom
 2159              		.loc 1 378 0
 2160 0042 7A89     		ldrh	r2, [r7, #10]
 2161 0044 BB8B     		ldrh	r3, [r7, #28]
 2162 0046 1344     		add	r3, r3, r2
 2163 0048 9BB2     		uxth	r3, r3
 2164 004a 19B2     		sxth	r1, r3
 2165 004c 3A89     		ldrh	r2, [r7, #8]
 2166 004e 3B8B     		ldrh	r3, [r7, #24]
 2167 0050 1344     		add	r3, r3, r2
 2168 0052 9BB2     		uxth	r3, r3
 2169 0054 013B     		subs	r3, r3, #1
 2170 0056 9BB2     		uxth	r3, r3
 2171 0058 18B2     		sxth	r0, r3
 2172 005a FA88     		ldrh	r2, [r7, #6]
 2173 005c BB8B     		ldrh	r3, [r7, #28]
 2174 005e 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 46


 2175 0060 9BB2     		uxth	r3, r3
 2176 0062 D31A     		subs	r3, r2, r3
 2177 0064 9BB2     		uxth	r3, r3
 2178 0066 1AB2     		sxth	r2, r3
 2179 0068 3B8C     		ldrh	r3, [r7, #32]
 2180 006a 0093     		str	r3, [sp]
 2181 006c 1346     		mov	r3, r2
 2182 006e 0246     		mov	r2, r0
 2183 0070 F868     		ldr	r0, [r7, #12]
 2184 0072 FFF7FEFF 		bl	GFXwriteFastHLine
 379:gfx.c         ****             GFXwriteFastVLine(myGFX, x    , y+r  , h-2*r, color); // Left
 2185              		.loc 1 379 0
 2186 0076 3A89     		ldrh	r2, [r7, #8]
 2187 0078 BB8B     		ldrh	r3, [r7, #28]
 2188 007a 1344     		add	r3, r3, r2
 2189 007c 9BB2     		uxth	r3, r3
 2190 007e 18B2     		sxth	r0, r3
 2191 0080 3A8B     		ldrh	r2, [r7, #24]
 2192 0082 BB8B     		ldrh	r3, [r7, #28]
 2193 0084 5B00     		lsls	r3, r3, #1
 2194 0086 9BB2     		uxth	r3, r3
 2195 0088 D31A     		subs	r3, r2, r3
 2196 008a 9BB2     		uxth	r3, r3
 2197 008c 1AB2     		sxth	r2, r3
 2198 008e B7F90A10 		ldrsh	r1, [r7, #10]
 2199 0092 3B8C     		ldrh	r3, [r7, #32]
 2200 0094 0093     		str	r3, [sp]
 2201 0096 1346     		mov	r3, r2
 2202 0098 0246     		mov	r2, r0
 2203 009a F868     		ldr	r0, [r7, #12]
 2204 009c FFF7FEFF 		bl	GFXwriteFastVLine
 380:gfx.c         ****             GFXwriteFastVLine(myGFX, x+w-1, y+r  , h-2*r, color); // Right
 2205              		.loc 1 380 0
 2206 00a0 7A89     		ldrh	r2, [r7, #10]
 2207 00a2 FB88     		ldrh	r3, [r7, #6]
 2208 00a4 1344     		add	r3, r3, r2
 2209 00a6 9BB2     		uxth	r3, r3
 2210 00a8 013B     		subs	r3, r3, #1
 2211 00aa 9BB2     		uxth	r3, r3
 2212 00ac 19B2     		sxth	r1, r3
 2213 00ae 3A89     		ldrh	r2, [r7, #8]
 2214 00b0 BB8B     		ldrh	r3, [r7, #28]
 2215 00b2 1344     		add	r3, r3, r2
 2216 00b4 9BB2     		uxth	r3, r3
 2217 00b6 18B2     		sxth	r0, r3
 2218 00b8 3A8B     		ldrh	r2, [r7, #24]
 2219 00ba BB8B     		ldrh	r3, [r7, #28]
 2220 00bc 5B00     		lsls	r3, r3, #1
 2221 00be 9BB2     		uxth	r3, r3
 2222 00c0 D31A     		subs	r3, r2, r3
 2223 00c2 9BB2     		uxth	r3, r3
 2224 00c4 1AB2     		sxth	r2, r3
 2225 00c6 3B8C     		ldrh	r3, [r7, #32]
 2226 00c8 0093     		str	r3, [sp]
 2227 00ca 1346     		mov	r3, r2
 2228 00cc 0246     		mov	r2, r0
 2229 00ce F868     		ldr	r0, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 47


 2230 00d0 FFF7FEFF 		bl	GFXwriteFastVLine
 381:gfx.c         ****             // draw four corners
 382:gfx.c         ****             GFXdrawCircleHelper(myGFX, x+r    , y+r    , r, 1, color);
 2231              		.loc 1 382 0
 2232 00d4 7A89     		ldrh	r2, [r7, #10]
 2233 00d6 BB8B     		ldrh	r3, [r7, #28]
 2234 00d8 1344     		add	r3, r3, r2
 2235 00da 9BB2     		uxth	r3, r3
 2236 00dc 19B2     		sxth	r1, r3
 2237 00de 3A89     		ldrh	r2, [r7, #8]
 2238 00e0 BB8B     		ldrh	r3, [r7, #28]
 2239 00e2 1344     		add	r3, r3, r2
 2240 00e4 9BB2     		uxth	r3, r3
 2241 00e6 1AB2     		sxth	r2, r3
 2242 00e8 B7F91C00 		ldrsh	r0, [r7, #28]
 2243 00ec 3B8C     		ldrh	r3, [r7, #32]
 2244 00ee 0193     		str	r3, [sp, #4]
 2245 00f0 0123     		movs	r3, #1
 2246 00f2 0093     		str	r3, [sp]
 2247 00f4 0346     		mov	r3, r0
 2248 00f6 F868     		ldr	r0, [r7, #12]
 2249 00f8 FFF7FEFF 		bl	GFXdrawCircleHelper
 383:gfx.c         ****             GFXdrawCircleHelper(myGFX, x+w-r-1, y+r    , r, 2, color);
 2250              		.loc 1 383 0
 2251 00fc 7A89     		ldrh	r2, [r7, #10]
 2252 00fe FB88     		ldrh	r3, [r7, #6]
 2253 0100 1344     		add	r3, r3, r2
 2254 0102 9AB2     		uxth	r2, r3
 2255 0104 BB8B     		ldrh	r3, [r7, #28]
 2256 0106 D31A     		subs	r3, r2, r3
 2257 0108 9BB2     		uxth	r3, r3
 2258 010a 013B     		subs	r3, r3, #1
 2259 010c 9BB2     		uxth	r3, r3
 2260 010e 19B2     		sxth	r1, r3
 2261 0110 3A89     		ldrh	r2, [r7, #8]
 2262 0112 BB8B     		ldrh	r3, [r7, #28]
 2263 0114 1344     		add	r3, r3, r2
 2264 0116 9BB2     		uxth	r3, r3
 2265 0118 1AB2     		sxth	r2, r3
 2266 011a B7F91C00 		ldrsh	r0, [r7, #28]
 2267 011e 3B8C     		ldrh	r3, [r7, #32]
 2268 0120 0193     		str	r3, [sp, #4]
 2269 0122 0223     		movs	r3, #2
 2270 0124 0093     		str	r3, [sp]
 2271 0126 0346     		mov	r3, r0
 2272 0128 F868     		ldr	r0, [r7, #12]
 2273 012a FFF7FEFF 		bl	GFXdrawCircleHelper
 384:gfx.c         ****             GFXdrawCircleHelper(myGFX, x+w-r-1, y+h-r-1, r, 4, color);
 2274              		.loc 1 384 0
 2275 012e 7A89     		ldrh	r2, [r7, #10]
 2276 0130 FB88     		ldrh	r3, [r7, #6]
 2277 0132 1344     		add	r3, r3, r2
 2278 0134 9AB2     		uxth	r2, r3
 2279 0136 BB8B     		ldrh	r3, [r7, #28]
 2280 0138 D31A     		subs	r3, r2, r3
 2281 013a 9BB2     		uxth	r3, r3
 2282 013c 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 48


 2283 013e 9BB2     		uxth	r3, r3
 2284 0140 19B2     		sxth	r1, r3
 2285 0142 3A89     		ldrh	r2, [r7, #8]
 2286 0144 3B8B     		ldrh	r3, [r7, #24]
 2287 0146 1344     		add	r3, r3, r2
 2288 0148 9AB2     		uxth	r2, r3
 2289 014a BB8B     		ldrh	r3, [r7, #28]
 2290 014c D31A     		subs	r3, r2, r3
 2291 014e 9BB2     		uxth	r3, r3
 2292 0150 013B     		subs	r3, r3, #1
 2293 0152 9BB2     		uxth	r3, r3
 2294 0154 1AB2     		sxth	r2, r3
 2295 0156 B7F91C00 		ldrsh	r0, [r7, #28]
 2296 015a 3B8C     		ldrh	r3, [r7, #32]
 2297 015c 0193     		str	r3, [sp, #4]
 2298 015e 0423     		movs	r3, #4
 2299 0160 0093     		str	r3, [sp]
 2300 0162 0346     		mov	r3, r0
 2301 0164 F868     		ldr	r0, [r7, #12]
 2302 0166 FFF7FEFF 		bl	GFXdrawCircleHelper
 385:gfx.c         ****             GFXdrawCircleHelper(myGFX, x+r    , y+h-r-1, r, 8, color);
 2303              		.loc 1 385 0
 2304 016a 7A89     		ldrh	r2, [r7, #10]
 2305 016c BB8B     		ldrh	r3, [r7, #28]
 2306 016e 1344     		add	r3, r3, r2
 2307 0170 9BB2     		uxth	r3, r3
 2308 0172 19B2     		sxth	r1, r3
 2309 0174 3A89     		ldrh	r2, [r7, #8]
 2310 0176 3B8B     		ldrh	r3, [r7, #24]
 2311 0178 1344     		add	r3, r3, r2
 2312 017a 9AB2     		uxth	r2, r3
 2313 017c BB8B     		ldrh	r3, [r7, #28]
 2314 017e D31A     		subs	r3, r2, r3
 2315 0180 9BB2     		uxth	r3, r3
 2316 0182 013B     		subs	r3, r3, #1
 2317 0184 9BB2     		uxth	r3, r3
 2318 0186 1AB2     		sxth	r2, r3
 2319 0188 B7F91C00 		ldrsh	r0, [r7, #28]
 2320 018c 3B8C     		ldrh	r3, [r7, #32]
 2321 018e 0193     		str	r3, [sp, #4]
 2322 0190 0823     		movs	r3, #8
 2323 0192 0093     		str	r3, [sp]
 2324 0194 0346     		mov	r3, r0
 2325 0196 F868     		ldr	r0, [r7, #12]
 2326 0198 FFF7FEFF 		bl	GFXdrawCircleHelper
 386:gfx.c         ****             
 387:gfx.c         ****         }
 2327              		.loc 1 387 0
 2328 019c 00BF     		nop
 2329 019e 1037     		adds	r7, r7, #16
 2330              		.cfi_def_cfa_offset 8
 2331 01a0 BD46     		mov	sp, r7
 2332              		.cfi_def_cfa_register 13
 2333              		@ sp needed
 2334 01a2 80BD     		pop	{r7, pc}
 2335              		.cfi_endproc
 2336              	.LFE83:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 49


 2337              		.size	GFXdrawRoundRect, .-GFXdrawRoundRect
 2338              		.section	.text.GFXfillRoundRect,"ax",%progbits
 2339              		.align	2
 2340              		.global	GFXfillRoundRect
 2341              		.thumb
 2342              		.thumb_func
 2343              		.type	GFXfillRoundRect, %function
 2344              	GFXfillRoundRect:
 2345              	.LFB84:
 388:gfx.c         ****         
 389:gfx.c         ****         // Fill a rounded rectangle
 390:gfx.c         ****         void GFXfillRoundRect(GFX* myGFX, int16_t x, int16_t y, int16_t w,
 391:gfx.c         ****                               int16_t h, int16_t r, uint16_t color) {
 2346              		.loc 1 391 0
 2347              		.cfi_startproc
 2348              		@ args = 12, pretend = 0, frame = 16
 2349              		@ frame_needed = 1, uses_anonymous_args = 0
 2350 0000 90B5     		push	{r4, r7, lr}
 2351              		.cfi_def_cfa_offset 12
 2352              		.cfi_offset 4, -12
 2353              		.cfi_offset 7, -8
 2354              		.cfi_offset 14, -4
 2355 0002 89B0     		sub	sp, sp, #36
 2356              		.cfi_def_cfa_offset 48
 2357 0004 04AF     		add	r7, sp, #16
 2358              		.cfi_def_cfa 7, 32
 2359 0006 F860     		str	r0, [r7, #12]
 2360 0008 0846     		mov	r0, r1
 2361 000a 1146     		mov	r1, r2
 2362 000c 1A46     		mov	r2, r3
 2363 000e 0346     		mov	r3, r0	@ movhi
 2364 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 2365 0012 0B46     		mov	r3, r1	@ movhi
 2366 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 2367 0016 1346     		mov	r3, r2	@ movhi
 2368 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 392:gfx.c         ****             // smarter version
 393:gfx.c         ****             GFXwriteFillRect(myGFX, x+r, y, w-2*r, h, color);
 2369              		.loc 1 393 0
 2370 001a 7A89     		ldrh	r2, [r7, #10]
 2371 001c BB8C     		ldrh	r3, [r7, #36]
 2372 001e 1344     		add	r3, r3, r2
 2373 0020 9BB2     		uxth	r3, r3
 2374 0022 19B2     		sxth	r1, r3
 2375 0024 FA88     		ldrh	r2, [r7, #6]
 2376 0026 BB8C     		ldrh	r3, [r7, #36]
 2377 0028 5B00     		lsls	r3, r3, #1
 2378 002a 9BB2     		uxth	r3, r3
 2379 002c D31A     		subs	r3, r2, r3
 2380 002e 9BB2     		uxth	r3, r3
 2381 0030 18B2     		sxth	r0, r3
 2382 0032 B7F90820 		ldrsh	r2, [r7, #8]
 2383 0036 3B8D     		ldrh	r3, [r7, #40]
 2384 0038 0193     		str	r3, [sp, #4]
 2385 003a B7F92030 		ldrsh	r3, [r7, #32]
 2386 003e 0093     		str	r3, [sp]
 2387 0040 0346     		mov	r3, r0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 50


 2388 0042 F868     		ldr	r0, [r7, #12]
 2389 0044 FFF7FEFF 		bl	GFXwriteFillRect
 394:gfx.c         ****             // draw four corners
 395:gfx.c         ****             GFXfillCircleHelper(myGFX, x+w-r-1, y+r, r, 1, h-2*r-1, color);
 2390              		.loc 1 395 0
 2391 0048 7A89     		ldrh	r2, [r7, #10]
 2392 004a FB88     		ldrh	r3, [r7, #6]
 2393 004c 1344     		add	r3, r3, r2
 2394 004e 9AB2     		uxth	r2, r3
 2395 0050 BB8C     		ldrh	r3, [r7, #36]
 2396 0052 D31A     		subs	r3, r2, r3
 2397 0054 9BB2     		uxth	r3, r3
 2398 0056 013B     		subs	r3, r3, #1
 2399 0058 9BB2     		uxth	r3, r3
 2400 005a 19B2     		sxth	r1, r3
 2401 005c 3A89     		ldrh	r2, [r7, #8]
 2402 005e BB8C     		ldrh	r3, [r7, #36]
 2403 0060 1344     		add	r3, r3, r2
 2404 0062 9BB2     		uxth	r3, r3
 2405 0064 18B2     		sxth	r0, r3
 2406 0066 3A8C     		ldrh	r2, [r7, #32]
 2407 0068 BB8C     		ldrh	r3, [r7, #36]
 2408 006a 5B00     		lsls	r3, r3, #1
 2409 006c 9BB2     		uxth	r3, r3
 2410 006e D31A     		subs	r3, r2, r3
 2411 0070 9BB2     		uxth	r3, r3
 2412 0072 013B     		subs	r3, r3, #1
 2413 0074 9BB2     		uxth	r3, r3
 2414 0076 1BB2     		sxth	r3, r3
 2415 0078 B7F92440 		ldrsh	r4, [r7, #36]
 2416 007c 3A8D     		ldrh	r2, [r7, #40]
 2417 007e 0292     		str	r2, [sp, #8]
 2418 0080 0193     		str	r3, [sp, #4]
 2419 0082 0123     		movs	r3, #1
 2420 0084 0093     		str	r3, [sp]
 2421 0086 2346     		mov	r3, r4
 2422 0088 0246     		mov	r2, r0
 2423 008a F868     		ldr	r0, [r7, #12]
 2424 008c FFF7FEFF 		bl	GFXfillCircleHelper
 396:gfx.c         ****             GFXfillCircleHelper(myGFX, x+r    , y+r, r, 2, h-2*r-1, color);
 2425              		.loc 1 396 0
 2426 0090 7A89     		ldrh	r2, [r7, #10]
 2427 0092 BB8C     		ldrh	r3, [r7, #36]
 2428 0094 1344     		add	r3, r3, r2
 2429 0096 9BB2     		uxth	r3, r3
 2430 0098 19B2     		sxth	r1, r3
 2431 009a 3A89     		ldrh	r2, [r7, #8]
 2432 009c BB8C     		ldrh	r3, [r7, #36]
 2433 009e 1344     		add	r3, r3, r2
 2434 00a0 9BB2     		uxth	r3, r3
 2435 00a2 18B2     		sxth	r0, r3
 2436 00a4 3A8C     		ldrh	r2, [r7, #32]
 2437 00a6 BB8C     		ldrh	r3, [r7, #36]
 2438 00a8 5B00     		lsls	r3, r3, #1
 2439 00aa 9BB2     		uxth	r3, r3
 2440 00ac D31A     		subs	r3, r2, r3
 2441 00ae 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 51


 2442 00b0 013B     		subs	r3, r3, #1
 2443 00b2 9BB2     		uxth	r3, r3
 2444 00b4 1BB2     		sxth	r3, r3
 2445 00b6 B7F92440 		ldrsh	r4, [r7, #36]
 2446 00ba 3A8D     		ldrh	r2, [r7, #40]
 2447 00bc 0292     		str	r2, [sp, #8]
 2448 00be 0193     		str	r3, [sp, #4]
 2449 00c0 0223     		movs	r3, #2
 2450 00c2 0093     		str	r3, [sp]
 2451 00c4 2346     		mov	r3, r4
 2452 00c6 0246     		mov	r2, r0
 2453 00c8 F868     		ldr	r0, [r7, #12]
 2454 00ca FFF7FEFF 		bl	GFXfillCircleHelper
 397:gfx.c         ****             
 398:gfx.c         ****         }
 2455              		.loc 1 398 0
 2456 00ce 00BF     		nop
 2457 00d0 1437     		adds	r7, r7, #20
 2458              		.cfi_def_cfa_offset 12
 2459 00d2 BD46     		mov	sp, r7
 2460              		.cfi_def_cfa_register 13
 2461              		@ sp needed
 2462 00d4 90BD     		pop	{r4, r7, pc}
 2463              		.cfi_endproc
 2464              	.LFE84:
 2465              		.size	GFXfillRoundRect, .-GFXfillRoundRect
 2466 00d6 00BF     		.section	.text.GFXdrawTriangle,"ax",%progbits
 2467              		.align	2
 2468              		.global	GFXdrawTriangle
 2469              		.thumb
 2470              		.thumb_func
 2471              		.type	GFXdrawTriangle, %function
 2472              	GFXdrawTriangle:
 2473              	.LFB85:
 399:gfx.c         ****         
 400:gfx.c         ****         // Draw a triangle
 401:gfx.c         ****         void GFXdrawTriangle(GFX* myGFX, int16_t x0, int16_t y0,
 402:gfx.c         ****                              int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 2474              		.loc 1 402 0
 2475              		.cfi_startproc
 2476              		@ args = 16, pretend = 0, frame = 16
 2477              		@ frame_needed = 1, uses_anonymous_args = 0
 2478 0000 80B5     		push	{r7, lr}
 2479              		.cfi_def_cfa_offset 8
 2480              		.cfi_offset 7, -8
 2481              		.cfi_offset 14, -4
 2482 0002 86B0     		sub	sp, sp, #24
 2483              		.cfi_def_cfa_offset 32
 2484 0004 02AF     		add	r7, sp, #8
 2485              		.cfi_def_cfa 7, 24
 2486 0006 F860     		str	r0, [r7, #12]
 2487 0008 0846     		mov	r0, r1
 2488 000a 1146     		mov	r1, r2
 2489 000c 1A46     		mov	r2, r3
 2490 000e 0346     		mov	r3, r0	@ movhi
 2491 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 2492 0012 0B46     		mov	r3, r1	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 52


 2493 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 2494 0016 1346     		mov	r3, r2	@ movhi
 2495 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 403:gfx.c         ****             GFXdrawLine(myGFX, x0, y0, x1, y1, color);
 2496              		.loc 1 403 0
 2497 001a B7F90600 		ldrsh	r0, [r7, #6]
 2498 001e B7F90820 		ldrsh	r2, [r7, #8]
 2499 0022 B7F90A10 		ldrsh	r1, [r7, #10]
 2500 0026 BB8C     		ldrh	r3, [r7, #36]
 2501 0028 0193     		str	r3, [sp, #4]
 2502 002a B7F91830 		ldrsh	r3, [r7, #24]
 2503 002e 0093     		str	r3, [sp]
 2504 0030 0346     		mov	r3, r0
 2505 0032 F868     		ldr	r0, [r7, #12]
 2506 0034 FFF7FEFF 		bl	GFXdrawLine
 404:gfx.c         ****             GFXdrawLine(myGFX, x1, y1, x2, y2, color);
 2507              		.loc 1 404 0
 2508 0038 B7F91C00 		ldrsh	r0, [r7, #28]
 2509 003c B7F91820 		ldrsh	r2, [r7, #24]
 2510 0040 B7F90610 		ldrsh	r1, [r7, #6]
 2511 0044 BB8C     		ldrh	r3, [r7, #36]
 2512 0046 0193     		str	r3, [sp, #4]
 2513 0048 B7F92030 		ldrsh	r3, [r7, #32]
 2514 004c 0093     		str	r3, [sp]
 2515 004e 0346     		mov	r3, r0
 2516 0050 F868     		ldr	r0, [r7, #12]
 2517 0052 FFF7FEFF 		bl	GFXdrawLine
 405:gfx.c         ****             GFXdrawLine(myGFX, x2, y2, x0, y0, color);
 2518              		.loc 1 405 0
 2519 0056 B7F90A00 		ldrsh	r0, [r7, #10]
 2520 005a B7F92020 		ldrsh	r2, [r7, #32]
 2521 005e B7F91C10 		ldrsh	r1, [r7, #28]
 2522 0062 BB8C     		ldrh	r3, [r7, #36]
 2523 0064 0193     		str	r3, [sp, #4]
 2524 0066 B7F90830 		ldrsh	r3, [r7, #8]
 2525 006a 0093     		str	r3, [sp]
 2526 006c 0346     		mov	r3, r0
 2527 006e F868     		ldr	r0, [r7, #12]
 2528 0070 FFF7FEFF 		bl	GFXdrawLine
 406:gfx.c         ****         }
 2529              		.loc 1 406 0
 2530 0074 00BF     		nop
 2531 0076 1037     		adds	r7, r7, #16
 2532              		.cfi_def_cfa_offset 8
 2533 0078 BD46     		mov	sp, r7
 2534              		.cfi_def_cfa_register 13
 2535              		@ sp needed
 2536 007a 80BD     		pop	{r7, pc}
 2537              		.cfi_endproc
 2538              	.LFE85:
 2539              		.size	GFXdrawTriangle, .-GFXdrawTriangle
 2540              		.section	.text.GFXfillTriangle,"ax",%progbits
 2541              		.align	2
 2542              		.global	GFXfillTriangle
 2543              		.thumb
 2544              		.thumb_func
 2545              		.type	GFXfillTriangle, %function
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 53


 2546              	GFXfillTriangle:
 2547              	.LFB86:
 407:gfx.c         ****         
 408:gfx.c         ****         // Fill a triangle
 409:gfx.c         ****         void GFXfillTriangle(GFX* myGFX, int16_t x0, int16_t y0,
 410:gfx.c         ****                              int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 2548              		.loc 1 410 0
 2549              		.cfi_startproc
 2550              		@ args = 16, pretend = 0, frame = 64
 2551              		@ frame_needed = 1, uses_anonymous_args = 0
 2552 0000 80B5     		push	{r7, lr}
 2553              		.cfi_def_cfa_offset 8
 2554              		.cfi_offset 7, -8
 2555              		.cfi_offset 14, -4
 2556 0002 92B0     		sub	sp, sp, #72
 2557              		.cfi_def_cfa_offset 80
 2558 0004 02AF     		add	r7, sp, #8
 2559              		.cfi_def_cfa 7, 72
 2560 0006 F860     		str	r0, [r7, #12]
 2561 0008 0846     		mov	r0, r1
 2562 000a 1146     		mov	r1, r2
 2563 000c 1A46     		mov	r2, r3
 2564 000e 0346     		mov	r3, r0	@ movhi
 2565 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 2566 0012 0B46     		mov	r3, r1	@ movhi
 2567 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 2568 0016 1346     		mov	r3, r2	@ movhi
 2569 0018 FB80     		strh	r3, [r7, #6]	@ movhi
 411:gfx.c         ****             
 412:gfx.c         ****             int16_t a, b, y, last;
 413:gfx.c         ****             
 414:gfx.c         ****             // Sort coordinates by Y order (y2 >= y1 >= y0)
 415:gfx.c         ****             if (y0 > y1) {
 2570              		.loc 1 415 0
 2571 001a B7F90820 		ldrsh	r2, [r7, #8]
 2572 001e B7F94830 		ldrsh	r3, [r7, #72]
 2573 0022 9A42     		cmp	r2, r3
 2574 0024 0DDD     		ble	.L70
 2575              	.LBB11:
 416:gfx.c         ****                 _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 2576              		.loc 1 416 0
 2577 0026 3B89     		ldrh	r3, [r7, #8]	@ movhi
 2578 0028 FB85     		strh	r3, [r7, #46]	@ movhi
 2579 002a B7F84830 		ldrh	r3, [r7, #72]	@ movhi
 2580 002e 3B81     		strh	r3, [r7, #8]	@ movhi
 2581 0030 FB8D     		ldrh	r3, [r7, #46]	@ movhi
 2582 0032 A7F84830 		strh	r3, [r7, #72]	@ movhi
 2583              	.LBE11:
 2584              	.LBB12:
 2585 0036 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2586 0038 BB85     		strh	r3, [r7, #44]	@ movhi
 2587 003a FB88     		ldrh	r3, [r7, #6]	@ movhi
 2588 003c 7B81     		strh	r3, [r7, #10]	@ movhi
 2589 003e BB8D     		ldrh	r3, [r7, #44]	@ movhi
 2590 0040 FB80     		strh	r3, [r7, #6]	@ movhi
 2591              	.L70:
 2592              	.LBE12:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 54


 417:gfx.c         ****             }
 418:gfx.c         ****             if (y1 > y2) {
 2593              		.loc 1 418 0
 2594 0042 B7F94820 		ldrsh	r2, [r7, #72]
 2595 0046 B7F95030 		ldrsh	r3, [r7, #80]
 2596 004a 9A42     		cmp	r2, r3
 2597 004c 11DD     		ble	.L71
 2598              	.LBB13:
 419:gfx.c         ****                 _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 2599              		.loc 1 419 0
 2600 004e B7F85030 		ldrh	r3, [r7, #80]	@ movhi
 2601 0052 7B85     		strh	r3, [r7, #42]	@ movhi
 2602 0054 B7F84830 		ldrh	r3, [r7, #72]	@ movhi
 2603 0058 A7F85030 		strh	r3, [r7, #80]	@ movhi
 2604 005c 7B8D     		ldrh	r3, [r7, #42]	@ movhi
 2605 005e A7F84830 		strh	r3, [r7, #72]	@ movhi
 2606              	.LBE13:
 2607              	.LBB14:
 2608 0062 B7F84C30 		ldrh	r3, [r7, #76]	@ movhi
 2609 0066 3B85     		strh	r3, [r7, #40]	@ movhi
 2610 0068 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2611 006a A7F84C30 		strh	r3, [r7, #76]	@ movhi
 2612 006e 3B8D     		ldrh	r3, [r7, #40]	@ movhi
 2613 0070 FB80     		strh	r3, [r7, #6]	@ movhi
 2614              	.L71:
 2615              	.LBE14:
 420:gfx.c         ****             }
 421:gfx.c         ****             if (y0 > y1) {
 2616              		.loc 1 421 0
 2617 0072 B7F90820 		ldrsh	r2, [r7, #8]
 2618 0076 B7F94830 		ldrsh	r3, [r7, #72]
 2619 007a 9A42     		cmp	r2, r3
 2620 007c 0DDD     		ble	.L72
 2621              	.LBB15:
 422:gfx.c         ****                 _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 2622              		.loc 1 422 0
 2623 007e 3B89     		ldrh	r3, [r7, #8]	@ movhi
 2624 0080 FB84     		strh	r3, [r7, #38]	@ movhi
 2625 0082 B7F84830 		ldrh	r3, [r7, #72]	@ movhi
 2626 0086 3B81     		strh	r3, [r7, #8]	@ movhi
 2627 0088 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 2628 008a A7F84830 		strh	r3, [r7, #72]	@ movhi
 2629              	.LBE15:
 2630              	.LBB16:
 2631 008e 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2632 0090 BB84     		strh	r3, [r7, #36]	@ movhi
 2633 0092 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2634 0094 7B81     		strh	r3, [r7, #10]	@ movhi
 2635 0096 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 2636 0098 FB80     		strh	r3, [r7, #6]	@ movhi
 2637              	.L72:
 2638              	.LBE16:
 423:gfx.c         ****             }
 424:gfx.c         ****             
 425:gfx.c         ****             
 426:gfx.c         ****             if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 2639              		.loc 1 426 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 55


 2640 009a B7F90820 		ldrsh	r2, [r7, #8]
 2641 009e B7F95030 		ldrsh	r3, [r7, #80]
 2642 00a2 9A42     		cmp	r2, r3
 2643 00a4 3AD1     		bne	.L73
 427:gfx.c         ****                 a = b = x0;
 2644              		.loc 1 427 0
 2645 00a6 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2646 00a8 BB87     		strh	r3, [r7, #60]	@ movhi
 2647 00aa BB8F     		ldrh	r3, [r7, #60]	@ movhi
 2648 00ac FB87     		strh	r3, [r7, #62]	@ movhi
 428:gfx.c         ****                 if(x1 < a)      a = x1;
 2649              		.loc 1 428 0
 2650 00ae B7F90620 		ldrsh	r2, [r7, #6]
 2651 00b2 B7F93E30 		ldrsh	r3, [r7, #62]
 2652 00b6 9A42     		cmp	r2, r3
 2653 00b8 02DA     		bge	.L74
 2654              		.loc 1 428 0 is_stmt 0 discriminator 1
 2655 00ba FB88     		ldrh	r3, [r7, #6]	@ movhi
 2656 00bc FB87     		strh	r3, [r7, #62]	@ movhi
 2657 00be 07E0     		b	.L75
 2658              	.L74:
 429:gfx.c         ****                 else if(x1 > b) b = x1;
 2659              		.loc 1 429 0 is_stmt 1
 2660 00c0 B7F90620 		ldrsh	r2, [r7, #6]
 2661 00c4 B7F93C30 		ldrsh	r3, [r7, #60]
 2662 00c8 9A42     		cmp	r2, r3
 2663 00ca 01DD     		ble	.L75
 2664              		.loc 1 429 0 is_stmt 0 discriminator 1
 2665 00cc FB88     		ldrh	r3, [r7, #6]	@ movhi
 2666 00ce BB87     		strh	r3, [r7, #60]	@ movhi
 2667              	.L75:
 430:gfx.c         ****                 if(x2 < a)      a = x2;
 2668              		.loc 1 430 0 is_stmt 1
 2669 00d0 B7F94C20 		ldrsh	r2, [r7, #76]
 2670 00d4 B7F93E30 		ldrsh	r3, [r7, #62]
 2671 00d8 9A42     		cmp	r2, r3
 2672 00da 03DA     		bge	.L76
 2673              		.loc 1 430 0 is_stmt 0 discriminator 1
 2674 00dc B7F84C30 		ldrh	r3, [r7, #76]	@ movhi
 2675 00e0 FB87     		strh	r3, [r7, #62]	@ movhi
 2676 00e2 08E0     		b	.L77
 2677              	.L76:
 431:gfx.c         ****                 else if(x2 > b) b = x2;
 2678              		.loc 1 431 0 is_stmt 1
 2679 00e4 B7F94C20 		ldrsh	r2, [r7, #76]
 2680 00e8 B7F93C30 		ldrsh	r3, [r7, #60]
 2681 00ec 9A42     		cmp	r2, r3
 2682 00ee 02DD     		ble	.L77
 2683              		.loc 1 431 0 is_stmt 0 discriminator 1
 2684 00f0 B7F84C30 		ldrh	r3, [r7, #76]	@ movhi
 2685 00f4 BB87     		strh	r3, [r7, #60]	@ movhi
 2686              	.L77:
 432:gfx.c         ****                 GFXwriteFastHLine(myGFX, a, y0, b-a+1, color);
 2687              		.loc 1 432 0 is_stmt 1
 2688 00f6 BA8F     		ldrh	r2, [r7, #60]
 2689 00f8 FB8F     		ldrh	r3, [r7, #62]
 2690 00fa D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 56


 2691 00fc 9BB2     		uxth	r3, r3
 2692 00fe 0133     		adds	r3, r3, #1
 2693 0100 9BB2     		uxth	r3, r3
 2694 0102 18B2     		sxth	r0, r3
 2695 0104 B7F90820 		ldrsh	r2, [r7, #8]
 2696 0108 B7F93E10 		ldrsh	r1, [r7, #62]
 2697 010c B7F85430 		ldrh	r3, [r7, #84]
 2698 0110 0093     		str	r3, [sp]
 2699 0112 0346     		mov	r3, r0
 2700 0114 F868     		ldr	r0, [r7, #12]
 2701 0116 FFF7FEFF 		bl	GFXwriteFastHLine
 433:gfx.c         ****                 
 434:gfx.c         ****                 return;
 2702              		.loc 1 434 0
 2703 011a DEE0     		b	.L69
 2704              	.L73:
 435:gfx.c         ****             }
 436:gfx.c         ****             
 437:gfx.c         ****             int16_t
 438:gfx.c         ****             dx01 = x1 - x0,
 2705              		.loc 1 438 0
 2706 011c FA88     		ldrh	r2, [r7, #6]
 2707 011e 7B89     		ldrh	r3, [r7, #10]
 2708 0120 D31A     		subs	r3, r2, r3
 2709 0122 9BB2     		uxth	r3, r3
 2710 0124 7B84     		strh	r3, [r7, #34]	@ movhi
 439:gfx.c         ****             dy01 = y1 - y0,
 2711              		.loc 1 439 0
 2712 0126 B7F84820 		ldrh	r2, [r7, #72]
 2713 012a 3B89     		ldrh	r3, [r7, #8]
 2714 012c D31A     		subs	r3, r2, r3
 2715 012e 9BB2     		uxth	r3, r3
 2716 0130 3B84     		strh	r3, [r7, #32]	@ movhi
 440:gfx.c         ****             dx02 = x2 - x0,
 2717              		.loc 1 440 0
 2718 0132 B7F84C20 		ldrh	r2, [r7, #76]
 2719 0136 7B89     		ldrh	r3, [r7, #10]
 2720 0138 D31A     		subs	r3, r2, r3
 2721 013a 9BB2     		uxth	r3, r3
 2722 013c FB83     		strh	r3, [r7, #30]	@ movhi
 441:gfx.c         ****             dy02 = y2 - y0,
 2723              		.loc 1 441 0
 2724 013e B7F85020 		ldrh	r2, [r7, #80]
 2725 0142 3B89     		ldrh	r3, [r7, #8]
 2726 0144 D31A     		subs	r3, r2, r3
 2727 0146 9BB2     		uxth	r3, r3
 2728 0148 BB83     		strh	r3, [r7, #28]	@ movhi
 442:gfx.c         ****             dx12 = x2 - x1,
 2729              		.loc 1 442 0
 2730 014a B7F84C20 		ldrh	r2, [r7, #76]
 2731 014e FB88     		ldrh	r3, [r7, #6]
 2732 0150 D31A     		subs	r3, r2, r3
 2733 0152 9BB2     		uxth	r3, r3
 2734 0154 7B83     		strh	r3, [r7, #26]	@ movhi
 443:gfx.c         ****             dy12 = y2 - y1;
 2735              		.loc 1 443 0
 2736 0156 B7F85020 		ldrh	r2, [r7, #80]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 57


 2737 015a B7F84830 		ldrh	r3, [r7, #72]
 2738 015e D31A     		subs	r3, r2, r3
 2739 0160 9BB2     		uxth	r3, r3
 2740 0162 3B83     		strh	r3, [r7, #24]	@ movhi
 444:gfx.c         ****             int32_t
 445:gfx.c         ****             sa   = 0,
 2741              		.loc 1 445 0
 2742 0164 0023     		movs	r3, #0
 2743 0166 7B63     		str	r3, [r7, #52]
 446:gfx.c         ****             sb   = 0;
 2744              		.loc 1 446 0
 2745 0168 0023     		movs	r3, #0
 2746 016a 3B63     		str	r3, [r7, #48]
 447:gfx.c         ****             
 448:gfx.c         ****             // For upper part of triangle, find scanline crossings for segments
 449:gfx.c         ****             // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
 450:gfx.c         ****             // is included here (and second loop will be skipped, avoiding a /0
 451:gfx.c         ****             // error there), otherwise scanline y1 is skipped here and handled
 452:gfx.c         ****             // in the second loop...which also avoids a /0 error here if y0=y1
 453:gfx.c         ****             // (flat-topped triangle).
 454:gfx.c         ****             if(y1 == y2) last = y1;   // Include y1 scanline
 2747              		.loc 1 454 0
 2748 016c B7F94820 		ldrsh	r2, [r7, #72]
 2749 0170 B7F95030 		ldrsh	r3, [r7, #80]
 2750 0174 9A42     		cmp	r2, r3
 2751 0176 03D1     		bne	.L79
 2752              		.loc 1 454 0 is_stmt 0 discriminator 1
 2753 0178 B7F84830 		ldrh	r3, [r7, #72]	@ movhi
 2754 017c 3B87     		strh	r3, [r7, #56]	@ movhi
 2755 017e 04E0     		b	.L80
 2756              	.L79:
 455:gfx.c         ****             else         last = y1-1; // Skip it
 2757              		.loc 1 455 0 is_stmt 1
 2758 0180 B7F84830 		ldrh	r3, [r7, #72]
 2759 0184 013B     		subs	r3, r3, #1
 2760 0186 9BB2     		uxth	r3, r3
 2761 0188 3B87     		strh	r3, [r7, #56]	@ movhi
 2762              	.L80:
 456:gfx.c         ****             
 457:gfx.c         ****             for(y=y0; y<=last; y++) {
 2763              		.loc 1 457 0
 2764 018a 3B89     		ldrh	r3, [r7, #8]	@ movhi
 2765 018c 7B87     		strh	r3, [r7, #58]	@ movhi
 2766 018e 41E0     		b	.L81
 2767              	.L83:
 458:gfx.c         ****                 a   = x0 + sa / dy01;
 2768              		.loc 1 458 0
 2769 0190 B7F92030 		ldrsh	r3, [r7, #32]
 2770 0194 7A6B     		ldr	r2, [r7, #52]
 2771 0196 92FBF3F3 		sdiv	r3, r2, r3
 2772 019a 9AB2     		uxth	r2, r3
 2773 019c 7B89     		ldrh	r3, [r7, #10]
 2774 019e 1344     		add	r3, r3, r2
 2775 01a0 9BB2     		uxth	r3, r3
 2776 01a2 FB87     		strh	r3, [r7, #62]	@ movhi
 459:gfx.c         ****                 b   = x0 + sb / dy02;
 2777              		.loc 1 459 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 58


 2778 01a4 B7F91C30 		ldrsh	r3, [r7, #28]
 2779 01a8 3A6B     		ldr	r2, [r7, #48]
 2780 01aa 92FBF3F3 		sdiv	r3, r2, r3
 2781 01ae 9AB2     		uxth	r2, r3
 2782 01b0 7B89     		ldrh	r3, [r7, #10]
 2783 01b2 1344     		add	r3, r3, r2
 2784 01b4 9BB2     		uxth	r3, r3
 2785 01b6 BB87     		strh	r3, [r7, #60]	@ movhi
 460:gfx.c         ****                 sa += dx01;
 2786              		.loc 1 460 0
 2787 01b8 B7F92230 		ldrsh	r3, [r7, #34]
 2788 01bc 7A6B     		ldr	r2, [r7, #52]
 2789 01be 1344     		add	r3, r3, r2
 2790 01c0 7B63     		str	r3, [r7, #52]
 461:gfx.c         ****                 sb += dx02;
 2791              		.loc 1 461 0
 2792 01c2 B7F91E30 		ldrsh	r3, [r7, #30]
 2793 01c6 3A6B     		ldr	r2, [r7, #48]
 2794 01c8 1344     		add	r3, r3, r2
 2795 01ca 3B63     		str	r3, [r7, #48]
 462:gfx.c         ****                 /* longhand:
 463:gfx.c         ****                  a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
 464:gfx.c         ****                  b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
 465:gfx.c         ****                  */
 466:gfx.c         ****                 if(a > b) _swap_int16_t(a,b);
 2796              		.loc 1 466 0
 2797 01cc B7F93E20 		ldrsh	r2, [r7, #62]
 2798 01d0 B7F93C30 		ldrsh	r3, [r7, #60]
 2799 01d4 9A42     		cmp	r2, r3
 2800 01d6 05DD     		ble	.L82
 2801              	.LBB17:
 2802              		.loc 1 466 0 is_stmt 0 discriminator 1
 2803 01d8 FB8F     		ldrh	r3, [r7, #62]	@ movhi
 2804 01da FB82     		strh	r3, [r7, #22]	@ movhi
 2805 01dc BB8F     		ldrh	r3, [r7, #60]	@ movhi
 2806 01de FB87     		strh	r3, [r7, #62]	@ movhi
 2807 01e0 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2808 01e2 BB87     		strh	r3, [r7, #60]	@ movhi
 2809              	.L82:
 2810              	.LBE17:
 467:gfx.c         ****                 GFXwriteFastHLine(myGFX,a, y, b-a+1, color);
 2811              		.loc 1 467 0 is_stmt 1 discriminator 2
 2812 01e4 BA8F     		ldrh	r2, [r7, #60]
 2813 01e6 FB8F     		ldrh	r3, [r7, #62]
 2814 01e8 D31A     		subs	r3, r2, r3
 2815 01ea 9BB2     		uxth	r3, r3
 2816 01ec 0133     		adds	r3, r3, #1
 2817 01ee 9BB2     		uxth	r3, r3
 2818 01f0 18B2     		sxth	r0, r3
 2819 01f2 B7F93A20 		ldrsh	r2, [r7, #58]
 2820 01f6 B7F93E10 		ldrsh	r1, [r7, #62]
 2821 01fa B7F85430 		ldrh	r3, [r7, #84]
 2822 01fe 0093     		str	r3, [sp]
 2823 0200 0346     		mov	r3, r0
 2824 0202 F868     		ldr	r0, [r7, #12]
 2825 0204 FFF7FEFF 		bl	GFXwriteFastHLine
 457:gfx.c         ****                 a   = x0 + sa / dy01;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 59


 2826              		.loc 1 457 0 discriminator 2
 2827 0208 B7F93A30 		ldrsh	r3, [r7, #58]
 2828 020c 9BB2     		uxth	r3, r3
 2829 020e 0133     		adds	r3, r3, #1
 2830 0210 9BB2     		uxth	r3, r3
 2831 0212 7B87     		strh	r3, [r7, #58]	@ movhi
 2832              	.L81:
 457:gfx.c         ****                 a   = x0 + sa / dy01;
 2833              		.loc 1 457 0 is_stmt 0 discriminator 1
 2834 0214 B7F93A20 		ldrsh	r2, [r7, #58]
 2835 0218 B7F93830 		ldrsh	r3, [r7, #56]
 2836 021c 9A42     		cmp	r2, r3
 2837 021e B7DD     		ble	.L83
 468:gfx.c         ****             }
 469:gfx.c         ****             
 470:gfx.c         ****             // For lower part of triangle, find scanline crossings for segments
 471:gfx.c         ****             // 0-2 and 1-2.  This loop is skipped if y1=y2.
 472:gfx.c         ****             sa = dx12 * (y - y1);
 2838              		.loc 1 472 0 is_stmt 1
 2839 0220 B7F91A30 		ldrsh	r3, [r7, #26]
 2840 0224 B7F93A10 		ldrsh	r1, [r7, #58]
 2841 0228 B7F94820 		ldrsh	r2, [r7, #72]
 2842 022c 8A1A     		subs	r2, r1, r2
 2843 022e 02FB03F3 		mul	r3, r2, r3
 2844 0232 7B63     		str	r3, [r7, #52]
 473:gfx.c         ****             sb = dx02 * (y - y0);
 2845              		.loc 1 473 0
 2846 0234 B7F91E30 		ldrsh	r3, [r7, #30]
 2847 0238 B7F93A10 		ldrsh	r1, [r7, #58]
 2848 023c B7F90820 		ldrsh	r2, [r7, #8]
 2849 0240 8A1A     		subs	r2, r1, r2
 2850 0242 02FB03F3 		mul	r3, r2, r3
 2851 0246 3B63     		str	r3, [r7, #48]
 474:gfx.c         ****             for(; y<=y2; y++) {
 2852              		.loc 1 474 0
 2853 0248 41E0     		b	.L84
 2854              	.L86:
 475:gfx.c         ****                 a   = x1 + sa / dy12;
 2855              		.loc 1 475 0
 2856 024a B7F91830 		ldrsh	r3, [r7, #24]
 2857 024e 7A6B     		ldr	r2, [r7, #52]
 2858 0250 92FBF3F3 		sdiv	r3, r2, r3
 2859 0254 9AB2     		uxth	r2, r3
 2860 0256 FB88     		ldrh	r3, [r7, #6]
 2861 0258 1344     		add	r3, r3, r2
 2862 025a 9BB2     		uxth	r3, r3
 2863 025c FB87     		strh	r3, [r7, #62]	@ movhi
 476:gfx.c         ****                 b   = x0 + sb / dy02;
 2864              		.loc 1 476 0
 2865 025e B7F91C30 		ldrsh	r3, [r7, #28]
 2866 0262 3A6B     		ldr	r2, [r7, #48]
 2867 0264 92FBF3F3 		sdiv	r3, r2, r3
 2868 0268 9AB2     		uxth	r2, r3
 2869 026a 7B89     		ldrh	r3, [r7, #10]
 2870 026c 1344     		add	r3, r3, r2
 2871 026e 9BB2     		uxth	r3, r3
 2872 0270 BB87     		strh	r3, [r7, #60]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 60


 477:gfx.c         ****                 sa += dx12;
 2873              		.loc 1 477 0
 2874 0272 B7F91A30 		ldrsh	r3, [r7, #26]
 2875 0276 7A6B     		ldr	r2, [r7, #52]
 2876 0278 1344     		add	r3, r3, r2
 2877 027a 7B63     		str	r3, [r7, #52]
 478:gfx.c         ****                 sb += dx02;
 2878              		.loc 1 478 0
 2879 027c B7F91E30 		ldrsh	r3, [r7, #30]
 2880 0280 3A6B     		ldr	r2, [r7, #48]
 2881 0282 1344     		add	r3, r3, r2
 2882 0284 3B63     		str	r3, [r7, #48]
 479:gfx.c         ****                 /* longhand:
 480:gfx.c         ****                  a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
 481:gfx.c         ****                  b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
 482:gfx.c         ****                  */
 483:gfx.c         ****                 if(a > b) _swap_int16_t(a,b);
 2883              		.loc 1 483 0
 2884 0286 B7F93E20 		ldrsh	r2, [r7, #62]
 2885 028a B7F93C30 		ldrsh	r3, [r7, #60]
 2886 028e 9A42     		cmp	r2, r3
 2887 0290 05DD     		ble	.L85
 2888              	.LBB18:
 2889              		.loc 1 483 0 is_stmt 0 discriminator 1
 2890 0292 FB8F     		ldrh	r3, [r7, #62]	@ movhi
 2891 0294 BB82     		strh	r3, [r7, #20]	@ movhi
 2892 0296 BB8F     		ldrh	r3, [r7, #60]	@ movhi
 2893 0298 FB87     		strh	r3, [r7, #62]	@ movhi
 2894 029a BB8A     		ldrh	r3, [r7, #20]	@ movhi
 2895 029c BB87     		strh	r3, [r7, #60]	@ movhi
 2896              	.L85:
 2897              	.LBE18:
 484:gfx.c         ****                 GFXwriteFastHLine(myGFX, a, y, b-a+1, color);
 2898              		.loc 1 484 0 is_stmt 1
 2899 029e BA8F     		ldrh	r2, [r7, #60]
 2900 02a0 FB8F     		ldrh	r3, [r7, #62]
 2901 02a2 D31A     		subs	r3, r2, r3
 2902 02a4 9BB2     		uxth	r3, r3
 2903 02a6 0133     		adds	r3, r3, #1
 2904 02a8 9BB2     		uxth	r3, r3
 2905 02aa 18B2     		sxth	r0, r3
 2906 02ac B7F93A20 		ldrsh	r2, [r7, #58]
 2907 02b0 B7F93E10 		ldrsh	r1, [r7, #62]
 2908 02b4 B7F85430 		ldrh	r3, [r7, #84]
 2909 02b8 0093     		str	r3, [sp]
 2910 02ba 0346     		mov	r3, r0
 2911 02bc F868     		ldr	r0, [r7, #12]
 2912 02be FFF7FEFF 		bl	GFXwriteFastHLine
 474:gfx.c         ****                 a   = x1 + sa / dy12;
 2913              		.loc 1 474 0
 2914 02c2 B7F93A30 		ldrsh	r3, [r7, #58]
 2915 02c6 9BB2     		uxth	r3, r3
 2916 02c8 0133     		adds	r3, r3, #1
 2917 02ca 9BB2     		uxth	r3, r3
 2918 02cc 7B87     		strh	r3, [r7, #58]	@ movhi
 2919              	.L84:
 474:gfx.c         ****                 a   = x1 + sa / dy12;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 61


 2920              		.loc 1 474 0 is_stmt 0 discriminator 1
 2921 02ce B7F93A20 		ldrsh	r2, [r7, #58]
 2922 02d2 B7F95030 		ldrsh	r3, [r7, #80]
 2923 02d6 9A42     		cmp	r2, r3
 2924 02d8 B7DD     		ble	.L86
 2925              	.L69:
 485:gfx.c         ****             }
 486:gfx.c         ****             
 487:gfx.c         ****         }
 2926              		.loc 1 487 0 is_stmt 1
 2927 02da 4037     		adds	r7, r7, #64
 2928              		.cfi_def_cfa_offset 8
 2929 02dc BD46     		mov	sp, r7
 2930              		.cfi_def_cfa_register 13
 2931              		@ sp needed
 2932 02de 80BD     		pop	{r7, pc}
 2933              		.cfi_endproc
 2934              	.LFE86:
 2935              		.size	GFXfillTriangle, .-GFXfillTriangle
 2936              		.section	.text.GFXdrawBitmap,"ax",%progbits
 2937              		.align	2
 2938              		.global	GFXdrawBitmap
 2939              		.thumb
 2940              		.thumb_func
 2941              		.type	GFXdrawBitmap, %function
 2942              	GFXdrawBitmap:
 2943              	.LFB87:
 488:gfx.c         ****         
 489:gfx.c         ****         // BITMAP / XBITMAP / GRAYSCALE / RGB BITMAP FUNCTIONS ---------------------
 490:gfx.c         ****         
 491:gfx.c         ****         
 492:gfx.c         ****         
 493:gfx.c         ****         // Draw a RAM-resident 1-bit image at the specified (x,y) position,
 494:gfx.c         ****         // using the specified foreground (for set bits) and background (unset
 495:gfx.c         ****         // bits) colors.
 496:gfx.c         ****         void GFXdrawBitmap(GFX* myGFX, int16_t x, int16_t y,
 497:gfx.c         ****                            uint8_t *bitmap, int16_t w, int16_t h, uint16_t color, uint16_t bg) {
 2944              		.loc 1 497 0
 2945              		.cfi_startproc
 2946              		@ args = 16, pretend = 0, frame = 24
 2947              		@ frame_needed = 1, uses_anonymous_args = 0
 2948 0000 80B5     		push	{r7, lr}
 2949              		.cfi_def_cfa_offset 8
 2950              		.cfi_offset 7, -8
 2951              		.cfi_offset 14, -4
 2952 0002 86B0     		sub	sp, sp, #24
 2953              		.cfi_def_cfa_offset 32
 2954 0004 00AF     		add	r7, sp, #0
 2955              		.cfi_def_cfa_register 7
 2956 0006 F860     		str	r0, [r7, #12]
 2957 0008 7B60     		str	r3, [r7, #4]
 2958 000a 0B46     		mov	r3, r1	@ movhi
 2959 000c 7B81     		strh	r3, [r7, #10]	@ movhi
 2960 000e 1346     		mov	r3, r2	@ movhi
 2961 0010 3B81     		strh	r3, [r7, #8]	@ movhi
 498:gfx.c         ****             
 499:gfx.c         **** // Getting a bit messy with these #ifndefs but startWrite() and endWrite()
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 62


 500:gfx.c         **** // don't seem to exist anywhere in the Vocodec code. Doesn't cause a build
 501:gfx.c         **** // error for the hardware version but does for JUCE version.
 502:gfx.c         **** #ifndef __cplusplus
 503:gfx.c         ****             int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 2962              		.loc 1 503 0
 2963 0012 B7F92030 		ldrsh	r3, [r7, #32]
 2964 0016 0733     		adds	r3, r3, #7
 2965 0018 002B     		cmp	r3, #0
 2966 001a 00DA     		bge	.L88
 2967 001c 0733     		adds	r3, r3, #7
 2968              	.L88:
 2969 001e DB10     		asrs	r3, r3, #3
 2970 0020 3B82     		strh	r3, [r7, #16]	@ movhi
 504:gfx.c         ****             uint8_t byte = 0;
 2971              		.loc 1 504 0
 2972 0022 0023     		movs	r3, #0
 2973 0024 FB75     		strb	r3, [r7, #23]
 505:gfx.c         ****             startWrite();
 2974              		.loc 1 505 0
 2975 0026 FFF7FEFF 		bl	startWrite
 2976              	.LBB19:
 506:gfx.c         ****             for(int16_t j=0; j<h; j++, y++) {
 2977              		.loc 1 506 0
 2978 002a 0023     		movs	r3, #0
 2979 002c BB82     		strh	r3, [r7, #20]	@ movhi
 2980 002e 47E0     		b	.L89
 2981              	.L97:
 2982              	.LBB20:
 507:gfx.c         ****                 for(int16_t i=0; i<w; i++ ) {
 2983              		.loc 1 507 0
 2984 0030 0023     		movs	r3, #0
 2985 0032 7B82     		strh	r3, [r7, #18]	@ movhi
 2986 0034 32E0     		b	.L90
 2987              	.L96:
 508:gfx.c         ****                     if(i & 7) byte <<= 1;
 2988              		.loc 1 508 0
 2989 0036 7B8A     		ldrh	r3, [r7, #18]
 2990 0038 03F00703 		and	r3, r3, #7
 2991 003c 002B     		cmp	r3, #0
 2992 003e 03D0     		beq	.L91
 2993              		.loc 1 508 0 is_stmt 0 discriminator 1
 2994 0040 FB7D     		ldrb	r3, [r7, #23]
 2995 0042 5B00     		lsls	r3, r3, #1
 2996 0044 FB75     		strb	r3, [r7, #23]
 2997 0046 12E0     		b	.L92
 2998              	.L91:
 509:gfx.c         ****                     else      byte   = bitmap[j * byteWidth + i / 8];
 2999              		.loc 1 509 0 is_stmt 1
 3000 0048 B7F91430 		ldrsh	r3, [r7, #20]
 3001 004c B7F91020 		ldrsh	r2, [r7, #16]
 3002 0050 02FB03F2 		mul	r2, r2, r3
 3003 0054 B7F91230 		ldrsh	r3, [r7, #18]
 3004 0058 002B     		cmp	r3, #0
 3005 005a 00DA     		bge	.L93
 3006 005c 0733     		adds	r3, r3, #7
 3007              	.L93:
 3008 005e DB10     		asrs	r3, r3, #3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 63


 3009 0060 1BB2     		sxth	r3, r3
 3010 0062 1344     		add	r3, r3, r2
 3011 0064 1A46     		mov	r2, r3
 3012 0066 7B68     		ldr	r3, [r7, #4]
 3013 0068 1344     		add	r3, r3, r2
 3014 006a 1B78     		ldrb	r3, [r3]
 3015 006c FB75     		strb	r3, [r7, #23]
 3016              	.L92:
 510:gfx.c         ****                     GFXwritePixel(myGFX, x+i, y, (byte & 0x80) ? color : bg);
 3017              		.loc 1 510 0
 3018 006e 7A89     		ldrh	r2, [r7, #10]
 3019 0070 7B8A     		ldrh	r3, [r7, #18]
 3020 0072 1344     		add	r3, r3, r2
 3021 0074 9BB2     		uxth	r3, r3
 3022 0076 19B2     		sxth	r1, r3
 3023 0078 97F91730 		ldrsb	r3, [r7, #23]
 3024 007c 002B     		cmp	r3, #0
 3025 007e 01DA     		bge	.L94
 3026              		.loc 1 510 0 is_stmt 0 discriminator 1
 3027 0080 3B8D     		ldrh	r3, [r7, #40]
 3028 0082 00E0     		b	.L95
 3029              	.L94:
 3030              		.loc 1 510 0 discriminator 2
 3031 0084 BB8D     		ldrh	r3, [r7, #44]
 3032              	.L95:
 3033              		.loc 1 510 0 discriminator 4
 3034 0086 B7F90820 		ldrsh	r2, [r7, #8]
 3035 008a F868     		ldr	r0, [r7, #12]
 3036 008c FFF7FEFF 		bl	GFXwritePixel
 507:gfx.c         ****                     if(i & 7) byte <<= 1;
 3037              		.loc 1 507 0 is_stmt 1 discriminator 4
 3038 0090 B7F91230 		ldrsh	r3, [r7, #18]
 3039 0094 9BB2     		uxth	r3, r3
 3040 0096 0133     		adds	r3, r3, #1
 3041 0098 9BB2     		uxth	r3, r3
 3042 009a 7B82     		strh	r3, [r7, #18]	@ movhi
 3043              	.L90:
 507:gfx.c         ****                     if(i & 7) byte <<= 1;
 3044              		.loc 1 507 0 is_stmt 0 discriminator 2
 3045 009c B7F91220 		ldrsh	r2, [r7, #18]
 3046 00a0 B7F92030 		ldrsh	r3, [r7, #32]
 3047 00a4 9A42     		cmp	r2, r3
 3048 00a6 C6DB     		blt	.L96
 3049              	.LBE20:
 506:gfx.c         ****                 for(int16_t i=0; i<w; i++ ) {
 3050              		.loc 1 506 0 is_stmt 1 discriminator 2
 3051 00a8 B7F91430 		ldrsh	r3, [r7, #20]
 3052 00ac 9BB2     		uxth	r3, r3
 3053 00ae 0133     		adds	r3, r3, #1
 3054 00b0 9BB2     		uxth	r3, r3
 3055 00b2 BB82     		strh	r3, [r7, #20]	@ movhi
 3056 00b4 B7F90830 		ldrsh	r3, [r7, #8]
 3057 00b8 9BB2     		uxth	r3, r3
 3058 00ba 0133     		adds	r3, r3, #1
 3059 00bc 9BB2     		uxth	r3, r3
 3060 00be 3B81     		strh	r3, [r7, #8]	@ movhi
 3061              	.L89:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 64


 506:gfx.c         ****                 for(int16_t i=0; i<w; i++ ) {
 3062              		.loc 1 506 0 is_stmt 0 discriminator 1
 3063 00c0 B7F91420 		ldrsh	r2, [r7, #20]
 3064 00c4 B7F92430 		ldrsh	r3, [r7, #36]
 3065 00c8 9A42     		cmp	r2, r3
 3066 00ca B1DB     		blt	.L97
 3067              	.LBE19:
 511:gfx.c         ****                 }
 512:gfx.c         ****             }
 513:gfx.c         ****             endWrite();
 3068              		.loc 1 513 0 is_stmt 1
 3069 00cc FFF7FEFF 		bl	endWrite
 514:gfx.c         **** #endif
 515:gfx.c         ****         }
 3070              		.loc 1 515 0
 3071 00d0 00BF     		nop
 3072 00d2 1837     		adds	r7, r7, #24
 3073              		.cfi_def_cfa_offset 8
 3074 00d4 BD46     		mov	sp, r7
 3075              		.cfi_def_cfa_register 13
 3076              		@ sp needed
 3077 00d6 80BD     		pop	{r7, pc}
 3078              		.cfi_endproc
 3079              	.LFE87:
 3080              		.size	GFXdrawBitmap, .-GFXdrawBitmap
 3081              		.section	.text.GFXdrawChar,"ax",%progbits
 3082              		.align	2
 3083              		.global	GFXdrawChar
 3084              		.thumb
 3085              		.thumb_func
 3086              		.type	GFXdrawChar, %function
 3087              	GFXdrawChar:
 3088              	.LFB88:
 516:gfx.c         ****         
 517:gfx.c         ****         
 518:gfx.c         ****         
 519:gfx.c         ****         // TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------
 520:gfx.c         ****         
 521:gfx.c         ****         // Draw a character
 522:gfx.c         ****         void GFXdrawChar(GFX* myGFX, int16_t x, int16_t y, unsigned char c,
 523:gfx.c         ****                          uint16_t color, uint16_t bg, uint8_t size) {
 3089              		.loc 1 523 0
 3090              		.cfi_startproc
 3091              		@ args = 12, pretend = 0, frame = 48
 3092              		@ frame_needed = 1, uses_anonymous_args = 0
 3093 0000 90B5     		push	{r4, r7, lr}
 3094              		.cfi_def_cfa_offset 12
 3095              		.cfi_offset 4, -12
 3096              		.cfi_offset 7, -8
 3097              		.cfi_offset 14, -4
 3098 0002 8FB0     		sub	sp, sp, #60
 3099              		.cfi_def_cfa_offset 72
 3100 0004 02AF     		add	r7, sp, #8
 3101              		.cfi_def_cfa 7, 64
 3102 0006 F860     		str	r0, [r7, #12]
 3103 0008 0846     		mov	r0, r1
 3104 000a 1146     		mov	r1, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 65


 3105 000c 1A46     		mov	r2, r3
 3106 000e 0346     		mov	r3, r0	@ movhi
 3107 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 3108 0012 0B46     		mov	r3, r1	@ movhi
 3109 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 3110 0016 1346     		mov	r3, r2
 3111 0018 FB71     		strb	r3, [r7, #7]
 524:gfx.c         ****             
 525:gfx.c         ****             if(!myGFX->gfxFont) { // 'Classic' built-in font
 3112              		.loc 1 525 0
 3113 001a FB68     		ldr	r3, [r7, #12]
 3114 001c 9B69     		ldr	r3, [r3, #24]
 3115 001e 002B     		cmp	r3, #0
 3116 0020 40F02E81 		bne	.L99
 526:gfx.c         ****                 
 527:gfx.c         ****                 if((x >= myGFX->_width)            || // Clip right
 3117              		.loc 1 527 0
 3118 0024 B7F90A30 		ldrsh	r3, [r7, #10]
 3119 0028 FA68     		ldr	r2, [r7, #12]
 3120 002a 9288     		ldrh	r2, [r2, #4]
 3121 002c 9342     		cmp	r3, r2
 3122 002e 80F2E981 		bge	.L123
 528:gfx.c         ****                    (y >= myGFX->_height)           || // Clip bottom
 3123              		.loc 1 528 0 discriminator 1
 3124 0032 B7F90830 		ldrsh	r3, [r7, #8]
 3125 0036 FA68     		ldr	r2, [r7, #12]
 3126 0038 D288     		ldrh	r2, [r2, #6]
 527:gfx.c         ****                    (y >= myGFX->_height)           || // Clip bottom
 3127              		.loc 1 527 0 discriminator 1
 3128 003a 9342     		cmp	r3, r2
 3129 003c 80F2E281 		bge	.L123
 529:gfx.c         ****                    ((x + 6 * size - 1) < 0) || // Clip left
 3130              		.loc 1 529 0
 3131 0040 B7F90A10 		ldrsh	r1, [r7, #10]
 3132 0044 97F84820 		ldrb	r2, [r7, #72]	@ zero_extendqisi2
 3133 0048 1346     		mov	r3, r2
 3134 004a 5B00     		lsls	r3, r3, #1
 3135 004c 1344     		add	r3, r3, r2
 3136 004e 5B00     		lsls	r3, r3, #1
 3137 0050 0B44     		add	r3, r3, r1
 3138 0052 013B     		subs	r3, r3, #1
 528:gfx.c         ****                    (y >= myGFX->_height)           || // Clip bottom
 3139              		.loc 1 528 0
 3140 0054 002B     		cmp	r3, #0
 3141 0056 C0F2D581 		blt	.L123
 530:gfx.c         ****                    ((y + 8 * size - 1) < 0))   // Clip top
 3142              		.loc 1 530 0
 3143 005a B7F90820 		ldrsh	r2, [r7, #8]
 3144 005e 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3145 0062 DB00     		lsls	r3, r3, #3
 3146 0064 1344     		add	r3, r3, r2
 3147 0066 013B     		subs	r3, r3, #1
 529:gfx.c         ****                    ((x + 6 * size - 1) < 0) || // Clip left
 3148              		.loc 1 529 0
 3149 0068 002B     		cmp	r3, #0
 3150 006a C0F2CB81 		blt	.L123
 531:gfx.c         ****                     return;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 66


 532:gfx.c         ****                 
 533:gfx.c         ****                 if(!myGFX->_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 3151              		.loc 1 533 0
 3152 006e FB68     		ldr	r3, [r7, #12]
 3153 0070 DB8A     		ldrh	r3, [r3, #22]
 3154 0072 002B     		cmp	r3, #0
 3155 0074 05D1     		bne	.L103
 3156              		.loc 1 533 0 is_stmt 0 discriminator 1
 3157 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3158 0078 AF2B     		cmp	r3, #175
 3159 007a 02D9     		bls	.L103
 3160              		.loc 1 533 0 discriminator 2
 3161 007c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3162 007e 0133     		adds	r3, r3, #1
 3163 0080 FB71     		strb	r3, [r7, #7]
 3164              	.L103:
 3165              	.LBB21:
 534:gfx.c         ****                 
 535:gfx.c         ****                 //startWrite();
 536:gfx.c         ****                 for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 3166              		.loc 1 536 0 is_stmt 1
 3167 0082 0023     		movs	r3, #0
 3168 0084 87F82F30 		strb	r3, [r7, #47]
 3169 0088 BCE0     		b	.L104
 3170              	.L112:
 3171              	.LBB22:
 537:gfx.c         ****                     uint8_t line = pgm_read_byte(&myGFX->gfxFont[c * 5 + i]);
 3172              		.loc 1 537 0
 3173 008a FB68     		ldr	r3, [r7, #12]
 3174 008c 9969     		ldr	r1, [r3, #24]
 3175 008e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 3176 0090 1346     		mov	r3, r2
 3177 0092 9B00     		lsls	r3, r3, #2
 3178 0094 1A44     		add	r2, r2, r3
 3179 0096 97F92F30 		ldrsb	r3, [r7, #47]
 3180 009a 1344     		add	r3, r3, r2
 3181 009c 1A46     		mov	r2, r3
 3182 009e 1346     		mov	r3, r2
 3183 00a0 5B00     		lsls	r3, r3, #1
 3184 00a2 1344     		add	r3, r3, r2
 3185 00a4 9B00     		lsls	r3, r3, #2
 3186 00a6 0B44     		add	r3, r3, r1
 3187 00a8 1B78     		ldrb	r3, [r3]
 3188 00aa 87F82E30 		strb	r3, [r7, #46]
 3189              	.LBB23:
 538:gfx.c         ****                     for(int8_t j=0; j<8; j++, line >>= 1) {
 3190              		.loc 1 538 0
 3191 00ae 0023     		movs	r3, #0
 3192 00b0 87F82D30 		strb	r3, [r7, #45]
 3193 00b4 9AE0     		b	.L105
 3194              	.L111:
 539:gfx.c         ****                         if(line & 1) {
 3195              		.loc 1 539 0
 3196 00b6 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 3197 00ba 03F00103 		and	r3, r3, #1
 3198 00be 002B     		cmp	r3, #0
 3199 00c0 41D0     		beq	.L106
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 67


 540:gfx.c         ****                             if(size == 1)
 3200              		.loc 1 540 0
 3201 00c2 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3202 00c6 012B     		cmp	r3, #1
 3203 00c8 13D1     		bne	.L107
 541:gfx.c         ****                                 GFXwritePixel(myGFX,x+i, y+j, color);
 3204              		.loc 1 541 0
 3205 00ca 97F92F30 		ldrsb	r3, [r7, #47]
 3206 00ce 9AB2     		uxth	r2, r3
 3207 00d0 7B89     		ldrh	r3, [r7, #10]
 3208 00d2 1344     		add	r3, r3, r2
 3209 00d4 9BB2     		uxth	r3, r3
 3210 00d6 19B2     		sxth	r1, r3
 3211 00d8 97F92D30 		ldrsb	r3, [r7, #45]
 3212 00dc 9AB2     		uxth	r2, r3
 3213 00de 3B89     		ldrh	r3, [r7, #8]
 3214 00e0 1344     		add	r3, r3, r2
 3215 00e2 9BB2     		uxth	r3, r3
 3216 00e4 1AB2     		sxth	r2, r3
 3217 00e6 B7F84030 		ldrh	r3, [r7, #64]
 3218 00ea F868     		ldr	r0, [r7, #12]
 3219 00ec FFF7FEFF 		bl	GFXwritePixel
 3220 00f0 70E0     		b	.L109
 3221              	.L107:
 542:gfx.c         ****                             else
 543:gfx.c         ****                                 GFXwriteFillRect(myGFX,x+i*size, y+j*size, size, size, color);
 3222              		.loc 1 543 0
 3223 00f2 97F92F30 		ldrsb	r3, [r7, #47]
 3224 00f6 9BB2     		uxth	r3, r3
 3225 00f8 97F84820 		ldrb	r2, [r7, #72]	@ zero_extendqisi2
 3226 00fc 92B2     		uxth	r2, r2
 3227 00fe 02FB03F3 		mul	r3, r2, r3
 3228 0102 9AB2     		uxth	r2, r3
 3229 0104 7B89     		ldrh	r3, [r7, #10]
 3230 0106 1344     		add	r3, r3, r2
 3231 0108 9BB2     		uxth	r3, r3
 3232 010a 19B2     		sxth	r1, r3
 3233 010c 97F92D30 		ldrsb	r3, [r7, #45]
 3234 0110 9BB2     		uxth	r3, r3
 3235 0112 97F84820 		ldrb	r2, [r7, #72]	@ zero_extendqisi2
 3236 0116 92B2     		uxth	r2, r2
 3237 0118 02FB03F3 		mul	r3, r2, r3
 3238 011c 9AB2     		uxth	r2, r3
 3239 011e 3B89     		ldrh	r3, [r7, #8]
 3240 0120 1344     		add	r3, r3, r2
 3241 0122 9BB2     		uxth	r3, r3
 3242 0124 18B2     		sxth	r0, r3
 3243 0126 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3244 012a 1CB2     		sxth	r4, r3
 3245 012c 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3246 0130 1BB2     		sxth	r3, r3
 3247 0132 B7F84020 		ldrh	r2, [r7, #64]
 3248 0136 0192     		str	r2, [sp, #4]
 3249 0138 0093     		str	r3, [sp]
 3250 013a 2346     		mov	r3, r4
 3251 013c 0246     		mov	r2, r0
 3252 013e F868     		ldr	r0, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 68


 3253 0140 FFF7FEFF 		bl	GFXwriteFillRect
 3254 0144 46E0     		b	.L109
 3255              	.L106:
 544:gfx.c         ****                         } else if(bg != color) {
 3256              		.loc 1 544 0
 3257 0146 B7F84420 		ldrh	r2, [r7, #68]
 3258 014a B7F84030 		ldrh	r3, [r7, #64]
 3259 014e 9A42     		cmp	r2, r3
 3260 0150 40D0     		beq	.L109
 545:gfx.c         ****                             if(size == 1)
 3261              		.loc 1 545 0
 3262 0152 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3263 0156 012B     		cmp	r3, #1
 3264 0158 13D1     		bne	.L110
 546:gfx.c         ****                                 GFXwritePixel(myGFX,x+i, y+j, bg);
 3265              		.loc 1 546 0
 3266 015a 97F92F30 		ldrsb	r3, [r7, #47]
 3267 015e 9AB2     		uxth	r2, r3
 3268 0160 7B89     		ldrh	r3, [r7, #10]
 3269 0162 1344     		add	r3, r3, r2
 3270 0164 9BB2     		uxth	r3, r3
 3271 0166 19B2     		sxth	r1, r3
 3272 0168 97F92D30 		ldrsb	r3, [r7, #45]
 3273 016c 9AB2     		uxth	r2, r3
 3274 016e 3B89     		ldrh	r3, [r7, #8]
 3275 0170 1344     		add	r3, r3, r2
 3276 0172 9BB2     		uxth	r3, r3
 3277 0174 1AB2     		sxth	r2, r3
 3278 0176 B7F84430 		ldrh	r3, [r7, #68]
 3279 017a F868     		ldr	r0, [r7, #12]
 3280 017c FFF7FEFF 		bl	GFXwritePixel
 3281 0180 28E0     		b	.L109
 3282              	.L110:
 547:gfx.c         ****                             else
 548:gfx.c         ****                                 GFXwriteFillRect(myGFX,x+i*size, y+j*size, size, size, bg);
 3283              		.loc 1 548 0
 3284 0182 97F92F30 		ldrsb	r3, [r7, #47]
 3285 0186 9BB2     		uxth	r3, r3
 3286 0188 97F84820 		ldrb	r2, [r7, #72]	@ zero_extendqisi2
 3287 018c 92B2     		uxth	r2, r2
 3288 018e 02FB03F3 		mul	r3, r2, r3
 3289 0192 9AB2     		uxth	r2, r3
 3290 0194 7B89     		ldrh	r3, [r7, #10]
 3291 0196 1344     		add	r3, r3, r2
 3292 0198 9BB2     		uxth	r3, r3
 3293 019a 19B2     		sxth	r1, r3
 3294 019c 97F92D30 		ldrsb	r3, [r7, #45]
 3295 01a0 9BB2     		uxth	r3, r3
 3296 01a2 97F84820 		ldrb	r2, [r7, #72]	@ zero_extendqisi2
 3297 01a6 92B2     		uxth	r2, r2
 3298 01a8 02FB03F3 		mul	r3, r2, r3
 3299 01ac 9AB2     		uxth	r2, r3
 3300 01ae 3B89     		ldrh	r3, [r7, #8]
 3301 01b0 1344     		add	r3, r3, r2
 3302 01b2 9BB2     		uxth	r3, r3
 3303 01b4 18B2     		sxth	r0, r3
 3304 01b6 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 69


 3305 01ba 1CB2     		sxth	r4, r3
 3306 01bc 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3307 01c0 1BB2     		sxth	r3, r3
 3308 01c2 B7F84420 		ldrh	r2, [r7, #68]
 3309 01c6 0192     		str	r2, [sp, #4]
 3310 01c8 0093     		str	r3, [sp]
 3311 01ca 2346     		mov	r3, r4
 3312 01cc 0246     		mov	r2, r0
 3313 01ce F868     		ldr	r0, [r7, #12]
 3314 01d0 FFF7FEFF 		bl	GFXwriteFillRect
 3315              	.L109:
 538:gfx.c         ****                         if(line & 1) {
 3316              		.loc 1 538 0 discriminator 2
 3317 01d4 97F92D30 		ldrsb	r3, [r7, #45]
 3318 01d8 DBB2     		uxtb	r3, r3
 3319 01da 0133     		adds	r3, r3, #1
 3320 01dc DBB2     		uxtb	r3, r3
 3321 01de 87F82D30 		strb	r3, [r7, #45]
 3322 01e2 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 3323 01e6 5B08     		lsrs	r3, r3, #1
 3324 01e8 87F82E30 		strb	r3, [r7, #46]
 3325              	.L105:
 538:gfx.c         ****                         if(line & 1) {
 3326              		.loc 1 538 0 is_stmt 0 discriminator 1
 3327 01ec 97F92D30 		ldrsb	r3, [r7, #45]
 3328 01f0 072B     		cmp	r3, #7
 3329 01f2 7FF760AF 		ble	.L111
 3330              	.LBE23:
 3331              	.LBE22:
 536:gfx.c         ****                     uint8_t line = pgm_read_byte(&myGFX->gfxFont[c * 5 + i]);
 3332              		.loc 1 536 0 is_stmt 1 discriminator 2
 3333 01f6 97F92F30 		ldrsb	r3, [r7, #47]
 3334 01fa DBB2     		uxtb	r3, r3
 3335 01fc 0133     		adds	r3, r3, #1
 3336 01fe DBB2     		uxtb	r3, r3
 3337 0200 87F82F30 		strb	r3, [r7, #47]
 3338              	.L104:
 536:gfx.c         ****                     uint8_t line = pgm_read_byte(&myGFX->gfxFont[c * 5 + i]);
 3339              		.loc 1 536 0 is_stmt 0 discriminator 1
 3340 0204 97F92F30 		ldrsb	r3, [r7, #47]
 3341 0208 042B     		cmp	r3, #4
 3342 020a 7FF73EAF 		ble	.L112
 3343              	.LBE21:
 549:gfx.c         ****                         }
 550:gfx.c         ****                     }
 551:gfx.c         ****                 }
 552:gfx.c         ****                 if(bg != color) { // If opaque, draw vertical line for last column
 3344              		.loc 1 552 0 is_stmt 1
 3345 020e B7F84420 		ldrh	r2, [r7, #68]
 3346 0212 B7F84030 		ldrh	r3, [r7, #64]
 3347 0216 9A42     		cmp	r2, r3
 3348 0218 00F0F580 		beq	.L98
 553:gfx.c         ****                     if(size == 1) GFXwriteFastVLine(myGFX,x+5, y, 8, bg);
 3349              		.loc 1 553 0
 3350 021c 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3351 0220 012B     		cmp	r3, #1
 3352 0222 0DD1     		bne	.L114
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 70


 3353              		.loc 1 553 0 is_stmt 0 discriminator 1
 3354 0224 7B89     		ldrh	r3, [r7, #10]
 3355 0226 0533     		adds	r3, r3, #5
 3356 0228 9BB2     		uxth	r3, r3
 3357 022a 19B2     		sxth	r1, r3
 3358 022c B7F90820 		ldrsh	r2, [r7, #8]
 3359 0230 B7F84430 		ldrh	r3, [r7, #68]
 3360 0234 0093     		str	r3, [sp]
 3361 0236 0823     		movs	r3, #8
 3362 0238 F868     		ldr	r0, [r7, #12]
 3363 023a FFF7FEFF 		bl	GFXwriteFastVLine
 3364 023e E2E0     		b	.L98
 3365              	.L114:
 554:gfx.c         ****                     else          GFXwriteFillRect(myGFX,x+5*size, y, size, 8*size, bg);
 3366              		.loc 1 554 0 is_stmt 1
 3367 0240 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3368 0244 9BB2     		uxth	r3, r3
 3369 0246 1A46     		mov	r2, r3	@ movhi
 3370 0248 9200     		lsls	r2, r2, #2
 3371 024a 1344     		add	r3, r3, r2
 3372 024c 9AB2     		uxth	r2, r3
 3373 024e 7B89     		ldrh	r3, [r7, #10]
 3374 0250 1344     		add	r3, r3, r2
 3375 0252 9BB2     		uxth	r3, r3
 3376 0254 19B2     		sxth	r1, r3
 3377 0256 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3378 025a 1CB2     		sxth	r4, r3
 3379 025c 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3380 0260 9BB2     		uxth	r3, r3
 3381 0262 DB00     		lsls	r3, r3, #3
 3382 0264 9BB2     		uxth	r3, r3
 3383 0266 1BB2     		sxth	r3, r3
 3384 0268 B7F90800 		ldrsh	r0, [r7, #8]
 3385 026c B7F84420 		ldrh	r2, [r7, #68]
 3386 0270 0192     		str	r2, [sp, #4]
 3387 0272 0093     		str	r3, [sp]
 3388 0274 2346     		mov	r3, r4
 3389 0276 0246     		mov	r2, r0
 3390 0278 F868     		ldr	r0, [r7, #12]
 3391 027a FFF7FEFF 		bl	GFXwriteFillRect
 3392 027e C2E0     		b	.L98
 3393              	.L99:
 3394              	.LBB24:
 555:gfx.c         ****                 }
 556:gfx.c         ****                 //endWrite();
 557:gfx.c         ****                 
 558:gfx.c         ****             } else { // Custom font
 559:gfx.c         ****                 
 560:gfx.c         ****                 // Character is assumed previously filtered by write() to eliminate
 561:gfx.c         ****                 // newlines, returns, non-printable characters, etc.  Calling
 562:gfx.c         ****                 // drawChar() directly with 'bad' characters of font may cause mayhem!
 563:gfx.c         ****                 
 564:gfx.c         ****                 c -= (uint8_t)pgm_read_byte(&myGFX->gfxFont->first);
 3395              		.loc 1 564 0
 3396 0280 FB68     		ldr	r3, [r7, #12]
 3397 0282 9B69     		ldr	r3, [r3, #24]
 3398 0284 0833     		adds	r3, r3, #8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 71


 3399 0286 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3400 0288 FA79     		ldrb	r2, [r7, #7]
 3401 028a D31A     		subs	r3, r2, r3
 3402 028c FB71     		strb	r3, [r7, #7]
 565:gfx.c         ****                 GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&myGFX->gfxFont->glyph))[c]);
 3403              		.loc 1 565 0
 3404 028e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3405 0290 DA00     		lsls	r2, r3, #3
 3406 0292 FB68     		ldr	r3, [r7, #12]
 3407 0294 9B69     		ldr	r3, [r3, #24]
 3408 0296 0433     		adds	r3, r3, #4
 3409 0298 18CB     		ldmia	r3, {r3-r4}
 3410 029a 1344     		add	r3, r3, r2
 3411 029c FB61     		str	r3, [r7, #28]
 566:gfx.c         ****                 uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&myGFX->gfxFont->bitmap);
 3412              		.loc 1 566 0
 3413 029e FB68     		ldr	r3, [r7, #12]
 3414 02a0 9B69     		ldr	r3, [r3, #24]
 3415 02a2 18CB     		ldmia	r3, {r3-r4}
 3416 02a4 BB61     		str	r3, [r7, #24]
 567:gfx.c         ****                 
 568:gfx.c         ****                 uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 3417              		.loc 1 568 0
 3418 02a6 FB69     		ldr	r3, [r7, #28]
 3419 02a8 1B88     		ldrh	r3, [r3]	@ movhi
 3420 02aa 7B85     		strh	r3, [r7, #42]	@ movhi
 569:gfx.c         ****                 uint8_t  w  = pgm_read_byte(&glyph->width),
 3421              		.loc 1 569 0
 3422 02ac FB69     		ldr	r3, [r7, #28]
 3423 02ae 9B78     		ldrb	r3, [r3, #2]
 3424 02b0 FB75     		strb	r3, [r7, #23]
 570:gfx.c         ****                 h  = pgm_read_byte(&glyph->height);
 3425              		.loc 1 570 0
 3426 02b2 FB69     		ldr	r3, [r7, #28]
 3427 02b4 DB78     		ldrb	r3, [r3, #3]
 3428 02b6 BB75     		strb	r3, [r7, #22]
 571:gfx.c         ****                 int8_t   xo = pgm_read_byte(&glyph->xOffset),
 3429              		.loc 1 571 0
 3430 02b8 FB69     		ldr	r3, [r7, #28]
 3431 02ba 0533     		adds	r3, r3, #5
 3432 02bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3433 02be 7B75     		strb	r3, [r7, #21]
 572:gfx.c         ****                 yo = pgm_read_byte(&glyph->yOffset);
 3434              		.loc 1 572 0
 3435 02c0 FB69     		ldr	r3, [r7, #28]
 3436 02c2 0633     		adds	r3, r3, #6
 3437 02c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3438 02c6 3B75     		strb	r3, [r7, #20]
 573:gfx.c         ****                 uint8_t  xx, yy, bits = 0, bit = 0;
 3439              		.loc 1 573 0
 3440 02c8 0023     		movs	r3, #0
 3441 02ca 87F82730 		strb	r3, [r7, #39]
 3442 02ce 0023     		movs	r3, #0
 3443 02d0 87F82630 		strb	r3, [r7, #38]
 574:gfx.c         ****                 int16_t  xo16 = 0, yo16 = 0;
 3444              		.loc 1 574 0
 3445 02d4 0023     		movs	r3, #0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 72


 3446 02d6 BB84     		strh	r3, [r7, #36]	@ movhi
 3447 02d8 0023     		movs	r3, #0
 3448 02da 7B84     		strh	r3, [r7, #34]	@ movhi
 575:gfx.c         ****                 
 576:gfx.c         ****                 if(size > 1) {
 3449              		.loc 1 576 0
 3450 02dc 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3451 02e0 012B     		cmp	r3, #1
 3452 02e2 05D9     		bls	.L115
 577:gfx.c         ****                     xo16 = xo;
 3453              		.loc 1 577 0
 3454 02e4 97F91530 		ldrsb	r3, [r7, #21]
 3455 02e8 BB84     		strh	r3, [r7, #36]	@ movhi
 578:gfx.c         ****                     yo16 = yo;
 3456              		.loc 1 578 0
 3457 02ea 97F91430 		ldrsb	r3, [r7, #20]
 3458 02ee 7B84     		strh	r3, [r7, #34]	@ movhi
 3459              	.L115:
 579:gfx.c         ****                 }
 580:gfx.c         ****                 
 581:gfx.c         ****                 // Todo: Add character clipping here
 582:gfx.c         ****                 
 583:gfx.c         ****                 // NOTE: THERE IS NO 'BACKGROUND' COLOR OPTION ON CUSTOM FONTS.
 584:gfx.c         ****                 // THIS IS ON PURPOSE AND BY DESIGN.  The background color feature
 585:gfx.c         ****                 // has typically been used with the 'classic' font to overwrite old
 586:gfx.c         ****                 // screen contents with new data.  This ONLY works because the
 587:gfx.c         ****                 // characters are a uniform size; it's not a sensible thing to do with
 588:gfx.c         ****                 // proportionally-spaced fonts with glyphs of varying sizes (and that
 589:gfx.c         ****                 // may overlap).  To replace previously-drawn text when using a custom
 590:gfx.c         ****                 // font, use the getTextBounds() function to determine the smallest
 591:gfx.c         ****                 // rectangle encompassing a string, erase the area with fillRect(),
 592:gfx.c         ****                 // then draw new text.  This WILL infortunately 'blink' the text, but
 593:gfx.c         ****                 // is unavoidable.  Drawing 'background' pixels will NOT fix this,
 594:gfx.c         ****                 // only creates a new set of problems.  Have an idea to work around
 595:gfx.c         ****                 // this (a canvas object type for MCUs that can afford the RAM and
 596:gfx.c         ****                 // displays supporting setAddrWindow() and pushColors()), but haven't
 597:gfx.c         ****                 // implemented this yet.
 598:gfx.c         ****                 
 599:gfx.c         ****                 //startWrite();
 600:gfx.c         ****                 for(yy=0; yy<h; yy++) {
 3460              		.loc 1 600 0
 3461 02f0 0023     		movs	r3, #0
 3462 02f2 87F82830 		strb	r3, [r7, #40]
 3463 02f6 7EE0     		b	.L116
 3464              	.L122:
 601:gfx.c         ****                     for(xx=0; xx<w; xx++) {
 3465              		.loc 1 601 0
 3466 02f8 0023     		movs	r3, #0
 3467 02fa 87F82930 		strb	r3, [r7, #41]
 3468 02fe 70E0     		b	.L117
 3469              	.L121:
 602:gfx.c         ****                         if(!(bit++ & 7)) {
 3470              		.loc 1 602 0
 3471 0300 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3472 0304 5A1C     		adds	r2, r3, #1
 3473 0306 87F82620 		strb	r2, [r7, #38]
 3474 030a 03F00703 		and	r3, r3, #7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 73


 3475 030e 002B     		cmp	r3, #0
 3476 0310 08D1     		bne	.L118
 603:gfx.c         ****                             bits = pgm_read_byte(&bitmap[bo++]);
 3477              		.loc 1 603 0
 3478 0312 7B8D     		ldrh	r3, [r7, #42]
 3479 0314 5A1C     		adds	r2, r3, #1
 3480 0316 7A85     		strh	r2, [r7, #42]	@ movhi
 3481 0318 1A46     		mov	r2, r3
 3482 031a BB69     		ldr	r3, [r7, #24]
 3483 031c 1344     		add	r3, r3, r2
 3484 031e 1B78     		ldrb	r3, [r3]
 3485 0320 87F82730 		strb	r3, [r7, #39]
 3486              	.L118:
 604:gfx.c         ****                         }
 605:gfx.c         ****                         if(bits & 0x80) {
 3487              		.loc 1 605 0
 3488 0324 97F92730 		ldrsb	r3, [r7, #39]
 3489 0328 002B     		cmp	r3, #0
 3490 032a 50DA     		bge	.L119
 606:gfx.c         ****                             if(size == 1) {
 3491              		.loc 1 606 0
 3492 032c 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3493 0330 012B     		cmp	r3, #1
 3494 0332 1DD1     		bne	.L120
 607:gfx.c         ****                                 GFXwritePixel(myGFX,x+xo+xx, y+yo+yy, color);
 3495              		.loc 1 607 0
 3496 0334 97F91530 		ldrsb	r3, [r7, #21]
 3497 0338 9AB2     		uxth	r2, r3
 3498 033a 7B89     		ldrh	r3, [r7, #10]
 3499 033c 1344     		add	r3, r3, r2
 3500 033e 9AB2     		uxth	r2, r3
 3501 0340 97F82930 		ldrb	r3, [r7, #41]	@ zero_extendqisi2
 3502 0344 9BB2     		uxth	r3, r3
 3503 0346 1344     		add	r3, r3, r2
 3504 0348 9BB2     		uxth	r3, r3
 3505 034a 19B2     		sxth	r1, r3
 3506 034c 97F91430 		ldrsb	r3, [r7, #20]
 3507 0350 9AB2     		uxth	r2, r3
 3508 0352 3B89     		ldrh	r3, [r7, #8]
 3509 0354 1344     		add	r3, r3, r2
 3510 0356 9AB2     		uxth	r2, r3
 3511 0358 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 3512 035c 9BB2     		uxth	r3, r3
 3513 035e 1344     		add	r3, r3, r2
 3514 0360 9BB2     		uxth	r3, r3
 3515 0362 1AB2     		sxth	r2, r3
 3516 0364 B7F84030 		ldrh	r3, [r7, #64]
 3517 0368 F868     		ldr	r0, [r7, #12]
 3518 036a FFF7FEFF 		bl	GFXwritePixel
 3519 036e 2EE0     		b	.L119
 3520              	.L120:
 608:gfx.c         ****                             } else {
 609:gfx.c         ****                                 GFXwriteFillRect(myGFX,x+(xo16+xx)*size, y+(yo16+yy)*size,
 3521              		.loc 1 609 0
 3522 0370 B7F92420 		ldrsh	r2, [r7, #36]
 3523 0374 97F82930 		ldrb	r3, [r7, #41]	@ zero_extendqisi2
 3524 0378 1344     		add	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 74


 3525 037a 9BB2     		uxth	r3, r3
 3526 037c 97F84820 		ldrb	r2, [r7, #72]	@ zero_extendqisi2
 3527 0380 92B2     		uxth	r2, r2
 3528 0382 02FB03F3 		mul	r3, r2, r3
 3529 0386 9AB2     		uxth	r2, r3
 3530 0388 7B89     		ldrh	r3, [r7, #10]
 3531 038a 1344     		add	r3, r3, r2
 3532 038c 9BB2     		uxth	r3, r3
 3533 038e 19B2     		sxth	r1, r3
 3534 0390 B7F92220 		ldrsh	r2, [r7, #34]
 3535 0394 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 3536 0398 1344     		add	r3, r3, r2
 3537 039a 9BB2     		uxth	r3, r3
 3538 039c 97F84820 		ldrb	r2, [r7, #72]	@ zero_extendqisi2
 3539 03a0 92B2     		uxth	r2, r2
 3540 03a2 02FB03F3 		mul	r3, r2, r3
 3541 03a6 9AB2     		uxth	r2, r3
 3542 03a8 3B89     		ldrh	r3, [r7, #8]
 3543 03aa 1344     		add	r3, r3, r2
 3544 03ac 9BB2     		uxth	r3, r3
 3545 03ae 18B2     		sxth	r0, r3
 3546 03b0 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3547 03b4 1CB2     		sxth	r4, r3
 3548 03b6 97F84830 		ldrb	r3, [r7, #72]	@ zero_extendqisi2
 3549 03ba 1BB2     		sxth	r3, r3
 3550 03bc B7F84020 		ldrh	r2, [r7, #64]
 3551 03c0 0192     		str	r2, [sp, #4]
 3552 03c2 0093     		str	r3, [sp]
 3553 03c4 2346     		mov	r3, r4
 3554 03c6 0246     		mov	r2, r0
 3555 03c8 F868     		ldr	r0, [r7, #12]
 3556 03ca FFF7FEFF 		bl	GFXwriteFillRect
 3557              	.L119:
 610:gfx.c         ****                                                  size, size, color);
 611:gfx.c         ****                             }
 612:gfx.c         ****                         }
 613:gfx.c         ****                         bits <<= 1;
 3558              		.loc 1 613 0 discriminator 2
 3559 03ce 97F82730 		ldrb	r3, [r7, #39]
 3560 03d2 5B00     		lsls	r3, r3, #1
 3561 03d4 87F82730 		strb	r3, [r7, #39]
 601:gfx.c         ****                         if(!(bit++ & 7)) {
 3562              		.loc 1 601 0 discriminator 2
 3563 03d8 97F82930 		ldrb	r3, [r7, #41]	@ zero_extendqisi2
 3564 03dc 0133     		adds	r3, r3, #1
 3565 03de 87F82930 		strb	r3, [r7, #41]
 3566              	.L117:
 601:gfx.c         ****                         if(!(bit++ & 7)) {
 3567              		.loc 1 601 0 is_stmt 0 discriminator 1
 3568 03e2 97F82920 		ldrb	r2, [r7, #41]	@ zero_extendqisi2
 3569 03e6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3570 03e8 9A42     		cmp	r2, r3
 3571 03ea 89D3     		bcc	.L121
 600:gfx.c         ****                     for(xx=0; xx<w; xx++) {
 3572              		.loc 1 600 0 is_stmt 1 discriminator 2
 3573 03ec 97F82830 		ldrb	r3, [r7, #40]	@ zero_extendqisi2
 3574 03f0 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 75


 3575 03f2 87F82830 		strb	r3, [r7, #40]
 3576              	.L116:
 600:gfx.c         ****                     for(xx=0; xx<w; xx++) {
 3577              		.loc 1 600 0 is_stmt 0 discriminator 1
 3578 03f6 97F82820 		ldrb	r2, [r7, #40]	@ zero_extendqisi2
 3579 03fa BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 3580 03fc 9A42     		cmp	r2, r3
 3581 03fe FFF47BAF 		bcc	.L122
 3582 0402 00E0     		b	.L98
 3583              	.L123:
 3584              	.LBE24:
 531:gfx.c         ****                 
 3585              		.loc 1 531 0 is_stmt 1
 3586 0404 00BF     		nop
 3587              	.L98:
 614:gfx.c         ****                     }
 615:gfx.c         ****                 }
 616:gfx.c         ****                 //endWrite();
 617:gfx.c         ****                 
 618:gfx.c         ****             } // End classic vs custom font
 619:gfx.c         ****         }
 3588              		.loc 1 619 0
 3589 0406 3437     		adds	r7, r7, #52
 3590              		.cfi_def_cfa_offset 12
 3591 0408 BD46     		mov	sp, r7
 3592              		.cfi_def_cfa_register 13
 3593              		@ sp needed
 3594 040a 90BD     		pop	{r4, r7, pc}
 3595              		.cfi_endproc
 3596              	.LFE88:
 3597              		.size	GFXdrawChar, .-GFXdrawChar
 3598              		.section	.text.GFXcheckScrollWrap,"ax",%progbits
 3599              		.align	2
 3600              		.global	GFXcheckScrollWrap
 3601              		.thumb
 3602              		.thumb_func
 3603              		.type	GFXcheckScrollWrap, %function
 3604              	GFXcheckScrollWrap:
 3605              	.LFB89:
 620:gfx.c         ****         
 621:gfx.c         ****         
 622:gfx.c         ****         void GFXcheckScrollWrap(GFX* myGFX, int16_t fontWidth) {
 3606              		.loc 1 622 0
 3607              		.cfi_startproc
 3608              		@ args = 0, pretend = 0, frame = 16
 3609              		@ frame_needed = 1, uses_anonymous_args = 0
 3610 0000 80B5     		push	{r7, lr}
 3611              		.cfi_def_cfa_offset 8
 3612              		.cfi_offset 7, -8
 3613              		.cfi_offset 14, -4
 3614 0002 84B0     		sub	sp, sp, #16
 3615              		.cfi_def_cfa_offset 24
 3616 0004 00AF     		add	r7, sp, #0
 3617              		.cfi_def_cfa_register 7
 3618 0006 7860     		str	r0, [r7, #4]
 3619 0008 0B46     		mov	r3, r1
 3620 000a 7B80     		strh	r3, [r7, #2]	@ movhi
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 76


 623:gfx.c         ****             if(myGFX->wrap && ((myGFX->cursor_x + fontWidth) >= myGFX->_width)) { // Heading off ed
 3621              		.loc 1 623 0
 3622 000c 7B68     		ldr	r3, [r7, #4]
 3623 000e 9B8A     		ldrh	r3, [r3, #20]
 3624 0010 002B     		cmp	r3, #0
 3625 0012 19D0     		beq	.L125
 3626              		.loc 1 623 0 is_stmt 0 discriminator 1
 3627 0014 7B68     		ldr	r3, [r7, #4]
 3628 0016 9B89     		ldrh	r3, [r3, #12]
 3629 0018 1A46     		mov	r2, r3
 3630 001a B7F90230 		ldrsh	r3, [r7, #2]
 3631 001e 1344     		add	r3, r3, r2
 3632 0020 7A68     		ldr	r2, [r7, #4]
 3633 0022 9288     		ldrh	r2, [r2, #4]
 3634 0024 9342     		cmp	r3, r2
 3635 0026 0FDB     		blt	.L125
 624:gfx.c         ****                 myGFX->cursor_x  = 0;            // Reset x to zero
 3636              		.loc 1 624 0 is_stmt 1
 3637 0028 7B68     		ldr	r3, [r7, #4]
 3638 002a 0022     		movs	r2, #0
 3639 002c 9A81     		strh	r2, [r3, #12]	@ movhi
 625:gfx.c         ****                 myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize; // Advance y one line
 3640              		.loc 1 625 0
 3641 002e 7B68     		ldr	r3, [r7, #4]
 3642 0030 5A89     		ldrh	r2, [r3, #10]
 3643 0032 7B68     		ldr	r3, [r7, #4]
 3644 0034 9B8B     		ldrh	r3, [r3, #28]
 3645 0036 7968     		ldr	r1, [r7, #4]
 3646 0038 C989     		ldrh	r1, [r1, #14]
 3647 003a 01FB03F3 		mul	r3, r1, r3
 3648 003e 9BB2     		uxth	r3, r3
 3649 0040 1344     		add	r3, r3, r2
 3650 0042 9AB2     		uxth	r2, r3
 3651 0044 7B68     		ldr	r3, [r7, #4]
 3652 0046 5A81     		strh	r2, [r3, #10]	@ movhi
 3653              	.L125:
 626:gfx.c         ****             }
 627:gfx.c         ****             
 628:gfx.c         ****             if (myGFX->autoscroll) {
 3654              		.loc 1 628 0
 3655 0048 7B68     		ldr	r3, [r7, #4]
 3656 004a 1B8C     		ldrh	r3, [r3, #32]
 3657 004c 002B     		cmp	r3, #0
 3658 004e 4FD0     		beq	.L131
 3659              	.LBB25:
 629:gfx.c         ****                 int16_t fontOffset;
 630:gfx.c         ****                 
 631:gfx.c         ****                 if(!myGFX->gfxFont) { // 'Classic' built-in font
 3660              		.loc 1 631 0
 3661 0050 7B68     		ldr	r3, [r7, #4]
 3662 0052 9B69     		ldr	r3, [r3, #24]
 3663 0054 002B     		cmp	r3, #0
 3664 0056 0AD1     		bne	.L127
 632:gfx.c         ****                     fontOffset = (myGFX->fontHeight * myGFX->textsize)-1; // cursor defines upper l
 3665              		.loc 1 632 0
 3666 0058 7B68     		ldr	r3, [r7, #4]
 3667 005a 9B8B     		ldrh	r3, [r3, #28]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 77


 3668 005c 7A68     		ldr	r2, [r7, #4]
 3669 005e D289     		ldrh	r2, [r2, #14]
 3670 0060 02FB03F3 		mul	r3, r2, r3
 3671 0064 9BB2     		uxth	r3, r3
 3672 0066 013B     		subs	r3, r3, #1
 3673 0068 9BB2     		uxth	r3, r3
 3674 006a FB81     		strh	r3, [r7, #14]	@ movhi
 3675 006c 01E0     		b	.L128
 3676              	.L127:
 633:gfx.c         ****                 } else {       // Custom font
 634:gfx.c         ****                     fontOffset = 0;                         // cursor defines lower left corner of 
 3677              		.loc 1 634 0
 3678 006e 0023     		movs	r3, #0
 3679 0070 FB81     		strh	r3, [r7, #14]	@ movhi
 3680              	.L128:
 635:gfx.c         ****                 }
 636:gfx.c         ****                 
 637:gfx.c         ****                 // lower unified border of character
 638:gfx.c         ****                 // these does not apply to charachters like "g" oder "j" which will be cut off
 639:gfx.c         ****                 uint16_t cursor = myGFX->cursor_y + fontOffset + myGFX->fontDesc * myGFX->textsize;
 3681              		.loc 1 639 0
 3682 0072 7B68     		ldr	r3, [r7, #4]
 3683 0074 5A89     		ldrh	r2, [r3, #10]
 3684 0076 FB89     		ldrh	r3, [r7, #14]
 3685 0078 1344     		add	r3, r3, r2
 3686 007a 9AB2     		uxth	r2, r3
 3687 007c 7B68     		ldr	r3, [r7, #4]
 3688 007e DB8B     		ldrh	r3, [r3, #30]
 3689 0080 7968     		ldr	r1, [r7, #4]
 3690 0082 C989     		ldrh	r1, [r1, #14]
 3691 0084 01FB03F3 		mul	r3, r1, r3
 3692 0088 9BB2     		uxth	r3, r3
 3693 008a 1344     		add	r3, r3, r2
 3694 008c BB81     		strh	r3, [r7, #12]	@ movhi
 640:gfx.c         ****                 
 641:gfx.c         ****                 if (cursor >= myGFX->_height) {
 3695              		.loc 1 641 0
 3696 008e 7B68     		ldr	r3, [r7, #4]
 3697 0090 DB88     		ldrh	r3, [r3, #6]
 3698 0092 BA89     		ldrh	r2, [r7, #12]
 3699 0094 9A42     		cmp	r2, r3
 3700 0096 2BD3     		bcc	.L131
 642:gfx.c         ****                     GFXscrollUp(myGFX, cursor - myGFX->_height+1, myGFX->textcolor != myGFX->textbg
 3701              		.loc 1 642 0
 3702 0098 BB89     		ldrh	r3, [r7, #12]	@ movhi
 3703 009a DAB2     		uxtb	r2, r3
 3704 009c 7B68     		ldr	r3, [r7, #4]
 3705 009e DB88     		ldrh	r3, [r3, #6]
 3706 00a0 DBB2     		uxtb	r3, r3
 3707 00a2 D31A     		subs	r3, r2, r3
 3708 00a4 DBB2     		uxtb	r3, r3
 3709 00a6 0133     		adds	r3, r3, #1
 3710 00a8 D9B2     		uxtb	r1, r3
 3711 00aa 7B68     		ldr	r3, [r7, #4]
 3712 00ac 1A8A     		ldrh	r2, [r3, #16]
 3713 00ae 7B68     		ldr	r3, [r7, #4]
 3714 00b0 5B8A     		ldrh	r3, [r3, #18]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 78


 3715 00b2 9A42     		cmp	r2, r3
 3716 00b4 02D0     		beq	.L129
 3717              		.loc 1 642 0 is_stmt 0 discriminator 1
 3718 00b6 7B68     		ldr	r3, [r7, #4]
 3719 00b8 5B8A     		ldrh	r3, [r3, #18]
 3720 00ba 00E0     		b	.L130
 3721              	.L129:
 3722              		.loc 1 642 0 discriminator 2
 3723 00bc 0023     		movs	r3, #0
 3724              	.L130:
 3725              		.loc 1 642 0 discriminator 4
 3726 00be 1A46     		mov	r2, r3
 3727 00c0 7868     		ldr	r0, [r7, #4]
 3728 00c2 FFF7FEFF 		bl	GFXscrollUp
 643:gfx.c         ****                     
 644:gfx.c         ****                     myGFX->cursor_x  = 0;
 3729              		.loc 1 644 0 is_stmt 1 discriminator 4
 3730 00c6 7B68     		ldr	r3, [r7, #4]
 3731 00c8 0022     		movs	r2, #0
 3732 00ca 9A81     		strh	r2, [r3, #12]	@ movhi
 645:gfx.c         ****                     myGFX->cursor_y = myGFX->_height - fontOffset-1 - myGFX->fontDesc * myGFX->text
 3733              		.loc 1 645 0 discriminator 4
 3734 00cc 7B68     		ldr	r3, [r7, #4]
 3735 00ce DA88     		ldrh	r2, [r3, #6]
 3736 00d0 FB89     		ldrh	r3, [r7, #14]
 3737 00d2 D31A     		subs	r3, r2, r3
 3738 00d4 9AB2     		uxth	r2, r3
 3739 00d6 7B68     		ldr	r3, [r7, #4]
 3740 00d8 DB8B     		ldrh	r3, [r3, #30]
 3741 00da 7968     		ldr	r1, [r7, #4]
 3742 00dc C989     		ldrh	r1, [r1, #14]
 3743 00de 01FB03F3 		mul	r3, r1, r3
 3744 00e2 9BB2     		uxth	r3, r3
 3745 00e4 D31A     		subs	r3, r2, r3
 3746 00e6 9BB2     		uxth	r3, r3
 3747 00e8 013B     		subs	r3, r3, #1
 3748 00ea 9AB2     		uxth	r2, r3
 3749 00ec 7B68     		ldr	r3, [r7, #4]
 3750 00ee 5A81     		strh	r2, [r3, #10]	@ movhi
 3751              	.L131:
 3752              	.LBE25:
 646:gfx.c         ****                 }
 647:gfx.c         ****             }
 648:gfx.c         ****         }
 3753              		.loc 1 648 0
 3754 00f0 00BF     		nop
 3755 00f2 1037     		adds	r7, r7, #16
 3756              		.cfi_def_cfa_offset 8
 3757 00f4 BD46     		mov	sp, r7
 3758              		.cfi_def_cfa_register 13
 3759              		@ sp needed
 3760 00f6 80BD     		pop	{r7, pc}
 3761              		.cfi_endproc
 3762              	.LFE89:
 3763              		.size	GFXcheckScrollWrap, .-GFXcheckScrollWrap
 3764              		.section	.text.GFXwrite,"ax",%progbits
 3765              		.align	2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 79


 3766              		.global	GFXwrite
 3767              		.thumb
 3768              		.thumb_func
 3769              		.type	GFXwrite, %function
 3770              	GFXwrite:
 3771              	.LFB90:
 649:gfx.c         ****         
 650:gfx.c         ****         
 651:gfx.c         ****         void GFXwrite(GFX* myGFX, uint8_t c) {
 3772              		.loc 1 651 0
 3773              		.cfi_startproc
 3774              		@ args = 0, pretend = 0, frame = 24
 3775              		@ frame_needed = 1, uses_anonymous_args = 0
 3776 0000 B0B5     		push	{r4, r5, r7, lr}
 3777              		.cfi_def_cfa_offset 16
 3778              		.cfi_offset 4, -16
 3779              		.cfi_offset 5, -12
 3780              		.cfi_offset 7, -8
 3781              		.cfi_offset 14, -4
 3782 0002 8AB0     		sub	sp, sp, #40
 3783              		.cfi_def_cfa_offset 56
 3784 0004 04AF     		add	r7, sp, #16
 3785              		.cfi_def_cfa 7, 40
 3786 0006 7860     		str	r0, [r7, #4]
 3787 0008 0B46     		mov	r3, r1
 3788 000a FB70     		strb	r3, [r7, #3]
 652:gfx.c         ****             if(!myGFX->gfxFont) { // 'Classic' built-in font
 3789              		.loc 1 652 0
 3790 000c 7B68     		ldr	r3, [r7, #4]
 3791 000e 9B69     		ldr	r3, [r3, #24]
 3792 0010 002B     		cmp	r3, #0
 3793 0012 45D1     		bne	.L133
 653:gfx.c         ****                 if(c == '\n') {                        // Newline?
 3794              		.loc 1 653 0
 3795 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3796 0016 0A2B     		cmp	r3, #10
 3797 0018 10D1     		bne	.L134
 654:gfx.c         ****                     myGFX->cursor_y += myGFX->fontHeight * myGFX->textsize;
 3798              		.loc 1 654 0
 3799 001a 7B68     		ldr	r3, [r7, #4]
 3800 001c 5A89     		ldrh	r2, [r3, #10]
 3801 001e 7B68     		ldr	r3, [r7, #4]
 3802 0020 9B8B     		ldrh	r3, [r3, #28]
 3803 0022 7968     		ldr	r1, [r7, #4]
 3804 0024 C989     		ldrh	r1, [r1, #14]
 3805 0026 01FB03F3 		mul	r3, r1, r3
 3806 002a 9BB2     		uxth	r3, r3
 3807 002c 1344     		add	r3, r3, r2
 3808 002e 9AB2     		uxth	r2, r3
 3809 0030 7B68     		ldr	r3, [r7, #4]
 3810 0032 5A81     		strh	r2, [r3, #10]	@ movhi
 655:gfx.c         ****                     myGFX->cursor_x  = 0;                     // Reset x to zero,
 3811              		.loc 1 655 0
 3812 0034 7B68     		ldr	r3, [r7, #4]
 3813 0036 0022     		movs	r2, #0
 3814 0038 9A81     		strh	r2, [r3, #12]	@ movhi
 656:gfx.c         ****                     //cursor_y += textsize * 8;          // advance y one line
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 80


 657:gfx.c         ****                 } else if(c != '\r') {                 // Ignore carriage returns
 658:gfx.c         ****                     // if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
 659:gfx.c         ****                     //     cursor_x  = 0;                 // Reset x to zero,
 660:gfx.c         ****                     //     cursor_y += textsize * 8;      // advance y one line
 661:gfx.c         ****                     // }
 662:gfx.c         ****                     GFXcheckScrollWrap(myGFX, myGFX->textsize * 6 - myGFX->textsize * 2);
 663:gfx.c         ****                     GFXdrawChar(myGFX, myGFX->cursor_x, myGFX->cursor_y, c, myGFX->textcolor, myGFX
 664:gfx.c         ****                     myGFX->cursor_x += myGFX->textsize * 6;          // Advance x one char
 665:gfx.c         ****                 }
 666:gfx.c         ****                 
 667:gfx.c         ****             } else { // Custom font
 668:gfx.c         ****                 
 669:gfx.c         ****                 if(c == '\n') {
 670:gfx.c         ****                     myGFX->cursor_x  = 0;
 671:gfx.c         ****                     myGFX->cursor_y += (int16_t)myGFX->textsize *
 672:gfx.c         ****                     (uint8_t)pgm_read_byte(&myGFX->gfxFont->yAdvance);
 673:gfx.c         ****                 } else if(c != '\r') {
 674:gfx.c         ****                     uint8_t first = pgm_read_byte(&myGFX->gfxFont->first);
 675:gfx.c         ****                     if((c >= first) && (c <= (uint8_t)pgm_read_byte(&myGFX->gfxFont->last))) {
 676:gfx.c         ****                         GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 677:gfx.c         ****                                                                           &myGFX->gfxFont->glyph))[
 678:gfx.c         ****                         uint8_t   w     = pgm_read_byte(&glyph->width),
 679:gfx.c         ****                         h     = pgm_read_byte(&glyph->height);
 680:gfx.c         ****                         if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 681:gfx.c         ****                             int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 682:gfx.c         ****                             GFXcheckScrollWrap(myGFX, myGFX->textsize * (xo + w));
 683:gfx.c         ****                             // if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 684:gfx.c         ****                             //     cursor_x  = 0;
 685:gfx.c         ****                             //     cursor_y += (int16_t)textsize *
 686:gfx.c         ****                             //       (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 687:gfx.c         ****                             // }
 688:gfx.c         ****                             GFXdrawChar(myGFX, myGFX->cursor_x, myGFX->cursor_y, c, myGFX->textcolo
 689:gfx.c         ****                         }
 690:gfx.c         ****                         myGFX->cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)myGF
 691:gfx.c         ****                     }
 692:gfx.c         ****                 }
 693:gfx.c         ****                 
 694:gfx.c         ****             }
 695:gfx.c         ****         }
 3815              		.loc 1 695 0
 3816 003a AAE0     		b	.L139
 3817              	.L134:
 657:gfx.c         ****                     // if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
 3818              		.loc 1 657 0
 3819 003c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3820 003e 0D2B     		cmp	r3, #13
 3821 0040 00F0A780 		beq	.L139
 662:gfx.c         ****                     GFXdrawChar(myGFX, myGFX->cursor_x, myGFX->cursor_y, c, myGFX->textcolor, myGFX
 3822              		.loc 1 662 0
 3823 0044 7B68     		ldr	r3, [r7, #4]
 3824 0046 DB89     		ldrh	r3, [r3, #14]
 3825 0048 9B00     		lsls	r3, r3, #2
 3826 004a 9BB2     		uxth	r3, r3
 3827 004c 1BB2     		sxth	r3, r3
 3828 004e 1946     		mov	r1, r3
 3829 0050 7868     		ldr	r0, [r7, #4]
 3830 0052 FFF7FEFF 		bl	GFXcheckScrollWrap
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 81


 663:gfx.c         ****                     myGFX->cursor_x += myGFX->textsize * 6;          // Advance x one char
 3831              		.loc 1 663 0
 3832 0056 7B68     		ldr	r3, [r7, #4]
 3833 0058 9B89     		ldrh	r3, [r3, #12]
 3834 005a 18B2     		sxth	r0, r3
 3835 005c 7B68     		ldr	r3, [r7, #4]
 3836 005e 5B89     		ldrh	r3, [r3, #10]
 3837 0060 1CB2     		sxth	r4, r3
 3838 0062 7B68     		ldr	r3, [r7, #4]
 3839 0064 1B8A     		ldrh	r3, [r3, #16]
 3840 0066 7A68     		ldr	r2, [r7, #4]
 3841 0068 528A     		ldrh	r2, [r2, #18]
 3842 006a 7968     		ldr	r1, [r7, #4]
 3843 006c C989     		ldrh	r1, [r1, #14]
 3844 006e C9B2     		uxtb	r1, r1
 3845 0070 FD78     		ldrb	r5, [r7, #3]	@ zero_extendqisi2
 3846 0072 0291     		str	r1, [sp, #8]
 3847 0074 0192     		str	r2, [sp, #4]
 3848 0076 0093     		str	r3, [sp]
 3849 0078 2B46     		mov	r3, r5
 3850 007a 2246     		mov	r2, r4
 3851 007c 0146     		mov	r1, r0
 3852 007e 7868     		ldr	r0, [r7, #4]
 3853 0080 FFF7FEFF 		bl	GFXdrawChar
 664:gfx.c         ****                 }
 3854              		.loc 1 664 0
 3855 0084 7B68     		ldr	r3, [r7, #4]
 3856 0086 9A89     		ldrh	r2, [r3, #12]
 3857 0088 7B68     		ldr	r3, [r7, #4]
 3858 008a DB89     		ldrh	r3, [r3, #14]
 3859 008c 1946     		mov	r1, r3	@ movhi
 3860 008e 4900     		lsls	r1, r1, #1
 3861 0090 0B44     		add	r3, r3, r1
 3862 0092 5B00     		lsls	r3, r3, #1
 3863 0094 9BB2     		uxth	r3, r3
 3864 0096 1344     		add	r3, r3, r2
 3865 0098 9AB2     		uxth	r2, r3
 3866 009a 7B68     		ldr	r3, [r7, #4]
 3867 009c 9A81     		strh	r2, [r3, #12]	@ movhi
 3868              		.loc 1 695 0
 3869 009e 78E0     		b	.L139
 3870              	.L133:
 669:gfx.c         ****                     myGFX->cursor_x  = 0;
 3871              		.loc 1 669 0
 3872 00a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3873 00a2 0A2B     		cmp	r3, #10
 3874 00a4 13D1     		bne	.L137
 670:gfx.c         ****                     myGFX->cursor_y += (int16_t)myGFX->textsize *
 3875              		.loc 1 670 0
 3876 00a6 7B68     		ldr	r3, [r7, #4]
 3877 00a8 0022     		movs	r2, #0
 3878 00aa 9A81     		strh	r2, [r3, #12]	@ movhi
 671:gfx.c         ****                     (uint8_t)pgm_read_byte(&myGFX->gfxFont->yAdvance);
 3879              		.loc 1 671 0
 3880 00ac 7B68     		ldr	r3, [r7, #4]
 3881 00ae 5A89     		ldrh	r2, [r3, #10]
 3882 00b0 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 82


 3883 00b2 DB89     		ldrh	r3, [r3, #14]
 672:gfx.c         ****                 } else if(c != '\r') {
 3884              		.loc 1 672 0
 3885 00b4 7968     		ldr	r1, [r7, #4]
 3886 00b6 8969     		ldr	r1, [r1, #24]
 3887 00b8 0A31     		adds	r1, r1, #10
 3888 00ba 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 671:gfx.c         ****                     (uint8_t)pgm_read_byte(&myGFX->gfxFont->yAdvance);
 3889              		.loc 1 671 0
 3890 00bc 89B2     		uxth	r1, r1
 3891 00be 01FB03F3 		mul	r3, r1, r3
 3892 00c2 9BB2     		uxth	r3, r3
 3893 00c4 1344     		add	r3, r3, r2
 3894 00c6 9AB2     		uxth	r2, r3
 3895 00c8 7B68     		ldr	r3, [r7, #4]
 3896 00ca 5A81     		strh	r2, [r3, #10]	@ movhi
 3897              		.loc 1 695 0
 3898 00cc 61E0     		b	.L139
 3899              	.L137:
 673:gfx.c         ****                     uint8_t first = pgm_read_byte(&myGFX->gfxFont->first);
 3900              		.loc 1 673 0
 3901 00ce FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3902 00d0 0D2B     		cmp	r3, #13
 3903 00d2 5ED0     		beq	.L139
 3904              	.LBB26:
 674:gfx.c         ****                     if((c >= first) && (c <= (uint8_t)pgm_read_byte(&myGFX->gfxFont->last))) {
 3905              		.loc 1 674 0
 3906 00d4 7B68     		ldr	r3, [r7, #4]
 3907 00d6 9B69     		ldr	r3, [r3, #24]
 3908 00d8 1B7A     		ldrb	r3, [r3, #8]
 3909 00da FB75     		strb	r3, [r7, #23]
 675:gfx.c         ****                         GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 3910              		.loc 1 675 0
 3911 00dc FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3912 00de FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3913 00e0 9A42     		cmp	r2, r3
 3914 00e2 56D3     		bcc	.L139
 675:gfx.c         ****                         GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 3915              		.loc 1 675 0 is_stmt 0 discriminator 1
 3916 00e4 7B68     		ldr	r3, [r7, #4]
 3917 00e6 9B69     		ldr	r3, [r3, #24]
 3918 00e8 0933     		adds	r3, r3, #9
 3919 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3920 00ec FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3921 00ee 9A42     		cmp	r2, r3
 3922 00f0 4FD8     		bhi	.L139
 3923              	.LBB27:
 677:gfx.c         ****                         uint8_t   w     = pgm_read_byte(&glyph->width),
 3924              		.loc 1 677 0 is_stmt 1
 3925 00f2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3926 00f4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3927 00f6 D31A     		subs	r3, r2, r3
 3928 00f8 DA00     		lsls	r2, r3, #3
 676:gfx.c         ****                                                                           &myGFX->gfxFont->glyph))[
 3929              		.loc 1 676 0
 3930 00fa 7B68     		ldr	r3, [r7, #4]
 3931 00fc 9B69     		ldr	r3, [r3, #24]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 83


 3932 00fe 0433     		adds	r3, r3, #4
 3933 0100 18CB     		ldmia	r3, {r3-r4}
 677:gfx.c         ****                         uint8_t   w     = pgm_read_byte(&glyph->width),
 3934              		.loc 1 677 0
 3935 0102 1344     		add	r3, r3, r2
 676:gfx.c         ****                                                                           &myGFX->gfxFont->glyph))[
 3936              		.loc 1 676 0
 3937 0104 3B61     		str	r3, [r7, #16]
 678:gfx.c         ****                         h     = pgm_read_byte(&glyph->height);
 3938              		.loc 1 678 0
 3939 0106 3B69     		ldr	r3, [r7, #16]
 3940 0108 9B78     		ldrb	r3, [r3, #2]
 3941 010a FB73     		strb	r3, [r7, #15]
 679:gfx.c         ****                         if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 3942              		.loc 1 679 0
 3943 010c 3B69     		ldr	r3, [r7, #16]
 3944 010e DB78     		ldrb	r3, [r3, #3]
 3945 0110 BB73     		strb	r3, [r7, #14]
 680:gfx.c         ****                             int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 3946              		.loc 1 680 0
 3947 0112 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3948 0114 002B     		cmp	r3, #0
 3949 0116 2DD0     		beq	.L138
 680:gfx.c         ****                             int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 3950              		.loc 1 680 0 is_stmt 0 discriminator 1
 3951 0118 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3952 011a 002B     		cmp	r3, #0
 3953 011c 2AD0     		beq	.L138
 3954              	.LBB28:
 681:gfx.c         ****                             GFXcheckScrollWrap(myGFX, myGFX->textsize * (xo + w));
 3955              		.loc 1 681 0 is_stmt 1
 3956 011e 3B69     		ldr	r3, [r7, #16]
 3957 0120 0533     		adds	r3, r3, #5
 3958 0122 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3959 0124 5BB2     		sxtb	r3, r3
 3960 0126 BB81     		strh	r3, [r7, #12]	@ movhi
 682:gfx.c         ****                             // if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 3961              		.loc 1 682 0
 3962 0128 7B68     		ldr	r3, [r7, #4]
 3963 012a DB89     		ldrh	r3, [r3, #14]
 3964 012c B7F90C10 		ldrsh	r1, [r7, #12]
 3965 0130 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 3966 0132 0A44     		add	r2, r2, r1
 3967 0134 92B2     		uxth	r2, r2
 3968 0136 02FB03F3 		mul	r3, r2, r3
 3969 013a 9BB2     		uxth	r3, r3
 3970 013c 1BB2     		sxth	r3, r3
 3971 013e 1946     		mov	r1, r3
 3972 0140 7868     		ldr	r0, [r7, #4]
 3973 0142 FFF7FEFF 		bl	GFXcheckScrollWrap
 688:gfx.c         ****                         }
 3974              		.loc 1 688 0
 3975 0146 7B68     		ldr	r3, [r7, #4]
 3976 0148 9B89     		ldrh	r3, [r3, #12]
 3977 014a 18B2     		sxth	r0, r3
 3978 014c 7B68     		ldr	r3, [r7, #4]
 3979 014e 5B89     		ldrh	r3, [r3, #10]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 84


 3980 0150 1CB2     		sxth	r4, r3
 3981 0152 7B68     		ldr	r3, [r7, #4]
 3982 0154 1B8A     		ldrh	r3, [r3, #16]
 3983 0156 7A68     		ldr	r2, [r7, #4]
 3984 0158 528A     		ldrh	r2, [r2, #18]
 3985 015a 7968     		ldr	r1, [r7, #4]
 3986 015c C989     		ldrh	r1, [r1, #14]
 3987 015e C9B2     		uxtb	r1, r1
 3988 0160 FD78     		ldrb	r5, [r7, #3]	@ zero_extendqisi2
 3989 0162 0291     		str	r1, [sp, #8]
 3990 0164 0192     		str	r2, [sp, #4]
 3991 0166 0093     		str	r3, [sp]
 3992 0168 2B46     		mov	r3, r5
 3993 016a 2246     		mov	r2, r4
 3994 016c 0146     		mov	r1, r0
 3995 016e 7868     		ldr	r0, [r7, #4]
 3996 0170 FFF7FEFF 		bl	GFXdrawChar
 3997              	.L138:
 3998              	.LBE28:
 690:gfx.c         ****                     }
 3999              		.loc 1 690 0
 4000 0174 7B68     		ldr	r3, [r7, #4]
 4001 0176 9A89     		ldrh	r2, [r3, #12]
 4002 0178 3B69     		ldr	r3, [r7, #16]
 4003 017a 0433     		adds	r3, r3, #4
 4004 017c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4005 017e 9BB2     		uxth	r3, r3
 4006 0180 7968     		ldr	r1, [r7, #4]
 4007 0182 C989     		ldrh	r1, [r1, #14]
 4008 0184 01FB03F3 		mul	r3, r1, r3
 4009 0188 9BB2     		uxth	r3, r3
 4010 018a 1344     		add	r3, r3, r2
 4011 018c 9AB2     		uxth	r2, r3
 4012 018e 7B68     		ldr	r3, [r7, #4]
 4013 0190 9A81     		strh	r2, [r3, #12]	@ movhi
 4014              	.L139:
 4015              	.LBE27:
 4016              	.LBE26:
 4017              		.loc 1 695 0
 4018 0192 00BF     		nop
 4019 0194 1837     		adds	r7, r7, #24
 4020              		.cfi_def_cfa_offset 16
 4021 0196 BD46     		mov	sp, r7
 4022              		.cfi_def_cfa_register 13
 4023              		@ sp needed
 4024 0198 B0BD     		pop	{r4, r5, r7, pc}
 4025              		.cfi_endproc
 4026              	.LFE90:
 4027              		.size	GFXwrite, .-GFXwrite
 4028 019a 00BF     		.section	.text.GFXsetCursor,"ax",%progbits
 4029              		.align	2
 4030              		.global	GFXsetCursor
 4031              		.thumb
 4032              		.thumb_func
 4033              		.type	GFXsetCursor, %function
 4034              	GFXsetCursor:
 4035              	.LFB91:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 85


 696:gfx.c         ****         
 697:gfx.c         ****         void GFXsetCursor(GFX* myGFX, int16_t x, int16_t y) {
 4036              		.loc 1 697 0
 4037              		.cfi_startproc
 4038              		@ args = 0, pretend = 0, frame = 8
 4039              		@ frame_needed = 1, uses_anonymous_args = 0
 4040              		@ link register save eliminated.
 4041 0000 80B4     		push	{r7}
 4042              		.cfi_def_cfa_offset 4
 4043              		.cfi_offset 7, -4
 4044 0002 83B0     		sub	sp, sp, #12
 4045              		.cfi_def_cfa_offset 16
 4046 0004 00AF     		add	r7, sp, #0
 4047              		.cfi_def_cfa_register 7
 4048 0006 7860     		str	r0, [r7, #4]
 4049 0008 0B46     		mov	r3, r1
 4050 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 4051 000c 1346     		mov	r3, r2	@ movhi
 4052 000e 3B80     		strh	r3, [r7]	@ movhi
 698:gfx.c         ****             myGFX->cursor_x = x;
 4053              		.loc 1 698 0
 4054 0010 7A88     		ldrh	r2, [r7, #2]
 4055 0012 7B68     		ldr	r3, [r7, #4]
 4056 0014 9A81     		strh	r2, [r3, #12]	@ movhi
 699:gfx.c         ****             myGFX->cursor_y = y;
 4057              		.loc 1 699 0
 4058 0016 3A88     		ldrh	r2, [r7]
 4059 0018 7B68     		ldr	r3, [r7, #4]
 4060 001a 5A81     		strh	r2, [r3, #10]	@ movhi
 700:gfx.c         ****         }
 4061              		.loc 1 700 0
 4062 001c 00BF     		nop
 4063 001e 0C37     		adds	r7, r7, #12
 4064              		.cfi_def_cfa_offset 4
 4065 0020 BD46     		mov	sp, r7
 4066              		.cfi_def_cfa_register 13
 4067              		@ sp needed
 4068 0022 80BC     		pop	{r7}
 4069              		.cfi_restore 7
 4070              		.cfi_def_cfa_offset 0
 4071 0024 7047     		bx	lr
 4072              		.cfi_endproc
 4073              	.LFE91:
 4074              		.size	GFXsetCursor, .-GFXsetCursor
 4075 0026 00BF     		.section	.text.GFXgetCursorX,"ax",%progbits
 4076              		.align	2
 4077              		.global	GFXgetCursorX
 4078              		.thumb
 4079              		.thumb_func
 4080              		.type	GFXgetCursorX, %function
 4081              	GFXgetCursorX:
 4082              	.LFB92:
 701:gfx.c         ****         
 702:gfx.c         ****         int16_t GFXgetCursorX(GFX* myGFX)
 703:gfx.c         ****         {
 4083              		.loc 1 703 0
 4084              		.cfi_startproc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 86


 4085              		@ args = 0, pretend = 0, frame = 8
 4086              		@ frame_needed = 1, uses_anonymous_args = 0
 4087              		@ link register save eliminated.
 4088 0000 80B4     		push	{r7}
 4089              		.cfi_def_cfa_offset 4
 4090              		.cfi_offset 7, -4
 4091 0002 83B0     		sub	sp, sp, #12
 4092              		.cfi_def_cfa_offset 16
 4093 0004 00AF     		add	r7, sp, #0
 4094              		.cfi_def_cfa_register 7
 4095 0006 7860     		str	r0, [r7, #4]
 704:gfx.c         ****             return myGFX->cursor_x;
 4096              		.loc 1 704 0
 4097 0008 7B68     		ldr	r3, [r7, #4]
 4098 000a 9B89     		ldrh	r3, [r3, #12]
 4099 000c 1BB2     		sxth	r3, r3
 705:gfx.c         ****         }
 4100              		.loc 1 705 0
 4101 000e 1846     		mov	r0, r3
 4102 0010 0C37     		adds	r7, r7, #12
 4103              		.cfi_def_cfa_offset 4
 4104 0012 BD46     		mov	sp, r7
 4105              		.cfi_def_cfa_register 13
 4106              		@ sp needed
 4107 0014 80BC     		pop	{r7}
 4108              		.cfi_restore 7
 4109              		.cfi_def_cfa_offset 0
 4110 0016 7047     		bx	lr
 4111              		.cfi_endproc
 4112              	.LFE92:
 4113              		.size	GFXgetCursorX, .-GFXgetCursorX
 4114              		.section	.text.GFXgetCursorY,"ax",%progbits
 4115              		.align	2
 4116              		.global	GFXgetCursorY
 4117              		.thumb
 4118              		.thumb_func
 4119              		.type	GFXgetCursorY, %function
 4120              	GFXgetCursorY:
 4121              	.LFB93:
 706:gfx.c         ****         
 707:gfx.c         ****         int16_t GFXgetCursorY(GFX* myGFX)
 708:gfx.c         ****         {
 4122              		.loc 1 708 0
 4123              		.cfi_startproc
 4124              		@ args = 0, pretend = 0, frame = 8
 4125              		@ frame_needed = 1, uses_anonymous_args = 0
 4126              		@ link register save eliminated.
 4127 0000 80B4     		push	{r7}
 4128              		.cfi_def_cfa_offset 4
 4129              		.cfi_offset 7, -4
 4130 0002 83B0     		sub	sp, sp, #12
 4131              		.cfi_def_cfa_offset 16
 4132 0004 00AF     		add	r7, sp, #0
 4133              		.cfi_def_cfa_register 7
 4134 0006 7860     		str	r0, [r7, #4]
 709:gfx.c         ****             return myGFX->cursor_y;
 4135              		.loc 1 709 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 87


 4136 0008 7B68     		ldr	r3, [r7, #4]
 4137 000a 5B89     		ldrh	r3, [r3, #10]
 4138 000c 1BB2     		sxth	r3, r3
 710:gfx.c         ****         }
 4139              		.loc 1 710 0
 4140 000e 1846     		mov	r0, r3
 4141 0010 0C37     		adds	r7, r7, #12
 4142              		.cfi_def_cfa_offset 4
 4143 0012 BD46     		mov	sp, r7
 4144              		.cfi_def_cfa_register 13
 4145              		@ sp needed
 4146 0014 80BC     		pop	{r7}
 4147              		.cfi_restore 7
 4148              		.cfi_def_cfa_offset 0
 4149 0016 7047     		bx	lr
 4150              		.cfi_endproc
 4151              	.LFE93:
 4152              		.size	GFXgetCursorY, .-GFXgetCursorY
 4153              		.section	.text.GFXsetTextSize,"ax",%progbits
 4154              		.align	2
 4155              		.global	GFXsetTextSize
 4156              		.thumb
 4157              		.thumb_func
 4158              		.type	GFXsetTextSize, %function
 4159              	GFXsetTextSize:
 4160              	.LFB94:
 711:gfx.c         ****         
 712:gfx.c         ****         void GFXsetTextSize(GFX* myGFX, uint8_t s) {
 4161              		.loc 1 712 0
 4162              		.cfi_startproc
 4163              		@ args = 0, pretend = 0, frame = 8
 4164              		@ frame_needed = 1, uses_anonymous_args = 0
 4165              		@ link register save eliminated.
 4166 0000 80B4     		push	{r7}
 4167              		.cfi_def_cfa_offset 4
 4168              		.cfi_offset 7, -4
 4169 0002 83B0     		sub	sp, sp, #12
 4170              		.cfi_def_cfa_offset 16
 4171 0004 00AF     		add	r7, sp, #0
 4172              		.cfi_def_cfa_register 7
 4173 0006 7860     		str	r0, [r7, #4]
 4174 0008 0B46     		mov	r3, r1
 4175 000a FB70     		strb	r3, [r7, #3]
 713:gfx.c         ****             myGFX->textsize = (s > 0) ? s : 1;
 4176              		.loc 1 713 0
 4177 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4178 000e 002B     		cmp	r3, #0
 4179 0010 02D0     		beq	.L146
 4180              		.loc 1 713 0 is_stmt 0 discriminator 1
 4181 0012 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4182 0014 9AB2     		uxth	r2, r3
 4183 0016 00E0     		b	.L147
 4184              	.L146:
 4185              		.loc 1 713 0 discriminator 2
 4186 0018 0122     		movs	r2, #1
 4187              	.L147:
 4188              		.loc 1 713 0 discriminator 4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 88


 4189 001a 7B68     		ldr	r3, [r7, #4]
 4190 001c DA81     		strh	r2, [r3, #14]	@ movhi
 714:gfx.c         ****         }
 4191              		.loc 1 714 0 is_stmt 1 discriminator 4
 4192 001e 00BF     		nop
 4193 0020 0C37     		adds	r7, r7, #12
 4194              		.cfi_def_cfa_offset 4
 4195 0022 BD46     		mov	sp, r7
 4196              		.cfi_def_cfa_register 13
 4197              		@ sp needed
 4198 0024 80BC     		pop	{r7}
 4199              		.cfi_restore 7
 4200              		.cfi_def_cfa_offset 0
 4201 0026 7047     		bx	lr
 4202              		.cfi_endproc
 4203              	.LFE94:
 4204              		.size	GFXsetTextSize, .-GFXsetTextSize
 4205              		.section	.text.GFXsetTextColor,"ax",%progbits
 4206              		.align	2
 4207              		.global	GFXsetTextColor
 4208              		.thumb
 4209              		.thumb_func
 4210              		.type	GFXsetTextColor, %function
 4211              	GFXsetTextColor:
 4212              	.LFB95:
 715:gfx.c         ****         
 716:gfx.c         ****         void GFXsetTextColor(GFX* myGFX, uint16_t c, uint16_t b) {
 4213              		.loc 1 716 0
 4214              		.cfi_startproc
 4215              		@ args = 0, pretend = 0, frame = 8
 4216              		@ frame_needed = 1, uses_anonymous_args = 0
 4217              		@ link register save eliminated.
 4218 0000 80B4     		push	{r7}
 4219              		.cfi_def_cfa_offset 4
 4220              		.cfi_offset 7, -4
 4221 0002 83B0     		sub	sp, sp, #12
 4222              		.cfi_def_cfa_offset 16
 4223 0004 00AF     		add	r7, sp, #0
 4224              		.cfi_def_cfa_register 7
 4225 0006 7860     		str	r0, [r7, #4]
 4226 0008 0B46     		mov	r3, r1
 4227 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 4228 000c 1346     		mov	r3, r2	@ movhi
 4229 000e 3B80     		strh	r3, [r7]	@ movhi
 717:gfx.c         ****             myGFX->textcolor   = c;
 4230              		.loc 1 717 0
 4231 0010 7B68     		ldr	r3, [r7, #4]
 4232 0012 7A88     		ldrh	r2, [r7, #2]	@ movhi
 4233 0014 1A82     		strh	r2, [r3, #16]	@ movhi
 718:gfx.c         ****             myGFX->textbgcolor = b;
 4234              		.loc 1 718 0
 4235 0016 7B68     		ldr	r3, [r7, #4]
 4236 0018 3A88     		ldrh	r2, [r7]	@ movhi
 4237 001a 5A82     		strh	r2, [r3, #18]	@ movhi
 719:gfx.c         ****         }
 4238              		.loc 1 719 0
 4239 001c 00BF     		nop
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 89


 4240 001e 0C37     		adds	r7, r7, #12
 4241              		.cfi_def_cfa_offset 4
 4242 0020 BD46     		mov	sp, r7
 4243              		.cfi_def_cfa_register 13
 4244              		@ sp needed
 4245 0022 80BC     		pop	{r7}
 4246              		.cfi_restore 7
 4247              		.cfi_def_cfa_offset 0
 4248 0024 7047     		bx	lr
 4249              		.cfi_endproc
 4250              	.LFE95:
 4251              		.size	GFXsetTextColor, .-GFXsetTextColor
 4252 0026 00BF     		.section	.text.GFXsetTextWrap,"ax",%progbits
 4253              		.align	2
 4254              		.global	GFXsetTextWrap
 4255              		.thumb
 4256              		.thumb_func
 4257              		.type	GFXsetTextWrap, %function
 4258              	GFXsetTextWrap:
 4259              	.LFB96:
 720:gfx.c         ****         
 721:gfx.c         ****         void GFXsetTextWrap(GFX* myGFX, uint8_t w) {
 4260              		.loc 1 721 0
 4261              		.cfi_startproc
 4262              		@ args = 0, pretend = 0, frame = 8
 4263              		@ frame_needed = 1, uses_anonymous_args = 0
 4264              		@ link register save eliminated.
 4265 0000 80B4     		push	{r7}
 4266              		.cfi_def_cfa_offset 4
 4267              		.cfi_offset 7, -4
 4268 0002 83B0     		sub	sp, sp, #12
 4269              		.cfi_def_cfa_offset 16
 4270 0004 00AF     		add	r7, sp, #0
 4271              		.cfi_def_cfa_register 7
 4272 0006 7860     		str	r0, [r7, #4]
 4273 0008 0B46     		mov	r3, r1
 4274 000a FB70     		strb	r3, [r7, #3]
 722:gfx.c         ****             myGFX->wrap = w;
 4275              		.loc 1 722 0
 4276 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4277 000e 9AB2     		uxth	r2, r3
 4278 0010 7B68     		ldr	r3, [r7, #4]
 4279 0012 9A82     		strh	r2, [r3, #20]	@ movhi
 723:gfx.c         ****         }
 4280              		.loc 1 723 0
 4281 0014 00BF     		nop
 4282 0016 0C37     		adds	r7, r7, #12
 4283              		.cfi_def_cfa_offset 4
 4284 0018 BD46     		mov	sp, r7
 4285              		.cfi_def_cfa_register 13
 4286              		@ sp needed
 4287 001a 80BC     		pop	{r7}
 4288              		.cfi_restore 7
 4289              		.cfi_def_cfa_offset 0
 4290 001c 7047     		bx	lr
 4291              		.cfi_endproc
 4292              	.LFE96:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 90


 4293              		.size	GFXsetTextWrap, .-GFXsetTextWrap
 4294 001e 00BF     		.section	.text.GFXgetRotation,"ax",%progbits
 4295              		.align	2
 4296              		.global	GFXgetRotation
 4297              		.thumb
 4298              		.thumb_func
 4299              		.type	GFXgetRotation, %function
 4300              	GFXgetRotation:
 4301              	.LFB97:
 724:gfx.c         ****         
 725:gfx.c         ****         uint8_t GFXgetRotation(GFX* myGFX)  {
 4302              		.loc 1 725 0
 4303              		.cfi_startproc
 4304              		@ args = 0, pretend = 0, frame = 8
 4305              		@ frame_needed = 1, uses_anonymous_args = 0
 4306              		@ link register save eliminated.
 4307 0000 80B4     		push	{r7}
 4308              		.cfi_def_cfa_offset 4
 4309              		.cfi_offset 7, -4
 4310 0002 83B0     		sub	sp, sp, #12
 4311              		.cfi_def_cfa_offset 16
 4312 0004 00AF     		add	r7, sp, #0
 4313              		.cfi_def_cfa_register 7
 4314 0006 7860     		str	r0, [r7, #4]
 726:gfx.c         ****             return myGFX->rotation;
 4315              		.loc 1 726 0
 4316 0008 7B68     		ldr	r3, [r7, #4]
 4317 000a 1B89     		ldrh	r3, [r3, #8]
 4318 000c DBB2     		uxtb	r3, r3
 727:gfx.c         ****         }
 4319              		.loc 1 727 0
 4320 000e 1846     		mov	r0, r3
 4321 0010 0C37     		adds	r7, r7, #12
 4322              		.cfi_def_cfa_offset 4
 4323 0012 BD46     		mov	sp, r7
 4324              		.cfi_def_cfa_register 13
 4325              		@ sp needed
 4326 0014 80BC     		pop	{r7}
 4327              		.cfi_restore 7
 4328              		.cfi_def_cfa_offset 0
 4329 0016 7047     		bx	lr
 4330              		.cfi_endproc
 4331              	.LFE97:
 4332              		.size	GFXgetRotation, .-GFXgetRotation
 4333              		.section	.text.GFXsetRotation,"ax",%progbits
 4334              		.align	2
 4335              		.global	GFXsetRotation
 4336              		.thumb
 4337              		.thumb_func
 4338              		.type	GFXsetRotation, %function
 4339              	GFXsetRotation:
 4340              	.LFB98:
 728:gfx.c         ****         
 729:gfx.c         ****         void GFXsetRotation(GFX* myGFX, uint8_t x) {
 4341              		.loc 1 729 0
 4342              		.cfi_startproc
 4343              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 91


 4344              		@ frame_needed = 1, uses_anonymous_args = 0
 4345              		@ link register save eliminated.
 4346 0000 80B4     		push	{r7}
 4347              		.cfi_def_cfa_offset 4
 4348              		.cfi_offset 7, -4
 4349 0002 83B0     		sub	sp, sp, #12
 4350              		.cfi_def_cfa_offset 16
 4351 0004 00AF     		add	r7, sp, #0
 4352              		.cfi_def_cfa_register 7
 4353 0006 7860     		str	r0, [r7, #4]
 4354 0008 0B46     		mov	r3, r1
 4355 000a FB70     		strb	r3, [r7, #3]
 730:gfx.c         ****             myGFX->rotation = (x & 3);
 4356              		.loc 1 730 0
 4357 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4358 000e 9BB2     		uxth	r3, r3
 4359 0010 03F00303 		and	r3, r3, #3
 4360 0014 9AB2     		uxth	r2, r3
 4361 0016 7B68     		ldr	r3, [r7, #4]
 4362 0018 1A81     		strh	r2, [r3, #8]	@ movhi
 731:gfx.c         ****             switch(myGFX->rotation) {
 4363              		.loc 1 731 0
 4364 001a 7B68     		ldr	r3, [r7, #4]
 4365 001c 1B89     		ldrh	r3, [r3, #8]
 4366 001e 032B     		cmp	r3, #3
 4367 0020 24D8     		bhi	.L157
 4368 0022 01A2     		adr	r2, .L155
 4369 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4370              		.p2align 2
 4371              	.L155:
 4372 0028 39000000 		.word	.L154+1
 4373 002c 53000000 		.word	.L156+1
 4374 0030 39000000 		.word	.L154+1
 4375 0034 53000000 		.word	.L156+1
 4376              		.p2align 1
 4377              	.L154:
 732:gfx.c         ****                 case 0:
 733:gfx.c         ****                 case 2:
 734:gfx.c         ****                     myGFX->_width  = myGFX->WIDTH;
 4378              		.loc 1 734 0
 4379 0038 7B68     		ldr	r3, [r7, #4]
 4380 003a B3F90030 		ldrsh	r3, [r3]
 4381 003e 9AB2     		uxth	r2, r3
 4382 0040 7B68     		ldr	r3, [r7, #4]
 4383 0042 9A80     		strh	r2, [r3, #4]	@ movhi
 735:gfx.c         ****                     myGFX->_height = myGFX->HEIGHT;
 4384              		.loc 1 735 0
 4385 0044 7B68     		ldr	r3, [r7, #4]
 4386 0046 B3F90230 		ldrsh	r3, [r3, #2]
 4387 004a 9AB2     		uxth	r2, r3
 4388 004c 7B68     		ldr	r3, [r7, #4]
 4389 004e DA80     		strh	r2, [r3, #6]	@ movhi
 736:gfx.c         ****                     break;
 4390              		.loc 1 736 0
 4391 0050 0CE0     		b	.L153
 4392              	.L156:
 737:gfx.c         ****                 case 1:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 92


 738:gfx.c         ****                 case 3:
 739:gfx.c         ****                     myGFX->_width  = myGFX->HEIGHT;
 4393              		.loc 1 739 0
 4394 0052 7B68     		ldr	r3, [r7, #4]
 4395 0054 B3F90230 		ldrsh	r3, [r3, #2]
 4396 0058 9AB2     		uxth	r2, r3
 4397 005a 7B68     		ldr	r3, [r7, #4]
 4398 005c 9A80     		strh	r2, [r3, #4]	@ movhi
 740:gfx.c         ****                     myGFX->_height = myGFX->WIDTH;
 4399              		.loc 1 740 0
 4400 005e 7B68     		ldr	r3, [r7, #4]
 4401 0060 B3F90030 		ldrsh	r3, [r3]
 4402 0064 9AB2     		uxth	r2, r3
 4403 0066 7B68     		ldr	r3, [r7, #4]
 4404 0068 DA80     		strh	r2, [r3, #6]	@ movhi
 741:gfx.c         ****                     break;
 4405              		.loc 1 741 0
 4406 006a 00BF     		nop
 4407              	.L153:
 4408              	.L157:
 742:gfx.c         ****             }
 743:gfx.c         ****         }
 4409              		.loc 1 743 0
 4410 006c 00BF     		nop
 4411 006e 0C37     		adds	r7, r7, #12
 4412              		.cfi_def_cfa_offset 4
 4413 0070 BD46     		mov	sp, r7
 4414              		.cfi_def_cfa_register 13
 4415              		@ sp needed
 4416 0072 80BC     		pop	{r7}
 4417              		.cfi_restore 7
 4418              		.cfi_def_cfa_offset 0
 4419 0074 7047     		bx	lr
 4420              		.cfi_endproc
 4421              	.LFE98:
 4422              		.size	GFXsetRotation, .-GFXsetRotation
 4423 0076 00BF     		.section	.text.GFXcp437,"ax",%progbits
 4424              		.align	2
 4425              		.global	GFXcp437
 4426              		.thumb
 4427              		.thumb_func
 4428              		.type	GFXcp437, %function
 4429              	GFXcp437:
 4430              	.LFB99:
 744:gfx.c         ****         
 745:gfx.c         ****         // Enable (or disable) Code Page 437-compatible charset.
 746:gfx.c         ****         // There was an error in glcdfont.c for the longest time -- one character
 747:gfx.c         ****         // (#176, the 'light shade' block) was missing -- this threw off the index
 748:gfx.c         ****         // of every character that followed it.  But a TON of code has been written
 749:gfx.c         ****         // with the erroneous character indices.  By default, the library uses the
 750:gfx.c         ****         // original 'wrong' behavior and old sketches will still work.  Pass 'true'
 751:gfx.c         ****         // to this function to use correct CP437 character values in your code.
 752:gfx.c         ****         void GFXcp437(GFX* myGFX, uint8_t x) {
 4431              		.loc 1 752 0
 4432              		.cfi_startproc
 4433              		@ args = 0, pretend = 0, frame = 8
 4434              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 93


 4435              		@ link register save eliminated.
 4436 0000 80B4     		push	{r7}
 4437              		.cfi_def_cfa_offset 4
 4438              		.cfi_offset 7, -4
 4439 0002 83B0     		sub	sp, sp, #12
 4440              		.cfi_def_cfa_offset 16
 4441 0004 00AF     		add	r7, sp, #0
 4442              		.cfi_def_cfa_register 7
 4443 0006 7860     		str	r0, [r7, #4]
 4444 0008 0B46     		mov	r3, r1
 4445 000a FB70     		strb	r3, [r7, #3]
 753:gfx.c         ****             myGFX->_cp437 = x;
 4446              		.loc 1 753 0
 4447 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4448 000e 9AB2     		uxth	r2, r3
 4449 0010 7B68     		ldr	r3, [r7, #4]
 4450 0012 DA82     		strh	r2, [r3, #22]	@ movhi
 754:gfx.c         ****         }
 4451              		.loc 1 754 0
 4452 0014 00BF     		nop
 4453 0016 0C37     		adds	r7, r7, #12
 4454              		.cfi_def_cfa_offset 4
 4455 0018 BD46     		mov	sp, r7
 4456              		.cfi_def_cfa_register 13
 4457              		@ sp needed
 4458 001a 80BC     		pop	{r7}
 4459              		.cfi_restore 7
 4460              		.cfi_def_cfa_offset 0
 4461 001c 7047     		bx	lr
 4462              		.cfi_endproc
 4463              	.LFE99:
 4464              		.size	GFXcp437, .-GFXcp437
 4465 001e 00BF     		.section	.text.GFXsetFont,"ax",%progbits
 4466              		.align	2
 4467              		.global	GFXsetFont
 4468              		.thumb
 4469              		.thumb_func
 4470              		.type	GFXsetFont, %function
 4471              	GFXsetFont:
 4472              	.LFB100:
 755:gfx.c         ****         
 756:gfx.c         ****         void GFXsetFont(GFX* myGFX, const GFXfont *f) {
 4473              		.loc 1 756 0
 4474              		.cfi_startproc
 4475              		@ args = 0, pretend = 0, frame = 24
 4476              		@ frame_needed = 1, uses_anonymous_args = 0
 4477              		@ link register save eliminated.
 4478 0000 90B4     		push	{r4, r7}
 4479              		.cfi_def_cfa_offset 8
 4480              		.cfi_offset 4, -8
 4481              		.cfi_offset 7, -4
 4482 0002 86B0     		sub	sp, sp, #24
 4483              		.cfi_def_cfa_offset 32
 4484 0004 00AF     		add	r7, sp, #0
 4485              		.cfi_def_cfa_register 7
 4486 0006 7860     		str	r0, [r7, #4]
 4487 0008 3960     		str	r1, [r7]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 94


 757:gfx.c         ****             
 758:gfx.c         ****             if(f)
 4488              		.loc 1 758 0
 4489 000a 3B68     		ldr	r3, [r7]
 4490 000c 002B     		cmp	r3, #0
 4491 000e 0AD0     		beq	.L160
 759:gfx.c         ****             {            // Font struct pointer passed in?
 760:gfx.c         ****                 if(!myGFX->gfxFont) { // And no current font struct?
 4492              		.loc 1 760 0
 4493 0010 7B68     		ldr	r3, [r7, #4]
 4494 0012 9B69     		ldr	r3, [r3, #24]
 4495 0014 002B     		cmp	r3, #0
 4496 0016 59D1     		bne	.L162
 761:gfx.c         ****                     // Switching from classic to new font behavior.
 762:gfx.c         ****                     // Move cursor pos down 6 pixels so it's on baseline.
 763:gfx.c         ****                     myGFX->cursor_y += 6;
 4497              		.loc 1 763 0
 4498 0018 7B68     		ldr	r3, [r7, #4]
 4499 001a 5B89     		ldrh	r3, [r3, #10]
 4500 001c 0633     		adds	r3, r3, #6
 4501 001e 9AB2     		uxth	r2, r3
 4502 0020 7B68     		ldr	r3, [r7, #4]
 4503 0022 5A81     		strh	r2, [r3, #10]	@ movhi
 4504 0024 52E0     		b	.L162
 4505              	.L160:
 764:gfx.c         ****                 }
 765:gfx.c         ****             }
 766:gfx.c         ****             else if(myGFX->gfxFont)
 4506              		.loc 1 766 0
 4507 0026 7B68     		ldr	r3, [r7, #4]
 4508 0028 9B69     		ldr	r3, [r3, #24]
 4509 002a 002B     		cmp	r3, #0
 4510 002c 3ED0     		beq	.L163
 4511              	.LBB29:
 767:gfx.c         ****             { // NULL passed.  Current font struct defined?
 768:gfx.c         ****                 // Switching from new to classic font behavior.
 769:gfx.c         ****                 // Move cursor pos up 6 pixels so it's at top-left of char.
 770:gfx.c         ****                 //cursor_y -= 6;
 771:gfx.c         ****                 // calculate max descender ("j" or "g")
 772:gfx.c         ****                 myGFX->fontDesc = 0;
 4512              		.loc 1 772 0
 4513 002e 7B68     		ldr	r3, [r7, #4]
 4514 0030 0022     		movs	r2, #0
 4515 0032 DA83     		strh	r2, [r3, #30]	@ movhi
 773:gfx.c         ****                 
 774:gfx.c         ****                 uint8_t first  = (uint8_t) pgm_read_byte(&f->first);
 4516              		.loc 1 774 0
 4517 0034 3B68     		ldr	r3, [r7]
 4518 0036 0833     		adds	r3, r3, #8
 4519 0038 1B78     		ldrb	r3, [r3]
 4520 003a BB75     		strb	r3, [r7, #22]
 775:gfx.c         ****                 uint8_t last  = (uint8_t) pgm_read_byte(&f->last);
 4521              		.loc 1 775 0
 4522 003c 3B68     		ldr	r3, [r7]
 4523 003e 0933     		adds	r3, r3, #9
 4524 0040 1B78     		ldrb	r3, [r3]
 4525 0042 7B75     		strb	r3, [r7, #21]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 95


 4526              	.LBB30:
 776:gfx.c         ****                 for (uint8_t i = first; i <= last; i++)
 4527              		.loc 1 776 0
 4528 0044 BB7D     		ldrb	r3, [r7, #22]
 4529 0046 FB75     		strb	r3, [r7, #23]
 4530 0048 25E0     		b	.L164
 4531              	.L166:
 4532              	.LBB31:
 777:gfx.c         ****                 {
 778:gfx.c         ****                     GFXglyph *glyph;
 779:gfx.c         ****                     uint8_t gh;
 780:gfx.c         ****                     int8_t  yo;
 781:gfx.c         ****                     
 782:gfx.c         ****                     glyph = &(((GFXglyph *)pgm_read_pointer(&f->glyph))[i-first]);
 4533              		.loc 1 782 0
 4534 004a FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 4535 004c BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 4536 004e D31A     		subs	r3, r2, r3
 4537 0050 DA00     		lsls	r2, r3, #3
 4538 0052 3B68     		ldr	r3, [r7]
 4539 0054 0433     		adds	r3, r3, #4
 4540 0056 18CB     		ldmia	r3, {r3-r4}
 4541 0058 1344     		add	r3, r3, r2
 4542 005a 3B61     		str	r3, [r7, #16]
 783:gfx.c         ****                     
 784:gfx.c         ****                     gh = (uint8_t) pgm_read_byte(&glyph->height);
 4543              		.loc 1 784 0
 4544 005c 3B69     		ldr	r3, [r7, #16]
 4545 005e 0333     		adds	r3, r3, #3
 4546 0060 1B78     		ldrb	r3, [r3]
 4547 0062 FB73     		strb	r3, [r7, #15]
 785:gfx.c         ****                     yo = (int8_t) pgm_read_byte(&glyph->yOffset);
 4548              		.loc 1 785 0
 4549 0064 3B69     		ldr	r3, [r7, #16]
 4550 0066 0633     		adds	r3, r3, #6
 4551 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4552 006a BB73     		strb	r3, [r7, #14]
 786:gfx.c         ****                     
 787:gfx.c         ****                     if (gh + yo > myGFX->fontDesc)
 4553              		.loc 1 787 0
 4554 006c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 4555 006e 97F90E30 		ldrsb	r3, [r7, #14]
 4556 0072 1344     		add	r3, r3, r2
 4557 0074 7A68     		ldr	r2, [r7, #4]
 4558 0076 D28B     		ldrh	r2, [r2, #30]
 4559 0078 9342     		cmp	r3, r2
 4560 007a 09DD     		ble	.L165
 788:gfx.c         ****                     {
 789:gfx.c         ****                         myGFX->fontDesc = gh + yo;
 4561              		.loc 1 789 0
 4562 007c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4563 007e 1AB2     		sxth	r2, r3
 4564 0080 97F90E30 		ldrsb	r3, [r7, #14]
 4565 0084 1BB2     		sxth	r3, r3
 4566 0086 1344     		add	r3, r3, r2
 4567 0088 1BB2     		sxth	r3, r3
 4568 008a 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 96


 4569 008c 7B68     		ldr	r3, [r7, #4]
 4570 008e DA83     		strh	r2, [r3, #30]	@ movhi
 4571              	.L165:
 4572              	.LBE31:
 776:gfx.c         ****                 {
 4573              		.loc 1 776 0 discriminator 2
 4574 0090 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4575 0092 0133     		adds	r3, r3, #1
 4576 0094 FB75     		strb	r3, [r7, #23]
 4577              	.L164:
 776:gfx.c         ****                 {
 4578              		.loc 1 776 0 is_stmt 0 discriminator 1
 4579 0096 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 4580 0098 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 4581 009a 9A42     		cmp	r2, r3
 4582 009c D5D9     		bls	.L166
 4583              	.LBE30:
 790:gfx.c         ****                     }
 791:gfx.c         ****                 }
 792:gfx.c         ****                 
 793:gfx.c         ****                 myGFX->fontHeight = (int16_t) pgm_read_byte(&f->yAdvance);
 4584              		.loc 1 793 0 is_stmt 1
 4585 009e 3B68     		ldr	r3, [r7]
 4586 00a0 0A33     		adds	r3, r3, #10
 4587 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4588 00a4 9AB2     		uxth	r2, r3
 4589 00a6 7B68     		ldr	r3, [r7, #4]
 4590 00a8 9A83     		strh	r2, [r3, #28]	@ movhi
 4591              	.LBE29:
 4592 00aa 0FE0     		b	.L162
 4593              	.L163:
 794:gfx.c         ****             }
 795:gfx.c         ****             else
 796:gfx.c         ****             {
 797:gfx.c         ****                 if(myGFX->gfxFont)
 4594              		.loc 1 797 0
 4595 00ac 7B68     		ldr	r3, [r7, #4]
 4596 00ae 9B69     		ldr	r3, [r3, #24]
 4597 00b0 002B     		cmp	r3, #0
 4598 00b2 05D0     		beq	.L167
 798:gfx.c         ****                 { // NULL passed.  Current font struct defined?
 799:gfx.c         ****                     // Switching from new to classic font behavior.
 800:gfx.c         ****                     // Move cursor pos up 6 pixels so it's at top-left of char.
 801:gfx.c         ****                     myGFX->cursor_y -= 6;
 4599              		.loc 1 801 0
 4600 00b4 7B68     		ldr	r3, [r7, #4]
 4601 00b6 5B89     		ldrh	r3, [r3, #10]
 4602 00b8 063B     		subs	r3, r3, #6
 4603 00ba 9AB2     		uxth	r2, r3
 4604 00bc 7B68     		ldr	r3, [r7, #4]
 4605 00be 5A81     		strh	r2, [r3, #10]	@ movhi
 4606              	.L167:
 802:gfx.c         ****                 }
 803:gfx.c         ****                 
 804:gfx.c         ****                 myGFX->fontHeight = 8;
 4607              		.loc 1 804 0
 4608 00c0 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 97


 4609 00c2 0822     		movs	r2, #8
 4610 00c4 9A83     		strh	r2, [r3, #28]	@ movhi
 805:gfx.c         ****                 myGFX->fontDesc = 0;
 4611              		.loc 1 805 0
 4612 00c6 7B68     		ldr	r3, [r7, #4]
 4613 00c8 0022     		movs	r2, #0
 4614 00ca DA83     		strh	r2, [r3, #30]	@ movhi
 4615              	.L162:
 806:gfx.c         ****             }
 807:gfx.c         ****             myGFX->gfxFont = (GFXfont *)f;
 4616              		.loc 1 807 0
 4617 00cc 7B68     		ldr	r3, [r7, #4]
 4618 00ce 3A68     		ldr	r2, [r7]
 4619 00d0 9A61     		str	r2, [r3, #24]
 808:gfx.c         ****         }
 4620              		.loc 1 808 0
 4621 00d2 00BF     		nop
 4622 00d4 1837     		adds	r7, r7, #24
 4623              		.cfi_def_cfa_offset 8
 4624 00d6 BD46     		mov	sp, r7
 4625              		.cfi_def_cfa_register 13
 4626              		@ sp needed
 4627 00d8 90BC     		pop	{r4, r7}
 4628              		.cfi_restore 7
 4629              		.cfi_restore 4
 4630              		.cfi_def_cfa_offset 0
 4631 00da 7047     		bx	lr
 4632              		.cfi_endproc
 4633              	.LFE100:
 4634              		.size	GFXsetFont, .-GFXsetFont
 4635              		.section	.text.GFXcharBounds,"ax",%progbits
 4636              		.align	2
 4637              		.global	GFXcharBounds
 4638              		.thumb
 4639              		.thumb_func
 4640              		.type	GFXcharBounds, %function
 4641              	GFXcharBounds:
 4642              	.LFB101:
 809:gfx.c         ****         
 810:gfx.c         ****         
 811:gfx.c         ****         
 812:gfx.c         ****         
 813:gfx.c         ****         
 814:gfx.c         ****         
 815:gfx.c         ****         
 816:gfx.c         ****         // Broke this out as it's used by both the PROGMEM- and RAM-resident
 817:gfx.c         ****         // getTextBounds() functions.
 818:gfx.c         ****         void GFXcharBounds(GFX* myGFX, char c, int16_t *x, int16_t *y,
 819:gfx.c         ****                            int16_t *minx, int16_t *miny, int16_t *maxx, int16_t *maxy) {
 4643              		.loc 1 819 0
 4644              		.cfi_startproc
 4645              		@ args = 16, pretend = 0, frame = 48
 4646              		@ frame_needed = 1, uses_anonymous_args = 0
 4647              		@ link register save eliminated.
 4648 0000 90B4     		push	{r4, r7}
 4649              		.cfi_def_cfa_offset 8
 4650              		.cfi_offset 4, -8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 98


 4651              		.cfi_offset 7, -4
 4652 0002 8CB0     		sub	sp, sp, #48
 4653              		.cfi_def_cfa_offset 56
 4654 0004 00AF     		add	r7, sp, #0
 4655              		.cfi_def_cfa_register 7
 4656 0006 F860     		str	r0, [r7, #12]
 4657 0008 7A60     		str	r2, [r7, #4]
 4658 000a 3B60     		str	r3, [r7]
 4659 000c 0B46     		mov	r3, r1
 4660 000e FB72     		strb	r3, [r7, #11]
 820:gfx.c         ****             
 821:gfx.c         ****             if(myGFX->gfxFont) {
 4661              		.loc 1 821 0
 4662 0010 FB68     		ldr	r3, [r7, #12]
 4663 0012 9B69     		ldr	r3, [r3, #24]
 4664 0014 002B     		cmp	r3, #0
 4665 0016 00F0F380 		beq	.L169
 822:gfx.c         ****                 
 823:gfx.c         ****                 if(c == '\n') { // Newline?
 4666              		.loc 1 823 0
 4667 001a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4668 001c 0A2B     		cmp	r3, #10
 4669 001e 16D1     		bne	.L170
 824:gfx.c         ****                     *x  = 0;    // Reset x to zero, advance y by one line
 4670              		.loc 1 824 0
 4671 0020 7B68     		ldr	r3, [r7, #4]
 4672 0022 0022     		movs	r2, #0
 4673 0024 1A80     		strh	r2, [r3]	@ movhi
 825:gfx.c         ****                     *y += myGFX->textsize * (uint8_t)pgm_read_byte(&myGFX->gfxFont->yAdvance);
 4674              		.loc 1 825 0
 4675 0026 3B68     		ldr	r3, [r7]
 4676 0028 B3F90030 		ldrsh	r3, [r3]
 4677 002c 9AB2     		uxth	r2, r3
 4678 002e FB68     		ldr	r3, [r7, #12]
 4679 0030 DB89     		ldrh	r3, [r3, #14]
 4680 0032 F968     		ldr	r1, [r7, #12]
 4681 0034 8969     		ldr	r1, [r1, #24]
 4682 0036 0A31     		adds	r1, r1, #10
 4683 0038 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4684 003a 89B2     		uxth	r1, r1
 4685 003c 01FB03F3 		mul	r3, r1, r3
 4686 0040 9BB2     		uxth	r3, r3
 4687 0042 1344     		add	r3, r3, r2
 4688 0044 9BB2     		uxth	r3, r3
 4689 0046 1AB2     		sxth	r2, r3
 4690 0048 3B68     		ldr	r3, [r7]
 4691 004a 1A80     		strh	r2, [r3]	@ movhi
 826:gfx.c         ****                 } else if(c != '\r') { // Not a carriage return; is normal char
 827:gfx.c         ****                     uint8_t first = pgm_read_byte(&myGFX->gfxFont->first),
 828:gfx.c         ****                     last  = pgm_read_byte(&myGFX->gfxFont->last);
 829:gfx.c         ****                     if((c >= first) && (c <= last)) { // Char present in this font?
 830:gfx.c         ****                         GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 831:gfx.c         ****                                                                           &myGFX->gfxFont->glyph))[
 832:gfx.c         ****                         uint8_t gw = pgm_read_byte(&glyph->width),
 833:gfx.c         ****                         gh = pgm_read_byte(&glyph->height),
 834:gfx.c         ****                         xa = pgm_read_byte(&glyph->xAdvance);
 835:gfx.c         ****                         int8_t  xo = pgm_read_byte(&glyph->xOffset),
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 99


 836:gfx.c         ****                         yo = pgm_read_byte(&glyph->yOffset);
 837:gfx.c         ****                         if(myGFX->wrap && ((*x+(((int16_t)xo+gw)*myGFX->textsize)) > myGFX->_width)
 838:gfx.c         ****                             *x  = 0; // Reset x to zero, advance y by one line
 839:gfx.c         ****                             *y += myGFX->textsize * (uint8_t)pgm_read_byte(&myGFX->gfxFont->yAdvanc
 840:gfx.c         ****                         }
 841:gfx.c         ****                         int16_t ts = (int16_t)myGFX->textsize,
 842:gfx.c         ****                         x1 = *x + xo * ts,
 843:gfx.c         ****                         y1 = *y + yo * ts,
 844:gfx.c         ****                         x2 = x1 + gw * ts - 1,
 845:gfx.c         ****                         y2 = y1 + gh * ts - 1;
 846:gfx.c         ****                         if(x1 < *minx) *minx = x1;
 847:gfx.c         ****                         if(y1 < *miny) *miny = y1;
 848:gfx.c         ****                         if(x2 > *maxx) *maxx = x2;
 849:gfx.c         ****                         if(y2 > *maxy) *maxy = y2;
 850:gfx.c         ****                         *x += xa * ts;
 851:gfx.c         ****                     }
 852:gfx.c         ****                 }
 853:gfx.c         ****                 
 854:gfx.c         ****             } else { // Default font
 855:gfx.c         ****                 
 856:gfx.c         ****                 if(c == '\n') {                     // Newline?
 857:gfx.c         ****                     *x  = 0;                        // Reset x to zero,
 858:gfx.c         ****                     *y += myGFX->textsize * 8;             // advance y one line
 859:gfx.c         ****                     // min/max x/y unchaged -- that waits for next 'normal' character
 860:gfx.c         ****                 } else if(c != '\r') {  // Normal char; ignore carriage returns
 861:gfx.c         ****                     if(myGFX->wrap && ((*x + myGFX->textsize * 6) > myGFX->_width)) { // Off right?
 862:gfx.c         ****                         *x  = 0;                    // Reset x to zero,
 863:gfx.c         ****                         *y += myGFX->textsize * 8;         // advance y one line
 864:gfx.c         ****                     }
 865:gfx.c         ****                     int x2 = *x + myGFX->textsize * 6 - 1, // Lower-right pixel of char
 866:gfx.c         ****                     y2 = *y + myGFX->textsize * 8 - 1;
 867:gfx.c         ****                     if(x2 > *maxx) *maxx = x2;      // Track max x, y
 868:gfx.c         ****                     if(y2 > *maxy) *maxy = y2;
 869:gfx.c         ****                     if(*x < *minx) *minx = *x;      // Track min x, y
 870:gfx.c         ****                     if(*y < *miny) *miny = *y;
 871:gfx.c         ****                     *x += myGFX->textsize * 6;             // Advance x one char
 872:gfx.c         ****                 }
 873:gfx.c         ****             }
 874:gfx.c         ****         }
 4692              		.loc 1 874 0
 4693 004c 6BE1     		b	.L184
 4694              	.L170:
 826:gfx.c         ****                 } else if(c != '\r') { // Not a carriage return; is normal char
 4695              		.loc 1 826 0
 4696 004e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4697 0050 0D2B     		cmp	r3, #13
 4698 0052 00F06881 		beq	.L184
 4699              	.LBB32:
 827:gfx.c         ****                     last  = pgm_read_byte(&myGFX->gfxFont->last);
 4700              		.loc 1 827 0
 4701 0056 FB68     		ldr	r3, [r7, #12]
 4702 0058 9B69     		ldr	r3, [r3, #24]
 4703 005a 1B7A     		ldrb	r3, [r3, #8]
 4704 005c 87F82F30 		strb	r3, [r7, #47]
 828:gfx.c         ****                     if((c >= first) && (c <= last)) { // Char present in this font?
 4705              		.loc 1 828 0
 4706 0060 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 100


 4707 0062 9B69     		ldr	r3, [r3, #24]
 4708 0064 5B7A     		ldrb	r3, [r3, #9]
 4709 0066 87F82E30 		strb	r3, [r7, #46]
 829:gfx.c         ****                         GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 4710              		.loc 1 829 0
 4711 006a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 4712 006c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4713 0070 9A42     		cmp	r2, r3
 4714 0072 C0F05881 		bcc	.L184
 829:gfx.c         ****                         GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 4715              		.loc 1 829 0 is_stmt 0 discriminator 1
 4716 0076 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 4717 0078 97F82E30 		ldrb	r3, [r7, #46]	@ zero_extendqisi2
 4718 007c 9A42     		cmp	r2, r3
 4719 007e 00F25281 		bhi	.L184
 4720              	.LBB33:
 831:gfx.c         ****                         uint8_t gw = pgm_read_byte(&glyph->width),
 4721              		.loc 1 831 0 is_stmt 1
 4722 0082 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 4723 0084 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4724 0088 D31A     		subs	r3, r2, r3
 4725 008a DA00     		lsls	r2, r3, #3
 830:gfx.c         ****                                                                           &myGFX->gfxFont->glyph))[
 4726              		.loc 1 830 0
 4727 008c FB68     		ldr	r3, [r7, #12]
 4728 008e 9B69     		ldr	r3, [r3, #24]
 4729 0090 0433     		adds	r3, r3, #4
 4730 0092 18CB     		ldmia	r3, {r3-r4}
 831:gfx.c         ****                         uint8_t gw = pgm_read_byte(&glyph->width),
 4731              		.loc 1 831 0
 4732 0094 1344     		add	r3, r3, r2
 830:gfx.c         ****                                                                           &myGFX->gfxFont->glyph))[
 4733              		.loc 1 830 0
 4734 0096 BB62     		str	r3, [r7, #40]
 832:gfx.c         ****                         gh = pgm_read_byte(&glyph->height),
 4735              		.loc 1 832 0
 4736 0098 BB6A     		ldr	r3, [r7, #40]
 4737 009a 9B78     		ldrb	r3, [r3, #2]
 4738 009c 87F82730 		strb	r3, [r7, #39]
 833:gfx.c         ****                         xa = pgm_read_byte(&glyph->xAdvance);
 4739              		.loc 1 833 0
 4740 00a0 BB6A     		ldr	r3, [r7, #40]
 4741 00a2 DB78     		ldrb	r3, [r3, #3]
 4742 00a4 87F82630 		strb	r3, [r7, #38]
 834:gfx.c         ****                         int8_t  xo = pgm_read_byte(&glyph->xOffset),
 4743              		.loc 1 834 0
 4744 00a8 BB6A     		ldr	r3, [r7, #40]
 4745 00aa 1B79     		ldrb	r3, [r3, #4]
 4746 00ac 87F82530 		strb	r3, [r7, #37]
 835:gfx.c         ****                         yo = pgm_read_byte(&glyph->yOffset);
 4747              		.loc 1 835 0
 4748 00b0 BB6A     		ldr	r3, [r7, #40]
 4749 00b2 0533     		adds	r3, r3, #5
 4750 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4751 00b6 87F82430 		strb	r3, [r7, #36]
 836:gfx.c         ****                         if(myGFX->wrap && ((*x+(((int16_t)xo+gw)*myGFX->textsize)) > myGFX->_width)
 4752              		.loc 1 836 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 101


 4753 00ba BB6A     		ldr	r3, [r7, #40]
 4754 00bc 0633     		adds	r3, r3, #6
 4755 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4756 00c0 87F82330 		strb	r3, [r7, #35]
 837:gfx.c         ****                             *x  = 0; // Reset x to zero, advance y by one line
 4757              		.loc 1 837 0
 4758 00c4 FB68     		ldr	r3, [r7, #12]
 4759 00c6 9B8A     		ldrh	r3, [r3, #20]
 4760 00c8 002B     		cmp	r3, #0
 4761 00ca 27D0     		beq	.L172
 837:gfx.c         ****                             *x  = 0; // Reset x to zero, advance y by one line
 4762              		.loc 1 837 0 is_stmt 0 discriminator 1
 4763 00cc 7B68     		ldr	r3, [r7, #4]
 4764 00ce B3F90030 		ldrsh	r3, [r3]
 4765 00d2 1946     		mov	r1, r3
 4766 00d4 97F92420 		ldrsb	r2, [r7, #36]
 4767 00d8 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 4768 00dc 1344     		add	r3, r3, r2
 4769 00de FA68     		ldr	r2, [r7, #12]
 4770 00e0 D289     		ldrh	r2, [r2, #14]
 4771 00e2 02FB03F3 		mul	r3, r2, r3
 4772 00e6 0B44     		add	r3, r3, r1
 4773 00e8 FA68     		ldr	r2, [r7, #12]
 4774 00ea 9288     		ldrh	r2, [r2, #4]
 4775 00ec 9342     		cmp	r3, r2
 4776 00ee 15DD     		ble	.L172
 838:gfx.c         ****                             *y += myGFX->textsize * (uint8_t)pgm_read_byte(&myGFX->gfxFont->yAdvanc
 4777              		.loc 1 838 0 is_stmt 1
 4778 00f0 7B68     		ldr	r3, [r7, #4]
 4779 00f2 0022     		movs	r2, #0
 4780 00f4 1A80     		strh	r2, [r3]	@ movhi
 839:gfx.c         ****                         }
 4781              		.loc 1 839 0
 4782 00f6 3B68     		ldr	r3, [r7]
 4783 00f8 B3F90030 		ldrsh	r3, [r3]
 4784 00fc 9AB2     		uxth	r2, r3
 4785 00fe FB68     		ldr	r3, [r7, #12]
 4786 0100 DB89     		ldrh	r3, [r3, #14]
 4787 0102 F968     		ldr	r1, [r7, #12]
 4788 0104 8969     		ldr	r1, [r1, #24]
 4789 0106 0A31     		adds	r1, r1, #10
 4790 0108 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 4791 010a 89B2     		uxth	r1, r1
 4792 010c 01FB03F3 		mul	r3, r1, r3
 4793 0110 9BB2     		uxth	r3, r3
 4794 0112 1344     		add	r3, r3, r2
 4795 0114 9BB2     		uxth	r3, r3
 4796 0116 1AB2     		sxth	r2, r3
 4797 0118 3B68     		ldr	r3, [r7]
 4798 011a 1A80     		strh	r2, [r3]	@ movhi
 4799              	.L172:
 841:gfx.c         ****                         x1 = *x + xo * ts,
 4800              		.loc 1 841 0
 4801 011c FB68     		ldr	r3, [r7, #12]
 4802 011e DB89     		ldrh	r3, [r3, #14]
 4803 0120 3B84     		strh	r3, [r7, #32]	@ movhi
 842:gfx.c         ****                         y1 = *y + yo * ts,
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 102


 4804              		.loc 1 842 0
 4805 0122 7B68     		ldr	r3, [r7, #4]
 4806 0124 B3F90030 		ldrsh	r3, [r3]
 4807 0128 9AB2     		uxth	r2, r3
 4808 012a 97F92430 		ldrsb	r3, [r7, #36]
 4809 012e 9BB2     		uxth	r3, r3
 4810 0130 398C     		ldrh	r1, [r7, #32]
 4811 0132 01FB03F3 		mul	r3, r1, r3
 4812 0136 9BB2     		uxth	r3, r3
 4813 0138 1344     		add	r3, r3, r2
 4814 013a 9BB2     		uxth	r3, r3
 4815 013c FB83     		strh	r3, [r7, #30]	@ movhi
 843:gfx.c         ****                         x2 = x1 + gw * ts - 1,
 4816              		.loc 1 843 0
 4817 013e 3B68     		ldr	r3, [r7]
 4818 0140 B3F90030 		ldrsh	r3, [r3]
 4819 0144 9AB2     		uxth	r2, r3
 4820 0146 97F92330 		ldrsb	r3, [r7, #35]
 4821 014a 9BB2     		uxth	r3, r3
 4822 014c 398C     		ldrh	r1, [r7, #32]
 4823 014e 01FB03F3 		mul	r3, r1, r3
 4824 0152 9BB2     		uxth	r3, r3
 4825 0154 1344     		add	r3, r3, r2
 4826 0156 9BB2     		uxth	r3, r3
 4827 0158 BB83     		strh	r3, [r7, #28]	@ movhi
 844:gfx.c         ****                         y2 = y1 + gh * ts - 1;
 4828              		.loc 1 844 0
 4829 015a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 4830 015e 9BB2     		uxth	r3, r3
 4831 0160 3A8C     		ldrh	r2, [r7, #32]
 4832 0162 02FB03F3 		mul	r3, r2, r3
 4833 0166 9AB2     		uxth	r2, r3
 4834 0168 FB8B     		ldrh	r3, [r7, #30]
 4835 016a 1344     		add	r3, r3, r2
 4836 016c 9BB2     		uxth	r3, r3
 4837 016e 013B     		subs	r3, r3, #1
 4838 0170 9BB2     		uxth	r3, r3
 4839 0172 7B83     		strh	r3, [r7, #26]	@ movhi
 845:gfx.c         ****                         if(x1 < *minx) *minx = x1;
 4840              		.loc 1 845 0
 4841 0174 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 4842 0178 9BB2     		uxth	r3, r3
 4843 017a 3A8C     		ldrh	r2, [r7, #32]
 4844 017c 02FB03F3 		mul	r3, r2, r3
 4845 0180 9AB2     		uxth	r2, r3
 4846 0182 BB8B     		ldrh	r3, [r7, #28]
 4847 0184 1344     		add	r3, r3, r2
 4848 0186 9BB2     		uxth	r3, r3
 4849 0188 013B     		subs	r3, r3, #1
 4850 018a 9BB2     		uxth	r3, r3
 4851 018c 3B83     		strh	r3, [r7, #24]	@ movhi
 846:gfx.c         ****                         if(y1 < *miny) *miny = y1;
 4852              		.loc 1 846 0
 4853 018e BB6B     		ldr	r3, [r7, #56]
 4854 0190 B3F90030 		ldrsh	r3, [r3]
 4855 0194 B7F91E20 		ldrsh	r2, [r7, #30]
 4856 0198 9A42     		cmp	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 103


 4857 019a 02DA     		bge	.L173
 846:gfx.c         ****                         if(y1 < *miny) *miny = y1;
 4858              		.loc 1 846 0 is_stmt 0 discriminator 1
 4859 019c BB6B     		ldr	r3, [r7, #56]
 4860 019e FA8B     		ldrh	r2, [r7, #30]	@ movhi
 4861 01a0 1A80     		strh	r2, [r3]	@ movhi
 4862              	.L173:
 847:gfx.c         ****                         if(x2 > *maxx) *maxx = x2;
 4863              		.loc 1 847 0 is_stmt 1
 4864 01a2 FB6B     		ldr	r3, [r7, #60]
 4865 01a4 B3F90030 		ldrsh	r3, [r3]
 4866 01a8 B7F91C20 		ldrsh	r2, [r7, #28]
 4867 01ac 9A42     		cmp	r2, r3
 4868 01ae 02DA     		bge	.L174
 847:gfx.c         ****                         if(x2 > *maxx) *maxx = x2;
 4869              		.loc 1 847 0 is_stmt 0 discriminator 1
 4870 01b0 FB6B     		ldr	r3, [r7, #60]
 4871 01b2 BA8B     		ldrh	r2, [r7, #28]	@ movhi
 4872 01b4 1A80     		strh	r2, [r3]	@ movhi
 4873              	.L174:
 848:gfx.c         ****                         if(y2 > *maxy) *maxy = y2;
 4874              		.loc 1 848 0 is_stmt 1
 4875 01b6 3B6C     		ldr	r3, [r7, #64]
 4876 01b8 B3F90030 		ldrsh	r3, [r3]
 4877 01bc B7F91A20 		ldrsh	r2, [r7, #26]
 4878 01c0 9A42     		cmp	r2, r3
 4879 01c2 02DD     		ble	.L175
 848:gfx.c         ****                         if(y2 > *maxy) *maxy = y2;
 4880              		.loc 1 848 0 is_stmt 0 discriminator 1
 4881 01c4 3B6C     		ldr	r3, [r7, #64]
 4882 01c6 7A8B     		ldrh	r2, [r7, #26]	@ movhi
 4883 01c8 1A80     		strh	r2, [r3]	@ movhi
 4884              	.L175:
 849:gfx.c         ****                         *x += xa * ts;
 4885              		.loc 1 849 0 is_stmt 1
 4886 01ca 7B6C     		ldr	r3, [r7, #68]
 4887 01cc B3F90030 		ldrsh	r3, [r3]
 4888 01d0 B7F91820 		ldrsh	r2, [r7, #24]
 4889 01d4 9A42     		cmp	r2, r3
 4890 01d6 02DD     		ble	.L176
 849:gfx.c         ****                         *x += xa * ts;
 4891              		.loc 1 849 0 is_stmt 0 discriminator 1
 4892 01d8 7B6C     		ldr	r3, [r7, #68]
 4893 01da 3A8B     		ldrh	r2, [r7, #24]	@ movhi
 4894 01dc 1A80     		strh	r2, [r3]	@ movhi
 4895              	.L176:
 850:gfx.c         ****                     }
 4896              		.loc 1 850 0 is_stmt 1
 4897 01de 7B68     		ldr	r3, [r7, #4]
 4898 01e0 B3F90030 		ldrsh	r3, [r3]
 4899 01e4 9AB2     		uxth	r2, r3
 4900 01e6 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 4901 01ea 9BB2     		uxth	r3, r3
 4902 01ec 398C     		ldrh	r1, [r7, #32]
 4903 01ee 01FB03F3 		mul	r3, r1, r3
 4904 01f2 9BB2     		uxth	r3, r3
 4905 01f4 1344     		add	r3, r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 104


 4906 01f6 9BB2     		uxth	r3, r3
 4907 01f8 1AB2     		sxth	r2, r3
 4908 01fa 7B68     		ldr	r3, [r7, #4]
 4909 01fc 1A80     		strh	r2, [r3]	@ movhi
 4910              	.LBE33:
 4911              	.LBE32:
 4912              		.loc 1 874 0
 4913 01fe 92E0     		b	.L184
 4914              	.L169:
 856:gfx.c         ****                     *x  = 0;                        // Reset x to zero,
 4915              		.loc 1 856 0
 4916 0200 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4917 0202 0A2B     		cmp	r3, #10
 4918 0204 10D1     		bne	.L178
 857:gfx.c         ****                     *y += myGFX->textsize * 8;             // advance y one line
 4919              		.loc 1 857 0
 4920 0206 7B68     		ldr	r3, [r7, #4]
 4921 0208 0022     		movs	r2, #0
 4922 020a 1A80     		strh	r2, [r3]	@ movhi
 858:gfx.c         ****                     // min/max x/y unchaged -- that waits for next 'normal' character
 4923              		.loc 1 858 0
 4924 020c 3B68     		ldr	r3, [r7]
 4925 020e B3F90030 		ldrsh	r3, [r3]
 4926 0212 9AB2     		uxth	r2, r3
 4927 0214 FB68     		ldr	r3, [r7, #12]
 4928 0216 DB89     		ldrh	r3, [r3, #14]
 4929 0218 DB00     		lsls	r3, r3, #3
 4930 021a 9BB2     		uxth	r3, r3
 4931 021c 1344     		add	r3, r3, r2
 4932 021e 9BB2     		uxth	r3, r3
 4933 0220 1AB2     		sxth	r2, r3
 4934 0222 3B68     		ldr	r3, [r7]
 4935 0224 1A80     		strh	r2, [r3]	@ movhi
 4936              		.loc 1 874 0
 4937 0226 7EE0     		b	.L184
 4938              	.L178:
 860:gfx.c         ****                     if(myGFX->wrap && ((*x + myGFX->textsize * 6) > myGFX->_width)) { // Off right?
 4939              		.loc 1 860 0
 4940 0228 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4941 022a 0D2B     		cmp	r3, #13
 4942 022c 7BD0     		beq	.L184
 4943              	.LBB34:
 861:gfx.c         ****                         *x  = 0;                    // Reset x to zero,
 4944              		.loc 1 861 0
 4945 022e FB68     		ldr	r3, [r7, #12]
 4946 0230 9B8A     		ldrh	r3, [r3, #20]
 4947 0232 002B     		cmp	r3, #0
 4948 0234 1FD0     		beq	.L179
 861:gfx.c         ****                         *x  = 0;                    // Reset x to zero,
 4949              		.loc 1 861 0 is_stmt 0 discriminator 1
 4950 0236 7B68     		ldr	r3, [r7, #4]
 4951 0238 B3F90030 		ldrsh	r3, [r3]
 4952 023c 1946     		mov	r1, r3
 4953 023e FB68     		ldr	r3, [r7, #12]
 4954 0240 DB89     		ldrh	r3, [r3, #14]
 4955 0242 1A46     		mov	r2, r3
 4956 0244 1346     		mov	r3, r2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 105


 4957 0246 5B00     		lsls	r3, r3, #1
 4958 0248 1344     		add	r3, r3, r2
 4959 024a 5B00     		lsls	r3, r3, #1
 4960 024c 0B44     		add	r3, r3, r1
 4961 024e FA68     		ldr	r2, [r7, #12]
 4962 0250 9288     		ldrh	r2, [r2, #4]
 4963 0252 9342     		cmp	r3, r2
 4964 0254 0FDD     		ble	.L179
 862:gfx.c         ****                         *y += myGFX->textsize * 8;         // advance y one line
 4965              		.loc 1 862 0 is_stmt 1
 4966 0256 7B68     		ldr	r3, [r7, #4]
 4967 0258 0022     		movs	r2, #0
 4968 025a 1A80     		strh	r2, [r3]	@ movhi
 863:gfx.c         ****                     }
 4969              		.loc 1 863 0
 4970 025c 3B68     		ldr	r3, [r7]
 4971 025e B3F90030 		ldrsh	r3, [r3]
 4972 0262 9AB2     		uxth	r2, r3
 4973 0264 FB68     		ldr	r3, [r7, #12]
 4974 0266 DB89     		ldrh	r3, [r3, #14]
 4975 0268 DB00     		lsls	r3, r3, #3
 4976 026a 9BB2     		uxth	r3, r3
 4977 026c 1344     		add	r3, r3, r2
 4978 026e 9BB2     		uxth	r3, r3
 4979 0270 1AB2     		sxth	r2, r3
 4980 0272 3B68     		ldr	r3, [r7]
 4981 0274 1A80     		strh	r2, [r3]	@ movhi
 4982              	.L179:
 865:gfx.c         ****                     y2 = *y + myGFX->textsize * 8 - 1;
 4983              		.loc 1 865 0
 4984 0276 7B68     		ldr	r3, [r7, #4]
 4985 0278 B3F90030 		ldrsh	r3, [r3]
 4986 027c 1946     		mov	r1, r3
 4987 027e FB68     		ldr	r3, [r7, #12]
 4988 0280 DB89     		ldrh	r3, [r3, #14]
 4989 0282 1A46     		mov	r2, r3
 4990 0284 1346     		mov	r3, r2
 4991 0286 5B00     		lsls	r3, r3, #1
 4992 0288 1344     		add	r3, r3, r2
 4993 028a 5B00     		lsls	r3, r3, #1
 4994 028c 0B44     		add	r3, r3, r1
 4995 028e 013B     		subs	r3, r3, #1
 4996 0290 7B61     		str	r3, [r7, #20]
 866:gfx.c         ****                     if(x2 > *maxx) *maxx = x2;      // Track max x, y
 4997              		.loc 1 866 0
 4998 0292 3B68     		ldr	r3, [r7]
 4999 0294 B3F90030 		ldrsh	r3, [r3]
 5000 0298 1A46     		mov	r2, r3
 5001 029a FB68     		ldr	r3, [r7, #12]
 5002 029c DB89     		ldrh	r3, [r3, #14]
 5003 029e DB00     		lsls	r3, r3, #3
 5004 02a0 1344     		add	r3, r3, r2
 5005 02a2 013B     		subs	r3, r3, #1
 5006 02a4 3B61     		str	r3, [r7, #16]
 867:gfx.c         ****                     if(y2 > *maxy) *maxy = y2;
 5007              		.loc 1 867 0
 5008 02a6 3B6C     		ldr	r3, [r7, #64]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 106


 5009 02a8 B3F90030 		ldrsh	r3, [r3]
 5010 02ac 1A46     		mov	r2, r3
 5011 02ae 7B69     		ldr	r3, [r7, #20]
 5012 02b0 9A42     		cmp	r2, r3
 5013 02b2 03DA     		bge	.L180
 867:gfx.c         ****                     if(y2 > *maxy) *maxy = y2;
 5014              		.loc 1 867 0 is_stmt 0 discriminator 1
 5015 02b4 7B69     		ldr	r3, [r7, #20]
 5016 02b6 1AB2     		sxth	r2, r3
 5017 02b8 3B6C     		ldr	r3, [r7, #64]
 5018 02ba 1A80     		strh	r2, [r3]	@ movhi
 5019              	.L180:
 868:gfx.c         ****                     if(*x < *minx) *minx = *x;      // Track min x, y
 5020              		.loc 1 868 0 is_stmt 1
 5021 02bc 7B6C     		ldr	r3, [r7, #68]
 5022 02be B3F90030 		ldrsh	r3, [r3]
 5023 02c2 1A46     		mov	r2, r3
 5024 02c4 3B69     		ldr	r3, [r7, #16]
 5025 02c6 9A42     		cmp	r2, r3
 5026 02c8 03DA     		bge	.L181
 868:gfx.c         ****                     if(*x < *minx) *minx = *x;      // Track min x, y
 5027              		.loc 1 868 0 is_stmt 0 discriminator 1
 5028 02ca 3B69     		ldr	r3, [r7, #16]
 5029 02cc 1AB2     		sxth	r2, r3
 5030 02ce 7B6C     		ldr	r3, [r7, #68]
 5031 02d0 1A80     		strh	r2, [r3]	@ movhi
 5032              	.L181:
 869:gfx.c         ****                     if(*y < *miny) *miny = *y;
 5033              		.loc 1 869 0 is_stmt 1
 5034 02d2 7B68     		ldr	r3, [r7, #4]
 5035 02d4 B3F90020 		ldrsh	r2, [r3]
 5036 02d8 BB6B     		ldr	r3, [r7, #56]
 5037 02da B3F90030 		ldrsh	r3, [r3]
 5038 02de 9A42     		cmp	r2, r3
 5039 02e0 04DA     		bge	.L182
 869:gfx.c         ****                     if(*y < *miny) *miny = *y;
 5040              		.loc 1 869 0 is_stmt 0 discriminator 1
 5041 02e2 7B68     		ldr	r3, [r7, #4]
 5042 02e4 B3F90020 		ldrsh	r2, [r3]
 5043 02e8 BB6B     		ldr	r3, [r7, #56]
 5044 02ea 1A80     		strh	r2, [r3]	@ movhi
 5045              	.L182:
 870:gfx.c         ****                     *x += myGFX->textsize * 6;             // Advance x one char
 5046              		.loc 1 870 0 is_stmt 1
 5047 02ec 3B68     		ldr	r3, [r7]
 5048 02ee B3F90020 		ldrsh	r2, [r3]
 5049 02f2 FB6B     		ldr	r3, [r7, #60]
 5050 02f4 B3F90030 		ldrsh	r3, [r3]
 5051 02f8 9A42     		cmp	r2, r3
 5052 02fa 04DA     		bge	.L183
 870:gfx.c         ****                     *x += myGFX->textsize * 6;             // Advance x one char
 5053              		.loc 1 870 0 is_stmt 0 discriminator 1
 5054 02fc 3B68     		ldr	r3, [r7]
 5055 02fe B3F90020 		ldrsh	r2, [r3]
 5056 0302 FB6B     		ldr	r3, [r7, #60]
 5057 0304 1A80     		strh	r2, [r3]	@ movhi
 5058              	.L183:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 107


 871:gfx.c         ****                 }
 5059              		.loc 1 871 0 is_stmt 1
 5060 0306 7B68     		ldr	r3, [r7, #4]
 5061 0308 B3F90030 		ldrsh	r3, [r3]
 5062 030c 9AB2     		uxth	r2, r3
 5063 030e FB68     		ldr	r3, [r7, #12]
 5064 0310 DB89     		ldrh	r3, [r3, #14]
 5065 0312 1946     		mov	r1, r3	@ movhi
 5066 0314 4900     		lsls	r1, r1, #1
 5067 0316 0B44     		add	r3, r3, r1
 5068 0318 5B00     		lsls	r3, r3, #1
 5069 031a 9BB2     		uxth	r3, r3
 5070 031c 1344     		add	r3, r3, r2
 5071 031e 9BB2     		uxth	r3, r3
 5072 0320 1AB2     		sxth	r2, r3
 5073 0322 7B68     		ldr	r3, [r7, #4]
 5074 0324 1A80     		strh	r2, [r3]	@ movhi
 5075              	.L184:
 5076              	.LBE34:
 5077              		.loc 1 874 0
 5078 0326 00BF     		nop
 5079 0328 3037     		adds	r7, r7, #48
 5080              		.cfi_def_cfa_offset 8
 5081 032a BD46     		mov	sp, r7
 5082              		.cfi_def_cfa_register 13
 5083              		@ sp needed
 5084 032c 90BC     		pop	{r4, r7}
 5085              		.cfi_restore 7
 5086              		.cfi_restore 4
 5087              		.cfi_def_cfa_offset 0
 5088 032e 7047     		bx	lr
 5089              		.cfi_endproc
 5090              	.LFE101:
 5091              		.size	GFXcharBounds, .-GFXcharBounds
 5092              		.section	.text.GFXgetTextBounds,"ax",%progbits
 5093              		.align	2
 5094              		.global	GFXgetTextBounds
 5095              		.thumb
 5096              		.thumb_func
 5097              		.type	GFXgetTextBounds, %function
 5098              	GFXgetTextBounds:
 5099              	.LFB102:
 875:gfx.c         ****         
 876:gfx.c         ****         
 877:gfx.c         ****         // Pass string and a cursor position, returns UL corner and W,H.
 878:gfx.c         ****         void GFXgetTextBounds(GFX* myGFX, char *str, int16_t x, int16_t y,
 879:gfx.c         ****                               int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h) {
 5100              		.loc 1 879 0
 5101              		.cfi_startproc
 5102              		@ args = 16, pretend = 0, frame = 32
 5103              		@ frame_needed = 1, uses_anonymous_args = 0
 5104 0000 80B5     		push	{r7, lr}
 5105              		.cfi_def_cfa_offset 8
 5106              		.cfi_offset 7, -8
 5107              		.cfi_offset 14, -4
 5108 0002 8CB0     		sub	sp, sp, #48
 5109              		.cfi_def_cfa_offset 56
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 108


 5110 0004 04AF     		add	r7, sp, #16
 5111              		.cfi_def_cfa 7, 40
 5112 0006 F860     		str	r0, [r7, #12]
 5113 0008 B960     		str	r1, [r7, #8]
 5114 000a 1146     		mov	r1, r2
 5115 000c 1A46     		mov	r2, r3
 5116 000e 0B46     		mov	r3, r1	@ movhi
 5117 0010 FB80     		strh	r3, [r7, #6]	@ movhi
 5118 0012 1346     		mov	r3, r2	@ movhi
 5119 0014 BB80     		strh	r3, [r7, #4]	@ movhi
 880:gfx.c         ****             uint8_t c; // Current character
 881:gfx.c         ****             
 882:gfx.c         ****             *x1 = x;
 5120              		.loc 1 882 0
 5121 0016 B7F90620 		ldrsh	r2, [r7, #6]
 5122 001a BB6A     		ldr	r3, [r7, #40]
 5123 001c 1A80     		strh	r2, [r3]	@ movhi
 883:gfx.c         ****             *y1 = y;
 5124              		.loc 1 883 0
 5125 001e B7F90420 		ldrsh	r2, [r7, #4]
 5126 0022 FB6A     		ldr	r3, [r7, #44]
 5127 0024 1A80     		strh	r2, [r3]	@ movhi
 884:gfx.c         ****             *w  = *h = 0;
 5128              		.loc 1 884 0
 5129 0026 7B6B     		ldr	r3, [r7, #52]
 5130 0028 0022     		movs	r2, #0
 5131 002a 1A80     		strh	r2, [r3]	@ movhi
 5132 002c 7B6B     		ldr	r3, [r7, #52]
 5133 002e 1A88     		ldrh	r2, [r3]
 5134 0030 3B6B     		ldr	r3, [r7, #48]
 5135 0032 1A80     		strh	r2, [r3]	@ movhi
 885:gfx.c         ****             
 886:gfx.c         ****             int16_t minx = myGFX->_width, miny = myGFX->_height, maxx = -1, maxy = -1;
 5136              		.loc 1 886 0
 5137 0034 FB68     		ldr	r3, [r7, #12]
 5138 0036 9B88     		ldrh	r3, [r3, #4]
 5139 0038 1BB2     		sxth	r3, r3
 5140 003a BB83     		strh	r3, [r7, #28]	@ movhi
 5141 003c FB68     		ldr	r3, [r7, #12]
 5142 003e DB88     		ldrh	r3, [r3, #6]
 5143 0040 1BB2     		sxth	r3, r3
 5144 0042 7B83     		strh	r3, [r7, #26]	@ movhi
 5145 0044 4FF6FF73 		movw	r3, #65535
 5146 0048 3B83     		strh	r3, [r7, #24]	@ movhi
 5147 004a 4FF6FF73 		movw	r3, #65535
 5148 004e FB82     		strh	r3, [r7, #22]	@ movhi
 887:gfx.c         ****             
 888:gfx.c         ****             while((c = *str++))
 5149              		.loc 1 888 0
 5150 0050 12E0     		b	.L186
 5151              	.L187:
 889:gfx.c         ****                 GFXcharBounds(myGFX, c, &x, &y, &minx, &miny, &maxx, &maxy);
 5152              		.loc 1 889 0
 5153 0052 381D     		adds	r0, r7, #4
 5154 0054 BA1D     		adds	r2, r7, #6
 5155 0056 F97F     		ldrb	r1, [r7, #31]	@ zero_extendqisi2
 5156 0058 07F11603 		add	r3, r7, #22
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 109


 5157 005c 0393     		str	r3, [sp, #12]
 5158 005e 07F11803 		add	r3, r7, #24
 5159 0062 0293     		str	r3, [sp, #8]
 5160 0064 07F11A03 		add	r3, r7, #26
 5161 0068 0193     		str	r3, [sp, #4]
 5162 006a 07F11C03 		add	r3, r7, #28
 5163 006e 0093     		str	r3, [sp]
 5164 0070 0346     		mov	r3, r0
 5165 0072 F868     		ldr	r0, [r7, #12]
 5166 0074 FFF7FEFF 		bl	GFXcharBounds
 5167              	.L186:
 888:gfx.c         ****                 GFXcharBounds(myGFX, c, &x, &y, &minx, &miny, &maxx, &maxy);
 5168              		.loc 1 888 0
 5169 0078 BB68     		ldr	r3, [r7, #8]
 5170 007a 5A1C     		adds	r2, r3, #1
 5171 007c BA60     		str	r2, [r7, #8]
 5172 007e 1B78     		ldrb	r3, [r3]
 5173 0080 FB77     		strb	r3, [r7, #31]
 5174 0082 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5175 0084 002B     		cmp	r3, #0
 5176 0086 E4D1     		bne	.L187
 890:gfx.c         ****             
 891:gfx.c         ****             if(maxx >= minx) {
 5177              		.loc 1 891 0
 5178 0088 B7F91820 		ldrsh	r2, [r7, #24]
 5179 008c B7F91C30 		ldrsh	r3, [r7, #28]
 5180 0090 9A42     		cmp	r2, r3
 5181 0092 0FDB     		blt	.L188
 892:gfx.c         ****                 *x1 = minx;
 5182              		.loc 1 892 0
 5183 0094 B7F91C20 		ldrsh	r2, [r7, #28]
 5184 0098 BB6A     		ldr	r3, [r7, #40]
 5185 009a 1A80     		strh	r2, [r3]	@ movhi
 893:gfx.c         ****                 *w  = maxx - minx + 1;
 5186              		.loc 1 893 0
 5187 009c B7F91830 		ldrsh	r3, [r7, #24]
 5188 00a0 9AB2     		uxth	r2, r3
 5189 00a2 B7F91C30 		ldrsh	r3, [r7, #28]
 5190 00a6 9BB2     		uxth	r3, r3
 5191 00a8 D31A     		subs	r3, r2, r3
 5192 00aa 9BB2     		uxth	r3, r3
 5193 00ac 0133     		adds	r3, r3, #1
 5194 00ae 9AB2     		uxth	r2, r3
 5195 00b0 3B6B     		ldr	r3, [r7, #48]
 5196 00b2 1A80     		strh	r2, [r3]	@ movhi
 5197              	.L188:
 894:gfx.c         ****             }
 895:gfx.c         ****             if(maxy >= miny) {
 5198              		.loc 1 895 0
 5199 00b4 B7F91620 		ldrsh	r2, [r7, #22]
 5200 00b8 B7F91A30 		ldrsh	r3, [r7, #26]
 5201 00bc 9A42     		cmp	r2, r3
 5202 00be 0FDB     		blt	.L190
 896:gfx.c         ****                 *y1 = miny;
 5203              		.loc 1 896 0
 5204 00c0 B7F91A20 		ldrsh	r2, [r7, #26]
 5205 00c4 FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 110


 5206 00c6 1A80     		strh	r2, [r3]	@ movhi
 897:gfx.c         ****                 *h  = maxy - miny + 1;
 5207              		.loc 1 897 0
 5208 00c8 B7F91630 		ldrsh	r3, [r7, #22]
 5209 00cc 9AB2     		uxth	r2, r3
 5210 00ce B7F91A30 		ldrsh	r3, [r7, #26]
 5211 00d2 9BB2     		uxth	r3, r3
 5212 00d4 D31A     		subs	r3, r2, r3
 5213 00d6 9BB2     		uxth	r3, r3
 5214 00d8 0133     		adds	r3, r3, #1
 5215 00da 9AB2     		uxth	r2, r3
 5216 00dc 7B6B     		ldr	r3, [r7, #52]
 5217 00de 1A80     		strh	r2, [r3]	@ movhi
 5218              	.L190:
 898:gfx.c         ****             }
 899:gfx.c         ****         }
 5219              		.loc 1 899 0
 5220 00e0 00BF     		nop
 5221 00e2 2037     		adds	r7, r7, #32
 5222              		.cfi_def_cfa_offset 8
 5223 00e4 BD46     		mov	sp, r7
 5224              		.cfi_def_cfa_register 13
 5225              		@ sp needed
 5226 00e6 80BD     		pop	{r7, pc}
 5227              		.cfi_endproc
 5228              	.LFE102:
 5229              		.size	GFXgetTextBounds, .-GFXgetTextBounds
 5230              		.section	.text.GFXwidth,"ax",%progbits
 5231              		.align	2
 5232              		.global	GFXwidth
 5233              		.thumb
 5234              		.thumb_func
 5235              		.type	GFXwidth, %function
 5236              	GFXwidth:
 5237              	.LFB103:
 900:gfx.c         ****         
 901:gfx.c         ****         
 902:gfx.c         ****         
 903:gfx.c         ****         // Return the size of the display (per current rotation)
 904:gfx.c         ****         int16_t GFXwidth(GFX* myGFX ) {
 5238              		.loc 1 904 0
 5239              		.cfi_startproc
 5240              		@ args = 0, pretend = 0, frame = 8
 5241              		@ frame_needed = 1, uses_anonymous_args = 0
 5242              		@ link register save eliminated.
 5243 0000 80B4     		push	{r7}
 5244              		.cfi_def_cfa_offset 4
 5245              		.cfi_offset 7, -4
 5246 0002 83B0     		sub	sp, sp, #12
 5247              		.cfi_def_cfa_offset 16
 5248 0004 00AF     		add	r7, sp, #0
 5249              		.cfi_def_cfa_register 7
 5250 0006 7860     		str	r0, [r7, #4]
 905:gfx.c         ****             return myGFX->_width;
 5251              		.loc 1 905 0
 5252 0008 7B68     		ldr	r3, [r7, #4]
 5253 000a 9B88     		ldrh	r3, [r3, #4]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 111


 5254 000c 1BB2     		sxth	r3, r3
 906:gfx.c         ****         }
 5255              		.loc 1 906 0
 5256 000e 1846     		mov	r0, r3
 5257 0010 0C37     		adds	r7, r7, #12
 5258              		.cfi_def_cfa_offset 4
 5259 0012 BD46     		mov	sp, r7
 5260              		.cfi_def_cfa_register 13
 5261              		@ sp needed
 5262 0014 80BC     		pop	{r7}
 5263              		.cfi_restore 7
 5264              		.cfi_def_cfa_offset 0
 5265 0016 7047     		bx	lr
 5266              		.cfi_endproc
 5267              	.LFE103:
 5268              		.size	GFXwidth, .-GFXwidth
 5269              		.section	.text.GFXheight,"ax",%progbits
 5270              		.align	2
 5271              		.global	GFXheight
 5272              		.thumb
 5273              		.thumb_func
 5274              		.type	GFXheight, %function
 5275              	GFXheight:
 5276              	.LFB104:
 907:gfx.c         ****         
 908:gfx.c         ****         int16_t GFXheight(GFX* myGFX)  {
 5277              		.loc 1 908 0
 5278              		.cfi_startproc
 5279              		@ args = 0, pretend = 0, frame = 8
 5280              		@ frame_needed = 1, uses_anonymous_args = 0
 5281              		@ link register save eliminated.
 5282 0000 80B4     		push	{r7}
 5283              		.cfi_def_cfa_offset 4
 5284              		.cfi_offset 7, -4
 5285 0002 83B0     		sub	sp, sp, #12
 5286              		.cfi_def_cfa_offset 16
 5287 0004 00AF     		add	r7, sp, #0
 5288              		.cfi_def_cfa_register 7
 5289 0006 7860     		str	r0, [r7, #4]
 909:gfx.c         ****             return myGFX->_height;
 5290              		.loc 1 909 0
 5291 0008 7B68     		ldr	r3, [r7, #4]
 5292 000a DB88     		ldrh	r3, [r3, #6]
 5293 000c 1BB2     		sxth	r3, r3
 910:gfx.c         ****         }
 5294              		.loc 1 910 0
 5295 000e 1846     		mov	r0, r3
 5296 0010 0C37     		adds	r7, r7, #12
 5297              		.cfi_def_cfa_offset 4
 5298 0012 BD46     		mov	sp, r7
 5299              		.cfi_def_cfa_register 13
 5300              		@ sp needed
 5301 0014 80BC     		pop	{r7}
 5302              		.cfi_restore 7
 5303              		.cfi_def_cfa_offset 0
 5304 0016 7047     		bx	lr
 5305              		.cfi_endproc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 112


 5306              	.LFE104:
 5307              		.size	GFXheight, .-GFXheight
 5308              		.section	.text.GFXinvertDisplay,"ax",%progbits
 5309              		.align	2
 5310              		.global	GFXinvertDisplay
 5311              		.thumb
 5312              		.thumb_func
 5313              		.type	GFXinvertDisplay, %function
 5314              	GFXinvertDisplay:
 5315              	.LFB105:
 911:gfx.c         ****         
 912:gfx.c         ****         void GFXinvertDisplay(GFX* myGFX, uint8_t i) {
 5316              		.loc 1 912 0
 5317              		.cfi_startproc
 5318              		@ args = 0, pretend = 0, frame = 8
 5319              		@ frame_needed = 1, uses_anonymous_args = 0
 5320              		@ link register save eliminated.
 5321 0000 80B4     		push	{r7}
 5322              		.cfi_def_cfa_offset 4
 5323              		.cfi_offset 7, -4
 5324 0002 83B0     		sub	sp, sp, #12
 5325              		.cfi_def_cfa_offset 16
 5326 0004 00AF     		add	r7, sp, #0
 5327              		.cfi_def_cfa_register 7
 5328 0006 7860     		str	r0, [r7, #4]
 5329 0008 0B46     		mov	r3, r1
 5330 000a FB70     		strb	r3, [r7, #3]
 913:gfx.c         ****             // Do nothing, must be subclassed if supported by hardware
 914:gfx.c         ****         }
 5331              		.loc 1 914 0
 5332 000c 00BF     		nop
 5333 000e 0C37     		adds	r7, r7, #12
 5334              		.cfi_def_cfa_offset 4
 5335 0010 BD46     		mov	sp, r7
 5336              		.cfi_def_cfa_register 13
 5337              		@ sp needed
 5338 0012 80BC     		pop	{r7}
 5339              		.cfi_restore 7
 5340              		.cfi_def_cfa_offset 0
 5341 0014 7047     		bx	lr
 5342              		.cfi_endproc
 5343              	.LFE105:
 5344              		.size	GFXinvertDisplay, .-GFXinvertDisplay
 5345              		.global	pitches
 5346 0016 00BF     		.data
 5347              		.align	2
 5348              		.type	pitches, %object
 5349              		.size	pitches, 24
 5350              	pitches:
 5351 0000 43       		.byte	67
 5352 0001 20       		.byte	32
 5353 0002 43       		.byte	67
 5354 0003 23       		.byte	35
 5355 0004 44       		.byte	68
 5356 0005 20       		.byte	32
 5357 0006 44       		.byte	68
 5358 0007 23       		.byte	35
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 113


 5359 0008 45       		.byte	69
 5360 0009 20       		.byte	32
 5361 000a 46       		.byte	70
 5362 000b 20       		.byte	32
 5363 000c 46       		.byte	70
 5364 000d 23       		.byte	35
 5365 000e 47       		.byte	71
 5366 000f 20       		.byte	32
 5367 0010 47       		.byte	71
 5368 0011 23       		.byte	35
 5369 0012 41       		.byte	65
 5370 0013 20       		.byte	32
 5371 0014 41       		.byte	65
 5372 0015 23       		.byte	35
 5373 0016 42       		.byte	66
 5374 0017 20       		.byte	32
 5375              		.global	__aeabi_i2f
 5376              		.global	__aeabi_f2uiz
 5377              		.section	.text.OLEDparseInt,"ax",%progbits
 5378              		.align	2
 5379              		.global	OLEDparseInt
 5380              		.thumb
 5381              		.thumb_func
 5382              		.type	OLEDparseInt, %function
 5383              	OLEDparseInt:
 5384              	.LFB106:
 915:gfx.c         ****         
 916:gfx.c         ****         uint8_t pitches[24] =
 917:gfx.c         ****         {
 918:gfx.c         ****             'C', ' ',
 919:gfx.c         ****             'C', '#',
 920:gfx.c         ****             'D', ' ',
 921:gfx.c         ****             'D', '#',
 922:gfx.c         ****             'E', ' ',
 923:gfx.c         ****             'F', ' ',
 924:gfx.c         ****             'F', '#',
 925:gfx.c         ****             'G', ' ',
 926:gfx.c         ****             'G', '#',
 927:gfx.c         ****             'A', ' ',
 928:gfx.c         ****             'A', '#',
 929:gfx.c         ****             'B', ' '
 930:gfx.c         ****         };
 931:gfx.c         ****         
 932:gfx.c         ****         int OLEDparseInt(char* buffer, uint32_t myNumber, uint8_t numDigits)
 933:gfx.c         ****         {
 5385              		.loc 1 933 0
 5386              		.cfi_startproc
 5387              		@ args = 0, pretend = 0, frame = 32
 5388              		@ frame_needed = 1, uses_anonymous_args = 0
 5389 0000 80B5     		push	{r7, lr}
 5390              		.cfi_def_cfa_offset 8
 5391              		.cfi_offset 7, -8
 5392              		.cfi_offset 14, -4
 5393 0002 88B0     		sub	sp, sp, #32
 5394              		.cfi_def_cfa_offset 40
 5395 0004 00AF     		add	r7, sp, #0
 5396              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 114


 5397 0006 F860     		str	r0, [r7, #12]
 5398 0008 B960     		str	r1, [r7, #8]
 5399 000a 1346     		mov	r3, r2
 5400 000c FB71     		strb	r3, [r7, #7]
 5401              	.LBB35:
 934:gfx.c         ****             for (int i = 0; i < numDigits; i++)
 5402              		.loc 1 934 0
 5403 000e 0023     		movs	r3, #0
 5404 0010 FB61     		str	r3, [r7, #28]
 5405 0012 29E0     		b	.L197
 5406              	.L198:
 5407              	.LBB36:
 935:gfx.c         ****             {
 936:gfx.c         ****                 int whichPlace = (uint32_t)(powf(10.0f,(numDigits - 1) - i));
 5408              		.loc 1 936 0 discriminator 3
 5409 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5410 0016 5A1E     		subs	r2, r3, #1
 5411 0018 FB69     		ldr	r3, [r7, #28]
 5412 001a D31A     		subs	r3, r2, r3
 5413 001c 1846     		mov	r0, r3
 5414 001e FFF7FEFF 		bl	__aeabi_i2f
 5415 0022 0346     		mov	r3, r0
 5416 0024 1946     		mov	r1, r3
 5417 0026 1548     		ldr	r0, .L200
 5418 0028 FFF7FEFF 		bl	powf
 5419 002c 0346     		mov	r3, r0
 5420 002e 1846     		mov	r0, r3
 5421 0030 FFF7FEFF 		bl	__aeabi_f2uiz
 5422 0034 0346     		mov	r3, r0
 5423 0036 BB61     		str	r3, [r7, #24]
 937:gfx.c         ****                 int thisDigit = (myNumber / whichPlace);
 5424              		.loc 1 937 0 discriminator 3
 5425 0038 BB69     		ldr	r3, [r7, #24]
 5426 003a BA68     		ldr	r2, [r7, #8]
 5427 003c B2FBF3F3 		udiv	r3, r2, r3
 5428 0040 7B61     		str	r3, [r7, #20]
 938:gfx.c         ****                 buffer[i] = thisDigit + 48;
 5429              		.loc 1 938 0 discriminator 3
 5430 0042 FB69     		ldr	r3, [r7, #28]
 5431 0044 FA68     		ldr	r2, [r7, #12]
 5432 0046 1344     		add	r3, r3, r2
 5433 0048 7A69     		ldr	r2, [r7, #20]
 5434 004a D2B2     		uxtb	r2, r2
 5435 004c 3032     		adds	r2, r2, #48
 5436 004e D2B2     		uxtb	r2, r2
 5437 0050 1A70     		strb	r2, [r3]
 939:gfx.c         ****                 myNumber -= thisDigit * whichPlace;
 5438              		.loc 1 939 0 discriminator 3
 5439 0052 7B69     		ldr	r3, [r7, #20]
 5440 0054 BA69     		ldr	r2, [r7, #24]
 5441 0056 02FB03F3 		mul	r3, r2, r3
 5442 005a 1A46     		mov	r2, r3
 5443 005c BB68     		ldr	r3, [r7, #8]
 5444 005e 9B1A     		subs	r3, r3, r2
 5445 0060 BB60     		str	r3, [r7, #8]
 5446              	.LBE36:
 934:gfx.c         ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 115


 5447              		.loc 1 934 0 discriminator 3
 5448 0062 FB69     		ldr	r3, [r7, #28]
 5449 0064 0133     		adds	r3, r3, #1
 5450 0066 FB61     		str	r3, [r7, #28]
 5451              	.L197:
 934:gfx.c         ****             {
 5452              		.loc 1 934 0 is_stmt 0 discriminator 1
 5453 0068 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5454 006a FB69     		ldr	r3, [r7, #28]
 5455 006c 9A42     		cmp	r2, r3
 5456 006e D1DC     		bgt	.L198
 5457              	.LBE35:
 940:gfx.c         ****             }
 941:gfx.c         ****             
 942:gfx.c         ****             return numDigits;
 5458              		.loc 1 942 0 is_stmt 1
 5459 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 943:gfx.c         ****         }
 5460              		.loc 1 943 0
 5461 0072 1846     		mov	r0, r3
 5462 0074 2037     		adds	r7, r7, #32
 5463              		.cfi_def_cfa_offset 8
 5464 0076 BD46     		mov	sp, r7
 5465              		.cfi_def_cfa_register 13
 5466              		@ sp needed
 5467 0078 80BD     		pop	{r7, pc}
 5468              	.L201:
 5469 007a 00BF     		.align	2
 5470              	.L200:
 5471 007c 00002041 		.word	1092616192
 5472              		.cfi_endproc
 5473              	.LFE106:
 5474              		.size	OLEDparseInt, .-OLEDparseInt
 5475              		.global	__aeabi_f2iz
 5476              		.global	__aeabi_fsub
 5477              		.global	__aeabi_fadd
 5478              		.global	__aeabi_fcmpgt
 5479              		.global	__aeabi_fmul
 5480              		.section	.text.OLEDparsePitch,"ax",%progbits
 5481              		.align	2
 5482              		.global	OLEDparsePitch
 5483              		.thumb
 5484              		.thumb_func
 5485              		.type	OLEDparsePitch, %function
 5486              	OLEDparsePitch:
 5487              	.LFB107:
 944:gfx.c         ****         
 945:gfx.c         ****         int OLEDparsePitch(char* buffer, float midi, uint8_t showCents)
 946:gfx.c         ****         {
 5488              		.loc 1 946 0
 5489              		.cfi_startproc
 5490              		@ args = 0, pretend = 0, frame = 40
 5491              		@ frame_needed = 1, uses_anonymous_args = 0
 5492 0000 90B5     		push	{r4, r7, lr}
 5493              		.cfi_def_cfa_offset 12
 5494              		.cfi_offset 4, -12
 5495              		.cfi_offset 7, -8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 116


 5496              		.cfi_offset 14, -4
 5497 0002 8BB0     		sub	sp, sp, #44
 5498              		.cfi_def_cfa_offset 56
 5499 0004 00AF     		add	r7, sp, #0
 5500              		.cfi_def_cfa_register 7
 5501 0006 F860     		str	r0, [r7, #12]
 5502 0008 B960     		str	r1, [r7, #8]	@ float
 5503 000a 1346     		mov	r3, r2
 5504 000c FB71     		strb	r3, [r7, #7]
 947:gfx.c         ****             int pclass, octave, note, neg = 0; float offset;
 5505              		.loc 1 947 0
 5506 000e 0023     		movs	r3, #0
 5507 0010 3B62     		str	r3, [r7, #32]
 948:gfx.c         ****             
 949:gfx.c         ****             note = (int)midi;
 5508              		.loc 1 949 0
 5509 0012 B868     		ldr	r0, [r7, #8]	@ float
 5510 0014 FFF7FEFF 		bl	__aeabi_f2iz
 5511 0018 0346     		mov	r3, r0
 5512 001a 7B62     		str	r3, [r7, #36]
 950:gfx.c         ****             offset = midi - note;
 5513              		.loc 1 950 0
 5514 001c 786A     		ldr	r0, [r7, #36]
 5515 001e FFF7FEFF 		bl	__aeabi_i2f
 5516 0022 0346     		mov	r3, r0
 5517 0024 1946     		mov	r1, r3
 5518 0026 B868     		ldr	r0, [r7, #8]	@ float
 5519 0028 FFF7FEFF 		bl	__aeabi_fsub
 5520 002c 0346     		mov	r3, r0
 5521 002e FB61     		str	r3, [r7, #28]	@ float
 951:gfx.c         ****             
 952:gfx.c         ****             if ((midi + 0.5f) > (note+1))
 5522              		.loc 1 952 0
 5523 0030 4FF07C51 		mov	r1, #1056964608
 5524 0034 B868     		ldr	r0, [r7, #8]	@ float
 5525 0036 FFF7FEFF 		bl	__aeabi_fadd
 5526 003a 0346     		mov	r3, r0
 5527 003c 1C46     		mov	r4, r3
 5528 003e 7B6A     		ldr	r3, [r7, #36]
 5529 0040 0133     		adds	r3, r3, #1
 5530 0042 1846     		mov	r0, r3
 5531 0044 FFF7FEFF 		bl	__aeabi_i2f
 5532 0048 0346     		mov	r3, r0
 5533 004a 1946     		mov	r1, r3
 5534 004c 2046     		mov	r0, r4
 5535 004e FFF7FEFF 		bl	__aeabi_fcmpgt
 5536 0052 0346     		mov	r3, r0
 5537 0054 002B     		cmp	r3, #0
 5538 0056 10D0     		beq	.L203
 953:gfx.c         ****             {
 954:gfx.c         ****                 note += 1;
 5539              		.loc 1 954 0
 5540 0058 7B6A     		ldr	r3, [r7, #36]
 5541 005a 0133     		adds	r3, r3, #1
 5542 005c 7B62     		str	r3, [r7, #36]
 955:gfx.c         ****                 offset = (1.0f - offset) + 0.01f;
 5543              		.loc 1 955 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 117


 5544 005e F969     		ldr	r1, [r7, #28]	@ float
 5545 0060 4FF07E50 		mov	r0, #1065353216
 5546 0064 FFF7FEFF 		bl	__aeabi_fsub
 5547 0068 0346     		mov	r3, r0
 5548 006a 3D49     		ldr	r1, .L210
 5549 006c 1846     		mov	r0, r3
 5550 006e FFF7FEFF 		bl	__aeabi_fadd
 5551 0072 0346     		mov	r3, r0
 5552 0074 FB61     		str	r3, [r7, #28]	@ float
 956:gfx.c         ****                 neg = 1;
 5553              		.loc 1 956 0
 5554 0076 0123     		movs	r3, #1
 5555 0078 3B62     		str	r3, [r7, #32]
 5556              	.L203:
 957:gfx.c         ****             }
 958:gfx.c         ****             
 959:gfx.c         ****             pclass = (note % 12);
 5557              		.loc 1 959 0
 5558 007a 7A6A     		ldr	r2, [r7, #36]
 5559 007c 394B     		ldr	r3, .L210+4
 5560 007e 83FB0213 		smull	r1, r3, r3, r2
 5561 0082 5910     		asrs	r1, r3, #1
 5562 0084 D317     		asrs	r3, r2, #31
 5563 0086 C91A     		subs	r1, r1, r3
 5564 0088 0B46     		mov	r3, r1
 5565 008a 5B00     		lsls	r3, r3, #1
 5566 008c 0B44     		add	r3, r3, r1
 5567 008e 9B00     		lsls	r3, r3, #2
 5568 0090 D31A     		subs	r3, r2, r3
 5569 0092 7B61     		str	r3, [r7, #20]
 960:gfx.c         ****             octave = (int)(note / 12) - 1;
 5570              		.loc 1 960 0
 5571 0094 7B6A     		ldr	r3, [r7, #36]
 5572 0096 334A     		ldr	r2, .L210+4
 5573 0098 82FB0312 		smull	r1, r2, r2, r3
 5574 009c 5210     		asrs	r2, r2, #1
 5575 009e DB17     		asrs	r3, r3, #31
 5576 00a0 D31A     		subs	r3, r2, r3
 5577 00a2 013B     		subs	r3, r3, #1
 5578 00a4 3B61     		str	r3, [r7, #16]
 961:gfx.c         ****             
 962:gfx.c         ****             int idx = 0;
 5579              		.loc 1 962 0
 5580 00a6 0023     		movs	r3, #0
 5581 00a8 BB61     		str	r3, [r7, #24]
 963:gfx.c         ****             
 964:gfx.c         ****             buffer[idx++] = pitches[pclass*2];
 5582              		.loc 1 964 0
 5583 00aa BB69     		ldr	r3, [r7, #24]
 5584 00ac 5A1C     		adds	r2, r3, #1
 5585 00ae BA61     		str	r2, [r7, #24]
 5586 00b0 1A46     		mov	r2, r3
 5587 00b2 FB68     		ldr	r3, [r7, #12]
 5588 00b4 1344     		add	r3, r3, r2
 5589 00b6 7A69     		ldr	r2, [r7, #20]
 5590 00b8 5200     		lsls	r2, r2, #1
 5591 00ba 2B49     		ldr	r1, .L210+8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 118


 5592 00bc 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 5593 00be 1A70     		strb	r2, [r3]
 965:gfx.c         ****             buffer[idx++] = pitches[pclass*2+1];
 5594              		.loc 1 965 0
 5595 00c0 BB69     		ldr	r3, [r7, #24]
 5596 00c2 5A1C     		adds	r2, r3, #1
 5597 00c4 BA61     		str	r2, [r7, #24]
 5598 00c6 1A46     		mov	r2, r3
 5599 00c8 FB68     		ldr	r3, [r7, #12]
 5600 00ca 1344     		add	r3, r3, r2
 5601 00cc 7A69     		ldr	r2, [r7, #20]
 5602 00ce 5200     		lsls	r2, r2, #1
 5603 00d0 0132     		adds	r2, r2, #1
 5604 00d2 2549     		ldr	r1, .L210+8
 5605 00d4 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 5606 00d6 1A70     		strb	r2, [r3]
 966:gfx.c         ****             
 967:gfx.c         ****             OLEDparseInt(&buffer[idx++], octave, 1);
 5607              		.loc 1 967 0
 5608 00d8 BB69     		ldr	r3, [r7, #24]
 5609 00da 5A1C     		adds	r2, r3, #1
 5610 00dc BA61     		str	r2, [r7, #24]
 5611 00de 1A46     		mov	r2, r3
 5612 00e0 FB68     		ldr	r3, [r7, #12]
 5613 00e2 1344     		add	r3, r3, r2
 5614 00e4 3969     		ldr	r1, [r7, #16]
 5615 00e6 0122     		movs	r2, #1
 5616 00e8 1846     		mov	r0, r3
 5617 00ea FFF7FEFF 		bl	OLEDparseInt
 968:gfx.c         ****             
 969:gfx.c         ****             if (showCents)
 5618              		.loc 1 969 0
 5619 00ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5620 00f0 002B     		cmp	r3, #0
 5621 00f2 2FD0     		beq	.L205
 970:gfx.c         ****             {
 971:gfx.c         ****                 buffer[idx++] = ' ';
 5622              		.loc 1 971 0
 5623 00f4 BB69     		ldr	r3, [r7, #24]
 5624 00f6 5A1C     		adds	r2, r3, #1
 5625 00f8 BA61     		str	r2, [r7, #24]
 5626 00fa 1A46     		mov	r2, r3
 5627 00fc FB68     		ldr	r3, [r7, #12]
 5628 00fe 1344     		add	r3, r3, r2
 5629 0100 2022     		movs	r2, #32
 5630 0102 1A70     		strb	r2, [r3]
 972:gfx.c         ****                 
 973:gfx.c         ****                 if (neg == 1)
 5631              		.loc 1 973 0
 5632 0104 3B6A     		ldr	r3, [r7, #32]
 5633 0106 012B     		cmp	r3, #1
 5634 0108 08D1     		bne	.L206
 974:gfx.c         ****                     buffer[idx++] = '-';
 5635              		.loc 1 974 0
 5636 010a BB69     		ldr	r3, [r7, #24]
 5637 010c 5A1C     		adds	r2, r3, #1
 5638 010e BA61     		str	r2, [r7, #24]
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 119


 5639 0110 1A46     		mov	r2, r3
 5640 0112 FB68     		ldr	r3, [r7, #12]
 5641 0114 1344     		add	r3, r3, r2
 5642 0116 2D22     		movs	r2, #45
 5643 0118 1A70     		strb	r2, [r3]
 5644 011a 07E0     		b	.L207
 5645              	.L206:
 975:gfx.c         ****                 else
 976:gfx.c         ****                     buffer[idx++] = '+';
 5646              		.loc 1 976 0
 5647 011c BB69     		ldr	r3, [r7, #24]
 5648 011e 5A1C     		adds	r2, r3, #1
 5649 0120 BA61     		str	r2, [r7, #24]
 5650 0122 1A46     		mov	r2, r3
 5651 0124 FB68     		ldr	r3, [r7, #12]
 5652 0126 1344     		add	r3, r3, r2
 5653 0128 2B22     		movs	r2, #43
 5654 012a 1A70     		strb	r2, [r3]
 5655              	.L207:
 977:gfx.c         ****                 
 978:gfx.c         ****                 OLEDparseInt(&buffer[idx], (uint32_t) (offset * 100.0f), 2);
 5656              		.loc 1 978 0
 5657 012c BB69     		ldr	r3, [r7, #24]
 5658 012e FA68     		ldr	r2, [r7, #12]
 5659 0130 D418     		adds	r4, r2, r3
 5660 0132 0E49     		ldr	r1, .L210+12
 5661 0134 F869     		ldr	r0, [r7, #28]	@ float
 5662 0136 FFF7FEFF 		bl	__aeabi_fmul
 5663 013a 0346     		mov	r3, r0
 5664 013c 1846     		mov	r0, r3
 5665 013e FFF7FEFF 		bl	__aeabi_f2uiz
 5666 0142 0346     		mov	r3, r0
 5667 0144 0222     		movs	r2, #2
 5668 0146 1946     		mov	r1, r3
 5669 0148 2046     		mov	r0, r4
 5670 014a FFF7FEFF 		bl	OLEDparseInt
 979:gfx.c         ****                 idx += 2;
 5671              		.loc 1 979 0
 5672 014e BB69     		ldr	r3, [r7, #24]
 5673 0150 0233     		adds	r3, r3, #2
 5674 0152 BB61     		str	r3, [r7, #24]
 5675              	.L205:
 980:gfx.c         ****             }
 981:gfx.c         ****             
 982:gfx.c         ****             return idx;
 5676              		.loc 1 982 0
 5677 0154 BB69     		ldr	r3, [r7, #24]
 983:gfx.c         ****         }
 5678              		.loc 1 983 0
 5679 0156 1846     		mov	r0, r3
 5680 0158 2C37     		adds	r7, r7, #44
 5681              		.cfi_def_cfa_offset 12
 5682 015a BD46     		mov	sp, r7
 5683              		.cfi_def_cfa_register 13
 5684              		@ sp needed
 5685 015c 90BD     		pop	{r4, r7, pc}
 5686              	.L211:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 120


 5687 015e 00BF     		.align	2
 5688              	.L210:
 5689 0160 0AD7233C 		.word	1008981770
 5690 0164 ABAAAA2A 		.word	715827883
 5691 0168 00000000 		.word	pitches
 5692 016c 0000C842 		.word	1120403456
 5693              		.cfi_endproc
 5694              	.LFE107:
 5695              		.size	OLEDparsePitch, .-OLEDparsePitch
 5696              		.section	.text.OLEDparsePitchClass,"ax",%progbits
 5697              		.align	2
 5698              		.global	OLEDparsePitchClass
 5699              		.thumb
 5700              		.thumb_func
 5701              		.type	OLEDparsePitchClass, %function
 5702              	OLEDparsePitchClass:
 5703              	.LFB108:
 984:gfx.c         ****         
 985:gfx.c         ****         int OLEDparsePitchClass(char* buffer, float midi)
 986:gfx.c         ****         {
 5704              		.loc 1 986 0
 5705              		.cfi_startproc
 5706              		@ args = 0, pretend = 0, frame = 24
 5707              		@ frame_needed = 1, uses_anonymous_args = 0
 5708 0000 90B5     		push	{r4, r7, lr}
 5709              		.cfi_def_cfa_offset 12
 5710              		.cfi_offset 4, -12
 5711              		.cfi_offset 7, -8
 5712              		.cfi_offset 14, -4
 5713 0002 87B0     		sub	sp, sp, #28
 5714              		.cfi_def_cfa_offset 40
 5715 0004 00AF     		add	r7, sp, #0
 5716              		.cfi_def_cfa_register 7
 5717 0006 7860     		str	r0, [r7, #4]
 5718 0008 3960     		str	r1, [r7]	@ float
 987:gfx.c         ****             int pclass, note;
 988:gfx.c         ****             float offset;
 989:gfx.c         ****             
 990:gfx.c         ****             note = (int)midi;
 5719              		.loc 1 990 0
 5720 000a 3868     		ldr	r0, [r7]	@ float
 5721 000c FFF7FEFF 		bl	__aeabi_f2iz
 5722 0010 0346     		mov	r3, r0
 5723 0012 7B61     		str	r3, [r7, #20]
 991:gfx.c         ****             offset = midi - note;
 5724              		.loc 1 991 0
 5725 0014 7869     		ldr	r0, [r7, #20]
 5726 0016 FFF7FEFF 		bl	__aeabi_i2f
 5727 001a 0346     		mov	r3, r0
 5728 001c 1946     		mov	r1, r3
 5729 001e 3868     		ldr	r0, [r7]	@ float
 5730 0020 FFF7FEFF 		bl	__aeabi_fsub
 5731 0024 0346     		mov	r3, r0
 5732 0026 3B61     		str	r3, [r7, #16]	@ float
 992:gfx.c         ****             
 993:gfx.c         ****             if ((midi + 0.5f) > (note+1))
 5733              		.loc 1 993 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 121


 5734 0028 4FF07C51 		mov	r1, #1056964608
 5735 002c 3868     		ldr	r0, [r7]	@ float
 5736 002e FFF7FEFF 		bl	__aeabi_fadd
 5737 0032 0346     		mov	r3, r0
 5738 0034 1C46     		mov	r4, r3
 5739 0036 7B69     		ldr	r3, [r7, #20]
 5740 0038 0133     		adds	r3, r3, #1
 5741 003a 1846     		mov	r0, r3
 5742 003c FFF7FEFF 		bl	__aeabi_i2f
 5743 0040 0346     		mov	r3, r0
 5744 0042 1946     		mov	r1, r3
 5745 0044 2046     		mov	r0, r4
 5746 0046 FFF7FEFF 		bl	__aeabi_fcmpgt
 5747 004a 0346     		mov	r3, r0
 5748 004c 002B     		cmp	r3, #0
 5749 004e 0ED0     		beq	.L213
 994:gfx.c         ****             {
 995:gfx.c         ****                 note += 1;
 5750              		.loc 1 995 0
 5751 0050 7B69     		ldr	r3, [r7, #20]
 5752 0052 0133     		adds	r3, r3, #1
 5753 0054 7B61     		str	r3, [r7, #20]
 996:gfx.c         ****                 offset = (1.0f - offset) + 0.01f;
 5754              		.loc 1 996 0
 5755 0056 3969     		ldr	r1, [r7, #16]	@ float
 5756 0058 4FF07E50 		mov	r0, #1065353216
 5757 005c FFF7FEFF 		bl	__aeabi_fsub
 5758 0060 0346     		mov	r3, r0
 5759 0062 1849     		ldr	r1, .L217
 5760 0064 1846     		mov	r0, r3
 5761 0066 FFF7FEFF 		bl	__aeabi_fadd
 5762 006a 0346     		mov	r3, r0
 5763 006c 3B61     		str	r3, [r7, #16]	@ float
 5764              	.L213:
 997:gfx.c         ****             }
 998:gfx.c         ****             
 999:gfx.c         ****             pclass = (note % 12);
 5765              		.loc 1 999 0
 5766 006e 7A69     		ldr	r2, [r7, #20]
 5767 0070 154B     		ldr	r3, .L217+4
 5768 0072 83FB0213 		smull	r1, r3, r3, r2
 5769 0076 5910     		asrs	r1, r3, #1
 5770 0078 D317     		asrs	r3, r2, #31
 5771 007a C91A     		subs	r1, r1, r3
 5772 007c 0B46     		mov	r3, r1
 5773 007e 5B00     		lsls	r3, r3, #1
 5774 0080 0B44     		add	r3, r3, r1
 5775 0082 9B00     		lsls	r3, r3, #2
 5776 0084 D31A     		subs	r3, r2, r3
 5777 0086 FB60     		str	r3, [r7, #12]
1000:gfx.c         ****             
1001:gfx.c         ****             int idx = 0;
 5778              		.loc 1 1001 0
 5779 0088 0023     		movs	r3, #0
 5780 008a BB60     		str	r3, [r7, #8]
1002:gfx.c         ****             
1003:gfx.c         ****             buffer[idx++] = pitches[pclass*2];
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 122


 5781              		.loc 1 1003 0
 5782 008c BB68     		ldr	r3, [r7, #8]
 5783 008e 5A1C     		adds	r2, r3, #1
 5784 0090 BA60     		str	r2, [r7, #8]
 5785 0092 1A46     		mov	r2, r3
 5786 0094 7B68     		ldr	r3, [r7, #4]
 5787 0096 1344     		add	r3, r3, r2
 5788 0098 FA68     		ldr	r2, [r7, #12]
 5789 009a 5200     		lsls	r2, r2, #1
 5790 009c 0B49     		ldr	r1, .L217+8
 5791 009e 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 5792 00a0 1A70     		strb	r2, [r3]
1004:gfx.c         ****             buffer[idx++] = pitches[pclass*2+1];
 5793              		.loc 1 1004 0
 5794 00a2 BB68     		ldr	r3, [r7, #8]
 5795 00a4 5A1C     		adds	r2, r3, #1
 5796 00a6 BA60     		str	r2, [r7, #8]
 5797 00a8 1A46     		mov	r2, r3
 5798 00aa 7B68     		ldr	r3, [r7, #4]
 5799 00ac 1344     		add	r3, r3, r2
 5800 00ae FA68     		ldr	r2, [r7, #12]
 5801 00b0 5200     		lsls	r2, r2, #1
 5802 00b2 0132     		adds	r2, r2, #1
 5803 00b4 0549     		ldr	r1, .L217+8
 5804 00b6 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 5805 00b8 1A70     		strb	r2, [r3]
1005:gfx.c         ****             
1006:gfx.c         ****             return idx;
 5806              		.loc 1 1006 0
 5807 00ba BB68     		ldr	r3, [r7, #8]
1007:gfx.c         ****         }
 5808              		.loc 1 1007 0
 5809 00bc 1846     		mov	r0, r3
 5810 00be 1C37     		adds	r7, r7, #28
 5811              		.cfi_def_cfa_offset 12
 5812 00c0 BD46     		mov	sp, r7
 5813              		.cfi_def_cfa_register 13
 5814              		@ sp needed
 5815 00c2 90BD     		pop	{r4, r7, pc}
 5816              	.L218:
 5817              		.align	2
 5818              	.L217:
 5819 00c4 0AD7233C 		.word	1008981770
 5820 00c8 ABAAAA2A 		.word	715827883
 5821 00cc 00000000 		.word	pitches
 5822              		.cfi_endproc
 5823              	.LFE108:
 5824              		.size	OLEDparsePitchClass, .-OLEDparsePitchClass
 5825              		.global	__aeabi_ui2f
 5826              		.global	__aeabi_fdiv
 5827              		.section	.text.OLEDparseFixedFloat,"ax",%progbits
 5828              		.align	2
 5829              		.global	OLEDparseFixedFloat
 5830              		.thumb
 5831              		.thumb_func
 5832              		.type	OLEDparseFixedFloat, %function
 5833              	OLEDparseFixedFloat:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 123


 5834              	.LFB109:
1008:gfx.c         ****         
1009:gfx.c         ****         int OLEDparseFixedFloat(char* buffer, float input, uint8_t numDigits, uint8_t numDecimal)
1010:gfx.c         ****         {
 5835              		.loc 1 1010 0
 5836              		.cfi_startproc
 5837              		@ args = 0, pretend = 0, frame = 56
 5838              		@ frame_needed = 1, uses_anonymous_args = 0
 5839 0000 80B5     		push	{r7, lr}
 5840              		.cfi_def_cfa_offset 8
 5841              		.cfi_offset 7, -8
 5842              		.cfi_offset 14, -4
 5843 0002 8EB0     		sub	sp, sp, #56
 5844              		.cfi_def_cfa_offset 64
 5845 0004 00AF     		add	r7, sp, #0
 5846              		.cfi_def_cfa_register 7
 5847 0006 F860     		str	r0, [r7, #12]
 5848 0008 B960     		str	r1, [r7, #8]	@ float
 5849 000a 1146     		mov	r1, r2
 5850 000c 1A46     		mov	r2, r3
 5851 000e 0B46     		mov	r3, r1
 5852 0010 FB71     		strb	r3, [r7, #7]
 5853 0012 1346     		mov	r3, r2
 5854 0014 BB71     		strb	r3, [r7, #6]
1011:gfx.c         ****             float power = powf(10.0f, numDecimal);
 5855              		.loc 1 1011 0
 5856 0016 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5857 0018 1846     		mov	r0, r3
 5858 001a FFF7FEFF 		bl	__aeabi_ui2f
 5859 001e 0346     		mov	r3, r0
 5860 0020 1946     		mov	r1, r3
 5861 0022 5A48     		ldr	r0, .L230
 5862 0024 FFF7FEFF 		bl	powf
 5863 0028 3862     		str	r0, [r7, #32]	@ float
1012:gfx.c         ****             float f = ((float)(int)(input * power + 0.5f)) / power;
 5864              		.loc 1 1012 0
 5865 002a 396A     		ldr	r1, [r7, #32]	@ float
 5866 002c B868     		ldr	r0, [r7, #8]	@ float
 5867 002e FFF7FEFF 		bl	__aeabi_fmul
 5868 0032 0346     		mov	r3, r0
 5869 0034 4FF07C51 		mov	r1, #1056964608
 5870 0038 1846     		mov	r0, r3
 5871 003a FFF7FEFF 		bl	__aeabi_fadd
 5872 003e 0346     		mov	r3, r0
 5873 0040 1846     		mov	r0, r3
 5874 0042 FFF7FEFF 		bl	__aeabi_f2iz
 5875 0046 0346     		mov	r3, r0
 5876 0048 1846     		mov	r0, r3
 5877 004a FFF7FEFF 		bl	__aeabi_i2f
 5878 004e 0346     		mov	r3, r0
 5879 0050 396A     		ldr	r1, [r7, #32]	@ float
 5880 0052 1846     		mov	r0, r3
 5881 0054 FFF7FEFF 		bl	__aeabi_fdiv
 5882 0058 0346     		mov	r3, r0
 5883 005a FB61     		str	r3, [r7, #28]	@ float
1013:gfx.c         ****             
1014:gfx.c         ****             int nonzeroHasHappened = 0, decimalHasHappened = 0;
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 124


 5884              		.loc 1 1014 0
 5885 005c 0023     		movs	r3, #0
 5886 005e 7B63     		str	r3, [r7, #52]
 5887 0060 0023     		movs	r3, #0
 5888 0062 3B63     		str	r3, [r7, #48]
1015:gfx.c         ****             
1016:gfx.c         ****             int myNumber = (int)(f * power);
 5889              		.loc 1 1016 0
 5890 0064 396A     		ldr	r1, [r7, #32]	@ float
 5891 0066 F869     		ldr	r0, [r7, #28]	@ float
 5892 0068 FFF7FEFF 		bl	__aeabi_fmul
 5893 006c 0346     		mov	r3, r0
 5894 006e 1846     		mov	r0, r3
 5895 0070 FFF7FEFF 		bl	__aeabi_f2iz
 5896 0074 0346     		mov	r3, r0
 5897 0076 FB62     		str	r3, [r7, #44]
1017:gfx.c         ****             
1018:gfx.c         ****             int idx = 0, i = 0;
 5898              		.loc 1 1018 0
 5899 0078 0023     		movs	r3, #0
 5900 007a BB62     		str	r3, [r7, #40]
 5901 007c 0023     		movs	r3, #0
 5902 007e 7B62     		str	r3, [r7, #36]
1019:gfx.c         ****             
1020:gfx.c         ****             if (myNumber < 0)
 5903              		.loc 1 1020 0
 5904 0080 FB6A     		ldr	r3, [r7, #44]
 5905 0082 002B     		cmp	r3, #0
 5906 0084 79DA     		bge	.L221
1021:gfx.c         ****             {
1022:gfx.c         ****                 myNumber *= -1;
 5907              		.loc 1 1022 0
 5908 0086 FB6A     		ldr	r3, [r7, #44]
 5909 0088 5B42     		negs	r3, r3
 5910 008a FB62     		str	r3, [r7, #44]
1023:gfx.c         ****                 buffer[idx++] = '-';
 5911              		.loc 1 1023 0
 5912 008c BB6A     		ldr	r3, [r7, #40]
 5913 008e 5A1C     		adds	r2, r3, #1
 5914 0090 BA62     		str	r2, [r7, #40]
 5915 0092 1A46     		mov	r2, r3
 5916 0094 FB68     		ldr	r3, [r7, #12]
 5917 0096 1344     		add	r3, r3, r2
 5918 0098 2D22     		movs	r2, #45
 5919 009a 1A70     		strb	r2, [r3]
1024:gfx.c         ****                 i++;
 5920              		.loc 1 1024 0
 5921 009c 7B6A     		ldr	r3, [r7, #36]
 5922 009e 0133     		adds	r3, r3, #1
 5923 00a0 7B62     		str	r3, [r7, #36]
1025:gfx.c         ****             }
1026:gfx.c         ****             
1027:gfx.c         ****             while (i < numDigits)
 5924              		.loc 1 1027 0
 5925 00a2 6AE0     		b	.L221
 5926              	.L228:
1028:gfx.c         ****             {
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 125


1029:gfx.c         ****                 if ((decimalHasHappened == 0) && ((numDigits-i) == numDecimal))
 5927              		.loc 1 1029 0
 5928 00a4 3B6B     		ldr	r3, [r7, #48]
 5929 00a6 002B     		cmp	r3, #0
 5930 00a8 1ED1     		bne	.L222
 5931              		.loc 1 1029 0 is_stmt 0 discriminator 1
 5932 00aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 5933 00ac 7B6A     		ldr	r3, [r7, #36]
 5934 00ae D21A     		subs	r2, r2, r3
 5935 00b0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 5936 00b2 9A42     		cmp	r2, r3
 5937 00b4 18D1     		bne	.L222
1030:gfx.c         ****                 {
1031:gfx.c         ****                     if (nonzeroHasHappened == 0)
 5938              		.loc 1 1031 0 is_stmt 1
 5939 00b6 7B6B     		ldr	r3, [r7, #52]
 5940 00b8 002B     		cmp	r3, #0
 5941 00ba 0AD1     		bne	.L223
1032:gfx.c         ****                     {
1033:gfx.c         ****                         idx++; //get past the negative if there is one - this is hacky should figur
 5942              		.loc 1 1033 0
 5943 00bc BB6A     		ldr	r3, [r7, #40]
 5944 00be 0133     		adds	r3, r3, #1
 5945 00c0 BB62     		str	r3, [r7, #40]
1034:gfx.c         ****                         buffer[idx-1] = '0';
 5946              		.loc 1 1034 0
 5947 00c2 BB6A     		ldr	r3, [r7, #40]
 5948 00c4 013B     		subs	r3, r3, #1
 5949 00c6 FA68     		ldr	r2, [r7, #12]
 5950 00c8 1344     		add	r3, r3, r2
 5951 00ca 3022     		movs	r2, #48
 5952 00cc 1A70     		strb	r2, [r3]
1035:gfx.c         ****                         nonzeroHasHappened = 1;
 5953              		.loc 1 1035 0
 5954 00ce 0123     		movs	r3, #1
 5955 00d0 7B63     		str	r3, [r7, #52]
 5956              	.L223:
1036:gfx.c         ****                     }
1037:gfx.c         ****                     
1038:gfx.c         ****                     buffer[idx++] = '.';
 5957              		.loc 1 1038 0
 5958 00d2 BB6A     		ldr	r3, [r7, #40]
 5959 00d4 5A1C     		adds	r2, r3, #1
 5960 00d6 BA62     		str	r2, [r7, #40]
 5961 00d8 1A46     		mov	r2, r3
 5962 00da FB68     		ldr	r3, [r7, #12]
 5963 00dc 1344     		add	r3, r3, r2
 5964 00de 2E22     		movs	r2, #46
 5965 00e0 1A70     		strb	r2, [r3]
1039:gfx.c         ****                     decimalHasHappened = 1;
 5966              		.loc 1 1039 0
 5967 00e2 0123     		movs	r3, #1
 5968 00e4 3B63     		str	r3, [r7, #48]
 5969 00e6 48E0     		b	.L221
 5970              	.L222:
 5971              	.LBB37:
1040:gfx.c         ****                 }
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 126


1041:gfx.c         ****                 else
1042:gfx.c         ****                 {
1043:gfx.c         ****                     
1044:gfx.c         ****                     int whichPlace = (uint32_t) powf(10.0f,(numDigits - 1 - i));
 5972              		.loc 1 1044 0
 5973 00e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5974 00ea 5A1E     		subs	r2, r3, #1
 5975 00ec 7B6A     		ldr	r3, [r7, #36]
 5976 00ee D31A     		subs	r3, r2, r3
 5977 00f0 1846     		mov	r0, r3
 5978 00f2 FFF7FEFF 		bl	__aeabi_i2f
 5979 00f6 0346     		mov	r3, r0
 5980 00f8 1946     		mov	r1, r3
 5981 00fa 2448     		ldr	r0, .L230
 5982 00fc FFF7FEFF 		bl	powf
 5983 0100 0346     		mov	r3, r0
 5984 0102 1846     		mov	r0, r3
 5985 0104 FFF7FEFF 		bl	__aeabi_f2uiz
 5986 0108 0346     		mov	r3, r0
 5987 010a BB61     		str	r3, [r7, #24]
1045:gfx.c         ****                     int thisDigit = (myNumber / whichPlace);
 5988              		.loc 1 1045 0
 5989 010c FA6A     		ldr	r2, [r7, #44]
 5990 010e BB69     		ldr	r3, [r7, #24]
 5991 0110 92FBF3F3 		sdiv	r3, r2, r3
 5992 0114 7B61     		str	r3, [r7, #20]
1046:gfx.c         ****                     
1047:gfx.c         ****                     if (nonzeroHasHappened == 0)
 5993              		.loc 1 1047 0
 5994 0116 7B6B     		ldr	r3, [r7, #52]
 5995 0118 002B     		cmp	r3, #0
 5996 011a 19D1     		bne	.L224
1048:gfx.c         ****                     {
1049:gfx.c         ****                         if (thisDigit > 0)
 5997              		.loc 1 1049 0
 5998 011c 7B69     		ldr	r3, [r7, #20]
 5999 011e 002B     		cmp	r3, #0
 6000 0120 0DDD     		ble	.L225
1050:gfx.c         ****                         {
1051:gfx.c         ****                             buffer[idx++] = thisDigit + 48;
 6001              		.loc 1 1051 0
 6002 0122 BB6A     		ldr	r3, [r7, #40]
 6003 0124 5A1C     		adds	r2, r3, #1
 6004 0126 BA62     		str	r2, [r7, #40]
 6005 0128 1A46     		mov	r2, r3
 6006 012a FB68     		ldr	r3, [r7, #12]
 6007 012c 1344     		add	r3, r3, r2
 6008 012e 7A69     		ldr	r2, [r7, #20]
 6009 0130 D2B2     		uxtb	r2, r2
 6010 0132 3032     		adds	r2, r2, #48
 6011 0134 D2B2     		uxtb	r2, r2
 6012 0136 1A70     		strb	r2, [r3]
1052:gfx.c         ****                             nonzeroHasHappened = 1;
 6013              		.loc 1 1052 0
 6014 0138 0123     		movs	r3, #1
 6015 013a 7B63     		str	r3, [r7, #52]
 6016 013c 13E0     		b	.L227
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 127


 6017              	.L225:
1053:gfx.c         ****                         }
1054:gfx.c         ****                         else
1055:gfx.c         ****                         {
1056:gfx.c         ****                             buffer[idx++] = ' ';
 6018              		.loc 1 1056 0
 6019 013e BB6A     		ldr	r3, [r7, #40]
 6020 0140 5A1C     		adds	r2, r3, #1
 6021 0142 BA62     		str	r2, [r7, #40]
 6022 0144 1A46     		mov	r2, r3
 6023 0146 FB68     		ldr	r3, [r7, #12]
 6024 0148 1344     		add	r3, r3, r2
 6025 014a 2022     		movs	r2, #32
 6026 014c 1A70     		strb	r2, [r3]
 6027 014e 0AE0     		b	.L227
 6028              	.L224:
1057:gfx.c         ****                         }
1058:gfx.c         ****                     }
1059:gfx.c         ****                     else
1060:gfx.c         ****                     {
1061:gfx.c         ****                         buffer[idx++] = thisDigit + 48;
 6029              		.loc 1 1061 0
 6030 0150 BB6A     		ldr	r3, [r7, #40]
 6031 0152 5A1C     		adds	r2, r3, #1
 6032 0154 BA62     		str	r2, [r7, #40]
 6033 0156 1A46     		mov	r2, r3
 6034 0158 FB68     		ldr	r3, [r7, #12]
 6035 015a 1344     		add	r3, r3, r2
 6036 015c 7A69     		ldr	r2, [r7, #20]
 6037 015e D2B2     		uxtb	r2, r2
 6038 0160 3032     		adds	r2, r2, #48
 6039 0162 D2B2     		uxtb	r2, r2
 6040 0164 1A70     		strb	r2, [r3]
 6041              	.L227:
1062:gfx.c         ****                     }
1063:gfx.c         ****                     
1064:gfx.c         ****                     myNumber -= thisDigit * whichPlace;
 6042              		.loc 1 1064 0
 6043 0166 7B69     		ldr	r3, [r7, #20]
 6044 0168 BA69     		ldr	r2, [r7, #24]
 6045 016a 02FB03F3 		mul	r3, r2, r3
 6046 016e FA6A     		ldr	r2, [r7, #44]
 6047 0170 D31A     		subs	r3, r2, r3
 6048 0172 FB62     		str	r3, [r7, #44]
1065:gfx.c         ****                     
1066:gfx.c         ****                     i++;
 6049              		.loc 1 1066 0
 6050 0174 7B6A     		ldr	r3, [r7, #36]
 6051 0176 0133     		adds	r3, r3, #1
 6052 0178 7B62     		str	r3, [r7, #36]
 6053              	.L221:
 6054              	.LBE37:
1027:gfx.c         ****             {
 6055              		.loc 1 1027 0
 6056 017a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 6057 017c 7B6A     		ldr	r3, [r7, #36]
 6058 017e 9A42     		cmp	r2, r3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 128


 6059 0180 90DC     		bgt	.L228
1067:gfx.c         ****                 }
1068:gfx.c         ****             }
1069:gfx.c         ****             
1070:gfx.c         ****             return idx;
 6060              		.loc 1 1070 0
 6061 0182 BB6A     		ldr	r3, [r7, #40]
1071:gfx.c         ****         }
 6062              		.loc 1 1071 0
 6063 0184 1846     		mov	r0, r3
 6064 0186 3837     		adds	r7, r7, #56
 6065              		.cfi_def_cfa_offset 8
 6066 0188 BD46     		mov	sp, r7
 6067              		.cfi_def_cfa_register 13
 6068              		@ sp needed
 6069 018a 80BD     		pop	{r7, pc}
 6070              	.L231:
 6071              		.align	2
 6072              	.L230:
 6073 018c 00002041 		.word	1092616192
 6074              		.cfi_endproc
 6075              	.LFE109:
 6076              		.size	OLEDparseFixedFloat, .-OLEDparseFixedFloat
 6077              		.section	.text.GFXscrollUp,"ax",%progbits
 6078              		.align	2
 6079              		.global	GFXscrollUp
 6080              		.thumb
 6081              		.thumb_func
 6082              		.type	GFXscrollUp, %function
 6083              	GFXscrollUp:
 6084              	.LFB110:
1072:gfx.c         ****         
1073:gfx.c         ****         
1074:gfx.c         ****         
1075:gfx.c         ****         void GFXscrollUp(GFX* myGFX, uint8_t c, uint16_t color) {
 6085              		.loc 1 1075 0
 6086              		.cfi_startproc
 6087              		@ args = 0, pretend = 0, frame = 8
 6088              		@ frame_needed = 1, uses_anonymous_args = 0
 6089              		@ link register save eliminated.
 6090 0000 80B4     		push	{r7}
 6091              		.cfi_def_cfa_offset 4
 6092              		.cfi_offset 7, -4
 6093 0002 83B0     		sub	sp, sp, #12
 6094              		.cfi_def_cfa_offset 16
 6095 0004 00AF     		add	r7, sp, #0
 6096              		.cfi_def_cfa_register 7
 6097 0006 7860     		str	r0, [r7, #4]
 6098 0008 0B46     		mov	r3, r1
 6099 000a FB70     		strb	r3, [r7, #3]
 6100 000c 1346     		mov	r3, r2	@ movhi
 6101 000e 3B80     		strh	r3, [r7]	@ movhi
1076:gfx.c         ****             // map to logical orientation
1077:gfx.c         ****             ;
1078:gfx.c         ****         }
 6102              		.loc 1 1078 0
 6103 0010 00BF     		nop
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 129


 6104 0012 0C37     		adds	r7, r7, #12
 6105              		.cfi_def_cfa_offset 4
 6106 0014 BD46     		mov	sp, r7
 6107              		.cfi_def_cfa_register 13
 6108              		@ sp needed
 6109 0016 80BC     		pop	{r7}
 6110              		.cfi_restore 7
 6111              		.cfi_def_cfa_offset 0
 6112 0018 7047     		bx	lr
 6113              		.cfi_endproc
 6114              	.LFE110:
 6115              		.size	GFXscrollUp, .-GFXscrollUp
 6116 001a 00BF     		.section	.text.GFXscrollDown,"ax",%progbits
 6117              		.align	2
 6118              		.global	GFXscrollDown
 6119              		.thumb
 6120              		.thumb_func
 6121              		.type	GFXscrollDown, %function
 6122              	GFXscrollDown:
 6123              	.LFB111:
1079:gfx.c         ****         
1080:gfx.c         ****         void GFXscrollDown(GFX* myGFX, uint8_t c, uint16_t color) {
 6124              		.loc 1 1080 0
 6125              		.cfi_startproc
 6126              		@ args = 0, pretend = 0, frame = 8
 6127              		@ frame_needed = 1, uses_anonymous_args = 0
 6128              		@ link register save eliminated.
 6129 0000 80B4     		push	{r7}
 6130              		.cfi_def_cfa_offset 4
 6131              		.cfi_offset 7, -4
 6132 0002 83B0     		sub	sp, sp, #12
 6133              		.cfi_def_cfa_offset 16
 6134 0004 00AF     		add	r7, sp, #0
 6135              		.cfi_def_cfa_register 7
 6136 0006 7860     		str	r0, [r7, #4]
 6137 0008 0B46     		mov	r3, r1
 6138 000a FB70     		strb	r3, [r7, #3]
 6139 000c 1346     		mov	r3, r2	@ movhi
 6140 000e 3B80     		strh	r3, [r7]	@ movhi
1081:gfx.c         ****             // map to logical orientation
1082:gfx.c         ****             ;
1083:gfx.c         ****         }
 6141              		.loc 1 1083 0
 6142 0010 00BF     		nop
 6143 0012 0C37     		adds	r7, r7, #12
 6144              		.cfi_def_cfa_offset 4
 6145 0014 BD46     		mov	sp, r7
 6146              		.cfi_def_cfa_register 13
 6147              		@ sp needed
 6148 0016 80BC     		pop	{r7}
 6149              		.cfi_restore 7
 6150              		.cfi_def_cfa_offset 0
 6151 0018 7047     		bx	lr
 6152              		.cfi_endproc
 6153              	.LFE111:
 6154              		.size	GFXscrollDown, .-GFXscrollDown
 6155 001a 00BF     		.section	.text.GFXscrollLeft,"ax",%progbits
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 130


 6156              		.align	2
 6157              		.global	GFXscrollLeft
 6158              		.thumb
 6159              		.thumb_func
 6160              		.type	GFXscrollLeft, %function
 6161              	GFXscrollLeft:
 6162              	.LFB112:
1084:gfx.c         ****         
1085:gfx.c         ****         void GFXscrollLeft(GFX* myGFX, uint8_t c, uint16_t color) {
 6163              		.loc 1 1085 0
 6164              		.cfi_startproc
 6165              		@ args = 0, pretend = 0, frame = 8
 6166              		@ frame_needed = 1, uses_anonymous_args = 0
 6167              		@ link register save eliminated.
 6168 0000 80B4     		push	{r7}
 6169              		.cfi_def_cfa_offset 4
 6170              		.cfi_offset 7, -4
 6171 0002 83B0     		sub	sp, sp, #12
 6172              		.cfi_def_cfa_offset 16
 6173 0004 00AF     		add	r7, sp, #0
 6174              		.cfi_def_cfa_register 7
 6175 0006 7860     		str	r0, [r7, #4]
 6176 0008 0B46     		mov	r3, r1
 6177 000a FB70     		strb	r3, [r7, #3]
 6178 000c 1346     		mov	r3, r2	@ movhi
 6179 000e 3B80     		strh	r3, [r7]	@ movhi
1086:gfx.c         ****             // map to logical orientation
1087:gfx.c         ****             ;
1088:gfx.c         ****         }
 6180              		.loc 1 1088 0
 6181 0010 00BF     		nop
 6182 0012 0C37     		adds	r7, r7, #12
 6183              		.cfi_def_cfa_offset 4
 6184 0014 BD46     		mov	sp, r7
 6185              		.cfi_def_cfa_register 13
 6186              		@ sp needed
 6187 0016 80BC     		pop	{r7}
 6188              		.cfi_restore 7
 6189              		.cfi_def_cfa_offset 0
 6190 0018 7047     		bx	lr
 6191              		.cfi_endproc
 6192              	.LFE112:
 6193              		.size	GFXscrollLeft, .-GFXscrollLeft
 6194 001a 00BF     		.section	.text.GFXscrollRight,"ax",%progbits
 6195              		.align	2
 6196              		.global	GFXscrollRight
 6197              		.thumb
 6198              		.thumb_func
 6199              		.type	GFXscrollRight, %function
 6200              	GFXscrollRight:
 6201              	.LFB113:
1089:gfx.c         ****         
1090:gfx.c         ****         void GFXscrollRight(GFX* myGFX, uint8_t c, uint16_t color) {
 6202              		.loc 1 1090 0
 6203              		.cfi_startproc
 6204              		@ args = 0, pretend = 0, frame = 8
 6205              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 131


 6206              		@ link register save eliminated.
 6207 0000 80B4     		push	{r7}
 6208              		.cfi_def_cfa_offset 4
 6209              		.cfi_offset 7, -4
 6210 0002 83B0     		sub	sp, sp, #12
 6211              		.cfi_def_cfa_offset 16
 6212 0004 00AF     		add	r7, sp, #0
 6213              		.cfi_def_cfa_register 7
 6214 0006 7860     		str	r0, [r7, #4]
 6215 0008 0B46     		mov	r3, r1
 6216 000a FB70     		strb	r3, [r7, #3]
 6217 000c 1346     		mov	r3, r2	@ movhi
 6218 000e 3B80     		strh	r3, [r7]	@ movhi
1091:gfx.c         ****             // map to logical orientation
1092:gfx.c         ****             ;
1093:gfx.c         ****         }
 6219              		.loc 1 1093 0
 6220 0010 00BF     		nop
 6221 0012 0C37     		adds	r7, r7, #12
 6222              		.cfi_def_cfa_offset 4
 6223 0014 BD46     		mov	sp, r7
 6224              		.cfi_def_cfa_register 13
 6225              		@ sp needed
 6226 0016 80BC     		pop	{r7}
 6227              		.cfi_restore 7
 6228              		.cfi_def_cfa_offset 0
 6229 0018 7047     		bx	lr
 6230              		.cfi_endproc
 6231              	.LFE113:
 6232              		.size	GFXscrollRight, .-GFXscrollRight
 6233 001a 00BF     		.text
 6234              	.Letext0:
 6235              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 6236              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 6237              		.file 4 "gfx_font.h"
 6238              		.file 5 "gfx.h"
 6239              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 6240              		.file 7 "ssd1306.h"
 6241              		.section	.debug_info,"",%progbits
 6242              	.Ldebug_info0:
 6243 0000 F71A0000 		.4byte	0x1af7
 6244 0004 0400     		.2byte	0x4
 6245 0006 00000000 		.4byte	.Ldebug_abbrev0
 6246 000a 04       		.byte	0x4
 6247 000b 01       		.uleb128 0x1
 6248 000c 44000000 		.4byte	.LASF154
 6249 0010 0C       		.byte	0xc
 6250 0011 3A040000 		.4byte	.LASF155
 6251 0015 61020000 		.4byte	.LASF156
 6252 0019 00000000 		.4byte	.Ldebug_ranges0+0
 6253 001d 00000000 		.4byte	0
 6254 0021 00000000 		.4byte	.Ldebug_line0
 6255 0025 02       		.uleb128 0x2
 6256 0026 22010000 		.4byte	.LASF0
 6257 002a 02       		.byte	0x2
 6258 002b 1B       		.byte	0x1b
 6259 002c 30000000 		.4byte	0x30
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 132


 6260 0030 03       		.uleb128 0x3
 6261 0031 01       		.byte	0x1
 6262 0032 06       		.byte	0x6
 6263 0033 55010000 		.4byte	.LASF2
 6264 0037 02       		.uleb128 0x2
 6265 0038 27000000 		.4byte	.LASF1
 6266 003c 02       		.byte	0x2
 6267 003d 1D       		.byte	0x1d
 6268 003e 42000000 		.4byte	0x42
 6269 0042 03       		.uleb128 0x3
 6270 0043 01       		.byte	0x1
 6271 0044 08       		.byte	0x8
 6272 0045 0A050000 		.4byte	.LASF3
 6273 0049 02       		.uleb128 0x2
 6274 004a F5020000 		.4byte	.LASF4
 6275 004e 02       		.byte	0x2
 6276 004f 29       		.byte	0x29
 6277 0050 54000000 		.4byte	0x54
 6278 0054 03       		.uleb128 0x3
 6279 0055 02       		.byte	0x2
 6280 0056 05       		.byte	0x5
 6281 0057 EA010000 		.4byte	.LASF5
 6282 005b 02       		.uleb128 0x2
 6283 005c 39020000 		.4byte	.LASF6
 6284 0060 02       		.byte	0x2
 6285 0061 2B       		.byte	0x2b
 6286 0062 66000000 		.4byte	0x66
 6287 0066 03       		.uleb128 0x3
 6288 0067 02       		.byte	0x2
 6289 0068 07       		.byte	0x7
 6290 0069 1D020000 		.4byte	.LASF7
 6291 006d 02       		.uleb128 0x2
 6292 006e C4030000 		.4byte	.LASF8
 6293 0072 02       		.byte	0x2
 6294 0073 3F       		.byte	0x3f
 6295 0074 78000000 		.4byte	0x78
 6296 0078 03       		.uleb128 0x3
 6297 0079 04       		.byte	0x4
 6298 007a 05       		.byte	0x5
 6299 007b C1010000 		.4byte	.LASF9
 6300 007f 02       		.uleb128 0x2
 6301 0080 56020000 		.4byte	.LASF10
 6302 0084 02       		.byte	0x2
 6303 0085 41       		.byte	0x41
 6304 0086 8A000000 		.4byte	0x8a
 6305 008a 03       		.uleb128 0x3
 6306 008b 04       		.byte	0x4
 6307 008c 07       		.byte	0x7
 6308 008d 46030000 		.4byte	.LASF11
 6309 0091 03       		.uleb128 0x3
 6310 0092 08       		.byte	0x8
 6311 0093 05       		.byte	0x5
 6312 0094 47010000 		.4byte	.LASF12
 6313 0098 03       		.uleb128 0x3
 6314 0099 08       		.byte	0x8
 6315 009a 07       		.byte	0x7
 6316 009b F6000000 		.4byte	.LASF13
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 133


 6317 009f 04       		.uleb128 0x4
 6318 00a0 04       		.byte	0x4
 6319 00a1 05       		.byte	0x5
 6320 00a2 696E7400 		.ascii	"int\000"
 6321 00a6 03       		.uleb128 0x3
 6322 00a7 04       		.byte	0x4
 6323 00a8 07       		.byte	0x7
 6324 00a9 27030000 		.4byte	.LASF14
 6325 00ad 02       		.uleb128 0x2
 6326 00ae 7B060000 		.4byte	.LASF15
 6327 00b2 03       		.byte	0x3
 6328 00b3 14       		.byte	0x14
 6329 00b4 25000000 		.4byte	0x25
 6330 00b8 02       		.uleb128 0x2
 6331 00b9 BC060000 		.4byte	.LASF16
 6332 00bd 03       		.byte	0x3
 6333 00be 18       		.byte	0x18
 6334 00bf 37000000 		.4byte	0x37
 6335 00c3 02       		.uleb128 0x2
 6336 00c4 47070000 		.4byte	.LASF17
 6337 00c8 03       		.byte	0x3
 6338 00c9 20       		.byte	0x20
 6339 00ca 49000000 		.4byte	0x49
 6340 00ce 02       		.uleb128 0x2
 6341 00cf 34030000 		.4byte	.LASF18
 6342 00d3 03       		.byte	0x3
 6343 00d4 24       		.byte	0x24
 6344 00d5 5B000000 		.4byte	0x5b
 6345 00d9 02       		.uleb128 0x2
 6346 00da 02050000 		.4byte	.LASF19
 6347 00de 03       		.byte	0x3
 6348 00df 2C       		.byte	0x2c
 6349 00e0 6D000000 		.4byte	0x6d
 6350 00e4 02       		.uleb128 0x2
 6351 00e5 AA050000 		.4byte	.LASF20
 6352 00e9 03       		.byte	0x3
 6353 00ea 30       		.byte	0x30
 6354 00eb 7F000000 		.4byte	0x7f
 6355 00ef 05       		.uleb128 0x5
 6356 00f0 08       		.byte	0x8
 6357 00f1 04       		.byte	0x4
 6358 00f2 0C       		.byte	0xc
 6359 00f3 40010000 		.4byte	0x140
 6360 00f7 06       		.uleb128 0x6
 6361 00f8 21070000 		.4byte	.LASF21
 6362 00fc 04       		.byte	0x4
 6363 00fd 0D       		.byte	0xd
 6364 00fe CE000000 		.4byte	0xce
 6365 0102 00       		.byte	0
 6366 0103 06       		.uleb128 0x6
 6367 0104 74030000 		.4byte	.LASF22
 6368 0108 04       		.byte	0x4
 6369 0109 0E       		.byte	0xe
 6370 010a B8000000 		.4byte	0xb8
 6371 010e 02       		.byte	0x2
 6372 010f 06       		.uleb128 0x6
 6373 0110 24050000 		.4byte	.LASF23
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 134


 6374 0114 04       		.byte	0x4
 6375 0115 0E       		.byte	0xe
 6376 0116 B8000000 		.4byte	0xb8
 6377 011a 03       		.byte	0x3
 6378 011b 06       		.uleb128 0x6
 6379 011c 33050000 		.4byte	.LASF24
 6380 0120 04       		.byte	0x4
 6381 0121 0F       		.byte	0xf
 6382 0122 B8000000 		.4byte	0xb8
 6383 0126 04       		.byte	0x4
 6384 0127 06       		.uleb128 0x6
 6385 0128 15040000 		.4byte	.LASF25
 6386 012c 04       		.byte	0x4
 6387 012d 10       		.byte	0x10
 6388 012e AD000000 		.4byte	0xad
 6389 0132 05       		.byte	0x5
 6390 0133 06       		.uleb128 0x6
 6391 0134 00000000 		.4byte	.LASF26
 6392 0138 04       		.byte	0x4
 6393 0139 10       		.byte	0x10
 6394 013a AD000000 		.4byte	0xad
 6395 013e 06       		.byte	0x6
 6396 013f 00       		.byte	0
 6397 0140 02       		.uleb128 0x2
 6398 0141 58030000 		.4byte	.LASF27
 6399 0145 04       		.byte	0x4
 6400 0146 11       		.byte	0x11
 6401 0147 EF000000 		.4byte	0xef
 6402 014b 05       		.uleb128 0x5
 6403 014c 0C       		.byte	0xc
 6404 014d 04       		.byte	0x4
 6405 014e 13       		.byte	0x13
 6406 014f 90010000 		.4byte	0x190
 6407 0153 06       		.uleb128 0x6
 6408 0154 D2060000 		.4byte	.LASF28
 6409 0158 04       		.byte	0x4
 6410 0159 14       		.byte	0x14
 6411 015a 90010000 		.4byte	0x190
 6412 015e 00       		.byte	0
 6413 015f 06       		.uleb128 0x6
 6414 0160 61030000 		.4byte	.LASF29
 6415 0164 04       		.byte	0x4
 6416 0165 15       		.byte	0x15
 6417 0166 96010000 		.4byte	0x196
 6418 016a 04       		.byte	0x4
 6419 016b 06       		.uleb128 0x6
 6420 016c B6010000 		.4byte	.LASF30
 6421 0170 04       		.byte	0x4
 6422 0171 16       		.byte	0x16
 6423 0172 B8000000 		.4byte	0xb8
 6424 0176 08       		.byte	0x8
 6425 0177 06       		.uleb128 0x6
 6426 0178 91040000 		.4byte	.LASF31
 6427 017c 04       		.byte	0x4
 6428 017d 16       		.byte	0x16
 6429 017e B8000000 		.4byte	0xb8
 6430 0182 09       		.byte	0x9
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 135


 6431 0183 06       		.uleb128 0x6
 6432 0184 D5050000 		.4byte	.LASF32
 6433 0188 04       		.byte	0x4
 6434 0189 17       		.byte	0x17
 6435 018a B8000000 		.4byte	0xb8
 6436 018e 0A       		.byte	0xa
 6437 018f 00       		.byte	0
 6438 0190 07       		.uleb128 0x7
 6439 0191 04       		.byte	0x4
 6440 0192 B8000000 		.4byte	0xb8
 6441 0196 07       		.uleb128 0x7
 6442 0197 04       		.byte	0x4
 6443 0198 40010000 		.4byte	0x140
 6444 019c 02       		.uleb128 0x2
 6445 019d F2030000 		.4byte	.LASF33
 6446 01a1 04       		.byte	0x4
 6447 01a2 18       		.byte	0x18
 6448 01a3 4B010000 		.4byte	0x14b
 6449 01a7 03       		.uleb128 0x3
 6450 01a8 04       		.byte	0x4
 6451 01a9 04       		.byte	0x4
 6452 01aa B8040000 		.4byte	.LASF34
 6453 01ae 03       		.uleb128 0x3
 6454 01af 08       		.byte	0x8
 6455 01b0 04       		.byte	0x4
 6456 01b1 FF010000 		.4byte	.LASF35
 6457 01b5 03       		.uleb128 0x3
 6458 01b6 01       		.byte	0x1
 6459 01b7 08       		.byte	0x8
 6460 01b8 01060000 		.4byte	.LASF36
 6461 01bc 03       		.uleb128 0x3
 6462 01bd 08       		.byte	0x8
 6463 01be 04       		.byte	0x4
 6464 01bf 40040000 		.4byte	.LASF37
 6465 01c3 03       		.uleb128 0x3
 6466 01c4 04       		.byte	0x4
 6467 01c5 07       		.byte	0x7
 6468 01c6 31040000 		.4byte	.LASF38
 6469 01ca 07       		.uleb128 0x7
 6470 01cb 04       		.byte	0x4
 6471 01cc B5010000 		.4byte	0x1b5
 6472 01d0 08       		.uleb128 0x8
 6473 01d1 85040000 		.4byte	.LASF157
 6474 01d5 24       		.byte	0x24
 6475 01d6 05       		.byte	0x5
 6476 01d7 1C       		.byte	0x1c
 6477 01d8 9D020000 		.4byte	0x29d
 6478 01dc 06       		.uleb128 0x6
 6479 01dd 5D070000 		.4byte	.LASF39
 6480 01e1 05       		.byte	0x5
 6481 01e2 1E       		.byte	0x1e
 6482 01e3 C3000000 		.4byte	0xc3
 6483 01e7 00       		.byte	0
 6484 01e8 06       		.uleb128 0x6
 6485 01e9 18050000 		.4byte	.LASF40
 6486 01ed 05       		.byte	0x5
 6487 01ee 1F       		.byte	0x1f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 136


 6488 01ef C3000000 		.4byte	0xc3
 6489 01f3 02       		.byte	0x2
 6490 01f4 06       		.uleb128 0x6
 6491 01f5 67030000 		.4byte	.LASF41
 6492 01f9 05       		.byte	0x5
 6493 01fa 20       		.byte	0x20
 6494 01fb CE000000 		.4byte	0xce
 6495 01ff 04       		.byte	0x4
 6496 0200 06       		.uleb128 0x6
 6497 0201 9F060000 		.4byte	.LASF42
 6498 0205 05       		.byte	0x5
 6499 0206 21       		.byte	0x21
 6500 0207 CE000000 		.4byte	0xce
 6501 020b 06       		.byte	0x6
 6502 020c 06       		.uleb128 0x6
 6503 020d 69060000 		.4byte	.LASF43
 6504 0211 05       		.byte	0x5
 6505 0212 22       		.byte	0x22
 6506 0213 CE000000 		.4byte	0xce
 6507 0217 08       		.byte	0x8
 6508 0218 06       		.uleb128 0x6
 6509 0219 E7050000 		.4byte	.LASF44
 6510 021d 05       		.byte	0x5
 6511 021e 23       		.byte	0x23
 6512 021f CE000000 		.4byte	0xce
 6513 0223 0A       		.byte	0xa
 6514 0224 06       		.uleb128 0x6
 6515 0225 DE050000 		.4byte	.LASF45
 6516 0229 05       		.byte	0x5
 6517 022a 24       		.byte	0x24
 6518 022b CE000000 		.4byte	0xce
 6519 022f 0C       		.byte	0xc
 6520 0230 06       		.uleb128 0x6
 6521 0231 3D030000 		.4byte	.LASF46
 6522 0235 05       		.byte	0x5
 6523 0236 25       		.byte	0x25
 6524 0237 CE000000 		.4byte	0xce
 6525 023b 0E       		.byte	0xe
 6526 023c 06       		.uleb128 0x6
 6527 023d 38060000 		.4byte	.LASF47
 6528 0241 05       		.byte	0x5
 6529 0242 26       		.byte	0x26
 6530 0243 CE000000 		.4byte	0xce
 6531 0247 10       		.byte	0x10
 6532 0248 06       		.uleb128 0x6
 6533 0249 06070000 		.4byte	.LASF48
 6534 024d 05       		.byte	0x5
 6535 024e 27       		.byte	0x27
 6536 024f CE000000 		.4byte	0xce
 6537 0253 12       		.byte	0x12
 6538 0254 06       		.uleb128 0x6
 6539 0255 18020000 		.4byte	.LASF49
 6540 0259 05       		.byte	0x5
 6541 025a 28       		.byte	0x28
 6542 025b CE000000 		.4byte	0xce
 6543 025f 14       		.byte	0x14
 6544 0260 06       		.uleb128 0x6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 137


 6545 0261 31060000 		.4byte	.LASF50
 6546 0265 05       		.byte	0x5
 6547 0266 29       		.byte	0x29
 6548 0267 CE000000 		.4byte	0xce
 6549 026b 16       		.byte	0x16
 6550 026c 06       		.uleb128 0x6
 6551 026d 0D010000 		.4byte	.LASF51
 6552 0271 05       		.byte	0x5
 6553 0272 2A       		.byte	0x2a
 6554 0273 9D020000 		.4byte	0x29d
 6555 0277 18       		.byte	0x18
 6556 0278 06       		.uleb128 0x6
 6557 0279 61010000 		.4byte	.LASF52
 6558 027d 05       		.byte	0x5
 6559 027e 2B       		.byte	0x2b
 6560 027f CE000000 		.4byte	0xce
 6561 0283 1C       		.byte	0x1c
 6562 0284 06       		.uleb128 0x6
 6563 0285 30020000 		.4byte	.LASF53
 6564 0289 05       		.byte	0x5
 6565 028a 2C       		.byte	0x2c
 6566 028b CE000000 		.4byte	0xce
 6567 028f 1E       		.byte	0x1e
 6568 0290 06       		.uleb128 0x6
 6569 0291 F4010000 		.4byte	.LASF54
 6570 0295 05       		.byte	0x5
 6571 0296 2D       		.byte	0x2d
 6572 0297 CE000000 		.4byte	0xce
 6573 029b 20       		.byte	0x20
 6574 029c 00       		.byte	0
 6575 029d 07       		.uleb128 0x7
 6576 029e 04       		.byte	0x4
 6577 029f 9C010000 		.4byte	0x19c
 6578 02a3 09       		.uleb128 0x9
 6579 02a4 47465800 		.ascii	"GFX\000"
 6580 02a8 05       		.byte	0x5
 6581 02a9 2E       		.byte	0x2e
 6582 02aa D0010000 		.4byte	0x1d0
 6583 02ae 0A       		.uleb128 0xa
 6584 02af 2B050000 		.4byte	.LASF56
 6585 02b3 01       		.byte	0x1
 6586 02b4 4D       		.byte	0x4d
 6587 02b5 00000000 		.4byte	.LFB64
 6588 02b9 7E000000 		.4byte	.LFE64-.LFB64
 6589 02bd 01       		.uleb128 0x1
 6590 02be 9C       		.byte	0x9c
 6591 02bf EA020000 		.4byte	0x2ea
 6592 02c3 0B       		.uleb128 0xb
 6593 02c4 B6060000 		.4byte	.LASF55
 6594 02c8 01       		.byte	0x1
 6595 02c9 4D       		.byte	0x4d
 6596 02ca EA020000 		.4byte	0x2ea
 6597 02ce 02       		.uleb128 0x2
 6598 02cf 91       		.byte	0x91
 6599 02d0 74       		.sleb128 -12
 6600 02d1 0C       		.uleb128 0xc
 6601 02d2 7700     		.ascii	"w\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 138


 6602 02d4 01       		.byte	0x1
 6603 02d5 4D       		.byte	0x4d
 6604 02d6 C3000000 		.4byte	0xc3
 6605 02da 02       		.uleb128 0x2
 6606 02db 91       		.byte	0x91
 6607 02dc 72       		.sleb128 -14
 6608 02dd 0C       		.uleb128 0xc
 6609 02de 6800     		.ascii	"h\000"
 6610 02e0 01       		.byte	0x1
 6611 02e1 4D       		.byte	0x4d
 6612 02e2 C3000000 		.4byte	0xc3
 6613 02e6 02       		.uleb128 0x2
 6614 02e7 91       		.byte	0x91
 6615 02e8 70       		.sleb128 -16
 6616 02e9 00       		.byte	0
 6617 02ea 07       		.uleb128 0x7
 6618 02eb 04       		.byte	0x4
 6619 02ec A3020000 		.4byte	0x2a3
 6620 02f0 0D       		.uleb128 0xd
 6621 02f1 49020000 		.4byte	.LASF57
 6622 02f5 01       		.byte	0x1
 6623 02f6 62       		.byte	0x62
 6624 02f7 00000000 		.4byte	.LFB65
 6625 02fb 3E010000 		.4byte	.LFE65-.LFB65
 6626 02ff 01       		.uleb128 0x1
 6627 0300 9C       		.byte	0x9c
 6628 0301 FE030000 		.4byte	0x3fe
 6629 0305 0B       		.uleb128 0xb
 6630 0306 B0010000 		.4byte	.LASF58
 6631 030a 01       		.byte	0x1
 6632 030b 62       		.byte	0x62
 6633 030c EA020000 		.4byte	0x2ea
 6634 0310 02       		.uleb128 0x2
 6635 0311 91       		.byte	0x91
 6636 0312 5C       		.sleb128 -36
 6637 0313 0C       		.uleb128 0xc
 6638 0314 783000   		.ascii	"x0\000"
 6639 0317 01       		.byte	0x1
 6640 0318 62       		.byte	0x62
 6641 0319 C3000000 		.4byte	0xc3
 6642 031d 02       		.uleb128 0x2
 6643 031e 91       		.byte	0x91
 6644 031f 5A       		.sleb128 -38
 6645 0320 0C       		.uleb128 0xc
 6646 0321 793000   		.ascii	"y0\000"
 6647 0324 01       		.byte	0x1
 6648 0325 62       		.byte	0x62
 6649 0326 C3000000 		.4byte	0xc3
 6650 032a 02       		.uleb128 0x2
 6651 032b 91       		.byte	0x91
 6652 032c 58       		.sleb128 -40
 6653 032d 0C       		.uleb128 0xc
 6654 032e 783100   		.ascii	"x1\000"
 6655 0331 01       		.byte	0x1
 6656 0332 62       		.byte	0x62
 6657 0333 C3000000 		.4byte	0xc3
 6658 0337 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 139


 6659 0338 91       		.byte	0x91
 6660 0339 56       		.sleb128 -42
 6661 033a 0C       		.uleb128 0xc
 6662 033b 793100   		.ascii	"y1\000"
 6663 033e 01       		.byte	0x1
 6664 033f 62       		.byte	0x62
 6665 0340 C3000000 		.4byte	0xc3
 6666 0344 02       		.uleb128 0x2
 6667 0345 91       		.byte	0x91
 6668 0346 00       		.sleb128 0
 6669 0347 0B       		.uleb128 0xb
 6670 0348 7F010000 		.4byte	.LASF59
 6671 034c 01       		.byte	0x1
 6672 034d 63       		.byte	0x63
 6673 034e CE000000 		.4byte	0xce
 6674 0352 02       		.uleb128 0x2
 6675 0353 91       		.byte	0x91
 6676 0354 04       		.sleb128 4
 6677 0355 0E       		.uleb128 0xe
 6678 0356 4C040000 		.4byte	.LASF60
 6679 035a 01       		.byte	0x1
 6680 035b 64       		.byte	0x64
 6681 035c C3000000 		.4byte	0xc3
 6682 0360 02       		.uleb128 0x2
 6683 0361 91       		.byte	0x91
 6684 0362 72       		.sleb128 -14
 6685 0363 0F       		.uleb128 0xf
 6686 0364 647800   		.ascii	"dx\000"
 6687 0367 01       		.byte	0x1
 6688 0368 6F       		.byte	0x6f
 6689 0369 C3000000 		.4byte	0xc3
 6690 036d 02       		.uleb128 0x2
 6691 036e 91       		.byte	0x91
 6692 036f 68       		.sleb128 -24
 6693 0370 0F       		.uleb128 0xf
 6694 0371 647900   		.ascii	"dy\000"
 6695 0374 01       		.byte	0x1
 6696 0375 6F       		.byte	0x6f
 6697 0376 C3000000 		.4byte	0xc3
 6698 037a 02       		.uleb128 0x2
 6699 037b 91       		.byte	0x91
 6700 037c 66       		.sleb128 -26
 6701 037d 0F       		.uleb128 0xf
 6702 037e 65727200 		.ascii	"err\000"
 6703 0382 01       		.byte	0x1
 6704 0383 73       		.byte	0x73
 6705 0384 C3000000 		.4byte	0xc3
 6706 0388 02       		.uleb128 0x2
 6707 0389 91       		.byte	0x91
 6708 038a 76       		.sleb128 -10
 6709 038b 0E       		.uleb128 0xe
 6710 038c 50050000 		.4byte	.LASF61
 6711 0390 01       		.byte	0x1
 6712 0391 74       		.byte	0x74
 6713 0392 C3000000 		.4byte	0xc3
 6714 0396 02       		.uleb128 0x2
 6715 0397 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 140


 6716 0398 74       		.sleb128 -12
 6717 0399 10       		.uleb128 0x10
 6718 039a 50000000 		.4byte	.LBB2
 6719 039e 0C000000 		.4byte	.LBE2-.LBB2
 6720 03a2 B3030000 		.4byte	0x3b3
 6721 03a6 0F       		.uleb128 0xf
 6722 03a7 7400     		.ascii	"t\000"
 6723 03a9 01       		.byte	0x1
 6724 03aa 66       		.byte	0x66
 6725 03ab C3000000 		.4byte	0xc3
 6726 03af 02       		.uleb128 0x2
 6727 03b0 91       		.byte	0x91
 6728 03b1 70       		.sleb128 -16
 6729 03b2 00       		.byte	0
 6730 03b3 10       		.uleb128 0x10
 6731 03b4 5C000000 		.4byte	.LBB3
 6732 03b8 0C000000 		.4byte	.LBE3-.LBB3
 6733 03bc CD030000 		.4byte	0x3cd
 6734 03c0 0F       		.uleb128 0xf
 6735 03c1 7400     		.ascii	"t\000"
 6736 03c3 01       		.byte	0x1
 6737 03c4 67       		.byte	0x67
 6738 03c5 C3000000 		.4byte	0xc3
 6739 03c9 02       		.uleb128 0x2
 6740 03ca 91       		.byte	0x91
 6741 03cb 6E       		.sleb128 -18
 6742 03cc 00       		.byte	0
 6743 03cd 10       		.uleb128 0x10
 6744 03ce 74000000 		.4byte	.LBB4
 6745 03d2 0C000000 		.4byte	.LBE4-.LBB4
 6746 03d6 E7030000 		.4byte	0x3e7
 6747 03da 0F       		.uleb128 0xf
 6748 03db 7400     		.ascii	"t\000"
 6749 03dd 01       		.byte	0x1
 6750 03de 6B       		.byte	0x6b
 6751 03df C3000000 		.4byte	0xc3
 6752 03e3 02       		.uleb128 0x2
 6753 03e4 91       		.byte	0x91
 6754 03e5 6C       		.sleb128 -20
 6755 03e6 00       		.byte	0
 6756 03e7 11       		.uleb128 0x11
 6757 03e8 80000000 		.4byte	.LBB5
 6758 03ec 0C000000 		.4byte	.LBE5-.LBB5
 6759 03f0 0F       		.uleb128 0xf
 6760 03f1 7400     		.ascii	"t\000"
 6761 03f3 01       		.byte	0x1
 6762 03f4 6C       		.byte	0x6c
 6763 03f5 C3000000 		.4byte	0xc3
 6764 03f9 02       		.uleb128 0x2
 6765 03fa 91       		.byte	0x91
 6766 03fb 6A       		.sleb128 -22
 6767 03fc 00       		.byte	0
 6768 03fd 00       		.byte	0
 6769 03fe 0A       		.uleb128 0xa
 6770 03ff 8E030000 		.4byte	.LASF62
 6771 0403 01       		.byte	0x1
 6772 0404 8A       		.byte	0x8a
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 141


 6773 0405 00000000 		.4byte	.LFB66
 6774 0409 12000000 		.4byte	.LFE66-.LFB66
 6775 040d 01       		.uleb128 0x1
 6776 040e 9C       		.byte	0x9c
 6777 040f 22040000 		.4byte	0x422
 6778 0413 0B       		.uleb128 0xb
 6779 0414 B0010000 		.4byte	.LASF58
 6780 0418 01       		.byte	0x1
 6781 0419 8A       		.byte	0x8a
 6782 041a EA020000 		.4byte	0x2ea
 6783 041e 02       		.uleb128 0x2
 6784 041f 91       		.byte	0x91
 6785 0420 74       		.sleb128 -12
 6786 0421 00       		.byte	0
 6787 0422 0D       		.uleb128 0xd
 6788 0423 DD010000 		.4byte	.LASF63
 6789 0427 01       		.byte	0x1
 6790 0428 8F       		.byte	0x8f
 6791 0429 00000000 		.4byte	.LFB67
 6792 042d E0010000 		.4byte	.LFE67-.LFB67
 6793 0431 01       		.uleb128 0x1
 6794 0432 9C       		.byte	0x9c
 6795 0433 9C040000 		.4byte	0x49c
 6796 0437 0B       		.uleb128 0xb
 6797 0438 B0010000 		.4byte	.LASF58
 6798 043c 01       		.byte	0x1
 6799 043d 8F       		.byte	0x8f
 6800 043e EA020000 		.4byte	0x2ea
 6801 0442 02       		.uleb128 0x2
 6802 0443 91       		.byte	0x91
 6803 0444 6C       		.sleb128 -20
 6804 0445 0C       		.uleb128 0xc
 6805 0446 7800     		.ascii	"x\000"
 6806 0448 01       		.byte	0x1
 6807 0449 8F       		.byte	0x8f
 6808 044a C3000000 		.4byte	0xc3
 6809 044e 02       		.uleb128 0x2
 6810 044f 91       		.byte	0x91
 6811 0450 6A       		.sleb128 -22
 6812 0451 0C       		.uleb128 0xc
 6813 0452 7900     		.ascii	"y\000"
 6814 0454 01       		.byte	0x1
 6815 0455 8F       		.byte	0x8f
 6816 0456 C3000000 		.4byte	0xc3
 6817 045a 02       		.uleb128 0x2
 6818 045b 91       		.byte	0x91
 6819 045c 68       		.sleb128 -24
 6820 045d 0B       		.uleb128 0xb
 6821 045e 7F010000 		.4byte	.LASF59
 6822 0462 01       		.byte	0x1
 6823 0463 8F       		.byte	0x8f
 6824 0464 CE000000 		.4byte	0xce
 6825 0468 02       		.uleb128 0x2
 6826 0469 91       		.byte	0x91
 6827 046a 66       		.sleb128 -26
 6828 046b 10       		.uleb128 0x10
 6829 046c 5E000000 		.4byte	.LBB6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 142


 6830 0470 0C000000 		.4byte	.LBE6-.LBB6
 6831 0474 85040000 		.4byte	0x485
 6832 0478 0F       		.uleb128 0xf
 6833 0479 7400     		.ascii	"t\000"
 6834 047b 01       		.byte	0x1
 6835 047c 96       		.byte	0x96
 6836 047d C3000000 		.4byte	0xc3
 6837 0481 02       		.uleb128 0x2
 6838 0482 91       		.byte	0x91
 6839 0483 76       		.sleb128 -10
 6840 0484 00       		.byte	0
 6841 0485 11       		.uleb128 0x11
 6842 0486 AA000000 		.4byte	.LBB7
 6843 048a 0C000000 		.4byte	.LBE7-.LBB7
 6844 048e 0F       		.uleb128 0xf
 6845 048f 7400     		.ascii	"t\000"
 6846 0491 01       		.byte	0x1
 6847 0492 9E       		.byte	0x9e
 6848 0493 C3000000 		.4byte	0xc3
 6849 0497 02       		.uleb128 0x2
 6850 0498 91       		.byte	0x91
 6851 0499 74       		.sleb128 -12
 6852 049a 00       		.byte	0
 6853 049b 00       		.byte	0
 6854 049c 0D       		.uleb128 0xd
 6855 049d BE040000 		.4byte	.LASF64
 6856 04a1 01       		.byte	0x1
 6857 04a2 AD       		.byte	0xad
 6858 04a3 00000000 		.4byte	.LFB68
 6859 04a7 32000000 		.4byte	.LFE68-.LFB68
 6860 04ab 01       		.uleb128 0x1
 6861 04ac 9C       		.byte	0x9c
 6862 04ad E6040000 		.4byte	0x4e6
 6863 04b1 0B       		.uleb128 0xb
 6864 04b2 B0010000 		.4byte	.LASF58
 6865 04b6 01       		.byte	0x1
 6866 04b7 AD       		.byte	0xad
 6867 04b8 EA020000 		.4byte	0x2ea
 6868 04bc 02       		.uleb128 0x2
 6869 04bd 91       		.byte	0x91
 6870 04be 74       		.sleb128 -12
 6871 04bf 0C       		.uleb128 0xc
 6872 04c0 7800     		.ascii	"x\000"
 6873 04c2 01       		.byte	0x1
 6874 04c3 AD       		.byte	0xad
 6875 04c4 C3000000 		.4byte	0xc3
 6876 04c8 02       		.uleb128 0x2
 6877 04c9 91       		.byte	0x91
 6878 04ca 72       		.sleb128 -14
 6879 04cb 0C       		.uleb128 0xc
 6880 04cc 7900     		.ascii	"y\000"
 6881 04ce 01       		.byte	0x1
 6882 04cf AD       		.byte	0xad
 6883 04d0 C3000000 		.4byte	0xc3
 6884 04d4 02       		.uleb128 0x2
 6885 04d5 91       		.byte	0x91
 6886 04d6 70       		.sleb128 -16
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 143


 6887 04d7 0B       		.uleb128 0xb
 6888 04d8 7F010000 		.4byte	.LASF59
 6889 04dc 01       		.byte	0x1
 6890 04dd AD       		.byte	0xad
 6891 04de CE000000 		.4byte	0xce
 6892 04e2 02       		.uleb128 0x2
 6893 04e3 91       		.byte	0x91
 6894 04e4 6E       		.sleb128 -18
 6895 04e5 00       		.byte	0
 6896 04e6 0D       		.uleb128 0xd
 6897 04e7 06020000 		.4byte	.LASF65
 6898 04eb 01       		.byte	0x1
 6899 04ec B4       		.byte	0xb4
 6900 04ed 00000000 		.4byte	.LFB69
 6901 04f1 3A000000 		.4byte	.LFE69-.LFB69
 6902 04f5 01       		.uleb128 0x1
 6903 04f6 9C       		.byte	0x9c
 6904 04f7 3C050000 		.4byte	0x53c
 6905 04fb 0B       		.uleb128 0xb
 6906 04fc B0010000 		.4byte	.LASF58
 6907 0500 01       		.byte	0x1
 6908 0501 B4       		.byte	0xb4
 6909 0502 EA020000 		.4byte	0x2ea
 6910 0506 02       		.uleb128 0x2
 6911 0507 91       		.byte	0x91
 6912 0508 74       		.sleb128 -12
 6913 0509 0C       		.uleb128 0xc
 6914 050a 7800     		.ascii	"x\000"
 6915 050c 01       		.byte	0x1
 6916 050d B4       		.byte	0xb4
 6917 050e C3000000 		.4byte	0xc3
 6918 0512 02       		.uleb128 0x2
 6919 0513 91       		.byte	0x91
 6920 0514 72       		.sleb128 -14
 6921 0515 0C       		.uleb128 0xc
 6922 0516 7900     		.ascii	"y\000"
 6923 0518 01       		.byte	0x1
 6924 0519 B4       		.byte	0xb4
 6925 051a C3000000 		.4byte	0xc3
 6926 051e 02       		.uleb128 0x2
 6927 051f 91       		.byte	0x91
 6928 0520 70       		.sleb128 -16
 6929 0521 0C       		.uleb128 0xc
 6930 0522 6800     		.ascii	"h\000"
 6931 0524 01       		.byte	0x1
 6932 0525 B5       		.byte	0xb5
 6933 0526 C3000000 		.4byte	0xc3
 6934 052a 02       		.uleb128 0x2
 6935 052b 91       		.byte	0x91
 6936 052c 6E       		.sleb128 -18
 6937 052d 0B       		.uleb128 0xb
 6938 052e 7F010000 		.4byte	.LASF59
 6939 0532 01       		.byte	0x1
 6940 0533 B5       		.byte	0xb5
 6941 0534 CE000000 		.4byte	0xce
 6942 0538 02       		.uleb128 0x2
 6943 0539 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 144


 6944 053a 00       		.sleb128 0
 6945 053b 00       		.byte	0
 6946 053c 0D       		.uleb128 0xd
 6947 053d A2030000 		.4byte	.LASF66
 6948 0541 01       		.byte	0x1
 6949 0542 BE       		.byte	0xbe
 6950 0543 00000000 		.4byte	.LFB70
 6951 0547 3A000000 		.4byte	.LFE70-.LFB70
 6952 054b 01       		.uleb128 0x1
 6953 054c 9C       		.byte	0x9c
 6954 054d 92050000 		.4byte	0x592
 6955 0551 0B       		.uleb128 0xb
 6956 0552 B0010000 		.4byte	.LASF58
 6957 0556 01       		.byte	0x1
 6958 0557 BE       		.byte	0xbe
 6959 0558 EA020000 		.4byte	0x2ea
 6960 055c 02       		.uleb128 0x2
 6961 055d 91       		.byte	0x91
 6962 055e 74       		.sleb128 -12
 6963 055f 0C       		.uleb128 0xc
 6964 0560 7800     		.ascii	"x\000"
 6965 0562 01       		.byte	0x1
 6966 0563 BE       		.byte	0xbe
 6967 0564 C3000000 		.4byte	0xc3
 6968 0568 02       		.uleb128 0x2
 6969 0569 91       		.byte	0x91
 6970 056a 72       		.sleb128 -14
 6971 056b 0C       		.uleb128 0xc
 6972 056c 7900     		.ascii	"y\000"
 6973 056e 01       		.byte	0x1
 6974 056f BE       		.byte	0xbe
 6975 0570 C3000000 		.4byte	0xc3
 6976 0574 02       		.uleb128 0x2
 6977 0575 91       		.byte	0x91
 6978 0576 70       		.sleb128 -16
 6979 0577 0C       		.uleb128 0xc
 6980 0578 7700     		.ascii	"w\000"
 6981 057a 01       		.byte	0x1
 6982 057b BF       		.byte	0xbf
 6983 057c C3000000 		.4byte	0xc3
 6984 0580 02       		.uleb128 0x2
 6985 0581 91       		.byte	0x91
 6986 0582 6E       		.sleb128 -18
 6987 0583 0B       		.uleb128 0xb
 6988 0584 7F010000 		.4byte	.LASF59
 6989 0588 01       		.byte	0x1
 6990 0589 BF       		.byte	0xbf
 6991 058a CE000000 		.4byte	0xce
 6992 058e 02       		.uleb128 0x2
 6993 058f 91       		.byte	0x91
 6994 0590 00       		.sleb128 0
 6995 0591 00       		.byte	0
 6996 0592 0D       		.uleb128 0xd
 6997 0593 D9060000 		.4byte	.LASF67
 6998 0597 01       		.byte	0x1
 6999 0598 C6       		.byte	0xc6
 7000 0599 00000000 		.4byte	.LFB71
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 145


 7001 059d 40000000 		.4byte	.LFE71-.LFB71
 7002 05a1 01       		.uleb128 0x1
 7003 05a2 9C       		.byte	0x9c
 7004 05a3 F4050000 		.4byte	0x5f4
 7005 05a7 0B       		.uleb128 0xb
 7006 05a8 B0010000 		.4byte	.LASF58
 7007 05ac 01       		.byte	0x1
 7008 05ad C6       		.byte	0xc6
 7009 05ae EA020000 		.4byte	0x2ea
 7010 05b2 02       		.uleb128 0x2
 7011 05b3 91       		.byte	0x91
 7012 05b4 74       		.sleb128 -12
 7013 05b5 0C       		.uleb128 0xc
 7014 05b6 7800     		.ascii	"x\000"
 7015 05b8 01       		.byte	0x1
 7016 05b9 C6       		.byte	0xc6
 7017 05ba C3000000 		.4byte	0xc3
 7018 05be 02       		.uleb128 0x2
 7019 05bf 91       		.byte	0x91
 7020 05c0 72       		.sleb128 -14
 7021 05c1 0C       		.uleb128 0xc
 7022 05c2 7900     		.ascii	"y\000"
 7023 05c4 01       		.byte	0x1
 7024 05c5 C6       		.byte	0xc6
 7025 05c6 C3000000 		.4byte	0xc3
 7026 05ca 02       		.uleb128 0x2
 7027 05cb 91       		.byte	0x91
 7028 05cc 70       		.sleb128 -16
 7029 05cd 0C       		.uleb128 0xc
 7030 05ce 7700     		.ascii	"w\000"
 7031 05d0 01       		.byte	0x1
 7032 05d1 C6       		.byte	0xc6
 7033 05d2 C3000000 		.4byte	0xc3
 7034 05d6 02       		.uleb128 0x2
 7035 05d7 91       		.byte	0x91
 7036 05d8 6E       		.sleb128 -18
 7037 05d9 0C       		.uleb128 0xc
 7038 05da 6800     		.ascii	"h\000"
 7039 05dc 01       		.byte	0x1
 7040 05dd C6       		.byte	0xc6
 7041 05de C3000000 		.4byte	0xc3
 7042 05e2 02       		.uleb128 0x2
 7043 05e3 91       		.byte	0x91
 7044 05e4 00       		.sleb128 0
 7045 05e5 0B       		.uleb128 0xb
 7046 05e6 7F010000 		.4byte	.LASF59
 7047 05ea 01       		.byte	0x1
 7048 05eb C7       		.byte	0xc7
 7049 05ec CE000000 		.4byte	0xce
 7050 05f0 02       		.uleb128 0x2
 7051 05f1 91       		.byte	0x91
 7052 05f2 04       		.sleb128 4
 7053 05f3 00       		.byte	0
 7054 05f4 0A       		.uleb128 0xa
 7055 05f5 16030000 		.4byte	.LASF68
 7056 05f9 01       		.byte	0x1
 7057 05fa CC       		.byte	0xcc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 146


 7058 05fb 00000000 		.4byte	.LFB72
 7059 05ff 12000000 		.4byte	.LFE72-.LFB72
 7060 0603 01       		.uleb128 0x1
 7061 0604 9C       		.byte	0x9c
 7062 0605 18060000 		.4byte	0x618
 7063 0609 0B       		.uleb128 0xb
 7064 060a B0010000 		.4byte	.LASF58
 7065 060e 01       		.byte	0x1
 7066 060f CC       		.byte	0xcc
 7067 0610 EA020000 		.4byte	0x2ea
 7068 0614 02       		.uleb128 0x2
 7069 0615 91       		.byte	0x91
 7070 0616 74       		.sleb128 -12
 7071 0617 00       		.byte	0
 7072 0618 0D       		.uleb128 0xd
 7073 0619 A7040000 		.4byte	.LASF69
 7074 061d 01       		.byte	0x1
 7075 061e D2       		.byte	0xd2
 7076 061f 00000000 		.4byte	.LFB73
 7077 0623 4C000000 		.4byte	.LFE73-.LFB73
 7078 0627 01       		.uleb128 0x1
 7079 0628 9C       		.byte	0x9c
 7080 0629 6E060000 		.4byte	0x66e
 7081 062d 0B       		.uleb128 0xb
 7082 062e B0010000 		.4byte	.LASF58
 7083 0632 01       		.byte	0x1
 7084 0633 D2       		.byte	0xd2
 7085 0634 EA020000 		.4byte	0x2ea
 7086 0638 02       		.uleb128 0x2
 7087 0639 91       		.byte	0x91
 7088 063a 6C       		.sleb128 -20
 7089 063b 0C       		.uleb128 0xc
 7090 063c 7800     		.ascii	"x\000"
 7091 063e 01       		.byte	0x1
 7092 063f D2       		.byte	0xd2
 7093 0640 C3000000 		.4byte	0xc3
 7094 0644 02       		.uleb128 0x2
 7095 0645 91       		.byte	0x91
 7096 0646 6A       		.sleb128 -22
 7097 0647 0C       		.uleb128 0xc
 7098 0648 7900     		.ascii	"y\000"
 7099 064a 01       		.byte	0x1
 7100 064b D2       		.byte	0xd2
 7101 064c C3000000 		.4byte	0xc3
 7102 0650 02       		.uleb128 0x2
 7103 0651 91       		.byte	0x91
 7104 0652 68       		.sleb128 -24
 7105 0653 0C       		.uleb128 0xc
 7106 0654 6800     		.ascii	"h\000"
 7107 0656 01       		.byte	0x1
 7108 0657 D3       		.byte	0xd3
 7109 0658 C3000000 		.4byte	0xc3
 7110 065c 02       		.uleb128 0x2
 7111 065d 91       		.byte	0x91
 7112 065e 66       		.sleb128 -26
 7113 065f 0B       		.uleb128 0xb
 7114 0660 7F010000 		.4byte	.LASF59
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 147


 7115 0664 01       		.byte	0x1
 7116 0665 D3       		.byte	0xd3
 7117 0666 CE000000 		.4byte	0xce
 7118 066a 02       		.uleb128 0x2
 7119 066b 91       		.byte	0x91
 7120 066c 00       		.sleb128 0
 7121 066d 00       		.byte	0
 7122 066e 0D       		.uleb128 0xd
 7123 066f 04040000 		.4byte	.LASF70
 7124 0673 01       		.byte	0x1
 7125 0674 DA       		.byte	0xda
 7126 0675 00000000 		.4byte	.LFB74
 7127 0679 4A000000 		.4byte	.LFE74-.LFB74
 7128 067d 01       		.uleb128 0x1
 7129 067e 9C       		.byte	0x9c
 7130 067f C4060000 		.4byte	0x6c4
 7131 0683 0B       		.uleb128 0xb
 7132 0684 B0010000 		.4byte	.LASF58
 7133 0688 01       		.byte	0x1
 7134 0689 DA       		.byte	0xda
 7135 068a EA020000 		.4byte	0x2ea
 7136 068e 02       		.uleb128 0x2
 7137 068f 91       		.byte	0x91
 7138 0690 74       		.sleb128 -12
 7139 0691 0C       		.uleb128 0xc
 7140 0692 7800     		.ascii	"x\000"
 7141 0694 01       		.byte	0x1
 7142 0695 DA       		.byte	0xda
 7143 0696 C3000000 		.4byte	0xc3
 7144 069a 02       		.uleb128 0x2
 7145 069b 91       		.byte	0x91
 7146 069c 72       		.sleb128 -14
 7147 069d 0C       		.uleb128 0xc
 7148 069e 7900     		.ascii	"y\000"
 7149 06a0 01       		.byte	0x1
 7150 06a1 DA       		.byte	0xda
 7151 06a2 C3000000 		.4byte	0xc3
 7152 06a6 02       		.uleb128 0x2
 7153 06a7 91       		.byte	0x91
 7154 06a8 70       		.sleb128 -16
 7155 06a9 0C       		.uleb128 0xc
 7156 06aa 7700     		.ascii	"w\000"
 7157 06ac 01       		.byte	0x1
 7158 06ad DB       		.byte	0xdb
 7159 06ae C3000000 		.4byte	0xc3
 7160 06b2 02       		.uleb128 0x2
 7161 06b3 91       		.byte	0x91
 7162 06b4 6E       		.sleb128 -18
 7163 06b5 0B       		.uleb128 0xb
 7164 06b6 7F010000 		.4byte	.LASF59
 7165 06ba 01       		.byte	0x1
 7166 06bb DB       		.byte	0xdb
 7167 06bc CE000000 		.4byte	0xce
 7168 06c0 02       		.uleb128 0x2
 7169 06c1 91       		.byte	0x91
 7170 06c2 00       		.sleb128 0
 7171 06c3 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 148


 7172 06c4 0D       		.uleb128 0xd
 7173 06c5 79040000 		.4byte	.LASF71
 7174 06c9 01       		.byte	0x1
 7175 06ca E0       		.byte	0xe0
 7176 06cb 00000000 		.4byte	.LFB75
 7177 06cf 5E000000 		.4byte	.LFE75-.LFB75
 7178 06d3 01       		.uleb128 0x1
 7179 06d4 9C       		.byte	0x9c
 7180 06d5 3C070000 		.4byte	0x73c
 7181 06d9 0B       		.uleb128 0xb
 7182 06da B0010000 		.4byte	.LASF58
 7183 06de 01       		.byte	0x1
 7184 06df E0       		.byte	0xe0
 7185 06e0 EA020000 		.4byte	0x2ea
 7186 06e4 02       		.uleb128 0x2
 7187 06e5 91       		.byte	0x91
 7188 06e6 6C       		.sleb128 -20
 7189 06e7 0C       		.uleb128 0xc
 7190 06e8 7800     		.ascii	"x\000"
 7191 06ea 01       		.byte	0x1
 7192 06eb E0       		.byte	0xe0
 7193 06ec C3000000 		.4byte	0xc3
 7194 06f0 02       		.uleb128 0x2
 7195 06f1 91       		.byte	0x91
 7196 06f2 6A       		.sleb128 -22
 7197 06f3 0C       		.uleb128 0xc
 7198 06f4 7900     		.ascii	"y\000"
 7199 06f6 01       		.byte	0x1
 7200 06f7 E0       		.byte	0xe0
 7201 06f8 C3000000 		.4byte	0xc3
 7202 06fc 02       		.uleb128 0x2
 7203 06fd 91       		.byte	0x91
 7204 06fe 68       		.sleb128 -24
 7205 06ff 0C       		.uleb128 0xc
 7206 0700 7700     		.ascii	"w\000"
 7207 0702 01       		.byte	0x1
 7208 0703 E0       		.byte	0xe0
 7209 0704 C3000000 		.4byte	0xc3
 7210 0708 02       		.uleb128 0x2
 7211 0709 91       		.byte	0x91
 7212 070a 66       		.sleb128 -26
 7213 070b 0C       		.uleb128 0xc
 7214 070c 6800     		.ascii	"h\000"
 7215 070e 01       		.byte	0x1
 7216 070f E0       		.byte	0xe0
 7217 0710 C3000000 		.4byte	0xc3
 7218 0714 02       		.uleb128 0x2
 7219 0715 91       		.byte	0x91
 7220 0716 00       		.sleb128 0
 7221 0717 0B       		.uleb128 0xb
 7222 0718 7F010000 		.4byte	.LASF59
 7223 071c 01       		.byte	0x1
 7224 071d E1       		.byte	0xe1
 7225 071e CE000000 		.4byte	0xce
 7226 0722 02       		.uleb128 0x2
 7227 0723 91       		.byte	0x91
 7228 0724 04       		.sleb128 4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 149


 7229 0725 11       		.uleb128 0x11
 7230 0726 1A000000 		.4byte	.LBB8
 7231 072a 3C000000 		.4byte	.LBE8-.LBB8
 7232 072e 0F       		.uleb128 0xf
 7233 072f 6900     		.ascii	"i\000"
 7234 0731 01       		.byte	0x1
 7235 0732 E3       		.byte	0xe3
 7236 0733 C3000000 		.4byte	0xc3
 7237 0737 02       		.uleb128 0x2
 7238 0738 91       		.byte	0x91
 7239 0739 76       		.sleb128 -10
 7240 073a 00       		.byte	0
 7241 073b 00       		.byte	0
 7242 073c 0D       		.uleb128 0xd
 7243 073d 6C010000 		.4byte	.LASF72
 7244 0741 01       		.byte	0x1
 7245 0742 E8       		.byte	0xe8
 7246 0743 00000000 		.4byte	.LFB76
 7247 0747 32000000 		.4byte	.LFE76-.LFB76
 7248 074b 01       		.uleb128 0x1
 7249 074c 9C       		.byte	0x9c
 7250 074d 6E070000 		.4byte	0x76e
 7251 0751 0B       		.uleb128 0xb
 7252 0752 B0010000 		.4byte	.LASF58
 7253 0756 01       		.byte	0x1
 7254 0757 E8       		.byte	0xe8
 7255 0758 EA020000 		.4byte	0x2ea
 7256 075c 02       		.uleb128 0x2
 7257 075d 91       		.byte	0x91
 7258 075e 74       		.sleb128 -12
 7259 075f 0B       		.uleb128 0xb
 7260 0760 7F010000 		.4byte	.LASF59
 7261 0764 01       		.byte	0x1
 7262 0765 E8       		.byte	0xe8
 7263 0766 CE000000 		.4byte	0xce
 7264 076a 02       		.uleb128 0x2
 7265 076b 91       		.byte	0x91
 7266 076c 72       		.sleb128 -14
 7267 076d 00       		.byte	0
 7268 076e 0D       		.uleb128 0xd
 7269 076f 52060000 		.4byte	.LASF73
 7270 0773 01       		.byte	0x1
 7271 0774 ED       		.byte	0xed
 7272 0775 00000000 		.4byte	.LFB77
 7273 0779 D0000000 		.4byte	.LFE77-.LFB77
 7274 077d 01       		.uleb128 0x1
 7275 077e 9C       		.byte	0x9c
 7276 077f 04080000 		.4byte	0x804
 7277 0783 0B       		.uleb128 0xb
 7278 0784 B0010000 		.4byte	.LASF58
 7279 0788 01       		.byte	0x1
 7280 0789 ED       		.byte	0xed
 7281 078a EA020000 		.4byte	0x2ea
 7282 078e 02       		.uleb128 0x2
 7283 078f 91       		.byte	0x91
 7284 0790 6C       		.sleb128 -20
 7285 0791 0C       		.uleb128 0xc
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 150


 7286 0792 783000   		.ascii	"x0\000"
 7287 0795 01       		.byte	0x1
 7288 0796 ED       		.byte	0xed
 7289 0797 C3000000 		.4byte	0xc3
 7290 079b 02       		.uleb128 0x2
 7291 079c 91       		.byte	0x91
 7292 079d 6A       		.sleb128 -22
 7293 079e 0C       		.uleb128 0xc
 7294 079f 793000   		.ascii	"y0\000"
 7295 07a2 01       		.byte	0x1
 7296 07a3 ED       		.byte	0xed
 7297 07a4 C3000000 		.4byte	0xc3
 7298 07a8 02       		.uleb128 0x2
 7299 07a9 91       		.byte	0x91
 7300 07aa 68       		.sleb128 -24
 7301 07ab 0C       		.uleb128 0xc
 7302 07ac 783100   		.ascii	"x1\000"
 7303 07af 01       		.byte	0x1
 7304 07b0 ED       		.byte	0xed
 7305 07b1 C3000000 		.4byte	0xc3
 7306 07b5 02       		.uleb128 0x2
 7307 07b6 91       		.byte	0x91
 7308 07b7 66       		.sleb128 -26
 7309 07b8 0C       		.uleb128 0xc
 7310 07b9 793100   		.ascii	"y1\000"
 7311 07bc 01       		.byte	0x1
 7312 07bd ED       		.byte	0xed
 7313 07be C3000000 		.4byte	0xc3
 7314 07c2 02       		.uleb128 0x2
 7315 07c3 91       		.byte	0x91
 7316 07c4 00       		.sleb128 0
 7317 07c5 0B       		.uleb128 0xb
 7318 07c6 7F010000 		.4byte	.LASF59
 7319 07ca 01       		.byte	0x1
 7320 07cb EE       		.byte	0xee
 7321 07cc CE000000 		.4byte	0xce
 7322 07d0 02       		.uleb128 0x2
 7323 07d1 91       		.byte	0x91
 7324 07d2 04       		.sleb128 4
 7325 07d3 10       		.uleb128 0x10
 7326 07d4 32000000 		.4byte	.LBB9
 7327 07d8 0C000000 		.4byte	.LBE9-.LBB9
 7328 07dc ED070000 		.4byte	0x7ed
 7329 07e0 0F       		.uleb128 0xf
 7330 07e1 7400     		.ascii	"t\000"
 7331 07e3 01       		.byte	0x1
 7332 07e4 F1       		.byte	0xf1
 7333 07e5 C3000000 		.4byte	0xc3
 7334 07e9 02       		.uleb128 0x2
 7335 07ea 91       		.byte	0x91
 7336 07eb 76       		.sleb128 -10
 7337 07ec 00       		.byte	0
 7338 07ed 11       		.uleb128 0x11
 7339 07ee 7A000000 		.4byte	.LBB10
 7340 07f2 0C000000 		.4byte	.LBE10-.LBB10
 7341 07f6 0F       		.uleb128 0xf
 7342 07f7 7400     		.ascii	"t\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 151


 7343 07f9 01       		.byte	0x1
 7344 07fa F4       		.byte	0xf4
 7345 07fb C3000000 		.4byte	0xc3
 7346 07ff 02       		.uleb128 0x2
 7347 0800 91       		.byte	0x91
 7348 0801 74       		.sleb128 -12
 7349 0802 00       		.byte	0
 7350 0803 00       		.byte	0
 7351 0804 0D       		.uleb128 0xd
 7352 0805 C4060000 		.4byte	.LASF74
 7353 0809 01       		.byte	0x1
 7354 080a FC       		.byte	0xfc
 7355 080b 00000000 		.4byte	.LFB78
 7356 080f D2010000 		.4byte	.LFE78-.LFB78
 7357 0813 01       		.uleb128 0x1
 7358 0814 9C       		.byte	0x9c
 7359 0815 9F080000 		.4byte	0x89f
 7360 0819 0B       		.uleb128 0xb
 7361 081a B0010000 		.4byte	.LASF58
 7362 081e 01       		.byte	0x1
 7363 081f FC       		.byte	0xfc
 7364 0820 EA020000 		.4byte	0x2ea
 7365 0824 02       		.uleb128 0x2
 7366 0825 91       		.byte	0x91
 7367 0826 64       		.sleb128 -28
 7368 0827 0C       		.uleb128 0xc
 7369 0828 783000   		.ascii	"x0\000"
 7370 082b 01       		.byte	0x1
 7371 082c FC       		.byte	0xfc
 7372 082d C3000000 		.4byte	0xc3
 7373 0831 02       		.uleb128 0x2
 7374 0832 91       		.byte	0x91
 7375 0833 62       		.sleb128 -30
 7376 0834 0C       		.uleb128 0xc
 7377 0835 793000   		.ascii	"y0\000"
 7378 0838 01       		.byte	0x1
 7379 0839 FC       		.byte	0xfc
 7380 083a C3000000 		.4byte	0xc3
 7381 083e 02       		.uleb128 0x2
 7382 083f 91       		.byte	0x91
 7383 0840 60       		.sleb128 -32
 7384 0841 0C       		.uleb128 0xc
 7385 0842 7200     		.ascii	"r\000"
 7386 0844 01       		.byte	0x1
 7387 0845 FC       		.byte	0xfc
 7388 0846 C3000000 		.4byte	0xc3
 7389 084a 02       		.uleb128 0x2
 7390 084b 91       		.byte	0x91
 7391 084c 5E       		.sleb128 -34
 7392 084d 0B       		.uleb128 0xb
 7393 084e 7F010000 		.4byte	.LASF59
 7394 0852 01       		.byte	0x1
 7395 0853 FD       		.byte	0xfd
 7396 0854 CE000000 		.4byte	0xce
 7397 0858 02       		.uleb128 0x2
 7398 0859 91       		.byte	0x91
 7399 085a 00       		.sleb128 0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 152


 7400 085b 0F       		.uleb128 0xf
 7401 085c 6600     		.ascii	"f\000"
 7402 085e 01       		.byte	0x1
 7403 085f FE       		.byte	0xfe
 7404 0860 C3000000 		.4byte	0xc3
 7405 0864 02       		.uleb128 0x2
 7406 0865 91       		.byte	0x91
 7407 0866 76       		.sleb128 -10
 7408 0867 0E       		.uleb128 0xe
 7409 0868 9C030000 		.4byte	.LASF75
 7410 086c 01       		.byte	0x1
 7411 086d FF       		.byte	0xff
 7412 086e C3000000 		.4byte	0xc3
 7413 0872 02       		.uleb128 0x2
 7414 0873 91       		.byte	0x91
 7415 0874 74       		.sleb128 -12
 7416 0875 12       		.uleb128 0x12
 7417 0876 6E030000 		.4byte	.LASF76
 7418 087a 01       		.byte	0x1
 7419 087b 0001     		.2byte	0x100
 7420 087d C3000000 		.4byte	0xc3
 7421 0881 02       		.uleb128 0x2
 7422 0882 91       		.byte	0x91
 7423 0883 72       		.sleb128 -14
 7424 0884 13       		.uleb128 0x13
 7425 0885 7800     		.ascii	"x\000"
 7426 0887 01       		.byte	0x1
 7427 0888 0101     		.2byte	0x101
 7428 088a C3000000 		.4byte	0xc3
 7429 088e 02       		.uleb128 0x2
 7430 088f 91       		.byte	0x91
 7431 0890 70       		.sleb128 -16
 7432 0891 13       		.uleb128 0x13
 7433 0892 7900     		.ascii	"y\000"
 7434 0894 01       		.byte	0x1
 7435 0895 0201     		.2byte	0x102
 7436 0897 C3000000 		.4byte	0xc3
 7437 089b 02       		.uleb128 0x2
 7438 089c 91       		.byte	0x91
 7439 089d 6E       		.sleb128 -18
 7440 089e 00       		.byte	0
 7441 089f 14       		.uleb128 0x14
 7442 08a0 3C050000 		.4byte	.LASF77
 7443 08a4 01       		.byte	0x1
 7444 08a5 1F01     		.2byte	0x11f
 7445 08a7 00000000 		.4byte	.LFB79
 7446 08ab AA010000 		.4byte	.LFE79-.LFB79
 7447 08af 01       		.uleb128 0x1
 7448 08b0 9C       		.byte	0x9c
 7449 08b1 51090000 		.4byte	0x951
 7450 08b5 15       		.uleb128 0x15
 7451 08b6 B0010000 		.4byte	.LASF58
 7452 08ba 01       		.byte	0x1
 7453 08bb 1F01     		.2byte	0x11f
 7454 08bd EA020000 		.4byte	0x2ea
 7455 08c1 02       		.uleb128 0x2
 7456 08c2 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 153


 7457 08c3 64       		.sleb128 -28
 7458 08c4 16       		.uleb128 0x16
 7459 08c5 783000   		.ascii	"x0\000"
 7460 08c8 01       		.byte	0x1
 7461 08c9 1F01     		.2byte	0x11f
 7462 08cb C3000000 		.4byte	0xc3
 7463 08cf 02       		.uleb128 0x2
 7464 08d0 91       		.byte	0x91
 7465 08d1 62       		.sleb128 -30
 7466 08d2 16       		.uleb128 0x16
 7467 08d3 793000   		.ascii	"y0\000"
 7468 08d6 01       		.byte	0x1
 7469 08d7 1F01     		.2byte	0x11f
 7470 08d9 C3000000 		.4byte	0xc3
 7471 08dd 02       		.uleb128 0x2
 7472 08de 91       		.byte	0x91
 7473 08df 60       		.sleb128 -32
 7474 08e0 16       		.uleb128 0x16
 7475 08e1 7200     		.ascii	"r\000"
 7476 08e3 01       		.byte	0x1
 7477 08e4 2001     		.2byte	0x120
 7478 08e6 C3000000 		.4byte	0xc3
 7479 08ea 02       		.uleb128 0x2
 7480 08eb 91       		.byte	0x91
 7481 08ec 5E       		.sleb128 -34
 7482 08ed 15       		.uleb128 0x15
 7483 08ee 9F050000 		.4byte	.LASF78
 7484 08f2 01       		.byte	0x1
 7485 08f3 2001     		.2byte	0x120
 7486 08f5 B8000000 		.4byte	0xb8
 7487 08f9 02       		.uleb128 0x2
 7488 08fa 91       		.byte	0x91
 7489 08fb 00       		.sleb128 0
 7490 08fc 15       		.uleb128 0x15
 7491 08fd 7F010000 		.4byte	.LASF59
 7492 0901 01       		.byte	0x1
 7493 0902 2001     		.2byte	0x120
 7494 0904 CE000000 		.4byte	0xce
 7495 0908 02       		.uleb128 0x2
 7496 0909 91       		.byte	0x91
 7497 090a 04       		.sleb128 4
 7498 090b 13       		.uleb128 0x13
 7499 090c 6600     		.ascii	"f\000"
 7500 090e 01       		.byte	0x1
 7501 090f 2101     		.2byte	0x121
 7502 0911 C3000000 		.4byte	0xc3
 7503 0915 02       		.uleb128 0x2
 7504 0916 91       		.byte	0x91
 7505 0917 76       		.sleb128 -10
 7506 0918 12       		.uleb128 0x12
 7507 0919 9C030000 		.4byte	.LASF75
 7508 091d 01       		.byte	0x1
 7509 091e 2201     		.2byte	0x122
 7510 0920 C3000000 		.4byte	0xc3
 7511 0924 02       		.uleb128 0x2
 7512 0925 91       		.byte	0x91
 7513 0926 74       		.sleb128 -12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 154


 7514 0927 12       		.uleb128 0x12
 7515 0928 6E030000 		.4byte	.LASF76
 7516 092c 01       		.byte	0x1
 7517 092d 2301     		.2byte	0x123
 7518 092f C3000000 		.4byte	0xc3
 7519 0933 02       		.uleb128 0x2
 7520 0934 91       		.byte	0x91
 7521 0935 72       		.sleb128 -14
 7522 0936 13       		.uleb128 0x13
 7523 0937 7800     		.ascii	"x\000"
 7524 0939 01       		.byte	0x1
 7525 093a 2401     		.2byte	0x124
 7526 093c C3000000 		.4byte	0xc3
 7527 0940 02       		.uleb128 0x2
 7528 0941 91       		.byte	0x91
 7529 0942 70       		.sleb128 -16
 7530 0943 13       		.uleb128 0x13
 7531 0944 7900     		.ascii	"y\000"
 7532 0946 01       		.byte	0x1
 7533 0947 2501     		.2byte	0x125
 7534 0949 C3000000 		.4byte	0xc3
 7535 094d 02       		.uleb128 0x2
 7536 094e 91       		.byte	0x91
 7537 094f 6E       		.sleb128 -18
 7538 0950 00       		.byte	0
 7539 0951 14       		.uleb128 0x14
 7540 0952 91050000 		.4byte	.LASF79
 7541 0956 01       		.byte	0x1
 7542 0957 4301     		.2byte	0x143
 7543 0959 00000000 		.4byte	.LFB80
 7544 095d 68000000 		.4byte	.LFE80-.LFB80
 7545 0961 01       		.uleb128 0x1
 7546 0962 9C       		.byte	0x9c
 7547 0963 AF090000 		.4byte	0x9af
 7548 0967 15       		.uleb128 0x15
 7549 0968 B0010000 		.4byte	.LASF58
 7550 096c 01       		.byte	0x1
 7551 096d 4301     		.2byte	0x143
 7552 096f EA020000 		.4byte	0x2ea
 7553 0973 02       		.uleb128 0x2
 7554 0974 91       		.byte	0x91
 7555 0975 74       		.sleb128 -12
 7556 0976 16       		.uleb128 0x16
 7557 0977 783000   		.ascii	"x0\000"
 7558 097a 01       		.byte	0x1
 7559 097b 4301     		.2byte	0x143
 7560 097d C3000000 		.4byte	0xc3
 7561 0981 02       		.uleb128 0x2
 7562 0982 91       		.byte	0x91
 7563 0983 72       		.sleb128 -14
 7564 0984 16       		.uleb128 0x16
 7565 0985 793000   		.ascii	"y0\000"
 7566 0988 01       		.byte	0x1
 7567 0989 4301     		.2byte	0x143
 7568 098b C3000000 		.4byte	0xc3
 7569 098f 02       		.uleb128 0x2
 7570 0990 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 155


 7571 0991 70       		.sleb128 -16
 7572 0992 16       		.uleb128 0x16
 7573 0993 7200     		.ascii	"r\000"
 7574 0995 01       		.byte	0x1
 7575 0996 4301     		.2byte	0x143
 7576 0998 C3000000 		.4byte	0xc3
 7577 099c 02       		.uleb128 0x2
 7578 099d 91       		.byte	0x91
 7579 099e 6E       		.sleb128 -18
 7580 099f 15       		.uleb128 0x15
 7581 09a0 7F010000 		.4byte	.LASF59
 7582 09a4 01       		.byte	0x1
 7583 09a5 4401     		.2byte	0x144
 7584 09a7 CE000000 		.4byte	0xce
 7585 09ab 02       		.uleb128 0x2
 7586 09ac 91       		.byte	0x91
 7587 09ad 00       		.sleb128 0
 7588 09ae 00       		.byte	0
 7589 09af 14       		.uleb128 0x14
 7590 09b0 56050000 		.4byte	.LASF80
 7591 09b4 01       		.byte	0x1
 7592 09b5 4C01     		.2byte	0x14c
 7593 09b7 00000000 		.4byte	.LFB81
 7594 09bb 82010000 		.4byte	.LFE81-.LFB81
 7595 09bf 01       		.uleb128 0x1
 7596 09c0 9C       		.byte	0x9c
 7597 09c1 700A0000 		.4byte	0xa70
 7598 09c5 15       		.uleb128 0x15
 7599 09c6 B0010000 		.4byte	.LASF58
 7600 09ca 01       		.byte	0x1
 7601 09cb 4C01     		.2byte	0x14c
 7602 09cd EA020000 		.4byte	0x2ea
 7603 09d1 02       		.uleb128 0x2
 7604 09d2 91       		.byte	0x91
 7605 09d3 64       		.sleb128 -28
 7606 09d4 16       		.uleb128 0x16
 7607 09d5 783000   		.ascii	"x0\000"
 7608 09d8 01       		.byte	0x1
 7609 09d9 4C01     		.2byte	0x14c
 7610 09db C3000000 		.4byte	0xc3
 7611 09df 02       		.uleb128 0x2
 7612 09e0 91       		.byte	0x91
 7613 09e1 62       		.sleb128 -30
 7614 09e2 16       		.uleb128 0x16
 7615 09e3 793000   		.ascii	"y0\000"
 7616 09e6 01       		.byte	0x1
 7617 09e7 4C01     		.2byte	0x14c
 7618 09e9 C3000000 		.4byte	0xc3
 7619 09ed 02       		.uleb128 0x2
 7620 09ee 91       		.byte	0x91
 7621 09ef 60       		.sleb128 -32
 7622 09f0 16       		.uleb128 0x16
 7623 09f1 7200     		.ascii	"r\000"
 7624 09f3 01       		.byte	0x1
 7625 09f4 4C01     		.2byte	0x14c
 7626 09f6 C3000000 		.4byte	0xc3
 7627 09fa 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 156


 7628 09fb 91       		.byte	0x91
 7629 09fc 5E       		.sleb128 -34
 7630 09fd 15       		.uleb128 0x15
 7631 09fe 9F050000 		.4byte	.LASF78
 7632 0a02 01       		.byte	0x1
 7633 0a03 4D01     		.2byte	0x14d
 7634 0a05 B8000000 		.4byte	0xb8
 7635 0a09 02       		.uleb128 0x2
 7636 0a0a 91       		.byte	0x91
 7637 0a0b 00       		.sleb128 0
 7638 0a0c 15       		.uleb128 0x15
 7639 0a0d 08000000 		.4byte	.LASF81
 7640 0a11 01       		.byte	0x1
 7641 0a12 4D01     		.2byte	0x14d
 7642 0a14 C3000000 		.4byte	0xc3
 7643 0a18 02       		.uleb128 0x2
 7644 0a19 91       		.byte	0x91
 7645 0a1a 04       		.sleb128 4
 7646 0a1b 15       		.uleb128 0x15
 7647 0a1c 7F010000 		.4byte	.LASF59
 7648 0a20 01       		.byte	0x1
 7649 0a21 4D01     		.2byte	0x14d
 7650 0a23 CE000000 		.4byte	0xce
 7651 0a27 02       		.uleb128 0x2
 7652 0a28 91       		.byte	0x91
 7653 0a29 08       		.sleb128 8
 7654 0a2a 13       		.uleb128 0x13
 7655 0a2b 6600     		.ascii	"f\000"
 7656 0a2d 01       		.byte	0x1
 7657 0a2e 4F01     		.2byte	0x14f
 7658 0a30 C3000000 		.4byte	0xc3
 7659 0a34 02       		.uleb128 0x2
 7660 0a35 91       		.byte	0x91
 7661 0a36 76       		.sleb128 -10
 7662 0a37 12       		.uleb128 0x12
 7663 0a38 9C030000 		.4byte	.LASF75
 7664 0a3c 01       		.byte	0x1
 7665 0a3d 5001     		.2byte	0x150
 7666 0a3f C3000000 		.4byte	0xc3
 7667 0a43 02       		.uleb128 0x2
 7668 0a44 91       		.byte	0x91
 7669 0a45 74       		.sleb128 -12
 7670 0a46 12       		.uleb128 0x12
 7671 0a47 6E030000 		.4byte	.LASF76
 7672 0a4b 01       		.byte	0x1
 7673 0a4c 5101     		.2byte	0x151
 7674 0a4e C3000000 		.4byte	0xc3
 7675 0a52 02       		.uleb128 0x2
 7676 0a53 91       		.byte	0x91
 7677 0a54 72       		.sleb128 -14
 7678 0a55 13       		.uleb128 0x13
 7679 0a56 7800     		.ascii	"x\000"
 7680 0a58 01       		.byte	0x1
 7681 0a59 5201     		.2byte	0x152
 7682 0a5b C3000000 		.4byte	0xc3
 7683 0a5f 02       		.uleb128 0x2
 7684 0a60 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 157


 7685 0a61 70       		.sleb128 -16
 7686 0a62 13       		.uleb128 0x13
 7687 0a63 7900     		.ascii	"y\000"
 7688 0a65 01       		.byte	0x1
 7689 0a66 5301     		.2byte	0x153
 7690 0a68 C3000000 		.4byte	0xc3
 7691 0a6c 02       		.uleb128 0x2
 7692 0a6d 91       		.byte	0x91
 7693 0a6e 6E       		.sleb128 -18
 7694 0a6f 00       		.byte	0
 7695 0a70 14       		.uleb128 0x14
 7696 0a71 CE030000 		.4byte	.LASF82
 7697 0a75 01       		.byte	0x1
 7698 0a76 6B01     		.2byte	0x16b
 7699 0a78 00000000 		.4byte	.LFB82
 7700 0a7c 96000000 		.4byte	.LFE82-.LFB82
 7701 0a80 01       		.uleb128 0x1
 7702 0a81 9C       		.byte	0x9c
 7703 0a82 D90A0000 		.4byte	0xad9
 7704 0a86 15       		.uleb128 0x15
 7705 0a87 B0010000 		.4byte	.LASF58
 7706 0a8b 01       		.byte	0x1
 7707 0a8c 6B01     		.2byte	0x16b
 7708 0a8e EA020000 		.4byte	0x2ea
 7709 0a92 02       		.uleb128 0x2
 7710 0a93 91       		.byte	0x91
 7711 0a94 74       		.sleb128 -12
 7712 0a95 16       		.uleb128 0x16
 7713 0a96 7800     		.ascii	"x\000"
 7714 0a98 01       		.byte	0x1
 7715 0a99 6B01     		.2byte	0x16b
 7716 0a9b C3000000 		.4byte	0xc3
 7717 0a9f 02       		.uleb128 0x2
 7718 0aa0 91       		.byte	0x91
 7719 0aa1 72       		.sleb128 -14
 7720 0aa2 16       		.uleb128 0x16
 7721 0aa3 7900     		.ascii	"y\000"
 7722 0aa5 01       		.byte	0x1
 7723 0aa6 6B01     		.2byte	0x16b
 7724 0aa8 C3000000 		.4byte	0xc3
 7725 0aac 02       		.uleb128 0x2
 7726 0aad 91       		.byte	0x91
 7727 0aae 70       		.sleb128 -16
 7728 0aaf 16       		.uleb128 0x16
 7729 0ab0 7700     		.ascii	"w\000"
 7730 0ab2 01       		.byte	0x1
 7731 0ab3 6B01     		.2byte	0x16b
 7732 0ab5 C3000000 		.4byte	0xc3
 7733 0ab9 02       		.uleb128 0x2
 7734 0aba 91       		.byte	0x91
 7735 0abb 6E       		.sleb128 -18
 7736 0abc 16       		.uleb128 0x16
 7737 0abd 6800     		.ascii	"h\000"
 7738 0abf 01       		.byte	0x1
 7739 0ac0 6B01     		.2byte	0x16b
 7740 0ac2 C3000000 		.4byte	0xc3
 7741 0ac6 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 158


 7742 0ac7 91       		.byte	0x91
 7743 0ac8 00       		.sleb128 0
 7744 0ac9 15       		.uleb128 0x15
 7745 0aca 7F010000 		.4byte	.LASF59
 7746 0ace 01       		.byte	0x1
 7747 0acf 6C01     		.2byte	0x16c
 7748 0ad1 CE000000 		.4byte	0xce
 7749 0ad5 02       		.uleb128 0x2
 7750 0ad6 91       		.byte	0x91
 7751 0ad7 04       		.sleb128 4
 7752 0ad8 00       		.byte	0
 7753 0ad9 14       		.uleb128 0x14
 7754 0ada 96040000 		.4byte	.LASF83
 7755 0ade 01       		.byte	0x1
 7756 0adf 7601     		.2byte	0x176
 7757 0ae1 00000000 		.4byte	.LFB83
 7758 0ae5 A4010000 		.4byte	.LFE83-.LFB83
 7759 0ae9 01       		.uleb128 0x1
 7760 0aea 9C       		.byte	0x9c
 7761 0aeb 4F0B0000 		.4byte	0xb4f
 7762 0aef 15       		.uleb128 0x15
 7763 0af0 B0010000 		.4byte	.LASF58
 7764 0af4 01       		.byte	0x1
 7765 0af5 7601     		.2byte	0x176
 7766 0af7 EA020000 		.4byte	0x2ea
 7767 0afb 02       		.uleb128 0x2
 7768 0afc 91       		.byte	0x91
 7769 0afd 74       		.sleb128 -12
 7770 0afe 16       		.uleb128 0x16
 7771 0aff 7800     		.ascii	"x\000"
 7772 0b01 01       		.byte	0x1
 7773 0b02 7601     		.2byte	0x176
 7774 0b04 C3000000 		.4byte	0xc3
 7775 0b08 02       		.uleb128 0x2
 7776 0b09 91       		.byte	0x91
 7777 0b0a 72       		.sleb128 -14
 7778 0b0b 16       		.uleb128 0x16
 7779 0b0c 7900     		.ascii	"y\000"
 7780 0b0e 01       		.byte	0x1
 7781 0b0f 7601     		.2byte	0x176
 7782 0b11 C3000000 		.4byte	0xc3
 7783 0b15 02       		.uleb128 0x2
 7784 0b16 91       		.byte	0x91
 7785 0b17 70       		.sleb128 -16
 7786 0b18 16       		.uleb128 0x16
 7787 0b19 7700     		.ascii	"w\000"
 7788 0b1b 01       		.byte	0x1
 7789 0b1c 7601     		.2byte	0x176
 7790 0b1e C3000000 		.4byte	0xc3
 7791 0b22 02       		.uleb128 0x2
 7792 0b23 91       		.byte	0x91
 7793 0b24 6E       		.sleb128 -18
 7794 0b25 16       		.uleb128 0x16
 7795 0b26 6800     		.ascii	"h\000"
 7796 0b28 01       		.byte	0x1
 7797 0b29 7701     		.2byte	0x177
 7798 0b2b C3000000 		.4byte	0xc3
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 159


 7799 0b2f 02       		.uleb128 0x2
 7800 0b30 91       		.byte	0x91
 7801 0b31 00       		.sleb128 0
 7802 0b32 16       		.uleb128 0x16
 7803 0b33 7200     		.ascii	"r\000"
 7804 0b35 01       		.byte	0x1
 7805 0b36 7701     		.2byte	0x177
 7806 0b38 C3000000 		.4byte	0xc3
 7807 0b3c 02       		.uleb128 0x2
 7808 0b3d 91       		.byte	0x91
 7809 0b3e 04       		.sleb128 4
 7810 0b3f 15       		.uleb128 0x15
 7811 0b40 7F010000 		.4byte	.LASF59
 7812 0b44 01       		.byte	0x1
 7813 0b45 7701     		.2byte	0x177
 7814 0b47 CE000000 		.4byte	0xce
 7815 0b4b 02       		.uleb128 0x2
 7816 0b4c 91       		.byte	0x91
 7817 0b4d 08       		.sleb128 8
 7818 0b4e 00       		.byte	0
 7819 0b4f 14       		.uleb128 0x14
 7820 0b50 59040000 		.4byte	.LASF84
 7821 0b54 01       		.byte	0x1
 7822 0b55 8601     		.2byte	0x186
 7823 0b57 00000000 		.4byte	.LFB84
 7824 0b5b D6000000 		.4byte	.LFE84-.LFB84
 7825 0b5f 01       		.uleb128 0x1
 7826 0b60 9C       		.byte	0x9c
 7827 0b61 C50B0000 		.4byte	0xbc5
 7828 0b65 15       		.uleb128 0x15
 7829 0b66 B0010000 		.4byte	.LASF58
 7830 0b6a 01       		.byte	0x1
 7831 0b6b 8601     		.2byte	0x186
 7832 0b6d EA020000 		.4byte	0x2ea
 7833 0b71 02       		.uleb128 0x2
 7834 0b72 91       		.byte	0x91
 7835 0b73 6C       		.sleb128 -20
 7836 0b74 16       		.uleb128 0x16
 7837 0b75 7800     		.ascii	"x\000"
 7838 0b77 01       		.byte	0x1
 7839 0b78 8601     		.2byte	0x186
 7840 0b7a C3000000 		.4byte	0xc3
 7841 0b7e 02       		.uleb128 0x2
 7842 0b7f 91       		.byte	0x91
 7843 0b80 6A       		.sleb128 -22
 7844 0b81 16       		.uleb128 0x16
 7845 0b82 7900     		.ascii	"y\000"
 7846 0b84 01       		.byte	0x1
 7847 0b85 8601     		.2byte	0x186
 7848 0b87 C3000000 		.4byte	0xc3
 7849 0b8b 02       		.uleb128 0x2
 7850 0b8c 91       		.byte	0x91
 7851 0b8d 68       		.sleb128 -24
 7852 0b8e 16       		.uleb128 0x16
 7853 0b8f 7700     		.ascii	"w\000"
 7854 0b91 01       		.byte	0x1
 7855 0b92 8601     		.2byte	0x186
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 160


 7856 0b94 C3000000 		.4byte	0xc3
 7857 0b98 02       		.uleb128 0x2
 7858 0b99 91       		.byte	0x91
 7859 0b9a 66       		.sleb128 -26
 7860 0b9b 16       		.uleb128 0x16
 7861 0b9c 6800     		.ascii	"h\000"
 7862 0b9e 01       		.byte	0x1
 7863 0b9f 8701     		.2byte	0x187
 7864 0ba1 C3000000 		.4byte	0xc3
 7865 0ba5 02       		.uleb128 0x2
 7866 0ba6 91       		.byte	0x91
 7867 0ba7 00       		.sleb128 0
 7868 0ba8 16       		.uleb128 0x16
 7869 0ba9 7200     		.ascii	"r\000"
 7870 0bab 01       		.byte	0x1
 7871 0bac 8701     		.2byte	0x187
 7872 0bae C3000000 		.4byte	0xc3
 7873 0bb2 02       		.uleb128 0x2
 7874 0bb3 91       		.byte	0x91
 7875 0bb4 04       		.sleb128 4
 7876 0bb5 15       		.uleb128 0x15
 7877 0bb6 7F010000 		.4byte	.LASF59
 7878 0bba 01       		.byte	0x1
 7879 0bbb 8701     		.2byte	0x187
 7880 0bbd CE000000 		.4byte	0xce
 7881 0bc1 02       		.uleb128 0x2
 7882 0bc2 91       		.byte	0x91
 7883 0bc3 08       		.sleb128 8
 7884 0bc4 00       		.byte	0
 7885 0bc5 14       		.uleb128 0x14
 7886 0bc6 81050000 		.4byte	.LASF85
 7887 0bca 01       		.byte	0x1
 7888 0bcb 9101     		.2byte	0x191
 7889 0bcd 00000000 		.4byte	.LFB85
 7890 0bd1 7C000000 		.4byte	.LFE85-.LFB85
 7891 0bd5 01       		.uleb128 0x1
 7892 0bd6 9C       		.byte	0x9c
 7893 0bd7 4E0C0000 		.4byte	0xc4e
 7894 0bdb 15       		.uleb128 0x15
 7895 0bdc B0010000 		.4byte	.LASF58
 7896 0be0 01       		.byte	0x1
 7897 0be1 9101     		.2byte	0x191
 7898 0be3 EA020000 		.4byte	0x2ea
 7899 0be7 02       		.uleb128 0x2
 7900 0be8 91       		.byte	0x91
 7901 0be9 74       		.sleb128 -12
 7902 0bea 16       		.uleb128 0x16
 7903 0beb 783000   		.ascii	"x0\000"
 7904 0bee 01       		.byte	0x1
 7905 0bef 9101     		.2byte	0x191
 7906 0bf1 C3000000 		.4byte	0xc3
 7907 0bf5 02       		.uleb128 0x2
 7908 0bf6 91       		.byte	0x91
 7909 0bf7 72       		.sleb128 -14
 7910 0bf8 16       		.uleb128 0x16
 7911 0bf9 793000   		.ascii	"y0\000"
 7912 0bfc 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 161


 7913 0bfd 9101     		.2byte	0x191
 7914 0bff C3000000 		.4byte	0xc3
 7915 0c03 02       		.uleb128 0x2
 7916 0c04 91       		.byte	0x91
 7917 0c05 70       		.sleb128 -16
 7918 0c06 16       		.uleb128 0x16
 7919 0c07 783100   		.ascii	"x1\000"
 7920 0c0a 01       		.byte	0x1
 7921 0c0b 9201     		.2byte	0x192
 7922 0c0d C3000000 		.4byte	0xc3
 7923 0c11 02       		.uleb128 0x2
 7924 0c12 91       		.byte	0x91
 7925 0c13 6E       		.sleb128 -18
 7926 0c14 16       		.uleb128 0x16
 7927 0c15 793100   		.ascii	"y1\000"
 7928 0c18 01       		.byte	0x1
 7929 0c19 9201     		.2byte	0x192
 7930 0c1b C3000000 		.4byte	0xc3
 7931 0c1f 02       		.uleb128 0x2
 7932 0c20 91       		.byte	0x91
 7933 0c21 00       		.sleb128 0
 7934 0c22 16       		.uleb128 0x16
 7935 0c23 783200   		.ascii	"x2\000"
 7936 0c26 01       		.byte	0x1
 7937 0c27 9201     		.2byte	0x192
 7938 0c29 C3000000 		.4byte	0xc3
 7939 0c2d 02       		.uleb128 0x2
 7940 0c2e 91       		.byte	0x91
 7941 0c2f 04       		.sleb128 4
 7942 0c30 16       		.uleb128 0x16
 7943 0c31 793200   		.ascii	"y2\000"
 7944 0c34 01       		.byte	0x1
 7945 0c35 9201     		.2byte	0x192
 7946 0c37 C3000000 		.4byte	0xc3
 7947 0c3b 02       		.uleb128 0x2
 7948 0c3c 91       		.byte	0x91
 7949 0c3d 08       		.sleb128 8
 7950 0c3e 15       		.uleb128 0x15
 7951 0c3f 7F010000 		.4byte	.LASF59
 7952 0c43 01       		.byte	0x1
 7953 0c44 9201     		.2byte	0x192
 7954 0c46 CE000000 		.4byte	0xce
 7955 0c4a 02       		.uleb128 0x2
 7956 0c4b 91       		.byte	0x91
 7957 0c4c 0C       		.sleb128 12
 7958 0c4d 00       		.byte	0
 7959 0c4e 14       		.uleb128 0x14
 7960 0c4f CC040000 		.4byte	.LASF86
 7961 0c53 01       		.byte	0x1
 7962 0c54 9901     		.2byte	0x199
 7963 0c56 00000000 		.4byte	.LFB86
 7964 0c5a E0020000 		.4byte	.LFE86-.LFB86
 7965 0c5e 01       		.uleb128 0x1
 7966 0c5f 9C       		.byte	0x9c
 7967 0c60 580E0000 		.4byte	0xe58
 7968 0c64 15       		.uleb128 0x15
 7969 0c65 B0010000 		.4byte	.LASF58
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 162


 7970 0c69 01       		.byte	0x1
 7971 0c6a 9901     		.2byte	0x199
 7972 0c6c EA020000 		.4byte	0x2ea
 7973 0c70 02       		.uleb128 0x2
 7974 0c71 91       		.byte	0x91
 7975 0c72 44       		.sleb128 -60
 7976 0c73 16       		.uleb128 0x16
 7977 0c74 783000   		.ascii	"x0\000"
 7978 0c77 01       		.byte	0x1
 7979 0c78 9901     		.2byte	0x199
 7980 0c7a C3000000 		.4byte	0xc3
 7981 0c7e 02       		.uleb128 0x2
 7982 0c7f 91       		.byte	0x91
 7983 0c80 42       		.sleb128 -62
 7984 0c81 16       		.uleb128 0x16
 7985 0c82 793000   		.ascii	"y0\000"
 7986 0c85 01       		.byte	0x1
 7987 0c86 9901     		.2byte	0x199
 7988 0c88 C3000000 		.4byte	0xc3
 7989 0c8c 02       		.uleb128 0x2
 7990 0c8d 91       		.byte	0x91
 7991 0c8e 40       		.sleb128 -64
 7992 0c8f 16       		.uleb128 0x16
 7993 0c90 783100   		.ascii	"x1\000"
 7994 0c93 01       		.byte	0x1
 7995 0c94 9A01     		.2byte	0x19a
 7996 0c96 C3000000 		.4byte	0xc3
 7997 0c9a 03       		.uleb128 0x3
 7998 0c9b 91       		.byte	0x91
 7999 0c9c BE7F     		.sleb128 -66
 8000 0c9e 16       		.uleb128 0x16
 8001 0c9f 793100   		.ascii	"y1\000"
 8002 0ca2 01       		.byte	0x1
 8003 0ca3 9A01     		.2byte	0x19a
 8004 0ca5 C3000000 		.4byte	0xc3
 8005 0ca9 02       		.uleb128 0x2
 8006 0caa 91       		.byte	0x91
 8007 0cab 00       		.sleb128 0
 8008 0cac 16       		.uleb128 0x16
 8009 0cad 783200   		.ascii	"x2\000"
 8010 0cb0 01       		.byte	0x1
 8011 0cb1 9A01     		.2byte	0x19a
 8012 0cb3 C3000000 		.4byte	0xc3
 8013 0cb7 02       		.uleb128 0x2
 8014 0cb8 91       		.byte	0x91
 8015 0cb9 04       		.sleb128 4
 8016 0cba 16       		.uleb128 0x16
 8017 0cbb 793200   		.ascii	"y2\000"
 8018 0cbe 01       		.byte	0x1
 8019 0cbf 9A01     		.2byte	0x19a
 8020 0cc1 C3000000 		.4byte	0xc3
 8021 0cc5 02       		.uleb128 0x2
 8022 0cc6 91       		.byte	0x91
 8023 0cc7 08       		.sleb128 8
 8024 0cc8 15       		.uleb128 0x15
 8025 0cc9 7F010000 		.4byte	.LASF59
 8026 0ccd 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 163


 8027 0cce 9A01     		.2byte	0x19a
 8028 0cd0 CE000000 		.4byte	0xce
 8029 0cd4 02       		.uleb128 0x2
 8030 0cd5 91       		.byte	0x91
 8031 0cd6 0C       		.sleb128 12
 8032 0cd7 13       		.uleb128 0x13
 8033 0cd8 6100     		.ascii	"a\000"
 8034 0cda 01       		.byte	0x1
 8035 0cdb 9C01     		.2byte	0x19c
 8036 0cdd C3000000 		.4byte	0xc3
 8037 0ce1 02       		.uleb128 0x2
 8038 0ce2 91       		.byte	0x91
 8039 0ce3 76       		.sleb128 -10
 8040 0ce4 13       		.uleb128 0x13
 8041 0ce5 6200     		.ascii	"b\000"
 8042 0ce7 01       		.byte	0x1
 8043 0ce8 9C01     		.2byte	0x19c
 8044 0cea C3000000 		.4byte	0xc3
 8045 0cee 02       		.uleb128 0x2
 8046 0cef 91       		.byte	0x91
 8047 0cf0 74       		.sleb128 -12
 8048 0cf1 13       		.uleb128 0x13
 8049 0cf2 7900     		.ascii	"y\000"
 8050 0cf4 01       		.byte	0x1
 8051 0cf5 9C01     		.2byte	0x19c
 8052 0cf7 C3000000 		.4byte	0xc3
 8053 0cfb 02       		.uleb128 0x2
 8054 0cfc 91       		.byte	0x91
 8055 0cfd 72       		.sleb128 -14
 8056 0cfe 12       		.uleb128 0x12
 8057 0cff 91040000 		.4byte	.LASF31
 8058 0d03 01       		.byte	0x1
 8059 0d04 9C01     		.2byte	0x19c
 8060 0d06 C3000000 		.4byte	0xc3
 8061 0d0a 02       		.uleb128 0x2
 8062 0d0b 91       		.byte	0x91
 8063 0d0c 70       		.sleb128 -16
 8064 0d0d 12       		.uleb128 0x12
 8065 0d0e ED030000 		.4byte	.LASF87
 8066 0d12 01       		.byte	0x1
 8067 0d13 B601     		.2byte	0x1b6
 8068 0d15 C3000000 		.4byte	0xc3
 8069 0d19 02       		.uleb128 0x2
 8070 0d1a 91       		.byte	0x91
 8071 0d1b 5A       		.sleb128 -38
 8072 0d1c 12       		.uleb128 0x12
 8073 0d1d 3D010000 		.4byte	.LASF88
 8074 0d21 01       		.byte	0x1
 8075 0d22 B701     		.2byte	0x1b7
 8076 0d24 C3000000 		.4byte	0xc3
 8077 0d28 02       		.uleb128 0x2
 8078 0d29 91       		.byte	0x91
 8079 0d2a 58       		.sleb128 -40
 8080 0d2b 12       		.uleb128 0x12
 8081 0d2c AB010000 		.4byte	.LASF89
 8082 0d30 01       		.byte	0x1
 8083 0d31 B801     		.2byte	0x1b8
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 164


 8084 0d33 C3000000 		.4byte	0xc3
 8085 0d37 02       		.uleb128 0x2
 8086 0d38 91       		.byte	0x91
 8087 0d39 56       		.sleb128 -42
 8088 0d3a 12       		.uleb128 0x12
 8089 0d3b 42010000 		.4byte	.LASF90
 8090 0d3f 01       		.byte	0x1
 8091 0d40 B901     		.2byte	0x1b9
 8092 0d42 C3000000 		.4byte	0xc3
 8093 0d46 02       		.uleb128 0x2
 8094 0d47 91       		.byte	0x91
 8095 0d48 54       		.sleb128 -44
 8096 0d49 12       		.uleb128 0x12
 8097 0d4a 22030000 		.4byte	.LASF91
 8098 0d4e 01       		.byte	0x1
 8099 0d4f BA01     		.2byte	0x1ba
 8100 0d51 C3000000 		.4byte	0xc3
 8101 0d55 02       		.uleb128 0x2
 8102 0d56 91       		.byte	0x91
 8103 0d57 52       		.sleb128 -46
 8104 0d58 12       		.uleb128 0x12
 8105 0d59 38010000 		.4byte	.LASF92
 8106 0d5d 01       		.byte	0x1
 8107 0d5e BB01     		.2byte	0x1bb
 8108 0d60 C3000000 		.4byte	0xc3
 8109 0d64 02       		.uleb128 0x2
 8110 0d65 91       		.byte	0x91
 8111 0d66 50       		.sleb128 -48
 8112 0d67 13       		.uleb128 0x13
 8113 0d68 736100   		.ascii	"sa\000"
 8114 0d6b 01       		.byte	0x1
 8115 0d6c BD01     		.2byte	0x1bd
 8116 0d6e D9000000 		.4byte	0xd9
 8117 0d72 02       		.uleb128 0x2
 8118 0d73 91       		.byte	0x91
 8119 0d74 6C       		.sleb128 -20
 8120 0d75 13       		.uleb128 0x13
 8121 0d76 736200   		.ascii	"sb\000"
 8122 0d79 01       		.byte	0x1
 8123 0d7a BE01     		.2byte	0x1be
 8124 0d7c D9000000 		.4byte	0xd9
 8125 0d80 02       		.uleb128 0x2
 8126 0d81 91       		.byte	0x91
 8127 0d82 68       		.sleb128 -24
 8128 0d83 10       		.uleb128 0x10
 8129 0d84 26000000 		.4byte	.LBB11
 8130 0d88 10000000 		.4byte	.LBE11-.LBB11
 8131 0d8c 9E0D0000 		.4byte	0xd9e
 8132 0d90 13       		.uleb128 0x13
 8133 0d91 7400     		.ascii	"t\000"
 8134 0d93 01       		.byte	0x1
 8135 0d94 A001     		.2byte	0x1a0
 8136 0d96 C3000000 		.4byte	0xc3
 8137 0d9a 02       		.uleb128 0x2
 8138 0d9b 91       		.byte	0x91
 8139 0d9c 66       		.sleb128 -26
 8140 0d9d 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 165


 8141 0d9e 10       		.uleb128 0x10
 8142 0d9f 36000000 		.4byte	.LBB12
 8143 0da3 0C000000 		.4byte	.LBE12-.LBB12
 8144 0da7 B90D0000 		.4byte	0xdb9
 8145 0dab 13       		.uleb128 0x13
 8146 0dac 7400     		.ascii	"t\000"
 8147 0dae 01       		.byte	0x1
 8148 0daf A001     		.2byte	0x1a0
 8149 0db1 C3000000 		.4byte	0xc3
 8150 0db5 02       		.uleb128 0x2
 8151 0db6 91       		.byte	0x91
 8152 0db7 64       		.sleb128 -28
 8153 0db8 00       		.byte	0
 8154 0db9 10       		.uleb128 0x10
 8155 0dba 4E000000 		.4byte	.LBB13
 8156 0dbe 14000000 		.4byte	.LBE13-.LBB13
 8157 0dc2 D40D0000 		.4byte	0xdd4
 8158 0dc6 13       		.uleb128 0x13
 8159 0dc7 7400     		.ascii	"t\000"
 8160 0dc9 01       		.byte	0x1
 8161 0dca A301     		.2byte	0x1a3
 8162 0dcc C3000000 		.4byte	0xc3
 8163 0dd0 02       		.uleb128 0x2
 8164 0dd1 91       		.byte	0x91
 8165 0dd2 62       		.sleb128 -30
 8166 0dd3 00       		.byte	0
 8167 0dd4 10       		.uleb128 0x10
 8168 0dd5 62000000 		.4byte	.LBB14
 8169 0dd9 10000000 		.4byte	.LBE14-.LBB14
 8170 0ddd EF0D0000 		.4byte	0xdef
 8171 0de1 13       		.uleb128 0x13
 8172 0de2 7400     		.ascii	"t\000"
 8173 0de4 01       		.byte	0x1
 8174 0de5 A301     		.2byte	0x1a3
 8175 0de7 C3000000 		.4byte	0xc3
 8176 0deb 02       		.uleb128 0x2
 8177 0dec 91       		.byte	0x91
 8178 0ded 60       		.sleb128 -32
 8179 0dee 00       		.byte	0
 8180 0def 10       		.uleb128 0x10
 8181 0df0 7E000000 		.4byte	.LBB15
 8182 0df4 10000000 		.4byte	.LBE15-.LBB15
 8183 0df8 0A0E0000 		.4byte	0xe0a
 8184 0dfc 13       		.uleb128 0x13
 8185 0dfd 7400     		.ascii	"t\000"
 8186 0dff 01       		.byte	0x1
 8187 0e00 A601     		.2byte	0x1a6
 8188 0e02 C3000000 		.4byte	0xc3
 8189 0e06 02       		.uleb128 0x2
 8190 0e07 91       		.byte	0x91
 8191 0e08 5E       		.sleb128 -34
 8192 0e09 00       		.byte	0
 8193 0e0a 10       		.uleb128 0x10
 8194 0e0b 8E000000 		.4byte	.LBB16
 8195 0e0f 0C000000 		.4byte	.LBE16-.LBB16
 8196 0e13 250E0000 		.4byte	0xe25
 8197 0e17 13       		.uleb128 0x13
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 166


 8198 0e18 7400     		.ascii	"t\000"
 8199 0e1a 01       		.byte	0x1
 8200 0e1b A601     		.2byte	0x1a6
 8201 0e1d C3000000 		.4byte	0xc3
 8202 0e21 02       		.uleb128 0x2
 8203 0e22 91       		.byte	0x91
 8204 0e23 5C       		.sleb128 -36
 8205 0e24 00       		.byte	0
 8206 0e25 10       		.uleb128 0x10
 8207 0e26 D8010000 		.4byte	.LBB17
 8208 0e2a 0C000000 		.4byte	.LBE17-.LBB17
 8209 0e2e 400E0000 		.4byte	0xe40
 8210 0e32 13       		.uleb128 0x13
 8211 0e33 7400     		.ascii	"t\000"
 8212 0e35 01       		.byte	0x1
 8213 0e36 D201     		.2byte	0x1d2
 8214 0e38 C3000000 		.4byte	0xc3
 8215 0e3c 02       		.uleb128 0x2
 8216 0e3d 91       		.byte	0x91
 8217 0e3e 4E       		.sleb128 -50
 8218 0e3f 00       		.byte	0
 8219 0e40 11       		.uleb128 0x11
 8220 0e41 92020000 		.4byte	.LBB18
 8221 0e45 0C000000 		.4byte	.LBE18-.LBB18
 8222 0e49 13       		.uleb128 0x13
 8223 0e4a 7400     		.ascii	"t\000"
 8224 0e4c 01       		.byte	0x1
 8225 0e4d E301     		.2byte	0x1e3
 8226 0e4f C3000000 		.4byte	0xc3
 8227 0e53 02       		.uleb128 0x2
 8228 0e54 91       		.byte	0x91
 8229 0e55 4C       		.sleb128 -52
 8230 0e56 00       		.byte	0
 8231 0e57 00       		.byte	0
 8232 0e58 14       		.uleb128 0x14
 8233 0e59 8E010000 		.4byte	.LASF93
 8234 0e5d 01       		.byte	0x1
 8235 0e5e F001     		.2byte	0x1f0
 8236 0e60 00000000 		.4byte	.LFB87
 8237 0e64 D8000000 		.4byte	.LFE87-.LFB87
 8238 0e68 01       		.uleb128 0x1
 8239 0e69 9C       		.byte	0x9c
 8240 0e6a 4E0F0000 		.4byte	0xf4e
 8241 0e6e 15       		.uleb128 0x15
 8242 0e6f B0010000 		.4byte	.LASF58
 8243 0e73 01       		.byte	0x1
 8244 0e74 F001     		.2byte	0x1f0
 8245 0e76 EA020000 		.4byte	0x2ea
 8246 0e7a 02       		.uleb128 0x2
 8247 0e7b 91       		.byte	0x91
 8248 0e7c 6C       		.sleb128 -20
 8249 0e7d 16       		.uleb128 0x16
 8250 0e7e 7800     		.ascii	"x\000"
 8251 0e80 01       		.byte	0x1
 8252 0e81 F001     		.2byte	0x1f0
 8253 0e83 C3000000 		.4byte	0xc3
 8254 0e87 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 167


 8255 0e88 91       		.byte	0x91
 8256 0e89 6A       		.sleb128 -22
 8257 0e8a 16       		.uleb128 0x16
 8258 0e8b 7900     		.ascii	"y\000"
 8259 0e8d 01       		.byte	0x1
 8260 0e8e F001     		.2byte	0x1f0
 8261 0e90 C3000000 		.4byte	0xc3
 8262 0e94 02       		.uleb128 0x2
 8263 0e95 91       		.byte	0x91
 8264 0e96 68       		.sleb128 -24
 8265 0e97 15       		.uleb128 0x15
 8266 0e98 D2060000 		.4byte	.LASF28
 8267 0e9c 01       		.byte	0x1
 8268 0e9d F101     		.2byte	0x1f1
 8269 0e9f 90010000 		.4byte	0x190
 8270 0ea3 02       		.uleb128 0x2
 8271 0ea4 91       		.byte	0x91
 8272 0ea5 64       		.sleb128 -28
 8273 0ea6 16       		.uleb128 0x16
 8274 0ea7 7700     		.ascii	"w\000"
 8275 0ea9 01       		.byte	0x1
 8276 0eaa F101     		.2byte	0x1f1
 8277 0eac C3000000 		.4byte	0xc3
 8278 0eb0 02       		.uleb128 0x2
 8279 0eb1 91       		.byte	0x91
 8280 0eb2 00       		.sleb128 0
 8281 0eb3 16       		.uleb128 0x16
 8282 0eb4 6800     		.ascii	"h\000"
 8283 0eb6 01       		.byte	0x1
 8284 0eb7 F101     		.2byte	0x1f1
 8285 0eb9 C3000000 		.4byte	0xc3
 8286 0ebd 02       		.uleb128 0x2
 8287 0ebe 91       		.byte	0x91
 8288 0ebf 04       		.sleb128 4
 8289 0ec0 15       		.uleb128 0x15
 8290 0ec1 7F010000 		.4byte	.LASF59
 8291 0ec5 01       		.byte	0x1
 8292 0ec6 F101     		.2byte	0x1f1
 8293 0ec8 CE000000 		.4byte	0xce
 8294 0ecc 02       		.uleb128 0x2
 8295 0ecd 91       		.byte	0x91
 8296 0ece 08       		.sleb128 8
 8297 0ecf 16       		.uleb128 0x16
 8298 0ed0 626700   		.ascii	"bg\000"
 8299 0ed3 01       		.byte	0x1
 8300 0ed4 F101     		.2byte	0x1f1
 8301 0ed6 CE000000 		.4byte	0xce
 8302 0eda 02       		.uleb128 0x2
 8303 0edb 91       		.byte	0x91
 8304 0edc 0C       		.sleb128 12
 8305 0edd 12       		.uleb128 0x12
 8306 0ede 06060000 		.4byte	.LASF94
 8307 0ee2 01       		.byte	0x1
 8308 0ee3 F701     		.2byte	0x1f7
 8309 0ee5 C3000000 		.4byte	0xc3
 8310 0ee9 02       		.uleb128 0x2
 8311 0eea 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 168


 8312 0eeb 70       		.sleb128 -16
 8313 0eec 12       		.uleb128 0x12
 8314 0eed 44020000 		.4byte	.LASF95
 8315 0ef1 01       		.byte	0x1
 8316 0ef2 F801     		.2byte	0x1f8
 8317 0ef4 B8000000 		.4byte	0xb8
 8318 0ef8 02       		.uleb128 0x2
 8319 0ef9 91       		.byte	0x91
 8320 0efa 77       		.sleb128 -9
 8321 0efb 17       		.uleb128 0x17
 8322 0efc EA060000 		.4byte	.LASF96
 8323 0f00 01       		.byte	0x1
 8324 0f01 F901     		.2byte	0x1f9
 8325 0f03 9F000000 		.4byte	0x9f
 8326 0f07 0D0F0000 		.4byte	0xf0d
 8327 0f0b 18       		.uleb128 0x18
 8328 0f0c 00       		.byte	0
 8329 0f0d 17       		.uleb128 0x17
 8330 0f0e CA010000 		.4byte	.LASF97
 8331 0f12 01       		.byte	0x1
 8332 0f13 0102     		.2byte	0x201
 8333 0f15 9F000000 		.4byte	0x9f
 8334 0f19 1F0F0000 		.4byte	0xf1f
 8335 0f1d 18       		.uleb128 0x18
 8336 0f1e 00       		.byte	0
 8337 0f1f 11       		.uleb128 0x11
 8338 0f20 2A000000 		.4byte	.LBB19
 8339 0f24 A2000000 		.4byte	.LBE19-.LBB19
 8340 0f28 13       		.uleb128 0x13
 8341 0f29 6A00     		.ascii	"j\000"
 8342 0f2b 01       		.byte	0x1
 8343 0f2c FA01     		.2byte	0x1fa
 8344 0f2e C3000000 		.4byte	0xc3
 8345 0f32 02       		.uleb128 0x2
 8346 0f33 91       		.byte	0x91
 8347 0f34 74       		.sleb128 -12
 8348 0f35 11       		.uleb128 0x11
 8349 0f36 30000000 		.4byte	.LBB20
 8350 0f3a 78000000 		.4byte	.LBE20-.LBB20
 8351 0f3e 13       		.uleb128 0x13
 8352 0f3f 6900     		.ascii	"i\000"
 8353 0f41 01       		.byte	0x1
 8354 0f42 FB01     		.2byte	0x1fb
 8355 0f44 C3000000 		.4byte	0xc3
 8356 0f48 02       		.uleb128 0x2
 8357 0f49 91       		.byte	0x91
 8358 0f4a 72       		.sleb128 -14
 8359 0f4b 00       		.byte	0
 8360 0f4c 00       		.byte	0
 8361 0f4d 00       		.byte	0
 8362 0f4e 14       		.uleb128 0x14
 8363 0f4f FF020000 		.4byte	.LASF98
 8364 0f53 01       		.byte	0x1
 8365 0f54 0A02     		.2byte	0x20a
 8366 0f56 00000000 		.4byte	.LFB88
 8367 0f5a 0C040000 		.4byte	.LFE88-.LFB88
 8368 0f5e 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 169


 8369 0f5f 9C       		.byte	0x9c
 8370 0f60 D6100000 		.4byte	0x10d6
 8371 0f64 15       		.uleb128 0x15
 8372 0f65 B0010000 		.4byte	.LASF58
 8373 0f69 01       		.byte	0x1
 8374 0f6a 0A02     		.2byte	0x20a
 8375 0f6c EA020000 		.4byte	0x2ea
 8376 0f70 02       		.uleb128 0x2
 8377 0f71 91       		.byte	0x91
 8378 0f72 4C       		.sleb128 -52
 8379 0f73 16       		.uleb128 0x16
 8380 0f74 7800     		.ascii	"x\000"
 8381 0f76 01       		.byte	0x1
 8382 0f77 0A02     		.2byte	0x20a
 8383 0f79 C3000000 		.4byte	0xc3
 8384 0f7d 02       		.uleb128 0x2
 8385 0f7e 91       		.byte	0x91
 8386 0f7f 4A       		.sleb128 -54
 8387 0f80 16       		.uleb128 0x16
 8388 0f81 7900     		.ascii	"y\000"
 8389 0f83 01       		.byte	0x1
 8390 0f84 0A02     		.2byte	0x20a
 8391 0f86 C3000000 		.4byte	0xc3
 8392 0f8a 02       		.uleb128 0x2
 8393 0f8b 91       		.byte	0x91
 8394 0f8c 48       		.sleb128 -56
 8395 0f8d 16       		.uleb128 0x16
 8396 0f8e 6300     		.ascii	"c\000"
 8397 0f90 01       		.byte	0x1
 8398 0f91 0A02     		.2byte	0x20a
 8399 0f93 42000000 		.4byte	0x42
 8400 0f97 02       		.uleb128 0x2
 8401 0f98 91       		.byte	0x91
 8402 0f99 47       		.sleb128 -57
 8403 0f9a 15       		.uleb128 0x15
 8404 0f9b 7F010000 		.4byte	.LASF59
 8405 0f9f 01       		.byte	0x1
 8406 0fa0 0B02     		.2byte	0x20b
 8407 0fa2 CE000000 		.4byte	0xce
 8408 0fa6 02       		.uleb128 0x2
 8409 0fa7 91       		.byte	0x91
 8410 0fa8 00       		.sleb128 0
 8411 0fa9 16       		.uleb128 0x16
 8412 0faa 626700   		.ascii	"bg\000"
 8413 0fad 01       		.byte	0x1
 8414 0fae 0B02     		.2byte	0x20b
 8415 0fb0 CE000000 		.4byte	0xce
 8416 0fb4 02       		.uleb128 0x2
 8417 0fb5 91       		.byte	0x91
 8418 0fb6 04       		.sleb128 4
 8419 0fb7 15       		.uleb128 0x15
 8420 0fb8 7A010000 		.4byte	.LASF99
 8421 0fbc 01       		.byte	0x1
 8422 0fbd 0B02     		.2byte	0x20b
 8423 0fbf B8000000 		.4byte	0xb8
 8424 0fc3 02       		.uleb128 0x2
 8425 0fc4 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 170


 8426 0fc5 08       		.sleb128 8
 8427 0fc6 10       		.uleb128 0x10
 8428 0fc7 82000000 		.4byte	.LBB21
 8429 0fcb 8C010000 		.4byte	.LBE21-.LBB21
 8430 0fcf 11100000 		.4byte	0x1011
 8431 0fd3 13       		.uleb128 0x13
 8432 0fd4 6900     		.ascii	"i\000"
 8433 0fd6 01       		.byte	0x1
 8434 0fd7 1802     		.2byte	0x218
 8435 0fd9 AD000000 		.4byte	0xad
 8436 0fdd 02       		.uleb128 0x2
 8437 0fde 91       		.byte	0x91
 8438 0fdf 6F       		.sleb128 -17
 8439 0fe0 11       		.uleb128 0x11
 8440 0fe1 8A000000 		.4byte	.LBB22
 8441 0fe5 6C010000 		.4byte	.LBE22-.LBB22
 8442 0fe9 12       		.uleb128 0x12
 8443 0fea 42060000 		.4byte	.LASF100
 8444 0fee 01       		.byte	0x1
 8445 0fef 1902     		.2byte	0x219
 8446 0ff1 B8000000 		.4byte	0xb8
 8447 0ff5 02       		.uleb128 0x2
 8448 0ff6 91       		.byte	0x91
 8449 0ff7 6E       		.sleb128 -18
 8450 0ff8 11       		.uleb128 0x11
 8451 0ff9 AE000000 		.4byte	.LBB23
 8452 0ffd 48010000 		.4byte	.LBE23-.LBB23
 8453 1001 13       		.uleb128 0x13
 8454 1002 6A00     		.ascii	"j\000"
 8455 1004 01       		.byte	0x1
 8456 1005 1A02     		.2byte	0x21a
 8457 1007 AD000000 		.4byte	0xad
 8458 100b 02       		.uleb128 0x2
 8459 100c 91       		.byte	0x91
 8460 100d 6D       		.sleb128 -19
 8461 100e 00       		.byte	0
 8462 100f 00       		.byte	0
 8463 1010 00       		.byte	0
 8464 1011 11       		.uleb128 0x11
 8465 1012 80020000 		.4byte	.LBB24
 8466 1016 84010000 		.4byte	.LBE24-.LBB24
 8467 101a 12       		.uleb128 0x12
 8468 101b 61030000 		.4byte	.LASF29
 8469 101f 01       		.byte	0x1
 8470 1020 3502     		.2byte	0x235
 8471 1022 96010000 		.4byte	0x196
 8472 1026 02       		.uleb128 0x2
 8473 1027 91       		.byte	0x91
 8474 1028 5C       		.sleb128 -36
 8475 1029 12       		.uleb128 0x12
 8476 102a D2060000 		.4byte	.LASF28
 8477 102e 01       		.byte	0x1
 8478 102f 3602     		.2byte	0x236
 8479 1031 90010000 		.4byte	0x190
 8480 1035 02       		.uleb128 0x2
 8481 1036 91       		.byte	0x91
 8482 1037 58       		.sleb128 -40
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 171


 8483 1038 13       		.uleb128 0x13
 8484 1039 626F00   		.ascii	"bo\000"
 8485 103c 01       		.byte	0x1
 8486 103d 3802     		.2byte	0x238
 8487 103f CE000000 		.4byte	0xce
 8488 1043 02       		.uleb128 0x2
 8489 1044 91       		.byte	0x91
 8490 1045 6A       		.sleb128 -22
 8491 1046 13       		.uleb128 0x13
 8492 1047 7700     		.ascii	"w\000"
 8493 1049 01       		.byte	0x1
 8494 104a 3902     		.2byte	0x239
 8495 104c B8000000 		.4byte	0xb8
 8496 1050 02       		.uleb128 0x2
 8497 1051 91       		.byte	0x91
 8498 1052 57       		.sleb128 -41
 8499 1053 13       		.uleb128 0x13
 8500 1054 6800     		.ascii	"h\000"
 8501 1056 01       		.byte	0x1
 8502 1057 3A02     		.2byte	0x23a
 8503 1059 B8000000 		.4byte	0xb8
 8504 105d 02       		.uleb128 0x2
 8505 105e 91       		.byte	0x91
 8506 105f 56       		.sleb128 -42
 8507 1060 13       		.uleb128 0x13
 8508 1061 786F00   		.ascii	"xo\000"
 8509 1064 01       		.byte	0x1
 8510 1065 3B02     		.2byte	0x23b
 8511 1067 AD000000 		.4byte	0xad
 8512 106b 02       		.uleb128 0x2
 8513 106c 91       		.byte	0x91
 8514 106d 55       		.sleb128 -43
 8515 106e 13       		.uleb128 0x13
 8516 106f 796F00   		.ascii	"yo\000"
 8517 1072 01       		.byte	0x1
 8518 1073 3C02     		.2byte	0x23c
 8519 1075 AD000000 		.4byte	0xad
 8520 1079 02       		.uleb128 0x2
 8521 107a 91       		.byte	0x91
 8522 107b 54       		.sleb128 -44
 8523 107c 13       		.uleb128 0x13
 8524 107d 787800   		.ascii	"xx\000"
 8525 1080 01       		.byte	0x1
 8526 1081 3D02     		.2byte	0x23d
 8527 1083 B8000000 		.4byte	0xb8
 8528 1087 02       		.uleb128 0x2
 8529 1088 91       		.byte	0x91
 8530 1089 69       		.sleb128 -23
 8531 108a 13       		.uleb128 0x13
 8532 108b 797900   		.ascii	"yy\000"
 8533 108e 01       		.byte	0x1
 8534 108f 3D02     		.2byte	0x23d
 8535 1091 B8000000 		.4byte	0xb8
 8536 1095 02       		.uleb128 0x2
 8537 1096 91       		.byte	0x91
 8538 1097 68       		.sleb128 -24
 8539 1098 12       		.uleb128 0x12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 172


 8540 1099 BC010000 		.4byte	.LASF101
 8541 109d 01       		.byte	0x1
 8542 109e 3D02     		.2byte	0x23d
 8543 10a0 B8000000 		.4byte	0xb8
 8544 10a4 02       		.uleb128 0x2
 8545 10a5 91       		.byte	0x91
 8546 10a6 67       		.sleb128 -25
 8547 10a7 13       		.uleb128 0x13
 8548 10a8 62697400 		.ascii	"bit\000"
 8549 10ac 01       		.byte	0x1
 8550 10ad 3D02     		.2byte	0x23d
 8551 10af B8000000 		.4byte	0xb8
 8552 10b3 02       		.uleb128 0x2
 8553 10b4 91       		.byte	0x91
 8554 10b5 66       		.sleb128 -26
 8555 10b6 12       		.uleb128 0x12
 8556 10b7 22000000 		.4byte	.LASF102
 8557 10bb 01       		.byte	0x1
 8558 10bc 3E02     		.2byte	0x23e
 8559 10be C3000000 		.4byte	0xc3
 8560 10c2 02       		.uleb128 0x2
 8561 10c3 91       		.byte	0x91
 8562 10c4 64       		.sleb128 -28
 8563 10c5 12       		.uleb128 0x12
 8564 10c6 F5060000 		.4byte	.LASF103
 8565 10ca 01       		.byte	0x1
 8566 10cb 3E02     		.2byte	0x23e
 8567 10cd C3000000 		.4byte	0xc3
 8568 10d1 02       		.uleb128 0x2
 8569 10d2 91       		.byte	0x91
 8570 10d3 62       		.sleb128 -30
 8571 10d4 00       		.byte	0
 8572 10d5 00       		.byte	0
 8573 10d6 14       		.uleb128 0x14
 8574 10d7 DA030000 		.4byte	.LASF104
 8575 10db 01       		.byte	0x1
 8576 10dc 6E02     		.2byte	0x26e
 8577 10de 00000000 		.4byte	.LFB89
 8578 10e2 F8000000 		.4byte	.LFE89-.LFB89
 8579 10e6 01       		.uleb128 0x1
 8580 10e7 9C       		.byte	0x9c
 8581 10e8 33110000 		.4byte	0x1133
 8582 10ec 15       		.uleb128 0x15
 8583 10ed B0010000 		.4byte	.LASF58
 8584 10f1 01       		.byte	0x1
 8585 10f2 6E02     		.2byte	0x26e
 8586 10f4 EA020000 		.4byte	0x2ea
 8587 10f8 02       		.uleb128 0x2
 8588 10f9 91       		.byte	0x91
 8589 10fa 6C       		.sleb128 -20
 8590 10fb 15       		.uleb128 0x15
 8591 10fc 18000000 		.4byte	.LASF105
 8592 1100 01       		.byte	0x1
 8593 1101 6E02     		.2byte	0x26e
 8594 1103 C3000000 		.4byte	0xc3
 8595 1107 02       		.uleb128 0x2
 8596 1108 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 173


 8597 1109 6A       		.sleb128 -22
 8598 110a 11       		.uleb128 0x11
 8599 110b 50000000 		.4byte	.LBB25
 8600 110f A0000000 		.4byte	.LBE25-.LBB25
 8601 1113 12       		.uleb128 0x12
 8602 1114 0B030000 		.4byte	.LASF106
 8603 1118 01       		.byte	0x1
 8604 1119 7502     		.2byte	0x275
 8605 111b C3000000 		.4byte	0xc3
 8606 111f 02       		.uleb128 0x2
 8607 1120 91       		.byte	0x91
 8608 1121 76       		.sleb128 -10
 8609 1122 12       		.uleb128 0x12
 8610 1123 8A040000 		.4byte	.LASF107
 8611 1127 01       		.byte	0x1
 8612 1128 7F02     		.2byte	0x27f
 8613 112a CE000000 		.4byte	0xce
 8614 112e 02       		.uleb128 0x2
 8615 112f 91       		.byte	0x91
 8616 1130 74       		.sleb128 -12
 8617 1131 00       		.byte	0
 8618 1132 00       		.byte	0
 8619 1133 14       		.uleb128 0x14
 8620 1134 85010000 		.4byte	.LASF108
 8621 1138 01       		.byte	0x1
 8622 1139 8B02     		.2byte	0x28b
 8623 113b 00000000 		.4byte	.LFB90
 8624 113f 9A010000 		.4byte	.LFE90-.LFB90
 8625 1143 01       		.uleb128 0x1
 8626 1144 9C       		.byte	0x9c
 8627 1145 CA110000 		.4byte	0x11ca
 8628 1149 15       		.uleb128 0x15
 8629 114a B0010000 		.4byte	.LASF58
 8630 114e 01       		.byte	0x1
 8631 114f 8B02     		.2byte	0x28b
 8632 1151 EA020000 		.4byte	0x2ea
 8633 1155 02       		.uleb128 0x2
 8634 1156 91       		.byte	0x91
 8635 1157 5C       		.sleb128 -36
 8636 1158 16       		.uleb128 0x16
 8637 1159 6300     		.ascii	"c\000"
 8638 115b 01       		.byte	0x1
 8639 115c 8B02     		.2byte	0x28b
 8640 115e B8000000 		.4byte	0xb8
 8641 1162 02       		.uleb128 0x2
 8642 1163 91       		.byte	0x91
 8643 1164 5B       		.sleb128 -37
 8644 1165 11       		.uleb128 0x11
 8645 1166 D4000000 		.4byte	.LBB26
 8646 116a BE000000 		.4byte	.LBE26-.LBB26
 8647 116e 12       		.uleb128 0x12
 8648 116f B6010000 		.4byte	.LASF30
 8649 1173 01       		.byte	0x1
 8650 1174 A202     		.2byte	0x2a2
 8651 1176 B8000000 		.4byte	0xb8
 8652 117a 02       		.uleb128 0x2
 8653 117b 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 174


 8654 117c 6F       		.sleb128 -17
 8655 117d 11       		.uleb128 0x11
 8656 117e F2000000 		.4byte	.LBB27
 8657 1182 A0000000 		.4byte	.LBE27-.LBB27
 8658 1186 12       		.uleb128 0x12
 8659 1187 61030000 		.4byte	.LASF29
 8660 118b 01       		.byte	0x1
 8661 118c A402     		.2byte	0x2a4
 8662 118e 96010000 		.4byte	0x196
 8663 1192 02       		.uleb128 0x2
 8664 1193 91       		.byte	0x91
 8665 1194 68       		.sleb128 -24
 8666 1195 13       		.uleb128 0x13
 8667 1196 7700     		.ascii	"w\000"
 8668 1198 01       		.byte	0x1
 8669 1199 A602     		.2byte	0x2a6
 8670 119b B8000000 		.4byte	0xb8
 8671 119f 02       		.uleb128 0x2
 8672 11a0 91       		.byte	0x91
 8673 11a1 67       		.sleb128 -25
 8674 11a2 13       		.uleb128 0x13
 8675 11a3 6800     		.ascii	"h\000"
 8676 11a5 01       		.byte	0x1
 8677 11a6 A702     		.2byte	0x2a7
 8678 11a8 B8000000 		.4byte	0xb8
 8679 11ac 02       		.uleb128 0x2
 8680 11ad 91       		.byte	0x91
 8681 11ae 66       		.sleb128 -26
 8682 11af 11       		.uleb128 0x11
 8683 11b0 1E010000 		.4byte	.LBB28
 8684 11b4 56000000 		.4byte	.LBE28-.LBB28
 8685 11b8 13       		.uleb128 0x13
 8686 11b9 786F00   		.ascii	"xo\000"
 8687 11bc 01       		.byte	0x1
 8688 11bd A902     		.2byte	0x2a9
 8689 11bf C3000000 		.4byte	0xc3
 8690 11c3 02       		.uleb128 0x2
 8691 11c4 91       		.byte	0x91
 8692 11c5 64       		.sleb128 -28
 8693 11c6 00       		.byte	0
 8694 11c7 00       		.byte	0
 8695 11c8 00       		.byte	0
 8696 11c9 00       		.byte	0
 8697 11ca 19       		.uleb128 0x19
 8698 11cb EF040000 		.4byte	.LASF109
 8699 11cf 01       		.byte	0x1
 8700 11d0 B902     		.2byte	0x2b9
 8701 11d2 00000000 		.4byte	.LFB91
 8702 11d6 26000000 		.4byte	.LFE91-.LFB91
 8703 11da 01       		.uleb128 0x1
 8704 11db 9C       		.byte	0x9c
 8705 11dc 0A120000 		.4byte	0x120a
 8706 11e0 15       		.uleb128 0x15
 8707 11e1 B0010000 		.4byte	.LASF58
 8708 11e5 01       		.byte	0x1
 8709 11e6 B902     		.2byte	0x2b9
 8710 11e8 EA020000 		.4byte	0x2ea
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 175


 8711 11ec 02       		.uleb128 0x2
 8712 11ed 91       		.byte	0x91
 8713 11ee 74       		.sleb128 -12
 8714 11ef 16       		.uleb128 0x16
 8715 11f0 7800     		.ascii	"x\000"
 8716 11f2 01       		.byte	0x1
 8717 11f3 B902     		.2byte	0x2b9
 8718 11f5 C3000000 		.4byte	0xc3
 8719 11f9 02       		.uleb128 0x2
 8720 11fa 91       		.byte	0x91
 8721 11fb 72       		.sleb128 -14
 8722 11fc 16       		.uleb128 0x16
 8723 11fd 7900     		.ascii	"y\000"
 8724 11ff 01       		.byte	0x1
 8725 1200 B902     		.2byte	0x2b9
 8726 1202 C3000000 		.4byte	0xc3
 8727 1206 02       		.uleb128 0x2
 8728 1207 91       		.byte	0x91
 8729 1208 70       		.sleb128 -16
 8730 1209 00       		.byte	0
 8731 120a 1A       		.uleb128 0x1a
 8732 120b D2000000 		.4byte	.LASF110
 8733 120f 01       		.byte	0x1
 8734 1210 BE02     		.2byte	0x2be
 8735 1212 C3000000 		.4byte	0xc3
 8736 1216 00000000 		.4byte	.LFB92
 8737 121a 18000000 		.4byte	.LFE92-.LFB92
 8738 121e 01       		.uleb128 0x1
 8739 121f 9C       		.byte	0x9c
 8740 1220 34120000 		.4byte	0x1234
 8741 1224 15       		.uleb128 0x15
 8742 1225 B0010000 		.4byte	.LASF58
 8743 1229 01       		.byte	0x1
 8744 122a BE02     		.2byte	0x2be
 8745 122c EA020000 		.4byte	0x2ea
 8746 1230 02       		.uleb128 0x2
 8747 1231 91       		.byte	0x91
 8748 1232 74       		.sleb128 -12
 8749 1233 00       		.byte	0
 8750 1234 1A       		.uleb128 0x1a
 8751 1235 E0000000 		.4byte	.LASF111
 8752 1239 01       		.byte	0x1
 8753 123a C302     		.2byte	0x2c3
 8754 123c C3000000 		.4byte	0xc3
 8755 1240 00000000 		.4byte	.LFB93
 8756 1244 18000000 		.4byte	.LFE93-.LFB93
 8757 1248 01       		.uleb128 0x1
 8758 1249 9C       		.byte	0x9c
 8759 124a 5E120000 		.4byte	0x125e
 8760 124e 15       		.uleb128 0x15
 8761 124f B0010000 		.4byte	.LASF58
 8762 1253 01       		.byte	0x1
 8763 1254 C302     		.2byte	0x2c3
 8764 1256 EA020000 		.4byte	0x2ea
 8765 125a 02       		.uleb128 0x2
 8766 125b 91       		.byte	0x91
 8767 125c 74       		.sleb128 -12
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 176


 8768 125d 00       		.byte	0
 8769 125e 19       		.uleb128 0x19
 8770 125f E6020000 		.4byte	.LASF112
 8771 1263 01       		.byte	0x1
 8772 1264 C802     		.2byte	0x2c8
 8773 1266 00000000 		.4byte	.LFB94
 8774 126a 28000000 		.4byte	.LFE94-.LFB94
 8775 126e 01       		.uleb128 0x1
 8776 126f 9C       		.byte	0x9c
 8777 1270 91120000 		.4byte	0x1291
 8778 1274 15       		.uleb128 0x15
 8779 1275 B0010000 		.4byte	.LASF58
 8780 1279 01       		.byte	0x1
 8781 127a C802     		.2byte	0x2c8
 8782 127c EA020000 		.4byte	0x2ea
 8783 1280 02       		.uleb128 0x2
 8784 1281 91       		.byte	0x91
 8785 1282 74       		.sleb128 -12
 8786 1283 16       		.uleb128 0x16
 8787 1284 7300     		.ascii	"s\000"
 8788 1286 01       		.byte	0x1
 8789 1287 C802     		.2byte	0x2c8
 8790 1289 B8000000 		.4byte	0xb8
 8791 128d 02       		.uleb128 0x2
 8792 128e 91       		.byte	0x91
 8793 128f 73       		.sleb128 -13
 8794 1290 00       		.byte	0
 8795 1291 19       		.uleb128 0x19
 8796 1292 B4030000 		.4byte	.LASF113
 8797 1296 01       		.byte	0x1
 8798 1297 CC02     		.2byte	0x2cc
 8799 1299 00000000 		.4byte	.LFB95
 8800 129d 26000000 		.4byte	.LFE95-.LFB95
 8801 12a1 01       		.uleb128 0x1
 8802 12a2 9C       		.byte	0x9c
 8803 12a3 D1120000 		.4byte	0x12d1
 8804 12a7 15       		.uleb128 0x15
 8805 12a8 B0010000 		.4byte	.LASF58
 8806 12ac 01       		.byte	0x1
 8807 12ad CC02     		.2byte	0x2cc
 8808 12af EA020000 		.4byte	0x2ea
 8809 12b3 02       		.uleb128 0x2
 8810 12b4 91       		.byte	0x91
 8811 12b5 74       		.sleb128 -12
 8812 12b6 16       		.uleb128 0x16
 8813 12b7 6300     		.ascii	"c\000"
 8814 12b9 01       		.byte	0x1
 8815 12ba CC02     		.2byte	0x2cc
 8816 12bc CE000000 		.4byte	0xce
 8817 12c0 02       		.uleb128 0x2
 8818 12c1 91       		.byte	0x91
 8819 12c2 72       		.sleb128 -14
 8820 12c3 16       		.uleb128 0x16
 8821 12c4 6200     		.ascii	"b\000"
 8822 12c6 01       		.byte	0x1
 8823 12c7 CC02     		.2byte	0x2cc
 8824 12c9 CE000000 		.4byte	0xce
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 177


 8825 12cd 02       		.uleb128 0x2
 8826 12ce 91       		.byte	0x91
 8827 12cf 70       		.sleb128 -16
 8828 12d0 00       		.byte	0
 8829 12d1 19       		.uleb128 0x19
 8830 12d2 12070000 		.4byte	.LASF114
 8831 12d6 01       		.byte	0x1
 8832 12d7 D102     		.2byte	0x2d1
 8833 12d9 00000000 		.4byte	.LFB96
 8834 12dd 1E000000 		.4byte	.LFE96-.LFB96
 8835 12e1 01       		.uleb128 0x1
 8836 12e2 9C       		.byte	0x9c
 8837 12e3 04130000 		.4byte	0x1304
 8838 12e7 15       		.uleb128 0x15
 8839 12e8 B0010000 		.4byte	.LASF58
 8840 12ec 01       		.byte	0x1
 8841 12ed D102     		.2byte	0x2d1
 8842 12ef EA020000 		.4byte	0x2ea
 8843 12f3 02       		.uleb128 0x2
 8844 12f4 91       		.byte	0x91
 8845 12f5 74       		.sleb128 -12
 8846 12f6 16       		.uleb128 0x16
 8847 12f7 7700     		.ascii	"w\000"
 8848 12f9 01       		.byte	0x1
 8849 12fa D102     		.2byte	0x2d1
 8850 12fc B8000000 		.4byte	0xb8
 8851 1300 02       		.uleb128 0x2
 8852 1301 91       		.byte	0x91
 8853 1302 73       		.sleb128 -13
 8854 1303 00       		.byte	0
 8855 1304 1A       		.uleb128 0x1a
 8856 1305 2E070000 		.4byte	.LASF115
 8857 1309 01       		.byte	0x1
 8858 130a D502     		.2byte	0x2d5
 8859 130c B8000000 		.4byte	0xb8
 8860 1310 00000000 		.4byte	.LFB97
 8861 1314 18000000 		.4byte	.LFE97-.LFB97
 8862 1318 01       		.uleb128 0x1
 8863 1319 9C       		.byte	0x9c
 8864 131a 2E130000 		.4byte	0x132e
 8865 131e 15       		.uleb128 0x15
 8866 131f B0010000 		.4byte	.LASF58
 8867 1323 01       		.byte	0x1
 8868 1324 D502     		.2byte	0x2d5
 8869 1326 EA020000 		.4byte	0x2ea
 8870 132a 02       		.uleb128 0x2
 8871 132b 91       		.byte	0x91
 8872 132c 74       		.sleb128 -12
 8873 132d 00       		.byte	0
 8874 132e 19       		.uleb128 0x19
 8875 132f 6A040000 		.4byte	.LASF116
 8876 1333 01       		.byte	0x1
 8877 1334 D902     		.2byte	0x2d9
 8878 1336 00000000 		.4byte	.LFB98
 8879 133a 76000000 		.4byte	.LFE98-.LFB98
 8880 133e 01       		.uleb128 0x1
 8881 133f 9C       		.byte	0x9c
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 178


 8882 1340 61130000 		.4byte	0x1361
 8883 1344 15       		.uleb128 0x15
 8884 1345 B0010000 		.4byte	.LASF58
 8885 1349 01       		.byte	0x1
 8886 134a D902     		.2byte	0x2d9
 8887 134c EA020000 		.4byte	0x2ea
 8888 1350 02       		.uleb128 0x2
 8889 1351 91       		.byte	0x91
 8890 1352 74       		.sleb128 -12
 8891 1353 16       		.uleb128 0x16
 8892 1354 7800     		.ascii	"x\000"
 8893 1356 01       		.byte	0x1
 8894 1357 D902     		.2byte	0x2d9
 8895 1359 B8000000 		.4byte	0xb8
 8896 135d 02       		.uleb128 0x2
 8897 135e 91       		.byte	0x91
 8898 135f 73       		.sleb128 -13
 8899 1360 00       		.byte	0
 8900 1361 19       		.uleb128 0x19
 8901 1362 CC050000 		.4byte	.LASF117
 8902 1366 01       		.byte	0x1
 8903 1367 F002     		.2byte	0x2f0
 8904 1369 00000000 		.4byte	.LFB99
 8905 136d 1E000000 		.4byte	.LFE99-.LFB99
 8906 1371 01       		.uleb128 0x1
 8907 1372 9C       		.byte	0x9c
 8908 1373 94130000 		.4byte	0x1394
 8909 1377 15       		.uleb128 0x15
 8910 1378 B0010000 		.4byte	.LASF58
 8911 137c 01       		.byte	0x1
 8912 137d F002     		.2byte	0x2f0
 8913 137f EA020000 		.4byte	0x2ea
 8914 1383 02       		.uleb128 0x2
 8915 1384 91       		.byte	0x91
 8916 1385 74       		.sleb128 -12
 8917 1386 16       		.uleb128 0x16
 8918 1387 7800     		.ascii	"x\000"
 8919 1389 01       		.byte	0x1
 8920 138a F002     		.2byte	0x2f0
 8921 138c B8000000 		.4byte	0xb8
 8922 1390 02       		.uleb128 0x2
 8923 1391 91       		.byte	0x91
 8924 1392 73       		.sleb128 -13
 8925 1393 00       		.byte	0
 8926 1394 19       		.uleb128 0x19
 8927 1395 5E060000 		.4byte	.LASF118
 8928 1399 01       		.byte	0x1
 8929 139a F402     		.2byte	0x2f4
 8930 139c 00000000 		.4byte	.LFB100
 8931 13a0 DC000000 		.4byte	.LFE100-.LFB100
 8932 13a4 01       		.uleb128 0x1
 8933 13a5 9C       		.byte	0x9c
 8934 13a6 3B140000 		.4byte	0x143b
 8935 13aa 15       		.uleb128 0x15
 8936 13ab B0010000 		.4byte	.LASF58
 8937 13af 01       		.byte	0x1
 8938 13b0 F402     		.2byte	0x2f4
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 179


 8939 13b2 EA020000 		.4byte	0x2ea
 8940 13b6 02       		.uleb128 0x2
 8941 13b7 91       		.byte	0x91
 8942 13b8 64       		.sleb128 -28
 8943 13b9 16       		.uleb128 0x16
 8944 13ba 6600     		.ascii	"f\000"
 8945 13bc 01       		.byte	0x1
 8946 13bd F402     		.2byte	0x2f4
 8947 13bf 3B140000 		.4byte	0x143b
 8948 13c3 02       		.uleb128 0x2
 8949 13c4 91       		.byte	0x91
 8950 13c5 60       		.sleb128 -32
 8951 13c6 11       		.uleb128 0x11
 8952 13c7 2E000000 		.4byte	.LBB29
 8953 13cb 7C000000 		.4byte	.LBE29-.LBB29
 8954 13cf 12       		.uleb128 0x12
 8955 13d0 B6010000 		.4byte	.LASF30
 8956 13d4 01       		.byte	0x1
 8957 13d5 0603     		.2byte	0x306
 8958 13d7 B8000000 		.4byte	0xb8
 8959 13db 02       		.uleb128 0x2
 8960 13dc 91       		.byte	0x91
 8961 13dd 76       		.sleb128 -10
 8962 13de 12       		.uleb128 0x12
 8963 13df 91040000 		.4byte	.LASF31
 8964 13e3 01       		.byte	0x1
 8965 13e4 0703     		.2byte	0x307
 8966 13e6 B8000000 		.4byte	0xb8
 8967 13ea 02       		.uleb128 0x2
 8968 13eb 91       		.byte	0x91
 8969 13ec 75       		.sleb128 -11
 8970 13ed 11       		.uleb128 0x11
 8971 13ee 44000000 		.4byte	.LBB30
 8972 13f2 5A000000 		.4byte	.LBE30-.LBB30
 8973 13f6 13       		.uleb128 0x13
 8974 13f7 6900     		.ascii	"i\000"
 8975 13f9 01       		.byte	0x1
 8976 13fa 0803     		.2byte	0x308
 8977 13fc B8000000 		.4byte	0xb8
 8978 1400 02       		.uleb128 0x2
 8979 1401 91       		.byte	0x91
 8980 1402 77       		.sleb128 -9
 8981 1403 11       		.uleb128 0x11
 8982 1404 4A000000 		.4byte	.LBB31
 8983 1408 46000000 		.4byte	.LBE31-.LBB31
 8984 140c 12       		.uleb128 0x12
 8985 140d 61030000 		.4byte	.LASF29
 8986 1411 01       		.byte	0x1
 8987 1412 0A03     		.2byte	0x30a
 8988 1414 96010000 		.4byte	0x196
 8989 1418 02       		.uleb128 0x2
 8990 1419 91       		.byte	0x91
 8991 141a 70       		.sleb128 -16
 8992 141b 13       		.uleb128 0x13
 8993 141c 676800   		.ascii	"gh\000"
 8994 141f 01       		.byte	0x1
 8995 1420 0B03     		.2byte	0x30b
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 180


 8996 1422 B8000000 		.4byte	0xb8
 8997 1426 02       		.uleb128 0x2
 8998 1427 91       		.byte	0x91
 8999 1428 6F       		.sleb128 -17
 9000 1429 13       		.uleb128 0x13
 9001 142a 796F00   		.ascii	"yo\000"
 9002 142d 01       		.byte	0x1
 9003 142e 0C03     		.2byte	0x30c
 9004 1430 AD000000 		.4byte	0xad
 9005 1434 02       		.uleb128 0x2
 9006 1435 91       		.byte	0x91
 9007 1436 6E       		.sleb128 -18
 9008 1437 00       		.byte	0
 9009 1438 00       		.byte	0
 9010 1439 00       		.byte	0
 9011 143a 00       		.byte	0
 9012 143b 07       		.uleb128 0x7
 9013 143c 04       		.byte	0x4
 9014 143d 41140000 		.4byte	0x1441
 9015 1441 1B       		.uleb128 0x1b
 9016 1442 9C010000 		.4byte	0x19c
 9017 1446 19       		.uleb128 0x19
 9018 1447 4F070000 		.4byte	.LASF119
 9019 144b 01       		.byte	0x1
 9020 144c 3203     		.2byte	0x332
 9021 144e 00000000 		.4byte	.LFB101
 9022 1452 30030000 		.4byte	.LFE101-.LFB101
 9023 1456 01       		.uleb128 0x1
 9024 1457 9C       		.byte	0x9c
 9025 1458 C6150000 		.4byte	0x15c6
 9026 145c 15       		.uleb128 0x15
 9027 145d B0010000 		.4byte	.LASF58
 9028 1461 01       		.byte	0x1
 9029 1462 3203     		.2byte	0x332
 9030 1464 EA020000 		.4byte	0x2ea
 9031 1468 02       		.uleb128 0x2
 9032 1469 91       		.byte	0x91
 9033 146a 54       		.sleb128 -44
 9034 146b 16       		.uleb128 0x16
 9035 146c 6300     		.ascii	"c\000"
 9036 146e 01       		.byte	0x1
 9037 146f 3203     		.2byte	0x332
 9038 1471 B5010000 		.4byte	0x1b5
 9039 1475 02       		.uleb128 0x2
 9040 1476 91       		.byte	0x91
 9041 1477 53       		.sleb128 -45
 9042 1478 16       		.uleb128 0x16
 9043 1479 7800     		.ascii	"x\000"
 9044 147b 01       		.byte	0x1
 9045 147c 3203     		.2byte	0x332
 9046 147e C6150000 		.4byte	0x15c6
 9047 1482 02       		.uleb128 0x2
 9048 1483 91       		.byte	0x91
 9049 1484 4C       		.sleb128 -52
 9050 1485 16       		.uleb128 0x16
 9051 1486 7900     		.ascii	"y\000"
 9052 1488 01       		.byte	0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 181


 9053 1489 3203     		.2byte	0x332
 9054 148b C6150000 		.4byte	0x15c6
 9055 148f 02       		.uleb128 0x2
 9056 1490 91       		.byte	0x91
 9057 1491 48       		.sleb128 -56
 9058 1492 15       		.uleb128 0x15
 9059 1493 D3010000 		.4byte	.LASF120
 9060 1497 01       		.byte	0x1
 9061 1498 3303     		.2byte	0x333
 9062 149a C6150000 		.4byte	0x15c6
 9063 149e 02       		.uleb128 0x2
 9064 149f 91       		.byte	0x91
 9065 14a0 00       		.sleb128 0
 9066 14a1 15       		.uleb128 0x15
 9067 14a2 D8010000 		.4byte	.LASF121
 9068 14a6 01       		.byte	0x1
 9069 14a7 3303     		.2byte	0x333
 9070 14a9 C6150000 		.4byte	0x15c6
 9071 14ad 02       		.uleb128 0x2
 9072 14ae 91       		.byte	0x91
 9073 14af 04       		.sleb128 4
 9074 14b0 15       		.uleb128 0x15
 9075 14b1 3D070000 		.4byte	.LASF122
 9076 14b5 01       		.byte	0x1
 9077 14b6 3303     		.2byte	0x333
 9078 14b8 C6150000 		.4byte	0x15c6
 9079 14bc 02       		.uleb128 0x2
 9080 14bd 91       		.byte	0x91
 9081 14be 08       		.sleb128 8
 9082 14bf 15       		.uleb128 0x15
 9083 14c0 42070000 		.4byte	.LASF123
 9084 14c4 01       		.byte	0x1
 9085 14c5 3303     		.2byte	0x333
 9086 14c7 C6150000 		.4byte	0x15c6
 9087 14cb 02       		.uleb128 0x2
 9088 14cc 91       		.byte	0x91
 9089 14cd 0C       		.sleb128 12
 9090 14ce 10       		.uleb128 0x10
 9091 14cf 56000000 		.4byte	.LBB32
 9092 14d3 A8010000 		.4byte	.LBE32-.LBB32
 9093 14d7 9F150000 		.4byte	0x159f
 9094 14db 12       		.uleb128 0x12
 9095 14dc B6010000 		.4byte	.LASF30
 9096 14e0 01       		.byte	0x1
 9097 14e1 3B03     		.2byte	0x33b
 9098 14e3 B8000000 		.4byte	0xb8
 9099 14e7 02       		.uleb128 0x2
 9100 14e8 91       		.byte	0x91
 9101 14e9 77       		.sleb128 -9
 9102 14ea 12       		.uleb128 0x12
 9103 14eb 91040000 		.4byte	.LASF31
 9104 14ef 01       		.byte	0x1
 9105 14f0 3C03     		.2byte	0x33c
 9106 14f2 B8000000 		.4byte	0xb8
 9107 14f6 02       		.uleb128 0x2
 9108 14f7 91       		.byte	0x91
 9109 14f8 76       		.sleb128 -10
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 182


 9110 14f9 11       		.uleb128 0x11
 9111 14fa 82000000 		.4byte	.LBB33
 9112 14fe 7C010000 		.4byte	.LBE33-.LBB33
 9113 1502 12       		.uleb128 0x12
 9114 1503 61030000 		.4byte	.LASF29
 9115 1507 01       		.byte	0x1
 9116 1508 3E03     		.2byte	0x33e
 9117 150a 96010000 		.4byte	0x196
 9118 150e 02       		.uleb128 0x2
 9119 150f 91       		.byte	0x91
 9120 1510 70       		.sleb128 -16
 9121 1511 13       		.uleb128 0x13
 9122 1512 677700   		.ascii	"gw\000"
 9123 1515 01       		.byte	0x1
 9124 1516 4003     		.2byte	0x340
 9125 1518 B8000000 		.4byte	0xb8
 9126 151c 02       		.uleb128 0x2
 9127 151d 91       		.byte	0x91
 9128 151e 6F       		.sleb128 -17
 9129 151f 13       		.uleb128 0x13
 9130 1520 676800   		.ascii	"gh\000"
 9131 1523 01       		.byte	0x1
 9132 1524 4103     		.2byte	0x341
 9133 1526 B8000000 		.4byte	0xb8
 9134 152a 02       		.uleb128 0x2
 9135 152b 91       		.byte	0x91
 9136 152c 6E       		.sleb128 -18
 9137 152d 13       		.uleb128 0x13
 9138 152e 786100   		.ascii	"xa\000"
 9139 1531 01       		.byte	0x1
 9140 1532 4203     		.2byte	0x342
 9141 1534 B8000000 		.4byte	0xb8
 9142 1538 02       		.uleb128 0x2
 9143 1539 91       		.byte	0x91
 9144 153a 6D       		.sleb128 -19
 9145 153b 13       		.uleb128 0x13
 9146 153c 786F00   		.ascii	"xo\000"
 9147 153f 01       		.byte	0x1
 9148 1540 4303     		.2byte	0x343
 9149 1542 AD000000 		.4byte	0xad
 9150 1546 02       		.uleb128 0x2
 9151 1547 91       		.byte	0x91
 9152 1548 6C       		.sleb128 -20
 9153 1549 13       		.uleb128 0x13
 9154 154a 796F00   		.ascii	"yo\000"
 9155 154d 01       		.byte	0x1
 9156 154e 4403     		.2byte	0x344
 9157 1550 AD000000 		.4byte	0xad
 9158 1554 02       		.uleb128 0x2
 9159 1555 91       		.byte	0x91
 9160 1556 6B       		.sleb128 -21
 9161 1557 13       		.uleb128 0x13
 9162 1558 747300   		.ascii	"ts\000"
 9163 155b 01       		.byte	0x1
 9164 155c 4903     		.2byte	0x349
 9165 155e C3000000 		.4byte	0xc3
 9166 1562 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 183


 9167 1563 91       		.byte	0x91
 9168 1564 68       		.sleb128 -24
 9169 1565 13       		.uleb128 0x13
 9170 1566 783100   		.ascii	"x1\000"
 9171 1569 01       		.byte	0x1
 9172 156a 4A03     		.2byte	0x34a
 9173 156c C3000000 		.4byte	0xc3
 9174 1570 02       		.uleb128 0x2
 9175 1571 91       		.byte	0x91
 9176 1572 66       		.sleb128 -26
 9177 1573 13       		.uleb128 0x13
 9178 1574 793100   		.ascii	"y1\000"
 9179 1577 01       		.byte	0x1
 9180 1578 4B03     		.2byte	0x34b
 9181 157a C3000000 		.4byte	0xc3
 9182 157e 02       		.uleb128 0x2
 9183 157f 91       		.byte	0x91
 9184 1580 64       		.sleb128 -28
 9185 1581 13       		.uleb128 0x13
 9186 1582 783200   		.ascii	"x2\000"
 9187 1585 01       		.byte	0x1
 9188 1586 4C03     		.2byte	0x34c
 9189 1588 C3000000 		.4byte	0xc3
 9190 158c 02       		.uleb128 0x2
 9191 158d 91       		.byte	0x91
 9192 158e 62       		.sleb128 -30
 9193 158f 13       		.uleb128 0x13
 9194 1590 793200   		.ascii	"y2\000"
 9195 1593 01       		.byte	0x1
 9196 1594 4D03     		.2byte	0x34d
 9197 1596 C3000000 		.4byte	0xc3
 9198 159a 02       		.uleb128 0x2
 9199 159b 91       		.byte	0x91
 9200 159c 60       		.sleb128 -32
 9201 159d 00       		.byte	0
 9202 159e 00       		.byte	0
 9203 159f 11       		.uleb128 0x11
 9204 15a0 2E020000 		.4byte	.LBB34
 9205 15a4 F8000000 		.4byte	.LBE34-.LBB34
 9206 15a8 13       		.uleb128 0x13
 9207 15a9 783200   		.ascii	"x2\000"
 9208 15ac 01       		.byte	0x1
 9209 15ad 6103     		.2byte	0x361
 9210 15af 9F000000 		.4byte	0x9f
 9211 15b3 02       		.uleb128 0x2
 9212 15b4 91       		.byte	0x91
 9213 15b5 5C       		.sleb128 -36
 9214 15b6 13       		.uleb128 0x13
 9215 15b7 793200   		.ascii	"y2\000"
 9216 15ba 01       		.byte	0x1
 9217 15bb 6203     		.2byte	0x362
 9218 15bd 9F000000 		.4byte	0x9f
 9219 15c1 02       		.uleb128 0x2
 9220 15c2 91       		.byte	0x91
 9221 15c3 58       		.sleb128 -40
 9222 15c4 00       		.byte	0
 9223 15c5 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 184


 9224 15c6 07       		.uleb128 0x7
 9225 15c7 04       		.byte	0x4
 9226 15c8 C3000000 		.4byte	0xc3
 9227 15cc 14       		.uleb128 0x14
 9228 15cd F0050000 		.4byte	.LASF124
 9229 15d1 01       		.byte	0x1
 9230 15d2 6E03     		.2byte	0x36e
 9231 15d4 00000000 		.4byte	.LFB102
 9232 15d8 E8000000 		.4byte	.LFE102-.LFB102
 9233 15dc 01       		.uleb128 0x1
 9234 15dd 9C       		.byte	0x9c
 9235 15de 9A160000 		.4byte	0x169a
 9236 15e2 15       		.uleb128 0x15
 9237 15e3 B0010000 		.4byte	.LASF58
 9238 15e7 01       		.byte	0x1
 9239 15e8 6E03     		.2byte	0x36e
 9240 15ea EA020000 		.4byte	0x2ea
 9241 15ee 02       		.uleb128 0x2
 9242 15ef 91       		.byte	0x91
 9243 15f0 64       		.sleb128 -28
 9244 15f1 16       		.uleb128 0x16
 9245 15f2 73747200 		.ascii	"str\000"
 9246 15f6 01       		.byte	0x1
 9247 15f7 6E03     		.2byte	0x36e
 9248 15f9 CA010000 		.4byte	0x1ca
 9249 15fd 02       		.uleb128 0x2
 9250 15fe 91       		.byte	0x91
 9251 15ff 60       		.sleb128 -32
 9252 1600 16       		.uleb128 0x16
 9253 1601 7800     		.ascii	"x\000"
 9254 1603 01       		.byte	0x1
 9255 1604 6E03     		.2byte	0x36e
 9256 1606 C3000000 		.4byte	0xc3
 9257 160a 02       		.uleb128 0x2
 9258 160b 91       		.byte	0x91
 9259 160c 5E       		.sleb128 -34
 9260 160d 16       		.uleb128 0x16
 9261 160e 7900     		.ascii	"y\000"
 9262 1610 01       		.byte	0x1
 9263 1611 6E03     		.2byte	0x36e
 9264 1613 C3000000 		.4byte	0xc3
 9265 1617 02       		.uleb128 0x2
 9266 1618 91       		.byte	0x91
 9267 1619 5C       		.sleb128 -36
 9268 161a 16       		.uleb128 0x16
 9269 161b 783100   		.ascii	"x1\000"
 9270 161e 01       		.byte	0x1
 9271 161f 6F03     		.2byte	0x36f
 9272 1621 C6150000 		.4byte	0x15c6
 9273 1625 02       		.uleb128 0x2
 9274 1626 91       		.byte	0x91
 9275 1627 00       		.sleb128 0
 9276 1628 16       		.uleb128 0x16
 9277 1629 793100   		.ascii	"y1\000"
 9278 162c 01       		.byte	0x1
 9279 162d 6F03     		.2byte	0x36f
 9280 162f C6150000 		.4byte	0x15c6
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 185


 9281 1633 02       		.uleb128 0x2
 9282 1634 91       		.byte	0x91
 9283 1635 04       		.sleb128 4
 9284 1636 16       		.uleb128 0x16
 9285 1637 7700     		.ascii	"w\000"
 9286 1639 01       		.byte	0x1
 9287 163a 6F03     		.2byte	0x36f
 9288 163c 9A160000 		.4byte	0x169a
 9289 1640 02       		.uleb128 0x2
 9290 1641 91       		.byte	0x91
 9291 1642 08       		.sleb128 8
 9292 1643 16       		.uleb128 0x16
 9293 1644 6800     		.ascii	"h\000"
 9294 1646 01       		.byte	0x1
 9295 1647 6F03     		.2byte	0x36f
 9296 1649 9A160000 		.4byte	0x169a
 9297 164d 02       		.uleb128 0x2
 9298 164e 91       		.byte	0x91
 9299 164f 0C       		.sleb128 12
 9300 1650 13       		.uleb128 0x13
 9301 1651 6300     		.ascii	"c\000"
 9302 1653 01       		.byte	0x1
 9303 1654 7003     		.2byte	0x370
 9304 1656 B8000000 		.4byte	0xb8
 9305 165a 02       		.uleb128 0x2
 9306 165b 91       		.byte	0x91
 9307 165c 77       		.sleb128 -9
 9308 165d 12       		.uleb128 0x12
 9309 165e D3010000 		.4byte	.LASF120
 9310 1662 01       		.byte	0x1
 9311 1663 7603     		.2byte	0x376
 9312 1665 C3000000 		.4byte	0xc3
 9313 1669 02       		.uleb128 0x2
 9314 166a 91       		.byte	0x91
 9315 166b 74       		.sleb128 -12
 9316 166c 12       		.uleb128 0x12
 9317 166d D8010000 		.4byte	.LASF121
 9318 1671 01       		.byte	0x1
 9319 1672 7603     		.2byte	0x376
 9320 1674 C3000000 		.4byte	0xc3
 9321 1678 02       		.uleb128 0x2
 9322 1679 91       		.byte	0x91
 9323 167a 72       		.sleb128 -14
 9324 167b 12       		.uleb128 0x12
 9325 167c 3D070000 		.4byte	.LASF122
 9326 1680 01       		.byte	0x1
 9327 1681 7603     		.2byte	0x376
 9328 1683 C3000000 		.4byte	0xc3
 9329 1687 02       		.uleb128 0x2
 9330 1688 91       		.byte	0x91
 9331 1689 70       		.sleb128 -16
 9332 168a 12       		.uleb128 0x12
 9333 168b 42070000 		.4byte	.LASF123
 9334 168f 01       		.byte	0x1
 9335 1690 7603     		.2byte	0x376
 9336 1692 C3000000 		.4byte	0xc3
 9337 1696 02       		.uleb128 0x2
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 186


 9338 1697 91       		.byte	0x91
 9339 1698 6E       		.sleb128 -18
 9340 1699 00       		.byte	0
 9341 169a 07       		.uleb128 0x7
 9342 169b 04       		.byte	0x4
 9343 169c CE000000 		.4byte	0xce
 9344 16a0 1A       		.uleb128 0x1a
 9345 16a1 3B000000 		.4byte	.LASF125
 9346 16a5 01       		.byte	0x1
 9347 16a6 8803     		.2byte	0x388
 9348 16a8 C3000000 		.4byte	0xc3
 9349 16ac 00000000 		.4byte	.LFB103
 9350 16b0 18000000 		.4byte	.LFE103-.LFB103
 9351 16b4 01       		.uleb128 0x1
 9352 16b5 9C       		.byte	0x9c
 9353 16b6 CA160000 		.4byte	0x16ca
 9354 16ba 15       		.uleb128 0x15
 9355 16bb B0010000 		.4byte	.LASF58
 9356 16bf 01       		.byte	0x1
 9357 16c0 8803     		.2byte	0x388
 9358 16c2 EA020000 		.4byte	0x2ea
 9359 16c6 02       		.uleb128 0x2
 9360 16c7 91       		.byte	0x91
 9361 16c8 74       		.sleb128 -12
 9362 16c9 00       		.byte	0
 9363 16ca 1A       		.uleb128 0x1a
 9364 16cb 77050000 		.4byte	.LASF126
 9365 16cf 01       		.byte	0x1
 9366 16d0 8C03     		.2byte	0x38c
 9367 16d2 C3000000 		.4byte	0xc3
 9368 16d6 00000000 		.4byte	.LFB104
 9369 16da 18000000 		.4byte	.LFE104-.LFB104
 9370 16de 01       		.uleb128 0x1
 9371 16df 9C       		.byte	0x9c
 9372 16e0 F4160000 		.4byte	0x16f4
 9373 16e4 15       		.uleb128 0x15
 9374 16e5 B0010000 		.4byte	.LASF58
 9375 16e9 01       		.byte	0x1
 9376 16ea 8C03     		.2byte	0x38c
 9377 16ec EA020000 		.4byte	0x2ea
 9378 16f0 02       		.uleb128 0x2
 9379 16f1 91       		.byte	0x91
 9380 16f2 74       		.sleb128 -12
 9381 16f3 00       		.byte	0
 9382 16f4 19       		.uleb128 0x19
 9383 16f5 8E060000 		.4byte	.LASF127
 9384 16f9 01       		.byte	0x1
 9385 16fa 9003     		.2byte	0x390
 9386 16fc 00000000 		.4byte	.LFB105
 9387 1700 16000000 		.4byte	.LFE105-.LFB105
 9388 1704 01       		.uleb128 0x1
 9389 1705 9C       		.byte	0x9c
 9390 1706 27170000 		.4byte	0x1727
 9391 170a 15       		.uleb128 0x15
 9392 170b B0010000 		.4byte	.LASF58
 9393 170f 01       		.byte	0x1
 9394 1710 9003     		.2byte	0x390
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 187


 9395 1712 EA020000 		.4byte	0x2ea
 9396 1716 02       		.uleb128 0x2
 9397 1717 91       		.byte	0x91
 9398 1718 74       		.sleb128 -12
 9399 1719 16       		.uleb128 0x16
 9400 171a 6900     		.ascii	"i\000"
 9401 171c 01       		.byte	0x1
 9402 171d 9003     		.2byte	0x390
 9403 171f B8000000 		.4byte	0xb8
 9404 1723 02       		.uleb128 0x2
 9405 1724 91       		.byte	0x91
 9406 1725 73       		.sleb128 -13
 9407 1726 00       		.byte	0
 9408 1727 1C       		.uleb128 0x1c
 9409 1728 15010000 		.4byte	.LASF128
 9410 172c 01       		.byte	0x1
 9411 172d A403     		.2byte	0x3a4
 9412 172f 9F000000 		.4byte	0x9f
 9413 1733 00000000 		.4byte	.LFB106
 9414 1737 80000000 		.4byte	.LFE106-.LFB106
 9415 173b 01       		.uleb128 0x1
 9416 173c 9C       		.byte	0x9c
 9417 173d AE170000 		.4byte	0x17ae
 9418 1741 15       		.uleb128 0x15
 9419 1742 6A050000 		.4byte	.LASF129
 9420 1746 01       		.byte	0x1
 9421 1747 A403     		.2byte	0x3a4
 9422 1749 CA010000 		.4byte	0x1ca
 9423 174d 02       		.uleb128 0x2
 9424 174e 91       		.byte	0x91
 9425 174f 64       		.sleb128 -28
 9426 1750 15       		.uleb128 0x15
 9427 1751 72060000 		.4byte	.LASF130
 9428 1755 01       		.byte	0x1
 9429 1756 A403     		.2byte	0x3a4
 9430 1758 E4000000 		.4byte	0xe4
 9431 175c 02       		.uleb128 0x2
 9432 175d 91       		.byte	0x91
 9433 175e 60       		.sleb128 -32
 9434 175f 15       		.uleb128 0x15
 9435 1760 FA030000 		.4byte	.LASF131
 9436 1764 01       		.byte	0x1
 9437 1765 A403     		.2byte	0x3a4
 9438 1767 B8000000 		.4byte	0xb8
 9439 176b 02       		.uleb128 0x2
 9440 176c 91       		.byte	0x91
 9441 176d 5F       		.sleb128 -33
 9442 176e 11       		.uleb128 0x11
 9443 176f 0E000000 		.4byte	.LBB35
 9444 1773 62000000 		.4byte	.LBE35-.LBB35
 9445 1777 13       		.uleb128 0x13
 9446 1778 6900     		.ascii	"i\000"
 9447 177a 01       		.byte	0x1
 9448 177b A603     		.2byte	0x3a6
 9449 177d 9F000000 		.4byte	0x9f
 9450 1781 02       		.uleb128 0x2
 9451 1782 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 188


 9452 1783 74       		.sleb128 -12
 9453 1784 11       		.uleb128 0x11
 9454 1785 14000000 		.4byte	.LBB36
 9455 1789 4E000000 		.4byte	.LBE36-.LBB36
 9456 178d 12       		.uleb128 0x12
 9457 178e 47060000 		.4byte	.LASF132
 9458 1792 01       		.byte	0x1
 9459 1793 A803     		.2byte	0x3a8
 9460 1795 9F000000 		.4byte	0x9f
 9461 1799 02       		.uleb128 0x2
 9462 179a 91       		.byte	0x91
 9463 179b 70       		.sleb128 -16
 9464 179c 12       		.uleb128 0x12
 9465 179d 0E000000 		.4byte	.LASF133
 9466 17a1 01       		.byte	0x1
 9467 17a2 A903     		.2byte	0x3a9
 9468 17a4 9F000000 		.4byte	0x9f
 9469 17a8 02       		.uleb128 0x2
 9470 17a9 91       		.byte	0x91
 9471 17aa 6C       		.sleb128 -20
 9472 17ab 00       		.byte	0
 9473 17ac 00       		.byte	0
 9474 17ad 00       		.byte	0
 9475 17ae 1C       		.uleb128 0x1c
 9476 17af A7060000 		.4byte	.LASF134
 9477 17b3 01       		.byte	0x1
 9478 17b4 B103     		.2byte	0x3b1
 9479 17b6 9F000000 		.4byte	0x9f
 9480 17ba 00000000 		.4byte	.LFB107
 9481 17be 70010000 		.4byte	.LFE107-.LFB107
 9482 17c2 01       		.uleb128 0x1
 9483 17c3 9C       		.byte	0x9c
 9484 17c4 50180000 		.4byte	0x1850
 9485 17c8 15       		.uleb128 0x15
 9486 17c9 6A050000 		.4byte	.LASF129
 9487 17cd 01       		.byte	0x1
 9488 17ce B103     		.2byte	0x3b1
 9489 17d0 CA010000 		.4byte	0x1ca
 9490 17d4 02       		.uleb128 0x2
 9491 17d5 91       		.byte	0x91
 9492 17d6 54       		.sleb128 -44
 9493 17d7 15       		.uleb128 0x15
 9494 17d8 89060000 		.4byte	.LASF135
 9495 17dc 01       		.byte	0x1
 9496 17dd B103     		.2byte	0x3b1
 9497 17df A7010000 		.4byte	0x1a7
 9498 17e3 02       		.uleb128 0x2
 9499 17e4 91       		.byte	0x91
 9500 17e5 50       		.sleb128 -48
 9501 17e6 15       		.uleb128 0x15
 9502 17e7 31000000 		.4byte	.LASF136
 9503 17eb 01       		.byte	0x1
 9504 17ec B103     		.2byte	0x3b1
 9505 17ee B8000000 		.4byte	0xb8
 9506 17f2 02       		.uleb128 0x2
 9507 17f3 91       		.byte	0x91
 9508 17f4 4F       		.sleb128 -49
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 189


 9509 17f5 12       		.uleb128 0x12
 9510 17f6 52040000 		.4byte	.LASF137
 9511 17fa 01       		.byte	0x1
 9512 17fb B303     		.2byte	0x3b3
 9513 17fd 9F000000 		.4byte	0x9f
 9514 1801 02       		.uleb128 0x2
 9515 1802 91       		.byte	0x91
 9516 1803 5C       		.sleb128 -36
 9517 1804 12       		.uleb128 0x12
 9518 1805 82060000 		.4byte	.LASF138
 9519 1809 01       		.byte	0x1
 9520 180a B303     		.2byte	0x3b3
 9521 180c 9F000000 		.4byte	0x9f
 9522 1810 02       		.uleb128 0x2
 9523 1811 91       		.byte	0x91
 9524 1812 58       		.sleb128 -40
 9525 1813 12       		.uleb128 0x12
 9526 1814 1F050000 		.4byte	.LASF139
 9527 1818 01       		.byte	0x1
 9528 1819 B303     		.2byte	0x3b3
 9529 181b 9F000000 		.4byte	0x9f
 9530 181f 02       		.uleb128 0x2
 9531 1820 91       		.byte	0x91
 9532 1821 6C       		.sleb128 -20
 9533 1822 13       		.uleb128 0x13
 9534 1823 6E656700 		.ascii	"neg\000"
 9535 1827 01       		.byte	0x1
 9536 1828 B303     		.2byte	0x3b3
 9537 182a 9F000000 		.4byte	0x9f
 9538 182e 02       		.uleb128 0x2
 9539 182f 91       		.byte	0x91
 9540 1830 68       		.sleb128 -24
 9541 1831 12       		.uleb128 0x12
 9542 1832 DF020000 		.4byte	.LASF140
 9543 1836 01       		.byte	0x1
 9544 1837 B303     		.2byte	0x3b3
 9545 1839 A7010000 		.4byte	0x1a7
 9546 183d 02       		.uleb128 0x2
 9547 183e 91       		.byte	0x91
 9548 183f 64       		.sleb128 -28
 9549 1840 13       		.uleb128 0x13
 9550 1841 69647800 		.ascii	"idx\000"
 9551 1845 01       		.byte	0x1
 9552 1846 C203     		.2byte	0x3c2
 9553 1848 9F000000 		.4byte	0x9f
 9554 184c 02       		.uleb128 0x2
 9555 184d 91       		.byte	0x91
 9556 184e 60       		.sleb128 -32
 9557 184f 00       		.byte	0
 9558 1850 1C       		.uleb128 0x1c
 9559 1851 1D040000 		.4byte	.LASF141
 9560 1855 01       		.byte	0x1
 9561 1856 D903     		.2byte	0x3d9
 9562 1858 9F000000 		.4byte	0x9f
 9563 185c 00000000 		.4byte	.LFB108
 9564 1860 D0000000 		.4byte	.LFE108-.LFB108
 9565 1864 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 190


 9566 1865 9C       		.byte	0x9c
 9567 1866 C5180000 		.4byte	0x18c5
 9568 186a 15       		.uleb128 0x15
 9569 186b 6A050000 		.4byte	.LASF129
 9570 186f 01       		.byte	0x1
 9571 1870 D903     		.2byte	0x3d9
 9572 1872 CA010000 		.4byte	0x1ca
 9573 1876 02       		.uleb128 0x2
 9574 1877 91       		.byte	0x91
 9575 1878 5C       		.sleb128 -36
 9576 1879 15       		.uleb128 0x15
 9577 187a 89060000 		.4byte	.LASF135
 9578 187e 01       		.byte	0x1
 9579 187f D903     		.2byte	0x3d9
 9580 1881 A7010000 		.4byte	0x1a7
 9581 1885 02       		.uleb128 0x2
 9582 1886 91       		.byte	0x91
 9583 1887 58       		.sleb128 -40
 9584 1888 12       		.uleb128 0x12
 9585 1889 52040000 		.4byte	.LASF137
 9586 188d 01       		.byte	0x1
 9587 188e DB03     		.2byte	0x3db
 9588 1890 9F000000 		.4byte	0x9f
 9589 1894 02       		.uleb128 0x2
 9590 1895 91       		.byte	0x91
 9591 1896 64       		.sleb128 -28
 9592 1897 12       		.uleb128 0x12
 9593 1898 1F050000 		.4byte	.LASF139
 9594 189c 01       		.byte	0x1
 9595 189d DB03     		.2byte	0x3db
 9596 189f 9F000000 		.4byte	0x9f
 9597 18a3 02       		.uleb128 0x2
 9598 18a4 91       		.byte	0x91
 9599 18a5 6C       		.sleb128 -20
 9600 18a6 12       		.uleb128 0x12
 9601 18a7 DF020000 		.4byte	.LASF140
 9602 18ab 01       		.byte	0x1
 9603 18ac DC03     		.2byte	0x3dc
 9604 18ae A7010000 		.4byte	0x1a7
 9605 18b2 02       		.uleb128 0x2
 9606 18b3 91       		.byte	0x91
 9607 18b4 68       		.sleb128 -24
 9608 18b5 13       		.uleb128 0x13
 9609 18b6 69647800 		.ascii	"idx\000"
 9610 18ba 01       		.byte	0x1
 9611 18bb E903     		.2byte	0x3e9
 9612 18bd 9F000000 		.4byte	0x9f
 9613 18c1 02       		.uleb128 0x2
 9614 18c2 91       		.byte	0x91
 9615 18c3 60       		.sleb128 -32
 9616 18c4 00       		.byte	0
 9617 18c5 1C       		.uleb128 0x1c
 9618 18c6 7A030000 		.4byte	.LASF142
 9619 18ca 01       		.byte	0x1
 9620 18cb F103     		.2byte	0x3f1
 9621 18cd 9F000000 		.4byte	0x9f
 9622 18d1 00000000 		.4byte	.LFB109
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 191


 9623 18d5 90010000 		.4byte	.LFE109-.LFB109
 9624 18d9 01       		.uleb128 0x1
 9625 18da 9C       		.byte	0x9c
 9626 18db A9190000 		.4byte	0x19a9
 9627 18df 15       		.uleb128 0x15
 9628 18e0 6A050000 		.4byte	.LASF129
 9629 18e4 01       		.byte	0x1
 9630 18e5 F103     		.2byte	0x3f1
 9631 18e7 CA010000 		.4byte	0x1ca
 9632 18eb 02       		.uleb128 0x2
 9633 18ec 91       		.byte	0x91
 9634 18ed 4C       		.sleb128 -52
 9635 18ee 15       		.uleb128 0x15
 9636 18ef 71050000 		.4byte	.LASF143
 9637 18f3 01       		.byte	0x1
 9638 18f4 F103     		.2byte	0x3f1
 9639 18f6 A7010000 		.4byte	0x1a7
 9640 18fa 02       		.uleb128 0x2
 9641 18fb 91       		.byte	0x91
 9642 18fc 48       		.sleb128 -56
 9643 18fd 15       		.uleb128 0x15
 9644 18fe FA030000 		.4byte	.LASF131
 9645 1902 01       		.byte	0x1
 9646 1903 F103     		.2byte	0x3f1
 9647 1905 B8000000 		.4byte	0xb8
 9648 1909 02       		.uleb128 0x2
 9649 190a 91       		.byte	0x91
 9650 190b 47       		.sleb128 -57
 9651 190c 15       		.uleb128 0x15
 9652 190d B3050000 		.4byte	.LASF144
 9653 1911 01       		.byte	0x1
 9654 1912 F103     		.2byte	0x3f1
 9655 1914 B8000000 		.4byte	0xb8
 9656 1918 02       		.uleb128 0x2
 9657 1919 91       		.byte	0x91
 9658 191a 46       		.sleb128 -58
 9659 191b 12       		.uleb128 0x12
 9660 191c FC040000 		.4byte	.LASF145
 9661 1920 01       		.byte	0x1
 9662 1921 F303     		.2byte	0x3f3
 9663 1923 A7010000 		.4byte	0x1a7
 9664 1927 02       		.uleb128 0x2
 9665 1928 91       		.byte	0x91
 9666 1929 60       		.sleb128 -32
 9667 192a 13       		.uleb128 0x13
 9668 192b 6600     		.ascii	"f\000"
 9669 192d 01       		.byte	0x1
 9670 192e F403     		.2byte	0x3f4
 9671 1930 A7010000 		.4byte	0x1a7
 9672 1934 02       		.uleb128 0x2
 9673 1935 91       		.byte	0x91
 9674 1936 5C       		.sleb128 -36
 9675 1937 12       		.uleb128 0x12
 9676 1938 DC040000 		.4byte	.LASF146
 9677 193c 01       		.byte	0x1
 9678 193d F603     		.2byte	0x3f6
 9679 193f 9F000000 		.4byte	0x9f
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 192


 9680 1943 02       		.uleb128 0x2
 9681 1944 91       		.byte	0x91
 9682 1945 74       		.sleb128 -12
 9683 1946 12       		.uleb128 0x12
 9684 1947 1E060000 		.4byte	.LASF147
 9685 194b 01       		.byte	0x1
 9686 194c F603     		.2byte	0x3f6
 9687 194e 9F000000 		.4byte	0x9f
 9688 1952 02       		.uleb128 0x2
 9689 1953 91       		.byte	0x91
 9690 1954 70       		.sleb128 -16
 9691 1955 12       		.uleb128 0x12
 9692 1956 72060000 		.4byte	.LASF130
 9693 195a 01       		.byte	0x1
 9694 195b F803     		.2byte	0x3f8
 9695 195d 9F000000 		.4byte	0x9f
 9696 1961 02       		.uleb128 0x2
 9697 1962 91       		.byte	0x91
 9698 1963 6C       		.sleb128 -20
 9699 1964 13       		.uleb128 0x13
 9700 1965 69647800 		.ascii	"idx\000"
 9701 1969 01       		.byte	0x1
 9702 196a FA03     		.2byte	0x3fa
 9703 196c 9F000000 		.4byte	0x9f
 9704 1970 02       		.uleb128 0x2
 9705 1971 91       		.byte	0x91
 9706 1972 68       		.sleb128 -24
 9707 1973 13       		.uleb128 0x13
 9708 1974 6900     		.ascii	"i\000"
 9709 1976 01       		.byte	0x1
 9710 1977 FA03     		.2byte	0x3fa
 9711 1979 9F000000 		.4byte	0x9f
 9712 197d 02       		.uleb128 0x2
 9713 197e 91       		.byte	0x91
 9714 197f 64       		.sleb128 -28
 9715 1980 11       		.uleb128 0x11
 9716 1981 E8000000 		.4byte	.LBB37
 9717 1985 92000000 		.4byte	.LBE37-.LBB37
 9718 1989 12       		.uleb128 0x12
 9719 198a 47060000 		.4byte	.LASF132
 9720 198e 01       		.byte	0x1
 9721 198f 1404     		.2byte	0x414
 9722 1991 9F000000 		.4byte	0x9f
 9723 1995 02       		.uleb128 0x2
 9724 1996 91       		.byte	0x91
 9725 1997 58       		.sleb128 -40
 9726 1998 12       		.uleb128 0x12
 9727 1999 0E000000 		.4byte	.LASF133
 9728 199d 01       		.byte	0x1
 9729 199e 1504     		.2byte	0x415
 9730 19a0 9F000000 		.4byte	0x9f
 9731 19a4 02       		.uleb128 0x2
 9732 19a5 91       		.byte	0x91
 9733 19a6 54       		.sleb128 -44
 9734 19a7 00       		.byte	0
 9735 19a8 00       		.byte	0
 9736 19a9 19       		.uleb128 0x19
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 193


 9737 19aa FA060000 		.4byte	.LASF148
 9738 19ae 01       		.byte	0x1
 9739 19af 3304     		.2byte	0x433
 9740 19b1 00000000 		.4byte	.LFB110
 9741 19b5 1A000000 		.4byte	.LFE110-.LFB110
 9742 19b9 01       		.uleb128 0x1
 9743 19ba 9C       		.byte	0x9c
 9744 19bb EB190000 		.4byte	0x19eb
 9745 19bf 15       		.uleb128 0x15
 9746 19c0 B0010000 		.4byte	.LASF58
 9747 19c4 01       		.byte	0x1
 9748 19c5 3304     		.2byte	0x433
 9749 19c7 EA020000 		.4byte	0x2ea
 9750 19cb 02       		.uleb128 0x2
 9751 19cc 91       		.byte	0x91
 9752 19cd 74       		.sleb128 -12
 9753 19ce 16       		.uleb128 0x16
 9754 19cf 6300     		.ascii	"c\000"
 9755 19d1 01       		.byte	0x1
 9756 19d2 3304     		.2byte	0x433
 9757 19d4 B8000000 		.4byte	0xb8
 9758 19d8 02       		.uleb128 0x2
 9759 19d9 91       		.byte	0x91
 9760 19da 73       		.sleb128 -13
 9761 19db 15       		.uleb128 0x15
 9762 19dc 7F010000 		.4byte	.LASF59
 9763 19e0 01       		.byte	0x1
 9764 19e1 3304     		.2byte	0x433
 9765 19e3 CE000000 		.4byte	0xce
 9766 19e7 02       		.uleb128 0x2
 9767 19e8 91       		.byte	0x91
 9768 19e9 70       		.sleb128 -16
 9769 19ea 00       		.byte	0
 9770 19eb 19       		.uleb128 0x19
 9771 19ec 10060000 		.4byte	.LASF149
 9772 19f0 01       		.byte	0x1
 9773 19f1 3804     		.2byte	0x438
 9774 19f3 00000000 		.4byte	.LFB111
 9775 19f7 1A000000 		.4byte	.LFE111-.LFB111
 9776 19fb 01       		.uleb128 0x1
 9777 19fc 9C       		.byte	0x9c
 9778 19fd 2D1A0000 		.4byte	0x1a2d
 9779 1a01 15       		.uleb128 0x15
 9780 1a02 B0010000 		.4byte	.LASF58
 9781 1a06 01       		.byte	0x1
 9782 1a07 3804     		.2byte	0x438
 9783 1a09 EA020000 		.4byte	0x2ea
 9784 1a0d 02       		.uleb128 0x2
 9785 1a0e 91       		.byte	0x91
 9786 1a0f 74       		.sleb128 -12
 9787 1a10 16       		.uleb128 0x16
 9788 1a11 6300     		.ascii	"c\000"
 9789 1a13 01       		.byte	0x1
 9790 1a14 3804     		.2byte	0x438
 9791 1a16 B8000000 		.4byte	0xb8
 9792 1a1a 02       		.uleb128 0x2
 9793 1a1b 91       		.byte	0x91
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 194


 9794 1a1c 73       		.sleb128 -13
 9795 1a1d 15       		.uleb128 0x15
 9796 1a1e 7F010000 		.4byte	.LASF59
 9797 1a22 01       		.byte	0x1
 9798 1a23 3804     		.2byte	0x438
 9799 1a25 CE000000 		.4byte	0xce
 9800 1a29 02       		.uleb128 0x2
 9801 1a2a 91       		.byte	0x91
 9802 1a2b 70       		.sleb128 -16
 9803 1a2c 00       		.byte	0
 9804 1a2d 19       		.uleb128 0x19
 9805 1a2e BE050000 		.4byte	.LASF150
 9806 1a32 01       		.byte	0x1
 9807 1a33 3D04     		.2byte	0x43d
 9808 1a35 00000000 		.4byte	.LFB112
 9809 1a39 1A000000 		.4byte	.LFE112-.LFB112
 9810 1a3d 01       		.uleb128 0x1
 9811 1a3e 9C       		.byte	0x9c
 9812 1a3f 6F1A0000 		.4byte	0x1a6f
 9813 1a43 15       		.uleb128 0x15
 9814 1a44 B0010000 		.4byte	.LASF58
 9815 1a48 01       		.byte	0x1
 9816 1a49 3D04     		.2byte	0x43d
 9817 1a4b EA020000 		.4byte	0x2ea
 9818 1a4f 02       		.uleb128 0x2
 9819 1a50 91       		.byte	0x91
 9820 1a51 74       		.sleb128 -12
 9821 1a52 16       		.uleb128 0x16
 9822 1a53 6300     		.ascii	"c\000"
 9823 1a55 01       		.byte	0x1
 9824 1a56 3D04     		.2byte	0x43d
 9825 1a58 B8000000 		.4byte	0xb8
 9826 1a5c 02       		.uleb128 0x2
 9827 1a5d 91       		.byte	0x91
 9828 1a5e 73       		.sleb128 -13
 9829 1a5f 15       		.uleb128 0x15
 9830 1a60 7F010000 		.4byte	.LASF59
 9831 1a64 01       		.byte	0x1
 9832 1a65 3D04     		.2byte	0x43d
 9833 1a67 CE000000 		.4byte	0xce
 9834 1a6b 02       		.uleb128 0x2
 9835 1a6c 91       		.byte	0x91
 9836 1a6d 70       		.sleb128 -16
 9837 1a6e 00       		.byte	0
 9838 1a6f 19       		.uleb128 0x19
 9839 1a70 9C010000 		.4byte	.LASF151
 9840 1a74 01       		.byte	0x1
 9841 1a75 4204     		.2byte	0x442
 9842 1a77 00000000 		.4byte	.LFB113
 9843 1a7b 1A000000 		.4byte	.LFE113-.LFB113
 9844 1a7f 01       		.uleb128 0x1
 9845 1a80 9C       		.byte	0x9c
 9846 1a81 B11A0000 		.4byte	0x1ab1
 9847 1a85 15       		.uleb128 0x15
 9848 1a86 B0010000 		.4byte	.LASF58
 9849 1a8a 01       		.byte	0x1
 9850 1a8b 4204     		.2byte	0x442
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 195


 9851 1a8d EA020000 		.4byte	0x2ea
 9852 1a91 02       		.uleb128 0x2
 9853 1a92 91       		.byte	0x91
 9854 1a93 74       		.sleb128 -12
 9855 1a94 16       		.uleb128 0x16
 9856 1a95 6300     		.ascii	"c\000"
 9857 1a97 01       		.byte	0x1
 9858 1a98 4204     		.2byte	0x442
 9859 1a9a B8000000 		.4byte	0xb8
 9860 1a9e 02       		.uleb128 0x2
 9861 1a9f 91       		.byte	0x91
 9862 1aa0 73       		.sleb128 -13
 9863 1aa1 15       		.uleb128 0x15
 9864 1aa2 7F010000 		.4byte	.LASF59
 9865 1aa6 01       		.byte	0x1
 9866 1aa7 4204     		.2byte	0x442
 9867 1aa9 CE000000 		.4byte	0xce
 9868 1aad 02       		.uleb128 0x2
 9869 1aae 91       		.byte	0x91
 9870 1aaf 70       		.sleb128 -16
 9871 1ab0 00       		.byte	0
 9872 1ab1 1D       		.uleb128 0x1d
 9873 1ab2 2B010000 		.4byte	.LASF152
 9874 1ab6 06       		.byte	0x6
 9875 1ab7 1207     		.2byte	0x712
 9876 1ab9 BD1A0000 		.4byte	0x1abd
 9877 1abd 1E       		.uleb128 0x1e
 9878 1abe D9000000 		.4byte	0xd9
 9879 1ac2 1F       		.uleb128 0x1f
 9880 1ac3 42000000 		.4byte	0x42
 9881 1ac7 CD1A0000 		.4byte	0x1acd
 9882 1acb 20       		.uleb128 0x20
 9883 1acc 00       		.byte	0
 9884 1acd 21       		.uleb128 0x21
 9885 1ace 6A050000 		.4byte	.LASF129
 9886 1ad2 07       		.byte	0x7
 9887 1ad3 6F       		.byte	0x6f
 9888 1ad4 C21A0000 		.4byte	0x1ac2
 9889 1ad8 1F       		.uleb128 0x1f
 9890 1ad9 B8000000 		.4byte	0xb8
 9891 1add E81A0000 		.4byte	0x1ae8
 9892 1ae1 22       		.uleb128 0x22
 9893 1ae2 C3010000 		.4byte	0x1c3
 9894 1ae6 17       		.byte	0x17
 9895 1ae7 00       		.byte	0
 9896 1ae8 23       		.uleb128 0x23
 9897 1ae9 EE000000 		.4byte	.LASF153
 9898 1aed 01       		.byte	0x1
 9899 1aee 9403     		.2byte	0x394
 9900 1af0 D81A0000 		.4byte	0x1ad8
 9901 1af4 05       		.uleb128 0x5
 9902 1af5 03       		.byte	0x3
 9903 1af6 00000000 		.4byte	pitches
 9904 1afa 00       		.byte	0
 9905              		.section	.debug_abbrev,"",%progbits
 9906              	.Ldebug_abbrev0:
 9907 0000 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 196


 9908 0001 11       		.uleb128 0x11
 9909 0002 01       		.byte	0x1
 9910 0003 25       		.uleb128 0x25
 9911 0004 0E       		.uleb128 0xe
 9912 0005 13       		.uleb128 0x13
 9913 0006 0B       		.uleb128 0xb
 9914 0007 03       		.uleb128 0x3
 9915 0008 0E       		.uleb128 0xe
 9916 0009 1B       		.uleb128 0x1b
 9917 000a 0E       		.uleb128 0xe
 9918 000b 55       		.uleb128 0x55
 9919 000c 17       		.uleb128 0x17
 9920 000d 11       		.uleb128 0x11
 9921 000e 01       		.uleb128 0x1
 9922 000f 10       		.uleb128 0x10
 9923 0010 17       		.uleb128 0x17
 9924 0011 00       		.byte	0
 9925 0012 00       		.byte	0
 9926 0013 02       		.uleb128 0x2
 9927 0014 16       		.uleb128 0x16
 9928 0015 00       		.byte	0
 9929 0016 03       		.uleb128 0x3
 9930 0017 0E       		.uleb128 0xe
 9931 0018 3A       		.uleb128 0x3a
 9932 0019 0B       		.uleb128 0xb
 9933 001a 3B       		.uleb128 0x3b
 9934 001b 0B       		.uleb128 0xb
 9935 001c 49       		.uleb128 0x49
 9936 001d 13       		.uleb128 0x13
 9937 001e 00       		.byte	0
 9938 001f 00       		.byte	0
 9939 0020 03       		.uleb128 0x3
 9940 0021 24       		.uleb128 0x24
 9941 0022 00       		.byte	0
 9942 0023 0B       		.uleb128 0xb
 9943 0024 0B       		.uleb128 0xb
 9944 0025 3E       		.uleb128 0x3e
 9945 0026 0B       		.uleb128 0xb
 9946 0027 03       		.uleb128 0x3
 9947 0028 0E       		.uleb128 0xe
 9948 0029 00       		.byte	0
 9949 002a 00       		.byte	0
 9950 002b 04       		.uleb128 0x4
 9951 002c 24       		.uleb128 0x24
 9952 002d 00       		.byte	0
 9953 002e 0B       		.uleb128 0xb
 9954 002f 0B       		.uleb128 0xb
 9955 0030 3E       		.uleb128 0x3e
 9956 0031 0B       		.uleb128 0xb
 9957 0032 03       		.uleb128 0x3
 9958 0033 08       		.uleb128 0x8
 9959 0034 00       		.byte	0
 9960 0035 00       		.byte	0
 9961 0036 05       		.uleb128 0x5
 9962 0037 13       		.uleb128 0x13
 9963 0038 01       		.byte	0x1
 9964 0039 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 197


 9965 003a 0B       		.uleb128 0xb
 9966 003b 3A       		.uleb128 0x3a
 9967 003c 0B       		.uleb128 0xb
 9968 003d 3B       		.uleb128 0x3b
 9969 003e 0B       		.uleb128 0xb
 9970 003f 01       		.uleb128 0x1
 9971 0040 13       		.uleb128 0x13
 9972 0041 00       		.byte	0
 9973 0042 00       		.byte	0
 9974 0043 06       		.uleb128 0x6
 9975 0044 0D       		.uleb128 0xd
 9976 0045 00       		.byte	0
 9977 0046 03       		.uleb128 0x3
 9978 0047 0E       		.uleb128 0xe
 9979 0048 3A       		.uleb128 0x3a
 9980 0049 0B       		.uleb128 0xb
 9981 004a 3B       		.uleb128 0x3b
 9982 004b 0B       		.uleb128 0xb
 9983 004c 49       		.uleb128 0x49
 9984 004d 13       		.uleb128 0x13
 9985 004e 38       		.uleb128 0x38
 9986 004f 0B       		.uleb128 0xb
 9987 0050 00       		.byte	0
 9988 0051 00       		.byte	0
 9989 0052 07       		.uleb128 0x7
 9990 0053 0F       		.uleb128 0xf
 9991 0054 00       		.byte	0
 9992 0055 0B       		.uleb128 0xb
 9993 0056 0B       		.uleb128 0xb
 9994 0057 49       		.uleb128 0x49
 9995 0058 13       		.uleb128 0x13
 9996 0059 00       		.byte	0
 9997 005a 00       		.byte	0
 9998 005b 08       		.uleb128 0x8
 9999 005c 13       		.uleb128 0x13
 10000 005d 01       		.byte	0x1
 10001 005e 03       		.uleb128 0x3
 10002 005f 0E       		.uleb128 0xe
 10003 0060 0B       		.uleb128 0xb
 10004 0061 0B       		.uleb128 0xb
 10005 0062 3A       		.uleb128 0x3a
 10006 0063 0B       		.uleb128 0xb
 10007 0064 3B       		.uleb128 0x3b
 10008 0065 0B       		.uleb128 0xb
 10009 0066 01       		.uleb128 0x1
 10010 0067 13       		.uleb128 0x13
 10011 0068 00       		.byte	0
 10012 0069 00       		.byte	0
 10013 006a 09       		.uleb128 0x9
 10014 006b 16       		.uleb128 0x16
 10015 006c 00       		.byte	0
 10016 006d 03       		.uleb128 0x3
 10017 006e 08       		.uleb128 0x8
 10018 006f 3A       		.uleb128 0x3a
 10019 0070 0B       		.uleb128 0xb
 10020 0071 3B       		.uleb128 0x3b
 10021 0072 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 198


 10022 0073 49       		.uleb128 0x49
 10023 0074 13       		.uleb128 0x13
 10024 0075 00       		.byte	0
 10025 0076 00       		.byte	0
 10026 0077 0A       		.uleb128 0xa
 10027 0078 2E       		.uleb128 0x2e
 10028 0079 01       		.byte	0x1
 10029 007a 3F       		.uleb128 0x3f
 10030 007b 19       		.uleb128 0x19
 10031 007c 03       		.uleb128 0x3
 10032 007d 0E       		.uleb128 0xe
 10033 007e 3A       		.uleb128 0x3a
 10034 007f 0B       		.uleb128 0xb
 10035 0080 3B       		.uleb128 0x3b
 10036 0081 0B       		.uleb128 0xb
 10037 0082 27       		.uleb128 0x27
 10038 0083 19       		.uleb128 0x19
 10039 0084 11       		.uleb128 0x11
 10040 0085 01       		.uleb128 0x1
 10041 0086 12       		.uleb128 0x12
 10042 0087 06       		.uleb128 0x6
 10043 0088 40       		.uleb128 0x40
 10044 0089 18       		.uleb128 0x18
 10045 008a 9742     		.uleb128 0x2117
 10046 008c 19       		.uleb128 0x19
 10047 008d 01       		.uleb128 0x1
 10048 008e 13       		.uleb128 0x13
 10049 008f 00       		.byte	0
 10050 0090 00       		.byte	0
 10051 0091 0B       		.uleb128 0xb
 10052 0092 05       		.uleb128 0x5
 10053 0093 00       		.byte	0
 10054 0094 03       		.uleb128 0x3
 10055 0095 0E       		.uleb128 0xe
 10056 0096 3A       		.uleb128 0x3a
 10057 0097 0B       		.uleb128 0xb
 10058 0098 3B       		.uleb128 0x3b
 10059 0099 0B       		.uleb128 0xb
 10060 009a 49       		.uleb128 0x49
 10061 009b 13       		.uleb128 0x13
 10062 009c 02       		.uleb128 0x2
 10063 009d 18       		.uleb128 0x18
 10064 009e 00       		.byte	0
 10065 009f 00       		.byte	0
 10066 00a0 0C       		.uleb128 0xc
 10067 00a1 05       		.uleb128 0x5
 10068 00a2 00       		.byte	0
 10069 00a3 03       		.uleb128 0x3
 10070 00a4 08       		.uleb128 0x8
 10071 00a5 3A       		.uleb128 0x3a
 10072 00a6 0B       		.uleb128 0xb
 10073 00a7 3B       		.uleb128 0x3b
 10074 00a8 0B       		.uleb128 0xb
 10075 00a9 49       		.uleb128 0x49
 10076 00aa 13       		.uleb128 0x13
 10077 00ab 02       		.uleb128 0x2
 10078 00ac 18       		.uleb128 0x18
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 199


 10079 00ad 00       		.byte	0
 10080 00ae 00       		.byte	0
 10081 00af 0D       		.uleb128 0xd
 10082 00b0 2E       		.uleb128 0x2e
 10083 00b1 01       		.byte	0x1
 10084 00b2 3F       		.uleb128 0x3f
 10085 00b3 19       		.uleb128 0x19
 10086 00b4 03       		.uleb128 0x3
 10087 00b5 0E       		.uleb128 0xe
 10088 00b6 3A       		.uleb128 0x3a
 10089 00b7 0B       		.uleb128 0xb
 10090 00b8 3B       		.uleb128 0x3b
 10091 00b9 0B       		.uleb128 0xb
 10092 00ba 27       		.uleb128 0x27
 10093 00bb 19       		.uleb128 0x19
 10094 00bc 11       		.uleb128 0x11
 10095 00bd 01       		.uleb128 0x1
 10096 00be 12       		.uleb128 0x12
 10097 00bf 06       		.uleb128 0x6
 10098 00c0 40       		.uleb128 0x40
 10099 00c1 18       		.uleb128 0x18
 10100 00c2 9642     		.uleb128 0x2116
 10101 00c4 19       		.uleb128 0x19
 10102 00c5 01       		.uleb128 0x1
 10103 00c6 13       		.uleb128 0x13
 10104 00c7 00       		.byte	0
 10105 00c8 00       		.byte	0
 10106 00c9 0E       		.uleb128 0xe
 10107 00ca 34       		.uleb128 0x34
 10108 00cb 00       		.byte	0
 10109 00cc 03       		.uleb128 0x3
 10110 00cd 0E       		.uleb128 0xe
 10111 00ce 3A       		.uleb128 0x3a
 10112 00cf 0B       		.uleb128 0xb
 10113 00d0 3B       		.uleb128 0x3b
 10114 00d1 0B       		.uleb128 0xb
 10115 00d2 49       		.uleb128 0x49
 10116 00d3 13       		.uleb128 0x13
 10117 00d4 02       		.uleb128 0x2
 10118 00d5 18       		.uleb128 0x18
 10119 00d6 00       		.byte	0
 10120 00d7 00       		.byte	0
 10121 00d8 0F       		.uleb128 0xf
 10122 00d9 34       		.uleb128 0x34
 10123 00da 00       		.byte	0
 10124 00db 03       		.uleb128 0x3
 10125 00dc 08       		.uleb128 0x8
 10126 00dd 3A       		.uleb128 0x3a
 10127 00de 0B       		.uleb128 0xb
 10128 00df 3B       		.uleb128 0x3b
 10129 00e0 0B       		.uleb128 0xb
 10130 00e1 49       		.uleb128 0x49
 10131 00e2 13       		.uleb128 0x13
 10132 00e3 02       		.uleb128 0x2
 10133 00e4 18       		.uleb128 0x18
 10134 00e5 00       		.byte	0
 10135 00e6 00       		.byte	0
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 200


 10136 00e7 10       		.uleb128 0x10
 10137 00e8 0B       		.uleb128 0xb
 10138 00e9 01       		.byte	0x1
 10139 00ea 11       		.uleb128 0x11
 10140 00eb 01       		.uleb128 0x1
 10141 00ec 12       		.uleb128 0x12
 10142 00ed 06       		.uleb128 0x6
 10143 00ee 01       		.uleb128 0x1
 10144 00ef 13       		.uleb128 0x13
 10145 00f0 00       		.byte	0
 10146 00f1 00       		.byte	0
 10147 00f2 11       		.uleb128 0x11
 10148 00f3 0B       		.uleb128 0xb
 10149 00f4 01       		.byte	0x1
 10150 00f5 11       		.uleb128 0x11
 10151 00f6 01       		.uleb128 0x1
 10152 00f7 12       		.uleb128 0x12
 10153 00f8 06       		.uleb128 0x6
 10154 00f9 00       		.byte	0
 10155 00fa 00       		.byte	0
 10156 00fb 12       		.uleb128 0x12
 10157 00fc 34       		.uleb128 0x34
 10158 00fd 00       		.byte	0
 10159 00fe 03       		.uleb128 0x3
 10160 00ff 0E       		.uleb128 0xe
 10161 0100 3A       		.uleb128 0x3a
 10162 0101 0B       		.uleb128 0xb
 10163 0102 3B       		.uleb128 0x3b
 10164 0103 05       		.uleb128 0x5
 10165 0104 49       		.uleb128 0x49
 10166 0105 13       		.uleb128 0x13
 10167 0106 02       		.uleb128 0x2
 10168 0107 18       		.uleb128 0x18
 10169 0108 00       		.byte	0
 10170 0109 00       		.byte	0
 10171 010a 13       		.uleb128 0x13
 10172 010b 34       		.uleb128 0x34
 10173 010c 00       		.byte	0
 10174 010d 03       		.uleb128 0x3
 10175 010e 08       		.uleb128 0x8
 10176 010f 3A       		.uleb128 0x3a
 10177 0110 0B       		.uleb128 0xb
 10178 0111 3B       		.uleb128 0x3b
 10179 0112 05       		.uleb128 0x5
 10180 0113 49       		.uleb128 0x49
 10181 0114 13       		.uleb128 0x13
 10182 0115 02       		.uleb128 0x2
 10183 0116 18       		.uleb128 0x18
 10184 0117 00       		.byte	0
 10185 0118 00       		.byte	0
 10186 0119 14       		.uleb128 0x14
 10187 011a 2E       		.uleb128 0x2e
 10188 011b 01       		.byte	0x1
 10189 011c 3F       		.uleb128 0x3f
 10190 011d 19       		.uleb128 0x19
 10191 011e 03       		.uleb128 0x3
 10192 011f 0E       		.uleb128 0xe
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 201


 10193 0120 3A       		.uleb128 0x3a
 10194 0121 0B       		.uleb128 0xb
 10195 0122 3B       		.uleb128 0x3b
 10196 0123 05       		.uleb128 0x5
 10197 0124 27       		.uleb128 0x27
 10198 0125 19       		.uleb128 0x19
 10199 0126 11       		.uleb128 0x11
 10200 0127 01       		.uleb128 0x1
 10201 0128 12       		.uleb128 0x12
 10202 0129 06       		.uleb128 0x6
 10203 012a 40       		.uleb128 0x40
 10204 012b 18       		.uleb128 0x18
 10205 012c 9642     		.uleb128 0x2116
 10206 012e 19       		.uleb128 0x19
 10207 012f 01       		.uleb128 0x1
 10208 0130 13       		.uleb128 0x13
 10209 0131 00       		.byte	0
 10210 0132 00       		.byte	0
 10211 0133 15       		.uleb128 0x15
 10212 0134 05       		.uleb128 0x5
 10213 0135 00       		.byte	0
 10214 0136 03       		.uleb128 0x3
 10215 0137 0E       		.uleb128 0xe
 10216 0138 3A       		.uleb128 0x3a
 10217 0139 0B       		.uleb128 0xb
 10218 013a 3B       		.uleb128 0x3b
 10219 013b 05       		.uleb128 0x5
 10220 013c 49       		.uleb128 0x49
 10221 013d 13       		.uleb128 0x13
 10222 013e 02       		.uleb128 0x2
 10223 013f 18       		.uleb128 0x18
 10224 0140 00       		.byte	0
 10225 0141 00       		.byte	0
 10226 0142 16       		.uleb128 0x16
 10227 0143 05       		.uleb128 0x5
 10228 0144 00       		.byte	0
 10229 0145 03       		.uleb128 0x3
 10230 0146 08       		.uleb128 0x8
 10231 0147 3A       		.uleb128 0x3a
 10232 0148 0B       		.uleb128 0xb
 10233 0149 3B       		.uleb128 0x3b
 10234 014a 05       		.uleb128 0x5
 10235 014b 49       		.uleb128 0x49
 10236 014c 13       		.uleb128 0x13
 10237 014d 02       		.uleb128 0x2
 10238 014e 18       		.uleb128 0x18
 10239 014f 00       		.byte	0
 10240 0150 00       		.byte	0
 10241 0151 17       		.uleb128 0x17
 10242 0152 2E       		.uleb128 0x2e
 10243 0153 01       		.byte	0x1
 10244 0154 3F       		.uleb128 0x3f
 10245 0155 19       		.uleb128 0x19
 10246 0156 03       		.uleb128 0x3
 10247 0157 0E       		.uleb128 0xe
 10248 0158 3A       		.uleb128 0x3a
 10249 0159 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 202


 10250 015a 3B       		.uleb128 0x3b
 10251 015b 05       		.uleb128 0x5
 10252 015c 49       		.uleb128 0x49
 10253 015d 13       		.uleb128 0x13
 10254 015e 3C       		.uleb128 0x3c
 10255 015f 19       		.uleb128 0x19
 10256 0160 01       		.uleb128 0x1
 10257 0161 13       		.uleb128 0x13
 10258 0162 00       		.byte	0
 10259 0163 00       		.byte	0
 10260 0164 18       		.uleb128 0x18
 10261 0165 18       		.uleb128 0x18
 10262 0166 00       		.byte	0
 10263 0167 00       		.byte	0
 10264 0168 00       		.byte	0
 10265 0169 19       		.uleb128 0x19
 10266 016a 2E       		.uleb128 0x2e
 10267 016b 01       		.byte	0x1
 10268 016c 3F       		.uleb128 0x3f
 10269 016d 19       		.uleb128 0x19
 10270 016e 03       		.uleb128 0x3
 10271 016f 0E       		.uleb128 0xe
 10272 0170 3A       		.uleb128 0x3a
 10273 0171 0B       		.uleb128 0xb
 10274 0172 3B       		.uleb128 0x3b
 10275 0173 05       		.uleb128 0x5
 10276 0174 27       		.uleb128 0x27
 10277 0175 19       		.uleb128 0x19
 10278 0176 11       		.uleb128 0x11
 10279 0177 01       		.uleb128 0x1
 10280 0178 12       		.uleb128 0x12
 10281 0179 06       		.uleb128 0x6
 10282 017a 40       		.uleb128 0x40
 10283 017b 18       		.uleb128 0x18
 10284 017c 9742     		.uleb128 0x2117
 10285 017e 19       		.uleb128 0x19
 10286 017f 01       		.uleb128 0x1
 10287 0180 13       		.uleb128 0x13
 10288 0181 00       		.byte	0
 10289 0182 00       		.byte	0
 10290 0183 1A       		.uleb128 0x1a
 10291 0184 2E       		.uleb128 0x2e
 10292 0185 01       		.byte	0x1
 10293 0186 3F       		.uleb128 0x3f
 10294 0187 19       		.uleb128 0x19
 10295 0188 03       		.uleb128 0x3
 10296 0189 0E       		.uleb128 0xe
 10297 018a 3A       		.uleb128 0x3a
 10298 018b 0B       		.uleb128 0xb
 10299 018c 3B       		.uleb128 0x3b
 10300 018d 05       		.uleb128 0x5
 10301 018e 27       		.uleb128 0x27
 10302 018f 19       		.uleb128 0x19
 10303 0190 49       		.uleb128 0x49
 10304 0191 13       		.uleb128 0x13
 10305 0192 11       		.uleb128 0x11
 10306 0193 01       		.uleb128 0x1
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 203


 10307 0194 12       		.uleb128 0x12
 10308 0195 06       		.uleb128 0x6
 10309 0196 40       		.uleb128 0x40
 10310 0197 18       		.uleb128 0x18
 10311 0198 9742     		.uleb128 0x2117
 10312 019a 19       		.uleb128 0x19
 10313 019b 01       		.uleb128 0x1
 10314 019c 13       		.uleb128 0x13
 10315 019d 00       		.byte	0
 10316 019e 00       		.byte	0
 10317 019f 1B       		.uleb128 0x1b
 10318 01a0 26       		.uleb128 0x26
 10319 01a1 00       		.byte	0
 10320 01a2 49       		.uleb128 0x49
 10321 01a3 13       		.uleb128 0x13
 10322 01a4 00       		.byte	0
 10323 01a5 00       		.byte	0
 10324 01a6 1C       		.uleb128 0x1c
 10325 01a7 2E       		.uleb128 0x2e
 10326 01a8 01       		.byte	0x1
 10327 01a9 3F       		.uleb128 0x3f
 10328 01aa 19       		.uleb128 0x19
 10329 01ab 03       		.uleb128 0x3
 10330 01ac 0E       		.uleb128 0xe
 10331 01ad 3A       		.uleb128 0x3a
 10332 01ae 0B       		.uleb128 0xb
 10333 01af 3B       		.uleb128 0x3b
 10334 01b0 05       		.uleb128 0x5
 10335 01b1 27       		.uleb128 0x27
 10336 01b2 19       		.uleb128 0x19
 10337 01b3 49       		.uleb128 0x49
 10338 01b4 13       		.uleb128 0x13
 10339 01b5 11       		.uleb128 0x11
 10340 01b6 01       		.uleb128 0x1
 10341 01b7 12       		.uleb128 0x12
 10342 01b8 06       		.uleb128 0x6
 10343 01b9 40       		.uleb128 0x40
 10344 01ba 18       		.uleb128 0x18
 10345 01bb 9642     		.uleb128 0x2116
 10346 01bd 19       		.uleb128 0x19
 10347 01be 01       		.uleb128 0x1
 10348 01bf 13       		.uleb128 0x13
 10349 01c0 00       		.byte	0
 10350 01c1 00       		.byte	0
 10351 01c2 1D       		.uleb128 0x1d
 10352 01c3 34       		.uleb128 0x34
 10353 01c4 00       		.byte	0
 10354 01c5 03       		.uleb128 0x3
 10355 01c6 0E       		.uleb128 0xe
 10356 01c7 3A       		.uleb128 0x3a
 10357 01c8 0B       		.uleb128 0xb
 10358 01c9 3B       		.uleb128 0x3b
 10359 01ca 05       		.uleb128 0x5
 10360 01cb 49       		.uleb128 0x49
 10361 01cc 13       		.uleb128 0x13
 10362 01cd 3F       		.uleb128 0x3f
 10363 01ce 19       		.uleb128 0x19
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 204


 10364 01cf 3C       		.uleb128 0x3c
 10365 01d0 19       		.uleb128 0x19
 10366 01d1 00       		.byte	0
 10367 01d2 00       		.byte	0
 10368 01d3 1E       		.uleb128 0x1e
 10369 01d4 35       		.uleb128 0x35
 10370 01d5 00       		.byte	0
 10371 01d6 49       		.uleb128 0x49
 10372 01d7 13       		.uleb128 0x13
 10373 01d8 00       		.byte	0
 10374 01d9 00       		.byte	0
 10375 01da 1F       		.uleb128 0x1f
 10376 01db 01       		.uleb128 0x1
 10377 01dc 01       		.byte	0x1
 10378 01dd 49       		.uleb128 0x49
 10379 01de 13       		.uleb128 0x13
 10380 01df 01       		.uleb128 0x1
 10381 01e0 13       		.uleb128 0x13
 10382 01e1 00       		.byte	0
 10383 01e2 00       		.byte	0
 10384 01e3 20       		.uleb128 0x20
 10385 01e4 21       		.uleb128 0x21
 10386 01e5 00       		.byte	0
 10387 01e6 00       		.byte	0
 10388 01e7 00       		.byte	0
 10389 01e8 21       		.uleb128 0x21
 10390 01e9 34       		.uleb128 0x34
 10391 01ea 00       		.byte	0
 10392 01eb 03       		.uleb128 0x3
 10393 01ec 0E       		.uleb128 0xe
 10394 01ed 3A       		.uleb128 0x3a
 10395 01ee 0B       		.uleb128 0xb
 10396 01ef 3B       		.uleb128 0x3b
 10397 01f0 0B       		.uleb128 0xb
 10398 01f1 49       		.uleb128 0x49
 10399 01f2 13       		.uleb128 0x13
 10400 01f3 3F       		.uleb128 0x3f
 10401 01f4 19       		.uleb128 0x19
 10402 01f5 3C       		.uleb128 0x3c
 10403 01f6 19       		.uleb128 0x19
 10404 01f7 00       		.byte	0
 10405 01f8 00       		.byte	0
 10406 01f9 22       		.uleb128 0x22
 10407 01fa 21       		.uleb128 0x21
 10408 01fb 00       		.byte	0
 10409 01fc 49       		.uleb128 0x49
 10410 01fd 13       		.uleb128 0x13
 10411 01fe 2F       		.uleb128 0x2f
 10412 01ff 0B       		.uleb128 0xb
 10413 0200 00       		.byte	0
 10414 0201 00       		.byte	0
 10415 0202 23       		.uleb128 0x23
 10416 0203 34       		.uleb128 0x34
 10417 0204 00       		.byte	0
 10418 0205 03       		.uleb128 0x3
 10419 0206 0E       		.uleb128 0xe
 10420 0207 3A       		.uleb128 0x3a
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 205


 10421 0208 0B       		.uleb128 0xb
 10422 0209 3B       		.uleb128 0x3b
 10423 020a 05       		.uleb128 0x5
 10424 020b 49       		.uleb128 0x49
 10425 020c 13       		.uleb128 0x13
 10426 020d 3F       		.uleb128 0x3f
 10427 020e 19       		.uleb128 0x19
 10428 020f 02       		.uleb128 0x2
 10429 0210 18       		.uleb128 0x18
 10430 0211 00       		.byte	0
 10431 0212 00       		.byte	0
 10432 0213 00       		.byte	0
 10433              		.section	.debug_aranges,"",%progbits
 10434 0000 A4010000 		.4byte	0x1a4
 10435 0004 0200     		.2byte	0x2
 10436 0006 00000000 		.4byte	.Ldebug_info0
 10437 000a 04       		.byte	0x4
 10438 000b 00       		.byte	0
 10439 000c 0000     		.2byte	0
 10440 000e 0000     		.2byte	0
 10441 0010 00000000 		.4byte	.LFB64
 10442 0014 7E000000 		.4byte	.LFE64-.LFB64
 10443 0018 00000000 		.4byte	.LFB65
 10444 001c 3E010000 		.4byte	.LFE65-.LFB65
 10445 0020 00000000 		.4byte	.LFB66
 10446 0024 12000000 		.4byte	.LFE66-.LFB66
 10447 0028 00000000 		.4byte	.LFB67
 10448 002c E0010000 		.4byte	.LFE67-.LFB67
 10449 0030 00000000 		.4byte	.LFB68
 10450 0034 32000000 		.4byte	.LFE68-.LFB68
 10451 0038 00000000 		.4byte	.LFB69
 10452 003c 3A000000 		.4byte	.LFE69-.LFB69
 10453 0040 00000000 		.4byte	.LFB70
 10454 0044 3A000000 		.4byte	.LFE70-.LFB70
 10455 0048 00000000 		.4byte	.LFB71
 10456 004c 40000000 		.4byte	.LFE71-.LFB71
 10457 0050 00000000 		.4byte	.LFB72
 10458 0054 12000000 		.4byte	.LFE72-.LFB72
 10459 0058 00000000 		.4byte	.LFB73
 10460 005c 4C000000 		.4byte	.LFE73-.LFB73
 10461 0060 00000000 		.4byte	.LFB74
 10462 0064 4A000000 		.4byte	.LFE74-.LFB74
 10463 0068 00000000 		.4byte	.LFB75
 10464 006c 5E000000 		.4byte	.LFE75-.LFB75
 10465 0070 00000000 		.4byte	.LFB76
 10466 0074 32000000 		.4byte	.LFE76-.LFB76
 10467 0078 00000000 		.4byte	.LFB77
 10468 007c D0000000 		.4byte	.LFE77-.LFB77
 10469 0080 00000000 		.4byte	.LFB78
 10470 0084 D2010000 		.4byte	.LFE78-.LFB78
 10471 0088 00000000 		.4byte	.LFB79
 10472 008c AA010000 		.4byte	.LFE79-.LFB79
 10473 0090 00000000 		.4byte	.LFB80
 10474 0094 68000000 		.4byte	.LFE80-.LFB80
 10475 0098 00000000 		.4byte	.LFB81
 10476 009c 82010000 		.4byte	.LFE81-.LFB81
 10477 00a0 00000000 		.4byte	.LFB82
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 206


 10478 00a4 96000000 		.4byte	.LFE82-.LFB82
 10479 00a8 00000000 		.4byte	.LFB83
 10480 00ac A4010000 		.4byte	.LFE83-.LFB83
 10481 00b0 00000000 		.4byte	.LFB84
 10482 00b4 D6000000 		.4byte	.LFE84-.LFB84
 10483 00b8 00000000 		.4byte	.LFB85
 10484 00bc 7C000000 		.4byte	.LFE85-.LFB85
 10485 00c0 00000000 		.4byte	.LFB86
 10486 00c4 E0020000 		.4byte	.LFE86-.LFB86
 10487 00c8 00000000 		.4byte	.LFB87
 10488 00cc D8000000 		.4byte	.LFE87-.LFB87
 10489 00d0 00000000 		.4byte	.LFB88
 10490 00d4 0C040000 		.4byte	.LFE88-.LFB88
 10491 00d8 00000000 		.4byte	.LFB89
 10492 00dc F8000000 		.4byte	.LFE89-.LFB89
 10493 00e0 00000000 		.4byte	.LFB90
 10494 00e4 9A010000 		.4byte	.LFE90-.LFB90
 10495 00e8 00000000 		.4byte	.LFB91
 10496 00ec 26000000 		.4byte	.LFE91-.LFB91
 10497 00f0 00000000 		.4byte	.LFB92
 10498 00f4 18000000 		.4byte	.LFE92-.LFB92
 10499 00f8 00000000 		.4byte	.LFB93
 10500 00fc 18000000 		.4byte	.LFE93-.LFB93
 10501 0100 00000000 		.4byte	.LFB94
 10502 0104 28000000 		.4byte	.LFE94-.LFB94
 10503 0108 00000000 		.4byte	.LFB95
 10504 010c 26000000 		.4byte	.LFE95-.LFB95
 10505 0110 00000000 		.4byte	.LFB96
 10506 0114 1E000000 		.4byte	.LFE96-.LFB96
 10507 0118 00000000 		.4byte	.LFB97
 10508 011c 18000000 		.4byte	.LFE97-.LFB97
 10509 0120 00000000 		.4byte	.LFB98
 10510 0124 76000000 		.4byte	.LFE98-.LFB98
 10511 0128 00000000 		.4byte	.LFB99
 10512 012c 1E000000 		.4byte	.LFE99-.LFB99
 10513 0130 00000000 		.4byte	.LFB100
 10514 0134 DC000000 		.4byte	.LFE100-.LFB100
 10515 0138 00000000 		.4byte	.LFB101
 10516 013c 30030000 		.4byte	.LFE101-.LFB101
 10517 0140 00000000 		.4byte	.LFB102
 10518 0144 E8000000 		.4byte	.LFE102-.LFB102
 10519 0148 00000000 		.4byte	.LFB103
 10520 014c 18000000 		.4byte	.LFE103-.LFB103
 10521 0150 00000000 		.4byte	.LFB104
 10522 0154 18000000 		.4byte	.LFE104-.LFB104
 10523 0158 00000000 		.4byte	.LFB105
 10524 015c 16000000 		.4byte	.LFE105-.LFB105
 10525 0160 00000000 		.4byte	.LFB106
 10526 0164 80000000 		.4byte	.LFE106-.LFB106
 10527 0168 00000000 		.4byte	.LFB107
 10528 016c 70010000 		.4byte	.LFE107-.LFB107
 10529 0170 00000000 		.4byte	.LFB108
 10530 0174 D0000000 		.4byte	.LFE108-.LFB108
 10531 0178 00000000 		.4byte	.LFB109
 10532 017c 90010000 		.4byte	.LFE109-.LFB109
 10533 0180 00000000 		.4byte	.LFB110
 10534 0184 1A000000 		.4byte	.LFE110-.LFB110
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 207


 10535 0188 00000000 		.4byte	.LFB111
 10536 018c 1A000000 		.4byte	.LFE111-.LFB111
 10537 0190 00000000 		.4byte	.LFB112
 10538 0194 1A000000 		.4byte	.LFE112-.LFB112
 10539 0198 00000000 		.4byte	.LFB113
 10540 019c 1A000000 		.4byte	.LFE113-.LFB113
 10541 01a0 00000000 		.4byte	0
 10542 01a4 00000000 		.4byte	0
 10543              		.section	.debug_ranges,"",%progbits
 10544              	.Ldebug_ranges0:
 10545 0000 00000000 		.4byte	.LFB64
 10546 0004 7E000000 		.4byte	.LFE64
 10547 0008 00000000 		.4byte	.LFB65
 10548 000c 3E010000 		.4byte	.LFE65
 10549 0010 00000000 		.4byte	.LFB66
 10550 0014 12000000 		.4byte	.LFE66
 10551 0018 00000000 		.4byte	.LFB67
 10552 001c E0010000 		.4byte	.LFE67
 10553 0020 00000000 		.4byte	.LFB68
 10554 0024 32000000 		.4byte	.LFE68
 10555 0028 00000000 		.4byte	.LFB69
 10556 002c 3A000000 		.4byte	.LFE69
 10557 0030 00000000 		.4byte	.LFB70
 10558 0034 3A000000 		.4byte	.LFE70
 10559 0038 00000000 		.4byte	.LFB71
 10560 003c 40000000 		.4byte	.LFE71
 10561 0040 00000000 		.4byte	.LFB72
 10562 0044 12000000 		.4byte	.LFE72
 10563 0048 00000000 		.4byte	.LFB73
 10564 004c 4C000000 		.4byte	.LFE73
 10565 0050 00000000 		.4byte	.LFB74
 10566 0054 4A000000 		.4byte	.LFE74
 10567 0058 00000000 		.4byte	.LFB75
 10568 005c 5E000000 		.4byte	.LFE75
 10569 0060 00000000 		.4byte	.LFB76
 10570 0064 32000000 		.4byte	.LFE76
 10571 0068 00000000 		.4byte	.LFB77
 10572 006c D0000000 		.4byte	.LFE77
 10573 0070 00000000 		.4byte	.LFB78
 10574 0074 D2010000 		.4byte	.LFE78
 10575 0078 00000000 		.4byte	.LFB79
 10576 007c AA010000 		.4byte	.LFE79
 10577 0080 00000000 		.4byte	.LFB80
 10578 0084 68000000 		.4byte	.LFE80
 10579 0088 00000000 		.4byte	.LFB81
 10580 008c 82010000 		.4byte	.LFE81
 10581 0090 00000000 		.4byte	.LFB82
 10582 0094 96000000 		.4byte	.LFE82
 10583 0098 00000000 		.4byte	.LFB83
 10584 009c A4010000 		.4byte	.LFE83
 10585 00a0 00000000 		.4byte	.LFB84
 10586 00a4 D6000000 		.4byte	.LFE84
 10587 00a8 00000000 		.4byte	.LFB85
 10588 00ac 7C000000 		.4byte	.LFE85
 10589 00b0 00000000 		.4byte	.LFB86
 10590 00b4 E0020000 		.4byte	.LFE86
 10591 00b8 00000000 		.4byte	.LFB87
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 208


 10592 00bc D8000000 		.4byte	.LFE87
 10593 00c0 00000000 		.4byte	.LFB88
 10594 00c4 0C040000 		.4byte	.LFE88
 10595 00c8 00000000 		.4byte	.LFB89
 10596 00cc F8000000 		.4byte	.LFE89
 10597 00d0 00000000 		.4byte	.LFB90
 10598 00d4 9A010000 		.4byte	.LFE90
 10599 00d8 00000000 		.4byte	.LFB91
 10600 00dc 26000000 		.4byte	.LFE91
 10601 00e0 00000000 		.4byte	.LFB92
 10602 00e4 18000000 		.4byte	.LFE92
 10603 00e8 00000000 		.4byte	.LFB93
 10604 00ec 18000000 		.4byte	.LFE93
 10605 00f0 00000000 		.4byte	.LFB94
 10606 00f4 28000000 		.4byte	.LFE94
 10607 00f8 00000000 		.4byte	.LFB95
 10608 00fc 26000000 		.4byte	.LFE95
 10609 0100 00000000 		.4byte	.LFB96
 10610 0104 1E000000 		.4byte	.LFE96
 10611 0108 00000000 		.4byte	.LFB97
 10612 010c 18000000 		.4byte	.LFE97
 10613 0110 00000000 		.4byte	.LFB98
 10614 0114 76000000 		.4byte	.LFE98
 10615 0118 00000000 		.4byte	.LFB99
 10616 011c 1E000000 		.4byte	.LFE99
 10617 0120 00000000 		.4byte	.LFB100
 10618 0124 DC000000 		.4byte	.LFE100
 10619 0128 00000000 		.4byte	.LFB101
 10620 012c 30030000 		.4byte	.LFE101
 10621 0130 00000000 		.4byte	.LFB102
 10622 0134 E8000000 		.4byte	.LFE102
 10623 0138 00000000 		.4byte	.LFB103
 10624 013c 18000000 		.4byte	.LFE103
 10625 0140 00000000 		.4byte	.LFB104
 10626 0144 18000000 		.4byte	.LFE104
 10627 0148 00000000 		.4byte	.LFB105
 10628 014c 16000000 		.4byte	.LFE105
 10629 0150 00000000 		.4byte	.LFB106
 10630 0154 80000000 		.4byte	.LFE106
 10631 0158 00000000 		.4byte	.LFB107
 10632 015c 70010000 		.4byte	.LFE107
 10633 0160 00000000 		.4byte	.LFB108
 10634 0164 D0000000 		.4byte	.LFE108
 10635 0168 00000000 		.4byte	.LFB109
 10636 016c 90010000 		.4byte	.LFE109
 10637 0170 00000000 		.4byte	.LFB110
 10638 0174 1A000000 		.4byte	.LFE110
 10639 0178 00000000 		.4byte	.LFB111
 10640 017c 1A000000 		.4byte	.LFE111
 10641 0180 00000000 		.4byte	.LFB112
 10642 0184 1A000000 		.4byte	.LFE112
 10643 0188 00000000 		.4byte	.LFB113
 10644 018c 1A000000 		.4byte	.LFE113
 10645 0190 00000000 		.4byte	0
 10646 0194 00000000 		.4byte	0
 10647              		.section	.debug_line,"",%progbits
 10648              	.Ldebug_line0:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 209


 10649 0000 D2080000 		.section	.debug_str,"MS",%progbits,1
 10649      02006201 
 10649      00000201 
 10649      FB0E0D00 
 10649      01010101 
 10650              	.LASF26:
 10651 0000 794F6666 		.ascii	"yOffset\000"
 10651      73657400 
 10652              	.LASF81:
 10653 0008 64656C74 		.ascii	"delta\000"
 10653      6100
 10654              	.LASF133:
 10655 000e 74686973 		.ascii	"thisDigit\000"
 10655      44696769 
 10655      7400
 10656              	.LASF105:
 10657 0018 666F6E74 		.ascii	"fontWidth\000"
 10657      57696474 
 10657      6800
 10658              	.LASF102:
 10659 0022 786F3136 		.ascii	"xo16\000"
 10659      00
 10660              	.LASF1:
 10661 0027 5F5F7569 		.ascii	"__uint8_t\000"
 10661      6E74385F 
 10661      7400
 10662              	.LASF136:
 10663 0031 73686F77 		.ascii	"showCents\000"
 10663      43656E74 
 10663      7300
 10664              	.LASF125:
 10665 003b 47465877 		.ascii	"GFXwidth\000"
 10665      69647468 
 10665      00
 10666              	.LASF154:
 10667 0044 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 10667      43313120 
 10667      352E342E 
 10667      31203230 
 10667      31363036 
 10668 0077 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 10668      20726576 
 10668      6973696F 
 10668      6E203233 
 10668      37373135 
 10669 00aa 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 10669      66756E63 
 10669      74696F6E 
 10669      2D736563 
 10669      74696F6E 
 10670              	.LASF110:
 10671 00d2 47465867 		.ascii	"GFXgetCursorX\000"
 10671      65744375 
 10671      72736F72 
 10671      5800
 10672              	.LASF111:
 10673 00e0 47465867 		.ascii	"GFXgetCursorY\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 210


 10673      65744375 
 10673      72736F72 
 10673      5900
 10674              	.LASF153:
 10675 00ee 70697463 		.ascii	"pitches\000"
 10675      68657300 
 10676              	.LASF13:
 10677 00f6 6C6F6E67 		.ascii	"long long unsigned int\000"
 10677      206C6F6E 
 10677      6720756E 
 10677      7369676E 
 10677      65642069 
 10678              	.LASF51:
 10679 010d 67667846 		.ascii	"gfxFont\000"
 10679      6F6E7400 
 10680              	.LASF128:
 10681 0115 4F4C4544 		.ascii	"OLEDparseInt\000"
 10681      70617273 
 10681      65496E74 
 10681      00
 10682              	.LASF0:
 10683 0122 5F5F696E 		.ascii	"__int8_t\000"
 10683      74385F74 
 10683      00
 10684              	.LASF152:
 10685 012b 49544D5F 		.ascii	"ITM_RxBuffer\000"
 10685      52784275 
 10685      66666572 
 10685      00
 10686              	.LASF92:
 10687 0138 64793132 		.ascii	"dy12\000"
 10687      00
 10688              	.LASF88:
 10689 013d 64793031 		.ascii	"dy01\000"
 10689      00
 10690              	.LASF90:
 10691 0142 64793032 		.ascii	"dy02\000"
 10691      00
 10692              	.LASF12:
 10693 0147 6C6F6E67 		.ascii	"long long int\000"
 10693      206C6F6E 
 10693      6720696E 
 10693      7400
 10694              	.LASF2:
 10695 0155 7369676E 		.ascii	"signed char\000"
 10695      65642063 
 10695      68617200 
 10696              	.LASF52:
 10697 0161 666F6E74 		.ascii	"fontHeight\000"
 10697      48656967 
 10697      687400
 10698              	.LASF72:
 10699 016c 47465866 		.ascii	"GFXfillScreen\000"
 10699      696C6C53 
 10699      63726565 
 10699      6E00
 10700              	.LASF99:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 211


 10701 017a 73697A65 		.ascii	"size\000"
 10701      00
 10702              	.LASF59:
 10703 017f 636F6C6F 		.ascii	"color\000"
 10703      7200
 10704              	.LASF108:
 10705 0185 47465877 		.ascii	"GFXwrite\000"
 10705      72697465 
 10705      00
 10706              	.LASF93:
 10707 018e 47465864 		.ascii	"GFXdrawBitmap\000"
 10707      72617742 
 10707      69746D61 
 10707      7000
 10708              	.LASF151:
 10709 019c 47465873 		.ascii	"GFXscrollRight\000"
 10709      63726F6C 
 10709      6C526967 
 10709      687400
 10710              	.LASF89:
 10711 01ab 64783032 		.ascii	"dx02\000"
 10711      00
 10712              	.LASF58:
 10713 01b0 6D794746 		.ascii	"myGFX\000"
 10713      5800
 10714              	.LASF30:
 10715 01b6 66697273 		.ascii	"first\000"
 10715      7400
 10716              	.LASF101:
 10717 01bc 62697473 		.ascii	"bits\000"
 10717      00
 10718              	.LASF9:
 10719 01c1 6C6F6E67 		.ascii	"long int\000"
 10719      20696E74 
 10719      00
 10720              	.LASF97:
 10721 01ca 656E6457 		.ascii	"endWrite\000"
 10721      72697465 
 10721      00
 10722              	.LASF120:
 10723 01d3 6D696E78 		.ascii	"minx\000"
 10723      00
 10724              	.LASF121:
 10725 01d8 6D696E79 		.ascii	"miny\000"
 10725      00
 10726              	.LASF63:
 10727 01dd 47465864 		.ascii	"GFXdrawPixel\000"
 10727      72617750 
 10727      6978656C 
 10727      00
 10728              	.LASF5:
 10729 01ea 73686F72 		.ascii	"short int\000"
 10729      7420696E 
 10729      7400
 10730              	.LASF54:
 10731 01f4 6175746F 		.ascii	"autoscroll\000"
 10731      7363726F 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 212


 10731      6C6C00
 10732              	.LASF35:
 10733 01ff 646F7562 		.ascii	"double\000"
 10733      6C6500
 10734              	.LASF65:
 10735 0206 47465877 		.ascii	"GFXwriteFastVLine\000"
 10735      72697465 
 10735      46617374 
 10735      564C696E 
 10735      6500
 10736              	.LASF49:
 10737 0218 77726170 		.ascii	"wrap\000"
 10737      00
 10738              	.LASF7:
 10739 021d 73686F72 		.ascii	"short unsigned int\000"
 10739      7420756E 
 10739      7369676E 
 10739      65642069 
 10739      6E7400
 10740              	.LASF53:
 10741 0230 666F6E74 		.ascii	"fontDesc\000"
 10741      44657363 
 10741      00
 10742              	.LASF6:
 10743 0239 5F5F7569 		.ascii	"__uint16_t\000"
 10743      6E743136 
 10743      5F7400
 10744              	.LASF95:
 10745 0244 62797465 		.ascii	"byte\000"
 10745      00
 10746              	.LASF57:
 10747 0249 47465877 		.ascii	"GFXwriteLine\000"
 10747      72697465 
 10747      4C696E65 
 10747      00
 10748              	.LASF10:
 10749 0256 5F5F7569 		.ascii	"__uint32_t\000"
 10749      6E743332 
 10749      5F7400
 10750              	.LASF156:
 10751 0261 433A5C55 		.ascii	"C:\\Users\\JeffSnyder\\dev\\Electrosteel_embedded\\"
 10751      73657273 
 10751      5C4A6566 
 10751      66536E79 
 10751      6465725C 
 10752 028f 50534F43 		.ascii	"PSOC5_electrosteel_stringsensors_newpcb_brain\\CE21"
 10752      355F656C 
 10752      65637472 
 10752      6F737465 
 10752      656C5F73 
 10753 02c1 30353134 		.ascii	"0514_PSOC3_5_Thermistor.cydsn\000"
 10753      5F50534F 
 10753      43335F35 
 10753      5F546865 
 10753      726D6973 
 10754              	.LASF140:
 10755 02df 6F666673 		.ascii	"offset\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 213


 10755      657400
 10756              	.LASF112:
 10757 02e6 47465873 		.ascii	"GFXsetTextSize\000"
 10757      65745465 
 10757      78745369 
 10757      7A6500
 10758              	.LASF4:
 10759 02f5 5F5F696E 		.ascii	"__int16_t\000"
 10759      7431365F 
 10759      7400
 10760              	.LASF98:
 10761 02ff 47465864 		.ascii	"GFXdrawChar\000"
 10761      72617743 
 10761      68617200 
 10762              	.LASF106:
 10763 030b 666F6E74 		.ascii	"fontOffset\000"
 10763      4F666673 
 10763      657400
 10764              	.LASF68:
 10765 0316 47465865 		.ascii	"GFXendWrite\000"
 10765      6E645772 
 10765      69746500 
 10766              	.LASF91:
 10767 0322 64783132 		.ascii	"dx12\000"
 10767      00
 10768              	.LASF14:
 10769 0327 756E7369 		.ascii	"unsigned int\000"
 10769      676E6564 
 10769      20696E74 
 10769      00
 10770              	.LASF18:
 10771 0334 75696E74 		.ascii	"uint16_t\000"
 10771      31365F74 
 10771      00
 10772              	.LASF46:
 10773 033d 74657874 		.ascii	"textsize\000"
 10773      73697A65 
 10773      00
 10774              	.LASF11:
 10775 0346 6C6F6E67 		.ascii	"long unsigned int\000"
 10775      20756E73 
 10775      69676E65 
 10775      6420696E 
 10775      7400
 10776              	.LASF27:
 10777 0358 47465867 		.ascii	"GFXglyph\000"
 10777      6C797068 
 10777      00
 10778              	.LASF29:
 10779 0361 676C7970 		.ascii	"glyph\000"
 10779      6800
 10780              	.LASF41:
 10781 0367 5F776964 		.ascii	"_width\000"
 10781      746800
 10782              	.LASF76:
 10783 036e 6464465F 		.ascii	"ddF_y\000"
 10783      7900
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 214


 10784              	.LASF22:
 10785 0374 77696474 		.ascii	"width\000"
 10785      6800
 10786              	.LASF142:
 10787 037a 4F4C4544 		.ascii	"OLEDparseFixedFloat\000"
 10787      70617273 
 10787      65466978 
 10787      6564466C 
 10787      6F617400 
 10788              	.LASF62:
 10789 038e 47465873 		.ascii	"GFXstartWrite\000"
 10789      74617274 
 10789      57726974 
 10789      6500
 10790              	.LASF75:
 10791 039c 6464465F 		.ascii	"ddF_x\000"
 10791      7800
 10792              	.LASF66:
 10793 03a2 47465877 		.ascii	"GFXwriteFastHLine\000"
 10793      72697465 
 10793      46617374 
 10793      484C696E 
 10793      6500
 10794              	.LASF113:
 10795 03b4 47465873 		.ascii	"GFXsetTextColor\000"
 10795      65745465 
 10795      7874436F 
 10795      6C6F7200 
 10796              	.LASF8:
 10797 03c4 5F5F696E 		.ascii	"__int32_t\000"
 10797      7433325F 
 10797      7400
 10798              	.LASF82:
 10799 03ce 47465864 		.ascii	"GFXdrawRect\000"
 10799      72617752 
 10799      65637400 
 10800              	.LASF104:
 10801 03da 47465863 		.ascii	"GFXcheckScrollWrap\000"
 10801      6865636B 
 10801      5363726F 
 10801      6C6C5772 
 10801      617000
 10802              	.LASF87:
 10803 03ed 64783031 		.ascii	"dx01\000"
 10803      00
 10804              	.LASF33:
 10805 03f2 47465866 		.ascii	"GFXfont\000"
 10805      6F6E7400 
 10806              	.LASF131:
 10807 03fa 6E756D44 		.ascii	"numDigits\000"
 10807      69676974 
 10807      7300
 10808              	.LASF70:
 10809 0404 47465864 		.ascii	"GFXdrawFastHLine\000"
 10809      72617746 
 10809      61737448 
 10809      4C696E65 
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 215


 10809      00
 10810              	.LASF25:
 10811 0415 784F6666 		.ascii	"xOffset\000"
 10811      73657400 
 10812              	.LASF141:
 10813 041d 4F4C4544 		.ascii	"OLEDparsePitchClass\000"
 10813      70617273 
 10813      65506974 
 10813      6368436C 
 10813      61737300 
 10814              	.LASF38:
 10815 0431 73697A65 		.ascii	"sizetype\000"
 10815      74797065 
 10815      00
 10816              	.LASF155:
 10817 043a 6766782E 		.ascii	"gfx.c\000"
 10817      6300
 10818              	.LASF37:
 10819 0440 6C6F6E67 		.ascii	"long double\000"
 10819      20646F75 
 10819      626C6500 
 10820              	.LASF60:
 10821 044c 73746565 		.ascii	"steep\000"
 10821      7000
 10822              	.LASF137:
 10823 0452 70636C61 		.ascii	"pclass\000"
 10823      737300
 10824              	.LASF84:
 10825 0459 47465866 		.ascii	"GFXfillRoundRect\000"
 10825      696C6C52 
 10825      6F756E64 
 10825      52656374 
 10825      00
 10826              	.LASF116:
 10827 046a 47465873 		.ascii	"GFXsetRotation\000"
 10827      6574526F 
 10827      74617469 
 10827      6F6E00
 10828              	.LASF71:
 10829 0479 47465866 		.ascii	"GFXfillRect\000"
 10829      696C6C52 
 10829      65637400 
 10830              	.LASF157:
 10831 0485 5F474658 		.ascii	"_GFX\000"
 10831      00
 10832              	.LASF107:
 10833 048a 63757273 		.ascii	"cursor\000"
 10833      6F7200
 10834              	.LASF31:
 10835 0491 6C617374 		.ascii	"last\000"
 10835      00
 10836              	.LASF83:
 10837 0496 47465864 		.ascii	"GFXdrawRoundRect\000"
 10837      72617752 
 10837      6F756E64 
 10837      52656374 
 10837      00
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 216


 10838              	.LASF69:
 10839 04a7 47465864 		.ascii	"GFXdrawFastVLine\000"
 10839      72617746 
 10839      61737456 
 10839      4C696E65 
 10839      00
 10840              	.LASF34:
 10841 04b8 666C6F61 		.ascii	"float\000"
 10841      7400
 10842              	.LASF64:
 10843 04be 47465877 		.ascii	"GFXwritePixel\000"
 10843      72697465 
 10843      50697865 
 10843      6C00
 10844              	.LASF86:
 10845 04cc 47465866 		.ascii	"GFXfillTriangle\000"
 10845      696C6C54 
 10845      7269616E 
 10845      676C6500 
 10846              	.LASF146:
 10847 04dc 6E6F6E7A 		.ascii	"nonzeroHasHappened\000"
 10847      65726F48 
 10847      61734861 
 10847      7070656E 
 10847      656400
 10848              	.LASF109:
 10849 04ef 47465873 		.ascii	"GFXsetCursor\000"
 10849      65744375 
 10849      72736F72 
 10849      00
 10850              	.LASF145:
 10851 04fc 706F7765 		.ascii	"power\000"
 10851      7200
 10852              	.LASF19:
 10853 0502 696E7433 		.ascii	"int32_t\000"
 10853      325F7400 
 10854              	.LASF3:
 10855 050a 756E7369 		.ascii	"unsigned char\000"
 10855      676E6564 
 10855      20636861 
 10855      7200
 10856              	.LASF40:
 10857 0518 48454947 		.ascii	"HEIGHT\000"
 10857      485400
 10858              	.LASF139:
 10859 051f 6E6F7465 		.ascii	"note\000"
 10859      00
 10860              	.LASF23:
 10861 0524 68656967 		.ascii	"height\000"
 10861      687400
 10862              	.LASF56:
 10863 052b 47465869 		.ascii	"GFXinit\000"
 10863      6E697400 
 10864              	.LASF24:
 10865 0533 78416476 		.ascii	"xAdvance\000"
 10865      616E6365 
 10865      00
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 217


 10866              	.LASF77:
 10867 053c 47465864 		.ascii	"GFXdrawCircleHelper\000"
 10867      72617743 
 10867      6972636C 
 10867      6548656C 
 10867      70657200 
 10868              	.LASF61:
 10869 0550 79737465 		.ascii	"ystep\000"
 10869      7000
 10870              	.LASF80:
 10871 0556 47465866 		.ascii	"GFXfillCircleHelper\000"
 10871      696C6C43 
 10871      6972636C 
 10871      6548656C 
 10871      70657200 
 10872              	.LASF129:
 10873 056a 62756666 		.ascii	"buffer\000"
 10873      657200
 10874              	.LASF143:
 10875 0571 696E7075 		.ascii	"input\000"
 10875      7400
 10876              	.LASF126:
 10877 0577 47465868 		.ascii	"GFXheight\000"
 10877      65696768 
 10877      7400
 10878              	.LASF85:
 10879 0581 47465864 		.ascii	"GFXdrawTriangle\000"
 10879      72617754 
 10879      7269616E 
 10879      676C6500 
 10880              	.LASF79:
 10881 0591 47465866 		.ascii	"GFXfillCircle\000"
 10881      696C6C43 
 10881      6972636C 
 10881      6500
 10882              	.LASF78:
 10883 059f 636F726E 		.ascii	"cornername\000"
 10883      65726E61 
 10883      6D6500
 10884              	.LASF20:
 10885 05aa 75696E74 		.ascii	"uint32_t\000"
 10885      33325F74 
 10885      00
 10886              	.LASF144:
 10887 05b3 6E756D44 		.ascii	"numDecimal\000"
 10887      6563696D 
 10887      616C00
 10888              	.LASF150:
 10889 05be 47465873 		.ascii	"GFXscrollLeft\000"
 10889      63726F6C 
 10889      6C4C6566 
 10889      7400
 10890              	.LASF117:
 10891 05cc 47465863 		.ascii	"GFXcp437\000"
 10891      70343337 
 10891      00
 10892              	.LASF32:
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 218


 10893 05d5 79416476 		.ascii	"yAdvance\000"
 10893      616E6365 
 10893      00
 10894              	.LASF45:
 10895 05de 63757273 		.ascii	"cursor_x\000"
 10895      6F725F78 
 10895      00
 10896              	.LASF44:
 10897 05e7 63757273 		.ascii	"cursor_y\000"
 10897      6F725F79 
 10897      00
 10898              	.LASF124:
 10899 05f0 47465867 		.ascii	"GFXgetTextBounds\000"
 10899      65745465 
 10899      7874426F 
 10899      756E6473 
 10899      00
 10900              	.LASF36:
 10901 0601 63686172 		.ascii	"char\000"
 10901      00
 10902              	.LASF94:
 10903 0606 62797465 		.ascii	"byteWidth\000"
 10903      57696474 
 10903      6800
 10904              	.LASF149:
 10905 0610 47465873 		.ascii	"GFXscrollDown\000"
 10905      63726F6C 
 10905      6C446F77 
 10905      6E00
 10906              	.LASF147:
 10907 061e 64656369 		.ascii	"decimalHasHappened\000"
 10907      6D616C48 
 10907      61734861 
 10907      7070656E 
 10907      656400
 10908              	.LASF50:
 10909 0631 5F637034 		.ascii	"_cp437\000"
 10909      333700
 10910              	.LASF47:
 10911 0638 74657874 		.ascii	"textcolor\000"
 10911      636F6C6F 
 10911      7200
 10912              	.LASF100:
 10913 0642 6C696E65 		.ascii	"line\000"
 10913      00
 10914              	.LASF132:
 10915 0647 77686963 		.ascii	"whichPlace\000"
 10915      68506C61 
 10915      636500
 10916              	.LASF73:
 10917 0652 47465864 		.ascii	"GFXdrawLine\000"
 10917      7261774C 
 10917      696E6500 
 10918              	.LASF118:
 10919 065e 47465873 		.ascii	"GFXsetFont\000"
 10919      6574466F 
 10919      6E7400
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 219


 10920              	.LASF43:
 10921 0669 726F7461 		.ascii	"rotation\000"
 10921      74696F6E 
 10921      00
 10922              	.LASF130:
 10923 0672 6D794E75 		.ascii	"myNumber\000"
 10923      6D626572 
 10923      00
 10924              	.LASF15:
 10925 067b 696E7438 		.ascii	"int8_t\000"
 10925      5F7400
 10926              	.LASF138:
 10927 0682 6F637461 		.ascii	"octave\000"
 10927      766500
 10928              	.LASF135:
 10929 0689 6D696469 		.ascii	"midi\000"
 10929      00
 10930              	.LASF127:
 10931 068e 47465869 		.ascii	"GFXinvertDisplay\000"
 10931      6E766572 
 10931      74446973 
 10931      706C6179 
 10931      00
 10932              	.LASF42:
 10933 069f 5F686569 		.ascii	"_height\000"
 10933      67687400 
 10934              	.LASF134:
 10935 06a7 4F4C4544 		.ascii	"OLEDparsePitch\000"
 10935      70617273 
 10935      65506974 
 10935      636800
 10936              	.LASF55:
 10937 06b6 6D794766 		.ascii	"myGfx\000"
 10937      7800
 10938              	.LASF16:
 10939 06bc 75696E74 		.ascii	"uint8_t\000"
 10939      385F7400 
 10940              	.LASF74:
 10941 06c4 47465864 		.ascii	"GFXdrawCircle\000"
 10941      72617743 
 10941      6972636C 
 10941      6500
 10942              	.LASF28:
 10943 06d2 6269746D 		.ascii	"bitmap\000"
 10943      617000
 10944              	.LASF67:
 10945 06d9 47465877 		.ascii	"GFXwriteFillRect\000"
 10945      72697465 
 10945      46696C6C 
 10945      52656374 
 10945      00
 10946              	.LASF96:
 10947 06ea 73746172 		.ascii	"startWrite\000"
 10947      74577269 
 10947      746500
 10948              	.LASF103:
 10949 06f5 796F3136 		.ascii	"yo16\000"
ARM GAS  C:\Users\JEFFSN~1\AppData\Local\Temp\ccogK82D.s 			page 220


 10949      00
 10950              	.LASF148:
 10951 06fa 47465873 		.ascii	"GFXscrollUp\000"
 10951      63726F6C 
 10951      6C557000 
 10952              	.LASF48:
 10953 0706 74657874 		.ascii	"textbgcolor\000"
 10953      6267636F 
 10953      6C6F7200 
 10954              	.LASF114:
 10955 0712 47465873 		.ascii	"GFXsetTextWrap\000"
 10955      65745465 
 10955      78745772 
 10955      617000
 10956              	.LASF21:
 10957 0721 6269746D 		.ascii	"bitmapOffset\000"
 10957      61704F66 
 10957      66736574 
 10957      00
 10958              	.LASF115:
 10959 072e 47465867 		.ascii	"GFXgetRotation\000"
 10959      6574526F 
 10959      74617469 
 10959      6F6E00
 10960              	.LASF122:
 10961 073d 6D617878 		.ascii	"maxx\000"
 10961      00
 10962              	.LASF123:
 10963 0742 6D617879 		.ascii	"maxy\000"
 10963      00
 10964              	.LASF17:
 10965 0747 696E7431 		.ascii	"int16_t\000"
 10965      365F7400 
 10966              	.LASF119:
 10967 074f 47465863 		.ascii	"GFXcharBounds\000"
 10967      68617242 
 10967      6F756E64 
 10967      7300
 10968              	.LASF39:
 10969 075d 57494454 		.ascii	"WIDTH\000"
 10969      4800
 10970              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
