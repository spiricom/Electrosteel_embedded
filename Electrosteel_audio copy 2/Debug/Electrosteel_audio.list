
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f1c8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018ee0  0801f460  0801f460  0002f460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08038340  08038340  000507d8  2**0
                  CONTENTS
  4 .ARM          00000000  08038340  08038340  000507d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08038340  08038340  000507d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08038340  08038340  00048340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08038344  08038344  00048344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007d8  20000000  08038348  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019714  200007d8  08038b20  000507d8  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20019eec  08038b20  00059eec  2**0
                  ALLOC
 11 .RAM_D1       00076fa0  24000000  24000000  00060000  2**5
                  ALLOC
 12 .RAM_D2       000011e0  30000000  30000000  00060000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00060000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000507d8  2**0
                  CONTENTS, READONLY
 15 .comment      000000b8  00000000  00000000  00050806  2**0
                  CONTENTS, READONLY
 16 .debug_info   000800ec  00000000  00000000  000508be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00009b64  00000000  00000000  000d09aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 0004eeff  00000000  00000000  000da50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000038c0  00000000  00000000  00129410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000894f  00000000  00000000  0012ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00058d25  00000000  00000000  0013561f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00011a62  00000000  00000000  0018e344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000c8d4  00000000  00000000  0019fda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006d  00000000  00000000  001ac67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    000000fa  00000000  00000000  001ac6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 00000010  00000000  00000000  001ac7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200007d8 	.word	0x200007d8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801f448 	.word	0x0801f448

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200007dc 	.word	0x200007dc
 80002d4:	0801f448 	.word	0x0801f448

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	3c01      	subs	r4, #1
 8000424:	bf28      	it	cs
 8000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800042a:	d2e9      	bcs.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000664:	4cf2      	ldr	r4, [pc, #968]	; (8000a30 <audioInit+0x3d0>)
{
 8000666:	460d      	mov	r5, r1
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000668:	ed9f 0af2 	vldr	s0, [pc, #968]	; 8000a34 <audioInit+0x3d4>
 800066c:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 8000670:	4620      	mov	r0, r4
 8000672:	49f1      	ldr	r1, [pc, #964]	; (8000a38 <audioInit+0x3d8>)
 8000674:	4bf1      	ldr	r3, [pc, #964]	; (8000a3c <audioInit+0x3dc>)
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);

	leaf.clearOnAllocation = 1;
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000676:	4ef2      	ldr	r6, [pc, #968]	; (8000a40 <audioInit+0x3e0>)
{
 8000678:	ed2d 8b10 	vpush	{d8-d15}
 800067c:	b087      	sub	sp, #28
 800067e:	9505      	str	r5, [sp, #20]
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000680:	f01c fb72 	bl	801cd68 <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000684:	4623      	mov	r3, r4
 8000686:	4aef      	ldr	r2, [pc, #956]	; (8000a44 <audioInit+0x3e4>)
 8000688:	49ef      	ldr	r1, [pc, #956]	; (8000a48 <audioInit+0x3e8>)
 800068a:	48f0      	ldr	r0, [pc, #960]	; (8000a4c <audioInit+0x3ec>)
 800068c:	f016 fda0 	bl	80171d0 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 8000690:	4623      	mov	r3, r4
 8000692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000696:	49ee      	ldr	r1, [pc, #952]	; (8000a50 <audioInit+0x3f0>)
 8000698:	48ee      	ldr	r0, [pc, #952]	; (8000a54 <audioInit+0x3f4>)
 800069a:	f016 fd99 	bl	80171d0 <tMempool_init>
	leaf.clearOnAllocation = 1;
 800069e:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 80006a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	eddf 1aeb 	vldr	s3, [pc, #940]	; 8000a58 <audioInit+0x3f8>
 80006ac:	eddf 0aeb 	vldr	s1, [pc, #940]	; 8000a5c <audioInit+0x3fc>
 80006b0:	ed9f 0aeb 	vldr	s0, [pc, #940]	; 8000a60 <audioInit+0x400>
 80006b4:	48eb      	ldr	r0, [pc, #940]	; (8000a64 <audioInit+0x404>)
	leaf.clearOnAllocation = 1;
 80006b6:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 80006b8:	f016 fb28 	bl	8016d0c <LEAF_generate_exp>
	invNumOvertones = 1.0f / NUM_OVERTONES;

	for (int i = 0; i < NUM_OVERTONES; i++)
	{
		totalGain[0] += partials[i];
 80006bc:	4cea      	ldr	r4, [pc, #936]	; (8000a68 <audioInit+0x408>)
 80006be:	4aeb      	ldr	r2, [pc, #940]	; (8000a6c <audioInit+0x40c>)
		totalGain[1] += partialsHigh[i];
 80006c0:	49eb      	ldr	r1, [pc, #940]	; (8000a70 <audioInit+0x410>)
		totalGain[0] += partials[i];
 80006c2:	ed92 1a00 	vldr	s2, [r2]
 80006c6:	ed94 3a00 	vldr	s6, [r4]
		totalGain[1] += partialsHigh[i];
 80006ca:	edd1 7a00 	vldr	s15, [r1]
		totalGain[0] += partials[i];
 80006ce:	ee33 3a01 	vadd.f32	s6, s6, s2
		totalGain[1] += partialsHigh[i];
 80006d2:	edd4 3a01 	vldr	s7, [r4, #4]
		totalGain[0] += partials[i];
 80006d6:	edd2 0a01 	vldr	s1, [r2, #4]
		totalGain[1] += partialsHigh[i];
 80006da:	ee73 3aa7 	vadd.f32	s7, s7, s15
 80006de:	edd1 1a01 	vldr	s3, [r1, #4]
		totalGain[0] += partials[i];
 80006e2:	ee33 3a20 	vadd.f32	s6, s6, s1
 80006e6:	edd2 2a02 	vldr	s5, [r2, #8]
		totalGain[1] += partialsHigh[i];
 80006ea:	edd1 4a02 	vldr	s9, [r1, #8]
 80006ee:	ee73 3aa1 	vadd.f32	s7, s7, s3
		totalGain[0] += partials[i];
 80006f2:	ed92 6a03 	vldr	s12, [r2, #12]
 80006f6:	ee33 3a22 	vadd.f32	s6, s6, s5
		totalGain[1] += partialsHigh[i];
 80006fa:	ed91 1a03 	vldr	s2, [r1, #12]
		for (int j = 0; j < 3; j++)

		{
			for (int k = 0; k < 3; k++)
			{
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80006fe:	4bdd      	ldr	r3, [pc, #884]	; (8000a74 <audioInit+0x414>)
		totalGain[1] += partialsHigh[i];
 8000700:	ee73 3aa4 	vadd.f32	s7, s7, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000704:	48dc      	ldr	r0, [pc, #880]	; (8000a78 <audioInit+0x418>)
		totalGain[0] += partials[i];
 8000706:	ee33 3a06 	vadd.f32	s6, s6, s12
 800070a:	ed92 4a04 	vldr	s8, [r2, #16]
		totalGain[1] += partialsHigh[i];
 800070e:	edd1 7a04 	vldr	s15, [r1, #16]
 8000712:	ee73 3a81 	vadd.f32	s7, s7, s2
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000716:	ed93 1a00 	vldr	s2, [r3]
		totalGain[0] += partials[i];
 800071a:	ee33 3a04 	vadd.f32	s6, s6, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 800071e:	ed90 4a00 	vldr	s8, [r0]
		totalGain[0] += partials[i];
 8000722:	ed92 0a05 	vldr	s0, [r2, #20]
		totalGain[1] += partialsHigh[i];
 8000726:	ee73 3aa7 	vadd.f32	s7, s7, s15
 800072a:	edd1 2a05 	vldr	s5, [r1, #20]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 800072e:	ee34 4a01 	vadd.f32	s8, s8, s2
		totalGain[1] += partialsHigh[i];
 8000732:	edd1 0a06 	vldr	s1, [r1, #24]
		totalGain[0] += partials[i];
 8000736:	ee33 3a00 	vadd.f32	s6, s6, s0
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 800073a:	ed93 0a01 	vldr	s0, [r3, #4]
		totalGain[1] += partialsHigh[i];
 800073e:	ee73 3aa2 	vadd.f32	s7, s7, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000742:	ed93 1a02 	vldr	s2, [r3, #8]
 8000746:	ee34 4a00 	vadd.f32	s8, s8, s0
		totalGain[0] += partials[i];
 800074a:	edd2 5a06 	vldr	s11, [r2, #24]
		totalGain[1] += partialsHigh[i];
 800074e:	edd1 1a07 	vldr	s3, [r1, #28]
 8000752:	ee73 3aa0 	vadd.f32	s7, s7, s1
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000756:	edd3 2a03 	vldr	s5, [r3, #12]
 800075a:	ee34 4a01 	vadd.f32	s8, s8, s2
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 800075e:	4dc7      	ldr	r5, [pc, #796]	; (8000a7c <audioInit+0x41c>)
		totalGain[0] += partials[i];
 8000760:	ee33 3a25 	vadd.f32	s6, s6, s11
 8000764:	edd2 6a07 	vldr	s13, [r2, #28]
		totalGain[1] += partialsHigh[i];
 8000768:	ee73 3aa1 	vadd.f32	s7, s7, s3
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 800076c:	602e      	str	r6, [r5, #0]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 800076e:	ee34 4a22 	vadd.f32	s8, s8, s5
		totalGain[1] += partialsHigh[i];
 8000772:	edd1 4a08 	vldr	s9, [r1, #32]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000776:	edd3 5a04 	vldr	s11, [r3, #16]
		totalGain[0] += partials[i];
 800077a:	ee33 3a26 	vadd.f32	s6, s6, s13
	invNumOvertones = 1.0f / NUM_OVERTONES;
 800077e:	4dc0      	ldr	r5, [pc, #768]	; (8000a80 <audioInit+0x420>)
		totalGain[1] += partialsHigh[i];
 8000780:	ee73 3aa4 	vadd.f32	s7, s7, s9
	invNumOvertones = 1.0f / NUM_OVERTONES;
 8000784:	4ebf      	ldr	r6, [pc, #764]	; (8000a84 <audioInit+0x424>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000786:	ee34 4a25 	vadd.f32	s8, s8, s11
		totalGain[0] += partials[i];
 800078a:	ed92 2a08 	vldr	s4, [r2, #32]
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 800078e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
		totalGain[0] += partials[i];
 8000792:	ed92 5a09 	vldr	s10, [r2, #36]	; 0x24
 8000796:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
 800079a:	ee33 3a02 	vadd.f32	s6, s6, s4
		totalGain[1] += partialsHigh[i];
 800079e:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80007a2:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
	invNumOvertones = 1.0f / NUM_OVERTONES;
 80007a6:	602e      	str	r6, [r5, #0]
		totalGain[0] += partials[i];
 80007a8:	ee33 3a05 	vadd.f32	s6, s6, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80007ac:	edd3 0a05 	vldr	s1, [r3, #20]
		totalGain[1] += partialsHigh[i];
 80007b0:	ee73 3a86 	vadd.f32	s7, s7, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80007b4:	edd0 4a01 	vldr	s9, [r0, #4]
 80007b8:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 80007bc:	ee34 4a20 	vadd.f32	s8, s8, s1
 80007c0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
		totalGain[0] += partials[i];
 80007c4:	ee33 3a07 	vadd.f32	s6, s6, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80007c8:	ee74 4a80 	vadd.f32	s9, s9, s0
 80007cc:	edd3 2a06 	vldr	s5, [r3, #24]
 80007d0:	edd3 5a0e 	vldr	s11, [r3, #56]	; 0x38
		totalGain[1] += partialsHigh[i];
 80007d4:	ee73 3aa7 	vadd.f32	s7, s7, s15
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80007d8:	ee34 4a22 	vadd.f32	s8, s8, s5
 80007dc:	ed93 5a07 	vldr	s10, [r3, #28]
 80007e0:	ee74 4a82 	vadd.f32	s9, s9, s4
 80007e4:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 80007e8:	ed93 7a08 	vldr	s14, [r3, #32]
 80007ec:	ee34 4a05 	vadd.f32	s8, s8, s10
 80007f0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80007f4:	ee74 4aa5 	vadd.f32	s9, s9, s11
 80007f8:	ed90 5a02 	vldr	s10, [r0, #8]
 80007fc:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8000800:	ee34 4a07 	vadd.f32	s8, s8, s14
 8000804:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8000808:	ee74 4a86 	vadd.f32	s9, s9, s12
 800080c:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
 8000810:	ee35 5a07 	vadd.f32	s10, s10, s14
 8000814:	edd3 0a12 	vldr	s1, [r3, #72]	; 0x48
 8000818:	ee34 4a01 	vadd.f32	s8, s8, s2
 800081c:	ed93 1a1a 	vldr	s2, [r3, #104]	; 0x68
 8000820:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8000824:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000828:	edd3 2a13 	vldr	s5, [r3, #76]	; 0x4c
 800082c:	ee35 5a27 	vadd.f32	s10, s10, s15
 8000830:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8000834:	ee74 4a80 	vadd.f32	s9, s9, s0
 8000838:	edd3 5a14 	vldr	s11, [r3, #80]	; 0x50
 800083c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8000840:	ee35 5a01 	vadd.f32	s10, s10, s2
 8000844:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8000848:	ee74 4aa0 	vadd.f32	s9, s9, s1
 800084c:	ed93 2a15 	vldr	s4, [r3, #84]	; 0x54
 8000850:	ee34 4a21 	vadd.f32	s8, s8, s3
 8000854:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8000858:	ee35 5a07 	vadd.f32	s10, s10, s14
 800085c:	edd3 1a1d 	vldr	s3, [r3, #116]	; 0x74
 8000860:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8000864:	ed93 0a1e 	vldr	s0, [r3, #120]	; 0x78
 8000868:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 800086c:	ee86 aa84 	vdiv.f32	s20, s13, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000870:	edd3 0a20 	vldr	s1, [r3, #128]	; 0x80
 8000874:	ed93 1a21 	vldr	s2, [r3, #132]	; 0x84
 8000878:	edd3 2a22 	vldr	s5, [r3, #136]	; 0x88
 800087c:	ee74 4aa5 	vadd.f32	s9, s9, s11
 8000880:	edd0 5a03 	vldr	s11, [r0, #12]
 8000884:	ee35 5a27 	vadd.f32	s10, s10, s15
 8000888:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800088c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8000890:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8000894:	ee74 4a82 	vadd.f32	s9, s9, s4
 8000898:	ed93 2a26 	vldr	s4, [r3, #152]	; 0x98
 800089c:	ee35 5a21 	vadd.f32	s10, s10, s3
 80008a0:	edd3 1a29 	vldr	s3, [r3, #164]	; 0xa4
 80008a4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80008a8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80008ac:	ee74 4a86 	vadd.f32	s9, s9, s12
 80008b0:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 80008b4:	ee35 5a00 	vadd.f32	s10, s10, s0
 80008b8:	ed93 0a2d 	vldr	s0, [r3, #180]	; 0xb4
 80008bc:	ee75 5a82 	vadd.f32	s11, s11, s4
 80008c0:	ed93 2a2c 	vldr	s4, [r3, #176]	; 0xb0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 80008c4:	eec6 9aa4 	vdiv.f32	s19, s13, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80008c8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80008cc:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80008d0:	ee35 5a07 	vadd.f32	s10, s10, s14
 80008d4:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80008d8:	ee75 5a86 	vadd.f32	s11, s11, s12
 80008dc:	ed90 6a04 	vldr	s12, [r0, #16]
 80008e0:	ee35 5a20 	vadd.f32	s10, s10, s1
 80008e4:	edd3 0a2e 	vldr	s1, [r3, #184]	; 0xb8
 80008e8:	ee75 5aa1 	vadd.f32	s11, s11, s3
 80008ec:	edd3 1a33 	vldr	s3, [r3, #204]	; 0xcc
 80008f0:	ee35 5a01 	vadd.f32	s10, s10, s2
 80008f4:	ed93 1a31 	vldr	s2, [r3, #196]	; 0xc4
 80008f8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80008fc:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8000900:	ee35 5a22 	vadd.f32	s10, s10, s5
 8000904:	edd3 2a32 	vldr	s5, [r3, #200]	; 0xc8
 8000908:	ee36 6a07 	vadd.f32	s12, s12, s14
 800090c:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 8000910:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8000914:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000918:	ee86 9a85 	vdiv.f32	s18, s13, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 800091c:	ee36 6a01 	vadd.f32	s12, s12, s2
 8000920:	ed93 1a37 	vldr	s2, [r3, #220]	; 0xdc
 8000924:	ee75 5a82 	vadd.f32	s11, s11, s4
 8000928:	ed93 2a36 	vldr	s4, [r3, #216]	; 0xd8
 800092c:	ee36 6a22 	vadd.f32	s12, s12, s5
 8000930:	edd3 2a38 	vldr	s5, [r3, #224]	; 0xe0
 8000934:	ee75 5a80 	vadd.f32	s11, s11, s0
 8000938:	ed93 0a39 	vldr	s0, [r3, #228]	; 0xe4
 800093c:	ee36 6a21 	vadd.f32	s12, s12, s3
 8000940:	edd3 1a3a 	vldr	s3, [r3, #232]	; 0xe8
 8000944:	ee75 5aa0 	vadd.f32	s11, s11, s1
 8000948:	edd3 0a3c 	vldr	s1, [r3, #240]	; 0xf0
 800094c:	ee36 6a07 	vadd.f32	s12, s12, s14
 8000950:	ed90 7a05 	vldr	s14, [r0, #20]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000954:	eec6 8aa5 	vdiv.f32	s17, s13, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000958:	ee37 7a20 	vadd.f32	s14, s14, s1
 800095c:	edd3 0a40 	vldr	s1, [r3, #256]	; 0x100
 8000960:	ee36 6a27 	vadd.f32	s12, s12, s15
 8000964:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8000968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800096c:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8000970:	ee36 6a02 	vadd.f32	s12, s12, s4
 8000974:	ed93 2a3e 	vldr	s4, [r3, #248]	; 0xf8
 8000978:	ee37 7a02 	vadd.f32	s14, s14, s4
 800097c:	ed93 2a43 	vldr	s4, [r3, #268]	; 0x10c
 8000980:	ee36 6a01 	vadd.f32	s12, s12, s2
 8000984:	ed93 1a44 	vldr	s2, [r3, #272]	; 0x110
 8000988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800098c:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8000990:	ee36 6a22 	vadd.f32	s12, s12, s5
 8000994:	edd3 2a41 	vldr	s5, [r3, #260]	; 0x104
 8000998:	ee37 7a20 	vadd.f32	s14, s14, s1
 800099c:	ee36 6a00 	vadd.f32	s12, s12, s0
 80009a0:	ed93 0a45 	vldr	s0, [r3, #276]	; 0x114
 80009a4:	ed93 8a48 	vldr	s16, [r3, #288]	; 0x120
 80009a8:	ee37 7a22 	vadd.f32	s14, s14, s5
 80009ac:	edd3 2a49 	vldr	s5, [r3, #292]	; 0x124
 80009b0:	ee36 6a21 	vadd.f32	s12, s12, s3
 80009b4:	edd0 1a06 	vldr	s3, [r0, #24]
 80009b8:	edd3 0a46 	vldr	s1, [r3, #280]	; 0x118
 80009bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009c0:	edd0 7a07 	vldr	s15, [r0, #28]
 80009c4:	ee71 1a88 	vadd.f32	s3, s3, s16
 80009c8:	ed93 8a54 	vldr	s16, [r3, #336]	; 0x150
 80009cc:	ee77 7a88 	vadd.f32	s15, s15, s16
 80009d0:	ed93 8a4a 	vldr	s16, [r3, #296]	; 0x128
 80009d4:	ee37 7a02 	vadd.f32	s14, s14, s4
 80009d8:	ed93 2a55 	vldr	s4, [r3, #340]	; 0x154
 80009dc:	ee71 1aa2 	vadd.f32	s3, s3, s5
 80009e0:	edd0 2a08 	vldr	s5, [r0, #32]
 80009e4:	ee77 7a82 	vadd.f32	s15, s15, s4
 80009e8:	ed93 2a56 	vldr	s4, [r3, #344]	; 0x158
 80009ec:	ee37 7a01 	vadd.f32	s14, s14, s2
 80009f0:	ed93 1a61 	vldr	s2, [r3, #388]	; 0x184
 80009f4:	ee71 1a88 	vadd.f32	s3, s3, s16
 80009f8:	ed93 8a60 	vldr	s16, [r3, #384]	; 0x180
 80009fc:	ee77 7a82 	vadd.f32	s15, s15, s4
 8000a00:	ed93 2a57 	vldr	s4, [r3, #348]	; 0x15c
 8000a04:	ee72 2a88 	vadd.f32	s5, s5, s16
 8000a08:	ee37 7a00 	vadd.f32	s14, s14, s0
 8000a0c:	ed93 0a63 	vldr	s0, [r3, #396]	; 0x18c
 8000a10:	ee77 7a82 	vadd.f32	s15, s15, s4
 8000a14:	ed93 2a58 	vldr	s4, [r3, #352]	; 0x160
 8000a18:	ee72 2a81 	vadd.f32	s5, s5, s2
 8000a1c:	ed93 1a62 	vldr	s2, [r3, #392]	; 0x188
 8000a20:	ee37 7a20 	vadd.f32	s14, s14, s1
 8000a24:	edd3 0a5a 	vldr	s1, [r3, #360]	; 0x168
 8000a28:	ee77 7a82 	vadd.f32	s15, s15, s4
 8000a2c:	e02c      	b.n	8000a88 <audioInit+0x428>
 8000a2e:	bf00      	nop
 8000a30:	20005184 	.word	0x20005184
 8000a34:	473b8000 	.word	0x473b8000
 8000a38:	20005abc 	.word	0x20005abc
 8000a3c:	08005c11 	.word	0x08005c11
 8000a40:	457ff000 	.word	0x457ff000
 8000a44:	00053020 	.word	0x00053020
 8000a48:	24020000 	.word	0x24020000
 8000a4c:	200053c4 	.word	0x200053c4
 8000a50:	60000000 	.word	0x60000000
 8000a54:	20005180 	.word	0x20005180
 8000a58:	ba51b717 	.word	0xba51b717
 8000a5c:	00000000 	.word	0x00000000
 8000a60:	3a83126f 	.word	0x3a83126f
 8000a64:	20000f80 	.word	0x20000f80
 8000a68:	20012f38 	.word	0x20012f38
 8000a6c:	200000bc 	.word	0x200000bc
 8000a70:	20000104 	.word	0x20000104
 8000a74:	20000324 	.word	0x20000324
 8000a78:	20012f40 	.word	0x20012f40
 8000a7c:	20004f80 	.word	0x20004f80
 8000a80:	200050d8 	.word	0x200050d8
 8000a84:	3dba2e8c 	.word	0x3dba2e8c
 8000a88:	ed93 2a59 	vldr	s4, [r3, #356]	; 0x164
 8000a8c:	ee72 2a81 	vadd.f32	s5, s5, s2
 8000a90:	ed93 1a64 	vldr	s2, [r3, #400]	; 0x190
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000a94:	ee86 8a86 	vdiv.f32	s16, s13, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000a98:	ee77 7a82 	vadd.f32	s15, s15, s4
 8000a9c:	ed93 2a5b 	vldr	s4, [r3, #364]	; 0x16c
 8000aa0:	ee72 2a80 	vadd.f32	s5, s5, s0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000aa4:	ee86 0a87 	vdiv.f32	s0, s13, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000aa8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8000aac:	edd3 0a5c 	vldr	s1, [r3, #368]	; 0x170
 8000ab0:	ee72 2a81 	vadd.f32	s5, s5, s2
 8000ab4:	ed93 1a5d 	vldr	s2, [r3, #372]	; 0x174
 8000ab8:	ee77 7a82 	vadd.f32	s15, s15, s4
 8000abc:	ed93 2a5e 	vldr	s4, [r3, #376]	; 0x178
 8000ac0:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8000ac4:	ee77 7a81 	vadd.f32	s15, s15, s2
 8000ac8:	ee77 aa82 	vadd.f32	s21, s15, s4
 8000acc:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
 8000ad0:	ee86 2a83 	vdiv.f32	s4, s13, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000ad4:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000ad8:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 8000adc:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000ae0:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000ae4:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000ae8:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8000aec:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000af0:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 8000af4:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000af8:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8000afc:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000b00:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8000b04:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000b08:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8000b0c:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000b10:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8000b14:	ed93 1a66 	vldr	s2, [r3, #408]	; 0x198
 8000b18:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8000b1c:	ed80 4a00 	vstr	s8, [r0]
 8000b20:	ed93 4a67 	vldr	s8, [r3, #412]	; 0x19c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000b24:	eec6 0aa1 	vdiv.f32	s1, s13, s3
 8000b28:	ed80 5a02 	vstr	s10, [r0, #8]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000b2c:	ed93 5a68 	vldr	s10, [r3, #416]	; 0x1a0
 8000b30:	ed80 6a04 	vstr	s12, [r0, #16]
 8000b34:	ed93 6a69 	vldr	s12, [r3, #420]	; 0x1a4
 8000b38:	ee77 7a81 	vadd.f32	s15, s15, s2
 8000b3c:	ed80 7a05 	vstr	s14, [r0, #20]
 8000b40:	ed93 7a6a 	vldr	s14, [r3, #424]	; 0x1a8
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000b44:	ee86 1aaa 	vdiv.f32	s2, s13, s21
 8000b48:	edc0 1a06 	vstr	s3, [r0, #24]
 8000b4c:	edc0 4a01 	vstr	s9, [r0, #4]
 8000b50:	edc0 5a03 	vstr	s11, [r0, #12]
 8000b54:	edc0 aa07 	vstr	s21, [r0, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000b58:	ee77 7a84 	vadd.f32	s15, s15, s8
 8000b5c:	ed84 3a00 	vstr	s6, [r4]
	gainNormalizers[1] = 1.0f / totalGain[1];
 8000b60:	eec6 2aa3 	vdiv.f32	s5, s13, s7
 8000b64:	edc4 3a01 	vstr	s7, [r4, #4]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000b68:	ee77 7a85 	vadd.f32	s15, s15, s10
 8000b6c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000b70:	ee77 7a87 	vadd.f32	s15, s15, s14
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000b74:	eec6 1aa7 	vdiv.f32	s3, s13, s15
 8000b78:	edc0 7a08 	vstr	s15, [r0, #32]
 8000b7c:	48df      	ldr	r0, [pc, #892]	; (8000efc <audioInit+0x89c>)
 8000b7e:	ed80 aa00 	vstr	s20, [r0]
 8000b82:	edc0 9a01 	vstr	s19, [r0, #4]
 8000b86:	ed80 9a02 	vstr	s18, [r0, #8]
 8000b8a:	edc0 8a03 	vstr	s17, [r0, #12]
 8000b8e:	ed80 8a04 	vstr	s16, [r0, #16]
 8000b92:	ed80 0a05 	vstr	s0, [r0, #20]
 8000b96:	edc0 0a06 	vstr	s1, [r0, #24]
 8000b9a:	ed80 1a07 	vstr	s2, [r0, #28]
 8000b9e:	edc0 1a08 	vstr	s3, [r0, #32]
	gainNormalizers[0] = 1.0f / totalGain[0];
 8000ba2:	48d7      	ldr	r0, [pc, #860]	; (8000f00 <audioInit+0x8a0>)
 8000ba4:	ed80 2a00 	vstr	s4, [r0]
	gainNormalizers[1] = 1.0f / totalGain[1];
 8000ba8:	edc0 2a01 	vstr	s5, [r0, #4]
	for (int i = 0; i < NUM_OVERTONES; i++)
 8000bac:	f102 002c 	add.w	r0, r2, #44	; 0x2c
			for (int j = 0; j < 3; j++)

			{
				for (int k = 0; k < 3; k++)
				{
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8000bb0:	edd3 7a00 	vldr	s15, [r3]
			partials[i] = partials[i] * gainNormalizers[0];
 8000bb4:	ed92 3a00 	vldr	s6, [r2]
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8000bb8:	ee6a 7a27 	vmul.f32	s15, s20, s15
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 8000bbc:	edd1 3a00 	vldr	s7, [r1]
			partials[i] = partials[i] * gainNormalizers[0];
 8000bc0:	ee22 3a03 	vmul.f32	s6, s4, s6
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 8000bc4:	ee62 3aa3 	vmul.f32	s7, s5, s7
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8000bc8:	ece3 7a01 	vstmia	r3!, {s15}
 8000bcc:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
 8000bd0:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
 8000bd4:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
 8000bd8:	ee24 4a29 	vmul.f32	s8, s8, s19
 8000bdc:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 8000be0:	ee64 4a89 	vmul.f32	s9, s9, s18
 8000be4:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
 8000be8:	ee25 5a28 	vmul.f32	s10, s10, s17
 8000bec:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
 8000bf0:	ee65 5a88 	vmul.f32	s11, s11, s16
 8000bf4:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 8000bf8:	ee26 6a00 	vmul.f32	s12, s12, s0
 8000bfc:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8000c00:	ee66 6aa0 	vmul.f32	s13, s13, s1
 8000c04:	ee27 7a01 	vmul.f32	s14, s14, s2
			partials[i] = partials[i] * gainNormalizers[0];
 8000c08:	eca2 3a01 	vstmia	r2!, {s6}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8000c0c:	ee67 7aa1 	vmul.f32	s15, s15, s3
	for (int i = 0; i < NUM_OVERTONES; i++)
 8000c10:	4282      	cmp	r2, r0
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 8000c12:	ece1 3a01 	vstmia	r1!, {s7}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8000c16:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
 8000c1a:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
 8000c1e:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
 8000c22:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
 8000c26:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
 8000c2a:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
 8000c2e:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
 8000c32:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
 8000c36:	d1bb      	bne.n	8000bb0 <audioInit+0x550>
			  for (int j = 0; j < 3; j++)
			  {

				  for (int k = 0; k < 2; k++)
				  {
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
 8000c38:	4bb2      	ldr	r3, [pc, #712]	; (8000f04 <audioInit+0x8a4>)
 8000c3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000c3e:	4cb2      	ldr	r4, [pc, #712]	; (8000f08 <audioInit+0x8a8>)
 8000c40:	ed93 8a01 	vldr	s16, [r3, #4]
 8000c44:	ed93 0a04 	vldr	s0, [r3, #16]
 8000c48:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8000c4c:	edd3 0a07 	vldr	s1, [r3, #28]
 8000c50:	edd3 9a00 	vldr	s19, [r3]
 8000c54:	ed93 6a02 	vldr	s12, [r3, #8]
 8000c58:	ed93 9a03 	vldr	s18, [r3, #12]
 8000c5c:	ee78 4a69 	vsub.f32	s9, s16, s19
 8000c60:	edd3 6a05 	vldr	s13, [r3, #20]
 8000c64:	ee36 6a48 	vsub.f32	s12, s12, s16
 8000c68:	edd3 8a06 	vldr	s17, [r3, #24]
 8000c6c:	ee30 5a49 	vsub.f32	s10, s0, s18
 8000c70:	ed93 7a08 	vldr	s14, [r3, #32]
 8000c74:	ee76 6ac0 	vsub.f32	s13, s13, s0
 8000c78:	ee70 5ae8 	vsub.f32	s11, s1, s17
 8000c7c:	f8df c304 	ldr.w	ip, [pc, #772]	; 8000f84 <audioInit+0x924>
 8000c80:	ee37 7a60 	vsub.f32	s14, s14, s1
 8000c84:	4fa1      	ldr	r7, [pc, #644]	; (8000f0c <audioInit+0x8ac>)
 8000c86:	eec7 daa4 	vdiv.f32	s27, s15, s9
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000c8a:	eddf aaa1 	vldr	s21, [pc, #644]	; 8000f10 <audioInit+0x8b0>
			  decayAf1[i] = decayAfParts[i] * 123.0f;
 8000c8e:	ed9f aaa1 	vldr	s20, [pc, #644]	; 8000f14 <audioInit+0x8b4>
 8000c92:	4ea1      	ldr	r6, [pc, #644]	; (8000f18 <audioInit+0x8b8>)
 8000c94:	4ba1      	ldr	r3, [pc, #644]	; (8000f1c <audioInit+0x8bc>)
 8000c96:	48a2      	ldr	r0, [pc, #648]	; (8000f20 <audioInit+0x8c0>)
 8000c98:	ee87 da86 	vdiv.f32	s26, s15, s12
 8000c9c:	49a1      	ldr	r1, [pc, #644]	; (8000f24 <audioInit+0x8c4>)
 8000c9e:	4aa2      	ldr	r2, [pc, #648]	; (8000f28 <audioInit+0x8c8>)
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
 8000ca0:	4da2      	ldr	r5, [pc, #648]	; (8000f2c <audioInit+0x8cc>)
 8000ca2:	eec7 ca85 	vdiv.f32	s25, s15, s10
 8000ca6:	ee87 caa6 	vdiv.f32	s24, s15, s13
 8000caa:	eec7 baa5 	vdiv.f32	s23, s15, s11
 8000cae:	ee87 ba87 	vdiv.f32	s22, s15, s14
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000cb2:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	ed53 2a01 	vldr	s5, [r3, #-4]
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000cbc:	ecb5 2a01 	vldmia	r5!, {s4}
 8000cc0:	ecb4 6a01 	vldmia	r4!, {s12}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000cc4:	ee87 4aa4 	vdiv.f32	s8, s15, s9
 8000cc8:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8000ccc:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
		for (int i = 0; i < NUM_OVERTONES; i++)
 8000cd0:	4544      	cmp	r4, r8
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000cd2:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
 8000cd6:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 8000cda:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000cde:	eec7 ea82 	vdiv.f32	s29, s15, s4
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000ce2:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
 8000ce6:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
 8000cea:	ee87 2aa2 	vdiv.f32	s4, s15, s5
 8000cee:	eec7 4a85 	vdiv.f32	s9, s15, s10
 8000cf2:	eec7 faa3 	vdiv.f32	s31, s15, s7
 8000cf6:	ee87 5aa1 	vdiv.f32	s10, s15, s3
 8000cfa:	eec7 3aa5 	vdiv.f32	s7, s15, s11
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000cfe:	eec7 5a86 	vdiv.f32	s11, s15, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d02:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8000d06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d0a:	ee87 7a83 	vdiv.f32	s14, s15, s6
 8000d0e:	ee74 1a42 	vsub.f32	s3, s8, s4
 8000d12:	ee35 3a63 	vsub.f32	s6, s10, s7
 8000d16:	ee74 2aef 	vsub.f32	s5, s9, s31
 8000d1a:	ee61 1aad 	vmul.f32	s3, s3, s27
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000d1e:	ee75 5aee 	vsub.f32	s11, s11, s29
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d22:	ee36 6a44 	vsub.f32	s12, s12, s8

					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d26:	ee29 1aa1 	vmul.f32	s2, s19, s3
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d2a:	ece0 1a01 	vstmia	r0!, {s3}
 8000d2e:	ee76 6ae4 	vsub.f32	s13, s13, s9
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000d32:	ee65 5aaa 	vmul.f32	s11, s11, s21
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d36:	ee26 6a0d 	vmul.f32	s12, s12, s26
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d3a:	eca1 1a01 	vstmia	r1!, {s2}

					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000d3e:	ee32 2a41 	vsub.f32	s4, s4, s2
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d42:	ee37 7a45 	vsub.f32	s14, s14, s10
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000d46:	ecec 5a01 	vstmia	ip!, {s11}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d4a:	ee62 2aac 	vmul.f32	s5, s5, s25
 8000d4e:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8000d52:	ee66 6a8c 	vmul.f32	s13, s13, s24
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000d56:	eca2 2a01 	vstmia	r2!, {s4}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d5a:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8000d5e:	ee23 3a2b 	vmul.f32	s6, s6, s23
 8000d62:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
			  decayAf1[i] = decayAfParts[i] * 123.0f;
 8000d66:	ee25 fa8a 	vmul.f32	s30, s11, s20
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d6a:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d6e:	ee28 ea06 	vmul.f32	s28, s16, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d72:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d76:	ee29 1a22 	vmul.f32	s2, s18, s5
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d7a:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d7e:	ee60 1a26 	vmul.f32	s3, s0, s13
			  decayAf1[i] = decayAfParts[i] * 123.0f;
 8000d82:	eca7 fa01 	vstmia	r7!, {s30}
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d86:	ee28 2a83 	vmul.f32	s4, s17, s6
 8000d8a:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
 8000d8e:	ee20 6a87 	vmul.f32	s12, s1, s14
 8000d92:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
 8000d96:	ee7e eacf 	vsub.f32	s29, s29, s30
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d9a:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000d9e:	ee34 4a4e 	vsub.f32	s8, s8, s28
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000da2:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000da6:	ee7f 5ac1 	vsub.f32	s11, s31, s2
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000daa:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000dae:	ee74 4ae1 	vsub.f32	s9, s9, s3
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
 8000db2:	ece6 ea01 	vstmia	r6!, {s29}
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000db6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8000dba:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
 8000dbe:	ee35 5a46 	vsub.f32	s10, s10, s12
 8000dc2:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
 8000dc6:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
 8000dca:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
 8000dce:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
		for (int i = 0; i < NUM_OVERTONES; i++)
 8000dd2:	f47f af6e 	bne.w	8000cb2 <audioInit+0x652>
 8000dd6:	4c56      	ldr	r4, [pc, #344]	; (8000f30 <audioInit+0x8d0>)

		}

		for (int i = 0; i < 256; i++)
		{
			randomFactors[i] = randomNumber() + 0.5f;
 8000dd8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8000ddc:	f504 6580 	add.w	r5, r4, #1024	; 0x400
 8000de0:	f004 ff16 	bl	8005c10 <randomNumber>
 8000de4:	ee30 0a08 	vadd.f32	s0, s0, s16
 8000de8:	eca4 0a01 	vstmia	r4!, {s0}
		for (int i = 0; i < 256; i++)
 8000dec:	42ac      	cmp	r4, r5
 8000dee:	d1f7      	bne.n	8000de0 <audioInit+0x780>
		}
	//LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
	//LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 30.0f);

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000df0:	eddf 0a50 	vldr	s1, [pc, #320]	; 8000f34 <audioInit+0x8d4>
 8000df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df8:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8000f38 <audioInit+0x8d8>
 8000dfc:	484f      	ldr	r0, [pc, #316]	; (8000f3c <audioInit+0x8dc>)
 8000dfe:	f015 ffe9 	bl	8016dd4 <LEAF_generate_mtof>




	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000e02:	2102      	movs	r1, #2
 8000e04:	484e      	ldr	r0, [pc, #312]	; (8000f40 <audioInit+0x8e0>)
 8000e06:	f009 fd1f 	bl	800a848 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000e0a:	2120      	movs	r1, #32
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000e0c:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000e0e:	484d      	ldr	r0, [pc, #308]	; (8000f44 <audioInit+0x8e4>)
 8000e10:	f009 fd1a 	bl	800a848 <HAL_GPIO_ReadPin>
 8000e14:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000e16:	2101      	movs	r1, #1
 8000e18:	484b      	ldr	r0, [pc, #300]	; (8000f48 <audioInit+0x8e8>)
 8000e1a:	f009 fd15 	bl	800a848 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));


	if (numStrings == 6)
 8000e1e:	4b4b      	ldr	r3, [pc, #300]	; (8000f4c <audioInit+0x8ec>)
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000e20:	00a2      	lsls	r2, r4, #2
 8000e22:	494b      	ldr	r1, [pc, #300]	; (8000f50 <audioInit+0x8f0>)
 8000e24:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 8000e28:	4410      	add	r0, r2
	if (numStrings == 6)
 8000e2a:	781a      	ldrb	r2, [r3, #0]
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000e2c:	b2c0      	uxtb	r0, r0
	if (numStrings == 6)
 8000e2e:	2a06      	cmp	r2, #6
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000e30:	7008      	strb	r0, [r1, #0]
	if (numStrings == 6)
 8000e32:	f000 83df 	beq.w	80015f4 <audioInit+0xf94>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
 8000e36:	2a0a      	cmp	r2, #10
 8000e38:	f000 83d3 	beq.w	80015e2 <audioInit+0xf82>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	4a45      	ldr	r2, [pc, #276]	; (8000f54 <audioInit+0x8f4>)
 8000e40:	2002      	movs	r0, #2
 8000e42:	6011      	str	r1, [r2, #0]
		numStringsThisBoard = 2;
 8000e44:	4b44      	ldr	r3, [pc, #272]	; (8000f58 <audioInit+0x8f8>)
			numStringsThisBoard = 1;
 8000e46:	f04f 0a00 	mov.w	sl, #0
 8000e4a:	4a44      	ldr	r2, [pc, #272]	; (8000f5c <audioInit+0x8fc>)
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <audioInit+0x900>)
 8000e50:	f8df b134 	ldr.w	fp, [pc, #308]	; 8000f88 <audioInit+0x928>
 8000e54:	9302      	str	r3, [sp, #8]
 8000e56:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <audioInit+0x8cc>)


		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000e58:	ed9f 9a42 	vldr	s18, [pc, #264]	; 8000f64 <audioInit+0x904>
 8000e5c:	f103 082c 	add.w	r8, r3, #44	; 0x2c
		tSlide_init(&freqSlider[i], 2, 2, &leaf);
 8000e60:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8000f74 <audioInit+0x914>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000e64:	4f40      	ldr	r7, [pc, #256]	; (8000f68 <audioInit+0x908>)
 8000e66:	eddf 8a41 	vldr	s17, [pc, #260]	; 8000f6c <audioInit+0x90c>
 8000e6a:	ed9f 8a41 	vldr	s16, [pc, #260]	; 8000f70 <audioInit+0x910>
			numStringsThisBoard = 1;
 8000e6e:	7010      	strb	r0, [r2, #0]
		tSlide_init(&freqSlider[i], 2, 2, &leaf);
 8000e70:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000e74:	4649      	mov	r1, r9
 8000e76:	4658      	mov	r0, fp
 8000e78:	9e02      	ldr	r6, [sp, #8]
 8000e7a:	4d2c      	ldr	r5, [pc, #176]	; (8000f2c <audioInit+0x8cc>)
 8000e7c:	eeb0 0a60 	vmov.f32	s0, s1
 8000e80:	9c01      	ldr	r4, [sp, #4]
 8000e82:	f014 f96d 	bl	8015160 <tSlide_init>
			tCycle_init(&additive[i][j], &leaf);
 8000e86:	4620      	mov	r0, r4
 8000e88:	4649      	mov	r1, r9
 8000e8a:	f016 fa1d 	bl	80172c8 <tCycle_init>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000e8e:	ecf5 0a01 	vldmia	r5!, {s1}
 8000e92:	4630      	mov	r0, r6
 8000e94:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000e98:	eef0 1a68 	vmov.f32	s3, s17
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	ee60 0a89 	vmul.f32	s1, s1, s18
 8000ea2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea6:	eeb0 1a48 	vmov.f32	s2, s16
 8000eaa:	4639      	mov	r1, r7
 8000eac:	f013 fdf6 	bl	8014a9c <tADSRT_init>
		for (int j = 0; j < NUM_OVERTONES; j++)
 8000eb0:	4545      	cmp	r5, r8
 8000eb2:	f104 0404 	add.w	r4, r4, #4
 8000eb6:	f106 0604 	add.w	r6, r6, #4
 8000eba:	d1e4      	bne.n	8000e86 <audioInit+0x826>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8000ebc:	9b01      	ldr	r3, [sp, #4]
 8000ebe:	f10a 0a12 	add.w	sl, sl, #18
 8000ec2:	f10b 0b04 	add.w	fp, fp, #4
 8000ec6:	3348      	adds	r3, #72	; 0x48
 8000ec8:	f1ba 0f24 	cmp.w	sl, #36	; 0x24
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	9b02      	ldr	r3, [sp, #8]
 8000ed0:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	d1cb      	bne.n	8000e70 <audioInit+0x810>


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000ed8:	4e26      	ldr	r6, [pc, #152]	; (8000f74 <audioInit+0x914>)
 8000eda:	eddf 8a27 	vldr	s17, [pc, #156]	; 8000f78 <audioInit+0x918>
 8000ede:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8000f70 <audioInit+0x910>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4c25      	ldr	r4, [pc, #148]	; (8000f7c <audioInit+0x91c>)
 8000ee6:	eef0 0a68 	vmov.f32	s1, s17
 8000eea:	eeb0 0a48 	vmov.f32	s0, s16
 8000eee:	4824      	ldr	r0, [pc, #144]	; (8000f80 <audioInit+0x920>)
 8000ef0:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8000ef4:	f014 f8c8 	bl	8015088 <tExpSmooth_init>
 8000ef8:	e048      	b.n	8000f8c <audioInit+0x92c>
 8000efa:	bf00      	nop
 8000efc:	20005080 	.word	0x20005080
 8000f00:	20005078 	.word	0x20005078
 8000f04:	20000300 	.word	0x20000300
 8000f08:	20000074 	.word	0x20000074
 8000f0c:	20000ea8 	.word	0x20000ea8
 8000f10:	3b84a9fa 	.word	0x3b84a9fa
 8000f14:	42f60000 	.word	0x42f60000
 8000f18:	20000f38 	.word	0x20000f38
 8000f1c:	20000150 	.word	0x20000150
 8000f20:	20000c28 	.word	0x20000c28
 8000f24:	20000b08 	.word	0x20000b08
 8000f28:	20000d48 	.word	0x20000d48
 8000f2c:	2000002c 	.word	0x2000002c
 8000f30:	200055cc 	.word	0x200055cc
 8000f34:	4323d666 	.word	0x4323d666
 8000f38:	c323d666 	.word	0xc323d666
 8000f3c:	24000000 	.word	0x24000000
 8000f40:	58020400 	.word	0x58020400
 8000f44:	58020800 	.word	0x58020800
 8000f48:	58020000 	.word	0x58020000
 8000f4c:	20000011 	.word	0x20000011
 8000f50:	20013048 	.word	0x20013048
 8000f54:	2000500c 	.word	0x2000500c
 8000f58:	20000964 	.word	0x20000964
 8000f5c:	20000012 	.word	0x20000012
 8000f60:	200009f4 	.word	0x200009f4
 8000f64:	447a0000 	.word	0x447a0000
 8000f68:	20000f80 	.word	0x20000f80
 8000f6c:	43160000 	.word	0x43160000
 8000f70:	00000000 	.word	0x00000000
 8000f74:	20005184 	.word	0x20005184
 8000f78:	3a03126f 	.word	0x3a03126f
 8000f7c:	20005150 	.word	0x20005150
 8000f80:	20012f94 	.word	0x20012f94
 8000f84:	20000ef0 	.word	0x20000ef0
 8000f88:	2000502c 	.word	0x2000502c
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000f8c:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
 8000f8e:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000f90:	eef0 0a68 	vmov.f32	s1, s17
 8000f94:	4631      	mov	r1, r6
 8000f96:	eeb0 0a48 	vmov.f32	s0, s16
 8000f9a:	f014 f875 	bl	8015088 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
 8000f9e:	42ac      	cmp	r4, r5
 8000fa0:	d1f4      	bne.n	8000f8c <audioInit+0x92c>
 8000fa2:	4cdf      	ldr	r4, [pc, #892]	; (8001320 <audioInit+0xcc0>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000fa4:	4edf      	ldr	r6, [pc, #892]	; (8001324 <audioInit+0xcc4>)
 8000fa6:	eddf 8ae0 	vldr	s17, [pc, #896]	; 8001328 <audioInit+0xcc8>
 8000faa:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000fae:	ed9f 8adf 	vldr	s16, [pc, #892]	; 800132c <audioInit+0xccc>
 8000fb2:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
 8000fb4:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000fb6:	eef0 0a68 	vmov.f32	s1, s17
 8000fba:	4631      	mov	r1, r6
 8000fbc:	eeb0 0a48 	vmov.f32	s0, s16
 8000fc0:	f014 f862 	bl	8015088 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 8000fc4:	42ac      	cmp	r4, r5
 8000fc6:	d1f4      	bne.n	8000fb2 <audioInit+0x952>
 8000fc8:	2600      	movs	r6, #0
 8000fca:	4bd9      	ldr	r3, [pc, #868]	; (8001330 <audioInit+0xcd0>)
 8000fcc:	f8df b46c 	ldr.w	fp, [pc, #1132]	; 800143c <audioInit+0xddc>

		for(int i = 0; i < NUM_OSC; i++)
		{


			tMBSaw_init(&saw[i][v],  &leaf);
 8000fd0:	4cd4      	ldr	r4, [pc, #848]	; (8001324 <audioInit+0xcc4>)

			tMBSawPulse_init(&sawPaired[i][v], &leaf);

			tMBSineTri_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 8000fd2:	eddf bad8 	vldr	s23, [pc, #864]	; 8001334 <audioInit+0xcd4>


		}
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
 8000fd6:	ed9f cad8 	vldr	s24, [pc, #864]	; 8001338 <audioInit+0xcd8>
 8000fda:	eddf 8ad4 	vldr	s17, [pc, #848]	; 800132c <audioInit+0xccc>
					                                 0.99999f, 0.0f, 0.01f,
					                                 0.01f, 0, &mediumPool);

		tLivingString2_initToPool(&strings[v], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &mediumPool);
 8000fde:	ed9f 9ad7 	vldr	s18, [pc, #860]	; 800133c <audioInit+0xcdc>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8000fe2:	eddf aad7 	vldr	s21, [pc, #860]	; 8001340 <audioInit+0xce0>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000fe6:	e9cd 3601 	strd	r3, r6, [sp, #4]
		tSlide_init(&freqSlider[i], 2, 2, &leaf);
 8000fea:	2500      	movs	r5, #0
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 8000fec:	ed9f 8ad5 	vldr	s16, [pc, #852]	; 8001344 <audioInit+0xce4>
			tMBSaw_init(&saw[i][v],  &leaf);
 8000ff0:	4bd5      	ldr	r3, [pc, #852]	; (8001348 <audioInit+0xce8>)
 8000ff2:	4621      	mov	r1, r4
 8000ff4:	1998      	adds	r0, r3, r6
 8000ff6:	4428      	add	r0, r5
 8000ff8:	f019 f948 	bl	801a28c <tMBSaw_init>
			tMBPulse_init(&pulse[i][v], &leaf);
 8000ffc:	4bd3      	ldr	r3, [pc, #844]	; (800134c <audioInit+0xcec>)
 8000ffe:	4621      	mov	r1, r4
 8001000:	1998      	adds	r0, r3, r6
 8001002:	4428      	add	r0, r5
 8001004:	f016 fa22 	bl	801744c <tMBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
 8001008:	4bd1      	ldr	r3, [pc, #836]	; (8001350 <audioInit+0xcf0>)
 800100a:	4621      	mov	r1, r4
 800100c:	1998      	adds	r0, r3, r6
 800100e:	4428      	add	r0, r5
 8001010:	f016 f95a 	bl	80172c8 <tCycle_init>
			tMBTriangle_init(&tri[i][v],  &leaf);
 8001014:	4bcf      	ldr	r3, [pc, #828]	; (8001354 <audioInit+0xcf4>)
 8001016:	4621      	mov	r1, r4
 8001018:	1998      	adds	r0, r3, r6
 800101a:	4428      	add	r0, r5
 800101c:	f017 f804 	bl	8018028 <tMBTriangle_init>
			tMBSawPulse_init(&sawPaired[i][v], &leaf);
 8001020:	4bcd      	ldr	r3, [pc, #820]	; (8001358 <audioInit+0xcf8>)
 8001022:	4621      	mov	r1, r4
 8001024:	1998      	adds	r0, r3, r6
 8001026:	4428      	add	r0, r5
 8001028:	f019 fbee 	bl	801a808 <tMBSawPulse_init>
			tMBSineTri_init(&sinePaired[i][v],&leaf);
 800102c:	4bcb      	ldr	r3, [pc, #812]	; (800135c <audioInit+0xcfc>)
 800102e:	4621      	mov	r1, r4
 8001030:	1998      	adds	r0, r3, r6
 8001032:	4428      	add	r0, r5
 8001034:	f018 f86a 	bl	801910c <tMBSineTri_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 8001038:	4bc9      	ldr	r3, [pc, #804]	; (8001360 <audioInit+0xd00>)
 800103a:	eef0 0a48 	vmov.f32	s1, s16
 800103e:	4621      	mov	r1, r4
 8001040:	1998      	adds	r0, r3, r6
 8001042:	eeb0 0a6b 	vmov.f32	s0, s23
 8001046:	4428      	add	r0, r5
		for(int i = 0; i < NUM_OSC; i++)
 8001048:	3508      	adds	r5, #8
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 800104a:	f014 f81d 	bl	8015088 <tExpSmooth_init>
		for(int i = 0; i < NUM_OSC; i++)
 800104e:	2d18      	cmp	r5, #24
 8001050:	d1ce      	bne.n	8000ff0 <audioInit+0x990>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
 8001052:	48c4      	ldr	r0, [pc, #784]	; (8001364 <audioInit+0xd04>)
 8001054:	eef0 2a4c 	vmov.f32	s5, s24
 8001058:	eef0 1a68 	vmov.f32	s3, s17
 800105c:	ed9f 2ab6 	vldr	s4, [pc, #728]	; 8001338 <audioInit+0xcd8>
 8001060:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8001368 <audioInit+0xd08>
 8001064:	2200      	movs	r2, #0
 8001066:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800136c <audioInit+0xd0c>
 800106a:	2104      	movs	r1, #4
 800106c:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8001370 <audioInit+0xd10>
 8001070:	4430      	add	r0, r6
 8001072:	4bc0      	ldr	r3, [pc, #768]	; (8001374 <audioInit+0xd14>)
		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8001074:	4635      	mov	r5, r6
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
 8001076:	f01a fecb 	bl	801be10 <tSimpleLivingString3_initToPool>
		tLivingString2_initToPool(&strings[v], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &mediumPool);
 800107a:	4bbf      	ldr	r3, [pc, #764]	; (8001378 <audioInit+0xd18>)
 800107c:	ed9f 3abf 	vldr	s6, [pc, #764]	; 800137c <audioInit+0xd1c>
 8001080:	eef0 4a49 	vmov.f32	s9, s18
 8001084:	1998      	adds	r0, r3, r6
 8001086:	eef0 3a68 	vmov.f32	s7, s17
 800108a:	eef0 2a43 	vmov.f32	s5, s6
 800108e:	ed9f 4aab 	vldr	s8, [pc, #684]	; 800133c <audioInit+0xcdc>
 8001092:	ed9f 2aa6 	vldr	s4, [pc, #664]	; 800132c <audioInit+0xccc>
 8001096:	2101      	movs	r1, #1
 8001098:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8001380 <audioInit+0xd20>
 800109c:	f106 0710 	add.w	r7, r6, #16
 80010a0:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8001384 <audioInit+0xd24>
 80010a4:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8001388 <audioInit+0xd28>
 80010a8:	4ab2      	ldr	r2, [pc, #712]	; (8001374 <audioInit+0xd14>)
 80010aa:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 800138c <audioInit+0xd2c>
 80010ae:	9003      	str	r0, [sp, #12]
 80010b0:	f01b f9f0 	bl	801c494 <tLivingString2_initToPool>
		tLivingString2_setBrightness(&strings[v], .99f);
 80010b4:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8001390 <audioInit+0xd30>
 80010b8:	9803      	ldr	r0, [sp, #12]
 80010ba:	f01b fb99 	bl	801c7f0 <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[v], .5f);
 80010be:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80010c2:	9803      	ldr	r0, [sp, #12]
 80010c4:	f01b fb50 	bl	801c768 <tLivingString2_setPickPos>
		tLivingString2_setPrepPos(&strings[v], .4f);
 80010c8:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8001394 <audioInit+0xd34>
 80010cc:	9803      	ldr	r0, [sp, #12]
 80010ce:	f01b fb5d 	bl	801c78c <tLivingString2_setPrepPos>
		tLivingString2_setPrepIndex(&strings[v], 0.0f);
 80010d2:	eeb0 0a68 	vmov.f32	s0, s17
 80010d6:	9803      	ldr	r0, [sp, #12]
 80010d8:	f01b fb7c 	bl	801c7d4 <tLivingString2_setPrepIndex>
		tLivingString2_setPickupPos(&strings[v], 1.0f);
 80010dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010e0:	9803      	ldr	r0, [sp, #12]
 80010e2:	f01b fb65 	bl	801c7b0 <tLivingString2_setPickupPos>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80010e6:	4aac      	ldr	r2, [pc, #688]	; (8001398 <audioInit+0xd38>)
 80010e8:	eeb0 1a68 	vmov.f32	s2, s17
 80010ec:	4623      	mov	r3, r4
 80010ee:	eddf 1aab 	vldr	s3, [pc, #684]	; 800139c <audioInit+0xd3c>
 80010f2:	1990      	adds	r0, r2, r6
 80010f4:	eddf 0aaa 	vldr	s1, [pc, #680]	; 80013a0 <audioInit+0xd40>
 80010f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010fc:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800132c <audioInit+0xccc>
 8001100:	49a8      	ldr	r1, [pc, #672]	; (80013a4 <audioInit+0xd44>)
 8001102:	f013 fccb 	bl	8014a9c <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8001106:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800110a:	4622      	mov	r2, r4
 800110c:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 80013a8 <audioInit+0xd48>
 8001110:	2103      	movs	r1, #3
 8001112:	48a6      	ldr	r0, [pc, #664]	; (80013ac <audioInit+0xd4c>)
 8001114:	f014 fcce 	bl	8015ab4 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8001118:	4622      	mov	r2, r4
 800111a:	2101      	movs	r1, #1
 800111c:	48a4      	ldr	r0, [pc, #656]	; (80013b0 <audioInit+0xd50>)
 800111e:	eddf 0a98 	vldr	s1, [pc, #608]	; 8001380 <audioInit+0xd20>
 8001122:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 80013b4 <audioInit+0xd54>
 8001126:	f014 fcc5 	bl	8015ab4 <tVZFilter_init>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
 800112a:	4622      	mov	r2, r4
 800112c:	2100      	movs	r1, #0
 800112e:	48a2      	ldr	r0, [pc, #648]	; (80013b8 <audioInit+0xd58>)
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8001130:	eddf 9aa2 	vldr	s19, [pc, #648]	; 80013bc <audioInit+0xd5c>
 8001134:	ed9f 8aa2 	vldr	s16, [pc, #648]	; 80013c0 <audioInit+0xd60>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8001138:	f016 f926 	bl	8017388 <tNoise_init>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800113c:	4ba1      	ldr	r3, [pc, #644]	; (80013c4 <audioInit+0xd64>)
 800113e:	eef0 0a69 	vmov.f32	s1, s19
 8001142:	eeb0 0a48 	vmov.f32	s0, s16
 8001146:	2101      	movs	r1, #1
 8001148:	1958      	adds	r0, r3, r5
 800114a:	4622      	mov	r2, r4
 800114c:	f014 f93e 	bl	80153cc <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8001150:	4b9d      	ldr	r3, [pc, #628]	; (80013c8 <audioInit+0xd68>)
 8001152:	eef0 0a69 	vmov.f32	s1, s19
 8001156:	4622      	mov	r2, r4
 8001158:	1958      	adds	r0, r3, r5
 800115a:	eeb0 0a48 	vmov.f32	s0, s16
 800115e:	2100      	movs	r1, #0
 8001160:	f014 f934 	bl	80153cc <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8001164:	4b99      	ldr	r3, [pc, #612]	; (80013cc <audioInit+0xd6c>)
 8001166:	4622      	mov	r2, r4
 8001168:	eef0 0a69 	vmov.f32	s1, s19
 800116c:	1958      	adds	r0, r3, r5
 800116e:	eeb0 0a48 	vmov.f32	s0, s16
 8001172:	2102      	movs	r1, #2
 8001174:	f014 f92a 	bl	80153cc <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 8001178:	4b95      	ldr	r3, [pc, #596]	; (80013d0 <audioInit+0xd70>)
 800117a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800117e:	4621      	mov	r1, r4
 8001180:	1958      	adds	r0, r3, r5
 8001182:	eeb0 0a48 	vmov.f32	s0, s16
 8001186:	f014 ff89 	bl	801609c <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 800118a:	4b92      	ldr	r3, [pc, #584]	; (80013d4 <audioInit+0xd74>)
 800118c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001190:	4622      	mov	r2, r4
 8001192:	1958      	adds	r0, r3, r5
 8001194:	eeb0 0a48 	vmov.f32	s0, s16
 8001198:	2105      	movs	r1, #5
 800119a:	f014 fc8b 	bl	8015ab4 <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 800119e:	4b8e      	ldr	r3, [pc, #568]	; (80013d8 <audioInit+0xd78>)
 80011a0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80011a4:	4622      	mov	r2, r4
 80011a6:	1958      	adds	r0, r3, r5
 80011a8:	eeb0 0a48 	vmov.f32	s0, s16
 80011ac:	2106      	movs	r1, #6
 80011ae:	f014 fc81 	bl	8015ab4 <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 80011b2:	4b8a      	ldr	r3, [pc, #552]	; (80013dc <audioInit+0xd7c>)
 80011b4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80011b8:	4622      	mov	r2, r4
 80011ba:	1958      	adds	r0, r3, r5
 80011bc:	eeb0 0a48 	vmov.f32	s0, s16
 80011c0:	2107      	movs	r1, #7
 80011c2:	f014 fc77 	bl	8015ab4 <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 80011c6:	4b86      	ldr	r3, [pc, #536]	; (80013e0 <audioInit+0xd80>)
 80011c8:	4622      	mov	r2, r4
 80011ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80011ce:	1958      	adds	r0, r3, r5
 80011d0:	eeb0 0a48 	vmov.f32	s0, s16
 80011d4:	2104      	movs	r1, #4
 80011d6:	f014 fc6d 	bl	8015ab4 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 80011da:	4b82      	ldr	r3, [pc, #520]	; (80013e4 <audioInit+0xd84>)
 80011dc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80011e0:	4621      	mov	r1, r4
 80011e2:	1958      	adds	r0, r3, r5
 80011e4:	eeb0 0a48 	vmov.f32	s0, s16
 80011e8:	f015 fae8 	bl	80167bc <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 80011ec:	4b7e      	ldr	r3, [pc, #504]	; (80013e8 <audioInit+0xd88>)
 80011ee:	eef0 0a4c 	vmov.f32	s1, s24
 80011f2:	4621      	mov	r1, r4
 80011f4:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
 80011f6:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 80011f8:	eeb0 0a6b 	vmov.f32	s0, s23
 80011fc:	f013 ff44 	bl	8015088 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 8001200:	42af      	cmp	r7, r5
 8001202:	d19b      	bne.n	800113c <audioInit+0xadc>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 8001204:	4b79      	ldr	r3, [pc, #484]	; (80013ec <audioInit+0xd8c>)
 8001206:	2500      	movs	r5, #0
 8001208:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 800120c:	4b78      	ldr	r3, [pc, #480]	; (80013f0 <audioInit+0xd90>)
 800120e:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 8001210:	eb08 0005 	add.w	r0, r8, r5
 8001214:	4621      	mov	r1, r4
 8001216:	f01a faa1 	bl	801b75c <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 800121a:	1978      	adds	r0, r7, r5
 800121c:	4621      	mov	r1, r4
 800121e:	f01a fae3 	bl	801b7e8 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 8001222:	4b74      	ldr	r3, [pc, #464]	; (80013f4 <audioInit+0xd94>)
 8001224:	4621      	mov	r1, r4
 8001226:	1998      	adds	r0, r3, r6
 8001228:	4428      	add	r0, r5
 800122a:	f016 f84d 	bl	80172c8 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 800122e:	4b72      	ldr	r3, [pc, #456]	; (80013f8 <audioInit+0xd98>)
 8001230:	4621      	mov	r1, r4
 8001232:	1998      	adds	r0, r3, r6
 8001234:	4428      	add	r0, r5
 8001236:	f01a fcc3 	bl	801bbc0 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 800123a:	4b70      	ldr	r3, [pc, #448]	; (80013fc <audioInit+0xd9c>)
 800123c:	4621      	mov	r1, r4
 800123e:	1998      	adds	r0, r3, r6
 8001240:	4428      	add	r0, r5
 8001242:	f01a fd19 	bl	801bc78 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8001246:	4b6e      	ldr	r3, [pc, #440]	; (8001400 <audioInit+0xda0>)
 8001248:	4621      	mov	r1, r4
 800124a:	1998      	adds	r0, r3, r6
 800124c:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
 800124e:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8001250:	f01a fbf4 	bl	801ba3c <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 8001254:	2d20      	cmp	r5, #32
 8001256:	d1db      	bne.n	8001210 <audioInit+0xbb0>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
 8001258:	4b6a      	ldr	r3, [pc, #424]	; (8001404 <audioInit+0xda4>)
 800125a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800125e:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8001408 <audioInit+0xda8>
 8001262:	2106      	movs	r1, #6
 8001264:	1998      	adds	r0, r3, r6
 8001266:	4622      	mov	r2, r4
 8001268:	f014 fc24 	bl	8015ab4 <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 800126c:	4b67      	ldr	r3, [pc, #412]	; (800140c <audioInit+0xdac>)
 800126e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8001272:	4622      	mov	r2, r4
 8001274:	1998      	adds	r0, r3, r6
 8001276:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8001410 <audioInit+0xdb0>
 800127a:	2107      	movs	r1, #7
		//LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE);


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 800127c:	eddf 9a65 	vldr	s19, [pc, #404]	; 8001414 <audioInit+0xdb4>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 8001280:	f014 fc18 	bl	8015ab4 <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8001284:	4b64      	ldr	r3, [pc, #400]	; (8001418 <audioInit+0xdb8>)
 8001286:	9f01      	ldr	r7, [sp, #4]
 8001288:	eeb0 0a6a 	vmov.f32	s0, s21
 800128c:	4622      	mov	r2, r4
 800128e:	eddf 0a63 	vldr	s1, [pc, #396]	; 800141c <audioInit+0xdbc>
 8001292:	2105      	movs	r1, #5
 8001294:	1998      	adds	r0, r3, r6
 8001296:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 800129a:	ed9f 8a61 	vldr	s16, [pc, #388]	; 8001420 <audioInit+0xdc0>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 800129e:	f014 fc09 	bl	8015ab4 <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80012a2:	4628      	mov	r0, r5
 80012a4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80012a8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80012ac:	4623      	mov	r3, r4
 80012ae:	eef0 0a6a 	vmov.f32	s1, s21
 80012b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b6:	eeb0 0a69 	vmov.f32	s0, s19
 80012ba:	493a      	ldr	r1, [pc, #232]	; (80013a4 <audioInit+0xd44>)
 80012bc:	f013 fbee 	bl	8014a9c <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80012c0:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
 80012c2:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80012c4:	eeb0 0a48 	vmov.f32	s0, s16
 80012c8:	f013 fc96 	bl	8014bf8 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 80012cc:	42bd      	cmp	r5, r7
 80012ce:	d1e8      	bne.n	80012a2 <audioInit+0xc42>
 80012d0:	4b54      	ldr	r3, [pc, #336]	; (8001424 <audioInit+0xdc4>)
 80012d2:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 80012d4:	ed9f ba54 	vldr	s22, [pc, #336]	; 8001428 <audioInit+0xdc8>
 80012d8:	eb03 0806 	add.w	r8, r3, r6
 80012dc:	4b53      	ldr	r3, [pc, #332]	; (800142c <audioInit+0xdcc>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80012de:	ed9f aa54 	vldr	s20, [pc, #336]	; 8001430 <audioInit+0xdd0>
 80012e2:	199f      	adds	r7, r3, r6
 80012e4:	f106 0320 	add.w	r3, r6, #32
			tCycle_init(&mod2[i][v], &leaf);
			tCycle_setFreq(&mod1[i][v], 0.2f);
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80012e8:	eddf 9a34 	vldr	s19, [pc, #208]	; 80013bc <audioInit+0xd5c>
 80012ec:	ed9f 8a34 	vldr	s16, [pc, #208]	; 80013c0 <audioInit+0xd60>
 80012f0:	e9cd b603 	strd	fp, r6, [sp, #12]
 80012f4:	469b      	mov	fp, r3
			tCrusher_init(&bc[i][v],&leaf);
 80012f6:	4640      	mov	r0, r8
 80012f8:	4621      	mov	r1, r4
 80012fa:	f013 fa85 	bl	8014808 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 80012fe:	4638      	mov	r0, r7
 8001300:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001304:	4621      	mov	r1, r4
 8001306:	f014 f965 	bl	80155d4 <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 800130a:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <audioInit+0xdd4>)
 800130c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001310:	4621      	mov	r1, r4
 8001312:	195e      	adds	r6, r3, r5
 8001314:	4b48      	ldr	r3, [pc, #288]	; (8001438 <audioInit+0xdd8>)
		for (int i = 0; i < NUM_EFFECT; i++)
 8001316:	f108 0808 	add.w	r8, r8, #8
 800131a:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 800131c:	1958      	adds	r0, r3, r5
 800131e:	e08f      	b.n	8001440 <audioInit+0xde0>
 8001320:	20005534 	.word	0x20005534
 8001324:	20005184 	.word	0x20005184
 8001328:	3a03126f 	.word	0x3a03126f
 800132c:	00000000 	.word	0x00000000
 8001330:	20004fcc 	.word	0x20004fcc
 8001334:	42800000 	.word	0x42800000
 8001338:	3c23d70a 	.word	0x3c23d70a
 800133c:	3d4ccccd 	.word	0x3d4ccccd
 8001340:	447a0000 	.word	0x447a0000
 8001344:	3ca3d70a 	.word	0x3ca3d70a
 8001348:	200059d0 	.word	0x200059d0
 800134c:	200055b4 	.word	0x200055b4
 8001350:	20005a8c 	.word	0x20005a8c
 8001354:	20012f6c 	.word	0x20012f6c
 8001358:	200059e8 	.word	0x200059e8
 800135c:	20005aa4 	.word	0x20005aa4
 8001360:	2000555c 	.word	0x2000555c
 8001364:	200052a8 	.word	0x200052a8
 8001368:	3f7fff58 	.word	0x3f7fff58
 800136c:	4684d000 	.word	0x4684d000
 8001370:	435c0000 	.word	0x435c0000
 8001374:	200053c4 	.word	0x200053c4
 8001378:	20012f0c 	.word	0x20012f0c
 800137c:	3f7ff972 	.word	0x3f7ff972
 8001380:	3f666666 	.word	0x3f666666
 8001384:	3e99999a 	.word	0x3e99999a
 8001388:	3f19999a 	.word	0x3f19999a
 800138c:	42c80000 	.word	0x42c80000
 8001390:	3f7d70a4 	.word	0x3f7d70a4
 8001394:	3ecccccd 	.word	0x3ecccccd
 8001398:	20004fcc 	.word	0x20004fcc
 800139c:	43480000 	.word	0x43480000
 80013a0:	42480000 	.word	0x42480000
 80013a4:	20000f80 	.word	0x20000f80
 80013a8:	44bb8000 	.word	0x44bb8000
 80013ac:	20005424 	.word	0x20005424
 80013b0:	20005428 	.word	0x20005428
 80013b4:	44480000 	.word	0x44480000
 80013b8:	20005408 	.word	0x20005408
 80013bc:	3f333333 	.word	0x3f333333
 80013c0:	44fa0000 	.word	0x44fa0000
 80013c4:	200052b0 	.word	0x200052b0
 80013c8:	200050a4 	.word	0x200050a4
 80013cc:	20000a8c 	.word	0x20000a8c
 80013d0:	20004f84 	.word	0x20004f84
 80013d4:	20000954 	.word	0x20000954
 80013d8:	20000944 	.word	0x20000944
 80013dc:	20000934 	.word	0x20000934
 80013e0:	20000924 	.word	0x20000924
 80013e4:	20000914 	.word	0x20000914
 80013e8:	20004fd4 	.word	0x20004fd4
 80013ec:	200051f8 	.word	0x200051f8
 80013f0:	200051d8 	.word	0x200051d8
 80013f4:	20005248 	.word	0x20005248
 80013f8:	20005288 	.word	0x20005288
 80013fc:	20005268 	.word	0x20005268
 8001400:	20005218 	.word	0x20005218
 8001404:	2000543c 	.word	0x2000543c
 8001408:	42a00000 	.word	0x42a00000
 800140c:	20005444 	.word	0x20005444
 8001410:	463b8000 	.word	0x463b8000
 8001414:	3dcccccd 	.word	0x3dcccccd
 8001418:	2000541c 	.word	0x2000541c
 800141c:	3ff33333 	.word	0x3ff33333
 8001420:	3f7fffac 	.word	0x3f7fffac
 8001424:	20000aa4 	.word	0x20000aa4
 8001428:	42000000 	.word	0x42000000
 800142c:	20000e68 	.word	0x20000e68
 8001430:	47bb8000 	.word	0x47bb8000
 8001434:	20005a4c 	.word	0x20005a4c
 8001438:	20000e88 	.word	0x20000e88
 800143c:	200053c4 	.word	0x200053c4
 8001440:	f014 f8c8 	bl	80155d4 <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 8001444:	4b79      	ldr	r3, [pc, #484]	; (800162c <audioInit+0xfcc>)
 8001446:	eef0 0a4b 	vmov.f32	s1, s22
 800144a:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8001630 <audioInit+0xfd0>
 800144e:	eb03 0a05 	add.w	sl, r3, r5
 8001452:	4b78      	ldr	r3, [pc, #480]	; (8001634 <audioInit+0xfd4>)
 8001454:	4622      	mov	r2, r4
 8001456:	2106      	movs	r1, #6
 8001458:	eb03 0905 	add.w	r9, r3, r5
 800145c:	4630      	mov	r0, r6
 800145e:	f014 fb29 	bl	8015ab4 <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
 8001462:	4650      	mov	r0, sl
 8001464:	eef0 0a4b 	vmov.f32	s1, s22
 8001468:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8001638 <audioInit+0xfd8>
 800146c:	4622      	mov	r2, r4
 800146e:	2107      	movs	r1, #7
 8001470:	f014 fb20 	bl	8015ab4 <tVZFilter_init>
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
 8001474:	eddf 0a71 	vldr	s1, [pc, #452]	; 800163c <audioInit+0xfdc>
 8001478:	4622      	mov	r2, r4
 800147a:	2105      	movs	r1, #5
 800147c:	4648      	mov	r0, r9
 800147e:	eeb0 0a6a 	vmov.f32	s0, s21
 8001482:	f014 fb17 	bl	8015ab4 <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8001486:	eeb0 0a4a 	vmov.f32	s0, s20
 800148a:	4630      	mov	r0, r6
 800148c:	f014 fcc4 	bl	8015e18 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8001490:	4650      	mov	r0, sl
 8001492:	eeb0 0a4a 	vmov.f32	s0, s20
 8001496:	f014 fcbf 	bl	8015e18 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800149a:	eeb0 0a4a 	vmov.f32	s0, s20
 800149e:	4648      	mov	r0, r9
 80014a0:	f014 fcba 	bl	8015e18 <tVZFilter_setSampleRate>
			tCycle_init(&mod1[i][v], &leaf);
 80014a4:	4b66      	ldr	r3, [pc, #408]	; (8001640 <audioInit+0xfe0>)
 80014a6:	4621      	mov	r1, r4
 80014a8:	eb03 0a05 	add.w	sl, r3, r5
 80014ac:	4b65      	ldr	r3, [pc, #404]	; (8001644 <audioInit+0xfe4>)
 80014ae:	eb03 0905 	add.w	r9, r3, r5
 80014b2:	4650      	mov	r0, sl
 80014b4:	f015 ff08 	bl	80172c8 <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
 80014b8:	4621      	mov	r1, r4
 80014ba:	4648      	mov	r0, r9
 80014bc:	f015 ff04 	bl	80172c8 <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 80014c0:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8001648 <audioInit+0xfe8>
 80014c4:	4650      	mov	r0, sl
 80014c6:	f015 ff41 	bl	801734c <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 80014ca:	4648      	mov	r0, r9
 80014cc:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800164c <audioInit+0xfec>
 80014d0:	f015 ff3c 	bl	801734c <tCycle_setFreq>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80014d4:	4b5e      	ldr	r3, [pc, #376]	; (8001650 <audioInit+0xff0>)
 80014d6:	eef0 0a69 	vmov.f32	s1, s19
 80014da:	4622      	mov	r2, r4
 80014dc:	1958      	adds	r0, r3, r5
 80014de:	eeb0 0a48 	vmov.f32	s0, s16
 80014e2:	2101      	movs	r1, #1
 80014e4:	f013 ff72 	bl	80153cc <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 80014e8:	4b5a      	ldr	r3, [pc, #360]	; (8001654 <audioInit+0xff4>)
 80014ea:	eef0 0a69 	vmov.f32	s1, s19
 80014ee:	4622      	mov	r2, r4
 80014f0:	1958      	adds	r0, r3, r5
 80014f2:	eeb0 0a48 	vmov.f32	s0, s16
 80014f6:	2100      	movs	r1, #0
 80014f8:	f013 ff68 	bl	80153cc <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80014fc:	4b56      	ldr	r3, [pc, #344]	; (8001658 <audioInit+0xff8>)
 80014fe:	4622      	mov	r2, r4
 8001500:	eef0 0a69 	vmov.f32	s1, s19
 8001504:	1958      	adds	r0, r3, r5
 8001506:	eeb0 0a48 	vmov.f32	s0, s16
 800150a:	2102      	movs	r1, #2
 800150c:	f013 ff5e 	bl	80153cc <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 8001510:	4b52      	ldr	r3, [pc, #328]	; (800165c <audioInit+0xffc>)
 8001512:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001516:	4621      	mov	r1, r4
 8001518:	1958      	adds	r0, r3, r5
 800151a:	eeb0 0a48 	vmov.f32	s0, s16
 800151e:	f014 fdbd 	bl	801609c <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 8001522:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <audioInit+0x1000>)
 8001524:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001528:	4622      	mov	r2, r4
 800152a:	1958      	adds	r0, r3, r5
 800152c:	eeb0 0a48 	vmov.f32	s0, s16
 8001530:	2105      	movs	r1, #5
 8001532:	f014 fabf 	bl	8015ab4 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 8001536:	4b4b      	ldr	r3, [pc, #300]	; (8001664 <audioInit+0x1004>)
 8001538:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800153c:	4622      	mov	r2, r4
 800153e:	1958      	adds	r0, r3, r5
 8001540:	eeb0 0a48 	vmov.f32	s0, s16
 8001544:	2106      	movs	r1, #6
 8001546:	f014 fab5 	bl	8015ab4 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <audioInit+0x1008>)
 800154c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001550:	4622      	mov	r2, r4
 8001552:	1958      	adds	r0, r3, r5
 8001554:	eeb0 0a48 	vmov.f32	s0, s16
 8001558:	2107      	movs	r1, #7
 800155a:	f014 faab 	bl	8015ab4 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 800155e:	4b43      	ldr	r3, [pc, #268]	; (800166c <audioInit+0x100c>)
 8001560:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001564:	4622      	mov	r2, r4
 8001566:	1958      	adds	r0, r3, r5
 8001568:	eeb0 0a48 	vmov.f32	s0, s16
 800156c:	2104      	movs	r1, #4
 800156e:	f014 faa1 	bl	8015ab4 <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8001572:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <audioInit+0x1010>)
 8001574:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001578:	4621      	mov	r1, r4
 800157a:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
 800157c:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 800157e:	eeb0 0a48 	vmov.f32	s0, s16
 8001582:	f015 f91b 	bl	80167bc <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
 8001586:	45ab      	cmp	fp, r5
 8001588:	f47f aeb5 	bne.w	80012f6 <audioInit+0xc96>
 800158c:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 8001590:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
 8001594:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8001596:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
 8001598:	eef0 0a49 	vmov.f32	s1, s18
 800159c:	4621      	mov	r1, r4
 800159e:	eeb0 0a68 	vmov.f32	s0, s17
 80015a2:	f013 fd71 	bl	8015088 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80015a6:	45ab      	cmp	fp, r5
 80015a8:	d1f4      	bne.n	8001594 <audioInit+0xf34>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80015aa:	9b01      	ldr	r3, [sp, #4]
		}

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 80015ac:	2102      	movs	r1, #2
 80015ae:	2200      	movs	r2, #0
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80015b0:	f10b 0b04 	add.w	fp, fp, #4
 80015b4:	3304      	adds	r3, #4
 80015b6:	9301      	str	r3, [sp, #4]
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 80015b8:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <audioInit+0x1014>)
 80015ba:	1998      	adds	r0, r3, r6
 80015bc:	4623      	mov	r3, r4
 80015be:	f013 f81f 	bl	8014600 <tOversampler_init>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 80015c2:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <audioInit+0x1018>)
 80015c4:	4622      	mov	r2, r4
 80015c6:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800167c <audioInit+0x101c>
 80015ca:	1998      	adds	r0, r3, r6
 80015cc:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8001680 <audioInit+0x1020>
 80015d0:	2101      	movs	r1, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80015d2:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 80015d4:	f013 fefa 	bl	80153cc <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80015d8:	9b02      	ldr	r3, [sp, #8]
 80015da:	b97b      	cbnz	r3, 80015fc <audioInit+0xf9c>
 80015dc:	2301      	movs	r3, #1
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	e503      	b.n	8000fea <audioInit+0x98a>
		if (boardNumber == 0)
 80015e2:	b138      	cbz	r0, 80015f4 <audioInit+0xf94>
		else if (boardNumber == 1)
 80015e4:	2801      	cmp	r0, #1
 80015e6:	d01e      	beq.n	8001626 <audioInit+0xfc6>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 80015e8:	1e42      	subs	r2, r0, #1
 80015ea:	4926      	ldr	r1, [pc, #152]	; (8001684 <audioInit+0x1024>)
 80015ec:	2002      	movs	r0, #2
 80015ee:	0052      	lsls	r2, r2, #1
 80015f0:	600a      	str	r2, [r1, #0]
			numStringsThisBoard = 2;
 80015f2:	e427      	b.n	8000e44 <audioInit+0x7e4>
			firstString = 0;
 80015f4:	4a23      	ldr	r2, [pc, #140]	; (8001684 <audioInit+0x1024>)
 80015f6:	6010      	str	r0, [r2, #0]
			numStringsThisBoard = 1;
 80015f8:	2001      	movs	r0, #1
 80015fa:	e423      	b.n	8000e44 <audioInit+0x7e4>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	2100      	movs	r1, #0
 8001600:	4821      	ldr	r0, [pc, #132]	; (8001688 <audioInit+0x1028>)
 8001602:	f01b fc87 	bl	801cf14 <memset>
	}

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8001606:	2220      	movs	r2, #32
 8001608:	491f      	ldr	r1, [pc, #124]	; (8001688 <audioInit+0x1028>)
 800160a:	9805      	ldr	r0, [sp, #20]
 800160c:	f00c fbb0 	bl	800dd70 <HAL_SAI_Transmit_DMA>
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <audioInit+0x102c>)
 8001612:	4602      	mov	r2, r0
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready



	HAL_Delay(1);
 8001614:	9802      	ldr	r0, [sp, #8]
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8001616:	701a      	strb	r2, [r3, #0]

}
 8001618:	b007      	add	sp, #28
 800161a:	ecbd 8b10 	vpop	{d8-d15}
 800161e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
 8001622:	f007 bb6b 	b.w	8008cfc <HAL_Delay>
			firstString = 1;
 8001626:	4a17      	ldr	r2, [pc, #92]	; (8001684 <audioInit+0x1024>)
 8001628:	6010      	str	r0, [r2, #0]
			numStringsThisBoard = 1;
 800162a:	e40b      	b.n	8000e44 <audioInit+0x7e4>
 800162c:	20005a6c 	.word	0x20005a6c
 8001630:	42a00000 	.word	0x42a00000
 8001634:	20000ac4 	.word	0x20000ac4
 8001638:	463b8000 	.word	0x463b8000
 800163c:	3ff33333 	.word	0x3ff33333
 8001640:	200053c8 	.word	0x200053c8
 8001644:	200053e8 	.word	0x200053e8
 8001648:	3e4ccccd 	.word	0x3e4ccccd
 800164c:	3e638e39 	.word	0x3e638e39
 8001650:	200008f4 	.word	0x200008f4
 8001654:	200008d4 	.word	0x200008d4
 8001658:	20000894 	.word	0x20000894
 800165c:	200008b4 	.word	0x200008b4
 8001660:	20000874 	.word	0x20000874
 8001664:	20000854 	.word	0x20000854
 8001668:	20000834 	.word	0x20000834
 800166c:	20000814 	.word	0x20000814
 8001670:	200007f4 	.word	0x200007f4
 8001674:	20005450 	.word	0x20005450
 8001678:	20004ffc 	.word	0x20004ffc
 800167c:	3e99999a 	.word	0x3e99999a
 8001680:	46947000 	.word	0x46947000
 8001684:	2000500c 	.word	0x2000500c
 8001688:	30000000 	.word	0x30000000
 800168c:	20012f64 	.word	0x20012f64

08001690 <updateStateFromSPIMessage>:
const int syncMap[3] = {2, 0, 1};
float pluckPos = 0.5f;

void updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS[24 + offset];
 8001690:	4a27      	ldr	r2, [pc, #156]	; (8001730 <updateStateFromSPIMessage+0xa0>)

	neck = (modeBit >> 6) & 1;
	dualSlider = (modeBit >> 5) & 1;

	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS[25 + offset];
 8001692:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8001764 <updateStateFromSPIMessage+0xd4>
	int modeBit = SPI_LEVERS[24 + offset];
 8001696:	1811      	adds	r1, r2, r0
{
 8001698:	b4f0      	push	{r4, r5, r6, r7}
	int modeBit = SPI_LEVERS[24 + offset];
 800169a:	7e0b      	ldrb	r3, [r1, #24]
	voice = SPI_LEVERS[25 + offset];
 800169c:	7e49      	ldrb	r1, [r1, #25]
	neck = (modeBit >> 6) & 1;
 800169e:	4f25      	ldr	r7, [pc, #148]	; (8001734 <updateStateFromSPIMessage+0xa4>)
	voice = SPI_LEVERS[25 + offset];
 80016a0:	f8cc 1000 	str.w	r1, [ip]
	neck = (modeBit >> 6) & 1;
 80016a4:	f3c3 1c80 	ubfx	ip, r3, #6, #1
	dualSlider = (modeBit >> 5) & 1;
 80016a8:	4e23      	ldr	r6, [pc, #140]	; (8001738 <updateStateFromSPIMessage+0xa8>)
	neck = (modeBit >> 6) & 1;
 80016aa:	f8c7 c000 	str.w	ip, [r7]
	dualSlider = (modeBit >> 5) & 1;
 80016ae:	f3c3 1740 	ubfx	r7, r3, #5, #1
	edit = (modeBit >> 4) & 1;
 80016b2:	4d22      	ldr	r5, [pc, #136]	; (800173c <updateStateFromSPIMessage+0xac>)

	if (voice != prevVoice)
 80016b4:	4c22      	ldr	r4, [pc, #136]	; (8001740 <updateStateFromSPIMessage+0xb0>)
	dualSlider = (modeBit >> 5) & 1;
 80016b6:	6037      	str	r7, [r6, #0]
	edit = (modeBit >> 4) & 1;
 80016b8:	f3c3 1600 	ubfx	r6, r3, #4, #1
 80016bc:	602e      	str	r6, [r5, #0]
	if (voice != prevVoice)
 80016be:	6825      	ldr	r5, [r4, #0]
 80016c0:	42a9      	cmp	r1, r5
 80016c2:	d005      	beq.n	80016d0 <updateStateFromSPIMessage+0x40>
	{
		if ((voice == 63) || (voice == 62) || (voice == 61))
 80016c4:	f1a1 053d 	sub.w	r5, r1, #61	; 0x3d
 80016c8:	2d02      	cmp	r5, #2
 80016ca:	d82a      	bhi.n	8001722 <updateStateFromSPIMessage+0x92>
		{
			currentActivePreset = voice;
 80016cc:	4d1d      	ldr	r5, [pc, #116]	; (8001744 <updateStateFromSPIMessage+0xb4>)
 80016ce:	7029      	strb	r1, [r5, #0]

	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
	//octaveIndex = (modeBit & 15);
	//octave = powf(2.0f,((int32_t) (modeBit & 3) - 1 ));

	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016d0:	4410      	add	r0, r2
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
	volumePedal = volumePedalInt * 0.0002442002442f;
 80016da:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001748 <updateStateFromSPIMessage+0xb8>
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016de:	f890 c01a 	ldrb.w	ip, [r0, #26]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 80016e2:	3b05      	subs	r3, #5
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016e4:	7ec2      	ldrb	r2, [r0, #27]
 80016e6:	4819      	ldr	r0, [pc, #100]	; (800174c <updateStateFromSPIMessage+0xbc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 80016e8:	ee07 3a90 	vmov	s15, r3
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016ec:	eb02 220c 	add.w	r2, r2, ip, lsl #8
	prevVoice = voice;
 80016f0:	6021      	str	r1, [r4, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 80016f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f6:	4c16      	ldr	r4, [pc, #88]	; (8001750 <updateStateFromSPIMessage+0xc0>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016f8:	b292      	uxth	r2, r2
	volumePedal = volumePedalInt * 0.0002442002442f;
 80016fa:	4916      	ldr	r1, [pc, #88]	; (8001754 <updateStateFromSPIMessage+0xc4>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016fc:	8002      	strh	r2, [r0, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 80016fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
	volumePedal = volumePedalInt * 0.0002442002442f;
 8001702:	8803      	ldrh	r3, [r0, #0]
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8001704:	4814      	ldr	r0, [pc, #80]	; (8001758 <updateStateFromSPIMessage+0xc8>)
	volumePedal = volumePedalInt * 0.0002442002442f;
 8001706:	b29b      	uxth	r3, r3
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8001708:	edc4 7a00 	vstr	s15, [r4]
	volumePedal = volumePedalInt * 0.0002442002442f;
 800170c:	ee00 3a10 	vmov	s0, r3
 8001710:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001714:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001718:	ed81 0a00 	vstr	s0, [r1]
}
 800171c:	bcf0      	pop	{r4, r5, r6, r7}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
 800171e:	f013 bd0b 	b.w	8015138 <tExpSmooth_setDest>
			presetWaitingToLoad = 1;
 8001722:	4d0e      	ldr	r5, [pc, #56]	; (800175c <updateStateFromSPIMessage+0xcc>)
 8001724:	2601      	movs	r6, #1
 8001726:	602e      	str	r6, [r5, #0]
			presetNumberToLoad = voice;
 8001728:	4d0d      	ldr	r5, [pc, #52]	; (8001760 <updateStateFromSPIMessage+0xd0>)
 800172a:	7029      	strb	r1, [r5, #0]
 800172c:	e7d0      	b.n	80016d0 <updateStateFromSPIMessage+0x40>
 800172e:	bf00      	nop
 8001730:	30000100 	.word	0x30000100
 8001734:	2000540c 	.word	0x2000540c
 8001738:	20004f94 	.word	0x20004f94
 800173c:	20004f98 	.word	0x20004f98
 8001740:	20005580 	.word	0x20005580
 8001744:	2001304c 	.word	0x2001304c
 8001748:	39800801 	.word	0x39800801
 800174c:	20012f90 	.word	0x20012f90
 8001750:	2000544c 	.word	0x2000544c
 8001754:	20012f8c 	.word	0x20012f8c
 8001758:	20012f94 	.word	0x20012f94
 800175c:	20016cd0 	.word	0x20016cd0
 8001760:	200006e4 	.word	0x200006e4
 8001764:	20012f84 	.word	0x20012f84

08001768 <oscillator_tick>:
uint32_t timeApprox = 0;
uint32_t timeTrue = 0;
volatile float MIDIerror = 0.0f;

void __ATTR_ITCMRAM oscillator_tick(float note, int string)
{
 8001768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //if (loadingTables || !enabled) return;
	interruptChecker = 0;
 800176c:	496a      	ldr	r1, [pc, #424]	; (8001918 <oscillator_tick+0x1b0>)
 800176e:	2500      	movs	r5, #0
	uint32_t tempCount1 = DWT->CYCCNT;
	for (int i = 0; i < NUM_OSC; i++)
	{
		oscOuts[0][i][string] = 0.0f;
 8001770:	4a6a      	ldr	r2, [pc, #424]	; (800191c <oscillator_tick+0x1b4>)
{
 8001772:	ed2d 8b0c 	vpush	{d8-d13}
	interruptChecker = 0;
 8001776:	700d      	strb	r5, [r1, #0]
{
 8001778:	b087      	sub	sp, #28
	uint32_t tempCount1 = DWT->CYCCNT;
 800177a:	4969      	ldr	r1, [pc, #420]	; (8001920 <oscillator_tick+0x1b8>)
		oscOuts[0][i][string] = 0.0f;
 800177c:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001780:	ed9f 9a68 	vldr	s18, [pc, #416]	; 8001924 <oscillator_tick+0x1bc>
	uint32_t tempCount1 = DWT->CYCCNT;
 8001784:	684b      	ldr	r3, [r1, #4]
		oscOuts[0][i][string] = 0.0f;
 8001786:	ed86 9a00 	vstr	s18, [r6]
	uint32_t tempCount1 = DWT->CYCCNT;
 800178a:	9303      	str	r3, [sp, #12]
		oscOuts[1][i][string] = 0.0f;
	}
	//for (int osc = 0; osc < 1; osc++)
	for (int osc = 0; osc < oscToTick; osc++)
 800178c:	4b66      	ldr	r3, [pc, #408]	; (8001928 <oscillator_tick+0x1c0>)
		oscOuts[1][i][string] = 0.0f;
 800178e:	ed86 9a06 	vstr	s18, [r6, #24]
	for (int osc = 0; osc < oscToTick; osc++)
 8001792:	7819      	ldrb	r1, [r3, #0]
		oscOuts[0][i][string] = 0.0f;
 8001794:	ed86 9a02 	vstr	s18, [r6, #8]
		oscOuts[1][i][string] = 0.0f;
 8001798:	ed86 9a08 	vstr	s18, [r6, #32]
		oscOuts[0][i][string] = 0.0f;
 800179c:	ed86 9a04 	vstr	s18, [r6, #16]
		oscOuts[1][i][string] = 0.0f;
 80017a0:	ed86 9a0a 	vstr	s18, [r6, #40]	; 0x28
	for (int osc = 0; osc < oscToTick; osc++)
 80017a4:	2900      	cmp	r1, #0
 80017a6:	f000 80ab 	beq.w	8001900 <oscillator_tick+0x198>
 80017aa:	0082      	lsls	r2, r0, #2
 80017ac:	495f      	ldr	r1, [pc, #380]	; (800192c <oscillator_tick+0x1c4>)
 80017ae:	4c60      	ldr	r4, [pc, #384]	; (8001930 <oscillator_tick+0x1c8>)
 80017b0:	eef0 9a40 	vmov.f32	s19, s0
 80017b4:	4f5f      	ldr	r7, [pc, #380]	; (8001934 <oscillator_tick+0x1cc>)
 80017b6:	eb01 0a02 	add.w	sl, r1, r2
 80017ba:	495f      	ldr	r1, [pc, #380]	; (8001938 <oscillator_tick+0x1d0>)
 80017bc:	4683      	mov	fp, r0
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <oscillator_tick+0x1d4>)
 80017c0:	4414      	add	r4, r2
		float freqOffset= oscParams[OscFreq].realVal[string];
		float shape = oscParams[OscShape].realVal[string];
		float amp = oscParams[OscAmp].realVal[string];
		float filterSend = oscParams[OscFilterSend].realVal[string];
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
		float freqToSmooth = (note + (fine*0.01f));
 80017c2:	ed9f ca5f 	vldr	s24, [pc, #380]	; 8001940 <oscillator_tick+0x1d8>
 80017c6:	4417      	add	r7, r2
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);

		uint32_t tempCountappr = DWT->CYCCNT;
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 80017c8:	eddf ba5e 	vldr	s23, [pc, #376]	; 8001944 <oscillator_tick+0x1dc>
 80017cc:	eb01 0902 	add.w	r9, r1, r2
 80017d0:	ed9f ba5d 	vldr	s22, [pc, #372]	; 8001948 <oscillator_tick+0x1e0>
 80017d4:	eddf aa5d 	vldr	s21, [pc, #372]	; 800194c <oscillator_tick+0x1e4>
 80017d8:	ed9f aa5d 	vldr	s20, [pc, #372]	; 8001950 <oscillator_tick+0x1e8>
 80017dc:	9300      	str	r3, [sp, #0]
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 80017de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017e2:	edd4 6ae9 	vldr	s13, [r4, #932]	; 0x3a4
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 80017e6:	eeb0 0a69 	vmov.f32	s0, s19
		float freqToSmooth = (note + (fine*0.01f));
 80017ea:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
		uint32_t tempCountappr = DWT->CYCCNT;
 80017ee:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8001920 <oscillator_tick+0x1b8>
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 80017f2:	4638      	mov	r0, r7
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 80017f4:	eef4 6ac7 	vcmpe.f32	s13, s14
		float filterSend = oscParams[OscFilterSend].realVal[string];
 80017f8:	edd4 8afe 	vldr	s17, [r4, #1016]	; 0x3f8
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 80017fc:	eea7 0a8c 	vfma.f32	s0, s15, s24
		float freqOffset= oscParams[OscFreq].realVal[string];
 8001800:	ed94 dabf 	vldr	s26, [r4, #764]	; 0x2fc
		float amp = oscParams[OscAmp].realVal[string];
 8001804:	edd4 cacd 	vldr	s25, [r4, #820]	; 0x334
		int tempIndexI = (int)tempIndexF;
		tempIndexF = tempIndexF -tempIndexI;

		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8001808:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float shape = oscParams[OscShape].realVal[string];
 8001810:	edd4 dac6 	vldr	s27, [r4, #792]	; 0x318
	for (int osc = 0; osc < oscToTick; osc++)
 8001814:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
 8001818:	f106 0608 	add.w	r6, r6, #8
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 800181c:	bfcc      	ite	gt
 800181e:	2201      	movgt	r2, #1
 8001820:	2200      	movle	r2, #0
 8001822:	9202      	str	r2, [sp, #8]
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8001824:	f013 fc88 	bl	8015138 <tExpSmooth_setDest>
		uint32_t tempCountappr = DWT->CYCCNT;
 8001828:	f8d8 1004 	ldr.w	r1, [r8, #4]
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 800182c:	4638      	mov	r0, r7
	for (int osc = 0; osc < oscToTick; osc++)
 800182e:	3708      	adds	r7, #8
		uint32_t tempCountappr = DWT->CYCCNT;
 8001830:	9101      	str	r1, [sp, #4]
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 8001832:	f013 fc85 	bl	8015140 <tExpSmooth_tick>
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8001836:	eeb0 1a6a 	vmov.f32	s2, s21
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 800183a:	eef0 0a40 	vmov.f32	s1, s0
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 800183e:	eeb0 0a4a 	vmov.f32	s0, s20
 8001842:	f015 fa2b 	bl	8016c9c <LEAF_clip>
 8001846:	eef0 7a4b 	vmov.f32	s15, s22
		timeApprox = DWT->CYCCNT - tempCountappr;
 800184a:	f8d8 3004 	ldr.w	r3, [r8, #4]
		float finalFreq = (freqToSmooth * freqMult[osc][string]) + freqOffset;

		float sample = 0.0f;


		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 800184e:	eef0 0a6d 	vmov.f32	s1, s27
		timeApprox = DWT->CYCCNT - tempCountappr;
 8001852:	9901      	ldr	r1, [sp, #4]
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8001854:	eee0 7a2b 	vfma.f32	s15, s0, s23
		timeApprox = DWT->CYCCNT - tempCountappr;
 8001858:	4a3e      	ldr	r2, [pc, #248]	; (8001954 <oscillator_tick+0x1ec>)
 800185a:	1a5b      	subs	r3, r3, r1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 800185c:	483e      	ldr	r0, [pc, #248]	; (8001958 <oscillator_tick+0x1f0>)
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 800185e:	eeb0 0a4d 	vmov.f32	s0, s26
		float sample = 0.0f;
 8001862:	ed8d 9a05 	vstr	s18, [sp, #20]
		timeApprox = DWT->CYCCNT - tempCountappr;
 8001866:	6013      	str	r3, [r2, #0]
		float finalFreq = (freqToSmooth * freqMult[osc][string]) + freqOffset;
 8001868:	4653      	mov	r3, sl
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 800186a:	9a02      	ldr	r2, [sp, #8]
		float finalFreq = (freqToSmooth * freqMult[osc][string]) + freqOffset;
 800186c:	f10a 0a08 	add.w	sl, sl, #8
 8001870:	ed93 6a00 	vldr	s12, [r3]
		int tempIndexI = (int)tempIndexF;
 8001874:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8001878:	ee38 7a67 	vsub.f32	s14, s16, s15
		sourceValues[osc][string] = sample;

		//sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)

		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 800187c:	ee38 8a68 	vsub.f32	s16, s16, s17
		int tempIndexI = (int)tempIndexF;
 8001880:	ee16 3a90 	vmov	r3, s13
		tempIndexF = tempIndexF -tempIndexI;
 8001884:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8001888:	1c59      	adds	r1, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 800188a:	f3c3 030e 	ubfx	r3, r3, #0, #15
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 800188e:	ee37 7a26 	vadd.f32	s14, s14, s13
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8001892:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8001896:	f3c1 010e 	ubfx	r1, r1, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
 800189a:	ee77 7ae6 	vsub.f32	s15, s15, s13
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 800189e:	edd3 6a00 	vldr	s13, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 80018a2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 80018a6:	4629      	mov	r1, r5
 80018a8:	a805      	add	r0, sp, #20
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 80018aa:	edd3 5a00 	vldr	s11, [r3]
	for (int osc = 0; osc < oscToTick; osc++)
 80018ae:	3501      	adds	r5, #1
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 80018b0:	9b00      	ldr	r3, [sp, #0]
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 80018b2:	ee67 7aa5 	vmul.f32	s15, s15, s11
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 80018b6:	f853 8b04 	ldr.w	r8, [r3], #4
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 80018ba:	eee7 7a26 	vfma.f32	s15, s14, s13
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	465b      	mov	r3, fp
 80018c2:	eea6 0a27 	vfma.f32	s0, s12, s15
 80018c6:	47c0      	blx	r8
		sample *= amp;
 80018c8:	eddd 7a05 	vldr	s15, [sp, #20]
		sourceValues[osc][string] = sample;
 80018cc:	464b      	mov	r3, r9
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 80018ce:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
		sample *= amp;
 80018d2:	ee6c 7aa7 	vmul.f32	s15, s25, s15
		sourceValues[osc][string] = sample;
 80018d6:	f109 0908 	add.w	r9, r9, #8
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 80018da:	ee67 8a28 	vmul.f32	s17, s14, s17
		sourceValues[osc][string] = sample;
 80018de:	edc3 7a00 	vstr	s15, [r3]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 80018e2:	ee27 7a87 	vmul.f32	s14, s15, s14
	for (int osc = 0; osc < oscToTick; osc++)
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <oscillator_tick+0x1c0>)
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 80018e8:	ee68 8aa7 	vmul.f32	s17, s17, s15
	for (int osc = 0; osc < oscToTick; osc++)
 80018ec:	781b      	ldrb	r3, [r3, #0]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 80018ee:	ee28 8a07 	vmul.f32	s16, s16, s14
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 80018f2:	ed46 8a02 	vstr	s17, [r6, #-8]
	for (int osc = 0; osc < oscToTick; osc++)
 80018f6:	42ab      	cmp	r3, r5
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 80018f8:	ed86 8a04 	vstr	s16, [r6, #16]
	for (int osc = 0; osc < oscToTick; osc++)
 80018fc:	f73f af6f 	bgt.w	80017de <oscillator_tick+0x76>
	}

	timeOsc = DWT->CYCCNT - tempCount1;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <oscillator_tick+0x1b8>)
 8001902:	9903      	ldr	r1, [sp, #12]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a15      	ldr	r2, [pc, #84]	; (800195c <oscillator_tick+0x1f4>)
 8001908:	1a5b      	subs	r3, r3, r1
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	b007      	add	sp, #28
 800190e:	ecbd 8b0c 	vpop	{d8-d13}
 8001912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001916:	bf00      	nop
 8001918:	20015205 	.word	0x20015205
 800191c:	20005458 	.word	0x20005458
 8001920:	e0001000 	.word	0xe0001000
 8001924:	00000000 	.word	0x00000000
 8001928:	20000028 	.word	0x20000028
 800192c:	20005014 	.word	0x20005014
 8001930:	20015bcc 	.word	0x20015bcc
 8001934:	2000555c 	.word	0x2000555c
 8001938:	20012dac 	.word	0x20012dac
 800193c:	20005a40 	.word	0x20005a40
 8001940:	3c23d70a 	.word	0x3c23d70a
 8001944:	42c80000 	.word	0x42c80000
 8001948:	46800000 	.word	0x46800000
 800194c:	43480000 	.word	0x43480000
 8001950:	c3480000 	.word	0xc3480000
 8001954:	20012f14 	.word	0x20012f14
 8001958:	24000000 	.word	0x24000000
 800195c:	20012f2c 	.word	0x20012f2c

08001960 <sawSquareTick>:


void __ATTR_ITCMRAM  sawSquareTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8001960:	e92d 41e0 	stmdb	sp!, {r5, r6, r7, r8, lr}
 8001964:	461e      	mov	r6, r3
 8001966:	4605      	mov	r5, r0
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8001968:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800196c:	4818      	ldr	r0, [pc, #96]	; (80019d0 <sawSquareTick+0x70>)
{
 800196e:	4617      	mov	r7, r2
 8001970:	4688      	mov	r8, r1
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8001972:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8001976:	ed2d 8b02 	vpush	{d8}
 800197a:	eeb0 8a60 	vmov.f32	s16, s1
 800197e:	b083      	sub	sp, #12
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8001980:	9001      	str	r0, [sp, #4]
 8001982:	f019 fe85 	bl	801b690 <tMBSawPulse_setFreq>
    tMBSawPulse_setShape(&sawPaired[v][string], shape);
 8001986:	9801      	ldr	r0, [sp, #4]
 8001988:	eeb0 0a48 	vmov.f32	s0, s16
 800198c:	f019 fee2 	bl	801b754 <tMBSawPulse_setShape>
    if (sync)
 8001990:	9801      	ldr	r0, [sp, #4]
 8001992:	b977      	cbnz	r7, 80019b2 <sawSquareTick+0x52>
    {
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);

    }
    *sample += tMBSawPulse_tick(&sawPaired[v][string]) * 2.f;
 8001994:	f018 ff82 	bl	801a89c <tMBSawPulse_tick>
 8001998:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800199c:	edd5 7a00 	vldr	s15, [r5]
 80019a0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80019a4:	edc5 7a00 	vstr	s15, [r5]
}
 80019a8:	b003      	add	sp, #12
 80019aa:	ecbd 8b02 	vpop	{d8}
 80019ae:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <sawSquareTick+0x74>)
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <sawSquareTick+0x78>)
 80019b6:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 80019ba:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 80019be:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80019c2:	ed93 0a00 	vldr	s0, [r3]
 80019c6:	f019 fe95 	bl	801b6f4 <tMBSawPulse_sync>
 80019ca:	9801      	ldr	r0, [sp, #4]
 80019cc:	e7e2      	b.n	8001994 <sawSquareTick+0x34>
 80019ce:	bf00      	nop
 80019d0:	200059e8 	.word	0x200059e8
 80019d4:	0801f460 	.word	0x0801f460
 80019d8:	20012dac 	.word	0x20012dac

080019dc <sineTriTick>:

void __ATTR_ITCMRAM  sineTriTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 80019dc:	e92d 41e0 	stmdb	sp!, {r5, r6, r7, r8, lr}
 80019e0:	461e      	mov	r6, r3
 80019e2:	4605      	mov	r5, r0
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 80019e4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80019e8:	4818      	ldr	r0, [pc, #96]	; (8001a4c <sineTriTick+0x70>)
{
 80019ea:	4617      	mov	r7, r2
 80019ec:	4688      	mov	r8, r1
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 80019ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 80019f2:	ed2d 8b02 	vpush	{d8}
 80019f6:	eeb0 8a60 	vmov.f32	s16, s1
 80019fa:	b083      	sub	sp, #12
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 80019fc:	9001      	str	r0, [sp, #4]
 80019fe:	f018 fc01 	bl	801a204 <tMBSineTri_setFreq>
    tMBSineTri_setShape(&sinePaired[v][string],shape);
 8001a02:	9801      	ldr	r0, [sp, #4]
 8001a04:	eeb0 0a48 	vmov.f32	s0, s16
 8001a08:	f018 fc3c 	bl	801a284 <tMBSineTri_setShape>
    if (sync)
 8001a0c:	9801      	ldr	r0, [sp, #4]
 8001a0e:	b977      	cbnz	r7, 8001a2e <sineTriTick+0x52>
    {
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
    }
    *sample += tMBSineTri_tick(&sinePaired[v][string]) * 2.0f;
 8001a10:	f017 fbc8 	bl	80191a4 <tMBSineTri_tick>
 8001a14:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a18:	edd5 7a00 	vldr	s15, [r5]
 8001a1c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001a20:	edc5 7a00 	vstr	s15, [r5]
}
 8001a24:	b003      	add	sp, #12
 8001a26:	ecbd 8b02 	vpop	{d8}
 8001a2a:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <sineTriTick+0x74>)
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <sineTriTick+0x78>)
 8001a32:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8001a36:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8001a3a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001a3e:	ed93 0a00 	vldr	s0, [r3]
 8001a42:	f018 fbef 	bl	801a224 <tMBSineTri_sync>
 8001a46:	9801      	ldr	r0, [sp, #4]
 8001a48:	e7e2      	b.n	8001a10 <sineTriTick+0x34>
 8001a4a:	bf00      	nop
 8001a4c:	20005aa4 	.word	0x20005aa4
 8001a50:	0801f460 	.word	0x0801f460
 8001a54:	20012dac 	.word	0x20012dac

08001a58 <sawTick>:

void __ATTR_ITCMRAM  sawTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8001a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tMBSaw_setFreq(&saw[v][string], freq);
 8001a5c:	4c14      	ldr	r4, [pc, #80]	; (8001ab0 <sawTick+0x58>)
{
 8001a5e:	461e      	mov	r6, r3
    tMBSaw_setFreq(&saw[v][string], freq);
 8001a60:	eb03 0341 	add.w	r3, r3, r1, lsl #1
{
 8001a64:	b082      	sub	sp, #8
 8001a66:	4617      	mov	r7, r2
 8001a68:	4605      	mov	r5, r0
    tMBSaw_setFreq(&saw[v][string], freq);
 8001a6a:	eb04 0083 	add.w	r0, r4, r3, lsl #2
{
 8001a6e:	4688      	mov	r8, r1
    tMBSaw_setFreq(&saw[v][string], freq);
 8001a70:	9001      	str	r0, [sp, #4]
 8001a72:	f018 fe89 	bl	801a788 <tMBSaw_setFreq>
    if (sync)
 8001a76:	9801      	ldr	r0, [sp, #4]
 8001a78:	b967      	cbnz	r7, 8001a94 <sawTick+0x3c>
	{
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBSaw_tick(&saw[v][string]) * 2.f;;
 8001a7a:	f018 fc47 	bl	801a30c <tMBSaw_tick>
 8001a7e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a82:	edd5 7a00 	vldr	s15, [r5]
 8001a86:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001a8a:	edc5 7a00 	vstr	s15, [r5]
}
 8001a8e:	b002      	add	sp, #8
 8001a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <sawTick+0x5c>)
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <sawTick+0x60>)
 8001a98:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8001a9c:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8001aa0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001aa4:	ed93 0a00 	vldr	s0, [r3]
 8001aa8:	f018 fe7e 	bl	801a7a8 <tMBSaw_sync>
 8001aac:	9801      	ldr	r0, [sp, #4]
 8001aae:	e7e4      	b.n	8001a7a <sawTick+0x22>
 8001ab0:	200059d0 	.word	0x200059d0
 8001ab4:	0801f460 	.word	0x0801f460
 8001ab8:	20012dac 	.word	0x20012dac

08001abc <pulseTick>:

void __ATTR_ITCMRAM  pulseTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8001abc:	e92d 41e0 	stmdb	sp!, {r5, r6, r7, r8, lr}
 8001ac0:	461e      	mov	r6, r3
 8001ac2:	4605      	mov	r5, r0
    tMBPulse_setFreq(&pulse[v][string], freq);
 8001ac4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8001ac8:	4818      	ldr	r0, [pc, #96]	; (8001b2c <pulseTick+0x70>)
{
 8001aca:	4617      	mov	r7, r2
 8001acc:	4688      	mov	r8, r1
    tMBPulse_setFreq(&pulse[v][string], freq);
 8001ace:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8001ad2:	ed2d 8b02 	vpush	{d8}
 8001ad6:	eeb0 8a60 	vmov.f32	s16, s1
 8001ada:	b083      	sub	sp, #12
    tMBPulse_setFreq(&pulse[v][string], freq);
 8001adc:	9001      	str	r0, [sp, #4]
 8001ade:	f016 fa55 	bl	8017f8c <tMBPulse_setFreq>
    tMBPulse_setWidth(&pulse[v][string], shape);
 8001ae2:	9801      	ldr	r0, [sp, #4]
 8001ae4:	eeb0 0a48 	vmov.f32	s0, s16
 8001ae8:	f016 fa60 	bl	8017fac <tMBPulse_setWidth>
    if (sync)
 8001aec:	9801      	ldr	r0, [sp, #4]
 8001aee:	b977      	cbnz	r7, 8001b0e <pulseTick+0x52>
	{
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBPulse_tick(&pulse[v][string]) * 2.f;;
 8001af0:	f015 fcf2 	bl	80174d8 <tMBPulse_tick>
 8001af4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001af8:	edd5 7a00 	vldr	s15, [r5]
 8001afc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001b00:	edc5 7a00 	vstr	s15, [r5]
}
 8001b04:	b003      	add	sp, #12
 8001b06:	ecbd 8b02 	vpop	{d8}
 8001b0a:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <pulseTick+0x74>)
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <pulseTick+0x78>)
 8001b12:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8001b16:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8001b1a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001b1e:	ed93 0a00 	vldr	s0, [r3]
 8001b22:	f016 fa51 	bl	8017fc8 <tMBPulse_sync>
 8001b26:	9801      	ldr	r0, [sp, #4]
 8001b28:	e7e2      	b.n	8001af0 <pulseTick+0x34>
 8001b2a:	bf00      	nop
 8001b2c:	200055b4 	.word	0x200055b4
 8001b30:	0801f460 	.word	0x0801f460
 8001b34:	20012dac 	.word	0x20012dac

08001b38 <sineTick>:

void __ATTR_ITCMRAM  sineTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    tCycle_setFreq(&sine[v][string], freq);
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <sineTick+0x2c>)
 8001b3a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
 8001b3e:	b510      	push	{r4, lr}
 8001b40:	4604      	mov	r4, r0
 8001b42:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
 8001b44:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8001b48:	9001      	str	r0, [sp, #4]
 8001b4a:	f015 fbff 	bl	801734c <tCycle_setFreq>
    *sample += tCycle_tick(&sine[v][string]);
 8001b4e:	9801      	ldr	r0, [sp, #4]
 8001b50:	f015 fbd6 	bl	8017300 <tCycle_tick>
 8001b54:	edd4 7a00 	vldr	s15, [r4]
 8001b58:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001b5c:	ed84 0a00 	vstr	s0, [r4]
}
 8001b60:	b002      	add	sp, #8
 8001b62:	bd10      	pop	{r4, pc}
 8001b64:	20005a8c 	.word	0x20005a8c

08001b68 <triTick>:

void __ATTR_ITCMRAM  triTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8001b68:	e92d 41e0 	stmdb	sp!, {r5, r6, r7, r8, lr}
 8001b6c:	461e      	mov	r6, r3
 8001b6e:	4605      	mov	r5, r0
    tMBTriangle_setFreq(&tri[v][string], freq);
 8001b70:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8001b74:	4818      	ldr	r0, [pc, #96]	; (8001bd8 <triTick+0x70>)
{
 8001b76:	4617      	mov	r7, r2
 8001b78:	4688      	mov	r8, r1
    tMBTriangle_setFreq(&tri[v][string], freq);
 8001b7a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
{
 8001b7e:	ed2d 8b02 	vpush	{d8}
 8001b82:	eeb0 8a60 	vmov.f32	s16, s1
 8001b86:	b083      	sub	sp, #12
    tMBTriangle_setFreq(&tri[v][string], freq);
 8001b88:	9001      	str	r0, [sp, #4]
 8001b8a:	f017 fa6d 	bl	8019068 <tMBTriangle_setFreq>
    tMBTriangle_setWidth(&tri[v][string], shape);
 8001b8e:	9801      	ldr	r0, [sp, #4]
 8001b90:	eeb0 0a48 	vmov.f32	s0, s16
 8001b94:	f017 fa78 	bl	8019088 <tMBTriangle_setWidth>
    if (sync)
 8001b98:	9801      	ldr	r0, [sp, #4]
 8001b9a:	b977      	cbnz	r7, 8001bba <triTick+0x52>
	{
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBTriangle_tick(&tri[v][string]) * 2.0f;;
 8001b9c:	f016 fa8a 	bl	80180b4 <tMBTriangle_tick>
 8001ba0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001ba4:	edd5 7a00 	vldr	s15, [r5]
 8001ba8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001bac:	edc5 7a00 	vstr	s15, [r5]
}
 8001bb0:	b003      	add	sp, #12
 8001bb2:	ecbd 8b02 	vpop	{d8}
 8001bb6:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <triTick+0x74>)
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <triTick+0x78>)
 8001bbe:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8001bc2:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8001bc6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001bca:	ed93 0a00 	vldr	s0, [r3]
 8001bce:	f017 fa6d 	bl	80190ac <tMBTriangle_sync>
 8001bd2:	9801      	ldr	r0, [sp, #4]
 8001bd4:	e7e2      	b.n	8001b9c <triTick+0x34>
 8001bd6:	bf00      	nop
 8001bd8:	20012f6c 	.word	0x20012f6c
 8001bdc:	0801f460 	.word	0x0801f460
 8001be0:	20012dac 	.word	0x20012dac

08001be4 <userTick>:
void __ATTR_ITCMRAM  userTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    //tWaveOscS_setFreq(&wave[v], freq);
    //tWaveOscS_setIndex(&wave[v], shape);
    //*sample += tWaveOscS_tick(&wave[v]);
}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop

08001be8 <filter_tick>:

uint32_t timeFilt = 0;

float __ATTR_ITCMRAM filter_tick(float* samples, float note, int string)
{
	interruptChecker = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	4a6e      	ldr	r2, [pc, #440]	; (8001da4 <filter_tick+0x1bc>)
{
 8001bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tempCount1 = DWT->CYCCNT;
	float cutoff[2];
	uint8_t enabledFilt[2] = {0,0};
	for (int f = 0; f < filterToTick; f++)
 8001bf0:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8001dcc <filter_tick+0x1e4>
{
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	460d      	mov	r5, r1
 8001bf8:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 8001bfc:	7013      	strb	r3, [r2, #0]
{
 8001bfe:	b086      	sub	sp, #24
	uint32_t tempCount1 = DWT->CYCCNT;
 8001c00:	4a69      	ldr	r2, [pc, #420]	; (8001da8 <filter_tick+0x1c0>)
 8001c02:	6857      	ldr	r7, [r2, #4]
	uint8_t enabledFilt[2] = {0,0};
 8001c04:	f8ad 300c 	strh.w	r3, [sp, #12]
	for (int f = 0; f < filterToTick; f++)
 8001c08:	f898 3000 	ldrb.w	r3, [r8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80b4 	beq.w	8001d7a <filter_tick+0x192>
	{
		param* filtParams = &params[FILTER_PARAMS_OFFSET + f * FilterParamsNum];
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001c12:	4e66      	ldr	r6, [pc, #408]	; (8001dac <filter_tick+0x1c4>)
 8001c14:	f201 229b 	addw	r2, r1, #667	; 0x29b
		enabledFilt[f] = (enabled > 0.5f);
		if (!enabledFilt[f]) continue;
 8001c18:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001c1c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8001c20:	eeb0 8a40 	vmov.f32	s16, s0
 8001c24:	edd2 8a00 	vldr	s17, [r2]
		if (!enabledFilt[f]) continue;
 8001c28:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	d875      	bhi.n	8001d1e <filter_tick+0x136>
	for (int f = 0; f < filterToTick; f++)
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d935      	bls.n	8001ca2 <filter_tick+0xba>
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001c36:	f205 23c5 	addw	r3, r5, #709	; 0x2c5
		enabledFilt[f] = (enabled > 0.5f);
 8001c3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001c3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001c42:	ed93 7a00 	vldr	s14, [r3]
		enabledFilt[f] = (enabled > 0.5f);
 8001c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	bfcc      	ite	gt
 8001c50:	2301      	movgt	r3, #1
 8001c52:	2300      	movle	r3, #0
 8001c54:	f88d 300d 	strb.w	r3, [sp, #13]
		if (!enabledFilt[f]) continue;
 8001c58:	d923      	bls.n	8001ca2 <filter_tick+0xba>

		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
 8001c5a:	1cab      	adds	r3, r5, #2
 8001c5c:	4a54      	ldr	r2, [pc, #336]	; (8001db0 <filter_tick+0x1c8>)
			note = 0.0f; //is this necessary?
		}

		cutoff[f] = MIDIcutoff + (note * keyFollow);

		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001c5e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001c62:	eddf 7a54 	vldr	s15, [pc, #336]	; 8001db4 <filter_tick+0x1cc>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 8001c66:	eb02 0183 	add.w	r1, r2, r3, lsl #2
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001c6a:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8001db8 <filter_tick+0x1d0>
 8001c6e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001dbc <filter_tick+0x1d4>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
 8001c72:	ea4f 0883 	mov.w	r8, r3, lsl #2
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001c76:	ed51 0a15 	vldr	s1, [r1, #-84]	; 0xffffffac
 8001c7a:	ed91 7a00 	vldr	s14, [r1]
 8001c7e:	ee70 0ae6 	vsub.f32	s1, s1, s13
 8001c82:	eee7 0a08 	vfma.f32	s1, s14, s16
 8001c86:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001c8a:	f015 f807 	bl	8016c9c <LEAF_clip>
		//smoothing may not be necessary
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 8001c8e:	484c      	ldr	r0, [pc, #304]	; (8001dc0 <filter_tick+0x1d8>)
 8001c90:	4440      	add	r0, r8
 8001c92:	9001      	str	r0, [sp, #4]
 8001c94:	f013 fa50 	bl	8015138 <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001c98:	9801      	ldr	r0, [sp, #4]
 8001c9a:	f013 fa51 	bl	8015140 <tExpSmooth_tick>
 8001c9e:	ed8d 0a05 	vstr	s0, [sp, #20]
	}

	float  sp = params[FilterSeriesParallelMix].realVal[string];

	if (enabledFilt[0])
 8001ca2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001ca6:	f205 23ef 	addw	r3, r5, #751	; 0x2ef
		filterTick[0](&samples[0], 0, cutoff[0], string);
	}
	float sendToFilter2 = samples[0] * (1.0f - sp);
	samples[1] += sendToFilter2;
	//compute what gets sent to the second filter
	if (enabledFilt[1])
 8001caa:	f89d 800d 	ldrb.w	r8, [sp, #13]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001cae:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	if (enabledFilt[0])
 8001cb2:	eef4 8ae7 	vcmpe.f32	s17, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001cb6:	ed96 8a00 	vldr	s16, [r6]
	if (enabledFilt[0])
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	dd07      	ble.n	8001cd0 <filter_tick+0xe8>
		filterTick[0](&samples[0], 0, cutoff[0], string);
 8001cc0:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <filter_tick+0x1dc>)
 8001cc2:	462a      	mov	r2, r5
 8001cc4:	ed9d 0a04 	vldr	s0, [sp, #16]
 8001cc8:	2100      	movs	r1, #0
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001cd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 8001cd4:	ed94 0a01 	vldr	s0, [r4, #4]
 8001cd8:	ed94 7a00 	vldr	s14, [r4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001cdc:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 8001ce0:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001ce4:	ed84 0a01 	vstr	s0, [r4, #4]
	if (enabledFilt[1])
 8001ce8:	f1b8 0f00 	cmp.w	r8, #0
 8001cec:	d009      	beq.n	8001d02 <filter_tick+0x11a>
	{
		filterTick[1](&samples[1], 1, cutoff[1], string);
 8001cee:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <filter_tick+0x1dc>)
 8001cf0:	462a      	mov	r2, r5
 8001cf2:	ed9d 0a05 	vldr	s0, [sp, #20]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	1d20      	adds	r0, r4, #4
 8001cfc:	4798      	blx	r3
	}

	timeFilt = DWT->CYCCNT - tempCount1;
	return samples[1] + (samples[0] * sp);
 8001cfe:	ed94 0a01 	vldr	s0, [r4, #4]
	timeFilt = DWT->CYCCNT - tempCount1;
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <filter_tick+0x1c0>)
 8001d04:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <filter_tick+0x1e0>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	1bdb      	subs	r3, r3, r7
 8001d0a:	6013      	str	r3, [r2, #0]
	return samples[1] + (samples[0] * sp);
 8001d0c:	edd4 7a00 	vldr	s15, [r4]
}
 8001d10:	eea8 0a27 	vfma.f32	s0, s16, s15
 8001d14:	b006      	add	sp, #24
 8001d16:	ecbd 8b02 	vpop	{d8}
 8001d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
 8001d1e:	1c8b      	adds	r3, r1, #2
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 8001d20:	f606 229c 	addw	r2, r6, #2716	; 0xa9c
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001d24:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001d28:	eddf 7a22 	vldr	s15, [pc, #136]	; 8001db4 <filter_tick+0x1cc>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 8001d2c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001d30:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8001db8 <filter_tick+0x1d0>
 8001d34:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001dbc <filter_tick+0x1d4>
 8001d38:	edd2 0a00 	vldr	s1, [r2]
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
 8001d3c:	f506 622f 	add.w	r2, r6, #2800	; 0xaf0
 8001d40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001d44:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8001d48:	ed93 7a00 	vldr	s14, [r3]
 8001d4c:	eee8 0a07 	vfma.f32	s1, s16, s14
 8001d50:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001d54:	f014 ffa2 	bl	8016c9c <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 8001d58:	4819      	ldr	r0, [pc, #100]	; (8001dc0 <filter_tick+0x1d8>)
 8001d5a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8001d5e:	9001      	str	r0, [sp, #4]
 8001d60:	f013 f9ea 	bl	8015138 <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001d64:	9801      	ldr	r0, [sp, #4]
 8001d66:	f013 f9eb 	bl	8015140 <tExpSmooth_tick>
	for (int f = 0; f < filterToTick; f++)
 8001d6a:	f898 3000 	ldrb.w	r3, [r8]
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001d6e:	ed8d 0a04 	vstr	s0, [sp, #16]
	for (int f = 0; f < filterToTick; f++)
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	f63f af5f 	bhi.w	8001c36 <filter_tick+0x4e>
 8001d78:	e793      	b.n	8001ca2 <filter_tick+0xba>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <filter_tick+0x1c4>)
 8001d7c:	f201 25ef 	addw	r5, r1, #751	; 0x2ef
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001d80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 8001d84:	ed90 0a01 	vldr	s0, [r0, #4]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001d88:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	samples[1] += sendToFilter2;
 8001d8c:	ed90 7a00 	vldr	s14, [r0]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001d90:	ed93 8a00 	vldr	s16, [r3]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001d94:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 8001d98:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001d9c:	ed80 0a01 	vstr	s0, [r0, #4]
	if (enabledFilt[1])
 8001da0:	e7af      	b.n	8001d02 <filter_tick+0x11a>
 8001da2:	bf00      	nop
 8001da4:	20015205 	.word	0x20015205
 8001da8:	e0001000 	.word	0xe0001000
 8001dac:	20015bcc 	.word	0x20015bcc
 8001db0:	20016764 	.word	0x20016764
 8001db4:	420fb824 	.word	0x420fb824
 8001db8:	457ff000 	.word	0x457ff000
 8001dbc:	00000000 	.word	0x00000000
 8001dc0:	20004fd4 	.word	0x20004fd4
 8001dc4:	20004ff4 	.word	0x20004ff4
 8001dc8:	20012f1c 	.word	0x20012f1c
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <lowpassTick>:


void __ATTR_ITCMRAM  lowpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 8001dd0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <lowpassTick+0x3c>)
{
 8001dd6:	b530      	push	{r4, r5, lr}
 8001dd8:	4605      	mov	r5, r0
 8001dda:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 8001ddc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001de0:	0094      	lsls	r4, r2, #2
 8001de2:	9001      	str	r0, [sp, #4]
 8001de4:	f013 fba2 	bl	801552c <tSVF_setFreqFast>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 8001de8:	ed95 0a00 	vldr	s0, [r5]
 8001dec:	9801      	ldr	r0, [sp, #4]
 8001dee:	f013 fb67 	bl	80154c0 <tSVF_tick>
    *sample *= filterGain[v][string];
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 8001df4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001df8:	4423      	add	r3, r4
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001e02:	edc5 7a00 	vstr	s15, [r5]
}
 8001e06:	b003      	add	sp, #12
 8001e08:	bd30      	pop	{r4, r5, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200052b0 	.word	0x200052b0
 8001e10:	20004fe4 	.word	0x20004fe4

08001e14 <highpassTick>:

void __ATTR_ITCMRAM  highpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 8001e14:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <highpassTick+0x3c>)
{
 8001e1a:	b530      	push	{r4, r5, lr}
 8001e1c:	4605      	mov	r5, r0
 8001e1e:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 8001e20:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001e24:	0094      	lsls	r4, r2, #2
 8001e26:	9001      	str	r0, [sp, #4]
 8001e28:	f013 fb80 	bl	801552c <tSVF_setFreqFast>
	*sample = tSVF_tick(&highpass[v][string], *sample);
 8001e2c:	ed95 0a00 	vldr	s0, [r5]
 8001e30:	9801      	ldr	r0, [sp, #4]
 8001e32:	f013 fb45 	bl	80154c0 <tSVF_tick>
    *sample *= filterGain[v][string];
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
 8001e38:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001e3c:	4423      	add	r3, r4
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001e46:	edc5 7a00 	vstr	s15, [r5]
}
 8001e4a:	b003      	add	sp, #12
 8001e4c:	bd30      	pop	{r4, r5, pc}
 8001e4e:	bf00      	nop
 8001e50:	200050a4 	.word	0x200050a4
 8001e54:	20004fe4 	.word	0x20004fe4

08001e58 <bandpassTick>:

void __ATTR_ITCMRAM  bandpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 8001e58:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <bandpassTick+0x3c>)
{
 8001e5e:	b530      	push	{r4, r5, lr}
 8001e60:	4605      	mov	r5, r0
 8001e62:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 8001e64:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001e68:	0094      	lsls	r4, r2, #2
 8001e6a:	9001      	str	r0, [sp, #4]
 8001e6c:	f013 fb5e 	bl	801552c <tSVF_setFreqFast>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 8001e70:	ed95 0a00 	vldr	s0, [r5]
 8001e74:	9801      	ldr	r0, [sp, #4]
 8001e76:	f013 fb23 	bl	80154c0 <tSVF_tick>
    *sample *= filterGain[v][string];
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 8001e7c:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001e80:	4423      	add	r3, r4
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001e8a:	edc5 7a00 	vstr	s15, [r5]
}
 8001e8e:	b003      	add	sp, #12
 8001e90:	bd30      	pop	{r4, r5, pc}
 8001e92:	bf00      	nop
 8001e94:	20000a8c 	.word	0x20000a8c
 8001e98:	20004fe4 	.word	0x20004fe4

08001e9c <diodeLowpassTick>:

void __ATTR_ITCMRAM  diodeLowpassTick(float* sample, int v, float cutoff, int string)
{
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 8001e9c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <diodeLowpassTick+0x3c>)
{
 8001ea2:	b530      	push	{r4, r5, lr}
 8001ea4:	4605      	mov	r5, r0
 8001ea6:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 8001ea8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001eac:	0094      	lsls	r4, r2, #2
 8001eae:	9001      	str	r0, [sp, #4]
 8001eb0:	f014 fc50 	bl	8016754 <tDiodeFilter_setFreqFast>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 8001eb4:	ed95 0a00 	vldr	s0, [r5]
 8001eb8:	9801      	ldr	r0, [sp, #4]
 8001eba:	f014 facb 	bl	8016454 <tDiodeFilter_tickEfficient>
    *sample *= filterGain[v][string];
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 8001ec0:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001ec4:	4423      	add	r3, r4
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001ece:	edc5 7a00 	vstr	s15, [r5]
}
 8001ed2:	b003      	add	sp, #12
 8001ed4:	bd30      	pop	{r4, r5, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20004f84 	.word	0x20004f84
 8001edc:	20004fe4 	.word	0x20004fe4

08001ee0 <VZpeakTick>:

void __ATTR_ITCMRAM  VZpeakTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <VZpeakTick+0x28>)
 8001ee2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001ee6:	b510      	push	{r4, lr}
 8001ee8:	4604      	mov	r4, r0
 8001eea:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 8001eec:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001ef0:	9001      	str	r0, [sp, #4]
 8001ef2:	f013 fdfb 	bl	8015aec <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v][string], *sample);
 8001ef6:	9801      	ldr	r0, [sp, #4]
 8001ef8:	ed94 0a00 	vldr	s0, [r4]
 8001efc:	f013 fbd8 	bl	80156b0 <tVZFilter_tickEfficient>
 8001f00:	ed84 0a00 	vstr	s0, [r4]
}
 8001f04:	b002      	add	sp, #8
 8001f06:	bd10      	pop	{r4, pc}
 8001f08:	20000954 	.word	0x20000954

08001f0c <VZlowshelfTick>:

void __ATTR_ITCMRAM  VZlowshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <VZlowshelfTick+0x28>)
 8001f0e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001f12:	b510      	push	{r4, lr}
 8001f14:	4604      	mov	r4, r0
 8001f16:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 8001f18:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001f1c:	9001      	str	r0, [sp, #4]
 8001f1e:	f013 fde5 	bl	8015aec <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v][string], *sample);
 8001f22:	9801      	ldr	r0, [sp, #4]
 8001f24:	ed94 0a00 	vldr	s0, [r4]
 8001f28:	f013 fbc2 	bl	80156b0 <tVZFilter_tickEfficient>
 8001f2c:	ed84 0a00 	vstr	s0, [r4]
}
 8001f30:	b002      	add	sp, #8
 8001f32:	bd10      	pop	{r4, pc}
 8001f34:	20000944 	.word	0x20000944

08001f38 <VZhighshelfTick>:
void __ATTR_ITCMRAM  VZhighshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <VZhighshelfTick+0x28>)
 8001f3a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001f3e:	b510      	push	{r4, lr}
 8001f40:	4604      	mov	r4, r0
 8001f42:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 8001f44:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001f48:	9001      	str	r0, [sp, #4]
 8001f4a:	f013 fdcf 	bl	8015aec <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v][string], *sample);
 8001f4e:	9801      	ldr	r0, [sp, #4]
 8001f50:	ed94 0a00 	vldr	s0, [r4]
 8001f54:	f013 fbac 	bl	80156b0 <tVZFilter_tickEfficient>
 8001f58:	ed84 0a00 	vstr	s0, [r4]
}
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd10      	pop	{r4, pc}
 8001f60:	20000934 	.word	0x20000934

08001f64 <VZbandrejectTick>:
void __ATTR_ITCMRAM  VZbandrejectTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 8001f64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <VZbandrejectTick+0x3c>)
{
 8001f6a:	b530      	push	{r4, r5, lr}
 8001f6c:	4605      	mov	r5, r0
 8001f6e:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 8001f70:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001f74:	0094      	lsls	r4, r2, #2
 8001f76:	9001      	str	r0, [sp, #4]
 8001f78:	f013 fdb8 	bl	8015aec <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 8001f7c:	ed95 0a00 	vldr	s0, [r5]
 8001f80:	9801      	ldr	r0, [sp, #4]
 8001f82:	f013 fb95 	bl	80156b0 <tVZFilter_tickEfficient>
    *sample *= filterGain[v][string];
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 8001f88:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001f8c:	4423      	add	r3, r4
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001f96:	edc5 7a00 	vstr	s15, [r5]
}
 8001f9a:	b003      	add	sp, #12
 8001f9c:	bd30      	pop	{r4, r5, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000924 	.word	0x20000924
 8001fa4:	20004fe4 	.word	0x20004fe4

08001fa8 <LadderLowpassTick>:

void __ATTR_ITCMRAM  LadderLowpassTick(float* sample, int v, float cutoff, int string)
{
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 8001fa8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <LadderLowpassTick+0x3c>)
{
 8001fae:	b530      	push	{r4, r5, lr}
 8001fb0:	4605      	mov	r5, r0
 8001fb2:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 8001fb4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001fb8:	0094      	lsls	r4, r2, #2
 8001fba:	9001      	str	r0, [sp, #4]
 8001fbc:	f014 fd6a 	bl	8016a94 <tLadderFilter_setFreqFast>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 8001fc0:	ed95 0a00 	vldr	s0, [r5]
 8001fc4:	9801      	ldr	r0, [sp, #4]
 8001fc6:	f014 fc3d 	bl	8016844 <tLadderFilter_tick>
    *sample *= filterGain[v][string];
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 8001fcc:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001fd0:	4423      	add	r3, r4
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001fda:	edc5 7a00 	vstr	s15, [r5]
}
 8001fde:	b003      	add	sp, #12
 8001fe0:	bd30      	pop	{r4, r5, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000914 	.word	0x20000914
 8001fe8:	20004fe4 	.word	0x20004fe4

08001fec <setFreqMultPitch>:



void __ATTR_ITCMRAM setFreqMultPitch(float pitch, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8001fec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001ff0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8001ff4:	eef0 0a40 	vmov.f32	s1, s0
 8001ff8:	b538      	push	{r3, r4, r5, lr}
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8001ffa:	0045      	lsls	r5, r0, #1
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <setFreqMultPitch+0x4c>)
 8001ffe:	eb00 0082 	add.w	r0, r0, r2, lsl #2
{
 8002002:	460c      	mov	r4, r1
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8002004:	3020      	adds	r0, #32
 8002006:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800200a:	4408      	add	r0, r1
 800200c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002010:	ed93 7a02 	vldr	s14, [r3, #8]
 8002014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201c:	dd01      	ble.n	8002022 <setFreqMultPitch+0x36>
	{
		pitch = roundf(pitch);
 800201e:	fef8 0a40 	vrinta.f32	s1, s0
	}

	freqMult[osc][string] = powf(1.059463094359295f, pitch);
 8002022:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800203c <setFreqMultPitch+0x50>
 8002026:	4425      	add	r5, r4
 8002028:	f01b fa4e 	bl	801d4c8 <powf>
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <setFreqMultPitch+0x54>)
 800202e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002032:	ed83 0a00 	vstr	s0, [r3]

}
 8002036:	bd38      	pop	{r3, r4, r5, pc}
 8002038:	20015bcc 	.word	0x20015bcc
 800203c:	3f879c7d 	.word	0x3f879c7d
 8002040:	20005014 	.word	0x20005014

08002044 <setFreqMultHarm>:

void __ATTR_ITCMRAM setFreqMultHarm(float harm, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8002044:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <setFreqMultHarm+0x5c>)
 800204a:	0042      	lsls	r2, r0, #1
 800204c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002050:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8002054:	3020      	adds	r0, #32
 8002056:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800205a:	4408      	add	r0, r1
 800205c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002060:	ed93 7a02 	vldr	s14, [r3, #8]
 8002064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	dd01      	ble.n	8002072 <setFreqMultHarm+0x2e>
	{
		harm = roundf(harm);
 800206e:	feb8 0a40 	vrinta.f32	s0, s0
	}

	if (harm >= 0)
 8002072:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	{
		freqMult[osc][string] = (harm + 1);
 8002076:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	db08      	blt.n	8002092 <setFreqMultHarm+0x4e>
		freqMult[osc][string] = (harm + 1);
 8002080:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <setFreqMultHarm+0x60>)
 8002086:	440a      	add	r2, r1
 8002088:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800208c:	ed83 0a00 	vstr	s0, [r3]
	else
	{
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
	}

}
 8002090:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
 8002092:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002096:	eeb0 7ac0 	vabs.f32	s14, s0
 800209a:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800209e:	e7f1      	b.n	8002084 <setFreqMultHarm+0x40>
 80020a0:	20015bcc 	.word	0x20015bcc
 80020a4:	20005014 	.word	0x20005014

080020a8 <lowpassSetQ>:



void __ATTR_ITCMRAM  lowpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&lowpass[v][string], q);
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <lowpassSetQ+0x10>)
 80020aa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80020ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80020b2:	f013 ba71 	b.w	8015598 <tSVF_setQ>
 80020b6:	bf00      	nop
 80020b8:	200052b0 	.word	0x200052b0

080020bc <highpassSetQ>:
}

void __ATTR_ITCMRAM  highpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&highpass[v][string], q);
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <highpassSetQ+0x10>)
 80020be:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80020c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80020c6:	f013 ba67 	b.w	8015598 <tSVF_setQ>
 80020ca:	bf00      	nop
 80020cc:	200050a4 	.word	0x200050a4

080020d0 <bandpassSetQ>:
}

void __ATTR_ITCMRAM  bandpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&bandpass[v][string], q);
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <bandpassSetQ+0x10>)
 80020d2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80020d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80020da:	f013 ba5d 	b.w	8015598 <tSVF_setQ>
 80020de:	bf00      	nop
 80020e0:	20000a8c 	.word	0x20000a8c

080020e4 <diodeLowpassSetQ>:
}

void __ATTR_ITCMRAM  diodeLowpassSetQ(float q, int v, int string)
{
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <diodeLowpassSetQ+0x10>)
 80020e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80020ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80020ee:	f014 bb51 	b.w	8016794 <tDiodeFilter_setQ>
 80020f2:	bf00      	nop
 80020f4:	20004f84 	.word	0x20004f84

080020f8 <VZpeakSetQ>:
}

void __ATTR_ITCMRAM  VZpeakSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <VZpeakSetQ+0x10>)
 80020fa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80020fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002102:	f013 be6d 	b.w	8015de0 <tVZFilter_setResonance>
 8002106:	bf00      	nop
 8002108:	20000954 	.word	0x20000954

0800210c <VZlowshelfSetQ>:
}

void __ATTR_ITCMRAM  VZlowshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <VZlowshelfSetQ+0x10>)
 800210e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002112:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002116:	f013 be63 	b.w	8015de0 <tVZFilter_setResonance>
 800211a:	bf00      	nop
 800211c:	20000944 	.word	0x20000944

08002120 <VZhighshelfSetQ>:
}

void __ATTR_ITCMRAM  VZhighshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <VZhighshelfSetQ+0x10>)
 8002122:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002126:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800212a:	f013 be59 	b.w	8015de0 <tVZFilter_setResonance>
 800212e:	bf00      	nop
 8002130:	20000934 	.word	0x20000934

08002134 <VZbandrejectSetQ>:
}

void __ATTR_ITCMRAM  VZbandrejectSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <VZbandrejectSetQ+0x10>)
 8002136:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800213a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800213e:	f013 be4f 	b.w	8015de0 <tVZFilter_setResonance>
 8002142:	bf00      	nop
 8002144:	20000924 	.word	0x20000924

08002148 <LadderLowpassSetQ>:
}

void __ATTR_ITCMRAM  LadderLowpassSetQ(float q, int v, int string)
{
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <LadderLowpassSetQ+0x10>)
 800214a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800214e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002152:	f014 bcc3 	b.w	8016adc <tLadderFilter_setQ>
 8002156:	bf00      	nop
 8002158:	20000914 	.word	0x20000914

0800215c <lowpassSetGain>:
}

void __ATTR_ITCMRAM  lowpassSetGain(float gain, int v, int string)
{
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 800215c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002160:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 8002164:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 8002166:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800216a:	4605      	mov	r5, r0
 800216c:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 800216e:	eeb0 0a67 	vmov.f32	s0, s15
 8002172:	f014 ff33 	bl	8016fdc <fasterdbtoa>
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <lowpassSetGain+0x2c>)
 8002178:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 800217c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002180:	ed83 0a00 	vstr	s0, [r3]
}
 8002184:	bd38      	pop	{r3, r4, r5, pc}
 8002186:	bf00      	nop
 8002188:	20004fe4 	.word	0x20004fe4

0800218c <highpassSetGain>:
 800218c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002190:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	eee0 7a07 	vfma.f32	s15, s0, s14
 800219a:	4605      	mov	r5, r0
 800219c:	460c      	mov	r4, r1
 800219e:	eeb0 0a67 	vmov.f32	s0, s15
 80021a2:	f014 ff1b 	bl	8016fdc <fasterdbtoa>
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <highpassSetGain+0x2c>)
 80021a8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80021ac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80021b0:	ed83 0a00 	vstr	s0, [r3]
 80021b4:	bd38      	pop	{r3, r4, r5, pc}
 80021b6:	bf00      	nop
 80021b8:	20004fe4 	.word	0x20004fe4

080021bc <bandpassSetGain>:
 80021bc:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80021c0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80021c4:	b538      	push	{r3, r4, r5, lr}
 80021c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80021ca:	4605      	mov	r5, r0
 80021cc:	460c      	mov	r4, r1
 80021ce:	eeb0 0a67 	vmov.f32	s0, s15
 80021d2:	f014 ff03 	bl	8016fdc <fasterdbtoa>
 80021d6:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <bandpassSetGain+0x2c>)
 80021d8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80021dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80021e0:	ed83 0a00 	vstr	s0, [r3]
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
 80021e6:	bf00      	nop
 80021e8:	20004fe4 	.word	0x20004fe4

080021ec <diodeLowpassSetGain>:
 80021ec:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80021f0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80021f4:	b538      	push	{r3, r4, r5, lr}
 80021f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80021fa:	4605      	mov	r5, r0
 80021fc:	460c      	mov	r4, r1
 80021fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002202:	f014 feeb 	bl	8016fdc <fasterdbtoa>
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <diodeLowpassSetGain+0x2c>)
 8002208:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 800220c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002210:	ed83 0a00 	vstr	s0, [r3]
 8002214:	bd38      	pop	{r3, r4, r5, pc}
 8002216:	bf00      	nop
 8002218:	20004fe4 	.word	0x20004fe4

0800221c <VZpeakSetGain>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}

void __ATTR_ITCMRAM  VZpeakSetGain(float gain, int v, int string)
{
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800221c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8002220:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002248 <VZpeakSetGain+0x2c>
{
 8002224:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8002226:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800222a:	4605      	mov	r5, r0
 800222c:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800222e:	eeb0 0a67 	vmov.f32	s0, s15
 8002232:	f014 fed3 	bl	8016fdc <fasterdbtoa>
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <VZpeakSetGain+0x30>)
 8002238:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 800223c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 8002240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8002244:	f013 bdb0 	b.w	8015da8 <tVZFilter_setGain>
 8002248:	42480000 	.word	0x42480000
 800224c:	20000954 	.word	0x20000954

08002250 <VZlowshelfSetGain>:

void __ATTR_ITCMRAM  VZlowshelfSetGain(float gain, int v, int string)
{
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8002250:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8002254:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800227c <VZlowshelfSetGain+0x2c>
{
 8002258:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800225a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800225e:	4605      	mov	r5, r0
 8002260:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8002262:	eeb0 0a67 	vmov.f32	s0, s15
 8002266:	f014 feb9 	bl	8016fdc <fasterdbtoa>
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <VZlowshelfSetGain+0x30>)
 800226c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8002270:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 8002274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8002278:	f013 bd96 	b.w	8015da8 <tVZFilter_setGain>
 800227c:	42480000 	.word	0x42480000
 8002280:	20000944 	.word	0x20000944

08002284 <VZhighshelfSetGain>:
 8002284:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8002288:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80022b0 <VZhighshelfSetGain+0x2c>
 800228c:	b538      	push	{r3, r4, r5, lr}
 800228e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002292:	4605      	mov	r5, r0
 8002294:	460c      	mov	r4, r1
 8002296:	eeb0 0a67 	vmov.f32	s0, s15
 800229a:	f014 fe9f 	bl	8016fdc <fasterdbtoa>
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <VZhighshelfSetGain+0x30>)
 80022a0:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80022a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80022a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022ac:	f013 bd7c 	b.w	8015da8 <tVZFilter_setGain>
 80022b0:	42480000 	.word	0x42480000
 80022b4:	20000944 	.word	0x20000944

080022b8 <VZbandrejectSetGain>:
 80022b8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80022bc:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80022c0:	b538      	push	{r3, r4, r5, lr}
 80022c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80022c6:	4605      	mov	r5, r0
 80022c8:	460c      	mov	r4, r1
 80022ca:	eeb0 0a67 	vmov.f32	s0, s15
 80022ce:	f014 fe85 	bl	8016fdc <fasterdbtoa>
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <VZbandrejectSetGain+0x2c>)
 80022d4:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80022d8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80022dc:	ed83 0a00 	vstr	s0, [r3]
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	20004fe4 	.word	0x20004fe4

080022e8 <LadderLowpassSetGain>:
 80022e8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80022ec:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80022f6:	4605      	mov	r5, r0
 80022f8:	460c      	mov	r4, r1
 80022fa:	eeb0 0a67 	vmov.f32	s0, s15
 80022fe:	f014 fe6d 	bl	8016fdc <fasterdbtoa>
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <LadderLowpassSetGain+0x2c>)
 8002304:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8002308:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800230c:	ed83 0a00 	vstr	s0, [r3]
 8002310:	bd38      	pop	{r3, r4, r5, pc}
 8002312:	bf00      	nop
 8002314:	20004fe4 	.word	0x20004fe4

08002318 <setEnvelopeAttack>:
}


void  __ATTR_ITCMRAM  setEnvelopeAttack(float a, int v, int string)
{
	a = a + 0.01f;
 8002318:	eddf 7a05 	vldr	s15, [pc, #20]	; 8002330 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
 800231c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <setEnvelopeAttack+0x1c>)
 8002322:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002326:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800232a:	f012 bc1b 	b.w	8014b64 <tADSRT_setAttack>
 800232e:	bf00      	nop
 8002330:	3c23d70a 	.word	0x3c23d70a
 8002334:	20004fac 	.word	0x20004fac

08002338 <setEnvelopeDecay>:
}

void  __ATTR_ITCMRAM  setEnvelopeDecay(float d, int v, int string)
{
	d = d + 0.01f;
 8002338:	eddf 7a05 	vldr	s15, [pc, #20]	; 8002350 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
 800233c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <setEnvelopeDecay+0x1c>)
 8002342:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002346:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800234a:	f012 bc1f 	b.w	8014b8c <tADSRT_setDecay>
 800234e:	bf00      	nop
 8002350:	3c23d70a 	.word	0x3c23d70a
 8002354:	20004fac 	.word	0x20004fac

08002358 <setEnvelopeSustain>:
}

void  __ATTR_ITCMRAM  setEnvelopeSustain(float s, int v, int string)
{
	tADSRT_setSustain(&envs[v][string], s);
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <setEnvelopeSustain+0x10>)
 800235a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800235e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002362:	f012 bc27 	b.w	8014bb4 <tADSRT_setSustain>
 8002366:	bf00      	nop
 8002368:	20004fac 	.word	0x20004fac

0800236c <setEnvelopeRelease>:
}

void  __ATTR_ITCMRAM  setEnvelopeRelease(float r, int v, int string)
{
	r = r + 0.01f;
 800236c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8002384 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
 8002370:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <setEnvelopeRelease+0x1c>)
 8002376:	ee30 0a27 	vadd.f32	s0, s0, s15
 800237a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800237e:	f012 bc27 	b.w	8014bd0 <tADSRT_setRelease>
 8002382:	bf00      	nop
 8002384:	3c23d70a 	.word	0x3c23d70a
 8002388:	20004fac 	.word	0x20004fac

0800238c <setEnvelopeLeak>:
}

void  __ATTR_ITCMRAM  setEnvelopeLeak(float leak, int v, int string)
{
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
 800238c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002390:	eddf 6a08 	vldr	s13, [pc, #32]	; 80023b4 <setEnvelopeLeak+0x28>
 8002394:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80023b8 <setEnvelopeLeak+0x2c>
 8002398:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <setEnvelopeLeak+0x30>)
 800239e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80023a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80023a6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80023aa:	eeb0 0a47 	vmov.f32	s0, s14
 80023ae:	f012 bc23 	b.w	8014bf8 <tADSRT_setLeakFactor>
 80023b2:	bf00      	nop
 80023b4:	3851b717 	.word	0x3851b717
 80023b8:	3f7ffcb9 	.word	0x3f7ffcb9
 80023bc:	20004fac 	.word	0x20004fac

080023c0 <setAmp>:
}

void  __ATTR_ITCMRAM  setAmp(float amp, int v, int string)
{
	amplitude[string] = amp;
 80023c0:	4b02      	ldr	r3, [pc, #8]	; (80023cc <setAmp+0xc>)
 80023c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80023c6:	ed81 0a00 	vstr	s0, [r1]
}
 80023ca:	4770      	bx	lr
 80023cc:	20000a84 	.word	0x20000a84

080023d0 <setMaster>:

void  __ATTR_ITCMRAM  setMaster(float amp,  int v, int string)
{
	finalMaster[string] = amp;
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <setMaster+0xc>)
 80023d2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80023d6:	ed81 0a00 	vstr	s0, [r1]
}
 80023da:	4770      	bx	lr
 80023dc:	20005004 	.word	0x20005004

080023e0 <setTranspose>:

void  __ATTR_ITCMRAM  setTranspose(float in, int v, int string)
{
	transpose = in;
 80023e0:	4b01      	ldr	r3, [pc, #4]	; (80023e8 <setTranspose+0x8>)
 80023e2:	ed83 0a00 	vstr	s0, [r3]
}
 80023e6:	4770      	bx	lr
 80023e8:	20012f68 	.word	0x20012f68

080023ec <setPitchBendRange>:

void  __ATTR_ITCMRAM  setPitchBendRange(float in, int v, int string)
{
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
 80023ec:	eddf 7a03 	vldr	s15, [pc, #12]	; 80023fc <setPitchBendRange+0x10>
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <setPitchBendRange+0x14>)
 80023f2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80023f6:	ed83 0a00 	vstr	s0, [r3]
}
 80023fa:	4770      	bx	lr
 80023fc:	39000200 	.word	0x39000200
 8002400:	20000000 	.word	0x20000000

08002404 <setFinalLowpass>:

void  __ATTR_ITCMRAM  setFinalLowpass(float in, int v, int string)
{
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8002404:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002408:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002438 <setFinalLowpass+0x34>
{
 800240c:	eef0 0a40 	vmov.f32	s1, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8002410:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800243c <setFinalLowpass+0x38>
 8002414:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002440 <setFinalLowpass+0x3c>
 8002418:	ee70 0ac7 	vsub.f32	s1, s1, s14
{
 800241c:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 800241e:	ee60 0aa7 	vmul.f32	s1, s1, s15
{
 8002422:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8002424:	f014 fc3a 	bl	8016c9c <LEAF_clip>
 8002428:	4806      	ldr	r0, [pc, #24]	; (8002444 <setFinalLowpass+0x40>)
 800242a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800242e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8002432:	f013 b87b 	b.w	801552c <tSVF_setFreqFast>
 8002436:	bf00      	nop
 8002438:	420fb824 	.word	0x420fb824
 800243c:	457ff000 	.word	0x457ff000
 8002440:	00000000 	.word	0x00000000
 8002444:	20004ffc 	.word	0x20004ffc

08002448 <tickMappings>:

uint32_t timeMap = 0;
void __ATTR_ITCMRAM tickMappings(void)
{
 8002448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
 800244c:	4956      	ldr	r1, [pc, #344]	; (80025a8 <tickMappings+0x160>)
 800244e:	2700      	movs	r7, #0
	uint32_t tempCount1 = DWT->CYCCNT;
 8002450:	4a56      	ldr	r2, [pc, #344]	; (80025ac <tickMappings+0x164>)
	for (int i = 0; i < numMappings; i++)
 8002452:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <tickMappings+0x168>)
{
 8002454:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 8002458:	700f      	strb	r7, [r1, #0]
{
 800245a:	b083      	sub	sp, #12
	uint32_t tempCount1 = DWT->CYCCNT;
 800245c:	6852      	ldr	r2, [r2, #4]
	for (int i = 0; i < numMappings; i++)
 800245e:	781b      	ldrb	r3, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8002460:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < numMappings; i++)
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8086 	beq.w	8002574 <tickMappings+0x12c>
	{
		for (int v = 0; v < numStringsThisBoard; v++)
 8002468:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80025c0 <tickMappings+0x178>
 800246c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80025c4 <tickMappings+0x17c>
 8002470:	f898 2000 	ldrb.w	r2, [r8]
 8002474:	4c4f      	ldr	r4, [pc, #316]	; (80025b4 <tickMappings+0x16c>)
 8002476:	2a00      	cmp	r2, #0
 8002478:	d07c      	beq.n	8002574 <tickMappings+0x12c>
 800247a:	46a3      	mov	fp, r4
 800247c:	464e      	mov	r6, r9
 800247e:	2500      	movs	r5, #0
		{

			float unsmoothedValue = 0.0f;
			float smoothedValue = 0.0f;
			for (int j = 0; j < mappings[i].numHooks; j++)
 8002480:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8002484:	2800      	cmp	r0, #0
 8002486:	f000 8086 	beq.w	8002596 <tickMappings+0x14e>
			{
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 800248a:	f8db 101c 	ldr.w	r1, [fp, #28]
 800248e:	f8db 2000 	ldr.w	r2, [fp]
 8002492:	edd1 7a00 	vldr	s15, [r1]
 8002496:	edd2 6a00 	vldr	s13, [r2]
 800249a:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 800249e:	ee67 7aa6 	vmul.f32	s15, s15, s13
				if (mappings[i].sourceSmoothed[j])
 80024a2:	7e23      	ldrb	r3, [r4, #24]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80024a4:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (mappings[i].sourceSmoothed[j])
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d16e      	bne.n	800258a <tickMappings+0x142>
				{
					smoothedValue += sum;
				}
				else
				{
					unsmoothedValue += sum;
 80024ac:	eeb0 8a67 	vmov.f32	s16, s15
			float smoothedValue = 0.0f;
 80024b0:	eddf 7a41 	vldr	s15, [pc, #260]	; 80025b8 <tickMappings+0x170>
			for (int j = 0; j < mappings[i].numHooks; j++)
 80024b4:	2801      	cmp	r0, #1
 80024b6:	d027      	beq.n	8002508 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80024b8:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 80024bc:	f8db 2008 	ldr.w	r2, [fp, #8]
 80024c0:	ed91 7a00 	vldr	s14, [r1]
 80024c4:	ed92 6a00 	vldr	s12, [r2]
 80024c8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80024cc:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 80024d0:	7e63      	ldrb	r3, [r4, #25]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80024d2:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d15a      	bne.n	8002590 <tickMappings+0x148>
					unsmoothedValue += sum;
 80024da:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 80024de:	2802      	cmp	r0, #2
 80024e0:	d012      	beq.n	8002508 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80024e2:	f8db 1010 	ldr.w	r1, [fp, #16]
 80024e6:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80024ea:	ed91 7a00 	vldr	s14, [r1]
 80024ee:	ed92 6a00 	vldr	s12, [r2]
 80024f2:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 80024f6:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 80024fa:	7ea0      	ldrb	r0, [r4, #26]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80024fc:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 8002500:	2800      	cmp	r0, #0
 8002502:	d04d      	beq.n	80025a0 <tickMappings+0x158>
					smoothedValue += sum;
 8002504:	ee77 7a87 	vadd.f32	s15, s15, s14
				}
			}
			//sources are now summed - let's add the initial value
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 8002508:	f854 2c04 	ldr.w	r2, [r4, #-4]

			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 800250c:	4630      	mov	r0, r6
		for (int v = 0; v < numStringsThisBoard; v++)
 800250e:	f10b 0b04 	add.w	fp, fp, #4
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 8002512:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8002516:	ed92 0a00 	vldr	s0, [r2]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 800251a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800251e:	f012 fe0b 	bl	8015138 <tExpSmooth_setDest>
			smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
 8002522:	4630      	mov	r0, r6
 8002524:	f012 fe0c 	bl	8015140 <tExpSmooth_tick>
			float finalVal = unsmoothedValue + smoothedValue;

			//now scale the value with the correct scaling function
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 8002528:	f854 ac04 	ldr.w	sl, [r4, #-4]
 800252c:	ee30 0a08 	vadd.f32	s0, s0, s16
		for (int v = 0; v < numStringsThisBoard; v++)
 8002530:	3604      	adds	r6, #4
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 8002532:	f8da 2010 	ldr.w	r2, [sl, #16]
 8002536:	4790      	blx	r2
 8002538:	1caa      	adds	r2, r5, #2
 800253a:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
 800253e:	ed81 0a00 	vstr	s0, [r1]

			//and pop that value where it belongs by setting the actual parameter
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 8002542:	4629      	mov	r1, r5
 8002544:	f854 0c04 	ldr.w	r0, [r4, #-4]
		for (int v = 0; v < numStringsThisBoard; v++)
 8002548:	3501      	adds	r5, #1
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 800254a:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800254e:	6942      	ldr	r2, [r0, #20]
 8002550:	7e00      	ldrb	r0, [r0, #24]
 8002552:	ed9c 0a00 	vldr	s0, [ip]
 8002556:	4790      	blx	r2
		for (int v = 0; v < numStringsThisBoard; v++)
 8002558:	f898 2000 	ldrb.w	r2, [r8]
 800255c:	42aa      	cmp	r2, r5
 800255e:	dc8f      	bgt.n	8002480 <tickMappings+0x38>
	for (int i = 0; i < numMappings; i++)
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <tickMappings+0x168>)
 8002562:	3701      	adds	r7, #1
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	429f      	cmp	r7, r3
 8002568:	da04      	bge.n	8002574 <tickMappings+0x12c>
 800256a:	f109 0908 	add.w	r9, r9, #8
 800256e:	344c      	adds	r4, #76	; 0x4c
		for (int v = 0; v < numStringsThisBoard; v++)
 8002570:	2a00      	cmp	r2, #0
 8002572:	d182      	bne.n	800247a <tickMappings+0x32>
		}
	}
	timeMap = DWT->CYCCNT - tempCount1;
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <tickMappings+0x164>)
 8002576:	9901      	ldr	r1, [sp, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a10      	ldr	r2, [pc, #64]	; (80025bc <tickMappings+0x174>)
 800257c:	1a5b      	subs	r3, r3, r1
 800257e:	6013      	str	r3, [r2, #0]

}
 8002580:	b003      	add	sp, #12
 8002582:	ecbd 8b02 	vpop	{d8}
 8002586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float unsmoothedValue = 0.0f;
 800258a:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 80025b8 <tickMappings+0x170>
 800258e:	e791      	b.n	80024b4 <tickMappings+0x6c>
					smoothedValue += sum;
 8002590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002594:	e7a3      	b.n	80024de <tickMappings+0x96>
			float smoothedValue = 0.0f;
 8002596:	eddf 7a08 	vldr	s15, [pc, #32]	; 80025b8 <tickMappings+0x170>
			float unsmoothedValue = 0.0f;
 800259a:	eeb0 8a67 	vmov.f32	s16, s15
 800259e:	e7b3      	b.n	8002508 <tickMappings+0xc0>
					unsmoothedValue += sum;
 80025a0:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 80025a4:	e7b0      	b.n	8002508 <tickMappings+0xc0>
 80025a6:	bf00      	nop
 80025a8:	20015205 	.word	0x20015205
 80025ac:	e0001000 	.word	0xe0001000
 80025b0:	20015bc8 	.word	0x20015bc8
 80025b4:	20015244 	.word	0x20015244
 80025b8:	00000000 	.word	0x00000000
 80025bc:	20012f28 	.word	0x20012f28
 80025c0:	20000012 	.word	0x20000012
 80025c4:	200052c4 	.word	0x200052c4

080025c8 <audioTickString>:




float  audioTickString(void)
{
 80025c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
 80025cc:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 80027bc <audioTickString+0x1f4>
 80025d0:	4d6c      	ldr	r5, [pc, #432]	; (8002784 <audioTickString+0x1bc>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80025d2:	486d      	ldr	r0, [pc, #436]	; (8002788 <audioTickString+0x1c0>)
 80025d4:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80027c0 <audioTickString+0x1f8>
 80025d8:	462c      	mov	r4, r5
 80025da:	f105 0a30 	add.w	sl, r5, #48	; 0x30
{
 80025de:	ed2d 8b0c 	vpush	{d8-d13}
 80025e2:	b083      	sub	sp, #12
	float note[numStringsThisBoard];
 80025e4:	f899 3000 	ldrb.w	r3, [r9]
{
 80025e8:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3307      	adds	r3, #7
 80025ee:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80025f2:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80025f6:	f012 fda3 	bl	8015140 <tExpSmooth_tick>
 80025fa:	eeb0 ba40 	vmov.f32	s22, s0
	float note[numStringsThisBoard];
 80025fe:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002600:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
 8002602:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002606:	f012 fd9b 	bl	8015140 <tExpSmooth_tick>
 800260a:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
 800260e:	4554      	cmp	r4, sl
 8002610:	d1f6      	bne.n	8002600 <audioTickString+0x38>
	}
	pluckPos = knobScaled[9];
 8002612:	4a5e      	ldr	r2, [pc, #376]	; (800278c <audioTickString+0x1c4>)
 8002614:	6a69      	ldr	r1, [r5, #36]	; 0x24

	for (int i = 0; i < numStringsThisBoard; i++)
 8002616:	f899 3000 	ldrb.w	r3, [r9]
	float temp = 0.0f;
 800261a:	eddf 9a5d 	vldr	s19, [pc, #372]	; 8002790 <audioTickString+0x1c8>
	pluckPos = knobScaled[9];
 800261e:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
 8002620:	2b00      	cmp	r3, #0
 8002622:	d07c      	beq.n	800271e <audioTickString+0x156>
		float finalFreq = mtof(note[i]);
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
		float decay = 0.1f;
		if (lsDecay[i])
		{
			decay = (knobScaled[10] * 800.0f) + 0.5f;
 8002624:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 8002628:	4b5a      	ldr	r3, [pc, #360]	; (8002794 <audioTickString+0x1cc>)
 800262a:	eef0 aa69 	vmov.f32	s21, s19
 800262e:	f8df b194 	ldr.w	fp, [pc, #404]	; 80027c4 <audioTickString+0x1fc>
 8002632:	f8df a194 	ldr.w	sl, [pc, #404]	; 80027c8 <audioTickString+0x200>
	for (int i = 0; i < numStringsThisBoard; i++)
 8002636:	f04f 0800 	mov.w	r8, #0
 800263a:	4c57      	ldr	r4, [pc, #348]	; (8002798 <audioTickString+0x1d0>)
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
 800263c:	eddf ca57 	vldr	s25, [pc, #348]	; 800279c <audioTickString+0x1d4>
 8002640:	ed9f ca57 	vldr	s24, [pc, #348]	; 80027a0 <audioTickString+0x1d8>
		float decay = 0.1f;
 8002644:	ed9f 9a57 	vldr	s18, [pc, #348]	; 80027a4 <audioTickString+0x1dc>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
 8002648:	ed9f da57 	vldr	s26, [pc, #348]	; 80027a8 <audioTickString+0x1e0>
 800264c:	607b      	str	r3, [r7, #4]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 800264e:	ecba 7a01 	vldmia	sl!, {s14}
		float decay = 0.1f;
 8002652:	eeb0 aa49 	vmov.f32	s20, s18
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 8002656:	ecfb 7a01 	vldmia	fp!, {s15}
 800265a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800265e:	fe87 0aaa 	vmaxnm.f32	s0, s15, s21
 8002662:	edc6 7a00 	vstr	s15, [r6]
		if (note[i] < 0.0f)
 8002666:	eca6 0a01 	vstmia	r6!, {s0}
		float finalFreq = mtof(note[i]);
 800266a:	f014 fc37 	bl	8016edc <mtof>
 800266e:	eeb0 8a40 	vmov.f32	s16, s0
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
 8002672:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8002676:	eeb0 0a4c 	vmov.f32	s0, s24
 800267a:	eea7 0aac 	vfma.f32	s0, s15, s25
 800267e:	f014 fc57 	bl	8016f30 <faster_mtof>
		if (lsDecay[i])
 8002682:	687a      	ldr	r2, [r7, #4]
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
 8002684:	eef0 8a40 	vmov.f32	s17, s0
		if (lsDecay[i])
 8002688:	f812 3b01 	ldrb.w	r3, [r2], #1
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	b12b      	cbz	r3, 800269c <audioTickString+0xd4>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
 8002690:	eeb0 aa6b 	vmov.f32	s20, s23
 8002694:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8002698:	eea7 aa8d 	vfma.f32	s20, s15, s26
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
 800269c:	4620      	mov	r0, r4
 800269e:	ed95 0a08 	vldr	s0, [r5, #32]
 80026a2:	f019 fef3 	bl	801c48c <tSimpleLivingString3_setPickupPoint>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
 80026a6:	4620      	mov	r0, r4
 80026a8:	eeb0 0a4a 	vmov.f32	s0, s20
	for (int i = 0; i < numStringsThisBoard; i++)
 80026ac:	f108 0801 	add.w	r8, r8, #1
		tSimpleLivingString3_setDecay(&livStr[i], decay);
 80026b0:	f019 fd4a 	bl	801c148 <tSimpleLivingString3_setDecay>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
 80026b4:	4620      	mov	r0, r4
 80026b6:	eeb0 0a68 	vmov.f32	s0, s17
 80026ba:	f019 fd41 	bl	801c140 <tSimpleLivingString3_setDampFreq>


		tSimpleLivingString3_setTargetLev(&livStr[i], knobScaled[0]);
 80026be:	4620      	mov	r0, r4
 80026c0:	ed95 0a00 	vldr	s0, [r5]
 80026c4:	f019 fd66 	bl	801c194 <tSimpleLivingString3_setTargetLev>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[i], knobScaled[1] * 0.1f);
 80026c8:	ed95 0a01 	vldr	s0, [r5, #4]
 80026cc:	4620      	mov	r0, r4
 80026ce:	ee20 0a09 	vmul.f32	s0, s0, s18
 80026d2:	f019 fd63 	bl	801c19c <tSimpleLivingString3_setLevSmoothFactor>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[2] * 0.1f);
 80026d6:	ed95 0a02 	vldr	s0, [r5, #8]
 80026da:	4620      	mov	r0, r4
 80026dc:	ee20 0a09 	vmul.f32	s0, s0, s18
 80026e0:	f019 fd60 	bl	801c1a4 <tSimpleLivingString3_setLevStrength>
		tSimpleLivingString3_setLevMode(&livStr[i], knobScaled[3] > 0.5f);
 80026e4:	edd5 7a03 	vldr	s15, [r5, #12]
 80026e8:	4620      	mov	r0, r4
 80026ea:	eef4 7aeb 	vcmpe.f32	s15, s23
 80026ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f2:	bfcc      	ite	gt
 80026f4:	2101      	movgt	r1, #1
 80026f6:	2100      	movle	r1, #0
 80026f8:	f019 fd58 	bl	801c1ac <tSimpleLivingString3_setLevMode>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
 80026fc:	4620      	mov	r0, r4
 80026fe:	eeb0 0a48 	vmov.f32	s0, s16
 8002702:	f019 fccd 	bl	801c0a0 <tSimpleLivingString3_setFreq>
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
 8002706:	4620      	mov	r0, r4
 8002708:	eeb0 0a6a 	vmov.f32	s0, s21
	for (int i = 0; i < numStringsThisBoard; i++)
 800270c:	3404      	adds	r4, #4
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
 800270e:	f019 fdff 	bl	801c310 <tSimpleLivingString3_tick>
	for (int i = 0; i < numStringsThisBoard; i++)
 8002712:	f899 3000 	ldrb.w	r3, [r9]
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
 8002716:	ee79 9a80 	vadd.f32	s19, s19, s0
	for (int i = 0; i < numStringsThisBoard; i++)
 800271a:	4543      	cmp	r3, r8
 800271c:	dc97      	bgt.n	800264e <audioTickString+0x86>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 800271e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80027ac <audioTickString+0x1e4>
 8002722:	eddf 7a23 	vldr	s15, [pc, #140]	; 80027b0 <audioTickString+0x1e8>
 8002726:	eef0 0a40 	vmov.f32	s1, s0
 800272a:	ed9f 1a22 	vldr	s2, [pc, #136]	; 80027b4 <audioTickString+0x1ec>
 800272e:	eeeb 0a27 	vfma.f32	s1, s22, s15
 8002732:	f014 fab3 	bl	8016c9c <LEAF_clip>
	int volIdxInt = (int) volIdx;
 8002736:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 800273a:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <audioTickString+0x1f0>)
	float omAlpha = 1.0f - alpha;
 800273c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return temp;
}
 8002740:	370c      	adds	r7, #12
	int volIdxInt = (int) volIdx;
 8002742:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
 8002746:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float omAlpha = 1.0f - alpha;
 800274a:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 800274e:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8002750:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
 8002754:	ee30 0a47 	vsub.f32	s0, s0, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 8002758:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
 800275c:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8002760:	ed93 7a00 	vldr	s14, [r3]
 8002764:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002768:	edd2 6a00 	vldr	s13, [r2]
 800276c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002770:	eea7 0a27 	vfma.f32	s0, s14, s15
}
 8002774:	ee20 0a29 	vmul.f32	s0, s0, s19
 8002778:	46bd      	mov	sp, r7
 800277a:	ecbd 8b0c 	vpop	{d8-d13}
 800277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002782:	bf00      	nop
 8002784:	200050dc 	.word	0x200050dc
 8002788:	20012f94 	.word	0x20012f94
 800278c:	2000014c 	.word	0x2000014c
 8002790:	00000000 	.word	0x00000000
 8002794:	200052c0 	.word	0x200052c0
 8002798:	200052a8 	.word	0x200052a8
 800279c:	430c0000 	.word	0x430c0000
 80027a0:	42700000 	.word	0x42700000
 80027a4:	3dcccccd 	.word	0x3dcccccd
 80027a8:	44480000 	.word	0x44480000
 80027ac:	423c0000 	.word	0x423c0000
 80027b0:	42a00000 	.word	0x42a00000
 80027b4:	42fe0000 	.word	0x42fe0000
 80027b8:	200004d4 	.word	0x200004d4
 80027bc:	20000012 	.word	0x20000012
 80027c0:	20005150 	.word	0x20005150
 80027c4:	20012eec 	.word	0x20012eec
 80027c8:	20012ef4 	.word	0x20012ef4

080027cc <audioTickString2>:



float  audioTickString2(void)
{
 80027cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
 80027d0:	4ba1      	ldr	r3, [pc, #644]	; (8002a58 <audioTickString2+0x28c>)
 80027d2:	4da2      	ldr	r5, [pc, #648]	; (8002a5c <audioTickString2+0x290>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80027d4:	48a2      	ldr	r0, [pc, #648]	; (8002a60 <audioTickString2+0x294>)
 80027d6:	4ea3      	ldr	r6, [pc, #652]	; (8002a64 <audioTickString2+0x298>)
 80027d8:	462c      	mov	r4, r5
 80027da:	f105 0930 	add.w	r9, r5, #48	; 0x30
{
 80027de:	ed2d 8b0a 	vpush	{d8-d12}
 80027e2:	b085      	sub	sp, #20
	float note[numStringsThisBoard];
 80027e4:	781b      	ldrb	r3, [r3, #0]
{
 80027e6:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	3307      	adds	r3, #7
 80027ec:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80027f0:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80027f4:	f012 fca4 	bl	8015140 <tExpSmooth_tick>
 80027f8:	eeb0 9a40 	vmov.f32	s18, s0
	float note[numStringsThisBoard];
 80027fc:	46e8      	mov	r8, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 80027fe:	4630      	mov	r0, r6
	for (int i = 0; i < 12; i++)
 8002800:	3604      	adds	r6, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002802:	f012 fc9d 	bl	8015140 <tExpSmooth_tick>
 8002806:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
 800280a:	454c      	cmp	r4, r9
 800280c:	d1f7      	bne.n	80027fe <audioTickString2+0x32>
	}

	for (int i = 0; i < numStringsThisBoard; i++)
 800280e:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <audioTickString2+0x28c>)
	float temp = 0.0f;
 8002810:	eddf 8a95 	vldr	s17, [pc, #596]	; 8002a68 <audioTickString2+0x29c>
	for (int i = 0; i < numStringsThisBoard; i++)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80dc 	beq.w	80029d4 <audioTickString2+0x208>
 800281c:	4b93      	ldr	r3, [pc, #588]	; (8002a6c <audioTickString2+0x2a0>)
 800281e:	eeb0 aa68 	vmov.f32	s20, s17
 8002822:	4c93      	ldr	r4, [pc, #588]	; (8002a70 <audioTickString2+0x2a4>)
 8002824:	2600      	movs	r6, #0
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	4b92      	ldr	r3, [pc, #584]	; (8002a74 <audioTickString2+0x2a8>)

		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope

		tLivingString2_setPickupPos(&strings[i],0.9999f);

		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
 800282a:	eddf 9a93 	vldr	s19, [pc, #588]	; 8002a78 <audioTickString2+0x2ac>
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 800282e:	f8df b284 	ldr.w	fp, [pc, #644]	; 8002ab4 <audioTickString2+0x2e8>
 8002832:	f8df a284 	ldr.w	sl, [pc, #644]	; 8002ab8 <audioTickString2+0x2ec>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 8002836:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8002abc <audioTickString2+0x2f0>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
 800283a:	eddf aa90 	vldr	s21, [pc, #576]	; 8002a7c <audioTickString2+0x2b0>
 800283e:	e9c7 3802 	strd	r3, r8, [r7, #8]
 8002842:	4b8f      	ldr	r3, [pc, #572]	; (8002a80 <audioTickString2+0x2b4>)
 8002844:	f8df 8278 	ldr.w	r8, [pc, #632]	; 8002ac0 <audioTickString2+0x2f4>
 8002848:	603b      	str	r3, [r7, #0]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 800284a:	687b      	ldr	r3, [r7, #4]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 800284c:	4658      	mov	r0, fp

			//tLivingString2_setTargetLev(&strings[i], 0.0f);
			//tLivingString2_setLevMode(&strings[i], 0);
		}

		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
 800284e:	eddf ba8d 	vldr	s23, [pc, #564]	; 8002a84 <audioTickString2+0x2b8>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 8002852:	ecf3 7a01 	vldmia	r3!, {s15}
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	ecb3 7a01 	vldmia	r3!, {s14}
 800285e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	fe87 ca8a 	vmaxnm.f32	s24, s15, s20
 800286a:	edc3 7a00 	vstr	s15, [r3]
		if (note[i] < 0.0f)
 800286e:	eca3 ca01 	vstmia	r3!, {s24}
 8002872:	60fb      	str	r3, [r7, #12]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 8002874:	f014 fd98 	bl	80173a8 <tNoise_tick>
 8002878:	4650      	mov	r0, sl
 800287a:	f012 ff19 	bl	80156b0 <tVZFilter_tickEfficient>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 800287e:	4658      	mov	r0, fp
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 8002880:	eeb0 8a40 	vmov.f32	s16, s0
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 8002884:	f014 fd90 	bl	80173a8 <tNoise_tick>
 8002888:	4648      	mov	r0, r9
 800288a:	f012 ff11 	bl	80156b0 <tVZFilter_tickEfficient>
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 800288e:	4640      	mov	r0, r8
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 8002890:	ee38 8a00 	vadd.f32	s16, s16, s0
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 8002894:	f012 f9dc 	bl	8014c50 <tADSRT_tick>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
 8002898:	4620      	mov	r0, r4
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 800289a:	eeb0 ba40 	vmov.f32	s22, s0
		tLivingString2_setPickupPos(&strings[i],0.9999f);
 800289e:	eeb0 0a6a 	vmov.f32	s0, s21
 80028a2:	f019 ff85 	bl	801c7b0 <tLivingString2_setPickupPos>
		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
 80028a6:	ed95 0a05 	vldr	s0, [r5, #20]
 80028aa:	ee20 0a29 	vmul.f32	s0, s0, s19
 80028ae:	f014 fb3f 	bl	8016f30 <faster_mtof>
 80028b2:	4650      	mov	r0, sl
 80028b4:	f013 f902 	bl	8015abc <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[6] * 128.0f));
 80028b8:	ed95 0a06 	vldr	s0, [r5, #24]
 80028bc:	ee20 0a29 	vmul.f32	s0, s0, s19
 80028c0:	f014 fb36 	bl	8016f30 <faster_mtof>
 80028c4:	4648      	mov	r0, r9
 80028c6:	f013 f8f9 	bl	8015abc <tVZFilter_setFreq>
		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
 80028ca:	ed95 0a07 	vldr	s0, [r5, #28]
 80028ce:	4620      	mov	r0, r4
 80028d0:	ee20 0a2b 	vmul.f32	s0, s0, s23
 80028d4:	f019 fffa 	bl	801c8cc <tLivingString2_setLevSmoothFactor>

		tLivingString2_setLevStrength(&strings[i], knobScaled[8] * 0.1f);
 80028d8:	ed95 0a08 	vldr	s0, [r5, #32]
 80028dc:	4620      	mov	r0, r4
 80028de:	ee20 0a2b 	vmul.f32	s0, s0, s23
 80028e2:	f01a f807 	bl	801c8f4 <tLivingString2_setLevStrength>

		tLivingString2_setBrightness(&strings[i], knobScaled[9]);
 80028e6:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
 80028ea:	4620      	mov	r0, r4
 80028ec:	f019 ff80 	bl	801c7f0 <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[i], knobScaled[2]);
 80028f0:	ed95 0a02 	vldr	s0, [r5, #8]
 80028f4:	4620      	mov	r0, r4
 80028f6:	f019 ff37 	bl	801c768 <tLivingString2_setPickPos>

		tLivingString2_setPrepPos(&strings[i], (knobScaled[11] * 0.8f) + 0.1f);
 80028fa:	eeb0 0a6b 	vmov.f32	s0, s23
 80028fe:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
 8002902:	4620      	mov	r0, r4
 8002904:	eddf 7a60 	vldr	s15, [pc, #384]	; 8002a88 <audioTickString2+0x2bc>
 8002908:	eea7 0a27 	vfma.f32	s0, s14, s15
 800290c:	f019 ff3e 	bl	801c78c <tLivingString2_setPrepPos>


		float tempMIDI = note[i];
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8002910:	eef0 0a4c 	vmov.f32	s1, s24
 8002914:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 8002a8c <audioTickString2+0x2c0>
 8002918:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8002a90 <audioTickString2+0x2c4>
 800291c:	f014 f9be 	bl	8016c9c <LEAF_clip>
 8002920:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002a94 <audioTickString2+0x2c8>
 8002924:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8002a98 <audioTickString2+0x2cc>
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
		float finalFreq = freqToSmooth;

		tLivingString2_setFreq(&strings[i], finalFreq);
 8002928:	4620      	mov	r0, r4
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 800292a:	495c      	ldr	r1, [pc, #368]	; (8002a9c <audioTickString2+0x2d0>)
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 800292c:	eee0 7a07 	vfma.f32	s15, s0, s14
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8002930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		int tempIndexI = (int)tempIndexF;
 8002934:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8002938:	ee37 7a67 	vsub.f32	s14, s14, s15
		int tempIndexI = (int)tempIndexF;
 800293c:	ee16 3a90 	vmov	r3, s13
		tempIndexF = tempIndexF -tempIndexI;
 8002940:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8002944:	1c5a      	adds	r2, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8002946:	f3c3 030e 	ubfx	r3, r3, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
 800294a:	ee77 7ae6 	vsub.f32	s15, s15, s13
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 800294e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8002952:	f3c2 020e 	ubfx	r2, r2, #0, #15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8002956:	ee37 7a26 	vadd.f32	s14, s14, s13
 800295a:	edd3 6a00 	vldr	s13, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 800295e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8002962:	ed93 6a00 	vldr	s12, [r3]
 8002966:	ee27 0a86 	vmul.f32	s0, s15, s12
		tLivingString2_setFreq(&strings[i], finalFreq);
 800296a:	eea7 0a26 	vfma.f32	s0, s14, s13
 800296e:	f019 fedd 	bl	801c72c <tLivingString2_setFreq>


		if (knobScaled[4] > 0.5f)
 8002972:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002976:	ed95 7a04 	vldr	s14, [r5, #16]
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
		}
		else
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
 800297a:	4620      	mov	r0, r4
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
 800297c:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
		if (knobScaled[4] > 0.5f)
 8002980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
 8002988:	bfc8      	it	gt
 800298a:	ee2b 0a00 	vmulgt.f32	s0, s22, s0
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
 800298e:	f019 ff21 	bl	801c7d4 <tLivingString2_setPrepIndex>
			tempSamp += (tSawtooth_tick(&Ssaws[i][j]) * 0.5f);//filtNoise * theEnv) * env);
		}
		*/
		//tempSamp = tEfficientSVF_tick(&filts2[i], tempSamp * env);
		//tLivingString2_udpateDelays(&strings[i]);
		float tempSamp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
 8002992:	ee28 0a0b 	vmul.f32	s0, s16, s22
 8002996:	4620      	mov	r0, r4
 8002998:	f019 ffce 	bl	801c938 <tLivingString2_tick>
		prevSamp[i] = 0.0f;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	eca3 aa01 	vstmia	r3!, {s20}
 80029a2:	603b      	str	r3, [r7, #0]
		for (int j = 0; j < NUM_STRINGS_PER_BOARD; j++)
		{
			if (j != i) //put sympathetic resonance in all strings but yourself
 80029a4:	2e00      	cmp	r6, #0
 80029a6:	d14f      	bne.n	8002a48 <audioTickString2+0x27c>
			{
				prevSamp[j]+=tempSamp * volumeSmoothed;
 80029a8:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <audioTickString2+0x2b4>)
 80029aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80029ae:	eee9 7a00 	vfma.f32	s15, s18, s0
 80029b2:	edc3 7a01 	vstr	s15, [r3, #4]
	for (int i = 0; i < numStringsThisBoard; i++)
 80029b6:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <audioTickString2+0x28c>)
 80029b8:	3601      	adds	r6, #1
			}
		}


		temp += tempSamp;
 80029ba:	ee78 8a80 	vadd.f32	s17, s17, s0
	for (int i = 0; i < numStringsThisBoard; i++)
 80029be:	3404      	adds	r4, #4
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	f108 0804 	add.w	r8, r8, #4
 80029c6:	42b3      	cmp	r3, r6
 80029c8:	f73f af3f 	bgt.w	800284a <audioTickString2+0x7e>
 80029cc:	eddf 7a34 	vldr	s15, [pc, #208]	; 8002aa0 <audioTickString2+0x2d4>
 80029d0:	ee68 8aa7 	vmul.f32	s17, s17, s15
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 80029d4:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8002aa4 <audioTickString2+0x2d8>
 80029d8:	eddf 7a33 	vldr	s15, [pc, #204]	; 8002aa8 <audioTickString2+0x2dc>
 80029dc:	eef0 0a40 	vmov.f32	s1, s0
 80029e0:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8002aac <audioTickString2+0x2e0>
 80029e4:	eee9 0a27 	vfma.f32	s1, s18, s15
 80029e8:	f014 f958 	bl	8016c9c <LEAF_clip>
 80029ec:	eef0 7a40 	vmov.f32	s15, s0
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
 80029f0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 80029f4:	4a2e      	ldr	r2, [pc, #184]	; (8002ab0 <audioTickString2+0x2e4>)
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
 80029f6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	int volIdxInt = (int) volIdx;
 80029fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80029fe:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
 8002a02:	ee31 7a67 	vsub.f32	s14, s2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 8002a06:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
 8002a08:	ee06 3a90 	vmov	s13, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8002a0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
 8002a10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 8002a14:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8002a18:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
 8002a1c:	ee77 0ae6 	vsub.f32	s1, s15, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8002a20:	edd3 7a00 	vldr	s15, [r3]
	float omAlpha = 1.0f - alpha;
 8002a24:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8002a28:	edd2 6a00 	vldr	s13, [r2]
 8002a2c:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8002a30:	eee7 0a87 	vfma.f32	s1, s15, s14
	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
 8002a34:	ee60 0aa8 	vmul.f32	s1, s1, s17
 8002a38:	f014 f930 	bl	8016c9c <LEAF_clip>
}
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	ecbd 8b0a 	vpop	{d8-d12}
 8002a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				prevSamp[j]+=tempSamp * volumeSmoothed;
 8002a48:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <audioTickString2+0x2b4>)
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	eee9 7a00 	vfma.f32	s15, s18, s0
 8002a52:	edc3 7a00 	vstr	s15, [r3]
			if (j != i) //put sympathetic resonance in all strings but yourself
 8002a56:	e7ae      	b.n	80029b6 <audioTickString2+0x1ea>
 8002a58:	20000012 	.word	0x20000012
 8002a5c:	200050dc 	.word	0x200050dc
 8002a60:	20012f94 	.word	0x20012f94
 8002a64:	20005150 	.word	0x20005150
 8002a68:	00000000 	.word	0x00000000
 8002a6c:	20012eec 	.word	0x20012eec
 8002a70:	20012f0c 	.word	0x20012f0c
 8002a74:	20012ef4 	.word	0x20012ef4
 8002a78:	43000000 	.word	0x43000000
 8002a7c:	3f7ff972 	.word	0x3f7ff972
 8002a80:	20005578 	.word	0x20005578
 8002a84:	3dcccccd 	.word	0x3dcccccd
 8002a88:	3f4ccccd 	.word	0x3f4ccccd
 8002a8c:	43480000 	.word	0x43480000
 8002a90:	c3480000 	.word	0xc3480000
 8002a94:	42c80000 	.word	0x42c80000
 8002a98:	46800000 	.word	0x46800000
 8002a9c:	24000000 	.word	0x24000000
 8002aa0:	3f666666 	.word	0x3f666666
 8002aa4:	423c0000 	.word	0x423c0000
 8002aa8:	42a00000 	.word	0x42a00000
 8002aac:	42fe0000 	.word	0x42fe0000
 8002ab0:	200004d4 	.word	0x200004d4
 8002ab4:	20005408 	.word	0x20005408
 8002ab8:	20005424 	.word	0x20005424
 8002abc:	20005428 	.word	0x20005428
 8002ac0:	20004fcc 	.word	0x20004fcc

08002ac4 <lfoSawSquareTick>:



void lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <lfoSawSquareTick+0x18>)
 8002ac6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002aca:	b510      	push	{r4, lr}
 8002acc:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 8002ace:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002ad2:	f018 ffd9 	bl	801ba88 <tSawSquareLFO_tick>
 8002ad6:	ed84 0a00 	vstr	s0, [r4]
}
 8002ada:	bd10      	pop	{r4, pc}
 8002adc:	20005218 	.word	0x20005218

08002ae0 <lfoSineTriTick>:

void lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <lfoSineTriTick+0x18>)
 8002ae2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002ae6:	b510      	push	{r4, lr}
 8002ae8:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 8002aea:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002aee:	f019 f90d 	bl	801bd0c <tSineTriLFO_tick>
 8002af2:	ed84 0a00 	vstr	s0, [r4]
}
 8002af6:	bd10      	pop	{r4, pc}
 8002af8:	20005268 	.word	0x20005268

08002afc <lfoSineTick>:

void lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <lfoSineTick+0x18>)
 8002afe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002b02:	b510      	push	{r4, lr}
 8002b04:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
 8002b06:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002b0a:	f014 fbf9 	bl	8017300 <tCycle_tick>
 8002b0e:	ed84 0a00 	vstr	s0, [r4]
}
 8002b12:	bd10      	pop	{r4, pc}
 8002b14:	20005248 	.word	0x20005248

08002b18 <lfoTriTick>:

void lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <lfoTriTick+0x18>)
 8002b1a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 8002b22:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002b26:	f019 f875 	bl	801bc14 <tTriLFO_tick>
 8002b2a:	ed84 0a00 	vstr	s0, [r4]
}
 8002b2e:	bd10      	pop	{r4, pc}
 8002b30:	20005288 	.word	0x20005288

08002b34 <lfoSawTick>:
void lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <lfoSawTick+0x24>)
 8002b36:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002b3a:	b510      	push	{r4, lr}
 8002b3c:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 8002b3e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002b42:	f018 fe23 	bl	801b78c <tIntPhasor_tick>
 8002b46:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002b4a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002b4e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002b52:	edc4 7a00 	vstr	s15, [r4]
}
 8002b56:	bd10      	pop	{r4, pc}
 8002b58:	200051f8 	.word	0x200051f8

08002b5c <lfoPulseTick>:

void lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <lfoPulseTick+0x18>)
 8002b5e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002b62:	b510      	push	{r4, lr}
 8002b64:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 8002b66:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002b6a:	f018 fedd 	bl	801b928 <tSquareLFO_tick>
 8002b6e:	ed84 0a00 	vstr	s0, [r4]
}
 8002b72:	bd10      	pop	{r4, pc}
 8002b74:	200051d8 	.word	0x200051d8

08002b78 <lfoSawSquareSetRate>:

void lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <lfoSawSquareSetRate+0x10>)
 8002b7a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002b7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002b82:	f018 bfc3 	b.w	801bb0c <tSawSquareLFO_setFreq>
 8002b86:	bf00      	nop
 8002b88:	20005218 	.word	0x20005218

08002b8c <lfoSineTriSetRate>:
}

void lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <lfoSineTriSetRate+0x10>)
 8002b8e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002b92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002b96:	f019 b907 	b.w	801bda8 <tSineTriLFO_setFreq>
 8002b9a:	bf00      	nop
 8002b9c:	20005268 	.word	0x20005268

08002ba0 <lfoSineSetRate>:
}
void lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <lfoSineSetRate+0x10>)
 8002ba2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002ba6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002baa:	f014 bbcf 	b.w	801734c <tCycle_setFreq>
 8002bae:	bf00      	nop
 8002bb0:	20005248 	.word	0x20005248

08002bb4 <lfoTriSetRate>:
}
void lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <lfoTriSetRate+0x10>)
 8002bb6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002bba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002bbe:	f019 b843 	b.w	801bc48 <tTriLFO_setFreq>
 8002bc2:	bf00      	nop
 8002bc4:	20005288 	.word	0x20005288

08002bc8 <lfoSawSetRate>:
}
void lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <lfoSawSetRate+0x10>)
 8002bca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002bce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002bd2:	f018 bdeb 	b.w	801b7ac <tIntPhasor_setFreq>
 8002bd6:	bf00      	nop
 8002bd8:	200051f8 	.word	0x200051f8

08002bdc <lfoPulseSetRate>:
}
void lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <lfoPulseSetRate+0x10>)
 8002bde:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002be2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002be6:	f018 bec3 	b.w	801b970 <tSquareLFO_setFreq>
 8002bea:	bf00      	nop
 8002bec:	200051d8 	.word	0x200051d8

08002bf0 <lfoSawSquareSetPhase>:
}


void lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <lfoSawSquareSetPhase+0x10>)
 8002bf2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002bf6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002bfa:	f018 bfab 	b.w	801bb54 <tSawSquareLFO_setPhase>
 8002bfe:	bf00      	nop
 8002c00:	20005218 	.word	0x20005218

08002c04 <lfoSineTriSetPhase>:
}
void lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <lfoSineTriSetPhase+0x10>)
 8002c06:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c0e:	f019 b8e3 	b.w	801bdd8 <tSineTriLFO_setPhase>
 8002c12:	bf00      	nop
 8002c14:	20005268 	.word	0x20005268

08002c18 <lfoSineSetPhase>:
}
void lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <lfoSineSetPhase+0x10>)
 8002c1a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c22:	f014 bb9f 	b.w	8017364 <tCycle_setPhase>
 8002c26:	bf00      	nop
 8002c28:	20005248 	.word	0x20005248

08002c2c <lfoTriSetPhase>:
}
void lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <lfoTriSetPhase+0x10>)
 8002c2e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c36:	f019 b813 	b.w	801bc60 <tTriLFO_setPhase>
 8002c3a:	bf00      	nop
 8002c3c:	20005288 	.word	0x20005288

08002c40 <lfoSawSetPhase>:
}
void lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <lfoSawSetPhase+0x10>)
 8002c42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c4a:	f018 bdbb 	b.w	801b7c4 <tIntPhasor_setPhase>
 8002c4e:	bf00      	nop
 8002c50:	200051f8 	.word	0x200051f8

08002c54 <lfoPulseSetPhase>:
}
void lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
 8002c54:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <lfoPulseSetPhase+0x10>)
 8002c56:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c5a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c5e:	f018 bebf 	b.w	801b9e0 <tSquareLFO_setPhase>
 8002c62:	bf00      	nop
 8002c64:	200051d8 	.word	0x200051d8

08002c68 <lfoSawSquareSetShape>:
}


void lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <lfoSawSquareSetShape+0x10>)
 8002c6a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c72:	f018 bfa1 	b.w	801bbb8 <tSawSquareLFO_setShape>
 8002c76:	bf00      	nop
 8002c78:	20005218 	.word	0x20005218

08002c7c <lfoSineTriSetShape>:
}
void lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <lfoSineTriSetShape+0x10>)
 8002c7e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c86:	f019 b8bf 	b.w	801be08 <tSineTriLFO_setShape>
 8002c8a:	bf00      	nop
 8002c8c:	20005268 	.word	0x20005268

08002c90 <lfoSineSetShape>:
}
void lfoSineSetShape(float s, int v, int string)
{
	//none
}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop

08002c94 <lfoTriSetShape>:
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop

08002c98 <lfoSawSetShape>:
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop

08002c9c <lfoPulseSetShape>:
{
	//none
}
void lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <lfoPulseSetShape+0x10>)
 8002c9e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002ca2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002ca6:	f018 be7b 	b.w	801b9a0 <tSquareLFO_setPulseWidth>
 8002caa:	bf00      	nop
 8002cac:	200051d8 	.word	0x200051d8

08002cb0 <clipperGainSet>:
float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM  clipperGainSet(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 24.0f);
 8002cb0:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
 8002cb4:	b538      	push	{r3, r4, r5, lr}
 8002cb6:	4605      	mov	r5, r0
 8002cb8:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
 8002cba:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002cbe:	f014 f98d 	bl	8016fdc <fasterdbtoa>
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <clipperGainSet+0x24>)
 8002cc4:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8002cc8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002ccc:	ed83 0a00 	vstr	s0, [r3]
}
 8002cd0:	bd38      	pop	{r3, r4, r5, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20005494 	.word	0x20005494

08002cd8 <wavefolderParam1>:
void __ATTR_ITCMRAM  wavefolderParam1(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 12.0f);
 8002cd8:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
 8002cdc:	b538      	push	{r3, r4, r5, lr}
 8002cde:	4605      	mov	r5, r0
 8002ce0:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
 8002ce2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002ce6:	f014 f979 	bl	8016fdc <fasterdbtoa>
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <wavefolderParam1+0x24>)
 8002cec:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8002cf0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002cf4:	ed83 0a00 	vstr	s0, [r3]
}
 8002cf8:	bd38      	pop	{r3, r4, r5, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20005494 	.word	0x20005494

08002d00 <wavefolderParam3>:
void __ATTR_ITCMRAM  wavefolderParam3(float value, int v, int string)
{
	//value = (value * 0.99f) + 0.00f; //avoid zero
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002d00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002d04:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <wavefolderParam3+0x28>)
	param3[v][string] = value;
 8002d0a:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002d0c:	ee70 6a27 	vadd.f32	s13, s0, s15
 8002d10:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
 8002d14:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002d18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
 8002d1c:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002d20:	ed83 7a00 	vstr	s14, [r3]
}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	200050b8 	.word	0x200050b8
 8002d2c:	200054d4 	.word	0x200054d4

08002d30 <tiltParam1>:

void __ATTR_ITCMRAM  tiltParam1(float value, int v, int string)
{
 8002d30:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8002d32:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8002d36:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 8002d3a:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8002d3e:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
 8002d42:	0084      	lsls	r4, r0, #2
{
 8002d44:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8002d48:	eee0 7a68 	vfms.f32	s15, s0, s17
 8002d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d50:	f014 f944 	bl	8016fdc <fasterdbtoa>
 8002d54:	4808      	ldr	r0, [pc, #32]	; (8002d78 <tiltParam1+0x48>)
 8002d56:	4420      	add	r0, r4
 8002d58:	f013 f826 	bl	8015da8 <tVZFilter_setGain>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8002d5c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8002d60:	eea8 0a28 	vfma.f32	s0, s16, s17
 8002d64:	f014 f93a 	bl	8016fdc <fasterdbtoa>
 8002d68:	4804      	ldr	r0, [pc, #16]	; (8002d7c <tiltParam1+0x4c>)
}
 8002d6a:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8002d6e:	4420      	add	r0, r4
}
 8002d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8002d74:	f013 b818 	b.w	8015da8 <tVZFilter_setGain>
 8002d78:	20005a4c 	.word	0x20005a4c
 8002d7c:	20005a6c 	.word	0x20005a6c

08002d80 <tiltParam2>:

void __ATTR_ITCMRAM  tiltParam2(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002d80:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 8002d84:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002db8 <tiltParam2+0x38>
 8002d88:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002dbc <tiltParam2+0x3c>
 8002d8c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002dc0 <tiltParam2+0x40>
 8002d90:	eee0 0a07 	vfma.f32	s1, s0, s14
 8002d94:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002dc4 <tiltParam2+0x44>
{
 8002d98:	b538      	push	{r3, r4, r5, lr}
 8002d9a:	4605      	mov	r5, r0
 8002d9c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002d9e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8002da2:	f013 ff7b 	bl	8016c9c <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <tiltParam2+0x48>)
 8002da8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8002dac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 8002db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8002db4:	f012 be9a 	b.w	8015aec <tVZFilter_setFreqFast>
 8002db8:	429a0000 	.word	0x429a0000
 8002dbc:	420fb824 	.word	0x420fb824
 8002dc0:	457ff000 	.word	0x457ff000
 8002dc4:	00000000 	.word	0x00000000
 8002dc8:	20000ac4 	.word	0x20000ac4

08002dcc <tiltParam3>:
void __ATTR_ITCMRAM  tiltParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
 8002dcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <tiltParam3+0x20>)
 8002dd2:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8002dd6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002dda:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002dde:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002de2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002de6:	f012 bffb 	b.w	8015de0 <tVZFilter_setResonance>
 8002dea:	bf00      	nop
 8002dec:	20000ac4 	.word	0x20000ac4

08002df0 <tiltParam4>:
}
void __ATTR_ITCMRAM  tiltParam4(float value, int v, int string)
{
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8002df0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8002df4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002e1c <tiltParam4+0x2c>
{
 8002df8:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8002dfa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8002dfe:	4605      	mov	r5, r0
 8002e00:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8002e02:	eeb0 0a67 	vmov.f32	s0, s15
 8002e06:	f014 f8e1 	bl	8016fcc <fastdbtoa>
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <tiltParam4+0x30>)
 8002e0c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8002e10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 8002e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8002e18:	f012 bfc6 	b.w	8015da8 <tVZFilter_setGain>
 8002e1c:	42080000 	.word	0x42080000
 8002e20:	20000ac4 	.word	0x20000ac4

08002e24 <compressorParam1>:

void __ATTR_ITCMRAM  compressorParam1(float value, int v, int string)
{
	comp[v][string]->T = value*-24.0f;
 8002e24:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <compressorParam1+0x18>)
 8002e2a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e2e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002e32:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002e36:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8002e3a:	4770      	bx	lr
 8002e3c:	20000ae8 	.word	0x20000ae8

08002e40 <compressorParam2>:
void __ATTR_ITCMRAM  compressorParam2(float value, int v, int string)
{
	comp[v][string]->R = ((value*10.0f)+1.0f);
 8002e40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <compressorParam2+0x30>)
 8002e46:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002e4a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002e4e:	eeb0 7a67 	vmov.f32	s14, s15
 8002e52:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002e56:	eea0 7a26 	vfma.f32	s14, s0, s13
 8002e5a:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
 8002e5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e62:	edd3 6a04 	vldr	s13, [r3, #16]
 8002e66:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e6a:	ed83 7a07 	vstr	s14, [r3, #28]
}
 8002e6e:	4770      	bx	lr
 8002e70:	20000ae8 	.word	0x20000ae8

08002e74 <compressorParam3>:

void __ATTR_ITCMRAM  compressorParam3(float value, int v, int string)
{
	comp[v][string]->M = value * 18.0f;
 8002e74:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <compressorParam3+0x18>)
 8002e7a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e7e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002e82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002e86:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8002e8a:	4770      	bx	lr
 8002e8c:	20000ae8 	.word	0x20000ae8

08002e90 <compressorParam4>:

void __ATTR_ITCMRAM  compressorParam4(float value, int v, int string)
{
	value = (value +  0.001f);
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <compressorParam4+0x30>)
 8002e92:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
 8002e96:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002ec4 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002e9a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 8002e9e:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002ea0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
 8002ea4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002ea8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8002eac:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002eb0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002eb4:	f013 fe60 	bl	8016b78 <fasterexpf>
 8002eb8:	ed84 0a01 	vstr	s0, [r4, #4]
}
 8002ebc:	bd10      	pop	{r4, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000ae8 	.word	0x20000ae8
 8002ec4:	3a83126f 	.word	0x3a83126f

08002ec8 <compressorParam5>:

void __ATTR_ITCMRAM  compressorParam5(float value, int v, int string)
{
	value = (value + 0.001f);
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <compressorParam5+0x30>)
 8002eca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
 8002ece:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002efc <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002ed2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 8002ed6:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002ed8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
 8002edc:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002ee0:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8002ee4:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002ee8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002eec:	f013 fe44 	bl	8016b78 <fasterexpf>
 8002ef0:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8002ef4:	bd10      	pop	{r4, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000ae8 	.word	0x20000ae8
 8002efc:	3a83126f 	.word	0x3a83126f

08002f00 <offsetParam2>:

void __ATTR_ITCMRAM  offsetParam2(float value, int v, int string)
{
	param2[v][string] = (value * 2.0f) - 1.0f;
 8002f00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <offsetParam2+0x1c>)
 8002f06:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002f0a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002f0e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002f12:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002f16:	edc3 7a00 	vstr	s15, [r3]
}
 8002f1a:	4770      	bx	lr
 8002f1c:	200054b4 	.word	0x200054b4

08002f20 <param2Linear>:
void __ATTR_ITCMRAM param2Linear(float value, int v, int string)
{
	param2[v][string] = value;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <param2Linear+0x10>)
 8002f22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002f26:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002f2a:	ed83 0a00 	vstr	s0, [r3]
}
 8002f2e:	4770      	bx	lr
 8002f30:	200054b4 	.word	0x200054b4

08002f34 <param3Linear>:
void __ATTR_ITCMRAM param3Linear(float value, int v, int string)
{
	param3[v][string] = value;
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <param3Linear+0x10>)
 8002f36:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002f3a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002f3e:	ed83 0a00 	vstr	s0, [r3]
}
 8002f42:	4770      	bx	lr
 8002f44:	200054d4 	.word	0x200054d4

08002f48 <param3Soft>:
void __ATTR_ITCMRAM param3Soft(float value, int v, int string)
{
	param3[v][string] = (value * .99f) + 0.01f;
 8002f48:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002f8c <param3Soft+0x44>
 8002f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f50:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002f90 <param3Soft+0x48>
 8002f54:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002f58:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8002f94 <param3Soft+0x4c>
 8002f5c:	eee0 7a26 	vfma.f32	s15, s0, s13
 8002f60:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <param3Soft+0x50>)
 8002f62:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8002f66:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
 8002f68:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8002f6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002f70:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
 8002f74:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8002f78:	eee5 6a86 	vfma.f32	s13, s11, s12
 8002f7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f84:	edc3 6a00 	vstr	s13, [r3]
}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	3f7d70a4 	.word	0x3f7d70a4
 8002f90:	3c23d70a 	.word	0x3c23d70a
 8002f94:	3eaaaaaa 	.word	0x3eaaaaaa
 8002f98:	200054d4 	.word	0x200054d4
 8002f9c:	20005a20 	.word	0x20005a20

08002fa0 <param3Hard>:

void __ATTR_ITCMRAM param3Hard(float value, int v, int string)
{
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8002fa0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003000 <param3Hard+0x60>
 8002fa4:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003004 <param3Hard+0x64>
 8002fa8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003008 <param3Hard+0x68>
 8002fac:	eee0 7a26 	vfma.f32	s15, s0, s13
{
 8002fb0:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <param3Hard+0x6c>)
 8002fb4:	0045      	lsls	r5, r0, #1
 8002fb6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 8002fba:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8002fbc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002fc0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002fc4:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
 8002fc8:	f019 ff02 	bl	801cdd0 <arm_sin_f32>
	if (tempDiv == 0.0f)
 8002fcc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd4:	d00a      	beq.n	8002fec <param3Hard+0x4c>
	{
		tempDiv = 0.001f;
	}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 8002fd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <param3Hard+0x70>)
 8002fdc:	4425      	add	r5, r4
 8002fde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8002fe2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
}
 8002fea:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <param3Hard+0x70>)
 8002fee:	4425      	add	r5, r4
 8002ff0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003014 <param3Hard+0x74>
 8002ff4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002ff8:	edc3 7a00 	vstr	s15, [r3]
}
 8002ffc:	bd38      	pop	{r3, r4, r5, pc}
 8002ffe:	bf00      	nop
 8003000:	3f7d70a4 	.word	0x3f7d70a4
 8003004:	3c23d70a 	.word	0x3c23d70a
 8003008:	3fc90fdb 	.word	0x3fc90fdb
 800300c:	200054d4 	.word	0x200054d4
 8003010:	20005a00 	.word	0x20005a00
 8003014:	4479ffff 	.word	0x4479ffff

08003018 <param4Linear>:
void __ATTR_ITCMRAM param4Linear(float value, int v, int string)
{
	param4[v][string] = value;
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <param4Linear+0x10>)
 800301a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800301e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003022:	ed83 0a00 	vstr	s0, [r3]
}
 8003026:	4770      	bx	lr
 8003028:	200054f4 	.word	0x200054f4

0800302c <param5Linear>:

void __ATTR_ITCMRAM param5Linear(float value, int v, int string)
{
	param5[v][string] = value;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <param5Linear+0x10>)
 800302e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003032:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003036:	ed83 0a00 	vstr	s0, [r3]
}
 800303a:	4770      	bx	lr
 800303c:	20005514 	.word	0x20005514

08003040 <param3BC>:
{
	tCrusher_setQuality (&bc[v][string],value);
}
void __ATTR_ITCMRAM param3BC(float value, int v, int string)
{
	value = (value * inv_oversample) + 0.01f;
 8003040:	4a07      	ldr	r2, [pc, #28]	; (8003060 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
 8003042:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
 8003046:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003064 <param3BC+0x24>
 800304a:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <param3BC+0x28>)
 8003050:	eee7 7a00 	vfma.f32	s15, s14, s0
 8003054:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003058:	eeb0 0a67 	vmov.f32	s0, s15
 800305c:	f011 bc46 	b.w	80148ec <tCrusher_setSamplingRatio>
 8003060:	2000000c 	.word	0x2000000c
 8003064:	3c23d70a 	.word	0x3c23d70a
 8003068:	20000aa4 	.word	0x20000aa4

0800306c <fxMixSet>:



void __ATTR_ITCMRAM fxMixSet(float value, int v, int string)
{
	fxMix[v][string] = value;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <fxMixSet+0x10>)
 800306e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003072:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003076:	ed83 0a00 	vstr	s0, [r3]
}
 800307a:	4770      	bx	lr
 800307c:	20005034 	.word	0x20005034

08003080 <fxPostGainSet>:

void __ATTR_ITCMRAM fxPostGainSet(float value, int v, int string)
{
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 8003080:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8003084:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 8003088:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 800308a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800308e:	4605      	mov	r5, r0
 8003090:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 8003092:	eeb0 0a67 	vmov.f32	s0, s15
 8003096:	f013 ffa1 	bl	8016fdc <fasterdbtoa>
 800309a:	4b04      	ldr	r3, [pc, #16]	; (80030ac <fxPostGainSet+0x2c>)
 800309c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80030a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80030a4:	ed83 0a00 	vstr	s0, [r3]
}
 80030a8:	bd38      	pop	{r3, r4, r5, pc}
 80030aa:	bf00      	nop
 80030ac:	20005054 	.word	0x20005054

080030b0 <wavefolderTick>:


//got the idea from https://ccrma.stanford.edu/~jatin/ComplexNonlinearities/Wavefolder.html  -JS
//much more efficient than the lockhart, and can be further optimized with lookups
float __ATTR_ITCMRAM wavefolderTick(float sample, int v, int string)
{
 80030b0:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 80030b2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    ffSample *= 1.499999f;
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);

    //softclip approx for tanh saturation in original code
    float fbSample = wfState[v][string];
 80030b6:	4d36      	ldr	r5, [pc, #216]	; (8003190 <wavefolderTick+0xe0>)
 80030b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 80030bc:	4b35      	ldr	r3, [pc, #212]	; (8003194 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
 80030be:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80030c2:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 80030c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80030ca:	4a33      	ldr	r2, [pc, #204]	; (8003198 <wavefolderTick+0xe8>)
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 80030cc:	eddf 3a33 	vldr	s7, [pc, #204]	; 800319c <wavefolderTick+0xec>
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 80030d0:	0084      	lsls	r4, r0, #2
 80030d2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    {
    	fbSample = 1.0f;
    }
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    fbSample *= 1.499999f;
    float fb = curFB * fbSample;
 80030d6:	ed9f 3a32 	vldr	s6, [pc, #200]	; 80031a0 <wavefolderTick+0xf0>
{
 80030da:	ed2d 8b02 	vpush	{d8}
 80030de:	ed95 6a00 	vldr	s12, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 80030e2:	edd3 7a00 	vldr	s15, [r3]
 80030e6:	fe86 6a66 	vminnm.f32	s12, s12, s13
 80030ea:	fe86 6a24 	vmaxnm.f32	s12, s12, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 80030ee:	ee26 7a06 	vmul.f32	s14, s12, s12
    float curFB = param3[v][string];
 80030f2:	4b2c      	ldr	r3, [pc, #176]	; (80031a4 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 80030f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80030f8:	edd2 5a00 	vldr	s11, [r2]
    float curFB = param3[v][string];
 80030fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
 8003100:	4a29      	ldr	r2, [pc, #164]	; (80031a8 <wavefolderTick+0xf8>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 8003102:	ee67 7a23 	vmul.f32	s15, s14, s7
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8003106:	ee20 7a25 	vmul.f32	s14, s0, s11
    float fb = curFB * fbSample;
 800310a:	ed93 4a00 	vldr	s8, [r3]
    float curFF = param4[v][string];
 800310e:	eb02 0280 	add.w	r2, r2, r0, lsl #2

    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <wavefolderTick+0xfc>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 8003114:	ee76 7ae7 	vsub.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8003118:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80031b0 <wavefolderTick+0x100>
 800311c:	fec7 5a66 	vminnm.f32	s11, s14, s13
    float fb = curFB * fbSample;
 8003120:	ee24 4a03 	vmul.f32	s8, s8, s6
 8003124:	fec5 5aa4 	vmaxnm.f32	s11, s11, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 8003128:	ee65 4aa5 	vmul.f32	s9, s11, s11
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 800312c:	ee67 7a86 	vmul.f32	s15, s15, s12
    float curFF = param4[v][string];
 8003130:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8003134:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003138:	ee27 0a00 	vmul.f32	s0, s14, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
 800313c:	ee76 2ac5 	vsub.f32	s5, s13, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 8003140:	ee24 6aa3 	vmul.f32	s12, s9, s7
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8003144:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
 8003148:	ee67 7a84 	vmul.f32	s15, s15, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 800314c:	ee25 5a03 	vmul.f32	s10, s10, s6
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 8003150:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8003154:	eee2 7a87 	vfma.f32	s15, s5, s14
 8003158:	ee66 6aa5 	vmul.f32	s13, s13, s11
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 800315c:	eee6 7a85 	vfma.f32	s15, s13, s10
 8003160:	eeb0 8a67 	vmov.f32	s16, s15
 8003164:	f019 fe34 	bl	801cdd0 <arm_sin_f32>
    sample = wfState[v][string] * invCurFB[v][string];
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800316a:	4813      	ldr	r0, [pc, #76]	; (80031b8 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 800316c:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
 8003170:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8003172:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
 8003174:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8003178:	eee8 7ac0 	vfms.f32	s15, s17, s0
 800317c:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8003180:	ee27 0a87 	vmul.f32	s0, s15, s14
    return sample;
}
 8003184:	ecbd 8b02 	vpop	{d8}
 8003188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800318c:	f012 ba6e 	b.w	801566c <tHighpass_tick>
 8003190:	20012f98 	.word	0x20012f98
 8003194:	200054b4 	.word	0x200054b4
 8003198:	20005494 	.word	0x20005494
 800319c:	3eaaaaaa 	.word	0x3eaaaaaa
 80031a0:	3fbffff8 	.word	0x3fbffff8
 80031a4:	200054d4 	.word	0x200054d4
 80031a8:	200054f4 	.word	0x200054f4
 80031ac:	20005514 	.word	0x20005514
 80031b0:	40c90fdb 	.word	0x40c90fdb
 80031b4:	200050b8 	.word	0x200050b8
 80031b8:	20000e68 	.word	0x20000e68

080031bc <chorusParam1>:

void __ATTR_ITCMRAM chorusParam1(float value, int v, int string)
{
	param1[v][string] = value * 5780.0f + 10.0f;
 80031bc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80031c0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80031d8 <chorusParam1+0x1c>
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <chorusParam1+0x20>)
 80031c6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80031ca:	eee0 7a07 	vfma.f32	s15, s0, s14
 80031ce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80031d2:	edc3 7a00 	vstr	s15, [r3]
}
 80031d6:	4770      	bx	lr
 80031d8:	45b4a000 	.word	0x45b4a000
 80031dc:	20005494 	.word	0x20005494

080031e0 <chorusParam2>:
void __ATTR_ITCMRAM chorusParam2(float value, int v, int string)
{
	param2[v][string] = value * 0.1f;
 80031e0:	eddf 7a05 	vldr	s15, [pc, #20]	; 80031f8 <chorusParam2+0x18>
 80031e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <chorusParam2+0x1c>)
 80031ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80031ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80031f2:	ed83 0a00 	vstr	s0, [r3]
}
 80031f6:	4770      	bx	lr
 80031f8:	3dcccccd 	.word	0x3dcccccd
 80031fc:	200054b4 	.word	0x200054b4

08003200 <chorusParam3>:

void __ATTR_ITCMRAM chorusParam3(float value, int v, int string)
{
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
 8003200:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003220 <chorusParam3+0x20>
 8003204:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003208:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003224 <chorusParam3+0x24>
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <chorusParam3+0x28>)
 800320e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003212:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003216:	eeb0 0a67 	vmov.f32	s0, s15
 800321a:	f014 b897 	b.w	801734c <tCycle_setFreq>
 800321e:	bf00      	nop
 8003220:	3ecccccd 	.word	0x3ecccccd
 8003224:	3c23d70a 	.word	0x3c23d70a
 8003228:	200053c8 	.word	0x200053c8

0800322c <chorusParam4>:
}

void __ATTR_ITCMRAM chorusParam4(float value, int v, int string)
{
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
 800322c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800324c <chorusParam4+0x20>
 8003230:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003234:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003250 <chorusParam4+0x24>
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <chorusParam4+0x28>)
 800323a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800323e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003242:	eeb0 0a67 	vmov.f32	s0, s15
 8003246:	f014 b881 	b.w	801734c <tCycle_setFreq>
 800324a:	bf00      	nop
 800324c:	3ee38e37 	.word	0x3ee38e37
 8003250:	3c343958 	.word	0x3c343958
 8003254:	200053e8 	.word	0x200053e8

08003258 <chorusTick>:
    //float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    //temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    //temp = tHighpass_tick(&dcBlock1[v], temp);
	float temp = 0.0f;
    return -temp;
}
 8003258:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003260 <chorusTick+0x8>
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	80000000 	.word	0x80000000

08003264 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 8003264:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8003268:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <shaperTick+0x40>)
    sample = sample * param1[v][string];
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 800326c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
 8003270:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 8003274:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 8003276:	edd2 7a00 	vldr	s15, [r2]
 800327a:	008c      	lsls	r4, r1, #2
 800327c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003280:	edd3 7a00 	vldr	s15, [r3]
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <shaperTick+0x48>)
 8003286:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800328a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800328e:	edd3 0a00 	vldr	s1, [r3]
 8003292:	f013 fca1 	bl	8016bd8 <LEAF_shaper>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8003296:	4806      	ldr	r0, [pc, #24]	; (80032b0 <shaperTick+0x4c>)
 8003298:	4420      	add	r0, r4
    return temp;
}
 800329a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 800329e:	f012 b9e5 	b.w	801566c <tHighpass_tick>
 80032a2:	bf00      	nop
 80032a4:	200054b4 	.word	0x200054b4
 80032a8:	20005494 	.word	0x20005494
 80032ac:	200054d4 	.word	0x200054d4
 80032b0:	20000e68 	.word	0x20000e68

080032b4 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop

080032b8 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 80032b8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <tiltFilterTick+0x28>)
{
 80032be:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 80032c0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80032c4:	008c      	lsls	r4, r1, #2
 80032c6:	f012 f9f3 	bl	80156b0 <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
 80032ca:	4806      	ldr	r0, [pc, #24]	; (80032e4 <tiltFilterTick+0x2c>)
 80032cc:	4420      	add	r0, r4
 80032ce:	f012 f9ef 	bl	80156b0 <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 80032d2:	4805      	ldr	r0, [pc, #20]	; (80032e8 <tiltFilterTick+0x30>)
 80032d4:	4420      	add	r0, r4
    return sample;
}
 80032d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 80032da:	f012 b9e9 	b.w	80156b0 <tVZFilter_tickEfficient>
 80032de:	bf00      	nop
 80032e0:	20005a4c 	.word	0x20005a4c
 80032e4:	20005a6c 	.word	0x20005a6c
 80032e8:	20000ac4 	.word	0x20000ac4

080032ec <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
 80032ec:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
 80032f0:	4a10      	ldr	r2, [pc, #64]	; (8003334 <tanhTick+0x48>)
 80032f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
 80032f6:	4b10      	ldr	r3, [pc, #64]	; (8003338 <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
 80032f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    float gain = param1[v][string];
 80032fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 8003300:	b510      	push	{r4, lr}
 8003302:	edd2 6a00 	vldr	s13, [r2]
    float gain = param1[v][string];
 8003306:	008c      	lsls	r4, r1, #2
 8003308:	edd3 7a00 	vldr	s15, [r3]
    float temp = tanhf(sample + (param2[v][string]*gain));
 800330c:	eea6 0a87 	vfma.f32	s0, s13, s14
 8003310:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003314:	f01a fb80 	bl	801da18 <tanhf>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8003318:	4808      	ldr	r0, [pc, #32]	; (800333c <tanhTick+0x50>)
 800331a:	4420      	add	r0, r4
 800331c:	f012 f9a6 	bl	801566c <tHighpass_tick>
    temp *= param4[v][string];
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <tanhTick+0x54>)
 8003322:	4423      	add	r3, r4
 8003324:	edd3 7a00 	vldr	s15, [r3]
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
 8003328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
 800332c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003330:	f01a bb72 	b.w	801da18 <tanhf>
 8003334:	200054b4 	.word	0x200054b4
 8003338:	20005494 	.word	0x20005494
 800333c:	20000e68 	.word	0x20000e68
 8003340:	200054f4 	.word	0x200054f4

08003344 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 8003344:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
 8003348:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <softClipTick+0x6c>)
    float shape = param3[v][string];
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <softClipTick+0x70>)
    sample = sample + param2[v][string];
 800334c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003350:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
 8003354:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80033b8 <softClipTick+0x74>
    float shape = param3[v][string];
 8003358:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800335c:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
        sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8003360:	4816      	ldr	r0, [pc, #88]	; (80033bc <softClipTick+0x78>)
{
 8003362:	b410      	push	{r4}
    sample = sample * param1[v][string];
 8003364:	4c16      	ldr	r4, [pc, #88]	; (80033c0 <softClipTick+0x7c>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8003366:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
 800336a:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
 800336e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float shape = param3[v][string];
 8003372:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
 8003376:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <softClipTick+0x80>)
    sample = sample + param2[v][string];
 8003378:	ed94 5a00 	vldr	s10, [r4]
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
 800337c:	ee26 7a87 	vmul.f32	s14, s13, s14
        sample = sample * shapeDividerS[v][string];
 8003380:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return sample;
}
 8003384:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
 8003388:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
 800338c:	ed93 0a00 	vldr	s0, [r3]
 8003390:	fec7 7ae5 	vminnm.f32	s15, s15, s11
 8003394:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
 8003398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800339c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033a0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80033a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80033a8:	ee26 0a80 	vmul.f32	s0, s13, s0
 80033ac:	f012 b95e 	b.w	801566c <tHighpass_tick>
 80033b0:	200054b4 	.word	0x200054b4
 80033b4:	200054d4 	.word	0x200054d4
 80033b8:	3eaaaaaa 	.word	0x3eaaaaaa
 80033bc:	20000e68 	.word	0x20000e68
 80033c0:	20005494 	.word	0x20005494
 80033c4:	20005a20 	.word	0x20005a20

080033c8 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
 80033c8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80033cc:	4a1a      	ldr	r2, [pc, #104]	; (8003438 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <hardClipTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 80033d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
 80033d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 80033d8:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
 80033dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 80033e0:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
 80033e2:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
 80033e6:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
 80033e8:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 80033ec:	4e14      	ldr	r6, [pc, #80]	; (8003440 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
 80033ee:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 80033f2:	4d14      	ldr	r5, [pc, #80]	; (8003444 <hardClipTick+0x7c>)
 80033f4:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 80033f8:	4425      	add	r5, r4
 80033fa:	ed96 7a00 	vldr	s14, [r6]
 80033fe:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 8003402:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8003406:	ee27 0a87 	vmul.f32	s0, s15, s14
 800340a:	f019 fce1 	bl	801cdd0 <arm_sin_f32>
 800340e:	ed96 7a00 	vldr	s14, [r6]
 8003412:	edd5 7a00 	vldr	s15, [r5]
 8003416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800341a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800341e:	f019 fcd7 	bl	801cdd0 <arm_sin_f32>
        sample = sample * shapeDividerH[v][string];
 8003422:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8003426:	4808      	ldr	r0, [pc, #32]	; (8003448 <hardClipTick+0x80>)
 8003428:	ee20 0a27 	vmul.f32	s0, s0, s15
 800342c:	4420      	add	r0, r4
    return sample;
}
 800342e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8003432:	f012 b91b 	b.w	801566c <tHighpass_tick>
 8003436:	bf00      	nop
 8003438:	20005494 	.word	0x20005494
 800343c:	200054b4 	.word	0x200054b4
 8003440:	200054d4 	.word	0x200054d4
 8003444:	20005a00 	.word	0x20005a00
 8003448:	20000e68 	.word	0x20000e68

0800344c <satTick>:


float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
 800344c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <satTick+0x64>)
    sample = sample * param1[v][string];
 8003452:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8003454:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8003458:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 800345c:	4816      	ldr	r0, [pc, #88]	; (80034b8 <satTick+0x6c>)
    sample = sample * param1[v][string];
 800345e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8003462:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
 8003466:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8003468:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
 800346c:	008c      	lsls	r4, r1, #2
 800346e:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8003472:	eeb0 6a47 	vmov.f32	s12, s14
 8003476:	ee27 7a87 	vmul.f32	s14, s15, s14
 800347a:	eea7 6a80 	vfma.f32	s12, s15, s0
 800347e:	eea7 7a80 	vfma.f32	s14, s15, s0
 8003482:	eeb0 6ac6 	vabs.f32	s12, s12
 8003486:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800348a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 800348e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8003492:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8003496:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800349a:	f012 f8e7 	bl	801566c <tHighpass_tick>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
 800349e:	4807      	ldr	r0, [pc, #28]	; (80034bc <satTick+0x70>)
 80034a0:	4420      	add	r0, r4
 80034a2:	f012 f8e3 	bl	801566c <tHighpass_tick>
    temp = LEAF_tanh(temp);
    return temp;
}
 80034a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
 80034aa:	f013 bc0b 	b.w	8016cc4 <LEAF_tanh>
 80034ae:	bf00      	nop
 80034b0:	200054b4 	.word	0x200054b4
 80034b4:	20005494 	.word	0x20005494
 80034b8:	20000e68 	.word	0x20000e68
 80034bc:	20000e88 	.word	0x20000e88

080034c0 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 80034c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
 80034c6:	4806      	ldr	r0, [pc, #24]	; (80034e0 <bcTick+0x20>)
    sample = sample * param1[v][string];
 80034c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
 80034cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
 80034d0:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
 80034d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80034d8:	f011 b9c8 	b.w	801486c <tCrusher_tick>
 80034dc:	20005494 	.word	0x20005494
 80034e0:	20000aa4 	.word	0x20000aa4

080034e4 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <compressorTick+0x10>)
 80034e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80034ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80034ee:	f011 ba13 	b.w	8014918 <tCompressor_tick>
 80034f2:	bf00      	nop
 80034f4:	20000ae8 	.word	0x20000ae8

080034f8 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <FXlowpassTick+0x10>)
 80034fa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80034fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003502:	f011 bfdd 	b.w	80154c0 <tSVF_tick>
 8003506:	bf00      	nop
 8003508:	200008f4 	.word	0x200008f4

0800350c <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <FXhighpassTick+0x10>)
 800350e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003512:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003516:	f011 bfd3 	b.w	80154c0 <tSVF_tick>
 800351a:	bf00      	nop
 800351c:	200008d4 	.word	0x200008d4

08003520 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <FXbandpassTick+0x10>)
 8003522:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003526:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800352a:	f011 bfc9 	b.w	80154c0 <tSVF_tick>
 800352e:	bf00      	nop
 8003530:	20000894 	.word	0x20000894

08003534 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <FXdiodeLowpassTick+0x10>)
 8003536:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800353a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800353e:	f012 be09 	b.w	8016154 <tDiodeFilter_tick>
 8003542:	bf00      	nop
 8003544:	200008b4 	.word	0x200008b4

08003548 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <FXVZpeakTick+0x10>)
 800354a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800354e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003552:	f012 b8ad 	b.w	80156b0 <tVZFilter_tickEfficient>
 8003556:	bf00      	nop
 8003558:	20000874 	.word	0x20000874

0800355c <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
 800355c:	4b03      	ldr	r3, [pc, #12]	; (800356c <FXVZlowshelfTick+0x10>)
 800355e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003562:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003566:	f012 b8a3 	b.w	80156b0 <tVZFilter_tickEfficient>
 800356a:	bf00      	nop
 800356c:	20000854 	.word	0x20000854

08003570 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <FXVZhighshelfTick+0x10>)
 8003572:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003576:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800357a:	f012 b899 	b.w	80156b0 <tVZFilter_tickEfficient>
 800357e:	bf00      	nop
 8003580:	20000834 	.word	0x20000834

08003584 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <FXVZbandrejectTick+0x10>)
 8003586:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800358a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800358e:	f012 b88f 	b.w	80156b0 <tVZFilter_tickEfficient>
 8003592:	bf00      	nop
 8003594:	20000814 	.word	0x20000814

08003598 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <FXLadderLowpassTick+0x10>)
 800359a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800359e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80035a2:	f013 b94f 	b.w	8016844 <tLadderFilter_tick>
 80035a6:	bf00      	nop
 80035a8:	200007f4 	.word	0x200007f4

080035ac <FXLowpassParam1>:
//cutoffparams

void FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80035ac:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 80035b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80035e4 <FXLowpassParam1+0x38>
 80035b4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80035e8 <FXLowpassParam1+0x3c>
 80035b8:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80035ec <FXLowpassParam1+0x40>
 80035bc:	eee0 0a07 	vfma.f32	s1, s0, s14
 80035c0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80035f0 <FXLowpassParam1+0x44>
{
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4605      	mov	r5, r0
 80035c8:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80035ca:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80035ce:	f013 fb65 	bl	8016c9c <LEAF_clip>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <FXLowpassParam1+0x48>)
 80035d4:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80035d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 80035dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 80035e0:	f011 bfa4 	b.w	801552c <tSVF_setFreqFast>
 80035e4:	429a0000 	.word	0x429a0000
 80035e8:	420fb824 	.word	0x420fb824
 80035ec:	457ff000 	.word	0x457ff000
 80035f0:	00000000 	.word	0x00000000
 80035f4:	200008f4 	.word	0x200008f4

080035f8 <FXHighpassParam1>:
void FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80035f8:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 80035fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003630 <FXHighpassParam1+0x38>
 8003600:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8003634 <FXHighpassParam1+0x3c>
 8003604:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003638 <FXHighpassParam1+0x40>
 8003608:	eee0 0a07 	vfma.f32	s1, s0, s14
 800360c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800363c <FXHighpassParam1+0x44>
{
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	4605      	mov	r5, r0
 8003614:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003616:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800361a:	f013 fb3f 	bl	8016c9c <LEAF_clip>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <FXHighpassParam1+0x48>)
 8003620:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8003624:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 8003628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 800362c:	f011 bf7e 	b.w	801552c <tSVF_setFreqFast>
 8003630:	429a0000 	.word	0x429a0000
 8003634:	420fb824 	.word	0x420fb824
 8003638:	457ff000 	.word	0x457ff000
 800363c:	00000000 	.word	0x00000000
 8003640:	200008d4 	.word	0x200008d4

08003644 <FXBandpassParam1>:

void FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003644:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 8003648:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800367c <FXBandpassParam1+0x38>
 800364c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8003680 <FXBandpassParam1+0x3c>
 8003650:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003684 <FXBandpassParam1+0x40>
 8003654:	eee0 0a07 	vfma.f32	s1, s0, s14
 8003658:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003688 <FXBandpassParam1+0x44>
{
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4605      	mov	r5, r0
 8003660:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003662:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003666:	f013 fb19 	bl	8016c9c <LEAF_clip>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <FXBandpassParam1+0x48>)
 800366c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8003670:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 8003674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 8003678:	f011 bf58 	b.w	801552c <tSVF_setFreqFast>
 800367c:	429a0000 	.word	0x429a0000
 8003680:	420fb824 	.word	0x420fb824
 8003684:	457ff000 	.word	0x457ff000
 8003688:	00000000 	.word	0x00000000
 800368c:	20000894 	.word	0x20000894

08003690 <FXDiodeParam1>:

void FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003690:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 8003694:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80036c8 <FXDiodeParam1+0x38>
 8003698:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80036cc <FXDiodeParam1+0x3c>
 800369c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80036d0 <FXDiodeParam1+0x40>
 80036a0:	eee0 0a07 	vfma.f32	s1, s0, s14
 80036a4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80036d4 <FXDiodeParam1+0x44>
{
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	4605      	mov	r5, r0
 80036ac:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80036ae:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80036b2:	f013 faf3 	bl	8016c9c <LEAF_clip>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <FXDiodeParam1+0x48>)
 80036b8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80036bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 80036c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 80036c4:	f013 b846 	b.w	8016754 <tDiodeFilter_setFreqFast>
 80036c8:	429a0000 	.word	0x429a0000
 80036cc:	420fb824 	.word	0x420fb824
 80036d0:	457ff000 	.word	0x457ff000
 80036d4:	00000000 	.word	0x00000000
 80036d8:	200008b4 	.word	0x200008b4

080036dc <FXPeakParam1>:
void FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80036dc:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 80036e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003714 <FXPeakParam1+0x38>
 80036e4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8003718 <FXPeakParam1+0x3c>
 80036e8:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800371c <FXPeakParam1+0x40>
 80036ec:	eee0 0a07 	vfma.f32	s1, s0, s14
 80036f0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003720 <FXPeakParam1+0x44>
{
 80036f4:	b538      	push	{r3, r4, r5, lr}
 80036f6:	4605      	mov	r5, r0
 80036f8:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80036fa:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80036fe:	f013 facd 	bl	8016c9c <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 8003702:	4b08      	ldr	r3, [pc, #32]	; (8003724 <FXPeakParam1+0x48>)
 8003704:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8003708:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 800370c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 8003710:	f012 b9ec 	b.w	8015aec <tVZFilter_setFreqFast>
 8003714:	429a0000 	.word	0x429a0000
 8003718:	420fb824 	.word	0x420fb824
 800371c:	457ff000 	.word	0x457ff000
 8003720:	00000000 	.word	0x00000000
 8003724:	20000874 	.word	0x20000874

08003728 <FXLowShelfParam1>:
void FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003728:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 800372c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003760 <FXLowShelfParam1+0x38>
 8003730:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8003764 <FXLowShelfParam1+0x3c>
 8003734:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003768 <FXLowShelfParam1+0x40>
 8003738:	eee0 0a07 	vfma.f32	s1, s0, s14
 800373c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800376c <FXLowShelfParam1+0x44>
{
 8003740:	b538      	push	{r3, r4, r5, lr}
 8003742:	4605      	mov	r5, r0
 8003744:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003746:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800374a:	f013 faa7 	bl	8016c9c <LEAF_clip>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <FXLowShelfParam1+0x48>)
 8003750:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8003754:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 8003758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 800375c:	f012 b9c6 	b.w	8015aec <tVZFilter_setFreqFast>
 8003760:	429a0000 	.word	0x429a0000
 8003764:	420fb824 	.word	0x420fb824
 8003768:	457ff000 	.word	0x457ff000
 800376c:	00000000 	.word	0x00000000
 8003770:	20000854 	.word	0x20000854

08003774 <FXHighShelfParam1>:
void FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003774:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 8003778:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80037ac <FXHighShelfParam1+0x38>
 800377c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80037b0 <FXHighShelfParam1+0x3c>
 8003780:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80037b4 <FXHighShelfParam1+0x40>
 8003784:	eee0 0a07 	vfma.f32	s1, s0, s14
 8003788:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80037b8 <FXHighShelfParam1+0x44>
{
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	4605      	mov	r5, r0
 8003790:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003792:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003796:	f013 fa81 	bl	8016c9c <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <FXHighShelfParam1+0x48>)
 800379c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80037a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 80037a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 80037a8:	f012 b9a0 	b.w	8015aec <tVZFilter_setFreqFast>
 80037ac:	429a0000 	.word	0x429a0000
 80037b0:	420fb824 	.word	0x420fb824
 80037b4:	457ff000 	.word	0x457ff000
 80037b8:	00000000 	.word	0x00000000
 80037bc:	20000834 	.word	0x20000834

080037c0 <FXNotchParam1>:
void FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80037c0:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 80037c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80037f8 <FXNotchParam1+0x38>
 80037c8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80037fc <FXNotchParam1+0x3c>
 80037cc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003800 <FXNotchParam1+0x40>
 80037d0:	eee0 0a07 	vfma.f32	s1, s0, s14
 80037d4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003804 <FXNotchParam1+0x44>
{
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4605      	mov	r5, r0
 80037dc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80037de:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80037e2:	f013 fa5b 	bl	8016c9c <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <FXNotchParam1+0x48>)
 80037e8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80037ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 80037f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 80037f4:	f012 b97a 	b.w	8015aec <tVZFilter_setFreqFast>
 80037f8:	429a0000 	.word	0x429a0000
 80037fc:	420fb824 	.word	0x420fb824
 8003800:	457ff000 	.word	0x457ff000
 8003804:	00000000 	.word	0x00000000
 8003808:	20000814 	.word	0x20000814

0800380c <FXLadderParam1>:
void FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800380c:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 8003810:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003844 <FXLadderParam1+0x38>
 8003814:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8003848 <FXLadderParam1+0x3c>
 8003818:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800384c <FXLadderParam1+0x40>
 800381c:	eee0 0a07 	vfma.f32	s1, s0, s14
 8003820:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003850 <FXLadderParam1+0x44>
{
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4605      	mov	r5, r0
 8003828:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800382a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800382e:	f013 fa35 	bl	8016c9c <LEAF_clip>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 8003832:	4b08      	ldr	r3, [pc, #32]	; (8003854 <FXLadderParam1+0x48>)
 8003834:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8003838:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 800383c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 8003840:	f013 b928 	b.w	8016a94 <tLadderFilter_setFreqFast>
 8003844:	429a0000 	.word	0x429a0000
 8003848:	420fb824 	.word	0x420fb824
 800384c:	457ff000 	.word	0x457ff000
 8003850:	00000000 	.word	0x00000000
 8003854:	200007f4 	.word	0x200007f4

08003858 <FXPeakParam2>:

//gain params

void FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003858:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 800385c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003884 <FXPeakParam2+0x2c>
{
 8003860:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003862:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8003866:	4605      	mov	r5, r0
 8003868:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800386a:	eeb0 0a67 	vmov.f32	s0, s15
 800386e:	f013 fbb5 	bl	8016fdc <fasterdbtoa>
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <FXPeakParam2+0x30>)
 8003874:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8003878:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 800387c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003880:	f012 ba92 	b.w	8015da8 <tVZFilter_setGain>
 8003884:	42480000 	.word	0x42480000
 8003888:	20000874 	.word	0x20000874

0800388c <FXLowShelfParam2>:

void FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800388c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8003890:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80038b8 <FXLowShelfParam2+0x2c>
{
 8003894:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003896:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800389a:	4605      	mov	r5, r0
 800389c:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800389e:	eeb0 0a67 	vmov.f32	s0, s15
 80038a2:	f013 fb9b 	bl	8016fdc <fasterdbtoa>
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <FXLowShelfParam2+0x30>)
 80038a8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80038ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 80038b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038b4:	f012 ba78 	b.w	8015da8 <tVZFilter_setGain>
 80038b8:	42480000 	.word	0x42480000
 80038bc:	20000854 	.word	0x20000854

080038c0 <FXHighShelfParam2>:

void FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038c0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80038c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80038ec <FXHighShelfParam2+0x2c>
{
 80038c8:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80038ce:	4605      	mov	r5, r0
 80038d0:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038d2:	eeb0 0a67 	vmov.f32	s0, s15
 80038d6:	f013 fb81 	bl	8016fdc <fasterdbtoa>
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <FXHighShelfParam2+0x30>)
 80038dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 80038e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 80038e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038e8:	f012 ba5e 	b.w	8015da8 <tVZFilter_setGain>
 80038ec:	42480000 	.word	0x42480000
 80038f0:	20000834 	.word	0x20000834

080038f4 <FXNotchParam2>:

void FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038f4:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80038f8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003920 <FXNotchParam2+0x2c>
{
 80038fc:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038fe:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8003902:	4605      	mov	r5, r0
 8003904:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003906:	eeb0 0a67 	vmov.f32	s0, s15
 800390a:	f013 fb67 	bl	8016fdc <fasterdbtoa>
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <FXNotchParam2+0x30>)
 8003910:	eb04 0045 	add.w	r0, r4, r5, lsl #1
 8003914:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
 8003918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800391c:	f012 ba44 	b.w	8015da8 <tVZFilter_setGain>
 8003920:	42480000 	.word	0x42480000
 8003924:	20000814 	.word	0x20000814

08003928 <FXLowpassParam3>:
//resonance params
void FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <FXLowpassParam3+0x10>)
 800392a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800392e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003932:	f011 be31 	b.w	8015598 <tSVF_setQ>
 8003936:	bf00      	nop
 8003938:	200008f4 	.word	0x200008f4

0800393c <FXHighpassParam3>:
}

void FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <FXHighpassParam3+0x10>)
 800393e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003942:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003946:	f011 be27 	b.w	8015598 <tSVF_setQ>
 800394a:	bf00      	nop
 800394c:	200008d4 	.word	0x200008d4

08003950 <FXBandpassParam3>:
}

void FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <FXBandpassParam3+0x10>)
 8003952:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003956:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800395a:	f011 be1d 	b.w	8015598 <tSVF_setQ>
 800395e:	bf00      	nop
 8003960:	20000894 	.word	0x20000894

08003964 <FXDiodeParam3>:
}

void FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <FXDiodeParam3+0x10>)
 8003966:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800396a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800396e:	f012 bf11 	b.w	8016794 <tDiodeFilter_setQ>
 8003972:	bf00      	nop
 8003974:	200008b4 	.word	0x200008b4

08003978 <FXPeakParam3>:
}


void FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <FXPeakParam3+0x10>)
 800397a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800397e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003982:	f012 ba2d 	b.w	8015de0 <tVZFilter_setResonance>
 8003986:	bf00      	nop
 8003988:	20000874 	.word	0x20000874

0800398c <FXLowShelfParam3>:
}


void FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <FXLowShelfParam3+0x10>)
 800398e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003992:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003996:	f012 ba23 	b.w	8015de0 <tVZFilter_setResonance>
 800399a:	bf00      	nop
 800399c:	20000854 	.word	0x20000854

080039a0 <FXHighShelfParam3>:
}


void FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <FXHighShelfParam3+0x10>)
 80039a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80039a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80039aa:	f012 ba19 	b.w	8015de0 <tVZFilter_setResonance>
 80039ae:	bf00      	nop
 80039b0:	20000834 	.word	0x20000834

080039b4 <FXNotchParam3>:
}


void FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <FXNotchParam3+0x10>)
 80039b6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80039ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80039be:	f012 ba0f 	b.w	8015de0 <tVZFilter_setResonance>
 80039c2:	bf00      	nop
 80039c4:	20000814 	.word	0x20000814

080039c8 <FXLadderParam3>:
}


void FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <FXLadderParam3+0x10>)
 80039ca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80039ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80039d2:	f013 b883 	b.w	8016adc <tLadderFilter_setQ>
 80039d6:	bf00      	nop
 80039d8:	200007f4 	.word	0x200007f4

080039dc <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
 80039dc:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 80039de:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 80039e2:	008c      	lsls	r4, r1, #2
{
 80039e4:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 80039e8:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
 80039ec:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 80039f0:	eee0 7a68 	vfms.f32	s15, s0, s17
 80039f4:	eeb0 0a67 	vmov.f32	s0, s15
 80039f8:	f013 fae8 	bl	8016fcc <fastdbtoa>
 80039fc:	4808      	ldr	r0, [pc, #32]	; (8003a20 <noiseSetTilt+0x44>)
 80039fe:	4420      	add	r0, r4
 8003a00:	f012 f9d2 	bl	8015da8 <tVZFilter_setGain>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 8003a04:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8003a08:	eea8 0a28 	vfma.f32	s0, s16, s17
 8003a0c:	f013 fade 	bl	8016fcc <fastdbtoa>
 8003a10:	4804      	ldr	r0, [pc, #16]	; (8003a24 <noiseSetTilt+0x48>)
}
 8003a12:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 8003a16:	4420      	add	r0, r4
}
 8003a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 8003a1c:	f012 b9c4 	b.w	8015da8 <tVZFilter_setGain>
 8003a20:	2000543c 	.word	0x2000543c
 8003a24:	20005444 	.word	0x20005444

08003a28 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8003a28:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8003a2c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003a50 <noiseSetGain+0x28>
{
 8003a30:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8003a32:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8003a36:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8003a38:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3c:	f013 fac6 	bl	8016fcc <fastdbtoa>
 8003a40:	4804      	ldr	r0, [pc, #16]	; (8003a54 <noiseSetGain+0x2c>)
 8003a42:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8003a4a:	f012 b9ad 	b.w	8015da8 <tVZFilter_setGain>
 8003a4e:	bf00      	nop
 8003a50:	42080000 	.word	0x42080000
 8003a54:	2000541c 	.word	0x2000541c

08003a58 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003a58:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
 8003a5c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003a8c <noiseSetFreq+0x34>
 8003a60:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003a90 <noiseSetFreq+0x38>
 8003a64:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8003a94 <noiseSetFreq+0x3c>
 8003a68:	eee0 0a07 	vfma.f32	s1, s0, s14
 8003a6c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003a98 <noiseSetFreq+0x40>
{
 8003a70:	b510      	push	{r4, lr}
 8003a72:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003a74:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003a78:	f013 f910 	bl	8016c9c <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 8003a7c:	4807      	ldr	r0, [pc, #28]	; (8003a9c <noiseSetFreq+0x44>)
 8003a7e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 8003a86:	f012 b831 	b.w	8015aec <tVZFilter_setFreqFast>
 8003a8a:	bf00      	nop
 8003a8c:	429a0000 	.word	0x429a0000
 8003a90:	420fb824 	.word	0x420fb824
 8003a94:	457ff000 	.word	0x457ff000
 8003a98:	00000000 	.word	0x00000000
 8003a9c:	2000541c 	.word	0x2000541c

08003aa0 <noise_tick>:
uint32_t timeNoise = 0;
uint32_t timeRandom = 0;


void __ATTR_ITCMRAM noise_tick(int string)
{
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tempCount9 = DWT->CYCCNT;
	float enabled = params[Noise].realVal[string];
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
 8003aa2:	4d27      	ldr	r5, [pc, #156]	; (8003b40 <noise_tick+0xa0>)
{
 8003aa4:	4604      	mov	r4, r0
	float sample = random_values[randomValPointer++];
 8003aa6:	4927      	ldr	r1, [pc, #156]	; (8003b44 <noise_tick+0xa4>)
	float enabled = params[Noise].realVal[string];
 8003aa8:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <noise_tick+0xa8>)
	uint32_t tempCount9 = DWT->CYCCNT;
 8003aaa:	4f28      	ldr	r7, [pc, #160]	; (8003b4c <noise_tick+0xac>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8003aac:	4828      	ldr	r0, [pc, #160]	; (8003b50 <noise_tick+0xb0>)
{
 8003aae:	ed2d 8b04 	vpush	{d8-d9}
	float sample = random_values[randomValPointer++];
 8003ab2:	782a      	ldrb	r2, [r5, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8003ab4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	uint32_t tempCount9 = DWT->CYCCNT;
 8003ab8:	687e      	ldr	r6, [r7, #4]
	float sample = random_values[randomValPointer++];
 8003aba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003abe:	3201      	adds	r2, #1
 8003ac0:	702a      	strb	r2, [r5, #0]
	float enabled = params[Noise].realVal[string];
 8003ac2:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8003ac6:	ed91 0a00 	vldr	s0, [r1]
 8003aca:	00a5      	lsls	r5, r4, #2
	float enabled = params[Noise].realVal[string];
 8003acc:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float filterSend = params[NoiseFilterSend].realVal[string];
 8003ad0:	ed92 8aa3 	vldr	s16, [r2, #652]	; 0x28c
	float amp = params[NoiseAmp].realVal[string];
 8003ad4:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8003ad8:	f011 fdea 	bl	80156b0 <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
 8003adc:	481d      	ldr	r0, [pc, #116]	; (8003b54 <noise_tick+0xb4>)
 8003ade:	4428      	add	r0, r5
 8003ae0:	f011 fde6 	bl	80156b0 <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
 8003ae4:	481c      	ldr	r0, [pc, #112]	; (8003b58 <noise_tick+0xb8>)
 8003ae6:	4428      	add	r0, r5
 8003ae8:	f011 fde2 	bl	80156b0 <tVZFilter_tickEfficient>
	amp = amp < 0.f ? 0.f : amp;
 8003aec:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8003b5c <noise_tick+0xbc>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
 8003af0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
 8003af4:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <noise_tick+0xc0>)
	amp = amp < 0.f ? 0.f : amp;
 8003af6:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
 8003afa:	ee28 0a80 	vmul.f32	s0, s17, s0
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8003afe:	ee29 7a08 	vmul.f32	s14, s18, s16
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
 8003b02:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8003b06:	ee37 8ac8 	vsub.f32	s16, s15, s16

	uint32_t tempCount10 = DWT->CYCCNT;
	timeRandom = tempCount10-tempCount9;
 8003b0a:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <noise_tick+0xc4>)
	float normSample = (sample + 1.f) * 0.5f;
 8003b0c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003b10:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8003b14:	ee28 8a09 	vmul.f32	s16, s16, s18
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8003b18:	ee27 7a00 	vmul.f32	s14, s14, s0
	float normSample = (sample + 1.f) * 0.5f;
 8003b1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8003b20:	ee28 0a00 	vmul.f32	s0, s16, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
 8003b24:	edc3 7a06 	vstr	s15, [r3, #24]
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <noise_tick+0xc8>)
 8003b2a:	441d      	add	r5, r3
 8003b2c:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8003b30:	ed85 0a02 	vstr	s0, [r5, #8]
	uint32_t tempCount10 = DWT->CYCCNT;
 8003b34:	687b      	ldr	r3, [r7, #4]
	timeRandom = tempCount10-tempCount9;
 8003b36:	1b9b      	subs	r3, r3, r6
 8003b38:	6013      	str	r3, [r2, #0]
}
 8003b3a:	ecbd 8b04 	vpop	{d8-d9}
 8003b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b40:	200059cc 	.word	0x200059cc
 8003b44:	20016cdc 	.word	0x20016cdc
 8003b48:	20015bcc 	.word	0x20015bcc
 8003b4c:	e0001000 	.word	0xe0001000
 8003b50:	2000543c 	.word	0x2000543c
 8003b54:	20005444 	.word	0x20005444
 8003b58:	2000541c 	.word	0x2000541c
 8003b5c:	00000000 	.word	0x00000000
 8003b60:	20012dac 	.word	0x20012dac
 8003b64:	20012f30 	.word	0x20012f30
 8003b68:	2000542c 	.word	0x2000542c

08003b6c <audioTickL>:
{
 8003b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interrupted = 0;
 8003b70:	2200      	movs	r2, #0
 8003b72:	49c3      	ldr	r1, [pc, #780]	; (8003e80 <audioTickL+0x314>)
	uint32_t tempCount5 = DWT->CYCCNT;
 8003b74:	4bc3      	ldr	r3, [pc, #780]	; (8003e84 <audioTickL+0x318>)
 8003b76:	4dc4      	ldr	r5, [pc, #784]	; (8003e88 <audioTickL+0x31c>)
 8003b78:	4ec4      	ldr	r6, [pc, #784]	; (8003e8c <audioTickL+0x320>)
 8003b7a:	f105 0830 	add.w	r8, r5, #48	; 0x30
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 8003b7e:	4cc4      	ldr	r4, [pc, #784]	; (8003e90 <audioTickL+0x324>)
{
 8003b80:	ed2d 8b08 	vpush	{d8-d11}
 8003b84:	b08d      	sub	sp, #52	; 0x34
 8003b86:	af00      	add	r7, sp, #0
	interrupted = 0;
 8003b88:	700a      	strb	r2, [r1, #0]
	uint32_t tempCount5 = DWT->CYCCNT;
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	607b      	str	r3, [r7, #4]
	tickMappings();
 8003b8e:	f7fe fc5b 	bl	8002448 <tickMappings>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 8003b92:	48c0      	ldr	r0, [pc, #768]	; (8003e94 <audioTickL+0x328>)
 8003b94:	f011 fad4 	bl	8015140 <tExpSmooth_tick>
 8003b98:	eeb0 8a40 	vmov.f32	s16, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f011 facf 	bl	8015140 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
 8003ba2:	4bbd      	ldr	r3, [pc, #756]	; (8003e98 <audioTickL+0x32c>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8003ba4:	eca5 0a01 	vstmia	r5!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	b12b      	cbz	r3, 8003bb8 <audioTickL+0x4c>
 8003bac:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
 8003bae:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
 8003bb2:	d001      	beq.n	8003bb8 <audioTickL+0x4c>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
 8003bb4:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
 8003bb8:	4545      	cmp	r5, r8
 8003bba:	f106 0604 	add.w	r6, r6, #4
 8003bbe:	f104 0408 	add.w	r4, r4, #8
 8003bc2:	d1eb      	bne.n	8003b9c <audioTickL+0x30>
	float note[numStringsThisBoard];
 8003bc4:	009a      	lsls	r2, r3, #2
 8003bc6:	3207      	adds	r2, #7
 8003bc8:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
 8003bcc:	ebad 0d02 	sub.w	sp, sp, r2
 8003bd0:	466a      	mov	r2, sp
	for (int v = 0; v < numStringsThisBoard; v++)
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 824f 	beq.w	8004076 <audioTickL+0x50a>
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003bd8:	ed9f aab0 	vldr	s20, [pc, #704]	; 8003e9c <audioTickL+0x330>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	eddf 7ab0 	vldr	s15, [pc, #704]	; 8003ea0 <audioTickL+0x334>
 8003be2:	eef0 aa4a 	vmov.f32	s21, s20
 8003be6:	623a      	str	r2, [r7, #32]
 8003be8:	4aae      	ldr	r2, [pc, #696]	; (8003ea4 <audioTickL+0x338>)
	for (int v = 0; v < numStringsThisBoard; v++)
 8003bea:	469a      	mov	sl, r3
	float masterSample = 0.0f;
 8003bec:	eddf 8aae 	vldr	s17, [pc, #696]	; 8003ea8 <audioTickL+0x33c>
 8003bf0:	617a      	str	r2, [r7, #20]
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003bf2:	eee8 aa27 	vfma.f32	s21, s16, s15
 8003bf6:	4aad      	ldr	r2, [pc, #692]	; (8003eac <audioTickL+0x340>)
		if (note[v] < 0.0f)
 8003bf8:	eeb0 9a68 	vmov.f32	s18, s17
 8003bfc:	f8df b304 	ldr.w	fp, [pc, #772]	; 8003f04 <audioTickL+0x398>
 8003c00:	61fa      	str	r2, [r7, #28]
 8003c02:	4aab      	ldr	r2, [pc, #684]	; (8003eb0 <audioTickL+0x344>)
 8003c04:	eddf 9aab 	vldr	s19, [pc, #684]	; 8003eb4 <audioTickL+0x348>
 8003c08:	613a      	str	r2, [r7, #16]
 8003c0a:	4aab      	ldr	r2, [pc, #684]	; (8003eb8 <audioTickL+0x34c>)
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0e:	61ba      	str	r2, [r7, #24]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	ecb3 0a01 	vldmia	r3!, {s0}
 8003c18:	617b      	str	r3, [r7, #20]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003c1a:	4ba8      	ldr	r3, [pc, #672]	; (8003ebc <audioTickL+0x350>)
 8003c1c:	edd3 7a00 	vldr	s15, [r3]
 8003c20:	4ba7      	ldr	r3, [pc, #668]	; (8003ec0 <audioTickL+0x354>)
 8003c22:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8003c26:	4ba7      	ldr	r3, [pc, #668]	; (8003ec4 <audioTickL+0x358>)
 8003c28:	4413      	add	r3, r2
 8003c2a:	edd3 6a00 	vldr	s13, [r3]
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	ee30 0a26 	vadd.f32	s0, s0, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003c34:	ee70 7a67 	vsub.f32	s15, s0, s15
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8003c38:	eca3 0a01 	vstmia	r3!, {s0}
		if (note[v] < 0.0f)
 8003c3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8003c40:	623b      	str	r3, [r7, #32]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003c42:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (note[v] < 0.0f)
 8003c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003c4a:	edcb 7a1a 	vstr	s15, [fp, #104]	; 0x68
		if (note[v] < 0.0f)
 8003c4e:	f100 8196 	bmi.w	8003f7e <audioTickL+0x412>
 8003c52:	ed03 0a01 	vstr	s0, [r3, #-4]
		if (note[v] > 127.0f)
 8003c56:	fe80 8a69 	vminnm.f32	s16, s0, s19
	interruptChecker = 0;
 8003c5a:	4a9b      	ldr	r2, [pc, #620]	; (8003ec8 <audioTickL+0x35c>)
 8003c5c:	f1ab 0520 	sub.w	r5, fp, #32
 8003c60:	ed03 8a01 	vstr	s16, [r3, #-4]
 8003c64:	2300      	movs	r3, #0
	uint32_t tempCount1 = DWT->CYCCNT;
 8003c66:	462e      	mov	r6, r5
	interruptChecker = 0;
 8003c68:	7013      	strb	r3, [r2, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8003c6a:	4b86      	ldr	r3, [pc, #536]	; (8003e84 <audioTickL+0x318>)
 8003c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6e:	685c      	ldr	r4, [r3, #4]
	for (int v = 0; v < NUM_ENV; v++)
 8003c70:	4b96      	ldr	r3, [pc, #600]	; (8003ecc <audioTickL+0x360>)
 8003c72:	eb03 0802 	add.w	r8, r3, r2
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8003c76:	4640      	mov	r0, r8
	for (int v = 0; v < NUM_ENV; v++)
 8003c78:	3608      	adds	r6, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8003c7a:	f011 f93f 	bl	8014efc <tADSRT_tickNoInterp>
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
 8003c7e:	ed86 0a26 	vstr	s0, [r6, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
 8003c82:	455e      	cmp	r6, fp
 8003c84:	f108 0808 	add.w	r8, r8, #8
 8003c88:	d1f5      	bne.n	8003c76 <audioTickL+0x10a>
	timeEnv = DWT->CYCCNT - tempCount1;
 8003c8a:	4a7e      	ldr	r2, [pc, #504]	; (8003e84 <audioTickL+0x318>)
 8003c8c:	4990      	ldr	r1, [pc, #576]	; (8003ed0 <audioTickL+0x364>)
 8003c8e:	6853      	ldr	r3, [r2, #4]
 8003c90:	4e90      	ldr	r6, [pc, #576]	; (8003ed4 <audioTickL+0x368>)
 8003c92:	1b1b      	subs	r3, r3, r4
	interruptChecker = 0;
 8003c94:	2400      	movs	r4, #0
	timeEnv = DWT->CYCCNT - tempCount1;
 8003c96:	600b      	str	r3, [r1, #0]
	interruptChecker = 0;
 8003c98:	4b8b      	ldr	r3, [pc, #556]	; (8003ec8 <audioTickL+0x35c>)
 8003c9a:	701c      	strb	r4, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8003c9c:	f8d2 8004 	ldr.w	r8, [r2, #4]
		if (lfoOn[i])
 8003ca0:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	4652      	mov	r2, sl
 8003ca8:	f107 0028 	add.w	r0, r7, #40	; 0x28
		float sample = 0.0f;
 8003cac:	ed87 9a0a 	vstr	s18, [r7, #40]	; 0x28
		if (lfoOn[i])
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 815c 	beq.w	8003f6e <audioTickL+0x402>
			lfoShapeTick[i](&sample,i, string);
 8003cb6:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <audioTickL+0x36c>)
	for (int i = 0; i < NUM_LFOS; i++)
 8003cb8:	3508      	adds	r5, #8
			lfoShapeTick[i](&sample,i, string);
 8003cba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
 8003cbe:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
 8003cc0:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
	for (int i = 0; i < NUM_LFOS; i++)
 8003cc4:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8003cc6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
 8003cca:	d1e9      	bne.n	8003ca0 <audioTickL+0x134>
	timeLFO = DWT->CYCCNT - tempCount1;
 8003ccc:	4b6d      	ldr	r3, [pc, #436]	; (8003e84 <audioTickL+0x318>)
		oscillator_tick(note[v], v);
 8003cce:	eeb0 0a48 	vmov.f32	s0, s16
	timeLFO = DWT->CYCCNT - tempCount1;
 8003cd2:	4a82      	ldr	r2, [pc, #520]	; (8003edc <audioTickL+0x370>)
		oscillator_tick(note[v], v);
 8003cd4:	4650      	mov	r0, sl
	timeLFO = DWT->CYCCNT - tempCount1;
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	eba3 0308 	sub.w	r3, r3, r8
 8003cdc:	6013      	str	r3, [r2, #0]
		oscillator_tick(note[v], v);
 8003cde:	f7fd fd43 	bl	8001768 <oscillator_tick>
		noise_tick(v);
 8003ce2:	4650      	mov	r0, sl
 8003ce4:	f7ff fedc 	bl	8003aa0 <noise_tick>
		for (int i = 0; i < oscToTick; i++)
 8003ce8:	4b7d      	ldr	r3, [pc, #500]	; (8003ee0 <audioTickL+0x374>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 81ad 	beq.w	800404c <audioTickL+0x4e0>
			filterSamps[0] += oscOuts[0][i][v];
 8003cf2:	69ba      	ldr	r2, [r7, #24]
		for (int i = 0; i < oscToTick; i++)
 8003cf4:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
 8003cf6:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
 8003cfa:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
 8003cfe:	d011      	beq.n	8003d24 <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
 8003d00:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
 8003d04:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
 8003d06:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
 8003d0a:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8003d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
 8003d12:	d007      	beq.n	8003d24 <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
 8003d14:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
 8003d18:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
 8003d1c:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8003d20:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
 8003d24:	693b      	ldr	r3, [r7, #16]
		sample = filter_tick(&filterSamps[0], note[v], v);
 8003d26:	eeb0 0a48 	vmov.f32	s0, s16
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	f107 0028 	add.w	r0, r7, #40	; 0x28
		filterSamps[0] += noiseOuts[0][v];
 8003d30:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
 8003d34:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
 8003d38:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003d3c:	613b      	str	r3, [r7, #16]
		filterSamps[1] += noiseOuts[1][v];
 8003d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
 8003d42:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
		filterSamps[1] += noiseOuts[1][v];
 8003d46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		sample = filter_tick(&filterSamps[0], note[v], v);
 8003d4a:	f7fd ff4d 	bl	8001be8 <filter_tick>
		if (fxPre)
 8003d4e:	4b65      	ldr	r3, [pc, #404]	; (8003ee4 <audioTickL+0x378>)
		sample = filter_tick(&filterSamps[0], note[v], v);
 8003d50:	eeb0 8a40 	vmov.f32	s16, s0
		if (fxPre)
 8003d54:	781a      	ldrb	r2, [r3, #0]
 8003d56:	b122      	cbz	r2, 8003d62 <audioTickL+0x1f6>
			sample *= amplitude[v];
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
 8003d62:	4b61      	ldr	r3, [pc, #388]	; (8003ee8 <audioTickL+0x37c>)
 8003d64:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCount1 = DWT->CYCCNT;
 8003d66:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <audioTickL+0x318>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]
		if (overSampled)
 8003d6c:	2c00      	cmp	r4, #0
 8003d6e:	f040 810b 	bne.w	8003f88 <audioTickL+0x41c>
			for (int i = 0; i < numEffectToTick; i++)
 8003d72:	4b5e      	ldr	r3, [pc, #376]	; (8003eec <audioTickL+0x380>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	b32b      	cbz	r3, 8003dc4 <audioTickL+0x258>
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8003d78:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8003d7c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8003f08 <audioTickL+0x39c>
			for (int i = 0; i < numEffectToTick; i++)
 8003d80:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8003d82:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8003f0c <audioTickL+0x3a0>
 8003d86:	4d5a      	ldr	r5, [pc, #360]	; (8003ef0 <audioTickL+0x384>)
				sample = effectTick[i](sample, i, v); //run the effect
 8003d88:	eeb0 0a48 	vmov.f32	s0, s16
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f858 3b04 	ldr.w	r3, [r8], #4
 8003d92:	4651      	mov	r1, sl
 8003d94:	4798      	blx	r3
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8003d96:	eb09 0306 	add.w	r3, r9, r6
			for (int i = 0; i < numEffectToTick; i++)
 8003d9a:	3401      	adds	r4, #1
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8003d9c:	ed93 7a00 	vldr	s14, [r3]
				sample *= fxPostGain[i][v];
 8003da0:	19ab      	adds	r3, r5, r6
			for (int i = 0; i < numEffectToTick; i++)
 8003da2:	3608      	adds	r6, #8
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8003da4:	ee67 7a00 	vmul.f32	s15, s14, s0
 8003da8:	ee3b 7a47 	vsub.f32	s14, s22, s14
 8003dac:	eee7 7a08 	vfma.f32	s15, s14, s16
				sample *= fxPostGain[i][v];
 8003db0:	ed93 8a00 	vldr	s16, [r3]
			for (int i = 0; i < numEffectToTick; i++)
 8003db4:	4b4d      	ldr	r3, [pc, #308]	; (8003eec <audioTickL+0x380>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	42a3      	cmp	r3, r4
				sample *= fxPostGain[i][v];
 8003dba:	ee27 8a88 	vmul.f32	s16, s15, s16
			for (int i = 0; i < numEffectToTick; i++)
 8003dbe:	dce3      	bgt.n	8003d88 <audioTickL+0x21c>
		if (!fxPre)
 8003dc0:	4b48      	ldr	r3, [pc, #288]	; (8003ee4 <audioTickL+0x378>)
 8003dc2:	781a      	ldrb	r2, [r3, #0]
		uint32_t tempCount2 = DWT->CYCCNT;
 8003dc4:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <audioTickL+0x318>)
		oversampleCount = tempCount2-tempCount1;
 8003dc6:	68f9      	ldr	r1, [r7, #12]
		uint32_t tempCount2 = DWT->CYCCNT;
 8003dc8:	685b      	ldr	r3, [r3, #4]
		oversampleCount = tempCount2-tempCount1;
 8003dca:	1a5b      	subs	r3, r3, r1
 8003dcc:	4949      	ldr	r1, [pc, #292]	; (8003ef4 <audioTickL+0x388>)
 8003dce:	600b      	str	r3, [r1, #0]
		if (!fxPre)
 8003dd0:	b922      	cbnz	r2, 8003ddc <audioTickL+0x270>
			sample *= amplitude[v];
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	edd3 7a00 	vldr	s15, [r3]
 8003dd8:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
 8003dde:	eeb0 0a48 	vmov.f32	s0, s16
 8003de2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
	for (int v = 0; v < numStringsThisBoard; v++)
 8003de4:	f10a 0a01 	add.w	sl, sl, #1
 8003de8:	3304      	adds	r3, #4
 8003dea:	f10b 0b04 	add.w	fp, fp, #4
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	3304      	adds	r3, #4
 8003df4:	61bb      	str	r3, [r7, #24]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
 8003df6:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <audioTickL+0x38c>)
 8003df8:	1918      	adds	r0, r3, r4
 8003dfa:	f011 fb61 	bl	80154c0 <tSVF_tick>
		masterSample += sample;
 8003dfe:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003e02:	eeb0 1a69 	vmov.f32	s2, s19
 8003e06:	eef0 0a6a 	vmov.f32	s1, s21
		masterSample += sample;
 8003e0a:	eee0 8a27 	vfma.f32	s17, s0, s15
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003e0e:	eeb0 0a4a 	vmov.f32	s0, s20
 8003e12:	f012 ff43 	bl	8016c9c <LEAF_clip>
 8003e16:	eef0 7a40 	vmov.f32	s15, s0
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8003e1a:	4938      	ldr	r1, [pc, #224]	; (8003efc <audioTickL+0x390>)
		float omAlpha = 1.0f - alpha;
 8003e1c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8003e20:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
		int volIdxInt = (int) volIdx;
 8003e24:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float omAlpha = 1.0f - alpha;
 8003e28:	ee31 7a67 	vsub.f32	s14, s2, s15
		int volIdxInt = (int) volIdx;
 8003e2c:	ee16 2a90 	vmov	r2, s13
		float alpha = volIdx-volIdxInt;
 8003e30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
 8003e34:	1c53      	adds	r3, r2, #1
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8003e36:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		float alpha = volIdx-volIdxInt;
 8003e3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
 8003e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		float omAlpha = 1.0f - alpha;
 8003e42:	ee37 7a26 	vadd.f32	s14, s14, s13
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8003e46:	edd2 6a00 	vldr	s13, [r2]
 8003e4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003e4e:	ed93 6a00 	vldr	s12, [r3]
		masterSample *= finalMaster[v] ;
 8003e52:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <audioTickL+0x394>)
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8003e54:	ee67 7a86 	vmul.f32	s15, s15, s12
		masterSample *= finalMaster[v] ;
 8003e58:	4423      	add	r3, r4
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8003e5a:	eee6 7a87 	vfma.f32	s15, s13, s14
		masterSample *= finalMaster[v] ;
 8003e5e:	ed93 7a00 	vldr	s14, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
 8003e62:	1d23      	adds	r3, r4, #4
 8003e64:	ee68 8a87 	vmul.f32	s17, s17, s14
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8003e6a:	ee68 0aa7 	vmul.f32	s1, s17, s15
 8003e6e:	f012 ff15 	bl	8016c9c <LEAF_clip>
	for (int v = 0; v < numStringsThisBoard; v++)
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <audioTickL+0x32c>)
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8003e74:	eef0 8a40 	vmov.f32	s17, s0
	for (int v = 0; v < numStringsThisBoard; v++)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	4553      	cmp	r3, sl
 8003e7c:	e048      	b.n	8003f10 <audioTickL+0x3a4>
 8003e7e:	bf00      	nop
 8003e80:	200050b4 	.word	0x200050b4
 8003e84:	e0001000 	.word	0xe0001000
 8003e88:	200050dc 	.word	0x200050dc
 8003e8c:	20005150 	.word	0x20005150
 8003e90:	20012dac 	.word	0x20012dac
 8003e94:	20012f94 	.word	0x20012f94
 8003e98:	20000012 	.word	0x20000012
 8003e9c:	423c0000 	.word	0x423c0000
 8003ea0:	42a00000 	.word	0x42a00000
 8003ea4:	20012eec 	.word	0x20012eec
 8003ea8:	00000000 	.word	0x00000000
 8003eac:	20000a84 	.word	0x20000a84
 8003eb0:	2000542c 	.word	0x2000542c
 8003eb4:	42fe0000 	.word	0x42fe0000
 8003eb8:	20005458 	.word	0x20005458
 8003ebc:	20015bc0 	.word	0x20015bc0
 8003ec0:	20015bbc 	.word	0x20015bbc
 8003ec4:	20012ef4 	.word	0x20012ef4
 8003ec8:	20015205 	.word	0x20015205
 8003ecc:	20004fac 	.word	0x20004fac
 8003ed0:	20012f18 	.word	0x20012f18
 8003ed4:	200051d4 	.word	0x200051d4
 8003ed8:	20005238 	.word	0x20005238
 8003edc:	20012f24 	.word	0x20012f24
 8003ee0:	20000028 	.word	0x20000028
 8003ee4:	20005074 	.word	0x20005074
 8003ee8:	20000029 	.word	0x20000029
 8003eec:	20000010 	.word	0x20000010
 8003ef0:	20005054 	.word	0x20005054
 8003ef4:	20005488 	.word	0x20005488
 8003ef8:	20004ffc 	.word	0x20004ffc
 8003efc:	200004d4 	.word	0x200004d4
 8003f00:	20005004 	.word	0x20005004
 8003f04:	20012dcc 	.word	0x20012dcc
 8003f08:	20004f9c 	.word	0x20004f9c
 8003f0c:	20005034 	.word	0x20005034
 8003f10:	f73f ae7e 	bgt.w	8003c10 <audioTickL+0xa4>
	masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8003f14:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003f18:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003f1c:	eef0 0a68 	vmov.f32	s1, s17
 8003f20:	f012 febc 	bl	8016c9c <LEAF_clip>
	uint32_t tempCount6 = DWT->CYCCNT;
 8003f24:	4b57      	ldr	r3, [pc, #348]	; (8004084 <audioTickL+0x518>)
	timeTick = tempCount6-tempCount5;
 8003f26:	6878      	ldr	r0, [r7, #4]
	if ((timeTick > 10000) && (!interrupted))
 8003f28:	f242 7210 	movw	r2, #10000	; 0x2710
	uint32_t tempCount6 = DWT->CYCCNT;
 8003f2c:	685b      	ldr	r3, [r3, #4]
	timeTick = tempCount6-tempCount5;
 8003f2e:	4956      	ldr	r1, [pc, #344]	; (8004088 <audioTickL+0x51c>)
 8003f30:	1a1b      	subs	r3, r3, r0
	if ((timeTick > 10000) && (!interrupted))
 8003f32:	4293      	cmp	r3, r2
	timeTick = tempCount6-tempCount5;
 8003f34:	600b      	str	r3, [r1, #0]
	if ((timeTick > 10000) && (!interrupted))
 8003f36:	d90b      	bls.n	8003f50 <audioTickL+0x3e4>
 8003f38:	4b54      	ldr	r3, [pc, #336]	; (800408c <audioTickL+0x520>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b943      	cbnz	r3, 8003f50 <audioTickL+0x3e4>
		if (overSampled)
 8003f3e:	4a54      	ldr	r2, [pc, #336]	; (8004090 <audioTickL+0x524>)
 8003f40:	7811      	ldrb	r1, [r2, #0]
 8003f42:	b921      	cbnz	r1, 8003f4e <audioTickL+0x3e2>
		else if (oscToTick > 1)
 8003f44:	4a53      	ldr	r2, [pc, #332]	; (8004094 <audioTickL+0x528>)
 8003f46:	7813      	ldrb	r3, [r2, #0]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d901      	bls.n	8003f50 <audioTickL+0x3e4>
			oscToTick--;
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	7013      	strb	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f;
 8003f50:	4b51      	ldr	r3, [pc, #324]	; (8004098 <audioTickL+0x52c>)
}
 8003f52:	3734      	adds	r7, #52	; 0x34
	return masterSample * audioMasterLevel * 0.98f;
 8003f54:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800409c <audioTickL+0x530>
 8003f58:	edd3 7a00 	vldr	s15, [r3]
 8003f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f60:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 8003f64:	46bd      	mov	sp, r7
 8003f66:	ecbd 8b08 	vpop	{d8-d11}
 8003f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < NUM_LFOS; i++)
 8003f6e:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8003f70:	ed85 9a30 	vstr	s18, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
 8003f74:	3508      	adds	r5, #8
 8003f76:	2c04      	cmp	r4, #4
 8003f78:	f47f ae92 	bne.w	8003ca0 <audioTickL+0x134>
 8003f7c:	e6a6      	b.n	8003ccc <audioTickL+0x160>
			note[v] = 0.0f;
 8003f7e:	eeb0 8a49 	vmov.f32	s16, s18
 8003f82:	ed03 9a01 	vstr	s18, [r3, #-4]
		if (note[v] > 127.0f)
 8003f86:	e668      	b.n	8003c5a <audioTickL+0xee>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
 8003f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8a:	eeb0 0a48 	vmov.f32	s0, s16
 8003f8e:	4b44      	ldr	r3, [pc, #272]	; (80040a0 <audioTickL+0x534>)
 8003f90:	4944      	ldr	r1, [pc, #272]	; (80040a4 <audioTickL+0x538>)
 8003f92:	4413      	add	r3, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	ee0b 3a90 	vmov	s23, r3
 8003f9a:	f010 fb8f 	bl	80146bc <tOversampler_upsample>
			for (int i = 0; i < numEffectToTick; i++)
 8003f9e:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <audioTickL+0x53c>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d06a      	beq.n	800407c <audioTickL+0x510>
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8003fa8:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8003fac:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80040c0 <audioTickL+0x554>
			for (int i = 0; i < numEffectToTick; i++)
 8003fb0:	f04f 0800 	mov.w	r8, #0
 8003fb4:	4d3d      	ldr	r5, [pc, #244]	; (80040ac <audioTickL+0x540>)
 8003fb6:	4499      	add	r9, r3
 8003fb8:	4e3d      	ldr	r6, [pc, #244]	; (80040b0 <audioTickL+0x544>)
 8003fba:	441d      	add	r5, r3
 8003fbc:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <audioTickL+0x538>)
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	4c38      	ldr	r4, [pc, #224]	; (80040a4 <audioTickL+0x538>)
					float dry = oversamplerArray[j]; //store the dry value to mix later
 8003fc2:	ed94 8a00 	vldr	s16, [r4]
					oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	6833      	ldr	r3, [r6, #0]
 8003fca:	4640      	mov	r0, r8
 8003fcc:	eeb0 0a48 	vmov.f32	s0, s16
 8003fd0:	4798      	blx	r3
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8003fd2:	ed99 7a00 	vldr	s14, [r9]
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8003fd6:	edd5 6a00 	vldr	s13, [r5]
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8003fda:	ee60 7a07 	vmul.f32	s15, s0, s14
				for (int j = 0; j < OVERSAMPLE; j++)
 8003fde:	4b35      	ldr	r3, [pc, #212]	; (80040b4 <audioTickL+0x548>)
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8003fe0:	ee3b 7a47 	vsub.f32	s14, s22, s14
 8003fe4:	eee7 7a08 	vfma.f32	s15, s14, s16
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8003fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fec:	ece4 7a01 	vstmia	r4!, {s15}
				for (int j = 0; j < OVERSAMPLE; j++)
 8003ff0:	42a3      	cmp	r3, r4
 8003ff2:	d1e6      	bne.n	8003fc2 <audioTickL+0x456>
			for (int i = 0; i < numEffectToTick; i++)
 8003ff4:	4b2c      	ldr	r3, [pc, #176]	; (80040a8 <audioTickL+0x53c>)
 8003ff6:	f108 0801 	add.w	r8, r8, #1
 8003ffa:	3604      	adds	r6, #4
 8003ffc:	f109 0908 	add.w	r9, r9, #8
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	3508      	adds	r5, #8
 8004004:	4543      	cmp	r3, r8
 8004006:	dcdb      	bgt.n	8003fc0 <audioTickL+0x454>
				if (oversamplerArray[i]> 1.0f)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800400e:	ed93 7a00 	vldr	s14, [r3]
 8004012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401a:	dd24      	ble.n	8004066 <audioTickL+0x4fa>
					oversamplerArray[i]= 1.0f;
 800401c:	edc3 7a00 	vstr	s15, [r3]
				if (oversamplerArray[i]> 1.0f)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004026:	ed93 7a01 	vldr	s14, [r3, #4]
 800402a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004032:	dd10      	ble.n	8004056 <audioTickL+0x4ea>
					oversamplerArray[i]= 1.0f;
 8004034:	edc3 7a01 	vstr	s15, [r3, #4]
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 8004038:	ee1b 0a90 	vmov	r0, s23
 800403c:	4919      	ldr	r1, [pc, #100]	; (80040a4 <audioTickL+0x538>)
 800403e:	f010 fba5 	bl	801478c <tOversampler_downsample>
		if (!fxPre)
 8004042:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <audioTickL+0x54c>)
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 8004044:	eeb0 8a40 	vmov.f32	s16, s0
		if (!fxPre)
 8004048:	781a      	ldrb	r2, [r3, #0]
 800404a:	e6bb      	b.n	8003dc4 <audioTickL+0x258>
		for (int i = 0; i < oscToTick; i++)
 800404c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80040bc <audioTickL+0x550>
 8004050:	eeb0 6a67 	vmov.f32	s12, s15
 8004054:	e666      	b.n	8003d24 <audioTickL+0x1b8>
				else if (oversamplerArray[i] < -1.0f)
 8004056:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800405a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800405e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004062:	d5e9      	bpl.n	8004038 <audioTickL+0x4cc>
 8004064:	e7e6      	b.n	8004034 <audioTickL+0x4c8>
 8004066:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800406a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800406e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004072:	d5d5      	bpl.n	8004020 <audioTickL+0x4b4>
 8004074:	e7d2      	b.n	800401c <audioTickL+0x4b0>
	float masterSample = 0.0f;
 8004076:	eddf 8a11 	vldr	s17, [pc, #68]	; 80040bc <audioTickL+0x550>
 800407a:	e74b      	b.n	8003f14 <audioTickL+0x3a8>
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <audioTickL+0x538>)
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	e7c2      	b.n	8004008 <audioTickL+0x49c>
 8004082:	bf00      	nop
 8004084:	e0001000 	.word	0xe0001000
 8004088:	20012f34 	.word	0x20012f34
 800408c:	200050b4 	.word	0x200050b4
 8004090:	20000029 	.word	0x20000029
 8004094:	20000028 	.word	0x20000028
 8004098:	200006dc 	.word	0x200006dc
 800409c:	3f7ae148 	.word	0x3f7ae148
 80040a0:	20005450 	.word	0x20005450
 80040a4:	2000548c 	.word	0x2000548c
 80040a8:	20000010 	.word	0x20000010
 80040ac:	20005054 	.word	0x20005054
 80040b0:	20004f9c 	.word	0x20004f9c
 80040b4:	20005494 	.word	0x20005494
 80040b8:	20005074 	.word	0x20005074
 80040bc:	00000000 	.word	0x00000000
 80040c0:	20005034 	.word	0x20005034

080040c4 <audioFrame>:
{
 80040c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (newBar)
 80040c8:	4bb3      	ldr	r3, [pc, #716]	; (8004398 <audioFrame+0x2d4>)
	uint32_t tempCountFrame = DWT->CYCCNT;
 80040ca:	49b4      	ldr	r1, [pc, #720]	; (800439c <audioFrame+0x2d8>)
{
 80040cc:	ed2d 8b10 	vpush	{d8-d15}
 80040d0:	b08d      	sub	sp, #52	; 0x34
	if (newBar)
 80040d2:	681a      	ldr	r2, [r3, #0]
{
 80040d4:	9006      	str	r0, [sp, #24]
	uint32_t tempCountFrame = DWT->CYCCNT;
 80040d6:	6849      	ldr	r1, [r1, #4]
 80040d8:	9105      	str	r1, [sp, #20]
	if (newBar)
 80040da:	b1aa      	cbz	r2, 8004108 <audioFrame+0x44>
			barInMIDI[j] = stringPositions[j] * 0.001953125f; // squish 0-65535 to 0-127 range ( / 512)
 80040dc:	49b0      	ldr	r1, [pc, #704]	; (80043a0 <audioFrame+0x2dc>)
		newBar = 0;
 80040de:	2000      	movs	r0, #0
			barInMIDI[j] = stringPositions[j] * 0.001953125f; // squish 0-65535 to 0-127 range ( / 512)
 80040e0:	eddf 6ab0 	vldr	s13, [pc, #704]	; 80043a4 <audioFrame+0x2e0>
 80040e4:	ed91 7a00 	vldr	s14, [r1]
 80040e8:	edd1 7a01 	vldr	s15, [r1, #4]
 80040ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80040f0:	4aad      	ldr	r2, [pc, #692]	; (80043a8 <audioFrame+0x2e4>)
 80040f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		newBar = 0;
 80040f6:	6018      	str	r0, [r3, #0]
			barInMIDI[j] = stringPositions[j] * 0.001953125f; // squish 0-65535 to 0-127 range ( / 512)
 80040f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80040fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004100:	ed82 7a00 	vstr	s14, [r2]
 8004104:	edc2 7a01 	vstr	s15, [r2, #4]
	if (newPluck)
 8004108:	f8df b304 	ldr.w	fp, [pc, #772]	; 8004410 <audioFrame+0x34c>
 800410c:	f8db 3000 	ldr.w	r3, [fp]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d047      	beq.n	80041a4 <audioFrame+0xe0>
		for (int i = 0; i < numStringsThisBoard; i++)
 8004114:	4ba5      	ldr	r3, [pc, #660]	; (80043ac <audioFrame+0x2e8>)
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	2a00      	cmp	r2, #0
 800411a:	d043      	beq.n	80041a4 <audioFrame+0xe0>
 800411c:	4ba4      	ldr	r3, [pc, #656]	; (80043b0 <audioFrame+0x2ec>)
 800411e:	f04f 0900 	mov.w	r9, #0
 8004122:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8004414 <audioFrame+0x350>
 8004126:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8004418 <audioFrame+0x354>
 800412a:	9303      	str	r3, [sp, #12]
 800412c:	4ba1      	ldr	r3, [pc, #644]	; (80043b4 <audioFrame+0x2f0>)
 800412e:	f8cd a004 	str.w	sl, [sp, #4]
 8004132:	46c2      	mov	sl, r8
 8004134:	9304      	str	r3, [sp, #16]
					tLivingString2_setTargetLev(&strings[i], 0.0f);
 8004136:	ed9f aaa0 	vldr	s20, [pc, #640]	; 80043b8 <audioFrame+0x2f4>
 800413a:	4ba0      	ldr	r3, [pc, #640]	; (80043bc <audioFrame+0x2f8>)
					tLivingString2_setDecay(&strings[i], 0.2f);
 800413c:	eddf baa0 	vldr	s23, [pc, #640]	; 80043c0 <audioFrame+0x2fc>
				float amplitz = stringInputs[i] * 0.000025f;
 8004140:	ed9f caa0 	vldr	s24, [pc, #640]	; 80043c4 <audioFrame+0x300>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004144:	eddf aaa0 	vldr	s21, [pc, #640]	; 80043c8 <audioFrame+0x304>
						thisDecay *= 2000.0f * (knobScaled[1] + 0.5f);
 8004148:	ed9f baa0 	vldr	s22, [pc, #640]	; 80043cc <audioFrame+0x308>
 800414c:	4ea0      	ldr	r6, [pc, #640]	; (80043d0 <audioFrame+0x30c>)
 800414e:	4fa1      	ldr	r7, [pc, #644]	; (80043d4 <audioFrame+0x310>)
 8004150:	9302      	str	r3, [sp, #8]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 8004152:	4ba1      	ldr	r3, [pc, #644]	; (80043d8 <audioFrame+0x314>)
 8004154:	6834      	ldr	r4, [r6, #0]
 8004156:	f853 8029 	ldr.w	r8, [r3, r9, lsl #2]
 800415a:	f1b8 0f00 	cmp.w	r8, #0
 800415e:	d15f      	bne.n	8004220 <audioFrame+0x15c>
 8004160:	2c00      	cmp	r4, #0
 8004162:	f040 80a2 	bne.w	80042aa <audioFrame+0x1e6>
			previousStringInputs[i] = stringInputs[i];
 8004166:	4b9c      	ldr	r3, [pc, #624]	; (80043d8 <audioFrame+0x314>)
		for (int i = 0; i < numStringsThisBoard; i++)
 8004168:	3604      	adds	r6, #4
 800416a:	f10a 0a04 	add.w	sl, sl, #4
 800416e:	3704      	adds	r7, #4
			previousStringInputs[i] = stringInputs[i];
 8004170:	f843 4029 	str.w	r4, [r3, r9, lsl #2]
		for (int i = 0; i < numStringsThisBoard; i++)
 8004174:	f109 0901 	add.w	r9, r9, #1
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	454a      	cmp	r2, r9
 800417c:	f103 0304 	add.w	r3, r3, #4
 8004180:	9303      	str	r3, [sp, #12]
 8004182:	9b04      	ldr	r3, [sp, #16]
 8004184:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8004188:	9304      	str	r3, [sp, #16]
 800418a:	9b02      	ldr	r3, [sp, #8]
 800418c:	f103 0304 	add.w	r3, r3, #4
 8004190:	9302      	str	r3, [sp, #8]
 8004192:	9b01      	ldr	r3, [sp, #4]
 8004194:	f103 0304 	add.w	r3, r3, #4
 8004198:	9301      	str	r3, [sp, #4]
			newPluck = 0;
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	f8cb 3000 	str.w	r3, [fp]
		for (int i = 0; i < numStringsThisBoard; i++)
 80041a2:	dcd6      	bgt.n	8004152 <audioFrame+0x8e>
	if ((codecReady)&&(presetReady))
 80041a4:	4b8d      	ldr	r3, [pc, #564]	; (80043dc <audioFrame+0x318>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	b31b      	cbz	r3, 80041f2 <audioFrame+0x12e>
 80041aa:	4b8d      	ldr	r3, [pc, #564]	; (80043e0 <audioFrame+0x31c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	b303      	cbz	r3, 80041f2 <audioFrame+0x12e>
		if (currentActivePreset == 63)
 80041b0:	4b8c      	ldr	r3, [pc, #560]	; (80043e4 <audioFrame+0x320>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b3f      	cmp	r3, #63	; 0x3f
 80041b6:	d060      	beq.n	800427a <audioFrame+0x1b6>
		else if (currentActivePreset == 62)
 80041b8:	2b3e      	cmp	r3, #62	; 0x3e
 80041ba:	f000 812f 	beq.w	800441c <audioFrame+0x358>
		else if (currentActivePreset == 61)
 80041be:	2b3d      	cmp	r3, #61	; 0x3d
 80041c0:	f000 815c 	beq.w	800447c <audioFrame+0x3b8>
 80041c4:	4c88      	ldr	r4, [pc, #544]	; (80043e8 <audioFrame+0x324>)
 80041c6:	9b06      	ldr	r3, [sp, #24]
 80041c8:	f104 0540 	add.w	r5, r4, #64	; 0x40
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 80041cc:	ed9f 8a87 	vldr	s16, [pc, #540]	; 80043ec <audioFrame+0x328>
 80041d0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80041d4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80041d8:	f7ff fcc8 	bl	8003b6c <audioTickL>
 80041dc:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80041e0:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 80041e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80041e6:	42a5      	cmp	r5, r4
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 80041e8:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
 80041ec:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80041f0:	d1f2      	bne.n	80041d8 <audioFrame+0x114>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 80041f2:	487f      	ldr	r0, [pc, #508]	; (80043f0 <audioFrame+0x32c>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
 80041f4:	4b69      	ldr	r3, [pc, #420]	; (800439c <audioFrame+0x2d8>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 80041f6:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	9805      	ldr	r0, [sp, #20]
 80041fe:	497d      	ldr	r1, [pc, #500]	; (80043f4 <audioFrame+0x330>)
 8004200:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8004202:	4a7d      	ldr	r2, [pc, #500]	; (80043f8 <audioFrame+0x334>)
 8004204:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
 8004208:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 800420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004212:	edc2 7a00 	vstr	s15, [r2]
}
 8004216:	b00d      	add	sp, #52	; 0x34
 8004218:	ecbd 8b10 	vpop	{d8-d15}
 800421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
 8004220:	dda1      	ble.n	8004166 <audioFrame+0xa2>
 8004222:	2c00      	cmp	r4, #0
 8004224:	d19f      	bne.n	8004166 <audioFrame+0xa2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8004226:	4622      	mov	r2, r4
 8004228:	2110      	movs	r1, #16
 800422a:	4874      	ldr	r0, [pc, #464]	; (80043fc <audioFrame+0x338>)
 800422c:	f006 fb12 	bl	800a854 <HAL_GPIO_WritePin>
					tADSRT_off(&envs[v][i]);
 8004230:	4638      	mov	r0, r7
 8004232:	f010 fd05 	bl	8014c40 <tADSRT_off>
 8004236:	f107 0008 	add.w	r0, r7, #8
 800423a:	f010 fd01 	bl	8014c40 <tADSRT_off>
 800423e:	f107 0010 	add.w	r0, r7, #16
 8004242:	f010 fcfd 	bl	8014c40 <tADSRT_off>
 8004246:	f107 0018 	add.w	r0, r7, #24
 800424a:	f010 fcf9 	bl	8014c40 <tADSRT_off>
				if (currentActivePreset == 63)
 800424e:	4b65      	ldr	r3, [pc, #404]	; (80043e4 <audioFrame+0x320>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b3f      	cmp	r3, #63	; 0x3f
 8004254:	f000 81ac 	beq.w	80045b0 <audioFrame+0x4ec>
				else if (currentActivePreset == 62)
 8004258:	2b3e      	cmp	r3, #62	; 0x3e
 800425a:	f000 80f7 	beq.w	800444c <audioFrame+0x388>
				else if (currentActivePreset == 61)
 800425e:	2b3d      	cmp	r3, #61	; 0x3d
 8004260:	f040 8096 	bne.w	8004390 <audioFrame+0x2cc>
 8004264:	9b04      	ldr	r3, [sp, #16]
 8004266:	461d      	mov	r5, r3
 8004268:	f103 042c 	add.w	r4, r3, #44	; 0x2c
						tADSRT_off(&additiveEnv[i][j]);
 800426c:	4628      	mov	r0, r5
					for (int j = 0; j < NUM_OVERTONES; j++)
 800426e:	3504      	adds	r5, #4
						tADSRT_off(&additiveEnv[i][j]);
 8004270:	f010 fce6 	bl	8014c40 <tADSRT_off>
					for (int j = 0; j < NUM_OVERTONES; j++)
 8004274:	42a5      	cmp	r5, r4
 8004276:	d1f9      	bne.n	800426c <audioFrame+0x1a8>
 8004278:	e08a      	b.n	8004390 <audioFrame+0x2cc>
 800427a:	4c5b      	ldr	r4, [pc, #364]	; (80043e8 <audioFrame+0x324>)
 800427c:	9b06      	ldr	r3, [sp, #24]
 800427e:	f104 0540 	add.w	r5, r4, #64	; 0x40
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
 8004282:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 80043ec <audioFrame+0x328>
 8004286:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800428a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800428e:	f7fe f99b 	bl	80025c8 <audioTickString>
 8004292:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8004296:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
 8004298:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 800429c:	42ac      	cmp	r4, r5
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
 800429e:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
 80042a2:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80042a6:	d1f2      	bne.n	800428e <audioFrame+0x1ca>
 80042a8:	e7a3      	b.n	80041f2 <audioFrame+0x12e>
				float amplitz = stringInputs[i] * 0.000025f;
 80042aa:	ee07 4a90 	vmov	s15, r4
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 80042ae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80042b2:	eeb0 0a4a 	vmov.f32	s0, s20
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80042b6:	463d      	mov	r5, r7
				float amplitz = stringInputs[i] * 0.000025f;
 80042b8:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 80042bc:	ee60 0a8c 	vmul.f32	s1, s1, s24
 80042c0:	f012 fcec 	bl	8016c9c <LEAF_clip>
				stringOctave[i] = octave;
 80042c4:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <audioFrame+0x33c>)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80042c6:	2201      	movs	r2, #1
 80042c8:	2110      	movs	r1, #16
				stringOctave[i] = octave;
 80042ca:	681b      	ldr	r3, [r3, #0]
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 80042cc:	eef0 9a40 	vmov.f32	s19, s0
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80042d0:	484a      	ldr	r0, [pc, #296]	; (80043fc <audioFrame+0x338>)
				stringOctave[i] = octave;
 80042d2:	f8ca 3000 	str.w	r3, [sl]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80042d6:	9b01      	ldr	r3, [sp, #4]
 80042d8:	f5a3 7413 	sub.w	r4, r3, #588	; 0x24c
 80042dc:	3354      	adds	r3, #84	; 0x54
 80042de:	9307      	str	r3, [sp, #28]
 80042e0:	f006 fab8 	bl	800a854 <HAL_GPIO_WritePin>
					if (useVelocity == 0) envVel = 1.f;
 80042e4:	edd4 7a00 	vldr	s15, [r4]
				    tADSRT_on(&envs[v][i], envVel);
 80042e8:	4628      	mov	r0, r5
 80042ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
				for (int v = 0; v < NUM_ENV; v++)
 80042ee:	34a8      	adds	r4, #168	; 0xa8
					if (useVelocity == 0) envVel = 1.f;
 80042f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				    tADSRT_on(&envs[v][i], envVel);
 80042f8:	bf0c      	ite	eq
 80042fa:	4628      	moveq	r0, r5
 80042fc:	eeb0 0a69 	vmovne.f32	s0, s19
 8004300:	f010 fc8c 	bl	8014c1c <tADSRT_on>
				    voiceSounding = 1;
 8004304:	4b3f      	ldr	r3, [pc, #252]	; (8004404 <audioFrame+0x340>)
 8004306:	f04f 0201 	mov.w	r2, #1
				for (int v = 0; v < NUM_ENV; v++)
 800430a:	3508      	adds	r5, #8
				    voiceSounding = 1;
 800430c:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
 800430e:	9b07      	ldr	r3, [sp, #28]
 8004310:	429c      	cmp	r4, r3
 8004312:	d1e7      	bne.n	80042e4 <audioFrame+0x220>
 8004314:	ebc9 7389 	rsb	r3, r9, r9, lsl #30
					if (noteOnSync > 0.5f)
 8004318:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_LFOS; v++)
 800431c:	9607      	str	r6, [sp, #28]
 800431e:	2400      	movs	r4, #0
 8004320:	009b      	lsls	r3, r3, #2
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004322:	9d01      	ldr	r5, [sp, #4]
 8004324:	330c      	adds	r3, #12
				for (int v = 0; v < NUM_LFOS; v++)
 8004326:	461e      	mov	r6, r3
					if (noteOnSync > 0.5f)
 8004328:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
 800432c:	4620      	mov	r0, r4
 800432e:	4649      	mov	r1, r9
				for (int v = 0; v < NUM_LFOS; v++)
 8004330:	3401      	adds	r4, #1
					if (noteOnSync > 0.5f)
 8004332:	eef4 7ac8 	vcmpe.f32	s15, s16
 8004336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433a:	dd03      	ble.n	8004344 <audioFrame+0x280>
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
 800433c:	ed95 0a00 	vldr	s0, [r5]
 8004340:	59aa      	ldr	r2, [r5, r6]
 8004342:	4790      	blx	r2
				for (int v = 0; v < NUM_LFOS; v++)
 8004344:	2c04      	cmp	r4, #4
 8004346:	f105 058c 	add.w	r5, r5, #140	; 0x8c
 800434a:	d1ed      	bne.n	8004328 <audioFrame+0x264>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 800434c:	492e      	ldr	r1, [pc, #184]	; (8004408 <audioFrame+0x344>)
 800434e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004352:	4a2e      	ldr	r2, [pc, #184]	; (800440c <audioFrame+0x348>)
 8004354:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004358:	780b      	ldrb	r3, [r1, #0]
				if (currentActivePreset == 63)
 800435a:	4c22      	ldr	r4, [pc, #136]	; (80043e4 <audioFrame+0x320>)
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 800435c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004360:	3301      	adds	r3, #1
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
 8004362:	9802      	ldr	r0, [sp, #8]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 8004364:	edd2 7a00 	vldr	s15, [r2]
 8004368:	700b      	strb	r3, [r1, #0]
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
				if (currentActivePreset == 63)
 800436e:	7823      	ldrb	r3, [r4, #0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 8004370:	9e07      	ldr	r6, [sp, #28]
				if (currentActivePreset == 63)
 8004372:	2b3f      	cmp	r3, #63	; 0x3f
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
 8004374:	edc0 9a00 	vstr	s19, [r0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 8004378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800437c:	edc0 7a02 	vstr	s15, [r0, #8]
				if (currentActivePreset == 63)
 8004380:	f000 811d 	beq.w	80045be <audioFrame+0x4fa>
				if (currentActivePreset == 62)
 8004384:	2b3e      	cmp	r3, #62	; 0x3e
 8004386:	f000 8355 	beq.w	8004a34 <audioFrame+0x970>
				else if (currentActivePreset == 61)
 800438a:	2b3d      	cmp	r3, #61	; 0x3d
 800438c:	f000 8127 	beq.w	80045de <audioFrame+0x51a>
		for (int i = 0; i < numStringsThisBoard; i++)
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <audioFrame+0x2e8>)
			previousStringInputs[i] = stringInputs[i];
 8004392:	6834      	ldr	r4, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	e6e6      	b.n	8004166 <audioFrame+0xa2>
 8004398:	20005410 	.word	0x20005410
 800439c:	e0001000 	.word	0xe0001000
 80043a0:	20012efc 	.word	0x20012efc
 80043a4:	3b000000 	.word	0x3b000000
 80043a8:	20000a9c 	.word	0x20000a9c
 80043ac:	20000012 	.word	0x20000012
 80043b0:	20012f0c 	.word	0x20012f0c
 80043b4:	200009f4 	.word	0x200009f4
 80043b8:	00000000 	.word	0x00000000
 80043bc:	20012e3c 	.word	0x20012e3c
 80043c0:	3e4ccccd 	.word	0x3e4ccccd
 80043c4:	37d1b717 	.word	0x37d1b717
 80043c8:	3ffeb852 	.word	0x3ffeb852
 80043cc:	44fa0000 	.word	0x44fa0000
 80043d0:	20012ebc 	.word	0x20012ebc
 80043d4:	20004fac 	.word	0x20004fac
 80043d8:	20005584 	.word	0x20005584
 80043dc:	20000ae4 	.word	0x20000ae4
 80043e0:	20005574 	.word	0x20005574
 80043e4:	2001304c 	.word	0x2001304c
 80043e8:	30000000 	.word	0x30000000
 80043ec:	4b000000 	.word	0x4b000000
 80043f0:	20000008 	.word	0x20000008
 80043f4:	20012f20 	.word	0x20012f20
 80043f8:	20005010 	.word	0x20005010
 80043fc:	58020400 	.word	0x58020400
 8004400:	2000544c 	.word	0x2000544c
 8004404:	20012f88 	.word	0x20012f88
 8004408:	200059cc 	.word	0x200059cc
 800440c:	20016cdc 	.word	0x20016cdc
 8004410:	20005418 	.word	0x20005418
 8004414:	20016a7c 	.word	0x20016a7c
 8004418:	20012ef4 	.word	0x20012ef4
 800441c:	4c7c      	ldr	r4, [pc, #496]	; (8004610 <audioFrame+0x54c>)
 800441e:	9b06      	ldr	r3, [sp, #24]
 8004420:	f104 0540 	add.w	r5, r4, #64	; 0x40
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
 8004424:	ed9f 8a7b 	vldr	s16, [pc, #492]	; 8004614 <audioFrame+0x550>
 8004428:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800442c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8004430:	f7fe f9cc 	bl	80027cc <audioTickString2>
 8004434:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8004438:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
 800443a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 800443e:	42ac      	cmp	r4, r5
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
 8004440:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
 8004444:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8004448:	d1f2      	bne.n	8004430 <audioFrame+0x36c>
 800444a:	e6d2      	b.n	80041f2 <audioFrame+0x12e>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
 800444c:	9d03      	ldr	r5, [sp, #12]
 800444e:	eeb0 0a4a 	vmov.f32	s0, s20
 8004452:	4628      	mov	r0, r5
 8004454:	f018 fa26 	bl	801c8a4 <tLivingString2_setTargetLev>
					tLivingString2_setLevMode(&strings[i], 0);
 8004458:	4621      	mov	r1, r4
 800445a:	4628      	mov	r0, r5
 800445c:	f018 fa5e 	bl	801c91c <tLivingString2_setLevMode>
					tLivingString2_setDecay(&strings[i], 0.2f);
 8004460:	eeb0 0a6b 	vmov.f32	s0, s23
 8004464:	4628      	mov	r0, r5
 8004466:	f018 fa07 	bl	801c878 <tLivingString2_setDecay>
					tADSRT_off(&fenvelopes[i]);
 800446a:	486b      	ldr	r0, [pc, #428]	; (8004618 <audioFrame+0x554>)
 800446c:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 8004470:	f010 fbe6 	bl	8014c40 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
 8004474:	4b69      	ldr	r3, [pc, #420]	; (800461c <audioFrame+0x558>)
			previousStringInputs[i] = stringInputs[i];
 8004476:	6834      	ldr	r4, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	e674      	b.n	8004166 <audioFrame+0xa2>
 800447c:	4b64      	ldr	r3, [pc, #400]	; (8004610 <audioFrame+0x54c>)
						float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[3]* 0.1f * j) + 1.0f) * ((Env2 * knobScaled[4])+ 1.0f);
 800447e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8004482:	9906      	ldr	r1, [sp, #24]
 8004484:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004488:	ed9f aa65 	vldr	s20, [pc, #404]	; 8004620 <audioFrame+0x55c>
 800448c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
						if (tempFreq < 18000.0f)
 8004490:	eddf 9a64 	vldr	s19, [pc, #400]	; 8004624 <audioFrame+0x560>
 8004494:	4f64      	ldr	r7, [pc, #400]	; (8004628 <audioFrame+0x564>)
 8004496:	9302      	str	r3, [sp, #8]
 8004498:	eb02 0381 	add.w	r3, r2, r1, lsl #2
							float upRamp = (j * invNumOvertones);
 800449c:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8004660 <audioFrame+0x59c>
 80044a0:	9303      	str	r3, [sp, #12]
				for (int i = 0; i < 12; i++)
 80044a2:	4d62      	ldr	r5, [pc, #392]	; (800462c <audioFrame+0x568>)
 80044a4:	4c60      	ldr	r4, [pc, #384]	; (8004628 <audioFrame+0x564>)
					knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 80044a6:	4628      	mov	r0, r5
				for (int i = 0; i < 12; i++)
 80044a8:	3504      	adds	r5, #4
					knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 80044aa:	f010 fe49 	bl	8015140 <tExpSmooth_tick>
				for (int i = 0; i < 12; i++)
 80044ae:	4b60      	ldr	r3, [pc, #384]	; (8004630 <audioFrame+0x56c>)
					knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 80044b0:	eca4 0a01 	vstmia	r4!, {s0}
				for (int i = 0; i < 12; i++)
 80044b4:	42a3      	cmp	r3, r4
 80044b6:	d1f6      	bne.n	80044a6 <audioFrame+0x3e2>
 80044b8:	2300      	movs	r3, #0
				float tempSamp = 0.0f;
 80044ba:	eddf aa5e 	vldr	s21, [pc, #376]	; 8004634 <audioFrame+0x570>
 80044be:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8004650 <audioFrame+0x58c>
 80044c2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004664 <audioFrame+0x5a0>
 80044c6:	4e5c      	ldr	r6, [pc, #368]	; (8004638 <audioFrame+0x574>)
				for (int i = 0; i < 12; i++)
 80044c8:	9301      	str	r3, [sp, #4]
					for (int j = 0; j < NUM_OVERTONES; j++)
 80044ca:	4a5c      	ldr	r2, [pc, #368]	; (800463c <audioFrame+0x578>)
 80044cc:	f04f 0a00 	mov.w	sl, #0
 80044d0:	9b01      	ldr	r3, [sp, #4]
 80044d2:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 80044d6:	4a5a      	ldr	r2, [pc, #360]	; (8004640 <audioFrame+0x57c>)
 80044d8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80044dc:	e004      	b.n	80044e8 <audioFrame+0x424>
 80044de:	f1ba 0f0b 	cmp.w	sl, #11
 80044e2:	f105 0504 	add.w	r5, r5, #4
 80044e6:	d048      	beq.n	800457a <audioFrame+0x4b6>
						stringFrequencies[i] = mtof(stringMIDIPitches[i] + stringOctave[i]);
 80044e8:	edd8 7a00 	vldr	s15, [r8]
 80044ec:	ee08 aa10 	vmov	s16, sl
 80044f0:	ed99 0a00 	vldr	s0, [r9]
						float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[3]* 0.1f * j) + 1.0f) * ((Env2 * knobScaled[4])+ 1.0f);
 80044f4:	f10a 0a01 	add.w	sl, sl, #1
 80044f8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
						stringFrequencies[i] = mtof(stringMIDIPitches[i] + stringOctave[i]);
 80044fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004500:	f012 fcec 	bl	8016edc <mtof>
						float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
 8004504:	4620      	mov	r0, r4
						stringFrequencies[i] = mtof(stringMIDIPitches[i] + stringOctave[i]);
 8004506:	ed86 0a00 	vstr	s0, [r6]
					for (int j = 0; j < NUM_OVERTONES; j++)
 800450a:	3404      	adds	r4, #4
						float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
 800450c:	f010 fba0 	bl	8014c50 <tADSRT_tick>
						float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[3]* 0.1f * j) + 1.0f) * ((Env2 * knobScaled[4])+ 1.0f);
 8004510:	ed97 7a03 	vldr	s14, [r7, #12]
 8004514:	eef0 6a49 	vmov.f32	s13, s18
 8004518:	ee07 aa90 	vmov	s15, sl
 800451c:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8004520:	ed96 6a00 	vldr	s12, [r6]
 8004524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
 8004528:	eef0 8a40 	vmov.f32	s17, s0
						float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[3]* 0.1f * j) + 1.0f) * ((Env2 * knobScaled[4])+ 1.0f);
 800452c:	eee8 6a07 	vfma.f32	s13, s16, s14
 8004530:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004534:	ee27 0aa6 	vmul.f32	s0, s15, s13
						if (tempFreq < 18000.0f)
 8004538:	eeb4 0ae9 	vcmpe.f32	s0, s19
 800453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004540:	d5cd      	bpl.n	80044de <audioFrame+0x41a>
							tCycle_setFreq(&additive[i][j], tempFreq);
 8004542:	4628      	mov	r0, r5
 8004544:	f012 ff02 	bl	801734c <tCycle_setFreq>
							float upRamp = (j * invNumOvertones);
 8004548:	ed9b 7a00 	vldr	s14, [fp]
							float freqWeight = (upRamp * knobScaled[0]) + (downRamp * (1.0f - knobScaled[0]));
 800454c:	edd7 7a00 	vldr	s15, [r7]
							tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * freqWeight;
 8004550:	4628      	mov	r0, r5
							float upRamp = (j * invNumOvertones);
 8004552:	ee28 8a07 	vmul.f32	s16, s16, s14
					for (int j = 0; j < NUM_OVERTONES; j++)
 8004556:	3504      	adds	r5, #4
							float freqWeight = (upRamp * knobScaled[0]) + (downRamp * (1.0f - knobScaled[0]));
 8004558:	ee39 ba67 	vsub.f32	s22, s18, s15
							float downRamp = 1.0f - (j * invNumOvertones);
 800455c:	ee39 7a48 	vsub.f32	s14, s18, s16
							float freqWeight = (upRamp * knobScaled[0]) + (downRamp * (1.0f - knobScaled[0]));
 8004560:	ee2b ba07 	vmul.f32	s22, s22, s14
 8004564:	eea7 ba88 	vfma.f32	s22, s15, s16
							tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * freqWeight;
 8004568:	f012 feca 	bl	8017300 <tCycle_tick>
					for (int j = 0; j < NUM_OVERTONES; j++)
 800456c:	f1ba 0f0b 	cmp.w	sl, #11
							tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * freqWeight;
 8004570:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004574:	eee0 aa28 	vfma.f32	s21, s0, s17
					for (int j = 0; j < NUM_OVERTONES; j++)
 8004578:	d1b6      	bne.n	80044e8 <audioFrame+0x424>
				for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800457a:	9b01      	ldr	r3, [sp, #4]
 800457c:	f109 0904 	add.w	r9, r9, #4
 8004580:	f108 0804 	add.w	r8, r8, #4
 8004584:	3604      	adds	r6, #4
 8004586:	3312      	adds	r3, #18
 8004588:	2b24      	cmp	r3, #36	; 0x24
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	d19d      	bne.n	80044ca <audioFrame+0x406>
				current_sample = (int32_t)(tempSamp * TWO_TO_23);
 800458e:	eef0 7a6a 	vmov.f32	s15, s21
				audioOutBuffer[buffer_offset + i] = current_sample;
 8004592:	9a02      	ldr	r2, [sp, #8]
				current_sample = (int32_t)(tempSamp * TWO_TO_23);
 8004594:	eefe 7ae4 	vcvt.s32.f32	s15, s15, #23
 8004598:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
 800459c:	e9c2 3300 	strd	r3, r3, [r2]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80045a0:	f102 0308 	add.w	r3, r2, #8
 80045a4:	9a03      	ldr	r2, [sp, #12]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	9302      	str	r3, [sp, #8]
 80045aa:	f47f af7a 	bne.w	80044a2 <audioFrame+0x3de>
 80045ae:	e620      	b.n	80041f2 <audioFrame+0x12e>
					lsDecay[i] = 0;
 80045b0:	4b24      	ldr	r3, [pc, #144]	; (8004644 <audioFrame+0x580>)
 80045b2:	f809 4003 	strb.w	r4, [r9, r3]
		for (int i = 0; i < numStringsThisBoard; i++)
 80045b6:	4b19      	ldr	r3, [pc, #100]	; (800461c <audioFrame+0x558>)
			previousStringInputs[i] = stringInputs[i];
 80045b8:	6834      	ldr	r4, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 80045ba:	781a      	ldrb	r2, [r3, #0]
 80045bc:	e5d3      	b.n	8004166 <audioFrame+0xa2>
					tSimpleLivingString3_pluck(&livStr[i], amplitz, pluckPos);
 80045be:	4b22      	ldr	r3, [pc, #136]	; (8004648 <audioFrame+0x584>)
 80045c0:	eeb0 0a69 	vmov.f32	s0, s19
 80045c4:	4821      	ldr	r0, [pc, #132]	; (800464c <audioFrame+0x588>)
 80045c6:	edd3 0a00 	vldr	s1, [r3]
 80045ca:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 80045ce:	f017 fdf7 	bl	801c1c0 <tSimpleLivingString3_pluck>
					lsDecay[i] = 1;
 80045d2:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <audioFrame+0x580>)
 80045d4:	2101      	movs	r1, #1
				if (currentActivePreset == 62)
 80045d6:	7823      	ldrb	r3, [r4, #0]
					lsDecay[i] = 1;
 80045d8:	f802 1009 	strb.w	r1, [r2, r9]
 80045dc:	e6d2      	b.n	8004384 <audioFrame+0x2c0>
 80045de:	4b1c      	ldr	r3, [pc, #112]	; (8004650 <audioFrame+0x58c>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 80045e0:	eef1 ca00 	vmov.f32	s25, #16	; 0x40800000  4.0
				else if (currentActivePreset == 61)
 80045e4:	9a04      	ldr	r2, [sp, #16]
							stringFade = (float)(thisString - 6.0f) * 0.2f;
 80045e6:	eeb1 da08 	vmov.f32	s26, #24	; 0x40c00000  6.0
 80045ea:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80045ee:	490e      	ldr	r1, [pc, #56]	; (8004628 <audioFrame+0x564>)
 80045f0:	960a      	str	r6, [sp, #40]	; 0x28
 80045f2:	4616      	mov	r6, r2
 80045f4:	9308      	str	r3, [sp, #32]
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <audioFrame+0x574>)
 80045f8:	f8cd 901c 	str.w	r9, [sp, #28]
 80045fc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8004600:	970b      	str	r7, [sp, #44]	; 0x2c
 8004602:	4d14      	ldr	r5, [pc, #80]	; (8004654 <audioFrame+0x590>)
 8004604:	4689      	mov	r9, r1
 8004606:	9309      	str	r3, [sp, #36]	; 0x24
 8004608:	4b13      	ldr	r3, [pc, #76]	; (8004658 <audioFrame+0x594>)
 800460a:	4c14      	ldr	r4, [pc, #80]	; (800465c <audioFrame+0x598>)
 800460c:	461f      	mov	r7, r3
 800460e:	e0fc      	b.n	800480a <audioFrame+0x746>
 8004610:	30000000 	.word	0x30000000
 8004614:	4b000000 	.word	0x4b000000
 8004618:	20004fcc 	.word	0x20004fcc
 800461c:	20000012 	.word	0x20000012
 8004620:	3dcccccd 	.word	0x3dcccccd
 8004624:	468ca000 	.word	0x468ca000
 8004628:	200050dc 	.word	0x200050dc
 800462c:	20005150 	.word	0x20005150
 8004630:	2000510c 	.word	0x2000510c
 8004634:	00000000 	.word	0x00000000
 8004638:	20012e8c 	.word	0x20012e8c
 800463c:	200009f4 	.word	0x200009f4
 8004640:	20000964 	.word	0x20000964
 8004644:	200052c0 	.word	0x200052c0
 8004648:	2000014c 	.word	0x2000014c
 800464c:	200052a8 	.word	0x200052a8
 8004650:	20012eec 	.word	0x20012eec
 8004654:	20000d48 	.word	0x20000d48
 8004658:	20000c28 	.word	0x20000c28
 800465c:	20000300 	.word	0x20000300
 8004660:	200050d8 	.word	0x200050d8
 8004664:	20012ef4 	.word	0x20012ef4
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 8004668:	ed94 7a06 	vldr	s14, [r4, #24]
 800466c:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004670:	edd4 7a08 	vldr	s15, [r4, #32]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 8004674:	eeb0 0a4a 	vmov.f32	s0, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004678:	ee78 6a47 	vsub.f32	s13, s16, s14
 800467c:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004680:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
							stringFade = (float)thisString * 0.2f;
 8004684:	ee29 9a2b 	vmul.f32	s18, s18, s23
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004688:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 800468c:	ee7f da49 	vsub.f32	s27, s30, s18
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 8004690:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8004694:	f012 fb02 	bl	8016c9c <LEAF_clip>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004698:	ed94 7a03 	vldr	s14, [r4, #12]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800469c:	edd4 7a05 	vldr	s15, [r4, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 80046a0:	eef0 ea40 	vmov.f32	s29, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80046a4:	ee78 6a47 	vsub.f32	s13, s16, s14
 80046a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 80046ac:	eeb0 1a6a 	vmov.f32	s2, s21
 80046b0:	eeb0 0a4a 	vmov.f32	s0, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80046b4:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 80046b8:	ee70 0aa0 	vadd.f32	s1, s1, s1
 80046bc:	f012 faee 	bl	8016c9c <LEAF_clip>
							int height2Int = floor(height2);
 80046c0:	eeb7 7aee 	vcvt.f64.f32	d7, s29
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80046c4:	48d7      	ldr	r0, [pc, #860]	; (8004a24 <audioFrame+0x960>)
							int height1Int = floor(height1);
 80046c6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
							if (height2 < 1.0f)
 80046ca:	eef4 eacf 	vcmpe.f32	s29, s30
							int height2Int = floor(height2);
 80046ce:	febb 7b47 	vrintm.f64	d7, d7
 80046d2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							int height1Int = floor(height1);
 80046d6:	febb 6b46 	vrintm.f64	d6, d6
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 80046da:	eeb0 ea40 	vmov.f32	s28, s0
							if (height2 < 1.0f)
 80046de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
 80046e2:	ee17 2a90 	vmov	r2, s15
							float height2Float = height2 - height2Int;
 80046e6:	eef8 5ae7 	vcvt.f32.s32	s11, s15
							int height1Int = floor(height1);
 80046ea:	eefd 7bc6 	vcvt.s32.f64	s15, d6
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80046ee:	f102 0101 	add.w	r1, r2, #1
 80046f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
 80046f6:	ee7e 8ae5 	vsub.f32	s17, s29, s11
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80046fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
							int height1Int = floor(height1);
 80046fe:	ee17 3a90 	vmov	r3, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8004702:	eb08 0282 	add.w	r2, r8, r2, lsl #2
							float height1Float = height1 - height1Int;
 8004706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800470a:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 800470e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004712:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004716:	ed92 5a48 	vldr	s10, [r2, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 800471a:	f103 0201 	add.w	r2, r3, #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800471e:	ed91 7a48 	vldr	s14, [r1, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004722:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004726:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800472a:	ee68 8a87 	vmul.f32	s17, s17, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 800472e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8004732:	ee3f 7a6e 	vsub.f32	s14, s30, s29
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004736:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800473a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800473e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8004742:	ee37 7a25 	vadd.f32	s14, s14, s11
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004746:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800474a:	ed92 6a24 	vldr	s12, [r2, #144]	; 0x90
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800474e:	eee5 8a07 	vfma.f32	s17, s10, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004752:	ee3f 7a40 	vsub.f32	s14, s30, s0
 8004756:	ee37 7a27 	vadd.f32	s14, s14, s15
							float height1Float = height1 - height1Int;
 800475a:	ee70 7a67 	vsub.f32	s15, s0, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 800475e:	ee6d 8aa8 	vmul.f32	s17, s27, s17
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004762:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004766:	eee6 7a87 	vfma.f32	s15, s13, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 800476a:	eee9 8a27 	vfma.f32	s17, s18, s15
							if (height2 < 1.0f)
 800476e:	f100 811c 	bmi.w	80049aa <audioFrame+0x8e6>
								d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
 8004772:	eef0 0a48 	vmov.f32	s1, s16
 8004776:	ed94 1a08 	vldr	s2, [r4, #32]
 800477a:	ed94 0a07 	vldr	s0, [r4, #28]
 800477e:	edd7 ea3c 	vldr	s29, [r7, #240]	; 0xf0
 8004782:	f012 fa8b 	bl	8016c9c <LEAF_clip>
 8004786:	edd5 7a3c 	vldr	s15, [r5, #240]	; 0xf0
 800478a:	eeee 7a80 	vfma.f32	s15, s29, s0
 800478e:	eecf fa27 	vdiv.f32	s31, s30, s15
							if (height1 < 1.0f)
 8004792:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 8004796:	eeb4 eaee 	vcmpe.f32	s28, s29
 800479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479e:	f100 80f3 	bmi.w	8004988 <audioFrame+0x8c4>
								d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
 80047a2:	eef0 0a48 	vmov.f32	s1, s16
 80047a6:	ed94 1a05 	vldr	s2, [r4, #20]
 80047aa:	ed94 0a04 	vldr	s0, [r4, #16]
 80047ae:	ed97 8a24 	vldr	s16, [r7, #144]	; 0x90
 80047b2:	f012 fa73 	bl	8016c9c <LEAF_clip>
 80047b6:	edd5 7a24 	vldr	s15, [r5, #144]	; 0x90
 80047ba:	eee8 7a00 	vfma.f32	s15, s16, s0
 80047be:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
						thisDecay *= 2000.0f * (knobScaled[1] + 0.5f);
 80047c2:	ed99 0a01 	vldr	s0, [r9, #4]
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 80047c6:	4630      	mov	r0, r6
					for (int j = 0; j < NUM_OVERTONES; j++)
 80047c8:	f108 0801 	add.w	r8, r8, #1
 80047cc:	3704      	adds	r7, #4
 80047ce:	3504      	adds	r5, #4
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
 80047d0:	ee6d 7aaf 	vmul.f32	s15, s27, s31
 80047d4:	eee7 7a09 	vfma.f32	s15, s14, s18
						thisDecay *= 2000.0f * (knobScaled[1] + 0.5f);
 80047d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047dc:	ee30 0a07 	vadd.f32	s0, s0, s14
 80047e0:	ee20 0a0b 	vmul.f32	s0, s0, s22
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 80047e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80047e8:	f010 f9d0 	bl	8014b8c <tADSRT_setDecay>
						tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);// * (randomFactors[currentRandom])));
 80047ec:	4630      	mov	r0, r6
 80047ee:	ee28 0aa9 	vmul.f32	s0, s17, s19
					for (int j = 0; j < NUM_OVERTONES; j++)
 80047f2:	3604      	adds	r6, #4
						tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);// * (randomFactors[currentRandom])));
 80047f4:	f010 fa12 	bl	8014c1c <tADSRT_on>
						currentRandom++;
 80047f8:	4a8b      	ldr	r2, [pc, #556]	; (8004a28 <audioFrame+0x964>)
					for (int j = 0; j < NUM_OVERTONES; j++)
 80047fa:	f1b8 0f0b 	cmp.w	r8, #11
						currentRandom++;
 80047fe:	7813      	ldrb	r3, [r2, #0]
 8004800:	f103 0301 	add.w	r3, r3, #1
 8004804:	7013      	strb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
 8004806:	f000 8103 	beq.w	8004a10 <audioFrame+0x94c>
						stringFrequencies[i] = mtof(stringMIDIPitches[i] + stringOctave[i]);
 800480a:	9b08      	ldr	r3, [sp, #32]
 800480c:	edda 7a00 	vldr	s15, [sl]
 8004810:	ed93 0a00 	vldr	s0, [r3]
 8004814:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004818:	f012 fb60 	bl	8016edc <mtof>
 800481c:	9b09      	ldr	r3, [sp, #36]	; 0x24
						int thisString = i + firstString;
 800481e:	9a07      	ldr	r2, [sp, #28]
						stringFrequencies[i] = mtof(stringMIDIPitches[i] + stringOctave[i]);
 8004820:	ed83 0a00 	vstr	s0, [r3]
						int thisString = i + firstString;
 8004824:	4b81      	ldr	r3, [pc, #516]	; (8004a2c <audioFrame+0x968>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 8004826:	ed99 8a02 	vldr	s16, [r9, #8]
						int thisString = i + firstString;
 800482a:	681b      	ldr	r3, [r3, #0]
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 800482c:	ee28 8a2c 	vmul.f32	s16, s16, s25
						int thisString = i + firstString;
 8004830:	4413      	add	r3, r2
							stringFade = (float)thisString * 0.2f;
 8004832:	ee07 3a90 	vmov	s15, r3
						if (thisString < 6)
 8004836:	2b05      	cmp	r3, #5
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 8004838:	ee28 8a00 	vmul.f32	s16, s16, s0
							stringFade = (float)thisString * 0.2f;
 800483c:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
						if (thisString < 6)
 8004840:	f77f af12 	ble.w	8004668 <audioFrame+0x5a4>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004844:	ed94 7a03 	vldr	s14, [r4, #12]
 8004848:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800484c:	edd4 7a05 	vldr	s15, [r4, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004850:	eeb0 0a4a 	vmov.f32	s0, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004854:	ee78 6a47 	vsub.f32	s13, s16, s14
 8004858:	ee77 7ac7 	vsub.f32	s15, s15, s14
							stringFade = (float)(thisString - 6.0f) * 0.2f;
 800485c:	ee39 9a4d 	vsub.f32	s18, s18, s26
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8004860:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004864:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							stringFade = (float)(thisString - 6.0f) * 0.2f;
 8004868:	ee29 9a2b 	vmul.f32	s18, s18, s23
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 800486c:	ee7f da49 	vsub.f32	s27, s30, s18
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004870:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8004874:	f012 fa12 	bl	8016c9c <LEAF_clip>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8004878:	ed94 7a00 	vldr	s14, [r4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800487c:	edd4 7a02 	vldr	s15, [r4, #8]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004880:	eef0 ea40 	vmov.f32	s29, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004884:	ee78 6a47 	vsub.f32	s13, s16, s14
 8004888:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 800488c:	eeb0 1a6a 	vmov.f32	s2, s21
 8004890:	eeb0 0a4a 	vmov.f32	s0, s20
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004894:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8004898:	ee70 0aa0 	vadd.f32	s1, s1, s1
 800489c:	f012 f9fe 	bl	8016c9c <LEAF_clip>
							int height2Int = floor(height2);
 80048a0:	eeb7 6aee 	vcvt.f64.f32	d6, s29
							int height1Int = floor(height1);
 80048a4:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80048a8:	485e      	ldr	r0, [pc, #376]	; (8004a24 <audioFrame+0x960>)
							if (height2 < 1.0f)
 80048aa:	eef4 eacf 	vcmpe.f32	s29, s30
							int height2Int = floor(height2);
 80048ae:	febb 6b46 	vrintm.f64	d6, d6
 80048b2:	eefd 6bc6 	vcvt.s32.f64	s13, d6
							int height1Int = floor(height1);
 80048b6:	febb 7b47 	vrintm.f64	d7, d7
 80048ba:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							if (height2 < 1.0f)
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
 80048c2:	ee16 2a90 	vmov	r2, s13
							float height2Float = height2 - height2Int;
 80048c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
							int height1Int = floor(height1);
 80048ca:	ee17 3a90 	vmov	r3, s15
							float height1Float = height1 - height1Int;
 80048ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80048d2:	f102 0101 	add.w	r1, r2, #1
 80048d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
 80048da:	ee7e 6ae6 	vsub.f32	s13, s29, s13
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80048de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
							float height1Float = height1 - height1Int;
 80048e2:	ee30 7a47 	vsub.f32	s14, s0, s14
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80048e6:	eb08 0282 	add.w	r2, r8, r2, lsl #2
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 80048ea:	eeb0 ea40 	vmov.f32	s28, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80048ee:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 80048f2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80048f6:	edd2 8a24 	vldr	s17, [r2, #144]	; 0x90
 80048fa:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80048fe:	edd2 7a48 	vldr	s15, [r2, #288]	; 0x120
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004902:	f103 0201 	add.w	r2, r3, #1
 8004906:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800490a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800490e:	eee7 8aa6 	vfma.f32	s17, s15, s13
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004912:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8004916:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 800491a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800491e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004922:	edd3 7a00 	vldr	s15, [r3]
 8004926:	edd2 6a24 	vldr	s13, [r2, #144]	; 0x90
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 800492a:	ee6d 8aa8 	vmul.f32	s17, s27, s17
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 800492e:	eee6 7a87 	vfma.f32	s15, s13, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8004932:	eee9 8a27 	vfma.f32	s17, s18, s15
							if (height2 < 1.0f)
 8004936:	d45a      	bmi.n	80049ee <audioFrame+0x92a>
								d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
 8004938:	eef0 0a48 	vmov.f32	s1, s16
 800493c:	ed94 1a05 	vldr	s2, [r4, #20]
 8004940:	ed94 0a04 	vldr	s0, [r4, #16]
 8004944:	edd7 ea24 	vldr	s29, [r7, #144]	; 0x90
 8004948:	f012 f9a8 	bl	8016c9c <LEAF_clip>
 800494c:	edd5 7a24 	vldr	s15, [r5, #144]	; 0x90
 8004950:	eeee 7a80 	vfma.f32	s15, s29, s0
 8004954:	eecf fa27 	vdiv.f32	s31, s30, s15
							if (height1 < 1.0f)
 8004958:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 800495c:	eeb4 eaee 	vcmpe.f32	s28, s29
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	d432      	bmi.n	80049cc <audioFrame+0x908>
								d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
 8004966:	eef0 0a48 	vmov.f32	s1, s16
 800496a:	ed94 1a02 	vldr	s2, [r4, #8]
 800496e:	ed94 0a01 	vldr	s0, [r4, #4]
 8004972:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 8004976:	f012 f991 	bl	8016c9c <LEAF_clip>
 800497a:	edd5 7a0c 	vldr	s15, [r5, #48]	; 0x30
 800497e:	eee8 7a00 	vfma.f32	s15, s16, s0
 8004982:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
 8004986:	e71c      	b.n	80047c2 <audioFrame+0x6fe>
								d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
 8004988:	eef0 0a48 	vmov.f32	s1, s16
 800498c:	ed94 1a04 	vldr	s2, [r4, #16]
 8004990:	ed94 0a03 	vldr	s0, [r4, #12]
 8004994:	ed97 8a18 	vldr	s16, [r7, #96]	; 0x60
 8004998:	f012 f980 	bl	8016c9c <LEAF_clip>
 800499c:	edd5 7a18 	vldr	s15, [r5, #96]	; 0x60
 80049a0:	eee8 7a00 	vfma.f32	s15, s16, s0
 80049a4:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
 80049a8:	e70b      	b.n	80047c2 <audioFrame+0x6fe>
								d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
 80049aa:	eef0 0a48 	vmov.f32	s1, s16
 80049ae:	ed94 1a07 	vldr	s2, [r4, #28]
 80049b2:	ed94 0a06 	vldr	s0, [r4, #24]
 80049b6:	edd7 ea30 	vldr	s29, [r7, #192]	; 0xc0
 80049ba:	f012 f96f 	bl	8016c9c <LEAF_clip>
 80049be:	edd5 7a30 	vldr	s15, [r5, #192]	; 0xc0
 80049c2:	eeee 7a80 	vfma.f32	s15, s29, s0
 80049c6:	eecf fa27 	vdiv.f32	s31, s30, s15
 80049ca:	e6e2      	b.n	8004792 <audioFrame+0x6ce>
								d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
 80049cc:	eef0 0a48 	vmov.f32	s1, s16
 80049d0:	ed94 1a01 	vldr	s2, [r4, #4]
 80049d4:	ed94 0a00 	vldr	s0, [r4]
 80049d8:	ed97 8a00 	vldr	s16, [r7]
 80049dc:	f012 f95e 	bl	8016c9c <LEAF_clip>
 80049e0:	edd5 7a00 	vldr	s15, [r5]
 80049e4:	eee8 7a00 	vfma.f32	s15, s16, s0
 80049e8:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
 80049ec:	e6e9      	b.n	80047c2 <audioFrame+0x6fe>
								d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
 80049ee:	eef0 0a48 	vmov.f32	s1, s16
 80049f2:	ed94 1a04 	vldr	s2, [r4, #16]
 80049f6:	ed94 0a03 	vldr	s0, [r4, #12]
 80049fa:	edd7 ea18 	vldr	s29, [r7, #96]	; 0x60
 80049fe:	f012 f94d 	bl	8016c9c <LEAF_clip>
 8004a02:	edd5 7a18 	vldr	s15, [r5, #96]	; 0x60
 8004a06:	eeee 7a80 	vfma.f32	s15, s29, s0
 8004a0a:	eecf fa27 	vdiv.f32	s31, s30, s15
 8004a0e:	e7a3      	b.n	8004958 <audioFrame+0x894>
			previousStringInputs[i] = stringInputs[i];
 8004a10:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		for (int i = 0; i < numStringsThisBoard; i++)
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <audioFrame+0x96c>)
			previousStringInputs[i] = stringInputs[i];
 8004a14:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8004a18:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004a1a:	6834      	ldr	r4, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 8004a1c:	781a      	ldrb	r2, [r3, #0]
 8004a1e:	f7ff bba2 	b.w	8004166 <audioFrame+0xa2>
 8004a22:	bf00      	nop
 8004a24:	20000324 	.word	0x20000324
 8004a28:	2001304d 	.word	0x2001304d
 8004a2c:	2000500c 	.word	0x2000500c
 8004a30:	20000012 	.word	0x20000012
					tADSRT_on(&fenvelopes[i], amplitz);
 8004a34:	4848      	ldr	r0, [pc, #288]	; (8004b58 <audioFrame+0xa94>)
 8004a36:	eeb0 0a69 	vmov.f32	s0, s19
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
 8004a3a:	4c48      	ldr	r4, [pc, #288]	; (8004b5c <audioFrame+0xa98>)
					float pluckAmp = amplitz * 2.0f; //was 4
 8004a3c:	ee79 9aa9 	vadd.f32	s19, s19, s19
					tADSRT_on(&fenvelopes[i], amplitz);
 8004a40:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 8004a44:	f010 f8ea 	bl	8014c1c <tADSRT_on>
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
 8004a48:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004a4c:	ed94 7a00 	vldr	s14, [r4]
 8004a50:	9d03      	ldr	r5, [sp, #12]
 8004a52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a56:	9407      	str	r4, [sp, #28]
 8004a58:	4628      	mov	r0, r5
 8004a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5e:	bfcc      	ite	gt
 8004a60:	2101      	movgt	r1, #1
 8004a62:	2100      	movle	r1, #0
 8004a64:	f017 ff5a 	bl	801c91c <tLivingString2_setLevMode>
					tLivingString2_setTargetLev(&strings[i], knobScaled[1]);
 8004a68:	ed94 0a01 	vldr	s0, [r4, #4]
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f017 ff19 	bl	801c8a4 <tLivingString2_setTargetLev>
					int delayLength = (int)strings[i]->waveLengthInSamples;
 8004a72:	682b      	ldr	r3, [r5, #0]
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8004a74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
					int beforeLength = (delayLength * knobScaled[2]);
 8004a78:	ed94 7a02 	vldr	s14, [r4, #8]
					int delayLength = (int)strings[i]->waveLengthInSamples;
 8004a7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a80:	eefd 6ae6 	vcvt.s32.f32	s13, s13
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8004a84:	ee77 7ac7 	vsub.f32	s15, s15, s14
					int delayLength = (int)strings[i]->waveLengthInSamples;
 8004a88:	ee16 2a90 	vmov	r2, s13
					int beforeLength = (delayLength * knobScaled[2]);
 8004a8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004a90:	ee26 7a87 	vmul.f32	s14, s13, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8004a94:	ee67 7aa6 	vmul.f32	s15, s15, s13
					int beforeLength = (delayLength * knobScaled[2]);
 8004a98:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8004a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int beforeLength = (delayLength * knobScaled[2]);
 8004aa0:	ee17 1a10 	vmov	r1, s14
					if (beforeLength > 0)
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	dd53      	ble.n	8004b50 <audioFrame+0xa8c>
						beforePickIncrement = pluckAmp / beforeLength;
 8004aa8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004aac:	ee89 6a87 	vdiv.f32	s12, s19, s14
					if (afterLength > 0)
 8004ab0:	ee17 0a90 	vmov	r0, s15
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	dd03      	ble.n	8004ac0 <audioFrame+0x9fc>
						afterPickIncrement = pluckAmp / afterLength;
 8004ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abc:	eec9 9aa7 	vdiv.f32	s19, s19, s15
					for (int j = 0; j < delayLength; j++)
 8004ac0:	2a00      	cmp	r2, #0
 8004ac2:	dd36      	ble.n	8004b32 <audioFrame+0xa6e>
					float value = 0.0f;
 8004ac4:	eddf 7a26 	vldr	s15, [pc, #152]	; 8004b60 <audioFrame+0xa9c>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 8004ac8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
					float value = 0.0f;
 8004acc:	9803      	ldr	r0, [sp, #12]
 8004ace:	e01d      	b.n	8004b0c <audioFrame+0xa48>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
 8004ad0:	6add      	ldr	r5, [r3, #44]	; 0x2c
							value += beforePickIncrement;
 8004ad2:	ee77 7a86 	vadd.f32	s15, s15, s12
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
 8004ad6:	69ab      	ldr	r3, [r5, #24]
 8004ad8:	68ac      	ldr	r4, [r5, #8]
 8004ada:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8004ade:	4443      	add	r3, r8
 8004ae0:	4023      	ands	r3, r4
 8004ae2:	686c      	ldr	r4, [r5, #4]
 8004ae4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ae8:	ed83 7a00 	vstr	s14, [r3]
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
 8004aec:	6803      	ldr	r3, [r0, #0]
 8004aee:	6b9d      	ldr	r5, [r3, #56]	; 0x38
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8004af0:	69ab      	ldr	r3, [r5, #24]
 8004af2:	68ac      	ldr	r4, [r5, #8]
 8004af4:	4443      	add	r3, r8
					for (int j = 0; j < delayLength; j++)
 8004af6:	f108 0801 	add.w	r8, r8, #1
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8004afa:	4023      	ands	r3, r4
 8004afc:	686c      	ldr	r4, [r5, #4]
					for (int j = 0; j < delayLength; j++)
 8004afe:	4542      	cmp	r2, r8
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8004b00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b04:	ed83 7a00 	vstr	s14, [r3]
					for (int j = 0; j < delayLength; j++)
 8004b08:	d013      	beq.n	8004b32 <audioFrame+0xa6e>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
 8004b0a:	6803      	ldr	r3, [r0, #0]
						if (j < beforeLength)
 8004b0c:	4541      	cmp	r1, r8
 8004b0e:	dcdf      	bgt.n	8004ad0 <audioFrame+0xa0c>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 8004b10:	6b1d      	ldr	r5, [r3, #48]	; 0x30
							value -= afterPickIncrement;
 8004b12:	ee77 7ae9 	vsub.f32	s15, s15, s19
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 8004b16:	69ab      	ldr	r3, [r5, #24]
 8004b18:	68ac      	ldr	r4, [r5, #8]
 8004b1a:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8004b1e:	4443      	add	r3, r8
 8004b20:	4023      	ands	r3, r4
 8004b22:	686c      	ldr	r4, [r5, #4]
 8004b24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b28:	ed83 7a00 	vstr	s14, [r3]
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8004b2c:	6803      	ldr	r3, [r0, #0]
 8004b2e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8004b30:	e7de      	b.n	8004af0 <audioFrame+0xa2c>
					tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
 8004b32:	9b07      	ldr	r3, [sp, #28]
 8004b34:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004b64 <audioFrame+0xaa0>
 8004b38:	ed93 0a03 	vldr	s0, [r3, #12]
 8004b3c:	9803      	ldr	r0, [sp, #12]
 8004b3e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004b42:	f017 fe99 	bl	801c878 <tLivingString2_setDecay>
		for (int i = 0; i < numStringsThisBoard; i++)
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <audioFrame+0xaa4>)
			previousStringInputs[i] = stringInputs[i];
 8004b48:	6834      	ldr	r4, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 8004b4a:	781a      	ldrb	r2, [r3, #0]
 8004b4c:	f7ff bb0b 	b.w	8004166 <audioFrame+0xa2>
						beforePickIncrement = pluckAmp;
 8004b50:	eeb0 6a69 	vmov.f32	s12, s19
 8004b54:	e7ac      	b.n	8004ab0 <audioFrame+0x9ec>
 8004b56:	bf00      	nop
 8004b58:	20004fcc 	.word	0x20004fcc
 8004b5c:	200050dc 	.word	0x200050dc
 8004b60:	00000000 	.word	0x00000000
 8004b64:	43fa0000 	.word	0x43fa0000
 8004b68:	20000012 	.word	0x20000012

08004b6c <HAL_SPI_RxCpltCallback>:




void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b6c:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;
	if (hspi == &hspi5)
 8004b6e:	4b86      	ldr	r3, [pc, #536]	; (8004d88 <HAL_SPI_RxCpltCallback+0x21c>)
	interrupted = 1;
 8004b70:	2101      	movs	r1, #1
 8004b72:	4a86      	ldr	r2, [pc, #536]	; (8004d8c <HAL_SPI_RxCpltCallback+0x220>)
{
 8004b74:	4604      	mov	r4, r0
	if (hspi == &hspi5)
 8004b76:	4298      	cmp	r0, r3
	interrupted = 1;
 8004b78:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 8004b7a:	d019      	beq.n	8004bb0 <HAL_SPI_RxCpltCallback+0x44>
			}
		}
		newPluck = 1;
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
	}
	if (hspi == &hspi2)
 8004b7c:	4b84      	ldr	r3, [pc, #528]	; (8004d90 <HAL_SPI_RxCpltCallback+0x224>)
 8004b7e:	429c      	cmp	r4, r3
 8004b80:	d00d      	beq.n	8004b9e <HAL_SPI_RxCpltCallback+0x32>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 8004b82:	4b84      	ldr	r3, [pc, #528]	; (8004d94 <HAL_SPI_RxCpltCallback+0x228>)
 8004b84:	429c      	cmp	r4, r3
 8004b86:	d000      	beq.n	8004b8a <HAL_SPI_RxCpltCallback+0x1e>
			levers[1][i] = SPI_LEVERS[i];
		}
		*/
		newLevers = 1;
	}
}
 8004b88:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8004b8a:	4b83      	ldr	r3, [pc, #524]	; (8004d98 <HAL_SPI_RxCpltCallback+0x22c>)
 8004b8c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8004b90:	2afe      	cmp	r2, #254	; 0xfe
 8004b92:	f000 80f0 	beq.w	8004d76 <HAL_SPI_RxCpltCallback+0x20a>
		newLevers = 1;
 8004b96:	4b81      	ldr	r3, [pc, #516]	; (8004d9c <HAL_SPI_RxCpltCallback+0x230>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
}
 8004b9c:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 8004b9e:	4b80      	ldr	r3, [pc, #512]	; (8004da0 <HAL_SPI_RxCpltCallback+0x234>)
 8004ba0:	7b9a      	ldrb	r2, [r3, #14]
 8004ba2:	2afe      	cmp	r2, #254	; 0xfe
 8004ba4:	f000 80d7 	beq.w	8004d56 <HAL_SPI_RxCpltCallback+0x1ea>
		newBar = 1;
 8004ba8:	4b7e      	ldr	r3, [pc, #504]	; (8004da4 <HAL_SPI_RxCpltCallback+0x238>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e7e8      	b.n	8004b82 <HAL_SPI_RxCpltCallback+0x16>
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
 8004bb0:	4b7d      	ldr	r3, [pc, #500]	; (8004da8 <HAL_SPI_RxCpltCallback+0x23c>)
 8004bb2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004bb6:	2afe      	cmp	r2, #254	; 0xfe
 8004bb8:	d008      	beq.n	8004bcc <HAL_SPI_RxCpltCallback+0x60>
		newPluck = 1;
 8004bba:	4b7c      	ldr	r3, [pc, #496]	; (8004dac <HAL_SPI_RxCpltCallback+0x240>)
 8004bbc:	2001      	movs	r0, #1
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8004bbe:	2234      	movs	r2, #52	; 0x34
 8004bc0:	4979      	ldr	r1, [pc, #484]	; (8004da8 <HAL_SPI_RxCpltCallback+0x23c>)
		newPluck = 1;
 8004bc2:	6018      	str	r0, [r3, #0]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8004bc4:	4870      	ldr	r0, [pc, #448]	; (8004d88 <HAL_SPI_RxCpltCallback+0x21c>)
 8004bc6:	f00a fb47 	bl	800f258 <HAL_SPI_Receive_DMA>
 8004bca:	e7d7      	b.n	8004b7c <HAL_SPI_RxCpltCallback+0x10>
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
 8004bcc:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8004bd0:	2afd      	cmp	r2, #253	; 0xfd
 8004bd2:	d1f2      	bne.n	8004bba <HAL_SPI_RxCpltCallback+0x4e>
			for (int i = 0; i < numStringsThisBoard; i++)
 8004bd4:	4a76      	ldr	r2, [pc, #472]	; (8004db0 <HAL_SPI_RxCpltCallback+0x244>)
 8004bd6:	7811      	ldrb	r1, [r2, #0]
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	d0ee      	beq.n	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004bdc:	4a75      	ldr	r2, [pc, #468]	; (8004db4 <HAL_SPI_RxCpltCallback+0x248>)
			for (int i = 0; i < numStringsThisBoard; i++)
 8004bde:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004be0:	6810      	ldr	r0, [r2, #0]
 8004be2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004be6:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
 8004bea:	6810      	ldr	r0, [r2, #0]
 8004bec:	f100 0011 	add.w	r0, r0, #17
 8004bf0:	f813 5010 	ldrb.w	r5, [r3, r0, lsl #1]
 8004bf4:	4870      	ldr	r0, [pc, #448]	; (8004db8 <HAL_SPI_RxCpltCallback+0x24c>)
 8004bf6:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004bfa:	6005      	str	r5, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004bfc:	d0dd      	beq.n	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004bfe:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004c00:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004c02:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004c06:	f895 c023 	ldrb.w	ip, [r5, #35]	; 0x23
 8004c0a:	6815      	ldr	r5, [r2, #0]
 8004c0c:	f105 0512 	add.w	r5, r5, #18
 8004c10:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004c14:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004c18:	6045      	str	r5, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004c1a:	d0ce      	beq.n	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004c1c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004c1e:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004c20:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004c24:	f895 c025 	ldrb.w	ip, [r5, #37]	; 0x25
 8004c28:	6815      	ldr	r5, [r2, #0]
 8004c2a:	f105 0513 	add.w	r5, r5, #19
 8004c2e:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004c32:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004c36:	6085      	str	r5, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004c38:	d0bf      	beq.n	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004c3a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004c3c:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004c3e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004c42:	f895 c027 	ldrb.w	ip, [r5, #39]	; 0x27
 8004c46:	6815      	ldr	r5, [r2, #0]
 8004c48:	f105 0514 	add.w	r5, r5, #20
 8004c4c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004c50:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004c54:	60c5      	str	r5, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004c56:	d0b0      	beq.n	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004c58:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004c5a:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004c5c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004c60:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 8004c64:	6815      	ldr	r5, [r2, #0]
 8004c66:	f105 0515 	add.w	r5, r5, #21
 8004c6a:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004c6e:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004c72:	6105      	str	r5, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004c74:	d0a1      	beq.n	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004c76:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004c78:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004c7a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004c7e:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
 8004c82:	6815      	ldr	r5, [r2, #0]
 8004c84:	f105 0516 	add.w	r5, r5, #22
 8004c88:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004c8c:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004c90:	6145      	str	r5, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004c92:	d092      	beq.n	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004c94:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004c96:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004c98:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004c9c:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
 8004ca0:	6815      	ldr	r5, [r2, #0]
 8004ca2:	f105 0517 	add.w	r5, r5, #23
 8004ca6:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004caa:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004cae:	6185      	str	r5, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004cb0:	d083      	beq.n	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004cb2:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004cb4:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004cb6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004cba:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
 8004cbe:	6815      	ldr	r5, [r2, #0]
 8004cc0:	f105 0518 	add.w	r5, r5, #24
 8004cc4:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004cc8:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004ccc:	61c5      	str	r5, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004cce:	f43f af74 	beq.w	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004cd2:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004cd4:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004cd6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004cda:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
 8004cde:	6815      	ldr	r5, [r2, #0]
 8004ce0:	f105 0519 	add.w	r5, r5, #25
 8004ce4:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004ce8:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004cec:	6205      	str	r5, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004cee:	f43f af64 	beq.w	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004cf2:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004cf4:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004cf6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004cfa:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
 8004cfe:	6815      	ldr	r5, [r2, #0]
 8004d00:	f105 051a 	add.w	r5, r5, #26
 8004d04:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004d08:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004d0c:	6245      	str	r5, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 8004d0e:	f43f af54 	beq.w	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004d12:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004d14:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004d16:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004d1a:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
 8004d1e:	6815      	ldr	r5, [r2, #0]
 8004d20:	f105 051b 	add.w	r5, r5, #27
 8004d24:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004d28:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004d2c:	6285      	str	r5, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 8004d2e:	f43f af44 	beq.w	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004d32:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004d34:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004d36:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004d3a:	f895 c037 	ldrb.w	ip, [r5, #55]	; 0x37
 8004d3e:	6815      	ldr	r5, [r2, #0]
 8004d40:	f105 051c 	add.w	r5, r5, #28
 8004d44:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 8004d48:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8004d4c:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 8004d4e:	f43f af34 	beq.w	8004bba <HAL_SPI_RxCpltCallback+0x4e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 8004d56:	7bda      	ldrb	r2, [r3, #15]
 8004d58:	2afd      	cmp	r2, #253	; 0xfd
 8004d5a:	f47f af25 	bne.w	8004ba8 <HAL_SPI_RxCpltCallback+0x3c>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + 8] << 8) + ((uint16_t)SPI_RX[(j * 2) + 9] & 0xff);
 8004d5e:	7a98      	ldrb	r0, [r3, #10]
 8004d60:	7a1d      	ldrb	r5, [r3, #8]
 8004d62:	7a5a      	ldrb	r2, [r3, #9]
 8004d64:	7ad9      	ldrb	r1, [r3, #11]
 8004d66:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8004d6a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8004d6e:	4813      	ldr	r0, [pc, #76]	; (8004dbc <HAL_SPI_RxCpltCallback+0x250>)
 8004d70:	e9c0 2100 	strd	r2, r1, [r0]
			for (int j = 0; j < 2; j++)
 8004d74:	e718      	b.n	8004ba8 <HAL_SPI_RxCpltCallback+0x3c>
		if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8004d76:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d7a:	2bfd      	cmp	r3, #253	; 0xfd
 8004d7c:	f47f af0b 	bne.w	8004b96 <HAL_SPI_RxCpltCallback+0x2a>
			handleSPI(LEVER_BUFFER_SIZE);
 8004d80:	2020      	movs	r0, #32
 8004d82:	f001 fa1d 	bl	80061c0 <handleSPI>
			newLevers = 1;
 8004d86:	e706      	b.n	8004b96 <HAL_SPI_RxCpltCallback+0x2a>
 8004d88:	20019688 	.word	0x20019688
 8004d8c:	200050b4 	.word	0x200050b4
 8004d90:	20019600 	.word	0x20019600
 8004d94:	20019578 	.word	0x20019578
 8004d98:	30000100 	.word	0x30000100
 8004d9c:	20005414 	.word	0x20005414
 8004da0:	30000180 	.word	0x30000180
 8004da4:	20005410 	.word	0x20005410
 8004da8:	300001a0 	.word	0x300001a0
 8004dac:	20005418 	.word	0x20005418
 8004db0:	20000012 	.word	0x20000012
 8004db4:	2000500c 	.word	0x2000500c
 8004db8:	20012ebc 	.word	0x20012ebc
 8004dbc:	20012efc 	.word	0x20012efc

08004dc0 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004dc0:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;

	if (hspi == &hspi5)
 8004dc2:	4b80      	ldr	r3, [pc, #512]	; (8004fc4 <HAL_SPI_RxHalfCpltCallback+0x204>)
	interrupted = 1;
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	4a80      	ldr	r2, [pc, #512]	; (8004fc8 <HAL_SPI_RxHalfCpltCallback+0x208>)
	if (hspi == &hspi5)
 8004dc8:	4298      	cmp	r0, r3
	interrupted = 1;
 8004dca:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 8004dcc:	d01d      	beq.n	8004e0a <HAL_SPI_RxHalfCpltCallback+0x4a>
			}
		}
		newPluck = 1;

	}
	if (hspi == &hspi2)
 8004dce:	4b7f      	ldr	r3, [pc, #508]	; (8004fcc <HAL_SPI_RxHalfCpltCallback+0x20c>)
 8004dd0:	4298      	cmp	r0, r3
 8004dd2:	d011      	beq.n	8004df8 <HAL_SPI_RxHalfCpltCallback+0x38>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 8004dd4:	4b7e      	ldr	r3, [pc, #504]	; (8004fd0 <HAL_SPI_RxHalfCpltCallback+0x210>)
 8004dd6:	4298      	cmp	r0, r3
 8004dd8:	d000      	beq.n	8004ddc <HAL_SPI_RxHalfCpltCallback+0x1c>
		{
			handleSPI(0);
			newLevers = 1;
		}
	}
}
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8004ddc:	4b7d      	ldr	r3, [pc, #500]	; (8004fd4 <HAL_SPI_RxHalfCpltCallback+0x214>)
 8004dde:	7f9a      	ldrb	r2, [r3, #30]
 8004de0:	2afe      	cmp	r2, #254	; 0xfe
 8004de2:	d1fa      	bne.n	8004dda <HAL_SPI_RxHalfCpltCallback+0x1a>
 8004de4:	7fdb      	ldrb	r3, [r3, #31]
 8004de6:	2bfd      	cmp	r3, #253	; 0xfd
 8004de8:	d1f7      	bne.n	8004dda <HAL_SPI_RxHalfCpltCallback+0x1a>
			handleSPI(0);
 8004dea:	2000      	movs	r0, #0
 8004dec:	f001 f9e8 	bl	80061c0 <handleSPI>
			newLevers = 1;
 8004df0:	4b79      	ldr	r3, [pc, #484]	; (8004fd8 <HAL_SPI_RxHalfCpltCallback+0x218>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
}
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8004df8:	4b78      	ldr	r3, [pc, #480]	; (8004fdc <HAL_SPI_RxHalfCpltCallback+0x21c>)
 8004dfa:	799a      	ldrb	r2, [r3, #6]
 8004dfc:	2afe      	cmp	r2, #254	; 0xfe
 8004dfe:	f000 80d0 	beq.w	8004fa2 <HAL_SPI_RxHalfCpltCallback+0x1e2>
		newBar = 1;
 8004e02:	4b77      	ldr	r3, [pc, #476]	; (8004fe0 <HAL_SPI_RxHalfCpltCallback+0x220>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	e7e4      	b.n	8004dd4 <HAL_SPI_RxHalfCpltCallback+0x14>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
 8004e0a:	4b76      	ldr	r3, [pc, #472]	; (8004fe4 <HAL_SPI_RxHalfCpltCallback+0x224>)
 8004e0c:	781a      	ldrb	r2, [r3, #0]
 8004e0e:	2afe      	cmp	r2, #254	; 0xfe
 8004e10:	d003      	beq.n	8004e1a <HAL_SPI_RxHalfCpltCallback+0x5a>
		newPluck = 1;
 8004e12:	4b75      	ldr	r3, [pc, #468]	; (8004fe8 <HAL_SPI_RxHalfCpltCallback+0x228>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e7d9      	b.n	8004dce <HAL_SPI_RxHalfCpltCallback+0xe>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
 8004e1a:	7fda      	ldrb	r2, [r3, #31]
 8004e1c:	2afd      	cmp	r2, #253	; 0xfd
 8004e1e:	d1f8      	bne.n	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e20:	4a72      	ldr	r2, [pc, #456]	; (8004fec <HAL_SPI_RxHalfCpltCallback+0x22c>)
 8004e22:	7811      	ldrb	r1, [r2, #0]
 8004e24:	2900      	cmp	r1, #0
 8004e26:	d0f4      	beq.n	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004e28:	4a71      	ldr	r2, [pc, #452]	; (8004ff0 <HAL_SPI_RxHalfCpltCallback+0x230>)
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e2a:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004e2c:	6814      	ldr	r4, [r2, #0]
 8004e2e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8004e32:	f894 c001 	ldrb.w	ip, [r4, #1]
 8004e36:	6814      	ldr	r4, [r2, #0]
 8004e38:	f104 0401 	add.w	r4, r4, #1
 8004e3c:	f813 5014 	ldrb.w	r5, [r3, r4, lsl #1]
 8004e40:	4c6c      	ldr	r4, [pc, #432]	; (8004ff4 <HAL_SPI_RxHalfCpltCallback+0x234>)
 8004e42:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004e46:	6025      	str	r5, [r4, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e48:	d0e3      	beq.n	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004e4a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e4c:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004e4e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004e52:	f895 c003 	ldrb.w	ip, [r5, #3]
 8004e56:	6815      	ldr	r5, [r2, #0]
 8004e58:	f105 0502 	add.w	r5, r5, #2
 8004e5c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004e60:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004e64:	6065      	str	r5, [r4, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e66:	d0d4      	beq.n	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004e68:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e6a:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004e6c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004e70:	f895 c005 	ldrb.w	ip, [r5, #5]
 8004e74:	6815      	ldr	r5, [r2, #0]
 8004e76:	f105 0503 	add.w	r5, r5, #3
 8004e7a:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004e7e:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004e82:	60a5      	str	r5, [r4, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e84:	d0c5      	beq.n	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004e86:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e88:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004e8a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004e8e:	f895 c007 	ldrb.w	ip, [r5, #7]
 8004e92:	6815      	ldr	r5, [r2, #0]
 8004e94:	f105 0504 	add.w	r5, r5, #4
 8004e98:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004e9c:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004ea0:	60e5      	str	r5, [r4, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004ea2:	d0b6      	beq.n	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004ea4:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004ea6:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004ea8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004eac:	f895 c009 	ldrb.w	ip, [r5, #9]
 8004eb0:	6815      	ldr	r5, [r2, #0]
 8004eb2:	f105 0505 	add.w	r5, r5, #5
 8004eb6:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004eba:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004ebe:	6125      	str	r5, [r4, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004ec0:	d0a7      	beq.n	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004ec2:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004ec4:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004ec6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004eca:	f895 c00b 	ldrb.w	ip, [r5, #11]
 8004ece:	6815      	ldr	r5, [r2, #0]
 8004ed0:	f105 0506 	add.w	r5, r5, #6
 8004ed4:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004ed8:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004edc:	6165      	str	r5, [r4, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004ede:	d098      	beq.n	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004ee0:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004ee2:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004ee4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004ee8:	f895 c00d 	ldrb.w	ip, [r5, #13]
 8004eec:	6815      	ldr	r5, [r2, #0]
 8004eee:	f105 0507 	add.w	r5, r5, #7
 8004ef2:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004ef6:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004efa:	61a5      	str	r5, [r4, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004efc:	d089      	beq.n	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004efe:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f00:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004f02:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004f06:	f895 c00f 	ldrb.w	ip, [r5, #15]
 8004f0a:	6815      	ldr	r5, [r2, #0]
 8004f0c:	f105 0508 	add.w	r5, r5, #8
 8004f10:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004f14:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004f18:	61e5      	str	r5, [r4, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f1a:	f43f af7a 	beq.w	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004f1e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f20:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004f22:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004f26:	f895 c011 	ldrb.w	ip, [r5, #17]
 8004f2a:	6815      	ldr	r5, [r2, #0]
 8004f2c:	f105 0509 	add.w	r5, r5, #9
 8004f30:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004f34:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004f38:	6225      	str	r5, [r4, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f3a:	f43f af6a 	beq.w	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004f3e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f40:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004f42:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004f46:	f895 c013 	ldrb.w	ip, [r5, #19]
 8004f4a:	6815      	ldr	r5, [r2, #0]
 8004f4c:	f105 050a 	add.w	r5, r5, #10
 8004f50:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004f54:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004f58:	6265      	str	r5, [r4, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f5a:	f43f af5a 	beq.w	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004f5e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f60:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004f62:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004f66:	f895 c015 	ldrb.w	ip, [r5, #21]
 8004f6a:	6815      	ldr	r5, [r2, #0]
 8004f6c:	f105 050b 	add.w	r5, r5, #11
 8004f70:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004f74:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004f78:	62a5      	str	r5, [r4, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f7a:	f43f af4a 	beq.w	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004f7e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f80:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004f82:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004f86:	f895 c017 	ldrb.w	ip, [r5, #23]
 8004f8a:	6815      	ldr	r5, [r2, #0]
 8004f8c:	f105 050c 	add.w	r5, r5, #12
 8004f90:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 8004f94:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8004f98:	62e3      	str	r3, [r4, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f9a:	f43f af3a 	beq.w	8004e12 <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004f9e:	6813      	ldr	r3, [r2, #0]
 8004fa0:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8004fa2:	79da      	ldrb	r2, [r3, #7]
 8004fa4:	2afd      	cmp	r2, #253	; 0xfd
 8004fa6:	f47f af2c 	bne.w	8004e02 <HAL_SPI_RxHalfCpltCallback+0x42>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2)] << 8) + ((uint16_t)SPI_RX[(j * 2) + 1] & 0xff);
 8004faa:	789c      	ldrb	r4, [r3, #2]
 8004fac:	781d      	ldrb	r5, [r3, #0]
 8004fae:	785a      	ldrb	r2, [r3, #1]
 8004fb0:	78d9      	ldrb	r1, [r3, #3]
 8004fb2:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8004fb6:	eb01 2104 	add.w	r1, r1, r4, lsl #8
 8004fba:	4c0f      	ldr	r4, [pc, #60]	; (8004ff8 <HAL_SPI_RxHalfCpltCallback+0x238>)
 8004fbc:	e9c4 2100 	strd	r2, r1, [r4]
			for (int j = 0; j < 2; j++)
 8004fc0:	e71f      	b.n	8004e02 <HAL_SPI_RxHalfCpltCallback+0x42>
 8004fc2:	bf00      	nop
 8004fc4:	20019688 	.word	0x20019688
 8004fc8:	200050b4 	.word	0x200050b4
 8004fcc:	20019600 	.word	0x20019600
 8004fd0:	20019578 	.word	0x20019578
 8004fd4:	30000100 	.word	0x30000100
 8004fd8:	20005414 	.word	0x20005414
 8004fdc:	30000180 	.word	0x30000180
 8004fe0:	20005410 	.word	0x20005410
 8004fe4:	300001a0 	.word	0x300001a0
 8004fe8:	20005418 	.word	0x20005418
 8004fec:	20000012 	.word	0x20000012
 8004ff0:	2000500c 	.word	0x2000500c
 8004ff4:	20012ebc 	.word	0x20012ebc
 8004ff8:	20012efc 	.word	0x20012efc

08004ffc <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ffc:	b508      	push	{r3, lr}
	interrupted = 1;

	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <HAL_SPI_TxRxCpltCallback+0x2c>)
	interrupted = 1;
 8005000:	2001      	movs	r0, #1
 8005002:	490a      	ldr	r1, [pc, #40]	; (800502c <HAL_SPI_TxRxCpltCallback+0x30>)
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8005004:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	interrupted = 1;
 8005008:	7008      	strb	r0, [r1, #0]
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 800500a:	2afe      	cmp	r2, #254	; 0xfe
 800500c:	d003      	beq.n	8005016 <HAL_SPI_TxRxCpltCallback+0x1a>
	{
		handleSPI(LEVER_BUFFER_SIZE);
		newLevers = 1;
	}
	newLevers = 1;
 800500e:	4b08      	ldr	r3, [pc, #32]	; (8005030 <HAL_SPI_TxRxCpltCallback+0x34>)
 8005010:	2201      	movs	r2, #1
 8005012:	601a      	str	r2, [r3, #0]
}
 8005014:	bd08      	pop	{r3, pc}
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8005016:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800501a:	2bfd      	cmp	r3, #253	; 0xfd
 800501c:	d1f7      	bne.n	800500e <HAL_SPI_TxRxCpltCallback+0x12>
		handleSPI(LEVER_BUFFER_SIZE);
 800501e:	2020      	movs	r0, #32
 8005020:	f001 f8ce 	bl	80061c0 <handleSPI>
		newLevers = 1;
 8005024:	e7f3      	b.n	800500e <HAL_SPI_TxRxCpltCallback+0x12>
 8005026:	bf00      	nop
 8005028:	30000100 	.word	0x30000100
 800502c:	200050b4 	.word	0x200050b4
 8005030:	20005414 	.word	0x20005414

08005034 <HAL_SPI_TxRxHalfCpltCallback>:
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8005034:	4b08      	ldr	r3, [pc, #32]	; (8005058 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
	interrupted = 1;
 8005036:	4909      	ldr	r1, [pc, #36]	; (800505c <HAL_SPI_TxRxHalfCpltCallback+0x28>)
{
 8005038:	b510      	push	{r4, lr}
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 800503a:	7f9a      	ldrb	r2, [r3, #30]
	interrupted = 1;
 800503c:	2401      	movs	r4, #1
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 800503e:	2afe      	cmp	r2, #254	; 0xfe
	interrupted = 1;
 8005040:	700c      	strb	r4, [r1, #0]
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8005042:	d000      	beq.n	8005046 <HAL_SPI_TxRxHalfCpltCallback+0x12>
	{
		handleSPI(0);
		newLevers = 1;
	}
}
 8005044:	bd10      	pop	{r4, pc}
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8005046:	7fdb      	ldrb	r3, [r3, #31]
 8005048:	2bfd      	cmp	r3, #253	; 0xfd
 800504a:	d1fb      	bne.n	8005044 <HAL_SPI_TxRxHalfCpltCallback+0x10>
		handleSPI(0);
 800504c:	2000      	movs	r0, #0
 800504e:	f001 f8b7 	bl	80061c0 <handleSPI>
		newLevers = 1;
 8005052:	4b03      	ldr	r3, [pc, #12]	; (8005060 <HAL_SPI_TxRxHalfCpltCallback+0x2c>)
 8005054:	601c      	str	r4, [r3, #0]
}
 8005056:	bd10      	pop	{r4, pc}
 8005058:	30000100 	.word	0x30000100
 800505c:	200050b4 	.word	0x200050b4
 8005060:	20005414 	.word	0x20005414

08005064 <HAL_SAI_TxCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <HAL_SAI_TxCpltCallback+0x10>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b103      	cbz	r3, 800506c <HAL_SAI_TxCpltCallback+0x8>
	audioFrame(HALF_BUFFER_SIZE);
}
 800506a:	4770      	bx	lr
	audioFrame(HALF_BUFFER_SIZE);
 800506c:	2010      	movs	r0, #16
 800506e:	f7ff b829 	b.w	80040c4 <audioFrame>
 8005072:	bf00      	nop
 8005074:	20013088 	.word	0x20013088

08005078 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 8005078:	4b02      	ldr	r3, [pc, #8]	; (8005084 <HAL_SAI_TxHalfCpltCallback+0xc>)
 800507a:	7818      	ldrb	r0, [r3, #0]
 800507c:	b100      	cbz	r0, 8005080 <HAL_SAI_TxHalfCpltCallback+0x8>
	audioFrame(0);
}
 800507e:	4770      	bx	lr
	audioFrame(0);
 8005080:	f7ff b820 	b.w	80040c4 <audioFrame>
 8005084:	20013088 	.word	0x20013088

08005088 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop

0800508c <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 800508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8005090:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8005092:	b082      	sub	sp, #8
 8005094:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8005096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800509a:	483b      	ldr	r0, [pc, #236]	; (8005188 <AudioCodec_init+0xfc>)
 800509c:	f005 fbda 	bl	800a854 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 80050a0:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 80050a2:	4c3a      	ldr	r4, [pc, #232]	; (800518c <AudioCodec_init+0x100>)
	HAL_Delay(2);
 80050a4:	f003 fe2a 	bl	8008cfc <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050a8:	4f39      	ldr	r7, [pc, #228]	; (8005190 <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 80050aa:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050ae:	4e39      	ldr	r6, [pc, #228]	; (8005194 <AudioCodec_init+0x108>)
 80050b0:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 80050b2:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050b4:	2120      	movs	r1, #32
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	4628      	mov	r0, r5
 80050ba:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800519c <AudioCodec_init+0x110>
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	8833      	ldrh	r3, [r6, #0]
 80050c2:	f005 fcf1 	bl	800aaa8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050ca:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050ce:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 80050d0:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050d4:	2120      	movs	r1, #32
 80050d6:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 80050d8:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050da:	8833      	ldrh	r3, [r6, #0]
 80050dc:	f005 fce4 	bl	800aaa8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050e4:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050e8:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 80050ea:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050ec:	2120      	movs	r1, #32
 80050ee:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 80050f0:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050f2:	8833      	ldrh	r3, [r6, #0]
 80050f4:	f005 fcd8 	bl	800aaa8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80050fc:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005100:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 8005102:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005106:	2120      	movs	r1, #32
 8005108:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 800510a:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800510c:	8833      	ldrh	r3, [r6, #0]
 800510e:	f005 fccb 	bl	800aaa8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005116:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800511a:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 800511c:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005120:	2120      	movs	r1, #32
 8005122:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 8005124:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005126:	8833      	ldrh	r3, [r6, #0]
 8005128:	f005 fcbe 	bl	800aaa8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005130:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005134:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 8005136:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800513a:	2120      	movs	r1, #32
 800513c:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 800513e:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005140:	8833      	ldrh	r3, [r6, #0]
 8005142:	f005 fcb1 	bl	800aaa8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800514a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800514e:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 8005150:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005154:	2120      	movs	r1, #32
 8005156:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8005158:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800515a:	8833      	ldrh	r3, [r6, #0]
 800515c:	f005 fca4 	bl	800aaa8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005160:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 8005162:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005166:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005168:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800516c:	4628      	mov	r0, r5
 800516e:	9200      	str	r2, [sp, #0]
 8005170:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8005172:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005174:	2120      	movs	r1, #32
 8005176:	f005 fc97 	bl	800aaa8 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 800517a:	4b07      	ldr	r3, [pc, #28]	; (8005198 <AudioCodec_init+0x10c>)
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]

}
 8005180:	b002      	add	sp, #8
 8005182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005186:	bf00      	nop
 8005188:	58020800 	.word	0x58020800
 800518c:	20012fb8 	.word	0x20012fb8
 8005190:	200006d4 	.word	0x200006d4
 8005194:	200006d8 	.word	0x200006d8
 8005198:	20000ae4 	.word	0x20000ae4
 800519c:	20012fba 	.word	0x20012fba

080051a0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051a0:	4b20      	ldr	r3, [pc, #128]	; (8005224 <MX_DMA_Init+0x84>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 80051a2:	210b      	movs	r1, #11
 80051a4:	2200      	movs	r2, #0
 80051a6:	4608      	mov	r0, r1
{
 80051a8:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051aa:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 80051ae:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051b0:	f044 0401 	orr.w	r4, r4, #1
 80051b4:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 80051b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 80051c4:	f003 fdce 	bl	8008d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80051c8:	200b      	movs	r0, #11
 80051ca:	f003 fe09 	bl	8008de0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 80051ce:	2200      	movs	r2, #0
 80051d0:	210a      	movs	r1, #10
 80051d2:	200c      	movs	r0, #12
 80051d4:	f003 fdc6 	bl	8008d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80051d8:	200c      	movs	r0, #12
 80051da:	f003 fe01 	bl	8008de0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 80051de:	2200      	movs	r2, #0
 80051e0:	2109      	movs	r1, #9
 80051e2:	200d      	movs	r0, #13
 80051e4:	f003 fdbe 	bl	8008d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80051e8:	200d      	movs	r0, #13
 80051ea:	f003 fdf9 	bl	8008de0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 80051ee:	2200      	movs	r2, #0
 80051f0:	2108      	movs	r1, #8
 80051f2:	200e      	movs	r0, #14
 80051f4:	f003 fdb6 	bl	8008d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80051f8:	200e      	movs	r0, #14
 80051fa:	f003 fdf1 	bl	8008de0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 80051fe:	2200      	movs	r2, #0
 8005200:	2107      	movs	r1, #7
 8005202:	200f      	movs	r0, #15
 8005204:	f003 fdae 	bl	8008d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005208:	200f      	movs	r0, #15
 800520a:	f003 fde9 	bl	8008de0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800520e:	2200      	movs	r2, #0
 8005210:	2010      	movs	r0, #16
 8005212:	4611      	mov	r1, r2
 8005214:	f003 fda6 	bl	8008d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005218:	2010      	movs	r0, #16

}
 800521a:	b002      	add	sp, #8
 800521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005220:	f003 bdde 	b.w	8008de0 <HAL_NVIC_EnableIRQ>
 8005224:	58024400 	.word	0x58024400

08005228 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005228:	481b      	ldr	r0, [pc, #108]	; (8005298 <MX_FMC_Init+0x70>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800522a:	2300      	movs	r3, #0
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
 800522c:	2206      	movs	r2, #6
  SdramTiming.LoadToActiveDelay = 2;
 800522e:	2102      	movs	r1, #2
{
 8005230:	b510      	push	{r4, lr}
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8005232:	6043      	str	r3, [r0, #4]
{
 8005234:	b088      	sub	sp, #32
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005236:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8005238:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 4;
 800523a:	2304      	movs	r3, #4
  SdramTiming.RowCycleDelay = 6;
 800523c:	9203      	str	r2, [sp, #12]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800523e:	4c17      	ldr	r4, [pc, #92]	; (800529c <MX_FMC_Init+0x74>)
  SdramTiming.LoadToActiveDelay = 2;
 8005240:	9100      	str	r1, [sp, #0]
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8005242:	9106      	str	r1, [sp, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005244:	4669      	mov	r1, sp
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005246:	6004      	str	r4, [r0, #0]
  SdramTiming.SelfRefreshTime = 4;
 8005248:	e9cd 2301 	strd	r2, r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 2;
 800524c:	2202      	movs	r2, #2
 800524e:	2302      	movs	r3, #2
 8005250:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8005254:	2201      	movs	r2, #1
 8005256:	2308      	movs	r3, #8
 8005258:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800525c:	2210      	movs	r2, #16
 800525e:	2340      	movs	r3, #64	; 0x40
 8005260:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8005264:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8005268:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800526c:	6203      	str	r3, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800526e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8005272:	6182      	str	r2, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8005274:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005276:	f009 fe5d 	bl	800ef34 <HAL_SDRAM_Init>
 800527a:	b928      	cbnz	r0, 8005288 <MX_FMC_Init+0x60>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800527c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8005280:	f003 fd54 	bl	8008d2c <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8005284:	b008      	add	sp, #32
 8005286:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8005288:	f003 f82e 	bl	80082e8 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800528c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8005290:	f003 fd4c 	bl	8008d2c <HAL_SetFMCMemorySwappingConfig>
}
 8005294:	b008      	add	sp, #32
 8005296:	bd10      	pop	{r4, pc}
 8005298:	20012fc0 	.word	0x20012fc0
 800529c:	52004140 	.word	0x52004140

080052a0 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 80052a0:	4836      	ldr	r0, [pc, #216]	; (800537c <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a2:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80052a4:	b5d0      	push	{r4, r6, r7, lr}
 80052a6:	b0b8      	sub	sp, #224	; 0xe0
  if (FMC_Initialized) {
 80052a8:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80052ae:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80052b2:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 80052b4:	b109      	cbz	r1, 80052ba <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80052b6:	b038      	add	sp, #224	; 0xe0
 80052b8:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 80052ba:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052bc:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 80052be:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052c0:	a80a      	add	r0, sp, #40	; 0x28
 80052c2:	f017 fe27 	bl	801cf14 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80052c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052ca:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052cc:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80052ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052d2:	f007 f84f 	bl	800c374 <HAL_RCCEx_PeriphCLKConfig>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d14c      	bne.n	8005374 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 80052da:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80052dc:	f64f 003f 	movw	r0, #63551	; 0xf83f
 80052e0:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80052e2:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80052e4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80052e8:	2600      	movs	r6, #0
 80052ea:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80052ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80052f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80052f8:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 80052fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80052fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8005302:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005304:	a902      	add	r1, sp, #8
 8005306:	481f      	ldr	r0, [pc, #124]	; (8005384 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005308:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800530a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800530e:	f005 f951 	bl	800a5b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8005312:	2219      	movs	r2, #25
 8005314:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005316:	a902      	add	r1, sp, #8
 8005318:	481b      	ldr	r0, [pc, #108]	; (8005388 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800531a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 800531c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005320:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005324:	f005 f946 	bl	800a5b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8005328:	f248 1237 	movw	r2, #33079	; 0x8137
 800532c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800532e:	a902      	add	r1, sp, #8
 8005330:	4816      	ldr	r0, [pc, #88]	; (800538c <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005332:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8005334:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005338:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800533c:	f005 f93a 	bl	800a5b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005340:	f64f 7283 	movw	r2, #65411	; 0xff83
 8005344:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005346:	a902      	add	r1, sp, #8
 8005348:	4811      	ldr	r0, [pc, #68]	; (8005390 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800534a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800534c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005350:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005354:	f005 f92e 	bl	800a5b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005358:	f24c 7203 	movw	r2, #50947	; 0xc703
 800535c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800535e:	a902      	add	r1, sp, #8
 8005360:	480c      	ldr	r0, [pc, #48]	; (8005394 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005362:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005364:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005368:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800536c:	f005 f922 	bl	800a5b4 <HAL_GPIO_Init>
}
 8005370:	b038      	add	sp, #224	; 0xe0
 8005372:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8005374:	f002 ffb8 	bl	80082e8 <Error_Handler>
 8005378:	e7af      	b.n	80052da <HAL_SDRAM_MspInit+0x3a>
 800537a:	bf00      	nop
 800537c:	20012fbc 	.word	0x20012fbc
 8005380:	58024400 	.word	0x58024400
 8005384:	58021400 	.word	0x58021400
 8005388:	58020800 	.word	0x58020800
 800538c:	58021800 	.word	0x58021800
 8005390:	58021000 	.word	0x58021000
 8005394:	58020c00 	.word	0x58020c00

08005398 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8005398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800539c:	4b79      	ldr	r3, [pc, #484]	; (8005584 <MX_GPIO_Init+0x1ec>)
{
 800539e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80053a2:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 800559c <MX_GPIO_Init+0x204>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80053a6:	4f78      	ldr	r7, [pc, #480]	; (8005588 <MX_GPIO_Init+0x1f0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80053a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ac:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80053ae:	4640      	mov	r0, r8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80053b0:	4e76      	ldr	r6, [pc, #472]	; (800558c <MX_GPIO_Init+0x1f4>)

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053b2:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053b4:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80053b8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053c0:	f042 0210 	orr.w	r2, r2, #16
 80053c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80053c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053cc:	f002 0210 	and.w	r2, r2, #16
 80053d0:	9200      	str	r2, [sp, #0]
 80053d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053d8:	f042 0204 	orr.w	r2, r2, #4
 80053dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80053e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053e4:	f002 0204 	and.w	r2, r2, #4
 80053e8:	9201      	str	r2, [sp, #4]
 80053ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80053ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053f0:	f042 0220 	orr.w	r2, r2, #32
 80053f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80053f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80053fc:	f002 0220 	and.w	r2, r2, #32
 8005400:	9202      	str	r2, [sp, #8]
 8005402:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005404:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005408:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800540c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005410:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005414:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005418:	9203      	str	r2, [sp, #12]
 800541a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800541c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005420:	f042 0201 	orr.w	r2, r2, #1
 8005424:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005428:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800542c:	f002 0201 	and.w	r2, r2, #1
 8005430:	9204      	str	r2, [sp, #16]
 8005432:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005434:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005438:	f042 0202 	orr.w	r2, r2, #2
 800543c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005440:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005444:	f002 0202 	and.w	r2, r2, #2
 8005448:	9205      	str	r2, [sp, #20]
 800544a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800544c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005454:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005458:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800545c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005460:	9206      	str	r2, [sp, #24]
 8005462:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005464:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005468:	f042 0208 	orr.w	r2, r2, #8
 800546c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8005470:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	9307      	str	r3, [sp, #28]
 800547c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800547e:	f005 f9e9 	bl	800a854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8005482:	4622      	mov	r2, r4
 8005484:	4638      	mov	r0, r7
 8005486:	2102      	movs	r1, #2
 8005488:	f005 f9e4 	bl	800a854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800548c:	4622      	mov	r2, r4
 800548e:	4630      	mov	r0, r6
 8005490:	2110      	movs	r1, #16
 8005492:	f005 f9df 	bl	800a854 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8005496:	f242 0220 	movw	r2, #8224	; 0x2020
 800549a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800549c:	a908      	add	r1, sp, #32
 800549e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054a0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80054a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054a6:	f005 f885 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80054aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054ae:	a908      	add	r1, sp, #32
 80054b0:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80054b2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b6:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054ba:	f005 f87b 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80054be:	f248 02c6 	movw	r2, #32966	; 0x80c6
 80054c2:	2303      	movs	r3, #3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054c4:	4640      	mov	r0, r8
 80054c6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80054ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054ce:	f005 f871 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80054d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054d6:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054d8:	a908      	add	r1, sp, #32
 80054da:	482d      	ldr	r0, [pc, #180]	; (8005590 <MX_GPIO_Init+0x1f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054dc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80054de:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054e2:	f005 f867 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80054e6:	2201      	movs	r2, #1
 80054e8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ea:	a908      	add	r1, sp, #32
 80054ec:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054ee:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80054f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054f4:	f005 f85e 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80054f8:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054fa:	a908      	add	r1, sp, #32
 80054fc:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80054fe:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005500:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005502:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005506:	f005 f855 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 800550a:	f649 720c 	movw	r2, #40716	; 0x9f0c
 800550e:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005510:	4638      	mov	r0, r7
 8005512:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005514:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8005516:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800551a:	f005 f84b 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 800551e:	f240 32e5 	movw	r2, #997	; 0x3e5
 8005522:	2303      	movs	r3, #3
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005524:	a908      	add	r1, sp, #32
 8005526:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005528:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 800552a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800552e:	f005 f841 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005532:	2202      	movs	r2, #2
 8005534:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005536:	a908      	add	r1, sp, #32
 8005538:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800553a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800553c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005540:	f005 f838 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8005544:	f643 02f8 	movw	r2, #14584	; 0x38f8
 8005548:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800554a:	a908      	add	r1, sp, #32
 800554c:	4811      	ldr	r0, [pc, #68]	; (8005594 <MX_GPIO_Init+0x1fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8005550:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005554:	f005 f82e 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8005558:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 800555c:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800555e:	a908      	add	r1, sp, #32
 8005560:	480d      	ldr	r0, [pc, #52]	; (8005598 <MX_GPIO_Init+0x200>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005562:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8005564:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005568:	f005 f824 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800556c:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800556e:	a908      	add	r1, sp, #32
 8005570:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005572:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005576:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800557a:	f005 f81b 	bl	800a5b4 <HAL_GPIO_Init>

}
 800557e:	b00e      	add	sp, #56	; 0x38
 8005580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005584:	58024400 	.word	0x58024400
 8005588:	58020000 	.word	0x58020000
 800558c:	58020400 	.word	0x58020400
 8005590:	58021400 	.word	0x58021400
 8005594:	58020c00 	.word	0x58020c00
 8005598:	58021800 	.word	0x58021800
 800559c:	58020800 	.word	0x58020800

080055a0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80055a0:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80055a2:	4817      	ldr	r0, [pc, #92]	; (8005600 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055a4:	2300      	movs	r3, #0
 80055a6:	4917      	ldr	r1, [pc, #92]	; (8005604 <MX_I2C2_Init+0x64>)
 80055a8:	2401      	movs	r4, #1
 80055aa:	4a17      	ldr	r2, [pc, #92]	; (8005608 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055ac:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055ae:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 80055b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055b6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80055ba:	f005 fa17 	bl	800a9ec <HAL_I2C_Init>
 80055be:	b950      	cbnz	r0, 80055d6 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80055c0:	2100      	movs	r1, #0
 80055c2:	480f      	ldr	r0, [pc, #60]	; (8005600 <MX_I2C2_Init+0x60>)
 80055c4:	f005 ff88 	bl	800b4d8 <HAL_I2CEx_ConfigAnalogFilter>
 80055c8:	b968      	cbnz	r0, 80055e6 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80055ca:	2100      	movs	r1, #0
 80055cc:	480c      	ldr	r0, [pc, #48]	; (8005600 <MX_I2C2_Init+0x60>)
 80055ce:	f005 ffb7 	bl	800b540 <HAL_I2CEx_ConfigDigitalFilter>
 80055d2:	b980      	cbnz	r0, 80055f6 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80055d4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80055d6:	f002 fe87 	bl	80082e8 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80055da:	2100      	movs	r1, #0
 80055dc:	4808      	ldr	r0, [pc, #32]	; (8005600 <MX_I2C2_Init+0x60>)
 80055de:	f005 ff7b 	bl	800b4d8 <HAL_I2CEx_ConfigAnalogFilter>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d0f1      	beq.n	80055ca <MX_I2C2_Init+0x2a>
    Error_Handler();
 80055e6:	f002 fe7f 	bl	80082e8 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80055ea:	2100      	movs	r1, #0
 80055ec:	4804      	ldr	r0, [pc, #16]	; (8005600 <MX_I2C2_Init+0x60>)
 80055ee:	f005 ffa7 	bl	800b540 <HAL_I2CEx_ConfigDigitalFilter>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d0ee      	beq.n	80055d4 <MX_I2C2_Init+0x34>
}
 80055f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80055fa:	f002 be75 	b.w	80082e8 <Error_Handler>
 80055fe:	bf00      	nop
 8005600:	20012ff4 	.word	0x20012ff4
 8005604:	40005800 	.word	0x40005800
 8005608:	00b03fdb 	.word	0x00b03fdb
 800560c:	00000000 	.word	0x00000000

08005610 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005610:	b510      	push	{r4, lr}
 8005612:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005614:	2100      	movs	r1, #0
{
 8005616:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005618:	22c0      	movs	r2, #192	; 0xc0
 800561a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800561c:	9106      	str	r1, [sp, #24]
 800561e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8005622:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005626:	f017 fc75 	bl	801cf14 <memset>
  if(i2cHandle->Instance==I2C2)
 800562a:	4b27      	ldr	r3, [pc, #156]	; (80056c8 <HAL_I2C_MspInit+0xb8>)
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d001      	beq.n	8005636 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005632:	b038      	add	sp, #224	; 0xe0
 8005634:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005636:	2208      	movs	r2, #8
 8005638:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800563a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800563c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005640:	f006 fe98 	bl	800c374 <HAL_RCCEx_PeriphCLKConfig>
 8005644:	2800      	cmp	r0, #0
 8005646:	d138      	bne.n	80056ba <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005648:	4c20      	ldr	r4, [pc, #128]	; (80056cc <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800564a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800564c:	a902      	add	r1, sp, #8
 800564e:	4820      	ldr	r0, [pc, #128]	; (80056d0 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005650:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005654:	f043 0302 	orr.w	r3, r3, #2
 8005658:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800565c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005660:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005662:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005664:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005668:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80056c0 <HAL_I2C_MspInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005670:	2303      	movs	r3, #3
 8005672:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005676:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800567a:	f004 ff9b 	bl	800a5b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800567e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8005682:	2200      	movs	r2, #0
 8005684:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005686:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800568a:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800568c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8005690:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8005694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800569c:	f003 fb62 	bl	8008d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80056a0:	2021      	movs	r0, #33	; 0x21
 80056a2:	f003 fb9d 	bl	8008de0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 80056a6:	2200      	movs	r2, #0
 80056a8:	2101      	movs	r1, #1
 80056aa:	2022      	movs	r0, #34	; 0x22
 80056ac:	f003 fb5a 	bl	8008d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80056b0:	2022      	movs	r0, #34	; 0x22
 80056b2:	f003 fb95 	bl	8008de0 <HAL_NVIC_EnableIRQ>
}
 80056b6:	b038      	add	sp, #224	; 0xe0
 80056b8:	bd10      	pop	{r4, pc}
      Error_Handler();
 80056ba:	f002 fe15 	bl	80082e8 <Error_Handler>
 80056be:	e7c3      	b.n	8005648 <HAL_I2C_MspInit+0x38>
 80056c0:	00000c00 	.word	0x00000c00
 80056c4:	00000012 	.word	0x00000012
 80056c8:	40005800 	.word	0x40005800
 80056cc:	58024400 	.word	0x58024400
 80056d0:	58020400 	.word	0x58020400

080056d4 <scaleOscPitch>:
}

float __ATTR_ITCMRAM scaleOscPitch(float input)
{
	//input = LEAF_clip(0.0f, input, 1.0f);
	return (input * 48.0f) - 24.0f;
 80056d4:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 80056d8:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80056e8 <scaleOscPitch+0x14>
}
 80056dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80056e0:	eeb0 0a67 	vmov.f32	s0, s15
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	42400000 	.word	0x42400000

080056ec <scaleOscFine>:

float __ATTR_ITCMRAM scaleOscFine(float input)
{
	//input = LEAF_clip(0.0f, input, 1.f);
	return (input * 200.0f) - 100.0f;
 80056ec:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8005700 <scaleOscFine+0x14>
 80056f0:	eddf 7a04 	vldr	s15, [pc, #16]	; 8005704 <scaleOscFine+0x18>
}
 80056f4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80056f8:	eeb0 0a67 	vmov.f32	s0, s15
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	43480000 	.word	0x43480000
 8005704:	c2c80000 	.word	0xc2c80000

08005708 <scaleOscFreq>:

float __ATTR_ITCMRAM scaleOscFreq(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 4000.0f) - 2000.0f;
 8005708:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800571c <scaleOscFreq+0x14>
 800570c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8005720 <scaleOscFreq+0x18>
}
 8005710:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005714:	eeb0 0a67 	vmov.f32	s0, s15
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	457a0000 	.word	0x457a0000
 8005720:	c4fa0000 	.word	0xc4fa0000

08005724 <scaleFilterCutoff>:
}

float __ATTR_ITCMRAM scaleFilterCutoff(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 127.0f);
 8005724:	eddf 7a02 	vldr	s15, [pc, #8]	; 8005730 <scaleFilterCutoff+0xc>
}
 8005728:	ee20 0a27 	vmul.f32	s0, s0, s15
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	42fe0000 	.word	0x42fe0000

08005734 <scaleFinalLowpass>:
}

float __ATTR_ITCMRAM scaleFinalLowpass(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return ((input * 70.0f) + 58.0f);
 8005734:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8005748 <scaleFinalLowpass+0x14>
 8005738:	eddf 7a04 	vldr	s15, [pc, #16]	; 800574c <scaleFinalLowpass+0x18>
}
 800573c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005740:	eeb0 0a67 	vmov.f32	s0, s15
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	428c0000 	.word	0x428c0000
 800574c:	42680000 	.word	0x42680000

08005750 <blankFunction>:


void blankFunction(float a, int b, int c)
{
	;
}
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop

08005754 <checkForSDCardPreset>:
{
 8005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint8_t status = SD_PRESENT;
 8005758:	2301      	movs	r3, #1
{
 800575a:	b08a      	sub	sp, #40	; 0x28
 800575c:	4606      	mov	r6, r0
  __IO uint8_t status = SD_PRESENT;
 800575e:	f88d 300b 	strb.w	r3, [sp, #11]
  if (BSP_PlatformIsDetected() != 0x0)
 8005762:	f00b fcad 	bl	80110c0 <BSP_PlatformIsDetected>
 8005766:	b110      	cbz	r0, 800576e <checkForSDCardPreset+0x1a>
    status = SD_NOT_PRESENT;
 8005768:	2300      	movs	r3, #0
 800576a:	f88d 300b 	strb.w	r3, [sp, #11]
  return status;
 800576e:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 8005772:	b95b      	cbnz	r3, 800578c <checkForSDCardPreset+0x38>
 8005774:	4c39      	ldr	r4, [pc, #228]	; (800585c <checkForSDCardPreset+0x108>)
 8005776:	4d3a      	ldr	r5, [pc, #232]	; (8005860 <checkForSDCardPreset+0x10c>)
		loadFailed = 1;
 8005778:	2301      	movs	r3, #1
 800577a:	2000      	movs	r0, #0
 800577c:	702b      	strb	r3, [r5, #0]
	presetWaitingToLoad = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	4a38      	ldr	r2, [pc, #224]	; (8005864 <checkForSDCardPreset+0x110>)
 8005782:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 8005784:	7023      	strb	r3, [r4, #0]
}
 8005786:	b00a      	add	sp, #40	; 0x28
 8005788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loadFailed = 0;
 800578c:	2700      	movs	r7, #0
		diskBusy = 1;
 800578e:	f04f 0801 	mov.w	r8, #1
 8005792:	4c32      	ldr	r4, [pc, #200]	; (800585c <checkForSDCardPreset+0x108>)
		loadFailed = 0;
 8005794:	4d32      	ldr	r5, [pc, #200]	; (8005860 <checkForSDCardPreset+0x10c>)
		disk_initialize(0);
 8005796:	4638      	mov	r0, r7
		diskBusy = 1;
 8005798:	f884 8000 	strb.w	r8, [r4]
		loadFailed = 0;
 800579c:	702f      	strb	r7, [r5, #0]
		disk_initialize(0);
 800579e:	f00b fd29 	bl	80111f4 <disk_initialize>
	    disk_status(0);
 80057a2:	4638      	mov	r0, r7
 80057a4:	f00b fd1c 	bl	80111e0 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80057a8:	4642      	mov	r2, r8
 80057aa:	492f      	ldr	r1, [pc, #188]	; (8005868 <checkForSDCardPreset+0x114>)
 80057ac:	482f      	ldr	r0, [pc, #188]	; (800586c <checkForSDCardPreset+0x118>)
 80057ae:	f00d fec3 	bl	8013538 <f_mount>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d1e0      	bne.n	8005778 <checkForSDCardPreset+0x24>
			itoa(numberToLoad, charBuf, 10);
 80057b6:	a904      	add	r1, sp, #16
 80057b8:	220a      	movs	r2, #10
 80057ba:	4630      	mov	r0, r6
 80057bc:	f017 fb66 	bl	801ce8c <itoa>
			int len = ((strlen(charBuf)));
 80057c0:	a804      	add	r0, sp, #16
 80057c2:	f7fa fd89 	bl	80002d8 <strlen>
			if (len == 1)
 80057c6:	4540      	cmp	r0, r8
			int len = ((strlen(charBuf)));
 80057c8:	4601      	mov	r1, r0
			if (len == 1)
 80057ca:	d02d      	beq.n	8005828 <checkForSDCardPreset+0xd4>
				strcat(charBuf, ".ebp");
 80057cc:	ab04      	add	r3, sp, #16
 80057ce:	4e28      	ldr	r6, [pc, #160]	; (8005870 <checkForSDCardPreset+0x11c>)
 80057d0:	f10d 0c10 	add.w	ip, sp, #16
				strcpy(finalString, charBuf);
 80057d4:	1d42      	adds	r2, r0, #5
				strcat(charBuf, ".ebp");
 80057d6:	181f      	adds	r7, r3, r0
 80057d8:	6830      	ldr	r0, [r6, #0]
				strcpy(finalString, charBuf);
 80057da:	ab07      	add	r3, sp, #28
				strcat(charBuf, ".ebp");
 80057dc:	f84c 0001 	str.w	r0, [ip, r1]
 80057e0:	7931      	ldrb	r1, [r6, #4]
				strcpy(finalString, charBuf);
 80057e2:	4618      	mov	r0, r3
				strcat(charBuf, ".ebp");
 80057e4:	7139      	strb	r1, [r7, #4]
				strcpy(finalString, charBuf);
 80057e6:	4661      	mov	r1, ip
 80057e8:	f017 fbc0 	bl	801cf6c <memcpy>
 80057ec:	4603      	mov	r3, r0
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 80057ee:	4a1e      	ldr	r2, [pc, #120]	; (8005868 <checkForSDCardPreset+0x114>)
 80057f0:	4920      	ldr	r1, [pc, #128]	; (8005874 <checkForSDCardPreset+0x120>)
 80057f2:	4821      	ldr	r0, [pc, #132]	; (8005878 <checkForSDCardPreset+0x124>)
 80057f4:	f00e fbe8 	bl	8013fc8 <f_findfirst>
			if(res == FR_OK)
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d1bd      	bne.n	8005778 <checkForSDCardPreset+0x24>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80057fc:	4e1f      	ldr	r6, [pc, #124]	; (800587c <checkForSDCardPreset+0x128>)
 80057fe:	2211      	movs	r2, #17
 8005800:	491f      	ldr	r1, [pc, #124]	; (8005880 <checkForSDCardPreset+0x12c>)
 8005802:	4630      	mov	r0, r6
 8005804:	f00d fee4 	bl	80135d0 <f_open>
 8005808:	2800      	cmp	r0, #0
 800580a:	d1b5      	bne.n	8005778 <checkForSDCardPreset+0x24>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 800580c:	ab03      	add	r3, sp, #12
 800580e:	68f2      	ldr	r2, [r6, #12]
 8005810:	491c      	ldr	r1, [pc, #112]	; (8005884 <checkForSDCardPreset+0x130>)
 8005812:	4630      	mov	r0, r6
 8005814:	f00e f840 	bl	8013898 <f_read>
					presetWaitingToParse = bytesRead;
 8005818:	9a03      	ldr	r2, [sp, #12]
 800581a:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <checkForSDCardPreset+0x134>)
					f_close(&SDFile);
 800581c:	4630      	mov	r0, r6
					presetWaitingToParse = bytesRead;
 800581e:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
 8005820:	f00e fad2 	bl	8013dc8 <f_close>
					found = 1;
 8005824:	2001      	movs	r0, #1
 8005826:	e7aa      	b.n	800577e <checkForSDCardPreset+0x2a>
				finalString[1] = charBuf[0];
 8005828:	f89d 2010 	ldrb.w	r2, [sp, #16]
				strcat(finalString, ".ebp");
 800582c:	ab07      	add	r3, sp, #28
				finalString[2] = charBuf[1];
 800582e:	f89d 1011 	ldrb.w	r1, [sp, #17]
				finalString[1] = charBuf[0];
 8005832:	f88d 201d 	strb.w	r2, [sp, #29]
				finalString[0] = '0';
 8005836:	2230      	movs	r2, #48	; 0x30
				strcat(finalString, ".ebp");
 8005838:	4618      	mov	r0, r3
				finalString[2] = charBuf[1];
 800583a:	f88d 101e 	strb.w	r1, [sp, #30]
				strcat(finalString, ".ebp");
 800583e:	9301      	str	r3, [sp, #4]
				finalString[0] = '0';
 8005840:	f88d 201c 	strb.w	r2, [sp, #28]
				strcat(finalString, ".ebp");
 8005844:	f7fa fd48 	bl	80002d8 <strlen>
 8005848:	4909      	ldr	r1, [pc, #36]	; (8005870 <checkForSDCardPreset+0x11c>)
 800584a:	4602      	mov	r2, r0
 800584c:	9b01      	ldr	r3, [sp, #4]
 800584e:	181e      	adds	r6, r3, r0
 8005850:	6808      	ldr	r0, [r1, #0]
 8005852:	5098      	str	r0, [r3, r2]
 8005854:	790a      	ldrb	r2, [r1, #4]
 8005856:	7132      	strb	r2, [r6, #4]
 8005858:	e7c9      	b.n	80057ee <checkForSDCardPreset+0x9a>
 800585a:	bf00      	nop
 800585c:	20013088 	.word	0x20013088
 8005860:	20015238 	.word	0x20015238
 8005864:	20016cd0 	.word	0x20016cd0
 8005868:	20019b78 	.word	0x20019b78
 800586c:	20019714 	.word	0x20019714
 8005870:	0801f46c 	.word	0x0801f46c
 8005874:	200150ec 	.word	0x200150ec
 8005878:	20013050 	.word	0x20013050
 800587c:	20019948 	.word	0x20019948
 8005880:	20015102 	.word	0x20015102
 8005884:	300001e0 	.word	0x300001e0
 8005888:	20016cd4 	.word	0x20016cd4

0800588c <scaleDefault>:
{
 800588c:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 8005890:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800589c <scaleDefault+0x10>
 8005894:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005898:	f011 ba00 	b.w	8016c9c <LEAF_clip>
 800589c:	00000000 	.word	0x00000000

080058a0 <scaleTranspose>:
{
 80058a0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
 80058a4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80058c4 <scaleTranspose+0x24>
 80058a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 80058ac:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
 80058ae:	f011 f9f5 	bl	8016c9c <LEAF_clip>
	return (input * 96.0f) - 48.0f;
 80058b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80058c8 <scaleTranspose+0x28>
 80058b6:	eddf 7a05 	vldr	s15, [pc, #20]	; 80058cc <scaleTranspose+0x2c>
}
 80058ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80058be:	eeb0 0a67 	vmov.f32	s0, s15
 80058c2:	bd08      	pop	{r3, pc}
 80058c4:	00000000 	.word	0x00000000
 80058c8:	42c00000 	.word	0x42c00000
 80058cc:	c2400000 	.word	0xc2400000

080058d0 <scalePitchBend>:
{
 80058d0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 80058d4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80058ec <scalePitchBend+0x1c>
 80058d8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 80058dc:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
 80058de:	f011 f9dd 	bl	8016c9c <LEAF_clip>
	return (input * 48.0f);
 80058e2:	eddf 7a03 	vldr	s15, [pc, #12]	; 80058f0 <scalePitchBend+0x20>
}
 80058e6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80058ea:	bd08      	pop	{r3, pc}
 80058ec:	00000000 	.word	0x00000000
 80058f0:	42400000 	.word	0x42400000

080058f4 <scaleFilterResonance>:
{
 80058f4:	b510      	push	{r4, lr}
 80058f6:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
 80058fa:	ed9f 9a21 	vldr	s18, [pc, #132]	; 8005980 <scaleFilterResonance+0x8c>
{
 80058fe:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
 8005902:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005906:	eeb0 0a49 	vmov.f32	s0, s18
 800590a:	f011 f9c7 	bl	8016c9c <LEAF_clip>
 800590e:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 8005912:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8005984 <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005916:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8005988 <scaleFilterResonance+0x94>
	input *= 2047.0f;
 800591a:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 800591e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005922:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 8005926:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 800592a:	1c63      	adds	r3, r4, #1
 800592c:	ee00 3a90 	vmov	s1, r3
 8005930:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8005934:	f011 f9b2 	bl	8016c9c <LEAF_clip>
 8005938:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 800593c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005940:	4b12      	ldr	r3, [pc, #72]	; (800598c <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
 8005942:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005946:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 800594a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800594e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8005952:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005956:	edd4 7a00 	vldr	s15, [r4]
 800595a:	eeb0 0a49 	vmov.f32	s0, s18
 800595e:	ed93 7a00 	vldr	s14, [r3]
 8005962:	ee38 8a68 	vsub.f32	s16, s16, s17
 8005966:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 800596a:	ee60 0a87 	vmul.f32	s1, s1, s14
 800596e:	eee7 0a88 	vfma.f32	s1, s15, s16
}
 8005972:	ecbd 8b04 	vpop	{d8-d9}
 8005976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 800597a:	f011 b98f 	b.w	8016c9c <LEAF_clip>
 800597e:	bf00      	nop
 8005980:	3dcccccd 	.word	0x3dcccccd
 8005984:	44ffe000 	.word	0x44ffe000
 8005988:	00000000 	.word	0x00000000
 800598c:	200170dc 	.word	0x200170dc

08005990 <scaleEnvTimes>:
{
 8005990:	b510      	push	{r4, lr}
 8005992:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 8005996:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8005a0c <scaleEnvTimes+0x7c>
{
 800599a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 800599e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80059a2:	eeb0 0a68 	vmov.f32	s0, s17
 80059a6:	f011 f979 	bl	8016c9c <LEAF_clip>
 80059aa:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 80059ae:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8005a10 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80059b2:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 80059b6:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 80059ba:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80059be:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 80059c2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80059c6:	1c63      	adds	r3, r4, #1
 80059c8:	ee00 3a90 	vmov	s1, r3
 80059cc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80059d0:	f011 f964 	bl	8016c9c <LEAF_clip>
 80059d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 80059d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059dc:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
 80059de:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 80059e2:	ee10 2a10 	vmov	r2, s0
 80059e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80059ea:	ee38 8a07 	vadd.f32	s16, s16, s14
 80059ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80059f2:	ed94 7a00 	vldr	s14, [r4]
 80059f6:	edd3 6a00 	vldr	s13, [r3]
 80059fa:	ee38 8a68 	vsub.f32	s16, s16, s17
 80059fe:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
 8005a02:	eea7 0a08 	vfma.f32	s0, s14, s16
 8005a06:	ecbd 8b02 	vpop	{d8}
 8005a0a:	bd10      	pop	{r4, pc}
 8005a0c:	00000000 	.word	0x00000000
 8005a10:	44ffe000 	.word	0x44ffe000
 8005a14:	200130dc 	.word	0x200130dc

08005a18 <scaleLFORates>:
{
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 8005a1e:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8005a94 <scaleLFORates+0x7c>
{
 8005a22:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 8005a26:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005a2a:	eeb0 0a68 	vmov.f32	s0, s17
 8005a2e:	f011 f935 	bl	8016c9c <LEAF_clip>
 8005a32:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 8005a36:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8005a98 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005a3a:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 8005a3e:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 8005a42:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005a46:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 8005a4a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005a4e:	1c63      	adds	r3, r4, #1
 8005a50:	ee00 3a90 	vmov	s1, r3
 8005a54:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8005a58:	f011 f920 	bl	8016c9c <LEAF_clip>
 8005a5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 8005a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
 8005a66:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 8005a6a:	ee10 2a10 	vmov	r2, s0
 8005a6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005a72:	ee38 8a07 	vadd.f32	s16, s16, s14
 8005a76:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005a7a:	ed94 7a00 	vldr	s14, [r4]
 8005a7e:	edd3 6a00 	vldr	s13, [r3]
 8005a82:	ee38 8a68 	vsub.f32	s16, s16, s17
 8005a86:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
 8005a8a:	eea7 0a08 	vfma.f32	s0, s14, s16
 8005a8e:	ecbd 8b02 	vpop	{d8}
 8005a92:	bd10      	pop	{r4, pc}
 8005a94:	00000000 	.word	0x00000000
 8005a98:	44ffe000 	.word	0x44ffe000
 8005a9c:	240733a0 	.word	0x240733a0

08005aa0 <SystemClock_Config>:
{
 8005aa0:	b530      	push	{r4, r5, lr}
 8005aa2:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005aa4:	224c      	movs	r2, #76	; 0x4c
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	a80c      	add	r0, sp, #48	; 0x30
 8005aaa:	f017 fa33 	bl	801cf14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005aae:	2220      	movs	r2, #32
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	a804      	add	r0, sp, #16
 8005ab4:	f017 fa2e 	bl	801cf14 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005ab8:	2002      	movs	r0, #2
 8005aba:	f005 fd6d 	bl	800b598 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005abe:	4b3a      	ldr	r3, [pc, #232]	; (8005ba8 <SystemClock_Config+0x108>)
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	4a3a      	ldr	r2, [pc, #232]	; (8005bac <SystemClock_Config+0x10c>)
 8005ac4:	9101      	str	r1, [sp, #4]
 8005ac6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ac8:	f021 0101 	bic.w	r1, r1, #1
 8005acc:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	6993      	ldr	r3, [r2, #24]
 8005ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005adc:	6193      	str	r3, [r2, #24]
 8005ade:	6993      	ldr	r3, [r2, #24]
 8005ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005ae8:	6993      	ldr	r3, [r2, #24]
 8005aea:	049c      	lsls	r4, r3, #18
 8005aec:	d5fc      	bpl.n	8005ae8 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aee:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <SystemClock_Config+0x110>)
 8005af0:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8005af4:	f041 0102 	orr.w	r1, r1, #2
 8005af8:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005afc:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	9302      	str	r3, [sp, #8]
 8005b08:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005b0a:	9103      	str	r1, [sp, #12]
 8005b0c:	6991      	ldr	r1, [r2, #24]
 8005b0e:	4b26      	ldr	r3, [pc, #152]	; (8005ba8 <SystemClock_Config+0x108>)
 8005b10:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8005b14:	6191      	str	r1, [r2, #24]
 8005b16:	6992      	ldr	r2, [r2, #24]
 8005b18:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8005b1c:	9203      	str	r2, [sp, #12]
 8005b1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005b20:	4a22      	ldr	r2, [pc, #136]	; (8005bac <SystemClock_Config+0x10c>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005b22:	f041 0101 	orr.w	r1, r1, #1
 8005b26:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	9303      	str	r3, [sp, #12]
 8005b30:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005b32:	6993      	ldr	r3, [r2, #24]
 8005b34:	0498      	lsls	r0, r3, #18
 8005b36:	d5fc      	bpl.n	8005b32 <SystemClock_Config+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005b38:	4a1d      	ldr	r2, [pc, #116]	; (8005bb0 <SystemClock_Config+0x110>)
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005b3a:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005b3c:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8005b3e:	2105      	movs	r1, #5
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005b40:	6a93      	ldr	r3, [r2, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b42:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005b44:	f023 0303 	bic.w	r3, r3, #3
 8005b48:	f043 0302 	orr.w	r3, r3, #2
 8005b4c:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b4e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b50:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005b54:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005b58:	e9cd 351b 	strd	r3, r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005b5c:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8005b5e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8005ba0 <SystemClock_Config+0x100>
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005b62:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 8005b64:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8005b66:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 192;
 8005b6a:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005b6e:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b72:	f005 fdbb 	bl	800b6ec <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b76:	213f      	movs	r1, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005b78:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b7e:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b80:	2103      	movs	r1, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005b82:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005b84:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b86:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005b88:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005b8a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005b8c:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005b90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005b94:	f006 f93e 	bl	800be14 <HAL_RCC_ClockConfig>
}
 8005b98:	b021      	add	sp, #132	; 0x84
 8005b9a:	bd30      	pop	{r4, r5, pc}
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	00000021 	.word	0x00000021
 8005ba4:	00010000 	.word	0x00010000
 8005ba8:	58000400 	.word	0x58000400
 8005bac:	58024800 	.word	0x58024800
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	00000000 	.word	0x00000000

08005bb8 <PeriphCommonClock_Config>:
{
 8005bb8:	b500      	push	{lr}
 8005bba:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005bbc:	22a4      	movs	r2, #164	; 0xa4
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	a807      	add	r0, sp, #28
 8005bc2:	f017 f9a7 	bl	801cf14 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8005bc6:	2019      	movs	r0, #25
 8005bc8:	f44f 71ac 	mov.w	r1, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005bcc:	2302      	movs	r3, #2
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8005bce:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005bd0:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8005bd6:	9216      	str	r2, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005bd8:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8005bda:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8005c00 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8005bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8005be2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005be6:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8005be8:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8005bec:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8005c08 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8005bf0:	9114      	str	r1, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8005bf2:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bf6:	f006 fbbd 	bl	800c374 <HAL_RCCEx_PeriphCLKConfig>
}
 8005bfa:	b031      	add	sp, #196	; 0xc4
 8005bfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c00:	00011100 	.word	0x00011100
 8005c04:	00000000 	.word	0x00000000
 8005c08:	00000007 	.word	0x00000007
 8005c0c:	00000002 	.word	0x00000002

08005c10 <randomNumber>:
float randomNumber(void) {
 8005c10:	b500      	push	{lr}
 8005c12:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8005c14:	4807      	ldr	r0, [pc, #28]	; (8005c34 <randomNumber+0x24>)
 8005c16:	a901      	add	r1, sp, #4
 8005c18:	f007 fde2 	bl	800d7e0 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8005c1c:	eddd 7a01 	vldr	s15, [sp, #4]
 8005c20:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005c38 <randomNumber+0x28>
 8005c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8005c28:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005c2c:	b003      	add	sp, #12
 8005c2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c32:	bf00      	nop
 8005c34:	200190e0 	.word	0x200190e0
 8005c38:	2f80000d 	.word	0x2f80000d

08005c3c <BSP_SD_IsDetected>:
{
 8005c3c:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 8005c3e:	2301      	movs	r3, #1
{
 8005c40:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8005c42:	f88d 3007 	strb.w	r3, [sp, #7]
  if (BSP_PlatformIsDetected() != 0x0)
 8005c46:	f00b fa3b 	bl	80110c0 <BSP_PlatformIsDetected>
 8005c4a:	b110      	cbz	r0, 8005c52 <BSP_SD_IsDetected+0x16>
    status = SD_NOT_PRESENT;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
 8005c52:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005c56:	b003      	add	sp, #12
 8005c58:	f85d fb04 	ldr.w	pc, [sp], #4

08005c5c <getPresetNamesFromSDCard>:
{
 8005c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
 8005c60:	2301      	movs	r3, #1
{
 8005c62:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
 8005c64:	f88d 3003 	strb.w	r3, [sp, #3]
  if (BSP_PlatformIsDetected() != 0x0)
 8005c68:	f00b fa2a 	bl	80110c0 <BSP_PlatformIsDetected>
 8005c6c:	b110      	cbz	r0, 8005c74 <getPresetNamesFromSDCard+0x18>
    status = SD_NOT_PRESENT;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
 8005c74:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
 8005c78:	b93b      	cbnz	r3, 8005c8a <getPresetNamesFromSDCard+0x2e>
 8005c7a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8005cd8 <getPresetNamesFromSDCard+0x7c>
	diskBusy = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f88a 3000 	strb.w	r3, [sl]
}
 8005c84:	b009      	add	sp, #36	; 0x24
 8005c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		loadFailed = 0;
 8005c8a:	2400      	movs	r4, #0
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <getPresetNamesFromSDCard+0x68>)
		diskBusy = 1;
 8005c8e:	2501      	movs	r5, #1
 8005c90:	f8df a044 	ldr.w	sl, [pc, #68]	; 8005cd8 <getPresetNamesFromSDCard+0x7c>
		disk_initialize(0);
 8005c94:	4620      	mov	r0, r4
		loadFailed = 0;
 8005c96:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
 8005c98:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
 8005c9c:	f00b faaa 	bl	80111f4 <disk_initialize>
	    disk_status(0);
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f00b fa9d 	bl	80111e0 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8005ca6:	462a      	mov	r2, r5
 8005ca8:	4907      	ldr	r1, [pc, #28]	; (8005cc8 <getPresetNamesFromSDCard+0x6c>)
 8005caa:	4808      	ldr	r0, [pc, #32]	; (8005ccc <getPresetNamesFromSDCard+0x70>)
 8005cac:	f00d fc44 	bl	8013538 <f_mount>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d1e4      	bne.n	8005c7e <getPresetNamesFromSDCard+0x22>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8005cb4:	4605      	mov	r5, r0
 8005cb6:	4e06      	ldr	r6, [pc, #24]	; (8005cd0 <getPresetNamesFromSDCard+0x74>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8005cb8:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8005cc8 <getPresetNamesFromSDCard+0x6c>
 8005cbc:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8005cdc <getPresetNamesFromSDCard+0x80>
 8005cc0:	4f04      	ldr	r7, [pc, #16]	; (8005cd4 <getPresetNamesFromSDCard+0x78>)
 8005cc2:	e023      	b.n	8005d0c <getPresetNamesFromSDCard+0xb0>
 8005cc4:	20015238 	.word	0x20015238
 8005cc8:	20019b78 	.word	0x20019b78
 8005ccc:	20019714 	.word	0x20019714
 8005cd0:	0801f46c 	.word	0x0801f46c
 8005cd4:	20013050 	.word	0x20013050
 8005cd8:	20013088 	.word	0x20013088
 8005cdc:	200150ec 	.word	0x200150ec
					strcat(charBuf, ".ebp");
 8005ce0:	ab02      	add	r3, sp, #8
 8005ce2:	6830      	ldr	r0, [r6, #0]
 8005ce4:	ac02      	add	r4, sp, #8
 8005ce6:	1899      	adds	r1, r3, r2
 8005ce8:	7933      	ldrb	r3, [r6, #4]
 8005cea:	50a0      	str	r0, [r4, r2]
					strcpy(finalString, charBuf);
 8005cec:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 8005cee:	710b      	strb	r3, [r1, #4]
					strcpy(finalString, charBuf);
 8005cf0:	a805      	add	r0, sp, #20
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	f017 f93a 	bl	801cf6c <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8005cf8:	ab05      	add	r3, sp, #20
 8005cfa:	464a      	mov	r2, r9
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	4638      	mov	r0, r7
 8005d00:	f00e f962 	bl	8013fc8 <f_findfirst>
				if(res == FR_OK)
 8005d04:	b358      	cbz	r0, 8005d5e <getPresetNamesFromSDCard+0x102>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8005d06:	3501      	adds	r5, #1
 8005d08:	2d40      	cmp	r5, #64	; 0x40
 8005d0a:	d0b8      	beq.n	8005c7e <getPresetNamesFromSDCard+0x22>
				itoa(i, charBuf, 10);
 8005d0c:	220a      	movs	r2, #10
 8005d0e:	a902      	add	r1, sp, #8
 8005d10:	4628      	mov	r0, r5
 8005d12:	f017 f8bb 	bl	801ce8c <itoa>
				int len = ((strlen(charBuf)));
 8005d16:	a802      	add	r0, sp, #8
 8005d18:	f7fa fade 	bl	80002d8 <strlen>
				if (len == 1)
 8005d1c:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 8005d1e:	4602      	mov	r2, r0
				if (len == 1)
 8005d20:	d1de      	bne.n	8005ce0 <getPresetNamesFromSDCard+0x84>
					finalString[2] = charBuf[1];
 8005d22:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
 8005d26:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
 8005d28:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, ".ebp");
 8005d2c:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 8005d2e:	f88d 1016 	strb.w	r1, [sp, #22]
					finalString[1] = charBuf[0];
 8005d32:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
 8005d36:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
 8005d3a:	f7fa facd 	bl	80002d8 <strlen>
 8005d3e:	aa05      	add	r2, sp, #20
 8005d40:	4603      	mov	r3, r0
 8005d42:	a905      	add	r1, sp, #20
 8005d44:	4402      	add	r2, r0
 8005d46:	6830      	ldr	r0, [r6, #0]
 8005d48:	50c8      	str	r0, [r1, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8005d4a:	4641      	mov	r1, r8
					strcat(finalString, ".ebp");
 8005d4c:	7933      	ldrb	r3, [r6, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8005d4e:	4638      	mov	r0, r7
					strcat(finalString, ".ebp");
 8005d50:	7113      	strb	r3, [r2, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8005d52:	ab05      	add	r3, sp, #20
 8005d54:	464a      	mov	r2, r9
 8005d56:	f00e f937 	bl	8013fc8 <f_findfirst>
				if(res == FR_OK)
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d1d3      	bne.n	8005d06 <getPresetNamesFromSDCard+0xaa>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8005d5e:	f8df b3d4 	ldr.w	fp, [pc, #980]	; 8006134 <getPresetNamesFromSDCard+0x4d8>
 8005d62:	2211      	movs	r2, #17
 8005d64:	49ef      	ldr	r1, [pc, #956]	; (8006124 <getPresetNamesFromSDCard+0x4c8>)
 8005d66:	4658      	mov	r0, fp
 8005d68:	f00d fc32 	bl	80135d0 <f_open>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d1ca      	bne.n	8005d06 <getPresetNamesFromSDCard+0xaa>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8005d70:	4ced      	ldr	r4, [pc, #948]	; (8006128 <getPresetNamesFromSDCard+0x4cc>)
 8005d72:	ab01      	add	r3, sp, #4
 8005d74:	f8db 200c 	ldr.w	r2, [fp, #12]
 8005d78:	4658      	mov	r0, fp
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	f00d fd8c 	bl	8013898 <f_read>
						f_close(&SDFile);
 8005d80:	4658      	mov	r0, fp
 8005d82:	f00e f821 	bl	8013dc8 <f_close>
							presetNamesArray[i][j] = buffer[bufferIndex];
 8005d86:	7823      	ldrb	r3, [r4, #0]
 8005d88:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8005d8c:	4ae7      	ldr	r2, [pc, #924]	; (800612c <getPresetNamesFromSDCard+0x4d0>)
 8005d8e:	f894 c001 	ldrb.w	ip, [r4, #1]
 8005d92:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
 8005d96:	eb02 0241 	add.w	r2, r2, r1, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8005d9a:	48e5      	ldr	r0, [pc, #916]	; (8006130 <getPresetNamesFromSDCard+0x4d4>)
							presetNamesArray[i][j] = buffer[bufferIndex];
 8005d9c:	f882 c001 	strb.w	ip, [r2, #1]
 8005da0:	f894 c002 	ldrb.w	ip, [r4, #2]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8005da4:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8005da8:	0109      	lsls	r1, r1, #4
							presetNamesArray[i][j] = buffer[bufferIndex];
 8005daa:	f882 c002 	strb.w	ip, [r2, #2]
 8005dae:	f894 c003 	ldrb.w	ip, [r4, #3]
 8005db2:	f882 c003 	strb.w	ip, [r2, #3]
 8005db6:	f894 c004 	ldrb.w	ip, [r4, #4]
 8005dba:	f882 c004 	strb.w	ip, [r2, #4]
 8005dbe:	f894 c005 	ldrb.w	ip, [r4, #5]
 8005dc2:	f882 c005 	strb.w	ip, [r2, #5]
 8005dc6:	f894 c006 	ldrb.w	ip, [r4, #6]
 8005dca:	f882 c006 	strb.w	ip, [r2, #6]
 8005dce:	f894 c007 	ldrb.w	ip, [r4, #7]
 8005dd2:	f882 c007 	strb.w	ip, [r2, #7]
 8005dd6:	f894 c008 	ldrb.w	ip, [r4, #8]
 8005dda:	f882 c008 	strb.w	ip, [r2, #8]
 8005dde:	f894 c009 	ldrb.w	ip, [r4, #9]
 8005de2:	f882 c009 	strb.w	ip, [r2, #9]
 8005de6:	f894 c00a 	ldrb.w	ip, [r4, #10]
 8005dea:	f882 c00a 	strb.w	ip, [r2, #10]
 8005dee:	f894 c00b 	ldrb.w	ip, [r4, #11]
 8005df2:	f882 c00b 	strb.w	ip, [r2, #11]
 8005df6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8005dfa:	f882 c00c 	strb.w	ip, [r2, #12]
 8005dfe:	f894 c00d 	ldrb.w	ip, [r4, #13]
 8005e02:	f882 c00d 	strb.w	ip, [r2, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8005e06:	7ba2      	ldrb	r2, [r4, #14]
 8005e08:	5442      	strb	r2, [r0, r1]
 8005e0a:	7be2      	ldrb	r2, [r4, #15]
 8005e0c:	705a      	strb	r2, [r3, #1]
 8005e0e:	7c22      	ldrb	r2, [r4, #16]
 8005e10:	709a      	strb	r2, [r3, #2]
 8005e12:	7c62      	ldrb	r2, [r4, #17]
 8005e14:	70da      	strb	r2, [r3, #3]
 8005e16:	7ca2      	ldrb	r2, [r4, #18]
 8005e18:	711a      	strb	r2, [r3, #4]
 8005e1a:	7ce2      	ldrb	r2, [r4, #19]
 8005e1c:	715a      	strb	r2, [r3, #5]
 8005e1e:	7d22      	ldrb	r2, [r4, #20]
 8005e20:	719a      	strb	r2, [r3, #6]
 8005e22:	7d62      	ldrb	r2, [r4, #21]
 8005e24:	71da      	strb	r2, [r3, #7]
 8005e26:	7da2      	ldrb	r2, [r4, #22]
 8005e28:	721a      	strb	r2, [r3, #8]
 8005e2a:	7de2      	ldrb	r2, [r4, #23]
 8005e2c:	725a      	strb	r2, [r3, #9]
 8005e2e:	7e22      	ldrb	r2, [r4, #24]
 8005e30:	729a      	strb	r2, [r3, #10]
 8005e32:	7e62      	ldrb	r2, [r4, #25]
 8005e34:	72da      	strb	r2, [r3, #11]
 8005e36:	7ea2      	ldrb	r2, [r4, #26]
 8005e38:	731a      	strb	r2, [r3, #12]
 8005e3a:	7ee2      	ldrb	r2, [r4, #27]
 8005e3c:	735a      	strb	r2, [r3, #13]
 8005e3e:	7f22      	ldrb	r2, [r4, #28]
 8005e40:	739a      	strb	r2, [r3, #14]
 8005e42:	7f62      	ldrb	r2, [r4, #29]
 8005e44:	73da      	strb	r2, [r3, #15]
 8005e46:	7fa2      	ldrb	r2, [r4, #30]
 8005e48:	741a      	strb	r2, [r3, #16]
 8005e4a:	7fe2      	ldrb	r2, [r4, #31]
 8005e4c:	745a      	strb	r2, [r3, #17]
 8005e4e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8005e52:	749a      	strb	r2, [r3, #18]
 8005e54:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8005e58:	74da      	strb	r2, [r3, #19]
 8005e5a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8005e5e:	751a      	strb	r2, [r3, #20]
 8005e60:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8005e64:	755a      	strb	r2, [r3, #21]
 8005e66:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8005e6a:	759a      	strb	r2, [r3, #22]
 8005e6c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8005e70:	75da      	strb	r2, [r3, #23]
 8005e72:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8005e76:	761a      	strb	r2, [r3, #24]
 8005e78:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8005e7c:	765a      	strb	r2, [r3, #25]
 8005e7e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8005e82:	769a      	strb	r2, [r3, #26]
 8005e84:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8005e88:	76da      	strb	r2, [r3, #27]
 8005e8a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8005e8e:	771a      	strb	r2, [r3, #28]
 8005e90:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8005e94:	775a      	strb	r2, [r3, #29]
 8005e96:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8005e9a:	779a      	strb	r2, [r3, #30]
 8005e9c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8005ea0:	77da      	strb	r2, [r3, #31]
 8005ea2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8005ea6:	f883 2020 	strb.w	r2, [r3, #32]
 8005eaa:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8005eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005eb2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8005eb6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005eba:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8005ebe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8005ec2:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 8005ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005eca:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 8005ece:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8005ed2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005ed6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005eda:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8005ede:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8005ee2:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8005ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005eea:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 8005eee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005ef2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8005ef6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8005efa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005efe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8005f02:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8005f06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005f0a:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 8005f0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005f12:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8005f16:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8005f1a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005f1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8005f22:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005f26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8005f2a:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8005f2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005f32:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005f36:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8005f3a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005f3e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8005f42:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005f4a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005f52:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005f56:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8005f5a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8005f5e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8005f62:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8005f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005f6a:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8005f6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005f72:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8005f76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8005f7a:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
 8005f7e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005f82:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f8a:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f92:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8005f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f9a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8005f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa2:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 8005fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005faa:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
 8005fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fb2:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8005fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fba:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8005fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fc2:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8005fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fca:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8005fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fd2:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8005fd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fda:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
 8005fde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8005fe2:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8005fe6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8005fea:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
 8005fee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8005ff2:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8005ff6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8005ffa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8005ffe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8006002:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
 8006006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800600a:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 800600e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006012:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 8006016:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800601a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800601e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8006022:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8006026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800602a:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006032:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 8006036:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800603a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 800603e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006042:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8006046:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800604a:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 800604e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8006052:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 8006056:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800605a:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 800605e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8006062:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 8006066:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800606a:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
 800606e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8006072:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8006076:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800607a:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 800607e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8006082:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8006086:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800608a:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
 800608e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006092:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8006096:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800609a:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 800609e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 80060a2:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
 80060a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80060aa:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 80060ae:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80060b2:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 80060b6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80060ba:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 80060be:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 80060c2:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
 80060c6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80060ca:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
 80060ce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80060d2:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 80060d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80060da:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 80060de:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80060e2:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80060e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80060ea:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
 80060ee:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80060f2:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 80060f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80060fa:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 80060fe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8006102:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 8006106:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800610a:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
 800610e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8006112:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8006116:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 800611a:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800611e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
						for (int j = 0; j < 8; j++)
 8006122:	e5f0      	b.n	8005d06 <getPresetNamesFromSDCard+0xaa>
 8006124:	20015102 	.word	0x20015102
 8006128:	300001e0 	.word	0x300001e0
 800612c:	24073020 	.word	0x24073020
 8006130:	240753a0 	.word	0x240753a0
 8006134:	20019948 	.word	0x20019948

08006138 <SDRAM_init>:
{
 8006138:	b5f0      	push	{r4, r5, r6, r7, lr}
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800613a:	4c20      	ldr	r4, [pc, #128]	; (80061bc <SDRAM_init+0x84>)
{
 800613c:	b087      	sub	sp, #28
	        __IO uint32_t tmpmrd = 0;
 800613e:	2600      	movs	r6, #0
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006140:	2501      	movs	r5, #1
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006142:	2710      	movs	r7, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006144:	a902      	add	r1, sp, #8
 8006146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800614a:	4620      	mov	r0, r4
	        __IO uint32_t tmpmrd = 0;
 800614c:	9601      	str	r6, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800614e:	e9cd 5702 	strd	r5, r7, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
 8006152:	e9cd 5604 	strd	r5, r6, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006156:	f008 ff17 	bl	800ef88 <HAL_SDRAM_SendCommand>
	        HAL_Delay(100);
 800615a:	2064      	movs	r0, #100	; 0x64
 800615c:	f002 fdce 	bl	8008cfc <HAL_Delay>
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006160:	2302      	movs	r3, #2
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006162:	a902      	add	r1, sp, #8
 8006164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006168:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
 800616a:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800616c:	9302      	str	r3, [sp, #8]
	        Command.AutoRefreshNumber      = 1;
 800616e:	e9cd 7503 	strd	r7, r5, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006172:	f008 ff09 	bl	800ef88 <HAL_SDRAM_SendCommand>
	        Command.AutoRefreshNumber      = 4;
 8006176:	2304      	movs	r3, #4
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006178:	a902      	add	r1, sp, #8
 800617a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.AutoRefreshNumber      = 4;
 800617e:	9304      	str	r3, [sp, #16]
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006180:	2303      	movs	r3, #3
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006182:	4620      	mov	r0, r4
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006184:	9703      	str	r7, [sp, #12]
	        Command.ModeRegisterDefinition = 0;
 8006186:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006188:	2710      	movs	r7, #16
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800618a:	9302      	str	r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800618c:	f008 fefc 	bl	800ef88 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8006190:	f240 2332 	movw	r3, #562	; 0x232
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006194:	2604      	movs	r6, #4
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006196:	a902      	add	r1, sp, #8
 8006198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 800619c:	9301      	str	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800619e:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = tmpmrd;
 80061a0:	9b01      	ldr	r3, [sp, #4]
	        Command.AutoRefreshNumber      = 1;
 80061a2:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
 80061a4:	9305      	str	r3, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80061a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80061aa:	f008 feed 	bl	800ef88 <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 0x81A - 20);
 80061ae:	f640 0106 	movw	r1, #2054	; 0x806
 80061b2:	4620      	mov	r0, r4
 80061b4:	f008 ff08 	bl	800efc8 <HAL_SDRAM_ProgramRefreshRate>
}
 80061b8:	b007      	add	sp, #28
 80061ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061bc:	20012fc0 	.word	0x20012fc0

080061c0 <handleSPI>:
{
 80061c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (SPI_LEVERS[offset] == ReceivingPitches)
 80061c4:	4dc7      	ldr	r5, [pc, #796]	; (80064e4 <handleSPI+0x324>)
	interruptChecker = 1;
 80061c6:	2201      	movs	r2, #1
 80061c8:	49c7      	ldr	r1, [pc, #796]	; (80064e8 <handleSPI+0x328>)
{
 80061ca:	4604      	mov	r4, r0
 80061cc:	ed2d 8b02 	vpush	{d8}
	if (SPI_LEVERS[offset] == ReceivingPitches)
 80061d0:	5c2b      	ldrb	r3, [r5, r0]
	interruptChecker = 1;
 80061d2:	700a      	strb	r2, [r1, #0]
	if (SPI_LEVERS[offset] == ReceivingPitches)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	f000 80c0 	beq.w	800635a <handleSPI+0x19a>
	else if (SPI_LEVERS[offset] == ReceivingPreset)
 80061da:	2b02      	cmp	r3, #2
 80061dc:	f000 8097 	beq.w	800630e <handleSPI+0x14e>
	else if (SPI_LEVERS[offset] == ReceivingKnobs)
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	f000 81bc 	beq.w	800655e <handleSPI+0x39e>
	else if (SPI_LEVERS[offset] == ReceivingEnd)
 80061e6:	2bfd      	cmp	r3, #253	; 0xfd
 80061e8:	f000 81a2 	beq.w	8006530 <handleSPI+0x370>
		if (boardNumber == 0)
 80061ec:	4bbf      	ldr	r3, [pc, #764]	; (80064ec <handleSPI+0x32c>)
 80061ee:	781f      	ldrb	r7, [r3, #0]
 80061f0:	2f00      	cmp	r7, #0
 80061f2:	f040 8088 	bne.w	8006306 <handleSPI+0x146>
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 80061f6:	4ebe      	ldr	r6, [pc, #760]	; (80064f0 <handleSPI+0x330>)
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
 80061f8:	192b      	adds	r3, r5, r4
 80061fa:	22fd      	movs	r2, #253	; 0xfd
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 80061fc:	4dbd      	ldr	r5, [pc, #756]	; (80064f4 <handleSPI+0x334>)
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 80061fe:	7834      	ldrb	r4, [r6, #0]
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8006204:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 8006208:	f8df c31c 	ldr.w	ip, [pc, #796]	; 8006528 <handleSPI+0x368>
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 800620c:	f8df e31c 	ldr.w	lr, [pc, #796]	; 800652c <handleSPI+0x36c>
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8006210:	eb05 0142 	add.w	r1, r5, r2, lsl #1
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 8006214:	f89c 0000 	ldrb.w	r0, [ip]
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8006218:	ea4f 1802 	mov.w	r8, r2, lsl #4
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 800621c:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8006220:	0052      	lsls	r2, r2, #1
 8006222:	5caa      	ldrb	r2, [r5, r2]
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8006228:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800622c:	eb08 0542 	add.w	r5, r8, r2, lsl #1
			SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
 8006230:	784a      	ldrb	r2, [r1, #1]
 8006232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
 8006236:	788a      	ldrb	r2, [r1, #2]
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
 8006238:	f891 8003 	ldrb.w	r8, [r1, #3]
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
 800623c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8006240:	eb0e 0205 	add.w	r2, lr, r5
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
 8006244:	f883 8045 	strb.w	r8, [r3, #69]	; 0x45
			SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
 8006248:	f891 8004 	ldrb.w	r8, [r1, #4]
 800624c:	f883 8046 	strb.w	r8, [r3, #70]	; 0x46
			SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
 8006250:	f891 8005 	ldrb.w	r8, [r1, #5]
 8006254:	f883 8047 	strb.w	r8, [r3, #71]	; 0x47
			SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
 8006258:	f891 8006 	ldrb.w	r8, [r1, #6]
 800625c:	f883 8048 	strb.w	r8, [r3, #72]	; 0x48
			SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
 8006260:	f891 8007 	ldrb.w	r8, [r1, #7]
 8006264:	f883 8049 	strb.w	r8, [r3, #73]	; 0x49
			SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
 8006268:	f891 8008 	ldrb.w	r8, [r1, #8]
 800626c:	f883 804a 	strb.w	r8, [r3, #74]	; 0x4a
			SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
 8006270:	f891 8009 	ldrb.w	r8, [r1, #9]
 8006274:	f883 804b 	strb.w	r8, [r3, #75]	; 0x4b
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
 8006278:	f891 800a 	ldrb.w	r8, [r1, #10]
 800627c:	f883 804c 	strb.w	r8, [r3, #76]	; 0x4c
			SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
 8006280:	f891 800b 	ldrb.w	r8, [r1, #11]
 8006284:	f883 804d 	strb.w	r8, [r3, #77]	; 0x4d
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
 8006288:	f891 800c 	ldrb.w	r8, [r1, #12]
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
 800628c:	7b49      	ldrb	r1, [r1, #13]
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
 800628e:	f883 804e 	strb.w	r8, [r3, #78]	; 0x4e
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
 8006292:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 8006296:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
			whichMacroToSendName = (whichMacroToSendName + 1);
 800629a:	3001      	adds	r0, #1
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 800629c:	f81e 1005 	ldrb.w	r1, [lr, r5]
			whichMacroToSendName = (whichMacroToSendName + 1);
 80062a0:	b2c0      	uxtb	r0, r0
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 80062a2:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
 80062a6:	7851      	ldrb	r1, [r2, #1]
			if (whichMacroToSendName >= 8)
 80062a8:	2807      	cmp	r0, #7
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
 80062aa:	f883 1052 	strb.w	r1, [r3, #82]	; 0x52
			SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
 80062ae:	7891      	ldrb	r1, [r2, #2]
 80062b0:	f883 1053 	strb.w	r1, [r3, #83]	; 0x53
			SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
 80062b4:	78d1      	ldrb	r1, [r2, #3]
 80062b6:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
			SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
 80062ba:	7911      	ldrb	r1, [r2, #4]
 80062bc:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
			SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
 80062c0:	7951      	ldrb	r1, [r2, #5]
 80062c2:	f883 1056 	strb.w	r1, [r3, #86]	; 0x56
			SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
 80062c6:	7991      	ldrb	r1, [r2, #6]
 80062c8:	f883 1057 	strb.w	r1, [r3, #87]	; 0x57
			SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
 80062cc:	79d1      	ldrb	r1, [r2, #7]
 80062ce:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
			SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
 80062d2:	7a11      	ldrb	r1, [r2, #8]
 80062d4:	f883 1059 	strb.w	r1, [r3, #89]	; 0x59
			SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
 80062d8:	7a51      	ldrb	r1, [r2, #9]
 80062da:	f883 105a 	strb.w	r1, [r3, #90]	; 0x5a
			SPI_LEVERS_TX[offset+27] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][10];
 80062de:	7a91      	ldrb	r1, [r2, #10]
 80062e0:	f883 105b 	strb.w	r1, [r3, #91]	; 0x5b
			SPI_LEVERS_TX[offset+28] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][11];
 80062e4:	7ad1      	ldrb	r1, [r2, #11]
 80062e6:	f883 105c 	strb.w	r1, [r3, #92]	; 0x5c
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
 80062ea:	7b11      	ldrb	r1, [r2, #12]
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
 80062ec:	7b52      	ldrb	r2, [r2, #13]
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
 80062ee:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
 80062f2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			SPI_LEVERS_TX[offset+31] = 254;
 80062f6:	f04f 02fe 	mov.w	r2, #254	; 0xfe
 80062fa:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
			if (whichMacroToSendName >= 8)
 80062fe:	f200 80e7 	bhi.w	80064d0 <handleSPI+0x310>
			whichMacroToSendName = (whichMacroToSendName + 1);
 8006302:	f88c 0000 	strb.w	r0, [ip]
}
 8006306:	ecbd 8b02 	vpop	{d8}
 800630a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		 if (writingState != ReceivingPreset)
 800630e:	497a      	ldr	r1, [pc, #488]	; (80064f8 <handleSPI+0x338>)
 8006310:	7808      	ldrb	r0, [r1, #0]
 8006312:	2802      	cmp	r0, #2
 8006314:	f000 8121 	beq.w	800655a <handleSPI+0x39a>
			 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
 8006318:	700b      	strb	r3, [r1, #0]
			 diskBusy = 1;
 800631a:	4978      	ldr	r1, [pc, #480]	; (80064fc <handleSPI+0x33c>)
			 audioMasterLevel = 0.0f;
 800631c:	4b78      	ldr	r3, [pc, #480]	; (8006500 <handleSPI+0x340>)
			 diskBusy = 1;
 800631e:	700a      	strb	r2, [r1, #0]
			 audioMasterLevel = 0.0f;
 8006320:	2200      	movs	r2, #0
			 bufferPos = 0;
 8006322:	4878      	ldr	r0, [pc, #480]	; (8006504 <handleSPI+0x344>)
			 audioMasterLevel = 0.0f;
 8006324:	601a      	str	r2, [r3, #0]
			 bufferPos = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	8003      	strh	r3, [r0, #0]
		 presetNumberToSave = SPI_LEVERS[offset + 1];
 800632a:	192a      	adds	r2, r5, r4
		 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
 800632c:	1ca3      	adds	r3, r4, #2
		 presetNumberToSave = SPI_LEVERS[offset + 1];
 800632e:	4976      	ldr	r1, [pc, #472]	; (8006508 <handleSPI+0x348>)
 8006330:	b2db      	uxtb	r3, r3
 8006332:	7852      	ldrb	r2, [r2, #1]
 8006334:	4e75      	ldr	r6, [pc, #468]	; (800650c <handleSPI+0x34c>)
 8006336:	700a      	strb	r2, [r1, #0]
		 for (int i = 0; i < 28; i++)
 8006338:	1e59      	subs	r1, r3, #1
 800633a:	441e      	add	r6, r3
 800633c:	4f74      	ldr	r7, [pc, #464]	; (8006510 <handleSPI+0x350>)
 800633e:	4429      	add	r1, r5
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 8006340:	8803      	ldrh	r3, [r0, #0]
 8006342:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8006346:	b29b      	uxth	r3, r3
		 for (int i = 0; i < 28; i++)
 8006348:	428e      	cmp	r6, r1
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 800634a:	f103 0201 	add.w	r2, r3, #1
 800634e:	f807 c003 	strb.w	ip, [r7, r3]
 8006352:	b293      	uxth	r3, r2
 8006354:	8003      	strh	r3, [r0, #0]
		 for (int i = 0; i < 28; i++)
 8006356:	d1f3      	bne.n	8006340 <handleSPI+0x180>
 8006358:	e748      	b.n	80061ec <handleSPI+0x2c>
		 for (int i = 0; i < numStringsThisBoard; i++)
 800635a:	4b6e      	ldr	r3, [pc, #440]	; (8006514 <handleSPI+0x354>)
 800635c:	7818      	ldrb	r0, [r3, #0]
 800635e:	2800      	cmp	r0, #0
 8006360:	f000 80b2 	beq.w	80064c8 <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8006364:	496c      	ldr	r1, [pc, #432]	; (8006518 <handleSPI+0x358>)
		 uint8_t currentByte = offset+1;
 8006366:	18a3      	adds	r3, r4, r2
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8006368:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 800651c <handleSPI+0x35c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 800636c:	680a      	ldr	r2, [r1, #0]
 800636e:	b2db      	uxtb	r3, r3
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8006370:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8006520 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8006374:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8006378:	5cd2      	ldrb	r2, [r2, r3]
 800637a:	0212      	lsls	r2, r2, #8
 800637c:	ee07 2a90 	vmov	s15, r2
 8006380:	680a      	ldr	r2, [r1, #0]
 8006382:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8006386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800638a:	441a      	add	r2, r3
 800638c:	7852      	ldrb	r2, [r2, #1]
 800638e:	ee07 2a90 	vmov	s15, r2
 8006392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006396:	ee77 7a87 	vadd.f32	s15, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 800639a:	eef4 7a46 	vcmp.f32	s15, s12
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 800639e:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80063a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a6:	d507      	bpl.n	80063b8 <handleSPI+0x1f8>
 80063a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80063ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b0:	dd02      	ble.n	80063b8 <handleSPI+0x1f8>
				stringMIDIPitches[i] = myPitch;
 80063b2:	4a5c      	ldr	r2, [pc, #368]	; (8006524 <handleSPI+0x364>)
 80063b4:	ed82 7a00 	vstr	s14, [r2]
		 for (int i = 0; i < numStringsThisBoard; i++)
 80063b8:	2801      	cmp	r0, #1
 80063ba:	f000 8085 	beq.w	80064c8 <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 80063be:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 80063c0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006520 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 80063c4:	3201      	adds	r2, #1
 80063c6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80063ca:	5cd2      	ldrb	r2, [r2, r3]
 80063cc:	0212      	lsls	r2, r2, #8
 80063ce:	ee07 2a90 	vmov	s15, r2
 80063d2:	680a      	ldr	r2, [r1, #0]
 80063d4:	3201      	adds	r2, #1
 80063d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063da:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80063de:	441a      	add	r2, r3
 80063e0:	7852      	ldrb	r2, [r2, #1]
 80063e2:	ee07 2a90 	vmov	s15, r2
 80063e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063ea:	ee77 7a87 	vadd.f32	s15, s15, s14
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 80063ee:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80063f2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80063f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063fa:	dd09      	ble.n	8006410 <handleSPI+0x250>
 80063fc:	eddf 6a47 	vldr	s13, [pc, #284]	; 800651c <handleSPI+0x35c>
 8006400:	eef4 7a66 	vcmp.f32	s15, s13
 8006404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006408:	d502      	bpl.n	8006410 <handleSPI+0x250>
				stringMIDIPitches[i] = myPitch;
 800640a:	4a46      	ldr	r2, [pc, #280]	; (8006524 <handleSPI+0x364>)
 800640c:	ed82 7a01 	vstr	s14, [r2, #4]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8006410:	2802      	cmp	r0, #2
 8006412:	d059      	beq.n	80064c8 <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8006414:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8006416:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006520 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 800641a:	3202      	adds	r2, #2
 800641c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8006420:	5cd2      	ldrb	r2, [r2, r3]
 8006422:	0212      	lsls	r2, r2, #8
 8006424:	ee07 2a90 	vmov	s15, r2
 8006428:	680a      	ldr	r2, [r1, #0]
 800642a:	3202      	adds	r2, #2
 800642c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006430:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8006434:	441a      	add	r2, r3
 8006436:	7852      	ldrb	r2, [r2, #1]
 8006438:	ee06 2a90 	vmov	s13, r2
 800643c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006440:	ee77 7aa6 	vadd.f32	s15, s15, s13
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8006444:	ee27 7a87 	vmul.f32	s14, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8006448:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800644c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006450:	dd09      	ble.n	8006466 <handleSPI+0x2a6>
 8006452:	eddf 6a32 	vldr	s13, [pc, #200]	; 800651c <handleSPI+0x35c>
 8006456:	eef4 7a66 	vcmp.f32	s15, s13
 800645a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645e:	d502      	bpl.n	8006466 <handleSPI+0x2a6>
				stringMIDIPitches[i] = myPitch;
 8006460:	4a30      	ldr	r2, [pc, #192]	; (8006524 <handleSPI+0x364>)
 8006462:	ed82 7a02 	vstr	s14, [r2, #8]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8006466:	2803      	cmp	r0, #3
 8006468:	d02e      	beq.n	80064c8 <handleSPI+0x308>
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 800646a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8006520 <handleSPI+0x360>
		 for (int i = 0; i < numStringsThisBoard; i++)
 800646e:	2603      	movs	r6, #3
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8006470:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 800651c <handleSPI+0x35c>
 8006474:	4f2b      	ldr	r7, [pc, #172]	; (8006524 <handleSPI+0x364>)
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8006476:	680a      	ldr	r2, [r1, #0]
 8006478:	4432      	add	r2, r6
 800647a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800647e:	5cd2      	ldrb	r2, [r2, r3]
 8006480:	0212      	lsls	r2, r2, #8
 8006482:	ee07 2a90 	vmov	s15, r2
 8006486:	680a      	ldr	r2, [r1, #0]
 8006488:	4432      	add	r2, r6
 800648a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800648e:	3601      	adds	r6, #1
 8006490:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8006494:	441a      	add	r2, r3
 8006496:	7852      	ldrb	r2, [r2, #1]
 8006498:	ee07 2a10 	vmov	s14, r2
 800649c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80064a0:	ee77 7a87 	vadd.f32	s15, s15, s14
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 80064a4:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80064a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80064ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b0:	dd06      	ble.n	80064c0 <handleSPI+0x300>
 80064b2:	eef4 7a46 	vcmp.f32	s15, s12
 80064b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				stringMIDIPitches[i] = myPitch;
 80064ba:	bf48      	it	mi
 80064bc:	ed87 7a03 	vstrmi	s14, [r7, #12]
		 for (int i = 0; i < numStringsThisBoard; i++)
 80064c0:	42b0      	cmp	r0, r6
 80064c2:	f107 0704 	add.w	r7, r7, #4
 80064c6:	dcd6      	bgt.n	8006476 <handleSPI+0x2b6>
		 updateStateFromSPIMessage(offset);
 80064c8:	4620      	mov	r0, r4
 80064ca:	f7fb f8e1 	bl	8001690 <updateStateFromSPIMessage>
 80064ce:	e68d      	b.n	80061ec <handleSPI+0x2c>
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 80064d0:	3401      	adds	r4, #1
				whichMacroToSendName = 0;
 80064d2:	f88c 7000 	strb.w	r7, [ip]
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 80064d6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80064da:	7034      	strb	r4, [r6, #0]
}
 80064dc:	ecbd 8b02 	vpop	{d8}
 80064e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e4:	30000100 	.word	0x30000100
 80064e8:	20015205 	.word	0x20015205
 80064ec:	20013048 	.word	0x20013048
 80064f0:	200190dd 	.word	0x200190dd
 80064f4:	24073020 	.word	0x24073020
 80064f8:	200190de 	.word	0x200190de
 80064fc:	20013088 	.word	0x20013088
 8006500:	200006dc 	.word	0x200006dc
 8006504:	2001304a 	.word	0x2001304a
 8006508:	20016cce 	.word	0x20016cce
 800650c:	3000011b 	.word	0x3000011b
 8006510:	300001e0 	.word	0x300001e0
 8006514:	20000012 	.word	0x20000012
 8006518:	2000500c 	.word	0x2000500c
 800651c:	478bff74 	.word	0x478bff74
 8006520:	3b000080 	.word	0x3b000080
 8006524:	20012eec 	.word	0x20012eec
 8006528:	200190dc 	.word	0x200190dc
 800652c:	240753a0 	.word	0x240753a0
		if(writingState == ReceivingPreset)
 8006530:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <handleSPI+0x404>)
 8006532:	781a      	ldrb	r2, [r3, #0]
 8006534:	2a02      	cmp	r2, #2
 8006536:	f47f ae59 	bne.w	80061ec <handleSPI+0x2c>
			 presetWaitingToParse = bufferPos;
 800653a:	4923      	ldr	r1, [pc, #140]	; (80065c8 <handleSPI+0x408>)
			 writingState = 0;
 800653c:	2200      	movs	r2, #0
			 presetNumberToLoad = presetNumberToSave;
 800653e:	4823      	ldr	r0, [pc, #140]	; (80065cc <handleSPI+0x40c>)
			 writingState = 0;
 8006540:	701a      	strb	r2, [r3, #0]
			 presetNumberToLoad = presetNumberToSave;
 8006542:	7800      	ldrb	r0, [r0, #0]
			 presetWaitingToParse = bufferPos;
 8006544:	880a      	ldrh	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
 8006546:	880b      	ldrh	r3, [r1, #0]
			 presetNumberToLoad = presetNumberToSave;
 8006548:	4921      	ldr	r1, [pc, #132]	; (80065d0 <handleSPI+0x410>)
			 presetWaitingToParse = bufferPos;
 800654a:	b292      	uxth	r2, r2
			 presetWaitingToWrite = bufferPos;
 800654c:	b29b      	uxth	r3, r3
			 presetNumberToLoad = presetNumberToSave;
 800654e:	7008      	strb	r0, [r1, #0]
			 presetWaitingToParse = bufferPos;
 8006550:	4920      	ldr	r1, [pc, #128]	; (80065d4 <handleSPI+0x414>)
 8006552:	600a      	str	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
 8006554:	4a20      	ldr	r2, [pc, #128]	; (80065d8 <handleSPI+0x418>)
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	e648      	b.n	80061ec <handleSPI+0x2c>
 800655a:	481b      	ldr	r0, [pc, #108]	; (80065c8 <handleSPI+0x408>)
 800655c:	e6e5      	b.n	800632a <handleSPI+0x16a>
		 uint8_t currentByte = offset+1;
 800655e:	1c47      	adds	r7, r0, #1
 8006560:	4e1e      	ldr	r6, [pc, #120]	; (80065dc <handleSPI+0x41c>)
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8006562:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 80065e0 <handleSPI+0x420>
 8006566:	fa55 f787 	uxtab	r7, r5, r7
 800656a:	f106 0830 	add.w	r8, r6, #48	; 0x30
 800656e:	f817 3b01 	ldrb.w	r3, [r7], #1
 8006572:	4630      	mov	r0, r6
			for (int i = 0; i < 12; i++)
 8006574:	3604      	adds	r6, #4
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8006576:	ee00 3a10 	vmov	s0, r3
 800657a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800657e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006582:	f00e fdd9 	bl	8015138 <tExpSmooth_setDest>
			for (int i = 0; i < 12; i++)
 8006586:	45b0      	cmp	r8, r6
 8006588:	d1f1      	bne.n	800656e <handleSPI+0x3ae>
			currentByte += 12;
 800658a:	f104 070d 	add.w	r7, r4, #13
 800658e:	4e15      	ldr	r6, [pc, #84]	; (80065e4 <handleSPI+0x424>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8006590:	ed9f 8a13 	vldr	s16, [pc, #76]	; 80065e0 <handleSPI+0x420>
 8006594:	b2ff      	uxtb	r7, r7
 8006596:	f106 0828 	add.w	r8, r6, #40	; 0x28
 800659a:	3f01      	subs	r7, #1
 800659c:	442f      	add	r7, r5
 800659e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80065a2:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
 80065a4:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
 80065a6:	ee00 3a10 	vmov	s0, r3
 80065aa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80065ae:	ee20 0a08 	vmul.f32	s0, s0, s16
 80065b2:	f00e fdc1 	bl	8015138 <tExpSmooth_setDest>
			for (int i = 0; i < 10; i++)
 80065b6:	45b0      	cmp	r8, r6
 80065b8:	d1f1      	bne.n	800659e <handleSPI+0x3de>
		 updateStateFromSPIMessage(offset);
 80065ba:	4620      	mov	r0, r4
 80065bc:	f7fb f868 	bl	8001690 <updateStateFromSPIMessage>
 80065c0:	e614      	b.n	80061ec <handleSPI+0x2c>
 80065c2:	bf00      	nop
 80065c4:	200190de 	.word	0x200190de
 80065c8:	2001304a 	.word	0x2001304a
 80065cc:	20016cce 	.word	0x20016cce
 80065d0:	200006e4 	.word	0x200006e4
 80065d4:	20016cd4 	.word	0x20016cd4
 80065d8:	20016cd8 	.word	0x20016cd8
 80065dc:	20005150 	.word	0x20005150
 80065e0:	3b808081 	.word	0x3b808081
 80065e4:	20005534 	.word	0x20005534

080065e8 <parsePreset>:


void __ATTR_ITCMRAM parsePreset(int size, int presetNumber)
{
 80065e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	b087      	sub	sp, #28
 80065ee:	460e      	mov	r6, r1
 80065f0:	9000      	str	r0, [sp, #0]
 80065f2:	9105      	str	r1, [sp, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80065f4:	b672      	cpsid	i
	//turn off the volume while changing parameters
	 __disable_irq();
	 presetReady = 0;
 80065f6:	2500      	movs	r5, #0
 80065f8:	4beb      	ldr	r3, [pc, #940]	; (80069a8 <parsePreset+0x3c0>)

	uint16_t bufferIndex = 0;
	//read first 14 items in buffer as the 14 character string that is the name of the preset
	for (int i = 0; i < 14; i++)
	{
		presetName[i] = buffer[bufferIndex];
 80065fa:	4cec      	ldr	r4, [pc, #944]	; (80069ac <parsePreset+0x3c4>)
		 audioOutBuffer[i] = 0;
 80065fc:	2280      	movs	r2, #128	; 0x80
 80065fe:	4629      	mov	r1, r5
 8006600:	48eb      	ldr	r0, [pc, #940]	; (80069b0 <parsePreset+0x3c8>)
	audioMasterLevel = 0.0f;
 8006602:	f04f 0b00 	mov.w	fp, #0
	 presetReady = 0;
 8006606:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
 8006608:	f016 fc84 	bl	801cf14 <memset>
	audioMasterLevel = 0.0f;
 800660c:	49e9      	ldr	r1, [pc, #932]	; (80069b4 <parsePreset+0x3cc>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800660e:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
		presetName[i] = buffer[bufferIndex];
 8006612:	78e6      	ldrb	r6, [r4, #3]
 8006614:	4be8      	ldr	r3, [pc, #928]	; (80069b8 <parsePreset+0x3d0>)
	audioMasterLevel = 0.0f;
 8006616:	f8c1 b000 	str.w	fp, [r1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800661a:	ea4f 0b40 	mov.w	fp, r0, lsl #1
		presetName[i] = buffer[bufferIndex];
 800661e:	f894 c004 	ldrb.w	ip, [r4, #4]
 8006622:	f894 a000 	ldrb.w	sl, [r4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8006626:	49e5      	ldr	r1, [pc, #916]	; (80069bc <parsePreset+0x3d4>)
 8006628:	4ae4      	ldr	r2, [pc, #912]	; (80069bc <parsePreset+0x3d4>)
		presetName[i] = buffer[bufferIndex];
 800662a:	9601      	str	r6, [sp, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800662c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006630:	f801 a00b 	strb.w	sl, [r1, fp]
		presetName[i] = buffer[bufferIndex];
 8006634:	78a7      	ldrb	r7, [r4, #2]
 8006636:	f894 8001 	ldrb.w	r8, [r4, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800663a:	9901      	ldr	r1, [sp, #4]
		presetName[i] = buffer[bufferIndex];
 800663c:	f8cd c008 	str.w	ip, [sp, #8]
 8006640:	f883 c004 	strb.w	ip, [r3, #4]
 8006644:	f894 c005 	ldrb.w	ip, [r4, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8006648:	f882 8001 	strb.w	r8, [r2, #1]
		presetName[i] = buffer[bufferIndex];
 800664c:	f894 9007 	ldrb.w	r9, [r4, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8006650:	7097      	strb	r7, [r2, #2]
		presetName[i] = buffer[bufferIndex];
 8006652:	f894 e009 	ldrb.w	lr, [r4, #9]
 8006656:	70de      	strb	r6, [r3, #3]
 8006658:	f883 c005 	strb.w	ip, [r3, #5]
 800665c:	7a26      	ldrb	r6, [r4, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800665e:	70d1      	strb	r1, [r2, #3]
		presetName[i] = buffer[bufferIndex];
 8006660:	f8cd c00c 	str.w	ip, [sp, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8006664:	9902      	ldr	r1, [sp, #8]
		presetName[i] = buffer[bufferIndex];
 8006666:	f894 c006 	ldrb.w	ip, [r4, #6]
 800666a:	709f      	strb	r7, [r3, #2]
 800666c:	f883 c006 	strb.w	ip, [r3, #6]
 8006670:	721e      	strb	r6, [r3, #8]
 8006672:	f883 a000 	strb.w	sl, [r3]
 8006676:	f883 8001 	strb.w	r8, [r3, #1]
 800667a:	f8cd c010 	str.w	ip, [sp, #16]
 800667e:	f883 9007 	strb.w	r9, [r3, #7]
 8006682:	f894 c00a 	ldrb.w	ip, [r4, #10]
 8006686:	f883 e009 	strb.w	lr, [r3, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800668a:	7111      	strb	r1, [r2, #4]
 800668c:	9903      	ldr	r1, [sp, #12]
		presetName[i] = buffer[bufferIndex];
 800668e:	7ae7      	ldrb	r7, [r4, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8006690:	7151      	strb	r1, [r2, #5]
 8006692:	9904      	ldr	r1, [sp, #16]
		presetName[i] = buffer[bufferIndex];
 8006694:	72df      	strb	r7, [r3, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8006696:	7191      	strb	r1, [r2, #6]
 8006698:	f882 9007 	strb.w	r9, [r2, #7]
 800669c:	7216      	strb	r6, [r2, #8]
 800669e:	f882 e009 	strb.w	lr, [r2, #9]
 80066a2:	f882 c00a 	strb.w	ip, [r2, #10]
 80066a6:	72d7      	strb	r7, [r2, #11]
		presetName[i] = buffer[bufferIndex];
 80066a8:	7b27      	ldrb	r7, [r4, #12]
	for (int j = 0; j < 8; j++)
	{
		for (int k = 0; k < 14; k++)
		{

			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80066aa:	49c5      	ldr	r1, [pc, #788]	; (80069c0 <parsePreset+0x3d8>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 80066ac:	7317      	strb	r7, [r2, #12]
		presetName[i] = buffer[bufferIndex];
 80066ae:	731f      	strb	r7, [r3, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80066b0:	eb01 1600 	add.w	r6, r1, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
 80066b4:	7b67      	ldrb	r7, [r4, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80066b6:	0100      	lsls	r0, r0, #4
		presetName[i] = buffer[bufferIndex];
 80066b8:	f883 c00a 	strb.w	ip, [r3, #10]
 80066bc:	735f      	strb	r7, [r3, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80066be:	7ba3      	ldrb	r3, [r4, #14]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 80066c0:	7357      	strb	r7, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80066c2:	540b      	strb	r3, [r1, r0]
 80066c4:	7be3      	ldrb	r3, [r4, #15]
 80066c6:	7073      	strb	r3, [r6, #1]
 80066c8:	7c23      	ldrb	r3, [r4, #16]
 80066ca:	70b3      	strb	r3, [r6, #2]
 80066cc:	7c63      	ldrb	r3, [r4, #17]
 80066ce:	70f3      	strb	r3, [r6, #3]
 80066d0:	7ca3      	ldrb	r3, [r4, #18]
 80066d2:	7133      	strb	r3, [r6, #4]
 80066d4:	7ce3      	ldrb	r3, [r4, #19]
 80066d6:	7173      	strb	r3, [r6, #5]
 80066d8:	7d23      	ldrb	r3, [r4, #20]
 80066da:	71b3      	strb	r3, [r6, #6]
 80066dc:	7d63      	ldrb	r3, [r4, #21]
 80066de:	71f3      	strb	r3, [r6, #7]
 80066e0:	7da3      	ldrb	r3, [r4, #22]
 80066e2:	7233      	strb	r3, [r6, #8]
 80066e4:	7de3      	ldrb	r3, [r4, #23]
 80066e6:	7273      	strb	r3, [r6, #9]
 80066e8:	7e23      	ldrb	r3, [r4, #24]
 80066ea:	72b3      	strb	r3, [r6, #10]
 80066ec:	7e63      	ldrb	r3, [r4, #25]
 80066ee:	72f3      	strb	r3, [r6, #11]
 80066f0:	7ea3      	ldrb	r3, [r4, #26]
 80066f2:	7333      	strb	r3, [r6, #12]
 80066f4:	7ee3      	ldrb	r3, [r4, #27]
 80066f6:	7373      	strb	r3, [r6, #13]
 80066f8:	7f23      	ldrb	r3, [r4, #28]
 80066fa:	73b3      	strb	r3, [r6, #14]
 80066fc:	7f63      	ldrb	r3, [r4, #29]
 80066fe:	73f3      	strb	r3, [r6, #15]
 8006700:	7fa3      	ldrb	r3, [r4, #30]
 8006702:	7433      	strb	r3, [r6, #16]
 8006704:	7fe3      	ldrb	r3, [r4, #31]
 8006706:	7473      	strb	r3, [r6, #17]
 8006708:	f894 3020 	ldrb.w	r3, [r4, #32]
 800670c:	74b3      	strb	r3, [r6, #18]
 800670e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8006712:	74f3      	strb	r3, [r6, #19]
 8006714:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8006718:	7533      	strb	r3, [r6, #20]
 800671a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800671e:	7573      	strb	r3, [r6, #21]
 8006720:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006724:	75b3      	strb	r3, [r6, #22]
 8006726:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800672a:	75f3      	strb	r3, [r6, #23]
 800672c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8006730:	7633      	strb	r3, [r6, #24]
 8006732:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8006736:	7673      	strb	r3, [r6, #25]
 8006738:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800673c:	76b3      	strb	r3, [r6, #26]
 800673e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8006742:	76f3      	strb	r3, [r6, #27]
 8006744:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8006748:	7733      	strb	r3, [r6, #28]
 800674a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800674e:	7773      	strb	r3, [r6, #29]
 8006750:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006754:	77b3      	strb	r3, [r6, #30]
 8006756:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800675a:	77f3      	strb	r3, [r6, #31]
 800675c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8006760:	f886 3020 	strb.w	r3, [r6, #32]
 8006764:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8006768:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
 800676c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006770:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
 8006774:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8006778:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
 800677c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8006780:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 8006784:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8006788:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
 800678c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006790:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
 8006794:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006798:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
 800679c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80067a0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 80067a4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80067a8:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
 80067ac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80067b0:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
 80067b4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80067b8:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
 80067bc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80067c0:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
 80067c4:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80067c8:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
 80067cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80067d0:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
 80067d4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80067d8:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
 80067dc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80067e0:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 80067e4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80067e8:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
 80067ec:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80067f0:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
 80067f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80067f8:	f886 3033 	strb.w	r3, [r6, #51]	; 0x33
 80067fc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006800:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
 8006804:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006808:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
 800680c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006810:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
 8006814:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006818:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
 800681c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006820:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
 8006824:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8006828:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
 800682c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8006830:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
 8006834:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8006838:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
 800683c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8006840:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
 8006844:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8006848:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
 800684c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006850:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
 8006854:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 8006858:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
 800685c:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8006860:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
 8006864:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 8006868:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
 800686c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006870:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
 8006874:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006878:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
 800687c:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8006880:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
 8006884:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8006888:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
 800688c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8006890:	f886 3046 	strb.w	r3, [r6, #70]	; 0x46
 8006894:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8006898:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
 800689c:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80068a0:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
 80068a4:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 80068a8:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
 80068ac:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80068b0:	f886 304a 	strb.w	r3, [r6, #74]	; 0x4a
 80068b4:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80068b8:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
 80068bc:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 80068c0:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 80068c4:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
 80068c8:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
 80068cc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80068d0:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 80068d4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80068d8:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
 80068dc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80068e0:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 80068e4:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 80068e8:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
 80068ec:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80068f0:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
 80068f4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80068f8:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
 80068fc:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8006900:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
 8006904:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
 8006908:	f886 3055 	strb.w	r3, [r6, #85]	; 0x55
 800690c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8006910:	f886 3056 	strb.w	r3, [r6, #86]	; 0x56
 8006914:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 8006918:	f886 3057 	strb.w	r3, [r6, #87]	; 0x57
 800691c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8006920:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
 8006924:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8006928:	f886 3059 	strb.w	r3, [r6, #89]	; 0x59
 800692c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8006930:	f886 305a 	strb.w	r3, [r6, #90]	; 0x5a
 8006934:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8006938:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
 800693c:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8006940:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
 8006944:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8006948:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 800694c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8006950:	f886 305e 	strb.w	r3, [r6, #94]	; 0x5e
 8006954:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8006958:	f886 305f 	strb.w	r3, [r6, #95]	; 0x5f
 800695c:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 8006960:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
 8006964:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
 8006968:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
 800696c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8006970:	f886 3062 	strb.w	r3, [r6, #98]	; 0x62
 8006974:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
 8006978:	f886 3063 	strb.w	r3, [r6, #99]	; 0x63
 800697c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8006980:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
 8006984:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
 8006988:	f886 3065 	strb.w	r3, [r6, #101]	; 0x65
 800698c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006990:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
 8006994:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
		}
	}


	//read first element in buffer (after the 14 character name) as a count of how many parameters
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 8006998:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 800699c:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
 80069a0:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 80069a4:	e00e      	b.n	80069c4 <parsePreset+0x3dc>
 80069a6:	bf00      	nop
 80069a8:	20005574 	.word	0x20005574
 80069ac:	300001e0 	.word	0x300001e0
 80069b0:	30000000 	.word	0x30000000
 80069b4:	200006dc 	.word	0x200006dc
 80069b8:	20016cc0 	.word	0x20016cc0
 80069bc:	24073020 	.word	0x24073020
 80069c0:	240753a0 	.word	0x240753a0
 80069c4:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
 80069c8:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 80069cc:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
 80069d0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 80069d4:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
 80069d8:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 80069dc:	f886 306b 	strb.w	r3, [r6, #107]	; 0x6b
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 80069e0:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 80069e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80069e8:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 80069ec:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 80069f0:	b29b      	uxth	r3, r3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80069f2:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
 80069f6:	f886 206d 	strb.w	r2, [r6, #109]	; 0x6d
 80069fa:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 80069fe:	f886 206e 	strb.w	r2, [r6, #110]	; 0x6e
 8006a02:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 8006a06:	f886 206f 	strb.w	r2, [r6, #111]	; 0x6f
	if (paramCount > size)
 8006a0a:	9a00      	ldr	r2, [sp, #0]
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	dc0d      	bgt.n	8006a2c <parsePreset+0x444>
		return;
	}

	//check the validity of the transfer by verifying that the param array and mapping arrays both end with the required 0xefef values
	//should make this a real checksum
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
 8006a10:	eb04 0043 	add.w	r0, r4, r3, lsl #1
	if (paramEndCheck != 0xefef)
 8006a14:	f64e 71ef 	movw	r1, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
 8006a18:	005f      	lsls	r7, r3, #1
 8006a1a:	f890 6080 	ldrb.w	r6, [r0, #128]	; 0x80
 8006a1e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006a22:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	if (paramEndCheck != 0xefef)
 8006a26:	b292      	uxth	r2, r2
 8006a28:	428a      	cmp	r2, r1
 8006a2a:	d009      	beq.n	8006a40 <parsePreset+0x458>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
	{
		//error in transmission - give up and don't parse!
		audioMasterLevel = 1.0f;
		presetWaitingToParse = 0;
 8006a2c:	4ac2      	ldr	r2, [pc, #776]	; (8006d38 <parsePreset+0x750>)
		audioMasterLevel = 1.0f;
 8006a2e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
 8006a32:	6015      	str	r5, [r2, #0]
		audioMasterLevel = 1.0f;
 8006a34:	4ac1      	ldr	r2, [pc, #772]	; (8006d3c <parsePreset+0x754>)
 8006a36:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006a38:	b662      	cpsie	i
	overSampled = 1;
	numEffectToTick = totalEffects;
	filterToTick = totalFilters;
	__enable_irq();
	presetReady = 1;
}
 8006a3a:	b007      	add	sp, #28
 8006a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
 8006a40:	f890 6082 	ldrb.w	r6, [r0, #130]	; 0x82
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
 8006a44:	f107 0284 	add.w	r2, r7, #132	; 0x84
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
 8006a48:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
 8006a4c:	eb01 2106 	add.w	r1, r1, r6, lsl #8
 8006a50:	b289      	uxth	r1, r1
 8006a52:	9103      	str	r1, [sp, #12]
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
 8006a54:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006a58:	b289      	uxth	r1, r1
 8006a5a:	440a      	add	r2, r1
 8006a5c:	9102      	str	r1, [sp, #8]
	if (mappingEndLocation > size)
 8006a5e:	9900      	ldr	r1, [sp, #0]
 8006a60:	b292      	uxth	r2, r2
 8006a62:	428a      	cmp	r2, r1
 8006a64:	dce2      	bgt.n	8006a2c <parsePreset+0x444>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
 8006a66:	18a6      	adds	r6, r4, r2
 8006a68:	5ca1      	ldrb	r1, [r4, r2]
 8006a6a:	7872      	ldrb	r2, [r6, #1]
 8006a6c:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
 8006a70:	f64f 61fe 	movw	r1, #65278	; 0xfefe
 8006a74:	b292      	uxth	r2, r2
 8006a76:	428a      	cmp	r2, r1
 8006a78:	d1d8      	bne.n	8006a2c <parsePreset+0x444>
	for (int i = 0; i < paramCount; i++)
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f001 81c9 	beq.w	8007e12 <parsePreset+0x182a>
 8006a80:	4eaf      	ldr	r6, [pc, #700]	; (8006d40 <parsePreset+0x758>)
 8006a82:	4621      	mov	r1, r4
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8006a84:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8006d44 <parsePreset+0x75c>
	for (int i = 0; i < paramCount; i++)
 8006a88:	4635      	mov	r5, r6
 8006a8a:	4637      	mov	r7, r6
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8006a8c:	f891 c080 	ldrb.w	ip, [r1, #128]	; 0x80
	for (int i = 0; i < paramCount; i++)
 8006a90:	3102      	adds	r1, #2
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8006a92:	f891 207f 	ldrb.w	r2, [r1, #127]	; 0x7f
	for (int i = 0; i < paramCount; i++)
 8006a96:	371c      	adds	r7, #28
 8006a98:	4281      	cmp	r1, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8006a9a:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 8006a9e:	ee07 2a90 	vmov	s15, r2
 8006aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006aaa:	ed47 7a07 	vstr	s15, [r7, #-28]	; 0xffffffe4
 8006aae:	ed47 7a06 	vstr	s15, [r7, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
 8006ab2:	d1eb      	bne.n	8006a8c <parsePreset+0x4a4>
 8006ab4:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
 8006ab8:	4aa1      	ldr	r2, [pc, #644]	; (8006d40 <parsePreset+0x758>)
 8006aba:	49a3      	ldr	r1, [pc, #652]	; (8006d48 <parsePreset+0x760>)
 8006abc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
		params[i].setParam = &blankFunction;
 8006ac0:	6151      	str	r1, [r2, #20]
	for (int i = 0; i < paramCount; i++)
 8006ac2:	321c      	adds	r2, #28
 8006ac4:	4282      	cmp	r2, r0
 8006ac6:	d1fb      	bne.n	8006ac0 <parsePreset+0x4d8>
 8006ac8:	4aa0      	ldr	r2, [pc, #640]	; (8006d4c <parsePreset+0x764>)
		params[i].scaleFunc = &scaleDefault;
 8006aca:	6132      	str	r2, [r6, #16]
	for (int i = 0; i < paramCount; i++)
 8006acc:	361c      	adds	r6, #28
 8006ace:	4286      	cmp	r6, r0
 8006ad0:	d1fb      	bne.n	8006aca <parsePreset+0x4e2>
	bufferIndex += 2;
 8006ad2:	005e      	lsls	r6, r3, #1
 8006ad4:	3684      	adds	r6, #132	; 0x84
 8006ad6:	b2b6      	uxth	r6, r6
	for (int i = paramCount; i < NUM_PARAMS; i++)
 8006ad8:	2b9b      	cmp	r3, #155	; 0x9b
 8006ada:	f001 8197 	beq.w	8007e0c <parsePreset+0x1824>
 8006ade:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006ae2:	4f9b      	ldr	r7, [pc, #620]	; (8006d50 <parsePreset+0x768>)
 8006ae4:	4998      	ldr	r1, [pc, #608]	; (8006d48 <parsePreset+0x760>)
			params[i].zeroToOneVal[v] = 0.0f;
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006aec:	4a97      	ldr	r2, [pc, #604]	; (8006d4c <parsePreset+0x764>)
 8006aee:	6018      	str	r0, [r3, #0]
 8006af0:	6058      	str	r0, [r3, #4]
		params[i].setParam = &blankFunction;
 8006af2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
 8006af6:	331c      	adds	r3, #28
 8006af8:	42bb      	cmp	r3, r7
 8006afa:	d1f8      	bne.n	8006aee <parsePreset+0x506>
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 8006afc:	4b95      	ldr	r3, [pc, #596]	; (8006d54 <parsePreset+0x76c>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006afe:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Transpose].scaleFunc = &scaleTranspose;
 8006b02:	4995      	ldr	r1, [pc, #596]	; (8006d58 <parsePreset+0x770>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 8006b04:	f8c5 3be0 	str.w	r3, [r5, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
 8006b08:	f8c5 3bfc 	str.w	r3, [r5, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
 8006b0c:	f8c5 3c34 	str.w	r3, [r5, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
 8006b10:	f8c5 3c88 	str.w	r3, [r5, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
 8006b14:	f8c5 3ca4 	str.w	r3, [r5, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
 8006b18:	f8c5 3cdc 	str.w	r3, [r5, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
 8006b1c:	f8c5 3d30 	str.w	r3, [r5, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
 8006b20:	f8c5 3d4c 	str.w	r3, [r5, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
 8006b24:	f8c5 3d84 	str.w	r3, [r5, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
 8006b28:	f8c5 3dd8 	str.w	r3, [r5, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
 8006b2c:	f8c5 3df4 	str.w	r3, [r5, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
 8006b30:	f8c5 3e2c 	str.w	r3, [r5, #3628]	; 0xe2c
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 8006b34:	4b89      	ldr	r3, [pc, #548]	; (8006d5c <parsePreset+0x774>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 8006b36:	4a8a      	ldr	r2, [pc, #552]	; (8006d60 <parsePreset+0x778>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 8006b38:	f8c5 32cc 	str.w	r3, [r5, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
 8006b3c:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
 8006b40:	f8c5 3438 	str.w	r3, [r5, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
 8006b44:	f8c5 34c4 	str.w	r3, [r5, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
 8006b48:	f8c5 35a4 	str.w	r3, [r5, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
 8006b4c:	f8c5 3630 	str.w	r3, [r5, #1584]	; 0x630
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 8006b50:	4b84      	ldr	r3, [pc, #528]	; (8006d64 <parsePreset+0x77c>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 8006b52:	f8df b244 	ldr.w	fp, [pc, #580]	; 8006d98 <parsePreset+0x7b0>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 8006b56:	f8c5 32e8 	str.w	r3, [r5, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
 8006b5a:	f8c5 3454 	str.w	r3, [r5, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
 8006b5e:	f8c5 35c0 	str.w	r3, [r5, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 8006b62:	4b81      	ldr	r3, [pc, #516]	; (8006d68 <parsePreset+0x780>)
	params[Transpose].scaleFunc = &scaleTranspose;
 8006b64:	f8c5 11d0 	str.w	r1, [r5, #464]	; 0x1d0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 8006b68:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
 8006b6c:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
 8006b70:	f8c5 35dc 	str.w	r3, [r5, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 8006b74:	4b7d      	ldr	r3, [pc, #500]	; (8006d6c <parsePreset+0x784>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 8006b76:	497e      	ldr	r1, [pc, #504]	; (8006d70 <parsePreset+0x788>)
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 8006b78:	f8c5 3aac 	str.w	r3, [r5, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
 8006b7c:	f8c5 3b54 	str.w	r3, [r5, #2900]	; 0xb54
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 8006b80:	4b7c      	ldr	r3, [pc, #496]	; (8006d74 <parsePreset+0x78c>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 8006b82:	f8c5 2e80 	str.w	r2, [r5, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
 8006b86:	f8c5 2f0c 	str.w	r2, [r5, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 8006b8a:	f8c5 3ae4 	str.w	r3, [r5, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
 8006b8e:	f8c5 3b8c 	str.w	r3, [r5, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 8006b92:	f8c5 11ec 	str.w	r1, [r5, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
 8006b96:	f8c5 2f98 	str.w	r2, [r5, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 8006b9a:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006b9e:	f6ab 1214 	subw	r2, fp, #2324	; 0x914
 8006ba2:	edd2 7a00 	vldr	s15, [r2]
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 8006ba6:	4a74      	ldr	r2, [pc, #464]	; (8006d78 <parsePreset+0x790>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 8006bac:	f8cb 20cc 	str.w	r2, [fp, #204]	; 0xcc
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006bb0:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006bb4:	fef8 7a67 	vrinta.f32	s15, s15
 8006bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bbc:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006bc0:	f89d 2000 	ldrb.w	r2, [sp]
 8006bc4:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006bc6:	4a6d      	ldr	r2, [pc, #436]	; (8006d7c <parsePreset+0x794>)
 8006bc8:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006bcc:	bf88      	it	hi
 8006bce:	f8c5 3748 	strhi.w	r3, [r5, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bd6:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006bda:	fef8 7a67 	vrinta.f32	s15, s15
 8006bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be2:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006be6:	f89d 2000 	ldrb.w	r2, [sp]
 8006bea:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006bec:	4a64      	ldr	r2, [pc, #400]	; (8006d80 <parsePreset+0x798>)
 8006bee:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006bf2:	bf88      	it	hi
 8006bf4:	f8c5 3748 	strhi.w	r3, [r5, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bfc:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006c00:	fef8 7a67 	vrinta.f32	s15, s15
 8006c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c08:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006c0c:	f89d 2000 	ldrb.w	r2, [sp]
 8006c10:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006c12:	4a5c      	ldr	r2, [pc, #368]	; (8006d84 <parsePreset+0x79c>)
 8006c14:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006c18:	bf88      	it	hi
 8006c1a:	f8c5 3828 	strhi.w	r3, [r5, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c22:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006c26:	fef8 7a67 	vrinta.f32	s15, s15
 8006c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c2e:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006c32:	f89d 2000 	ldrb.w	r2, [sp]
 8006c36:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006c38:	4a53      	ldr	r2, [pc, #332]	; (8006d88 <parsePreset+0x7a0>)
 8006c3a:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006c3e:	bf88      	it	hi
 8006c40:	f8c5 3828 	strhi.w	r3, [r5, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c48:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006c4c:	fef8 7a67 	vrinta.f32	s15, s15
 8006c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c54:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006c58:	f89d 2000 	ldrb.w	r2, [sp]
 8006c5c:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006c5e:	4a4b      	ldr	r2, [pc, #300]	; (8006d8c <parsePreset+0x7a4>)
 8006c60:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006c64:	bf88      	it	hi
 8006c66:	f8c5 3908 	strhi.w	r3, [r5, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c6e:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006c72:	fef8 7a67 	vrinta.f32	s15, s15
 8006c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c7a:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006c7e:	f89d 2000 	ldrb.w	r2, [sp]
 8006c82:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006c84:	4a42      	ldr	r2, [pc, #264]	; (8006d90 <parsePreset+0x7a8>)
 8006c86:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006c8a:	bf88      	it	hi
 8006c8c:	f8c5 3908 	strhi.w	r3, [r5, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c94:	fef8 7a67 	vrinta.f32	s15, s15
 8006c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c9c:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006ca0:	f89d 2000 	ldrb.w	r2, [sp]
 8006ca4:	2a0b      	cmp	r2, #11
 8006ca6:	d901      	bls.n	8006cac <parsePreset+0x6c4>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006ca8:	f8c5 39e8 	str.w	r3, [r5, #2536]	; 0x9e8
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006cac:	4a39      	ldr	r2, [pc, #228]	; (8006d94 <parsePreset+0x7ac>)
 8006cae:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006cb2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8006d40 <parsePreset+0x758>
 8006cb6:	edd2 7a00 	vldr	s15, [r2]
	for (int i = 0; i < paramCount; i++)
 8006cba:	46c8      	mov	r8, r9
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cc0:	fef8 7a67 	vrinta.f32	s15, s15
 8006cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc8:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006ccc:	f89d 2000 	ldrb.w	r2, [sp]
 8006cd0:	2a0b      	cmp	r2, #11
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006cd2:	bf88      	it	hi
 8006cd4:	f8c5 39e8 	strhi.w	r3, [r5, #2536]	; 0x9e8
	for (int i = 0; i < paramCount; i++)
 8006cd8:	464d      	mov	r5, r9
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8006cda:	f8d8 3010 	ldr.w	r3, [r8, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8006cde:	f108 081c 	add.w	r8, r8, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8006ce2:	ed18 0a07 	vldr	s0, [r8, #-28]	; 0xffffffe4
 8006ce6:	4798      	blx	r3
 8006ce8:	ed08 0a05 	vstr	s0, [r8, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
 8006cec:	45b8      	cmp	r8, r7
 8006cee:	d1f4      	bne.n	8006cda <parsePreset+0x6f2>
 8006cf0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8006d40 <parsePreset+0x758>
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8006cf4:	f8d8 3010 	ldr.w	r3, [r8, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8006cf8:	f108 081c 	add.w	r8, r8, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8006cfc:	ed18 0a06 	vldr	s0, [r8, #-24]	; 0xffffffe8
 8006d00:	4798      	blx	r3
 8006d02:	ed08 0a04 	vstr	s0, [r8, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8006d06:	45b8      	cmp	r8, r7
 8006d08:	d1f4      	bne.n	8006cf4 <parsePreset+0x70c>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006d0a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8006d0e:	edd5 7af7 	vldr	s15, [r5, #988]	; 0x3dc
 8006d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d16:	fef8 7a67 	vrinta.f32	s15, s15
 8006d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d1e:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
 8006d22:	2b06      	cmp	r3, #6
 8006d24:	d83d      	bhi.n	8006da2 <parsePreset+0x7ba>
 8006d26:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006d2a:	07e2      	.short	0x07e2
 8006d2c:	07dd0039 	.word	0x07dd0039
 8006d30:	07d307d8 	.word	0x07d307d8
 8006d34:	07c907ce 	.word	0x07c907ce
 8006d38:	20016cd4 	.word	0x20016cd4
 8006d3c:	200006dc 	.word	0x200006dc
 8006d40:	20015bcc 	.word	0x20015bcc
 8006d44:	377ffff6 	.word	0x377ffff6
 8006d48:	08005751 	.word	0x08005751
 8006d4c:	0800588d 	.word	0x0800588d
 8006d50:	20016cc0 	.word	0x20016cc0
 8006d54:	08005991 	.word	0x08005991
 8006d58:	080058a1 	.word	0x080058a1
 8006d5c:	080056d5 	.word	0x080056d5
 8006d60:	08005a19 	.word	0x08005a19
 8006d64:	080056ed 	.word	0x080056ed
 8006d68:	08005709 	.word	0x08005709
 8006d6c:	08005725 	.word	0x08005725
 8006d70:	080058d1 	.word	0x080058d1
 8006d74:	080058f5 	.word	0x080058f5
 8006d78:	08005735 	.word	0x08005735
 8006d7c:	200162bc 	.word	0x200162bc
 8006d80:	20016398 	.word	0x20016398
 8006d84:	2001639c 	.word	0x2001639c
 8006d88:	20016478 	.word	0x20016478
 8006d8c:	2001647c 	.word	0x2001647c
 8006d90:	20016558 	.word	0x20016558
 8006d94:	2001655c 	.word	0x2001655c
 8006d98:	20016bcc 	.word	0x20016bcc
				  shapeTick[i] = &sineTriTick;
 8006d9c:	4b8e      	ldr	r3, [pc, #568]	; (8006fd8 <parsePreset+0x9f0>)
 8006d9e:	4a8f      	ldr	r2, [pc, #572]	; (8006fdc <parsePreset+0x9f4>)
 8006da0:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006da2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006da6:	4b8e      	ldr	r3, [pc, #568]	; (8006fe0 <parsePreset+0x9f8>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006da8:	edd5 6aaa 	vldr	s13, [r5, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006dac:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006db0:	eef4 6ae7 	vcmpe.f32	s13, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006db4:	edd3 7a00 	vldr	s15, [r3]
 8006db8:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006dc0:	fef8 7a67 	vrinta.f32	s15, s15
 8006dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	uint8_t enabledCount = 0;
 8006dc8:	bfcc      	ite	gt
 8006dca:	2301      	movgt	r3, #1
 8006dcc:	2300      	movle	r3, #0
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006dce:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
 8006dd2:	2a06      	cmp	r2, #6
 8006dd4:	d80b      	bhi.n	8006dee <parsePreset+0x806>
 8006dd6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006dda:	076c      	.short	0x076c
 8006ddc:	07670007 	.word	0x07670007
 8006de0:	075d0762 	.word	0x075d0762
 8006de4:	07530758 	.word	0x07530758
				  shapeTick[i] = &sineTriTick;
 8006de8:	4a7b      	ldr	r2, [pc, #492]	; (8006fd8 <parsePreset+0x9f0>)
 8006dea:	497c      	ldr	r1, [pc, #496]	; (8006fdc <parsePreset+0x9f4>)
 8006dec:	6051      	str	r1, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006dee:	4a7d      	ldr	r2, [pc, #500]	; (8006fe4 <parsePreset+0x9fc>)
 8006df0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006df4:	ed92 7a00 	vldr	s14, [r2]
 8006df8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e00:	dd01      	ble.n	8006e06 <parsePreset+0x81e>
			enabledCount++;
 8006e02:	3301      	adds	r3, #1
 8006e04:	b2db      	uxtb	r3, r3
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006e06:	4a78      	ldr	r2, [pc, #480]	; (8006fe8 <parsePreset+0xa00>)
 8006e08:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8006e0c:	edd2 7a00 	vldr	s15, [r2]
 8006e10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e14:	fef8 7a67 	vrinta.f32	s15, s15
 8006e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e1c:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
 8006e20:	2a06      	cmp	r2, #6
 8006e22:	d80b      	bhi.n	8006e3c <parsePreset+0x854>
 8006e24:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006e28:	07270007 	.word	0x07270007
 8006e2c:	071d0722 	.word	0x071d0722
 8006e30:	07130718 	.word	0x07130718
 8006e34:	070e      	.short	0x070e
				  shapeTick[i] = &sawSquareTick;
 8006e36:	4a68      	ldr	r2, [pc, #416]	; (8006fd8 <parsePreset+0x9f0>)
 8006e38:	496c      	ldr	r1, [pc, #432]	; (8006fec <parsePreset+0xa04>)
 8006e3a:	6091      	str	r1, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006e3c:	4a6c      	ldr	r2, [pc, #432]	; (8006ff0 <parsePreset+0xa08>)
 8006e3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006e42:	ed92 7a00 	vldr	s14, [r2]
 8006e46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e4e:	dd01      	ble.n	8006e54 <parsePreset+0x86c>
			enabledCount++;
 8006e50:	3301      	adds	r3, #1
 8006e52:	b2db      	uxtb	r3, r3
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8006e54:	4a67      	ldr	r2, [pc, #412]	; (8006ff4 <parsePreset+0xa0c>)
 8006e56:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8006e5a:	edd2 7a00 	vldr	s15, [r2]
	oscAmpMult = oscAmpMultArray[enabledCount];
 8006e5e:	4a66      	ldr	r2, [pc, #408]	; (8006ff8 <parsePreset+0xa10>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8006e60:	ee67 7a87 	vmul.f32	s15, s15, s14
	oscAmpMult = oscAmpMultArray[enabledCount];
 8006e64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e68:	4a64      	ldr	r2, [pc, #400]	; (8006ffc <parsePreset+0xa14>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8006e6a:	fef8 7a67 	vrinta.f32	s15, s15
 8006e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 8006e72:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8006e74:	ee17 3a90 	vmov	r3, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 8006e78:	6011      	str	r1, [r2, #0]
		switch (filterType)
 8006e7a:	4961      	ldr	r1, [pc, #388]	; (8007000 <parsePreset+0xa18>)
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d811      	bhi.n	8006ea4 <parsePreset+0x8bc>
 8006e80:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006e84:	06d70009 	.word	0x06d70009
 8006e88:	06c506ce 	.word	0x06c506ce
 8006e8c:	06b306bc 	.word	0x06b306bc
 8006e90:	06a106aa 	.word	0x06a106aa
 8006e94:	0698      	.short	0x0698
				  filterTick[i] = &lowpassTick;
 8006e96:	4b5b      	ldr	r3, [pc, #364]	; (8007004 <parsePreset+0xa1c>)
 8006e98:	4a5b      	ldr	r2, [pc, #364]	; (8007008 <parsePreset+0xa20>)
 8006e9a:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &lowpassSetQ;
 8006e9c:	4b5b      	ldr	r3, [pc, #364]	; (800700c <parsePreset+0xa24>)
 8006e9e:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &lowpassSetGain;
 8006ea0:	4b5b      	ldr	r3, [pc, #364]	; (8007010 <parsePreset+0xa28>)
 8006ea2:	604b      	str	r3, [r1, #4]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8006ea4:	4b5b      	ldr	r3, [pc, #364]	; (8007014 <parsePreset+0xa2c>)
 8006ea6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8006eaa:	edd3 7a00 	vldr	s15, [r3]
 8006eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006eb2:	fef8 7a67 	vrinta.f32	s15, s15
 8006eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eba:	ee17 3a90 	vmov	r3, s15
		switch (filterType)
 8006ebe:	2b08      	cmp	r3, #8
 8006ec0:	d811      	bhi.n	8006ee6 <parsePreset+0x8fe>
 8006ec2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006ec6:	0009      	.short	0x0009
 8006ec8:	0665066e 	.word	0x0665066e
 8006ecc:	0653065c 	.word	0x0653065c
 8006ed0:	0641064a 	.word	0x0641064a
 8006ed4:	062f0638 	.word	0x062f0638
				  filterTick[i] = &lowpassTick;
 8006ed8:	4b4a      	ldr	r3, [pc, #296]	; (8007004 <parsePreset+0xa1c>)
 8006eda:	4a4b      	ldr	r2, [pc, #300]	; (8007008 <parsePreset+0xa20>)
 8006edc:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &lowpassSetQ;
 8006ede:	4b4b      	ldr	r3, [pc, #300]	; (800700c <parsePreset+0xa24>)
 8006ee0:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &lowpassSetGain;
 8006ee2:	4b4b      	ldr	r3, [pc, #300]	; (8007010 <parsePreset+0xa28>)
 8006ee4:	60cb      	str	r3, [r1, #12]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8006ee6:	4b4c      	ldr	r3, [pc, #304]	; (8007018 <parsePreset+0xa30>)
 8006ee8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006eec:	edd3 7a00 	vldr	s15, [r3]
 8006ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ef4:	fef8 7a67 	vrinta.f32	s15, s15
 8006ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006efc:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8006f00:	2b05      	cmp	r3, #5
 8006f02:	f200 878a 	bhi.w	8007e1a <parsePreset+0x1832>
 8006f06:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006f0a:	0601      	.short	0x0601
 8006f0c:	05e905f5 	.word	0x05e905f5
 8006f10:	057105dd 	.word	0x057105dd
 8006f14:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
 8006f16:	4b41      	ldr	r3, [pc, #260]	; (800701c <parsePreset+0xa34>)
 8006f18:	4841      	ldr	r0, [pc, #260]	; (8007020 <parsePreset+0xa38>)
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8006f1a:	4a42      	ldr	r2, [pc, #264]	; (8007024 <parsePreset+0xa3c>)
				lfoShapeTick[i] = &lfoPulseTick;
 8006f1c:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8006f1e:	4b42      	ldr	r3, [pc, #264]	; (8007028 <parsePreset+0xa40>)
 8006f20:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8006f22:	4b42      	ldr	r3, [pc, #264]	; (800702c <parsePreset+0xa44>)
 8006f24:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8006f26:	4b42      	ldr	r3, [pc, #264]	; (8007030 <parsePreset+0xa48>)
 8006f28:	6093      	str	r3, [r2, #8]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8006f2a:	4b42      	ldr	r3, [pc, #264]	; (8007034 <parsePreset+0xa4c>)
 8006f2c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006f30:	edd3 7a00 	vldr	s15, [r3]
 8006f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f38:	fef8 7a67 	vrinta.f32	s15, s15
 8006f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f40:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8006f44:	2b05      	cmp	r3, #5
 8006f46:	d810      	bhi.n	8006f6a <parsePreset+0x982>
 8006f48:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006f4c:	053a0545 	.word	0x053a0545
 8006f50:	0524052f 	.word	0x0524052f
 8006f54:	0006050e 	.word	0x0006050e
				lfoShapeTick[i] = &lfoPulseTick;
 8006f58:	4b30      	ldr	r3, [pc, #192]	; (800701c <parsePreset+0xa34>)
 8006f5a:	4831      	ldr	r0, [pc, #196]	; (8007020 <parsePreset+0xa38>)
 8006f5c:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8006f5e:	4b32      	ldr	r3, [pc, #200]	; (8007028 <parsePreset+0xa40>)
 8006f60:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8006f62:	4b32      	ldr	r3, [pc, #200]	; (800702c <parsePreset+0xa44>)
 8006f64:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8006f66:	4b32      	ldr	r3, [pc, #200]	; (8007030 <parsePreset+0xa48>)
 8006f68:	6153      	str	r3, [r2, #20]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8006f6a:	4b33      	ldr	r3, [pc, #204]	; (8007038 <parsePreset+0xa50>)
 8006f6c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006f70:	edd3 7a00 	vldr	s15, [r3]
 8006f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f78:	fef8 7a67 	vrinta.f32	s15, s15
 8006f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f80:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	d810      	bhi.n	8006faa <parsePreset+0x9c2>
 8006f88:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006f8c:	04e304f9 	.word	0x04e304f9
 8006f90:	04cd04d8 	.word	0x04cd04d8
 8006f94:	000604ac 	.word	0x000604ac
				lfoShapeTick[i] = &lfoPulseTick;
 8006f98:	4b20      	ldr	r3, [pc, #128]	; (800701c <parsePreset+0xa34>)
 8006f9a:	4821      	ldr	r0, [pc, #132]	; (8007020 <parsePreset+0xa38>)
 8006f9c:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8006f9e:	4b22      	ldr	r3, [pc, #136]	; (8007028 <parsePreset+0xa40>)
 8006fa0:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8006fa2:	4b22      	ldr	r3, [pc, #136]	; (800702c <parsePreset+0xa44>)
 8006fa4:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8006fa6:	4b22      	ldr	r3, [pc, #136]	; (8007030 <parsePreset+0xa48>)
 8006fa8:	6213      	str	r3, [r2, #32]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8006faa:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006fae:	eddb 7a1c 	vldr	s15, [fp, #112]	; 0x70
 8006fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006fb6:	fef8 7a67 	vrinta.f32	s15, s15
 8006fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fbe:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8006fc2:	2b05      	cmp	r3, #5
 8006fc4:	d843      	bhi.n	800704e <parsePreset+0xa66>
 8006fc6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006fca:	04a3      	.short	0x04a3
 8006fcc:	04820498 	.word	0x04820498
 8006fd0:	046c0477 	.word	0x046c0477
 8006fd4:	0039      	.short	0x0039
 8006fd6:	bf00      	nop
 8006fd8:	20005a40 	.word	0x20005a40
 8006fdc:	080019dd 	.word	0x080019dd
 8006fe0:	20016114 	.word	0x20016114
 8006fe4:	20015fe0 	.word	0x20015fe0
 8006fe8:	20016280 	.word	0x20016280
 8006fec:	08001961 	.word	0x08001961
 8006ff0:	2001614c 	.word	0x2001614c
 8006ff4:	20016654 	.word	0x20016654
 8006ff8:	20000018 	.word	0x20000018
 8006ffc:	20000014 	.word	0x20000014
 8007000:	200150dc 	.word	0x200150dc
 8007004:	20004ff4 	.word	0x20004ff4
 8007008:	08001dd1 	.word	0x08001dd1
 800700c:	080020a9 	.word	0x080020a9
 8007010:	0800215d 	.word	0x0800215d
 8007014:	200166fc 	.word	0x200166fc
 8007018:	20016a98 	.word	0x20016a98
 800701c:	20005238 	.word	0x20005238
 8007020:	08002b5d 	.word	0x08002b5d
 8007024:	20015208 	.word	0x20015208
 8007028:	08002bdd 	.word	0x08002bdd
 800702c:	08002c9d 	.word	0x08002c9d
 8007030:	08002c55 	.word	0x08002c55
 8007034:	20016b24 	.word	0x20016b24
 8007038:	20016bb0 	.word	0x20016bb0
				lfoShapeTick[i] = &lfoPulseTick;
 800703c:	4b1d      	ldr	r3, [pc, #116]	; (80070b4 <parsePreset+0xacc>)
 800703e:	481e      	ldr	r0, [pc, #120]	; (80070b8 <parsePreset+0xad0>)
 8007040:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8007042:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <parsePreset+0xad4>)
 8007044:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8007046:	4b1e      	ldr	r3, [pc, #120]	; (80070c0 <parsePreset+0xad8>)
 8007048:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 800704a:	4b1e      	ldr	r3, [pc, #120]	; (80070c4 <parsePreset+0xadc>)
 800704c:	62d3      	str	r3, [r2, #44]	; 0x2c
	uint8_t totalEffects = 4; //currently doesn't pay attention to skipped effects out of order
 800704e:	2304      	movs	r3, #4
 8007050:	4f1d      	ldr	r7, [pc, #116]	; (80070c8 <parsePreset+0xae0>)
 8007052:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80070d0 <parsePreset+0xae8>
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	f107 0810 	add.w	r8, r7, #16
 800705c:	f8df a074 	ldr.w	sl, [pc, #116]	; 80070d4 <parsePreset+0xaec>
 8007060:	4663      	mov	r3, ip
				  effectSetters[i].setParam2 = &blankFunction;;
 8007062:	481a      	ldr	r0, [pc, #104]	; (80070cc <parsePreset+0xae4>)
				  effectTick[i] = FXVZhighshelfTick;
 8007064:	9604      	str	r6, [sp, #16]
		FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[0] * (NUM_EFFECT_TYPES-1));
 8007066:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800706a:	edda 7a00 	vldr	s15, [sl]
 800706e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007072:	fef8 7a67 	vrinta.f32	s15, s15
 8007076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707a:	edcd 7a00 	vstr	s15, [sp]
		switch (effectType)
 800707e:	f89d 6000 	ldrb.w	r6, [sp]
 8007082:	2e13      	cmp	r6, #19
 8007084:	d831      	bhi.n	80070ea <parsePreset+0xb02>
 8007086:	e8df f016 	tbh	[pc, r6, lsl #1]
 800708a:	0400      	.short	0x0400
 800708c:	03e803f4 	.word	0x03e803f4
 8007090:	03e203e5 	.word	0x03e203e5
 8007094:	03c903d6 	.word	0x03c903d6
 8007098:	03b503bd 	.word	0x03b503bd
 800709c:	032d033a 	.word	0x032d033a
 80070a0:	03190323 	.word	0x03190323
 80070a4:	0305030f 	.word	0x0305030f
 80070a8:	02ef02fa 	.word	0x02ef02fa
 80070ac:	02d902e4 	.word	0x02d902e4
 80070b0:	0027      	.short	0x0027
 80070b2:	bf00      	nop
 80070b4:	20005238 	.word	0x20005238
 80070b8:	08002b5d 	.word	0x08002b5d
 80070bc:	08002bdd 	.word	0x08002bdd
 80070c0:	08002c9d 	.word	0x08002c9d
 80070c4:	08002c55 	.word	0x08002c55
 80070c8:	20004f9c 	.word	0x20004f9c
 80070cc:	08005751 	.word	0x08005751
 80070d0:	2001308c 	.word	0x2001308c
 80070d4:	200162b8 	.word	0x200162b8
				  effectTick[i] = &FXLadderLowpassTick;
 80070d8:	4e7c      	ldr	r6, [pc, #496]	; (80072cc <parsePreset+0xce4>)
 80070da:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &FXLadderParam1;;
 80070dc:	4e7c      	ldr	r6, [pc, #496]	; (80072d0 <parsePreset+0xce8>)
				  effectSetters[i].setParam5 = &blankFunction;;
 80070de:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam2 = &blankFunction;;
 80070e0:	e9c3 6000 	strd	r6, r0, [r3]
				  effectSetters[i].setParam3 = &FXLadderParam3;;
 80070e4:	4e7b      	ldr	r6, [pc, #492]	; (80072d4 <parsePreset+0xcec>)
				  effectSetters[i].setParam4 = &blankFunction;;
 80070e6:	e9c3 6002 	strd	r6, r0, [r3, #8]
	for (int i = 0; i < NUM_EFFECT; i++)
 80070ea:	3704      	adds	r7, #4
 80070ec:	f10a 0ae0 	add.w	sl, sl, #224	; 0xe0
 80070f0:	3314      	adds	r3, #20
 80070f2:	4547      	cmp	r7, r8
 80070f4:	d1b7      	bne.n	8007066 <parsePreset+0xa7e>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 80070f6:	4878      	ldr	r0, [pc, #480]	; (80072d8 <parsePreset+0xcf0>)
	for (int i = 0; i < NUM_PARAMS; i++)
 80070f8:	f04f 0a00 	mov.w	sl, #0
	params[Effect1Mix].setParam = &fxMixSet;
 80070fc:	4b77      	ldr	r3, [pc, #476]	; (80072dc <parsePreset+0xcf4>)
			params[i].objectNumber = 1;
 80070fe:	f04f 0801 	mov.w	r8, #1
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 8007102:	f8c5 02d0 	str.w	r0, [r5, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
 8007106:	f8c5 043c 	str.w	r0, [r5, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
 800710a:	f8c5 05a8 	str.w	r0, [r5, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 800710e:	4874      	ldr	r0, [pc, #464]	; (80072e0 <parsePreset+0xcf8>)
	params[Effect1PostGain].setParam = &fxPostGainSet;
 8007110:	4f74      	ldr	r7, [pc, #464]	; (80072e4 <parsePreset+0xcfc>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 8007112:	f8c5 035c 	str.w	r0, [r5, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
 8007116:	f8c5 04c8 	str.w	r0, [r5, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
 800711a:	f8c5 0634 	str.w	r0, [r5, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 800711e:	f8dc 0000 	ldr.w	r0, [ip]
	params[Effect1Mix].setParam = &fxMixSet;
 8007122:	f8c5 37a0 	str.w	r3, [r5, #1952]	; 0x7a0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 8007126:	f8c5 0714 	str.w	r0, [r5, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 800712a:	f8dc 0004 	ldr.w	r0, [ip, #4]
	params[Effect1PostGain].setParam = &fxPostGainSet;
 800712e:	f8c5 77bc 	str.w	r7, [r5, #1980]	; 0x7bc
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 8007132:	f8c5 0730 	str.w	r0, [r5, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 8007136:	f8dc 0008 	ldr.w	r0, [ip, #8]
	params[Effect1Mix].setParam = &fxMixSet;
 800713a:	9e04      	ldr	r6, [sp, #16]
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 800713c:	f8c5 074c 	str.w	r0, [r5, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
 8007140:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8007144:	f8c5 0768 	str.w	r0, [r5, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
 8007148:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800714c:	f8c5 0784 	str.w	r0, [r5, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
 8007150:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8007154:	f8c5 07f4 	str.w	r0, [r5, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
 8007158:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800715c:	f8c5 0810 	str.w	r0, [r5, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
 8007160:	f8dc 001c 	ldr.w	r0, [ip, #28]
 8007164:	f8c5 082c 	str.w	r0, [r5, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
 8007168:	485f      	ldr	r0, [pc, #380]	; (80072e8 <parsePreset+0xd00>)
 800716a:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
 800716e:	485f      	ldr	r0, [pc, #380]	; (80072ec <parsePreset+0xd04>)
 8007170:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
 8007174:	485e      	ldr	r0, [pc, #376]	; (80072f0 <parsePreset+0xd08>)
 8007176:	f8c5 0244 	str.w	r0, [r5, #580]	; 0x244
	params[Master].setParam = &setMaster;
 800717a:	485e      	ldr	r0, [pc, #376]	; (80072f4 <parsePreset+0xd0c>)
 800717c:	64e8      	str	r0, [r5, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
 800717e:	485e      	ldr	r0, [pc, #376]	; (80072f8 <parsePreset+0xd10>)
 8007180:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
 8007184:	485d      	ldr	r0, [pc, #372]	; (80072fc <parsePreset+0xd14>)
 8007186:	f8c5 01f0 	str.w	r0, [r5, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
 800718a:	485d      	ldr	r0, [pc, #372]	; (8007300 <parsePreset+0xd18>)
 800718c:	f8cb 00d0 	str.w	r0, [fp, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 8007190:	f8dc 0020 	ldr.w	r0, [ip, #32]
	params[Effect2Mix].setParam = &fxMixSet;
 8007194:	f8c5 3880 	str.w	r3, [r5, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
 8007198:	f8c5 3960 	str.w	r3, [r5, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
 800719c:	f8c5 3a40 	str.w	r3, [r5, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 80071a0:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 80071a4:	f8c5 0848 	str.w	r0, [r5, #2120]	; 0x848
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 80071a8:	f8c5 3864 	str.w	r3, [r5, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 80071ac:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
	params[Effect2PostGain].setParam = &fxPostGainSet;
 80071b0:	f8c5 789c 	str.w	r7, [r5, #2204]	; 0x89c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 80071b4:	f8c5 38d4 	str.w	r3, [r5, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 80071b8:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
	params[Effect3PostGain].setParam = &fxPostGainSet;
 80071bc:	f8c5 797c 	str.w	r7, [r5, #2428]	; 0x97c
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 80071c0:	f8c5 38f0 	str.w	r3, [r5, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 80071c4:	f8dc 3030 	ldr.w	r3, [ip, #48]	; 0x30
	params[Effect4PostGain].setParam = &fxPostGainSet;
 80071c8:	f8c5 7a5c 	str.w	r7, [r5, #2652]	; 0xa5c
		params[i].objectNumber = 0;
 80071cc:	4657      	mov	r7, sl
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 80071ce:	f8c5 390c 	str.w	r3, [r5, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
 80071d2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 80071d6:	484b      	ldr	r0, [pc, #300]	; (8007304 <parsePreset+0xd1c>)
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
 80071d8:	f8c5 3928 	str.w	r3, [r5, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
 80071dc:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 80071e0:	f8c5 3944 	str.w	r3, [r5, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
 80071e4:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
 80071e8:	f8c5 39b4 	str.w	r3, [r5, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
 80071ec:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80071f0:	f8c5 39d0 	str.w	r3, [r5, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
 80071f4:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
 80071f8:	f8c5 39ec 	str.w	r3, [r5, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
 80071fc:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
 8007200:	f8c5 3a08 	str.w	r3, [r5, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
 8007204:	f8dc 304c 	ldr.w	r3, [ip, #76]	; 0x4c
 8007208:	f8c5 3a24 	str.w	r3, [r5, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
 800720c:	680b      	ldr	r3, [r1, #0]
 800720e:	f8c5 3ae8 	str.w	r3, [r5, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 8007212:	684b      	ldr	r3, [r1, #4]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 8007214:	f8c5 0be4 	str.w	r0, [r5, #3044]	; 0xbe4
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 8007218:	f8c5 3acc 	str.w	r3, [r5, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 800721c:	688b      	ldr	r3, [r1, #8]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
 800721e:	f8c5 0c8c 	str.w	r0, [r5, #3212]	; 0xc8c
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 8007222:	f8c5 3b90 	str.w	r3, [r5, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 8007226:	68cb      	ldr	r3, [r1, #12]
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
 8007228:	f8c5 0d34 	str.w	r0, [r5, #3380]	; 0xd34
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 800722c:	f8c5 3b74 	str.w	r3, [r5, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 8007230:	4b35      	ldr	r3, [pc, #212]	; (8007308 <parsePreset+0xd20>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
 8007232:	f8c5 0ddc 	str.w	r0, [r5, #3548]	; 0xddc
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 8007236:	f8c5 3c00 	str.w	r3, [r5, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
 800723a:	f8c5 3ca8 	str.w	r3, [r5, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
 800723e:	f8c5 3d50 	str.w	r3, [r5, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
 8007242:	f8c5 3df8 	str.w	r3, [r5, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
 8007246:	4b31      	ldr	r3, [pc, #196]	; (800730c <parsePreset+0xd24>)
 8007248:	f8c5 3c1c 	str.w	r3, [r5, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
 800724c:	f8c5 3cc4 	str.w	r3, [r5, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
 8007250:	f8c5 3d6c 	str.w	r3, [r5, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
 8007254:	f8c5 3e14 	str.w	r3, [r5, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
 8007258:	4b2d      	ldr	r3, [pc, #180]	; (8007310 <parsePreset+0xd28>)
 800725a:	f8c5 3c38 	str.w	r3, [r5, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
 800725e:	f8c5 3ce0 	str.w	r3, [r5, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
 8007262:	f8c5 3d88 	str.w	r3, [r5, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
 8007266:	f8c5 3e30 	str.w	r3, [r5, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
 800726a:	4b2a      	ldr	r3, [pc, #168]	; (8007314 <parsePreset+0xd2c>)
 800726c:	f8c5 3c54 	str.w	r3, [r5, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
 8007270:	f8c5 3cfc 	str.w	r3, [r5, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
 8007274:	f8c5 3da4 	str.w	r3, [r5, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
 8007278:	f8c5 3e4c 	str.w	r3, [r5, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
 800727c:	6813      	ldr	r3, [r2, #0]
 800727e:	f8c5 3e84 	str.w	r3, [r5, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
 8007282:	68d3      	ldr	r3, [r2, #12]
 8007284:	f8c5 3f10 	str.w	r3, [r5, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
 8007288:	6993      	ldr	r3, [r2, #24]
 800728a:	f8c5 3f9c 	str.w	r3, [r5, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
 800728e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007290:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
 8007294:	6853      	ldr	r3, [r2, #4]
 8007296:	f8c5 3ea0 	str.w	r3, [r5, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
 800729a:	6913      	ldr	r3, [r2, #16]
 800729c:	f8c5 3f2c 	str.w	r3, [r5, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
 80072a0:	69d3      	ldr	r3, [r2, #28]
 80072a2:	f8c5 3fb8 	str.w	r3, [r5, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
 80072a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80072a8:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
 80072ac:	6893      	ldr	r3, [r2, #8]
 80072ae:	f8c5 3ebc 	str.w	r3, [r5, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
 80072b2:	6953      	ldr	r3, [r2, #20]
 80072b4:	f8c5 3f48 	str.w	r3, [r5, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
 80072b8:	6a13      	ldr	r3, [r2, #32]
 80072ba:	f8c5 3fd4 	str.w	r3, [r5, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
 80072be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80072c0:	f8cb 3060 	str.w	r3, [fp, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
 80072c4:	4b14      	ldr	r3, [pc, #80]	; (8007318 <parsePreset+0xd30>)
 80072c6:	f8cb 30b4 	str.w	r3, [fp, #180]	; 0xb4
 80072ca:	e02b      	b.n	8007324 <parsePreset+0xd3c>
 80072cc:	08003599 	.word	0x08003599
 80072d0:	0800380d 	.word	0x0800380d
 80072d4:	080039c9 	.word	0x080039c9
 80072d8:	08001fed 	.word	0x08001fed
 80072dc:	0800306d 	.word	0x0800306d
 80072e0:	08002045 	.word	0x08002045
 80072e4:	08003081 	.word	0x08003081
 80072e8:	080039dd 	.word	0x080039dd
 80072ec:	08003a59 	.word	0x08003a59
 80072f0:	08003a29 	.word	0x08003a29
 80072f4:	080023d1 	.word	0x080023d1
 80072f8:	080023e1 	.word	0x080023e1
 80072fc:	080023ed 	.word	0x080023ed
 8007300:	08002405 	.word	0x08002405
 8007304:	08002319 	.word	0x08002319
 8007308:	08002339 	.word	0x08002339
 800730c:	08002359 	.word	0x08002359
 8007310:	0800236d 	.word	0x0800236d
 8007314:	0800238d 	.word	0x0800238d
 8007318:	080023c1 	.word	0x080023c1
 800731c:	42fe0000 	.word	0x42fe0000
 8007320:	3c010204 	.word	0x3c010204
		if ((i >= Osc1) && (i < Osc2))
 8007324:	f1aa 0318 	sub.w	r3, sl, #24
		params[i].objectNumber = 0;
 8007328:	f889 7018 	strb.w	r7, [r9, #24]
		if ((i >= Osc1) && (i < Osc2))
 800732c:	2b0c      	cmp	r3, #12
 800732e:	f240 8183 	bls.w	8007638 <parsePreset+0x1050>
		else if ((i >= Osc2) && (i < Osc3))
 8007332:	f1aa 0325 	sub.w	r3, sl, #37	; 0x25
 8007336:	2b72      	cmp	r3, #114	; 0x72
 8007338:	f200 817e 	bhi.w	8007638 <parsePreset+0x1050>
 800733c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007340:	00730073 	.word	0x00730073
 8007344:	00730073 	.word	0x00730073
 8007348:	00730073 	.word	0x00730073
 800734c:	00730073 	.word	0x00730073
 8007350:	00730073 	.word	0x00730073
 8007354:	00730073 	.word	0x00730073
 8007358:	01740073 	.word	0x01740073
 800735c:	01740174 	.word	0x01740174
 8007360:	01740174 	.word	0x01740174
 8007364:	01740174 	.word	0x01740174
 8007368:	01740174 	.word	0x01740174
 800736c:	01740174 	.word	0x01740174
 8007370:	01740174 	.word	0x01740174
 8007374:	017c017c 	.word	0x017c017c
 8007378:	017c017c 	.word	0x017c017c
 800737c:	017c017c 	.word	0x017c017c
 8007380:	017c017c 	.word	0x017c017c
 8007384:	00730073 	.word	0x00730073
 8007388:	00730073 	.word	0x00730073
 800738c:	00730073 	.word	0x00730073
 8007390:	00730073 	.word	0x00730073
 8007394:	01740174 	.word	0x01740174
 8007398:	01740174 	.word	0x01740174
 800739c:	01740174 	.word	0x01740174
 80073a0:	01740174 	.word	0x01740174
 80073a4:	01780178 	.word	0x01780178
 80073a8:	01780178 	.word	0x01780178
 80073ac:	01780178 	.word	0x01780178
 80073b0:	01780178 	.word	0x01780178
 80073b4:	017c017c 	.word	0x017c017c
 80073b8:	017c017c 	.word	0x017c017c
 80073bc:	017c017c 	.word	0x017c017c
 80073c0:	00730073 	.word	0x00730073
 80073c4:	00730073 	.word	0x00730073
 80073c8:	00730073 	.word	0x00730073
 80073cc:	017c0073 	.word	0x017c0073
 80073d0:	017c017c 	.word	0x017c017c
 80073d4:	017c017c 	.word	0x017c017c
 80073d8:	0073017c 	.word	0x0073017c
 80073dc:	00730073 	.word	0x00730073
 80073e0:	00730073 	.word	0x00730073
 80073e4:	01740073 	.word	0x01740073
 80073e8:	01740174 	.word	0x01740174
 80073ec:	01740174 	.word	0x01740174
 80073f0:	01780174 	.word	0x01780174
 80073f4:	01780178 	.word	0x01780178
 80073f8:	01780178 	.word	0x01780178
 80073fc:	017c0178 	.word	0x017c0178
 8007400:	017c017c 	.word	0x017c017c
 8007404:	017c017c 	.word	0x017c017c
 8007408:	00730073 	.word	0x00730073
 800740c:	00730073 	.word	0x00730073
 8007410:	01740073 	.word	0x01740073
 8007414:	01740174 	.word	0x01740174
 8007418:	01740174 	.word	0x01740174
 800741c:	01780178 	.word	0x01780178
 8007420:	01780178 	.word	0x01780178
 8007424:	0178      	.short	0x0178
			params[i].objectNumber = 1;
 8007426:	2001      	movs	r0, #1
 8007428:	f889 8018 	strb.w	r8, [r9, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 800742c:	ed99 0a02 	vldr	s0, [r9, #8]
 8007430:	2100      	movs	r1, #0
 8007432:	f8d9 3014 	ldr.w	r3, [r9, #20]
	for (int i = 0; i < NUM_PARAMS; i++)
 8007436:	f10a 0a01 	add.w	sl, sl, #1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 800743a:	4798      	blx	r3
 800743c:	ed99 0a03 	vldr	s0, [r9, #12]
 8007440:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007444:	2101      	movs	r1, #1
 8007446:	f899 0018 	ldrb.w	r0, [r9, #24]
	for (int i = 0; i < NUM_PARAMS; i++)
 800744a:	f109 091c 	add.w	r9, r9, #28
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 800744e:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
 8007450:	f1ba 0f9b 	cmp.w	sl, #155	; 0x9b
 8007454:	f47f af66 	bne.w	8007324 <parsePreset+0xd3c>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 8007458:	edd5 7a09 	vldr	s15, [r5, #36]	; 0x24
	numMappings = 0;
 800745c:	2200      	movs	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 800745e:	ed95 7a02 	vldr	s14, [r5, #8]
		mappings[i].destNumber = 255;
 8007462:	21ff      	movs	r1, #255	; 0xff
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
 8007464:	ed5f 6a53 	vldr	s13, [pc, #-332]	; 800731c <parsePreset+0xd34>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 8007468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800746c:	ed1f 6a54 	vldr	s12, [pc, #-336]	; 8007320 <parsePreset+0xd38>
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
 8007470:	ee67 7aa6 	vmul.f32	s15, s15, s13
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 8007474:	4ba8      	ldr	r3, [pc, #672]	; (8007718 <parsePreset+0x1130>)
 8007476:	f8df e374 	ldr.w	lr, [pc, #884]	; 80077ec <parsePreset+0x1204>
 800747a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800747e:	f50e 6018 	add.w	r0, lr, #2432	; 0x980
 8007482:	edc3 6a00 	vstr	s13, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
 8007486:	4ba5      	ldr	r3, [pc, #660]	; (800771c <parsePreset+0x1134>)
 8007488:	edc3 7a00 	vstr	s15, [r3]
	numMappings = 0;
 800748c:	4ba4      	ldr	r3, [pc, #656]	; (8007720 <parsePreset+0x1138>)
 800748e:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
 8007490:	4ba4      	ldr	r3, [pc, #656]	; (8007724 <parsePreset+0x113c>)
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	4673      	mov	r3, lr
		mappings[i].destNumber = 255;
 8007496:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8007498:	334c      	adds	r3, #76	; 0x4c
		mappings[i].numHooks = 0;
 800749a:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 800749e:	4283      	cmp	r3, r0
 80074a0:	d1f9      	bne.n	8007496 <parsePreset+0xeae>
	for (int i = 0; i < mappingCount; i++)
 80074a2:	9b03      	ldr	r3, [sp, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8090 	beq.w	80075ca <parsePreset+0xfe2>
 80074aa:	9b02      	ldr	r3, [sp, #8]
 80074ac:	f04f 0b00 	mov.w	fp, #0
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 80074b0:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8007728 <parsePreset+0x1140>
			mappings[whichMapping].destNumber = destNumber;
 80074b4:	f04f 084c 	mov.w	r8, #76	; 0x4c
 80074b8:	4433      	add	r3, r6
 80074ba:	f8df 9334 	ldr.w	r9, [pc, #820]	; 80077f0 <parsePreset+0x1208>
 80074be:	b29b      	uxth	r3, r3
 80074c0:	9300      	str	r3, [sp, #0]
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 80074c2:	2300      	movs	r3, #0
		uint8_t destNumber = buffer[bufferIndex+1];
 80074c4:	19a2      	adds	r2, r4, r6
		uint8_t foundOne = 0;
 80074c6:	461f      	mov	r7, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 80074c8:	7850      	ldrb	r0, [r2, #1]
		uint8_t whichHook = 0;
 80074ca:	469a      	mov	sl, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 80074cc:	4672      	mov	r2, lr
		uint8_t whichMapping = 0;
 80074ce:	469c      	mov	ip, r3
			if (mappings[j].destNumber == destNumber)
 80074d0:	7811      	ldrb	r1, [r2, #0]
 80074d2:	4281      	cmp	r1, r0
 80074d4:	d104      	bne.n	80074e0 <parsePreset+0xef8>
				whichHook = mappings[j].numHooks;
 80074d6:	f892 a048 	ldrb.w	sl, [r2, #72]	; 0x48
 80074da:	fa5f fc83 	uxtb.w	ip, r3
				foundOne = 1;
 80074de:	2701      	movs	r7, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 80074e0:	3301      	adds	r3, #1
 80074e2:	324c      	adds	r2, #76	; 0x4c
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d1f3      	bne.n	80074d0 <parsePreset+0xee8>
		if (foundOne == 0)
 80074e8:	2f00      	cmp	r7, #0
 80074ea:	f000 8405 	beq.w	8007cf8 <parsePreset+0x1710>
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 80074ee:	4657      	mov	r7, sl
		int source = buffer[bufferIndex];
 80074f0:	5da2      	ldrb	r2, [r4, r6]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 80074f2:	fb08 f30c 	mul.w	r3, r8, ip
 80074f6:	1c79      	adds	r1, r7, #1
 80074f8:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
 80074fc:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 80074fe:	eb09 0ac2 	add.w	sl, r9, r2, lsl #3
 8007502:	4470      	add	r0, lr
 8007504:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007508:	f10a 0a04 	add.w	sl, sl, #4
 800750c:	4473      	add	r3, lr
 800750e:	f8c0 a00c 	str.w	sl, [r0, #12]
 8007512:	eb09 00c2 	add.w	r0, r9, r2, lsl #3
 8007516:	443b      	add	r3, r7
 8007518:	f84e 0001 	str.w	r0, [lr, r1]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
 800751c:	bfd4      	ite	le
 800751e:	2100      	movle	r1, #0
 8007520:	2101      	movgt	r1, #1
 8007522:	f883 1020 	strb.w	r1, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8007526:	f1a2 0318 	sub.w	r3, r2, #24
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 800752a:	00f9      	lsls	r1, r7, #3
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 800752c:	2b03      	cmp	r3, #3
 800752e:	d805      	bhi.n	800753c <parsePreset+0xf54>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
 8007530:	4b7c      	ldr	r3, [pc, #496]	; (8007724 <parsePreset+0x113c>)
 8007532:	441a      	add	r2, r3
 8007534:	f04f 0301 	mov.w	r3, #1
 8007538:	f802 3c18 	strb.w	r3, [r2, #-24]
		int scalar = buffer[bufferIndex+2];
 800753c:	19a3      	adds	r3, r4, r6
 800753e:	789b      	ldrb	r3, [r3, #2]
			if (scalar == 0xff)
 8007540:	2bff      	cmp	r3, #255	; 0xff
 8007542:	f000 8451 	beq.w	8007de8 <parsePreset+0x1800>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8007546:	1d38      	adds	r0, r7, #4
 8007548:	fb08 f20c 	mul.w	r2, r8, ip
 800754c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007550:	eb09 00c3 	add.w	r0, r9, r3, lsl #3
 8007554:	4472      	add	r2, lr
 8007556:	6050      	str	r0, [r2, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8007558:	f1a3 0218 	sub.w	r2, r3, #24
 800755c:	2a03      	cmp	r2, #3
 800755e:	f200 844e 	bhi.w	8007dfe <parsePreset+0x1816>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 8007562:	4a70      	ldr	r2, [pc, #448]	; (8007724 <parsePreset+0x113c>)
 8007564:	f04f 0001 	mov.w	r0, #1
 8007568:	441a      	add	r2, r3
 800756a:	f802 0c18 	strb.w	r0, [r2, #-24]
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 800756e:	2208      	movs	r2, #8
 8007570:	2004      	movs	r0, #4
 8007572:	fb12 0303 	smlabb	r3, r2, r3, r0
 8007576:	444b      	add	r3, r9
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 8007578:	19a2      	adds	r2, r4, r6
		bufferIndex += 5;
 800757a:	3605      	adds	r6, #5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 800757c:	78d0      	ldrb	r0, [r2, #3]
		bufferIndex += 5;
 800757e:	b2b6      	uxth	r6, r6
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 8007580:	7912      	ldrb	r2, [r2, #4]
 8007582:	eb02 2200 	add.w	r2, r2, r0, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8007586:	b212      	sxth	r2, r2
 8007588:	ee07 2a90 	vmov	s15, r2
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 800758c:	fb08 f20c 	mul.w	r2, r8, ip
 8007590:	4411      	add	r1, r2
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8007592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		mappings[whichMapping].numHooks++;
 8007596:	4472      	add	r2, lr
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8007598:	4471      	add	r1, lr
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 800759a:	ee67 7a87 	vmul.f32	s15, s15, s14
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 800759e:	628b      	str	r3, [r1, #40]	; 0x28
		mappings[whichMapping].amount[whichHook] = amountFloat;
 80075a0:	eb0c 03cc 	add.w	r3, ip, ip, lsl #3
 80075a4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80075a8:	443b      	add	r3, r7
 80075aa:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 80075ae:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
 80075b2:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80075b6:	3301      	adds	r3, #1
 80075b8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	for (int i = 0; i < mappingCount; i++)
 80075bc:	9b00      	ldr	r3, [sp, #0]
 80075be:	42b3      	cmp	r3, r6
 80075c0:	f47f af7f 	bne.w	80074c2 <parsePreset+0xeda>
 80075c4:	4b56      	ldr	r3, [pc, #344]	; (8007720 <parsePreset+0x1138>)
 80075c6:	f883 b000 	strb.w	fp, [r3]
	if (params[Filter1].zeroToOneVal[0])
 80075ca:	4b58      	ldr	r3, [pc, #352]	; (800772c <parsePreset+0x1144>)
	audioMasterLevel = 1.0f;
 80075cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80075d0:	4957      	ldr	r1, [pc, #348]	; (8007730 <parsePreset+0x1148>)
	presetWaitingToParse = 0;
 80075d2:	2000      	movs	r0, #0
	if (params[Filter1].zeroToOneVal[0])
 80075d4:	ed93 7a00 	vldr	s14, [r3]
 80075d8:	33a8      	adds	r3, #168	; 0xa8
	audioMasterLevel = 1.0f;
 80075da:	600a      	str	r2, [r1, #0]
	presetWaitingToParse = 0;
 80075dc:	4955      	ldr	r1, [pc, #340]	; (8007734 <parsePreset+0x114c>)
	if (params[Filter1].zeroToOneVal[0])
 80075de:	eeb5 7a40 	vcmp.f32	s14, #0.0
	if (params[Filter2].zeroToOneVal[0])
 80075e2:	edd3 7a00 	vldr	s15, [r3]
	presetWaitingToParse = 0;
 80075e6:	6008      	str	r0, [r1, #0]
	currentActivePreset = presetNumber;
 80075e8:	9805      	ldr	r0, [sp, #20]
	if (params[Filter1].zeroToOneVal[0])
 80075ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	currentActivePreset = presetNumber;
 80075ee:	4952      	ldr	r1, [pc, #328]	; (8007738 <parsePreset+0x1150>)
	if (params[Filter2].zeroToOneVal[0])
 80075f0:	eef5 7a40 	vcmp.f32	s15, #0.0
	oscToTick = NUM_OSC;
 80075f4:	4a51      	ldr	r2, [pc, #324]	; (800773c <parsePreset+0x1154>)
	currentActivePreset = presetNumber;
 80075f6:	7008      	strb	r0, [r1, #0]
	oscToTick = NUM_OSC;
 80075f8:	f04f 0103 	mov.w	r1, #3
	uint8_t totalFilters = 0;
 80075fc:	bf14      	ite	ne
 80075fe:	2301      	movne	r3, #1
 8007600:	2300      	moveq	r3, #0
	oscToTick = NUM_OSC;
 8007602:	7011      	strb	r1, [r2, #0]
	overSampled = 1;
 8007604:	2201      	movs	r2, #1
 8007606:	494e      	ldr	r1, [pc, #312]	; (8007740 <parsePreset+0x1158>)
	if (params[Filter2].zeroToOneVal[0])
 8007608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	numEffectToTick = totalEffects;
 800760c:	9801      	ldr	r0, [sp, #4]
	overSampled = 1;
 800760e:	700a      	strb	r2, [r1, #0]
	numEffectToTick = totalEffects;
 8007610:	494c      	ldr	r1, [pc, #304]	; (8007744 <parsePreset+0x115c>)
		totalFilters++;
 8007612:	bf18      	it	ne
 8007614:	3301      	addne	r3, #1
	numEffectToTick = totalEffects;
 8007616:	7008      	strb	r0, [r1, #0]
	filterToTick = totalFilters;
 8007618:	494b      	ldr	r1, [pc, #300]	; (8007748 <parsePreset+0x1160>)
 800761a:	700b      	strb	r3, [r1, #0]
 800761c:	b662      	cpsie	i
	presetReady = 1;
 800761e:	4b4b      	ldr	r3, [pc, #300]	; (800774c <parsePreset+0x1164>)
 8007620:	601a      	str	r2, [r3, #0]
}
 8007622:	b007      	add	sp, #28
 8007624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			params[i].objectNumber = 2;
 8007628:	2002      	movs	r0, #2
 800762a:	f889 0018 	strb.w	r0, [r9, #24]
 800762e:	e6fd      	b.n	800742c <parsePreset+0xe44>
			params[i].objectNumber = 3;
 8007630:	2003      	movs	r0, #3
 8007632:	f889 0018 	strb.w	r0, [r9, #24]
 8007636:	e6f9      	b.n	800742c <parsePreset+0xe44>
		if ((i >= Osc1) && (i < Osc2))
 8007638:	2000      	movs	r0, #0
 800763a:	e6f7      	b.n	800742c <parsePreset+0xe44>
				  effectTick[i] = FXVZbandrejectTick;
 800763c:	4e44      	ldr	r6, [pc, #272]	; (8007750 <parsePreset+0x1168>)
 800763e:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 8007640:	4e44      	ldr	r6, [pc, #272]	; (8007754 <parsePreset+0x116c>)
				  effectSetters[i].setParam5 = &blankFunction;;
 8007642:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 8007644:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &FXNotchParam2;;
 8007646:	4e44      	ldr	r6, [pc, #272]	; (8007758 <parsePreset+0x1170>)
 8007648:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &FXNotchParam3;;
 800764a:	4e44      	ldr	r6, [pc, #272]	; (800775c <parsePreset+0x1174>)
				  effectSetters[i].setParam4 = &blankFunction;;
 800764c:	e9c3 6002 	strd	r6, r0, [r3, #8]
				  break;
 8007650:	e54b      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = FXVZhighshelfTick;
 8007652:	4e43      	ldr	r6, [pc, #268]	; (8007760 <parsePreset+0x1178>)
 8007654:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8007656:	4e43      	ldr	r6, [pc, #268]	; (8007764 <parsePreset+0x117c>)
 8007658:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 800765a:	4e43      	ldr	r6, [pc, #268]	; (8007768 <parsePreset+0x1180>)
 800765c:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 800765e:	4e43      	ldr	r6, [pc, #268]	; (800776c <parsePreset+0x1184>)
				  effectSetters[i].setParam5 = &blankFunction;;
 8007660:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8007664:	609e      	str	r6, [r3, #8]
				  break;
 8007666:	e540      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &FXVZlowshelfTick;
 8007668:	4e41      	ldr	r6, [pc, #260]	; (8007770 <parsePreset+0x1188>)
 800766a:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &FXLowShelfParam1;
 800766c:	4e41      	ldr	r6, [pc, #260]	; (8007774 <parsePreset+0x118c>)
 800766e:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &FXLowShelfParam2;
 8007670:	4e41      	ldr	r6, [pc, #260]	; (8007778 <parsePreset+0x1190>)
 8007672:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8007674:	4e41      	ldr	r6, [pc, #260]	; (800777c <parsePreset+0x1194>)
				  effectSetters[i].setParam5 = &blankFunction;
 8007676:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 800767a:	609e      	str	r6, [r3, #8]
				  break;
 800767c:	e535      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &FXVZpeakTick;
 800767e:	4e40      	ldr	r6, [pc, #256]	; (8007780 <parsePreset+0x1198>)
 8007680:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &FXPeakParam1;
 8007682:	4e40      	ldr	r6, [pc, #256]	; (8007784 <parsePreset+0x119c>)
 8007684:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &FXPeakParam2;
 8007686:	4e40      	ldr	r6, [pc, #256]	; (8007788 <parsePreset+0x11a0>)
 8007688:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 800768a:	4e40      	ldr	r6, [pc, #256]	; (800778c <parsePreset+0x11a4>)
				  effectSetters[i].setParam5 = &blankFunction;
 800768c:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 8007690:	609e      	str	r6, [r3, #8]
				  break;
 8007692:	e52a      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &FXdiodeLowpassTick;
 8007694:	4e3e      	ldr	r6, [pc, #248]	; (8007790 <parsePreset+0x11a8>)
				  effectSetters[i].setParam2 = &blankFunction;
 8007696:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXdiodeLowpassTick;
 8007698:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &FXDiodeParam1;
 800769a:	4e3e      	ldr	r6, [pc, #248]	; (8007794 <parsePreset+0x11ac>)
 800769c:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 800769e:	4e3e      	ldr	r6, [pc, #248]	; (8007798 <parsePreset+0x11b0>)
				  effectSetters[i].setParam5 = &blankFunction;
 80076a0:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 80076a4:	609e      	str	r6, [r3, #8]
				  break;
 80076a6:	e520      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &FXbandpassTick;
 80076a8:	4e3c      	ldr	r6, [pc, #240]	; (800779c <parsePreset+0x11b4>)
				  effectSetters[i].setParam2 = &blankFunction;
 80076aa:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXbandpassTick;
 80076ac:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &FXBandpassParam1;
 80076ae:	4e3c      	ldr	r6, [pc, #240]	; (80077a0 <parsePreset+0x11b8>)
 80076b0:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 80076b2:	4e3c      	ldr	r6, [pc, #240]	; (80077a4 <parsePreset+0x11bc>)
				  effectSetters[i].setParam5 = &blankFunction;
 80076b4:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 80076b8:	609e      	str	r6, [r3, #8]
				  break;
 80076ba:	e516      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &FXhighpassTick;
 80076bc:	4e3a      	ldr	r6, [pc, #232]	; (80077a8 <parsePreset+0x11c0>)
				  effectSetters[i].setParam2 = &blankFunction;
 80076be:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXhighpassTick;
 80076c0:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &FXHighpassParam1;
 80076c2:	4e3a      	ldr	r6, [pc, #232]	; (80077ac <parsePreset+0x11c4>)
 80076c4:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 80076c6:	4e3a      	ldr	r6, [pc, #232]	; (80077b0 <parsePreset+0x11c8>)
				  effectSetters[i].setParam5 = &blankFunction;
 80076c8:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 80076cc:	609e      	str	r6, [r3, #8]
				  break;
 80076ce:	e50c      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &FXlowpassTick;
 80076d0:	4e38      	ldr	r6, [pc, #224]	; (80077b4 <parsePreset+0x11cc>)
				  effectSetters[i].setParam2 = &blankFunction;
 80076d2:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXlowpassTick;
 80076d4:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &FXLowpassParam1;
 80076d6:	4e38      	ldr	r6, [pc, #224]	; (80077b8 <parsePreset+0x11d0>)
 80076d8:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 80076da:	4e38      	ldr	r6, [pc, #224]	; (80077bc <parsePreset+0x11d4>)
				  effectSetters[i].setParam5 = &blankFunction;;
 80076dc:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 80076e0:	609e      	str	r6, [r3, #8]
				  break;
 80076e2:	e502      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &wavefolderTick;
 80076e4:	4e36      	ldr	r6, [pc, #216]	; (80077c0 <parsePreset+0x11d8>)
 80076e6:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &wavefolderParam1;
 80076e8:	4e36      	ldr	r6, [pc, #216]	; (80077c4 <parsePreset+0x11dc>)
 80076ea:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 80076ec:	4e36      	ldr	r6, [pc, #216]	; (80077c8 <parsePreset+0x11e0>)
 80076ee:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &wavefolderParam3;
 80076f0:	4e36      	ldr	r6, [pc, #216]	; (80077cc <parsePreset+0x11e4>)
 80076f2:	609e      	str	r6, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 80076f4:	4e36      	ldr	r6, [pc, #216]	; (80077d0 <parsePreset+0x11e8>)
 80076f6:	60de      	str	r6, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 80076f8:	4e36      	ldr	r6, [pc, #216]	; (80077d4 <parsePreset+0x11ec>)
 80076fa:	611e      	str	r6, [r3, #16]
				  break;
 80076fc:	e4f5      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &tiltFilterTick;
 80076fe:	4e36      	ldr	r6, [pc, #216]	; (80077d8 <parsePreset+0x11f0>)
 8007700:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &tiltParam1;
 8007702:	4e36      	ldr	r6, [pc, #216]	; (80077dc <parsePreset+0x11f4>)
 8007704:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &tiltParam2;
 8007706:	4e36      	ldr	r6, [pc, #216]	; (80077e0 <parsePreset+0x11f8>)
 8007708:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &tiltParam3;
 800770a:	4e36      	ldr	r6, [pc, #216]	; (80077e4 <parsePreset+0x11fc>)
 800770c:	609e      	str	r6, [r3, #8]
				  effectSetters[i].setParam4 = &tiltParam4;
 800770e:	4e36      	ldr	r6, [pc, #216]	; (80077e8 <parsePreset+0x1200>)
 8007710:	60de      	str	r6, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 8007712:	4e30      	ldr	r6, [pc, #192]	; (80077d4 <parsePreset+0x11ec>)
 8007714:	611e      	str	r6, [r3, #16]
				  break;
 8007716:	e4e8      	b.n	80070ea <parsePreset+0xb02>
 8007718:	20015bbc 	.word	0x20015bbc
 800771c:	20015bc0 	.word	0x20015bc0
 8007720:	20015bc8 	.word	0x20015bc8
 8007724:	200051d4 	.word	0x200051d4
 8007728:	37fffffc 	.word	0x37fffffc
 800772c:	20016630 	.word	0x20016630
 8007730:	200006dc 	.word	0x200006dc
 8007734:	20016cd4 	.word	0x20016cd4
 8007738:	2001304c 	.word	0x2001304c
 800773c:	20000028 	.word	0x20000028
 8007740:	20000029 	.word	0x20000029
 8007744:	20000010 	.word	0x20000010
 8007748:	20000004 	.word	0x20000004
 800774c:	20005574 	.word	0x20005574
 8007750:	08003585 	.word	0x08003585
 8007754:	080037c1 	.word	0x080037c1
 8007758:	080038f5 	.word	0x080038f5
 800775c:	080039b5 	.word	0x080039b5
 8007760:	08003571 	.word	0x08003571
 8007764:	08003775 	.word	0x08003775
 8007768:	080038c1 	.word	0x080038c1
 800776c:	080039a1 	.word	0x080039a1
 8007770:	0800355d 	.word	0x0800355d
 8007774:	08003729 	.word	0x08003729
 8007778:	0800388d 	.word	0x0800388d
 800777c:	0800398d 	.word	0x0800398d
 8007780:	08003549 	.word	0x08003549
 8007784:	080036dd 	.word	0x080036dd
 8007788:	08003859 	.word	0x08003859
 800778c:	08003979 	.word	0x08003979
 8007790:	08003535 	.word	0x08003535
 8007794:	08003691 	.word	0x08003691
 8007798:	08003965 	.word	0x08003965
 800779c:	08003521 	.word	0x08003521
 80077a0:	08003645 	.word	0x08003645
 80077a4:	08003951 	.word	0x08003951
 80077a8:	0800350d 	.word	0x0800350d
 80077ac:	080035f9 	.word	0x080035f9
 80077b0:	0800393d 	.word	0x0800393d
 80077b4:	080034f9 	.word	0x080034f9
 80077b8:	080035ad 	.word	0x080035ad
 80077bc:	08003929 	.word	0x08003929
 80077c0:	080030b1 	.word	0x080030b1
 80077c4:	08002cd9 	.word	0x08002cd9
 80077c8:	08002f01 	.word	0x08002f01
 80077cc:	08002d01 	.word	0x08002d01
 80077d0:	08003019 	.word	0x08003019
 80077d4:	0800302d 	.word	0x0800302d
 80077d8:	080032b9 	.word	0x080032b9
 80077dc:	08002d31 	.word	0x08002d31
 80077e0:	08002d81 	.word	0x08002d81
 80077e4:	08002dcd 	.word	0x08002dcd
 80077e8:	08002df1 	.word	0x08002df1
 80077ec:	2001523c 	.word	0x2001523c
 80077f0:	20012dac 	.word	0x20012dac
				  effectTick[i] = &bcTick;
 80077f4:	4e83      	ldr	r6, [pc, #524]	; (8007a04 <parsePreset+0x141c>)
 80077f6:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 80077f8:	4e83      	ldr	r6, [pc, #524]	; (8007a08 <parsePreset+0x1420>)
 80077fa:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &param2Linear;
 80077fc:	4e83      	ldr	r6, [pc, #524]	; (8007a0c <parsePreset+0x1424>)
 80077fe:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &param3BC;
 8007800:	4e83      	ldr	r6, [pc, #524]	; (8007a10 <parsePreset+0x1428>)
 8007802:	e776      	b.n	80076f2 <parsePreset+0x110a>
				  effectTick[i] = &chorusTick;
 8007804:	4e83      	ldr	r6, [pc, #524]	; (8007a14 <parsePreset+0x142c>)
				  effectSetters[i].setParam5 = &blankFunction;
 8007806:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &chorusTick;
 8007808:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &chorusParam1;
 800780a:	4e83      	ldr	r6, [pc, #524]	; (8007a18 <parsePreset+0x1430>)
 800780c:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &chorusParam2;
 800780e:	4e83      	ldr	r6, [pc, #524]	; (8007a1c <parsePreset+0x1434>)
 8007810:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &chorusParam3;
 8007812:	4e83      	ldr	r6, [pc, #524]	; (8007a20 <parsePreset+0x1438>)
 8007814:	609e      	str	r6, [r3, #8]
				  effectSetters[i].setParam4 = &chorusParam4;
 8007816:	4e83      	ldr	r6, [pc, #524]	; (8007a24 <parsePreset+0x143c>)
 8007818:	60de      	str	r6, [r3, #12]
				  break;
 800781a:	e466      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &compressorTick;
 800781c:	4e82      	ldr	r6, [pc, #520]	; (8007a28 <parsePreset+0x1440>)
 800781e:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &compressorParam1;
 8007820:	4e82      	ldr	r6, [pc, #520]	; (8007a2c <parsePreset+0x1444>)
 8007822:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &compressorParam2;
 8007824:	4e82      	ldr	r6, [pc, #520]	; (8007a30 <parsePreset+0x1448>)
 8007826:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &compressorParam3;
 8007828:	4e82      	ldr	r6, [pc, #520]	; (8007a34 <parsePreset+0x144c>)
 800782a:	609e      	str	r6, [r3, #8]
				  effectSetters[i].setParam4 = &compressorParam4;
 800782c:	4e82      	ldr	r6, [pc, #520]	; (8007a38 <parsePreset+0x1450>)
 800782e:	60de      	str	r6, [r3, #12]
				  effectSetters[i].setParam5 = &compressorParam5;
 8007830:	4e82      	ldr	r6, [pc, #520]	; (8007a3c <parsePreset+0x1454>)
 8007832:	611e      	str	r6, [r3, #16]
				  break;
 8007834:	e459      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &shaperTick;
 8007836:	4e82      	ldr	r6, [pc, #520]	; (8007a40 <parsePreset+0x1458>)
				  effectSetters[i].setParam5 = &blankFunction;
 8007838:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &tanhTick;
 800783a:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 800783c:	4e72      	ldr	r6, [pc, #456]	; (8007a08 <parsePreset+0x1420>)
 800783e:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 8007840:	4e80      	ldr	r6, [pc, #512]	; (8007a44 <parsePreset+0x145c>)
 8007842:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &param3Linear;
 8007844:	4e80      	ldr	r6, [pc, #512]	; (8007a48 <parsePreset+0x1460>)
 8007846:	609e      	str	r6, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8007848:	4e80      	ldr	r6, [pc, #512]	; (8007a4c <parsePreset+0x1464>)
 800784a:	60de      	str	r6, [r3, #12]
				  break;
 800784c:	e44d      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &tanhTick;
 800784e:	4e80      	ldr	r6, [pc, #512]	; (8007a50 <parsePreset+0x1468>)
				  effectSetters[i].setParam5 = &blankFunction;
 8007850:	6118      	str	r0, [r3, #16]
 8007852:	e7f2      	b.n	800783a <parsePreset+0x1252>
				  effectTick[i] = &satTick;
 8007854:	4e7f      	ldr	r6, [pc, #508]	; (8007a54 <parsePreset+0x146c>)
				  effectSetters[i].setParam5 = &blankFunction;
 8007856:	6118      	str	r0, [r3, #16]
 8007858:	e7ef      	b.n	800783a <parsePreset+0x1252>
				  effectTick[i] = &hardClipTick;
 800785a:	4e7f      	ldr	r6, [pc, #508]	; (8007a58 <parsePreset+0x1470>)
				  effectSetters[i].setParam5 = &blankFunction;
 800785c:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &hardClipTick;
 800785e:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8007860:	4e69      	ldr	r6, [pc, #420]	; (8007a08 <parsePreset+0x1420>)
 8007862:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 8007864:	4e77      	ldr	r6, [pc, #476]	; (8007a44 <parsePreset+0x145c>)
 8007866:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &param3Hard;
 8007868:	4e7c      	ldr	r6, [pc, #496]	; (8007a5c <parsePreset+0x1474>)
 800786a:	609e      	str	r6, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 800786c:	4e77      	ldr	r6, [pc, #476]	; (8007a4c <parsePreset+0x1464>)
 800786e:	60de      	str	r6, [r3, #12]
				  break;
 8007870:	e43b      	b.n	80070ea <parsePreset+0xb02>
				  effectTick[i] = &softClipTick;
 8007872:	4e7b      	ldr	r6, [pc, #492]	; (8007a60 <parsePreset+0x1478>)
				  effectSetters[i].setParam5 = &blankFunction;
 8007874:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &softClipTick;
 8007876:	603e      	str	r6, [r7, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8007878:	4e63      	ldr	r6, [pc, #396]	; (8007a08 <parsePreset+0x1420>)
 800787a:	601e      	str	r6, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 800787c:	4e71      	ldr	r6, [pc, #452]	; (8007a44 <parsePreset+0x145c>)
 800787e:	605e      	str	r6, [r3, #4]
				  effectSetters[i].setParam3 = &param3Soft;
 8007880:	4e78      	ldr	r6, [pc, #480]	; (8007a64 <parsePreset+0x147c>)
 8007882:	609e      	str	r6, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8007884:	4e71      	ldr	r6, [pc, #452]	; (8007a4c <parsePreset+0x1464>)
 8007886:	60de      	str	r6, [r3, #12]
				  break;
 8007888:	e42f      	b.n	80070ea <parsePreset+0xb02>
				  totalEffects--;
 800788a:	9e01      	ldr	r6, [sp, #4]
				  effectSetters[i].setParam3 = &blankFunction;
 800788c:	6098      	str	r0, [r3, #8]
				  totalEffects--;
 800788e:	3e01      	subs	r6, #1
 8007890:	b2f6      	uxtb	r6, r6
 8007892:	9601      	str	r6, [sp, #4]
				  effectTick[i] = &blankTick;
 8007894:	4e74      	ldr	r6, [pc, #464]	; (8007a68 <parsePreset+0x1480>)
				  effectSetters[i].setParam2 = &blankFunction;
 8007896:	e9c3 0000 	strd	r0, r0, [r3]
				  effectSetters[i].setParam5 = &blankFunction;
 800789a:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectTick[i] = &blankTick;
 800789e:	603e      	str	r6, [r7, #0]
				  break;
 80078a0:	e423      	b.n	80070ea <parsePreset+0xb02>
				lfoShapeTick[i] = &lfoSawTick;
 80078a2:	4b72      	ldr	r3, [pc, #456]	; (8007a6c <parsePreset+0x1484>)
 80078a4:	4872      	ldr	r0, [pc, #456]	; (8007a70 <parsePreset+0x1488>)
 80078a6:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSetRate;
 80078a8:	4b72      	ldr	r3, [pc, #456]	; (8007a74 <parsePreset+0x148c>)
 80078aa:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSetShape;
 80078ac:	4b72      	ldr	r3, [pc, #456]	; (8007a78 <parsePreset+0x1490>)
 80078ae:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 80078b0:	4b72      	ldr	r3, [pc, #456]	; (8007a7c <parsePreset+0x1494>)
 80078b2:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 80078b4:	f7ff bbcb 	b.w	800704e <parsePreset+0xa66>
				lfoShapeTick[i] = &lfoTriTick;
 80078b8:	4b6c      	ldr	r3, [pc, #432]	; (8007a6c <parsePreset+0x1484>)
 80078ba:	4871      	ldr	r0, [pc, #452]	; (8007a80 <parsePreset+0x1498>)
 80078bc:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoTriSetRate;
 80078be:	4b71      	ldr	r3, [pc, #452]	; (8007a84 <parsePreset+0x149c>)
 80078c0:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoTriSetShape;
 80078c2:	4b71      	ldr	r3, [pc, #452]	; (8007a88 <parsePreset+0x14a0>)
 80078c4:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 80078c6:	4b71      	ldr	r3, [pc, #452]	; (8007a8c <parsePreset+0x14a4>)
 80078c8:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 80078ca:	f7ff bbc0 	b.w	800704e <parsePreset+0xa66>
				lfoShapeTick[i] = &lfoSineTick;
 80078ce:	4b67      	ldr	r3, [pc, #412]	; (8007a6c <parsePreset+0x1484>)
 80078d0:	486f      	ldr	r0, [pc, #444]	; (8007a90 <parsePreset+0x14a8>)
 80078d2:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineSetRate;
 80078d4:	4b6f      	ldr	r3, [pc, #444]	; (8007a94 <parsePreset+0x14ac>)
 80078d6:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineSetShape;
 80078d8:	4b6f      	ldr	r3, [pc, #444]	; (8007a98 <parsePreset+0x14b0>)
 80078da:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 80078dc:	4b6f      	ldr	r3, [pc, #444]	; (8007a9c <parsePreset+0x14b4>)
 80078de:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 80078e0:	f7ff bbb5 	b.w	800704e <parsePreset+0xa66>
				lfoShapeTick[i] = &lfoSawTick;
 80078e4:	4b61      	ldr	r3, [pc, #388]	; (8007a6c <parsePreset+0x1484>)
 80078e6:	4862      	ldr	r0, [pc, #392]	; (8007a70 <parsePreset+0x1488>)
 80078e8:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSetRate;
 80078ea:	4b62      	ldr	r3, [pc, #392]	; (8007a74 <parsePreset+0x148c>)
 80078ec:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSetShape;
 80078ee:	4b62      	ldr	r3, [pc, #392]	; (8007a78 <parsePreset+0x1490>)
 80078f0:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 80078f2:	4b62      	ldr	r3, [pc, #392]	; (8007a7c <parsePreset+0x1494>)
 80078f4:	6213      	str	r3, [r2, #32]
				break;
 80078f6:	f7ff bb58 	b.w	8006faa <parsePreset+0x9c2>
				lfoShapeTick[i] = &lfoSawSquareTick;
 80078fa:	4b5c      	ldr	r3, [pc, #368]	; (8007a6c <parsePreset+0x1484>)
 80078fc:	4868      	ldr	r0, [pc, #416]	; (8007aa0 <parsePreset+0x14b8>)
 80078fe:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8007900:	4b68      	ldr	r3, [pc, #416]	; (8007aa4 <parsePreset+0x14bc>)
 8007902:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8007904:	4b68      	ldr	r3, [pc, #416]	; (8007aa8 <parsePreset+0x14c0>)
 8007906:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8007908:	4b68      	ldr	r3, [pc, #416]	; (8007aac <parsePreset+0x14c4>)
 800790a:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 800790c:	f7ff bb9f 	b.w	800704e <parsePreset+0xa66>
				lfoShapeTick[i] = &lfoSineTriTick;
 8007910:	4b56      	ldr	r3, [pc, #344]	; (8007a6c <parsePreset+0x1484>)
 8007912:	4867      	ldr	r0, [pc, #412]	; (8007ab0 <parsePreset+0x14c8>)
 8007914:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007916:	4b67      	ldr	r3, [pc, #412]	; (8007ab4 <parsePreset+0x14cc>)
 8007918:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 800791a:	4b67      	ldr	r3, [pc, #412]	; (8007ab8 <parsePreset+0x14d0>)
 800791c:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 800791e:	4b67      	ldr	r3, [pc, #412]	; (8007abc <parsePreset+0x14d4>)
 8007920:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8007922:	f7ff bb94 	b.w	800704e <parsePreset+0xa66>
				lfoShapeTick[i] = &lfoTriTick;
 8007926:	4b51      	ldr	r3, [pc, #324]	; (8007a6c <parsePreset+0x1484>)
 8007928:	4855      	ldr	r0, [pc, #340]	; (8007a80 <parsePreset+0x1498>)
 800792a:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoTriSetRate;
 800792c:	4b55      	ldr	r3, [pc, #340]	; (8007a84 <parsePreset+0x149c>)
 800792e:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8007930:	4b55      	ldr	r3, [pc, #340]	; (8007a88 <parsePreset+0x14a0>)
 8007932:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8007934:	4b55      	ldr	r3, [pc, #340]	; (8007a8c <parsePreset+0x14a4>)
 8007936:	6213      	str	r3, [r2, #32]
				break;
 8007938:	f7ff bb37 	b.w	8006faa <parsePreset+0x9c2>
				lfoShapeTick[i] = &lfoSineTick;
 800793c:	4b4b      	ldr	r3, [pc, #300]	; (8007a6c <parsePreset+0x1484>)
 800793e:	4854      	ldr	r0, [pc, #336]	; (8007a90 <parsePreset+0x14a8>)
 8007940:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8007942:	4b54      	ldr	r3, [pc, #336]	; (8007a94 <parsePreset+0x14ac>)
 8007944:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineSetShape;
 8007946:	4b54      	ldr	r3, [pc, #336]	; (8007a98 <parsePreset+0x14b0>)
 8007948:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 800794a:	4b54      	ldr	r3, [pc, #336]	; (8007a9c <parsePreset+0x14b4>)
 800794c:	6213      	str	r3, [r2, #32]
				break;
 800794e:	f7ff bb2c 	b.w	8006faa <parsePreset+0x9c2>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8007952:	4b46      	ldr	r3, [pc, #280]	; (8007a6c <parsePreset+0x1484>)
 8007954:	4852      	ldr	r0, [pc, #328]	; (8007aa0 <parsePreset+0x14b8>)
 8007956:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8007958:	4b52      	ldr	r3, [pc, #328]	; (8007aa4 <parsePreset+0x14bc>)
 800795a:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 800795c:	4b52      	ldr	r3, [pc, #328]	; (8007aa8 <parsePreset+0x14c0>)
 800795e:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8007960:	4b52      	ldr	r3, [pc, #328]	; (8007aac <parsePreset+0x14c4>)
 8007962:	6213      	str	r3, [r2, #32]
				break;
 8007964:	f7ff bb21 	b.w	8006faa <parsePreset+0x9c2>
				lfoShapeTick[i] = &lfoSawTick;
 8007968:	4b40      	ldr	r3, [pc, #256]	; (8007a6c <parsePreset+0x1484>)
 800796a:	4841      	ldr	r0, [pc, #260]	; (8007a70 <parsePreset+0x1488>)
 800796c:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSetRate;
 800796e:	4b41      	ldr	r3, [pc, #260]	; (8007a74 <parsePreset+0x148c>)
 8007970:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8007972:	4b41      	ldr	r3, [pc, #260]	; (8007a78 <parsePreset+0x1490>)
 8007974:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8007976:	4b41      	ldr	r3, [pc, #260]	; (8007a7c <parsePreset+0x1494>)
 8007978:	6153      	str	r3, [r2, #20]
				break;
 800797a:	f7ff baf6 	b.w	8006f6a <parsePreset+0x982>
				lfoShapeTick[i] = &lfoSineTriTick;
 800797e:	4b3b      	ldr	r3, [pc, #236]	; (8007a6c <parsePreset+0x1484>)
 8007980:	484b      	ldr	r0, [pc, #300]	; (8007ab0 <parsePreset+0x14c8>)
 8007982:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007984:	4b4b      	ldr	r3, [pc, #300]	; (8007ab4 <parsePreset+0x14cc>)
 8007986:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8007988:	4b4b      	ldr	r3, [pc, #300]	; (8007ab8 <parsePreset+0x14d0>)
 800798a:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 800798c:	4b4b      	ldr	r3, [pc, #300]	; (8007abc <parsePreset+0x14d4>)
 800798e:	6213      	str	r3, [r2, #32]
				break;
 8007990:	f7ff bb0b 	b.w	8006faa <parsePreset+0x9c2>
				lfoShapeTick[i] = &lfoTriTick;
 8007994:	4b35      	ldr	r3, [pc, #212]	; (8007a6c <parsePreset+0x1484>)
 8007996:	483a      	ldr	r0, [pc, #232]	; (8007a80 <parsePreset+0x1498>)
 8007998:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoTriSetRate;
 800799a:	4b3a      	ldr	r3, [pc, #232]	; (8007a84 <parsePreset+0x149c>)
 800799c:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoTriSetShape;
 800799e:	4b3a      	ldr	r3, [pc, #232]	; (8007a88 <parsePreset+0x14a0>)
 80079a0:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 80079a2:	4b3a      	ldr	r3, [pc, #232]	; (8007a8c <parsePreset+0x14a4>)
 80079a4:	6153      	str	r3, [r2, #20]
				break;
 80079a6:	f7ff bae0 	b.w	8006f6a <parsePreset+0x982>
				lfoShapeTick[i] = &lfoSineTick;
 80079aa:	4b30      	ldr	r3, [pc, #192]	; (8007a6c <parsePreset+0x1484>)
 80079ac:	4838      	ldr	r0, [pc, #224]	; (8007a90 <parsePreset+0x14a8>)
 80079ae:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineSetRate;
 80079b0:	4b38      	ldr	r3, [pc, #224]	; (8007a94 <parsePreset+0x14ac>)
 80079b2:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineSetShape;
 80079b4:	4b38      	ldr	r3, [pc, #224]	; (8007a98 <parsePreset+0x14b0>)
 80079b6:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 80079b8:	4b38      	ldr	r3, [pc, #224]	; (8007a9c <parsePreset+0x14b4>)
 80079ba:	6153      	str	r3, [r2, #20]
				break;
 80079bc:	f7ff bad5 	b.w	8006f6a <parsePreset+0x982>
				lfoShapeTick[i] = &lfoSawSquareTick;
 80079c0:	4b2a      	ldr	r3, [pc, #168]	; (8007a6c <parsePreset+0x1484>)
 80079c2:	4837      	ldr	r0, [pc, #220]	; (8007aa0 <parsePreset+0x14b8>)
 80079c4:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80079c6:	4b37      	ldr	r3, [pc, #220]	; (8007aa4 <parsePreset+0x14bc>)
 80079c8:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 80079ca:	4b37      	ldr	r3, [pc, #220]	; (8007aa8 <parsePreset+0x14c0>)
 80079cc:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 80079ce:	4b37      	ldr	r3, [pc, #220]	; (8007aac <parsePreset+0x14c4>)
 80079d0:	6153      	str	r3, [r2, #20]
				break;
 80079d2:	f7ff baca 	b.w	8006f6a <parsePreset+0x982>
				lfoShapeTick[i] = &lfoSineTriTick;
 80079d6:	4b25      	ldr	r3, [pc, #148]	; (8007a6c <parsePreset+0x1484>)
 80079d8:	4835      	ldr	r0, [pc, #212]	; (8007ab0 <parsePreset+0x14c8>)
 80079da:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 80079dc:	4b35      	ldr	r3, [pc, #212]	; (8007ab4 <parsePreset+0x14cc>)
 80079de:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 80079e0:	4b35      	ldr	r3, [pc, #212]	; (8007ab8 <parsePreset+0x14d0>)
 80079e2:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 80079e4:	4b35      	ldr	r3, [pc, #212]	; (8007abc <parsePreset+0x14d4>)
 80079e6:	6153      	str	r3, [r2, #20]
				break;
 80079e8:	f7ff babf 	b.w	8006f6a <parsePreset+0x982>
				lfoShapeTick[i] = &lfoSawTick;
 80079ec:	4b1f      	ldr	r3, [pc, #124]	; (8007a6c <parsePreset+0x1484>)
 80079ee:	4820      	ldr	r0, [pc, #128]	; (8007a70 <parsePreset+0x1488>)
				lfoSetters[i].setRate = &lfoSawSetRate;
 80079f0:	4a33      	ldr	r2, [pc, #204]	; (8007ac0 <parsePreset+0x14d8>)
				lfoShapeTick[i] = &lfoSawTick;
 80079f2:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSetRate;
 80079f4:	4b1f      	ldr	r3, [pc, #124]	; (8007a74 <parsePreset+0x148c>)
 80079f6:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSetShape;
 80079f8:	4b1f      	ldr	r3, [pc, #124]	; (8007a78 <parsePreset+0x1490>)
 80079fa:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 80079fc:	4b1f      	ldr	r3, [pc, #124]	; (8007a7c <parsePreset+0x1494>)
 80079fe:	6093      	str	r3, [r2, #8]
				break;
 8007a00:	f7ff ba93 	b.w	8006f2a <parsePreset+0x942>
 8007a04:	080034c1 	.word	0x080034c1
 8007a08:	08002cb1 	.word	0x08002cb1
 8007a0c:	08002f21 	.word	0x08002f21
 8007a10:	08003041 	.word	0x08003041
 8007a14:	08003259 	.word	0x08003259
 8007a18:	080031bd 	.word	0x080031bd
 8007a1c:	080031e1 	.word	0x080031e1
 8007a20:	08003201 	.word	0x08003201
 8007a24:	0800322d 	.word	0x0800322d
 8007a28:	080034e5 	.word	0x080034e5
 8007a2c:	08002e25 	.word	0x08002e25
 8007a30:	08002e41 	.word	0x08002e41
 8007a34:	08002e75 	.word	0x08002e75
 8007a38:	08002e91 	.word	0x08002e91
 8007a3c:	08002ec9 	.word	0x08002ec9
 8007a40:	08003265 	.word	0x08003265
 8007a44:	08002f01 	.word	0x08002f01
 8007a48:	08002f35 	.word	0x08002f35
 8007a4c:	08003019 	.word	0x08003019
 8007a50:	080032ed 	.word	0x080032ed
 8007a54:	0800344d 	.word	0x0800344d
 8007a58:	080033c9 	.word	0x080033c9
 8007a5c:	08002fa1 	.word	0x08002fa1
 8007a60:	08003345 	.word	0x08003345
 8007a64:	08002f49 	.word	0x08002f49
 8007a68:	080032b5 	.word	0x080032b5
 8007a6c:	20005238 	.word	0x20005238
 8007a70:	08002b35 	.word	0x08002b35
 8007a74:	08002bc9 	.word	0x08002bc9
 8007a78:	08002c99 	.word	0x08002c99
 8007a7c:	08002c41 	.word	0x08002c41
 8007a80:	08002b19 	.word	0x08002b19
 8007a84:	08002bb5 	.word	0x08002bb5
 8007a88:	08002c95 	.word	0x08002c95
 8007a8c:	08002c2d 	.word	0x08002c2d
 8007a90:	08002afd 	.word	0x08002afd
 8007a94:	08002ba1 	.word	0x08002ba1
 8007a98:	08002c91 	.word	0x08002c91
 8007a9c:	08002c19 	.word	0x08002c19
 8007aa0:	08002ac5 	.word	0x08002ac5
 8007aa4:	08002b79 	.word	0x08002b79
 8007aa8:	08002c69 	.word	0x08002c69
 8007aac:	08002bf1 	.word	0x08002bf1
 8007ab0:	08002ae1 	.word	0x08002ae1
 8007ab4:	08002b8d 	.word	0x08002b8d
 8007ab8:	08002c7d 	.word	0x08002c7d
 8007abc:	08002c05 	.word	0x08002c05
 8007ac0:	20015208 	.word	0x20015208
				lfoShapeTick[i] = &lfoTriTick;
 8007ac4:	4b95      	ldr	r3, [pc, #596]	; (8007d1c <parsePreset+0x1734>)
 8007ac6:	4896      	ldr	r0, [pc, #600]	; (8007d20 <parsePreset+0x1738>)
				lfoSetters[i].setRate = &lfoTriSetRate;
 8007ac8:	4a96      	ldr	r2, [pc, #600]	; (8007d24 <parsePreset+0x173c>)
				lfoShapeTick[i] = &lfoTriTick;
 8007aca:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8007acc:	4b96      	ldr	r3, [pc, #600]	; (8007d28 <parsePreset+0x1740>)
 8007ace:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8007ad0:	4b96      	ldr	r3, [pc, #600]	; (8007d2c <parsePreset+0x1744>)
 8007ad2:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8007ad4:	4b96      	ldr	r3, [pc, #600]	; (8007d30 <parsePreset+0x1748>)
 8007ad6:	6093      	str	r3, [r2, #8]
				break;
 8007ad8:	f7ff ba27 	b.w	8006f2a <parsePreset+0x942>
				lfoShapeTick[i] = &lfoSineTick;
 8007adc:	4b8f      	ldr	r3, [pc, #572]	; (8007d1c <parsePreset+0x1734>)
 8007ade:	4895      	ldr	r0, [pc, #596]	; (8007d34 <parsePreset+0x174c>)
				lfoSetters[i].setRate = &lfoSineSetRate;
 8007ae0:	4a90      	ldr	r2, [pc, #576]	; (8007d24 <parsePreset+0x173c>)
				lfoShapeTick[i] = &lfoSineTick;
 8007ae2:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8007ae4:	4b94      	ldr	r3, [pc, #592]	; (8007d38 <parsePreset+0x1750>)
 8007ae6:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineSetShape;
 8007ae8:	4b94      	ldr	r3, [pc, #592]	; (8007d3c <parsePreset+0x1754>)
 8007aea:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8007aec:	4b94      	ldr	r3, [pc, #592]	; (8007d40 <parsePreset+0x1758>)
 8007aee:	6093      	str	r3, [r2, #8]
				break;
 8007af0:	f7ff ba1b 	b.w	8006f2a <parsePreset+0x942>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8007af4:	4b89      	ldr	r3, [pc, #548]	; (8007d1c <parsePreset+0x1734>)
 8007af6:	4893      	ldr	r0, [pc, #588]	; (8007d44 <parsePreset+0x175c>)
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8007af8:	4a8a      	ldr	r2, [pc, #552]	; (8007d24 <parsePreset+0x173c>)
				lfoShapeTick[i] = &lfoSawSquareTick;
 8007afa:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8007afc:	4b92      	ldr	r3, [pc, #584]	; (8007d48 <parsePreset+0x1760>)
 8007afe:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8007b00:	4b92      	ldr	r3, [pc, #584]	; (8007d4c <parsePreset+0x1764>)
 8007b02:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8007b04:	4b92      	ldr	r3, [pc, #584]	; (8007d50 <parsePreset+0x1768>)
 8007b06:	6093      	str	r3, [r2, #8]
				break;
 8007b08:	f7ff ba0f 	b.w	8006f2a <parsePreset+0x942>
				lfoShapeTick[i] = &lfoSineTriTick;
 8007b0c:	4b83      	ldr	r3, [pc, #524]	; (8007d1c <parsePreset+0x1734>)
 8007b0e:	4891      	ldr	r0, [pc, #580]	; (8007d54 <parsePreset+0x176c>)
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007b10:	4a84      	ldr	r2, [pc, #528]	; (8007d24 <parsePreset+0x173c>)
				lfoShapeTick[i] = &lfoSineTriTick;
 8007b12:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007b14:	4b90      	ldr	r3, [pc, #576]	; (8007d58 <parsePreset+0x1770>)
 8007b16:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8007b18:	4b90      	ldr	r3, [pc, #576]	; (8007d5c <parsePreset+0x1774>)
 8007b1a:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8007b1c:	4b90      	ldr	r3, [pc, #576]	; (8007d60 <parsePreset+0x1778>)
 8007b1e:	6093      	str	r3, [r2, #8]
				break;
 8007b20:	f7ff ba03 	b.w	8006f2a <parsePreset+0x942>
				  filterTick[i] = &LadderLowpassTick;
 8007b24:	4b8f      	ldr	r3, [pc, #572]	; (8007d64 <parsePreset+0x177c>)
 8007b26:	4a90      	ldr	r2, [pc, #576]	; (8007d68 <parsePreset+0x1780>)
 8007b28:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8007b2a:	4b90      	ldr	r3, [pc, #576]	; (8007d6c <parsePreset+0x1784>)
 8007b2c:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8007b2e:	4b90      	ldr	r3, [pc, #576]	; (8007d70 <parsePreset+0x1788>)
 8007b30:	60cb      	str	r3, [r1, #12]
				  break;
 8007b32:	f7ff b9d8 	b.w	8006ee6 <parsePreset+0x8fe>
				  filterTick[i] = &VZbandrejectTick;
 8007b36:	4b8b      	ldr	r3, [pc, #556]	; (8007d64 <parsePreset+0x177c>)
 8007b38:	4a8e      	ldr	r2, [pc, #568]	; (8007d74 <parsePreset+0x178c>)
 8007b3a:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8007b3c:	4b8e      	ldr	r3, [pc, #568]	; (8007d78 <parsePreset+0x1790>)
 8007b3e:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8007b40:	4b8e      	ldr	r3, [pc, #568]	; (8007d7c <parsePreset+0x1794>)
 8007b42:	60cb      	str	r3, [r1, #12]
				  break;
 8007b44:	f7ff b9cf 	b.w	8006ee6 <parsePreset+0x8fe>
				  filterTick[i] = &VZhighshelfTick;
 8007b48:	4b86      	ldr	r3, [pc, #536]	; (8007d64 <parsePreset+0x177c>)
 8007b4a:	4a8d      	ldr	r2, [pc, #564]	; (8007d80 <parsePreset+0x1798>)
 8007b4c:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8007b4e:	4b8d      	ldr	r3, [pc, #564]	; (8007d84 <parsePreset+0x179c>)
 8007b50:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8007b52:	4b8d      	ldr	r3, [pc, #564]	; (8007d88 <parsePreset+0x17a0>)
 8007b54:	60cb      	str	r3, [r1, #12]
				  break;
 8007b56:	f7ff b9c6 	b.w	8006ee6 <parsePreset+0x8fe>
				  filterTick[i] = &VZlowshelfTick;
 8007b5a:	4b82      	ldr	r3, [pc, #520]	; (8007d64 <parsePreset+0x177c>)
 8007b5c:	4a8b      	ldr	r2, [pc, #556]	; (8007d8c <parsePreset+0x17a4>)
 8007b5e:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8007b60:	4b8b      	ldr	r3, [pc, #556]	; (8007d90 <parsePreset+0x17a8>)
 8007b62:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8007b64:	4b8b      	ldr	r3, [pc, #556]	; (8007d94 <parsePreset+0x17ac>)
 8007b66:	60cb      	str	r3, [r1, #12]
				  break;
 8007b68:	f7ff b9bd 	b.w	8006ee6 <parsePreset+0x8fe>
				  filterTick[i] = &VZpeakTick;
 8007b6c:	4b7d      	ldr	r3, [pc, #500]	; (8007d64 <parsePreset+0x177c>)
 8007b6e:	4a8a      	ldr	r2, [pc, #552]	; (8007d98 <parsePreset+0x17b0>)
 8007b70:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZpeakSetQ;
 8007b72:	4b8a      	ldr	r3, [pc, #552]	; (8007d9c <parsePreset+0x17b4>)
 8007b74:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8007b76:	4b8a      	ldr	r3, [pc, #552]	; (8007da0 <parsePreset+0x17b8>)
 8007b78:	60cb      	str	r3, [r1, #12]
				  break;
 8007b7a:	f7ff b9b4 	b.w	8006ee6 <parsePreset+0x8fe>
				  filterTick[i] = &diodeLowpassTick;
 8007b7e:	4b79      	ldr	r3, [pc, #484]	; (8007d64 <parsePreset+0x177c>)
 8007b80:	4a88      	ldr	r2, [pc, #544]	; (8007da4 <parsePreset+0x17bc>)
 8007b82:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8007b84:	4b88      	ldr	r3, [pc, #544]	; (8007da8 <parsePreset+0x17c0>)
 8007b86:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8007b88:	4b88      	ldr	r3, [pc, #544]	; (8007dac <parsePreset+0x17c4>)
 8007b8a:	60cb      	str	r3, [r1, #12]
				  break;
 8007b8c:	f7ff b9ab 	b.w	8006ee6 <parsePreset+0x8fe>
				  filterTick[i] = &bandpassTick;
 8007b90:	4b74      	ldr	r3, [pc, #464]	; (8007d64 <parsePreset+0x177c>)
 8007b92:	4a87      	ldr	r2, [pc, #540]	; (8007db0 <parsePreset+0x17c8>)
 8007b94:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &bandpassSetQ;
 8007b96:	4b87      	ldr	r3, [pc, #540]	; (8007db4 <parsePreset+0x17cc>)
 8007b98:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &bandpassSetGain;
 8007b9a:	4b87      	ldr	r3, [pc, #540]	; (8007db8 <parsePreset+0x17d0>)
 8007b9c:	60cb      	str	r3, [r1, #12]
				  break;
 8007b9e:	f7ff b9a2 	b.w	8006ee6 <parsePreset+0x8fe>
				  filterTick[i] = &highpassTick;
 8007ba2:	4b70      	ldr	r3, [pc, #448]	; (8007d64 <parsePreset+0x177c>)
 8007ba4:	4a85      	ldr	r2, [pc, #532]	; (8007dbc <parsePreset+0x17d4>)
 8007ba6:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &highpassSetQ;
 8007ba8:	4b85      	ldr	r3, [pc, #532]	; (8007dc0 <parsePreset+0x17d8>)
 8007baa:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &highpassSetGain;
 8007bac:	4b85      	ldr	r3, [pc, #532]	; (8007dc4 <parsePreset+0x17dc>)
 8007bae:	60cb      	str	r3, [r1, #12]
				  break;
 8007bb0:	f7ff b999 	b.w	8006ee6 <parsePreset+0x8fe>
				  filterTick[i] = &LadderLowpassTick;
 8007bb4:	4b6b      	ldr	r3, [pc, #428]	; (8007d64 <parsePreset+0x177c>)
 8007bb6:	4a6c      	ldr	r2, [pc, #432]	; (8007d68 <parsePreset+0x1780>)
 8007bb8:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8007bba:	4b6c      	ldr	r3, [pc, #432]	; (8007d6c <parsePreset+0x1784>)
 8007bbc:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8007bbe:	4b6c      	ldr	r3, [pc, #432]	; (8007d70 <parsePreset+0x1788>)
 8007bc0:	604b      	str	r3, [r1, #4]
				  break;
 8007bc2:	f7ff b96f 	b.w	8006ea4 <parsePreset+0x8bc>
				  filterTick[i] = &VZbandrejectTick;
 8007bc6:	4b67      	ldr	r3, [pc, #412]	; (8007d64 <parsePreset+0x177c>)
 8007bc8:	4a6a      	ldr	r2, [pc, #424]	; (8007d74 <parsePreset+0x178c>)
 8007bca:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8007bcc:	4b6a      	ldr	r3, [pc, #424]	; (8007d78 <parsePreset+0x1790>)
 8007bce:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8007bd0:	4b6a      	ldr	r3, [pc, #424]	; (8007d7c <parsePreset+0x1794>)
 8007bd2:	604b      	str	r3, [r1, #4]
				  break;
 8007bd4:	f7ff b966 	b.w	8006ea4 <parsePreset+0x8bc>
				  filterTick[i] = &VZhighshelfTick;
 8007bd8:	4b62      	ldr	r3, [pc, #392]	; (8007d64 <parsePreset+0x177c>)
 8007bda:	4a69      	ldr	r2, [pc, #420]	; (8007d80 <parsePreset+0x1798>)
 8007bdc:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8007bde:	4b69      	ldr	r3, [pc, #420]	; (8007d84 <parsePreset+0x179c>)
 8007be0:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8007be2:	4b69      	ldr	r3, [pc, #420]	; (8007d88 <parsePreset+0x17a0>)
 8007be4:	604b      	str	r3, [r1, #4]
				  break;
 8007be6:	f7ff b95d 	b.w	8006ea4 <parsePreset+0x8bc>
				  filterTick[i] = &VZlowshelfTick;
 8007bea:	4b5e      	ldr	r3, [pc, #376]	; (8007d64 <parsePreset+0x177c>)
 8007bec:	4a67      	ldr	r2, [pc, #412]	; (8007d8c <parsePreset+0x17a4>)
 8007bee:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8007bf0:	4b67      	ldr	r3, [pc, #412]	; (8007d90 <parsePreset+0x17a8>)
 8007bf2:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8007bf4:	4b67      	ldr	r3, [pc, #412]	; (8007d94 <parsePreset+0x17ac>)
 8007bf6:	604b      	str	r3, [r1, #4]
				  break;
 8007bf8:	f7ff b954 	b.w	8006ea4 <parsePreset+0x8bc>
				  filterTick[i] = &VZpeakTick;
 8007bfc:	4b59      	ldr	r3, [pc, #356]	; (8007d64 <parsePreset+0x177c>)
 8007bfe:	4a66      	ldr	r2, [pc, #408]	; (8007d98 <parsePreset+0x17b0>)
 8007c00:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZpeakSetQ;
 8007c02:	4b66      	ldr	r3, [pc, #408]	; (8007d9c <parsePreset+0x17b4>)
 8007c04:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8007c06:	4b66      	ldr	r3, [pc, #408]	; (8007da0 <parsePreset+0x17b8>)
 8007c08:	604b      	str	r3, [r1, #4]
				  break;
 8007c0a:	f7ff b94b 	b.w	8006ea4 <parsePreset+0x8bc>
				  filterTick[i] = &diodeLowpassTick;
 8007c0e:	4b55      	ldr	r3, [pc, #340]	; (8007d64 <parsePreset+0x177c>)
 8007c10:	4a64      	ldr	r2, [pc, #400]	; (8007da4 <parsePreset+0x17bc>)
 8007c12:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8007c14:	4b64      	ldr	r3, [pc, #400]	; (8007da8 <parsePreset+0x17c0>)
 8007c16:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8007c18:	4b64      	ldr	r3, [pc, #400]	; (8007dac <parsePreset+0x17c4>)
 8007c1a:	604b      	str	r3, [r1, #4]
				  break;
 8007c1c:	f7ff b942 	b.w	8006ea4 <parsePreset+0x8bc>
				  filterTick[i] = &bandpassTick;
 8007c20:	4b50      	ldr	r3, [pc, #320]	; (8007d64 <parsePreset+0x177c>)
 8007c22:	4a63      	ldr	r2, [pc, #396]	; (8007db0 <parsePreset+0x17c8>)
 8007c24:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &bandpassSetQ;
 8007c26:	4b63      	ldr	r3, [pc, #396]	; (8007db4 <parsePreset+0x17cc>)
 8007c28:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &bandpassSetGain;
 8007c2a:	4b63      	ldr	r3, [pc, #396]	; (8007db8 <parsePreset+0x17d0>)
 8007c2c:	604b      	str	r3, [r1, #4]
				  break;
 8007c2e:	f7ff b939 	b.w	8006ea4 <parsePreset+0x8bc>
				  filterTick[i] = &highpassTick;
 8007c32:	4b4c      	ldr	r3, [pc, #304]	; (8007d64 <parsePreset+0x177c>)
 8007c34:	4a61      	ldr	r2, [pc, #388]	; (8007dbc <parsePreset+0x17d4>)
 8007c36:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &highpassSetQ;
 8007c38:	4b61      	ldr	r3, [pc, #388]	; (8007dc0 <parsePreset+0x17d8>)
 8007c3a:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &highpassSetGain;
 8007c3c:	4b61      	ldr	r3, [pc, #388]	; (8007dc4 <parsePreset+0x17dc>)
 8007c3e:	604b      	str	r3, [r1, #4]
				  break;
 8007c40:	f7ff b930 	b.w	8006ea4 <parsePreset+0x8bc>
				  shapeTick[i] = &userTick;
 8007c44:	4a60      	ldr	r2, [pc, #384]	; (8007dc8 <parsePreset+0x17e0>)
 8007c46:	4961      	ldr	r1, [pc, #388]	; (8007dcc <parsePreset+0x17e4>)
 8007c48:	6091      	str	r1, [r2, #8]
				  break;
 8007c4a:	f7ff b8f7 	b.w	8006e3c <parsePreset+0x854>
				  shapeTick[i] = &triTick;
 8007c4e:	4a5e      	ldr	r2, [pc, #376]	; (8007dc8 <parsePreset+0x17e0>)
 8007c50:	495f      	ldr	r1, [pc, #380]	; (8007dd0 <parsePreset+0x17e8>)
 8007c52:	6091      	str	r1, [r2, #8]
				  break;
 8007c54:	f7ff b8f2 	b.w	8006e3c <parsePreset+0x854>
				  shapeTick[i] = &sineTick;
 8007c58:	4a5b      	ldr	r2, [pc, #364]	; (8007dc8 <parsePreset+0x17e0>)
 8007c5a:	495e      	ldr	r1, [pc, #376]	; (8007dd4 <parsePreset+0x17ec>)
 8007c5c:	6091      	str	r1, [r2, #8]
				  break;
 8007c5e:	f7ff b8ed 	b.w	8006e3c <parsePreset+0x854>
				  shapeTick[i] = &pulseTick;
 8007c62:	4a59      	ldr	r2, [pc, #356]	; (8007dc8 <parsePreset+0x17e0>)
 8007c64:	495c      	ldr	r1, [pc, #368]	; (8007dd8 <parsePreset+0x17f0>)
 8007c66:	6091      	str	r1, [r2, #8]
				  break;
 8007c68:	f7ff b8e8 	b.w	8006e3c <parsePreset+0x854>
				  shapeTick[i] = &sawTick;
 8007c6c:	4a56      	ldr	r2, [pc, #344]	; (8007dc8 <parsePreset+0x17e0>)
 8007c6e:	495b      	ldr	r1, [pc, #364]	; (8007ddc <parsePreset+0x17f4>)
 8007c70:	6091      	str	r1, [r2, #8]
				  break;
 8007c72:	f7ff b8e3 	b.w	8006e3c <parsePreset+0x854>
				  shapeTick[i] = &sineTriTick;
 8007c76:	4a54      	ldr	r2, [pc, #336]	; (8007dc8 <parsePreset+0x17e0>)
 8007c78:	4959      	ldr	r1, [pc, #356]	; (8007de0 <parsePreset+0x17f8>)
 8007c7a:	6091      	str	r1, [r2, #8]
				  break;
 8007c7c:	f7ff b8de 	b.w	8006e3c <parsePreset+0x854>
				  shapeTick[i] = &userTick;
 8007c80:	4a51      	ldr	r2, [pc, #324]	; (8007dc8 <parsePreset+0x17e0>)
 8007c82:	4952      	ldr	r1, [pc, #328]	; (8007dcc <parsePreset+0x17e4>)
 8007c84:	6051      	str	r1, [r2, #4]
				  break;
 8007c86:	f7ff b8b2 	b.w	8006dee <parsePreset+0x806>
				  shapeTick[i] = &triTick;
 8007c8a:	4a4f      	ldr	r2, [pc, #316]	; (8007dc8 <parsePreset+0x17e0>)
 8007c8c:	4950      	ldr	r1, [pc, #320]	; (8007dd0 <parsePreset+0x17e8>)
 8007c8e:	6051      	str	r1, [r2, #4]
				  break;
 8007c90:	f7ff b8ad 	b.w	8006dee <parsePreset+0x806>
				  shapeTick[i] = &sineTick;
 8007c94:	4a4c      	ldr	r2, [pc, #304]	; (8007dc8 <parsePreset+0x17e0>)
 8007c96:	494f      	ldr	r1, [pc, #316]	; (8007dd4 <parsePreset+0x17ec>)
 8007c98:	6051      	str	r1, [r2, #4]
				  break;
 8007c9a:	f7ff b8a8 	b.w	8006dee <parsePreset+0x806>
				  shapeTick[i] = &pulseTick;
 8007c9e:	4a4a      	ldr	r2, [pc, #296]	; (8007dc8 <parsePreset+0x17e0>)
 8007ca0:	494d      	ldr	r1, [pc, #308]	; (8007dd8 <parsePreset+0x17f0>)
 8007ca2:	6051      	str	r1, [r2, #4]
				  break;
 8007ca4:	f7ff b8a3 	b.w	8006dee <parsePreset+0x806>
				  shapeTick[i] = &sawTick;
 8007ca8:	4a47      	ldr	r2, [pc, #284]	; (8007dc8 <parsePreset+0x17e0>)
 8007caa:	494c      	ldr	r1, [pc, #304]	; (8007ddc <parsePreset+0x17f4>)
 8007cac:	6051      	str	r1, [r2, #4]
				  break;
 8007cae:	f7ff b89e 	b.w	8006dee <parsePreset+0x806>
				  shapeTick[i] = &sawSquareTick;
 8007cb2:	4a45      	ldr	r2, [pc, #276]	; (8007dc8 <parsePreset+0x17e0>)
 8007cb4:	494b      	ldr	r1, [pc, #300]	; (8007de4 <parsePreset+0x17fc>)
 8007cb6:	6051      	str	r1, [r2, #4]
				  break;
 8007cb8:	f7ff b899 	b.w	8006dee <parsePreset+0x806>
				  shapeTick[i] = &userTick;
 8007cbc:	4b42      	ldr	r3, [pc, #264]	; (8007dc8 <parsePreset+0x17e0>)
 8007cbe:	4a43      	ldr	r2, [pc, #268]	; (8007dcc <parsePreset+0x17e4>)
 8007cc0:	601a      	str	r2, [r3, #0]
				  break;
 8007cc2:	f7ff b86e 	b.w	8006da2 <parsePreset+0x7ba>
				  shapeTick[i] = &triTick;
 8007cc6:	4b40      	ldr	r3, [pc, #256]	; (8007dc8 <parsePreset+0x17e0>)
 8007cc8:	4a41      	ldr	r2, [pc, #260]	; (8007dd0 <parsePreset+0x17e8>)
 8007cca:	601a      	str	r2, [r3, #0]
				  break;
 8007ccc:	f7ff b869 	b.w	8006da2 <parsePreset+0x7ba>
				  shapeTick[i] = &sineTick;
 8007cd0:	4b3d      	ldr	r3, [pc, #244]	; (8007dc8 <parsePreset+0x17e0>)
 8007cd2:	4a40      	ldr	r2, [pc, #256]	; (8007dd4 <parsePreset+0x17ec>)
 8007cd4:	601a      	str	r2, [r3, #0]
				  break;
 8007cd6:	f7ff b864 	b.w	8006da2 <parsePreset+0x7ba>
				  shapeTick[i] = &pulseTick;
 8007cda:	4b3b      	ldr	r3, [pc, #236]	; (8007dc8 <parsePreset+0x17e0>)
 8007cdc:	4a3e      	ldr	r2, [pc, #248]	; (8007dd8 <parsePreset+0x17f0>)
 8007cde:	601a      	str	r2, [r3, #0]
				  break;
 8007ce0:	f7ff b85f 	b.w	8006da2 <parsePreset+0x7ba>
				  shapeTick[i] = &sawTick;
 8007ce4:	4b38      	ldr	r3, [pc, #224]	; (8007dc8 <parsePreset+0x17e0>)
 8007ce6:	4a3d      	ldr	r2, [pc, #244]	; (8007ddc <parsePreset+0x17f4>)
 8007ce8:	601a      	str	r2, [r3, #0]
				  break;
 8007cea:	f7ff b85a 	b.w	8006da2 <parsePreset+0x7ba>
				  shapeTick[i] = &sawSquareTick;
 8007cee:	4b36      	ldr	r3, [pc, #216]	; (8007dc8 <parsePreset+0x17e0>)
 8007cf0:	4a3c      	ldr	r2, [pc, #240]	; (8007de4 <parsePreset+0x17fc>)
 8007cf2:	601a      	str	r2, [r3, #0]
				  break;
 8007cf4:	f7ff b855 	b.w	8006da2 <parsePreset+0x7ba>
			mappings[whichMapping].destNumber = destNumber;
 8007cf8:	fb08 f30b 	mul.w	r3, r8, fp
 8007cfc:	46dc      	mov	ip, fp
 8007cfe:	f80e 0003 	strb.w	r0, [lr, r3]
			mappings[whichMapping].dest = &params[destNumber];
 8007d02:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
			mappings[whichMapping].destNumber = destNumber;
 8007d06:	eb0e 0203 	add.w	r2, lr, r3
			numMappings++;
 8007d0a:	f10b 0301 	add.w	r3, fp, #1
			mappings[whichMapping].dest = &params[destNumber];
 8007d0e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
			numMappings++;
 8007d12:	fa5f fb83 	uxtb.w	fp, r3
			mappings[whichMapping].dest = &params[destNumber];
 8007d16:	6050      	str	r0, [r2, #4]
 8007d18:	f7ff bbea 	b.w	80074f0 <parsePreset+0xf08>
 8007d1c:	20005238 	.word	0x20005238
 8007d20:	08002b19 	.word	0x08002b19
 8007d24:	20015208 	.word	0x20015208
 8007d28:	08002bb5 	.word	0x08002bb5
 8007d2c:	08002c95 	.word	0x08002c95
 8007d30:	08002c2d 	.word	0x08002c2d
 8007d34:	08002afd 	.word	0x08002afd
 8007d38:	08002ba1 	.word	0x08002ba1
 8007d3c:	08002c91 	.word	0x08002c91
 8007d40:	08002c19 	.word	0x08002c19
 8007d44:	08002ac5 	.word	0x08002ac5
 8007d48:	08002b79 	.word	0x08002b79
 8007d4c:	08002c69 	.word	0x08002c69
 8007d50:	08002bf1 	.word	0x08002bf1
 8007d54:	08002ae1 	.word	0x08002ae1
 8007d58:	08002b8d 	.word	0x08002b8d
 8007d5c:	08002c7d 	.word	0x08002c7d
 8007d60:	08002c05 	.word	0x08002c05
 8007d64:	20004ff4 	.word	0x20004ff4
 8007d68:	08001fa9 	.word	0x08001fa9
 8007d6c:	08002149 	.word	0x08002149
 8007d70:	080022e9 	.word	0x080022e9
 8007d74:	08001f65 	.word	0x08001f65
 8007d78:	08002135 	.word	0x08002135
 8007d7c:	080022b9 	.word	0x080022b9
 8007d80:	08001f39 	.word	0x08001f39
 8007d84:	08002121 	.word	0x08002121
 8007d88:	08002285 	.word	0x08002285
 8007d8c:	08001f0d 	.word	0x08001f0d
 8007d90:	0800210d 	.word	0x0800210d
 8007d94:	08002251 	.word	0x08002251
 8007d98:	08001ee1 	.word	0x08001ee1
 8007d9c:	080020f9 	.word	0x080020f9
 8007da0:	0800221d 	.word	0x0800221d
 8007da4:	08001e9d 	.word	0x08001e9d
 8007da8:	080020e5 	.word	0x080020e5
 8007dac:	080021ed 	.word	0x080021ed
 8007db0:	08001e59 	.word	0x08001e59
 8007db4:	080020d1 	.word	0x080020d1
 8007db8:	080021bd 	.word	0x080021bd
 8007dbc:	08001e15 	.word	0x08001e15
 8007dc0:	080020bd 	.word	0x080020bd
 8007dc4:	0800218d 	.word	0x0800218d
 8007dc8:	20005a40 	.word	0x20005a40
 8007dcc:	08001be5 	.word	0x08001be5
 8007dd0:	08001b69 	.word	0x08001b69
 8007dd4:	08001b39 	.word	0x08001b39
 8007dd8:	08001abd 	.word	0x08001abd
 8007ddc:	08001a59 	.word	0x08001a59
 8007de0:	080019dd 	.word	0x080019dd
 8007de4:	08001961 	.word	0x08001961
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
 8007de8:	1d3a      	adds	r2, r7, #4
 8007dea:	fb08 f30c 	mul.w	r3, r8, ip
 8007dee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007df2:	4a0b      	ldr	r2, [pc, #44]	; (8007e20 <parsePreset+0x1838>)
 8007df4:	4473      	add	r3, lr
 8007df6:	605a      	str	r2, [r3, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	f7ff bbbd 	b.w	8007578 <parsePreset+0xf90>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8007dfe:	2208      	movs	r2, #8
 8007e00:	2004      	movs	r0, #4
 8007e02:	fb12 0303 	smlabb	r3, r2, r3, r0
 8007e06:	444b      	add	r3, r9
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8007e08:	f7ff bbb6 	b.w	8007578 <parsePreset+0xf90>
 8007e0c:	4f05      	ldr	r7, [pc, #20]	; (8007e24 <parsePreset+0x183c>)
 8007e0e:	f7fe be75 	b.w	8006afc <parsePreset+0x514>
	for (int i = 0; i < paramCount; i++)
 8007e12:	2684      	movs	r6, #132	; 0x84
 8007e14:	4d04      	ldr	r5, [pc, #16]	; (8007e28 <parsePreset+0x1840>)
 8007e16:	f7fe be5f 	b.w	8006ad8 <parsePreset+0x4f0>
 8007e1a:	4a04      	ldr	r2, [pc, #16]	; (8007e2c <parsePreset+0x1844>)
 8007e1c:	f7ff b885 	b.w	8006f2a <parsePreset+0x942>
 8007e20:	200006e0 	.word	0x200006e0
 8007e24:	20016cc0 	.word	0x20016cc0
 8007e28:	20015bcc 	.word	0x20015bcc
 8007e2c:	20015208 	.word	0x20015208

08007e30 <main>:
{
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007e34:	2400      	movs	r4, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007e36:	2501      	movs	r5, #1
{
 8007e38:	ed2d 8b02 	vpush	{d8}
 8007e3c:	b08d      	sub	sp, #52	; 0x34
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007e3e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8007e42:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_MPU_Disable();
 8007e46:	f000 ffef 	bl	8008e28 <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007e4a:	f248 721f 	movw	r2, #34591	; 0x871f
 8007e4e:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e52:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007e54:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007e58:	930a      	str	r3, [sp, #40]	; 0x28
 8007e5a:	e9cd 4208 	strd	r4, r2, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e5e:	f001 f801 	bl	8008e64 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30000000;
 8007e62:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8007e66:	4bb9      	ldr	r3, [pc, #740]	; (800814c <main+0x31c>)
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e68:	a807      	add	r0, sp, #28
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8007e6a:	f88d 501d 	strb.w	r5, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8007e6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e72:	f000 fff7 	bl	8008e64 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8007e76:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8007e7a:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e7c:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8007e7e:	9308      	str	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8007e80:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8007e82:	f88d 201d 	strb.w	r2, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8007e86:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e8a:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8007e8e:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e92:	f000 ffe7 	bl	8008e64 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x60000000;
 8007e96:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8007e9a:	2318      	movs	r3, #24
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8007e9c:	2103      	movs	r1, #3
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007e9e:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0x60000000;
 8007ea0:	9208      	str	r2, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8007ea2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8007ea6:	f88d 101d 	strb.w	r1, [sp, #29]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007eaa:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007eae:	f000 ffd9 	bl	8008e64 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007eb2:	2004      	movs	r0, #4
 8007eb4:	f000 ffc6 	bl	8008e44 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007eb8:	4ba5      	ldr	r3, [pc, #660]	; (8008150 <main+0x320>)
 8007eba:	695a      	ldr	r2, [r3, #20]
 8007ebc:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8007ec0:	d111      	bne.n	8007ee6 <main+0xb6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007ec2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007ec6:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007eca:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007ece:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007ed2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007ed6:	695a      	ldr	r2, [r3, #20]
 8007ed8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007edc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007ede:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007ee2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8007ee6:	489a      	ldr	r0, [pc, #616]	; (8008150 <main+0x320>)
 8007ee8:	6943      	ldr	r3, [r0, #20]
 8007eea:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8007eee:	d124      	bne.n	8007f3a <main+0x10a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8007ef0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007ef4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8007ef8:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007efc:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007f00:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007f04:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8007f08:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007f0a:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007f0e:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007f10:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8007f14:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007f16:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	d1f8      	bne.n	8007f10 <main+0xe0>
    } while(sets-- != 0U);
 8007f1e:	3c20      	subs	r4, #32
 8007f20:	f114 0f20 	cmn.w	r4, #32
 8007f24:	d1f1      	bne.n	8007f0a <main+0xda>
 8007f26:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007f2a:	6943      	ldr	r3, [r0, #20]
 8007f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f30:	6143      	str	r3, [r0, #20]
 8007f32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f36:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8007f3a:	f000 fe9d 	bl	8008c78 <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8007f3e:	b662      	cpsie	i
  SystemClock_Config();
 8007f40:	f7fd fdae 	bl	8005aa0 <SystemClock_Config>
  PeriphCommonClock_Config();
 8007f44:	f7fd fe38 	bl	8005bb8 <PeriphCommonClock_Config>
  HAL_Delay(500);
 8007f48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f4c:	f000 fed6 	bl	8008cfc <HAL_Delay>
  MX_GPIO_Init();
 8007f50:	f7fd fa22 	bl	8005398 <MX_GPIO_Init>
  MX_DMA_Init();
 8007f54:	f7fd f924 	bl	80051a0 <MX_DMA_Init>
  MX_FMC_Init();
 8007f58:	f7fd f966 	bl	8005228 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8007f5c:	f000 fafe 	bl	800855c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8007f60:	f009 f846 	bl	8010ff0 <MX_FATFS_Init>
  MX_SAI1_Init();
 8007f64:	f000 fa02 	bl	800836c <MX_SAI1_Init>
  MX_RNG_Init();
 8007f68:	f000 f9c0 	bl	80082ec <MX_RNG_Init>
  MX_SPI2_Init();
 8007f6c:	f000 fb98 	bl	80086a0 <MX_SPI2_Init>
  MX_I2C2_Init();
 8007f70:	f7fd fb16 	bl	80055a0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8007f74:	f000 fb68 	bl	8008648 <MX_SPI1_Init>
  MX_SPI5_Init();
 8007f78:	f000 fbbe 	bl	80086f8 <MX_SPI5_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007f82:	4874      	ldr	r0, [pc, #464]	; (8008154 <main+0x324>)
 8007f84:	f002 fc66 	bl	800a854 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2102      	movs	r1, #2
 8007f8c:	4872      	ldr	r0, [pc, #456]	; (8008158 <main+0x328>)
 8007f8e:	f002 fc61 	bl	800a854 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 8007f92:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 8007f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 8007f9a:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007f9e:	496c      	ldr	r1, [pc, #432]	; (8008150 <main+0x320>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8007fa0:	4a6e      	ldr	r2, [pc, #440]	; (800815c <main+0x32c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007fa2:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8007fa6:	f8d2 0fb4 	ldr.w	r0, [r2, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fae:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8007fb2:	07c3      	lsls	r3, r0, #31
 8007fb4:	d502      	bpl.n	8007fbc <main+0x18c>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8007fb6:	4b6a      	ldr	r3, [pc, #424]	; (8008160 <main+0x330>)
 8007fb8:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
	  buffer[i] = 0;
 8007fbc:	4b69      	ldr	r3, [pc, #420]	; (8008164 <main+0x334>)
  DWT->CYCCNT = 0;
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	4a66      	ldr	r2, [pc, #408]	; (800815c <main+0x32c>)
  DWT->CTRL = 0x40000001;
 8007fc2:	4869      	ldr	r0, [pc, #420]	; (8008168 <main+0x338>)
  DWT->CYCCNT = 0;
 8007fc4:	6051      	str	r1, [r2, #4]
  DWT->CTRL = 0x40000001;
 8007fc6:	6010      	str	r0, [r2, #0]
	  buffer[i] = 0;
 8007fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007fcc:	4618      	mov	r0, r3
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 8007fce:	f8df a200 	ldr.w	sl, [pc, #512]	; 80081d0 <main+0x3a0>
	  buffer[i] = 0;
 8007fd2:	f014 ff9f 	bl	801cf14 <memset>
  buffer[15] = NUM_PARAMS;
 8007fd6:	229b      	movs	r2, #155	; 0x9b
	  buffer[i] = 0;
 8007fd8:	4603      	mov	r3, r0
  buffer[NUM_PARAMS*2+19] = 1;
 8007fda:	2101      	movs	r1, #1
  buffer[NUM_PARAMS*2+16] = 0xef;
 8007fdc:	f64e 70ef 	movw	r0, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8007fe0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15] = NUM_PARAMS;
 8007fe4:	73da      	strb	r2, [r3, #15]
  buffer[NUM_PARAMS*2+25] = 0xfe;
 8007fe6:	f64f 62fe 	movw	r2, #65278	; 0xfefe
  buffer[NUM_PARAMS*2+16] = 0xef;
 8007fea:	f8a3 0146 	strh.w	r0, [r3, #326]	; 0x146
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8007fee:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19] = 1;
 8007ff2:	f883 1149 	strb.w	r1, [r3, #329]	; 0x149
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8007ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25] = 0xfe;
 8007ffa:	f8a3 214f 	strh.w	r2, [r3, #335]	; 0x14f
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8007ffe:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800816c <main+0x33c>
 8008002:	485b      	ldr	r0, [pc, #364]	; (8008170 <main+0x340>)
 8008004:	f00e feaa 	bl	8016d5c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 8008008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800800c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8008174 <main+0x344>
 8008010:	eddf 0a59 	vldr	s1, [pc, #356]	; 8008178 <main+0x348>
 8008014:	ed9f 0a59 	vldr	s0, [pc, #356]	; 800817c <main+0x34c>
 8008018:	4859      	ldr	r0, [pc, #356]	; (8008180 <main+0x350>)
 800801a:	f00e fe9f 	bl	8016d5c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 800801e:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8008022:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8008026:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800802a:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800817c <main+0x34c>
 800802e:	4855      	ldr	r0, [pc, #340]	; (8008184 <main+0x354>)
 8008030:	f00e fe94 	bl	8016d5c <LEAF_generate_table_skew_non_sym>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 8008034:	4c54      	ldr	r4, [pc, #336]	; (8008188 <main+0x358>)
  getPresetNamesFromSDCard();
 8008036:	f7fd fe11 	bl	8005c5c <getPresetNamesFromSDCard>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 800803a:	f89a 0000 	ldrb.w	r0, [sl]
 800803e:	f7fd fb89 	bl	8005754 <checkForSDCardPreset>
 8008042:	b2c3      	uxtb	r3, r0
 8008044:	7023      	strb	r3, [r4, #0]
	  if (foundOne)
 8008046:	7823      	ldrb	r3, [r4, #0]
 8008048:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8132 	beq.w	80082b6 <main+0x486>
  SDRAM_init();
 8008052:	f7fe f871 	bl	8006138 <SDRAM_init>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 8008056:	494d      	ldr	r1, [pc, #308]	; (800818c <main+0x35c>)
 8008058:	4a4d      	ldr	r2, [pc, #308]	; (8008190 <main+0x360>)
 800805a:	484e      	ldr	r0, [pc, #312]	; (8008194 <main+0x364>)
 800805c:	f7f8 fb00 	bl	8000660 <audioInit>
	AudioCodec_init(&hi2c2);
 8008060:	484c      	ldr	r0, [pc, #304]	; (8008194 <main+0x364>)
 8008062:	f7fd f813 	bl	800508c <AudioCodec_init>
  	if (foundOne == 0)
 8008066:	7823      	ldrb	r3, [r4, #0]
 8008068:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800806c:	2b00      	cmp	r3, #0
 800806e:	f040 811b 	bne.w	80082a8 <main+0x478>
	  parsePreset((NUM_PARAMS*2)+27+(8*14), 0); //default preset binary
 8008072:	f240 10c1 	movw	r0, #449	; 0x1c1
 8008076:	4d48      	ldr	r5, [pc, #288]	; (8008198 <main+0x368>)
 8008078:	f7fe fab6 	bl	80065e8 <parsePreset>
    HAL_SPI_Receive_DMA(&hspi2, SPI_RX, BAR_BUFFER_SIZE_TIMES_TWO);
 800807c:	2210      	movs	r2, #16
 800807e:	4947      	ldr	r1, [pc, #284]	; (800819c <main+0x36c>)
 8008080:	4847      	ldr	r0, [pc, #284]	; (80081a0 <main+0x370>)
 8008082:	f007 f8e9 	bl	800f258 <HAL_SPI_Receive_DMA>
    HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 8008086:	2240      	movs	r2, #64	; 0x40
 8008088:	4946      	ldr	r1, [pc, #280]	; (80081a4 <main+0x374>)
 800808a:	4847      	ldr	r0, [pc, #284]	; (80081a8 <main+0x378>)
 800808c:	f007 f8e4 	bl	800f258 <HAL_SPI_Receive_DMA>
    if (boardNumber != 0)
 8008090:	4b46      	ldr	r3, [pc, #280]	; (80081ac <main+0x37c>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 8100 	beq.w	800829a <main+0x46a>
    	HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 800809a:	4945      	ldr	r1, [pc, #276]	; (80081b0 <main+0x380>)
 800809c:	2240      	movs	r2, #64	; 0x40
 800809e:	4845      	ldr	r0, [pc, #276]	; (80081b4 <main+0x384>)
 80080a0:	f007 f8da 	bl	800f258 <HAL_SPI_Receive_DMA>
    	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a4:	2300      	movs	r3, #0
  	  	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80080a6:	2240      	movs	r2, #64	; 0x40
  	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080a8:	a907      	add	r1, sp, #28
 80080aa:	482b      	ldr	r0, [pc, #172]	; (8008158 <main+0x328>)
    	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080ac:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80080b0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  	  	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080b4:	2301      	movs	r3, #1
 80080b6:	9309      	str	r3, [sp, #36]	; 0x24
  	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080b8:	f002 fa7c 	bl	800a5b4 <HAL_GPIO_Init>
 80080bc:	4f3e      	ldr	r7, [pc, #248]	; (80081b8 <main+0x388>)
 80080be:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80081d4 <main+0x3a4>
	  if (rand > TWO_TO_31)
 80080c2:	eddf 8a3e 	vldr	s17, [pc, #248]	; 80081bc <main+0x38c>
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 80080c6:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 80081c0 <main+0x390>
 80080ca:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80081d8 <main+0x3a8>
 80080ce:	4c3d      	ldr	r4, [pc, #244]	; (80081c4 <main+0x394>)
 80080d0:	4e3d      	ldr	r6, [pc, #244]	; (80081c8 <main+0x398>)
 80080d2:	e02b      	b.n	800812c <main+0x2fc>
	  if (presetWaitingToParse > 0)
 80080d4:	6829      	ldr	r1, [r5, #0]
 80080d6:	bb99      	cbnz	r1, 8008140 <main+0x310>
	  else if (presetWaitingToWrite > 0)
 80080d8:	f8d9 b000 	ldr.w	fp, [r9]
 80080dc:	f1bb 0f00 	cmp.w	fp, #0
 80080e0:	d17c      	bne.n	80081dc <main+0x3ac>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80080e2:	a907      	add	r1, sp, #28
 80080e4:	4839      	ldr	r0, [pc, #228]	; (80081cc <main+0x39c>)
 80080e6:	f005 fb7b 	bl	800d7e0 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 80080ea:	eddd 7a07 	vldr	s15, [sp, #28]
 80080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80080f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fa:	dd0c      	ble.n	8008116 <main+0x2e6>
		  myTestInt++;
 80080fc:	f8d8 3000 	ldr.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8008100:	2180      	movs	r1, #128	; 0x80
 8008102:	4814      	ldr	r0, [pc, #80]	; (8008154 <main+0x324>)
		  myTestInt++;
 8008104:	3301      	adds	r3, #1
 8008106:	f8c8 3000 	str.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800810a:	f002 fba7 	bl	800a85c <HAL_GPIO_TogglePin>
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
 800810e:	eddd 7a07 	vldr	s15, [sp, #28]
 8008112:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8008116:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800811a:	7823      	ldrb	r3, [r4, #0]
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008122:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008126:	7022      	strb	r2, [r4, #0]
 8008128:	ed83 7a00 	vstr	s14, [r3]
	  if (presetWaitingToLoad > 0)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0d0      	beq.n	80080d4 <main+0x2a4>
		  checkForSDCardPreset(presetNumberToLoad);
 8008132:	f89a 0000 	ldrb.w	r0, [sl]
 8008136:	f7fd fb0d 	bl	8005754 <checkForSDCardPreset>
	  if (presetWaitingToParse > 0)
 800813a:	6829      	ldr	r1, [r5, #0]
 800813c:	2900      	cmp	r1, #0
 800813e:	d0cb      	beq.n	80080d8 <main+0x2a8>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 8008140:	4608      	mov	r0, r1
 8008142:	f89a 1000 	ldrb.w	r1, [sl]
 8008146:	f7fe fa4f 	bl	80065e8 <parsePreset>
 800814a:	e7ca      	b.n	80080e2 <main+0x2b2>
 800814c:	03010011 	.word	0x03010011
 8008150:	e000ed00 	.word	0xe000ed00
 8008154:	58020800 	.word	0x58020800
 8008158:	58020000 	.word	0x58020000
 800815c:	e0001000 	.word	0xe0001000
 8008160:	c5acce55 	.word	0xc5acce55
 8008164:	300001e0 	.word	0x300001e0
 8008168:	40000001 	.word	0x40000001
 800816c:	3c23d70a 	.word	0x3c23d70a
 8008170:	200170dc 	.word	0x200170dc
 8008174:	457a0000 	.word	0x457a0000
 8008178:	469c4000 	.word	0x469c4000
 800817c:	00000000 	.word	0x00000000
 8008180:	200130dc 	.word	0x200130dc
 8008184:	240733a0 	.word	0x240733a0
 8008188:	20015204 	.word	0x20015204
 800818c:	200191e8 	.word	0x200191e8
 8008190:	20019280 	.word	0x20019280
 8008194:	20012ff4 	.word	0x20012ff4
 8008198:	20016cd4 	.word	0x20016cd4
 800819c:	30000180 	.word	0x30000180
 80081a0:	20019600 	.word	0x20019600
 80081a4:	300001a0 	.word	0x300001a0
 80081a8:	20019688 	.word	0x20019688
 80081ac:	20013048 	.word	0x20013048
 80081b0:	30000100 	.word	0x30000100
 80081b4:	20019578 	.word	0x20019578
 80081b8:	20016cd0 	.word	0x20016cd0
 80081bc:	4f000000 	.word	0x4f000000
 80081c0:	3000000d 	.word	0x3000000d
 80081c4:	2001304d 	.word	0x2001304d
 80081c8:	20016cdc 	.word	0x20016cdc
 80081cc:	200190e0 	.word	0x200190e0
 80081d0:	200006e4 	.word	0x200006e4
 80081d4:	20016cd8 	.word	0x20016cd8
 80081d8:	20015bc4 	.word	0x20015bc4
  __ASM volatile ("cpsid i" : : : "memory");
 80081dc:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 80081de:	2280      	movs	r2, #128	; 0x80
 80081e0:	4837      	ldr	r0, [pc, #220]	; (80082c0 <main+0x490>)
 80081e2:	9101      	str	r1, [sp, #4]
 80081e4:	f014 fe96 	bl	801cf14 <memset>
  __IO uint8_t status = SD_PRESENT;
 80081e8:	2301      	movs	r3, #1
 80081ea:	f88d 300b 	strb.w	r3, [sp, #11]
  if (BSP_PlatformIsDetected() != 0x0)
 80081ee:	f008 ff67 	bl	80110c0 <BSP_PlatformIsDetected>
 80081f2:	b110      	cbz	r0, 80081fa <main+0x3ca>
    status = SD_NOT_PRESENT;
 80081f4:	9901      	ldr	r1, [sp, #4]
 80081f6:	f88d 100b 	strb.w	r1, [sp, #11]
  return status;
 80081fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 80081fe:	b323      	cbz	r3, 800824a <main+0x41a>
				diskBusy = 1;
 8008200:	2301      	movs	r3, #1
 8008202:	4a30      	ldr	r2, [pc, #192]	; (80082c4 <main+0x494>)
 8008204:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 8008206:	4b30      	ldr	r3, [pc, #192]	; (80082c8 <main+0x498>)
 8008208:	7818      	ldrb	r0, [r3, #0]
 800820a:	2863      	cmp	r0, #99	; 0x63
 800820c:	d901      	bls.n	8008212 <main+0x3e2>
			        presetNumberToSave = 99;
 800820e:	2063      	movs	r0, #99	; 0x63
 8008210:	7018      	strb	r0, [r3, #0]
				itoa(presetNumberToSave, charBuf, 10);
 8008212:	220a      	movs	r2, #10
 8008214:	a904      	add	r1, sp, #16
 8008216:	f014 fe39 	bl	801ce8c <itoa>
				int len = ((strlen(charBuf)));
 800821a:	a804      	add	r0, sp, #16
 800821c:	f7f8 f85c 	bl	80002d8 <strlen>
				if (len == 1)
 8008220:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 8008222:	4602      	mov	r2, r0
				if (len == 1)
 8008224:	d018      	beq.n	8008258 <main+0x428>
					strcat(charBuf, ".ebp");
 8008226:	4929      	ldr	r1, [pc, #164]	; (80082cc <main+0x49c>)
 8008228:	ab04      	add	r3, sp, #16
 800822a:	6808      	ldr	r0, [r1, #0]
 800822c:	7909      	ldrb	r1, [r1, #4]
 800822e:	5098      	str	r0, [r3, r2]
 8008230:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
 8008232:	a807      	add	r0, sp, #28
 8008234:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 8008236:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
 8008238:	a904      	add	r1, sp, #16
 800823a:	f014 fe97 	bl	801cf6c <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800823e:	220a      	movs	r2, #10
 8008240:	a907      	add	r1, sp, #28
 8008242:	4823      	ldr	r0, [pc, #140]	; (80082d0 <main+0x4a0>)
 8008244:	f00b f9c4 	bl	80135d0 <f_open>
 8008248:	b1e8      	cbz	r0, 8008286 <main+0x456>
	presetWaitingToWrite = 0;
 800824a:	2300      	movs	r3, #0
	diskBusy = 0;
 800824c:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <main+0x494>)
	presetWaitingToWrite = 0;
 800824e:	f8c9 3000 	str.w	r3, [r9]
	diskBusy = 0;
 8008252:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008254:	b662      	cpsie	i
}
 8008256:	e744      	b.n	80080e2 <main+0x2b2>
					finalString[2] = charBuf[1];
 8008258:	f89d 3011 	ldrb.w	r3, [sp, #17]
					strcat(finalString, ".ebp");
 800825c:	a807      	add	r0, sp, #28
					finalString[2] = charBuf[1];
 800825e:	f88d 301e 	strb.w	r3, [sp, #30]
					finalString[1] = charBuf[0];
 8008262:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008266:	f88d 301d 	strb.w	r3, [sp, #29]
					finalString[0] = '0';
 800826a:	2330      	movs	r3, #48	; 0x30
 800826c:	f88d 301c 	strb.w	r3, [sp, #28]
					strcat(finalString, ".ebp");
 8008270:	f7f8 f832 	bl	80002d8 <strlen>
 8008274:	4a15      	ldr	r2, [pc, #84]	; (80082cc <main+0x49c>)
 8008276:	4603      	mov	r3, r0
 8008278:	a907      	add	r1, sp, #28
 800827a:	6810      	ldr	r0, [r2, #0]
 800827c:	7912      	ldrb	r2, [r2, #4]
 800827e:	50c8      	str	r0, [r1, r3]
 8008280:	440b      	add	r3, r1
 8008282:	711a      	strb	r2, [r3, #4]
 8008284:	e7db      	b.n	800823e <main+0x40e>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 8008286:	465a      	mov	r2, fp
 8008288:	ab03      	add	r3, sp, #12
 800828a:	4912      	ldr	r1, [pc, #72]	; (80082d4 <main+0x4a4>)
 800828c:	4810      	ldr	r0, [pc, #64]	; (80082d0 <main+0x4a0>)
 800828e:	f00b fc3f 	bl	8013b10 <f_write>
					f_close(&SDFile);
 8008292:	480f      	ldr	r0, [pc, #60]	; (80082d0 <main+0x4a0>)
 8008294:	f00b fd98 	bl	8013dc8 <f_close>
 8008298:	e7d7      	b.n	800824a <main+0x41a>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 800829a:	4a0f      	ldr	r2, [pc, #60]	; (80082d8 <main+0x4a8>)
 800829c:	2340      	movs	r3, #64	; 0x40
 800829e:	480f      	ldr	r0, [pc, #60]	; (80082dc <main+0x4ac>)
 80082a0:	18d1      	adds	r1, r2, r3
 80082a2:	f007 f8b9 	bl	800f418 <HAL_SPI_TransmitReceive_DMA>
 80082a6:	e709      	b.n	80080bc <main+0x28c>
	  parsePreset(presetWaitingToParse, presetNumberToLoad);
 80082a8:	4d0d      	ldr	r5, [pc, #52]	; (80082e0 <main+0x4b0>)
 80082aa:	f89a 1000 	ldrb.w	r1, [sl]
 80082ae:	6828      	ldr	r0, [r5, #0]
 80082b0:	f7fe f99a 	bl	80065e8 <parsePreset>
 80082b4:	e6e2      	b.n	800807c <main+0x24c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80082b6:	2110      	movs	r1, #16
 80082b8:	480a      	ldr	r0, [pc, #40]	; (80082e4 <main+0x4b4>)
 80082ba:	f002 facb 	bl	800a854 <HAL_GPIO_WritePin>
 80082be:	e6c8      	b.n	8008052 <main+0x222>
 80082c0:	30000000 	.word	0x30000000
 80082c4:	20013088 	.word	0x20013088
 80082c8:	20016cce 	.word	0x20016cce
 80082cc:	0801f46c 	.word	0x0801f46c
 80082d0:	20019948 	.word	0x20019948
 80082d4:	300001e0 	.word	0x300001e0
 80082d8:	30000100 	.word	0x30000100
 80082dc:	20019578 	.word	0x20019578
 80082e0:	20016cd4 	.word	0x20016cd4
 80082e4:	58020400 	.word	0x58020400

080082e8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop

080082ec <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80082ec:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80082ee:	4806      	ldr	r0, [pc, #24]	; (8008308 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	4a06      	ldr	r2, [pc, #24]	; (800830c <MX_RNG_Init+0x20>)
 80082f4:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80082f8:	f005 fa30 	bl	800d75c <HAL_RNG_Init>
 80082fc:	b900      	cbnz	r0, 8008300 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80082fe:	bd08      	pop	{r3, pc}
 8008300:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008304:	f7ff bff0 	b.w	80082e8 <Error_Handler>
 8008308:	200190e0 	.word	0x200190e0
 800830c:	48021800 	.word	0x48021800

08008310 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8008310:	b510      	push	{r4, lr}
 8008312:	b0b2      	sub	sp, #200	; 0xc8
 8008314:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008316:	22c0      	movs	r2, #192	; 0xc0
 8008318:	2100      	movs	r1, #0
 800831a:	a802      	add	r0, sp, #8
 800831c:	f014 fdfa 	bl	801cf14 <memset>
  if(rngHandle->Instance==RNG)
 8008320:	4b10      	ldr	r3, [pc, #64]	; (8008364 <HAL_RNG_MspInit+0x54>)
 8008322:	6822      	ldr	r2, [r4, #0]
 8008324:	429a      	cmp	r2, r3
 8008326:	d001      	beq.n	800832c <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8008328:	b032      	add	sp, #200	; 0xc8
 800832a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800832c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008330:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008332:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8008334:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008338:	f004 f81c 	bl	800c374 <HAL_RCCEx_PeriphCLKConfig>
 800833c:	b970      	cbnz	r0, 800835c <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 800833e:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <HAL_RNG_MspInit+0x58>)
 8008340:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8008344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008348:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800834c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	9b01      	ldr	r3, [sp, #4]
}
 8008358:	b032      	add	sp, #200	; 0xc8
 800835a:	bd10      	pop	{r4, pc}
      Error_Handler();
 800835c:	f7ff ffc4 	bl	80082e8 <Error_Handler>
 8008360:	e7ed      	b.n	800833e <HAL_RNG_MspInit+0x2e>
 8008362:	bf00      	nop
 8008364:	48021800 	.word	0x48021800
 8008368:	58024400 	.word	0x58024400

0800836c <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800836c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800836e:	4818      	ldr	r0, [pc, #96]	; (80083d0 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8008370:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8008372:	4c18      	ldr	r4, [pc, #96]	; (80083d4 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8008374:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008376:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8008378:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800837a:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800837c:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800837e:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008380:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 8008382:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8008386:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800838a:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800838e:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008390:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008394:	f005 fc32 	bl	800dbfc <HAL_SAI_InitProtocol>
 8008398:	b998      	cbnz	r0, 80083c2 <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800839a:	480f      	ldr	r0, [pc, #60]	; (80083d8 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800839c:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 800839e:	4c0f      	ldr	r4, [pc, #60]	; (80083dc <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80083a0:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80083a2:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80083a4:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 80083a6:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80083a8:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80083aa:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80083ac:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80083ae:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80083b0:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80083b2:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80083b4:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80083b6:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80083ba:	f005 fc1f 	bl	800dbfc <HAL_SAI_InitProtocol>
 80083be:	b918      	cbnz	r0, 80083c8 <MX_SAI1_Init+0x5c>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80083c0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80083c2:	f7ff ff91 	bl	80082e8 <Error_Handler>
 80083c6:	e7e8      	b.n	800839a <MX_SAI1_Init+0x2e>
}
 80083c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80083cc:	f7ff bf8c 	b.w	80082e8 <Error_Handler>
 80083d0:	200191e8 	.word	0x200191e8
 80083d4:	40015804 	.word	0x40015804
 80083d8:	20019280 	.word	0x20019280
 80083dc:	40015824 	.word	0x40015824

080083e0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80083e0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80083e2:	4a55      	ldr	r2, [pc, #340]	; (8008538 <HAL_SAI_MspInit+0x158>)
{
 80083e4:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 80083e6:	6803      	ldr	r3, [r0, #0]
{
 80083e8:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d004      	beq.n	80083f8 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80083ee:	4a53      	ldr	r2, [pc, #332]	; (800853c <HAL_SAI_MspInit+0x15c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d03f      	beq.n	8008474 <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 80083f4:	b009      	add	sp, #36	; 0x24
 80083f6:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 80083f8:	4b51      	ldr	r3, [pc, #324]	; (8008540 <HAL_SAI_MspInit+0x160>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	2a00      	cmp	r2, #0
 80083fe:	f000 8081 	beq.w	8008504 <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
 8008402:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8008404:	2074      	movs	r0, #116	; 0x74
 8008406:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 8008408:	4d4e      	ldr	r5, [pc, #312]	; (8008544 <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 800840a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800840c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800840e:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8008530 <HAL_SAI_MspInit+0x150>
 8008412:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008416:	a902      	add	r1, sp, #8
 8008418:	484b      	ldr	r0, [pc, #300]	; (8008548 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800841a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800841c:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008420:	f002 f8c8 	bl	800a5b4 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8008424:	4949      	ldr	r1, [pc, #292]	; (800854c <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8008426:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8008428:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800842a:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800842c:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800842e:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8008430:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8008434:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008438:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800843a:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800843e:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008440:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008448:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800844a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800844e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8008452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008456:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800845a:	2304      	movs	r3, #4
 800845c:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800845e:	f000 fe13 	bl	8009088 <HAL_DMA_Init>
 8008462:	2800      	cmp	r0, #0
 8008464:	d15c      	bne.n	8008520 <HAL_SAI_MspInit+0x140>
    if(saiHandle->Instance==SAI1_Block_B)
 8008466:	4a35      	ldr	r2, [pc, #212]	; (800853c <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8008468:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 800846e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 8008472:	d1bf      	bne.n	80083f4 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 8008474:	4b32      	ldr	r3, [pc, #200]	; (8008540 <HAL_SAI_MspInit+0x160>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	b3b2      	cbz	r2, 80084e8 <HAL_SAI_MspInit+0x108>
    SAI1_client ++;
 800847a:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800847c:	2008      	movs	r0, #8
 800847e:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 8008480:	4d33      	ldr	r5, [pc, #204]	; (8008550 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 8008482:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008484:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008486:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8008530 <HAL_SAI_MspInit+0x150>
 800848a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800848e:	a902      	add	r1, sp, #8
 8008490:	482d      	ldr	r0, [pc, #180]	; (8008548 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8008492:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008494:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008498:	f002 f88c 	bl	800a5b4 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 800849c:	492d      	ldr	r1, [pc, #180]	; (8008554 <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800849e:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80084a0:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80084a2:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80084a4:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80084a6:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80084aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80084ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80084b2:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80084b6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80084ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80084be:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 80084c2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80084c6:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80084ca:	2304      	movs	r3, #4
 80084cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80084d0:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80084d4:	f000 fdd8 	bl	8009088 <HAL_DMA_Init>
 80084d8:	bb28      	cbnz	r0, 8008526 <HAL_SAI_MspInit+0x146>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80084da:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 80084de:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80084e0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 80084e4:	b009      	add	sp, #36	; 0x24
 80084e6:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 80084e8:	491b      	ldr	r1, [pc, #108]	; (8008558 <HAL_SAI_MspInit+0x178>)
 80084ea:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80084ee:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80084f2:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80084f6:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80084fa:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80084fe:	9101      	str	r1, [sp, #4]
 8008500:	9901      	ldr	r1, [sp, #4]
 8008502:	e7ba      	b.n	800847a <HAL_SAI_MspInit+0x9a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008504:	4914      	ldr	r1, [pc, #80]	; (8008558 <HAL_SAI_MspInit+0x178>)
 8008506:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 800850a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800850e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8008512:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8008516:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800851a:	9100      	str	r1, [sp, #0]
 800851c:	9900      	ldr	r1, [sp, #0]
 800851e:	e770      	b.n	8008402 <HAL_SAI_MspInit+0x22>
      Error_Handler();
 8008520:	f7ff fee2 	bl	80082e8 <Error_Handler>
 8008524:	e79f      	b.n	8008466 <HAL_SAI_MspInit+0x86>
      Error_Handler();
 8008526:	f7ff fedf 	bl	80082e8 <Error_Handler>
 800852a:	e7d6      	b.n	80084da <HAL_SAI_MspInit+0xfa>
 800852c:	f3af 8000 	nop.w
 8008530:	00000000 	.word	0x00000000
 8008534:	00000003 	.word	0x00000003
 8008538:	40015804 	.word	0x40015804
 800853c:	40015824 	.word	0x40015824
 8008540:	200190f4 	.word	0x200190f4
 8008544:	200190f8 	.word	0x200190f8
 8008548:	58021000 	.word	0x58021000
 800854c:	40020028 	.word	0x40020028
 8008550:	20019170 	.word	0x20019170
 8008554:	40020040 	.word	0x40020040
 8008558:	58024400 	.word	0x58024400

0800855c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800855c:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800855e:	4b07      	ldr	r3, [pc, #28]	; (800857c <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8008560:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 8008562:	4c07      	ldr	r4, [pc, #28]	; (8008580 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8008564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
 8008568:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
 800856a:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800856e:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
 8008572:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8008576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	20019318 	.word	0x20019318
 8008580:	52007000 	.word	0x52007000

08008584 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8008584:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8008586:	4b2b      	ldr	r3, [pc, #172]	; (8008634 <HAL_SD_MspInit+0xb0>)
{
 8008588:	b08b      	sub	sp, #44	; 0x2c
  if(sdHandle->Instance==SDMMC1)
 800858a:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800858c:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 800858e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008590:	9408      	str	r4, [sp, #32]
 8008592:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8008596:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 800859a:	d001      	beq.n	80085a0 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800859c:	b00b      	add	sp, #44	; 0x2c
 800859e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80085a0:	4b25      	ldr	r3, [pc, #148]	; (8008638 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80085a2:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80085a4:	2601      	movs	r6, #1
 80085a6:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80085a8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085ac:	4823      	ldr	r0, [pc, #140]	; (800863c <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80085ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80085b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80085b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80085ba:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80085be:	9201      	str	r2, [sp, #4]
 80085c0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80085c6:	f042 0204 	orr.w	r2, r2, #4
 80085ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80085ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80085d2:	f002 0204 	and.w	r2, r2, #4
 80085d6:	9202      	str	r2, [sp, #8]
 80085d8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80085da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80085de:	f042 0208 	orr.w	r2, r2, #8
 80085e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80085e6:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80085ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80085ee:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80085f6:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80085f8:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085fa:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80085fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008600:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008604:	f001 ffd6 	bl	800a5b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008608:	2302      	movs	r3, #2
 800860a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800860c:	a904      	add	r1, sp, #16
 800860e:	480c      	ldr	r0, [pc, #48]	; (8008640 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8008610:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008612:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008616:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800861a:	f001 ffcb 	bl	800a5b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800861e:	4622      	mov	r2, r4
 8008620:	4621      	mov	r1, r4
 8008622:	2031      	movs	r0, #49	; 0x31
 8008624:	f000 fb9e 	bl	8008d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8008628:	2031      	movs	r0, #49	; 0x31
 800862a:	f000 fbd9 	bl	8008de0 <HAL_NVIC_EnableIRQ>
}
 800862e:	b00b      	add	sp, #44	; 0x2c
 8008630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008632:	bf00      	nop
 8008634:	52007000 	.word	0x52007000
 8008638:	58024400 	.word	0x58024400
 800863c:	58020800 	.word	0x58020800
 8008640:	58020c00 	.word	0x58020c00
 8008644:	00000000 	.word	0x00000000

08008648 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008648:	4813      	ldr	r0, [pc, #76]	; (8008698 <MX_SPI1_Init+0x50>)
 800864a:	4a14      	ldr	r2, [pc, #80]	; (800869c <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800864c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008690 <MX_SPI1_Init+0x48>
{
 8008650:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8008652:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 8008654:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008656:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8008658:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800865a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800865c:	ed80 7b08 	vstr	d7, [r0, #32]
 8008660:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008664:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008668:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800866c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008670:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008674:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008678:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800867c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008680:	f006 fd1e 	bl	800f0c0 <HAL_SPI_Init>
 8008684:	b900      	cbnz	r0, 8008688 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008686:	bd08      	pop	{r3, pc}
 8008688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800868c:	f7ff be2c 	b.w	80082e8 <Error_Handler>
	...
 8008698:	20019578 	.word	0x20019578
 800869c:	40013000 	.word	0x40013000

080086a0 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80086a0:	4813      	ldr	r0, [pc, #76]	; (80086f0 <MX_SPI2_Init+0x50>)
 80086a2:	4a14      	ldr	r2, [pc, #80]	; (80086f4 <MX_SPI2_Init+0x54>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80086a4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80086e8 <MX_SPI2_Init+0x48>
{
 80086a8:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80086aa:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 80086ac:	6002      	str	r2, [r0, #0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80086ae:	2207      	movs	r2, #7
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80086b0:	6183      	str	r3, [r0, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80086b2:	60c2      	str	r2, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80086b4:	ed80 7b08 	vstr	d7, [r0, #32]
 80086b8:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80086bc:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80086c0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80086c4:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80086c8:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80086cc:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80086d0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80086d4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80086d8:	f006 fcf2 	bl	800f0c0 <HAL_SPI_Init>
 80086dc:	b900      	cbnz	r0, 80086e0 <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80086de:	bd08      	pop	{r3, pc}
 80086e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80086e4:	f7ff be00 	b.w	80082e8 <Error_Handler>
	...
 80086f0:	20019600 	.word	0x20019600
 80086f4:	40003800 	.word	0x40003800

080086f8 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80086f8:	4813      	ldr	r0, [pc, #76]	; (8008748 <MX_SPI5_Init+0x50>)
 80086fa:	4a14      	ldr	r2, [pc, #80]	; (800874c <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80086fc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008740 <MX_SPI5_Init+0x48>
{
 8008700:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8008702:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 8008704:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8008706:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8008708:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800870a:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800870c:	ed80 7b08 	vstr	d7, [r0, #32]
 8008710:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8008714:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008718:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800871c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008720:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008724:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008728:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800872c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008730:	f006 fcc6 	bl	800f0c0 <HAL_SPI_Init>
 8008734:	b900      	cbnz	r0, 8008738 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8008736:	bd08      	pop	{r3, pc}
 8008738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800873c:	f7ff bdd4 	b.w	80082e8 <Error_Handler>
	...
 8008748:	20019688 	.word	0x20019688
 800874c:	40015000 	.word	0x40015000

08008750 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008750:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008752:	2400      	movs	r4, #0
{
 8008754:	b0bd      	sub	sp, #244	; 0xf4
 8008756:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008758:	22c0      	movs	r2, #192	; 0xc0
 800875a:	4621      	mov	r1, r4
 800875c:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800875e:	940a      	str	r4, [sp, #40]	; 0x28
 8008760:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8008764:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008768:	f014 fbd4 	bl	801cf14 <memset>
  if(spiHandle->Instance==SPI1)
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	4aa2      	ldr	r2, [pc, #648]	; (80089f8 <HAL_SPI_MspInit+0x2a8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d008      	beq.n	8008786 <HAL_SPI_MspInit+0x36>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8008774:	4aa1      	ldr	r2, [pc, #644]	; (80089fc <HAL_SPI_MspInit+0x2ac>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d076      	beq.n	8008868 <HAL_SPI_MspInit+0x118>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 800877a:	4aa1      	ldr	r2, [pc, #644]	; (8008a00 <HAL_SPI_MspInit+0x2b0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	f000 80ce 	beq.w	800891e <HAL_SPI_MspInit+0x1ce>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8008782:	b03d      	add	sp, #244	; 0xf4
 8008784:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008786:	4b9f      	ldr	r3, [pc, #636]	; (8008a04 <HAL_SPI_MspInit+0x2b4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008788:	a906      	add	r1, sp, #24
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800878a:	4e9f      	ldr	r6, [pc, #636]	; (8008a08 <HAL_SPI_MspInit+0x2b8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800878c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008790:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008794:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8008798:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800879c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80087a0:	9200      	str	r2, [sp, #0]
 80087a2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80087a8:	f042 0201 	orr.w	r2, r2, #1
 80087ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80087b0:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80087bc:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087be:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087c0:	4892      	ldr	r0, [pc, #584]	; (8008a0c <HAL_SPI_MspInit+0x2bc>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80087c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80087c6:	2203      	movs	r2, #3
 80087c8:	2305      	movs	r3, #5
 80087ca:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087ce:	f001 fef1 	bl	800a5b4 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80087d2:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80087d4:	4a8e      	ldr	r2, [pc, #568]	; (8008a10 <HAL_SPI_MspInit+0x2c0>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80087d6:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80087d8:	6073      	str	r3, [r6, #4]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80087da:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80087de:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80087e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087e4:	60b4      	str	r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087e6:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80087e8:	62f4      	str	r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80087ea:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80087ec:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80087f0:	2304      	movs	r3, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80087f2:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80087f6:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80087f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80087fc:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80087fe:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008800:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008802:	f000 fc41 	bl	8009088 <HAL_DMA_Init>
 8008806:	2800      	cmp	r0, #0
 8008808:	f040 80e9 	bne.w	80089de <HAL_SPI_MspInit+0x28e>
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800880c:	4c81      	ldr	r4, [pc, #516]	; (8008a14 <HAL_SPI_MspInit+0x2c4>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800880e:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8008810:	4981      	ldr	r1, [pc, #516]	; (8008a18 <HAL_SPI_MspInit+0x2c8>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008812:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8008814:	6062      	str	r2, [r4, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008816:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800881a:	6021      	str	r1, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800881c:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800881e:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008820:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008824:	60e3      	str	r3, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008826:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008828:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800882a:	60a1      	str	r1, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800882c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008830:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8008832:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008834:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008836:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008838:	6222      	str	r2, [r4, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800883a:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800883c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800883e:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8008840:	61e1      	str	r1, [r4, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008842:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008846:	f000 fc1f 	bl	8009088 <HAL_DMA_Init>
 800884a:	2800      	cmp	r0, #0
 800884c:	f040 80c4 	bne.w	80089d8 <HAL_SPI_MspInit+0x288>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8008850:	2200      	movs	r2, #0
 8008852:	2102      	movs	r1, #2
 8008854:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8008856:	67ac      	str	r4, [r5, #120]	; 0x78
 8008858:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800885a:	f000 fa83 	bl	8008d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800885e:	2023      	movs	r0, #35	; 0x23
 8008860:	f000 fabe 	bl	8008de0 <HAL_NVIC_EnableIRQ>
}
 8008864:	b03d      	add	sp, #244	; 0xf4
 8008866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008868:	4b66      	ldr	r3, [pc, #408]	; (8008a04 <HAL_SPI_MspInit+0x2b4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800886a:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800886c:	486b      	ldr	r0, [pc, #428]	; (8008a1c <HAL_SPI_MspInit+0x2cc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800886e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8008872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008876:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800887a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800887e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008882:	9202      	str	r2, [sp, #8]
 8008884:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008886:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800888a:	f042 0202 	orr.w	r2, r2, #2
 800888e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8008892:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80088a0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088a2:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088a4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80088a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088b0:	f001 fe80 	bl	800a5b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80088b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088b8:	4858      	ldr	r0, [pc, #352]	; (8008a1c <HAL_SPI_MspInit+0x2cc>)
 80088ba:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80088bc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088be:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80088c0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088c2:	9307      	str	r3, [sp, #28]
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80088c4:	4e56      	ldr	r6, [pc, #344]	; (8008a20 <HAL_SPI_MspInit+0x2d0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80088c6:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088ca:	f001 fe73 	bl	800a5b4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80088ce:	4a55      	ldr	r2, [pc, #340]	; (8008a24 <HAL_SPI_MspInit+0x2d4>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80088d0:	2327      	movs	r3, #39	; 0x27
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80088d2:	4630      	mov	r0, r6
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80088d4:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80088d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80088dc:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80088e0:	6132      	str	r2, [r6, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80088e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80088e6:	61f3      	str	r3, [r6, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80088e8:	2304      	movs	r3, #4
 80088ea:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80088ee:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80088f0:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80088f4:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80088f8:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80088fc:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80088fe:	f000 fbc3 	bl	8009088 <HAL_DMA_Init>
 8008902:	2800      	cmp	r0, #0
 8008904:	d16e      	bne.n	80089e4 <HAL_SPI_MspInit+0x294>
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8008906:	2200      	movs	r2, #0
 8008908:	2103      	movs	r1, #3
 800890a:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800890c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800890e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8008910:	f000 fa28 	bl	8008d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008914:	2024      	movs	r0, #36	; 0x24
 8008916:	f000 fa63 	bl	8008de0 <HAL_NVIC_EnableIRQ>
}
 800891a:	b03d      	add	sp, #244	; 0xf4
 800891c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800891e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008922:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008924:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8008926:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800892a:	f003 fd23 	bl	800c374 <HAL_RCCEx_PeriphCLKConfig>
 800892e:	2800      	cmp	r0, #0
 8008930:	d15e      	bne.n	80089f0 <HAL_SPI_MspInit+0x2a0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008932:	4b34      	ldr	r3, [pc, #208]	; (8008a04 <HAL_SPI_MspInit+0x2b4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008934:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8008936:	f44f 7130 	mov.w	r1, #704	; 0x2c0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800893a:	2600      	movs	r6, #0
    __HAL_RCC_SPI5_CLK_ENABLE();
 800893c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008940:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008942:	4839      	ldr	r0, [pc, #228]	; (8008a28 <HAL_SPI_MspInit+0x2d8>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008944:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008948:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800894c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008950:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008954:	9204      	str	r2, [sp, #16]
 8008956:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008958:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800895c:	f042 0220 	orr.w	r2, r2, #32
 8008960:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008968:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800896a:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800896e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008970:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008972:	9305      	str	r3, [sp, #20]
 8008974:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008976:	e9cd 1406 	strd	r1, r4, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800897a:	a906      	add	r1, sp, #24
 800897c:	f001 fe1a 	bl	800a5b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008980:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008984:	4828      	ldr	r0, [pc, #160]	; (8008a28 <HAL_SPI_MspInit+0x2d8>)
 8008986:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008988:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800898a:	9306      	str	r3, [sp, #24]
    hdma_spi5_rx.Instance = DMA1_Stream3;
 800898c:	4c27      	ldr	r4, [pc, #156]	; (8008a2c <HAL_SPI_MspInit+0x2dc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800898e:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008990:	e9cd 6608 	strd	r6, r6, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008994:	f001 fe0e 	bl	800a5b4 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8008998:	4a25      	ldr	r2, [pc, #148]	; (8008a30 <HAL_SPI_MspInit+0x2e0>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 800899a:	2355      	movs	r3, #85	; 0x55
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 800899c:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800899e:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 80089a0:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80089a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80089a8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089ac:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089b0:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80089b4:	6122      	str	r2, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80089b6:	e9c4 6307 	strd	r6, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80089ba:	f000 fb65 	bl	8009088 <HAL_DMA_Init>
 80089be:	b9a0      	cbnz	r0, 80089ea <HAL_SPI_MspInit+0x29a>
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 80089c0:	2200      	movs	r2, #0
 80089c2:	2104      	movs	r1, #4
 80089c4:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 80089c6:	67ec      	str	r4, [r5, #124]	; 0x7c
 80089c8:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 80089ca:	f000 f9cb 	bl	8008d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80089ce:	2055      	movs	r0, #85	; 0x55
 80089d0:	f000 fa06 	bl	8008de0 <HAL_NVIC_EnableIRQ>
}
 80089d4:	b03d      	add	sp, #244	; 0xf4
 80089d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80089d8:	f7ff fc86 	bl	80082e8 <Error_Handler>
 80089dc:	e738      	b.n	8008850 <HAL_SPI_MspInit+0x100>
      Error_Handler();
 80089de:	f7ff fc83 	bl	80082e8 <Error_Handler>
 80089e2:	e713      	b.n	800880c <HAL_SPI_MspInit+0xbc>
      Error_Handler();
 80089e4:	f7ff fc80 	bl	80082e8 <Error_Handler>
 80089e8:	e78d      	b.n	8008906 <HAL_SPI_MspInit+0x1b6>
      Error_Handler();
 80089ea:	f7ff fc7d 	bl	80082e8 <Error_Handler>
 80089ee:	e7e7      	b.n	80089c0 <HAL_SPI_MspInit+0x270>
      Error_Handler();
 80089f0:	f7ff fc7a 	bl	80082e8 <Error_Handler>
 80089f4:	e79d      	b.n	8008932 <HAL_SPI_MspInit+0x1e2>
 80089f6:	bf00      	nop
 80089f8:	40013000 	.word	0x40013000
 80089fc:	40003800 	.word	0x40003800
 8008a00:	40015000 	.word	0x40015000
 8008a04:	58024400 	.word	0x58024400
 8008a08:	20019394 	.word	0x20019394
 8008a0c:	58020000 	.word	0x58020000
 8008a10:	40020070 	.word	0x40020070
 8008a14:	2001940c 	.word	0x2001940c
 8008a18:	40020088 	.word	0x40020088
 8008a1c:	58020400 	.word	0x58020400
 8008a20:	20019484 	.word	0x20019484
 8008a24:	40020010 	.word	0x40020010
 8008a28:	58021400 	.word	0x58021400
 8008a2c:	200194fc 	.word	0x200194fc
 8008a30:	40020058 	.word	0x40020058

08008a34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a34:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <HAL_MspInit+0x20>)
{
 8008a36:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a38:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8008a3c:	f042 0202 	orr.w	r2, r2, #2
 8008a40:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8008a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a50:	b002      	add	sp, #8
 8008a52:	4770      	bx	lr
 8008a54:	58024400 	.word	0x58024400

08008a58 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008a58:	e7fe      	b.n	8008a58 <NMI_Handler>
 8008a5a:	bf00      	nop

08008a5c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a5c:	e7fe      	b.n	8008a5c <HardFault_Handler>
 8008a5e:	bf00      	nop

08008a60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a60:	e7fe      	b.n	8008a60 <MemManage_Handler>
 8008a62:	bf00      	nop

08008a64 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a64:	e7fe      	b.n	8008a64 <BusFault_Handler>
 8008a66:	bf00      	nop

08008a68 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a68:	e7fe      	b.n	8008a68 <UsageFault_Handler>
 8008a6a:	bf00      	nop

08008a6c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop

08008a70 <DebugMon_Handler>:
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop

08008a74 <PendSV_Handler>:
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop

08008a78 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008a78:	f000 b92e 	b.w	8008cd8 <HAL_IncTick>

08008a7c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008a7c:	4801      	ldr	r0, [pc, #4]	; (8008a84 <DMA1_Stream0_IRQHandler+0x8>)
 8008a7e:	f001 b959 	b.w	8009d34 <HAL_DMA_IRQHandler>
 8008a82:	bf00      	nop
 8008a84:	20019484 	.word	0x20019484

08008a88 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8008a88:	4801      	ldr	r0, [pc, #4]	; (8008a90 <DMA1_Stream1_IRQHandler+0x8>)
 8008a8a:	f001 b953 	b.w	8009d34 <HAL_DMA_IRQHandler>
 8008a8e:	bf00      	nop
 8008a90:	200190f8 	.word	0x200190f8

08008a94 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8008a94:	4801      	ldr	r0, [pc, #4]	; (8008a9c <DMA1_Stream2_IRQHandler+0x8>)
 8008a96:	f001 b94d 	b.w	8009d34 <HAL_DMA_IRQHandler>
 8008a9a:	bf00      	nop
 8008a9c:	20019170 	.word	0x20019170

08008aa0 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8008aa0:	4801      	ldr	r0, [pc, #4]	; (8008aa8 <DMA1_Stream3_IRQHandler+0x8>)
 8008aa2:	f001 b947 	b.w	8009d34 <HAL_DMA_IRQHandler>
 8008aa6:	bf00      	nop
 8008aa8:	200194fc 	.word	0x200194fc

08008aac <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8008aac:	4801      	ldr	r0, [pc, #4]	; (8008ab4 <DMA1_Stream4_IRQHandler+0x8>)
 8008aae:	f001 b941 	b.w	8009d34 <HAL_DMA_IRQHandler>
 8008ab2:	bf00      	nop
 8008ab4:	20019394 	.word	0x20019394

08008ab8 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8008ab8:	4801      	ldr	r0, [pc, #4]	; (8008ac0 <DMA1_Stream5_IRQHandler+0x8>)
 8008aba:	f001 b93b 	b.w	8009d34 <HAL_DMA_IRQHandler>
 8008abe:	bf00      	nop
 8008ac0:	2001940c 	.word	0x2001940c

08008ac4 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8008ac4:	4801      	ldr	r0, [pc, #4]	; (8008acc <I2C2_EV_IRQHandler+0x8>)
 8008ac6:	f002 b9bb 	b.w	800ae40 <HAL_I2C_EV_IRQHandler>
 8008aca:	bf00      	nop
 8008acc:	20012ff4 	.word	0x20012ff4

08008ad0 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8008ad0:	4801      	ldr	r0, [pc, #4]	; (8008ad8 <I2C2_ER_IRQHandler+0x8>)
 8008ad2:	f002 bb31 	b.w	800b138 <HAL_I2C_ER_IRQHandler>
 8008ad6:	bf00      	nop
 8008ad8:	20012ff4 	.word	0x20012ff4

08008adc <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008adc:	4801      	ldr	r0, [pc, #4]	; (8008ae4 <SPI1_IRQHandler+0x8>)
 8008ade:	f006 be75 	b.w	800f7cc <HAL_SPI_IRQHandler>
 8008ae2:	bf00      	nop
 8008ae4:	20019578 	.word	0x20019578

08008ae8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008ae8:	4801      	ldr	r0, [pc, #4]	; (8008af0 <SPI2_IRQHandler+0x8>)
 8008aea:	f006 be6f 	b.w	800f7cc <HAL_SPI_IRQHandler>
 8008aee:	bf00      	nop
 8008af0:	20019600 	.word	0x20019600

08008af4 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8008af4:	4801      	ldr	r0, [pc, #4]	; (8008afc <SDMMC1_IRQHandler+0x8>)
 8008af6:	f006 b8e5 	b.w	800ecc4 <HAL_SD_IRQHandler>
 8008afa:	bf00      	nop
 8008afc:	20019318 	.word	0x20019318

08008b00 <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8008b00:	4801      	ldr	r0, [pc, #4]	; (8008b08 <SPI5_IRQHandler+0x8>)
 8008b02:	f006 be63 	b.w	800f7cc <HAL_SPI_IRQHandler>
 8008b06:	bf00      	nop
 8008b08:	20019688 	.word	0x20019688

08008b0c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008b0c:	4927      	ldr	r1, [pc, #156]	; (8008bac <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b0e:	4a28      	ldr	r2, [pc, #160]	; (8008bb0 <SystemInit+0xa4>)
{
 8008b10:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008b12:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008b16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b1e:	6813      	ldr	r3, [r2, #0]
 8008b20:	f003 030f 	and.w	r3, r3, #15
 8008b24:	2b06      	cmp	r3, #6
 8008b26:	d805      	bhi.n	8008b34 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b28:	6813      	ldr	r3, [r2, #0]
 8008b2a:	f023 030f 	bic.w	r3, r3, #15
 8008b2e:	f043 0307 	orr.w	r3, r3, #7
 8008b32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008b34:	4b1f      	ldr	r3, [pc, #124]	; (8008bb4 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b36:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008b38:	4a1f      	ldr	r2, [pc, #124]	; (8008bb8 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8008b3a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b3c:	481c      	ldr	r0, [pc, #112]	; (8008bb0 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8008b3e:	f041 0101 	orr.w	r1, r1, #1
 8008b42:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8008b44:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8008b46:	6819      	ldr	r1, [r3, #0]
 8008b48:	400a      	ands	r2, r1
 8008b4a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b4c:	6803      	ldr	r3, [r0, #0]
 8008b4e:	071b      	lsls	r3, r3, #28
 8008b50:	d505      	bpl.n	8008b5e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b52:	6803      	ldr	r3, [r0, #0]
 8008b54:	f023 030f 	bic.w	r3, r3, #15
 8008b58:	f043 0307 	orr.w	r3, r3, #7
 8008b5c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008b5e:	4b15      	ldr	r3, [pc, #84]	; (8008bb4 <SystemInit+0xa8>)
 8008b60:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008b62:	4916      	ldr	r1, [pc, #88]	; (8008bbc <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8008b64:	4c16      	ldr	r4, [pc, #88]	; (8008bc0 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8008b66:	4817      	ldr	r0, [pc, #92]	; (8008bc4 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8008b68:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8008b6a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8008b6c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8008b6e:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8008b70:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8008b72:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008b74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008b76:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008b78:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008b7a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008b7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008b7e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008b80:	4c11      	ldr	r4, [pc, #68]	; (8008bc8 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8008b82:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008b86:	4911      	ldr	r1, [pc, #68]	; (8008bcc <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8008b88:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8008b8a:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	4019      	ands	r1, r3
 8008b90:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008b94:	d203      	bcs.n	8008b9e <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8008b96:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <SystemInit+0xc4>)
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008b9e:	4b0d      	ldr	r3, [pc, #52]	; (8008bd4 <SystemInit+0xc8>)
 8008ba0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008ba4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	e000ed00 	.word	0xe000ed00
 8008bb0:	52002000 	.word	0x52002000
 8008bb4:	58024400 	.word	0x58024400
 8008bb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8008bbc:	01010280 	.word	0x01010280
 8008bc0:	02020200 	.word	0x02020200
 8008bc4:	01ff0000 	.word	0x01ff0000
 8008bc8:	5c001000 	.word	0x5c001000
 8008bcc:	ffff0000 	.word	0xffff0000
 8008bd0:	51008000 	.word	0x51008000
 8008bd4:	52004000 	.word	0x52004000

08008bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack      /* set stack pointer */
 8008bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008c10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008bdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008bde:	e003      	b.n	8008be8 <LoopCopyDataInit>

08008be0 <CopyDataInit>:


CopyDataInit:
  ldr  r3, =_sidata
 8008be0:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008be2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008be4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008be6:	3104      	adds	r1, #4

08008be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8008be8:	480b      	ldr	r0, [pc, #44]	; (8008c18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008bea:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008bec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008bee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008bf0:	d3f6      	bcc.n	8008be0 <CopyDataInit>
  ldr  r2, =_sbss
 8008bf2:	4a0b      	ldr	r2, [pc, #44]	; (8008c20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008bf4:	e002      	b.n	8008bfc <LoopFillZerobss>

08008bf6 <FillZerobss>:



/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8008bf6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008bf8:	f842 3b04 	str.w	r3, [r2], #4

08008bfc <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8008bfc:	4b09      	ldr	r3, [pc, #36]	; (8008c24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008bfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008c00:	d3f9      	bcc.n	8008bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008c02:	f7ff ff83 	bl	8008b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c06:	f014 f98d 	bl	801cf24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008c0a:	f7ff f911 	bl	8007e30 <main>
  bx  lr
 8008c0e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8008c10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008c14:	08038348 	.word	0x08038348
  ldr  r0, =_sdata
 8008c18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008c1c:	200007d8 	.word	0x200007d8
  ldr  r2, =_sbss
 8008c20:	200007d8 	.word	0x200007d8
  ldr  r3, = _ebss
 8008c24:	20019eec 	.word	0x20019eec

08008c28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008c28:	e7fe      	b.n	8008c28 <ADC3_IRQHandler>
	...

08008c2c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008c2c:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <HAL_InitTick+0x40>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	b90b      	cbnz	r3, 8008c36 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8008c32:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8008c34:	4770      	bx	lr
{
 8008c36:	b510      	push	{r4, lr}
 8008c38:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008c3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c3e:	4a0c      	ldr	r2, [pc, #48]	; (8008c70 <HAL_InitTick+0x44>)
 8008c40:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c44:	6810      	ldr	r0, [r2, #0]
 8008c46:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c4a:	f000 f8d7 	bl	8008dfc <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c4e:	2c0f      	cmp	r4, #15
 8008c50:	d800      	bhi.n	8008c54 <HAL_InitTick+0x28>
 8008c52:	b108      	cbz	r0, 8008c58 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8008c54:	2001      	movs	r0, #1
}
 8008c56:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008c58:	2200      	movs	r2, #0
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c60:	f000 f880 	bl	8008d64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008c64:	4b03      	ldr	r3, [pc, #12]	; (8008c74 <HAL_InitTick+0x48>)
 8008c66:	2000      	movs	r0, #0
 8008c68:	601c      	str	r4, [r3, #0]
}
 8008c6a:	bd10      	pop	{r4, pc}
 8008c6c:	200006f0 	.word	0x200006f0
 8008c70:	200006e8 	.word	0x200006e8
 8008c74:	200006f4 	.word	0x200006f4

08008c78 <HAL_Init>:
{
 8008c78:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c7a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c7c:	4c12      	ldr	r4, [pc, #72]	; (8008cc8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c7e:	f000 f85f 	bl	8008d40 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c82:	f003 f825 	bl	800bcd0 <HAL_RCC_GetSysClockFreq>
 8008c86:	4b11      	ldr	r3, [pc, #68]	; (8008ccc <HAL_Init+0x54>)
 8008c88:	4911      	ldr	r1, [pc, #68]	; (8008cd0 <HAL_Init+0x58>)
 8008c8a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c8c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c8e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c92:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c96:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c98:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c9a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8008c9e:	490d      	ldr	r1, [pc, #52]	; (8008cd4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ca0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ca4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ca6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8008caa:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008cac:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cae:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008cb0:	f7ff ffbc 	bl	8008c2c <HAL_InitTick>
 8008cb4:	b110      	cbz	r0, 8008cbc <HAL_Init+0x44>
    return HAL_ERROR;
 8008cb6:	2401      	movs	r4, #1
}
 8008cb8:	4620      	mov	r0, r4
 8008cba:	bd10      	pop	{r4, pc}
 8008cbc:	4604      	mov	r4, r0
  HAL_MspInit();
 8008cbe:	f7ff feb9 	bl	8008a34 <HAL_MspInit>
}
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	bd10      	pop	{r4, pc}
 8008cc6:	bf00      	nop
 8008cc8:	200006ec 	.word	0x200006ec
 8008ccc:	58024400 	.word	0x58024400
 8008cd0:	0801f474 	.word	0x0801f474
 8008cd4:	200006e8 	.word	0x200006e8

08008cd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8008cd8:	4a03      	ldr	r2, [pc, #12]	; (8008ce8 <HAL_IncTick+0x10>)
 8008cda:	4b04      	ldr	r3, [pc, #16]	; (8008cec <HAL_IncTick+0x14>)
 8008cdc:	6811      	ldr	r1, [r2, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	440b      	add	r3, r1
 8008ce2:	6013      	str	r3, [r2, #0]
}
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	20019710 	.word	0x20019710
 8008cec:	200006f0 	.word	0x200006f0

08008cf0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008cf0:	4b01      	ldr	r3, [pc, #4]	; (8008cf8 <HAL_GetTick+0x8>)
 8008cf2:	6818      	ldr	r0, [r3, #0]
}
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	20019710 	.word	0x20019710

08008cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008d00:	f7ff fff6 	bl	8008cf0 <HAL_GetTick>
 8008d04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008d06:	1c63      	adds	r3, r4, #1
 8008d08:	d002      	beq.n	8008d10 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8008d0a:	4b04      	ldr	r3, [pc, #16]	; (8008d1c <HAL_Delay+0x20>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008d10:	f7ff ffee 	bl	8008cf0 <HAL_GetTick>
 8008d14:	1b43      	subs	r3, r0, r5
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	d3fa      	bcc.n	8008d10 <HAL_Delay+0x14>
  {
  }
}
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	200006f0 	.word	0x200006f0

08008d20 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8008d20:	4b01      	ldr	r3, [pc, #4]	; (8008d28 <HAL_GetREVID+0x8>)
 8008d22:	6818      	ldr	r0, [r3, #0]
}
 8008d24:	0c00      	lsrs	r0, r0, #16
 8008d26:	4770      	bx	lr
 8008d28:	5c001000 	.word	0x5c001000

08008d2c <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8008d2c:	4a03      	ldr	r2, [pc, #12]	; (8008d3c <HAL_SetFMCMemorySwappingConfig+0x10>)
 8008d2e:	6813      	ldr	r3, [r2, #0]
 8008d30:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8008d34:	4318      	orrs	r0, r3
 8008d36:	6010      	str	r0, [r2, #0]
}
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	52004000 	.word	0x52004000

08008d40 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d40:	4906      	ldr	r1, [pc, #24]	; (8008d5c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d42:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008d46:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8008d48:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d4a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008d4c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d50:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008d54:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8008d56:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008d58:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008d5a:	4770      	bx	lr
 8008d5c:	e000ed00 	.word	0xe000ed00
 8008d60:	05fa0000 	.word	0x05fa0000

08008d64 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d64:	4b1b      	ldr	r3, [pc, #108]	; (8008dd4 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d66:	b500      	push	{lr}
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d6e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d72:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d76:	f1be 0f04 	cmp.w	lr, #4
 8008d7a:	bf28      	it	cs
 8008d7c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d80:	f1bc 0f06 	cmp.w	ip, #6
 8008d84:	d91a      	bls.n	8008dbc <HAL_NVIC_SetPriority+0x58>
 8008d86:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d88:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008d8c:	fa0c fc03 	lsl.w	ip, ip, r3
 8008d90:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8008d98:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d9a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008d9e:	ea21 010c 	bic.w	r1, r1, ip
 8008da2:	fa01 f103 	lsl.w	r1, r1, r3
 8008da6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8008daa:	db0a      	blt.n	8008dc2 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dac:	0109      	lsls	r1, r1, #4
 8008dae:	4b0a      	ldr	r3, [pc, #40]	; (8008dd8 <HAL_NVIC_SetPriority+0x74>)
 8008db0:	b2c9      	uxtb	r1, r1
 8008db2:	4403      	add	r3, r0
 8008db4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008db8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008dbc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	e7e8      	b.n	8008d94 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dc2:	f000 000f 	and.w	r0, r0, #15
 8008dc6:	0109      	lsls	r1, r1, #4
 8008dc8:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <HAL_NVIC_SetPriority+0x78>)
 8008dca:	b2c9      	uxtb	r1, r1
 8008dcc:	4403      	add	r3, r0
 8008dce:	7619      	strb	r1, [r3, #24]
 8008dd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008dd4:	e000ed00 	.word	0xe000ed00
 8008dd8:	e000e100 	.word	0xe000e100
 8008ddc:	e000ecfc 	.word	0xe000ecfc

08008de0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008de0:	2800      	cmp	r0, #0
 8008de2:	db07      	blt.n	8008df4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008de4:	2301      	movs	r3, #1
 8008de6:	f000 011f 	and.w	r1, r0, #31
 8008dea:	4a03      	ldr	r2, [pc, #12]	; (8008df8 <HAL_NVIC_EnableIRQ+0x18>)
 8008dec:	0940      	lsrs	r0, r0, #5
 8008dee:	408b      	lsls	r3, r1
 8008df0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	e000e100 	.word	0xe000e100

08008dfc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008dfc:	1e43      	subs	r3, r0, #1
 8008dfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e02:	d20c      	bcs.n	8008e1e <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e04:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e08:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e0a:	4906      	ldr	r1, [pc, #24]	; (8008e24 <HAL_SYSTICK_Config+0x28>)
 8008e0c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e10:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e12:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e14:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e18:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e1a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e1c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008e1e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	e000ed00 	.word	0xe000ed00

08008e28 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8008e28:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008e2c:	4b04      	ldr	r3, [pc, #16]	; (8008e40 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008e2e:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e36:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8008e38:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	e000ed00 	.word	0xe000ed00

08008e44 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008e44:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <HAL_MPU_Enable+0x1c>)
 8008e46:	f040 0001 	orr.w	r0, r0, #1
 8008e4a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e54:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008e56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008e5a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008e5e:	4770      	bx	lr
 8008e60:	e000ed00 	.word	0xe000ed00

08008e64 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008e64:	7843      	ldrb	r3, [r0, #1]
 8008e66:	4a16      	ldr	r2, [pc, #88]	; (8008ec0 <HAL_MPU_ConfigRegion+0x5c>)
 8008e68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8008e6c:	7803      	ldrb	r3, [r0, #0]
 8008e6e:	b313      	cbz	r3, 8008eb6 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8008e70:	6843      	ldr	r3, [r0, #4]
 8008e72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008e76:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008e78:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008e7c:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008e7e:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008e80:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008e84:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008e88:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008e8a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008e8c:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008e90:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008e94:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008e98:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008e9a:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008e9e:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008ea2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008ea6:	7a01      	ldrb	r1, [r0, #8]
 8008ea8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8008eac:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008eb0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8008eb4:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8008eb6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8008eba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 8008ebe:	4770      	bx	lr
 8008ec0:	e000ed00 	.word	0xe000ed00

08008ec4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ec4:	4b33      	ldr	r3, [pc, #204]	; (8008f94 <DMA_CalcBaseAndBitshift+0xd0>)
{
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008eca:	4e33      	ldr	r6, [pc, #204]	; (8008f98 <DMA_CalcBaseAndBitshift+0xd4>)
 8008ecc:	6802      	ldr	r2, [r0, #0]
 8008ece:	4d33      	ldr	r5, [pc, #204]	; (8008f9c <DMA_CalcBaseAndBitshift+0xd8>)
 8008ed0:	42b2      	cmp	r2, r6
 8008ed2:	bf18      	it	ne
 8008ed4:	429a      	cmpne	r2, r3
 8008ed6:	4c32      	ldr	r4, [pc, #200]	; (8008fa0 <DMA_CalcBaseAndBitshift+0xdc>)
 8008ed8:	4832      	ldr	r0, [pc, #200]	; (8008fa4 <DMA_CalcBaseAndBitshift+0xe0>)
 8008eda:	bf0c      	ite	eq
 8008edc:	2301      	moveq	r3, #1
 8008ede:	2300      	movne	r3, #0
 8008ee0:	42aa      	cmp	r2, r5
 8008ee2:	bf08      	it	eq
 8008ee4:	f043 0301 	orreq.w	r3, r3, #1
 8008ee8:	42a2      	cmp	r2, r4
 8008eea:	bf08      	it	eq
 8008eec:	f043 0301 	orreq.w	r3, r3, #1
 8008ef0:	3430      	adds	r4, #48	; 0x30
 8008ef2:	4282      	cmp	r2, r0
 8008ef4:	bf08      	it	eq
 8008ef6:	f043 0301 	orreq.w	r3, r3, #1
 8008efa:	3030      	adds	r0, #48	; 0x30
 8008efc:	42a2      	cmp	r2, r4
 8008efe:	bf08      	it	eq
 8008f00:	f043 0301 	orreq.w	r3, r3, #1
 8008f04:	3430      	adds	r4, #48	; 0x30
 8008f06:	4282      	cmp	r2, r0
 8008f08:	bf08      	it	eq
 8008f0a:	f043 0301 	orreq.w	r3, r3, #1
 8008f0e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8008f12:	42a2      	cmp	r2, r4
 8008f14:	bf08      	it	eq
 8008f16:	f043 0301 	orreq.w	r3, r3, #1
 8008f1a:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8008f1e:	4282      	cmp	r2, r0
 8008f20:	bf08      	it	eq
 8008f22:	f043 0301 	orreq.w	r3, r3, #1
 8008f26:	3030      	adds	r0, #48	; 0x30
 8008f28:	42a2      	cmp	r2, r4
 8008f2a:	bf08      	it	eq
 8008f2c:	f043 0301 	orreq.w	r3, r3, #1
 8008f30:	3430      	adds	r4, #48	; 0x30
 8008f32:	4282      	cmp	r2, r0
 8008f34:	bf08      	it	eq
 8008f36:	f043 0301 	orreq.w	r3, r3, #1
 8008f3a:	3030      	adds	r0, #48	; 0x30
 8008f3c:	42a2      	cmp	r2, r4
 8008f3e:	bf08      	it	eq
 8008f40:	f043 0301 	orreq.w	r3, r3, #1
 8008f44:	3430      	adds	r4, #48	; 0x30
 8008f46:	4282      	cmp	r2, r0
 8008f48:	bf08      	it	eq
 8008f4a:	f043 0301 	orreq.w	r3, r3, #1
 8008f4e:	3030      	adds	r0, #48	; 0x30
 8008f50:	42a2      	cmp	r2, r4
 8008f52:	bf08      	it	eq
 8008f54:	f043 0301 	orreq.w	r3, r3, #1
 8008f58:	4282      	cmp	r2, r0
 8008f5a:	bf08      	it	eq
 8008f5c:	f043 0301 	orreq.w	r3, r3, #1
 8008f60:	b913      	cbnz	r3, 8008f68 <DMA_CalcBaseAndBitshift+0xa4>
 8008f62:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <DMA_CalcBaseAndBitshift+0xe4>)
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d112      	bne.n	8008f8e <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f68:	b2d3      	uxtb	r3, r2
 8008f6a:	4810      	ldr	r0, [pc, #64]	; (8008fac <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008f6c:	4c10      	ldr	r4, [pc, #64]	; (8008fb0 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f6e:	3b10      	subs	r3, #16
 8008f70:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 8008f74:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f76:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008f7a:	5c20      	ldrb	r0, [r4, r0]
 8008f7c:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008f7e:	480d      	ldr	r0, [pc, #52]	; (8008fb4 <DMA_CalcBaseAndBitshift+0xf0>)
 8008f80:	ea00 0002 	and.w	r0, r0, r2
 8008f84:	bf88      	it	hi
 8008f86:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008f88:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8008f8a:	bc70      	pop	{r4, r5, r6}
 8008f8c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008f8e:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8008f92:	e7f9      	b.n	8008f88 <DMA_CalcBaseAndBitshift+0xc4>
 8008f94:	40020010 	.word	0x40020010
 8008f98:	40020028 	.word	0x40020028
 8008f9c:	40020040 	.word	0x40020040
 8008fa0:	40020058 	.word	0x40020058
 8008fa4:	40020070 	.word	0x40020070
 8008fa8:	400204b8 	.word	0x400204b8
 8008fac:	aaaaaaab 	.word	0xaaaaaaab
 8008fb0:	0801f484 	.word	0x0801f484
 8008fb4:	fffffc00 	.word	0xfffffc00

08008fb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008fb8:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008fba:	4a27      	ldr	r2, [pc, #156]	; (8009058 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8008fbc:	4927      	ldr	r1, [pc, #156]	; (800905c <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 8008fbe:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008fc0:	4d27      	ldr	r5, [pc, #156]	; (8009060 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8008fc2:	4c28      	ldr	r4, [pc, #160]	; (8009064 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8008fc4:	42ab      	cmp	r3, r5
 8008fc6:	bf18      	it	ne
 8008fc8:	4293      	cmpne	r3, r2
 8008fca:	bf0c      	ite	eq
 8008fcc:	2201      	moveq	r2, #1
 8008fce:	2200      	movne	r2, #0
 8008fd0:	428b      	cmp	r3, r1
 8008fd2:	bf08      	it	eq
 8008fd4:	f042 0201 	orreq.w	r2, r2, #1
 8008fd8:	3128      	adds	r1, #40	; 0x28
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	bf08      	it	eq
 8008fde:	f042 0201 	orreq.w	r2, r2, #1
 8008fe2:	3428      	adds	r4, #40	; 0x28
 8008fe4:	428b      	cmp	r3, r1
 8008fe6:	bf08      	it	eq
 8008fe8:	f042 0201 	orreq.w	r2, r2, #1
 8008fec:	3128      	adds	r1, #40	; 0x28
 8008fee:	42a3      	cmp	r3, r4
 8008ff0:	bf08      	it	eq
 8008ff2:	f042 0201 	orreq.w	r2, r2, #1
 8008ff6:	428b      	cmp	r3, r1
 8008ff8:	bf08      	it	eq
 8008ffa:	f042 0201 	orreq.w	r2, r2, #1
 8008ffe:	b912      	cbnz	r2, 8009006 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8009000:	4a19      	ldr	r2, [pc, #100]	; (8009068 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d113      	bne.n	800902e <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009006:	b2db      	uxtb	r3, r3
 8009008:	4918      	ldr	r1, [pc, #96]	; (800906c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800900a:	4a19      	ldr	r2, [pc, #100]	; (8009070 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800900c:	3b08      	subs	r3, #8
 800900e:	4c19      	ldr	r4, [pc, #100]	; (8009074 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8009010:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009014:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009016:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800901a:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800901e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009020:	fa01 f303 	lsl.w	r3, r1, r3
 8009024:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009026:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800902a:	bc30      	pop	{r4, r5}
 800902c:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800902e:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009030:	4a11      	ldr	r2, [pc, #68]	; (8009078 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009032:	4c12      	ldr	r4, [pc, #72]	; (800907c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8009034:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009036:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009038:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800903c:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800903e:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009042:	d800      	bhi.n	8009046 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8009044:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009046:	4a0e      	ldr	r2, [pc, #56]	; (8009080 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009048:	f001 041f 	and.w	r4, r1, #31
 800904c:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800904e:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009050:	40a3      	lsls	r3, r4
 8009052:	4c0c      	ldr	r4, [pc, #48]	; (8009084 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009054:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009056:	e7e5      	b.n	8009024 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8009058:	58025408 	.word	0x58025408
 800905c:	58025430 	.word	0x58025430
 8009060:	5802541c 	.word	0x5802541c
 8009064:	58025444 	.word	0x58025444
 8009068:	58025494 	.word	0x58025494
 800906c:	cccccccd 	.word	0xcccccccd
 8009070:	16009600 	.word	0x16009600
 8009074:	58025880 	.word	0x58025880
 8009078:	bffdfbf0 	.word	0xbffdfbf0
 800907c:	aaaaaaab 	.word	0xaaaaaaab
 8009080:	10008200 	.word	0x10008200
 8009084:	40020880 	.word	0x40020880

08009088 <HAL_DMA_Init>:
{
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800908c:	f7ff fe30 	bl	8008cf0 <HAL_GetTick>
  if(hdma == NULL)
 8009090:	2c00      	cmp	r4, #0
 8009092:	f000 816a 	beq.w	800936a <HAL_DMA_Init+0x2e2>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	4605      	mov	r5, r0
 800909a:	4ba3      	ldr	r3, [pc, #652]	; (8009328 <HAL_DMA_Init+0x2a0>)
 800909c:	429a      	cmp	r2, r3
 800909e:	d048      	beq.n	8009132 <HAL_DMA_Init+0xaa>
 80090a0:	3318      	adds	r3, #24
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d045      	beq.n	8009132 <HAL_DMA_Init+0xaa>
 80090a6:	3330      	adds	r3, #48	; 0x30
 80090a8:	49a0      	ldr	r1, [pc, #640]	; (800932c <HAL_DMA_Init+0x2a4>)
 80090aa:	428a      	cmp	r2, r1
 80090ac:	bf18      	it	ne
 80090ae:	429a      	cmpne	r2, r3
 80090b0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80090b4:	bf0c      	ite	eq
 80090b6:	2301      	moveq	r3, #1
 80090b8:	2300      	movne	r3, #0
 80090ba:	428a      	cmp	r2, r1
 80090bc:	bf08      	it	eq
 80090be:	f043 0301 	orreq.w	r3, r3, #1
 80090c2:	3118      	adds	r1, #24
 80090c4:	428a      	cmp	r2, r1
 80090c6:	bf08      	it	eq
 80090c8:	f043 0301 	orreq.w	r3, r3, #1
 80090cc:	3118      	adds	r1, #24
 80090ce:	428a      	cmp	r2, r1
 80090d0:	bf08      	it	eq
 80090d2:	f043 0301 	orreq.w	r3, r3, #1
 80090d6:	3118      	adds	r1, #24
 80090d8:	428a      	cmp	r2, r1
 80090da:	bf08      	it	eq
 80090dc:	f043 0301 	orreq.w	r3, r3, #1
 80090e0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80090e4:	428a      	cmp	r2, r1
 80090e6:	bf08      	it	eq
 80090e8:	f043 0301 	orreq.w	r3, r3, #1
 80090ec:	3118      	adds	r1, #24
 80090ee:	428a      	cmp	r2, r1
 80090f0:	bf08      	it	eq
 80090f2:	f043 0301 	orreq.w	r3, r3, #1
 80090f6:	3118      	adds	r1, #24
 80090f8:	428a      	cmp	r2, r1
 80090fa:	bf08      	it	eq
 80090fc:	f043 0301 	orreq.w	r3, r3, #1
 8009100:	3118      	adds	r1, #24
 8009102:	428a      	cmp	r2, r1
 8009104:	bf08      	it	eq
 8009106:	f043 0301 	orreq.w	r3, r3, #1
 800910a:	3118      	adds	r1, #24
 800910c:	428a      	cmp	r2, r1
 800910e:	bf08      	it	eq
 8009110:	f043 0301 	orreq.w	r3, r3, #1
 8009114:	3118      	adds	r1, #24
 8009116:	428a      	cmp	r2, r1
 8009118:	bf08      	it	eq
 800911a:	f043 0301 	orreq.w	r3, r3, #1
 800911e:	3118      	adds	r1, #24
 8009120:	428a      	cmp	r2, r1
 8009122:	bf08      	it	eq
 8009124:	f043 0301 	orreq.w	r3, r3, #1
 8009128:	b91b      	cbnz	r3, 8009132 <HAL_DMA_Init+0xaa>
 800912a:	4b81      	ldr	r3, [pc, #516]	; (8009330 <HAL_DMA_Init+0x2a8>)
 800912c:	429a      	cmp	r2, r3
 800912e:	f040 8184 	bne.w	800943a <HAL_DMA_Init+0x3b2>
    hdma->State = HAL_DMA_STATE_BUSY;
 8009132:	2302      	movs	r3, #2
 8009134:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8009138:	2300      	movs	r3, #0
 800913a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800913e:	6813      	ldr	r3, [r2, #0]
 8009140:	f023 0301 	bic.w	r3, r3, #1
 8009144:	6013      	str	r3, [r2, #0]
 8009146:	e005      	b.n	8009154 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009148:	f7ff fdd2 	bl	8008cf0 <HAL_GetTick>
 800914c:	1b43      	subs	r3, r0, r5
 800914e:	2b05      	cmp	r3, #5
 8009150:	f200 80fe 	bhi.w	8009350 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	07d0      	lsls	r0, r2, #31
 800915a:	d4f5      	bmi.n	8009148 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 800915c:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009160:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8009162:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009164:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009166:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009168:	430a      	orrs	r2, r1
 800916a:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800916c:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800916e:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009172:	69a1      	ldr	r1, [r4, #24]
 8009174:	ea42 0201 	orr.w	r2, r2, r1
 8009178:	69e1      	ldr	r1, [r4, #28]
 800917a:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 800917e:	6a21      	ldr	r1, [r4, #32]
 8009180:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009184:	496b      	ldr	r1, [pc, #428]	; (8009334 <HAL_DMA_Init+0x2ac>)
 8009186:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 800918a:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800918e:	d103      	bne.n	8009198 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009190:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8009194:	4301      	orrs	r1, r0
 8009196:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009198:	4867      	ldr	r0, [pc, #412]	; (8009338 <HAL_DMA_Init+0x2b0>)
 800919a:	4968      	ldr	r1, [pc, #416]	; (800933c <HAL_DMA_Init+0x2b4>)
 800919c:	6800      	ldr	r0, [r0, #0]
 800919e:	4001      	ands	r1, r0
 80091a0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80091a4:	d30a      	bcc.n	80091bc <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80091a6:	6861      	ldr	r1, [r4, #4]
 80091a8:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 80091ac:	281f      	cmp	r0, #31
 80091ae:	f240 80d6 	bls.w	800935e <HAL_DMA_Init+0x2d6>
 80091b2:	394f      	subs	r1, #79	; 0x4f
 80091b4:	2903      	cmp	r1, #3
 80091b6:	d801      	bhi.n	80091bc <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 80091b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80091bc:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80091be:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 80091c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80091c2:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80091c4:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80091c6:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80091ca:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80091ce:	d10e      	bne.n	80091ee <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80091d0:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 80091d4:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80091d6:	b150      	cbz	r0, 80091ee <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80091d8:	69a5      	ldr	r5, [r4, #24]
 80091da:	2d00      	cmp	r5, #0
 80091dc:	f040 8107 	bne.w	80093ee <HAL_DMA_Init+0x366>
    switch (hdma->Init.FIFOThreshold)
 80091e0:	2a01      	cmp	r2, #1
 80091e2:	f000 8125 	beq.w	8009430 <HAL_DMA_Init+0x3a8>
 80091e6:	f032 0202 	bics.w	r2, r2, #2
 80091ea:	f000 8108 	beq.w	80093fe <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80091ee:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80091f0:	4620      	mov	r0, r4
 80091f2:	f7ff fe67 	bl	8008ec4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80091f6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80091f8:	233f      	movs	r3, #63	; 0x3f
 80091fa:	f002 021f 	and.w	r2, r2, #31
 80091fe:	4093      	lsls	r3, r2
 8009200:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009202:	6822      	ldr	r2, [r4, #0]
 8009204:	4b48      	ldr	r3, [pc, #288]	; (8009328 <HAL_DMA_Init+0x2a0>)
 8009206:	484e      	ldr	r0, [pc, #312]	; (8009340 <HAL_DMA_Init+0x2b8>)
 8009208:	4948      	ldr	r1, [pc, #288]	; (800932c <HAL_DMA_Init+0x2a4>)
 800920a:	4282      	cmp	r2, r0
 800920c:	bf18      	it	ne
 800920e:	429a      	cmpne	r2, r3
 8009210:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8009214:	bf0c      	ite	eq
 8009216:	2301      	moveq	r3, #1
 8009218:	2300      	movne	r3, #0
 800921a:	428a      	cmp	r2, r1
 800921c:	bf08      	it	eq
 800921e:	f043 0301 	orreq.w	r3, r3, #1
 8009222:	3130      	adds	r1, #48	; 0x30
 8009224:	4282      	cmp	r2, r0
 8009226:	bf08      	it	eq
 8009228:	f043 0301 	orreq.w	r3, r3, #1
 800922c:	3030      	adds	r0, #48	; 0x30
 800922e:	428a      	cmp	r2, r1
 8009230:	bf08      	it	eq
 8009232:	f043 0301 	orreq.w	r3, r3, #1
 8009236:	3130      	adds	r1, #48	; 0x30
 8009238:	4282      	cmp	r2, r0
 800923a:	bf08      	it	eq
 800923c:	f043 0301 	orreq.w	r3, r3, #1
 8009240:	3030      	adds	r0, #48	; 0x30
 8009242:	428a      	cmp	r2, r1
 8009244:	bf08      	it	eq
 8009246:	f043 0301 	orreq.w	r3, r3, #1
 800924a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800924e:	4282      	cmp	r2, r0
 8009250:	bf08      	it	eq
 8009252:	f043 0301 	orreq.w	r3, r3, #1
 8009256:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800925a:	428a      	cmp	r2, r1
 800925c:	bf08      	it	eq
 800925e:	f043 0301 	orreq.w	r3, r3, #1
 8009262:	3130      	adds	r1, #48	; 0x30
 8009264:	4282      	cmp	r2, r0
 8009266:	bf08      	it	eq
 8009268:	f043 0301 	orreq.w	r3, r3, #1
 800926c:	3030      	adds	r0, #48	; 0x30
 800926e:	428a      	cmp	r2, r1
 8009270:	bf08      	it	eq
 8009272:	f043 0301 	orreq.w	r3, r3, #1
 8009276:	3130      	adds	r1, #48	; 0x30
 8009278:	4282      	cmp	r2, r0
 800927a:	bf08      	it	eq
 800927c:	f043 0301 	orreq.w	r3, r3, #1
 8009280:	3030      	adds	r0, #48	; 0x30
 8009282:	428a      	cmp	r2, r1
 8009284:	bf08      	it	eq
 8009286:	f043 0301 	orreq.w	r3, r3, #1
 800928a:	3130      	adds	r1, #48	; 0x30
 800928c:	4282      	cmp	r2, r0
 800928e:	bf08      	it	eq
 8009290:	f043 0301 	orreq.w	r3, r3, #1
 8009294:	3030      	adds	r0, #48	; 0x30
 8009296:	428a      	cmp	r2, r1
 8009298:	bf08      	it	eq
 800929a:	f043 0301 	orreq.w	r3, r3, #1
 800929e:	4929      	ldr	r1, [pc, #164]	; (8009344 <HAL_DMA_Init+0x2bc>)
 80092a0:	4282      	cmp	r2, r0
 80092a2:	bf08      	it	eq
 80092a4:	f043 0301 	orreq.w	r3, r3, #1
 80092a8:	4827      	ldr	r0, [pc, #156]	; (8009348 <HAL_DMA_Init+0x2c0>)
 80092aa:	428a      	cmp	r2, r1
 80092ac:	bf08      	it	eq
 80092ae:	f043 0301 	orreq.w	r3, r3, #1
 80092b2:	3128      	adds	r1, #40	; 0x28
 80092b4:	4282      	cmp	r2, r0
 80092b6:	bf08      	it	eq
 80092b8:	f043 0301 	orreq.w	r3, r3, #1
 80092bc:	3028      	adds	r0, #40	; 0x28
 80092be:	428a      	cmp	r2, r1
 80092c0:	bf08      	it	eq
 80092c2:	f043 0301 	orreq.w	r3, r3, #1
 80092c6:	3128      	adds	r1, #40	; 0x28
 80092c8:	4282      	cmp	r2, r0
 80092ca:	bf08      	it	eq
 80092cc:	f043 0301 	orreq.w	r3, r3, #1
 80092d0:	3028      	adds	r0, #40	; 0x28
 80092d2:	428a      	cmp	r2, r1
 80092d4:	bf08      	it	eq
 80092d6:	f043 0301 	orreq.w	r3, r3, #1
 80092da:	3128      	adds	r1, #40	; 0x28
 80092dc:	4282      	cmp	r2, r0
 80092de:	bf08      	it	eq
 80092e0:	f043 0301 	orreq.w	r3, r3, #1
 80092e4:	428a      	cmp	r2, r1
 80092e6:	bf08      	it	eq
 80092e8:	f043 0301 	orreq.w	r3, r3, #1
 80092ec:	b913      	cbnz	r3, 80092f4 <HAL_DMA_Init+0x26c>
 80092ee:	4b17      	ldr	r3, [pc, #92]	; (800934c <HAL_DMA_Init+0x2c4>)
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d113      	bne.n	800931c <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80092f4:	4620      	mov	r0, r4
 80092f6:	f7ff fe5f 	bl	8008fb8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80092fa:	68a3      	ldr	r3, [r4, #8]
 80092fc:	2b80      	cmp	r3, #128	; 0x80
 80092fe:	d036      	beq.n	800936e <HAL_DMA_Init+0x2e6>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009300:	7922      	ldrb	r2, [r4, #4]
 8009302:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009304:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009306:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 800930a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800930c:	6861      	ldr	r1, [r4, #4]
 800930e:	1e4b      	subs	r3, r1, #1
 8009310:	2b07      	cmp	r3, #7
 8009312:	d930      	bls.n	8009376 <HAL_DMA_Init+0x2ee>
      hdma->DMAmuxRequestGen = 0U;
 8009314:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8009316:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800931a:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800931c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800931e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009320:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8009322:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009326:	bd38      	pop	{r3, r4, r5, pc}
 8009328:	40020010 	.word	0x40020010
 800932c:	40020040 	.word	0x40020040
 8009330:	400204b8 	.word	0x400204b8
 8009334:	fe10803f 	.word	0xfe10803f
 8009338:	5c001000 	.word	0x5c001000
 800933c:	ffff0000 	.word	0xffff0000
 8009340:	40020028 	.word	0x40020028
 8009344:	58025408 	.word	0x58025408
 8009348:	5802541c 	.word	0x5802541c
 800934c:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009350:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8009352:	2303      	movs	r3, #3
        return HAL_ERROR;
 8009354:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009356:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8009358:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800935c:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800935e:	496b      	ldr	r1, [pc, #428]	; (800950c <HAL_DMA_Init+0x484>)
 8009360:	40c1      	lsrs	r1, r0
 8009362:	07c9      	lsls	r1, r1, #31
 8009364:	f57f af2a 	bpl.w	80091bc <HAL_DMA_Init+0x134>
 8009368:	e726      	b.n	80091b8 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 800936a:	2001      	movs	r0, #1
}
 800936c:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800936e:	2300      	movs	r3, #0
 8009370:	461a      	mov	r2, r3
 8009372:	6063      	str	r3, [r4, #4]
 8009374:	e7c5      	b.n	8009302 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009376:	6820      	ldr	r0, [r4, #0]
 8009378:	4a65      	ldr	r2, [pc, #404]	; (8009510 <HAL_DMA_Init+0x488>)
 800937a:	4d66      	ldr	r5, [pc, #408]	; (8009514 <HAL_DMA_Init+0x48c>)
 800937c:	42a8      	cmp	r0, r5
 800937e:	bf18      	it	ne
 8009380:	4290      	cmpne	r0, r2
 8009382:	f105 0514 	add.w	r5, r5, #20
 8009386:	bf0c      	ite	eq
 8009388:	2201      	moveq	r2, #1
 800938a:	2200      	movne	r2, #0
 800938c:	42a8      	cmp	r0, r5
 800938e:	bf08      	it	eq
 8009390:	f042 0201 	orreq.w	r2, r2, #1
 8009394:	3514      	adds	r5, #20
 8009396:	42a8      	cmp	r0, r5
 8009398:	bf08      	it	eq
 800939a:	f042 0201 	orreq.w	r2, r2, #1
 800939e:	3514      	adds	r5, #20
 80093a0:	42a8      	cmp	r0, r5
 80093a2:	bf08      	it	eq
 80093a4:	f042 0201 	orreq.w	r2, r2, #1
 80093a8:	3514      	adds	r5, #20
 80093aa:	42a8      	cmp	r0, r5
 80093ac:	bf08      	it	eq
 80093ae:	f042 0201 	orreq.w	r2, r2, #1
 80093b2:	3514      	adds	r5, #20
 80093b4:	42a8      	cmp	r0, r5
 80093b6:	bf08      	it	eq
 80093b8:	f042 0201 	orreq.w	r2, r2, #1
 80093bc:	b93a      	cbnz	r2, 80093ce <HAL_DMA_Init+0x346>
 80093be:	4a56      	ldr	r2, [pc, #344]	; (8009518 <HAL_DMA_Init+0x490>)
 80093c0:	4290      	cmp	r0, r2
 80093c2:	d004      	beq.n	80093ce <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80093c4:	4a55      	ldr	r2, [pc, #340]	; (800951c <HAL_DMA_Init+0x494>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80093c6:	4856      	ldr	r0, [pc, #344]	; (8009520 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80093c8:	440a      	add	r2, r1
 80093ca:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80093cc:	e003      	b.n	80093d6 <HAL_DMA_Init+0x34e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80093ce:	4a55      	ldr	r2, [pc, #340]	; (8009524 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80093d0:	4855      	ldr	r0, [pc, #340]	; (8009528 <HAL_DMA_Init+0x4a0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80093d2:	440a      	add	r2, r1
 80093d4:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80093d6:	2101      	movs	r1, #1
 80093d8:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80093dc:	2100      	movs	r1, #0
 80093de:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80093e2:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80093e4:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80093e6:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 80093ea:	605a      	str	r2, [r3, #4]
 80093ec:	e796      	b.n	800931c <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80093ee:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80093f2:	d00e      	beq.n	8009412 <HAL_DMA_Init+0x38a>
    switch (hdma->Init.FIFOThreshold)
 80093f4:	2a02      	cmp	r2, #2
 80093f6:	d905      	bls.n	8009404 <HAL_DMA_Init+0x37c>
 80093f8:	2a03      	cmp	r2, #3
 80093fa:	f47f aef8 	bne.w	80091ee <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093fe:	01c2      	lsls	r2, r0, #7
 8009400:	f57f aef5 	bpl.w	80091ee <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 8009404:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009406:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8009408:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800940a:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800940c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009410:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8009412:	2a03      	cmp	r2, #3
 8009414:	f63f aeeb 	bhi.w	80091ee <HAL_DMA_Init+0x166>
 8009418:	a501      	add	r5, pc, #4	; (adr r5, 8009420 <HAL_DMA_Init+0x398>)
 800941a:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 800941e:	bf00      	nop
 8009420:	08009405 	.word	0x08009405
 8009424:	080093ff 	.word	0x080093ff
 8009428:	08009405 	.word	0x08009405
 800942c:	08009431 	.word	0x08009431
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009430:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8009434:	f47f aedb 	bne.w	80091ee <HAL_DMA_Init+0x166>
 8009438:	e7e4      	b.n	8009404 <HAL_DMA_Init+0x37c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800943a:	4b35      	ldr	r3, [pc, #212]	; (8009510 <HAL_DMA_Init+0x488>)
 800943c:	4835      	ldr	r0, [pc, #212]	; (8009514 <HAL_DMA_Init+0x48c>)
 800943e:	493b      	ldr	r1, [pc, #236]	; (800952c <HAL_DMA_Init+0x4a4>)
 8009440:	4282      	cmp	r2, r0
 8009442:	bf18      	it	ne
 8009444:	429a      	cmpne	r2, r3
 8009446:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800944a:	bf0c      	ite	eq
 800944c:	2301      	moveq	r3, #1
 800944e:	2300      	movne	r3, #0
 8009450:	428a      	cmp	r2, r1
 8009452:	bf08      	it	eq
 8009454:	f043 0301 	orreq.w	r3, r3, #1
 8009458:	3128      	adds	r1, #40	; 0x28
 800945a:	4282      	cmp	r2, r0
 800945c:	bf08      	it	eq
 800945e:	f043 0301 	orreq.w	r3, r3, #1
 8009462:	3028      	adds	r0, #40	; 0x28
 8009464:	428a      	cmp	r2, r1
 8009466:	bf08      	it	eq
 8009468:	f043 0301 	orreq.w	r3, r3, #1
 800946c:	3128      	adds	r1, #40	; 0x28
 800946e:	4282      	cmp	r2, r0
 8009470:	bf08      	it	eq
 8009472:	f043 0301 	orreq.w	r3, r3, #1
 8009476:	428a      	cmp	r2, r1
 8009478:	bf08      	it	eq
 800947a:	f043 0301 	orreq.w	r3, r3, #1
 800947e:	b913      	cbnz	r3, 8009486 <HAL_DMA_Init+0x3fe>
 8009480:	4b25      	ldr	r3, [pc, #148]	; (8009518 <HAL_DMA_Init+0x490>)
 8009482:	429a      	cmp	r2, r3
 8009484:	d13a      	bne.n	80094fc <HAL_DMA_Init+0x474>
    __HAL_UNLOCK(hdma);
 8009486:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8009488:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800948a:	4929      	ldr	r1, [pc, #164]	; (8009530 <HAL_DMA_Init+0x4a8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800948c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8009490:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009494:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009496:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009498:	68a3      	ldr	r3, [r4, #8]
 800949a:	2b40      	cmp	r3, #64	; 0x40
 800949c:	d02c      	beq.n	80094f8 <HAL_DMA_Init+0x470>
 800949e:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 80094a2:	fab3 f383 	clz	r3, r3
 80094a6:	095b      	lsrs	r3, r3, #5
 80094a8:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80094aa:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 80094ae:	08db      	lsrs	r3, r3, #3
 80094b0:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80094b4:	6965      	ldr	r5, [r4, #20]
 80094b6:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80094ba:	69a5      	ldr	r5, [r4, #24]
 80094bc:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80094c0:	69e5      	ldr	r5, [r4, #28]
 80094c2:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80094c6:	6a25      	ldr	r5, [r4, #32]
 80094c8:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 80094cc:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80094ce:	4919      	ldr	r1, [pc, #100]	; (8009534 <HAL_DMA_Init+0x4ac>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80094d0:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80094d2:	4b19      	ldr	r3, [pc, #100]	; (8009538 <HAL_DMA_Init+0x4b0>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80094d4:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80094d6:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80094d8:	6822      	ldr	r2, [r4, #0]
 80094da:	4411      	add	r1, r2
 80094dc:	fba3 2301 	umull	r2, r3, r3, r1
 80094e0:	091b      	lsrs	r3, r3, #4
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80094e6:	f7ff fced 	bl	8008ec4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80094ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80094ec:	2301      	movs	r3, #1
 80094ee:	f002 021f 	and.w	r2, r2, #31
 80094f2:	4093      	lsls	r3, r2
 80094f4:	6043      	str	r3, [r0, #4]
 80094f6:	e684      	b.n	8009202 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80094f8:	2010      	movs	r0, #16
 80094fa:	e7d6      	b.n	80094aa <HAL_DMA_Init+0x422>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80094fc:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80094fe:	2303      	movs	r3, #3
    return HAL_ERROR;
 8009500:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009502:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009504:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009508:	bd38      	pop	{r3, r4, r5, pc}
 800950a:	bf00      	nop
 800950c:	c3c0003f 	.word	0xc3c0003f
 8009510:	58025408 	.word	0x58025408
 8009514:	5802541c 	.word	0x5802541c
 8009518:	58025494 	.word	0x58025494
 800951c:	1000823f 	.word	0x1000823f
 8009520:	40020940 	.word	0x40020940
 8009524:	1600963f 	.word	0x1600963f
 8009528:	58025940 	.word	0x58025940
 800952c:	58025430 	.word	0x58025430
 8009530:	fffe000f 	.word	0xfffe000f
 8009534:	a7fdabf8 	.word	0xa7fdabf8
 8009538:	cccccccd 	.word	0xcccccccd

0800953c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800953c:	2800      	cmp	r0, #0
 800953e:	f000 8270 	beq.w	8009a22 <HAL_DMA_Start_IT+0x4e6>
 8009542:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8009544:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009548:	2801      	cmp	r0, #1
 800954a:	f000 826c 	beq.w	8009a26 <HAL_DMA_Start_IT+0x4ea>
 800954e:	2001      	movs	r0, #1
{
 8009550:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8009552:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8009556:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800955a:	4284      	cmp	r4, r0
 800955c:	d008      	beq.n	8009570 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800955e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8009562:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009564:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8009568:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 800956c:	bc70      	pop	{r4, r5, r6}
 800956e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8009570:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8009572:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009576:	4ea2      	ldr	r6, [pc, #648]	; (8009800 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8009578:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800957c:	2000      	movs	r0, #0
 800957e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8009582:	6820      	ldr	r0, [r4, #0]
 8009584:	f020 0001 	bic.w	r0, r0, #1
 8009588:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800958a:	489e      	ldr	r0, [pc, #632]	; (8009804 <HAL_DMA_Start_IT+0x2c8>)
 800958c:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009590:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009594:	42b4      	cmp	r4, r6
 8009596:	bf18      	it	ne
 8009598:	4284      	cmpne	r4, r0
 800959a:	f106 0618 	add.w	r6, r6, #24
 800959e:	bf0c      	ite	eq
 80095a0:	2001      	moveq	r0, #1
 80095a2:	2000      	movne	r0, #0
 80095a4:	42b4      	cmp	r4, r6
 80095a6:	bf08      	it	eq
 80095a8:	f040 0001 	orreq.w	r0, r0, #1
 80095ac:	3618      	adds	r6, #24
 80095ae:	42b4      	cmp	r4, r6
 80095b0:	bf08      	it	eq
 80095b2:	f040 0001 	orreq.w	r0, r0, #1
 80095b6:	3618      	adds	r6, #24
 80095b8:	42b4      	cmp	r4, r6
 80095ba:	bf08      	it	eq
 80095bc:	f040 0001 	orreq.w	r0, r0, #1
 80095c0:	3618      	adds	r6, #24
 80095c2:	42b4      	cmp	r4, r6
 80095c4:	bf08      	it	eq
 80095c6:	f040 0001 	orreq.w	r0, r0, #1
 80095ca:	3618      	adds	r6, #24
 80095cc:	42b4      	cmp	r4, r6
 80095ce:	bf08      	it	eq
 80095d0:	f040 0001 	orreq.w	r0, r0, #1
 80095d4:	3618      	adds	r6, #24
 80095d6:	42b4      	cmp	r4, r6
 80095d8:	bf08      	it	eq
 80095da:	f040 0001 	orreq.w	r0, r0, #1
 80095de:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80095e2:	42b4      	cmp	r4, r6
 80095e4:	bf08      	it	eq
 80095e6:	f040 0001 	orreq.w	r0, r0, #1
 80095ea:	3618      	adds	r6, #24
 80095ec:	42b4      	cmp	r4, r6
 80095ee:	bf08      	it	eq
 80095f0:	f040 0001 	orreq.w	r0, r0, #1
 80095f4:	3618      	adds	r6, #24
 80095f6:	42b4      	cmp	r4, r6
 80095f8:	bf08      	it	eq
 80095fa:	f040 0001 	orreq.w	r0, r0, #1
 80095fe:	3618      	adds	r6, #24
 8009600:	42b4      	cmp	r4, r6
 8009602:	bf08      	it	eq
 8009604:	f040 0001 	orreq.w	r0, r0, #1
 8009608:	3618      	adds	r6, #24
 800960a:	42b4      	cmp	r4, r6
 800960c:	bf08      	it	eq
 800960e:	f040 0001 	orreq.w	r0, r0, #1
 8009612:	3618      	adds	r6, #24
 8009614:	42b4      	cmp	r4, r6
 8009616:	bf08      	it	eq
 8009618:	f040 0001 	orreq.w	r0, r0, #1
 800961c:	3618      	adds	r6, #24
 800961e:	42b4      	cmp	r4, r6
 8009620:	bf08      	it	eq
 8009622:	f040 0001 	orreq.w	r0, r0, #1
 8009626:	3618      	adds	r6, #24
 8009628:	42b4      	cmp	r4, r6
 800962a:	bf08      	it	eq
 800962c:	f040 0001 	orreq.w	r0, r0, #1
 8009630:	4e75      	ldr	r6, [pc, #468]	; (8009808 <HAL_DMA_Start_IT+0x2cc>)
 8009632:	42b4      	cmp	r4, r6
 8009634:	bf08      	it	eq
 8009636:	f040 0001 	orreq.w	r0, r0, #1
 800963a:	3614      	adds	r6, #20
 800963c:	42b4      	cmp	r4, r6
 800963e:	bf08      	it	eq
 8009640:	f040 0001 	orreq.w	r0, r0, #1
 8009644:	3614      	adds	r6, #20
 8009646:	42b4      	cmp	r4, r6
 8009648:	bf08      	it	eq
 800964a:	f040 0001 	orreq.w	r0, r0, #1
 800964e:	3614      	adds	r6, #20
 8009650:	42b4      	cmp	r4, r6
 8009652:	bf08      	it	eq
 8009654:	f040 0001 	orreq.w	r0, r0, #1
 8009658:	3614      	adds	r6, #20
 800965a:	42b4      	cmp	r4, r6
 800965c:	bf08      	it	eq
 800965e:	f040 0001 	orreq.w	r0, r0, #1
 8009662:	3614      	adds	r6, #20
 8009664:	42b4      	cmp	r4, r6
 8009666:	bf08      	it	eq
 8009668:	f040 0001 	orreq.w	r0, r0, #1
 800966c:	3614      	adds	r6, #20
 800966e:	42b4      	cmp	r4, r6
 8009670:	bf08      	it	eq
 8009672:	f040 0001 	orreq.w	r0, r0, #1
 8009676:	b910      	cbnz	r0, 800967e <HAL_DMA_Start_IT+0x142>
 8009678:	4864      	ldr	r0, [pc, #400]	; (800980c <HAL_DMA_Start_IT+0x2d0>)
 800967a:	4284      	cmp	r4, r0
 800967c:	d10a      	bne.n	8009694 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800967e:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 8009682:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8009684:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8009688:	b110      	cbz	r0, 8009690 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800968a:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 800968e:	6044      	str	r4, [r0, #4]
 8009690:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009694:	485b      	ldr	r0, [pc, #364]	; (8009804 <HAL_DMA_Start_IT+0x2c8>)
 8009696:	4e5a      	ldr	r6, [pc, #360]	; (8009800 <HAL_DMA_Start_IT+0x2c4>)
 8009698:	42b4      	cmp	r4, r6
 800969a:	bf18      	it	ne
 800969c:	4284      	cmpne	r4, r0
 800969e:	f106 0618 	add.w	r6, r6, #24
 80096a2:	bf0c      	ite	eq
 80096a4:	2001      	moveq	r0, #1
 80096a6:	2000      	movne	r0, #0
 80096a8:	42b4      	cmp	r4, r6
 80096aa:	bf08      	it	eq
 80096ac:	f040 0001 	orreq.w	r0, r0, #1
 80096b0:	3618      	adds	r6, #24
 80096b2:	42b4      	cmp	r4, r6
 80096b4:	bf08      	it	eq
 80096b6:	f040 0001 	orreq.w	r0, r0, #1
 80096ba:	3618      	adds	r6, #24
 80096bc:	42b4      	cmp	r4, r6
 80096be:	bf08      	it	eq
 80096c0:	f040 0001 	orreq.w	r0, r0, #1
 80096c4:	3618      	adds	r6, #24
 80096c6:	42b4      	cmp	r4, r6
 80096c8:	bf08      	it	eq
 80096ca:	f040 0001 	orreq.w	r0, r0, #1
 80096ce:	3618      	adds	r6, #24
 80096d0:	42b4      	cmp	r4, r6
 80096d2:	bf08      	it	eq
 80096d4:	f040 0001 	orreq.w	r0, r0, #1
 80096d8:	3618      	adds	r6, #24
 80096da:	42b4      	cmp	r4, r6
 80096dc:	bf08      	it	eq
 80096de:	f040 0001 	orreq.w	r0, r0, #1
 80096e2:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80096e6:	42b4      	cmp	r4, r6
 80096e8:	bf08      	it	eq
 80096ea:	f040 0001 	orreq.w	r0, r0, #1
 80096ee:	3618      	adds	r6, #24
 80096f0:	42b4      	cmp	r4, r6
 80096f2:	bf08      	it	eq
 80096f4:	f040 0001 	orreq.w	r0, r0, #1
 80096f8:	3618      	adds	r6, #24
 80096fa:	42b4      	cmp	r4, r6
 80096fc:	bf08      	it	eq
 80096fe:	f040 0001 	orreq.w	r0, r0, #1
 8009702:	3618      	adds	r6, #24
 8009704:	42b4      	cmp	r4, r6
 8009706:	bf08      	it	eq
 8009708:	f040 0001 	orreq.w	r0, r0, #1
 800970c:	3618      	adds	r6, #24
 800970e:	42b4      	cmp	r4, r6
 8009710:	bf08      	it	eq
 8009712:	f040 0001 	orreq.w	r0, r0, #1
 8009716:	3618      	adds	r6, #24
 8009718:	42b4      	cmp	r4, r6
 800971a:	bf08      	it	eq
 800971c:	f040 0001 	orreq.w	r0, r0, #1
 8009720:	3618      	adds	r6, #24
 8009722:	42b4      	cmp	r4, r6
 8009724:	bf08      	it	eq
 8009726:	f040 0001 	orreq.w	r0, r0, #1
 800972a:	b918      	cbnz	r0, 8009734 <HAL_DMA_Start_IT+0x1f8>
 800972c:	4838      	ldr	r0, [pc, #224]	; (8009810 <HAL_DMA_Start_IT+0x2d4>)
 800972e:	4284      	cmp	r4, r0
 8009730:	f040 817b 	bne.w	8009a2a <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009734:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8009738:	f000 041f 	and.w	r4, r0, #31
 800973c:	203f      	movs	r0, #63	; 0x3f
 800973e:	40a0      	lsls	r0, r4
 8009740:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009742:	f8dc 4000 	ldr.w	r4, [ip]
 8009746:	6820      	ldr	r0, [r4, #0]
 8009748:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800974c:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800974e:	f8dc 0000 	ldr.w	r0, [ip]
 8009752:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009754:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8009758:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800975a:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800975e:	f000 815b 	beq.w	8009a18 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009762:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009764:	f8dc 3000 	ldr.w	r3, [ip]
 8009768:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800976a:	f8dc 4000 	ldr.w	r4, [ip]
 800976e:	4b25      	ldr	r3, [pc, #148]	; (8009804 <HAL_DMA_Start_IT+0x2c8>)
 8009770:	4923      	ldr	r1, [pc, #140]	; (8009800 <HAL_DMA_Start_IT+0x2c4>)
 8009772:	4a28      	ldr	r2, [pc, #160]	; (8009814 <HAL_DMA_Start_IT+0x2d8>)
 8009774:	428c      	cmp	r4, r1
 8009776:	bf18      	it	ne
 8009778:	429c      	cmpne	r4, r3
 800977a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800977e:	bf0c      	ite	eq
 8009780:	2301      	moveq	r3, #1
 8009782:	2300      	movne	r3, #0
 8009784:	4294      	cmp	r4, r2
 8009786:	bf08      	it	eq
 8009788:	f043 0301 	orreq.w	r3, r3, #1
 800978c:	3230      	adds	r2, #48	; 0x30
 800978e:	428c      	cmp	r4, r1
 8009790:	bf08      	it	eq
 8009792:	f043 0301 	orreq.w	r3, r3, #1
 8009796:	3130      	adds	r1, #48	; 0x30
 8009798:	4294      	cmp	r4, r2
 800979a:	bf08      	it	eq
 800979c:	f043 0301 	orreq.w	r3, r3, #1
 80097a0:	3230      	adds	r2, #48	; 0x30
 80097a2:	428c      	cmp	r4, r1
 80097a4:	bf08      	it	eq
 80097a6:	f043 0301 	orreq.w	r3, r3, #1
 80097aa:	3130      	adds	r1, #48	; 0x30
 80097ac:	4294      	cmp	r4, r2
 80097ae:	bf08      	it	eq
 80097b0:	f043 0301 	orreq.w	r3, r3, #1
 80097b4:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80097b8:	428c      	cmp	r4, r1
 80097ba:	bf08      	it	eq
 80097bc:	f043 0301 	orreq.w	r3, r3, #1
 80097c0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80097c4:	4294      	cmp	r4, r2
 80097c6:	bf08      	it	eq
 80097c8:	f043 0301 	orreq.w	r3, r3, #1
 80097cc:	3230      	adds	r2, #48	; 0x30
 80097ce:	428c      	cmp	r4, r1
 80097d0:	bf08      	it	eq
 80097d2:	f043 0301 	orreq.w	r3, r3, #1
 80097d6:	3130      	adds	r1, #48	; 0x30
 80097d8:	4294      	cmp	r4, r2
 80097da:	bf08      	it	eq
 80097dc:	f043 0301 	orreq.w	r3, r3, #1
 80097e0:	3230      	adds	r2, #48	; 0x30
 80097e2:	428c      	cmp	r4, r1
 80097e4:	bf08      	it	eq
 80097e6:	f043 0301 	orreq.w	r3, r3, #1
 80097ea:	3130      	adds	r1, #48	; 0x30
 80097ec:	4294      	cmp	r4, r2
 80097ee:	bf08      	it	eq
 80097f0:	f043 0301 	orreq.w	r3, r3, #1
 80097f4:	3230      	adds	r2, #48	; 0x30
 80097f6:	428c      	cmp	r4, r1
 80097f8:	bf08      	it	eq
 80097fa:	f043 0301 	orreq.w	r3, r3, #1
 80097fe:	e00b      	b.n	8009818 <HAL_DMA_Start_IT+0x2dc>
 8009800:	40020028 	.word	0x40020028
 8009804:	40020010 	.word	0x40020010
 8009808:	58025408 	.word	0x58025408
 800980c:	58025494 	.word	0x58025494
 8009810:	400204b8 	.word	0x400204b8
 8009814:	40020040 	.word	0x40020040
 8009818:	4294      	cmp	r4, r2
 800981a:	bf08      	it	eq
 800981c:	f043 0301 	orreq.w	r3, r3, #1
 8009820:	b91b      	cbnz	r3, 800982a <HAL_DMA_Start_IT+0x2ee>
 8009822:	4b9b      	ldr	r3, [pc, #620]	; (8009a90 <HAL_DMA_Start_IT+0x554>)
 8009824:	429c      	cmp	r4, r3
 8009826:	f040 8143 	bne.w	8009ab0 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	f023 031e 	bic.w	r3, r3, #30
 8009830:	f043 0316 	orr.w	r3, r3, #22
 8009834:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009836:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800983a:	b12b      	cbz	r3, 8009848 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800983c:	f8dc 2000 	ldr.w	r2, [ip]
 8009840:	6813      	ldr	r3, [r2, #0]
 8009842:	f043 0308 	orr.w	r3, r3, #8
 8009846:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009848:	f8dc 4000 	ldr.w	r4, [ip]
 800984c:	4b91      	ldr	r3, [pc, #580]	; (8009a94 <HAL_DMA_Start_IT+0x558>)
 800984e:	4992      	ldr	r1, [pc, #584]	; (8009a98 <HAL_DMA_Start_IT+0x55c>)
 8009850:	4a92      	ldr	r2, [pc, #584]	; (8009a9c <HAL_DMA_Start_IT+0x560>)
 8009852:	428c      	cmp	r4, r1
 8009854:	bf18      	it	ne
 8009856:	429c      	cmpne	r4, r3
 8009858:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800985c:	bf0c      	ite	eq
 800985e:	2301      	moveq	r3, #1
 8009860:	2300      	movne	r3, #0
 8009862:	4294      	cmp	r4, r2
 8009864:	bf08      	it	eq
 8009866:	f043 0301 	orreq.w	r3, r3, #1
 800986a:	3230      	adds	r2, #48	; 0x30
 800986c:	428c      	cmp	r4, r1
 800986e:	bf08      	it	eq
 8009870:	f043 0301 	orreq.w	r3, r3, #1
 8009874:	3130      	adds	r1, #48	; 0x30
 8009876:	4294      	cmp	r4, r2
 8009878:	bf08      	it	eq
 800987a:	f043 0301 	orreq.w	r3, r3, #1
 800987e:	3230      	adds	r2, #48	; 0x30
 8009880:	428c      	cmp	r4, r1
 8009882:	bf08      	it	eq
 8009884:	f043 0301 	orreq.w	r3, r3, #1
 8009888:	3130      	adds	r1, #48	; 0x30
 800988a:	4294      	cmp	r4, r2
 800988c:	bf08      	it	eq
 800988e:	f043 0301 	orreq.w	r3, r3, #1
 8009892:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8009896:	428c      	cmp	r4, r1
 8009898:	bf08      	it	eq
 800989a:	f043 0301 	orreq.w	r3, r3, #1
 800989e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80098a2:	4294      	cmp	r4, r2
 80098a4:	bf08      	it	eq
 80098a6:	f043 0301 	orreq.w	r3, r3, #1
 80098aa:	3230      	adds	r2, #48	; 0x30
 80098ac:	428c      	cmp	r4, r1
 80098ae:	bf08      	it	eq
 80098b0:	f043 0301 	orreq.w	r3, r3, #1
 80098b4:	3130      	adds	r1, #48	; 0x30
 80098b6:	4294      	cmp	r4, r2
 80098b8:	bf08      	it	eq
 80098ba:	f043 0301 	orreq.w	r3, r3, #1
 80098be:	3230      	adds	r2, #48	; 0x30
 80098c0:	428c      	cmp	r4, r1
 80098c2:	bf08      	it	eq
 80098c4:	f043 0301 	orreq.w	r3, r3, #1
 80098c8:	3130      	adds	r1, #48	; 0x30
 80098ca:	4294      	cmp	r4, r2
 80098cc:	bf08      	it	eq
 80098ce:	f043 0301 	orreq.w	r3, r3, #1
 80098d2:	3230      	adds	r2, #48	; 0x30
 80098d4:	428c      	cmp	r4, r1
 80098d6:	bf08      	it	eq
 80098d8:	f043 0301 	orreq.w	r3, r3, #1
 80098dc:	3130      	adds	r1, #48	; 0x30
 80098de:	4294      	cmp	r4, r2
 80098e0:	bf08      	it	eq
 80098e2:	f043 0301 	orreq.w	r3, r3, #1
 80098e6:	4a6e      	ldr	r2, [pc, #440]	; (8009aa0 <HAL_DMA_Start_IT+0x564>)
 80098e8:	428c      	cmp	r4, r1
 80098ea:	bf08      	it	eq
 80098ec:	f043 0301 	orreq.w	r3, r3, #1
 80098f0:	496c      	ldr	r1, [pc, #432]	; (8009aa4 <HAL_DMA_Start_IT+0x568>)
 80098f2:	4294      	cmp	r4, r2
 80098f4:	bf08      	it	eq
 80098f6:	f043 0301 	orreq.w	r3, r3, #1
 80098fa:	3228      	adds	r2, #40	; 0x28
 80098fc:	428c      	cmp	r4, r1
 80098fe:	bf08      	it	eq
 8009900:	f043 0301 	orreq.w	r3, r3, #1
 8009904:	3128      	adds	r1, #40	; 0x28
 8009906:	4294      	cmp	r4, r2
 8009908:	bf08      	it	eq
 800990a:	f043 0301 	orreq.w	r3, r3, #1
 800990e:	3228      	adds	r2, #40	; 0x28
 8009910:	428c      	cmp	r4, r1
 8009912:	bf08      	it	eq
 8009914:	f043 0301 	orreq.w	r3, r3, #1
 8009918:	3128      	adds	r1, #40	; 0x28
 800991a:	4294      	cmp	r4, r2
 800991c:	bf08      	it	eq
 800991e:	f043 0301 	orreq.w	r3, r3, #1
 8009922:	3228      	adds	r2, #40	; 0x28
 8009924:	428c      	cmp	r4, r1
 8009926:	bf08      	it	eq
 8009928:	f043 0301 	orreq.w	r3, r3, #1
 800992c:	4294      	cmp	r4, r2
 800992e:	bf08      	it	eq
 8009930:	f043 0301 	orreq.w	r3, r3, #1
 8009934:	b913      	cbnz	r3, 800993c <HAL_DMA_Start_IT+0x400>
 8009936:	4b5c      	ldr	r3, [pc, #368]	; (8009aa8 <HAL_DMA_Start_IT+0x56c>)
 8009938:	429c      	cmp	r4, r3
 800993a:	d111      	bne.n	8009960 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800993c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	03d2      	lsls	r2, r2, #15
 8009944:	d503      	bpl.n	800994e <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800994c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800994e:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 8009952:	b11b      	cbz	r3, 800995c <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 8009960:	4b4c      	ldr	r3, [pc, #304]	; (8009a94 <HAL_DMA_Start_IT+0x558>)
 8009962:	494d      	ldr	r1, [pc, #308]	; (8009a98 <HAL_DMA_Start_IT+0x55c>)
 8009964:	4a4d      	ldr	r2, [pc, #308]	; (8009a9c <HAL_DMA_Start_IT+0x560>)
 8009966:	428c      	cmp	r4, r1
 8009968:	bf18      	it	ne
 800996a:	429c      	cmpne	r4, r3
 800996c:	484f      	ldr	r0, [pc, #316]	; (8009aac <HAL_DMA_Start_IT+0x570>)
 800996e:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8009972:	bf0c      	ite	eq
 8009974:	2301      	moveq	r3, #1
 8009976:	2300      	movne	r3, #0
 8009978:	4294      	cmp	r4, r2
 800997a:	bf08      	it	eq
 800997c:	f043 0301 	orreq.w	r3, r3, #1
 8009980:	3230      	adds	r2, #48	; 0x30
 8009982:	4284      	cmp	r4, r0
 8009984:	bf08      	it	eq
 8009986:	f043 0301 	orreq.w	r3, r3, #1
 800998a:	3060      	adds	r0, #96	; 0x60
 800998c:	4294      	cmp	r4, r2
 800998e:	bf08      	it	eq
 8009990:	f043 0301 	orreq.w	r3, r3, #1
 8009994:	3230      	adds	r2, #48	; 0x30
 8009996:	428c      	cmp	r4, r1
 8009998:	bf08      	it	eq
 800999a:	f043 0301 	orreq.w	r3, r3, #1
 800999e:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 80099a2:	4294      	cmp	r4, r2
 80099a4:	bf08      	it	eq
 80099a6:	f043 0301 	orreq.w	r3, r3, #1
 80099aa:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80099ae:	4284      	cmp	r4, r0
 80099b0:	bf08      	it	eq
 80099b2:	f043 0301 	orreq.w	r3, r3, #1
 80099b6:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 80099ba:	4294      	cmp	r4, r2
 80099bc:	bf08      	it	eq
 80099be:	f043 0301 	orreq.w	r3, r3, #1
 80099c2:	3230      	adds	r2, #48	; 0x30
 80099c4:	428c      	cmp	r4, r1
 80099c6:	bf08      	it	eq
 80099c8:	f043 0301 	orreq.w	r3, r3, #1
 80099cc:	3160      	adds	r1, #96	; 0x60
 80099ce:	4294      	cmp	r4, r2
 80099d0:	bf08      	it	eq
 80099d2:	f043 0301 	orreq.w	r3, r3, #1
 80099d6:	3230      	adds	r2, #48	; 0x30
 80099d8:	4284      	cmp	r4, r0
 80099da:	bf08      	it	eq
 80099dc:	f043 0301 	orreq.w	r3, r3, #1
 80099e0:	4294      	cmp	r4, r2
 80099e2:	bf08      	it	eq
 80099e4:	f043 0301 	orreq.w	r3, r3, #1
 80099e8:	3230      	adds	r2, #48	; 0x30
 80099ea:	428c      	cmp	r4, r1
 80099ec:	bf08      	it	eq
 80099ee:	f043 0301 	orreq.w	r3, r3, #1
 80099f2:	4294      	cmp	r4, r2
 80099f4:	bf08      	it	eq
 80099f6:	f043 0301 	orreq.w	r3, r3, #1
 80099fa:	b933      	cbnz	r3, 8009a0a <HAL_DMA_Start_IT+0x4ce>
 80099fc:	3060      	adds	r0, #96	; 0x60
 80099fe:	1a20      	subs	r0, r4, r0
 8009a00:	fab0 f080 	clz	r0, r0
 8009a04:	0940      	lsrs	r0, r0, #5
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d03d      	beq.n	8009a86 <HAL_DMA_Start_IT+0x54a>
 8009a0a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a0c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8009a0e:	f043 0301 	orr.w	r3, r3, #1
 8009a12:	6023      	str	r3, [r4, #0]
}
 8009a14:	bc70      	pop	{r4, r5, r6}
 8009a16:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009a18:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009a1a:	f8dc 3000 	ldr.w	r3, [ip]
 8009a1e:	60d9      	str	r1, [r3, #12]
 8009a20:	e6a3      	b.n	800976a <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 8009a22:	2001      	movs	r0, #1
 8009a24:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8009a26:	2002      	movs	r0, #2
}
 8009a28:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009a2a:	481d      	ldr	r0, [pc, #116]	; (8009aa0 <HAL_DMA_Start_IT+0x564>)
 8009a2c:	4e1d      	ldr	r6, [pc, #116]	; (8009aa4 <HAL_DMA_Start_IT+0x568>)
 8009a2e:	42b4      	cmp	r4, r6
 8009a30:	bf18      	it	ne
 8009a32:	4284      	cmpne	r4, r0
 8009a34:	f106 0614 	add.w	r6, r6, #20
 8009a38:	bf0c      	ite	eq
 8009a3a:	2001      	moveq	r0, #1
 8009a3c:	2000      	movne	r0, #0
 8009a3e:	42b4      	cmp	r4, r6
 8009a40:	bf08      	it	eq
 8009a42:	f040 0001 	orreq.w	r0, r0, #1
 8009a46:	3614      	adds	r6, #20
 8009a48:	42b4      	cmp	r4, r6
 8009a4a:	bf08      	it	eq
 8009a4c:	f040 0001 	orreq.w	r0, r0, #1
 8009a50:	3614      	adds	r6, #20
 8009a52:	42b4      	cmp	r4, r6
 8009a54:	bf08      	it	eq
 8009a56:	f040 0001 	orreq.w	r0, r0, #1
 8009a5a:	3614      	adds	r6, #20
 8009a5c:	42b4      	cmp	r4, r6
 8009a5e:	bf08      	it	eq
 8009a60:	f040 0001 	orreq.w	r0, r0, #1
 8009a64:	3614      	adds	r6, #20
 8009a66:	42b4      	cmp	r4, r6
 8009a68:	bf08      	it	eq
 8009a6a:	f040 0001 	orreq.w	r0, r0, #1
 8009a6e:	b910      	cbnz	r0, 8009a76 <HAL_DMA_Start_IT+0x53a>
 8009a70:	480d      	ldr	r0, [pc, #52]	; (8009aa8 <HAL_DMA_Start_IT+0x56c>)
 8009a72:	4284      	cmp	r4, r0
 8009a74:	d11c      	bne.n	8009ab0 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009a76:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8009a7a:	f000 041f 	and.w	r4, r0, #31
 8009a7e:	2001      	movs	r0, #1
 8009a80:	40a0      	lsls	r0, r4
 8009a82:	6068      	str	r0, [r5, #4]
 8009a84:	e663      	b.n	800974e <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	f043 0301 	orr.w	r3, r3, #1
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	e56d      	b.n	800956c <HAL_DMA_Start_IT+0x30>
 8009a90:	400204b8 	.word	0x400204b8
 8009a94:	40020010 	.word	0x40020010
 8009a98:	40020028 	.word	0x40020028
 8009a9c:	40020040 	.word	0x40020040
 8009aa0:	58025408 	.word	0x58025408
 8009aa4:	5802541c 	.word	0x5802541c
 8009aa8:	58025494 	.word	0x58025494
 8009aac:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	f023 030e 	bic.w	r3, r3, #14
 8009ab6:	f043 030a 	orr.w	r3, r3, #10
 8009aba:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009abc:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f43f aec1 	beq.w	8009848 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009ac6:	f8dc 2000 	ldr.w	r2, [ip]
 8009aca:	6813      	ldr	r3, [r2, #0]
 8009acc:	f043 0304 	orr.w	r3, r3, #4
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	e6b9      	b.n	8009848 <HAL_DMA_Start_IT+0x30c>

08009ad4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d065      	beq.n	8009ba4 <HAL_DMA_Abort_IT+0xd0>
{
 8009ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009adc:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2a02      	cmp	r2, #2
 8009ae4:	d159      	bne.n	8009b9a <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009ae6:	6801      	ldr	r1, [r0, #0]
 8009ae8:	4883      	ldr	r0, [pc, #524]	; (8009cf8 <HAL_DMA_Abort_IT+0x224>)
 8009aea:	4281      	cmp	r1, r0
 8009aec:	d04b      	beq.n	8009b86 <HAL_DMA_Abort_IT+0xb2>
 8009aee:	4c83      	ldr	r4, [pc, #524]	; (8009cfc <HAL_DMA_Abort_IT+0x228>)
 8009af0:	42a1      	cmp	r1, r4
 8009af2:	d048      	beq.n	8009b86 <HAL_DMA_Abort_IT+0xb2>
 8009af4:	f8df a228 	ldr.w	sl, [pc, #552]	; 8009d20 <HAL_DMA_Abort_IT+0x24c>
 8009af8:	f8df b214 	ldr.w	fp, [pc, #532]	; 8009d10 <HAL_DMA_Abort_IT+0x23c>
 8009afc:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8009d24 <HAL_DMA_Abort_IT+0x250>
 8009b00:	4559      	cmp	r1, fp
 8009b02:	bf18      	it	ne
 8009b04:	4551      	cmpne	r1, sl
 8009b06:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8009d28 <HAL_DMA_Abort_IT+0x254>
 8009b0a:	f8df e220 	ldr.w	lr, [pc, #544]	; 8009d2c <HAL_DMA_Abort_IT+0x258>
 8009b0e:	bf0c      	ite	eq
 8009b10:	2201      	moveq	r2, #1
 8009b12:	2200      	movne	r2, #0
 8009b14:	f8df c218 	ldr.w	ip, [pc, #536]	; 8009d30 <HAL_DMA_Abort_IT+0x25c>
 8009b18:	4549      	cmp	r1, r9
 8009b1a:	bf08      	it	eq
 8009b1c:	f042 0201 	orreq.w	r2, r2, #1
 8009b20:	4d77      	ldr	r5, [pc, #476]	; (8009d00 <HAL_DMA_Abort_IT+0x22c>)
 8009b22:	4f78      	ldr	r7, [pc, #480]	; (8009d04 <HAL_DMA_Abort_IT+0x230>)
 8009b24:	4541      	cmp	r1, r8
 8009b26:	bf08      	it	eq
 8009b28:	f042 0201 	orreq.w	r2, r2, #1
 8009b2c:	4e76      	ldr	r6, [pc, #472]	; (8009d08 <HAL_DMA_Abort_IT+0x234>)
 8009b2e:	4571      	cmp	r1, lr
 8009b30:	bf08      	it	eq
 8009b32:	f042 0201 	orreq.w	r2, r2, #1
 8009b36:	4561      	cmp	r1, ip
 8009b38:	bf08      	it	eq
 8009b3a:	f042 0201 	orreq.w	r2, r2, #1
 8009b3e:	42a9      	cmp	r1, r5
 8009b40:	bf08      	it	eq
 8009b42:	f042 0201 	orreq.w	r2, r2, #1
 8009b46:	3518      	adds	r5, #24
 8009b48:	42a9      	cmp	r1, r5
 8009b4a:	bf08      	it	eq
 8009b4c:	f042 0201 	orreq.w	r2, r2, #1
 8009b50:	3518      	adds	r5, #24
 8009b52:	42a9      	cmp	r1, r5
 8009b54:	bf08      	it	eq
 8009b56:	f042 0201 	orreq.w	r2, r2, #1
 8009b5a:	3518      	adds	r5, #24
 8009b5c:	42a9      	cmp	r1, r5
 8009b5e:	bf08      	it	eq
 8009b60:	f042 0201 	orreq.w	r2, r2, #1
 8009b64:	3548      	adds	r5, #72	; 0x48
 8009b66:	42b9      	cmp	r1, r7
 8009b68:	bf08      	it	eq
 8009b6a:	f042 0201 	orreq.w	r2, r2, #1
 8009b6e:	42b1      	cmp	r1, r6
 8009b70:	bf08      	it	eq
 8009b72:	f042 0201 	orreq.w	r2, r2, #1
 8009b76:	42a9      	cmp	r1, r5
 8009b78:	bf08      	it	eq
 8009b7a:	f042 0201 	orreq.w	r2, r2, #1
 8009b7e:	b912      	cbnz	r2, 8009b86 <HAL_DMA_Abort_IT+0xb2>
 8009b80:	4a62      	ldr	r2, [pc, #392]	; (8009d0c <HAL_DMA_Abort_IT+0x238>)
 8009b82:	4291      	cmp	r1, r2
 8009b84:	d110      	bne.n	8009ba8 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8009b86:	2204      	movs	r2, #4
  return HAL_OK;
 8009b88:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8009b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8009b8e:	680b      	ldr	r3, [r1, #0]
 8009b90:	f023 0301 	bic.w	r3, r3, #1
 8009b94:	600b      	str	r3, [r1, #0]
}
 8009b96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b9a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8009b9c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b9e:	655a      	str	r2, [r3, #84]	; 0x54
}
 8009ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8009ba4:	2001      	movs	r0, #1
}
 8009ba6:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009ba8:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009baa:	4c54      	ldr	r4, [pc, #336]	; (8009cfc <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009bac:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009bb0:	4857      	ldr	r0, [pc, #348]	; (8009d10 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009bb2:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 8009bb4:	6819      	ldr	r1, [r3, #0]
 8009bb6:	680a      	ldr	r2, [r1, #0]
 8009bb8:	f022 0201 	bic.w	r2, r2, #1
 8009bbc:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009bbe:	4a4e      	ldr	r2, [pc, #312]	; (8009cf8 <HAL_DMA_Abort_IT+0x224>)
 8009bc0:	6819      	ldr	r1, [r3, #0]
 8009bc2:	42a1      	cmp	r1, r4
 8009bc4:	bf18      	it	ne
 8009bc6:	4291      	cmpne	r1, r2
 8009bc8:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8009bcc:	bf0c      	ite	eq
 8009bce:	2201      	moveq	r2, #1
 8009bd0:	2200      	movne	r2, #0
 8009bd2:	4281      	cmp	r1, r0
 8009bd4:	bf08      	it	eq
 8009bd6:	f042 0201 	orreq.w	r2, r2, #1
 8009bda:	3030      	adds	r0, #48	; 0x30
 8009bdc:	42a1      	cmp	r1, r4
 8009bde:	bf08      	it	eq
 8009be0:	f042 0201 	orreq.w	r2, r2, #1
 8009be4:	3430      	adds	r4, #48	; 0x30
 8009be6:	4281      	cmp	r1, r0
 8009be8:	bf08      	it	eq
 8009bea:	f042 0201 	orreq.w	r2, r2, #1
 8009bee:	3030      	adds	r0, #48	; 0x30
 8009bf0:	42a1      	cmp	r1, r4
 8009bf2:	bf08      	it	eq
 8009bf4:	f042 0201 	orreq.w	r2, r2, #1
 8009bf8:	3430      	adds	r4, #48	; 0x30
 8009bfa:	4281      	cmp	r1, r0
 8009bfc:	bf08      	it	eq
 8009bfe:	f042 0201 	orreq.w	r2, r2, #1
 8009c02:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009c06:	42a1      	cmp	r1, r4
 8009c08:	bf08      	it	eq
 8009c0a:	f042 0201 	orreq.w	r2, r2, #1
 8009c0e:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8009c12:	4281      	cmp	r1, r0
 8009c14:	bf08      	it	eq
 8009c16:	f042 0201 	orreq.w	r2, r2, #1
 8009c1a:	3030      	adds	r0, #48	; 0x30
 8009c1c:	42a1      	cmp	r1, r4
 8009c1e:	bf08      	it	eq
 8009c20:	f042 0201 	orreq.w	r2, r2, #1
 8009c24:	3430      	adds	r4, #48	; 0x30
 8009c26:	4281      	cmp	r1, r0
 8009c28:	bf08      	it	eq
 8009c2a:	f042 0201 	orreq.w	r2, r2, #1
 8009c2e:	3030      	adds	r0, #48	; 0x30
 8009c30:	42a1      	cmp	r1, r4
 8009c32:	bf08      	it	eq
 8009c34:	f042 0201 	orreq.w	r2, r2, #1
 8009c38:	3430      	adds	r4, #48	; 0x30
 8009c3a:	4281      	cmp	r1, r0
 8009c3c:	bf08      	it	eq
 8009c3e:	f042 0201 	orreq.w	r2, r2, #1
 8009c42:	3030      	adds	r0, #48	; 0x30
 8009c44:	42a1      	cmp	r1, r4
 8009c46:	bf08      	it	eq
 8009c48:	f042 0201 	orreq.w	r2, r2, #1
 8009c4c:	3430      	adds	r4, #48	; 0x30
 8009c4e:	4281      	cmp	r1, r0
 8009c50:	bf08      	it	eq
 8009c52:	f042 0201 	orreq.w	r2, r2, #1
 8009c56:	482f      	ldr	r0, [pc, #188]	; (8009d14 <HAL_DMA_Abort_IT+0x240>)
 8009c58:	42a1      	cmp	r1, r4
 8009c5a:	bf08      	it	eq
 8009c5c:	f042 0201 	orreq.w	r2, r2, #1
 8009c60:	4c2d      	ldr	r4, [pc, #180]	; (8009d18 <HAL_DMA_Abort_IT+0x244>)
 8009c62:	4281      	cmp	r1, r0
 8009c64:	bf08      	it	eq
 8009c66:	f042 0201 	orreq.w	r2, r2, #1
 8009c6a:	3028      	adds	r0, #40	; 0x28
 8009c6c:	42a1      	cmp	r1, r4
 8009c6e:	bf08      	it	eq
 8009c70:	f042 0201 	orreq.w	r2, r2, #1
 8009c74:	3428      	adds	r4, #40	; 0x28
 8009c76:	4281      	cmp	r1, r0
 8009c78:	bf08      	it	eq
 8009c7a:	f042 0201 	orreq.w	r2, r2, #1
 8009c7e:	3028      	adds	r0, #40	; 0x28
 8009c80:	42a1      	cmp	r1, r4
 8009c82:	bf08      	it	eq
 8009c84:	f042 0201 	orreq.w	r2, r2, #1
 8009c88:	3428      	adds	r4, #40	; 0x28
 8009c8a:	4281      	cmp	r1, r0
 8009c8c:	bf08      	it	eq
 8009c8e:	f042 0201 	orreq.w	r2, r2, #1
 8009c92:	3028      	adds	r0, #40	; 0x28
 8009c94:	42a1      	cmp	r1, r4
 8009c96:	bf08      	it	eq
 8009c98:	f042 0201 	orreq.w	r2, r2, #1
 8009c9c:	4281      	cmp	r1, r0
 8009c9e:	bf08      	it	eq
 8009ca0:	f042 0201 	orreq.w	r2, r2, #1
 8009ca4:	b912      	cbnz	r2, 8009cac <HAL_DMA_Abort_IT+0x1d8>
 8009ca6:	4a1d      	ldr	r2, [pc, #116]	; (8009d1c <HAL_DMA_Abort_IT+0x248>)
 8009ca8:	4291      	cmp	r1, r2
 8009caa:	d117      	bne.n	8009cdc <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009cac:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009cae:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009cb0:	6801      	ldr	r1, [r0, #0]
 8009cb2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009cb6:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009cb8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009cbc:	f001 011f 	and.w	r1, r1, #31
 8009cc0:	408a      	lsls	r2, r1
 8009cc2:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cc4:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8009cc8:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8009cca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009ccc:	b132      	cbz	r2, 8009cdc <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009cce:	6811      	ldr	r1, [r2, #0]
 8009cd0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009cd4:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009cd6:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8009cda:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8009cdc:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8009cde:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8009ce0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8009ce2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8009ce6:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8009cea:	b11a      	cbz	r2, 8009cf4 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 8009cec:	4618      	mov	r0, r3
 8009cee:	4790      	blx	r2
  return HAL_OK;
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	e755      	b.n	8009ba0 <HAL_DMA_Abort_IT+0xcc>
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	e753      	b.n	8009ba0 <HAL_DMA_Abort_IT+0xcc>
 8009cf8:	40020010 	.word	0x40020010
 8009cfc:	40020028 	.word	0x40020028
 8009d00:	40020410 	.word	0x40020410
 8009d04:	40020470 	.word	0x40020470
 8009d08:	40020488 	.word	0x40020488
 8009d0c:	400204b8 	.word	0x400204b8
 8009d10:	40020040 	.word	0x40020040
 8009d14:	58025408 	.word	0x58025408
 8009d18:	5802541c 	.word	0x5802541c
 8009d1c:	58025494 	.word	0x58025494
 8009d20:	40020058 	.word	0x40020058
 8009d24:	40020070 	.word	0x40020070
 8009d28:	40020088 	.word	0x40020088
 8009d2c:	400200a0 	.word	0x400200a0
 8009d30:	400200b8 	.word	0x400200b8

08009d34 <HAL_DMA_IRQHandler>:
{
 8009d34:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8009d36:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8009d38:	4b9a      	ldr	r3, [pc, #616]	; (8009fa4 <HAL_DMA_IRQHandler+0x270>)
{
 8009d3a:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d3c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8009d3e:	681f      	ldr	r7, [r3, #0]
{
 8009d40:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8009d42:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009d44:	6803      	ldr	r3, [r0, #0]
 8009d46:	4a98      	ldr	r2, [pc, #608]	; (8009fa8 <HAL_DMA_IRQHandler+0x274>)
  tmpisr_dma  = regs_dma->ISR;
 8009d48:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009d4a:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 8009d4c:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009d4e:	d048      	beq.n	8009de2 <HAL_DMA_IRQHandler+0xae>
 8009d50:	3218      	adds	r2, #24
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d045      	beq.n	8009de2 <HAL_DMA_IRQHandler+0xae>
 8009d56:	3218      	adds	r2, #24
 8009d58:	4894      	ldr	r0, [pc, #592]	; (8009fac <HAL_DMA_IRQHandler+0x278>)
 8009d5a:	4283      	cmp	r3, r0
 8009d5c:	bf18      	it	ne
 8009d5e:	4293      	cmpne	r3, r2
 8009d60:	f100 0018 	add.w	r0, r0, #24
 8009d64:	bf0c      	ite	eq
 8009d66:	2201      	moveq	r2, #1
 8009d68:	2200      	movne	r2, #0
 8009d6a:	4283      	cmp	r3, r0
 8009d6c:	bf08      	it	eq
 8009d6e:	f042 0201 	orreq.w	r2, r2, #1
 8009d72:	3018      	adds	r0, #24
 8009d74:	4283      	cmp	r3, r0
 8009d76:	bf08      	it	eq
 8009d78:	f042 0201 	orreq.w	r2, r2, #1
 8009d7c:	3018      	adds	r0, #24
 8009d7e:	4283      	cmp	r3, r0
 8009d80:	bf08      	it	eq
 8009d82:	f042 0201 	orreq.w	r2, r2, #1
 8009d86:	3018      	adds	r0, #24
 8009d88:	4283      	cmp	r3, r0
 8009d8a:	bf08      	it	eq
 8009d8c:	f042 0201 	orreq.w	r2, r2, #1
 8009d90:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8009d94:	4283      	cmp	r3, r0
 8009d96:	bf08      	it	eq
 8009d98:	f042 0201 	orreq.w	r2, r2, #1
 8009d9c:	3018      	adds	r0, #24
 8009d9e:	4283      	cmp	r3, r0
 8009da0:	bf08      	it	eq
 8009da2:	f042 0201 	orreq.w	r2, r2, #1
 8009da6:	3018      	adds	r0, #24
 8009da8:	4283      	cmp	r3, r0
 8009daa:	bf08      	it	eq
 8009dac:	f042 0201 	orreq.w	r2, r2, #1
 8009db0:	3018      	adds	r0, #24
 8009db2:	4283      	cmp	r3, r0
 8009db4:	bf08      	it	eq
 8009db6:	f042 0201 	orreq.w	r2, r2, #1
 8009dba:	3018      	adds	r0, #24
 8009dbc:	4283      	cmp	r3, r0
 8009dbe:	bf08      	it	eq
 8009dc0:	f042 0201 	orreq.w	r2, r2, #1
 8009dc4:	3018      	adds	r0, #24
 8009dc6:	4283      	cmp	r3, r0
 8009dc8:	bf08      	it	eq
 8009dca:	f042 0201 	orreq.w	r2, r2, #1
 8009dce:	3018      	adds	r0, #24
 8009dd0:	4283      	cmp	r3, r0
 8009dd2:	bf08      	it	eq
 8009dd4:	f042 0201 	orreq.w	r2, r2, #1
 8009dd8:	b91a      	cbnz	r2, 8009de2 <HAL_DMA_IRQHandler+0xae>
 8009dda:	4a75      	ldr	r2, [pc, #468]	; (8009fb0 <HAL_DMA_IRQHandler+0x27c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	f040 8294 	bne.w	800a30a <HAL_DMA_IRQHandler+0x5d6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009de2:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
 8009de6:	2208      	movs	r2, #8
 8009de8:	f00e 011f 	and.w	r1, lr, #31
 8009dec:	408a      	lsls	r2, r1
 8009dee:	422a      	tst	r2, r5
 8009df0:	f040 8193 	bne.w	800a11a <HAL_DMA_IRQHandler+0x3e6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009df4:	fa25 f201 	lsr.w	r2, r5, r1
 8009df8:	07d2      	lsls	r2, r2, #31
 8009dfa:	d50e      	bpl.n	8009e1a <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009dfc:	695a      	ldr	r2, [r3, #20]
 8009dfe:	0612      	lsls	r2, r2, #24
 8009e00:	f140 824d 	bpl.w	800a29e <HAL_DMA_IRQHandler+0x56a>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009e04:	2301      	movs	r3, #1
 8009e06:	408b      	lsls	r3, r1
 8009e08:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009e0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009e0c:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009e10:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009e14:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009e18:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009e1a:	f04f 0c04 	mov.w	ip, #4
 8009e1e:	fa0c fc01 	lsl.w	ip, ip, r1
 8009e22:	ea1c 0f05 	tst.w	ip, r5
 8009e26:	d05f      	beq.n	8009ee8 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009e28:	6822      	ldr	r2, [r4, #0]
 8009e2a:	485f      	ldr	r0, [pc, #380]	; (8009fa8 <HAL_DMA_IRQHandler+0x274>)
 8009e2c:	4b61      	ldr	r3, [pc, #388]	; (8009fb4 <HAL_DMA_IRQHandler+0x280>)
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	bf18      	it	ne
 8009e32:	4282      	cmpne	r2, r0
 8009e34:	f103 0318 	add.w	r3, r3, #24
 8009e38:	bf0c      	ite	eq
 8009e3a:	2001      	moveq	r0, #1
 8009e3c:	2000      	movne	r0, #0
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	bf08      	it	eq
 8009e42:	f040 0001 	orreq.w	r0, r0, #1
 8009e46:	3318      	adds	r3, #24
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	bf08      	it	eq
 8009e4c:	f040 0001 	orreq.w	r0, r0, #1
 8009e50:	3318      	adds	r3, #24
 8009e52:	429a      	cmp	r2, r3
 8009e54:	bf08      	it	eq
 8009e56:	f040 0001 	orreq.w	r0, r0, #1
 8009e5a:	3318      	adds	r3, #24
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	bf08      	it	eq
 8009e60:	f040 0001 	orreq.w	r0, r0, #1
 8009e64:	3318      	adds	r3, #24
 8009e66:	429a      	cmp	r2, r3
 8009e68:	bf08      	it	eq
 8009e6a:	f040 0001 	orreq.w	r0, r0, #1
 8009e6e:	3318      	adds	r3, #24
 8009e70:	429a      	cmp	r2, r3
 8009e72:	bf08      	it	eq
 8009e74:	f040 0001 	orreq.w	r0, r0, #1
 8009e78:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	bf08      	it	eq
 8009e80:	f040 0001 	orreq.w	r0, r0, #1
 8009e84:	3318      	adds	r3, #24
 8009e86:	429a      	cmp	r2, r3
 8009e88:	bf08      	it	eq
 8009e8a:	f040 0001 	orreq.w	r0, r0, #1
 8009e8e:	3318      	adds	r3, #24
 8009e90:	429a      	cmp	r2, r3
 8009e92:	bf08      	it	eq
 8009e94:	f040 0001 	orreq.w	r0, r0, #1
 8009e98:	3318      	adds	r3, #24
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	bf08      	it	eq
 8009e9e:	f040 0001 	orreq.w	r0, r0, #1
 8009ea2:	3318      	adds	r3, #24
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	bf08      	it	eq
 8009ea8:	f040 0001 	orreq.w	r0, r0, #1
 8009eac:	3318      	adds	r3, #24
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	bf08      	it	eq
 8009eb2:	f040 0001 	orreq.w	r0, r0, #1
 8009eb6:	3318      	adds	r3, #24
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	bf08      	it	eq
 8009ebc:	f040 0001 	orreq.w	r0, r0, #1
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	b918      	cbnz	r0, 8009ecc <HAL_DMA_IRQHandler+0x198>
 8009ec4:	483a      	ldr	r0, [pc, #232]	; (8009fb0 <HAL_DMA_IRQHandler+0x27c>)
 8009ec6:	4282      	cmp	r2, r0
 8009ec8:	f040 825a 	bne.w	800a380 <HAL_DMA_IRQHandler+0x64c>
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	0790      	lsls	r0, r2, #30
 8009ed0:	f140 81f1 	bpl.w	800a2b6 <HAL_DMA_IRQHandler+0x582>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009ed4:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009ed8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009eda:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009ede:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009ee2:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009ee6:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009ee8:	f04f 0c10 	mov.w	ip, #16
 8009eec:	fa0c fc01 	lsl.w	ip, ip, r1
 8009ef0:	ea1c 0f05 	tst.w	ip, r5
 8009ef4:	d075      	beq.n	8009fe2 <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009ef6:	6822      	ldr	r2, [r4, #0]
 8009ef8:	482b      	ldr	r0, [pc, #172]	; (8009fa8 <HAL_DMA_IRQHandler+0x274>)
 8009efa:	4b2e      	ldr	r3, [pc, #184]	; (8009fb4 <HAL_DMA_IRQHandler+0x280>)
 8009efc:	429a      	cmp	r2, r3
 8009efe:	bf18      	it	ne
 8009f00:	4282      	cmpne	r2, r0
 8009f02:	f103 0318 	add.w	r3, r3, #24
 8009f06:	bf0c      	ite	eq
 8009f08:	2001      	moveq	r0, #1
 8009f0a:	2000      	movne	r0, #0
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	bf08      	it	eq
 8009f10:	f040 0001 	orreq.w	r0, r0, #1
 8009f14:	3318      	adds	r3, #24
 8009f16:	429a      	cmp	r2, r3
 8009f18:	bf08      	it	eq
 8009f1a:	f040 0001 	orreq.w	r0, r0, #1
 8009f1e:	3318      	adds	r3, #24
 8009f20:	429a      	cmp	r2, r3
 8009f22:	bf08      	it	eq
 8009f24:	f040 0001 	orreq.w	r0, r0, #1
 8009f28:	3318      	adds	r3, #24
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	bf08      	it	eq
 8009f2e:	f040 0001 	orreq.w	r0, r0, #1
 8009f32:	3318      	adds	r3, #24
 8009f34:	429a      	cmp	r2, r3
 8009f36:	bf08      	it	eq
 8009f38:	f040 0001 	orreq.w	r0, r0, #1
 8009f3c:	3318      	adds	r3, #24
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	bf08      	it	eq
 8009f42:	f040 0001 	orreq.w	r0, r0, #1
 8009f46:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	bf08      	it	eq
 8009f4e:	f040 0001 	orreq.w	r0, r0, #1
 8009f52:	3318      	adds	r3, #24
 8009f54:	429a      	cmp	r2, r3
 8009f56:	bf08      	it	eq
 8009f58:	f040 0001 	orreq.w	r0, r0, #1
 8009f5c:	3318      	adds	r3, #24
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	bf08      	it	eq
 8009f62:	f040 0001 	orreq.w	r0, r0, #1
 8009f66:	3318      	adds	r3, #24
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	bf08      	it	eq
 8009f6c:	f040 0001 	orreq.w	r0, r0, #1
 8009f70:	3318      	adds	r3, #24
 8009f72:	429a      	cmp	r2, r3
 8009f74:	bf08      	it	eq
 8009f76:	f040 0001 	orreq.w	r0, r0, #1
 8009f7a:	3318      	adds	r3, #24
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	bf08      	it	eq
 8009f80:	f040 0001 	orreq.w	r0, r0, #1
 8009f84:	3318      	adds	r3, #24
 8009f86:	429a      	cmp	r2, r3
 8009f88:	bf08      	it	eq
 8009f8a:	f040 0001 	orreq.w	r0, r0, #1
 8009f8e:	4613      	mov	r3, r2
 8009f90:	b918      	cbnz	r0, 8009f9a <HAL_DMA_IRQHandler+0x266>
 8009f92:	4807      	ldr	r0, [pc, #28]	; (8009fb0 <HAL_DMA_IRQHandler+0x27c>)
 8009f94:	4282      	cmp	r2, r0
 8009f96:	f040 813c 	bne.w	800a212 <HAL_DMA_IRQHandler+0x4de>
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	0712      	lsls	r2, r2, #28
 8009f9e:	f140 8177 	bpl.w	800a290 <HAL_DMA_IRQHandler+0x55c>
 8009fa2:	e009      	b.n	8009fb8 <HAL_DMA_IRQHandler+0x284>
 8009fa4:	200006e8 	.word	0x200006e8
 8009fa8:	40020010 	.word	0x40020010
 8009fac:	40020058 	.word	0x40020058
 8009fb0:	400204b8 	.word	0x400204b8
 8009fb4:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009fb8:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	0350      	lsls	r0, r2, #13
 8009fc2:	f100 8181 	bmi.w	800a2c8 <HAL_DMA_IRQHandler+0x594>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	05d2      	lsls	r2, r2, #23
 8009fca:	d403      	bmi.n	8009fd4 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	f022 0208 	bic.w	r2, r2, #8
 8009fd2:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8009fd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fd6:	b10b      	cbz	r3, 8009fdc <HAL_DMA_IRQHandler+0x2a8>
            hdma->XferHalfCpltCallback(hdma);
 8009fd8:	4620      	mov	r0, r4
 8009fda:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009fdc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009fde:	f001 011f 	and.w	r1, r1, #31
 8009fe2:	2320      	movs	r3, #32
 8009fe4:	fa03 f101 	lsl.w	r1, r3, r1
 8009fe8:	4229      	tst	r1, r5
 8009fea:	d066      	beq.n	800a0ba <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	4a92      	ldr	r2, [pc, #584]	; (800a238 <HAL_DMA_IRQHandler+0x504>)
 8009ff0:	4892      	ldr	r0, [pc, #584]	; (800a23c <HAL_DMA_IRQHandler+0x508>)
 8009ff2:	4283      	cmp	r3, r0
 8009ff4:	bf18      	it	ne
 8009ff6:	4293      	cmpne	r3, r2
 8009ff8:	f100 0018 	add.w	r0, r0, #24
 8009ffc:	bf0c      	ite	eq
 8009ffe:	2201      	moveq	r2, #1
 800a000:	2200      	movne	r2, #0
 800a002:	4283      	cmp	r3, r0
 800a004:	bf08      	it	eq
 800a006:	f042 0201 	orreq.w	r2, r2, #1
 800a00a:	3018      	adds	r0, #24
 800a00c:	4283      	cmp	r3, r0
 800a00e:	bf08      	it	eq
 800a010:	f042 0201 	orreq.w	r2, r2, #1
 800a014:	3018      	adds	r0, #24
 800a016:	4283      	cmp	r3, r0
 800a018:	bf08      	it	eq
 800a01a:	f042 0201 	orreq.w	r2, r2, #1
 800a01e:	3018      	adds	r0, #24
 800a020:	4283      	cmp	r3, r0
 800a022:	bf08      	it	eq
 800a024:	f042 0201 	orreq.w	r2, r2, #1
 800a028:	3018      	adds	r0, #24
 800a02a:	4283      	cmp	r3, r0
 800a02c:	bf08      	it	eq
 800a02e:	f042 0201 	orreq.w	r2, r2, #1
 800a032:	3018      	adds	r0, #24
 800a034:	4283      	cmp	r3, r0
 800a036:	bf08      	it	eq
 800a038:	f042 0201 	orreq.w	r2, r2, #1
 800a03c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800a040:	4283      	cmp	r3, r0
 800a042:	bf08      	it	eq
 800a044:	f042 0201 	orreq.w	r2, r2, #1
 800a048:	3018      	adds	r0, #24
 800a04a:	4283      	cmp	r3, r0
 800a04c:	bf08      	it	eq
 800a04e:	f042 0201 	orreq.w	r2, r2, #1
 800a052:	3018      	adds	r0, #24
 800a054:	4283      	cmp	r3, r0
 800a056:	bf08      	it	eq
 800a058:	f042 0201 	orreq.w	r2, r2, #1
 800a05c:	3018      	adds	r0, #24
 800a05e:	4283      	cmp	r3, r0
 800a060:	bf08      	it	eq
 800a062:	f042 0201 	orreq.w	r2, r2, #1
 800a066:	3018      	adds	r0, #24
 800a068:	4283      	cmp	r3, r0
 800a06a:	bf08      	it	eq
 800a06c:	f042 0201 	orreq.w	r2, r2, #1
 800a070:	3018      	adds	r0, #24
 800a072:	4283      	cmp	r3, r0
 800a074:	bf08      	it	eq
 800a076:	f042 0201 	orreq.w	r2, r2, #1
 800a07a:	3018      	adds	r0, #24
 800a07c:	4283      	cmp	r3, r0
 800a07e:	bf08      	it	eq
 800a080:	f042 0201 	orreq.w	r2, r2, #1
 800a084:	b91a      	cbnz	r2, 800a08e <HAL_DMA_IRQHandler+0x35a>
 800a086:	4a6e      	ldr	r2, [pc, #440]	; (800a240 <HAL_DMA_IRQHandler+0x50c>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	f040 80cf 	bne.w	800a22c <HAL_DMA_IRQHandler+0x4f8>
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	06dd      	lsls	r5, r3, #27
 800a092:	d512      	bpl.n	800a0ba <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a094:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a096:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	f000 80d4 	beq.w	800a248 <HAL_DMA_IRQHandler+0x514>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	0352      	lsls	r2, r2, #13
 800a0a6:	f140 8118 	bpl.w	800a2da <HAL_DMA_IRQHandler+0x5a6>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	031e      	lsls	r6, r3, #12
 800a0ae:	f140 8123 	bpl.w	800a2f8 <HAL_DMA_IRQHandler+0x5c4>
          if(hdma->XferCpltCallback != NULL)
 800a0b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a0b4:	b10b      	cbz	r3, 800a0ba <HAL_DMA_IRQHandler+0x386>
            hdma->XferCpltCallback(hdma);
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a0ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f000 80e5 	beq.w	800a28c <HAL_DMA_IRQHandler+0x558>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a0c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a0c4:	07dd      	lsls	r5, r3, #31
 800a0c6:	d51f      	bpl.n	800a108 <HAL_DMA_IRQHandler+0x3d4>
        __HAL_DMA_DISABLE(hdma);
 800a0c8:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800a0ca:	2104      	movs	r1, #4
 800a0cc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800a0d0:	6813      	ldr	r3, [r2, #0]
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a0d8:	4a5a      	ldr	r2, [pc, #360]	; (800a244 <HAL_DMA_IRQHandler+0x510>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a0da:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a0dc:	fba2 7207 	umull	r7, r2, r2, r7
 800a0e0:	0a92      	lsrs	r2, r2, #10
 800a0e2:	e002      	b.n	800a0ea <HAL_DMA_IRQHandler+0x3b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a0e4:	680b      	ldr	r3, [r1, #0]
 800a0e6:	07d8      	lsls	r0, r3, #31
 800a0e8:	d504      	bpl.n	800a0f4 <HAL_DMA_IRQHandler+0x3c0>
          if (++count > timeout)
 800a0ea:	9b01      	ldr	r3, [sp, #4]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	9301      	str	r3, [sp, #4]
 800a0f2:	d9f7      	bls.n	800a0e4 <HAL_DMA_IRQHandler+0x3b0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a0f4:	680b      	ldr	r3, [r1, #0]
 800a0f6:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800a0f8:	bf4c      	ite	mi
 800a0fa:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800a0fc:	2301      	movpl	r3, #1
 800a0fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a102:	2300      	movs	r3, #0
 800a104:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 800a108:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 80be 	beq.w	800a28c <HAL_DMA_IRQHandler+0x558>
        hdma->XferErrorCallback(hdma);
 800a110:	4620      	mov	r0, r4
}
 800a112:	b003      	add	sp, #12
 800a114:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 800a118:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	0752      	lsls	r2, r2, #29
 800a11e:	d511      	bpl.n	800a144 <HAL_DMA_IRQHandler+0x410>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	f022 0204 	bic.w	r2, r2, #4
 800a126:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a128:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a12a:	f003 021f 	and.w	r2, r3, #31
 800a12e:	2308      	movs	r3, #8
 800a130:	4093      	lsls	r3, r2
 800a132:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a134:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a136:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a13a:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a13e:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a142:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a144:	fa25 f301 	lsr.w	r3, r5, r1
 800a148:	07d8      	lsls	r0, r3, #31
 800a14a:	f57f ae66 	bpl.w	8009e1a <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a14e:	6822      	ldr	r2, [r4, #0]
 800a150:	4839      	ldr	r0, [pc, #228]	; (800a238 <HAL_DMA_IRQHandler+0x504>)
 800a152:	4b3a      	ldr	r3, [pc, #232]	; (800a23c <HAL_DMA_IRQHandler+0x508>)
 800a154:	429a      	cmp	r2, r3
 800a156:	bf18      	it	ne
 800a158:	4282      	cmpne	r2, r0
 800a15a:	f103 0318 	add.w	r3, r3, #24
 800a15e:	bf0c      	ite	eq
 800a160:	2001      	moveq	r0, #1
 800a162:	2000      	movne	r0, #0
 800a164:	429a      	cmp	r2, r3
 800a166:	bf08      	it	eq
 800a168:	f040 0001 	orreq.w	r0, r0, #1
 800a16c:	3318      	adds	r3, #24
 800a16e:	429a      	cmp	r2, r3
 800a170:	bf08      	it	eq
 800a172:	f040 0001 	orreq.w	r0, r0, #1
 800a176:	3318      	adds	r3, #24
 800a178:	429a      	cmp	r2, r3
 800a17a:	bf08      	it	eq
 800a17c:	f040 0001 	orreq.w	r0, r0, #1
 800a180:	3318      	adds	r3, #24
 800a182:	429a      	cmp	r2, r3
 800a184:	bf08      	it	eq
 800a186:	f040 0001 	orreq.w	r0, r0, #1
 800a18a:	3318      	adds	r3, #24
 800a18c:	429a      	cmp	r2, r3
 800a18e:	bf08      	it	eq
 800a190:	f040 0001 	orreq.w	r0, r0, #1
 800a194:	3318      	adds	r3, #24
 800a196:	429a      	cmp	r2, r3
 800a198:	bf08      	it	eq
 800a19a:	f040 0001 	orreq.w	r0, r0, #1
 800a19e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	bf08      	it	eq
 800a1a6:	f040 0001 	orreq.w	r0, r0, #1
 800a1aa:	3318      	adds	r3, #24
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	bf08      	it	eq
 800a1b0:	f040 0001 	orreq.w	r0, r0, #1
 800a1b4:	3318      	adds	r3, #24
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	bf08      	it	eq
 800a1ba:	f040 0001 	orreq.w	r0, r0, #1
 800a1be:	3318      	adds	r3, #24
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	bf08      	it	eq
 800a1c4:	f040 0001 	orreq.w	r0, r0, #1
 800a1c8:	3318      	adds	r3, #24
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	bf08      	it	eq
 800a1ce:	f040 0001 	orreq.w	r0, r0, #1
 800a1d2:	3318      	adds	r3, #24
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	bf08      	it	eq
 800a1d8:	f040 0001 	orreq.w	r0, r0, #1
 800a1dc:	3318      	adds	r3, #24
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	bf08      	it	eq
 800a1e2:	f040 0001 	orreq.w	r0, r0, #1
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	f47f ae07 	bne.w	8009dfc <HAL_DMA_IRQHandler+0xc8>
 800a1ee:	4814      	ldr	r0, [pc, #80]	; (800a240 <HAL_DMA_IRQHandler+0x50c>)
 800a1f0:	4282      	cmp	r2, r0
 800a1f2:	f43f ae03 	beq.w	8009dfc <HAL_DMA_IRQHandler+0xc8>
 800a1f6:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a1f8:	2304      	movs	r3, #4
 800a1fa:	408b      	lsls	r3, r1
 800a1fc:	422b      	tst	r3, r5
 800a1fe:	f040 80bf 	bne.w	800a380 <HAL_DMA_IRQHandler+0x64c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a202:	f04f 0c10 	mov.w	ip, #16
 800a206:	fa0c fc01 	lsl.w	ip, ip, r1
 800a20a:	ea15 0f0c 	tst.w	r5, ip
 800a20e:	f43f aee8 	beq.w	8009fe2 <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a212:	6813      	ldr	r3, [r2, #0]
 800a214:	075b      	lsls	r3, r3, #29
 800a216:	f53f aecf 	bmi.w	8009fb8 <HAL_DMA_IRQHandler+0x284>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a21a:	f00e 0e1f 	and.w	lr, lr, #31
 800a21e:	2120      	movs	r1, #32
 800a220:	fa01 f10e 	lsl.w	r1, r1, lr
 800a224:	420d      	tst	r5, r1
 800a226:	f43f af48 	beq.w	800a0ba <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a22a:	4613      	mov	r3, r2
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	0798      	lsls	r0, r3, #30
 800a230:	f57f af43 	bpl.w	800a0ba <HAL_DMA_IRQHandler+0x386>
 800a234:	e72e      	b.n	800a094 <HAL_DMA_IRQHandler+0x360>
 800a236:	bf00      	nop
 800a238:	40020010 	.word	0x40020010
 800a23c:	40020028 	.word	0x40020028
 800a240:	400204b8 	.word	0x400204b8
 800a244:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a248:	6822      	ldr	r2, [r4, #0]
 800a24a:	6813      	ldr	r3, [r2, #0]
 800a24c:	f023 0316 	bic.w	r3, r3, #22
 800a250:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a252:	6822      	ldr	r2, [r4, #0]
 800a254:	6953      	ldr	r3, [r2, #20]
 800a256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a25a:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a25c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d04f      	beq.n	800a302 <HAL_DMA_IRQHandler+0x5ce>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a262:	6822      	ldr	r2, [r4, #0]
 800a264:	6813      	ldr	r3, [r2, #0]
 800a266:	f023 0308 	bic.w	r3, r3, #8
 800a26a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a26c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a26e:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 800a270:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a272:	f002 021f 	and.w	r2, r2, #31
 800a276:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 800a278:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a27a:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
 800a27c:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 800a27e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a282:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 800a286:	2b00      	cmp	r3, #0
 800a288:	f47f af42 	bne.w	800a110 <HAL_DMA_IRQHandler+0x3dc>
}
 800a28c:	b003      	add	sp, #12
 800a28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a290:	2220      	movs	r2, #32
 800a292:	fa02 f101 	lsl.w	r1, r2, r1
 800a296:	420d      	tst	r5, r1
 800a298:	f47f aef9 	bne.w	800a08e <HAL_DMA_IRQHandler+0x35a>
 800a29c:	e70d      	b.n	800a0ba <HAL_DMA_IRQHandler+0x386>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a29e:	f04f 0c04 	mov.w	ip, #4
 800a2a2:	fa0c fc01 	lsl.w	ip, ip, r1
 800a2a6:	ea15 0f0c 	tst.w	r5, ip
 800a2aa:	f43f ae1d 	beq.w	8009ee8 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	0790      	lsls	r0, r2, #30
 800a2b2:	f53f ae0f 	bmi.w	8009ed4 <HAL_DMA_IRQHandler+0x1a0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a2b6:	f04f 0c10 	mov.w	ip, #16
 800a2ba:	fa0c fc01 	lsl.w	ip, ip, r1
 800a2be:	ea15 0f0c 	tst.w	r5, ip
 800a2c2:	f47f ae6a 	bne.w	8009f9a <HAL_DMA_IRQHandler+0x266>
 800a2c6:	e68c      	b.n	8009fe2 <HAL_DMA_IRQHandler+0x2ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	0319      	lsls	r1, r3, #12
 800a2cc:	f57f ae82 	bpl.w	8009fd4 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a2d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f47f ae80 	bne.w	8009fd8 <HAL_DMA_IRQHandler+0x2a4>
 800a2d8:	e680      	b.n	8009fdc <HAL_DMA_IRQHandler+0x2a8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800a2e0:	f47f aee7 	bne.w	800a0b2 <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a2e4:	6819      	ldr	r1, [r3, #0]
 800a2e6:	f021 0110 	bic.w	r1, r1, #16
 800a2ea:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800a2ec:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 800a2ee:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800a2f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800a2f6:	e6dc      	b.n	800a0b2 <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1CpltCallback != NULL)
 800a2f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f47f aedb 	bne.w	800a0b6 <HAL_DMA_IRQHandler+0x382>
 800a300:	e6db      	b.n	800a0ba <HAL_DMA_IRQHandler+0x386>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a302:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1ac      	bne.n	800a262 <HAL_DMA_IRQHandler+0x52e>
 800a308:	e7b0      	b.n	800a26c <HAL_DMA_IRQHandler+0x538>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a30a:	4a9b      	ldr	r2, [pc, #620]	; (800a578 <HAL_DMA_IRQHandler+0x844>)
 800a30c:	489b      	ldr	r0, [pc, #620]	; (800a57c <HAL_DMA_IRQHandler+0x848>)
 800a30e:	4283      	cmp	r3, r0
 800a310:	bf18      	it	ne
 800a312:	4293      	cmpne	r3, r2
 800a314:	f100 0014 	add.w	r0, r0, #20
 800a318:	bf0c      	ite	eq
 800a31a:	2201      	moveq	r2, #1
 800a31c:	2200      	movne	r2, #0
 800a31e:	4283      	cmp	r3, r0
 800a320:	bf08      	it	eq
 800a322:	f042 0201 	orreq.w	r2, r2, #1
 800a326:	3014      	adds	r0, #20
 800a328:	4283      	cmp	r3, r0
 800a32a:	bf08      	it	eq
 800a32c:	f042 0201 	orreq.w	r2, r2, #1
 800a330:	3014      	adds	r0, #20
 800a332:	4283      	cmp	r3, r0
 800a334:	bf08      	it	eq
 800a336:	f042 0201 	orreq.w	r2, r2, #1
 800a33a:	3014      	adds	r0, #20
 800a33c:	4283      	cmp	r3, r0
 800a33e:	bf08      	it	eq
 800a340:	f042 0201 	orreq.w	r2, r2, #1
 800a344:	3014      	adds	r0, #20
 800a346:	4283      	cmp	r3, r0
 800a348:	bf08      	it	eq
 800a34a:	f042 0201 	orreq.w	r2, r2, #1
 800a34e:	b912      	cbnz	r2, 800a356 <HAL_DMA_IRQHandler+0x622>
 800a350:	4a8b      	ldr	r2, [pc, #556]	; (800a580 <HAL_DMA_IRQHandler+0x84c>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d19a      	bne.n	800a28c <HAL_DMA_IRQHandler+0x558>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a356:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a358:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a35a:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a35c:	f000 001f 	and.w	r0, r0, #31
 800a360:	4085      	lsls	r5, r0
 800a362:	420d      	tst	r5, r1
 800a364:	d018      	beq.n	800a398 <HAL_DMA_IRQHandler+0x664>
 800a366:	0757      	lsls	r7, r2, #29
 800a368:	d516      	bpl.n	800a398 <HAL_DMA_IRQHandler+0x664>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a36a:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a36c:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a36e:	d544      	bpl.n	800a3fa <HAL_DMA_IRQHandler+0x6c6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a370:	03d2      	lsls	r2, r2, #15
 800a372:	f100 8099 	bmi.w	800a4a8 <HAL_DMA_IRQHandler+0x774>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a376:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f47f aec9 	bne.w	800a110 <HAL_DMA_IRQHandler+0x3dc>
 800a37e:	e785      	b.n	800a28c <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a380:	f00e 011f 	and.w	r1, lr, #31
 800a384:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a388:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a38a:	fa0c fc01 	lsl.w	ip, ip, r1
 800a38e:	ea15 0f0c 	tst.w	r5, ip
 800a392:	f47f af3e 	bne.w	800a212 <HAL_DMA_IRQHandler+0x4de>
 800a396:	e624      	b.n	8009fe2 <HAL_DMA_IRQHandler+0x2ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a398:	2502      	movs	r5, #2
 800a39a:	4085      	lsls	r5, r0
 800a39c:	420d      	tst	r5, r1
 800a39e:	d00d      	beq.n	800a3bc <HAL_DMA_IRQHandler+0x688>
 800a3a0:	0797      	lsls	r7, r2, #30
 800a3a2:	d50b      	bpl.n	800a3bc <HAL_DMA_IRQHandler+0x688>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a3a4:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3a6:	0416      	lsls	r6, r2, #16
 800a3a8:	f140 8083 	bpl.w	800a4b2 <HAL_DMA_IRQHandler+0x77e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a3ac:	03d5      	lsls	r5, r2, #15
 800a3ae:	f100 80dd 	bmi.w	800a56c <HAL_DMA_IRQHandler+0x838>
          if(hdma->XferM1CpltCallback != NULL)
 800a3b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f47f aeab 	bne.w	800a110 <HAL_DMA_IRQHandler+0x3dc>
 800a3ba:	e767      	b.n	800a28c <HAL_DMA_IRQHandler+0x558>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a3bc:	2508      	movs	r5, #8
 800a3be:	fa05 f000 	lsl.w	r0, r5, r0
 800a3c2:	4208      	tst	r0, r1
 800a3c4:	f43f af62 	beq.w	800a28c <HAL_DMA_IRQHandler+0x558>
 800a3c8:	0711      	lsls	r1, r2, #28
 800a3ca:	f57f af5f 	bpl.w	800a28c <HAL_DMA_IRQHandler+0x558>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3ce:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a3d0:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3d2:	f021 010e 	bic.w	r1, r1, #14
 800a3d6:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 800a3d8:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a3da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a3dc:	f003 031f 	and.w	r3, r3, #31
 800a3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e4:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
 800a3e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a3e8:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800a3ea:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800a3ee:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f47f ae8c 	bne.w	800a110 <HAL_DMA_IRQHandler+0x3dc>
 800a3f8:	e748      	b.n	800a28c <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a3fa:	0693      	lsls	r3, r2, #26
 800a3fc:	d454      	bmi.n	800a4a8 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a3fe:	6822      	ldr	r2, [r4, #0]
 800a400:	4b60      	ldr	r3, [pc, #384]	; (800a584 <HAL_DMA_IRQHandler+0x850>)
 800a402:	4861      	ldr	r0, [pc, #388]	; (800a588 <HAL_DMA_IRQHandler+0x854>)
 800a404:	4961      	ldr	r1, [pc, #388]	; (800a58c <HAL_DMA_IRQHandler+0x858>)
 800a406:	4282      	cmp	r2, r0
 800a408:	bf18      	it	ne
 800a40a:	429a      	cmpne	r2, r3
 800a40c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800a410:	bf0c      	ite	eq
 800a412:	2301      	moveq	r3, #1
 800a414:	2300      	movne	r3, #0
 800a416:	428a      	cmp	r2, r1
 800a418:	bf08      	it	eq
 800a41a:	f043 0301 	orreq.w	r3, r3, #1
 800a41e:	3130      	adds	r1, #48	; 0x30
 800a420:	4282      	cmp	r2, r0
 800a422:	bf08      	it	eq
 800a424:	f043 0301 	orreq.w	r3, r3, #1
 800a428:	3030      	adds	r0, #48	; 0x30
 800a42a:	428a      	cmp	r2, r1
 800a42c:	bf08      	it	eq
 800a42e:	f043 0301 	orreq.w	r3, r3, #1
 800a432:	3130      	adds	r1, #48	; 0x30
 800a434:	4282      	cmp	r2, r0
 800a436:	bf08      	it	eq
 800a438:	f043 0301 	orreq.w	r3, r3, #1
 800a43c:	3030      	adds	r0, #48	; 0x30
 800a43e:	428a      	cmp	r2, r1
 800a440:	bf08      	it	eq
 800a442:	f043 0301 	orreq.w	r3, r3, #1
 800a446:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800a44a:	4282      	cmp	r2, r0
 800a44c:	bf08      	it	eq
 800a44e:	f043 0301 	orreq.w	r3, r3, #1
 800a452:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800a456:	428a      	cmp	r2, r1
 800a458:	bf08      	it	eq
 800a45a:	f043 0301 	orreq.w	r3, r3, #1
 800a45e:	3130      	adds	r1, #48	; 0x30
 800a460:	4282      	cmp	r2, r0
 800a462:	bf08      	it	eq
 800a464:	f043 0301 	orreq.w	r3, r3, #1
 800a468:	3030      	adds	r0, #48	; 0x30
 800a46a:	428a      	cmp	r2, r1
 800a46c:	bf08      	it	eq
 800a46e:	f043 0301 	orreq.w	r3, r3, #1
 800a472:	3130      	adds	r1, #48	; 0x30
 800a474:	4282      	cmp	r2, r0
 800a476:	bf08      	it	eq
 800a478:	f043 0301 	orreq.w	r3, r3, #1
 800a47c:	3030      	adds	r0, #48	; 0x30
 800a47e:	428a      	cmp	r2, r1
 800a480:	bf08      	it	eq
 800a482:	f043 0301 	orreq.w	r3, r3, #1
 800a486:	3130      	adds	r1, #48	; 0x30
 800a488:	4282      	cmp	r2, r0
 800a48a:	bf08      	it	eq
 800a48c:	f043 0301 	orreq.w	r3, r3, #1
 800a490:	428a      	cmp	r2, r1
 800a492:	bf08      	it	eq
 800a494:	f043 0301 	orreq.w	r3, r3, #1
 800a498:	b913      	cbnz	r3, 800a4a0 <HAL_DMA_IRQHandler+0x76c>
 800a49a:	4b3d      	ldr	r3, [pc, #244]	; (800a590 <HAL_DMA_IRQHandler+0x85c>)
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d179      	bne.n	800a594 <HAL_DMA_IRQHandler+0x860>
 800a4a0:	6813      	ldr	r3, [r2, #0]
 800a4a2:	f023 0308 	bic.w	r3, r3, #8
 800a4a6:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800a4a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f47f ae30 	bne.w	800a110 <HAL_DMA_IRQHandler+0x3dc>
 800a4b0:	e6ec      	b.n	800a28c <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a4b2:	0690      	lsls	r0, r2, #26
 800a4b4:	d45a      	bmi.n	800a56c <HAL_DMA_IRQHandler+0x838>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a4b6:	6822      	ldr	r2, [r4, #0]
 800a4b8:	4b32      	ldr	r3, [pc, #200]	; (800a584 <HAL_DMA_IRQHandler+0x850>)
 800a4ba:	4833      	ldr	r0, [pc, #204]	; (800a588 <HAL_DMA_IRQHandler+0x854>)
 800a4bc:	4933      	ldr	r1, [pc, #204]	; (800a58c <HAL_DMA_IRQHandler+0x858>)
 800a4be:	4282      	cmp	r2, r0
 800a4c0:	bf18      	it	ne
 800a4c2:	429a      	cmpne	r2, r3
 800a4c4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800a4c8:	bf0c      	ite	eq
 800a4ca:	2301      	moveq	r3, #1
 800a4cc:	2300      	movne	r3, #0
 800a4ce:	428a      	cmp	r2, r1
 800a4d0:	bf08      	it	eq
 800a4d2:	f043 0301 	orreq.w	r3, r3, #1
 800a4d6:	3130      	adds	r1, #48	; 0x30
 800a4d8:	4282      	cmp	r2, r0
 800a4da:	bf08      	it	eq
 800a4dc:	f043 0301 	orreq.w	r3, r3, #1
 800a4e0:	3030      	adds	r0, #48	; 0x30
 800a4e2:	428a      	cmp	r2, r1
 800a4e4:	bf08      	it	eq
 800a4e6:	f043 0301 	orreq.w	r3, r3, #1
 800a4ea:	3130      	adds	r1, #48	; 0x30
 800a4ec:	4282      	cmp	r2, r0
 800a4ee:	bf08      	it	eq
 800a4f0:	f043 0301 	orreq.w	r3, r3, #1
 800a4f4:	3030      	adds	r0, #48	; 0x30
 800a4f6:	428a      	cmp	r2, r1
 800a4f8:	bf08      	it	eq
 800a4fa:	f043 0301 	orreq.w	r3, r3, #1
 800a4fe:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800a502:	4282      	cmp	r2, r0
 800a504:	bf08      	it	eq
 800a506:	f043 0301 	orreq.w	r3, r3, #1
 800a50a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800a50e:	428a      	cmp	r2, r1
 800a510:	bf08      	it	eq
 800a512:	f043 0301 	orreq.w	r3, r3, #1
 800a516:	3130      	adds	r1, #48	; 0x30
 800a518:	4282      	cmp	r2, r0
 800a51a:	bf08      	it	eq
 800a51c:	f043 0301 	orreq.w	r3, r3, #1
 800a520:	3030      	adds	r0, #48	; 0x30
 800a522:	428a      	cmp	r2, r1
 800a524:	bf08      	it	eq
 800a526:	f043 0301 	orreq.w	r3, r3, #1
 800a52a:	3130      	adds	r1, #48	; 0x30
 800a52c:	4282      	cmp	r2, r0
 800a52e:	bf08      	it	eq
 800a530:	f043 0301 	orreq.w	r3, r3, #1
 800a534:	3030      	adds	r0, #48	; 0x30
 800a536:	428a      	cmp	r2, r1
 800a538:	bf08      	it	eq
 800a53a:	f043 0301 	orreq.w	r3, r3, #1
 800a53e:	3130      	adds	r1, #48	; 0x30
 800a540:	4282      	cmp	r2, r0
 800a542:	bf08      	it	eq
 800a544:	f043 0301 	orreq.w	r3, r3, #1
 800a548:	428a      	cmp	r2, r1
 800a54a:	bf08      	it	eq
 800a54c:	f043 0301 	orreq.w	r3, r3, #1
 800a550:	b913      	cbnz	r3, 800a558 <HAL_DMA_IRQHandler+0x824>
 800a552:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <HAL_DMA_IRQHandler+0x85c>)
 800a554:	429a      	cmp	r2, r3
 800a556:	d122      	bne.n	800a59e <HAL_DMA_IRQHandler+0x86a>
 800a558:	6813      	ldr	r3, [r2, #0]
 800a55a:	f023 0314 	bic.w	r3, r3, #20
 800a55e:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a560:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 800a562:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 800a564:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a568:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800a56c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f47f adce 	bne.w	800a110 <HAL_DMA_IRQHandler+0x3dc>
 800a574:	e68a      	b.n	800a28c <HAL_DMA_IRQHandler+0x558>
 800a576:	bf00      	nop
 800a578:	58025408 	.word	0x58025408
 800a57c:	5802541c 	.word	0x5802541c
 800a580:	58025494 	.word	0x58025494
 800a584:	40020010 	.word	0x40020010
 800a588:	40020028 	.word	0x40020028
 800a58c:	40020040 	.word	0x40020040
 800a590:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a594:	6813      	ldr	r3, [r2, #0]
 800a596:	f023 0304 	bic.w	r3, r3, #4
 800a59a:	6013      	str	r3, [r2, #0]
 800a59c:	e784      	b.n	800a4a8 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a59e:	6813      	ldr	r3, [r2, #0]
 800a5a0:	f023 030a 	bic.w	r3, r3, #10
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	e7db      	b.n	800a560 <HAL_DMA_IRQHandler+0x82c>

0800a5a8 <HAL_DMA_GetState>:
  return hdma->State;
 800a5a8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop

0800a5b0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800a5b0:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800a5b2:	4770      	bx	lr

0800a5b4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a5b4:	680b      	ldr	r3, [r1, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 8119 	beq.w	800a7ee <HAL_GPIO_Init+0x23a>
 800a5bc:	f04f 0c00 	mov.w	ip, #0
{
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800a5c4:	4662      	mov	r2, ip
{
 800a5c6:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a5c8:	4d94      	ldr	r5, [pc, #592]	; (800a81c <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a5ca:	4f95      	ldr	r7, [pc, #596]	; (800a820 <HAL_GPIO_Init+0x26c>)
 800a5cc:	f8df 8268 	ldr.w	r8, [pc, #616]	; 800a838 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a5d0:	f04f 0901 	mov.w	r9, #1
 800a5d4:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 800a5d8:	ea19 0e03 	ands.w	lr, r9, r3
 800a5dc:	f000 80c1 	beq.w	800a762 <HAL_GPIO_Init+0x1ae>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a5e0:	684b      	ldr	r3, [r1, #4]
 800a5e2:	f003 0303 	and.w	r3, r3, #3
 800a5e6:	1e5c      	subs	r4, r3, #1
 800a5e8:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a5ea:	f04f 0403 	mov.w	r4, #3
 800a5ee:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a5f2:	f240 80c0 	bls.w	800a776 <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a5f6:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a5f8:	2b03      	cmp	r3, #3
 800a5fa:	d026      	beq.n	800a64a <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 800a5fc:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a5fe:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a602:	688b      	ldr	r3, [r1, #8]
 800a604:	fa03 f30c 	lsl.w	r3, r3, ip
 800a608:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 800a60c:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a60e:	684b      	ldr	r3, [r1, #4]
 800a610:	f003 0303 	and.w	r3, r3, #3
 800a614:	2b02      	cmp	r3, #2
 800a616:	d118      	bne.n	800a64a <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
 800a618:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a61c:	f002 0b07 	and.w	fp, r2, #7
 800a620:	230f      	movs	r3, #15
 800a622:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800a626:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800a62a:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a62e:	fa03 f30b 	lsl.w	r3, r3, fp
 800a632:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a636:	690b      	ldr	r3, [r1, #16]
 800a638:	fa03 f30b 	lsl.w	r3, r3, fp
 800a63c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 800a640:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a644:	684b      	ldr	r3, [r1, #4]
 800a646:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 800a64a:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a64e:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a652:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a656:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 800a658:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a65a:	684b      	ldr	r3, [r1, #4]
 800a65c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800a660:	d07e      	beq.n	800a760 <HAL_GPIO_Init+0x1ac>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a662:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800a666:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a66a:	f002 0903 	and.w	r9, r2, #3
 800a66e:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a672:	f043 0302 	orr.w	r3, r3, #2
 800a676:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a67a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a67e:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a680:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800a684:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a688:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a68c:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a690:	f003 0302 	and.w	r3, r3, #2
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800a698:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a69a:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a69e:	d02b      	beq.n	800a6f8 <HAL_GPIO_Init+0x144>
 800a6a0:	4540      	cmp	r0, r8
 800a6a2:	f000 8088 	beq.w	800a7b6 <HAL_GPIO_Init+0x202>
 800a6a6:	4e5f      	ldr	r6, [pc, #380]	; (800a824 <HAL_GPIO_Init+0x270>)
 800a6a8:	42b0      	cmp	r0, r6
 800a6aa:	f000 808b 	beq.w	800a7c4 <HAL_GPIO_Init+0x210>
 800a6ae:	4e5e      	ldr	r6, [pc, #376]	; (800a828 <HAL_GPIO_Init+0x274>)
 800a6b0:	42b0      	cmp	r0, r6
 800a6b2:	d079      	beq.n	800a7a8 <HAL_GPIO_Init+0x1f4>
 800a6b4:	4e5d      	ldr	r6, [pc, #372]	; (800a82c <HAL_GPIO_Init+0x278>)
 800a6b6:	42b0      	cmp	r0, r6
 800a6b8:	f000 8092 	beq.w	800a7e0 <HAL_GPIO_Init+0x22c>
 800a6bc:	4e5c      	ldr	r6, [pc, #368]	; (800a830 <HAL_GPIO_Init+0x27c>)
 800a6be:	42b0      	cmp	r0, r6
 800a6c0:	f000 8096 	beq.w	800a7f0 <HAL_GPIO_Init+0x23c>
 800a6c4:	4e5b      	ldr	r6, [pc, #364]	; (800a834 <HAL_GPIO_Init+0x280>)
 800a6c6:	42b0      	cmp	r0, r6
 800a6c8:	f000 8083 	beq.w	800a7d2 <HAL_GPIO_Init+0x21e>
 800a6cc:	f8df a16c 	ldr.w	sl, [pc, #364]	; 800a83c <HAL_GPIO_Init+0x288>
 800a6d0:	4550      	cmp	r0, sl
 800a6d2:	f000 8094 	beq.w	800a7fe <HAL_GPIO_Init+0x24a>
 800a6d6:	f8df a168 	ldr.w	sl, [pc, #360]	; 800a840 <HAL_GPIO_Init+0x28c>
 800a6da:	4550      	cmp	r0, sl
 800a6dc:	f000 8096 	beq.w	800a80c <HAL_GPIO_Init+0x258>
 800a6e0:	f8df a160 	ldr.w	sl, [pc, #352]	; 800a844 <HAL_GPIO_Init+0x290>
 800a6e4:	4550      	cmp	r0, sl
 800a6e6:	bf0c      	ite	eq
 800a6e8:	f04f 0a09 	moveq.w	sl, #9
 800a6ec:	f04f 0a0a 	movne.w	sl, #10
 800a6f0:	fa0a f909 	lsl.w	r9, sl, r9
 800a6f4:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a6f8:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a6fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a6fe:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 800a700:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 800a704:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800a706:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a70a:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 800a70c:	bf54      	ite	pl
 800a70e:	4023      	andpl	r3, r4
          temp |= iocurrent;
 800a710:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 800a714:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a718:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 800a71a:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800a71e:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a722:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 800a724:	bf54      	ite	pl
 800a726:	4023      	andpl	r3, r4
          temp |= iocurrent;
 800a728:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 800a72c:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a730:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800a732:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a736:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a73a:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 800a73c:	bf54      	ite	pl
 800a73e:	4023      	andpl	r3, r4
          temp |= iocurrent;
 800a740:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 800a744:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a748:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 800a74a:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a74e:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 800a750:	bf54      	ite	pl
 800a752:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 800a754:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a758:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800a75c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a760:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 800a762:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a764:	f10c 0c02 	add.w	ip, ip, #2
 800a768:	fa33 f402 	lsrs.w	r4, r3, r2
 800a76c:	f47f af30 	bne.w	800a5d0 <HAL_GPIO_Init+0x1c>
  }
}
 800a770:	b003      	add	sp, #12
 800a772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800a776:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a778:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a77c:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a77e:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a780:	fa03 f30c 	lsl.w	r3, r3, ip
 800a784:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 800a788:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a78a:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 800a78c:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a790:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a794:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a798:	4093      	lsls	r3, r2
 800a79a:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 800a79e:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a7a0:	684b      	ldr	r3, [r1, #4]
 800a7a2:	f003 0303 	and.w	r3, r3, #3
 800a7a6:	e727      	b.n	800a5f8 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a7a8:	f04f 0a03 	mov.w	sl, #3
 800a7ac:	fa0a f909 	lsl.w	r9, sl, r9
 800a7b0:	ea43 0309 	orr.w	r3, r3, r9
 800a7b4:	e7a0      	b.n	800a6f8 <HAL_GPIO_Init+0x144>
 800a7b6:	f04f 0a01 	mov.w	sl, #1
 800a7ba:	fa0a f909 	lsl.w	r9, sl, r9
 800a7be:	ea43 0309 	orr.w	r3, r3, r9
 800a7c2:	e799      	b.n	800a6f8 <HAL_GPIO_Init+0x144>
 800a7c4:	f04f 0a02 	mov.w	sl, #2
 800a7c8:	fa0a f909 	lsl.w	r9, sl, r9
 800a7cc:	ea43 0309 	orr.w	r3, r3, r9
 800a7d0:	e792      	b.n	800a6f8 <HAL_GPIO_Init+0x144>
 800a7d2:	f04f 0a06 	mov.w	sl, #6
 800a7d6:	fa0a f909 	lsl.w	r9, sl, r9
 800a7da:	ea43 0309 	orr.w	r3, r3, r9
 800a7de:	e78b      	b.n	800a6f8 <HAL_GPIO_Init+0x144>
 800a7e0:	f04f 0a04 	mov.w	sl, #4
 800a7e4:	fa0a f909 	lsl.w	r9, sl, r9
 800a7e8:	ea43 0309 	orr.w	r3, r3, r9
 800a7ec:	e784      	b.n	800a6f8 <HAL_GPIO_Init+0x144>
 800a7ee:	4770      	bx	lr
 800a7f0:	f04f 0a05 	mov.w	sl, #5
 800a7f4:	fa0a f909 	lsl.w	r9, sl, r9
 800a7f8:	ea43 0309 	orr.w	r3, r3, r9
 800a7fc:	e77c      	b.n	800a6f8 <HAL_GPIO_Init+0x144>
 800a7fe:	f04f 0a07 	mov.w	sl, #7
 800a802:	fa0a f909 	lsl.w	r9, sl, r9
 800a806:	ea43 0309 	orr.w	r3, r3, r9
 800a80a:	e775      	b.n	800a6f8 <HAL_GPIO_Init+0x144>
 800a80c:	f04f 0a08 	mov.w	sl, #8
 800a810:	fa0a f909 	lsl.w	r9, sl, r9
 800a814:	ea43 0309 	orr.w	r3, r3, r9
 800a818:	e76e      	b.n	800a6f8 <HAL_GPIO_Init+0x144>
 800a81a:	bf00      	nop
 800a81c:	58024400 	.word	0x58024400
 800a820:	58020000 	.word	0x58020000
 800a824:	58020800 	.word	0x58020800
 800a828:	58020c00 	.word	0x58020c00
 800a82c:	58021000 	.word	0x58021000
 800a830:	58021400 	.word	0x58021400
 800a834:	58021800 	.word	0x58021800
 800a838:	58020400 	.word	0x58020400
 800a83c:	58021c00 	.word	0x58021c00
 800a840:	58022000 	.word	0x58022000
 800a844:	58022400 	.word	0x58022400

0800a848 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a848:	6903      	ldr	r3, [r0, #16]
 800a84a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800a84c:	bf14      	ite	ne
 800a84e:	2001      	movne	r0, #1
 800a850:	2000      	moveq	r0, #0
 800a852:	4770      	bx	lr

0800a854 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a854:	b902      	cbnz	r2, 800a858 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a856:	0409      	lsls	r1, r1, #16
 800a858:	6181      	str	r1, [r0, #24]
  }
}
 800a85a:	4770      	bx	lr

0800a85c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a85c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a85e:	ea01 0203 	and.w	r2, r1, r3
 800a862:	ea21 0103 	bic.w	r1, r1, r3
 800a866:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a86a:	6181      	str	r1, [r0, #24]
}
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop

0800a870 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a874:	6803      	ldr	r3, [r0, #0]
{
 800a876:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a878:	699a      	ldr	r2, [r3, #24]
 800a87a:	0694      	lsls	r4, r2, #26
 800a87c:	d46d      	bmi.n	800a95a <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
 800a87e:	4605      	mov	r5, r0
 800a880:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a882:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 800a886:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a888:	f014 0410 	ands.w	r4, r4, #16
 800a88c:	d068      	beq.n	800a960 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
 800a88e:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a890:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 800a894:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a896:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a898:	46b2      	mov	sl, r6
 800a89a:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a89c:	699a      	ldr	r2, [r3, #24]
 800a89e:	d161      	bne.n	800a964 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
 800a8a0:	0690      	lsls	r0, r2, #26
 800a8a2:	f100 8085 	bmi.w	800a9b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 800a8a6:	f1ba 0f00 	cmp.w	sl, #0
 800a8aa:	d105      	bne.n	800a8b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 800a8ac:	699c      	ldr	r4, [r3, #24]
 800a8ae:	06a1      	lsls	r1, r4, #26
 800a8b0:	d5fc      	bpl.n	800a8ac <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a8b6:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
 800a8b8:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
 800a8bc:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 800a8be:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a8c0:	05d0      	lsls	r0, r2, #23
 800a8c2:	d535      	bpl.n	800a930 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a8c4:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a8c8:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800a8ca:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a8ce:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a8d0:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a8d2:	d505      	bpl.n	800a8e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a8d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800a8d8:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a8dc:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a8de:	682b      	ldr	r3, [r5, #0]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a8e0:	0597      	lsls	r7, r2, #22
 800a8e2:	d505      	bpl.n	800a8f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a8e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800a8e8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a8ec:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a8ee:	682b      	ldr	r3, [r5, #0]
 800a8f0:	699a      	ldr	r2, [r3, #24]
 800a8f2:	0790      	lsls	r0, r2, #30
 800a8f4:	d502      	bpl.n	800a8fc <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	699a      	ldr	r2, [r3, #24]
 800a8fe:	07d1      	lsls	r1, r2, #31
 800a900:	d404      	bmi.n	800a90c <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a902:	699a      	ldr	r2, [r3, #24]
 800a904:	f042 0201 	orr.w	r2, r2, #1
 800a908:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a90a:	682b      	ldr	r3, [r5, #0]
 800a90c:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a90e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800a910:	4835      	ldr	r0, [pc, #212]	; (800a9e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
 800a912:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 800a914:	4002      	ands	r2, r0
      return HAL_ERROR;
 800a916:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800a918:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800a91a:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a91c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800a920:	4323      	orrs	r3, r4
 800a922:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a924:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a928:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 800a92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a930:	0550      	lsls	r0, r2, #21
 800a932:	d4cf      	bmi.n	800a8d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a934:	0596      	lsls	r6, r2, #22
 800a936:	d4d5      	bmi.n	800a8e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
 800a938:	2900      	cmp	r1, #0
 800a93a:	d1d9      	bne.n	800a8f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a93c:	f7fe f9d8 	bl	8008cf0 <HAL_GetTick>
 800a940:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a944:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a946:	42b8      	cmp	r0, r7
 800a948:	d800      	bhi.n	800a94c <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
 800a94a:	b91f      	cbnz	r7, 800a954 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a94c:	699a      	ldr	r2, [r3, #24]
 800a94e:	f012 0220 	ands.w	r2, r2, #32
 800a952:	d032      	beq.n	800a9ba <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a954:	699a      	ldr	r2, [r3, #24]
 800a956:	0692      	lsls	r2, r2, #26
 800a958:	d595      	bpl.n	800a886 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800a95a:	2000      	movs	r0, #0
}
 800a95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800a960:	4621      	mov	r1, r4
 800a962:	e7ac      	b.n	800a8be <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a964:	0692      	lsls	r2, r2, #26
 800a966:	d423      	bmi.n	800a9b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 800a968:	f1ba 0f00 	cmp.w	sl, #0
 800a96c:	d1a4      	bne.n	800a8b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a96e:	f7fe f9bf 	bl	8008cf0 <HAL_GetTick>
 800a972:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a974:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a976:	4287      	cmp	r7, r0
 800a978:	d301      	bcc.n	800a97e <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
 800a97a:	2f00      	cmp	r7, #0
 800a97c:	d18d      	bne.n	800a89a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a97e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800a980:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a984:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800a986:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a988:	0409      	lsls	r1, r1, #16
 800a98a:	d503      	bpl.n	800a994 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
 800a98c:	0441      	lsls	r1, r0, #17
 800a98e:	d401      	bmi.n	800a994 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800a990:	2a20      	cmp	r2, #32
 800a992:	d11f      	bne.n	800a9d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a994:	699a      	ldr	r2, [r3, #24]
 800a996:	0690      	lsls	r0, r2, #26
 800a998:	f53f af7f 	bmi.w	800a89a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a99c:	f7fe f9a8 	bl	8008cf0 <HAL_GetTick>
 800a9a0:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a9a2:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a9a4:	2819      	cmp	r0, #25
 800a9a6:	d9f5      	bls.n	800a994 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a9a8:	2620      	movs	r6, #32
              status = HAL_ERROR;
 800a9aa:	f04f 0a01 	mov.w	sl, #1
 800a9ae:	e774      	b.n	800a89a <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
 800a9b0:	f1ba 0f00 	cmp.w	sl, #0
 800a9b4:	f43f af7d 	beq.w	800a8b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 800a9b8:	e77e      	b.n	800a8b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9ba:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a9bc:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 800a9be:	2001      	movs	r0, #1
 800a9c0:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9c4:	430b      	orrs	r3, r1
 800a9c6:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a9c8:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9cc:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800a9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9da:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800a9dc:	f7fe f988 	bl	8008cf0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9e0:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	e7d6      	b.n	800a994 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800a9e6:	bf00      	nop
 800a9e8:	fe00e800 	.word	0xfe00e800

0800a9ec <HAL_I2C_Init>:
  if (hi2c == NULL)
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d056      	beq.n	800aa9e <HAL_I2C_Init+0xb2>
{
 800a9f0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a9f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d049      	beq.n	800aa94 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 800aa00:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa02:	2324      	movs	r3, #36	; 0x24
 800aa04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800aa08:	6813      	ldr	r3, [r2, #0]
 800aa0a:	f023 0301 	bic.w	r3, r3, #1
 800aa0e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800aa10:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aa14:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800aa18:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800aa1a:	6822      	ldr	r2, [r4, #0]
 800aa1c:	6893      	ldr	r3, [r2, #8]
 800aa1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa22:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aa24:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aa26:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aa28:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aa2a:	68a3      	ldr	r3, [r4, #8]
 800aa2c:	bf0c      	ite	eq
 800aa2e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aa32:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800aa36:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aa38:	68e3      	ldr	r3, [r4, #12]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d103      	bne.n	800aa46 <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa44:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aa46:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800aa48:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aa4c:	4b15      	ldr	r3, [pc, #84]	; (800aaa4 <HAL_I2C_Init+0xb8>)
 800aa4e:	6851      	ldr	r1, [r2, #4]
 800aa50:	430b      	orrs	r3, r1
 800aa52:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aa54:	6822      	ldr	r2, [r4, #0]
 800aa56:	68d3      	ldr	r3, [r2, #12]
 800aa58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa5c:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800aa5e:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aa60:	6821      	ldr	r1, [r4, #0]
 800aa62:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800aa66:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa68:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aa6a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800aa6e:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aa70:	6821      	ldr	r1, [r4, #0]
 800aa72:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800aa76:	4303      	orrs	r3, r0
  return HAL_OK;
 800aa78:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aa7a:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 800aa7c:	6821      	ldr	r1, [r4, #0]
 800aa7e:	680b      	ldr	r3, [r1, #0]
 800aa80:	f043 0301 	orr.w	r3, r3, #1
 800aa84:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa86:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800aa88:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa8c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa8e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800aa92:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800aa94:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800aa98:	f7fa fdba 	bl	8005610 <HAL_I2C_MspInit>
 800aa9c:	e7b0      	b.n	800aa00 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800aa9e:	2001      	movs	r0, #1
}
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	02008000 	.word	0x02008000

0800aaa8 <HAL_I2C_Master_Transmit>:
{
 800aaa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800aaae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800aab2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	d12c      	bne.n	800ab12 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
 800aab8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800aabc:	4683      	mov	fp, r0
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d027      	beq.n	800ab12 <HAL_I2C_Master_Transmit+0x6a>
 800aac2:	2301      	movs	r3, #1
 800aac4:	468a      	mov	sl, r1
 800aac6:	4616      	mov	r6, r2
 800aac8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800aacc:	f7fe f910 	bl	8008cf0 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aad0:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
 800aad4:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aad6:	699a      	ldr	r2, [r3, #24]
 800aad8:	0417      	lsls	r7, r2, #16
 800aada:	d51d      	bpl.n	800ab18 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aadc:	f7fe f908 	bl	8008cf0 <HAL_GetTick>
 800aae0:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aae4:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aae8:	2819      	cmp	r0, #25
 800aaea:	d9f4      	bls.n	800aad6 <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aaec:	699a      	ldr	r2, [r3, #24]
 800aaee:	0410      	lsls	r0, r2, #16
 800aaf0:	d5f1      	bpl.n	800aad6 <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aaf2:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aaf6:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaf8:	2200      	movs	r2, #0
      return HAL_ERROR;
 800aafa:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aafc:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 800aafe:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab02:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ab06:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab0a:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 800ab0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800ab12:	2002      	movs	r0, #2
}
 800ab14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ab18:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab1a:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 800ab1c:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ab20:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ab24:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 800ab26:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ab2a:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab2e:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 800ab32:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab36:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 800ab3a:	b292      	uxth	r2, r2
 800ab3c:	2aff      	cmp	r2, #255	; 0xff
 800ab3e:	d87e      	bhi.n	800ac3e <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800ab40:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab44:	49ad      	ldr	r1, [pc, #692]	; (800adfc <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
 800ab46:	b292      	uxth	r2, r2
 800ab48:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ab4c:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab4e:	6858      	ldr	r0, [r3, #4]
 800ab50:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab52:	f3ca 0109 	ubfx	r1, sl, #0, #10
 800ab56:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab5a:	4301      	orrs	r1, r0
 800ab5c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800ab60:	49a7      	ldr	r1, [pc, #668]	; (800ae00 <HAL_I2C_Master_Transmit+0x358>)
 800ab62:	4311      	orrs	r1, r2
 800ab64:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ab66:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 800ab6a:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 8107 	beq.w	800ad84 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ab76:	f8db 3000 	ldr.w	r3, [fp]
 800ab7a:	699c      	ldr	r4, [r3, #24]
 800ab7c:	f014 0402 	ands.w	r4, r4, #2
 800ab80:	f040 80c5 	bne.w	800ad0e <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
 800ab84:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ab86:	f012 0210 	ands.w	r2, r2, #16
 800ab8a:	f000 808d 	beq.w	800aca8 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab8e:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 800ab90:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 800ab92:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab94:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ab96:	f8db 3000 	ldr.w	r3, [fp]
 800ab9a:	1c69      	adds	r1, r5, #1
 800ab9c:	699a      	ldr	r2, [r3, #24]
 800ab9e:	f040 8085 	bne.w	800acac <HAL_I2C_Master_Transmit+0x204>
 800aba2:	0690      	lsls	r0, r2, #26
 800aba4:	f100 8106 	bmi.w	800adb4 <HAL_I2C_Master_Transmit+0x30c>
 800aba8:	b937      	cbnz	r7, 800abb8 <HAL_I2C_Master_Transmit+0x110>
 800abaa:	699a      	ldr	r2, [r3, #24]
 800abac:	0691      	lsls	r1, r2, #26
 800abae:	d5fc      	bpl.n	800abaa <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abb0:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800abb4:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
 800abb8:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 800abbc:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800abbe:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800abc0:	05ce      	lsls	r6, r1, #23
 800abc2:	d54b      	bpl.n	800ac5c <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800abc4:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800abc8:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800abca:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800abce:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800abd0:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800abd4:	d506      	bpl.n	800abe4 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800abd6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800abda:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800abde:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800abe0:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800abe4:	0589      	lsls	r1, r1, #22
 800abe6:	d506      	bpl.n	800abf6 <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800abe8:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800abec:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800abf0:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800abf2:	f8db 3000 	ldr.w	r3, [fp]
 800abf6:	6999      	ldr	r1, [r3, #24]
 800abf8:	078e      	lsls	r6, r1, #30
 800abfa:	d503      	bpl.n	800ac04 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
 800abfc:	2100      	movs	r1, #0
 800abfe:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac00:	f8db 3000 	ldr.w	r3, [fp]
 800ac04:	6999      	ldr	r1, [r3, #24]
 800ac06:	07cd      	lsls	r5, r1, #31
 800ac08:	d405      	bmi.n	800ac16 <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ac0a:	6999      	ldr	r1, [r3, #24]
 800ac0c:	f041 0101 	orr.w	r1, r1, #1
 800ac10:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800ac12:	f8db 3000 	ldr.w	r3, [fp]
 800ac16:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac18:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 800ac1a:	487a      	ldr	r0, [pc, #488]	; (800ae04 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
 800ac1c:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800ac1e:	4001      	ands	r1, r0
        return HAL_ERROR;
 800ac20:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800ac22:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800ac24:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800ac28:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ac32:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac36:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 800ac3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac3e:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800ac40:	496e      	ldr	r1, [pc, #440]	; (800adfc <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac42:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800ac46:	685a      	ldr	r2, [r3, #4]
 800ac48:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac4a:	f3ca 0109 	ubfx	r1, sl, #0, #10
 800ac4e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800ac52:	4311      	orrs	r1, r2
 800ac54:	4a6c      	ldr	r2, [pc, #432]	; (800ae08 <HAL_I2C_Master_Transmit+0x360>)
 800ac56:	430a      	orrs	r2, r1
 800ac58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ac5a:	e784      	b.n	800ab66 <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ac5c:	054c      	lsls	r4, r1, #21
 800ac5e:	d4ba      	bmi.n	800abd6 <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ac60:	058f      	lsls	r7, r1, #22
 800ac62:	d4c1      	bmi.n	800abe8 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d1c6      	bne.n	800abf6 <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
 800ac68:	1c6c      	adds	r4, r5, #1
 800ac6a:	d086      	beq.n	800ab7a <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac6c:	f7fe f840 	bl	8008cf0 <HAL_GetTick>
 800ac70:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ac74:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac78:	4285      	cmp	r5, r0
 800ac7a:	d302      	bcc.n	800ac82 <HAL_I2C_Master_Transmit+0x1da>
 800ac7c:	2d00      	cmp	r5, #0
 800ac7e:	f47f af7c 	bne.w	800ab7a <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ac82:	699a      	ldr	r2, [r3, #24]
 800ac84:	f012 0202 	ands.w	r2, r2, #2
 800ac88:	f47f af77 	bne.w	800ab7a <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac8c:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ac90:	2120      	movs	r1, #32
        return HAL_ERROR;
 800ac92:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800ac94:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac98:	430b      	orrs	r3, r1
 800ac9a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ac9e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aca2:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
 800aca6:	e735      	b.n	800ab14 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 800aca8:	4610      	mov	r0, r2
 800acaa:	e788      	b.n	800abbe <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800acac:	0692      	lsls	r2, r2, #26
 800acae:	f100 8081 	bmi.w	800adb4 <HAL_I2C_Master_Transmit+0x30c>
 800acb2:	2f00      	cmp	r7, #0
 800acb4:	d180      	bne.n	800abb8 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800acb6:	f7fe f81b 	bl	8008cf0 <HAL_GetTick>
 800acba:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800acbc:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800acc0:	4285      	cmp	r5, r0
 800acc2:	d302      	bcc.n	800acca <HAL_I2C_Master_Transmit+0x222>
 800acc4:	2d00      	cmp	r5, #0
 800acc6:	f47f af68 	bne.w	800ab9a <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800acca:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800accc:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800acd0:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800acd2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800acd4:	0409      	lsls	r1, r1, #16
 800acd6:	d50c      	bpl.n	800acf2 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
 800acd8:	0441      	lsls	r1, r0, #17
 800acda:	d40a      	bmi.n	800acf2 <HAL_I2C_Master_Transmit+0x24a>
 800acdc:	2a20      	cmp	r2, #32
 800acde:	d008      	beq.n	800acf2 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ace6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800ace8:	f7fe f802 	bl	8008cf0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800acec:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 800acf0:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800acf2:	699a      	ldr	r2, [r3, #24]
 800acf4:	0690      	lsls	r0, r2, #26
 800acf6:	f53f af50 	bmi.w	800ab9a <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800acfa:	f7fd fff9 	bl	8008cf0 <HAL_GetTick>
 800acfe:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ad00:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ad04:	2819      	cmp	r0, #25
 800ad06:	d9f4      	bls.n	800acf2 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ad08:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800ad0a:	2701      	movs	r7, #1
 800ad0c:	e745      	b.n	800ab9a <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ad0e:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800ad12:	7812      	ldrb	r2, [r2, #0]
 800ad14:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ad16:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 800ad1a:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
 800ad1e:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800ad20:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
 800ad24:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800ad26:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800ad28:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800ad2a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800ad2c:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ad30:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800ad34:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ad38:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800ad3a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f47f af13 	bne.w	800ab6a <HAL_I2C_Master_Transmit+0xc2>
 800ad44:	2a00      	cmp	r2, #0
 800ad46:	f43f af10 	beq.w	800ab6a <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad4a:	f8db 2000 	ldr.w	r2, [fp]
 800ad4e:	1c68      	adds	r0, r5, #1
 800ad50:	d134      	bne.n	800adbc <HAL_I2C_Master_Transmit+0x314>
 800ad52:	6993      	ldr	r3, [r2, #24]
 800ad54:	0619      	lsls	r1, r3, #24
 800ad56:	d5fc      	bpl.n	800ad52 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad58:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	2bff      	cmp	r3, #255	; 0xff
 800ad60:	d958      	bls.n	800ae14 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad62:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800ad64:	4929      	ldr	r1, [pc, #164]	; (800ae0c <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad66:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800ad6a:	6853      	ldr	r3, [r2, #4]
 800ad6c:	400b      	ands	r3, r1
 800ad6e:	4928      	ldr	r1, [pc, #160]	; (800ae10 <HAL_I2C_Master_Transmit+0x368>)
 800ad70:	ea4a 0303 	orr.w	r3, sl, r3
 800ad74:	4319      	orrs	r1, r3
 800ad76:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
 800ad78:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f47f aef9 	bne.w	800ab76 <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad84:	4642      	mov	r2, r8
 800ad86:	4629      	mov	r1, r5
 800ad88:	4658      	mov	r0, fp
 800ad8a:	f7ff fd71 	bl	800a870 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d151      	bne.n	800ae36 <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad92:	f8db 3000 	ldr.w	r3, [fp]
 800ad96:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 800ad98:	4c1a      	ldr	r4, [pc, #104]	; (800ae04 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad9a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800ad9c:	f8db 1000 	ldr.w	r1, [fp]
 800ada0:	684b      	ldr	r3, [r1, #4]
 800ada2:	4023      	ands	r3, r4
 800ada4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800ada6:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800adaa:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800adae:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 800adb2:	e6af      	b.n	800ab14 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
 800adb4:	2f00      	cmp	r7, #0
 800adb6:	f43f aefb 	beq.w	800abb0 <HAL_I2C_Master_Transmit+0x108>
 800adba:	e6fd      	b.n	800abb8 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800adbc:	6993      	ldr	r3, [r2, #24]
 800adbe:	061b      	lsls	r3, r3, #24
 800adc0:	d4ca      	bmi.n	800ad58 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adc2:	f7fd ff95 	bl	8008cf0 <HAL_GetTick>
 800adc6:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800adca:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adce:	4285      	cmp	r5, r0
 800add0:	d301      	bcc.n	800add6 <HAL_I2C_Master_Transmit+0x32e>
 800add2:	2d00      	cmp	r5, #0
 800add4:	d1bb      	bne.n	800ad4e <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800add6:	6993      	ldr	r3, [r2, #24]
 800add8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800addc:	d1b7      	bne.n	800ad4e <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800adde:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ade2:	2120      	movs	r1, #32
          return HAL_ERROR;
 800ade4:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800ade6:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800adea:	430a      	orrs	r2, r1
 800adec:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800adf0:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800adf4:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
 800adf8:	e68c      	b.n	800ab14 <HAL_I2C_Master_Transmit+0x6c>
 800adfa:	bf00      	nop
 800adfc:	fc009800 	.word	0xfc009800
 800ae00:	02002000 	.word	0x02002000
 800ae04:	fe00e800 	.word	0xfe00e800
 800ae08:	01ff2000 	.word	0x01ff2000
 800ae0c:	fc009c00 	.word	0xfc009c00
 800ae10:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
 800ae14:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800ae18:	4808      	ldr	r0, [pc, #32]	; (800ae3c <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
 800ae1a:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ae1c:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 800ae1e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800ae22:	6853      	ldr	r3, [r2, #4]
 800ae24:	4003      	ands	r3, r0
 800ae26:	ea4a 0303 	orr.w	r3, sl, r3
 800ae2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ae2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ae32:	6053      	str	r3, [r2, #4]
}
 800ae34:	e699      	b.n	800ab6a <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
 800ae36:	2001      	movs	r0, #1
 800ae38:	e66c      	b.n	800ab14 <HAL_I2C_Master_Transmit+0x6c>
 800ae3a:	bf00      	nop
 800ae3c:	fc009c00 	.word	0xfc009c00

0800ae40 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ae40:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 800ae42:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ae44:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ae46:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 800ae48:	b103      	cbz	r3, 800ae4c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800ae4a:	4718      	bx	r3
}
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop

0800ae50 <HAL_I2C_SlaveTxCpltCallback>:
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop

0800ae54 <HAL_I2C_SlaveRxCpltCallback>:
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop

0800ae58 <I2C_ITSlaveSeqCplt>:
{
 800ae58:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ae5a:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae5c:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ae5e:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae60:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ae64:	0451      	lsls	r1, r2, #17
 800ae66:	d526      	bpl.n	800aeb6 <I2C_ITSlaveSeqCplt+0x5e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ae6e:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ae70:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800ae74:	2b29      	cmp	r3, #41	; 0x29
 800ae76:	d028      	beq.n	800aeca <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ae78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800ae7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae7e:	d000      	beq.n	800ae82 <I2C_ITSlaveSeqCplt+0x2a>
}
 800ae80:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ae82:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ae84:	2322      	movs	r3, #34	; 0x22
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ae86:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 800ae88:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ae8c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ae90:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ae92:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ae96:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ae98:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800ae9c:	2a28      	cmp	r2, #40	; 0x28
 800ae9e:	bf0c      	ite	eq
 800aea0:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 800aea4:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aea8:	4013      	ands	r3, r2
 800aeaa:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 800aeac:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aeb0:	f7ff ffd0 	bl	800ae54 <HAL_I2C_SlaveRxCpltCallback>
}
 800aeb4:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800aeb6:	0412      	lsls	r2, r2, #16
 800aeb8:	d5da      	bpl.n	800ae70 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aec0:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800aec2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800aec6:	2b29      	cmp	r3, #41	; 0x29
 800aec8:	d1d6      	bne.n	800ae78 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800aeca:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800aecc:	2321      	movs	r3, #33	; 0x21
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aece:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 800aed0:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800aed4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800aed8:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800aeda:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aede:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800aee0:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800aee4:	2a28      	cmp	r2, #40	; 0x28
 800aee6:	bf0c      	ite	eq
 800aee8:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 800aeec:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800aef0:	4013      	ands	r3, r2
 800aef2:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 800aef4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800aef8:	f7ff ffaa 	bl	800ae50 <HAL_I2C_SlaveTxCpltCallback>
}
 800aefc:	bd08      	pop	{r3, pc}
 800aefe:	bf00      	nop

0800af00 <HAL_I2C_AddrCallback>:
}
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop

0800af04 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800af04:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 800af06:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800af08:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800af0a:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800af0c:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800af0e:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800af10:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800af12:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 800af14:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800af18:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800af1c:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800af1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800af22:	d10f      	bne.n	800af44 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800af24:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800af28:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800af2c:	f013 0306 	ands.w	r3, r3, #6
 800af30:	d106      	bne.n	800af40 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
 800af32:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800af34:	3501      	adds	r5, #1
 800af36:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800af38:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800af3a:	2d02      	cmp	r5, #2
 800af3c:	d00c      	beq.n	800af58 <I2C_ITAddrCplt.part.0+0x54>
}
 800af3e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800af40:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 800af4a:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 800af4c:	2300      	movs	r3, #0
 800af4e:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800af52:	f7ff ffd5 	bl	800af00 <HAL_I2C_AddrCallback>
}
 800af56:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800af58:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 800af5a:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800af5c:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 800af5e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800af62:	f7ff ffcd 	bl	800af00 <HAL_I2C_AddrCallback>
}
 800af66:	bd70      	pop	{r4, r5, r6, pc}

0800af68 <HAL_I2C_ListenCpltCallback>:
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop

0800af6c <HAL_I2C_ErrorCallback>:
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop

0800af70 <HAL_I2C_AbortCpltCallback>:
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop

0800af74 <I2C_DMAAbort>:
{
 800af74:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800af76:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 800af78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800af7a:	b10b      	cbz	r3, 800af80 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800af7c:	2200      	movs	r2, #0
 800af7e:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 800af80:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800af82:	b10b      	cbz	r3, 800af88 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800af84:	2200      	movs	r2, #0
 800af86:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800af88:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800af8c:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 800af8e:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800af92:	d005      	beq.n	800afa0 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 800af94:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800af96:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800af9a:	f7ff ffe7 	bl	800af6c <HAL_I2C_ErrorCallback>
}
 800af9e:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800afa0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800afa2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800afa6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800afaa:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800afac:	f7ff ffe0 	bl	800af70 <HAL_I2C_AbortCpltCallback>
}
 800afb0:	bd08      	pop	{r3, pc}
 800afb2:	bf00      	nop

0800afb4 <I2C_ITError>:
{
 800afb4:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800afb6:	4a5d      	ldr	r2, [pc, #372]	; (800b12c <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800afb8:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800afba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800afbe:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800afc0:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800afc4:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800afc6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800afc8:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800afca:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800afcc:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 800afce:	ea41 0102 	orr.w	r1, r1, r2
 800afd2:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800afd4:	d874      	bhi.n	800b0c0 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800afd6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800afda:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800afde:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800afe2:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800afe4:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800afe8:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800afea:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800afec:	bf14      	ite	ne
 800afee:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 800aff2:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800aff6:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800aff8:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800affc:	bf18      	it	ne
 800affe:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b002:	4013      	ands	r3, r2
 800b004:	4a4a      	ldr	r2, [pc, #296]	; (800b130 <I2C_ITError+0x17c>)
 800b006:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b008:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b00c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 800b00e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b010:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b012:	b118      	cbz	r0, 800b01c <I2C_ITError+0x68>
 800b014:	2b11      	cmp	r3, #17
 800b016:	d01e      	beq.n	800b056 <I2C_ITError+0xa2>
 800b018:	2b21      	cmp	r3, #33	; 0x21
 800b01a:	d01c      	beq.n	800b056 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b01c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b01e:	b118      	cbz	r0, 800b028 <I2C_ITError+0x74>
 800b020:	2b12      	cmp	r3, #18
 800b022:	d030      	beq.n	800b086 <I2C_ITError+0xd2>
 800b024:	2b22      	cmp	r3, #34	; 0x22
 800b026:	d02e      	beq.n	800b086 <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b028:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b02c:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 800b02e:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b032:	d006      	beq.n	800b042 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 800b034:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800b036:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b038:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b03c:	f7ff ff96 	bl	800af6c <HAL_I2C_ErrorCallback>
}
 800b040:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800b042:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 800b044:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800b046:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800b04a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b04e:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800b050:	f7ff ff8e 	bl	800af70 <HAL_I2C_AbortCpltCallback>
}
 800b054:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	0451      	lsls	r1, r2, #17
 800b05c:	d45f      	bmi.n	800b11e <I2C_ITError+0x16a>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b05e:	f7ff faa3 	bl	800a5a8 <HAL_DMA_GetState>
 800b062:	2801      	cmp	r0, #1
 800b064:	d0e0      	beq.n	800b028 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b066:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b068:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b06a:	4932      	ldr	r1, [pc, #200]	; (800b134 <I2C_ITError+0x180>)
 800b06c:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800b06e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b072:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b074:	f7fe fd2e 	bl	8009ad4 <HAL_DMA_Abort_IT>
 800b078:	2800      	cmp	r0, #0
 800b07a:	d0e1      	beq.n	800b040 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b07c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 800b07e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b082:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b084:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	0412      	lsls	r2, r2, #16
 800b08c:	d504      	bpl.n	800b098 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b094:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b096:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b098:	f7ff fa86 	bl	800a5a8 <HAL_DMA_GetState>
 800b09c:	2801      	cmp	r0, #1
 800b09e:	d0c3      	beq.n	800b028 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b0a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 800b0a2:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b0a4:	4923      	ldr	r1, [pc, #140]	; (800b134 <I2C_ITError+0x180>)
 800b0a6:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800b0a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b0ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b0ae:	f7fe fd11 	bl	8009ad4 <HAL_DMA_Abort_IT>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d0c4      	beq.n	800b040 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b0b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 800b0b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b0bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b0be:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b0c0:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b0c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b0c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b0ca:	6813      	ldr	r3, [r2, #0]
 800b0cc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800b0d0:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b0d2:	6803      	ldr	r3, [r0, #0]
 800b0d4:	699a      	ldr	r2, [r3, #24]
 800b0d6:	0792      	lsls	r2, r2, #30
 800b0d8:	d501      	bpl.n	800b0de <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 800b0da:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0dc:	6803      	ldr	r3, [r0, #0]
 800b0de:	699a      	ldr	r2, [r3, #24]
 800b0e0:	07d6      	lsls	r6, r2, #31
 800b0e2:	d403      	bmi.n	800b0ec <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b0e4:	699a      	ldr	r2, [r3, #24]
 800b0e6:	f042 0201 	orr.w	r2, r2, #1
 800b0ea:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b0ec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b0f0:	2b60      	cmp	r3, #96	; 0x60
 800b0f2:	d012      	beq.n	800b11a <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
 800b0f4:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b0f6:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
 800b0f8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b0fc:	699a      	ldr	r2, [r3, #24]
 800b0fe:	0695      	lsls	r5, r2, #26
 800b100:	d50b      	bpl.n	800b11a <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b102:	699a      	ldr	r2, [r3, #24]
 800b104:	06d0      	lsls	r0, r2, #27
 800b106:	d506      	bpl.n	800b116 <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b108:	2210      	movs	r2, #16
 800b10a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b10c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b10e:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b110:	f042 0204 	orr.w	r2, r2, #4
 800b114:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b116:	2220      	movs	r2, #32
 800b118:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 800b11a:	2200      	movs	r2, #0
 800b11c:	e776      	b.n	800b00c <I2C_ITError+0x58>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b124:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b126:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b128:	e799      	b.n	800b05e <I2C_ITError+0xaa>
 800b12a:	bf00      	nop
 800b12c:	ffff0000 	.word	0xffff0000
 800b130:	0800b331 	.word	0x0800b331
 800b134:	0800af75 	.word	0x0800af75

0800b138 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b138:	6803      	ldr	r3, [r0, #0]
{
 800b13a:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b13c:	699a      	ldr	r2, [r3, #24]
 800b13e:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b140:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b142:	f412 7f80 	tst.w	r2, #256	; 0x100
 800b146:	d032      	beq.n	800b1ae <HAL_I2C_ER_IRQHandler+0x76>
 800b148:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b14c:	d021      	beq.n	800b192 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b14e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b150:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b154:	f041 0101 	orr.w	r1, r1, #1
 800b158:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b15a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b15c:	0553      	lsls	r3, r2, #21
 800b15e:	d507      	bpl.n	800b170 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b160:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b162:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b164:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b168:	f041 0108 	orr.w	r1, r1, #8
 800b16c:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b16e:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b170:	0592      	lsls	r2, r2, #22
 800b172:	d507      	bpl.n	800b184 <HAL_I2C_ER_IRQHandler+0x4c>
 800b174:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b176:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b178:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b17c:	f043 0302 	orr.w	r3, r3, #2
 800b180:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b182:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
 800b184:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b186:	f011 0f0b 	tst.w	r1, #11
 800b18a:	d10c      	bne.n	800b1a6 <HAL_I2C_ER_IRQHandler+0x6e>
}
 800b18c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b190:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b192:	0553      	lsls	r3, r2, #21
 800b194:	d4f6      	bmi.n	800b184 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b196:	0593      	lsls	r3, r2, #22
 800b198:	d5f4      	bpl.n	800b184 <HAL_I2C_ER_IRQHandler+0x4c>
 800b19a:	060a      	lsls	r2, r1, #24
 800b19c:	d4eb      	bmi.n	800b176 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
 800b19e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b1a0:	f011 0f0b 	tst.w	r1, #11
 800b1a4:	d0f2      	beq.n	800b18c <HAL_I2C_ER_IRQHandler+0x54>
}
 800b1a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 800b1aa:	f7ff bf03 	b.w	800afb4 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b1ae:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800b1b2:	d0f0      	beq.n	800b196 <HAL_I2C_ER_IRQHandler+0x5e>
 800b1b4:	0609      	lsls	r1, r1, #24
 800b1b6:	d5e5      	bpl.n	800b184 <HAL_I2C_ER_IRQHandler+0x4c>
 800b1b8:	e7d3      	b.n	800b162 <HAL_I2C_ER_IRQHandler+0x2a>
 800b1ba:	bf00      	nop

0800b1bc <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b1c0:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1c2:	2520      	movs	r5, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b1c4:	6810      	ldr	r0, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b1c6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1ca:	61d5      	str	r5, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b1cc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800b1d0:	2b21      	cmp	r3, #33	; 0x21
 800b1d2:	d16d      	bne.n	800b2b0 <I2C_ITSlaveCplt.constprop.0+0xf4>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b1d4:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b1d6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b1da:	682a      	ldr	r2, [r5, #0]
 800b1dc:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 800b1e0:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b1e2:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b1e4:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
 800b1e6:	4d50      	ldr	r5, [pc, #320]	; (800b328 <I2C_ITSlaveCplt.constprop.0+0x16c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b1e8:	6853      	ldr	r3, [r2, #4]
 800b1ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ee:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800b1f0:	6822      	ldr	r2, [r4, #0]
 800b1f2:	6853      	ldr	r3, [r2, #4]
 800b1f4:	402b      	ands	r3, r5
 800b1f6:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	699a      	ldr	r2, [r3, #24]
 800b1fc:	0792      	lsls	r2, r2, #30
 800b1fe:	d502      	bpl.n	800b206 <I2C_ITSlaveCplt.constprop.0+0x4a>
    hi2c->Instance->TXDR = 0x00U;
 800b200:	2200      	movs	r2, #0
 800b202:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	699a      	ldr	r2, [r3, #24]
 800b208:	07d6      	lsls	r6, r2, #31
 800b20a:	d403      	bmi.n	800b214 <I2C_ITSlaveCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b20c:	699a      	ldr	r2, [r3, #24]
 800b20e:	f042 0201 	orr.w	r2, r2, #1
 800b212:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b214:	0445      	lsls	r5, r0, #17
 800b216:	d556      	bpl.n	800b2c6 <I2C_ITSlaveCplt.constprop.0+0x10a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b218:	6822      	ldr	r2, [r4, #0]
 800b21a:	6813      	ldr	r3, [r2, #0]
 800b21c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b220:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 800b222:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b224:	b11b      	cbz	r3, 800b22e <I2C_ITSlaveCplt.constprop.0+0x72>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	6853      	ldr	r3, [r2, #4]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b22e:	074b      	lsls	r3, r1, #29
 800b230:	d508      	bpl.n	800b244 <I2C_ITSlaveCplt.constprop.0+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b232:	6822      	ldr	r2, [r4, #0]
 800b234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b236:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b238:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b23a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b23c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800b23e:	3301      	adds	r3, #1
 800b240:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b242:	bb72      	cbnz	r2, 800b2a2 <I2C_ITSlaveCplt.constprop.0+0xe6>
  if (hi2c->XferCount != 0U)
 800b244:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b246:	b29b      	uxth	r3, r3
 800b248:	b11b      	cbz	r3, 800b252 <I2C_ITSlaveCplt.constprop.0+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b24a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b24c:	f043 0304 	orr.w	r3, r3, #4
 800b250:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b252:	2600      	movs	r6, #0
 800b254:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b258:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800b25a:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b25c:	2d00      	cmp	r5, #0
 800b25e:	d13d      	bne.n	800b2dc <I2C_ITSlaveCplt.constprop.0+0x120>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b260:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b262:	4e32      	ldr	r6, [pc, #200]	; (800b32c <I2C_ITSlaveCplt.constprop.0+0x170>)
 800b264:	42b3      	cmp	r3, r6
 800b266:	d10e      	bne.n	800b286 <I2C_ITSlaveCplt.constprop.0+0xca>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b268:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b26c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800b26e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b272:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 800b274:	f04f 0320 	mov.w	r3, #32
 800b278:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b27c:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b27e:	d050      	beq.n	800b322 <I2C_ITSlaveCplt.constprop.0+0x166>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b280:	f7ff fde6 	bl	800ae50 <HAL_I2C_SlaveTxCpltCallback>
}
 800b284:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 800b286:	4620      	mov	r0, r4
 800b288:	f7ff fde6 	bl	800ae58 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800b28c:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b28e:	62e6      	str	r6, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 800b290:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800b292:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b296:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800b29a:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800b29c:	f7ff fe64 	bl	800af68 <HAL_I2C_ListenCpltCallback>
}
 800b2a0:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 800b2a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b2a4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b2a6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b2a8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	8563      	strh	r3, [r4, #42]	; 0x2a
 800b2ae:	e7c9      	b.n	800b244 <I2C_ITSlaveCplt.constprop.0+0x88>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b2b0:	2b22      	cmp	r3, #34	; 0x22
 800b2b2:	d197      	bne.n	800b1e4 <I2C_ITSlaveCplt.constprop.0+0x28>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b2b4:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b2b6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b2ba:	682a      	ldr	r2, [r5, #0]
 800b2bc:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 800b2c0:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b2c2:	6323      	str	r3, [r4, #48]	; 0x30
 800b2c4:	e78e      	b.n	800b1e4 <I2C_ITSlaveCplt.constprop.0+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b2c6:	0402      	lsls	r2, r0, #16
 800b2c8:	d5b1      	bpl.n	800b22e <I2C_ITSlaveCplt.constprop.0+0x72>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b2ca:	6822      	ldr	r2, [r4, #0]
 800b2cc:	6813      	ldr	r3, [r2, #0]
 800b2ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b2d2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800b2d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1a5      	bne.n	800b226 <I2C_ITSlaveCplt.constprop.0+0x6a>
 800b2da:	e7a8      	b.n	800b22e <I2C_ITSlaveCplt.constprop.0+0x72>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b2dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f7ff fe68 	bl	800afb4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b2e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b2e8:	2b28      	cmp	r3, #40	; 0x28
 800b2ea:	d1cb      	bne.n	800b284 <I2C_ITSlaveCplt.constprop.0+0xc8>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b2ec:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800b2ee:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2f0:	490e      	ldr	r1, [pc, #56]	; (800b32c <I2C_ITSlaveCplt.constprop.0+0x170>)
  HAL_I2C_ListenCpltCallback(hi2c);
 800b2f2:	4620      	mov	r0, r4
  hi2c->XferISR = NULL;
 800b2f4:	6366      	str	r6, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2f6:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2f8:	2110      	movs	r1, #16
  hi2c->PreviousState = I2C_STATE_NONE;
 800b2fa:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b2fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b300:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b304:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b308:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b30c:	6813      	ldr	r3, [r2, #0]
 800b30e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800b312:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b314:	6823      	ldr	r3, [r4, #0]
 800b316:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800b318:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800b31c:	f7ff fe24 	bl	800af68 <HAL_I2C_ListenCpltCallback>
}
 800b320:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b322:	f7ff fd97 	bl	800ae54 <HAL_I2C_SlaveRxCpltCallback>
}
 800b326:	bd70      	pop	{r4, r5, r6, pc}
 800b328:	fe00e800 	.word	0xfe00e800
 800b32c:	ffff0000 	.word	0xffff0000

0800b330 <I2C_Slave_ISR_IT>:
{
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800b332:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 800b336:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800b338:	2b01      	cmp	r3, #1
 800b33a:	f000 8081 	beq.w	800b440 <I2C_Slave_ISR_IT+0x110>
 800b33e:	4617      	mov	r7, r2
 800b340:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b342:	068a      	lsls	r2, r1, #26
 800b344:	4604      	mov	r4, r0
 800b346:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 800b348:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b34c:	d501      	bpl.n	800b352 <I2C_Slave_ISR_IT+0x22>
 800b34e:	06bb      	lsls	r3, r7, #26
 800b350:	d462      	bmi.n	800b418 <I2C_Slave_ISR_IT+0xe8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b352:	06ea      	lsls	r2, r5, #27
 800b354:	d51c      	bpl.n	800b390 <I2C_Slave_ISR_IT+0x60>
 800b356:	06fb      	lsls	r3, r7, #27
 800b358:	d51a      	bpl.n	800b390 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount == 0U)
 800b35a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d15f      	bne.n	800b422 <I2C_Slave_ISR_IT+0xf2>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b362:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b366:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800b36a:	b2d2      	uxtb	r2, r2
 800b36c:	d101      	bne.n	800b372 <I2C_Slave_ISR_IT+0x42>
 800b36e:	2a28      	cmp	r2, #40	; 0x28
 800b370:	d07f      	beq.n	800b472 <I2C_Slave_ISR_IT+0x142>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b372:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b376:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b378:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b37a:	6823      	ldr	r3, [r4, #0]
 800b37c:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b37e:	d102      	bne.n	800b386 <I2C_Slave_ISR_IT+0x56>
 800b380:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 800b384:	d162      	bne.n	800b44c <I2C_Slave_ISR_IT+0x11c>
  __HAL_UNLOCK(hi2c);
 800b386:	2300      	movs	r3, #0
  return HAL_OK;
 800b388:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 800b38a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b390:	076a      	lsls	r2, r5, #29
 800b392:	d40d      	bmi.n	800b3b0 <I2C_Slave_ISR_IT+0x80>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b394:	0728      	lsls	r0, r5, #28
 800b396:	d529      	bpl.n	800b3ec <I2C_Slave_ISR_IT+0xbc>
 800b398:	0739      	lsls	r1, r7, #28
 800b39a:	d527      	bpl.n	800b3ec <I2C_Slave_ISR_IT+0xbc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b39c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b3a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b3a4:	2b28      	cmp	r3, #40	; 0x28
 800b3a6:	d060      	beq.n	800b46a <I2C_Slave_ISR_IT+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	2208      	movs	r2, #8
 800b3ac:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b3ae:	e7ea      	b.n	800b386 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b3b0:	077b      	lsls	r3, r7, #29
 800b3b2:	d5ef      	bpl.n	800b394 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
 800b3b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	b16b      	cbz	r3, 800b3d6 <I2C_Slave_ISR_IT+0xa6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b3ba:	6822      	ldr	r2, [r4, #0]
 800b3bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b3c0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800b3c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800b3c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b3c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b3c8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800b3ca:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b3cc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b3ce:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800b3d0:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b3d2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b3d4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800b3d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1d3      	bne.n	800b386 <I2C_Slave_ISR_IT+0x56>
 800b3de:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 800b3e2:	d0d0      	beq.n	800b386 <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f7ff fd37 	bl	800ae58 <I2C_ITSlaveSeqCplt>
 800b3ea:	e7cc      	b.n	800b386 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b3ec:	07aa      	lsls	r2, r5, #30
 800b3ee:	d5ca      	bpl.n	800b386 <I2C_Slave_ISR_IT+0x56>
 800b3f0:	07bb      	lsls	r3, r7, #30
 800b3f2:	d5c8      	bpl.n	800b386 <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
 800b3f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	b323      	cbz	r3, 800b444 <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b3fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	7812      	ldrb	r2, [r2, #0]
 800b400:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b402:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800b404:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b406:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b408:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800b40a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b40c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b40e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800b410:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b412:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b414:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b416:	e7b6      	b.n	800b386 <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b418:	f7ff fed0 	bl	800b1bc <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b41c:	06ea      	lsls	r2, r5, #27
 800b41e:	d5b7      	bpl.n	800b390 <I2C_Slave_ISR_IT+0x60>
 800b420:	e799      	b.n	800b356 <I2C_Slave_ISR_IT+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	2210      	movs	r2, #16
 800b426:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b428:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b42a:	f043 0304 	orr.w	r3, r3, #4
 800b42e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b430:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800b434:	d1a7      	bne.n	800b386 <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b436:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b438:	4620      	mov	r0, r4
 800b43a:	f7ff fdbb 	bl	800afb4 <I2C_ITError>
 800b43e:	e7a2      	b.n	800b386 <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
 800b440:	2002      	movs	r0, #2
}
 800b442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b444:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800b448:	d19d      	bne.n	800b386 <I2C_Slave_ISR_IT+0x56>
 800b44a:	e7cb      	b.n	800b3e4 <I2C_Slave_ISR_IT+0xb4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	699a      	ldr	r2, [r3, #24]
 800b450:	0790      	lsls	r0, r2, #30
 800b452:	d502      	bpl.n	800b45a <I2C_Slave_ISR_IT+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 800b454:	2200      	movs	r2, #0
 800b456:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	699a      	ldr	r2, [r3, #24]
 800b45c:	07d1      	lsls	r1, r2, #31
 800b45e:	d4c1      	bmi.n	800b3e4 <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b460:	699a      	ldr	r2, [r3, #24]
 800b462:	f042 0201 	orr.w	r2, r2, #1
 800b466:	619a      	str	r2, [r3, #24]
 800b468:	e7bc      	b.n	800b3e4 <I2C_Slave_ISR_IT+0xb4>
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7ff fd4a 	bl	800af04 <I2C_ITAddrCplt.part.0>
 800b470:	e789      	b.n	800b386 <I2C_Slave_ISR_IT+0x56>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b472:	4918      	ldr	r1, [pc, #96]	; (800b4d4 <I2C_Slave_ISR_IT+0x1a4>)
  hi2c->State = HAL_I2C_STATE_READY;
 800b474:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b476:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 800b478:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b47a:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b47c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b47e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b482:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b486:	d512      	bpl.n	800b4ae <I2C_Slave_ISR_IT+0x17e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b488:	6822      	ldr	r2, [r4, #0]
 800b48a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b48c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b48e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b490:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b492:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800b494:	3301      	adds	r3, #1
 800b496:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b498:	b14a      	cbz	r2, 800b4ae <I2C_Slave_ISR_IT+0x17e>
      hi2c->XferCount--;
 800b49a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b49c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b49e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b4a0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b4a8:	f043 0304 	orr.w	r3, r3, #4
 800b4ac:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b4ae:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4b0:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b4b2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800b4b6:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b4b8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b4bc:	6813      	ldr	r3, [r2, #0]
 800b4be:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800b4c2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 800b4c8:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 800b4ca:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800b4ce:	f7ff fd4b 	bl	800af68 <HAL_I2C_ListenCpltCallback>
}
 800b4d2:	e758      	b.n	800b386 <I2C_Slave_ISR_IT+0x56>
 800b4d4:	ffff0000 	.word	0xffff0000

0800b4d8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4d8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800b4dc:	2a20      	cmp	r2, #32
 800b4de:	d129      	bne.n	800b534 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 800b4e0:	4603      	mov	r3, r0
{
 800b4e2:	b500      	push	{lr}
 800b4e4:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4e8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800b4ec:	2a01      	cmp	r2, #1
 800b4ee:	d023      	beq.n	800b538 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 800b4f0:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b4f2:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4f4:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 800b4f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b4fc:	2224      	movs	r2, #36	; 0x24
 800b4fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b502:	6802      	ldr	r2, [r0, #0]
 800b504:	f022 0201 	bic.w	r2, r2, #1
 800b508:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b50a:	6818      	ldr	r0, [r3, #0]
 800b50c:	6802      	ldr	r2, [r0, #0]
 800b50e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b512:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800b514:	6818      	ldr	r0, [r3, #0]
 800b516:	6802      	ldr	r2, [r0, #0]
 800b518:	4311      	orrs	r1, r2
 800b51a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800b51c:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 800b51e:	6819      	ldr	r1, [r3, #0]
 800b520:	680a      	ldr	r2, [r1, #0]
 800b522:	f042 0201 	orr.w	r2, r2, #1
 800b526:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b528:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b52c:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b530:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800b534:	2002      	movs	r0, #2
}
 800b536:	4770      	bx	lr
    return HAL_BUSY;
 800b538:	2002      	movs	r0, #2
}
 800b53a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b53e:	bf00      	nop

0800b540 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b540:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
 800b544:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b546:	2a20      	cmp	r2, #32
 800b548:	fa5f fc82 	uxtb.w	ip, r2
 800b54c:	d121      	bne.n	800b592 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b54e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800b552:	2a01      	cmp	r2, #1
 800b554:	d01d      	beq.n	800b592 <HAL_I2CEx_ConfigDigitalFilter+0x52>
 800b556:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b558:	6800      	ldr	r0, [r0, #0]
    __HAL_LOCK(hi2c);
 800b55a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b55e:	2224      	movs	r2, #36	; 0x24
 800b560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b564:	6802      	ldr	r2, [r0, #0]
 800b566:	f022 0201 	bic.w	r2, r2, #1
 800b56a:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b56c:	6818      	ldr	r0, [r3, #0]
 800b56e:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b570:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b574:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b578:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800b57a:	6002      	str	r2, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 800b57c:	6818      	ldr	r0, [r3, #0]
 800b57e:	6802      	ldr	r2, [r0, #0]
 800b580:	f042 0201 	orr.w	r2, r2, #1
 800b584:	6002      	str	r2, [r0, #0]

    return HAL_OK;
 800b586:	4608      	mov	r0, r1
    hi2c->State = HAL_I2C_STATE_READY;
 800b588:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b58c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    return HAL_OK;
 800b590:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800b592:	2002      	movs	r0, #2
  }
}
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop

0800b598 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b598:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b59a:	4c10      	ldr	r4, [pc, #64]	; (800b5dc <HAL_PWREx_ConfigSupply+0x44>)
 800b59c:	68e3      	ldr	r3, [r4, #12]
 800b59e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b5a2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b5a4:	d105      	bne.n	800b5b2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b5a6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b5aa:	1a18      	subs	r0, r3, r0
 800b5ac:	bf18      	it	ne
 800b5ae:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800b5b0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b5b2:	f023 0307 	bic.w	r3, r3, #7
 800b5b6:	4303      	orrs	r3, r0
 800b5b8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800b5ba:	f7fd fb99 	bl	8008cf0 <HAL_GetTick>
 800b5be:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b5c0:	e005      	b.n	800b5ce <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b5c2:	f7fd fb95 	bl	8008cf0 <HAL_GetTick>
 800b5c6:	1b40      	subs	r0, r0, r5
 800b5c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b5cc:	d804      	bhi.n	800b5d8 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b5ce:	6863      	ldr	r3, [r4, #4]
 800b5d0:	049b      	lsls	r3, r3, #18
 800b5d2:	d5f6      	bpl.n	800b5c2 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800b5d4:	2000      	movs	r0, #0
}
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800b5d8:	2001      	movs	r0, #1
}
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	58024800 	.word	0x58024800

0800b5e0 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5e0:	4b3c      	ldr	r3, [pc, #240]	; (800b6d4 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800b5e2:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b5e6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b5e8:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800b5ea:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b5ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b5f0:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800b5f4:	d038      	beq.n	800b668 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b5f6:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b5fa:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5fe:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b602:	fb05 f101 	mul.w	r1, r5, r1
 800b606:	2a01      	cmp	r2, #1
 800b608:	ee07 1a90 	vmov	s15, r1
 800b60c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800b610:	d002      	beq.n	800b618 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800b612:	2a02      	cmp	r2, #2
 800b614:	d050      	beq.n	800b6b8 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 800b616:	b34a      	cbz	r2, 800b66c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b618:	ee07 0a90 	vmov	s15, r0
 800b61c:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 800b6d8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800b620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b626:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800b62a:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800b6dc <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 800b62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b632:	ee07 3a90 	vmov	s15, r3
 800b636:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b63a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b63e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b642:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b646:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b64a:	4b22      	ldr	r3, [pc, #136]	; (800b6d4 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 800b64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b64e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b652:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b654:	ee07 3a90 	vmov	s15, r3
 800b658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b664:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800b668:	bc30      	pop	{r4, r5}
 800b66a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	0692      	lsls	r2, r2, #26
 800b670:	d529      	bpl.n	800b6c6 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b672:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b674:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b678:	4a19      	ldr	r2, [pc, #100]	; (800b6e0 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b67a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b680:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b688:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b6dc <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 800b68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b690:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b692:	ee06 3a10 	vmov	s12, r3
 800b696:	ee05 2a90 	vmov	s11, r2
 800b69a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800b69e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b6a2:	ee36 6a26 	vadd.f32	s12, s12, s13
 800b6a6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800b6aa:	eef0 7a46 	vmov.f32	s15, s12
 800b6ae:	eee7 7a05 	vfma.f32	s15, s14, s10
 800b6b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b6b6:	e7c8      	b.n	800b64a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6b8:	ee07 0a90 	vmov	s15, r0
 800b6bc:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800b6e4 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800b6c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6c4:	e7ae      	b.n	800b624 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6c6:	ee07 0a90 	vmov	s15, r0
 800b6ca:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800b6e8 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 800b6ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6d2:	e7a7      	b.n	800b624 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800b6d4:	58024400 	.word	0x58024400
 800b6d8:	4a742400 	.word	0x4a742400
 800b6dc:	39000000 	.word	0x39000000
 800b6e0:	03d09000 	.word	0x03d09000
 800b6e4:	4bbebc20 	.word	0x4bbebc20
 800b6e8:	4c742400 	.word	0x4c742400

0800b6ec <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	f000 81ef 	beq.w	800bad0 <HAL_RCC_OscConfig+0x3e4>
{
 800b6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b6f4:	6803      	ldr	r3, [r0, #0]
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	07d9      	lsls	r1, r3, #31
 800b6fa:	d52e      	bpl.n	800b75a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6fc:	49a4      	ldr	r1, [pc, #656]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
 800b6fe:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b700:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b702:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b706:	2a10      	cmp	r2, #16
 800b708:	f000 8107 	beq.w	800b91a <HAL_RCC_OscConfig+0x22e>
 800b70c:	2a18      	cmp	r2, #24
 800b70e:	f000 80ff 	beq.w	800b910 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b712:	6863      	ldr	r3, [r4, #4]
 800b714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b718:	f000 812a 	beq.w	800b970 <HAL_RCC_OscConfig+0x284>
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f040 8188 	bne.w	800ba32 <HAL_RCC_OscConfig+0x346>
 800b722:	4b9b      	ldr	r3, [pc, #620]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b732:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b734:	6863      	ldr	r3, [r4, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	f000 815c 	beq.w	800b9f4 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800b73c:	f7fd fad8 	bl	8008cf0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b740:	4e93      	ldr	r6, [pc, #588]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800b742:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b744:	e005      	b.n	800b752 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b746:	f7fd fad3 	bl	8008cf0 <HAL_GetTick>
 800b74a:	1b40      	subs	r0, r0, r5
 800b74c:	2864      	cmp	r0, #100	; 0x64
 800b74e:	f200 814f 	bhi.w	800b9f0 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b752:	6833      	ldr	r3, [r6, #0]
 800b754:	039b      	lsls	r3, r3, #14
 800b756:	d5f6      	bpl.n	800b746 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	079d      	lsls	r5, r3, #30
 800b75c:	f100 808a 	bmi.w	800b874 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b760:	06d9      	lsls	r1, r3, #27
 800b762:	d533      	bpl.n	800b7cc <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b764:	4a8a      	ldr	r2, [pc, #552]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
 800b766:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b768:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b76a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b76e:	2b08      	cmp	r3, #8
 800b770:	f000 80e3 	beq.w	800b93a <HAL_RCC_OscConfig+0x24e>
 800b774:	2b18      	cmp	r3, #24
 800b776:	f000 80db 	beq.w	800b930 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b77a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800b77c:	4d84      	ldr	r5, [pc, #528]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f000 8176 	beq.w	800ba70 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
 800b784:	682b      	ldr	r3, [r5, #0]
 800b786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b78a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b78c:	f7fd fab0 	bl	8008cf0 <HAL_GetTick>
 800b790:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b792:	e005      	b.n	800b7a0 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b794:	f7fd faac 	bl	8008cf0 <HAL_GetTick>
 800b798:	1b80      	subs	r0, r0, r6
 800b79a:	2802      	cmp	r0, #2
 800b79c:	f200 8128 	bhi.w	800b9f0 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	05db      	lsls	r3, r3, #23
 800b7a4:	d5f6      	bpl.n	800b794 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b7a6:	f7fd fabb 	bl	8008d20 <HAL_GetREVID>
 800b7aa:	f241 0303 	movw	r3, #4099	; 0x1003
 800b7ae:	4298      	cmp	r0, r3
 800b7b0:	f200 8266 	bhi.w	800bc80 <HAL_RCC_OscConfig+0x594>
 800b7b4:	6a22      	ldr	r2, [r4, #32]
 800b7b6:	686b      	ldr	r3, [r5, #4]
 800b7b8:	2a20      	cmp	r2, #32
 800b7ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b7be:	bf0c      	ite	eq
 800b7c0:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800b7c4:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800b7c8:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	071d      	lsls	r5, r3, #28
 800b7ce:	d516      	bpl.n	800b7fe <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b7d0:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800b7d2:	4d6f      	ldr	r5, [pc, #444]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 811b 	beq.w	800ba10 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
 800b7da:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b7dc:	f043 0301 	orr.w	r3, r3, #1
 800b7e0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b7e2:	f7fd fa85 	bl	8008cf0 <HAL_GetTick>
 800b7e6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b7e8:	e005      	b.n	800b7f6 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7ea:	f7fd fa81 	bl	8008cf0 <HAL_GetTick>
 800b7ee:	1b80      	subs	r0, r0, r6
 800b7f0:	2802      	cmp	r0, #2
 800b7f2:	f200 80fd 	bhi.w	800b9f0 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b7f6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b7f8:	0798      	lsls	r0, r3, #30
 800b7fa:	d5f6      	bpl.n	800b7ea <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	069a      	lsls	r2, r3, #26
 800b800:	d516      	bpl.n	800b830 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b802:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800b804:	4d62      	ldr	r5, [pc, #392]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 8121 	beq.w	800ba4e <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 800b80c:	682b      	ldr	r3, [r5, #0]
 800b80e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b812:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b814:	f7fd fa6c 	bl	8008cf0 <HAL_GetTick>
 800b818:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b81a:	e005      	b.n	800b828 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b81c:	f7fd fa68 	bl	8008cf0 <HAL_GetTick>
 800b820:	1b80      	subs	r0, r0, r6
 800b822:	2802      	cmp	r0, #2
 800b824:	f200 80e4 	bhi.w	800b9f0 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b828:	682b      	ldr	r3, [r5, #0]
 800b82a:	049f      	lsls	r7, r3, #18
 800b82c:	d5f6      	bpl.n	800b81c <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	0759      	lsls	r1, r3, #29
 800b832:	f100 80a3 	bmi.w	800b97c <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b836:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b838:	b1d0      	cbz	r0, 800b870 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b83a:	4d55      	ldr	r5, [pc, #340]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
 800b83c:	692b      	ldr	r3, [r5, #16]
 800b83e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b842:	2b18      	cmp	r3, #24
 800b844:	f000 81b6 	beq.w	800bbb4 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 800b848:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b84a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800b84c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b850:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b852:	f000 8149 	beq.w	800bae8 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
 800b856:	f7fd fa4b 	bl	8008cf0 <HAL_GetTick>
 800b85a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b85c:	e005      	b.n	800b86a <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b85e:	f7fd fa47 	bl	8008cf0 <HAL_GetTick>
 800b862:	1b00      	subs	r0, r0, r4
 800b864:	2802      	cmp	r0, #2
 800b866:	f200 80c3 	bhi.w	800b9f0 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b86a:	682b      	ldr	r3, [r5, #0]
 800b86c:	019b      	lsls	r3, r3, #6
 800b86e:	d4f6      	bmi.n	800b85e <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800b870:	2000      	movs	r0, #0
}
 800b872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b874:	4a46      	ldr	r2, [pc, #280]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
 800b876:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b878:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b87a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800b87e:	d12d      	bne.n	800b8dc <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b880:	4b43      	ldr	r3, [pc, #268]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
 800b882:	68e2      	ldr	r2, [r4, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	0759      	lsls	r1, r3, #29
 800b888:	d501      	bpl.n	800b88e <HAL_RCC_OscConfig+0x1a2>
 800b88a:	2a00      	cmp	r2, #0
 800b88c:	d04e      	beq.n	800b92c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b88e:	4d40      	ldr	r5, [pc, #256]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	f023 0319 	bic.w	r3, r3, #25
 800b896:	4313      	orrs	r3, r2
 800b898:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b89a:	f7fd fa29 	bl	8008cf0 <HAL_GetTick>
 800b89e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8a0:	e005      	b.n	800b8ae <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8a2:	f7fd fa25 	bl	8008cf0 <HAL_GetTick>
 800b8a6:	1b80      	subs	r0, r0, r6
 800b8a8:	2802      	cmp	r0, #2
 800b8aa:	f200 80a1 	bhi.w	800b9f0 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8ae:	682b      	ldr	r3, [r5, #0]
 800b8b0:	075b      	lsls	r3, r3, #29
 800b8b2:	d5f6      	bpl.n	800b8a2 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8b4:	f7fd fa34 	bl	8008d20 <HAL_GetREVID>
 800b8b8:	f241 0303 	movw	r3, #4099	; 0x1003
 800b8bc:	4298      	cmp	r0, r3
 800b8be:	f200 80fe 	bhi.w	800babe <HAL_RCC_OscConfig+0x3d2>
 800b8c2:	6922      	ldr	r2, [r4, #16]
 800b8c4:	686b      	ldr	r3, [r5, #4]
 800b8c6:	2a40      	cmp	r2, #64	; 0x40
 800b8c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b8cc:	bf0c      	ite	eq
 800b8ce:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800b8d2:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800b8d6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	e741      	b.n	800b760 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b8dc:	2b18      	cmp	r3, #24
 800b8de:	f000 80ea 	beq.w	800bab6 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b8e2:	4d2b      	ldr	r5, [pc, #172]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b8e4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b8e6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b8e8:	2a00      	cmp	r2, #0
 800b8ea:	f000 80d3 	beq.w	800ba94 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b8ee:	f023 0319 	bic.w	r3, r3, #25
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b8f6:	f7fd f9fb 	bl	8008cf0 <HAL_GetTick>
 800b8fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8fc:	e004      	b.n	800b908 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8fe:	f7fd f9f7 	bl	8008cf0 <HAL_GetTick>
 800b902:	1b80      	subs	r0, r0, r6
 800b904:	2802      	cmp	r0, #2
 800b906:	d873      	bhi.n	800b9f0 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b908:	682b      	ldr	r3, [r5, #0]
 800b90a:	075f      	lsls	r7, r3, #29
 800b90c:	d5f7      	bpl.n	800b8fe <HAL_RCC_OscConfig+0x212>
 800b90e:	e7d1      	b.n	800b8b4 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b910:	f001 0103 	and.w	r1, r1, #3
 800b914:	2902      	cmp	r1, #2
 800b916:	f47f aefc 	bne.w	800b712 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b91a:	4a1d      	ldr	r2, [pc, #116]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
 800b91c:	6812      	ldr	r2, [r2, #0]
 800b91e:	0392      	lsls	r2, r2, #14
 800b920:	f57f af1b 	bpl.w	800b75a <HAL_RCC_OscConfig+0x6e>
 800b924:	6862      	ldr	r2, [r4, #4]
 800b926:	2a00      	cmp	r2, #0
 800b928:	f47f af17 	bne.w	800b75a <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800b92c:	2001      	movs	r0, #1
}
 800b92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b930:	f002 0203 	and.w	r2, r2, #3
 800b934:	2a01      	cmp	r2, #1
 800b936:	f47f af20 	bne.w	800b77a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b93a:	4b15      	ldr	r3, [pc, #84]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	05da      	lsls	r2, r3, #23
 800b940:	d502      	bpl.n	800b948 <HAL_RCC_OscConfig+0x25c>
 800b942:	69e3      	ldr	r3, [r4, #28]
 800b944:	2b80      	cmp	r3, #128	; 0x80
 800b946:	d1f1      	bne.n	800b92c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b948:	f7fd f9ea 	bl	8008d20 <HAL_GetREVID>
 800b94c:	f241 0303 	movw	r3, #4099	; 0x1003
 800b950:	4298      	cmp	r0, r3
 800b952:	f200 80bf 	bhi.w	800bad4 <HAL_RCC_OscConfig+0x3e8>
 800b956:	6a22      	ldr	r2, [r4, #32]
 800b958:	2a20      	cmp	r2, #32
 800b95a:	f000 81ad 	beq.w	800bcb8 <HAL_RCC_OscConfig+0x5cc>
 800b95e:	490c      	ldr	r1, [pc, #48]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
 800b960:	684b      	ldr	r3, [r1, #4]
 800b962:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b966:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800b96a:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	e72d      	b.n	800b7cc <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b970:	4a07      	ldr	r2, [pc, #28]	; (800b990 <HAL_RCC_OscConfig+0x2a4>)
 800b972:	6813      	ldr	r3, [r2, #0]
 800b974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	e6db      	b.n	800b734 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 800b97c:	4d05      	ldr	r5, [pc, #20]	; (800b994 <HAL_RCC_OscConfig+0x2a8>)
 800b97e:	682b      	ldr	r3, [r5, #0]
 800b980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b984:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800b986:	f7fd f9b3 	bl	8008cf0 <HAL_GetTick>
 800b98a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b98c:	e009      	b.n	800b9a2 <HAL_RCC_OscConfig+0x2b6>
 800b98e:	bf00      	nop
 800b990:	58024400 	.word	0x58024400
 800b994:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b998:	f7fd f9aa 	bl	8008cf0 <HAL_GetTick>
 800b99c:	1b80      	subs	r0, r0, r6
 800b99e:	2864      	cmp	r0, #100	; 0x64
 800b9a0:	d826      	bhi.n	800b9f0 <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b9a2:	682b      	ldr	r3, [r5, #0]
 800b9a4:	05da      	lsls	r2, r3, #23
 800b9a6:	d5f7      	bpl.n	800b998 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9a8:	68a3      	ldr	r3, [r4, #8]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	f000 8171 	beq.w	800bc92 <HAL_RCC_OscConfig+0x5a6>
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f040 8174 	bne.w	800bc9e <HAL_RCC_OscConfig+0x5b2>
 800b9b6:	4baa      	ldr	r3, [pc, #680]	; (800bc60 <HAL_RCC_OscConfig+0x574>)
 800b9b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9ba:	f022 0201 	bic.w	r2, r2, #1
 800b9be:	671a      	str	r2, [r3, #112]	; 0x70
 800b9c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9c2:	f022 0204 	bic.w	r2, r2, #4
 800b9c6:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f000 8140 	beq.w	800bc50 <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
 800b9d0:	f7fd f98e 	bl	8008cf0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9d4:	4ea2      	ldr	r6, [pc, #648]	; (800bc60 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9d6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b9da:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9dc:	e004      	b.n	800b9e8 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9de:	f7fd f987 	bl	8008cf0 <HAL_GetTick>
 800b9e2:	1b40      	subs	r0, r0, r5
 800b9e4:	42b8      	cmp	r0, r7
 800b9e6:	d803      	bhi.n	800b9f0 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9e8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b9ea:	079b      	lsls	r3, r3, #30
 800b9ec:	d5f7      	bpl.n	800b9de <HAL_RCC_OscConfig+0x2f2>
 800b9ee:	e722      	b.n	800b836 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800b9f0:	2003      	movs	r0, #3
}
 800b9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 800b9f4:	f7fd f97c 	bl	8008cf0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b9f8:	4e99      	ldr	r6, [pc, #612]	; (800bc60 <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
 800b9fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b9fc:	e004      	b.n	800ba08 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b9fe:	f7fd f977 	bl	8008cf0 <HAL_GetTick>
 800ba02:	1b40      	subs	r0, r0, r5
 800ba04:	2864      	cmp	r0, #100	; 0x64
 800ba06:	d8f3      	bhi.n	800b9f0 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ba08:	6833      	ldr	r3, [r6, #0]
 800ba0a:	039f      	lsls	r7, r3, #14
 800ba0c:	d4f7      	bmi.n	800b9fe <HAL_RCC_OscConfig+0x312>
 800ba0e:	e6a3      	b.n	800b758 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800ba10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ba12:	f023 0301 	bic.w	r3, r3, #1
 800ba16:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800ba18:	f7fd f96a 	bl	8008cf0 <HAL_GetTick>
 800ba1c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ba1e:	e004      	b.n	800ba2a <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba20:	f7fd f966 	bl	8008cf0 <HAL_GetTick>
 800ba24:	1b80      	subs	r0, r0, r6
 800ba26:	2802      	cmp	r0, #2
 800ba28:	d8e2      	bhi.n	800b9f0 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ba2a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ba2c:	0799      	lsls	r1, r3, #30
 800ba2e:	d4f7      	bmi.n	800ba20 <HAL_RCC_OscConfig+0x334>
 800ba30:	e6e4      	b.n	800b7fc <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba36:	4b8a      	ldr	r3, [pc, #552]	; (800bc60 <HAL_RCC_OscConfig+0x574>)
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	f47f ae74 	bne.w	800b726 <HAL_RCC_OscConfig+0x3a>
 800ba3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ba4a:	601a      	str	r2, [r3, #0]
 800ba4c:	e672      	b.n	800b734 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 800ba4e:	682b      	ldr	r3, [r5, #0]
 800ba50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba54:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ba56:	f7fd f94b 	bl	8008cf0 <HAL_GetTick>
 800ba5a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba5c:	e004      	b.n	800ba68 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba5e:	f7fd f947 	bl	8008cf0 <HAL_GetTick>
 800ba62:	1b80      	subs	r0, r0, r6
 800ba64:	2802      	cmp	r0, #2
 800ba66:	d8c3      	bhi.n	800b9f0 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba68:	682b      	ldr	r3, [r5, #0]
 800ba6a:	0498      	lsls	r0, r3, #18
 800ba6c:	d4f7      	bmi.n	800ba5e <HAL_RCC_OscConfig+0x372>
 800ba6e:	e6de      	b.n	800b82e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ba78:	f7fd f93a 	bl	8008cf0 <HAL_GetTick>
 800ba7c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ba7e:	e004      	b.n	800ba8a <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ba80:	f7fd f936 	bl	8008cf0 <HAL_GetTick>
 800ba84:	1b80      	subs	r0, r0, r6
 800ba86:	2802      	cmp	r0, #2
 800ba88:	d8b2      	bhi.n	800b9f0 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ba8a:	682b      	ldr	r3, [r5, #0]
 800ba8c:	05df      	lsls	r7, r3, #23
 800ba8e:	d4f7      	bmi.n	800ba80 <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	e69b      	b.n	800b7cc <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800ba94:	f023 0301 	bic.w	r3, r3, #1
 800ba98:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ba9a:	f7fd f929 	bl	8008cf0 <HAL_GetTick>
 800ba9e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800baa0:	e004      	b.n	800baac <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800baa2:	f7fd f925 	bl	8008cf0 <HAL_GetTick>
 800baa6:	1b80      	subs	r0, r0, r6
 800baa8:	2802      	cmp	r0, #2
 800baaa:	d8a1      	bhi.n	800b9f0 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	0758      	lsls	r0, r3, #29
 800bab0:	d4f7      	bmi.n	800baa2 <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	e654      	b.n	800b760 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bab6:	0790      	lsls	r0, r2, #30
 800bab8:	f47f af13 	bne.w	800b8e2 <HAL_RCC_OscConfig+0x1f6>
 800babc:	e6e0      	b.n	800b880 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800babe:	686b      	ldr	r3, [r5, #4]
 800bac0:	6922      	ldr	r2, [r4, #16]
 800bac2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bac6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800baca:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bacc:	6823      	ldr	r3, [r4, #0]
 800bace:	e647      	b.n	800b760 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800bad0:	2001      	movs	r0, #1
}
 800bad2:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bad4:	4a62      	ldr	r2, [pc, #392]	; (800bc60 <HAL_RCC_OscConfig+0x574>)
 800bad6:	6a21      	ldr	r1, [r4, #32]
 800bad8:	68d3      	ldr	r3, [r2, #12]
 800bada:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800bade:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800bae2:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	e671      	b.n	800b7cc <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800bae8:	f7fd f902 	bl	8008cf0 <HAL_GetTick>
 800baec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800baee:	e005      	b.n	800bafc <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800baf0:	f7fd f8fe 	bl	8008cf0 <HAL_GetTick>
 800baf4:	1b80      	subs	r0, r0, r6
 800baf6:	2802      	cmp	r0, #2
 800baf8:	f63f af7a 	bhi.w	800b9f0 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	0199      	lsls	r1, r3, #6
 800bb00:	d4f6      	bmi.n	800baf0 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bb02:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800bb04:	4b57      	ldr	r3, [pc, #348]	; (800bc64 <HAL_RCC_OscConfig+0x578>)
 800bb06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bb08:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bb0a:	4957      	ldr	r1, [pc, #348]	; (800bc68 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bb0c:	4e54      	ldr	r6, [pc, #336]	; (800bc60 <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bb12:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800bb16:	62ab      	str	r3, [r5, #40]	; 0x28
 800bb18:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	3a01      	subs	r2, #1
 800bb20:	025b      	lsls	r3, r3, #9
 800bb22:	0412      	lsls	r2, r2, #16
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bb2e:	3a01      	subs	r2, #1
 800bb30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb34:	4313      	orrs	r3, r2
 800bb36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bb38:	3a01      	subs	r2, #1
 800bb3a:	0612      	lsls	r2, r2, #24
 800bb3c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bb40:	4313      	orrs	r3, r2
 800bb42:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800bb44:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bb46:	f023 0301 	bic.w	r3, r3, #1
 800bb4a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bb4c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800bb4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bb50:	4011      	ands	r1, r2
 800bb52:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800bb56:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bb58:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bb5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bb5c:	f023 030c 	bic.w	r3, r3, #12
 800bb60:	4313      	orrs	r3, r2
 800bb62:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bb64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bb66:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bb68:	f023 0302 	bic.w	r3, r3, #2
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bb70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bb72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb76:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb78:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bb7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb7e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bb80:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bb82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb86:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800bb88:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bb8a:	f043 0301 	orr.w	r3, r3, #1
 800bb8e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bb96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bb98:	f7fd f8aa 	bl	8008cf0 <HAL_GetTick>
 800bb9c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bb9e:	e005      	b.n	800bbac <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bba0:	f7fd f8a6 	bl	8008cf0 <HAL_GetTick>
 800bba4:	1b00      	subs	r0, r0, r4
 800bba6:	2802      	cmp	r0, #2
 800bba8:	f63f af22 	bhi.w	800b9f0 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bbac:	6833      	ldr	r3, [r6, #0]
 800bbae:	019a      	lsls	r2, r3, #6
 800bbb0:	d5f6      	bpl.n	800bba0 <HAL_RCC_OscConfig+0x4b4>
 800bbb2:	e65d      	b.n	800b870 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bbb4:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bbb6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bbb8:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bbba:	f43f ae5a 	beq.w	800b872 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbbe:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bbc2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bbc4:	428b      	cmp	r3, r1
 800bbc6:	f47f aeb1 	bne.w	800b92c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bbca:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	f47f aeab 	bne.w	800b92c <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bbd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bbd8:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800bbdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	f47f aea4 	bne.w	800b92c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bbe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbe6:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800bbea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bbec:	429a      	cmp	r2, r3
 800bbee:	f47f ae9d 	bne.w	800b92c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bbf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bbf4:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800bbf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	f47f ae96 	bne.w	800b92c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bc00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bc02:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800bc06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bc08:	429e      	cmp	r6, r3
 800bc0a:	f47f ae8f 	bne.w	800b92c <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bc0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bc10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bc12:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bc16:	429a      	cmp	r2, r3
 800bc18:	f43f ae2a 	beq.w	800b870 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 800bc1c:	4a10      	ldr	r2, [pc, #64]	; (800bc60 <HAL_RCC_OscConfig+0x574>)
 800bc1e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800bc20:	f023 0301 	bic.w	r3, r3, #1
 800bc24:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800bc26:	f7fd f863 	bl	8008cf0 <HAL_GetTick>
 800bc2a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bc2c:	f7fd f860 	bl	8008cf0 <HAL_GetTick>
 800bc30:	42a8      	cmp	r0, r5
 800bc32:	d0fb      	beq.n	800bc2c <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bc34:	4a0a      	ldr	r2, [pc, #40]	; (800bc60 <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
 800bc36:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bc38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bc3a:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <HAL_RCC_OscConfig+0x57c>)
 800bc3c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bc3e:	4023      	ands	r3, r4
 800bc40:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bc44:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800bc46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800bc48:	f043 0301 	orr.w	r3, r3, #1
 800bc4c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800bc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 800bc50:	f7fd f84e 	bl	8008cf0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc54:	4e02      	ldr	r6, [pc, #8]	; (800bc60 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc56:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800bc5a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc5c:	e00c      	b.n	800bc78 <HAL_RCC_OscConfig+0x58c>
 800bc5e:	bf00      	nop
 800bc60:	58024400 	.word	0x58024400
 800bc64:	fffffc0c 	.word	0xfffffc0c
 800bc68:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc6c:	f7fd f840 	bl	8008cf0 <HAL_GetTick>
 800bc70:	1b40      	subs	r0, r0, r5
 800bc72:	42b8      	cmp	r0, r7
 800bc74:	f63f aebc 	bhi.w	800b9f0 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc78:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800bc7a:	0798      	lsls	r0, r3, #30
 800bc7c:	d4f6      	bmi.n	800bc6c <HAL_RCC_OscConfig+0x580>
 800bc7e:	e5da      	b.n	800b836 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc80:	68eb      	ldr	r3, [r5, #12]
 800bc82:	6a22      	ldr	r2, [r4, #32]
 800bc84:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800bc88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bc8c:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	e59c      	b.n	800b7cc <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc92:	4a0e      	ldr	r2, [pc, #56]	; (800bccc <HAL_RCC_OscConfig+0x5e0>)
 800bc94:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800bc96:	f043 0301 	orr.w	r3, r3, #1
 800bc9a:	6713      	str	r3, [r2, #112]	; 0x70
 800bc9c:	e694      	b.n	800b9c8 <HAL_RCC_OscConfig+0x2dc>
 800bc9e:	2b05      	cmp	r3, #5
 800bca0:	4b0a      	ldr	r3, [pc, #40]	; (800bccc <HAL_RCC_OscConfig+0x5e0>)
 800bca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bca4:	f47f ae89 	bne.w	800b9ba <HAL_RCC_OscConfig+0x2ce>
 800bca8:	f042 0204 	orr.w	r2, r2, #4
 800bcac:	671a      	str	r2, [r3, #112]	; 0x70
 800bcae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bcb0:	f042 0201 	orr.w	r2, r2, #1
 800bcb4:	671a      	str	r2, [r3, #112]	; 0x70
 800bcb6:	e687      	b.n	800b9c8 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bcb8:	4a04      	ldr	r2, [pc, #16]	; (800bccc <HAL_RCC_OscConfig+0x5e0>)
 800bcba:	6853      	ldr	r3, [r2, #4]
 800bcbc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bcc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcc4:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	e580      	b.n	800b7cc <HAL_RCC_OscConfig+0xe0>
 800bcca:	bf00      	nop
 800bccc:	58024400 	.word	0x58024400

0800bcd0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bcd0:	4a48      	ldr	r2, [pc, #288]	; (800bdf4 <HAL_RCC_GetSysClockFreq+0x124>)
 800bcd2:	6913      	ldr	r3, [r2, #16]
 800bcd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bcd8:	2b10      	cmp	r3, #16
 800bcda:	d004      	beq.n	800bce6 <HAL_RCC_GetSysClockFreq+0x16>
 800bcdc:	2b18      	cmp	r3, #24
 800bcde:	d00d      	beq.n	800bcfc <HAL_RCC_GetSysClockFreq+0x2c>
 800bce0:	b11b      	cbz	r3, 800bcea <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800bce2:	4845      	ldr	r0, [pc, #276]	; (800bdf8 <HAL_RCC_GetSysClockFreq+0x128>)
 800bce4:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bce6:	4845      	ldr	r0, [pc, #276]	; (800bdfc <HAL_RCC_GetSysClockFreq+0x12c>)
 800bce8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcea:	6813      	ldr	r3, [r2, #0]
 800bcec:	0699      	lsls	r1, r3, #26
 800bcee:	d54a      	bpl.n	800bd86 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcf0:	6813      	ldr	r3, [r2, #0]
 800bcf2:	4843      	ldr	r0, [pc, #268]	; (800be00 <HAL_RCC_GetSysClockFreq+0x130>)
 800bcf4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bcf8:	40d8      	lsrs	r0, r3
 800bcfa:	4770      	bx	lr
{
 800bcfc:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcfe:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800bd00:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bd02:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800bd04:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd08:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800bd0a:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800bd0e:	d038      	beq.n	800bd82 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd10:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bd14:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd18:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd1c:	fb05 f101 	mul.w	r1, r5, r1
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	ee07 1a90 	vmov	s15, r1
 800bd26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800bd2a:	d002      	beq.n	800bd32 <HAL_RCC_GetSysClockFreq+0x62>
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d02c      	beq.n	800bd8a <HAL_RCC_GetSysClockFreq+0xba>
 800bd30:	b393      	cbz	r3, 800bd98 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd32:	ee07 0a90 	vmov	s15, r0
 800bd36:	ed9f 5a33 	vldr	s10, [pc, #204]	; 800be04 <HAL_RCC_GetSysClockFreq+0x134>
 800bd3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bd40:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800bd44:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800be08 <HAL_RCC_GetSysClockFreq+0x138>
 800bd48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd4c:	ee07 3a90 	vmov	s15, r3
 800bd50:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bd54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd58:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800bd5c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800bd60:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800bd64:	4b23      	ldr	r3, [pc, #140]	; (800bdf4 <HAL_RCC_GetSysClockFreq+0x124>)
 800bd66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd68:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bd6c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800bd6e:	ee07 3a90 	vmov	s15, r3
 800bd72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd7e:	ee17 0a90 	vmov	r0, s15
}
 800bd82:	bc30      	pop	{r4, r5}
 800bd84:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bd86:	481e      	ldr	r0, [pc, #120]	; (800be00 <HAL_RCC_GetSysClockFreq+0x130>)
}
 800bd88:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd8a:	ee07 0a90 	vmov	s15, r0
 800bd8e:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 800be0c <HAL_RCC_GetSysClockFreq+0x13c>
 800bd92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd96:	e7d2      	b.n	800bd3e <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd98:	6813      	ldr	r3, [r2, #0]
 800bd9a:	069b      	lsls	r3, r3, #26
 800bd9c:	d522      	bpl.n	800bde4 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd9e:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bda0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bda4:	4916      	ldr	r1, [pc, #88]	; (800be00 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bda6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdaa:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdac:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdb4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800be08 <HAL_RCC_GetSysClockFreq+0x138>
 800bdb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdbc:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdbe:	ee06 3a10 	vmov	s12, r3
 800bdc2:	ee05 1a90 	vmov	s11, r1
 800bdc6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800bdca:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800bdce:	ee36 6a26 	vadd.f32	s12, s12, s13
 800bdd2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800bdd6:	eef0 7a46 	vmov.f32	s15, s12
 800bdda:	eee7 7a05 	vfma.f32	s15, s14, s10
 800bdde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bde2:	e7bf      	b.n	800bd64 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bde4:	ee07 0a90 	vmov	s15, r0
 800bde8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800be10 <HAL_RCC_GetSysClockFreq+0x140>
 800bdec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdf0:	e7a5      	b.n	800bd3e <HAL_RCC_GetSysClockFreq+0x6e>
 800bdf2:	bf00      	nop
 800bdf4:	58024400 	.word	0x58024400
 800bdf8:	003d0900 	.word	0x003d0900
 800bdfc:	017d7840 	.word	0x017d7840
 800be00:	03d09000 	.word	0x03d09000
 800be04:	4a742400 	.word	0x4a742400
 800be08:	39000000 	.word	0x39000000
 800be0c:	4bbebc20 	.word	0x4bbebc20
 800be10:	4c742400 	.word	0x4c742400

0800be14 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800be14:	2800      	cmp	r0, #0
 800be16:	f000 811a 	beq.w	800c04e <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800be1a:	4a92      	ldr	r2, [pc, #584]	; (800c064 <HAL_RCC_ClockConfig+0x250>)
{
 800be1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800be20:	6813      	ldr	r3, [r2, #0]
 800be22:	4604      	mov	r4, r0
 800be24:	460d      	mov	r5, r1
 800be26:	f003 030f 	and.w	r3, r3, #15
 800be2a:	428b      	cmp	r3, r1
 800be2c:	d20c      	bcs.n	800be48 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be2e:	6813      	ldr	r3, [r2, #0]
 800be30:	f023 030f 	bic.w	r3, r3, #15
 800be34:	430b      	orrs	r3, r1
 800be36:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be38:	6813      	ldr	r3, [r2, #0]
 800be3a:	f003 030f 	and.w	r3, r3, #15
 800be3e:	428b      	cmp	r3, r1
 800be40:	d002      	beq.n	800be48 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800be42:	2001      	movs	r0, #1
}
 800be44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	075f      	lsls	r7, r3, #29
 800be4c:	d50c      	bpl.n	800be68 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800be4e:	4986      	ldr	r1, [pc, #536]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800be50:	6920      	ldr	r0, [r4, #16]
 800be52:	698a      	ldr	r2, [r1, #24]
 800be54:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800be58:	4290      	cmp	r0, r2
 800be5a:	d905      	bls.n	800be68 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be5c:	698b      	ldr	r3, [r1, #24]
 800be5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be62:	4303      	orrs	r3, r0
 800be64:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be66:	6823      	ldr	r3, [r4, #0]
 800be68:	071e      	lsls	r6, r3, #28
 800be6a:	d50c      	bpl.n	800be86 <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800be6c:	497e      	ldr	r1, [pc, #504]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800be6e:	6960      	ldr	r0, [r4, #20]
 800be70:	69ca      	ldr	r2, [r1, #28]
 800be72:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800be76:	4290      	cmp	r0, r2
 800be78:	d905      	bls.n	800be86 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800be7a:	69cb      	ldr	r3, [r1, #28]
 800be7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be80:	4303      	orrs	r3, r0
 800be82:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	06d8      	lsls	r0, r3, #27
 800be88:	d50c      	bpl.n	800bea4 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800be8a:	4977      	ldr	r1, [pc, #476]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800be8c:	69a0      	ldr	r0, [r4, #24]
 800be8e:	69ca      	ldr	r2, [r1, #28]
 800be90:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800be94:	4290      	cmp	r0, r2
 800be96:	d905      	bls.n	800bea4 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800be98:	69cb      	ldr	r3, [r1, #28]
 800be9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800be9e:	4303      	orrs	r3, r0
 800bea0:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	0699      	lsls	r1, r3, #26
 800bea6:	d50c      	bpl.n	800bec2 <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bea8:	496f      	ldr	r1, [pc, #444]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800beaa:	69e0      	ldr	r0, [r4, #28]
 800beac:	6a0a      	ldr	r2, [r1, #32]
 800beae:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800beb2:	4290      	cmp	r0, r2
 800beb4:	d905      	bls.n	800bec2 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800beb6:	6a0b      	ldr	r3, [r1, #32]
 800beb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bebc:	4303      	orrs	r3, r0
 800bebe:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bec0:	6823      	ldr	r3, [r4, #0]
 800bec2:	079a      	lsls	r2, r3, #30
 800bec4:	f140 8083 	bpl.w	800bfce <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bec8:	4867      	ldr	r0, [pc, #412]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800beca:	68e1      	ldr	r1, [r4, #12]
 800becc:	6982      	ldr	r2, [r0, #24]
 800bece:	f002 020f 	and.w	r2, r2, #15
 800bed2:	4291      	cmp	r1, r2
 800bed4:	f240 80a9 	bls.w	800c02a <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bed8:	6983      	ldr	r3, [r0, #24]
 800beda:	f023 030f 	bic.w	r3, r3, #15
 800bede:	430b      	orrs	r3, r1
 800bee0:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	07df      	lsls	r7, r3, #31
 800bee6:	d474      	bmi.n	800bfd2 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bee8:	079f      	lsls	r7, r3, #30
 800beea:	d507      	bpl.n	800befc <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800beec:	4a5e      	ldr	r2, [pc, #376]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800beee:	68e1      	ldr	r1, [r4, #12]
 800bef0:	6993      	ldr	r3, [r2, #24]
 800bef2:	f003 030f 	and.w	r3, r3, #15
 800bef6:	428b      	cmp	r3, r1
 800bef8:	f200 80a0 	bhi.w	800c03c <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800befc:	4a59      	ldr	r2, [pc, #356]	; (800c064 <HAL_RCC_ClockConfig+0x250>)
 800befe:	6813      	ldr	r3, [r2, #0]
 800bf00:	f003 030f 	and.w	r3, r3, #15
 800bf04:	42ab      	cmp	r3, r5
 800bf06:	d909      	bls.n	800bf1c <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf08:	6813      	ldr	r3, [r2, #0]
 800bf0a:	f023 030f 	bic.w	r3, r3, #15
 800bf0e:	432b      	orrs	r3, r5
 800bf10:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf12:	6813      	ldr	r3, [r2, #0]
 800bf14:	f003 030f 	and.w	r3, r3, #15
 800bf18:	42ab      	cmp	r3, r5
 800bf1a:	d192      	bne.n	800be42 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	075e      	lsls	r6, r3, #29
 800bf20:	d50c      	bpl.n	800bf3c <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bf22:	4951      	ldr	r1, [pc, #324]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800bf24:	6920      	ldr	r0, [r4, #16]
 800bf26:	698a      	ldr	r2, [r1, #24]
 800bf28:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800bf2c:	4290      	cmp	r0, r2
 800bf2e:	d205      	bcs.n	800bf3c <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bf30:	698b      	ldr	r3, [r1, #24]
 800bf32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf36:	4303      	orrs	r3, r0
 800bf38:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	071d      	lsls	r5, r3, #28
 800bf3e:	d50c      	bpl.n	800bf5a <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bf40:	4949      	ldr	r1, [pc, #292]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800bf42:	6960      	ldr	r0, [r4, #20]
 800bf44:	69ca      	ldr	r2, [r1, #28]
 800bf46:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800bf4a:	4290      	cmp	r0, r2
 800bf4c:	d205      	bcs.n	800bf5a <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bf4e:	69cb      	ldr	r3, [r1, #28]
 800bf50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf54:	4303      	orrs	r3, r0
 800bf56:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	06d8      	lsls	r0, r3, #27
 800bf5c:	d50c      	bpl.n	800bf78 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bf5e:	4942      	ldr	r1, [pc, #264]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800bf60:	69a0      	ldr	r0, [r4, #24]
 800bf62:	69ca      	ldr	r2, [r1, #28]
 800bf64:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800bf68:	4290      	cmp	r0, r2
 800bf6a:	d205      	bcs.n	800bf78 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bf6c:	69cb      	ldr	r3, [r1, #28]
 800bf6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bf72:	4303      	orrs	r3, r0
 800bf74:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	0699      	lsls	r1, r3, #26
 800bf7a:	d50b      	bpl.n	800bf94 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bf7c:	4a3a      	ldr	r2, [pc, #232]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800bf7e:	69e1      	ldr	r1, [r4, #28]
 800bf80:	6a13      	ldr	r3, [r2, #32]
 800bf82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf86:	4299      	cmp	r1, r3
 800bf88:	d204      	bcs.n	800bf94 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bf8a:	6a13      	ldr	r3, [r2, #32]
 800bf8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf90:	430b      	orrs	r3, r1
 800bf92:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bf94:	f7ff fe9c 	bl	800bcd0 <HAL_RCC_GetSysClockFreq>
 800bf98:	4a33      	ldr	r2, [pc, #204]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	4833      	ldr	r0, [pc, #204]	; (800c06c <HAL_RCC_ClockConfig+0x258>)
 800bf9e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bfa0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bfa2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800bfa6:	4d32      	ldr	r5, [pc, #200]	; (800c070 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bfa8:	f002 020f 	and.w	r2, r2, #15
 800bfac:	4c31      	ldr	r4, [pc, #196]	; (800c074 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bfae:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bfb0:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bfb2:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800bfb6:	4830      	ldr	r0, [pc, #192]	; (800c078 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bfb8:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bfbc:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800bfbe:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800bfc0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bfc2:	40d3      	lsrs	r3, r2
 800bfc4:	6023      	str	r3, [r4, #0]
}
 800bfc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800bfca:	f7fc be2f 	b.w	8008c2c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bfce:	07db      	lsls	r3, r3, #31
 800bfd0:	d594      	bpl.n	800befc <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bfd2:	4a25      	ldr	r2, [pc, #148]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800bfd4:	68a1      	ldr	r1, [r4, #8]
 800bfd6:	6993      	ldr	r3, [r2, #24]
 800bfd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfe0:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bfe2:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfe4:	2902      	cmp	r1, #2
 800bfe6:	d034      	beq.n	800c052 <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bfe8:	2903      	cmp	r1, #3
 800bfea:	d02d      	beq.n	800c048 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bfec:	2901      	cmp	r1, #1
 800bfee:	d035      	beq.n	800c05c <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bff0:	075b      	lsls	r3, r3, #29
 800bff2:	f57f af26 	bpl.w	800be42 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bff6:	4e1c      	ldr	r6, [pc, #112]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bff8:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bffc:	6933      	ldr	r3, [r6, #16]
 800bffe:	f023 0307 	bic.w	r3, r3, #7
 800c002:	430b      	orrs	r3, r1
 800c004:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800c006:	f7fc fe73 	bl	8008cf0 <HAL_GetTick>
 800c00a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c00c:	e004      	b.n	800c018 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c00e:	f7fc fe6f 	bl	8008cf0 <HAL_GetTick>
 800c012:	1bc0      	subs	r0, r0, r7
 800c014:	4540      	cmp	r0, r8
 800c016:	d81f      	bhi.n	800c058 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c018:	6933      	ldr	r3, [r6, #16]
 800c01a:	6862      	ldr	r2, [r4, #4]
 800c01c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c020:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800c024:	d1f3      	bne.n	800c00e <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	e75e      	b.n	800bee8 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c02a:	07da      	lsls	r2, r3, #31
 800c02c:	d4d1      	bmi.n	800bfd2 <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c02e:	4a0e      	ldr	r2, [pc, #56]	; (800c068 <HAL_RCC_ClockConfig+0x254>)
 800c030:	6993      	ldr	r3, [r2, #24]
 800c032:	f003 030f 	and.w	r3, r3, #15
 800c036:	428b      	cmp	r3, r1
 800c038:	f67f af60 	bls.w	800befc <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c03c:	6993      	ldr	r3, [r2, #24]
 800c03e:	f023 030f 	bic.w	r3, r3, #15
 800c042:	430b      	orrs	r3, r1
 800c044:	6193      	str	r3, [r2, #24]
 800c046:	e759      	b.n	800befc <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c048:	0198      	lsls	r0, r3, #6
 800c04a:	d4d4      	bmi.n	800bff6 <HAL_RCC_ClockConfig+0x1e2>
 800c04c:	e6f9      	b.n	800be42 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800c04e:	2001      	movs	r0, #1
}
 800c050:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c052:	039e      	lsls	r6, r3, #14
 800c054:	d4cf      	bmi.n	800bff6 <HAL_RCC_ClockConfig+0x1e2>
 800c056:	e6f4      	b.n	800be42 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800c058:	2003      	movs	r0, #3
 800c05a:	e6f3      	b.n	800be44 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c05c:	05da      	lsls	r2, r3, #23
 800c05e:	d4ca      	bmi.n	800bff6 <HAL_RCC_ClockConfig+0x1e2>
 800c060:	e6ef      	b.n	800be42 <HAL_RCC_ClockConfig+0x2e>
 800c062:	bf00      	nop
 800c064:	52002000 	.word	0x52002000
 800c068:	58024400 	.word	0x58024400
 800c06c:	0801f474 	.word	0x0801f474
 800c070:	200006e8 	.word	0x200006e8
 800c074:	200006ec 	.word	0x200006ec
 800c078:	200006f4 	.word	0x200006f4

0800c07c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c07c:	4a18      	ldr	r2, [pc, #96]	; (800c0e0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c07e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c080:	6913      	ldr	r3, [r2, #16]
 800c082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c086:	2b10      	cmp	r3, #16
 800c088:	d01a      	beq.n	800c0c0 <HAL_RCC_GetHCLKFreq+0x44>
 800c08a:	2b18      	cmp	r3, #24
 800c08c:	d023      	beq.n	800c0d6 <HAL_RCC_GetHCLKFreq+0x5a>
 800c08e:	b1cb      	cbz	r3, 800c0c4 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800c090:	4814      	ldr	r0, [pc, #80]	; (800c0e4 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c092:	4b13      	ldr	r3, [pc, #76]	; (800c0e0 <HAL_RCC_GetHCLKFreq+0x64>)
 800c094:	4914      	ldr	r1, [pc, #80]	; (800c0e8 <HAL_RCC_GetHCLKFreq+0x6c>)
 800c096:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c098:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c09a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c09e:	4c13      	ldr	r4, [pc, #76]	; (800c0ec <HAL_RCC_GetHCLKFreq+0x70>)
 800c0a0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c0a4:	4d12      	ldr	r5, [pc, #72]	; (800c0f0 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c0a6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c0a8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c0aa:	f002 021f 	and.w	r2, r2, #31
 800c0ae:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c0b2:	f003 001f 	and.w	r0, r3, #31
 800c0b6:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800c0ba:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c0bc:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800c0be:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c0c0:	480c      	ldr	r0, [pc, #48]	; (800c0f4 <HAL_RCC_GetHCLKFreq+0x78>)
 800c0c2:	e7e6      	b.n	800c092 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0c4:	6813      	ldr	r3, [r2, #0]
 800c0c6:	069b      	lsls	r3, r3, #26
 800c0c8:	d508      	bpl.n	800c0dc <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0ca:	6813      	ldr	r3, [r2, #0]
 800c0cc:	480a      	ldr	r0, [pc, #40]	; (800c0f8 <HAL_RCC_GetHCLKFreq+0x7c>)
 800c0ce:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c0d2:	40d8      	lsrs	r0, r3
 800c0d4:	e7dd      	b.n	800c092 <HAL_RCC_GetHCLKFreq+0x16>
 800c0d6:	f7ff fa83 	bl	800b5e0 <HAL_RCC_GetSysClockFreq.part.0>
 800c0da:	e7da      	b.n	800c092 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c0dc:	4806      	ldr	r0, [pc, #24]	; (800c0f8 <HAL_RCC_GetHCLKFreq+0x7c>)
 800c0de:	e7d8      	b.n	800c092 <HAL_RCC_GetHCLKFreq+0x16>
 800c0e0:	58024400 	.word	0x58024400
 800c0e4:	003d0900 	.word	0x003d0900
 800c0e8:	0801f474 	.word	0x0801f474
 800c0ec:	200006ec 	.word	0x200006ec
 800c0f0:	200006e8 	.word	0x200006e8
 800c0f4:	017d7840 	.word	0x017d7840
 800c0f8:	03d09000 	.word	0x03d09000

0800c0fc <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c0fc:	4a1c      	ldr	r2, [pc, #112]	; (800c170 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0fe:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c100:	6913      	ldr	r3, [r2, #16]
 800c102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c106:	2b10      	cmp	r3, #16
 800c108:	d021      	beq.n	800c14e <HAL_RCC_GetPCLK1Freq+0x52>
 800c10a:	2b18      	cmp	r3, #24
 800c10c:	d02a      	beq.n	800c164 <HAL_RCC_GetPCLK1Freq+0x68>
 800c10e:	b303      	cbz	r3, 800c152 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800c110:	4818      	ldr	r0, [pc, #96]	; (800c174 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c112:	4a17      	ldr	r2, [pc, #92]	; (800c170 <HAL_RCC_GetPCLK1Freq+0x74>)
 800c114:	4918      	ldr	r1, [pc, #96]	; (800c178 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800c116:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c118:	4c18      	ldr	r4, [pc, #96]	; (800c17c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c11a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800c11e:	4d18      	ldr	r5, [pc, #96]	; (800c180 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c120:	5ccb      	ldrb	r3, [r1, r3]
 800c122:	f003 031f 	and.w	r3, r3, #31
 800c126:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c128:	6993      	ldr	r3, [r2, #24]
 800c12a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 800c12e:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c130:	5ccb      	ldrb	r3, [r1, r3]
 800c132:	f003 031f 	and.w	r3, r3, #31
 800c136:	fa20 f303 	lsr.w	r3, r0, r3
 800c13a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c13c:	69d2      	ldr	r2, [r2, #28]
 800c13e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800c142:	5c88      	ldrb	r0, [r1, r2]
 800c144:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c148:	fa23 f000 	lsr.w	r0, r3, r0
 800c14c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c14e:	480d      	ldr	r0, [pc, #52]	; (800c184 <HAL_RCC_GetPCLK1Freq+0x88>)
 800c150:	e7df      	b.n	800c112 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c152:	6813      	ldr	r3, [r2, #0]
 800c154:	069b      	lsls	r3, r3, #26
 800c156:	d508      	bpl.n	800c16a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c158:	6813      	ldr	r3, [r2, #0]
 800c15a:	480b      	ldr	r0, [pc, #44]	; (800c188 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800c15c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c160:	40d8      	lsrs	r0, r3
 800c162:	e7d6      	b.n	800c112 <HAL_RCC_GetPCLK1Freq+0x16>
 800c164:	f7ff fa3c 	bl	800b5e0 <HAL_RCC_GetSysClockFreq.part.0>
 800c168:	e7d3      	b.n	800c112 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c16a:	4807      	ldr	r0, [pc, #28]	; (800c188 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800c16c:	e7d1      	b.n	800c112 <HAL_RCC_GetPCLK1Freq+0x16>
 800c16e:	bf00      	nop
 800c170:	58024400 	.word	0x58024400
 800c174:	003d0900 	.word	0x003d0900
 800c178:	0801f474 	.word	0x0801f474
 800c17c:	200006ec 	.word	0x200006ec
 800c180:	200006e8 	.word	0x200006e8
 800c184:	017d7840 	.word	0x017d7840
 800c188:	03d09000 	.word	0x03d09000

0800c18c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c18e:	4c3a      	ldr	r4, [pc, #232]	; (800c278 <RCCEx_PLL2_Config+0xec>)
 800c190:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c192:	f003 0303 	and.w	r3, r3, #3
 800c196:	2b03      	cmp	r3, #3
 800c198:	d067      	beq.n	800c26a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c19a:	6823      	ldr	r3, [r4, #0]
 800c19c:	4606      	mov	r6, r0
 800c19e:	460f      	mov	r7, r1
 800c1a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1a4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1a6:	f7fc fda3 	bl	8008cf0 <HAL_GetTick>
 800c1aa:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1ac:	e004      	b.n	800c1b8 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c1ae:	f7fc fd9f 	bl	8008cf0 <HAL_GetTick>
 800c1b2:	1b43      	subs	r3, r0, r5
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d856      	bhi.n	800c266 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	011a      	lsls	r2, r3, #4
 800c1bc:	d4f7      	bmi.n	800c1ae <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c1be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c1c0:	6832      	ldr	r2, [r6, #0]
 800c1c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800c1c6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800c1ca:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1cc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	3a01      	subs	r2, #1
 800c1d4:	025b      	lsls	r3, r3, #9
 800c1d6:	0412      	lsls	r2, r2, #16
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	6872      	ldr	r2, [r6, #4]
 800c1e2:	3a01      	subs	r2, #1
 800c1e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	6932      	ldr	r2, [r6, #16]
 800c1ec:	3a01      	subs	r2, #1
 800c1ee:	0612      	lsls	r2, r2, #24
 800c1f0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c1fa:	6972      	ldr	r2, [r6, #20]
 800c1fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c200:	4313      	orrs	r3, r2
 800c202:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c204:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c206:	69b3      	ldr	r3, [r6, #24]
 800c208:	f022 0220 	bic.w	r2, r2, #32
 800c20c:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c20e:	4b1b      	ldr	r3, [pc, #108]	; (800c27c <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c210:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c212:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c214:	f022 0210 	bic.w	r2, r2, #16
 800c218:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c21a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c21c:	69f2      	ldr	r2, [r6, #28]
 800c21e:	400b      	ands	r3, r1
 800c220:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c224:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c226:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c228:	f043 0310 	orr.w	r3, r3, #16
 800c22c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c22e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800c230:	b1ef      	cbz	r7, 800c26e <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c232:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c234:	bf0c      	ite	eq
 800c236:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c23a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800c23e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c240:	4c0d      	ldr	r4, [pc, #52]	; (800c278 <RCCEx_PLL2_Config+0xec>)
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c248:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c24a:	f7fc fd51 	bl	8008cf0 <HAL_GetTick>
 800c24e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c250:	e004      	b.n	800c25c <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c252:	f7fc fd4d 	bl	8008cf0 <HAL_GetTick>
 800c256:	1b40      	subs	r0, r0, r5
 800c258:	2802      	cmp	r0, #2
 800c25a:	d804      	bhi.n	800c266 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	011b      	lsls	r3, r3, #4
 800c260:	d5f7      	bpl.n	800c252 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800c262:	2000      	movs	r0, #0
}
 800c264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800c266:	2003      	movs	r0, #3
}
 800c268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800c26a:	2001      	movs	r0, #1
}
 800c26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c26e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c272:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c274:	e7e4      	b.n	800c240 <RCCEx_PLL2_Config+0xb4>
 800c276:	bf00      	nop
 800c278:	58024400 	.word	0x58024400
 800c27c:	ffff0007 	.word	0xffff0007

0800c280 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c282:	4c3a      	ldr	r4, [pc, #232]	; (800c36c <RCCEx_PLL3_Config+0xec>)
 800c284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c286:	f003 0303 	and.w	r3, r3, #3
 800c28a:	2b03      	cmp	r3, #3
 800c28c:	d067      	beq.n	800c35e <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	4606      	mov	r6, r0
 800c292:	460f      	mov	r7, r1
 800c294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c298:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c29a:	f7fc fd29 	bl	8008cf0 <HAL_GetTick>
 800c29e:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2a0:	e004      	b.n	800c2ac <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c2a2:	f7fc fd25 	bl	8008cf0 <HAL_GetTick>
 800c2a6:	1b43      	subs	r3, r0, r5
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d856      	bhi.n	800c35a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2ac:	6823      	ldr	r3, [r4, #0]
 800c2ae:	009a      	lsls	r2, r3, #2
 800c2b0:	d4f7      	bmi.n	800c2a2 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c2b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c2b4:	6832      	ldr	r2, [r6, #0]
 800c2b6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800c2ba:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800c2be:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2c0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	3a01      	subs	r2, #1
 800c2c8:	025b      	lsls	r3, r3, #9
 800c2ca:	0412      	lsls	r2, r2, #16
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	6872      	ldr	r2, [r6, #4]
 800c2d6:	3a01      	subs	r2, #1
 800c2d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	6932      	ldr	r2, [r6, #16]
 800c2e0:	3a01      	subs	r2, #1
 800c2e2:	0612      	lsls	r2, r2, #24
 800c2e4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c2ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c2ee:	6972      	ldr	r2, [r6, #20]
 800c2f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c2f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c2fa:	69b3      	ldr	r3, [r6, #24]
 800c2fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c300:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c302:	4b1b      	ldr	r3, [pc, #108]	; (800c370 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c304:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c306:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c30c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c30e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c310:	69f2      	ldr	r2, [r6, #28]
 800c312:	400b      	ands	r3, r1
 800c314:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c318:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c31a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c31c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c320:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c322:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800c324:	b1ef      	cbz	r7, 800c362 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c326:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c328:	bf0c      	ite	eq
 800c32a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c32e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800c332:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c334:	4c0d      	ldr	r4, [pc, #52]	; (800c36c <RCCEx_PLL3_Config+0xec>)
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c33c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c33e:	f7fc fcd7 	bl	8008cf0 <HAL_GetTick>
 800c342:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c344:	e004      	b.n	800c350 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c346:	f7fc fcd3 	bl	8008cf0 <HAL_GetTick>
 800c34a:	1b40      	subs	r0, r0, r5
 800c34c:	2802      	cmp	r0, #2
 800c34e:	d804      	bhi.n	800c35a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	d5f7      	bpl.n	800c346 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800c356:	2000      	movs	r0, #0
}
 800c358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800c35a:	2003      	movs	r0, #3
}
 800c35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800c35e:	2001      	movs	r0, #1
}
 800c360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c366:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c368:	e7e4      	b.n	800c334 <RCCEx_PLL3_Config+0xb4>
 800c36a:	bf00      	nop
 800c36c:	58024400 	.word	0x58024400
 800c370:	ffff0007 	.word	0xffff0007

0800c374 <HAL_RCCEx_PeriphCLKConfig>:
{
 800c374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c378:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800c37c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c37e:	011d      	lsls	r5, r3, #4
 800c380:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800c384:	d521      	bpl.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c386:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800c388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c38c:	f000 8577 	beq.w	800ce7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c390:	d80e      	bhi.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c392:	2900      	cmp	r1, #0
 800c394:	f000 85d2 	beq.w	800cf3c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 800c398:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c39c:	f040 85cb 	bne.w	800cf36 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c3a0:	2102      	movs	r1, #2
 800c3a2:	3008      	adds	r0, #8
 800c3a4:	f7ff fef2 	bl	800c18c <RCCEx_PLL2_Config>
 800c3a8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800c3aa:	b966      	cbnz	r6, 800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c3ac:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800c3ae:	e003      	b.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c3b0:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800c3b4:	f040 85bf 	bne.w	800cf36 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c3b8:	4aa3      	ldr	r2, [pc, #652]	; (800c648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c3ba:	2600      	movs	r6, #0
 800c3bc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c3be:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c3c2:	430b      	orrs	r3, r1
 800c3c4:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c3c6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c3ca:	05d8      	lsls	r0, r3, #23
 800c3cc:	d50a      	bpl.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c3ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c3d0:	2904      	cmp	r1, #4
 800c3d2:	d806      	bhi.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800c3d4:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c3d8:	0564055d 	.word	0x0564055d
 800c3dc:	0310057b 	.word	0x0310057b
 800c3e0:	0310      	.short	0x0310
 800c3e2:	2601      	movs	r6, #1
 800c3e4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c3e6:	0599      	lsls	r1, r3, #22
 800c3e8:	d517      	bpl.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800c3ea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c3ec:	2980      	cmp	r1, #128	; 0x80
 800c3ee:	f000 8575 	beq.w	800cedc <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800c3f2:	f200 80e1 	bhi.w	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800c3f6:	2900      	cmp	r1, #0
 800c3f8:	f000 8446 	beq.w	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800c3fc:	2940      	cmp	r1, #64	; 0x40
 800c3fe:	f040 80e2 	bne.w	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c402:	2100      	movs	r1, #0
 800c404:	f104 0008 	add.w	r0, r4, #8
 800c408:	f7ff fec0 	bl	800c18c <RCCEx_PLL2_Config>
 800c40c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c40e:	2d00      	cmp	r5, #0
 800c410:	f000 83f6 	beq.w	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x88c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c414:	462e      	mov	r6, r5
 800c416:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c41a:	055f      	lsls	r7, r3, #21
 800c41c:	d51a      	bpl.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800c41e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800c422:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800c426:	f000 8522 	beq.w	800ce6e <HAL_RCCEx_PeriphCLKConfig+0xafa>
 800c42a:	f200 80cf 	bhi.w	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x258>
 800c42e:	2900      	cmp	r1, #0
 800c430:	f000 8431 	beq.w	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x922>
 800c434:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c438:	f040 80d0 	bne.w	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c43c:	2100      	movs	r1, #0
 800c43e:	f104 0008 	add.w	r0, r4, #8
 800c442:	f7ff fea3 	bl	800c18c <RCCEx_PLL2_Config>
 800c446:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c448:	2d00      	cmp	r5, #0
 800c44a:	f000 83f8 	beq.w	800cc3e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c44e:	462e      	mov	r6, r5
 800c450:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c454:	0518      	lsls	r0, r3, #20
 800c456:	d51a      	bpl.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
 800c458:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800c45c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800c460:	f000 852d 	beq.w	800cebe <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 800c464:	f200 80bd 	bhi.w	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800c468:	2900      	cmp	r1, #0
 800c46a:	f000 8406 	beq.w	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x906>
 800c46e:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800c472:	f040 80be 	bne.w	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c476:	2100      	movs	r1, #0
 800c478:	f104 0008 	add.w	r0, r4, #8
 800c47c:	f7ff fe86 	bl	800c18c <RCCEx_PLL2_Config>
 800c480:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c482:	2d00      	cmp	r5, #0
 800c484:	f000 83b1 	beq.w	800cbea <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c488:	462e      	mov	r6, r5
 800c48a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c48e:	0199      	lsls	r1, r3, #6
 800c490:	d51a      	bpl.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
 800c492:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c494:	2920      	cmp	r1, #32
 800c496:	f000 84b4 	beq.w	800ce02 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 800c49a:	f200 80ad 	bhi.w	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800c49e:	b139      	cbz	r1, 800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c4a0:	2910      	cmp	r1, #16
 800c4a2:	f040 80ac 	bne.w	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4a6:	4a68      	ldr	r2, [pc, #416]	; (800c648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c4a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c4aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800c4b0:	2d00      	cmp	r5, #0
 800c4b2:	f040 8418 	bne.w	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c4b6:	4a64      	ldr	r2, [pc, #400]	; (800c648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c4b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c4ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c4bc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c4c0:	430b      	orrs	r3, r1
 800c4c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c4c4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c4c8:	04df      	lsls	r7, r3, #19
 800c4ca:	d519      	bpl.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800c4cc:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800c4ce:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800c4d2:	f000 84ec 	beq.w	800ceae <HAL_RCCEx_PeriphCLKConfig+0xb3a>
 800c4d6:	f200 8095 	bhi.w	800c604 <HAL_RCCEx_PeriphCLKConfig+0x290>
 800c4da:	2900      	cmp	r1, #0
 800c4dc:	f000 83c7 	beq.w	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 800c4e0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c4e4:	f040 8096 	bne.w	800c614 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	f104 0008 	add.w	r0, r4, #8
 800c4ee:	f7ff fe4d 	bl	800c18c <RCCEx_PLL2_Config>
 800c4f2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c4f4:	2d00      	cmp	r5, #0
 800c4f6:	f000 838d 	beq.w	800cc14 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c4fa:	462e      	mov	r6, r5
 800c4fc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c500:	0498      	lsls	r0, r3, #18
 800c502:	d51d      	bpl.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
 800c504:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c506:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800c50a:	f000 8466 	beq.w	800cdda <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800c50e:	f200 8084 	bhi.w	800c61a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c512:	b149      	cbz	r1, 800c528 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c514:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c518:	f040 8088 	bne.w	800c62c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c51c:	2101      	movs	r1, #1
 800c51e:	f104 0008 	add.w	r0, r4, #8
 800c522:	f7ff fe33 	bl	800c18c <RCCEx_PLL2_Config>
 800c526:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c528:	2d00      	cmp	r5, #0
 800c52a:	f040 83eb 	bne.w	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c52e:	4a46      	ldr	r2, [pc, #280]	; (800c648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c530:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c532:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c534:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c538:	430b      	orrs	r3, r1
 800c53a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c53c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c540:	0459      	lsls	r1, r3, #17
 800c542:	d51d      	bpl.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
 800c544:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800c548:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800c54c:	f000 844f 	beq.w	800cdee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c550:	d86f      	bhi.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800c552:	b141      	cbz	r1, 800c566 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800c554:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800c558:	d173      	bne.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c55a:	2101      	movs	r1, #1
 800c55c:	f104 0008 	add.w	r0, r4, #8
 800c560:	f7ff fe14 	bl	800c18c <RCCEx_PLL2_Config>
 800c564:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c566:	2d00      	cmp	r5, #0
 800c568:	f040 83d4 	bne.w	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c56c:	4a36      	ldr	r2, [pc, #216]	; (800c648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c56e:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800c572:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c574:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800c578:	430b      	orrs	r3, r1
 800c57a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c57c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c580:	041f      	lsls	r7, r3, #16
 800c582:	d50d      	bpl.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
 800c584:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800c586:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800c58a:	f000 841d 	beq.w	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800c58e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800c592:	f000 8239 	beq.w	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800c596:	2900      	cmp	r1, #0
 800c598:	f000 823c 	beq.w	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800c59c:	2601      	movs	r6, #1
 800c59e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c5a0:	01d8      	lsls	r0, r3, #7
 800c5a2:	d55e      	bpl.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->FmcClockSelection)
 800c5a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c5a6:	2903      	cmp	r1, #3
 800c5a8:	f200 84f3 	bhi.w	800cf92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c5ac:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c5b0:	004e0053 	.word	0x004e0053
 800c5b4:	0053043d 	.word	0x0053043d
    switch (PeriphClkInit->Sai23ClockSelection)
 800c5b8:	29c0      	cmp	r1, #192	; 0xc0
 800c5ba:	f43f af28 	beq.w	800c40e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800c5be:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c5c2:	f43f af24 	beq.w	800c40e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800c5c6:	2601      	movs	r6, #1
 800c5c8:	4635      	mov	r5, r6
 800c5ca:	e726      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800c5cc:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800c5d0:	f43f af3a 	beq.w	800c448 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c5d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c5d8:	f43f af36 	beq.w	800c448 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c5dc:	2601      	movs	r6, #1
 800c5de:	4635      	mov	r5, r6
 800c5e0:	e738      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
 800c5e2:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800c5e6:	f43f af4c 	beq.w	800c482 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800c5ea:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800c5ee:	f43f af48 	beq.w	800c482 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800c5f2:	2601      	movs	r6, #1
 800c5f4:	4635      	mov	r5, r6
 800c5f6:	e74a      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
 800c5f8:	2930      	cmp	r1, #48	; 0x30
 800c5fa:	f43f af59 	beq.w	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c5fe:	2601      	movs	r6, #1
 800c600:	4635      	mov	r5, r6
 800c602:	e761      	b.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
 800c604:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800c608:	f43f af74 	beq.w	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800c60c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800c610:	f43f af70 	beq.w	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800c614:	2601      	movs	r6, #1
 800c616:	4635      	mov	r5, r6
 800c618:	e772      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
 800c61a:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800c61e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800c622:	d081      	beq.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c624:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800c628:	f43f af7e 	beq.w	800c528 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c62c:	2601      	movs	r6, #1
 800c62e:	4635      	mov	r5, r6
 800c630:	e786      	b.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
 800c632:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800c636:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c63a:	d094      	beq.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800c63c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800c640:	d091      	beq.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800c642:	2601      	movs	r6, #1
 800c644:	4635      	mov	r5, r6
 800c646:	e79b      	b.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800c648:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c64c:	4a34      	ldr	r2, [pc, #208]	; (800c720 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800c64e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c654:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800c656:	2d00      	cmp	r5, #0
 800c658:	f000 834a 	beq.w	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c65c:	462e      	mov	r6, r5
 800c65e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c662:	0259      	lsls	r1, r3, #9
 800c664:	f100 826f 	bmi.w	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c668:	07d8      	lsls	r0, r3, #31
 800c66a:	d52f      	bpl.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (PeriphClkInit->Usart16ClockSelection)
 800c66c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800c66e:	2928      	cmp	r1, #40	; 0x28
 800c670:	d82a      	bhi.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800c672:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c676:	020d      	.short	0x020d
 800c678:	00290029 	.word	0x00290029
 800c67c:	00290029 	.word	0x00290029
 800c680:	00290029 	.word	0x00290029
 800c684:	02070029 	.word	0x02070029
 800c688:	00290029 	.word	0x00290029
 800c68c:	00290029 	.word	0x00290029
 800c690:	00290029 	.word	0x00290029
 800c694:	04500029 	.word	0x04500029
 800c698:	00290029 	.word	0x00290029
 800c69c:	00290029 	.word	0x00290029
 800c6a0:	00290029 	.word	0x00290029
 800c6a4:	020d0029 	.word	0x020d0029
 800c6a8:	00290029 	.word	0x00290029
 800c6ac:	00290029 	.word	0x00290029
 800c6b0:	00290029 	.word	0x00290029
 800c6b4:	020d0029 	.word	0x020d0029
 800c6b8:	00290029 	.word	0x00290029
 800c6bc:	00290029 	.word	0x00290029
 800c6c0:	00290029 	.word	0x00290029
 800c6c4:	020d0029 	.word	0x020d0029
 800c6c8:	2601      	movs	r6, #1
 800c6ca:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c6cc:	0799      	lsls	r1, r3, #30
 800c6ce:	d517      	bpl.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c6d0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800c6d2:	2905      	cmp	r1, #5
 800c6d4:	f200 8465 	bhi.w	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 800c6d8:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c6dc:	0006000c 	.word	0x0006000c
 800c6e0:	000c0412 	.word	0x000c0412
 800c6e4:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	f104 0008 	add.w	r0, r4, #8
 800c6ee:	f7ff fd4d 	bl	800c18c <RCCEx_PLL2_Config>
 800c6f2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c6f4:	2d00      	cmp	r5, #0
 800c6f6:	f000 82dd 	beq.w	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x940>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c6fa:	462e      	mov	r6, r5
 800c6fc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c700:	075f      	lsls	r7, r3, #29
 800c702:	d51b      	bpl.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c704:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c708:	2905      	cmp	r1, #5
 800c70a:	f200 8446 	bhi.w	800cf9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800c70e:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c712:	000f      	.short	0x000f
 800c714:	03ed0009 	.word	0x03ed0009
 800c718:	000f000f 	.word	0x000f000f
 800c71c:	000f      	.short	0x000f
 800c71e:	bf00      	nop
 800c720:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c724:	2101      	movs	r1, #1
 800c726:	f104 0008 	add.w	r0, r4, #8
 800c72a:	f7ff fd2f 	bl	800c18c <RCCEx_PLL2_Config>
 800c72e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c730:	2d00      	cmp	r5, #0
 800c732:	f000 82c9 	beq.w	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x954>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c736:	462e      	mov	r6, r5
 800c738:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c73c:	0698      	lsls	r0, r3, #26
 800c73e:	d51f      	bpl.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c740:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800c744:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800c748:	f000 8365 	beq.w	800ce16 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800c74c:	f200 811c 	bhi.w	800c988 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800c750:	b149      	cbz	r1, 800c766 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800c752:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800c756:	f040 8121 	bne.w	800c99c <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c75a:	2100      	movs	r1, #0
 800c75c:	f104 0008 	add.w	r0, r4, #8
 800c760:	f7ff fd14 	bl	800c18c <RCCEx_PLL2_Config>
 800c764:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c766:	2d00      	cmp	r5, #0
 800c768:	f040 82b9 	bne.w	800ccde <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c76c:	4ab0      	ldr	r2, [pc, #704]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c76e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800c772:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c774:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800c778:	430b      	orrs	r3, r1
 800c77a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c77c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c780:	0659      	lsls	r1, r3, #25
 800c782:	d51f      	bpl.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c784:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800c788:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800c78c:	f000 8308 	beq.w	800cda0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800c790:	f200 8107 	bhi.w	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 800c794:	b149      	cbz	r1, 800c7aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c796:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c79a:	f040 810c 	bne.w	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c79e:	2100      	movs	r1, #0
 800c7a0:	f104 0008 	add.w	r0, r4, #8
 800c7a4:	f7ff fcf2 	bl	800c18c <RCCEx_PLL2_Config>
 800c7a8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c7aa:	2d00      	cmp	r5, #0
 800c7ac:	f040 82b6 	bne.w	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c7b0:	4a9f      	ldr	r2, [pc, #636]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c7b2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800c7b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c7b8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800c7bc:	430b      	orrs	r3, r1
 800c7be:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c7c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c7c4:	061f      	lsls	r7, r3, #24
 800c7c6:	d51f      	bpl.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c7c8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800c7cc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800c7d0:	f000 82f0 	beq.w	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800c7d4:	f200 80f2 	bhi.w	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x648>
 800c7d8:	b149      	cbz	r1, 800c7ee <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800c7da:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800c7de:	f040 80f7 	bne.w	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	f104 0008 	add.w	r0, r4, #8
 800c7e8:	f7ff fcd0 	bl	800c18c <RCCEx_PLL2_Config>
 800c7ec:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c7ee:	2d00      	cmp	r5, #0
 800c7f0:	f040 828c 	bne.w	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c7f4:	4a8e      	ldr	r2, [pc, #568]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c7f6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800c7fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c7fc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800c800:	430b      	orrs	r3, r1
 800c802:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c804:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c808:	0718      	lsls	r0, r3, #28
 800c80a:	d50d      	bpl.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c80c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800c810:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c814:	f000 8313 	beq.w	800ce3e <HAL_RCCEx_PeriphCLKConfig+0xaca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c818:	4985      	ldr	r1, [pc, #532]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c81a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c81c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c820:	4313      	orrs	r3, r2
 800c822:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c824:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c828:	06d9      	lsls	r1, r3, #27
 800c82a:	d50d      	bpl.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c82c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800c830:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800c834:	f000 830f 	beq.w	800ce56 <HAL_RCCEx_PeriphCLKConfig+0xae2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c838:	497d      	ldr	r1, [pc, #500]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c83a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800c83c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c840:	4313      	orrs	r3, r2
 800c842:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c844:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c848:	031f      	lsls	r7, r3, #12
 800c84a:	d50e      	bpl.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    switch (PeriphClkInit->AdcClockSelection)
 800c84c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800c850:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c854:	f000 8102 	beq.w	800ca5c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 800c858:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800c85c:	f000 8104 	beq.w	800ca68 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800c860:	2900      	cmp	r1, #0
 800c862:	f000 8292 	beq.w	800cd8a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800c866:	2601      	movs	r6, #1
 800c868:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c86a:	0358      	lsls	r0, r3, #13
 800c86c:	d50f      	bpl.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch (PeriphClkInit->UsbClockSelection)
 800c86e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800c872:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c876:	f000 80dd 	beq.w	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800c87a:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800c87e:	f000 80df 	beq.w	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c882:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c886:	f000 8277 	beq.w	800cd78 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800c88a:	2601      	movs	r6, #1
 800c88c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c88e:	03d9      	lsls	r1, r3, #15
 800c890:	d509      	bpl.n	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    switch (PeriphClkInit->SdmmcClockSelection)
 800c892:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c894:	2900      	cmp	r1, #0
 800c896:	f000 825a 	beq.w	800cd4e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c89a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c89e:	f000 81da 	beq.w	800cc56 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800c8a2:	2601      	movs	r6, #1
 800c8a4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c8a6:	009f      	lsls	r7, r3, #2
 800c8a8:	f100 80ff 	bmi.w	800caaa <HAL_RCCEx_PeriphCLKConfig+0x736>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c8ac:	0398      	lsls	r0, r3, #14
 800c8ae:	d50e      	bpl.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->RngClockSelection)
 800c8b0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c8b4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c8b8:	f000 8240 	beq.w	800cd3c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 800c8bc:	f240 808b 	bls.w	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800c8c0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800c8c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c8c8:	f000 8088 	beq.w	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x668>
 800c8cc:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c8ce:	02d9      	lsls	r1, r3, #11
 800c8d0:	d508      	bpl.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c8d2:	4a57      	ldr	r2, [pc, #348]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c8d4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c8d6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c8d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8dc:	430b      	orrs	r3, r1
 800c8de:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c8e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c8e4:	00df      	lsls	r7, r3, #3
 800c8e6:	d509      	bpl.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c8e8:	4a51      	ldr	r2, [pc, #324]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c8ea:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800c8ee:	6913      	ldr	r3, [r2, #16]
 800c8f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8f4:	430b      	orrs	r3, r1
 800c8f6:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c8f8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c8fc:	029d      	lsls	r5, r3, #10
 800c8fe:	d508      	bpl.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c900:	4a4b      	ldr	r2, [pc, #300]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c902:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800c904:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c90a:	430b      	orrs	r3, r1
 800c90c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c90e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c912:	0058      	lsls	r0, r3, #1
 800c914:	d50b      	bpl.n	800c92e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c916:	4b46      	ldr	r3, [pc, #280]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c918:	691a      	ldr	r2, [r3, #16]
 800c91a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c91e:	611a      	str	r2, [r3, #16]
 800c920:	691a      	ldr	r2, [r3, #16]
 800c922:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 800c926:	430a      	orrs	r2, r1
 800c928:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c92a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	da08      	bge.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c932:	4a3f      	ldr	r2, [pc, #252]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c934:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c936:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c938:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800c93c:	430b      	orrs	r3, r1
 800c93e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c940:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c944:	0219      	lsls	r1, r3, #8
 800c946:	d508      	bpl.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c948:	4a39      	ldr	r2, [pc, #228]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c94a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800c94e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c950:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800c954:	430b      	orrs	r3, r1
 800c956:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c958:	6862      	ldr	r2, [r4, #4]
 800c95a:	07d3      	lsls	r3, r2, #31
 800c95c:	f100 80b1 	bmi.w	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c960:	0797      	lsls	r7, r2, #30
 800c962:	f100 80bb 	bmi.w	800cadc <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c966:	0755      	lsls	r5, r2, #29
 800c968:	f100 80c5 	bmi.w	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x782>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c96c:	0710      	lsls	r0, r2, #28
 800c96e:	f100 80cf 	bmi.w	800cb10 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c972:	06d1      	lsls	r1, r2, #27
 800c974:	f100 80d9 	bmi.w	800cb2a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c978:	0692      	lsls	r2, r2, #26
 800c97a:	f100 812a 	bmi.w	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    return HAL_OK;
 800c97e:	1e30      	subs	r0, r6, #0
 800c980:	bf18      	it	ne
 800c982:	2001      	movne	r0, #1
}
 800c984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c988:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800c98c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c990:	f43f aee9 	beq.w	800c766 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800c994:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800c998:	f43f aee5 	beq.w	800c766 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800c99c:	2601      	movs	r6, #1
 800c99e:	4635      	mov	r5, r6
 800c9a0:	e6ee      	b.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c9a2:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800c9a6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800c9aa:	f43f aefe 	beq.w	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c9ae:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800c9b2:	f43f aefa 	beq.w	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c9b6:	2601      	movs	r6, #1
 800c9b8:	4635      	mov	r5, r6
 800c9ba:	e703      	b.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c9bc:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800c9c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c9c4:	f43f af13 	beq.w	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800c9c8:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800c9cc:	f43f af0f 	beq.w	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800c9d0:	2601      	movs	r6, #1
 800c9d2:	4635      	mov	r5, r6
 800c9d4:	e718      	b.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->RngClockSelection)
 800c9d6:	2900      	cmp	r1, #0
 800c9d8:	f47f af78 	bne.w	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x558>
    if (ret == HAL_OK)
 800c9dc:	2d00      	cmp	r5, #0
 800c9de:	f040 81c7 	bne.w	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c9e2:	4a13      	ldr	r2, [pc, #76]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800c9e4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c9e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c9ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9ee:	430b      	orrs	r3, r1
 800c9f0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c9f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c9f6:	e76a      	b.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c9f8:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800c9fa:	2d00      	cmp	r5, #0
 800c9fc:	f000 8114 	beq.w	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ca00:	462e      	mov	r6, r5
 800ca02:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ca06:	e4ee      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca08:	2101      	movs	r1, #1
 800ca0a:	f104 0008 	add.w	r0, r4, #8
 800ca0e:	f7ff fbbd 	bl	800c18c <RCCEx_PLL2_Config>
 800ca12:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ca14:	2d00      	cmp	r5, #0
 800ca16:	f040 8149 	bne.w	800ccac <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ca1a:	4a05      	ldr	r2, [pc, #20]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800ca1c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800ca1e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ca20:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800ca24:	430b      	orrs	r3, r1
 800ca26:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ca28:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ca2c:	e5b8      	b.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800ca2e:	bf00      	nop
 800ca30:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca34:	2101      	movs	r1, #1
 800ca36:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ca3a:	f7ff fc21 	bl	800c280 <RCCEx_PLL3_Config>
 800ca3e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ca40:	2d00      	cmp	r5, #0
 800ca42:	f040 8173 	bne.w	800cd2c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ca46:	4abb      	ldr	r2, [pc, #748]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800ca48:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800ca4c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ca4e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ca52:	430b      	orrs	r3, r1
 800ca54:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ca56:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ca5a:	e718      	b.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca5c:	2102      	movs	r1, #2
 800ca5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ca62:	f7ff fc0d 	bl	800c280 <RCCEx_PLL3_Config>
 800ca66:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ca68:	2d00      	cmp	r5, #0
 800ca6a:	f040 815b 	bne.w	800cd24 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ca6e:	4ab1      	ldr	r2, [pc, #708]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800ca70:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800ca74:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ca76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ca7a:	430b      	orrs	r3, r1
 800ca7c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ca7e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ca82:	e6f2      	b.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca84:	2101      	movs	r1, #1
 800ca86:	f104 0008 	add.w	r0, r4, #8
 800ca8a:	f7ff fb7f 	bl	800c18c <RCCEx_PLL2_Config>
 800ca8e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ca90:	2d00      	cmp	r5, #0
 800ca92:	f040 8107 	bne.w	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ca96:	4aa7      	ldr	r2, [pc, #668]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800ca98:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800ca9a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ca9c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800caa0:	430b      	orrs	r3, r1
 800caa2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800caa4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800caa8:	e610      	b.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800caaa:	2102      	movs	r1, #2
 800caac:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cab0:	f7ff fbe6 	bl	800c280 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cab4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cab8:	2800      	cmp	r0, #0
 800caba:	f43f aef7 	beq.w	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x538>
      status = HAL_ERROR;
 800cabe:	2601      	movs	r6, #1
 800cac0:	e6f4      	b.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x538>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cac2:	2100      	movs	r1, #0
 800cac4:	f104 0008 	add.w	r0, r4, #8
 800cac8:	f7ff fb60 	bl	800c18c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cacc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800cace:	2800      	cmp	r0, #0
 800cad0:	f43f af46 	beq.w	800c960 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cad4:	0797      	lsls	r7, r2, #30
 800cad6:	4606      	mov	r6, r0
 800cad8:	f57f af45 	bpl.w	800c966 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cadc:	2101      	movs	r1, #1
 800cade:	f104 0008 	add.w	r0, r4, #8
 800cae2:	f7ff fb53 	bl	800c18c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cae6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800cae8:	2800      	cmp	r0, #0
 800caea:	f43f af3c 	beq.w	800c966 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800caee:	0755      	lsls	r5, r2, #29
 800caf0:	4606      	mov	r6, r0
 800caf2:	f57f af3b 	bpl.w	800c96c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800caf6:	2102      	movs	r1, #2
 800caf8:	f104 0008 	add.w	r0, r4, #8
 800cafc:	f7ff fb46 	bl	800c18c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cb00:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800cb02:	2800      	cmp	r0, #0
 800cb04:	f43f af32 	beq.w	800c96c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cb08:	4606      	mov	r6, r0
 800cb0a:	0710      	lsls	r0, r2, #28
 800cb0c:	f57f af31 	bpl.w	800c972 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb10:	2100      	movs	r1, #0
 800cb12:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cb16:	f7ff fbb3 	bl	800c280 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cb1a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	f43f af28 	beq.w	800c972 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cb22:	06d1      	lsls	r1, r2, #27
 800cb24:	4606      	mov	r6, r0
 800cb26:	f57f af27 	bpl.w	800c978 <HAL_RCCEx_PeriphCLKConfig+0x604>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb2a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800cb2e:	2101      	movs	r1, #1
 800cb30:	4628      	mov	r0, r5
 800cb32:	f7ff fba5 	bl	800c280 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800cb36:	2800      	cmp	r0, #0
 800cb38:	f000 8130 	beq.w	800cd9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cb3c:	6863      	ldr	r3, [r4, #4]
 800cb3e:	069b      	lsls	r3, r3, #26
 800cb40:	d550      	bpl.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x870>
 800cb42:	4606      	mov	r6, r0
 800cb44:	e047      	b.n	800cbd6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cb46:	4f7c      	ldr	r7, [pc, #496]	; (800cd38 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb4e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800cb50:	f7fc f8ce 	bl	8008cf0 <HAL_GetTick>
 800cb54:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cb56:	e006      	b.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cb58:	f7fc f8ca 	bl	8008cf0 <HAL_GetTick>
 800cb5c:	eba0 0008 	sub.w	r0, r0, r8
 800cb60:	2864      	cmp	r0, #100	; 0x64
 800cb62:	f200 81e2 	bhi.w	800cf2a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	05da      	lsls	r2, r3, #23
 800cb6a:	d5f5      	bpl.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    if (ret == HAL_OK)
 800cb6c:	2d00      	cmp	r5, #0
 800cb6e:	f040 820b 	bne.w	800cf88 <HAL_RCCEx_PeriphCLKConfig+0xc14>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cb72:	4b70      	ldr	r3, [pc, #448]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cb74:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800cb78:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cb7a:	4051      	eors	r1, r2
 800cb7c:	f411 7f40 	tst.w	r1, #768	; 0x300
 800cb80:	d00d      	beq.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x82a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cb82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800cb84:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cb86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800cb8a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800cb8e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cb90:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cb92:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800cb96:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800cb98:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cb9a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800cb9e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800cba2:	f000 81d3 	beq.w	800cf4c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cba6:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800cbaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbae:	f000 81e1 	beq.w	800cf74 <HAL_RCCEx_PeriphCLKConfig+0xc00>
 800cbb2:	4a60      	ldr	r2, [pc, #384]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cbb4:	6913      	ldr	r3, [r2, #16]
 800cbb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cbba:	6113      	str	r3, [r2, #16]
 800cbbc:	4a5d      	ldr	r2, [pc, #372]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cbbe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800cbc2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800cbc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbc8:	430b      	orrs	r3, r1
 800cbca:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cbcc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cbd0:	e54a      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cbd2:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cbd6:	2102      	movs	r1, #2
 800cbd8:	4628      	mov	r0, r5
 800cbda:	f7ff fb51 	bl	800c280 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	f43f aecd 	beq.w	800c97e <HAL_RCCEx_PeriphCLKConfig+0x60a>
  return HAL_ERROR;
 800cbe4:	2001      	movs	r0, #1
}
 800cbe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cbea:	4a52      	ldr	r2, [pc, #328]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cbec:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800cbf0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cbf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800cbf6:	430b      	orrs	r3, r1
 800cbf8:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cbfa:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cbfe:	e446      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800cc00:	4a4c      	ldr	r2, [pc, #304]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cc02:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cc04:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cc06:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800cc0a:	430b      	orrs	r3, r1
 800cc0c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cc0e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cc12:	e402      	b.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cc14:	4a47      	ldr	r2, [pc, #284]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cc16:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800cc18:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cc1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc1e:	430b      	orrs	r3, r1
 800cc20:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cc22:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cc26:	e46b      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cc28:	4a42      	ldr	r2, [pc, #264]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cc2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cc2c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cc2e:	f023 0307 	bic.w	r3, r3, #7
 800cc32:	430b      	orrs	r3, r1
 800cc34:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cc36:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cc3a:	f7ff bbd4 	b.w	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cc3e:	4a3d      	ldr	r2, [pc, #244]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cc40:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800cc44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cc46:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800cc4a:	430b      	orrs	r3, r1
 800cc4c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cc4e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cc52:	f7ff bbff 	b.w	800c454 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc56:	2102      	movs	r1, #2
 800cc58:	f104 0008 	add.w	r0, r4, #8
 800cc5c:	f7ff fa96 	bl	800c18c <RCCEx_PLL2_Config>
 800cc60:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cc62:	2d00      	cmp	r5, #0
 800cc64:	d07a      	beq.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cc66:	462e      	mov	r6, r5
 800cc68:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cc6c:	e61b      	b.n	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0x532>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc6e:	4a31      	ldr	r2, [pc, #196]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cc70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cc72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc76:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800cc78:	e43c      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc7a:	4a2e      	ldr	r2, [pc, #184]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cc7c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cc7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc82:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800cc84:	f7ff bbfd 	b.w	800c482 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc88:	4a2a      	ldr	r2, [pc, #168]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cc8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cc8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc90:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800cc92:	f7ff bbbc 	b.w	800c40e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc96:	4a27      	ldr	r2, [pc, #156]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800cc98:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cc9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc9e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800cca0:	f7ff bbd2 	b.w	800c448 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cca4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cca8:	462e      	mov	r6, r5
 800ccaa:	e50f      	b.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x358>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ccac:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ccb0:	462e      	mov	r6, r5
 800ccb2:	e475      	b.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ccb4:	4a1f      	ldr	r2, [pc, #124]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800ccb6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ccb8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ccba:	f023 0307 	bic.w	r3, r3, #7
 800ccbe:	430b      	orrs	r3, r1
 800ccc0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ccc2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ccc6:	e51b      	b.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ccc8:	4a1a      	ldr	r2, [pc, #104]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800ccca:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ccce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ccd0:	f023 0307 	bic.w	r3, r3, #7
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ccd8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ccdc:	e52e      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ccde:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cce2:	462e      	mov	r6, r5
 800cce4:	e54c      	b.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cce6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ccea:	462e      	mov	r6, r5
 800ccec:	f7ff bbec 	b.w	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ccf0:	4a10      	ldr	r2, [pc, #64]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800ccf2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ccf4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ccf6:	f023 0303 	bic.w	r3, r3, #3
 800ccfa:	430b      	orrs	r3, r1
 800ccfc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ccfe:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd02:	e4ae      	b.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cd04:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd08:	462e      	mov	r6, r5
 800cd0a:	e419      	b.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800cd0c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd10:	462e      	mov	r6, r5
 800cd12:	e579      	b.n	800c808 <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cd14:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd18:	462e      	mov	r6, r5
 800cd1a:	e431      	b.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cd1c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd20:	462e      	mov	r6, r5
 800cd22:	e54f      	b.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cd24:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd28:	462e      	mov	r6, r5
 800cd2a:	e59e      	b.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cd2c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd30:	462e      	mov	r6, r5
 800cd32:	e5ac      	b.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800cd34:	58024400 	.word	0x58024400
 800cd38:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd3c:	4a9b      	ldr	r2, [pc, #620]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800cd3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cd40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd44:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800cd46:	2d00      	cmp	r5, #0
 800cd48:	f43f ae4b 	beq.w	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800cd4c:	e010      	b.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd4e:	4a97      	ldr	r2, [pc, #604]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800cd50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cd52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd56:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800cd58:	2d00      	cmp	r5, #0
 800cd5a:	d184      	bne.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cd5c:	4a93      	ldr	r2, [pc, #588]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800cd5e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800cd60:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800cd62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd66:	430b      	orrs	r3, r1
 800cd68:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cd6a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd6e:	e59a      	b.n	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cd70:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd74:	462e      	mov	r6, r5
 800cd76:	e5aa      	b.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd78:	4a8c      	ldr	r2, [pc, #560]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800cd7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cd7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd80:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800cd82:	2d00      	cmp	r5, #0
 800cd84:	f43f ae5f 	beq.w	800ca46 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 800cd88:	e7d0      	b.n	800cd2c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd8a:	f104 0008 	add.w	r0, r4, #8
 800cd8e:	f7ff f9fd 	bl	800c18c <RCCEx_PLL2_Config>
 800cd92:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cd94:	2d00      	cmp	r5, #0
 800cd96:	f43f ae6a 	beq.w	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 800cd9a:	e7c3      	b.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cd9c:	6862      	ldr	r2, [r4, #4]
 800cd9e:	e5eb      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x604>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cda0:	2102      	movs	r1, #2
 800cda2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cda6:	f7ff fa6b 	bl	800c280 <RCCEx_PLL3_Config>
 800cdaa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cdac:	2d00      	cmp	r5, #0
 800cdae:	f43f acff 	beq.w	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800cdb2:	e7b3      	b.n	800cd1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cdb4:	2102      	movs	r1, #2
 800cdb6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cdba:	f7ff fa61 	bl	800c280 <RCCEx_PLL3_Config>
 800cdbe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cdc0:	2d00      	cmp	r5, #0
 800cdc2:	f43f ad17 	beq.w	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800cdc6:	e7a1      	b.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x998>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdc8:	4a78      	ldr	r2, [pc, #480]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800cdca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cdcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800cdd2:	2d00      	cmp	r5, #0
 800cdd4:	f43f ae21 	beq.w	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800cdd8:	e768      	b.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0x938>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cdda:	2101      	movs	r1, #1
 800cddc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cde0:	f7ff fa4e 	bl	800c280 <RCCEx_PLL3_Config>
 800cde4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cde6:	2d00      	cmp	r5, #0
 800cde8:	f43f aba1 	beq.w	800c52e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800cdec:	e78a      	b.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cdee:	2101      	movs	r1, #1
 800cdf0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cdf4:	f7ff fa44 	bl	800c280 <RCCEx_PLL3_Config>
 800cdf8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cdfa:	2d00      	cmp	r5, #0
 800cdfc:	f43f abb6 	beq.w	800c56c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ce00:	e788      	b.n	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce02:	2102      	movs	r1, #2
 800ce04:	f104 0008 	add.w	r0, r4, #8
 800ce08:	f7ff f9c0 	bl	800c18c <RCCEx_PLL2_Config>
 800ce0c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ce0e:	2d00      	cmp	r5, #0
 800ce10:	f43f ab51 	beq.w	800c4b6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800ce14:	e767      	b.n	800cce6 <HAL_RCCEx_PeriphCLKConfig+0x972>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce16:	2102      	movs	r1, #2
 800ce18:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ce1c:	f7ff fa30 	bl	800c280 <RCCEx_PLL3_Config>
 800ce20:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ce22:	2d00      	cmp	r5, #0
 800ce24:	f43f aca2 	beq.w	800c76c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ce28:	e759      	b.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce2a:	2102      	movs	r1, #2
 800ce2c:	f104 0008 	add.w	r0, r4, #8
 800ce30:	f7ff f9ac 	bl	800c18c <RCCEx_PLL2_Config>
 800ce34:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ce36:	2d00      	cmp	r5, #0
 800ce38:	f43f af5a 	beq.w	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800ce3c:	e40e      	b.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ce3e:	2102      	movs	r1, #2
 800ce40:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ce44:	f7ff fa1c 	bl	800c280 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ce48:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	f43f ace3 	beq.w	800c818 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        status = HAL_ERROR;
 800ce52:	2601      	movs	r6, #1
 800ce54:	e4e0      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ce56:	2102      	movs	r1, #2
 800ce58:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ce5c:	f7ff fa10 	bl	800c280 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ce60:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ce64:	2800      	cmp	r0, #0
 800ce66:	f43f ace7 	beq.w	800c838 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        status = HAL_ERROR;
 800ce6a:	2601      	movs	r6, #1
 800ce6c:	e4e4      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce6e:	2100      	movs	r1, #0
 800ce70:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ce74:	f7ff fa04 	bl	800c280 <RCCEx_PLL3_Config>
 800ce78:	4605      	mov	r5, r0
        break;
 800ce7a:	f7ff bae5 	b.w	800c448 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce7e:	2102      	movs	r1, #2
 800ce80:	3028      	adds	r0, #40	; 0x28
 800ce82:	f7ff f9fd 	bl	800c280 <RCCEx_PLL3_Config>
 800ce86:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800ce88:	2e00      	cmp	r6, #0
 800ce8a:	f43f aa8f 	beq.w	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x38>
 800ce8e:	f7ff ba9a 	b.w	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce92:	4a46      	ldr	r2, [pc, #280]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0xc38>)
        break;
 800ce94:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ce98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce9c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800ce9e:	e5ac      	b.n	800c9fa <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cea0:	2100      	movs	r1, #0
 800cea2:	f104 0008 	add.w	r0, r4, #8
 800cea6:	f7ff f971 	bl	800c18c <RCCEx_PLL2_Config>
 800ceaa:	4605      	mov	r5, r0
        break;
 800ceac:	e5a5      	b.n	800c9fa <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ceae:	2100      	movs	r1, #0
 800ceb0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ceb4:	f7ff f9e4 	bl	800c280 <RCCEx_PLL3_Config>
 800ceb8:	4605      	mov	r5, r0
        break;
 800ceba:	f7ff bb1b 	b.w	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cebe:	2100      	movs	r1, #0
 800cec0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cec4:	f7ff f9dc 	bl	800c280 <RCCEx_PLL3_Config>
 800cec8:	4605      	mov	r5, r0
        break;
 800ceca:	f7ff bada 	b.w	800c482 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cece:	2100      	movs	r1, #0
 800ced0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ced4:	f7ff f9d4 	bl	800c280 <RCCEx_PLL3_Config>
 800ced8:	4605      	mov	r5, r0
        break;
 800ceda:	e58e      	b.n	800c9fa <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cedc:	2100      	movs	r1, #0
 800cede:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cee2:	f7ff f9cd 	bl	800c280 <RCCEx_PLL3_Config>
 800cee6:	4605      	mov	r5, r0
        break;
 800cee8:	f7ff ba91 	b.w	800c40e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ceec:	2101      	movs	r1, #1
 800ceee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cef2:	f7ff f9c5 	bl	800c280 <RCCEx_PLL3_Config>
 800cef6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cef8:	2d00      	cmp	r5, #0
 800cefa:	f43f aee5 	beq.w	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x954>
 800cefe:	e41a      	b.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf00:	2101      	movs	r1, #1
 800cf02:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cf06:	f7ff f9bb 	bl	800c280 <RCCEx_PLL3_Config>
 800cf0a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cf0c:	2d00      	cmp	r5, #0
 800cf0e:	f43f aed1 	beq.w	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x940>
 800cf12:	f7ff bbf2 	b.w	800c6fa <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf16:	2101      	movs	r1, #1
 800cf18:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cf1c:	f7ff f9b0 	bl	800c280 <RCCEx_PLL3_Config>
 800cf20:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cf22:	2d00      	cmp	r5, #0
 800cf24:	f43f adb7 	beq.w	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x722>
 800cf28:	e6bc      	b.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x930>
        status = ret;
 800cf2a:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cf2c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cf30:	4635      	mov	r5, r6
 800cf32:	f7ff bb99 	b.w	800c668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800cf36:	2601      	movs	r6, #1
 800cf38:	f7ff ba47 	b.w	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf3c:	4a1b      	ldr	r2, [pc, #108]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800cf3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cf40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf44:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cf46:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800cf48:	f7ff ba36 	b.w	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
 800cf4c:	f7fb fed0 	bl	8008cf0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf50:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800cfac <HAL_RCCEx_PeriphCLKConfig+0xc38>
        tickstart = HAL_GetTick();
 800cf54:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf56:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf5a:	e004      	b.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf5c:	f7fb fec8 	bl	8008cf0 <HAL_GetTick>
 800cf60:	1bc0      	subs	r0, r0, r7
 800cf62:	4548      	cmp	r0, r9
 800cf64:	d8e1      	bhi.n	800cf2a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf66:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800cf6a:	079b      	lsls	r3, r3, #30
 800cf6c:	d5f6      	bpl.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf6e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800cf72:	e618      	b.n	800cba6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800cf74:	490d      	ldr	r1, [pc, #52]	; (800cfac <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800cf76:	4b0e      	ldr	r3, [pc, #56]	; (800cfb0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
 800cf78:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 800cf7c:	690a      	ldr	r2, [r1, #16]
 800cf7e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800cf82:	4313      	orrs	r3, r2
 800cf84:	610b      	str	r3, [r1, #16]
 800cf86:	e619      	b.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cf88:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cf8c:	462e      	mov	r6, r5
 800cf8e:	f7ff bb6b 	b.w	800c668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->FmcClockSelection)
 800cf92:	2601      	movs	r6, #1
 800cf94:	4635      	mov	r5, r6
 800cf96:	f7ff bb64 	b.w	800c662 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cf9a:	2601      	movs	r6, #1
 800cf9c:	4635      	mov	r5, r6
 800cf9e:	f7ff bbcd 	b.w	800c73c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cfa2:	2601      	movs	r6, #1
 800cfa4:	4635      	mov	r5, r6
 800cfa6:	f7ff bbab 	b.w	800c700 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800cfaa:	bf00      	nop
 800cfac:	58024400 	.word	0x58024400
 800cfb0:	00ffffcf 	.word	0x00ffffcf

0800cfb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfb4:	4a50      	ldr	r2, [pc, #320]	; (800d0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 800cfb6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfb8:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cfba:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cfbc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 800cfbe:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cfc2:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cfc6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800cfc8:	d05d      	beq.n	800d086 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cfca:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cfce:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfd2:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cfd6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800cfda:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cfdc:	ee07 4a90 	vmov	s15, r4
 800cfe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800cfe4:	d003      	beq.n	800cfee <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800cfe6:	2902      	cmp	r1, #2
 800cfe8:	d078      	beq.n	800d0dc <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 800cfea:	2900      	cmp	r1, #0
 800cfec:	d050      	beq.n	800d090 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfee:	ee07 3a90 	vmov	s15, r3
 800cff2:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800d0fc <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800cff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cffa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800cffc:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800d000:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800d100 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800d004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d008:	ee07 3a90 	vmov	s15, r3
 800d00c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d014:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d018:	eee7 7a06 	vfma.f32	s15, s14, s12
 800d01c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d020:	4a35      	ldr	r2, [pc, #212]	; (800d0f8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 800d022:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d026:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800d028:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d02c:	ee07 3a90 	vmov	s15, r3
 800d030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800d034:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d036:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d03e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d042:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d046:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800d048:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d04c:	ee07 3a90 	vmov	s15, r3
 800d050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d054:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d05c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d060:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d064:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800d066:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d06a:	ee07 3a10 	vmov	s14, r3
 800d06e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d072:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d07a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d07e:	ee17 3a90 	vmov	r3, s15
 800d082:	6083      	str	r3, [r0, #8]
}
 800d084:	4770      	bx	lr
 800d086:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d088:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d08c:	6083      	str	r3, [r0, #8]
}
 800d08e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d090:	6811      	ldr	r1, [r2, #0]
 800d092:	0689      	lsls	r1, r1, #26
 800d094:	d529      	bpl.n	800d0ea <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d096:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d098:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d09c:	4919      	ldr	r1, [pc, #100]	; (800d104 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d09e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0a2:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0a4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0ac:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800d100 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800d0b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0b4:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0b6:	ee06 3a10 	vmov	s12, r3
 800d0ba:	ee05 1a90 	vmov	s11, r1
 800d0be:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800d0c2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800d0c6:	ee36 6a26 	vadd.f32	s12, s12, s13
 800d0ca:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800d0ce:	eef0 7a46 	vmov.f32	s15, s12
 800d0d2:	eee7 7a05 	vfma.f32	s15, s14, s10
 800d0d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d0da:	e7a1      	b.n	800d020 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0dc:	ee07 3a90 	vmov	s15, r3
 800d0e0:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800d108 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800d0e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0e8:	e787      	b.n	800cffa <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0ea:	ee07 3a90 	vmov	s15, r3
 800d0ee:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800d10c <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 800d0f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0f6:	e780      	b.n	800cffa <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800d0f8:	58024400 	.word	0x58024400
 800d0fc:	4a742400 	.word	0x4a742400
 800d100:	39000000 	.word	0x39000000
 800d104:	03d09000 	.word	0x03d09000
 800d108:	4bbebc20 	.word	0x4bbebc20
 800d10c:	4c742400 	.word	0x4c742400

0800d110 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d110:	4a50      	ldr	r2, [pc, #320]	; (800d254 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 800d112:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d114:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d116:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d118:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 800d11a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d11e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d122:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800d124:	d05d      	beq.n	800d1e2 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d126:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d12a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d12e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d132:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800d136:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d138:	ee07 4a90 	vmov	s15, r4
 800d13c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800d140:	d003      	beq.n	800d14a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800d142:	2902      	cmp	r1, #2
 800d144:	d078      	beq.n	800d238 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 800d146:	2900      	cmp	r1, #0
 800d148:	d050      	beq.n	800d1ec <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d14a:	ee07 3a90 	vmov	s15, r3
 800d14e:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800d258 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800d152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d156:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d158:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800d15c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800d25c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800d160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d164:	ee07 3a90 	vmov	s15, r3
 800d168:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d16c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d170:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d174:	eee7 7a06 	vfma.f32	s15, s14, s12
 800d178:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d17c:	4a35      	ldr	r2, [pc, #212]	; (800d254 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 800d17e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d182:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d184:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d188:	ee07 3a90 	vmov	s15, r3
 800d18c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800d190:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d192:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d19a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d19e:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d1a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d1a4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d1a8:	ee07 3a90 	vmov	s15, r3
 800d1ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1b0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d1b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1b8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d1bc:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d1c0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d1c2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d1c6:	ee07 3a10 	vmov	s14, r3
 800d1ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d1ce:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d1d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1da:	ee17 3a90 	vmov	r3, s15
 800d1de:	6083      	str	r3, [r0, #8]
}
 800d1e0:	4770      	bx	lr
 800d1e2:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d1e4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d1e8:	6083      	str	r3, [r0, #8]
}
 800d1ea:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1ec:	6811      	ldr	r1, [r2, #0]
 800d1ee:	0689      	lsls	r1, r1, #26
 800d1f0:	d529      	bpl.n	800d246 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1f2:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1f4:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1f8:	4919      	ldr	r1, [pc, #100]	; (800d260 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d200:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d208:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800d25c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800d20c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d210:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d212:	ee06 3a10 	vmov	s12, r3
 800d216:	ee05 1a90 	vmov	s11, r1
 800d21a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800d21e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800d222:	ee36 6a26 	vadd.f32	s12, s12, s13
 800d226:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800d22a:	eef0 7a46 	vmov.f32	s15, s12
 800d22e:	eee7 7a05 	vfma.f32	s15, s14, s10
 800d232:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d236:	e7a1      	b.n	800d17c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d238:	ee07 3a90 	vmov	s15, r3
 800d23c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800d264 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800d240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d244:	e787      	b.n	800d156 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d246:	ee07 3a90 	vmov	s15, r3
 800d24a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800d268 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 800d24e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d252:	e780      	b.n	800d156 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800d254:	58024400 	.word	0x58024400
 800d258:	4a742400 	.word	0x4a742400
 800d25c:	39000000 	.word	0x39000000
 800d260:	03d09000 	.word	0x03d09000
 800d264:	4bbebc20 	.word	0x4bbebc20
 800d268:	4c742400 	.word	0x4c742400

0800d26c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d26c:	4a51      	ldr	r2, [pc, #324]	; (800d3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 800d26e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d270:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d272:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d274:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 800d276:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d27a:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d27e:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 800d280:	d05e      	beq.n	800d340 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d282:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d286:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d28a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d28e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800d292:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d294:	ee07 4a90 	vmov	s15, r4
 800d298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800d29c:	f000 8082 	beq.w	800d3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 800d2a0:	2902      	cmp	r1, #2
 800d2a2:	d078      	beq.n	800d396 <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 800d2a4:	2900      	cmp	r1, #0
 800d2a6:	d050      	beq.n	800d34a <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2a8:	ee07 3a90 	vmov	s15, r3
 800d2ac:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800d3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800d2b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d2b6:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800d2ba:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800d3bc <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800d2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2c2:	ee07 3a90 	vmov	s15, r3
 800d2c6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d2ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2ce:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d2d2:	eee7 7a06 	vfma.f32	s15, s14, s12
 800d2d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d2da:	4a36      	ldr	r2, [pc, #216]	; (800d3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 800d2dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d2e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d2e2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d2e6:	ee07 3a90 	vmov	s15, r3
 800d2ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800d2ee:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d2f0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d2f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2f8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d2fc:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d300:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d302:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d306:	ee07 3a90 	vmov	s15, r3
 800d30a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d30e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d316:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d31a:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d31e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d320:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d324:	ee07 3a10 	vmov	s14, r3
 800d328:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d32c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d338:	ee17 3a90 	vmov	r3, s15
 800d33c:	6083      	str	r3, [r0, #8]
}
 800d33e:	4770      	bx	lr
 800d340:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d342:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d346:	6083      	str	r3, [r0, #8]
}
 800d348:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d34a:	6811      	ldr	r1, [r2, #0]
 800d34c:	0689      	lsls	r1, r1, #26
 800d34e:	d5ab      	bpl.n	800d2a8 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d350:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d352:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d356:	491a      	ldr	r1, [pc, #104]	; (800d3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d35c:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d35e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d366:	ed9f 5a15 	vldr	s10, [pc, #84]	; 800d3bc <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800d36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d36e:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d370:	ee06 3a10 	vmov	s12, r3
 800d374:	ee05 1a90 	vmov	s11, r1
 800d378:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800d37c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800d380:	ee36 6a26 	vadd.f32	s12, s12, s13
 800d384:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800d388:	eef0 7a46 	vmov.f32	s15, s12
 800d38c:	eee7 7a05 	vfma.f32	s15, s14, s10
 800d390:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d394:	e7a1      	b.n	800d2da <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d396:	ee07 3a90 	vmov	s15, r3
 800d39a:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 800d3c4 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 800d39e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3a2:	e787      	b.n	800d2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3a4:	ee07 3a90 	vmov	s15, r3
 800d3a8:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800d3c8 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 800d3ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3b0:	e780      	b.n	800d2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 800d3b2:	bf00      	nop
 800d3b4:	58024400 	.word	0x58024400
 800d3b8:	4c742400 	.word	0x4c742400
 800d3bc:	39000000 	.word	0x39000000
 800d3c0:	03d09000 	.word	0x03d09000
 800d3c4:	4bbebc20 	.word	0x4bbebc20
 800d3c8:	4a742400 	.word	0x4a742400

0800d3cc <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d3cc:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800d3d0:	430b      	orrs	r3, r1
{
 800d3d2:	b500      	push	{lr}
 800d3d4:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d3d6:	f000 8083 	beq.w	800d4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800d3da:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800d3de:	430b      	orrs	r3, r1
 800d3e0:	d038      	beq.n	800d454 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d3e2:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800d3e6:	430b      	orrs	r3, r1
 800d3e8:	f000 80e6 	beq.w	800d5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d3ec:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800d3f0:	430b      	orrs	r3, r1
 800d3f2:	f000 8089 	beq.w	800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d3f6:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800d3fa:	430b      	orrs	r3, r1
 800d3fc:	d060      	beq.n	800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d3fe:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800d402:	430b      	orrs	r3, r1
 800d404:	f000 8112 	beq.w	800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d408:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800d40c:	430b      	orrs	r3, r1
 800d40e:	f000 80a3 	beq.w	800d558 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d412:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800d416:	430b      	orrs	r3, r1
 800d418:	f000 80fa 	beq.w	800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d41c:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800d420:	430b      	orrs	r3, r1
 800d422:	f000 8143 	beq.w	800d6ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d426:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800d42a:	4308      	orrs	r0, r1
 800d42c:	d137      	bne.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d42e:	4a9a      	ldr	r2, [pc, #616]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d430:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800d436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d43a:	f000 8084 	beq.w	800d546 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800d43e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d442:	f000 8157 	beq.w	800d6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800d446:	bb53      	cbnz	r3, 800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d448:	6810      	ldr	r0, [r2, #0]
 800d44a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800d44e:	d044      	beq.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 800d450:	4892      	ldr	r0, [pc, #584]	; (800d69c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800d452:	e042      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800d454:	4a90      	ldr	r2, [pc, #576]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d456:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d458:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800d45c:	2b80      	cmp	r3, #128	; 0x80
 800d45e:	f000 80a6 	beq.w	800d5ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800d462:	d920      	bls.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800d464:	2bc0      	cmp	r3, #192	; 0xc0
 800d466:	d037      	beq.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800d468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d46c:	d117      	bne.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d46e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d470:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d472:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d476:	0749      	lsls	r1, r1, #29
 800d478:	d502      	bpl.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f000 80c2 	beq.w	800d604 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d480:	4a85      	ldr	r2, [pc, #532]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d482:	6812      	ldr	r2, [r2, #0]
 800d484:	05d0      	lsls	r0, r2, #23
 800d486:	d503      	bpl.n	800d490 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800d488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d48c:	f000 8102 	beq.w	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d490:	4a81      	ldr	r2, [pc, #516]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d492:	6812      	ldr	r2, [r2, #0]
 800d494:	0391      	lsls	r1, r2, #14
 800d496:	d502      	bpl.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800d498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d49c:	d0d8      	beq.n	800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800d49e:	2000      	movs	r0, #0
}
 800d4a0:	b005      	add	sp, #20
 800d4a2:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d04d      	beq.n	800d546 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800d4aa:	2b40      	cmp	r3, #64	; 0x40
 800d4ac:	d1f7      	bne.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4ae:	6810      	ldr	r0, [r2, #0]
 800d4b0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d4b4:	d011      	beq.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4b6:	a801      	add	r0, sp, #4
 800d4b8:	f7ff fd7c 	bl	800cfb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d4bc:	9801      	ldr	r0, [sp, #4]
 800d4be:	e00c      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d4c0:	4a75      	ldr	r2, [pc, #468]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d4c2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d4c4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800d4c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4cc:	d06f      	beq.n	800d5ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800d4ce:	d938      	bls.n	800d542 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800d4d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d4d4:	f040 8088 	bne.w	800d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d4d8:	4871      	ldr	r0, [pc, #452]	; (800d6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800d4da:	b005      	add	sp, #20
 800d4dc:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d4e0:	4b6d      	ldr	r3, [pc, #436]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4e4:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800d4e8:	2b04      	cmp	r3, #4
 800d4ea:	d8d8      	bhi.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800d4ec:	a201      	add	r2, pc, #4	; (adr r2, 800d4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800d4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f2:	bf00      	nop
 800d4f4:	0800d597 	.word	0x0800d597
 800d4f8:	0800d573 	.word	0x0800d573
 800d4fc:	0800d583 	.word	0x0800d583
 800d500:	0800d4d9 	.word	0x0800d4d9
 800d504:	0800d57f 	.word	0x0800d57f
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d508:	4a63      	ldr	r2, [pc, #396]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d50a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d50c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800d510:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d514:	d04b      	beq.n	800d5ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800d516:	d944      	bls.n	800d5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800d518:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d51c:	d0dc      	beq.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800d51e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d522:	d1bc      	bne.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d524:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d526:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d528:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d52c:	0752      	lsls	r2, r2, #29
 800d52e:	d5a7      	bpl.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800d530:	2b00      	cmp	r3, #0
 800d532:	d1a5      	bne.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d534:	4b58      	ldr	r3, [pc, #352]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d536:	485b      	ldr	r0, [pc, #364]	; (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d53e:	40d8      	lsrs	r0, r3
 800d540:	e7cb      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800d542:	2b00      	cmp	r3, #0
 800d544:	d154      	bne.n	800d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d546:	6810      	ldr	r0, [r2, #0]
 800d548:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800d54c:	d0c5      	beq.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d54e:	a801      	add	r0, sp, #4
 800d550:	f7ff fe8c 	bl	800d26c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d554:	9802      	ldr	r0, [sp, #8]
 800d556:	e7c0      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d558:	4a4f      	ldr	r2, [pc, #316]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d55a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d55c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800d560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d564:	f000 80d0 	beq.w	800d708 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800d568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d56c:	d0da      	beq.n	800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d195      	bne.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d572:	4b49      	ldr	r3, [pc, #292]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d574:	6818      	ldr	r0, [r3, #0]
 800d576:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d57a:	d0ae      	beq.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d57c:	e79b      	b.n	800d4b6 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d57e:	4a46      	ldr	r2, [pc, #280]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d580:	e775      	b.n	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d582:	4b45      	ldr	r3, [pc, #276]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d584:	6818      	ldr	r0, [r3, #0]
 800d586:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800d58a:	d0a6      	beq.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d58c:	a801      	add	r0, sp, #4
 800d58e:	f7ff fdbf 	bl	800d110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d592:	9801      	ldr	r0, [sp, #4]
 800d594:	e7a1      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d596:	4b40      	ldr	r3, [pc, #256]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800d59e:	d09c      	beq.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d5a0:	e7d5      	b.n	800d54e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d0cf      	beq.n	800d546 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800d5a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d5aa:	d080      	beq.n	800d4ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800d5ac:	e777      	b.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d5ae:	6810      	ldr	r0, [r2, #0]
 800d5b0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800d5b4:	d091      	beq.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d5b6:	e7e9      	b.n	800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d5b8:	4a37      	ldr	r2, [pc, #220]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d5ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d5bc:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800d5c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d5c4:	d0f3      	beq.n	800d5ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800d5c6:	d806      	bhi.n	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d0bc      	beq.n	800d546 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800d5cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d5d0:	f43f af6d 	beq.w	800d4ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800d5d4:	e763      	b.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800d5d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d5da:	f43f af7d 	beq.w	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800d5de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d5e2:	f43f af44 	beq.w	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800d5e6:	e75a      	b.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 800d5e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5ec:	d09a      	beq.n	800d524 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800d5ee:	e756      	b.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800d5f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5f4:	f43f af5b 	beq.w	800d4ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800d5f8:	e751      	b.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d5fa:	6810      	ldr	r0, [r2, #0]
 800d5fc:	f010 0004 	ands.w	r0, r0, #4
 800d600:	f43f af6b 	beq.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d604:	6813      	ldr	r3, [r2, #0]
 800d606:	4827      	ldr	r0, [pc, #156]	; (800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800d608:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d60c:	40d8      	lsrs	r0, r3
 800d60e:	e764      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d610:	4b21      	ldr	r3, [pc, #132]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800d614:	03d2      	lsls	r2, r2, #15
 800d616:	d5bf      	bpl.n	800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d618:	6818      	ldr	r0, [r3, #0]
 800d61a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d61e:	f43f af5c 	beq.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d622:	a801      	add	r0, sp, #4
 800d624:	f7ff fcc6 	bl	800cfb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d628:	9803      	ldr	r0, [sp, #12]
 800d62a:	e756      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d62c:	4a1a      	ldr	r2, [pc, #104]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d62e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d630:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800d634:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d638:	d0df      	beq.n	800d5fa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800d63a:	d810      	bhi.n	800d65e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800d63c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d640:	d058      	beq.n	800d6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800d642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d646:	d118      	bne.n	800d67a <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d648:	4b13      	ldr	r3, [pc, #76]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d64a:	6818      	ldr	r0, [r3, #0]
 800d64c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800d650:	f43f af43 	beq.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d654:	a801      	add	r0, sp, #4
 800d656:	f7ff fd5b 	bl	800d110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d65a:	9802      	ldr	r0, [sp, #8]
 800d65c:	e73d      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800d65e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d662:	d012      	beq.n	800d68a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800d664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d668:	f47f af19 	bne.w	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d66c:	4b0a      	ldr	r3, [pc, #40]	; (800d698 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d66e:	6818      	ldr	r0, [r3, #0]
 800d670:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800d674:	f43f af31 	beq.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d678:	e6ea      	b.n	800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f47f af0f 	bne.w	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 800d680:	b005      	add	sp, #20
 800d682:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800d686:	f7fe bd39 	b.w	800c0fc <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d68a:	6810      	ldr	r0, [r2, #0]
 800d68c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800d690:	f43f af23 	beq.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 800d694:	4804      	ldr	r0, [pc, #16]	; (800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800d696:	e720      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d698:	58024400 	.word	0x58024400
 800d69c:	017d7840 	.word	0x017d7840
 800d6a0:	00bb8000 	.word	0x00bb8000
 800d6a4:	03d09000 	.word	0x03d09000
 800d6a8:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d6ac:	4b28      	ldr	r3, [pc, #160]	; (800d750 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6b0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800d6b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6b8:	d037      	beq.n	800d72a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800d6ba:	d814      	bhi.n	800d6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800d6bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6c0:	d03f      	beq.n	800d742 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800d6c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6c6:	d0bf      	beq.n	800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f47f aee8 	bne.w	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d6ce:	f7fe fcd5 	bl	800c07c <HAL_RCC_GetHCLKFreq>
 800d6d2:	4b1f      	ldr	r3, [pc, #124]	; (800d750 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d6d4:	4a1f      	ldr	r2, [pc, #124]	; (800d754 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800d6d6:	6a1b      	ldr	r3, [r3, #32]
 800d6d8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d6dc:	5cd3      	ldrb	r3, [r2, r3]
 800d6de:	f003 031f 	and.w	r3, r3, #31
 800d6e2:	40d8      	lsrs	r0, r3
        break;
 800d6e4:	e6f9      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800d6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6ea:	d017      	beq.n	800d71c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800d6ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6f0:	d0bc      	beq.n	800d66c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800d6f2:	e6d4      	b.n	800d49e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d6f4:	6810      	ldr	r0, [r2, #0]
 800d6f6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d6fa:	f43f aeee 	beq.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6fe:	a801      	add	r0, sp, #4
 800d700:	f7ff fc58 	bl	800cfb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d704:	9802      	ldr	r0, [sp, #8]
 800d706:	e6e8      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d708:	6810      	ldr	r0, [r2, #0]
 800d70a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800d70e:	f43f aee4 	beq.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d712:	a801      	add	r0, sp, #4
 800d714:	f7ff fcfc 	bl	800d110 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d718:	9803      	ldr	r0, [sp, #12]
 800d71a:	e6de      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d71c:	4b0c      	ldr	r3, [pc, #48]	; (800d750 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d71e:	6818      	ldr	r0, [r3, #0]
 800d720:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800d724:	f43f aed9 	beq.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d728:	e7b4      	b.n	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d72a:	4b09      	ldr	r3, [pc, #36]	; (800d750 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d72c:	6818      	ldr	r0, [r3, #0]
 800d72e:	f010 0004 	ands.w	r0, r0, #4
 800d732:	f43f aed2 	beq.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4807      	ldr	r0, [pc, #28]	; (800d758 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800d73a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d73e:	40d8      	lsrs	r0, r3
 800d740:	e6cb      	b.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d742:	4b03      	ldr	r3, [pc, #12]	; (800d750 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d744:	6818      	ldr	r0, [r3, #0]
 800d746:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d74a:	f43f aec6 	beq.w	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d74e:	e7d6      	b.n	800d6fe <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800d750:	58024400 	.word	0x58024400
 800d754:	0801f474 	.word	0x0801f474
 800d758:	03d09000 	.word	0x03d09000

0800d75c <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d03c      	beq.n	800d7da <HAL_RNG_Init+0x7e>
{
 800d760:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d762:	7a43      	ldrb	r3, [r0, #9]
 800d764:	4604      	mov	r4, r0
 800d766:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d031      	beq.n	800d7d2 <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800d76e:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800d770:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800d772:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800d774:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800d776:	6813      	ldr	r3, [r2, #0]
 800d778:	f023 0320 	bic.w	r3, r3, #32
 800d77c:	430b      	orrs	r3, r1
 800d77e:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d780:	6822      	ldr	r2, [r4, #0]
 800d782:	6813      	ldr	r3, [r2, #0]
 800d784:	f043 0304 	orr.w	r3, r3, #4
 800d788:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d78a:	6823      	ldr	r3, [r4, #0]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	0658      	lsls	r0, r3, #25
 800d790:	d503      	bpl.n	800d79a <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d792:	2304      	movs	r3, #4
    return HAL_ERROR;
 800d794:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800d796:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800d798:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800d79a:	f7fb faa9 	bl	8008cf0 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d79e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800d7a0:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	0759      	lsls	r1, r3, #29
 800d7a6:	d50e      	bpl.n	800d7c6 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d7a8:	f7fb faa2 	bl	8008cf0 <HAL_GetTick>
 800d7ac:	1b43      	subs	r3, r0, r5
 800d7ae:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d7b0:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d7b2:	d9f6      	bls.n	800d7a2 <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d7b4:	685a      	ldr	r2, [r3, #4]
 800d7b6:	0752      	lsls	r2, r2, #29
 800d7b8:	d5f3      	bpl.n	800d7a2 <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
 800d7ba:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d7bc:	2302      	movs	r3, #2
        return HAL_ERROR;
 800d7be:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 800d7c0:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d7c2:	60e3      	str	r3, [r4, #12]
}
 800d7c4:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d7c6:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 800d7c8:	2201      	movs	r2, #1
  return HAL_OK;
 800d7ca:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800d7cc:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d7ce:	60e3      	str	r3, [r4, #12]
}
 800d7d0:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800d7d2:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800d7d4:	f7fa fd9c 	bl	8008310 <HAL_RNG_MspInit>
 800d7d8:	e7c9      	b.n	800d76e <HAL_RNG_Init+0x12>
    return HAL_ERROR;
 800d7da:	2001      	movs	r0, #1
}
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop

0800d7e0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d7e2:	7a03      	ldrb	r3, [r0, #8]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d027      	beq.n	800d838 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d7e8:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 800d7f2:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800d7f4:	d006      	beq.n	800d804 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d7f6:	2304      	movs	r3, #4
    status = HAL_ERROR;
 800d7f8:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d7fa:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	7223      	strb	r3, [r4, #8]

  return status;
}
 800d800:	4630      	mov	r0, r6
 800d802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800d804:	2302      	movs	r3, #2
 800d806:	460d      	mov	r5, r1
 800d808:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 800d80a:	f7fb fa71 	bl	8008cf0 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d80e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800d810:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d812:	685a      	ldr	r2, [r3, #4]
 800d814:	07d2      	lsls	r2, r2, #31
 800d816:	d412      	bmi.n	800d83e <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d818:	f7fb fa6a 	bl	8008cf0 <HAL_GetTick>
 800d81c:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d81e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d820:	2802      	cmp	r0, #2
 800d822:	d9f6      	bls.n	800d812 <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d824:	685a      	ldr	r2, [r3, #4]
 800d826:	f012 0201 	ands.w	r2, r2, #1
 800d82a:	d1f2      	bne.n	800d812 <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 800d82c:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d82e:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 800d830:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 800d832:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d834:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 800d836:	e7e3      	b.n	800d800 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 800d838:	2602      	movs	r6, #2
}
 800d83a:	4630      	mov	r0, r6
 800d83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 800d83e:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 800d840:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 800d842:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800d844:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800d846:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800d848:	7262      	strb	r2, [r4, #9]
 800d84a:	e7d7      	b.n	800d7fc <HAL_RNG_GenerateRandomNumber+0x1c>

0800d84c <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800d84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d84e:	4ba3      	ldr	r3, [pc, #652]	; (800dadc <HAL_SAI_Init.part.0+0x290>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800d850:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d852:	6802      	ldr	r2, [r0, #0]
 800d854:	429a      	cmp	r2, r3
 800d856:	d01c      	beq.n	800d892 <HAL_SAI_Init.part.0+0x46>
 800d858:	3320      	adds	r3, #32
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d019      	beq.n	800d892 <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d85e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d862:	429a      	cmp	r2, r3
 800d864:	d04d      	beq.n	800d902 <HAL_SAI_Init.part.0+0xb6>
 800d866:	3320      	adds	r3, #32
 800d868:	429a      	cmp	r2, r3
 800d86a:	d04a      	beq.n	800d902 <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800d86c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800d870:	429a      	cmp	r2, r3
 800d872:	f000 812f 	beq.w	800dad4 <HAL_SAI_Init.part.0+0x288>
 800d876:	3320      	adds	r3, #32
 800d878:	429a      	cmp	r2, r3
 800d87a:	f000 812b 	beq.w	800dad4 <HAL_SAI_Init.part.0+0x288>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800d87e:	4b98      	ldr	r3, [pc, #608]	; (800dae0 <HAL_SAI_Init.part.0+0x294>)
 800d880:	429a      	cmp	r2, r3
 800d882:	f000 8129 	beq.w	800dad8 <HAL_SAI_Init.part.0+0x28c>
 800d886:	3320      	adds	r3, #32
 800d888:	429a      	cmp	r2, r3
 800d88a:	f000 8125 	beq.w	800dad8 <HAL_SAI_Init.part.0+0x28c>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800d88e:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 800d890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 800d892:	4c94      	ldr	r4, [pc, #592]	; (800dae4 <HAL_SAI_Init.part.0+0x298>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800d894:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 800d898:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d037      	beq.n	800d910 <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d8a0:	4b91      	ldr	r3, [pc, #580]	; (800dae8 <HAL_SAI_Init.part.0+0x29c>)
 800d8a2:	4992      	ldr	r1, [pc, #584]	; (800daec <HAL_SAI_Init.part.0+0x2a0>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d8aa:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d8ac:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800d8ae:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d8b2:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800d8b4:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d031      	beq.n	800d91e <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d8ba:	682a      	ldr	r2, [r5, #0]
    count--;
 800d8bc:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d8be:	6812      	ldr	r2, [r2, #0]
 800d8c0:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 800d8c4:	d1f7      	bne.n	800d8b6 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 800d8c6:	68eb      	ldr	r3, [r5, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 800d8c8:	2102      	movs	r1, #2
  switch (hsai->Init.SynchroExt)
 800d8ca:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 800d8cc:	f885 1091 	strb.w	r1, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800d8d0:	f000 8150 	beq.w	800db74 <HAL_SAI_Init.part.0+0x328>
 800d8d4:	428b      	cmp	r3, r1
 800d8d6:	bf19      	ittee	ne
 800d8d8:	460e      	movne	r6, r1
 800d8da:	2003      	movne	r0, #3
 800d8dc:	2023      	moveq	r0, #35	; 0x23
 800d8de:	2622      	moveq	r6, #34	; 0x22
 800d8e0:	bf15      	itete	ne
 800d8e2:	2701      	movne	r7, #1
 800d8e4:	2721      	moveq	r7, #33	; 0x21
 800d8e6:	2100      	movne	r1, #0
 800d8e8:	2120      	moveq	r1, #32
  switch (hsai->Init.Synchro)
 800d8ea:	68ab      	ldr	r3, [r5, #8]
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	2b04      	cmp	r3, #4
 800d8f0:	f200 8180 	bhi.w	800dbf4 <HAL_SAI_Init.part.0+0x3a8>
 800d8f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d8f8:	001c00e3 	.word	0x001c00e3
 800d8fc:	001b00ea 	.word	0x001b00ea
 800d900:	00e6      	.short	0x00e6
  if (hsai->State == HAL_SAI_STATE_RESET)
 800d902:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
 800d906:	4c7a      	ldr	r4, [pc, #488]	; (800daf0 <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800d908:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1c7      	bne.n	800d8a0 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 800d910:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
 800d912:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800d916:	f7fa fd63 	bl	80083e0 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 800d91a:	682a      	ldr	r2, [r5, #0]
 800d91c:	e7c0      	b.n	800d8a0 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d91e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
 800d922:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d928:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
 800d92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800d92e:	4631      	mov	r1, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d930:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 800d934:	6021      	str	r1, [r4, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d936:	6a2b      	ldr	r3, [r5, #32]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d046      	beq.n	800d9ca <HAL_SAI_Init.part.0+0x17e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d93c:	682b      	ldr	r3, [r5, #0]
 800d93e:	4967      	ldr	r1, [pc, #412]	; (800dadc <HAL_SAI_Init.part.0+0x290>)
 800d940:	428b      	cmp	r3, r1
 800d942:	f000 812b 	beq.w	800db9c <HAL_SAI_Init.part.0+0x350>
 800d946:	3120      	adds	r1, #32
 800d948:	428b      	cmp	r3, r1
 800d94a:	f000 8127 	beq.w	800db9c <HAL_SAI_Init.part.0+0x350>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d94e:	4969      	ldr	r1, [pc, #420]	; (800daf4 <HAL_SAI_Init.part.0+0x2a8>)
 800d950:	428b      	cmp	r3, r1
 800d952:	f000 8133 	beq.w	800dbbc <HAL_SAI_Init.part.0+0x370>
 800d956:	3120      	adds	r1, #32
 800d958:	428b      	cmp	r3, r1
 800d95a:	f000 812f 	beq.w	800dbbc <HAL_SAI_Init.part.0+0x370>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800d95e:	4966      	ldr	r1, [pc, #408]	; (800daf8 <HAL_SAI_Init.part.0+0x2ac>)
 800d960:	428b      	cmp	r3, r1
 800d962:	f000 8123 	beq.w	800dbac <HAL_SAI_Init.part.0+0x360>
 800d966:	3120      	adds	r1, #32
 800d968:	428b      	cmp	r3, r1
 800d96a:	f000 811f 	beq.w	800dbac <HAL_SAI_Init.part.0+0x360>
    if (hsai->Instance == SAI4_Block_A)
 800d96e:	495c      	ldr	r1, [pc, #368]	; (800dae0 <HAL_SAI_Init.part.0+0x294>)
 800d970:	428b      	cmp	r3, r1
 800d972:	f000 8135 	beq.w	800dbe0 <HAL_SAI_Init.part.0+0x394>
    if (hsai->Instance == SAI4_Block_B)
 800d976:	4961      	ldr	r1, [pc, #388]	; (800dafc <HAL_SAI_Init.part.0+0x2b0>)
 800d978:	428b      	cmp	r3, r1
 800d97a:	f000 812a 	beq.w	800dbd2 <HAL_SAI_Init.part.0+0x386>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800d97e:	69ab      	ldr	r3, [r5, #24]
 800d980:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d984:	f000 80fb 	beq.w	800db7e <HAL_SAI_Init.part.0+0x332>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d988:	6aab      	ldr	r3, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d98a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800d98e:	6a29      	ldr	r1, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d994:	ea4f 0342 	mov.w	r3, r2, lsl #1
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d998:	bf0c      	ite	eq
 800d99a:	2202      	moveq	r2, #2
 800d99c:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d99e:	fb01 f202 	mul.w	r2, r1, r2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d9a2:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d9a4:	0212      	lsls	r2, r2, #8
 800d9a6:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 800d9aa:	4a55      	ldr	r2, [pc, #340]	; (800db00 <HAL_SAI_Init.part.0+0x2b4>)
 800d9ac:	fba2 0203 	umull	r0, r2, r2, r3
 800d9b0:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 800d9b2:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800d9b6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800d9ba:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800d9bc:	bf08      	it	eq
 800d9be:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d9c0:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 800d9c2:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d9c4:	d101      	bne.n	800d9ca <HAL_SAI_Init.part.0+0x17e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d9c6:	0852      	lsrs	r2, r2, #1
 800d9c8:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d9ca:	686b      	ldr	r3, [r5, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d9cc:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d9ce:	f033 0302 	bics.w	r3, r3, #2
 800d9d2:	f040 80c8 	bne.w	800db66 <HAL_SAI_Init.part.0+0x31a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d9d6:	3f01      	subs	r7, #1
 800d9d8:	bf18      	it	ne
 800d9da:	2701      	movne	r7, #1
 800d9dc:	027f      	lsls	r7, r7, #9
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800d9de:	f7fb f99f 	bl	8008d20 <HAL_GetREVID>
 800d9e2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d9e6:	682a      	ldr	r2, [r5, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800d9e8:	f0c0 80a9 	bcc.w	800db3e <HAL_SAI_Init.part.0+0x2f2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d9ec:	6811      	ldr	r1, [r2, #0]
 800d9ee:	4b45      	ldr	r3, [pc, #276]	; (800db04 <HAL_SAI_Init.part.0+0x2b8>)
 800d9f0:	400b      	ands	r3, r1
 800d9f2:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d9f4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800d9f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9fa:	430b      	orrs	r3, r1
 800d9fc:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800d9fe:	430b      	orrs	r3, r1
 800da00:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800da02:	430b      	orrs	r3, r1
 800da04:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800da06:	430b      	orrs	r3, r1
 800da08:	6969      	ldr	r1, [r5, #20]
 800da0a:	430b      	orrs	r3, r1
 800da0c:	69a9      	ldr	r1, [r5, #24]
 800da0e:	430b      	orrs	r3, r1
 800da10:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800da12:	430b      	orrs	r3, r1
 800da14:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800da16:	430b      	orrs	r3, r1
 800da18:	6811      	ldr	r1, [r2, #0]
 800da1a:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800da1c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800da1e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800da22:	4333      	orrs	r3, r6
 800da24:	433b      	orrs	r3, r7
 800da26:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800da28:	682a      	ldr	r2, [r5, #0]
 800da2a:	4b37      	ldr	r3, [pc, #220]	; (800db08 <HAL_SAI_Init.part.0+0x2bc>)
 800da2c:	6851      	ldr	r1, [r2, #4]
 800da2e:	400b      	ands	r3, r1
 800da30:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800da32:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800da34:	69eb      	ldr	r3, [r5, #28]
 800da36:	682a      	ldr	r2, [r5, #0]
 800da38:	430b      	orrs	r3, r1
 800da3a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800da3c:	430b      	orrs	r3, r1
 800da3e:	6851      	ldr	r1, [r2, #4]
 800da40:	430b      	orrs	r3, r1
 800da42:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800da44:	682a      	ldr	r2, [r5, #0]
 800da46:	4b31      	ldr	r3, [pc, #196]	; (800db0c <HAL_SAI_Init.part.0+0x2c0>)
 800da48:	6891      	ldr	r1, [r2, #8]
 800da4a:	400b      	ands	r3, r1
 800da4c:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800da4e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800da50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da52:	6829      	ldr	r1, [r5, #0]
 800da54:	4313      	orrs	r3, r2
 800da56:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800da58:	6888      	ldr	r0, [r1, #8]
 800da5a:	4313      	orrs	r3, r2
 800da5c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800da5e:	4303      	orrs	r3, r0
 800da60:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800da62:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800da66:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800da68:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800da6a:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800da6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800da70:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800da72:	682a      	ldr	r2, [r5, #0]
 800da74:	68d3      	ldr	r3, [r2, #12]
 800da76:	4003      	ands	r3, r0
 800da78:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800da7a:	6829      	ldr	r1, [r5, #0]
 800da7c:	e9d5 301a 	ldrd	r3, r0, [r5, #104]	; 0x68
 800da80:	68ca      	ldr	r2, [r1, #12]
 800da82:	4303      	orrs	r3, r0
 800da84:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800da86:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800da88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800da8c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800da8e:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800da90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800da94:	4a11      	ldr	r2, [pc, #68]	; (800dadc <HAL_SAI_Init.part.0+0x290>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800da96:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800da98:	682b      	ldr	r3, [r5, #0]
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d03c      	beq.n	800db18 <HAL_SAI_Init.part.0+0x2cc>
 800da9e:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800daa2:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d036      	beq.n	800db18 <HAL_SAI_Init.part.0+0x2cc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800daaa:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 800daac:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800daae:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
 800dab2:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 800dab4:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800dab8:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
 800dabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 800dabe:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800dac2:	e737      	b.n	800d934 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800dac4:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dac6:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 800daca:	e733      	b.n	800d934 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800dacc:	4639      	mov	r1, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dace:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 800dad2:	e72f      	b.n	800d934 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 800dad4:	4c0e      	ldr	r4, [pc, #56]	; (800db10 <HAL_SAI_Init.part.0+0x2c4>)
 800dad6:	e6dd      	b.n	800d894 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 800dad8:	4c0e      	ldr	r4, [pc, #56]	; (800db14 <HAL_SAI_Init.part.0+0x2c8>)
 800dada:	e6db      	b.n	800d894 <HAL_SAI_Init.part.0+0x48>
 800dadc:	40015804 	.word	0x40015804
 800dae0:	58005404 	.word	0x58005404
 800dae4:	40015800 	.word	0x40015800
 800dae8:	200006e8 	.word	0x200006e8
 800daec:	95cbec1b 	.word	0x95cbec1b
 800daf0:	40015c00 	.word	0x40015c00
 800daf4:	40015c04 	.word	0x40015c04
 800daf8:	40016004 	.word	0x40016004
 800dafc:	58005424 	.word	0x58005424
 800db00:	cccccccd 	.word	0xcccccccd
 800db04:	f005c010 	.word	0xf005c010
 800db08:	ffff1ff0 	.word	0xffff1ff0
 800db0c:	fff88000 	.word	0xfff88000
 800db10:	40016000 	.word	0x40016000
 800db14:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800db18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db1a:	f023 0301 	bic.w	r3, r3, #1
 800db1e:	6463      	str	r3, [r4, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800db20:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 800db24:	2b01      	cmp	r3, #1
 800db26:	d1c0      	bne.n	800daaa <HAL_SAI_Init.part.0+0x25e>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800db28:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800db2c:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800db2e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800db32:	6463      	str	r3, [r4, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800db34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db36:	f043 0301 	orr.w	r3, r3, #1
 800db3a:	6463      	str	r3, [r4, #68]	; 0x44
 800db3c:	e7b5      	b.n	800daaa <HAL_SAI_Init.part.0+0x25e>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800db3e:	6811      	ldr	r1, [r2, #0]
 800db40:	4b2d      	ldr	r3, [pc, #180]	; (800dbf8 <HAL_SAI_Init.part.0+0x3ac>)
 800db42:	400b      	ands	r3, r1
 800db44:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800db46:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800db48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800db4c:	430b      	orrs	r3, r1
 800db4e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800db50:	430b      	orrs	r3, r1
 800db52:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800db54:	430b      	orrs	r3, r1
 800db56:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800db58:	430b      	orrs	r3, r1
 800db5a:	6969      	ldr	r1, [r5, #20]
 800db5c:	430b      	orrs	r3, r1
 800db5e:	69a9      	ldr	r1, [r5, #24]
 800db60:	430b      	orrs	r3, r1
 800db62:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800db64:	e757      	b.n	800da16 <HAL_SAI_Init.part.0+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800db66:	f1a7 0701 	sub.w	r7, r7, #1
 800db6a:	fab7 f787 	clz	r7, r7
 800db6e:	097f      	lsrs	r7, r7, #5
 800db70:	027f      	lsls	r7, r7, #9
 800db72:	e734      	b.n	800d9de <HAL_SAI_Init.part.0+0x192>
  switch (hsai->Init.SynchroExt)
 800db74:	2013      	movs	r0, #19
 800db76:	2612      	movs	r6, #18
 800db78:	2711      	movs	r7, #17
 800db7a:	2110      	movs	r1, #16
 800db7c:	e6b5      	b.n	800d8ea <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800db7e:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800db80:	2904      	cmp	r1, #4
 800db82:	d035      	beq.n	800dbf0 <HAL_SAI_Init.part.0+0x3a4>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800db84:	2908      	cmp	r1, #8
 800db86:	d021      	beq.n	800dbcc <HAL_SAI_Init.part.0+0x380>
        tmpframelength = hsai->FrameInit.FrameLength;
 800db88:	6d68      	ldr	r0, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800db8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800db8e:	0053      	lsls	r3, r2, #1
 800db90:	6a2a      	ldr	r2, [r5, #32]
 800db92:	fb00 f202 	mul.w	r2, r0, r2
 800db96:	fbb3 f3f2 	udiv	r3, r3, r2
 800db9a:	e706      	b.n	800d9aa <HAL_SAI_Init.part.0+0x15e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800db9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dba0:	2100      	movs	r1, #0
 800dba2:	f7ff fc13 	bl	800d3cc <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800dba6:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800dba8:	4602      	mov	r2, r0
 800dbaa:	e6d0      	b.n	800d94e <HAL_SAI_Init.part.0+0x102>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800dbac:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	f7ff fc0b 	bl	800d3cc <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 800dbb6:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800dbb8:	4602      	mov	r2, r0
 800dbba:	e6d8      	b.n	800d96e <HAL_SAI_Init.part.0+0x122>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800dbbc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	f7ff fc03 	bl	800d3cc <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800dbc6:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800dbc8:	4602      	mov	r2, r0
 800dbca:	e6c8      	b.n	800d95e <HAL_SAI_Init.part.0+0x112>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800dbcc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800dbd0:	e7db      	b.n	800db8a <HAL_SAI_Init.part.0+0x33e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800dbd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	f7ff fbf8 	bl	800d3cc <HAL_RCCEx_GetPeriphCLKFreq>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	e6ce      	b.n	800d97e <HAL_SAI_Init.part.0+0x132>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800dbe0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	f7ff fbf1 	bl	800d3cc <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 800dbea:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800dbec:	4602      	mov	r2, r0
 800dbee:	e6c2      	b.n	800d976 <HAL_SAI_Init.part.0+0x12a>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800dbf0:	2040      	movs	r0, #64	; 0x40
 800dbf2:	e7ca      	b.n	800db8a <HAL_SAI_Init.part.0+0x33e>
      syncen_bits = 0;
 800dbf4:	2600      	movs	r6, #0
 800dbf6:	e69d      	b.n	800d934 <HAL_SAI_Init.part.0+0xe8>
 800dbf8:	f805c010 	.word	0xf805c010

0800dbfc <HAL_SAI_InitProtocol>:
  switch (protocol)
 800dbfc:	2902      	cmp	r1, #2
{
 800dbfe:	b538      	push	{r3, r4, r5, lr}
 800dc00:	4604      	mov	r4, r0
  switch (protocol)
 800dc02:	d935      	bls.n	800dc70 <HAL_SAI_InitProtocol+0x74>
 800dc04:	1ec8      	subs	r0, r1, #3
 800dc06:	2801      	cmp	r0, #1
 800dc08:	d830      	bhi.n	800dc6c <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800dc0a:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800dc0c:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800dc0e:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800dc10:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800dc12:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 800dc14:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800dc16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dc1a:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dc1c:	6860      	ldr	r0, [r4, #4]
 800dc1e:	f030 0002 	bics.w	r0, r0, #2
 800dc22:	bf0c      	ite	eq
 800dc24:	2501      	moveq	r5, #1
 800dc26:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 800dc28:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800dc2a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800dc2e:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 800dc30:	bf0c      	ite	eq
 800dc32:	2001      	moveq	r0, #1
 800dc34:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800dc36:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800dc38:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800dc3c:	65a0      	str	r0, [r4, #88]	; 0x58
 800dc3e:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 800dc40:	2a03      	cmp	r2, #3
 800dc42:	d813      	bhi.n	800dc6c <HAL_SAI_InitProtocol+0x70>
 800dc44:	e8df f002 	tbb	[pc, r2]
 800dc48:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800dc4c:	6823      	ldr	r3, [r4, #0]
 800dc4e:	4a47      	ldr	r2, [pc, #284]	; (800dd6c <HAL_SAI_InitProtocol+0x170>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d005      	beq.n	800dc60 <HAL_SAI_InitProtocol+0x64>
 800dc54:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800dc58:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d105      	bne.n	800dc6c <HAL_SAI_InitProtocol+0x70>
 800dc60:	6863      	ldr	r3, [r4, #4]
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d102      	bne.n	800dc6c <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dc66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d037      	beq.n	800dcdc <HAL_SAI_InitProtocol+0xe0>
}
 800dc6c:	2001      	movs	r0, #1
 800dc6e:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800dc70:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800dc72:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800dc74:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800dc76:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 800dc78:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dc7a:	6860      	ldr	r0, [r4, #4]
 800dc7c:	f030 0002 	bics.w	r0, r0, #2
 800dc80:	bf14      	ite	ne
 800dc82:	2001      	movne	r0, #1
 800dc84:	2000      	moveq	r0, #0
 800dc86:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800dc88:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dc8c:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800dc8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dc92:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 800dc94:	f013 0001 	ands.w	r0, r3, #1
 800dc98:	d1e8      	bne.n	800dc6c <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 800dc9a:	b949      	cbnz	r1, 800dcb0 <HAL_SAI_InitProtocol+0xb4>
 800dc9c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800dca0:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 800dca4:	2a03      	cmp	r2, #3
 800dca6:	d8e1      	bhi.n	800dc6c <HAL_SAI_InitProtocol+0x70>
 800dca8:	e8df f002 	tbb	[pc, r2]
 800dcac:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800dcb0:	6660      	str	r0, [r4, #100]	; 0x64
 800dcb2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800dcb6:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 800dcb8:	2a03      	cmp	r2, #3
 800dcba:	d8d7      	bhi.n	800dc6c <HAL_SAI_InitProtocol+0x70>
 800dcbc:	e8df f002 	tbb	[pc, r2]
 800dcc0:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dcc4:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800dcc6:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800dcc8:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dcca:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800dccc:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800dcce:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800dcd0:	f7fb f826 	bl	8008d20 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800dcd4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d0b7      	beq.n	800dc4c <HAL_SAI_InitProtocol+0x50>
 800dcdc:	4620      	mov	r0, r4
}
 800dcde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dce2:	f7ff bdb3 	b.w	800d84c <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dce6:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800dce8:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dcea:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800dcec:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dcee:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800dcf0:	e7ee      	b.n	800dcd0 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800dcf2:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800dcf4:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dcf6:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800dcf8:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800dcfa:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dcfc:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800dcfe:	e7e7      	b.n	800dcd0 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800dd00:	21e0      	movs	r1, #224	; 0xe0
 800dd02:	e7f7      	b.n	800dcf4 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dd04:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800dd06:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dd08:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dd0a:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800dd0c:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800dd0e:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dd10:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800dd12:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800dd16:	e7db      	b.n	800dcd0 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dd18:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800dd1a:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dd1c:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800dd1e:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dd20:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800dd24:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800dd26:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dd2a:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dd2c:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800dd2e:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800dd30:	d1ce      	bne.n	800dcd0 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 800dd32:	2308      	movs	r3, #8
 800dd34:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800dd36:	e7cb      	b.n	800dcd0 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dd38:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dd3a:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800dd3c:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dd3e:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dd42:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800dd44:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dd48:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800dd4a:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800dd4e:	d1bf      	bne.n	800dcd0 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 800dd50:	2310      	movs	r3, #16
 800dd52:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800dd54:	e7bc      	b.n	800dcd0 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800dd56:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dd58:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800dd5a:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800dd5c:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dd5e:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800dd60:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800dd62:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800dd64:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800dd68:	e7b2      	b.n	800dcd0 <HAL_SAI_InitProtocol+0xd4>
 800dd6a:	bf00      	nop
 800dd6c:	40015804 	.word	0x40015804

0800dd70 <HAL_SAI_Transmit_DMA>:
{
 800dd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd74:	4615      	mov	r5, r2
 800dd76:	f04f 0800 	mov.w	r8, #0
 800dd7a:	460f      	mov	r7, r1
 800dd7c:	4604      	mov	r4, r0
 800dd7e:	f365 080f 	bfi	r8, r5, #0, #16
  uint32_t tickstart = HAL_GetTick();
 800dd82:	f7fa ffb5 	bl	8008cf0 <HAL_GetTick>
 800dd86:	f365 481f 	bfi	r8, r5, #16, #16
  if ((pData == NULL) || (Size == 0U))
 800dd8a:	2f00      	cmp	r7, #0
 800dd8c:	d066      	beq.n	800de5c <HAL_SAI_Transmit_DMA+0xec>
 800dd8e:	fab5 f985 	clz	r9, r5
 800dd92:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800dd96:	2d00      	cmp	r5, #0
 800dd98:	d060      	beq.n	800de5c <HAL_SAI_Transmit_DMA+0xec>
  if (hsai->State == HAL_SAI_STATE_READY)
 800dd9a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	fa5f fa83 	uxtb.w	sl, r3
 800dda4:	d155      	bne.n	800de52 <HAL_SAI_Transmit_DMA+0xe2>
    __HAL_LOCK(hsai);
 800dda6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d051      	beq.n	800de52 <HAL_SAI_Transmit_DMA+0xe2>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ddae:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ddb0:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ddb4:	4a39      	ldr	r2, [pc, #228]	; (800de9c <HAL_SAI_Transmit_DMA+0x12c>)
 800ddb6:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ddb8:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ddbc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    __HAL_LOCK(hsai);
 800ddc0:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 800ddc4:	e9c4 781e 	strd	r7, r8, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ddc8:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ddca:	4a35      	ldr	r2, [pc, #212]	; (800dea0 <HAL_SAI_Transmit_DMA+0x130>)
 800ddcc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ddd0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ddd2:	4a34      	ldr	r2, [pc, #208]	; (800dea4 <HAL_SAI_Transmit_DMA+0x134>)
 800ddd4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ddd8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800ddda:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ddde:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800dde2:	6822      	ldr	r2, [r4, #0]
 800dde4:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800dde8:	321c      	adds	r2, #28
 800ddea:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ddec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800ddf0:	f7fb fba4 	bl	800953c <HAL_DMA_Start_IT>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d13f      	bne.n	800de78 <HAL_SAI_Transmit_DMA+0x108>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ddf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ddfa:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ddfc:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ddfe:	d032      	beq.n	800de66 <HAL_SAI_Transmit_DMA+0xf6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800de00:	2205      	movs	r2, #5
 800de02:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800de04:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800de06:	2b01      	cmp	r3, #1
 800de08:	bf98      	it	ls
 800de0a:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800de0c:	6821      	ldr	r1, [r4, #0]
 800de0e:	690b      	ldr	r3, [r1, #16]
 800de10:	4313      	orrs	r3, r2
 800de12:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800de14:	6822      	ldr	r2, [r4, #0]
 800de16:	6813      	ldr	r3, [r2, #0]
 800de18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de1c:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800de1e:	e005      	b.n	800de2c <HAL_SAI_Transmit_DMA+0xbc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800de20:	f7fa ff66 	bl	8008cf0 <HAL_GetTick>
 800de24:	1b83      	subs	r3, r0, r6
 800de26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de2a:	d82a      	bhi.n	800de82 <HAL_SAI_Transmit_DMA+0x112>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800de2c:	6822      	ldr	r2, [r4, #0]
 800de2e:	6955      	ldr	r5, [r2, #20]
 800de30:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 800de34:	d0f4      	beq.n	800de20 <HAL_SAI_Transmit_DMA+0xb0>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800de36:	6813      	ldr	r3, [r2, #0]
 800de38:	03db      	lsls	r3, r3, #15
 800de3a:	d403      	bmi.n	800de44 <HAL_SAI_Transmit_DMA+0xd4>
      __HAL_SAI_ENABLE(hsai);
 800de3c:	6813      	ldr	r3, [r2, #0]
 800de3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de42:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800de44:	2300      	movs	r3, #0
    return HAL_OK;
 800de46:	469a      	mov	sl, r3
    __HAL_UNLOCK(hsai);
 800de48:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800de4c:	4650      	mov	r0, sl
 800de4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800de52:	f04f 0a02 	mov.w	sl, #2
}
 800de56:	4650      	mov	r0, sl
 800de58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return  HAL_ERROR;
 800de5c:	f04f 0a01 	mov.w	sl, #1
}
 800de60:	4650      	mov	r0, sl
 800de62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800de66:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800de6a:	2a01      	cmp	r2, #1
 800de6c:	bf0b      	itete	eq
 800de6e:	2215      	moveq	r2, #21
 800de70:	2205      	movne	r2, #5
 800de72:	2171      	moveq	r1, #113	; 0x71
 800de74:	2161      	movne	r1, #97	; 0x61
 800de76:	e7c5      	b.n	800de04 <HAL_SAI_Transmit_DMA+0x94>
}
 800de78:	4650      	mov	r0, sl
      __HAL_UNLOCK(hsai);
 800de7a:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
 800de7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800de82:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 800de86:	f04f 0a03 	mov.w	sl, #3
        __HAL_UNLOCK(hsai);
 800de8a:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800de8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 800de92:	4650      	mov	r0, sl
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800de94:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800de98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de9c:	0800df0d 	.word	0x0800df0d
 800dea0:	0800dea9 	.word	0x0800dea9
 800dea4:	0800df19 	.word	0x0800df19

0800dea8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800dea8:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800deaa:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800deac:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800deae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800deb2:	d01b      	beq.n	800deec <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800deb4:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800debc:	6813      	ldr	r3, [r2, #0]
 800debe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dec2:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800dec4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800dec6:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800dec8:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800deca:	d012      	beq.n	800def2 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800decc:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 800ded0:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ded4:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ded6:	3b02      	subs	r3, #2
 800ded8:	2b01      	cmp	r3, #1
 800deda:	bf98      	it	ls
 800dedc:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dede:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800dee0:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800dee4:	4013      	ands	r3, r2
 800dee6:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800dee8:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800deec:	f7f7 f8ba 	bl	8005064 <HAL_SAI_TxCpltCallback>
#endif
}
 800def0:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800def2:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800def6:	2a01      	cmp	r2, #1
 800def8:	bf0b      	itete	eq
 800defa:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 800defe:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 800df02:	f06f 0215 	mvneq.w	r2, #21
 800df06:	f06f 0205 	mvnne.w	r2, #5
 800df0a:	e7e3      	b.n	800ded4 <SAI_DMATxCplt+0x2c>

0800df0c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800df0c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800df0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800df10:	f7f7 f8b2 	bl	8005078 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800df14:	bd08      	pop	{r3, pc}
 800df16:	bf00      	nop

0800df18 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800df18:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800df1a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800df1c:	f7fc fb48 	bl	800a5b0 <HAL_DMA_GetError>
 800df20:	2802      	cmp	r0, #2
 800df22:	d025      	beq.n	800df70 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800df24:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800df28:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800df2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800df2e:	4814      	ldr	r0, [pc, #80]	; (800df80 <SAI_DMAError+0x68>)
 800df30:	4a14      	ldr	r2, [pc, #80]	; (800df84 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800df32:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800df36:	680b      	ldr	r3, [r1, #0]
 800df38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800df3c:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800df3e:	6803      	ldr	r3, [r0, #0]
  __HAL_SAI_DISABLE(hsai);
 800df40:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800df42:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
 800df46:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800df48:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800df4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800df4e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800df50:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 800df52:	b173      	cbz	r3, 800df72 <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800df54:	6822      	ldr	r2, [r4, #0]
    count--;
 800df56:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800df58:	6812      	ldr	r2, [r2, #0]
 800df5a:	03d2      	lsls	r2, r2, #15
 800df5c:	d4f9      	bmi.n	800df52 <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800df5e:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800df60:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800df62:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 800df64:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 800df68:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 800df6c:	f7f7 f88c 	bl	8005088 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800df70:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800df72:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800df76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df7a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 800df7e:	e7ee      	b.n	800df5e <SAI_DMAError+0x46>
 800df80:	200006e8 	.word	0x200006e8
 800df84:	95cbec1b 	.word	0x95cbec1b

0800df88 <HAL_SD_GetCardStatus.part.0>:
  * @param  hsd: Pointer to SD handle
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 800df88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df8c:	4604      	mov	r4, r0
 800df8e:	b096      	sub	sp, #88	; 0x58
 800df90:	460d      	mov	r5, r1
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800df92:	f7fa fead 	bl	8008cf0 <HAL_GetTick>
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800df96:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800df98:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800df9a:	6820      	ldr	r0, [r4, #0]
 800df9c:	f001 fe12 	bl	800fbc4 <SDMMC_GetResponse>
 800dfa0:	0181      	lsls	r1, r0, #6
 800dfa2:	d45a      	bmi.n	800e05a <HAL_SD_GetCardStatus.part.0+0xd2>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800dfa4:	2140      	movs	r1, #64	; 0x40
 800dfa6:	6820      	ldr	r0, [r4, #0]
 800dfa8:	f001 fe26 	bl	800fbf8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfac:	b1e8      	cbz	r0, 800dfea <HAL_SD_GetCardStatus.part.0+0x62>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
  if (errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dfae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfb0:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfb2:	6823      	ldr	r3, [r4, #0]
 800dfb4:	4955      	ldr	r1, [pc, #340]	; (800e10c <HAL_SD_GetCardStatus.part.0+0x184>)
    hsd->State = HAL_SD_STATE_READY;
 800dfb6:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfb8:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dfba:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 800dfbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfbe:	4303      	orrs	r3, r0
 800dfc0:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dfc2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dfc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dfca:	6820      	ldr	r0, [r4, #0]
 800dfcc:	f001 fe14 	bl	800fbf8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfd0:	b138      	cbz	r0, 800dfe2 <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 800dfd2:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfd4:	6822      	ldr	r2, [r4, #0]
 800dfd6:	494d      	ldr	r1, [pc, #308]	; (800e10c <HAL_SD_GetCardStatus.part.0+0x184>)
    status = HAL_ERROR;
 800dfd8:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dfda:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dfdc:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dfde:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	b016      	add	sp, #88	; 0x58
 800dfe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800dfec:	6820      	ldr	r0, [r4, #0]
 800dfee:	0409      	lsls	r1, r1, #16
 800dff0:	f002 fb8a 	bl	8010708 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d1da      	bne.n	800dfae <HAL_SD_GetCardStatus.part.0+0x26>
  config.DataLength    = 64U;
 800dff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dffc:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dffe:	4669      	mov	r1, sp
 800e000:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 800e002:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e006:	2260      	movs	r2, #96	; 0x60
 800e008:	2302      	movs	r3, #2
 800e00a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e00e:	2200      	movs	r2, #0
 800e010:	2301      	movs	r3, #1
 800e012:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e016:	f001 fdd9 	bl	800fbcc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e01a:	6820      	ldr	r0, [r4, #0]
 800e01c:	f002 ff40 	bl	8010ea0 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e020:	2800      	cmp	r0, #0
 800e022:	d1c4      	bne.n	800dfae <HAL_SD_GetCardStatus.part.0+0x26>
  uint32_t *pData = pSDstatus;
 800e024:	ae06      	add	r6, sp, #24
 800e026:	e004      	b.n	800e032 <HAL_SD_GetCardStatus.part.0+0xaa>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e028:	f7fa fe62 	bl	8008cf0 <HAL_GetTick>
 800e02c:	1bc0      	subs	r0, r0, r7
 800e02e:	3001      	adds	r0, #1
 800e030:	d017      	beq.n	800e062 <HAL_SD_GetCardStatus.part.0+0xda>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e032:	6823      	ldr	r3, [r4, #0]
 800e034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e036:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e03a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e03c:	d114      	bne.n	800e068 <HAL_SD_GetCardStatus.part.0+0xe0>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e03e:	0412      	lsls	r2, r2, #16
 800e040:	d5f2      	bpl.n	800e028 <HAL_SD_GetCardStatus.part.0+0xa0>
 800e042:	f106 0820 	add.w	r8, r6, #32
 800e046:	e000      	b.n	800e04a <HAL_SD_GetCardStatus.part.0+0xc2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e048:	6823      	ldr	r3, [r4, #0]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f001 fda4 	bl	800fb98 <SDMMC_ReadFIFO>
 800e050:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800e054:	4546      	cmp	r6, r8
 800e056:	d1f7      	bne.n	800e048 <HAL_SD_GetCardStatus.part.0+0xc0>
 800e058:	e7e6      	b.n	800e028 <HAL_SD_GetCardStatus.part.0+0xa0>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e05a:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e05c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e060:	e7a8      	b.n	800dfb4 <HAL_SD_GetCardStatus.part.0+0x2c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e062:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e066:	e7a4      	b.n	800dfb2 <HAL_SD_GetCardStatus.part.0+0x2a>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e068:	0710      	lsls	r0, r2, #28
 800e06a:	d449      	bmi.n	800e100 <HAL_SD_GetCardStatus.part.0+0x178>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e06c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e06e:	0791      	lsls	r1, r2, #30
 800e070:	d448      	bmi.n	800e104 <HAL_SD_GetCardStatus.part.0+0x17c>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e074:	0692      	lsls	r2, r2, #26
 800e076:	d50a      	bpl.n	800e08e <HAL_SD_GetCardStatus.part.0+0x106>
 800e078:	e046      	b.n	800e108 <HAL_SD_GetCardStatus.part.0+0x180>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e07a:	f001 fd8d 	bl	800fb98 <SDMMC_ReadFIFO>
 800e07e:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e082:	f7fa fe35 	bl	8008cf0 <HAL_GetTick>
 800e086:	1bc0      	subs	r0, r0, r7
 800e088:	3001      	adds	r0, #1
 800e08a:	d0ea      	beq.n	800e062 <HAL_SD_GetCardStatus.part.0+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e08c:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e08e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e090:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e092:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e096:	d1f0      	bne.n	800e07a <HAL_SD_GetCardStatus.part.0+0xf2>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e098:	491d      	ldr	r1, [pc, #116]	; (800e110 <HAL_SD_GetCardStatus.part.0+0x188>)
  HAL_StatusTypeDef status = HAL_OK;
 800e09a:	4616      	mov	r6, r2
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e09c:	6399      	str	r1, [r3, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e09e:	9b06      	ldr	r3, [sp, #24]
 800e0a0:	f3c3 1281 	ubfx	r2, r3, #6, #2
 800e0a4:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e0a6:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800e0aa:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e0ac:	0a1a      	lsrs	r2, r3, #8
 800e0ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800e0b2:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800e0b6:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 800e0ba:	b292      	uxth	r2, r2
 800e0bc:	ba09      	rev	r1, r1
 800e0be:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e0c0:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e0c2:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e0c4:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e0c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e0ca:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e0ce:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e0d0:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e0d4:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e0d6:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e0d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e0de:	b2d0      	uxtb	r0, r2
 800e0e0:	4303      	orrs	r3, r0
 800e0e2:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e0e4:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800e0e8:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e0ea:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800e0ee:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e0f0:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e0f4:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e0f8:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e0fa:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e0fc:	74a9      	strb	r1, [r5, #18]
 800e0fe:	e762      	b.n	800dfc6 <HAL_SD_GetCardStatus.part.0+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e100:	2008      	movs	r0, #8
 800e102:	e757      	b.n	800dfb4 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e104:	2002      	movs	r0, #2
 800e106:	e755      	b.n	800dfb4 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 800e108:	2020      	movs	r0, #32
 800e10a:	e753      	b.n	800dfb4 <HAL_SD_GetCardStatus.part.0+0x2c>
 800e10c:	1fe00fff 	.word	0x1fe00fff
 800e110:	18000f3a 	.word	0x18000f3a

0800e114 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 800e114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e118:	4605      	mov	r5, r0
 800e11a:	b086      	sub	sp, #24
 800e11c:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e11e:	f7fa fde7 	bl	8008cf0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e122:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800e124:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e126:	6828      	ldr	r0, [r5, #0]
 800e128:	f001 fd66 	bl	800fbf8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e12c:	4604      	mov	r4, r0
 800e12e:	b118      	cbz	r0, 800e138 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800e130:	4620      	mov	r0, r4
 800e132:	b006      	add	sp, #24
 800e134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e138:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800e13a:	6828      	ldr	r0, [r5, #0]
 800e13c:	0409      	lsls	r1, r1, #16
 800e13e:	f002 fae3 	bl	8010708 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e142:	4604      	mov	r4, r0
 800e144:	2800      	cmp	r0, #0
 800e146:	d1f3      	bne.n	800e130 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 800e148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e14c:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e14e:	4669      	mov	r1, sp
 800e150:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 800e152:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e156:	2230      	movs	r2, #48	; 0x30
 800e158:	2302      	movs	r3, #2
 800e15a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e15e:	2200      	movs	r2, #0
 800e160:	2301      	movs	r3, #1
 800e162:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e166:	f001 fd31 	bl	800fbcc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e16a:	6828      	ldr	r0, [r5, #0]
 800e16c:	f002 fc64 	bl	8010a38 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e170:	4604      	mov	r4, r0
 800e172:	2800      	cmp	r0, #0
 800e174:	d1dc      	bne.n	800e130 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e176:	4682      	mov	sl, r0
 800e178:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e17a:	f240 582a 	movw	r8, #1322	; 0x52a
 800e17e:	e004      	b.n	800e18a <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e180:	f7fa fdb6 	bl	8008cf0 <HAL_GetTick>
 800e184:	1b83      	subs	r3, r0, r6
 800e186:	3301      	adds	r3, #1
 800e188:	d024      	beq.n	800e1d4 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e18a:	6828      	ldr	r0, [r5, #0]
 800e18c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e18e:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e192:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e194:	d10c      	bne.n	800e1b0 <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e196:	0319      	lsls	r1, r3, #12
 800e198:	d4f2      	bmi.n	800e180 <SD_FindSCR.constprop.0+0x6c>
 800e19a:	2c00      	cmp	r4, #0
 800e19c:	d1f0      	bne.n	800e180 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e19e:	f001 fcfb 	bl	800fb98 <SDMMC_ReadFIFO>
 800e1a2:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e1a4:	6828      	ldr	r0, [r5, #0]
      index++;
 800e1a6:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e1a8:	f001 fcf6 	bl	800fb98 <SDMMC_ReadFIFO>
 800e1ac:	4682      	mov	sl, r0
      index++;
 800e1ae:	e7e7      	b.n	800e180 <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e1b0:	071a      	lsls	r2, r3, #28
 800e1b2:	d416      	bmi.n	800e1e2 <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e1b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e1b6:	079b      	lsls	r3, r3, #30
 800e1b8:	d40f      	bmi.n	800e1da <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e1ba:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e1bc:	f014 0420 	ands.w	r4, r4, #32
 800e1c0:	d113      	bne.n	800e1ea <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e1c2:	fa9a f28a 	rev.w	r2, sl
 800e1c6:	fa99 f389 	rev.w	r3, r9
 800e1ca:	490a      	ldr	r1, [pc, #40]	; (800e1f4 <SD_FindSCR.constprop.0+0xe0>)
 800e1cc:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e1ce:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800e1d2:	e7ad      	b.n	800e130 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800e1d4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e1d8:	e7aa      	b.n	800e130 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e1da:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e1dc:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e1de:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e1e0:	e7a6      	b.n	800e130 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e1e2:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e1e4:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e1e6:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e1e8:	e7a2      	b.n	800e130 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e1ea:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 800e1ec:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e1ee:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800e1f0:	e79e      	b.n	800e130 <SD_FindSCR.constprop.0+0x1c>
 800e1f2:	bf00      	nop
 800e1f4:	18000f3a 	.word	0x18000f3a

0800e1f8 <HAL_SD_ReadBlocks>:
{
 800e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fc:	460d      	mov	r5, r1
 800e1fe:	b087      	sub	sp, #28
 800e200:	4604      	mov	r4, r0
 800e202:	4692      	mov	sl, r2
 800e204:	461f      	mov	r7, r3
 800e206:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800e20a:	f7fa fd71 	bl	8008cf0 <HAL_GetTick>
  if (NULL == pData)
 800e20e:	2d00      	cmp	r5, #0
 800e210:	d069      	beq.n	800e2e6 <HAL_SD_ReadBlocks+0xee>
  if (hsd->State == HAL_SD_STATE_READY)
 800e212:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e216:	2b01      	cmp	r3, #1
 800e218:	fa5f f983 	uxtb.w	r9, r3
 800e21c:	d152      	bne.n	800e2c4 <HAL_SD_ReadBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e21e:	eb0a 0307 	add.w	r3, sl, r7
 800e222:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e224:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e226:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e228:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e22a:	d866      	bhi.n	800e2fa <HAL_SD_ReadBlocks+0x102>
    hsd->State = HAL_SD_STATE_BUSY;
 800e22c:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e22e:	f04f 0b02 	mov.w	fp, #2
 800e232:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 800e234:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800e238:	6823      	ldr	r3, [r4, #0]
 800e23a:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e23c:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e23e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e240:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e242:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e244:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e248:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e24c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800e250:	bf18      	it	ne
 800e252:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e256:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e258:	027b      	lsls	r3, r7, #9
 800e25a:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e25c:	2390      	movs	r3, #144	; 0x90
 800e25e:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e262:	f001 fcb3 	bl	800fbcc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e266:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800e268:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e26a:	68d3      	ldr	r3, [r2, #12]
 800e26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e270:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800e272:	d931      	bls.n	800e2d8 <HAL_SD_ReadBlocks+0xe0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e274:	4651      	mov	r1, sl
 800e276:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800e278:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e27c:	f001 fe18 	bl	800feb0 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e280:	2800      	cmp	r0, #0
 800e282:	d142      	bne.n	800e30a <HAL_SD_ReadBlocks+0x112>
    dataremaining = config.DataLength;
 800e284:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e288:	e004      	b.n	800e294 <HAL_SD_ReadBlocks+0x9c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800e28a:	f7fa fd31 	bl	8008cf0 <HAL_GetTick>
 800e28e:	1b80      	subs	r0, r0, r6
 800e290:	4540      	cmp	r0, r8
 800e292:	d267      	bcs.n	800e364 <HAL_SD_ReadBlocks+0x16c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e294:	6820      	ldr	r0, [r4, #0]
 800e296:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e298:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800e29c:	d141      	bne.n	800e322 <HAL_SD_ReadBlocks+0x12a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800e29e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e2a0:	041a      	lsls	r2, r3, #16
 800e2a2:	d5f2      	bpl.n	800e28a <HAL_SD_ReadBlocks+0x92>
 800e2a4:	f1bb 0f1f 	cmp.w	fp, #31
 800e2a8:	d9ef      	bls.n	800e28a <HAL_SD_ReadBlocks+0x92>
 800e2aa:	f105 0a20 	add.w	sl, r5, #32
 800e2ae:	e000      	b.n	800e2b2 <HAL_SD_ReadBlocks+0xba>
          data = SDMMC_ReadFIFO(hsd->Instance);
 800e2b0:	6820      	ldr	r0, [r4, #0]
 800e2b2:	f001 fc71 	bl	800fb98 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800e2b6:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 800e2ba:	45aa      	cmp	sl, r5
 800e2bc:	d1f8      	bne.n	800e2b0 <HAL_SD_ReadBlocks+0xb8>
        dataremaining -= 32U;
 800e2be:	f1ab 0b20 	sub.w	fp, fp, #32
 800e2c2:	e7e2      	b.n	800e28a <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e2c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800e2c6:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e2ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e2ce:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e2d0:	4648      	mov	r0, r9
 800e2d2:	b007      	add	sp, #28
 800e2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800e2d8:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e2da:	4651      	mov	r1, sl
 800e2dc:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800e2de:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e2e0:	f001 fd38 	bl	800fd54 <SDMMC_CmdReadSingleBlock>
 800e2e4:	e7cc      	b.n	800e280 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800e2e8:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800e2f0:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2f2:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e2f4:	b007      	add	sp, #28
 800e2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e2fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800e2fc:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e2fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e302:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e304:	b007      	add	sp, #28
 800e306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e30a:	6823      	ldr	r3, [r4, #0]
 800e30c:	4a30      	ldr	r2, [pc, #192]	; (800e3d0 <HAL_SD_ReadBlocks+0x1d8>)
 800e30e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e310:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800e312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e314:	4303      	orrs	r3, r0
 800e316:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800e318:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 800e31a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800e31e:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800e320:	e7d6      	b.n	800e2d0 <HAL_SD_ReadBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e322:	68c3      	ldr	r3, [r0, #12]
 800e324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e328:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e32a:	6820      	ldr	r0, [r4, #0]
 800e32c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e32e:	05db      	lsls	r3, r3, #23
 800e330:	d501      	bpl.n	800e336 <HAL_SD_ReadBlocks+0x13e>
 800e332:	2f01      	cmp	r7, #1
 800e334:	d825      	bhi.n	800e382 <HAL_SD_ReadBlocks+0x18a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e336:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e338:	f013 0308 	ands.w	r3, r3, #8
 800e33c:	d135      	bne.n	800e3aa <HAL_SD_ReadBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e33e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e340:	f012 0202 	ands.w	r2, r2, #2
 800e344:	d126      	bne.n	800e394 <HAL_SD_ReadBlocks+0x19c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e346:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e348:	f013 0320 	ands.w	r3, r3, #32
 800e34c:	d039      	beq.n	800e3c2 <HAL_SD_ReadBlocks+0x1ca>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e34e:	4b20      	ldr	r3, [pc, #128]	; (800e3d0 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 800e350:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e352:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e354:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e356:	f043 0320 	orr.w	r3, r3, #32
 800e35a:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e35c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e360:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e362:	e7b5      	b.n	800e2d0 <HAL_SD_ReadBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e364:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800e366:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e368:	4819      	ldr	r0, [pc, #100]	; (800e3d0 <HAL_SD_ReadBlocks+0x1d8>)
        hsd->Context = SD_CONTEXT_NONE;
 800e36a:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800e36c:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e370:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800e372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e378:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800e37a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800e37e:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 800e380:	e7a6      	b.n	800e2d0 <HAL_SD_ReadBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800e382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e384:	2b03      	cmp	r3, #3
 800e386:	d0d6      	beq.n	800e336 <HAL_SD_ReadBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e388:	f001 ff9c 	bl	80102c4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800e38c:	2800      	cmp	r0, #0
 800e38e:	d1bc      	bne.n	800e30a <HAL_SD_ReadBlocks+0x112>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e390:	6820      	ldr	r0, [r4, #0]
 800e392:	e7d0      	b.n	800e336 <HAL_SD_ReadBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e394:	4a0e      	ldr	r2, [pc, #56]	; (800e3d0 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 800e396:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e398:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e39a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e39c:	f042 0202 	orr.w	r2, r2, #2
 800e3a0:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e3a2:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e3a6:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e3a8:	e792      	b.n	800e2d0 <HAL_SD_ReadBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3aa:	4b09      	ldr	r3, [pc, #36]	; (800e3d0 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 800e3ac:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3ae:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e3b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3b2:	f043 0308 	orr.w	r3, r3, #8
 800e3b6:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e3b8:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800e3ba:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e3be:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e3c0:	e786      	b.n	800e2d0 <HAL_SD_ReadBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e3c2:	4904      	ldr	r1, [pc, #16]	; (800e3d4 <HAL_SD_ReadBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
 800e3c4:	2201      	movs	r2, #1
    return HAL_OK;
 800e3c6:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e3c8:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e3ca:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800e3ce:	e77f      	b.n	800e2d0 <HAL_SD_ReadBlocks+0xd8>
 800e3d0:	1fe00fff 	.word	0x1fe00fff
 800e3d4:	18000f3a 	.word	0x18000f3a

0800e3d8 <HAL_SD_WriteBlocks>:
{
 800e3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3dc:	460d      	mov	r5, r1
 800e3de:	b089      	sub	sp, #36	; 0x24
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	4692      	mov	sl, r2
 800e3e4:	461f      	mov	r7, r3
 800e3e6:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800e3ea:	f7fa fc81 	bl	8008cf0 <HAL_GetTick>
  if (NULL == pData)
 800e3ee:	2d00      	cmp	r5, #0
 800e3f0:	d068      	beq.n	800e4c4 <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
 800e3f2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	fa5f f983 	uxtb.w	r9, r3
 800e3fc:	d152      	bne.n	800e4a4 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e3fe:	eb0a 0307 	add.w	r3, sl, r7
 800e402:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e404:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e406:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e408:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e40a:	d865      	bhi.n	800e4d8 <HAL_SD_WriteBlocks+0x100>
    hsd->State = HAL_SD_STATE_BUSY;
 800e40c:	2303      	movs	r3, #3
 800e40e:	4606      	mov	r6, r0
 800e410:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800e414:	6823      	ldr	r3, [r4, #0]
 800e416:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e418:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e41a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e41c:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e41e:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e420:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e424:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e428:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e42a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800e42e:	bf18      	it	ne
 800e430:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e434:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e436:	027b      	lsls	r3, r7, #9
 800e438:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e43a:	2390      	movs	r3, #144	; 0x90
 800e43c:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e43e:	f001 fbc5 	bl	800fbcc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e442:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800e444:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e446:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e448:	68d3      	ldr	r3, [r2, #12]
 800e44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e44e:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800e450:	d932      	bls.n	800e4b8 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800e452:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e454:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800e456:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e458:	f001 fe86 	bl	8010168 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d143      	bne.n	800e4e8 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
 800e460:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800e464:	e004      	b.n	800e470 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800e466:	f7fa fc43 	bl	8008cf0 <HAL_GetTick>
 800e46a:	1b80      	subs	r0, r0, r6
 800e46c:	4540      	cmp	r0, r8
 800e46e:	d268      	bcs.n	800e542 <HAL_SD_WriteBlocks+0x16a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800e470:	6820      	ldr	r0, [r4, #0]
 800e472:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e474:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800e478:	d142      	bne.n	800e500 <HAL_SD_WriteBlocks+0x128>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800e47a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e47c:	045a      	lsls	r2, r3, #17
 800e47e:	d5f2      	bpl.n	800e466 <HAL_SD_WriteBlocks+0x8e>
 800e480:	f1bb 0f1f 	cmp.w	fp, #31
 800e484:	d9ef      	bls.n	800e466 <HAL_SD_WriteBlocks+0x8e>
 800e486:	f105 0a20 	add.w	sl, r5, #32
 800e48a:	e000      	b.n	800e48e <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e48c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e48e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e492:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e494:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e496:	f001 fb83 	bl	800fba0 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800e49a:	4555      	cmp	r5, sl
 800e49c:	d1f6      	bne.n	800e48c <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
 800e49e:	f1ab 0b20 	sub.w	fp, fp, #32
 800e4a2:	e7e0      	b.n	800e466 <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e4a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800e4a6:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e4aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e4ae:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e4b0:	4648      	mov	r0, r9
 800e4b2:	b009      	add	sp, #36	; 0x24
 800e4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800e4b8:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e4ba:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800e4bc:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e4be:	f001 fda5 	bl	801000c <SDMMC_CmdWriteSingleBlock>
 800e4c2:	e7cb      	b.n	800e45c <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e4c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800e4c6:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e4ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800e4ce:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e4d0:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e4d2:	b009      	add	sp, #36	; 0x24
 800e4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e4d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800e4da:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e4dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e4e0:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e4e2:	b009      	add	sp, #36	; 0x24
 800e4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4e8:	6823      	ldr	r3, [r4, #0]
 800e4ea:	4a30      	ldr	r2, [pc, #192]	; (800e5ac <HAL_SD_WriteBlocks+0x1d4>)
 800e4ec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e4ee:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800e4f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4f2:	4303      	orrs	r3, r0
 800e4f4:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800e4f6:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 800e4f8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800e4fc:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800e4fe:	e7d7      	b.n	800e4b0 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e500:	68c3      	ldr	r3, [r0, #12]
 800e502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e506:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e508:	6820      	ldr	r0, [r4, #0]
 800e50a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e50c:	05db      	lsls	r3, r3, #23
 800e50e:	d501      	bpl.n	800e514 <HAL_SD_WriteBlocks+0x13c>
 800e510:	2f01      	cmp	r7, #1
 800e512:	d823      	bhi.n	800e55c <HAL_SD_WriteBlocks+0x184>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e514:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e516:	f013 0308 	ands.w	r3, r3, #8
 800e51a:	d133      	bne.n	800e584 <HAL_SD_WriteBlocks+0x1ac>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e51c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e51e:	f012 0202 	ands.w	r2, r2, #2
 800e522:	d124      	bne.n	800e56e <HAL_SD_WriteBlocks+0x196>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800e524:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e526:	f013 0310 	ands.w	r3, r3, #16
 800e52a:	d037      	beq.n	800e59c <HAL_SD_WriteBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e52c:	4b1f      	ldr	r3, [pc, #124]	; (800e5ac <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800e52e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e530:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e534:	f043 0310 	orr.w	r3, r3, #16
 800e538:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e53a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e53e:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e540:	e7b6      	b.n	800e4b0 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e542:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800e544:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e546:	4819      	ldr	r0, [pc, #100]	; (800e5ac <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 800e548:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800e54a:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e54e:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e552:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800e554:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800e558:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 800e55a:	e7a9      	b.n	800e4b0 <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800e55c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e55e:	2b03      	cmp	r3, #3
 800e560:	d0d8      	beq.n	800e514 <HAL_SD_WriteBlocks+0x13c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e562:	f001 feaf 	bl	80102c4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800e566:	2800      	cmp	r0, #0
 800e568:	d1be      	bne.n	800e4e8 <HAL_SD_WriteBlocks+0x110>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e56a:	6820      	ldr	r0, [r4, #0]
 800e56c:	e7d2      	b.n	800e514 <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e56e:	4a0f      	ldr	r2, [pc, #60]	; (800e5ac <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800e570:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e572:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e574:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e576:	f042 0202 	orr.w	r2, r2, #2
 800e57a:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e57c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e580:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e582:	e795      	b.n	800e4b0 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e584:	4b09      	ldr	r3, [pc, #36]	; (800e5ac <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800e586:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e588:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e58a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e58c:	f043 0308 	orr.w	r3, r3, #8
 800e590:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e592:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800e594:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e598:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e59a:	e789      	b.n	800e4b0 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e59c:	4904      	ldr	r1, [pc, #16]	; (800e5b0 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 800e59e:	2201      	movs	r2, #1
    return HAL_OK;
 800e5a0:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e5a2:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e5a4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800e5a8:	e782      	b.n	800e4b0 <HAL_SD_WriteBlocks+0xd8>
 800e5aa:	bf00      	nop
 800e5ac:	1fe00fff 	.word	0x1fe00fff
 800e5b0:	18000f3a 	.word	0x18000f3a

0800e5b4 <HAL_SD_ErrorCallback>:
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop

0800e5b8 <HAL_SD_GetCardCSD>:
{
 800e5b8:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e5ba:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e5bc:	f04f 0c00 	mov.w	ip, #0
{
 800e5c0:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e5c2:	0f92      	lsrs	r2, r2, #30
 800e5c4:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e5c6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e5c8:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800e5cc:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e5ce:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 800e5d2:	f002 0203 	and.w	r2, r2, #3
 800e5d6:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e5d8:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 800e5dc:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e5de:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 800e5e2:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e5e4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800e5e8:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e5ea:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e5ec:	0d12      	lsrs	r2, r2, #20
 800e5ee:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e5f0:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800e5f4:	f002 020f 	and.w	r2, r2, #15
 800e5f8:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e5fa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e5fc:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800e600:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e602:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e604:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800e608:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e60a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e60c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800e610:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e612:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e614:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800e618:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e61a:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800e61e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800e620:	2a00      	cmp	r2, #0
 800e622:	f040 808a 	bne.w	800e73a <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e626:	6e04      	ldr	r4, [r0, #96]	; 0x60
 800e628:	f640 72fc 	movw	r2, #4092	; 0xffc
 800e62c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800e62e:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 800e632:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800e636:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e638:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e63a:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 800e63e:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e640:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800e644:	f002 0207 	and.w	r2, r2, #7
 800e648:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e64a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e64c:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800e650:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e652:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e654:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800e658:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e65a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e65c:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800e660:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e662:	690a      	ldr	r2, [r1, #16]
 800e664:	3201      	adds	r2, #1
 800e666:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e668:	7e08      	ldrb	r0, [r1, #24]
 800e66a:	f000 0007 	and.w	r0, r0, #7
 800e66e:	3002      	adds	r0, #2
 800e670:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e672:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e674:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e676:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e67a:	f00c 0c0f 	and.w	ip, ip, #15
 800e67e:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e682:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e686:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e688:	fb02 f20c 	mul.w	r2, r2, ip
 800e68c:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e68e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.LogBlockSize = 512U;
 800e690:	f44f 7400 	mov.w	r4, #512	; 0x200
  pCSD->Reserved3 = 0;
 800e694:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 800e696:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e69a:	f3c2 3280 	ubfx	r2, r2, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 800e69e:	655c      	str	r4, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e6a0:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e6a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e6a4:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800e6a8:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e6aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e6ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e6b0:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e6b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e6b4:	0fd2      	lsrs	r2, r2, #31
 800e6b6:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e6b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e6ba:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800e6be:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e6c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e6c2:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800e6c6:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e6c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e6ca:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800e6ce:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e6d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e6d2:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800e6d6:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800e6da:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e6de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e6e2:	ea02 020c 	and.w	r2, r2, ip
 800e6e6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e6ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e6ec:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800e6f0:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e6f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e6f6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800e6fa:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e6fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e700:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800e704:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e708:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e70a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800e70e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e712:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e714:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800e718:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e71c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e71e:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800e722:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e728:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800e72c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800e730:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 800e734:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e738:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e73a:	2a01      	cmp	r2, #1
 800e73c:	d110      	bne.n	800e760 <HAL_SD_GetCardCSD+0x1a8>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e73e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e740:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
 800e744:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e748:	0412      	lsls	r2, r2, #16
 800e74a:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800e74e:	4322      	orrs	r2, r4
 800e750:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e752:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800e754:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e756:	3201      	adds	r2, #1
 800e758:	0292      	lsls	r2, r2, #10
 800e75a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e75c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e75e:	e796      	b.n	800e68e <HAL_SD_GetCardCSD+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e760:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 800e762:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e764:	4805      	ldr	r0, [pc, #20]	; (800e77c <HAL_SD_GetCardCSD+0x1c4>)
 800e766:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 800e768:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e76a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e76c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e770:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e772:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 800e776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e77a:	4770      	bx	lr
 800e77c:	1fe00fff 	.word	0x1fe00fff

0800e780 <HAL_SD_InitCard>:
{
 800e780:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e782:	2200      	movs	r2, #0
{
 800e784:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e786:	2300      	movs	r3, #0
{
 800e788:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e78a:	2100      	movs	r1, #0
 800e78c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e790:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e794:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e798:	f7fe fe18 	bl	800d3cc <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800e79c:	b940      	cbnz	r0, 800e7b0 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
 800e79e:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e7a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 800e7a4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800e7a8:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	b015      	add	sp, #84	; 0x54
 800e7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e7b0:	0a06      	lsrs	r6, r0, #8
 800e7b2:	4b8e      	ldr	r3, [pc, #568]	; (800e9ec <HAL_SD_InitCard+0x26c>)
  (void)SDMMC_Init(hsd->Instance, Init);
 800e7b4:	aa07      	add	r2, sp, #28
 800e7b6:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e7b8:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800e7bc:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800e7be:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800e7c0:	9608      	str	r6, [sp, #32]
 800e7c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e7ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e7cc:	6820      	ldr	r0, [r4, #0]
 800e7ce:	f001 f9c7 	bl	800fb60 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e7d2:	6820      	ldr	r0, [r4, #0]
 800e7d4:	f001 f9ea 	bl	800fbac <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800e7d8:	4b85      	ldr	r3, [pc, #532]	; (800e9f0 <HAL_SD_InitCard+0x270>)
 800e7da:	429d      	cmp	r5, r3
 800e7dc:	d902      	bls.n	800e7e4 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800e7de:	0076      	lsls	r6, r6, #1
 800e7e0:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800e7e4:	4883      	ldr	r0, [pc, #524]	; (800e9f4 <HAL_SD_InitCard+0x274>)
 800e7e6:	fbb0 f0f5 	udiv	r0, r0, r5
 800e7ea:	3001      	adds	r0, #1
 800e7ec:	f7fa fa86 	bl	8008cfc <HAL_Delay>
  __IO uint32_t count = 0U;
 800e7f0:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e7f2:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800e7f4:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e7f6:	f001 ff1b 	bl	8010630 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7fa:	4605      	mov	r5, r0
 800e7fc:	b140      	cbz	r0, 800e810 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 800e7fe:	2601      	movs	r6, #1
 800e800:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 800e804:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800e806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e808:	432b      	orrs	r3, r5
 800e80a:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e80c:	b015      	add	sp, #84	; 0x54
 800e80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e810:	6820      	ldr	r0, [r4, #0]
 800e812:	f001 ff39 	bl	8010688 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e816:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800e81a:	f000 80ce 	beq.w	800e9ba <HAL_SD_InitCard+0x23a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e81e:	2301      	movs	r3, #1
 800e820:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e822:	2100      	movs	r1, #0
 800e824:	6820      	ldr	r0, [r4, #0]
 800e826:	f001 ff6f 	bl	8010708 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e82a:	bb08      	cbnz	r0, 800e870 <HAL_SD_InitCard+0xf0>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e82c:	9b03      	ldr	r3, [sp, #12]
 800e82e:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800e832:	42b3      	cmp	r3, r6
 800e834:	f200 80d3 	bhi.w	800e9de <HAL_SD_InitCard+0x25e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e838:	4f6f      	ldr	r7, [pc, #444]	; (800e9f8 <HAL_SD_InitCard+0x278>)
 800e83a:	e010      	b.n	800e85e <HAL_SD_InitCard+0xde>
 800e83c:	6820      	ldr	r0, [r4, #0]
 800e83e:	f002 f811 	bl	8010864 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e842:	4601      	mov	r1, r0
 800e844:	b9a0      	cbnz	r0, 800e870 <HAL_SD_InitCard+0xf0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e846:	6820      	ldr	r0, [r4, #0]
 800e848:	f001 f9bc 	bl	800fbc4 <SDMMC_GetResponse>
    count++;
 800e84c:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e84e:	2800      	cmp	r0, #0
    count++;
 800e850:	f103 0301 	add.w	r3, r3, #1
 800e854:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e856:	9b03      	ldr	r3, [sp, #12]
 800e858:	db0d      	blt.n	800e876 <HAL_SD_InitCard+0xf6>
 800e85a:	42b3      	cmp	r3, r6
 800e85c:	d80b      	bhi.n	800e876 <HAL_SD_InitCard+0xf6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e85e:	2100      	movs	r1, #0
 800e860:	6820      	ldr	r0, [r4, #0]
 800e862:	f001 ff51 	bl	8010708 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e866:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 800e868:	2800      	cmp	r0, #0
 800e86a:	d0e7      	beq.n	800e83c <HAL_SD_InitCard+0xbc>
 800e86c:	4605      	mov	r5, r0
 800e86e:	e7c6      	b.n	800e7fe <HAL_SD_InitCard+0x7e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e870:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800e874:	e7c3      	b.n	800e7fe <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e876:	9a03      	ldr	r2, [sp, #12]
 800e878:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800e87c:	429a      	cmp	r2, r3
 800e87e:	f200 80b2 	bhi.w	800e9e6 <HAL_SD_InitCard+0x266>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e882:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  hsd->SdCard.CardType = CARD_SDSC;
 800e886:	f04f 0300 	mov.w	r3, #0
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e88a:	bf18      	it	ne
 800e88c:	2501      	movne	r5, #1
  hsd->SdCard.CardType = CARD_SDSC;
 800e88e:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 800e890:	2300      	movs	r3, #0
 800e892:	63a5      	str	r5, [r4, #56]	; 0x38
 800e894:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 800e898:	f7fa fa2a 	bl	8008cf0 <HAL_GetTick>
 800e89c:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e89e:	6820      	ldr	r0, [r4, #0]
 800e8a0:	f001 f98c 	bl	800fbbc <SDMMC_GetPowerState>
 800e8a4:	b350      	cbz	r0, 800e8fc <HAL_SD_InitCard+0x17c>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e8a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8a8:	2b03      	cmp	r3, #3
 800e8aa:	d132      	bne.n	800e912 <HAL_SD_InitCard+0x192>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e8ac:	2104      	movs	r1, #4
 800e8ae:	6820      	ldr	r0, [r4, #0]
 800e8b0:	f001 f988 	bl	800fbc4 <SDMMC_GetResponse>
 800e8b4:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e8b6:	a909      	add	r1, sp, #36	; 0x24
 800e8b8:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e8ba:	0d1b      	lsrs	r3, r3, #20
 800e8bc:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e8be:	f7ff fe7b 	bl	800e5b8 <HAL_SD_GetCardCSD>
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	f040 8084 	bne.w	800e9d2 <HAL_SD_InitCard+0x252>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e8ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e8cc:	6820      	ldr	r0, [r4, #0]
 800e8ce:	0409      	lsls	r1, r1, #16
 800e8d0:	f001 fe00 	bl	80104d4 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8d4:	b9a0      	cbnz	r0, 800e900 <HAL_SD_InitCard+0x180>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e8d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e8da:	6820      	ldr	r0, [r4, #0]
 800e8dc:	f001 f98c 	bl	800fbf8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	f43f af62 	beq.w	800e7aa <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8e6:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800e8e8:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8ea:	4944      	ldr	r1, [pc, #272]	; (800e9fc <HAL_SD_InitCard+0x27c>)
    return HAL_ERROR;
 800e8ec:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8ee:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e8f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e8f2:	4310      	orrs	r0, r2
 800e8f4:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e8f6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
 800e8fa:	e756      	b.n	800e7aa <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e8fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800e900:	2601      	movs	r6, #1
 800e902:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e908:	4303      	orrs	r3, r0
}
 800e90a:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800e90c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e90e:	b015      	add	sp, #84	; 0x54
 800e910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e912:	6820      	ldr	r0, [r4, #0]
 800e914:	f002 f938 	bl	8010b88 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e918:	2800      	cmp	r0, #0
 800e91a:	d1f1      	bne.n	800e900 <HAL_SD_InitCard+0x180>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e91c:	4601      	mov	r1, r0
 800e91e:	6820      	ldr	r0, [r4, #0]
 800e920:	f001 f950 	bl	800fbc4 <SDMMC_GetResponse>
 800e924:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e926:	2104      	movs	r1, #4
 800e928:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e92a:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e92c:	f001 f94a 	bl	800fbc4 <SDMMC_GetResponse>
 800e930:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e932:	2108      	movs	r1, #8
 800e934:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e936:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e938:	f001 f944 	bl	800fbc4 <SDMMC_GetResponse>
 800e93c:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e93e:	210c      	movs	r1, #12
 800e940:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e942:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e944:	f001 f93e 	bl	800fbc4 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e948:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e94a:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e94c:	2b03      	cmp	r3, #3
 800e94e:	d0ad      	beq.n	800e8ac <HAL_SD_InitCard+0x12c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e950:	f241 3687 	movw	r6, #4999	; 0x1387
 800e954:	e009      	b.n	800e96a <HAL_SD_InitCard+0x1ea>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e956:	6820      	ldr	r0, [r4, #0]
 800e958:	f002 f994 	bl	8010c84 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d1cf      	bne.n	800e900 <HAL_SD_InitCard+0x180>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e960:	f7fa f9c6 	bl	8008cf0 <HAL_GetTick>
 800e964:	1b43      	subs	r3, r0, r5
 800e966:	42b3      	cmp	r3, r6
 800e968:	d836      	bhi.n	800e9d8 <HAL_SD_InitCard+0x258>
    while (sd_rca == 0U)
 800e96a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e96e:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 800e972:	2b00      	cmp	r3, #0
 800e974:	d0ef      	beq.n	800e956 <HAL_SD_InitCard+0x1d6>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e976:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e978:	2a03      	cmp	r2, #3
 800e97a:	d097      	beq.n	800e8ac <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e97c:	0419      	lsls	r1, r3, #16
 800e97e:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800e980:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e982:	f002 f93f 	bl	8010c04 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e986:	2800      	cmp	r0, #0
 800e988:	d1ba      	bne.n	800e900 <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e98a:	4601      	mov	r1, r0
 800e98c:	6820      	ldr	r0, [r4, #0]
 800e98e:	f001 f919 	bl	800fbc4 <SDMMC_GetResponse>
 800e992:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e994:	2104      	movs	r1, #4
 800e996:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e998:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e99a:	f001 f913 	bl	800fbc4 <SDMMC_GetResponse>
 800e99e:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e9a0:	2108      	movs	r1, #8
 800e9a2:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e9a4:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e9a6:	f001 f90d 	bl	800fbc4 <SDMMC_GetResponse>
 800e9aa:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e9ac:	210c      	movs	r1, #12
 800e9ae:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e9b0:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e9b2:	f001 f907 	bl	800fbc4 <SDMMC_GetResponse>
 800e9b6:	66a0      	str	r0, [r4, #104]	; 0x68
 800e9b8:	e778      	b.n	800e8ac <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e9ba:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e9bc:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e9be:	f001 fe37 	bl	8010630 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	f47f af52 	bne.w	800e86c <HAL_SD_InitCard+0xec>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e9c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	f47f af2e 	bne.w	800e82c <HAL_SD_InitCard+0xac>
 800e9d0:	e727      	b.n	800e822 <HAL_SD_InitCard+0xa2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e9d2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800e9d6:	e793      	b.n	800e900 <HAL_SD_InitCard+0x180>
        return HAL_SD_ERROR_TIMEOUT;
 800e9d8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9dc:	e790      	b.n	800e900 <HAL_SD_InitCard+0x180>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e9de:	9b03      	ldr	r3, [sp, #12]
 800e9e0:	42b3      	cmp	r3, r6
 800e9e2:	f67f af55 	bls.w	800e890 <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e9e6:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800e9ea:	e708      	b.n	800e7fe <HAL_SD_InitCard+0x7e>
 800e9ec:	014f8b59 	.word	0x014f8b59
 800e9f0:	000c34ff 	.word	0x000c34ff
 800e9f4:	00012110 	.word	0x00012110
 800e9f8:	c1100000 	.word	0xc1100000
 800e9fc:	1fe00fff 	.word	0x1fe00fff

0800ea00 <HAL_SD_GetCardInfo>:
{
 800ea00:	4603      	mov	r3, r0
}
 800ea02:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ea04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea06:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ea08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea0a:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ea0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea0e:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ea10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea12:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ea14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea16:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ea18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea1a:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ea1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea1e:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ea20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea22:	61cb      	str	r3, [r1, #28]
}
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop

0800ea28 <HAL_SD_ConfigWideBusOperation>:
{
 800ea28:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800ea2a:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ea2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800ea2e:	b089      	sub	sp, #36	; 0x24
 800ea30:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ea32:	4293      	cmp	r3, r2
{
 800ea34:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800ea36:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ea3a:	d040      	beq.n	800eabe <HAL_SD_ConfigWideBusOperation+0x96>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ea3c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800ea40:	d03d      	beq.n	800eabe <HAL_SD_ConfigWideBusOperation+0x96>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ea42:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800ea46:	d07d      	beq.n	800eb44 <HAL_SD_ConfigWideBusOperation+0x11c>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ea48:	2900      	cmp	r1, #0
 800ea4a:	d05c      	beq.n	800eb06 <HAL_SD_ConfigWideBusOperation+0xde>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ea4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ea4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ea52:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ea54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d138      	bne.n	800eacc <HAL_SD_ConfigWideBusOperation+0xa4>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ea5a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ea5e:	2100      	movs	r1, #0
 800ea60:	f7fe fcb4 	bl	800d3cc <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800ea64:	2800      	cmp	r0, #0
 800ea66:	d048      	beq.n	800eafa <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ea68:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ea6a:	4b50      	ldr	r3, [pc, #320]	; (800ebac <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ea6c:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800ea6e:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ea70:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ea72:	fba3 5300 	umull	r5, r3, r3, r0
 800ea76:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ea78:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ea7a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ea7e:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ea80:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ea84:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ea86:	d20e      	bcs.n	800eaa6 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ea88:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ea8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ea8e:	d00a      	beq.n	800eaa6 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ea90:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ea94:	d078      	beq.n	800eb88 <HAL_SD_ConfigWideBusOperation+0x160>
        if (hsd->Init.ClockDiv == 0U)
 800ea96:	b112      	cbz	r2, 800ea9e <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ea98:	0053      	lsls	r3, r2, #1
 800ea9a:	fbb0 f0f3 	udiv	r0, r0, r3
 800ea9e:	4b44      	ldr	r3, [pc, #272]	; (800ebb0 <HAL_SD_ConfigWideBusOperation+0x188>)
 800eaa0:	4298      	cmp	r0, r3
 800eaa2:	bf88      	it	hi
 800eaa4:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 800eaa6:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 800eaa8:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800eaaa:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800eaac:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800eaae:	c903      	ldmia	r1, {r0, r1}
 800eab0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eab6:	6820      	ldr	r0, [r4, #0]
 800eab8:	f001 f852 	bl	800fb60 <SDMMC_Init>
 800eabc:	e00a      	b.n	800ead4 <HAL_SD_ConfigWideBusOperation+0xac>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eabe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eac4:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800eac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d0c6      	beq.n	800ea5a <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eacc:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800eace:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ead0:	4a38      	ldr	r2, [pc, #224]	; (800ebb4 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800ead2:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ead4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ead8:	6820      	ldr	r0, [r4, #0]
 800eada:	f001 f88d 	bl	800fbf8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800eade:	b130      	cbz	r0, 800eaee <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eae0:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800eae2:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eae4:	4a33      	ldr	r2, [pc, #204]	; (800ebb4 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800eae6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800eae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eaea:	4303      	orrs	r3, r0
 800eaec:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 800eaee:	2301      	movs	r3, #1
}
 800eaf0:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800eaf2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800eaf6:	b009      	add	sp, #36	; 0x24
 800eaf8:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800eafa:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800eafc:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800eafe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eb02:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800eb04:	e7e6      	b.n	800ead4 <HAL_SD_ConfigWideBusOperation+0xac>
  uint32_t scr[2U] = {0UL, 0UL};
 800eb06:	2200      	movs	r2, #0
 800eb08:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb0a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800eb0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb10:	f001 f858 	bl	800fbc4 <SDMMC_GetResponse>
 800eb14:	0182      	lsls	r2, r0, #6
 800eb16:	d434      	bmi.n	800eb82 <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
 800eb18:	a902      	add	r1, sp, #8
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f7ff fafa 	bl	800e114 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb20:	b960      	cbnz	r0, 800eb3c <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb22:	9b03      	ldr	r3, [sp, #12]
 800eb24:	03db      	lsls	r3, r3, #15
 800eb26:	d535      	bpl.n	800eb94 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb28:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800eb2a:	6820      	ldr	r0, [r4, #0]
 800eb2c:	0409      	lsls	r1, r1, #16
 800eb2e:	f001 fdeb 	bl	8010708 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb32:	b918      	cbnz	r0, 800eb3c <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eb34:	4601      	mov	r1, r0
 800eb36:	6820      	ldr	r0, [r4, #0]
 800eb38:	f001 fed0 	bl	80108dc <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800eb3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb3e:	4303      	orrs	r3, r0
 800eb40:	6363      	str	r3, [r4, #52]	; 0x34
 800eb42:	e7c0      	b.n	800eac6 <HAL_SD_ConfigWideBusOperation+0x9e>
  uint32_t scr[2U] = {0UL, 0UL};
 800eb44:	2200      	movs	r2, #0
 800eb46:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb48:	2100      	movs	r1, #0
 800eb4a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800eb4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb50:	f001 f838 	bl	800fbc4 <SDMMC_GetResponse>
 800eb54:	0180      	lsls	r0, r0, #6
 800eb56:	d414      	bmi.n	800eb82 <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
 800eb58:	a902      	add	r1, sp, #8
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	f7ff fada 	bl	800e114 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d1eb      	bne.n	800eb3c <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb64:	9b03      	ldr	r3, [sp, #12]
 800eb66:	0359      	lsls	r1, r3, #13
 800eb68:	d514      	bpl.n	800eb94 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800eb6c:	6820      	ldr	r0, [r4, #0]
 800eb6e:	0409      	lsls	r1, r1, #16
 800eb70:	f001 fdca 	bl	8010708 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb74:	2800      	cmp	r0, #0
 800eb76:	d1e1      	bne.n	800eb3c <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eb78:	2102      	movs	r1, #2
 800eb7a:	6820      	ldr	r0, [r4, #0]
 800eb7c:	f001 feae 	bl	80108dc <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb80:	e7dc      	b.n	800eb3c <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eb82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800eb86:	e7d9      	b.n	800eb3c <HAL_SD_ConfigWideBusOperation+0x114>
        if (hsd->Init.ClockDiv == 0U)
 800eb88:	b93a      	cbnz	r2, 800eb9a <HAL_SD_ConfigWideBusOperation+0x172>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800eb8a:	490b      	ldr	r1, [pc, #44]	; (800ebb8 <HAL_SD_ConfigWideBusOperation+0x190>)
 800eb8c:	4288      	cmp	r0, r1
 800eb8e:	d98a      	bls.n	800eaa6 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800eb90:	0e5a      	lsrs	r2, r3, #25
 800eb92:	e788      	b.n	800eaa6 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb94:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800eb98:	e7d0      	b.n	800eb3c <HAL_SD_ConfigWideBusOperation+0x114>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800eb9a:	0051      	lsls	r1, r2, #1
 800eb9c:	fbb0 f1f1 	udiv	r1, r0, r1
 800eba0:	4805      	ldr	r0, [pc, #20]	; (800ebb8 <HAL_SD_ConfigWideBusOperation+0x190>)
 800eba2:	4281      	cmp	r1, r0
 800eba4:	f67f af7f 	bls.w	800eaa6 <HAL_SD_ConfigWideBusOperation+0x7e>
 800eba8:	e7f2      	b.n	800eb90 <HAL_SD_ConfigWideBusOperation+0x168>
 800ebaa:	bf00      	nop
 800ebac:	55e63b89 	.word	0x55e63b89
 800ebb0:	017d7840 	.word	0x017d7840
 800ebb4:	1fe00fff 	.word	0x1fe00fff
 800ebb8:	02faf080 	.word	0x02faf080

0800ebbc <HAL_SD_Init>:
{
 800ebbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebbe:	b087      	sub	sp, #28
  if (hsd == NULL)
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d045      	beq.n	800ec50 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_RESET)
 800ebc4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800ebc8:	4604      	mov	r4, r0
 800ebca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d042      	beq.n	800ec58 <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ebd2:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ebd4:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ebd6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ebda:	f7ff fdd1 	bl	800e780 <HAL_SD_InitCard>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d136      	bne.n	800ec50 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_BUSY)
 800ebe2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ebe6:	2b03      	cmp	r3, #3
 800ebe8:	d032      	beq.n	800ec50 <HAL_SD_Init+0x94>
 800ebea:	a901      	add	r1, sp, #4
 800ebec:	4620      	mov	r0, r4
 800ebee:	f7ff f9cb 	bl	800df88 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ebf2:	bb68      	cbnz	r0, 800ec50 <HAL_SD_Init+0x94>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ebf4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800ebf6:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ebfa:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ebfc:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800ec00:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ec02:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ec04:	d02c      	beq.n	800ec60 <HAL_SD_Init+0xa4>
 800ec06:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ec08:	68e1      	ldr	r1, [r4, #12]
 800ec0a:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ec0c:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ec0e:	f7ff ff0b 	bl	800ea28 <HAL_SD_ConfigWideBusOperation>
 800ec12:	4606      	mov	r6, r0
 800ec14:	b9e0      	cbnz	r0, 800ec50 <HAL_SD_Init+0x94>
  tickstart = HAL_GetTick();
 800ec16:	f7fa f86b 	bl	8008cf0 <HAL_GetTick>
 800ec1a:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ec1c:	e00c      	b.n	800ec38 <HAL_SD_Init+0x7c>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ec1e:	6820      	ldr	r0, [r4, #0]
 800ec20:	4629      	mov	r1, r5
 800ec22:	f000 ffcf 	bl	800fbc4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ec26:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ec2a:	2804      	cmp	r0, #4
 800ec2c:	d01f      	beq.n	800ec6e <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec2e:	f7fa f85f 	bl	8008cf0 <HAL_GetTick>
 800ec32:	1bc3      	subs	r3, r0, r7
 800ec34:	3301      	adds	r3, #1
 800ec36:	d020      	beq.n	800ec7a <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ec38:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ec3a:	6820      	ldr	r0, [r4, #0]
 800ec3c:	0409      	lsls	r1, r1, #16
 800ec3e:	f002 f881 	bl	8010d44 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec42:	4605      	mov	r5, r0
 800ec44:	2800      	cmp	r0, #0
 800ec46:	d0ea      	beq.n	800ec1e <HAL_SD_Init+0x62>
    hsd->ErrorCode |= errorstate;
 800ec48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec4a:	4303      	orrs	r3, r0
 800ec4c:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 800ec4e:	e7ee      	b.n	800ec2e <HAL_SD_Init+0x72>
    return HAL_ERROR;
 800ec50:	2601      	movs	r6, #1
}
 800ec52:	4630      	mov	r0, r6
 800ec54:	b007      	add	sp, #28
 800ec56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 800ec58:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800ec5a:	f7f9 fc93 	bl	8008584 <HAL_SD_MspInit>
 800ec5e:	e7b8      	b.n	800ebd2 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ec60:	4313      	orrs	r3, r2
 800ec62:	bf0c      	ite	eq
 800ec64:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800ec68:	f44f 7300 	movne.w	r3, #512	; 0x200
 800ec6c:	e7cc      	b.n	800ec08 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
 800ec6e:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ec70:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ec72:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800ec74:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800ec78:	e7eb      	b.n	800ec52 <HAL_SD_Init+0x96>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ec7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800ec7e:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800ec80:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ec82:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ec84:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800ec88:	e7e3      	b.n	800ec52 <HAL_SD_Init+0x96>
 800ec8a:	bf00      	nop

0800ec8c <HAL_SD_GetCardState>:
{
 800ec8c:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ec8e:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 800ec90:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ec92:	6800      	ldr	r0, [r0, #0]
 800ec94:	0409      	lsls	r1, r1, #16
 800ec96:	f002 f855 	bl	8010d44 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec9a:	4601      	mov	r1, r0
 800ec9c:	b120      	cbz	r0, 800eca8 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800ec9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eca0:	2000      	movs	r0, #0
 800eca2:	430b      	orrs	r3, r1
 800eca4:	6363      	str	r3, [r4, #52]	; 0x34
}
 800eca6:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eca8:	6820      	ldr	r0, [r4, #0]
 800ecaa:	f000 ff8b 	bl	800fbc4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ecae:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800ecb2:	bd10      	pop	{r4, pc}

0800ecb4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop

0800ecb8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop

0800ecbc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800ecbc:	4770      	bx	lr
 800ecbe:	bf00      	nop

0800ecc0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop

0800ecc4 <HAL_SD_IRQHandler>:
{
 800ecc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecc6:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ecc8:	6800      	ldr	r0, [r0, #0]
{
 800ecca:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 800eccc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ecce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ecd0:	041b      	lsls	r3, r3, #16
 800ecd2:	d502      	bpl.n	800ecda <HAL_SD_IRQHandler+0x16>
 800ecd4:	072f      	lsls	r7, r5, #28
 800ecd6:	f100 80b4 	bmi.w	800ee42 <HAL_SD_IRQHandler+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ecda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ecdc:	05de      	lsls	r6, r3, #23
 800ecde:	d529      	bpl.n	800ed34 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ece0:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800ece4:	4b91      	ldr	r3, [pc, #580]	; (800ef2c <HAL_SD_IRQHandler+0x268>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ece6:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800ece8:	6822      	ldr	r2, [r4, #0]
 800ecea:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800ecec:	400b      	ands	r3, r1
 800ecee:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ecf0:	6822      	ldr	r2, [r4, #0]
 800ecf2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ecf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ecf8:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ecfa:	6822      	ldr	r2, [r4, #0]
 800ecfc:	68d3      	ldr	r3, [r2, #12]
 800ecfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed02:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800ed04:	f015 0308 	ands.w	r3, r5, #8
 800ed08:	d076      	beq.n	800edf8 <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ed0a:	f015 0f22 	tst.w	r5, #34	; 0x22
 800ed0e:	f040 80d9 	bne.w	800eec4 <HAL_SD_IRQHandler+0x200>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ed12:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 800ed14:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ed16:	4986      	ldr	r1, [pc, #536]	; (800ef30 <HAL_SD_IRQHandler+0x26c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ed18:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ed1a:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 800ed1c:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800ed20:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ed24:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ed26:	f000 80a0 	beq.w	800ee6a <HAL_SD_IRQHandler+0x1a6>
        HAL_SD_RxCpltCallback(hsd);
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f002 f9ac 	bl	8011088 <HAL_SD_RxCpltCallback>
}
 800ed30:	b003      	add	sp, #12
 800ed32:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ed34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ed36:	045b      	lsls	r3, r3, #17
 800ed38:	d502      	bpl.n	800ed40 <HAL_SD_IRQHandler+0x7c>
 800ed3a:	072f      	lsls	r7, r5, #28
 800ed3c:	f100 809a 	bmi.w	800ee74 <HAL_SD_IRQHandler+0x1b0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800ed40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ed42:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ed46:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800ed48:	d06c      	beq.n	800ee24 <HAL_SD_IRQHandler+0x160>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ed4a:	079e      	lsls	r6, r3, #30
 800ed4c:	d503      	bpl.n	800ed56 <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ed4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed50:	f043 0302 	orr.w	r3, r3, #2
 800ed54:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ed56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ed58:	0719      	lsls	r1, r3, #28
 800ed5a:	d503      	bpl.n	800ed64 <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ed5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed5e:	f043 0308 	orr.w	r3, r3, #8
 800ed62:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ed64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ed66:	069a      	lsls	r2, r3, #26
 800ed68:	d503      	bpl.n	800ed72 <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ed6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed6c:	f043 0320 	orr.w	r3, r3, #32
 800ed70:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ed72:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ed74:	06db      	lsls	r3, r3, #27
 800ed76:	d503      	bpl.n	800ed80 <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ed78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed7a:	f043 0310 	orr.w	r3, r3, #16
 800ed7e:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ed80:	4b6b      	ldr	r3, [pc, #428]	; (800ef30 <HAL_SD_IRQHandler+0x26c>)
 800ed82:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800ed84:	6822      	ldr	r2, [r4, #0]
 800ed86:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ed88:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800ed8c:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ed8e:	6822      	ldr	r2, [r4, #0]
 800ed90:	68d3      	ldr	r3, [r2, #12]
 800ed92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed96:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800ed98:	6822      	ldr	r2, [r4, #0]
 800ed9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ed9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eda0:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800eda2:	6822      	ldr	r2, [r4, #0]
 800eda4:	68d3      	ldr	r3, [r2, #12]
 800eda6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edaa:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800edac:	6820      	ldr	r0, [r4, #0]
 800edae:	f001 fa89 	bl	80102c4 <SDMMC_CmdStopTransfer>
 800edb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800edb4:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800edb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800edba:	4318      	orrs	r0, r3
 800edbc:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800edbe:	68d3      	ldr	r3, [r2, #12]
 800edc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edc4:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800edc6:	6823      	ldr	r3, [r4, #0]
 800edc8:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800edca:	f015 0308 	ands.w	r3, r5, #8
 800edce:	f040 8087 	bne.w	800eee0 <HAL_SD_IRQHandler+0x21c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800edd2:	062f      	lsls	r7, r5, #24
 800edd4:	d5ac      	bpl.n	800ed30 <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800edd6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800edd8:	2a00      	cmp	r2, #0
 800edda:	d0a9      	beq.n	800ed30 <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800eddc:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800edde:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 800ede0:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ede2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800ede4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ede8:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800edea:	6822      	ldr	r2, [r4, #0]
 800edec:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800edee:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800edf2:	f7ff fbdf 	bl	800e5b4 <HAL_SD_ErrorCallback>
 800edf6:	e79b      	b.n	800ed30 <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800edf8:	0629      	lsls	r1, r5, #24
 800edfa:	d599      	bpl.n	800ed30 <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
 800edfc:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800edfe:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800ee02:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800ee04:	6822      	ldr	r2, [r4, #0]
 800ee06:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ee08:	6822      	ldr	r2, [r4, #0]
 800ee0a:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ee0c:	d176      	bne.n	800eefc <HAL_SD_IRQHandler+0x238>
      hsd->State = HAL_SD_STATE_READY;
 800ee0e:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800ee10:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ee12:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800ee16:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ee1a:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ee1c:	d17b      	bne.n	800ef16 <HAL_SD_IRQHandler+0x252>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ee1e:	07aa      	lsls	r2, r5, #30
 800ee20:	d086      	beq.n	800ed30 <HAL_SD_IRQHandler+0x6c>
 800ee22:	e782      	b.n	800ed2a <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800ee24:	00de      	lsls	r6, r3, #3
 800ee26:	d583      	bpl.n	800ed30 <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800ee28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ee2c:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ee2e:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800ee30:	6823      	ldr	r3, [r4, #0]
 800ee32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee34:	0759      	lsls	r1, r3, #29
 800ee36:	d45c      	bmi.n	800eef2 <HAL_SD_IRQHandler+0x22e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ee38:	06aa      	lsls	r2, r5, #26
 800ee3a:	d573      	bpl.n	800ef24 <HAL_SD_IRQHandler+0x260>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ee3c:	f7ff ff40 	bl	800ecc0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800ee40:	e776      	b.n	800ed30 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
 800ee42:	e9d4 5309 	ldrd	r5, r3, [r4, #36]	; 0x24
  if (hsd->RxXferSize >= 32U)
 800ee46:	2b1f      	cmp	r3, #31
 800ee48:	f67f af72 	bls.w	800ed30 <HAL_SD_IRQHandler+0x6c>
 800ee4c:	f105 0620 	add.w	r6, r5, #32
 800ee50:	e000      	b.n	800ee54 <HAL_SD_IRQHandler+0x190>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ee52:	6820      	ldr	r0, [r4, #0]
 800ee54:	f000 fea0 	bl	800fb98 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800ee58:	f845 0b04 	str.w	r0, [r5], #4
    for (count = 0U; count < 8U; count++)
 800ee5c:	42ae      	cmp	r6, r5
 800ee5e:	d1f8      	bne.n	800ee52 <HAL_SD_IRQHandler+0x18e>
    hsd->RxXferSize -= 32U;
 800ee60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    hsd->pRxBuffPtr = tmp;
 800ee62:	6266      	str	r6, [r4, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ee64:	3b20      	subs	r3, #32
 800ee66:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee68:	e762      	b.n	800ed30 <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f002 f906 	bl	801107c <HAL_SD_TxCpltCallback>
}
 800ee70:	b003      	add	sp, #12
 800ee72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
 800ee74:	6a23      	ldr	r3, [r4, #32]
 800ee76:	2b1f      	cmp	r3, #31
 800ee78:	f67f af5a 	bls.w	800ed30 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
 800ee7c:	69e6      	ldr	r6, [r4, #28]
 800ee7e:	1d37      	adds	r7, r6, #4
 800ee80:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800ee84:	e000      	b.n	800ee88 <HAL_SD_IRQHandler+0x1c4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ee86:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800ee88:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 800ee8c:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ee8e:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 800ee90:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800ee92:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800ee96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ee9a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800ee9c:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800eea0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eea4:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800eea6:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800eeaa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eeae:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800eeb0:	f000 fe76 	bl	800fba0 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800eeb4:	42af      	cmp	r7, r5
 800eeb6:	d1e6      	bne.n	800ee86 <HAL_SD_IRQHandler+0x1c2>
    hsd->TxXferSize -= 32U;
 800eeb8:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 800eeba:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800eebc:	3b20      	subs	r3, #32
 800eebe:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 800eec2:	e735      	b.n	800ed30 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800eec4:	6820      	ldr	r0, [r4, #0]
 800eec6:	f001 f9fd 	bl	80102c4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800eeca:	4603      	mov	r3, r0
 800eecc:	2800      	cmp	r0, #0
 800eece:	f43f af20 	beq.w	800ed12 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800eed2:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800eed4:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800eed6:	4313      	orrs	r3, r2
 800eed8:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800eeda:	f7ff fb6b 	bl	800e5b4 <HAL_SD_ErrorCallback>
 800eede:	e718      	b.n	800ed12 <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
 800eee0:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800eee2:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800eee4:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800eee6:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800eeea:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800eeec:	f7ff fb62 	bl	800e5b4 <HAL_SD_ErrorCallback>
 800eef0:	e71e      	b.n	800ed30 <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800eef2:	06ab      	lsls	r3, r5, #26
 800eef4:	d513      	bpl.n	800ef1e <HAL_SD_IRQHandler+0x25a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800eef6:	f7ff fee1 	bl	800ecbc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800eefa:	e719      	b.n	800ed30 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800eefc:	6820      	ldr	r0, [r4, #0]
 800eefe:	f001 f9e1 	bl	80102c4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800ef02:	4603      	mov	r3, r0
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d082      	beq.n	800ee0e <HAL_SD_IRQHandler+0x14a>
          hsd->ErrorCode |= errorstate;
 800ef08:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800ef0a:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800ef0c:	4313      	orrs	r3, r2
 800ef0e:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800ef10:	f7ff fb50 	bl	800e5b4 <HAL_SD_ErrorCallback>
 800ef14:	e77b      	b.n	800ee0e <HAL_SD_IRQHandler+0x14a>
        HAL_SD_TxCpltCallback(hsd);
 800ef16:	4620      	mov	r0, r4
 800ef18:	f002 f8b0 	bl	801107c <HAL_SD_TxCpltCallback>
 800ef1c:	e77f      	b.n	800ee1e <HAL_SD_IRQHandler+0x15a>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ef1e:	f7ff fec9 	bl	800ecb4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ef22:	e705      	b.n	800ed30 <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ef24:	f7ff fec8 	bl	800ecb8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800ef28:	e702      	b.n	800ed30 <HAL_SD_IRQHandler+0x6c>
 800ef2a:	bf00      	nop
 800ef2c:	ffff3ec5 	.word	0xffff3ec5
 800ef30:	18000f3a 	.word	0x18000f3a

0800ef34 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ef34:	b318      	cbz	r0, 800ef7e <HAL_SDRAM_Init+0x4a>
{
 800ef36:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ef38:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800ef3c:	4604      	mov	r4, r0
 800ef3e:	460d      	mov	r5, r1
 800ef40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ef44:	b1b3      	cbz	r3, 800ef74 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ef46:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ef48:	2302      	movs	r3, #2
 800ef4a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ef4e:	f851 0b04 	ldr.w	r0, [r1], #4
 800ef52:	f000 fd53 	bl	800f9fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ef56:	6862      	ldr	r2, [r4, #4]
 800ef58:	4629      	mov	r1, r5
 800ef5a:	6820      	ldr	r0, [r4, #0]
 800ef5c:	f000 fd8c 	bl	800fa78 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ef60:	4a08      	ldr	r2, [pc, #32]	; (800ef84 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ef62:	2101      	movs	r1, #1

  return HAL_OK;
 800ef64:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800ef66:	6813      	ldr	r3, [r2, #0]
 800ef68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ef6c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ef6e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800ef72:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800ef74:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800ef78:	f7f6 f992 	bl	80052a0 <HAL_SDRAM_MspInit>
 800ef7c:	e7e3      	b.n	800ef46 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800ef7e:	2001      	movs	r0, #1
}
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop
 800ef84:	52004000 	.word	0x52004000

0800ef88 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ef88:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ef8a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800ef8e:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ef90:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ef92:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800ef94:	d004      	beq.n	800efa0 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ef96:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 800ef9a:	2e01      	cmp	r6, #1
 800ef9c:	d001      	beq.n	800efa2 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800ef9e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800efa0:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800efa2:	2302      	movs	r3, #2
 800efa4:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800efa6:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800efa8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800efac:	f000 fdb2 	bl	800fb14 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800efb0:	682b      	ldr	r3, [r5, #0]
 800efb2:	2b02      	cmp	r3, #2
 800efb4:	d003      	beq.n	800efbe <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800efb6:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800efb8:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 800efbc:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800efbe:	2305      	movs	r3, #5
  return HAL_OK;
 800efc0:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800efc2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800efc6:	bd70      	pop	{r4, r5, r6, pc}

0800efc8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800efc8:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800efca:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800efce:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	b2d8      	uxtb	r0, r3
 800efd4:	d005      	beq.n	800efe2 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800efd6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800efda:	2b01      	cmp	r3, #1
 800efdc:	b2dd      	uxtb	r5, r3
 800efde:	d001      	beq.n	800efe4 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800efe0:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800efe2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800efe4:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800efe6:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800efe8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800efec:	f000 fdaa 	bl	800fb44 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800eff0:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800eff2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800eff6:	bd38      	pop	{r3, r4, r5, pc}

0800eff8 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800eff8:	6802      	ldr	r2, [r0, #0]
{
 800effa:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800effc:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800effe:	6991      	ldr	r1, [r2, #24]
 800f000:	f041 0108 	orr.w	r1, r1, #8
 800f004:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f006:	6801      	ldr	r1, [r0, #0]
 800f008:	698a      	ldr	r2, [r1, #24]
 800f00a:	f042 0210 	orr.w	r2, r2, #16
 800f00e:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f010:	6801      	ldr	r1, [r0, #0]
 800f012:	680a      	ldr	r2, [r1, #0]
 800f014:	f022 0201 	bic.w	r2, r2, #1
 800f018:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f01a:	6801      	ldr	r1, [r0, #0]
 800f01c:	4a27      	ldr	r2, [pc, #156]	; (800f0bc <SPI_CloseTransfer+0xc4>)
 800f01e:	690c      	ldr	r4, [r1, #16]
 800f020:	4022      	ands	r2, r4
 800f022:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f024:	6801      	ldr	r1, [r0, #0]
 800f026:	688a      	ldr	r2, [r1, #8]
 800f028:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f02c:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f02e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800f032:	2a04      	cmp	r2, #4
 800f034:	d001      	beq.n	800f03a <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f036:	069c      	lsls	r4, r3, #26
 800f038:	d433      	bmi.n	800f0a2 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f03a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800f03e:	2a03      	cmp	r2, #3
 800f040:	d001      	beq.n	800f046 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f042:	0659      	lsls	r1, r3, #25
 800f044:	d421      	bmi.n	800f08a <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f046:	059a      	lsls	r2, r3, #22
 800f048:	d50a      	bpl.n	800f060 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f04a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f04e:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f050:	f042 0201 	orr.w	r2, r2, #1
 800f054:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f058:	698a      	ldr	r2, [r1, #24]
 800f05a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f05e:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f060:	05db      	lsls	r3, r3, #23
 800f062:	d50a      	bpl.n	800f07a <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f064:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f068:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f06a:	f043 0308 	orr.w	r3, r3, #8
 800f06e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f072:	6993      	ldr	r3, [r2, #24]
 800f074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f078:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f07a:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800f07c:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800f080:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f084:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800f088:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f08a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f08e:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f090:	f042 0204 	orr.w	r2, r2, #4
 800f094:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f098:	698a      	ldr	r2, [r1, #24]
 800f09a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f09e:	618a      	str	r2, [r1, #24]
 800f0a0:	e7d1      	b.n	800f046 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f0a2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f0a6:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f0a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f0ac:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f0b0:	698a      	ldr	r2, [r1, #24]
 800f0b2:	f042 0220 	orr.w	r2, r2, #32
 800f0b6:	618a      	str	r2, [r1, #24]
 800f0b8:	e7bf      	b.n	800f03a <SPI_CloseTransfer+0x42>
 800f0ba:	bf00      	nop
 800f0bc:	fffffc90 	.word	0xfffffc90

0800f0c0 <HAL_SPI_Init>:
  if (hspi == NULL)
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	f000 80be 	beq.w	800f242 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f0c6:	4a62      	ldr	r2, [pc, #392]	; (800f250 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f0c8:	2100      	movs	r1, #0
{
 800f0ca:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f0cc:	6803      	ldr	r3, [r0, #0]
 800f0ce:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f0d0:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d015      	beq.n	800f102 <HAL_SPI_Init+0x42>
 800f0d6:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d011      	beq.n	800f102 <HAL_SPI_Init+0x42>
 800f0de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	68c2      	ldr	r2, [r0, #12]
 800f0e6:	f000 80a5 	beq.w	800f234 <HAL_SPI_Init+0x174>
 800f0ea:	2a0f      	cmp	r2, #15
 800f0ec:	d807      	bhi.n	800f0fe <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f0ee:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f0f0:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f0f2:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800f0f4:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800f0f6:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f0fa:	2a08      	cmp	r2, #8
 800f0fc:	d914      	bls.n	800f128 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 800f0fe:	2001      	movs	r0, #1
}
 800f100:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800f102:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f104:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800f106:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f108:	4851      	ldr	r0, [pc, #324]	; (800f250 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f10a:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800f10c:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800f10e:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f112:	4950      	ldr	r1, [pc, #320]	; (800f254 <HAL_SPI_Init+0x194>)
 800f114:	428b      	cmp	r3, r1
 800f116:	bf18      	it	ne
 800f118:	4283      	cmpne	r3, r0
 800f11a:	d003      	beq.n	800f124 <HAL_SPI_Init+0x64>
 800f11c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f120:	428b      	cmp	r3, r1
 800f122:	d101      	bne.n	800f128 <HAL_SPI_Init+0x68>
 800f124:	2a10      	cmp	r2, #16
 800f126:	d8ea      	bhi.n	800f0fe <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800f128:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800f12c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800f130:	2a00      	cmp	r2, #0
 800f132:	d078      	beq.n	800f226 <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 800f134:	2202      	movs	r2, #2
 800f136:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	f022 0201 	bic.w	r2, r2, #1
 800f140:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f142:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f144:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f146:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800f14a:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f14c:	689a      	ldr	r2, [r3, #8]
 800f14e:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f152:	d058      	beq.n	800f206 <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f154:	0249      	lsls	r1, r1, #9
 800f156:	d502      	bpl.n	800f15e <HAL_SPI_Init+0x9e>
 800f158:	68e1      	ldr	r1, [r4, #12]
 800f15a:	2906      	cmp	r1, #6
 800f15c:	d84c      	bhi.n	800f1f8 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f15e:	6819      	ldr	r1, [r3, #0]
 800f160:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800f164:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f166:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800f168:	69e3      	ldr	r3, [r4, #28]
 800f16a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800f16c:	432b      	orrs	r3, r5
 800f16e:	6821      	ldr	r1, [r4, #0]
 800f170:	4303      	orrs	r3, r0
 800f172:	68e0      	ldr	r0, [r4, #12]
 800f174:	4303      	orrs	r3, r0
 800f176:	4313      	orrs	r3, r2
 800f178:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f17a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f17c:	69a0      	ldr	r0, [r4, #24]
 800f17e:	6822      	ldr	r2, [r4, #0]
 800f180:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 800f184:	432b      	orrs	r3, r5
 800f186:	430b      	orrs	r3, r1
 800f188:	6921      	ldr	r1, [r4, #16]
 800f18a:	4303      	orrs	r3, r0
 800f18c:	6960      	ldr	r0, [r4, #20]
 800f18e:	430b      	orrs	r3, r1
 800f190:	6a21      	ldr	r1, [r4, #32]
 800f192:	4303      	orrs	r3, r0
 800f194:	6860      	ldr	r0, [r4, #4]
 800f196:	430b      	orrs	r3, r1
 800f198:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f19a:	4303      	orrs	r3, r0
 800f19c:	68a0      	ldr	r0, [r4, #8]
 800f19e:	430b      	orrs	r3, r1
 800f1a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f1a2:	4303      	orrs	r3, r0
 800f1a4:	430b      	orrs	r3, r1
 800f1a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f1a8:	430b      	orrs	r3, r1
 800f1aa:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f1ac:	6863      	ldr	r3, [r4, #4]
 800f1ae:	b96b      	cbnz	r3, 800f1cc <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f1b0:	6822      	ldr	r2, [r4, #0]
 800f1b2:	6893      	ldr	r3, [r2, #8]
 800f1b4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800f1b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f1bc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f1be:	6822      	ldr	r2, [r4, #0]
 800f1c0:	6893      	ldr	r3, [r2, #8]
 800f1c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f1c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f1ca:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f1cc:	6822      	ldr	r2, [r4, #0]
 800f1ce:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f1d0:	f023 0301 	bic.w	r3, r3, #1
 800f1d4:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f1d6:	6863      	ldr	r3, [r4, #4]
 800f1d8:	025b      	lsls	r3, r3, #9
 800f1da:	d506      	bpl.n	800f1ea <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f1dc:	6822      	ldr	r2, [r4, #0]
 800f1de:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f1e0:	68d3      	ldr	r3, [r2, #12]
 800f1e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f1e6:	430b      	orrs	r3, r1
 800f1e8:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f1ea:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800f1ec:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f1ee:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f1f2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800f1f6:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f1f8:	6819      	ldr	r1, [r3, #0]
 800f1fa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f1fc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800f200:	4301      	orrs	r1, r0
 800f202:	6019      	str	r1, [r3, #0]
 800f204:	e7af      	b.n	800f166 <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f206:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800f20a:	d01c      	beq.n	800f246 <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f20c:	2900      	cmp	r1, #0
 800f20e:	d1a1      	bne.n	800f154 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f210:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f212:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800f216:	d1a2      	bne.n	800f15e <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f218:	6819      	ldr	r1, [r3, #0]
 800f21a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800f21e:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f220:	e9d4 3100 	ldrd	r3, r1, [r4]
 800f224:	e796      	b.n	800f154 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800f226:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800f228:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800f22c:	f7f9 fa90 	bl	8008750 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800f230:	6823      	ldr	r3, [r4, #0]
 800f232:	e77f      	b.n	800f134 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f234:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800f236:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f238:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800f23a:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800f23c:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f240:	e770      	b.n	800f124 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 800f242:	2001      	movs	r0, #1
}
 800f244:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f246:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f248:	2900      	cmp	r1, #0
 800f24a:	d0e5      	beq.n	800f218 <HAL_SPI_Init+0x158>
 800f24c:	e784      	b.n	800f158 <HAL_SPI_Init+0x98>
 800f24e:	bf00      	nop
 800f250:	40013000 	.word	0x40013000
 800f254:	40003800 	.word	0x40003800

0800f258 <HAL_SPI_Receive_DMA>:
{
 800f258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800f25a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800f25e:	2b01      	cmp	r3, #1
 800f260:	f000 80a9 	beq.w	800f3b6 <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800f264:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800f268:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800f26a:	2201      	movs	r2, #1
 800f26c:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800f26e:	b2de      	uxtb	r6, r3
 800f270:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800f272:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800f276:	f040 8093 	bne.w	800f3a0 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 800f27a:	2900      	cmp	r1, #0
 800f27c:	f000 808b 	beq.w	800f396 <HAL_SPI_Receive_DMA+0x13e>
 800f280:	fab5 f385 	clz	r3, r5
 800f284:	095b      	lsrs	r3, r3, #5
 800f286:	2d00      	cmp	r5, #0
 800f288:	f000 8085 	beq.w	800f396 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f28c:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f28e:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f290:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f292:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800f296:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f29a:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800f29e:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f2a0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f2a4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800f2a8:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800f2ac:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800f2b0:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f2b4:	d07a      	beq.n	800f3ac <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800f2b6:	68d3      	ldr	r3, [r2, #12]
 800f2b8:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800f2bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f2c0:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800f2c2:	68e3      	ldr	r3, [r4, #12]
 800f2c4:	2b0f      	cmp	r3, #15
 800f2c6:	d861      	bhi.n	800f38c <HAL_SPI_Receive_DMA+0x134>
 800f2c8:	2b07      	cmp	r3, #7
 800f2ca:	f200 8092 	bhi.w	800f3f2 <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800f2ce:	6822      	ldr	r2, [r4, #0]
 800f2d0:	6893      	ldr	r3, [r2, #8]
 800f2d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f2d6:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f2d8:	68e3      	ldr	r3, [r4, #12]
 800f2da:	2b07      	cmp	r3, #7
 800f2dc:	d86e      	bhi.n	800f3bc <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f2de:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f2e0:	699a      	ldr	r2, [r3, #24]
 800f2e2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f2e6:	d107      	bne.n	800f2f8 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800f2e8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f2ec:	b292      	uxth	r2, r2
 800f2ee:	3201      	adds	r2, #1
 800f2f0:	0852      	lsrs	r2, r2, #1
 800f2f2:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f2f6:	699a      	ldr	r2, [r3, #24]
 800f2f8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f2fc:	d106      	bne.n	800f30c <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800f2fe:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f302:	b292      	uxth	r2, r2
 800f304:	3203      	adds	r2, #3
 800f306:	0892      	lsrs	r2, r2, #2
 800f308:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800f30c:	4a3e      	ldr	r2, [pc, #248]	; (800f408 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800f30e:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800f310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800f312:	4a3e      	ldr	r2, [pc, #248]	; (800f40c <HAL_SPI_Receive_DMA+0x1b4>)
 800f314:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f316:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800f318:	4a3d      	ldr	r2, [pc, #244]	; (800f410 <HAL_SPI_Receive_DMA+0x1b8>)
 800f31a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f31c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800f31e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f320:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800f322:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800f326:	6821      	ldr	r1, [r4, #0]
 800f328:	b29b      	uxth	r3, r3
 800f32a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f32c:	3130      	adds	r1, #48	; 0x30
 800f32e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f330:	f7fa f904 	bl	800953c <HAL_DMA_Start_IT>
 800f334:	2800      	cmp	r0, #0
 800f336:	d150      	bne.n	800f3da <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f338:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f33a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f33c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f33e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f344:	4b33      	ldr	r3, [pc, #204]	; (800f414 <HAL_SPI_Receive_DMA+0x1bc>)
 800f346:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f34a:	bf18      	it	ne
 800f34c:	432b      	orrne	r3, r5
 800f34e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800f350:	6822      	ldr	r2, [r4, #0]
 800f352:	6893      	ldr	r3, [r2, #8]
 800f354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f358:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800f35a:	6822      	ldr	r2, [r4, #0]
 800f35c:	6913      	ldr	r3, [r2, #16]
 800f35e:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800f362:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800f364:	6822      	ldr	r2, [r4, #0]
 800f366:	6813      	ldr	r3, [r2, #0]
 800f368:	f043 0301 	orr.w	r3, r3, #1
 800f36c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f36e:	6863      	ldr	r3, [r4, #4]
 800f370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f374:	d104      	bne.n	800f380 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f376:	6822      	ldr	r2, [r4, #0]
 800f378:	6813      	ldr	r3, [r2, #0]
 800f37a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f37e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800f380:	2300      	movs	r3, #0
  return errorcode;
 800f382:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800f384:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800f388:	4630      	mov	r0, r6
 800f38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800f38c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f38e:	699b      	ldr	r3, [r3, #24]
 800f390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f394:	d09b      	beq.n	800f2ce <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800f396:	2300      	movs	r3, #0
 800f398:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800f39c:	4630      	mov	r0, r6
 800f39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800f3a0:	2300      	movs	r3, #0
    return errorcode;
 800f3a2:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800f3a4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 800f3ac:	6813      	ldr	r3, [r2, #0]
 800f3ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3b2:	6013      	str	r3, [r2, #0]
 800f3b4:	e785      	b.n	800f2c2 <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800f3b6:	2602      	movs	r6, #2
}
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800f3bc:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f3be:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800f3c0:	d8a4      	bhi.n	800f30c <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f3c2:	699a      	ldr	r2, [r3, #24]
 800f3c4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f3c8:	d1a0      	bne.n	800f30c <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800f3ca:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f3ce:	b292      	uxth	r2, r2
 800f3d0:	3201      	adds	r2, #1
 800f3d2:	0852      	lsrs	r2, r2, #1
 800f3d4:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800f3d8:	e798      	b.n	800f30c <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f3da:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f3de:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800f3e0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f3e4:	f043 0310 	orr.w	r3, r3, #16
 800f3e8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f3ec:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800f3f0:	e7d4      	b.n	800f39c <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800f3f2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f3f4:	699b      	ldr	r3, [r3, #24]
 800f3f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f3fa:	f43f af68 	beq.w	800f2ce <HAL_SPI_Receive_DMA+0x76>
 800f3fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f402:	d1c8      	bne.n	800f396 <HAL_SPI_Receive_DMA+0x13e>
 800f404:	e763      	b.n	800f2ce <HAL_SPI_Receive_DMA+0x76>
 800f406:	bf00      	nop
 800f408:	0800f6a9 	.word	0x0800f6a9
 800f40c:	0800f659 	.word	0x0800f659
 800f410:	0800f6c5 	.word	0x0800f6c5
 800f414:	ffff0000 	.word	0xffff0000

0800f418 <HAL_SPI_TransmitReceive_DMA>:
{
 800f418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f41c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800f41e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800f422:	2b01      	cmp	r3, #1
 800f424:	f000 809a 	beq.w	800f55c <HAL_SPI_TransmitReceive_DMA+0x144>
 800f428:	2301      	movs	r3, #1
 800f42a:	4604      	mov	r4, r0
 800f42c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800f430:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800f434:	2b01      	cmp	r3, #1
 800f436:	b2de      	uxtb	r6, r3
 800f438:	d158      	bne.n	800f4ec <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f43a:	2d00      	cmp	r5, #0
 800f43c:	bf18      	it	ne
 800f43e:	2a00      	cmpne	r2, #0
 800f440:	d04e      	beq.n	800f4e0 <HAL_SPI_TransmitReceive_DMA+0xc8>
 800f442:	fab1 f381 	clz	r3, r1
 800f446:	095b      	lsrs	r3, r3, #5
 800f448:	2900      	cmp	r1, #0
 800f44a:	d049      	beq.n	800f4e0 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f44c:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800f44e:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f450:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
 800f452:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800f454:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
 800f458:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f45c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
 800f460:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
 800f464:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
 800f468:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f46c:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
 800f470:	68d3      	ldr	r3, [r2, #12]
 800f472:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800f476:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f478:	6802      	ldr	r2, [r0, #0]
 800f47a:	6893      	ldr	r3, [r2, #8]
 800f47c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f480:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800f482:	68c3      	ldr	r3, [r0, #12]
 800f484:	2b0f      	cmp	r3, #15
 800f486:	d938      	bls.n	800f4fa <HAL_SPI_TransmitReceive_DMA+0xe2>
 800f488:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800f48a:	699a      	ldr	r2, [r3, #24]
 800f48c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f490:	d126      	bne.n	800f4e0 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800f492:	4a6c      	ldr	r2, [pc, #432]	; (800f644 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800f494:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800f498:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800f650 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800f49c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800f49e:	4a6a      	ldr	r2, [pc, #424]	; (800f648 <HAL_SPI_TransmitReceive_DMA+0x230>)
 800f4a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f4a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800f4a4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f4a6:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800f4aa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f4ac:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800f4b0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800f4b4:	6821      	ldr	r1, [r4, #0]
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f4ba:	3130      	adds	r1, #48	; 0x30
 800f4bc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f4be:	f7fa f83d 	bl	800953c <HAL_DMA_Start_IT>
 800f4c2:	4607      	mov	r7, r0
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	d04d      	beq.n	800f564 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f4c8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f4cc:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800f4ce:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f4d2:	f043 0310 	orr.w	r3, r3, #16
 800f4d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f4da:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800f4de:	e002      	b.n	800f4e6 <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800f4e6:	4630      	mov	r0, r6
 800f4e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 800f4ec:	2300      	movs	r3, #0
    return errorcode;
 800f4ee:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800f4f0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800f4fa:	2b07      	cmp	r3, #7
 800f4fc:	d87f      	bhi.n	800f5fe <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f4fe:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800f500:	6993      	ldr	r3, [r2, #24]
 800f502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f506:	d107      	bne.n	800f518 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800f508:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	3301      	adds	r3, #1
 800f510:	085b      	lsrs	r3, r3, #1
 800f512:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f516:	6993      	ldr	r3, [r2, #24]
 800f518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f51c:	d106      	bne.n	800f52c <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800f51e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800f522:	b29b      	uxth	r3, r3
 800f524:	3303      	adds	r3, #3
 800f526:	089b      	lsrs	r3, r3, #2
 800f528:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f52c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f52e:	699a      	ldr	r2, [r3, #24]
 800f530:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f534:	d107      	bne.n	800f546 <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800f536:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f53a:	b292      	uxth	r2, r2
 800f53c:	3201      	adds	r2, #1
 800f53e:	0852      	lsrs	r2, r2, #1
 800f540:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f544:	699a      	ldr	r2, [r3, #24]
 800f546:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f54a:	d1a2      	bne.n	800f492 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800f54c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f550:	b292      	uxth	r2, r2
 800f552:	3203      	adds	r2, #3
 800f554:	0892      	lsrs	r2, r2, #2
 800f556:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800f55a:	e79a      	b.n	800f492 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
 800f55c:	2602      	movs	r6, #2
}
 800f55e:	4630      	mov	r0, r6
 800f560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800f564:	6822      	ldr	r2, [r4, #0]
 800f566:	6893      	ldr	r3, [r2, #8]
 800f568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f56c:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800f56e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f570:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800f572:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f574:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800f576:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f578:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800f57a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f57c:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
 800f580:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800f584:	6822      	ldr	r2, [r4, #0]
 800f586:	b29b      	uxth	r3, r3
 800f588:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f58a:	3220      	adds	r2, #32
 800f58c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f58e:	f7f9 ffd5 	bl	800953c <HAL_DMA_Start_IT>
 800f592:	bb40      	cbnz	r0, 800f5e6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800f594:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f596:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800f598:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f59a:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800f59c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f5a0:	4b2a      	ldr	r3, [pc, #168]	; (800f64c <HAL_SPI_TransmitReceive_DMA+0x234>)
 800f5a2:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f5a6:	bf18      	it	ne
 800f5a8:	432b      	orrne	r3, r5
 800f5aa:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800f5ac:	6822      	ldr	r2, [r4, #0]
 800f5ae:	6893      	ldr	r3, [r2, #8]
 800f5b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5b4:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800f5b6:	6822      	ldr	r2, [r4, #0]
 800f5b8:	6913      	ldr	r3, [r2, #16]
 800f5ba:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800f5be:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800f5c0:	6822      	ldr	r2, [r4, #0]
 800f5c2:	6813      	ldr	r3, [r2, #0]
 800f5c4:	f043 0301 	orr.w	r3, r3, #1
 800f5c8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f5ca:	6863      	ldr	r3, [r4, #4]
 800f5cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f5d0:	d104      	bne.n	800f5dc <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f5d2:	6822      	ldr	r2, [r4, #0]
 800f5d4:	6813      	ldr	r3, [r2, #0]
 800f5d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f5da:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800f5dc:	2300      	movs	r3, #0
  return errorcode;
 800f5de:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800f5e0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800f5e4:	e77f      	b.n	800f4e6 <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f5e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f5ea:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800f5ec:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f5f0:	f043 0310 	orr.w	r3, r3, #16
 800f5f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f5f8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800f5fc:	e773      	b.n	800f4e6 <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800f5fe:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800f600:	699a      	ldr	r2, [r3, #24]
 800f602:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f606:	d003      	beq.n	800f610 <HAL_SPI_TransmitReceive_DMA+0x1f8>
 800f608:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f60c:	f47f af68 	bne.w	800f4e0 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f610:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800f612:	6989      	ldr	r1, [r1, #24]
 800f614:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800f618:	d107      	bne.n	800f62a <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800f61a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800f61e:	b292      	uxth	r2, r2
 800f620:	3201      	adds	r2, #1
 800f622:	0852      	lsrs	r2, r2, #1
 800f624:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f628:	699a      	ldr	r2, [r3, #24]
 800f62a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f62e:	f47f af30 	bne.w	800f492 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800f632:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f636:	b292      	uxth	r2, r2
 800f638:	3201      	adds	r2, #1
 800f63a:	0852      	lsrs	r2, r2, #1
 800f63c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800f640:	e727      	b.n	800f492 <HAL_SPI_TransmitReceive_DMA+0x7a>
 800f642:	bf00      	nop
 800f644:	0800f6b5 	.word	0x0800f6b5
 800f648:	0800f681 	.word	0x0800f681
 800f64c:	ffff0000 	.word	0xffff0000
 800f650:	0800f6c5 	.word	0x0800f6c5

0800f654 <HAL_SPI_TxCpltCallback>:
 800f654:	4770      	bx	lr
 800f656:	bf00      	nop

0800f658 <SPI_DMAReceiveCplt>:
{
 800f658:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f65a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800f65c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800f660:	2b07      	cmp	r3, #7
 800f662:	d009      	beq.n	800f678 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f664:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800f666:	69db      	ldr	r3, [r3, #28]
 800f668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f66c:	d005      	beq.n	800f67a <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800f66e:	6802      	ldr	r2, [r0, #0]
 800f670:	6913      	ldr	r3, [r2, #16]
 800f672:	f043 0308 	orr.w	r3, r3, #8
 800f676:	6113      	str	r3, [r2, #16]
}
 800f678:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800f67a:	f7f5 fa77 	bl	8004b6c <HAL_SPI_RxCpltCallback>
}
 800f67e:	bd08      	pop	{r3, pc}

0800f680 <SPI_DMATransmitReceiveCplt>:
{
 800f680:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f682:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800f684:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800f688:	2b07      	cmp	r3, #7
 800f68a:	d009      	beq.n	800f6a0 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800f68c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800f68e:	69db      	ldr	r3, [r3, #28]
 800f690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f694:	d005      	beq.n	800f6a2 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800f696:	6802      	ldr	r2, [r0, #0]
 800f698:	6913      	ldr	r3, [r2, #16]
 800f69a:	f043 0308 	orr.w	r3, r3, #8
 800f69e:	6113      	str	r3, [r2, #16]
}
 800f6a0:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800f6a2:	f7f5 fcab 	bl	8004ffc <HAL_SPI_TxRxCpltCallback>
}
 800f6a6:	bd08      	pop	{r3, pc}

0800f6a8 <SPI_DMAHalfReceiveCplt>:
{
 800f6a8:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800f6aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f6ac:	f7f5 fb88 	bl	8004dc0 <HAL_SPI_RxHalfCpltCallback>
}
 800f6b0:	bd08      	pop	{r3, pc}
 800f6b2:	bf00      	nop

0800f6b4 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800f6b4:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800f6b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f6b8:	f7f5 fcbc 	bl	8005034 <HAL_SPI_TxRxHalfCpltCallback>
}
 800f6bc:	bd08      	pop	{r3, pc}
 800f6be:	bf00      	nop

0800f6c0 <HAL_SPI_ErrorCallback>:
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop

0800f6c4 <SPI_DMAError>:
{
 800f6c4:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f6c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800f6c8:	f7fa ff72 	bl	800a5b0 <HAL_DMA_GetError>
 800f6cc:	2802      	cmp	r0, #2
 800f6ce:	d100      	bne.n	800f6d2 <SPI_DMAError+0xe>
}
 800f6d0:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800f6d2:	6822      	ldr	r2, [r4, #0]
 800f6d4:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f6d6:	6991      	ldr	r1, [r2, #24]
 800f6d8:	f041 0108 	orr.w	r1, r1, #8
 800f6dc:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f6de:	6821      	ldr	r1, [r4, #0]
 800f6e0:	698a      	ldr	r2, [r1, #24]
 800f6e2:	f042 0210 	orr.w	r2, r2, #16
 800f6e6:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 800f6e8:	6821      	ldr	r1, [r4, #0]
 800f6ea:	680a      	ldr	r2, [r1, #0]
 800f6ec:	f022 0201 	bic.w	r2, r2, #1
 800f6f0:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f6f2:	6821      	ldr	r1, [r4, #0]
 800f6f4:	4a2c      	ldr	r2, [pc, #176]	; (800f7a8 <SPI_DMAError+0xe4>)
 800f6f6:	6908      	ldr	r0, [r1, #16]
 800f6f8:	4002      	ands	r2, r0
 800f6fa:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f6fc:	6821      	ldr	r1, [r4, #0]
 800f6fe:	688a      	ldr	r2, [r1, #8]
 800f700:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f704:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f706:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800f70a:	2a04      	cmp	r2, #4
 800f70c:	d001      	beq.n	800f712 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f70e:	0698      	lsls	r0, r3, #26
 800f710:	d43d      	bmi.n	800f78e <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f712:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800f716:	2a03      	cmp	r2, #3
 800f718:	d001      	beq.n	800f71e <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f71a:	0659      	lsls	r1, r3, #25
 800f71c:	d42b      	bmi.n	800f776 <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f71e:	059a      	lsls	r2, r3, #22
 800f720:	d50a      	bpl.n	800f738 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f722:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f726:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f728:	f042 0201 	orr.w	r2, r2, #1
 800f72c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f730:	698a      	ldr	r2, [r1, #24]
 800f732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f736:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f738:	05db      	lsls	r3, r3, #23
 800f73a:	d50a      	bpl.n	800f752 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f73c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f740:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f742:	f043 0308 	orr.w	r3, r3, #8
 800f746:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f74a:	6993      	ldr	r3, [r2, #24]
 800f74c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f750:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800f752:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800f754:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800f756:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800f758:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f75c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f760:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f764:	f043 0310 	orr.w	r3, r3, #16
 800f768:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f76c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800f770:	f7ff ffa6 	bl	800f6c0 <HAL_SPI_ErrorCallback>
}
 800f774:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f776:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f77a:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f77c:	f042 0204 	orr.w	r2, r2, #4
 800f780:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f784:	698a      	ldr	r2, [r1, #24]
 800f786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f78a:	618a      	str	r2, [r1, #24]
 800f78c:	e7c7      	b.n	800f71e <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f78e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f792:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f794:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f798:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f79c:	698a      	ldr	r2, [r1, #24]
 800f79e:	f042 0220 	orr.w	r2, r2, #32
 800f7a2:	618a      	str	r2, [r1, #24]
 800f7a4:	e7b5      	b.n	800f712 <SPI_DMAError+0x4e>
 800f7a6:	bf00      	nop
 800f7a8:	fffffc90 	.word	0xfffffc90

0800f7ac <SPI_DMAAbortOnError>:
{
 800f7ac:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 800f7ae:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f7b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800f7b8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800f7bc:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800f7c0:	f7ff ff7e 	bl	800f6c0 <HAL_SPI_ErrorCallback>
}
 800f7c4:	bd08      	pop	{r3, pc}
 800f7c6:	bf00      	nop

0800f7c8 <HAL_SPI_SuspendCallback>:
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop

0800f7cc <HAL_SPI_IRQHandler>:
{
 800f7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800f7d0:	6802      	ldr	r2, [r0, #0]
{
 800f7d2:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800f7d4:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800f7d6:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800f7d8:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 800f7da:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800f7de:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800f7e2:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800f7e4:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800f7e6:	d502      	bpl.n	800f7ee <HAL_SPI_IRQHandler+0x22>
 800f7e8:	0709      	lsls	r1, r1, #28
 800f7ea:	f100 80e1 	bmi.w	800f9b0 <HAL_SPI_IRQHandler+0x1e4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800f7ee:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800f7f2:	2b04      	cmp	r3, #4
 800f7f4:	d044      	beq.n	800f880 <HAL_SPI_IRQHandler+0xb4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800f7f6:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800f7fa:	2b01      	cmp	r3, #1
 800f7fc:	d04a      	beq.n	800f894 <HAL_SPI_IRQHandler+0xc8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800f7fe:	f005 0326 	and.w	r3, r5, #38	; 0x26
 800f802:	2b02      	cmp	r3, #2
 800f804:	f000 80ea 	beq.w	800f9dc <HAL_SPI_IRQHandler+0x210>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800f808:	072b      	lsls	r3, r5, #28
 800f80a:	d563      	bpl.n	800f8d4 <HAL_SPI_IRQHandler+0x108>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f80c:	6993      	ldr	r3, [r2, #24]
 800f80e:	f043 0308 	orr.w	r3, r3, #8
 800f812:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f814:	6821      	ldr	r1, [r4, #0]
 800f816:	698b      	ldr	r3, [r1, #24]
 800f818:	f043 0310 	orr.w	r3, r3, #16
 800f81c:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800f81e:	6821      	ldr	r1, [r4, #0]
 800f820:	698b      	ldr	r3, [r1, #24]
 800f822:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f826:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800f828:	6821      	ldr	r1, [r4, #0]
 800f82a:	690b      	ldr	r3, [r1, #16]
 800f82c:	f023 0308 	bic.w	r3, r3, #8
 800f830:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f832:	6823      	ldr	r3, [r4, #0]
 800f834:	689b      	ldr	r3, [r3, #8]
 800f836:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800f83a:	d135      	bne.n	800f8a8 <HAL_SPI_IRQHandler+0xdc>
      while (hspi->RxXferCount != 0UL)
 800f83c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800f840:	b29b      	uxth	r3, r3
 800f842:	2b00      	cmp	r3, #0
 800f844:	d030      	beq.n	800f8a8 <HAL_SPI_IRQHandler+0xdc>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f846:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f848:	e00f      	b.n	800f86a <HAL_SPI_IRQHandler+0x9e>
 800f84a:	6823      	ldr	r3, [r4, #0]
 800f84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f84e:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f850:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f852:	3104      	adds	r1, #4
        hspi->RxXferCount--;
 800f854:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f858:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800f85a:	3b01      	subs	r3, #1
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800f862:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800f866:	b29b      	uxth	r3, r3
 800f868:	b1f3      	cbz	r3, 800f8a8 <HAL_SPI_IRQHandler+0xdc>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f86a:	68e3      	ldr	r3, [r4, #12]
 800f86c:	2b0f      	cmp	r3, #15
 800f86e:	d8ec      	bhi.n	800f84a <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f870:	2b07      	cmp	r3, #7
 800f872:	f240 80ac 	bls.w	800f9ce <HAL_SPI_IRQHandler+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f876:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800f878:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f87a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f87c:	3102      	adds	r1, #2
 800f87e:	e7e9      	b.n	800f854 <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 800f880:	4620      	mov	r0, r4
 800f882:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800f884:	4798      	blx	r3
    hspi->RxISR(hspi);
 800f886:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f888:	4620      	mov	r0, r4
 800f88a:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800f88c:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800f890:	2b01      	cmp	r3, #1
 800f892:	d102      	bne.n	800f89a <HAL_SPI_IRQHandler+0xce>
    hspi->RxISR(hspi);
 800f894:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f896:	4620      	mov	r0, r4
 800f898:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800f89a:	f005 0526 	and.w	r5, r5, #38	; 0x26
 800f89e:	2d02      	cmp	r5, #2
 800f8a0:	f000 809c 	beq.w	800f9dc <HAL_SPI_IRQHandler+0x210>
}
 800f8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f7ff fba5 	bl	800eff8 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8b4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f040 8085 	bne.w	800f9c8 <HAL_SPI_IRQHandler+0x1fc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800f8be:	2e05      	cmp	r6, #5
 800f8c0:	f000 8091 	beq.w	800f9e6 <HAL_SPI_IRQHandler+0x21a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800f8c4:	2e04      	cmp	r6, #4
 800f8c6:	f000 8091 	beq.w	800f9ec <HAL_SPI_IRQHandler+0x220>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800f8ca:	2e03      	cmp	r6, #3
 800f8cc:	d1ea      	bne.n	800f8a4 <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_TxCpltCallback(hspi);
 800f8ce:	f7ff fec1 	bl	800f654 <HAL_SPI_TxCpltCallback>
 800f8d2:	e7e7      	b.n	800f8a4 <HAL_SPI_IRQHandler+0xd8>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800f8d4:	f415 7f58 	tst.w	r5, #864	; 0x360
 800f8d8:	d0e4      	beq.n	800f8a4 <HAL_SPI_IRQHandler+0xd8>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800f8da:	0668      	lsls	r0, r5, #25
 800f8dc:	d509      	bpl.n	800f8f2 <HAL_SPI_IRQHandler+0x126>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f8de:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f8e2:	f043 0304 	orr.w	r3, r3, #4
 800f8e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f8ea:	6993      	ldr	r3, [r2, #24]
 800f8ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8f0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800f8f2:	05a9      	lsls	r1, r5, #22
 800f8f4:	d50a      	bpl.n	800f90c <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f8f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f8fa:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f8fc:	f043 0301 	orr.w	r3, r3, #1
 800f900:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f904:	6993      	ldr	r3, [r2, #24]
 800f906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f90a:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800f90c:	05ea      	lsls	r2, r5, #23
 800f90e:	d50a      	bpl.n	800f926 <HAL_SPI_IRQHandler+0x15a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f910:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f914:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f916:	f043 0308 	orr.w	r3, r3, #8
 800f91a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f91e:	6993      	ldr	r3, [r2, #24]
 800f920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f924:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800f926:	06ab      	lsls	r3, r5, #26
 800f928:	d50a      	bpl.n	800f940 <HAL_SPI_IRQHandler+0x174>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f92a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f92e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f934:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f938:	6993      	ldr	r3, [r2, #24]
 800f93a:	f043 0320 	orr.w	r3, r3, #32
 800f93e:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f940:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f944:	2b00      	cmp	r3, #0
 800f946:	d0ad      	beq.n	800f8a4 <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE(hspi);
 800f948:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f94a:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800f94e:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f950:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800f954:	f023 0301 	bic.w	r3, r3, #1
 800f958:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800f95a:	6822      	ldr	r2, [r4, #0]
 800f95c:	4b25      	ldr	r3, [pc, #148]	; (800f9f4 <HAL_SPI_IRQHandler+0x228>)
 800f95e:	6911      	ldr	r1, [r2, #16]
 800f960:	ea03 0301 	and.w	r3, r3, r1
 800f964:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f966:	d12b      	bne.n	800f9c0 <HAL_SPI_IRQHandler+0x1f4>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f968:	6822      	ldr	r2, [r4, #0]
 800f96a:	6893      	ldr	r3, [r2, #8]
 800f96c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f970:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800f972:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f974:	b15b      	cbz	r3, 800f98e <HAL_SPI_IRQHandler+0x1c2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f976:	4a20      	ldr	r2, [pc, #128]	; (800f9f8 <HAL_SPI_IRQHandler+0x22c>)
 800f978:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f97a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f97c:	f7fa f8aa 	bl	8009ad4 <HAL_DMA_Abort_IT>
 800f980:	b128      	cbz	r0, 800f98e <HAL_SPI_IRQHandler+0x1c2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f982:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f98a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800f98e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f990:	2b00      	cmp	r3, #0
 800f992:	d087      	beq.n	800f8a4 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f994:	4a18      	ldr	r2, [pc, #96]	; (800f9f8 <HAL_SPI_IRQHandler+0x22c>)
 800f996:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f998:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f99a:	f7fa f89b 	bl	8009ad4 <HAL_DMA_Abort_IT>
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	d080      	beq.n	800f8a4 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f9a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f9a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800f9ae:	e779      	b.n	800f8a4 <HAL_SPI_IRQHandler+0xd8>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800f9b0:	6993      	ldr	r3, [r2, #24]
 800f9b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f9b6:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 800f9b8:	f7ff ff06 	bl	800f7c8 <HAL_SPI_SuspendCallback>
}
 800f9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800f9c0:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800f9c2:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800f9c4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800f9c8:	f7ff fe7a 	bl	800f6c0 <HAL_SPI_ErrorCallback>
 800f9cc:	e76a      	b.n	800f8a4 <HAL_SPI_IRQHandler+0xd8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f9d4:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f9d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f9d8:	3101      	adds	r1, #1
 800f9da:	e73b      	b.n	800f854 <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 800f9dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800f9de:	4620      	mov	r0, r4
}
 800f9e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800f9e4:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800f9e6:	f7f5 fb09 	bl	8004ffc <HAL_SPI_TxRxCpltCallback>
 800f9ea:	e75b      	b.n	800f8a4 <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_RxCpltCallback(hspi);
 800f9ec:	f7f5 f8be 	bl	8004b6c <HAL_SPI_RxCpltCallback>
 800f9f0:	e758      	b.n	800f8a4 <HAL_SPI_IRQHandler+0xd8>
 800f9f2:	bf00      	nop
 800f9f4:	fffffc94 	.word	0xfffffc94
 800f9f8:	0800f7ad 	.word	0x0800f7ad

0800f9fc <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f9fc:	680b      	ldr	r3, [r1, #0]
{
 800f9fe:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800fa00:	b9d3      	cbnz	r3, 800fa38 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fa02:	6804      	ldr	r4, [r0, #0]
 800fa04:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800fa08:	684a      	ldr	r2, [r1, #4]
 800fa0a:	4023      	ands	r3, r4
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800fa12:	4323      	orrs	r3, r4
 800fa14:	4313      	orrs	r3, r2
 800fa16:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800fa1a:	4323      	orrs	r3, r4
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800fa22:	4323      	orrs	r3, r4
 800fa24:	4313      	orrs	r3, r2
 800fa26:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800fa2a:	4323      	orrs	r3, r4
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800fa30:	2000      	movs	r0, #0
 800fa32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa36:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fa38:	6802      	ldr	r2, [r0, #0]
 800fa3a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800fa3e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800fa42:	4322      	orrs	r2, r4
 800fa44:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800fa46:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800fa48:	4b0a      	ldr	r3, [pc, #40]	; (800fa74 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fa4a:	4322      	orrs	r2, r4
 800fa4c:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800fa4e:	6842      	ldr	r2, [r0, #4]
 800fa50:	4013      	ands	r3, r2
 800fa52:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800fa56:	4323      	orrs	r3, r4
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800fa5e:	4323      	orrs	r3, r4
 800fa60:	4313      	orrs	r3, r2
 800fa62:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800fa66:	4323      	orrs	r3, r4
 800fa68:	4313      	orrs	r3, r2
 800fa6a:	6043      	str	r3, [r0, #4]
}
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa72:	4770      	bx	lr
 800fa74:	ffff8000 	.word	0xffff8000

0800fa78 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800fa78:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800fa7a:	bb0a      	cbnz	r2, 800fac0 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fa7c:	6883      	ldr	r3, [r0, #8]
 800fa7e:	e9d1 2400 	ldrd	r2, r4, [r1]
 800fa82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fa86:	3c01      	subs	r4, #1
 800fa88:	3a01      	subs	r2, #1
 800fa8a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800fa94:	3c01      	subs	r4, #1
 800fa96:	3a01      	subs	r2, #1
 800fa98:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800fa9c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800faa0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800faa4:	698a      	ldr	r2, [r1, #24]
 800faa6:	3d01      	subs	r5, #1
 800faa8:	1e61      	subs	r1, r4, #1
 800faaa:	3a01      	subs	r2, #1
 800faac:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800fab0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800fab4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fab8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800faba:	2000      	movs	r0, #0
 800fabc:	bc30      	pop	{r4, r5}
 800fabe:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fac0:	6885      	ldr	r5, [r0, #8]
 800fac2:	68ca      	ldr	r2, [r1, #12]
 800fac4:	4b12      	ldr	r3, [pc, #72]	; (800fb10 <FMC_SDRAM_Timing_Init+0x98>)
 800fac6:	1e54      	subs	r4, r2, #1
 800fac8:	694a      	ldr	r2, [r1, #20]
 800faca:	402b      	ands	r3, r5
 800facc:	3a01      	subs	r2, #1
 800face:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800fad2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800fad6:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800fad8:	68c3      	ldr	r3, [r0, #12]
 800fada:	688d      	ldr	r5, [r1, #8]
 800fadc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fae0:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800fae4:	e9d1 2400 	ldrd	r2, r4, [r1]
 800fae8:	3c01      	subs	r4, #1
 800faea:	3a01      	subs	r2, #1
 800faec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800faf0:	690c      	ldr	r4, [r1, #16]
 800faf2:	4313      	orrs	r3, r2
 800faf4:	698a      	ldr	r2, [r1, #24]
 800faf6:	1e61      	subs	r1, r4, #1
 800faf8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800fafc:	3a01      	subs	r2, #1
 800fafe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800fb02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fb06:	60c3      	str	r3, [r0, #12]
}
 800fb08:	2000      	movs	r0, #0
 800fb0a:	bc30      	pop	{r4, r5}
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	ff0f0fff 	.word	0xff0f0fff

0800fb14 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800fb14:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800fb16:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800fb1a:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800fb1c:	6900      	ldr	r0, [r0, #16]
 800fb1e:	4323      	orrs	r3, r4
 800fb20:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800fb24:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800fb28:	4c05      	ldr	r4, [pc, #20]	; (800fb40 <FMC_SDRAM_SendCommand+0x2c>)
 800fb2a:	3901      	subs	r1, #1
 800fb2c:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800fb2e:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800fb30:	4323      	orrs	r3, r4
 800fb32:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800fb36:	6113      	str	r3, [r2, #16]
}
 800fb38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	ffc00000 	.word	0xffc00000

0800fb44 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800fb44:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800fb46:	4b05      	ldr	r3, [pc, #20]	; (800fb5c <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800fb48:	2000      	movs	r0, #0
{
 800fb4a:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800fb4c:	6954      	ldr	r4, [r2, #20]
 800fb4e:	4023      	ands	r3, r4
 800fb50:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800fb54:	6151      	str	r1, [r2, #20]
}
 800fb56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb5a:	4770      	bx	lr
 800fb5c:	ffffc001 	.word	0xffffc001

0800fb60 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fb60:	b084      	sub	sp, #16
 800fb62:	b410      	push	{r4}
 800fb64:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800fb68:	4614      	mov	r4, r2
{
 800fb6a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800fb6e:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800fb70:	9904      	ldr	r1, [sp, #16]
{
 800fb72:	4602      	mov	r2, r0
             Init.BusWide             | \
 800fb74:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800fb76:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fb78:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800fb7a:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800fb7c:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800fb7e:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800fb80:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800fb82:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fb84:	4903      	ldr	r1, [pc, #12]	; (800fb94 <SDMMC_Init+0x34>)
 800fb86:	4021      	ands	r1, r4
 800fb88:	430b      	orrs	r3, r1
 800fb8a:	6053      	str	r3, [r2, #4]
}
 800fb8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb90:	b004      	add	sp, #16
 800fb92:	4770      	bx	lr
 800fb94:	ffc02c00 	.word	0xffc02c00

0800fb98 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fb98:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop

0800fba0 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800fba0:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800fba2:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800fba4:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800fba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800fbaa:	4770      	bx	lr

0800fbac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800fbac:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800fbae:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	f042 0203 	orr.w	r2, r2, #3
 800fbb6:	601a      	str	r2, [r3, #0]
}
 800fbb8:	4770      	bx	lr
 800fbba:	bf00      	nop

0800fbbc <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fbbc:	6800      	ldr	r0, [r0, #0]
}
 800fbbe:	f000 0003 	and.w	r0, r0, #3
 800fbc2:	4770      	bx	lr

0800fbc4 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fbc4:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800fbc6:	5840      	ldr	r0, [r0, r1]
}
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop

0800fbcc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800fbcc:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fbce:	680b      	ldr	r3, [r1, #0]
{
 800fbd0:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fbd2:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fbd4:	684b      	ldr	r3, [r1, #4]
 800fbd6:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800fbd8:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fbda:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fbdc:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800fbe0:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 800fbe2:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fbe4:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800fbe8:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800fbea:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800fbec:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fbee:	430b      	orrs	r3, r1
 800fbf0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800fbf2:	bc30      	pop	{r4, r5}
 800fbf4:	4770      	bx	lr
 800fbf6:	bf00      	nop

0800fbf8 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fbf8:	4a50      	ldr	r2, [pc, #320]	; (800fd3c <SDMMC_CmdBlockLength+0x144>)
{
 800fbfa:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fbfc:	4b50      	ldr	r3, [pc, #320]	; (800fd40 <SDMMC_CmdBlockLength+0x148>)
 800fbfe:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800fc00:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fc04:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fc08:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800fc0c:	484d      	ldr	r0, [pc, #308]	; (800fd44 <SDMMC_CmdBlockLength+0x14c>)
 800fc0e:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fc12:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fc14:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fc16:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fc1a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fc1c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fc20:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 800fc24:	1e53      	subs	r3, r2, #1
 800fc26:	b14a      	cbz	r2, 800fc3c <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800fc28:	4947      	ldr	r1, [pc, #284]	; (800fd48 <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
 800fc2a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800fc2e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fc30:	420a      	tst	r2, r1
 800fc32:	d001      	beq.n	800fc38 <SDMMC_CmdBlockLength+0x40>
 800fc34:	0492      	lsls	r2, r2, #18
 800fc36:	d504      	bpl.n	800fc42 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800fc38:	1c58      	adds	r0, r3, #1
 800fc3a:	d1f6      	bne.n	800fc2a <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800fc3c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800fc40:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fc42:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800fc46:	0758      	lsls	r0, r3, #29
 800fc48:	d445      	bmi.n	800fcd6 <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fc4a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800fc4e:	f010 0001 	ands.w	r0, r0, #1
 800fc52:	d137      	bne.n	800fcc4 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fc54:	4b3d      	ldr	r3, [pc, #244]	; (800fd4c <SDMMC_CmdBlockLength+0x154>)
 800fc56:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800fc5a:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	2b10      	cmp	r3, #16
 800fc62:	d136      	bne.n	800fcd2 <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
 800fc64:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fc68:	4839      	ldr	r0, [pc, #228]	; (800fd50 <SDMMC_CmdBlockLength+0x158>)
 800fc6a:	4018      	ands	r0, r3
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	d02f      	beq.n	800fcd0 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	db35      	blt.n	800fce0 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fc74:	0059      	lsls	r1, r3, #1
 800fc76:	d436      	bmi.n	800fce6 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fc78:	009a      	lsls	r2, r3, #2
 800fc7a:	d436      	bmi.n	800fcea <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fc7c:	00d9      	lsls	r1, r3, #3
 800fc7e:	d436      	bmi.n	800fcee <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fc80:	011a      	lsls	r2, r3, #4
 800fc82:	d437      	bmi.n	800fcf4 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fc84:	0159      	lsls	r1, r3, #5
 800fc86:	d438      	bmi.n	800fcfa <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fc88:	01da      	lsls	r2, r3, #7
 800fc8a:	d439      	bmi.n	800fd00 <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fc8c:	0219      	lsls	r1, r3, #8
 800fc8e:	d43a      	bmi.n	800fd06 <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fc90:	025a      	lsls	r2, r3, #9
 800fc92:	d43b      	bmi.n	800fd0c <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fc94:	0299      	lsls	r1, r3, #10
 800fc96:	d445      	bmi.n	800fd24 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fc98:	02da      	lsls	r2, r3, #11
 800fc9a:	d440      	bmi.n	800fd1e <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fc9c:	0359      	lsls	r1, r3, #13
 800fc9e:	d43b      	bmi.n	800fd18 <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fca0:	039a      	lsls	r2, r3, #14
 800fca2:	d436      	bmi.n	800fd12 <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fca4:	03d9      	lsls	r1, r3, #15
 800fca6:	d446      	bmi.n	800fd36 <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fca8:	041a      	lsls	r2, r3, #16
 800fcaa:	d441      	bmi.n	800fd30 <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fcac:	0459      	lsls	r1, r3, #17
 800fcae:	d43c      	bmi.n	800fd2a <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fcb0:	049a      	lsls	r2, r3, #18
 800fcb2:	d40b      	bmi.n	800fccc <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fcb4:	f013 0f08 	tst.w	r3, #8
 800fcb8:	bf14      	ite	ne
 800fcba:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800fcbe:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800fcc2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcca:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800fccc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800fcd0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcd2:	2001      	movs	r0, #1
 800fcd4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fcd6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fcd8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fcda:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fcde:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fce0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800fce4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fce6:	2040      	movs	r0, #64	; 0x40
 800fce8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fcea:	2080      	movs	r0, #128	; 0x80
 800fcec:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fcee:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fcf2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fcf4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fcf8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fcfa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800fcfe:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fd00:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fd04:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fd06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800fd0a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fd0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800fd10:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fd12:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800fd16:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fd18:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800fd1c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800fd1e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800fd22:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fd24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800fd28:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fd2a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800fd2e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fd30:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800fd34:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fd36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800fd3a:	4770      	bx	lr
 800fd3c:	200006e8 	.word	0x200006e8
 800fd40:	10624dd3 	.word	0x10624dd3
 800fd44:	fffee0c0 	.word	0xfffee0c0
 800fd48:	00200045 	.word	0x00200045
 800fd4c:	002000c5 	.word	0x002000c5
 800fd50:	fdffe008 	.word	0xfdffe008

0800fd54 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fd54:	4a50      	ldr	r2, [pc, #320]	; (800fe98 <SDMMC_CmdReadSingleBlock+0x144>)
{
 800fd56:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fd58:	4b50      	ldr	r3, [pc, #320]	; (800fe9c <SDMMC_CmdReadSingleBlock+0x148>)
 800fd5a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800fd5c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fd60:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fd64:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800fd68:	484d      	ldr	r0, [pc, #308]	; (800fea0 <SDMMC_CmdReadSingleBlock+0x14c>)
 800fd6a:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fd6e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fd70:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fd72:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fd76:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fd78:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fd7c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800fd80:	1e53      	subs	r3, r2, #1
 800fd82:	b14a      	cbz	r2, 800fd98 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800fd84:	4947      	ldr	r1, [pc, #284]	; (800fea4 <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800fd86:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800fd8a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fd8c:	420a      	tst	r2, r1
 800fd8e:	d001      	beq.n	800fd94 <SDMMC_CmdReadSingleBlock+0x40>
 800fd90:	0492      	lsls	r2, r2, #18
 800fd92:	d504      	bpl.n	800fd9e <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800fd94:	1c58      	adds	r0, r3, #1
 800fd96:	d1f6      	bne.n	800fd86 <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800fd98:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800fd9c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fd9e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800fda2:	0758      	lsls	r0, r3, #29
 800fda4:	d445      	bmi.n	800fe32 <SDMMC_CmdReadSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fda6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800fdaa:	f010 0001 	ands.w	r0, r0, #1
 800fdae:	d137      	bne.n	800fe20 <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fdb0:	4b3d      	ldr	r3, [pc, #244]	; (800fea8 <SDMMC_CmdReadSingleBlock+0x154>)
 800fdb2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800fdb6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fdba:	b2db      	uxtb	r3, r3
 800fdbc:	2b11      	cmp	r3, #17
 800fdbe:	d136      	bne.n	800fe2e <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800fdc0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fdc4:	4839      	ldr	r0, [pc, #228]	; (800feac <SDMMC_CmdReadSingleBlock+0x158>)
 800fdc6:	4018      	ands	r0, r3
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	d02f      	beq.n	800fe2c <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	db35      	blt.n	800fe3c <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fdd0:	0059      	lsls	r1, r3, #1
 800fdd2:	d436      	bmi.n	800fe42 <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fdd4:	009a      	lsls	r2, r3, #2
 800fdd6:	d436      	bmi.n	800fe46 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fdd8:	00d9      	lsls	r1, r3, #3
 800fdda:	d436      	bmi.n	800fe4a <SDMMC_CmdReadSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fddc:	011a      	lsls	r2, r3, #4
 800fdde:	d437      	bmi.n	800fe50 <SDMMC_CmdReadSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fde0:	0159      	lsls	r1, r3, #5
 800fde2:	d438      	bmi.n	800fe56 <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fde4:	01da      	lsls	r2, r3, #7
 800fde6:	d439      	bmi.n	800fe5c <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fde8:	0219      	lsls	r1, r3, #8
 800fdea:	d43a      	bmi.n	800fe62 <SDMMC_CmdReadSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fdec:	025a      	lsls	r2, r3, #9
 800fdee:	d43b      	bmi.n	800fe68 <SDMMC_CmdReadSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fdf0:	0299      	lsls	r1, r3, #10
 800fdf2:	d445      	bmi.n	800fe80 <SDMMC_CmdReadSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fdf4:	02da      	lsls	r2, r3, #11
 800fdf6:	d440      	bmi.n	800fe7a <SDMMC_CmdReadSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fdf8:	0359      	lsls	r1, r3, #13
 800fdfa:	d43b      	bmi.n	800fe74 <SDMMC_CmdReadSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fdfc:	039a      	lsls	r2, r3, #14
 800fdfe:	d436      	bmi.n	800fe6e <SDMMC_CmdReadSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fe00:	03d9      	lsls	r1, r3, #15
 800fe02:	d446      	bmi.n	800fe92 <SDMMC_CmdReadSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fe04:	041a      	lsls	r2, r3, #16
 800fe06:	d441      	bmi.n	800fe8c <SDMMC_CmdReadSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fe08:	0459      	lsls	r1, r3, #17
 800fe0a:	d43c      	bmi.n	800fe86 <SDMMC_CmdReadSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fe0c:	049a      	lsls	r2, r3, #18
 800fe0e:	d40b      	bmi.n	800fe28 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fe10:	f013 0f08 	tst.w	r3, #8
 800fe14:	bf14      	ite	ne
 800fe16:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800fe1a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800fe1e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fe20:	2301      	movs	r3, #1
 800fe22:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe26:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800fe28:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800fe2c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe2e:	2001      	movs	r0, #1
 800fe30:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fe32:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe34:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fe36:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe3a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fe3c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800fe40:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fe42:	2040      	movs	r0, #64	; 0x40
 800fe44:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fe46:	2080      	movs	r0, #128	; 0x80
 800fe48:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fe4a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800fe4e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fe50:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fe54:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fe56:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800fe5a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fe5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800fe60:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fe62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800fe66:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fe68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800fe6c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fe6e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800fe72:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fe74:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800fe78:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800fe7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800fe7e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fe80:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800fe84:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fe86:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800fe8a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fe8c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800fe90:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fe92:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800fe96:	4770      	bx	lr
 800fe98:	200006e8 	.word	0x200006e8
 800fe9c:	10624dd3 	.word	0x10624dd3
 800fea0:	fffee0c0 	.word	0xfffee0c0
 800fea4:	00200045 	.word	0x00200045
 800fea8:	002000c5 	.word	0x002000c5
 800feac:	fdffe008 	.word	0xfdffe008

0800feb0 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800feb0:	4a50      	ldr	r2, [pc, #320]	; (800fff4 <SDMMC_CmdReadMultiBlock+0x144>)
{
 800feb2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800feb4:	4b50      	ldr	r3, [pc, #320]	; (800fff8 <SDMMC_CmdReadMultiBlock+0x148>)
 800feb6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800feb8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800febc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fec0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800fec4:	484d      	ldr	r0, [pc, #308]	; (800fffc <SDMMC_CmdReadMultiBlock+0x14c>)
 800fec6:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800feca:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fecc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fece:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fed2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fed4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fed8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800fedc:	1e53      	subs	r3, r2, #1
 800fede:	b14a      	cbz	r2, 800fef4 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800fee0:	4947      	ldr	r1, [pc, #284]	; (8010000 <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800fee2:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800fee6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fee8:	420a      	tst	r2, r1
 800feea:	d001      	beq.n	800fef0 <SDMMC_CmdReadMultiBlock+0x40>
 800feec:	0492      	lsls	r2, r2, #18
 800feee:	d504      	bpl.n	800fefa <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800fef0:	1c58      	adds	r0, r3, #1
 800fef2:	d1f6      	bne.n	800fee2 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800fef4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800fef8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fefa:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800fefe:	0758      	lsls	r0, r3, #29
 800ff00:	d445      	bmi.n	800ff8e <SDMMC_CmdReadMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ff02:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800ff06:	f010 0001 	ands.w	r0, r0, #1
 800ff0a:	d137      	bne.n	800ff7c <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ff0c:	4b3d      	ldr	r3, [pc, #244]	; (8010004 <SDMMC_CmdReadMultiBlock+0x154>)
 800ff0e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ff12:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ff16:	b2db      	uxtb	r3, r3
 800ff18:	2b12      	cmp	r3, #18
 800ff1a:	d136      	bne.n	800ff8a <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800ff1c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ff20:	4839      	ldr	r0, [pc, #228]	; (8010008 <SDMMC_CmdReadMultiBlock+0x158>)
 800ff22:	4018      	ands	r0, r3
 800ff24:	2800      	cmp	r0, #0
 800ff26:	d02f      	beq.n	800ff88 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	db35      	blt.n	800ff98 <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ff2c:	0059      	lsls	r1, r3, #1
 800ff2e:	d436      	bmi.n	800ff9e <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ff30:	009a      	lsls	r2, r3, #2
 800ff32:	d436      	bmi.n	800ffa2 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ff34:	00d9      	lsls	r1, r3, #3
 800ff36:	d436      	bmi.n	800ffa6 <SDMMC_CmdReadMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ff38:	011a      	lsls	r2, r3, #4
 800ff3a:	d437      	bmi.n	800ffac <SDMMC_CmdReadMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ff3c:	0159      	lsls	r1, r3, #5
 800ff3e:	d438      	bmi.n	800ffb2 <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ff40:	01da      	lsls	r2, r3, #7
 800ff42:	d439      	bmi.n	800ffb8 <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ff44:	0219      	lsls	r1, r3, #8
 800ff46:	d43a      	bmi.n	800ffbe <SDMMC_CmdReadMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ff48:	025a      	lsls	r2, r3, #9
 800ff4a:	d43b      	bmi.n	800ffc4 <SDMMC_CmdReadMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ff4c:	0299      	lsls	r1, r3, #10
 800ff4e:	d445      	bmi.n	800ffdc <SDMMC_CmdReadMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ff50:	02da      	lsls	r2, r3, #11
 800ff52:	d440      	bmi.n	800ffd6 <SDMMC_CmdReadMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ff54:	0359      	lsls	r1, r3, #13
 800ff56:	d43b      	bmi.n	800ffd0 <SDMMC_CmdReadMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ff58:	039a      	lsls	r2, r3, #14
 800ff5a:	d436      	bmi.n	800ffca <SDMMC_CmdReadMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ff5c:	03d9      	lsls	r1, r3, #15
 800ff5e:	d446      	bmi.n	800ffee <SDMMC_CmdReadMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ff60:	041a      	lsls	r2, r3, #16
 800ff62:	d441      	bmi.n	800ffe8 <SDMMC_CmdReadMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ff64:	0459      	lsls	r1, r3, #17
 800ff66:	d43c      	bmi.n	800ffe2 <SDMMC_CmdReadMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ff68:	049a      	lsls	r2, r3, #18
 800ff6a:	d40b      	bmi.n	800ff84 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ff6c:	f013 0f08 	tst.w	r3, #8
 800ff70:	bf14      	ite	ne
 800ff72:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800ff76:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800ff7a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff82:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800ff84:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800ff88:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff8a:	2001      	movs	r0, #1
 800ff8c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff8e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff90:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff92:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff96:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ff98:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800ff9c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ff9e:	2040      	movs	r0, #64	; 0x40
 800ffa0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ffa2:	2080      	movs	r0, #128	; 0x80
 800ffa4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ffa6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ffaa:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ffac:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ffb0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ffb2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ffb6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ffb8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ffbc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ffbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ffc2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ffc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ffc8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ffca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ffce:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ffd0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ffd4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800ffd6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ffda:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ffdc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ffe0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ffe2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ffe6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ffe8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ffec:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ffee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800fff2:	4770      	bx	lr
 800fff4:	200006e8 	.word	0x200006e8
 800fff8:	10624dd3 	.word	0x10624dd3
 800fffc:	fffee0c0 	.word	0xfffee0c0
 8010000:	00200045 	.word	0x00200045
 8010004:	002000c5 	.word	0x002000c5
 8010008:	fdffe008 	.word	0xfdffe008

0801000c <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801000c:	4a50      	ldr	r2, [pc, #320]	; (8010150 <SDMMC_CmdWriteSingleBlock+0x144>)
{
 801000e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010010:	4b50      	ldr	r3, [pc, #320]	; (8010154 <SDMMC_CmdWriteSingleBlock+0x148>)
 8010012:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010014:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010018:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801001c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8010020:	484d      	ldr	r0, [pc, #308]	; (8010158 <SDMMC_CmdWriteSingleBlock+0x14c>)
 8010022:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010026:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010028:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801002a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801002e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010030:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010034:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8010038:	1e53      	subs	r3, r2, #1
 801003a:	b14a      	cbz	r2, 8010050 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801003c:	4947      	ldr	r1, [pc, #284]	; (801015c <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 801003e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8010042:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010044:	420a      	tst	r2, r1
 8010046:	d001      	beq.n	801004c <SDMMC_CmdWriteSingleBlock+0x40>
 8010048:	0492      	lsls	r2, r2, #18
 801004a:	d504      	bpl.n	8010056 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 801004c:	1c58      	adds	r0, r3, #1
 801004e:	d1f6      	bne.n	801003e <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8010050:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8010054:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010056:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 801005a:	0758      	lsls	r0, r3, #29
 801005c:	d445      	bmi.n	80100ea <SDMMC_CmdWriteSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801005e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8010062:	f010 0001 	ands.w	r0, r0, #1
 8010066:	d137      	bne.n	80100d8 <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010068:	4b3d      	ldr	r3, [pc, #244]	; (8010160 <SDMMC_CmdWriteSingleBlock+0x154>)
 801006a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801006e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010072:	b2db      	uxtb	r3, r3
 8010074:	2b18      	cmp	r3, #24
 8010076:	d136      	bne.n	80100e6 <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 8010078:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801007c:	4839      	ldr	r0, [pc, #228]	; (8010164 <SDMMC_CmdWriteSingleBlock+0x158>)
 801007e:	4018      	ands	r0, r3
 8010080:	2800      	cmp	r0, #0
 8010082:	d02f      	beq.n	80100e4 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010084:	2b00      	cmp	r3, #0
 8010086:	db35      	blt.n	80100f4 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010088:	0059      	lsls	r1, r3, #1
 801008a:	d436      	bmi.n	80100fa <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801008c:	009a      	lsls	r2, r3, #2
 801008e:	d436      	bmi.n	80100fe <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010090:	00d9      	lsls	r1, r3, #3
 8010092:	d436      	bmi.n	8010102 <SDMMC_CmdWriteSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010094:	011a      	lsls	r2, r3, #4
 8010096:	d437      	bmi.n	8010108 <SDMMC_CmdWriteSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010098:	0159      	lsls	r1, r3, #5
 801009a:	d438      	bmi.n	801010e <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801009c:	01da      	lsls	r2, r3, #7
 801009e:	d439      	bmi.n	8010114 <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80100a0:	0219      	lsls	r1, r3, #8
 80100a2:	d43a      	bmi.n	801011a <SDMMC_CmdWriteSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80100a4:	025a      	lsls	r2, r3, #9
 80100a6:	d43b      	bmi.n	8010120 <SDMMC_CmdWriteSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80100a8:	0299      	lsls	r1, r3, #10
 80100aa:	d445      	bmi.n	8010138 <SDMMC_CmdWriteSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80100ac:	02da      	lsls	r2, r3, #11
 80100ae:	d440      	bmi.n	8010132 <SDMMC_CmdWriteSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80100b0:	0359      	lsls	r1, r3, #13
 80100b2:	d43b      	bmi.n	801012c <SDMMC_CmdWriteSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80100b4:	039a      	lsls	r2, r3, #14
 80100b6:	d436      	bmi.n	8010126 <SDMMC_CmdWriteSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80100b8:	03d9      	lsls	r1, r3, #15
 80100ba:	d446      	bmi.n	801014a <SDMMC_CmdWriteSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80100bc:	041a      	lsls	r2, r3, #16
 80100be:	d441      	bmi.n	8010144 <SDMMC_CmdWriteSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80100c0:	0459      	lsls	r1, r3, #17
 80100c2:	d43c      	bmi.n	801013e <SDMMC_CmdWriteSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80100c4:	049a      	lsls	r2, r3, #18
 80100c6:	d40b      	bmi.n	80100e0 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80100c8:	f013 0f08 	tst.w	r3, #8
 80100cc:	bf14      	ite	ne
 80100ce:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80100d2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80100d6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80100d8:	2301      	movs	r3, #1
 80100da:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80100de:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80100e0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 80100e4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80100e6:	2001      	movs	r0, #1
 80100e8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80100ea:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80100ec:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80100ee:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80100f2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80100f4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80100f8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80100fa:	2040      	movs	r0, #64	; 0x40
 80100fc:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80100fe:	2080      	movs	r0, #128	; 0x80
 8010100:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010102:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010106:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010108:	f44f 7000 	mov.w	r0, #512	; 0x200
 801010c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801010e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010112:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010114:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010118:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 801011a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801011e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010120:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010124:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010126:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801012a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801012c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8010130:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8010132:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010136:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010138:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801013c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801013e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8010142:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010144:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010148:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801014a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801014e:	4770      	bx	lr
 8010150:	200006e8 	.word	0x200006e8
 8010154:	10624dd3 	.word	0x10624dd3
 8010158:	fffee0c0 	.word	0xfffee0c0
 801015c:	00200045 	.word	0x00200045
 8010160:	002000c5 	.word	0x002000c5
 8010164:	fdffe008 	.word	0xfdffe008

08010168 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010168:	4a50      	ldr	r2, [pc, #320]	; (80102ac <SDMMC_CmdWriteMultiBlock+0x144>)
{
 801016a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801016c:	4b50      	ldr	r3, [pc, #320]	; (80102b0 <SDMMC_CmdWriteMultiBlock+0x148>)
 801016e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010170:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010174:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010178:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801017c:	484d      	ldr	r0, [pc, #308]	; (80102b4 <SDMMC_CmdWriteMultiBlock+0x14c>)
 801017e:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010182:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010184:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010186:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801018a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801018c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010190:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8010194:	1e53      	subs	r3, r2, #1
 8010196:	b14a      	cbz	r2, 80101ac <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010198:	4947      	ldr	r1, [pc, #284]	; (80102b8 <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 801019a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 801019e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80101a0:	420a      	tst	r2, r1
 80101a2:	d001      	beq.n	80101a8 <SDMMC_CmdWriteMultiBlock+0x40>
 80101a4:	0492      	lsls	r2, r2, #18
 80101a6:	d504      	bpl.n	80101b2 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 80101a8:	1c58      	adds	r0, r3, #1
 80101aa:	d1f6      	bne.n	801019a <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 80101ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80101b0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80101b2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 80101b6:	0758      	lsls	r0, r3, #29
 80101b8:	d445      	bmi.n	8010246 <SDMMC_CmdWriteMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80101ba:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 80101be:	f010 0001 	ands.w	r0, r0, #1
 80101c2:	d137      	bne.n	8010234 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80101c4:	4b3d      	ldr	r3, [pc, #244]	; (80102bc <SDMMC_CmdWriteMultiBlock+0x154>)
 80101c6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80101ca:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	2b19      	cmp	r3, #25
 80101d2:	d136      	bne.n	8010242 <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 80101d4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80101d8:	4839      	ldr	r0, [pc, #228]	; (80102c0 <SDMMC_CmdWriteMultiBlock+0x158>)
 80101da:	4018      	ands	r0, r3
 80101dc:	2800      	cmp	r0, #0
 80101de:	d02f      	beq.n	8010240 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	db35      	blt.n	8010250 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80101e4:	0059      	lsls	r1, r3, #1
 80101e6:	d436      	bmi.n	8010256 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80101e8:	009a      	lsls	r2, r3, #2
 80101ea:	d436      	bmi.n	801025a <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80101ec:	00d9      	lsls	r1, r3, #3
 80101ee:	d436      	bmi.n	801025e <SDMMC_CmdWriteMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80101f0:	011a      	lsls	r2, r3, #4
 80101f2:	d437      	bmi.n	8010264 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80101f4:	0159      	lsls	r1, r3, #5
 80101f6:	d438      	bmi.n	801026a <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80101f8:	01da      	lsls	r2, r3, #7
 80101fa:	d439      	bmi.n	8010270 <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80101fc:	0219      	lsls	r1, r3, #8
 80101fe:	d43a      	bmi.n	8010276 <SDMMC_CmdWriteMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010200:	025a      	lsls	r2, r3, #9
 8010202:	d43b      	bmi.n	801027c <SDMMC_CmdWriteMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010204:	0299      	lsls	r1, r3, #10
 8010206:	d445      	bmi.n	8010294 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010208:	02da      	lsls	r2, r3, #11
 801020a:	d440      	bmi.n	801028e <SDMMC_CmdWriteMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801020c:	0359      	lsls	r1, r3, #13
 801020e:	d43b      	bmi.n	8010288 <SDMMC_CmdWriteMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010210:	039a      	lsls	r2, r3, #14
 8010212:	d436      	bmi.n	8010282 <SDMMC_CmdWriteMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010214:	03d9      	lsls	r1, r3, #15
 8010216:	d446      	bmi.n	80102a6 <SDMMC_CmdWriteMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010218:	041a      	lsls	r2, r3, #16
 801021a:	d441      	bmi.n	80102a0 <SDMMC_CmdWriteMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801021c:	0459      	lsls	r1, r3, #17
 801021e:	d43c      	bmi.n	801029a <SDMMC_CmdWriteMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010220:	049a      	lsls	r2, r3, #18
 8010222:	d40b      	bmi.n	801023c <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010224:	f013 0f08 	tst.w	r3, #8
 8010228:	bf14      	ite	ne
 801022a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 801022e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8010232:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010234:	2301      	movs	r3, #1
 8010236:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801023a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 801023c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8010240:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010242:	2001      	movs	r0, #1
 8010244:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010246:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010248:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801024a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801024e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010250:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8010254:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010256:	2040      	movs	r0, #64	; 0x40
 8010258:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801025a:	2080      	movs	r0, #128	; 0x80
 801025c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801025e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010262:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010264:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010268:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801026a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801026e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010270:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010274:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010276:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801027a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 801027c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010280:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010282:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8010286:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010288:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801028c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 801028e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010292:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010294:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010298:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801029a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 801029e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80102a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80102a4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80102a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80102aa:	4770      	bx	lr
 80102ac:	200006e8 	.word	0x200006e8
 80102b0:	10624dd3 	.word	0x10624dd3
 80102b4:	fffee0c0 	.word	0xfffee0c0
 80102b8:	00200045 	.word	0x00200045
 80102bc:	002000c5 	.word	0x002000c5
 80102c0:	fdffe008 	.word	0xfdffe008

080102c4 <SDMMC_CmdStopTransfer>:
{
 80102c4:	b430      	push	{r4, r5}
 80102c6:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80102c8:	4b7b      	ldr	r3, [pc, #492]	; (80104b8 <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80102ca:	68c0      	ldr	r0, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 80102cc:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80102ce:	4c7b      	ldr	r4, [pc, #492]	; (80104bc <SDMMC_CmdStopTransfer+0x1f8>)
 80102d0:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80102d2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80102d6:	4b7a      	ldr	r3, [pc, #488]	; (80104c0 <SDMMC_CmdStopTransfer+0x1fc>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80102d8:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80102da:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80102de:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80102e0:	4c78      	ldr	r4, [pc, #480]	; (80104c4 <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80102e2:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80102e6:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80102e8:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80102ea:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 80102ee:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80102f0:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80102f4:	68cc      	ldr	r4, [r1, #12]
 80102f6:	4023      	ands	r3, r4
 80102f8:	4318      	orrs	r0, r3
 80102fa:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 80102fc:	b14a      	cbz	r2, 8010312 <SDMMC_CmdStopTransfer+0x4e>
 80102fe:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010300:	4871      	ldr	r0, [pc, #452]	; (80104c8 <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
 8010302:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8010304:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010306:	4202      	tst	r2, r0
 8010308:	d001      	beq.n	801030e <SDMMC_CmdStopTransfer+0x4a>
 801030a:	0492      	lsls	r2, r2, #18
 801030c:	d509      	bpl.n	8010322 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 801030e:	1c5c      	adds	r4, r3, #1
 8010310:	d1f7      	bne.n	8010302 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010312:	68cb      	ldr	r3, [r1, #12]
 8010314:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8010318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801031c:	60cb      	str	r3, [r1, #12]
}
 801031e:	bc30      	pop	{r4, r5}
 8010320:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010322:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010324:	075b      	lsls	r3, r3, #29
 8010326:	d452      	bmi.n	80103ce <SDMMC_CmdStopTransfer+0x10a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010328:	6b48      	ldr	r0, [r1, #52]	; 0x34
 801032a:	f010 0001 	ands.w	r0, r0, #1
 801032e:	d13b      	bne.n	80103a8 <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010330:	4b66      	ldr	r3, [pc, #408]	; (80104cc <SDMMC_CmdStopTransfer+0x208>)
 8010332:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010334:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010336:	b2db      	uxtb	r3, r3
 8010338:	2b0c      	cmp	r3, #12
 801033a:	d142      	bne.n	80103c2 <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
 801033c:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801033e:	4a64      	ldr	r2, [pc, #400]	; (80104d0 <SDMMC_CmdStopTransfer+0x20c>)
 8010340:	401a      	ands	r2, r3
 8010342:	2a00      	cmp	r2, #0
 8010344:	d037      	beq.n	80103b6 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010346:	2b00      	cmp	r3, #0
 8010348:	db35      	blt.n	80103b6 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801034a:	005d      	lsls	r5, r3, #1
 801034c:	d446      	bmi.n	80103dc <SDMMC_CmdStopTransfer+0x118>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801034e:	009c      	lsls	r4, r3, #2
 8010350:	d44a      	bmi.n	80103e8 <SDMMC_CmdStopTransfer+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010352:	00d8      	lsls	r0, r3, #3
 8010354:	d44e      	bmi.n	80103f4 <SDMMC_CmdStopTransfer+0x130>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010356:	011a      	lsls	r2, r3, #4
 8010358:	d453      	bmi.n	8010402 <SDMMC_CmdStopTransfer+0x13e>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801035a:	015d      	lsls	r5, r3, #5
 801035c:	d458      	bmi.n	8010410 <SDMMC_CmdStopTransfer+0x14c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801035e:	01dc      	lsls	r4, r3, #7
 8010360:	d464      	bmi.n	801042c <SDMMC_CmdStopTransfer+0x168>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010362:	0218      	lsls	r0, r3, #8
 8010364:	d45b      	bmi.n	801041e <SDMMC_CmdStopTransfer+0x15a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010366:	025a      	lsls	r2, r3, #9
 8010368:	d46e      	bmi.n	8010448 <SDMMC_CmdStopTransfer+0x184>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801036a:	029d      	lsls	r5, r3, #10
 801036c:	d465      	bmi.n	801043a <SDMMC_CmdStopTransfer+0x176>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801036e:	02dc      	lsls	r4, r3, #11
 8010370:	d47f      	bmi.n	8010472 <SDMMC_CmdStopTransfer+0x1ae>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010372:	0358      	lsls	r0, r3, #13
 8010374:	d476      	bmi.n	8010464 <SDMMC_CmdStopTransfer+0x1a0>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010376:	039a      	lsls	r2, r3, #14
 8010378:	d46d      	bmi.n	8010456 <SDMMC_CmdStopTransfer+0x192>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801037a:	03dd      	lsls	r5, r3, #15
 801037c:	f100 8095 	bmi.w	80104aa <SDMMC_CmdStopTransfer+0x1e6>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010380:	041c      	lsls	r4, r3, #16
 8010382:	f100 8084 	bmi.w	801048e <SDMMC_CmdStopTransfer+0x1ca>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010386:	0458      	lsls	r0, r3, #17
 8010388:	d47a      	bmi.n	8010480 <SDMMC_CmdStopTransfer+0x1bc>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801038a:	049a      	lsls	r2, r3, #18
 801038c:	f100 8086 	bmi.w	801049c <SDMMC_CmdStopTransfer+0x1d8>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010390:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010394:	68cb      	ldr	r3, [r1, #12]
 8010396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801039a:	bf14      	ite	ne
 801039c:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80103a0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103a4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80103a6:	e7ba      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80103a8:	2301      	movs	r3, #1
 80103aa:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103ac:	68cb      	ldr	r3, [r1, #12]
 80103ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103b2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80103b4:	e7b3      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103b6:	68cb      	ldr	r3, [r1, #12]
 80103b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103bc:	60cb      	str	r3, [r1, #12]
}
 80103be:	bc30      	pop	{r4, r5}
 80103c0:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103c2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80103c4:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103ca:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80103cc:	e7a7      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80103ce:	2004      	movs	r0, #4
 80103d0:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103d2:	68cb      	ldr	r3, [r1, #12]
 80103d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103d8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80103da:	e7a0      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103dc:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80103de:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103e4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80103e6:	e79a      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103e8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80103ea:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103f0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80103f2:	e794      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103f4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80103f6:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80103fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103fe:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010400:	e78d      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010402:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010404:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801040c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801040e:	e786      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010410:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010412:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801041a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801041c:	e77f      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801041e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010420:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010428:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801042a:	e778      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801042c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801042e:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010436:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010438:	e771      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801043a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801043c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010444:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010446:	e76a      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010448:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 801044a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801044e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010452:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010454:	e763      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010456:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010458:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801045c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010460:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010462:	e75c      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010464:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010466:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801046a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801046e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010470:	e755      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010472:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 8010474:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801047c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801047e:	e74e      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010480:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010482:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801048a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801048c:	e747      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801048e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010490:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010498:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801049a:	e740      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801049c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 801049e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80104a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104a6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80104a8:	e739      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80104aa:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80104ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80104b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104b4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80104b6:	e732      	b.n	801031e <SDMMC_CmdStopTransfer+0x5a>
 80104b8:	200006e8 	.word	0x200006e8
 80104bc:	10624dd3 	.word	0x10624dd3
 80104c0:	fffee0c0 	.word	0xfffee0c0
 80104c4:	05f5e100 	.word	0x05f5e100
 80104c8:	00200045 	.word	0x00200045
 80104cc:	002000c5 	.word	0x002000c5
 80104d0:	fdffe008 	.word	0xfdffe008

080104d4 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80104d4:	4a50      	ldr	r2, [pc, #320]	; (8010618 <SDMMC_CmdSelDesel+0x144>)
{
 80104d6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80104d8:	4b50      	ldr	r3, [pc, #320]	; (801061c <SDMMC_CmdSelDesel+0x148>)
 80104da:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80104dc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80104e0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80104e4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80104e8:	484d      	ldr	r0, [pc, #308]	; (8010620 <SDMMC_CmdSelDesel+0x14c>)
 80104ea:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80104ee:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80104f0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80104f2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80104f6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80104f8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80104fc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8010500:	1e53      	subs	r3, r2, #1
 8010502:	b14a      	cbz	r2, 8010518 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010504:	4947      	ldr	r1, [pc, #284]	; (8010624 <SDMMC_CmdSelDesel+0x150>)
    sta_reg = SDMMCx->STA;
 8010506:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 801050a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801050c:	420a      	tst	r2, r1
 801050e:	d001      	beq.n	8010514 <SDMMC_CmdSelDesel+0x40>
 8010510:	0492      	lsls	r2, r2, #18
 8010512:	d504      	bpl.n	801051e <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 8010514:	1c58      	adds	r0, r3, #1
 8010516:	d1f6      	bne.n	8010506 <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8010518:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801051c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801051e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8010522:	0758      	lsls	r0, r3, #29
 8010524:	d445      	bmi.n	80105b2 <SDMMC_CmdSelDesel+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010526:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 801052a:	f010 0001 	ands.w	r0, r0, #1
 801052e:	d137      	bne.n	80105a0 <SDMMC_CmdSelDesel+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010530:	4b3d      	ldr	r3, [pc, #244]	; (8010628 <SDMMC_CmdSelDesel+0x154>)
 8010532:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010536:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801053a:	b2db      	uxtb	r3, r3
 801053c:	2b07      	cmp	r3, #7
 801053e:	d136      	bne.n	80105ae <SDMMC_CmdSelDesel+0xda>
  return (*(__IO uint32_t *) tmp);
 8010540:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010544:	4839      	ldr	r0, [pc, #228]	; (801062c <SDMMC_CmdSelDesel+0x158>)
 8010546:	4018      	ands	r0, r3
 8010548:	2800      	cmp	r0, #0
 801054a:	d02f      	beq.n	80105ac <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801054c:	2b00      	cmp	r3, #0
 801054e:	db35      	blt.n	80105bc <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010550:	0059      	lsls	r1, r3, #1
 8010552:	d436      	bmi.n	80105c2 <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010554:	009a      	lsls	r2, r3, #2
 8010556:	d436      	bmi.n	80105c6 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010558:	00d9      	lsls	r1, r3, #3
 801055a:	d436      	bmi.n	80105ca <SDMMC_CmdSelDesel+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801055c:	011a      	lsls	r2, r3, #4
 801055e:	d437      	bmi.n	80105d0 <SDMMC_CmdSelDesel+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010560:	0159      	lsls	r1, r3, #5
 8010562:	d438      	bmi.n	80105d6 <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010564:	01da      	lsls	r2, r3, #7
 8010566:	d439      	bmi.n	80105dc <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010568:	0219      	lsls	r1, r3, #8
 801056a:	d43a      	bmi.n	80105e2 <SDMMC_CmdSelDesel+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801056c:	025a      	lsls	r2, r3, #9
 801056e:	d43b      	bmi.n	80105e8 <SDMMC_CmdSelDesel+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010570:	0299      	lsls	r1, r3, #10
 8010572:	d445      	bmi.n	8010600 <SDMMC_CmdSelDesel+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010574:	02da      	lsls	r2, r3, #11
 8010576:	d440      	bmi.n	80105fa <SDMMC_CmdSelDesel+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010578:	0359      	lsls	r1, r3, #13
 801057a:	d43b      	bmi.n	80105f4 <SDMMC_CmdSelDesel+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801057c:	039a      	lsls	r2, r3, #14
 801057e:	d436      	bmi.n	80105ee <SDMMC_CmdSelDesel+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010580:	03d9      	lsls	r1, r3, #15
 8010582:	d446      	bmi.n	8010612 <SDMMC_CmdSelDesel+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010584:	041a      	lsls	r2, r3, #16
 8010586:	d441      	bmi.n	801060c <SDMMC_CmdSelDesel+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010588:	0459      	lsls	r1, r3, #17
 801058a:	d43c      	bmi.n	8010606 <SDMMC_CmdSelDesel+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801058c:	049a      	lsls	r2, r3, #18
 801058e:	d40b      	bmi.n	80105a8 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010590:	f013 0f08 	tst.w	r3, #8
 8010594:	bf14      	ite	ne
 8010596:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 801059a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801059e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80105a0:	2301      	movs	r3, #1
 80105a2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105a6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80105a8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 80105ac:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105ae:	2001      	movs	r0, #1
 80105b0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80105b2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80105b4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80105b6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80105ba:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80105bc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80105c0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80105c2:	2040      	movs	r0, #64	; 0x40
 80105c4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80105c6:	2080      	movs	r0, #128	; 0x80
 80105c8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80105ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80105ce:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80105d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80105d4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80105d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80105da:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80105dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80105e0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80105e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80105e6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80105e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80105ec:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80105ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80105f2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80105f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80105f8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 80105fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80105fe:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010600:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010604:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010606:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 801060a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801060c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010610:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010612:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8010616:	4770      	bx	lr
 8010618:	200006e8 	.word	0x200006e8
 801061c:	10624dd3 	.word	0x10624dd3
 8010620:	fffee0c0 	.word	0xfffee0c0
 8010624:	00200045 	.word	0x00200045
 8010628:	002000c5 	.word	0x002000c5
 801062c:	fdffe008 	.word	0xfdffe008

08010630 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010630:	4b11      	ldr	r3, [pc, #68]	; (8010678 <SDMMC_CmdGoIdleState+0x48>)
{
 8010632:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010634:	4a11      	ldr	r2, [pc, #68]	; (801067c <SDMMC_CmdGoIdleState+0x4c>)
{
 8010636:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010638:	4c11      	ldr	r4, [pc, #68]	; (8010680 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 801063a:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801063c:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 801063e:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010640:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010644:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010646:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801064a:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801064c:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801064e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010652:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010656:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010658:	e002      	b.n	8010660 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801065a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 801065c:	0612      	lsls	r2, r2, #24
 801065e:	d405      	bmi.n	801066c <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8010660:	3b01      	subs	r3, #1
 8010662:	d2fa      	bcs.n	801065a <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8010664:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8010668:	bc30      	pop	{r4, r5}
 801066a:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801066c:	4b05      	ldr	r3, [pc, #20]	; (8010684 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 801066e:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010670:	638b      	str	r3, [r1, #56]	; 0x38
}
 8010672:	bc30      	pop	{r4, r5}
 8010674:	4770      	bx	lr
 8010676:	bf00      	nop
 8010678:	200006e8 	.word	0x200006e8
 801067c:	fffee0c0 	.word	0xfffee0c0
 8010680:	10624dd3 	.word	0x10624dd3
 8010684:	002000c5 	.word	0x002000c5

08010688 <SDMMC_CmdOperCond>:
{
 8010688:	b410      	push	{r4}
 801068a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 801068c:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010690:	4a1a      	ldr	r2, [pc, #104]	; (80106fc <SDMMC_CmdOperCond+0x74>)
 8010692:	4b1b      	ldr	r3, [pc, #108]	; (8010700 <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
 8010694:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010696:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010698:	68cc      	ldr	r4, [r1, #12]
 801069a:	481a      	ldr	r0, [pc, #104]	; (8010704 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801069c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80106a0:	f241 1308 	movw	r3, #4360	; 0x1108
 80106a4:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80106a6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80106a8:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80106aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80106ae:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80106b2:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 80106b4:	b14a      	cbz	r2, 80106ca <SDMMC_CmdOperCond+0x42>
 80106b6:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 80106b8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 80106ba:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80106bc:	f012 0f45 	tst.w	r2, #69	; 0x45
 80106c0:	d001      	beq.n	80106c6 <SDMMC_CmdOperCond+0x3e>
 80106c2:	0490      	lsls	r0, r2, #18
 80106c4:	d506      	bpl.n	80106d4 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 80106c6:	1c5c      	adds	r4, r3, #1
 80106c8:	d1f6      	bne.n	80106b8 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80106ca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80106ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106d2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80106d4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80106d6:	075a      	lsls	r2, r3, #29
 80106d8:	d40c      	bmi.n	80106f4 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80106da:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80106dc:	f010 0001 	ands.w	r0, r0, #1
 80106e0:	d105      	bne.n	80106ee <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80106e2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80106e4:	065b      	lsls	r3, r3, #25
 80106e6:	d5f2      	bpl.n	80106ce <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80106e8:	2340      	movs	r3, #64	; 0x40
 80106ea:	638b      	str	r3, [r1, #56]	; 0x38
 80106ec:	e7ef      	b.n	80106ce <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80106ee:	2301      	movs	r3, #1
 80106f0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80106f2:	e7ec      	b.n	80106ce <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80106f4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80106f6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80106f8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80106fa:	e7e8      	b.n	80106ce <SDMMC_CmdOperCond+0x46>
 80106fc:	200006e8 	.word	0x200006e8
 8010700:	10624dd3 	.word	0x10624dd3
 8010704:	fffee0c0 	.word	0xfffee0c0

08010708 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010708:	4a50      	ldr	r2, [pc, #320]	; (801084c <SDMMC_CmdAppCommand+0x144>)
{
 801070a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801070c:	4b50      	ldr	r3, [pc, #320]	; (8010850 <SDMMC_CmdAppCommand+0x148>)
 801070e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010710:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010714:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010718:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801071c:	484d      	ldr	r0, [pc, #308]	; (8010854 <SDMMC_CmdAppCommand+0x14c>)
 801071e:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010722:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010724:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010726:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801072a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801072c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010730:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8010734:	1e53      	subs	r3, r2, #1
 8010736:	b14a      	cbz	r2, 801074c <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010738:	4947      	ldr	r1, [pc, #284]	; (8010858 <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
 801073a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 801073e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010740:	420a      	tst	r2, r1
 8010742:	d001      	beq.n	8010748 <SDMMC_CmdAppCommand+0x40>
 8010744:	0492      	lsls	r2, r2, #18
 8010746:	d504      	bpl.n	8010752 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 8010748:	1c58      	adds	r0, r3, #1
 801074a:	d1f6      	bne.n	801073a <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 801074c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8010750:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010752:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8010756:	0758      	lsls	r0, r3, #29
 8010758:	d445      	bmi.n	80107e6 <SDMMC_CmdAppCommand+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801075a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 801075e:	f010 0001 	ands.w	r0, r0, #1
 8010762:	d137      	bne.n	80107d4 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010764:	4b3d      	ldr	r3, [pc, #244]	; (801085c <SDMMC_CmdAppCommand+0x154>)
 8010766:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801076a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801076e:	b2db      	uxtb	r3, r3
 8010770:	2b37      	cmp	r3, #55	; 0x37
 8010772:	d136      	bne.n	80107e2 <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
 8010774:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010778:	4839      	ldr	r0, [pc, #228]	; (8010860 <SDMMC_CmdAppCommand+0x158>)
 801077a:	4018      	ands	r0, r3
 801077c:	2800      	cmp	r0, #0
 801077e:	d02f      	beq.n	80107e0 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010780:	2b00      	cmp	r3, #0
 8010782:	db35      	blt.n	80107f0 <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010784:	0059      	lsls	r1, r3, #1
 8010786:	d436      	bmi.n	80107f6 <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010788:	009a      	lsls	r2, r3, #2
 801078a:	d436      	bmi.n	80107fa <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801078c:	00d9      	lsls	r1, r3, #3
 801078e:	d436      	bmi.n	80107fe <SDMMC_CmdAppCommand+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010790:	011a      	lsls	r2, r3, #4
 8010792:	d437      	bmi.n	8010804 <SDMMC_CmdAppCommand+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010794:	0159      	lsls	r1, r3, #5
 8010796:	d438      	bmi.n	801080a <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010798:	01da      	lsls	r2, r3, #7
 801079a:	d439      	bmi.n	8010810 <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801079c:	0219      	lsls	r1, r3, #8
 801079e:	d43a      	bmi.n	8010816 <SDMMC_CmdAppCommand+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80107a0:	025a      	lsls	r2, r3, #9
 80107a2:	d43b      	bmi.n	801081c <SDMMC_CmdAppCommand+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80107a4:	0299      	lsls	r1, r3, #10
 80107a6:	d445      	bmi.n	8010834 <SDMMC_CmdAppCommand+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80107a8:	02da      	lsls	r2, r3, #11
 80107aa:	d440      	bmi.n	801082e <SDMMC_CmdAppCommand+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80107ac:	0359      	lsls	r1, r3, #13
 80107ae:	d43b      	bmi.n	8010828 <SDMMC_CmdAppCommand+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80107b0:	039a      	lsls	r2, r3, #14
 80107b2:	d436      	bmi.n	8010822 <SDMMC_CmdAppCommand+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80107b4:	03d9      	lsls	r1, r3, #15
 80107b6:	d446      	bmi.n	8010846 <SDMMC_CmdAppCommand+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80107b8:	041a      	lsls	r2, r3, #16
 80107ba:	d441      	bmi.n	8010840 <SDMMC_CmdAppCommand+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80107bc:	0459      	lsls	r1, r3, #17
 80107be:	d43c      	bmi.n	801083a <SDMMC_CmdAppCommand+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80107c0:	049a      	lsls	r2, r3, #18
 80107c2:	d40b      	bmi.n	80107dc <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80107c4:	f013 0f08 	tst.w	r3, #8
 80107c8:	bf14      	ite	ne
 80107ca:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80107ce:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80107d2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80107d4:	2301      	movs	r3, #1
 80107d6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107da:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80107dc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 80107e0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107e2:	2001      	movs	r0, #1
 80107e4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80107e6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107e8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80107ea:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107ee:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80107f0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80107f4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80107f6:	2040      	movs	r0, #64	; 0x40
 80107f8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80107fa:	2080      	movs	r0, #128	; 0x80
 80107fc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80107fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010802:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010804:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010808:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801080a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801080e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010810:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010814:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010816:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801081a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 801081c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010820:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010822:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8010826:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010828:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801082c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 801082e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010832:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010834:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010838:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801083a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 801083e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010840:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010844:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010846:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801084a:	4770      	bx	lr
 801084c:	200006e8 	.word	0x200006e8
 8010850:	10624dd3 	.word	0x10624dd3
 8010854:	fffee0c0 	.word	0xfffee0c0
 8010858:	00200045 	.word	0x00200045
 801085c:	002000c5 	.word	0x002000c5
 8010860:	fdffe008 	.word	0xfdffe008

08010864 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010864:	4a19      	ldr	r2, [pc, #100]	; (80108cc <SDMMC_CmdAppOperCommand+0x68>)
{
 8010866:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010868:	4b19      	ldr	r3, [pc, #100]	; (80108d0 <SDMMC_CmdAppOperCommand+0x6c>)
 801086a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 801086c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010870:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010874:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8010878:	4816      	ldr	r0, [pc, #88]	; (80108d4 <SDMMC_CmdAppOperCommand+0x70>)
 801087a:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801087e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010880:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010882:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010886:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010888:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801088c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8010890:	1e53      	subs	r3, r2, #1
 8010892:	b14a      	cbz	r2, 80108a8 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 8010894:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8010898:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801089a:	f012 0f45 	tst.w	r2, #69	; 0x45
 801089e:	d001      	beq.n	80108a4 <SDMMC_CmdAppOperCommand+0x40>
 80108a0:	0492      	lsls	r2, r2, #18
 80108a2:	d504      	bpl.n	80108ae <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 80108a4:	1c59      	adds	r1, r3, #1
 80108a6:	d1f5      	bne.n	8010894 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80108a8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80108ac:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80108ae:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 80108b2:	f010 0004 	ands.w	r0, r0, #4
 80108b6:	d103      	bne.n	80108c0 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108b8:	4b07      	ldr	r3, [pc, #28]	; (80108d8 <SDMMC_CmdAppOperCommand+0x74>)
 80108ba:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80108be:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108c0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108c2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108c4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop
 80108cc:	200006e8 	.word	0x200006e8
 80108d0:	10624dd3 	.word	0x10624dd3
 80108d4:	fffee0c0 	.word	0xfffee0c0
 80108d8:	002000c5 	.word	0x002000c5

080108dc <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80108dc:	4a50      	ldr	r2, [pc, #320]	; (8010a20 <SDMMC_CmdBusWidth+0x144>)
{
 80108de:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80108e0:	4b50      	ldr	r3, [pc, #320]	; (8010a24 <SDMMC_CmdBusWidth+0x148>)
 80108e2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80108e4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80108e8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80108ec:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80108f0:	484d      	ldr	r0, [pc, #308]	; (8010a28 <SDMMC_CmdBusWidth+0x14c>)
 80108f2:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80108f6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80108f8:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80108fa:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80108fe:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010900:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010904:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8010908:	1e53      	subs	r3, r2, #1
 801090a:	b14a      	cbz	r2, 8010920 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801090c:	4947      	ldr	r1, [pc, #284]	; (8010a2c <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
 801090e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8010912:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010914:	420a      	tst	r2, r1
 8010916:	d001      	beq.n	801091c <SDMMC_CmdBusWidth+0x40>
 8010918:	0492      	lsls	r2, r2, #18
 801091a:	d504      	bpl.n	8010926 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 801091c:	1c58      	adds	r0, r3, #1
 801091e:	d1f6      	bne.n	801090e <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8010920:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8010924:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010926:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 801092a:	0758      	lsls	r0, r3, #29
 801092c:	d445      	bmi.n	80109ba <SDMMC_CmdBusWidth+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801092e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8010932:	f010 0001 	ands.w	r0, r0, #1
 8010936:	d137      	bne.n	80109a8 <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010938:	4b3d      	ldr	r3, [pc, #244]	; (8010a30 <SDMMC_CmdBusWidth+0x154>)
 801093a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801093e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010942:	b2db      	uxtb	r3, r3
 8010944:	2b06      	cmp	r3, #6
 8010946:	d136      	bne.n	80109b6 <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
 8010948:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801094c:	4839      	ldr	r0, [pc, #228]	; (8010a34 <SDMMC_CmdBusWidth+0x158>)
 801094e:	4018      	ands	r0, r3
 8010950:	2800      	cmp	r0, #0
 8010952:	d02f      	beq.n	80109b4 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010954:	2b00      	cmp	r3, #0
 8010956:	db35      	blt.n	80109c4 <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010958:	0059      	lsls	r1, r3, #1
 801095a:	d436      	bmi.n	80109ca <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801095c:	009a      	lsls	r2, r3, #2
 801095e:	d436      	bmi.n	80109ce <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010960:	00d9      	lsls	r1, r3, #3
 8010962:	d436      	bmi.n	80109d2 <SDMMC_CmdBusWidth+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010964:	011a      	lsls	r2, r3, #4
 8010966:	d437      	bmi.n	80109d8 <SDMMC_CmdBusWidth+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010968:	0159      	lsls	r1, r3, #5
 801096a:	d438      	bmi.n	80109de <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801096c:	01da      	lsls	r2, r3, #7
 801096e:	d439      	bmi.n	80109e4 <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010970:	0219      	lsls	r1, r3, #8
 8010972:	d43a      	bmi.n	80109ea <SDMMC_CmdBusWidth+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010974:	025a      	lsls	r2, r3, #9
 8010976:	d43b      	bmi.n	80109f0 <SDMMC_CmdBusWidth+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010978:	0299      	lsls	r1, r3, #10
 801097a:	d445      	bmi.n	8010a08 <SDMMC_CmdBusWidth+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801097c:	02da      	lsls	r2, r3, #11
 801097e:	d440      	bmi.n	8010a02 <SDMMC_CmdBusWidth+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010980:	0359      	lsls	r1, r3, #13
 8010982:	d43b      	bmi.n	80109fc <SDMMC_CmdBusWidth+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010984:	039a      	lsls	r2, r3, #14
 8010986:	d436      	bmi.n	80109f6 <SDMMC_CmdBusWidth+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010988:	03d9      	lsls	r1, r3, #15
 801098a:	d446      	bmi.n	8010a1a <SDMMC_CmdBusWidth+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801098c:	041a      	lsls	r2, r3, #16
 801098e:	d441      	bmi.n	8010a14 <SDMMC_CmdBusWidth+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010990:	0459      	lsls	r1, r3, #17
 8010992:	d43c      	bmi.n	8010a0e <SDMMC_CmdBusWidth+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010994:	049a      	lsls	r2, r3, #18
 8010996:	d40b      	bmi.n	80109b0 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010998:	f013 0f08 	tst.w	r3, #8
 801099c:	bf14      	ite	ne
 801099e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80109a2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80109a6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80109a8:	2301      	movs	r3, #1
 80109aa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80109ae:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 80109b0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 80109b4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80109b6:	2001      	movs	r0, #1
 80109b8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80109ba:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109bc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80109be:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109c2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80109c4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80109c8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80109ca:	2040      	movs	r0, #64	; 0x40
 80109cc:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80109ce:	2080      	movs	r0, #128	; 0x80
 80109d0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80109d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80109d6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80109d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80109dc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80109de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80109e2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80109e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80109e8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 80109ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80109ee:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 80109f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80109f4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80109f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80109fa:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80109fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8010a00:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8010a02:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010a06:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010a08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010a0c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010a0e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8010a12:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010a14:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010a18:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010a1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8010a1e:	4770      	bx	lr
 8010a20:	200006e8 	.word	0x200006e8
 8010a24:	10624dd3 	.word	0x10624dd3
 8010a28:	fffee0c0 	.word	0xfffee0c0
 8010a2c:	00200045 	.word	0x00200045
 8010a30:	002000c5 	.word	0x002000c5
 8010a34:	fdffe008 	.word	0xfdffe008

08010a38 <SDMMC_CmdSendSCR>:
{
 8010a38:	b410      	push	{r4}
 8010a3a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8010a3c:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010a3e:	4a4c      	ldr	r2, [pc, #304]	; (8010b70 <SDMMC_CmdSendSCR+0x138>)
 8010a40:	4b4c      	ldr	r3, [pc, #304]	; (8010b74 <SDMMC_CmdSendSCR+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8010a42:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010a44:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a46:	68cc      	ldr	r4, [r1, #12]
 8010a48:	484b      	ldr	r0, [pc, #300]	; (8010b78 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010a4a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a4e:	f241 1333 	movw	r3, #4403	; 0x1133
 8010a52:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010a54:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a56:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010a58:	f241 3088 	movw	r0, #5000	; 0x1388
 8010a5c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a60:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8010a62:	b14a      	cbz	r2, 8010a78 <SDMMC_CmdSendSCR+0x40>
 8010a64:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010a66:	4845      	ldr	r0, [pc, #276]	; (8010b7c <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 8010a68:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8010a6a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a6c:	4202      	tst	r2, r0
 8010a6e:	d001      	beq.n	8010a74 <SDMMC_CmdSendSCR+0x3c>
 8010a70:	0494      	lsls	r4, r2, #18
 8010a72:	d506      	bpl.n	8010a82 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 8010a74:	1c5a      	adds	r2, r3, #1
 8010a76:	d1f7      	bne.n	8010a68 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8010a78:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8010a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a80:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a82:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010a84:	0758      	lsls	r0, r3, #29
 8010a86:	d43d      	bmi.n	8010b04 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a88:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8010a8a:	f010 0001 	ands.w	r0, r0, #1
 8010a8e:	d134      	bne.n	8010afa <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a90:	4b3b      	ldr	r3, [pc, #236]	; (8010b80 <SDMMC_CmdSendSCR+0x148>)
 8010a92:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010a94:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	2b33      	cmp	r3, #51	; 0x33
 8010a9a:	d131      	bne.n	8010b00 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 8010a9c:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010a9e:	4839      	ldr	r0, [pc, #228]	; (8010b84 <SDMMC_CmdSendSCR+0x14c>)
 8010aa0:	4018      	ands	r0, r3
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	d0ea      	beq.n	8010a7c <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	db30      	blt.n	8010b0c <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010aaa:	005a      	lsls	r2, r3, #1
 8010aac:	d431      	bmi.n	8010b12 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010aae:	009c      	lsls	r4, r3, #2
 8010ab0:	d431      	bmi.n	8010b16 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010ab2:	00d9      	lsls	r1, r3, #3
 8010ab4:	d431      	bmi.n	8010b1a <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010ab6:	011a      	lsls	r2, r3, #4
 8010ab8:	d432      	bmi.n	8010b20 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010aba:	015c      	lsls	r4, r3, #5
 8010abc:	d433      	bmi.n	8010b26 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010abe:	01d9      	lsls	r1, r3, #7
 8010ac0:	d434      	bmi.n	8010b2c <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010ac2:	021a      	lsls	r2, r3, #8
 8010ac4:	d435      	bmi.n	8010b32 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010ac6:	025c      	lsls	r4, r3, #9
 8010ac8:	d436      	bmi.n	8010b38 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010aca:	0299      	lsls	r1, r3, #10
 8010acc:	d440      	bmi.n	8010b50 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010ace:	02da      	lsls	r2, r3, #11
 8010ad0:	d43b      	bmi.n	8010b4a <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010ad2:	035c      	lsls	r4, r3, #13
 8010ad4:	d436      	bmi.n	8010b44 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010ad6:	0399      	lsls	r1, r3, #14
 8010ad8:	d431      	bmi.n	8010b3e <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010ada:	03da      	lsls	r2, r3, #15
 8010adc:	d444      	bmi.n	8010b68 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010ade:	041c      	lsls	r4, r3, #16
 8010ae0:	d43f      	bmi.n	8010b62 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010ae2:	0459      	lsls	r1, r3, #17
 8010ae4:	d43a      	bmi.n	8010b5c <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010ae6:	049a      	lsls	r2, r3, #18
 8010ae8:	d435      	bmi.n	8010b56 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010aea:	f013 0f08 	tst.w	r3, #8
 8010aee:	bf14      	ite	ne
 8010af0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8010af4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8010af8:	e7c0      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010afa:	2301      	movs	r3, #1
 8010afc:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010afe:	e7bd      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b00:	2001      	movs	r0, #1
 8010b02:	e7bb      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b04:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b06:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b08:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b0a:	e7b7      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010b0c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8010b10:	e7b4      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010b12:	2040      	movs	r0, #64	; 0x40
 8010b14:	e7b2      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010b16:	2080      	movs	r0, #128	; 0x80
 8010b18:	e7b0      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010b1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010b1e:	e7ad      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010b20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010b24:	e7aa      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010b26:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010b2a:	e7a7      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010b2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010b30:	e7a4      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010b36:	e7a1      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010b3c:	e79e      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010b3e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8010b42:	e79b      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010b44:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8010b48:	e798      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 8010b4a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010b4e:	e795      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010b50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010b54:	e792      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 8010b56:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8010b5a:	e78f      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010b5c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8010b60:	e78c      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010b62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010b66:	e789      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010b68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8010b6c:	e786      	b.n	8010a7c <SDMMC_CmdSendSCR+0x44>
 8010b6e:	bf00      	nop
 8010b70:	200006e8 	.word	0x200006e8
 8010b74:	10624dd3 	.word	0x10624dd3
 8010b78:	fffee0c0 	.word	0xfffee0c0
 8010b7c:	00200045 	.word	0x00200045
 8010b80:	002000c5 	.word	0x002000c5
 8010b84:	fdffe008 	.word	0xfdffe008

08010b88 <SDMMC_CmdSendCID>:
{
 8010b88:	b410      	push	{r4}
 8010b8a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8010b8c:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010b8e:	4a19      	ldr	r2, [pc, #100]	; (8010bf4 <SDMMC_CmdSendCID+0x6c>)
 8010b90:	4b19      	ldr	r3, [pc, #100]	; (8010bf8 <SDMMC_CmdSendCID+0x70>)
  SDMMCx->ARG = Command->Argument;
 8010b92:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010b94:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010b96:	68cc      	ldr	r4, [r1, #12]
 8010b98:	4818      	ldr	r0, [pc, #96]	; (8010bfc <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010b9a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010b9e:	f241 3302 	movw	r3, #4866	; 0x1302
 8010ba2:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ba4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010ba6:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ba8:	f241 3088 	movw	r0, #5000	; 0x1388
 8010bac:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010bb0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8010bb2:	b14a      	cbz	r2, 8010bc8 <SDMMC_CmdSendCID+0x40>
 8010bb4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8010bb6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8010bb8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bba:	f012 0f45 	tst.w	r2, #69	; 0x45
 8010bbe:	d001      	beq.n	8010bc4 <SDMMC_CmdSendCID+0x3c>
 8010bc0:	0492      	lsls	r2, r2, #18
 8010bc2:	d506      	bpl.n	8010bd2 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 8010bc4:	1c58      	adds	r0, r3, #1
 8010bc6:	d1f6      	bne.n	8010bb6 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8010bc8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8010bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bd0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010bd2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010bd4:	075b      	lsls	r3, r3, #29
 8010bd6:	d409      	bmi.n	8010bec <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010bd8:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8010bda:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010bde:	bf14      	ite	ne
 8010be0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010be2:	4b07      	ldreq	r3, [pc, #28]	; (8010c00 <SDMMC_CmdSendCID+0x78>)
 8010be4:	638b      	str	r3, [r1, #56]	; 0x38
}
 8010be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bea:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010bec:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bee:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010bf0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bf2:	e7eb      	b.n	8010bcc <SDMMC_CmdSendCID+0x44>
 8010bf4:	200006e8 	.word	0x200006e8
 8010bf8:	10624dd3 	.word	0x10624dd3
 8010bfc:	fffee0c0 	.word	0xfffee0c0
 8010c00:	002000c5 	.word	0x002000c5

08010c04 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c04:	4a1b      	ldr	r2, [pc, #108]	; (8010c74 <SDMMC_CmdSendCSD+0x70>)
{
 8010c06:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c08:	4b1b      	ldr	r3, [pc, #108]	; (8010c78 <SDMMC_CmdSendCSD+0x74>)
 8010c0a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010c0c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c10:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c14:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8010c18:	4818      	ldr	r0, [pc, #96]	; (8010c7c <SDMMC_CmdSendCSD+0x78>)
 8010c1a:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c1e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c20:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c22:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c26:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c28:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c2c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8010c30:	1e53      	subs	r3, r2, #1
 8010c32:	b14a      	cbz	r2, 8010c48 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 8010c34:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8010c38:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c3a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8010c3e:	d001      	beq.n	8010c44 <SDMMC_CmdSendCSD+0x40>
 8010c40:	0492      	lsls	r2, r2, #18
 8010c42:	d504      	bpl.n	8010c4e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 8010c44:	1c59      	adds	r1, r3, #1
 8010c46:	d1f5      	bne.n	8010c34 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8010c48:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8010c4c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c4e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8010c52:	075b      	lsls	r3, r3, #29
 8010c54:	d409      	bmi.n	8010c6a <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c56:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8010c5a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c5e:	bf14      	ite	ne
 8010c60:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c62:	4b07      	ldreq	r3, [pc, #28]	; (8010c80 <SDMMC_CmdSendCSD+0x7c>)
 8010c64:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8010c68:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c6a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c6c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c6e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c72:	4770      	bx	lr
 8010c74:	200006e8 	.word	0x200006e8
 8010c78:	10624dd3 	.word	0x10624dd3
 8010c7c:	fffee0c0 	.word	0xfffee0c0
 8010c80:	002000c5 	.word	0x002000c5

08010c84 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 8010c84:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c86:	4a2b      	ldr	r2, [pc, #172]	; (8010d34 <SDMMC_CmdSetRelAdd+0xb0>)
{
 8010c88:	4684      	mov	ip, r0
 8010c8a:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8010c8c:	6083      	str	r3, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c8e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c90:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c92:	4829      	ldr	r0, [pc, #164]	; (8010d38 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c94:	4c29      	ldr	r4, [pc, #164]	; (8010d3c <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c96:	fba0 0202 	umull	r0, r2, r0, r2
 8010c9a:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c9e:	401c      	ands	r4, r3
 8010ca0:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ca4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010ca6:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ca8:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010cac:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8010cb0:	b152      	cbz	r2, 8010cc8 <SDMMC_CmdSetRelAdd+0x44>
 8010cb2:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8010cb4:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8010cb8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010cba:	f012 0f45 	tst.w	r2, #69	; 0x45
 8010cbe:	d001      	beq.n	8010cc4 <SDMMC_CmdSetRelAdd+0x40>
 8010cc0:	0494      	lsls	r4, r2, #18
 8010cc2:	d506      	bpl.n	8010cd2 <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 8010cc4:	1c5a      	adds	r2, r3, #1
 8010cc6:	d1f5      	bne.n	8010cb4 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8010cc8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8010ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cd0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010cd2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8010cd6:	0758      	lsls	r0, r3, #29
 8010cd8:	d421      	bmi.n	8010d1e <SDMMC_CmdSetRelAdd+0x9a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010cda:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8010cde:	f010 0001 	ands.w	r0, r0, #1
 8010ce2:	d116      	bne.n	8010d12 <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
 8010ce4:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	2b03      	cmp	r3, #3
 8010cec:	d115      	bne.n	8010d1a <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010cee:	4b14      	ldr	r3, [pc, #80]	; (8010d40 <SDMMC_CmdSetRelAdd+0xbc>)
 8010cf0:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8010cf4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010cf8:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8010cfc:	d017      	beq.n	8010d2e <SDMMC_CmdSetRelAdd+0xaa>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010cfe:	045a      	lsls	r2, r3, #17
 8010d00:	d412      	bmi.n	8010d28 <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010d02:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8010d06:	bf14      	ite	ne
 8010d08:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8010d0c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8010d10:	e7dc      	b.n	8010ccc <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d12:	2301      	movs	r3, #1
 8010d14:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d18:	e7d8      	b.n	8010ccc <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d1a:	2001      	movs	r0, #1
 8010d1c:	e7d6      	b.n	8010ccc <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d1e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d20:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d22:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d26:	e7d1      	b.n	8010ccc <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010d28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010d2c:	e7ce      	b.n	8010ccc <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010d2e:	0c1b      	lsrs	r3, r3, #16
 8010d30:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 8010d32:	e7cb      	b.n	8010ccc <SDMMC_CmdSetRelAdd+0x48>
 8010d34:	200006e8 	.word	0x200006e8
 8010d38:	10624dd3 	.word	0x10624dd3
 8010d3c:	fffee0c0 	.word	0xfffee0c0
 8010d40:	002000c5 	.word	0x002000c5

08010d44 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d44:	4a50      	ldr	r2, [pc, #320]	; (8010e88 <SDMMC_CmdSendStatus+0x144>)
{
 8010d46:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d48:	4b50      	ldr	r3, [pc, #320]	; (8010e8c <SDMMC_CmdSendStatus+0x148>)
 8010d4a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010d4c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d50:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010d54:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8010d58:	484d      	ldr	r0, [pc, #308]	; (8010e90 <SDMMC_CmdSendStatus+0x14c>)
 8010d5a:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d5e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010d60:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d62:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010d66:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d68:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010d6c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8010d70:	1e53      	subs	r3, r2, #1
 8010d72:	b14a      	cbz	r2, 8010d88 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010d74:	4947      	ldr	r1, [pc, #284]	; (8010e94 <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
 8010d76:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8010d7a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010d7c:	420a      	tst	r2, r1
 8010d7e:	d001      	beq.n	8010d84 <SDMMC_CmdSendStatus+0x40>
 8010d80:	0492      	lsls	r2, r2, #18
 8010d82:	d504      	bpl.n	8010d8e <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 8010d84:	1c58      	adds	r0, r3, #1
 8010d86:	d1f6      	bne.n	8010d76 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 8010d88:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8010d8c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010d8e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8010d92:	0758      	lsls	r0, r3, #29
 8010d94:	d445      	bmi.n	8010e22 <SDMMC_CmdSendStatus+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d96:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8010d9a:	f010 0001 	ands.w	r0, r0, #1
 8010d9e:	d137      	bne.n	8010e10 <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010da0:	4b3d      	ldr	r3, [pc, #244]	; (8010e98 <SDMMC_CmdSendStatus+0x154>)
 8010da2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010da6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	2b0d      	cmp	r3, #13
 8010dae:	d136      	bne.n	8010e1e <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
 8010db0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010db4:	4839      	ldr	r0, [pc, #228]	; (8010e9c <SDMMC_CmdSendStatus+0x158>)
 8010db6:	4018      	ands	r0, r3
 8010db8:	2800      	cmp	r0, #0
 8010dba:	d02f      	beq.n	8010e1c <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	db35      	blt.n	8010e2c <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010dc0:	0059      	lsls	r1, r3, #1
 8010dc2:	d436      	bmi.n	8010e32 <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010dc4:	009a      	lsls	r2, r3, #2
 8010dc6:	d436      	bmi.n	8010e36 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010dc8:	00d9      	lsls	r1, r3, #3
 8010dca:	d436      	bmi.n	8010e3a <SDMMC_CmdSendStatus+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010dcc:	011a      	lsls	r2, r3, #4
 8010dce:	d437      	bmi.n	8010e40 <SDMMC_CmdSendStatus+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010dd0:	0159      	lsls	r1, r3, #5
 8010dd2:	d438      	bmi.n	8010e46 <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010dd4:	01da      	lsls	r2, r3, #7
 8010dd6:	d439      	bmi.n	8010e4c <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010dd8:	0219      	lsls	r1, r3, #8
 8010dda:	d43a      	bmi.n	8010e52 <SDMMC_CmdSendStatus+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010ddc:	025a      	lsls	r2, r3, #9
 8010dde:	d43b      	bmi.n	8010e58 <SDMMC_CmdSendStatus+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010de0:	0299      	lsls	r1, r3, #10
 8010de2:	d445      	bmi.n	8010e70 <SDMMC_CmdSendStatus+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010de4:	02da      	lsls	r2, r3, #11
 8010de6:	d440      	bmi.n	8010e6a <SDMMC_CmdSendStatus+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010de8:	0359      	lsls	r1, r3, #13
 8010dea:	d43b      	bmi.n	8010e64 <SDMMC_CmdSendStatus+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010dec:	039a      	lsls	r2, r3, #14
 8010dee:	d436      	bmi.n	8010e5e <SDMMC_CmdSendStatus+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010df0:	03d9      	lsls	r1, r3, #15
 8010df2:	d446      	bmi.n	8010e82 <SDMMC_CmdSendStatus+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010df4:	041a      	lsls	r2, r3, #16
 8010df6:	d441      	bmi.n	8010e7c <SDMMC_CmdSendStatus+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010df8:	0459      	lsls	r1, r3, #17
 8010dfa:	d43c      	bmi.n	8010e76 <SDMMC_CmdSendStatus+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010dfc:	049a      	lsls	r2, r3, #18
 8010dfe:	d40b      	bmi.n	8010e18 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010e00:	f013 0f08 	tst.w	r3, #8
 8010e04:	bf14      	ite	ne
 8010e06:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8010e0a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8010e0e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010e10:	2301      	movs	r3, #1
 8010e12:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e16:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8010e18:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8010e1c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e1e:	2001      	movs	r0, #1
 8010e20:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e22:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e24:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e26:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e2a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010e2c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8010e30:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010e32:	2040      	movs	r0, #64	; 0x40
 8010e34:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010e36:	2080      	movs	r0, #128	; 0x80
 8010e38:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010e3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010e3e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010e40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010e44:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010e46:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010e4a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010e4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010e50:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010e56:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010e5c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e5e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8010e62:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e64:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8010e68:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8010e6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010e6e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010e74:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010e76:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8010e7a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010e7c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010e80:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010e82:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8010e86:	4770      	bx	lr
 8010e88:	200006e8 	.word	0x200006e8
 8010e8c:	10624dd3 	.word	0x10624dd3
 8010e90:	fffee0c0 	.word	0xfffee0c0
 8010e94:	00200045 	.word	0x00200045
 8010e98:	002000c5 	.word	0x002000c5
 8010e9c:	fdffe008 	.word	0xfdffe008

08010ea0 <SDMMC_CmdStatusRegister>:
{
 8010ea0:	b410      	push	{r4}
 8010ea2:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8010ea4:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010ea6:	4a4c      	ldr	r2, [pc, #304]	; (8010fd8 <SDMMC_CmdStatusRegister+0x138>)
 8010ea8:	4b4c      	ldr	r3, [pc, #304]	; (8010fdc <SDMMC_CmdStatusRegister+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8010eaa:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010eac:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010eae:	68cc      	ldr	r4, [r1, #12]
 8010eb0:	484b      	ldr	r0, [pc, #300]	; (8010fe0 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010eb2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010eb6:	f241 130d 	movw	r3, #4365	; 0x110d
 8010eba:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010ebc:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010ebe:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010ec0:	f241 3088 	movw	r0, #5000	; 0x1388
 8010ec4:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010ec8:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8010eca:	b14a      	cbz	r2, 8010ee0 <SDMMC_CmdStatusRegister+0x40>
 8010ecc:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010ece:	4845      	ldr	r0, [pc, #276]	; (8010fe4 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 8010ed0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8010ed2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010ed4:	4202      	tst	r2, r0
 8010ed6:	d001      	beq.n	8010edc <SDMMC_CmdStatusRegister+0x3c>
 8010ed8:	0494      	lsls	r4, r2, #18
 8010eda:	d506      	bpl.n	8010eea <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 8010edc:	1c5a      	adds	r2, r3, #1
 8010ede:	d1f7      	bne.n	8010ed0 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8010ee0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8010ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ee8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010eea:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010eec:	0758      	lsls	r0, r3, #29
 8010eee:	d43d      	bmi.n	8010f6c <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010ef0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8010ef2:	f010 0001 	ands.w	r0, r0, #1
 8010ef6:	d134      	bne.n	8010f62 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ef8:	4b3b      	ldr	r3, [pc, #236]	; (8010fe8 <SDMMC_CmdStatusRegister+0x148>)
 8010efa:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010efc:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	2b0d      	cmp	r3, #13
 8010f02:	d131      	bne.n	8010f68 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 8010f04:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010f06:	4839      	ldr	r0, [pc, #228]	; (8010fec <SDMMC_CmdStatusRegister+0x14c>)
 8010f08:	4018      	ands	r0, r3
 8010f0a:	2800      	cmp	r0, #0
 8010f0c:	d0ea      	beq.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	db30      	blt.n	8010f74 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010f12:	005a      	lsls	r2, r3, #1
 8010f14:	d431      	bmi.n	8010f7a <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010f16:	009c      	lsls	r4, r3, #2
 8010f18:	d431      	bmi.n	8010f7e <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010f1a:	00d9      	lsls	r1, r3, #3
 8010f1c:	d431      	bmi.n	8010f82 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010f1e:	011a      	lsls	r2, r3, #4
 8010f20:	d432      	bmi.n	8010f88 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010f22:	015c      	lsls	r4, r3, #5
 8010f24:	d433      	bmi.n	8010f8e <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010f26:	01d9      	lsls	r1, r3, #7
 8010f28:	d434      	bmi.n	8010f94 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010f2a:	021a      	lsls	r2, r3, #8
 8010f2c:	d435      	bmi.n	8010f9a <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010f2e:	025c      	lsls	r4, r3, #9
 8010f30:	d436      	bmi.n	8010fa0 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010f32:	0299      	lsls	r1, r3, #10
 8010f34:	d440      	bmi.n	8010fb8 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010f36:	02da      	lsls	r2, r3, #11
 8010f38:	d43b      	bmi.n	8010fb2 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010f3a:	035c      	lsls	r4, r3, #13
 8010f3c:	d436      	bmi.n	8010fac <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010f3e:	0399      	lsls	r1, r3, #14
 8010f40:	d431      	bmi.n	8010fa6 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010f42:	03da      	lsls	r2, r3, #15
 8010f44:	d444      	bmi.n	8010fd0 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010f46:	041c      	lsls	r4, r3, #16
 8010f48:	d43f      	bmi.n	8010fca <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010f4a:	0459      	lsls	r1, r3, #17
 8010f4c:	d43a      	bmi.n	8010fc4 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010f4e:	049a      	lsls	r2, r3, #18
 8010f50:	d435      	bmi.n	8010fbe <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f52:	f013 0f08 	tst.w	r3, #8
 8010f56:	bf14      	ite	ne
 8010f58:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8010f5c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8010f60:	e7c0      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f62:	2301      	movs	r3, #1
 8010f64:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f66:	e7bd      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f68:	2001      	movs	r0, #1
 8010f6a:	e7bb      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f6c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f6e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f70:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f72:	e7b7      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010f74:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8010f78:	e7b4      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010f7a:	2040      	movs	r0, #64	; 0x40
 8010f7c:	e7b2      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010f7e:	2080      	movs	r0, #128	; 0x80
 8010f80:	e7b0      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010f82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010f86:	e7ad      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010f88:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010f8c:	e7aa      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010f8e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010f92:	e7a7      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010f94:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010f98:	e7a4      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010f9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010f9e:	e7a1      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010fa0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8010fa4:	e79e      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010fa6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8010faa:	e79b      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010fac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8010fb0:	e798      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 8010fb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010fb6:	e795      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010fb8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010fbc:	e792      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 8010fbe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8010fc2:	e78f      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010fc4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8010fc8:	e78c      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010fca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010fce:	e789      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010fd0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8010fd4:	e786      	b.n	8010ee4 <SDMMC_CmdStatusRegister+0x44>
 8010fd6:	bf00      	nop
 8010fd8:	200006e8 	.word	0x200006e8
 8010fdc:	10624dd3 	.word	0x10624dd3
 8010fe0:	fffee0c0 	.word	0xfffee0c0
 8010fe4:	00200045 	.word	0x00200045
 8010fe8:	002000c5 	.word	0x002000c5
 8010fec:	fdffe008 	.word	0xfdffe008

08010ff0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010ff0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010ff2:	4903      	ldr	r1, [pc, #12]	; (8011000 <MX_FATFS_Init+0x10>)
 8010ff4:	4803      	ldr	r0, [pc, #12]	; (8011004 <MX_FATFS_Init+0x14>)
 8010ff6:	f003 f831 	bl	801405c <FATFS_LinkDriver>
 8010ffa:	4b03      	ldr	r3, [pc, #12]	; (8011008 <MX_FATFS_Init+0x18>)
 8010ffc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010ffe:	bd08      	pop	{r3, pc}
 8011000:	20019b78 	.word	0x20019b78
 8011004:	0801f48c 	.word	0x0801f48c
 8011008:	20019b7c 	.word	0x20019b7c

0801100c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 801100c:	2000      	movs	r0, #0
 801100e:	4770      	bx	lr

08011010 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011010:	b510      	push	{r4, lr}
 8011012:	4694      	mov	ip, r2
 8011014:	b082      	sub	sp, #8
 8011016:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011018:	460a      	mov	r2, r1
 801101a:	4663      	mov	r3, ip
 801101c:	4601      	mov	r1, r0
 801101e:	9400      	str	r4, [sp, #0]
 8011020:	4803      	ldr	r0, [pc, #12]	; (8011030 <BSP_SD_ReadBlocks+0x20>)
 8011022:	f7fd f8e9 	bl	800e1f8 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8011026:	3800      	subs	r0, #0
 8011028:	bf18      	it	ne
 801102a:	2001      	movne	r0, #1
 801102c:	b002      	add	sp, #8
 801102e:	bd10      	pop	{r4, pc}
 8011030:	20019318 	.word	0x20019318

08011034 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011034:	b510      	push	{r4, lr}
 8011036:	4694      	mov	ip, r2
 8011038:	b082      	sub	sp, #8
 801103a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 801103c:	460a      	mov	r2, r1
 801103e:	4663      	mov	r3, ip
 8011040:	4601      	mov	r1, r0
 8011042:	9400      	str	r4, [sp, #0]
 8011044:	4803      	ldr	r0, [pc, #12]	; (8011054 <BSP_SD_WriteBlocks+0x20>)
 8011046:	f7fd f9c7 	bl	800e3d8 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 801104a:	3800      	subs	r0, #0
 801104c:	bf18      	it	ne
 801104e:	2001      	movne	r0, #1
 8011050:	b002      	add	sp, #8
 8011052:	bd10      	pop	{r4, pc}
 8011054:	20019318 	.word	0x20019318

08011058 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011058:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801105a:	4803      	ldr	r0, [pc, #12]	; (8011068 <BSP_SD_GetCardState+0x10>)
 801105c:	f7fd fe16 	bl	800ec8c <HAL_SD_GetCardState>
}
 8011060:	3804      	subs	r0, #4
 8011062:	bf18      	it	ne
 8011064:	2001      	movne	r0, #1
 8011066:	bd08      	pop	{r3, pc}
 8011068:	20019318 	.word	0x20019318

0801106c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801106c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801106e:	4801      	ldr	r0, [pc, #4]	; (8011074 <BSP_SD_GetCardInfo+0x8>)
 8011070:	f7fd bcc6 	b.w	800ea00 <HAL_SD_GetCardInfo>
 8011074:	20019318 	.word	0x20019318

08011078 <BSP_SD_WriteCpltCallback>:
 8011078:	4770      	bx	lr
 801107a:	bf00      	nop

0801107c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801107c:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 801107e:	f7ff fffb 	bl	8011078 <BSP_SD_WriteCpltCallback>
}
 8011082:	bd08      	pop	{r3, pc}

08011084 <BSP_SD_ReadCpltCallback>:
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop

08011088 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011088:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 801108a:	f7ff fffb 	bl	8011084 <BSP_SD_ReadCpltCallback>
}
 801108e:	bd08      	pop	{r3, pc}

08011090 <BSP_SD_Init>:
{
 8011090:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011092:	f7f4 fdd3 	bl	8005c3c <BSP_SD_IsDetected>
 8011096:	2801      	cmp	r0, #1
 8011098:	d001      	beq.n	801109e <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 801109a:	2002      	movs	r0, #2
}
 801109c:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 801109e:	4807      	ldr	r0, [pc, #28]	; (80110bc <BSP_SD_Init+0x2c>)
 80110a0:	f7fd fd8c 	bl	800ebbc <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80110a4:	2800      	cmp	r0, #0
 80110a6:	d1f9      	bne.n	801109c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80110a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80110ac:	4803      	ldr	r0, [pc, #12]	; (80110bc <BSP_SD_Init+0x2c>)
 80110ae:	f7fd fcbb 	bl	800ea28 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80110b2:	3800      	subs	r0, #0
 80110b4:	bf18      	it	ne
 80110b6:	2001      	movne	r0, #1
}
 80110b8:	bd08      	pop	{r3, pc}
 80110ba:	bf00      	nop
 80110bc:	20019318 	.word	0x20019318

080110c0 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80110c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80110c4:	4803      	ldr	r0, [pc, #12]	; (80110d4 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 80110c6:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80110c8:	f7f9 fbbe 	bl	800a848 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80110cc:	fab0 f080 	clz	r0, r0
 80110d0:	0940      	lsrs	r0, r0, #5
 80110d2:	bd08      	pop	{r3, pc}
 80110d4:	58020800 	.word	0x58020800

080110d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80110d8:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 80110da:	4c0a      	ldr	r4, [pc, #40]	; (8011104 <SD_initialize+0x2c>)
 80110dc:	2501      	movs	r5, #1
 80110de:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80110e0:	f7ff ffd6 	bl	8011090 <BSP_SD_Init>
 80110e4:	b108      	cbz	r0, 80110ea <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80110e6:	7820      	ldrb	r0, [r4, #0]
}
 80110e8:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 80110ea:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80110ec:	f7ff ffb4 	bl	8011058 <BSP_SD_GetCardState>
 80110f0:	b918      	cbnz	r0, 80110fa <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 80110f2:	7823      	ldrb	r3, [r4, #0]
 80110f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80110f8:	7023      	strb	r3, [r4, #0]
  return Stat;
 80110fa:	7823      	ldrb	r3, [r4, #0]
 80110fc:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 80110fe:	7023      	strb	r3, [r4, #0]
  return Stat;
 8011100:	7820      	ldrb	r0, [r4, #0]
}
 8011102:	bd38      	pop	{r3, r4, r5, pc}
 8011104:	200006f8 	.word	0x200006f8

08011108 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011108:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 801110a:	2301      	movs	r3, #1
 801110c:	4c05      	ldr	r4, [pc, #20]	; (8011124 <SD_status+0x1c>)
 801110e:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8011110:	f7ff ffa2 	bl	8011058 <BSP_SD_GetCardState>
 8011114:	b918      	cbnz	r0, 801111e <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8011116:	7823      	ldrb	r3, [r4, #0]
 8011118:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801111c:	7023      	strb	r3, [r4, #0]
  return Stat;
 801111e:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8011120:	bd10      	pop	{r4, pc}
 8011122:	bf00      	nop
 8011124:	200006f8 	.word	0x200006f8

08011128 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011128:	b508      	push	{r3, lr}
 801112a:	4608      	mov	r0, r1
 801112c:	4611      	mov	r1, r2
 801112e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8011130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011134:	f7ff ff6c 	bl	8011010 <BSP_SD_ReadBlocks>
 8011138:	b108      	cbz	r0, 801113e <SD_read+0x16>
  DRESULT res = RES_ERROR;
 801113a:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 801113c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 801113e:	f7ff ff8b 	bl	8011058 <BSP_SD_GetCardState>
 8011142:	2800      	cmp	r0, #0
 8011144:	d0fa      	beq.n	801113c <SD_read+0x14>
 8011146:	f7ff ff87 	bl	8011058 <BSP_SD_GetCardState>
 801114a:	2800      	cmp	r0, #0
 801114c:	d1f7      	bne.n	801113e <SD_read+0x16>
 801114e:	e7f5      	b.n	801113c <SD_read+0x14>

08011150 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011150:	4b18      	ldr	r3, [pc, #96]	; (80111b4 <SD_ioctl+0x64>)
{
 8011152:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011154:	7818      	ldrb	r0, [r3, #0]
{
 8011156:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011158:	f010 0401 	ands.w	r4, r0, #1
 801115c:	d106      	bne.n	801116c <SD_ioctl+0x1c>
 801115e:	4615      	mov	r5, r2

  switch (cmd)
 8011160:	2903      	cmp	r1, #3
 8011162:	d824      	bhi.n	80111ae <SD_ioctl+0x5e>
 8011164:	e8df f001 	tbb	[pc, r1]
 8011168:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801116c:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 801116e:	4620      	mov	r0, r4
 8011170:	b00b      	add	sp, #44	; 0x2c
 8011172:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 8011174:	460c      	mov	r4, r1
}
 8011176:	4620      	mov	r0, r4
 8011178:	b00b      	add	sp, #44	; 0x2c
 801117a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801117c:	a801      	add	r0, sp, #4
 801117e:	f7ff ff75 	bl	801106c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011182:	9b07      	ldr	r3, [sp, #28]
}
 8011184:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011186:	602b      	str	r3, [r5, #0]
}
 8011188:	b00b      	add	sp, #44	; 0x2c
 801118a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801118c:	a801      	add	r0, sp, #4
 801118e:	f7ff ff6d 	bl	801106c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011192:	9b08      	ldr	r3, [sp, #32]
}
 8011194:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011196:	802b      	strh	r3, [r5, #0]
}
 8011198:	b00b      	add	sp, #44	; 0x2c
 801119a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801119c:	a801      	add	r0, sp, #4
 801119e:	f7ff ff65 	bl	801106c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80111a2:	9b08      	ldr	r3, [sp, #32]
}
 80111a4:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80111a6:	0a5b      	lsrs	r3, r3, #9
 80111a8:	602b      	str	r3, [r5, #0]
}
 80111aa:	b00b      	add	sp, #44	; 0x2c
 80111ac:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 80111ae:	2404      	movs	r4, #4
 80111b0:	e7dd      	b.n	801116e <SD_ioctl+0x1e>
 80111b2:	bf00      	nop
 80111b4:	200006f8 	.word	0x200006f8

080111b8 <SD_write>:
{
 80111b8:	b508      	push	{r3, lr}
 80111ba:	4608      	mov	r0, r1
 80111bc:	4611      	mov	r1, r2
 80111be:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80111c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111c4:	f7ff ff36 	bl	8011034 <BSP_SD_WriteBlocks>
 80111c8:	b108      	cbz	r0, 80111ce <SD_write+0x16>
  DRESULT res = RES_ERROR;
 80111ca:	2001      	movs	r0, #1
}
 80111cc:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 80111ce:	f7ff ff43 	bl	8011058 <BSP_SD_GetCardState>
 80111d2:	2800      	cmp	r0, #0
 80111d4:	d0fa      	beq.n	80111cc <SD_write+0x14>
 80111d6:	f7ff ff3f 	bl	8011058 <BSP_SD_GetCardState>
 80111da:	2800      	cmp	r0, #0
 80111dc:	d1f7      	bne.n	80111ce <SD_write+0x16>
 80111de:	e7f5      	b.n	80111cc <SD_write+0x14>

080111e0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80111e0:	4b03      	ldr	r3, [pc, #12]	; (80111f0 <disk_status+0x10>)
 80111e2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80111e6:	4418      	add	r0, r3
 80111e8:	6853      	ldr	r3, [r2, #4]
 80111ea:	7a00      	ldrb	r0, [r0, #8]
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	4718      	bx	r3
 80111f0:	20019da8 	.word	0x20019da8

080111f4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80111f4:	4b07      	ldr	r3, [pc, #28]	; (8011214 <disk_initialize+0x20>)
 80111f6:	5c1a      	ldrb	r2, [r3, r0]
 80111f8:	b952      	cbnz	r2, 8011210 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80111fa:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80111fe:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 8011200:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011204:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 8011206:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801120a:	7a08      	ldrb	r0, [r1, #8]
 801120c:	6813      	ldr	r3, [r2, #0]
 801120e:	4718      	bx	r3
  }
  return stat;
}
 8011210:	2000      	movs	r0, #0
 8011212:	4770      	bx	lr
 8011214:	20019da8 	.word	0x20019da8

08011218 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011218:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801121a:	4c06      	ldr	r4, [pc, #24]	; (8011234 <disk_read+0x1c>)
 801121c:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 8011220:	4420      	add	r0, r4
 8011222:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8011226:	7a00      	ldrb	r0, [r0, #8]
 8011228:	68a4      	ldr	r4, [r4, #8]
 801122a:	46a4      	mov	ip, r4
  return res;
}
 801122c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011230:	4760      	bx	ip
 8011232:	bf00      	nop
 8011234:	20019da8 	.word	0x20019da8

08011238 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011238:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801123a:	4c06      	ldr	r4, [pc, #24]	; (8011254 <disk_write+0x1c>)
 801123c:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 8011240:	4420      	add	r0, r4
 8011242:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8011246:	7a00      	ldrb	r0, [r0, #8]
 8011248:	68e4      	ldr	r4, [r4, #12]
 801124a:	46a4      	mov	ip, r4
  return res;
}
 801124c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011250:	4760      	bx	ip
 8011252:	bf00      	nop
 8011254:	20019da8 	.word	0x20019da8

08011258 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011258:	4b04      	ldr	r3, [pc, #16]	; (801126c <disk_ioctl+0x14>)
 801125a:	eb03 0c00 	add.w	ip, r3, r0
 801125e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011262:	6843      	ldr	r3, [r0, #4]
 8011264:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8011268:	691b      	ldr	r3, [r3, #16]
 801126a:	4718      	bx	r3
 801126c:	20019da8 	.word	0x20019da8

08011270 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8011270:	4b2a      	ldr	r3, [pc, #168]	; (801131c <inc_lock+0xac>)
{
 8011272:	4684      	mov	ip, r0
 8011274:	b470      	push	{r4, r5, r6}
		if (Files[i].fs == dp->obj.fs &&
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	6804      	ldr	r4, [r0, #0]
 801127a:	4294      	cmp	r4, r2
 801127c:	d01c      	beq.n	80112b8 <inc_lock+0x48>
 801127e:	6918      	ldr	r0, [r3, #16]
 8011280:	42a0      	cmp	r0, r4
 8011282:	d005      	beq.n	8011290 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011284:	b372      	cbz	r2, 80112e4 <inc_lock+0x74>
 8011286:	2800      	cmp	r0, #0
 8011288:	d044      	beq.n	8011314 <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801128a:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 801128c:	bc70      	pop	{r4, r5, r6}
 801128e:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 8011290:	695d      	ldr	r5, [r3, #20]
 8011292:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8011296:	42b5      	cmp	r5, r6
 8011298:	d1f4      	bne.n	8011284 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 801129a:	f8dc 5014 	ldr.w	r5, [ip, #20]
 801129e:	699e      	ldr	r6, [r3, #24]
 80112a0:	42ae      	cmp	r6, r5
 80112a2:	d1ef      	bne.n	8011284 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80112a4:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80112a6:	b999      	cbnz	r1, 80112d0 <inc_lock+0x60>
 80112a8:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80112ac:	1c50      	adds	r0, r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80112ae:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80112b0:	89a2      	ldrh	r2, [r4, #12]
 80112b2:	3201      	adds	r2, #1
 80112b4:	b292      	uxth	r2, r2
 80112b6:	e029      	b.n	801130c <inc_lock+0x9c>
		if (Files[i].fs == dp->obj.fs &&
 80112b8:	6880      	ldr	r0, [r0, #8]
 80112ba:	685d      	ldr	r5, [r3, #4]
 80112bc:	4285      	cmp	r5, r0
 80112be:	d1de      	bne.n	801127e <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 80112c0:	f8dc 5014 	ldr.w	r5, [ip, #20]
 80112c4:	6898      	ldr	r0, [r3, #8]
 80112c6:	4285      	cmp	r5, r0
 80112c8:	d1d9      	bne.n	801127e <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80112ca:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80112cc:	2900      	cmp	r1, #0
 80112ce:	d0eb      	beq.n	80112a8 <inc_lock+0x38>
 80112d0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80112d4:	0111      	lsls	r1, r2, #4
 80112d6:	8980      	ldrh	r0, [r0, #12]
 80112d8:	2800      	cmp	r0, #0
 80112da:	d1d6      	bne.n	801128a <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80112dc:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80112de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80112e2:	e013      	b.n	801130c <inc_lock+0x9c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80112e4:	2001      	movs	r0, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80112e6:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 80112e8:	ea4f 1102 	mov.w	r1, r2, lsl #4
 80112ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80112f0:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 80112f2:	f8dc 4014 	ldr.w	r4, [ip, #20]
 80112f6:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80112fa:	e9c2 5401 	strd	r5, r4, [r2, #4]
		Files[i].ctr = 0;
 80112fe:	f04f 0400 	mov.w	r4, #0
 8011302:	8194      	strh	r4, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011304:	bf14      	ite	ne
 8011306:	f44f 7280 	movne.w	r2, #256	; 0x100
 801130a:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801130c:	440b      	add	r3, r1
 801130e:	819a      	strh	r2, [r3, #12]
}
 8011310:	bc70      	pop	{r4, r5, r6}
 8011312:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011314:	2002      	movs	r0, #2
 8011316:	2201      	movs	r2, #1
 8011318:	e7e5      	b.n	80112e6 <inc_lock+0x76>
 801131a:	bf00      	nop
 801131c:	20019b84 	.word	0x20019b84

08011320 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8011320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011324:	440a      	add	r2, r1
 8011326:	460d      	mov	r5, r1
 8011328:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801132a:	4f37      	ldr	r7, [pc, #220]	; (8011408 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 801132c:	42aa      	cmp	r2, r5
 801132e:	d012      	beq.n	8011356 <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8011330:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011334:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011338:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801133c:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011340:	2919      	cmp	r1, #25
 8011342:	d9f3      	bls.n	801132c <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011344:	2c7f      	cmp	r4, #127	; 0x7f
 8011346:	bf88      	it	hi
 8011348:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 801134c:	2c00      	cmp	r4, #0
 801134e:	d1ed      	bne.n	801132c <pattern_matching+0xc>
 8011350:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 8011352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8011356:	1e1f      	subs	r7, r3, #0
 8011358:	f896 8000 	ldrb.w	r8, [r6]
 801135c:	bf18      	it	ne
 801135e:	2701      	movne	r7, #1
 8011360:	f1b8 0f00 	cmp.w	r8, #0
 8011364:	d100      	bne.n	8011368 <pattern_matching+0x48>
 8011366:	bb8f      	cbnz	r7, 80113cc <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011368:	4c27      	ldr	r4, [pc, #156]	; (8011408 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 801136a:	4630      	mov	r0, r6
{
 801136c:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 801136e:	46a9      	mov	r9, r5
 8011370:	e010      	b.n	8011394 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011372:	3a20      	subs	r2, #32
 8011374:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8011376:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801137a:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801137e:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011380:	f1bc 0f19 	cmp.w	ip, #25
 8011384:	d815      	bhi.n	80113b2 <pattern_matching+0x92>
 8011386:	3b20      	subs	r3, #32
 8011388:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 801138a:	4293      	cmp	r3, r2
 801138c:	d118      	bne.n	80113c0 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 801138e:	b1eb      	cbz	r3, 80113cc <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8011390:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011394:	2b3f      	cmp	r3, #63	; 0x3f
 8011396:	d01c      	beq.n	80113d2 <pattern_matching+0xb2>
 8011398:	2b2a      	cmp	r3, #42	; 0x2a
 801139a:	d01a      	beq.n	80113d2 <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801139c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80113a0:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80113a2:	2919      	cmp	r1, #25
 80113a4:	d9e5      	bls.n	8011372 <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80113a6:	2a7f      	cmp	r2, #127	; 0x7f
 80113a8:	d9e5      	bls.n	8011376 <pattern_matching+0x56>
 80113aa:	4423      	add	r3, r4
 80113ac:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 80113b0:	e7e1      	b.n	8011376 <pattern_matching+0x56>
 80113b2:	2b7f      	cmp	r3, #127	; 0x7f
 80113b4:	d9e9      	bls.n	801138a <pattern_matching+0x6a>
 80113b6:	4421      	add	r1, r4
 80113b8:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 80113bc:	4293      	cmp	r3, r2
 80113be:	d0e6      	beq.n	801138e <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80113c0:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d0c4      	beq.n	8011350 <pattern_matching+0x30>
 80113c6:	2f00      	cmp	r7, #0
 80113c8:	d1cf      	bne.n	801136a <pattern_matching+0x4a>
 80113ca:	e7c1      	b.n	8011350 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 80113cc:	2001      	movs	r0, #1
}
 80113ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113d2:	4601      	mov	r1, r0
				nm = nx = 0;
 80113d4:	2300      	movs	r3, #0
 80113d6:	f811 cb01 	ldrb.w	ip, [r1], #1
 80113da:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 80113dc:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 80113e0:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 80113e2:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 80113e6:	bf0c      	ite	eq
 80113e8:	3201      	addeq	r2, #1
 80113ea:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 80113ec:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 80113f0:	d0f4      	beq.n	80113dc <pattern_matching+0xbc>
 80113f2:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 80113f6:	d0f1      	beq.n	80113dc <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80113f8:	4649      	mov	r1, r9
 80113fa:	f7ff ff91 	bl	8011320 <pattern_matching>
 80113fe:	2800      	cmp	r0, #0
 8011400:	d1e4      	bne.n	80113cc <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
 8011402:	f899 3000 	ldrb.w	r3, [r9]
 8011406:	e7db      	b.n	80113c0 <pattern_matching+0xa0>
 8011408:	0801f4b4 	.word	0x0801f4b4

0801140c <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 801140c:	2300      	movs	r3, #0
{
 801140e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8011412:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8011416:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011418:	69c2      	ldr	r2, [r0, #28]
 801141a:	2a00      	cmp	r2, #0
 801141c:	d063      	beq.n	80114e6 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801141e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8011420:	4604      	mov	r4, r0
 8011422:	460d      	mov	r5, r1
 8011424:	3201      	adds	r2, #1
 8011426:	d01f      	beq.n	8011468 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011428:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801142c:	8818      	ldrh	r0, [r3, #0]
 801142e:	2800      	cmp	r0, #0
 8011430:	d063      	beq.n	80114fa <get_fileinfo+0xee>
 8011432:	f101 0715 	add.w	r7, r1, #21
 8011436:	2601      	movs	r6, #1
 8011438:	e000      	b.n	801143c <get_fileinfo+0x30>
 801143a:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801143c:	2100      	movs	r1, #0
 801143e:	f002 fe33 	bl	80140a8 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011442:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8011444:	2800      	cmp	r0, #0
 8011446:	d058      	beq.n	80114fa <get_fileinfo+0xee>
 8011448:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 801144c:	d055      	beq.n	80114fa <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
 801144e:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011452:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8011456:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 801145a:	2800      	cmp	r0, #0
 801145c:	d1ed      	bne.n	801143a <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 801145e:	442e      	add	r6, r5
 8011460:	2300      	movs	r3, #0
 8011462:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8011464:	7da8      	ldrb	r0, [r5, #22]
 8011466:	e000      	b.n	801146a <get_fileinfo+0x5e>
 8011468:	4618      	mov	r0, r3
	i = j = 0;
 801146a:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
 801146e:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
 8011470:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
 8011472:	6a21      	ldr	r1, [r4, #32]
 8011474:	5c8b      	ldrb	r3, [r1, r2]
 8011476:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 8011478:	2b20      	cmp	r3, #32
 801147a:	d01b      	beq.n	80114b4 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801147c:	2b05      	cmp	r3, #5
 801147e:	bf08      	it	eq
 8011480:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8011482:	2a09      	cmp	r2, #9
 8011484:	d031      	beq.n	80114ea <get_fileinfo+0xde>
		fno->altname[j] = c;
 8011486:	eb05 010c 	add.w	r1, r5, ip
 801148a:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 801148c:	b980      	cbnz	r0, 80114b0 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801148e:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 8011492:	2e19      	cmp	r6, #25
 8011494:	d80b      	bhi.n	80114ae <get_fileinfo+0xa2>
 8011496:	6a26      	ldr	r6, [r4, #32]
 8011498:	2a08      	cmp	r2, #8
 801149a:	f896 e00c 	ldrb.w	lr, [r6, #12]
 801149e:	bf8c      	ite	hi
 80114a0:	2610      	movhi	r6, #16
 80114a2:	2608      	movls	r6, #8
 80114a4:	ea1e 0f06 	tst.w	lr, r6
 80114a8:	d001      	beq.n	80114ae <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 80114aa:	3320      	adds	r3, #32
 80114ac:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 80114ae:	758b      	strb	r3, [r1, #22]
		j++;
 80114b0:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 80114b4:	2a0b      	cmp	r2, #11
 80114b6:	d1dc      	bne.n	8011472 <get_fileinfo+0x66>
		fno->fname[j] = 0;
 80114b8:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
 80114bc:	b928      	cbnz	r0, 80114ca <get_fileinfo+0xbe>
		fno->fname[j] = 0;
 80114be:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80114c0:	6a23      	ldr	r3, [r4, #32]
 80114c2:	7b1b      	ldrb	r3, [r3, #12]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	bf08      	it	eq
 80114c8:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 80114ca:	2300      	movs	r3, #0
 80114cc:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80114ce:	6a23      	ldr	r3, [r4, #32]
 80114d0:	7adb      	ldrb	r3, [r3, #11]
 80114d2:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 80114d4:	6a23      	ldr	r3, [r4, #32]
 80114d6:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80114d8:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 80114da:	6a23      	ldr	r3, [r4, #32]
 80114dc:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80114e0:	0c1a      	lsrs	r2, r3, #16
 80114e2:	80eb      	strh	r3, [r5, #6]
 80114e4:	80aa      	strh	r2, [r5, #4]
}
 80114e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 80114ea:	eb05 010c 	add.w	r1, r5, ip
 80114ee:	b900      	cbnz	r0, 80114f2 <get_fileinfo+0xe6>
 80114f0:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 80114f2:	f10c 0c01 	add.w	ip, ip, #1
 80114f6:	724f      	strb	r7, [r1, #9]
 80114f8:	e7c5      	b.n	8011486 <get_fileinfo+0x7a>
			i = j = 0;
 80114fa:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 80114fc:	2300      	movs	r3, #0
 80114fe:	442e      	add	r6, r5
 8011500:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8011502:	7da8      	ldrb	r0, [r5, #22]
 8011504:	e7b1      	b.n	801146a <get_fileinfo+0x5e>
 8011506:	bf00      	nop

08011508 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011508:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801150a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801150e:	2300      	movs	r3, #0
{
 8011510:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011512:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011514:	70c3      	strb	r3, [r0, #3]
 8011516:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011518:	d00c      	beq.n	8011534 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801151a:	460d      	mov	r5, r1
 801151c:	460a      	mov	r2, r1
 801151e:	2301      	movs	r3, #1
 8011520:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8011524:	7840      	ldrb	r0, [r0, #1]
 8011526:	f7ff fe77 	bl	8011218 <disk_read>
 801152a:	b110      	cbz	r0, 8011532 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801152c:	2004      	movs	r0, #4
			fs->winsect = sector;
 801152e:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8011530:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8011532:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011534:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011538:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 801153c:	429a      	cmp	r2, r3
 801153e:	d11a      	bne.n	8011576 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011540:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8011544:	2be9      	cmp	r3, #233	; 0xe9
 8011546:	d007      	beq.n	8011558 <check_fs+0x50>
 8011548:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801154a:	4a0d      	ldr	r2, [pc, #52]	; (8011580 <check_fs+0x78>)
 801154c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8011550:	4293      	cmp	r3, r2
 8011552:	d001      	beq.n	8011558 <check_fs+0x50>
	return 2;
 8011554:	2002      	movs	r0, #2
}
 8011556:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 8011558:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801155c:	4a09      	ldr	r2, [pc, #36]	; (8011584 <check_fs+0x7c>)
 801155e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011562:	4293      	cmp	r3, r2
 8011564:	d009      	beq.n	801157a <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 8011566:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801156a:	4b07      	ldr	r3, [pc, #28]	; (8011588 <check_fs+0x80>)
 801156c:	1ac0      	subs	r0, r0, r3
 801156e:	bf18      	it	ne
 8011570:	2001      	movne	r0, #1
 8011572:	0040      	lsls	r0, r0, #1
}
 8011574:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011576:	2003      	movs	r0, #3
}
 8011578:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801157a:	2000      	movs	r0, #0
}
 801157c:	bd70      	pop	{r4, r5, r6, pc}
 801157e:	bf00      	nop
 8011580:	009000eb 	.word	0x009000eb
 8011584:	00544146 	.word	0x00544146
 8011588:	33544146 	.word	0x33544146

0801158c <move_window>:
{
 801158c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 801158e:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
 8011590:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011592:	428e      	cmp	r6, r1
 8011594:	d024      	beq.n	80115e0 <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011596:	78c3      	ldrb	r3, [r0, #3]
 8011598:	460d      	mov	r5, r1
 801159a:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801159c:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80115a0:	b963      	cbnz	r3, 80115bc <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80115a2:	2301      	movs	r3, #1
 80115a4:	462a      	mov	r2, r5
 80115a6:	7860      	ldrb	r0, [r4, #1]
 80115a8:	f7ff fe36 	bl	8011218 <disk_read>
 80115ac:	b910      	cbnz	r0, 80115b4 <move_window+0x28>
			fs->winsect = sector;
 80115ae:	6325      	str	r5, [r4, #48]	; 0x30
}
 80115b0:	b003      	add	sp, #12
 80115b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 80115b4:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80115b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80115ba:	e7f8      	b.n	80115ae <move_window+0x22>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80115bc:	2301      	movs	r3, #1
 80115be:	4632      	mov	r2, r6
 80115c0:	7840      	ldrb	r0, [r0, #1]
 80115c2:	9101      	str	r1, [sp, #4]
 80115c4:	f7ff fe38 	bl	8011238 <disk_write>
 80115c8:	b9d0      	cbnz	r0, 8011600 <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80115ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80115cc:	69e3      	ldr	r3, [r4, #28]
 80115ce:	1ab2      	subs	r2, r6, r2
 80115d0:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 80115d2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d2e4      	bcs.n	80115a2 <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80115d8:	78a7      	ldrb	r7, [r4, #2]
 80115da:	2f01      	cmp	r7, #1
 80115dc:	d804      	bhi.n	80115e8 <move_window+0x5c>
 80115de:	e7e0      	b.n	80115a2 <move_window+0x16>
	FRESULT res = FR_OK;
 80115e0:	2000      	movs	r0, #0
}
 80115e2:	b003      	add	sp, #12
 80115e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
 80115e6:	69e3      	ldr	r3, [r4, #28]
 80115e8:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80115ea:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80115ec:	2301      	movs	r3, #1
 80115ee:	7860      	ldrb	r0, [r4, #1]
 80115f0:	4632      	mov	r2, r6
 80115f2:	9101      	str	r1, [sp, #4]
 80115f4:	f7ff fe20 	bl	8011238 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80115f8:	2f01      	cmp	r7, #1
 80115fa:	9901      	ldr	r1, [sp, #4]
 80115fc:	d1f3      	bne.n	80115e6 <move_window+0x5a>
 80115fe:	e7d0      	b.n	80115a2 <move_window+0x16>
			res = FR_DISK_ERR;
 8011600:	2001      	movs	r0, #1
}
 8011602:	b003      	add	sp, #12
 8011604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011606:	bf00      	nop

08011608 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011608:	2300      	movs	r3, #0
{
 801160a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 801160e:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8011610:	6804      	ldr	r4, [r0, #0]
 8011612:	b18c      	cbz	r4, 8011638 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011614:	7825      	ldrb	r5, [r4, #0]
 8011616:	2d1f      	cmp	r5, #31
 8011618:	d912      	bls.n	8011640 <find_volume+0x38>
 801161a:	2d3a      	cmp	r5, #58	; 0x3a
 801161c:	d010      	beq.n	8011640 <find_volume+0x38>
 801161e:	46a4      	mov	ip, r4
 8011620:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8011624:	2b1f      	cmp	r3, #31
 8011626:	d90d      	bls.n	8011644 <find_volume+0x3c>
 8011628:	2b3a      	cmp	r3, #58	; 0x3a
 801162a:	d1f9      	bne.n	8011620 <find_volume+0x18>
			i = *tp++ - '0';
 801162c:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801162e:	45a4      	cmp	ip, r4
 8011630:	d102      	bne.n	8011638 <find_volume+0x30>
 8011632:	2d30      	cmp	r5, #48	; 0x30
 8011634:	f000 80da 	beq.w	80117ec <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8011638:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 801163a:	4620      	mov	r0, r4
 801163c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011640:	462b      	mov	r3, r5
 8011642:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011644:	2b3a      	cmp	r3, #58	; 0x3a
 8011646:	d0f1      	beq.n	801162c <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011648:	4ba3      	ldr	r3, [pc, #652]	; (80118d8 <find_volume+0x2d0>)
 801164a:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801164c:	2d00      	cmp	r5, #0
 801164e:	f000 80c9 	beq.w	80117e4 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 8011652:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011654:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011658:	782b      	ldrb	r3, [r5, #0]
 801165a:	b17b      	cbz	r3, 801167c <find_volume+0x74>
		stat = disk_status(fs->drv);
 801165c:	7868      	ldrb	r0, [r5, #1]
 801165e:	f7ff fdbf 	bl	80111e0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011662:	07c1      	lsls	r1, r0, #31
 8011664:	d40a      	bmi.n	801167c <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011666:	2c00      	cmp	r4, #0
 8011668:	f000 80ab 	beq.w	80117c2 <find_volume+0x1ba>
 801166c:	f010 0404 	ands.w	r4, r0, #4
 8011670:	f000 80a7 	beq.w	80117c2 <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
 8011674:	240a      	movs	r4, #10
}
 8011676:	4620      	mov	r0, r4
 8011678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 801167c:	2000      	movs	r0, #0
 801167e:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011680:	f7ff fdb8 	bl	80111f4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011684:	07c2      	lsls	r2, r0, #31
 8011686:	f100 809f 	bmi.w	80117c8 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801168a:	b10c      	cbz	r4, 8011690 <find_volume+0x88>
 801168c:	0743      	lsls	r3, r0, #29
 801168e:	d4f1      	bmi.n	8011674 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011690:	2100      	movs	r1, #0
 8011692:	4628      	mov	r0, r5
 8011694:	f7ff ff38 	bl	8011508 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011698:	2802      	cmp	r0, #2
 801169a:	d077      	beq.n	801178c <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801169c:	2804      	cmp	r0, #4
 801169e:	f000 809f 	beq.w	80117e0 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80116a2:	2801      	cmp	r0, #1
 80116a4:	f200 808c 	bhi.w	80117c0 <find_volume+0x1b8>
	bsect = 0;
 80116a8:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80116aa:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 80116ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116b2:	f040 8085 	bne.w	80117c0 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80116b6:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80116ba:	b902      	cbnz	r2, 80116be <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
 80116bc:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80116be:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 80116c2:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80116c4:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80116c6:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80116c8:	2901      	cmp	r1, #1
 80116ca:	d879      	bhi.n	80117c0 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80116cc:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 80116d0:	b288      	uxth	r0, r1
 80116d2:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d073      	beq.n	80117c0 <find_volume+0x1b8>
 80116d8:	1e48      	subs	r0, r1, #1
 80116da:	4208      	tst	r0, r1
 80116dc:	d170      	bne.n	80117c0 <find_volume+0x1b8>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80116de:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80116e2:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80116e6:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80116ea:	d169      	bne.n	80117c0 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80116ec:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80116f0:	b900      	cbnz	r0, 80116f4 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
 80116f2:	6d68      	ldr	r0, [r5, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80116f4:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80116f8:	2f00      	cmp	r7, #0
 80116fa:	d061      	beq.n	80117c0 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80116fc:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011700:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 8011704:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011706:	42b0      	cmp	r0, r6
 8011708:	d35a      	bcc.n	80117c0 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801170a:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801170e:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011710:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011714:	d354      	bcc.n	80117c0 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011716:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 801171a:	4288      	cmp	r0, r1
 801171c:	f200 8084 	bhi.w	8011828 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011720:	f640 71f5 	movw	r1, #4085	; 0xff5
 8011724:	4288      	cmp	r0, r1
 8011726:	f200 80a3 	bhi.w	8011870 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801172a:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801172c:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 801172e:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 8011730:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011732:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8011734:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011736:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011738:	f1bc 0f00 	cmp.w	ip, #0
 801173c:	d040      	beq.n	80117c0 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801173e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8011742:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011746:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011748:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 801174c:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801174e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011752:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011754:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 8011758:	d332      	bcc.n	80117c0 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801175a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 801175e:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011760:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 8011764:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8011766:	495d      	ldr	r1, [pc, #372]	; (80118dc <find_volume+0x2d4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8011768:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801176a:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801176c:	485c      	ldr	r0, [pc, #368]	; (80118e0 <find_volume+0x2d8>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 801176e:	4a5d      	ldr	r2, [pc, #372]	; (80118e4 <find_volume+0x2dc>)
	fs->id = ++Fsid;		/* File system mount ID */
 8011770:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011772:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011774:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011776:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011778:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 801177a:	800b      	strh	r3, [r1, #0]
 801177c:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 801177e:	f000 8085 	beq.w	801188c <find_volume+0x284>
 8011782:	6913      	ldr	r3, [r2, #16]
 8011784:	429d      	cmp	r5, r3
 8011786:	d06f      	beq.n	8011868 <find_volume+0x260>
	return FR_OK;
 8011788:	2400      	movs	r4, #0
 801178a:	e01a      	b.n	80117c2 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801178c:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
 8011790:	b10e      	cbz	r6, 8011796 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 8011792:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011796:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
 801179a:	b10c      	cbz	r4, 80117a0 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 801179c:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80117a0:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
 80117a4:	b303      	cbz	r3, 80117e8 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
 80117a6:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80117aa:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
 80117ae:	b10f      	cbz	r7, 80117b4 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 80117b0:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80117b4:	b9f6      	cbnz	r6, 80117f4 <find_volume+0x1ec>
 80117b6:	bb2c      	cbnz	r4, 8011804 <find_volume+0x1fc>
 80117b8:	f1b8 0f00 	cmp.w	r8, #0
 80117bc:	d12c      	bne.n	8011818 <find_volume+0x210>
 80117be:	b93f      	cbnz	r7, 80117d0 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80117c0:	240d      	movs	r4, #13
}
 80117c2:	4620      	mov	r0, r4
 80117c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80117c8:	2403      	movs	r4, #3
}
 80117ca:	4620      	mov	r0, r4
 80117cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80117d0:	4639      	mov	r1, r7
 80117d2:	4628      	mov	r0, r5
 80117d4:	f7ff fe98 	bl	8011508 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80117d8:	2801      	cmp	r0, #1
 80117da:	d95a      	bls.n	8011892 <find_volume+0x28a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80117dc:	2804      	cmp	r0, #4
 80117de:	d1ef      	bne.n	80117c0 <find_volume+0x1b8>
 80117e0:	2401      	movs	r4, #1
 80117e2:	e7ee      	b.n	80117c2 <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80117e4:	240c      	movs	r4, #12
 80117e6:	e7ec      	b.n	80117c2 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80117e8:	4698      	mov	r8, r3
 80117ea:	e7de      	b.n	80117aa <find_volume+0x1a2>
					*path = ++tt;
 80117ec:	f10c 0301 	add.w	r3, ip, #1
 80117f0:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 80117f2:	e729      	b.n	8011648 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80117f4:	4631      	mov	r1, r6
 80117f6:	4628      	mov	r0, r5
 80117f8:	f7ff fe86 	bl	8011508 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80117fc:	2801      	cmp	r0, #1
 80117fe:	d8da      	bhi.n	80117b6 <find_volume+0x1ae>
 8011800:	4634      	mov	r4, r6
 8011802:	e752      	b.n	80116aa <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011804:	4621      	mov	r1, r4
 8011806:	4628      	mov	r0, r5
 8011808:	f7ff fe7e 	bl	8011508 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801180c:	2801      	cmp	r0, #1
 801180e:	f67f af4c 	bls.w	80116aa <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011812:	f1b8 0f00 	cmp.w	r8, #0
 8011816:	d0d2      	beq.n	80117be <find_volume+0x1b6>
 8011818:	4641      	mov	r1, r8
 801181a:	4628      	mov	r0, r5
 801181c:	f7ff fe74 	bl	8011508 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011820:	2801      	cmp	r0, #1
 8011822:	d8cc      	bhi.n	80117be <find_volume+0x1b6>
 8011824:	4644      	mov	r4, r8
 8011826:	e740      	b.n	80116aa <find_volume+0xa2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011828:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801182c:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801182e:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 8011830:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011832:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011836:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011838:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801183a:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 801183c:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801183e:	d1bf      	bne.n	80117c0 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011840:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 8011842:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011844:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011848:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801184a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 801184e:	d3b7      	bcc.n	80117c0 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011850:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 8011858:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801185a:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 801185c:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801185e:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011862:	d018      	beq.n	8011896 <find_volume+0x28e>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011864:	2003      	movs	r0, #3
 8011866:	e77e      	b.n	8011766 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011868:	2300      	movs	r3, #0
	return FR_OK;
 801186a:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 801186c:	6113      	str	r3, [r2, #16]
 801186e:	e7a8      	b.n	80117c2 <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011870:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011872:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 8011874:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 8011876:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011878:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 801187a:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801187c:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801187e:	f1bc 0f00 	cmp.w	ip, #0
 8011882:	d09d      	beq.n	80117c0 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011884:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011886:	0049      	lsls	r1, r1, #1
 8011888:	2002      	movs	r0, #2
 801188a:	e760      	b.n	801174e <find_volume+0x146>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801188c:	2300      	movs	r3, #0
 801188e:	6013      	str	r3, [r2, #0]
 8011890:	e777      	b.n	8011782 <find_volume+0x17a>
 8011892:	463c      	mov	r4, r7
 8011894:	e709      	b.n	80116aa <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011896:	1c61      	adds	r1, r4, #1
 8011898:	4628      	mov	r0, r5
 801189a:	f7ff fe77 	bl	801158c <move_window>
 801189e:	2800      	cmp	r0, #0
 80118a0:	d1e0      	bne.n	8011864 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80118a2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80118a6:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 80118aa:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d1d9      	bne.n	8011864 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 80118b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80118b2:	4b0d      	ldr	r3, [pc, #52]	; (80118e8 <find_volume+0x2e0>)
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d1d5      	bne.n	8011864 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80118b8:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 80118bc:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80118c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80118c4:	3320      	adds	r3, #32
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d1cc      	bne.n	8011864 <find_volume+0x25c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80118ca:	2003      	movs	r0, #3
 80118cc:	e9d5 3287 	ldrd	r3, r2, [r5, #540]	; 0x21c
 80118d0:	e9c5 2304 	strd	r2, r3, [r5, #16]
 80118d4:	e747      	b.n	8011766 <find_volume+0x15e>
 80118d6:	bf00      	nop
 80118d8:	20019b80 	.word	0x20019b80
 80118dc:	20019ba4 	.word	0x20019ba4
 80118e0:	20019ba8 	.word	0x20019ba8
 80118e4:	20019b84 	.word	0x20019b84
 80118e8:	41615252 	.word	0x41615252

080118ec <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 80118ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
 80118f0:	7806      	ldrb	r6, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 80118f2:	4604      	mov	r4, r0
 80118f4:	460d      	mov	r5, r1
 80118f6:	4690      	mov	r8, r2
		switch (fs->fs_type) {
 80118f8:	2e02      	cmp	r6, #2
 80118fa:	d007      	beq.n	801190c <put_fat.part.0+0x20>
 80118fc:	2e03      	cmp	r6, #3
 80118fe:	d041      	beq.n	8011984 <put_fat.part.0+0x98>
 8011900:	2e01      	cmp	r6, #1
 8011902:	d01b      	beq.n	801193c <put_fat.part.0+0x50>
 8011904:	2702      	movs	r7, #2
}
 8011906:	4638      	mov	r0, r7
 8011908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801190c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801190e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8011912:	f7ff fe3b 	bl	801158c <move_window>
			if (res != FR_OK) break;
 8011916:	4607      	mov	r7, r0
 8011918:	2800      	cmp	r0, #0
 801191a:	d1f4      	bne.n	8011906 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801191c:	006d      	lsls	r5, r5, #1
 801191e:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8011922:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
 8011926:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011928:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
}
 801192c:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
 801192e:	f803 8005 	strb.w	r8, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011932:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 8011934:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 8011936:	70e1      	strb	r1, [r4, #3]
}
 8011938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801193c:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 801193e:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011942:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8011946:	f7ff fe21 	bl	801158c <move_window>
			if (res != FR_OK) break;
 801194a:	4607      	mov	r7, r0
 801194c:	2800      	cmp	r0, #0
 801194e:	d1da      	bne.n	8011906 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011950:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 8011952:	f109 0b01 	add.w	fp, r9, #1
 8011956:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 801195a:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801195e:	d52a      	bpl.n	80119b6 <put_fat.part.0+0xca>
 8011960:	f81a 3009 	ldrb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011964:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011966:	f003 030f 	and.w	r3, r3, #15
 801196a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 801196e:	f80a 3009 	strb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011972:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8011974:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011976:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 801197a:	f7ff fe07 	bl	801158c <move_window>
			if (res != FR_OK) break;
 801197e:	b3a0      	cbz	r0, 80119ea <put_fat.part.0+0xfe>
 8011980:	4607      	mov	r7, r0
	return res;
 8011982:	e7c0      	b.n	8011906 <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011984:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8011986:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 801198a:	f7ff fdff 	bl	801158c <move_window>
			if (res != FR_OK) break;
 801198e:	4607      	mov	r7, r0
 8011990:	2800      	cmp	r0, #0
 8011992:	d1b8      	bne.n	8011906 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011994:	00ad      	lsls	r5, r5, #2
 8011996:	f104 0134 	add.w	r1, r4, #52	; 0x34
 801199a:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
 801199e:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80119a0:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 80119a4:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80119a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80119aa:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 80119ac:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
 80119ae:	70e0      	strb	r0, [r4, #3]
}
 80119b0:	4638      	mov	r0, r7
 80119b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80119b6:	f80a 8009 	strb.w	r8, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80119ba:	4620      	mov	r0, r4
 80119bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 80119be:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80119c0:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 80119c4:	f7ff fde2 	bl	801158c <move_window>
			if (res != FR_OK) break;
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d1d9      	bne.n	8011980 <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
 80119cc:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80119d0:	f3c8 2203 	ubfx	r2, r8, #8, #4
 80119d4:	f81a 300b 	ldrb.w	r3, [sl, fp]
			p = fs->win + bc % SS(fs);
 80119d8:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80119da:	f023 030f 	bic.w	r3, r3, #15
 80119de:	4313      	orrs	r3, r2
			fs->wflag = 1;
 80119e0:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80119e2:	f88a 3000 	strb.w	r3, [sl]
			fs->wflag = 1;
 80119e6:	70e2      	strb	r2, [r4, #3]
			break;
 80119e8:	e78d      	b.n	8011906 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 80119ea:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80119ee:	f3c8 1307 	ubfx	r3, r8, #4, #8
			p = fs->win + bc % SS(fs);
 80119f2:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80119f4:	e7f4      	b.n	80119e0 <put_fat.part.0+0xf4>
 80119f6:	bf00      	nop

080119f8 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80119f8:	2901      	cmp	r1, #1
 80119fa:	d90e      	bls.n	8011a1a <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80119fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80119fe:	6983      	ldr	r3, [r0, #24]
 8011a00:	460c      	mov	r4, r1
 8011a02:	4605      	mov	r5, r0
 8011a04:	4299      	cmp	r1, r3
 8011a06:	d206      	bcs.n	8011a16 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 8011a08:	7803      	ldrb	r3, [r0, #0]
 8011a0a:	2b02      	cmp	r3, #2
 8011a0c:	d021      	beq.n	8011a52 <get_fat.isra.0+0x5a>
 8011a0e:	2b03      	cmp	r3, #3
 8011a10:	d010      	beq.n	8011a34 <get_fat.isra.0+0x3c>
 8011a12:	2b01      	cmp	r3, #1
 8011a14:	d003      	beq.n	8011a1e <get_fat.isra.0+0x26>
 8011a16:	2001      	movs	r0, #1
}
 8011a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8011a1a:	2001      	movs	r0, #1
}
 8011a1c:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a1e:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 8011a20:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a24:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8011a28:	f7ff fdb0 	bl	801158c <move_window>
 8011a2c:	b1f0      	cbz	r0, 8011a6c <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8011a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011a34:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8011a36:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8011a3a:	f7ff fda7 	bl	801158c <move_window>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d1f5      	bne.n	8011a2e <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011a42:	00a4      	lsls	r4, r4, #2
 8011a44:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8011a48:	4425      	add	r5, r4
 8011a4a:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011a4c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8011a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a52:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8011a54:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8011a58:	f7ff fd98 	bl	801158c <move_window>
 8011a5c:	2800      	cmp	r0, #0
 8011a5e:	d1e6      	bne.n	8011a2e <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011a60:	0063      	lsls	r3, r4, #1
 8011a62:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011a66:	442b      	add	r3, r5
 8011a68:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
 8011a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8011a6c:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a70:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 8011a72:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a74:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8011a76:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a78:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8011a7c:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a80:	f7ff fd84 	bl	801158c <move_window>
 8011a84:	2800      	cmp	r0, #0
 8011a86:	d1d2      	bne.n	8011a2e <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011a88:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8011a8c:	442f      	add	r7, r5
 8011a8e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8011a92:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011a96:	07e3      	lsls	r3, r4, #31
 8011a98:	bf4c      	ite	mi
 8011a9a:	0900      	lsrmi	r0, r0, #4
 8011a9c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8011aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011aa2:	bf00      	nop

08011aa4 <dir_read>:
{
 8011aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 8011aa8:	69c6      	ldr	r6, [r0, #28]
{
 8011aaa:	b083      	sub	sp, #12
 8011aac:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8011aae:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 8011ab0:	2e00      	cmp	r6, #0
 8011ab2:	d064      	beq.n	8011b7e <dir_read+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 8011ab4:	23ff      	movs	r3, #255	; 0xff
 8011ab6:	468a      	mov	sl, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011ab8:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 8011abc:	4698      	mov	r8, r3
 8011abe:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011ac0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8011ac2:	42b5      	cmp	r5, r6
 8011ac4:	d014      	beq.n	8011af0 <dir_read+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011ac6:	78fb      	ldrb	r3, [r7, #3]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f040 80d1 	bne.w	8011c70 <dir_read+0x1cc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011ace:	2301      	movs	r3, #1
 8011ad0:	4632      	mov	r2, r6
 8011ad2:	4649      	mov	r1, r9
 8011ad4:	7878      	ldrb	r0, [r7, #1]
 8011ad6:	f7ff fb9f 	bl	8011218 <disk_read>
 8011ada:	b140      	cbz	r0, 8011aee <dir_read+0x4a>
			fs->winsect = sector;
 8011adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 8011ae0:	2001      	movs	r0, #1
			fs->winsect = sector;
 8011ae2:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	61e3      	str	r3, [r4, #28]
}
 8011ae8:	b003      	add	sp, #12
 8011aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8011aee:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011af0:	6a21      	ldr	r1, [r4, #32]
 8011af2:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8011af4:	2a00      	cmp	r2, #0
 8011af6:	d042      	beq.n	8011b7e <dir_read+0xda>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011af8:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011afa:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011b00:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011b02:	d00a      	beq.n	8011b1a <dir_read+0x76>
 8011b04:	2a2e      	cmp	r2, #46	; 0x2e
 8011b06:	d008      	beq.n	8011b1a <dir_read+0x76>
 8011b08:	f023 0020 	bic.w	r0, r3, #32
 8011b0c:	f1a0 0008 	sub.w	r0, r0, #8
 8011b10:	fab0 f080 	clz	r0, r0
 8011b14:	0940      	lsrs	r0, r0, #5
 8011b16:	4550      	cmp	r0, sl
 8011b18:	d038      	beq.n	8011b8c <dir_read+0xe8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011b1a:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011b1e:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 8011b20:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011b22:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011b24:	69e6      	ldr	r6, [r4, #28]
 8011b26:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8011b2a:	d228      	bcs.n	8011b7e <dir_read+0xda>
 8011b2c:	b33e      	cbz	r6, 8011b7e <dir_read+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011b2e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8011b32:	bb32      	cbnz	r2, 8011b82 <dir_read+0xde>
		dp->sect++;				/* Next sector */
 8011b34:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 8011b36:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8011b38:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8011b3a:	b961      	cbnz	r1, 8011b56 <dir_read+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011b3c:	891a      	ldrh	r2, [r3, #8]
 8011b3e:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8011b42:	d91c      	bls.n	8011b7e <dir_read+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011b44:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8011b46:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011b48:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8011b4a:	2e00      	cmp	r6, #0
 8011b4c:	d1b8      	bne.n	8011ac0 <dir_read+0x1c>
		res = move_window(fs, dp->sect);
 8011b4e:	2000      	movs	r0, #0
}
 8011b50:	b003      	add	sp, #12
 8011b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011b56:	895a      	ldrh	r2, [r3, #10]
 8011b58:	3a01      	subs	r2, #1
 8011b5a:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 8011b5e:	d1f1      	bne.n	8011b44 <dir_read+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011b60:	4618      	mov	r0, r3
 8011b62:	9301      	str	r3, [sp, #4]
 8011b64:	f7ff ff48 	bl	80119f8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011b68:	2801      	cmp	r0, #1
 8011b6a:	f240 80b5 	bls.w	8011cd8 <dir_read+0x234>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011b6e:	1c43      	adds	r3, r0, #1
 8011b70:	f000 8085 	beq.w	8011c7e <dir_read+0x1da>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011b74:	9b01      	ldr	r3, [sp, #4]
 8011b76:	699a      	ldr	r2, [r3, #24]
 8011b78:	4290      	cmp	r0, r2
 8011b7a:	f0c0 80a1 	bcc.w	8011cc0 <dir_read+0x21c>
	FRESULT res = FR_NO_FILE;
 8011b7e:	2004      	movs	r0, #4
 8011b80:	e7b0      	b.n	8011ae4 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011b82:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8011b84:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011b86:	4413      	add	r3, r2
 8011b88:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8011b8a:	e799      	b.n	8011ac0 <dir_read+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011b8c:	2b0f      	cmp	r3, #15
 8011b8e:	f040 80ab 	bne.w	8011ce8 <dir_read+0x244>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011b92:	0650      	lsls	r0, r2, #25
 8011b94:	d575      	bpl.n	8011c82 <dir_read+0x1de>
						sum = dp->dir[LDIR_Chksum];
 8011b96:	7b4b      	ldrb	r3, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 8011b98:	f002 08bf 	and.w	r8, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8011b9c:	9300      	str	r3, [sp, #0]
						dp->blk_ofs = dp->dptr;
 8011b9e:	6963      	ldr	r3, [r4, #20]
 8011ba0:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011ba2:	7b4b      	ldrb	r3, [r1, #13]
 8011ba4:	9a00      	ldr	r2, [sp, #0]
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	d1b7      	bne.n	8011b1a <dir_read+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011baa:	8b4b      	ldrh	r3, [r1, #26]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d1b4      	bne.n	8011b1a <dir_read+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011bb0:	780b      	ldrb	r3, [r1, #0]
 8011bb2:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 8011bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011bba:	3b01      	subs	r3, #1
 8011bbc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011bc0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011bc4:	2bfe      	cmp	r3, #254	; 0xfe
 8011bc6:	d8a8      	bhi.n	8011b1a <dir_read+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011bc8:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011bca:	1c5a      	adds	r2, r3, #1
 8011bcc:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 8011bd0:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	f040 8090 	bne.w	8011cfa <dir_read+0x256>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011bde:	429e      	cmp	r6, r3
 8011be0:	d19b      	bne.n	8011b1a <dir_read+0x76>
	rv = ptr[1];
 8011be2:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011bea:	459e      	cmp	lr, r3
 8011bec:	d195      	bne.n	8011b1a <dir_read+0x76>
	rv = ptr[1];
 8011bee:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011bf6:	459c      	cmp	ip, r3
 8011bf8:	d18f      	bne.n	8011b1a <dir_read+0x76>
	rv = ptr[1];
 8011bfa:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c02:	429e      	cmp	r6, r3
 8011c04:	d189      	bne.n	8011b1a <dir_read+0x76>
	rv = ptr[1];
 8011c06:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c0e:	459c      	cmp	ip, r3
 8011c10:	d183      	bne.n	8011b1a <dir_read+0x76>
	rv = ptr[1];
 8011c12:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c1a:	459e      	cmp	lr, r3
 8011c1c:	f47f af7d 	bne.w	8011b1a <dir_read+0x76>
	rv = rv << 8 | ptr[0];
 8011c20:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c26:	429e      	cmp	r6, r3
 8011c28:	f47f af77 	bne.w	8011b1a <dir_read+0x76>
	rv = ptr[1];
 8011c2c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c34:	459c      	cmp	ip, r3
 8011c36:	f47f af70 	bne.w	8011b1a <dir_read+0x76>
	rv = ptr[1];
 8011c3a:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c40:	429e      	cmp	r6, r3
 8011c42:	f47f af6a 	bne.w	8011b1a <dir_read+0x76>
	rv = ptr[1];
 8011c46:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c4e:	459c      	cmp	ip, r3
 8011c50:	f47f af63 	bne.w	8011b1a <dir_read+0x76>
	rv = ptr[1];
 8011c54:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c5a:	429e      	cmp	r6, r3
 8011c5c:	f47f af5d 	bne.w	8011b1a <dir_read+0x76>
	rv = ptr[1];
 8011c60:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c68:	459c      	cmp	ip, r3
 8011c6a:	f000 80ca 	beq.w	8011e02 <dir_read+0x35e>
 8011c6e:	e754      	b.n	8011b1a <dir_read+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011c70:	2301      	movs	r3, #1
 8011c72:	462a      	mov	r2, r5
 8011c74:	4649      	mov	r1, r9
 8011c76:	7878      	ldrb	r0, [r7, #1]
 8011c78:	f7ff fade 	bl	8011238 <disk_write>
 8011c7c:	b128      	cbz	r0, 8011c8a <dir_read+0x1e6>
	FRESULT res = FR_NO_FILE;
 8011c7e:	2001      	movs	r0, #1
 8011c80:	e730      	b.n	8011ae4 <dir_read+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011c82:	4542      	cmp	r2, r8
 8011c84:	f47f af49 	bne.w	8011b1a <dir_read+0x76>
 8011c88:	e78b      	b.n	8011ba2 <dir_read+0xfe>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 8011c8c:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011c8e:	1aea      	subs	r2, r5, r3
 8011c90:	69fb      	ldr	r3, [r7, #28]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	f4bf af1b 	bcs.w	8011ace <dir_read+0x2a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011c98:	f897 b002 	ldrb.w	fp, [r7, #2]
 8011c9c:	f1bb 0f01 	cmp.w	fp, #1
 8011ca0:	d801      	bhi.n	8011ca6 <dir_read+0x202>
 8011ca2:	e714      	b.n	8011ace <dir_read+0x2a>
					wsect += fs->fsize;
 8011ca4:	69fb      	ldr	r3, [r7, #28]
 8011ca6:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ca8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8011cac:	2301      	movs	r3, #1
 8011cae:	4649      	mov	r1, r9
 8011cb0:	462a      	mov	r2, r5
 8011cb2:	7878      	ldrb	r0, [r7, #1]
 8011cb4:	f7ff fac0 	bl	8011238 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011cb8:	f1bb 0f01 	cmp.w	fp, #1
 8011cbc:	d1f2      	bne.n	8011ca4 <dir_read+0x200>
 8011cbe:	e706      	b.n	8011ace <dir_read+0x2a>
				dp->clust = clst;		/* Initialize data for new cluster */
 8011cc0:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8011cc2:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011cc4:	699a      	ldr	r2, [r3, #24]
 8011cc6:	3a02      	subs	r2, #2
 8011cc8:	4290      	cmp	r0, r2
 8011cca:	d207      	bcs.n	8011cdc <dir_read+0x238>
	return clst * fs->csize + fs->database;
 8011ccc:	895a      	ldrh	r2, [r3, #10]
 8011cce:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8011cd0:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 8011cd4:	61e6      	str	r6, [r4, #28]
 8011cd6:	e735      	b.n	8011b44 <dir_read+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011cd8:	2002      	movs	r0, #2
 8011cda:	e703      	b.n	8011ae4 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011cdc:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 8011cde:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 8011ce2:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011ce4:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8011ce6:	e732      	b.n	8011b4e <dir_read+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011ce8:	f1b8 0f00 	cmp.w	r8, #0
 8011cec:	f000 8096 	beq.w	8011e1c <dir_read+0x378>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 8011cf4:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011cf6:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011cf8:	e6f6      	b.n	8011ae8 <dir_read+0x44>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011cfa:	2aff      	cmp	r2, #255	; 0xff
 8011cfc:	f000 80d9 	beq.w	8011eb2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011d00:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
 8011d04:	0050      	lsls	r0, r2, #1
 8011d06:	f8b1 e005 	ldrh.w	lr, [r1, #5]
 8011d0a:	1c9a      	adds	r2, r3, #2
		if (wc) {
 8011d0c:	2e00      	cmp	r6, #0
 8011d0e:	f43f af6a 	beq.w	8011be6 <dir_read+0x142>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011d12:	2aff      	cmp	r2, #255	; 0xff
 8011d14:	f000 80cd 	beq.w	8011eb2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011d18:	4428      	add	r0, r5
 8011d1a:	1cda      	adds	r2, r3, #3
 8011d1c:	f8a0 e002 	strh.w	lr, [r0, #2]
 8011d20:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
 8011d24:	f1be 0f00 	cmp.w	lr, #0
 8011d28:	f43f af63 	beq.w	8011bf2 <dir_read+0x14e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011d2c:	2aff      	cmp	r2, #255	; 0xff
 8011d2e:	f000 80c0 	beq.w	8011eb2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011d32:	f8a0 c004 	strh.w	ip, [r0, #4]
 8011d36:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
 8011d38:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
 8011d3c:	f1bc 0f00 	cmp.w	ip, #0
 8011d40:	f43f af5d 	beq.w	8011bfe <dir_read+0x15a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011d44:	2aff      	cmp	r2, #255	; 0xff
 8011d46:	f000 80b4 	beq.w	8011eb2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011d4a:	80c6      	strh	r6, [r0, #6]
 8011d4c:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
 8011d4e:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
 8011d52:	2e00      	cmp	r6, #0
 8011d54:	f43f af59 	beq.w	8011c0a <dir_read+0x166>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011d58:	2aff      	cmp	r2, #255	; 0xff
 8011d5a:	f000 80aa 	beq.w	8011eb2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011d5e:	f8a0 c008 	strh.w	ip, [r0, #8]
 8011d62:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
 8011d64:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
 8011d68:	f1bc 0f00 	cmp.w	ip, #0
 8011d6c:	f43f af53 	beq.w	8011c16 <dir_read+0x172>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011d70:	2aff      	cmp	r2, #255	; 0xff
 8011d72:	f000 809e 	beq.w	8011eb2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011d76:	f8a0 e00a 	strh.w	lr, [r0, #10]
 8011d7a:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
 8011d7c:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
 8011d7e:	f1be 0f00 	cmp.w	lr, #0
 8011d82:	f43f af4e 	beq.w	8011c22 <dir_read+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011d86:	2aff      	cmp	r2, #255	; 0xff
 8011d88:	f000 8093 	beq.w	8011eb2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011d8c:	8186      	strh	r6, [r0, #12]
 8011d8e:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
 8011d92:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
 8011d96:	2e00      	cmp	r6, #0
 8011d98:	f43f af4a 	beq.w	8011c30 <dir_read+0x18c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011d9c:	2aff      	cmp	r2, #255	; 0xff
 8011d9e:	f000 8088 	beq.w	8011eb2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011da2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8011da6:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
 8011daa:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
 8011dac:	f1bc 0f00 	cmp.w	ip, #0
 8011db0:	f43f af44 	beq.w	8011c3c <dir_read+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011db4:	2aff      	cmp	r2, #255	; 0xff
 8011db6:	d07c      	beq.n	8011eb2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011db8:	8206      	strh	r6, [r0, #16]
 8011dba:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
 8011dbe:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
 8011dc2:	2e00      	cmp	r6, #0
 8011dc4:	f43f af41 	beq.w	8011c4a <dir_read+0x1a6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011dc8:	2aff      	cmp	r2, #255	; 0xff
 8011dca:	d072      	beq.n	8011eb2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011dcc:	f8a0 c012 	strh.w	ip, [r0, #18]
 8011dd0:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
 8011dd4:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
 8011dd6:	f1bc 0f00 	cmp.w	ip, #0
 8011dda:	f43f af3c 	beq.w	8011c56 <dir_read+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011dde:	2aff      	cmp	r2, #255	; 0xff
 8011de0:	f43f ae9b 	beq.w	8011b1a <dir_read+0x76>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011de4:	8286      	strh	r6, [r0, #20]
 8011de6:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
 8011dea:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
 8011dee:	2e00      	cmp	r6, #0
 8011df0:	f43f af38 	beq.w	8011c64 <dir_read+0x1c0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011df4:	2aff      	cmp	r2, #255	; 0xff
 8011df6:	f43f ae90 	beq.w	8011b1a <dir_read+0x76>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011dfa:	f103 020d 	add.w	r2, r3, #13
 8011dfe:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8011e02:	780b      	ldrb	r3, [r1, #0]
 8011e04:	0659      	lsls	r1, r3, #25
 8011e06:	d504      	bpl.n	8011e12 <dir_read+0x36e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8011e08:	2aff      	cmp	r2, #255	; 0xff
 8011e0a:	d052      	beq.n	8011eb2 <dir_read+0x40e>
		lfnbuf[i] = 0;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011e12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011e16:	fa5f f888 	uxtb.w	r8, r8
 8011e1a:	e680      	b.n	8011b1e <dir_read+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011e1c:	780b      	ldrb	r3, [r1, #0]
 8011e1e:	01da      	lsls	r2, r3, #7
 8011e20:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8011e24:	784b      	ldrb	r3, [r1, #1]
 8011e26:	441a      	add	r2, r3
 8011e28:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011e2c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011e30:	788a      	ldrb	r2, [r1, #2]
 8011e32:	fa52 f383 	uxtab	r3, r2, r3
 8011e36:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8011e3a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8011e3e:	78cb      	ldrb	r3, [r1, #3]
 8011e40:	fa53 f282 	uxtab	r2, r3, r2
 8011e44:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011e48:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011e4c:	790a      	ldrb	r2, [r1, #4]
 8011e4e:	fa52 f383 	uxtab	r3, r2, r3
 8011e52:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8011e56:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8011e5a:	794b      	ldrb	r3, [r1, #5]
 8011e5c:	fa53 f282 	uxtab	r2, r3, r2
 8011e60:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011e64:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011e68:	798a      	ldrb	r2, [r1, #6]
 8011e6a:	fa52 f383 	uxtab	r3, r2, r3
 8011e6e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8011e72:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8011e76:	79cb      	ldrb	r3, [r1, #7]
 8011e78:	fa53 f282 	uxtab	r2, r3, r2
 8011e7c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011e80:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011e84:	7a0a      	ldrb	r2, [r1, #8]
 8011e86:	fa52 f383 	uxtab	r3, r2, r3
 8011e8a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8011e8e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8011e92:	7a4b      	ldrb	r3, [r1, #9]
 8011e94:	7a89      	ldrb	r1, [r1, #10]
 8011e96:	fa53 f282 	uxtab	r2, r3, r2
 8011e9a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011e9e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011ea2:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011ea4:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011ea8:	b2db      	uxtb	r3, r3
 8011eaa:	4293      	cmp	r3, r2
 8011eac:	f47f af20 	bne.w	8011cf0 <dir_read+0x24c>
 8011eb0:	e64d      	b.n	8011b4e <dir_read+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011eb2:	4690      	mov	r8, r2
 8011eb4:	e633      	b.n	8011b1e <dir_read+0x7a>
 8011eb6:	bf00      	nop

08011eb8 <sync_fs>:
{
 8011eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011eba:	78c3      	ldrb	r3, [r0, #3]
{
 8011ebc:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011ebe:	b95b      	cbnz	r3, 8011ed8 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011ec0:	7823      	ldrb	r3, [r4, #0]
 8011ec2:	2b03      	cmp	r3, #3
 8011ec4:	d029      	beq.n	8011f1a <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	7860      	ldrb	r0, [r4, #1]
 8011eca:	4611      	mov	r1, r2
 8011ecc:	f7ff f9c4 	bl	8011258 <disk_ioctl>
			res = FR_DISK_ERR;
 8011ed0:	3800      	subs	r0, #0
 8011ed2:	bf18      	it	ne
 8011ed4:	2001      	movne	r0, #1
}
 8011ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8011ed8:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011eda:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8011ede:	2301      	movs	r3, #1
 8011ee0:	7840      	ldrb	r0, [r0, #1]
 8011ee2:	462a      	mov	r2, r5
 8011ee4:	4639      	mov	r1, r7
 8011ee6:	f7ff f9a7 	bl	8011238 <disk_write>
 8011eea:	2800      	cmp	r0, #0
 8011eec:	d13e      	bne.n	8011f6c <sync_fs+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011eee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011ef0:	69e3      	ldr	r3, [r4, #28]
 8011ef2:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8011ef4:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d2e2      	bcs.n	8011ec0 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011efa:	78a6      	ldrb	r6, [r4, #2]
 8011efc:	2e01      	cmp	r6, #1
 8011efe:	d801      	bhi.n	8011f04 <sync_fs+0x4c>
 8011f00:	e7de      	b.n	8011ec0 <sync_fs+0x8>
					wsect += fs->fsize;
 8011f02:	69e3      	ldr	r3, [r4, #28]
 8011f04:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011f06:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8011f08:	2301      	movs	r3, #1
 8011f0a:	4639      	mov	r1, r7
 8011f0c:	462a      	mov	r2, r5
 8011f0e:	7860      	ldrb	r0, [r4, #1]
 8011f10:	f7ff f992 	bl	8011238 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011f14:	2e01      	cmp	r6, #1
 8011f16:	d1f4      	bne.n	8011f02 <sync_fs+0x4a>
 8011f18:	e7d2      	b.n	8011ec0 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011f1a:	7925      	ldrb	r5, [r4, #4]
 8011f1c:	2d01      	cmp	r5, #1
 8011f1e:	d1d2      	bne.n	8011ec6 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8011f20:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 8011f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f28:	2100      	movs	r1, #0
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	f00a fff2 	bl	801cf14 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8011f30:	480f      	ldr	r0, [pc, #60]	; (8011f70 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 8011f32:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 8011f36:	6360      	str	r0, [r4, #52]	; 0x34
 8011f38:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 8011f3c:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011f40:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8011f42:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 8011f46:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8011f4a:	3020      	adds	r0, #32
 8011f4c:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
 8011f50:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f52:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011f56:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 8011f58:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8011f5a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011f5e:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8011f60:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011f62:	f7ff f969 	bl	8011238 <disk_write>
			fs->fsi_flag = 0;
 8011f66:	2300      	movs	r3, #0
 8011f68:	7123      	strb	r3, [r4, #4]
 8011f6a:	e7ac      	b.n	8011ec6 <sync_fs+0xe>
			res = FR_DISK_ERR;
 8011f6c:	2001      	movs	r0, #1
}
 8011f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f70:	41615252 	.word	0x41615252

08011f74 <create_chain>:
{
 8011f74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f78:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 8011f7a:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 8011f7c:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 8011f80:	2900      	cmp	r1, #0
 8011f82:	f040 80a7 	bne.w	80120d4 <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011f86:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011f8a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8011f8e:	b9c6      	cbnz	r6, 8011fc2 <create_chain+0x4e>
 8011f90:	2601      	movs	r6, #1
 8011f92:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8011f94:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011f96:	429c      	cmp	r4, r3
 8011f98:	d317      	bcc.n	8011fca <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
 8011f9a:	2e01      	cmp	r6, #1
 8011f9c:	f000 8096 	beq.w	80120cc <create_chain+0x158>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011fa0:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 8011fa4:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011fa6:	69ab      	ldr	r3, [r5, #24]
 8011fa8:	42a3      	cmp	r3, r4
 8011faa:	d906      	bls.n	8011fba <create_chain+0x46>
		switch (fs->fs_type) {
 8011fac:	782b      	ldrb	r3, [r5, #0]
 8011fae:	2b02      	cmp	r3, #2
 8011fb0:	d07e      	beq.n	80120b0 <create_chain+0x13c>
 8011fb2:	2b03      	cmp	r3, #3
 8011fb4:	d064      	beq.n	8012080 <create_chain+0x10c>
 8011fb6:	2b01      	cmp	r3, #1
 8011fb8:	d00c      	beq.n	8011fd4 <create_chain+0x60>
 8011fba:	2401      	movs	r4, #1
}
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011fc2:	42b3      	cmp	r3, r6
 8011fc4:	bf98      	it	ls
 8011fc6:	2601      	movls	r6, #1
 8011fc8:	e7e3      	b.n	8011f92 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011fca:	2c01      	cmp	r4, #1
 8011fcc:	f8d9 5000 	ldr.w	r5, [r9]
 8011fd0:	d9f3      	bls.n	8011fba <create_chain+0x46>
 8011fd2:	e7e8      	b.n	8011fa6 <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fd4:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 8011fd6:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fda:	4628      	mov	r0, r5
 8011fdc:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 8011fe0:	f7ff fad4 	bl	801158c <move_window>
 8011fe4:	2800      	cmp	r0, #0
 8011fe6:	d146      	bne.n	8012076 <create_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
 8011fe8:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fec:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 8011fee:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ff2:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8011ff4:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ff6:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8011ffa:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ffe:	f7ff fac5 	bl	801158c <move_window>
 8012002:	bbc0      	cbnz	r0, 8012076 <create_chain+0x102>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012004:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012008:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 801200a:	44ab      	add	fp, r5
 801200c:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 8012010:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012014:	bf4c      	ite	mi
 8012016:	091b      	lsrmi	r3, r3, #4
 8012018:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 801201c:	2b00      	cmp	r3, #0
 801201e:	d140      	bne.n	80120a2 <create_chain+0x12e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012020:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8012024:	42a3      	cmp	r3, r4
 8012026:	d9c8      	bls.n	8011fba <create_chain+0x46>
 8012028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801202c:	4621      	mov	r1, r4
 801202e:	4640      	mov	r0, r8
 8012030:	f7ff fc5c 	bl	80118ec <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8012034:	b958      	cbnz	r0, 801204e <create_chain+0xda>
 8012036:	b157      	cbz	r7, 801204e <create_chain+0xda>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012038:	2f01      	cmp	r7, #1
 801203a:	d0be      	beq.n	8011fba <create_chain+0x46>
 801203c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8012040:	429f      	cmp	r7, r3
 8012042:	d2ba      	bcs.n	8011fba <create_chain+0x46>
 8012044:	4622      	mov	r2, r4
 8012046:	4639      	mov	r1, r7
 8012048:	4640      	mov	r0, r8
 801204a:	f7ff fc4f 	bl	80118ec <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801204e:	b980      	cbnz	r0, 8012072 <create_chain+0xfe>
		fs->last_clst = ncl;
 8012050:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012054:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 8012058:	3b02      	subs	r3, #2
 801205a:	429a      	cmp	r2, r3
 801205c:	d802      	bhi.n	8012064 <create_chain+0xf0>
 801205e:	3a01      	subs	r2, #1
 8012060:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 8012064:	f898 3004 	ldrb.w	r3, [r8, #4]
 8012068:	f043 0301 	orr.w	r3, r3, #1
 801206c:	f888 3004 	strb.w	r3, [r8, #4]
 8012070:	e7a4      	b.n	8011fbc <create_chain+0x48>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012072:	2801      	cmp	r0, #1
 8012074:	d1a1      	bne.n	8011fba <create_chain+0x46>
 8012076:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 801207a:	4620      	mov	r0, r4
 801207c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012080:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8012082:	4628      	mov	r0, r5
 8012084:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8012088:	f7ff fa80 	bl	801158c <move_window>
 801208c:	2800      	cmp	r0, #0
 801208e:	d1f2      	bne.n	8012076 <create_chain+0x102>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012090:	00a3      	lsls	r3, r4, #2
 8012092:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8012096:	441d      	add	r5, r3
 8012098:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801209a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d0be      	beq.n	8012020 <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d089      	beq.n	8011fba <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 80120a6:	42a6      	cmp	r6, r4
 80120a8:	d010      	beq.n	80120cc <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80120aa:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80120ae:	e771      	b.n	8011f94 <create_chain+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80120b0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80120b2:	4628      	mov	r0, r5
 80120b4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80120b8:	f7ff fa68 	bl	801158c <move_window>
 80120bc:	2800      	cmp	r0, #0
 80120be:	d1da      	bne.n	8012076 <create_chain+0x102>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80120c0:	0063      	lsls	r3, r4, #1
 80120c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80120c6:	442b      	add	r3, r5
 80120c8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			break;
 80120ca:	e7a7      	b.n	801201c <create_chain+0xa8>
				if (ncl > scl) return 0;	/* No free cluster */
 80120cc:	2400      	movs	r4, #0
}
 80120ce:	4620      	mov	r0, r4
 80120d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80120d4:	4640      	mov	r0, r8
 80120d6:	f7ff fc8f 	bl	80119f8 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80120da:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80120dc:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 80120de:	f67f af6c 	bls.w	8011fba <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80120e2:	1c41      	adds	r1, r0, #1
 80120e4:	d0c7      	beq.n	8012076 <create_chain+0x102>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80120e6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80120ea:	4283      	cmp	r3, r0
 80120ec:	f63f af66 	bhi.w	8011fbc <create_chain+0x48>
 80120f0:	463e      	mov	r6, r7
 80120f2:	e74e      	b.n	8011f92 <create_chain+0x1e>

080120f4 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80120f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 80120f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 80120fc:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012100:	d24e      	bcs.n	80121a0 <dir_sdi+0xac>
 8012102:	06ca      	lsls	r2, r1, #27
 8012104:	460c      	mov	r4, r1
 8012106:	d14b      	bne.n	80121a0 <dir_sdi+0xac>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012108:	6885      	ldr	r5, [r0, #8]
 801210a:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 801210c:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801210e:	2d00      	cmp	r5, #0
 8012110:	d049      	beq.n	80121a6 <dir_sdi+0xb2>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012112:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012116:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801211a:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 801211e:	f0c0 8084 	bcc.w	801222a <dir_sdi+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012122:	2d01      	cmp	r5, #1
 8012124:	d03c      	beq.n	80121a0 <dir_sdi+0xac>
 8012126:	4647      	mov	r7, r8
 8012128:	e037      	b.n	801219a <dir_sdi+0xa6>
		switch (fs->fs_type) {
 801212a:	783b      	ldrb	r3, [r7, #0]
 801212c:	2b02      	cmp	r3, #2
 801212e:	d06e      	beq.n	801220e <dir_sdi+0x11a>
 8012130:	2b03      	cmp	r3, #3
 8012132:	d05c      	beq.n	80121ee <dir_sdi+0xfa>
 8012134:	2b01      	cmp	r3, #1
 8012136:	d133      	bne.n	80121a0 <dir_sdi+0xac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012138:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 801213a:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801213e:	4638      	mov	r0, r7
 8012140:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8012144:	f7ff fa22 	bl	801158c <move_window>
 8012148:	2800      	cmp	r0, #0
 801214a:	d14d      	bne.n	80121e8 <dir_sdi+0xf4>
			wc = fs->win[bc++ % SS(fs)];
 801214c:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012150:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 8012152:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012156:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 8012158:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801215a:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 801215e:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012162:	f7ff fa13 	bl	801158c <move_window>
 8012166:	2800      	cmp	r0, #0
 8012168:	d13e      	bne.n	80121e8 <dir_sdi+0xf4>
			wc |= fs->win[bc % SS(fs)] << 8;
 801216a:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 801216e:	44ba      	add	sl, r7
 8012170:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 8012174:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012178:	07eb      	lsls	r3, r5, #31
 801217a:	bf4c      	ite	mi
 801217c:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 8012180:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012184:	2d01      	cmp	r5, #1
 8012186:	d90b      	bls.n	80121a0 <dir_sdi+0xac>
 8012188:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801218c:	42ab      	cmp	r3, r5
 801218e:	d907      	bls.n	80121a0 <dir_sdi+0xac>
			ofs -= csz;
 8012190:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 8012194:	45a1      	cmp	r9, r4
 8012196:	d84a      	bhi.n	801222e <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012198:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801219a:	69bb      	ldr	r3, [r7, #24]
 801219c:	42ab      	cmp	r3, r5
 801219e:	d8c4      	bhi.n	801212a <dir_sdi+0x36>
		switch (fs->fs_type) {
 80121a0:	2002      	movs	r0, #2
}
 80121a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80121a6:	f898 3000 	ldrb.w	r3, [r8]
 80121aa:	2b02      	cmp	r3, #2
 80121ac:	d816      	bhi.n	80121dc <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80121ae:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80121b2:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80121b6:	d9f3      	bls.n	80121a0 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 80121b8:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
 80121bc:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d0ed      	beq.n	80121a0 <dir_sdi+0xac>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80121c4:	f108 0834 	add.w	r8, r8, #52	; 0x34
 80121c8:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80121cc:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
 80121d0:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80121d2:	4441      	add	r1, r8
 80121d4:	e9c6 3107 	strd	r3, r1, [r6, #28]
}
 80121d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
 80121dc:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d0e4      	beq.n	80121ae <dir_sdi+0xba>
 80121e4:	461d      	mov	r5, r3
 80121e6:	e794      	b.n	8012112 <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80121e8:	2001      	movs	r0, #1
}
 80121ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80121ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80121f0:	4638      	mov	r0, r7
 80121f2:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 80121f6:	f7ff f9c9 	bl	801158c <move_window>
 80121fa:	2800      	cmp	r0, #0
 80121fc:	d1f4      	bne.n	80121e8 <dir_sdi+0xf4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80121fe:	00ab      	lsls	r3, r5, #2
 8012200:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8012204:	443b      	add	r3, r7
 8012206:	6b5d      	ldr	r5, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012208:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 801220c:	e7ba      	b.n	8012184 <dir_sdi+0x90>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801220e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012210:	4638      	mov	r0, r7
 8012212:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8012216:	f7ff f9b9 	bl	801158c <move_window>
 801221a:	2800      	cmp	r0, #0
 801221c:	d1e4      	bne.n	80121e8 <dir_sdi+0xf4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801221e:	006b      	lsls	r3, r5, #1
 8012220:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012224:	443b      	add	r3, r7
 8012226:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			break;
 8012228:	e7ac      	b.n	8012184 <dir_sdi+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801222a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801222e:	3b02      	subs	r3, #2
	clst -= 2;
 8012230:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012232:	429a      	cmp	r2, r3
 8012234:	d206      	bcs.n	8012244 <dir_sdi+0x150>
	return clst * fs->csize + fs->database;
 8012236:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 801223a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 801223e:	fb02 3301 	mla	r3, r2, r1, r3
 8012242:	e7bb      	b.n	80121bc <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
 8012244:	2300      	movs	r3, #0
 8012246:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 801224a:	e7a9      	b.n	80121a0 <dir_sdi+0xac>

0801224c <dir_find>:
{
 801224c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012250:	2100      	movs	r1, #0
{
 8012252:	b085      	sub	sp, #20
 8012254:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8012256:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801225a:	f7ff ff4b 	bl	80120f4 <dir_sdi>
	if (res != FR_OK) return res;
 801225e:	4607      	mov	r7, r0
 8012260:	b9e8      	cbnz	r0, 801229e <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012262:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8012266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 801226a:	69e6      	ldr	r6, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801226c:	464f      	mov	r7, r9
 801226e:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012270:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 8012274:	42b5      	cmp	r5, r6
 8012276:	d018      	beq.n	80122aa <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012278:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801227c:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012280:	2b00      	cmp	r3, #0
 8012282:	f040 8085 	bne.w	8012390 <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012286:	2301      	movs	r3, #1
 8012288:	4632      	mov	r2, r6
 801228a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801228e:	f7fe ffc3 	bl	8011218 <disk_read>
 8012292:	b140      	cbz	r0, 80122a6 <dir_find+0x5a>
			fs->winsect = sector;
 8012294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 8012298:	2701      	movs	r7, #1
			fs->winsect = sector;
 801229a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 801229e:	4638      	mov	r0, r7
 80122a0:	b005      	add	sp, #20
 80122a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80122a6:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 80122aa:	6a25      	ldr	r5, [r4, #32]
 80122ac:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80122ae:	b346      	cbz	r6, 8012302 <dir_find+0xb6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80122b0:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80122b2:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80122b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80122b8:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80122ba:	d004      	beq.n	80122c6 <dir_find+0x7a>
 80122bc:	071b      	lsls	r3, r3, #28
 80122be:	d525      	bpl.n	801230c <dir_find+0xc0>
 80122c0:	2a0f      	cmp	r2, #15
 80122c2:	f000 8093 	beq.w	80123ec <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80122c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122ca:	27ff      	movs	r7, #255	; 0xff
 80122cc:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80122ce:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 80122d0:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80122d2:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80122d4:	69e6      	ldr	r6, [r4, #28]
 80122d6:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80122da:	d212      	bcs.n	8012302 <dir_find+0xb6>
 80122dc:	b18e      	cbz	r6, 8012302 <dir_find+0xb6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80122de:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80122e2:	b94a      	cbnz	r2, 80122f8 <dir_find+0xac>
		dp->sect++;				/* Next sector */
 80122e4:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 80122e6:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80122e8:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 80122ea:	2900      	cmp	r1, #0
 80122ec:	d15c      	bne.n	80123a8 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80122ee:	8919      	ldrh	r1, [r3, #8]
 80122f0:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 80122f4:	f240 813a 	bls.w	801256c <dir_find+0x320>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80122f8:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 80122fa:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80122fc:	4413      	add	r3, r2
 80122fe:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8012300:	e7b6      	b.n	8012270 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012302:	2704      	movs	r7, #4
}
 8012304:	4638      	mov	r0, r7
 8012306:	b005      	add	sp, #20
 8012308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 801230c:	2a0f      	cmp	r2, #15
 801230e:	d06d      	beq.n	80123ec <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012310:	2f00      	cmp	r7, #0
 8012312:	f000 80d9 	beq.w	80124c8 <dir_find+0x27c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012316:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
 801231a:	f017 0701 	ands.w	r7, r7, #1
 801231e:	d1d2      	bne.n	80122c6 <dir_find+0x7a>
	} while (--cnt && r == 0);
 8012320:	782a      	ldrb	r2, [r5, #0]
 8012322:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8012326:	429a      	cmp	r2, r3
 8012328:	d1cd      	bne.n	80122c6 <dir_find+0x7a>
 801232a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 801232e:	786b      	ldrb	r3, [r5, #1]
 8012330:	429a      	cmp	r2, r3
 8012332:	d1c8      	bne.n	80122c6 <dir_find+0x7a>
 8012334:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8012338:	78ab      	ldrb	r3, [r5, #2]
 801233a:	429a      	cmp	r2, r3
 801233c:	d1c3      	bne.n	80122c6 <dir_find+0x7a>
 801233e:	78ea      	ldrb	r2, [r5, #3]
 8012340:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8012344:	429a      	cmp	r2, r3
 8012346:	d1be      	bne.n	80122c6 <dir_find+0x7a>
 8012348:	792a      	ldrb	r2, [r5, #4]
 801234a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801234e:	429a      	cmp	r2, r3
 8012350:	d1b9      	bne.n	80122c6 <dir_find+0x7a>
 8012352:	796a      	ldrb	r2, [r5, #5]
 8012354:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8012358:	429a      	cmp	r2, r3
 801235a:	d1b4      	bne.n	80122c6 <dir_find+0x7a>
 801235c:	79aa      	ldrb	r2, [r5, #6]
 801235e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8012362:	429a      	cmp	r2, r3
 8012364:	d1af      	bne.n	80122c6 <dir_find+0x7a>
 8012366:	79ea      	ldrb	r2, [r5, #7]
 8012368:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801236c:	429a      	cmp	r2, r3
 801236e:	d1aa      	bne.n	80122c6 <dir_find+0x7a>
 8012370:	7a2a      	ldrb	r2, [r5, #8]
 8012372:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012376:	429a      	cmp	r2, r3
 8012378:	d1a5      	bne.n	80122c6 <dir_find+0x7a>
 801237a:	7a6a      	ldrb	r2, [r5, #9]
 801237c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012380:	429a      	cmp	r2, r3
 8012382:	d1a0      	bne.n	80122c6 <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012384:	7aaa      	ldrb	r2, [r5, #10]
 8012386:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801238a:	429a      	cmp	r2, r3
 801238c:	d19b      	bne.n	80122c6 <dir_find+0x7a>
 801238e:	e786      	b.n	801229e <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012390:	2301      	movs	r3, #1
 8012392:	462a      	mov	r2, r5
 8012394:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012398:	9100      	str	r1, [sp, #0]
 801239a:	f7fe ff4d 	bl	8011238 <disk_write>
 801239e:	9900      	ldr	r1, [sp, #0]
 80123a0:	2800      	cmp	r0, #0
 80123a2:	d06e      	beq.n	8012482 <dir_find+0x236>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80123a4:	2701      	movs	r7, #1
 80123a6:	e77a      	b.n	801229e <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80123a8:	8958      	ldrh	r0, [r3, #10]
 80123aa:	3801      	subs	r0, #1
 80123ac:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 80123b0:	d1a2      	bne.n	80122f8 <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80123b2:	4618      	mov	r0, r3
 80123b4:	9201      	str	r2, [sp, #4]
 80123b6:	9300      	str	r3, [sp, #0]
 80123b8:	f7ff fb1e 	bl	80119f8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80123bc:	2801      	cmp	r0, #1
 80123be:	f240 80d9 	bls.w	8012574 <dir_find+0x328>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80123c2:	1c43      	adds	r3, r0, #1
 80123c4:	d0ee      	beq.n	80123a4 <dir_find+0x158>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80123c6:	9b00      	ldr	r3, [sp, #0]
 80123c8:	6999      	ldr	r1, [r3, #24]
 80123ca:	4288      	cmp	r0, r1
 80123cc:	f080 80ce 	bcs.w	801256c <dir_find+0x320>
				dp->clust = clst;		/* Initialize data for new cluster */
 80123d0:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80123d2:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80123d4:	6999      	ldr	r1, [r3, #24]
 80123d6:	9a01      	ldr	r2, [sp, #4]
 80123d8:	3902      	subs	r1, #2
 80123da:	4288      	cmp	r0, r1
 80123dc:	f080 80cc 	bcs.w	8012578 <dir_find+0x32c>
	return clst * fs->csize + fs->database;
 80123e0:	8959      	ldrh	r1, [r3, #10]
 80123e2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80123e4:	fb00 6601 	mla	r6, r0, r1, r6
				dp->sect = clust2sect(fs, clst);
 80123e8:	61e6      	str	r6, [r4, #28]
 80123ea:	e785      	b.n	80122f8 <dir_find+0xac>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80123ec:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80123f0:	0658      	lsls	r0, r3, #25
 80123f2:	f53f af6c 	bmi.w	80122ce <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80123f6:	0671      	lsls	r1, r6, #25
 80123f8:	f140 80b3 	bpl.w	8012562 <dir_find+0x316>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80123fc:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80123fe:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8012402:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012406:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012408:	7b6b      	ldrb	r3, [r5, #13]
 801240a:	454b      	cmp	r3, r9
 801240c:	f040 80ac 	bne.w	8012568 <dir_find+0x31c>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012410:	8b6b      	ldrh	r3, [r5, #26]
 8012412:	2b00      	cmp	r3, #0
 8012414:	f040 80a8 	bne.w	8012568 <dir_find+0x31c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012418:	782f      	ldrb	r7, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801241a:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801241c:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012420:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 8012424:	f8df a178 	ldr.w	sl, [pc, #376]	; 80125a0 <dir_find+0x354>
 8012428:	9602      	str	r6, [sp, #8]
 801242a:	462e      	mov	r6, r5
 801242c:	3f01      	subs	r7, #1
 801242e:	f10a 0b0d 	add.w	fp, sl, #13
 8012432:	4615      	mov	r5, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012434:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012436:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 801243a:	f8cd 8000 	str.w	r8, [sp]
 801243e:	9401      	str	r4, [sp, #4]
 8012440:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012444:	e010      	b.n	8012468 <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012446:	2ffe      	cmp	r7, #254	; 0xfe
 8012448:	4620      	mov	r0, r4
 801244a:	d816      	bhi.n	801247a <dir_find+0x22e>
 801244c:	f001 fe4a 	bl	80140e4 <ff_wtoupper>
 8012450:	4680      	mov	r8, r0
 8012452:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 8012456:	3701      	adds	r7, #1
 8012458:	f001 fe44 	bl	80140e4 <ff_wtoupper>
 801245c:	4580      	cmp	r8, r0
 801245e:	4621      	mov	r1, r4
 8012460:	d10b      	bne.n	801247a <dir_find+0x22e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012462:	45d3      	cmp	fp, sl
 8012464:	f000 808a 	beq.w	801257c <dir_find+0x330>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012468:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801246c:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 801246e:	2900      	cmp	r1, #0
 8012470:	d1e9      	bne.n	8012446 <dir_find+0x1fa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012476:	429c      	cmp	r4, r3
 8012478:	d0f3      	beq.n	8012462 <dir_find+0x216>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801247a:	e9dd 8400 	ldrd	r8, r4, [sp]
 801247e:	27ff      	movs	r7, #255	; 0xff
 8012480:	e725      	b.n	80122ce <dir_find+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012482:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8012486:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801248a:	1aea      	subs	r2, r5, r3
 801248c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8012490:	429a      	cmp	r2, r3
 8012492:	f4bf aef8 	bcs.w	8012286 <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012496:	f898 a002 	ldrb.w	sl, [r8, #2]
 801249a:	f1ba 0f01 	cmp.w	sl, #1
 801249e:	f67f aef2 	bls.w	8012286 <dir_find+0x3a>
 80124a2:	468b      	mov	fp, r1
 80124a4:	e001      	b.n	80124aa <dir_find+0x25e>
					wsect += fs->fsize;
 80124a6:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80124aa:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124ac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80124b0:	2301      	movs	r3, #1
 80124b2:	4659      	mov	r1, fp
 80124b4:	462a      	mov	r2, r5
 80124b6:	f898 0001 	ldrb.w	r0, [r8, #1]
 80124ba:	f7fe febd 	bl	8011238 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124be:	f1ba 0f01 	cmp.w	sl, #1
 80124c2:	d1f0      	bne.n	80124a6 <dir_find+0x25a>
 80124c4:	4659      	mov	r1, fp
 80124c6:	e6de      	b.n	8012286 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80124c8:	782a      	ldrb	r2, [r5, #0]
 80124ca:	7869      	ldrb	r1, [r5, #1]
 80124cc:	01d0      	lsls	r0, r2, #7
 80124ce:	78ae      	ldrb	r6, [r5, #2]
 80124d0:	78eb      	ldrb	r3, [r5, #3]
 80124d2:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
 80124d6:	792a      	ldrb	r2, [r5, #4]
 80124d8:	f895 a005 	ldrb.w	sl, [r5, #5]
 80124dc:	4408      	add	r0, r1
 80124de:	f895 e006 	ldrb.w	lr, [r5, #6]
 80124e2:	f895 c007 	ldrb.w	ip, [r5, #7]
 80124e6:	f3c0 0146 	ubfx	r1, r0, #1, #7
 80124ea:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 80124ee:	7a68      	ldrb	r0, [r5, #9]
 80124f0:	fa56 f181 	uxtab	r1, r6, r1
 80124f4:	7a2e      	ldrb	r6, [r5, #8]
 80124f6:	f3c1 0b46 	ubfx	fp, r1, #1, #7
 80124fa:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
 80124fe:	7aa9      	ldrb	r1, [r5, #10]
 8012500:	fa53 fb8b 	uxtab	fp, r3, fp
 8012504:	f3cb 0346 	ubfx	r3, fp, #1, #7
 8012508:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
 801250c:	fa52 f383 	uxtab	r3, r2, r3
 8012510:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8012514:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8012518:	fa5a f282 	uxtab	r2, sl, r2
 801251c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012520:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012524:	fa5e f383 	uxtab	r3, lr, r3
 8012528:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801252c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8012530:	fa5c f282 	uxtab	r2, ip, r2
 8012534:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012538:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801253c:	fa56 f383 	uxtab	r3, r6, r3
 8012540:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8012544:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 8012548:	fa50 f282 	uxtab	r2, r0, r2
 801254c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012550:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012554:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012558:	b2db      	uxtb	r3, r3
 801255a:	4599      	cmp	r9, r3
 801255c:	f47f aedb 	bne.w	8012316 <dir_find+0xca>
 8012560:	e69d      	b.n	801229e <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012562:	42b7      	cmp	r7, r6
 8012564:	f43f af50 	beq.w	8012408 <dir_find+0x1bc>
 8012568:	27ff      	movs	r7, #255	; 0xff
 801256a:	e6b0      	b.n	80122ce <dir_find+0x82>
				dp->sect = 0; return FR_NO_FILE;
 801256c:	2300      	movs	r3, #0
 801256e:	2704      	movs	r7, #4
 8012570:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 8012572:	e694      	b.n	801229e <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012574:	2702      	movs	r7, #2
 8012576:	e692      	b.n	801229e <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012578:	4616      	mov	r6, r2
 801257a:	e735      	b.n	80123e8 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801257c:	4635      	mov	r5, r6
 801257e:	f8dd 8000 	ldr.w	r8, [sp]
 8012582:	782b      	ldrb	r3, [r5, #0]
 8012584:	065a      	lsls	r2, r3, #25
 8012586:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 801258a:	d500      	bpl.n	801258e <dir_find+0x342>
 801258c:	b911      	cbnz	r1, 8012594 <dir_find+0x348>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801258e:	3e01      	subs	r6, #1
 8012590:	b2f7      	uxtb	r7, r6
 8012592:	e69c      	b.n	80122ce <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012594:	9b03      	ldr	r3, [sp, #12]
 8012596:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d0f7      	beq.n	801258e <dir_find+0x342>
 801259e:	e7e3      	b.n	8012568 <dir_find+0x31c>
 80125a0:	0801f534 	.word	0x0801f534

080125a4 <follow_path>:
{
 80125a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80125a8:	780b      	ldrb	r3, [r1, #0]
{
 80125aa:	b083      	sub	sp, #12
 80125ac:	4688      	mov	r8, r1
 80125ae:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80125b0:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 80125b2:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80125b6:	d103      	bne.n	80125c0 <follow_path+0x1c>
 80125b8:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 80125bc:	2b2f      	cmp	r3, #47	; 0x2f
 80125be:	d0fb      	beq.n	80125b8 <follow_path+0x14>
 80125c0:	2b5c      	cmp	r3, #92	; 0x5c
 80125c2:	d0f9      	beq.n	80125b8 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 80125c4:	2100      	movs	r1, #0
 80125c6:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80125c8:	f898 3000 	ldrb.w	r3, [r8]
 80125cc:	2b1f      	cmp	r3, #31
 80125ce:	f240 8147 	bls.w	8012860 <follow_path+0x2bc>
 80125d2:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 80125d4:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80125d6:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 80125d8:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 80125da:	d929      	bls.n	8012630 <follow_path+0x8c>
 80125dc:	f1a5 0902 	sub.w	r9, r5, #2
 80125e0:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 80125e2:	2401      	movs	r4, #1
 80125e4:	e008      	b.n	80125f8 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 80125e6:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 80125ea:	1c63      	adds	r3, r4, #1
 80125ec:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 80125f0:	281f      	cmp	r0, #31
 80125f2:	f240 80f6 	bls.w	80127e2 <follow_path+0x23e>
		w = p[si++];					/* Get a character */
 80125f6:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80125f8:	282f      	cmp	r0, #47	; 0x2f
 80125fa:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 80125fe:	d01d      	beq.n	801263c <follow_path+0x98>
 8012600:	285c      	cmp	r0, #92	; 0x5c
 8012602:	d01b      	beq.n	801263c <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012604:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8012608:	d00e      	beq.n	8012628 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801260a:	2101      	movs	r1, #1
 801260c:	f001 fd4c 	bl	80140a8 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012610:	b150      	cbz	r0, 8012628 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012612:	287f      	cmp	r0, #127	; 0x7f
 8012614:	d8e7      	bhi.n	80125e6 <follow_path+0x42>
	while (*str && *str != chr) str++;
 8012616:	2322      	movs	r3, #34	; 0x22
 8012618:	4aa5      	ldr	r2, [pc, #660]	; (80128b0 <follow_path+0x30c>)
 801261a:	e003      	b.n	8012624 <follow_path+0x80>
 801261c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012620:	2b00      	cmp	r3, #0
 8012622:	d0e0      	beq.n	80125e6 <follow_path+0x42>
 8012624:	4298      	cmp	r0, r3
 8012626:	d1f9      	bne.n	801261c <follow_path+0x78>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012628:	2006      	movs	r0, #6
}
 801262a:	b003      	add	sp, #12
 801262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 8012630:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012632:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 8012634:	802b      	strh	r3, [r5, #0]
}
 8012636:	b003      	add	sp, #12
 8012638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801263c:	f818 3004 	ldrb.w	r3, [r8, r4]
 8012640:	eb08 0204 	add.w	r2, r8, r4
 8012644:	2b2f      	cmp	r3, #47	; 0x2f
 8012646:	d002      	beq.n	801264e <follow_path+0xaa>
 8012648:	2b5c      	cmp	r3, #92	; 0x5c
 801264a:	f040 811e 	bne.w	801288a <follow_path+0x2e6>
 801264e:	1c63      	adds	r3, r4, #1
 8012650:	4443      	add	r3, r8
 8012652:	4698      	mov	r8, r3
 8012654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012658:	2a2f      	cmp	r2, #47	; 0x2f
 801265a:	d0fa      	beq.n	8012652 <follow_path+0xae>
 801265c:	2a5c      	cmp	r2, #92	; 0x5c
 801265e:	d0f8      	beq.n	8012652 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012660:	f1ba 0f00 	cmp.w	sl, #0
 8012664:	d0e4      	beq.n	8012630 <follow_path+0x8c>
 8012666:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012668:	2400      	movs	r4, #0
 801266a:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 801266e:	e002      	b.n	8012676 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012670:	f1ba 0a01 	subs.w	sl, sl, #1
 8012674:	d0dc      	beq.n	8012630 <follow_path+0x8c>
		w = lfn[di - 1];
 8012676:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 801267a:	2b20      	cmp	r3, #32
 801267c:	d0f8      	beq.n	8012670 <follow_path+0xcc>
 801267e:	2b2e      	cmp	r3, #46	; 0x2e
 8012680:	d0f6      	beq.n	8012670 <follow_path+0xcc>
		*d++ = (BYTE)val;
 8012682:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8012686:	2100      	movs	r1, #0
		*d++ = (BYTE)val;
 8012688:	f242 0220 	movw	r2, #8224	; 0x2020
	lfn[di] = 0;						/* LFN is created */
 801268c:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 8012690:	627b      	str	r3, [r7, #36]	; 0x24
 8012692:	62bb      	str	r3, [r7, #40]	; 0x28
 8012694:	2320      	movs	r3, #32
 8012696:	85ba      	strh	r2, [r7, #44]	; 0x2c
 8012698:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801269c:	8828      	ldrh	r0, [r5, #0]
 801269e:	282e      	cmp	r0, #46	; 0x2e
 80126a0:	d002      	beq.n	80126a8 <follow_path+0x104>
 80126a2:	4298      	cmp	r0, r3
 80126a4:	f040 80e5 	bne.w	8012872 <follow_path+0x2ce>
 80126a8:	462a      	mov	r2, r5
 80126aa:	2300      	movs	r3, #0
 80126ac:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80126b0:	461c      	mov	r4, r3
 80126b2:	3301      	adds	r3, #1
 80126b4:	2820      	cmp	r0, #32
 80126b6:	d0f9      	beq.n	80126ac <follow_path+0x108>
 80126b8:	282e      	cmp	r0, #46	; 0x2e
 80126ba:	d0f7      	beq.n	80126ac <follow_path+0x108>
		w = lfn[si++];					/* Get an LFN character */
 80126bc:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80126be:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 80126c2:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80126c6:	2a2e      	cmp	r2, #46	; 0x2e
 80126c8:	d002      	beq.n	80126d0 <follow_path+0x12c>
 80126ca:	f1ba 0a01 	subs.w	sl, sl, #1
 80126ce:	d1f8      	bne.n	80126c2 <follow_path+0x11e>
		if (!w) break;					/* Break on end of the LFN */
 80126d0:	b3b0      	cbz	r0, 8012740 <follow_path+0x19c>
 80126d2:	2208      	movs	r2, #8
 80126d4:	4641      	mov	r1, r8
 80126d6:	2300      	movs	r3, #0
 80126d8:	46b8      	mov	r8, r7
 80126da:	462f      	mov	r7, r5
 80126dc:	4615      	mov	r5, r2
 80126de:	4699      	mov	r9, r3
 80126e0:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80126e2:	2820      	cmp	r0, #32
 80126e4:	d003      	beq.n	80126ee <follow_path+0x14a>
 80126e6:	282e      	cmp	r0, #46	; 0x2e
 80126e8:	d14d      	bne.n	8012786 <follow_path+0x1e2>
 80126ea:	45a2      	cmp	sl, r4
 80126ec:	d04b      	beq.n	8012786 <follow_path+0x1e2>
			cf |= NS_LOSS | NS_LFN; continue;
 80126ee:	f046 0603 	orr.w	r6, r6, #3
 80126f2:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 80126f4:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 80126f8:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 80126fa:	2800      	cmp	r0, #0
 80126fc:	d1f1      	bne.n	80126e2 <follow_path+0x13e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80126fe:	4647      	mov	r7, r8
 8012700:	4690      	mov	r8, r2
 8012702:	462a      	mov	r2, r5
 8012704:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8012708:	29e5      	cmp	r1, #229	; 0xe5
 801270a:	d102      	bne.n	8012712 <follow_path+0x16e>
 801270c:	2105      	movs	r1, #5
 801270e:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8012712:	2a08      	cmp	r2, #8
 8012714:	f000 8093 	beq.w	801283e <follow_path+0x29a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012718:	f003 020c 	and.w	r2, r3, #12
 801271c:	2a0c      	cmp	r2, #12
 801271e:	d065      	beq.n	80127ec <follow_path+0x248>
 8012720:	f003 0303 	and.w	r3, r3, #3
 8012724:	2b03      	cmp	r3, #3
 8012726:	d061      	beq.n	80127ec <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012728:	07b1      	lsls	r1, r6, #30
 801272a:	d409      	bmi.n	8012740 <follow_path+0x19c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801272c:	2b01      	cmp	r3, #1
 801272e:	d102      	bne.n	8012736 <follow_path+0x192>
 8012730:	f046 0610 	orr.w	r6, r6, #16
 8012734:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012736:	2a04      	cmp	r2, #4
 8012738:	d102      	bne.n	8012740 <follow_path+0x19c>
 801273a:	f046 0608 	orr.w	r6, r6, #8
 801273e:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 8012740:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012742:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8012746:	f7ff fd81 	bl	801224c <dir_find>
			ns = dp->fn[NSFLAG];
 801274a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 801274e:	2800      	cmp	r0, #0
 8012750:	d158      	bne.n	8012804 <follow_path+0x260>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012752:	075a      	lsls	r2, r3, #29
 8012754:	f53f af69 	bmi.w	801262a <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012758:	79bb      	ldrb	r3, [r7, #6]
 801275a:	06db      	lsls	r3, r3, #27
 801275c:	f140 8097 	bpl.w	801288e <follow_path+0x2ea>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012760:	697a      	ldr	r2, [r7, #20]
 8012762:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8012766:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801276a:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 801276e:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012770:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 8012772:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8012774:	d102      	bne.n	801277c <follow_path+0x1d8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012776:	8a9b      	ldrh	r3, [r3, #20]
 8012778:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801277c:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801277e:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 8012780:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012784:	e726      	b.n	80125d4 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012786:	454d      	cmp	r5, r9
 8012788:	d91c      	bls.n	80127c4 <follow_path+0x220>
 801278a:	ebaa 0104 	sub.w	r1, sl, r4
 801278e:	fab1 f181 	clz	r1, r1
 8012792:	0949      	lsrs	r1, r1, #5
 8012794:	b9b1      	cbnz	r1, 80127c4 <follow_path+0x220>
		if (w >= 0x80) {				/* Non ASCII character */
 8012796:	287f      	cmp	r0, #127	; 0x7f
 8012798:	d83c      	bhi.n	8012814 <follow_path+0x270>
	while (*str && *str != chr) str++;
 801279a:	212b      	movs	r1, #43	; 0x2b
 801279c:	f8df c118 	ldr.w	ip, [pc, #280]	; 80128b8 <follow_path+0x314>
 80127a0:	e003      	b.n	80127aa <follow_path+0x206>
 80127a2:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 80127a6:	2900      	cmp	r1, #0
 80127a8:	d052      	beq.n	8012850 <follow_path+0x2ac>
 80127aa:	4281      	cmp	r1, r0
 80127ac:	d1f9      	bne.n	80127a2 <follow_path+0x1fe>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80127ae:	f046 0603 	orr.w	r6, r6, #3
 80127b2:	205f      	movs	r0, #95	; 0x5f
 80127b4:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 80127b6:	eb08 0109 	add.w	r1, r8, r9
 80127ba:	f109 0901 	add.w	r9, r9, #1
 80127be:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 80127c2:	e797      	b.n	80126f4 <follow_path+0x150>
			if (ni == 11) {				/* Long extension */
 80127c4:	2d0b      	cmp	r5, #11
 80127c6:	d064      	beq.n	8012892 <follow_path+0x2ee>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80127c8:	45a2      	cmp	sl, r4
 80127ca:	d003      	beq.n	80127d4 <follow_path+0x230>
 80127cc:	f046 0603 	orr.w	r6, r6, #3
 80127d0:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 80127d2:	d394      	bcc.n	80126fe <follow_path+0x15a>
			b <<= 2; continue;
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80127d8:	250b      	movs	r5, #11
 80127da:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	e788      	b.n	80126f4 <follow_path+0x150>
	*path = &p[si];						/* Return pointer to the next segment */
 80127e2:	46a2      	mov	sl, r4
 80127e4:	4498      	add	r8, r3
 80127e6:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80127e8:	2404      	movs	r4, #4
 80127ea:	e73e      	b.n	801266a <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80127ec:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 80127f0:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80127f2:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80127f4:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80127f8:	f7ff fd28 	bl	801224c <dir_find>
			ns = dp->fn[NSFLAG];
 80127fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8012800:	2800      	cmp	r0, #0
 8012802:	d0a6      	beq.n	8012752 <follow_path+0x1ae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012804:	2804      	cmp	r0, #4
 8012806:	f47f af10 	bne.w	801262a <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801280a:	f013 0f04 	tst.w	r3, #4
 801280e:	bf08      	it	eq
 8012810:	2005      	moveq	r0, #5
 8012812:	e70a      	b.n	801262a <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012814:	e9cd 3200 	strd	r3, r2, [sp]
 8012818:	f001 fc46 	bl	80140a8 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801281c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012820:	b918      	cbnz	r0, 801282a <follow_path+0x286>
			cf |= NS_LFN;				/* Force create LFN entry */
 8012822:	f046 0602 	orr.w	r6, r6, #2
 8012826:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012828:	e7c1      	b.n	80127ae <follow_path+0x20a>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801282a:	4922      	ldr	r1, [pc, #136]	; (80128b4 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 801282c:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012830:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 8012832:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012834:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012838:	2800      	cmp	r0, #0
 801283a:	d0b8      	beq.n	80127ae <follow_path+0x20a>
 801283c:	e7ad      	b.n	801279a <follow_path+0x1f6>
	if (ni == 8) b <<= 2;
 801283e:	009a      	lsls	r2, r3, #2
 8012840:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012844:	2a0c      	cmp	r2, #12
 8012846:	d0d1      	beq.n	80127ec <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012848:	07b0      	lsls	r0, r6, #30
 801284a:	f57f af74 	bpl.w	8012736 <follow_path+0x192>
 801284e:	e777      	b.n	8012740 <follow_path+0x19c>
				if (IsUpper(w)) {		/* ASCII large capital */
 8012850:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8012854:	2919      	cmp	r1, #25
 8012856:	d80f      	bhi.n	8012878 <follow_path+0x2d4>
					b |= 2;
 8012858:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 801285c:	b2c0      	uxtb	r0, r0
 801285e:	e7aa      	b.n	80127b6 <follow_path+0x212>
		dp->fn[NSFLAG] = NS_NONAME;
 8012860:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8012862:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8012864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8012868:	b003      	add	sp, #12
 801286a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 801286e:	f7ff bc41 	b.w	80120f4 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012872:	4626      	mov	r6, r4
 8012874:	2401      	movs	r4, #1
 8012876:	e722      	b.n	80126be <follow_path+0x11a>
					if (IsLower(w)) {	/* ASCII small capital */
 8012878:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 801287c:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 801287e:	bf9c      	itt	ls
 8012880:	3820      	subls	r0, #32
 8012882:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 8012886:	b2c0      	uxtb	r0, r0
 8012888:	e795      	b.n	80127b6 <follow_path+0x212>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801288a:	4690      	mov	r8, r2
 801288c:	e6e8      	b.n	8012660 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801288e:	2005      	movs	r0, #5
 8012890:	e6cb      	b.n	801262a <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 8012892:	4647      	mov	r7, r8
 8012894:	4690      	mov	r8, r2
 8012896:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801289a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 801289e:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80128a0:	2ae5      	cmp	r2, #229	; 0xe5
 80128a2:	f47f af39 	bne.w	8012718 <follow_path+0x174>
 80128a6:	2205      	movs	r2, #5
 80128a8:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80128ac:	e734      	b.n	8012718 <follow_path+0x174>
 80128ae:	bf00      	nop
 80128b0:	0801f4a0 	.word	0x0801f4a0
 80128b4:	0801f4b4 	.word	0x0801f4b4
 80128b8:	0801f4ac 	.word	0x0801f4ac

080128bc <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80128bc:	2901      	cmp	r1, #1
{
 80128be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c2:	460c      	mov	r4, r1
 80128c4:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
 80128c6:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80128c8:	d914      	bls.n	80128f4 <remove_chain+0x38>
 80128ca:	69ab      	ldr	r3, [r5, #24]
 80128cc:	428b      	cmp	r3, r1
 80128ce:	d911      	bls.n	80128f4 <remove_chain+0x38>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80128d0:	4606      	mov	r6, r0
 80128d2:	4611      	mov	r1, r2
 80128d4:	b992      	cbnz	r2, 80128fc <remove_chain+0x40>
 80128d6:	462f      	mov	r7, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80128d8:	f105 0934 	add.w	r9, r5, #52	; 0x34
			fs->wflag = 1;
 80128dc:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80128e0:	429c      	cmp	r4, r3
 80128e2:	d207      	bcs.n	80128f4 <remove_chain+0x38>
		switch (fs->fs_type) {
 80128e4:	783b      	ldrb	r3, [r7, #0]
 80128e6:	2b02      	cmp	r3, #2
 80128e8:	f000 80a3 	beq.w	8012a32 <remove_chain+0x176>
 80128ec:	2b03      	cmp	r3, #3
 80128ee:	d022      	beq.n	8012936 <remove_chain+0x7a>
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d011      	beq.n	8012918 <remove_chain+0x5c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80128f4:	2002      	movs	r0, #2
}
 80128f6:	b003      	add	sp, #12
 80128f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80128fc:	4293      	cmp	r3, r2
 80128fe:	d9f9      	bls.n	80128f4 <remove_chain+0x38>
 8012900:	2a01      	cmp	r2, #1
 8012902:	d0f7      	beq.n	80128f4 <remove_chain+0x38>
 8012904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012908:	4628      	mov	r0, r5
 801290a:	f7fe ffef 	bl	80118ec <put_fat.part.0>
		if (res != FR_OK) return res;
 801290e:	2800      	cmp	r0, #0
 8012910:	d1f1      	bne.n	80128f6 <remove_chain+0x3a>
 8012912:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012914:	69bb      	ldr	r3, [r7, #24]
 8012916:	e7df      	b.n	80128d8 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012918:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 801291a:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801291e:	4638      	mov	r0, r7
 8012920:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8012924:	f7fe fe32 	bl	801158c <move_window>
 8012928:	2800      	cmp	r0, #0
 801292a:	f000 80a9 	beq.w	8012a80 <remove_chain+0x1c4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801292e:	2001      	movs	r0, #1
}
 8012930:	b003      	add	sp, #12
 8012932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012938:	4638      	mov	r0, r7
 801293a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 801293e:	f7fe fe25 	bl	801158c <move_window>
 8012942:	2800      	cmp	r0, #0
 8012944:	d1f3      	bne.n	801292e <remove_chain+0x72>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012946:	00a3      	lsls	r3, r4, #2
 8012948:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 801294c:	443b      	add	r3, r7
 801294e:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012952:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 8012956:	f1ba 0f00 	cmp.w	sl, #0
 801295a:	f000 80af 	beq.w	8012abc <remove_chain+0x200>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801295e:	f1ba 0f01 	cmp.w	sl, #1
 8012962:	d0c7      	beq.n	80128f4 <remove_chain+0x38>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012964:	69ab      	ldr	r3, [r5, #24]
 8012966:	42a3      	cmp	r3, r4
 8012968:	d9c4      	bls.n	80128f4 <remove_chain+0x38>
		switch (fs->fs_type) {
 801296a:	782f      	ldrb	r7, [r5, #0]
 801296c:	2f02      	cmp	r7, #2
 801296e:	d029      	beq.n	80129c4 <remove_chain+0x108>
 8012970:	2f03      	cmp	r7, #3
 8012972:	d047      	beq.n	8012a04 <remove_chain+0x148>
 8012974:	2f01      	cmp	r7, #1
 8012976:	d1bd      	bne.n	80128f4 <remove_chain+0x38>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012978:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 801297a:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801297e:	4628      	mov	r0, r5
 8012980:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 8012984:	f7fe fe02 	bl	801158c <move_window>
			if (res != FR_OK) break;
 8012988:	2800      	cmp	r0, #0
 801298a:	d1b4      	bne.n	80128f6 <remove_chain+0x3a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801298c:	07e2      	lsls	r2, r4, #31
			p = fs->win + bc++ % SS(fs);
 801298e:	f10b 0301 	add.w	r3, fp, #1
 8012992:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012996:	d55c      	bpl.n	8012a52 <remove_chain+0x196>
 8012998:	f819 200b 	ldrb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801299c:	4628      	mov	r0, r5
 801299e:	9301      	str	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80129a0:	f002 020f 	and.w	r2, r2, #15
 80129a4:	f809 200b 	strb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80129a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 80129aa:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80129ac:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 80129b0:	f7fe fdec 	bl	801158c <move_window>
			if (res != FR_OK) break;
 80129b4:	9b01      	ldr	r3, [sp, #4]
 80129b6:	2800      	cmp	r0, #0
 80129b8:	d19d      	bne.n	80128f6 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 80129ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129be:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80129c0:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 80129c2:	e00c      	b.n	80129de <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80129c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80129c6:	4628      	mov	r0, r5
 80129c8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80129cc:	f7fe fdde 	bl	801158c <move_window>
			if (res != FR_OK) break;
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d190      	bne.n	80128f6 <remove_chain+0x3a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80129d4:	0064      	lsls	r4, r4, #1
 80129d6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 80129da:	442c      	add	r4, r5
 80129dc:	86a0      	strh	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
 80129de:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80129e2:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 80129e6:	1e91      	subs	r1, r2, #2
 80129e8:	428b      	cmp	r3, r1
 80129ea:	d205      	bcs.n	80129f8 <remove_chain+0x13c>
			fs->free_clst++;
 80129ec:	3301      	adds	r3, #1
 80129ee:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 80129f0:	792b      	ldrb	r3, [r5, #4]
 80129f2:	f043 0301 	orr.w	r3, r3, #1
 80129f6:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80129f8:	4552      	cmp	r2, sl
 80129fa:	d95f      	bls.n	8012abc <remove_chain+0x200>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80129fc:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80129fe:	4654      	mov	r4, sl
 8012a00:	69bb      	ldr	r3, [r7, #24]
 8012a02:	e76d      	b.n	80128e0 <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012a04:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8012a06:	4628      	mov	r0, r5
 8012a08:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8012a0c:	f7fe fdbe 	bl	801158c <move_window>
			if (res != FR_OK) break;
 8012a10:	2800      	cmp	r0, #0
 8012a12:	f47f af70 	bne.w	80128f6 <remove_chain+0x3a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012a16:	00a4      	lsls	r4, r4, #2
 8012a18:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8012a1c:	f859 2004 	ldr.w	r2, [r9, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 8012a20:	f829 0004 	strh.w	r0, [r9, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012a24:	444c      	add	r4, r9
	*ptr++ = (BYTE)val; val >>= 8;
 8012a26:	0e13      	lsrs	r3, r2, #24
 8012a28:	70a0      	strb	r0, [r4, #2]
 8012a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
 8012a2e:	70e3      	strb	r3, [r4, #3]
			if (res != FR_OK) return res;
 8012a30:	e7d5      	b.n	80129de <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012a32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012a34:	4638      	mov	r0, r7
 8012a36:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8012a3a:	f7fe fda7 	bl	801158c <move_window>
 8012a3e:	2800      	cmp	r0, #0
 8012a40:	f47f af75 	bne.w	801292e <remove_chain+0x72>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012a44:	0063      	lsls	r3, r4, #1
 8012a46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012a4a:	443b      	add	r3, r7
 8012a4c:	f8b3 a034 	ldrh.w	sl, [r3, #52]	; 0x34
			break;
 8012a50:	e781      	b.n	8012956 <remove_chain+0x9a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012a52:	f809 000b 	strb.w	r0, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012a56:	4628      	mov	r0, r5
 8012a58:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 8012a5a:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012a5c:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 8012a60:	9301      	str	r3, [sp, #4]
 8012a62:	f7fe fd93 	bl	801158c <move_window>
			if (res != FR_OK) break;
 8012a66:	2800      	cmp	r0, #0
 8012a68:	f47f af45 	bne.w	80128f6 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 8012a6c:	9b01      	ldr	r3, [sp, #4]
 8012a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012a72:	f819 0003 	ldrb.w	r0, [r9, r3]
			p = fs->win + bc % SS(fs);
 8012a76:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012a78:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8012a7c:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 8012a7e:	e7ae      	b.n	80129de <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
 8012a80:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 8012a86:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a8a:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 8012a8c:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a8e:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8012a92:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a96:	f7fe fd79 	bl	801158c <move_window>
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	f47f af47 	bne.w	801292e <remove_chain+0x72>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012aa0:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012aa4:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8012aa6:	44ba      	add	sl, r7
 8012aa8:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 8012aac:	ea4b 2a03 	orr.w	sl, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012ab0:	bf4c      	ite	mi
 8012ab2:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
 8012ab6:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
 8012aba:	e74c      	b.n	8012956 <remove_chain+0x9a>
	return FR_OK;
 8012abc:	2000      	movs	r0, #0
 8012abe:	e71a      	b.n	80128f6 <remove_chain+0x3a>

08012ac0 <dir_next>:
{
 8012ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012ac4:	69c3      	ldr	r3, [r0, #28]
{
 8012ac6:	b085      	sub	sp, #20
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012ac8:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d03d      	beq.n	8012b4a <dir_next+0x8a>
 8012ace:	3520      	adds	r5, #32
 8012ad0:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8012ad4:	d239      	bcs.n	8012b4a <dir_next+0x8a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012ad6:	f3c5 0808 	ubfx	r8, r5, #0, #9
 8012ada:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8012adc:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012ade:	f1b8 0f00 	cmp.w	r8, #0
 8012ae2:	d008      	beq.n	8012af6 <dir_next+0x36>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012ae4:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012ae8:	4446      	add	r6, r8
	return FR_OK;
 8012aea:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8012aec:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012aee:	6226      	str	r6, [r4, #32]
}
 8012af0:	b005      	add	sp, #20
 8012af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
 8012af6:	460e      	mov	r6, r1
 8012af8:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8012afa:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8012afc:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8012afe:	b341      	cbz	r1, 8012b52 <dir_next+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012b00:	897b      	ldrh	r3, [r7, #10]
 8012b02:	3b01      	subs	r3, #1
 8012b04:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 8012b08:	9300      	str	r3, [sp, #0]
 8012b0a:	d1eb      	bne.n	8012ae4 <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012b0c:	4638      	mov	r0, r7
 8012b0e:	f7fe ff73 	bl	80119f8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012b12:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012b14:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012b16:	d924      	bls.n	8012b62 <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012b18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012b1c:	d023      	beq.n	8012b66 <dir_next+0xa6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012b1e:	69bb      	ldr	r3, [r7, #24]
 8012b20:	4283      	cmp	r3, r0
 8012b22:	d922      	bls.n	8012b6a <dir_next+0xaa>
	clst -= 2;
 8012b24:	1e83      	subs	r3, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012b26:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8012b2a:	4619      	mov	r1, r3
	clst -= 2;
 8012b2c:	9301      	str	r3, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
 8012b2e:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012b32:	69bb      	ldr	r3, [r7, #24]
 8012b34:	3b02      	subs	r3, #2
 8012b36:	428b      	cmp	r3, r1
 8012b38:	d904      	bls.n	8012b44 <dir_next+0x84>
	return clst * fs->csize + fs->database;
 8012b3a:	897a      	ldrh	r2, [r7, #10]
 8012b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3e:	fb01 3302 	mla	r3, r1, r2, r3
 8012b42:	9300      	str	r3, [sp, #0]
				dp->sect = clust2sect(fs, clst);
 8012b44:	9b00      	ldr	r3, [sp, #0]
 8012b46:	61e3      	str	r3, [r4, #28]
 8012b48:	e7ce      	b.n	8012ae8 <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012b4a:	2004      	movs	r0, #4
}
 8012b4c:	b005      	add	sp, #20
 8012b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012b52:	893b      	ldrh	r3, [r7, #8]
 8012b54:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8012b58:	d8c4      	bhi.n	8012ae4 <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	2004      	movs	r0, #4
 8012b5e:	61e3      	str	r3, [r4, #28]
 8012b60:	e7c6      	b.n	8012af0 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012b62:	2002      	movs	r0, #2
 8012b64:	e7c4      	b.n	8012af0 <dir_next+0x30>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012b66:	2001      	movs	r0, #1
 8012b68:	e7c2      	b.n	8012af0 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
 8012b6a:	2e00      	cmp	r6, #0
 8012b6c:	d0f5      	beq.n	8012b5a <dir_next+0x9a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012b6e:	69a1      	ldr	r1, [r4, #24]
 8012b70:	4620      	mov	r0, r4
 8012b72:	f7ff f9ff 	bl	8011f74 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012b76:	4681      	mov	r9, r0
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	d05a      	beq.n	8012c32 <dir_next+0x172>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012b7c:	2801      	cmp	r0, #1
 8012b7e:	d0f0      	beq.n	8012b62 <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012b80:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012b84:	d0ef      	beq.n	8012b66 <dir_next+0xa6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012b86:	78fb      	ldrb	r3, [r7, #3]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d154      	bne.n	8012c36 <dir_next+0x176>
 8012b8c:	f107 0b34 	add.w	fp, r7, #52	; 0x34
		*d++ = (BYTE)val;
 8012b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b94:	2100      	movs	r1, #0
 8012b96:	4658      	mov	r0, fp
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012b98:	465e      	mov	r6, fp
		*d++ = (BYTE)val;
 8012b9a:	f00a f9bb 	bl	801cf14 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012b9e:	69bb      	ldr	r3, [r7, #24]
	clst -= 2;
 8012ba0:	f1a9 0202 	sub.w	r2, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012ba4:	3b02      	subs	r3, #2
	clst -= 2;
 8012ba6:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012ba8:	429a      	cmp	r2, r3
 8012baa:	d267      	bcs.n	8012c7c <dir_next+0x1bc>
	return clst * fs->csize + fs->database;
 8012bac:	4611      	mov	r1, r2
 8012bae:	897b      	ldrh	r3, [r7, #10]
 8012bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bb2:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d036      	beq.n	8012c2a <dir_next+0x16a>
 8012bbc:	2300      	movs	r3, #0
						fs->wflag = 1;
 8012bbe:	e9cd 6402 	strd	r6, r4, [sp, #8]
 8012bc2:	465e      	mov	r6, fp
 8012bc4:	461c      	mov	r4, r3
 8012bc6:	46ab      	mov	fp, r5
 8012bc8:	4615      	mov	r5, r2
 8012bca:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012bce:	462a      	mov	r2, r5
 8012bd0:	4631      	mov	r1, r6
 8012bd2:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 8012bd4:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	f7fe fb2e 	bl	8011238 <disk_write>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d1c2      	bne.n	8012b66 <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 8012be2:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012be4:	1aea      	subs	r2, r5, r3
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d212      	bcs.n	8012c12 <dir_next+0x152>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012bec:	f897 a002 	ldrb.w	sl, [r7, #2]
 8012bf0:	f1ba 0f01 	cmp.w	sl, #1
 8012bf4:	d801      	bhi.n	8012bfa <dir_next+0x13a>
 8012bf6:	e00c      	b.n	8012c12 <dir_next+0x152>
					wsect += fs->fsize;
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012bfc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8012c00:	2301      	movs	r3, #1
 8012c02:	4631      	mov	r1, r6
 8012c04:	462a      	mov	r2, r5
 8012c06:	7878      	ldrb	r0, [r7, #1]
 8012c08:	f7fe fb16 	bl	8011238 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012c0c:	f1ba 0f01 	cmp.w	sl, #1
 8012c10:	d1f2      	bne.n	8012bf8 <dir_next+0x138>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c14:	3401      	adds	r4, #1
 8012c16:	1c5d      	adds	r5, r3, #1
 8012c18:	897b      	ldrh	r3, [r7, #10]
 8012c1a:	42a3      	cmp	r3, r4
 8012c1c:	633d      	str	r5, [r7, #48]	; 0x30
 8012c1e:	d8d4      	bhi.n	8012bca <dir_next+0x10a>
 8012c20:	462a      	mov	r2, r5
 8012c22:	4623      	mov	r3, r4
 8012c24:	465d      	mov	r5, fp
 8012c26:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					fs->winsect -= n;							/* Restore window offset */
 8012c2a:	1ad2      	subs	r2, r2, r3
 8012c2c:	9901      	ldr	r1, [sp, #4]
 8012c2e:	633a      	str	r2, [r7, #48]	; 0x30
 8012c30:	e77d      	b.n	8012b2e <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012c32:	2007      	movs	r0, #7
 8012c34:	e75c      	b.n	8012af0 <dir_next+0x30>
		wsect = fs->winsect;	/* Current sector number */
 8012c36:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012c3a:	f107 0b34 	add.w	fp, r7, #52	; 0x34
 8012c3e:	2301      	movs	r3, #1
 8012c40:	7878      	ldrb	r0, [r7, #1]
 8012c42:	4652      	mov	r2, sl
 8012c44:	4659      	mov	r1, fp
 8012c46:	f7fe faf7 	bl	8011238 <disk_write>
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	d18b      	bne.n	8012b66 <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 8012c50:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012c52:	ebaa 0203 	sub.w	r2, sl, r3
 8012c56:	69fb      	ldr	r3, [r7, #28]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d299      	bcs.n	8012b90 <dir_next+0xd0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012c5c:	78be      	ldrb	r6, [r7, #2]
 8012c5e:	2e01      	cmp	r6, #1
 8012c60:	d801      	bhi.n	8012c66 <dir_next+0x1a6>
 8012c62:	e795      	b.n	8012b90 <dir_next+0xd0>
 8012c64:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
 8012c66:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012c68:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	4659      	mov	r1, fp
 8012c6e:	4652      	mov	r2, sl
 8012c70:	7878      	ldrb	r0, [r7, #1]
 8012c72:	f7fe fae1 	bl	8011238 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012c76:	2e01      	cmp	r6, #1
 8012c78:	d1f4      	bne.n	8012c64 <dir_next+0x1a4>
 8012c7a:	e789      	b.n	8012b90 <dir_next+0xd0>
	return clst * fs->csize + fs->database;
 8012c7c:	897b      	ldrh	r3, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012c7e:	2200      	movs	r2, #0
 8012c80:	e799      	b.n	8012bb6 <dir_next+0xf6>
 8012c82:	bf00      	nop

08012c84 <dir_register>:
{
 8012c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012c88:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8012c8c:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012c8e:	f013 01a0 	ands.w	r1, r3, #160	; 0xa0
 8012c92:	9302      	str	r3, [sp, #8]
 8012c94:	f040 82ce 	bne.w	8013234 <dir_register+0x5b0>
	FATFS *fs = dp->obj.fs;
 8012c98:	f8d0 a000 	ldr.w	sl, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012c9c:	4605      	mov	r5, r0
 8012c9e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8012ca2:	8813      	ldrh	r3, [r2, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f000 82ca 	beq.w	801323e <dir_register+0x5ba>
 8012caa:	468b      	mov	fp, r1
 8012cac:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8012cb0:	f10b 0b01 	add.w	fp, fp, #1
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d1f9      	bne.n	8012cac <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 8012cb8:	f105 0724 	add.w	r7, r5, #36	; 0x24
			*d++ = *s++;
 8012cbc:	ab0a      	add	r3, sp, #40	; 0x28
 8012cbe:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012cc2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012cc6:	9b02      	ldr	r3, [sp, #8]
 8012cc8:	07dc      	lsls	r4, r3, #31
 8012cca:	d462      	bmi.n	8012d92 <dir_register+0x10e>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012ccc:	f013 0402 	ands.w	r4, r3, #2
 8012cd0:	4657      	mov	r7, sl
 8012cd2:	f000 8239 	beq.w	8013148 <dir_register+0x4c4>
 8012cd6:	4bc5      	ldr	r3, [pc, #788]	; (8012fec <dir_register+0x368>)
 8012cd8:	f10b 040c 	add.w	r4, fp, #12
	res = dir_sdi(dp, 0);
 8012cdc:	2100      	movs	r1, #0
 8012cde:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012ce0:	fba3 3404 	umull	r3, r4, r3, r4
	res = dir_sdi(dp, 0);
 8012ce4:	f7ff fa06 	bl	80120f4 <dir_sdi>
	if (res == FR_OK) {
 8012ce8:	4606      	mov	r6, r0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012cea:	08a4      	lsrs	r4, r4, #2
 8012cec:	f104 0901 	add.w	r9, r4, #1
	if (res == FR_OK) {
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	f040 8233 	bne.w	801315c <dir_register+0x4d8>
		n = 0;
 8012cf6:	4680      	mov	r8, r0
 8012cf8:	e008      	b.n	8012d0c <dir_register+0x88>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012cfa:	0952      	lsrs	r2, r2, #5
 8012cfc:	b1c3      	cbz	r3, 8012d30 <dir_register+0xac>
				n = 0;					/* Not a blank entry. Restart to search */
 8012cfe:	4690      	mov	r8, r2
			res = dir_next(dp, 1);
 8012d00:	f7ff fede 	bl	8012ac0 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012d04:	4606      	mov	r6, r0
 8012d06:	2800      	cmp	r0, #0
 8012d08:	f040 8228 	bne.w	801315c <dir_register+0x4d8>
			res = move_window(fs, dp->sect);
 8012d0c:	69e9      	ldr	r1, [r5, #28]
 8012d0e:	4638      	mov	r0, r7
 8012d10:	f7fe fc3c 	bl	801158c <move_window>
 8012d14:	4606      	mov	r6, r0
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012d16:	f108 0801 	add.w	r8, r8, #1
			res = dir_next(dp, 1);
 8012d1a:	2101      	movs	r1, #1
 8012d1c:	4628      	mov	r0, r5
			if (res != FR_OK) break;
 8012d1e:	2e00      	cmp	r6, #0
 8012d20:	f040 821c 	bne.w	801315c <dir_register+0x4d8>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012d24:	6a2b      	ldr	r3, [r5, #32]
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	2be5      	cmp	r3, #229	; 0xe5
 8012d2a:	fab3 f283 	clz	r2, r3
 8012d2e:	d1e4      	bne.n	8012cfa <dir_register+0x76>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012d30:	45c1      	cmp	r9, r8
 8012d32:	d1e5      	bne.n	8012d00 <dir_register+0x7c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012d34:	2c00      	cmp	r4, #0
 8012d36:	f040 8284 	bne.w	8013242 <dir_register+0x5be>
		res = move_window(fs, dp->sect);
 8012d3a:	69e9      	ldr	r1, [r5, #28]
 8012d3c:	4650      	mov	r0, sl
 8012d3e:	f7fe fc25 	bl	801158c <move_window>
		if (res == FR_OK) {
 8012d42:	4606      	mov	r6, r0
 8012d44:	bb08      	cbnz	r0, 8012d8a <dir_register+0x106>
		*d++ = (BYTE)val;
 8012d46:	2220      	movs	r2, #32
 8012d48:	4601      	mov	r1, r0
 8012d4a:	6a28      	ldr	r0, [r5, #32]
 8012d4c:	f00a f8e2 	bl	801cf14 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012d50:	6a2b      	ldr	r3, [r5, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012d52:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8012d56:	1a9a      	subs	r2, r3, r2
 8012d58:	2a02      	cmp	r2, #2
 8012d5a:	f240 83d3 	bls.w	8013504 <dir_register+0x880>
			*d++ = *s++;
 8012d5e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8012d60:	601a      	str	r2, [r3, #0]
 8012d62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8012d64:	605a      	str	r2, [r3, #4]
 8012d66:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 8012d6a:	721a      	strb	r2, [r3, #8]
 8012d6c:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 8012d70:	725a      	strb	r2, [r3, #9]
 8012d72:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
 8012d76:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8012d78:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012d7a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8012d7e:	6a29      	ldr	r1, [r5, #32]
 8012d80:	f003 0318 	and.w	r3, r3, #24
 8012d84:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8012d86:	f88a 2003 	strb.w	r2, [sl, #3]
}
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	b00b      	add	sp, #44	; 0x2c
 8012d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*d++ = *s++;
 8012d92:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
		for (n = 1; n < 100; n++) {
 8012d96:	f04f 0801 	mov.w	r8, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012d9a:	2240      	movs	r2, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012d9c:	f8cd b00c 	str.w	fp, [sp, #12]
			*d++ = *s++;
 8012da0:	9300      	str	r3, [sp, #0]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012da2:	46c3      	mov	fp, r8
			*d++ = *s++;
 8012da4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8012da8:	460e      	mov	r6, r1
				if (sr & 0x10000) sr ^= 0x11021;
 8012daa:	4c91      	ldr	r4, [pc, #580]	; (8012ff0 <dir_register+0x36c>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012dac:	f04f 0920 	mov.w	r9, #32
 8012db0:	4698      	mov	r8, r3
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012db2:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
			*d++ = *s++;
 8012db6:	9001      	str	r0, [sp, #4]
 8012db8:	9b01      	ldr	r3, [sp, #4]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012dba:	f1bb 0f05 	cmp.w	fp, #5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012dbe:	f8da 100c 	ldr.w	r1, [sl, #12]
			*d++ = *s++;
 8012dc2:	f8a5 802c 	strh.w	r8, [r5, #44]	; 0x2c
 8012dc6:	e9c5 3609 	strd	r3, r6, [r5, #36]	; 0x24
 8012dca:	9b00      	ldr	r3, [sp, #0]
 8012dcc:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012dd0:	f240 8135 	bls.w	801303e <dir_register+0x3ba>
		while (*lfn) {	/* Create a CRC */
 8012dd4:	880a      	ldrh	r2, [r1, #0]
 8012dd6:	2a00      	cmp	r2, #0
 8012dd8:	f000 8131 	beq.w	801303e <dir_register+0x3ba>
				sr = (sr << 1) + (wc & 1);
 8012ddc:	468c      	mov	ip, r1
 8012dde:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 8012de2:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 8012de4:	eb01 014b 	add.w	r1, r1, fp, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012de8:	e009      	b.n	8012dfe <dir_register+0x17a>
				sr = (sr << 1) + (wc & 1);
 8012dea:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012dee:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 8012df2:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 8012df6:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012dfa:	bf18      	it	ne
 8012dfc:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 8012dfe:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 8012e02:	0893      	lsrs	r3, r2, #2
 8012e04:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 8012e06:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012e0a:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 8012e0c:	f003 0301 	and.w	r3, r3, #1
 8012e10:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012e14:	bf48      	it	mi
 8012e16:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
 8012e1a:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 8012e1c:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012e20:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 8012e24:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
 8012e28:	ea4f 3ed2 	mov.w	lr, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 8012e2c:	bf18      	it	ne
 8012e2e:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
 8012e30:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012e34:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8012e36:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8012e3a:	bf48      	it	mi
 8012e3c:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8012e3e:	f003 0301 	and.w	r3, r3, #1
 8012e42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012e46:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8012e48:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8012e4c:	bf48      	it	mi
 8012e4e:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8012e50:	f000 0001 	and.w	r0, r0, #1
 8012e54:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012e58:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8012e5a:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8012e5e:	bf48      	it	mi
 8012e60:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8012e62:	f001 0101 	and.w	r1, r1, #1
 8012e66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012e6a:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8012e6c:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 8012e70:	bf48      	it	mi
 8012e72:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8012e74:	f003 0301 	and.w	r3, r3, #1
 8012e78:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012e7c:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8012e7e:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8012e82:	bf48      	it	mi
 8012e84:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8012e86:	f000 0001 	and.w	r0, r0, #1
 8012e8a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012e8e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8012e90:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 8012e94:	bf48      	it	mi
 8012e96:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8012e98:	f001 0101 	and.w	r1, r1, #1
 8012e9c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012ea0:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8012ea2:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8012ea6:	bf48      	it	mi
 8012ea8:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8012eaa:	f003 0301 	and.w	r3, r3, #1
 8012eae:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012eb2:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8012eb4:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8012eb8:	bf48      	it	mi
 8012eba:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8012ebc:	f000 0001 	and.w	r0, r0, #1
 8012ec0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012ec4:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8012ec6:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8012eca:	bf48      	it	mi
 8012ecc:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8012ece:	f001 0101 	and.w	r1, r1, #1
 8012ed2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012ed6:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8012ed8:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 8012edc:	bf48      	it	mi
 8012ede:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8012ee0:	f003 0301 	and.w	r3, r3, #1
 8012ee4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012ee8:	0400      	lsls	r0, r0, #16
 8012eea:	bf48      	it	mi
 8012eec:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 8012eee:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012ef2:	040a      	lsls	r2, r1, #16
		while (*lfn) {	/* Create a CRC */
 8012ef4:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 8012ef8:	bf48      	it	mi
 8012efa:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8012efc:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012f00:	041b      	lsls	r3, r3, #16
 8012f02:	bf48      	it	mi
 8012f04:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
 8012f08:	2a00      	cmp	r2, #0
 8012f0a:	f47f af6e 	bne.w	8012dea <dir_register+0x166>
		c = (BYTE)((seq % 16) + '0');
 8012f0e:	f00e 010f 	and.w	r1, lr, #15
 8012f12:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8012f16:	2a39      	cmp	r2, #57	; 0x39
 8012f18:	bf88      	it	hi
 8012f1a:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8012f1e:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 8012f22:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 8012f26:	f88d 201b 	strb.w	r2, [sp, #27]
	} while (seq);
 8012f2a:	f240 8156 	bls.w	80131da <dir_register+0x556>
		c = (BYTE)((seq % 16) + '0');
 8012f2e:	f001 000f 	and.w	r0, r1, #15
 8012f32:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8012f36:	2a39      	cmp	r2, #57	; 0x39
 8012f38:	bf88      	it	hi
 8012f3a:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8012f3e:	290f      	cmp	r1, #15
		seq /= 16;
 8012f40:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 8012f44:	f88d 201a 	strb.w	r2, [sp, #26]
	} while (seq);
 8012f48:	f240 814d 	bls.w	80131e6 <dir_register+0x562>
		c = (BYTE)((seq % 16) + '0');
 8012f4c:	f000 010f 	and.w	r1, r0, #15
 8012f50:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8012f54:	2a39      	cmp	r2, #57	; 0x39
 8012f56:	bf88      	it	hi
 8012f58:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8012f5c:	280f      	cmp	r0, #15
		seq /= 16;
 8012f5e:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 8012f62:	f88d 2019 	strb.w	r2, [sp, #25]
	} while (seq);
 8012f66:	f240 814d 	bls.w	8013204 <dir_register+0x580>
		c = (BYTE)((seq % 16) + '0');
 8012f6a:	f001 000f 	and.w	r0, r1, #15
 8012f6e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8012f72:	2a39      	cmp	r2, #57	; 0x39
 8012f74:	bf88      	it	hi
 8012f76:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8012f7a:	290f      	cmp	r1, #15
		seq /= 16;
 8012f7c:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 8012f80:	f88d 2018 	strb.w	r2, [sp, #24]
	} while (seq);
 8012f84:	f240 8144 	bls.w	8013210 <dir_register+0x58c>
		c = (BYTE)((seq % 16) + '0');
 8012f88:	f000 010f 	and.w	r1, r0, #15
 8012f8c:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8012f90:	2a39      	cmp	r2, #57	; 0x39
 8012f92:	bf88      	it	hi
 8012f94:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8012f98:	280f      	cmp	r0, #15
		seq /= 16;
 8012f9a:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 8012f9e:	f88d 2017 	strb.w	r2, [sp, #23]
	} while (seq);
 8012fa2:	f240 813b 	bls.w	801321c <dir_register+0x598>
		c = (BYTE)((seq % 16) + '0');
 8012fa6:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 8012faa:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 8012fae:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8012fb2:	2a39      	cmp	r2, #57	; 0x39
 8012fb4:	bf88      	it	hi
 8012fb6:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8012fba:	290f      	cmp	r1, #15
		ns[i--] = c;
 8012fbc:	f88d 2016 	strb.w	r2, [sp, #22]
	} while (seq);
 8012fc0:	f240 8132 	bls.w	8013228 <dir_register+0x5a4>
		c = (BYTE)((seq % 16) + '0');
 8012fc4:	f00e 010f 	and.w	r1, lr, #15
 8012fc8:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8012fcc:	2a39      	cmp	r2, #57	; 0x39
 8012fce:	bf88      	it	hi
 8012fd0:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8012fd4:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 8012fd8:	f88d 2015 	strb.w	r2, [sp, #21]
	} while (seq);
 8012fdc:	f240 8109 	bls.w	80131f2 <dir_register+0x56e>
		ns[i--] = c;
 8012fe0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8012fe4:	f105 0123 	add.w	r1, r5, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012fe8:	2200      	movs	r2, #0
 8012fea:	e006      	b.n	8012ffa <dir_register+0x376>
 8012fec:	4ec4ec4f 	.word	0x4ec4ec4f
 8012ff0:	00011021 	.word	0x00011021
 8012ff4:	3201      	adds	r2, #1
 8012ff6:	4562      	cmp	r2, ip
 8012ff8:	d003      	beq.n	8013002 <dir_register+0x37e>
 8012ffa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012ffe:	2b20      	cmp	r3, #32
 8013000:	d1f8      	bne.n	8012ff4 <dir_register+0x370>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013002:	f1bc 0f07 	cmp.w	ip, #7
 8013006:	d91c      	bls.n	8013042 <dir_register+0x3be>
 8013008:	1c50      	adds	r0, r2, #1
 801300a:	f807 9002 	strb.w	r9, [r7, r2]
	} while (j < 8);
 801300e:	2807      	cmp	r0, #7
 8013010:	d809      	bhi.n	8013026 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013012:	1c42      	adds	r2, r0, #1
 8013014:	2120      	movs	r1, #32
 8013016:	2a08      	cmp	r2, #8
 8013018:	f1c0 0208 	rsb	r2, r0, #8
 801301c:	4438      	add	r0, r7
 801301e:	bf88      	it	hi
 8013020:	2201      	movhi	r2, #1
 8013022:	f009 ff77 	bl	801cf14 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8013026:	4628      	mov	r0, r5
 8013028:	f7ff f910 	bl	801224c <dir_find>
			if (res != FR_OK) break;
 801302c:	2800      	cmp	r0, #0
 801302e:	d17d      	bne.n	801312c <dir_register+0x4a8>
		for (n = 1; n < 100; n++) {
 8013030:	f10b 0b01 	add.w	fp, fp, #1
 8013034:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
 8013038:	f47f aebe 	bne.w	8012db8 <dir_register+0x134>
 801303c:	e091      	b.n	8013162 <dir_register+0x4de>
 801303e:	46de      	mov	lr, fp
 8013040:	e765      	b.n	8012f0e <dir_register+0x28a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013042:	f10c 0328 	add.w	r3, ip, #40	; 0x28
 8013046:	f10c 0c01 	add.w	ip, ip, #1
 801304a:	eb0d 0103 	add.w	r1, sp, r3
 801304e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8013052:	54b9      	strb	r1, [r7, r2]
 8013054:	3201      	adds	r2, #1
	} while (j < 8);
 8013056:	2a07      	cmp	r2, #7
 8013058:	d8e5      	bhi.n	8013026 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801305a:	f1bc 0f08 	cmp.w	ip, #8
 801305e:	f000 8085 	beq.w	801316c <dir_register+0x4e8>
 8013062:	f10c 0328 	add.w	r3, ip, #40	; 0x28
	} while (j < 8);
 8013066:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013068:	f102 0001 	add.w	r0, r2, #1
 801306c:	eb0d 0103 	add.w	r1, sp, r3
 8013070:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8013074:	54b9      	strb	r1, [r7, r2]
 8013076:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 801307a:	d0d4      	beq.n	8013026 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801307c:	2908      	cmp	r1, #8
 801307e:	d07d      	beq.n	801317c <dir_register+0x4f8>
 8013080:	f10c 0329 	add.w	r3, ip, #41	; 0x29
	} while (j < 8);
 8013084:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013086:	eb0d 0103 	add.w	r1, sp, r3
 801308a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801308e:	5439      	strb	r1, [r7, r0]
 8013090:	f10c 0102 	add.w	r1, ip, #2
 8013094:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8013098:	d0c5      	beq.n	8013026 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801309a:	2908      	cmp	r1, #8
 801309c:	d076      	beq.n	801318c <dir_register+0x508>
 801309e:	f10c 032a 	add.w	r3, ip, #42	; 0x2a
	} while (j < 8);
 80130a2:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80130a4:	eb0d 0103 	add.w	r1, sp, r3
 80130a8:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80130ac:	5439      	strb	r1, [r7, r0]
 80130ae:	f10c 0103 	add.w	r1, ip, #3
 80130b2:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 80130b6:	d0b6      	beq.n	8013026 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80130b8:	2908      	cmp	r1, #8
 80130ba:	d06f      	beq.n	801319c <dir_register+0x518>
 80130bc:	f10c 032b 	add.w	r3, ip, #43	; 0x2b
	} while (j < 8);
 80130c0:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80130c2:	eb0d 0103 	add.w	r1, sp, r3
 80130c6:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80130ca:	5439      	strb	r1, [r7, r0]
 80130cc:	f10c 0104 	add.w	r1, ip, #4
 80130d0:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 80130d4:	d0a7      	beq.n	8013026 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80130d6:	2908      	cmp	r1, #8
 80130d8:	d068      	beq.n	80131ac <dir_register+0x528>
 80130da:	f10c 032c 	add.w	r3, ip, #44	; 0x2c
	} while (j < 8);
 80130de:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80130e0:	eb0d 0103 	add.w	r1, sp, r3
 80130e4:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80130e8:	5439      	strb	r1, [r7, r0]
 80130ea:	f10c 0105 	add.w	r1, ip, #5
 80130ee:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 80130f2:	d098      	beq.n	8013026 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80130f4:	2908      	cmp	r1, #8
 80130f6:	d061      	beq.n	80131bc <dir_register+0x538>
 80130f8:	f10c 032d 	add.w	r3, ip, #45	; 0x2d
	} while (j < 8);
 80130fc:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80130fe:	eb0d 0103 	add.w	r1, sp, r3
 8013102:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8013106:	5439      	strb	r1, [r7, r0]
 8013108:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 801310c:	d08b      	beq.n	8013026 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801310e:	f1bc 0f01 	cmp.w	ip, #1
 8013112:	d15b      	bne.n	80131cc <dir_register+0x548>
 8013114:	f89d 201b 	ldrb.w	r2, [sp, #27]
	} while (j < 8);
 8013118:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801311a:	547a      	strb	r2, [r7, r1]
	} while (j < 8);
 801311c:	d183      	bne.n	8013026 <dir_register+0x3a2>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801311e:	4628      	mov	r0, r5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013120:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8013124:	f7ff f892 	bl	801224c <dir_find>
			if (res != FR_OK) break;
 8013128:	2800      	cmp	r0, #0
 801312a:	d081      	beq.n	8013030 <dir_register+0x3ac>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801312c:	2804      	cmp	r0, #4
 801312e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013132:	4606      	mov	r6, r0
 8013134:	f47f ae29 	bne.w	8012d8a <dir_register+0x106>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8013138:	9b02      	ldr	r3, [sp, #8]
	FATFS *fs = dp->obj.fs;
 801313a:	682f      	ldr	r7, [r5, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801313c:	f013 0402 	ands.w	r4, r3, #2
		dp->fn[NSFLAG] = sn[NSFLAG];
 8013140:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013144:	f47f adc7 	bne.w	8012cd6 <dir_register+0x52>
	res = dir_sdi(dp, 0);
 8013148:	2100      	movs	r1, #0
 801314a:	4628      	mov	r0, r5
 801314c:	f7fe ffd2 	bl	80120f4 <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013150:	f04f 0901 	mov.w	r9, #1
	if (res == FR_OK) {
 8013154:	4606      	mov	r6, r0
 8013156:	2800      	cmp	r0, #0
 8013158:	f43f adcd 	beq.w	8012cf6 <dir_register+0x72>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801315c:	2e04      	cmp	r6, #4
 801315e:	f47f ae14 	bne.w	8012d8a <dir_register+0x106>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013162:	2607      	movs	r6, #7
}
 8013164:	4630      	mov	r0, r6
 8013166:	b00b      	add	sp, #44	; 0x2c
 8013168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
 801316c:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801316e:	f102 0001 	add.w	r0, r2, #1
 8013172:	f807 9002 	strb.w	r9, [r7, r2]
	} while (j < 8);
 8013176:	f47f af4c 	bne.w	8013012 <dir_register+0x38e>
 801317a:	e754      	b.n	8013026 <dir_register+0x3a2>
 801317c:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801317e:	f807 9000 	strb.w	r9, [r7, r0]
 8013182:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8013186:	f47f af44 	bne.w	8013012 <dir_register+0x38e>
 801318a:	e74c      	b.n	8013026 <dir_register+0x3a2>
 801318c:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801318e:	f807 9000 	strb.w	r9, [r7, r0]
 8013192:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8013196:	f47f af3c 	bne.w	8013012 <dir_register+0x38e>
 801319a:	e744      	b.n	8013026 <dir_register+0x3a2>
 801319c:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801319e:	f807 9000 	strb.w	r9, [r7, r0]
 80131a2:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 80131a6:	f47f af34 	bne.w	8013012 <dir_register+0x38e>
 80131aa:	e73c      	b.n	8013026 <dir_register+0x3a2>
 80131ac:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80131ae:	f807 9000 	strb.w	r9, [r7, r0]
 80131b2:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 80131b6:	f47f af2c 	bne.w	8013012 <dir_register+0x38e>
 80131ba:	e734      	b.n	8013026 <dir_register+0x3a2>
 80131bc:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80131be:	f807 9000 	strb.w	r9, [r7, r0]
 80131c2:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 80131c6:	f47f af24 	bne.w	8013012 <dir_register+0x38e>
 80131ca:	e72c      	b.n	8013026 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80131cc:	f807 9001 	strb.w	r9, [r7, r1]
	} while (j < 8);
 80131d0:	2a00      	cmp	r2, #0
 80131d2:	f47f af28 	bne.w	8013026 <dir_register+0x3a2>
 80131d6:	2007      	movs	r0, #7
 80131d8:	e71b      	b.n	8013012 <dir_register+0x38e>
	ns[i] = '~';
 80131da:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80131dc:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 80131e0:	f88d 201a 	strb.w	r2, [sp, #26]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80131e4:	e6fe      	b.n	8012fe4 <dir_register+0x360>
	ns[i] = '~';
 80131e6:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80131e8:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 80131ec:	f88d 2019 	strb.w	r2, [sp, #25]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80131f0:	e6f8      	b.n	8012fe4 <dir_register+0x360>
	ns[i] = '~';
 80131f2:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80131f4:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 80131f8:	f88d 2014 	strb.w	r2, [sp, #20]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80131fc:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 8013200:	4662      	mov	r2, ip
 8013202:	e72e      	b.n	8013062 <dir_register+0x3de>
	ns[i] = '~';
 8013204:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8013206:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 801320a:	f88d 2018 	strb.w	r2, [sp, #24]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801320e:	e6e9      	b.n	8012fe4 <dir_register+0x360>
	ns[i] = '~';
 8013210:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8013212:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 8013216:	f88d 2017 	strb.w	r2, [sp, #23]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801321a:	e6e3      	b.n	8012fe4 <dir_register+0x360>
	ns[i] = '~';
 801321c:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 801321e:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 8013222:	f88d 2016 	strb.w	r2, [sp, #22]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013226:	e6dd      	b.n	8012fe4 <dir_register+0x360>
	ns[i] = '~';
 8013228:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 801322a:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 801322e:	f88d 2015 	strb.w	r2, [sp, #21]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013232:	e6d7      	b.n	8012fe4 <dir_register+0x360>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8013234:	2606      	movs	r6, #6
}
 8013236:	4630      	mov	r0, r6
 8013238:	b00b      	add	sp, #44	; 0x2c
 801323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801323e:	469b      	mov	fp, r3
 8013240:	e53a      	b.n	8012cb8 <dir_register+0x34>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8013242:	6969      	ldr	r1, [r5, #20]
 8013244:	4628      	mov	r0, r5
 8013246:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 801324a:	f7fe ff53 	bl	80120f4 <dir_sdi>
		if (res == FR_OK) {
 801324e:	4606      	mov	r6, r0
 8013250:	2800      	cmp	r0, #0
 8013252:	f47f ad9a 	bne.w	8012d8a <dir_register+0x106>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8013256:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801325a:	f04f 080f 	mov.w	r8, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801325e:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
 8013262:	f64f 7bff 	movw	fp, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8013266:	01d3      	lsls	r3, r2, #7
 8013268:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 801326c:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 8013270:	4413      	add	r3, r2
 8013272:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8013276:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 801327a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 801327e:	fa53 f282 	uxtab	r2, r3, r2
 8013282:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8013286:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801328a:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 801328e:	fa52 f383 	uxtab	r3, r2, r3
 8013292:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8013296:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 801329a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 801329e:	fa53 f282 	uxtab	r2, r3, r2
 80132a2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80132a6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80132aa:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80132ae:	fa52 f383 	uxtab	r3, r2, r3
 80132b2:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80132b6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80132ba:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 80132be:	fa53 f282 	uxtab	r2, r3, r2
 80132c2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80132c6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80132ca:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 80132ce:	fa52 f383 	uxtab	r3, r2, r3
 80132d2:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80132d6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 80132da:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80132de:	fa53 f282 	uxtab	r2, r3, r2
 80132e2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80132e6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80132ea:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 80132ee:	fa52 f383 	uxtab	r3, r2, r3
 80132f2:	f3c3 0746 	ubfx	r7, r3, #1, #7
 80132f6:	ea47 17c3 	orr.w	r7, r7, r3, lsl #7
 80132fa:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 80132fe:	fa53 f787 	uxtab	r7, r3, r7
 8013302:	b2ff      	uxtb	r7, r7
	} while (--n);
 8013304:	e028      	b.n	8013358 <dir_register+0x6d4>
	*ptr++ = (BYTE)val; val >>= 8;
 8013306:	f8a3 b003 	strh.w	fp, [r3, #3]
 801330a:	f8a3 b005 	strh.w	fp, [r3, #5]
 801330e:	f8a3 b007 	strh.w	fp, [r3, #7]
 8013312:	f8a3 b009 	strh.w	fp, [r3, #9]
 8013316:	f8a3 b00e 	strh.w	fp, [r3, #14]
 801331a:	f8a3 b010 	strh.w	fp, [r3, #16]
 801331e:	f8a3 b012 	strh.w	fp, [r3, #18]
 8013322:	f8a3 b014 	strh.w	fp, [r3, #20]
 8013326:	f8a3 b016 	strh.w	fp, [r3, #22]
 801332a:	f8a3 b018 	strh.w	fp, [r3, #24]
 801332e:	f8a3 b01c 	strh.w	fp, [r3, #28]
 8013332:	f8a3 b01e 	strh.w	fp, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013336:	f046 0640 	orr.w	r6, r6, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801333a:	701e      	strb	r6, [r3, #0]
				fs->wflag = 1;
 801333c:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 801333e:	2100      	movs	r1, #0
 8013340:	4628      	mov	r0, r5
				fs->wflag = 1;
 8013342:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8013346:	f7ff fbbb 	bl	8012ac0 <dir_next>
			} while (res == FR_OK && --nent);
 801334a:	4606      	mov	r6, r0
 801334c:	2800      	cmp	r0, #0
 801334e:	f47f ad1c 	bne.w	8012d8a <dir_register+0x106>
 8013352:	3c01      	subs	r4, #1
 8013354:	f43f acf1 	beq.w	8012d3a <dir_register+0xb6>
				res = move_window(fs, dp->sect);
 8013358:	69e9      	ldr	r1, [r5, #28]
 801335a:	4650      	mov	r0, sl
 801335c:	f7fe f916 	bl	801158c <move_window>
 8013360:	4606      	mov	r6, r0
				if (res != FR_OK) break;
 8013362:	2800      	cmp	r0, #0
 8013364:	f47f ad11 	bne.w	8012d8a <dir_register+0x106>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8013368:	b2e6      	uxtb	r6, r4
 801336a:	6a2b      	ldr	r3, [r5, #32]
 801336c:	f8da 100c 	ldr.w	r1, [sl, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8013370:	1e72      	subs	r2, r6, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8013372:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8013374:	735f      	strb	r7, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8013376:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801337a:	f8a3 800b 	strh.w	r8, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801337e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013382:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8013386:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 801338a:	7058      	strb	r0, [r3, #1]
 801338c:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801338e:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
 8013392:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013394:	0050      	lsls	r0, r2, #1
 8013396:	45cc      	cmp	ip, r9
 8013398:	d8b5      	bhi.n	8013306 <dir_register+0x682>
 801339a:	3201      	adds	r2, #1
 801339c:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 80133a0:	0052      	lsls	r2, r2, #1
 80133a2:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 80133a6:	f883 c003 	strb.w	ip, [r3, #3]
 80133aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80133ae:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 80133b2:	f883 c004 	strb.w	ip, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80133b6:	45ce      	cmp	lr, r9
 80133b8:	d8a7      	bhi.n	801330a <dir_register+0x686>
 80133ba:	440a      	add	r2, r1
 80133bc:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 80133c0:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 80133c4:	f883 c005 	strb.w	ip, [r3, #5]
 80133c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80133cc:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 80133d0:	f883 c006 	strb.w	ip, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80133d4:	45ce      	cmp	lr, r9
 80133d6:	d89a      	bhi.n	801330e <dir_register+0x68a>
 80133d8:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 80133dc:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 80133e0:	f883 c007 	strb.w	ip, [r3, #7]
 80133e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80133e8:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 80133ec:	f883 c008 	strb.w	ip, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80133f0:	45ce      	cmp	lr, r9
 80133f2:	d88e      	bhi.n	8013312 <dir_register+0x68e>
 80133f4:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 80133f8:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 80133fc:	f883 c009 	strb.w	ip, [r3, #9]
 8013400:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013404:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 8013408:	f883 c00a 	strb.w	ip, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801340c:	45ce      	cmp	lr, r9
 801340e:	d882      	bhi.n	8013316 <dir_register+0x692>
 8013410:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 8013414:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8013418:	f883 c00e 	strb.w	ip, [r3, #14]
 801341c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013420:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 8013424:	f883 c00f 	strb.w	ip, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013428:	45ce      	cmp	lr, r9
 801342a:	f63f af76 	bhi.w	801331a <dir_register+0x696>
 801342e:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
 8013432:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8013436:	f883 c010 	strb.w	ip, [r3, #16]
 801343a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801343e:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 8013442:	f883 c011 	strb.w	ip, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013446:	45ce      	cmp	lr, r9
 8013448:	f63f af69 	bhi.w	801331e <dir_register+0x69a>
 801344c:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
 8013450:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8013454:	f883 c012 	strb.w	ip, [r3, #18]
 8013458:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801345c:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 8013460:	f883 c013 	strb.w	ip, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013464:	45ce      	cmp	lr, r9
 8013466:	f63f af5c 	bhi.w	8013322 <dir_register+0x69e>
 801346a:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
 801346e:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8013472:	f883 c014 	strb.w	ip, [r3, #20]
 8013476:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801347a:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 801347e:	f883 c015 	strb.w	ip, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013482:	45ce      	cmp	lr, r9
 8013484:	f63f af4f 	bhi.w	8013326 <dir_register+0x6a2>
 8013488:	f8b2 c010 	ldrh.w	ip, [r2, #16]
 801348c:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8013490:	f883 c016 	strb.w	ip, [r3, #22]
 8013494:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013498:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 801349c:	f883 c017 	strb.w	ip, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80134a0:	45ce      	cmp	lr, r9
 80134a2:	f63f af42 	bhi.w	801332a <dir_register+0x6a6>
 80134a6:	f8b2 c012 	ldrh.w	ip, [r2, #18]
 80134aa:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 80134ae:	f883 c018 	strb.w	ip, [r3, #24]
 80134b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80134b6:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 80134ba:	f883 c019 	strb.w	ip, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80134be:	45ce      	cmp	lr, r9
 80134c0:	f63f af35 	bhi.w	801332e <dir_register+0x6aa>
 80134c4:	f8b2 c014 	ldrh.w	ip, [r2, #20]
 80134c8:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 80134cc:	f883 c01c 	strb.w	ip, [r3, #28]
 80134d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80134d4:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 80134d8:	f883 c01d 	strb.w	ip, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80134dc:	45ce      	cmp	lr, r9
 80134de:	f63f af28 	bhi.w	8013332 <dir_register+0x6ae>
 80134e2:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80134e4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 80134e8:	779a      	strb	r2, [r3, #30]
 80134ea:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 80134ec:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80134ee:	fa1f f28c 	uxth.w	r2, ip
 80134f2:	454a      	cmp	r2, r9
 80134f4:	f63f af1f 	bhi.w	8013336 <dir_register+0x6b2>
 80134f8:	180a      	adds	r2, r1, r0
 80134fa:	8b52      	ldrh	r2, [r2, #26]
 80134fc:	2a00      	cmp	r2, #0
 80134fe:	f47f af1c 	bne.w	801333a <dir_register+0x6b6>
 8013502:	e718      	b.n	8013336 <dir_register+0x6b2>
			*d++ = *s++;
 8013504:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8013508:	701a      	strb	r2, [r3, #0]
 801350a:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 801350e:	705a      	strb	r2, [r3, #1]
 8013510:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 8013514:	709a      	strb	r2, [r3, #2]
 8013516:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 801351a:	70da      	strb	r2, [r3, #3]
 801351c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8013520:	711a      	strb	r2, [r3, #4]
 8013522:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8013526:	715a      	strb	r2, [r3, #5]
 8013528:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
 801352c:	719a      	strb	r2, [r3, #6]
 801352e:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 8013532:	71da      	strb	r2, [r3, #7]
 8013534:	e417      	b.n	8012d66 <dir_register+0xe2>
 8013536:	bf00      	nop

08013538 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013538:	b510      	push	{r4, lr}
 801353a:	b082      	sub	sp, #8
 801353c:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8013540:	b1a1      	cbz	r1, 801356c <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013542:	f891 c000 	ldrb.w	ip, [r1]
 8013546:	f1bc 0f1f 	cmp.w	ip, #31
 801354a:	d912      	bls.n	8013572 <f_mount+0x3a>
 801354c:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 8013550:	d00f      	beq.n	8013572 <f_mount+0x3a>
 8013552:	4608      	mov	r0, r1
 8013554:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013558:	2b1f      	cmp	r3, #31
 801355a:	d90c      	bls.n	8013576 <f_mount+0x3e>
 801355c:	2b3a      	cmp	r3, #58	; 0x3a
 801355e:	d1f9      	bne.n	8013554 <f_mount+0x1c>
			i = *tp++ - '0';
 8013560:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013562:	4288      	cmp	r0, r1
 8013564:	d102      	bne.n	801356c <f_mount+0x34>
 8013566:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801356a:	d006      	beq.n	801357a <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 801356c:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 801356e:	b002      	add	sp, #8
 8013570:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013572:	4663      	mov	r3, ip
 8013574:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013576:	2b3a      	cmp	r3, #58	; 0x3a
 8013578:	d0f2      	beq.n	8013560 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801357a:	4913      	ldr	r1, [pc, #76]	; (80135c8 <f_mount+0x90>)
 801357c:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 801357e:	b143      	cbz	r3, 8013592 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013580:	4812      	ldr	r0, [pc, #72]	; (80135cc <f_mount+0x94>)
 8013582:	6804      	ldr	r4, [r0, #0]
 8013584:	42a3      	cmp	r3, r4
 8013586:	d019      	beq.n	80135bc <f_mount+0x84>
 8013588:	6904      	ldr	r4, [r0, #16]
 801358a:	429c      	cmp	r4, r3
 801358c:	d013      	beq.n	80135b6 <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 801358e:	2000      	movs	r0, #0
 8013590:	7018      	strb	r0, [r3, #0]
	if (fs) {
 8013592:	9b01      	ldr	r3, [sp, #4]
 8013594:	b15b      	cbz	r3, 80135ae <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 8013596:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013598:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 801359a:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 801359c:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801359e:	d1e6      	bne.n	801356e <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80135a0:	4602      	mov	r2, r0
 80135a2:	a901      	add	r1, sp, #4
 80135a4:	4668      	mov	r0, sp
 80135a6:	f7fe f82f 	bl	8011608 <find_volume>
}
 80135aa:	b002      	add	sp, #8
 80135ac:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80135ae:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 80135b0:	600b      	str	r3, [r1, #0]
}
 80135b2:	b002      	add	sp, #8
 80135b4:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 80135b6:	2400      	movs	r4, #0
 80135b8:	6104      	str	r4, [r0, #16]
 80135ba:	e7e8      	b.n	801358e <f_mount+0x56>
 80135bc:	2400      	movs	r4, #0
 80135be:	6004      	str	r4, [r0, #0]
 80135c0:	6904      	ldr	r4, [r0, #16]
 80135c2:	429c      	cmp	r4, r3
 80135c4:	d1e3      	bne.n	801358e <f_mount+0x56>
 80135c6:	e7f6      	b.n	80135b6 <f_mount+0x7e>
 80135c8:	20019b80 	.word	0x20019b80
 80135cc:	20019b84 	.word	0x20019b84

080135d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80135d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135d4:	b092      	sub	sp, #72	; 0x48
 80135d6:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80135d8:	2800      	cmp	r0, #0
 80135da:	f000 8096 	beq.w	801370a <f_open+0x13a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80135de:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80135e2:	4616      	mov	r6, r2
 80135e4:	4604      	mov	r4, r0
 80135e6:	a903      	add	r1, sp, #12
 80135e8:	a801      	add	r0, sp, #4
 80135ea:	463a      	mov	r2, r7
 80135ec:	f7fe f80c 	bl	8011608 <find_volume>
	if (res == FR_OK) {
 80135f0:	4605      	mov	r5, r0
 80135f2:	b128      	cbz	r0, 8013600 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80135f4:	2300      	movs	r3, #0
 80135f6:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 80135f8:	4628      	mov	r0, r5
 80135fa:	b012      	add	sp, #72	; 0x48
 80135fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 8013600:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8013604:	a804      	add	r0, sp, #16
 8013606:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8013608:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 801360c:	f7fe ffca 	bl	80125a4 <follow_path>
		if (res == FR_OK) {
 8013610:	b9f0      	cbnz	r0, 8013650 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013612:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8013616:	2b00      	cmp	r3, #0
 8013618:	db7e      	blt.n	8013718 <f_open+0x148>
		if (Files[i].fs) {	/* Existing entry */
 801361a:	4b9e      	ldr	r3, [pc, #632]	; (8013894 <f_open+0x2c4>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801361c:	f027 0001 	bic.w	r0, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013620:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 8013622:	f8d3 9000 	ldr.w	r9, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013626:	4601      	mov	r1, r0
				Files[i].clu == dp->obj.sclust &&
 8013628:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 801362c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 8013630:	f1b9 0f00 	cmp.w	r9, #0
 8013634:	f000 80d9 	beq.w	80137ea <f_open+0x21a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013638:	4591      	cmp	r9, r2
 801363a:	d06f      	beq.n	801371c <f_open+0x14c>
		if (Files[i].fs) {	/* Existing entry */
 801363c:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8013640:	f1b9 0f00 	cmp.w	r9, #0
 8013644:	d071      	beq.n	801372a <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013646:	454a      	cmp	r2, r9
 8013648:	f000 80e8 	beq.w	801381c <f_open+0x24c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801364c:	2512      	movs	r5, #18
 801364e:	e7d1      	b.n	80135f4 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013650:	f016 0f1c 	tst.w	r6, #28
 8013654:	d05e      	beq.n	8013714 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013656:	2804      	cmp	r0, #4
 8013658:	d15c      	bne.n	8013714 <f_open+0x144>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801365a:	4b8e      	ldr	r3, [pc, #568]	; (8013894 <f_open+0x2c4>)
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	b112      	cbz	r2, 8013666 <f_open+0x96>
 8013660:	691b      	ldr	r3, [r3, #16]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d1f2      	bne.n	801364c <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013666:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013668:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801366c:	f7ff fb0a 	bl	8012c84 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013670:	2800      	cmp	r0, #0
 8013672:	d14f      	bne.n	8013714 <f_open+0x144>
				dw = GET_FATTIME();
 8013674:	f7fd fcca 	bl	801100c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 801367a:	0a02      	lsrs	r2, r0, #8
 801367c:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8013682:	75da      	strb	r2, [r3, #23]
 8013684:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8013686:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8013688:	0e00      	lsrs	r0, r0, #24
 801368a:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801368c:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val;
 801368e:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013692:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 8013694:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 801369a:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 801369c:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801369e:	d102      	bne.n	80136a6 <f_open+0xd6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80136a0:	8a9a      	ldrh	r2, [r3, #20]
 80136a2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 80136a6:	2200      	movs	r2, #0
 80136a8:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 80136aa:	f898 1000 	ldrb.w	r1, [r8]
 80136ae:	2903      	cmp	r1, #3
 80136b0:	d100      	bne.n	80136b4 <f_open+0xe4>
	*ptr++ = (BYTE)val; val >>= 8;
 80136b2:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 80136b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80136b6:	2200      	movs	r2, #0
 80136b8:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 80136ba:	2301      	movs	r3, #1
 80136bc:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80136c0:	b186      	cbz	r6, 80136e4 <f_open+0x114>
						dw = fs->winsect;
 80136c2:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 80136c6:	4631      	mov	r1, r6
 80136c8:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 80136ca:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 80136cc:	f7ff f8f6 	bl	80128bc <remove_chain>
						if (res == FR_OK) {
 80136d0:	9b00      	ldr	r3, [sp, #0]
 80136d2:	b9f8      	cbnz	r0, 8013714 <f_open+0x144>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80136d4:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 80136d6:	4619      	mov	r1, r3
 80136d8:	4640      	mov	r0, r8
 80136da:	f7fd ff57 	bl	801158c <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80136de:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
 80136e2:	b9b8      	cbnz	r0, 8013714 <f_open+0x144>
				mode |= FA_MODIFIED;
 80136e4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80136e8:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80136ec:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80136f0:	3900      	subs	r1, #0
 80136f2:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80136f4:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80136f6:	bf18      	it	ne
 80136f8:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 80136fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136fc:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80136fe:	f7fd fdb7 	bl	8011270 <inc_lock>
 8013702:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013704:	b9e8      	cbnz	r0, 8013742 <f_open+0x172>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013706:	2502      	movs	r5, #2
 8013708:	e774      	b.n	80135f4 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 801370a:	2509      	movs	r5, #9
}
 801370c:	4628      	mov	r0, r5
 801370e:	b012      	add	sp, #72	; 0x48
 8013710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013714:	4605      	mov	r5, r0
 8013716:	e76d      	b.n	80135f4 <f_open+0x24>
				res = FR_INVALID_NAME;
 8013718:	2506      	movs	r5, #6
 801371a:	e76b      	b.n	80135f4 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801371c:	685a      	ldr	r2, [r3, #4]
 801371e:	4562      	cmp	r2, ip
 8013720:	f000 8085 	beq.w	801382e <f_open+0x25e>
		if (Files[i].fs) {	/* Existing entry */
 8013724:	691a      	ldr	r2, [r3, #16]
 8013726:	2a00      	cmp	r2, #0
 8013728:	d18d      	bne.n	8013646 <f_open+0x76>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801372a:	f016 0f1c 	tst.w	r6, #28
 801372e:	d049      	beq.n	80137c4 <f_open+0x1f4>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013730:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013734:	f013 0f11 	tst.w	r3, #17
 8013738:	d155      	bne.n	80137e6 <f_open+0x216>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801373a:	0773      	lsls	r3, r6, #29
 801373c:	d550      	bpl.n	80137e0 <f_open+0x210>
 801373e:	2508      	movs	r5, #8
 8013740:	e758      	b.n	80135f4 <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
 8013742:	f898 2000 	ldrb.w	r2, [r8]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8013748:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 801374a:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801374c:	d102      	bne.n	8013754 <f_open+0x184>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801374e:	8a9a      	ldrh	r2, [r3, #20]
 8013750:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013754:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013756:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 8013758:	f8d3 901c 	ldr.w	r9, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801375c:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013760:	f8c4 8000 	str.w	r8, [r4]
		*d++ = (BYTE)val;
 8013764:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013768:	f8c4 900c 	str.w	r9, [r4, #12]
		*d++ = (BYTE)val;
 801376c:	4650      	mov	r0, sl
			fp->cltbl = 0;			/* Disable fast seek mode */
 801376e:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 8013770:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->flag = mode;		/* Set file access mode */
 8013774:	7527      	strb	r7, [r4, #20]
			fp->obj.id = fs->id;
 8013776:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
 8013778:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801377a:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801377c:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 801377e:	f009 fbc9 	bl	801cf14 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013782:	06bf      	lsls	r7, r7, #26
 8013784:	f57f af38 	bpl.w	80135f8 <f_open+0x28>
 8013788:	f1b9 0f00 	cmp.w	r9, #0
 801378c:	f43f af34 	beq.w	80135f8 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013790:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013794:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013798:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801379c:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80137a0:	d804      	bhi.n	80137ac <f_open+0x1dc>
 80137a2:	e04a      	b.n	801383a <f_open+0x26a>
 80137a4:	1c70      	adds	r0, r6, #1
 80137a6:	d06c      	beq.n	8013882 <f_open+0x2b2>
 80137a8:	454f      	cmp	r7, r9
 80137aa:	d26a      	bcs.n	8013882 <f_open+0x2b2>
					clst = get_fat(&fp->obj, clst);
 80137ac:	4631      	mov	r1, r6
 80137ae:	6820      	ldr	r0, [r4, #0]
 80137b0:	f7fe f922 	bl	80119f8 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80137b4:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80137b6:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 80137ba:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 80137bc:	d8f2      	bhi.n	80137a4 <f_open+0x1d4>
 80137be:	2502      	movs	r5, #2
				fp->clust = clst;
 80137c0:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80137c2:	e717      	b.n	80135f4 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80137c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80137c8:	06da      	lsls	r2, r3, #27
 80137ca:	d425      	bmi.n	8013818 <f_open+0x248>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80137cc:	07b2      	lsls	r2, r6, #30
 80137ce:	d501      	bpl.n	80137d4 <f_open+0x204>
 80137d0:	07db      	lsls	r3, r3, #31
 80137d2:	d408      	bmi.n	80137e6 <f_open+0x216>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80137d4:	f006 0608 	and.w	r6, r6, #8
 80137d8:	2e00      	cmp	r6, #0
 80137da:	d183      	bne.n	80136e4 <f_open+0x114>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80137dc:	4601      	mov	r1, r0
 80137de:	e785      	b.n	80136ec <f_open+0x11c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80137e0:	0730      	lsls	r0, r6, #28
 80137e2:	d583      	bpl.n	80136ec <f_open+0x11c>
 80137e4:	e746      	b.n	8013674 <f_open+0xa4>
						res = FR_DENIED;
 80137e6:	2507      	movs	r5, #7
 80137e8:	e704      	b.n	80135f4 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 80137ea:	f8d3 9010 	ldr.w	r9, [r3, #16]
 80137ee:	f1b9 0f00 	cmp.w	r9, #0
 80137f2:	d09a      	beq.n	801372a <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80137f4:	4591      	cmp	r9, r2
 80137f6:	d198      	bne.n	801372a <f_open+0x15a>
 80137f8:	695a      	ldr	r2, [r3, #20]
 80137fa:	4562      	cmp	r2, ip
 80137fc:	d195      	bne.n	801372a <f_open+0x15a>
				Files[i].clu == dp->obj.sclust &&
 80137fe:	699a      	ldr	r2, [r3, #24]
 8013800:	4572      	cmp	r2, lr
 8013802:	d192      	bne.n	801372a <f_open+0x15a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013804:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013806:	b928      	cbnz	r0, 8013814 <f_open+0x244>
 8013808:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801380c:	899b      	ldrh	r3, [r3, #12]
 801380e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013812:	d18a      	bne.n	801372a <f_open+0x15a>
 8013814:	2510      	movs	r5, #16
 8013816:	e6ed      	b.n	80135f4 <f_open+0x24>
					res = FR_NO_FILE;
 8013818:	2504      	movs	r5, #4
 801381a:	e6eb      	b.n	80135f4 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801381c:	695a      	ldr	r2, [r3, #20]
 801381e:	4562      	cmp	r2, ip
 8013820:	f47f af14 	bne.w	801364c <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8013824:	699a      	ldr	r2, [r3, #24]
 8013826:	4572      	cmp	r2, lr
 8013828:	f47f af10 	bne.w	801364c <f_open+0x7c>
 801382c:	e7ea      	b.n	8013804 <f_open+0x234>
 801382e:	689a      	ldr	r2, [r3, #8]
 8013830:	4572      	cmp	r2, lr
 8013832:	f47f af77 	bne.w	8013724 <f_open+0x154>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013836:	462a      	mov	r2, r5
 8013838:	e7e5      	b.n	8013806 <f_open+0x236>
				fp->clust = clst;
 801383a:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801383c:	f3c9 0308 	ubfx	r3, r9, #0, #9
 8013840:	2b00      	cmp	r3, #0
 8013842:	f43f aed9 	beq.w	80135f8 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013846:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 801384a:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801384c:	3b02      	subs	r3, #2
 801384e:	429e      	cmp	r6, r3
 8013850:	f4bf af59 	bcs.w	8013706 <f_open+0x136>
	return clst * fs->csize + fs->database;
 8013854:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8013858:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 801385c:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013860:	2a00      	cmp	r2, #0
 8013862:	f43f af50 	beq.w	8013706 <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013866:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801386a:	4651      	mov	r1, sl
 801386c:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801386e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013870:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013874:	f7fd fcd0 	bl	8011218 <disk_read>
 8013878:	2800      	cmp	r0, #0
 801387a:	f43f aebd 	beq.w	80135f8 <f_open+0x28>
 801387e:	2501      	movs	r5, #1
 8013880:	e6b8      	b.n	80135f4 <f_open+0x24>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013882:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
 8013884:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 8013886:	bf0c      	ite	eq
 8013888:	2301      	moveq	r3, #1
 801388a:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801388c:	d1d6      	bne.n	801383c <f_open+0x26c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801388e:	461d      	mov	r5, r3
 8013890:	e6b0      	b.n	80135f4 <f_open+0x24>
 8013892:	bf00      	nop
 8013894:	20019b84 	.word	0x20019b84

08013898 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801389c:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 801389e:	2300      	movs	r3, #0
{
 80138a0:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 80138a2:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80138a4:	b150      	cbz	r0, 80138bc <f_read+0x24>
 80138a6:	6803      	ldr	r3, [r0, #0]
 80138a8:	4604      	mov	r4, r0
 80138aa:	b13b      	cbz	r3, 80138bc <f_read+0x24>
 80138ac:	4691      	mov	r9, r2
 80138ae:	781a      	ldrb	r2, [r3, #0]
 80138b0:	b122      	cbz	r2, 80138bc <f_read+0x24>
 80138b2:	460d      	mov	r5, r1
 80138b4:	88da      	ldrh	r2, [r3, #6]
 80138b6:	8881      	ldrh	r1, [r0, #4]
 80138b8:	4291      	cmp	r1, r2
 80138ba:	d005      	beq.n	80138c8 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80138bc:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80138c0:	4640      	mov	r0, r8
 80138c2:	b005      	add	sp, #20
 80138c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80138c8:	7858      	ldrb	r0, [r3, #1]
 80138ca:	f7fd fc89 	bl	80111e0 <disk_status>
 80138ce:	07c2      	lsls	r2, r0, #31
 80138d0:	d4f4      	bmi.n	80138bc <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80138d2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80138d6:	f1b8 0f00 	cmp.w	r8, #0
 80138da:	d1f1      	bne.n	80138c0 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80138dc:	7d23      	ldrb	r3, [r4, #20]
 80138de:	f013 0301 	ands.w	r3, r3, #1
 80138e2:	9300      	str	r3, [sp, #0]
 80138e4:	f000 80da 	beq.w	8013a9c <f_read+0x204>
	remain = fp->obj.objsize - fp->fptr;
 80138e8:	69a3      	ldr	r3, [r4, #24]
 80138ea:	68e7      	ldr	r7, [r4, #12]
 80138ec:	1aff      	subs	r7, r7, r3
 80138ee:	454f      	cmp	r7, r9
 80138f0:	bf28      	it	cs
 80138f2:	464f      	movcs	r7, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80138f4:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
 80138f8:	2f00      	cmp	r7, #0
 80138fa:	d0e1      	beq.n	80138c0 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80138fc:	f104 0231 	add.w	r2, r4, #49	; 0x31
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013900:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 8013904:	e9cd 2801 	strd	r2, r8, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013908:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801390c:	2a00      	cmp	r2, #0
 801390e:	d142      	bne.n	8013996 <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013910:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8013914:	0a59      	lsrs	r1, r3, #9
 8013916:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8013918:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
 801391c:	d06f      	beq.n	80139fe <f_read+0x166>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801391e:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013920:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8013924:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013926:	3b02      	subs	r3, #2
 8013928:	4298      	cmp	r0, r3
 801392a:	d275      	bcs.n	8013a18 <f_read+0x180>
	return clst * fs->csize + fs->database;
 801392c:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8013930:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8013934:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013938:	2b00      	cmp	r3, #0
 801393a:	d06d      	beq.n	8013a18 <f_read+0x180>
			if (cc) {							/* Read maximum contiguous sectors directly */
 801393c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 8013940:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013944:	d36f      	bcc.n	8013a26 <f_read+0x18e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013946:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801394a:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801394e:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013950:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8013954:	bf88      	it	hi
 8013956:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801395a:	465a      	mov	r2, fp
 801395c:	4629      	mov	r1, r5
 801395e:	4643      	mov	r3, r8
 8013960:	f7fd fc5a 	bl	8011218 <disk_read>
 8013964:	2800      	cmp	r0, #0
 8013966:	f040 8087 	bne.w	8013a78 <f_read+0x1e0>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801396a:	f994 2014 	ldrsb.w	r2, [r4, #20]
 801396e:	2a00      	cmp	r2, #0
 8013970:	f2c0 80ab 	blt.w	8013aca <f_read+0x232>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013974:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013978:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 801397a:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801397c:	440d      	add	r5, r1
 801397e:	440b      	add	r3, r1
 8013980:	61a3      	str	r3, [r4, #24]
 8013982:	6833      	ldr	r3, [r6, #0]
 8013984:	440b      	add	r3, r1
 8013986:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8013988:	f000 80b5 	beq.w	8013af6 <f_read+0x25e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801398c:	69a3      	ldr	r3, [r4, #24]
 801398e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013992:	2a00      	cmp	r2, #0
 8013994:	d0bc      	beq.n	8013910 <f_read+0x78>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013996:	1c50      	adds	r0, r2, #1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013998:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801399c:	eb0a 0302 	add.w	r3, sl, r2
 80139a0:	4450      	add	r0, sl
 80139a2:	42b9      	cmp	r1, r7
 80139a4:	eba5 0000 	sub.w	r0, r5, r0
 80139a8:	bf28      	it	cs
 80139aa:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80139ac:	2802      	cmp	r0, #2
 80139ae:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 80139b2:	d969      	bls.n	8013a88 <f_read+0x1f0>
 80139b4:	f1bb 0f05 	cmp.w	fp, #5
 80139b8:	d966      	bls.n	8013a88 <f_read+0x1f0>
 80139ba:	f021 0e03 	bic.w	lr, r1, #3
 80139be:	461a      	mov	r2, r3
 80139c0:	4628      	mov	r0, r5
 80139c2:	449e      	add	lr, r3
			*d++ = *s++;
 80139c4:	f852 cb04 	ldr.w	ip, [r2], #4
 80139c8:	4572      	cmp	r2, lr
 80139ca:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
 80139ce:	d1f9      	bne.n	80139c4 <f_read+0x12c>
 80139d0:	f021 0203 	bic.w	r2, r1, #3
 80139d4:	4291      	cmp	r1, r2
 80139d6:	eb05 0002 	add.w	r0, r5, r2
 80139da:	eb03 0c02 	add.w	ip, r3, r2
 80139de:	d0cb      	beq.n	8013978 <f_read+0xe0>
			*d++ = *s++;
 80139e0:	5c9b      	ldrb	r3, [r3, r2]
		} while (--cnt);
 80139e2:	ebbb 0b02 	subs.w	fp, fp, r2
			*d++ = *s++;
 80139e6:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 80139e8:	d0c6      	beq.n	8013978 <f_read+0xe0>
			*d++ = *s++;
 80139ea:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 80139ee:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 80139f2:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 80139f4:	d0c0      	beq.n	8013978 <f_read+0xe0>
			*d++ = *s++;
 80139f6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80139fa:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
 80139fc:	e7bc      	b.n	8013978 <f_read+0xe0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80139fe:	bb3b      	cbnz	r3, 8013a50 <f_read+0x1b8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013a00:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013a02:	2801      	cmp	r0, #1
 8013a04:	d908      	bls.n	8013a18 <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a06:	1c43      	adds	r3, r0, #1
 8013a08:	d036      	beq.n	8013a78 <f_read+0x1e0>
				fp->clust = clst;				/* Update current cluster */
 8013a0a:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 8013a0c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013a0e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8013a12:	3b02      	subs	r3, #2
 8013a14:	4298      	cmp	r0, r3
 8013a16:	d389      	bcc.n	801392c <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013a18:	2302      	movs	r3, #2
 8013a1a:	4698      	mov	r8, r3
 8013a1c:	7563      	strb	r3, [r4, #21]
}
 8013a1e:	4640      	mov	r0, r8
 8013a20:	b005      	add	sp, #20
 8013a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013a26:	6a22      	ldr	r2, [r4, #32]
 8013a28:	455a      	cmp	r2, fp
 8013a2a:	d00b      	beq.n	8013a44 <f_read+0x1ac>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013a2c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	db3d      	blt.n	8013ab0 <f_read+0x218>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013a34:	2301      	movs	r3, #1
 8013a36:	465a      	mov	r2, fp
 8013a38:	4651      	mov	r1, sl
 8013a3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013a3e:	f7fd fbeb 	bl	8011218 <disk_read>
 8013a42:	b9c8      	cbnz	r0, 8013a78 <f_read+0x1e0>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013a44:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 8013a46:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013a4e:	e7a2      	b.n	8013996 <f_read+0xfe>
					if (fp->cltbl) {
 8013a50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013a52:	b330      	cbz	r0, 8013aa2 <f_read+0x20a>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013a54:	6823      	ldr	r3, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013a56:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013a58:	895b      	ldrh	r3, [r3, #10]
 8013a5a:	fbb1 f3f3 	udiv	r3, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013a5e:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013a60:	b929      	cbnz	r1, 8013a6e <f_read+0x1d6>
 8013a62:	e7d9      	b.n	8013a18 <f_read+0x180>
		cl -= ncl; tbl++;		/* Next fragment */
 8013a64:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013a66:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013a6a:	2900      	cmp	r1, #0
 8013a6c:	d0d4      	beq.n	8013a18 <f_read+0x180>
		if (cl < ncl) break;	/* In this fragment? */
 8013a6e:	4299      	cmp	r1, r3
 8013a70:	d9f8      	bls.n	8013a64 <f_read+0x1cc>
	return cl + *tbl;	/* Return the cluster number */
 8013a72:	6840      	ldr	r0, [r0, #4]
 8013a74:	4418      	add	r0, r3
 8013a76:	e7c4      	b.n	8013a02 <f_read+0x16a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a78:	f8dd 8000 	ldr.w	r8, [sp]
 8013a7c:	2301      	movs	r3, #1
}
 8013a7e:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a80:	7563      	strb	r3, [r4, #21]
}
 8013a82:	b005      	add	sp, #20
 8013a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a88:	1e6a      	subs	r2, r5, #1
 8013a8a:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
 8013a8e:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 8013a92:	4563      	cmp	r3, ip
			*d++ = *s++;
 8013a94:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8013a98:	d1f9      	bne.n	8013a8e <f_read+0x1f6>
 8013a9a:	e76d      	b.n	8013978 <f_read+0xe0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013a9c:	f04f 0807 	mov.w	r8, #7
 8013aa0:	e70e      	b.n	80138c0 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013aa2:	69e1      	ldr	r1, [r4, #28]
 8013aa4:	6820      	ldr	r0, [r4, #0]
 8013aa6:	9203      	str	r2, [sp, #12]
 8013aa8:	f7fd ffa6 	bl	80119f8 <get_fat.isra.0>
 8013aac:	9a03      	ldr	r2, [sp, #12]
 8013aae:	e7a8      	b.n	8013a02 <f_read+0x16a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	4651      	mov	r1, sl
 8013ab4:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013ab8:	f7fd fbbe 	bl	8011238 <disk_write>
 8013abc:	2800      	cmp	r0, #0
 8013abe:	d1db      	bne.n	8013a78 <f_read+0x1e0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013ac0:	7d23      	ldrb	r3, [r4, #20]
 8013ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ac6:	7523      	strb	r3, [r4, #20]
 8013ac8:	e7b4      	b.n	8013a34 <f_read+0x19c>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013aca:	6a22      	ldr	r2, [r4, #32]
 8013acc:	eba2 020b 	sub.w	r2, r2, fp
 8013ad0:	4542      	cmp	r2, r8
 8013ad2:	f4bf af4f 	bcs.w	8013974 <f_read+0xdc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013ad6:	eb05 2242 	add.w	r2, r5, r2, lsl #9
 8013ada:	9b01      	ldr	r3, [sp, #4]
 8013adc:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013ade:	1ad0      	subs	r0, r2, r3
 8013ae0:	2802      	cmp	r0, #2
 8013ae2:	d90b      	bls.n	8013afc <f_read+0x264>
 8013ae4:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 8013ae8:	f851 3b04 	ldr.w	r3, [r1], #4
 8013aec:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 8013af0:	4562      	cmp	r2, ip
 8013af2:	d1f9      	bne.n	8013ae8 <f_read+0x250>
 8013af4:	e73e      	b.n	8013974 <f_read+0xdc>
 8013af6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013afa:	e6e1      	b.n	80138c0 <f_read+0x28>
 8013afc:	3a01      	subs	r2, #1
 8013afe:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 8013b02:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8013b06:	458c      	cmp	ip, r1
			*d++ = *s++;
 8013b08:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 8013b0c:	d1f9      	bne.n	8013b02 <f_read+0x26a>
 8013b0e:	e731      	b.n	8013974 <f_read+0xdc>

08013b10 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b14:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8013b16:	2300      	movs	r3, #0
{
 8013b18:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 8013b1a:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013b1c:	b150      	cbz	r0, 8013b34 <f_write+0x24>
 8013b1e:	6803      	ldr	r3, [r0, #0]
 8013b20:	4604      	mov	r4, r0
 8013b22:	b13b      	cbz	r3, 8013b34 <f_write+0x24>
 8013b24:	4616      	mov	r6, r2
 8013b26:	781a      	ldrb	r2, [r3, #0]
 8013b28:	b122      	cbz	r2, 8013b34 <f_write+0x24>
 8013b2a:	460d      	mov	r5, r1
 8013b2c:	88da      	ldrh	r2, [r3, #6]
 8013b2e:	8881      	ldrh	r1, [r0, #4]
 8013b30:	4291      	cmp	r1, r2
 8013b32:	d005      	beq.n	8013b40 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8013b34:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8013b38:	4640      	mov	r0, r8
 8013b3a:	b005      	add	sp, #20
 8013b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013b40:	7858      	ldrb	r0, [r3, #1]
 8013b42:	f7fd fb4d 	bl	80111e0 <disk_status>
 8013b46:	07c1      	lsls	r1, r0, #31
 8013b48:	d4f4      	bmi.n	8013b34 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013b4a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013b4e:	f1b8 0f00 	cmp.w	r8, #0
 8013b52:	d1f1      	bne.n	8013b38 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013b54:	7d23      	ldrb	r3, [r4, #20]
 8013b56:	079a      	lsls	r2, r3, #30
 8013b58:	f140 80f6 	bpl.w	8013d48 <f_write+0x238>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013b5c:	69a2      	ldr	r2, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013b5e:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013b62:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013b64:	bf28      	it	cs
 8013b66:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 8013b68:	2e00      	cmp	r6, #0
 8013b6a:	f000 80cb 	beq.w	8013d04 <f_write+0x1f4>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013b6e:	f504 730c 	add.w	r3, r4, #560	; 0x230
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b72:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 8013b76:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013b78:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d160      	bne.n	8013c42 <f_write+0x132>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013b80:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 8013b84:	0a53      	lsrs	r3, r2, #9
 8013b86:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 8013b8a:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 8013b8e:	d110      	bne.n	8013bb2 <f_write+0xa2>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013b90:	2a00      	cmp	r2, #0
 8013b92:	f040 80a0 	bne.w	8013cd6 <f_write+0x1c6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013b96:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	f000 80e0 	beq.w	8013d5e <f_write+0x24e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013b9e:	2801      	cmp	r0, #1
 8013ba0:	f000 8087 	beq.w	8013cb2 <f_write+0x1a2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ba4:	1c43      	adds	r3, r0, #1
 8013ba6:	f000 80be 	beq.w	8013d26 <f_write+0x216>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013baa:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8013bac:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013bae:	b903      	cbnz	r3, 8013bb2 <f_write+0xa2>
 8013bb0:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013bb2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	f2c0 80a8 	blt.w	8013d0c <f_write+0x1fc>
	clst -= 2;
 8013bbc:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013bbe:	f8d9 2018 	ldr.w	r2, [r9, #24]
	clst -= 2;
 8013bc2:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013bc4:	3a02      	subs	r2, #2
 8013bc6:	4293      	cmp	r3, r2
 8013bc8:	d273      	bcs.n	8013cb2 <f_write+0x1a2>
	return clst * fs->csize + fs->database;
 8013bca:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8013bce:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8013bd2:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013bd6:	2a00      	cmp	r2, #0
 8013bd8:	d06b      	beq.n	8013cb2 <f_write+0x1a2>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013bda:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8013bde:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013be0:	d36e      	bcc.n	8013cc0 <f_write+0x1b0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013be2:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013be6:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013be8:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bea:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8013bee:	bf88      	it	hi
 8013bf0:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bf4:	4629      	mov	r1, r5
 8013bf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013bfa:	f7fd fb1d 	bl	8011238 <disk_write>
 8013bfe:	2800      	cmp	r0, #0
 8013c00:	f040 8091 	bne.w	8013d26 <f_write+0x216>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013c04:	6a21      	ldr	r1, [r4, #32]
 8013c06:	9a02      	ldr	r2, [sp, #8]
 8013c08:	9b03      	ldr	r3, [sp, #12]
 8013c0a:	1a8a      	subs	r2, r1, r2
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	f0c0 80ba 	bcc.w	8013d86 <f_write+0x276>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013c12:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 8013c16:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013c1a:	69a3      	ldr	r3, [r4, #24]
 8013c1c:	4615      	mov	r5, r2
 8013c1e:	68e2      	ldr	r2, [r4, #12]
 8013c20:	4463      	add	r3, ip
 8013c22:	429a      	cmp	r2, r3
 8013c24:	61a3      	str	r3, [r4, #24]
 8013c26:	bf38      	it	cc
 8013c28:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 8013c2a:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013c2e:	60e2      	str	r2, [r4, #12]
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	4463      	add	r3, ip
 8013c34:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8013c36:	d064      	beq.n	8013d02 <f_write+0x1f2>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013c38:	69a2      	ldr	r2, [r4, #24]
 8013c3a:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d09e      	beq.n	8013b80 <f_write+0x70>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013c42:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
 8013c46:	1c6a      	adds	r2, r5, #1
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013c48:	4453      	add	r3, sl
 8013c4a:	45b4      	cmp	ip, r6
 8013c4c:	eba3 0202 	sub.w	r2, r3, r2
 8013c50:	bf28      	it	cs
 8013c52:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013c54:	2a02      	cmp	r2, #2
 8013c56:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 8013c5a:	d96b      	bls.n	8013d34 <f_write+0x224>
 8013c5c:	f1bb 0f05 	cmp.w	fp, #5
 8013c60:	d968      	bls.n	8013d34 <f_write+0x224>
 8013c62:	f02c 0e03 	bic.w	lr, ip, #3
 8013c66:	461a      	mov	r2, r3
 8013c68:	4629      	mov	r1, r5
 8013c6a:	449e      	add	lr, r3
			*d++ = *s++;
 8013c6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8013c70:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8013c74:	4596      	cmp	lr, r2
 8013c76:	d1f9      	bne.n	8013c6c <f_write+0x15c>
 8013c78:	f02c 0103 	bic.w	r1, ip, #3
 8013c7c:	458c      	cmp	ip, r1
 8013c7e:	eb03 0001 	add.w	r0, r3, r1
 8013c82:	eb05 0201 	add.w	r2, r5, r1
 8013c86:	d00f      	beq.n	8013ca8 <f_write+0x198>
			*d++ = *s++;
 8013c88:	f815 e001 	ldrb.w	lr, [r5, r1]
		} while (--cnt);
 8013c8c:	ebbb 0b01 	subs.w	fp, fp, r1
			*d++ = *s++;
 8013c90:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 8013c94:	d006      	beq.n	8013ca4 <f_write+0x194>
			*d++ = *s++;
 8013c96:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 8013c98:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 8013c9c:	7043      	strb	r3, [r0, #1]
 8013c9e:	bf1c      	itt	ne
 8013ca0:	7893      	ldrbne	r3, [r2, #2]
 8013ca2:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 8013ca4:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 8013ca8:	7d23      	ldrb	r3, [r4, #20]
 8013caa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013cae:	7523      	strb	r3, [r4, #20]
 8013cb0:	e7b3      	b.n	8013c1a <f_write+0x10a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013cb2:	2302      	movs	r3, #2
 8013cb4:	4698      	mov	r8, r3
 8013cb6:	7563      	strb	r3, [r4, #21]
}
 8013cb8:	4640      	mov	r0, r8
 8013cba:	b005      	add	sp, #20
 8013cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013cc0:	6a23      	ldr	r3, [r4, #32]
 8013cc2:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 8013cc4:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013cc6:	d002      	beq.n	8013cce <f_write+0x1be>
 8013cc8:	68e1      	ldr	r1, [r4, #12]
 8013cca:	428b      	cmp	r3, r1
 8013ccc:	d34f      	bcc.n	8013d6e <f_write+0x25e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 8013cd2:	6222      	str	r2, [r4, #32]
 8013cd4:	e7b5      	b.n	8013c42 <f_write+0x132>
					if (fp->cltbl) {
 8013cd6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013cd8:	2900      	cmp	r1, #0
 8013cda:	d038      	beq.n	8013d4e <f_write+0x23e>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013cdc:	6822      	ldr	r2, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013cde:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013ce0:	8952      	ldrh	r2, [r2, #10]
 8013ce2:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013ce6:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013ce8:	b922      	cbnz	r2, 8013cf4 <f_write+0x1e4>
 8013cea:	e00a      	b.n	8013d02 <f_write+0x1f2>
		cl -= ncl; tbl++;		/* Next fragment */
 8013cec:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013cee:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013cf2:	b132      	cbz	r2, 8013d02 <f_write+0x1f2>
		if (cl < ncl) break;	/* In this fragment? */
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d2f9      	bcs.n	8013cec <f_write+0x1dc>
	return cl + *tbl;	/* Return the cluster number */
 8013cf8:	6848      	ldr	r0, [r1, #4]
 8013cfa:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	f47f af4e 	bne.w	8013b9e <f_write+0x8e>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013d02:	7d23      	ldrb	r3, [r4, #20]
 8013d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d08:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8013d0a:	e715      	b.n	8013b38 <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	6a22      	ldr	r2, [r4, #32]
 8013d10:	4651      	mov	r1, sl
 8013d12:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013d16:	f7fd fa8f 	bl	8011238 <disk_write>
 8013d1a:	b920      	cbnz	r0, 8013d26 <f_write+0x216>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013d1c:	7d23      	ldrb	r3, [r4, #20]
 8013d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d22:	7523      	strb	r3, [r4, #20]
 8013d24:	e74a      	b.n	8013bbc <f_write+0xac>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d26:	2301      	movs	r3, #1
 8013d28:	4698      	mov	r8, r3
 8013d2a:	7563      	strb	r3, [r4, #21]
}
 8013d2c:	4640      	mov	r0, r8
 8013d2e:	b005      	add	sp, #20
 8013d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d34:	3b01      	subs	r3, #1
 8013d36:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 8013d3a:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 8013d3e:	4295      	cmp	r5, r2
			*d++ = *s++;
 8013d40:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 8013d44:	d1f9      	bne.n	8013d3a <f_write+0x22a>
 8013d46:	e7af      	b.n	8013ca8 <f_write+0x198>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013d48:	f04f 0807 	mov.w	r8, #7
 8013d4c:	e6f4      	b.n	8013b38 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013d4e:	69e1      	ldr	r1, [r4, #28]
 8013d50:	4620      	mov	r0, r4
 8013d52:	f7fe f90f 	bl	8011f74 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013d56:	2800      	cmp	r0, #0
 8013d58:	f47f af21 	bne.w	8013b9e <f_write+0x8e>
 8013d5c:	e7d1      	b.n	8013d02 <f_write+0x1f2>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013d5e:	4659      	mov	r1, fp
 8013d60:	4620      	mov	r0, r4
 8013d62:	f7fe f907 	bl	8011f74 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013d66:	2800      	cmp	r0, #0
 8013d68:	f47f af19 	bne.w	8013b9e <f_write+0x8e>
 8013d6c:	e7c9      	b.n	8013d02 <f_write+0x1f2>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013d6e:	2301      	movs	r3, #1
 8013d70:	4651      	mov	r1, sl
 8013d72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013d76:	9202      	str	r2, [sp, #8]
 8013d78:	f7fd fa4e 	bl	8011218 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8013d7c:	2800      	cmp	r0, #0
 8013d7e:	d1d2      	bne.n	8013d26 <f_write+0x216>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013d80:	69a3      	ldr	r3, [r4, #24]
 8013d82:	9a02      	ldr	r2, [sp, #8]
 8013d84:	e7a3      	b.n	8013cce <f_write+0x1be>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013d86:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 8013d8a:	1c42      	adds	r2, r0, #1
 8013d8c:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013d8e:	ebaa 0202 	sub.w	r2, sl, r2
 8013d92:	2a02      	cmp	r2, #2
 8013d94:	d90d      	bls.n	8013db2 <f_write+0x2a2>
 8013d96:	4652      	mov	r2, sl
 8013d98:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 8013d9c:	f851 0b04 	ldr.w	r0, [r1], #4
 8013da0:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8013da4:	4562      	cmp	r2, ip
 8013da6:	d1f9      	bne.n	8013d9c <f_write+0x28c>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013da8:	7d22      	ldrb	r2, [r4, #20]
 8013daa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8013dae:	7522      	strb	r2, [r4, #20]
 8013db0:	e72f      	b.n	8013c12 <f_write+0x102>
 8013db2:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 8013db6:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 8013dba:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 8013dbe:	458c      	cmp	ip, r1
			*d++ = *s++;
 8013dc0:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8013dc4:	d1f9      	bne.n	8013dba <f_write+0x2aa>
 8013dc6:	e7ef      	b.n	8013da8 <f_write+0x298>

08013dc8 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013dc8:	b158      	cbz	r0, 8013de2 <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013dca:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013dcc:	6803      	ldr	r3, [r0, #0]
 8013dce:	4604      	mov	r4, r0
 8013dd0:	b12b      	cbz	r3, 8013dde <f_close+0x16>
 8013dd2:	781a      	ldrb	r2, [r3, #0]
 8013dd4:	b11a      	cbz	r2, 8013dde <f_close+0x16>
 8013dd6:	8881      	ldrh	r1, [r0, #4]
 8013dd8:	88da      	ldrh	r2, [r3, #6]
 8013dda:	4291      	cmp	r1, r2
 8013ddc:	d003      	beq.n	8013de6 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8013dde:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8013de0:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8013de2:	2009      	movs	r0, #9
}
 8013de4:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013de6:	7858      	ldrb	r0, [r3, #1]
 8013de8:	f7fd f9fa 	bl	80111e0 <disk_status>
 8013dec:	07c1      	lsls	r1, r0, #31
 8013dee:	d4f6      	bmi.n	8013dde <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013df0:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013df2:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013df4:	065a      	lsls	r2, r3, #25
 8013df6:	d52e      	bpl.n	8013e56 <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013df8:	061b      	lsls	r3, r3, #24
 8013dfa:	d451      	bmi.n	8013ea0 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 8013dfc:	f7fd f906 	bl	801100c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8013e00:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8013e02:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 8013e04:	4628      	mov	r0, r5
 8013e06:	f7fd fbc1 	bl	801158c <move_window>
				if (res == FR_OK) {
 8013e0a:	2800      	cmp	r0, #0
 8013e0c:	d1e8      	bne.n	8013de0 <f_close+0x18>
					dir = fp->dir_ptr;
 8013e0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013e10:	7ada      	ldrb	r2, [r3, #11]
 8013e12:	f042 0220 	orr.w	r2, r2, #32
 8013e16:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013e18:	68a2      	ldr	r2, [r4, #8]
 8013e1a:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013e1c:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8013e20:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 8013e22:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 8013e24:	7809      	ldrb	r1, [r1, #0]
 8013e26:	2903      	cmp	r1, #3
 8013e28:	d103      	bne.n	8013e32 <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013e2a:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8013e2c:	751a      	strb	r2, [r3, #20]
 8013e2e:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8013e30:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8013e32:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8013e34:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8013e36:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013e3a:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8013e3c:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8013e3e:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 8013e40:	2301      	movs	r3, #1
 8013e42:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013e44:	f7fe f838 	bl	8011eb8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013e48:	7d23      	ldrb	r3, [r4, #20]
 8013e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013e4e:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d1c5      	bne.n	8013de0 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013e54:	6825      	ldr	r5, [r4, #0]
 8013e56:	2d00      	cmp	r5, #0
 8013e58:	d0c1      	beq.n	8013dde <f_close+0x16>
 8013e5a:	782b      	ldrb	r3, [r5, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d0be      	beq.n	8013dde <f_close+0x16>
 8013e60:	88a2      	ldrh	r2, [r4, #4]
 8013e62:	88eb      	ldrh	r3, [r5, #6]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d1ba      	bne.n	8013dde <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013e68:	7868      	ldrb	r0, [r5, #1]
 8013e6a:	f7fd f9b9 	bl	80111e0 <disk_status>
 8013e6e:	f010 0001 	ands.w	r0, r0, #1
 8013e72:	d1b4      	bne.n	8013dde <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013e74:	6923      	ldr	r3, [r4, #16]
 8013e76:	3b01      	subs	r3, #1
 8013e78:	2b01      	cmp	r3, #1
 8013e7a:	d81e      	bhi.n	8013eba <f_close+0xf2>
		n = Files[i].ctr;
 8013e7c:	4912      	ldr	r1, [pc, #72]	; (8013ec8 <f_close+0x100>)
 8013e7e:	011d      	lsls	r5, r3, #4
 8013e80:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8013e84:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8013e86:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8013e8a:	d01a      	beq.n	8013ec2 <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 8013e8c:	b11a      	cbz	r2, 8013e96 <f_close+0xce>
 8013e8e:	3a01      	subs	r2, #1
 8013e90:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8013e92:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013e94:	b90a      	cbnz	r2, 8013e9a <f_close+0xd2>
 8013e96:	2300      	movs	r3, #0
 8013e98:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	6023      	str	r3, [r4, #0]
}
 8013e9e:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	6a22      	ldr	r2, [r4, #32]
 8013ea4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013ea8:	7868      	ldrb	r0, [r5, #1]
 8013eaa:	f7fd f9c5 	bl	8011238 <disk_write>
 8013eae:	b930      	cbnz	r0, 8013ebe <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013eb0:	7d23      	ldrb	r3, [r4, #20]
 8013eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013eb6:	7523      	strb	r3, [r4, #20]
 8013eb8:	e7a0      	b.n	8013dfc <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013eba:	2002      	movs	r0, #2
}
 8013ebc:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013ebe:	2001      	movs	r0, #1
}
 8013ec0:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 8013ec2:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013ec4:	e7e7      	b.n	8013e96 <f_close+0xce>
 8013ec6:	bf00      	nop
 8013ec8:	20019b84 	.word	0x20019b84

08013ecc <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8013ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013ed0:	b150      	cbz	r0, 8013ee8 <f_findnext+0x1c>
 8013ed2:	4605      	mov	r5, r0
 8013ed4:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8013ed6:	4c3b      	ldr	r4, [pc, #236]	; (8013fc4 <f_findnext+0xf8>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013ed8:	682b      	ldr	r3, [r5, #0]
 8013eda:	b12b      	cbz	r3, 8013ee8 <f_findnext+0x1c>
 8013edc:	781a      	ldrb	r2, [r3, #0]
 8013ede:	b11a      	cbz	r2, 8013ee8 <f_findnext+0x1c>
 8013ee0:	88a9      	ldrh	r1, [r5, #4]
 8013ee2:	88da      	ldrh	r2, [r3, #6]
 8013ee4:	4291      	cmp	r1, r2
 8013ee6:	d003      	beq.n	8013ef0 <f_findnext+0x24>
	FRESULT res = FR_INVALID_OBJECT;
 8013ee8:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 8013eea:	4638      	mov	r0, r7
 8013eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013ef0:	7858      	ldrb	r0, [r3, #1]
 8013ef2:	f7fd f975 	bl	80111e0 <disk_status>
 8013ef6:	f010 0101 	ands.w	r1, r0, #1
 8013efa:	d1f5      	bne.n	8013ee8 <f_findnext+0x1c>
		if (!fno) {
 8013efc:	2e00      	cmp	r6, #0
 8013efe:	d059      	beq.n	8013fb4 <f_findnext+0xe8>
			res = dir_read(dp, 0);			/* Read an item */
 8013f00:	4628      	mov	r0, r5
 8013f02:	f7fd fdcf 	bl	8011aa4 <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 8013f06:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 8013f0a:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8013f0c:	d1ed      	bne.n	8013eea <f_findnext+0x1e>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013f0e:	4631      	mov	r1, r6
 8013f10:	4628      	mov	r0, r5
 8013f12:	f7fd fa7b 	bl	801140c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013f16:	4641      	mov	r1, r8
 8013f18:	4628      	mov	r0, r5
 8013f1a:	f7fe fdd1 	bl	8012ac0 <dir_next>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8013f1e:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
 8013f22:	d14d      	bne.n	8013fc0 <f_findnext+0xf4>
 8013f24:	7db3      	ldrb	r3, [r6, #22]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d0df      	beq.n	8013eea <f_findnext+0x1e>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8013f2a:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
 8013f2e:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
 8013f32:	e00f      	b.n	8013f54 <f_findnext+0x88>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8013f34:	3a20      	subs	r2, #32
 8013f36:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8013f38:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8013f3c:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8013f40:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8013f42:	f1be 0f19 	cmp.w	lr, #25
 8013f46:	d817      	bhi.n	8013f78 <f_findnext+0xac>
 8013f48:	3b20      	subs	r3, #32
 8013f4a:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 8013f4c:	4293      	cmp	r3, r2
 8013f4e:	d1c3      	bne.n	8013ed8 <f_findnext+0xc>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d0ca      	beq.n	8013eea <f_findnext+0x1e>
 8013f54:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8013f56:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8013f5a:	2b3f      	cmp	r3, #63	; 0x3f
 8013f5c:	d012      	beq.n	8013f84 <f_findnext+0xb8>
 8013f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8013f60:	d010      	beq.n	8013f84 <f_findnext+0xb8>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8013f62:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8013f66:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8013f68:	2819      	cmp	r0, #25
 8013f6a:	d9e3      	bls.n	8013f34 <f_findnext+0x68>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8013f6c:	2a7f      	cmp	r2, #127	; 0x7f
 8013f6e:	d9e3      	bls.n	8013f38 <f_findnext+0x6c>
 8013f70:	4423      	add	r3, r4
 8013f72:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 8013f76:	e7df      	b.n	8013f38 <f_findnext+0x6c>
 8013f78:	2b7f      	cmp	r3, #127	; 0x7f
 8013f7a:	d9e7      	bls.n	8013f4c <f_findnext+0x80>
 8013f7c:	4420      	add	r0, r4
 8013f7e:	f810 3c80 	ldrb.w	r3, [r0, #-128]
 8013f82:	e7e3      	b.n	8013f4c <f_findnext+0x80>
 8013f84:	4694      	mov	ip, r2
				nm = nx = 0;
 8013f86:	2300      	movs	r3, #0
 8013f88:	f81c eb01 	ldrb.w	lr, [ip], #1
 8013f8c:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 8013f8e:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 8013f92:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 8013f94:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 8013f98:	bf0c      	ite	eq
 8013f9a:	3201      	addeq	r2, #1
 8013f9c:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 8013f9e:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 8013fa2:	d0f4      	beq.n	8013f8e <f_findnext+0xc2>
 8013fa4:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 8013fa8:	d0f1      	beq.n	8013f8e <f_findnext+0xc2>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8013faa:	f7fd f9b9 	bl	8011320 <pattern_matching>
 8013fae:	2800      	cmp	r0, #0
 8013fb0:	d092      	beq.n	8013ed8 <f_findnext+0xc>
 8013fb2:	e79a      	b.n	8013eea <f_findnext+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013fb4:	4631      	mov	r1, r6
 8013fb6:	4628      	mov	r0, r5
}
 8013fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013fbc:	f7fe b89a 	b.w	80120f4 <dir_sdi>
 8013fc0:	4607      	mov	r7, r0
 8013fc2:	e792      	b.n	8013eea <f_findnext+0x1e>
 8013fc4:	0801f4b4 	.word	0x0801f4b4

08013fc8 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8013fc8:	b570      	push	{r4, r5, r6, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	4615      	mov	r5, r2
 8013fce:	4604      	mov	r4, r0
 8013fd0:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8013fd2:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	a901      	add	r1, sp, #4
 8013fd8:	4668      	mov	r0, sp
 8013fda:	9500      	str	r5, [sp, #0]
 8013fdc:	f7fd fb14 	bl	8011608 <find_volume>
	if (res == FR_OK) {
 8013fe0:	b118      	cbz	r0, 8013fea <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 8013fe6:	b002      	add	sp, #8
 8013fe8:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013fea:	e9dd 1500 	ldrd	r1, r5, [sp]
 8013fee:	4620      	mov	r0, r4
		obj->fs = fs;
 8013ff0:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013ff2:	f7fe fad7 	bl	80125a4 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8013ff6:	bb00      	cbnz	r0, 801403a <f_findfirst+0x72>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8013ff8:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	db0b      	blt.n	8014018 <f_findfirst+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014000:	79a3      	ldrb	r3, [r4, #6]
 8014002:	06db      	lsls	r3, r3, #27
 8014004:	d51f      	bpl.n	8014046 <f_findfirst+0x7e>
	if (fs->fs_type == FS_FAT32) {
 8014006:	7829      	ldrb	r1, [r5, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014008:	6a22      	ldr	r2, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 801400a:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 801400c:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 801400e:	d102      	bne.n	8014016 <f_findfirst+0x4e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014010:	8a92      	ldrh	r2, [r2, #20]
 8014012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014016:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 8014018:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801401a:	2100      	movs	r1, #0
 801401c:	4620      	mov	r0, r4
				obj->id = fs->id;
 801401e:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014020:	f7fe f868 	bl	80120f4 <dir_sdi>
				if (res == FR_OK) {
 8014024:	b948      	cbnz	r0, 801403a <f_findfirst+0x72>
					if (obj->sclust) {
 8014026:	68a3      	ldr	r3, [r4, #8]
 8014028:	b97b      	cbnz	r3, 801404a <f_findfirst+0x82>
						obj->lockid = 0;	/* Root directory need not to be locked */
 801402a:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 801402c:	4631      	mov	r1, r6
 801402e:	4620      	mov	r0, r4
}
 8014030:	b002      	add	sp, #8
 8014032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 8014036:	f7ff bf49 	b.w	8013ecc <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801403a:	2804      	cmp	r0, #4
 801403c:	d1d1      	bne.n	8013fe2 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801403e:	2300      	movs	r3, #0
	res = f_opendir(dp, path);		/* Open the target directory */
 8014040:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8014042:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
 8014044:	e7cf      	b.n	8013fe6 <f_findfirst+0x1e>
					res = FR_NO_PATH;
 8014046:	2005      	movs	r0, #5
 8014048:	e7cb      	b.n	8013fe2 <f_findfirst+0x1a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801404a:	4601      	mov	r1, r0
 801404c:	4620      	mov	r0, r4
 801404e:	f7fd f90f 	bl	8011270 <inc_lock>
 8014052:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8014054:	2800      	cmp	r0, #0
 8014056:	d1e9      	bne.n	801402c <f_findfirst+0x64>
 8014058:	2012      	movs	r0, #18
 801405a:	e7c2      	b.n	8013fe2 <f_findfirst+0x1a>

0801405c <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 801405c:	4b11      	ldr	r3, [pc, #68]	; (80140a4 <FATFS_LinkDriver+0x48>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801405e:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8014060:	7a5c      	ldrb	r4, [r3, #9]
 8014062:	b9cc      	cbnz	r4, 8014098 <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
 8014064:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 8014068:	7a5c      	ldrb	r4, [r3, #9]
 801406a:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
 801406c:	7a5c      	ldrb	r4, [r3, #9]
 801406e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014072:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8014074:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8014076:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8014078:	441c      	add	r4, r3
 801407a:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 801407c:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
 801407e:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 8014080:	b2e4      	uxtb	r4, r4
 8014082:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8014084:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8014086:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8014088:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 801408a:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 801408c:	4610      	mov	r0, r2
 801408e:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
 8014092:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 8014094:	708b      	strb	r3, [r1, #2]
}
 8014096:	4770      	bx	lr
  uint8_t ret = 1;
 8014098:	2201      	movs	r2, #1
}
 801409a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801409e:	4610      	mov	r0, r2
 80140a0:	4770      	bx	lr
 80140a2:	bf00      	nop
 80140a4:	20019da8 	.word	0x20019da8

080140a8 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80140a8:	287f      	cmp	r0, #127	; 0x7f
 80140aa:	d913      	bls.n	80140d4 <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80140ac:	b979      	cbnz	r1, 80140ce <ff_convert+0x26>
 80140ae:	4b0c      	ldr	r3, [pc, #48]	; (80140e0 <ff_convert+0x38>)
 80140b0:	e001      	b.n	80140b6 <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80140b2:	2980      	cmp	r1, #128	; 0x80
 80140b4:	d00d      	beq.n	80140d2 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 80140b6:	f833 2b02 	ldrh.w	r2, [r3], #2
 80140ba:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 80140be:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 80140c0:	4282      	cmp	r2, r0
 80140c2:	d1f6      	bne.n	80140b2 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 80140c4:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 80140c8:	fa1f f08c 	uxth.w	r0, ip
 80140cc:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80140ce:	28ff      	cmp	r0, #255	; 0xff
 80140d0:	d901      	bls.n	80140d6 <ff_convert+0x2e>
 80140d2:	2000      	movs	r0, #0
		}
	}

	return c;
}
 80140d4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80140d6:	4b02      	ldr	r3, [pc, #8]	; (80140e0 <ff_convert+0x38>)
 80140d8:	3880      	subs	r0, #128	; 0x80
 80140da:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80140de:	4770      	bx	lr
 80140e0:	0801f544 	.word	0x0801f544

080140e4 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80140e4:	4b23      	ldr	r3, [pc, #140]	; (8014174 <ff_wtoupper+0x90>)
 80140e6:	4a24      	ldr	r2, [pc, #144]	; (8014178 <ff_wtoupper+0x94>)
 80140e8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80140ec:	bf28      	it	cs
 80140ee:	4613      	movcs	r3, r2
{
 80140f0:	b510      	push	{r4, lr}
 80140f2:	3304      	adds	r3, #4
 80140f4:	e00a      	b.n	801410c <ff_wtoupper+0x28>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80140f6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80140fa:	fa5f fc82 	uxtb.w	ip, r2
 80140fe:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8014100:	eb0c 0e01 	add.w	lr, ip, r1
 8014104:	4570      	cmp	r0, lr
 8014106:	db09      	blt.n	801411c <ff_wtoupper+0x38>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8014108:	3304      	adds	r3, #4
 801410a:	b182      	cbz	r2, 801412e <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 801410c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 8014110:	461c      	mov	r4, r3
 8014112:	1e4a      	subs	r2, r1, #1
 8014114:	b292      	uxth	r2, r2
 8014116:	4290      	cmp	r0, r2
 8014118:	d8ed      	bhi.n	80140f6 <ff_wtoupper+0x12>
	}

	return chr;
}
 801411a:	bd10      	pop	{r4, pc}
			switch (cmd) {
 801411c:	2a08      	cmp	r2, #8
 801411e:	d8fc      	bhi.n	801411a <ff_wtoupper+0x36>
 8014120:	e8df f002 	tbb	[pc, r2]
 8014124:	1916100c 	.word	0x1916100c
 8014128:	25221f1c 	.word	0x25221f1c
 801412c:	08          	.byte	0x08
 801412d:	00          	.byte	0x00
		if (!cmd) p += nc;
 801412e:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 8014132:	e7de      	b.n	80140f2 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014134:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8014138:	b280      	uxth	r0, r0
}
 801413a:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801413c:	1a41      	subs	r1, r0, r1
 801413e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 8014142:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014144:	1a43      	subs	r3, r0, r1
 8014146:	f003 0301 	and.w	r3, r3, #1
 801414a:	1ac3      	subs	r3, r0, r3
 801414c:	b298      	uxth	r0, r3
}
 801414e:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 8014150:	3810      	subs	r0, #16
 8014152:	b280      	uxth	r0, r0
}
 8014154:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014156:	3820      	subs	r0, #32
 8014158:	b280      	uxth	r0, r0
}
 801415a:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 801415c:	3830      	subs	r0, #48	; 0x30
 801415e:	b280      	uxth	r0, r0
}
 8014160:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014162:	381a      	subs	r0, #26
 8014164:	b280      	uxth	r0, r0
}
 8014166:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 8014168:	3008      	adds	r0, #8
 801416a:	b280      	uxth	r0, r0
}
 801416c:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 801416e:	3850      	subs	r0, #80	; 0x50
 8014170:	b280      	uxth	r0, r0
}
 8014172:	bd10      	pop	{r4, pc}
 8014174:	0801f644 	.word	0x0801f644
 8014178:	0801f838 	.word	0x0801f838

0801417c <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, float factor, tMempool* const mp)
{
 801417c:	b538      	push	{r3, r4, r5, lr}
 801417e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8014182:	680d      	ldr	r5, [r1, #0]
{
 8014184:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 8014186:	2010      	movs	r0, #16
{
 8014188:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 801418c:	4629      	mov	r1, r5
 801418e:	f002 ff5d 	bl	801704c <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 8014192:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 8014196:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 8014198:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 801419a:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 801419c:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
 80141a0:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 80141a2:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 80141a6:	edc0 7a02 	vstr	s15, [r0, #8]
}
 80141aa:	ecbd 8b02 	vpop	{d8}
 80141ae:	bd38      	pop	{r3, r4, r5, pc}

080141b0 <tPowerFollower_setFactor>:
    mpool_free((char*)p, p->mempool);
}

void tPowerFollower_setFactor(tPowerFollower* const pf, float factor)
{
    _tPowerFollower* p = *pf;
 80141b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80141b4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80141d0 <tPowerFollower_setFactor+0x20>
 80141b8:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0) factor=0;
    if (factor>1) factor=1;
 80141ba:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 80141be:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 80141c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
 80141c6:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 80141ca:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80141ce:	4770      	bx	lr
 80141d0:	00000000 	.word	0x00000000

080141d4 <tPowerFollower_tick>:

float tPowerFollower_tick(tPowerFollower* const pf, float input)
{
    _tPowerFollower* p = *pf;
 80141d4:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 80141d6:	ee60 7a00 	vmul.f32	s15, s0, s0
 80141da:	edd3 6a03 	vldr	s13, [r3, #12]
 80141de:	ed93 0a02 	vldr	s0, [r3, #8]
 80141e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80141e6:	ee20 0a26 	vmul.f32	s0, s0, s13
 80141ea:	eea7 0a27 	vfma.f32	s0, s14, s15
 80141ee:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 80141f2:	4770      	bx	lr

080141f4 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 80141f4:	b570      	push	{r4, r5, r6, lr}
 80141f6:	460d      	mov	r5, r1
 80141f8:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 80141fa:	202c      	movs	r0, #44	; 0x2c
{
 80141fc:	ed2d 8b02 	vpush	{d8}
 8014200:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 8014202:	6811      	ldr	r1, [r2, #0]
{
 8014204:	eeb0 8a40 	vmov.f32	s16, s0
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 8014208:	eddf 8a30 	vldr	s17, [pc, #192]	; 80142cc <tLinearDelay_initToPool+0xd8>
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 801420c:	9101      	str	r1, [sp, #4]
 801420e:	f002 ff1d 	bl	801704c <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
 8014212:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 8014216:	4604      	mov	r4, r0
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8014218:	9901      	ldr	r1, [sp, #4]
    if (delay > maxDelay)   d->delay = maxDelay;
 801421a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 801421e:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
 8014220:	fec8 7a28 	vmaxnm.f32	s15, s16, s17
    d->mempool = m;
 8014224:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 8014226:	61c5      	str	r5, [r0, #28]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8014228:	00a8      	lsls	r0, r5, #2
    if (delay > maxDelay)   d->delay = maxDelay;
 801422a:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 801422e:	edc4 7a08 	vstr	s15, [r4, #32]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8014232:	f002 ff0b 	bl	801704c <mpool_alloc>

    d->gain = 1.0f;
 8014236:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
 801423a:	2300      	movs	r3, #0
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801423c:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
 801423e:	6062      	str	r2, [r4, #4]

void     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8014240:	eeb0 0a68 	vmov.f32	s0, s17
    d->lastIn = 0.0f;
 8014244:	edc4 8a04 	vstr	s17, [r4, #16]
    d->lastOut = 0.0f;
 8014248:	edc4 8a03 	vstr	s17, [r4, #12]
    d->inPoint = 0;
 801424c:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
 801424e:	61a3      	str	r3, [r4, #24]
    _tLinearDelay* d = *dl;
 8014250:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8014252:	edd4 0a08 	vldr	s1, [r4, #32]
 8014256:	edd5 7a07 	vldr	s15, [r5, #28]
 801425a:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801425e:	f002 fd1d 	bl	8016c9c <LEAF_clip>

    float outPointer = d->inPoint - d->delay;
 8014262:	edd5 7a05 	vldr	s15, [r5, #20]

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 8014266:	69ea      	ldr	r2, [r5, #28]
    float outPointer = d->inPoint - d->delay;
 8014268:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801426c:	ed85 0a08 	vstr	s0, [r5, #32]
    float outPointer = d->inPoint - d->delay;
 8014270:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 8014274:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801427c:	d50a      	bpl.n	8014294 <tLinearDelay_initToPool+0xa0>
        outPointer += d->maxDelay; // modulo maximum length
 801427e:	ee07 2a10 	vmov	s14, r2
 8014282:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014286:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 801428a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014292:	d4f8      	bmi.n	8014286 <tLinearDelay_initToPool+0x92>

    d->outPoint = (uint32_t) outPointer;   // integer part
 8014294:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8014298:	ee17 3a10 	vmov	r3, s14

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 801429c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 80142a0:	ee06 3a90 	vmov	s13, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 80142a4:	4293      	cmp	r3, r2
 80142a6:	bf08      	it	eq
 80142a8:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
 80142aa:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 80142ae:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80142b2:	61ab      	str	r3, [r5, #24]
 80142b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 80142b8:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
 80142bc:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 80142c0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
}
 80142c4:	b002      	add	sp, #8
 80142c6:	ecbd 8b02 	vpop	{d8}
 80142ca:	bd70      	pop	{r4, r5, r6, pc}
 80142cc:	00000000 	.word	0x00000000

080142d0 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
 80142d0:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 80142d2:	69cb      	ldr	r3, [r1, #28]
 80142d4:	b14b      	cbz	r3, 80142ea <tLinearDelay_clear+0x1a>
 80142d6:	2300      	movs	r3, #0
        d->buff[i] = 0;
 80142d8:	2000      	movs	r0, #0
 80142da:	688a      	ldr	r2, [r1, #8]
 80142dc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 80142e0:	3301      	adds	r3, #1
        d->buff[i] = 0;
 80142e2:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 80142e4:	69ca      	ldr	r2, [r1, #28]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d8f7      	bhi.n	80142da <tLinearDelay_clear+0xa>
}
 80142ea:	4770      	bx	lr

080142ec <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
 80142ec:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 80142ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80142f2:	6959      	ldr	r1, [r3, #20]
 80142f4:	689a      	ldr	r2, [r3, #8]
 80142f6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80142fa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80142fe:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 8014302:	695a      	ldr	r2, [r3, #20]
 8014304:	69d9      	ldr	r1, [r3, #28]
 8014306:	3201      	adds	r2, #1
 8014308:	428a      	cmp	r2, r1
 801430a:	bf08      	it	eq
 801430c:	2200      	moveq	r2, #0
 801430e:	615a      	str	r2, [r3, #20]
}
 8014310:	4770      	bx	lr
 8014312:	bf00      	nop

08014314 <tLinearDelay_tickOut>:
{
 8014314:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 8014316:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
 8014318:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
 801431a:	6899      	ldr	r1, [r3, #8]
 801431c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014320:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
 8014324:	69dc      	ldr	r4, [r3, #28]
 8014326:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 8014328:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
 801432c:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
 801432e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014332:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 8014336:	d20b      	bcs.n	8014350 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 8014338:	ed90 7a01 	vldr	s14, [r0, #4]
 801433c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8014340:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 8014342:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014346:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801434a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801434e:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 8014350:	ed91 7a00 	vldr	s14, [r1]
 8014354:	2200      	movs	r2, #0
 8014356:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 801435a:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 801435c:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
 8014360:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8014364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014368:	4770      	bx	lr
 801436a:	bf00      	nop

0801436c <tLinearDelay_setDelay>:
{
 801436c:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 801436e:	6804      	ldr	r4, [r0, #0]
{
 8014370:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8014374:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80143e8 <tLinearDelay_setDelay+0x7c>
 8014378:	edd4 7a07 	vldr	s15, [r4, #28]
 801437c:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8014380:	f002 fc8c 	bl	8016c9c <LEAF_clip>
    float outPointer = d->inPoint - d->delay;
 8014384:	edd4 7a05 	vldr	s15, [r4, #20]
        outPointer += d->maxDelay; // modulo maximum length
 8014388:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
 801438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 801438e:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
 8014392:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 8014396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801439e:	d50a      	bpl.n	80143b6 <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 80143a0:	ee07 2a10 	vmov	s14, r2
 80143a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80143a8:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 80143ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80143b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143b4:	d4f8      	bmi.n	80143a8 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
 80143b6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80143ba:	ee17 3a10 	vmov	r3, s14
    d->omAlpha = 1.0f - d->alpha;
 80143be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 80143c2:	ee06 3a90 	vmov	s13, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 80143c6:	4293      	cmp	r3, r2
 80143c8:	bf08      	it	eq
 80143ca:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
 80143cc:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 80143d0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80143d4:	61a3      	str	r3, [r4, #24]
 80143d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 80143da:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
 80143de:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 80143e2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
}
 80143e6:	bd10      	pop	{r4, pc}
 80143e8:	00000000 	.word	0x00000000

080143ec <tHermiteDelay_initToPool>:
{
    tHermiteDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tHermiteDelay_initToPool  (tHermiteDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 80143ec:	b570      	push	{r4, r5, r6, lr}
 80143ee:	460d      	mov	r5, r1
 80143f0:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 80143f2:	2030      	movs	r0, #48	; 0x30
{
 80143f4:	ed2d 8b02 	vpush	{d8}
 80143f8:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 80143fa:	6811      	ldr	r1, [r2, #0]
{
 80143fc:	eeb0 8a40 	vmov.f32	s16, s0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 8014400:	9101      	str	r1, [sp, #4]
 8014402:	f002 fe23 	bl	801704c <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 8014406:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
 801440a:	9901      	ldr	r1, [sp, #4]
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 801440c:	6030      	str	r0, [r6, #0]
 801440e:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 8014410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014414:	eddf 7a30 	vldr	s15, [pc, #192]	; 80144d8 <tHermiteDelay_initToPool+0xec>
    d->mempool = m;
 8014418:	6001      	str	r1, [r0, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
 801441a:	fec8 7a27 	vmaxnm.f32	s15, s16, s15
    d->maxDelay = maxDelay;
 801441e:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 8014420:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8014424:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 8014428:	2d00      	cmp	r5, #0
 801442a:	d14f      	bne.n	80144cc <tHermiteDelay_initToPool+0xe0>
 801442c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else
    {
        //make the delay size into a power of 2
        maxDelay--;
        maxDelay |= maxDelay >> 1;
 8014430:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 8014434:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 8014438:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 801443c:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 8014440:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
 8014444:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
 8014446:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
 8014448:	60a2      	str	r2, [r4, #8]
    }
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801444a:	00a8      	lsls	r0, r5, #2
 801444c:	f002 fdfe 	bl	801704c <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
 8014450:	2300      	movs	r3, #0
    d->gain = 1.0f;
 8014452:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8014456:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
 8014458:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 801445a:	60e3      	str	r3, [r4, #12]

    d->inPoint = 0;
 801445c:	2300      	movs	r3, #0
    d->gain = 1.0f;
 801445e:	6222      	str	r2, [r4, #32]
    d->outPoint = 0;

    tHermiteDelay_setDelay(dl, d->delay);
 8014460:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    d->outPoint = 0;
 8014464:	e9c4 3305 	strd	r3, r3, [r4, #20]
    return d->lastOut;
}

void tHermiteDelay_setDelay (tHermiteDelay* const dl, float delay)
{
    _tHermiteDelay* d = *dl;
 8014468:	6833      	ldr	r3, [r6, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    float outPointer = d->inPoint - d->delay;
 801446a:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
 801446e:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
 8014472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014476:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
 801447a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014482:	d50a      	bpl.n	801449a <tHermiteDelay_initToPool+0xae>
        outPointer += d->maxDelay; // modulo maximum length
 8014484:	ed93 7a07 	vldr	s14, [r3, #28]
 8014488:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801448c:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 8014490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014498:	d4f8      	bmi.n	801448c <tHermiteDelay_initToPool+0xa0>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
 801449a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    
    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
    
    d->outPoint &= d->bufferMask;
 801449e:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
 80144a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 80144a4:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
 80144a8:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
 80144ac:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
 80144b0:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
 80144b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 80144b6:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
 80144ba:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 80144bc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
 80144c0:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
 80144c4:	b002      	add	sp, #8
 80144c6:	ecbd 8b02 	vpop	{d8}
 80144ca:	bd70      	pop	{r4, r5, r6, pc}
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 80144cc:	1e6b      	subs	r3, r5, #1
 80144ce:	422b      	tst	r3, r5
 80144d0:	461a      	mov	r2, r3
 80144d2:	d1ad      	bne.n	8014430 <tHermiteDelay_initToPool+0x44>
 80144d4:	e7b8      	b.n	8014448 <tHermiteDelay_initToPool+0x5c>
 80144d6:	bf00      	nop
 80144d8:	00000000 	.word	0x00000000

080144dc <tHermiteDelay_clear>:
    _tHermiteDelay* d = *dl;
 80144dc:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 80144de:	69cb      	ldr	r3, [r1, #28]
 80144e0:	b14b      	cbz	r3, 80144f6 <tHermiteDelay_clear+0x1a>
 80144e2:	2300      	movs	r3, #0
        d->buff[i] = 0;
 80144e4:	2000      	movs	r0, #0
 80144e6:	684a      	ldr	r2, [r1, #4]
 80144e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 80144ec:	3301      	adds	r3, #1
        d->buff[i] = 0;
 80144ee:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 80144f0:	69ca      	ldr	r2, [r1, #28]
 80144f2:	429a      	cmp	r2, r3
 80144f4:	d8f7      	bhi.n	80144e6 <tHermiteDelay_clear+0xa>
}
 80144f6:	4770      	bx	lr

080144f8 <tHermiteDelay_tickIn>:
    _tHermiteDelay* d = *dl;
 80144f8:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input;
 80144fa:	6959      	ldr	r1, [r3, #20]
 80144fc:	685a      	ldr	r2, [r3, #4]
 80144fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014502:	ed82 0a00 	vstr	s0, [r2]
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 8014506:	695a      	ldr	r2, [r3, #20]
 8014508:	6899      	ldr	r1, [r3, #8]
 801450a:	3201      	adds	r2, #1
 801450c:	400a      	ands	r2, r1
 801450e:	615a      	str	r2, [r3, #20]
}
 8014510:	4770      	bx	lr
 8014512:	bf00      	nop

08014514 <tHermiteDelay_tickOut>:
{
 8014514:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
 8014516:	6804      	ldr	r4, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
 8014518:	69a1      	ldr	r1, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 801451a:	ed94 2a0a 	vldr	s4, [r4, #40]	; 0x28
                                                d->buff[(idx + 2) & d->bufferMask],
 801451e:	1c8b      	adds	r3, r1, #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8014520:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
                                                d->buff[(idx + 2) & d->bufferMask],
 8014524:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8014526:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801452a:	edd3 1a00 	vldr	s3, [r3]
 801452e:	69e3      	ldr	r3, [r4, #28]
 8014530:	440b      	add	r3, r1
 8014532:	3b01      	subs	r3, #1
 8014534:	4003      	ands	r3, r0
 8014536:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801453a:	ed93 0a00 	vldr	s0, [r3]
                                                d->buff[(idx + 1) & d->bufferMask],
 801453e:	1c4b      	adds	r3, r1, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8014540:	eb02 0181 	add.w	r1, r2, r1, lsl #2
                                                d->buff[(idx + 1) & d->bufferMask],
 8014544:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8014546:	edd1 0a00 	vldr	s1, [r1]
 801454a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801454e:	ed92 1a00 	vldr	s2, [r2]
 8014552:	f002 fc8d 	bl	8016e70 <LEAF_interpolate_hermite_x>
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 8014556:	69a3      	ldr	r3, [r4, #24]
 8014558:	68a2      	ldr	r2, [r4, #8]
 801455a:	3301      	adds	r3, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 801455c:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 8014560:	4013      	ands	r3, r2
 8014562:	61a3      	str	r3, [r4, #24]
}
 8014564:	bd10      	pop	{r4, pc}
 8014566:	bf00      	nop

08014568 <tHermiteDelay_setDelay>:
    _tHermiteDelay* d = *dl;
 8014568:	6803      	ldr	r3, [r0, #0]
    float outPointer = d->inPoint - d->delay;
 801456a:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
 801456e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
 8014572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014576:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 801457a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801457e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014582:	d50a      	bpl.n	801459a <tHermiteDelay_setDelay+0x32>
        outPointer += d->maxDelay; // modulo maximum length
 8014584:	ed93 7a07 	vldr	s14, [r3, #28]
 8014588:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801458c:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 8014590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014598:	d4f8      	bmi.n	801458c <tHermiteDelay_setDelay+0x24>
    d->outPoint = (uint32_t) outPointer;   // integer part
 801459a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    d->outPoint &= d->bufferMask;
 801459e:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
 80145a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 80145a4:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
 80145a8:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
 80145ac:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
 80145b0:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
 80145b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 80145b6:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
 80145ba:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 80145bc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
 80145c0:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
 80145c4:	4770      	bx	lr
 80145c6:	bf00      	nop

080145c8 <tHermiteDelay_tapOut>:

float tHermiteDelay_tapOut (tHermiteDelay* const dl, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
 80145c8:	6802      	ldr	r2, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 80145ca:	6953      	ldr	r3, [r2, #20]
 80145cc:	1a5b      	subs	r3, r3, r1
    
    return d->buff[tap];
 80145ce:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 80145d2:	3b01      	subs	r3, #1
 80145d4:	4003      	ands	r3, r0
    return d->buff[tap];
 80145d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2

}
 80145da:	ed92 0a00 	vldr	s0, [r2]
 80145de:	4770      	bx	lr

080145e0 <tHermiteDelay_addTo>:
    d->buff[tap] = value;
}

float tHermiteDelay_addTo (tHermiteDelay* const dl, float value, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
 80145e0:	6802      	ldr	r2, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 80145e2:	6953      	ldr	r3, [r2, #20]
 80145e4:	1a5b      	subs	r3, r3, r1
    
    return (d->buff[tap] += value);
 80145e6:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 80145ea:	3b01      	subs	r3, #1
 80145ec:	4003      	ands	r3, r0
    return (d->buff[tap] += value);
 80145ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80145f2:	edd3 7a00 	vldr	s15, [r3]
 80145f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80145fa:	ed83 0a00 	vstr	s0, [r3]
}
 80145fe:	4770      	bx	lr

08014600 <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
 8014600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
 8014604:	1e16      	subs	r6, r2, #0
{
 8014606:	b082      	sub	sp, #8
 8014608:	460c      	mov	r4, r1
 801460a:	4680      	mov	r8, r0
    if (extraQuality) offset = 6;
 801460c:	bf0c      	ite	eq
 801460e:	2700      	moveq	r7, #0
 8014610:	2706      	movne	r7, #6
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8014612:	2902      	cmp	r1, #2
 8014614:	d00d      	beq.n	8014632 <tOversampler_init+0x32>
 8014616:	2904      	cmp	r1, #4
 8014618:	d00b      	beq.n	8014632 <tOversampler_init+0x32>
 801461a:	2920      	cmp	r1, #32
 801461c:	dc43      	bgt.n	80146a6 <tOversampler_init+0xa6>
 801461e:	2907      	cmp	r1, #7
 8014620:	dc02      	bgt.n	8014628 <tOversampler_init+0x28>
}
 8014622:	b002      	add	sp, #8
 8014624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014628:	3908      	subs	r1, #8
 801462a:	4a21      	ldr	r2, [pc, #132]	; (80146b0 <tOversampler_init+0xb0>)
 801462c:	40ca      	lsrs	r2, r1
 801462e:	07d2      	lsls	r2, r2, #31
 8014630:	d5f7      	bpl.n	8014622 <tOversampler_init+0x22>
    _tMempool* m = *mp;
 8014632:	6999      	ldr	r1, [r3, #24]
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8014634:	2028      	movs	r0, #40	; 0x28
 8014636:	9101      	str	r1, [sp, #4]
 8014638:	f002 fd08 	bl	801704c <mpool_alloc>
        os->mempool = m;
 801463c:	9901      	ldr	r1, [sp, #4]
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 801463e:	ee07 4a90 	vmov	s15, r4
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8014642:	f8c8 0000 	str.w	r0, [r8]
 8014646:	4605      	mov	r5, r0
        os->mempool = m;
 8014648:	6001      	str	r1, [r0, #0]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 801464a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->offset = offset;
 801464e:	6107      	str	r7, [r0, #16]
        os->ratio = os->maxRatio;
 8014650:	60c4      	str	r4, [r0, #12]
        os->allowHighQuality = extraQuality;
 8014652:	e9c0 4601 	strd	r4, r6, [r0, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8014656:	f008 fd97 	bl	801d188 <log2f>
 801465a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 801465e:	4a15      	ldr	r2, [pc, #84]	; (80146b4 <tOversampler_init+0xb4>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8014660:	9901      	ldr	r1, [sp, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8014662:	ee17 3a90 	vmov	r3, s15
 8014666:	3b01      	subs	r3, #1
 8014668:	443b      	add	r3, r7
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 801466a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801466e:	edd2 7a00 	vldr	s15, [r2]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 8014672:	4a11      	ldr	r2, [pc, #68]	; (80146b8 <tOversampler_init+0xb8>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8014674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014678:	ee17 0a90 	vmov	r0, s15
 801467c:	edc5 7a08 	vstr	s15, [r5, #32]
        os->phaseLength = os->numTaps / os->ratio;
 8014680:	fb90 f4f4 	sdiv	r4, r0, r4
 8014684:	626c      	str	r4, [r5, #36]	; 0x24
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8014686:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 8014688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801468c:	616b      	str	r3, [r5, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801468e:	f002 fcdd 	bl	801704c <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8014692:	6a2b      	ldr	r3, [r5, #32]
 8014694:	9901      	ldr	r1, [sp, #4]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8014696:	61a8      	str	r0, [r5, #24]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8014698:	00d8      	lsls	r0, r3, #3
 801469a:	f002 fcd7 	bl	801704c <mpool_alloc>
 801469e:	61e8      	str	r0, [r5, #28]
}
 80146a0:	b002      	add	sp, #8
 80146a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146a6:	2940      	cmp	r1, #64	; 0x40
 80146a8:	d0c3      	beq.n	8014632 <tOversampler_init+0x32>
 80146aa:	b002      	add	sp, #8
 80146ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146b0:	01000101 	.word	0x01000101
 80146b4:	08028f74 	.word	0x08028f74
 80146b8:	200006fc 	.word	0x200006fc

080146bc <tOversampler_upsample>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_upsample(tOversampler* const osr, float input, float* output)
#else
void tOversampler_upsample(tOversampler* const osr, float input, float* output)
#endif
{
 80146bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tOversampler* os = *osr;
 80146c0:	6807      	ldr	r7, [r0, #0]
    
    if (os->ratio == 1)
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	2b01      	cmp	r3, #1
 80146c6:	d05b      	beq.n	8014780 <tOversampler_upsample+0xc4>
    {
        output[0] = input;
        return;
    }
    
    float *pState = os->upState;                 /* State pointer */
 80146c8:	69be      	ldr	r6, [r7, #24]
    float *pStateCur;
    float *ptr1;                               /* Temporary pointer for state buffer */
    float *ptr2;                               /* Temporary pointer for coefficient buffer */
    float sum0;                                /* Accumulators */
    uint32_t i, tapCnt;                    /* Loop counters */
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 80146ca:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 80146cc:	f8d7 8014 	ldr.w	r8, [r7, #20]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 80146d0:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80146d4:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 80146d8:	68fc      	ldr	r4, [r7, #12]
 80146da:	46a1      	mov	r9, r4
    
    while (i > 0U)
 80146dc:	b3ac      	cbz	r4, 801474a <tOversampler_upsample+0x8e>
    j = 1U;
 80146de:	f04f 0e01 	mov.w	lr, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
 80146e2:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8014788 <tOversampler_upsample+0xcc>
        ptr2 = pCoeffs + (os->ratio - j);
 80146e6:	eba4 030e 	sub.w	r3, r4, lr
 80146ea:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 80146ee:	b325      	cbz	r5, 801473a <tOversampler_upsample+0x7e>
 80146f0:	2c01      	cmp	r4, #1
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 80146f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80146f6:	d135      	bne.n	8014764 <tOversampler_upsample+0xa8>
 80146f8:	462a      	mov	r2, r5
        ptr1 = pState;
 80146fa:	4630      	mov	r0, r6
        sum0 = 0.0f;
 80146fc:	eddf 7a22 	vldr	s15, [pc, #136]	; 8014788 <tOversampler_upsample+0xcc>
            sum0 += *ptr1++ * *ptr2;
 8014700:	edd3 6a00 	vldr	s13, [r3]
        while (tapCnt > 0U)
 8014704:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 8014706:	ecb0 7a01 	vldmia	r0!, {s14}
            ptr2 += os->ratio;
 801470a:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 801470c:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 8014710:	d1f6      	bne.n	8014700 <tOversampler_upsample+0x44>
            /* Decrement loop counter */
            tapCnt--;
        }
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
 8014712:	ee07 4a10 	vmov	s14, r4
    while (i > 0U)
 8014716:	45f1      	cmp	r9, lr
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 8014718:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 801471c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014724:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8014728:	d00f      	beq.n	801474a <tOversampler_upsample+0x8e>
        ptr2 = pCoeffs + (os->ratio - j);
 801472a:	68fc      	ldr	r4, [r7, #12]
 801472c:	469e      	mov	lr, r3
 801472e:	eba4 030e 	sub.w	r3, r4, lr
 8014732:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 8014736:	2d00      	cmp	r5, #0
 8014738:	d1da      	bne.n	80146f0 <tOversampler_upsample+0x34>
 801473a:	eef0 7a46 	vmov.f32	s15, s12
    while (i > 0U)
 801473e:	45f1      	cmp	r9, lr
        j++;
 8014740:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 8014744:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8014748:	d1ef      	bne.n	801472a <tOversampler_upsample+0x6e>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 801474a:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
 801474c:	f106 0604 	add.w	r6, r6, #4
    pStateCur = os->upState;
 8014750:	69ba      	ldr	r2, [r7, #24]
    while (tapCnt > 0U)
 8014752:	d005      	beq.n	8014760 <tOversampler_upsample+0xa4>
    {
        *pStateCur++ = *pState++;
 8014754:	f856 1b04 	ldr.w	r1, [r6], #4
    while (tapCnt > 0U)
 8014758:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 801475a:	f842 1b04 	str.w	r1, [r2], #4
    while (tapCnt > 0U)
 801475e:	d1f9      	bne.n	8014754 <tOversampler_upsample+0x98>
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
 8014760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sum0 = 0.0f;
 8014764:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014788 <tOversampler_upsample+0xcc>
            ptr2 += os->ratio;
 8014768:	462a      	mov	r2, r5
        ptr1 = pState;
 801476a:	4630      	mov	r0, r6
            sum0 += *ptr1++ * *ptr2;
 801476c:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 8014770:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 8014772:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 8014776:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 8014778:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 801477c:	d1f6      	bne.n	801476c <tOversampler_upsample+0xb0>
 801477e:	e7c8      	b.n	8014712 <tOversampler_upsample+0x56>
        output[0] = input;
 8014780:	ed81 0a00 	vstr	s0, [r1]
}
 8014784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014788:	00000000 	.word	0x00000000

0801478c <tOversampler_downsample>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_downsample(tOversampler *const osr, float* input)
#else
float tOversampler_downsample(tOversampler *const osr, float* input)
#endif
{
 801478c:	b470      	push	{r4, r5, r6}
    _tOversampler* os = *osr;
 801478e:	6806      	ldr	r6, [r0, #0]
    
    if (os->ratio == 1) return input[0];
 8014790:	68f3      	ldr	r3, [r6, #12]
 8014792:	2b01      	cmp	r3, #1
 8014794:	d029      	beq.n	80147ea <tOversampler_downsample+0x5e>
    float *pStateCur;                          /* Points to the current sample of the state */
    float *px0;                                /* Temporary pointer for state buffer */
    float *pb;                                 /* Temporary pointer for coefficient buffer */
    float x0, c0;                              /* Temporary variables to hold state and coefficient values */
    float acc0;                                /* Accumulator */
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
 8014796:	6a32      	ldr	r2, [r6, #32]
    uint32_t i, tapCnt;
    float output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 8014798:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 801479c:	69f4      	ldr	r4, [r6, #28]
    pStateCur = os->downState + (numTaps - 1U);
 801479e:	4410      	add	r0, r2
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 80147a0:	6975      	ldr	r5, [r6, #20]
    pStateCur = os->downState + (numTaps - 1U);
 80147a2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
    
    do
    {
        *pStateCur++ = *input++;
 80147a6:	f851 cb04 	ldr.w	ip, [r1], #4
        
    } while (--i);
 80147aa:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 80147ac:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
 80147b0:	d1f9      	bne.n	80147a6 <tOversampler_downsample+0x1a>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 80147b2:	b1f2      	cbz	r2, 80147f2 <tOversampler_downsample+0x66>
 80147b4:	4613      	mov	r3, r2
    acc0 = 0.0f;
 80147b6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8014804 <tOversampler_downsample+0x78>
    px0 = pState;
 80147ba:	4621      	mov	r1, r4
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 80147bc:	ecb5 7a01 	vldmia	r5!, {s14}
    while (tapCnt > 0U)
 80147c0:	3b01      	subs	r3, #1
        acc0 += x0 * c0;
 80147c2:	ecf1 7a01 	vldmia	r1!, {s15}
 80147c6:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 80147ca:	d1f7      	bne.n	80147bc <tOversampler_downsample+0x30>
        tapCnt--;
    }
    
    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + os->ratio;
 80147cc:	68f1      	ldr	r1, [r6, #12]
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 80147ce:	1e53      	subs	r3, r2, #1
    pStateCur = os->downState;
 80147d0:	69f0      	ldr	r0, [r6, #28]
    pState = pState + os->ratio;
 80147d2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 80147d6:	d006      	beq.n	80147e6 <tOversampler_downsample+0x5a>
 80147d8:	4602      	mov	r2, r0
    {
        *pStateCur++ = *pState++;
 80147da:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 80147de:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 80147e0:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 80147e4:	d1f9      	bne.n	80147da <tOversampler_downsample+0x4e>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 80147e6:	bc70      	pop	{r4, r5, r6}
 80147e8:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
 80147ea:	ed91 0a00 	vldr	s0, [r1]
}
 80147ee:	bc70      	pop	{r4, r5, r6}
 80147f0:	4770      	bx	lr
    pState = pState + os->ratio;
 80147f2:	68f1      	ldr	r1, [r6, #12]
    tapCnt = (numTaps - 1U);
 80147f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pStateCur = os->downState;
 80147f8:	69f0      	ldr	r0, [r6, #28]
    acc0 = 0.0f;
 80147fa:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8014804 <tOversampler_downsample+0x78>
    pState = pState + os->ratio;
 80147fe:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 8014802:	e7e9      	b.n	80147d8 <tOversampler_downsample+0x4c>
 8014804:	00000000 	.word	0x00000000

08014808 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
 8014808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
 801480a:	698f      	ldr	r7, [r1, #24]
{
 801480c:	4606      	mov	r6, r0
 801480e:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8014810:	2020      	movs	r0, #32
 8014812:	4639      	mov	r1, r7
 8014814:	f002 fc1a 	bl	801704c <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
 8014818:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
 801481c:	4a10      	ldr	r2, [pc, #64]	; (8014860 <tCrusher_init+0x58>)
    c->op = 4;
 801481e:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8014820:	6030      	str	r0, [r6, #0]
 8014822:	4604      	mov	r4, r0
    c->op = 4;
 8014824:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
 8014826:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 8014828:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
 801482a:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
 801482c:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801482e:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8014830:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8014832:	4629      	mov	r1, r5
 8014834:	f002 fc0a 	bl	801704c <mpool_alloc>
    s->invRatio = 1.0f;
 8014838:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 801483c:	2200      	movs	r2, #0
    s->count = 0;
 801483e:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8014840:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 8014842:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8014864 <tCrusher_init+0x5c>
    s->mempool = m;
 8014846:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 8014848:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 801484a:	6082      	str	r2, [r0, #8]
    s->count = 0;
 801484c:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 801484e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014868 <tCrusher_init+0x60>
 8014852:	edd4 6a03 	vldr	s13, [r4, #12]
 8014856:	eee6 7a87 	vfma.f32	s15, s13, s14
 801485a:	edc4 7a06 	vstr	s15, [r4, #24]
}
 801485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014860:	3951b717 	.word	0x3951b717
 8014864:	3912ccf6 	.word	0x3912ccf6
 8014868:	3e99999a 	.word	0x3e99999a

0801486c <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 801486c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80148e8 <tCrusher_tick+0x7c>
 8014870:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8014874:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 8014876:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 801487a:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
 801487c:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 8014880:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 8014884:	6960      	ldr	r0, [r4, #20]
 8014886:	05c0      	lsls	r0, r0, #23
 8014888:	ee20 0a27 	vmul.f32	s0, s0, s15
 801488c:	f002 fa00 	bl	8016c90 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 8014890:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 8014894:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 8014898:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801489c:	f002 f9fe 	bl	8016c9c <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 80148a0:	edd4 0a04 	vldr	s1, [r4, #16]
 80148a4:	f002 f9e2 	bl	8016c6c <LEAF_round>
    _tSampleReducer* s = *sr;
 80148a8:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 80148aa:	68da      	ldr	r2, [r3, #12]
 80148ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80148b0:	ee07 2a10 	vmov	s14, r2
 80148b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80148b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148c0:	dc08      	bgt.n	80148d4 <tCrusher_tick+0x68>
    s->count++;
 80148c2:	3201      	adds	r2, #1
    return s->hold;
 80148c4:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 80148c8:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 80148ca:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 80148ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 80148d2:	bd10      	pop	{r4, pc}
        s->hold = input;
 80148d4:	2201      	movs	r2, #1
 80148d6:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 80148da:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 80148dc:	edd4 7a06 	vldr	s15, [r4, #24]
}
 80148e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80148e4:	bd10      	pop	{r4, pc}
 80148e6:	bf00      	nop
 80148e8:	459c4000 	.word	0x459c4000

080148ec <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 80148ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->rnd = rnd;
}

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
 80148f0:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 80148f2:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 80148f6:	eeb4 0a67 	vcmp.f32	s0, s15
 80148fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148fe:	d809      	bhi.n	8014914 <tCrusher_setSamplingRatio+0x28>
 8014900:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014908:	db04      	blt.n	8014914 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 801490a:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 801490e:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 8014910:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 8014914:	4770      	bx	lr
 8014916:	bf00      	nop

08014918 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float tCompressor_tick(tCompressor* const comp, float in)
{
 8014918:	b510      	push	{r4, lr}
 801491a:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
 801491e:	6804      	ldr	r4, [r0, #0]
{
 8014920:	eeb0 8a40 	vmov.f32	s16, s0
    
    float slope, overshoot;
    
    float in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 8014924:	f002 f920 	bl	8016b68 <fastabsf>
 8014928:	f002 fb22 	bl	8016f70 <fasteratodb>
 801492c:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 80149dc <tCompressor_tick+0xc4>
 8014930:	eef0 0a40 	vmov.f32	s1, s0
 8014934:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80149e0 <tCompressor_tick+0xc8>
 8014938:	f002 f9b0 	bl	8016c9c <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
 801493c:	edd4 7a03 	vldr	s15, [r4, #12]
    

    if (overshoot <= -(c->W))
 8014940:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
 8014944:	ee70 7a67 	vsub.f32	s15, s0, s15
    c->y_T[1] = c->y_T[0];
 8014948:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
 801494c:	eeb1 7a46 	vneg.f32	s14, s12
    c->y_T[1] = c->y_T[0];
 8014950:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
 8014954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801495c:	da16      	bge.n	801498c <tCompressor_tick+0x74>
    {
        out_db = in_db;
        c->isActive = 0;
    }
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 801495e:	eeb4 6ae7 	vcmpe.f32	s12, s15
    slope = 1.0f - c->invR; // feed-forward topology;
 8014962:	edd4 5a07 	vldr	s11, [r4, #28]
 8014966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 801496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
 801496e:	ee37 7a65 	vsub.f32	s14, s14, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8014972:	dd2f      	ble.n	80149d4 <tCompressor_tick+0xbc>
    {
        float squareit = (overshoot + c->W);
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 8014974:	edd4 5a08 	vldr	s11, [r4, #32]
        float squareit = (overshoot + c->W);
 8014978:	ee36 6a27 	vadd.f32	s12, s12, s15
    {
 801497c:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 801497e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8014982:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014986:	ee27 7a06 	vmul.f32	s14, s14, s12
    {
 801498a:	e002      	b.n	8014992 <tCompressor_tick+0x7a>
 801498c:	2300      	movs	r3, #0
 801498e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80149dc <tCompressor_tick+0xc4>
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
 8014992:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 8014996:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 801499a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        c->isActive = 0;
 801499e:	6463      	str	r3, [r4, #68]	; 0x44
    c->x_T[0] = out_db - in_db;
 80149a0:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 80149a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 80149a8:	bf4c      	ite	mi
 80149aa:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 80149ae:	ed94 6a02 	vldrpl	s12, [r4, #8]
 80149b2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80149b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149ba:	eee6 7a86 	vfma.f32	s15, s13, s12
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 80149be:	ee30 0a67 	vsub.f32	s0, s0, s15
 80149c2:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80149c6:	f002 fb09 	bl	8016fdc <fasterdbtoa>
    return attenuation * in;
}
 80149ca:	ee28 0a00 	vmul.f32	s0, s16, s0
 80149ce:	ecbd 8b02 	vpop	{d8}
 80149d2:	bd10      	pop	{r4, pc}
        out_db = in_db + slope * overshoot;
 80149d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80149d8:	2301      	movs	r3, #1
 80149da:	e7da      	b.n	8014992 <tCompressor_tick+0x7a>
 80149dc:	00000000 	.word	0x00000000
 80149e0:	c2b40000 	.word	0xc2b40000

080149e4 <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, tMempool* const mp)
{
 80149e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 80149e6:	6817      	ldr	r7, [r2, #0]
{
 80149e8:	4614      	mov	r4, r2
 80149ea:	4606      	mov	r6, r0
 80149ec:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80149ee:	2018      	movs	r0, #24
 80149f0:	4639      	mov	r1, r7
{
 80149f2:	ed2d 8b02 	vpush	{d8}
 80149f6:	eef0 8a40 	vmov.f32	s17, s0
 80149fa:	b083      	sub	sp, #12
 80149fc:	eeb0 8a41 	vmov.f32	s16, s2
 8014a00:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8014a04:	f002 fb22 	bl	801704c <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8014a08:	4621      	mov	r1, r4
    p->curr=0.0f;
 8014a0a:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8014a10:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014a14:	3014      	adds	r0, #20
    p->mempool = m;
 8014a16:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 8014a1a:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 8014a1e:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8014a20:	f7ff fbac 	bl	801417c <tPowerFollower_initToPool>
    p->mode=mode;
 8014a24:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 8014a26:	ed84 8a02 	vstr	s16, [r4, #8]
}
 8014a2a:	b003      	add	sp, #12
 8014a2c:	ecbd 8b02 	vpop	{d8}
 8014a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a32:	bf00      	nop

08014a34 <tFeedbackLeveler_setStrength>:
}

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, float strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 8014a34:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 8014a36:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014a3a:	4770      	bx	lr

08014a3c <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, float factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 8014a3c:	6800      	ldr	r0, [r0, #0]
 8014a3e:	3014      	adds	r0, #20
 8014a40:	f7ff bbb6 	b.w	80141b0 <tPowerFollower_setFactor>

08014a44 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 8014a44:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 8014a46:	60d9      	str	r1, [r3, #12]
}
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop

08014a4c <tFeedbackLeveler_tick>:

float   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, float input)
{
 8014a4c:	b510      	push	{r4, lr}
 8014a4e:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
 8014a52:	6804      	ldr	r4, [r0, #0]
{
 8014a54:	eeb0 8a40 	vmov.f32	s16, s0
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 8014a58:	f104 0014 	add.w	r0, r4, #20
 8014a5c:	f7ff fbba 	bl	80141d4 <tPowerFollower_tick>
 8014a60:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8014a64:	68e3      	ldr	r3, [r4, #12]
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 8014a66:	ee30 7a67 	vsub.f32	s14, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8014a6a:	b91b      	cbnz	r3, 8014a74 <tFeedbackLeveler_tick+0x28>
 8014a6c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014a90 <tFeedbackLeveler_tick+0x44>
 8014a70:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
 8014a74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a78:	edd4 6a02 	vldr	s13, [r4, #8]
 8014a7c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8014a80:	ee27 0a88 	vmul.f32	s0, s15, s16
 8014a84:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 8014a88:	ecbd 8b02 	vpop	{d8}
 8014a8c:	bd10      	pop	{r4, pc}
 8014a8e:	bf00      	nop
 8014a90:	00000000 	.word	0x00000000

08014a94 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, float TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 8014a94:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 8014a96:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014a9a:	4770      	bx	lr

08014a9c <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
 8014a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a9e:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014aa2:	699e      	ldr	r6, [r3, #24]
{
 8014aa4:	4614      	mov	r4, r2
 8014aa6:	4607      	mov	r7, r0
 8014aa8:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8014aaa:	2068      	movs	r0, #104	; 0x68
 8014aac:	4631      	mov	r1, r6
{
 8014aae:	eef0 9a40 	vmov.f32	s19, s0
 8014ab2:	eeb0 9a60 	vmov.f32	s18, s1
 8014ab6:	eef0 8a61 	vmov.f32	s17, s3
 8014aba:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8014abe:	f002 fac5 	bl	801704c <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8014ac2:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8014ac6:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8014ac8:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 8014aca:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8014acc:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8014ad0:	eddf 7a22 	vldr	s15, [pc, #136]	; 8014b5c <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 8014ad4:	6873      	ldr	r3, [r6, #4]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
 8014ad6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8014ada:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8014adc:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8014ae0:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->exp_buff = expBuffer;
 8014ae4:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 8014ae6:	6084      	str	r4, [r0, #8]
    adsr->sustain = sustain;
 8014ae8:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
 8014aec:	ed93 5a00 	vldr	s10, [r3]
    adsr->whichStage = env_idle;
 8014af0:	2200      	movs	r2, #0
 8014af2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8014b60 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8014af6:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->sampleRate = leaf->sampleRate;
 8014afa:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8014afe:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
 8014b02:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
 8014b06:	fec8 1a87 	vmaxnm.f32	s3, s17, s14

    adsr->baseLeakFactor = 1.0f;
 8014b0a:	ed80 6a17 	vstr	s12, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
 8014b0e:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->sustain = sustain;
 8014b12:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
 8014b16:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
 8014b1a:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
 8014b1c:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->decay = decay;
 8014b20:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->sustain = sustain;
 8014b24:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->release = release;
 8014b28:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8014b2c:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8014b30:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8014b34:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8014b38:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8014b3c:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8014b40:	ed80 5a0a 	vstr	s10, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8014b44:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8014b48:	edc0 5a0b 	vstr	s11, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8014b4c:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
    adsr->invSampleRate = leaf->invSampleRate;
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	6643      	str	r3, [r0, #100]	; 0x64
}
 8014b54:	ecbd 8b04 	vpop	{d8-d9}
 8014b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	4479ffff 	.word	0x4479ffff
 8014b60:	00000000 	.word	0x00000000

08014b64 <tADSRT_setAttack>:

void     tADSRT_setAttack(tADSRT* const adsrenv, float attack)
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
 8014b64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8014b68:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8014b6a:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
 8014b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
 8014b72:	bf48      	it	mi
 8014b74:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8014b88 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8014b78:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
 8014b7c:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8014b80:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8014b84:	4770      	bx	lr
 8014b86:	bf00      	nop
 8014b88:	3c23d70a 	.word	0x3c23d70a

08014b8c <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
 8014b8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8014b90:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8014b92:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
 8014b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
 8014b9a:	bf48      	it	mi
 8014b9c:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8014bb0 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8014ba0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
 8014ba4:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8014ba8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8014bac:	4770      	bx	lr
 8014bae:	bf00      	nop
 8014bb0:	3c23d70a 	.word	0x3c23d70a

08014bb4 <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8014bb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014bb8:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8014bcc <tADSRT_setSustain+0x18>
    _tADSRT* adsr = *adsrenv;
 8014bbc:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8014bbe:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 8014bc2:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8014bc6:	ed83 0a0f 	vstr	s0, [r3, #60]	; 0x3c
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
    else                     adsr->sustain = sustain;
}
 8014bca:	4770      	bx	lr
 8014bcc:	00000000 	.word	0x00000000

08014bd0 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, float release)
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
 8014bd0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8014bd4:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8014bd6:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
 8014bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
 8014bde:	bf48      	it	mi
 8014be0:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8014bf4 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8014be4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
 8014be8:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8014bec:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8014bf0:	4770      	bx	lr
 8014bf2:	bf00      	nop
 8014bf4:	3c23d70a 	.word	0x3c23d70a

08014bf8 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
 8014bf8:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 8014bfa:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8014bfc:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014c18 <tADSRT_setLeakFactor+0x20>
 8014c00:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
 8014c04:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8014c08:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014c0c:	f008 fc5c 	bl	801d4c8 <powf>
 8014c10:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 8014c14:	bd10      	pop	{r4, pc}
 8014c16:	bf00      	nop
 8014c18:	472c4400 	.word	0x472c4400

08014c1c <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
 8014c1c:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 8014c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014c20:	b162      	cbz	r2, 8014c3c <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 8014c22:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 8014c24:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 8014c26:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 8014c28:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
 8014c2a:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 8014c30:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
 8014c34:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
 8014c36:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
 8014c38:	655a      	str	r2, [r3, #84]	; 0x54
}
 8014c3a:	4770      	bx	lr
        adsr->whichStage = env_attack;
 8014c3c:	2101      	movs	r1, #1
 8014c3e:	e7f5      	b.n	8014c2c <tADSRT_on+0x10>

08014c40 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 8014c40:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 8014c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014c44:	b11a      	cbz	r2, 8014c4e <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 8014c46:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 8014c48:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 8014c4a:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
 8014c4c:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 8014c4e:	4770      	bx	lr

08014c50 <tADSRT_tick>:

float   tADSRT_tick(tADSRT* const adsrenv)
{
 8014c50:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 8014c52:	6804      	ldr	r4, [r0, #0]
{
 8014c54:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 8014c58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014c5a:	3b01      	subs	r3, #1
 8014c5c:	2b04      	cmp	r3, #4
 8014c5e:	f200 8148 	bhi.w	8014ef2 <tADSRT_tick+0x2a2>
 8014c62:	e8df f003 	tbb	[pc, r3]
 8014c66:	441f      	.short	0x441f
 8014c68:	6339      	.short	0x6339
 8014c6a:	03          	.byte	0x03
 8014c6b:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8014c6c:	edd4 7a03 	vldr	s15, [r4, #12]
 8014c70:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 8014c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014c78:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8014c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c80:	dd71      	ble.n	8014d66 <tADSRT_tick+0x116>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 8014c82:	eddf 7a9d 	vldr	s15, [pc, #628]	; 8014ef8 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_attack;
 8014c86:	2301      	movs	r3, #1
 8014c88:	eeb0 0a67 	vmov.f32	s0, s15
 8014c8c:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 8014c8e:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 8014c92:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8014c96:	ee77 7a81 	vadd.f32	s15, s15, s2
 8014c9a:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 8014c9e:	ecbd 8b02 	vpop	{d8}
 8014ca2:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8014ca4:	edd4 7a03 	vldr	s15, [r4, #12]
 8014ca8:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 8014cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014cb0:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8014cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cb8:	dd7f      	ble.n	8014dba <tADSRT_tick+0x16a>
                adsr->whichStage = env_decay;
 8014cba:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 8014cbc:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_decay;
 8014cc0:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain;
 8014cc2:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 8014cc6:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8014cca:	ee77 7a81 	vadd.f32	s15, s15, s2
 8014cce:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c
}
 8014cd2:	ecbd 8b02 	vpop	{d8}
 8014cd6:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
 8014cd8:	ed94 0a06 	vldr	s0, [r4, #24]
 8014cdc:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8014ce0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014ce4:	ed84 0a06 	vstr	s0, [r4, #24]
}
 8014ce8:	ecbd 8b02 	vpop	{d8}
 8014cec:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8014cee:	edd4 7a03 	vldr	s15, [r4, #12]
 8014cf2:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 8014cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014cfa:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8014cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d02:	f340 8088 	ble.w	8014e16 <tADSRT_tick+0x1c6>
                adsr->next = adsr->gain * adsr->sustain;
 8014d06:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8014d0a:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
 8014d0c:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 8014d10:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 8014d12:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d16:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 8014d1a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014d1e:	ee77 7a81 	vadd.f32	s15, s15, s2
 8014d22:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
 8014d26:	ecbd 8b02 	vpop	{d8}
 8014d2a:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8014d2c:	edd4 7a03 	vldr	s15, [r4, #12]
 8014d30:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 8014d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d38:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8014d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d40:	f340 809e 	ble.w	8014e80 <tADSRT_tick+0x230>
                adsr->next = 0.0f;
 8014d44:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8014ef8 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_idle;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8014d4e:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 8014d50:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 8014d54:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8014d58:	ee77 7a81 	vadd.f32	s15, s15, s2
 8014d5c:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 8014d60:	ecbd 8b02 	vpop	{d8}
 8014d64:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 8014d6a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014d6e:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
 8014d72:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014d76:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
 8014d7a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d82:	f100 80b2 	bmi.w	8014eea <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8014d86:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8014d8a:	6862      	ldr	r2, [r4, #4]
 8014d8c:	ee17 3a90 	vmov	r3, s15
 8014d90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014d94:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 8014d98:	ee16 3a90 	vmov	r3, s13
 8014d9c:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 8014da0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014da4:	ed92 0a00 	vldr	s0, [r2]
 8014da8:	f002 f884 	bl	8016eb4 <LEAF_interpolation_linear>
 8014dac:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
 8014db0:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 8014db4:	ed84 0a06 	vstr	s0, [r4, #24]
 8014db8:	e76b      	b.n	8014c92 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 8014dbe:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014dc2:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
 8014dc6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014dca:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
 8014dce:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dd6:	f100 8084 	bmi.w	8014ee2 <tADSRT_tick+0x292>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 8014dda:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8014dde:	6862      	ldr	r2, [r4, #4]
 8014de0:	ee17 3a90 	vmov	r3, s15
 8014de4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014de8:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 8014dec:	ee16 3a90 	vmov	r3, s13
 8014df0:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 8014df4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014df8:	ed92 0a00 	vldr	s0, [r2]
 8014dfc:	f002 f85a 	bl	8016eb4 <LEAF_interpolation_linear>
 8014e00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
 8014e04:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 8014e08:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014e0c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014e10:	ed84 0a06 	vstr	s0, [r4, #24]
 8014e14:	e757      	b.n	8014cc6 <tADSRT_tick+0x76>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014e16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 8014e1a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014e1e:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
 8014e22:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014e26:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
 8014e2a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e32:	d452      	bmi.n	8014eda <tADSRT_tick+0x28a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 8014e34:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8014e38:	6862      	ldr	r2, [r4, #4]
 8014e3a:	ee17 3a90 	vmov	r3, s15
 8014e3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014e42:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
 8014e46:	ee16 3a90 	vmov	r3, s13
 8014e4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014e4e:	ed92 0a00 	vldr	s0, [r2]
 8014e52:	f002 f82f 	bl	8016eb4 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 8014e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014e5a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014e5e:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8014e62:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014e66:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
            adsr->decayPhase += adsr->decayInc;
 8014e6a:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 8014e6e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014e72:	eea6 7a80 	vfma.f32	s14, s13, s0
 8014e76:	ee27 0a87 	vmul.f32	s0, s15, s14
 8014e7a:	ed84 0a06 	vstr	s0, [r4, #24]
 8014e7e:	e74c      	b.n	8014d1a <tADSRT_tick+0xca>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8014e80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 8014e84:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8014e88:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
 8014e8c:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8014e90:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
 8014e94:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8014e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e9c:	d419      	bmi.n	8014ed2 <tADSRT_tick+0x282>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 8014e9e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8014ea2:	6862      	ldr	r2, [r4, #4]
 8014ea4:	ee17 3a90 	vmov	r3, s15
 8014ea8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014eac:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 8014eb0:	ee16 3a90 	vmov	r3, s13
 8014eb4:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 8014eb8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014ebc:	ed92 0a00 	vldr	s0, [r2]
 8014ec0:	f001 fff8 	bl	8016eb4 <LEAF_interpolation_linear>
 8014ec4:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
 8014ec8:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 8014ecc:	ed84 0a06 	vstr	s0, [r4, #24]
 8014ed0:	e740      	b.n	8014d54 <tADSRT_tick+0x104>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8014ed2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8014ed4:	eddf 0a08 	vldr	s1, [pc, #32]	; 8014ef8 <tADSRT_tick+0x2a8>
 8014ed8:	e7ea      	b.n	8014eb0 <tADSRT_tick+0x260>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8014eda:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8014edc:	eddf 0a06 	vldr	s1, [pc, #24]	; 8014ef8 <tADSRT_tick+0x2a8>
 8014ee0:	e7b1      	b.n	8014e46 <tADSRT_tick+0x1f6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8014ee2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8014ee4:	eddf 0a04 	vldr	s1, [pc, #16]	; 8014ef8 <tADSRT_tick+0x2a8>
 8014ee8:	e780      	b.n	8014dec <tADSRT_tick+0x19c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8014eea:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8014eec:	eddf 0a02 	vldr	s1, [pc, #8]	; 8014ef8 <tADSRT_tick+0x2a8>
 8014ef0:	e752      	b.n	8014d98 <tADSRT_tick+0x148>
            adsr->next = adsr->next * adsr->leakFactor;
 8014ef2:	ed94 0a06 	vldr	s0, [r4, #24]
 8014ef6:	e6d2      	b.n	8014c9e <tADSRT_tick+0x4e>
 8014ef8:	00000000 	.word	0x00000000

08014efc <tADSRT_tickNoInterp>:

float   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 8014efc:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 8014efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014f00:	3a01      	subs	r2, #1
 8014f02:	2a04      	cmp	r2, #4
 8014f04:	f200 80ba 	bhi.w	801507c <tADSRT_tickNoInterp+0x180>
 8014f08:	e8df f002 	tbb	[pc, r2]
 8014f0c:	58333c1b 	.word	0x58333c1b
 8014f10:	03          	.byte	0x03
 8014f11:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8014f12:	edd3 7a03 	vldr	s15, [r3, #12]
 8014f16:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8014f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f26:	dd61      	ble.n	8014fec <tADSRT_tickNoInterp+0xf0>
            {
                adsr->whichStage = env_attack;
 8014f28:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 8014f2a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8015084 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_attack;
 8014f2e:	639a      	str	r2, [r3, #56]	; 0x38
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 8014f30:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8014f34:	ed83 0a06 	vstr	s0, [r3, #24]
 8014f38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f3c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 8014f40:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8014f42:	edd3 7a03 	vldr	s15, [r3, #12]
 8014f46:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8014f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f56:	dd57      	ble.n	8015008 <tADSRT_tickNoInterp+0x10c>
            {
                adsr->whichStage = env_decay;
 8014f58:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 8014f5a:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_decay;
 8014f5e:	639a      	str	r2, [r3, #56]	; 0x38
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 8014f60:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014f64:	ed83 0a06 	vstr	s0, [r3, #24]
 8014f68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f6c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
 8014f70:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
 8014f72:	ed93 0a06 	vldr	s0, [r3, #24]
 8014f76:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8014f7a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014f7e:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 8014f82:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8014f84:	edd3 7a03 	vldr	s15, [r3, #12]
 8014f88:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8014f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f98:	dd48      	ble.n	801502c <tADSRT_tickNoInterp+0x130>
                adsr->next = adsr->gain * adsr->sustain;
 8014f9a:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8014f9e:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
 8014fa0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 8014fa4:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 8014fa6:	ee20 0a27 	vmul.f32	s0, s0, s15
            adsr->decayPhase += adsr->decayInc;
 8014faa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8014fae:	ed83 0a06 	vstr	s0, [r3, #24]
 8014fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014fb6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 8014fba:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8014fbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8014fc0:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8014fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd0:	dd46      	ble.n	8015060 <tADSRT_tickNoInterp+0x164>
            {
                adsr->whichStage = env_idle;
 8014fd2:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 8014fd4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8015084 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_idle;
 8014fd8:	639a      	str	r2, [r3, #56]	; 0x38
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 8014fda:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8014fde:	ed83 0a06 	vstr	s0, [r3, #24]
 8014fe2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014fe6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    }
    return adsr->next;
}
 8014fea:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 8014fec:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8014ff0:	685a      	ldr	r2, [r3, #4]
 8014ff2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8014ff6:	ee16 1a90 	vmov	r1, s13
 8014ffa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014ffe:	ed92 0a00 	vldr	s0, [r2]
 8015002:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015006:	e793      	b.n	8014f30 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 8015008:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 801500c:	685a      	ldr	r2, [r3, #4]
 801500e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015012:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8015016:	ee16 1a90 	vmov	r1, s13
 801501a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801501e:	edd2 6a00 	vldr	s13, [r2]
 8015022:	ee30 0a66 	vsub.f32	s0, s0, s13
 8015026:	ee20 0a27 	vmul.f32	s0, s0, s15
 801502a:	e799      	b.n	8014f60 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 801502c:	eefc 5ac7 	vcvt.u32.f32	s11, s14
 8015030:	685a      	ldr	r2, [r3, #4]
 8015032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015036:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 801503a:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 801503e:	ee15 1a90 	vmov	r1, s11
 8015042:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
 8015046:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801504a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801504e:	ee20 0a06 	vmul.f32	s0, s0, s12
 8015052:	ed92 6a00 	vldr	s12, [r2]
 8015056:	eee6 7a26 	vfma.f32	s15, s12, s13
 801505a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801505e:	e7a4      	b.n	8014faa <tADSRT_tickNoInterp+0xae>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 8015060:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8015064:	685a      	ldr	r2, [r3, #4]
 8015066:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 801506a:	ee16 1a90 	vmov	r1, s13
 801506e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015072:	ed92 0a00 	vldr	s0, [r2]
 8015076:	ee20 0a27 	vmul.f32	s0, s0, s15
 801507a:	e7ae      	b.n	8014fda <tADSRT_tickNoInterp+0xde>
            adsr->next = adsr->next * adsr->leakFactor;
 801507c:	ed93 0a06 	vldr	s0, [r3, #24]
 8015080:	4770      	bx	lr
 8015082:	bf00      	nop
 8015084:	00000000 	.word	0x00000000

08015088 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8015088:	b538      	push	{r3, r4, r5, lr}
 801508a:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 801508e:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8015090:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8015092:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8015094:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8015098:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 801509a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 801509e:	f001 ffd5 	bl	801704c <mpool_alloc>
 80150a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80150a6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80150dc <tExpSmooth_init+0x54>
 80150aa:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
 80150ac:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
 80150b0:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 80150b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 80150b8:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 80150ba:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 80150be:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 80150c2:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 80150c6:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 80150ca:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 80150ce:	6863      	ldr	r3, [r4, #4]
 80150d0:	685b      	ldr	r3, [r3, #4]
 80150d2:	6183      	str	r3, [r0, #24]
}
 80150d4:	ecbd 8b02 	vpop	{d8}
 80150d8:	bd38      	pop	{r3, r4, r5, pc}
 80150da:	bf00      	nop
 80150dc:	00000000 	.word	0x00000000

080150e0 <tExpSmooth_initToPool>:
{
 80150e0:	b538      	push	{r3, r4, r5, lr}
 80150e2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80150e6:	680c      	ldr	r4, [r1, #0]
{
 80150e8:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80150ea:	201c      	movs	r0, #28
{
 80150ec:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80150f0:	4621      	mov	r1, r4
{
 80150f2:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80150f6:	f001 ffa9 	bl	801704c <mpool_alloc>
 80150fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80150fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8015134 <tExpSmooth_initToPool+0x54>
 8015102:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
 8015104:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
 8015108:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
 801510c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8015110:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 8015112:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 8015116:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 801511a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 801511e:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 8015122:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 8015126:	6863      	ldr	r3, [r4, #4]
 8015128:	685b      	ldr	r3, [r3, #4]
 801512a:	6183      	str	r3, [r0, #24]
}
 801512c:	ecbd 8b02 	vpop	{d8}
 8015130:	bd38      	pop	{r3, r4, r5, pc}
 8015132:	bf00      	nop
 8015134:	00000000 	.word	0x00000000

08015138 <tExpSmooth_setDest>:
    smooth->oneminusfactor = 1.0f - factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 8015138:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 801513a:	ed83 0a05 	vstr	s0, [r3, #20]
}
 801513e:	4770      	bx	lr

08015140 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8015140:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 8015142:	edd3 6a04 	vldr	s13, [r3, #16]
 8015146:	ed93 0a03 	vldr	s0, [r3, #12]
 801514a:	ed93 7a02 	vldr	s14, [r3, #8]
 801514e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015152:	edd3 7a05 	vldr	s15, [r3, #20]
 8015156:	eea7 0a27 	vfma.f32	s0, s14, s15
 801515a:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 801515e:	4770      	bx	lr

08015160 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 8015160:	b538      	push	{r3, r4, r5, lr}
 8015162:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 8015166:	698d      	ldr	r5, [r1, #24]
{
 8015168:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 801516a:	201c      	movs	r0, #28
{
 801516c:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8015170:	4629      	mov	r1, r5
{
 8015172:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8015176:	f001 ff69 	bl	801704c <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 801517a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 801517e:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8015180:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8015182:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8015184:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8015188:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 801518c:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8015190:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8015192:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8015194:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8015196:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8015198:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 801519c:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 80151a0:	ed80 7a05 	vstr	s14, [r0, #20]
}
 80151a4:	ecbd 8b02 	vpop	{d8}
 80151a8:	bd38      	pop	{r3, r4, r5, pc}
 80151aa:	bf00      	nop

080151ac <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, float freq, tMempool* const mp)
{
 80151ac:	b538      	push	{r3, r4, r5, lr}
 80151ae:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80151b2:	680d      	ldr	r5, [r1, #0]
{
 80151b4:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
 80151b6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 80151ba:	2028      	movs	r0, #40	; 0x28
 80151bc:	4629      	mov	r1, r5
{
 80151be:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 80151c2:	f001 ff43 	bl	801704c <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
 80151c6:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8015210 <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 80151ca:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80151cc:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
 80151d0:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 80151d2:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
 80151d4:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
 80151d8:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
 80151dc:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
 80151e0:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80151e4:	68db      	ldr	r3, [r3, #12]
 80151e6:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
 80151e8:	6824      	ldr	r4, [r4, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 80151ea:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 80151ee:	ed84 8a01 	vstr	s16, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 80151f2:	ee68 0a27 	vmul.f32	s1, s16, s15
 80151f6:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80151fa:	f001 fd4f 	bl	8016c9c <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 80151fe:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8015202:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 8015206:	edc4 8a04 	vstr	s17, [r4, #16]
}
 801520a:	ecbd 8b02 	vpop	{d8}
 801520e:	bd38      	pop	{r3, r4, r5, pc}
 8015210:	00000000 	.word	0x00000000

08015214 <tOnePole_setFreq>:
{
 8015214:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 8015216:	6804      	ldr	r4, [r0, #0]
{
 8015218:	eef0 0a40 	vmov.f32	s1, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 801521c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8015220:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801524c <tOnePole_setFreq+0x38>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8015224:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 8015228:	edc4 0a01 	vstr	s1, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 801522c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015230:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8015234:	f001 fd32 	bl	8016c9c <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 8015238:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 801523c:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 8015240:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015244:	edc4 7a04 	vstr	s15, [r4, #16]
}
 8015248:	bd10      	pop	{r4, pc}
 801524a:	bf00      	nop
 801524c:	00000000 	.word	0x00000000

08015250 <tOnePole_tick>:
    f->gain = gain;
}

float   tOnePole_tick(tOnePole* const ft, float input)
{
    _tOnePole* f = *ft;
 8015250:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8015252:	ed93 6a08 	vldr	s12, [r3, #32]
    float in = input * f->gain;
 8015256:	ed93 7a02 	vldr	s14, [r3, #8]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 801525a:	edd3 7a04 	vldr	s15, [r3, #16]
    float in = input * f->gain;
 801525e:	ee20 7a07 	vmul.f32	s14, s0, s14
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8015262:	edd3 6a05 	vldr	s13, [r3, #20]
 8015266:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
 801526a:	ed83 7a07 	vstr	s14, [r3, #28]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 801526e:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
 8015272:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
 8015276:	4770      	bx	lr

08015278 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, float sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8015278:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80152b4 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 801527c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8015280:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8015284:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80152b8 <tOnePole_setSampleRate+0x40>
{
 8015288:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 801528a:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 801528c:	edd4 0a01 	vldr	s1, [r4, #4]
 8015290:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8015294:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8015298:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 801529c:	f001 fcfe 	bl	8016c9c <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 80152a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80152a4:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 80152a8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80152ac:	edc4 7a04 	vstr	s15, [r4, #16]
}
 80152b0:	bd10      	pop	{r4, pc}
 80152b2:	bf00      	nop
 80152b4:	40c90fdb 	.word	0x40c90fdb
 80152b8:	00000000 	.word	0x00000000

080152bc <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
 80152bc:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 80152be:	680c      	ldr	r4, [r1, #0]
{
 80152c0:	4605      	mov	r5, r0
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
 80152c2:	2028      	movs	r0, #40	; 0x28
 80152c4:	4621      	mov	r1, r4
 80152c6:	f001 fec1 	bl	801704c <mpool_alloc>
 80152ca:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 80152cc:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->gain = 1.0f;
    f->lastIn[0] = 0.0f;
 80152ce:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80152d0:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
 80152d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80152d6:	68d2      	ldr	r2, [r2, #12]
    f->gain = 1.0f;
 80152d8:	6041      	str	r1, [r0, #4]
    f->lastIn[0] = 0.0f;
 80152da:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
 80152dc:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80152de:	6242      	str	r2, [r0, #36]	; 0x24
}
 80152e0:	bd38      	pop	{r3, r4, r5, pc}
 80152e2:	bf00      	nop

080152e4 <tTwoZero_tick>:
    mpool_free((char*)f, f->mempool);
}

float   tTwoZero_tick(tTwoZero* const ft, float input)
{
    _tTwoZero* f = *ft;
 80152e4:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
 80152e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80152ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80152ee:	ed93 6a08 	vldr	s12, [r3, #32]
 80152f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80152f6:	edd3 5a04 	vldr	s11, [r3, #16]
    float in = input * f->gain;
 80152fa:	ed93 5a01 	vldr	s10, [r3, #4]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
 80152fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8015302:	eee5 7a86 	vfma.f32	s15, s11, s12
    
    f->lastIn[1] = f->lastIn[0];
 8015306:	ed83 7a08 	vstr	s14, [r3, #32]
    float in = input * f->gain;
 801530a:	ee20 0a05 	vmul.f32	s0, s0, s10
    f->lastIn[0] = in;
 801530e:	ed83 0a07 	vstr	s0, [r3, #28]
    
    return out;
}
 8015312:	eee6 7a80 	vfma.f32	s15, s13, s0
 8015316:	eeb0 0a67 	vmov.f32	s0, s15
 801531a:	4770      	bx	lr

0801531c <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, float b0, float b1, float b2)
{
    _tTwoZero* f = *ft;
 801531c:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
 801531e:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
 8015322:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
 8015326:	ed83 1a04 	vstr	s2, [r3, #16]
}
 801532a:	4770      	bx	lr

0801532c <tBiQuad_initToPool>:
{
    tBiQuad_initToPool(ft, &leaf->mempool);
}

void    tBiQuad_initToPool     (tBiQuad* const ft, tMempool* const mp)
{
 801532c:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 801532e:	680c      	ldr	r4, [r1, #0]
{
 8015330:	4605      	mov	r5, r0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
 8015332:	2044      	movs	r0, #68	; 0x44
 8015334:	4621      	mov	r1, r4
 8015336:	f001 fe89 	bl	801704c <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
    
    f->b0 = 0.0f;
 801533a:	2300      	movs	r3, #0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
 801533c:	6028      	str	r0, [r5, #0]
    f->gain = 1.0f;
 801533e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->mempool = m;
 8015342:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8015344:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
 8015346:	6041      	str	r1, [r0, #4]
    f->b0 = 0.0f;
 8015348:	6143      	str	r3, [r0, #20]
    f->a0 = 0.0f;
 801534a:	6083      	str	r3, [r0, #8]
    
    f->lastIn[0] = 0.0f;
 801534c:	6203      	str	r3, [r0, #32]
    f->lastIn[1] = 0.0f;
 801534e:	6243      	str	r3, [r0, #36]	; 0x24
    f->lastOut[0] = 0.0f;
 8015350:	6283      	str	r3, [r0, #40]	; 0x28
    f->lastOut[1] = 0.0f;
 8015352:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015354:	68d3      	ldr	r3, [r2, #12]
 8015356:	6403      	str	r3, [r0, #64]	; 0x40
}
 8015358:	bd38      	pop	{r3, r4, r5, pc}
 801535a:	bf00      	nop

0801535c <tBiQuad_setSampleRate>:
void    tBiQuad_setSampleRate(tBiQuad* const ft, float sr)
{
    _tBiQuad* f = *ft;
    
    f->sampleRate = sr;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
 801535c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80153c8 <tBiQuad_setSampleRate+0x6c>
 8015360:	eec7 7a00 	vdiv.f32	s15, s14, s0
{
 8015364:	b510      	push	{r4, lr}
    _tBiQuad* f = *ft;
 8015366:	6804      	ldr	r4, [r0, #0]
{
 8015368:	ed2d 8b02 	vpush	{d8}
    
    f->a2 = f->radius * f->radius;
 801536c:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8015370:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
    f->a2 = f->radius * f->radius;
 8015374:	ee68 8a08 	vmul.f32	s17, s16, s16
    f->sampleRate = sr;
 8015378:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
 801537c:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8015380:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->a2 = f->radius * f->radius;
 8015384:	edc4 8a04 	vstr	s17, [r4, #16]
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8015388:	f008 fa26 	bl	801d7d8 <cosf>
 801538c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
    
    if (f->normalize)
 8015390:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8015392:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015396:	ee28 8a00 	vmul.f32	s16, s16, s0
 801539a:	ed84 8a03 	vstr	s16, [r4, #12]
    if (f->normalize)
 801539e:	b17b      	cbz	r3, 80153c0 <tBiQuad_setSampleRate+0x64>
    {
        f->b0 = 0.5f - 0.5f * f->a2;
 80153a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        f->b1 = 0.0f;
 80153a4:	2300      	movs	r3, #0
        f->b0 = 0.5f - 0.5f * f->a2;
 80153a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        f->b1 = 0.0f;
 80153aa:	61a3      	str	r3, [r4, #24]
        f->b0 = 0.5f - 0.5f * f->a2;
 80153ac:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80153b0:	ee67 7a87 	vmul.f32	s15, s15, s14
        f->b2 = -f->b0;
 80153b4:	eeb1 7a67 	vneg.f32	s14, s15
        f->b0 = 0.5f - 0.5f * f->a2;
 80153b8:	edc4 7a05 	vstr	s15, [r4, #20]
        f->b2 = -f->b0;
 80153bc:	ed84 7a07 	vstr	s14, [r4, #28]
    }
}
 80153c0:	ecbd 8b02 	vpop	{d8}
 80153c4:	bd10      	pop	{r4, pc}
 80153c6:	bf00      	nop
 80153c8:	40c90fdb 	.word	0x40c90fdb

080153cc <tSVF_init>:

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q, LEAF* const leaf)
{
 80153cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ce:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 80153d2:	6995      	ldr	r5, [r2, #24]
{
 80153d4:	4606      	mov	r6, r0
 80153d6:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80153d8:	2044      	movs	r0, #68	; 0x44
 80153da:	4629      	mov	r1, r5
{
 80153dc:	eef0 8a40 	vmov.f32	s17, s0
 80153e0:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80153e4:	f001 fe32 	bl	801704c <mpool_alloc>
 80153e8:	6030      	str	r0, [r6, #0]
 80153ea:	4604      	mov	r4, r0
    svf->mempool = m;
 80153ec:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 80153ee:	686b      	ldr	r3, [r5, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
 80153f0:	2500      	movs	r5, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80153f2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80154b8 <tSVF_init+0xec>
    svf->sampleRate = leaf->sampleRate;
 80153f6:	681a      	ldr	r2, [r3, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80153f8:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 80153fc:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
 80153fe:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->type = type;
 8015402:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8015404:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 8015408:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->ic1eq = 0;
 801540c:	6105      	str	r5, [r0, #16]
    svf->ic2eq = 0;
 801540e:	6145      	str	r5, [r0, #20]
    svf->Q = Q;
 8015410:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 8015414:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8015418:	f008 fad2 	bl	801d9c0 <tanf>
    svf->k = 1.0f/Q;
 801541c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8015420:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 8015424:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
 8015426:	62e5      	str	r5, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
 8015428:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
 801542c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->cB = 0.0f;
 8015430:	6325      	str	r5, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
 8015432:	63a5      	str	r5, [r4, #56]	; 0x38
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015434:	eef0 6a67 	vmov.f32	s13, s15
 8015438:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
 801543c:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015440:	eee0 6a06 	vfma.f32	s13, s0, s12
 8015444:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
 8015448:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801544c:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 8015450:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
 8015454:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8015458:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
 801545c:	d00d      	beq.n	801547a <tSVF_init+0xae>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 801545e:	2f04      	cmp	r7, #4
 8015460:	d80b      	bhi.n	801547a <tSVF_init+0xae>
 8015462:	e8df f007 	tbb	[pc, r7]
 8015466:	0a18      	.short	0x0a18
 8015468:	0321      	.short	0x0321
 801546a:	0d          	.byte	0x0d
 801546b:	00          	.byte	0x00
        svf->cL = -1.0f;
    }
    
    else if (type == SVFTypeNotch)
    {
        svf->cH = 1.0f;
 801546c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8015470:	4a12      	ldr	r2, [pc, #72]	; (80154bc <tSVF_init+0xf0>)
        svf->cL = 0.0f;
 8015472:	2300      	movs	r3, #0
        svf->cH = 1.0f;
 8015474:	62e1      	str	r1, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8015476:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 8015478:	6363      	str	r3, [r4, #52]	; 0x34
}
 801547a:	ecbd 8b02 	vpop	{d8}
 801547e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypePeak)
    {
        svf->cH = 1.0f;
 8015480:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8015484:	4a0d      	ldr	r2, [pc, #52]	; (80154bc <tSVF_init+0xf0>)
        svf->cL = -2.0f;
 8015486:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 801548a:	62e1      	str	r1, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 801548c:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 801548e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8015490:	ecbd 8b02 	vpop	{d8}
 8015494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cBK = -1.0f;
 8015496:	4b09      	ldr	r3, [pc, #36]	; (80154bc <tSVF_init+0xf0>)
        svf->cH = 1.0f;
 8015498:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 801549c:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
 801549e:	62e2      	str	r2, [r4, #44]	; 0x2c
        svf->cL = -1.0f;
 80154a0:	6363      	str	r3, [r4, #52]	; 0x34
}
 80154a2:	ecbd 8b02 	vpop	{d8}
 80154a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
 80154a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
 80154ac:	2200      	movs	r2, #0
        svf->cB = 1.0f;
 80154ae:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cL = 0.0f;
 80154b0:	6362      	str	r2, [r4, #52]	; 0x34
}
 80154b2:	ecbd 8b02 	vpop	{d8}
 80154b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154b8:	40490fdb 	.word	0x40490fdb
 80154bc:	bf800000 	.word	0xbf800000

080154c0 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 80154c0:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80154c2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 80154c6:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80154ca:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80154ce:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80154d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 80154d6:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80154da:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
 80154de:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
 80154e2:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80154e6:	edd3 2a08 	vldr	s5, [r3, #32]
 80154ea:	ee67 7a84 	vmul.f32	s15, s15, s8
 80154ee:	ed93 2a07 	vldr	s4, [r3, #28]
 80154f2:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 80154f6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80154fa:	eea2 5a23 	vfma.f32	s10, s4, s7
 80154fe:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8015502:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8015506:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 801550a:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 801550e:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8015512:	eed5 6aa4 	vfnms.f32	s13, s11, s9
 8015516:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 801551a:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 801551e:	edc3 6a05 	vstr	s13, [r3, #20]
}
 8015522:	eea3 7a80 	vfma.f32	s14, s7, s0
 8015526:	eeb0 0a47 	vmov.f32	s0, s14
 801552a:	4770      	bx	lr

0801552c <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, float cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
 801552c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015530:	4a18      	ldr	r2, [pc, #96]	; (8015594 <tSVF_setFreqFast+0x68>)
 8015532:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
 8015536:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
 8015538:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801553c:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015540:	ee77 6ac0 	vsub.f32	s13, s15, s0
    float floatVer = cutoff - (float)intVer;
 8015544:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015548:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    float floatVer = cutoff - (float)intVer;
 801554c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015550:	edd0 5a01 	vldr	s11, [r0, #4]
    float floatVer = cutoff - (float)intVer;
 8015554:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015558:	ee76 6a86 	vadd.f32	s13, s13, s12
 801555c:	ed90 6a00 	vldr	s12, [r0]
 8015560:	ee20 0a25 	vmul.f32	s0, s0, s11
 8015564:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015568:	eef0 6a67 	vmov.f32	s13, s15
 801556c:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015570:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015574:	eee0 6a07 	vfma.f32	s13, s0, s14
 8015578:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
 801557c:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015580:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8015584:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 8015588:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 801558c:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 8015590:	4770      	bx	lr
 8015592:	bf00      	nop
 8015594:	0801f8f4 	.word	0x0801f8f4

08015598 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, float Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 8015598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 801559c:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801559e:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
 80155a2:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 80155a6:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80155aa:	eeb0 6a47 	vmov.f32	s12, s14
 80155ae:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 80155b2:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80155b6:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80155ba:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 80155be:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80155c2:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 80155c6:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 80155ca:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 80155ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80155d2:	4770      	bx	lr

080155d4 <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 80155d4:	b538      	push	{r3, r4, r5, lr}
 80155d6:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 80155da:	698c      	ldr	r4, [r1, #24]
{
 80155dc:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80155de:	2018      	movs	r0, #24
{
 80155e0:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80155e4:	4621      	mov	r1, r4
 80155e6:	f001 fd95 	bl	8017114 <mpool_calloc>
 80155ea:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 80155ec:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80155ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80155f2:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 80155f4:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80155f6:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 80155fa:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80155fc:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8015600:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8015602:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015606:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 801560a:	edc0 7a03 	vstr	s15, [r0, #12]
}
 801560e:	ecbd 8b02 	vpop	{d8}
 8015612:	bd38      	pop	{r3, r4, r5, pc}

08015614 <tHighpass_initToPool>:
{
 8015614:	b538      	push	{r3, r4, r5, lr}
 8015616:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801561a:	680c      	ldr	r4, [r1, #0]
{
 801561c:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 801561e:	2018      	movs	r0, #24
{
 8015620:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8015624:	4621      	mov	r1, r4
 8015626:	f001 fd75 	bl	8017114 <mpool_calloc>
 801562a:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 801562c:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 801562e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015632:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8015634:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015636:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 801563a:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 801563c:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
 8015640:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
 8015642:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015646:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 801564a:	edc0 7a03 	vstr	s15, [r0, #12]
}
 801564e:	ecbd 8b02 	vpop	{d8}
 8015652:	bd38      	pop	{r3, r4, r5, pc}

08015654 <tHighpass_setFreq>:
    mpool_free((char*)f, f->mempool);
}

void tHighpass_setFreq(tHighpass* const ft, float freq)
{
    _tHighpass* f = *ft;
 8015654:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015656:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801565a:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
 801565e:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015662:	eee7 7a40 	vfms.f32	s15, s14, s0
 8015666:	edc3 7a03 	vstr	s15, [r3, #12]
}
 801566a:	4770      	bx	lr

0801566c <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 801566c:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 801566e:	edd3 7a01 	vldr	s15, [r3, #4]
 8015672:	ed93 7a02 	vldr	s14, [r3, #8]
 8015676:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 801567a:	ed83 0a01 	vstr	s0, [r3, #4]
 801567e:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8015682:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015686:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 801568a:	4770      	bx	lr

0801568c <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, float sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 801568c:	eddf 6a07 	vldr	s13, [pc, #28]	; 80156ac <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8015690:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
 8015694:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8015696:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 801569a:	edd3 6a04 	vldr	s13, [r3, #16]
 801569e:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 80156a2:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 80156a6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80156aa:	4770      	bx	lr
 80156ac:	40c90fdb 	.word	0x40c90fdb

080156b0 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
 80156b0:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80156b2:	edd3 6a03 	vldr	s13, [r3, #12]
 80156b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80156ba:	ee70 7a66 	vsub.f32	s15, s0, s13
 80156be:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 80156c2:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 80156c6:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80156ca:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 80156ce:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 80156d2:	edd3 4a08 	vldr	s9, [r3, #32]
 80156d6:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80156da:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 80156de:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 80156e2:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 80156e6:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 80156ea:	eeb0 5a47 	vmov.f32	s10, s14
 80156ee:	eea4 0a87 	vfma.f32	s0, s9, s14
 80156f2:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 80156f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80156fa:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 80156fe:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8015702:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 8015706:	edc3 7a03 	vstr	s15, [r3, #12]
}
 801570a:	4770      	bx	lr

0801570c <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 801570c:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 801570e:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015710:	eddf 7a98 	vldr	s15, [pc, #608]	; 8015974 <tVZFilter_calcCoeffs+0x268>
{
 8015714:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015718:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 801571c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8015720:	ee68 8a87 	vmul.f32	s17, s17, s14
 8015724:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015728:	eeb0 0a68 	vmov.f32	s0, s17
 801572c:	f008 f948 	bl	801d9c0 <tanf>
    
    switch( f->type )
 8015730:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015732:	eeb0 8a40 	vmov.f32	s16, s0
 8015736:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 801573a:	2b0a      	cmp	r3, #10
 801573c:	f200 8117 	bhi.w	801596e <tVZFilter_calcCoeffs+0x262>
 8015740:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015744:	002f0026 	.word	0x002f0026
 8015748:	00410038 	.word	0x00410038
 801574c:	0056004d 	.word	0x0056004d
 8015750:	00a1008b 	.word	0x00a1008b
 8015754:	010a00b7 	.word	0x010a00b7
 8015758:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 801575a:	edd4 7a05 	vldr	s15, [r4, #20]
 801575e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015762:	eeb1 7a67 	vneg.f32	s14, s15
 8015766:	61e3      	str	r3, [r4, #28]
 8015768:	6263      	str	r3, [r4, #36]	; 0x24
 801576a:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 801576e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8015772:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015776:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 801577a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 801577e:	eee7 6a88 	vfma.f32	s13, s15, s16
 8015782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015786:	edc4 7a06 	vstr	s15, [r4, #24]
}
 801578a:	ecbd 8b02 	vpop	{d8}
 801578e:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015790:	2300      	movs	r3, #0
 8015792:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015796:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 801579a:	61e3      	str	r3, [r4, #28]
 801579c:	6223      	str	r3, [r4, #32]
 801579e:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 80157a0:	e7e5      	b.n	801576e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80157a2:	2300      	movs	r3, #0
 80157a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80157a8:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80157ac:	6223      	str	r3, [r4, #32]
 80157ae:	6263      	str	r3, [r4, #36]	; 0x24
 80157b0:	61e2      	str	r2, [r4, #28]
            break;
 80157b2:	e7dc      	b.n	801576e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80157b4:	2300      	movs	r3, #0
 80157b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80157ba:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80157be:	61e3      	str	r3, [r4, #28]
 80157c0:	6263      	str	r3, [r4, #36]	; 0x24
 80157c2:	6222      	str	r2, [r4, #32]
            break;
 80157c4:	e7d3      	b.n	801576e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80157c6:	edd4 7a05 	vldr	s15, [r4, #20]
 80157ca:	2300      	movs	r3, #0
 80157cc:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 80157d0:	61e3      	str	r3, [r4, #28]
 80157d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80157d6:	6263      	str	r3, [r4, #36]	; 0x24
 80157d8:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 80157dc:	e7c7      	b.n	801576e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80157de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80157e2:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80157e4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80157e8:	6222      	str	r2, [r4, #32]
 80157ea:	61e3      	str	r3, [r4, #28]
 80157ec:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80157ee:	e7be      	b.n	801576e <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80157f0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80157f4:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 80157f8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80157fc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015800:	f007 fe62 	bl	801d4c8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8015804:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015808:	f008 f8da 	bl	801d9c0 <tanf>
            float r  = f->g/wl;
 801580c:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015810:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8015814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015818:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801581c:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015820:	ed84 7a07 	vstr	s14, [r4, #28]
 8015824:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8015828:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801582c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8015830:	eef0 6a47 	vmov.f32	s13, s14
 8015834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015838:	ee77 7a45 	vsub.f32	s15, s14, s10
 801583c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015840:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8015844:	eef1 7ac7 	vsqrt.f32	s15, s14
 8015848:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801584c:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015850:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015854:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8015858:	e789      	b.n	801576e <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 801585a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801585e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015862:	edd4 7a05 	vldr	s15, [r4, #20]
 8015866:	eef1 6ac7 	vsqrt.f32	s13, s14
 801586a:	ed84 7a07 	vstr	s14, [r4, #28]
 801586e:	6263      	str	r3, [r4, #36]	; 0x24
 8015870:	ee27 6a27 	vmul.f32	s12, s14, s15
 8015874:	ed84 6a08 	vstr	s12, [r4, #32]
 8015878:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801587c:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8015880:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8015884:	e773      	b.n	801576e <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8015886:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 801588a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801588e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015892:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8015896:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 801589a:	61e3      	str	r3, [r4, #28]
 801589c:	ee27 6a27 	vmul.f32	s12, s14, s15
 80158a0:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80158a4:	eeb1 7ae6 	vsqrt.f32	s14, s13
 80158a8:	ee20 8a07 	vmul.f32	s16, s0, s14
 80158ac:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 80158b0:	e75d      	b.n	801576e <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 80158b2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80158b6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80158ba:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80158be:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8015978 <tVZFilter_calcCoeffs+0x26c>
 80158c2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 80158c6:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80158ca:	eeb0 0a48 	vmov.f32	s0, s16
 80158ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 80158d2:	f001 fb9d 	bl	8017010 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80158d6:	eddf 0a28 	vldr	s1, [pc, #160]	; 8015978 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80158da:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80158de:	eeb0 0a68 	vmov.f32	s0, s17
 80158e2:	f001 fb99 	bl	8017018 <minimum>
            f->cB = 1.0f-x*x;
 80158e6:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80158ea:	edd4 7a05 	vldr	s15, [r4, #20]
 80158ee:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 80158f2:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80158f6:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80158fa:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80158fe:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015902:	ee76 5a06 	vadd.f32	s11, s12, s12
 8015906:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 801590a:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801590e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8015912:	eee0 7a00 	vfma.f32	s15, s0, s0
 8015916:	eee0 7a65 	vfms.f32	s15, s0, s11
 801591a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 801591e:	f001 f901 	bl	8016b24 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8015922:	edd4 5a07 	vldr	s11, [r4, #28]
 8015926:	ed94 6a08 	vldr	s12, [r4, #32]
 801592a:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 801592e:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015932:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8015936:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801593a:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 801593e:	ee65 5a80 	vmul.f32	s11, s11, s0
 8015942:	ee26 6a00 	vmul.f32	s12, s12, s0
 8015946:	ee66 6a80 	vmul.f32	s13, s13, s0
 801594a:	edc4 5a07 	vstr	s11, [r4, #28]
 801594e:	ed84 6a08 	vstr	s12, [r4, #32]
 8015952:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 8015956:	e70a      	b.n	801576e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8015958:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 801595c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8015960:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8015962:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8015966:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 801596a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 801596c:	e6ff      	b.n	801576e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 801596e:	edd4 7a05 	vldr	s15, [r4, #20]
 8015972:	e6fc      	b.n	801576e <tVZFilter_calcCoeffs+0x62>
 8015974:	40490fdb 	.word	0x40490fdb
 8015978:	00000000 	.word	0x00000000

0801597c <tVZFilter_initToPool>:
{
 801597c:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 801597e:	6817      	ldr	r7, [r2, #0]
{
 8015980:	4605      	mov	r5, r0
 8015982:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8015984:	204c      	movs	r0, #76	; 0x4c
 8015986:	4639      	mov	r1, r7
{
 8015988:	ed2d 8b04 	vpush	{d8-d9}
 801598c:	b083      	sub	sp, #12
 801598e:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8015992:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8015996:	ed9f 8a42 	vldr	s16, [pc, #264]	; 8015aa0 <tVZFilter_initToPool+0x124>
{
 801599a:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 801599e:	f001 fb55 	bl	801704c <mpool_alloc>
 80159a2:	6028      	str	r0, [r5, #0]
 80159a4:	4604      	mov	r4, r0
    f->mempool = m;
 80159a6:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80159a8:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 80159ac:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80159ae:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 80159b2:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80159b6:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 8015aa4 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
 80159ba:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80159be:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 80159c2:	685b      	ldr	r3, [r3, #4]
 80159c4:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80159c6:	f001 f969 	bl	8016c9c <LEAF_clip>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80159ca:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8015aa8 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
 80159ce:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80159d2:	ee20 6a09 	vmul.f32	s12, s0, s18
 80159d6:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 80159da:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 80159de:	4b33      	ldr	r3, [pc, #204]	; (8015aac <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80159e0:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 80159e4:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 80159e6:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 80159ea:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80159ee:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80159f2:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 80159f6:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 80159f8:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 80159fc:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8015a00:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 8015a04:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 8015a08:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015a0c:	f007 ffd8 	bl	801d9c0 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8015a10:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8015ab0 <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015a14:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8015a18:	eef0 0a68 	vmov.f32	s1, s17
 8015a1c:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 8015a20:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8015a22:	f001 f93b 	bl	8016c9c <LEAF_clip>
 8015a26:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8015a2a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8015a2e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8015a32:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
 8015a36:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8015a38:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015a3c:	f007 fd44 	bl	801d4c8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8015a40:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8015a44:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8015a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015a4c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8015a50:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015a54:	f007 ffb4 	bl	801d9c0 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8015a58:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8015a5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8015a60:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8015a62:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8015a66:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8015a6a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015a6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015a72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015a7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8015a7e:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8015a82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015a86:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 8015a8a:	f7ff fe3f 	bl	801570c <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 8015a8e:	4628      	mov	r0, r5
}
 8015a90:	b003      	add	sp, #12
 8015a92:	ecbd 8b04 	vpop	{d8-d9}
 8015a96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 8015a9a:	f7ff be37 	b.w	801570c <tVZFilter_calcCoeffs>
 8015a9e:	bf00      	nop
 8015aa0:	00000000 	.word	0x00000000
 8015aa4:	40490fdb 	.word	0x40490fdb
 8015aa8:	3fb504f3 	.word	0x3fb504f3
 8015aac:	3f3504f3 	.word	0x3f3504f3
 8015ab0:	42c80000 	.word	0x42c80000

08015ab4 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8015ab4:	3218      	adds	r2, #24
 8015ab6:	f7ff bf61 	b.w	801597c <tVZFilter_initToPool>
 8015aba:	bf00      	nop

08015abc <tVZFilter_setFreq>:
{
 8015abc:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 8015abe:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8015ac0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8015ac4:	4604      	mov	r4, r0
 8015ac6:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8015aca:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
 8015ace:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8015ae8 <tVZFilter_setFreq+0x2c>
 8015ad2:	ee21 1a27 	vmul.f32	s2, s2, s15
 8015ad6:	f001 f8e1 	bl	8016c9c <LEAF_clip>
    tVZFilter_calcCoeffs(vf);
 8015ada:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8015adc:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
 8015ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8015ae4:	f7ff be12 	b.w	801570c <tVZFilter_calcCoeffs>
 8015ae8:	00000000 	.word	0x00000000

08015aec <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
 8015aec:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015af0:	4baa      	ldr	r3, [pc, #680]	; (8015d9c <tVZFilter_setFreqFast+0x2b0>)
 8015af2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
 8015af6:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015afa:	ee37 7ac0 	vsub.f32	s14, s15, s0
    float floatVer = cutoff - (float)intVer;
 8015afe:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015b02:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8015b06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015b0a:	ed91 6a01 	vldr	s12, [r1, #4]
{
 8015b0e:	b510      	push	{r4, lr}
    float floatVer = cutoff - (float)intVer;
 8015b10:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
 8015b14:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015b16:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015b1a:	edd1 6a00 	vldr	s13, [r1]
 8015b1e:	ee67 7a86 	vmul.f32	s15, s15, s12
{
 8015b22:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015b26:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
 8015b2a:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015b2c:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 8015b30:	2a0a      	cmp	r2, #10
 8015b32:	f200 812f 	bhi.w	8015d94 <tVZFilter_setFreqFast+0x2a8>
 8015b36:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015b3a:	0026      	.short	0x0026
 8015b3c:	0038002f 	.word	0x0038002f
 8015b40:	004d0041 	.word	0x004d0041
 8015b44:	009b0056 	.word	0x009b0056
 8015b48:	00cf00b5 	.word	0x00cf00b5
 8015b4c:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8015b50:	ed94 7a05 	vldr	s14, [r4, #20]
 8015b54:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015b58:	eef1 6a47 	vneg.f32	s13, s14
 8015b5c:	61e3      	str	r3, [r4, #28]
 8015b5e:	6263      	str	r3, [r4, #36]	; 0x24
 8015b60:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
 8015b64:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8015b6c:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015b70:	eef0 6a47 	vmov.f32	s13, s14
 8015b74:	eee0 6a27 	vfma.f32	s13, s0, s15
 8015b78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015b7c:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8015b80:	ecbd 8b02 	vpop	{d8}
 8015b84:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015b86:	2300      	movs	r3, #0
 8015b88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015b8c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015b90:	61e3      	str	r3, [r4, #28]
 8015b92:	6223      	str	r3, [r4, #32]
 8015b94:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8015b96:	e7e5      	b.n	8015b64 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8015b98:	2300      	movs	r3, #0
 8015b9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015b9e:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8015ba2:	6223      	str	r3, [r4, #32]
 8015ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8015ba6:	61e2      	str	r2, [r4, #28]
            break;
 8015ba8:	e7dc      	b.n	8015b64 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8015baa:	2300      	movs	r3, #0
 8015bac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015bb0:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8015bb4:	61e3      	str	r3, [r4, #28]
 8015bb6:	6263      	str	r3, [r4, #36]	; 0x24
 8015bb8:	6222      	str	r2, [r4, #32]
            break;
 8015bba:	e7d3      	b.n	8015b64 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015bbc:	ed94 7a05 	vldr	s14, [r4, #20]
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8015bc6:	61e3      	str	r3, [r4, #28]
 8015bc8:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8015bce:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8015bd2:	e7c7      	b.n	8015b64 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015bd4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015bd8:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015bda:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015bde:	6222      	str	r2, [r4, #32]
 8015be0:	61e3      	str	r3, [r4, #28]
 8015be2:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8015be4:	e7be      	b.n	8015b64 <tVZFilter_setFreqFast+0x78>
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8015be6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8015bea:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8015bee:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8015bf2:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015bf6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8015bfa:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015bfe:	f000 ffd5 	bl	8016bac <fastPowf>
            float wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8015c02:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8015c06:	eddf 7a66 	vldr	s15, [pc, #408]	; 8015da0 <tVZFilter_setFreqFast+0x2b4>
 8015c0a:	ee28 8a07 	vmul.f32	s16, s16, s14
 8015c0e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015c12:	ee28 0a00 	vmul.f32	s0, s16, s0
 8015c16:	f000 ff71 	bl	8016afc <fastertanf>
            float r  = f->g/wl;
 8015c1a:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015c1e:	eeb0 5a68 	vmov.f32	s10, s17
 8015c22:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            float r  = f->g/wl;
 8015c26:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015c2a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015c2e:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8015c32:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015c36:	eea7 5aa7 	vfma.f32	s10, s15, s15
 8015c3a:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8015c3e:	ee77 7a65 	vsub.f32	s15, s14, s11
 8015c42:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015c46:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8015c4a:	f000 ff6b 	bl	8016b24 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015c4e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 8015c52:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015c56:	edc4 8a07 	vstr	s17, [r4, #28]
 8015c5a:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015c5e:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015c62:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015c66:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015c6a:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8015c6e:	e779      	b.n	8015b64 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 8015c70:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8015c74:	f000 ff56 	bl	8016b24 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015c78:	f000 ff54 	bl	8016b24 <fastsqrtf>
 8015c7c:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015c80:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8015c84:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015c88:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015c8c:	ed94 7a05 	vldr	s14, [r4, #20]
 8015c90:	edc4 6a07 	vstr	s13, [r4, #28]
 8015c94:	6263      	str	r3, [r4, #36]	; 0x24
 8015c96:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015c9a:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015c9e:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 8015ca2:	e75f      	b.n	8015b64 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 8015ca4:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8015ca8:	f000 ff3c 	bl	8016b24 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015cac:	f000 ff3a 	bl	8016b24 <fastsqrtf>
 8015cb0:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8015cb4:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8015cb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015cbc:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015cc0:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8015cc4:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 8015cc8:	ee67 6a26 	vmul.f32	s13, s14, s13
 8015ccc:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015cce:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8015cd2:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8015cd6:	e745      	b.n	8015b64 <tVZFilter_setFreqFast+0x78>
            float x  = (2.0f*f->m-1.0f);
 8015cd8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015cdc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015ce0:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015ce4:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8015da4 <tVZFilter_setFreqFast+0x2b8>
 8015ce8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8015cec:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015cf0:	eeb0 0a48 	vmov.f32	s0, s16
 8015cf4:	eea7 0a67 	vfms.f32	s0, s14, s15
 8015cf8:	f001 f98a 	bl	8017010 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015cfc:	eddf 0a29 	vldr	s1, [pc, #164]	; 8015da4 <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015d00:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015d04:	eeb0 0a68 	vmov.f32	s0, s17
 8015d08:	f001 f986 	bl	8017018 <minimum>
            f->cB = 1.0f-x*x;
 8015d0c:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015d10:	edd4 7a05 	vldr	s15, [r4, #20]
 8015d14:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8015d18:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015d1c:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8015d20:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015d24:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015d28:	ee76 5a06 	vadd.f32	s11, s12, s12
 8015d2c:	ee38 8a08 	vadd.f32	s16, s16, s16
 8015d30:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8015d34:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015d38:	eee6 7a06 	vfma.f32	s15, s12, s12
 8015d3c:	eee0 7a00 	vfma.f32	s15, s0, s0
 8015d40:	eee0 7a65 	vfms.f32	s15, s0, s11
 8015d44:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8015d48:	f000 feec 	bl	8016b24 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8015d4c:	edd4 5a07 	vldr	s11, [r4, #28]
 8015d50:	ed94 6a08 	vldr	s12, [r4, #32]
 8015d54:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8015d58:	ed94 7a05 	vldr	s14, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015d5c:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 8015d60:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
 8015d64:	ee65 5a80 	vmul.f32	s11, s11, s0
 8015d68:	ee26 6a00 	vmul.f32	s12, s12, s0
 8015d6c:	ee66 6a80 	vmul.f32	s13, s13, s0
 8015d70:	edc4 5a07 	vstr	s11, [r4, #28]
 8015d74:	ed84 6a08 	vstr	s12, [r4, #32]
 8015d78:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 8015d7c:	e6f2      	b.n	8015b64 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
 8015d7e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8015d82:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8015d86:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8015d88:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 8015d8c:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 8015d90:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8015d92:	e6e7      	b.n	8015b64 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015d94:	ed94 7a05 	vldr	s14, [r4, #20]
 8015d98:	e6e4      	b.n	8015b64 <tVZFilter_setFreqFast+0x78>
 8015d9a:	bf00      	nop
 8015d9c:	0801f8f4 	.word	0x0801f8f4
 8015da0:	40490fdb 	.word	0x40490fdb
 8015da4:	00000000 	.word	0x00000000

08015da8 <tVZFilter_setGain>:
{
 8015da8:	b538      	push	{r3, r4, r5, lr}
 8015daa:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8015dae:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8015dd8 <tVZFilter_setGain+0x30>
 8015db2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8015ddc <tVZFilter_setGain+0x34>
{
 8015db6:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 8015db8:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8015dba:	f000 ff6f 	bl	8016c9c <LEAF_clip>
    f->invG = 1.0f/f->G;
 8015dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8015dc2:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8015dc4:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 8015dc8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015dcc:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 8015dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8015dd4:	f7ff bc9a 	b.w	801570c <tVZFilter_calcCoeffs>
 8015dd8:	457a0000 	.word	0x457a0000
 8015ddc:	358637bd 	.word	0x358637bd

08015de0 <tVZFilter_setResonance>:
{
 8015de0:	b538      	push	{r3, r4, r5, lr}
 8015de2:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8015de6:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8015e10 <tVZFilter_setResonance+0x30>
 8015dea:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8015e14 <tVZFilter_setResonance+0x34>
{
 8015dee:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 8015df0:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8015df2:	f000 ff53 	bl	8016c9c <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 8015df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8015dfa:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8015dfc:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 8015e00:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015e04:	edc5 7a05 	vstr	s15, [r5, #20]
}
 8015e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8015e0c:	f7ff bc7e 	b.w	801570c <tVZFilter_calcCoeffs>
 8015e10:	42c80000 	.word	0x42c80000
 8015e14:	3c23d70a 	.word	0x3c23d70a

08015e18 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, float sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 8015e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
 8015e1c:	6803      	ldr	r3, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015e1e:	eddf 7a9d 	vldr	s15, [pc, #628]	; 8016094 <tVZFilter_setSampleRate+0x27c>
    f->invSampleRate = 1.0f/f->sampleRate;
 8015e22:	ee86 7a80 	vdiv.f32	s14, s13, s0
{
 8015e26:	b510      	push	{r4, lr}
 8015e28:	ed2d 8b02 	vpush	{d8}
    f->sampleRate = sr;
 8015e2c:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
 8015e30:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    _tVZFilter* f = *vf;
 8015e34:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015e36:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8015e3a:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8015e3e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8015e42:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015e46:	eeb0 0a68 	vmov.f32	s0, s17
 8015e4a:	f007 fdb9 	bl	801d9c0 <tanf>
    switch( f->type )
 8015e4e:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015e50:	eeb0 8a40 	vmov.f32	s16, s0
 8015e54:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8015e58:	2b0a      	cmp	r3, #10
 8015e5a:	f200 8117 	bhi.w	801608c <tVZFilter_setSampleRate+0x274>
 8015e5e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015e62:	0026      	.short	0x0026
 8015e64:	0038002f 	.word	0x0038002f
 8015e68:	004d0041 	.word	0x004d0041
 8015e6c:	008b0056 	.word	0x008b0056
 8015e70:	00b700a1 	.word	0x00b700a1
 8015e74:	000b010a 	.word	0x000b010a
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8015e78:	edd4 7a05 	vldr	s15, [r4, #20]
 8015e7c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015e80:	eeb1 7a67 	vneg.f32	s14, s15
 8015e84:	61e3      	str	r3, [r4, #28]
 8015e86:	6263      	str	r3, [r4, #36]	; 0x24
 8015e88:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8015e90:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015e94:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8015e98:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015e9c:	eee7 6a88 	vfma.f32	s13, s15, s16
 8015ea0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015ea4:	edc4 7a06 	vstr	s15, [r4, #24]
    tVZFilter_calcCoeffs(vf);
}
 8015ea8:	ecbd 8b02 	vpop	{d8}
 8015eac:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015eae:	2300      	movs	r3, #0
 8015eb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015eb4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015eb8:	61e3      	str	r3, [r4, #28]
 8015eba:	6223      	str	r3, [r4, #32]
 8015ebc:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8015ebe:	e7e5      	b.n	8015e8c <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015ec6:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8015eca:	6223      	str	r3, [r4, #32]
 8015ecc:	6263      	str	r3, [r4, #36]	; 0x24
 8015ece:	61e2      	str	r2, [r4, #28]
            break;
 8015ed0:	e7dc      	b.n	8015e8c <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015ed8:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8015edc:	61e3      	str	r3, [r4, #28]
 8015ede:	6263      	str	r3, [r4, #36]	; 0x24
 8015ee0:	6222      	str	r2, [r4, #32]
            break;
 8015ee2:	e7d3      	b.n	8015e8c <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015ee4:	edd4 7a05 	vldr	s15, [r4, #20]
 8015ee8:	2300      	movs	r3, #0
 8015eea:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8015eee:	61e3      	str	r3, [r4, #28]
 8015ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8015ef6:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8015efa:	e7c7      	b.n	8015e8c <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015efc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015f00:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015f02:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015f06:	6222      	str	r2, [r4, #32]
 8015f08:	61e3      	str	r3, [r4, #28]
 8015f0a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8015f0c:	e7be      	b.n	8015e8c <tVZFilter_setSampleRate+0x74>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8015f0e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8015f12:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8015f16:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8015f1a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015f1e:	f007 fad3 	bl	801d4c8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8015f22:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015f26:	f007 fd4b 	bl	801d9c0 <tanf>
            float r  = f->g/wl;
 8015f2a:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015f2e:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8015f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015f36:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8015f3a:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015f3e:	ed84 7a07 	vstr	s14, [r4, #28]
 8015f42:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8015f46:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015f4a:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8015f4e:	eef0 6a47 	vmov.f32	s13, s14
 8015f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015f56:	ee77 7a45 	vsub.f32	s15, s14, s10
 8015f5a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015f5e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8015f62:	eef1 7ac7 	vsqrt.f32	s15, s14
 8015f66:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015f6a:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015f6e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015f72:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8015f76:	e789      	b.n	8015e8c <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 8015f78:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015f7c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015f80:	edd4 7a05 	vldr	s15, [r4, #20]
 8015f84:	eef1 6ac7 	vsqrt.f32	s13, s14
 8015f88:	ed84 7a07 	vstr	s14, [r4, #28]
 8015f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8015f8e:	ee27 6a27 	vmul.f32	s12, s14, s15
 8015f92:	ed84 6a08 	vstr	s12, [r4, #32]
 8015f96:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015f9a:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8015f9e:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8015fa2:	e773      	b.n	8015e8c <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 8015fa4:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8015fa8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015fac:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015fb0:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8015fb4:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8015fb8:	61e3      	str	r3, [r4, #28]
 8015fba:	ee27 6a27 	vmul.f32	s12, s14, s15
 8015fbe:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015fc2:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8015fc6:	ee20 8a07 	vmul.f32	s16, s0, s14
 8015fca:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8015fce:	e75d      	b.n	8015e8c <tVZFilter_setSampleRate+0x74>
            float x  = (2.0f*f->m-1.0f);
 8015fd0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015fd4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015fd8:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015fdc:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8016098 <tVZFilter_setSampleRate+0x280>
 8015fe0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8015fe4:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015fe8:	eeb0 0a48 	vmov.f32	s0, s16
 8015fec:	eea7 0a67 	vfms.f32	s0, s14, s15
 8015ff0:	f001 f80e 	bl	8017010 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015ff4:	eddf 0a28 	vldr	s1, [pc, #160]	; 8016098 <tVZFilter_setSampleRate+0x280>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015ff8:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015ffc:	eeb0 0a68 	vmov.f32	s0, s17
 8016000:	f001 f80a 	bl	8017018 <minimum>
            f->cB = 1.0f-x*x;
 8016004:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8016008:	edd4 7a05 	vldr	s15, [r4, #20]
 801600c:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8016010:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8016014:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8016018:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 801601c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8016020:	ee76 5a06 	vadd.f32	s11, s12, s12
 8016024:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8016028:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801602c:	eee6 7a06 	vfma.f32	s15, s12, s12
 8016030:	eee0 7a00 	vfma.f32	s15, s0, s0
 8016034:	eee0 7a65 	vfms.f32	s15, s0, s11
 8016038:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 801603c:	f000 fd72 	bl	8016b24 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8016040:	edd4 5a07 	vldr	s11, [r4, #28]
 8016044:	ed94 6a08 	vldr	s12, [r4, #32]
 8016048:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 801604c:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8016050:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8016054:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8016058:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 801605c:	ee65 5a80 	vmul.f32	s11, s11, s0
 8016060:	ee26 6a00 	vmul.f32	s12, s12, s0
 8016064:	ee66 6a80 	vmul.f32	s13, s13, s0
 8016068:	edc4 5a07 	vstr	s11, [r4, #28]
 801606c:	ed84 6a08 	vstr	s12, [r4, #32]
 8016070:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 8016074:	e70a      	b.n	8015e8c <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f;
 8016076:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 801607a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 801607e:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8016080:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8016084:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8016088:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 801608a:	e6ff      	b.n	8015e8c <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 801608c:	edd4 7a05 	vldr	s15, [r4, #20]
 8016090:	e6fc      	b.n	8015e8c <tVZFilter_setSampleRate+0x74>
 8016092:	bf00      	nop
 8016094:	40490fdb 	.word	0x40490fdb
 8016098:	00000000 	.word	0x00000000

0801609c <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 801609c:	b570      	push	{r4, r5, r6, lr}
 801609e:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 80160a2:	698d      	ldr	r5, [r1, #24]
{
 80160a4:	eeb0 8a40 	vmov.f32	s16, s0
 80160a8:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80160aa:	2040      	movs	r0, #64	; 0x40
 80160ac:	4629      	mov	r1, r5
{
 80160ae:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80160b2:	f000 ffcb 	bl	801704c <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80160b6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8016130 <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80160ba:	6030      	str	r0, [r6, #0]
 80160bc:	4604      	mov	r4, r0
    f->mempool = m;
 80160be:	6005      	str	r5, [r0, #0]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80160c0:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
 80160c4:	686b      	ldr	r3, [r5, #4]
 80160c6:	ed93 7a01 	vldr	s14, [r3, #4]
    f->cutoff = cutoff;
 80160ca:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80160ce:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->invSampleRate = leaf->invSampleRate;
 80160d2:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80160d6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80160da:	f007 fd05 	bl	801dae8 <tan>
    f->r = (7.f * resonance + 0.5f);
 80160de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80160e2:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 80160e6:	4913      	ldr	r1, [pc, #76]	; (8016134 <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
 80160e8:	4b13      	ldr	r3, [pc, #76]	; (8016138 <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 80160ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
 80160ee:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
 80160f2:	2000      	movs	r0, #0
    f->n = 1.836f;
 80160f4:	6161      	str	r1, [r4, #20]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80160f6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
 80160fa:	4910      	ldr	r1, [pc, #64]	; (801613c <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
 80160fc:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
 8016100:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
 8016102:	4b0f      	ldr	r3, [pc, #60]	; (8016140 <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
 8016104:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
 8016106:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->g0inv = 1.f/(2.f*f->Vt);
 8016108:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
 801610a:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
 801610c:	480d      	ldr	r0, [pc, #52]	; (8016144 <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
 801610e:	490e      	ldr	r1, [pc, #56]	; (8016148 <tDiodeFilter_init+0xac>)
    f->g2inv = 1.f/(6.f*f->gamma);
 8016110:	4a0e      	ldr	r2, [pc, #56]	; (801614c <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
 8016112:	4b0f      	ldr	r3, [pc, #60]	; (8016150 <tDiodeFilter_init+0xb4>)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8016114:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
 8016118:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 801611c:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
 8016120:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
 8016122:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 8016124:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
 8016126:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8016128:	ecbd 8b02 	vpop	{d8}
 801612c:	bd70      	pop	{r4, r5, r6, pc}
 801612e:	bf00      	nop
 8016130:	40490fdb 	.word	0x40490fdb
 8016134:	3feb020c 	.word	0x3feb020c
 8016138:	3f6b020c 	.word	0x3f6b020c
 801613c:	3c23d70a 	.word	0x3c23d70a
 8016140:	3ca3d70a 	.word	0x3ca3d70a
 8016144:	3cf5c28f 	.word	0x3cf5c28f
 8016148:	3f0b6efd 	.word	0x3f0b6efd
 801614c:	3e39e952 	.word	0x3e39e952
 8016150:	3d23d70a 	.word	0x3d23d70a

08016154 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
float   tDiodeFilter_tick               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 8016154:	6803      	ldr	r3, [r0, #0]
{
 8016156:	eeb0 4a40 	vmov.f32	s8, s0
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801615a:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801615e:	ed9f 5ab8 	vldr	s10, [pc, #736]	; 8016440 <tDiodeFilter_tick+0x2ec>
 8016162:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8016444 <tDiodeFilter_tick+0x2f0>
 8016166:	eef0 1a45 	vmov.f32	s3, s10
{
 801616a:	ed2d 8b08 	vpush	{d8-d11}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801616e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016172:	eef2 8a0e 	vmov.f32	s17, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016176:	ed93 0a03 	vldr	s0, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801617a:	eef0 9a45 	vmov.f32	s19, s10
    float ih = 0.5f * (in + f->zi);
 801617e:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016182:	eeb0 9a67 	vmov.f32	s18, s15
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016186:	ee67 6a40 	vnmul.f32	s13, s14, s0
 801618a:	edd3 5a08 	vldr	s11, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 801618e:	ee74 4a24 	vadd.f32	s9, s8, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016192:	ed9f 8aad 	vldr	s16, [pc, #692]	; 8016448 <tDiodeFilter_tick+0x2f4>
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8016196:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 801619a:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801619e:	eee4 6a82 	vfma.f32	s13, s9, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80161a2:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80161a6:	eeb0 2a67 	vmov.f32	s4, s15
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80161aa:	edd3 2a02 	vldr	s5, [r3, #8]
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80161ae:	ee33 6ac3 	vsub.f32	s12, s7, s6
 80161b2:	ee62 0a81 	vmul.f32	s1, s5, s2
 80161b6:	ee26 6a01 	vmul.f32	s12, s12, s2
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80161ba:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80161be:	ee62 5aa5 	vmul.f32	s11, s5, s11
    float a = x*x;
 80161c2:	ee26 6a06 	vmul.f32	s12, s12, s12
 80161c6:	ee66 6aa6 	vmul.f32	s13, s13, s13
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80161ca:	eee6 1aa8 	vfma.f32	s3, s13, s17
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80161ce:	ee76 4a88 	vadd.f32	s9, s13, s16
 80161d2:	eea6 2aa4 	vfma.f32	s4, s13, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80161d6:	eef0 4a67 	vmov.f32	s9, s15
 80161da:	eee6 4aa1 	vfma.f32	s9, s13, s3
 80161de:	eef0 6a45 	vmov.f32	s13, s10
 80161e2:	eee6 6a28 	vfma.f32	s13, s12, s17
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80161e6:	eec2 1a24 	vdiv.f32	s3, s4, s9
 80161ea:	ee76 4a08 	vadd.f32	s9, s12, s16
 80161ee:	eeb0 2a67 	vmov.f32	s4, s15
 80161f2:	eea6 2a24 	vfma.f32	s4, s12, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80161f6:	eef0 4a67 	vmov.f32	s9, s15
 80161fa:	eee6 4a26 	vfma.f32	s9, s12, s13
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80161fe:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8016202:	ee62 2a86 	vmul.f32	s5, s5, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016206:	ee61 1aa5 	vmul.f32	s3, s3, s11
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801620a:	ee27 6a06 	vmul.f32	s12, s14, s12
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801620e:	eec2 6a24 	vdiv.f32	s13, s4, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8016212:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 8016216:	ee34 2ae3 	vsub.f32	s4, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 801621a:	ee77 5a64 	vsub.f32	s11, s14, s9
    float a = x*x;
 801621e:	ee26 6a06 	vmul.f32	s12, s12, s12
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8016222:	ee22 2a01 	vmul.f32	s4, s4, s2
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8016226:	ee65 5a81 	vmul.f32	s11, s11, s2
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801622a:	eeb0 1a45 	vmov.f32	s2, s10
    float a = x*x;
 801622e:	ee22 2a02 	vmul.f32	s4, s4, s4
 8016232:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016236:	eee6 9a28 	vfma.f32	s19, s12, s17
 801623a:	eea2 1a28 	vfma.f32	s2, s4, s17
 801623e:	eea5 5aa8 	vfma.f32	s10, s11, s17
 8016242:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8016246:	ee66 6aa0 	vmul.f32	s13, s13, s1
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801624a:	eea2 9a01 	vfma.f32	s18, s4, s2
 801624e:	eeb0 1a67 	vmov.f32	s2, s15
 8016252:	eee5 8a85 	vfma.f32	s17, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016256:	ee36 5a08 	vadd.f32	s10, s12, s16
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801625a:	eea9 1a86 	vfma.f32	s2, s19, s12
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801625e:	eef0 9a67 	vmov.f32	s19, s15
 8016262:	eee6 9a05 	vfma.f32	s19, s12, s10
 8016266:	ee32 6a08 	vadd.f32	s12, s4, s16
 801626a:	ee89 5a81 	vdiv.f32	s10, s19, s2
 801626e:	eef0 9a67 	vmov.f32	s19, s15
 8016272:	ee37 1a23 	vadd.f32	s2, s14, s7
 8016276:	eee2 9a06 	vfma.f32	s19, s4, s12
 801627a:	ee35 6a88 	vadd.f32	s12, s11, s16
    
    // This formula gives the result for y3 thanks to MATLAB
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801627e:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016282:	eee5 7a86 	vfma.f32	s15, s11, s12
 8016286:	ee89 6a89 	vdiv.f32	s12, s19, s18
 801628a:	eec7 5aa8 	vdiv.f32	s11, s15, s17
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801628e:	ee25 5a22 	vmul.f32	s10, s10, s5
 8016292:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016296:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
 801629a:	ee35 aa02 	vadd.f32	s20, s10, s4
 801629e:	eef0 aa68 	vmov.f32	s21, s17
 80162a2:	ee35 ba29 	vadd.f32	s22, s10, s19
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80162a6:	ee66 7a20 	vmul.f32	s15, s12, s1
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80162aa:	ee33 6a24 	vadd.f32	s12, s6, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80162ae:	eea0 ba21 	vfma.f32	s22, s0, s3
 80162b2:	eee5 aa28 	vfma.f32	s21, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80162b6:	ee36 6a01 	vadd.f32	s12, s12, s2
 80162ba:	ee34 1a81 	vadd.f32	s2, s9, s2
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80162be:	ee65 5aa0 	vmul.f32	s11, s11, s1
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80162c2:	eea4 6a21 	vfma.f32	s12, s8, s3
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80162c6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80162ca:	eeab aa26 	vfma.f32	s20, s22, s13
 80162ce:	eee5 9a28 	vfma.f32	s19, s10, s17
 80162d2:	ee35 8a20 	vadd.f32	s16, s10, s1
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80162d6:	ee77 2a24 	vadd.f32	s5, s14, s9
 80162da:	eea6 1a26 	vfma.f32	s2, s12, s13
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80162de:	ee28 ba26 	vmul.f32	s22, s16, s13
 80162e2:	eeb0 6a45 	vmov.f32	s12, s10
 80162e6:	eeab 6a28 	vfma.f32	s12, s22, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80162ea:	eeb0 9a41 	vmov.f32	s18, s2
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80162ee:	eeb0 1a6a 	vmov.f32	s2, s21
 80162f2:	eeab 1a02 	vfma.f32	s2, s22, s4
 80162f6:	eea1 6a27 	vfma.f32	s12, s2, s15
 80162fa:	ee35 1a28 	vadd.f32	s2, s10, s17
 80162fe:	eea9 1aa6 	vfma.f32	s2, s19, s13
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016302:	ee67 9a26 	vmul.f32	s19, s14, s13
 8016306:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801630a:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801630e:	eea7 2a28 	vfma.f32	s4, s14, s17
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016312:	eea1 6a25 	vfma.f32	s12, s2, s11
 8016316:	eeb0 1a47 	vmov.f32	s2, s14
 801631a:	eea9 1aa8 	vfma.f32	s2, s19, s17
 801631e:	eea2 1a27 	vfma.f32	s2, s4, s15
 8016322:	ee32 2aa2 	vadd.f32	s4, s5, s5
 8016326:	eee6 2a82 	vfma.f32	s5, s13, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801632a:	eeb0 2a41 	vmov.f32	s4, s2
 801632e:	eee9 2a27 	vfma.f32	s5, s18, s15
 8016332:	eea2 2aa5 	vfma.f32	s4, s5, s11
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 8016336:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
 801633a:	eeb4 6a62 	vcmp.f32	s12, s5
 801633e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8016342:	eef5 6a40 	vcmp.f32	s13, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016346:	bf14      	ite	ne
 8016348:	ee36 6a20 	vaddne.f32	s12, s12, s1
        tempy3denom = 0.000001f;
 801634c:	ed9f 6a3f 	vldreq	s12, [pc, #252]	; 801644c <tDiodeFilter_tick+0x2f8>
    if (t1 == 0.0f)
 8016350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8016354:	ee82 1a06 	vdiv.f32	s2, s4, s12
    if (t1 == 0.0f)
 8016358:	d063      	beq.n	8016422 <tDiodeFilter_tick+0x2ce>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 801635a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801635e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016366:	ee76 0aa0 	vadd.f32	s1, s13, s1
 801636a:	d063      	beq.n	8016434 <tDiodeFilter_tick+0x2e0>
 801636c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8016370:	ee77 2aa2 	vadd.f32	s5, s15, s5
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8016374:	eef5 5a40 	vcmp.f32	s11, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
 8016378:	ed83 4a07 	vstr	s8, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 801637c:	eef0 8a47 	vmov.f32	s17, s14
    float xx = (in - f->r*y3);
 8016380:	ee20 0a01 	vmul.f32	s0, s0, s2
    if (t3 == 0.0f)
 8016384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8016388:	ee77 0aa0 	vadd.f32	s1, s15, s1
    float xx = (in - f->r*y3);
 801638c:	ee34 2a40 	vsub.f32	s4, s8, s0
        t3 = 0.000001f;
 8016390:	bf08      	it	eq
 8016392:	eddf 5a2e 	vldreq	s11, [pc, #184]	; 801644c <tDiodeFilter_tick+0x2f8>
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8016396:	ee38 6a25 	vadd.f32	s12, s16, s11
 801639a:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 801639e:	ee75 2aa2 	vadd.f32	s5, s11, s5
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80163a2:	eed6 8a01 	vfnms.f32	s17, s12, s2
 80163a6:	eea5 8a81 	vfma.f32	s16, s11, s2
 80163aa:	ee88 6aa5 	vdiv.f32	s12, s17, s11
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80163ae:	eeb0 4a48 	vmov.f32	s8, s16
 80163b2:	eeb0 8a63 	vmov.f32	s16, s7
 80163b6:	ee92 4a86 	vfnms.f32	s8, s5, s12
 80163ba:	eea7 8a86 	vfma.f32	s16, s15, s12
 80163be:	eec4 2a27 	vdiv.f32	s5, s8, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80163c2:	ee90 8aa2 	vfnms.f32	s16, s1, s5
 80163c6:	ee88 4a26 	vdiv.f32	s8, s16, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80163ca:	ee32 4ac4 	vsub.f32	s8, s5, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80163ce:	ee76 2a62 	vsub.f32	s5, s12, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80163d2:	ee31 6a46 	vsub.f32	s12, s2, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80163d6:	ee64 6a26 	vmul.f32	s13, s8, s13
 80163da:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80163de:	ee26 6a25 	vmul.f32	s12, s12, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80163e2:	eef0 0a66 	vmov.f32	s1, s13
 80163e6:	eed2 6aa7 	vfnms.f32	s13, s5, s15
 80163ea:	eef0 5a46 	vmov.f32	s11, s12
 80163ee:	eee1 0a82 	vfma.f32	s1, s3, s4
 80163f2:	eea5 6a01 	vfma.f32	s12, s10, s2
 80163f6:	eee2 5ae7 	vfms.f32	s11, s5, s15
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80163fa:	eee6 3a84 	vfma.f32	s7, s13, s8
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80163fe:	eea0 3a84 	vfma.f32	s6, s1, s8
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8016402:	eea6 7a44 	vfms.f32	s14, s12, s8
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8016406:	eee5 4a84 	vfma.f32	s9, s11, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801640a:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 801640e:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8016412:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8016416:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    return tanhf(y3*f->r);
}
 801641a:	ecbd 8b08 	vpop	{d8-d11}
    return tanhf(y3*f->r);
 801641e:	f007 bafb 	b.w	801da18 <tanhf>
    if (t2 == 0.0f)
 8016422:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016426:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8016450 <tDiodeFilter_tick+0x2fc>
        t1 = 0.000001f;
 801642a:	eddf 6a08 	vldr	s13, [pc, #32]	; 801644c <tDiodeFilter_tick+0x2f8>
    if (t2 == 0.0f)
 801642e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016432:	d19b      	bne.n	801636c <tDiodeFilter_tick+0x218>
 8016434:	eddf 2a06 	vldr	s5, [pc, #24]	; 8016450 <tDiodeFilter_tick+0x2fc>
        t2 = 0.000001f;
 8016438:	eddf 7a04 	vldr	s15, [pc, #16]	; 801644c <tDiodeFilter_tick+0x2f8>
 801643c:	e79a      	b.n	8016374 <tDiodeFilter_tick+0x220>
 801643e:	bf00      	nop
 8016440:	43d20000 	.word	0x43d20000
 8016444:	446c4000 	.word	0x446c4000
 8016448:	42d20000 	.word	0x42d20000
 801644c:	358637bd 	.word	0x358637bd
 8016450:	3f800008 	.word	0x3f800008

08016454 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
float   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 8016454:	6803      	ldr	r3, [r0, #0]
{
 8016456:	eeb0 4a40 	vmov.f32	s8, s0
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801645a:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801645e:	ed9f 5ab8 	vldr	s10, [pc, #736]	; 8016740 <tDiodeFilter_tickEfficient+0x2ec>
 8016462:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8016744 <tDiodeFilter_tickEfficient+0x2f0>
 8016466:	eef0 1a45 	vmov.f32	s3, s10
{
 801646a:	ed2d 8b08 	vpush	{d8-d11}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801646e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016472:	eef2 8a0e 	vmov.f32	s17, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016476:	ed93 0a03 	vldr	s0, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801647a:	eef0 9a45 	vmov.f32	s19, s10
    float ih = 0.5f * (in + f->zi);
 801647e:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016482:	eeb0 9a67 	vmov.f32	s18, s15
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016486:	ee67 6a40 	vnmul.f32	s13, s14, s0
 801648a:	edd3 5a08 	vldr	s11, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 801648e:	ee74 4a24 	vadd.f32	s9, s8, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016492:	ed9f 8aad 	vldr	s16, [pc, #692]	; 8016748 <tDiodeFilter_tickEfficient+0x2f4>
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8016496:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 801649a:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801649e:	eee4 6a82 	vfma.f32	s13, s9, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80164a2:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80164a6:	eeb0 2a67 	vmov.f32	s4, s15
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80164aa:	edd3 2a02 	vldr	s5, [r3, #8]
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80164ae:	ee33 6ac3 	vsub.f32	s12, s7, s6
 80164b2:	ee62 0a81 	vmul.f32	s1, s5, s2
 80164b6:	ee26 6a01 	vmul.f32	s12, s12, s2
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80164ba:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80164be:	ee62 5aa5 	vmul.f32	s11, s5, s11
    float a = x*x;
 80164c2:	ee26 6a06 	vmul.f32	s12, s12, s12
 80164c6:	ee66 6aa6 	vmul.f32	s13, s13, s13
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80164ca:	eee6 1aa8 	vfma.f32	s3, s13, s17
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80164ce:	ee76 4a88 	vadd.f32	s9, s13, s16
 80164d2:	eea6 2aa4 	vfma.f32	s4, s13, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80164d6:	eef0 4a67 	vmov.f32	s9, s15
 80164da:	eee6 4aa1 	vfma.f32	s9, s13, s3
 80164de:	eef0 6a45 	vmov.f32	s13, s10
 80164e2:	eee6 6a28 	vfma.f32	s13, s12, s17
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80164e6:	eec2 1a24 	vdiv.f32	s3, s4, s9
 80164ea:	ee76 4a08 	vadd.f32	s9, s12, s16
 80164ee:	eeb0 2a67 	vmov.f32	s4, s15
 80164f2:	eea6 2a24 	vfma.f32	s4, s12, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80164f6:	eef0 4a67 	vmov.f32	s9, s15
 80164fa:	eee6 4a26 	vfma.f32	s9, s12, s13
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80164fe:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8016502:	ee62 2a86 	vmul.f32	s5, s5, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016506:	ee61 1aa5 	vmul.f32	s3, s3, s11
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801650a:	ee27 6a06 	vmul.f32	s12, s14, s12
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801650e:	eec2 6a24 	vdiv.f32	s13, s4, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8016512:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 8016516:	ee34 2ae3 	vsub.f32	s4, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 801651a:	ee77 5a64 	vsub.f32	s11, s14, s9
    float a = x*x;
 801651e:	ee26 6a06 	vmul.f32	s12, s12, s12
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8016522:	ee22 2a01 	vmul.f32	s4, s4, s2
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8016526:	ee65 5a81 	vmul.f32	s11, s11, s2
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801652a:	eeb0 1a45 	vmov.f32	s2, s10
    float a = x*x;
 801652e:	ee22 2a02 	vmul.f32	s4, s4, s4
 8016532:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016536:	eee6 9a28 	vfma.f32	s19, s12, s17
 801653a:	eea2 1a28 	vfma.f32	s2, s4, s17
 801653e:	eea5 5aa8 	vfma.f32	s10, s11, s17
 8016542:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8016546:	ee66 6aa0 	vmul.f32	s13, s13, s1
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801654a:	eea2 9a01 	vfma.f32	s18, s4, s2
 801654e:	eeb0 1a67 	vmov.f32	s2, s15
 8016552:	eee5 8a85 	vfma.f32	s17, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016556:	ee36 5a08 	vadd.f32	s10, s12, s16
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801655a:	eea9 1a86 	vfma.f32	s2, s19, s12
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801655e:	eef0 9a67 	vmov.f32	s19, s15
 8016562:	eee6 9a05 	vfma.f32	s19, s12, s10
 8016566:	ee32 6a08 	vadd.f32	s12, s4, s16
 801656a:	ee89 5a81 	vdiv.f32	s10, s19, s2
 801656e:	eef0 9a67 	vmov.f32	s19, s15
 8016572:	ee37 1a23 	vadd.f32	s2, s14, s7
 8016576:	eee2 9a06 	vfma.f32	s19, s4, s12
 801657a:	ee35 6a88 	vadd.f32	s12, s11, s16

    // This formula gives the result for y3 thanks to MATLAB
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801657e:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016582:	eee5 7a86 	vfma.f32	s15, s11, s12
 8016586:	ee89 6a89 	vdiv.f32	s12, s19, s18
 801658a:	eec7 5aa8 	vdiv.f32	s11, s15, s17
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801658e:	ee25 5a22 	vmul.f32	s10, s10, s5
 8016592:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016596:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
 801659a:	ee35 aa02 	vadd.f32	s20, s10, s4
 801659e:	eef0 aa68 	vmov.f32	s21, s17
 80165a2:	ee35 ba29 	vadd.f32	s22, s10, s19
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80165a6:	ee66 7a20 	vmul.f32	s15, s12, s1
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80165aa:	ee33 6a24 	vadd.f32	s12, s6, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80165ae:	eea0 ba21 	vfma.f32	s22, s0, s3
 80165b2:	eee5 aa28 	vfma.f32	s21, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80165b6:	ee36 6a01 	vadd.f32	s12, s12, s2
 80165ba:	ee34 1a81 	vadd.f32	s2, s9, s2
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80165be:	ee65 5aa0 	vmul.f32	s11, s11, s1
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80165c2:	eea4 6a21 	vfma.f32	s12, s8, s3
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80165c6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80165ca:	eeab aa26 	vfma.f32	s20, s22, s13
 80165ce:	eee5 9a28 	vfma.f32	s19, s10, s17
 80165d2:	ee35 8a20 	vadd.f32	s16, s10, s1
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80165d6:	ee77 2a24 	vadd.f32	s5, s14, s9
 80165da:	eea6 1a26 	vfma.f32	s2, s12, s13
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80165de:	ee28 ba26 	vmul.f32	s22, s16, s13
 80165e2:	eeb0 6a45 	vmov.f32	s12, s10
 80165e6:	eeab 6a28 	vfma.f32	s12, s22, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80165ea:	eeb0 9a41 	vmov.f32	s18, s2
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80165ee:	eeb0 1a6a 	vmov.f32	s2, s21
 80165f2:	eeab 1a02 	vfma.f32	s2, s22, s4
 80165f6:	eea1 6a27 	vfma.f32	s12, s2, s15
 80165fa:	ee35 1a28 	vadd.f32	s2, s10, s17
 80165fe:	eea9 1aa6 	vfma.f32	s2, s19, s13
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016602:	ee67 9a26 	vmul.f32	s19, s14, s13
 8016606:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801660a:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801660e:	eea7 2a28 	vfma.f32	s4, s14, s17
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016612:	eea1 6a25 	vfma.f32	s12, s2, s11
 8016616:	eeb0 1a47 	vmov.f32	s2, s14
 801661a:	eea9 1aa8 	vfma.f32	s2, s19, s17
 801661e:	eea2 1a27 	vfma.f32	s2, s4, s15
 8016622:	ee32 2aa2 	vadd.f32	s4, s5, s5
 8016626:	eee6 2a82 	vfma.f32	s5, s13, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801662a:	eeb0 2a41 	vmov.f32	s4, s2
 801662e:	eee9 2a27 	vfma.f32	s5, s18, s15
 8016632:	eea2 2aa5 	vfma.f32	s4, s5, s11
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 8016636:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
 801663a:	eeb4 6a62 	vcmp.f32	s12, s5
 801663e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8016642:	eef5 6a40 	vcmp.f32	s13, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016646:	bf14      	ite	ne
 8016648:	ee36 6a20 	vaddne.f32	s12, s12, s1
        tempy3denom = 0.000001f;
 801664c:	ed9f 6a3f 	vldreq	s12, [pc, #252]	; 801674c <tDiodeFilter_tickEfficient+0x2f8>
    if (t1 == 0.0f)
 8016650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8016654:	ee82 1a06 	vdiv.f32	s2, s4, s12
    if (t1 == 0.0f)
 8016658:	d063      	beq.n	8016722 <tDiodeFilter_tickEfficient+0x2ce>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 801665a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801665e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016666:	ee76 0aa0 	vadd.f32	s1, s13, s1
 801666a:	d063      	beq.n	8016734 <tDiodeFilter_tickEfficient+0x2e0>
 801666c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8016670:	ee77 2aa2 	vadd.f32	s5, s15, s5
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8016674:	eef5 5a40 	vcmp.f32	s11, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
 8016678:	ed83 4a07 	vstr	s8, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 801667c:	eef0 8a47 	vmov.f32	s17, s14
    float xx = (in - f->r*y3);
 8016680:	ee20 0a01 	vmul.f32	s0, s0, s2
    if (t3 == 0.0f)
 8016684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8016688:	ee77 0aa0 	vadd.f32	s1, s15, s1
    float xx = (in - f->r*y3);
 801668c:	ee34 2a40 	vsub.f32	s4, s8, s0
        t3 = 0.000001f;
 8016690:	bf08      	it	eq
 8016692:	eddf 5a2e 	vldreq	s11, [pc, #184]	; 801674c <tDiodeFilter_tickEfficient+0x2f8>
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8016696:	ee38 6a25 	vadd.f32	s12, s16, s11
 801669a:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 801669e:	ee75 2aa2 	vadd.f32	s5, s11, s5
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80166a2:	eed6 8a01 	vfnms.f32	s17, s12, s2
 80166a6:	eea5 8a81 	vfma.f32	s16, s11, s2
 80166aa:	ee88 6aa5 	vdiv.f32	s12, s17, s11
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80166ae:	eeb0 4a48 	vmov.f32	s8, s16
 80166b2:	eeb0 8a63 	vmov.f32	s16, s7
 80166b6:	ee92 4a86 	vfnms.f32	s8, s5, s12
 80166ba:	eea7 8a86 	vfma.f32	s16, s15, s12
 80166be:	eec4 2a27 	vdiv.f32	s5, s8, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80166c2:	ee90 8aa2 	vfnms.f32	s16, s1, s5
 80166c6:	ee88 4a26 	vdiv.f32	s8, s16, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80166ca:	ee32 4ac4 	vsub.f32	s8, s5, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80166ce:	ee76 2a62 	vsub.f32	s5, s12, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80166d2:	ee31 6a46 	vsub.f32	s12, s2, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80166d6:	ee64 6a26 	vmul.f32	s13, s8, s13
 80166da:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80166de:	ee26 6a25 	vmul.f32	s12, s12, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80166e2:	eef0 0a66 	vmov.f32	s1, s13
 80166e6:	eed2 6aa7 	vfnms.f32	s13, s5, s15
 80166ea:	eef0 5a46 	vmov.f32	s11, s12
 80166ee:	eee1 0a82 	vfma.f32	s1, s3, s4
 80166f2:	eea5 6a01 	vfma.f32	s12, s10, s2
 80166f6:	eee2 5ae7 	vfms.f32	s11, s5, s15
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80166fa:	eee6 3a84 	vfma.f32	s7, s13, s8
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80166fe:	eea0 3a84 	vfma.f32	s6, s1, s8
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8016702:	eea6 7a44 	vfms.f32	s14, s12, s8
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8016706:	eee5 4a84 	vfma.f32	s9, s11, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801670a:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 801670e:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8016712:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8016716:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    return LEAF_tanh(y3*f->r);
}
 801671a:	ecbd 8b08 	vpop	{d8-d11}
    return LEAF_tanh(y3*f->r);
 801671e:	f000 bad1 	b.w	8016cc4 <LEAF_tanh>
    if (t2 == 0.0f)
 8016722:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016726:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8016750 <tDiodeFilter_tickEfficient+0x2fc>
        t1 = 0.000001f;
 801672a:	eddf 6a08 	vldr	s13, [pc, #32]	; 801674c <tDiodeFilter_tickEfficient+0x2f8>
    if (t2 == 0.0f)
 801672e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016732:	d19b      	bne.n	801666c <tDiodeFilter_tickEfficient+0x218>
 8016734:	eddf 2a06 	vldr	s5, [pc, #24]	; 8016750 <tDiodeFilter_tickEfficient+0x2fc>
        t2 = 0.000001f;
 8016738:	eddf 7a04 	vldr	s15, [pc, #16]	; 801674c <tDiodeFilter_tickEfficient+0x2f8>
 801673c:	e79a      	b.n	8016674 <tDiodeFilter_tickEfficient+0x220>
 801673e:	bf00      	nop
 8016740:	43d20000 	.word	0x43d20000
 8016744:	446c4000 	.word	0x446c4000
 8016748:	42d20000 	.word	0x42d20000
 801674c:	358637bd 	.word	0x358637bd
 8016750:	3f800008 	.word	0x3f800008

08016754 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, float cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
 8016754:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016758:	4b0d      	ldr	r3, [pc, #52]	; (8016790 <tDiodeFilter_setFreqFast+0x3c>)
 801675a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tDiodeFilter* f = *vf;
 801675e:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 8016760:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 8016764:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016768:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801676c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8016770:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016774:	edd0 6a01 	vldr	s13, [r0, #4]
 8016778:	ee77 7a87 	vadd.f32	s15, s15, s14
 801677c:	ed90 7a00 	vldr	s14, [r0]
 8016780:	ee20 0a26 	vmul.f32	s0, s0, s13
 8016784:	eea7 0a27 	vfma.f32	s0, s14, s15
 8016788:	ed81 0a02 	vstr	s0, [r1, #8]
}
 801678c:	4770      	bx	lr
 801678e:	bf00      	nop
 8016790:	0801f8f4 	.word	0x0801f8f4

08016794 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, float resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8016794:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016798:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 801679c:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 80167a0:	eef0 0a67 	vmov.f32	s1, s15
{
 80167a4:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 80167a6:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 80167a8:	eee0 0a07 	vfma.f32	s1, s0, s14
 80167ac:	eeb0 0a67 	vmov.f32	s0, s15
 80167b0:	f000 fa74 	bl	8016c9c <LEAF_clip>
 80167b4:	ed84 0a03 	vstr	s0, [r4, #12]
}
 80167b8:	bd10      	pop	{r4, pc}
 80167ba:	bf00      	nop

080167bc <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 80167bc:	b570      	push	{r4, r5, r6, lr}
 80167be:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 80167c2:	698d      	ldr	r5, [r1, #24]
{
 80167c4:	eef0 8a40 	vmov.f32	s17, s0
 80167c8:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80167ca:	2038      	movs	r0, #56	; 0x38
 80167cc:	4629      	mov	r1, r5
{
 80167ce:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80167d2:	f000 fc3b 	bl	801704c <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 80167d6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8016838 <tLadderFilter_init+0x7c>
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80167da:	6030      	str	r0, [r6, #0]
    f->oversampling = 1;
 80167dc:	2301      	movs	r3, #1
    f->mempool = m;
 80167de:	6005      	str	r5, [r0, #0]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 80167e0:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
 80167e4:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80167e6:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 80167e8:	ed92 7a01 	vldr	s14, [r2, #4]
    f->cutoff = cutoff;
 80167ec:	edc0 8a01 	vstr	s17, [r0, #4]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 80167f0:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->oversampling = 1;
 80167f4:	60c3      	str	r3, [r0, #12]
    f->invSampleRate = leaf->invSampleRate;
 80167f6:	ed80 7a02 	vstr	s14, [r0, #8]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 80167fa:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80167fe:	f007 f973 	bl	801dae8 <tan>
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 8016802:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8016806:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 801680a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 801680e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 8016812:	490a      	ldr	r1, [pc, #40]	; (801683c <tLadderFilter_init+0x80>)
    f->fb = (resonance * 8.0f);
 8016814:	ee28 8a07 	vmul.f32	s16, s16, s14
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 8016818:	4b09      	ldr	r3, [pc, #36]	; (8016840 <tLadderFilter_init+0x84>)
    f->c2 = 2.0f * f->c;
 801681a:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 801681e:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
 8016822:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
 8016824:	6221      	str	r1, [r4, #32]
    f->d = 1.0f;
 8016826:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
 8016828:	edc4 7a06 	vstr	s15, [r4, #24]
    f->fb = (resonance * 8.0f);
 801682c:	ed84 8a05 	vstr	s16, [r4, #20]
    f->b[0] = 0.04f;
 8016830:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8016832:	ecbd 8b02 	vpop	{d8}
 8016836:	bd70      	pop	{r4, r5, r6, pc}
 8016838:	40490fdb 	.word	0x40490fdb
 801683c:	3dcccccd 	.word	0x3dcccccd
 8016840:	3d23d70a 	.word	0x3d23d70a

08016844 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

float   tLadderFilter_tick               (tLadderFilter* const vf, float in)
{
    _tLadderFilter* f = *vf;
 8016844:	6802      	ldr	r2, [r0, #0]
    
    float y3 = 0.0f;
    in += 0.015f;
 8016846:	eddf 7a90 	vldr	s15, [pc, #576]	; 8016a88 <tLadderFilter_tick+0x244>
{
 801684a:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 801684e:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
 8016850:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
 8016854:	2900      	cmp	r1, #0
 8016856:	f340 8112 	ble.w	8016a7e <tLadderFilter_tick+0x23a>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801685a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        float g0 = 1.0f / (1.0f + f->c*t0);
 801685e:	ed92 5a04 	vldr	s10, [r2, #16]
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8016862:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    float  x2 = smoothABS (x-b, 0.01f);
 8016866:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        float z1 = f->c*t1 / (1.0f + f->c*t1);
        float z2 = f->c*t2 / (1.0f + f->c*t2);
        float z3 = f->c*t3 / (1.0f + f->c*t3);
        
        float f3 = f->c       * t2*g3;
        float f2 = f->c*f->c     * t1*g2 * t2*g3;
 801686a:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801686e:	ed92 7a08 	vldr	s14, [r2, #32]
 8016872:	ee72 2a27 	vadd.f32	s5, s4, s15
 8016876:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        float estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
 801687a:	ee65 aa00 	vmul.f32	s21, s10, s0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 801687e:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8016882:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8016886:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        float f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 801688a:	ee25 9a28 	vmul.f32	s18, s10, s17
 801688e:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016892:	ee62 2a87 	vmul.f32	s5, s5, s14
 8016896:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 801689a:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
 801689e:	2300      	movs	r3, #0
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 80168a0:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80168a4:	ed9f 8a79 	vldr	s16, [pc, #484]	; 8016a8c <tLadderFilter_tick+0x248>
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 80168a8:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
 80168ac:	3301      	adds	r3, #1
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 80168ae:	ee31 6a23 	vadd.f32	s12, s2, s7
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 80168b2:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
 80168b6:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80168b8:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80168bc:	ee26 6a06 	vmul.f32	s12, s12, s12
 80168c0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80168c4:	ee22 baa5 	vmul.f32	s22, s5, s11
 80168c8:	ee26 ca22 	vmul.f32	s24, s12, s5
 80168cc:	ee72 5a25 	vadd.f32	s11, s4, s11
 80168d0:	ee32 6a06 	vadd.f32	s12, s4, s12
 80168d4:	ee66 baa2 	vmul.f32	s23, s13, s5
 80168d8:	eecb ea25 	vdiv.f32	s29, s22, s11
 80168dc:	eecc 5a06 	vdiv.f32	s11, s24, s12
 80168e0:	ee72 6a26 	vadd.f32	s13, s4, s13
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 80168e4:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80168e8:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
 80168ec:	ee27 7a07 	vmul.f32	s14, s14, s14
 80168f0:	ee77 eaee 	vsub.f32	s29, s15, s29
 80168f4:	ee77 6ae5 	vsub.f32	s13, s15, s11
 80168f8:	ee22 ba87 	vmul.f32	s22, s5, s14
 80168fc:	ee32 7a07 	vadd.f32	s14, s4, s14
        float g0 = 1.0f / (1.0f + f->c*t0);
 8016900:	ee65 5a2e 	vmul.f32	s11, s10, s29
        float g1 = 1.0f / (1.0f + f->c*t1);
 8016904:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016908:	eecb ca07 	vdiv.f32	s25, s22, s14
        float g1 = 1.0f / (1.0f + f->c*t1);
 801690c:	ee7e da27 	vadd.f32	s27, s28, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016910:	ee37 7ac6 	vsub.f32	s14, s15, s12
        float g0 = 1.0f / (1.0f + f->c*t0);
 8016914:	ee35 6aa7 	vadd.f32	s12, s11, s15
        float g2 = 1.0f / (1.0f + f->c*t2);
 8016918:	ee25 da07 	vmul.f32	s26, s10, s14
        float z0 = f->c*t0 / (1.0f + f->c*t0);
 801691c:	eec5 ba86 	vdiv.f32	s23, s11, s12
        float z1 = f->c*t1 / (1.0f + f->c*t1);
 8016920:	eece 5a2d 	vdiv.f32	s11, s28, s27
        float g2 = 1.0f / (1.0f + f->c*t2);
 8016924:	ee3d ca27 	vadd.f32	s24, s26, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016928:	ee77 caec 	vsub.f32	s25, s15, s25
        float g0 = 1.0f / (1.0f + f->c*t0);
 801692c:	ee87 fa86 	vdiv.f32	s30, s15, s12
        float z2 = f->c*t2 / (1.0f + f->c*t2);
 8016930:	ee8d ea0c 	vdiv.f32	s28, s26, s24
        float g3 = 1.0f / (1.0f + f->c*t3);
 8016934:	ee25 ba2c 	vmul.f32	s22, s10, s25
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8016938:	ee6b baa5 	vmul.f32	s23, s23, s11
        float g1 = 1.0f / (1.0f + f->c*t1);
 801693c:	ee87 6aad 	vdiv.f32	s12, s15, s27
        float g3 = 1.0f / (1.0f + f->c*t3);
 8016940:	ee7b 5a27 	vadd.f32	s11, s22, s15
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8016944:	ee6b baa0 	vmul.f32	s23, s23, s1
        float g2 = 1.0f / (1.0f + f->c*t2);
 8016948:	eec7 da8c 	vdiv.f32	s27, s15, s24
        float g3 = 1.0f / (1.0f + f->c*t3);
 801694c:	ee87 caa5 	vdiv.f32	s24, s15, s11
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8016950:	ee6b ba8e 	vmul.f32	s23, s23, s28
        float z3 = f->c*t3 / (1.0f + f->c*t3);
 8016954:	ee8b ea25 	vdiv.f32	s28, s22, s11
        float estimate =
 8016958:	ee73 5a2a 	vadd.f32	s11, s6, s21
 801695c:	ee27 ba26 	vmul.f32	s22, s14, s13
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8016960:	ee66 6a26 	vmul.f32	s13, s12, s13
 8016964:	ee65 5a89 	vmul.f32	s11, s11, s18
 8016968:	ee2b ba06 	vmul.f32	s22, s22, s12
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 801696c:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 8016970:	ee65 5aae 	vmul.f32	s11, s11, s29
 8016974:	ee60 ea8c 	vmul.f32	s29, s1, s24
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8016978:	ee2c ca2c 	vmul.f32	s24, s24, s25
 801697c:	ee65 5a8f 	vmul.f32	s11, s11, s30
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8016980:	eef0 ca67 	vmov.f32	s25, s15
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8016984:	ee2d 7a87 	vmul.f32	s14, s27, s14
 8016988:	eee3 5aa8 	vfma.f32	s11, s7, s17
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 801698c:	eeeb ca8e 	vfma.f32	s25, s23, s28
 8016990:	ee6b 5a25 	vmul.f32	s11, s22, s11
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8016994:	eec9 baac 	vdiv.f32	s23, s19, s25
 8016998:	eeed 5a04 	vfma.f32	s11, s26, s8
 801699c:	eef0 ca64 	vmov.f32	s25, s9
    float  x1 = smoothABS (x-a, 0.01f);
 80169a0:	eeb0 ba67 	vmov.f32	s22, s15
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80169a4:	eeb0 da48 	vmov.f32	s26, s16
 80169a8:	eeed caa5 	vfma.f32	s25, s27, s11
    float  x2 = smoothABS (x-b, 0.01f);
 80169ac:	eef0 5a4a 	vmov.f32	s11, s20
    float  x1 = smoothABS (x-a, 0.01f);
 80169b0:	eeac baae 	vfma.f32	s22, s25, s29
    float  x2 = smoothABS (x-b, 0.01f);
 80169b4:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80169b8:	eef0 ca48 	vmov.f32	s25, s16
 80169bc:	eeab da0b 	vfma.f32	s26, s22, s22
 80169c0:	eee5 caa5 	vfma.f32	s25, s11, s11
 80169c4:	eef1 5acd 	vsqrt.f32	s11, s26
 80169c8:	eeb1 baec 	vsqrt.f32	s22, s25
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 80169cc:	ee3b ba65 	vsub.f32	s22, s22, s11
 80169d0:	eef0 5a40 	vmov.f32	s11, s0
 80169d4:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 80169d8:	eeb0 ba43 	vmov.f32	s22, s6
 80169dc:	eea5 ba25 	vfma.f32	s22, s10, s11
 80169e0:	ee26 6a0b 	vmul.f32	s12, s12, s22
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 80169e4:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
 80169e8:	ee75 5ac6 	vsub.f32	s11, s11, s12
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 80169ec:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
 80169f0:	eea1 3aa5 	vfma.f32	s6, s3, s11
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80169f4:	eef0 5a44 	vmov.f32	s11, s8
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 80169f8:	ee66 6a8b 	vmul.f32	s13, s13, s22
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80169fc:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
 8016a00:	ee36 6a66 	vsub.f32	s12, s12, s13
 8016a04:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8016a08:	eeb0 6a64 	vmov.f32	s12, s9
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8016a0c:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8016a10:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
 8016a14:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8016a18:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8016a1c:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
 8016a20:	ee37 7a4c 	vsub.f32	s14, s14, s24
 8016a24:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
 8016a28:	f47f af3e 	bne.w	80168a8 <tLadderFilter_tick+0x64>
 8016a2c:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
 8016a30:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
 8016a34:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
 8016a38:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016a3c:	eddf 7a13 	vldr	s15, [pc, #76]	; 8016a8c <tLadderFilter_tick+0x248>
    float  x2 = smoothABS (x-b, 0.01f);
 8016a40:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8016a44:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016a48:	eeb0 5a67 	vmov.f32	s10, s15
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8016a4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016a50:	eea0 5aa0 	vfma.f32	s10, s1, s1
    float  x2 = smoothABS (x-b, 0.01f);
 8016a54:	ee70 0ac6 	vsub.f32	s1, s1, s12
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016a58:	eee0 7aa0 	vfma.f32	s15, s1, s1
 8016a5c:	eeb0 7a67 	vmov.f32	s14, s15
 8016a60:	eef1 7ac5 	vsqrt.f32	s15, s10
 8016a64:	eeb1 5ac7 	vsqrt.f32	s10, s14
    x = x - x2;
 8016a68:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016a6c:	ee77 7ac5 	vsub.f32	s15, s15, s10
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8016a70:	eea7 0aa5 	vfma.f32	s0, s15, s11
    return y3 * compensation;
}
 8016a74:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8016a78:	ecbd 8b10 	vpop	{d8-d15}
 8016a7c:	4770      	bx	lr
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8016a7e:	edd2 0a05 	vldr	s1, [r2, #20]
    float y3 = 0.0f;
 8016a82:	ed9f ca03 	vldr	s24, [pc, #12]	; 8016a90 <tLadderFilter_tick+0x24c>
 8016a86:	e7d9      	b.n	8016a3c <tLadderFilter_tick+0x1f8>
 8016a88:	3c75c28f 	.word	0x3c75c28f
 8016a8c:	3c23d70a 	.word	0x3c23d70a
 8016a90:	00000000 	.word	0x00000000

08016a94 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, float cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
 8016a94:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016a98:	4b0f      	ldr	r3, [pc, #60]	; (8016ad8 <tLadderFilter_setFreqFast+0x44>)
 8016a9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
 8016a9e:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 8016aa0:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 8016aa4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016aa8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016aac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8016ab0:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016ab4:	edd0 6a01 	vldr	s13, [r0, #4]
 8016ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016abc:	ed90 7a00 	vldr	s14, [r0]
 8016ac0:	ee20 0a26 	vmul.f32	s0, s0, s13
 8016ac4:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
 8016ac8:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016acc:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
 8016ad0:	edc1 7a06 	vstr	s15, [r1, #24]
}
 8016ad4:	4770      	bx	lr
 8016ad6:	bf00      	nop
 8016ad8:	0801f8f4 	.word	0x0801f8f4

08016adc <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, float resonance)
{
 8016adc:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 8016ade:	6804      	ldr	r4, [r0, #0]
{
 8016ae0:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 8016ae4:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8016ae8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016af8 <tLadderFilter_setQ+0x1c>
 8016aec:	f000 f8d6 	bl	8016c9c <LEAF_clip>
 8016af0:	ed84 0a05 	vstr	s0, [r4, #20]
}
 8016af4:	bd10      	pop	{r4, pc}
 8016af6:	bf00      	nop
 8016af8:	3e4ccccd 	.word	0x3e4ccccd

08016afc <fastertanf>:
    return fResult;
}

float fastertanf(float fAngle)
{
    float fASqr = fAngle*fAngle;
 8016afc:	ee60 6a00 	vmul.f32	s13, s0, s0
    float fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 8016b00:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8016b1c <fastertanf+0x20>
 8016b04:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8016b20 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 8016b08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 8016b0c:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 8016b10:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 8016b14:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016b18:	4770      	bx	lr
 8016b1a:	bf00      	nop
 8016b1c:	3e502de0 	.word	0x3e502de0
 8016b20:	3ea295ea 	.word	0x3ea295ea

08016b24 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8016b24:	ee10 2a10 	vmov	r2, s0
 8016b28:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 8016b2c:	4b0d      	ldr	r3, [pc, #52]	; (8016b64 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8016b2e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8016b32:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8016b36:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016b3a:	ee00 3a10 	vmov	s0, r3
 8016b3e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016b42:	eea0 7a67 	vfms.f32	s14, s0, s15
 8016b46:	ee60 7a07 	vmul.f32	s15, s0, s14
 8016b4a:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 8016b4e:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8016b52:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8016b56:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8016b5a:	336e      	adds	r3, #110	; 0x6e
}
 8016b5c:	ee00 3a10 	vmov	s0, r3
 8016b60:	4770      	bx	lr
 8016b62:	bf00      	nop
 8016b64:	5f3759df 	.word	0x5f3759df

08016b68 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 8016b68:	ee10 3a10 	vmov	r3, s0
 8016b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016b70:	ee00 3a10 	vmov	s0, r3
}
 8016b74:	4770      	bx	lr
 8016b76:	bf00      	nop

08016b78 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline float fasterexpf(float x) {
    x = 1.0f + (x * 0.00390625f);
 8016b78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016b7c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8016ba8 <fasterexpf+0x30>
 8016b80:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8016b84:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8016b88:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016b8c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016b90:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8016b94:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016b98:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016b9c:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 8016ba0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop
 8016ba8:	3b800000 	.word	0x3b800000

08016bac <fastPowf>:
    { 
        float d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 8016bac:	ee10 3a10 	vmov	r3, s0
 8016bb0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8016bd4 <fastPowf+0x28>
 8016bb4:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8016bb8:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 8016bbc:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8016bc0:	330b      	adds	r3, #11
 8016bc2:	ee07 3a90 	vmov	s15, r3
 8016bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016bca:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 8016bce:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 8016bd2:	4770      	bx	lr
 8016bd4:	4e7de250 	.word	0x4e7de250

08016bd8 <LEAF_shaper>:
    if (min > max)
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
 8016bd8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8016c54 <LEAF_shaper+0x7c>
 8016bdc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016be4:	d406      	bmi.n	8016bf4 <LEAF_shaper+0x1c>
    {
        return tempmin;
    }
    else if (val > tempmax)
 8016be6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8016c58 <LEAF_shaper+0x80>
 8016bea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf2:	dd02      	ble.n	8016bfa <LEAF_shaper+0x22>
 8016bf4:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8016c5c <LEAF_shaper+0x84>
}
 8016bf8:	4770      	bx	lr
    float fx = input * 2.0f;    // prescale
 8016bfa:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8016bfe:	eddf 4a18 	vldr	s9, [pc, #96]	; 8016c60 <LEAF_shaper+0x88>
 8016c02:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8016c06:	eddf 3a17 	vldr	s7, [pc, #92]	; 8016c64 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
 8016c0a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    xc2 = xc*xc;
 8016c0e:	ee20 6a00 	vmul.f32	s12, s0, s0
    c = 0.5f*fx*(3.0f - (xc2));
 8016c12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8016c16:	eeb6 5a08 	vmov.f32	s10, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8016c1a:	ee26 4a06 	vmul.f32	s8, s12, s12
 8016c1e:	ee66 6ac6 	vnmul.f32	s13, s13, s12
    c = 0.5f*fx*(3.0f - (xc2));
 8016c22:	ee37 7a46 	vsub.f32	s14, s14, s12
 8016c26:	ee60 7a27 	vmul.f32	s15, s0, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8016c2a:	eee4 6a24 	vfma.f32	s13, s8, s9
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8016c2e:	ee70 0a85 	vadd.f32	s1, s1, s10
 8016c32:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 8016c68 <LEAF_shaper+0x90>
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8016c36:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
 8016c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c3e:	ee20 0aa3 	vmul.f32	s0, s1, s7
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8016c42:	eee6 7a05 	vfma.f32	s15, s12, s10
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8016c46:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8016c4a:	ee20 0a07 	vmul.f32	s0, s0, s14
    shaperOut *= 0.5f;    // post_scale
 8016c4e:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return tempmax;
    }
    else
    {
        return val;
 8016c52:	4770      	bx	lr
 8016c54:	bfb504f3 	.word	0xbfb504f3
 8016c58:	3fb504f3 	.word	0x3fb504f3
 8016c5c:	00000000 	.word	0x00000000
 8016c60:	3c800000 	.word	0x3c800000
 8016c64:	3f272f05 	.word	0x3f272f05
 8016c68:	3d4ccccd 	.word	0x3d4ccccd

08016c6c <LEAF_round>:
    rnd = fabsf(rnd);
 8016c6c:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 8016c70:	eddf 7a06 	vldr	s15, [pc, #24]	; 8016c8c <LEAF_round+0x20>
 8016c74:	eef4 0ae7 	vcmpe.f32	s1, s15
 8016c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c7c:	d905      	bls.n	8016c8a <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
 8016c7e:	eec0 7a20 	vdiv.f32	s15, s0, s1
 8016c82:	fef8 7a67 	vrinta.f32	s15, s15
 8016c86:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
 8016c8a:	4770      	bx	lr
 8016c8c:	33d6bf95 	.word	0x33d6bf95

08016c90 <LEAF_bitwise_xor>:
    return unholy.f;
 8016c90:	ee10 3a10 	vmov	r3, s0
 8016c94:	4043      	eors	r3, r0
 8016c96:	ee00 3a10 	vmov	s0, r3
}
 8016c9a:	4770      	bx	lr

08016c9c <LEAF_clip>:
    if (min > max)
 8016c9c:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8016ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ca4:	dd05      	ble.n	8016cb2 <LEAF_clip+0x16>
 8016ca6:	eef0 7a40 	vmov.f32	s15, s0
        tempmin = max;
 8016caa:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 8016cae:	eeb0 1a67 	vmov.f32	s2, s15
    if (val < tempmin)
 8016cb2:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8016cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cba:	dc01      	bgt.n	8016cc0 <LEAF_clip+0x24>
    else if (val > tempmax)
 8016cbc:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
}
 8016cc0:	4770      	bx	lr
 8016cc2:	bf00      	nop

08016cc4 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
 8016cc4:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8016cc8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cd0:	d418      	bmi.n	8016d04 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 8016cd2:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8016cd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cde:	dd02      	ble.n	8016ce6 <LEAF_tanh+0x22>
        return 1.0f;
 8016ce0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
 8016ce4:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 8016ce6:	ee60 6a00 	vmul.f32	s13, s0, s0
 8016cea:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 8016cee:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 8016cf2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8016cf6:	eee6 7a86 	vfma.f32	s15, s13, s12
 8016cfa:	ee27 7a00 	vmul.f32	s14, s14, s0
 8016cfe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016d02:	4770      	bx	lr
        return -1.0f;
 8016d04:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016d08:	4770      	bx	lr
 8016d0a:	bf00      	nop

08016d0c <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
 8016d0c:	b538      	push	{r3, r4, r5, lr}
    float increment = (end - start) / (float)(size-1);
 8016d0e:	1e4b      	subs	r3, r1, #1
 8016d10:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
 8016d14:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)(size-1);
 8016d16:	ee07 3a90 	vmov	s15, r3
 8016d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8016d1e:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)(size-1);
 8016d22:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 8016d26:	dd16      	ble.n	8016d56 <LEAF_generate_exp+0x4a>
 8016d28:	4604      	mov	r4, r0
 8016d2a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8016d2e:	eeb0 8a60 	vmov.f32	s16, s1
 8016d32:	eef0 8a40 	vmov.f32	s17, s0
 8016d36:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 8016d3a:	eef0 0a48 	vmov.f32	s1, s16
 8016d3e:	eeb0 0a68 	vmov.f32	s0, s17
 8016d42:	f006 fbc1 	bl	801d4c8 <powf>
 8016d46:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 8016d4a:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 8016d4e:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8016d52:	42a5      	cmp	r5, r4
 8016d54:	d1f1      	bne.n	8016d3a <LEAF_generate_exp+0x2e>
    }
}
 8016d56:	ecbd 8b04 	vpop	{d8-d9}
 8016d5a:	bd38      	pop	{r3, r4, r5, pc}

08016d5c <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(float* buffer, float start, float end, float center, int size)
{
 8016d5c:	b538      	push	{r3, r4, r5, lr}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 8016d5e:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 8016d62:	460d      	mov	r5, r1
 8016d64:	4604      	mov	r4, r0
 8016d66:	ed2d 8b06 	vpush	{d8-d10}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 8016d6a:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
 8016d6e:	eef0 8a40 	vmov.f32	s17, s0
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 8016d72:	ee81 0a29 	vdiv.f32	s0, s2, s19
 8016d76:	f006 f9a1 	bl	801d0bc <logf>
    float increment = 1.0 / (float)(size-1);
 8016d7a:	1e6b      	subs	r3, r5, #1
    float x = 0.0;
    float proportion = 0.0;
    for (int i = 0; i < size; i++)
 8016d7c:	2d00      	cmp	r5, #0
    float increment = 1.0 / (float)(size-1);
 8016d7e:	ee07 3a90 	vmov	s15, r3
 8016d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d8a:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 8016d8e:	dd19      	ble.n	8016dc4 <LEAF_generate_table_skew_non_sym+0x68>
 8016d90:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016dcc <LEAF_generate_table_skew_non_sym+0x70>
 8016d94:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    float x = 0.0;
 8016d98:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8016dd0 <LEAF_generate_table_skew_non_sym+0x74>
 8016d9c:	ee20 9a27 	vmul.f32	s18, s0, s15
    {
        proportion = expf (logf(x) / skew);
 8016da0:	eeb0 0a48 	vmov.f32	s0, s16
 8016da4:	f006 f98a 	bl	801d0bc <logf>
 8016da8:	ee20 0a09 	vmul.f32	s0, s0, s18
 8016dac:	f006 f912 	bl	801cfd4 <expf>
        buffer[i] = (float)(start + (end - start) * proportion);
 8016db0:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 8016db4:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (float)(start + (end - start) * proportion);
 8016db8:	eee9 7a80 	vfma.f32	s15, s19, s0
 8016dbc:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8016dc0:	42a5      	cmp	r5, r4
 8016dc2:	d1ed      	bne.n	8016da0 <LEAF_generate_table_skew_non_sym+0x44>
    }
}
 8016dc4:	ecbd 8b06 	vpop	{d8-d10}
 8016dc8:	bd38      	pop	{r3, r4, r5, pc}
 8016dca:	bf00      	nop
 8016dcc:	bfb8aa3b 	.word	0xbfb8aa3b
 8016dd0:	00000000 	.word	0x00000000

08016dd4 <LEAF_generate_mtof>:
    }
}


void LEAF_generate_mtof(float* buffer, float startMIDI, float endMIDI, int size)
{
 8016dd4:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
 8016dd6:	1e4b      	subs	r3, r1, #1
 8016dd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    float scalar = (endMIDI-startMIDI);
    for (int i = 0; i < size; i++)
 8016ddc:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
 8016dde:	ee07 3a90 	vmov	s15, r3
 8016de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8016de6:	ed2d 8b0a 	vpush	{d8-d12}
    float increment = 1.0f / (float)(size-1);
 8016dea:	eec7 aa27 	vdiv.f32	s21, s14, s15
    float scalar = (endMIDI-startMIDI);
 8016dee:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
 8016df2:	dd29      	ble.n	8016e48 <LEAF_generate_mtof+0x74>
    float x = 0.0f;
 8016df4:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8016e5c <LEAF_generate_mtof+0x88>
 8016df8:	eef0 9a40 	vmov.f32	s19, s0
 8016dfc:	4604      	mov	r4, r0

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
 8016dfe:	eddf 8a18 	vldr	s17, [pc, #96]	; 8016e60 <LEAF_generate_mtof+0x8c>
 8016e02:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
 8016e06:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8016e64 <LEAF_generate_mtof+0x90>
 8016e0a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
 8016e0e:	ed9f ca16 	vldr	s24, [pc, #88]	; 8016e68 <LEAF_generate_mtof+0x94>
 8016e12:	eddf ba16 	vldr	s23, [pc, #88]	; 8016e6c <LEAF_generate_mtof+0x98>
        float midiVal = (x * scalar) + startMIDI;
 8016e16:	eeb0 0a69 	vmov.f32	s0, s19
 8016e1a:	eeaa 0a09 	vfma.f32	s0, s20, s18
float mtof(float f)
 8016e1e:	e006      	b.n	8016e2e <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8016e20:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8016e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e28:	dd11      	ble.n	8016e4e <LEAF_generate_mtof+0x7a>
 8016e2a:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
 8016e2e:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8016e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e36:	d8f3      	bhi.n	8016e20 <LEAF_generate_mtof+0x4c>
 8016e38:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
 8016e3c:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8016e40:	42ac      	cmp	r4, r5
        x += increment;
 8016e42:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
 8016e46:	d1e6      	bne.n	8016e16 <LEAF_generate_mtof+0x42>
}
 8016e48:	ecbd 8b0a 	vpop	{d8-d12}
 8016e4c:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8016e4e:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8016e52:	f006 f8bf 	bl	801cfd4 <expf>
 8016e56:	ee60 7a2b 	vmul.f32	s15, s0, s23
 8016e5a:	e7ef      	b.n	8016e3c <LEAF_generate_mtof+0x68>
 8016e5c:	00000000 	.word	0x00000000
 8016e60:	c4bb8000 	.word	0xc4bb8000
 8016e64:	44bb6000 	.word	0x44bb6000
 8016e68:	3d6c9820 	.word	0x3d6c9820
 8016e6c:	4102d013 	.word	0x4102d013

08016e70 <LEAF_interpolate_hermite_x>:
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8016e70:	ee71 1ac0 	vsub.f32	s3, s3, s0
    float c1 = 0.5f * (yy2 - yy0);
 8016e74:	ee31 6a40 	vsub.f32	s12, s2, s0
 8016e78:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8016e7c:	ee71 1aa0 	vadd.f32	s3, s3, s1
 8016e80:	eef0 5a60 	vmov.f32	s11, s1
 8016e84:	ee30 7ac1 	vsub.f32	s14, s1, s2
 8016e88:	ee31 1ac1 	vsub.f32	s2, s3, s2
 8016e8c:	eed6 5a26 	vfnms.f32	s11, s12, s13
 8016e90:	eea1 7a26 	vfma.f32	s14, s2, s13
    float c2 = y0my1 + c1 - c3;
 8016e94:	ee70 7a25 	vadd.f32	s15, s0, s11
 8016e98:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 8016e9c:	eee7 7a02 	vfma.f32	s15, s14, s4
 8016ea0:	ee67 7a82 	vmul.f32	s15, s15, s4
 8016ea4:	eee6 7a26 	vfma.f32	s15, s12, s13
}
 8016ea8:	eee7 0a82 	vfma.f32	s1, s15, s4
 8016eac:	eeb0 0a60 	vmov.f32	s0, s1
 8016eb0:	4770      	bx	lr
 8016eb2:	bf00      	nop

08016eb4 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 8016eb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016eb8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8016ed8 <LEAF_interpolation_linear+0x24>
 8016ebc:	fe81 1a67 	vminnm.f32	s2, s2, s15
 8016ec0:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    float omAlpha = 1.0f - alpha;
 8016ec4:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 8016ec8:	ee61 0a20 	vmul.f32	s1, s2, s1
}
 8016ecc:	eee7 0a80 	vfma.f32	s1, s15, s0
 8016ed0:	eeb0 0a60 	vmov.f32	s0, s1
 8016ed4:	4770      	bx	lr
 8016ed6:	bf00      	nop
 8016ed8:	00000000 	.word	0x00000000

08016edc <mtof>:
    if (f <= -1500.0f) return(0);
 8016edc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8016f1c <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8016ee0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8016f20 <mtof+0x44>
 8016ee4:	e006      	b.n	8016ef4 <mtof+0x18>
 8016ee6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eee:	dd09      	ble.n	8016f04 <mtof+0x28>
 8016ef0:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
 8016ef4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016efc:	d8f3      	bhi.n	8016ee6 <mtof+0xa>
 8016efe:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8016f24 <mtof+0x48>
}
 8016f02:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
 8016f04:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016f28 <mtof+0x4c>
{
 8016f08:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8016f0a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016f0e:	f006 f861 	bl	801cfd4 <expf>
 8016f12:	eddf 7a06 	vldr	s15, [pc, #24]	; 8016f2c <mtof+0x50>
 8016f16:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8016f1a:	bd08      	pop	{r3, pc}
 8016f1c:	c4bb8000 	.word	0xc4bb8000
 8016f20:	44bb6000 	.word	0x44bb6000
 8016f24:	00000000 	.word	0x00000000
 8016f28:	3d6c9820 	.word	0x3d6c9820
 8016f2c:	4102d013 	.word	0x4102d013

08016f30 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
 8016f30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016f34:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8016f68 <faster_mtof+0x38>
    return (8.17579891564f * fastexpf(0.0577622650f * f));
}

float faster_mtof(float f)
{
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 8016f38:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8016f6c <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
 8016f3c:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
 8016f40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016f44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016f48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016f4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
 8016f50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016f54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016f58:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 8016f5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 8016f60:	ee27 0a87 	vmul.f32	s0, s15, s14
 8016f64:	4770      	bx	lr
 8016f66:	bf00      	nop
 8016f68:	396c9820 	.word	0x396c9820
 8016f6c:	4102d013 	.word	0x4102d013

08016f70 <fasteratodb>:
float atodb(float a)
{
    return 20.0f*log10f(a);
}
float fasteratodb(float a)
{
 8016f70:	b500      	push	{lr}
 8016f72:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 8016f74:	eeb0 0ac0 	vabs.f32	s0, s0
 8016f78:	a801      	add	r0, sp, #4
 8016f7a:	f006 f805 	bl	801cf88 <frexpf>
    Y += -4.11852516267426f;
 8016f7e:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8016fb8 <fasteratodb+0x48>
 8016f82:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016fbc <fasteratodb+0x4c>
    Y += 6.02197014179219f;
 8016f86:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8016fc0 <fasteratodb+0x50>
    Y += -4.11852516267426f;
 8016f8a:	eee0 7a06 	vfma.f32	s15, s0, s12
    Y += E;
 8016f8e:	eddf 5a0d 	vldr	s11, [pc, #52]	; 8016fc4 <fasteratodb+0x54>
	return 20.0f*log10f_fast(a);
 8016f92:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8016fc8 <fasteratodb+0x58>
    Y += -4.11852516267426f;
 8016f96:	eef0 6a67 	vmov.f32	s13, s15
    Y += E;
 8016f9a:	eddd 7a01 	vldr	s15, [sp, #4]
 8016f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Y += 6.02197014179219f;
 8016fa2:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
 8016fa6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8016faa:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 8016fae:	ee27 0a86 	vmul.f32	s0, s15, s12
 8016fb2:	b003      	add	sp, #12
 8016fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8016fb8:	3f9da1a8 	.word	0x3f9da1a8
 8016fbc:	c083caf5 	.word	0xc083caf5
 8016fc0:	40c0b3fb 	.word	0x40c0b3fb
 8016fc4:	404892e0 	.word	0x404892e0
 8016fc8:	40c0a8c2 	.word	0x40c0a8c2

08016fcc <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 8016fcc:	eddf 7a02 	vldr	s15, [pc, #8]	; 8016fd8 <fastdbtoa+0xc>
 8016fd0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016fd4:	f005 bffe 	b.w	801cfd4 <expf>
 8016fd8:	3debc8e3 	.word	0x3debc8e3

08016fdc <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 8016fdc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016fe0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801700c <fasterdbtoa+0x30>
 8016fe4:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8016fe8:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8016fec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016ff0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016ff4:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8016ff8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016ffc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017000:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 8017004:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017008:	4770      	bx	lr
 801700a:	bf00      	nop
 801700c:	39ebc8e3 	.word	0x39ebc8e3

08017010 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8017010:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8017014:	4770      	bx	lr
 8017016:	bf00      	nop

08017018 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8017018:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 801701c:	4770      	bx	lr
 801701e:	bf00      	nop

08017020 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8017020:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8017022:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8017024:	2510      	movs	r5, #16
    pool->usize  = 0;
 8017026:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8017028:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801702a:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
 801702c:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
 801702e:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8017032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017034:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 8017036:	440b      	add	r3, r1
 8017038:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 801703a:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 801703e:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8017040:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 8017044:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8017046:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 8017048:	6183      	str	r3, [r0, #24]
}
 801704a:	4770      	bx	lr

0801704c <mpool_alloc>:
{
 801704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 801704e:	684a      	ldr	r2, [r1, #4]
{
 8017050:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8017052:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8017054:	3301      	adds	r3, #1
 8017056:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8017058:	694b      	ldr	r3, [r1, #20]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d04a      	beq.n	80170f4 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 801705e:	1dc4      	adds	r4, r0, #7
 8017060:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8017064:	e002      	b.n	801706c <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8017066:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8017068:	2b00      	cmp	r3, #0
 801706a:	d043      	beq.n	80170f4 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 801706c:	68da      	ldr	r2, [r3, #12]
 801706e:	42a2      	cmp	r2, r4
 8017070:	d3f9      	bcc.n	8017066 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8017072:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8017074:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8017076:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801707a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801707c:	4281      	cmp	r1, r0
 801707e:	d246      	bcs.n	801710e <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8017080:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8017084:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8017086:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8017088:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 801708a:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 801708c:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 801708e:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8017092:	4429      	add	r1, r5
 8017094:	5111      	str	r1, [r2, r4]
    node->size = size;
 8017096:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8017098:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 801709c:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80170a0:	429a      	cmp	r2, r3
        pool->head = new_node;
 80170a2:	bf08      	it	eq
 80170a4:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 80170a8:	685a      	ldr	r2, [r3, #4]
 80170aa:	b10a      	cbz	r2, 80170b0 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 80170ac:	6899      	ldr	r1, [r3, #8]
 80170ae:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 80170b0:	689a      	ldr	r2, [r3, #8]
 80170b2:	b10a      	cbz	r2, 80170b8 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 80170b4:	6859      	ldr	r1, [r3, #4]
 80170b6:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 80170b8:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80170ba:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 80170bc:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80170c0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80170c4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80170c8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80170ca:	4422      	add	r2, r4
 80170cc:	4402      	add	r2, r0
 80170ce:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 80170d2:	694a      	ldr	r2, [r1, #20]
 80170d4:	42aa      	cmp	r2, r5
 80170d6:	dd0b      	ble.n	80170f0 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80170d8:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 80170da:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80170dc:	b14a      	cbz	r2, 80170f2 <mpool_alloc+0xa6>
 80170de:	1e41      	subs	r1, r0, #1
 80170e0:	460a      	mov	r2, r1
 80170e2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80170e6:	68dc      	ldr	r4, [r3, #12]
 80170e8:	3202      	adds	r2, #2
 80170ea:	1a12      	subs	r2, r2, r0
 80170ec:	42a2      	cmp	r2, r4
 80170ee:	d3f7      	bcc.n	80170e0 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
 80170f0:	6818      	ldr	r0, [r3, #0]
}
 80170f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80170f4:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80170f8:	1a9b      	subs	r3, r3, r2
 80170fa:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80170fc:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8017100:	bf8c      	ite	hi
 8017102:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8017104:	2100      	movls	r1, #0
 8017106:	f005 fe59 	bl	801cdbc <LEAF_internalErrorCallback>
        return NULL;
 801710a:	2000      	movs	r0, #0
}
 801710c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 801710e:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8017110:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8017112:	e7c3      	b.n	801709c <mpool_alloc+0x50>

08017114 <mpool_calloc>:
{
 8017114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8017116:	684a      	ldr	r2, [r1, #4]
{
 8017118:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 801711a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801711c:	3301      	adds	r3, #1
 801711e:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8017120:	694b      	ldr	r3, [r1, #20]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d044      	beq.n	80171b0 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8017126:	1dc4      	adds	r4, r0, #7
 8017128:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 801712c:	e002      	b.n	8017134 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 801712e:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8017130:	2b00      	cmp	r3, #0
 8017132:	d03d      	beq.n	80171b0 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8017134:	68da      	ldr	r2, [r3, #12]
 8017136:	42a2      	cmp	r2, r4
 8017138:	d3f9      	bcc.n	801712e <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 801713a:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 801713c:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 801713e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8017142:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017144:	4281      	cmp	r1, r0
 8017146:	d240      	bcs.n	80171ca <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8017148:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 801714c:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 801714e:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8017150:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8017152:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8017154:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 8017156:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 801715a:	4429      	add	r1, r5
 801715c:	5111      	str	r1, [r2, r4]
    node->size = size;
 801715e:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8017160:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8017164:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8017168:	429a      	cmp	r2, r3
        pool->head = new_node;
 801716a:	bf08      	it	eq
 801716c:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 8017170:	685a      	ldr	r2, [r3, #4]
 8017172:	b10a      	cbz	r2, 8017178 <mpool_calloc+0x64>
        node->next->prev = node->prev;
 8017174:	6899      	ldr	r1, [r3, #8]
 8017176:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8017178:	689a      	ldr	r2, [r3, #8]
 801717a:	b10a      	cbz	r2, 8017180 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 801717c:	6859      	ldr	r1, [r3, #4]
 801717e:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8017180:	2200      	movs	r2, #0
    node->prev = NULL;
 8017182:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8017186:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801718a:	f8dc 000c 	ldr.w	r0, [ip, #12]
 801718e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017190:	4401      	add	r1, r0
 8017192:	68d8      	ldr	r0, [r3, #12]
 8017194:	4401      	add	r1, r0
 8017196:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 801719a:	68d9      	ldr	r1, [r3, #12]
 801719c:	b131      	cbz	r1, 80171ac <mpool_calloc+0x98>
 801719e:	4610      	mov	r0, r2
 80171a0:	6819      	ldr	r1, [r3, #0]
 80171a2:	5488      	strb	r0, [r1, r2]
 80171a4:	3201      	adds	r2, #1
 80171a6:	68d9      	ldr	r1, [r3, #12]
 80171a8:	4291      	cmp	r1, r2
 80171aa:	d8f9      	bhi.n	80171a0 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 80171ac:	6818      	ldr	r0, [r3, #0]
}
 80171ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80171b0:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80171b4:	1a9b      	subs	r3, r3, r2
 80171b6:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80171b8:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80171bc:	bf8c      	ite	hi
 80171be:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80171c0:	2100      	movls	r1, #0
 80171c2:	f005 fdfb 	bl	801cdbc <LEAF_internalErrorCallback>
        return NULL;
 80171c6:	2000      	movs	r0, #0
}
 80171c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 80171ca:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 80171cc:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 80171ce:	e7c9      	b.n	8017164 <mpool_calloc+0x50>

080171d0 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 80171d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 80171d4:	699d      	ldr	r5, [r3, #24]
{
 80171d6:	4682      	mov	sl, r0
    pool->leaf->allocCount++;
 80171d8:	6868      	ldr	r0, [r5, #4]
 80171da:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80171dc:	3301      	adds	r3, #1
 80171de:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
 80171e0:	696b      	ldr	r3, [r5, #20]
 80171e2:	b91b      	cbnz	r3, 80171ec <tMempool_init+0x1c>
 80171e4:	e060      	b.n	80172a8 <tMempool_init+0xd8>
        node_to_alloc = node_to_alloc->next;
 80171e6:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d05d      	beq.n	80172a8 <tMempool_init+0xd8>
    while (node_to_alloc->size < size_to_alloc)
 80171ec:	68dc      	ldr	r4, [r3, #12]
 80171ee:	2c17      	cmp	r4, #23
 80171f0:	d9f9      	bls.n	80171e6 <tMempool_init+0x16>
    node_to_alloc->size = size_to_alloc;
 80171f2:	2018      	movs	r0, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80171f4:	f1a4 0718 	sub.w	r7, r4, #24
    node_to_alloc->size = size_to_alloc;
 80171f8:	60d8      	str	r0, [r3, #12]
    if (leftover > pool->leaf->header_size)
 80171fa:	6868      	ldr	r0, [r5, #4]
 80171fc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80171fe:	4287      	cmp	r7, r0
 8017200:	d94f      	bls.n	80172a2 <tMempool_init+0xd2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8017202:	f8d5 e008 	ldr.w	lr, [r5, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8017206:	f100 0c18 	add.w	ip, r0, #24
                               node_to_alloc->next,
 801720a:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 801720e:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8017210:	eba3 040e 	sub.w	r4, r3, lr
                               node_to_alloc->prev,
 8017214:	f8d3 8008 	ldr.w	r8, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8017218:	44a4      	add	ip, r4
        new_node = create_node(&pool->mpool[offset],
 801721a:	eb0e 040c 	add.w	r4, lr, ip
    node->pool = block_location + header_size;
 801721e:	4420      	add	r0, r4
 8017220:	f84e 000c 	str.w	r0, [lr, ip]
    node->size = size;
 8017224:	60e7      	str	r7, [r4, #12]
    node->prev = prev;
 8017226:	e9c4 9801 	strd	r9, r8, [r4, #4]
    if (pool->head == node_to_alloc)
 801722a:	6968      	ldr	r0, [r5, #20]
 801722c:	4283      	cmp	r3, r0
        pool->head = new_node;
 801722e:	bf08      	it	eq
 8017230:	616c      	streq	r4, [r5, #20]
    if (node->next != NULL)
 8017232:	6858      	ldr	r0, [r3, #4]
 8017234:	b108      	cbz	r0, 801723a <tMempool_init+0x6a>
        node->next->prev = node->prev;
 8017236:	689c      	ldr	r4, [r3, #8]
 8017238:	6084      	str	r4, [r0, #8]
    if (node->prev != NULL)
 801723a:	6898      	ldr	r0, [r3, #8]
 801723c:	b108      	cbz	r0, 8017242 <tMempool_init+0x72>
        node->prev->next = node->next;
 801723e:	685c      	ldr	r4, [r3, #4]
 8017240:	6044      	str	r4, [r0, #4]
    node->next = NULL;
 8017242:	2700      	movs	r7, #0
    node->prev = NULL;
 8017244:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8017248:	686c      	ldr	r4, [r5, #4]
 801724a:	68e8      	ldr	r0, [r5, #12]
 801724c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 801724e:	4430      	add	r0, r6
 8017250:	68de      	ldr	r6, [r3, #12]
 8017252:	4430      	add	r0, r6
 8017254:	60e8      	str	r0, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8017256:	6960      	ldr	r0, [r4, #20]
 8017258:	42b8      	cmp	r0, r7
 801725a:	dd0c      	ble.n	8017276 <tMempool_init+0xa6>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 801725c:	68dc      	ldr	r4, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 801725e:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8017260:	b154      	cbz	r4, 8017278 <tMempool_init+0xa8>
 8017262:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8017266:	4664      	mov	r4, ip
 8017268:	f80c 7f01 	strb.w	r7, [ip, #1]!
 801726c:	68de      	ldr	r6, [r3, #12]
 801726e:	3402      	adds	r4, #2
 8017270:	1a24      	subs	r4, r4, r0
 8017272:	42a6      	cmp	r6, r4
 8017274:	d8f7      	bhi.n	8017266 <tMempool_init+0x96>
        char* new_pool = (char*)node_to_alloc->pool;
 8017276:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8017278:	f8ca 0000 	str.w	r0, [sl]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801727c:	2410      	movs	r4, #16
    m->leaf = mm->leaf;
 801727e:	686b      	ldr	r3, [r5, #4]
 8017280:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8017282:	635c      	str	r4, [r3, #52]	; 0x34
    pool->usize  = 0;
 8017284:	2400      	movs	r4, #0
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8017286:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
 8017288:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
 801728a:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801728e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017290:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 8017292:	440b      	add	r3, r1
    node->prev = prev;
 8017294:	e9c1 4401 	strd	r4, r4, [r1, #4]
    node->pool = block_location + header_size;
 8017298:	600b      	str	r3, [r1, #0]
    node->size = size;
 801729a:	60ca      	str	r2, [r1, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801729c:	6141      	str	r1, [r0, #20]
}
 801729e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        node_to_alloc->size += leftover;
 80172a2:	60dc      	str	r4, [r3, #12]
        new_node = node_to_alloc->next;
 80172a4:	685c      	ldr	r4, [r3, #4]
 80172a6:	e7c0      	b.n	801722a <tMempool_init+0x5a>
            if ((pool->msize - pool->usize) > asize)
 80172a8:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80172ac:	6868      	ldr	r0, [r5, #4]
            if ((pool->msize - pool->usize) > asize)
 80172ae:	1a52      	subs	r2, r2, r1
 80172b0:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80172b2:	bf94      	ite	ls
 80172b4:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80172b6:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80172b8:	f005 fd80 	bl	801cdbc <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80172bc:	2300      	movs	r3, #0
 80172be:	f8ca 3000 	str.w	r3, [sl]
    m->leaf = mm->leaf;
 80172c2:	686a      	ldr	r2, [r5, #4]
 80172c4:	605a      	str	r2, [r3, #4]
 80172c6:	deff      	udf	#255	; 0xff

080172c8 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 80172c8:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80172ca:	698c      	ldr	r4, [r1, #24]
{
 80172cc:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80172ce:	2018      	movs	r0, #24
 80172d0:	4621      	mov	r1, r4
 80172d2:	f7ff febb 	bl	801704c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 80172d6:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80172d8:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 80172da:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 80172de:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80172e0:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80172e2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80172fc <tCycle_init+0x34>
    c->phase    =  0;
 80172e6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80172ea:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 80172ee:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80172f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80172f4:	edc0 7a04 	vstr	s15, [r0, #16]
}
 80172f8:	bd38      	pop	{r3, r4, r5, pc}
 80172fa:	bf00      	nop
 80172fc:	4f800000 	.word	0x4f800000

08017300 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8017300:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
 8017302:	4910      	ldr	r1, [pc, #64]	; (8017344 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8017304:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017348 <tCycle_tick+0x48>
    c->phase += c->inc;
 8017308:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801730c:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 801730e:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 8017310:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8017312:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 8017316:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8017318:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 801731c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 8017320:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8017322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 8017326:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 801732a:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 801732c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8017330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017334:	ed91 7a00 	vldr	s14, [r1]
 8017338:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 801733c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8017340:	4770      	bx	lr
 8017342:	bf00      	nop
 8017344:	08026f74 	.word	0x08026f74
 8017348:	35000004 	.word	0x35000004

0801734c <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 801734c:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801734e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 8017352:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8017356:	ee20 0a27 	vmul.f32	s0, s0, s15
 801735a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801735e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8017362:	4770      	bx	lr

08017364 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, float phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 8017364:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8017368:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8017384 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
 801736c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801736e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017372:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8017376:	ee20 0a07 	vmul.f32	s0, s0, s14
 801737a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801737e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8017382:	4770      	bx	lr
 8017384:	4f800000 	.word	0x4f800000

08017388 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 8017388:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 801738a:	6995      	ldr	r5, [r2, #24]
{
 801738c:	4606      	mov	r6, r0
 801738e:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8017390:	2018      	movs	r0, #24
 8017392:	4629      	mov	r1, r5
 8017394:	f7ff fe5a 	bl	801704c <mpool_alloc>
 8017398:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 801739a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 801739c:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 801739e:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 80173a0:	691b      	ldr	r3, [r3, #16]
 80173a2:	6143      	str	r3, [r0, #20]
}
 80173a4:	bd70      	pop	{r4, r5, r6, pc}
 80173a6:	bf00      	nop

080173a8 <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

float   tNoise_tick(tNoise* const ns)
{
 80173a8:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 80173aa:	6804      	ldr	r4, [r0, #0]
    
    float rand = (n->rand() * 2.0f) - 1.0f;
 80173ac:	6963      	ldr	r3, [r4, #20]
 80173ae:	4798      	blx	r3
    
    if (n->type == PinkNoise)
 80173b0:	7923      	ldrb	r3, [r4, #4]
    float rand = (n->rand() * 2.0f) - 1.0f;
 80173b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80173b6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
 80173ba:	2b01      	cmp	r3, #1
    float rand = (n->rand() * 2.0f) - 1.0f;
 80173bc:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
 80173c0:	d131      	bne.n	8017426 <tNoise_tick+0x7e>
    {
        float tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 80173c2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801742c <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 80173c6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8017430 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 80173ca:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 80173ce:	ed94 5a03 	vldr	s10, [r4, #12]
 80173d2:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 80173d6:	edd4 3a02 	vldr	s7, [r4, #8]
 80173da:	eddf 4a16 	vldr	s9, [pc, #88]	; 8017434 <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 80173de:	eddf 5a16 	vldr	s11, [pc, #88]	; 8017438 <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 80173e2:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 80173e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801743c <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 80173ea:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 80173ee:	ed94 4a04 	vldr	s8, [r4, #16]
 80173f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80173f6:	eddf 5a12 	vldr	s11, [pc, #72]	; 8017440 <tNoise_tick+0x98>
 80173fa:	eddf 4a12 	vldr	s9, [pc, #72]	; 8017444 <tNoise_tick+0x9c>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
 80173fe:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8017448 <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8017402:	eea4 7a25 	vfma.f32	s14, s8, s11
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8017406:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 801740a:	ee76 5a26 	vadd.f32	s11, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 801740e:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8017412:	eef0 6a65 	vmov.f32	s13, s11
 8017416:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 801741a:	eee7 6aa4 	vfma.f32	s13, s15, s9
 801741e:	ee37 7a26 	vadd.f32	s14, s14, s13
        return (tmp * 0.05f);
 8017422:	ee67 7a05 	vmul.f32	s15, s14, s10
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8017426:	eeb0 0a67 	vmov.f32	s0, s15
 801742a:	bd10      	pop	{r4, pc}
 801742c:	3dcad8a1 	.word	0x3dcad8a1
 8017430:	3e97d0ff 	.word	0x3e97d0ff
 8017434:	3f7f65fe 	.word	0x3f7f65fe
 8017438:	3f76872b 	.word	0x3f76872b
 801743c:	3f86be97 	.word	0x3f86be97
 8017440:	3f11eb85 	.word	0x3f11eb85
 8017444:	3e3d3c36 	.word	0x3e3d3c36
 8017448:	3d4ccccd 	.word	0x3d4ccccd

0801744c <tMBPulse_init>:
}

//----------------------------------------------------------------------------------------------------------

void tMBPulse_init(tMBPulse* const osc, LEAF* const leaf)
{
 801744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBPulse_initToPool(osc, &leaf->mempool);
}
                          
void tMBPulse_initToPool(tMBPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801744e:	698e      	ldr	r6, [r1, #24]
{
 8017450:	4607      	mov	r7, r0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8017452:	f44f 703b 	mov.w	r0, #748	; 0x2ec

    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8017456:	2500      	movs	r5, #0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8017458:	4631      	mov	r1, r6
 801745a:	f7ff fdf7 	bl	801704c <mpool_alloc>
 801745e:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8017460:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8017462:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8017464:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 8017466:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 801746a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80174d0 <tMBPulse_init+0x84>
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 801746e:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8017470:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8017474:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->freq = 440.f;
 8017478:	eddf 7a16 	vldr	s15, [pc, #88]	; 80174d4 <tMBPulse_init+0x88>
    c->_inv_w = 1.0f / c->_w;
 801747c:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8017480:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 8017482:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8017486:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8017488:	6181      	str	r1, [r0, #24]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801748a:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 801748c:	ed80 7aba 	vstr	s14, [r0, #744]	; 0x2e8
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017490:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017494:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8017498:	62a2      	str	r2, [r4, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
 801749a:	62e2      	str	r2, [r4, #44]	; 0x2c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801749c:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801749e:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80174a2:	f104 0066 	add.w	r0, r4, #102	; 0x66
    c->softsync = 0;
 80174a6:	61e5      	str	r5, [r4, #28]
    c->waveform = 0.0f;
 80174a8:	60e3      	str	r3, [r4, #12]
    c->_z = 0.0f;
 80174aa:	6323      	str	r3, [r4, #48]	; 0x30
    c->_j = 0;
 80174ac:	63a5      	str	r5, [r4, #56]	; 0x38
    c->_p = 0.0f;  /* phase [0, 1) */
 80174ae:	6223      	str	r3, [r4, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80174b0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80174b4:	63e5      	str	r5, [r4, #60]	; 0x3c
    c->numBLEPs = 0;
 80174b6:	6625      	str	r5, [r4, #96]	; 0x60
    c->_inv_w = 1.0f / c->_w;
 80174b8:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80174bc:	f005 fd2a 	bl	801cf14 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 80174c0:	4629      	mov	r1, r5
 80174c2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80174c6:	2220      	movs	r2, #32
}
 80174c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 80174cc:	f005 bd22 	b.w	801cf14 <memset>
 80174d0:	3b14f209 	.word	0x3b14f209
 80174d4:	43dc0000 	.word	0x43dc0000

080174d8 <tMBPulse_tick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}


float tMBPulse_tick(tMBPulse* const osc)
{
 80174d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174dc:	ed2d 8b0c 	vpush	{d8-d13}
    _tMBPulse* c = *osc;
 80174e0:	6804      	ldr	r4, [r0, #0]
{
 80174e2:	b083      	sub	sp, #12
 80174e4:	4605      	mov	r5, r0
    
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    
    sync = c->sync;
 80174e6:	ed94 8a05 	vldr	s16, [r4, #20]


    p = c->_p;  /* phase [0, 1) */
 80174ea:	ed94 7a08 	vldr	s14, [r4, #32]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80174ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
 80174f2:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
 80174f6:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 80174fa:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80174fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    z = c->_z;  /* low pass filter state */
 8017502:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017506:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801750a:	f340 80f9 	ble.w	8017700 <tMBPulse_tick+0x228>
 801750e:	f8d4 901c 	ldr.w	r9, [r4, #28]
 8017512:	f1b9 0f00 	cmp.w	r9, #0
 8017516:	f340 80bd 	ble.w	8017694 <tMBPulse_tick+0x1bc>
 801751a:	edd4 6a06 	vldr	s13, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 801751e:	ed94 9a0d 	vldr	s18, [r4, #52]	; 0x34
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017522:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 8017526:	ee66 7a8a 	vmul.f32	s15, s13, s20
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801752a:	edc4 6a06 	vstr	s13, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 801752e:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 8017532:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8017536:	ee37 7a87 	vadd.f32	s14, s15, s14
 801753a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801753e:	ee37 8a48 	vsub.f32	s16, s14, s16
                x = 0.5f;
            }
        }
    } else if (!k) {  /* normal operation, signal currently high */
        
        if (sw > 0)
 8017542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    } else if (!k) {  /* normal operation, signal currently high */
 8017546:	2f00      	cmp	r7, #0
 8017548:	f040 80ef 	bne.w	801772a <tMBPulse_tick+0x252>
        if (sw > 0)
 801754c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017550:	f340 81a4 	ble.w	801789c <tMBPulse_tick+0x3c4>
        {
            if (p >= b) {
 8017554:	eef4 aac8 	vcmpe.f32	s21, s16
 8017558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801755c:	f240 8162 	bls.w	8017824 <tMBPulse_tick+0x34c>
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017560:	463b      	mov	r3, r7
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
                k = 1;
                x = -0.5f;
            }
            if (p >= 1.0f) {
 8017562:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017566:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801756a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801756e:	f280 8276 	bge.w	8017a5e <tMBPulse_tick+0x586>
 8017572:	461f      	mov	r7, r3
                x = -0.5f;
            }
        }
    }

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8017574:	1d33      	adds	r3, r6, #4
 8017576:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 801757a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801757e:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8017582:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8017586:	f88d 3005 	strb.w	r3, [sp, #5]
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801758a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801758e:	2b00      	cmp	r3, #0
 8017590:	f000 8229 	beq.w	80179e6 <tMBPulse_tick+0x50e>
 8017594:	eb04 0986 	add.w	r9, r4, r6, lsl #2
	{
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8017598:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

		//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801759c:	f8b4 e064 	ldrh.w	lr, [r4, #100]	; 0x64
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80175a0:	f04f 0c00 	mov.w	ip, #0
 80175a4:	ed99 7a10 	vldr	s14, [r9, #64]	; 0x40
 80175a8:	4db9      	ldr	r5, [pc, #740]	; (8017890 <tMBPulse_tick+0x3b8>)
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80175aa:	eba8 030c 	sub.w	r3, r8, ip
 80175ae:	b29b      	uxth	r3, r3
 80175b0:	f8ad 3006 	strh.w	r3, [sp, #6]
		whichBLEP &= 63;
 80175b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80175b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80175bc:	f8ad 3006 	strh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80175c0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80175c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80175c8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80175cc:	b289      	uxth	r1, r1
 80175ce:	f8bd a006 	ldrh.w	sl, [sp, #6]
 80175d2:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80175d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80175d8:	b280      	uxth	r0, r0
 80175da:	fa1f fa8a 	uxth.w	sl, sl
 80175de:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80175e2:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
 80175e6:	f8b2 b066 	ldrh.w	fp, [r2, #102]	; 0x66
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80175ea:	b29b      	uxth	r3, r3
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80175ec:	f8ba a066 	ldrh.w	sl, [sl, #102]	; 0x66
 80175f0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80175f4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80175f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80175fc:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
 8017600:	ed90 6a3a 	vldr	s12, [r0, #232]	; 0xe8
 8017604:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017608:	f8b3 0066 	ldrh.w	r0, [r3, #102]	; 0x66
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801760c:	eddb 7a00 	vldr	s15, [fp]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017610:	b292      	uxth	r2, r2
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017612:	edda 6a01 	vldr	s13, [sl, #4]
 8017616:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801761a:	3040      	adds	r0, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801761c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017620:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017624:	edd1 6a3b 	vldr	s13, [r1, #236]	; 0xec
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017628:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801762c:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
 8017630:	4573      	cmp	r3, lr
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017632:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017636:	f0c0 80e8 	bcc.w	801780a <tMBPulse_tick+0x332>
		{
			c->numBLEPs--;
 801763a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801763e:	f10c 0c01 	add.w	ip, ip, #1
 8017642:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 8017646:	3b01      	subs	r3, #1
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017648:	4594      	cmp	ip, r2
			c->numBLEPs--;
 801764a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801764e:	dbac      	blt.n	80175aa <tMBPulse_tick+0xd2>
 8017650:	ed89 7a10 	vstr	s14, [r9, #64]	; 0x40
		}

	}

    z += 0.5f * (c->_f[j] - z);
 8017654:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;

    j = (j+1) & 7;
 8017658:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z);
 801765a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 801765e:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8017662:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7;
 8017666:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 801766a:	ed84 aa09 	vstr	s20, [r4, #36]	; 0x24
    c->_b = b;
 801766e:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 8017672:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 8017676:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    c->_z = z;
    c->_j = j;
 801767a:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    c->_k = k;
    
    return -c->out;
 801767e:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8017682:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8017686:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 801768a:	b003      	add	sp, #12
 801768c:	ecbd 8b0c 	vpop	{d8-d13}
 8017690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017694:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8017698:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 801769c:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
 80176a0:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 80176a4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80176a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80176ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80176b0:	ee77 8a66 	vsub.f32	s17, s14, s13
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 80176b4:	f040 8459 	bne.w	8017f6a <tMBPulse_tick+0xa92>
        if (sw > 0) p = eof_offset;
 80176b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80176bc:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 80176be:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
 80176c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 80176c6:	ee38 bac8 	vsub.f32	s22, s17, s16
        if (sw > 0) p = eof_offset;
 80176ca:	f340 80a6 	ble.w	801781a <tMBPulse_tick+0x342>
        if (!k) {
 80176ce:	2f00      	cmp	r7, #0
 80176d0:	f040 818e 	bne.w	80179f0 <tMBPulse_tick+0x518>
                if (p_at_reset >= b) {
 80176d4:	eef4 aacb 	vcmpe.f32	s21, s22
 80176d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176dc:	f240 8312 	bls.w	8017d04 <tMBPulse_tick+0x82c>
                if (p_at_reset >= 1.0f) {
 80176e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80176e4:	eeb4 bae7 	vcmpe.f32	s22, s15
 80176e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ec:	f280 81f3 	bge.w	8017ad6 <tMBPulse_tick+0x5fe>
            if (p >= b) {
 80176f0:	eef4 aac8 	vcmpe.f32	s21, s16
 80176f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176f8:	f240 81e1 	bls.w	8017abe <tMBPulse_tick+0x5e6>
 80176fc:	464f      	mov	r7, r9
 80176fe:	e739      	b.n	8017574 <tMBPulse_tick+0x9c>
    sw = w * c->syncdir;
 8017700:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8017704:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 8017708:	ee69 7a0a 	vmul.f32	s15, s18, s20
    float inv_sw = c->_inv_w * c->syncdir;
 801770c:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8017710:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8017714:	ee37 7a27 	vadd.f32	s14, s14, s15
        if (sw > 0)
 8017718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 801771c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017720:	ee37 8a48 	vsub.f32	s16, s14, s16
    } else if (!k) {  /* normal operation, signal currently high */
 8017724:	2f00      	cmp	r7, #0
 8017726:	f43f af11 	beq.w	801754c <tMBPulse_tick+0x74>
        if (sw > 0)
 801772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801772e:	f340 8129 	ble.w	8017984 <tMBPulse_tick+0x4ac>
            if (p >= 1.0f) {
 8017732:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017736:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801773a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801773e:	f6ff af19 	blt.w	8017574 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8017742:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8017746:	eddf 7a54 	vldr	s15, [pc, #336]	; 8017898 <tMBPulse_tick+0x3c0>
                p -= 1.0f;
 801774a:	ee38 8a68 	vsub.f32	s16, s16, s17
	_tMBPulse* c = *osc;
 801774e:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017750:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8017754:	eeb0 0a4b 	vmov.f32	s0, s22
 8017758:	eea9 0a08 	vfma.f32	s0, s18, s16
 801775c:	f006 fad8 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017760:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017764:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017768:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801776c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017770:	3301      	adds	r3, #1
            if (!k && p >= b) {
 8017772:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801777a:	eed9 7a08 	vfnms.f32	s15, s18, s16
            if (!k && p >= b) {
 801777e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017782:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017786:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801778a:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801778e:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8017792:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017796:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801779a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 801779e:	f103 0301 	add.w	r3, r3, #1
 80177a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80177a6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if (!k && p >= b) {
 80177aa:	f200 8308 	bhi.w	8017dbe <tMBPulse_tick+0x8e6>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 80177ae:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 80177b2:	682d      	ldr	r5, [r5, #0]
	i = lrintf(r - 0.5f);
 80177b4:	eeb0 0a4b 	vmov.f32	s0, s22
 80177b8:	eea9 0a28 	vfma.f32	s0, s18, s17
 80177bc:	f006 faa8 	bl	801dd10 <lrintf>
	r -= (float)i;
 80177c0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80177c4:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
                x = -0.5f;
 80177c8:	eef0 5a4b 	vmov.f32	s11, s22
	r -= (float)i;
 80177cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80177d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80177d4:	3301      	adds	r3, #1
	r -= (float)i;
 80177d6:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80177da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80177de:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80177e2:	eb05 0143 	add.w	r1, r5, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80177e6:	4a2b      	ldr	r2, [pc, #172]	; (8017894 <tMBPulse_tick+0x3bc>)
                k = 1;
 80177e8:	2701      	movs	r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80177ea:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80177ee:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 80177f2:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80177f6:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80177fa:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80177fe:	443b      	add	r3, r7
 8017800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017804:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8017808:	e6b4      	b.n	8017574 <tMBPulse_tick+0x9c>
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801780a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801780e:	f10c 0c01 	add.w	ip, ip, #1
 8017812:	4563      	cmp	r3, ip
 8017814:	f73f aec9 	bgt.w	80175aa <tMBPulse_tick+0xd2>
 8017818:	e71a      	b.n	8017650 <tMBPulse_tick+0x178>
        else if (sw < 0) p = 1.0f - eof_offset;
 801781a:	f100 81c0 	bmi.w	8017b9e <tMBPulse_tick+0x6c6>
    p += sw - (int)sw;
 801781e:	eeb0 8a68 	vmov.f32	s16, s17
 8017822:	e6a7      	b.n	8017574 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8017824:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8017828:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8017898 <tMBPulse_tick+0x3c0>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 801782c:	ee38 ba6a 	vsub.f32	s22, s16, s21
	_tMBPulse* c = *osc;
 8017830:	f8d5 8000 	ldr.w	r8, [r5]
	r = MINBLEP_PHASES * phase * inv_w;
 8017834:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8017838:	eeb0 0a6b 	vmov.f32	s0, s23
 801783c:	eeab 0a28 	vfma.f32	s0, s22, s17
 8017840:	f006 fa66 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017844:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017848:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801784c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017854:	4a0f      	ldr	r2, [pc, #60]	; (8017894 <tMBPulse_tick+0x3bc>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017856:	3301      	adds	r3, #1
                x = -0.5f;
 8017858:	eef0 5a6b 	vmov.f32	s11, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801785c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017860:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017864:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017868:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801786c:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017870:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8017874:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017878:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801787c:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8017880:	3301      	adds	r3, #1
 8017882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017886:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                k = 1;
 801788a:	2301      	movs	r3, #1
}
 801788c:	e669      	b.n	8017562 <tMBPulse_tick+0x8a>
 801788e:	bf00      	nop
 8017890:	0802d6f8 	.word	0x0802d6f8
 8017894:	bf800000 	.word	0xbf800000
 8017898:	42800000 	.word	0x42800000
            if (p < 0.0f) {
 801789c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80178a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178a4:	f57f ae66 	bpl.w	8017574 <tMBPulse_tick+0x9c>
 80178a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80178ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178b0:	f57f ae60 	bpl.w	8017574 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 80178b4:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 80178b8:	ed5f 8a09 	vldr	s17, [pc, #-36]	; 8017898 <tMBPulse_tick+0x3c0>
	r = MINBLEP_PHASES * phase * inv_w;
 80178bc:	ee29 ca08 	vmul.f32	s24, s18, s16
	_tMBPulse* c = *osc;
 80178c0:	f8d5 8000 	ldr.w	r8, [r5]
                p += 1.0f;
 80178c4:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 80178c8:	eeb0 0a6b 	vmov.f32	s0, s23
                p += 1.0f;
 80178cc:	ee38 8a0b 	vadd.f32	s16, s16, s22
	i = lrintf(r - 0.5f);
 80178d0:	eeac 0a28 	vfma.f32	s0, s24, s17
 80178d4:	f006 fa1c 	bl	801dd10 <lrintf>
	r -= (float)i;
 80178d8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80178dc:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80178e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80178e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80178e8:	4ad1      	ldr	r2, [pc, #836]	; (8017c30 <tMBPulse_tick+0x758>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80178ea:	3301      	adds	r3, #1
            if (k && p < b) {
 80178ec:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80178f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80178f4:	eedc 7a28 	vfnms.f32	s15, s24, s17
            if (k && p < b) {
 80178f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80178fc:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017900:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017904:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017908:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 801790c:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017910:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017914:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8017918:	f103 0301 	add.w	r3, r3, #1
 801791c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017920:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (k && p < b) {
 8017924:	f340 8325 	ble.w	8017f72 <tMBPulse_tick+0xa9a>
	_tMBPulse* c = *osc;
 8017928:	ee38 ca6a 	vsub.f32	s24, s16, s21
 801792c:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801792e:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8017932:	eeb0 0a6b 	vmov.f32	s0, s23
 8017936:	eea8 0a8c 	vfma.f32	s0, s17, s24
 801793a:	f006 f9e9 	bl	801dd10 <lrintf>
	r -= (float)i;
 801793e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017942:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017946:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801794a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801794e:	3301      	adds	r3, #1
                x = 0.5f;
 8017950:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017958:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 801795c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017960:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017964:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017968:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801796c:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017970:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017974:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8017978:	3301      	adds	r3, #1
 801797a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801797e:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8017982:	e5f7      	b.n	8017574 <tMBPulse_tick+0x9c>
        else if (sw < 0)
 8017984:	f57f adf6 	bpl.w	8017574 <tMBPulse_tick+0x9c>
            if (p < b) {
 8017988:	eef4 aac8 	vcmpe.f32	s21, s16
 801798c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017990:	f300 80d2 	bgt.w	8017b38 <tMBPulse_tick+0x660>
            if (p < 0.0f) {
 8017994:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801799c:	f57f adea 	bpl.w	8017574 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 80179a0:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 80179a4:	eddf 8aa3 	vldr	s17, [pc, #652]	; 8017c34 <tMBPulse_tick+0x75c>
	r = MINBLEP_PHASES * phase * inv_w;
 80179a8:	ee29 9a08 	vmul.f32	s18, s18, s16
	_tMBPulse* c = *osc;
 80179ac:	682d      	ldr	r5, [r5, #0]
                p += 1.0f;
 80179ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 80179b2:	eeb0 0a4b 	vmov.f32	s0, s22
                p += 1.0f;
 80179b6:	ee38 8a27 	vadd.f32	s16, s16, s15
	i = lrintf(r - 0.5f);
 80179ba:	eea9 0a28 	vfma.f32	s0, s18, s17
 80179be:	f006 f9a7 	bl	801dd10 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80179c2:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	r -= (float)i;
 80179c6:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 80179ca:	eef0 5a4b 	vmov.f32	s11, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80179ce:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80179d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80179d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80179d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80179dc:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80179e0:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
 80179e4:	e6fd      	b.n	80177e2 <tMBPulse_tick+0x30a>
 80179e6:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80179ea:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80179ee:	e631      	b.n	8017654 <tMBPulse_tick+0x17c>
                if (p_at_reset >= 1.0f) {
 80179f0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80179f4:	eeb4 bae8 	vcmpe.f32	s22, s17
 80179f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179fc:	f280 811c 	bge.w	8017c38 <tMBPulse_tick+0x760>
 8017a00:	eddf ba8c 	vldr	s23, [pc, #560]	; 8017c34 <tMBPulse_tick+0x75c>
 8017a04:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 8017a08:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017a0c:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8017a10:	f006 f97e 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017a14:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a18:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017a1c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017a24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a28:	3301      	adds	r3, #1
                x = 0.5f;
 8017a2a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017a32:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017a36:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a3a:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017a3e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017a42:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8017a46:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017a4a:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017a4e:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8017a52:	3301      	adds	r3, #1
 8017a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017a58:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
}
 8017a5c:	e648      	b.n	80176f0 <tMBPulse_tick+0x218>
                p -= 1.0f;
 8017a5e:	eddf 7a75 	vldr	s15, [pc, #468]	; 8017c34 <tMBPulse_tick+0x75c>
 8017a62:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
 8017a66:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8017a6a:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017a6c:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8017a70:	eea9 0a08 	vfma.f32	s0, s18, s16
 8017a74:	f006 f94c 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017a78:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a7c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017a80:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a88:	3301      	adds	r3, #1
                x = 0.5f;
 8017a8a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017a92:	eed9 7a08 	vfnms.f32	s15, s18, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017a96:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a9a:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017a9e:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017aa2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8017aa6:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017aaa:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017aae:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8017ab2:	3301      	adds	r3, #1
 8017ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ab8:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8017abc:	e55a      	b.n	8017574 <tMBPulse_tick+0x9c>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8017abe:	ee78 7a6a 	vsub.f32	s15, s16, s21
	_tMBPulse* c = *osc;
 8017ac2:	eddf 8a5c 	vldr	s17, [pc, #368]	; 8017c34 <tMBPulse_tick+0x75c>
	i = lrintf(r - 0.5f);
 8017ac6:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8017aca:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017acc:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8017ad0:	eeb0 9a67 	vmov.f32	s18, s15
 8017ad4:	e66e      	b.n	80177b4 <tMBPulse_tick+0x2dc>
 8017ad6:	eddf ba57 	vldr	s23, [pc, #348]	; 8017c34 <tMBPulse_tick+0x75c>
 8017ada:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8017ade:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8017ae2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8017ae6:	ee78 8acb 	vsub.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 8017aea:	eea8 0aab 	vfma.f32	s0, s17, s23
 8017aee:	f006 f90f 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017af2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017af6:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017afa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b02:	3301      	adds	r3, #1
                    x = 0.5f;
 8017b04:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017b0c:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017b10:	eb08 0243 	add.w	r2, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b14:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017b18:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017b1c:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8017b20:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017b24:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017b28:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8017b2c:	3301      	adds	r3, #1
 8017b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017b32:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
        if (sw > 0)
 8017b36:	e5db      	b.n	80176f0 <tMBPulse_tick+0x218>
	_tMBPulse* c = *osc;
 8017b38:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8017c34 <tMBPulse_tick+0x75c>
 8017b3c:	ee38 ba6a 	vsub.f32	s22, s16, s21
	i = lrintf(r - 0.5f);
 8017b40:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8017b44:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017b46:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8017b4a:	eeab 0a28 	vfma.f32	s0, s22, s17
 8017b4e:	f006 f8df 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017b52:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017b5a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017b62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b66:	3301      	adds	r3, #1
                x = 0.5f;
 8017b68:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017b70:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017b74:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b78:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017b7c:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017b80:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8017b84:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017b88:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017b8c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8017b90:	3301      	adds	r3, #1
 8017b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017b96:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                k = 0;
 8017b9a:	2700      	movs	r7, #0
}
 8017b9c:	e6fa      	b.n	8017994 <tMBPulse_tick+0x4bc>
        else if (sw < 0) p = 1.0f - eof_offset;
 8017b9e:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8017ba2:	ee3c da48 	vsub.f32	s26, s24, s16
        if (!k) {
 8017ba6:	2f00      	cmp	r7, #0
 8017ba8:	f040 80e5 	bne.w	8017d76 <tMBPulse_tick+0x89e>
                if (p_at_reset < 0.0f) {
 8017bac:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8017bb0:	eddf ba20 	vldr	s23, [pc, #128]	; 8017c34 <tMBPulse_tick+0x75c>
 8017bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bb8:	f100 813c 	bmi.w	8017e34 <tMBPulse_tick+0x95c>
 8017bbc:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 8017bc0:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                k = 1;
 8017bc4:	2701      	movs	r7, #1
 8017bc6:	eeb1 ba48 	vneg.f32	s22, s16
	i = lrintf(r - 0.5f);
 8017bca:	eeb0 0a68 	vmov.f32	s0, s17
 8017bce:	eea8 0a6b 	vfms.f32	s0, s16, s23
 8017bd2:	f006 f89d 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017bd6:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 8017bda:	eef0 5a68 	vmov.f32	s11, s17
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017bde:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017be6:	eedb 7a2b 	vfnms.f32	s15, s22, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017bea:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017bee:	4a10      	ldr	r2, [pc, #64]	; (8017c30 <tMBPulse_tick+0x758>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017bf0:	443b      	add	r3, r7
 8017bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017bf6:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017bfa:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017bfe:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017c02:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8017c06:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017c0a:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017c0e:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8017c12:	443b      	add	r3, r7
 8017c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017c18:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (p < b) {
 8017c1c:	eef4 aacd 	vcmpe.f32	s21, s26
 8017c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c24:	f300 80d0 	bgt.w	8017dc8 <tMBPulse_tick+0x8f0>
 8017c28:	eeb0 8a4d 	vmov.f32	s16, s26
 8017c2c:	e4a2      	b.n	8017574 <tMBPulse_tick+0x9c>
 8017c2e:	bf00      	nop
 8017c30:	bf800000 	.word	0xbf800000
 8017c34:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 8017c38:	ee3b ba68 	vsub.f32	s22, s22, s17
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8017c3c:	ed5f ba03 	vldr	s23, [pc, #-12]	; 8017c34 <tMBPulse_tick+0x75c>
	i = lrintf(r - 0.5f);
 8017c40:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8017c44:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8017c48:	ee38 ca0b 	vadd.f32	s24, s16, s22
	i = lrintf(r - 0.5f);
 8017c4c:	eeb0 0a6c 	vmov.f32	s0, s25
 8017c50:	eeab 0a8c 	vfma.f32	s0, s23, s24
 8017c54:	f006 f85c 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017c58:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c5c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017c60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c68:	3301      	adds	r3, #1
                if (!k && p_at_reset >= b) {
 8017c6a:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017c72:	eedb 7a8c 	vfnms.f32	s15, s23, s24
                if (!k && p_at_reset >= b) {
 8017c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017c7a:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c7e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017c82:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017c86:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8017c8a:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017c8e:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017c92:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8017c96:	f103 0301 	add.w	r3, r3, #1
 8017c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017c9e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (!k && p_at_reset >= b) {
 8017ca2:	f200 815e 	bhi.w	8017f62 <tMBPulse_tick+0xa8a>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8017ca6:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 8017caa:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 8017cac:	eeb0 0a6c 	vmov.f32	s0, s25
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8017cb0:	ee78 8a8b 	vadd.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 8017cb4:	eeab 0aa8 	vfma.f32	s0, s23, s17
 8017cb8:	f006 f82a 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017cbc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017cc0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017cc4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017ccc:	4aad      	ldr	r2, [pc, #692]	; (8017f84 <tMBPulse_tick+0xaac>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017cce:	3301      	adds	r3, #1
	r -= (float)i;
 8017cd0:	eedb 7aa8 	vfnms.f32	s15, s23, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017cd8:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017cdc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017ce0:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017ce4:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8017ce8:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017cec:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017cf0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8017cf4:	3301      	adds	r3, #1
 8017cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017cfa:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        if (sw > 0)
 8017cfe:	f8d5 8000 	ldr.w	r8, [r5]
 8017d02:	e681      	b.n	8017a08 <tMBPulse_tick+0x530>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8017d04:	eddf baa0 	vldr	s23, [pc, #640]	; 8017f88 <tMBPulse_tick+0xab0>
 8017d08:	ee38 caea 	vsub.f32	s24, s17, s21
	i = lrintf(r - 0.5f);
 8017d0c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017d10:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8017d14:	eeac 0a2b 	vfma.f32	s0, s24, s23
 8017d18:	f005 fffa 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017d1c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d20:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017d24:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017d2c:	4a95      	ldr	r2, [pc, #596]	; (8017f84 <tMBPulse_tick+0xaac>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d2e:	3301      	adds	r3, #1
                if (p_at_reset >= 1.0f) {
 8017d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017d38:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (p_at_reset >= 1.0f) {
 8017d3c:	eeb4 bac7 	vcmpe.f32	s22, s14
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017d40:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d44:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017d48:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017d4c:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
                if (p_at_reset >= 1.0f) {
 8017d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017d54:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017d58:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017d5c:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8017d60:	f103 0301 	add.w	r3, r3, #1
 8017d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017d68:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                if (p_at_reset >= 1.0f) {
 8017d6c:	f8d5 8000 	ldr.w	r8, [r5]
 8017d70:	f6ff ae4a 	blt.w	8017a08 <tMBPulse_tick+0x530>
 8017d74:	e6b3      	b.n	8017ade <tMBPulse_tick+0x606>
                if (p_at_reset < b) {
 8017d76:	eef4 aacb 	vcmpe.f32	s21, s22
 8017d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d7e:	f300 80ba 	bgt.w	8017ef6 <tMBPulse_tick+0xa1e>
                if (p_at_reset < 0.0f) {
 8017d82:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8017d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d8a:	f57f af47 	bpl.w	8017c1c <tMBPulse_tick+0x744>
 8017d8e:	eddf ba7e 	vldr	s23, [pc, #504]	; 8017f88 <tMBPulse_tick+0xab0>
 8017d92:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 8017d96:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
                    k = 1;
 8017d9a:	2701      	movs	r7, #1
	i = lrintf(r - 0.5f);
 8017d9c:	eeb0 0a48 	vmov.f32	s0, s16
 8017da0:	eea8 0aab 	vfma.f32	s0, s17, s23
 8017da4:	f005 ffb4 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017da8:	ee07 0a90 	vmov	s15, r0
                    x = -0.5f;
 8017dac:	eef0 5a48 	vmov.f32	s11, s16
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017db0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017db8:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017dbc:	e715      	b.n	8017bea <tMBPulse_tick+0x712>
                x = 0.5f;
 8017dbe:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
                k = 0;
 8017dc2:	2700      	movs	r7, #0
 8017dc4:	f7ff bbd6 	b.w	8017574 <tMBPulse_tick+0x9c>
	_tMBPulse* c = *osc;
 8017dc8:	eddf 8a6f 	vldr	s17, [pc, #444]	; 8017f88 <tMBPulse_tick+0xab0>
 8017dcc:	ee3d ba6a 	vsub.f32	s22, s26, s21
	i = lrintf(r - 0.5f);
 8017dd0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8017dd4:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017dd6:	ee69 8a28 	vmul.f32	s17, s18, s17
                k = 0;
 8017dda:	464f      	mov	r7, r9
}
 8017ddc:	eeb0 8a4d 	vmov.f32	s16, s26
	i = lrintf(r - 0.5f);
 8017de0:	eea8 0a8b 	vfma.f32	s0, s17, s22
 8017de4:	f005 ff94 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017de8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017dec:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017df0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017df8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017dfc:	3301      	adds	r3, #1
                x = 0.5f;
 8017dfe:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017e06:	eed8 7a8b 	vfnms.f32	s15, s17, s22
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017e0a:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e0e:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017e12:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017e16:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8017e1a:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017e1e:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017e22:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8017e26:	3301      	adds	r3, #1
 8017e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017e2c:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8017e30:	f7ff bba0 	b.w	8017574 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8017e34:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8017e38:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    p_at_reset += 1.0f;
 8017e3c:	ee3b ba0c 	vadd.f32	s22, s22, s24
	i = lrintf(r - 0.5f);
 8017e40:	eeb0 0a6c 	vmov.f32	s0, s25
 8017e44:	eea8 0aab 	vfma.f32	s0, s17, s23
 8017e48:	f005 ff62 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017e4c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e50:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017e54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017e5c:	4a49      	ldr	r2, [pc, #292]	; (8017f84 <tMBPulse_tick+0xaac>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e5e:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 8017e60:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017e68:	eed8 7aab 	vfnms.f32	s15, s17, s23
                if (k && p_at_reset < b) {
 8017e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017e70:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e74:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017e78:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017e7c:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8017e80:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017e84:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017e88:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8017e8c:	f103 0301 	add.w	r3, r3, #1
 8017e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017e94:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (k && p_at_reset < b) {
 8017e98:	dd70      	ble.n	8017f7c <tMBPulse_tick+0xaa4>
	_tMBPulse* c = *osc;
 8017e9a:	ee78 8a6a 	vsub.f32	s17, s16, s21
 8017e9e:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 8017ea0:	eeb0 0a6c 	vmov.f32	s0, s25
 8017ea4:	ee78 8a8b 	vadd.f32	s17, s17, s22
 8017ea8:	eea8 0aab 	vfma.f32	s0, s17, s23
 8017eac:	f005 ff30 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017eb0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017eb4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017eb8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ec0:	3301      	adds	r3, #1
	r -= (float)i;
 8017ec2:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017eca:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ece:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017ed2:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017ed6:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8017eda:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017ede:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017ee2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8017ee6:	3301      	adds	r3, #1
 8017ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017eec:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        else if (sw < 0)
 8017ef0:	f8d5 8000 	ldr.w	r8, [r5]
 8017ef4:	e664      	b.n	8017bc0 <tMBPulse_tick+0x6e8>
	r = MINBLEP_PHASES * phase * inv_w;
 8017ef6:	eddf ba24 	vldr	s23, [pc, #144]	; 8017f88 <tMBPulse_tick+0xab0>
 8017efa:	ee78 caea 	vsub.f32	s25, s17, s21
	i = lrintf(r - 0.5f);
 8017efe:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017f02:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8017f06:	eeac 0aab 	vfma.f32	s0, s25, s23
 8017f0a:	f005 ff01 	bl	801dd10 <lrintf>
	r -= (float)i;
 8017f0e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f12:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017f16:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f1e:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 8017f20:	eeb5 bac0 	vcmpe.f32	s22, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017f28:	eedc 7aab 	vfnms.f32	s15, s25, s23
                if (p_at_reset < 0.0f) {
 8017f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017f30:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f34:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017f38:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f3c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8017f40:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017f44:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017f48:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8017f4c:	f103 0301 	add.w	r3, r3, #1
 8017f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f54:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (p_at_reset < 0.0f) {
 8017f58:	f8d5 8000 	ldr.w	r8, [r5]
 8017f5c:	f57f ae30 	bpl.w	8017bc0 <tMBPulse_tick+0x6e8>
 8017f60:	e719      	b.n	8017d96 <tMBPulse_tick+0x8be>
                    x = 0.5f;
 8017f62:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8017f66:	f7ff bbc3 	b.w	80176f0 <tMBPulse_tick+0x218>
    p += sw - (int)sw;
 8017f6a:	eeb0 8a68 	vmov.f32	s16, s17
 8017f6e:	f7ff bae8 	b.w	8017542 <tMBPulse_tick+0x6a>
                x = -0.5f;
 8017f72:	eef0 5a6b 	vmov.f32	s11, s23
                k = 1;
 8017f76:	2701      	movs	r7, #1
 8017f78:	f7ff bafc 	b.w	8017574 <tMBPulse_tick+0x9c>
                    x = -0.5f;
 8017f7c:	eef0 5a6c 	vmov.f32	s11, s25
                    k = 1;
 8017f80:	2701      	movs	r7, #1
 8017f82:	e64b      	b.n	8017c1c <tMBPulse_tick+0x744>
 8017f84:	bf800000 	.word	0xbf800000
 8017f88:	42800000 	.word	0x42800000

08017f8c <tMBPulse_setFreq>:

void tMBPulse_setFreq(tMBPulse* const osc, float f)
{
    _tMBPulse* c = *osc;
 8017f8c:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 8017f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017f92:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
    c->freq = f;
 8017f96:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017f9a:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 8017f9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017fa2:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8017fa6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8017faa:	4770      	bx	lr

08017fac <tMBPulse_setWidth>:

void tMBPulse_setWidth(tMBPulse* const osc, float w)
{
    _tMBPulse* c = *osc;
    c->waveform = w;
    c->_b = 0.5f * (1.0f + c->waveform);
 8017fac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tMBPulse* c = *osc;
 8017fb0:	6803      	ldr	r3, [r0, #0]
    c->_b = 0.5f * (1.0f + c->waveform);
 8017fb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->waveform = w;
 8017fb6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->_b = 0.5f * (1.0f + c->waveform);
 8017fba:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017fc2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8017fc6:	4770      	bx	lr

08017fc8 <tMBPulse_sync>:

float tMBPulse_sync(tMBPulse* const osc, float value)
{
    _tMBPulse* c = *osc;
 8017fc8:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8017fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8017fce:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 8017fd2:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 8017fd6:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8017fda:	eef1 7a67 	vneg.f32	s15, s15
 8017fde:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8017fe2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fea:	eef4 6ac7 	vcmpe.f32	s13, s14
 8017fee:	bfcc      	ite	gt
 8017ff0:	2201      	movgt	r2, #1
 8017ff2:	2200      	movle	r2, #0
 8017ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ff8:	f002 0201 	and.w	r2, r2, #1
 8017ffc:	bf88      	it	hi
 8017ffe:	2200      	movhi	r2, #0
 8018000:	b122      	cbz	r2, 801800c <tMBPulse_sync+0x44>
 8018002:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801800a:	da04      	bge.n	8018016 <tMBPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801800c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8018024 <tMBPulse_sync+0x5c>
 8018010:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 8018014:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8018016:	ee37 7a66 	vsub.f32	s14, s14, s13
 801801a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801801e:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8018022:	4770      	bx	lr
 8018024:	00000000 	.word	0x00000000

08018028 <tMBTriangle_init>:

//==========================================================================================================
//==========================================================================================================

void tMBTriangle_init(tMBTriangle* const osc, LEAF* const leaf)
{
 8018028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBTriangle_initToPool(osc, &leaf->mempool);
}

void tMBTriangle_initToPool(tMBTriangle* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801802a:	698e      	ldr	r6, [r1, #24]
{
 801802c:	4607      	mov	r7, r0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 801802e:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8018032:	2500      	movs	r5, #0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8018034:	4631      	mov	r1, r6
 8018036:	f7ff f809 	bl	801704c <mpool_alloc>
 801803a:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 801803c:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 801803e:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8018040:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 8018042:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_j = 0;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8018046:	ed9f 6a18 	vldr	s12, [pc, #96]	; 80180a8 <tMBTriangle_init+0x80>
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 801804a:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 801804c:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 8018050:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->freq = 440.f;
 8018054:	eddf 7a15 	vldr	s15, [pc, #84]	; 80180ac <tMBTriangle_init+0x84>
    c->_inv_w = 1.0f / c->_w;
 8018058:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 801805c:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 801805e:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8018062:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8018064:	6181      	str	r1, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8018066:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 801806a:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801806c:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 8018070:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
 8018072:	4b0f      	ldr	r3, [pc, #60]	; (80180b0 <tMBTriangle_init+0x88>)
    c->softsync = 0;
 8018074:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 8018076:	6345      	str	r5, [r0, #52]	; 0x34
    c->_p = 0.25f;  /* phase [0, 1) */
 8018078:	6202      	str	r2, [r0, #32]
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801807a:	2280      	movs	r2, #128	; 0x80
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801807c:	6281      	str	r1, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801807e:	4629      	mov	r1, r5
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8018080:	6385      	str	r5, [r0, #56]	; 0x38
    c->invSampleRate = leaf->invSampleRate;
 8018082:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018086:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->numBLEPs = 0;
 801808a:	e9c0 5319 	strd	r5, r3, [r0, #100]	; 0x64
    c->_inv_w = 1.0f / c->_w;
 801808e:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8018092:	306c      	adds	r0, #108	; 0x6c
 8018094:	f004 ff3e 	bl	801cf14 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8018098:	4629      	mov	r1, r5
 801809a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801809e:	2220      	movs	r2, #32
}
 80180a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 80180a4:	f004 bf36 	b.w	801cf14 <memset>
 80180a8:	3b14f209 	.word	0x3b14f209
 80180ac:	43dc0000 	.word	0x43dc0000
 80180b0:	11c01200 	.word	0x11c01200

080180b4 <tMBTriangle_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBTriangle_tick(tMBTriangle* const osc)
{
 80180b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180b8:	ed2d 8b10 	vpush	{d8-d15}
    _tMBTriangle* c = *osc;
 80180bc:	6804      	ldr	r4, [r0, #0]
    sync = c->sync;

    p = c->_p;  /* phase [0, 1) */
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 80180be:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
    
    

    b = 0.5f * (1.0f + c->waveform);
 80180c2:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
{
 80180c6:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
 80180c8:	ed94 7a03 	vldr	s14, [r4, #12]
{
 80180cc:	4607      	mov	r7, r0
    sync = c->sync;
 80180ce:	ed94 8a05 	vldr	s16, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 80180d2:	ee37 7a28 	vadd.f32	s14, s14, s17
    invB = 1.0f / b;
 80180d6:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80180da:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    p = c->_p;  /* phase [0, 1) */
 80180de:	edd4 6a08 	vldr	s13, [r4, #32]
    invB = 1.0f / b;
 80180e2:	ee88 daa7 	vdiv.f32	s26, s17, s15
    w = c->_w;  /* phase increment */
 80180e6:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 80180ea:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
 80180ee:	6b65      	ldr	r5, [r4, #52]	; 0x34
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 80180f0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    b = 0.5f * (1.0f + c->waveform);
 80180f2:	ee67 9a0b 	vmul.f32	s19, s14, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80180f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 80180fa:	ee78 7ae9 	vsub.f32	s15, s17, s19
    invB1 = 1.0f / b1;
 80180fe:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018102:	f340 8181 	ble.w	8018408 <tMBTriangle_tick+0x354>
 8018106:	f8d4 901c 	ldr.w	r9, [r4, #28]
 801810a:	f1b9 0f00 	cmp.w	r9, #0
 801810e:	f340 8138 	ble.w	8018382 <tMBTriangle_tick+0x2ce>
 8018112:	edd4 7a06 	vldr	s15, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8018116:	ed94 ca0f 	vldr	s24, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801811a:	eef1 7a67 	vneg.f32	s15, s15
    sw = w * c->syncdir;
 801811e:	ee67 baaa 	vmul.f32	s23, s15, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018122:	edc4 7a06 	vstr	s15, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8018126:	ee27 ca8c 	vmul.f32	s24, s15, s24
    p += sw - (int)sw;
 801812a:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 801812e:	ee7b 6aa6 	vadd.f32	s13, s23, s13
 8018132:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8018136:	ee36 8ac8 	vsub.f32	s16, s13, s16
                x = -0.5f + p * invB;
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 801813a:	2e00      	cmp	r6, #0
 801813c:	f040 8177 	bne.w	801842e <tMBTriangle_tick+0x37a>
        
        x = -0.5f + p * invB;
 8018140:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8018144:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = -0.5f + p * invB;
 8018148:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 801814c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 8018150:	eee8 8a0d 	vfma.f32	s17, s16, s26
        if (sw > 0)
 8018154:	f340 8252 	ble.w	80185fc <tMBTriangle_tick+0x548>
        {
            if (p >= b) {
 8018158:	eeb4 8ae9 	vcmpe.f32	s16, s19
 801815c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018160:	f280 820c 	bge.w	801857c <tMBTriangle_tick+0x4c8>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8018164:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 8018166:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801816a:	eeb4 8ac9 	vcmpe.f32	s16, s18
 801816e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018172:	f280 837b 	bge.w	801886c <tMBTriangle_tick+0x7b8>
 8018176:	461e      	mov	r6, r3
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
                k = 1;
            }
        }
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8018178:	1d2b      	adds	r3, r5, #4
 801817a:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 801817e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018182:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8018186:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 801818a:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801818e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018192:	2b00      	cmp	r3, #0
 8018194:	f000 80d3 	beq.w	801833e <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    	whichBLEP &= 63;

    	//use the scale and r values from the BLEPproperties array to compute the current state of each active BLEP and add it to the output value

    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 8018198:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801819c:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80181a0:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80181a2:	48ea      	ldr	r0, [pc, #936]	; (801854c <tMBTriangle_tick+0x498>)
 80181a4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80181a8:	4fe9      	ldr	r7, [pc, #932]	; (8018550 <tMBTriangle_tick+0x49c>)
 80181aa:	e053      	b.n	8018254 <tMBTriangle_tick+0x1a0>
 80181ac:	f8bd e006 	ldrh.w	lr, [sp, #6]
 80181b0:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80181b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80181b8:	fa1f fe8e 	uxth.w	lr, lr
 80181bc:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 80181c0:	fa1f f989 	uxth.w	r9, r9
 80181c4:	b29b      	uxth	r3, r3
 80181c6:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 80181ca:	fa1f f888 	uxth.w	r8, r8
 80181ce:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80181d2:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 80181d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80181da:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 80181de:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 80181e2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80181e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80181ea:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 80181ee:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 80181f2:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 80181f6:	ed99 7a00 	vldr	s14, [r9]
 80181fa:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80181fe:	edd3 5a01 	vldr	s11, [r3, #4]
 8018202:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 8018206:	eea5 7a25 	vfma.f32	s14, s10, s11
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801820a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801820e:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018212:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018214:	fa1f fe8e 	uxth.w	lr, lr
 8018218:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801821c:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018220:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018224:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018228:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 801822c:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8018230:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018234:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8018238:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 801823c:	459e      	cmp	lr, r3
 801823e:	d304      	bcc.n	801824a <tMBTriangle_tick+0x196>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 8018240:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8018244:	3b01      	subs	r3, #1
 8018246:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801824a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801824e:	3201      	adds	r2, #1
 8018250:	4293      	cmp	r3, r2
 8018252:	dd74      	ble.n	801833e <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8018254:	ebac 0302 	sub.w	r3, ip, r2
 8018258:	b29b      	uxth	r3, r3
 801825a:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 801825e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018266:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 801826a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801826e:	b29b      	uxth	r3, r3
 8018270:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018278:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 801827c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8018280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018284:	d492      	bmi.n	80181ac <tMBTriangle_tick+0xf8>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8018286:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801828a:	f8bd e006 	ldrh.w	lr, [sp, #6]
 801828e:	b29b      	uxth	r3, r3
 8018290:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8018294:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8018298:	fa1f fe8e 	uxth.w	lr, lr
 801829c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80182a0:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 80182a4:	fa1f f989 	uxth.w	r9, r9
 80182a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80182ac:	fa1f f888 	uxth.w	r8, r8
 80182b0:	edd3 5a3c 	vldr	s11, [r3, #240]	; 0xf0
 80182b4:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80182b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80182bc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80182c0:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 80182c4:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 80182c8:	b29b      	uxth	r3, r3
 80182ca:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80182ce:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 80182d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80182d6:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 80182da:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 80182de:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80182e2:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80182e6:	edd8 6a01 	vldr	s13, [r8, #4]
 80182ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80182ee:	ed9e 7a00 	vldr	s14, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80182f2:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80182f6:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80182fa:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80182fe:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8018302:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8018306:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 801830a:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 801830e:	eea5 7a26 	vfma.f32	s14, s10, s13
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8018312:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8018316:	eee5 7a87 	vfma.f32	s15, s11, s14
 801831a:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801831e:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 8018322:	3340      	adds	r3, #64	; 0x40
 8018324:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8018328:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 801832c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8018330:	459e      	cmp	lr, r3
 8018332:	d285      	bcs.n	8018240 <tMBTriangle_tick+0x18c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018334:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018338:	3201      	adds	r2, #1
 801833a:	4293      	cmp	r3, r2
 801833c:	dc8a      	bgt.n	8018254 <tMBTriangle_tick+0x1a0>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 801833e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018342:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018346:	eef0 7a4a 	vmov.f32	s15, s20
    c->out = z;
    j = (j+1) & 7;
 801834a:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 801834c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
    j = (j+1) & 7;
 8018350:	f005 0507 	and.w	r5, r5, #7
    c->_p = p;
 8018354:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8018358:	ee37 7a4a 	vsub.f32	s14, s14, s20
    c->_w = w;
 801835c:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 8018360:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 8018364:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_z = z;
    c->_j = j;
    c->_k = k;
 8018368:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
    
    return -c->out;
 801836c:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8018370:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8018374:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
}
 8018378:	b003      	add	sp, #12
 801837a:	ecbd 8b10 	vpop	{d8-d15}
 801837e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018382:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8018386:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 801838a:	ee6a ba8c 	vmul.f32	s23, s21, s24
    float inv_sw = c->_inv_w * c->syncdir;
 801838e:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 8018392:	eefd caeb 	vcvt.s32.f32	s25, s23
 8018396:	ee36 9aab 	vadd.f32	s18, s13, s23
 801839a:	eef8 caec 	vcvt.f32.s32	s25, s25
 801839e:	ee39 ea6c 	vsub.f32	s28, s18, s25
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 80183a2:	f040 863b 	bne.w	801901c <tMBTriangle_tick+0xf68>
        if (sw > 0) p = eof_offset;
 80183a6:	eef5 bac0 	vcmpe.f32	s23, #0.0
 80183aa:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 80183ac:	ee28 8a2b 	vmul.f32	s16, s16, s23
        if (sw > 0) p = eof_offset;
 80183b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 80183b4:	ee7e ea48 	vsub.f32	s29, s28, s16
        if (sw > 0) p = eof_offset;
 80183b8:	f340 80ce 	ble.w	8018558 <tMBTriangle_tick+0x4a4>
        if (!k) {
 80183bc:	2e00      	cmp	r6, #0
 80183be:	f040 81e1 	bne.w	8018784 <tMBTriangle_tick+0x6d0>
                if (p_at_reset >= b) {
 80183c2:	eef4 9aee 	vcmpe.f32	s19, s29
 80183c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183ca:	f240 8449 	bls.w	8018c60 <tMBTriangle_tick+0xbac>
                if (p_at_reset >= 1.0f) {
 80183ce:	eef4 eae8 	vcmpe.f32	s29, s17
 80183d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183d6:	f280 82bf 	bge.w	8018958 <tMBTriangle_tick+0x8a4>
 80183da:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8018554 <tMBTriangle_tick+0x4a0>
            x = -0.5f + p_at_reset * invB;
 80183de:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80183e2:	ee2c ca27 	vmul.f32	s24, s24, s15
 80183e6:	eeb0 9a40 	vmov.f32	s18, s0
	i = lrintf(r - 0.5f);
 80183ea:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80183ee:	f005 fc8f 	bl	801dd10 <lrintf>
	r -= (float)i;
 80183f2:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 80183f6:	eead 9a2e 	vfma.f32	s18, s26, s29
	c->BLEPindices[c->mostRecentBLEP] = i;
 80183fa:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 80183fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018402:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 8018406:	e203      	b.n	8018810 <tMBTriangle_tick+0x75c>
    sw = w * c->syncdir;
 8018408:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 801840c:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8018410:	ee6c ba2a 	vmul.f32	s23, s24, s21
    float inv_sw = c->_inv_w * c->syncdir;
 8018414:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 8018418:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 801841c:	ee7b 6aa6 	vadd.f32	s13, s23, s13
 8018420:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8018424:	ee36 8ac8 	vsub.f32	s16, s13, s16
    } else if (!k) {  /* normal operation, slope currently up */
 8018428:	2e00      	cmp	r6, #0
 801842a:	f43f ae89 	beq.w	8018140 <tMBTriangle_tick+0x8c>
        x = 0.5f - (p - b) * invB1;
 801842e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
        if (sw > 0)
 8018432:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = 0.5f - (p - b) * invB1;
 8018436:	ee79 7ac8 	vsub.f32	s15, s19, s16
 801843a:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 801843e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 8018442:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 8018446:	f340 815a 	ble.w	80186fe <tMBTriangle_tick+0x64a>
            if (p >= 1.0f) {
 801844a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 801844e:	eeb4 8acb 	vcmpe.f32	s16, s22
 8018452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018456:	f6ff ae8f 	blt.w	8018178 <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
 801845a:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 801845e:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8018554 <tMBTriangle_tick+0x4a0>
                p -= 1.0f;
 8018462:	ee78 ca4b 	vsub.f32	s25, s16, s22
	_tMBTriangle* c = *osc;
 8018466:	683e      	ldr	r6, [r7, #0]
 8018468:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 801846c:	eeb0 0a68 	vmov.f32	s0, s17
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8018470:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 8018474:	eeac 0a8c 	vfma.f32	s0, s25, s24
	scale *= w;
 8018478:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
 801847c:	f005 fc48 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018480:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018484:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018488:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 801848c:	eef4 9aec 	vcmpe.f32	s19, s25
	r -= (float)i;
 8018490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018494:	3301      	adds	r3, #1
 8018496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 801849a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 801849e:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80184a2:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80184a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80184aa:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80184ae:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80184b2:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 80184b6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80184ba:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80184be:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80184c2:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 80184c6:	f103 0301 	add.w	r3, r3, #1
 80184ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80184ce:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 80184d2:	f200 843e 	bhi.w	8018d52 <tMBTriangle_tick+0xc9e>
                x = 0.5f - (p - b) * invB1;
 80184d6:	ee79 7a8b 	vadd.f32	s15, s19, s22
	_tMBTriangle* c = *osc;
 80184da:	683f      	ldr	r7, [r7, #0]
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 80184dc:	ee3c dae9 	vsub.f32	s26, s25, s19
	i = lrintf(r - 0.5f);
 80184e0:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 80184e4:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80184e8:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 80184ec:	eead 0a0c 	vfma.f32	s0, s26, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80184f0:	eef1 ba6b 	vneg.f32	s23, s23
                x = 0.5f - (p - b) * invB1;
 80184f4:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 80184f8:	f005 fc0a 	bl	801dd10 <lrintf>
	r -= (float)i;
 80184fc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018500:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018504:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p -= 1.0f;
 8018508:	eeb0 8a6c 	vmov.f32	s16, s25
	r -= (float)i;
 801850c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018510:	3301      	adds	r3, #1
 8018512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018516:	eedd 7a0c 	vfnms.f32	s15, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801851a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801851e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018522:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018526:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801852a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801852e:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018532:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018536:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801853a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 801853e:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018540:	4433      	add	r3, r6
 8018542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018546:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 801854a:	e615      	b.n	8018178 <tMBTriangle_tick+0xc4>
 801854c:	08028ff4 	.word	0x08028ff4
 8018550:	0802d6f8 	.word	0x0802d6f8
 8018554:	42800000 	.word	0x42800000
        else if (sw < 0) p = 1.0f - eof_offset;
 8018558:	f100 828a 	bmi.w	8018a70 <tMBTriangle_tick+0x9bc>
        if (!k) {
 801855c:	2e00      	cmp	r6, #0
 801855e:	f000 81f4 	beq.w	801894a <tMBTriangle_tick+0x896>
            x = 0.5f - (p_at_reset - b) * invB1;
 8018562:	ee79 7a88 	vadd.f32	s15, s19, s16
 8018566:	ee7c cac9 	vsub.f32	s25, s25, s18
 801856a:	eef0 8a4b 	vmov.f32	s17, s22
    p += sw - (int)sw;
 801856e:	eeb0 8a4e 	vmov.f32	s16, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 8018572:	ee77 7aac 	vadd.f32	s15, s15, s25
 8018576:	eee7 8aad 	vfma.f32	s17, s15, s27
        else if (sw < 0)
 801857a:	e5fd      	b.n	8018178 <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;;
 801857c:	ed5f ca0b 	vldr	s25, [pc, #-44]	; 8018554 <tMBTriangle_tick+0x4a0>
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8018580:	ee38 ea69 	vsub.f32	s28, s16, s19
	i = lrintf(r - 0.5f);
 8018584:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 8018588:	f8d7 8000 	ldr.w	r8, [r7]
 801858c:	ee6c ca2c 	vmul.f32	s25, s24, s25
                x = 0.5f - (p - b) * invB1;;
 8018590:	ee79 7ac8 	vsub.f32	s15, s19, s16
 8018594:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8018598:	eeae 0a2c 	vfma.f32	s0, s28, s25
 801859c:	ee3d ba2d 	vadd.f32	s22, s26, s27
                x = 0.5f - (p - b) * invB1;;
 80185a0:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 80185a4:	f005 fbb4 	bl	801dd10 <lrintf>
	r -= (float)i;
 80185a8:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185ac:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80185b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80185b4:	ee6b 7acb 	vnmul.f32	s15, s23, s22
	r -= (float)i;
 80185b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185bc:	3301      	adds	r3, #1
 80185be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80185c2:	ee9e 7a2c 	vfnms.f32	s14, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185c6:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80185ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80185ce:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80185d2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80185d6:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80185da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80185de:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80185e2:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80185e6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80185ea:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80185ee:	3301      	adds	r3, #1
 80185f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80185f4:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 80185f8:	2301      	movs	r3, #1
}
 80185fa:	e5b4      	b.n	8018166 <tMBTriangle_tick+0xb2>
            if (p < 0.0f) {
 80185fc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018604:	f57f adb8 	bpl.w	8018178 <tMBTriangle_tick+0xc4>
 8018608:	eef5 ba40 	vcmp.f32	s23, #0.0
 801860c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018610:	f57f adb2 	bpl.w	8018178 <tMBTriangle_tick+0xc4>
	r = MINBLEP_PHASES * phase * inv_w;
 8018614:	ee2c ba08 	vmul.f32	s22, s24, s16
	i = lrintf(r - 0.5f);
 8018618:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 8018554 <tMBTriangle_tick+0x4a0>
 801861c:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 8018620:	f8d7 8000 	ldr.w	r8, [r7]
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8018624:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 8018628:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801862c:	eeab 0a28 	vfma.f32	s0, s22, s17
 8018630:	ee67 baab 	vmul.f32	s23, s15, s23
 8018634:	f005 fb6c 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018638:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801863c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018640:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 8018644:	ee38 8a2c 	vadd.f32	s16, s16, s25
	r -= (float)i;
 8018648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801864c:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801864e:	eeb1 7a6b 	vneg.f32	s14, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 8018656:	eef4 9ac8 	vcmpe.f32	s19, s16
	r -= (float)i;
 801865a:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801865e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018662:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018666:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 801866a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801866e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018672:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018676:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801867a:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801867e:	edc3 ca3d 	vstr	s25, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018682:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018686:	f103 0301 	add.w	r3, r3, #1
 801868a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801868e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 8018692:	f340 84c7 	ble.w	8019024 <tMBTriangle_tick+0xf70>
                x = -0.5f + p * invB;
 8018696:	ee2c ca28 	vmul.f32	s24, s24, s17
	_tMBTriangle* c = *osc;
 801869a:	683f      	ldr	r7, [r7, #0]
 801869c:	ee78 da69 	vsub.f32	s27, s16, s19
	i = lrintf(r - 0.5f);
 80186a0:	eeb0 0a49 	vmov.f32	s0, s18
                x = -0.5f + p * invB;
 80186a4:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 80186a8:	eead 0a8c 	vfma.f32	s0, s27, s24
 80186ac:	f005 fb30 	bl	801dd10 <lrintf>
	r -= (float)i;
 80186b0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80186b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80186b8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80186bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80186c0:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 80186c2:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80186c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80186ca:	eedd 7a8c 	vfnms.f32	s15, s27, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80186ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80186d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80186d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80186da:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80186de:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 80186e2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80186e6:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80186ea:	edc3 ca3d 	vstr	s25, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80186ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80186f2:	3301      	adds	r3, #1
 80186f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80186f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80186fc:	e53c      	b.n	8018178 <tMBTriangle_tick+0xc4>
        else if (sw < 0)
 80186fe:	f57f ad3b 	bpl.w	8018178 <tMBTriangle_tick+0xc4>
            if (p < b) {
 8018702:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8018706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801870a:	f100 8174 	bmi.w	80189f6 <tMBTriangle_tick+0x942>
            if (p < 0.0f) {
 801870e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018716:	f57f ad2f 	bpl.w	8018178 <tMBTriangle_tick+0xc4>
                p += 1.0f;
 801871a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801871e:	ed1f ba73 	vldr	s22, [pc, #-460]	; 8018554 <tMBTriangle_tick+0x4a0>
	r = MINBLEP_PHASES * phase * inv_w;
 8018722:	ee2c ca08 	vmul.f32	s24, s24, s16
	_tMBTriangle* c = *osc;
 8018726:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8018728:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 801872c:	ee38 8a09 	vadd.f32	s16, s16, s18
                x = 0.5f - (p - b) * invB1;
 8018730:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8018734:	eeac 0a0b 	vfma.f32	s0, s24, s22
                x = 0.5f - (p - b) * invB1;
 8018738:	ee79 7ac8 	vsub.f32	s15, s19, s16
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 801873c:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8018740:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8018744:	f005 fae4 	bl	801dd10 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018748:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	r -= (float)i;
 801874c:	ee07 0a90 	vmov	s15, r0
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018750:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018754:	ee2d da6b 	vnmul.f32	s26, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018758:	3301      	adds	r3, #1
	r -= (float)i;
 801875a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801875e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018762:	eedc 7a0b 	vfnms.f32	s15, s24, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018766:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801876a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801876e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018772:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018776:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801877a:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801877e:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
 8018782:	e6d8      	b.n	8018536 <tMBTriangle_tick+0x482>
            x = 0.5f - (p_at_reset - b) * invB1;
 8018784:	ee7c cac9 	vsub.f32	s25, s25, s18
 8018788:	ee79 7a88 	vadd.f32	s15, s19, s16
                if (p_at_reset >= 1.0f) {
 801878c:	eef4 eae8 	vcmpe.f32	s29, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 8018790:	eeb0 9a4b 	vmov.f32	s18, s22
 8018794:	ee77 7aac 	vadd.f32	s15, s15, s25
                if (p_at_reset >= 1.0f) {
 8018798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 801879c:	eea7 9aad 	vfma.f32	s18, s15, s27
                if (p_at_reset >= 1.0f) {
 80187a0:	f280 81e1 	bge.w	8018b66 <tMBTriangle_tick+0xab2>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80187a4:	ee3d ea2d 	vadd.f32	s28, s26, s27
 80187a8:	ed5f 7a96 	vldr	s15, [pc, #-600]	; 8018554 <tMBTriangle_tick+0x4a0>
 80187ac:	ee2c ca27 	vmul.f32	s24, s24, s15
 80187b0:	ee2e ea2b 	vmul.f32	s28, s28, s23
	i = lrintf(r - 0.5f);
 80187b4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80187b8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80187bc:	f005 faa8 	bl	801dd10 <lrintf>
	r -= (float)i;
 80187c0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187c4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 80187c8:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 80187cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187d0:	3301      	adds	r3, #1
	r -= (float)i;
 80187d2:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80187da:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80187de:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80187e2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80187e6:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80187ea:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80187ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80187f2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80187f6:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80187fa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80187fe:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018802:	3301      	adds	r3, #1
 8018804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018808:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 801880c:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018810:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8018814:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            if (p >= b) {
 8018818:	eef4 9ac8 	vcmpe.f32	s19, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801881c:	3301      	adds	r3, #1
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 801881e:	ee38 9ac9 	vsub.f32	s18, s17, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018822:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 8018826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801882a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801882e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018832:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	scale *= w;
 8018836:	ee29 9a2b 	vmul.f32	s18, s18, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 801883a:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801883e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018842:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018846:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801884a:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801884e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018852:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018856:	f103 0301 	add.w	r3, r3, #1
 801885a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801885e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 8018862:	d93d      	bls.n	80188e0 <tMBTriangle_tick+0x82c>
            x = -0.5f + p * invB;
 8018864:	eeed 8a08 	vfma.f32	s17, s26, s16
            k = 0;
 8018868:	464e      	mov	r6, r9
 801886a:	e485      	b.n	8018178 <tMBTriangle_tick+0xc4>
                p -= 1.0f;
 801886c:	ed1f bac7 	vldr	s22, [pc, #-796]	; 8018554 <tMBTriangle_tick+0x4a0>
 8018870:	ee38 8a49 	vsub.f32	s16, s16, s18
                x = -0.5f + p * invB;
 8018874:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 8018878:	683f      	ldr	r7, [r7, #0]
 801887a:	ee2c ba0b 	vmul.f32	s22, s24, s22
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 801887e:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 8018882:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8018886:	eea8 0a0b 	vfma.f32	s0, s16, s22
 801888a:	f005 fa41 	bl	801dd10 <lrintf>
	r -= (float)i;
 801888e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018892:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018896:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801889a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801889e:	3301      	adds	r3, #1
	scale *= w;
 80188a0:	ee6d daab 	vmul.f32	s27, s27, s23
                x = -0.5f + p * invB;
 80188a4:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80188ac:	eed8 7a0b 	vfnms.f32	s15, s16, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80188b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80188b8:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80188bc:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80188c0:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 80188c4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80188c8:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80188cc:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80188d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80188d4:	3301      	adds	r3, #1
 80188d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80188da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80188de:	e44b      	b.n	8018178 <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;
 80188e0:	ee39 7ac8 	vsub.f32	s14, s19, s16
	_tMBTriangle* c = *osc;
 80188e4:	683f      	ldr	r7, [r7, #0]
                x = 0.5f - (p - b) * invB1;
 80188e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 80188ea:	ee38 9a69 	vsub.f32	s18, s16, s19
	i = lrintf(r - 0.5f);
 80188ee:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 80188f2:	eee7 7a2d 	vfma.f32	s15, s14, s27
 80188f6:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 80188fa:	eea9 0a0c 	vfma.f32	s0, s18, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80188fe:	ee2b dacd 	vnmul.f32	s26, s23, s26
                x = 0.5f - (p - b) * invB1;
 8018902:	eef0 8a67 	vmov.f32	s17, s15
	i = lrintf(r - 0.5f);
 8018906:	f005 fa03 	bl	801dd10 <lrintf>
	r -= (float)i;
 801890a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801890e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018912:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018916:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	r -= (float)i;
 801891a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801891e:	3301      	adds	r3, #1
 8018920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018924:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018928:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801892c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018930:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018934:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018938:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 801893c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018940:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018944:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018948:	e5f7      	b.n	801853a <tMBTriangle_tick+0x486>
            x = -0.5f + p_at_reset * invB;
 801894a:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    p += sw - (int)sw;
 801894e:	eeb0 8a4e 	vmov.f32	s16, s28
            x = -0.5f + p_at_reset * invB;
 8018952:	eeed 8a2e 	vfma.f32	s17, s26, s29
            else if (sw < 0)
 8018956:	e40f      	b.n	8018178 <tMBTriangle_tick+0xc4>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8018958:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 801895c:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 8018cf8 <tMBTriangle_tick+0xc44>
 8018960:	ee2c ca07 	vmul.f32	s24, s24, s14
 8018964:	ee27 faab 	vmul.f32	s30, s15, s23
                    p_at_reset -= 1.0f;
 8018968:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 801896c:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 8018970:	ee7e eacb 	vsub.f32	s29, s29, s22
	i = lrintf(r - 0.5f);
 8018974:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 8018978:	eeb0 9a68 	vmov.f32	s18, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 801897c:	ee78 ca2e 	vadd.f32	s25, s16, s29
                    x = -0.5f + p_at_reset * invB;
 8018980:	eead 9a2e 	vfma.f32	s18, s26, s29
	i = lrintf(r - 0.5f);
 8018984:	eeac 0a8c 	vfma.f32	s0, s25, s24
 8018988:	f005 f9c2 	bl	801dd10 <lrintf>
	r -= (float)i;
 801898c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018990:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018994:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801899c:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 801899e:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 80189a2:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 80189aa:	eea8 0a0c 	vfma.f32	s0, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189ae:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80189b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80189b6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80189ba:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80189be:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80189c2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80189c6:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80189ca:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80189ce:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80189d2:	3301      	adds	r3, #1
 80189d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80189d8:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 80189dc:	f005 f998 	bl	801dd10 <lrintf>
	r -= (float)i;
 80189e0:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80189e4:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80189e8:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 80189ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80189f0:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 80189f4:	e70c      	b.n	8018810 <tMBTriangle_tick+0x75c>
                x = -0.5f + p * invB;
 80189f6:	ed9f 9ac0 	vldr	s18, [pc, #768]	; 8018cf8 <tMBTriangle_tick+0xc44>
 80189fa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80189fe:	ee38 ba69 	vsub.f32	s22, s16, s19
	_tMBTriangle* c = *osc;
 8018a02:	683e      	ldr	r6, [r7, #0]
 8018a04:	ee2c 9a09 	vmul.f32	s18, s24, s18
                x = -0.5f + p * invB;
 8018a08:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8018a0c:	eeab 0a09 	vfma.f32	s0, s22, s18
 8018a10:	f005 f97e 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018a14:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a18:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 8018a1c:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 8018a20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018a24:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a28:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8018a2a:	eee8 8a0d 	vfma.f32	s17, s16, s26
	scale *= w;
 8018a2e:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018a36:	ee9b 7a09 	vfnms.f32	s14, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a3a:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018a3e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018a42:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8018a46:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018a4a:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018a4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018a52:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018a56:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018a5a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018a5e:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8018a62:	3301      	adds	r3, #1
 8018a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018a68:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 8018a6c:	2600      	movs	r6, #0
}
 8018a6e:	e64e      	b.n	801870e <tMBTriangle_tick+0x65a>
        else if (sw < 0) p = 1.0f - eof_offset;
 8018a70:	ee38 fac8 	vsub.f32	s30, s17, s16
        if (!k) {
 8018a74:	2e00      	cmp	r6, #0
 8018a76:	f040 8141 	bne.w	8018cfc <tMBTriangle_tick+0xc48>
                if (p_at_reset < 0.0f) {
 8018a7a:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8018a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a82:	f100 81ac 	bmi.w	8018dde <tMBTriangle_tick+0xd2a>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8018a86:	ee3d ba2d 	vadd.f32	s22, s26, s27
 8018a8a:	ed9f 9a9b 	vldr	s18, [pc, #620]	; 8018cf8 <tMBTriangle_tick+0xc44>
            x = -0.5f + p_at_reset * invB;
 8018a8e:	ee6d ca2e 	vmul.f32	s25, s26, s29
 8018a92:	ee2c 9a09 	vmul.f32	s18, s24, s18
 8018a96:	ee2b bacb 	vnmul.f32	s22, s23, s22
	i = lrintf(r - 0.5f);
 8018a9a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018a9e:	eef1 8a48 	vneg.f32	s17, s16
 8018aa2:	eea8 0a49 	vfms.f32	s0, s16, s18
 8018aa6:	f005 f933 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018aaa:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018aae:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018ab2:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8018ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018aba:	3301      	adds	r3, #1
	r -= (float)i;
 8018abc:	eed8 7a89 	vfnms.f32	s15, s17, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018ac4:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018ac8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018acc:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018ad0:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018ad4:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018ad8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018adc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018ae0:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018ae4:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018ae8:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018aec:	3301      	adds	r3, #1
 8018aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018af2:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8018af6:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018afa:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 8018afe:	ee6b caac 	vmul.f32	s25, s23, s25
            if (p < b) {
 8018b02:	eef4 9acf 	vcmpe.f32	s19, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b06:	3301      	adds	r3, #1
 8018b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 8018b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b10:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018b14:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018b18:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018b1c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018b20:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018b24:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018b28:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018b2c:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018b30:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018b34:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018b38:	f103 0301 	add.w	r3, r3, #1
 8018b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018b40:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 8018b44:	f300 810c 	bgt.w	8018d60 <tMBTriangle_tick+0xcac>
            x = 0.5f - (p - b) * invB1;
 8018b48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            k = 1;
 8018b4c:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 8018b4e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8018b52:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018b56:	eeb0 8a4f 	vmov.f32	s16, s30
 8018b5a:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8018b5e:	eee7 8aad 	vfma.f32	s17, s15, s27
 8018b62:	f7ff bb09 	b.w	8018178 <tMBTriangle_tick+0xc4>
                    p_at_reset -= 1.0f;
 8018b66:	ee7e eae8 	vsub.f32	s29, s29, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8018b6a:	eddf 7a63 	vldr	s15, [pc, #396]	; 8018cf8 <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 8018b6e:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
 8018b72:	ee2c ca27 	vmul.f32	s24, s24, s15
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8018b76:	ee38 fa2e 	vadd.f32	s30, s16, s29
	i = lrintf(r - 0.5f);
 8018b7a:	eeb0 0a49 	vmov.f32	s0, s18
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8018b7e:	ee3d ea2d 	vadd.f32	s28, s26, s27
	i = lrintf(r - 0.5f);
 8018b82:	eeac 0a0f 	vfma.f32	s0, s24, s30
 8018b86:	f005 f8c3 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018b8a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b8e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018b92:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b9a:	3301      	adds	r3, #1
	scale *= w;
 8018b9c:	ee2e ea2b 	vmul.f32	s28, s28, s23
                if (!k && p_at_reset >= b) {
 8018ba0:	eef4 9aee 	vcmpe.f32	s19, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018ba8:	eedc 7a0f 	vfnms.f32	s15, s24, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018bac:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018bb0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018bb4:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 8018bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018bbc:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018bc0:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018bc4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018bc8:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018bcc:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018bd0:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018bd4:	f103 0301 	add.w	r3, r3, #1
 8018bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018bdc:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 8018be0:	f200 81b1 	bhi.w	8018f46 <tMBTriangle_tick+0xe92>
                    x = 0.5f - (p_at_reset - b) * invB1;
 8018be4:	ee39 7aa8 	vadd.f32	s14, s19, s17
	_tMBTriangle* c = *osc;
 8018be8:	683e      	ldr	r6, [r7, #0]
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8018bea:	ee78 7a69 	vsub.f32	s15, s16, s19
	i = lrintf(r - 0.5f);
 8018bee:	eeb0 0a49 	vmov.f32	s0, s18
                    x = 0.5f - (p_at_reset - b) * invB1;
 8018bf2:	ee37 7a08 	vadd.f32	s14, s14, s16
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8018bf6:	ee77 eaae 	vadd.f32	s29, s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 8018bfa:	eeb0 9a4b 	vmov.f32	s18, s22
 8018bfe:	ee77 7a2c 	vadd.f32	s15, s14, s25
	i = lrintf(r - 0.5f);
 8018c02:	eeac 0a2e 	vfma.f32	s0, s24, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 8018c06:	eea7 9aad 	vfma.f32	s18, s15, s27
	i = lrintf(r - 0.5f);
 8018c0a:	f005 f881 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018c0e:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c12:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018c16:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018c1a:	eef1 7a4e 	vneg.f32	s15, s28
	r -= (float)i;
 8018c1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c22:	3301      	adds	r3, #1
 8018c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018c28:	ee9c 7a2e 	vfnms.f32	s14, s24, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c2c:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018c30:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018c34:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8018c38:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018c3c:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8018c40:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018c44:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018c48:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018c4c:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8018c50:	3301      	adds	r3, #1
 8018c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018c56:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 8018c5a:	f8d7 8000 	ldr.w	r8, [r7]
 8018c5e:	e5a9      	b.n	80187b4 <tMBTriangle_tick+0x700>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8018c60:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8018cf8 <tMBTriangle_tick+0xc44>
 8018c64:	ee3e fa69 	vsub.f32	s30, s28, s19
	i = lrintf(r - 0.5f);
 8018c68:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018c6c:	ee2c ca07 	vmul.f32	s24, s24, s14
 8018c70:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 8018c74:	eeaf 0a0c 	vfma.f32	s0, s30, s24
 8018c78:	ee27 eaab 	vmul.f32	s28, s15, s23
 8018c7c:	f005 f848 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018c80:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c84:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018c88:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 8018c8c:	eef4 eae8 	vcmpe.f32	s29, s17
	r -= (float)i;
 8018c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c94:	3301      	adds	r3, #1
 8018c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 8018c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8018c9e:	eedf 7a0c 	vfnms.f32	s15, s30, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018ca2:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018ca6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018caa:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018cae:	eeb0 fa4e 	vmov.f32	s30, s28
 8018cb2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018cb6:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018cba:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018cbe:	eef1 7a4e 	vneg.f32	s15, s28
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018cc2:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018cc6:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018cca:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018cce:	f103 0301 	add.w	r3, r3, #1
 8018cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018cd6:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 8018cda:	da7d      	bge.n	8018dd8 <tMBTriangle_tick+0xd24>
                    x = 0.5f - (p_at_reset - b) * invB1;
 8018cdc:	ee79 7a88 	vadd.f32	s15, s19, s16
 8018ce0:	f8d7 8000 	ldr.w	r8, [r7]
 8018ce4:	ee77 7aac 	vadd.f32	s15, s15, s25
 8018ce8:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8018cec:	eeb0 9a4b 	vmov.f32	s18, s22
 8018cf0:	eea7 9aad 	vfma.f32	s18, s15, s27
 8018cf4:	e55e      	b.n	80187b4 <tMBTriangle_tick+0x700>
 8018cf6:	bf00      	nop
 8018cf8:	42800000 	.word	0x42800000
            x = 0.5f - (p_at_reset - b) * invB1;
 8018cfc:	ee39 7a88 	vadd.f32	s14, s19, s16
 8018d00:	ee7c cac9 	vsub.f32	s25, s25, s18
                if (p_at_reset < b) {
 8018d04:	eef4 9aee 	vcmpe.f32	s19, s29
            x = 0.5f - (p_at_reset - b) * invB1;
 8018d08:	ee37 7a2c 	vadd.f32	s14, s14, s25
                if (p_at_reset < b) {
 8018d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8018d10:	ee67 7a2d 	vmul.f32	s15, s14, s27
                if (p_at_reset < b) {
 8018d14:	f300 80d6 	bgt.w	8018ec4 <tMBTriangle_tick+0xe10>
                if (p_at_reset < 0.0f) {
 8018d18:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8018d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d20:	f100 8124 	bmi.w	8018f6c <tMBTriangle_tick+0xeb8>
        else if (sw < 0)
 8018d24:	ed1f 9a0c 	vldr	s18, [pc, #-48]	; 8018cf8 <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 8018d28:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018d2c:	ee77 caa8 	vadd.f32	s25, s15, s17
 8018d30:	ee2c 9a09 	vmul.f32	s18, s24, s18
 8018d34:	eef1 8a48 	vneg.f32	s17, s16
 8018d38:	eea8 0a49 	vfms.f32	s0, s16, s18
 8018d3c:	f004 ffe8 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018d40:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018d44:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8018d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018d4c:	eed9 7a28 	vfnms.f32	s15, s18, s17
 8018d50:	e6d3      	b.n	8018afa <tMBTriangle_tick+0xa46>
                x = -0.5f + p * invB;
 8018d52:	eeed 8a2c 	vfma.f32	s17, s26, s25
                k = 0;
 8018d56:	2600      	movs	r6, #0
                p -= 1.0f;
 8018d58:	eeb0 8a6c 	vmov.f32	s16, s25
 8018d5c:	f7ff ba0c 	b.w	8018178 <tMBTriangle_tick+0xc4>
                x = -0.5f + p * invB;
 8018d60:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 8018d64:	683f      	ldr	r7, [r7, #0]
 8018d66:	ee3f ba69 	vsub.f32	s22, s30, s19
                k = 0;
 8018d6a:	464e      	mov	r6, r9
}
 8018d6c:	eeb0 8a4f 	vmov.f32	s16, s30
	i = lrintf(r - 0.5f);
 8018d70:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 8018d74:	eeed 8a0f 	vfma.f32	s17, s26, s30
	i = lrintf(r - 0.5f);
 8018d78:	eeab 0a09 	vfma.f32	s0, s22, s18
 8018d7c:	f004 ffc8 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018d80:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018d84:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	scale *= w;
 8018d88:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 8018d8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018d90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018d94:	3301      	adds	r3, #1
	scale *= w;
 8018d96:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018d9e:	ee9b 7a09 	vfnms.f32	s14, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018da2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018da6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018daa:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018dae:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018db2:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018db6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018dba:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018dbe:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018dc2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018dc6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018dca:	3301      	adds	r3, #1
 8018dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018dd0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8018dd4:	f7ff b9d0 	b.w	8018178 <tMBTriangle_tick+0xc4>
 8018dd8:	f8d7 8000 	ldr.w	r8, [r7]
 8018ddc:	e5c4      	b.n	8018968 <tMBTriangle_tick+0x8b4>
	i = lrintf(r - 0.5f);
 8018dde:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
 8018de2:	ed1f 9a3b 	vldr	s18, [pc, #-236]	; 8018cf8 <tMBTriangle_tick+0xc44>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8018de6:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 8018dea:	ee2c 9a09 	vmul.f32	s18, s24, s18
	i = lrintf(r - 0.5f);
 8018dee:	eeb0 0a6f 	vmov.f32	s0, s31
 8018df2:	ee27 caab 	vmul.f32	s24, s15, s23
                    p_at_reset += 1.0f;
 8018df6:	ee7e eaa8 	vadd.f32	s29, s29, s17
	i = lrintf(r - 0.5f);
 8018dfa:	eea9 0a0e 	vfma.f32	s0, s18, s28
 8018dfe:	f004 ff87 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018e02:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e06:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018e0a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e12:	3301      	adds	r3, #1
 8018e14:	eeb1 ba4c 	vneg.f32	s22, s24
                if (k && p_at_reset < b) {
 8018e18:	eef4 9aee 	vcmpe.f32	s19, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018e20:	eed9 7a0e 	vfnms.f32	s15, s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e24:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018e28:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018e2c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 8018e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018e34:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018e38:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018e3c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018e40:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018e44:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018e48:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018e4c:	f103 0301 	add.w	r3, r3, #1
 8018e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018e54:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 8018e58:	f340 80ed 	ble.w	8019036 <tMBTriangle_tick+0xf82>
                    x = -0.5f + p_at_reset * invB;
 8018e5c:	ee38 ea69 	vsub.f32	s28, s16, s19
	_tMBTriangle* c = *osc;
 8018e60:	683e      	ldr	r6, [r7, #0]
	i = lrintf(r - 0.5f);
 8018e62:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = -0.5f + p_at_reset * invB;
 8018e66:	ee6d ca2e 	vmul.f32	s25, s26, s29
	r = MINBLEP_PHASES * phase * inv_w;
 8018e6a:	ee3e ea2e 	vadd.f32	s28, s28, s29
	i = lrintf(r - 0.5f);
 8018e6e:	eea9 0a0e 	vfma.f32	s0, s18, s28
 8018e72:	f004 ff4d 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018e76:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e7a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018e7e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e86:	3301      	adds	r3, #1
	r -= (float)i;
 8018e88:	eed9 7a0e 	vfnms.f32	s15, s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018e90:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018e94:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018e98:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8018e9c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018ea0:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8018ea4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018ea8:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018eac:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018eb0:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8018eb4:	3301      	adds	r3, #1
 8018eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018eba:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 8018ebe:	f8d7 8000 	ldr.w	r8, [r7]
 8018ec2:	e5ea      	b.n	8018a9a <tMBTriangle_tick+0x9e6>
	r = MINBLEP_PHASES * phase * inv_w;
 8018ec4:	ed1f 9a74 	vldr	s18, [pc, #-464]	; 8018cf8 <tMBTriangle_tick+0xc44>
 8018ec8:	ee78 fa47 	vsub.f32	s31, s16, s14
	i = lrintf(r - 0.5f);
 8018ecc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018ed0:	ee2c 9a09 	vmul.f32	s18, s24, s18
	scale *= w;
 8018ed4:	ee3d ba2d 	vadd.f32	s22, s26, s27
	i = lrintf(r - 0.5f);
 8018ed8:	eea9 0a2f 	vfma.f32	s0, s18, s31
 8018edc:	f004 ff18 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018ee0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018ee4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018ee8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018ef0:	3301      	adds	r3, #1
	scale *= w;
 8018ef2:	ee2b ba2b 	vmul.f32	s22, s22, s23
                if (p_at_reset < 0.0f) {
 8018ef6:	eef5 eac0 	vcmpe.f32	s29, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018efe:	eed9 7a2f 	vfnms.f32	s15, s18, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018f02:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018f06:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018f0a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 8018f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018f12:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018f16:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018f1a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018f1e:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018f22:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018f26:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018f2a:	f103 0301 	add.w	r3, r3, #1
 8018f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018f32:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 8018f36:	d46e      	bmi.n	8019016 <tMBTriangle_tick+0xf62>
                    x = -0.5f + p_at_reset * invB;
 8018f38:	ee6d ca2e 	vmul.f32	s25, s26, s29
        else if (sw < 0)
 8018f3c:	f8d7 8000 	ldr.w	r8, [r7]
 8018f40:	eeb1 ba4b 	vneg.f32	s22, s22
 8018f44:	e5a9      	b.n	8018a9a <tMBTriangle_tick+0x9e6>
	i = lrintf(r - 0.5f);
 8018f46:	eeb0 0a49 	vmov.f32	s0, s18
                    x = -0.5f + p_at_reset * invB;
 8018f4a:	eead 9a2e 	vfma.f32	s18, s26, s29
	i = lrintf(r - 0.5f);
 8018f4e:	eeac 0a08 	vfma.f32	s0, s24, s16
 8018f52:	f004 fedd 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018f56:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018f5a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8018f5e:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8018f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f66:	eedc 7a08 	vfnms.f32	s15, s24, s16
 8018f6a:	e451      	b.n	8018810 <tMBTriangle_tick+0x75c>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8018f6c:	ee3d ba2d 	vadd.f32	s22, s26, s27
 8018f70:	ed1f 9a9f 	vldr	s18, [pc, #-636]	; 8018cf8 <tMBTriangle_tick+0xc44>
 8018f74:	ee2c 9a09 	vmul.f32	s18, s24, s18
 8018f78:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
 8018f7c:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8018f80:	eefe ea00 	vmov.f32	s29, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 8018f84:	ee7c ca88 	vadd.f32	s25, s25, s16
 8018f88:	ee79 7acc 	vsub.f32	s15, s19, s24
	i = lrintf(r - 0.5f);
 8018f8c:	eeb0 0a6e 	vmov.f32	s0, s29
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018f90:	eeb1 ba4b 	vneg.f32	s22, s22
                    x = 0.5f - (p_at_reset - b) * invB1;
 8018f94:	ee7c 7aa7 	vadd.f32	s15, s25, s15
	i = lrintf(r - 0.5f);
 8018f98:	eef0 ca4c 	vmov.f32	s25, s24
 8018f9c:	eeae 0a09 	vfma.f32	s0, s28, s18
 8018fa0:	eef1 8a48 	vneg.f32	s17, s16
 8018fa4:	eee7 caad 	vfma.f32	s25, s15, s27
 8018fa8:	f004 feb2 	bl	801dd10 <lrintf>
	r -= (float)i;
 8018fac:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018fb0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018fb4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8018fb8:	eeb0 0a6e 	vmov.f32	s0, s29
	r -= (float)i;
 8018fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018fc0:	3301      	adds	r3, #1
 8018fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8018fc6:	eea8 0a49 	vfms.f32	s0, s16, s18
	r -= (float)i;
 8018fca:	eede 7a09 	vfnms.f32	s15, s28, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018fce:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018fd2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018fd6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018fda:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018fde:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018fe2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018fe6:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018fea:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018fee:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018ff2:	3301      	adds	r3, #1
 8018ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018ff8:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8018ffc:	f004 fe88 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019000:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019004:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8019008:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801900c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019010:	eed9 7a28 	vfnms.f32	s15, s18, s17
 8019014:	e571      	b.n	8018afa <tMBTriangle_tick+0xa46>
 8019016:	f8d7 8000 	ldr.w	r8, [r7]
 801901a:	e7af      	b.n	8018f7c <tMBTriangle_tick+0xec8>
    p += sw - (int)sw;
 801901c:	eeb0 8a4e 	vmov.f32	s16, s28
 8019020:	f7ff b88b 	b.w	801813a <tMBTriangle_tick+0x86>
                x = 0.5f - (p - b) * invB1;
 8019024:	ee79 7ac8 	vsub.f32	s15, s19, s16
                k = 1;
 8019028:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 801902a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801902e:	eee7 8aad 	vfma.f32	s17, s15, s27
 8019032:	f7ff b8a1 	b.w	8018178 <tMBTriangle_tick+0xc4>
                    x = 0.5f - (p_at_reset - b)  * invB1;
 8019036:	ee79 eaee 	vsub.f32	s29, s19, s29
	i = lrintf(r - 0.5f);
 801903a:	eeb0 0a6f 	vmov.f32	s0, s31
 801903e:	eeb1 ba48 	vneg.f32	s22, s16
 8019042:	eeee 8aad 	vfma.f32	s17, s29, s27
 8019046:	eea8 0a49 	vfms.f32	s0, s16, s18
 801904a:	f004 fe61 	bl	801dd10 <lrintf>
	r -= (float)i;
 801904e:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019052:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8019056:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801905a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801905e:	eef0 ca68 	vmov.f32	s25, s17
 8019062:	eed9 7a0b 	vfnms.f32	s15, s18, s22
 8019066:	e548      	b.n	8018afa <tMBTriangle_tick+0xa46>

08019068 <tMBTriangle_setFreq>:

void tMBTriangle_setFreq(tMBTriangle* const osc, float f)
{
    _tMBTriangle* c = *osc;
 8019068:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801906a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801906e:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 8019072:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8019076:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 801907a:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801907e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8019082:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 8019086:	4770      	bx	lr

08019088 <tMBTriangle_setWidth>:

void tMBTriangle_setWidth(tMBTriangle* const osc, float w)
{
 8019088:	b510      	push	{r4, lr}
    _tMBTriangle* c = *osc;
 801908a:	6804      	ldr	r4, [r0, #0]
{
 801908c:	eef0 0a40 	vmov.f32	s1, s0
    w = LEAF_clip(0.0f, w, 0.99f);
 8019090:	ed9f 1a04 	vldr	s2, [pc, #16]	; 80190a4 <tMBTriangle_setWidth+0x1c>
 8019094:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80190a8 <tMBTriangle_setWidth+0x20>
 8019098:	f7fd fe00 	bl	8016c9c <LEAF_clip>
    c->waveform = w;
 801909c:	ed84 0a03 	vstr	s0, [r4, #12]
}
 80190a0:	bd10      	pop	{r4, pc}
 80190a2:	bf00      	nop
 80190a4:	3f7d70a4 	.word	0x3f7d70a4
 80190a8:	00000000 	.word	0x00000000

080190ac <tMBTriangle_sync>:

float tMBTriangle_sync(tMBTriangle* const osc, float value)
{
    _tMBTriangle* c = *osc;
 80190ac:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80190ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 80190b2:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 80190b6:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 80190ba:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 80190be:	eef1 7a67 	vneg.f32	s15, s15
 80190c2:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80190c6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80190ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ce:	eef4 6ac7 	vcmpe.f32	s13, s14
 80190d2:	bfcc      	ite	gt
 80190d4:	2201      	movgt	r2, #1
 80190d6:	2200      	movle	r2, #0
 80190d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190dc:	f002 0201 	and.w	r2, r2, #1
 80190e0:	bf88      	it	hi
 80190e2:	2200      	movhi	r2, #0
 80190e4:	b122      	cbz	r2, 80190f0 <tMBTriangle_sync+0x44>
 80190e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80190ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ee:	da04      	bge.n	80190fa <tMBTriangle_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 80190f0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8019108 <tMBTriangle_sync+0x5c>
 80190f4:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 80190f8:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 80190fa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80190fe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019102:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8019106:	4770      	bx	lr
 8019108:	00000000 	.word	0x00000000

0801910c <tMBSineTri_init>:


//==========================================================================================================

void tMBSineTri_init(tMBSineTri* const osc, LEAF* const leaf)
{
 801910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSineTri_initToPool(osc, &leaf->mempool);
}

void tMBSineTri_initToPool(tMBSineTri* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801910e:	698e      	ldr	r6, [r1, #24]
{
 8019110:	4607      	mov	r7, r0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 8019112:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8019116:	2500      	movs	r5, #0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 8019118:	4631      	mov	r1, r6
 801911a:	f7fd ff97 	bl	801704c <mpool_alloc>
 801911e:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8019120:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8019122:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8019124:	6871      	ldr	r1, [r6, #4]
    c->syncdir = 1.0f;
 8019126:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->_sinPhase = 0.0f;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 801912a:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8019198 <tMBSineTri_init+0x8c>
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 801912e:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8019130:	ed91 7a01 	vldr	s14, [r1, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 8019134:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    c->freq = 440.f;
 8019138:	eddf 7a18 	vldr	s15, [pc, #96]	; 801919c <tMBSineTri_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 801913c:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8019140:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 8019142:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8019146:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8019148:	6182      	str	r2, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801914a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 801914e:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8019150:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->shape = 0.0f;
 8019154:	6343      	str	r3, [r0, #52]	; 0x34
    c->_z = 0.0f;
 8019156:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->_sinPhase = 0.0f;
 8019158:	6303      	str	r3, [r0, #48]	; 0x30
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    c->sineMask = 2047;
 801915a:	f240 73ff 	movw	r3, #2047	; 0x7ff
    c->_p = 0.25f;  /* phase [0, 1) */
 801915e:	6201      	str	r1, [r0, #32]
    c->numBLEPs = 0;
 8019160:	490f      	ldr	r1, [pc, #60]	; (80191a0 <tMBSineTri_init+0x94>)
    c->softsync = 0;
 8019162:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 8019164:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8019166:	6282      	str	r2, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8019168:	2280      	movs	r2, #128	; 0x80
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801916a:	63c5      	str	r5, [r0, #60]	; 0x3c
    c->sineMask = 2047;
 801916c:	f8c0 33f0 	str.w	r3, [r0, #1008]	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
 8019170:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8019174:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8019178:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    c->numBLEPs = 0;
 801917c:	e9c0 5119 	strd	r5, r1, [r0, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8019180:	4629      	mov	r1, r5
 8019182:	306c      	adds	r0, #108	; 0x6c
 8019184:	f003 fec6 	bl	801cf14 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8019188:	4629      	mov	r1, r5
 801918a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801918e:	2220      	movs	r2, #32
}
 8019190:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8019194:	f003 bebe 	b.w	801cf14 <memset>
 8019198:	3b14f209 	.word	0x3b14f209
 801919c:	43dc0000 	.word	0x43dc0000
 80191a0:	11c01200 	.word	0x11c01200

080191a4 <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBSineTri_tick(tMBSineTri* const osc)
{
 80191a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191a8:	ed2d 8b10 	vpush	{d8-d15}
    _tMBSineTri* c = *osc;
 80191ac:	6804      	ldr	r4, [r0, #0]

    p = c->_p;  /* phase [0, 1) */
    sinPhase = c->_sinPhase;
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 80191ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */



    b = 0.5f * (1.0f + c->waveform);
 80191b2:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
{
 80191b6:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
 80191b8:	ed94 9a03 	vldr	s18, [r4, #12]
{
 80191bc:	4607      	mov	r7, r0
    sync = c->sync;
 80191be:	ed94 7a05 	vldr	s14, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 80191c2:	ee39 9a28 	vadd.f32	s18, s18, s17
    invB = 1.0f / b;
 80191c6:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80191ca:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    p = c->_p;  /* phase [0, 1) */
 80191ce:	edd4 6a08 	vldr	s13, [r4, #32]
    invB = 1.0f / b;
 80191d2:	ee88 daa7 	vdiv.f32	s26, s17, s15
    sinPhase = c->_sinPhase;
 80191d6:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    w = c->_w;  /* phase increment */
 80191da:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 80191de:	edd4 9a0b 	vldr	s19, [r4, #44]	; 0x2c
    b = 0.5f * (1.0f + c->waveform);
 80191e2:	ee29 9a2b 	vmul.f32	s18, s18, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80191e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 80191ea:	ee78 7ac9 	vsub.f32	s15, s17, s18
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 80191ee:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
    invB1 = 1.0f / b1;
 80191f2:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80191f6:	f340 81d8 	ble.w	80195aa <tMBSineTri_tick+0x406>
 80191fa:	f8d4 901c 	ldr.w	r9, [r4, #28]
 80191fe:	f1b9 0f00 	cmp.w	r9, #0
 8019202:	f340 8189 	ble.w	8019518 <tMBSineTri_tick+0x374>
 8019206:	edd4 7a06 	vldr	s15, [r4, #24]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 801920a:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801920e:	eef1 7a67 	vneg.f32	s15, s15
    sw = w * c->syncdir;
 8019212:	ee27 caaa 	vmul.f32	s24, s15, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8019216:	edc4 7a06 	vstr	s15, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 801921a:	ee67 caac 	vmul.f32	s25, s15, s25
    float inc_amount = sw - (int)sw;
 801921e:	eefd 7acc 	vcvt.s32.f32	s15, s24
 8019222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019226:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 801922a:	ee37 aaa6 	vadd.f32	s20, s15, s13
    sinPhase += inc_amount;
 801922e:	ee37 8a88 	vadd.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 8019232:	2e00      	cmp	r6, #0
 8019234:	f040 81cc 	bne.w	80195d0 <tMBSineTri_tick+0x42c>

        x = -0.5f + p * invB;
 8019238:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
        if (sw > 0)
 801923c:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = -0.5f + p * invB;
 8019240:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 8019244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 8019248:	eeea 8a0d 	vfma.f32	s17, s20, s26
        if (sw > 0)
 801924c:	f340 82a1 	ble.w	8019792 <tMBSineTri_tick+0x5ee>
        {
            if (p >= b) {
 8019250:	eeb4 aac9 	vcmpe.f32	s20, s18
 8019254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019258:	f280 825b 	bge.w	8019712 <tMBSineTri_tick+0x56e>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 801925c:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 801925e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8019262:	eeb4 aacb 	vcmpe.f32	s20, s22
 8019266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801926a:	f280 83c8 	bge.w	80199fe <tMBSineTri_tick+0x85a>
 801926e:	461e      	mov	r6, r3
    uint32_t idx;
    float samp0;
    float samp1;

    // Wavetable synthesis
    while (sinPhase >= 1.0f)
 8019270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8019274:	1d2b      	adds	r3, r5, #4
    c->_f[currentSamp] = x * c->shape; //add the triangle
 8019276:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801927a:	f003 0307 	and.w	r3, r3, #7
    while (sinPhase >= 1.0f)
 801927e:	eeb4 8ac7 	vcmpe.f32	s16, s14
    c->_f[currentSamp] = x * c->shape; //add the triangle
 8019282:	ee64 8a28 	vmul.f32	s17, s8, s17
    while (sinPhase >= 1.0f)
 8019286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801928a:	db0a      	blt.n	80192a2 <tMBSineTri_tick+0xfe>
 801928c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    {
    	sinPhase -= 1.0f;
 8019290:	eef0 7a48 	vmov.f32	s15, s16
 8019294:	ee38 8a47 	vsub.f32	s16, s16, s14
    while (sinPhase >= 1.0f)
 8019298:	eef4 7ae6 	vcmpe.f32	s15, s13
 801929c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192a0:	daf6      	bge.n	8019290 <tMBSineTri_tick+0xec>
    }

    while (sinPhase < 0.0f)
 80192a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80192a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192aa:	d50c      	bpl.n	80192c6 <tMBSineTri_tick+0x122>
    {
    	sinPhase += 1.0f;
 80192ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    while (sinPhase < 0.0f)
 80192b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    	sinPhase += 1.0f;
 80192b4:	eef0 7a48 	vmov.f32	s15, s16
 80192b8:	ee38 8a26 	vadd.f32	s16, s16, s13
    while (sinPhase < 0.0f)
 80192bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80192c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192c4:	d4f6      	bmi.n	80192b4 <tMBSineTri_tick+0x110>
    }
    float tempPhase = (sinPhase * 2048.0f);
 80192c6:	eddf 7abd 	vldr	s15, [pc, #756]	; 80195bc <tMBSineTri_tick+0x418>
    idx = (idx + 1) & c->sineMask;
    samp1 = __leaf_table_sinewave[idx];

    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 80192ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    idx = (idx + 1) & c->sineMask;
 80192ce:	f8d4 13f0 	ldr.w	r1, [r4, #1008]	; 0x3f0
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 80192d2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    float tempPhase = (sinPhase * 2048.0f);
 80192d6:	ee68 7a27 	vmul.f32	s15, s16, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 80192da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80192de:	ee37 7a44 	vsub.f32	s14, s14, s8
    idx = (uint32_t)tempPhase; //11 bit table
 80192e2:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 80192e6:	ee27 7a25 	vmul.f32	s14, s14, s11
    idx = (uint32_t)tempPhase; //11 bit table
 80192ea:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
 80192ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
    idx = (idx + 1) & c->sineMask;
 80192f2:	1c50      	adds	r0, r2, #1
    tempFrac = tempPhase - idx;
 80192f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
    idx = (idx + 1) & c->sineMask;
 80192f8:	4008      	ands	r0, r1
    samp0 = __leaf_table_sinewave[idx];
 80192fa:	49b1      	ldr	r1, [pc, #708]	; (80195c0 <tMBSineTri_tick+0x41c>)
 80192fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    samp1 = __leaf_table_sinewave[idx];
 8019300:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    samp0 = __leaf_table_sinewave[idx];
 8019304:	edd2 6a00 	vldr	s13, [r2]
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
 8019308:	ed91 6a00 	vldr	s12, [r1]
 801930c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8019310:	eee6 6a27 	vfma.f32	s13, s12, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8019314:	eee7 8a26 	vfma.f32	s17, s14, s13
 8019318:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801931c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8019320:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8019324:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8019328:	2b00      	cmp	r3, #0
 801932a:	f000 80d3 	beq.w	80194d4 <tMBSineTri_tick+0x330>
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801932e:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8019332:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8019334:	48a3      	ldr	r0, [pc, #652]	; (80195c4 <tMBSineTri_tick+0x420>)
 8019336:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801933a:	4fa3      	ldr	r7, [pc, #652]	; (80195c8 <tMBSineTri_tick+0x424>)
 801933c:	e053      	b.n	80193e6 <tMBSineTri_tick+0x242>
 801933e:	f8bd e006 	ldrh.w	lr, [sp, #6]
 8019342:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8019346:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801934a:	fa1f fe8e 	uxth.w	lr, lr
 801934e:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8019352:	fa1f f989 	uxth.w	r9, r9
 8019356:	b29b      	uxth	r3, r3
 8019358:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 801935c:	fa1f f888 	uxth.w	r8, r8
 8019360:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8019364:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 8019368:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801936c:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8019370:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 8019374:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019378:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801937c:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 8019380:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 8019384:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 8019388:	ed99 7a00 	vldr	s14, [r9]
 801938c:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8019390:	ed93 6a01 	vldr	s12, [r3, #4]
 8019394:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 8019398:	eea5 7a06 	vfma.f32	s14, s10, s12
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801939c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80193a0:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80193a4:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80193a6:	fa1f fe8e 	uxth.w	lr, lr
 80193aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80193ae:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80193b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80193b6:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80193ba:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 80193be:	f108 0840 	add.w	r8, r8, #64	; 0x40
 80193c2:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80193c6:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 80193ca:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80193ce:	459e      	cmp	lr, r3
 80193d0:	d304      	bcc.n	80193dc <tMBSineTri_tick+0x238>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 80193d2:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 80193d6:	3b01      	subs	r3, #1
 80193d8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80193dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80193e0:	3201      	adds	r2, #1
 80193e2:	4293      	cmp	r3, r2
 80193e4:	dd76      	ble.n	80194d4 <tMBSineTri_tick+0x330>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80193e6:	ebac 0302 	sub.w	r3, ip, r2
 80193ea:	b29b      	uxth	r3, r3
 80193ec:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 80193f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80193f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80193f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 80193fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019400:	b29b      	uxth	r3, r3
 8019402:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019406:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801940a:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 801940e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8019412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019416:	d492      	bmi.n	801933e <tMBSineTri_tick+0x19a>
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8019418:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801941c:	f8bd e006 	ldrh.w	lr, [sp, #6]
 8019420:	b29b      	uxth	r3, r3
 8019422:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8019426:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 801942a:	fa1f fe8e 	uxth.w	lr, lr
 801942e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019432:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8019436:	fa1f f989 	uxth.w	r9, r9
 801943a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801943e:	fa1f f888 	uxth.w	r8, r8
 8019442:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8019446:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801944a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801944e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019452:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8019456:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 801945a:	b29b      	uxth	r3, r3
 801945c:	ee24 7a07 	vmul.f32	s14, s8, s14
 8019460:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8019464:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8019468:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801946c:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 8019470:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 8019474:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8019478:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 801947c:	ed98 6a01 	vldr	s12, [r8, #4]
 8019480:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8019484:	edde 6a00 	vldr	s13, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019488:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 801948c:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019490:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8019494:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8019498:	ee36 6a64 	vsub.f32	s12, s12, s9
 801949c:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80194a0:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 80194a4:	eee5 6a06 	vfma.f32	s13, s10, s12
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80194a8:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 80194ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 80194b0:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80194b4:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 80194b8:	3340      	adds	r3, #64	; 0x40
 80194ba:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80194be:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 80194c2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80194c6:	459e      	cmp	lr, r3
 80194c8:	d283      	bcs.n	80193d2 <tMBSineTri_tick+0x22e>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80194ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80194ce:	3201      	adds	r2, #1
 80194d0:	4293      	cmp	r3, r2
 80194d2:	dc88      	bgt.n	80193e6 <tMBSineTri_tick+0x242>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 80194d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80194d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 80194dc:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 80194de:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    j = (j+1) & 7;
 80194e2:	f005 0507 	and.w	r5, r5, #7
    c->out = z;
    c->_p = p;
 80194e6:	ed84 aa08 	vstr	s20, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 80194ea:	ee77 7ae9 	vsub.f32	s15, s15, s19
    c->_w = w;
 80194ee:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 80194f2:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
    c->_sinPhase = sinPhase;
 80194f6:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    z += 0.5f * (c->_f[j] - z);
 80194fa:	eee7 9a87 	vfma.f32	s19, s15, s14
    c->_k = k;
 80194fe:	e9c4 560e 	strd	r5, r6, [r4, #56]	; 0x38

    return -c->out;
 8019502:	eeb1 0a69 	vneg.f32	s0, s19
    c->out = z;
 8019506:	edc4 9a01 	vstr	s19, [r4, #4]
    c->_z = z;
 801950a:	edc4 9a0b 	vstr	s19, [r4, #44]	; 0x2c
}
 801950e:	b003      	add	sp, #12
 8019510:	ecbd 8b10 	vpop	{d8-d15}
 8019514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8019518:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 801951c:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 8019520:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 8019524:	ee6c caa7 	vmul.f32	s25, s25, s15
    float inc_amount = sw - (int)sw;
 8019528:	eefd 7acc 	vcvt.s32.f32	s15, s24
 801952c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019530:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 8019534:	ee37 baa6 	vadd.f32	s22, s15, s13
    sinPhase += inc_amount;
 8019538:	ee77 7a88 	vadd.f32	s15, s15, s16
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 801953c:	f040 8644 	bne.w	801a1c8 <tMBSineTri_tick+0x1024>
        if (sw > 0)
 8019540:	eeb5 cac0 	vcmpe.f32	s24, #0.0
 8019544:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8019546:	ee2c 8a07 	vmul.f32	s16, s24, s14
        if (sw > 0)
 801954a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 801954e:	ee3b ea48 	vsub.f32	s28, s22, s16
        if (sw > 0)
 8019552:	f340 80cc 	ble.w	80196ee <tMBSineTri_tick+0x54a>
        	p = eof_offset + 0.25f;
 8019556:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
 801955a:	ee38 aa0a 	vadd.f32	s20, s16, s20
        if (!k) {
 801955e:	2e00      	cmp	r6, #0
 8019560:	f040 81dd 	bne.w	801991e <tMBSineTri_tick+0x77a>
                if (p_at_reset >= b) {
 8019564:	eeb4 9ace 	vcmpe.f32	s18, s28
 8019568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801956c:	f240 844d 	bls.w	8019e0a <tMBSineTri_tick+0xc66>
                if (p_at_reset >= 1.0f) {
 8019570:	eeb4 eae8 	vcmpe.f32	s28, s17
 8019574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019578:	f280 82b9 	bge.w	8019aee <tMBSineTri_tick+0x94a>
 801957c:	eddf 7a13 	vldr	s15, [pc, #76]	; 80195cc <tMBSineTri_tick+0x428>
            x = -0.5f + p_at_reset * invB;
 8019580:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019584:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019588:	eef0 fa40 	vmov.f32	s31, s0
	i = lrintf(r - 0.5f);
 801958c:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8019590:	f004 fbbe 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019594:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 8019598:	eeed fa0e 	vfma.f32	s31, s26, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
 801959c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 80195a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195a4:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 80195a8:	e1fd      	b.n	80199a6 <tMBSineTri_tick+0x802>
    sw = w * c->syncdir;
 80195aa:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80195ae:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 80195b2:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 80195b6:	ee6c caa7 	vmul.f32	s25, s25, s15
 80195ba:	e630      	b.n	801921e <tMBSineTri_tick+0x7a>
 80195bc:	45000000 	.word	0x45000000
 80195c0:	08026f74 	.word	0x08026f74
 80195c4:	08028ff4 	.word	0x08028ff4
 80195c8:	0802d6f8 	.word	0x0802d6f8
 80195cc:	42800000 	.word	0x42800000
        x = 0.5f - (p - b) * invB1;
 80195d0:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
        if (sw > 0)
 80195d4:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = 0.5f - (p - b) * invB1;
 80195d8:	ee79 7a4a 	vsub.f32	s15, s18, s20
 80195dc:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 80195e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 80195e4:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 80195e8:	f340 8154 	ble.w	8019894 <tMBSineTri_tick+0x6f0>
            if (p >= 1.0f) {
 80195ec:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 80195f0:	eeb4 aaeb 	vcmpe.f32	s20, s23
 80195f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195f8:	f6ff ae3a 	blt.w	8019270 <tMBSineTri_tick+0xcc>
	i = lrintf(r - 0.5f);
 80195fc:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 8019600:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 80195cc <tMBSineTri_tick+0x428>
                p -= 1.0f;
 8019604:	ee3a ea6b 	vsub.f32	s28, s20, s23
	_tMBSineTri* c = *osc;
 8019608:	683e      	ldr	r6, [r7, #0]
 801960a:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 801960e:	eeb0 0a68 	vmov.f32	s0, s17
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8019612:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 8019616:	eeae 0a2c 	vfma.f32	s0, s28, s25
	scale *= w;
 801961a:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 801961e:	f004 fb77 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019622:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019626:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801962a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 801962e:	eeb4 9ace 	vcmpe.f32	s18, s28
	r -= (float)i;
 8019632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019636:	3301      	adds	r3, #1
 8019638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 801963c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8019640:	eede 7a2c 	vfnms.f32	s15, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019644:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019648:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801964c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019650:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019654:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8019658:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801965c:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019660:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019664:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8019668:	f103 0301 	add.w	r3, r3, #1
 801966c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019670:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 8019674:	f200 843b 	bhi.w	8019eee <tMBSineTri_tick+0xd4a>
                x = 0.5f - (p - b) * invB1;
 8019678:	ee79 7a2b 	vadd.f32	s15, s18, s23
	_tMBSineTri* c = *osc;
 801967c:	683f      	ldr	r7, [r7, #0]
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 801967e:	ee3e da49 	vsub.f32	s26, s28, s18
	i = lrintf(r - 0.5f);
 8019682:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8019686:	ee77 7aca 	vsub.f32	s15, s15, s20
 801968a:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 801968e:	eead 0a2c 	vfma.f32	s0, s26, s25
                p -= 1.0f;
 8019692:	eeb0 aa4e 	vmov.f32	s20, s28
                x = 0.5f - (p - b) * invB1;
 8019696:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 801969a:	f004 fb39 	bl	801dd10 <lrintf>
	r -= (float)i;
 801969e:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80196a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80196a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80196aa:	eef1 7a4c 	vneg.f32	s15, s24
	r -= (float)i;
 80196ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80196b2:	3301      	adds	r3, #1
 80196b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80196b8:	ee9d 7a2c 	vfnms.f32	s14, s26, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80196bc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80196c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80196c4:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80196c8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80196cc:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80196d0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80196d4:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80196d8:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80196dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 80196e0:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80196e2:	4433      	add	r3, r6
 80196e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80196e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80196ec:	e5c0      	b.n	8019270 <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 80196ee:	f100 828a 	bmi.w	8019c06 <tMBSineTri_tick+0xa62>
        if (!k) {
 80196f2:	2e00      	cmp	r6, #0
 80196f4:	f000 81f1 	beq.w	8019ada <tMBSineTri_tick+0x936>
            x = 0.5f - (p_at_reset - b) * invB1;
 80196f8:	ee39 7a08 	vadd.f32	s14, s18, s16
 80196fc:	eef0 8a6b 	vmov.f32	s17, s23
    sinPhase += inc_amount;
 8019700:	eeb0 8a67 	vmov.f32	s16, s15
            x = 0.5f - (p_at_reset - b) * invB1;
 8019704:	ee77 7a4b 	vsub.f32	s15, s14, s22
    p += inc_amount;
 8019708:	eeb0 aa4b 	vmov.f32	s20, s22
            x = 0.5f - (p_at_reset - b) * invB1;
 801970c:	eeed 8aa7 	vfma.f32	s17, s27, s15
            if (sw > 0)
 8019710:	e5ae      	b.n	8019270 <tMBSineTri_tick+0xcc>
                x = 0.5f - (p - b) * invB1;;
 8019712:	ed1f ea52 	vldr	s28, [pc, #-328]	; 80195cc <tMBSineTri_tick+0x428>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8019716:	ee7a ea49 	vsub.f32	s29, s20, s18
	i = lrintf(r - 0.5f);
 801971a:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 801971e:	f8d7 8000 	ldr.w	r8, [r7]
 8019722:	ee2c ea8e 	vmul.f32	s28, s25, s28
                x = 0.5f - (p - b) * invB1;;
 8019726:	ee79 7a4a 	vsub.f32	s15, s18, s20
 801972a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 801972e:	eeae 0a8e 	vfma.f32	s0, s29, s28
 8019732:	ee7d ba2d 	vadd.f32	s23, s26, s27
                x = 0.5f - (p - b) * invB1;;
 8019736:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 801973a:	f004 fae9 	bl	801dd10 <lrintf>
	r -= (float)i;
 801973e:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019742:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019746:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801974a:	ee6b 7acc 	vnmul.f32	s15, s23, s24
	r -= (float)i;
 801974e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019752:	3301      	adds	r3, #1
 8019754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019758:	ee9e 7a8e 	vfnms.f32	s14, s29, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801975c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019760:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019764:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019768:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801976c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019770:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019774:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019778:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801977c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019780:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019784:	3301      	adds	r3, #1
 8019786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801978a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 801978e:	2301      	movs	r3, #1
}
 8019790:	e565      	b.n	801925e <tMBSineTri_tick+0xba>
            if (p < 0.0f) {
 8019792:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8019796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801979a:	f57f ad69 	bpl.w	8019270 <tMBSineTri_tick+0xcc>
 801979e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80197a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197a6:	f57f ad63 	bpl.w	8019270 <tMBSineTri_tick+0xcc>
	r = MINBLEP_PHASES * phase * inv_w;
 80197aa:	ee6c ba8a 	vmul.f32	s23, s25, s20
	i = lrintf(r - 0.5f);
 80197ae:	ed5f 8a79 	vldr	s17, [pc, #-484]	; 80195cc <tMBSineTri_tick+0x428>
 80197b2:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 80197b6:	f8d7 8000 	ldr.w	r8, [r7]
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 80197ba:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 80197be:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 80197c2:	eeab 0aa8 	vfma.f32	s0, s23, s17
 80197c6:	ee2c ca27 	vmul.f32	s24, s24, s15
 80197ca:	f004 faa1 	bl	801dd10 <lrintf>
	r -= (float)i;
 80197ce:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80197d2:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80197d6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 80197da:	ee3a aa0e 	vadd.f32	s20, s20, s28
	r -= (float)i;
 80197de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80197e2:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80197e4:	eeb1 7a4c 	vneg.f32	s14, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80197e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 80197ec:	eeb4 9aca 	vcmpe.f32	s18, s20
	r -= (float)i;
 80197f0:	eedb 7aa8 	vfnms.f32	s15, s23, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80197f4:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80197f8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80197fc:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 8019800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019804:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019808:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801980c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019810:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019814:	ed83 ea3d 	vstr	s28, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019818:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801981c:	f103 0301 	add.w	r3, r3, #1
 8019820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019824:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 8019828:	f340 84d4 	ble.w	801a1d4 <tMBSineTri_tick+0x1030>
                x = -0.5f + p * invB;
 801982c:	ee6c caa8 	vmul.f32	s25, s25, s17
	_tMBSineTri* c = *osc;
 8019830:	683f      	ldr	r7, [r7, #0]
 8019832:	ee7a da49 	vsub.f32	s27, s20, s18
	i = lrintf(r - 0.5f);
 8019836:	eeb0 0a4b 	vmov.f32	s0, s22
                x = -0.5f + p * invB;
 801983a:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 801983e:	eeac 0aad 	vfma.f32	s0, s25, s27
 8019842:	f004 fa65 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019846:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801984a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801984e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019856:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8019858:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801985c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019860:	eedc 7aad 	vfnms.f32	s15, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019864:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019868:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801986c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019870:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019874:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8019878:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801987c:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019880:	ed83 ea3d 	vstr	s28, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019884:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019888:	3301      	adds	r3, #1
 801988a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801988e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8019892:	e4ed      	b.n	8019270 <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 8019894:	f57f acec 	bpl.w	8019270 <tMBSineTri_tick+0xcc>
            if (p < b) {
 8019898:	eeb4 aac9 	vcmpe.f32	s20, s18
 801989c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198a0:	f100 8174 	bmi.w	8019b8c <tMBSineTri_tick+0x9e8>
            if (p < 0.0f) {
 80198a4:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 80198a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ac:	f57f ace0 	bpl.w	8019270 <tMBSineTri_tick+0xcc>
                p += 1.0f;
 80198b0:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 80198b4:	ed5f babb 	vldr	s23, [pc, #-748]	; 80195cc <tMBSineTri_tick+0x428>
	r = MINBLEP_PHASES * phase * inv_w;
 80198b8:	ee6c ca8a 	vmul.f32	s25, s25, s20
	_tMBSineTri* c = *osc;
 80198bc:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 80198be:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 80198c2:	ee3a aa0b 	vadd.f32	s20, s20, s22
                x = 0.5f - (p - b) * invB1;
 80198c6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 80198ca:	eeac 0aab 	vfma.f32	s0, s25, s23
                x = 0.5f - (p - b) * invB1;
 80198ce:	ee79 7a4a 	vsub.f32	s15, s18, s20
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 80198d2:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 80198d6:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 80198da:	f004 fa19 	bl	801dd10 <lrintf>
	r -= (float)i;
 80198de:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80198e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80198e6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80198ea:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 80198ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80198f2:	3301      	adds	r3, #1
 80198f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80198f8:	eedc 7aab 	vfnms.f32	s15, s25, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80198fc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019900:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019904:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019908:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801990c:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019910:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019914:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019918:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 801991c:	e6de      	b.n	80196dc <tMBSineTri_tick+0x538>
            x = 0.5f - (p_at_reset - b) * invB1;
 801991e:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset >= 1.0f) {
 8019922:	eeb4 eae8 	vcmpe.f32	s28, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 8019926:	eef0 fa6b 	vmov.f32	s31, s23
 801992a:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset >= 1.0f) {
 801992e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8019932:	eeed faa7 	vfma.f32	s31, s27, s15
                if (p_at_reset >= 1.0f) {
 8019936:	f280 81eb 	bge.w	8019d10 <tMBSineTri_tick+0xb6c>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 801993a:	ee7d ea2d 	vadd.f32	s29, s26, s27
 801993e:	ed5f 7add 	vldr	s15, [pc, #-884]	; 80195cc <tMBSineTri_tick+0x428>
 8019942:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019946:	ee6e ea8c 	vmul.f32	s29, s29, s24
	i = lrintf(r - 0.5f);
 801994a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801994e:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8019952:	f004 f9dd 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019956:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801995a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 801995e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8019962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019966:	3301      	adds	r3, #1
	r -= (float)i;
 8019968:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801996c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019970:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019974:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019978:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801997c:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019980:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019984:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019988:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801998c:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019990:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019994:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019998:	3301      	adds	r3, #1
 801999a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801999e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 80199a2:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80199a6:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80199aa:	ee2f 7acc 	vnmul.f32	s14, s31, s24
            if (p >= b) {
 80199ae:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80199b2:	3301      	adds	r3, #1
 80199b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 80199b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80199bc:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80199c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80199c4:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80199c8:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80199cc:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80199d0:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80199d4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80199d8:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80199dc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80199e0:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80199e4:	f103 0301 	add.w	r3, r3, #1
 80199e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80199ec:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 80199f0:	d940      	bls.n	8019a74 <tMBSineTri_tick+0x8d0>
            x = -0.5f + p * invB;
 80199f2:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            k = 0;
 80199f6:	464e      	mov	r6, r9
            x = -0.5f + p * invB;
 80199f8:	eeed 8a0a 	vfma.f32	s17, s26, s20
 80199fc:	e438      	b.n	8019270 <tMBSineTri_tick+0xcc>
                p -= 1.0f;
 80199fe:	eddf bac3 	vldr	s23, [pc, #780]	; 8019d0c <tMBSineTri_tick+0xb68>
 8019a02:	ee3a aa4b 	vsub.f32	s20, s20, s22
                x = -0.5f + p * invB;
 8019a06:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 8019a0a:	683f      	ldr	r7, [r7, #0]
 8019a0c:	ee6c baab 	vmul.f32	s23, s25, s23
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8019a10:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 8019a14:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8019a18:	eeaa 0a2b 	vfma.f32	s0, s20, s23
 8019a1c:	f004 f978 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019a20:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019a24:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019a28:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019a30:	3301      	adds	r3, #1
	scale *= w;
 8019a32:	ee6c da2d 	vmul.f32	s27, s24, s27
                x = -0.5f + p * invB;
 8019a36:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019a3e:	eeda 7a2b 	vfnms.f32	s15, s20, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019a42:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019a46:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019a4a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019a4e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019a52:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8019a56:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019a5a:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019a5e:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019a62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019a66:	3301      	adds	r3, #1
 8019a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019a6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8019a70:	f7ff bbfe 	b.w	8019270 <tMBSineTri_tick+0xcc>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8019a74:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 8019a78:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8019a7a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                x = 0.5f - (p - b) * invB1;
 8019a7e:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8019a82:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8019a86:	eeab 0a2c 	vfma.f32	s0, s22, s25
 8019a8a:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8019a8e:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8019a92:	f004 f93d 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019a96:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019a9a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019a9e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019aa2:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 8019aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019aaa:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019aac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019ab4:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019ab8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019abc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019ac0:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019ac4:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019ac8:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8019acc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019ad0:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019ad4:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019ad8:	e600      	b.n	80196dc <tMBSineTri_tick+0x538>
            x = -0.5f + p_at_reset * invB;
 8019ada:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    sinPhase += inc_amount;
 8019ade:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 8019ae2:	eeb0 aa4b 	vmov.f32	s20, s22
            x = -0.5f + p_at_reset * invB;
 8019ae6:	eeed 8a0e 	vfma.f32	s17, s26, s28
            else if (sw < 0)
 8019aea:	f7ff bbc1 	b.w	8019270 <tMBSineTri_tick+0xcc>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8019aee:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 8019af2:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8019d0c <tMBSineTri_tick+0xb68>
 8019af6:	ee6c ca87 	vmul.f32	s25, s25, s14
 8019afa:	ee2c fa27 	vmul.f32	s30, s24, s15
                    p_at_reset -= 1.0f;
 8019afe:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 8019b02:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 8019b06:	ee3e ea4b 	vsub.f32	s28, s28, s22
	i = lrintf(r - 0.5f);
 8019b0a:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 8019b0e:	eef0 fa68 	vmov.f32	s31, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8019b12:	ee78 ba0e 	vadd.f32	s23, s16, s28
                    x = -0.5f + p_at_reset * invB;
 8019b16:	eeed fa0e 	vfma.f32	s31, s26, s28
	i = lrintf(r - 0.5f);
 8019b1a:	eeab 0aac 	vfma.f32	s0, s23, s25
 8019b1e:	f004 f8f7 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019b22:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019b26:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019b2a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019b32:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 8019b34:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 8019b38:	eedb 7aac 	vfnms.f32	s15, s23, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8019b40:	eeaa 0a2c 	vfma.f32	s0, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019b44:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019b48:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019b4c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019b50:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019b54:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8019b58:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019b5c:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019b60:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019b64:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019b68:	3301      	adds	r3, #1
 8019b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019b6e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8019b72:	f004 f8cd 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019b76:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019b7a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8019b7e:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8019b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b86:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 8019b8a:	e70c      	b.n	80199a6 <tMBSineTri_tick+0x802>
                x = -0.5f + p * invB;
 8019b8c:	eddf ba5f 	vldr	s23, [pc, #380]	; 8019d0c <tMBSineTri_tick+0xb68>
 8019b90:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019b94:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 8019b98:	683e      	ldr	r6, [r7, #0]
 8019b9a:	ee6c baab 	vmul.f32	s23, s25, s23
                x = -0.5f + p * invB;
 8019b9e:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8019ba2:	eeab 0a8b 	vfma.f32	s0, s23, s22
 8019ba6:	f004 f8b3 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019baa:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019bae:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 8019bb2:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 8019bb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019bba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019bbe:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8019bc0:	eeea 8a0d 	vfma.f32	s17, s20, s26
	scale *= w;
 8019bc4:	ee67 7a8c 	vmul.f32	s15, s15, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019bcc:	ee9b 7a8b 	vfnms.f32	s14, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019bd0:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019bd4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019bd8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019bdc:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019be0:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019be4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019be8:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019bec:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019bf0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019bf4:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8019bf8:	3301      	adds	r3, #1
 8019bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019bfe:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 8019c02:	2600      	movs	r6, #0
}
 8019c04:	e64e      	b.n	80198a4 <tMBSineTri_tick+0x700>
        	p = (1.0f - eof_offset) + 0.25f;
 8019c06:	eeb7 aa04 	vmov.f32	s20, #116	; 0x3fa00000  1.250
        	sinPhase = (1.0f - eof_offset);
 8019c0a:	ee78 eac8 	vsub.f32	s29, s17, s16
        	p = (1.0f - eof_offset) + 0.25f;
 8019c0e:	ee3a aa48 	vsub.f32	s20, s20, s16
        if (!k) {
 8019c12:	2e00      	cmp	r6, #0
 8019c14:	f040 8142 	bne.w	8019e9c <tMBSineTri_tick+0xcf8>
                if (p_at_reset < 0.0f) {
 8019c18:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 8019c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c20:	f100 81ab 	bmi.w	8019f7a <tMBSineTri_tick+0xdd6>
            x = -0.5f + p_at_reset * invB;
 8019c24:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8019c28:	eddf 7a38 	vldr	s15, [pc, #224]	; 8019d0c <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8019c2c:	ee3d ba2d 	vadd.f32	s22, s26, s27
 8019c30:	ee6c caa7 	vmul.f32	s25, s25, s15
            x = -0.5f + p_at_reset * invB;
 8019c34:	eeed ba0e 	vfma.f32	s23, s26, s28
 8019c38:	ee2c ba4b 	vnmul.f32	s22, s24, s22
	r = MINBLEP_PHASES * phase * inv_w;
 8019c3c:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
	i = lrintf(r - 0.5f);
 8019c40:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019c44:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8019c48:	eea8 0aac 	vfma.f32	s0, s17, s25
 8019c4c:	f004 f860 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019c50:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019c54:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019c58:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8019c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019c60:	3301      	adds	r3, #1
	r -= (float)i;
 8019c62:	eed8 7aac 	vfnms.f32	s15, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019c6a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019c6e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019c72:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019c76:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019c7a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019c7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019c82:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019c86:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019c8a:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019c8e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019c92:	3301      	adds	r3, #1
 8019c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019c98:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8019c9c:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019ca0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 8019ca4:	ee6c ba2b 	vmul.f32	s23, s24, s23
            if (p < b) {
 8019ca8:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019cac:	3301      	adds	r3, #1
 8019cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 8019cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019cb6:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019cba:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019cbe:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019cc2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019cc6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019cca:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019cce:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019cd2:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019cd6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019cda:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019cde:	f103 0301 	add.w	r3, r3, #1
 8019ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019ce6:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 8019cea:	f300 8107 	bgt.w	8019efc <tMBSineTri_tick+0xd58>
            x = 0.5f - (p - b) * invB1;
 8019cee:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
            k = 1;
 8019cf2:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 8019cf4:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8019cf8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019cfc:	eeb0 8a6e 	vmov.f32	s16, s29
 8019d00:	ee77 7a89 	vadd.f32	s15, s15, s18
 8019d04:	eee7 8aad 	vfma.f32	s17, s15, s27
 8019d08:	f7ff bab2 	b.w	8019270 <tMBSineTri_tick+0xcc>
 8019d0c:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 8019d10:	ee3e ea68 	vsub.f32	s28, s28, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8019d14:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8019d0c <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 8019d18:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
 8019d1c:	ee6c caa7 	vmul.f32	s25, s25, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8019d20:	ee78 fa0e 	vadd.f32	s31, s16, s28
	i = lrintf(r - 0.5f);
 8019d24:	eeb0 0a4f 	vmov.f32	s0, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8019d28:	ee7d ea2d 	vadd.f32	s29, s26, s27
	i = lrintf(r - 0.5f);
 8019d2c:	eeac 0aaf 	vfma.f32	s0, s25, s31
 8019d30:	f003 ffee 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019d34:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019d38:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019d3c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019d44:	3301      	adds	r3, #1
	scale *= w;
 8019d46:	ee6e ea8c 	vmul.f32	s29, s29, s24
                if (!k && p_at_reset >= b) {
 8019d4a:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019d52:	eedc 7aaf 	vfnms.f32	s15, s25, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019d56:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019d5a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019d5e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 8019d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019d66:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019d6a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019d6e:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019d72:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019d76:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019d7a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019d7e:	f103 0301 	add.w	r3, r3, #1
 8019d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019d86:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 8019d8a:	f200 81ae 	bhi.w	801a0ea <tMBSineTri_tick+0xf46>
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019d8e:	ee79 7a28 	vadd.f32	s15, s18, s17
	_tMBSineTri* c = *osc;
 8019d92:	683e      	ldr	r6, [r7, #0]
	i = lrintf(r - 0.5f);
 8019d94:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019d98:	ee77 7a88 	vadd.f32	s15, s15, s16
 8019d9c:	ee77 7acb 	vsub.f32	s15, s15, s22
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8019da0:	ee38 ba49 	vsub.f32	s22, s16, s18
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019da4:	eee7 baad 	vfma.f32	s23, s15, s27
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8019da8:	ee3b ba0e 	vadd.f32	s22, s22, s28
	i = lrintf(r - 0.5f);
 8019dac:	eeac 0a8b 	vfma.f32	s0, s25, s22
 8019db0:	f003 ffae 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019db4:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019db8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019dbc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019dc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019dc4:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019dc6:	eef1 7a6e 	vneg.f32	s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019dca:	eef0 fa6b 	vmov.f32	s31, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019dd2:	ee9c 7a8b 	vfnms.f32	s14, s25, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019dd6:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019dda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019dde:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019de2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019de6:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8019dea:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019dee:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019df2:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019df6:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8019dfa:	3301      	adds	r3, #1
 8019dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e00:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 8019e04:	f8d7 8000 	ldr.w	r8, [r7]
 8019e08:	e59f      	b.n	801994a <tMBSineTri_tick+0x7a6>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8019e0a:	ed1f 7a40 	vldr	s14, [pc, #-256]	; 8019d0c <tMBSineTri_tick+0xb68>
 8019e0e:	ee3b fa49 	vsub.f32	s30, s22, s18
	i = lrintf(r - 0.5f);
 8019e12:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019e16:	ee6c ca87 	vmul.f32	s25, s25, s14
 8019e1a:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 8019e1e:	eeaf 0a2c 	vfma.f32	s0, s30, s25
 8019e22:	ee6c ea27 	vmul.f32	s29, s24, s15
 8019e26:	f003 ff73 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019e2a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019e2e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019e32:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 8019e36:	eeb4 eae8 	vcmpe.f32	s28, s17
	r -= (float)i;
 8019e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019e3e:	3301      	adds	r3, #1
 8019e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 8019e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8019e48:	eedf 7a2c 	vfnms.f32	s15, s30, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019e4c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019e50:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019e54:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019e58:	eeb0 fa6e 	vmov.f32	s30, s29
 8019e5c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019e60:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8019e64:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019e68:	eef1 7a6e 	vneg.f32	s15, s29
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019e6c:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019e70:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019e74:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019e78:	f103 0301 	add.w	r3, r3, #1
 8019e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e80:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 8019e84:	da76      	bge.n	8019f74 <tMBSineTri_tick+0xdd0>
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019e86:	ee79 7a08 	vadd.f32	s15, s18, s16
 8019e8a:	f8d7 8000 	ldr.w	r8, [r7]
 8019e8e:	ee77 7acb 	vsub.f32	s15, s15, s22
 8019e92:	eee7 baad 	vfma.f32	s23, s15, s27
 8019e96:	eef0 fa6b 	vmov.f32	s31, s23
 8019e9a:	e556      	b.n	801994a <tMBSineTri_tick+0x7a6>
            x = 0.5f - (p_at_reset - b) * invB1;
 8019e9c:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset < b) {
 8019ea0:	eeb4 9ace 	vcmpe.f32	s18, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 8019ea4:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset < b) {
 8019ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8019eac:	eeed baa7 	vfma.f32	s23, s27, s15
                if (p_at_reset < b) {
 8019eb0:	f300 80d8 	bgt.w	801a064 <tMBSineTri_tick+0xec0>
                if (p_at_reset < 0.0f) {
 8019eb4:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 8019eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ebc:	f100 812a 	bmi.w	801a114 <tMBSineTri_tick+0xf70>
        else if (sw < 0)
 8019ec0:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
 8019ec4:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8019d0c <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 8019ec8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019ecc:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019ed0:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8019ed4:	eeac 0aa8 	vfma.f32	s0, s25, s17
 8019ed8:	f003 ff1a 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019edc:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019ee0:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8019ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ee8:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 8019eec:	e6d8      	b.n	8019ca0 <tMBSineTri_tick+0xafc>
                x = -0.5f + p * invB;
 8019eee:	eeed 8a0e 	vfma.f32	s17, s26, s28
                k = 0;
 8019ef2:	2600      	movs	r6, #0
                p -= 1.0f;
 8019ef4:	eeb0 aa4e 	vmov.f32	s20, s28
 8019ef8:	f7ff b9ba 	b.w	8019270 <tMBSineTri_tick+0xcc>
                x = -0.5f + p * invB;
 8019efc:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 8019f00:	683f      	ldr	r7, [r7, #0]
 8019f02:	ee3a ba49 	vsub.f32	s22, s20, s18
                k = 0;
 8019f06:	464e      	mov	r6, r9
}
 8019f08:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
 8019f0c:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 8019f10:	eeed 8a0a 	vfma.f32	s17, s26, s20
	i = lrintf(r - 0.5f);
 8019f14:	eeab 0a2c 	vfma.f32	s0, s22, s25
 8019f18:	f003 fefa 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019f1c:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f20:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	scale *= w;
 8019f24:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 8019f28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019f2c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f30:	3301      	adds	r3, #1
	scale *= w;
 8019f32:	ee67 7a8c 	vmul.f32	s15, s15, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019f3a:	ee9b 7a2c 	vfnms.f32	s14, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019f42:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019f46:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019f4a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019f4e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019f52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019f56:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019f5a:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019f5e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019f62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019f66:	3301      	adds	r3, #1
 8019f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019f6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8019f70:	f7ff b97e 	b.w	8019270 <tMBSineTri_tick+0xcc>
 8019f74:	f8d7 8000 	ldr.w	r8, [r7]
 8019f78:	e5c1      	b.n	8019afe <tMBSineTri_tick+0x95a>
	i = lrintf(r - 0.5f);
 8019f7a:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
 8019f7e:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 8019d0c <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8019f82:	ee3d fa2d 	vadd.f32	s30, s26, s27
 8019f86:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 8019f8a:	eeb0 0a6f 	vmov.f32	s0, s31
 8019f8e:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    p_at_reset += 1.0f;
 8019f92:	ee3e ea28 	vadd.f32	s28, s28, s17
	i = lrintf(r - 0.5f);
 8019f96:	eeac 0a8b 	vfma.f32	s0, s25, s22
 8019f9a:	f003 feb9 	bl	801dd10 <lrintf>
	r -= (float)i;
 8019f9e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019fa2:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019fa6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019fae:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 8019fb0:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019fb8:	eedc 7a8b 	vfnms.f32	s15, s25, s22
	scale *= w;
 8019fbc:	eeb1 ba4f 	vneg.f32	s22, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019fc0:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019fc4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019fc8:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 8019fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019fd0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019fd4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019fd8:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019fdc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019fe0:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019fe4:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019fe8:	f103 0301 	add.w	r3, r3, #1
 8019fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019ff0:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 8019ff4:	f340 80f7 	ble.w	801a1e6 <tMBSineTri_tick+0x1042>
                    x = -0.5f + p_at_reset * invB;
 8019ff8:	ee78 7a49 	vsub.f32	s15, s16, s18
	_tMBSineTri* c = *osc;
 8019ffc:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
 8019ffe:	eef0 ba6f 	vmov.f32	s23, s31
	i = lrintf(r - 0.5f);
 801a002:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = -0.5f + p_at_reset * invB;
 801a006:	eeed ba0e 	vfma.f32	s23, s26, s28
	r = MINBLEP_PHASES * phase * inv_w;
 801a00a:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
 801a00e:	eeac 0a8e 	vfma.f32	s0, s25, s28
 801a012:	f003 fe7d 	bl	801dd10 <lrintf>
	r -= (float)i;
 801a016:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a01a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a01e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a026:	3301      	adds	r3, #1
	r -= (float)i;
 801a028:	eedc 7a8e 	vfnms.f32	s15, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a02c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a030:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a034:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a038:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801a03c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a040:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 801a044:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a048:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a04c:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a050:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 801a054:	3301      	adds	r3, #1
 801a056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a05a:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 801a05e:	f8d7 8000 	ldr.w	r8, [r7]
 801a062:	e5eb      	b.n	8019c3c <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 801a064:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 801a068:	ed5f 7ad8 	vldr	s15, [pc, #-864]	; 8019d0c <tMBSineTri_tick+0xb68>
 801a06c:	ee3b fa49 	vsub.f32	s30, s22, s18
 801a070:	ee6c caa7 	vmul.f32	s25, s25, s15
 801a074:	eeb0 0a6b 	vmov.f32	s0, s23
 801a078:	eeac 0a8f 	vfma.f32	s0, s25, s30
 801a07c:	f003 fe48 	bl	801dd10 <lrintf>
	r -= (float)i;
 801a080:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a084:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a088:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a08c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a090:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 801a092:	eeb5 eac0 	vcmpe.f32	s28, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801a09a:	eedc 7a8f 	vfnms.f32	s15, s25, s30
	scale *= w;
 801a09e:	ee3d fa2d 	vadd.f32	s30, s26, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a0a2:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a0a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a0aa:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 801a0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	scale *= w;
 801a0b2:	ee2f fa0c 	vmul.f32	s30, s30, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a0b6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a0ba:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801a0be:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a0c2:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a0c6:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a0ca:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801a0ce:	f103 0301 	add.w	r3, r3, #1
 801a0d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a0d6:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 801a0da:	d472      	bmi.n	801a1c2 <tMBSineTri_tick+0x101e>
                    x = -0.5f + p_at_reset * invB;
 801a0dc:	eeed ba0e 	vfma.f32	s23, s26, s28
        else if (sw < 0)
 801a0e0:	f8d7 8000 	ldr.w	r8, [r7]
 801a0e4:	eeb1 ba4f 	vneg.f32	s22, s30
 801a0e8:	e5a8      	b.n	8019c3c <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 801a0ea:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = -0.5f + p_at_reset * invB;
 801a0ee:	eead fa0e 	vfma.f32	s30, s26, s28
	i = lrintf(r - 0.5f);
 801a0f2:	eeac 0a8a 	vfma.f32	s0, s25, s20
 801a0f6:	f003 fe0b 	bl	801dd10 <lrintf>
	r -= (float)i;
 801a0fa:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a0fe:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 801a102:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801a106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    x = -0.5f + p_at_reset * invB;
 801a10a:	eef0 fa4f 	vmov.f32	s31, s30
	r -= (float)i;
 801a10e:	eedc 7a8a 	vfnms.f32	s15, s25, s20
 801a112:	e448      	b.n	80199a6 <tMBSineTri_tick+0x802>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 801a114:	ee3d fa2d 	vadd.f32	s30, s26, s27
 801a118:	eddf 7a39 	vldr	s15, [pc, #228]	; 801a200 <tMBSineTri_tick+0x105c>
 801a11c:	ee6c caa7 	vmul.f32	s25, s25, s15
 801a120:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a124:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801a128:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a12c:	ee78 7a4b 	vsub.f32	s15, s16, s22
 801a130:	ee39 7a4e 	vsub.f32	s14, s18, s28
	i = lrintf(r - 0.5f);
 801a134:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a138:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 801a13c:	ee77 7a87 	vadd.f32	s15, s15, s14
	i = lrintf(r - 0.5f);
 801a140:	eeab 0a2c 	vfma.f32	s0, s22, s25
 801a144:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a148:	eee7 baad 	vfma.f32	s23, s15, s27
	i = lrintf(r - 0.5f);
 801a14c:	f003 fde0 	bl	801dd10 <lrintf>
	r -= (float)i;
 801a150:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a154:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a158:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a15c:	eeb1 fa4f 	vneg.f32	s30, s30
	r -= (float)i;
 801a160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a164:	3301      	adds	r3, #1
 801a166:	ee78 8ac8 	vsub.f32	s17, s17, s16
 801a16a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 801a16e:	eeb0 0a6f 	vmov.f32	s0, s31
	r -= (float)i;
 801a172:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a176:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a17a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a17e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	i = lrintf(r - 0.5f);
 801a182:	eeac 0aa8 	vfma.f32	s0, s25, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a186:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a18a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801a18e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a192:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a196:	ed83 ea3d 	vstr	s28, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a19a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801a19e:	3301      	adds	r3, #1
 801a1a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a1a4:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 801a1a8:	f003 fdb2 	bl	801dd10 <lrintf>
	r -= (float)i;
 801a1ac:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a1b0:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 801a1b4:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801a1b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1bc:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 801a1c0:	e56e      	b.n	8019ca0 <tMBSineTri_tick+0xafc>
 801a1c2:	f8d7 8000 	ldr.w	r8, [r7]
 801a1c6:	e7ad      	b.n	801a124 <tMBSineTri_tick+0xf80>
    sinPhase += inc_amount;
 801a1c8:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 801a1cc:	eeb0 aa4b 	vmov.f32	s20, s22
 801a1d0:	f7ff b82f 	b.w	8019232 <tMBSineTri_tick+0x8e>
                x = 0.5f - (p - b) * invB1;
 801a1d4:	ee79 7a4a 	vsub.f32	s15, s18, s20
                k = 1;
 801a1d8:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 801a1da:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801a1de:	eee7 8aad 	vfma.f32	s17, s15, s27
 801a1e2:	f7ff b845 	b.w	8019270 <tMBSineTri_tick+0xcc>
 801a1e6:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b)  * invB1;
 801a1ea:	ee39 ea4e 	vsub.f32	s28, s18, s28
	i = lrintf(r - 0.5f);
 801a1ee:	eeb0 0a6f 	vmov.f32	s0, s31
 801a1f2:	ee78 8ac8 	vsub.f32	s17, s17, s16
                    x = 0.5f - (p_at_reset - b)  * invB1;
 801a1f6:	eeee ba2d 	vfma.f32	s23, s28, s27
	i = lrintf(r - 0.5f);
 801a1fa:	eeac 0aa8 	vfma.f32	s0, s25, s17
 801a1fe:	e7d3      	b.n	801a1a8 <tMBSineTri_tick+0x1004>
 801a200:	42800000 	.word	0x42800000

0801a204 <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, float f)
{
    _tMBSineTri* c = *osc;
 801a204:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801a206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a20a:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 801a20e:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a212:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 801a216:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a21a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 801a21e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 801a222:	4770      	bx	lr

0801a224 <tMBSineTri_sync>:
    c->waveform = w;
}

float tMBSineTri_sync(tMBSineTri* const osc, float value)
{
    _tMBSineTri* c = *osc;
 801a224:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801a226:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801a22a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 801a22e:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 801a232:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801a236:	eef1 7a67 	vneg.f32	s15, s15
 801a23a:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801a23e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a246:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a24a:	bfcc      	ite	gt
 801a24c:	2201      	movgt	r2, #1
 801a24e:	2200      	movle	r2, #0
 801a250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a254:	f002 0201 	and.w	r2, r2, #1
 801a258:	bf88      	it	hi
 801a25a:	2200      	movhi	r2, #0
 801a25c:	b122      	cbz	r2, 801a268 <tMBSineTri_sync+0x44>
 801a25e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801a262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a266:	da04      	bge.n	801a272 <tMBSineTri_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801a268:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801a280 <tMBSineTri_sync+0x5c>
 801a26c:	ed83 7a05 	vstr	s14, [r3, #20]

    return value;
}
 801a270:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 801a272:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a276:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a27a:	ed83 7a05 	vstr	s14, [r3, #20]
}
 801a27e:	4770      	bx	lr
 801a280:	00000000 	.word	0x00000000

0801a284 <tMBSineTri_setShape>:
    c->_p = phase;
}

void tMBSineTri_setShape(tMBSineTri* const osc, float shape)
{
    _tMBSineTri* c = *osc;
 801a284:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801a286:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
 801a28a:	4770      	bx	lr

0801a28c <tMBSaw_init>:
}
//==================================================================================================
//==================================================================================================

void tMBSaw_init(tMBSaw* const osc, LEAF* const leaf)
{
 801a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSaw_initToPool(osc, &leaf->mempool);
}

void tMBSaw_initToPool(tMBSaw* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801a28e:	698e      	ldr	r6, [r1, #24]
{
 801a290:	4607      	mov	r7, r0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 801a292:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 801a296:	2500      	movs	r5, #0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 801a298:	4631      	mov	r1, r6
 801a29a:	f7fc fed7 	bl	801704c <mpool_alloc>
 801a29e:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 801a2a0:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 801a2a2:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 801a2a4:	6871      	ldr	r1, [r6, #4]
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 801a2a6:	4604      	mov	r4, r0
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801a2a8:	ed9f 6a16 	vldr	s12, [pc, #88]	; 801a304 <tMBSaw_init+0x78>
    c->syncdir = 1.0f;
 801a2ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->invSampleRate = leaf->invSampleRate;
 801a2b0:	ed91 7a01 	vldr	s14, [r1, #4]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801a2b4:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->freq = 440.f;
 801a2b8:	eddf 7a13 	vldr	s15, [pc, #76]	; 801a308 <tMBSaw_init+0x7c>
    c->_inv_w = 1.0f / c->_w;
 801a2bc:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 801a2c0:	60c3      	str	r3, [r0, #12]
    c->freq = 440.f;
 801a2c2:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 801a2c6:	6103      	str	r3, [r0, #16]
    c->syncdir = 1.0f;
 801a2c8:	6142      	str	r2, [r0, #20]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a2ca:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
 801a2cc:	6185      	str	r5, [r0, #24]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 801a2d2:	6243      	str	r3, [r0, #36]	; 0x24
    c->_j = 0;
 801a2d4:	62c5      	str	r5, [r0, #44]	; 0x2c
    c->_p = 0.0f;  /* phase [0, 1) */
 801a2d6:	61c3      	str	r3, [r0, #28]
    c->numBLEPs = 0;
 801a2d8:	6505      	str	r5, [r0, #80]	; 0x50
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801a2da:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a2de:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 801a2e0:	ed80 7ab6 	vstr	s14, [r0, #728]	; 0x2d8
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a2e4:	edc0 7a08 	vstr	s15, [r0, #32]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a2e8:	3056      	adds	r0, #86	; 0x56
    c->_inv_w = 1.0f / c->_w;
 801a2ea:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a2ee:	f002 fe11 	bl	801cf14 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 801a2f2:	4629      	mov	r1, r5
 801a2f4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801a2f8:	2220      	movs	r2, #32
}
 801a2fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 801a2fe:	f002 be09 	b.w	801cf14 <memset>
 801a302:	bf00      	nop
 801a304:	3b14f209 	.word	0x3b14f209
 801a308:	43dc0000 	.word	0x43dc0000

0801a30c <tMBSaw_tick>:
}



float tMBSaw_tick(tMBSaw* const osc)
{
 801a30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a310:	ed2d 8b08 	vpush	{d8-d11}
    _tMBSaw* c = *osc;
 801a314:	6804      	ldr	r4, [r0, #0]
{
 801a316:	b082      	sub	sp, #8
 801a318:	4605      	mov	r5, r0

    int    j;
    float  sync;
    float  p, sw, z;

    sync = c->sync;
 801a31a:	ed94 7a04 	vldr	s14, [r4, #16]


    p = c->_p;  /* phase [0, 1) */
 801a31e:	edd4 7a07 	vldr	s15, [r4, #28]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a322:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    z = c->_z;  /* low pass filter state */
 801a326:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    j = c->_j;  /* index into buffer _f */
 801a32a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a330:	f340 813d 	ble.w	801a5ae <tMBSaw_tick+0x2a2>
 801a334:	69a3      	ldr	r3, [r4, #24]
 801a336:	2b00      	cmp	r3, #0
 801a338:	f340 80b1 	ble.w	801a49e <tMBSaw_tick+0x192>
 801a33c:	ed94 7a05 	vldr	s14, [r4, #20]
    sw = c->_w * c->syncdir;
 801a340:	edd4 6a08 	vldr	s13, [r4, #32]
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a344:	eeb1 7a47 	vneg.f32	s14, s14
    float inv_sw = c->_inv_w * c->syncdir;
 801a348:	ed94 9a0a 	vldr	s18, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 801a34c:	ee67 6a26 	vmul.f32	s13, s14, s13
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a350:	ed84 7a05 	vstr	s14, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 801a354:	ee27 9a09 	vmul.f32	s18, s14, s18
    p += sw - (int)sw;
 801a358:	eebd 8ae6 	vcvt.s32.f32	s16, s13
 801a35c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a360:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a364:	ee37 8ac8 	vsub.f32	s16, s15, s16
        if (sw > 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset);
        else if (sw < 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);

    } else if (p >= 1.0f) {  /* normal phase reset */
 801a368:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a36c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a374:	f280 8135 	bge.w	801a5e2 <tMBSaw_tick+0x2d6>
        p -= 1.0f;
        tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);

    } else if (p < 0.0f) {
 801a378:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a380:	f100 8193 	bmi.w	801a6aa <tMBSaw_tick+0x39e>

    //construct the current output sample based on the state of the active BLEPs

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;

    c->_f[currentSamp] = 0.5f - p;
 801a384:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801a388:	1d33      	adds	r3, r6, #4
 801a38a:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = 0.5f - p;
 801a38e:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801a392:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a396:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801a39a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 801a39e:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a3a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	f000 817a 	beq.w	801a6a0 <tMBSaw_tick+0x394>
 801a3ac:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801a3b0:	f8b4 e052 	ldrh.w	lr, [r4, #82]	; 0x52
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

    	//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a3b4:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a3b8:	2000      	movs	r0, #0
 801a3ba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801a3be:	4deb      	ldr	r5, [pc, #940]	; (801a76c <tMBSaw_tick+0x460>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801a3c0:	ebae 0300 	sub.w	r3, lr, r0
 801a3c4:	b29b      	uxth	r3, r3
 801a3c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 801a3ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a3ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a3d2:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a3d6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801a3da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a3de:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 801a3e2:	b289      	uxth	r1, r1
 801a3e4:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 801a3e8:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a3ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a3ee:	fa1f f888 	uxth.w	r8, r8
 801a3f2:	fa1f f989 	uxth.w	r9, r9
 801a3f6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 801a3fa:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801a3fe:	f8b2 a056 	ldrh.w	sl, [r2, #86]	; 0x56
 801a402:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 801a406:	f8b9 9056 	ldrh.w	r9, [r9, #86]	; 0x56
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a40a:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a40c:	ed98 6a36 	vldr	s12, [r8, #216]	; 0xd8
 801a410:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 801a414:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a418:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a41c:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 801a420:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a424:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a426:	f8b3 8056 	ldrh.w	r8, [r3, #86]	; 0x56
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a42a:	edd9 6a01 	vldr	s13, [r9, #4]
 801a42e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a432:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a436:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a43a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a43e:	edd1 6a37 	vldr	s13, [r1, #220]	; 0xdc
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a442:	f8a3 8056 	strh.w	r8, [r3, #86]	; 0x56
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a446:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
 801a44a:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a44c:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a450:	f0c0 80a6 	bcc.w	801a5a0 <tMBSaw_tick+0x294>
		{
			c->numBLEPs--;
 801a454:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a458:	3001      	adds	r0, #1
 801a45a:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 801a45e:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a460:	4290      	cmp	r0, r2
			c->numBLEPs--;
 801a462:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a466:	dbab      	blt.n	801a3c0 <tMBSaw_tick+0xb4>
 801a468:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
		}

    }

    z += 0.5f * (c->_f[j] - z); // LP filtering
 801a46c:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 801a470:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801a472:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 801a476:	ed84 8a07 	vstr	s16, [r4, #28]
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801a47a:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 801a47e:	f006 0607 	and.w	r6, r6, #7
    c->_z = z;
    c->_j = j;
 801a482:	62e6      	str	r6, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801a484:	eee7 7a26 	vfma.f32	s15, s14, s13


    return -c->out;
 801a488:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 801a48c:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 801a490:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 801a494:	b002      	add	sp, #8
 801a496:	ecbd 8b08 	vpop	{d8-d11}
 801a49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a49e:	ed94 9a05 	vldr	s18, [r4, #20]
    sw = c->_w * c->syncdir;
 801a4a2:	ed94 aa08 	vldr	s20, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 801a4a6:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 801a4aa:	ee29 aa0a 	vmul.f32	s20, s18, s20
    float inv_sw = c->_inv_w * c->syncdir;
 801a4ae:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 801a4b2:	eefd 6aca 	vcvt.s32.f32	s13, s20
 801a4b6:	ee77 7a8a 	vadd.f32	s15, s15, s20
 801a4ba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a4be:	ee77 8ae6 	vsub.f32	s17, s15, s13
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 801a4c2:	f040 815e 	bne.w	801a782 <tMBSaw_tick+0x476>
        if (sw > 0) p = eof_offset;
 801a4c6:	eeb5 aac0 	vcmpe.f32	s20, #0.0
        float eof_offset = sync * sw;
 801a4ca:	ee27 7a0a 	vmul.f32	s14, s14, s20
        if (sw > 0) p = eof_offset;
 801a4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 801a4d2:	ee78 aac7 	vsub.f32	s21, s17, s14
        if (sw > 0) p = eof_offset;
 801a4d6:	f340 80b2 	ble.w	801a63e <tMBSaw_tick+0x332>
 801a4da:	eeb0 8a47 	vmov.f32	s16, s14
        if (p_at_reset >= 1.0f) {
 801a4de:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 801a4e2:	eef4 aacb 	vcmpe.f32	s21, s22
 801a4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4ea:	db2d      	blt.n	801a548 <tMBSaw_tick+0x23c>
            p_at_reset -= 1.0f;
 801a4ec:	ee7a aacb 	vsub.f32	s21, s21, s22
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801a4f0:	eddf ba9f 	vldr	s23, [pc, #636]	; 801a770 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 801a4f4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a4f8:	ee69 ba2b 	vmul.f32	s23, s18, s23
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801a4fc:	ee77 8a2a 	vadd.f32	s17, s14, s21
	i = lrintf(r - 0.5f);
 801a500:	eea8 0aab 	vfma.f32	s0, s17, s23
 801a504:	f003 fc04 	bl	801dd10 <lrintf>
	r -= (float)i;
 801a508:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a50c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a510:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a518:	3301      	adds	r3, #1
	r -= (float)i;
 801a51a:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a51e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a522:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a526:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a52a:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a52e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801a532:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a536:	ed82 ba37 	vstr	s22, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a53a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 801a53e:	3301      	adds	r3, #1
 801a540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a544:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        if (p_at_reset < 0.0f) {
 801a548:	eef5 aac0 	vcmpe.f32	s21, #0.0
 801a54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a550:	f100 80da 	bmi.w	801a708 <tMBSaw_tick+0x3fc>
        if (sw > 0)
 801a554:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 801a558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a55c:	dc74      	bgt.n	801a648 <tMBSaw_tick+0x33c>
        else if (sw < 0)
 801a55e:	f57f af11 	bpl.w	801a384 <tMBSaw_tick+0x78>
	_tMBSaw* c = *osc;
 801a562:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a566:	eddf 7a82 	vldr	s15, [pc, #520]	; 801a770 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 801a56a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801a56e:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801a570:	ee29 9a27 	vmul.f32	s18, s18, s15
 801a574:	ee78 8a68 	vsub.f32	s17, s16, s17
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);
 801a578:	eef1 aa6a 	vneg.f32	s21, s21
	i = lrintf(r - 0.5f);
 801a57c:	eea9 0a28 	vfma.f32	s0, s18, s17
 801a580:	f003 fbc6 	bl	801dd10 <lrintf>
	r -= (float)i;
 801a584:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a588:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a58c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a594:	3301      	adds	r3, #1
	r -= (float)i;
 801a596:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a59a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a59e:	e06b      	b.n	801a678 <tMBSaw_tick+0x36c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a5a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801a5a4:	3001      	adds	r0, #1
 801a5a6:	4283      	cmp	r3, r0
 801a5a8:	f73f af0a 	bgt.w	801a3c0 <tMBSaw_tick+0xb4>
 801a5ac:	e75c      	b.n	801a468 <tMBSaw_tick+0x15c>
    sw = c->_w * c->syncdir;
 801a5ae:	ed94 9a05 	vldr	s18, [r4, #20]
    } else if (p >= 1.0f) {  /* normal phase reset */
 801a5b2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    sw = c->_w * c->syncdir;
 801a5b6:	ed94 7a08 	vldr	s14, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 801a5ba:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 801a5be:	ee29 7a07 	vmul.f32	s14, s18, s14
    float inv_sw = c->_inv_w * c->syncdir;
 801a5c2:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 801a5c6:	eebd 8ac7 	vcvt.s32.f32	s16, s14
 801a5ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a5ce:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a5d2:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (p >= 1.0f) {  /* normal phase reset */
 801a5d6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5de:	f6ff aecb 	blt.w	801a378 <tMBSaw_tick+0x6c>
        p -= 1.0f;
 801a5e2:	eddf 7a63 	vldr	s15, [pc, #396]	; 801a770 <tMBSaw_tick+0x464>
 801a5e6:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
 801a5ea:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801a5ee:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801a5f0:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 801a5f4:	eea9 0a08 	vfma.f32	s0, s18, s16
 801a5f8:	f003 fb8a 	bl	801dd10 <lrintf>
	r -= (float)i;
 801a5fc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a600:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a604:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a60c:	3301      	adds	r3, #1
	r -= (float)i;
 801a60e:	eed9 7a08 	vfnms.f32	s15, s18, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a616:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a61a:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a61e:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a622:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801a626:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a62a:	edc2 8a37 	vstr	s17, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a62e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 801a632:	3301      	adds	r3, #1
 801a634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a638:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 801a63c:	e6a2      	b.n	801a384 <tMBSaw_tick+0x78>
        else if (sw < 0) p = 1.0f - eof_offset;
 801a63e:	f100 809b 	bmi.w	801a778 <tMBSaw_tick+0x46c>
    p += sw - (int)sw;
 801a642:	eeb0 8a68 	vmov.f32	s16, s17
 801a646:	e74a      	b.n	801a4de <tMBSaw_tick+0x1d2>
	_tMBSaw* c = *osc;
 801a648:	eddf 8a49 	vldr	s17, [pc, #292]	; 801a770 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 801a64c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801a650:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801a652:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 801a656:	eea8 0a88 	vfma.f32	s0, s17, s16
 801a65a:	f003 fb59 	bl	801dd10 <lrintf>
	r -= (float)i;
 801a65e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a662:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a666:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a66a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a66e:	3301      	adds	r3, #1
	r -= (float)i;
 801a670:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a678:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a67c:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a680:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a684:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801a688:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a68c:	edc2 aa37 	vstr	s21, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a690:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 801a694:	3301      	adds	r3, #1
 801a696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a69a:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 801a69e:	e671      	b.n	801a384 <tMBSaw_tick+0x78>
 801a6a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a6a4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801a6a8:	e6e0      	b.n	801a46c <tMBSaw_tick+0x160>
	r = MINBLEP_PHASES * phase * inv_w;
 801a6aa:	ee29 9a08 	vmul.f32	s18, s18, s16
	i = lrintf(r - 0.5f);
 801a6ae:	ed9f aa30 	vldr	s20, [pc, #192]	; 801a770 <tMBSaw_tick+0x464>
 801a6b2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801a6b6:	682d      	ldr	r5, [r5, #0]
        p += 1.0f;
 801a6b8:	ee38 8a28 	vadd.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
 801a6bc:	eea9 0a0a 	vfma.f32	s0, s18, s20
 801a6c0:	f003 fb26 	bl	801dd10 <lrintf>
	r -= (float)i;
 801a6c4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a6c8:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a6cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a6d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a6d4:	4a27      	ldr	r2, [pc, #156]	; (801a774 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a6d6:	3301      	adds	r3, #1
	r -= (float)i;
 801a6d8:	eed9 7a0a 	vfnms.f32	s15, s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a6dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a6e0:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a6e4:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a6e8:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a6ec:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801a6f0:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a6f4:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a6f8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 801a6fc:	3301      	adds	r3, #1
 801a6fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a702:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 801a706:	e63d      	b.n	801a384 <tMBSaw_tick+0x78>
            p_at_reset += 1.0f;
 801a708:	ed9f ba19 	vldr	s22, [pc, #100]	; 801a770 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 801a70c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
            p_at_reset += 1.0f;
 801a710:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tMBSaw* c = *osc;
 801a714:	682f      	ldr	r7, [r5, #0]
 801a716:	ee29 ba0b 	vmul.f32	s22, s18, s22
            p_at_reset += 1.0f;
 801a71a:	ee7a aaa7 	vadd.f32	s21, s21, s15
	i = lrintf(r - 0.5f);
 801a71e:	eeab 0a28 	vfma.f32	s0, s22, s17
 801a722:	f003 faf5 	bl	801dd10 <lrintf>
	r -= (float)i;
 801a726:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a72a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a72e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a736:	4a0f      	ldr	r2, [pc, #60]	; (801a774 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a738:	3301      	adds	r3, #1
	r -= (float)i;
 801a73a:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a73e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a742:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a746:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a74a:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a74e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 801a752:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a756:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a75a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801a75e:	3301      	adds	r3, #1
 801a760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a764:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
}
 801a768:	e6f4      	b.n	801a554 <tMBSaw_tick+0x248>
 801a76a:	bf00      	nop
 801a76c:	0802d6f8 	.word	0x0802d6f8
 801a770:	42800000 	.word	0x42800000
 801a774:	bf800000 	.word	0xbf800000
        else if (sw < 0) p = 1.0f - eof_offset;
 801a778:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801a77c:	ee38 8a47 	vsub.f32	s16, s16, s14
 801a780:	e6ad      	b.n	801a4de <tMBSaw_tick+0x1d2>
    p += sw - (int)sw;
 801a782:	eeb0 8a68 	vmov.f32	s16, s17
 801a786:	e5ef      	b.n	801a368 <tMBSaw_tick+0x5c>

0801a788 <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
    _tMBSaw* c = *osc;
 801a788:	6803      	ldr	r3, [r0, #0]
    c->freq = f;

    c->_w = c->freq * c->invSampleRate;
    c->_inv_w = 1.0f / c->_w;
 801a78a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;
 801a78e:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
    c->freq = f;
 801a792:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;
 801a796:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 801a79a:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;
 801a79e:	ed83 0a08 	vstr	s0, [r3, #32]
    c->_inv_w = 1.0f / c->_w;
 801a7a2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 801a7a6:	4770      	bx	lr

0801a7a8 <tMBSaw_sync>:

float tMBSaw_sync(tMBSaw* const osc, float value)
{
    _tMBSaw* c = *osc;
 801a7a8:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801a7aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801a7ae:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 801a7b2:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 801a7b6:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801a7ba:	eef1 7a67 	vneg.f32	s15, s15
 801a7be:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801a7c2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7ca:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a7ce:	bfcc      	ite	gt
 801a7d0:	2201      	movgt	r2, #1
 801a7d2:	2200      	movle	r2, #0
 801a7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7d8:	f002 0201 	and.w	r2, r2, #1
 801a7dc:	bf88      	it	hi
 801a7de:	2200      	movhi	r2, #0
 801a7e0:	b122      	cbz	r2, 801a7ec <tMBSaw_sync+0x44>
 801a7e2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801a7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7ea:	da04      	bge.n	801a7f6 <tMBSaw_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801a7ec:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801a804 <tMBSaw_sync+0x5c>
 801a7f0:	ed83 7a04 	vstr	s14, [r3, #16]
    
    return value;
}
 801a7f4:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 801a7f6:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a7fa:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a7fe:	ed83 7a04 	vstr	s14, [r3, #16]
}
 801a802:	4770      	bx	lr
 801a804:	00000000 	.word	0x00000000

0801a808 <tMBSawPulse_init>:


//==================================================================================================

void tMBSawPulse_init(tMBSawPulse* const osc, LEAF* const leaf)
{
 801a808:	b570      	push	{r4, r5, r6, lr}
    tMBSawPulse_initToPool(osc, &leaf->mempool);
}

void tMBSawPulse_initToPool(tMBSawPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801a80a:	698d      	ldr	r5, [r1, #24]
{
 801a80c:	4606      	mov	r6, r0
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 801a80e:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 801a812:	4629      	mov	r1, r5
 801a814:	f7fc fc1a 	bl	801704c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    c->gain = 1.0f;
 801a818:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 801a81c:	6030      	str	r0, [r6, #0]
    c->active = 1;
 801a81e:	2201      	movs	r2, #1
    c->mempool = m;
 801a820:	6005      	str	r5, [r0, #0]
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 801a822:	4604      	mov	r4, r0
    LEAF* leaf = c->mempool->leaf;
 801a824:	686b      	ldr	r3, [r5, #4]
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 801a826:	2500      	movs	r5, #0
    c->gain = 1.0f;
 801a828:	f8c0 12f0 	str.w	r1, [r0, #752]	; 0x2f0
    c->active = 1;
 801a82c:	f8c0 22f4 	str.w	r2, [r0, #756]	; 0x2f4
    c->waveform = 0.0f;
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801a830:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 801a834:	ed93 7a01 	vldr	s14, [r3, #4]
    c->lastsyncin = 0.0f;
 801a838:	2300      	movs	r3, #0
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 801a83a:	ed9f 6a16 	vldr	s12, [pc, #88]	; 801a894 <tMBSawPulse_init+0x8c>
    c->freq = 440.f;
 801a83e:	eddf 7a16 	vldr	s15, [pc, #88]	; 801a898 <tMBSawPulse_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 801a842:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->syncdir = 1.0f;
 801a846:	6141      	str	r1, [r0, #20]
    c->freq = 440.f;
 801a848:	edc0 7a02 	vstr	s15, [r0, #8]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801a84c:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->softsync = 0;
 801a850:	6185      	str	r5, [r0, #24]
    c->_j = 0;
 801a852:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801a854:	6282      	str	r2, [r0, #40]	; 0x28
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a856:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_x = 0.5f;  /* temporary output variable */
 801a85a:	62c2      	str	r2, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
 801a85c:	6685      	str	r5, [r0, #104]	; 0x68
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a85e:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801a860:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a864:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 801a866:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    c->lastsyncin = 0.0f;
 801a86a:	60c3      	str	r3, [r0, #12]
    c->sync = 0.0f;
 801a86c:	6103      	str	r3, [r0, #16]
    c->waveform = 0.0f;
 801a86e:	61c3      	str	r3, [r0, #28]
    c->_z = 0.0f;
 801a870:	6303      	str	r3, [r0, #48]	; 0x30
    c->_p = 0.0f;  /* phase [0, 1) */
 801a872:	6203      	str	r3, [r0, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a874:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801a878:	6343      	str	r3, [r0, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a87a:	306e      	adds	r0, #110	; 0x6e
    c->_inv_w = 1.0f / c->_w;
 801a87c:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a880:	f002 fb48 	bl	801cf14 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 801a884:	4629      	mov	r1, r5
 801a886:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801a88a:	2220      	movs	r2, #32
}
 801a88c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 801a890:	f002 bb40 	b.w	801cf14 <memset>
 801a894:	3b14f209 	.word	0x3b14f209
 801a898:	43dc0000 	.word	0x43dc0000

0801a89c <tMBSawPulse_tick>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tMBSawPulse_tick(tMBSawPulse* const osc)
#else
float tMBSawPulse_tick(tMBSawPulse* const osc)
#endif
{
 801a89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8a0:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
 801a8a4:	6804      	ldr	r4, [r0, #0]
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    float shape = c->shape;
    float sawShape = 1.0f - c->shape;
 801a8a6:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
 801a8aa:	b082      	sub	sp, #8
 801a8ac:	4607      	mov	r7, r0
    sync = c->sync;
 801a8ae:	ed94 8a04 	vldr	s16, [r4, #16]
    float shape = c->shape;
 801a8b2:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    x = c->_x;  /* temporary output variable */
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */

    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a8b6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801a8ba:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    float sawShape = 1.0f - c->shape;
 801a8be:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
 801a8c2:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801a8c6:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
 801a8ca:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
 801a8d2:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 801a8d6:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
 801a8da:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
 801a8de:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a8e0:	f340 80d6 	ble.w	801aa90 <tMBSawPulse_tick+0x1f4>
 801a8e4:	f8d4 8018 	ldr.w	r8, [r4, #24]
 801a8e8:	f1b8 0f00 	cmp.w	r8, #0
 801a8ec:	dd65      	ble.n	801a9ba <tMBSawPulse_tick+0x11e>
 801a8ee:	edd4 6a05 	vldr	s13, [r4, #20]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 801a8f2:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a8f6:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 801a8fa:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a8fe:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 801a902:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 801a906:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 801a90a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801a90e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a912:	ee37 8a48 	vsub.f32	s16, s14, s16


    }


    else if (!k)
 801a916:	ee1c 3a90 	vmov	r3, s25
    {  /* normal operation for pulse, signal currently high */

		if (sw > 0)
 801a91a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
 801a91e:	2b00      	cmp	r3, #0
 801a920:	f040 80cd 	bne.w	801aabe <tMBSawPulse_tick+0x222>
		if (sw > 0)
 801a924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a928:	f340 8258 	ble.w	801addc <tMBSawPulse_tick+0x540>
		{
			if (p >= b) {
 801a92c:	eeb4 8acb 	vcmpe.f32	s16, s22
 801a930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a934:	f280 81ca 	bge.w	801accc <tMBSawPulse_tick+0x430>
 801a938:	eddf 5ae2 	vldr	s11, [pc, #904]	; 801acc4 <tMBSawPulse_tick+0x428>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
				k = 1;
				x = -0.5f;
			}
			if (p >= 1.0f) {
 801a93c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a940:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a948:	f2c0 80c7 	blt.w	801aada <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
 801a94c:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 801a94e:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 801a952:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801a956:	2b00      	cmp	r3, #0
 801a958:	f000 81f1 	beq.w	801ad3e <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 801a95c:	eddf 7ada 	vldr	s15, [pc, #872]	; 801acc8 <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 801a960:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);
				k = 0;
				x = 0.5f;
 801a964:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801a968:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
 801a96c:	eea9 0a08 	vfma.f32	s0, s18, s16
 801a970:	f003 f9ce 	bl	801dd10 <lrintf>
		r -= (float)i;
 801a974:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a978:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a97c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801a980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a984:	eddf 5acf 	vldr	s11, [pc, #828]	; 801acc4 <tMBSawPulse_tick+0x428>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a988:	3301      	adds	r3, #1
		r -= (float)i;
 801a98a:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a98e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a992:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a996:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a99a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a99e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801a9a2:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a9a6:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a9aa:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801a9ae:	3301      	adds	r3, #1
 801a9b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a9b4:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801a9b8:	e08f      	b.n	801aada <tMBSawPulse_tick+0x23e>
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a9ba:	ed94 9a05 	vldr	s18, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 801a9be:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 801a9c2:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 801a9c6:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 801a9ca:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 801a9ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 801a9d2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a9d6:	ee77 8a66 	vsub.f32	s17, s14, s13
    if (sync > 0.0f && c->softsync == 0)
 801a9da:	f040 864c 	bne.w	801b676 <tMBSawPulse_tick+0xdda>
        if (sw > 0) p = eof_offset;
 801a9de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a9e2:	4625      	mov	r5, r4
        float eof_offset = sync * sw;
 801a9e4:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
 801a9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 801a9ec:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
 801a9f0:	f340 8113 	ble.w	801ac1a <tMBSawPulse_tick+0x37e>
		 if (!k)
 801a9f4:	ee1c 3a90 	vmov	r3, s25
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	f040 8202 	bne.w	801ae02 <tMBSawPulse_tick+0x566>
				 if (p_at_reset >= b)
 801a9fe:	eeb4 baed 	vcmpe.f32	s22, s27
 801aa02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa06:	f240 835b 	bls.w	801b0c0 <tMBSawPulse_tick+0x824>
    _tMBSawPulse* c = *osc;
 801aa0a:	46a1      	mov	r9, r4
    if (c->active)
 801aa0c:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
				 if (p_at_reset >= 1.0f)
 801aa10:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801aa14:	eef4 dae8 	vcmpe.f32	s27, s17
 801aa18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa1c:	f280 823d 	bge.w	801ae9a <tMBSawPulse_tick+0x5fe>
    if (c->active)
 801aa20:	b35b      	cbz	r3, 801aa7a <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
 801aa22:	eddf 8aa9 	vldr	s17, [pc, #676]	; 801acc8 <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 801aa26:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
 801aa2a:	ee6d da2d 	vmul.f32	s27, s26, s27
 801aa2e:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801aa32:	eea8 0a28 	vfma.f32	s0, s16, s17
 801aa36:	f003 f96b 	bl	801dd10 <lrintf>
		r -= (float)i;
 801aa3a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa3e:	f8b9 306a 	ldrh.w	r3, [r9, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801aa42:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801aa46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa4a:	3301      	adds	r3, #1
		r -= (float)i;
 801aa4c:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801aa54:	eb09 0243 	add.w	r2, r9, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa58:	f8a9 306a 	strh.w	r3, [r9, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801aa5c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801aa60:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
 801aa64:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801aa68:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801aa6c:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801aa70:	3301      	adds	r3, #1
 801aa72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aa76:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
            if (k) {
 801aa7a:	f1b8 0f00 	cmp.w	r8, #0
 801aa7e:	f040 83c0 	bne.w	801b202 <tMBSawPulse_tick+0x966>
			if (p >= b) {
 801aa82:	eeb4 bac8 	vcmpe.f32	s22, s16
 801aa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa8a:	f200 81b2 	bhi.w	801adf2 <tMBSawPulse_tick+0x556>
 801aa8e:	e0db      	b.n	801ac48 <tMBSawPulse_tick+0x3ac>
    sw = w * c->syncdir;
 801aa90:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
 801aa94:	ee1c 3a90 	vmov	r3, s25
    float inv_sw = c->_inv_w * c->syncdir;
 801aa98:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 801aa9c:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 801aaa0:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 801aaa4:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 801aaa8:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
 801aaac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 801aab0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801aab4:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	f43f af33 	beq.w	801a924 <tMBSawPulse_tick+0x88>
			}
		}

	} else {  /* normal operation, signal currently low */

		if (sw > 0)
 801aabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aac2:	f340 8141 	ble.w	801ad48 <tMBSawPulse_tick+0x4ac>
		{
			if (p >= 1.0f) {
 801aac6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801aaca:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801aace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aad2:	f280 80ac 	bge.w	801ac2e <tMBSawPulse_tick+0x392>
    c->_w = w;
    c->_b = b;
    c->_x = x;
    c->_z = z;
    c->_j = j;
    c->_k = k;
 801aad6:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 801aada:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801aade:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
 801aae0:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801aae4:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 801aae8:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
 801aaec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801aaf0:	eea6 7a8d 	vfma.f32	s14, s13, s26
 801aaf4:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801aaf8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 801aafc:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801ab00:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	f000 8177 	beq.w	801adf8 <tMBSawPulse_tick+0x55c>
 801ab0a:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801ab0e:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801ab12:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801ab16:	2000      	movs	r0, #0
 801ab18:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801ab1c:	4d68      	ldr	r5, [pc, #416]	; (801acc0 <tMBSawPulse_tick+0x424>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801ab1e:	ebae 0300 	sub.w	r3, lr, r0
 801ab22:	b29b      	uxth	r3, r3
 801ab24:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 801ab28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ab2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ab30:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801ab34:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801ab38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801ab3c:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 801ab40:	b289      	uxth	r1, r1
 801ab42:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 801ab46:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801ab48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801ab4c:	fa1f f888 	uxth.w	r8, r8
 801ab50:	fa1f f989 	uxth.w	r9, r9
 801ab54:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 801ab58:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801ab5c:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
 801ab60:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 801ab64:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801ab68:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801ab6a:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
 801ab6e:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 801ab72:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801ab76:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801ab7a:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 801ab7e:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801ab82:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801ab84:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801ab88:	edd9 6a01 	vldr	s13, [r9, #4]
 801ab8c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801ab90:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801ab94:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801ab98:	eee6 7a26 	vfma.f32	s15, s12, s13
 801ab9c:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801aba0:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801aba4:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
 801aba8:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801abaa:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801abae:	d32e      	bcc.n	801ac0e <tMBSawPulse_tick+0x372>
			c->numBLEPs--;
 801abb0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801abb4:	3001      	adds	r0, #1
 801abb6:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 801abba:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801abbc:	4282      	cmp	r2, r0
			c->numBLEPs--;
 801abbe:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801abc2:	dcac      	bgt.n	801ab1e <tMBSawPulse_tick+0x282>
 801abc4:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801abc8:	ee37 7a4a 	vsub.f32	s14, s14, s20

    return -c->out * c->gain;
 801abcc:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801abd0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 801abd4:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801abd6:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
 801abda:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
 801abde:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 801abe2:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
 801abe6:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801abea:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 801abee:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
 801abf2:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
 801abf4:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
 801abf8:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
 801abfc:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 801ac00:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 801ac04:	b002      	add	sp, #8
 801ac06:	ecbd 8b0e 	vpop	{d8-d14}
 801ac0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801ac0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801ac12:	3001      	adds	r0, #1
 801ac14:	4283      	cmp	r3, r0
 801ac16:	dc82      	bgt.n	801ab1e <tMBSawPulse_tick+0x282>
 801ac18:	e7d4      	b.n	801abc4 <tMBSawPulse_tick+0x328>
        else if (sw < 0) p = 1.0f - eof_offset;
 801ac1a:	f100 81b4 	bmi.w	801af86 <tMBSawPulse_tick+0x6ea>
		 if (!k)
 801ac1e:	ee1c 3a90 	vmov	r3, s25
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	f040 8129 	bne.w	801ae7a <tMBSawPulse_tick+0x5de>
    p += sw - (int)sw;
 801ac28:	eeb0 8a68 	vmov.f32	s16, s17
 801ac2c:	e0e1      	b.n	801adf2 <tMBSawPulse_tick+0x556>
    _tMBSawPulse* c = *osc;
 801ac2e:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 801ac30:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 801ac34:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	f040 80f3 	bne.w	801ae24 <tMBSawPulse_tick+0x588>
			if (!k && p >= b) {
 801ac3e:	eeb4 bac8 	vcmpe.f32	s22, s16
 801ac42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac46:	d87a      	bhi.n	801ad3e <tMBSawPulse_tick+0x4a2>
    _tMBSawPulse* c = *osc;
 801ac48:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801ac4a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	f000 80e3 	beq.w	801ae1a <tMBSawPulse_tick+0x57e>
		r = MINBLEP_PHASES * phase * inv_w;
 801ac54:	eddf 8a1c 	vldr	s17, [pc, #112]	; 801acc8 <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801ac58:	ee78 7a4b 	vsub.f32	s15, s16, s22
		i = lrintf(r - 0.5f);
 801ac5c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801ac60:	ee69 8a28 	vmul.f32	s17, s18, s17
 801ac64:	eeb0 9a67 	vmov.f32	s18, s15
				x = -0.5f;
 801ac68:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801ac6c:	eea7 0aa8 	vfma.f32	s0, s15, s17
 801ac70:	f003 f84e 	bl	801dd10 <lrintf>
		r -= (float)i;
 801ac74:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac78:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801ac7c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801ac80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac84:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801ac86:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ac8a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801ac92:	ee99 7a28 	vfnms.f32	s14, s18, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ac96:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac9a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ac9e:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801aca2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801aca6:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801acaa:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801acae:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801acb2:	3301      	adds	r3, #1
 801acb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801acb8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801acbc:	e70d      	b.n	801aada <tMBSawPulse_tick+0x23e>
 801acbe:	bf00      	nop
 801acc0:	0802d6f8 	.word	0x0802d6f8
 801acc4:	00000000 	.word	0x00000000
 801acc8:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
 801accc:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801acce:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	f000 80dc 	beq.w	801ae90 <tMBSawPulse_tick+0x5f4>
		r = MINBLEP_PHASES * phase * inv_w;
 801acd8:	ed5f 9a05 	vldr	s19, [pc, #-20]	; 801acc8 <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801acdc:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 801ace0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801ace4:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
 801ace8:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801acec:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801acf0:	f003 f80e 	bl	801dd10 <lrintf>
		r -= (float)i;
 801acf4:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801acf8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801acfc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801ad00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad04:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801ad06:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ad0a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801ad12:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ad16:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad1a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ad1e:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801ad22:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801ad26:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ad2a:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ad2e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801ad32:	3301      	adds	r3, #1
 801ad34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ad38:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801ad3c:	e5fe      	b.n	801a93c <tMBSawPulse_tick+0xa0>
				x = 0.5f;
 801ad3e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
 801ad42:	ed5f 5a20 	vldr	s11, [pc, #-128]	; 801acc4 <tMBSawPulse_tick+0x428>
 801ad46:	e6c8      	b.n	801aada <tMBSawPulse_tick+0x23e>
		else if (sw < 0)
 801ad48:	f57f aec5 	bpl.w	801aad6 <tMBSawPulse_tick+0x23a>
			if (p < b) {
 801ad4c:	eeb4 8acb 	vcmpe.f32	s16, s22
 801ad50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad54:	f100 80de 	bmi.w	801af14 <tMBSawPulse_tick+0x678>
			if (p < 0.0f) {
 801ad58:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ad5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad60:	f57f aeb9 	bpl.w	801aad6 <tMBSawPulse_tick+0x23a>
    _tMBSawPulse* c = *osc;
 801ad64:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 801ad66:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 801ad6a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 801ad6e:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	f000 83c7 	beq.w	801b506 <tMBSawPulse_tick+0xc6a>
		i = lrintf(r - 0.5f);
 801ad78:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801ad7c:	ed5f 9a2e 	vldr	s19, [pc, #-184]	; 801acc8 <tMBSawPulse_tick+0x42c>
		r = MINBLEP_PHASES * phase * inv_w;
 801ad80:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
 801ad84:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
 801ad88:	eeb0 0a6a 	vmov.f32	s0, s21
 801ad8c:	eea9 0a29 	vfma.f32	s0, s18, s19
 801ad90:	f002 ffbe 	bl	801dd10 <lrintf>
		r -= (float)i;
 801ad94:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad98:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801ad9c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801ada0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ada4:	4acd      	ldr	r2, [pc, #820]	; (801b0dc <tMBSawPulse_tick+0x840>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ada6:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ada8:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801adac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801adb0:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 801adb4:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801adb8:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801adbc:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801adc0:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801adc4:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801adc8:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801adcc:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801add0:	3301      	adds	r3, #1
 801add2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801add6:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801adda:	e67e      	b.n	801aada <tMBSawPulse_tick+0x23e>
			if (p < 0.0f) {
 801addc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801ade0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ade4:	d505      	bpl.n	801adf2 <tMBSawPulse_tick+0x556>
 801ade6:	eef5 7a40 	vcmp.f32	s15, #0.0
 801adea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adee:	f100 8280 	bmi.w	801b2f2 <tMBSawPulse_tick+0xa56>
		 if (!k)
 801adf2:	eddf 5abb 	vldr	s11, [pc, #748]	; 801b0e0 <tMBSawPulse_tick+0x844>
 801adf6:	e670      	b.n	801aada <tMBSawPulse_tick+0x23e>
 801adf8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801adfc:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 801ae00:	e6e2      	b.n	801abc8 <tMBSawPulse_tick+0x32c>
				 if (p_at_reset >= 1.0f)
 801ae02:	eef4 dae9 	vcmpe.f32	s27, s19
 801ae06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae0a:	f280 8171 	bge.w	801b0f0 <tMBSawPulse_tick+0x854>
    _tMBSawPulse* c = *osc;
 801ae0e:	46a1      	mov	r9, r4
    if (c->active)
 801ae10:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
 801ae14:	ee1c 8a90 	vmov	r8, s25
 801ae18:	e602      	b.n	801aa20 <tMBSawPulse_tick+0x184>
 801ae1a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 801ae1e:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801ae22:	e65a      	b.n	801aada <tMBSawPulse_tick+0x23e>
		r = MINBLEP_PHASES * phase * inv_w;
 801ae24:	eddf 9ab1 	vldr	s19, [pc, #708]	; 801b0ec <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
 801ae28:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801ae2c:	ee69 9a29 	vmul.f32	s19, s18, s19
 801ae30:	eea9 0a88 	vfma.f32	s0, s19, s16
 801ae34:	f002 ff6c 	bl	801dd10 <lrintf>
		r -= (float)i;
 801ae38:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ae3c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801ae40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801ae44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ae48:	3301      	adds	r3, #1
		r -= (float)i;
 801ae4a:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ae4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ae52:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ae56:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ae5a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801ae5e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801ae62:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ae66:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ae6a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801ae6e:	3301      	adds	r3, #1
 801ae70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ae74:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801ae78:	e6e1      	b.n	801ac3e <tMBSawPulse_tick+0x3a2>
			 else if (sw < 0)
 801ae7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ae7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae82:	f100 8172 	bmi.w	801b16a <tMBSawPulse_tick+0x8ce>
    c->_k = k;
 801ae86:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
 801ae8a:	eeb0 8a68 	vmov.f32	s16, s17
 801ae8e:	e624      	b.n	801aada <tMBSawPulse_tick+0x23e>
 801ae90:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 801ae94:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801ae98:	e550      	b.n	801a93c <tMBSawPulse_tick+0xa0>
					 p_at_reset -= 1.0f;
 801ae9a:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	f000 8118 	beq.w	801b0d4 <tMBSawPulse_tick+0x838>
		r = MINBLEP_PHASES * phase * inv_w;
 801aea4:	eddf 9a91 	vldr	s19, [pc, #580]	; 801b0ec <tMBSawPulse_tick+0x850>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801aea8:	ee78 aa2d 	vadd.f32	s21, s16, s27
		i = lrintf(r - 0.5f);
 801aeac:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801aeb0:	ee69 9a29 	vmul.f32	s19, s18, s19
 801aeb4:	eeaa 0aa9 	vfma.f32	s0, s21, s19
 801aeb8:	f002 ff2a 	bl	801dd10 <lrintf>
		r -= (float)i;
 801aebc:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aec0:	f8b9 306a 	ldrh.w	r3, [r9, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801aec4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801aec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aecc:	3301      	adds	r3, #1
		r -= (float)i;
 801aece:	eeda 7aa9 	vfnms.f32	s15, s21, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
					 x = 0.5f;
 801aed6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->BLEPindices[c->mostRecentBLEP] = i;
 801aeda:	eb09 0243 	add.w	r2, r9, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aede:	f8a9 306a 	strh.w	r3, [r9, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801aee2:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801aee6:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
 801aeea:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801aeee:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801aef2:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801aef6:	3301      	adds	r3, #1
 801aef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aefc:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801af00:	f8d7 9000 	ldr.w	r9, [r7]
    if (c->active)
 801af04:	f8d9 32f4 	ldr.w	r3, [r9, #756]	; 0x2f4
 801af08:	2b00      	cmp	r3, #0
 801af0a:	f43f adba 	beq.w	801aa82 <tMBSawPulse_tick+0x1e6>
					 k = 0;
 801af0e:	f04f 0800 	mov.w	r8, #0
 801af12:	e586      	b.n	801aa22 <tMBSawPulse_tick+0x186>
    _tMBSawPulse* c = *osc;
 801af14:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801af16:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 801af1a:	ee1c 3a90 	vmov	r3, s25
 801af1e:	2b00      	cmp	r3, #0
 801af20:	f000 8280 	beq.w	801b424 <tMBSawPulse_tick+0xb88>
		r = MINBLEP_PHASES * phase * inv_w;
 801af24:	eddf 9a71 	vldr	s19, [pc, #452]	; 801b0ec <tMBSawPulse_tick+0x850>
 801af28:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 801af2c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
 801af30:	eddf ca6c 	vldr	s25, [pc, #432]	; 801b0e4 <tMBSawPulse_tick+0x848>
 801af34:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
 801af38:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801af3c:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801af40:	f002 fee6 	bl	801dd10 <lrintf>
		r -= (float)i;
 801af44:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af48:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801af4c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801af50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af54:	3301      	adds	r3, #1
		r -= (float)i;
 801af56:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801af5e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af62:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801af66:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801af6a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801af6e:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801af72:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801af76:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801af7a:	3301      	adds	r3, #1
 801af7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801af80:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801af84:	e6e8      	b.n	801ad58 <tMBSawPulse_tick+0x4bc>
		 if (!k)
 801af86:	ee1c 3a90 	vmov	r3, s25
        else if (sw < 0) p = 1.0f - eof_offset;
 801af8a:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
 801af8e:	2b00      	cmp	r3, #0
 801af90:	f040 80ed 	bne.w	801b16e <tMBSawPulse_tick+0x8d2>
				 if (p_at_reset < 0.0f)
 801af94:	eef5 da40 	vcmp.f32	s27, #0.0
 801af98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af9c:	f140 8085 	bpl.w	801b0aa <tMBSawPulse_tick+0x80e>
    if (c->active)
 801afa0:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
 801afa4:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	f040 82b4 	bne.w	801b516 <tMBSawPulse_tick+0xc7a>
				 if (k && p_at_reset < b)
 801afae:	eeb4 baed 	vcmpe.f32	s22, s27
 801afb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afb6:	f340 8354 	ble.w	801b662 <tMBSawPulse_tick+0xdc6>
        else if (sw < 0) p = 1.0f - eof_offset;
 801afba:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 801afbe:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	f000 8252 	beq.w	801b46c <tMBSawPulse_tick+0xbd0>
		r = MINBLEP_PHASES * phase * inv_w;
 801afc8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801afcc:	eddf 9a47 	vldr	s19, [pc, #284]	; 801b0ec <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
 801afd0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
 801afd4:	eddf ca44 	vldr	s25, [pc, #272]	; 801b0e8 <tMBSawPulse_tick+0x84c>
 801afd8:	ee69 9a29 	vmul.f32	s19, s18, s19
 801afdc:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
 801afe0:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801afe4:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801afe8:	f002 fe92 	bl	801dd10 <lrintf>
		r -= (float)i;
 801afec:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aff0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801aff4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801aff8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801affc:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
 801affe:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b006:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b00a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b00e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b012:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b016:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b01a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b01e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b022:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b026:	3301      	adds	r3, #1
 801b028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b02c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
 801b030:	eeb4 bace 	vcmpe.f32	s22, s28
 801b034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b038:	f77f ad4d 	ble.w	801aad6 <tMBSawPulse_tick+0x23a>
    _tMBSawPulse* c = *osc;
 801b03c:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801b03e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b042:	2b00      	cmp	r3, #0
 801b044:	f43f ae7b 	beq.w	801ad3e <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 801b048:	eddf 8a28 	vldr	s17, [pc, #160]	; 801b0ec <tMBSawPulse_tick+0x850>
 801b04c:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
 801b050:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b054:	ee69 8a28 	vmul.f32	s17, s18, s17
				x = 0.5f;
 801b058:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801b05c:	eea8 0a8e 	vfma.f32	s0, s17, s28
 801b060:	f002 fe56 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b064:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b068:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b06c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b074:	eddf 5a1a 	vldr	s11, [pc, #104]	; 801b0e0 <tMBSawPulse_tick+0x844>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b078:	3301      	adds	r3, #1
		r -= (float)i;
 801b07a:	eed8 7a8e 	vfnms.f32	s15, s17, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b07e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b082:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b086:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b08a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b08e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b092:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b096:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b09a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b09e:	3301      	adds	r3, #1
 801b0a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b0a4:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801b0a8:	e517      	b.n	801aada <tMBSawPulse_tick+0x23e>
		else if (sw < 0)
 801b0aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0b2:	f100 81b4 	bmi.w	801b41e <tMBSawPulse_tick+0xb82>
        else if (sw < 0) p = 1.0f - eof_offset;
 801b0b6:	eeb0 8a4e 	vmov.f32	s16, s28
 801b0ba:	eddf 5a09 	vldr	s11, [pc, #36]	; 801b0e0 <tMBSawPulse_tick+0x844>
 801b0be:	e50c      	b.n	801aada <tMBSawPulse_tick+0x23e>
    if (c->active)
 801b0c0:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	f040 8172 	bne.w	801b3ae <tMBSawPulse_tick+0xb12>
				 if (p_at_reset >= 1.0f)
 801b0ca:	eef4 dae9 	vcmpe.f32	s27, s19
 801b0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0d2:	db19      	blt.n	801b108 <tMBSawPulse_tick+0x86c>
				x = 0.5f;
 801b0d4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801b0d8:	e4d3      	b.n	801aa82 <tMBSawPulse_tick+0x1e6>
 801b0da:	bf00      	nop
 801b0dc:	bf800000 	.word	0xbf800000
	...
 801b0e8:	00000001 	.word	0x00000001
 801b0ec:	42800000 	.word	0x42800000
    if (c->active)
 801b0f0:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
 801b0f4:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	f040 8084 	bne.w	801b206 <tMBSawPulse_tick+0x96a>
				 if (!k && p_at_reset >= b)
 801b0fe:	eeb4 baed 	vcmpe.f32	s22, s27
 801b102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b106:	d8e5      	bhi.n	801b0d4 <tMBSawPulse_tick+0x838>
    if (c->active)
 801b108:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	d0e1      	beq.n	801b0d4 <tMBSawPulse_tick+0x838>
		r = MINBLEP_PHASES * phase * inv_w;
 801b110:	ed5f 8a0a 	vldr	s17, [pc, #-40]	; 801b0ec <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
 801b114:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
 801b118:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801b11c:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801b120:	eea8 0a28 	vfma.f32	s0, s16, s17
 801b124:	f002 fdf4 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b128:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b12c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b130:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b138:	3301      	adds	r3, #1
		r -= (float)i;
 801b13a:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b13e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b142:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b146:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b14a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b14e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b152:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b156:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b15a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b15e:	3301      	adds	r3, #1
 801b160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b164:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801b168:	e48b      	b.n	801aa82 <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
 801b16a:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
 801b16e:	eeb4 baed 	vcmpe.f32	s22, s27
 801b172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b176:	f300 8167 	bgt.w	801b448 <tMBSawPulse_tick+0xbac>
				 if (p_at_reset < 0.0f)
 801b17a:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
 801b17e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
 801b182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b186:	f100 8184 	bmi.w	801b492 <tMBSawPulse_tick+0xbf6>
        else if (sw < 0) p = 1.0f - eof_offset;
 801b18a:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 801b18e:	b38b      	cbz	r3, 801b1f4 <tMBSawPulse_tick+0x958>
		r = MINBLEP_PHASES * phase * inv_w;
 801b190:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801b194:	ed5f 9a2b 	vldr	s19, [pc, #-172]	; 801b0ec <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
 801b198:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b19c:	ee69 9a29 	vmul.f32	s19, s18, s19
 801b1a0:	ee7e ea68 	vsub.f32	s29, s28, s17
 801b1a4:	eea9 0aae 	vfma.f32	s0, s19, s29
 801b1a8:	f002 fdb2 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b1ac:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b1b0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 801b1b4:	ee7c 7a68 	vsub.f32	s15, s24, s17
		r -= (float)i;
 801b1b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b1bc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b1c0:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 801b1c2:	ee67 7aad 	vmul.f32	s15, s15, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b1c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b1ca:	ee99 7aae 	vfnms.f32	s14, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b1ce:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b1d2:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b1d6:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b1da:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b1de:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b1e2:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b1e6:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b1ea:	3301      	adds	r3, #1
 801b1ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b1f0:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
 801b1f4:	ee1c 3a90 	vmov	r3, s25
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	f47f af19 	bne.w	801b030 <tMBSawPulse_tick+0x794>
 801b1fe:	683d      	ldr	r5, [r7, #0]
 801b200:	e6dd      	b.n	801afbe <tMBSawPulse_tick+0x722>
 801b202:	683d      	ldr	r5, [r7, #0]
 801b204:	e780      	b.n	801b108 <tMBSawPulse_tick+0x86c>
		i = lrintf(r - 0.5f);
 801b206:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 801b20a:	ed5f 8a48 	vldr	s17, [pc, #-288]	; 801b0ec <tMBSawPulse_tick+0x850>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801b20e:	ee78 aa2d 	vadd.f32	s21, s16, s27
 801b212:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801b216:	eeb0 0a6c 	vmov.f32	s0, s25
 801b21a:	eeaa 0aa8 	vfma.f32	s0, s21, s17
 801b21e:	f002 fd77 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b222:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b226:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b22a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b22e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b232:	3301      	adds	r3, #1
				 if (!k && p_at_reset >= b)
 801b234:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b23c:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
 801b240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b244:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b248:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b24c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b250:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801b254:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b258:	edc2 9a3d 	vstr	s19, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b25c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 801b260:	f103 0301 	add.w	r3, r3, #1
 801b264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b268:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801b26c:	f8d7 9000 	ldr.w	r9, [r7]
 801b270:	464d      	mov	r5, r9
    if (c->active)
 801b272:	f8d9 32f4 	ldr.w	r3, [r9, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
 801b276:	f200 8105 	bhi.w	801b484 <tMBSawPulse_tick+0xbe8>
    if (c->active)
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	f43f af44 	beq.w	801b108 <tMBSawPulse_tick+0x86c>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801b280:	ee78 9a4b 	vsub.f32	s19, s16, s22
		i = lrintf(r - 0.5f);
 801b284:	eeb0 0a6c 	vmov.f32	s0, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801b288:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
 801b28c:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801b290:	f002 fd3e 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b294:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b298:	f8b9 306a 	ldrh.w	r3, [r9, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b29c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b2a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b2a4:	3301      	adds	r3, #1
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801b2a6:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b2aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b2ae:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b2b2:	eb09 0243 	add.w	r2, r9, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b2b6:	f8a9 306a 	strh.w	r3, [r9, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b2ba:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b2be:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
 801b2c2:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b2c6:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b2ca:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801b2ce:	3301      	adds	r3, #1
 801b2d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b2d4:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801b2d8:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801b2da:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    _tMBSawPulse* c = *osc;
 801b2de:	46a9      	mov	r9, r5
    if (c->active)
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	f43f af11 	beq.w	801b108 <tMBSawPulse_tick+0x86c>
					 x = -0.5f;
 801b2e6:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
					 k = 1;
 801b2ea:	f04f 0801 	mov.w	r8, #1
 801b2ee:	f7ff bb98 	b.w	801aa22 <tMBSawPulse_tick+0x186>
    _tMBSawPulse* c = *osc;
 801b2f2:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 801b2f4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 801b2f8:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 801b2fc:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
 801b300:	b353      	cbz	r3, 801b358 <tMBSawPulse_tick+0xabc>
		r = MINBLEP_PHASES * phase * inv_w;
 801b302:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
 801b306:	ed5f 9a87 	vldr	s19, [pc, #-540]	; 801b0ec <tMBSawPulse_tick+0x850>
 801b30a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b30e:	eea8 0a29 	vfma.f32	s0, s16, s19
 801b312:	f002 fcfd 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b316:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b31a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b31e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b326:	4ad6      	ldr	r2, [pc, #856]	; (801b680 <tMBSawPulse_tick+0xde4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b328:	3301      	adds	r3, #1
		r -= (float)i;
 801b32a:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b32e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b332:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b336:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b33a:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b33e:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801b342:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b346:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b34a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b34e:	3301      	adds	r3, #1
 801b350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b354:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
 801b358:	eeb4 bae8 	vcmpe.f32	s22, s17
 801b35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b360:	f340 8177 	ble.w	801b652 <tMBSawPulse_tick+0xdb6>
    _tMBSawPulse* c = *osc;
 801b364:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801b366:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d064      	beq.n	801b438 <tMBSawPulse_tick+0xb9c>
		r = MINBLEP_PHASES * phase * inv_w;
 801b36e:	eddf 7ac5 	vldr	s15, [pc, #788]	; 801b684 <tMBSawPulse_tick+0xde8>
 801b372:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 801b376:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b37a:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
 801b37e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b382:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
 801b386:	eea9 0a29 	vfma.f32	s0, s18, s19
 801b38a:	f002 fcc1 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b38e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b392:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b396:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b39a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b39e:	eddf 5aba 	vldr	s11, [pc, #744]	; 801b688 <tMBSawPulse_tick+0xdec>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b3a2:	3301      	adds	r3, #1
		r -= (float)i;
 801b3a4:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b3a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b3ac:	e669      	b.n	801b082 <tMBSawPulse_tick+0x7e6>
		r = MINBLEP_PHASES * phase * inv_w;
 801b3ae:	eddf 9ab5 	vldr	s19, [pc, #724]	; 801b684 <tMBSawPulse_tick+0xde8>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801b3b2:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
 801b3b6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 801b3ba:	f04f 0801 	mov.w	r8, #1
 801b3be:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
 801b3c2:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801b3c6:	eea8 0aa9 	vfma.f32	s0, s17, s19
 801b3ca:	f002 fca1 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b3ce:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b3d2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b3d6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b3da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b3de:	4443      	add	r3, r8
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801b3e0:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b3e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b3e8:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b3ec:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b3f0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b3f4:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b3f8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801b3fc:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b400:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b404:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 801b408:	4443      	add	r3, r8
 801b40a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b40e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801b412:	f8d7 9000 	ldr.w	r9, [r7]
    if (c->active)
 801b416:	f8d9 32f4 	ldr.w	r3, [r9, #756]	; 0x2f4
 801b41a:	f7ff baf9 	b.w	801aa10 <tMBSawPulse_tick+0x174>
 801b41e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b422:	e6b2      	b.n	801b18a <tMBSawPulse_tick+0x8ee>
			if (p < 0.0f) {
 801b424:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b42c:	f100 8109 	bmi.w	801b642 <tMBSawPulse_tick+0xda6>
				x = 0.5f;
 801b430:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801b434:	f7ff bb4f 	b.w	801aad6 <tMBSawPulse_tick+0x23a>
				x = 0.5f;
 801b438:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801b43c:	eddf 5a92 	vldr	s11, [pc, #584]	; 801b688 <tMBSawPulse_tick+0xdec>
 801b440:	eeb0 8a68 	vmov.f32	s16, s17
 801b444:	f7ff bb49 	b.w	801aada <tMBSawPulse_tick+0x23e>
    if (c->active)
 801b448:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 801b44c:	ee1c 3a90 	vmov	r3, s25
 801b450:	2b00      	cmp	r3, #0
 801b452:	f040 80bd 	bne.w	801b5d0 <tMBSawPulse_tick+0xd34>
				 if (p_at_reset < 0.0f)
 801b456:	eef5 dac0 	vcmpe.f32	s27, #0.0
 801b45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b45e:	f100 80e9 	bmi.w	801b634 <tMBSawPulse_tick+0xd98>
					 x = 0.5f;
 801b462:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
 801b466:	eeb0 8a4e 	vmov.f32	s16, s28
 801b46a:	e6c3      	b.n	801b1f4 <tMBSawPulse_tick+0x958>
			if (p < b) {
 801b46c:	eeb4 bace 	vcmpe.f32	s22, s28
 801b470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b474:	f73f ac63 	bgt.w	801ad3e <tMBSawPulse_tick+0x4a2>
				x = -0.5f;
 801b478:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
 801b47c:	eddf ca83 	vldr	s25, [pc, #524]	; 801b68c <tMBSawPulse_tick+0xdf0>
 801b480:	f7ff bb29 	b.w	801aad6 <tMBSawPulse_tick+0x23a>
    if (c->active)
 801b484:	2b00      	cmp	r3, #0
 801b486:	f43f ae25 	beq.w	801b0d4 <tMBSawPulse_tick+0x838>
 801b48a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801b48e:	f7ff bac8 	b.w	801aa22 <tMBSawPulse_tick+0x186>
					 p_at_reset += 1.0f;
 801b492:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b496:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	f000 80ca 	beq.w	801b634 <tMBSawPulse_tick+0xd98>
		r = MINBLEP_PHASES * phase * inv_w;
 801b4a0:	ed9f 8a78 	vldr	s16, [pc, #480]	; 801b684 <tMBSawPulse_tick+0xde8>
		i = lrintf(r - 0.5f);
 801b4a4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 801b4a8:	eddf ca78 	vldr	s25, [pc, #480]	; 801b68c <tMBSawPulse_tick+0xdf0>
 801b4ac:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
 801b4b0:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801b4b4:	eea8 0a28 	vfma.f32	s0, s16, s17
 801b4b8:	f002 fc2a 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b4bc:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b4c0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b4c4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b4c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b4cc:	4a6c      	ldr	r2, [pc, #432]	; (801b680 <tMBSawPulse_tick+0xde4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b4ce:	3301      	adds	r3, #1
		r -= (float)i;
 801b4d0:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b4d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b4d8:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b4dc:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b4e0:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b4e4:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801b4e8:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b4ec:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b4f0:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b4f4:	3301      	adds	r3, #1
 801b4f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b4fa:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801b4fe:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801b500:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b504:	e641      	b.n	801b18a <tMBSawPulse_tick+0x8ee>
				x = -0.5f;
 801b506:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 801b50a:	eeb0 8a67 	vmov.f32	s16, s15
 801b50e:	eef0 5a68 	vmov.f32	s11, s17
 801b512:	f7ff bae2 	b.w	801aada <tMBSawPulse_tick+0x23e>
		r = MINBLEP_PHASES * phase * inv_w;
 801b516:	eddf 9a5b 	vldr	s19, [pc, #364]	; 801b684 <tMBSawPulse_tick+0xde8>
		i = lrintf(r - 0.5f);
 801b51a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b51e:	ee69 9a29 	vmul.f32	s19, s18, s19
 801b522:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801b526:	f002 fbf3 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b52a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b52e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b532:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b53a:	4a51      	ldr	r2, [pc, #324]	; (801b680 <tMBSawPulse_tick+0xde4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b53c:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
 801b53e:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b546:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
 801b54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b54e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b552:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b556:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b55a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801b55e:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b562:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b566:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 801b56a:	f103 0301 	add.w	r3, r3, #1
 801b56e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b572:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801b576:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801b578:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
 801b57c:	dd76      	ble.n	801b66c <tMBSawPulse_tick+0xdd0>
    if (c->active)
 801b57e:	2b00      	cmp	r3, #0
 801b580:	f43f ad1b 	beq.w	801afba <tMBSawPulse_tick+0x71e>
		r = MINBLEP_PHASES * phase * inv_w;
 801b584:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
 801b588:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
 801b58c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801b590:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
 801b594:	eea8 0a29 	vfma.f32	s0, s16, s19
 801b598:	f002 fbba 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b59c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b5a0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b5a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b5a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b5ac:	3301      	adds	r3, #1
		r -= (float)i;
 801b5ae:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b5b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b5b6:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b5ba:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b5be:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b5c2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b5c6:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b5ca:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b5ce:	e78f      	b.n	801b4f0 <tMBSawPulse_tick+0xc54>
		r = MINBLEP_PHASES * phase * inv_w;
 801b5d0:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 801b684 <tMBSawPulse_tick+0xde8>
 801b5d4:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 801b5d8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
 801b5dc:	ee0c 8a90 	vmov	s25, r8
 801b5e0:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
 801b5e4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801b5e8:	eea9 0a88 	vfma.f32	s0, s19, s16
 801b5ec:	f002 fb90 	bl	801dd10 <lrintf>
		r -= (float)i;
 801b5f0:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b5f4:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b5f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b5fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b600:	3301      	adds	r3, #1
		r -= (float)i;
 801b602:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b60a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b60e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b612:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b616:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b61a:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b61e:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b622:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b626:	3301      	adds	r3, #1
 801b628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b62c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801b630:	683d      	ldr	r5, [r7, #0]
 801b632:	e5a2      	b.n	801b17a <tMBSawPulse_tick+0x8de>
				k = 1;
 801b634:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801b638:	eddf ca14 	vldr	s25, [pc, #80]	; 801b68c <tMBSawPulse_tick+0xdf0>
 801b63c:	eeb0 8a4e 	vmov.f32	s16, s28
 801b640:	e4f6      	b.n	801b030 <tMBSawPulse_tick+0x794>
				p += 1.0f;
 801b642:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 801b646:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 801b64a:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
 801b64e:	f7ff ba44 	b.w	801aada <tMBSawPulse_tick+0x23e>
 801b652:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801b656:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801b65a:	eeb0 8a68 	vmov.f32	s16, s17
 801b65e:	f7ff ba3c 	b.w	801aada <tMBSawPulse_tick+0x23e>
				 if (k && p_at_reset < b)
 801b662:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801b666:	eddf ca09 	vldr	s25, [pc, #36]	; 801b68c <tMBSawPulse_tick+0xdf0>
 801b66a:	e6fc      	b.n	801b466 <tMBSawPulse_tick+0xbca>
 801b66c:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801b670:	eddf ca06 	vldr	s25, [pc, #24]	; 801b68c <tMBSawPulse_tick+0xdf0>
		else if (sw < 0)
 801b674:	e589      	b.n	801b18a <tMBSawPulse_tick+0x8ee>
    p += sw - (int)sw;
 801b676:	eeb0 8a68 	vmov.f32	s16, s17
 801b67a:	f7ff b94c 	b.w	801a916 <tMBSawPulse_tick+0x7a>
 801b67e:	bf00      	nop
 801b680:	bf800000 	.word	0xbf800000
 801b684:	42800000 	.word	0x42800000
 801b688:	00000000 	.word	0x00000000
 801b68c:	00000001 	.word	0x00000001

0801b690 <tMBSawPulse_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#else
void tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#endif
{
    _tMBSawPulse* c = *osc;
 801b690:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801b692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
 801b696:	eddf 6a14 	vldr	s13, [pc, #80]	; 801b6e8 <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801b69a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
 801b69e:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
 801b6a2:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801b6a6:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
 801b6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
 801b6ae:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801b6b2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 801b6b6:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
 801b6ba:	dc0c      	bgt.n	801b6d6 <tMBSawPulse_setFreq+0x46>
 801b6bc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801b6ec <tMBSawPulse_setFreq+0x5c>
 801b6c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801b6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6c8:	d405      	bmi.n	801b6d6 <tMBSawPulse_setFreq+0x46>
    	c->active = 0;
    	c->gain = 0.0f;
    }
    else
    {
    	c->active = 1;
 801b6ca:	2201      	movs	r2, #1
 801b6cc:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 801b6d0:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    	c->gain = 1.0f;
    }
}
 801b6d4:	4770      	bx	lr
    	c->gain = 0.0f;
 801b6d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801b6f0 <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
 801b6da:	2200      	movs	r2, #0
 801b6dc:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 801b6e0:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 801b6e4:	4770      	bx	lr
 801b6e6:	bf00      	nop
 801b6e8:	45bb8000 	.word	0x45bb8000
 801b6ec:	c5bb8000 	.word	0xc5bb8000
 801b6f0:	00000000 	.word	0x00000000

0801b6f4 <tMBSawPulse_sync>:
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#else
float tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#endif
{
    _tMBSawPulse* c = *osc;
 801b6f4:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801b6f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801b6fa:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 801b6fe:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 801b702:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801b706:	eef1 7a67 	vneg.f32	s15, s15
 801b70a:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801b70e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801b712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b716:	eef4 6ac7 	vcmpe.f32	s13, s14
 801b71a:	bfcc      	ite	gt
 801b71c:	2201      	movgt	r2, #1
 801b71e:	2200      	movle	r2, #0
 801b720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b724:	f002 0201 	and.w	r2, r2, #1
 801b728:	bf88      	it	hi
 801b72a:	2200      	movhi	r2, #0
 801b72c:	b122      	cbz	r2, 801b738 <tMBSawPulse_sync+0x44>
 801b72e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801b732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b736:	da04      	bge.n	801b742 <tMBSawPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801b738:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801b750 <tMBSawPulse_sync+0x5c>
 801b73c:	ed83 7a04 	vstr	s14, [r3, #16]

    return value;
}
 801b740:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 801b742:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b746:	ee27 7a06 	vmul.f32	s14, s14, s12
 801b74a:	ed83 7a04 	vstr	s14, [r3, #16]
}
 801b74e:	4770      	bx	lr
 801b750:	00000000 	.word	0x00000000

0801b754 <tMBSawPulse_setShape>:
    c->_p = phase;
}

void tMBSawPulse_setShape(tMBSawPulse* const osc, float shape)
{
    _tMBSawPulse* c = *osc;
 801b754:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801b756:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 801b75a:	4770      	bx	lr

0801b75c <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 801b75c:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801b75e:	698c      	ldr	r4, [r1, #24]
{
 801b760:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b762:	201c      	movs	r0, #28
 801b764:	4621      	mov	r1, r4
 801b766:	f7fb fc71 	bl	801704c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
 801b76a:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b76c:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 801b76e:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801b770:	6863      	ldr	r3, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b772:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801b788 <tIntPhasor_init+0x2c>
    c->phase    =  0;
 801b776:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b778:	edd3 7a01 	vldr	s15, [r3, #4]
 801b77c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b780:	edc0 7a06 	vstr	s15, [r0, #24]
}
 801b784:	bd38      	pop	{r3, r4, r5, pc}
 801b786:	bf00      	nop
 801b788:	4f800000 	.word	0x4f800000

0801b78c <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 801b78c:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 801b78e:	eddf 7a06 	vldr	s15, [pc, #24]	; 801b7a8 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 801b792:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 801b796:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 801b798:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 801b79c:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 801b79e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 801b7a2:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b7a6:	4770      	bx	lr
 801b7a8:	2f80000d 	.word	0x2f80000d

0801b7ac <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, float freq)
{
    _tIntPhasor* c = *cy;
 801b7ac:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b7ae:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801b7b2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b7b6:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b7ba:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b7be:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801b7c2:	4770      	bx	lr

0801b7c4 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, float phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 801b7c4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 801b7c8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801b7e4 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
 801b7cc:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801b7ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7d2:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 801b7d6:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b7da:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b7de:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801b7e2:	4770      	bx	lr
 801b7e4:	4f800000 	.word	0x4f800000

0801b7e8 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
 801b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7ea:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801b7ee:	698f      	ldr	r7, [r1, #24]
{
 801b7f0:	4606      	mov	r6, r0
 801b7f2:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b7f4:	2010      	movs	r0, #16
 801b7f6:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b7f8:	ed9f 8a21 	vldr	s16, [pc, #132]	; 801b880 <tSquareLFO_init+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b7fc:	f7fb fc26 	bl	801704c <mpool_alloc>
 801b800:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 801b802:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b804:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 801b806:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b808:	201c      	movs	r0, #28
 801b80a:	4639      	mov	r1, r7
 801b80c:	f7fb fc1e 	bl	801704c <mpool_alloc>
 801b810:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801b812:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801b814:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 801b816:	2700      	movs	r7, #0
 801b818:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b81a:	edd3 7a01 	vldr	s15, [r3, #4]
 801b81e:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b822:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b826:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 801b828:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b82a:	4629      	mov	r1, r5
 801b82c:	f7fb fc0e 	bl	801704c <mpool_alloc>
 801b830:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 801b832:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, float pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
 801b834:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 801b838:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 801b83a:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b83c:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b840:	eddf 6a10 	vldr	s13, [pc, #64]	; 801b884 <tSquareLFO_init+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b844:	ee27 7a08 	vmul.f32	s14, s14, s16
 801b848:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 801b84c:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b84e:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 801b850:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b854:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 801b858:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b85a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b85e:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 801b862:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801b866:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b86a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801b86e:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b876:	edc3 7a01 	vstr	s15, [r3, #4]
}
 801b87a:	ecbd 8b02 	vpop	{d8}
 801b87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b880:	4f800000 	.word	0x4f800000
 801b884:	2f80000d 	.word	0x2f80000d

0801b888 <tSquareLFO_initToPool>:
{
 801b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b88a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801b88e:	680f      	ldr	r7, [r1, #0]
{
 801b890:	4606      	mov	r6, r0
 801b892:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b894:	2010      	movs	r0, #16
 801b896:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b898:	ed9f 8a21 	vldr	s16, [pc, #132]	; 801b920 <tSquareLFO_initToPool+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b89c:	f7fb fbd6 	bl	801704c <mpool_alloc>
 801b8a0:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 801b8a2:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b8a4:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 801b8a6:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b8a8:	201c      	movs	r0, #28
 801b8aa:	4639      	mov	r1, r7
 801b8ac:	f7fb fbce 	bl	801704c <mpool_alloc>
 801b8b0:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801b8b2:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801b8b4:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 801b8b6:	2700      	movs	r7, #0
 801b8b8:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b8ba:	edd3 7a01 	vldr	s15, [r3, #4]
 801b8be:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b8c2:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b8c6:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 801b8c8:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b8ca:	4629      	mov	r1, r5
 801b8cc:	f7fb fbbe 	bl	801704c <mpool_alloc>
 801b8d0:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 801b8d2:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
 801b8d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 801b8d8:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 801b8da:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b8dc:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b8e0:	eddf 6a10 	vldr	s13, [pc, #64]	; 801b924 <tSquareLFO_initToPool+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b8e4:	ee27 7a08 	vmul.f32	s14, s14, s16
 801b8e8:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 801b8ec:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b8ee:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 801b8f0:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b8f4:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 801b8f8:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b8fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b8fe:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 801b902:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801b906:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b90a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801b90e:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b916:	edc3 7a01 	vstr	s15, [r3, #4]
}
 801b91a:	ecbd 8b02 	vpop	{d8}
 801b91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b920:	4f800000 	.word	0x4f800000
 801b924:	2f80000d 	.word	0x2f80000d

0801b928 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 801b928:	6802      	ldr	r2, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801b92a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801b92e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801b96c <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
 801b932:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
 801b934:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801b938:	4403      	add	r3, r0
 801b93a:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 801b93c:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 801b940:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 801b942:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 801b946:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801b94a:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
 801b94c:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
 801b950:	604b      	str	r3, [r1, #4]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801b952:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 801b956:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801b95a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801b95e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801b962:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 801b966:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b96a:	4770      	bx	lr
 801b96c:	2f80000d 	.word	0x2f80000d

0801b970 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 801b970:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
 801b972:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b974:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801b978:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b97c:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b984:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 801b988:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b98a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801b98e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b992:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b996:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b99a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801b99e:	4770      	bx	lr

0801b9a0 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 801b9a0:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b9a2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801b9d8 <tSquareLFO_setPulseWidth+0x38>
 801b9a6:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 801b9a8:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b9ac:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 801b9b0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801b9dc <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 801b9b8:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b9ba:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 801b9be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 801b9c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b9c6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 801b9ca:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b9ce:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b9d2:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801b9d6:	4770      	bx	lr
 801b9d8:	2f80000d 	.word	0x2f80000d
 801b9dc:	4f800000 	.word	0x4f800000

0801b9e0 <tSquareLFO_setPhase>:
    int i = phase;
 801b9e0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 801b9e4:	eddf 6a13 	vldr	s13, [pc, #76]	; 801ba34 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, float phase)
{
    _tSquareLFO *c = *cy;
 801b9e8:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b9ea:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801ba38 <tSquareLFO_setPhase+0x58>
    phase -= i;
 801b9ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tIntPhasor* c = *cy;
 801b9f2:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 801b9f4:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 801b9f8:	ee20 0a26 	vmul.f32	s0, s0, s13
 801b9fc:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801ba00:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801ba04:	689a      	ldr	r2, [r3, #8]
 801ba06:	edd3 7a01 	vldr	s15, [r3, #4]
 801ba0a:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 801ba0e:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801ba10:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801ba14:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 801ba18:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801ba1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ba20:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801ba24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ba28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ba2c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 801ba30:	4770      	bx	lr
 801ba32:	bf00      	nop
 801ba34:	4f800000 	.word	0x4f800000
 801ba38:	2f80000d 	.word	0x2f80000d

0801ba3c <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 801ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801ba3e:	460c      	mov	r4, r1
{
 801ba40:	4606      	mov	r6, r0
 801ba42:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801ba44:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 801ba46:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801ba4a:	4639      	mov	r1, r7
 801ba4c:	f7fb fafe 	bl	801704c <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 801ba50:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801ba52:	6030      	str	r0, [r6, #0]
 801ba54:	4604      	mov	r4, r0
    c->mempool = m;
 801ba56:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 801ba5a:	f7ff ff15 	bl	801b888 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 801ba5e:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801ba60:	201c      	movs	r0, #28
 801ba62:	4629      	mov	r1, r5
 801ba64:	f7fb faf2 	bl	801704c <mpool_alloc>
    c->phase    =  0;
 801ba68:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801ba6a:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801ba6c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801ba6e:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801ba70:	ed9f 7a04 	vldr	s14, [pc, #16]	; 801ba84 <tSawSquareLFO_init+0x48>
    c->phase    =  0;
 801ba74:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801ba76:	edd3 7a01 	vldr	s15, [r3, #4]
 801ba7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ba7e:	edc0 7a06 	vstr	s15, [r0, #24]
}
 801ba82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba84:	4f800000 	.word	0x4f800000

0801ba88 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
float   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 801ba88:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
 801ba8a:	6802      	ldr	r2, [r0, #0]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 801ba8c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 801ba90:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801bb08 <tSawSquareLFO_tick+0x80>
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801ba94:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
 801ba98:	6891      	ldr	r1, [r2, #8]
    float b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
 801ba9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
 801ba9e:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801baa2:	4403      	add	r3, r0
 801baa4:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 801baa6:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
 801baaa:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 801baac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 801bab0:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
 801bab2:	6843      	ldr	r3, [r0, #4]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 801bab4:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
 801bab8:	6884      	ldr	r4, [r0, #8]
 801baba:	4423      	add	r3, r4
 801babc:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
 801babe:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 801bac2:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
 801bac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 801bac8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801bacc:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
 801bace:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
 801bad2:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 801bad4:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 801bad8:	eef8 4a66 	vcvt.f32.u32	s9, s13
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801badc:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 801bae0:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 801bae4:	f85d 4b04 	ldr.w	r4, [sp], #4
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801bae8:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801baec:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
 801baf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801baf4:	ee37 7a07 	vadd.f32	s14, s14, s14
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801baf8:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
 801bafc:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 801bb00:	eea6 0a07 	vfma.f32	s0, s12, s14
 801bb04:	4770      	bx	lr
 801bb06:	bf00      	nop
 801bb08:	2f80000d 	.word	0x2f80000d

0801bb0c <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, float freq)
{
    _tSawSquareLFO* c = *cy;
 801bb0c:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
 801bb0e:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
 801bb10:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bb12:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801bb16:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bb1a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801bb1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bb22:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 801bb26:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bb28:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801bb2c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bb30:	ee60 7a27 	vmul.f32	s15, s0, s15
 801bb34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bb38:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 801bb3c:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bb3e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801bb42:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bb46:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bb4a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801bb4e:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 801bb52:	4770      	bx	lr

0801bb54 <tSawSquareLFO_setPhase>:
    int i = phase;
 801bb54:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 801bb58:	eddf 6a15 	vldr	s13, [pc, #84]	; 801bbb0 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, float phase)
{
    _tSawSquareLFO* c = *cy;
 801bb5c:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bb5e:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801bbb4 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
 801bb62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tSquareLFO *c = *cy;
 801bb66:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
 801bb68:	6890      	ldr	r0, [r2, #8]
    phase -= i;
 801bb6a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 801bb6e:	ee20 0a26 	vmul.f32	s0, s0, s13
 801bb72:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801bb76:	edc0 7a01 	vstr	s15, [r0, #4]
 801bb7a:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bb7e:	6890      	ldr	r0, [r2, #8]
 801bb80:	edd2 7a01 	vldr	s15, [r2, #4]
 801bb84:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
 801bb88:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bb8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801bb8e:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 801bb92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801bb96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bb9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801bb9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801bba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bba6:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
 801bbaa:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
 801bbac:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 801bbae:	4770      	bx	lr
 801bbb0:	4f800000 	.word	0x4f800000
 801bbb4:	2f80000d 	.word	0x2f80000d

0801bbb8 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, float shape)
{
    _tSawSquareLFO* c = *cy;
 801bbb8:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 801bbba:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801bbbe:	4770      	bx	lr

0801bbc0 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 801bbc0:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801bbc2:	698d      	ldr	r5, [r1, #24]
{
 801bbc4:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801bbc6:	2018      	movs	r0, #24
 801bbc8:	4629      	mov	r1, r5
 801bbca:	f7fb fa3f 	bl	801704c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 801bbce:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801bbd0:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 801bbd2:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801bbd4:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801bbd6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801bc0c <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, float freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 801bbda:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801bc10 <tTriLFO_init+0x50>
    c->phase    =  0;
 801bbde:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 801bbe2:	edd2 6a01 	vldr	s13, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801bbe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    c->invSampleRate = leaf->invSampleRate;
 801bbea:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801bbee:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
 801bbf2:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bbf4:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801bbf8:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bbfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bc00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bc04:	edc3 7a02 	vstr	s15, [r3, #8]
}
 801bc08:	bd38      	pop	{r3, r4, r5, pc}
 801bc0a:	bf00      	nop
 801bc0c:	4f800000 	.word	0x4f800000
 801bc10:	435c0000 	.word	0x435c0000

0801bc14 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 801bc14:	6801      	ldr	r1, [r0, #0]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801bc16:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801bc1a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801bc44 <tTriLFO_tick+0x30>
    c->phase += c->inc;
 801bc1e:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 801bc22:	4413      	add	r3, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 801bc24:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c->phase += c->inc;
 801bc28:	604b      	str	r3, [r1, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 801bc2a:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 801bc2e:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801bc32:	ee07 3a90 	vmov	s15, r3
 801bc36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bc3a:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 801bc3e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bc42:	4770      	bx	lr
 801bc44:	2ffffff6 	.word	0x2ffffff6

0801bc48 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 801bc48:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bc4a:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801bc4e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bc52:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bc56:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bc5a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801bc5e:	4770      	bx	lr

0801bc60 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, float phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 801bc60:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
 801bc64:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801bc66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bc6a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 801bc6e:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 801bc72:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801bc76:	4770      	bx	lr

0801bc78 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 801bc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc7a:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801bc7e:	698f      	ldr	r7, [r1, #24]
{
 801bc80:	4606      	mov	r6, r0
 801bc82:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 801bc84:	2010      	movs	r0, #16
 801bc86:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801bc88:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 801bd04 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 801bc8c:	f7fb f9de 	bl	801704c <mpool_alloc>
 801bc90:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801bc92:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 801bc94:	6034      	str	r4, [r6, #0]
    c->mempool = m;
 801bc96:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
 801bc98:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801bc9a:	4631      	mov	r1, r6
 801bc9c:	f7fb f9d6 	bl	801704c <mpool_alloc>
 801bca0:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801bca2:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801bca4:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
 801bca6:	2600      	movs	r6, #0
    c->freq  = freq;
 801bca8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801bd08 <tSineTriLFO_init+0x90>
    c->phase    =  0;
 801bcac:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 801bcb0:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801bcb4:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
 801bcb8:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801bcbc:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801bcc0:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
 801bcc2:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bcc4:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801bcc8:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bcd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bcd4:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
 801bcd8:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801bcda:	4629      	mov	r1, r5
 801bcdc:	f7fb f9b6 	bl	801704c <mpool_alloc>
 801bce0:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 801bce2:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 801bce4:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
 801bce8:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 801bcea:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801bcee:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 801bcf2:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801bcf4:	ee67 7a88 	vmul.f32	s15, s15, s16
 801bcf8:	edc0 7a04 	vstr	s15, [r0, #16]
}
 801bcfc:	ecbd 8b02 	vpop	{d8}
 801bd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd02:	bf00      	nop
 801bd04:	4f800000 	.word	0x4f800000
 801bd08:	435c0000 	.word	0x435c0000

0801bd0c <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
float   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 801bd0c:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
 801bd0e:	6804      	ldr	r4, [r0, #0]
    float a = tCycle_tick(&c->sine);
    float b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 801bd10:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
 801bd14:	4a21      	ldr	r2, [pc, #132]	; (801bd9c <tSineTriLFO_tick+0x90>)
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801bd16:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
 801bd1a:	68e0      	ldr	r0, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801bd1c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801bda0 <tSineTriLFO_tick+0x94>
    idx = (idx + 1) & c->mask;
 801bd20:	6945      	ldr	r5, [r0, #20]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801bd22:	eddf 4a20 	vldr	s9, [pc, #128]	; 801bda4 <tSineTriLFO_tick+0x98>
    c->phase += c->inc;
 801bd26:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801bd2a:	440b      	add	r3, r1
 801bd2c:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
 801bd2e:	0d59      	lsrs	r1, r3, #21
    _tTriLFO* c = *cy;
 801bd30:	68a0      	ldr	r0, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 801bd32:	f3c3 0314 	ubfx	r3, r3, #0, #21
 801bd36:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
 801bd3a:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801bd3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
 801bd42:	4433      	add	r3, r6
 801bd44:	6043      	str	r3, [r0, #4]
    idx = (idx + 1) & c->mask;
 801bd46:	1c48      	adds	r0, r1, #1
    samp0 = __leaf_table_sinewave[idx];
 801bd48:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 801bd4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    idx = (idx + 1) & c->mask;
 801bd50:	4028      	ands	r0, r5
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801bd52:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp0 = __leaf_table_sinewave[idx];
 801bd56:	edd1 6a00 	vldr	s13, [r1]
    samp1 = __leaf_table_sinewave[idx];
 801bd5a:	eb02 0180 	add.w	r1, r2, r0, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
 801bd5e:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 801bd62:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801bd66:	ed91 5a00 	vldr	s10, [r1]
    return  (1.0f - c->shape) * a + c->shape * b;
 801bd6a:	ee37 0a07 	vadd.f32	s0, s14, s14
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 801bd6e:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
 801bd72:	ee36 6a47 	vsub.f32	s12, s12, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801bd76:	ee35 5a66 	vsub.f32	s10, s10, s13
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801bd7a:	ee07 2a10 	vmov	s14, r2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801bd7e:	eee7 6a85 	vfma.f32	s13, s15, s10
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801bd82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bd86:	eef0 7a65 	vmov.f32	s15, s11
}
 801bd8a:	bc70      	pop	{r4, r5, r6}
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801bd8c:	eee7 7a24 	vfma.f32	s15, s14, s9
    return  (1.0f - c->shape) * a + c->shape * b;
 801bd90:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 801bd94:	eea6 0a26 	vfma.f32	s0, s12, s13
 801bd98:	4770      	bx	lr
 801bd9a:	bf00      	nop
 801bd9c:	08026f74 	.word	0x08026f74
 801bda0:	35000004 	.word	0x35000004
 801bda4:	2ffffff6 	.word	0x2ffffff6

0801bda8 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, float freq)
{
    _tSineTriLFO* c = *cy;
 801bda8:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
 801bdaa:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bdac:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801bdb0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bdb4:	ee60 7a27 	vmul.f32	s15, s0, s15
 801bdb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bdbc:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
 801bdc0:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bdc2:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 801bdc6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bdca:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bdce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bdd2:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 801bdd6:	4770      	bx	lr

0801bdd8 <tSineTriLFO_setPhase>:
    int i = phase;
 801bdd8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 801bddc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801be04 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, float phase)
{
    _tSineTriLFO* c = *cy;
 801bde0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801bde2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
 801bde6:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 801bde8:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 801bdec:	ee20 0a07 	vmul.f32	s0, s0, s14
 801bdf0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 801bdf4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 801bdf8:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
 801bdfc:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
 801bdfe:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 801be02:	4770      	bx	lr
 801be04:	4f800000 	.word	0x4f800000

0801be08 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, float shape)
 {
    _tSineTriLFO* c = *cy;
 801be08:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801be0a:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 801be0e:	4770      	bx	lr

0801be10 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, float freq, float dampFreq,
                                         float decay, float targetLev, float levSmoothFactor,
                                         float levStrength, int levMode, tMempool* const mp)
{
 801be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be14:	ed2d 8b08 	vpush	{d8-d11}
    _tMempool* m = *mp;
 801be18:	f8d3 9000 	ldr.w	r9, [r3]
{
 801be1c:	b083      	sub	sp, #12
 801be1e:	460e      	mov	r6, r1
 801be20:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801be22:	4649      	mov	r1, r9
 801be24:	2064      	movs	r0, #100	; 0x64
{
 801be26:	461d      	mov	r5, r3
 801be28:	eeb0 8a40 	vmov.f32	s16, s0
 801be2c:	eeb0 9a41 	vmov.f32	s18, s2
 801be30:	4617      	mov	r7, r2
 801be32:	eef0 9a61 	vmov.f32	s19, s3
 801be36:	eeb0 aa42 	vmov.f32	s20, s4
 801be3a:	eef0 aa62 	vmov.f32	s21, s5
 801be3e:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801be42:	f7fb f903 	bl	801704c <mpool_alloc>
 801be46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
 801be4a:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801be4e:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801be52:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
    p->mempool = m;
 801be56:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
 801be5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801be5e:	ee87 ba08 	vdiv.f32	s22, s14, s16
    LEAF* leaf = p->mempool->leaf;
 801be62:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
 801be66:	65c6      	str	r6, [r0, #92]	; 0x5c
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801be68:	4604      	mov	r4, r0
    p->sampleRate = leaf->sampleRate * oversampling;
 801be6a:	ed93 7a00 	vldr	s14, [r3]
    p->maxLength = 2400 * oversampling;
 801be6e:	f44f 6316 	mov.w	r3, #2400	; 0x960
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801be72:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 801be76:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->maxLength = 2400 * oversampling;
 801be7a:	fb03 f606 	mul.w	r6, r3, r6
    p->curr=0.0f;
 801be7e:	2300      	movs	r3, #0
    p->sampleRate = leaf->sampleRate * oversampling;
 801be80:	ee67 7a87 	vmul.f32	s15, s15, s14
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801be84:	eddf 0a82 	vldr	s1, [pc, #520]	; 801c090 <tSimpleLivingString3_initToPool+0x280>
    p->curr=0.0f;
 801be88:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801be8a:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
 801be8c:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 801be8e:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
 801be92:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801be96:	4650      	mov	r0, sl
 801be98:	ee2b 0a2b 	vmul.f32	s0, s22, s23
 801be9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bea0:	f7f9 f91e 	bl	80150e0 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 801bea4:	ed94 0a02 	vldr	s0, [r4, #8]
 801bea8:	462a      	mov	r2, r5
 801beaa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801beac:	4658      	mov	r0, fp
 801beae:	f7f8 f9a1 	bl	80141f4 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 801beb2:	ed94 0a02 	vldr	s0, [r4, #8]
 801beb6:	462a      	mov	r2, r5
 801beb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801beba:	4648      	mov	r0, r9
 801bebc:	f7f8 f99a 	bl	80141f4 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, float freq)
{
    _tSimpleLivingString3* p = *pl;
 801bec0:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    float waveLength = (p->sampleRate/freq);
 801bec4:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    p->freq = freq;
 801bec8:	ed86 8a01 	vstr	s16, [r6, #4]
    float waveLength = (p->sampleRate/freq);
 801becc:	ee2b 7a07 	vmul.f32	s14, s22, s14
    if (waveLength<4.8) waveLength=4.8f;
 801bed0:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 801c080 <tSimpleLivingString3_initToPool+0x270>
 801bed4:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
 801bed8:	eeb4 5bc6 	vcmpe.f64	d5, d6
 801bedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bee0:	f100 80c7 	bmi.w	801c072 <tSimpleLivingString3_initToPool+0x262>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801bee4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 801bee6:	005b      	lsls	r3, r3, #1
 801bee8:	ee07 3a90 	vmov	s15, r3
 801beec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
 801bef0:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 801bef4:	ee27 0aab 	vmul.f32	s0, s15, s23
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801bef8:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 801befc:	ed86 0a02 	vstr	s0, [r6, #8]
    //float decay = p->userDecay;

    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801bf00:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801bf04:	f7f9 f918 	bl	8015138 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801bf08:	ed96 7a05 	vldr	s14, [r6, #20]
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
 801bf0c:	f104 0840 	add.w	r8, r4, #64	; 0x40
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801bf10:	eddf 7a60 	vldr	s15, [pc, #384]	; 801c094 <tSimpleLivingString3_initToPool+0x284>
 801bf14:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801bf18:	ed96 6a01 	vldr	s12, [r6, #4]
 801bf1c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801bf20:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801bf24:	ed9f 0b58 	vldr	d0, [pc, #352]	; 801c088 <tSimpleLivingString3_initToPool+0x278>
 801bf28:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801bf2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bf30:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801bf34:	f001 f990 	bl	801d258 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 801bf38:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801bf3a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bf3e:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
 801bf42:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 801bf46:	ed94 0a02 	vldr	s0, [r4, #8]
 801bf4a:	f7f8 fa0f 	bl	801436c <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
 801bf4e:	ed94 0a02 	vldr	s0, [r4, #8]
 801bf52:	4648      	mov	r0, r9
 801bf54:	f7f8 fa0a 	bl	801436c <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
 801bf58:	4658      	mov	r0, fp
 801bf5a:	f7f8 f9b9 	bl	80142d0 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
 801bf5e:	4648      	mov	r0, r9
 801bf60:	f7f8 f9b6 	bl	80142d0 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 801bf64:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801bf68:	4629      	mov	r1, r5
 801bf6a:	eeb0 0a68 	vmov.f32	s0, s17
 801bf6e:	4618      	mov	r0, r3
    p->dampFreq = dampFreq;
 801bf70:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 801bf74:	9301      	str	r3, [sp, #4]
 801bf76:	f7f9 f919 	bl	80151ac <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
 801bf7a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 801bf7e:	9801      	ldr	r0, [sp, #4]
 801bf80:	f7f9 f97a 	bl	8015278 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 801bf84:	eeb0 0a68 	vmov.f32	s0, s17
 801bf88:	9801      	ldr	r0, [sp, #4]
 801bf8a:	f7f9 f943 	bl	8015214 <tOnePole_setFreq>
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
 801bf8e:	4629      	mov	r1, r5
 801bf90:	4640      	mov	r0, r8
 801bf92:	f8cd 8004 	str.w	r8, [sp, #4]
 801bf96:	f7f9 f9c9 	bl	801532c <tBiQuad_initToPool>
    tBiQuad_setSampleRate(&p->bridgeFilter2, p->sampleRate);
 801bf9a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 801bf9e:	9801      	ldr	r0, [sp, #4]
 801bfa0:	f7f9 f9dc 	bl	801535c <tBiQuad_setSampleRate>
    tHighpass_initToPool(&p->DCblocker,13, mp);
 801bfa4:	4629      	mov	r1, r5
 801bfa6:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 801bfaa:	4630      	mov	r0, r6
 801bfac:	9601      	str	r6, [sp, #4]
 801bfae:	f7f9 fb31 	bl	8015614 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
 801bfb2:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 801bfb6:	9801      	ldr	r0, [sp, #4]
 801bfb8:	f7f9 fb68 	bl	801568c <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
 801bfbc:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 801bfc0:	9801      	ldr	r0, [sp, #4]
 801bfc2:	f7f9 fb47 	bl	8015654 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801bfc6:	eeb0 1a6a 	vmov.f32	s2, s21
 801bfca:	eef0 0a4a 	vmov.f32	s1, s20
 801bfce:	462a      	mov	r2, r5
 801bfd0:	eeb0 0a69 	vmov.f32	s0, s19
 801bfd4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801bfd8:	4639      	mov	r1, r7
    p->userDecay = decay;
 801bfda:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801bfde:	f7f8 fd01 	bl	80149e4 <tFeedbackLeveler_initToPool>
    float waveLength = (p->sampleRate/freq);
 801bfe2:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
    p->levMode=levMode;
 801bfe6:	6227      	str	r7, [r4, #32]
    float waveLength = (p->sampleRate/freq);
 801bfe8:	ee2b ba26 	vmul.f32	s22, s22, s13
    p->changeGainCompensator = 1.0f;
 801bfec:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
 801bff0:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
 801bff4:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801c080 <tSimpleLivingString3_initToPool+0x270>
 801bff8:	eeb7 6acb 	vcvt.f64.f32	d6, s22
 801bffc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c004:	d438      	bmi.n	801c078 <tSimpleLivingString3_initToPool+0x268>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801c006:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c008:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801c00c:	005b      	lsls	r3, r3, #1
 801c00e:	ee00 3a10 	vmov	s0, r3
 801c012:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c016:	fe80 0a4b 	vminnm.f32	s0, s0, s22
 801c01a:	ee20 0a27 	vmul.f32	s0, s0, s15
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c01e:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c020:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c024:	f7f9 f888 	bl	8015138 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c02c:	ed94 7a05 	vldr	s14, [r4, #20]
 801c030:	eddf 7a18 	vldr	s15, [pc, #96]	; 801c094 <tSimpleLivingString3_initToPool+0x284>
 801c034:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c038:	ed94 6a01 	vldr	s12, [r4, #4]
 801c03c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c040:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c044:	ed9f 0b10 	vldr	d0, [pc, #64]	; 801c088 <tSimpleLivingString3_initToPool+0x278>
 801c048:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801c04c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c050:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801c054:	f001 f900 	bl	801d258 <exp>
    p->pickupPoint = 0.9f;
 801c058:	4a0f      	ldr	r2, [pc, #60]	; (801c098 <tSimpleLivingString3_initToPool+0x288>)
    p->prevDelayLength = p->waveLengthInSamples;
 801c05a:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
 801c05c:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c05e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
 801c062:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c064:	ed84 0a04 	vstr	s0, [r4, #16]
}
 801c068:	b003      	add	sp, #12
 801c06a:	ecbd 8b08 	vpop	{d8-d11}
 801c06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c072:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801c09c <tSimpleLivingString3_initToPool+0x28c>
 801c076:	e73f      	b.n	801bef8 <tSimpleLivingString3_initToPool+0xe8>
 801c078:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801c09c <tSimpleLivingString3_initToPool+0x28c>
 801c07c:	e7cf      	b.n	801c01e <tSimpleLivingString3_initToPool+0x20e>
 801c07e:	bf00      	nop
 801c080:	33333333 	.word	0x33333333
 801c084:	40133333 	.word	0x40133333
 801c088:	0a3d70a4 	.word	0x0a3d70a4
 801c08c:	c01ba3d7 	.word	0xc01ba3d7
 801c090:	3c23d70a 	.word	0x3c23d70a
 801c094:	3d8d78c4 	.word	0x3d8d78c4
 801c098:	3f666666 	.word	0x3f666666
 801c09c:	4019999a 	.word	0x4019999a

0801c0a0 <tSimpleLivingString3_setFreq>:
{
 801c0a0:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 801c0a2:	6804      	ldr	r4, [r0, #0]
    float waveLength = (p->sampleRate/freq);
 801c0a4:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
 801c0a8:	ed84 0a01 	vstr	s0, [r4, #4]
    float waveLength = (p->sampleRate/freq);
 801c0ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
 801c0b0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 801c128 <tSimpleLivingString3_setFreq+0x88>
 801c0b4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 801c0b8:	eeb4 5bc6 	vcmpe.f64	d5, d6
 801c0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0c0:	d42e      	bmi.n	801c120 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801c0c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c0c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801c0c8:	005b      	lsls	r3, r3, #1
 801c0ca:	ee00 3a10 	vmov	s0, r3
 801c0ce:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c0d2:	fe80 0a67 	vminnm.f32	s0, s0, s15
 801c0d6:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c0da:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c0de:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c0e2:	f7f9 f829 	bl	8015138 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c0e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c0ea:	ed94 7a05 	vldr	s14, [r4, #20]
 801c0ee:	eddf 7a12 	vldr	s15, [pc, #72]	; 801c138 <tSimpleLivingString3_setFreq+0x98>
 801c0f2:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c0f6:	ed94 6a01 	vldr	s12, [r4, #4]
 801c0fa:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c0fe:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c102:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 801c130 <tSimpleLivingString3_setFreq+0x90>
 801c106:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801c10a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c10e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801c112:	f001 f8a1 	bl	801d258 <exp>
 801c116:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c11a:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
 801c11e:	bd10      	pop	{r4, pc}
 801c120:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801c13c <tSimpleLivingString3_setFreq+0x9c>
 801c124:	e7d9      	b.n	801c0da <tSimpleLivingString3_setFreq+0x3a>
 801c126:	bf00      	nop
 801c128:	33333333 	.word	0x33333333
 801c12c:	40133333 	.word	0x40133333
 801c130:	0a3d70a4 	.word	0x0a3d70a4
 801c134:	c01ba3d7 	.word	0xc01ba3d7
 801c138:	3d8d78c4 	.word	0x3d8d78c4
 801c13c:	4019999a 	.word	0x4019999a

0801c140 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 801c140:	6800      	ldr	r0, [r0, #0]
 801c142:	303c      	adds	r0, #60	; 0x3c
 801c144:	f7f9 b866 	b.w	8015214 <tOnePole_setFreq>

0801c148 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, float decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 801c148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c14c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801c190 <tSimpleLivingString3_setDecay+0x48>
{
 801c150:	b510      	push	{r4, lr}
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 801c152:	ee30 7a07 	vadd.f32	s14, s0, s14
    _tSimpleLivingString3* p = *pl;
 801c156:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 801c158:	ed94 6a01 	vldr	s12, [r4, #4]
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 801c15c:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->userDecay = decay;
 801c160:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 801c164:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801c168:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801c16c:	ed9f 5b06 	vldr	d5, [pc, #24]	; 801c188 <tSimpleLivingString3_setDecay+0x40>
 801c170:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c174:	ee85 0b07 	vdiv.f64	d0, d5, d7
 801c178:	f001 f86e 	bl	801d258 <exp>
 801c17c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c180:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
 801c184:	bd10      	pop	{r4, pc}
 801c186:	bf00      	nop
 801c188:	52bd3c36 	.word	0x52bd3c36
 801c18c:	c01ba196 	.word	0xc01ba196
 801c190:	3d8d78c4 	.word	0x3d8d78c4

0801c194 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, float targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
 801c194:	6800      	ldr	r0, [r0, #0]
 801c196:	3054      	adds	r0, #84	; 0x54
 801c198:	f7f8 bc7c 	b.w	8014a94 <tFeedbackLeveler_setTargetLevel>

0801c19c <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, float levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
 801c19c:	6800      	ldr	r0, [r0, #0]
 801c19e:	3054      	adds	r0, #84	; 0x54
 801c1a0:	f7f8 bc4c 	b.w	8014a3c <tFeedbackLeveler_setFactor>

0801c1a4 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, float levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
 801c1a4:	6800      	ldr	r0, [r0, #0]
 801c1a6:	3054      	adds	r0, #84	; 0x54
 801c1a8:	f7f8 bc44 	b.w	8014a34 <tFeedbackLeveler_setStrength>

0801c1ac <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
 801c1ac:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
 801c1ae:	6805      	ldr	r5, [r0, #0]
{
 801c1b0:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
 801c1b2:	f105 0054 	add.w	r0, r5, #84	; 0x54
 801c1b6:	f7f8 fc45 	bl	8014a44 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 801c1ba:	622c      	str	r4, [r5, #32]
}
 801c1bc:	bd38      	pop	{r3, r4, r5, pc}
 801c1be:	bf00      	nop

0801c1c0 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, float input, float position)
{
 801c1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tSimpleLivingString3* p = *pl;
 801c1c4:	6801      	ldr	r1, [r0, #0]
{
 801c1c6:	b082      	sub	sp, #8
    int length = p->waveLengthInSamples;
 801c1c8:	edd1 7a02 	vldr	s15, [r1, #8]
 801c1cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c1d0:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
 801c1d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c1d8:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801c1dc:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 801c1e0:	ee17 3a90 	vmov	r3, s15
    if (pluckPoint < 1)
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	f340 8081 	ble.w	801c2ec <tSimpleLivingString3_pluck+0x12c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
 801c1ea:	4298      	cmp	r0, r3
 801c1ec:	dc0f      	bgt.n	801c20e <tSimpleLivingString3_pluck+0x4e>
    {
    	pluckPoint = length-1;
 801c1ee:	1e47      	subs	r7, r0, #1
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
 801c1f0:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
 801c1f2:	463b      	mov	r3, r7
    for (int i = 0; i < length; i++)
 801c1f4:	dd77      	ble.n	801c2e6 <tSimpleLivingString3_pluck+0x126>
    {
        float val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((float)i/(float)pluckPoint);
 801c1f6:	ee07 7a90 	vmov	s15, r7
 801c1fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c1fe:	2f00      	cmp	r7, #0
 801c200:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c204:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801c208:	da0f      	bge.n	801c22a <tSimpleLivingString3_pluck+0x6a>
 801c20a:	2300      	movs	r3, #0
 801c20c:	e02b      	b.n	801c266 <tSimpleLivingString3_pluck+0xa6>
    int remainder = length-pluckPoint;
 801c20e:	1ac2      	subs	r2, r0, r3
            val = input * ((float)i/(float)pluckPoint);
 801c210:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c214:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801c218:	1e47      	subs	r7, r0, #1
        }
        else
        {
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c21a:	ee07 2a90 	vmov	s15, r2
 801c21e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c222:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801c226:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 801c22a:	429f      	cmp	r7, r3
 801c22c:	bfa8      	it	ge
 801c22e:	461f      	movge	r7, r3
    for (int i = 0; i < length; i++)
 801c230:	2300      	movs	r3, #0
 801c232:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c236:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((float)i/(float)pluckPoint);
 801c238:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c23c:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((float)i/(float)pluckPoint);
 801c240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
 801c244:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c246:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 801c248:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c24a:	fbb2 f6f5 	udiv	r6, r2, r5
 801c24e:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * ((float)i/(float)pluckPoint);
 801c252:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
 801c256:	42bb      	cmp	r3, r7
        p->delayLineU->buff[bufWritePoint] = val;
 801c258:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c25c:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 801c260:	dde9      	ble.n	801c236 <tSimpleLivingString3_pluck+0x76>
 801c262:	4298      	cmp	r0, r3
 801c264:	dd1d      	ble.n	801c2a2 <tSimpleLivingString3_pluck+0xe2>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c266:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801c26a:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c26e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c274:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c278:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c27c:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
 801c280:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c282:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 801c284:	3301      	adds	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c286:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
 801c28a:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c28c:	fbb2 f6f5 	udiv	r6, r2, r5
 801c290:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c294:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
 801c298:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c29c:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 801c2a0:	dce3      	bgt.n	801c26a <tSimpleLivingString3_pluck+0xaa>
            val = input * ((float)i/(float)pluckPoint);
 801c2a2:	f04f 0c00 	mov.w	ip, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
 801c2a6:	eba0 020c 	sub.w	r2, r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c2aa:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
 801c2ae:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801c2b0:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c2b2:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
 801c2b4:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c2b6:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
 801c2b8:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c2ba:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 801c2bc:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c2be:	4463      	add	r3, ip
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 801c2c0:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
 801c2c2:	f10c 0c01 	add.w	ip, ip, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801c2c6:	fbb2 f8f7 	udiv	r8, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c2ca:	fbb3 fef6 	udiv	lr, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801c2ce:	fb07 2218 	mls	r2, r7, r8, r2
    for (int i = 0; i < length; i++)
 801c2d2:	4560      	cmp	r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c2d4:	fb06 331e 	mls	r3, r6, lr, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 801c2d8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801c2dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c2e0:	6812      	ldr	r2, [r2, #0]
 801c2e2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 801c2e4:	d1df      	bne.n	801c2a6 <tSimpleLivingString3_pluck+0xe6>
    }
}
 801c2e6:	b002      	add	sp, #8
 801c2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (int i = 0; i < length; i++)
 801c2ec:	2800      	cmp	r0, #0
 801c2ee:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
 801c2f2:	ddf8      	ble.n	801c2e6 <tSimpleLivingString3_pluck+0x126>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c2f4:	ee07 7a10 	vmov	s14, r7
 801c2f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
 801c2fc:	2301      	movs	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c2fe:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 801c302:	eeb0 7a67 	vmov.f32	s14, s15
 801c306:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((float)i/(float)pluckPoint);
 801c30a:	eeb0 6a67 	vmov.f32	s12, s15
 801c30e:	e78c      	b.n	801c22a <tSimpleLivingString3_pluck+0x6a>

0801c310 <tSimpleLivingString3_tick>:

float   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, float input)
{
 801c310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c314:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
 801c318:	6804      	ldr	r4, [r0, #0]

    //p->changeGainCompensator = 1.0f;
    float wl = tExpSmooth_tick(&p->wlSmooth);
 801c31a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //float changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801c31e:	f104 0634 	add.w	r6, r4, #52	; 0x34
    float wl = tExpSmooth_tick(&p->wlSmooth);
 801c322:	f7f8 ff0d 	bl	8015140 <tExpSmooth_tick>
 801c326:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
 801c32a:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801c32e:	4630      	mov	r0, r6
 801c330:	f7f8 f81c 	bl	801436c <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
 801c334:	eeb0 0a48 	vmov.f32	s0, s16
 801c338:	4638      	mov	r0, r7
 801c33a:	f7f8 f817 	bl	801436c <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
 801c33e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801c340:	2b00      	cmp	r3, #0
 801c342:	dd3c      	ble.n	801c3be <tSimpleLivingString3_tick+0xae>
    {
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801c344:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801c348:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
 801c34c:	2500      	movs	r5, #0
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801c34e:	4630      	mov	r0, r6
    for (int i = 0; i < p->oversampling; i++)
 801c350:	3501      	adds	r5, #1
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801c352:	f7f7 ffdf 	bl	8014314 <tLinearDelay_tickOut>
 801c356:	4648      	mov	r0, r9
 801c358:	f7f8 ff7a 	bl	8015250 <tOnePole_tick>
 801c35c:	edd4 7a04 	vldr	s15, [r4, #16]
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801c360:	4640      	mov	r0, r8
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801c362:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c366:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801c36a:	f7f8 fb6f 	bl	8014a4c <tFeedbackLeveler_tick>
 801c36e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801c372:	eef0 0a40 	vmov.f32	s1, s0
 801c376:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c37a:	f7fa fc8f 	bl	8016c9c <LEAF_clip>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 801c37e:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801c380:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 801c384:	f7f7 ffc6 	bl	8014314 <tLinearDelay_tickOut>
 801c388:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801c38c:	eef0 0a40 	vmov.f32	s1, s0
 801c390:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c394:	f7fa fc82 	bl	8016c9c <LEAF_clip>
 801c398:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
 801c39c:	4630      	mov	r0, r6
 801c39e:	eeb1 0a40 	vneg.f32	s0, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 801c3a2:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
 801c3a6:	f7f7 ffa1 	bl	80142ec <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
 801c3aa:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 801c3ae:	4638      	mov	r0, r7
 801c3b0:	eeb1 0a40 	vneg.f32	s0, s0
 801c3b4:	f7f7 ff9a 	bl	80142ec <tLinearDelay_tickIn>
    for (int i = 0; i < p->oversampling; i++)
 801c3b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801c3ba:	42ab      	cmp	r3, r5
 801c3bc:	dcc7      	bgt.n	801c34e <tSimpleLivingString3_tick+0x3e>
    }
    
    //calculate pickup point
    float point = wl * p->pickupPoint;
    float reversePoint = wl * (1.0f - p->pickupPoint);
 801c3be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float point = wl * p->pickupPoint;
 801c3c2:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    float floatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 801c3c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 801c3c8:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    float point = wl * p->pickupPoint;
 801c3cc:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801c3d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    float reversePoint = wl * (1.0f - p->pickupPoint);
 801c3d2:	ee77 6ae6 	vsub.f32	s13, s15, s13
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801c3d6:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
 801c3d8:	feb8 6a65 	vrinta.f32	s12, s11
 801c3dc:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    float reversePoint = wl * (1.0f - p->pickupPoint);
 801c3e0:	ee66 6a88 	vmul.f32	s13, s13, s16
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801c3e4:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
 801c3e8:	feb8 7a66 	vrinta.f32	s14, s13
 801c3ec:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801c3f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 801c3f4:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 801c3f8:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801c3fc:	ee17 0a10 	vmov	r0, s14
    float floatPart = point - whichPoint;
 801c400:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 801c404:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801c406:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 801c408:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801c40c:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 801c40e:	fb07 2216 	mls	r2, r7, r6, r2
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801c412:	ee35 5a06 	vadd.f32	s10, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801c416:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 801c418:	69c8      	ldr	r0, [r1, #28]
    float floatPart = point - whichPoint;
 801c41a:	ee75 5ac6 	vsub.f32	s11, s11, s12
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801c41e:	6889      	ldr	r1, [r1, #8]
    floatPart = reversePoint - whichPoint;
 801c420:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 801c424:	fb93 f6f0 	sdiv	r6, r3, r0
 801c428:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 801c42c:	1c56      	adds	r6, r2, #1
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801c42e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801c432:	ee37 0a86 	vadd.f32	s0, s15, s12
    floatPart = reversePoint - whichPoint;
 801c436:	ee76 6ac6 	vsub.f32	s13, s13, s12
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801c43a:	edd2 7a00 	vldr	s15, [r2]
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801c43e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801c442:	3301      	adds	r3, #1
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801c444:	ed92 7a00 	vldr	s14, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 801c448:	fb96 f2f7 	sdiv	r2, r6, r7
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801c44c:	ee20 0a07 	vmul.f32	s0, s0, s14
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 801c450:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
 801c454:	68a2      	ldr	r2, [r4, #8]
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801c456:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801c45a:	eea7 0a85 	vfma.f32	s0, s15, s10
 801c45e:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801c462:	fb93 f5f0 	sdiv	r5, r3, r0
 801c466:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801c46a:	fb00 3315 	mls	r3, r0, r5, r3
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801c46e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 801c472:	edd1 7a00 	vldr	s15, [r1]
    p->prevDelayLength = p->waveLengthInSamples;
 801c476:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 801c478:	eea7 0aa6 	vfma.f32	s0, s15, s13
 801c47c:	ee20 0a24 	vmul.f32	s0, s0, s9
 801c480:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //float stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
 801c484:	ecbd 8b02 	vpop	{d8}
 801c488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801c48c <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, float pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
 801c48c:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
 801c48e:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 801c492:	4770      	bx	lr

0801c494 <tLivingString2_initToPool>:
}

void    tLivingString2_initToPool    (tLivingString2* const pl, float freq, float pickPos, float prepPos, float pickupPos, float prepIndex,
                                     float brightness, float decay, float targetLev, float levSmoothFactor,
                                     float levStrength, int levMode, tMempool* const mp)
{
 801c494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c498:	ed2d 8b0c 	vpush	{d8-d13}
    _tMempool* m = *mp;
 801c49c:	f8d2 8000 	ldr.w	r8, [r2]
{
 801c4a0:	4606      	mov	r6, r0
 801c4a2:	b083      	sub	sp, #12
 801c4a4:	460f      	mov	r7, r1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
 801c4a6:	2070      	movs	r0, #112	; 0x70
 801c4a8:	4641      	mov	r1, r8
{
 801c4aa:	eef0 ca61 	vmov.f32	s25, s3
 801c4ae:	4615      	mov	r5, r2
 801c4b0:	eeb0 8a42 	vmov.f32	s16, s4
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;

    p->sampleRate = leaf->sampleRate;
    p->curr=0.0f;
 801c4b4:	ed9f da99 	vldr	s26, [pc, #612]	; 801c71c <tLivingString2_initToPool+0x288>
{
 801c4b8:	eef0 9a62 	vmov.f32	s19, s5
 801c4bc:	eef0 aa63 	vmov.f32	s21, s7
 801c4c0:	eeb0 ba43 	vmov.f32	s22, s6
 801c4c4:	eef0 8a41 	vmov.f32	s17, s2
 801c4c8:	eef0 ba44 	vmov.f32	s23, s8
 801c4cc:	eeb0 ca64 	vmov.f32	s24, s9
 801c4d0:	eeb0 aa40 	vmov.f32	s20, s0
 801c4d4:	eeb0 9a60 	vmov.f32	s18, s1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
 801c4d8:	f7fa fdb8 	bl	801704c <mpool_alloc>
 801c4dc:	6030      	str	r0, [r6, #0]
 801c4de:	4604      	mov	r4, r0
    p->mempool = m;
 801c4e0:	f8c0 8000 	str.w	r8, [r0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801c4e4:	4629      	mov	r1, r5
    p->sampleRate = leaf->sampleRate;
 801c4e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801c4ea:	305c      	adds	r0, #92	; 0x5c
 801c4ec:	eddf 0a8c 	vldr	s1, [pc, #560]	; 801c720 <tLivingString2_initToPool+0x28c>
    
    if (freq<20.f) freq=20.f;
    else if (freq>10000.f) freq=10000.f;
    freq = freq*2;
    p->freq = freq;
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801c4f0:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
    p->sampleRate = leaf->sampleRate;
 801c4f4:	edd3 7a00 	vldr	s15, [r3]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 801c4f8:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    p->curr=0.0f;
 801c4fc:	ed00 da0d 	vstr	s26, [r0, #-52]	; 0xffffffcc
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 801c500:	f104 0a30 	add.w	sl, r4, #48	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801c504:	ee87 0a8a 	vdiv.f32	s0, s15, s20
    p->sampleRate = leaf->sampleRate;
 801c508:	edc0 7a04 	vstr	s15, [r0, #16]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801c50c:	f7f8 fde8 	bl	80150e0 <tExpSmooth_initToPool>
    freq = freq*2;
 801c510:	eddf 7a84 	vldr	s15, [pc, #528]	; 801c724 <tLivingString2_initToPool+0x290>
    _tLivingString2* p = *pl;
 801c514:	6830      	ldr	r0, [r6, #0]
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 801c516:	f104 0934 	add.w	r9, r4, #52	; 0x34
    freq = freq*2;
 801c51a:	feca 7a67 	vminnm.f32	s15, s20, s15
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 801c51e:	f104 0838 	add.w	r8, r4, #56	; 0x38
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c522:	305c      	adds	r0, #92	; 0x5c
    freq = freq*2;
 801c524:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801c528:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801c52c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801c530:	ed90 7a04 	vldr	s14, [r0, #16]
 801c534:	ee87 0a27 	vdiv.f32	s0, s14, s15
    p->freq = freq;
 801c538:	ed40 7a16 	vstr	s15, [r0, #-88]	; 0xffffffa8
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801c53c:	ee30 0a6d 	vsub.f32	s0, s0, s27
 801c540:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c544:	f7f8 fdf8 	bl	8015138 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
 801c548:	eddf 0a77 	vldr	s1, [pc, #476]	; 801c728 <tLivingString2_initToPool+0x294>
 801c54c:	eeb0 0a49 	vmov.f32	s0, s18
 801c550:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801c554:	4629      	mov	r1, r5
    p->freq = freq;
 801c556:	ed84 aa01 	vstr	s20, [r4, #4]
    p->prepPos = prepPos;
 801c55a:	edc4 8a04 	vstr	s17, [r4, #16]
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
 801c55e:	edcd 0a00 	vstr	s1, [sp]
 801c562:	f7f8 fdbd 	bl	80150e0 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prpSmooth, prepPos, 0.01f, mp); // smoother for prep position
 801c566:	eeb0 0a68 	vmov.f32	s0, s17
 801c56a:	4629      	mov	r1, r5
 801c56c:	eddd 0a00 	vldr	s1, [sp]
 801c570:	f104 0064 	add.w	r0, r4, #100	; 0x64
 801c574:	f7f8 fdb4 	bl	80150e0 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->puSmooth, pickupPos, 0.01f, mp); // smoother for pickup position
 801c578:	eddd 0a00 	vldr	s1, [sp]
 801c57c:	4629      	mov	r1, r5
 801c57e:	eeb0 0a6c 	vmov.f32	s0, s25
 801c582:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c586:	f7f8 fdab 	bl	80150e0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tLivingString2_setPickPos(tLivingString2* const pl, float pickPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
 801c58a:	6830      	ldr	r0, [r6, #0]
    if (pickPos<0.f) pickPos=0.f;
 801c58c:	fe89 0a6d 	vminnm.f32	s0, s18, s27
 801c590:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801c594:	3060      	adds	r0, #96	; 0x60
    p->pickPos = pickPos;
 801c596:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801c59a:	f7f8 fdcd 	bl	8015138 <tExpSmooth_setDest>
}

void     tLivingString2_setPrepPos(tLivingString2* const pl, float prepPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
 801c59e:	6830      	ldr	r0, [r6, #0]
    if (prepPos<0.f) prepPos=0.f;
 801c5a0:	fe88 0aed 	vminnm.f32	s0, s17, s27
 801c5a4:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (prepPos>1.f) prepPos=1.f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801c5a8:	3064      	adds	r0, #100	; 0x64
    p->prepPos = prepPos;
 801c5aa:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801c5ae:	f7f8 fdc3 	bl	8015138 <tExpSmooth_setDest>
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 801c5b2:	ed94 0a02 	vldr	s0, [r4, #8]
 801c5b6:	462a      	mov	r2, r5
 801c5b8:	4658      	mov	r0, fp
 801c5ba:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->prepIndex = prepIndex;
 801c5be:	ed84 8a06 	vstr	s16, [r4, #24]
    p->pickupPos = pickupPos;
 801c5c2:	edc4 ca05 	vstr	s25, [r4, #20]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 801c5c6:	f7f7 ff11 	bl	80143ec <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 801c5ca:	ed94 0a02 	vldr	s0, [r4, #8]
 801c5ce:	462a      	mov	r2, r5
 801c5d0:	4650      	mov	r0, sl
 801c5d2:	f44f 6116 	mov.w	r1, #2400	; 0x960
 801c5d6:	f7f7 ff09 	bl	80143ec <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 801c5da:	ed94 0a02 	vldr	s0, [r4, #8]
 801c5de:	462a      	mov	r2, r5
 801c5e0:	4648      	mov	r0, r9
 801c5e2:	f44f 6116 	mov.w	r1, #2400	; 0x960
 801c5e6:	f7f7 ff01 	bl	80143ec <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 801c5ea:	462a      	mov	r2, r5
 801c5ec:	ed94 0a02 	vldr	s0, [r4, #8]
 801c5f0:	f44f 6116 	mov.w	r1, #2400	; 0x960
 801c5f4:	4640      	mov	r0, r8
 801c5f6:	f7f7 fef9 	bl	80143ec <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delLF);
 801c5fa:	4658      	mov	r0, fp
 801c5fc:	f7f7 ff6e 	bl	80144dc <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUF);
 801c600:	4650      	mov	r0, sl
 801c602:	f7f7 ff6b 	bl	80144dc <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUB);
 801c606:	4648      	mov	r0, r9
 801c608:	f7f7 ff68 	bl	80144dc <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delLB);
 801c60c:	4640      	mov	r0, r8
 801c60e:	f7f7 ff65 	bl	80144dc <tHermiteDelay_clear>
    tTwoZero_initToPool(&p->bridgeFilter, mp);
 801c612:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801c616:	4629      	mov	r1, r5
    p->brightness = brightness;
 801c618:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    tTwoZero_initToPool(&p->bridgeFilter, mp);
 801c61c:	f7f8 fe4e 	bl	80152bc <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->nutFilter, mp);
 801c620:	4629      	mov	r1, r5
 801c622:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801c626:	f7f8 fe49 	bl	80152bc <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterU, mp);
 801c62a:	4629      	mov	r1, r5
 801c62c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801c630:	f7f8 fe44 	bl	80152bc <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterL, mp);
 801c634:	4629      	mov	r1, r5
 801c636:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801c63a:	f7f8 fe3f 	bl	80152bc <tTwoZero_initToPool>
}

void     tLivingString2_setBrightness(tLivingString2* const pl, float brightness)
{
    _tLivingString2* p = *pl;
    float h0=(1.0 + brightness) * 0.5f;
 801c63e:	eeb7 5ae9 	vcvt.f64.f32	d5, s19
 801c642:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
 801c646:	6836      	ldr	r6, [r6, #0]
    float h0=(1.0 + brightness) * 0.5f;
 801c648:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
 801c64c:	eeb5 4b00 	vmov.f64	d4, #80	; 0x3e800000  0.250

    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801c650:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
 801c654:	ee05 6b06 	vmla.f64	d6, d5, d6
    float h1=(1.0 - brightness) * 0.25f;
 801c658:	ee37 7b45 	vsub.f64	d7, d7, d5
 801c65c:	ee27 7b04 	vmul.f64	d7, d7, d4
    float h0=(1.0 + brightness) * 0.5f;
 801c660:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
 801c664:	eeb7 1bc7 	vcvt.f32.f64	s2, d7
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801c668:	edcd 0a00 	vstr	s1, [sp]
 801c66c:	eeb0 0a41 	vmov.f32	s0, s2
 801c670:	ed8d 1a01 	vstr	s2, [sp, #4]
 801c674:	f7f8 fe52 	bl	801531c <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
 801c678:	ed9d 1a01 	vldr	s2, [sp, #4]
 801c67c:	eddd 0a00 	vldr	s1, [sp]
 801c680:	f106 0040 	add.w	r0, r6, #64	; 0x40
 801c684:	eeb0 0a41 	vmov.f32	s0, s2
 801c688:	ed8d 1a00 	vstr	s2, [sp]
 801c68c:	edcd 0a01 	vstr	s1, [sp, #4]
 801c690:	f7f8 fe44 	bl	801531c <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
 801c694:	ed9d 1a00 	vldr	s2, [sp]
 801c698:	f106 0044 	add.w	r0, r6, #68	; 0x44
 801c69c:	eddd 0a01 	vldr	s1, [sp, #4]
 801c6a0:	eeb0 0a41 	vmov.f32	s0, s2
 801c6a4:	f7f8 fe3a 	bl	801531c <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 801c6a8:	ed9d 1a00 	vldr	s2, [sp]
 801c6ac:	eddd 0a01 	vldr	s1, [sp, #4]
 801c6b0:	f106 0048 	add.w	r0, r6, #72	; 0x48
 801c6b4:	eeb0 0a41 	vmov.f32	s0, s2
 801c6b8:	f7f8 fe30 	bl	801531c <tTwoZero_setCoefficients>
    tHighpass_initToPool(&p->DCblockerU,8, mp);
 801c6bc:	4629      	mov	r1, r5
 801c6be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c6c2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801c6c6:	f7f8 ffa5 	bl	8015614 <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,8, mp);
 801c6ca:	4629      	mov	r1, r5
 801c6cc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801c6d0:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801c6d4:	f7f8 ff9e 	bl	8015614 <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801c6d8:	eeb0 1a4c 	vmov.f32	s2, s24
 801c6dc:	eef0 0a6b 	vmov.f32	s1, s23
 801c6e0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801c6e4:	eeb0 0a6a 	vmov.f32	s0, s21
 801c6e8:	462a      	mov	r2, r5
 801c6ea:	4639      	mov	r1, r7
    p->decay=decay;
 801c6ec:	ed84 ba07 	vstr	s22, [r4, #28]
    p->prepIndex = prepIndex;
 801c6f0:	ed84 8a06 	vstr	s16, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801c6f4:	f7f8 f976 	bl	80149e4 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801c6f8:	eeb0 1a4c 	vmov.f32	s2, s24
 801c6fc:	eef0 0a6b 	vmov.f32	s1, s23
 801c700:	462a      	mov	r2, r5
 801c702:	eeb0 0a6a 	vmov.f32	s0, s21
 801c706:	4639      	mov	r1, r7
 801c708:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c70c:	f7f8 f96a 	bl	80149e4 <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
 801c710:	6227      	str	r7, [r4, #32]
}
 801c712:	b003      	add	sp, #12
 801c714:	ecbd 8b0c 	vpop	{d8-d13}
 801c718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c71c:	00000000 	.word	0x00000000
 801c720:	3dcccccd 	.word	0x3dcccccd
 801c724:	461c4000 	.word	0x461c4000
 801c728:	3c23d70a 	.word	0x3c23d70a

0801c72c <tLivingString2_setFreq>:
    _tLivingString2* p = *pl;
 801c72c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 801c730:	eddf 6a0c 	vldr	s13, [pc, #48]	; 801c764 <tLivingString2_setFreq+0x38>
 801c734:	6803      	ldr	r3, [r0, #0]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801c736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c73a:	fe80 0a66 	vminnm.f32	s0, s0, s13
 801c73e:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    freq = freq*2;
 801c742:	ee30 0a00 	vadd.f32	s0, s0, s0
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801c746:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c74a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801c74e:	eec6 7a80 	vdiv.f32	s15, s13, s0
    p->freq = freq;
 801c752:	ed83 0a01 	vstr	s0, [r3, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801c756:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801c75a:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c75e:	f7f8 bceb 	b.w	8015138 <tExpSmooth_setDest>
 801c762:	bf00      	nop
 801c764:	461c4000 	.word	0x461c4000

0801c768 <tLivingString2_setPickPos>:
    _tLivingString2* p = *pl;
 801c768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c76c:	6803      	ldr	r3, [r0, #0]
    if (pickPos<0.f) pickPos=0.f;
 801c76e:	eddf 7a06 	vldr	s15, [pc, #24]	; 801c788 <tLivingString2_setPickPos+0x20>
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801c772:	f103 0060 	add.w	r0, r3, #96	; 0x60
 801c776:	fe80 0a47 	vminnm.f32	s0, s0, s14
 801c77a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickPos = pickPos;
 801c77e:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801c782:	f7f8 bcd9 	b.w	8015138 <tExpSmooth_setDest>
 801c786:	bf00      	nop
 801c788:	00000000 	.word	0x00000000

0801c78c <tLivingString2_setPrepPos>:
    _tLivingString2* p = *pl;
 801c78c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c790:	6803      	ldr	r3, [r0, #0]
    if (prepPos<0.f) prepPos=0.f;
 801c792:	eddf 7a06 	vldr	s15, [pc, #24]	; 801c7ac <tLivingString2_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801c796:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801c79a:	fe80 0a47 	vminnm.f32	s0, s0, s14
 801c79e:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->prepPos = prepPos;
 801c7a2:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801c7a6:	f7f8 bcc7 	b.w	8015138 <tExpSmooth_setDest>
 801c7aa:	bf00      	nop
 801c7ac:	00000000 	.word	0x00000000

0801c7b0 <tLivingString2_setPickupPos>:
    _tLivingString2* p = *pl;
 801c7b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c7b4:	6803      	ldr	r3, [r0, #0]
    if (pickupPos<0.f) pickupPos=0.f;
 801c7b6:	eddf 7a06 	vldr	s15, [pc, #24]	; 801c7d0 <tLivingString2_setPickupPos+0x20>
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
 801c7ba:	f103 0068 	add.w	r0, r3, #104	; 0x68
 801c7be:	fe80 0a47 	vminnm.f32	s0, s0, s14
 801c7c2:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickupPos = pickupPos;
 801c7c6:	ed83 0a05 	vstr	s0, [r3, #20]
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
 801c7ca:	f7f8 bcb5 	b.w	8015138 <tExpSmooth_setDest>
 801c7ce:	bf00      	nop
 801c7d0:	00000000 	.word	0x00000000

0801c7d4 <tLivingString2_setPrepIndex>:
    p->prepIndex = prepIndex;
 801c7d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c7d8:	eddf 7a04 	vldr	s15, [pc, #16]	; 801c7ec <tLivingString2_setPrepIndex+0x18>
    _tLivingString2* p = *pl;
 801c7dc:	6803      	ldr	r3, [r0, #0]
    p->prepIndex = prepIndex;
 801c7de:	fe80 0a47 	vminnm.f32	s0, s0, s14
 801c7e2:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 801c7e6:	ed83 0a06 	vstr	s0, [r3, #24]
}
 801c7ea:	4770      	bx	lr
 801c7ec:	00000000 	.word	0x00000000

0801c7f0 <tLivingString2_setBrightness>:
    float h0=(1.0 + brightness) * 0.5f;
 801c7f0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801c7f4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801c7f8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
 801c7fc:	eeb5 1b00 	vmov.f64	d1, #80	; 0x3e800000  0.250
    float h0=(1.0 + brightness) * 0.5f;
 801c800:	ee00 6b06 	vmla.f64	d6, d0, d6
    float h1=(1.0 - brightness) * 0.25f;
 801c804:	ee37 7b40 	vsub.f64	d7, d7, d0
{
 801c808:	b510      	push	{r4, lr}
    float h1=(1.0 - brightness) * 0.25f;
 801c80a:	ee27 1b01 	vmul.f64	d1, d7, d1
    _tLivingString2* p = *pl;
 801c80e:	6804      	ldr	r4, [r0, #0]
{
 801c810:	b082      	sub	sp, #8
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801c812:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
 801c816:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
 801c81a:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801c81e:	edcd 0a00 	vstr	s1, [sp]
 801c822:	eeb0 0a41 	vmov.f32	s0, s2
 801c826:	ed8d 1a01 	vstr	s2, [sp, #4]
 801c82a:	f7f8 fd77 	bl	801531c <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
 801c82e:	ed9d 1a01 	vldr	s2, [sp, #4]
 801c832:	eddd 0a00 	vldr	s1, [sp]
 801c836:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801c83a:	eeb0 0a41 	vmov.f32	s0, s2
 801c83e:	ed8d 1a00 	vstr	s2, [sp]
 801c842:	edcd 0a01 	vstr	s1, [sp, #4]
 801c846:	f7f8 fd69 	bl	801531c <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
 801c84a:	ed9d 1a00 	vldr	s2, [sp]
 801c84e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801c852:	eddd 0a01 	vldr	s1, [sp, #4]
 801c856:	eeb0 0a41 	vmov.f32	s0, s2
 801c85a:	f7f8 fd5f 	bl	801531c <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 801c85e:	ed9d 1a00 	vldr	s2, [sp]
 801c862:	eddd 0a01 	vldr	s1, [sp, #4]
 801c866:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801c86a:	eeb0 0a41 	vmov.f32	s0, s2
}
 801c86e:	b002      	add	sp, #8
 801c870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 801c874:	f7f8 bd52 	b.w	801531c <tTwoZero_setCoefficients>

0801c878 <tLivingString2_setDecay>:

void     tLivingString2_setDecay(tLivingString2* const pl, float decay)
{
 801c878:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
 801c87a:	6804      	ldr	r4, [r0, #0]
{
 801c87c:	eef0 0a40 	vmov.f32	s1, s0
    p->decay=powf(0.001f,1.0f/(p->freq*decay));
 801c880:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c884:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801c8a0 <tLivingString2_setDecay+0x28>
 801c888:	ed94 7a01 	vldr	s14, [r4, #4]
 801c88c:	ee60 0a87 	vmul.f32	s1, s1, s14
 801c890:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 801c894:	f000 fe18 	bl	801d4c8 <powf>
 801c898:	ed84 0a07 	vstr	s0, [r4, #28]
}
 801c89c:	bd10      	pop	{r4, pc}
 801c89e:	bf00      	nop
 801c8a0:	3a83126f 	.word	0x3a83126f

0801c8a4 <tLivingString2_setTargetLev>:

void     tLivingString2_setTargetLev(tLivingString2* const pl, float targetLev)
{
 801c8a4:	b510      	push	{r4, lr}
 801c8a6:	ed2d 8b02 	vpush	{d8}
 801c8aa:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 801c8ae:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
 801c8b0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801c8b4:	f7f8 f8ee 	bl	8014a94 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 801c8b8:	eeb0 0a48 	vmov.f32	s0, s16
 801c8bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 801c8c0:	ecbd 8b02 	vpop	{d8}
 801c8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 801c8c8:	f7f8 b8e4 	b.w	8014a94 <tFeedbackLeveler_setTargetLevel>

0801c8cc <tLivingString2_setLevSmoothFactor>:

void     tLivingString2_setLevSmoothFactor(tLivingString2* const pl, float levSmoothFactor)
{
 801c8cc:	b510      	push	{r4, lr}
 801c8ce:	ed2d 8b02 	vpush	{d8}
 801c8d2:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 801c8d6:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLevU, levSmoothFactor);
 801c8d8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801c8dc:	f7f8 f8ae 	bl	8014a3c <tFeedbackLeveler_setFactor>
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
 801c8e0:	eeb0 0a48 	vmov.f32	s0, s16
 801c8e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 801c8e8:	ecbd 8b02 	vpop	{d8}
 801c8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
 801c8f0:	f7f8 b8a4 	b.w	8014a3c <tFeedbackLeveler_setFactor>

0801c8f4 <tLivingString2_setLevStrength>:

void     tLivingString2_setLevStrength(tLivingString2* const pl, float levStrength)
{
 801c8f4:	b510      	push	{r4, lr}
 801c8f6:	ed2d 8b02 	vpush	{d8}
 801c8fa:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 801c8fe:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
 801c900:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801c904:	f7f8 f896 	bl	8014a34 <tFeedbackLeveler_setStrength>
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
 801c908:	eeb0 0a48 	vmov.f32	s0, s16
 801c90c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 801c910:	ecbd 8b02 	vpop	{d8}
 801c914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
 801c918:	f7f8 b88c 	b.w	8014a34 <tFeedbackLeveler_setStrength>

0801c91c <tLivingString2_setLevMode>:

void     tLivingString2_setLevMode(tLivingString2* const pl, int levMode)
{
 801c91c:	b538      	push	{r3, r4, r5, lr}
    _tLivingString2* p = *pl;
 801c91e:	6805      	ldr	r5, [r0, #0]
{
 801c920:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
 801c922:	f105 0054 	add.w	r0, r5, #84	; 0x54
 801c926:	f7f8 f88d 	bl	8014a44 <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
 801c92a:	4621      	mov	r1, r4
 801c92c:	f105 0058 	add.w	r0, r5, #88	; 0x58
 801c930:	f7f8 f888 	bl	8014a44 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 801c934:	622c      	str	r4, [r5, #32]
}
 801c936:	bd38      	pop	{r3, r4, r5, pc}

0801c938 <tLivingString2_tick>:

float   tLivingString2_tick(tLivingString2* const pl, float input)
{
 801c938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tLivingString2* p = *pl;

    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
 801c93c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 801c940:	ed2d 8b0a 	vpush	{d8-d12}
    _tLivingString2* p = *pl;
 801c944:	6804      	ldr	r4, [r0, #0]
    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
 801c946:	ee60 aa27 	vmul.f32	s21, s0, s15
    //float pickupPos=tExpSmooth_tick(&p->puSmooth);

    //need to determine which delay line to put it into (should be half amplitude into forward and backward lines for the correct portion of string)
    float prepP=tExpSmooth_tick(&p->prpSmooth);
    float lowLen=prepP*wLen;
    float upLen=(1.0f-prepP)*wLen;
 801c94a:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    float wLen=tExpSmooth_tick(&p->wlSmooth);
 801c94e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c952:	f7f8 fbf5 	bl	8015140 <tExpSmooth_tick>
    float pickP=tExpSmooth_tick(&p->ppSmooth);
 801c956:	f104 0060 	add.w	r0, r4, #96	; 0x60
    float wLen=tExpSmooth_tick(&p->wlSmooth);
 801c95a:	eef0 8a40 	vmov.f32	s17, s0
    float pickP=tExpSmooth_tick(&p->ppSmooth);
 801c95e:	f7f8 fbef 	bl	8015140 <tExpSmooth_tick>
 801c962:	eeb0 8a40 	vmov.f32	s16, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
 801c966:	f104 0064 	add.w	r0, r4, #100	; 0x64
 801c96a:	f7f8 fbe9 	bl	8015140 <tExpSmooth_tick>
    float upLen=(1.0f-prepP)*wLen;
 801c96e:	ee7c 9a40 	vsub.f32	s19, s24, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
 801c972:	eeb0 aa40 	vmov.f32	s20, s0
    uint32_t pickPInt;

    if (pickP > prepP)
 801c976:	eeb4 8ac0 	vcmpe.f32	s16, s0
    float lowLen=prepP*wLen;
 801c97a:	ee28 9a80 	vmul.f32	s18, s17, s0
    float upLen=(1.0f-prepP)*wLen;
 801c97e:	ee69 9aa8 	vmul.f32	s19, s19, s17
    if (pickP > prepP)
 801c982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c986:	f340 8170 	ble.w	801cc6a <tLivingString2_tick+0x332>
    {
        float fullPickPoint =  ((pickP*wLen) - lowLen);
 801c98a:	eeb0 7a49 	vmov.f32	s14, s18
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801c98e:	f104 0930 	add.w	r9, r4, #48	; 0x30
 801c992:	ee39 ba0c 	vadd.f32	s22, s18, s24
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801c996:	f104 0834 	add.w	r8, r4, #52	; 0x34
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801c99a:	4648      	mov	r0, r9
    {
         float fullPickPoint =  pickP * wLen;
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801c99c:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        float fullPickPoint =  ((pickP*wLen) - lowLen);
 801c9a0:	ee98 7a88 	vfnms.f32	s14, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801c9a4:	f104 0638 	add.w	r6, r4, #56	; 0x38
 801c9a8:	eea8 bac8 	vfms.f32	s22, s17, s16
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
 801c9ac:	eefc cac7 	vcvt.u32.f32	s25, s14
        float pickPFloat = fullPickPoint - pickPInt;
 801c9b0:	eef8 7a6c 	vcvt.f32.u32	s15, s25
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801c9b4:	ee1c 1a90 	vmov	r1, s25
 801c9b8:	ee37 ba8b 	vadd.f32	s22, s15, s22
        float pickPFloat = fullPickPoint - pickPInt;
 801c9bc:	ee77 ba67 	vsub.f32	s23, s14, s15
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801c9c0:	ee39 8ae7 	vsub.f32	s16, s19, s15
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801c9c4:	ee2b ba2a 	vmul.f32	s22, s22, s21
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
 801c9c8:	ee6a aaab 	vmul.f32	s21, s21, s23
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801c9cc:	eeb0 0a4b 	vmov.f32	s0, s22
 801c9d0:	f7f7 fe06 	bl	80145e0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
 801c9d4:	ee1c 1a90 	vmov	r1, s25
 801c9d8:	4648      	mov	r0, r9
 801c9da:	eeb0 0a6a 	vmov.f32	s0, s21
 801c9de:	3101      	adds	r1, #1
 801c9e0:	f7f7 fdfe 	bl	80145e0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801c9e4:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 801c9e8:	4640      	mov	r0, r8
 801c9ea:	eeb0 0a4b 	vmov.f32	s0, s22
 801c9ee:	ee17 1a90 	vmov	r1, s15
 801c9f2:	f7f7 fdf5 	bl	80145e0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * pickPFloat, (uint32_t) (upLen - pickPInt - 1));
 801c9f6:	ee78 7a4c 	vsub.f32	s15, s16, s24
 801c9fa:	eeb0 0a6a 	vmov.f32	s0, s21
 801c9fe:	4640      	mov	r0, r8
 801ca00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ca04:	ee17 1a90 	vmov	r1, s15
 801ca08:	f7f7 fdea 	bl	80145e0 <tHermiteDelay_addTo>

        tHermiteDelay_addTo(&p->delLF, input, pickPInt);
        tHermiteDelay_addTo(&p->delLB, input, (uint32_t) (lowLen - pickPInt));
    }
*/
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 801ca0c:	4638      	mov	r0, r7
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);

    // into upper half of string, from bridge, going backwards
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801ca0e:	f104 0554 	add.w	r5, r4, #84	; 0x54
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 801ca12:	f7f7 fd7f 	bl	8014514 <tHermiteDelay_tickOut>
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 801ca16:	4648      	mov	r0, r9
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 801ca18:	eef0 aa40 	vmov.f32	s21, s0
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 801ca1c:	f7f7 fd7a 	bl	8014514 <tHermiteDelay_tickOut>
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
 801ca20:	4640      	mov	r0, r8
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 801ca22:	eeb0 8a40 	vmov.f32	s16, s0
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
 801ca26:	f7f7 fd75 	bl	8014514 <tHermiteDelay_tickOut>
 801ca2a:	eeb0 ba40 	vmov.f32	s22, s0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
 801ca2e:	4630      	mov	r0, r6
 801ca30:	f7f7 fd70 	bl	8014514 <tHermiteDelay_tickOut>
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
 801ca34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
 801ca38:	eef0 0a40 	vmov.f32	s1, s0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
 801ca3c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801ca40:	f7fa f92c 	bl	8016c9c <LEAF_clip>
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
 801ca44:	eef0 0a4b 	vmov.f32	s1, s22
 801ca48:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
 801ca4c:	eeb0 ca40 	vmov.f32	s24, s0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
 801ca50:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801ca54:	f7fa f922 	bl	8016c9c <LEAF_clip>
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
 801ca58:	eef0 0a48 	vmov.f32	s1, s16
 801ca5c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
 801ca60:	eef0 ba40 	vmov.f32	s23, s0
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
 801ca64:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801ca68:	f7fa f918 	bl	8016c9c <LEAF_clip>
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
 801ca6c:	eef0 0a6a 	vmov.f32	s1, s21
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
 801ca70:	eeb0 8a40 	vmov.f32	s16, s0
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
 801ca74:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801ca78:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801ca7c:	f7fa f90e 	bl	8016c9c <LEAF_clip>
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801ca80:	6a23      	ldr	r3, [r4, #32]
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
 801ca82:	eeb0 ba40 	vmov.f32	s22, s0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	f040 80ec 	bne.w	801cc64 <tLivingString2_tick+0x32c>
 801ca8c:	edd4 ca07 	vldr	s25, [r4, #28]
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
    // into lower half of string, from prepPoint, going backwards
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801ca90:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801ca94:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801ca98:	eeb0 0a48 	vmov.f32	s0, s16
 801ca9c:	f7f8 fc22 	bl	80152e4 <tTwoZero_tick>
 801caa0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801caa4:	f7f8 fde2 	bl	801566c <tHighpass_tick>
 801caa8:	4628      	mov	r0, r5
 801caaa:	ee20 0a2c 	vmul.f32	s0, s0, s25
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
    tHermiteDelay_tickIn(&p->delLB, intoLower);
    // into lower half of string, from nut
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 801caae:	f104 0558 	add.w	r5, r4, #88	; 0x58
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801cab2:	f7f7 ffcb 	bl	8014a4c <tFeedbackLeveler_tick>
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
 801cab6:	eeb0 1a6a 	vmov.f32	s2, s21
 801caba:	eef1 0a40 	vneg.f32	s1, s0
 801cabe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801cac2:	f7fa f8eb 	bl	8016c9c <LEAF_clip>
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
 801cac6:	4640      	mov	r0, r8
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
 801cac8:	eeb0 8a40 	vmov.f32	s16, s0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
 801cacc:	f7f7 fd14 	bl	80144f8 <tHermiteDelay_tickIn>
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
 801cad0:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801cad4:	eeb0 0a4b 	vmov.f32	s0, s22
 801cad8:	f7f8 fc04 	bl	80152e4 <tTwoZero_tick>
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
 801cadc:	eeb0 1a6a 	vmov.f32	s2, s21
 801cae0:	eef1 0a40 	vneg.f32	s1, s0
 801cae4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801cae8:	f7fa f8d8 	bl	8016c9c <LEAF_clip>
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801caec:	edd4 7a06 	vldr	s15, [r4, #24]
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
 801caf0:	eeb0 7a40 	vmov.f32	s14, s0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801caf4:	ee7a 0ae7 	vsub.f32	s1, s21, s15
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
 801caf8:	eeb0 1a6a 	vmov.f32	s2, s21
 801cafc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801cb00:	ee60 0aab 	vmul.f32	s1, s1, s23
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
 801cb04:	eee7 0a87 	vfma.f32	s1, s15, s14
 801cb08:	f7fa f8c8 	bl	8016c9c <LEAF_clip>
    tHermiteDelay_tickIn(&p->delLB, intoLower);
 801cb0c:	4630      	mov	r0, r6
 801cb0e:	f7f7 fcf3 	bl	80144f8 <tHermiteDelay_tickIn>
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 801cb12:	6a23      	ldr	r3, [r4, #32]
 801cb14:	b90b      	cbnz	r3, 801cb1a <tLivingString2_tick+0x1e2>
 801cb16:	edd4 aa07 	vldr	s21, [r4, #28]
 801cb1a:	eeb0 0a4c 	vmov.f32	s0, s24
 801cb1e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
    tHermiteDelay_tickIn(&p->delLF, fromNut);
    // into upper half of string, from prepPoint, going forwards/upwards
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801cb22:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 801cb26:	f7f8 fbdd 	bl	80152e4 <tTwoZero_tick>
 801cb2a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801cb2e:	f7f8 fd9d 	bl	801566c <tHighpass_tick>
 801cb32:	4628      	mov	r0, r5
 801cb34:	ee20 0a2a 	vmul.f32	s0, s0, s21
 801cb38:	f7f7 ff88 	bl	8014a4c <tFeedbackLeveler_tick>
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
 801cb3c:	eeb0 1a4c 	vmov.f32	s2, s24
 801cb40:	eef1 0a40 	vneg.f32	s1, s0
 801cb44:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801cb48:	f7fa f8a8 	bl	8016c9c <LEAF_clip>
    tHermiteDelay_tickIn(&p->delLF, fromNut);
 801cb4c:	4638      	mov	r0, r7
 801cb4e:	f7f7 fcd3 	bl	80144f8 <tHermiteDelay_tickIn>
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
 801cb52:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801cb56:	eeb0 0a6b 	vmov.f32	s0, s23
 801cb5a:	f7f8 fbc3 	bl	80152e4 <tTwoZero_tick>
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
 801cb5e:	eeb0 1a4c 	vmov.f32	s2, s24
 801cb62:	eef1 0a40 	vneg.f32	s1, s0
 801cb66:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801cb6a:	f7fa f897 	bl	8016c9c <LEAF_clip>
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801cb6e:	edd4 7a06 	vldr	s15, [r4, #24]
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
 801cb72:	eeb0 7a40 	vmov.f32	s14, s0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801cb76:	ee7c 0a67 	vsub.f32	s1, s24, s15
    //intoUpper = tanhf(intoUpper);
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
 801cb7a:	eeb0 1a4c 	vmov.f32	s2, s24
 801cb7e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801cb82:	ee60 0a8b 	vmul.f32	s1, s1, s22
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
 801cb86:	eee7 0a87 	vfma.f32	s1, s15, s14
 801cb8a:	f7fa f887 	bl	8016c9c <LEAF_clip>
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
 801cb8e:	4648      	mov	r0, r9
 801cb90:	f7f7 fcb2 	bl	80144f8 <tHermiteDelay_tickIn>
    // update all delay lengths

    tHermiteDelay_setDelay(&p->delLF, lowLen);
 801cb94:	eeb0 0a49 	vmov.f32	s0, s18
 801cb98:	4638      	mov	r0, r7
 801cb9a:	f7f7 fce5 	bl	8014568 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delLB, lowLen);
 801cb9e:	eeb0 0a49 	vmov.f32	s0, s18
 801cba2:	4630      	mov	r0, r6
 801cba4:	f7f7 fce0 	bl	8014568 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUF, upLen);
 801cba8:	eeb0 0a69 	vmov.f32	s0, s19
 801cbac:	4648      	mov	r0, r9
 801cbae:	f7f7 fcdb 	bl	8014568 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUB, upLen);
 801cbb2:	eeb0 0a69 	vmov.f32	s0, s19
 801cbb6:	4640      	mov	r0, r8
 801cbb8:	f7f7 fcd6 	bl	8014568 <tHermiteDelay_setDelay>
    
    uint32_t PUPInt;
    float pickupOut = 0.0f;
    float pupos = tExpSmooth_tick(&p->puSmooth);
 801cbbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801cbc0:	f7f8 fabe 	bl	8015140 <tExpSmooth_tick>
    if (pupos < 0.9999f)
 801cbc4:	eddf 7a66 	vldr	s15, [pc, #408]	; 801cd60 <tLivingString2_tick+0x428>
    float pupos = tExpSmooth_tick(&p->puSmooth);
 801cbc8:	eef0 aa40 	vmov.f32	s21, s0
    if (pupos < 0.9999f)
 801cbcc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801cbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbd4:	d53e      	bpl.n	801cc54 <tLivingString2_tick+0x31c>
    {
        if (pupos > prepP)
 801cbd6:	eeb4 aac0 	vcmpe.f32	s20, s0
 801cbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbde:	f140 8082 	bpl.w	801cce6 <tLivingString2_tick+0x3ae>
        {
            float fullPUPoint =  ((pupos*wLen) - lowLen);
 801cbe2:	eef0 7a49 	vmov.f32	s15, s18
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
            float PUPFloat = fullPUPoint - PUPInt;

            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801cbe6:	4648      	mov	r0, r9
 801cbe8:	ee39 9a0c 	vadd.f32	s18, s18, s24
            float fullPUPoint =  ((pupos*wLen) - lowLen);
 801cbec:	eed8 7a80 	vfnms.f32	s15, s17, s0
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
 801cbf0:	eea8 9aea 	vfms.f32	s18, s17, s21
 801cbf4:	eebc aae7 	vcvt.u32.f32	s20, s15
            float PUPFloat = fullPUPoint - PUPInt;
 801cbf8:	eeb8 8a4a 	vcvt.f32.u32	s16, s20
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801cbfc:	ee1a 1a10 	vmov	r1, s20
            float PUPFloat = fullPUPoint - PUPInt;
 801cc00:	ee37 bac8 	vsub.f32	s22, s15, s16
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801cc04:	f7f7 fce0 	bl	80145c8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801cc08:	ee79 9ac8 	vsub.f32	s19, s19, s16
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 801cc0c:	ee1a 1a10 	vmov	r1, s20
 801cc10:	4648      	mov	r0, r9
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801cc12:	eeb0 aa40 	vmov.f32	s20, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 801cc16:	3101      	adds	r1, #1
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801cc18:	ee38 9a09 	vadd.f32	s18, s16, s18
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 801cc1c:	f7f7 fcd4 	bl	80145c8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801cc20:	eefc 7ae9 	vcvt.u32.f32	s15, s19
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
 801cc24:	ee79 9acc 	vsub.f32	s19, s19, s24
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801cc28:	4640      	mov	r0, r8
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 801cc2a:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801cc2e:	ee17 1a90 	vmov	r1, s15
 801cc32:	f7f7 fcc9 	bl	80145c8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
 801cc36:	eefc 7ae9 	vcvt.u32.f32	s15, s19
 801cc3a:	4640      	mov	r0, r8
 801cc3c:	ee3a aa00 	vadd.f32	s20, s20, s0
 801cc40:	ee17 1a90 	vmov	r1, s15
 801cc44:	f7f7 fcc0 	bl	80145c8 <tHermiteDelay_tapOut>
 801cc48:	ee38 8a00 	vadd.f32	s16, s16, s0
 801cc4c:	ee28 8a0b 	vmul.f32	s16, s16, s22
 801cc50:	eea9 8a0a 	vfma.f32	s16, s18, s20

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
 801cc54:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = pickupOut;
 801cc58:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
 801cc5c:	ecbd 8b0a 	vpop	{d8-d12}
 801cc60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801cc64:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
 801cc68:	e712      	b.n	801ca90 <tLivingString2_tick+0x158>
         float fullPickPoint =  pickP * wLen;
 801cc6a:	ee28 8a88 	vmul.f32	s16, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801cc6e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801cc72:	f104 0638 	add.w	r6, r4, #56	; 0x38
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801cc76:	f104 0930 	add.w	r9, r4, #48	; 0x30
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801cc7a:	4638      	mov	r0, r7
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801cc7c:	f104 0834 	add.w	r8, r4, #52	; 0x34
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
 801cc80:	eefc cac8 	vcvt.u32.f32	s25, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801cc84:	ee7c ba48 	vsub.f32	s23, s24, s16
        float pickPFloat = fullPickPoint - pickPInt;
 801cc88:	eef8 7a6c 	vcvt.f32.u32	s15, s25
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801cc8c:	ee1c 1a90 	vmov	r1, s25
 801cc90:	ee7b baa7 	vadd.f32	s23, s23, s15
        float pickPFloat = fullPickPoint - pickPInt;
 801cc94:	ee38 8a67 	vsub.f32	s16, s16, s15
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801cc98:	ee39 ba67 	vsub.f32	s22, s18, s15
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801cc9c:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
 801cca0:	ee6a aa88 	vmul.f32	s21, s21, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801cca4:	eeb0 0a6b 	vmov.f32	s0, s23
 801cca8:	f7f7 fc9a 	bl	80145e0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
 801ccac:	ee1c 1a90 	vmov	r1, s25
 801ccb0:	4638      	mov	r0, r7
 801ccb2:	eeb0 0a6a 	vmov.f32	s0, s21
 801ccb6:	3101      	adds	r1, #1
 801ccb8:	f7f7 fc92 	bl	80145e0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801ccbc:	eefc 7acb 	vcvt.u32.f32	s15, s22
 801ccc0:	4630      	mov	r0, r6
 801ccc2:	eeb0 0a6b 	vmov.f32	s0, s23
 801ccc6:	ee17 1a90 	vmov	r1, s15
 801ccca:	f7f7 fc89 	bl	80145e0 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * pickPFloat, (uint32_t) (lowLen - pickPInt - 1));
 801ccce:	ee7b 7a4c 	vsub.f32	s15, s22, s24
 801ccd2:	eeb0 0a6a 	vmov.f32	s0, s21
 801ccd6:	4630      	mov	r0, r6
 801ccd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ccdc:	ee17 1a90 	vmov	r1, s15
 801cce0:	f7f7 fc7e 	bl	80145e0 <tHermiteDelay_addTo>
 801cce4:	e692      	b.n	801ca0c <tLivingString2_tick+0xd4>
             float fullPUPoint =  pupos * wLen;
 801cce6:	ee68 8a80 	vmul.f32	s17, s17, s0
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801ccea:	4638      	mov	r0, r7
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
 801ccec:	eefc 9ae8 	vcvt.u32.f32	s19, s17
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801ccf0:	ee3c aa68 	vsub.f32	s20, s24, s17
            float PUPFloat = fullPUPoint - PUPInt;
 801ccf4:	eeb8 8a69 	vcvt.f32.u32	s16, s19
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801ccf8:	ee19 1a90 	vmov	r1, s19
 801ccfc:	f7f7 fc64 	bl	80145c8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 801cd00:	ee19 1a90 	vmov	r1, s19
 801cd04:	4638      	mov	r0, r7
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801cd06:	eef0 9a40 	vmov.f32	s19, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801cd0a:	ee39 9a48 	vsub.f32	s18, s18, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 801cd0e:	3101      	adds	r1, #1
 801cd10:	f7f7 fc5a 	bl	80145c8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801cd14:	4630      	mov	r0, r6
            float PUPFloat = fullPUPoint - PUPInt;
 801cd16:	ee78 8ac8 	vsub.f32	s17, s17, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801cd1a:	eefc 7ac9 	vcvt.u32.f32	s15, s18
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
 801cd1e:	ee39 9a4c 	vsub.f32	s18, s18, s24
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801cd22:	ee3a aa08 	vadd.f32	s20, s20, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801cd26:	ee17 1a90 	vmov	r1, s15
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 801cd2a:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801cd2e:	f7f7 fc4b 	bl	80145c8 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
 801cd32:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 801cd36:	4630      	mov	r0, r6
 801cd38:	ee79 9a80 	vadd.f32	s19, s19, s0
 801cd3c:	ee17 1a90 	vmov	r1, s15
 801cd40:	f7f7 fc42 	bl	80145c8 <tHermiteDelay_tapOut>
 801cd44:	ee38 8a00 	vadd.f32	s16, s16, s0
 801cd48:	ee28 8a28 	vmul.f32	s16, s16, s17
 801cd4c:	eeaa 8a29 	vfma.f32	s16, s20, s19
}
 801cd50:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = pickupOut;
 801cd54:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
 801cd58:	ecbd 8b0a 	vpop	{d8-d12}
 801cd5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd60:	3f7ff972 	.word	0x3f7ff972

0801cd64 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 801cd64:	4770      	bx	lr
 801cd66:	bf00      	nop

0801cd68 <LEAF_init>:
{
 801cd68:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 801cd6a:	6200      	str	r0, [r0, #32]
{
 801cd6c:	4604      	mov	r4, r0
 801cd6e:	461d      	mov	r5, r3
 801cd70:	ed2d 8b02 	vpush	{d8}
 801cd74:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 801cd78:	f7fa f952 	bl	8017020 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 801cd7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801cd80:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801cdb4 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 801cd84:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 801cd86:	4b0c      	ldr	r3, [pc, #48]	; (801cdb8 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 801cd88:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 801cd8c:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 801cd90:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 801cd92:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 801cd94:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 801cd98:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 801cd9c:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801cda0:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 801cda4:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801cda8:	edc4 7a03 	vstr	s15, [r4, #12]
}
 801cdac:	ecbd 8b02 	vpop	{d8}
 801cdb0:	bd38      	pop	{r3, r4, r5, pc}
 801cdb2:	bf00      	nop
 801cdb4:	40c90fdb 	.word	0x40c90fdb
 801cdb8:	0801cd65 	.word	0x0801cd65

0801cdbc <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 801cdbc:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 801cdbe:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 801cdc2:	2401      	movs	r4, #1
 801cdc4:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 801cdc6:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 801cdca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801cdcc:	4718      	bx	r3
 801cdce:	bf00      	nop

0801cdd0 <arm_sin_f32>:
 801cdd0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801ce50 <arm_sin_f32+0x80>
 801cdd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801cdd8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801cddc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801cde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cde4:	d504      	bpl.n	801cdf0 <arm_sin_f32+0x20>
 801cde6:	ee17 3a90 	vmov	r3, s15
 801cdea:	3b01      	subs	r3, #1
 801cdec:	ee07 3a90 	vmov	s15, r3
 801cdf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cdf4:	eddf 6a17 	vldr	s13, [pc, #92]	; 801ce54 <arm_sin_f32+0x84>
 801cdf8:	ee70 7a67 	vsub.f32	s15, s0, s15
 801cdfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ce00:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801ce04:	ee17 3a10 	vmov	r3, s14
 801ce08:	b29b      	uxth	r3, r3
 801ce0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce0e:	d21a      	bcs.n	801ce46 <arm_sin_f32+0x76>
 801ce10:	ee07 3a10 	vmov	s14, r3
 801ce14:	1c59      	adds	r1, r3, #1
 801ce16:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801ce1a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ce1e:	4a0e      	ldr	r2, [pc, #56]	; (801ce58 <arm_sin_f32+0x88>)
 801ce20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ce24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ce28:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ce2c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ce30:	edd3 6a00 	vldr	s13, [r3]
 801ce34:	ed92 7a00 	vldr	s14, [r2]
 801ce38:	ee20 0a26 	vmul.f32	s0, s0, s13
 801ce3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ce40:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ce44:	4770      	bx	lr
 801ce46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ce4a:	2101      	movs	r1, #1
 801ce4c:	2300      	movs	r3, #0
 801ce4e:	e7e6      	b.n	801ce1e <arm_sin_f32+0x4e>
 801ce50:	3e22f983 	.word	0x3e22f983
 801ce54:	44000000 	.word	0x44000000
 801ce58:	08036700 	.word	0x08036700

0801ce5c <__itoa>:
 801ce5c:	1e93      	subs	r3, r2, #2
 801ce5e:	2b22      	cmp	r3, #34	; 0x22
 801ce60:	b510      	push	{r4, lr}
 801ce62:	460c      	mov	r4, r1
 801ce64:	d904      	bls.n	801ce70 <__itoa+0x14>
 801ce66:	2300      	movs	r3, #0
 801ce68:	700b      	strb	r3, [r1, #0]
 801ce6a:	461c      	mov	r4, r3
 801ce6c:	4620      	mov	r0, r4
 801ce6e:	bd10      	pop	{r4, pc}
 801ce70:	2a0a      	cmp	r2, #10
 801ce72:	d109      	bne.n	801ce88 <__itoa+0x2c>
 801ce74:	2800      	cmp	r0, #0
 801ce76:	da07      	bge.n	801ce88 <__itoa+0x2c>
 801ce78:	232d      	movs	r3, #45	; 0x2d
 801ce7a:	700b      	strb	r3, [r1, #0]
 801ce7c:	4240      	negs	r0, r0
 801ce7e:	2101      	movs	r1, #1
 801ce80:	4421      	add	r1, r4
 801ce82:	f000 f805 	bl	801ce90 <__utoa>
 801ce86:	e7f1      	b.n	801ce6c <__itoa+0x10>
 801ce88:	2100      	movs	r1, #0
 801ce8a:	e7f9      	b.n	801ce80 <__itoa+0x24>

0801ce8c <itoa>:
 801ce8c:	f7ff bfe6 	b.w	801ce5c <__itoa>

0801ce90 <__utoa>:
 801ce90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce92:	4c1f      	ldr	r4, [pc, #124]	; (801cf10 <__utoa+0x80>)
 801ce94:	b08b      	sub	sp, #44	; 0x2c
 801ce96:	4605      	mov	r5, r0
 801ce98:	460b      	mov	r3, r1
 801ce9a:	466e      	mov	r6, sp
 801ce9c:	f104 0c20 	add.w	ip, r4, #32
 801cea0:	6820      	ldr	r0, [r4, #0]
 801cea2:	6861      	ldr	r1, [r4, #4]
 801cea4:	4637      	mov	r7, r6
 801cea6:	c703      	stmia	r7!, {r0, r1}
 801cea8:	3408      	adds	r4, #8
 801ceaa:	4564      	cmp	r4, ip
 801ceac:	463e      	mov	r6, r7
 801ceae:	d1f7      	bne.n	801cea0 <__utoa+0x10>
 801ceb0:	7921      	ldrb	r1, [r4, #4]
 801ceb2:	7139      	strb	r1, [r7, #4]
 801ceb4:	1e91      	subs	r1, r2, #2
 801ceb6:	6820      	ldr	r0, [r4, #0]
 801ceb8:	6038      	str	r0, [r7, #0]
 801ceba:	2922      	cmp	r1, #34	; 0x22
 801cebc:	f04f 0100 	mov.w	r1, #0
 801cec0:	d904      	bls.n	801cecc <__utoa+0x3c>
 801cec2:	7019      	strb	r1, [r3, #0]
 801cec4:	460b      	mov	r3, r1
 801cec6:	4618      	mov	r0, r3
 801cec8:	b00b      	add	sp, #44	; 0x2c
 801ceca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cecc:	1e58      	subs	r0, r3, #1
 801cece:	4684      	mov	ip, r0
 801ced0:	fbb5 f7f2 	udiv	r7, r5, r2
 801ced4:	fb02 5617 	mls	r6, r2, r7, r5
 801ced8:	3628      	adds	r6, #40	; 0x28
 801ceda:	446e      	add	r6, sp
 801cedc:	460c      	mov	r4, r1
 801cede:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801cee2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801cee6:	462e      	mov	r6, r5
 801cee8:	42b2      	cmp	r2, r6
 801ceea:	f101 0101 	add.w	r1, r1, #1
 801ceee:	463d      	mov	r5, r7
 801cef0:	d9ee      	bls.n	801ced0 <__utoa+0x40>
 801cef2:	2200      	movs	r2, #0
 801cef4:	545a      	strb	r2, [r3, r1]
 801cef6:	1919      	adds	r1, r3, r4
 801cef8:	1aa5      	subs	r5, r4, r2
 801cefa:	42aa      	cmp	r2, r5
 801cefc:	dae3      	bge.n	801cec6 <__utoa+0x36>
 801cefe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801cf02:	780e      	ldrb	r6, [r1, #0]
 801cf04:	7006      	strb	r6, [r0, #0]
 801cf06:	3201      	adds	r2, #1
 801cf08:	f801 5901 	strb.w	r5, [r1], #-1
 801cf0c:	e7f4      	b.n	801cef8 <__utoa+0x68>
 801cf0e:	bf00      	nop
 801cf10:	08036f04 	.word	0x08036f04

0801cf14 <memset>:
 801cf14:	4402      	add	r2, r0
 801cf16:	4603      	mov	r3, r0
 801cf18:	4293      	cmp	r3, r2
 801cf1a:	d100      	bne.n	801cf1e <memset+0xa>
 801cf1c:	4770      	bx	lr
 801cf1e:	f803 1b01 	strb.w	r1, [r3], #1
 801cf22:	e7f9      	b.n	801cf18 <memset+0x4>

0801cf24 <__libc_init_array>:
 801cf24:	b570      	push	{r4, r5, r6, lr}
 801cf26:	4d0d      	ldr	r5, [pc, #52]	; (801cf5c <__libc_init_array+0x38>)
 801cf28:	4c0d      	ldr	r4, [pc, #52]	; (801cf60 <__libc_init_array+0x3c>)
 801cf2a:	1b64      	subs	r4, r4, r5
 801cf2c:	10a4      	asrs	r4, r4, #2
 801cf2e:	2600      	movs	r6, #0
 801cf30:	42a6      	cmp	r6, r4
 801cf32:	d109      	bne.n	801cf48 <__libc_init_array+0x24>
 801cf34:	4d0b      	ldr	r5, [pc, #44]	; (801cf64 <__libc_init_array+0x40>)
 801cf36:	4c0c      	ldr	r4, [pc, #48]	; (801cf68 <__libc_init_array+0x44>)
 801cf38:	f002 fa86 	bl	801f448 <_init>
 801cf3c:	1b64      	subs	r4, r4, r5
 801cf3e:	10a4      	asrs	r4, r4, #2
 801cf40:	2600      	movs	r6, #0
 801cf42:	42a6      	cmp	r6, r4
 801cf44:	d105      	bne.n	801cf52 <__libc_init_array+0x2e>
 801cf46:	bd70      	pop	{r4, r5, r6, pc}
 801cf48:	f855 3b04 	ldr.w	r3, [r5], #4
 801cf4c:	4798      	blx	r3
 801cf4e:	3601      	adds	r6, #1
 801cf50:	e7ee      	b.n	801cf30 <__libc_init_array+0xc>
 801cf52:	f855 3b04 	ldr.w	r3, [r5], #4
 801cf56:	4798      	blx	r3
 801cf58:	3601      	adds	r6, #1
 801cf5a:	e7f2      	b.n	801cf42 <__libc_init_array+0x1e>
 801cf5c:	08038340 	.word	0x08038340
 801cf60:	08038340 	.word	0x08038340
 801cf64:	08038340 	.word	0x08038340
 801cf68:	08038344 	.word	0x08038344

0801cf6c <memcpy>:
 801cf6c:	440a      	add	r2, r1
 801cf6e:	4291      	cmp	r1, r2
 801cf70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801cf74:	d100      	bne.n	801cf78 <memcpy+0xc>
 801cf76:	4770      	bx	lr
 801cf78:	b510      	push	{r4, lr}
 801cf7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cf7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cf82:	4291      	cmp	r1, r2
 801cf84:	d1f9      	bne.n	801cf7a <memcpy+0xe>
 801cf86:	bd10      	pop	{r4, pc}

0801cf88 <frexpf>:
 801cf88:	ee10 3a10 	vmov	r3, s0
 801cf8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801cf90:	2100      	movs	r1, #0
 801cf92:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801cf96:	6001      	str	r1, [r0, #0]
 801cf98:	da19      	bge.n	801cfce <frexpf+0x46>
 801cf9a:	b1c2      	cbz	r2, 801cfce <frexpf+0x46>
 801cf9c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801cfa0:	d10a      	bne.n	801cfb8 <frexpf+0x30>
 801cfa2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801cfd0 <frexpf+0x48>
 801cfa6:	ee60 7a27 	vmul.f32	s15, s0, s15
 801cfaa:	f06f 0118 	mvn.w	r1, #24
 801cfae:	ee17 3a90 	vmov	r3, s15
 801cfb2:	6001      	str	r1, [r0, #0]
 801cfb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801cfb8:	6801      	ldr	r1, [r0, #0]
 801cfba:	15d2      	asrs	r2, r2, #23
 801cfbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cfc0:	3a7e      	subs	r2, #126	; 0x7e
 801cfc2:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 801cfc6:	4411      	add	r1, r2
 801cfc8:	ee00 3a10 	vmov	s0, r3
 801cfcc:	6001      	str	r1, [r0, #0]
 801cfce:	4770      	bx	lr
 801cfd0:	4c000000 	.word	0x4c000000

0801cfd4 <expf>:
 801cfd4:	ee10 2a10 	vmov	r2, s0
 801cfd8:	f240 412a 	movw	r1, #1066	; 0x42a
 801cfdc:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801cfe0:	428b      	cmp	r3, r1
 801cfe2:	b430      	push	{r4, r5}
 801cfe4:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801cfe8:	d92a      	bls.n	801d040 <expf+0x6c>
 801cfea:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801cfee:	d058      	beq.n	801d0a2 <expf+0xce>
 801cff0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801cff4:	d303      	bcc.n	801cffe <expf+0x2a>
 801cff6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801cffa:	bc30      	pop	{r4, r5}
 801cffc:	4770      	bx	lr
 801cffe:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801d0a8 <expf+0xd4>
 801d002:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d00a:	dd03      	ble.n	801d014 <expf+0x40>
 801d00c:	bc30      	pop	{r4, r5}
 801d00e:	2000      	movs	r0, #0
 801d010:	f000 bca8 	b.w	801d964 <__math_oflowf>
 801d014:	eddf 7a25 	vldr	s15, [pc, #148]	; 801d0ac <expf+0xd8>
 801d018:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d020:	d503      	bpl.n	801d02a <expf+0x56>
 801d022:	bc30      	pop	{r4, r5}
 801d024:	2000      	movs	r0, #0
 801d026:	f000 bc91 	b.w	801d94c <__math_uflowf>
 801d02a:	eddf 7a21 	vldr	s15, [pc, #132]	; 801d0b0 <expf+0xdc>
 801d02e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d036:	d503      	bpl.n	801d040 <expf+0x6c>
 801d038:	bc30      	pop	{r4, r5}
 801d03a:	2000      	movs	r0, #0
 801d03c:	f000 bc8c 	b.w	801d958 <__math_may_uflowf>
 801d040:	4b1c      	ldr	r3, [pc, #112]	; (801d0b4 <expf+0xe0>)
 801d042:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801d046:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801d04a:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801d04e:	eeb0 7b44 	vmov.f64	d7, d4
 801d052:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d056:	ee17 0a10 	vmov	r0, s14
 801d05a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801d05e:	f000 021f 	and.w	r2, r0, #31
 801d062:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801d066:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801d06a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d06e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801d072:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801d076:	eea5 6b07 	vfma.f64	d6, d5, d7
 801d07a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801d07e:	684d      	ldr	r5, [r1, #4]
 801d080:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801d084:	2100      	movs	r1, #0
 801d086:	190a      	adds	r2, r1, r4
 801d088:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801d08c:	eea5 0b07 	vfma.f64	d0, d5, d7
 801d090:	ec43 2b17 	vmov	d7, r2, r3
 801d094:	eea6 0b04 	vfma.f64	d0, d6, d4
 801d098:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d09c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d0a0:	e7ab      	b.n	801cffa <expf+0x26>
 801d0a2:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801d0b8 <expf+0xe4>
 801d0a6:	e7a8      	b.n	801cffa <expf+0x26>
 801d0a8:	42b17217 	.word	0x42b17217
 801d0ac:	c2cff1b4 	.word	0xc2cff1b4
 801d0b0:	c2ce8ecf 	.word	0xc2ce8ecf
 801d0b4:	08036f30 	.word	0x08036f30
 801d0b8:	00000000 	.word	0x00000000

0801d0bc <logf>:
 801d0bc:	ee10 3a10 	vmov	r3, s0
 801d0c0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801d0c4:	b410      	push	{r4}
 801d0c6:	d055      	beq.n	801d174 <logf+0xb8>
 801d0c8:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 801d0cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 801d0d0:	d31a      	bcc.n	801d108 <logf+0x4c>
 801d0d2:	005a      	lsls	r2, r3, #1
 801d0d4:	d104      	bne.n	801d0e0 <logf+0x24>
 801d0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d0da:	2001      	movs	r0, #1
 801d0dc:	f000 bc48 	b.w	801d970 <__math_divzerof>
 801d0e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d0e4:	d043      	beq.n	801d16e <logf+0xb2>
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	db02      	blt.n	801d0f0 <logf+0x34>
 801d0ea:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801d0ee:	d303      	bcc.n	801d0f8 <logf+0x3c>
 801d0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d0f4:	f000 bc4e 	b.w	801d994 <__math_invalidf>
 801d0f8:	eddf 7a20 	vldr	s15, [pc, #128]	; 801d17c <logf+0xc0>
 801d0fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d100:	ee10 3a10 	vmov	r3, s0
 801d104:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 801d108:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 801d10c:	491c      	ldr	r1, [pc, #112]	; (801d180 <logf+0xc4>)
 801d10e:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 801d112:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801d116:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801d11a:	0dd4      	lsrs	r4, r2, #23
 801d11c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801d120:	05e4      	lsls	r4, r4, #23
 801d122:	ed90 6b00 	vldr	d6, [r0]
 801d126:	1b1b      	subs	r3, r3, r4
 801d128:	ee07 3a90 	vmov	s15, r3
 801d12c:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801d130:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801d134:	15d2      	asrs	r2, r2, #23
 801d136:	eea6 0b07 	vfma.f64	d0, d6, d7
 801d13a:	ed90 6b02 	vldr	d6, [r0, #8]
 801d13e:	ee20 4b00 	vmul.f64	d4, d0, d0
 801d142:	ee07 2a90 	vmov	s15, r2
 801d146:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d14a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d14e:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 801d152:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 801d156:	eea5 7b00 	vfma.f64	d7, d5, d0
 801d15a:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801d15e:	ee30 0b06 	vadd.f64	d0, d0, d6
 801d162:	eea5 7b04 	vfma.f64	d7, d5, d4
 801d166:	eea4 0b07 	vfma.f64	d0, d4, d7
 801d16a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d16e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d172:	4770      	bx	lr
 801d174:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801d184 <logf+0xc8>
 801d178:	e7f9      	b.n	801d16e <logf+0xb2>
 801d17a:	bf00      	nop
 801d17c:	4b000000 	.word	0x4b000000
 801d180:	08037078 	.word	0x08037078
 801d184:	00000000 	.word	0x00000000

0801d188 <log2f>:
 801d188:	ee10 2a10 	vmov	r2, s0
 801d18c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801d190:	b410      	push	{r4}
 801d192:	d055      	beq.n	801d240 <log2f+0xb8>
 801d194:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 801d198:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801d19c:	d31a      	bcc.n	801d1d4 <log2f+0x4c>
 801d19e:	0053      	lsls	r3, r2, #1
 801d1a0:	d104      	bne.n	801d1ac <log2f+0x24>
 801d1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d1a6:	2001      	movs	r0, #1
 801d1a8:	f000 bbe2 	b.w	801d970 <__math_divzerof>
 801d1ac:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801d1b0:	d043      	beq.n	801d23a <log2f+0xb2>
 801d1b2:	2a00      	cmp	r2, #0
 801d1b4:	db02      	blt.n	801d1bc <log2f+0x34>
 801d1b6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801d1ba:	d303      	bcc.n	801d1c4 <log2f+0x3c>
 801d1bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d1c0:	f000 bbe8 	b.w	801d994 <__math_invalidf>
 801d1c4:	eddf 7a20 	vldr	s15, [pc, #128]	; 801d248 <log2f+0xc0>
 801d1c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d1cc:	ee10 3a10 	vmov	r3, s0
 801d1d0:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 801d1d4:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 801d1d8:	491c      	ldr	r1, [pc, #112]	; (801d24c <log2f+0xc4>)
 801d1da:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801d1de:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 801d1e2:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 801d1e6:	0ddc      	lsrs	r4, r3, #23
 801d1e8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801d1ec:	05e4      	lsls	r4, r4, #23
 801d1ee:	ed90 5b00 	vldr	d5, [r0]
 801d1f2:	1b12      	subs	r2, r2, r4
 801d1f4:	ee07 2a90 	vmov	s15, r2
 801d1f8:	15db      	asrs	r3, r3, #23
 801d1fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801d1fe:	eea5 6b07 	vfma.f64	d6, d5, d7
 801d202:	ed90 7b02 	vldr	d7, [r0, #8]
 801d206:	ee26 4b06 	vmul.f64	d4, d6, d6
 801d20a:	ee00 3a10 	vmov	s0, r3
 801d20e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801d212:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801d216:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d21a:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 801d21e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d222:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801d226:	eea5 7b04 	vfma.f64	d7, d5, d4
 801d22a:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 801d22e:	eea5 0b06 	vfma.f64	d0, d5, d6
 801d232:	eea4 0b07 	vfma.f64	d0, d4, d7
 801d236:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d23a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d23e:	4770      	bx	lr
 801d240:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801d250 <log2f+0xc8>
 801d244:	e7f9      	b.n	801d23a <log2f+0xb2>
 801d246:	bf00      	nop
 801d248:	4b000000 	.word	0x4b000000
 801d24c:	08037a08 	.word	0x08037a08
	...

0801d258 <exp>:
 801d258:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 801d25a:	ee10 3a90 	vmov	r3, s1
 801d25e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801d262:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801d266:	18a2      	adds	r2, r4, r2
 801d268:	2a3e      	cmp	r2, #62	; 0x3e
 801d26a:	ee10 1a10 	vmov	r1, s0
 801d26e:	d922      	bls.n	801d2b6 <exp+0x5e>
 801d270:	2a00      	cmp	r2, #0
 801d272:	da06      	bge.n	801d282 <exp+0x2a>
 801d274:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801d278:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d27c:	b004      	add	sp, #16
 801d27e:	bcf0      	pop	{r4, r5, r6, r7}
 801d280:	4770      	bx	lr
 801d282:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 801d286:	f04f 0000 	mov.w	r0, #0
 801d28a:	d913      	bls.n	801d2b4 <exp+0x5c>
 801d28c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 801d290:	bf08      	it	eq
 801d292:	4281      	cmpeq	r1, r0
 801d294:	f000 80a0 	beq.w	801d3d8 <exp+0x180>
 801d298:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801d29c:	4294      	cmp	r4, r2
 801d29e:	d0e9      	beq.n	801d274 <exp+0x1c>
 801d2a0:	4283      	cmp	r3, r0
 801d2a2:	da03      	bge.n	801d2ac <exp+0x54>
 801d2a4:	b004      	add	sp, #16
 801d2a6:	bcf0      	pop	{r4, r5, r6, r7}
 801d2a8:	f000 b8c6 	b.w	801d438 <__math_uflow>
 801d2ac:	b004      	add	sp, #16
 801d2ae:	bcf0      	pop	{r4, r5, r6, r7}
 801d2b0:	f000 b8ca 	b.w	801d448 <__math_oflow>
 801d2b4:	4604      	mov	r4, r0
 801d2b6:	4950      	ldr	r1, [pc, #320]	; (801d3f8 <exp+0x1a0>)
 801d2b8:	ed91 6b02 	vldr	d6, [r1, #8]
 801d2bc:	ed91 5b00 	vldr	d5, [r1]
 801d2c0:	eeb0 7b46 	vmov.f64	d7, d6
 801d2c4:	eea5 7b00 	vfma.f64	d7, d5, d0
 801d2c8:	ee17 5a10 	vmov	r5, s14
 801d2cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d2d0:	ed91 6b04 	vldr	d6, [r1, #16]
 801d2d4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801d2d8:	eea6 0b07 	vfma.f64	d0, d6, d7
 801d2dc:	ed91 6b06 	vldr	d6, [r1, #24]
 801d2e0:	18d8      	adds	r0, r3, r3
 801d2e2:	f100 030f 	add.w	r3, r0, #15
 801d2e6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801d2ea:	eea6 0b07 	vfma.f64	d0, d6, d7
 801d2ee:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 801d2f2:	ee20 7b00 	vmul.f64	d7, d0, d0
 801d2f6:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 801d2fa:	ed91 4b08 	vldr	d4, [r1, #32]
 801d2fe:	ee30 6b06 	vadd.f64	d6, d0, d6
 801d302:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801d306:	eea3 4b00 	vfma.f64	d4, d3, d0
 801d30a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 801d30e:	eea4 6b07 	vfma.f64	d6, d4, d7
 801d312:	ee27 7b07 	vmul.f64	d7, d7, d7
 801d316:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 801d31a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 801d31e:	f8d2 c004 	ldr.w	ip, [r2, #4]
 801d322:	eea3 4b00 	vfma.f64	d4, d3, d0
 801d326:	2600      	movs	r6, #0
 801d328:	19f2      	adds	r2, r6, r7
 801d32a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 801d32e:	eea7 6b04 	vfma.f64	d6, d7, d4
 801d332:	2c00      	cmp	r4, #0
 801d334:	d14b      	bne.n	801d3ce <exp+0x176>
 801d336:	42b5      	cmp	r5, r6
 801d338:	db10      	blt.n	801d35c <exp+0x104>
 801d33a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801d33e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 801d3e0 <exp+0x188>
 801d342:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801d346:	4610      	mov	r0, r2
 801d348:	ec41 0b10 	vmov	d0, r0, r1
 801d34c:	eea6 0b00 	vfma.f64	d0, d6, d0
 801d350:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d354:	b004      	add	sp, #16
 801d356:	bcf0      	pop	{r4, r5, r6, r7}
 801d358:	f000 b88a 	b.w	801d470 <__math_check_oflow>
 801d35c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801d360:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801d364:	4610      	mov	r0, r2
 801d366:	ec41 0b17 	vmov	d7, r0, r1
 801d36a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801d36e:	ee26 6b07 	vmul.f64	d6, d6, d7
 801d372:	ee37 5b06 	vadd.f64	d5, d7, d6
 801d376:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801d37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d37e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801d3e8 <exp+0x190>
 801d382:	d51e      	bpl.n	801d3c2 <exp+0x16a>
 801d384:	ee35 3b04 	vadd.f64	d3, d5, d4
 801d388:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d38c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d390:	ee34 6b43 	vsub.f64	d6, d4, d3
 801d394:	ee36 6b05 	vadd.f64	d6, d6, d5
 801d398:	ee36 6b07 	vadd.f64	d6, d6, d7
 801d39c:	ee36 6b03 	vadd.f64	d6, d6, d3
 801d3a0:	ee36 5b44 	vsub.f64	d5, d6, d4
 801d3a4:	eeb5 5b40 	vcmp.f64	d5, #0.0
 801d3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3ac:	d101      	bne.n	801d3b2 <exp+0x15a>
 801d3ae:	ed9f 5b10 	vldr	d5, [pc, #64]	; 801d3f0 <exp+0x198>
 801d3b2:	ed8d 0b00 	vstr	d0, [sp]
 801d3b6:	ed9d 7b00 	vldr	d7, [sp]
 801d3ba:	ee27 7b00 	vmul.f64	d7, d7, d0
 801d3be:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d3c2:	ee25 0b00 	vmul.f64	d0, d5, d0
 801d3c6:	b004      	add	sp, #16
 801d3c8:	bcf0      	pop	{r4, r5, r6, r7}
 801d3ca:	f000 b845 	b.w	801d458 <__math_check_uflow>
 801d3ce:	ec43 2b10 	vmov	d0, r2, r3
 801d3d2:	eea6 0b00 	vfma.f64	d0, d6, d0
 801d3d6:	e751      	b.n	801d27c <exp+0x24>
 801d3d8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801d3f0 <exp+0x198>
 801d3dc:	e74e      	b.n	801d27c <exp+0x24>
 801d3de:	bf00      	nop
 801d3e0:	00000000 	.word	0x00000000
 801d3e4:	7f000000 	.word	0x7f000000
 801d3e8:	00000000 	.word	0x00000000
 801d3ec:	00100000 	.word	0x00100000
	...
 801d3f8:	08037198 	.word	0x08037198

0801d3fc <with_errno>:
 801d3fc:	b513      	push	{r0, r1, r4, lr}
 801d3fe:	4604      	mov	r4, r0
 801d400:	ed8d 0b00 	vstr	d0, [sp]
 801d404:	f002 f81a 	bl	801f43c <__errno>
 801d408:	ed9d 0b00 	vldr	d0, [sp]
 801d40c:	6004      	str	r4, [r0, #0]
 801d40e:	b002      	add	sp, #8
 801d410:	bd10      	pop	{r4, pc}

0801d412 <xflow>:
 801d412:	b082      	sub	sp, #8
 801d414:	b158      	cbz	r0, 801d42e <xflow+0x1c>
 801d416:	eeb1 7b40 	vneg.f64	d7, d0
 801d41a:	ed8d 7b00 	vstr	d7, [sp]
 801d41e:	ed9d 7b00 	vldr	d7, [sp]
 801d422:	2022      	movs	r0, #34	; 0x22
 801d424:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d428:	b002      	add	sp, #8
 801d42a:	f7ff bfe7 	b.w	801d3fc <with_errno>
 801d42e:	eeb0 7b40 	vmov.f64	d7, d0
 801d432:	e7f2      	b.n	801d41a <xflow+0x8>
 801d434:	0000      	movs	r0, r0
	...

0801d438 <__math_uflow>:
 801d438:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d440 <__math_uflow+0x8>
 801d43c:	f7ff bfe9 	b.w	801d412 <xflow>
 801d440:	00000000 	.word	0x00000000
 801d444:	10000000 	.word	0x10000000

0801d448 <__math_oflow>:
 801d448:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d450 <__math_oflow+0x8>
 801d44c:	f7ff bfe1 	b.w	801d412 <xflow>
 801d450:	00000000 	.word	0x00000000
 801d454:	70000000 	.word	0x70000000

0801d458 <__math_check_uflow>:
 801d458:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801d45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d460:	d102      	bne.n	801d468 <__math_check_uflow+0x10>
 801d462:	2022      	movs	r0, #34	; 0x22
 801d464:	f7ff bfca 	b.w	801d3fc <with_errno>
 801d468:	4770      	bx	lr
 801d46a:	0000      	movs	r0, r0
 801d46c:	0000      	movs	r0, r0
	...

0801d470 <__math_check_oflow>:
 801d470:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801d490 <__math_check_oflow+0x20>
 801d474:	eeb0 7bc0 	vabs.f64	d7, d0
 801d478:	eeb4 7b46 	vcmp.f64	d7, d6
 801d47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d480:	dd02      	ble.n	801d488 <__math_check_oflow+0x18>
 801d482:	2022      	movs	r0, #34	; 0x22
 801d484:	f7ff bfba 	b.w	801d3fc <with_errno>
 801d488:	4770      	bx	lr
 801d48a:	bf00      	nop
 801d48c:	f3af 8000 	nop.w
 801d490:	ffffffff 	.word	0xffffffff
 801d494:	7fefffff 	.word	0x7fefffff

0801d498 <checkint>:
 801d498:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801d49c:	2b7e      	cmp	r3, #126	; 0x7e
 801d49e:	dd10      	ble.n	801d4c2 <checkint+0x2a>
 801d4a0:	2b96      	cmp	r3, #150	; 0x96
 801d4a2:	dc0c      	bgt.n	801d4be <checkint+0x26>
 801d4a4:	2201      	movs	r2, #1
 801d4a6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801d4aa:	fa02 f303 	lsl.w	r3, r2, r3
 801d4ae:	1e5a      	subs	r2, r3, #1
 801d4b0:	4202      	tst	r2, r0
 801d4b2:	d106      	bne.n	801d4c2 <checkint+0x2a>
 801d4b4:	4203      	tst	r3, r0
 801d4b6:	bf0c      	ite	eq
 801d4b8:	2002      	moveq	r0, #2
 801d4ba:	2001      	movne	r0, #1
 801d4bc:	4770      	bx	lr
 801d4be:	2002      	movs	r0, #2
 801d4c0:	4770      	bx	lr
 801d4c2:	2000      	movs	r0, #0
 801d4c4:	4770      	bx	lr
	...

0801d4c8 <powf>:
 801d4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d4ca:	ee10 1a10 	vmov	r1, s0
 801d4ce:	ee10 4a90 	vmov	r4, s1
 801d4d2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801d4d6:	0062      	lsls	r2, r4, #1
 801d4d8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801d4dc:	eef0 7a40 	vmov.f32	s15, s0
 801d4e0:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 801d4e4:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 801d4e8:	d252      	bcs.n	801d590 <powf+0xc8>
 801d4ea:	4298      	cmp	r0, r3
 801d4ec:	d252      	bcs.n	801d594 <powf+0xcc>
 801d4ee:	2000      	movs	r0, #0
 801d4f0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 801d4f4:	4a9e      	ldr	r2, [pc, #632]	; (801d770 <powf+0x2a8>)
 801d4f6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801d4fa:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 801d4fe:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 801d502:	0ddb      	lsrs	r3, r3, #23
 801d504:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 801d508:	05db      	lsls	r3, r3, #23
 801d50a:	ed94 5b00 	vldr	d5, [r4]
 801d50e:	1ac9      	subs	r1, r1, r3
 801d510:	ee07 1a90 	vmov	s15, r1
 801d514:	15db      	asrs	r3, r3, #23
 801d516:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801d51a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801d51e:	ed94 5b02 	vldr	d5, [r4, #8]
 801d522:	ee26 2b06 	vmul.f64	d2, d6, d6
 801d526:	ee22 1b02 	vmul.f64	d1, d2, d2
 801d52a:	ee07 3a90 	vmov	s15, r3
 801d52e:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 801d532:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d536:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d53a:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 801d53e:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 801d542:	eea6 3b05 	vfma.f64	d3, d6, d5
 801d546:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 801d54a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801d54e:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 801d552:	eea6 7b04 	vfma.f64	d7, d6, d4
 801d556:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 801d55a:	eea2 7b05 	vfma.f64	d7, d2, d5
 801d55e:	eea3 7b01 	vfma.f64	d7, d3, d1
 801d562:	ee26 6b07 	vmul.f64	d6, d6, d7
 801d566:	ee16 3a90 	vmov	r3, s13
 801d56a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801d56e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801d572:	429a      	cmp	r2, r3
 801d574:	f0c0 80b0 	bcc.w	801d6d8 <powf+0x210>
 801d578:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801d750 <powf+0x288>
 801d57c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d584:	dd78      	ble.n	801d678 <powf+0x1b0>
 801d586:	b003      	add	sp, #12
 801d588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d58c:	f000 b9ea 	b.w	801d964 <__math_oflowf>
 801d590:	4298      	cmp	r0, r3
 801d592:	d32d      	bcc.n	801d5f0 <powf+0x128>
 801d594:	b952      	cbnz	r2, 801d5ac <powf+0xe4>
 801d596:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 801d59a:	0049      	lsls	r1, r1, #1
 801d59c:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 801d5a0:	f240 80c8 	bls.w	801d734 <powf+0x26c>
 801d5a4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 801d5a8:	b003      	add	sp, #12
 801d5aa:	bd30      	pop	{r4, r5, pc}
 801d5ac:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801d5b0:	d105      	bne.n	801d5be <powf+0xf6>
 801d5b2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801d5b6:	0064      	lsls	r4, r4, #1
 801d5b8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801d5bc:	e7f0      	b.n	801d5a0 <powf+0xd8>
 801d5be:	0049      	lsls	r1, r1, #1
 801d5c0:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 801d5c4:	d8ee      	bhi.n	801d5a4 <powf+0xdc>
 801d5c6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801d5ca:	d1eb      	bne.n	801d5a4 <powf+0xdc>
 801d5cc:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 801d5d0:	f000 80b0 	beq.w	801d734 <powf+0x26c>
 801d5d4:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 801d5d8:	ea6f 0404 	mvn.w	r4, r4
 801d5dc:	bf34      	ite	cc
 801d5de:	2100      	movcc	r1, #0
 801d5e0:	2101      	movcs	r1, #1
 801d5e2:	0fe4      	lsrs	r4, r4, #31
 801d5e4:	42a1      	cmp	r1, r4
 801d5e6:	f040 80a8 	bne.w	801d73a <powf+0x272>
 801d5ea:	ee20 0aa0 	vmul.f32	s0, s1, s1
 801d5ee:	e7db      	b.n	801d5a8 <powf+0xe0>
 801d5f0:	004d      	lsls	r5, r1, #1
 801d5f2:	1e6a      	subs	r2, r5, #1
 801d5f4:	429a      	cmp	r2, r3
 801d5f6:	d31c      	bcc.n	801d632 <powf+0x16a>
 801d5f8:	2900      	cmp	r1, #0
 801d5fa:	ee20 0a00 	vmul.f32	s0, s0, s0
 801d5fe:	da0f      	bge.n	801d620 <powf+0x158>
 801d600:	ee10 0a90 	vmov	r0, s1
 801d604:	f7ff ff48 	bl	801d498 <checkint>
 801d608:	2801      	cmp	r0, #1
 801d60a:	d109      	bne.n	801d620 <powf+0x158>
 801d60c:	eeb1 0a40 	vneg.f32	s0, s0
 801d610:	b945      	cbnz	r5, 801d624 <powf+0x15c>
 801d612:	2c00      	cmp	r4, #0
 801d614:	dac8      	bge.n	801d5a8 <powf+0xe0>
 801d616:	b003      	add	sp, #12
 801d618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d61c:	f000 b9a8 	b.w	801d970 <__math_divzerof>
 801d620:	2000      	movs	r0, #0
 801d622:	e7f5      	b.n	801d610 <powf+0x148>
 801d624:	2c00      	cmp	r4, #0
 801d626:	dabf      	bge.n	801d5a8 <powf+0xe0>
 801d628:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d62c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801d630:	e7ba      	b.n	801d5a8 <powf+0xe0>
 801d632:	2900      	cmp	r1, #0
 801d634:	da1e      	bge.n	801d674 <powf+0x1ac>
 801d636:	ee10 0a90 	vmov	r0, s1
 801d63a:	f7ff ff2d 	bl	801d498 <checkint>
 801d63e:	b920      	cbnz	r0, 801d64a <powf+0x182>
 801d640:	b003      	add	sp, #12
 801d642:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d646:	f000 b9a5 	b.w	801d994 <__math_invalidf>
 801d64a:	1e43      	subs	r3, r0, #1
 801d64c:	4258      	negs	r0, r3
 801d64e:	4158      	adcs	r0, r3
 801d650:	0400      	lsls	r0, r0, #16
 801d652:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801d656:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801d65a:	f4bf af49 	bcs.w	801d4f0 <powf+0x28>
 801d65e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801d774 <powf+0x2ac>
 801d662:	ee27 0a87 	vmul.f32	s0, s15, s14
 801d666:	ee10 3a10 	vmov	r3, s0
 801d66a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d66e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801d672:	e73d      	b.n	801d4f0 <powf+0x28>
 801d674:	2000      	movs	r0, #0
 801d676:	e7ee      	b.n	801d656 <powf+0x18e>
 801d678:	ed9f 7b37 	vldr	d7, [pc, #220]	; 801d758 <powf+0x290>
 801d67c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d684:	dd10      	ble.n	801d6a8 <powf+0x1e0>
 801d686:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801d68a:	2800      	cmp	r0, #0
 801d68c:	d158      	bne.n	801d740 <powf+0x278>
 801d68e:	9300      	str	r3, [sp, #0]
 801d690:	eddd 7a00 	vldr	s15, [sp]
 801d694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d698:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d69c:	eef4 7a47 	vcmp.f32	s15, s14
 801d6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6a4:	f47f af6f 	bne.w	801d586 <powf+0xbe>
 801d6a8:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801d760 <powf+0x298>
 801d6ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6b4:	d804      	bhi.n	801d6c0 <powf+0x1f8>
 801d6b6:	b003      	add	sp, #12
 801d6b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d6bc:	f000 b946 	b.w	801d94c <__math_uflowf>
 801d6c0:	ed9f 7b29 	vldr	d7, [pc, #164]	; 801d768 <powf+0x2a0>
 801d6c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6cc:	d504      	bpl.n	801d6d8 <powf+0x210>
 801d6ce:	b003      	add	sp, #12
 801d6d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d6d4:	f000 b940 	b.w	801d958 <__math_may_uflowf>
 801d6d8:	4b27      	ldr	r3, [pc, #156]	; (801d778 <powf+0x2b0>)
 801d6da:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801d6de:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 801d6e2:	ee36 7b05 	vadd.f64	d7, d6, d5
 801d6e6:	ee17 2a10 	vmov	r2, s14
 801d6ea:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d6ee:	f002 011f 	and.w	r1, r2, #31
 801d6f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 801d6f6:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801d6fa:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d6fe:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801d702:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801d706:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801d70a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d70e:	686d      	ldr	r5, [r5, #4]
 801d710:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801d714:	1882      	adds	r2, r0, r2
 801d716:	2300      	movs	r3, #0
 801d718:	1918      	adds	r0, r3, r4
 801d71a:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 801d71e:	eea7 0b05 	vfma.f64	d0, d7, d5
 801d722:	ec41 0b17 	vmov	d7, r0, r1
 801d726:	eea6 0b04 	vfma.f64	d0, d6, d4
 801d72a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d72e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d732:	e739      	b.n	801d5a8 <powf+0xe0>
 801d734:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d738:	e736      	b.n	801d5a8 <powf+0xe0>
 801d73a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801d77c <powf+0x2b4>
 801d73e:	e733      	b.n	801d5a8 <powf+0xe0>
 801d740:	9301      	str	r3, [sp, #4]
 801d742:	eddd 7a01 	vldr	s15, [sp, #4]
 801d746:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d74a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d74e:	e7a5      	b.n	801d69c <powf+0x1d4>
 801d750:	ffd1d571 	.word	0xffd1d571
 801d754:	405fffff 	.word	0x405fffff
 801d758:	ffa3aae2 	.word	0xffa3aae2
 801d75c:	405fffff 	.word	0x405fffff
 801d760:	00000000 	.word	0x00000000
 801d764:	c062c000 	.word	0xc062c000
 801d768:	00000000 	.word	0x00000000
 801d76c:	c062a000 	.word	0xc062a000
 801d770:	08038190 	.word	0x08038190
 801d774:	4b000000 	.word	0x4b000000
 801d778:	08036f30 	.word	0x08036f30
 801d77c:	00000000 	.word	0x00000000

0801d780 <sinf_poly>:
 801d780:	07cb      	lsls	r3, r1, #31
 801d782:	d412      	bmi.n	801d7aa <sinf_poly+0x2a>
 801d784:	ee21 5b00 	vmul.f64	d5, d1, d0
 801d788:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 801d78c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801d790:	eea6 7b01 	vfma.f64	d7, d6, d1
 801d794:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 801d798:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d79c:	eea6 0b05 	vfma.f64	d0, d6, d5
 801d7a0:	eea7 0b01 	vfma.f64	d0, d7, d1
 801d7a4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d7a8:	4770      	bx	lr
 801d7aa:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801d7ae:	ee21 5b01 	vmul.f64	d5, d1, d1
 801d7b2:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801d7b6:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801d7ba:	eea1 7b06 	vfma.f64	d7, d1, d6
 801d7be:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 801d7c2:	eea1 0b06 	vfma.f64	d0, d1, d6
 801d7c6:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 801d7ca:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d7ce:	eea5 0b06 	vfma.f64	d0, d5, d6
 801d7d2:	e7e5      	b.n	801d7a0 <sinf_poly+0x20>
 801d7d4:	0000      	movs	r0, r0
	...

0801d7d8 <cosf>:
 801d7d8:	b538      	push	{r3, r4, r5, lr}
 801d7da:	ee10 4a10 	vmov	r4, s0
 801d7de:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801d7e2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801d7e6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801d7ea:	d21f      	bcs.n	801d82c <cosf+0x54>
 801d7ec:	ee27 7b07 	vmul.f64	d7, d7, d7
 801d7f0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801d7f4:	f0c0 8086 	bcc.w	801d904 <cosf+0x12c>
 801d7f8:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d7fc:	4b46      	ldr	r3, [pc, #280]	; (801d918 <cosf+0x140>)
 801d7fe:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 801d802:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 801d806:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 801d80a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d80e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 801d812:	eea7 0b05 	vfma.f64	d0, d7, d5
 801d816:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 801d81a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d81e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801d822:	eea6 0b07 	vfma.f64	d0, d6, d7
 801d826:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d82a:	bd38      	pop	{r3, r4, r5, pc}
 801d82c:	f240 422e 	movw	r2, #1070	; 0x42e
 801d830:	4293      	cmp	r3, r2
 801d832:	d829      	bhi.n	801d888 <cosf+0xb0>
 801d834:	4b38      	ldr	r3, [pc, #224]	; (801d918 <cosf+0x140>)
 801d836:	ed93 6b08 	vldr	d6, [r3, #32]
 801d83a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801d83e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801d842:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801d846:	ee16 1a90 	vmov	r1, s13
 801d84a:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801d84e:	1609      	asrs	r1, r1, #24
 801d850:	ee06 1a90 	vmov	s13, r1
 801d854:	f001 0203 	and.w	r2, r1, #3
 801d858:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d85c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801d860:	ed92 0b00 	vldr	d0, [r2]
 801d864:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 801d868:	f011 0f02 	tst.w	r1, #2
 801d86c:	bf08      	it	eq
 801d86e:	4618      	moveq	r0, r3
 801d870:	f081 0101 	eor.w	r1, r1, #1
 801d874:	eea5 7b46 	vfms.f64	d7, d5, d6
 801d878:	ee27 1b07 	vmul.f64	d1, d7, d7
 801d87c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d880:	ee27 0b00 	vmul.f64	d0, d7, d0
 801d884:	f7ff bf7c 	b.w	801d780 <sinf_poly>
 801d888:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801d88c:	d236      	bcs.n	801d8fc <cosf+0x124>
 801d88e:	4a23      	ldr	r2, [pc, #140]	; (801d91c <cosf+0x144>)
 801d890:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801d894:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 801d898:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801d89c:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 801d8a0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801d8a4:	6a2a      	ldr	r2, [r5, #32]
 801d8a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801d8aa:	4083      	lsls	r3, r0
 801d8ac:	fba3 2002 	umull	r2, r0, r3, r2
 801d8b0:	692a      	ldr	r2, [r5, #16]
 801d8b2:	4359      	muls	r1, r3
 801d8b4:	fbe3 0102 	umlal	r0, r1, r3, r2
 801d8b8:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 801d8bc:	0f9d      	lsrs	r5, r3, #30
 801d8be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801d8c2:	1ac9      	subs	r1, r1, r3
 801d8c4:	f7e2 fe9e 	bl	8000604 <__aeabi_l2d>
 801d8c8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801d8cc:	4b12      	ldr	r3, [pc, #72]	; (801d918 <cosf+0x140>)
 801d8ce:	ed9f 0b10 	vldr	d0, [pc, #64]	; 801d910 <cosf+0x138>
 801d8d2:	ec41 0b17 	vmov	d7, r0, r1
 801d8d6:	f004 0203 	and.w	r2, r4, #3
 801d8da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d8de:	f014 0f02 	tst.w	r4, #2
 801d8e2:	ee27 0b00 	vmul.f64	d0, d7, d0
 801d8e6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801d8ea:	ed92 7b00 	vldr	d7, [r2]
 801d8ee:	ee20 1b00 	vmul.f64	d1, d0, d0
 801d8f2:	f085 0101 	eor.w	r1, r5, #1
 801d8f6:	bf08      	it	eq
 801d8f8:	4618      	moveq	r0, r3
 801d8fa:	e7bf      	b.n	801d87c <cosf+0xa4>
 801d8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d900:	f000 b848 	b.w	801d994 <__math_invalidf>
 801d904:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d908:	e78f      	b.n	801d82a <cosf+0x52>
 801d90a:	bf00      	nop
 801d90c:	f3af 8000 	nop.w
 801d910:	54442d18 	.word	0x54442d18
 801d914:	3c1921fb 	.word	0x3c1921fb
 801d918:	08037b88 	.word	0x08037b88
 801d91c:	08037b28 	.word	0x08037b28

0801d920 <with_errnof>:
 801d920:	b513      	push	{r0, r1, r4, lr}
 801d922:	4604      	mov	r4, r0
 801d924:	ed8d 0a01 	vstr	s0, [sp, #4]
 801d928:	f001 fd88 	bl	801f43c <__errno>
 801d92c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801d930:	6004      	str	r4, [r0, #0]
 801d932:	b002      	add	sp, #8
 801d934:	bd10      	pop	{r4, pc}

0801d936 <xflowf>:
 801d936:	b130      	cbz	r0, 801d946 <xflowf+0x10>
 801d938:	eef1 7a40 	vneg.f32	s15, s0
 801d93c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d940:	2022      	movs	r0, #34	; 0x22
 801d942:	f7ff bfed 	b.w	801d920 <with_errnof>
 801d946:	eef0 7a40 	vmov.f32	s15, s0
 801d94a:	e7f7      	b.n	801d93c <xflowf+0x6>

0801d94c <__math_uflowf>:
 801d94c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d954 <__math_uflowf+0x8>
 801d950:	f7ff bff1 	b.w	801d936 <xflowf>
 801d954:	10000000 	.word	0x10000000

0801d958 <__math_may_uflowf>:
 801d958:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d960 <__math_may_uflowf+0x8>
 801d95c:	f7ff bfeb 	b.w	801d936 <xflowf>
 801d960:	1a200000 	.word	0x1a200000

0801d964 <__math_oflowf>:
 801d964:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d96c <__math_oflowf+0x8>
 801d968:	f7ff bfe5 	b.w	801d936 <xflowf>
 801d96c:	70000000 	.word	0x70000000

0801d970 <__math_divzerof>:
 801d970:	ed9f 0a07 	vldr	s0, [pc, #28]	; 801d990 <__math_divzerof+0x20>
 801d974:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801d978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d97c:	2800      	cmp	r0, #0
 801d97e:	f04f 0022 	mov.w	r0, #34	; 0x22
 801d982:	fe47 7a27 	vseleq.f32	s15, s14, s15
 801d986:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801d98a:	f7ff bfc9 	b.w	801d920 <with_errnof>
 801d98e:	bf00      	nop
 801d990:	00000000 	.word	0x00000000

0801d994 <__math_invalidf>:
 801d994:	eef0 7a40 	vmov.f32	s15, s0
 801d998:	ee30 7a40 	vsub.f32	s14, s0, s0
 801d99c:	eef4 7a67 	vcmp.f32	s15, s15
 801d9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9a4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801d9a8:	d602      	bvs.n	801d9b0 <__math_invalidf+0x1c>
 801d9aa:	2021      	movs	r0, #33	; 0x21
 801d9ac:	f7ff bfb8 	b.w	801d920 <with_errnof>
 801d9b0:	4770      	bx	lr

0801d9b2 <fabsf>:
 801d9b2:	ee10 3a10 	vmov	r3, s0
 801d9b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d9ba:	ee00 3a10 	vmov	s0, r3
 801d9be:	4770      	bx	lr

0801d9c0 <tanf>:
 801d9c0:	ee10 3a10 	vmov	r3, s0
 801d9c4:	b507      	push	{r0, r1, r2, lr}
 801d9c6:	4a12      	ldr	r2, [pc, #72]	; (801da10 <tanf+0x50>)
 801d9c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d9cc:	4293      	cmp	r3, r2
 801d9ce:	dc07      	bgt.n	801d9e0 <tanf+0x20>
 801d9d0:	eddf 0a10 	vldr	s1, [pc, #64]	; 801da14 <tanf+0x54>
 801d9d4:	2001      	movs	r0, #1
 801d9d6:	b003      	add	sp, #12
 801d9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d9dc:	f000 b8b8 	b.w	801db50 <__kernel_tanf>
 801d9e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d9e4:	db04      	blt.n	801d9f0 <tanf+0x30>
 801d9e6:	ee30 0a40 	vsub.f32	s0, s0, s0
 801d9ea:	b003      	add	sp, #12
 801d9ec:	f85d fb04 	ldr.w	pc, [sp], #4
 801d9f0:	4668      	mov	r0, sp
 801d9f2:	f000 f9cd 	bl	801dd90 <__ieee754_rem_pio2f>
 801d9f6:	0040      	lsls	r0, r0, #1
 801d9f8:	f000 0002 	and.w	r0, r0, #2
 801d9fc:	eddd 0a01 	vldr	s1, [sp, #4]
 801da00:	ed9d 0a00 	vldr	s0, [sp]
 801da04:	f1c0 0001 	rsb	r0, r0, #1
 801da08:	f000 f8a2 	bl	801db50 <__kernel_tanf>
 801da0c:	e7ed      	b.n	801d9ea <tanf+0x2a>
 801da0e:	bf00      	nop
 801da10:	3f490fda 	.word	0x3f490fda
 801da14:	00000000 	.word	0x00000000

0801da18 <tanhf>:
 801da18:	b538      	push	{r3, r4, r5, lr}
 801da1a:	ee10 5a10 	vmov	r5, s0
 801da1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801da22:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801da26:	ed2d 8b02 	vpush	{d8}
 801da2a:	db0f      	blt.n	801da4c <tanhf+0x34>
 801da2c:	4b2a      	ldr	r3, [pc, #168]	; (801dad8 <tanhf+0xc0>)
 801da2e:	ed93 6a00 	vldr	s12, [r3]
 801da32:	edd3 6a00 	vldr	s13, [r3]
 801da36:	eec6 7a00 	vdiv.f32	s15, s12, s0
 801da3a:	2d00      	cmp	r5, #0
 801da3c:	bfac      	ite	ge
 801da3e:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 801da42:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 801da46:	ecbd 8b02 	vpop	{d8}
 801da4a:	bd38      	pop	{r3, r4, r5, pc}
 801da4c:	4a23      	ldr	r2, [pc, #140]	; (801dadc <tanhf+0xc4>)
 801da4e:	4293      	cmp	r3, r2
 801da50:	dc39      	bgt.n	801dac6 <tanhf+0xae>
 801da52:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 801da56:	da07      	bge.n	801da68 <tanhf+0x50>
 801da58:	4b1f      	ldr	r3, [pc, #124]	; (801dad8 <tanhf+0xc0>)
 801da5a:	edd3 7a00 	vldr	s15, [r3]
 801da5e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801da62:	ee27 0a80 	vmul.f32	s0, s15, s0
 801da66:	e7ee      	b.n	801da46 <tanhf+0x2e>
 801da68:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801da6c:	4c1c      	ldr	r4, [pc, #112]	; (801dae0 <tanhf+0xc8>)
 801da6e:	db19      	blt.n	801daa4 <tanhf+0x8c>
 801da70:	f7ff ff9f 	bl	801d9b2 <fabsf>
 801da74:	edd4 7a00 	vldr	s15, [r4]
 801da78:	ee20 0a27 	vmul.f32	s0, s0, s15
 801da7c:	f000 ffa8 	bl	801e9d0 <expm1f>
 801da80:	4b15      	ldr	r3, [pc, #84]	; (801dad8 <tanhf+0xc0>)
 801da82:	edd3 7a00 	vldr	s15, [r3]
 801da86:	edd4 6a00 	vldr	s13, [r4]
 801da8a:	ed94 7a00 	vldr	s14, [r4]
 801da8e:	ee37 0a00 	vadd.f32	s0, s14, s0
 801da92:	ee86 7a80 	vdiv.f32	s14, s13, s0
 801da96:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801da9a:	2d00      	cmp	r5, #0
 801da9c:	bfb8      	it	lt
 801da9e:	eeb1 0a40 	vneglt.f32	s0, s0
 801daa2:	e7d0      	b.n	801da46 <tanhf+0x2e>
 801daa4:	ed94 8a00 	vldr	s16, [r4]
 801daa8:	f7ff ff83 	bl	801d9b2 <fabsf>
 801daac:	ee28 0a40 	vnmul.f32	s0, s16, s0
 801dab0:	f000 ff8e 	bl	801e9d0 <expm1f>
 801dab4:	edd4 7a00 	vldr	s15, [r4]
 801dab8:	ee77 7a80 	vadd.f32	s15, s15, s0
 801dabc:	eeb1 7a40 	vneg.f32	s14, s0
 801dac0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801dac4:	e7e9      	b.n	801da9a <tanhf+0x82>
 801dac6:	4b04      	ldr	r3, [pc, #16]	; (801dad8 <tanhf+0xc0>)
 801dac8:	ed93 0a00 	vldr	s0, [r3]
 801dacc:	4b05      	ldr	r3, [pc, #20]	; (801dae4 <tanhf+0xcc>)
 801dace:	edd3 7a00 	vldr	s15, [r3]
 801dad2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801dad6:	e7e0      	b.n	801da9a <tanhf+0x82>
 801dad8:	200007cc 	.word	0x200007cc
 801dadc:	41afffff 	.word	0x41afffff
 801dae0:	200007d4 	.word	0x200007d4
 801dae4:	200007d0 	.word	0x200007d0

0801dae8 <tan>:
 801dae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801daea:	eeb0 7b40 	vmov.f64	d7, d0
 801daee:	ee17 3a90 	vmov	r3, s15
 801daf2:	4a15      	ldr	r2, [pc, #84]	; (801db48 <tan+0x60>)
 801daf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801daf8:	4293      	cmp	r3, r2
 801dafa:	dc07      	bgt.n	801db0c <tan+0x24>
 801dafc:	ed9f 1b10 	vldr	d1, [pc, #64]	; 801db40 <tan+0x58>
 801db00:	2001      	movs	r0, #1
 801db02:	b005      	add	sp, #20
 801db04:	f85d eb04 	ldr.w	lr, [sp], #4
 801db08:	f000 be46 	b.w	801e798 <__kernel_tan>
 801db0c:	4a0f      	ldr	r2, [pc, #60]	; (801db4c <tan+0x64>)
 801db0e:	4293      	cmp	r3, r2
 801db10:	dd04      	ble.n	801db1c <tan+0x34>
 801db12:	ee30 0b40 	vsub.f64	d0, d0, d0
 801db16:	b005      	add	sp, #20
 801db18:	f85d fb04 	ldr.w	pc, [sp], #4
 801db1c:	4668      	mov	r0, sp
 801db1e:	f000 fa63 	bl	801dfe8 <__ieee754_rem_pio2>
 801db22:	0040      	lsls	r0, r0, #1
 801db24:	f000 0002 	and.w	r0, r0, #2
 801db28:	ed9d 1b02 	vldr	d1, [sp, #8]
 801db2c:	ed9d 0b00 	vldr	d0, [sp]
 801db30:	f1c0 0001 	rsb	r0, r0, #1
 801db34:	f000 fe30 	bl	801e798 <__kernel_tan>
 801db38:	e7ed      	b.n	801db16 <tan+0x2e>
 801db3a:	bf00      	nop
 801db3c:	f3af 8000 	nop.w
	...
 801db48:	3fe921fb 	.word	0x3fe921fb
 801db4c:	7fefffff 	.word	0x7fefffff

0801db50 <__kernel_tanf>:
 801db50:	b508      	push	{r3, lr}
 801db52:	ee10 3a10 	vmov	r3, s0
 801db56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801db5a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801db5e:	eef0 7a40 	vmov.f32	s15, s0
 801db62:	da17      	bge.n	801db94 <__kernel_tanf+0x44>
 801db64:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801db68:	ee17 1a10 	vmov	r1, s14
 801db6c:	bb41      	cbnz	r1, 801dbc0 <__kernel_tanf+0x70>
 801db6e:	1c43      	adds	r3, r0, #1
 801db70:	4313      	orrs	r3, r2
 801db72:	d108      	bne.n	801db86 <__kernel_tanf+0x36>
 801db74:	f7ff ff1d 	bl	801d9b2 <fabsf>
 801db78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801db7c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801db80:	eeb0 0a67 	vmov.f32	s0, s15
 801db84:	bd08      	pop	{r3, pc}
 801db86:	2801      	cmp	r0, #1
 801db88:	d0fa      	beq.n	801db80 <__kernel_tanf+0x30>
 801db8a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801db8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801db92:	e7f5      	b.n	801db80 <__kernel_tanf+0x30>
 801db94:	494c      	ldr	r1, [pc, #304]	; (801dcc8 <__kernel_tanf+0x178>)
 801db96:	428a      	cmp	r2, r1
 801db98:	db12      	blt.n	801dbc0 <__kernel_tanf+0x70>
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801dccc <__kernel_tanf+0x17c>
 801dba0:	bfb8      	it	lt
 801dba2:	eef1 7a40 	vneglt.f32	s15, s0
 801dba6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801dbaa:	eddf 7a49 	vldr	s15, [pc, #292]	; 801dcd0 <__kernel_tanf+0x180>
 801dbae:	bfb8      	it	lt
 801dbb0:	eef1 0a60 	vneglt.f32	s1, s1
 801dbb4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801dbb8:	eddf 0a46 	vldr	s1, [pc, #280]	; 801dcd4 <__kernel_tanf+0x184>
 801dbbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dbc0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801dbc4:	eddf 5a44 	vldr	s11, [pc, #272]	; 801dcd8 <__kernel_tanf+0x188>
 801dbc8:	ed9f 6a44 	vldr	s12, [pc, #272]	; 801dcdc <__kernel_tanf+0x18c>
 801dbcc:	ed9f 5a44 	vldr	s10, [pc, #272]	; 801dce0 <__kernel_tanf+0x190>
 801dbd0:	493d      	ldr	r1, [pc, #244]	; (801dcc8 <__kernel_tanf+0x178>)
 801dbd2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801dbd6:	428a      	cmp	r2, r1
 801dbd8:	eea7 6a25 	vfma.f32	s12, s14, s11
 801dbdc:	eddf 5a41 	vldr	s11, [pc, #260]	; 801dce4 <__kernel_tanf+0x194>
 801dbe0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801dbe4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801dce8 <__kernel_tanf+0x198>
 801dbe8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dbec:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801dcec <__kernel_tanf+0x19c>
 801dbf0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801dbf4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801dcf0 <__kernel_tanf+0x1a0>
 801dbf8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dbfc:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801dcf4 <__kernel_tanf+0x1a4>
 801dc00:	eee7 5a05 	vfma.f32	s11, s14, s10
 801dc04:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801dcf8 <__kernel_tanf+0x1a8>
 801dc08:	eea5 5a87 	vfma.f32	s10, s11, s14
 801dc0c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801dcfc <__kernel_tanf+0x1ac>
 801dc10:	eee5 5a07 	vfma.f32	s11, s10, s14
 801dc14:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801dd00 <__kernel_tanf+0x1b0>
 801dc18:	eea5 5a87 	vfma.f32	s10, s11, s14
 801dc1c:	eddf 5a39 	vldr	s11, [pc, #228]	; 801dd04 <__kernel_tanf+0x1b4>
 801dc20:	eee5 5a07 	vfma.f32	s11, s10, s14
 801dc24:	eeb0 7a46 	vmov.f32	s14, s12
 801dc28:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801dc2c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801dc30:	eeb0 6a60 	vmov.f32	s12, s1
 801dc34:	eea7 6a05 	vfma.f32	s12, s14, s10
 801dc38:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801dd08 <__kernel_tanf+0x1b8>
 801dc3c:	eee6 0a26 	vfma.f32	s1, s12, s13
 801dc40:	eee5 0a07 	vfma.f32	s1, s10, s14
 801dc44:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801dc48:	db1d      	blt.n	801dc86 <__kernel_tanf+0x136>
 801dc4a:	ee07 0a10 	vmov	s14, r0
 801dc4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc52:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801dc56:	ee76 6a87 	vadd.f32	s13, s13, s14
 801dc5a:	179b      	asrs	r3, r3, #30
 801dc5c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801dc60:	f003 0302 	and.w	r3, r3, #2
 801dc64:	f1c3 0301 	rsb	r3, r3, #1
 801dc68:	ee76 6a60 	vsub.f32	s13, s12, s1
 801dc6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801dc70:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801dc74:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801dc78:	ee07 3a90 	vmov	s15, r3
 801dc7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc80:	ee67 7a87 	vmul.f32	s15, s15, s14
 801dc84:	e77c      	b.n	801db80 <__kernel_tanf+0x30>
 801dc86:	2801      	cmp	r0, #1
 801dc88:	d01b      	beq.n	801dcc2 <__kernel_tanf+0x172>
 801dc8a:	4b20      	ldr	r3, [pc, #128]	; (801dd0c <__kernel_tanf+0x1bc>)
 801dc8c:	ee16 2a90 	vmov	r2, s13
 801dc90:	401a      	ands	r2, r3
 801dc92:	ee05 2a90 	vmov	s11, r2
 801dc96:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801dc9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dc9e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801dca2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801dca6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801dcaa:	ee16 2a10 	vmov	r2, s12
 801dcae:	4013      	ands	r3, r2
 801dcb0:	ee07 3a90 	vmov	s15, r3
 801dcb4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801dcb8:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801dcbc:	eee7 7a06 	vfma.f32	s15, s14, s12
 801dcc0:	e75e      	b.n	801db80 <__kernel_tanf+0x30>
 801dcc2:	eef0 7a66 	vmov.f32	s15, s13
 801dcc6:	e75b      	b.n	801db80 <__kernel_tanf+0x30>
 801dcc8:	3f2ca140 	.word	0x3f2ca140
 801dccc:	3f490fda 	.word	0x3f490fda
 801dcd0:	33222168 	.word	0x33222168
 801dcd4:	00000000 	.word	0x00000000
 801dcd8:	b79bae5f 	.word	0xb79bae5f
 801dcdc:	38a3f445 	.word	0x38a3f445
 801dce0:	37d95384 	.word	0x37d95384
 801dce4:	3a1a26c8 	.word	0x3a1a26c8
 801dce8:	3b6b6916 	.word	0x3b6b6916
 801dcec:	3cb327a4 	.word	0x3cb327a4
 801dcf0:	3e088889 	.word	0x3e088889
 801dcf4:	3895c07a 	.word	0x3895c07a
 801dcf8:	398137b9 	.word	0x398137b9
 801dcfc:	3abede48 	.word	0x3abede48
 801dd00:	3c11371f 	.word	0x3c11371f
 801dd04:	3d5d0dd1 	.word	0x3d5d0dd1
 801dd08:	3eaaaaab 	.word	0x3eaaaaab
 801dd0c:	fffff000 	.word	0xfffff000

0801dd10 <lrintf>:
 801dd10:	ee10 3a10 	vmov	r3, s0
 801dd14:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801dd18:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 801dd1c:	281e      	cmp	r0, #30
 801dd1e:	b082      	sub	sp, #8
 801dd20:	dc2f      	bgt.n	801dd82 <lrintf+0x72>
 801dd22:	1c41      	adds	r1, r0, #1
 801dd24:	da02      	bge.n	801dd2c <lrintf+0x1c>
 801dd26:	2000      	movs	r0, #0
 801dd28:	b002      	add	sp, #8
 801dd2a:	4770      	bx	lr
 801dd2c:	2816      	cmp	r0, #22
 801dd2e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801dd32:	dd0a      	ble.n	801dd4a <lrintf+0x3a>
 801dd34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801dd38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801dd3c:	3a96      	subs	r2, #150	; 0x96
 801dd3e:	fa03 f002 	lsl.w	r0, r3, r2
 801dd42:	2900      	cmp	r1, #0
 801dd44:	d0f0      	beq.n	801dd28 <lrintf+0x18>
 801dd46:	4240      	negs	r0, r0
 801dd48:	e7ee      	b.n	801dd28 <lrintf+0x18>
 801dd4a:	4b10      	ldr	r3, [pc, #64]	; (801dd8c <lrintf+0x7c>)
 801dd4c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801dd50:	ed93 7a00 	vldr	s14, [r3]
 801dd54:	ee37 0a00 	vadd.f32	s0, s14, s0
 801dd58:	ed8d 0a01 	vstr	s0, [sp, #4]
 801dd5c:	eddd 7a01 	vldr	s15, [sp, #4]
 801dd60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dd64:	ee17 3a90 	vmov	r3, s15
 801dd68:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801dd6c:	d0db      	beq.n	801dd26 <lrintf+0x16>
 801dd6e:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801dd72:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801dd76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801dd7a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801dd7e:	40d8      	lsrs	r0, r3
 801dd80:	e7df      	b.n	801dd42 <lrintf+0x32>
 801dd82:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801dd86:	ee17 0a90 	vmov	r0, s15
 801dd8a:	e7cd      	b.n	801dd28 <lrintf+0x18>
 801dd8c:	08037c68 	.word	0x08037c68

0801dd90 <__ieee754_rem_pio2f>:
 801dd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd92:	ee10 6a10 	vmov	r6, s0
 801dd96:	4b86      	ldr	r3, [pc, #536]	; (801dfb0 <__ieee754_rem_pio2f+0x220>)
 801dd98:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801dd9c:	429d      	cmp	r5, r3
 801dd9e:	b087      	sub	sp, #28
 801dda0:	4604      	mov	r4, r0
 801dda2:	dc05      	bgt.n	801ddb0 <__ieee754_rem_pio2f+0x20>
 801dda4:	2300      	movs	r3, #0
 801dda6:	ed80 0a00 	vstr	s0, [r0]
 801ddaa:	6043      	str	r3, [r0, #4]
 801ddac:	2000      	movs	r0, #0
 801ddae:	e020      	b.n	801ddf2 <__ieee754_rem_pio2f+0x62>
 801ddb0:	4b80      	ldr	r3, [pc, #512]	; (801dfb4 <__ieee754_rem_pio2f+0x224>)
 801ddb2:	429d      	cmp	r5, r3
 801ddb4:	dc38      	bgt.n	801de28 <__ieee754_rem_pio2f+0x98>
 801ddb6:	2e00      	cmp	r6, #0
 801ddb8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801dfb8 <__ieee754_rem_pio2f+0x228>
 801ddbc:	4b7f      	ldr	r3, [pc, #508]	; (801dfbc <__ieee754_rem_pio2f+0x22c>)
 801ddbe:	f025 050f 	bic.w	r5, r5, #15
 801ddc2:	dd18      	ble.n	801ddf6 <__ieee754_rem_pio2f+0x66>
 801ddc4:	429d      	cmp	r5, r3
 801ddc6:	ee70 7a47 	vsub.f32	s15, s0, s14
 801ddca:	bf09      	itett	eq
 801ddcc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801dfc0 <__ieee754_rem_pio2f+0x230>
 801ddd0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801dfc4 <__ieee754_rem_pio2f+0x234>
 801ddd4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801ddd8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801dfc8 <__ieee754_rem_pio2f+0x238>
 801dddc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801dde0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801dde4:	edc0 6a00 	vstr	s13, [r0]
 801dde8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ddec:	edc0 7a01 	vstr	s15, [r0, #4]
 801ddf0:	2001      	movs	r0, #1
 801ddf2:	b007      	add	sp, #28
 801ddf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddf6:	429d      	cmp	r5, r3
 801ddf8:	ee70 7a07 	vadd.f32	s15, s0, s14
 801ddfc:	bf09      	itett	eq
 801ddfe:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801dfc0 <__ieee754_rem_pio2f+0x230>
 801de02:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801dfc4 <__ieee754_rem_pio2f+0x234>
 801de06:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801de0a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801dfc8 <__ieee754_rem_pio2f+0x238>
 801de0e:	ee77 6a87 	vadd.f32	s13, s15, s14
 801de12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801de16:	edc0 6a00 	vstr	s13, [r0]
 801de1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801de1e:	edc0 7a01 	vstr	s15, [r0, #4]
 801de22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801de26:	e7e4      	b.n	801ddf2 <__ieee754_rem_pio2f+0x62>
 801de28:	4b68      	ldr	r3, [pc, #416]	; (801dfcc <__ieee754_rem_pio2f+0x23c>)
 801de2a:	429d      	cmp	r5, r3
 801de2c:	dc71      	bgt.n	801df12 <__ieee754_rem_pio2f+0x182>
 801de2e:	f7ff fdc0 	bl	801d9b2 <fabsf>
 801de32:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801dfd0 <__ieee754_rem_pio2f+0x240>
 801de36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801de3a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801de3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801de42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801de46:	ee17 0a90 	vmov	r0, s15
 801de4a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801dfb8 <__ieee754_rem_pio2f+0x228>
 801de4e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801de52:	281f      	cmp	r0, #31
 801de54:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801dfc4 <__ieee754_rem_pio2f+0x234>
 801de58:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de5c:	eeb1 6a47 	vneg.f32	s12, s14
 801de60:	ee70 6a67 	vsub.f32	s13, s0, s15
 801de64:	ee16 2a90 	vmov	r2, s13
 801de68:	dc1c      	bgt.n	801dea4 <__ieee754_rem_pio2f+0x114>
 801de6a:	495a      	ldr	r1, [pc, #360]	; (801dfd4 <__ieee754_rem_pio2f+0x244>)
 801de6c:	1e47      	subs	r7, r0, #1
 801de6e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801de72:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801de76:	428b      	cmp	r3, r1
 801de78:	d014      	beq.n	801dea4 <__ieee754_rem_pio2f+0x114>
 801de7a:	6022      	str	r2, [r4, #0]
 801de7c:	ed94 7a00 	vldr	s14, [r4]
 801de80:	ee30 0a47 	vsub.f32	s0, s0, s14
 801de84:	2e00      	cmp	r6, #0
 801de86:	ee30 0a67 	vsub.f32	s0, s0, s15
 801de8a:	ed84 0a01 	vstr	s0, [r4, #4]
 801de8e:	dab0      	bge.n	801ddf2 <__ieee754_rem_pio2f+0x62>
 801de90:	eeb1 7a47 	vneg.f32	s14, s14
 801de94:	eeb1 0a40 	vneg.f32	s0, s0
 801de98:	ed84 7a00 	vstr	s14, [r4]
 801de9c:	ed84 0a01 	vstr	s0, [r4, #4]
 801dea0:	4240      	negs	r0, r0
 801dea2:	e7a6      	b.n	801ddf2 <__ieee754_rem_pio2f+0x62>
 801dea4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801dea8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801deac:	2908      	cmp	r1, #8
 801deae:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801deb2:	dde2      	ble.n	801de7a <__ieee754_rem_pio2f+0xea>
 801deb4:	eddf 5a42 	vldr	s11, [pc, #264]	; 801dfc0 <__ieee754_rem_pio2f+0x230>
 801deb8:	eef0 6a40 	vmov.f32	s13, s0
 801debc:	eee6 6a25 	vfma.f32	s13, s12, s11
 801dec0:	ee70 7a66 	vsub.f32	s15, s0, s13
 801dec4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801dec8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801dfc8 <__ieee754_rem_pio2f+0x238>
 801decc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801ded0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801ded4:	ee15 2a90 	vmov	r2, s11
 801ded8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801dedc:	1a5b      	subs	r3, r3, r1
 801dede:	2b19      	cmp	r3, #25
 801dee0:	dc04      	bgt.n	801deec <__ieee754_rem_pio2f+0x15c>
 801dee2:	edc4 5a00 	vstr	s11, [r4]
 801dee6:	eeb0 0a66 	vmov.f32	s0, s13
 801deea:	e7c7      	b.n	801de7c <__ieee754_rem_pio2f+0xec>
 801deec:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801dfd8 <__ieee754_rem_pio2f+0x248>
 801def0:	eeb0 0a66 	vmov.f32	s0, s13
 801def4:	eea6 0a25 	vfma.f32	s0, s12, s11
 801def8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801defc:	eddf 6a37 	vldr	s13, [pc, #220]	; 801dfdc <__ieee754_rem_pio2f+0x24c>
 801df00:	eee6 7a25 	vfma.f32	s15, s12, s11
 801df04:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801df08:	ee30 7a67 	vsub.f32	s14, s0, s15
 801df0c:	ed84 7a00 	vstr	s14, [r4]
 801df10:	e7b4      	b.n	801de7c <__ieee754_rem_pio2f+0xec>
 801df12:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801df16:	db06      	blt.n	801df26 <__ieee754_rem_pio2f+0x196>
 801df18:	ee70 7a40 	vsub.f32	s15, s0, s0
 801df1c:	edc0 7a01 	vstr	s15, [r0, #4]
 801df20:	edc0 7a00 	vstr	s15, [r0]
 801df24:	e742      	b.n	801ddac <__ieee754_rem_pio2f+0x1c>
 801df26:	15ea      	asrs	r2, r5, #23
 801df28:	3a86      	subs	r2, #134	; 0x86
 801df2a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801df2e:	ee07 3a90 	vmov	s15, r3
 801df32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801df36:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801dfe0 <__ieee754_rem_pio2f+0x250>
 801df3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801df3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801df42:	ed8d 7a03 	vstr	s14, [sp, #12]
 801df46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801df4a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801df4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801df52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801df56:	ed8d 7a04 	vstr	s14, [sp, #16]
 801df5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801df5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801df62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df66:	edcd 7a05 	vstr	s15, [sp, #20]
 801df6a:	d11e      	bne.n	801dfaa <__ieee754_rem_pio2f+0x21a>
 801df6c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801df70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df74:	bf14      	ite	ne
 801df76:	2302      	movne	r3, #2
 801df78:	2301      	moveq	r3, #1
 801df7a:	491a      	ldr	r1, [pc, #104]	; (801dfe4 <__ieee754_rem_pio2f+0x254>)
 801df7c:	9101      	str	r1, [sp, #4]
 801df7e:	2102      	movs	r1, #2
 801df80:	9100      	str	r1, [sp, #0]
 801df82:	a803      	add	r0, sp, #12
 801df84:	4621      	mov	r1, r4
 801df86:	f000 fec9 	bl	801ed1c <__kernel_rem_pio2f>
 801df8a:	2e00      	cmp	r6, #0
 801df8c:	f6bf af31 	bge.w	801ddf2 <__ieee754_rem_pio2f+0x62>
 801df90:	edd4 7a00 	vldr	s15, [r4]
 801df94:	eef1 7a67 	vneg.f32	s15, s15
 801df98:	edc4 7a00 	vstr	s15, [r4]
 801df9c:	edd4 7a01 	vldr	s15, [r4, #4]
 801dfa0:	eef1 7a67 	vneg.f32	s15, s15
 801dfa4:	edc4 7a01 	vstr	s15, [r4, #4]
 801dfa8:	e77a      	b.n	801dea0 <__ieee754_rem_pio2f+0x110>
 801dfaa:	2303      	movs	r3, #3
 801dfac:	e7e5      	b.n	801df7a <__ieee754_rem_pio2f+0x1ea>
 801dfae:	bf00      	nop
 801dfb0:	3f490fd8 	.word	0x3f490fd8
 801dfb4:	4016cbe3 	.word	0x4016cbe3
 801dfb8:	3fc90f80 	.word	0x3fc90f80
 801dfbc:	3fc90fd0 	.word	0x3fc90fd0
 801dfc0:	37354400 	.word	0x37354400
 801dfc4:	37354443 	.word	0x37354443
 801dfc8:	2e85a308 	.word	0x2e85a308
 801dfcc:	43490f80 	.word	0x43490f80
 801dfd0:	3f22f984 	.word	0x3f22f984
 801dfd4:	08037c70 	.word	0x08037c70
 801dfd8:	2e85a300 	.word	0x2e85a300
 801dfdc:	248d3132 	.word	0x248d3132
 801dfe0:	43800000 	.word	0x43800000
 801dfe4:	08037cf0 	.word	0x08037cf0

0801dfe8 <__ieee754_rem_pio2>:
 801dfe8:	b570      	push	{r4, r5, r6, lr}
 801dfea:	eeb0 7b40 	vmov.f64	d7, d0
 801dfee:	ee17 5a90 	vmov	r5, s15
 801dff2:	4b99      	ldr	r3, [pc, #612]	; (801e258 <__ieee754_rem_pio2+0x270>)
 801dff4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801dff8:	429e      	cmp	r6, r3
 801dffa:	b088      	sub	sp, #32
 801dffc:	4604      	mov	r4, r0
 801dffe:	dc07      	bgt.n	801e010 <__ieee754_rem_pio2+0x28>
 801e000:	2200      	movs	r2, #0
 801e002:	2300      	movs	r3, #0
 801e004:	ed84 0b00 	vstr	d0, [r4]
 801e008:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e00c:	2000      	movs	r0, #0
 801e00e:	e01b      	b.n	801e048 <__ieee754_rem_pio2+0x60>
 801e010:	4b92      	ldr	r3, [pc, #584]	; (801e25c <__ieee754_rem_pio2+0x274>)
 801e012:	429e      	cmp	r6, r3
 801e014:	dc3b      	bgt.n	801e08e <__ieee754_rem_pio2+0xa6>
 801e016:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801e01a:	2d00      	cmp	r5, #0
 801e01c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801e218 <__ieee754_rem_pio2+0x230>
 801e020:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801e024:	dd19      	ble.n	801e05a <__ieee754_rem_pio2+0x72>
 801e026:	ee30 7b46 	vsub.f64	d7, d0, d6
 801e02a:	429e      	cmp	r6, r3
 801e02c:	d00e      	beq.n	801e04c <__ieee754_rem_pio2+0x64>
 801e02e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801e220 <__ieee754_rem_pio2+0x238>
 801e032:	ee37 5b46 	vsub.f64	d5, d7, d6
 801e036:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e03a:	ed84 5b00 	vstr	d5, [r4]
 801e03e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e042:	ed84 7b02 	vstr	d7, [r4, #8]
 801e046:	2001      	movs	r0, #1
 801e048:	b008      	add	sp, #32
 801e04a:	bd70      	pop	{r4, r5, r6, pc}
 801e04c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801e228 <__ieee754_rem_pio2+0x240>
 801e050:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e054:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801e230 <__ieee754_rem_pio2+0x248>
 801e058:	e7eb      	b.n	801e032 <__ieee754_rem_pio2+0x4a>
 801e05a:	429e      	cmp	r6, r3
 801e05c:	ee30 7b06 	vadd.f64	d7, d0, d6
 801e060:	d00e      	beq.n	801e080 <__ieee754_rem_pio2+0x98>
 801e062:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801e220 <__ieee754_rem_pio2+0x238>
 801e066:	ee37 5b06 	vadd.f64	d5, d7, d6
 801e06a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e06e:	ed84 5b00 	vstr	d5, [r4]
 801e072:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e07a:	ed84 7b02 	vstr	d7, [r4, #8]
 801e07e:	e7e3      	b.n	801e048 <__ieee754_rem_pio2+0x60>
 801e080:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801e228 <__ieee754_rem_pio2+0x240>
 801e084:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e088:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801e230 <__ieee754_rem_pio2+0x248>
 801e08c:	e7eb      	b.n	801e066 <__ieee754_rem_pio2+0x7e>
 801e08e:	4b74      	ldr	r3, [pc, #464]	; (801e260 <__ieee754_rem_pio2+0x278>)
 801e090:	429e      	cmp	r6, r3
 801e092:	dc70      	bgt.n	801e176 <__ieee754_rem_pio2+0x18e>
 801e094:	f000 fdb8 	bl	801ec08 <fabs>
 801e098:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e09c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801e238 <__ieee754_rem_pio2+0x250>
 801e0a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801e0a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801e0a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801e0ac:	ee17 0a90 	vmov	r0, s15
 801e0b0:	eeb1 4b45 	vneg.f64	d4, d5
 801e0b4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801e218 <__ieee754_rem_pio2+0x230>
 801e0b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 801e0bc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801e220 <__ieee754_rem_pio2+0x238>
 801e0c0:	281f      	cmp	r0, #31
 801e0c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e0c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e0ca:	dc08      	bgt.n	801e0de <__ieee754_rem_pio2+0xf6>
 801e0cc:	4b65      	ldr	r3, [pc, #404]	; (801e264 <__ieee754_rem_pio2+0x27c>)
 801e0ce:	1e42      	subs	r2, r0, #1
 801e0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e0d4:	42b3      	cmp	r3, r6
 801e0d6:	d002      	beq.n	801e0de <__ieee754_rem_pio2+0xf6>
 801e0d8:	ed84 6b00 	vstr	d6, [r4]
 801e0dc:	e024      	b.n	801e128 <__ieee754_rem_pio2+0x140>
 801e0de:	ee16 3a90 	vmov	r3, s13
 801e0e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e0e6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801e0ea:	2b10      	cmp	r3, #16
 801e0ec:	ea4f 5226 	mov.w	r2, r6, asr #20
 801e0f0:	ddf2      	ble.n	801e0d8 <__ieee754_rem_pio2+0xf0>
 801e0f2:	eeb0 6b40 	vmov.f64	d6, d0
 801e0f6:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 801e228 <__ieee754_rem_pio2+0x240>
 801e0fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 801e0fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 801e102:	eea4 7b03 	vfma.f64	d7, d4, d3
 801e106:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 801e230 <__ieee754_rem_pio2+0x248>
 801e10a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801e10e:	ee36 3b47 	vsub.f64	d3, d6, d7
 801e112:	ee13 3a90 	vmov	r3, s7
 801e116:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e11a:	1ad3      	subs	r3, r2, r3
 801e11c:	2b31      	cmp	r3, #49	; 0x31
 801e11e:	dc17      	bgt.n	801e150 <__ieee754_rem_pio2+0x168>
 801e120:	eeb0 0b46 	vmov.f64	d0, d6
 801e124:	ed84 3b00 	vstr	d3, [r4]
 801e128:	ed94 6b00 	vldr	d6, [r4]
 801e12c:	2d00      	cmp	r5, #0
 801e12e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801e132:	ee30 0b47 	vsub.f64	d0, d0, d7
 801e136:	ed84 0b02 	vstr	d0, [r4, #8]
 801e13a:	da85      	bge.n	801e048 <__ieee754_rem_pio2+0x60>
 801e13c:	eeb1 6b46 	vneg.f64	d6, d6
 801e140:	eeb1 0b40 	vneg.f64	d0, d0
 801e144:	ed84 6b00 	vstr	d6, [r4]
 801e148:	ed84 0b02 	vstr	d0, [r4, #8]
 801e14c:	4240      	negs	r0, r0
 801e14e:	e77b      	b.n	801e048 <__ieee754_rem_pio2+0x60>
 801e150:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 801e240 <__ieee754_rem_pio2+0x258>
 801e154:	eeb0 0b46 	vmov.f64	d0, d6
 801e158:	eea4 0b07 	vfma.f64	d0, d4, d7
 801e15c:	ee36 6b40 	vsub.f64	d6, d6, d0
 801e160:	eea4 6b07 	vfma.f64	d6, d4, d7
 801e164:	ed9f 4b38 	vldr	d4, [pc, #224]	; 801e248 <__ieee754_rem_pio2+0x260>
 801e168:	eeb0 7b46 	vmov.f64	d7, d6
 801e16c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801e170:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e174:	e7b0      	b.n	801e0d8 <__ieee754_rem_pio2+0xf0>
 801e176:	4b3c      	ldr	r3, [pc, #240]	; (801e268 <__ieee754_rem_pio2+0x280>)
 801e178:	429e      	cmp	r6, r3
 801e17a:	dd06      	ble.n	801e18a <__ieee754_rem_pio2+0x1a2>
 801e17c:	ee30 7b40 	vsub.f64	d7, d0, d0
 801e180:	ed80 7b02 	vstr	d7, [r0, #8]
 801e184:	ed80 7b00 	vstr	d7, [r0]
 801e188:	e740      	b.n	801e00c <__ieee754_rem_pio2+0x24>
 801e18a:	1532      	asrs	r2, r6, #20
 801e18c:	ee10 0a10 	vmov	r0, s0
 801e190:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801e194:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801e198:	ec41 0b17 	vmov	d7, r0, r1
 801e19c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e1a0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801e250 <__ieee754_rem_pio2+0x268>
 801e1a4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e1a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e1ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 801e1b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e1b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e1b8:	a808      	add	r0, sp, #32
 801e1ba:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e1be:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e1c2:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e1c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e1ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e1ce:	2103      	movs	r1, #3
 801e1d0:	ed30 7b02 	vldmdb	r0!, {d7}
 801e1d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1dc:	460b      	mov	r3, r1
 801e1de:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 801e1e2:	d0f5      	beq.n	801e1d0 <__ieee754_rem_pio2+0x1e8>
 801e1e4:	4921      	ldr	r1, [pc, #132]	; (801e26c <__ieee754_rem_pio2+0x284>)
 801e1e6:	9101      	str	r1, [sp, #4]
 801e1e8:	2102      	movs	r1, #2
 801e1ea:	9100      	str	r1, [sp, #0]
 801e1ec:	a802      	add	r0, sp, #8
 801e1ee:	4621      	mov	r1, r4
 801e1f0:	f000 f83e 	bl	801e270 <__kernel_rem_pio2>
 801e1f4:	2d00      	cmp	r5, #0
 801e1f6:	f6bf af27 	bge.w	801e048 <__ieee754_rem_pio2+0x60>
 801e1fa:	ed94 7b00 	vldr	d7, [r4]
 801e1fe:	eeb1 7b47 	vneg.f64	d7, d7
 801e202:	ed84 7b00 	vstr	d7, [r4]
 801e206:	ed94 7b02 	vldr	d7, [r4, #8]
 801e20a:	eeb1 7b47 	vneg.f64	d7, d7
 801e20e:	ed84 7b02 	vstr	d7, [r4, #8]
 801e212:	e79b      	b.n	801e14c <__ieee754_rem_pio2+0x164>
 801e214:	f3af 8000 	nop.w
 801e218:	54400000 	.word	0x54400000
 801e21c:	3ff921fb 	.word	0x3ff921fb
 801e220:	1a626331 	.word	0x1a626331
 801e224:	3dd0b461 	.word	0x3dd0b461
 801e228:	1a600000 	.word	0x1a600000
 801e22c:	3dd0b461 	.word	0x3dd0b461
 801e230:	2e037073 	.word	0x2e037073
 801e234:	3ba3198a 	.word	0x3ba3198a
 801e238:	6dc9c883 	.word	0x6dc9c883
 801e23c:	3fe45f30 	.word	0x3fe45f30
 801e240:	2e000000 	.word	0x2e000000
 801e244:	3ba3198a 	.word	0x3ba3198a
 801e248:	252049c1 	.word	0x252049c1
 801e24c:	397b839a 	.word	0x397b839a
 801e250:	00000000 	.word	0x00000000
 801e254:	41700000 	.word	0x41700000
 801e258:	3fe921fb 	.word	0x3fe921fb
 801e25c:	4002d97b 	.word	0x4002d97b
 801e260:	413921fb 	.word	0x413921fb
 801e264:	08038008 	.word	0x08038008
 801e268:	7fefffff 	.word	0x7fefffff
 801e26c:	08038088 	.word	0x08038088

0801e270 <__kernel_rem_pio2>:
 801e270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e274:	ed2d 8b06 	vpush	{d8-d10}
 801e278:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801e27c:	460f      	mov	r7, r1
 801e27e:	9002      	str	r0, [sp, #8]
 801e280:	49c3      	ldr	r1, [pc, #780]	; (801e590 <__kernel_rem_pio2+0x320>)
 801e282:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801e284:	9301      	str	r3, [sp, #4]
 801e286:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801e28a:	9901      	ldr	r1, [sp, #4]
 801e28c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801e28e:	f112 0f14 	cmn.w	r2, #20
 801e292:	bfa8      	it	ge
 801e294:	1ed0      	subge	r0, r2, #3
 801e296:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 801e29a:	bfaa      	itet	ge
 801e29c:	2418      	movge	r4, #24
 801e29e:	2000      	movlt	r0, #0
 801e2a0:	fb90 f0f4 	sdivge	r0, r0, r4
 801e2a4:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 801e578 <__kernel_rem_pio2+0x308>
 801e2a8:	f06f 0417 	mvn.w	r4, #23
 801e2ac:	fb00 4404 	mla	r4, r0, r4, r4
 801e2b0:	eba0 060a 	sub.w	r6, r0, sl
 801e2b4:	4414      	add	r4, r2
 801e2b6:	eb09 0c0a 	add.w	ip, r9, sl
 801e2ba:	ad1a      	add	r5, sp, #104	; 0x68
 801e2bc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 801e2c0:	2200      	movs	r2, #0
 801e2c2:	4562      	cmp	r2, ip
 801e2c4:	dd10      	ble.n	801e2e8 <__kernel_rem_pio2+0x78>
 801e2c6:	9a01      	ldr	r2, [sp, #4]
 801e2c8:	a91a      	add	r1, sp, #104	; 0x68
 801e2ca:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801e2ce:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 801e2d2:	f04f 0c00 	mov.w	ip, #0
 801e2d6:	45cc      	cmp	ip, r9
 801e2d8:	dc26      	bgt.n	801e328 <__kernel_rem_pio2+0xb8>
 801e2da:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 801e578 <__kernel_rem_pio2+0x308>
 801e2de:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e2e2:	4616      	mov	r6, r2
 801e2e4:	2500      	movs	r5, #0
 801e2e6:	e015      	b.n	801e314 <__kernel_rem_pio2+0xa4>
 801e2e8:	42d6      	cmn	r6, r2
 801e2ea:	d409      	bmi.n	801e300 <__kernel_rem_pio2+0x90>
 801e2ec:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 801e2f0:	ee07 1a90 	vmov	s15, r1
 801e2f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e2f8:	eca5 7b02 	vstmia	r5!, {d7}
 801e2fc:	3201      	adds	r2, #1
 801e2fe:	e7e0      	b.n	801e2c2 <__kernel_rem_pio2+0x52>
 801e300:	eeb0 7b46 	vmov.f64	d7, d6
 801e304:	e7f8      	b.n	801e2f8 <__kernel_rem_pio2+0x88>
 801e306:	ecbe 5b02 	vldmia	lr!, {d5}
 801e30a:	ed96 6b00 	vldr	d6, [r6]
 801e30e:	3501      	adds	r5, #1
 801e310:	eea5 7b06 	vfma.f64	d7, d5, d6
 801e314:	4555      	cmp	r5, sl
 801e316:	f1a6 0608 	sub.w	r6, r6, #8
 801e31a:	ddf4      	ble.n	801e306 <__kernel_rem_pio2+0x96>
 801e31c:	eca8 7b02 	vstmia	r8!, {d7}
 801e320:	f10c 0c01 	add.w	ip, ip, #1
 801e324:	3208      	adds	r2, #8
 801e326:	e7d6      	b.n	801e2d6 <__kernel_rem_pio2+0x66>
 801e328:	aa06      	add	r2, sp, #24
 801e32a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801e580 <__kernel_rem_pio2+0x310>
 801e32e:	ed9f ab96 	vldr	d10, [pc, #600]	; 801e588 <__kernel_rem_pio2+0x318>
 801e332:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801e336:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801e33a:	9204      	str	r2, [sp, #16]
 801e33c:	9303      	str	r3, [sp, #12]
 801e33e:	464d      	mov	r5, r9
 801e340:	00eb      	lsls	r3, r5, #3
 801e342:	9305      	str	r3, [sp, #20]
 801e344:	ab92      	add	r3, sp, #584	; 0x248
 801e346:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801e34a:	f10d 0b18 	add.w	fp, sp, #24
 801e34e:	ab6a      	add	r3, sp, #424	; 0x1a8
 801e350:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801e354:	465e      	mov	r6, fp
 801e356:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801e35a:	4628      	mov	r0, r5
 801e35c:	2800      	cmp	r0, #0
 801e35e:	f1a2 0208 	sub.w	r2, r2, #8
 801e362:	dc48      	bgt.n	801e3f6 <__kernel_rem_pio2+0x186>
 801e364:	4620      	mov	r0, r4
 801e366:	f000 fc5b 	bl	801ec20 <scalbn>
 801e36a:	eeb0 8b40 	vmov.f64	d8, d0
 801e36e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801e372:	ee28 0b00 	vmul.f64	d0, d8, d0
 801e376:	f000 ff43 	bl	801f200 <floor>
 801e37a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801e37e:	eea0 8b47 	vfms.f64	d8, d0, d7
 801e382:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801e386:	2c00      	cmp	r4, #0
 801e388:	ee17 8a90 	vmov	r8, s15
 801e38c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e390:	ee38 8b47 	vsub.f64	d8, d8, d7
 801e394:	dd41      	ble.n	801e41a <__kernel_rem_pio2+0x1aa>
 801e396:	1e68      	subs	r0, r5, #1
 801e398:	ab06      	add	r3, sp, #24
 801e39a:	f1c4 0c18 	rsb	ip, r4, #24
 801e39e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801e3a2:	fa46 f20c 	asr.w	r2, r6, ip
 801e3a6:	4490      	add	r8, r2
 801e3a8:	fa02 f20c 	lsl.w	r2, r2, ip
 801e3ac:	1ab6      	subs	r6, r6, r2
 801e3ae:	f1c4 0217 	rsb	r2, r4, #23
 801e3b2:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801e3b6:	4116      	asrs	r6, r2
 801e3b8:	2e00      	cmp	r6, #0
 801e3ba:	dd3d      	ble.n	801e438 <__kernel_rem_pio2+0x1c8>
 801e3bc:	f04f 0c00 	mov.w	ip, #0
 801e3c0:	f108 0801 	add.w	r8, r8, #1
 801e3c4:	4660      	mov	r0, ip
 801e3c6:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801e3ca:	4565      	cmp	r5, ip
 801e3cc:	dc6a      	bgt.n	801e4a4 <__kernel_rem_pio2+0x234>
 801e3ce:	2c00      	cmp	r4, #0
 801e3d0:	dd04      	ble.n	801e3dc <__kernel_rem_pio2+0x16c>
 801e3d2:	2c01      	cmp	r4, #1
 801e3d4:	d07b      	beq.n	801e4ce <__kernel_rem_pio2+0x25e>
 801e3d6:	2c02      	cmp	r4, #2
 801e3d8:	f000 8083 	beq.w	801e4e2 <__kernel_rem_pio2+0x272>
 801e3dc:	2e02      	cmp	r6, #2
 801e3de:	d12b      	bne.n	801e438 <__kernel_rem_pio2+0x1c8>
 801e3e0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801e3e4:	ee30 8b48 	vsub.f64	d8, d0, d8
 801e3e8:	b330      	cbz	r0, 801e438 <__kernel_rem_pio2+0x1c8>
 801e3ea:	4620      	mov	r0, r4
 801e3ec:	f000 fc18 	bl	801ec20 <scalbn>
 801e3f0:	ee38 8b40 	vsub.f64	d8, d8, d0
 801e3f4:	e020      	b.n	801e438 <__kernel_rem_pio2+0x1c8>
 801e3f6:	ee20 7b09 	vmul.f64	d7, d0, d9
 801e3fa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801e3fe:	3801      	subs	r0, #1
 801e400:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801e404:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801e408:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801e40c:	eca6 0a01 	vstmia	r6!, {s0}
 801e410:	ed92 0b00 	vldr	d0, [r2]
 801e414:	ee37 0b00 	vadd.f64	d0, d7, d0
 801e418:	e7a0      	b.n	801e35c <__kernel_rem_pio2+0xec>
 801e41a:	d105      	bne.n	801e428 <__kernel_rem_pio2+0x1b8>
 801e41c:	1e6a      	subs	r2, r5, #1
 801e41e:	ab06      	add	r3, sp, #24
 801e420:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e424:	15f6      	asrs	r6, r6, #23
 801e426:	e7c7      	b.n	801e3b8 <__kernel_rem_pio2+0x148>
 801e428:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e42c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e434:	da34      	bge.n	801e4a0 <__kernel_rem_pio2+0x230>
 801e436:	2600      	movs	r6, #0
 801e438:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e440:	f040 80aa 	bne.w	801e598 <__kernel_rem_pio2+0x328>
 801e444:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 801e448:	4658      	mov	r0, fp
 801e44a:	2200      	movs	r2, #0
 801e44c:	4548      	cmp	r0, r9
 801e44e:	da50      	bge.n	801e4f2 <__kernel_rem_pio2+0x282>
 801e450:	2a00      	cmp	r2, #0
 801e452:	d06b      	beq.n	801e52c <__kernel_rem_pio2+0x2bc>
 801e454:	ab06      	add	r3, sp, #24
 801e456:	3c18      	subs	r4, #24
 801e458:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	f000 8087 	beq.w	801e570 <__kernel_rem_pio2+0x300>
 801e462:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801e466:	4620      	mov	r0, r4
 801e468:	f000 fbda 	bl	801ec20 <scalbn>
 801e46c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 801e580 <__kernel_rem_pio2+0x310>
 801e470:	f10b 0201 	add.w	r2, fp, #1
 801e474:	a96a      	add	r1, sp, #424	; 0x1a8
 801e476:	00d3      	lsls	r3, r2, #3
 801e478:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801e47c:	465a      	mov	r2, fp
 801e47e:	2a00      	cmp	r2, #0
 801e480:	f280 80b8 	bge.w	801e5f4 <__kernel_rem_pio2+0x384>
 801e484:	465a      	mov	r2, fp
 801e486:	2a00      	cmp	r2, #0
 801e488:	f2c0 80d6 	blt.w	801e638 <__kernel_rem_pio2+0x3c8>
 801e48c:	a96a      	add	r1, sp, #424	; 0x1a8
 801e48e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801e492:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801e578 <__kernel_rem_pio2+0x308>
 801e496:	4d3f      	ldr	r5, [pc, #252]	; (801e594 <__kernel_rem_pio2+0x324>)
 801e498:	2000      	movs	r0, #0
 801e49a:	ebab 0102 	sub.w	r1, fp, r2
 801e49e:	e0c0      	b.n	801e622 <__kernel_rem_pio2+0x3b2>
 801e4a0:	2602      	movs	r6, #2
 801e4a2:	e78b      	b.n	801e3bc <__kernel_rem_pio2+0x14c>
 801e4a4:	f8db 2000 	ldr.w	r2, [fp]
 801e4a8:	b958      	cbnz	r0, 801e4c2 <__kernel_rem_pio2+0x252>
 801e4aa:	b122      	cbz	r2, 801e4b6 <__kernel_rem_pio2+0x246>
 801e4ac:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801e4b0:	f8cb 2000 	str.w	r2, [fp]
 801e4b4:	2201      	movs	r2, #1
 801e4b6:	f10c 0c01 	add.w	ip, ip, #1
 801e4ba:	f10b 0b04 	add.w	fp, fp, #4
 801e4be:	4610      	mov	r0, r2
 801e4c0:	e783      	b.n	801e3ca <__kernel_rem_pio2+0x15a>
 801e4c2:	ebae 0202 	sub.w	r2, lr, r2
 801e4c6:	f8cb 2000 	str.w	r2, [fp]
 801e4ca:	4602      	mov	r2, r0
 801e4cc:	e7f3      	b.n	801e4b6 <__kernel_rem_pio2+0x246>
 801e4ce:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801e4d2:	ab06      	add	r3, sp, #24
 801e4d4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801e4d8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801e4dc:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801e4e0:	e77c      	b.n	801e3dc <__kernel_rem_pio2+0x16c>
 801e4e2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801e4e6:	ab06      	add	r3, sp, #24
 801e4e8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801e4ec:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801e4f0:	e7f4      	b.n	801e4dc <__kernel_rem_pio2+0x26c>
 801e4f2:	ab06      	add	r3, sp, #24
 801e4f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801e4f8:	3801      	subs	r0, #1
 801e4fa:	431a      	orrs	r2, r3
 801e4fc:	e7a6      	b.n	801e44c <__kernel_rem_pio2+0x1dc>
 801e4fe:	3201      	adds	r2, #1
 801e500:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801e504:	2e00      	cmp	r6, #0
 801e506:	d0fa      	beq.n	801e4fe <__kernel_rem_pio2+0x28e>
 801e508:	9b05      	ldr	r3, [sp, #20]
 801e50a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801e50e:	eb0d 0003 	add.w	r0, sp, r3
 801e512:	9b01      	ldr	r3, [sp, #4]
 801e514:	18ee      	adds	r6, r5, r3
 801e516:	ab1a      	add	r3, sp, #104	; 0x68
 801e518:	f105 0c01 	add.w	ip, r5, #1
 801e51c:	3898      	subs	r0, #152	; 0x98
 801e51e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801e522:	442a      	add	r2, r5
 801e524:	4562      	cmp	r2, ip
 801e526:	da04      	bge.n	801e532 <__kernel_rem_pio2+0x2c2>
 801e528:	4615      	mov	r5, r2
 801e52a:	e709      	b.n	801e340 <__kernel_rem_pio2+0xd0>
 801e52c:	9804      	ldr	r0, [sp, #16]
 801e52e:	2201      	movs	r2, #1
 801e530:	e7e6      	b.n	801e500 <__kernel_rem_pio2+0x290>
 801e532:	9b03      	ldr	r3, [sp, #12]
 801e534:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e538:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e53c:	9305      	str	r3, [sp, #20]
 801e53e:	ee07 3a90 	vmov	s15, r3
 801e542:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e546:	2500      	movs	r5, #0
 801e548:	eca6 7b02 	vstmia	r6!, {d7}
 801e54c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 801e578 <__kernel_rem_pio2+0x308>
 801e550:	46b0      	mov	r8, r6
 801e552:	4555      	cmp	r5, sl
 801e554:	dd04      	ble.n	801e560 <__kernel_rem_pio2+0x2f0>
 801e556:	eca0 7b02 	vstmia	r0!, {d7}
 801e55a:	f10c 0c01 	add.w	ip, ip, #1
 801e55e:	e7e1      	b.n	801e524 <__kernel_rem_pio2+0x2b4>
 801e560:	ecbe 5b02 	vldmia	lr!, {d5}
 801e564:	ed38 6b02 	vldmdb	r8!, {d6}
 801e568:	3501      	adds	r5, #1
 801e56a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801e56e:	e7f0      	b.n	801e552 <__kernel_rem_pio2+0x2e2>
 801e570:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801e574:	e76e      	b.n	801e454 <__kernel_rem_pio2+0x1e4>
 801e576:	bf00      	nop
	...
 801e584:	3e700000 	.word	0x3e700000
 801e588:	00000000 	.word	0x00000000
 801e58c:	41700000 	.word	0x41700000
 801e590:	080382f8 	.word	0x080382f8
 801e594:	080382b8 	.word	0x080382b8
 801e598:	4260      	negs	r0, r4
 801e59a:	eeb0 0b48 	vmov.f64	d0, d8
 801e59e:	f000 fb3f 	bl	801ec20 <scalbn>
 801e5a2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801e780 <__kernel_rem_pio2+0x510>
 801e5a6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801e5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5ae:	db18      	blt.n	801e5e2 <__kernel_rem_pio2+0x372>
 801e5b0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801e788 <__kernel_rem_pio2+0x518>
 801e5b4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e5b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801e5bc:	aa06      	add	r2, sp, #24
 801e5be:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801e5c2:	eea5 0b46 	vfms.f64	d0, d5, d6
 801e5c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801e5ca:	f105 0b01 	add.w	fp, r5, #1
 801e5ce:	ee10 3a10 	vmov	r3, s0
 801e5d2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801e5d6:	ee17 3a10 	vmov	r3, s14
 801e5da:	3418      	adds	r4, #24
 801e5dc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801e5e0:	e73f      	b.n	801e462 <__kernel_rem_pio2+0x1f2>
 801e5e2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801e5e6:	aa06      	add	r2, sp, #24
 801e5e8:	ee10 3a10 	vmov	r3, s0
 801e5ec:	46ab      	mov	fp, r5
 801e5ee:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801e5f2:	e736      	b.n	801e462 <__kernel_rem_pio2+0x1f2>
 801e5f4:	a806      	add	r0, sp, #24
 801e5f6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801e5fa:	9001      	str	r0, [sp, #4]
 801e5fc:	ee07 0a90 	vmov	s15, r0
 801e600:	3a01      	subs	r2, #1
 801e602:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e606:	ee27 7b00 	vmul.f64	d7, d7, d0
 801e60a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801e60e:	ed21 7b02 	vstmdb	r1!, {d7}
 801e612:	e734      	b.n	801e47e <__kernel_rem_pio2+0x20e>
 801e614:	ecb5 5b02 	vldmia	r5!, {d5}
 801e618:	ecb4 6b02 	vldmia	r4!, {d6}
 801e61c:	3001      	adds	r0, #1
 801e61e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801e622:	4548      	cmp	r0, r9
 801e624:	dc01      	bgt.n	801e62a <__kernel_rem_pio2+0x3ba>
 801e626:	4288      	cmp	r0, r1
 801e628:	ddf4      	ble.n	801e614 <__kernel_rem_pio2+0x3a4>
 801e62a:	a842      	add	r0, sp, #264	; 0x108
 801e62c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801e630:	ed81 7b00 	vstr	d7, [r1]
 801e634:	3a01      	subs	r2, #1
 801e636:	e726      	b.n	801e486 <__kernel_rem_pio2+0x216>
 801e638:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801e63a:	2a02      	cmp	r2, #2
 801e63c:	dc0a      	bgt.n	801e654 <__kernel_rem_pio2+0x3e4>
 801e63e:	2a00      	cmp	r2, #0
 801e640:	dc2e      	bgt.n	801e6a0 <__kernel_rem_pio2+0x430>
 801e642:	d047      	beq.n	801e6d4 <__kernel_rem_pio2+0x464>
 801e644:	f008 0007 	and.w	r0, r8, #7
 801e648:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801e64c:	ecbd 8b06 	vpop	{d8-d10}
 801e650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e654:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801e656:	2a03      	cmp	r2, #3
 801e658:	d1f4      	bne.n	801e644 <__kernel_rem_pio2+0x3d4>
 801e65a:	a942      	add	r1, sp, #264	; 0x108
 801e65c:	f1a3 0208 	sub.w	r2, r3, #8
 801e660:	440a      	add	r2, r1
 801e662:	4611      	mov	r1, r2
 801e664:	4658      	mov	r0, fp
 801e666:	2800      	cmp	r0, #0
 801e668:	f1a1 0108 	sub.w	r1, r1, #8
 801e66c:	dc55      	bgt.n	801e71a <__kernel_rem_pio2+0x4aa>
 801e66e:	4659      	mov	r1, fp
 801e670:	2901      	cmp	r1, #1
 801e672:	f1a2 0208 	sub.w	r2, r2, #8
 801e676:	dc60      	bgt.n	801e73a <__kernel_rem_pio2+0x4ca>
 801e678:	ed9f 7b45 	vldr	d7, [pc, #276]	; 801e790 <__kernel_rem_pio2+0x520>
 801e67c:	aa42      	add	r2, sp, #264	; 0x108
 801e67e:	4413      	add	r3, r2
 801e680:	f1bb 0f01 	cmp.w	fp, #1
 801e684:	dc69      	bgt.n	801e75a <__kernel_rem_pio2+0x4ea>
 801e686:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801e68a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801e68e:	2e00      	cmp	r6, #0
 801e690:	d16a      	bne.n	801e768 <__kernel_rem_pio2+0x4f8>
 801e692:	ed87 5b00 	vstr	d5, [r7]
 801e696:	ed87 6b02 	vstr	d6, [r7, #8]
 801e69a:	ed87 7b04 	vstr	d7, [r7, #16]
 801e69e:	e7d1      	b.n	801e644 <__kernel_rem_pio2+0x3d4>
 801e6a0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 801e790 <__kernel_rem_pio2+0x520>
 801e6a4:	aa42      	add	r2, sp, #264	; 0x108
 801e6a6:	4413      	add	r3, r2
 801e6a8:	465a      	mov	r2, fp
 801e6aa:	2a00      	cmp	r2, #0
 801e6ac:	da26      	bge.n	801e6fc <__kernel_rem_pio2+0x48c>
 801e6ae:	b35e      	cbz	r6, 801e708 <__kernel_rem_pio2+0x498>
 801e6b0:	eeb1 7b46 	vneg.f64	d7, d6
 801e6b4:	ed87 7b00 	vstr	d7, [r7]
 801e6b8:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801e6bc:	aa44      	add	r2, sp, #272	; 0x110
 801e6be:	2301      	movs	r3, #1
 801e6c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e6c4:	459b      	cmp	fp, r3
 801e6c6:	da22      	bge.n	801e70e <__kernel_rem_pio2+0x49e>
 801e6c8:	b10e      	cbz	r6, 801e6ce <__kernel_rem_pio2+0x45e>
 801e6ca:	eeb1 7b47 	vneg.f64	d7, d7
 801e6ce:	ed87 7b02 	vstr	d7, [r7, #8]
 801e6d2:	e7b7      	b.n	801e644 <__kernel_rem_pio2+0x3d4>
 801e6d4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801e790 <__kernel_rem_pio2+0x520>
 801e6d8:	aa42      	add	r2, sp, #264	; 0x108
 801e6da:	4413      	add	r3, r2
 801e6dc:	f1bb 0f00 	cmp.w	fp, #0
 801e6e0:	da05      	bge.n	801e6ee <__kernel_rem_pio2+0x47e>
 801e6e2:	b10e      	cbz	r6, 801e6e8 <__kernel_rem_pio2+0x478>
 801e6e4:	eeb1 7b47 	vneg.f64	d7, d7
 801e6e8:	ed87 7b00 	vstr	d7, [r7]
 801e6ec:	e7aa      	b.n	801e644 <__kernel_rem_pio2+0x3d4>
 801e6ee:	ed33 6b02 	vldmdb	r3!, {d6}
 801e6f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801e6f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e6fa:	e7ef      	b.n	801e6dc <__kernel_rem_pio2+0x46c>
 801e6fc:	ed33 7b02 	vldmdb	r3!, {d7}
 801e700:	3a01      	subs	r2, #1
 801e702:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e706:	e7d0      	b.n	801e6aa <__kernel_rem_pio2+0x43a>
 801e708:	eeb0 7b46 	vmov.f64	d7, d6
 801e70c:	e7d2      	b.n	801e6b4 <__kernel_rem_pio2+0x444>
 801e70e:	ecb2 6b02 	vldmia	r2!, {d6}
 801e712:	3301      	adds	r3, #1
 801e714:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e718:	e7d4      	b.n	801e6c4 <__kernel_rem_pio2+0x454>
 801e71a:	ed91 7b00 	vldr	d7, [r1]
 801e71e:	ed91 5b02 	vldr	d5, [r1, #8]
 801e722:	3801      	subs	r0, #1
 801e724:	ee37 6b05 	vadd.f64	d6, d7, d5
 801e728:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e72c:	ed81 6b00 	vstr	d6, [r1]
 801e730:	ee37 7b05 	vadd.f64	d7, d7, d5
 801e734:	ed81 7b02 	vstr	d7, [r1, #8]
 801e738:	e795      	b.n	801e666 <__kernel_rem_pio2+0x3f6>
 801e73a:	ed92 7b00 	vldr	d7, [r2]
 801e73e:	ed92 5b02 	vldr	d5, [r2, #8]
 801e742:	3901      	subs	r1, #1
 801e744:	ee37 6b05 	vadd.f64	d6, d7, d5
 801e748:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e74c:	ed82 6b00 	vstr	d6, [r2]
 801e750:	ee37 7b05 	vadd.f64	d7, d7, d5
 801e754:	ed82 7b02 	vstr	d7, [r2, #8]
 801e758:	e78a      	b.n	801e670 <__kernel_rem_pio2+0x400>
 801e75a:	ed33 6b02 	vldmdb	r3!, {d6}
 801e75e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801e762:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e766:	e78b      	b.n	801e680 <__kernel_rem_pio2+0x410>
 801e768:	eeb1 5b45 	vneg.f64	d5, d5
 801e76c:	eeb1 6b46 	vneg.f64	d6, d6
 801e770:	ed87 5b00 	vstr	d5, [r7]
 801e774:	eeb1 7b47 	vneg.f64	d7, d7
 801e778:	ed87 6b02 	vstr	d6, [r7, #8]
 801e77c:	e78d      	b.n	801e69a <__kernel_rem_pio2+0x42a>
 801e77e:	bf00      	nop
 801e780:	00000000 	.word	0x00000000
 801e784:	41700000 	.word	0x41700000
 801e788:	00000000 	.word	0x00000000
 801e78c:	3e700000 	.word	0x3e700000
	...

0801e798 <__kernel_tan>:
 801e798:	eeb0 7b40 	vmov.f64	d7, d0
 801e79c:	ee17 3a90 	vmov	r3, s15
 801e7a0:	4989      	ldr	r1, [pc, #548]	; (801e9c8 <__kernel_tan+0x230>)
 801e7a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801e7a6:	428a      	cmp	r2, r1
 801e7a8:	b510      	push	{r4, lr}
 801e7aa:	dc33      	bgt.n	801e814 <__kernel_tan+0x7c>
 801e7ac:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801e7b0:	ee16 1a90 	vmov	r1, s13
 801e7b4:	2900      	cmp	r1, #0
 801e7b6:	d143      	bne.n	801e840 <__kernel_tan+0xa8>
 801e7b8:	ee10 4a10 	vmov	r4, s0
 801e7bc:	1c43      	adds	r3, r0, #1
 801e7be:	4323      	orrs	r3, r4
 801e7c0:	4313      	orrs	r3, r2
 801e7c2:	d108      	bne.n	801e7d6 <__kernel_tan+0x3e>
 801e7c4:	f000 fa20 	bl	801ec08 <fabs>
 801e7c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e7cc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e7d0:	eeb0 0b47 	vmov.f64	d0, d7
 801e7d4:	bd10      	pop	{r4, pc}
 801e7d6:	2801      	cmp	r0, #1
 801e7d8:	d0fa      	beq.n	801e7d0 <__kernel_tan+0x38>
 801e7da:	ee30 6b01 	vadd.f64	d6, d0, d1
 801e7de:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801e7e2:	ec53 2b16 	vmov	r2, r3, d6
 801e7e6:	ee87 3b06 	vdiv.f64	d3, d7, d6
 801e7ea:	460a      	mov	r2, r1
 801e7ec:	ec43 2b15 	vmov	d5, r2, r3
 801e7f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e7f4:	ec53 2b13 	vmov	r2, r3, d3
 801e7f8:	ee35 4b40 	vsub.f64	d4, d5, d0
 801e7fc:	460a      	mov	r2, r1
 801e7fe:	ec43 2b17 	vmov	d7, r2, r3
 801e802:	ee31 4b44 	vsub.f64	d4, d1, d4
 801e806:	eea5 6b07 	vfma.f64	d6, d5, d7
 801e80a:	eea4 6b07 	vfma.f64	d6, d4, d7
 801e80e:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e812:	e7dd      	b.n	801e7d0 <__kernel_tan+0x38>
 801e814:	496d      	ldr	r1, [pc, #436]	; (801e9cc <__kernel_tan+0x234>)
 801e816:	428a      	cmp	r2, r1
 801e818:	dd12      	ble.n	801e840 <__kernel_tan+0xa8>
 801e81a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 801e948 <__kernel_tan+0x1b0>
 801e81e:	2b00      	cmp	r3, #0
 801e820:	bfb8      	it	lt
 801e822:	eeb1 7b40 	vneglt.f64	d7, d0
 801e826:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e82a:	ed9f 7b49 	vldr	d7, [pc, #292]	; 801e950 <__kernel_tan+0x1b8>
 801e82e:	bfb8      	it	lt
 801e830:	eeb1 1b41 	vneglt.f64	d1, d1
 801e834:	ee37 7b41 	vsub.f64	d7, d7, d1
 801e838:	ed9f 1b47 	vldr	d1, [pc, #284]	; 801e958 <__kernel_tan+0x1c0>
 801e83c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e840:	ee27 5b07 	vmul.f64	d5, d7, d7
 801e844:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801e960 <__kernel_tan+0x1c8>
 801e848:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e84c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801e968 <__kernel_tan+0x1d0>
 801e850:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e854:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801e970 <__kernel_tan+0x1d8>
 801e858:	eea4 3b06 	vfma.f64	d3, d4, d6
 801e85c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801e978 <__kernel_tan+0x1e0>
 801e860:	eea3 4b06 	vfma.f64	d4, d3, d6
 801e864:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801e980 <__kernel_tan+0x1e8>
 801e868:	eea4 3b06 	vfma.f64	d3, d4, d6
 801e86c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801e988 <__kernel_tan+0x1f0>
 801e870:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801e990 <__kernel_tan+0x1f8>
 801e874:	eea3 4b06 	vfma.f64	d4, d3, d6
 801e878:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801e998 <__kernel_tan+0x200>
 801e87c:	eea6 3b02 	vfma.f64	d3, d6, d2
 801e880:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801e9a0 <__kernel_tan+0x208>
 801e884:	eea3 2b06 	vfma.f64	d2, d3, d6
 801e888:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801e9a8 <__kernel_tan+0x210>
 801e88c:	eea2 3b06 	vfma.f64	d3, d2, d6
 801e890:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801e9b0 <__kernel_tan+0x218>
 801e894:	eea3 2b06 	vfma.f64	d2, d3, d6
 801e898:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801e9b8 <__kernel_tan+0x220>
 801e89c:	494b      	ldr	r1, [pc, #300]	; (801e9cc <__kernel_tan+0x234>)
 801e89e:	eea2 3b06 	vfma.f64	d3, d2, d6
 801e8a2:	ee27 2b05 	vmul.f64	d2, d7, d5
 801e8a6:	eeb0 6b44 	vmov.f64	d6, d4
 801e8aa:	eeb0 4b41 	vmov.f64	d4, d1
 801e8ae:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e8b2:	eea6 4b02 	vfma.f64	d4, d6, d2
 801e8b6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 801e9c0 <__kernel_tan+0x228>
 801e8ba:	eea4 1b05 	vfma.f64	d1, d4, d5
 801e8be:	428a      	cmp	r2, r1
 801e8c0:	eea2 1b06 	vfma.f64	d1, d2, d6
 801e8c4:	ee37 5b01 	vadd.f64	d5, d7, d1
 801e8c8:	dd1d      	ble.n	801e906 <__kernel_tan+0x16e>
 801e8ca:	ee25 3b05 	vmul.f64	d3, d5, d5
 801e8ce:	179b      	asrs	r3, r3, #30
 801e8d0:	ee06 0a90 	vmov	s13, r0
 801e8d4:	f003 0302 	and.w	r3, r3, #2
 801e8d8:	f1c3 0301 	rsb	r3, r3, #1
 801e8dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801e8e0:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e8e4:	ee83 4b05 	vdiv.f64	d4, d3, d5
 801e8e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801e8ec:	ee34 4b41 	vsub.f64	d4, d4, d1
 801e8f0:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e8f4:	eea7 6b45 	vfms.f64	d6, d7, d5
 801e8f8:	ee07 3a90 	vmov	s15, r3
 801e8fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e900:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e904:	e764      	b.n	801e7d0 <__kernel_tan+0x38>
 801e906:	2801      	cmp	r0, #1
 801e908:	d01a      	beq.n	801e940 <__kernel_tan+0x1a8>
 801e90a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e90e:	ec51 0b15 	vmov	r0, r1, d5
 801e912:	2000      	movs	r0, #0
 801e914:	ec41 0b13 	vmov	d3, r0, r1
 801e918:	ee33 7b47 	vsub.f64	d7, d3, d7
 801e91c:	ee31 1b47 	vsub.f64	d1, d1, d7
 801e920:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801e924:	ee87 4b05 	vdiv.f64	d4, d7, d5
 801e928:	ec53 2b14 	vmov	r2, r3, d4
 801e92c:	4602      	mov	r2, r0
 801e92e:	ec43 2b17 	vmov	d7, r2, r3
 801e932:	eea3 6b07 	vfma.f64	d6, d3, d7
 801e936:	eea1 6b07 	vfma.f64	d6, d1, d7
 801e93a:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e93e:	e747      	b.n	801e7d0 <__kernel_tan+0x38>
 801e940:	eeb0 7b45 	vmov.f64	d7, d5
 801e944:	e744      	b.n	801e7d0 <__kernel_tan+0x38>
 801e946:	bf00      	nop
 801e948:	54442d18 	.word	0x54442d18
 801e94c:	3fe921fb 	.word	0x3fe921fb
 801e950:	33145c07 	.word	0x33145c07
 801e954:	3c81a626 	.word	0x3c81a626
	...
 801e960:	db605373 	.word	0xdb605373
 801e964:	bef375cb 	.word	0xbef375cb
 801e968:	a03792a6 	.word	0xa03792a6
 801e96c:	3f147e88 	.word	0x3f147e88
 801e970:	f2f26501 	.word	0xf2f26501
 801e974:	3f4344d8 	.word	0x3f4344d8
 801e978:	c9560328 	.word	0xc9560328
 801e97c:	3f6d6d22 	.word	0x3f6d6d22
 801e980:	8406d637 	.word	0x8406d637
 801e984:	3f9664f4 	.word	0x3f9664f4
 801e988:	1110fe7a 	.word	0x1110fe7a
 801e98c:	3fc11111 	.word	0x3fc11111
 801e990:	74bf7ad4 	.word	0x74bf7ad4
 801e994:	3efb2a70 	.word	0x3efb2a70
 801e998:	32f0a7e9 	.word	0x32f0a7e9
 801e99c:	3f12b80f 	.word	0x3f12b80f
 801e9a0:	1a8d1068 	.word	0x1a8d1068
 801e9a4:	3f3026f7 	.word	0x3f3026f7
 801e9a8:	fee08315 	.word	0xfee08315
 801e9ac:	3f57dbc8 	.word	0x3f57dbc8
 801e9b0:	e96e8493 	.word	0xe96e8493
 801e9b4:	3f8226e3 	.word	0x3f8226e3
 801e9b8:	1bb341fe 	.word	0x1bb341fe
 801e9bc:	3faba1ba 	.word	0x3faba1ba
 801e9c0:	55555563 	.word	0x55555563
 801e9c4:	3fd55555 	.word	0x3fd55555
 801e9c8:	3e2fffff 	.word	0x3e2fffff
 801e9cc:	3fe59427 	.word	0x3fe59427

0801e9d0 <expm1f>:
 801e9d0:	ee10 2a10 	vmov	r2, s0
 801e9d4:	497d      	ldr	r1, [pc, #500]	; (801ebcc <expm1f+0x1fc>)
 801e9d6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801e9da:	428b      	cmp	r3, r1
 801e9dc:	d920      	bls.n	801ea20 <expm1f+0x50>
 801e9de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e9e2:	d902      	bls.n	801e9ea <expm1f+0x1a>
 801e9e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e9e8:	4770      	bx	lr
 801e9ea:	d105      	bne.n	801e9f8 <expm1f+0x28>
 801e9ec:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801e9f0:	2a00      	cmp	r2, #0
 801e9f2:	fe20 0a27 	vselge.f32	s0, s0, s15
 801e9f6:	4770      	bx	lr
 801e9f8:	2a00      	cmp	r2, #0
 801e9fa:	db05      	blt.n	801ea08 <expm1f+0x38>
 801e9fc:	4974      	ldr	r1, [pc, #464]	; (801ebd0 <expm1f+0x200>)
 801e9fe:	428b      	cmp	r3, r1
 801ea00:	d95c      	bls.n	801eabc <expm1f+0xec>
 801ea02:	2000      	movs	r0, #0
 801ea04:	f7fe bfae 	b.w	801d964 <__math_oflowf>
 801ea08:	eddf 7a72 	vldr	s15, [pc, #456]	; 801ebd4 <expm1f+0x204>
 801ea0c:	ee70 7a27 	vadd.f32	s15, s0, s15
 801ea10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ea14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea18:	d550      	bpl.n	801eabc <expm1f+0xec>
 801ea1a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801ea1e:	4770      	bx	lr
 801ea20:	496d      	ldr	r1, [pc, #436]	; (801ebd8 <expm1f+0x208>)
 801ea22:	428b      	cmp	r3, r1
 801ea24:	d966      	bls.n	801eaf4 <expm1f+0x124>
 801ea26:	496d      	ldr	r1, [pc, #436]	; (801ebdc <expm1f+0x20c>)
 801ea28:	428b      	cmp	r3, r1
 801ea2a:	d847      	bhi.n	801eabc <expm1f+0xec>
 801ea2c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801ebe0 <expm1f+0x210>
 801ea30:	2a00      	cmp	r2, #0
 801ea32:	bfa7      	ittee	ge
 801ea34:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801ea38:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 801ebe4 <expm1f+0x214>
 801ea3c:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 801ebe8 <expm1f+0x218>
 801ea40:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801ea44:	bfac      	ite	ge
 801ea46:	2301      	movge	r3, #1
 801ea48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ea4c:	ee37 0a66 	vsub.f32	s0, s14, s13
 801ea50:	ee77 7a40 	vsub.f32	s15, s14, s0
 801ea54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ea58:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801ea5c:	ee20 4a25 	vmul.f32	s8, s0, s11
 801ea60:	ed9f 6a62 	vldr	s12, [pc, #392]	; 801ebec <expm1f+0x21c>
 801ea64:	eddf 6a62 	vldr	s13, [pc, #392]	; 801ebf0 <expm1f+0x220>
 801ea68:	ed9f 5a62 	vldr	s10, [pc, #392]	; 801ebf4 <expm1f+0x224>
 801ea6c:	ee20 7a04 	vmul.f32	s14, s0, s8
 801ea70:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801ea74:	eee7 6a06 	vfma.f32	s13, s14, s12
 801ea78:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 801ebf8 <expm1f+0x228>
 801ea7c:	eea6 6a87 	vfma.f32	s12, s13, s14
 801ea80:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801ebfc <expm1f+0x22c>
 801ea84:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ea88:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801ea8c:	eea6 5a87 	vfma.f32	s10, s13, s14
 801ea90:	eef0 6a46 	vmov.f32	s13, s12
 801ea94:	eee5 6a07 	vfma.f32	s13, s10, s14
 801ea98:	eee4 4a66 	vfms.f32	s9, s8, s13
 801ea9c:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801eaa0:	eea0 4a64 	vfms.f32	s8, s0, s9
 801eaa4:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801eaa8:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801eaac:	ee66 6a87 	vmul.f32	s13, s13, s14
 801eab0:	bb73      	cbnz	r3, 801eb10 <expm1f+0x140>
 801eab2:	ee90 7a26 	vfnms.f32	s14, s0, s13
 801eab6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801eaba:	4770      	bx	lr
 801eabc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801eac0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801eac4:	2a00      	cmp	r2, #0
 801eac6:	fe67 7a87 	vselge.f32	s15, s15, s14
 801eaca:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801ec00 <expm1f+0x230>
 801eace:	ee40 7a07 	vmla.f32	s15, s0, s14
 801ead2:	eeb0 7a40 	vmov.f32	s14, s0
 801ead6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eada:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801eade:	ee17 3a90 	vmov	r3, s15
 801eae2:	eddf 7a3f 	vldr	s15, [pc, #252]	; 801ebe0 <expm1f+0x210>
 801eae6:	eea6 7ae7 	vfms.f32	s14, s13, s15
 801eaea:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801ebe4 <expm1f+0x214>
 801eaee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801eaf2:	e7ab      	b.n	801ea4c <expm1f+0x7c>
 801eaf4:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801eaf8:	d208      	bcs.n	801eb0c <expm1f+0x13c>
 801eafa:	eddf 7a42 	vldr	s15, [pc, #264]	; 801ec04 <expm1f+0x234>
 801eafe:	ee70 7a27 	vadd.f32	s15, s0, s15
 801eb02:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801eb06:	ee30 0a67 	vsub.f32	s0, s0, s15
 801eb0a:	4770      	bx	lr
 801eb0c:	2300      	movs	r3, #0
 801eb0e:	e7a3      	b.n	801ea58 <expm1f+0x88>
 801eb10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801eb14:	1c5a      	adds	r2, r3, #1
 801eb16:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801eb1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801eb1e:	d106      	bne.n	801eb2e <expm1f+0x15e>
 801eb20:	ee70 7a67 	vsub.f32	s15, s0, s15
 801eb24:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801eb28:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801eb2c:	4770      	bx	lr
 801eb2e:	2b01      	cmp	r3, #1
 801eb30:	d118      	bne.n	801eb64 <expm1f+0x194>
 801eb32:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801eb36:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801eb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb3e:	bf5b      	ittet	pl
 801eb40:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801eb44:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801eb48:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 801eb4c:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801eb50:	bf43      	ittte	mi
 801eb52:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 801eb56:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801eb5a:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801eb5e:	eeb0 0a46 	vmovpl.f32	s0, s12
 801eb62:	4770      	bx	lr
 801eb64:	1c5a      	adds	r2, r3, #1
 801eb66:	2a39      	cmp	r2, #57	; 0x39
 801eb68:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801eb6c:	d90b      	bls.n	801eb86 <expm1f+0x1b6>
 801eb6e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801eb72:	ee76 7a67 	vsub.f32	s15, s12, s15
 801eb76:	ee17 3a90 	vmov	r3, s15
 801eb7a:	4419      	add	r1, r3
 801eb7c:	ee07 1a90 	vmov	s15, r1
 801eb80:	ee37 0ac6 	vsub.f32	s0, s15, s12
 801eb84:	4770      	bx	lr
 801eb86:	2b16      	cmp	r3, #22
 801eb88:	dc11      	bgt.n	801ebae <expm1f+0x1de>
 801eb8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801eb8e:	fa42 f303 	asr.w	r3, r2, r3
 801eb92:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801eb96:	ee07 3a10 	vmov	s14, r3
 801eb9a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801eb9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801eba2:	ee17 3a90 	vmov	r3, s15
 801eba6:	440b      	add	r3, r1
 801eba8:	ee00 3a10 	vmov	s0, r3
 801ebac:	4770      	bx	lr
 801ebae:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801ebb2:	05db      	lsls	r3, r3, #23
 801ebb4:	ee07 3a10 	vmov	s14, r3
 801ebb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ebbc:	ee70 7a67 	vsub.f32	s15, s0, s15
 801ebc0:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ebc4:	ee17 3a90 	vmov	r3, s15
 801ebc8:	e7ed      	b.n	801eba6 <expm1f+0x1d6>
 801ebca:	bf00      	nop
 801ebcc:	4195b843 	.word	0x4195b843
 801ebd0:	42b17217 	.word	0x42b17217
 801ebd4:	0da24260 	.word	0x0da24260
 801ebd8:	3eb17218 	.word	0x3eb17218
 801ebdc:	3f851591 	.word	0x3f851591
 801ebe0:	3f317180 	.word	0x3f317180
 801ebe4:	3717f7d1 	.word	0x3717f7d1
 801ebe8:	b717f7d1 	.word	0xb717f7d1
 801ebec:	b457edbb 	.word	0xb457edbb
 801ebf0:	36867e54 	.word	0x36867e54
 801ebf4:	bd088889 	.word	0xbd088889
 801ebf8:	b8a670cd 	.word	0xb8a670cd
 801ebfc:	3ad00d01 	.word	0x3ad00d01
 801ec00:	3fb8aa3b 	.word	0x3fb8aa3b
 801ec04:	7149f2ca 	.word	0x7149f2ca

0801ec08 <fabs>:
 801ec08:	ec51 0b10 	vmov	r0, r1, d0
 801ec0c:	ee10 2a10 	vmov	r2, s0
 801ec10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ec14:	ec43 2b10 	vmov	d0, r2, r3
 801ec18:	4770      	bx	lr
 801ec1a:	0000      	movs	r0, r0
 801ec1c:	0000      	movs	r0, r0
	...

0801ec20 <scalbn>:
 801ec20:	ee10 1a90 	vmov	r1, s1
 801ec24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ec28:	b98b      	cbnz	r3, 801ec4e <scalbn+0x2e>
 801ec2a:	ee10 3a10 	vmov	r3, s0
 801ec2e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ec32:	4319      	orrs	r1, r3
 801ec34:	d00a      	beq.n	801ec4c <scalbn+0x2c>
 801ec36:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801ece8 <scalbn+0xc8>
 801ec3a:	4b37      	ldr	r3, [pc, #220]	; (801ed18 <scalbn+0xf8>)
 801ec3c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ec40:	4298      	cmp	r0, r3
 801ec42:	da0b      	bge.n	801ec5c <scalbn+0x3c>
 801ec44:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 801ecf0 <scalbn+0xd0>
 801ec48:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ec4c:	4770      	bx	lr
 801ec4e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801ec52:	4293      	cmp	r3, r2
 801ec54:	d107      	bne.n	801ec66 <scalbn+0x46>
 801ec56:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ec5a:	4770      	bx	lr
 801ec5c:	ee10 1a90 	vmov	r1, s1
 801ec60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ec64:	3b36      	subs	r3, #54	; 0x36
 801ec66:	f24c 3250 	movw	r2, #50000	; 0xc350
 801ec6a:	4290      	cmp	r0, r2
 801ec6c:	dd0d      	ble.n	801ec8a <scalbn+0x6a>
 801ec6e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801ecf8 <scalbn+0xd8>
 801ec72:	ee10 3a90 	vmov	r3, s1
 801ec76:	eeb0 6b47 	vmov.f64	d6, d7
 801ec7a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801ed00 <scalbn+0xe0>
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	fe27 7b05 	vselge.f64	d7, d7, d5
 801ec84:	ee27 0b06 	vmul.f64	d0, d7, d6
 801ec88:	4770      	bx	lr
 801ec8a:	4418      	add	r0, r3
 801ec8c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801ec90:	4298      	cmp	r0, r3
 801ec92:	dcec      	bgt.n	801ec6e <scalbn+0x4e>
 801ec94:	2800      	cmp	r0, #0
 801ec96:	dd0a      	ble.n	801ecae <scalbn+0x8e>
 801ec98:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801ec9c:	ec53 2b10 	vmov	r2, r3, d0
 801eca0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801eca4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801eca8:	ec43 2b10 	vmov	d0, r2, r3
 801ecac:	4770      	bx	lr
 801ecae:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801ecb2:	da09      	bge.n	801ecc8 <scalbn+0xa8>
 801ecb4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801ecf0 <scalbn+0xd0>
 801ecb8:	ee10 3a90 	vmov	r3, s1
 801ecbc:	eeb0 6b47 	vmov.f64	d6, d7
 801ecc0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 801ed08 <scalbn+0xe8>
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	e7db      	b.n	801ec80 <scalbn+0x60>
 801ecc8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801eccc:	ec53 2b10 	vmov	r2, r3, d0
 801ecd0:	3036      	adds	r0, #54	; 0x36
 801ecd2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801ecd6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801ecda:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 801ed10 <scalbn+0xf0>
 801ecde:	ec43 2b10 	vmov	d0, r2, r3
 801ece2:	e7b1      	b.n	801ec48 <scalbn+0x28>
 801ece4:	f3af 8000 	nop.w
 801ece8:	00000000 	.word	0x00000000
 801ecec:	43500000 	.word	0x43500000
 801ecf0:	c2f8f359 	.word	0xc2f8f359
 801ecf4:	01a56e1f 	.word	0x01a56e1f
 801ecf8:	8800759c 	.word	0x8800759c
 801ecfc:	7e37e43c 	.word	0x7e37e43c
 801ed00:	8800759c 	.word	0x8800759c
 801ed04:	fe37e43c 	.word	0xfe37e43c
 801ed08:	c2f8f359 	.word	0xc2f8f359
 801ed0c:	81a56e1f 	.word	0x81a56e1f
 801ed10:	00000000 	.word	0x00000000
 801ed14:	3c900000 	.word	0x3c900000
 801ed18:	ffff3cb0 	.word	0xffff3cb0

0801ed1c <__kernel_rem_pio2f>:
 801ed1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed20:	ed2d 8b04 	vpush	{d8-d9}
 801ed24:	b0d9      	sub	sp, #356	; 0x164
 801ed26:	4688      	mov	r8, r1
 801ed28:	9002      	str	r0, [sp, #8]
 801ed2a:	49b8      	ldr	r1, [pc, #736]	; (801f00c <__kernel_rem_pio2f+0x2f0>)
 801ed2c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801ed2e:	9301      	str	r3, [sp, #4]
 801ed30:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801ed34:	9901      	ldr	r1, [sp, #4]
 801ed36:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801ed38:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 801ed3c:	1d11      	adds	r1, r2, #4
 801ed3e:	db25      	blt.n	801ed8c <__kernel_rem_pio2f+0x70>
 801ed40:	1ed0      	subs	r0, r2, #3
 801ed42:	bf48      	it	mi
 801ed44:	1d10      	addmi	r0, r2, #4
 801ed46:	10c0      	asrs	r0, r0, #3
 801ed48:	1c45      	adds	r5, r0, #1
 801ed4a:	00e9      	lsls	r1, r5, #3
 801ed4c:	eba0 070b 	sub.w	r7, r0, fp
 801ed50:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801f01c <__kernel_rem_pio2f+0x300>
 801ed54:	9103      	str	r1, [sp, #12]
 801ed56:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801ed5a:	eb0a 0c0b 	add.w	ip, sl, fp
 801ed5e:	ae1c      	add	r6, sp, #112	; 0x70
 801ed60:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801ed64:	2400      	movs	r4, #0
 801ed66:	4564      	cmp	r4, ip
 801ed68:	dd12      	ble.n	801ed90 <__kernel_rem_pio2f+0x74>
 801ed6a:	9901      	ldr	r1, [sp, #4]
 801ed6c:	ac1c      	add	r4, sp, #112	; 0x70
 801ed6e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ed72:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801ed76:	f04f 0c00 	mov.w	ip, #0
 801ed7a:	45d4      	cmp	ip, sl
 801ed7c:	dc27      	bgt.n	801edce <__kernel_rem_pio2f+0xb2>
 801ed7e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801ed82:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801f01c <__kernel_rem_pio2f+0x300>
 801ed86:	4627      	mov	r7, r4
 801ed88:	2600      	movs	r6, #0
 801ed8a:	e016      	b.n	801edba <__kernel_rem_pio2f+0x9e>
 801ed8c:	2000      	movs	r0, #0
 801ed8e:	e7db      	b.n	801ed48 <__kernel_rem_pio2f+0x2c>
 801ed90:	42e7      	cmn	r7, r4
 801ed92:	bf5d      	ittte	pl
 801ed94:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801ed98:	ee07 1a90 	vmovpl	s15, r1
 801ed9c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801eda0:	eef0 7a47 	vmovmi.f32	s15, s14
 801eda4:	ece6 7a01 	vstmia	r6!, {s15}
 801eda8:	3401      	adds	r4, #1
 801edaa:	e7dc      	b.n	801ed66 <__kernel_rem_pio2f+0x4a>
 801edac:	ecfe 6a01 	vldmia	lr!, {s13}
 801edb0:	ed97 7a00 	vldr	s14, [r7]
 801edb4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801edb8:	3601      	adds	r6, #1
 801edba:	455e      	cmp	r6, fp
 801edbc:	f1a7 0704 	sub.w	r7, r7, #4
 801edc0:	ddf4      	ble.n	801edac <__kernel_rem_pio2f+0x90>
 801edc2:	ece9 7a01 	vstmia	r9!, {s15}
 801edc6:	f10c 0c01 	add.w	ip, ip, #1
 801edca:	3404      	adds	r4, #4
 801edcc:	e7d5      	b.n	801ed7a <__kernel_rem_pio2f+0x5e>
 801edce:	a908      	add	r1, sp, #32
 801edd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801edd4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801edd8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801f018 <__kernel_rem_pio2f+0x2fc>
 801eddc:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801f014 <__kernel_rem_pio2f+0x2f8>
 801ede0:	9105      	str	r1, [sp, #20]
 801ede2:	9304      	str	r3, [sp, #16]
 801ede4:	4656      	mov	r6, sl
 801ede6:	00b3      	lsls	r3, r6, #2
 801ede8:	9306      	str	r3, [sp, #24]
 801edea:	ab58      	add	r3, sp, #352	; 0x160
 801edec:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801edf0:	ac08      	add	r4, sp, #32
 801edf2:	ab44      	add	r3, sp, #272	; 0x110
 801edf4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801edf8:	46a4      	mov	ip, r4
 801edfa:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801edfe:	4637      	mov	r7, r6
 801ee00:	2f00      	cmp	r7, #0
 801ee02:	f1a0 0004 	sub.w	r0, r0, #4
 801ee06:	dc4a      	bgt.n	801ee9e <__kernel_rem_pio2f+0x182>
 801ee08:	4628      	mov	r0, r5
 801ee0a:	9207      	str	r2, [sp, #28]
 801ee0c:	f000 fab2 	bl	801f374 <scalbnf>
 801ee10:	eeb0 8a40 	vmov.f32	s16, s0
 801ee14:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801ee18:	ee28 0a00 	vmul.f32	s0, s16, s0
 801ee1c:	f000 fa68 	bl	801f2f0 <floorf>
 801ee20:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801ee24:	eea0 8a67 	vfms.f32	s16, s0, s15
 801ee28:	2d00      	cmp	r5, #0
 801ee2a:	9a07      	ldr	r2, [sp, #28]
 801ee2c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801ee30:	ee17 9a90 	vmov	r9, s15
 801ee34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ee38:	ee38 8a67 	vsub.f32	s16, s16, s15
 801ee3c:	dd41      	ble.n	801eec2 <__kernel_rem_pio2f+0x1a6>
 801ee3e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801ee42:	ab08      	add	r3, sp, #32
 801ee44:	f1c5 0e08 	rsb	lr, r5, #8
 801ee48:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801ee4c:	fa47 f00e 	asr.w	r0, r7, lr
 801ee50:	4481      	add	r9, r0
 801ee52:	fa00 f00e 	lsl.w	r0, r0, lr
 801ee56:	1a3f      	subs	r7, r7, r0
 801ee58:	f1c5 0007 	rsb	r0, r5, #7
 801ee5c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801ee60:	4107      	asrs	r7, r0
 801ee62:	2f00      	cmp	r7, #0
 801ee64:	dd3c      	ble.n	801eee0 <__kernel_rem_pio2f+0x1c4>
 801ee66:	f04f 0e00 	mov.w	lr, #0
 801ee6a:	f109 0901 	add.w	r9, r9, #1
 801ee6e:	4671      	mov	r1, lr
 801ee70:	4576      	cmp	r6, lr
 801ee72:	dc67      	bgt.n	801ef44 <__kernel_rem_pio2f+0x228>
 801ee74:	2d00      	cmp	r5, #0
 801ee76:	dd03      	ble.n	801ee80 <__kernel_rem_pio2f+0x164>
 801ee78:	2d01      	cmp	r5, #1
 801ee7a:	d074      	beq.n	801ef66 <__kernel_rem_pio2f+0x24a>
 801ee7c:	2d02      	cmp	r5, #2
 801ee7e:	d07b      	beq.n	801ef78 <__kernel_rem_pio2f+0x25c>
 801ee80:	2f02      	cmp	r7, #2
 801ee82:	d12d      	bne.n	801eee0 <__kernel_rem_pio2f+0x1c4>
 801ee84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ee88:	ee30 8a48 	vsub.f32	s16, s0, s16
 801ee8c:	b341      	cbz	r1, 801eee0 <__kernel_rem_pio2f+0x1c4>
 801ee8e:	4628      	mov	r0, r5
 801ee90:	9207      	str	r2, [sp, #28]
 801ee92:	f000 fa6f 	bl	801f374 <scalbnf>
 801ee96:	9a07      	ldr	r2, [sp, #28]
 801ee98:	ee38 8a40 	vsub.f32	s16, s16, s0
 801ee9c:	e020      	b.n	801eee0 <__kernel_rem_pio2f+0x1c4>
 801ee9e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801eea2:	3f01      	subs	r7, #1
 801eea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eeac:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801eeb0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801eeb4:	ecac 0a01 	vstmia	ip!, {s0}
 801eeb8:	ed90 0a00 	vldr	s0, [r0]
 801eebc:	ee37 0a80 	vadd.f32	s0, s15, s0
 801eec0:	e79e      	b.n	801ee00 <__kernel_rem_pio2f+0xe4>
 801eec2:	d105      	bne.n	801eed0 <__kernel_rem_pio2f+0x1b4>
 801eec4:	1e70      	subs	r0, r6, #1
 801eec6:	ab08      	add	r3, sp, #32
 801eec8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801eecc:	11ff      	asrs	r7, r7, #7
 801eece:	e7c8      	b.n	801ee62 <__kernel_rem_pio2f+0x146>
 801eed0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801eed4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801eed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eedc:	da30      	bge.n	801ef40 <__kernel_rem_pio2f+0x224>
 801eede:	2700      	movs	r7, #0
 801eee0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801eee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eee8:	f040 809a 	bne.w	801f020 <__kernel_rem_pio2f+0x304>
 801eeec:	1e74      	subs	r4, r6, #1
 801eeee:	46a4      	mov	ip, r4
 801eef0:	2100      	movs	r1, #0
 801eef2:	45d4      	cmp	ip, sl
 801eef4:	da47      	bge.n	801ef86 <__kernel_rem_pio2f+0x26a>
 801eef6:	2900      	cmp	r1, #0
 801eef8:	d063      	beq.n	801efc2 <__kernel_rem_pio2f+0x2a6>
 801eefa:	ab08      	add	r3, sp, #32
 801eefc:	3d08      	subs	r5, #8
 801eefe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d07f      	beq.n	801f006 <__kernel_rem_pio2f+0x2ea>
 801ef06:	4628      	mov	r0, r5
 801ef08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ef0c:	f000 fa32 	bl	801f374 <scalbnf>
 801ef10:	1c63      	adds	r3, r4, #1
 801ef12:	aa44      	add	r2, sp, #272	; 0x110
 801ef14:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801f018 <__kernel_rem_pio2f+0x2fc>
 801ef18:	0099      	lsls	r1, r3, #2
 801ef1a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801ef1e:	4623      	mov	r3, r4
 801ef20:	2b00      	cmp	r3, #0
 801ef22:	f280 80ad 	bge.w	801f080 <__kernel_rem_pio2f+0x364>
 801ef26:	4623      	mov	r3, r4
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	f2c0 80cb 	blt.w	801f0c4 <__kernel_rem_pio2f+0x3a8>
 801ef2e:	aa44      	add	r2, sp, #272	; 0x110
 801ef30:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801ef34:	4e36      	ldr	r6, [pc, #216]	; (801f010 <__kernel_rem_pio2f+0x2f4>)
 801ef36:	eddf 7a39 	vldr	s15, [pc, #228]	; 801f01c <__kernel_rem_pio2f+0x300>
 801ef3a:	2000      	movs	r0, #0
 801ef3c:	1ae2      	subs	r2, r4, r3
 801ef3e:	e0b6      	b.n	801f0ae <__kernel_rem_pio2f+0x392>
 801ef40:	2702      	movs	r7, #2
 801ef42:	e790      	b.n	801ee66 <__kernel_rem_pio2f+0x14a>
 801ef44:	6820      	ldr	r0, [r4, #0]
 801ef46:	b949      	cbnz	r1, 801ef5c <__kernel_rem_pio2f+0x240>
 801ef48:	b118      	cbz	r0, 801ef52 <__kernel_rem_pio2f+0x236>
 801ef4a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801ef4e:	6020      	str	r0, [r4, #0]
 801ef50:	2001      	movs	r0, #1
 801ef52:	f10e 0e01 	add.w	lr, lr, #1
 801ef56:	3404      	adds	r4, #4
 801ef58:	4601      	mov	r1, r0
 801ef5a:	e789      	b.n	801ee70 <__kernel_rem_pio2f+0x154>
 801ef5c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801ef60:	6020      	str	r0, [r4, #0]
 801ef62:	4608      	mov	r0, r1
 801ef64:	e7f5      	b.n	801ef52 <__kernel_rem_pio2f+0x236>
 801ef66:	1e74      	subs	r4, r6, #1
 801ef68:	ab08      	add	r3, sp, #32
 801ef6a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ef6e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ef72:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ef76:	e783      	b.n	801ee80 <__kernel_rem_pio2f+0x164>
 801ef78:	1e74      	subs	r4, r6, #1
 801ef7a:	ab08      	add	r3, sp, #32
 801ef7c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ef80:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801ef84:	e7f5      	b.n	801ef72 <__kernel_rem_pio2f+0x256>
 801ef86:	ab08      	add	r3, sp, #32
 801ef88:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801ef8c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801ef90:	4301      	orrs	r1, r0
 801ef92:	e7ae      	b.n	801eef2 <__kernel_rem_pio2f+0x1d6>
 801ef94:	3001      	adds	r0, #1
 801ef96:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801ef9a:	2f00      	cmp	r7, #0
 801ef9c:	d0fa      	beq.n	801ef94 <__kernel_rem_pio2f+0x278>
 801ef9e:	9b06      	ldr	r3, [sp, #24]
 801efa0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801efa4:	eb0d 0403 	add.w	r4, sp, r3
 801efa8:	9b01      	ldr	r3, [sp, #4]
 801efaa:	18f7      	adds	r7, r6, r3
 801efac:	ab1c      	add	r3, sp, #112	; 0x70
 801efae:	f106 0c01 	add.w	ip, r6, #1
 801efb2:	3c4c      	subs	r4, #76	; 0x4c
 801efb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801efb8:	4430      	add	r0, r6
 801efba:	4560      	cmp	r0, ip
 801efbc:	da04      	bge.n	801efc8 <__kernel_rem_pio2f+0x2ac>
 801efbe:	4606      	mov	r6, r0
 801efc0:	e711      	b.n	801ede6 <__kernel_rem_pio2f+0xca>
 801efc2:	9c05      	ldr	r4, [sp, #20]
 801efc4:	2001      	movs	r0, #1
 801efc6:	e7e6      	b.n	801ef96 <__kernel_rem_pio2f+0x27a>
 801efc8:	9b04      	ldr	r3, [sp, #16]
 801efca:	f8dd e008 	ldr.w	lr, [sp, #8]
 801efce:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801efd2:	9306      	str	r3, [sp, #24]
 801efd4:	ee07 3a90 	vmov	s15, r3
 801efd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801efdc:	2600      	movs	r6, #0
 801efde:	ece7 7a01 	vstmia	r7!, {s15}
 801efe2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801f01c <__kernel_rem_pio2f+0x300>
 801efe6:	46b9      	mov	r9, r7
 801efe8:	455e      	cmp	r6, fp
 801efea:	dd04      	ble.n	801eff6 <__kernel_rem_pio2f+0x2da>
 801efec:	ece4 7a01 	vstmia	r4!, {s15}
 801eff0:	f10c 0c01 	add.w	ip, ip, #1
 801eff4:	e7e1      	b.n	801efba <__kernel_rem_pio2f+0x29e>
 801eff6:	ecfe 6a01 	vldmia	lr!, {s13}
 801effa:	ed39 7a01 	vldmdb	r9!, {s14}
 801effe:	3601      	adds	r6, #1
 801f000:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f004:	e7f0      	b.n	801efe8 <__kernel_rem_pio2f+0x2cc>
 801f006:	3c01      	subs	r4, #1
 801f008:	e777      	b.n	801eefa <__kernel_rem_pio2f+0x1de>
 801f00a:	bf00      	nop
 801f00c:	08038334 	.word	0x08038334
 801f010:	08038308 	.word	0x08038308
 801f014:	43800000 	.word	0x43800000
 801f018:	3b800000 	.word	0x3b800000
 801f01c:	00000000 	.word	0x00000000
 801f020:	9b03      	ldr	r3, [sp, #12]
 801f022:	eeb0 0a48 	vmov.f32	s0, s16
 801f026:	1a98      	subs	r0, r3, r2
 801f028:	f000 f9a4 	bl	801f374 <scalbnf>
 801f02c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801f014 <__kernel_rem_pio2f+0x2f8>
 801f030:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f038:	db19      	blt.n	801f06e <__kernel_rem_pio2f+0x352>
 801f03a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801f018 <__kernel_rem_pio2f+0x2fc>
 801f03e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f042:	aa08      	add	r2, sp, #32
 801f044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f048:	1c74      	adds	r4, r6, #1
 801f04a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f04e:	3508      	adds	r5, #8
 801f050:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801f054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f058:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f05c:	ee10 3a10 	vmov	r3, s0
 801f060:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801f064:	ee17 3a90 	vmov	r3, s15
 801f068:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801f06c:	e74b      	b.n	801ef06 <__kernel_rem_pio2f+0x1ea>
 801f06e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f072:	aa08      	add	r2, sp, #32
 801f074:	ee10 3a10 	vmov	r3, s0
 801f078:	4634      	mov	r4, r6
 801f07a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801f07e:	e742      	b.n	801ef06 <__kernel_rem_pio2f+0x1ea>
 801f080:	a808      	add	r0, sp, #32
 801f082:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801f086:	9001      	str	r0, [sp, #4]
 801f088:	ee07 0a90 	vmov	s15, r0
 801f08c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f090:	3b01      	subs	r3, #1
 801f092:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f096:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f09a:	ed62 7a01 	vstmdb	r2!, {s15}
 801f09e:	e73f      	b.n	801ef20 <__kernel_rem_pio2f+0x204>
 801f0a0:	ecf6 6a01 	vldmia	r6!, {s13}
 801f0a4:	ecb5 7a01 	vldmia	r5!, {s14}
 801f0a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f0ac:	3001      	adds	r0, #1
 801f0ae:	4550      	cmp	r0, sl
 801f0b0:	dc01      	bgt.n	801f0b6 <__kernel_rem_pio2f+0x39a>
 801f0b2:	4290      	cmp	r0, r2
 801f0b4:	ddf4      	ble.n	801f0a0 <__kernel_rem_pio2f+0x384>
 801f0b6:	a858      	add	r0, sp, #352	; 0x160
 801f0b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801f0bc:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801f0c0:	3b01      	subs	r3, #1
 801f0c2:	e731      	b.n	801ef28 <__kernel_rem_pio2f+0x20c>
 801f0c4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801f0c6:	2b02      	cmp	r3, #2
 801f0c8:	dc09      	bgt.n	801f0de <__kernel_rem_pio2f+0x3c2>
 801f0ca:	2b00      	cmp	r3, #0
 801f0cc:	dc2b      	bgt.n	801f126 <__kernel_rem_pio2f+0x40a>
 801f0ce:	d044      	beq.n	801f15a <__kernel_rem_pio2f+0x43e>
 801f0d0:	f009 0007 	and.w	r0, r9, #7
 801f0d4:	b059      	add	sp, #356	; 0x164
 801f0d6:	ecbd 8b04 	vpop	{d8-d9}
 801f0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0de:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801f0e0:	2b03      	cmp	r3, #3
 801f0e2:	d1f5      	bne.n	801f0d0 <__kernel_rem_pio2f+0x3b4>
 801f0e4:	aa30      	add	r2, sp, #192	; 0xc0
 801f0e6:	1f0b      	subs	r3, r1, #4
 801f0e8:	4413      	add	r3, r2
 801f0ea:	461a      	mov	r2, r3
 801f0ec:	4620      	mov	r0, r4
 801f0ee:	2800      	cmp	r0, #0
 801f0f0:	f1a2 0204 	sub.w	r2, r2, #4
 801f0f4:	dc52      	bgt.n	801f19c <__kernel_rem_pio2f+0x480>
 801f0f6:	4622      	mov	r2, r4
 801f0f8:	2a01      	cmp	r2, #1
 801f0fa:	f1a3 0304 	sub.w	r3, r3, #4
 801f0fe:	dc5d      	bgt.n	801f1bc <__kernel_rem_pio2f+0x4a0>
 801f100:	ab30      	add	r3, sp, #192	; 0xc0
 801f102:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801f01c <__kernel_rem_pio2f+0x300>
 801f106:	440b      	add	r3, r1
 801f108:	2c01      	cmp	r4, #1
 801f10a:	dc67      	bgt.n	801f1dc <__kernel_rem_pio2f+0x4c0>
 801f10c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801f110:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801f114:	2f00      	cmp	r7, #0
 801f116:	d167      	bne.n	801f1e8 <__kernel_rem_pio2f+0x4cc>
 801f118:	edc8 6a00 	vstr	s13, [r8]
 801f11c:	ed88 7a01 	vstr	s14, [r8, #4]
 801f120:	edc8 7a02 	vstr	s15, [r8, #8]
 801f124:	e7d4      	b.n	801f0d0 <__kernel_rem_pio2f+0x3b4>
 801f126:	ab30      	add	r3, sp, #192	; 0xc0
 801f128:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801f01c <__kernel_rem_pio2f+0x300>
 801f12c:	440b      	add	r3, r1
 801f12e:	4622      	mov	r2, r4
 801f130:	2a00      	cmp	r2, #0
 801f132:	da24      	bge.n	801f17e <__kernel_rem_pio2f+0x462>
 801f134:	b34f      	cbz	r7, 801f18a <__kernel_rem_pio2f+0x46e>
 801f136:	eef1 7a47 	vneg.f32	s15, s14
 801f13a:	edc8 7a00 	vstr	s15, [r8]
 801f13e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801f142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f146:	aa31      	add	r2, sp, #196	; 0xc4
 801f148:	2301      	movs	r3, #1
 801f14a:	429c      	cmp	r4, r3
 801f14c:	da20      	bge.n	801f190 <__kernel_rem_pio2f+0x474>
 801f14e:	b10f      	cbz	r7, 801f154 <__kernel_rem_pio2f+0x438>
 801f150:	eef1 7a67 	vneg.f32	s15, s15
 801f154:	edc8 7a01 	vstr	s15, [r8, #4]
 801f158:	e7ba      	b.n	801f0d0 <__kernel_rem_pio2f+0x3b4>
 801f15a:	ab30      	add	r3, sp, #192	; 0xc0
 801f15c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801f01c <__kernel_rem_pio2f+0x300>
 801f160:	440b      	add	r3, r1
 801f162:	2c00      	cmp	r4, #0
 801f164:	da05      	bge.n	801f172 <__kernel_rem_pio2f+0x456>
 801f166:	b10f      	cbz	r7, 801f16c <__kernel_rem_pio2f+0x450>
 801f168:	eef1 7a67 	vneg.f32	s15, s15
 801f16c:	edc8 7a00 	vstr	s15, [r8]
 801f170:	e7ae      	b.n	801f0d0 <__kernel_rem_pio2f+0x3b4>
 801f172:	ed33 7a01 	vldmdb	r3!, {s14}
 801f176:	3c01      	subs	r4, #1
 801f178:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f17c:	e7f1      	b.n	801f162 <__kernel_rem_pio2f+0x446>
 801f17e:	ed73 7a01 	vldmdb	r3!, {s15}
 801f182:	3a01      	subs	r2, #1
 801f184:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f188:	e7d2      	b.n	801f130 <__kernel_rem_pio2f+0x414>
 801f18a:	eef0 7a47 	vmov.f32	s15, s14
 801f18e:	e7d4      	b.n	801f13a <__kernel_rem_pio2f+0x41e>
 801f190:	ecb2 7a01 	vldmia	r2!, {s14}
 801f194:	3301      	adds	r3, #1
 801f196:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f19a:	e7d6      	b.n	801f14a <__kernel_rem_pio2f+0x42e>
 801f19c:	edd2 7a00 	vldr	s15, [r2]
 801f1a0:	edd2 6a01 	vldr	s13, [r2, #4]
 801f1a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f1a8:	3801      	subs	r0, #1
 801f1aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f1ae:	ed82 7a00 	vstr	s14, [r2]
 801f1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f1b6:	edc2 7a01 	vstr	s15, [r2, #4]
 801f1ba:	e798      	b.n	801f0ee <__kernel_rem_pio2f+0x3d2>
 801f1bc:	edd3 7a00 	vldr	s15, [r3]
 801f1c0:	edd3 6a01 	vldr	s13, [r3, #4]
 801f1c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f1c8:	3a01      	subs	r2, #1
 801f1ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f1ce:	ed83 7a00 	vstr	s14, [r3]
 801f1d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f1d6:	edc3 7a01 	vstr	s15, [r3, #4]
 801f1da:	e78d      	b.n	801f0f8 <__kernel_rem_pio2f+0x3dc>
 801f1dc:	ed33 7a01 	vldmdb	r3!, {s14}
 801f1e0:	3c01      	subs	r4, #1
 801f1e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f1e6:	e78f      	b.n	801f108 <__kernel_rem_pio2f+0x3ec>
 801f1e8:	eef1 6a66 	vneg.f32	s13, s13
 801f1ec:	eeb1 7a47 	vneg.f32	s14, s14
 801f1f0:	edc8 6a00 	vstr	s13, [r8]
 801f1f4:	ed88 7a01 	vstr	s14, [r8, #4]
 801f1f8:	eef1 7a67 	vneg.f32	s15, s15
 801f1fc:	e790      	b.n	801f120 <__kernel_rem_pio2f+0x404>
 801f1fe:	bf00      	nop

0801f200 <floor>:
 801f200:	ee10 1a90 	vmov	r1, s1
 801f204:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f208:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801f20c:	2b13      	cmp	r3, #19
 801f20e:	b530      	push	{r4, r5, lr}
 801f210:	ee10 0a10 	vmov	r0, s0
 801f214:	ee10 5a10 	vmov	r5, s0
 801f218:	dc31      	bgt.n	801f27e <floor+0x7e>
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	da15      	bge.n	801f24a <floor+0x4a>
 801f21e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801f2e0 <floor+0xe0>
 801f222:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f226:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f22e:	dd07      	ble.n	801f240 <floor+0x40>
 801f230:	2900      	cmp	r1, #0
 801f232:	da4e      	bge.n	801f2d2 <floor+0xd2>
 801f234:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f238:	4308      	orrs	r0, r1
 801f23a:	d04d      	beq.n	801f2d8 <floor+0xd8>
 801f23c:	492a      	ldr	r1, [pc, #168]	; (801f2e8 <floor+0xe8>)
 801f23e:	2000      	movs	r0, #0
 801f240:	460b      	mov	r3, r1
 801f242:	4602      	mov	r2, r0
 801f244:	ec43 2b10 	vmov	d0, r2, r3
 801f248:	e020      	b.n	801f28c <floor+0x8c>
 801f24a:	4a28      	ldr	r2, [pc, #160]	; (801f2ec <floor+0xec>)
 801f24c:	411a      	asrs	r2, r3
 801f24e:	ea01 0402 	and.w	r4, r1, r2
 801f252:	4304      	orrs	r4, r0
 801f254:	d01a      	beq.n	801f28c <floor+0x8c>
 801f256:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801f2e0 <floor+0xe0>
 801f25a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f25e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f266:	ddeb      	ble.n	801f240 <floor+0x40>
 801f268:	2900      	cmp	r1, #0
 801f26a:	bfbe      	ittt	lt
 801f26c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801f270:	fa40 f303 	asrlt.w	r3, r0, r3
 801f274:	18c9      	addlt	r1, r1, r3
 801f276:	ea21 0102 	bic.w	r1, r1, r2
 801f27a:	2000      	movs	r0, #0
 801f27c:	e7e0      	b.n	801f240 <floor+0x40>
 801f27e:	2b33      	cmp	r3, #51	; 0x33
 801f280:	dd05      	ble.n	801f28e <floor+0x8e>
 801f282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f286:	d101      	bne.n	801f28c <floor+0x8c>
 801f288:	ee30 0b00 	vadd.f64	d0, d0, d0
 801f28c:	bd30      	pop	{r4, r5, pc}
 801f28e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801f292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f296:	40e2      	lsrs	r2, r4
 801f298:	4210      	tst	r0, r2
 801f29a:	d0f7      	beq.n	801f28c <floor+0x8c>
 801f29c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801f2e0 <floor+0xe0>
 801f2a0:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f2a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2ac:	ddc8      	ble.n	801f240 <floor+0x40>
 801f2ae:	2900      	cmp	r1, #0
 801f2b0:	da02      	bge.n	801f2b8 <floor+0xb8>
 801f2b2:	2b14      	cmp	r3, #20
 801f2b4:	d103      	bne.n	801f2be <floor+0xbe>
 801f2b6:	3101      	adds	r1, #1
 801f2b8:	ea20 0002 	bic.w	r0, r0, r2
 801f2bc:	e7c0      	b.n	801f240 <floor+0x40>
 801f2be:	2401      	movs	r4, #1
 801f2c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801f2c4:	fa04 f303 	lsl.w	r3, r4, r3
 801f2c8:	4418      	add	r0, r3
 801f2ca:	4285      	cmp	r5, r0
 801f2cc:	bf88      	it	hi
 801f2ce:	1909      	addhi	r1, r1, r4
 801f2d0:	e7f2      	b.n	801f2b8 <floor+0xb8>
 801f2d2:	2000      	movs	r0, #0
 801f2d4:	4601      	mov	r1, r0
 801f2d6:	e7b3      	b.n	801f240 <floor+0x40>
 801f2d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801f2dc:	e7b0      	b.n	801f240 <floor+0x40>
 801f2de:	bf00      	nop
 801f2e0:	8800759c 	.word	0x8800759c
 801f2e4:	7e37e43c 	.word	0x7e37e43c
 801f2e8:	bff00000 	.word	0xbff00000
 801f2ec:	000fffff 	.word	0x000fffff

0801f2f0 <floorf>:
 801f2f0:	ee10 3a10 	vmov	r3, s0
 801f2f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f2f8:	3a7f      	subs	r2, #127	; 0x7f
 801f2fa:	2a16      	cmp	r2, #22
 801f2fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801f300:	dc2a      	bgt.n	801f358 <floorf+0x68>
 801f302:	2a00      	cmp	r2, #0
 801f304:	da11      	bge.n	801f32a <floorf+0x3a>
 801f306:	eddf 7a18 	vldr	s15, [pc, #96]	; 801f368 <floorf+0x78>
 801f30a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f30e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f316:	dd05      	ble.n	801f324 <floorf+0x34>
 801f318:	2b00      	cmp	r3, #0
 801f31a:	da23      	bge.n	801f364 <floorf+0x74>
 801f31c:	4a13      	ldr	r2, [pc, #76]	; (801f36c <floorf+0x7c>)
 801f31e:	2900      	cmp	r1, #0
 801f320:	bf18      	it	ne
 801f322:	4613      	movne	r3, r2
 801f324:	ee00 3a10 	vmov	s0, r3
 801f328:	4770      	bx	lr
 801f32a:	4911      	ldr	r1, [pc, #68]	; (801f370 <floorf+0x80>)
 801f32c:	4111      	asrs	r1, r2
 801f32e:	420b      	tst	r3, r1
 801f330:	d0fa      	beq.n	801f328 <floorf+0x38>
 801f332:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801f368 <floorf+0x78>
 801f336:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f33a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f342:	ddef      	ble.n	801f324 <floorf+0x34>
 801f344:	2b00      	cmp	r3, #0
 801f346:	bfbe      	ittt	lt
 801f348:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801f34c:	fa40 f202 	asrlt.w	r2, r0, r2
 801f350:	189b      	addlt	r3, r3, r2
 801f352:	ea23 0301 	bic.w	r3, r3, r1
 801f356:	e7e5      	b.n	801f324 <floorf+0x34>
 801f358:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f35c:	d3e4      	bcc.n	801f328 <floorf+0x38>
 801f35e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f362:	4770      	bx	lr
 801f364:	2300      	movs	r3, #0
 801f366:	e7dd      	b.n	801f324 <floorf+0x34>
 801f368:	7149f2ca 	.word	0x7149f2ca
 801f36c:	bf800000 	.word	0xbf800000
 801f370:	007fffff 	.word	0x007fffff

0801f374 <scalbnf>:
 801f374:	ee10 3a10 	vmov	r3, s0
 801f378:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801f37c:	d02a      	beq.n	801f3d4 <scalbnf+0x60>
 801f37e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801f382:	d302      	bcc.n	801f38a <scalbnf+0x16>
 801f384:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f388:	4770      	bx	lr
 801f38a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801f38e:	d122      	bne.n	801f3d6 <scalbnf+0x62>
 801f390:	4b23      	ldr	r3, [pc, #140]	; (801f420 <scalbnf+0xac>)
 801f392:	eddf 7a24 	vldr	s15, [pc, #144]	; 801f424 <scalbnf+0xb0>
 801f396:	4298      	cmp	r0, r3
 801f398:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f39c:	db16      	blt.n	801f3cc <scalbnf+0x58>
 801f39e:	ee10 3a10 	vmov	r3, s0
 801f3a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f3a6:	3a19      	subs	r2, #25
 801f3a8:	f24c 3150 	movw	r1, #50000	; 0xc350
 801f3ac:	4288      	cmp	r0, r1
 801f3ae:	dd14      	ble.n	801f3da <scalbnf+0x66>
 801f3b0:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801f428 <scalbnf+0xb4>
 801f3b4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801f42c <scalbnf+0xb8>
 801f3b8:	ee10 3a10 	vmov	r3, s0
 801f3bc:	eeb0 7a67 	vmov.f32	s14, s15
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801f3c6:	ee27 0a87 	vmul.f32	s0, s15, s14
 801f3ca:	4770      	bx	lr
 801f3cc:	eddf 7a18 	vldr	s15, [pc, #96]	; 801f430 <scalbnf+0xbc>
 801f3d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f3d4:	4770      	bx	lr
 801f3d6:	0dd2      	lsrs	r2, r2, #23
 801f3d8:	e7e6      	b.n	801f3a8 <scalbnf+0x34>
 801f3da:	4410      	add	r0, r2
 801f3dc:	28fe      	cmp	r0, #254	; 0xfe
 801f3de:	dce7      	bgt.n	801f3b0 <scalbnf+0x3c>
 801f3e0:	2800      	cmp	r0, #0
 801f3e2:	dd06      	ble.n	801f3f2 <scalbnf+0x7e>
 801f3e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f3e8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801f3ec:	ee00 3a10 	vmov	s0, r3
 801f3f0:	4770      	bx	lr
 801f3f2:	f110 0f16 	cmn.w	r0, #22
 801f3f6:	da09      	bge.n	801f40c <scalbnf+0x98>
 801f3f8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801f430 <scalbnf+0xbc>
 801f3fc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801f434 <scalbnf+0xc0>
 801f400:	ee10 3a10 	vmov	r3, s0
 801f404:	eeb0 7a67 	vmov.f32	s14, s15
 801f408:	2b00      	cmp	r3, #0
 801f40a:	e7da      	b.n	801f3c2 <scalbnf+0x4e>
 801f40c:	3019      	adds	r0, #25
 801f40e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f412:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801f416:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801f438 <scalbnf+0xc4>
 801f41a:	ee07 3a90 	vmov	s15, r3
 801f41e:	e7d7      	b.n	801f3d0 <scalbnf+0x5c>
 801f420:	ffff3cb0 	.word	0xffff3cb0
 801f424:	4c000000 	.word	0x4c000000
 801f428:	7149f2ca 	.word	0x7149f2ca
 801f42c:	f149f2ca 	.word	0xf149f2ca
 801f430:	0da24260 	.word	0x0da24260
 801f434:	8da24260 	.word	0x8da24260
 801f438:	33000000 	.word	0x33000000

0801f43c <__errno>:
 801f43c:	4b01      	ldr	r3, [pc, #4]	; (801f444 <__errno+0x8>)
 801f43e:	6818      	ldr	r0, [r3, #0]
 801f440:	4770      	bx	lr
 801f442:	bf00      	nop
 801f444:	200007c8 	.word	0x200007c8

0801f448 <_init>:
 801f448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f44a:	bf00      	nop
 801f44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f44e:	bc08      	pop	{r3}
 801f450:	469e      	mov	lr, r3
 801f452:	4770      	bx	lr

0801f454 <_fini>:
 801f454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f456:	bf00      	nop
 801f458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f45a:	bc08      	pop	{r3}
 801f45c:	469e      	mov	lr, r3
 801f45e:	4770      	bx	lr
