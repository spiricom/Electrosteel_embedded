
electrosteel_strings_STM32H730.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000833c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  08008610  08008610  00018610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  08008de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0001dd1c  20000064  08008e44  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2001dd80  08008e44  0002dd80  2**0
                  ALLOC
  8 .sram1_bss    00040000  24000000  24000000  00030000  2**5
                  ALLOC
  9 .RAM_D2       000001c0  30000000  30000000  00030000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028bf3  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045cb  00000000  00000000  00048cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00013b2a  00000000  00000000  0004d293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  00060dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000028b2  00000000  00000000  00062440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003632e  00000000  00000000  00064cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027035  00000000  00000000  0009b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015b463  00000000  00000000  000c2055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e08  00000000  00000000  0021d4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  002222c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000064 	.word	0x20000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080085f4 	.word	0x080085f4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	20000068 	.word	0x20000068
 800030c:	080085f4 	.word	0x080085f4

08000310 <randomNumber>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
float randomNumber(void) {
 8000310:	b500      	push	{lr}
 8000312:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000314:	4807      	ldr	r0, [pc, #28]	; (8000334 <randomNumber+0x24>)
 8000316:	a901      	add	r1, sp, #4
 8000318:	f005 ffdc 	bl	80062d4 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800031c:	eddd 7a01 	vldr	s15, [sp, #4]
 8000320:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000338 <randomNumber+0x28>
 8000324:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8000328:	ee27 0a80 	vmul.f32	s0, s15, s0
 800032c:	b003      	add	sp, #12
 800032e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000332:	bf00      	nop
 8000334:	200003c4 	.word	0x200003c4
 8000338:	2f80000d 	.word	0x2f80000d

0800033c <SystemClock_Config>:
{
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000340:	224c      	movs	r2, #76	; 0x4c
 8000342:	2100      	movs	r1, #0
 8000344:	a80a      	add	r0, sp, #40	; 0x28
 8000346:	f007 f919 	bl	800757c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034a:	2220      	movs	r2, #32
 800034c:	2100      	movs	r1, #0
 800034e:	a802      	add	r0, sp, #8
 8000350:	f007 f914 	bl	800757c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000354:	2002      	movs	r0, #2
 8000356:	f003 fed5 	bl	8004104 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800035a:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <SystemClock_Config+0xa4>)
 800035c:	2300      	movs	r3, #0
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	6993      	ldr	r3, [r2, #24]
 8000362:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	6993      	ldr	r3, [r2, #24]
 800036a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000372:	6993      	ldr	r3, [r2, #24]
 8000374:	049b      	lsls	r3, r3, #18
 8000376:	d5fc      	bpl.n	8000372 <SystemClock_Config+0x36>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800037a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800037c:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800037e:	2021      	movs	r0, #33	; 0x21
 8000380:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000384:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000386:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 420;
 8000388:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800038a:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800038c:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 420;
 8000390:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000394:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 420;
 800039a:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039e:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003a2:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f003 ff57 	bl	8004258 <HAL_RCC_OscConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	b108      	cbz	r0, 80003b2 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ae:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003b2:	2240      	movs	r2, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003b6:	2308      	movs	r3, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	253f      	movs	r5, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ba:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2403      	movs	r4, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003be:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003c4:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003c6:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ce:	e9cd 3208 	strd	r3, r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d2:	f004 fa8d 	bl	80048f0 <HAL_RCC_ClockConfig>
 80003d6:	b108      	cbz	r0, 80003dc <SystemClock_Config+0xa0>
 80003d8:	b672      	cpsid	i
  while (1)
 80003da:	e7fe      	b.n	80003da <SystemClock_Config+0x9e>
}
 80003dc:	b01f      	add	sp, #124	; 0x7c
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	58024800 	.word	0x58024800

080003e4 <MPU_Conf>:
{
 80003e4:	b500      	push	{lr}
 80003e6:	b085      	sub	sp, #20
	  HAL_MPU_Disable();
 80003e8:	f002 f990 	bl	800270c <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80003ec:	2301      	movs	r3, #1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 80003ee:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80003f2:	4a07      	ldr	r2, [pc, #28]	; (8000410 <MPU_Conf+0x2c>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80003f4:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80003f6:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80003fa:	9303      	str	r3, [sp, #12]
 80003fc:	e9cd 1201 	strd	r1, r2, [sp, #4]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000400:	f002 f9a2 	bl	8002748 <HAL_MPU_ConfigRegion>
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000404:	2004      	movs	r0, #4
 8000406:	f002 f98f 	bl	8002728 <HAL_MPU_Enable>
}
 800040a:	b005      	add	sp, #20
 800040c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000410:	0301000e 	.word	0x0301000e

08000414 <main>:
{
 8000414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000418:	ed2d 8b06 	vpush	{d8-d10}
 800041c:	b094      	sub	sp, #80	; 0x50
	MPU_Conf();
 800041e:	f7ff ffe1 	bl	80003e4 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000422:	4ac0      	ldr	r2, [pc, #768]	; (8000724 <main+0x310>)
 8000424:	6953      	ldr	r3, [r2, #20]
 8000426:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800042a:	d111      	bne.n	8000450 <main+0x3c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800042c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000430:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000434:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000438:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800043c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000440:	6953      	ldr	r3, [r2, #20]
 8000442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000446:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000448:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800044c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000450:	48b4      	ldr	r0, [pc, #720]	; (8000724 <main+0x310>)
 8000452:	6943      	ldr	r3, [r0, #20]
 8000454:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000458:	d124      	bne.n	80004a4 <main+0x90>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800045a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800045e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000462:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000466:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800046a:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800046e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000472:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000474:	ea04 010c 	and.w	r1, r4, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000478:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800047a:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800047e:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000480:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000484:	1c5a      	adds	r2, r3, #1
 8000486:	d1f8      	bne.n	800047a <main+0x66>
    } while(sets-- != 0U);
 8000488:	3c20      	subs	r4, #32
 800048a:	f114 0f20 	cmn.w	r4, #32
 800048e:	d1f1      	bne.n	8000474 <main+0x60>
 8000490:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000494:	6943      	ldr	r3, [r0, #20]
 8000496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800049a:	6143      	str	r3, [r0, #20]
 800049c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004a0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80004a4:	f001 f834 	bl	8001510 <HAL_Init>
  SystemClock_Config();
 80004a8:	f7ff ff48 	bl	800033c <SystemClock_Config>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80004ac:	4a9d      	ldr	r2, [pc, #628]	; (8000724 <main+0x310>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 80004ae:	499e      	ldr	r1, [pc, #632]	; (8000728 <main+0x314>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80004b0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 80004b4:	f8d1 0fb4 	ldr.w	r0, [r1, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80004b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004bc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 80004c0:	07c3      	lsls	r3, r0, #31
 80004c2:	d502      	bpl.n	80004ca <main+0xb6>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 80004c4:	4b99      	ldr	r3, [pc, #612]	; (800072c <main+0x318>)
 80004c6:	f8c1 3fb0 	str.w	r3, [r1, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
 80004ca:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004cc:	4d98      	ldr	r5, [pc, #608]	; (8000730 <main+0x31c>)
  DWT->CYCCNT = 0;
 80004ce:	4b96      	ldr	r3, [pc, #600]	; (8000728 <main+0x314>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80004d0:	f248 0101 	movw	r1, #32769	; 0x8001
  DWT->CTRL = 0x40000001;
 80004d4:	4a97      	ldr	r2, [pc, #604]	; (8000734 <main+0x320>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2601      	movs	r6, #1
  DWT->CYCCNT = 0;
 80004d8:	605c      	str	r4, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004da:	2703      	movs	r7, #3
  DWT->CTRL = 0x40000001;
 80004dc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80004de:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80004e2:	4895      	ldr	r0, [pc, #596]	; (8000738 <main+0x324>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80004e8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ec:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80004f8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000500:	9302      	str	r3, [sp, #8]
 8000502:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000510:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	9303      	str	r3, [sp, #12]
 800051a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000528:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	9304      	str	r3, [sp, #16]
 8000532:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000534:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000540:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000544:	f003 0302 	and.w	r3, r3, #2
 8000548:	9305      	str	r3, [sp, #20]
 800054a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000550:	f043 0308 	orr.w	r3, r3, #8
 8000554:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000558:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800055c:	f003 0308 	and.w	r3, r3, #8
 8000560:	9306      	str	r3, [sp, #24]
 8000562:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000564:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800056c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000570:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000578:	9307      	str	r3, [sp, #28]
 800057a:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 800057c:	f003 fdbe 	bl	80040fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000580:	4622      	mov	r2, r4
 8000582:	2110      	movs	r1, #16
 8000584:	486d      	ldr	r0, [pc, #436]	; (800073c <main+0x328>)
 8000586:	f003 fdb9 	bl	80040fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 800058a:	f248 0301 	movw	r3, #32769	; 0x8001
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800058e:	a90b      	add	r1, sp, #44	; 0x2c
 8000590:	4869      	ldr	r0, [pc, #420]	; (8000738 <main+0x324>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 8000592:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000594:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059a:	f003 fc75 	bl	8003e88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800059e:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	a90b      	add	r1, sp, #44	; 0x2c
 80005a2:	4866      	ldr	r0, [pc, #408]	; (800073c <main+0x328>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005a6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	f003 fc6c 	bl	8003e88 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005b4:	4622      	mov	r2, r4
 80005b6:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b8:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005ba:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005bc:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 80005c0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 80005c4:	4033      	ands	r3, r6
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005ca:	f002 f83d 	bl	8002648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005ce:	200b      	movs	r0, #11
 80005d0:	f002 f878 	bl	80026c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 80005d4:	4622      	mov	r2, r4
 80005d6:	4631      	mov	r1, r6
 80005d8:	200c      	movs	r0, #12
 80005da:	f002 f835 	bl	8002648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005de:	200c      	movs	r0, #12
 80005e0:	f002 f870 	bl	80026c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 2, 0);
 80005e4:	4622      	mov	r2, r4
 80005e6:	2102      	movs	r1, #2
 80005e8:	200d      	movs	r0, #13
 80005ea:	f002 f82d 	bl	8002648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80005ee:	200d      	movs	r0, #13
 80005f0:	f002 f868 	bl	80026c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 2, 0);
 80005f4:	4622      	mov	r2, r4
 80005f6:	2102      	movs	r1, #2
 80005f8:	200e      	movs	r0, #14
 80005fa:	f002 f825 	bl	8002648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80005fe:	200e      	movs	r0, #14
 8000600:	f002 f860 	bl	80026c4 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8000604:	484e      	ldr	r0, [pc, #312]	; (8000740 <main+0x32c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8000758 <main+0x344>
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800060e:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000612:	6084      	str	r4, [r0, #8]
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000614:	6584      	str	r4, [r0, #88]	; 0x58
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000616:	e9c0 c300 	strd	ip, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800061a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800061e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000622:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 8000626:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800062a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800062e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000632:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000636:	e9c0 4414 	strd	r4, r4, [r0, #80]	; 0x50
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800063a:	e9c0 e306 	strd	lr, r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800063e:	2407      	movs	r4, #7
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000644:	60c4      	str	r4, [r0, #12]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000646:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000648:	f005 fef4 	bl	8006434 <HAL_SPI_Init>
 800064c:	b108      	cbz	r0, 8000652 <main+0x23e>
  __ASM volatile ("cpsid i" : : : "memory");
 800064e:	b672      	cpsid	i
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0x23c>
  hspi2.Instance = SPI2;
 8000652:	4b3c      	ldr	r3, [pc, #240]	; (8000744 <main+0x330>)
 8000654:	4a3c      	ldr	r2, [pc, #240]	; (8000748 <main+0x334>)
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000656:	6198      	str	r0, [r3, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000658:	60dc      	str	r4, [r3, #12]
  hspi2.Instance = SPI2;
 800065a:	601a      	str	r2, [r3, #0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800065c:	e9c3 0001 	strd	r0, r0, [r3, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000660:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000664:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 8000668:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800066c:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000670:	e9c3 000f 	strd	r0, r0, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000674:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000678:	e9c3 0013 	strd	r0, r0, [r3, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800067c:	e9c3 0015 	strd	r0, r0, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000680:	4618      	mov	r0, r3
 8000682:	f005 fed7 	bl	8006434 <HAL_SPI_Init>
 8000686:	4605      	mov	r5, r0
 8000688:	b108      	cbz	r0, 800068e <main+0x27a>
 800068a:	b672      	cpsid	i
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x278>
  ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	2224      	movs	r2, #36	; 0x24
 8000690:	4601      	mov	r1, r0
  ADC_MultiModeTypeDef multimode = {0};
 8000692:	900a      	str	r0, [sp, #40]	; 0x28
  hadc1.Instance = ADC1;
 8000694:	4c2d      	ldr	r4, [pc, #180]	; (800074c <main+0x338>)
  ADC_MultiModeTypeDef multimode = {0};
 8000696:	e9cd 0008 	strd	r0, r0, [sp, #32]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	a80b      	add	r0, sp, #44	; 0x2c
 800069c:	f006 ff6e 	bl	800757c <memset>
  hadc1.Init.Oversampling.Ratio = 2;
 80006a0:	2302      	movs	r3, #2
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a2:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006a6:	2220      	movs	r2, #32
  hadc1.Init.Oversampling.Ratio = 2;
 80006a8:	64a3      	str	r3, [r4, #72]	; 0x48
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80006aa:	f240 4301 	movw	r3, #1025	; 0x401
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ae:	6425      	str	r5, [r4, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b0:	4620      	mov	r0, r4
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80006b2:	6563      	str	r3, [r4, #84]	; 0x54
  hadc1.Instance = ADC1;
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <main+0x33c>)
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80006b6:	6525      	str	r5, [r4, #80]	; 0x50
  hadc1.Instance = ADC1;
 80006b8:	6023      	str	r3, [r4, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006ba:	2308      	movs	r3, #8
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006bc:	6327      	str	r7, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006be:	6163      	str	r3, [r4, #20]
  hadc1.Init.NbrOfConversion = 10;
 80006c0:	230a      	movs	r3, #10
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006c2:	6126      	str	r6, [r4, #16]
  hadc1.Init.NbrOfConversion = 10;
 80006c4:	61e3      	str	r3, [r4, #28]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hadc1.Init.OversamplingMode = ENABLE;
 80006ca:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006ce:	64e2      	str	r2, [r4, #76]	; 0x4c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006d0:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006d2:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d6:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006da:	f44f 7580 	mov.w	r5, #256	; 0x100
 80006de:	8325      	strh	r5, [r4, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e0:	f001 fdc0 	bl	8002264 <HAL_ADC_Init>
 80006e4:	b108      	cbz	r0, 80006ea <main+0x2d6>
 80006e6:	b672      	cpsid	i
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x2d4>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ea:	9008      	str	r0, [sp, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ec:	a908      	add	r1, sp, #32
 80006ee:	4620      	mov	r0, r4
 80006f0:	f001 ff14 	bl	800251c <HAL_ADCEx_MultiModeConfigChannel>
 80006f4:	b108      	cbz	r0, 80006fa <main+0x2e6>
 80006f6:	b672      	cpsid	i
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <main+0x2e4>
  sConfig.Channel = ADC_CHANNEL_16;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <main+0x340>)
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80006fc:	2206      	movs	r2, #6
  sConfig.Offset = 0;
 80006fe:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.Channel = ADC_CHANNEL_16;
 8000702:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000704:	2304      	movs	r3, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 8000706:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070a:	4620      	mov	r0, r4
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800070c:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 800070e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000712:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000716:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	f001 f8dc 	bl	80018d4 <HAL_ADC_ConfigChannel>
 800071c:	b1f0      	cbz	r0, 800075c <main+0x348>
 800071e:	b672      	cpsid	i
  while (1)
 8000720:	e7fe      	b.n	8000720 <main+0x30c>
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00
 8000728:	e0001000 	.word	0xe0001000
 800072c:	c5acce55 	.word	0xc5acce55
 8000730:	58024400 	.word	0x58024400
 8000734:	40000001 	.word	0x40000001
 8000738:	58020c00 	.word	0x58020c00
 800073c:	58020400 	.word	0x58020400
 8000740:	200003d8 	.word	0x200003d8
 8000744:	20000460 	.word	0x20000460
 8000748:	40003800 	.word	0x40003800
 800074c:	20000174 	.word	0x20000174
 8000750:	40022000 	.word	0x40022000
 8000754:	43210000 	.word	0x43210000
 8000758:	40013000 	.word	0x40013000
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800075c:	4a83      	ldr	r2, [pc, #524]	; (800096c <main+0x558>)
 800075e:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	a90b      	add	r1, sp, #44	; 0x2c
 8000762:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000764:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	f001 f8b4 	bl	80018d4 <HAL_ADC_ConfigChannel>
 800076c:	b108      	cbz	r0, 8000772 <main+0x35e>
 800076e:	b672      	cpsid	i
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0x35c>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000772:	4a7f      	ldr	r2, [pc, #508]	; (8000970 <main+0x55c>)
 8000774:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	a90b      	add	r1, sp, #44	; 0x2c
 8000778:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800077a:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077e:	f001 f8a9 	bl	80018d4 <HAL_ADC_ConfigChannel>
 8000782:	b108      	cbz	r0, 8000788 <main+0x374>
 8000784:	b672      	cpsid	i
  while (1)
 8000786:	e7fe      	b.n	8000786 <main+0x372>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000788:	4a7a      	ldr	r2, [pc, #488]	; (8000974 <main+0x560>)
 800078a:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	a90b      	add	r1, sp, #44	; 0x2c
 800078e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000790:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000794:	f001 f89e 	bl	80018d4 <HAL_ADC_ConfigChannel>
 8000798:	b108      	cbz	r0, 800079e <main+0x38a>
 800079a:	b672      	cpsid	i
  while (1)
 800079c:	e7fe      	b.n	800079c <main+0x388>
  sConfig.Channel = ADC_CHANNEL_18;
 800079e:	4b76      	ldr	r3, [pc, #472]	; (8000978 <main+0x564>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	a90b      	add	r1, sp, #44	; 0x2c
 80007a2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_18;
 80007a4:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	f001 f894 	bl	80018d4 <HAL_ADC_ConfigChannel>
 80007ac:	b108      	cbz	r0, 80007b2 <main+0x39e>
 80007ae:	b672      	cpsid	i
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <main+0x39c>
  sConfig.Channel = ADC_CHANNEL_19;
 80007b2:	4a72      	ldr	r2, [pc, #456]	; (800097c <main+0x568>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007b4:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	a90b      	add	r1, sp, #44	; 0x2c
 80007ba:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007bc:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	f001 f888 	bl	80018d4 <HAL_ADC_ConfigChannel>
 80007c4:	b108      	cbz	r0, 80007ca <main+0x3b6>
 80007c6:	b672      	cpsid	i
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x3b4>
  sConfig.Channel = ADC_CHANNEL_3;
 80007ca:	4a6d      	ldr	r2, [pc, #436]	; (8000980 <main+0x56c>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80007cc:	f44f 7386 	mov.w	r3, #268	; 0x10c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	a90b      	add	r1, sp, #44	; 0x2c
 80007d2:	486c      	ldr	r0, [pc, #432]	; (8000984 <main+0x570>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80007d4:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	f001 f87c 	bl	80018d4 <HAL_ADC_ConfigChannel>
 80007dc:	b108      	cbz	r0, 80007e2 <main+0x3ce>
 80007de:	b672      	cpsid	i
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0x3cc>
  sConfig.Channel = ADC_CHANNEL_7;
 80007e2:	4a69      	ldr	r2, [pc, #420]	; (8000988 <main+0x574>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80007e4:	f44f 7389 	mov.w	r3, #274	; 0x112
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	a90b      	add	r1, sp, #44	; 0x2c
 80007ea:	4866      	ldr	r0, [pc, #408]	; (8000984 <main+0x570>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80007ec:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	f001 f870 	bl	80018d4 <HAL_ADC_ConfigChannel>
 80007f4:	b108      	cbz	r0, 80007fa <main+0x3e6>
 80007f6:	b672      	cpsid	i
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <main+0x3e4>
  sConfig.Channel = ADC_CHANNEL_4;
 80007fa:	4a64      	ldr	r2, [pc, #400]	; (800098c <main+0x578>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80007fc:	f44f 738c 	mov.w	r3, #280	; 0x118
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	a90b      	add	r1, sp, #44	; 0x2c
 8000802:	4860      	ldr	r0, [pc, #384]	; (8000984 <main+0x570>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000804:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000808:	f001 f864 	bl	80018d4 <HAL_ADC_ConfigChannel>
 800080c:	b108      	cbz	r0, 8000812 <main+0x3fe>
 800080e:	b672      	cpsid	i
  while (1)
 8000810:	e7fe      	b.n	8000810 <main+0x3fc>
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000812:	f44f 7300 	mov.w	r3, #512	; 0x200
  sConfig.Channel = ADC_CHANNEL_8;
 8000816:	4a5e      	ldr	r2, [pc, #376]	; (8000990 <main+0x57c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000818:	a90b      	add	r1, sp, #44	; 0x2c
 800081a:	485a      	ldr	r0, [pc, #360]	; (8000984 <main+0x570>)
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800081c:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000820:	f001 f858 	bl	80018d4 <HAL_ADC_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	b108      	cbz	r0, 800082c <main+0x418>
 8000828:	b672      	cpsid	i
  while (1)
 800082a:	e7fe      	b.n	800082a <main+0x416>
  hrng.Instance = RNG;
 800082c:	4859      	ldr	r0, [pc, #356]	; (8000994 <main+0x580>)
 800082e:	4a5a      	ldr	r2, [pc, #360]	; (8000998 <main+0x584>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000830:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000834:	f005 fc92 	bl	800615c <HAL_RNG_Init>
 8000838:	4604      	mov	r4, r0
 800083a:	b108      	cbz	r0, 8000840 <main+0x42c>
 800083c:	b672      	cpsid	i
  while (1)
 800083e:	e7fe      	b.n	800083e <main+0x42a>
  return __builtin_arm_get_fpscr();
 8000840:	eef1 3a10 	vmrs	r3, fpscr
   tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8000844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 8000848:	eee1 3a10 	vmsr	fpscr, r3
   for (int i = 0; i < 4; i++)
 800084c:	4a53      	ldr	r2, [pc, #332]	; (800099c <main+0x588>)
 	  SPI_TX[i] = counter++;
 800084e:	4e54      	ldr	r6, [pc, #336]	; (80009a0 <main+0x58c>)
 8000850:	7813      	ldrb	r3, [r2, #0]
 8000852:	4605      	mov	r5, r0
 8000854:	4f53      	ldr	r7, [pc, #332]	; (80009a4 <main+0x590>)
 8000856:	1c59      	adds	r1, r3, #1
 8000858:	f363 0507 	bfi	r5, r3, #0, #8
 800085c:	f8df a180 	ldr.w	sl, [pc, #384]	; 80009e0 <main+0x5cc>
 8000860:	f361 250f 	bfi	r5, r1, #8, #8
 8000864:	1c99      	adds	r1, r3, #2
 8000866:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80009e4 <main+0x5d0>
 800086a:	f361 4517 	bfi	r5, r1, #16, #8
 800086e:	1cd9      	adds	r1, r3, #3
 8000870:	3304      	adds	r3, #4
 8000872:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80009e8 <main+0x5d4>
 8000876:	f361 651f 	bfi	r5, r1, #24, #8
 	  SPI_PLUCK_TX[i] = 0;
 800087a:	4601      	mov	r1, r0
 	  SPI_TX[i] = counter++;
 800087c:	4630      	mov	r0, r6
 800087e:	7013      	strb	r3, [r2, #0]
 	  SPI_PLUCK_TX[i] = 0;
 8000880:	2220      	movs	r2, #32
		tThreshold_init(&threshold[i],700.0f, 1300.0f, &leaf);
 8000882:	ed9f aa49 	vldr	s20, [pc, #292]	; 80009a8 <main+0x594>
 	  SPI_TX[i] = counter++;
 8000886:	f840 5b20 	str.w	r5, [r0], #32
 	  SPI_PLUCK_TX[i] = 0;
 800088a:	f006 fe77 	bl	800757c <memset>
 	  SPI_PLUCK_RX[i] = 0;
 800088e:	2220      	movs	r2, #32
 8000890:	4621      	mov	r1, r4
 8000892:	f106 0040 	add.w	r0, r6, #64	; 0x40
 8000896:	f006 fe71 	bl	800757c <memset>
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 800089a:	f106 0160 	add.w	r1, r6, #96	; 0x60
 800089e:	2208      	movs	r2, #8
 80008a0:	4842      	ldr	r0, [pc, #264]	; (80009ac <main+0x598>)
 80008a2:	f005 fe93 	bl	80065cc <HAL_SPI_Receive_DMA>
   HAL_Delay(10);
 80008a6:	200a      	movs	r0, #10
 80008a8:	f000 fe74 	bl	8001594 <HAL_Delay>
   HAL_Delay(10);
 80008ac:	4e40      	ldr	r6, [pc, #256]	; (80009b0 <main+0x59c>)
 80008ae:	200a      	movs	r0, #10
		tThreshold_init(&threshold[i],700.0f, 1300.0f, &leaf);
 80008b0:	4d40      	ldr	r5, [pc, #256]	; (80009b4 <main+0x5a0>)
 80008b2:	ed9f 9a41 	vldr	s18, [pc, #260]	; 80009b8 <main+0x5a4>
   HAL_Delay(10);
 80008b6:	f000 fe6d 	bl	8001594 <HAL_Delay>
		tSlide_init(&fastSlide[i],1.0f,400.0f, &leaf); //1110
 80008ba:	eddf 9a40 	vldr	s19, [pc, #256]	; 80009bc <main+0x5a8>
			tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 80008be:	eddf 8a40 	vldr	s17, [pc, #256]	; 80009c0 <main+0x5ac>
 80008c2:	ed9f 8a40 	vldr	s16, [pc, #256]	; 80009c4 <main+0x5b0>
   LEAF_init(&leaf, SAMPLE_RATE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 80008c6:	4b40      	ldr	r3, [pc, #256]	; (80009c8 <main+0x5b4>)
 80008c8:	4a40      	ldr	r2, [pc, #256]	; (80009cc <main+0x5b8>)
 80008ca:	4941      	ldr	r1, [pc, #260]	; (80009d0 <main+0x5bc>)
 80008cc:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80009d4 <main+0x5c0>
 80008d0:	4838      	ldr	r0, [pc, #224]	; (80009b4 <main+0x5a0>)
 80008d2:	f006 fe1f 	bl	8007514 <LEAF_init>
		tThreshold_init(&threshold[i],700.0f, 1300.0f, &leaf);
 80008d6:	eb0a 0004 	add.w	r0, sl, r4
 80008da:	eeb0 0a49 	vmov.f32	s0, s18
 80008de:	eef0 0a4a 	vmov.f32	s1, s20
 80008e2:	4629      	mov	r1, r5
 80008e4:	f006 fa46 	bl	8006d74 <tThreshold_init>
		tSlide_init(&fastSlide[i],1.0f,400.0f, &leaf); //1110
 80008e8:	eb09 0004 	add.w	r0, r9, r4
 80008ec:	eef0 0a69 	vmov.f32	s1, s19
 80008f0:	4629      	mov	r1, r5
 80008f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008f6:	f006 fa6f 	bl	8006dd8 <tSlide_init>
		tSlide_init(&slowSlide[i],1.0f,700.0f, &leaf); //1110
 80008fa:	eb08 0004 	add.w	r0, r8, r4
 80008fe:	eef0 0a49 	vmov.f32	s1, s18
 8000902:	4629      	mov	r1, r5
 8000904:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   for (int i = 0; i < NUM_STRINGS; i++)
 8000908:	3404      	adds	r4, #4
		tSlide_init(&slowSlide[i],1.0f,700.0f, &leaf); //1110
 800090a:	f006 fa65 	bl	8006dd8 <tSlide_init>
			tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 800090e:	eef0 0a68 	vmov.f32	s1, s17
 8000912:	462a      	mov	r2, r5
 8000914:	4638      	mov	r0, r7
 8000916:	eeb0 0a48 	vmov.f32	s0, s16
 800091a:	2101      	movs	r1, #1
 800091c:	f006 fcb8 	bl	8007290 <tVZFilter_init>
			tHighpass_init(&opticalHighpass[i][j], 10.0f, &leaf);//100
 8000920:	4630      	mov	r0, r6
 8000922:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000926:	4629      	mov	r1, r5
 8000928:	f006 faae 	bl	8006e88 <tHighpass_init>
			tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 800092c:	1d38      	adds	r0, r7, #4
 800092e:	eef0 0a68 	vmov.f32	s1, s17
 8000932:	462a      	mov	r2, r5
 8000934:	eeb0 0a48 	vmov.f32	s0, s16
 8000938:	2101      	movs	r1, #1
 800093a:	f006 fca9 	bl	8007290 <tVZFilter_init>
			tHighpass_init(&opticalHighpass[i][j], 10.0f, &leaf);//100
 800093e:	1d30      	adds	r0, r6, #4
 8000940:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000944:	4629      	mov	r1, r5
 8000946:	f006 fa9f 	bl	8006e88 <tHighpass_init>
   for (int i = 0; i < NUM_STRINGS; i++)
 800094a:	2c28      	cmp	r4, #40	; 0x28
 800094c:	f107 0708 	add.w	r7, r7, #8
 8000950:	f106 0608 	add.w	r6, r6, #8
 8000954:	d1bf      	bne.n	80008d6 <main+0x4c2>
   LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 8000956:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800095a:	481f      	ldr	r0, [pc, #124]	; (80009d8 <main+0x5c4>)
 800095c:	f006 fcd2 	bl	8007304 <LEAF_generate_atodb>
   HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values1,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 8000960:	22a0      	movs	r2, #160	; 0xa0
 8000962:	491e      	ldr	r1, [pc, #120]	; (80009dc <main+0x5c8>)
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <main+0x570>)
 8000966:	f001 fb47 	bl	8001ff8 <HAL_ADC_Start_DMA>
   while (1)
 800096a:	e7fe      	b.n	800096a <main+0x556>
 800096c:	47520000 	.word	0x47520000
 8000970:	3ac04000 	.word	0x3ac04000
 8000974:	3ef08000 	.word	0x3ef08000
 8000978:	4b840000 	.word	0x4b840000
 800097c:	4fb80000 	.word	0x4fb80000
 8000980:	0c900008 	.word	0x0c900008
 8000984:	20000174 	.word	0x20000174
 8000988:	1d500080 	.word	0x1d500080
 800098c:	10c00010 	.word	0x10c00010
 8000990:	21800100 	.word	0x21800100
 8000994:	200003c4 	.word	0x200003c4
 8000998:	48021800 	.word	0x48021800
 800099c:	200000e8 	.word	0x200000e8
 80009a0:	30000000 	.word	0x30000000
 80009a4:	200005b0 	.word	0x200005b0
 80009a8:	44a28000 	.word	0x44a28000
 80009ac:	20000460 	.word	0x20000460
 80009b0:	20000560 	.word	0x20000560
 80009b4:	20000510 	.word	0x20000510
 80009b8:	442f0000 	.word	0x442f0000
 80009bc:	43c80000 	.word	0x43c80000
 80009c0:	3f4ccccd 	.word	0x3f4ccccd
 80009c4:	468ca000 	.word	0x468ca000
 80009c8:	08000311 	.word	0x08000311
 80009cc:	0001d4c0 	.word	0x0001d4c0
 80009d0:	200006a0 	.word	0x200006a0
 80009d4:	473b8000 	.word	0x473b8000
 80009d8:	24000000 	.word	0x24000000
 80009dc:	30000080 	.word	0x30000080
 80009e0:	2001dc18 	.word	0x2001dc18
 80009e4:	20000144 	.word	0x20000144
 80009e8:	20000678 	.word	0x20000678

080009ec <attackDetectPeak2>:
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 80009ec:	ee07 1a90 	vmov	s15, r1
 80009f0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8000b90 <attackDetectPeak2+0x1a4>
 80009f4:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8000b94 <attackDetectPeak2+0x1a8>
 80009f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80009fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8000a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a04:	4f64      	ldr	r7, [pc, #400]	; (8000b98 <attackDetectPeak2+0x1ac>)
 8000a06:	00c6      	lsls	r6, r0, #3
{
 8000a08:	4604      	mov	r4, r0
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a0a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8000a0e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000a12:	00a5      	lsls	r5, r4, #2
{
 8000a14:	ed2d 8b02 	vpush	{d8}
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a18:	f006 fa56 	bl	8006ec8 <tHighpass_tick>
 8000a1c:	1d30      	adds	r0, r6, #4
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a1e:	4e5f      	ldr	r6, [pc, #380]	; (8000b9c <attackDetectPeak2+0x1b0>)
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a20:	4438      	add	r0, r7
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000a22:	4f5f      	ldr	r7, [pc, #380]	; (8000ba0 <attackDetectPeak2+0x1b4>)
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a24:	f006 fa50 	bl	8006ec8 <tHighpass_tick>
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000a28:	485e      	ldr	r0, [pc, #376]	; (8000ba4 <attackDetectPeak2+0x1b8>)
 8000a2a:	eeb0 0ac0 	vabs.f32	s0, s0
 8000a2e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000a32:	f006 f9f7 	bl	8006e24 <tSlide_tick>
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a36:	485c      	ldr	r0, [pc, #368]	; (8000ba8 <attackDetectPeak2+0x1bc>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000a38:	4b5c      	ldr	r3, [pc, #368]	; (8000bac <attackDetectPeak2+0x1c0>)
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a3a:	4428      	add	r0, r5
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000a3c:	ed83 0a00 	vstr	s0, [r3]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a40:	f006 f9f0 	bl	8006e24 <tSlide_tick>
 8000a44:	eef0 0a40 	vmov.f32	s1, s0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000a48:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8000bb0 <attackDetectPeak2+0x1c4>
 8000a4c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a50:	edc6 0a00 	vstr	s1, [r6]
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000a54:	f006 fc42 	bl	80072dc <LEAF_clip>
 8000a58:	eeb0 7a40 	vmov.f32	s14, s0
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000a5c:	eddf 7a55 	vldr	s15, [pc, #340]	; 8000bb4 <attackDetectPeak2+0x1c8>
 8000a60:	4b55      	ldr	r3, [pc, #340]	; (8000bb8 <attackDetectPeak2+0x1cc>)
 8000a62:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8000a66:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8000bbc <attackDetectPeak2+0x1d0>
 8000a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000a6e:	ed86 7a00 	vstr	s14, [r6]
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a76:	ee17 2a90 	vmov	r2, s15
 8000a7a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a7e:	edd3 0a00 	vldr	s1, [r3]
 8000a82:	f006 fc2b 	bl	80072dc <LEAF_clip>
 8000a86:	ed87 0a00 	vstr	s0, [r7]
	if (whichString == 0)
 8000a8a:	b914      	cbnz	r4, 8000a92 <attackDetectPeak2+0xa6>
		dbSmoothedStorage = dbSmoothed2;
 8000a8c:	4b4c      	ldr	r3, [pc, #304]	; (8000bc0 <attackDetectPeak2+0x1d4>)
 8000a8e:	ed83 0a00 	vstr	s0, [r3]
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8000a92:	edd6 8a00 	vldr	s17, [r6]
 8000a96:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000bb4 <attackDetectPeak2+0x1c8>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000a9a:	4e4a      	ldr	r6, [pc, #296]	; (8000bc4 <attackDetectPeak2+0x1d8>)
	integerVersions[whichString] = integerVersion;
 8000a9c:	4b4a      	ldr	r3, [pc, #296]	; (8000bc8 <attackDetectPeak2+0x1dc>)
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8000a9e:	ee68 8a87 	vmul.f32	s17, s17, s14
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000aa2:	1972      	adds	r2, r6, r5
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000aa4:	4849      	ldr	r0, [pc, #292]	; (8000bcc <attackDetectPeak2+0x1e0>)
	integerVersions[whichString] = integerVersion;
 8000aa6:	442b      	add	r3, r5
		armed[whichString] = 1;
 8000aa8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8000bd8 <attackDetectPeak2+0x1ec>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000aac:	edd2 7a00 	vldr	s15, [r2]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000ab0:	4428      	add	r0, r5
	integerVersions[whichString] = integerVersion;
 8000ab2:	edc3 8a00 	vstr	s17, [r3]
	slopeStorage[whichString] = slope;
 8000ab6:	4b46      	ldr	r3, [pc, #280]	; (8000bd0 <attackDetectPeak2+0x1e4>)
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000ab8:	ee30 8a67 	vsub.f32	s16, s0, s15
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000abc:	eeb0 0a68 	vmov.f32	s0, s17
	slopeStorage[whichString] = slope;
 8000ac0:	442b      	add	r3, r5
 8000ac2:	ed83 8a00 	vstr	s16, [r3]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000ac6:	f006 f96d 	bl	8006da4 <tThreshold_tick>
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <attackDetectPeak2+0x1e8>)
	if ((slope > .5f) && (threshOut > 0))//.3
 8000acc:	2800      	cmp	r0, #0
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000ace:	6018      	str	r0, [r3, #0]
	if ((slope > .5f) && (threshOut > 0))//.3
 8000ad0:	dd06      	ble.n	8000ae0 <attackDetectPeak2+0xf4>
 8000ad2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8000ad6:	eeb4 8a67 	vcmp.f32	s16, s15
 8000ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ade:	dc0c      	bgt.n	8000afa <attackDetectPeak2+0x10e>
	if (armed[whichString] == 1)
 8000ae0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d00b      	beq.n	8000b00 <attackDetectPeak2+0x114>
{
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	prevdbSmoothed2[whichString] = dbSmoothed2;
 8000aec:	442e      	add	r6, r5
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	6033      	str	r3, [r6, #0]
}
 8000af2:	ecbd 8b02 	vpop	{d8}
 8000af6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		armed[whichString] = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
		if (integerVersion > stringMaxes[whichString])
 8000b00:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000bdc <attackDetectPeak2+0x1f0>
 8000b04:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8000b08:	ee07 3a90 	vmov	s15, r3
 8000b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b10:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b18:	d505      	bpl.n	8000b26 <attackDetectPeak2+0x13a>
			stringMaxes[whichString] = integerVersion;
 8000b1a:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8000b1e:	ee18 3a90 	vmov	r3, s17
 8000b22:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
		armedCounter[whichString]++;
 8000b26:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8000be0 <attackDetectPeak2+0x1f4>
		if (slope <= 0.0f)
 8000b2a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
			downCounter[whichString]++;
 8000b2e:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8000be4 <attackDetectPeak2+0x1f8>
		armedCounter[whichString]++;
 8000b32:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
		if (slope <= 0.0f)
 8000b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		armedCounter[whichString]++;
 8000b3a:	f103 0301 	add.w	r3, r3, #1
 8000b3e:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			downCounter[whichString]++;
 8000b42:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8000b46:	bf9c      	itt	ls
 8000b48:	3301      	addls	r3, #1
 8000b4a:	f84b 3024 	strls.w	r3, [fp, r4, lsl #2]
		if (downCounter[whichString] > 150)//was 256
 8000b4e:	2b96      	cmp	r3, #150	; 0x96
 8000b50:	ddca      	ble.n	8000ae8 <attackDetectPeak2+0xfc>
			output = stringMaxes[whichString] * 1.75f;
 8000b52:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8000b56:	eef7 0a0c 	vmov.f32	s1, #124	; 0x3fe00000  1.750
			output = LEAF_clip(0.0f, output, 65535.0f);
 8000b5a:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000bb4 <attackDetectPeak2+0x1c8>
			output = stringMaxes[whichString] * 1.75f;
 8000b5e:	ee07 3a90 	vmov	s15, r3
			output = LEAF_clip(0.0f, output, 65535.0f);
 8000b62:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000bb0 <attackDetectPeak2+0x1c4>
			output = stringMaxes[whichString] * 1.75f;
 8000b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			output = LEAF_clip(0.0f, output, 65535.0f);
 8000b6a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000b6e:	f006 fbb5 	bl	80072dc <LEAF_clip>
	return (int)output;
 8000b72:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			armed[whichString] = 0;
 8000b76:	2300      	movs	r3, #0
	return (int)output;
 8000b78:	ee17 0a90 	vmov	r0, s15
			armed[whichString] = 0;
 8000b7c:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
			armedCounter[whichString] = 0;
 8000b80:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			downCounter[whichString] = 0;
 8000b84:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
			stringMaxes[whichString] = 0;
 8000b88:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
 8000b8c:	e7ae      	b.n	8000aec <attackDetectPeak2+0x100>
 8000b8e:	bf00      	nop
 8000b90:	47000000 	.word	0x47000000
 8000b94:	37fffffc 	.word	0x37fffffc
 8000b98:	20000560 	.word	0x20000560
 8000b9c:	20000084 	.word	0x20000084
 8000ba0:	200000ec 	.word	0x200000ec
 8000ba4:	20000144 	.word	0x20000144
 8000ba8:	20000678 	.word	0x20000678
 8000bac:	20000080 	.word	0x20000080
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	477fff00 	.word	0x477fff00
 8000bb8:	24000000 	.word	0x24000000
 8000bbc:	c21c0000 	.word	0xc21c0000
 8000bc0:	200000f0 	.word	0x200000f0
 8000bc4:	20000628 	.word	0x20000628
 8000bc8:	200004e8 	.word	0x200004e8
 8000bcc:	2001dc18 	.word	0x2001dc18
 8000bd0:	20000650 	.word	0x20000650
 8000bd4:	2001dc14 	.word	0x2001dc14
 8000bd8:	20000094 	.word	0x20000094
 8000bdc:	2001db60 	.word	0x2001db60
 8000be0:	200000bc 	.word	0x200000bc
 8000be4:	2000011c 	.word	0x2000011c

08000be8 <ADC_Frame>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
{
 8000bea:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000bec:	488d      	ldr	r0, [pc, #564]	; (8000e24 <ADC_Frame+0x23c>)
 8000bee:	4611      	mov	r1, r2
{
 8000bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf4:	b087      	sub	sp, #28
 8000bf6:	461d      	mov	r5, r3
 8000bf8:	f8df a26c 	ldr.w	sl, [pc, #620]	; 8000e68 <ADC_Frame+0x280>
 8000bfc:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000bfe:	f003 fa7d 	bl	80040fc <HAL_GPIO_WritePin>
	uint32_t tempCountFrame = DWT->CYCCNT;
 8000c02:	4b89      	ldr	r3, [pc, #548]	; (8000e28 <ADC_Frame+0x240>)
	frameRate = DWT->CYCCNT - frameRateStart;
 8000c04:	4989      	ldr	r1, [pc, #548]	; (8000e2c <ADC_Frame+0x244>)
	uint32_t tempCountFrame = DWT->CYCCNT;
 8000c06:	685a      	ldr	r2, [r3, #4]
	frameRate = DWT->CYCCNT - frameRateStart;
 8000c08:	680c      	ldr	r4, [r1, #0]
	uint32_t tempCountFrame = DWT->CYCCNT;
 8000c0a:	9205      	str	r2, [sp, #20]
	frameRate = DWT->CYCCNT - frameRateStart;
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4888      	ldr	r0, [pc, #544]	; (8000e30 <ADC_Frame+0x248>)
 8000c10:	1b12      	subs	r2, r2, r4
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000c12:	1dec      	adds	r4, r5, #7
	frameRate = DWT->CYCCNT - frameRateStart;
 8000c14:	6002      	str	r2, [r0, #0]
	frameRateStart = DWT->CYCCNT;
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	4a86      	ldr	r2, [pc, #536]	; (8000e34 <ADC_Frame+0x24c>)
 8000c1a:	600b      	str	r3, [r1, #0]
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000c1c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000c20:	9404      	str	r4, [sp, #16]
 8000c22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000c26:	4a84      	ldr	r2, [pc, #528]	; (8000e38 <ADC_Frame+0x250>)
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	4b84      	ldr	r3, [pc, #528]	; (8000e3c <ADC_Frame+0x254>)
 8000c2c:	9303      	str	r3, [sp, #12]
		if (howManyFrames > 0)
 8000c2e:	6813      	ldr	r3, [r2, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	dd01      	ble.n	8000c38 <ADC_Frame+0x50>
			howManyFrames--;
 8000c34:	3b01      	subs	r3, #1
 8000c36:	6013      	str	r3, [r2, #0]
			string_values[k] = ADC_values1[(i*NUM_ADC_CHANNELS) + k];
 8000c38:	9801      	ldr	r0, [sp, #4]
 8000c3a:	9c03      	ldr	r4, [sp, #12]
 8000c3c:	8801      	ldrh	r1, [r0, #0]
 8000c3e:	8843      	ldrh	r3, [r0, #2]
 8000c40:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8000e3c <ADC_Frame+0x254>
 8000c44:	4d7e      	ldr	r5, [pc, #504]	; (8000e40 <ADC_Frame+0x258>)
 8000c46:	4e7f      	ldr	r6, [pc, #508]	; (8000e44 <ADC_Frame+0x25c>)
 8000c48:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8000e54 <ADC_Frame+0x26c>
 8000c4c:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8000e6c <ADC_Frame+0x284>
 8000c50:	4f7d      	ldr	r7, [pc, #500]	; (8000e48 <ADC_Frame+0x260>)
 8000c52:	f8cd b00c 	str.w	fp, [sp, #12]
 8000c56:	e9c4 1300 	strd	r1, r3, [r4]
 8000c5a:	8881      	ldrh	r1, [r0, #4]
 8000c5c:	88c3      	ldrh	r3, [r0, #6]
 8000c5e:	e9c4 1302 	strd	r1, r3, [r4, #8]
 8000c62:	8901      	ldrh	r1, [r0, #8]
 8000c64:	8943      	ldrh	r3, [r0, #10]
 8000c66:	e9c4 1304 	strd	r1, r3, [r4, #16]
 8000c6a:	8981      	ldrh	r1, [r0, #12]
 8000c6c:	89c3      	ldrh	r3, [r0, #14]
 8000c6e:	e9c4 1306 	strd	r1, r3, [r4, #24]
 8000c72:	8a01      	ldrh	r1, [r0, #16]
 8000c74:	8a43      	ldrh	r3, [r0, #18]
 8000c76:	e9c4 1308 	strd	r1, r3, [r4, #32]
 8000c7a:	2401      	movs	r4, #1
 8000c7c:	e016      	b.n	8000cac <ADC_Frame+0xc4>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b943      	cbnz	r3, 8000c94 <ADC_Frame+0xac>
					changeHappened = 1;
 8000c82:	2101      	movs	r1, #1
 8000c84:	4b71      	ldr	r3, [pc, #452]	; (8000e4c <ADC_Frame+0x264>)
					pluckValues[j] = didPlucked[j];
 8000c86:	f8c8 0000 	str.w	r0, [r8]
					stringStates[j] = (uint16_t)didPlucked[j];
 8000c8a:	b280      	uxth	r0, r0
					changeHappened = 1;
 8000c8c:	6019      	str	r1, [r3, #0]
					stringStates[j] = (uint16_t)didPlucked[j];
 8000c8e:	f8c9 0000 	str.w	r0, [r9]
					stringSounding[j] = 1;
 8000c92:	6039      	str	r1, [r7, #0]
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8000c94:	882b      	ldrh	r3, [r5, #0]
 8000c96:	bb23      	cbnz	r3, 8000ce2 <ADC_Frame+0xfa>
		for (int j = 0; j < NUM_STRINGS; j++)
 8000c98:	2c0a      	cmp	r4, #10
 8000c9a:	d02f      	beq.n	8000cfc <ADC_Frame+0x114>
 8000c9c:	3401      	adds	r4, #1
 8000c9e:	3502      	adds	r5, #2
 8000ca0:	3604      	adds	r6, #4
 8000ca2:	f109 0904 	add.w	r9, r9, #4
 8000ca6:	f108 0804 	add.w	r8, r8, #4
 8000caa:	3704      	adds	r7, #4
 8000cac:	1e60      	subs	r0, r4, #1
			int tempInt = string_values[j];
 8000cae:	f85b 1b04 	ldr.w	r1, [fp], #4
			if (j < 8)
 8000cb2:	2807      	cmp	r0, #7
 8000cb4:	f200 80a4 	bhi.w	8000e00 <ADC_Frame+0x218>
				stringTouchRH[j] = (RHbits[0] >> j) & 1;
 8000cb8:	f8da 3000 	ldr.w	r3, [sl]
 8000cbc:	4103      	asrs	r3, r0
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	802b      	strh	r3, [r5, #0]
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000cc4:	f7ff fe92 	bl	80009ec <attackDetectPeak2>
			if (howManyFrames == 0)
 8000cc8:	4a5b      	ldr	r2, [pc, #364]	; (8000e38 <ADC_Frame+0x250>)
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000cca:	6030      	str	r0, [r6, #0]
			if (howManyFrames == 0)
 8000ccc:	6813      	ldr	r3, [r2, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1e4      	bne.n	8000c9c <ADC_Frame+0xb4>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	dcd3      	bgt.n	8000c7e <ADC_Frame+0x96>
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8000cd6:	882b      	ldrh	r3, [r5, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0dd      	beq.n	8000c98 <ADC_Frame+0xb0>
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0da      	beq.n	8000c98 <ADC_Frame+0xb0>
					stringStates[j] = 0;
 8000ce2:	2300      	movs	r3, #0
					changeHappened = 1;
 8000ce4:	2101      	movs	r1, #1
		for (int j = 0; j < NUM_STRINGS; j++)
 8000ce6:	2c0a      	cmp	r4, #10
					stringStates[j] = 0;
 8000ce8:	f8c9 3000 	str.w	r3, [r9]
					pluckValues[j] = 0;
 8000cec:	f8c8 3000 	str.w	r3, [r8]
					changeHappened = 1;
 8000cf0:	4b56      	ldr	r3, [pc, #344]	; (8000e4c <ADC_Frame+0x264>)
 8000cf2:	6019      	str	r1, [r3, #0]
					stringSounding[j] = 0;
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
		for (int j = 0; j < NUM_STRINGS; j++)
 8000cfa:	d1cf      	bne.n	8000c9c <ADC_Frame+0xb4>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000cfc:	9901      	ldr	r1, [sp, #4]
 8000cfe:	9b02      	ldr	r3, [sp, #8]
 8000d00:	3114      	adds	r1, #20
 8000d02:	3301      	adds	r3, #1
 8000d04:	9101      	str	r1, [sp, #4]
 8000d06:	9904      	ldr	r1, [sp, #16]
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	dd8f      	ble.n	8000c2e <ADC_Frame+0x46>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2101      	movs	r1, #1
 8000d12:	4844      	ldr	r0, [pc, #272]	; (8000e24 <ADC_Frame+0x23c>)
 8000d14:	f003 f9f2 	bl	80040fc <HAL_GPIO_WritePin>
	if (changeHappened)
 8000d18:	4b4c      	ldr	r3, [pc, #304]	; (8000e4c <ADC_Frame+0x264>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d066      	beq.n	8000dee <ADC_Frame+0x206>
		if (!SPI_busy)// && (!gettingNewFirmware))
 8000d20:	4c4b      	ldr	r4, [pc, #300]	; (8000e50 <ADC_Frame+0x268>)
 8000d22:	6825      	ldr	r5, [r4, #0]
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d162      	bne.n	8000dee <ADC_Frame+0x206>
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d28:	494a      	ldr	r1, [pc, #296]	; (8000e54 <ADC_Frame+0x26c>)
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	6988      	ldr	r0, [r1, #24]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	6a12      	ldr	r2, [r2, #32]
 8000d32:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 8000d36:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <ADC_Frame+0x270>)
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d38:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d3c:	0a12      	lsrs	r2, r2, #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d3e:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d42:	0a00      	lsrs	r0, r0, #8
 8000d44:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			SPI_PLUCK_TX[0] = 254;
 8000d48:	22fe      	movs	r2, #254	; 0xfe
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d4a:	f883 a034 	strb.w	sl, [r3, #52]	; 0x34
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
			SPI_PLUCK_TX[0] = 254;
 8000d52:	f883 2020 	strb.w	r2, [r3, #32]
			SPI_PLUCK_TX[31] = 253;
 8000d56:	22fd      	movs	r2, #253	; 0xfd
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d58:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
 8000d5c:	f883 a033 	strb.w	sl, [r3, #51]	; 0x33
			SPI_PLUCK_TX[31] = 253;
 8000d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d64:	e9d1 9800 	ldrd	r9, r8, [r1]
 8000d68:	e9d1 ec02 	ldrd	lr, ip, [r1, #8]
 8000d6c:	e9d1 7604 	ldrd	r7, r6, [r1, #16]
 8000d70:	69c9      	ldr	r1, [r1, #28]
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d72:	f883 9022 	strb.w	r9, [r3, #34]	; 0x22
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d76:	ea4f 2919 	mov.w	r9, r9, lsr #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d7a:	f883 8024 	strb.w	r8, [r3, #36]	; 0x24
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d7e:	ea4f 2818 	mov.w	r8, r8, lsr #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d82:	f883 e026 	strb.w	lr, [r3, #38]	; 0x26
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d8a:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d92:	f883 702a 	strb.w	r7, [r3, #42]	; 0x2a
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d96:	0a3f      	lsrs	r7, r7, #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d98:	f883 602c 	strb.w	r6, [r3, #44]	; 0x2c
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d9c:	0a36      	lsrs	r6, r6, #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d9e:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000da2:	0a09      	lsrs	r1, r1, #8
 8000da4:	f883 9021 	strb.w	r9, [r3, #33]	; 0x21
 8000da8:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
			SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)SPI_PLUCK_TX) & ~(uint32_t)0x1F), 64);
 8000dac:	f103 0120 	add.w	r1, r3, #32
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000db0:	f883 8023 	strb.w	r8, [r3, #35]	; 0x23
 8000db4:	f883 e025 	strb.w	lr, [r3, #37]	; 0x25
 8000db8:	f883 c027 	strb.w	ip, [r3, #39]	; 0x27
 8000dbc:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
 8000dc0:	f883 602b 	strb.w	r6, [r3, #43]	; 0x2b
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc4:	f3bf 8f4f 	dsb	sy
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000dc8:	f103 0240 	add.w	r2, r3, #64	; 0x40
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000dcc:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <ADC_Frame+0x274>)
 8000dce:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
 8000dd2:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8000dd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dda:	f3bf 8f6f 	isb	sy
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_PLUCK_TX, SPI_PLUCK_RX, 32);
 8000dde:	2320      	movs	r3, #32
 8000de0:	481f      	ldr	r0, [pc, #124]	; (8000e60 <ADC_Frame+0x278>)
 8000de2:	f005 fcd3 	bl	800678c <HAL_SPI_TransmitReceive_DMA>
			SPI_busy = 1;
 8000de6:	2301      	movs	r3, #1
			changeHappened = 0;
 8000de8:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <ADC_Frame+0x264>)
			SPI_busy = 1;
 8000dea:	6023      	str	r3, [r4, #0]
			changeHappened = 0;
 8000dec:	6015      	str	r5, [r2, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <ADC_Frame+0x240>)
 8000df0:	9905      	ldr	r1, [sp, #20]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <ADC_Frame+0x27c>)
 8000df6:	1a5b      	subs	r3, r3, r1
 8000df8:	6013      	str	r3, [r2, #0]
}
 8000dfa:	b007      	add	sp, #28
 8000dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				stringTouchRH[j] = (RHbits[1] >> (j-8)) & 1;
 8000e00:	f8da 3004 	ldr.w	r3, [sl, #4]
 8000e04:	f1a4 0c09 	sub.w	ip, r4, #9
 8000e08:	fa43 f30c 	asr.w	r3, r3, ip
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	802b      	strh	r3, [r5, #0]
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000e12:	f7ff fdeb 	bl	80009ec <attackDetectPeak2>
			if (howManyFrames == 0)
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <ADC_Frame+0x250>)
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000e18:	6030      	str	r0, [r6, #0]
			if (howManyFrames == 0)
 8000e1a:	6813      	ldr	r3, [r2, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f47f af3b 	bne.w	8000c98 <ADC_Frame+0xb0>
 8000e22:	e756      	b.n	8000cd2 <ADC_Frame+0xea>
 8000e24:	58020c00 	.word	0x58020c00
 8000e28:	e0001000 	.word	0xe0001000
 8000e2c:	20000170 	.word	0x20000170
 8000e30:	2000016c 	.word	0x2000016c
 8000e34:	30000080 	.word	0x30000080
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	2001dbec 	.word	0x2001dbec
 8000e40:	2001dbd8 	.word	0x2001dbd8
 8000e44:	200000f4 	.word	0x200000f4
 8000e48:	2001db88 	.word	0x2001db88
 8000e4c:	200000e4 	.word	0x200000e4
 8000e50:	20000090 	.word	0x20000090
 8000e54:	2001dbb0 	.word	0x2001dbb0
 8000e58:	30000000 	.word	0x30000000
 8000e5c:	e000ed00 	.word	0xe000ed00
 8000e60:	200003d8 	.word	0x200003d8
 8000e64:	2001dc40 	.word	0x2001dc40
 8000e68:	20000088 	.word	0x20000088
 8000e6c:	20000600 	.word	0x20000600

08000e70 <HAL_ADC_ConvCpltCallback>:
	ADC_Frame(ADC_FRAME_SIZE);
 8000e70:	2008      	movs	r0, #8
 8000e72:	f7ff beb9 	b.w	8000be8 <ADC_Frame>
 8000e76:	bf00      	nop

08000e78 <HAL_ADC_ConvHalfCpltCallback>:
	ADC_Frame(0);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff beb5 	b.w	8000be8 <ADC_Frame>
 8000e7e:	bf00      	nop

08000e80 <HAL_SPI_TxRxCpltCallback>:
	SPI_busy = 0;
 8000e80:	4b01      	ldr	r3, [pc, #4]	; (8000e88 <HAL_SPI_TxRxCpltCallback+0x8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
}
 8000e86:	4770      	bx	lr
 8000e88:	20000090 	.word	0x20000090

08000e8c <HAL_SPI_RxCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2110      	movs	r1, #16
 8000e90:	480a      	ldr	r0, [pc, #40]	; (8000ebc <HAL_SPI_RxCpltCallback+0x30>)
{
 8000e92:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e94:	f003 f932 	bl	80040fc <HAL_GPIO_WritePin>
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_SPI_RxCpltCallback+0x34>)
 8000e9a:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8000e9e:	2afe      	cmp	r2, #254	; 0xfe
 8000ea0:	d000      	beq.n	8000ea4 <HAL_SPI_RxCpltCallback+0x18>
}
 8000ea2:	bd08      	pop	{r3, pc}
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000ea4:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8000ea8:	2afd      	cmp	r2, #253	; 0xfd
 8000eaa:	d1fa      	bne.n	8000ea2 <HAL_SPI_RxCpltCallback+0x16>
			RHbits[i] = SPI_RX[i+4];
 8000eac:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_SPI_RxCpltCallback+0x38>)
 8000eb2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000eb6:	e9c2 1300 	strd	r1, r3, [r2]
}
 8000eba:	bd08      	pop	{r3, pc}
 8000ebc:	58020400 	.word	0x58020400
 8000ec0:	30000000 	.word	0x30000000
 8000ec4:	20000088 	.word	0x20000088

08000ec8 <HAL_SPI_RxHalfCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2110      	movs	r1, #16
 8000ecc:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <HAL_SPI_RxHalfCpltCallback+0x30>)
{
 8000ece:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000ed0:	f003 f914 	bl	80040fc <HAL_GPIO_WritePin>
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_SPI_RxHalfCpltCallback+0x34>)
 8000ed6:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8000eda:	2afe      	cmp	r2, #254	; 0xfe
 8000edc:	d000      	beq.n	8000ee0 <HAL_SPI_RxHalfCpltCallback+0x18>
}
 8000ede:	bd08      	pop	{r3, pc}
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 8000ee0:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 8000ee4:	2afd      	cmp	r2, #253	; 0xfd
 8000ee6:	d1fa      	bne.n	8000ede <HAL_SPI_RxHalfCpltCallback+0x16>
			RHbits[i] = SPI_RX[i];
 8000ee8:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_SPI_RxHalfCpltCallback+0x38>)
 8000eee:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8000ef2:	e9c2 1300 	strd	r1, r3, [r2]
}
 8000ef6:	bd08      	pop	{r3, pc}
 8000ef8:	58020400 	.word	0x58020400
 8000efc:	30000000 	.word	0x30000000
 8000f00:	20000088 	.word	0x20000088

08000f04 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <Error_Handler+0x2>

08000f08 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <HAL_MspInit+0x20>)
{
 8000f0a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000f10:	f042 0202 	orr.w	r2, r2, #2
 8000f14:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	b002      	add	sp, #8
 8000f26:	4770      	bx	lr
 8000f28:	58024400 	.word	0x58024400

08000f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	2100      	movs	r1, #0
{
 8000f32:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	22b8      	movs	r2, #184	; 0xb8
 8000f36:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	9108      	str	r1, [sp, #32]
 8000f3a:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000f3e:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f42:	f006 fb1b 	bl	800757c <memset>
  if(hadc->Instance==ADC1)
 8000f46:	4b4f      	ldr	r3, [pc, #316]	; (8001084 <HAL_ADC_MspInit+0x158>)
 8000f48:	6822      	ldr	r2, [r4, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d001      	beq.n	8000f52 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f4e:	b038      	add	sp, #224	; 0xe0
 8000f50:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f56:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f58:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f5a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 220;
 8000f5e:	2219      	movs	r2, #25
 8000f60:	23dc      	movs	r3, #220	; 0xdc
 8000f62:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f66:	2204      	movs	r2, #4
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
    PeriphClkInitStruct.PLL3.PLL3R = 5;
 8000f72:	2205      	movs	r2, #5
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f74:	931a      	str	r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.PLL3.PLL3R = 5;
 8000f7a:	9218      	str	r2, [sp, #96]	; 0x60
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000f7c:	9332      	str	r3, [sp, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7e:	f003 ff67 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d177      	bne.n	8001076 <HAL_ADC_MspInit+0x14a>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f86:	4b40      	ldr	r3, [pc, #256]	; (8001088 <HAL_ADC_MspInit+0x15c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	4840      	ldr	r0, [pc, #256]	; (800108c <HAL_ADC_MspInit+0x160>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f8c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    hdma_adc1.Instance = DMA1_Stream2;
 8000f90:	4d3f      	ldr	r5, [pc, #252]	; (8001090 <HAL_ADC_MspInit+0x164>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f92:	f042 0220 	orr.w	r2, r2, #32
 8000f96:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000f9a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f9e:	f002 0220 	and.w	r2, r2, #32
 8000fa2:	9200      	str	r2, [sp, #0]
 8000fa4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fb6:	f002 0201 	and.w	r2, r2, #1
 8000fba:	9201      	str	r2, [sp, #4]
 8000fbc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fc2:	f042 0204 	orr.w	r2, r2, #4
 8000fc6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fce:	f002 0204 	and.w	r2, r2, #4
 8000fd2:	9202      	str	r2, [sp, #8]
 8000fd4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fda:	f042 0202 	orr.w	r2, r2, #2
 8000fde:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fe2:	22ff      	movs	r2, #255	; 0xff
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ff0:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ff6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f002 ff45 	bl	8003e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ffe:	2230      	movs	r2, #48	; 0x30
 8001000:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	a904      	add	r1, sp, #16
 8001004:	4823      	ldr	r0, [pc, #140]	; (8001094 <HAL_ADC_MspInit+0x168>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001008:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f002 ff3c 	bl	8003e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001010:	2203      	movs	r2, #3
 8001012:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	4820      	ldr	r0, [pc, #128]	; (8001098 <HAL_ADC_MspInit+0x16c>)
 8001016:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800101a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f002 ff33 	bl	8003e88 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream2;
 8001022:	4a1e      	ldr	r2, [pc, #120]	; (800109c <HAL_ADC_MspInit+0x170>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001024:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001026:	4628      	mov	r0, r5
    hdma_adc1.Instance = DMA1_Stream2;
 8001028:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800102a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800102e:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001030:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001034:	612a      	str	r2, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800103a:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800103c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001040:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001042:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001044:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001046:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001048:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800104a:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800104e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001052:	2304      	movs	r3, #4
 8001054:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001058:	f001 fc88 	bl	800296c <HAL_DMA_Init>
 800105c:	b970      	cbnz	r0, 800107c <HAL_ADC_MspInit+0x150>
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2102      	movs	r1, #2
 8001062:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001064:	65a5      	str	r5, [r4, #88]	; 0x58
 8001066:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8001068:	f001 faee 	bl	8002648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800106c:	2012      	movs	r0, #18
 800106e:	f001 fb29 	bl	80026c4 <HAL_NVIC_EnableIRQ>
}
 8001072:	b038      	add	sp, #224	; 0xe0
 8001074:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001076:	f7ff ff45 	bl	8000f04 <Error_Handler>
 800107a:	e784      	b.n	8000f86 <HAL_ADC_MspInit+0x5a>
      Error_Handler();
 800107c:	f7ff ff42 	bl	8000f04 <Error_Handler>
 8001080:	e7ed      	b.n	800105e <HAL_ADC_MspInit+0x132>
 8001082:	bf00      	nop
 8001084:	40022000 	.word	0x40022000
 8001088:	58024400 	.word	0x58024400
 800108c:	58020000 	.word	0x58020000
 8001090:	200001e4 	.word	0x200001e4
 8001094:	58020800 	.word	0x58020800
 8001098:	58020400 	.word	0x58020400
 800109c:	40020040 	.word	0x40020040

080010a0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80010a0:	b510      	push	{r4, lr}
 80010a2:	b0b0      	sub	sp, #192	; 0xc0
 80010a4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a6:	22b8      	movs	r2, #184	; 0xb8
 80010a8:	2100      	movs	r1, #0
 80010aa:	a802      	add	r0, sp, #8
 80010ac:	f006 fa66 	bl	800757c <memset>
  if(hrng->Instance==RNG)
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_RNG_MspInit+0x54>)
 80010b2:	6822      	ldr	r2, [r4, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d001      	beq.n	80010bc <HAL_RNG_MspInit+0x1c>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80010b8:	b030      	add	sp, #192	; 0xc0
 80010ba:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80010bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c2:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80010c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c8:	f003 fec2 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 80010cc:	b970      	cbnz	r0, 80010ec <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_RNG_MspInit+0x58>)
 80010d0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80010d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010d8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80010dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80010e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	9b01      	ldr	r3, [sp, #4]
}
 80010e8:	b030      	add	sp, #192	; 0xc0
 80010ea:	bd10      	pop	{r4, pc}
      Error_Handler();
 80010ec:	f7ff ff0a 	bl	8000f04 <Error_Handler>
 80010f0:	e7ed      	b.n	80010ce <HAL_RNG_MspInit+0x2e>
 80010f2:	bf00      	nop
 80010f4:	48021800 	.word	0x48021800
 80010f8:	58024400 	.word	0x58024400

080010fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fe:	b0bb      	sub	sp, #236	; 0xec
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	2100      	movs	r1, #0
{
 8001102:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	22b8      	movs	r2, #184	; 0xb8
 8001106:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	910a      	str	r1, [sp, #40]	; 0x28
 800110a:	e9cd 1106 	strd	r1, r1, [sp, #24]
 800110e:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001112:	f006 fa33 	bl	800757c <memset>
  if(hspi->Instance==SPI1)
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	4a80      	ldr	r2, [pc, #512]	; (800131c <HAL_SPI_MspInit+0x220>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d005      	beq.n	800112a <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 800111e:	4a80      	ldr	r2, [pc, #512]	; (8001320 <HAL_SPI_MspInit+0x224>)
 8001120:	4293      	cmp	r3, r2
 8001122:	f000 8091 	beq.w	8001248 <HAL_SPI_MspInit+0x14c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001126:	b03b      	add	sp, #236	; 0xec
 8001128:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800112a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001130:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001132:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f003 fe8b 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	2800      	cmp	r0, #0
 800113c:	f040 80e4 	bne.w	8001308 <HAL_SPI_MspInit+0x20c>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001140:	4b78      	ldr	r3, [pc, #480]	; (8001324 <HAL_SPI_MspInit+0x228>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001142:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001144:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001146:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001148:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114c:	4876      	ldr	r0, [pc, #472]	; (8001328 <HAL_SPI_MspInit+0x22c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800114e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001152:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001156:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800115a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800115e:	9201      	str	r2, [sp, #4]
 8001160:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001162:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001166:	f042 0208 	orr.w	r2, r2, #8
 800116a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800116e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001172:	f002 0208 	and.w	r2, r2, #8
 8001176:	9202      	str	r2, [sp, #8]
 8001178:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800117a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800117e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001182:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001186:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800118c:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001192:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001194:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001196:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001198:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800119a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800119e:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a2:	f002 fe71 	bl	8003e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80011a6:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80011aa:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ac:	a906      	add	r1, sp, #24
 80011ae:	485f      	ldr	r0, [pc, #380]	; (800132c <HAL_SPI_MspInit+0x230>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b0:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80011b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80011b6:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ba:	f002 fe65 	bl	8003e88 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80011be:	4e5c      	ldr	r6, [pc, #368]	; (8001330 <HAL_SPI_MspInit+0x234>)
 80011c0:	495c      	ldr	r1, [pc, #368]	; (8001334 <HAL_SPI_MspInit+0x238>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80011c2:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c4:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011c6:	4630      	mov	r0, r6
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80011c8:	6031      	str	r1, [r6, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ca:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80011cc:	6072      	str	r2, [r6, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011d2:	60b1      	str	r1, [r6, #8]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011d4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011d8:	6132      	str	r2, [r6, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011da:	2204      	movs	r2, #4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011dc:	60f3      	str	r3, [r6, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011de:	6173      	str	r3, [r6, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e0:	61b3      	str	r3, [r6, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011e2:	e9c6 3107 	strd	r3, r1, [r6, #28]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011e6:	e9c6 2309 	strd	r2, r3, [r6, #36]	; 0x24
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011ea:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011ee:	f001 fbbd 	bl	800296c <HAL_DMA_Init>
 80011f2:	2800      	cmp	r0, #0
 80011f4:	f040 8085 	bne.w	8001302 <HAL_SPI_MspInit+0x206>
    hdma_spi1_rx.Instance = DMA1_Stream3;
 80011f8:	4d4f      	ldr	r5, [pc, #316]	; (8001338 <HAL_SPI_MspInit+0x23c>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fa:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream3;
 80011fc:	494f      	ldr	r1, [pc, #316]	; (800133c <HAL_SPI_MspInit+0x240>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80011fe:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001200:	4628      	mov	r0, r5
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001202:	67a6      	str	r6, [r4, #120]	; 0x78
 8001204:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001206:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800120a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001212:	e9c5 3207 	strd	r3, r2, [r5, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001216:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001218:	e9c5 3103 	strd	r3, r1, [r5, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800121c:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001220:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001224:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001228:	f001 fba0 	bl	800296c <HAL_DMA_Init>
 800122c:	2800      	cmp	r0, #0
 800122e:	d165      	bne.n	80012fc <HAL_SPI_MspInit+0x200>
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2103      	movs	r1, #3
 8001234:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001236:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001238:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 800123a:	f001 fa05 	bl	8002648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800123e:	2023      	movs	r0, #35	; 0x23
 8001240:	f001 fa40 	bl	80026c4 <HAL_NVIC_EnableIRQ>
}
 8001244:	b03b      	add	sp, #236	; 0xec
 8001246:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800124c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001250:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001254:	f003 fdfc 	bl	8004e50 <HAL_RCCEx_PeriphCLKConfig>
 8001258:	2800      	cmp	r0, #0
 800125a:	d158      	bne.n	800130e <HAL_SPI_MspInit+0x212>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800125c:	4b31      	ldr	r3, [pc, #196]	; (8001324 <HAL_SPI_MspInit+0x228>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800125e:	2005      	movs	r0, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	a906      	add	r1, sp, #24
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001262:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800126a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800126e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001272:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001276:	9204      	str	r2, [sp, #16]
 8001278:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800127e:	f042 0202 	orr.w	r2, r2, #2
 8001282:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001286:	f44f 4270 	mov.w	r2, #61440	; 0xf000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800128e:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	482a      	ldr	r0, [pc, #168]	; (8001340 <HAL_SPI_MspInit+0x244>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001298:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	9d05      	ldr	r5, [sp, #20]
    hdma_spi2_rx.Instance = DMA1_Stream1;
 800129c:	4d29      	ldr	r5, [pc, #164]	; (8001344 <HAL_SPI_MspInit+0x248>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800129e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80012a2:	2200      	movs	r2, #0
 80012a4:	2302      	movs	r3, #2
 80012a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f002 fded 	bl	8003e88 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 80012ae:	4926      	ldr	r1, [pc, #152]	; (8001348 <HAL_SPI_MspInit+0x24c>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80012b0:	2227      	movs	r2, #39	; 0x27
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b2:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80012b4:	4628      	mov	r0, r5
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012b6:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80012b8:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80012c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c4:	6129      	str	r1, [r5, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012c6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80012ca:	61ea      	str	r2, [r5, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012cc:	2204      	movs	r2, #4
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ce:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d2:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80012d6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012da:	e9c5 1208 	strd	r1, r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80012de:	f001 fb45 	bl	800296c <HAL_DMA_Init>
 80012e2:	b9b8      	cbnz	r0, 8001314 <HAL_SPI_MspInit+0x218>
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2104      	movs	r1, #4
 80012e8:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80012ea:	67e5      	str	r5, [r4, #124]	; 0x7c
 80012ec:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 80012ee:	f001 f9ab 	bl	8002648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80012f2:	2024      	movs	r0, #36	; 0x24
 80012f4:	f001 f9e6 	bl	80026c4 <HAL_NVIC_EnableIRQ>
}
 80012f8:	b03b      	add	sp, #236	; 0xec
 80012fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80012fc:	f7ff fe02 	bl	8000f04 <Error_Handler>
 8001300:	e796      	b.n	8001230 <HAL_SPI_MspInit+0x134>
      Error_Handler();
 8001302:	f7ff fdff 	bl	8000f04 <Error_Handler>
 8001306:	e777      	b.n	80011f8 <HAL_SPI_MspInit+0xfc>
      Error_Handler();
 8001308:	f7ff fdfc 	bl	8000f04 <Error_Handler>
 800130c:	e718      	b.n	8001140 <HAL_SPI_MspInit+0x44>
      Error_Handler();
 800130e:	f7ff fdf9 	bl	8000f04 <Error_Handler>
 8001312:	e7a3      	b.n	800125c <HAL_SPI_MspInit+0x160>
      Error_Handler();
 8001314:	f7ff fdf6 	bl	8000f04 <Error_Handler>
 8001318:	e7e4      	b.n	80012e4 <HAL_SPI_MspInit+0x1e8>
 800131a:	bf00      	nop
 800131c:	40013000 	.word	0x40013000
 8001320:	40003800 	.word	0x40003800
 8001324:	58024400 	.word	0x58024400
 8001328:	58020c00 	.word	0x58020c00
 800132c:	58021800 	.word	0x58021800
 8001330:	200002d4 	.word	0x200002d4
 8001334:	40020010 	.word	0x40020010
 8001338:	2000025c 	.word	0x2000025c
 800133c:	40020058 	.word	0x40020058
 8001340:	58020400 	.word	0x58020400
 8001344:	2000034c 	.word	0x2000034c
 8001348:	40020028 	.word	0x40020028

0800134c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler>
 800134e:	bf00      	nop

08001350 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <HardFault_Handler>
 8001352:	bf00      	nop

08001354 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler>
 8001356:	bf00      	nop

08001358 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <BusFault_Handler>
 800135a:	bf00      	nop

0800135c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler>
 800135e:	bf00      	nop

08001360 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <DebugMon_Handler>:
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <PendSV_Handler>:
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop

0800136c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136c:	f000 b900 	b.w	8001570 <HAL_IncTick>

08001370 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001370:	4801      	ldr	r0, [pc, #4]	; (8001378 <DMA1_Stream0_IRQHandler+0x8>)
 8001372:	f002 b94d 	b.w	8003610 <HAL_DMA_IRQHandler>
 8001376:	bf00      	nop
 8001378:	200002d4 	.word	0x200002d4

0800137c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800137c:	4801      	ldr	r0, [pc, #4]	; (8001384 <DMA1_Stream1_IRQHandler+0x8>)
 800137e:	f002 b947 	b.w	8003610 <HAL_DMA_IRQHandler>
 8001382:	bf00      	nop
 8001384:	2000034c 	.word	0x2000034c

08001388 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001388:	4801      	ldr	r0, [pc, #4]	; (8001390 <DMA1_Stream2_IRQHandler+0x8>)
 800138a:	f002 b941 	b.w	8003610 <HAL_DMA_IRQHandler>
 800138e:	bf00      	nop
 8001390:	200001e4 	.word	0x200001e4

08001394 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001394:	4801      	ldr	r0, [pc, #4]	; (800139c <DMA1_Stream3_IRQHandler+0x8>)
 8001396:	f002 b93b 	b.w	8003610 <HAL_DMA_IRQHandler>
 800139a:	bf00      	nop
 800139c:	2000025c 	.word	0x2000025c

080013a0 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013a0:	4801      	ldr	r0, [pc, #4]	; (80013a8 <ADC_IRQHandler+0x8>)
 80013a2:	f000 b913 	b.w	80015cc <HAL_ADC_IRQHandler>
 80013a6:	bf00      	nop
 80013a8:	20000174 	.word	0x20000174

080013ac <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013ac:	4801      	ldr	r0, [pc, #4]	; (80013b4 <SPI1_IRQHandler+0x8>)
 80013ae:	f005 bbc9 	b.w	8006b44 <HAL_SPI_IRQHandler>
 80013b2:	bf00      	nop
 80013b4:	200003d8 	.word	0x200003d8

080013b8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80013b8:	4801      	ldr	r0, [pc, #4]	; (80013c0 <SPI2_IRQHandler+0x8>)
 80013ba:	f005 bbc3 	b.w	8006b44 <HAL_SPI_IRQHandler>
 80013be:	bf00      	nop
 80013c0:	20000460 	.word	0x20000460

080013c4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013c4:	4922      	ldr	r1, [pc, #136]	; (8001450 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013c6:	4a23      	ldr	r2, [pc, #140]	; (8001454 <SystemInit+0x90>)
{
 80013c8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80013ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013d6:	6813      	ldr	r3, [r2, #0]
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	2b06      	cmp	r3, #6
 80013de:	d805      	bhi.n	80013ec <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e0:	6813      	ldr	r3, [r2, #0]
 80013e2:	f023 030f 	bic.w	r3, r3, #15
 80013e6:	f043 0307 	orr.w	r3, r3, #7
 80013ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013ee:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013f0:	4a1a      	ldr	r2, [pc, #104]	; (800145c <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 80013f2:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f4:	4817      	ldr	r0, [pc, #92]	; (8001454 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 80013f6:	f041 0101 	orr.w	r1, r1, #1
 80013fa:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80013fc:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80013fe:	6819      	ldr	r1, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001404:	6803      	ldr	r3, [r0, #0]
 8001406:	071b      	lsls	r3, r3, #28
 8001408:	d505      	bpl.n	8001416 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800140a:	6803      	ldr	r3, [r0, #0]
 800140c:	f023 030f 	bic.w	r3, r3, #15
 8001410:	f043 0307 	orr.w	r3, r3, #7
 8001414:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <SystemInit+0x94>)
 8001418:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800141a:	4911      	ldr	r1, [pc, #68]	; (8001460 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 800141c:	4c11      	ldr	r4, [pc, #68]	; (8001464 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 800141e:	4812      	ldr	r0, [pc, #72]	; (8001468 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8001420:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001422:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001424:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001426:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001428:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 800142c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800142e:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8001430:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 8001432:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8001434:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8001436:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800143a:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800143c:	480b      	ldr	r0, [pc, #44]	; (800146c <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 800143e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001442:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001444:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001446:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00
 8001454:	52002000 	.word	0x52002000
 8001458:	58024400 	.word	0x58024400
 800145c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001460:	01010280 	.word	0x01010280
 8001464:	02020200 	.word	0x02020200
 8001468:	01ff0000 	.word	0x01ff0000
 800146c:	52004000 	.word	0x52004000

08001470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001474:	f7ff ffa6 	bl	80013c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	; (80014b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	; (80014bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149e:	f006 f87b 	bl	8007598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a2:	f7fe ffb7 	bl	8000414 <main>
  bx  lr
 80014a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80014b4:	08008de0 	.word	0x08008de0
  ldr r2, =_sbss
 80014b8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80014bc:	2001dd80 	.word	0x2001dd80

080014c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC3_IRQHandler>
	...

080014c4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_InitTick+0x40>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b90b      	cbnz	r3, 80014ce <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80014ca:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014cc:	4770      	bx	lr
{
 80014ce:	b510      	push	{r4, lr}
 80014d0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_InitTick+0x44>)
 80014d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014dc:	6810      	ldr	r0, [r2, #0]
 80014de:	fbb0 f0f3 	udiv	r0, r0, r3
 80014e2:	f001 f8fd 	bl	80026e0 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	2c0f      	cmp	r4, #15
 80014e8:	d800      	bhi.n	80014ec <HAL_InitTick+0x28>
 80014ea:	b108      	cbz	r0, 80014f0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80014ec:	2001      	movs	r0, #1
}
 80014ee:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	4621      	mov	r1, r4
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f8:	f001 f8a6 	bl	8002648 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_InitTick+0x48>)
 80014fe:	2000      	movs	r0, #0
 8001500:	601c      	str	r4, [r3, #0]
}
 8001502:	bd10      	pop	{r4, pc}
 8001504:	2000000c 	.word	0x2000000c
 8001508:	20000004 	.word	0x20000004
 800150c:	20000010 	.word	0x20000010

08001510 <HAL_Init>:
{
 8001510:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001512:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001514:	4c12      	ldr	r4, [pc, #72]	; (8001560 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001516:	f001 f885 	bl	8002624 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800151a:	f003 f947 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_Init+0x54>)
 8001520:	4911      	ldr	r1, [pc, #68]	; (8001568 <HAL_Init+0x58>)
 8001522:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001524:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001526:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800152a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800152e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001530:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001532:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001536:	490d      	ldr	r1, [pc, #52]	; (800156c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001538:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800153c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800153e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001542:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001544:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001546:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001548:	f7ff ffbc 	bl	80014c4 <HAL_InitTick>
 800154c:	b110      	cbz	r0, 8001554 <HAL_Init+0x44>
    return HAL_ERROR;
 800154e:	2401      	movs	r4, #1
}
 8001550:	4620      	mov	r0, r4
 8001552:	bd10      	pop	{r4, pc}
 8001554:	4604      	mov	r4, r0
  HAL_MspInit();
 8001556:	f7ff fcd7 	bl	8000f08 <HAL_MspInit>
}
 800155a:	4620      	mov	r0, r4
 800155c:	bd10      	pop	{r4, pc}
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008
 8001564:	58024400 	.word	0x58024400
 8001568:	08008610 	.word	0x08008610
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_IncTick+0x10>)
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <HAL_IncTick+0x14>)
 8001574:	6811      	ldr	r1, [r2, #0]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	440b      	add	r3, r1
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2001dc44 	.word	0x2001dc44
 8001584:	2000000c 	.word	0x2000000c

08001588 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001588:	4b01      	ldr	r3, [pc, #4]	; (8001590 <HAL_GetTick+0x8>)
 800158a:	6818      	ldr	r0, [r3, #0]
}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	2001dc44 	.word	0x2001dc44

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b538      	push	{r3, r4, r5, lr}
 8001596:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff fff6 	bl	8001588 <HAL_GetTick>
 800159c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	1c63      	adds	r3, r4, #1
 80015a0:	d002      	beq.n	80015a8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <HAL_Delay+0x20>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a8:	f7ff ffee 	bl	8001588 <HAL_GetTick>
 80015ac:	1b43      	subs	r3, r0, r5
 80015ae:	42a3      	cmp	r3, r4
 80015b0:	d3fa      	bcc.n	80015a8 <HAL_Delay+0x14>
  {
  }
}
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
 80015b4:	2000000c 	.word	0x2000000c

080015b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80015b8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80015bc:	f7ff fc5c 	bl	8000e78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015c0:	bd08      	pop	{r3, pc}
 80015c2:	bf00      	nop

080015c4 <HAL_ADC_LevelOutOfWindowCallback>:
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop

080015c8 <HAL_ADC_ErrorCallback>:
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop

080015cc <HAL_ADC_IRQHandler>:
{
 80015cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015ce:	4a90      	ldr	r2, [pc, #576]	; (8001810 <HAL_ADC_IRQHandler+0x244>)
{
 80015d0:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015d2:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015d4:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015d6:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80015d8:	685f      	ldr	r7, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015da:	f000 8097 	beq.w	800170c <HAL_ADC_IRQHandler+0x140>
 80015de:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80015e2:	4293      	cmp	r3, r2
 80015e4:	f000 8092 	beq.w	800170c <HAL_ADC_IRQHandler+0x140>
 80015e8:	4b8a      	ldr	r3, [pc, #552]	; (8001814 <HAL_ADC_IRQHandler+0x248>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015ea:	689d      	ldr	r5, [r3, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80015ec:	07b0      	lsls	r0, r6, #30
 80015ee:	f005 051f 	and.w	r5, r5, #31
 80015f2:	d502      	bpl.n	80015fa <HAL_ADC_IRQHandler+0x2e>
 80015f4:	07b9      	lsls	r1, r7, #30
 80015f6:	f100 80ad 	bmi.w	8001754 <HAL_ADC_IRQHandler+0x188>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80015fa:	0773      	lsls	r3, r6, #29
 80015fc:	d57b      	bpl.n	80016f6 <HAL_ADC_IRQHandler+0x12a>
 80015fe:	0778      	lsls	r0, r7, #29
 8001600:	d579      	bpl.n	80016f6 <HAL_ADC_IRQHandler+0x12a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001602:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001604:	06db      	lsls	r3, r3, #27
 8001606:	d403      	bmi.n	8001610 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001608:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800160a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160e:	6623      	str	r3, [r4, #96]	; 0x60
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001610:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001618:	d11c      	bne.n	8001654 <HAL_ADC_IRQHandler+0x88>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800161a:	4a7f      	ldr	r2, [pc, #508]	; (8001818 <HAL_ADC_IRQHandler+0x24c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	f000 80ea 	beq.w	80017f6 <HAL_ADC_IRQHandler+0x22a>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001622:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001624:	0490      	lsls	r0, r2, #18
 8001626:	d415      	bmi.n	8001654 <HAL_ADC_IRQHandler+0x88>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	0711      	lsls	r1, r2, #28
 800162c:	d512      	bpl.n	8001654 <HAL_ADC_IRQHandler+0x88>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	0752      	lsls	r2, r2, #29
 8001632:	f100 80f5 	bmi.w	8001820 <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	f022 020c 	bic.w	r2, r2, #12
 800163c:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800163e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001644:	6623      	str	r3, [r4, #96]	; 0x60
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001646:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001648:	04d8      	lsls	r0, r3, #19
 800164a:	d403      	bmi.n	8001654 <HAL_ADC_IRQHandler+0x88>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800164c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fc0b 	bl	8000e70 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	220c      	movs	r2, #12
 800165e:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001660:	06b1      	lsls	r1, r6, #26
 8001662:	d54e      	bpl.n	8001702 <HAL_ADC_IRQHandler+0x136>
 8001664:	06ba      	lsls	r2, r7, #26
 8001666:	d54c      	bpl.n	8001702 <HAL_ADC_IRQHandler+0x136>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001668:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800166a:	06d9      	lsls	r1, r3, #27
 800166c:	d403      	bmi.n	8001676 <HAL_ADC_IRQHandler+0xaa>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800166e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001670:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001674:	6623      	str	r3, [r4, #96]	; 0x60
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001676:	6823      	ldr	r3, [r4, #0]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001678:	4967      	ldr	r1, [pc, #412]	; (8001818 <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800167a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800167c:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800167e:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001680:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8001684:	d074      	beq.n	8001770 <HAL_ADC_IRQHandler+0x1a4>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001686:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001688:	b9d2      	cbnz	r2, 80016c0 <HAL_ADC_IRQHandler+0xf4>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800168a:	018a      	lsls	r2, r1, #6
 800168c:	f100 80ab 	bmi.w	80017e6 <HAL_ADC_IRQHandler+0x21a>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	0650      	lsls	r0, r2, #25
 8001694:	d514      	bpl.n	80016c0 <HAL_ADC_IRQHandler+0xf4>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001696:	028a      	lsls	r2, r1, #10
 8001698:	d412      	bmi.n	80016c0 <HAL_ADC_IRQHandler+0xf4>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	0710      	lsls	r0, r2, #28
 800169e:	f100 80ca 	bmi.w	8001836 <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016a8:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016b0:	6623      	str	r3, [r4, #96]	; 0x60
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016b4:	05d9      	lsls	r1, r3, #23
 80016b6:	d403      	bmi.n	80016c0 <HAL_ADC_IRQHandler+0xf4>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f000 ff21 	bl	8002508 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	2260      	movs	r2, #96	; 0x60
 80016ca:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016cc:	0632      	lsls	r2, r6, #24
 80016ce:	d501      	bpl.n	80016d4 <HAL_ADC_IRQHandler+0x108>
 80016d0:	063b      	lsls	r3, r7, #24
 80016d2:	d460      	bmi.n	8001796 <HAL_ADC_IRQHandler+0x1ca>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80016d4:	05f0      	lsls	r0, r6, #23
 80016d6:	d501      	bpl.n	80016dc <HAL_ADC_IRQHandler+0x110>
 80016d8:	05f9      	lsls	r1, r7, #23
 80016da:	d467      	bmi.n	80017ac <HAL_ADC_IRQHandler+0x1e0>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80016dc:	05b2      	lsls	r2, r6, #22
 80016de:	d501      	bpl.n	80016e4 <HAL_ADC_IRQHandler+0x118>
 80016e0:	05bb      	lsls	r3, r7, #22
 80016e2:	d44c      	bmi.n	800177e <HAL_ADC_IRQHandler+0x1b2>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80016e4:	06f0      	lsls	r0, r6, #27
 80016e6:	d501      	bpl.n	80016ec <HAL_ADC_IRQHandler+0x120>
 80016e8:	06f9      	lsls	r1, r7, #27
 80016ea:	d411      	bmi.n	8001710 <HAL_ADC_IRQHandler+0x144>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80016ec:	0575      	lsls	r5, r6, #21
 80016ee:	d501      	bpl.n	80016f4 <HAL_ADC_IRQHandler+0x128>
 80016f0:	0578      	lsls	r0, r7, #21
 80016f2:	d467      	bmi.n	80017c4 <HAL_ADC_IRQHandler+0x1f8>
}
 80016f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016f6:	0731      	lsls	r1, r6, #28
 80016f8:	d5b2      	bpl.n	8001660 <HAL_ADC_IRQHandler+0x94>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016fa:	073a      	lsls	r2, r7, #28
 80016fc:	d481      	bmi.n	8001602 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016fe:	06b1      	lsls	r1, r6, #26
 8001700:	d4b0      	bmi.n	8001664 <HAL_ADC_IRQHandler+0x98>
 8001702:	0673      	lsls	r3, r6, #25
 8001704:	d5e2      	bpl.n	80016cc <HAL_ADC_IRQHandler+0x100>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001706:	0678      	lsls	r0, r7, #25
 8001708:	d5e0      	bpl.n	80016cc <HAL_ADC_IRQHandler+0x100>
 800170a:	e7ad      	b.n	8001668 <HAL_ADC_IRQHandler+0x9c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800170c:	4b43      	ldr	r3, [pc, #268]	; (800181c <HAL_ADC_IRQHandler+0x250>)
 800170e:	e76c      	b.n	80015ea <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001710:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001712:	b183      	cbz	r3, 8001736 <HAL_ADC_IRQHandler+0x16a>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001714:	6823      	ldr	r3, [r4, #0]
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001716:	2d00      	cmp	r5, #0
 8001718:	d076      	beq.n	8001808 <HAL_ADC_IRQHandler+0x23c>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800171a:	4a3d      	ldr	r2, [pc, #244]	; (8001810 <HAL_ADC_IRQHandler+0x244>)
 800171c:	4293      	cmp	r3, r2
 800171e:	f000 8088 	beq.w	8001832 <HAL_ADC_IRQHandler+0x266>
 8001722:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001726:	4293      	cmp	r3, r2
 8001728:	f000 8083 	beq.w	8001832 <HAL_ADC_IRQHandler+0x266>
 800172c:	4a39      	ldr	r2, [pc, #228]	; (8001814 <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800172e:	6892      	ldr	r2, [r2, #8]
 8001730:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8001734:	d00b      	beq.n	800174e <HAL_ADC_IRQHandler+0x182>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001736:	6e23      	ldr	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8001738:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	6623      	str	r3, [r4, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	6663      	str	r3, [r4, #100]	; 0x64
      HAL_ADC_ErrorCallback(hadc);
 8001748:	f7ff ff3e 	bl	80015c8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	2210      	movs	r2, #16
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e7cb      	b.n	80016ec <HAL_ADC_IRQHandler+0x120>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001754:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001756:	06da      	lsls	r2, r3, #27
 8001758:	d403      	bmi.n	8001762 <HAL_ADC_IRQHandler+0x196>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800175a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800175c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001760:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001762:	4620      	mov	r0, r4
 8001764:	f000 fed8 	bl	8002518 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	2202      	movs	r2, #2
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e744      	b.n	80015fa <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001770:	21c1      	movs	r1, #193	; 0xc1
 8001772:	40e9      	lsrs	r1, r5
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001774:	07c9      	lsls	r1, r1, #31
 8001776:	d486      	bmi.n	8001686 <HAL_ADC_IRQHandler+0xba>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001778:	4925      	ldr	r1, [pc, #148]	; (8001810 <HAL_ADC_IRQHandler+0x244>)
 800177a:	68c9      	ldr	r1, [r1, #12]
 800177c:	e784      	b.n	8001688 <HAL_ADC_IRQHandler+0xbc>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800177e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001780:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001782:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001786:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001788:	f000 fec4 	bl	8002514 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e7a6      	b.n	80016e4 <HAL_ADC_IRQHandler+0x118>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001796:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001798:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800179a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179e:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017a0:	f7ff ff10 	bl	80015c4 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	2280      	movs	r2, #128	; 0x80
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e793      	b.n	80016d4 <HAL_ADC_IRQHandler+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017ae:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017b6:	f000 feab 	bl	8002510 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e78b      	b.n	80016dc <HAL_ADC_IRQHandler+0x110>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ca:	6822      	ldr	r2, [r4, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017cc:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d2:	6623      	str	r3, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80017d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	6663      	str	r3, [r4, #100]	; 0x64
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017dc:	6011      	str	r1, [r2, #0]
}
 80017de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017e2:	f000 be93 	b.w	800250c <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017e6:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80017ea:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80017ee:	4302      	orrs	r2, r0
 80017f0:	f47f af66 	bne.w	80016c0 <HAL_ADC_IRQHandler+0xf4>
 80017f4:	e74c      	b.n	8001690 <HAL_ADC_IRQHandler+0xc4>
 80017f6:	f240 2221 	movw	r2, #545	; 0x221
 80017fa:	40ea      	lsrs	r2, r5
 80017fc:	07d2      	lsls	r2, r2, #31
 80017fe:	f53f af10 	bmi.w	8001622 <HAL_ADC_IRQHandler+0x56>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001802:	4a03      	ldr	r2, [pc, #12]	; (8001810 <HAL_ADC_IRQHandler+0x244>)
 8001804:	68d2      	ldr	r2, [r2, #12]
 8001806:	e70d      	b.n	8001624 <HAL_ADC_IRQHandler+0x58>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	0792      	lsls	r2, r2, #30
 800180c:	d09f      	beq.n	800174e <HAL_ADC_IRQHandler+0x182>
 800180e:	e792      	b.n	8001736 <HAL_ADC_IRQHandler+0x16a>
 8001810:	40022000 	.word	0x40022000
 8001814:	58026300 	.word	0x58026300
 8001818:	40022100 	.word	0x40022100
 800181c:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001820:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6663      	str	r3, [r4, #100]	; 0x64
 8001830:	e710      	b.n	8001654 <HAL_ADC_IRQHandler+0x88>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001832:	4a05      	ldr	r2, [pc, #20]	; (8001848 <HAL_ADC_IRQHandler+0x27c>)
 8001834:	e77b      	b.n	800172e <HAL_ADC_IRQHandler+0x162>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001836:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	6623      	str	r3, [r4, #96]	; 0x60
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6663      	str	r3, [r4, #100]	; 0x64
 8001846:	e73b      	b.n	80016c0 <HAL_ADC_IRQHandler+0xf4>
 8001848:	40022300 	.word	0x40022300

0800184c <ADC_DMAConvCplt>:
{
 800184c:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800184e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001850:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001852:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001856:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001858:	d11d      	bne.n	8001896 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800185a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800185c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001860:	661a      	str	r2, [r3, #96]	; 0x60
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001862:	680a      	ldr	r2, [r1, #0]
 8001864:	f012 0f08 	tst.w	r2, #8
 8001868:	68ca      	ldr	r2, [r1, #12]
 800186a:	d01b      	beq.n	80018a4 <ADC_DMAConvCplt+0x58>
 800186c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001870:	d10d      	bne.n	800188e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001872:	68ca      	ldr	r2, [r1, #12]
 8001874:	0494      	lsls	r4, r2, #18
 8001876:	d40a      	bmi.n	800188e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001878:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800187a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800187e:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001880:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001882:	04d1      	lsls	r1, r2, #19
 8001884:	d403      	bmi.n	800188e <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001886:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001888:	f042 0201 	orr.w	r2, r2, #1
 800188c:	661a      	str	r2, [r3, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff faee 	bl	8000e70 <HAL_ADC_ConvCpltCallback>
}
 8001894:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001896:	06d2      	lsls	r2, r2, #27
 8001898:	d40a      	bmi.n	80018b0 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800189c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80018a4:	0790      	lsls	r0, r2, #30
 80018a6:	d0e7      	beq.n	8001878 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fae1 	bl	8000e70 <HAL_ADC_ConvCpltCallback>
 80018ae:	e7f1      	b.n	8001894 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fe89 	bl	80015c8 <HAL_ADC_ErrorCallback>
}
 80018b6:	bd10      	pop	{r4, pc}

080018b8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018b8:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018ba:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018bc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80018be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c2:	6603      	str	r3, [r0, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018c4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6643      	str	r3, [r0, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018cc:	f7ff fe7c 	bl	80015c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018d0:	bd08      	pop	{r3, pc}
 80018d2:	bf00      	nop

080018d4 <HAL_ADC_ConfigChannel>:
{
 80018d4:	b4f0      	push	{r4, r5, r6, r7}
  __IO uint32_t wait_loop_index = 0;
 80018d6:	2200      	movs	r2, #0
{
 80018d8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80018da:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80018dc:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 80018e0:	2a01      	cmp	r2, #1
 80018e2:	f000 813d 	beq.w	8001b60 <HAL_ADC_ConfigChannel+0x28c>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ea:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80018ec:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018f0:	6894      	ldr	r4, [r2, #8]
 80018f2:	0765      	lsls	r5, r4, #29
 80018f4:	d509      	bpl.n	800190a <HAL_ADC_ConfigChannel+0x36>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018f8:	f042 0220 	orr.w	r2, r2, #32
 80018fc:	661a      	str	r2, [r3, #96]	; 0x60
  __HAL_UNLOCK(hadc);
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8001904:	b002      	add	sp, #8
 8001906:	bcf0      	pop	{r4, r5, r6, r7}
 8001908:	4770      	bx	lr
    if (hadc->Instance != ADC3)
 800190a:	4c97      	ldr	r4, [pc, #604]	; (8001b68 <HAL_ADC_ConfigChannel+0x294>)
 800190c:	42a2      	cmp	r2, r4
 800190e:	d00f      	beq.n	8001930 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001910:	680c      	ldr	r4, [r1, #0]
 8001912:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8001916:	2d00      	cmp	r5, #0
 8001918:	f000 80f9 	beq.w	8001b0e <HAL_ADC_ConfigChannel+0x23a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001920:	b114      	cbz	r4, 8001928 <HAL_ADC_ConfigChannel+0x54>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001922:	fab4 f484 	clz	r4, r4
 8001926:	40a0      	lsls	r0, r4
 8001928:	69d4      	ldr	r4, [r2, #28]
 800192a:	4320      	orrs	r0, r4
 800192c:	61d0      	str	r0, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001932:	f102 0030 	add.w	r0, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8001936:	251f      	movs	r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001938:	09a2      	lsrs	r2, r4, #6
  MODIFY_REG(*preg,
 800193a:	f004 0c1f 	and.w	ip, r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800193e:	f002 040c 	and.w	r4, r2, #12
  MODIFY_REG(*preg,
 8001942:	680a      	ldr	r2, [r1, #0]
 8001944:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001948:	fa02 f20c 	lsl.w	r2, r2, ip
 800194c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8001950:	5905      	ldr	r5, [r0, r4]
 8001952:	ea25 0c0c 	bic.w	ip, r5, ip
 8001956:	ea42 020c 	orr.w	r2, r2, ip
 800195a:	5102      	str	r2, [r0, r4]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800195c:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800195e:	6890      	ldr	r0, [r2, #8]
 8001960:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001964:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001966:	d166      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x162>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001968:	0704      	lsls	r4, r0, #28
 800196a:	d464      	bmi.n	8001a36 <HAL_ADC_ConfigChannel+0x162>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800196c:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800196e:	3214      	adds	r2, #20
  MODIFY_REG(*preg,
 8001970:	f04f 0c07 	mov.w	ip, #7
 8001974:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001976:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8001978:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800197c:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001980:	fa0c fc04 	lsl.w	ip, ip, r4
 8001984:	fa06 f404 	lsl.w	r4, r6, r4
 8001988:	5950      	ldr	r0, [r2, r5]
 800198a:	ea20 000c 	bic.w	r0, r0, ip
 800198e:	4320      	orrs	r0, r4
      if (hadc->Instance == ADC3)
 8001990:	4c75      	ldr	r4, [pc, #468]	; (8001b68 <HAL_ADC_ConfigChannel+0x294>)
 8001992:	5150      	str	r0, [r2, r5]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	42a0      	cmp	r0, r4
 8001998:	4602      	mov	r2, r0
 800199a:	f000 80cb 	beq.w	8001b34 <HAL_ADC_ConfigChannel+0x260>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800199e:	4873      	ldr	r0, [pc, #460]	; (8001b6c <HAL_ADC_ConfigChannel+0x298>)
 80019a0:	6800      	ldr	r0, [r0, #0]
 80019a2:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80019a6:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80019aa:	68d0      	ldr	r0, [r2, #12]
 80019ac:	f000 8161 	beq.w	8001c72 <HAL_ADC_ConfigChannel+0x39e>
 80019b0:	f010 0f10 	tst.w	r0, #16
 80019b4:	694c      	ldr	r4, [r1, #20]
 80019b6:	68d0      	ldr	r0, [r2, #12]
 80019b8:	f040 8161 	bne.w	8001c7e <HAL_ADC_ConfigChannel+0x3aa>
 80019bc:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80019c0:	0040      	lsls	r0, r0, #1
 80019c2:	4084      	lsls	r4, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019c4:	690d      	ldr	r5, [r1, #16]
 80019c6:	2d04      	cmp	r5, #4
 80019c8:	f000 8135 	beq.w	8001c36 <HAL_ADC_ConfigChannel+0x362>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019cc:	3260      	adds	r2, #96	; 0x60
    MODIFY_REG(*preg,
 80019ce:	6808      	ldr	r0, [r1, #0]
 80019d0:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 80019d4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80019d8:	f006 4c00 	and.w	ip, r6, #2147483648	; 0x80000000
 80019dc:	ea40 000c 	orr.w	r0, r0, ip
 80019e0:	4320      	orrs	r0, r4
 80019e2:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        if (hadc->Instance == ADC3)
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	4a5f      	ldr	r2, [pc, #380]	; (8001b68 <HAL_ADC_ConfigChannel+0x294>)
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ea:	690d      	ldr	r5, [r1, #16]
 80019ec:	4290      	cmp	r0, r2
 80019ee:	f000 81b7 	beq.w	8001d60 <HAL_ADC_ConfigChannel+0x48c>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80019f2:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f6:	3060      	adds	r0, #96	; 0x60
 80019f8:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80019fc:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
 8001a00:	fab4 f484 	clz	r4, r4
 8001a04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a08:	0964      	lsrs	r4, r4, #5
 8001a0a:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
 8001a0e:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001a12:	7e0a      	ldrb	r2, [r1, #24]
 8001a14:	681d      	ldr	r5, [r3, #0]
 8001a16:	f1a2 0201 	sub.w	r2, r2, #1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a1a:	690c      	ldr	r4, [r1, #16]
 8001a1c:	6928      	ldr	r0, [r5, #16]
 8001a1e:	fab2 f282 	clz	r2, r2
 8001a22:	f004 041f 	and.w	r4, r4, #31
 8001a26:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8001a2a:	0952      	lsrs	r2, r2, #5
 8001a2c:	02d2      	lsls	r2, r2, #11
 8001a2e:	40a2      	lsls	r2, r4
 8001a30:	4302      	orrs	r2, r0
 8001a32:	612a      	str	r2, [r5, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a34:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a36:	6890      	ldr	r0, [r2, #8]
 8001a38:	07c0      	lsls	r0, r0, #31
 8001a3a:	d466      	bmi.n	8001b0a <HAL_ADC_ConfigChannel+0x236>
  if (ADCx == ADC3)
 8001a3c:	4d4a      	ldr	r5, [pc, #296]	; (8001b68 <HAL_ADC_ConfigChannel+0x294>)
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a3e:	6808      	ldr	r0, [r1, #0]
 8001a40:	42aa      	cmp	r2, r5
 8001a42:	68cc      	ldr	r4, [r1, #12]
 8001a44:	d067      	beq.n	8001b16 <HAL_ADC_ConfigChannel+0x242>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001a46:	f004 0418 	and.w	r4, r4, #24
 8001a4a:	4d49      	ldr	r5, [pc, #292]	; (8001b70 <HAL_ADC_ConfigChannel+0x29c>)
 8001a4c:	40e5      	lsrs	r5, r4
 8001a4e:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
 8001a52:	4005      	ands	r5, r0
 8001a54:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8001a58:	ea24 0000 	bic.w	r0, r4, r0
 8001a5c:	4328      	orrs	r0, r5
 8001a5e:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a62:	4a44      	ldr	r2, [pc, #272]	; (8001b74 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a64:	68c8      	ldr	r0, [r1, #12]
 8001a66:	4290      	cmp	r0, r2
 8001a68:	f000 8096 	beq.w	8001b98 <HAL_ADC_ConfigChannel+0x2c4>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a6c:	6808      	ldr	r0, [r1, #0]
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	da4b      	bge.n	8001b0a <HAL_ADC_ConfigChannel+0x236>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a72:	681c      	ldr	r4, [r3, #0]
 8001a74:	4a40      	ldr	r2, [pc, #256]	; (8001b78 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a76:	4294      	cmp	r4, r2
 8001a78:	f000 8116 	beq.w	8001ca8 <HAL_ADC_ConfigChannel+0x3d4>
 8001a7c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001a80:	4294      	cmp	r4, r2
 8001a82:	f000 8111 	beq.w	8001ca8 <HAL_ADC_ConfigChannel+0x3d4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a86:	4d3d      	ldr	r5, [pc, #244]	; (8001b7c <HAL_ADC_ConfigChannel+0x2a8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a88:	4937      	ldr	r1, [pc, #220]	; (8001b68 <HAL_ADC_ConfigChannel+0x294>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a8a:	68aa      	ldr	r2, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a8c:	6889      	ldr	r1, [r1, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a8e:	f002 76e0 	and.w	r6, r2, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a92:	43c9      	mvns	r1, r1
 8001a94:	f001 0101 	and.w	r1, r1, #1
 8001a98:	2900      	cmp	r1, #0
 8001a9a:	f000 815b 	beq.w	8001d54 <HAL_ADC_ConfigChannel+0x480>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a9e:	4938      	ldr	r1, [pc, #224]	; (8001b80 <HAL_ADC_ConfigChannel+0x2ac>)
 8001aa0:	4288      	cmp	r0, r1
 8001aa2:	d014      	beq.n	8001ace <HAL_ADC_ConfigChannel+0x1fa>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001aa4:	4937      	ldr	r1, [pc, #220]	; (8001b84 <HAL_ADC_ConfigChannel+0x2b0>)
 8001aa6:	4288      	cmp	r0, r1
 8001aa8:	f000 81b4 	beq.w	8001e14 <HAL_ADC_ConfigChannel+0x540>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001aac:	4936      	ldr	r1, [pc, #216]	; (8001b88 <HAL_ADC_ConfigChannel+0x2b4>)
 8001aae:	4288      	cmp	r0, r1
 8001ab0:	d12b      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x236>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ab2:	0257      	lsls	r7, r2, #9
 8001ab4:	d429      	bmi.n	8001b0a <HAL_ADC_ConfigChannel+0x236>
 8001ab6:	4a2c      	ldr	r2, [pc, #176]	; (8001b68 <HAL_ADC_ConfigChannel+0x294>)
 8001ab8:	4294      	cmp	r4, r2
 8001aba:	d126      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x236>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001abc:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001ac4:	4332      	orrs	r2, r6
 8001ac6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001aca:	60aa      	str	r2, [r5, #8]
}
 8001acc:	e717      	b.n	80018fe <HAL_ADC_ConfigChannel+0x2a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ace:	0212      	lsls	r2, r2, #8
 8001ad0:	d41b      	bmi.n	8001b0a <HAL_ADC_ConfigChannel+0x236>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ad2:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <HAL_ADC_ConfigChannel+0x294>)
 8001ad4:	4294      	cmp	r4, r2
 8001ad6:	d118      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x236>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ad8:	4a2c      	ldr	r2, [pc, #176]	; (8001b8c <HAL_ADC_ConfigChannel+0x2b8>)
 8001ada:	482d      	ldr	r0, [pc, #180]	; (8001b90 <HAL_ADC_ConfigChannel+0x2bc>)
 8001adc:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ade:	68a9      	ldr	r1, [r5, #8]
 8001ae0:	0992      	lsrs	r2, r2, #6
 8001ae2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001ae6:	fba0 0202 	umull	r0, r2, r0, r2
 8001aea:	4331      	orrs	r1, r6
 8001aec:	0992      	lsrs	r2, r2, #6
 8001aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001af2:	3201      	adds	r2, #1
 8001af4:	60a9      	str	r1, [r5, #8]
 8001af6:	0052      	lsls	r2, r2, #1
 8001af8:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001afa:	9a01      	ldr	r2, [sp, #4]
 8001afc:	b12a      	cbz	r2, 8001b0a <HAL_ADC_ConfigChannel+0x236>
                wait_loop_index--;
 8001afe:	9a01      	ldr	r2, [sp, #4]
 8001b00:	3a01      	subs	r2, #1
 8001b02:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001b04:	9a01      	ldr	r2, [sp, #4]
 8001b06:	2a00      	cmp	r2, #0
 8001b08:	d1f9      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x22a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	e6f7      	b.n	80018fe <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b0e:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001b12:	40a0      	lsls	r0, r4
 8001b14:	e708      	b.n	8001928 <HAL_ADC_ConfigChannel+0x54>
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001b16:	f004 0418 	and.w	r4, r4, #24
 8001b1a:	4d15      	ldr	r5, [pc, #84]	; (8001b70 <HAL_ADC_ConfigChannel+0x29c>)
 8001b1c:	40e5      	lsrs	r5, r4
 8001b1e:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8001b22:	4005      	ands	r5, r0
 8001b24:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8001b28:	ea24 0000 	bic.w	r0, r4, r0
 8001b2c:	4328      	orrs	r0, r5
 8001b2e:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8001b32:	e796      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x18e>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b34:	e9d1 5204 	ldrd	r5, r2, [r1, #16]
 8001b38:	68c4      	ldr	r4, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b3a:	2d04      	cmp	r5, #4
 8001b3c:	f000 80c3 	beq.w	8001cc6 <HAL_ADC_ConfigChannel+0x3f2>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b40:	f3c4 04c1 	ubfx	r4, r4, #3, #2
    MODIFY_REG(*preg,
 8001b44:	6808      	ldr	r0, [r1, #0]
 8001b46:	0064      	lsls	r4, r4, #1
 8001b48:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001b4c:	40a2      	lsls	r2, r4
 8001b4e:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b50:	4810      	ldr	r0, [pc, #64]	; (8001b94 <HAL_ADC_ConfigChannel+0x2c0>)
    MODIFY_REG(*preg,
 8001b52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b56:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8001b5a:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
 8001b5e:	e742      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x112>
  __HAL_LOCK(hadc);
 8001b60:	2002      	movs	r0, #2
}
 8001b62:	b002      	add	sp, #8
 8001b64:	bcf0      	pop	{r4, r5, r6, r7}
 8001b66:	4770      	bx	lr
 8001b68:	58026000 	.word	0x58026000
 8001b6c:	5c001000 	.word	0x5c001000
 8001b70:	000fffff 	.word	0x000fffff
 8001b74:	47ff0000 	.word	0x47ff0000
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	58026300 	.word	0x58026300
 8001b80:	c7520000 	.word	0xc7520000
 8001b84:	c3210000 	.word	0xc3210000
 8001b88:	cb840000 	.word	0xcb840000
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	053e2d63 	.word	0x053e2d63
 8001b94:	58026060 	.word	0x58026060
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b98:	680d      	ldr	r5, [r1, #0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b9a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b9c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	d071      	beq.n	8001c88 <HAL_ADC_ConfigChannel+0x3b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	f000 80fd 	beq.w	8001da8 <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8001bae:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bb2:	3201      	adds	r2, #1
 8001bb4:	f002 021f 	and.w	r2, r2, #31
 8001bb8:	2a09      	cmp	r2, #9
 8001bba:	f240 80f5 	bls.w	8001da8 <HAL_ADC_ConfigChannel+0x4d4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
 8001bc2:	2c00      	cmp	r4, #0
 8001bc4:	f000 81a9 	beq.w	8001f1a <HAL_ADC_ConfigChannel+0x646>
  return __builtin_clz(value);
 8001bc8:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bcc:	3401      	adds	r4, #1
 8001bce:	06a4      	lsls	r4, r4, #26
 8001bd0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	f000 819c 	beq.w	8001f16 <HAL_ADC_ConfigChannel+0x642>
  return __builtin_clz(value);
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	2601      	movs	r6, #1
 8001be4:	3201      	adds	r2, #1
 8001be6:	f002 021f 	and.w	r2, r2, #31
 8001bea:	fa06 f202 	lsl.w	r2, r6, r2
 8001bee:	4314      	orrs	r4, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	fa95 f5a5 	rbit	r5, r5
  if (value == 0U)
 8001bf4:	2d00      	cmp	r5, #0
 8001bf6:	f000 818c 	beq.w	8001f12 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8001bfa:	fab5 f585 	clz	r5, r5
 8001bfe:	2203      	movs	r2, #3
 8001c00:	f06f 061d 	mvn.w	r6, #29
 8001c04:	3501      	adds	r5, #1
 8001c06:	f005 051f 	and.w	r5, r5, #31
 8001c0a:	fb12 6205 	smlabb	r2, r2, r5, r6
 8001c0e:	0512      	lsls	r2, r2, #20
 8001c10:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c14:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c16:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8001c18:	2607      	movs	r6, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c1a:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 8001c1c:	f3c2 5204 	ubfx	r2, r2, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c20:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001c24:	4096      	lsls	r6, r2
 8001c26:	5944      	ldr	r4, [r0, r5]
 8001c28:	ea24 0406 	bic.w	r4, r4, r6
 8001c2c:	688e      	ldr	r6, [r1, #8]
 8001c2e:	4096      	lsls	r6, r2
 8001c30:	4334      	orrs	r4, r6
 8001c32:	5144      	str	r4, [r0, r5]
}
 8001c34:	e71a      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x198>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c36:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001c38:	680d      	ldr	r5, [r1, #0]
 8001c3a:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001c3e:	06a8      	lsls	r0, r5, #26
 8001c40:	ebb4 6f85 	cmp.w	r4, r5, lsl #26
 8001c44:	d078      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x464>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c46:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001c48:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001c4c:	4284      	cmp	r4, r0
 8001c4e:	d06b      	beq.n	8001d28 <HAL_ADC_ConfigChannel+0x454>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c50:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8001c52:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001c56:	4284      	cmp	r4, r0
 8001c58:	d05e      	beq.n	8001d18 <HAL_ADC_ConfigChannel+0x444>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c5a:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 8001c5c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001c60:	4284      	cmp	r4, r0
 8001c62:	f47f aee8 	bne.w	8001a36 <HAL_ADC_ConfigChannel+0x162>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001c66:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001c68:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c6c:	66d0      	str	r0, [r2, #108]	; 0x6c
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	e6e1      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x162>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c72:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001c76:	694c      	ldr	r4, [r1, #20]
 8001c78:	0040      	lsls	r0, r0, #1
 8001c7a:	4084      	lsls	r4, r0
 8001c7c:	e6a2      	b.n	80019c4 <HAL_ADC_ConfigChannel+0xf0>
 8001c7e:	0840      	lsrs	r0, r0, #1
 8001c80:	f000 0008 	and.w	r0, r0, #8
 8001c84:	4084      	lsls	r4, r0
 8001c86:	e69d      	b.n	80019c4 <HAL_ADC_ConfigChannel+0xf0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c88:	0eaa      	lsrs	r2, r5, #26
 8001c8a:	3201      	adds	r2, #1
 8001c8c:	f002 051f 	and.w	r5, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c90:	2d09      	cmp	r5, #9
 8001c92:	d87b      	bhi.n	8001d8c <HAL_ADC_ConfigChannel+0x4b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c94:	0694      	lsls	r4, r2, #26
 8001c96:	2201      	movs	r2, #1
 8001c98:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001c9c:	40aa      	lsls	r2, r5
 8001c9e:	4314      	orrs	r4, r2
 8001ca0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001ca4:	0512      	lsls	r2, r2, #20
 8001ca6:	e7b5      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x340>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca8:	49a2      	ldr	r1, [pc, #648]	; (8001f34 <HAL_ADC_ConfigChannel+0x660>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001caa:	4da3      	ldr	r5, [pc, #652]	; (8001f38 <HAL_ADC_ConfigChannel+0x664>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cac:	f501 7180 	add.w	r1, r1, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cb0:	68aa      	ldr	r2, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cb2:	f851 6cf8 	ldr.w	r6, [r1, #-248]
 8001cb6:	6889      	ldr	r1, [r1, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cb8:	4331      	orrs	r1, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cba:	f002 76e0 	and.w	r6, r2, #29360128	; 0x1c00000
 8001cbe:	43c9      	mvns	r1, r1
 8001cc0:	f001 0101 	and.w	r1, r1, #1
 8001cc4:	e6e8      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x1c4>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cc6:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cc8:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8001cca:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8001cce:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8001cd0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001cd4:	2d00      	cmp	r5, #0
 8001cd6:	f040 80ad 	bne.w	8001e34 <HAL_ADC_ConfigChannel+0x560>
 8001cda:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001cde:	4294      	cmp	r4, r2
 8001ce0:	f000 80d7 	beq.w	8001e92 <HAL_ADC_ConfigChannel+0x5be>
 8001ce4:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8001ce6:	6e44      	ldr	r4, [r0, #100]	; 0x64
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ce8:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001cec:	42a2      	cmp	r2, r4
 8001cee:	f000 811f 	beq.w	8001f30 <HAL_ADC_ConfigChannel+0x65c>
 8001cf2:	4d92      	ldr	r5, [pc, #584]	; (8001f3c <HAL_ADC_ConfigChannel+0x668>)
 8001cf4:	68ac      	ldr	r4, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf6:	f105 0608 	add.w	r6, r5, #8
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cfa:	68ac      	ldr	r4, [r5, #8]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cfc:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001d00:	4294      	cmp	r4, r2
 8001d02:	f000 80f3 	beq.w	8001eec <HAL_ADC_ConfigChannel+0x618>
 8001d06:	68ec      	ldr	r4, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d08:	350c      	adds	r5, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d0a:	682c      	ldr	r4, [r5, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d0c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001d10:	42a2      	cmp	r2, r4
 8001d12:	d019      	beq.n	8001d48 <HAL_ADC_ConfigChannel+0x474>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d14:	4602      	mov	r2, r0
 8001d16:	e68e      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x162>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d18:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001d1a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d1e:	6690      	str	r0, [r2, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d20:	6808      	ldr	r0, [r1, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	0680      	lsls	r0, r0, #26
 8001d26:	e798      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x386>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d28:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001d2a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d2e:	6650      	str	r0, [r2, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d30:	6808      	ldr	r0, [r1, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	0680      	lsls	r0, r0, #26
 8001d36:	e78b      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x37c>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d38:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001d3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d3e:	6610      	str	r0, [r2, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d40:	6808      	ldr	r0, [r1, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	0680      	lsls	r0, r0, #26
 8001d46:	e77e      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x372>
    MODIFY_REG(*preg,
 8001d48:	682a      	ldr	r2, [r5, #0]
 8001d4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d4e:	602a      	str	r2, [r5, #0]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	e670      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x162>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          tmp_hal_status = HAL_ERROR;
 8001d56:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d58:	f042 0220 	orr.w	r2, r2, #32
 8001d5c:	661a      	str	r2, [r3, #96]	; 0x60
          tmp_hal_status = HAL_ERROR;
 8001d5e:	e5ce      	b.n	80018fe <HAL_ADC_ConfigChannel+0x2a>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d60:	4c76      	ldr	r4, [pc, #472]	; (8001f3c <HAL_ADC_ConfigChannel+0x668>)
    MODIFY_REG(*preg,
 8001d62:	69ce      	ldr	r6, [r1, #28]
 8001d64:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 8001d68:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001d6c:	4332      	orrs	r2, r6
 8001d6e:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	690e      	ldr	r6, [r1, #16]
  if (ADCx == ADC3)
 8001d76:	4282      	cmp	r2, r0
 8001d78:	f891 5020 	ldrb.w	r5, [r1, #32]
 8001d7c:	d03b      	beq.n	8001df6 <HAL_ADC_ConfigChannel+0x522>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d7e:	6890      	ldr	r0, [r2, #8]
 8001d80:	07c0      	lsls	r0, r0, #31
 8001d82:	f53f aec2 	bmi.w	8001b0a <HAL_ADC_ConfigChannel+0x236>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d86:	6808      	ldr	r0, [r1, #0]
 8001d88:	68cc      	ldr	r4, [r1, #12]
  if (ADCx == ADC3)
 8001d8a:	e65c      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x172>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d8c:	0694      	lsls	r4, r2, #26
 8001d8e:	2601      	movs	r6, #1
 8001d90:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001d94:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001d98:	fa06 f505 	lsl.w	r5, r6, r5
 8001d9c:	3a1e      	subs	r2, #30
 8001d9e:	432c      	orrs	r4, r5
 8001da0:	0512      	lsls	r2, r2, #20
 8001da2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001da6:	e735      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x340>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
 8001dac:	2c00      	cmp	r4, #0
 8001dae:	f000 80bc 	beq.w	8001f2a <HAL_ADC_ConfigChannel+0x656>
  return __builtin_clz(value);
 8001db2:	fab4 f484 	clz	r4, r4
 8001db6:	3401      	adds	r4, #1
 8001db8:	06a4      	lsls	r4, r4, #26
 8001dba:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 8001dc2:	2a00      	cmp	r2, #0
 8001dc4:	f000 80af 	beq.w	8001f26 <HAL_ADC_ConfigChannel+0x652>
  return __builtin_clz(value);
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	2601      	movs	r6, #1
 8001dce:	3201      	adds	r2, #1
 8001dd0:	f002 021f 	and.w	r2, r2, #31
 8001dd4:	fa06 f202 	lsl.w	r2, r6, r2
 8001dd8:	4314      	orrs	r4, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	fa95 f5a5 	rbit	r5, r5
  if (value == 0U)
 8001dde:	2d00      	cmp	r5, #0
 8001de0:	f000 809e 	beq.w	8001f20 <HAL_ADC_ConfigChannel+0x64c>
  return __builtin_clz(value);
 8001de4:	fab5 f285 	clz	r2, r5
 8001de8:	3201      	adds	r2, #1
 8001dea:	f002 021f 	and.w	r2, r2, #31
 8001dee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001df2:	0512      	lsls	r2, r2, #20
 8001df4:	e70e      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x340>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001df6:	f1a5 0501 	sub.w	r5, r5, #1
    MODIFY_REG(*preg,
 8001dfa:	f854 2026 	ldr.w	r2, [r4, r6, lsl #2]
 8001dfe:	fab5 f585 	clz	r5, r5
 8001e02:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001e06:	096d      	lsrs	r5, r5, #5
 8001e08:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8001e0c:	f844 2026 	str.w	r2, [r4, r6, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	e610      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x162>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e14:	f012 7080 	ands.w	r0, r2, #16777216	; 0x1000000
 8001e18:	f47f ae77 	bne.w	8001b0a <HAL_ADC_ConfigChannel+0x236>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e1c:	4a48      	ldr	r2, [pc, #288]	; (8001f40 <HAL_ADC_ConfigChannel+0x66c>)
 8001e1e:	4294      	cmp	r4, r2
 8001e20:	f47f ae73 	bne.w	8001b0a <HAL_ADC_ConfigChannel+0x236>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e24:	68aa      	ldr	r2, [r5, #8]
 8001e26:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001e2a:	4332      	orrs	r2, r6
 8001e2c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001e30:	60aa      	str	r2, [r5, #8]
}
 8001e32:	e564      	b.n	80018fe <HAL_ADC_ConfigChannel+0x2a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e38:	b11d      	cbz	r5, 8001e42 <HAL_ADC_ConfigChannel+0x56e>
  return __builtin_clz(value);
 8001e3a:	fab5 f585 	clz	r5, r5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e3e:	42ac      	cmp	r4, r5
 8001e40:	d027      	beq.n	8001e92 <HAL_ADC_ConfigChannel+0x5be>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e42:	4c3f      	ldr	r4, [pc, #252]	; (8001f40 <HAL_ADC_ConfigChannel+0x66c>)
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e44:	4f3f      	ldr	r7, [pc, #252]	; (8001f44 <HAL_ADC_ConfigChannel+0x670>)
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e46:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001e48:	6e64      	ldr	r4, [r4, #100]	; 0x64
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e4a:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e52:	b11d      	cbz	r5, 8001e5c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001e54:	fab5 f585 	clz	r5, r5
 8001e58:	42ac      	cmp	r4, r5
 8001e5a:	d032      	beq.n	8001ec2 <HAL_ADC_ConfigChannel+0x5ee>
 8001e5c:	6e84      	ldr	r4, [r0, #104]	; 0x68
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e5e:	f100 0668 	add.w	r6, r0, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e62:	6e84      	ldr	r4, [r0, #104]	; 0x68
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e64:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e6c:	b11d      	cbz	r5, 8001e76 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8001e6e:	fab5 f585 	clz	r5, r5
 8001e72:	42ac      	cmp	r4, r5
 8001e74:	d03a      	beq.n	8001eec <HAL_ADC_ConfigChannel+0x618>
 8001e76:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e78:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e7c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e7e:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001e86:	2a00      	cmp	r2, #0
 8001e88:	f43f af44 	beq.w	8001d14 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8001e8c:	fab2 f282 	clz	r2, r2
 8001e90:	e73e      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x43c>
    MODIFY_REG(*preg,
 8001e92:	482b      	ldr	r0, [pc, #172]	; (8001f40 <HAL_ADC_ConfigChannel+0x66c>)
 8001e94:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001e96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e9a:	6602      	str	r2, [r0, #96]	; 0x60
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e9c:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e9e:	6e42      	ldr	r2, [r0, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea0:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8001ea4:	680a      	ldr	r2, [r1, #0]
 8001ea6:	f100 0764 	add.w	r7, r0, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001eaa:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8001eac:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8001eb0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001eb4:	2e00      	cmp	r6, #0
 8001eb6:	d1ca      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x57a>
 8001eb8:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001ebc:	4294      	cmp	r4, r2
 8001ebe:	f47f af19 	bne.w	8001cf4 <HAL_ADC_ConfigChannel+0x420>
    MODIFY_REG(*preg,
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ec8:	603a      	str	r2, [r7, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eca:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ecc:	6e82      	ldr	r2, [r0, #104]	; 0x68
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ece:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8001ed2:	680a      	ldr	r2, [r1, #0]
 8001ed4:	f100 0668 	add.w	r6, r0, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ed8:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8001eda:	f3c2 0713 	ubfx	r7, r2, #0, #20
 8001ede:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001ee2:	2f00      	cmp	r7, #0
 8001ee4:	d1c0      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x594>
 8001ee6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001eea:	e709      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x42c>
    MODIFY_REG(*preg,
 8001eec:	6832      	ldr	r2, [r6, #0]
 8001eee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ef2:	6032      	str	r2, [r6, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ef4:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ef6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef8:	f100 056c 	add.w	r5, r0, #108	; 0x6c
 8001efc:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001efe:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8001f00:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8001f04:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001f08:	2e00      	cmp	r6, #0
 8001f0a:	d1ba      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x5ae>
 8001f0c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001f10:	e6fe      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x43c>
 8001f12:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <HAL_ADC_ConfigChannel+0x674>)
 8001f14:	e67e      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x340>
 8001f16:	2202      	movs	r2, #2
 8001f18:	e669      	b.n	8001bee <HAL_ADC_ConfigChannel+0x31a>
 8001f1a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8001f1e:	e659      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x300>
 8001f20:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001f24:	e676      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x340>
 8001f26:	2202      	movs	r2, #2
 8001f28:	e756      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x504>
 8001f2a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8001f2e:	e746      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x4ea>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f30:	4f04      	ldr	r7, [pc, #16]	; (8001f44 <HAL_ADC_ConfigChannel+0x670>)
    MODIFY_REG(*preg,
 8001f32:	e7c6      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x5ee>
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40022300 	.word	0x40022300
 8001f3c:	58026060 	.word	0x58026060
 8001f40:	58026000 	.word	0x58026000
 8001f44:	58026064 	.word	0x58026064
 8001f48:	fe500000 	.word	0xfe500000

08001f4c <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f4c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	07d1      	lsls	r1, r2, #31
 8001f52:	d501      	bpl.n	8001f58 <ADC_Enable+0xc>
  return HAL_OK;
 8001f54:	2000      	movs	r0, #0
}
 8001f56:	4770      	bx	lr
{
 8001f58:	b570      	push	{r4, r5, r6, lr}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f5a:	4a21      	ldr	r2, [pc, #132]	; (8001fe0 <ADC_Enable+0x94>)
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	6899      	ldr	r1, [r3, #8]
 8001f60:	4211      	tst	r1, r2
 8001f62:	d12c      	bne.n	8001fbe <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8001f64:	6899      	ldr	r1, [r3, #8]
 8001f66:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <ADC_Enable+0x98>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001f70:	f7ff fb0a 	bl	8001588 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8001f78:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d028      	beq.n	8001fd0 <ADC_Enable+0x84>
 8001f7e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d024      	beq.n	8001fd0 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f86:	4a19      	ldr	r2, [pc, #100]	; (8001fec <ADC_Enable+0xa0>)
 8001f88:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	07d6      	lsls	r6, r2, #31
 8001f8e:	d414      	bmi.n	8001fba <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8001f90:	4e14      	ldr	r6, [pc, #80]	; (8001fe4 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	07d0      	lsls	r0, r2, #31
 8001f96:	d404      	bmi.n	8001fa2 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	4032      	ands	r2, r6
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fa2:	f7ff faf1 	bl	8001588 <HAL_GetTick>
 8001fa6:	1b43      	subs	r3, r0, r5
 8001fa8:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001faa:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fac:	d902      	bls.n	8001fb4 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	07d1      	lsls	r1, r2, #31
 8001fb2:	d504      	bpl.n	8001fbe <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	07d2      	lsls	r2, r2, #31
 8001fb8:	d5eb      	bpl.n	8001f92 <ADC_Enable+0x46>
  return HAL_OK;
 8001fba:	2000      	movs	r0, #0
}
 8001fbc:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbe:	6e23      	ldr	r3, [r4, #96]	; 0x60
            return HAL_ERROR;
 8001fc0:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fca:	4303      	orrs	r3, r0
 8001fcc:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001fce:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <ADC_Enable+0xa4>)
 8001fd2:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fd4:	06d2      	lsls	r2, r2, #27
 8001fd6:	d0d8      	beq.n	8001f8a <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fd8:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d1d5      	bne.n	8001f8a <ADC_Enable+0x3e>
 8001fde:	e7ec      	b.n	8001fba <ADC_Enable+0x6e>
 8001fe0:	8000003f 	.word	0x8000003f
 8001fe4:	7fffffc0 	.word	0x7fffffc0
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	58026300 	.word	0x58026300
 8001ff0:	40022300 	.word	0x40022300
 8001ff4:	40022100 	.word	0x40022100

08001ff8 <HAL_ADC_Start_DMA>:
{
 8001ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ffc:	4b44      	ldr	r3, [pc, #272]	; (8002110 <HAL_ADC_Start_DMA+0x118>)
{
 8001ffe:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002000:	6800      	ldr	r0, [r0, #0]
{
 8002002:	460e      	mov	r6, r1
 8002004:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002006:	4298      	cmp	r0, r3
 8002008:	d064      	beq.n	80020d4 <HAL_ADC_Start_DMA+0xdc>
 800200a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800200e:	4298      	cmp	r0, r3
 8002010:	d060      	beq.n	80020d4 <HAL_ADC_Start_DMA+0xdc>
 8002012:	4b40      	ldr	r3, [pc, #256]	; (8002114 <HAL_ADC_Start_DMA+0x11c>)
 8002014:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002016:	6885      	ldr	r5, [r0, #8]
 8002018:	f015 0504 	ands.w	r5, r5, #4
 800201c:	d160      	bne.n	80020e0 <HAL_ADC_Start_DMA+0xe8>
    __HAL_LOCK(hadc);
 800201e:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 8002022:	2a01      	cmp	r2, #1
 8002024:	d05c      	beq.n	80020e0 <HAL_ADC_Start_DMA+0xe8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002026:	f003 081f 	and.w	r8, r3, #31
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800202a:	f240 2321 	movw	r3, #545	; 0x221
    __HAL_LOCK(hadc);
 800202e:	2001      	movs	r0, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002030:	fa23 f308 	lsr.w	r3, r3, r8
    __HAL_LOCK(hadc);
 8002034:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002038:	4003      	ands	r3, r0
 800203a:	d058      	beq.n	80020ee <HAL_ADC_Start_DMA+0xf6>
      tmp_hal_status = ADC_Enable(hadc);
 800203c:	4620      	mov	r0, r4
 800203e:	f7ff ff85 	bl	8001f4c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002042:	2800      	cmp	r0, #0
 8002044:	d14f      	bne.n	80020e6 <HAL_ADC_Start_DMA+0xee>
        ADC_STATE_CLR_SET(hadc->State,
 8002046:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002048:	4b33      	ldr	r3, [pc, #204]	; (8002118 <HAL_ADC_Start_DMA+0x120>)
 800204a:	4013      	ands	r3, r2
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800204c:	6822      	ldr	r2, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002052:	6623      	str	r3, [r4, #96]	; 0x60
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002054:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_ADC_Start_DMA+0x124>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002056:	429a      	cmp	r2, r3
 8002058:	d102      	bne.n	8002060 <HAL_ADC_Start_DMA+0x68>
 800205a:	f1b8 0f00 	cmp.w	r8, #0
 800205e:	d103      	bne.n	8002068 <HAL_ADC_Start_DMA+0x70>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002060:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002062:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002066:	6623      	str	r3, [r4, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002068:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800206a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800206e:	d042      	beq.n	80020f6 <HAL_ADC_Start_DMA+0xfe>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002072:	f023 0306 	bic.w	r3, r3, #6
 8002076:	6663      	str	r3, [r4, #100]	; 0x64
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002078:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800207a:	4a29      	ldr	r2, [pc, #164]	; (8002120 <HAL_ADC_Start_DMA+0x128>)
        if (hadc->Instance == ADC3)
 800207c:	4929      	ldr	r1, [pc, #164]	; (8002124 <HAL_ADC_Start_DMA+0x12c>)
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800207e:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002080:	4a29      	ldr	r2, [pc, #164]	; (8002128 <HAL_ADC_Start_DMA+0x130>)
 8002082:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002086:	4a29      	ldr	r2, [pc, #164]	; (800212c <HAL_ADC_Start_DMA+0x134>)
 8002088:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800208a:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800208c:	221c      	movs	r2, #28
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8002092:	2300      	movs	r3, #0
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002094:	6822      	ldr	r2, [r4, #0]
        __HAL_UNLOCK(hadc);
 8002096:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800209a:	6853      	ldr	r3, [r2, #4]
 800209c:	f043 0310 	orr.w	r3, r3, #16
 80020a0:	6053      	str	r3, [r2, #4]
        if (hadc->Instance == ADC3)
 80020a2:	6822      	ldr	r2, [r4, #0]
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80020a4:	68d3      	ldr	r3, [r2, #12]
 80020a6:	428a      	cmp	r2, r1
 80020a8:	f023 0303 	bic.w	r3, r3, #3
 80020ac:	d025      	beq.n	80020fa <HAL_ADC_Start_DMA+0x102>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80020ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020b4:	6821      	ldr	r1, [r4, #0]
 80020b6:	463b      	mov	r3, r7
 80020b8:	4632      	mov	r2, r6
 80020ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020bc:	3140      	adds	r1, #64	; 0x40
 80020be:	f000 feab 	bl	8002e18 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020c2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_ADC_Start_DMA+0x138>)
 80020c6:	6891      	ldr	r1, [r2, #8]
 80020c8:	400b      	ands	r3, r1
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	6093      	str	r3, [r2, #8]
}
 80020d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_ADC_Start_DMA+0x13c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020d6:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d8:	6885      	ldr	r5, [r0, #8]
 80020da:	f015 0504 	ands.w	r5, r5, #4
 80020de:	d09e      	beq.n	800201e <HAL_ADC_Start_DMA+0x26>
    tmp_hal_status = HAL_BUSY;
 80020e0:	2002      	movs	r0, #2
}
 80020e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80020e6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
}
 80020ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hadc);
 80020ee:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80020f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 80020f6:	6663      	str	r3, [r4, #100]	; 0x64
 80020f8:	e7be      	b.n	8002078 <HAL_ADC_Start_DMA+0x80>
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020fa:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80020fe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002102:	60d3      	str	r3, [r2, #12]
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002104:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002106:	68d3      	ldr	r3, [r2, #12]
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	60d3      	str	r3, [r2, #12]
}
 800210e:	e7d1      	b.n	80020b4 <HAL_ADC_Start_DMA+0xbc>
 8002110:	40022000 	.word	0x40022000
 8002114:	58026300 	.word	0x58026300
 8002118:	fffff0fe 	.word	0xfffff0fe
 800211c:	40022100 	.word	0x40022100
 8002120:	0800184d 	.word	0x0800184d
 8002124:	58026000 	.word	0x58026000
 8002128:	080015b9 	.word	0x080015b9
 800212c:	080018b9 	.word	0x080018b9
 8002130:	7fffffc0 	.word	0x7fffffc0
 8002134:	40022300 	.word	0x40022300

08002138 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002138:	b510      	push	{r4, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800213a:	4a44      	ldr	r2, [pc, #272]	; (800224c <ADC_ConfigureBoostMode+0x114>)
{
 800213c:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800213e:	6803      	ldr	r3, [r0, #0]
 8002140:	4293      	cmp	r3, r2
 8002142:	d025      	beq.n	8002190 <ADC_ConfigureBoostMode+0x58>
 8002144:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002148:	4293      	cmp	r3, r2
 800214a:	d021      	beq.n	8002190 <ADC_ConfigureBoostMode+0x58>
 800214c:	4b40      	ldr	r3, [pc, #256]	; (8002250 <ADC_ConfigureBoostMode+0x118>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002154:	d021      	beq.n	800219a <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002156:	f002 fcff 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800215a:	6863      	ldr	r3, [r4, #4]
 800215c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002160:	d06b      	beq.n	800223a <ADC_ConfigureBoostMode+0x102>
 8002162:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002166:	d05b      	beq.n	8002220 <ADC_ConfigureBoostMode+0xe8>
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d065      	beq.n	800223a <ADC_ConfigureBoostMode+0x102>
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
  if (freq <= 6250000UL)
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <ADC_ConfigureBoostMode+0x11c>)
 8002170:	4298      	cmp	r0, r3
 8002172:	d92f      	bls.n	80021d4 <ADC_ConfigureBoostMode+0x9c>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
  }
  else if (freq <= 12500000UL)
 8002174:	4b38      	ldr	r3, [pc, #224]	; (8002258 <ADC_ConfigureBoostMode+0x120>)
 8002176:	4298      	cmp	r0, r3
 8002178:	d94a      	bls.n	8002210 <ADC_ConfigureBoostMode+0xd8>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
  }
  else if (freq <= 25000000UL)
 800217a:	4b38      	ldr	r3, [pc, #224]	; (800225c <ADC_ConfigureBoostMode+0x124>)
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800217c:	6822      	ldr	r2, [r4, #0]
  else if (freq <= 25000000UL)
 800217e:	4298      	cmp	r0, r3
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002180:	6893      	ldr	r3, [r2, #8]
  else if (freq <= 25000000UL)
 8002182:	d856      	bhi.n	8002232 <ADC_ConfigureBoostMode+0xfa>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218c:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800218e:	bd10      	pop	{r4, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002190:	4b33      	ldr	r3, [pc, #204]	; (8002260 <ADC_ConfigureBoostMode+0x128>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002198:	d1dd      	bne.n	8002156 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800219a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800219e:	2100      	movs	r1, #0
 80021a0:	f003 fe2e 	bl	8005e00 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80021a4:	6863      	ldr	r3, [r4, #4]
 80021a6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021aa:	d04d      	beq.n	8002248 <ADC_ConfigureBoostMode+0x110>
 80021ac:	d808      	bhi.n	80021c0 <ADC_ConfigureBoostMode+0x88>
 80021ae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021b2:	d03c      	beq.n	800222e <ADC_ConfigureBoostMode+0xf6>
 80021b4:	d914      	bls.n	80021e0 <ADC_ConfigureBoostMode+0xa8>
 80021b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ba:	d1d8      	bne.n	800216e <ADC_ConfigureBoostMode+0x36>
        freq /= 32UL;
 80021bc:	0940      	lsrs	r0, r0, #5
        break;
 80021be:	e7d6      	b.n	800216e <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 80021c0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021c4:	d031      	beq.n	800222a <ADC_ConfigureBoostMode+0xf2>
 80021c6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021ca:	d1d0      	bne.n	800216e <ADC_ConfigureBoostMode+0x36>
  if (freq <= 6250000UL)
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <ADC_ConfigureBoostMode+0x11c>)
 80021ce:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 80021d2:	d31d      	bcc.n	8002210 <ADC_ConfigureBoostMode+0xd8>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80021d4:	6822      	ldr	r2, [r4, #0]
 80021d6:	6893      	ldr	r3, [r2, #8]
 80021d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021dc:	6093      	str	r3, [r2, #8]
}
 80021de:	bd10      	pop	{r4, pc}
    switch (hadc->Init.ClockPrescaler)
 80021e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021e4:	d006      	beq.n	80021f4 <ADC_ConfigureBoostMode+0xbc>
 80021e6:	d90a      	bls.n	80021fe <ADC_ConfigureBoostMode+0xc6>
 80021e8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80021ec:	d002      	beq.n	80021f4 <ADC_ConfigureBoostMode+0xbc>
 80021ee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80021f2:	d1bc      	bne.n	800216e <ADC_ConfigureBoostMode+0x36>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80021f4:	0c9b      	lsrs	r3, r3, #18
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80021fc:	e7b7      	b.n	800216e <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 80021fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002202:	d0f7      	beq.n	80021f4 <ADC_ConfigureBoostMode+0xbc>
 8002204:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002208:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800220c:	d0f2      	beq.n	80021f4 <ADC_ConfigureBoostMode+0xbc>
 800220e:	e7ae      	b.n	800216e <ADC_ConfigureBoostMode+0x36>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002210:	6822      	ldr	r2, [r4, #0]
 8002212:	6893      	ldr	r3, [r2, #8]
 8002214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6093      	str	r3, [r2, #8]
}
 800221e:	bd10      	pop	{r4, pc}
        freq /= 4UL;
 8002220:	0880      	lsrs	r0, r0, #2
  if (freq <= 6250000UL)
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <ADC_ConfigureBoostMode+0x11c>)
 8002224:	4298      	cmp	r0, r3
 8002226:	d9d5      	bls.n	80021d4 <ADC_ConfigureBoostMode+0x9c>
 8002228:	e7a4      	b.n	8002174 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 800222a:	09c0      	lsrs	r0, r0, #7
        break;
 800222c:	e79f      	b.n	800216e <ADC_ConfigureBoostMode+0x36>
        freq /= 16UL;
 800222e:	0900      	lsrs	r0, r0, #4
        break;
 8002230:	e79d      	b.n	800216e <ADC_ConfigureBoostMode+0x36>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002232:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002236:	6093      	str	r3, [r2, #8]
}
 8002238:	bd10      	pop	{r4, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	fbb0 f0f3 	udiv	r0, r0, r3
  if (freq <= 6250000UL)
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <ADC_ConfigureBoostMode+0x11c>)
 8002242:	4298      	cmp	r0, r3
 8002244:	d9c6      	bls.n	80021d4 <ADC_ConfigureBoostMode+0x9c>
 8002246:	e795      	b.n	8002174 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8002248:	0980      	lsrs	r0, r0, #6
        break;
 800224a:	e790      	b.n	800216e <ADC_ConfigureBoostMode+0x36>
 800224c:	40022000 	.word	0x40022000
 8002250:	58026300 	.word	0x58026300
 8002254:	00bebc21 	.word	0x00bebc21
 8002258:	017d7841 	.word	0x017d7841
 800225c:	02faf081 	.word	0x02faf081
 8002260:	40022300 	.word	0x40022300

08002264 <HAL_ADC_Init>:
{
 8002264:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002266:	2300      	movs	r3, #0
{
 8002268:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800226a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 800226c:	2800      	cmp	r0, #0
 800226e:	f000 80e2 	beq.w	8002436 <HAL_ADC_Init+0x1d2>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002272:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8002274:	4604      	mov	r4, r0
 8002276:	2d00      	cmp	r5, #0
 8002278:	f000 80c0 	beq.w	80023fc <HAL_ADC_Init+0x198>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800227c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	0090      	lsls	r0, r2, #2
 8002282:	d504      	bpl.n	800228e <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002284:	6899      	ldr	r1, [r3, #8]
 8002286:	4a92      	ldr	r2, [pc, #584]	; (80024d0 <HAL_ADC_Init+0x26c>)
 8002288:	400a      	ands	r2, r1
 800228a:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800228c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	00d1      	lsls	r1, r2, #3
 8002292:	d417      	bmi.n	80022c4 <HAL_ADC_Init+0x60>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002294:	4a8f      	ldr	r2, [pc, #572]	; (80024d4 <HAL_ADC_Init+0x270>)
 8002296:	4990      	ldr	r1, [pc, #576]	; (80024d8 <HAL_ADC_Init+0x274>)
 8002298:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCx->CR,
 800229a:	6898      	ldr	r0, [r3, #8]
 800229c:	0992      	lsrs	r2, r2, #6
 800229e:	fba1 1202 	umull	r1, r2, r1, r2
 80022a2:	498e      	ldr	r1, [pc, #568]	; (80024dc <HAL_ADC_Init+0x278>)
 80022a4:	0992      	lsrs	r2, r2, #6
 80022a6:	4001      	ands	r1, r0
 80022a8:	3201      	adds	r2, #1
 80022aa:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80022ae:	6099      	str	r1, [r3, #8]
 80022b0:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 80022b2:	9b01      	ldr	r3, [sp, #4]
 80022b4:	b12b      	cbz	r3, 80022c2 <HAL_ADC_Init+0x5e>
      wait_loop_index--;
 80022b6:	9b01      	ldr	r3, [sp, #4]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80022bc:	9b01      	ldr	r3, [sp, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f9      	bne.n	80022b6 <HAL_ADC_Init+0x52>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	00d2      	lsls	r2, r2, #3
 80022c8:	d413      	bmi.n	80022f2 <HAL_ADC_Init+0x8e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ca:	6e22      	ldr	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80022cc:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ce:	f042 0210 	orr.w	r2, r2, #16
 80022d2:	6622      	str	r2, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022d6:	432a      	orrs	r2, r5
 80022d8:	6662      	str	r2, [r4, #100]	; 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	0756      	lsls	r6, r2, #29
 80022de:	d50c      	bpl.n	80022fa <HAL_ADC_Init+0x96>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80022e4:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	f043 0310 	orr.w	r3, r3, #16
}
 80022ea:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ec:	6623      	str	r3, [r4, #96]	; 0x60
}
 80022ee:	b002      	add	sp, #8
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
 80022f2:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f4:	2500      	movs	r5, #0
 80022f6:	0756      	lsls	r6, r2, #29
 80022f8:	d4f2      	bmi.n	80022e0 <HAL_ADC_Init+0x7c>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022fa:	6e26      	ldr	r6, [r4, #96]	; 0x60
 80022fc:	f016 0610 	ands.w	r6, r6, #16
 8002300:	d1ef      	bne.n	80022e2 <HAL_ADC_Init+0x7e>
    ADC_STATE_CLR_SET(hadc->State,
 8002302:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002304:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8002308:	f042 0202 	orr.w	r2, r2, #2
 800230c:	6622      	str	r2, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	07d0      	lsls	r0, r2, #31
 8002312:	d414      	bmi.n	800233e <HAL_ADC_Init+0xda>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002314:	4a72      	ldr	r2, [pc, #456]	; (80024e0 <HAL_ADC_Init+0x27c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	f000 80a5 	beq.w	8002466 <HAL_ADC_Init+0x202>
 800231c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002320:	4293      	cmp	r3, r2
 8002322:	f000 80a0 	beq.w	8002466 <HAL_ADC_Init+0x202>
 8002326:	4a6f      	ldr	r2, [pc, #444]	; (80024e4 <HAL_ADC_Init+0x280>)
 8002328:	6892      	ldr	r2, [r2, #8]
 800232a:	07d2      	lsls	r2, r2, #31
 800232c:	d407      	bmi.n	800233e <HAL_ADC_Init+0xda>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800232e:	4a6e      	ldr	r2, [pc, #440]	; (80024e8 <HAL_ADC_Init+0x284>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002330:	6893      	ldr	r3, [r2, #8]
 8002332:	6861      	ldr	r1, [r4, #4]
 8002334:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002338:	430b      	orrs	r3, r1
 800233a:	6093      	str	r3, [r2, #8]
    if (hadc->Instance == ADC3)
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	4a69      	ldr	r2, [pc, #420]	; (80024e4 <HAL_ADC_Init+0x280>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d061      	beq.n	8002408 <HAL_ADC_Init+0x1a4>
                  hadc->Init.Overrun                                                    |
 8002344:	68a0      	ldr	r0, [r4, #8]
 8002346:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002348:	f894 1020 	ldrb.w	r1, [r4, #32]
                  hadc->Init.Overrun                                                    |
 800234c:	4302      	orrs	r2, r0
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800234e:	7e60      	ldrb	r0, [r4, #25]
                  hadc->Init.Overrun                                                    |
 8002350:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002354:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002358:	2901      	cmp	r1, #1
 800235a:	d103      	bne.n	8002364 <HAL_ADC_Init+0x100>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800235c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800235e:	3901      	subs	r1, #1
 8002360:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002364:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002366:	b121      	cbz	r1, 8002372 <HAL_ADC_Init+0x10e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002368:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800236c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800236e:	4301      	orrs	r1, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002370:	430a      	orrs	r2, r1
    if (hadc->Instance == ADC3)
 8002372:	495c      	ldr	r1, [pc, #368]	; (80024e4 <HAL_ADC_Init+0x280>)
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002374:	68d8      	ldr	r0, [r3, #12]
    if (hadc->Instance == ADC3)
 8002376:	428b      	cmp	r3, r1
 8002378:	d069      	beq.n	800244e <HAL_ADC_Init+0x1ea>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800237a:	495c      	ldr	r1, [pc, #368]	; (80024ec <HAL_ADC_Init+0x288>)
 800237c:	4001      	ands	r1, r0
 800237e:	4311      	orrs	r1, r2
 8002380:	60d9      	str	r1, [r3, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002382:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002384:	6893      	ldr	r3, [r2, #8]
 8002386:	f013 0f04 	tst.w	r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800238a:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800238c:	d126      	bne.n	80023dc <HAL_ADC_Init+0x178>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800238e:	071b      	lsls	r3, r3, #28
 8002390:	d424      	bmi.n	80023dc <HAL_ADC_Init+0x178>
      if (hadc->Instance == ADC3)
 8002392:	4b54      	ldr	r3, [pc, #336]	; (80024e4 <HAL_ADC_Init+0x280>)
 8002394:	429a      	cmp	r2, r3
 8002396:	f000 8085 	beq.w	80024a4 <HAL_ADC_Init+0x240>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800239a:	7e23      	ldrb	r3, [r4, #24]
        tmpCFGR = (
 800239c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800239e:	ea41 3183 	orr.w	r1, r1, r3, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023a2:	68d0      	ldr	r0, [r2, #12]
 80023a4:	4b52      	ldr	r3, [pc, #328]	; (80024f0 <HAL_ADC_Init+0x28c>)
 80023a6:	4003      	ands	r3, r0
 80023a8:	430b      	orrs	r3, r1
 80023aa:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80023ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
        if (hadc->Instance == ADC3)
 80023b0:	6822      	ldr	r2, [r4, #0]
      if (hadc->Init.OversamplingMode == ENABLE)
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d062      	beq.n	800247c <HAL_ADC_Init+0x218>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023b6:	6913      	ldr	r3, [r2, #16]
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023be:	6822      	ldr	r2, [r4, #0]
 80023c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80023c2:	6913      	ldr	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 80023c4:	4947      	ldr	r1, [pc, #284]	; (80024e4 <HAL_ADC_Init+0x280>)
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023ca:	4303      	orrs	r3, r0
 80023cc:	6113      	str	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 80023ce:	6822      	ldr	r2, [r4, #0]
 80023d0:	428a      	cmp	r2, r1
 80023d2:	d003      	beq.n	80023dc <HAL_ADC_Init+0x178>
        ADC_ConfigureBoostMode(hadc);
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7ff feaf 	bl	8002138 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023da:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023dc:	6923      	ldr	r3, [r4, #16]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d02d      	beq.n	800243e <HAL_ADC_Init+0x1da>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80023e4:	f023 030f 	bic.w	r3, r3, #15
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
}
 80023ec:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6623      	str	r3, [r4, #96]	; 0x60
}
 80023f8:	b002      	add	sp, #8
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80023fc:	f7fe fd96 	bl	8000f2c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002400:	6665      	str	r5, [r4, #100]	; 0x64
    hadc->Lock = HAL_UNLOCKED;
 8002402:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
 8002406:	e739      	b.n	800227c <HAL_ADC_Init+0x18>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002408:	68e2      	ldr	r2, [r4, #12]
 800240a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800240c:	ea41 0002 	orr.w	r0, r1, r2
 8002410:	7e62      	ldrb	r2, [r4, #25]
 8002412:	ea40 3042 	orr.w	r0, r0, r2, lsl #13
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002416:	68a2      	ldr	r2, [r4, #8]
 8002418:	2a08      	cmp	r2, #8
 800241a:	d005      	beq.n	8002428 <HAL_ADC_Init+0x1c4>
 800241c:	3a0c      	subs	r2, #12
 800241e:	2a10      	cmp	r2, #16
 8002420:	d802      	bhi.n	8002428 <HAL_ADC_Init+0x1c4>
 8002422:	4934      	ldr	r1, [pc, #208]	; (80024f4 <HAL_ADC_Init+0x290>)
 8002424:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002428:	f894 1020 	ldrb.w	r1, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800242c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002430:	ea40 0206 	orr.w	r2, r0, r6
 8002434:	e790      	b.n	8002358 <HAL_ADC_Init+0xf4>
    return HAL_ERROR;
 8002436:	2501      	movs	r5, #1
}
 8002438:	4628      	mov	r0, r5
 800243a:	b002      	add	sp, #8
 800243c:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800243e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002440:	69e3      	ldr	r3, [r4, #28]
 8002442:	f021 010f 	bic.w	r1, r1, #15
 8002446:	3b01      	subs	r3, #1
 8002448:	430b      	orrs	r3, r1
 800244a:	6313      	str	r3, [r2, #48]	; 0x30
 800244c:	e7cd      	b.n	80023ea <HAL_ADC_Init+0x186>
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800244e:	492a      	ldr	r1, [pc, #168]	; (80024f8 <HAL_ADC_Init+0x294>)
 8002450:	4001      	ands	r1, r0
 8002452:	4311      	orrs	r1, r2
 8002454:	60d9      	str	r1, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800245a:	6913      	ldr	r3, [r2, #16]
 800245c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002460:	430b      	orrs	r3, r1
 8002462:	6113      	str	r3, [r2, #16]
 8002464:	e78d      	b.n	8002382 <HAL_ADC_Init+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002466:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <HAL_ADC_Init+0x27c>)
 8002468:	6891      	ldr	r1, [r2, #8]
 800246a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800246e:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002470:	430a      	orrs	r2, r1
 8002472:	07d1      	lsls	r1, r2, #31
 8002474:	f53f af63 	bmi.w	800233e <HAL_ADC_Init+0xda>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002478:	4a20      	ldr	r2, [pc, #128]	; (80024fc <HAL_ADC_Init+0x298>)
 800247a:	e759      	b.n	8002330 <HAL_ADC_Init+0xcc>
        if (hadc->Instance == ADC3)
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_ADC_Init+0x280>)
 800247e:	429a      	cmp	r2, r3
 8002480:	d017      	beq.n	80024b2 <HAL_ADC_Init+0x24e>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002482:	6d26      	ldr	r6, [r4, #80]	; 0x50
 8002484:	6910      	ldr	r0, [r2, #16]
 8002486:	e9d4 1312 	ldrd	r1, r3, [r4, #72]	; 0x48
 800248a:	3901      	subs	r1, #1
 800248c:	4333      	orrs	r3, r6
 800248e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002492:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002494:	430b      	orrs	r3, r1
 8002496:	491a      	ldr	r1, [pc, #104]	; (8002500 <HAL_ADC_Init+0x29c>)
 8002498:	4001      	ands	r1, r0
 800249a:	430b      	orrs	r3, r1
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6113      	str	r3, [r2, #16]
 80024a2:	e78c      	b.n	80023be <HAL_ADC_Init+0x15a>
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024a4:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024a8:	7e23      	ldrb	r3, [r4, #24]
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024aa:	0049      	lsls	r1, r1, #1
        tmpCFGR = (
 80024ac:	ea41 3183 	orr.w	r1, r1, r3, lsl #14
 80024b0:	e777      	b.n	80023a2 <HAL_ADC_Init+0x13e>
          MODIFY_REG(hadc->Instance->CFGR2,
 80024b2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80024b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80024b6:	6910      	ldr	r0, [r2, #16]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	4912      	ldr	r1, [pc, #72]	; (8002504 <HAL_ADC_Init+0x2a0>)
 80024bc:	4001      	ands	r1, r0
 80024be:	430b      	orrs	r3, r1
 80024c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80024c2:	430b      	orrs	r3, r1
 80024c4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80024c6:	430b      	orrs	r3, r1
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6113      	str	r3, [r2, #16]
 80024ce:	e776      	b.n	80023be <HAL_ADC_Init+0x15a>
 80024d0:	5fffffc0 	.word	0x5fffffc0
 80024d4:	20000004 	.word	0x20000004
 80024d8:	053e2d63 	.word	0x053e2d63
 80024dc:	6fffffc0 	.word	0x6fffffc0
 80024e0:	40022000 	.word	0x40022000
 80024e4:	58026000 	.word	0x58026000
 80024e8:	58026300 	.word	0x58026300
 80024ec:	fff0c003 	.word	0xfff0c003
 80024f0:	ffffbffc 	.word	0xffffbffc
 80024f4:	08008620 	.word	0x08008620
 80024f8:	fff04007 	.word	0xfff04007
 80024fc:	40022300 	.word	0x40022300
 8002500:	fc00f81e 	.word	0xfc00f81e
 8002504:	fc00f81f 	.word	0xfc00f81f

08002508 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop

0800250c <HAL_ADCEx_InjectedQueueOverflowCallback>:
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop

08002514 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop

08002518 <HAL_ADCEx_EndOfSamplingCallback>:
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop

0800251c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800251c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8002520:	2a01      	cmp	r2, #1
 8002522:	d048      	beq.n	80025b6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002524:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002526:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002528:	2001      	movs	r0, #1
{
 800252a:	b470      	push	{r4, r5, r6}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800252c:	4d38      	ldr	r5, [pc, #224]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
{
 800252e:	b09d      	sub	sp, #116	; 0x74
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002530:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002532:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002534:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 8002536:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800253a:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800253c:	d008      	beq.n	8002550 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253e:	6e19      	ldr	r1, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002540:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002544:	f041 0120 	orr.w	r1, r1, #32
 8002548:	6619      	str	r1, [r3, #96]	; 0x60
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800254a:	b01d      	add	sp, #116	; 0x74
 800254c:	bc70      	pop	{r4, r5, r6}
 800254e:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002550:	4a30      	ldr	r2, [pc, #192]	; (8002614 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8002552:	6890      	ldr	r0, [r2, #8]
 8002554:	0740      	lsls	r0, r0, #29
 8002556:	d50b      	bpl.n	8002570 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8002558:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 800255c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255e:	f042 0220 	orr.w	r2, r2, #32
 8002562:	661a      	str	r2, [r3, #96]	; 0x60
  __HAL_UNLOCK(hadc);
 8002564:	2200      	movs	r2, #0
 8002566:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800256a:	b01d      	add	sp, #116	; 0x74
 800256c:	bc70      	pop	{r4, r5, r6}
 800256e:	4770      	bx	lr
 8002570:	68a0      	ldr	r0, [r4, #8]
 8002572:	0745      	lsls	r5, r0, #29
 8002574:	d4f1      	bmi.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002576:	6808      	ldr	r0, [r1, #0]
 8002578:	b1f8      	cbz	r0, 80025ba <HAL_ADCEx_MultiModeConfigChannel+0x9e>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800257a:	4d27      	ldr	r5, [pc, #156]	; (8002618 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 800257c:	684e      	ldr	r6, [r1, #4]
 800257e:	68a8      	ldr	r0, [r5, #8]
 8002580:	f420 4040 	bic.w	r0, r0, #49152	; 0xc000
 8002584:	4330      	orrs	r0, r6
 8002586:	60a8      	str	r0, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	42a0      	cmp	r0, r4
 800258c:	d035      	beq.n	80025fa <HAL_ADCEx_MultiModeConfigChannel+0xde>
 800258e:	4290      	cmp	r0, r2
 8002590:	d033      	beq.n	80025fa <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002592:	4a22      	ldr	r2, [pc, #136]	; (800261c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8002594:	6892      	ldr	r2, [r2, #8]
 8002596:	43d2      	mvns	r2, r2
 8002598:	f002 0201 	and.w	r2, r2, #1
 800259c:	2a00      	cmp	r2, #0
 800259e:	d035      	beq.n	800260c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        MODIFY_REG(tmpADC_Common->CCR,
 80025a0:	680a      	ldr	r2, [r1, #0]
 80025a2:	4c1d      	ldr	r4, [pc, #116]	; (8002618 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 80025a4:	6889      	ldr	r1, [r1, #8]
 80025a6:	68a0      	ldr	r0, [r4, #8]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	491d      	ldr	r1, [pc, #116]	; (8002620 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80025ac:	4001      	ands	r1, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ae:	2000      	movs	r0, #0
        MODIFY_REG(tmpADC_Common->CCR,
 80025b0:	430a      	orrs	r2, r1
 80025b2:	60a2      	str	r2, [r4, #8]
 80025b4:	e7d6      	b.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 80025b6:	2002      	movs	r0, #2
}
 80025b8:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80025ba:	4817      	ldr	r0, [pc, #92]	; (8002618 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 80025bc:	6881      	ldr	r1, [r0, #8]
 80025be:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80025c2:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	42a1      	cmp	r1, r4
 80025c8:	d00e      	beq.n	80025e8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80025ca:	4291      	cmp	r1, r2
 80025cc:	d00c      	beq.n	80025e8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 80025d0:	6892      	ldr	r2, [r2, #8]
 80025d2:	43d2      	mvns	r2, r2
 80025d4:	f002 0201 	and.w	r2, r2, #1
 80025d8:	b1c2      	cbz	r2, 800260c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025da:	490f      	ldr	r1, [pc, #60]	; (8002618 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025dc:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80025e0:	688c      	ldr	r4, [r1, #8]
 80025e2:	4022      	ands	r2, r4
 80025e4:	608a      	str	r2, [r1, #8]
 80025e6:	e7bd      	b.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 80025e8:	4909      	ldr	r1, [pc, #36]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 80025ec:	6889      	ldr	r1, [r1, #8]
 80025ee:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	43d2      	mvns	r2, r2
 80025f4:	f002 0201 	and.w	r2, r2, #1
 80025f8:	e7ee      	b.n	80025d8 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 80025fc:	4a05      	ldr	r2, [pc, #20]	; (8002614 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 80025fe:	6880      	ldr	r0, [r0, #8]
 8002600:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002602:	4302      	orrs	r2, r0
 8002604:	43d2      	mvns	r2, r2
 8002606:	f002 0201 	and.w	r2, r2, #1
 800260a:	e7c7      	b.n	800259c <HAL_ADCEx_MultiModeConfigChannel+0x80>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260c:	2000      	movs	r0, #0
 800260e:	e7a9      	b.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8002610:	40022000 	.word	0x40022000
 8002614:	40022100 	.word	0x40022100
 8002618:	40022300 	.word	0x40022300
 800261c:	58026000 	.word	0x58026000
 8002620:	fffff0e0 	.word	0xfffff0e0

08002624 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4906      	ldr	r1, [pc, #24]	; (8002640 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002626:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800262a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002630:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002634:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800263a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800263c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00
 8002644:	05fa0000 	.word	0x05fa0000

08002648 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264a:	b500      	push	{lr}
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002652:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002656:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265a:	f1be 0f04 	cmp.w	lr, #4
 800265e:	bf28      	it	cs
 8002660:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002664:	f1bc 0f06 	cmp.w	ip, #6
 8002668:	d91a      	bls.n	80026a0 <HAL_NVIC_SetPriority+0x58>
 800266a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800266c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002670:	fa0c fc03 	lsl.w	ip, ip, r3
 8002674:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800267c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002682:	ea21 010c 	bic.w	r1, r1, ip
 8002686:	fa01 f103 	lsl.w	r1, r1, r3
 800268a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800268e:	db0a      	blt.n	80026a6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002690:	0109      	lsls	r1, r1, #4
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_NVIC_SetPriority+0x74>)
 8002694:	b2c9      	uxtb	r1, r1
 8002696:	4403      	add	r3, r0
 8002698:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800269c:	f85d fb04 	ldr.w	pc, [sp], #4
 80026a0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	4613      	mov	r3, r2
 80026a4:	e7e8      	b.n	8002678 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a6:	f000 000f 	and.w	r0, r0, #15
 80026aa:	0109      	lsls	r1, r1, #4
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <HAL_NVIC_SetPriority+0x78>)
 80026ae:	b2c9      	uxtb	r1, r1
 80026b0:	4403      	add	r3, r0
 80026b2:	7619      	strb	r1, [r3, #24]
 80026b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80026b8:	e000ed00 	.word	0xe000ed00
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ecfc 	.word	0xe000ecfc

080026c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026c4:	2800      	cmp	r0, #0
 80026c6:	db07      	blt.n	80026d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c8:	2301      	movs	r3, #1
 80026ca:	f000 011f 	and.w	r1, r0, #31
 80026ce:	4a03      	ldr	r2, [pc, #12]	; (80026dc <HAL_NVIC_EnableIRQ+0x18>)
 80026d0:	0940      	lsrs	r0, r0, #5
 80026d2:	408b      	lsls	r3, r1
 80026d4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	1e43      	subs	r3, r0, #1
 80026e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e6:	d20c      	bcs.n	8002702 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ec:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ee:	4906      	ldr	r1, [pc, #24]	; (8002708 <HAL_SYSTICK_Config+0x28>)
 80026f0:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f4:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fe:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002700:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002702:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800270c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002712:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002716:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 800271c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_MPU_Enable+0x1c>)
 800272a:	f040 0001 	orr.w	r0, r0, #1
 800272e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002734:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002738:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800273a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800273e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002748:	7843      	ldrb	r3, [r0, #1]
 800274a:	4a16      	ldr	r2, [pc, #88]	; (80027a4 <HAL_MPU_ConfigRegion+0x5c>)
 800274c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8002750:	7803      	ldrb	r3, [r0, #0]
 8002752:	b313      	cbz	r3, 800279a <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002754:	6843      	ldr	r3, [r0, #4]
 8002756:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800275a:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800275c:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002760:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002762:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002764:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002768:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800276c:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800276e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002770:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002774:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002778:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800277c:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800277e:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002782:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002786:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800278a:	7a01      	ldrb	r1, [r0, #8]
 800278c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002790:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002794:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002798:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 800279a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800279e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027a8:	4b33      	ldr	r3, [pc, #204]	; (8002878 <DMA_CalcBaseAndBitshift+0xd0>)
{
 80027aa:	4601      	mov	r1, r0
 80027ac:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027ae:	4e33      	ldr	r6, [pc, #204]	; (800287c <DMA_CalcBaseAndBitshift+0xd4>)
 80027b0:	6802      	ldr	r2, [r0, #0]
 80027b2:	4d33      	ldr	r5, [pc, #204]	; (8002880 <DMA_CalcBaseAndBitshift+0xd8>)
 80027b4:	42b2      	cmp	r2, r6
 80027b6:	bf18      	it	ne
 80027b8:	429a      	cmpne	r2, r3
 80027ba:	4c32      	ldr	r4, [pc, #200]	; (8002884 <DMA_CalcBaseAndBitshift+0xdc>)
 80027bc:	4832      	ldr	r0, [pc, #200]	; (8002888 <DMA_CalcBaseAndBitshift+0xe0>)
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	42aa      	cmp	r2, r5
 80027c6:	bf08      	it	eq
 80027c8:	f043 0301 	orreq.w	r3, r3, #1
 80027cc:	42a2      	cmp	r2, r4
 80027ce:	bf08      	it	eq
 80027d0:	f043 0301 	orreq.w	r3, r3, #1
 80027d4:	3430      	adds	r4, #48	; 0x30
 80027d6:	4282      	cmp	r2, r0
 80027d8:	bf08      	it	eq
 80027da:	f043 0301 	orreq.w	r3, r3, #1
 80027de:	3030      	adds	r0, #48	; 0x30
 80027e0:	42a2      	cmp	r2, r4
 80027e2:	bf08      	it	eq
 80027e4:	f043 0301 	orreq.w	r3, r3, #1
 80027e8:	3430      	adds	r4, #48	; 0x30
 80027ea:	4282      	cmp	r2, r0
 80027ec:	bf08      	it	eq
 80027ee:	f043 0301 	orreq.w	r3, r3, #1
 80027f2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80027f6:	42a2      	cmp	r2, r4
 80027f8:	bf08      	it	eq
 80027fa:	f043 0301 	orreq.w	r3, r3, #1
 80027fe:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8002802:	4282      	cmp	r2, r0
 8002804:	bf08      	it	eq
 8002806:	f043 0301 	orreq.w	r3, r3, #1
 800280a:	3030      	adds	r0, #48	; 0x30
 800280c:	42a2      	cmp	r2, r4
 800280e:	bf08      	it	eq
 8002810:	f043 0301 	orreq.w	r3, r3, #1
 8002814:	3430      	adds	r4, #48	; 0x30
 8002816:	4282      	cmp	r2, r0
 8002818:	bf08      	it	eq
 800281a:	f043 0301 	orreq.w	r3, r3, #1
 800281e:	3030      	adds	r0, #48	; 0x30
 8002820:	42a2      	cmp	r2, r4
 8002822:	bf08      	it	eq
 8002824:	f043 0301 	orreq.w	r3, r3, #1
 8002828:	3430      	adds	r4, #48	; 0x30
 800282a:	4282      	cmp	r2, r0
 800282c:	bf08      	it	eq
 800282e:	f043 0301 	orreq.w	r3, r3, #1
 8002832:	3030      	adds	r0, #48	; 0x30
 8002834:	42a2      	cmp	r2, r4
 8002836:	bf08      	it	eq
 8002838:	f043 0301 	orreq.w	r3, r3, #1
 800283c:	4282      	cmp	r2, r0
 800283e:	bf08      	it	eq
 8002840:	f043 0301 	orreq.w	r3, r3, #1
 8002844:	b913      	cbnz	r3, 800284c <DMA_CalcBaseAndBitshift+0xa4>
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <DMA_CalcBaseAndBitshift+0xe4>)
 8002848:	429a      	cmp	r2, r3
 800284a:	d112      	bne.n	8002872 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800284c:	b2d3      	uxtb	r3, r2
 800284e:	4810      	ldr	r0, [pc, #64]	; (8002890 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002850:	4c10      	ldr	r4, [pc, #64]	; (8002894 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002852:	3b10      	subs	r3, #16
 8002854:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 8002858:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800285a:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800285e:	5c20      	ldrb	r0, [r4, r0]
 8002860:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002862:	480d      	ldr	r0, [pc, #52]	; (8002898 <DMA_CalcBaseAndBitshift+0xf0>)
 8002864:	ea00 0002 	and.w	r0, r0, r2
 8002868:	bf88      	it	hi
 800286a:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800286c:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800286e:	bc70      	pop	{r4, r5, r6}
 8002870:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002872:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8002876:	e7f9      	b.n	800286c <DMA_CalcBaseAndBitshift+0xc4>
 8002878:	40020010 	.word	0x40020010
 800287c:	40020028 	.word	0x40020028
 8002880:	40020040 	.word	0x40020040
 8002884:	40020058 	.word	0x40020058
 8002888:	40020070 	.word	0x40020070
 800288c:	400204b8 	.word	0x400204b8
 8002890:	aaaaaaab 	.word	0xaaaaaaab
 8002894:	08008664 	.word	0x08008664
 8002898:	fffffc00 	.word	0xfffffc00

0800289c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800289c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800289e:	4a27      	ldr	r2, [pc, #156]	; (800293c <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 80028a0:	4927      	ldr	r1, [pc, #156]	; (8002940 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 80028a2:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028a4:	4d27      	ldr	r5, [pc, #156]	; (8002944 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80028a6:	4c28      	ldr	r4, [pc, #160]	; (8002948 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80028a8:	42ab      	cmp	r3, r5
 80028aa:	bf18      	it	ne
 80028ac:	4293      	cmpne	r3, r2
 80028ae:	bf0c      	ite	eq
 80028b0:	2201      	moveq	r2, #1
 80028b2:	2200      	movne	r2, #0
 80028b4:	428b      	cmp	r3, r1
 80028b6:	bf08      	it	eq
 80028b8:	f042 0201 	orreq.w	r2, r2, #1
 80028bc:	3128      	adds	r1, #40	; 0x28
 80028be:	42a3      	cmp	r3, r4
 80028c0:	bf08      	it	eq
 80028c2:	f042 0201 	orreq.w	r2, r2, #1
 80028c6:	3428      	adds	r4, #40	; 0x28
 80028c8:	428b      	cmp	r3, r1
 80028ca:	bf08      	it	eq
 80028cc:	f042 0201 	orreq.w	r2, r2, #1
 80028d0:	3128      	adds	r1, #40	; 0x28
 80028d2:	42a3      	cmp	r3, r4
 80028d4:	bf08      	it	eq
 80028d6:	f042 0201 	orreq.w	r2, r2, #1
 80028da:	428b      	cmp	r3, r1
 80028dc:	bf08      	it	eq
 80028de:	f042 0201 	orreq.w	r2, r2, #1
 80028e2:	b912      	cbnz	r2, 80028ea <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80028e4:	4a19      	ldr	r2, [pc, #100]	; (800294c <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d113      	bne.n	8002912 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4918      	ldr	r1, [pc, #96]	; (8002950 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80028ee:	4a19      	ldr	r2, [pc, #100]	; (8002954 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80028f0:	3b08      	subs	r3, #8
 80028f2:	4c19      	ldr	r4, [pc, #100]	; (8002958 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 80028f4:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80028f8:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80028fa:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80028fe:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002902:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800290a:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800290e:	bc30      	pop	{r4, r5}
 8002910:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002912:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002914:	4a11      	ldr	r2, [pc, #68]	; (800295c <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002916:	4c12      	ldr	r4, [pc, #72]	; (8002960 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8002918:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800291a:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800291c:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002920:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002922:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002926:	d800      	bhi.n	800292a <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8002928:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800292a:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800292c:	f001 041f 	and.w	r4, r1, #31
 8002930:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002932:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002934:	40a3      	lsls	r3, r4
 8002936:	4c0c      	ldr	r4, [pc, #48]	; (8002968 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002938:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800293a:	e7e5      	b.n	8002908 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 800293c:	58025408 	.word	0x58025408
 8002940:	58025430 	.word	0x58025430
 8002944:	5802541c 	.word	0x5802541c
 8002948:	58025444 	.word	0x58025444
 800294c:	58025494 	.word	0x58025494
 8002950:	cccccccd 	.word	0xcccccccd
 8002954:	16009600 	.word	0x16009600
 8002958:	58025880 	.word	0x58025880
 800295c:	bffdfbf0 	.word	0xbffdfbf0
 8002960:	aaaaaaab 	.word	0xaaaaaaab
 8002964:	10008200 	.word	0x10008200
 8002968:	40020880 	.word	0x40020880

0800296c <HAL_DMA_Init>:
{
 800296c:	b538      	push	{r3, r4, r5, lr}
 800296e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002970:	f7fe fe0a 	bl	8001588 <HAL_GetTick>
  if(hdma == NULL)
 8002974:	2c00      	cmp	r4, #0
 8002976:	f000 8166 	beq.w	8002c46 <HAL_DMA_Init+0x2da>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800297a:	6822      	ldr	r2, [r4, #0]
 800297c:	4605      	mov	r5, r0
 800297e:	4ba4      	ldr	r3, [pc, #656]	; (8002c10 <HAL_DMA_Init+0x2a4>)
 8002980:	429a      	cmp	r2, r3
 8002982:	d048      	beq.n	8002a16 <HAL_DMA_Init+0xaa>
 8002984:	3318      	adds	r3, #24
 8002986:	429a      	cmp	r2, r3
 8002988:	d045      	beq.n	8002a16 <HAL_DMA_Init+0xaa>
 800298a:	3330      	adds	r3, #48	; 0x30
 800298c:	49a1      	ldr	r1, [pc, #644]	; (8002c14 <HAL_DMA_Init+0x2a8>)
 800298e:	428a      	cmp	r2, r1
 8002990:	bf18      	it	ne
 8002992:	429a      	cmpne	r2, r3
 8002994:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002998:	bf0c      	ite	eq
 800299a:	2301      	moveq	r3, #1
 800299c:	2300      	movne	r3, #0
 800299e:	428a      	cmp	r2, r1
 80029a0:	bf08      	it	eq
 80029a2:	f043 0301 	orreq.w	r3, r3, #1
 80029a6:	3118      	adds	r1, #24
 80029a8:	428a      	cmp	r2, r1
 80029aa:	bf08      	it	eq
 80029ac:	f043 0301 	orreq.w	r3, r3, #1
 80029b0:	3118      	adds	r1, #24
 80029b2:	428a      	cmp	r2, r1
 80029b4:	bf08      	it	eq
 80029b6:	f043 0301 	orreq.w	r3, r3, #1
 80029ba:	3118      	adds	r1, #24
 80029bc:	428a      	cmp	r2, r1
 80029be:	bf08      	it	eq
 80029c0:	f043 0301 	orreq.w	r3, r3, #1
 80029c4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80029c8:	428a      	cmp	r2, r1
 80029ca:	bf08      	it	eq
 80029cc:	f043 0301 	orreq.w	r3, r3, #1
 80029d0:	3118      	adds	r1, #24
 80029d2:	428a      	cmp	r2, r1
 80029d4:	bf08      	it	eq
 80029d6:	f043 0301 	orreq.w	r3, r3, #1
 80029da:	3118      	adds	r1, #24
 80029dc:	428a      	cmp	r2, r1
 80029de:	bf08      	it	eq
 80029e0:	f043 0301 	orreq.w	r3, r3, #1
 80029e4:	3118      	adds	r1, #24
 80029e6:	428a      	cmp	r2, r1
 80029e8:	bf08      	it	eq
 80029ea:	f043 0301 	orreq.w	r3, r3, #1
 80029ee:	3118      	adds	r1, #24
 80029f0:	428a      	cmp	r2, r1
 80029f2:	bf08      	it	eq
 80029f4:	f043 0301 	orreq.w	r3, r3, #1
 80029f8:	3118      	adds	r1, #24
 80029fa:	428a      	cmp	r2, r1
 80029fc:	bf08      	it	eq
 80029fe:	f043 0301 	orreq.w	r3, r3, #1
 8002a02:	3118      	adds	r1, #24
 8002a04:	428a      	cmp	r2, r1
 8002a06:	bf08      	it	eq
 8002a08:	f043 0301 	orreq.w	r3, r3, #1
 8002a0c:	b91b      	cbnz	r3, 8002a16 <HAL_DMA_Init+0xaa>
 8002a0e:	4b82      	ldr	r3, [pc, #520]	; (8002c18 <HAL_DMA_Init+0x2ac>)
 8002a10:	429a      	cmp	r2, r3
 8002a12:	f040 8180 	bne.w	8002d16 <HAL_DMA_Init+0x3aa>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a16:	2302      	movs	r3, #2
 8002a18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8002a22:	6813      	ldr	r3, [r2, #0]
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e005      	b.n	8002a38 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a2c:	f7fe fdac 	bl	8001588 <HAL_GetTick>
 8002a30:	1b43      	subs	r3, r0, r5
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	f200 80e5 	bhi.w	8002c02 <HAL_DMA_Init+0x296>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	07d2      	lsls	r2, r2, #31
 8002a3e:	d4f5      	bmi.n	8002a2c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8002a40:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a44:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8002a46:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a48:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a50:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a56:	69a1      	ldr	r1, [r4, #24]
 8002a58:	ea42 0201 	orr.w	r2, r2, r1
 8002a5c:	69e1      	ldr	r1, [r4, #28]
 8002a5e:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a62:	6a21      	ldr	r1, [r4, #32]
 8002a64:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a68:	496c      	ldr	r1, [pc, #432]	; (8002c1c <HAL_DMA_Init+0x2b0>)
 8002a6a:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 8002a6e:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a72:	d103      	bne.n	8002a7c <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a74:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8002a78:	4301      	orrs	r1, r0
 8002a7a:	430a      	orrs	r2, r1
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002a7c:	6861      	ldr	r1, [r4, #4]
 8002a7e:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8002a82:	281f      	cmp	r0, #31
 8002a84:	f240 80d4 	bls.w	8002c30 <HAL_DMA_Init+0x2c4>
 8002a88:	f1a1 004f 	sub.w	r0, r1, #79	; 0x4f
 8002a8c:	2803      	cmp	r0, #3
 8002a8e:	f200 80d5 	bhi.w	8002c3c <HAL_DMA_Init+0x2d0>
        registerValue |= DMA_SxCR_TRBUFF;
 8002a92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a96:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a98:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8002a9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a9c:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a9e:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa0:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002aa4:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa8:	d10e      	bne.n	8002ac8 <HAL_DMA_Init+0x15c>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002aaa:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8002aae:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ab0:	b150      	cbz	r0, 8002ac8 <HAL_DMA_Init+0x15c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ab2:	69a5      	ldr	r5, [r4, #24]
 8002ab4:	2d00      	cmp	r5, #0
 8002ab6:	f040 8108 	bne.w	8002cca <HAL_DMA_Init+0x35e>
    switch (hdma->Init.FIFOThreshold)
 8002aba:	2a01      	cmp	r2, #1
 8002abc:	f000 8126 	beq.w	8002d0c <HAL_DMA_Init+0x3a0>
 8002ac0:	f032 0202 	bics.w	r2, r2, #2
 8002ac4:	f000 8109 	beq.w	8002cda <HAL_DMA_Init+0x36e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002ac8:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aca:	4620      	mov	r0, r4
 8002acc:	f7ff fe6c 	bl	80027a8 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ad0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ad2:	233f      	movs	r3, #63	; 0x3f
 8002ad4:	f002 021f 	and.w	r2, r2, #31
 8002ad8:	4093      	lsls	r3, r2
 8002ada:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002adc:	6822      	ldr	r2, [r4, #0]
 8002ade:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <HAL_DMA_Init+0x2a4>)
 8002ae0:	484f      	ldr	r0, [pc, #316]	; (8002c20 <HAL_DMA_Init+0x2b4>)
 8002ae2:	494c      	ldr	r1, [pc, #304]	; (8002c14 <HAL_DMA_Init+0x2a8>)
 8002ae4:	4282      	cmp	r2, r0
 8002ae6:	bf18      	it	ne
 8002ae8:	429a      	cmpne	r2, r3
 8002aea:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	428a      	cmp	r2, r1
 8002af6:	bf08      	it	eq
 8002af8:	f043 0301 	orreq.w	r3, r3, #1
 8002afc:	3130      	adds	r1, #48	; 0x30
 8002afe:	4282      	cmp	r2, r0
 8002b00:	bf08      	it	eq
 8002b02:	f043 0301 	orreq.w	r3, r3, #1
 8002b06:	3030      	adds	r0, #48	; 0x30
 8002b08:	428a      	cmp	r2, r1
 8002b0a:	bf08      	it	eq
 8002b0c:	f043 0301 	orreq.w	r3, r3, #1
 8002b10:	3130      	adds	r1, #48	; 0x30
 8002b12:	4282      	cmp	r2, r0
 8002b14:	bf08      	it	eq
 8002b16:	f043 0301 	orreq.w	r3, r3, #1
 8002b1a:	3030      	adds	r0, #48	; 0x30
 8002b1c:	428a      	cmp	r2, r1
 8002b1e:	bf08      	it	eq
 8002b20:	f043 0301 	orreq.w	r3, r3, #1
 8002b24:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002b28:	4282      	cmp	r2, r0
 8002b2a:	bf08      	it	eq
 8002b2c:	f043 0301 	orreq.w	r3, r3, #1
 8002b30:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002b34:	428a      	cmp	r2, r1
 8002b36:	bf08      	it	eq
 8002b38:	f043 0301 	orreq.w	r3, r3, #1
 8002b3c:	3130      	adds	r1, #48	; 0x30
 8002b3e:	4282      	cmp	r2, r0
 8002b40:	bf08      	it	eq
 8002b42:	f043 0301 	orreq.w	r3, r3, #1
 8002b46:	3030      	adds	r0, #48	; 0x30
 8002b48:	428a      	cmp	r2, r1
 8002b4a:	bf08      	it	eq
 8002b4c:	f043 0301 	orreq.w	r3, r3, #1
 8002b50:	3130      	adds	r1, #48	; 0x30
 8002b52:	4282      	cmp	r2, r0
 8002b54:	bf08      	it	eq
 8002b56:	f043 0301 	orreq.w	r3, r3, #1
 8002b5a:	3030      	adds	r0, #48	; 0x30
 8002b5c:	428a      	cmp	r2, r1
 8002b5e:	bf08      	it	eq
 8002b60:	f043 0301 	orreq.w	r3, r3, #1
 8002b64:	3130      	adds	r1, #48	; 0x30
 8002b66:	4282      	cmp	r2, r0
 8002b68:	bf08      	it	eq
 8002b6a:	f043 0301 	orreq.w	r3, r3, #1
 8002b6e:	3030      	adds	r0, #48	; 0x30
 8002b70:	428a      	cmp	r2, r1
 8002b72:	bf08      	it	eq
 8002b74:	f043 0301 	orreq.w	r3, r3, #1
 8002b78:	492a      	ldr	r1, [pc, #168]	; (8002c24 <HAL_DMA_Init+0x2b8>)
 8002b7a:	4282      	cmp	r2, r0
 8002b7c:	bf08      	it	eq
 8002b7e:	f043 0301 	orreq.w	r3, r3, #1
 8002b82:	4829      	ldr	r0, [pc, #164]	; (8002c28 <HAL_DMA_Init+0x2bc>)
 8002b84:	428a      	cmp	r2, r1
 8002b86:	bf08      	it	eq
 8002b88:	f043 0301 	orreq.w	r3, r3, #1
 8002b8c:	3128      	adds	r1, #40	; 0x28
 8002b8e:	4282      	cmp	r2, r0
 8002b90:	bf08      	it	eq
 8002b92:	f043 0301 	orreq.w	r3, r3, #1
 8002b96:	3028      	adds	r0, #40	; 0x28
 8002b98:	428a      	cmp	r2, r1
 8002b9a:	bf08      	it	eq
 8002b9c:	f043 0301 	orreq.w	r3, r3, #1
 8002ba0:	3128      	adds	r1, #40	; 0x28
 8002ba2:	4282      	cmp	r2, r0
 8002ba4:	bf08      	it	eq
 8002ba6:	f043 0301 	orreq.w	r3, r3, #1
 8002baa:	3028      	adds	r0, #40	; 0x28
 8002bac:	428a      	cmp	r2, r1
 8002bae:	bf08      	it	eq
 8002bb0:	f043 0301 	orreq.w	r3, r3, #1
 8002bb4:	3128      	adds	r1, #40	; 0x28
 8002bb6:	4282      	cmp	r2, r0
 8002bb8:	bf08      	it	eq
 8002bba:	f043 0301 	orreq.w	r3, r3, #1
 8002bbe:	428a      	cmp	r2, r1
 8002bc0:	bf08      	it	eq
 8002bc2:	f043 0301 	orreq.w	r3, r3, #1
 8002bc6:	b913      	cbnz	r3, 8002bce <HAL_DMA_Init+0x262>
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <HAL_DMA_Init+0x2c0>)
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d113      	bne.n	8002bf6 <HAL_DMA_Init+0x28a>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff fe64 	bl	800289c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bd4:	68a3      	ldr	r3, [r4, #8]
 8002bd6:	2b80      	cmp	r3, #128	; 0x80
 8002bd8:	d037      	beq.n	8002c4a <HAL_DMA_Init+0x2de>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bda:	7922      	ldrb	r2, [r4, #4]
 8002bdc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002bde:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be0:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8002be4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002be6:	6861      	ldr	r1, [r4, #4]
 8002be8:	1e4b      	subs	r3, r1, #1
 8002bea:	2b07      	cmp	r3, #7
 8002bec:	d931      	bls.n	8002c52 <HAL_DMA_Init+0x2e6>
      hdma->DMAmuxRequestGen = 0U;
 8002bee:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8002bf0:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bf4:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002bf8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfa:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002bfc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002c00:	bd38      	pop	{r3, r4, r5, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c02:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c04:	2303      	movs	r3, #3
        return HAL_ERROR;
 8002c06:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c08:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c0a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002c0e:	bd38      	pop	{r3, r4, r5, pc}
 8002c10:	40020010 	.word	0x40020010
 8002c14:	40020040 	.word	0x40020040
 8002c18:	400204b8 	.word	0x400204b8
 8002c1c:	fe10803f 	.word	0xfe10803f
 8002c20:	40020028 	.word	0x40020028
 8002c24:	58025408 	.word	0x58025408
 8002c28:	5802541c 	.word	0x5802541c
 8002c2c:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c30:	4d6d      	ldr	r5, [pc, #436]	; (8002de8 <HAL_DMA_Init+0x47c>)
 8002c32:	fa25 f000 	lsr.w	r0, r5, r0
 8002c36:	07c0      	lsls	r0, r0, #31
 8002c38:	f53f af2b 	bmi.w	8002a92 <HAL_DMA_Init+0x126>
 8002c3c:	3974      	subs	r1, #116	; 0x74
 8002c3e:	2903      	cmp	r1, #3
 8002c40:	f63f af29 	bhi.w	8002a96 <HAL_DMA_Init+0x12a>
 8002c44:	e725      	b.n	8002a92 <HAL_DMA_Init+0x126>
    return HAL_ERROR;
 8002c46:	2001      	movs	r0, #1
}
 8002c48:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6063      	str	r3, [r4, #4]
 8002c50:	e7c4      	b.n	8002bdc <HAL_DMA_Init+0x270>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c52:	6820      	ldr	r0, [r4, #0]
 8002c54:	4a65      	ldr	r2, [pc, #404]	; (8002dec <HAL_DMA_Init+0x480>)
 8002c56:	4d66      	ldr	r5, [pc, #408]	; (8002df0 <HAL_DMA_Init+0x484>)
 8002c58:	42a8      	cmp	r0, r5
 8002c5a:	bf18      	it	ne
 8002c5c:	4290      	cmpne	r0, r2
 8002c5e:	f105 0514 	add.w	r5, r5, #20
 8002c62:	bf0c      	ite	eq
 8002c64:	2201      	moveq	r2, #1
 8002c66:	2200      	movne	r2, #0
 8002c68:	42a8      	cmp	r0, r5
 8002c6a:	bf08      	it	eq
 8002c6c:	f042 0201 	orreq.w	r2, r2, #1
 8002c70:	3514      	adds	r5, #20
 8002c72:	42a8      	cmp	r0, r5
 8002c74:	bf08      	it	eq
 8002c76:	f042 0201 	orreq.w	r2, r2, #1
 8002c7a:	3514      	adds	r5, #20
 8002c7c:	42a8      	cmp	r0, r5
 8002c7e:	bf08      	it	eq
 8002c80:	f042 0201 	orreq.w	r2, r2, #1
 8002c84:	3514      	adds	r5, #20
 8002c86:	42a8      	cmp	r0, r5
 8002c88:	bf08      	it	eq
 8002c8a:	f042 0201 	orreq.w	r2, r2, #1
 8002c8e:	3514      	adds	r5, #20
 8002c90:	42a8      	cmp	r0, r5
 8002c92:	bf08      	it	eq
 8002c94:	f042 0201 	orreq.w	r2, r2, #1
 8002c98:	b93a      	cbnz	r2, 8002caa <HAL_DMA_Init+0x33e>
 8002c9a:	4a56      	ldr	r2, [pc, #344]	; (8002df4 <HAL_DMA_Init+0x488>)
 8002c9c:	4290      	cmp	r0, r2
 8002c9e:	d004      	beq.n	8002caa <HAL_DMA_Init+0x33e>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ca0:	4a55      	ldr	r2, [pc, #340]	; (8002df8 <HAL_DMA_Init+0x48c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ca2:	4856      	ldr	r0, [pc, #344]	; (8002dfc <HAL_DMA_Init+0x490>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ca4:	440a      	add	r2, r1
 8002ca6:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ca8:	e003      	b.n	8002cb2 <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002caa:	4a55      	ldr	r2, [pc, #340]	; (8002e00 <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002cac:	4855      	ldr	r0, [pc, #340]	; (8002e04 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cae:	440a      	add	r2, r1
 8002cb0:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cb8:	2100      	movs	r1, #0
 8002cba:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002cbe:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cc0:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cc2:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	e795      	b.n	8002bf6 <HAL_DMA_Init+0x28a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cca:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8002cce:	d00e      	beq.n	8002cee <HAL_DMA_Init+0x382>
    switch (hdma->Init.FIFOThreshold)
 8002cd0:	2a02      	cmp	r2, #2
 8002cd2:	d905      	bls.n	8002ce0 <HAL_DMA_Init+0x374>
 8002cd4:	2a03      	cmp	r2, #3
 8002cd6:	f47f aef7 	bne.w	8002ac8 <HAL_DMA_Init+0x15c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cda:	01c2      	lsls	r2, r0, #7
 8002cdc:	f57f aef4 	bpl.w	8002ac8 <HAL_DMA_Init+0x15c>
          hdma->State = HAL_DMA_STATE_READY;
 8002ce0:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce2:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8002ce4:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce6:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002cec:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8002cee:	2a03      	cmp	r2, #3
 8002cf0:	f63f aeea 	bhi.w	8002ac8 <HAL_DMA_Init+0x15c>
 8002cf4:	a501      	add	r5, pc, #4	; (adr r5, 8002cfc <HAL_DMA_Init+0x390>)
 8002cf6:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002ce1 	.word	0x08002ce1
 8002d00:	08002cdb 	.word	0x08002cdb
 8002d04:	08002ce1 	.word	0x08002ce1
 8002d08:	08002d0d 	.word	0x08002d0d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d0c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002d10:	f47f aeda 	bne.w	8002ac8 <HAL_DMA_Init+0x15c>
 8002d14:	e7e4      	b.n	8002ce0 <HAL_DMA_Init+0x374>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d16:	4b35      	ldr	r3, [pc, #212]	; (8002dec <HAL_DMA_Init+0x480>)
 8002d18:	4835      	ldr	r0, [pc, #212]	; (8002df0 <HAL_DMA_Init+0x484>)
 8002d1a:	493b      	ldr	r1, [pc, #236]	; (8002e08 <HAL_DMA_Init+0x49c>)
 8002d1c:	4282      	cmp	r2, r0
 8002d1e:	bf18      	it	ne
 8002d20:	429a      	cmpne	r2, r3
 8002d22:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	428a      	cmp	r2, r1
 8002d2e:	bf08      	it	eq
 8002d30:	f043 0301 	orreq.w	r3, r3, #1
 8002d34:	3128      	adds	r1, #40	; 0x28
 8002d36:	4282      	cmp	r2, r0
 8002d38:	bf08      	it	eq
 8002d3a:	f043 0301 	orreq.w	r3, r3, #1
 8002d3e:	3028      	adds	r0, #40	; 0x28
 8002d40:	428a      	cmp	r2, r1
 8002d42:	bf08      	it	eq
 8002d44:	f043 0301 	orreq.w	r3, r3, #1
 8002d48:	3128      	adds	r1, #40	; 0x28
 8002d4a:	4282      	cmp	r2, r0
 8002d4c:	bf08      	it	eq
 8002d4e:	f043 0301 	orreq.w	r3, r3, #1
 8002d52:	428a      	cmp	r2, r1
 8002d54:	bf08      	it	eq
 8002d56:	f043 0301 	orreq.w	r3, r3, #1
 8002d5a:	b913      	cbnz	r3, 8002d62 <HAL_DMA_Init+0x3f6>
 8002d5c:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_DMA_Init+0x488>)
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d13a      	bne.n	8002dd8 <HAL_DMA_Init+0x46c>
    __HAL_UNLOCK(hdma);
 8002d62:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d64:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d66:	4929      	ldr	r1, [pc, #164]	; (8002e0c <HAL_DMA_Init+0x4a0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d68:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002d6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d70:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d72:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d74:	68a3      	ldr	r3, [r4, #8]
 8002d76:	2b40      	cmp	r3, #64	; 0x40
 8002d78:	d02c      	beq.n	8002dd4 <HAL_DMA_Init+0x468>
 8002d7a:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d86:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8002d8a:	08db      	lsrs	r3, r3, #3
 8002d8c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d90:	6965      	ldr	r5, [r4, #20]
 8002d92:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d96:	69a5      	ldr	r5, [r4, #24]
 8002d98:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d9c:	69e5      	ldr	r5, [r4, #28]
 8002d9e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002da2:	6a25      	ldr	r5, [r4, #32]
 8002da4:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8002da8:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002daa:	4919      	ldr	r1, [pc, #100]	; (8002e10 <HAL_DMA_Init+0x4a4>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dac:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dae:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_DMA_Init+0x4a8>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002db0:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002db2:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002db4:	6822      	ldr	r2, [r4, #0]
 8002db6:	4411      	add	r1, r2
 8002db8:	fba3 2301 	umull	r2, r3, r3, r1
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dc2:	f7ff fcf1 	bl	80027a8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dc6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f002 021f 	and.w	r2, r2, #31
 8002dce:	4093      	lsls	r3, r2
 8002dd0:	6043      	str	r3, [r0, #4]
 8002dd2:	e683      	b.n	8002adc <HAL_DMA_Init+0x170>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dd4:	2010      	movs	r0, #16
 8002dd6:	e7d6      	b.n	8002d86 <HAL_DMA_Init+0x41a>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd8:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002dda:	2303      	movs	r3, #3
    return HAL_ERROR;
 8002ddc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dde:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002de0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002de4:	bd38      	pop	{r3, r4, r5, pc}
 8002de6:	bf00      	nop
 8002de8:	c3c0003f 	.word	0xc3c0003f
 8002dec:	58025408 	.word	0x58025408
 8002df0:	5802541c 	.word	0x5802541c
 8002df4:	58025494 	.word	0x58025494
 8002df8:	1000823f 	.word	0x1000823f
 8002dfc:	40020940 	.word	0x40020940
 8002e00:	1600963f 	.word	0x1600963f
 8002e04:	58025940 	.word	0x58025940
 8002e08:	58025430 	.word	0x58025430
 8002e0c:	fffe000f 	.word	0xfffe000f
 8002e10:	a7fdabf8 	.word	0xa7fdabf8
 8002e14:	cccccccd 	.word	0xcccccccd

08002e18 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8002e18:	2800      	cmp	r0, #0
 8002e1a:	f000 8270 	beq.w	80032fe <HAL_DMA_Start_IT+0x4e6>
 8002e1e:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8002e20:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002e24:	2801      	cmp	r0, #1
 8002e26:	f000 826c 	beq.w	8003302 <HAL_DMA_Start_IT+0x4ea>
 8002e2a:	2001      	movs	r0, #1
{
 8002e2c:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e2e:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002e32:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e36:	4284      	cmp	r4, r0
 8002e38:	d008      	beq.n	8002e4c <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8002e3e:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e40:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002e44:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8002e48:	bc70      	pop	{r4, r5, r6}
 8002e4a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e4c:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8002e4e:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e52:	4ea2      	ldr	r6, [pc, #648]	; (80030dc <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e54:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8002e5e:	6820      	ldr	r0, [r4, #0]
 8002e60:	f020 0001 	bic.w	r0, r0, #1
 8002e64:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e66:	489e      	ldr	r0, [pc, #632]	; (80030e0 <HAL_DMA_Start_IT+0x2c8>)
 8002e68:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e6c:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e70:	42b4      	cmp	r4, r6
 8002e72:	bf18      	it	ne
 8002e74:	4284      	cmpne	r4, r0
 8002e76:	f106 0618 	add.w	r6, r6, #24
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2001      	moveq	r0, #1
 8002e7e:	2000      	movne	r0, #0
 8002e80:	42b4      	cmp	r4, r6
 8002e82:	bf08      	it	eq
 8002e84:	f040 0001 	orreq.w	r0, r0, #1
 8002e88:	3618      	adds	r6, #24
 8002e8a:	42b4      	cmp	r4, r6
 8002e8c:	bf08      	it	eq
 8002e8e:	f040 0001 	orreq.w	r0, r0, #1
 8002e92:	3618      	adds	r6, #24
 8002e94:	42b4      	cmp	r4, r6
 8002e96:	bf08      	it	eq
 8002e98:	f040 0001 	orreq.w	r0, r0, #1
 8002e9c:	3618      	adds	r6, #24
 8002e9e:	42b4      	cmp	r4, r6
 8002ea0:	bf08      	it	eq
 8002ea2:	f040 0001 	orreq.w	r0, r0, #1
 8002ea6:	3618      	adds	r6, #24
 8002ea8:	42b4      	cmp	r4, r6
 8002eaa:	bf08      	it	eq
 8002eac:	f040 0001 	orreq.w	r0, r0, #1
 8002eb0:	3618      	adds	r6, #24
 8002eb2:	42b4      	cmp	r4, r6
 8002eb4:	bf08      	it	eq
 8002eb6:	f040 0001 	orreq.w	r0, r0, #1
 8002eba:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8002ebe:	42b4      	cmp	r4, r6
 8002ec0:	bf08      	it	eq
 8002ec2:	f040 0001 	orreq.w	r0, r0, #1
 8002ec6:	3618      	adds	r6, #24
 8002ec8:	42b4      	cmp	r4, r6
 8002eca:	bf08      	it	eq
 8002ecc:	f040 0001 	orreq.w	r0, r0, #1
 8002ed0:	3618      	adds	r6, #24
 8002ed2:	42b4      	cmp	r4, r6
 8002ed4:	bf08      	it	eq
 8002ed6:	f040 0001 	orreq.w	r0, r0, #1
 8002eda:	3618      	adds	r6, #24
 8002edc:	42b4      	cmp	r4, r6
 8002ede:	bf08      	it	eq
 8002ee0:	f040 0001 	orreq.w	r0, r0, #1
 8002ee4:	3618      	adds	r6, #24
 8002ee6:	42b4      	cmp	r4, r6
 8002ee8:	bf08      	it	eq
 8002eea:	f040 0001 	orreq.w	r0, r0, #1
 8002eee:	3618      	adds	r6, #24
 8002ef0:	42b4      	cmp	r4, r6
 8002ef2:	bf08      	it	eq
 8002ef4:	f040 0001 	orreq.w	r0, r0, #1
 8002ef8:	3618      	adds	r6, #24
 8002efa:	42b4      	cmp	r4, r6
 8002efc:	bf08      	it	eq
 8002efe:	f040 0001 	orreq.w	r0, r0, #1
 8002f02:	3618      	adds	r6, #24
 8002f04:	42b4      	cmp	r4, r6
 8002f06:	bf08      	it	eq
 8002f08:	f040 0001 	orreq.w	r0, r0, #1
 8002f0c:	4e75      	ldr	r6, [pc, #468]	; (80030e4 <HAL_DMA_Start_IT+0x2cc>)
 8002f0e:	42b4      	cmp	r4, r6
 8002f10:	bf08      	it	eq
 8002f12:	f040 0001 	orreq.w	r0, r0, #1
 8002f16:	3614      	adds	r6, #20
 8002f18:	42b4      	cmp	r4, r6
 8002f1a:	bf08      	it	eq
 8002f1c:	f040 0001 	orreq.w	r0, r0, #1
 8002f20:	3614      	adds	r6, #20
 8002f22:	42b4      	cmp	r4, r6
 8002f24:	bf08      	it	eq
 8002f26:	f040 0001 	orreq.w	r0, r0, #1
 8002f2a:	3614      	adds	r6, #20
 8002f2c:	42b4      	cmp	r4, r6
 8002f2e:	bf08      	it	eq
 8002f30:	f040 0001 	orreq.w	r0, r0, #1
 8002f34:	3614      	adds	r6, #20
 8002f36:	42b4      	cmp	r4, r6
 8002f38:	bf08      	it	eq
 8002f3a:	f040 0001 	orreq.w	r0, r0, #1
 8002f3e:	3614      	adds	r6, #20
 8002f40:	42b4      	cmp	r4, r6
 8002f42:	bf08      	it	eq
 8002f44:	f040 0001 	orreq.w	r0, r0, #1
 8002f48:	3614      	adds	r6, #20
 8002f4a:	42b4      	cmp	r4, r6
 8002f4c:	bf08      	it	eq
 8002f4e:	f040 0001 	orreq.w	r0, r0, #1
 8002f52:	b910      	cbnz	r0, 8002f5a <HAL_DMA_Start_IT+0x142>
 8002f54:	4864      	ldr	r0, [pc, #400]	; (80030e8 <HAL_DMA_Start_IT+0x2d0>)
 8002f56:	4284      	cmp	r4, r0
 8002f58:	d10a      	bne.n	8002f70 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f5a:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 8002f5e:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002f60:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8002f64:	b110      	cbz	r0, 8002f6c <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f66:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 8002f6a:	6044      	str	r4, [r0, #4]
 8002f6c:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f70:	485b      	ldr	r0, [pc, #364]	; (80030e0 <HAL_DMA_Start_IT+0x2c8>)
 8002f72:	4e5a      	ldr	r6, [pc, #360]	; (80030dc <HAL_DMA_Start_IT+0x2c4>)
 8002f74:	42b4      	cmp	r4, r6
 8002f76:	bf18      	it	ne
 8002f78:	4284      	cmpne	r4, r0
 8002f7a:	f106 0618 	add.w	r6, r6, #24
 8002f7e:	bf0c      	ite	eq
 8002f80:	2001      	moveq	r0, #1
 8002f82:	2000      	movne	r0, #0
 8002f84:	42b4      	cmp	r4, r6
 8002f86:	bf08      	it	eq
 8002f88:	f040 0001 	orreq.w	r0, r0, #1
 8002f8c:	3618      	adds	r6, #24
 8002f8e:	42b4      	cmp	r4, r6
 8002f90:	bf08      	it	eq
 8002f92:	f040 0001 	orreq.w	r0, r0, #1
 8002f96:	3618      	adds	r6, #24
 8002f98:	42b4      	cmp	r4, r6
 8002f9a:	bf08      	it	eq
 8002f9c:	f040 0001 	orreq.w	r0, r0, #1
 8002fa0:	3618      	adds	r6, #24
 8002fa2:	42b4      	cmp	r4, r6
 8002fa4:	bf08      	it	eq
 8002fa6:	f040 0001 	orreq.w	r0, r0, #1
 8002faa:	3618      	adds	r6, #24
 8002fac:	42b4      	cmp	r4, r6
 8002fae:	bf08      	it	eq
 8002fb0:	f040 0001 	orreq.w	r0, r0, #1
 8002fb4:	3618      	adds	r6, #24
 8002fb6:	42b4      	cmp	r4, r6
 8002fb8:	bf08      	it	eq
 8002fba:	f040 0001 	orreq.w	r0, r0, #1
 8002fbe:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8002fc2:	42b4      	cmp	r4, r6
 8002fc4:	bf08      	it	eq
 8002fc6:	f040 0001 	orreq.w	r0, r0, #1
 8002fca:	3618      	adds	r6, #24
 8002fcc:	42b4      	cmp	r4, r6
 8002fce:	bf08      	it	eq
 8002fd0:	f040 0001 	orreq.w	r0, r0, #1
 8002fd4:	3618      	adds	r6, #24
 8002fd6:	42b4      	cmp	r4, r6
 8002fd8:	bf08      	it	eq
 8002fda:	f040 0001 	orreq.w	r0, r0, #1
 8002fde:	3618      	adds	r6, #24
 8002fe0:	42b4      	cmp	r4, r6
 8002fe2:	bf08      	it	eq
 8002fe4:	f040 0001 	orreq.w	r0, r0, #1
 8002fe8:	3618      	adds	r6, #24
 8002fea:	42b4      	cmp	r4, r6
 8002fec:	bf08      	it	eq
 8002fee:	f040 0001 	orreq.w	r0, r0, #1
 8002ff2:	3618      	adds	r6, #24
 8002ff4:	42b4      	cmp	r4, r6
 8002ff6:	bf08      	it	eq
 8002ff8:	f040 0001 	orreq.w	r0, r0, #1
 8002ffc:	3618      	adds	r6, #24
 8002ffe:	42b4      	cmp	r4, r6
 8003000:	bf08      	it	eq
 8003002:	f040 0001 	orreq.w	r0, r0, #1
 8003006:	b918      	cbnz	r0, 8003010 <HAL_DMA_Start_IT+0x1f8>
 8003008:	4838      	ldr	r0, [pc, #224]	; (80030ec <HAL_DMA_Start_IT+0x2d4>)
 800300a:	4284      	cmp	r4, r0
 800300c:	f040 817b 	bne.w	8003306 <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003010:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8003014:	f000 041f 	and.w	r4, r0, #31
 8003018:	203f      	movs	r0, #63	; 0x3f
 800301a:	40a0      	lsls	r0, r4
 800301c:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800301e:	f8dc 4000 	ldr.w	r4, [ip]
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8003028:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800302a:	f8dc 0000 	ldr.w	r0, [ip]
 800302e:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003030:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8003034:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003036:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800303a:	f000 815b 	beq.w	80032f4 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800303e:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003040:	f8dc 3000 	ldr.w	r3, [ip]
 8003044:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003046:	f8dc 4000 	ldr.w	r4, [ip]
 800304a:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <HAL_DMA_Start_IT+0x2c8>)
 800304c:	4923      	ldr	r1, [pc, #140]	; (80030dc <HAL_DMA_Start_IT+0x2c4>)
 800304e:	4a28      	ldr	r2, [pc, #160]	; (80030f0 <HAL_DMA_Start_IT+0x2d8>)
 8003050:	428c      	cmp	r4, r1
 8003052:	bf18      	it	ne
 8003054:	429c      	cmpne	r4, r3
 8003056:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	4294      	cmp	r4, r2
 8003062:	bf08      	it	eq
 8003064:	f043 0301 	orreq.w	r3, r3, #1
 8003068:	3230      	adds	r2, #48	; 0x30
 800306a:	428c      	cmp	r4, r1
 800306c:	bf08      	it	eq
 800306e:	f043 0301 	orreq.w	r3, r3, #1
 8003072:	3130      	adds	r1, #48	; 0x30
 8003074:	4294      	cmp	r4, r2
 8003076:	bf08      	it	eq
 8003078:	f043 0301 	orreq.w	r3, r3, #1
 800307c:	3230      	adds	r2, #48	; 0x30
 800307e:	428c      	cmp	r4, r1
 8003080:	bf08      	it	eq
 8003082:	f043 0301 	orreq.w	r3, r3, #1
 8003086:	3130      	adds	r1, #48	; 0x30
 8003088:	4294      	cmp	r4, r2
 800308a:	bf08      	it	eq
 800308c:	f043 0301 	orreq.w	r3, r3, #1
 8003090:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8003094:	428c      	cmp	r4, r1
 8003096:	bf08      	it	eq
 8003098:	f043 0301 	orreq.w	r3, r3, #1
 800309c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80030a0:	4294      	cmp	r4, r2
 80030a2:	bf08      	it	eq
 80030a4:	f043 0301 	orreq.w	r3, r3, #1
 80030a8:	3230      	adds	r2, #48	; 0x30
 80030aa:	428c      	cmp	r4, r1
 80030ac:	bf08      	it	eq
 80030ae:	f043 0301 	orreq.w	r3, r3, #1
 80030b2:	3130      	adds	r1, #48	; 0x30
 80030b4:	4294      	cmp	r4, r2
 80030b6:	bf08      	it	eq
 80030b8:	f043 0301 	orreq.w	r3, r3, #1
 80030bc:	3230      	adds	r2, #48	; 0x30
 80030be:	428c      	cmp	r4, r1
 80030c0:	bf08      	it	eq
 80030c2:	f043 0301 	orreq.w	r3, r3, #1
 80030c6:	3130      	adds	r1, #48	; 0x30
 80030c8:	4294      	cmp	r4, r2
 80030ca:	bf08      	it	eq
 80030cc:	f043 0301 	orreq.w	r3, r3, #1
 80030d0:	3230      	adds	r2, #48	; 0x30
 80030d2:	428c      	cmp	r4, r1
 80030d4:	bf08      	it	eq
 80030d6:	f043 0301 	orreq.w	r3, r3, #1
 80030da:	e00b      	b.n	80030f4 <HAL_DMA_Start_IT+0x2dc>
 80030dc:	40020028 	.word	0x40020028
 80030e0:	40020010 	.word	0x40020010
 80030e4:	58025408 	.word	0x58025408
 80030e8:	58025494 	.word	0x58025494
 80030ec:	400204b8 	.word	0x400204b8
 80030f0:	40020040 	.word	0x40020040
 80030f4:	4294      	cmp	r4, r2
 80030f6:	bf08      	it	eq
 80030f8:	f043 0301 	orreq.w	r3, r3, #1
 80030fc:	b91b      	cbnz	r3, 8003106 <HAL_DMA_Start_IT+0x2ee>
 80030fe:	4b9b      	ldr	r3, [pc, #620]	; (800336c <HAL_DMA_Start_IT+0x554>)
 8003100:	429c      	cmp	r4, r3
 8003102:	f040 8143 	bne.w	800338c <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	f023 031e 	bic.w	r3, r3, #30
 800310c:	f043 0316 	orr.w	r3, r3, #22
 8003110:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003112:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003116:	b12b      	cbz	r3, 8003124 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003118:	f8dc 2000 	ldr.w	r2, [ip]
 800311c:	6813      	ldr	r3, [r2, #0]
 800311e:	f043 0308 	orr.w	r3, r3, #8
 8003122:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003124:	f8dc 4000 	ldr.w	r4, [ip]
 8003128:	4b91      	ldr	r3, [pc, #580]	; (8003370 <HAL_DMA_Start_IT+0x558>)
 800312a:	4992      	ldr	r1, [pc, #584]	; (8003374 <HAL_DMA_Start_IT+0x55c>)
 800312c:	4a92      	ldr	r2, [pc, #584]	; (8003378 <HAL_DMA_Start_IT+0x560>)
 800312e:	428c      	cmp	r4, r1
 8003130:	bf18      	it	ne
 8003132:	429c      	cmpne	r4, r3
 8003134:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	4294      	cmp	r4, r2
 8003140:	bf08      	it	eq
 8003142:	f043 0301 	orreq.w	r3, r3, #1
 8003146:	3230      	adds	r2, #48	; 0x30
 8003148:	428c      	cmp	r4, r1
 800314a:	bf08      	it	eq
 800314c:	f043 0301 	orreq.w	r3, r3, #1
 8003150:	3130      	adds	r1, #48	; 0x30
 8003152:	4294      	cmp	r4, r2
 8003154:	bf08      	it	eq
 8003156:	f043 0301 	orreq.w	r3, r3, #1
 800315a:	3230      	adds	r2, #48	; 0x30
 800315c:	428c      	cmp	r4, r1
 800315e:	bf08      	it	eq
 8003160:	f043 0301 	orreq.w	r3, r3, #1
 8003164:	3130      	adds	r1, #48	; 0x30
 8003166:	4294      	cmp	r4, r2
 8003168:	bf08      	it	eq
 800316a:	f043 0301 	orreq.w	r3, r3, #1
 800316e:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8003172:	428c      	cmp	r4, r1
 8003174:	bf08      	it	eq
 8003176:	f043 0301 	orreq.w	r3, r3, #1
 800317a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800317e:	4294      	cmp	r4, r2
 8003180:	bf08      	it	eq
 8003182:	f043 0301 	orreq.w	r3, r3, #1
 8003186:	3230      	adds	r2, #48	; 0x30
 8003188:	428c      	cmp	r4, r1
 800318a:	bf08      	it	eq
 800318c:	f043 0301 	orreq.w	r3, r3, #1
 8003190:	3130      	adds	r1, #48	; 0x30
 8003192:	4294      	cmp	r4, r2
 8003194:	bf08      	it	eq
 8003196:	f043 0301 	orreq.w	r3, r3, #1
 800319a:	3230      	adds	r2, #48	; 0x30
 800319c:	428c      	cmp	r4, r1
 800319e:	bf08      	it	eq
 80031a0:	f043 0301 	orreq.w	r3, r3, #1
 80031a4:	3130      	adds	r1, #48	; 0x30
 80031a6:	4294      	cmp	r4, r2
 80031a8:	bf08      	it	eq
 80031aa:	f043 0301 	orreq.w	r3, r3, #1
 80031ae:	3230      	adds	r2, #48	; 0x30
 80031b0:	428c      	cmp	r4, r1
 80031b2:	bf08      	it	eq
 80031b4:	f043 0301 	orreq.w	r3, r3, #1
 80031b8:	3130      	adds	r1, #48	; 0x30
 80031ba:	4294      	cmp	r4, r2
 80031bc:	bf08      	it	eq
 80031be:	f043 0301 	orreq.w	r3, r3, #1
 80031c2:	4a6e      	ldr	r2, [pc, #440]	; (800337c <HAL_DMA_Start_IT+0x564>)
 80031c4:	428c      	cmp	r4, r1
 80031c6:	bf08      	it	eq
 80031c8:	f043 0301 	orreq.w	r3, r3, #1
 80031cc:	496c      	ldr	r1, [pc, #432]	; (8003380 <HAL_DMA_Start_IT+0x568>)
 80031ce:	4294      	cmp	r4, r2
 80031d0:	bf08      	it	eq
 80031d2:	f043 0301 	orreq.w	r3, r3, #1
 80031d6:	3228      	adds	r2, #40	; 0x28
 80031d8:	428c      	cmp	r4, r1
 80031da:	bf08      	it	eq
 80031dc:	f043 0301 	orreq.w	r3, r3, #1
 80031e0:	3128      	adds	r1, #40	; 0x28
 80031e2:	4294      	cmp	r4, r2
 80031e4:	bf08      	it	eq
 80031e6:	f043 0301 	orreq.w	r3, r3, #1
 80031ea:	3228      	adds	r2, #40	; 0x28
 80031ec:	428c      	cmp	r4, r1
 80031ee:	bf08      	it	eq
 80031f0:	f043 0301 	orreq.w	r3, r3, #1
 80031f4:	3128      	adds	r1, #40	; 0x28
 80031f6:	4294      	cmp	r4, r2
 80031f8:	bf08      	it	eq
 80031fa:	f043 0301 	orreq.w	r3, r3, #1
 80031fe:	3228      	adds	r2, #40	; 0x28
 8003200:	428c      	cmp	r4, r1
 8003202:	bf08      	it	eq
 8003204:	f043 0301 	orreq.w	r3, r3, #1
 8003208:	4294      	cmp	r4, r2
 800320a:	bf08      	it	eq
 800320c:	f043 0301 	orreq.w	r3, r3, #1
 8003210:	b913      	cbnz	r3, 8003218 <HAL_DMA_Start_IT+0x400>
 8003212:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <HAL_DMA_Start_IT+0x56c>)
 8003214:	429c      	cmp	r4, r3
 8003216:	d111      	bne.n	800323c <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003218:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	03d2      	lsls	r2, r2, #15
 8003220:	d503      	bpl.n	800322a <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003228:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800322a:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 800322e:	b11b      	cbz	r3, 8003238 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 800323c:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <HAL_DMA_Start_IT+0x558>)
 800323e:	494d      	ldr	r1, [pc, #308]	; (8003374 <HAL_DMA_Start_IT+0x55c>)
 8003240:	4a4d      	ldr	r2, [pc, #308]	; (8003378 <HAL_DMA_Start_IT+0x560>)
 8003242:	428c      	cmp	r4, r1
 8003244:	bf18      	it	ne
 8003246:	429c      	cmpne	r4, r3
 8003248:	484f      	ldr	r0, [pc, #316]	; (8003388 <HAL_DMA_Start_IT+0x570>)
 800324a:	f101 0160 	add.w	r1, r1, #96	; 0x60
 800324e:	bf0c      	ite	eq
 8003250:	2301      	moveq	r3, #1
 8003252:	2300      	movne	r3, #0
 8003254:	4294      	cmp	r4, r2
 8003256:	bf08      	it	eq
 8003258:	f043 0301 	orreq.w	r3, r3, #1
 800325c:	3230      	adds	r2, #48	; 0x30
 800325e:	4284      	cmp	r4, r0
 8003260:	bf08      	it	eq
 8003262:	f043 0301 	orreq.w	r3, r3, #1
 8003266:	3060      	adds	r0, #96	; 0x60
 8003268:	4294      	cmp	r4, r2
 800326a:	bf08      	it	eq
 800326c:	f043 0301 	orreq.w	r3, r3, #1
 8003270:	3230      	adds	r2, #48	; 0x30
 8003272:	428c      	cmp	r4, r1
 8003274:	bf08      	it	eq
 8003276:	f043 0301 	orreq.w	r3, r3, #1
 800327a:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 800327e:	4294      	cmp	r4, r2
 8003280:	bf08      	it	eq
 8003282:	f043 0301 	orreq.w	r3, r3, #1
 8003286:	f502 725c 	add.w	r2, r2, #880	; 0x370
 800328a:	4284      	cmp	r4, r0
 800328c:	bf08      	it	eq
 800328e:	f043 0301 	orreq.w	r3, r3, #1
 8003292:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8003296:	4294      	cmp	r4, r2
 8003298:	bf08      	it	eq
 800329a:	f043 0301 	orreq.w	r3, r3, #1
 800329e:	3230      	adds	r2, #48	; 0x30
 80032a0:	428c      	cmp	r4, r1
 80032a2:	bf08      	it	eq
 80032a4:	f043 0301 	orreq.w	r3, r3, #1
 80032a8:	3160      	adds	r1, #96	; 0x60
 80032aa:	4294      	cmp	r4, r2
 80032ac:	bf08      	it	eq
 80032ae:	f043 0301 	orreq.w	r3, r3, #1
 80032b2:	3230      	adds	r2, #48	; 0x30
 80032b4:	4284      	cmp	r4, r0
 80032b6:	bf08      	it	eq
 80032b8:	f043 0301 	orreq.w	r3, r3, #1
 80032bc:	4294      	cmp	r4, r2
 80032be:	bf08      	it	eq
 80032c0:	f043 0301 	orreq.w	r3, r3, #1
 80032c4:	3230      	adds	r2, #48	; 0x30
 80032c6:	428c      	cmp	r4, r1
 80032c8:	bf08      	it	eq
 80032ca:	f043 0301 	orreq.w	r3, r3, #1
 80032ce:	4294      	cmp	r4, r2
 80032d0:	bf08      	it	eq
 80032d2:	f043 0301 	orreq.w	r3, r3, #1
 80032d6:	b933      	cbnz	r3, 80032e6 <HAL_DMA_Start_IT+0x4ce>
 80032d8:	3060      	adds	r0, #96	; 0x60
 80032da:	1a20      	subs	r0, r4, r0
 80032dc:	fab0 f080 	clz	r0, r0
 80032e0:	0940      	lsrs	r0, r0, #5
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d03d      	beq.n	8003362 <HAL_DMA_Start_IT+0x54a>
 80032e6:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6023      	str	r3, [r4, #0]
}
 80032f0:	bc70      	pop	{r4, r5, r6}
 80032f2:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80032f4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80032f6:	f8dc 3000 	ldr.w	r3, [ip]
 80032fa:	60d9      	str	r1, [r3, #12]
 80032fc:	e6a3      	b.n	8003046 <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 80032fe:	2001      	movs	r0, #1
 8003300:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8003302:	2002      	movs	r0, #2
}
 8003304:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003306:	481d      	ldr	r0, [pc, #116]	; (800337c <HAL_DMA_Start_IT+0x564>)
 8003308:	4e1d      	ldr	r6, [pc, #116]	; (8003380 <HAL_DMA_Start_IT+0x568>)
 800330a:	42b4      	cmp	r4, r6
 800330c:	bf18      	it	ne
 800330e:	4284      	cmpne	r4, r0
 8003310:	f106 0614 	add.w	r6, r6, #20
 8003314:	bf0c      	ite	eq
 8003316:	2001      	moveq	r0, #1
 8003318:	2000      	movne	r0, #0
 800331a:	42b4      	cmp	r4, r6
 800331c:	bf08      	it	eq
 800331e:	f040 0001 	orreq.w	r0, r0, #1
 8003322:	3614      	adds	r6, #20
 8003324:	42b4      	cmp	r4, r6
 8003326:	bf08      	it	eq
 8003328:	f040 0001 	orreq.w	r0, r0, #1
 800332c:	3614      	adds	r6, #20
 800332e:	42b4      	cmp	r4, r6
 8003330:	bf08      	it	eq
 8003332:	f040 0001 	orreq.w	r0, r0, #1
 8003336:	3614      	adds	r6, #20
 8003338:	42b4      	cmp	r4, r6
 800333a:	bf08      	it	eq
 800333c:	f040 0001 	orreq.w	r0, r0, #1
 8003340:	3614      	adds	r6, #20
 8003342:	42b4      	cmp	r4, r6
 8003344:	bf08      	it	eq
 8003346:	f040 0001 	orreq.w	r0, r0, #1
 800334a:	b910      	cbnz	r0, 8003352 <HAL_DMA_Start_IT+0x53a>
 800334c:	480d      	ldr	r0, [pc, #52]	; (8003384 <HAL_DMA_Start_IT+0x56c>)
 800334e:	4284      	cmp	r4, r0
 8003350:	d11c      	bne.n	800338c <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003352:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8003356:	f000 041f 	and.w	r4, r0, #31
 800335a:	2001      	movs	r0, #1
 800335c:	40a0      	lsls	r0, r4
 800335e:	6068      	str	r0, [r5, #4]
 8003360:	e663      	b.n	800302a <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6023      	str	r3, [r4, #0]
 800336a:	e56d      	b.n	8002e48 <HAL_DMA_Start_IT+0x30>
 800336c:	400204b8 	.word	0x400204b8
 8003370:	40020010 	.word	0x40020010
 8003374:	40020028 	.word	0x40020028
 8003378:	40020040 	.word	0x40020040
 800337c:	58025408 	.word	0x58025408
 8003380:	5802541c 	.word	0x5802541c
 8003384:	58025494 	.word	0x58025494
 8003388:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	f023 030e 	bic.w	r3, r3, #14
 8003392:	f043 030a 	orr.w	r3, r3, #10
 8003396:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003398:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	f43f aec1 	beq.w	8003124 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80033a2:	f8dc 2000 	ldr.w	r2, [ip]
 80033a6:	6813      	ldr	r3, [r2, #0]
 80033a8:	f043 0304 	orr.w	r3, r3, #4
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e6b9      	b.n	8003124 <HAL_DMA_Start_IT+0x30c>

080033b0 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d065      	beq.n	8003480 <HAL_DMA_Abort_IT+0xd0>
{
 80033b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80033bc:	4603      	mov	r3, r0
 80033be:	2a02      	cmp	r2, #2
 80033c0:	d159      	bne.n	8003476 <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033c2:	6801      	ldr	r1, [r0, #0]
 80033c4:	4883      	ldr	r0, [pc, #524]	; (80035d4 <HAL_DMA_Abort_IT+0x224>)
 80033c6:	4281      	cmp	r1, r0
 80033c8:	d04b      	beq.n	8003462 <HAL_DMA_Abort_IT+0xb2>
 80033ca:	4c83      	ldr	r4, [pc, #524]	; (80035d8 <HAL_DMA_Abort_IT+0x228>)
 80033cc:	42a1      	cmp	r1, r4
 80033ce:	d048      	beq.n	8003462 <HAL_DMA_Abort_IT+0xb2>
 80033d0:	f8df a228 	ldr.w	sl, [pc, #552]	; 80035fc <HAL_DMA_Abort_IT+0x24c>
 80033d4:	f8df b214 	ldr.w	fp, [pc, #532]	; 80035ec <HAL_DMA_Abort_IT+0x23c>
 80033d8:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8003600 <HAL_DMA_Abort_IT+0x250>
 80033dc:	4559      	cmp	r1, fp
 80033de:	bf18      	it	ne
 80033e0:	4551      	cmpne	r1, sl
 80033e2:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8003604 <HAL_DMA_Abort_IT+0x254>
 80033e6:	f8df e220 	ldr.w	lr, [pc, #544]	; 8003608 <HAL_DMA_Abort_IT+0x258>
 80033ea:	bf0c      	ite	eq
 80033ec:	2201      	moveq	r2, #1
 80033ee:	2200      	movne	r2, #0
 80033f0:	f8df c218 	ldr.w	ip, [pc, #536]	; 800360c <HAL_DMA_Abort_IT+0x25c>
 80033f4:	4549      	cmp	r1, r9
 80033f6:	bf08      	it	eq
 80033f8:	f042 0201 	orreq.w	r2, r2, #1
 80033fc:	4d77      	ldr	r5, [pc, #476]	; (80035dc <HAL_DMA_Abort_IT+0x22c>)
 80033fe:	4f78      	ldr	r7, [pc, #480]	; (80035e0 <HAL_DMA_Abort_IT+0x230>)
 8003400:	4541      	cmp	r1, r8
 8003402:	bf08      	it	eq
 8003404:	f042 0201 	orreq.w	r2, r2, #1
 8003408:	4e76      	ldr	r6, [pc, #472]	; (80035e4 <HAL_DMA_Abort_IT+0x234>)
 800340a:	4571      	cmp	r1, lr
 800340c:	bf08      	it	eq
 800340e:	f042 0201 	orreq.w	r2, r2, #1
 8003412:	4561      	cmp	r1, ip
 8003414:	bf08      	it	eq
 8003416:	f042 0201 	orreq.w	r2, r2, #1
 800341a:	42a9      	cmp	r1, r5
 800341c:	bf08      	it	eq
 800341e:	f042 0201 	orreq.w	r2, r2, #1
 8003422:	3518      	adds	r5, #24
 8003424:	42a9      	cmp	r1, r5
 8003426:	bf08      	it	eq
 8003428:	f042 0201 	orreq.w	r2, r2, #1
 800342c:	3518      	adds	r5, #24
 800342e:	42a9      	cmp	r1, r5
 8003430:	bf08      	it	eq
 8003432:	f042 0201 	orreq.w	r2, r2, #1
 8003436:	3518      	adds	r5, #24
 8003438:	42a9      	cmp	r1, r5
 800343a:	bf08      	it	eq
 800343c:	f042 0201 	orreq.w	r2, r2, #1
 8003440:	3548      	adds	r5, #72	; 0x48
 8003442:	42b9      	cmp	r1, r7
 8003444:	bf08      	it	eq
 8003446:	f042 0201 	orreq.w	r2, r2, #1
 800344a:	42b1      	cmp	r1, r6
 800344c:	bf08      	it	eq
 800344e:	f042 0201 	orreq.w	r2, r2, #1
 8003452:	42a9      	cmp	r1, r5
 8003454:	bf08      	it	eq
 8003456:	f042 0201 	orreq.w	r2, r2, #1
 800345a:	b912      	cbnz	r2, 8003462 <HAL_DMA_Abort_IT+0xb2>
 800345c:	4a62      	ldr	r2, [pc, #392]	; (80035e8 <HAL_DMA_Abort_IT+0x238>)
 800345e:	4291      	cmp	r1, r2
 8003460:	d110      	bne.n	8003484 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003462:	2204      	movs	r2, #4
  return HAL_OK;
 8003464:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8003466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800346a:	680b      	ldr	r3, [r1, #0]
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	600b      	str	r3, [r1, #0]
}
 8003472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003476:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8003478:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800347a:	655a      	str	r2, [r3, #84]	; 0x54
}
 800347c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8003480:	2001      	movs	r0, #1
}
 8003482:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003484:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003486:	4c54      	ldr	r4, [pc, #336]	; (80035d8 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003488:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800348c:	4857      	ldr	r0, [pc, #348]	; (80035ec <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800348e:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 8003490:	6819      	ldr	r1, [r3, #0]
 8003492:	680a      	ldr	r2, [r1, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800349a:	4a4e      	ldr	r2, [pc, #312]	; (80035d4 <HAL_DMA_Abort_IT+0x224>)
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	42a1      	cmp	r1, r4
 80034a0:	bf18      	it	ne
 80034a2:	4291      	cmpne	r1, r2
 80034a4:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80034a8:	bf0c      	ite	eq
 80034aa:	2201      	moveq	r2, #1
 80034ac:	2200      	movne	r2, #0
 80034ae:	4281      	cmp	r1, r0
 80034b0:	bf08      	it	eq
 80034b2:	f042 0201 	orreq.w	r2, r2, #1
 80034b6:	3030      	adds	r0, #48	; 0x30
 80034b8:	42a1      	cmp	r1, r4
 80034ba:	bf08      	it	eq
 80034bc:	f042 0201 	orreq.w	r2, r2, #1
 80034c0:	3430      	adds	r4, #48	; 0x30
 80034c2:	4281      	cmp	r1, r0
 80034c4:	bf08      	it	eq
 80034c6:	f042 0201 	orreq.w	r2, r2, #1
 80034ca:	3030      	adds	r0, #48	; 0x30
 80034cc:	42a1      	cmp	r1, r4
 80034ce:	bf08      	it	eq
 80034d0:	f042 0201 	orreq.w	r2, r2, #1
 80034d4:	3430      	adds	r4, #48	; 0x30
 80034d6:	4281      	cmp	r1, r0
 80034d8:	bf08      	it	eq
 80034da:	f042 0201 	orreq.w	r2, r2, #1
 80034de:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80034e2:	42a1      	cmp	r1, r4
 80034e4:	bf08      	it	eq
 80034e6:	f042 0201 	orreq.w	r2, r2, #1
 80034ea:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80034ee:	4281      	cmp	r1, r0
 80034f0:	bf08      	it	eq
 80034f2:	f042 0201 	orreq.w	r2, r2, #1
 80034f6:	3030      	adds	r0, #48	; 0x30
 80034f8:	42a1      	cmp	r1, r4
 80034fa:	bf08      	it	eq
 80034fc:	f042 0201 	orreq.w	r2, r2, #1
 8003500:	3430      	adds	r4, #48	; 0x30
 8003502:	4281      	cmp	r1, r0
 8003504:	bf08      	it	eq
 8003506:	f042 0201 	orreq.w	r2, r2, #1
 800350a:	3030      	adds	r0, #48	; 0x30
 800350c:	42a1      	cmp	r1, r4
 800350e:	bf08      	it	eq
 8003510:	f042 0201 	orreq.w	r2, r2, #1
 8003514:	3430      	adds	r4, #48	; 0x30
 8003516:	4281      	cmp	r1, r0
 8003518:	bf08      	it	eq
 800351a:	f042 0201 	orreq.w	r2, r2, #1
 800351e:	3030      	adds	r0, #48	; 0x30
 8003520:	42a1      	cmp	r1, r4
 8003522:	bf08      	it	eq
 8003524:	f042 0201 	orreq.w	r2, r2, #1
 8003528:	3430      	adds	r4, #48	; 0x30
 800352a:	4281      	cmp	r1, r0
 800352c:	bf08      	it	eq
 800352e:	f042 0201 	orreq.w	r2, r2, #1
 8003532:	482f      	ldr	r0, [pc, #188]	; (80035f0 <HAL_DMA_Abort_IT+0x240>)
 8003534:	42a1      	cmp	r1, r4
 8003536:	bf08      	it	eq
 8003538:	f042 0201 	orreq.w	r2, r2, #1
 800353c:	4c2d      	ldr	r4, [pc, #180]	; (80035f4 <HAL_DMA_Abort_IT+0x244>)
 800353e:	4281      	cmp	r1, r0
 8003540:	bf08      	it	eq
 8003542:	f042 0201 	orreq.w	r2, r2, #1
 8003546:	3028      	adds	r0, #40	; 0x28
 8003548:	42a1      	cmp	r1, r4
 800354a:	bf08      	it	eq
 800354c:	f042 0201 	orreq.w	r2, r2, #1
 8003550:	3428      	adds	r4, #40	; 0x28
 8003552:	4281      	cmp	r1, r0
 8003554:	bf08      	it	eq
 8003556:	f042 0201 	orreq.w	r2, r2, #1
 800355a:	3028      	adds	r0, #40	; 0x28
 800355c:	42a1      	cmp	r1, r4
 800355e:	bf08      	it	eq
 8003560:	f042 0201 	orreq.w	r2, r2, #1
 8003564:	3428      	adds	r4, #40	; 0x28
 8003566:	4281      	cmp	r1, r0
 8003568:	bf08      	it	eq
 800356a:	f042 0201 	orreq.w	r2, r2, #1
 800356e:	3028      	adds	r0, #40	; 0x28
 8003570:	42a1      	cmp	r1, r4
 8003572:	bf08      	it	eq
 8003574:	f042 0201 	orreq.w	r2, r2, #1
 8003578:	4281      	cmp	r1, r0
 800357a:	bf08      	it	eq
 800357c:	f042 0201 	orreq.w	r2, r2, #1
 8003580:	b912      	cbnz	r2, 8003588 <HAL_DMA_Abort_IT+0x1d8>
 8003582:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <HAL_DMA_Abort_IT+0x248>)
 8003584:	4291      	cmp	r1, r2
 8003586:	d117      	bne.n	80035b8 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003588:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800358a:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800358c:	6801      	ldr	r1, [r0, #0]
 800358e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003592:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003594:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003598:	f001 011f 	and.w	r1, r1, #31
 800359c:	408a      	lsls	r2, r1
 800359e:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035a0:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 80035a4:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80035a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035a8:	b132      	cbz	r2, 80035b8 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035aa:	6811      	ldr	r1, [r2, #0]
 80035ac:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80035b0:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035b2:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 80035b6:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80035b8:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 80035ba:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 80035bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 80035be:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80035c2:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80035c6:	b11a      	cbz	r2, 80035d0 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 80035c8:	4618      	mov	r0, r3
 80035ca:	4790      	blx	r2
  return HAL_OK;
 80035cc:	4620      	mov	r0, r4
 80035ce:	e755      	b.n	800347c <HAL_DMA_Abort_IT+0xcc>
 80035d0:	4610      	mov	r0, r2
 80035d2:	e753      	b.n	800347c <HAL_DMA_Abort_IT+0xcc>
 80035d4:	40020010 	.word	0x40020010
 80035d8:	40020028 	.word	0x40020028
 80035dc:	40020410 	.word	0x40020410
 80035e0:	40020470 	.word	0x40020470
 80035e4:	40020488 	.word	0x40020488
 80035e8:	400204b8 	.word	0x400204b8
 80035ec:	40020040 	.word	0x40020040
 80035f0:	58025408 	.word	0x58025408
 80035f4:	5802541c 	.word	0x5802541c
 80035f8:	58025494 	.word	0x58025494
 80035fc:	40020058 	.word	0x40020058
 8003600:	40020070 	.word	0x40020070
 8003604:	40020088 	.word	0x40020088
 8003608:	400200a0 	.word	0x400200a0
 800360c:	400200b8 	.word	0x400200b8

08003610 <HAL_DMA_IRQHandler>:
{
 8003610:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003612:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003614:	4b9a      	ldr	r3, [pc, #616]	; (8003880 <HAL_DMA_IRQHandler+0x270>)
{
 8003616:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003618:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800361a:	681f      	ldr	r7, [r3, #0]
{
 800361c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800361e:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003620:	6803      	ldr	r3, [r0, #0]
 8003622:	4a98      	ldr	r2, [pc, #608]	; (8003884 <HAL_DMA_IRQHandler+0x274>)
  tmpisr_dma  = regs_dma->ISR;
 8003624:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003626:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 8003628:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800362a:	d048      	beq.n	80036be <HAL_DMA_IRQHandler+0xae>
 800362c:	3218      	adds	r2, #24
 800362e:	4293      	cmp	r3, r2
 8003630:	d045      	beq.n	80036be <HAL_DMA_IRQHandler+0xae>
 8003632:	3218      	adds	r2, #24
 8003634:	4894      	ldr	r0, [pc, #592]	; (8003888 <HAL_DMA_IRQHandler+0x278>)
 8003636:	4283      	cmp	r3, r0
 8003638:	bf18      	it	ne
 800363a:	4293      	cmpne	r3, r2
 800363c:	f100 0018 	add.w	r0, r0, #24
 8003640:	bf0c      	ite	eq
 8003642:	2201      	moveq	r2, #1
 8003644:	2200      	movne	r2, #0
 8003646:	4283      	cmp	r3, r0
 8003648:	bf08      	it	eq
 800364a:	f042 0201 	orreq.w	r2, r2, #1
 800364e:	3018      	adds	r0, #24
 8003650:	4283      	cmp	r3, r0
 8003652:	bf08      	it	eq
 8003654:	f042 0201 	orreq.w	r2, r2, #1
 8003658:	3018      	adds	r0, #24
 800365a:	4283      	cmp	r3, r0
 800365c:	bf08      	it	eq
 800365e:	f042 0201 	orreq.w	r2, r2, #1
 8003662:	3018      	adds	r0, #24
 8003664:	4283      	cmp	r3, r0
 8003666:	bf08      	it	eq
 8003668:	f042 0201 	orreq.w	r2, r2, #1
 800366c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003670:	4283      	cmp	r3, r0
 8003672:	bf08      	it	eq
 8003674:	f042 0201 	orreq.w	r2, r2, #1
 8003678:	3018      	adds	r0, #24
 800367a:	4283      	cmp	r3, r0
 800367c:	bf08      	it	eq
 800367e:	f042 0201 	orreq.w	r2, r2, #1
 8003682:	3018      	adds	r0, #24
 8003684:	4283      	cmp	r3, r0
 8003686:	bf08      	it	eq
 8003688:	f042 0201 	orreq.w	r2, r2, #1
 800368c:	3018      	adds	r0, #24
 800368e:	4283      	cmp	r3, r0
 8003690:	bf08      	it	eq
 8003692:	f042 0201 	orreq.w	r2, r2, #1
 8003696:	3018      	adds	r0, #24
 8003698:	4283      	cmp	r3, r0
 800369a:	bf08      	it	eq
 800369c:	f042 0201 	orreq.w	r2, r2, #1
 80036a0:	3018      	adds	r0, #24
 80036a2:	4283      	cmp	r3, r0
 80036a4:	bf08      	it	eq
 80036a6:	f042 0201 	orreq.w	r2, r2, #1
 80036aa:	3018      	adds	r0, #24
 80036ac:	4283      	cmp	r3, r0
 80036ae:	bf08      	it	eq
 80036b0:	f042 0201 	orreq.w	r2, r2, #1
 80036b4:	b91a      	cbnz	r2, 80036be <HAL_DMA_IRQHandler+0xae>
 80036b6:	4a75      	ldr	r2, [pc, #468]	; (800388c <HAL_DMA_IRQHandler+0x27c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	f040 8294 	bne.w	8003be6 <HAL_DMA_IRQHandler+0x5d6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036be:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
 80036c2:	2208      	movs	r2, #8
 80036c4:	f00e 011f 	and.w	r1, lr, #31
 80036c8:	408a      	lsls	r2, r1
 80036ca:	422a      	tst	r2, r5
 80036cc:	f040 8193 	bne.w	80039f6 <HAL_DMA_IRQHandler+0x3e6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036d0:	fa25 f201 	lsr.w	r2, r5, r1
 80036d4:	07d2      	lsls	r2, r2, #31
 80036d6:	d50e      	bpl.n	80036f6 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	0612      	lsls	r2, r2, #24
 80036dc:	f140 824d 	bpl.w	8003b7a <HAL_DMA_IRQHandler+0x56a>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036e0:	2301      	movs	r3, #1
 80036e2:	408b      	lsls	r3, r1
 80036e4:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036e8:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036ec:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036f0:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036f4:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036f6:	f04f 0c04 	mov.w	ip, #4
 80036fa:	fa0c fc01 	lsl.w	ip, ip, r1
 80036fe:	ea1c 0f05 	tst.w	ip, r5
 8003702:	d05f      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	485f      	ldr	r0, [pc, #380]	; (8003884 <HAL_DMA_IRQHandler+0x274>)
 8003708:	4b61      	ldr	r3, [pc, #388]	; (8003890 <HAL_DMA_IRQHandler+0x280>)
 800370a:	429a      	cmp	r2, r3
 800370c:	bf18      	it	ne
 800370e:	4282      	cmpne	r2, r0
 8003710:	f103 0318 	add.w	r3, r3, #24
 8003714:	bf0c      	ite	eq
 8003716:	2001      	moveq	r0, #1
 8003718:	2000      	movne	r0, #0
 800371a:	429a      	cmp	r2, r3
 800371c:	bf08      	it	eq
 800371e:	f040 0001 	orreq.w	r0, r0, #1
 8003722:	3318      	adds	r3, #24
 8003724:	429a      	cmp	r2, r3
 8003726:	bf08      	it	eq
 8003728:	f040 0001 	orreq.w	r0, r0, #1
 800372c:	3318      	adds	r3, #24
 800372e:	429a      	cmp	r2, r3
 8003730:	bf08      	it	eq
 8003732:	f040 0001 	orreq.w	r0, r0, #1
 8003736:	3318      	adds	r3, #24
 8003738:	429a      	cmp	r2, r3
 800373a:	bf08      	it	eq
 800373c:	f040 0001 	orreq.w	r0, r0, #1
 8003740:	3318      	adds	r3, #24
 8003742:	429a      	cmp	r2, r3
 8003744:	bf08      	it	eq
 8003746:	f040 0001 	orreq.w	r0, r0, #1
 800374a:	3318      	adds	r3, #24
 800374c:	429a      	cmp	r2, r3
 800374e:	bf08      	it	eq
 8003750:	f040 0001 	orreq.w	r0, r0, #1
 8003754:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003758:	429a      	cmp	r2, r3
 800375a:	bf08      	it	eq
 800375c:	f040 0001 	orreq.w	r0, r0, #1
 8003760:	3318      	adds	r3, #24
 8003762:	429a      	cmp	r2, r3
 8003764:	bf08      	it	eq
 8003766:	f040 0001 	orreq.w	r0, r0, #1
 800376a:	3318      	adds	r3, #24
 800376c:	429a      	cmp	r2, r3
 800376e:	bf08      	it	eq
 8003770:	f040 0001 	orreq.w	r0, r0, #1
 8003774:	3318      	adds	r3, #24
 8003776:	429a      	cmp	r2, r3
 8003778:	bf08      	it	eq
 800377a:	f040 0001 	orreq.w	r0, r0, #1
 800377e:	3318      	adds	r3, #24
 8003780:	429a      	cmp	r2, r3
 8003782:	bf08      	it	eq
 8003784:	f040 0001 	orreq.w	r0, r0, #1
 8003788:	3318      	adds	r3, #24
 800378a:	429a      	cmp	r2, r3
 800378c:	bf08      	it	eq
 800378e:	f040 0001 	orreq.w	r0, r0, #1
 8003792:	3318      	adds	r3, #24
 8003794:	429a      	cmp	r2, r3
 8003796:	bf08      	it	eq
 8003798:	f040 0001 	orreq.w	r0, r0, #1
 800379c:	4613      	mov	r3, r2
 800379e:	b918      	cbnz	r0, 80037a8 <HAL_DMA_IRQHandler+0x198>
 80037a0:	483a      	ldr	r0, [pc, #232]	; (800388c <HAL_DMA_IRQHandler+0x27c>)
 80037a2:	4282      	cmp	r2, r0
 80037a4:	f040 825a 	bne.w	8003c5c <HAL_DMA_IRQHandler+0x64c>
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	0790      	lsls	r0, r2, #30
 80037ac:	f140 81f1 	bpl.w	8003b92 <HAL_DMA_IRQHandler+0x582>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037b0:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037b6:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037ba:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037be:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037c2:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037c4:	f04f 0c10 	mov.w	ip, #16
 80037c8:	fa0c fc01 	lsl.w	ip, ip, r1
 80037cc:	ea1c 0f05 	tst.w	ip, r5
 80037d0:	d075      	beq.n	80038be <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	482b      	ldr	r0, [pc, #172]	; (8003884 <HAL_DMA_IRQHandler+0x274>)
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <HAL_DMA_IRQHandler+0x280>)
 80037d8:	429a      	cmp	r2, r3
 80037da:	bf18      	it	ne
 80037dc:	4282      	cmpne	r2, r0
 80037de:	f103 0318 	add.w	r3, r3, #24
 80037e2:	bf0c      	ite	eq
 80037e4:	2001      	moveq	r0, #1
 80037e6:	2000      	movne	r0, #0
 80037e8:	429a      	cmp	r2, r3
 80037ea:	bf08      	it	eq
 80037ec:	f040 0001 	orreq.w	r0, r0, #1
 80037f0:	3318      	adds	r3, #24
 80037f2:	429a      	cmp	r2, r3
 80037f4:	bf08      	it	eq
 80037f6:	f040 0001 	orreq.w	r0, r0, #1
 80037fa:	3318      	adds	r3, #24
 80037fc:	429a      	cmp	r2, r3
 80037fe:	bf08      	it	eq
 8003800:	f040 0001 	orreq.w	r0, r0, #1
 8003804:	3318      	adds	r3, #24
 8003806:	429a      	cmp	r2, r3
 8003808:	bf08      	it	eq
 800380a:	f040 0001 	orreq.w	r0, r0, #1
 800380e:	3318      	adds	r3, #24
 8003810:	429a      	cmp	r2, r3
 8003812:	bf08      	it	eq
 8003814:	f040 0001 	orreq.w	r0, r0, #1
 8003818:	3318      	adds	r3, #24
 800381a:	429a      	cmp	r2, r3
 800381c:	bf08      	it	eq
 800381e:	f040 0001 	orreq.w	r0, r0, #1
 8003822:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003826:	429a      	cmp	r2, r3
 8003828:	bf08      	it	eq
 800382a:	f040 0001 	orreq.w	r0, r0, #1
 800382e:	3318      	adds	r3, #24
 8003830:	429a      	cmp	r2, r3
 8003832:	bf08      	it	eq
 8003834:	f040 0001 	orreq.w	r0, r0, #1
 8003838:	3318      	adds	r3, #24
 800383a:	429a      	cmp	r2, r3
 800383c:	bf08      	it	eq
 800383e:	f040 0001 	orreq.w	r0, r0, #1
 8003842:	3318      	adds	r3, #24
 8003844:	429a      	cmp	r2, r3
 8003846:	bf08      	it	eq
 8003848:	f040 0001 	orreq.w	r0, r0, #1
 800384c:	3318      	adds	r3, #24
 800384e:	429a      	cmp	r2, r3
 8003850:	bf08      	it	eq
 8003852:	f040 0001 	orreq.w	r0, r0, #1
 8003856:	3318      	adds	r3, #24
 8003858:	429a      	cmp	r2, r3
 800385a:	bf08      	it	eq
 800385c:	f040 0001 	orreq.w	r0, r0, #1
 8003860:	3318      	adds	r3, #24
 8003862:	429a      	cmp	r2, r3
 8003864:	bf08      	it	eq
 8003866:	f040 0001 	orreq.w	r0, r0, #1
 800386a:	4613      	mov	r3, r2
 800386c:	b918      	cbnz	r0, 8003876 <HAL_DMA_IRQHandler+0x266>
 800386e:	4807      	ldr	r0, [pc, #28]	; (800388c <HAL_DMA_IRQHandler+0x27c>)
 8003870:	4282      	cmp	r2, r0
 8003872:	f040 813c 	bne.w	8003aee <HAL_DMA_IRQHandler+0x4de>
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	0712      	lsls	r2, r2, #28
 800387a:	f140 8177 	bpl.w	8003b6c <HAL_DMA_IRQHandler+0x55c>
 800387e:	e009      	b.n	8003894 <HAL_DMA_IRQHandler+0x284>
 8003880:	20000004 	.word	0x20000004
 8003884:	40020010 	.word	0x40020010
 8003888:	40020058 	.word	0x40020058
 800388c:	400204b8 	.word	0x400204b8
 8003890:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003894:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	0350      	lsls	r0, r2, #13
 800389e:	f100 8181 	bmi.w	8003ba4 <HAL_DMA_IRQHandler+0x594>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	05d2      	lsls	r2, r2, #23
 80038a6:	d403      	bmi.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	f022 0208 	bic.w	r2, r2, #8
 80038ae:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80038b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038b2:	b10b      	cbz	r3, 80038b8 <HAL_DMA_IRQHandler+0x2a8>
            hdma->XferHalfCpltCallback(hdma);
 80038b4:	4620      	mov	r0, r4
 80038b6:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80038ba:	f001 011f 	and.w	r1, r1, #31
 80038be:	2320      	movs	r3, #32
 80038c0:	fa03 f101 	lsl.w	r1, r3, r1
 80038c4:	4229      	tst	r1, r5
 80038c6:	d066      	beq.n	8003996 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	4a92      	ldr	r2, [pc, #584]	; (8003b14 <HAL_DMA_IRQHandler+0x504>)
 80038cc:	4892      	ldr	r0, [pc, #584]	; (8003b18 <HAL_DMA_IRQHandler+0x508>)
 80038ce:	4283      	cmp	r3, r0
 80038d0:	bf18      	it	ne
 80038d2:	4293      	cmpne	r3, r2
 80038d4:	f100 0018 	add.w	r0, r0, #24
 80038d8:	bf0c      	ite	eq
 80038da:	2201      	moveq	r2, #1
 80038dc:	2200      	movne	r2, #0
 80038de:	4283      	cmp	r3, r0
 80038e0:	bf08      	it	eq
 80038e2:	f042 0201 	orreq.w	r2, r2, #1
 80038e6:	3018      	adds	r0, #24
 80038e8:	4283      	cmp	r3, r0
 80038ea:	bf08      	it	eq
 80038ec:	f042 0201 	orreq.w	r2, r2, #1
 80038f0:	3018      	adds	r0, #24
 80038f2:	4283      	cmp	r3, r0
 80038f4:	bf08      	it	eq
 80038f6:	f042 0201 	orreq.w	r2, r2, #1
 80038fa:	3018      	adds	r0, #24
 80038fc:	4283      	cmp	r3, r0
 80038fe:	bf08      	it	eq
 8003900:	f042 0201 	orreq.w	r2, r2, #1
 8003904:	3018      	adds	r0, #24
 8003906:	4283      	cmp	r3, r0
 8003908:	bf08      	it	eq
 800390a:	f042 0201 	orreq.w	r2, r2, #1
 800390e:	3018      	adds	r0, #24
 8003910:	4283      	cmp	r3, r0
 8003912:	bf08      	it	eq
 8003914:	f042 0201 	orreq.w	r2, r2, #1
 8003918:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800391c:	4283      	cmp	r3, r0
 800391e:	bf08      	it	eq
 8003920:	f042 0201 	orreq.w	r2, r2, #1
 8003924:	3018      	adds	r0, #24
 8003926:	4283      	cmp	r3, r0
 8003928:	bf08      	it	eq
 800392a:	f042 0201 	orreq.w	r2, r2, #1
 800392e:	3018      	adds	r0, #24
 8003930:	4283      	cmp	r3, r0
 8003932:	bf08      	it	eq
 8003934:	f042 0201 	orreq.w	r2, r2, #1
 8003938:	3018      	adds	r0, #24
 800393a:	4283      	cmp	r3, r0
 800393c:	bf08      	it	eq
 800393e:	f042 0201 	orreq.w	r2, r2, #1
 8003942:	3018      	adds	r0, #24
 8003944:	4283      	cmp	r3, r0
 8003946:	bf08      	it	eq
 8003948:	f042 0201 	orreq.w	r2, r2, #1
 800394c:	3018      	adds	r0, #24
 800394e:	4283      	cmp	r3, r0
 8003950:	bf08      	it	eq
 8003952:	f042 0201 	orreq.w	r2, r2, #1
 8003956:	3018      	adds	r0, #24
 8003958:	4283      	cmp	r3, r0
 800395a:	bf08      	it	eq
 800395c:	f042 0201 	orreq.w	r2, r2, #1
 8003960:	b91a      	cbnz	r2, 800396a <HAL_DMA_IRQHandler+0x35a>
 8003962:	4a6e      	ldr	r2, [pc, #440]	; (8003b1c <HAL_DMA_IRQHandler+0x50c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	f040 80cf 	bne.w	8003b08 <HAL_DMA_IRQHandler+0x4f8>
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	06dd      	lsls	r5, r3, #27
 800396e:	d512      	bpl.n	8003996 <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003970:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003972:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003976:	2b04      	cmp	r3, #4
 8003978:	f000 80d4 	beq.w	8003b24 <HAL_DMA_IRQHandler+0x514>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	0352      	lsls	r2, r2, #13
 8003982:	f140 8118 	bpl.w	8003bb6 <HAL_DMA_IRQHandler+0x5a6>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	031e      	lsls	r6, r3, #12
 800398a:	f140 8123 	bpl.w	8003bd4 <HAL_DMA_IRQHandler+0x5c4>
          if(hdma->XferCpltCallback != NULL)
 800398e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003990:	b10b      	cbz	r3, 8003996 <HAL_DMA_IRQHandler+0x386>
            hdma->XferCpltCallback(hdma);
 8003992:	4620      	mov	r0, r4
 8003994:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003996:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80e5 	beq.w	8003b68 <HAL_DMA_IRQHandler+0x558>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800399e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039a0:	07dd      	lsls	r5, r3, #31
 80039a2:	d51f      	bpl.n	80039e4 <HAL_DMA_IRQHandler+0x3d4>
        __HAL_DMA_DISABLE(hdma);
 80039a4:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80039a6:	2104      	movs	r1, #4
 80039a8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80039ac:	6813      	ldr	r3, [r2, #0]
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039b4:	4a5a      	ldr	r2, [pc, #360]	; (8003b20 <HAL_DMA_IRQHandler+0x510>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80039b6:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039b8:	fba2 7207 	umull	r7, r2, r2, r7
 80039bc:	0a92      	lsrs	r2, r2, #10
 80039be:	e002      	b.n	80039c6 <HAL_DMA_IRQHandler+0x3b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80039c0:	680b      	ldr	r3, [r1, #0]
 80039c2:	07d8      	lsls	r0, r3, #31
 80039c4:	d504      	bpl.n	80039d0 <HAL_DMA_IRQHandler+0x3c0>
          if (++count > timeout)
 80039c6:	9b01      	ldr	r3, [sp, #4]
 80039c8:	3301      	adds	r3, #1
 80039ca:	4293      	cmp	r3, r2
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	d9f7      	bls.n	80039c0 <HAL_DMA_IRQHandler+0x3b0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039d0:	680b      	ldr	r3, [r1, #0]
 80039d2:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80039d4:	bf4c      	ite	mi
 80039d6:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80039d8:	2301      	movpl	r3, #1
 80039da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80039de:	2300      	movs	r3, #0
 80039e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80039e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80be 	beq.w	8003b68 <HAL_DMA_IRQHandler+0x558>
        hdma->XferErrorCallback(hdma);
 80039ec:	4620      	mov	r0, r4
}
 80039ee:	b003      	add	sp, #12
 80039f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 80039f4:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	0752      	lsls	r2, r2, #29
 80039fa:	d511      	bpl.n	8003a20 <HAL_DMA_IRQHandler+0x410>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	f022 0204 	bic.w	r2, r2, #4
 8003a02:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a06:	f003 021f 	and.w	r2, r3, #31
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	4093      	lsls	r3, r2
 8003a0e:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a10:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a12:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a16:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a1a:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a1e:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a20:	fa25 f301 	lsr.w	r3, r5, r1
 8003a24:	07d8      	lsls	r0, r3, #31
 8003a26:	f57f ae66 	bpl.w	80036f6 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a2a:	6822      	ldr	r2, [r4, #0]
 8003a2c:	4839      	ldr	r0, [pc, #228]	; (8003b14 <HAL_DMA_IRQHandler+0x504>)
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	; (8003b18 <HAL_DMA_IRQHandler+0x508>)
 8003a30:	429a      	cmp	r2, r3
 8003a32:	bf18      	it	ne
 8003a34:	4282      	cmpne	r2, r0
 8003a36:	f103 0318 	add.w	r3, r3, #24
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2001      	moveq	r0, #1
 8003a3e:	2000      	movne	r0, #0
 8003a40:	429a      	cmp	r2, r3
 8003a42:	bf08      	it	eq
 8003a44:	f040 0001 	orreq.w	r0, r0, #1
 8003a48:	3318      	adds	r3, #24
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	bf08      	it	eq
 8003a4e:	f040 0001 	orreq.w	r0, r0, #1
 8003a52:	3318      	adds	r3, #24
 8003a54:	429a      	cmp	r2, r3
 8003a56:	bf08      	it	eq
 8003a58:	f040 0001 	orreq.w	r0, r0, #1
 8003a5c:	3318      	adds	r3, #24
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	bf08      	it	eq
 8003a62:	f040 0001 	orreq.w	r0, r0, #1
 8003a66:	3318      	adds	r3, #24
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	bf08      	it	eq
 8003a6c:	f040 0001 	orreq.w	r0, r0, #1
 8003a70:	3318      	adds	r3, #24
 8003a72:	429a      	cmp	r2, r3
 8003a74:	bf08      	it	eq
 8003a76:	f040 0001 	orreq.w	r0, r0, #1
 8003a7a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	bf08      	it	eq
 8003a82:	f040 0001 	orreq.w	r0, r0, #1
 8003a86:	3318      	adds	r3, #24
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	bf08      	it	eq
 8003a8c:	f040 0001 	orreq.w	r0, r0, #1
 8003a90:	3318      	adds	r3, #24
 8003a92:	429a      	cmp	r2, r3
 8003a94:	bf08      	it	eq
 8003a96:	f040 0001 	orreq.w	r0, r0, #1
 8003a9a:	3318      	adds	r3, #24
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	bf08      	it	eq
 8003aa0:	f040 0001 	orreq.w	r0, r0, #1
 8003aa4:	3318      	adds	r3, #24
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	bf08      	it	eq
 8003aaa:	f040 0001 	orreq.w	r0, r0, #1
 8003aae:	3318      	adds	r3, #24
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	bf08      	it	eq
 8003ab4:	f040 0001 	orreq.w	r0, r0, #1
 8003ab8:	3318      	adds	r3, #24
 8003aba:	429a      	cmp	r2, r3
 8003abc:	bf08      	it	eq
 8003abe:	f040 0001 	orreq.w	r0, r0, #1
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	f47f ae07 	bne.w	80036d8 <HAL_DMA_IRQHandler+0xc8>
 8003aca:	4814      	ldr	r0, [pc, #80]	; (8003b1c <HAL_DMA_IRQHandler+0x50c>)
 8003acc:	4282      	cmp	r2, r0
 8003ace:	f43f ae03 	beq.w	80036d8 <HAL_DMA_IRQHandler+0xc8>
 8003ad2:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	408b      	lsls	r3, r1
 8003ad8:	422b      	tst	r3, r5
 8003ada:	f040 80bf 	bne.w	8003c5c <HAL_DMA_IRQHandler+0x64c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ade:	f04f 0c10 	mov.w	ip, #16
 8003ae2:	fa0c fc01 	lsl.w	ip, ip, r1
 8003ae6:	ea15 0f0c 	tst.w	r5, ip
 8003aea:	f43f aee8 	beq.w	80038be <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	075b      	lsls	r3, r3, #29
 8003af2:	f53f aecf 	bmi.w	8003894 <HAL_DMA_IRQHandler+0x284>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003af6:	f00e 0e1f 	and.w	lr, lr, #31
 8003afa:	2120      	movs	r1, #32
 8003afc:	fa01 f10e 	lsl.w	r1, r1, lr
 8003b00:	420d      	tst	r5, r1
 8003b02:	f43f af48 	beq.w	8003996 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b06:	4613      	mov	r3, r2
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	0798      	lsls	r0, r3, #30
 8003b0c:	f57f af43 	bpl.w	8003996 <HAL_DMA_IRQHandler+0x386>
 8003b10:	e72e      	b.n	8003970 <HAL_DMA_IRQHandler+0x360>
 8003b12:	bf00      	nop
 8003b14:	40020010 	.word	0x40020010
 8003b18:	40020028 	.word	0x40020028
 8003b1c:	400204b8 	.word	0x400204b8
 8003b20:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b24:	6822      	ldr	r2, [r4, #0]
 8003b26:	6813      	ldr	r3, [r2, #0]
 8003b28:	f023 0316 	bic.w	r3, r3, #22
 8003b2c:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	6953      	ldr	r3, [r2, #20]
 8003b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b36:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d04f      	beq.n	8003bde <HAL_DMA_IRQHandler+0x5ce>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b3e:	6822      	ldr	r2, [r4, #0]
 8003b40:	6813      	ldr	r3, [r2, #0]
 8003b42:	f023 0308 	bic.w	r3, r3, #8
 8003b46:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b48:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003b4a:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8003b4c:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b4e:	f002 021f 	and.w	r2, r2, #31
 8003b52:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 8003b54:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b56:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
 8003b58:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8003b5a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003b5e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f47f af42 	bne.w	80039ec <HAL_DMA_IRQHandler+0x3dc>
}
 8003b68:	b003      	add	sp, #12
 8003b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	fa02 f101 	lsl.w	r1, r2, r1
 8003b72:	420d      	tst	r5, r1
 8003b74:	f47f aef9 	bne.w	800396a <HAL_DMA_IRQHandler+0x35a>
 8003b78:	e70d      	b.n	8003996 <HAL_DMA_IRQHandler+0x386>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b7a:	f04f 0c04 	mov.w	ip, #4
 8003b7e:	fa0c fc01 	lsl.w	ip, ip, r1
 8003b82:	ea15 0f0c 	tst.w	r5, ip
 8003b86:	f43f ae1d 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	0790      	lsls	r0, r2, #30
 8003b8e:	f53f ae0f 	bmi.w	80037b0 <HAL_DMA_IRQHandler+0x1a0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b92:	f04f 0c10 	mov.w	ip, #16
 8003b96:	fa0c fc01 	lsl.w	ip, ip, r1
 8003b9a:	ea15 0f0c 	tst.w	r5, ip
 8003b9e:	f47f ae6a 	bne.w	8003876 <HAL_DMA_IRQHandler+0x266>
 8003ba2:	e68c      	b.n	80038be <HAL_DMA_IRQHandler+0x2ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	0319      	lsls	r1, r3, #12
 8003ba8:	f57f ae82 	bpl.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003bac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f47f ae80 	bne.w	80038b4 <HAL_DMA_IRQHandler+0x2a4>
 8003bb4:	e680      	b.n	80038b8 <HAL_DMA_IRQHandler+0x2a8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003bbc:	f47f aee7 	bne.w	800398e <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003bc0:	6819      	ldr	r1, [r3, #0]
 8003bc2:	f021 0110 	bic.w	r1, r1, #16
 8003bc6:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003bc8:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8003bca:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003bce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8003bd2:	e6dc      	b.n	800398e <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1CpltCallback != NULL)
 8003bd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f47f aedb 	bne.w	8003992 <HAL_DMA_IRQHandler+0x382>
 8003bdc:	e6db      	b.n	8003996 <HAL_DMA_IRQHandler+0x386>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ac      	bne.n	8003b3e <HAL_DMA_IRQHandler+0x52e>
 8003be4:	e7b0      	b.n	8003b48 <HAL_DMA_IRQHandler+0x538>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003be6:	4a9b      	ldr	r2, [pc, #620]	; (8003e54 <HAL_DMA_IRQHandler+0x844>)
 8003be8:	489b      	ldr	r0, [pc, #620]	; (8003e58 <HAL_DMA_IRQHandler+0x848>)
 8003bea:	4283      	cmp	r3, r0
 8003bec:	bf18      	it	ne
 8003bee:	4293      	cmpne	r3, r2
 8003bf0:	f100 0014 	add.w	r0, r0, #20
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2201      	moveq	r2, #1
 8003bf8:	2200      	movne	r2, #0
 8003bfa:	4283      	cmp	r3, r0
 8003bfc:	bf08      	it	eq
 8003bfe:	f042 0201 	orreq.w	r2, r2, #1
 8003c02:	3014      	adds	r0, #20
 8003c04:	4283      	cmp	r3, r0
 8003c06:	bf08      	it	eq
 8003c08:	f042 0201 	orreq.w	r2, r2, #1
 8003c0c:	3014      	adds	r0, #20
 8003c0e:	4283      	cmp	r3, r0
 8003c10:	bf08      	it	eq
 8003c12:	f042 0201 	orreq.w	r2, r2, #1
 8003c16:	3014      	adds	r0, #20
 8003c18:	4283      	cmp	r3, r0
 8003c1a:	bf08      	it	eq
 8003c1c:	f042 0201 	orreq.w	r2, r2, #1
 8003c20:	3014      	adds	r0, #20
 8003c22:	4283      	cmp	r3, r0
 8003c24:	bf08      	it	eq
 8003c26:	f042 0201 	orreq.w	r2, r2, #1
 8003c2a:	b912      	cbnz	r2, 8003c32 <HAL_DMA_IRQHandler+0x622>
 8003c2c:	4a8b      	ldr	r2, [pc, #556]	; (8003e5c <HAL_DMA_IRQHandler+0x84c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d19a      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x558>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c32:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003c34:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c36:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c38:	f000 001f 	and.w	r0, r0, #31
 8003c3c:	4085      	lsls	r5, r0
 8003c3e:	420d      	tst	r5, r1
 8003c40:	d018      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x664>
 8003c42:	0757      	lsls	r7, r2, #29
 8003c44:	d516      	bpl.n	8003c74 <HAL_DMA_IRQHandler+0x664>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c46:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c48:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c4a:	d544      	bpl.n	8003cd6 <HAL_DMA_IRQHandler+0x6c6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c4c:	03d2      	lsls	r2, r2, #15
 8003c4e:	f100 8099 	bmi.w	8003d84 <HAL_DMA_IRQHandler+0x774>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f47f aec9 	bne.w	80039ec <HAL_DMA_IRQHandler+0x3dc>
 8003c5a:	e785      	b.n	8003b68 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c5c:	f00e 011f 	and.w	r1, lr, #31
 8003c60:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c64:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c66:	fa0c fc01 	lsl.w	ip, ip, r1
 8003c6a:	ea15 0f0c 	tst.w	r5, ip
 8003c6e:	f47f af3e 	bne.w	8003aee <HAL_DMA_IRQHandler+0x4de>
 8003c72:	e624      	b.n	80038be <HAL_DMA_IRQHandler+0x2ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c74:	2502      	movs	r5, #2
 8003c76:	4085      	lsls	r5, r0
 8003c78:	420d      	tst	r5, r1
 8003c7a:	d00d      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x688>
 8003c7c:	0797      	lsls	r7, r2, #30
 8003c7e:	d50b      	bpl.n	8003c98 <HAL_DMA_IRQHandler+0x688>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c80:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c82:	0416      	lsls	r6, r2, #16
 8003c84:	f140 8083 	bpl.w	8003d8e <HAL_DMA_IRQHandler+0x77e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c88:	03d5      	lsls	r5, r2, #15
 8003c8a:	f100 80dd 	bmi.w	8003e48 <HAL_DMA_IRQHandler+0x838>
          if(hdma->XferM1CpltCallback != NULL)
 8003c8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f aeab 	bne.w	80039ec <HAL_DMA_IRQHandler+0x3dc>
 8003c96:	e767      	b.n	8003b68 <HAL_DMA_IRQHandler+0x558>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c98:	2508      	movs	r5, #8
 8003c9a:	fa05 f000 	lsl.w	r0, r5, r0
 8003c9e:	4208      	tst	r0, r1
 8003ca0:	f43f af62 	beq.w	8003b68 <HAL_DMA_IRQHandler+0x558>
 8003ca4:	0711      	lsls	r1, r2, #28
 8003ca6:	f57f af5f 	bpl.w	8003b68 <HAL_DMA_IRQHandler+0x558>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003caa:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cac:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cae:	f021 010e 	bic.w	r1, r1, #14
 8003cb2:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8003cb4:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
 8003cc2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cc4:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8003cc6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003cca:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f47f ae8c 	bne.w	80039ec <HAL_DMA_IRQHandler+0x3dc>
 8003cd4:	e748      	b.n	8003b68 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cd6:	0693      	lsls	r3, r2, #26
 8003cd8:	d454      	bmi.n	8003d84 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	4b60      	ldr	r3, [pc, #384]	; (8003e60 <HAL_DMA_IRQHandler+0x850>)
 8003cde:	4861      	ldr	r0, [pc, #388]	; (8003e64 <HAL_DMA_IRQHandler+0x854>)
 8003ce0:	4961      	ldr	r1, [pc, #388]	; (8003e68 <HAL_DMA_IRQHandler+0x858>)
 8003ce2:	4282      	cmp	r2, r0
 8003ce4:	bf18      	it	ne
 8003ce6:	429a      	cmpne	r2, r3
 8003ce8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	428a      	cmp	r2, r1
 8003cf4:	bf08      	it	eq
 8003cf6:	f043 0301 	orreq.w	r3, r3, #1
 8003cfa:	3130      	adds	r1, #48	; 0x30
 8003cfc:	4282      	cmp	r2, r0
 8003cfe:	bf08      	it	eq
 8003d00:	f043 0301 	orreq.w	r3, r3, #1
 8003d04:	3030      	adds	r0, #48	; 0x30
 8003d06:	428a      	cmp	r2, r1
 8003d08:	bf08      	it	eq
 8003d0a:	f043 0301 	orreq.w	r3, r3, #1
 8003d0e:	3130      	adds	r1, #48	; 0x30
 8003d10:	4282      	cmp	r2, r0
 8003d12:	bf08      	it	eq
 8003d14:	f043 0301 	orreq.w	r3, r3, #1
 8003d18:	3030      	adds	r0, #48	; 0x30
 8003d1a:	428a      	cmp	r2, r1
 8003d1c:	bf08      	it	eq
 8003d1e:	f043 0301 	orreq.w	r3, r3, #1
 8003d22:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003d26:	4282      	cmp	r2, r0
 8003d28:	bf08      	it	eq
 8003d2a:	f043 0301 	orreq.w	r3, r3, #1
 8003d2e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003d32:	428a      	cmp	r2, r1
 8003d34:	bf08      	it	eq
 8003d36:	f043 0301 	orreq.w	r3, r3, #1
 8003d3a:	3130      	adds	r1, #48	; 0x30
 8003d3c:	4282      	cmp	r2, r0
 8003d3e:	bf08      	it	eq
 8003d40:	f043 0301 	orreq.w	r3, r3, #1
 8003d44:	3030      	adds	r0, #48	; 0x30
 8003d46:	428a      	cmp	r2, r1
 8003d48:	bf08      	it	eq
 8003d4a:	f043 0301 	orreq.w	r3, r3, #1
 8003d4e:	3130      	adds	r1, #48	; 0x30
 8003d50:	4282      	cmp	r2, r0
 8003d52:	bf08      	it	eq
 8003d54:	f043 0301 	orreq.w	r3, r3, #1
 8003d58:	3030      	adds	r0, #48	; 0x30
 8003d5a:	428a      	cmp	r2, r1
 8003d5c:	bf08      	it	eq
 8003d5e:	f043 0301 	orreq.w	r3, r3, #1
 8003d62:	3130      	adds	r1, #48	; 0x30
 8003d64:	4282      	cmp	r2, r0
 8003d66:	bf08      	it	eq
 8003d68:	f043 0301 	orreq.w	r3, r3, #1
 8003d6c:	428a      	cmp	r2, r1
 8003d6e:	bf08      	it	eq
 8003d70:	f043 0301 	orreq.w	r3, r3, #1
 8003d74:	b913      	cbnz	r3, 8003d7c <HAL_DMA_IRQHandler+0x76c>
 8003d76:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <HAL_DMA_IRQHandler+0x85c>)
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d179      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x860>
 8003d7c:	6813      	ldr	r3, [r2, #0]
 8003d7e:	f023 0308 	bic.w	r3, r3, #8
 8003d82:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003d84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f47f ae30 	bne.w	80039ec <HAL_DMA_IRQHandler+0x3dc>
 8003d8c:	e6ec      	b.n	8003b68 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d8e:	0690      	lsls	r0, r2, #26
 8003d90:	d45a      	bmi.n	8003e48 <HAL_DMA_IRQHandler+0x838>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	4b32      	ldr	r3, [pc, #200]	; (8003e60 <HAL_DMA_IRQHandler+0x850>)
 8003d96:	4833      	ldr	r0, [pc, #204]	; (8003e64 <HAL_DMA_IRQHandler+0x854>)
 8003d98:	4933      	ldr	r1, [pc, #204]	; (8003e68 <HAL_DMA_IRQHandler+0x858>)
 8003d9a:	4282      	cmp	r2, r0
 8003d9c:	bf18      	it	ne
 8003d9e:	429a      	cmpne	r2, r3
 8003da0:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	428a      	cmp	r2, r1
 8003dac:	bf08      	it	eq
 8003dae:	f043 0301 	orreq.w	r3, r3, #1
 8003db2:	3130      	adds	r1, #48	; 0x30
 8003db4:	4282      	cmp	r2, r0
 8003db6:	bf08      	it	eq
 8003db8:	f043 0301 	orreq.w	r3, r3, #1
 8003dbc:	3030      	adds	r0, #48	; 0x30
 8003dbe:	428a      	cmp	r2, r1
 8003dc0:	bf08      	it	eq
 8003dc2:	f043 0301 	orreq.w	r3, r3, #1
 8003dc6:	3130      	adds	r1, #48	; 0x30
 8003dc8:	4282      	cmp	r2, r0
 8003dca:	bf08      	it	eq
 8003dcc:	f043 0301 	orreq.w	r3, r3, #1
 8003dd0:	3030      	adds	r0, #48	; 0x30
 8003dd2:	428a      	cmp	r2, r1
 8003dd4:	bf08      	it	eq
 8003dd6:	f043 0301 	orreq.w	r3, r3, #1
 8003dda:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003dde:	4282      	cmp	r2, r0
 8003de0:	bf08      	it	eq
 8003de2:	f043 0301 	orreq.w	r3, r3, #1
 8003de6:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003dea:	428a      	cmp	r2, r1
 8003dec:	bf08      	it	eq
 8003dee:	f043 0301 	orreq.w	r3, r3, #1
 8003df2:	3130      	adds	r1, #48	; 0x30
 8003df4:	4282      	cmp	r2, r0
 8003df6:	bf08      	it	eq
 8003df8:	f043 0301 	orreq.w	r3, r3, #1
 8003dfc:	3030      	adds	r0, #48	; 0x30
 8003dfe:	428a      	cmp	r2, r1
 8003e00:	bf08      	it	eq
 8003e02:	f043 0301 	orreq.w	r3, r3, #1
 8003e06:	3130      	adds	r1, #48	; 0x30
 8003e08:	4282      	cmp	r2, r0
 8003e0a:	bf08      	it	eq
 8003e0c:	f043 0301 	orreq.w	r3, r3, #1
 8003e10:	3030      	adds	r0, #48	; 0x30
 8003e12:	428a      	cmp	r2, r1
 8003e14:	bf08      	it	eq
 8003e16:	f043 0301 	orreq.w	r3, r3, #1
 8003e1a:	3130      	adds	r1, #48	; 0x30
 8003e1c:	4282      	cmp	r2, r0
 8003e1e:	bf08      	it	eq
 8003e20:	f043 0301 	orreq.w	r3, r3, #1
 8003e24:	428a      	cmp	r2, r1
 8003e26:	bf08      	it	eq
 8003e28:	f043 0301 	orreq.w	r3, r3, #1
 8003e2c:	b913      	cbnz	r3, 8003e34 <HAL_DMA_IRQHandler+0x824>
 8003e2e:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <HAL_DMA_IRQHandler+0x85c>)
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d122      	bne.n	8003e7a <HAL_DMA_IRQHandler+0x86a>
 8003e34:	6813      	ldr	r3, [r2, #0]
 8003e36:	f023 0314 	bic.w	r3, r3, #20
 8003e3a:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003e3c:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8003e3e:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 8003e40:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003e44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8003e48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f47f adce 	bne.w	80039ec <HAL_DMA_IRQHandler+0x3dc>
 8003e50:	e68a      	b.n	8003b68 <HAL_DMA_IRQHandler+0x558>
 8003e52:	bf00      	nop
 8003e54:	58025408 	.word	0x58025408
 8003e58:	5802541c 	.word	0x5802541c
 8003e5c:	58025494 	.word	0x58025494
 8003e60:	40020010 	.word	0x40020010
 8003e64:	40020028 	.word	0x40020028
 8003e68:	40020040 	.word	0x40020040
 8003e6c:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e70:	6813      	ldr	r3, [r2, #0]
 8003e72:	f023 0304 	bic.w	r3, r3, #4
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	e784      	b.n	8003d84 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e7a:	6813      	ldr	r3, [r2, #0]
 8003e7c:	f023 030a 	bic.w	r3, r3, #10
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e7db      	b.n	8003e3c <HAL_DMA_IRQHandler+0x82c>

08003e84 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8003e84:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8003e86:	4770      	bx	lr

08003e88 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e88:	680b      	ldr	r3, [r1, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8113 	beq.w	80040b6 <HAL_GPIO_Init+0x22e>
 8003e90:	f04f 0c00 	mov.w	ip, #0
{
 8003e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8003e98:	4662      	mov	r2, ip
{
 8003e9a:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9c:	4d8d      	ldr	r5, [pc, #564]	; (80040d4 <HAL_GPIO_Init+0x24c>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e9e:	4f8e      	ldr	r7, [pc, #568]	; (80040d8 <HAL_GPIO_Init+0x250>)
 8003ea0:	f8df 824c 	ldr.w	r8, [pc, #588]	; 80040f0 <HAL_GPIO_Init+0x268>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ea4:	f04f 0901 	mov.w	r9, #1
 8003ea8:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8003eac:	ea19 0e03 	ands.w	lr, r9, r3
 8003eb0:	f000 80bb 	beq.w	800402a <HAL_GPIO_Init+0x1a2>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eb4:	684b      	ldr	r3, [r1, #4]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	1e5c      	subs	r4, r3, #1
 8003ebc:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ebe:	f04f 0403 	mov.w	r4, #3
 8003ec2:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ec6:	f240 80ba 	bls.w	800403e <HAL_GPIO_Init+0x1b6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eca:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d026      	beq.n	8003f1e <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 8003ed0:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ed2:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed6:	688b      	ldr	r3, [r1, #8]
 8003ed8:	fa03 f30c 	lsl.w	r3, r3, ip
 8003edc:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8003ee0:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee2:	684b      	ldr	r3, [r1, #4]
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d118      	bne.n	8003f1e <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
 8003eec:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ef0:	f002 0b07 	and.w	fp, r2, #7
 8003ef4:	230f      	movs	r3, #15
 8003ef6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8003efa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8003efe:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f02:	fa03 f30b 	lsl.w	r3, r3, fp
 8003f06:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f0a:	690b      	ldr	r3, [r1, #16]
 8003f0c:	fa03 f30b 	lsl.w	r3, r3, fp
 8003f10:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003f14:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f18:	684b      	ldr	r3, [r1, #4]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 8003f1e:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f22:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f26:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f2a:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8003f2c:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f2e:	684b      	ldr	r3, [r1, #4]
 8003f30:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003f34:	d078      	beq.n	8004028 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f36:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8003f3a:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f3e:	f002 0903 	and.w	r9, r2, #3
 8003f42:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f46:	f043 0302 	orr.w	r3, r3, #2
 8003f4a:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f4e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f52:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f54:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8003f58:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f5c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f60:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003f6c:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f6e:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f72:	d025      	beq.n	8003fc0 <HAL_GPIO_Init+0x138>
 8003f74:	4540      	cmp	r0, r8
 8003f76:	f000 8082 	beq.w	800407e <HAL_GPIO_Init+0x1f6>
 8003f7a:	4e58      	ldr	r6, [pc, #352]	; (80040dc <HAL_GPIO_Init+0x254>)
 8003f7c:	42b0      	cmp	r0, r6
 8003f7e:	f000 8085 	beq.w	800408c <HAL_GPIO_Init+0x204>
 8003f82:	4e57      	ldr	r6, [pc, #348]	; (80040e0 <HAL_GPIO_Init+0x258>)
 8003f84:	42b0      	cmp	r0, r6
 8003f86:	d073      	beq.n	8004070 <HAL_GPIO_Init+0x1e8>
 8003f88:	4e56      	ldr	r6, [pc, #344]	; (80040e4 <HAL_GPIO_Init+0x25c>)
 8003f8a:	42b0      	cmp	r0, r6
 8003f8c:	f000 808c 	beq.w	80040a8 <HAL_GPIO_Init+0x220>
 8003f90:	4e55      	ldr	r6, [pc, #340]	; (80040e8 <HAL_GPIO_Init+0x260>)
 8003f92:	42b0      	cmp	r0, r6
 8003f94:	f000 8090 	beq.w	80040b8 <HAL_GPIO_Init+0x230>
 8003f98:	4e54      	ldr	r6, [pc, #336]	; (80040ec <HAL_GPIO_Init+0x264>)
 8003f9a:	42b0      	cmp	r0, r6
 8003f9c:	d07d      	beq.n	800409a <HAL_GPIO_Init+0x212>
 8003f9e:	f8df a154 	ldr.w	sl, [pc, #340]	; 80040f4 <HAL_GPIO_Init+0x26c>
 8003fa2:	4550      	cmp	r0, sl
 8003fa4:	f000 808f 	beq.w	80040c6 <HAL_GPIO_Init+0x23e>
 8003fa8:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80040f8 <HAL_GPIO_Init+0x270>
 8003fac:	4550      	cmp	r0, sl
 8003fae:	bf0c      	ite	eq
 8003fb0:	f04f 0a09 	moveq.w	sl, #9
 8003fb4:	f04f 0a0a 	movne.w	sl, #10
 8003fb8:	fa0a f909 	lsl.w	r9, sl, r9
 8003fbc:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fc0:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fc6:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 8003fc8:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 8003fcc:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003fce:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fd2:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 8003fd4:	bf54      	ite	pl
 8003fd6:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8003fd8:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 8003fdc:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fe0:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 8003fe2:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003fe6:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fea:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 8003fec:	bf54      	ite	pl
 8003fee:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8003ff0:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 8003ff4:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ff8:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003ffa:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ffe:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004002:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8004004:	bf54      	ite	pl
 8004006:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8004008:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 800400c:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004010:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8004012:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004016:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8004018:	bf54      	ite	pl
 800401a:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 800401c:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004020:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8004024:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004028:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 800402a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800402c:	f10c 0c02 	add.w	ip, ip, #2
 8004030:	fa33 f402 	lsrs.w	r4, r3, r2
 8004034:	f47f af36 	bne.w	8003ea4 <HAL_GPIO_Init+0x1c>
  }
}
 8004038:	b003      	add	sp, #12
 800403a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800403e:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004040:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004044:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004046:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004048:	fa03 f30c 	lsl.w	r3, r3, ip
 800404c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8004050:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004052:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8004054:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004058:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800405c:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004060:	4093      	lsls	r3, r2
 8004062:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 8004066:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004068:	684b      	ldr	r3, [r1, #4]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	e72d      	b.n	8003ecc <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004070:	f04f 0a03 	mov.w	sl, #3
 8004074:	fa0a f909 	lsl.w	r9, sl, r9
 8004078:	ea43 0309 	orr.w	r3, r3, r9
 800407c:	e7a0      	b.n	8003fc0 <HAL_GPIO_Init+0x138>
 800407e:	f04f 0a01 	mov.w	sl, #1
 8004082:	fa0a f909 	lsl.w	r9, sl, r9
 8004086:	ea43 0309 	orr.w	r3, r3, r9
 800408a:	e799      	b.n	8003fc0 <HAL_GPIO_Init+0x138>
 800408c:	f04f 0a02 	mov.w	sl, #2
 8004090:	fa0a f909 	lsl.w	r9, sl, r9
 8004094:	ea43 0309 	orr.w	r3, r3, r9
 8004098:	e792      	b.n	8003fc0 <HAL_GPIO_Init+0x138>
 800409a:	f04f 0a06 	mov.w	sl, #6
 800409e:	fa0a f909 	lsl.w	r9, sl, r9
 80040a2:	ea43 0309 	orr.w	r3, r3, r9
 80040a6:	e78b      	b.n	8003fc0 <HAL_GPIO_Init+0x138>
 80040a8:	f04f 0a04 	mov.w	sl, #4
 80040ac:	fa0a f909 	lsl.w	r9, sl, r9
 80040b0:	ea43 0309 	orr.w	r3, r3, r9
 80040b4:	e784      	b.n	8003fc0 <HAL_GPIO_Init+0x138>
 80040b6:	4770      	bx	lr
 80040b8:	f04f 0a05 	mov.w	sl, #5
 80040bc:	fa0a f909 	lsl.w	r9, sl, r9
 80040c0:	ea43 0309 	orr.w	r3, r3, r9
 80040c4:	e77c      	b.n	8003fc0 <HAL_GPIO_Init+0x138>
 80040c6:	f04f 0a07 	mov.w	sl, #7
 80040ca:	fa0a f909 	lsl.w	r9, sl, r9
 80040ce:	ea43 0309 	orr.w	r3, r3, r9
 80040d2:	e775      	b.n	8003fc0 <HAL_GPIO_Init+0x138>
 80040d4:	58024400 	.word	0x58024400
 80040d8:	58020000 	.word	0x58020000
 80040dc:	58020800 	.word	0x58020800
 80040e0:	58020c00 	.word	0x58020c00
 80040e4:	58021000 	.word	0x58021000
 80040e8:	58021400 	.word	0x58021400
 80040ec:	58021800 	.word	0x58021800
 80040f0:	58020400 	.word	0x58020400
 80040f4:	58021c00 	.word	0x58021c00
 80040f8:	58022400 	.word	0x58022400

080040fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040fc:	b902      	cbnz	r2, 8004100 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040fe:	0409      	lsls	r1, r1, #16
 8004100:	6181      	str	r1, [r0, #24]
  }
}
 8004102:	4770      	bx	lr

08004104 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004104:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004106:	4c10      	ldr	r4, [pc, #64]	; (8004148 <HAL_PWREx_ConfigSupply+0x44>)
 8004108:	68e3      	ldr	r3, [r4, #12]
 800410a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800410e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004110:	d105      	bne.n	800411e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004112:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004116:	1a18      	subs	r0, r3, r0
 8004118:	bf18      	it	ne
 800411a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800411c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800411e:	f023 0307 	bic.w	r3, r3, #7
 8004122:	4303      	orrs	r3, r0
 8004124:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8004126:	f7fd fa2f 	bl	8001588 <HAL_GetTick>
 800412a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800412c:	e005      	b.n	800413a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800412e:	f7fd fa2b 	bl	8001588 <HAL_GetTick>
 8004132:	1b40      	subs	r0, r0, r5
 8004134:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004138:	d804      	bhi.n	8004144 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800413a:	6863      	ldr	r3, [r4, #4]
 800413c:	049b      	lsls	r3, r3, #18
 800413e:	d5f6      	bpl.n	800412e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8004140:	2000      	movs	r0, #0
}
 8004142:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004144:	2001      	movs	r0, #1
}
 8004146:	bd38      	pop	{r3, r4, r5, pc}
 8004148:	58024800 	.word	0x58024800

0800414c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800414c:	4b3c      	ldr	r3, [pc, #240]	; (8004240 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800414e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004152:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004154:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8004156:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800415a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800415c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004160:	d038      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004162:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004166:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800416a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800416e:	fb05 f101 	mul.w	r1, r5, r1
 8004172:	2a01      	cmp	r2, #1
 8004174:	ee07 1a90 	vmov	s15, r1
 8004178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800417c:	d002      	beq.n	8004184 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800417e:	2a02      	cmp	r2, #2
 8004180:	d050      	beq.n	8004224 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 8004182:	b34a      	cbz	r2, 80041d8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004184:	ee07 0a90 	vmov	s15, r0
 8004188:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8004244 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800418c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004196:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8004248 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 800419a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80041a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041aa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80041ae:	eee7 7a06 	vfma.f32	s15, s14, s12
 80041b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80041b6:	4b22      	ldr	r3, [pc, #136]	; (8004240 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80041be:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041c0:	ee07 3a90 	vmov	s15, r3
 80041c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80041d4:	bc30      	pop	{r4, r5}
 80041d6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	0692      	lsls	r2, r2, #26
 80041dc:	d529      	bpl.n	8004232 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041de:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041e0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041e4:	4a19      	ldr	r2, [pc, #100]	; (800424c <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041ec:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8004248 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 80041f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041fc:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041fe:	ee06 3a10 	vmov	s12, r3
 8004202:	ee05 2a90 	vmov	s11, r2
 8004206:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800420a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800420e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004212:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004216:	eef0 7a46 	vmov.f32	s15, s12
 800421a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800421e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004222:	e7c8      	b.n	80041b6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004224:	ee07 0a90 	vmov	s15, r0
 8004228:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004250 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800422c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004230:	e7ae      	b.n	8004190 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004232:	ee07 0a90 	vmov	s15, r0
 8004236:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004254 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 800423a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800423e:	e7a7      	b.n	8004190 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8004240:	58024400 	.word	0x58024400
 8004244:	4a742400 	.word	0x4a742400
 8004248:	39000000 	.word	0x39000000
 800424c:	03d09000 	.word	0x03d09000
 8004250:	4bbebc20 	.word	0x4bbebc20
 8004254:	4c742400 	.word	0x4c742400

08004258 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004258:	2800      	cmp	r0, #0
 800425a:	f000 81c4 	beq.w	80045e6 <HAL_RCC_OscConfig+0x38e>
{
 800425e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004260:	6803      	ldr	r3, [r0, #0]
 8004262:	4604      	mov	r4, r0
 8004264:	07d9      	lsls	r1, r3, #31
 8004266:	d52e      	bpl.n	80042c6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004268:	4993      	ldr	r1, [pc, #588]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
 800426a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800426c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800426e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004272:	2a10      	cmp	r2, #16
 8004274:	f000 80f0 	beq.w	8004458 <HAL_RCC_OscConfig+0x200>
 8004278:	2a18      	cmp	r2, #24
 800427a:	f000 80e8 	beq.w	800444e <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004284:	f000 8109 	beq.w	800449a <HAL_RCC_OscConfig+0x242>
 8004288:	2b00      	cmp	r3, #0
 800428a:	f040 8166 	bne.w	800455a <HAL_RCC_OscConfig+0x302>
 800428e:	4b8a      	ldr	r3, [pc, #552]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800429e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042a0:	6863      	ldr	r3, [r4, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 813a 	beq.w	800451c <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 80042a8:	f7fd f96e 	bl	8001588 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042ac:	4e82      	ldr	r6, [pc, #520]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80042ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042b0:	e005      	b.n	80042be <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b2:	f7fd f969 	bl	8001588 <HAL_GetTick>
 80042b6:	1b40      	subs	r0, r0, r5
 80042b8:	2864      	cmp	r0, #100	; 0x64
 80042ba:	f200 812d 	bhi.w	8004518 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042be:	6833      	ldr	r3, [r6, #0]
 80042c0:	039b      	lsls	r3, r3, #14
 80042c2:	d5f6      	bpl.n	80042b2 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	079d      	lsls	r5, r3, #30
 80042c8:	d47e      	bmi.n	80043c8 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042ca:	06d9      	lsls	r1, r3, #27
 80042cc:	d528      	bpl.n	8004320 <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ce:	4a7a      	ldr	r2, [pc, #488]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
 80042d0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042d8:	2b08      	cmp	r3, #8
 80042da:	f000 80cd 	beq.w	8004478 <HAL_RCC_OscConfig+0x220>
 80042de:	2b18      	cmp	r3, #24
 80042e0:	f000 80c5 	beq.w	800446e <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80042e4:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80042e6:	4d74      	ldr	r5, [pc, #464]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8155 	beq.w	8004598 <HAL_RCC_OscConfig+0x340>
        __HAL_RCC_CSI_ENABLE();
 80042ee:	682b      	ldr	r3, [r5, #0]
 80042f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80042f6:	f7fd f947 	bl	8001588 <HAL_GetTick>
 80042fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042fc:	e005      	b.n	800430a <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042fe:	f7fd f943 	bl	8001588 <HAL_GetTick>
 8004302:	1b80      	subs	r0, r0, r6
 8004304:	2802      	cmp	r0, #2
 8004306:	f200 8107 	bhi.w	8004518 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800430a:	682b      	ldr	r3, [r5, #0]
 800430c:	05db      	lsls	r3, r3, #23
 800430e:	d5f6      	bpl.n	80042fe <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004310:	68eb      	ldr	r3, [r5, #12]
 8004312:	6a22      	ldr	r2, [r4, #32]
 8004314:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004318:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800431c:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	071d      	lsls	r5, r3, #28
 8004322:	d516      	bpl.n	8004352 <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004324:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004326:	4d64      	ldr	r5, [pc, #400]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8105 	beq.w	8004538 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_LSI_ENABLE();
 800432e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004336:	f7fd f927 	bl	8001588 <HAL_GetTick>
 800433a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800433c:	e005      	b.n	800434a <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800433e:	f7fd f923 	bl	8001588 <HAL_GetTick>
 8004342:	1b80      	subs	r0, r0, r6
 8004344:	2802      	cmp	r0, #2
 8004346:	f200 80e7 	bhi.w	8004518 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800434a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800434c:	0798      	lsls	r0, r3, #30
 800434e:	d5f6      	bpl.n	800433e <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	069a      	lsls	r2, r3, #26
 8004354:	d516      	bpl.n	8004384 <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004356:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8004358:	4d57      	ldr	r5, [pc, #348]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 810b 	beq.w	8004576 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSI48_ENABLE();
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004366:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004368:	f7fd f90e 	bl	8001588 <HAL_GetTick>
 800436c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800436e:	e005      	b.n	800437c <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004370:	f7fd f90a 	bl	8001588 <HAL_GetTick>
 8004374:	1b80      	subs	r0, r0, r6
 8004376:	2802      	cmp	r0, #2
 8004378:	f200 80ce 	bhi.w	8004518 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	049f      	lsls	r7, r3, #18
 8004380:	d5f6      	bpl.n	8004370 <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	0759      	lsls	r1, r3, #29
 8004386:	f100 808e 	bmi.w	80044a6 <HAL_RCC_OscConfig+0x24e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800438c:	b1d0      	cbz	r0, 80043c4 <HAL_RCC_OscConfig+0x16c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800438e:	4d4a      	ldr	r5, [pc, #296]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
 8004390:	692b      	ldr	r3, [r5, #16]
 8004392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004396:	2b18      	cmp	r3, #24
 8004398:	f000 818c 	beq.w	80046b4 <HAL_RCC_OscConfig+0x45c>
        __HAL_RCC_PLL_DISABLE();
 800439c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800439e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80043a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a6:	f000 8120 	beq.w	80045ea <HAL_RCC_OscConfig+0x392>
        tickstart = HAL_GetTick();
 80043aa:	f7fd f8ed 	bl	8001588 <HAL_GetTick>
 80043ae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043b0:	e005      	b.n	80043be <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fd f8e9 	bl	8001588 <HAL_GetTick>
 80043b6:	1b00      	subs	r0, r0, r4
 80043b8:	2802      	cmp	r0, #2
 80043ba:	f200 80ad 	bhi.w	8004518 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	019b      	lsls	r3, r3, #6
 80043c2:	d4f6      	bmi.n	80043b2 <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 80043c4:	2000      	movs	r0, #0
}
 80043c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c8:	4a3b      	ldr	r2, [pc, #236]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
 80043ca:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043ce:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80043d2:	d122      	bne.n	800441a <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d4:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
 80043d6:	68e2      	ldr	r2, [r4, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	0759      	lsls	r1, r3, #29
 80043dc:	d501      	bpl.n	80043e2 <HAL_RCC_OscConfig+0x18a>
 80043de:	2a00      	cmp	r2, #0
 80043e0:	d043      	beq.n	800446a <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043e2:	4d35      	ldr	r5, [pc, #212]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
 80043e4:	682b      	ldr	r3, [r5, #0]
 80043e6:	f023 0319 	bic.w	r3, r3, #25
 80043ea:	4313      	orrs	r3, r2
 80043ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043ee:	f7fd f8cb 	bl	8001588 <HAL_GetTick>
 80043f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043f4:	e005      	b.n	8004402 <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f6:	f7fd f8c7 	bl	8001588 <HAL_GetTick>
 80043fa:	1b80      	subs	r0, r0, r6
 80043fc:	2802      	cmp	r0, #2
 80043fe:	f200 808b 	bhi.w	8004518 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004402:	682b      	ldr	r3, [r5, #0]
 8004404:	075b      	lsls	r3, r3, #29
 8004406:	d5f6      	bpl.n	80043f6 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004408:	686b      	ldr	r3, [r5, #4]
 800440a:	6922      	ldr	r2, [r4, #16]
 800440c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004410:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004414:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	e757      	b.n	80042ca <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800441a:	2b18      	cmp	r3, #24
 800441c:	f000 80df 	beq.w	80045de <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004420:	4d25      	ldr	r5, [pc, #148]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004422:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004424:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004426:	2a00      	cmp	r2, #0
 8004428:	f000 80c8 	beq.w	80045bc <HAL_RCC_OscConfig+0x364>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800442c:	f023 0319 	bic.w	r3, r3, #25
 8004430:	4313      	orrs	r3, r2
 8004432:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004434:	f7fd f8a8 	bl	8001588 <HAL_GetTick>
 8004438:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800443a:	e004      	b.n	8004446 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443c:	f7fd f8a4 	bl	8001588 <HAL_GetTick>
 8004440:	1b80      	subs	r0, r0, r6
 8004442:	2802      	cmp	r0, #2
 8004444:	d868      	bhi.n	8004518 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004446:	682b      	ldr	r3, [r5, #0]
 8004448:	075f      	lsls	r7, r3, #29
 800444a:	d5f7      	bpl.n	800443c <HAL_RCC_OscConfig+0x1e4>
 800444c:	e7dc      	b.n	8004408 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800444e:	f001 0103 	and.w	r1, r1, #3
 8004452:	2902      	cmp	r1, #2
 8004454:	f47f af13 	bne.w	800427e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	0392      	lsls	r2, r2, #14
 800445e:	f57f af32 	bpl.w	80042c6 <HAL_RCC_OscConfig+0x6e>
 8004462:	6862      	ldr	r2, [r4, #4]
 8004464:	2a00      	cmp	r2, #0
 8004466:	f47f af2e 	bne.w	80042c6 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800446a:	2001      	movs	r0, #1
}
 800446c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800446e:	f002 0203 	and.w	r2, r2, #3
 8004472:	2a01      	cmp	r2, #1
 8004474:	f47f af36 	bne.w	80042e4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004478:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	05da      	lsls	r2, r3, #23
 800447e:	d502      	bpl.n	8004486 <HAL_RCC_OscConfig+0x22e>
 8004480:	69e3      	ldr	r3, [r4, #28]
 8004482:	2b80      	cmp	r3, #128	; 0x80
 8004484:	d1f1      	bne.n	800446a <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004486:	4a0c      	ldr	r2, [pc, #48]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
 8004488:	6a21      	ldr	r1, [r4, #32]
 800448a:	68d3      	ldr	r3, [r2, #12]
 800448c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004490:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004494:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004496:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004498:	e742      	b.n	8004320 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449a:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <HAL_RCC_OscConfig+0x260>)
 800449c:	6813      	ldr	r3, [r2, #0]
 800449e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	e6fc      	b.n	80042a0 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 80044a6:	4d05      	ldr	r5, [pc, #20]	; (80044bc <HAL_RCC_OscConfig+0x264>)
 80044a8:	682b      	ldr	r3, [r5, #0]
 80044aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ae:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80044b0:	f7fd f86a 	bl	8001588 <HAL_GetTick>
 80044b4:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x272>
 80044b8:	58024400 	.word	0x58024400
 80044bc:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fd f862 	bl	8001588 <HAL_GetTick>
 80044c4:	1b80      	subs	r0, r0, r6
 80044c6:	2864      	cmp	r0, #100	; 0x64
 80044c8:	d826      	bhi.n	8004518 <HAL_RCC_OscConfig+0x2c0>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ca:	682b      	ldr	r3, [r5, #0]
 80044cc:	05da      	lsls	r2, r3, #23
 80044ce:	d5f7      	bpl.n	80044c0 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d0:	68a3      	ldr	r3, [r4, #8]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	f000 814d 	beq.w	8004772 <HAL_RCC_OscConfig+0x51a>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f040 8157 	bne.w	800478c <HAL_RCC_OscConfig+0x534>
 80044de:	4ba8      	ldr	r3, [pc, #672]	; (8004780 <HAL_RCC_OscConfig+0x528>)
 80044e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	671a      	str	r2, [r3, #112]	; 0x70
 80044e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044ea:	f022 0204 	bic.w	r2, r2, #4
 80044ee:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f0:	68a3      	ldr	r3, [r4, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 812c 	beq.w	8004750 <HAL_RCC_OscConfig+0x4f8>
      tickstart = HAL_GetTick();
 80044f8:	f7fd f846 	bl	8001588 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044fc:	4ea0      	ldr	r6, [pc, #640]	; (8004780 <HAL_RCC_OscConfig+0x528>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fe:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004502:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004504:	e004      	b.n	8004510 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004506:	f7fd f83f 	bl	8001588 <HAL_GetTick>
 800450a:	1b40      	subs	r0, r0, r5
 800450c:	42b8      	cmp	r0, r7
 800450e:	d803      	bhi.n	8004518 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004510:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004512:	079b      	lsls	r3, r3, #30
 8004514:	d5f7      	bpl.n	8004506 <HAL_RCC_OscConfig+0x2ae>
 8004516:	e738      	b.n	800438a <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 8004518:	2003      	movs	r0, #3
}
 800451a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 800451c:	f7fd f834 	bl	8001588 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004520:	4e97      	ldr	r6, [pc, #604]	; (8004780 <HAL_RCC_OscConfig+0x528>)
        tickstart = HAL_GetTick();
 8004522:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004524:	e004      	b.n	8004530 <HAL_RCC_OscConfig+0x2d8>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004526:	f7fd f82f 	bl	8001588 <HAL_GetTick>
 800452a:	1b40      	subs	r0, r0, r5
 800452c:	2864      	cmp	r0, #100	; 0x64
 800452e:	d8f3      	bhi.n	8004518 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004530:	6833      	ldr	r3, [r6, #0]
 8004532:	039f      	lsls	r7, r3, #14
 8004534:	d4f7      	bmi.n	8004526 <HAL_RCC_OscConfig+0x2ce>
 8004536:	e6c5      	b.n	80042c4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004538:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004540:	f7fd f822 	bl	8001588 <HAL_GetTick>
 8004544:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004546:	e004      	b.n	8004552 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004548:	f7fd f81e 	bl	8001588 <HAL_GetTick>
 800454c:	1b80      	subs	r0, r0, r6
 800454e:	2802      	cmp	r0, #2
 8004550:	d8e2      	bhi.n	8004518 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004552:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004554:	0799      	lsls	r1, r3, #30
 8004556:	d4f7      	bmi.n	8004548 <HAL_RCC_OscConfig+0x2f0>
 8004558:	e6fa      	b.n	8004350 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800455a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800455e:	4b88      	ldr	r3, [pc, #544]	; (8004780 <HAL_RCC_OscConfig+0x528>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	f47f ae96 	bne.w	8004292 <HAL_RCC_OscConfig+0x3a>
 8004566:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e694      	b.n	80042a0 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 8004576:	682b      	ldr	r3, [r5, #0]
 8004578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800457c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800457e:	f7fd f803 	bl	8001588 <HAL_GetTick>
 8004582:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004584:	e004      	b.n	8004590 <HAL_RCC_OscConfig+0x338>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004586:	f7fc ffff 	bl	8001588 <HAL_GetTick>
 800458a:	1b80      	subs	r0, r0, r6
 800458c:	2802      	cmp	r0, #2
 800458e:	d8c3      	bhi.n	8004518 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	0498      	lsls	r0, r3, #18
 8004594:	d4f7      	bmi.n	8004586 <HAL_RCC_OscConfig+0x32e>
 8004596:	e6f4      	b.n	8004382 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80045a0:	f7fc fff2 	bl	8001588 <HAL_GetTick>
 80045a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045a6:	e004      	b.n	80045b2 <HAL_RCC_OscConfig+0x35a>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045a8:	f7fc ffee 	bl	8001588 <HAL_GetTick>
 80045ac:	1b80      	subs	r0, r0, r6
 80045ae:	2802      	cmp	r0, #2
 80045b0:	d8b2      	bhi.n	8004518 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045b2:	682b      	ldr	r3, [r5, #0]
 80045b4:	05df      	lsls	r7, r3, #23
 80045b6:	d4f7      	bmi.n	80045a8 <HAL_RCC_OscConfig+0x350>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	e6b1      	b.n	8004320 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80045c2:	f7fc ffe1 	bl	8001588 <HAL_GetTick>
 80045c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045c8:	e004      	b.n	80045d4 <HAL_RCC_OscConfig+0x37c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ca:	f7fc ffdd 	bl	8001588 <HAL_GetTick>
 80045ce:	1b80      	subs	r0, r0, r6
 80045d0:	2802      	cmp	r0, #2
 80045d2:	d8a1      	bhi.n	8004518 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	0758      	lsls	r0, r3, #29
 80045d8:	d4f7      	bmi.n	80045ca <HAL_RCC_OscConfig+0x372>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	e675      	b.n	80042ca <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80045de:	0790      	lsls	r0, r2, #30
 80045e0:	f47f af1e 	bne.w	8004420 <HAL_RCC_OscConfig+0x1c8>
 80045e4:	e6f6      	b.n	80043d4 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 80045e6:	2001      	movs	r0, #1
}
 80045e8:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80045ea:	f7fc ffcd 	bl	8001588 <HAL_GetTick>
 80045ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045f0:	e004      	b.n	80045fc <HAL_RCC_OscConfig+0x3a4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f2:	f7fc ffc9 	bl	8001588 <HAL_GetTick>
 80045f6:	1b80      	subs	r0, r0, r6
 80045f8:	2802      	cmp	r0, #2
 80045fa:	d88d      	bhi.n	8004518 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	0199      	lsls	r1, r3, #6
 8004600:	d4f7      	bmi.n	80045f2 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004602:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004604:	4b5f      	ldr	r3, [pc, #380]	; (8004784 <HAL_RCC_OscConfig+0x52c>)
 8004606:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004608:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800460a:	495f      	ldr	r1, [pc, #380]	; (8004788 <HAL_RCC_OscConfig+0x530>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800460c:	4e5c      	ldr	r6, [pc, #368]	; (8004780 <HAL_RCC_OscConfig+0x528>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460e:	4313      	orrs	r3, r2
 8004610:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004612:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004616:	62ab      	str	r3, [r5, #40]	; 0x28
 8004618:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800461c:	3b01      	subs	r3, #1
 800461e:	3a01      	subs	r2, #1
 8004620:	025b      	lsls	r3, r3, #9
 8004622:	0412      	lsls	r2, r2, #16
 8004624:	b29b      	uxth	r3, r3
 8004626:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800462a:	4313      	orrs	r3, r2
 800462c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800462e:	3a01      	subs	r2, #1
 8004630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004634:	4313      	orrs	r3, r2
 8004636:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004638:	3a01      	subs	r2, #1
 800463a:	0612      	lsls	r2, r2, #24
 800463c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004640:	4313      	orrs	r3, r2
 8004642:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8004644:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800464c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800464e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004650:	4011      	ands	r1, r2
 8004652:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004656:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004658:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800465a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800465c:	f023 030c 	bic.w	r3, r3, #12
 8004660:	4313      	orrs	r3, r2
 8004662:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004664:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004666:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004668:	f023 0302 	bic.w	r3, r3, #2
 800466c:	4313      	orrs	r3, r2
 800466e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004670:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004676:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004678:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800467a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004680:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004686:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004688:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004696:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004698:	f7fc ff76 	bl	8001588 <HAL_GetTick>
 800469c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800469e:	e005      	b.n	80046ac <HAL_RCC_OscConfig+0x454>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fc ff72 	bl	8001588 <HAL_GetTick>
 80046a4:	1b00      	subs	r0, r0, r4
 80046a6:	2802      	cmp	r0, #2
 80046a8:	f63f af36 	bhi.w	8004518 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046ac:	6833      	ldr	r3, [r6, #0]
 80046ae:	019a      	lsls	r2, r3, #6
 80046b0:	d5f6      	bpl.n	80046a0 <HAL_RCC_OscConfig+0x448>
 80046b2:	e687      	b.n	80043c4 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b4:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80046b6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046b8:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ba:	f43f ae84 	beq.w	80043c6 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046be:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80046c4:	428b      	cmp	r3, r1
 80046c6:	f47f aed0 	bne.w	800446a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046ca:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046d0:	429a      	cmp	r2, r3
 80046d2:	f47f aeca 	bne.w	800446a <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046d8:	f3c6 0208 	ubfx	r2, r6, #0, #9
 80046dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	f47f aec3 	bne.w	800446a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046e6:	f3c6 2246 	ubfx	r2, r6, #9, #7
 80046ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	f47f aebc 	bne.w	800446a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046f4:	f3c6 4206 	ubfx	r2, r6, #16, #7
 80046f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	f47f aeb5 	bne.w	800446a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004700:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004702:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8004706:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004708:	429e      	cmp	r6, r3
 800470a:	f47f aeae 	bne.w	800446a <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800470e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004710:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004712:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004716:	429a      	cmp	r2, r3
 8004718:	f43f ae54 	beq.w	80043c4 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 800471c:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_RCC_OscConfig+0x528>)
 800471e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8004726:	f7fc ff2f 	bl	8001588 <HAL_GetTick>
 800472a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800472c:	f7fc ff2c 	bl	8001588 <HAL_GetTick>
 8004730:	42a8      	cmp	r0, r5
 8004732:	d0fb      	beq.n	800472c <HAL_RCC_OscConfig+0x4d4>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004734:	4a12      	ldr	r2, [pc, #72]	; (8004780 <HAL_RCC_OscConfig+0x528>)
  return HAL_OK;
 8004736:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004738:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <HAL_RCC_OscConfig+0x530>)
 800473c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800473e:	4023      	ands	r3, r4
 8004740:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004744:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004746:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800474e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 8004750:	f7fc ff1a 	bl	8001588 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004754:	4e0a      	ldr	r6, [pc, #40]	; (8004780 <HAL_RCC_OscConfig+0x528>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800475a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800475c:	e005      	b.n	800476a <HAL_RCC_OscConfig+0x512>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475e:	f7fc ff13 	bl	8001588 <HAL_GetTick>
 8004762:	1b40      	subs	r0, r0, r5
 8004764:	42b8      	cmp	r0, r7
 8004766:	f63f aed7 	bhi.w	8004518 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800476a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800476c:	0798      	lsls	r0, r3, #30
 800476e:	d4f6      	bmi.n	800475e <HAL_RCC_OscConfig+0x506>
 8004770:	e60b      	b.n	800438a <HAL_RCC_OscConfig+0x132>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004772:	4a03      	ldr	r2, [pc, #12]	; (8004780 <HAL_RCC_OscConfig+0x528>)
 8004774:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6713      	str	r3, [r2, #112]	; 0x70
 800477c:	e6b8      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
 800477e:	bf00      	nop
 8004780:	58024400 	.word	0x58024400
 8004784:	fffffc0c 	.word	0xfffffc0c
 8004788:	ffff0007 	.word	0xffff0007
 800478c:	2b05      	cmp	r3, #5
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_RCC_OscConfig+0x550>)
 8004790:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004792:	f47f aea6 	bne.w	80044e2 <HAL_RCC_OscConfig+0x28a>
 8004796:	f042 0204 	orr.w	r2, r2, #4
 800479a:	671a      	str	r2, [r3, #112]	; 0x70
 800479c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	671a      	str	r2, [r3, #112]	; 0x70
 80047a4:	e6a4      	b.n	80044f0 <HAL_RCC_OscConfig+0x298>
 80047a6:	bf00      	nop
 80047a8:	58024400 	.word	0x58024400

080047ac <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ac:	4a48      	ldr	r2, [pc, #288]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x124>)
 80047ae:	6913      	ldr	r3, [r2, #16]
 80047b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d004      	beq.n	80047c2 <HAL_RCC_GetSysClockFreq+0x16>
 80047b8:	2b18      	cmp	r3, #24
 80047ba:	d00d      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x2c>
 80047bc:	b11b      	cbz	r3, 80047c6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80047be:	4845      	ldr	r0, [pc, #276]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x128>)
 80047c0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c2:	4845      	ldr	r0, [pc, #276]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80047c4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047c6:	6813      	ldr	r3, [r2, #0]
 80047c8:	0699      	lsls	r1, r3, #26
 80047ca:	d54a      	bpl.n	8004862 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047cc:	6813      	ldr	r3, [r2, #0]
 80047ce:	4843      	ldr	r0, [pc, #268]	; (80048dc <HAL_RCC_GetSysClockFreq+0x130>)
 80047d0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80047d4:	40d8      	lsrs	r0, r3
 80047d6:	4770      	bx	lr
{
 80047d8:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047da:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80047dc:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047de:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 80047e0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047e4:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80047e6:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80047ea:	d038      	beq.n	800485e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047ec:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047f0:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047f4:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047f8:	fb05 f101 	mul.w	r1, r5, r1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	ee07 1a90 	vmov	s15, r1
 8004802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 8004806:	d002      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x62>
 8004808:	2b02      	cmp	r3, #2
 800480a:	d02c      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0xba>
 800480c:	b393      	cbz	r3, 8004874 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800480e:	ee07 0a90 	vmov	s15, r0
 8004812:	ed9f 5a33 	vldr	s10, [pc, #204]	; 80048e0 <HAL_RCC_GetSysClockFreq+0x134>
 8004816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800481a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800481c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004820:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x138>
 8004824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004834:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004838:	eee7 7a06 	vfma.f32	s15, s14, s12
 800483c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004840:	4b23      	ldr	r3, [pc, #140]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x124>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004848:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485a:	ee17 0a90 	vmov	r0, s15
}
 800485e:	bc30      	pop	{r4, r5}
 8004860:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004862:	481e      	ldr	r0, [pc, #120]	; (80048dc <HAL_RCC_GetSysClockFreq+0x130>)
}
 8004864:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004866:	ee07 0a90 	vmov	s15, r0
 800486a:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80048e8 <HAL_RCC_GetSysClockFreq+0x13c>
 800486e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004872:	e7d2      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004874:	6813      	ldr	r3, [r2, #0]
 8004876:	069b      	lsls	r3, r3, #26
 8004878:	d522      	bpl.n	80048c0 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800487a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800487c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004880:	4916      	ldr	r1, [pc, #88]	; (80048dc <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004886:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004888:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800488c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004890:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x138>
 8004894:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004898:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800489a:	ee06 3a10 	vmov	s12, r3
 800489e:	ee05 1a90 	vmov	s11, r1
 80048a2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80048a6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80048aa:	ee36 6a26 	vadd.f32	s12, s12, s13
 80048ae:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80048b2:	eef0 7a46 	vmov.f32	s15, s12
 80048b6:	eee7 7a05 	vfma.f32	s15, s14, s10
 80048ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80048be:	e7bf      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048c0:	ee07 0a90 	vmov	s15, r0
 80048c4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80048ec <HAL_RCC_GetSysClockFreq+0x140>
 80048c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048cc:	e7a5      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x6e>
 80048ce:	bf00      	nop
 80048d0:	58024400 	.word	0x58024400
 80048d4:	003d0900 	.word	0x003d0900
 80048d8:	017d7840 	.word	0x017d7840
 80048dc:	03d09000 	.word	0x03d09000
 80048e0:	4a742400 	.word	0x4a742400
 80048e4:	39000000 	.word	0x39000000
 80048e8:	4bbebc20 	.word	0x4bbebc20
 80048ec:	4c742400 	.word	0x4c742400

080048f0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80048f0:	2800      	cmp	r0, #0
 80048f2:	f000 811a 	beq.w	8004b2a <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048f6:	4a92      	ldr	r2, [pc, #584]	; (8004b40 <HAL_RCC_ClockConfig+0x250>)
{
 80048f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048fc:	6813      	ldr	r3, [r2, #0]
 80048fe:	4604      	mov	r4, r0
 8004900:	460d      	mov	r5, r1
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	428b      	cmp	r3, r1
 8004908:	d20c      	bcs.n	8004924 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	6813      	ldr	r3, [r2, #0]
 800490c:	f023 030f 	bic.w	r3, r3, #15
 8004910:	430b      	orrs	r3, r1
 8004912:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004914:	6813      	ldr	r3, [r2, #0]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	428b      	cmp	r3, r1
 800491c:	d002      	beq.n	8004924 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800491e:	2001      	movs	r0, #1
}
 8004920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	075f      	lsls	r7, r3, #29
 8004928:	d50c      	bpl.n	8004944 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800492a:	4986      	ldr	r1, [pc, #536]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 800492c:	6920      	ldr	r0, [r4, #16]
 800492e:	698a      	ldr	r2, [r1, #24]
 8004930:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004934:	4290      	cmp	r0, r2
 8004936:	d905      	bls.n	8004944 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004938:	698b      	ldr	r3, [r1, #24]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	4303      	orrs	r3, r0
 8004940:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	071e      	lsls	r6, r3, #28
 8004946:	d50c      	bpl.n	8004962 <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004948:	497e      	ldr	r1, [pc, #504]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 800494a:	6960      	ldr	r0, [r4, #20]
 800494c:	69ca      	ldr	r2, [r1, #28]
 800494e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004952:	4290      	cmp	r0, r2
 8004954:	d905      	bls.n	8004962 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004956:	69cb      	ldr	r3, [r1, #28]
 8004958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495c:	4303      	orrs	r3, r0
 800495e:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	06d8      	lsls	r0, r3, #27
 8004964:	d50c      	bpl.n	8004980 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004966:	4977      	ldr	r1, [pc, #476]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 8004968:	69a0      	ldr	r0, [r4, #24]
 800496a:	69ca      	ldr	r2, [r1, #28]
 800496c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004970:	4290      	cmp	r0, r2
 8004972:	d905      	bls.n	8004980 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004974:	69cb      	ldr	r3, [r1, #28]
 8004976:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800497a:	4303      	orrs	r3, r0
 800497c:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	0699      	lsls	r1, r3, #26
 8004982:	d50c      	bpl.n	800499e <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004984:	496f      	ldr	r1, [pc, #444]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 8004986:	69e0      	ldr	r0, [r4, #28]
 8004988:	6a0a      	ldr	r2, [r1, #32]
 800498a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800498e:	4290      	cmp	r0, r2
 8004990:	d905      	bls.n	800499e <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004992:	6a0b      	ldr	r3, [r1, #32]
 8004994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004998:	4303      	orrs	r3, r0
 800499a:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	079a      	lsls	r2, r3, #30
 80049a0:	f140 8083 	bpl.w	8004aaa <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049a4:	4867      	ldr	r0, [pc, #412]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 80049a6:	68e1      	ldr	r1, [r4, #12]
 80049a8:	6982      	ldr	r2, [r0, #24]
 80049aa:	f002 020f 	and.w	r2, r2, #15
 80049ae:	4291      	cmp	r1, r2
 80049b0:	f240 80a9 	bls.w	8004b06 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b4:	6983      	ldr	r3, [r0, #24]
 80049b6:	f023 030f 	bic.w	r3, r3, #15
 80049ba:	430b      	orrs	r3, r1
 80049bc:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	07df      	lsls	r7, r3, #31
 80049c2:	d474      	bmi.n	8004aae <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c4:	079f      	lsls	r7, r3, #30
 80049c6:	d507      	bpl.n	80049d8 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049c8:	4a5e      	ldr	r2, [pc, #376]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 80049ca:	68e1      	ldr	r1, [r4, #12]
 80049cc:	6993      	ldr	r3, [r2, #24]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	428b      	cmp	r3, r1
 80049d4:	f200 80a0 	bhi.w	8004b18 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d8:	4a59      	ldr	r2, [pc, #356]	; (8004b40 <HAL_RCC_ClockConfig+0x250>)
 80049da:	6813      	ldr	r3, [r2, #0]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	d909      	bls.n	80049f8 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e4:	6813      	ldr	r3, [r2, #0]
 80049e6:	f023 030f 	bic.w	r3, r3, #15
 80049ea:	432b      	orrs	r3, r5
 80049ec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	42ab      	cmp	r3, r5
 80049f6:	d192      	bne.n	800491e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	075e      	lsls	r6, r3, #29
 80049fc:	d50c      	bpl.n	8004a18 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049fe:	4951      	ldr	r1, [pc, #324]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 8004a00:	6920      	ldr	r0, [r4, #16]
 8004a02:	698a      	ldr	r2, [r1, #24]
 8004a04:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004a08:	4290      	cmp	r0, r2
 8004a0a:	d205      	bcs.n	8004a18 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a0c:	698b      	ldr	r3, [r1, #24]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	4303      	orrs	r3, r0
 8004a14:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	071d      	lsls	r5, r3, #28
 8004a1a:	d50c      	bpl.n	8004a36 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a1c:	4949      	ldr	r1, [pc, #292]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 8004a1e:	6960      	ldr	r0, [r4, #20]
 8004a20:	69ca      	ldr	r2, [r1, #28]
 8004a22:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004a26:	4290      	cmp	r0, r2
 8004a28:	d205      	bcs.n	8004a36 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a2a:	69cb      	ldr	r3, [r1, #28]
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a30:	4303      	orrs	r3, r0
 8004a32:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	06d8      	lsls	r0, r3, #27
 8004a38:	d50c      	bpl.n	8004a54 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a3a:	4942      	ldr	r1, [pc, #264]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 8004a3c:	69a0      	ldr	r0, [r4, #24]
 8004a3e:	69ca      	ldr	r2, [r1, #28]
 8004a40:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004a44:	4290      	cmp	r0, r2
 8004a46:	d205      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a48:	69cb      	ldr	r3, [r1, #28]
 8004a4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a4e:	4303      	orrs	r3, r0
 8004a50:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	0699      	lsls	r1, r3, #26
 8004a56:	d50b      	bpl.n	8004a70 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a58:	4a3a      	ldr	r2, [pc, #232]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 8004a5a:	69e1      	ldr	r1, [r4, #28]
 8004a5c:	6a13      	ldr	r3, [r2, #32]
 8004a5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a62:	4299      	cmp	r1, r3
 8004a64:	d204      	bcs.n	8004a70 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a66:	6a13      	ldr	r3, [r2, #32]
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a70:	f7ff fe9c 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 8004a74:	4a33      	ldr	r2, [pc, #204]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 8004a76:	4603      	mov	r3, r0
 8004a78:	4833      	ldr	r0, [pc, #204]	; (8004b48 <HAL_RCC_ClockConfig+0x258>)
 8004a7a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a7c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a7e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8004a82:	4d32      	ldr	r5, [pc, #200]	; (8004b4c <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a84:	f002 020f 	and.w	r2, r2, #15
 8004a88:	4c31      	ldr	r4, [pc, #196]	; (8004b50 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a8a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a8c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a8e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8004a92:	4830      	ldr	r0, [pc, #192]	; (8004b54 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a94:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a98:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8004a9a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8004a9c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a9e:	40d3      	lsrs	r3, r2
 8004aa0:	6023      	str	r3, [r4, #0]
}
 8004aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8004aa6:	f7fc bd0d 	b.w	80014c4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aaa:	07db      	lsls	r3, r3, #31
 8004aac:	d594      	bpl.n	80049d8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004aae:	4a25      	ldr	r2, [pc, #148]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 8004ab0:	68a1      	ldr	r1, [r4, #8]
 8004ab2:	6993      	ldr	r3, [r2, #24]
 8004ab4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abc:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004abe:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac0:	2902      	cmp	r1, #2
 8004ac2:	d034      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ac4:	2903      	cmp	r1, #3
 8004ac6:	d02d      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ac8:	2901      	cmp	r1, #1
 8004aca:	d035      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004acc:	075b      	lsls	r3, r3, #29
 8004ace:	f57f af26 	bpl.w	800491e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ad2:	4e1c      	ldr	r6, [pc, #112]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad4:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ad8:	6933      	ldr	r3, [r6, #16]
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8004ae2:	f7fc fd51 	bl	8001588 <HAL_GetTick>
 8004ae6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae8:	e004      	b.n	8004af4 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aea:	f7fc fd4d 	bl	8001588 <HAL_GetTick>
 8004aee:	1bc0      	subs	r0, r0, r7
 8004af0:	4540      	cmp	r0, r8
 8004af2:	d81f      	bhi.n	8004b34 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af4:	6933      	ldr	r3, [r6, #16]
 8004af6:	6862      	ldr	r2, [r4, #4]
 8004af8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004afc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004b00:	d1f3      	bne.n	8004aea <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	e75e      	b.n	80049c4 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b06:	07da      	lsls	r2, r3, #31
 8004b08:	d4d1      	bmi.n	8004aae <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b0a:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <HAL_RCC_ClockConfig+0x254>)
 8004b0c:	6993      	ldr	r3, [r2, #24]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	428b      	cmp	r3, r1
 8004b14:	f67f af60 	bls.w	80049d8 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b18:	6993      	ldr	r3, [r2, #24]
 8004b1a:	f023 030f 	bic.w	r3, r3, #15
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	6193      	str	r3, [r2, #24]
 8004b22:	e759      	b.n	80049d8 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b24:	0198      	lsls	r0, r3, #6
 8004b26:	d4d4      	bmi.n	8004ad2 <HAL_RCC_ClockConfig+0x1e2>
 8004b28:	e6f9      	b.n	800491e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004b2a:	2001      	movs	r0, #1
}
 8004b2c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b2e:	039e      	lsls	r6, r3, #14
 8004b30:	d4cf      	bmi.n	8004ad2 <HAL_RCC_ClockConfig+0x1e2>
 8004b32:	e6f4      	b.n	800491e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004b34:	2003      	movs	r0, #3
 8004b36:	e6f3      	b.n	8004920 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b38:	05da      	lsls	r2, r3, #23
 8004b3a:	d4ca      	bmi.n	8004ad2 <HAL_RCC_ClockConfig+0x1e2>
 8004b3c:	e6ef      	b.n	800491e <HAL_RCC_ClockConfig+0x2e>
 8004b3e:	bf00      	nop
 8004b40:	52002000 	.word	0x52002000
 8004b44:	58024400 	.word	0x58024400
 8004b48:	08008610 	.word	0x08008610
 8004b4c:	20000004 	.word	0x20000004
 8004b50:	20000008 	.word	0x20000008
 8004b54:	20000010 	.word	0x20000010

08004b58 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b58:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b5a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b5c:	6913      	ldr	r3, [r2, #16]
 8004b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b62:	2b10      	cmp	r3, #16
 8004b64:	d01a      	beq.n	8004b9c <HAL_RCC_GetHCLKFreq+0x44>
 8004b66:	2b18      	cmp	r3, #24
 8004b68:	d023      	beq.n	8004bb2 <HAL_RCC_GetHCLKFreq+0x5a>
 8004b6a:	b1cb      	cbz	r3, 8004ba0 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8004b6c:	4814      	ldr	r0, [pc, #80]	; (8004bc0 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <HAL_RCC_GetHCLKFreq+0x64>)
 8004b70:	4914      	ldr	r1, [pc, #80]	; (8004bc4 <HAL_RCC_GetHCLKFreq+0x6c>)
 8004b72:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b74:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b76:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b7a:	4c13      	ldr	r4, [pc, #76]	; (8004bc8 <HAL_RCC_GetHCLKFreq+0x70>)
 8004b7c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b80:	4d12      	ldr	r5, [pc, #72]	; (8004bcc <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b82:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b84:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b86:	f002 021f 	and.w	r2, r2, #31
 8004b8a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b8e:	f003 001f 	and.w	r0, r3, #31
 8004b92:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8004b96:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b98:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b9c:	480c      	ldr	r0, [pc, #48]	; (8004bd0 <HAL_RCC_GetHCLKFreq+0x78>)
 8004b9e:	e7e6      	b.n	8004b6e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ba0:	6813      	ldr	r3, [r2, #0]
 8004ba2:	069b      	lsls	r3, r3, #26
 8004ba4:	d508      	bpl.n	8004bb8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ba6:	6813      	ldr	r3, [r2, #0]
 8004ba8:	480a      	ldr	r0, [pc, #40]	; (8004bd4 <HAL_RCC_GetHCLKFreq+0x7c>)
 8004baa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004bae:	40d8      	lsrs	r0, r3
 8004bb0:	e7dd      	b.n	8004b6e <HAL_RCC_GetHCLKFreq+0x16>
 8004bb2:	f7ff facb 	bl	800414c <HAL_RCC_GetSysClockFreq.part.0>
 8004bb6:	e7da      	b.n	8004b6e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004bb8:	4806      	ldr	r0, [pc, #24]	; (8004bd4 <HAL_RCC_GetHCLKFreq+0x7c>)
 8004bba:	e7d8      	b.n	8004b6e <HAL_RCC_GetHCLKFreq+0x16>
 8004bbc:	58024400 	.word	0x58024400
 8004bc0:	003d0900 	.word	0x003d0900
 8004bc4:	08008610 	.word	0x08008610
 8004bc8:	20000008 	.word	0x20000008
 8004bcc:	20000004 	.word	0x20000004
 8004bd0:	017d7840 	.word	0x017d7840
 8004bd4:	03d09000 	.word	0x03d09000

08004bd8 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bda:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bdc:	6913      	ldr	r3, [r2, #16]
 8004bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d021      	beq.n	8004c2a <HAL_RCC_GetPCLK1Freq+0x52>
 8004be6:	2b18      	cmp	r3, #24
 8004be8:	d02a      	beq.n	8004c40 <HAL_RCC_GetPCLK1Freq+0x68>
 8004bea:	b303      	cbz	r3, 8004c2e <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8004bec:	4818      	ldr	r0, [pc, #96]	; (8004c50 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x74>)
 8004bf0:	4918      	ldr	r1, [pc, #96]	; (8004c54 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8004bf2:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bf4:	4c18      	ldr	r4, [pc, #96]	; (8004c58 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bf6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8004bfa:	4d18      	ldr	r5, [pc, #96]	; (8004c5c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bfc:	5ccb      	ldrb	r3, [r1, r3]
 8004bfe:	f003 031f 	and.w	r3, r3, #31
 8004c02:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c04:	6993      	ldr	r3, [r2, #24]
 8004c06:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 8004c0a:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c0c:	5ccb      	ldrb	r3, [r1, r3]
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	fa20 f303 	lsr.w	r3, r0, r3
 8004c16:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c18:	69d2      	ldr	r2, [r2, #28]
 8004c1a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004c1e:	5c88      	ldrb	r0, [r1, r2]
 8004c20:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c24:	fa23 f000 	lsr.w	r0, r3, r0
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c2a:	480d      	ldr	r0, [pc, #52]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x88>)
 8004c2c:	e7df      	b.n	8004bee <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c2e:	6813      	ldr	r3, [r2, #0]
 8004c30:	069b      	lsls	r3, r3, #26
 8004c32:	d508      	bpl.n	8004c46 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c34:	6813      	ldr	r3, [r2, #0]
 8004c36:	480b      	ldr	r0, [pc, #44]	; (8004c64 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004c38:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004c3c:	40d8      	lsrs	r0, r3
 8004c3e:	e7d6      	b.n	8004bee <HAL_RCC_GetPCLK1Freq+0x16>
 8004c40:	f7ff fa84 	bl	800414c <HAL_RCC_GetSysClockFreq.part.0>
 8004c44:	e7d3      	b.n	8004bee <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c46:	4807      	ldr	r0, [pc, #28]	; (8004c64 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004c48:	e7d1      	b.n	8004bee <HAL_RCC_GetPCLK1Freq+0x16>
 8004c4a:	bf00      	nop
 8004c4c:	58024400 	.word	0x58024400
 8004c50:	003d0900 	.word	0x003d0900
 8004c54:	08008610 	.word	0x08008610
 8004c58:	20000008 	.word	0x20000008
 8004c5c:	20000004 	.word	0x20000004
 8004c60:	017d7840 	.word	0x017d7840
 8004c64:	03d09000 	.word	0x03d09000

08004c68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c6a:	4c3a      	ldr	r4, [pc, #232]	; (8004d54 <RCCEx_PLL2_Config+0xec>)
 8004c6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d067      	beq.n	8004d46 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	4606      	mov	r6, r0
 8004c7a:	460f      	mov	r7, r1
 8004c7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c80:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c82:	f7fc fc81 	bl	8001588 <HAL_GetTick>
 8004c86:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c88:	e004      	b.n	8004c94 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c8a:	f7fc fc7d 	bl	8001588 <HAL_GetTick>
 8004c8e:	1b43      	subs	r3, r0, r5
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d856      	bhi.n	8004d42 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	011a      	lsls	r2, r3, #4
 8004c98:	d4f7      	bmi.n	8004c8a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c9c:	6832      	ldr	r2, [r6, #0]
 8004c9e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004ca2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004ca6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ca8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	3a01      	subs	r2, #1
 8004cb0:	025b      	lsls	r3, r3, #9
 8004cb2:	0412      	lsls	r2, r2, #16
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	6872      	ldr	r2, [r6, #4]
 8004cbe:	3a01      	subs	r2, #1
 8004cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	6932      	ldr	r2, [r6, #16]
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0612      	lsls	r2, r2, #24
 8004ccc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004cd6:	6972      	ldr	r2, [r6, #20]
 8004cd8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ce0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ce2:	69b3      	ldr	r3, [r6, #24]
 8004ce4:	f022 0220 	bic.w	r2, r2, #32
 8004ce8:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cea:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cec:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004cf0:	f022 0210 	bic.w	r2, r2, #16
 8004cf4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cf6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004cf8:	69f2      	ldr	r2, [r6, #28]
 8004cfa:	400b      	ands	r3, r1
 8004cfc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004d00:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d04:	f043 0310 	orr.w	r3, r3, #16
 8004d08:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004d0c:	b1ef      	cbz	r7, 8004d4a <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d0e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d10:	bf0c      	ite	eq
 8004d12:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d16:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8004d1a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d1c:	4c0d      	ldr	r4, [pc, #52]	; (8004d54 <RCCEx_PLL2_Config+0xec>)
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d24:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d26:	f7fc fc2f 	bl	8001588 <HAL_GetTick>
 8004d2a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d2c:	e004      	b.n	8004d38 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d2e:	f7fc fc2b 	bl	8001588 <HAL_GetTick>
 8004d32:	1b40      	subs	r0, r0, r5
 8004d34:	2802      	cmp	r0, #2
 8004d36:	d804      	bhi.n	8004d42 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	d5f7      	bpl.n	8004d2e <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8004d3e:	2000      	movs	r0, #0
}
 8004d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004d42:	2003      	movs	r0, #3
}
 8004d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004d46:	2001      	movs	r0, #1
}
 8004d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d50:	e7e4      	b.n	8004d1c <RCCEx_PLL2_Config+0xb4>
 8004d52:	bf00      	nop
 8004d54:	58024400 	.word	0x58024400
 8004d58:	ffff0007 	.word	0xffff0007

08004d5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d5e:	4c3a      	ldr	r4, [pc, #232]	; (8004e48 <RCCEx_PLL3_Config+0xec>)
 8004d60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d067      	beq.n	8004e3a <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	460f      	mov	r7, r1
 8004d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d74:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d76:	f7fc fc07 	bl	8001588 <HAL_GetTick>
 8004d7a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d7c:	e004      	b.n	8004d88 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d7e:	f7fc fc03 	bl	8001588 <HAL_GetTick>
 8004d82:	1b43      	subs	r3, r0, r5
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d856      	bhi.n	8004e36 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	009a      	lsls	r2, r3, #2
 8004d8c:	d4f7      	bmi.n	8004d7e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d90:	6832      	ldr	r2, [r6, #0]
 8004d92:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004d96:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004d9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d9c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	3a01      	subs	r2, #1
 8004da4:	025b      	lsls	r3, r3, #9
 8004da6:	0412      	lsls	r2, r2, #16
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004dae:	4313      	orrs	r3, r2
 8004db0:	6872      	ldr	r2, [r6, #4]
 8004db2:	3a01      	subs	r2, #1
 8004db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004db8:	4313      	orrs	r3, r2
 8004dba:	6932      	ldr	r2, [r6, #16]
 8004dbc:	3a01      	subs	r2, #1
 8004dbe:	0612      	lsls	r2, r2, #24
 8004dc0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004dca:	6972      	ldr	r2, [r6, #20]
 8004dcc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004dd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004dd6:	69b3      	ldr	r3, [r6, #24]
 8004dd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ddc:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dde:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004de0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004de2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004dec:	69f2      	ldr	r2, [r6, #28]
 8004dee:	400b      	ands	r3, r1
 8004df0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004df4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004df6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004dfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004e00:	b1ef      	cbz	r7, 8004e3e <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e02:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e04:	bf0c      	ite	eq
 8004e06:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e0a:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8004e0e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e10:	4c0d      	ldr	r4, [pc, #52]	; (8004e48 <RCCEx_PLL3_Config+0xec>)
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e18:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1a:	f7fc fbb5 	bl	8001588 <HAL_GetTick>
 8004e1e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e20:	e004      	b.n	8004e2c <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e22:	f7fc fbb1 	bl	8001588 <HAL_GetTick>
 8004e26:	1b40      	subs	r0, r0, r5
 8004e28:	2802      	cmp	r0, #2
 8004e2a:	d804      	bhi.n	8004e36 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	d5f7      	bpl.n	8004e22 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8004e32:	2000      	movs	r0, #0
}
 8004e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004e36:	2003      	movs	r0, #3
}
 8004e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004e3a:	2001      	movs	r0, #1
}
 8004e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e44:	e7e4      	b.n	8004e10 <RCCEx_PLL3_Config+0xb4>
 8004e46:	bf00      	nop
 8004e48:	58024400 	.word	0x58024400
 8004e4c:	ffff0007 	.word	0xffff0007

08004e50 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e54:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8004e58:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e5a:	0118      	lsls	r0, r3, #4
 8004e5c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8004e60:	d51c      	bpl.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e62:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004e64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004e68:	f000 852c 	beq.w	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004e6c:	d823      	bhi.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8004e6e:	2900      	cmp	r1, #0
 8004e70:	f000 8429 	beq.w	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x876>
 8004e74:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004e78:	d120      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x6c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	f104 0008 	add.w	r0, r4, #8
 8004e80:	f7ff fef2 	bl	8004c68 <RCCEx_PLL2_Config>
 8004e84:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8004e86:	b93e      	cbnz	r6, 8004e98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e88:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004e8a:	4a96      	ldr	r2, [pc, #600]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004e8c:	2600      	movs	r6, #0
 8004e8e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004e90:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e98:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004e9c:	05d9      	lsls	r1, r3, #23
 8004e9e:	d511      	bpl.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004ea0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004ea2:	2904      	cmp	r1, #4
 8004ea4:	f200 858d 	bhi.w	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8004ea8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004eac:	051e0517 	.word	0x051e0517
 8004eb0:	02e30525 	.word	0x02e30525
 8004eb4:	02e3      	.short	0x02e3
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004eb6:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8004eba:	d0e6      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ebc:	05d9      	lsls	r1, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ebe:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ec2:	d4ed      	bmi.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004ec4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ec6:	055f      	lsls	r7, r3, #21
 8004ec8:	d51a      	bpl.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004eca:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004ece:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004ed2:	f000 8527 	beq.w	8005924 <HAL_RCCEx_PeriphCLKConfig+0xad4>
 8004ed6:	f200 80c4 	bhi.w	8005062 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004eda:	2900      	cmp	r1, #0
 8004edc:	f000 8407 	beq.w	80056ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8004ee0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004ee4:	f040 80c7 	bne.w	8005076 <HAL_RCCEx_PeriphCLKConfig+0x226>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ee8:	2100      	movs	r1, #0
 8004eea:	f104 0008 	add.w	r0, r4, #8
 8004eee:	f7ff febb 	bl	8004c68 <RCCEx_PLL2_Config>
 8004ef2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004ef4:	2d00      	cmp	r5, #0
 8004ef6:	f000 83ba 	beq.w	800566e <HAL_RCCEx_PeriphCLKConfig+0x81e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004efa:	462e      	mov	r6, r5
 8004efc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f00:	0518      	lsls	r0, r3, #20
 8004f02:	d51a      	bpl.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xea>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004f04:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004f08:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004f0c:	f000 84fa 	beq.w	8005904 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004f10:	f200 80b4 	bhi.w	800507c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8004f14:	2900      	cmp	r1, #0
 8004f16:	f000 83de 	beq.w	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8004f1a:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8004f1e:	f040 80b7 	bne.w	8005090 <HAL_RCCEx_PeriphCLKConfig+0x240>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f22:	2100      	movs	r1, #0
 8004f24:	f104 0008 	add.w	r0, r4, #8
 8004f28:	f7ff fe9e 	bl	8004c68 <RCCEx_PLL2_Config>
 8004f2c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004f2e:	2d00      	cmp	r5, #0
 8004f30:	f000 83b2 	beq.w	8005698 <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f34:	462e      	mov	r6, r5
 8004f36:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f3a:	0199      	lsls	r1, r3, #6
 8004f3c:	d51a      	bpl.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->OspiClockSelection)
 8004f3e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004f40:	2920      	cmp	r1, #32
 8004f42:	f000 8493 	beq.w	800586c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8004f46:	f200 80a6 	bhi.w	8005096 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8004f4a:	b139      	cbz	r1, 8004f5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f4c:	2910      	cmp	r1, #16
 8004f4e:	f040 80a5 	bne.w	800509c <HAL_RCCEx_PeriphCLKConfig+0x24c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f52:	4a64      	ldr	r2, [pc, #400]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004f54:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8004f5c:	2d00      	cmp	r5, #0
 8004f5e:	f040 83d1 	bne.w	8005704 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f62:	4a60      	ldr	r2, [pc, #384]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004f64:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004f66:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f68:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f70:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f74:	04df      	lsls	r7, r3, #19
 8004f76:	d519      	bpl.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x15c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004f78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004f7a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004f7e:	f000 84c9 	beq.w	8005914 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004f82:	f200 808e 	bhi.w	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004f86:	2900      	cmp	r1, #0
 8004f88:	f000 83ab 	beq.w	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x892>
 8004f8c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004f90:	f040 808f 	bne.w	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f94:	2100      	movs	r1, #0
 8004f96:	f104 0008 	add.w	r0, r4, #8
 8004f9a:	f7ff fe65 	bl	8004c68 <RCCEx_PLL2_Config>
 8004f9e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004fa0:	2d00      	cmp	r5, #0
 8004fa2:	f000 836f 	beq.w	8005684 <HAL_RCCEx_PeriphCLKConfig+0x834>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004fa6:	462e      	mov	r6, r5
 8004fa8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004fac:	0498      	lsls	r0, r3, #18
 8004fae:	d51c      	bpl.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004fb0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004fb2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004fb6:	f000 8445 	beq.w	8005844 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 8004fba:	d87d      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8004fbc:	b149      	cbz	r1, 8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004fbe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004fc2:	f040 8081 	bne.w	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	f104 0008 	add.w	r0, r4, #8
 8004fcc:	f7ff fe4c 	bl	8004c68 <RCCEx_PLL2_Config>
 8004fd0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004fd2:	2d00      	cmp	r5, #0
 8004fd4:	f040 83c3 	bne.w	800575e <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004fd8:	4a42      	ldr	r2, [pc, #264]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004fda:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004fdc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004fde:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004fe6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004fea:	0459      	lsls	r1, r3, #17
 8004fec:	d51d      	bpl.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004fee:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004ff2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004ff6:	f000 842f 	beq.w	8005858 <HAL_RCCEx_PeriphCLKConfig+0xa08>
 8004ffa:	d868      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004ffc:	b141      	cbz	r1, 8005010 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004ffe:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005002:	d16c      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x28e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005004:	2101      	movs	r1, #1
 8005006:	f104 0008 	add.w	r0, r4, #8
 800500a:	f7ff fe2d 	bl	8004c68 <RCCEx_PLL2_Config>
 800500e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005010:	2d00      	cmp	r5, #0
 8005012:	f040 83a0 	bne.w	8005756 <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005016:	4a33      	ldr	r2, [pc, #204]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005018:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800501c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800501e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005022:	430b      	orrs	r3, r1
 8005024:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005026:	e9d4 3200 	ldrd	r3, r2, [r4]
 800502a:	041f      	lsls	r7, r3, #16
 800502c:	d50d      	bpl.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->FdcanClockSelection)
 800502e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005030:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005034:	f000 83e0 	beq.w	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8005038:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800503c:	f000 8235 	beq.w	80054aa <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8005040:	2900      	cmp	r1, #0
 8005042:	f000 8238 	beq.w	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8005046:	2601      	movs	r6, #1
 8005048:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800504a:	01d8      	lsls	r0, r3, #7
 800504c:	d557      	bpl.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    switch (PeriphClkInit->FmcClockSelection)
 800504e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005050:	2903      	cmp	r1, #3
 8005052:	f200 84c0 	bhi.w	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005056:	e8df f011 	tbh	[pc, r1, lsl #1]
 800505a:	004c      	.short	0x004c
 800505c:	03d80047 	.word	0x03d80047
 8005060:	004c      	.short	0x004c
    switch (PeriphClkInit->Sai4AClockSelection)
 8005062:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 8005066:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800506a:	f43f af43 	beq.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800506e:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8005072:	f43f af3f 	beq.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005076:	2601      	movs	r6, #1
 8005078:	4635      	mov	r5, r6
 800507a:	e741      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch (PeriphClkInit->Sai4BClockSelection)
 800507c:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8005080:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005084:	f43f af53 	beq.w	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005088:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800508c:	f43f af4f 	beq.w	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005090:	2601      	movs	r6, #1
 8005092:	4635      	mov	r5, r6
 8005094:	e751      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xea>
    switch (PeriphClkInit->OspiClockSelection)
 8005096:	2930      	cmp	r1, #48	; 0x30
 8005098:	f43f af60 	beq.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800509c:	2601      	movs	r6, #1
 800509e:	4635      	mov	r5, r6
 80050a0:	e768      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Spi123ClockSelection)
 80050a2:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80050a6:	f43f af7b 	beq.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80050aa:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80050ae:	f43f af77 	beq.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80050b2:	2601      	movs	r6, #1
 80050b4:	4635      	mov	r5, r6
 80050b6:	e779      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x15c>
    switch (PeriphClkInit->Spi45ClockSelection)
 80050b8:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 80050bc:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80050c0:	d087      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80050c2:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80050c6:	d084      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80050c8:	2601      	movs	r6, #1
 80050ca:	4635      	mov	r5, r6
 80050cc:	e78d      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch (PeriphClkInit->Spi6ClockSelection)
 80050ce:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80050d2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80050d6:	d09b      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80050d8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80050dc:	d098      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80050de:	2601      	movs	r6, #1
 80050e0:	4635      	mov	r5, r6
 80050e2:	e7a2      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1da>
 80050e4:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e8:	4a34      	ldr	r2, [pc, #208]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80050ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80050f2:	2d00      	cmp	r5, #0
 80050f4:	f000 8337 	beq.w	8005766 <HAL_RCCEx_PeriphCLKConfig+0x916>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050f8:	462e      	mov	r6, r5
 80050fa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80050fe:	0259      	lsls	r1, r3, #9
 8005100:	f100 820f 	bmi.w	8005522 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005104:	07d9      	lsls	r1, r3, #31
 8005106:	d52f      	bpl.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x318>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005108:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800510a:	2928      	cmp	r1, #40	; 0x28
 800510c:	d82a      	bhi.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800510e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005112:	01fb      	.short	0x01fb
 8005114:	00290029 	.word	0x00290029
 8005118:	00290029 	.word	0x00290029
 800511c:	00290029 	.word	0x00290029
 8005120:	01f50029 	.word	0x01f50029
 8005124:	00290029 	.word	0x00290029
 8005128:	00290029 	.word	0x00290029
 800512c:	00290029 	.word	0x00290029
 8005130:	04250029 	.word	0x04250029
 8005134:	00290029 	.word	0x00290029
 8005138:	00290029 	.word	0x00290029
 800513c:	00290029 	.word	0x00290029
 8005140:	01fb0029 	.word	0x01fb0029
 8005144:	00290029 	.word	0x00290029
 8005148:	00290029 	.word	0x00290029
 800514c:	00290029 	.word	0x00290029
 8005150:	01fb0029 	.word	0x01fb0029
 8005154:	00290029 	.word	0x00290029
 8005158:	00290029 	.word	0x00290029
 800515c:	00290029 	.word	0x00290029
 8005160:	01fb0029 	.word	0x01fb0029
 8005164:	2601      	movs	r6, #1
 8005166:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005168:	079f      	lsls	r7, r3, #30
 800516a:	d517      	bpl.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x34c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800516c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800516e:	2905      	cmp	r1, #5
 8005170:	f200 842d 	bhi.w	80059ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
 8005174:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005178:	0006000c 	.word	0x0006000c
 800517c:	000c03e8 	.word	0x000c03e8
 8005180:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005184:	2101      	movs	r1, #1
 8005186:	f104 0008 	add.w	r0, r4, #8
 800518a:	f7ff fd6d 	bl	8004c68 <RCCEx_PLL2_Config>
 800518e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005190:	2d00      	cmp	r5, #0
 8005192:	f000 82d2 	beq.w	800573a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005196:	462e      	mov	r6, r5
 8005198:	e9d4 3200 	ldrd	r3, r2, [r4]
 800519c:	0758      	lsls	r0, r3, #29
 800519e:	d51b      	bpl.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80051a0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80051a4:	2905      	cmp	r1, #5
 80051a6:	f200 840f 	bhi.w	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80051aa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80051ae:	000f      	.short	0x000f
 80051b0:	03c30009 	.word	0x03c30009
 80051b4:	000f000f 	.word	0x000f000f
 80051b8:	000f      	.short	0x000f
 80051ba:	bf00      	nop
 80051bc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051c0:	2101      	movs	r1, #1
 80051c2:	f104 0008 	add.w	r0, r4, #8
 80051c6:	f7ff fd4f 	bl	8004c68 <RCCEx_PLL2_Config>
 80051ca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80051cc:	2d00      	cmp	r5, #0
 80051ce:	f000 82a9 	beq.w	8005724 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051d2:	462e      	mov	r6, r5
 80051d4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80051d8:	0699      	lsls	r1, r3, #26
 80051da:	d51f      	bpl.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051dc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80051e0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80051e4:	f000 834c 	beq.w	8005880 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80051e8:	f200 810d 	bhi.w	8005406 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 80051ec:	b149      	cbz	r1, 8005202 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 80051ee:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80051f2:	f040 8112 	bne.w	800541a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051f6:	2100      	movs	r1, #0
 80051f8:	f104 0008 	add.w	r0, r4, #8
 80051fc:	f7ff fd34 	bl	8004c68 <RCCEx_PLL2_Config>
 8005200:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005202:	2d00      	cmp	r5, #0
 8005204:	f040 8286 	bne.w	8005714 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005208:	4ab1      	ldr	r2, [pc, #708]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 800520a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800520e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005210:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005214:	430b      	orrs	r3, r1
 8005216:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005218:	e9d4 3200 	ldrd	r3, r2, [r4]
 800521c:	065f      	lsls	r7, r3, #25
 800521e:	d51f      	bpl.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005220:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8005224:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005228:	f000 8302 	beq.w	8005830 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800522c:	f200 80f8 	bhi.w	8005420 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005230:	b149      	cbz	r1, 8005246 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8005232:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005236:	f040 80fd 	bne.w	8005434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800523a:	2100      	movs	r1, #0
 800523c:	f104 0008 	add.w	r0, r4, #8
 8005240:	f7ff fd12 	bl	8004c68 <RCCEx_PLL2_Config>
 8005244:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005246:	2d00      	cmp	r5, #0
 8005248:	f040 8281 	bne.w	800574e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800524c:	4aa0      	ldr	r2, [pc, #640]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 800524e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8005252:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005254:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005258:	430b      	orrs	r3, r1
 800525a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800525c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005260:	0618      	lsls	r0, r3, #24
 8005262:	d51f      	bpl.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005264:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005268:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800526c:	f000 82d6 	beq.w	800581c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005270:	f200 80e3 	bhi.w	800543a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8005274:	b149      	cbz	r1, 800528a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005276:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800527a:	f040 80e8 	bne.w	800544e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800527e:	2100      	movs	r1, #0
 8005280:	f104 0008 	add.w	r0, r4, #8
 8005284:	f7ff fcf0 	bl	8004c68 <RCCEx_PLL2_Config>
 8005288:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800528a:	2d00      	cmp	r5, #0
 800528c:	f040 823e 	bne.w	800570c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005290:	4a8f      	ldr	r2, [pc, #572]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 8005292:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005296:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005298:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800529c:	430b      	orrs	r3, r1
 800529e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80052a0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80052a4:	0719      	lsls	r1, r3, #28
 80052a6:	d50d      	bpl.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80052a8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80052ac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80052b0:	f000 82fc 	beq.w	80058ac <HAL_RCCEx_PeriphCLKConfig+0xa5c>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80052b4:	4986      	ldr	r1, [pc, #536]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80052b6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80052b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052bc:	4313      	orrs	r3, r2
 80052be:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80052c4:	06df      	lsls	r7, r3, #27
 80052c6:	d50d      	bpl.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80052c8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80052cc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80052d0:	f000 82e0 	beq.w	8005894 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052d4:	497e      	ldr	r1, [pc, #504]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80052d6:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80052d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052dc:	4313      	orrs	r3, r2
 80052de:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80052e4:	0318      	lsls	r0, r3, #12
 80052e6:	d50e      	bpl.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    switch (PeriphClkInit->AdcClockSelection)
 80052e8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80052ec:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80052f0:	f000 80c7 	beq.w	8005482 <HAL_RCCEx_PeriphCLKConfig+0x632>
 80052f4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80052f8:	f000 80c9 	beq.w	800548e <HAL_RCCEx_PeriphCLKConfig+0x63e>
 80052fc:	2900      	cmp	r1, #0
 80052fe:	f000 8267 	beq.w	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005302:	2601      	movs	r6, #1
 8005304:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005306:	0359      	lsls	r1, r3, #13
 8005308:	d50f      	bpl.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x4da>
    switch (PeriphClkInit->UsbClockSelection)
 800530a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800530e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005312:	f000 80df 	beq.w	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005316:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800531a:	f000 80e1 	beq.w	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
 800531e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005322:	f000 825e 	beq.w	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x992>
 8005326:	2601      	movs	r6, #1
 8005328:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800532a:	03df      	lsls	r7, r3, #15
 800532c:	d509      	bpl.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->SdmmcClockSelection)
 800532e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005330:	2900      	cmp	r1, #0
 8005332:	f000 8237 	beq.w	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8005336:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800533a:	f000 81b8 	beq.w	80056ae <HAL_RCCEx_PeriphCLKConfig+0x85e>
 800533e:	2601      	movs	r6, #1
 8005340:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005342:	0098      	lsls	r0, r3, #2
 8005344:	f100 8171 	bmi.w	800562a <HAL_RCCEx_PeriphCLKConfig+0x7da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005348:	0399      	lsls	r1, r3, #14
 800534a:	d50b      	bpl.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch (PeriphClkInit->RngClockSelection)
 800534c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800534e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005352:	f000 821e 	beq.w	8005792 <HAL_RCCEx_PeriphCLKConfig+0x942>
 8005356:	d97d      	bls.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005358:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800535c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005360:	d07a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005362:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005364:	02df      	lsls	r7, r3, #11
 8005366:	d508      	bpl.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005368:	4a59      	ldr	r2, [pc, #356]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 800536a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800536c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800536e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005372:	430b      	orrs	r3, r1
 8005374:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005376:	e9d4 3200 	ldrd	r3, r2, [r4]
 800537a:	029d      	lsls	r5, r3, #10
 800537c:	d508      	bpl.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800537e:	4a54      	ldr	r2, [pc, #336]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 8005380:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005382:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005388:	430b      	orrs	r3, r1
 800538a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800538c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005390:	0058      	lsls	r0, r3, #1
 8005392:	d50b      	bpl.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005394:	4b4e      	ldr	r3, [pc, #312]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800539c:	611a      	str	r2, [r3, #16]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 80053a4:	430a      	orrs	r2, r1
 80053a6:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	da08      	bge.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053b0:	4a47      	ldr	r2, [pc, #284]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80053b2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80053b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80053b6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80053ba:	430b      	orrs	r3, r1
 80053bc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053be:	e9d4 3200 	ldrd	r3, r2, [r4]
 80053c2:	0219      	lsls	r1, r3, #8
 80053c4:	d508      	bpl.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053c6:	4a42      	ldr	r2, [pc, #264]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80053c8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80053cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80053ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80053d2:	430b      	orrs	r3, r1
 80053d4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80053d6:	6862      	ldr	r2, [r4, #4]
 80053d8:	07d3      	lsls	r3, r2, #31
 80053da:	f100 8101 	bmi.w	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x790>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80053de:	0797      	lsls	r7, r2, #30
 80053e0:	f100 810b 	bmi.w	80055fa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80053e4:	0755      	lsls	r5, r2, #29
 80053e6:	f100 8115 	bmi.w	8005614 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80053ea:	0710      	lsls	r0, r2, #28
 80053ec:	f100 80ed 	bmi.w	80055ca <HAL_RCCEx_PeriphCLKConfig+0x77a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053f0:	06d1      	lsls	r1, r2, #27
 80053f2:	f100 80dc 	bmi.w	80055ae <HAL_RCCEx_PeriphCLKConfig+0x75e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80053f6:	0692      	lsls	r2, r2, #26
 80053f8:	f100 8123 	bmi.w	8005642 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    return HAL_OK;
 80053fc:	1e30      	subs	r0, r6, #0
 80053fe:	bf18      	it	ne
 8005400:	2001      	movne	r0, #1
}
 8005402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005406:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800540a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800540e:	f43f aef8 	beq.w	8005202 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8005412:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8005416:	f43f aef4 	beq.w	8005202 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800541a:	2601      	movs	r6, #1
 800541c:	4635      	mov	r5, r6
 800541e:	e6fd      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005420:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8005424:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005428:	f43f af0d 	beq.w	8005246 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800542c:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8005430:	f43f af09 	beq.w	8005246 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8005434:	2601      	movs	r6, #1
 8005436:	4635      	mov	r5, r6
 8005438:	e712      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800543a:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800543e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005442:	f43f af22 	beq.w	800528a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005446:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800544a:	f43f af1e 	beq.w	800528a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800544e:	2601      	movs	r6, #1
 8005450:	4635      	mov	r5, r6
 8005452:	e727      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    switch (PeriphClkInit->RngClockSelection)
 8005454:	2900      	cmp	r1, #0
 8005456:	d184      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x512>
    if (ret == HAL_OK)
 8005458:	2d00      	cmp	r5, #0
 800545a:	f040 8196 	bne.w	800578a <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800545e:	4a1c      	ldr	r2, [pc, #112]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 8005460:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005462:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005468:	430b      	orrs	r3, r1
 800546a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800546c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005470:	e778      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005472:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005474:	2d00      	cmp	r5, #0
 8005476:	f000 80f0 	beq.w	800565a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800547a:	462e      	mov	r6, r5
 800547c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005480:	e521      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005482:	2102      	movs	r1, #2
 8005484:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005488:	f7ff fc68 	bl	8004d5c <RCCEx_PLL3_Config>
 800548c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800548e:	2d00      	cmp	r5, #0
 8005490:	f040 8134 	bne.w	80056fc <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005494:	4a0e      	ldr	r2, [pc, #56]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 8005496:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800549a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800549c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80054a0:	430b      	orrs	r3, r1
 80054a2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054a4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054a8:	e72d      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054aa:	2101      	movs	r1, #1
 80054ac:	f104 0008 	add.w	r0, r4, #8
 80054b0:	f7ff fbda 	bl	8004c68 <RCCEx_PLL2_Config>
 80054b4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	f040 8163 	bne.w	8005782 <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054bc:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80054be:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80054c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80054c2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80054c6:	430b      	orrs	r3, r1
 80054c8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054ca:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054ce:	e5bc      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80054d0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054d4:	2101      	movs	r1, #1
 80054d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80054da:	f7ff fc3f 	bl	8004d5c <RCCEx_PLL3_Config>
 80054de:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80054e0:	2d00      	cmp	r5, #0
 80054e2:	f040 814a 	bne.w	800577a <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054e6:	4ab8      	ldr	r2, [pc, #736]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80054e8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80054ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80054ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80054f2:	430b      	orrs	r3, r1
 80054f4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054f6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054fa:	e716      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x4da>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054fc:	2101      	movs	r1, #1
 80054fe:	f104 0008 	add.w	r0, r4, #8
 8005502:	f7ff fbb1 	bl	8004c68 <RCCEx_PLL2_Config>
 8005506:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005508:	2d00      	cmp	r5, #0
 800550a:	f040 8107 	bne.w	800571c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800550e:	4aae      	ldr	r2, [pc, #696]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005510:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005512:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005514:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005518:	430b      	orrs	r3, r1
 800551a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800551c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005520:	e622      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x318>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005522:	4faa      	ldr	r7, [pc, #680]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800552c:	f7fc f82c 	bl	8001588 <HAL_GetTick>
 8005530:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005532:	e006      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005534:	f7fc f828 	bl	8001588 <HAL_GetTick>
 8005538:	eba0 0008 	sub.w	r0, r0, r8
 800553c:	2864      	cmp	r0, #100	; 0x64
 800553e:	f200 8217 	bhi.w	8005970 <HAL_RCCEx_PeriphCLKConfig+0xb20>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	05db      	lsls	r3, r3, #23
 8005546:	d5f5      	bpl.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    if (ret == HAL_OK)
 8005548:	2d00      	cmp	r5, #0
 800554a:	f040 8235 	bne.w	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800554e:	4b9e      	ldr	r3, [pc, #632]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005550:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8005554:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005556:	4051      	eors	r1, r2
 8005558:	f411 7f40 	tst.w	r1, #768	; 0x300
 800555c:	d00d      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x72a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800555e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005560:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005562:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005566:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800556a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800556c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800556e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005572:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005574:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005576:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800557a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800557e:	f000 81fd 	beq.w	800597c <HAL_RCCEx_PeriphCLKConfig+0xb2c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005582:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8005586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558a:	f000 820b 	beq.w	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 800558e:	4a8e      	ldr	r2, [pc, #568]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005590:	6913      	ldr	r3, [r2, #16]
 8005592:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005596:	6113      	str	r3, [r2, #16]
 8005598:	4a8b      	ldr	r2, [pc, #556]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800559a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800559e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80055a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80055a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80055ac:	e5aa      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055ae:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80055b2:	2101      	movs	r1, #1
 80055b4:	4628      	mov	r0, r5
 80055b6:	f7ff fbd1 	bl	8004d5c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80055ba:	2800      	cmp	r0, #0
 80055bc:	f000 811a 	beq.w	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80055c0:	6863      	ldr	r3, [r4, #4]
 80055c2:	069b      	lsls	r3, r3, #26
 80055c4:	d546      	bpl.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x804>
 80055c6:	4606      	mov	r6, r0
 80055c8:	e03d      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055ca:	2100      	movs	r1, #0
 80055cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80055d0:	f7ff fbc4 	bl	8004d5c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80055d4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80055d6:	2800      	cmp	r0, #0
 80055d8:	f43f af0a 	beq.w	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80055dc:	4606      	mov	r6, r0
 80055de:	e707      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055e0:	2100      	movs	r1, #0
 80055e2:	f104 0008 	add.w	r0, r4, #8
 80055e6:	f7ff fb3f 	bl	8004c68 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80055ea:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80055ec:	2800      	cmp	r0, #0
 80055ee:	f43f aef6 	beq.w	80053de <HAL_RCCEx_PeriphCLKConfig+0x58e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80055f2:	0797      	lsls	r7, r2, #30
 80055f4:	4606      	mov	r6, r0
 80055f6:	f57f aef5 	bpl.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055fa:	2101      	movs	r1, #1
 80055fc:	f104 0008 	add.w	r0, r4, #8
 8005600:	f7ff fb32 	bl	8004c68 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005604:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005606:	2800      	cmp	r0, #0
 8005608:	f43f aeec 	beq.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800560c:	0755      	lsls	r5, r2, #29
 800560e:	4606      	mov	r6, r0
 8005610:	f57f aeeb 	bpl.w	80053ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005614:	2102      	movs	r1, #2
 8005616:	f104 0008 	add.w	r0, r4, #8
 800561a:	f7ff fb25 	bl	8004c68 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800561e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005620:	2800      	cmp	r0, #0
 8005622:	f43f aee2 	beq.w	80053ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005626:	4606      	mov	r6, r0
 8005628:	e6df      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800562a:	2102      	movs	r1, #2
 800562c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005630:	f7ff fb94 	bl	8004d5c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005634:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005638:	2800      	cmp	r0, #0
 800563a:	f43f ae85 	beq.w	8005348 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
      status = HAL_ERROR;
 800563e:	2601      	movs	r6, #1
 8005640:	e682      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005642:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005646:	2102      	movs	r1, #2
 8005648:	4628      	mov	r0, r5
 800564a:	f7ff fb87 	bl	8004d5c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800564e:	2800      	cmp	r0, #0
 8005650:	f43f aed4 	beq.w	80053fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
  return HAL_ERROR;
 8005654:	2001      	movs	r0, #1
}
 8005656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800565a:	4a5b      	ldr	r2, [pc, #364]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800565c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800565e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005660:	f023 0307 	bic.w	r3, r3, #7
 8005664:	430b      	orrs	r3, r1
 8005666:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005668:	e9d4 3200 	ldrd	r3, r2, [r4]
 800566c:	e42b      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800566e:	4a56      	ldr	r2, [pc, #344]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005670:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005674:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005676:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800567a:	430b      	orrs	r3, r1
 800567c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800567e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005682:	e43d      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005684:	4a50      	ldr	r2, [pc, #320]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005686:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005688:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800568a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568e:	430b      	orrs	r3, r1
 8005690:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005692:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005696:	e489      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005698:	4a4b      	ldr	r2, [pc, #300]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800569a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800569e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80056a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80056a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80056ac:	e445      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056ae:	2102      	movs	r1, #2
 80056b0:	f104 0008 	add.w	r0, r4, #8
 80056b4:	f7ff fad8 	bl	8004c68 <RCCEx_PLL2_Config>
 80056b8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80056ba:	2d00      	cmp	r5, #0
 80056bc:	d079      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x962>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056be:	462e      	mov	r6, r5
 80056c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80056c4:	e63d      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c6:	4a40      	ldr	r2, [pc, #256]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80056c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80056ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ce:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056d0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80056d2:	f7ff bbda 	b.w	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d6:	4a3c      	ldr	r2, [pc, #240]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80056d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80056da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056de:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80056e0:	e425      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xde>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e2:	4a39      	ldr	r2, [pc, #228]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80056e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80056e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ea:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80056ec:	e458      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x150>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ee:	4a36      	ldr	r2, [pc, #216]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80056f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80056f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80056f8:	f7ff bbfc 	b.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056fc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005700:	462e      	mov	r6, r5
 8005702:	e600      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005704:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005708:	462e      	mov	r6, r5
 800570a:	e433      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800570c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005710:	462e      	mov	r6, r5
 8005712:	e5c7      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005714:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005718:	462e      	mov	r6, r5
 800571a:	e57f      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800571c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005720:	462e      	mov	r6, r5
 8005722:	e521      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005724:	4a28      	ldr	r2, [pc, #160]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005726:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800572a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800572c:	f023 0307 	bic.w	r3, r3, #7
 8005730:	430b      	orrs	r3, r1
 8005732:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005734:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005738:	e54e      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800573a:	4a23      	ldr	r2, [pc, #140]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800573c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800573e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005740:	f023 0307 	bic.w	r3, r3, #7
 8005744:	430b      	orrs	r3, r1
 8005746:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005748:	e9d4 3200 	ldrd	r3, r2, [r4]
 800574c:	e526      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x34c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800574e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005752:	462e      	mov	r6, r5
 8005754:	e584      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x410>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005756:	e9d4 3200 	ldrd	r3, r2, [r4]
 800575a:	462e      	mov	r6, r5
 800575c:	e465      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800575e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005762:	462e      	mov	r6, r5
 8005764:	e441      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x19a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005766:	4a18      	ldr	r2, [pc, #96]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005768:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800576a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800576c:	f023 0303 	bic.w	r3, r3, #3
 8005770:	430b      	orrs	r3, r1
 8005772:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005774:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005778:	e4c1      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800577a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800577e:	462e      	mov	r6, r5
 8005780:	e5d3      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x4da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005782:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005786:	462e      	mov	r6, r5
 8005788:	e45f      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800578a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800578e:	462e      	mov	r6, r5
 8005790:	e5e8      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x514>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005792:	4a0d      	ldr	r2, [pc, #52]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005794:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800579a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800579c:	2d00      	cmp	r5, #0
 800579e:	f43f ae5e 	beq.w	800545e <HAL_RCCEx_PeriphCLKConfig+0x60e>
 80057a2:	e7f2      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x93a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a4:	4a08      	ldr	r2, [pc, #32]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80057a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	d185      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x86e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057b2:	4a05      	ldr	r2, [pc, #20]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80057b4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80057b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80057b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057bc:	430b      	orrs	r3, r1
 80057be:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057c4:	e5bd      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80057c6:	bf00      	nop
 80057c8:	58024400 	.word	0x58024400
 80057cc:	58024800 	.word	0x58024800
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057d0:	f104 0008 	add.w	r0, r4, #8
 80057d4:	f7ff fa48 	bl	8004c68 <RCCEx_PLL2_Config>
 80057d8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80057da:	2d00      	cmp	r5, #0
 80057dc:	f43f ae5a 	beq.w	8005494 <HAL_RCCEx_PeriphCLKConfig+0x644>
 80057e0:	e78c      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x8ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e2:	4a7f      	ldr	r2, [pc, #508]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80057e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ea:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80057ec:	2d00      	cmp	r5, #0
 80057ee:	f43f ae7a 	beq.w	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
 80057f2:	e7c2      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x92a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80057f4:	6862      	ldr	r2, [r4, #4]
 80057f6:	e5fe      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f8:	4a79      	ldr	r2, [pc, #484]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80057fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005800:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005802:	2d00      	cmp	r5, #0
 8005804:	f43f ae5a 	beq.w	80054bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005808:	e7bb      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x932>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800580a:	2102      	movs	r1, #2
 800580c:	f104 0008 	add.w	r0, r4, #8
 8005810:	f7ff fa2a 	bl	8004c68 <RCCEx_PLL2_Config>
 8005814:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005816:	2d00      	cmp	r5, #0
 8005818:	d0a5      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x916>
 800581a:	e46d      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800581c:	2102      	movs	r1, #2
 800581e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005822:	f7ff fa9b 	bl	8004d5c <RCCEx_PLL3_Config>
 8005826:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005828:	2d00      	cmp	r5, #0
 800582a:	f43f ad31 	beq.w	8005290 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800582e:	e76d      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005830:	2102      	movs	r1, #2
 8005832:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005836:	f7ff fa91 	bl	8004d5c <RCCEx_PLL3_Config>
 800583a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800583c:	2d00      	cmp	r5, #0
 800583e:	f43f ad05 	beq.w	800524c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005842:	e784      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005844:	2101      	movs	r1, #1
 8005846:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800584a:	f7ff fa87 	bl	8004d5c <RCCEx_PLL3_Config>
 800584e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005850:	2d00      	cmp	r5, #0
 8005852:	f43f abc1 	beq.w	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005856:	e782      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x90e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005858:	2101      	movs	r1, #1
 800585a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800585e:	f7ff fa7d 	bl	8004d5c <RCCEx_PLL3_Config>
 8005862:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005864:	2d00      	cmp	r5, #0
 8005866:	f43f abd6 	beq.w	8005016 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800586a:	e774      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x906>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800586c:	2102      	movs	r1, #2
 800586e:	f104 0008 	add.w	r0, r4, #8
 8005872:	f7ff f9f9 	bl	8004c68 <RCCEx_PLL2_Config>
 8005876:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005878:	2d00      	cmp	r5, #0
 800587a:	f43f ab72 	beq.w	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800587e:	e741      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005880:	2102      	movs	r1, #2
 8005882:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005886:	f7ff fa69 	bl	8004d5c <RCCEx_PLL3_Config>
 800588a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800588c:	2d00      	cmp	r5, #0
 800588e:	f43f acbb 	beq.w	8005208 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8005892:	e73f      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005894:	2102      	movs	r1, #2
 8005896:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800589a:	f7ff fa5f 	bl	8004d5c <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800589e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f43f ad16 	beq.w	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
        status = HAL_ERROR;
 80058a8:	2601      	movs	r6, #1
 80058aa:	e513      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058ac:	2102      	movs	r1, #2
 80058ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058b2:	f7ff fa53 	bl	8004d5c <RCCEx_PLL3_Config>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80058b6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f43f acfa 	beq.w	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x464>
        status = HAL_ERROR;
 80058c0:	2601      	movs	r6, #1
 80058c2:	e4f7      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x464>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058c4:	2102      	movs	r1, #2
 80058c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058ca:	f7ff fa47 	bl	8004d5c <RCCEx_PLL3_Config>
 80058ce:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80058d0:	2e00      	cmp	r6, #0
 80058d2:	f43f aad9 	beq.w	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x38>
 80058d6:	f7ff badf 	b.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x48>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058da:	4a41      	ldr	r2, [pc, #260]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
        break;
 80058dc:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80058e6:	e5c5      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058e8:	2100      	movs	r1, #0
 80058ea:	f104 0008 	add.w	r0, r4, #8
 80058ee:	f7ff f9bb 	bl	8004c68 <RCCEx_PLL2_Config>
 80058f2:	4605      	mov	r5, r0
        break;
 80058f4:	e5be      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058f6:	2100      	movs	r1, #0
 80058f8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058fc:	f7ff fa2e 	bl	8004d5c <RCCEx_PLL3_Config>
 8005900:	4605      	mov	r5, r0
        break;
 8005902:	e5b7      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005904:	2100      	movs	r1, #0
 8005906:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800590a:	f7ff fa27 	bl	8004d5c <RCCEx_PLL3_Config>
 800590e:	4605      	mov	r5, r0
        break;
 8005910:	f7ff bb0d 	b.w	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xde>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005914:	2100      	movs	r1, #0
 8005916:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800591a:	f7ff fa1f 	bl	8004d5c <RCCEx_PLL3_Config>
 800591e:	4605      	mov	r5, r0
        break;
 8005920:	f7ff bb3e 	b.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x150>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005924:	2100      	movs	r1, #0
 8005926:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800592a:	f7ff fa17 	bl	8004d5c <RCCEx_PLL3_Config>
 800592e:	4605      	mov	r5, r0
        break;
 8005930:	f7ff bae0 	b.w	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005934:	2101      	movs	r1, #1
 8005936:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800593a:	f7ff fa0f 	bl	8004d5c <RCCEx_PLL3_Config>
 800593e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005940:	2d00      	cmp	r5, #0
 8005942:	f43f aeef 	beq.w	8005724 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8005946:	e444      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005948:	2101      	movs	r1, #1
 800594a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800594e:	f7ff fa05 	bl	8004d5c <RCCEx_PLL3_Config>
 8005952:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005954:	2d00      	cmp	r5, #0
 8005956:	f43f aef0 	beq.w	800573a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800595a:	e41c      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x346>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800595c:	2101      	movs	r1, #1
 800595e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005962:	f7ff f9fb 	bl	8004d5c <RCCEx_PLL3_Config>
 8005966:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005968:	2d00      	cmp	r5, #0
 800596a:	f43f add0 	beq.w	800550e <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800596e:	e6d5      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
        status = ret;
 8005970:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005972:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005976:	4635      	mov	r5, r6
 8005978:	f7ff bbc4 	b.w	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        tickstart = HAL_GetTick();
 800597c:	f7fb fe04 	bl	8001588 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005980:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80059e0 <HAL_RCCEx_PeriphCLKConfig+0xb90>
        tickstart = HAL_GetTick();
 8005984:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005986:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800598a:	e004      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xb46>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800598c:	f7fb fdfc 	bl	8001588 <HAL_GetTick>
 8005990:	1bc0      	subs	r0, r0, r7
 8005992:	4548      	cmp	r0, r9
 8005994:	d8ec      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xb20>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005996:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800599a:	0798      	lsls	r0, r3, #30
 800599c:	d5f6      	bpl.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xb3c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800599e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80059a2:	e5ee      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x732>
 80059a4:	490e      	ldr	r1, [pc, #56]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80059a6:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb94>)
 80059a8:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 80059ac:	690a      	ldr	r2, [r1, #16]
 80059ae:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80059b2:	4313      	orrs	r3, r2
 80059b4:	610b      	str	r3, [r1, #16]
 80059b6:	e5ef      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x748>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80059bc:	462e      	mov	r6, r5
 80059be:	f7ff bba1 	b.w	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Sai1ClockSelection)
 80059c2:	2601      	movs	r6, #1
 80059c4:	f7ff ba7e 	b.w	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80059c8:	2601      	movs	r6, #1
 80059ca:	4635      	mov	r5, r6
 80059cc:	e404      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80059ce:	2601      	movs	r6, #1
 80059d0:	4635      	mov	r5, r6
 80059d2:	f7ff bbe3 	b.w	800519c <HAL_RCCEx_PeriphCLKConfig+0x34c>
    switch (PeriphClkInit->FmcClockSelection)
 80059d6:	2601      	movs	r6, #1
 80059d8:	4635      	mov	r5, r6
 80059da:	f7ff bb90 	b.w	80050fe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80059de:	bf00      	nop
 80059e0:	58024400 	.word	0x58024400
 80059e4:	00ffffcf 	.word	0x00ffffcf

080059e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059e8:	4a50      	ldr	r2, [pc, #320]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 80059ea:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80059ee:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80059f0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 80059f2:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80059f6:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80059fa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 80059fc:	d05d      	beq.n	8005aba <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80059fe:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a02:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a06:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a0a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005a0e:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a10:	ee07 4a90 	vmov	s15, r4
 8005a14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005a18:	d003      	beq.n	8005a22 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8005a1a:	2902      	cmp	r1, #2
 8005a1c:	d078      	beq.n	8005b10 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 8005a1e:	2900      	cmp	r1, #0
 8005a20:	d050      	beq.n	8005ac4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005a30:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8005a34:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8005a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3c:	ee07 3a90 	vmov	s15, r3
 8005a40:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a48:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005a4c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a54:	4a35      	ldr	r2, [pc, #212]	; (8005b2c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8005a56:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005a5a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005a5c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8005a68:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a6a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005a76:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005a7a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005a7c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a88:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a90:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005a94:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005a98:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005a9a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005a9e:	ee07 3a10 	vmov	s14, r3
 8005aa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005aa6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ab2:	ee17 3a90 	vmov	r3, s15
 8005ab6:	6083      	str	r3, [r0, #8]
}
 8005ab8:	4770      	bx	lr
 8005aba:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005abc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ac0:	6083      	str	r3, [r0, #8]
}
 8005ac2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ac4:	6811      	ldr	r1, [r2, #0]
 8005ac6:	0689      	lsls	r1, r1, #26
 8005ac8:	d529      	bpl.n	8005b1e <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aca:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005acc:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ad0:	4919      	ldr	r1, [pc, #100]	; (8005b38 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad6:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ad8:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ae0:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8005ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ae8:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aea:	ee06 3a10 	vmov	s12, r3
 8005aee:	ee05 1a90 	vmov	s11, r1
 8005af2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005af6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005afa:	ee36 6a26 	vadd.f32	s12, s12, s13
 8005afe:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8005b02:	eef0 7a46 	vmov.f32	s15, s12
 8005b06:	eee7 7a05 	vfma.f32	s15, s14, s10
 8005b0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b0e:	e7a1      	b.n	8005a54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b10:	ee07 3a90 	vmov	s15, r3
 8005b14:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8005b3c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8005b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b1c:	e787      	b.n	8005a2e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8005b40 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 8005b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b2a:	e780      	b.n	8005a2e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005b2c:	58024400 	.word	0x58024400
 8005b30:	4a742400 	.word	0x4a742400
 8005b34:	39000000 	.word	0x39000000
 8005b38:	03d09000 	.word	0x03d09000
 8005b3c:	4bbebc20 	.word	0x4bbebc20
 8005b40:	4c742400 	.word	0x4c742400

08005b44 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b44:	4a50      	ldr	r2, [pc, #320]	; (8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 8005b46:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b48:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b4a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b4c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8005b4e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b52:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b56:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8005b58:	d05d      	beq.n	8005c16 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b5a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b5e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b62:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b66:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005b6a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b6c:	ee07 4a90 	vmov	s15, r4
 8005b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005b74:	d003      	beq.n	8005b7e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8005b76:	2902      	cmp	r1, #2
 8005b78:	d078      	beq.n	8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 8005b7a:	2900      	cmp	r1, #0
 8005b7c:	d050      	beq.n	8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005b8c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8005b90:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8005c90 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b98:	ee07 3a90 	vmov	s15, r3
 8005b9c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005ba8:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005bac:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005bb0:	4a35      	ldr	r2, [pc, #212]	; (8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 8005bb2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005bb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005bb8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005bbc:	ee07 3a90 	vmov	s15, r3
 8005bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8005bc4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005bc6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005bd2:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005bd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005bd8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005bdc:	ee07 3a90 	vmov	s15, r3
 8005be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bec:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005bf0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005bf4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005bf6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005bfa:	ee07 3a10 	vmov	s14, r3
 8005bfe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005c02:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c0e:	ee17 3a90 	vmov	r3, s15
 8005c12:	6083      	str	r3, [r0, #8]
}
 8005c14:	4770      	bx	lr
 8005c16:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c18:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c1c:	6083      	str	r3, [r0, #8]
}
 8005c1e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c20:	6811      	ldr	r1, [r2, #0]
 8005c22:	0689      	lsls	r1, r1, #26
 8005c24:	d529      	bpl.n	8005c7a <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c26:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c28:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c2c:	4919      	ldr	r1, [pc, #100]	; (8005c94 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c32:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c34:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c3c:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005c90 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c44:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c46:	ee06 3a10 	vmov	s12, r3
 8005c4a:	ee05 1a90 	vmov	s11, r1
 8005c4e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005c52:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005c56:	ee36 6a26 	vadd.f32	s12, s12, s13
 8005c5a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8005c5e:	eef0 7a46 	vmov.f32	s15, s12
 8005c62:	eee7 7a05 	vfma.f32	s15, s14, s10
 8005c66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c6a:	e7a1      	b.n	8005bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c6c:	ee07 3a90 	vmov	s15, r3
 8005c70:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8005c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c78:	e787      	b.n	8005b8a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8005c9c <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 8005c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c86:	e780      	b.n	8005b8a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	4a742400 	.word	0x4a742400
 8005c90:	39000000 	.word	0x39000000
 8005c94:	03d09000 	.word	0x03d09000
 8005c98:	4bbebc20 	.word	0x4bbebc20
 8005c9c:	4c742400 	.word	0x4c742400

08005ca0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ca0:	4a51      	ldr	r2, [pc, #324]	; (8005de8 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 8005ca2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ca4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005ca6:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005ca8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 8005caa:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005cae:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cb2:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8005cb4:	d05e      	beq.n	8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cb6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005cba:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cbe:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cc2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005cc6:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cc8:	ee07 4a90 	vmov	s15, r4
 8005ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005cd0:	f000 8082 	beq.w	8005dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 8005cd4:	2902      	cmp	r1, #2
 8005cd6:	d078      	beq.n	8005dca <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	d050      	beq.n	8005d7e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cdc:	ee07 3a90 	vmov	s15, r3
 8005ce0:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8005dec <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8005ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ce8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005cea:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8005cee:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8005df0 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8005cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d02:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005d06:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005d0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005d0e:	4a36      	ldr	r2, [pc, #216]	; (8005de8 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 8005d10:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005d14:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d16:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8005d22:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005d24:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005d30:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005d34:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d36:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d42:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005d4e:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005d52:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d54:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005d58:	ee07 3a10 	vmov	s14, r3
 8005d5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d60:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d6c:	ee17 3a90 	vmov	r3, s15
 8005d70:	6083      	str	r3, [r0, #8]
}
 8005d72:	4770      	bx	lr
 8005d74:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d76:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005d7a:	6083      	str	r3, [r0, #8]
}
 8005d7c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d7e:	6811      	ldr	r1, [r2, #0]
 8005d80:	0689      	lsls	r1, r1, #26
 8005d82:	d5ab      	bpl.n	8005cdc <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d84:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d86:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d8a:	491a      	ldr	r1, [pc, #104]	; (8005df4 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d90:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d92:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d9a:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8005df0 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8005d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005da2:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005da4:	ee06 3a10 	vmov	s12, r3
 8005da8:	ee05 1a90 	vmov	s11, r1
 8005dac:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005db0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005db4:	ee36 6a26 	vadd.f32	s12, s12, s13
 8005db8:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8005dbc:	eef0 7a46 	vmov.f32	s15, s12
 8005dc0:	eee7 7a05 	vfma.f32	s15, s14, s10
 8005dc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005dc8:	e7a1      	b.n	8005d0e <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 8005dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dd6:	e787      	b.n	8005ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dd8:	ee07 3a90 	vmov	s15, r3
 8005ddc:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8005dfc <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 8005de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005de4:	e780      	b.n	8005ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 8005de6:	bf00      	nop
 8005de8:	58024400 	.word	0x58024400
 8005dec:	4c742400 	.word	0x4c742400
 8005df0:	39000000 	.word	0x39000000
 8005df4:	03d09000 	.word	0x03d09000
 8005df8:	4bbebc20 	.word	0x4bbebc20
 8005dfc:	4a742400 	.word	0x4a742400

08005e00 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e00:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8005e04:	430b      	orrs	r3, r1
{
 8005e06:	b500      	push	{lr}
 8005e08:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e0a:	d075      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005e0c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8005e10:	430b      	orrs	r3, r1
 8005e12:	d034      	beq.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005e14:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	f000 80ca 	beq.w	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005e1e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8005e22:	430b      	orrs	r3, r1
 8005e24:	d07c      	beq.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005e26:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8005e2a:	430b      	orrs	r3, r1
 8005e2c:	f000 80d7 	beq.w	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e30:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8005e34:	430b      	orrs	r3, r1
 8005e36:	f000 8130 	beq.w	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e3a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	f000 8144 	beq.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e44:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	f000 8107 	beq.w	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005e4e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8005e52:	4308      	orrs	r0, r1
 8005e54:	d13a      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005e56:	4b98      	ldr	r3, [pc, #608]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8005e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e62:	f000 8083 	beq.w	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e6a:	f000 815f 	beq.w	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8005e6e:	bb6b      	cbnz	r3, 8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e70:	4b91      	ldr	r3, [pc, #580]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005e78:	d03b      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          frequency = HSE_VALUE;
 8005e7a:	4890      	ldr	r0, [pc, #576]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e7c:	e039      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005e7e:	4a8e      	ldr	r2, [pc, #568]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e80:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005e82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8005e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e8a:	f000 808d 	beq.w	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005e8e:	d921      	bls.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8005e90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005e94:	d02c      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005e96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e9a:	d117      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e9c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e9e:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ea0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ea4:	0749      	lsls	r1, r1, #29
 8005ea6:	d502      	bpl.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80ca 	beq.w	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005eae:	4a82      	ldr	r2, [pc, #520]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	05d0      	lsls	r0, r2, #23
 8005eb4:	d503      	bpl.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8005eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eba:	f000 80cd 	beq.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ebe:	4a7e      	ldr	r2, [pc, #504]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	0391      	lsls	r1, r2, #14
 8005ec4:	d502      	bpl.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eca:	d0d6      	beq.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    switch (srcclk)
 8005ecc:	2000      	movs	r0, #0
}
 8005ece:	b005      	add	sp, #20
 8005ed0:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d040      	beq.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005ed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005edc:	d1f6      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ede:	6810      	ldr	r0, [r2, #0]
 8005ee0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005ee4:	d005      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ee6:	a801      	add	r0, sp, #4
 8005ee8:	f7ff fd7e 	bl	80059e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005eec:	9801      	ldr	r0, [sp, #4]
 8005eee:	e000      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ef0:	4873      	ldr	r0, [pc, #460]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8005ef2:	b005      	add	sp, #20
 8005ef4:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005ef8:	4b6f      	ldr	r3, [pc, #444]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efc:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d8e3      	bhi.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005f04:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005f6d 	.word	0x08005f6d
 8005f10:	08005f79 	.word	0x08005f79
 8005f14:	08005f89 	.word	0x08005f89
 8005f18:	08005ef1 	.word	0x08005ef1
 8005f1c:	08005f85 	.word	0x08005f85
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005f20:	4a65      	ldr	r2, [pc, #404]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f22:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f24:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8005f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2c:	d03c      	beq.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005f2e:	d935      	bls.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8005f30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f34:	d0dc      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f3a:	d1c7      	bne.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f3c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f3e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f44:	0752      	lsls	r2, r2, #29
 8005f46:	d5b2      	bpl.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1b0      	bne.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f4c:	4b5a      	ldr	r3, [pc, #360]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f4e:	485d      	ldr	r0, [pc, #372]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f56:	40d8      	lsrs	r0, r3
 8005f58:	e7cb      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f5a:	6810      	ldr	r0, [r2, #0]
 8005f5c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005f60:	d0c7      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f62:	a801      	add	r0, sp, #4
 8005f64:	f7ff fe9c 	bl	8005ca0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f68:	9802      	ldr	r0, [sp, #8]
 8005f6a:	e7c2      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f6c:	4b52      	ldr	r3, [pc, #328]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005f74:	d0bd      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005f76:	e7f4      	b.n	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f78:	4b4f      	ldr	r3, [pc, #316]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005f80:	d0b7      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005f82:	e7b0      	b.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f84:	4a4c      	ldr	r2, [pc, #304]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f86:	e789      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f88:	4b4b      	ldr	r3, [pc, #300]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005f90:	d0af      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f92:	a801      	add	r0, sp, #4
 8005f94:	f7ff fdd6 	bl	8005b44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f98:	9801      	ldr	r0, [sp, #4]
 8005f9a:	e7aa      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    switch (srcclk)
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0dc      	beq.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa4:	d09b      	beq.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005fa6:	e791      	b.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fa8:	6810      	ldr	r0, [r2, #0]
 8005faa:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005fae:	d0a0      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005fb0:	e7ef      	b.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005fb2:	4a41      	ldr	r2, [pc, #260]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005fb4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005fb6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8005fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fbe:	d0f3      	beq.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005fc0:	d805      	bhi.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0c9      	beq.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005fc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fca:	d088      	beq.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005fcc:	e77e      	b.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005fce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005fd2:	d08d      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fd8:	f43f af60 	beq.w	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8005fdc:	e776      	b.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005fde:	4a36      	ldr	r2, [pc, #216]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005fe0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005fe2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8005fe6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fea:	d025      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8005fec:	d80f      	bhi.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff2:	d048      	beq.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8005ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ff8:	d116      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ffa:	6810      	ldr	r0, [r2, #0]
 8005ffc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006000:	f43f af77 	beq.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006004:	a801      	add	r0, sp, #4
 8006006:	f7ff fd9d 	bl	8005b44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800600a:	9802      	ldr	r0, [sp, #8]
 800600c:	e771      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    switch (srcclk)
 800600e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006012:	d01c      	beq.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
 8006014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006018:	f47f af58 	bne.w	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800601c:	6810      	ldr	r0, [r2, #0]
 800601e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006022:	f43f af66 	beq.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006026:	e728      	b.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    switch (srcclk)
 8006028:	2b00      	cmp	r3, #0
 800602a:	f47f af4f 	bne.w	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
}
 800602e:	b005      	add	sp, #20
 8006030:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8006034:	f7fe bdd0 	b.w	8004bd8 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006038:	6810      	ldr	r0, [r2, #0]
 800603a:	f010 0004 	ands.w	r0, r0, #4
 800603e:	f43f af58 	beq.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006042:	6813      	ldr	r3, [r2, #0]
 8006044:	481f      	ldr	r0, [pc, #124]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006046:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800604a:	40d8      	lsrs	r0, r3
 800604c:	e751      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800604e:	6810      	ldr	r0, [r2, #0]
 8006050:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8006054:	f43f af4d 	beq.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          frequency = CSI_VALUE;
 8006058:	481b      	ldr	r0, [pc, #108]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800605a:	e74a      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800605c:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800605e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006060:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8006064:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006068:	d067      	beq.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800606a:	d83e      	bhi.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800606c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006070:	d05c      	beq.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006076:	d140      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006078:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006080:	f43f af37 	beq.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006084:	e7be      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006086:	6810      	ldr	r0, [r2, #0]
 8006088:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800608c:	f43f af31 	beq.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006090:	a801      	add	r0, sp, #4
 8006092:	f7ff fca9 	bl	80059e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006096:	9802      	ldr	r0, [sp, #8]
 8006098:	e72b      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800609a:	4a07      	ldr	r2, [pc, #28]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800609c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800609e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 80060a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a6:	d037      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80060a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ac:	f43f af46 	beq.w	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f47f af0b 	bne.w	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80060b6:	e712      	b.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 80060b8:	58024400 	.word	0x58024400
 80060bc:	017d7840 	.word	0x017d7840
 80060c0:	00bb8000 	.word	0x00bb8000
 80060c4:	03d09000 	.word	0x03d09000
 80060c8:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80060cc:	4b21      	ldr	r3, [pc, #132]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80060ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 80060d0:	03d2      	lsls	r2, r2, #15
 80060d2:	f57f af4c 	bpl.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80060dc:	f43f af09 	beq.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060e0:	a801      	add	r0, sp, #4
 80060e2:	f7ff fc81 	bl	80059e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80060e6:	9803      	ldr	r0, [sp, #12]
 80060e8:	e703      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    switch (srcclk)
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ee:	d02a      	beq.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80060f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060f4:	f43f aebc 	beq.w	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
 80060f8:	e6e8      	b.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f47f aee6 	bne.w	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006100:	f7fe fd2a 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8006104:	4b13      	ldr	r3, [pc, #76]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006106:	4a14      	ldr	r2, [pc, #80]	; (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800610e:	5cd3      	ldrb	r3, [r2, r3]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	40d8      	lsrs	r0, r3
        break;
 8006116:	e6ec      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006118:	6810      	ldr	r0, [r2, #0]
 800611a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800611e:	f43f aee8 	beq.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006122:	a801      	add	r0, sp, #4
 8006124:	f7ff fd0e 	bl	8005b44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006128:	9803      	ldr	r0, [sp, #12]
 800612a:	e6e2      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800612c:	4b09      	ldr	r3, [pc, #36]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006134:	f43f aedd 	beq.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006138:	e7aa      	b.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800613a:	6810      	ldr	r0, [r2, #0]
 800613c:	f010 0004 	ands.w	r0, r0, #4
 8006140:	f43f aed7 	beq.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006144:	e702      	b.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006146:	4b03      	ldr	r3, [pc, #12]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800614e:	f43f aed0 	beq.w	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006152:	e781      	b.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006154:	58024400 	.word	0x58024400
 8006158:	08008610 	.word	0x08008610

0800615c <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800615c:	2800      	cmp	r0, #0
 800615e:	d063      	beq.n	8006228 <HAL_RNG_Init+0xcc>
{
 8006160:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006162:	7a43      	ldrb	r3, [r0, #9]
 8006164:	4604      	mov	r4, r0
 8006166:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800616a:	2b00      	cmp	r3, #0
 800616c:	d052      	beq.n	8006214 <HAL_RNG_Init+0xb8>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800616e:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8006170:	2202      	movs	r2, #2

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8006172:	4b2e      	ldr	r3, [pc, #184]	; (800622c <HAL_RNG_Init+0xd0>)
  hrng->State = HAL_RNG_STATE_BUSY;
 8006174:	7262      	strb	r2, [r4, #9]
  __HAL_RNG_DISABLE(hrng);
 8006176:	680a      	ldr	r2, [r1, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8006178:	482d      	ldr	r0, [pc, #180]	; (8006230 <HAL_RNG_Init+0xd4>)
  __HAL_RNG_DISABLE(hrng);
 800617a:	f022 0204 	bic.w	r2, r2, #4
 800617e:	600a      	str	r2, [r1, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8006180:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006184:	6815      	ldr	r5, [r2, #0]
 8006186:	402b      	ands	r3, r5
 8006188:	430b      	orrs	r3, r1
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800618a:	f247 2174 	movw	r1, #29300	; 0x7274
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800618e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006192:	6013      	str	r3, [r2, #0]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	6118      	str	r0, [r3, #16]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	6119      	str	r1, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800619c:	6822      	ldr	r2, [r4, #0]
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061a6:	f7fb f9ef 	bl	8001588 <HAL_GetTick>

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80061aa:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80061ac:	4605      	mov	r5, r0
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	0051      	lsls	r1, r2, #1
 80061b2:	d50d      	bpl.n	80061d0 <HAL_RNG_Init+0x74>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80061b4:	f7fb f9e8 	bl	8001588 <HAL_GetTick>
 80061b8:	1b40      	subs	r0, r0, r5
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80061ba:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80061bc:	2802      	cmp	r0, #2
 80061be:	d9f6      	bls.n	80061ae <HAL_RNG_Init+0x52>
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	0052      	lsls	r2, r2, #1
 80061c4:	d5f3      	bpl.n	80061ae <HAL_RNG_Init+0x52>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80061c6:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80061c8:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 80061ca:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80061cc:	60e3      	str	r3, [r4, #12]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_RNG_ENABLE(hrng);
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	f042 0204 	orr.w	r2, r2, #4
 80061d6:	601a      	str	r2, [r3, #0]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	0658      	lsls	r0, r3, #25
 80061de:	d503      	bpl.n	80061e8 <HAL_RNG_Init+0x8c>
    hrng->State = HAL_RNG_STATE_ERROR;
 80061e0:	2304      	movs	r3, #4
    return HAL_ERROR;
 80061e2:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 80061e4:	7263      	strb	r3, [r4, #9]
}
 80061e6:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 80061e8:	f7fb f9ce 	bl	8001588 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80061ec:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80061ee:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	0759      	lsls	r1, r3, #29
 80061f4:	d512      	bpl.n	800621c <HAL_RNG_Init+0xc0>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80061f6:	f7fb f9c7 	bl	8001588 <HAL_GetTick>
 80061fa:	1b40      	subs	r0, r0, r5
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80061fc:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80061fe:	2802      	cmp	r0, #2
 8006200:	d9f6      	bls.n	80061f0 <HAL_RNG_Init+0x94>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	0752      	lsls	r2, r2, #29
 8006206:	d5f3      	bpl.n	80061f0 <HAL_RNG_Init+0x94>
        hrng->State = HAL_RNG_STATE_ERROR;
 8006208:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800620a:	2302      	movs	r3, #2
        return HAL_ERROR;
 800620c:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 800620e:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006210:	60e3      	str	r3, [r4, #12]
}
 8006212:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8006214:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8006216:	f7fa ff43 	bl	80010a0 <HAL_RNG_MspInit>
 800621a:	e7a8      	b.n	800616e <HAL_RNG_Init+0x12>
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800621c:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 800621e:	2201      	movs	r2, #1
  return HAL_OK;
 8006220:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8006222:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006224:	60e3      	str	r3, [r4, #12]
}
 8006226:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006228:	2001      	movs	r0, #1
}
 800622a:	4770      	bx	lr
 800622c:	bfffffdf 	.word	0xbfffffdf
 8006230:	17590abc 	.word	0x17590abc

08006234 <HAL_RNG_ErrorCallback>:
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop

08006238 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 8006238:	b510      	push	{r4, lr}
  __IO uint32_t count = 0U;
 800623a:	2300      	movs	r3, #0
{
 800623c:	b082      	sub	sp, #8
 800623e:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8006240:	9301      	str	r3, [sp, #4]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8006242:	6803      	ldr	r3, [r0, #0]
 8006244:	6859      	ldr	r1, [r3, #4]
 8006246:	074c      	lsls	r4, r1, #29
 8006248:	d40a      	bmi.n	8006260 <RNG_RecoverSeedError+0x28>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800624a:	6859      	ldr	r1, [r3, #4]
 800624c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006250:	6059      	str	r1, [r3, #4]
        return HAL_ERROR;
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8006252:	68d3      	ldr	r3, [r2, #12]
  return HAL_OK;
 8006254:	2000      	movs	r0, #0
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8006256:	f023 0308 	bic.w	r3, r3, #8
 800625a:	60d3      	str	r3, [r2, #12]
}
 800625c:	b002      	add	sp, #8
 800625e:	bd10      	pop	{r4, pc}
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8006260:	6819      	ldr	r1, [r3, #0]
    count = RNG_TIMEOUT_VALUE;
 8006262:	2002      	movs	r0, #2
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8006264:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006268:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800626a:	6811      	ldr	r1, [r2, #0]
 800626c:	680b      	ldr	r3, [r1, #0]
 800626e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006272:	600b      	str	r3, [r1, #0]
    count = RNG_TIMEOUT_VALUE;
 8006274:	9001      	str	r0, [sp, #4]
 8006276:	e003      	b.n	8006280 <RNG_RecoverSeedError+0x48>
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 8006278:	6813      	ldr	r3, [r2, #0]
 800627a:	6819      	ldr	r1, [r3, #0]
 800627c:	0048      	lsls	r0, r1, #1
 800627e:	d512      	bpl.n	80062a6 <RNG_RecoverSeedError+0x6e>
      count-- ;
 8006280:	9b01      	ldr	r3, [sp, #4]
 8006282:	3b01      	subs	r3, #1
 8006284:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1f5      	bne.n	8006278 <RNG_RecoverSeedError+0x40>
        hrng->State = HAL_RNG_STATE_READY;
 800628c:	2401      	movs	r4, #1
        __HAL_UNLOCK(hrng);
 800628e:	7213      	strb	r3, [r2, #8]
        HAL_RNG_ErrorCallback(hrng);
 8006290:	4610      	mov	r0, r2
        hrng->State = HAL_RNG_STATE_READY;
 8006292:	7254      	strb	r4, [r2, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8006294:	68d3      	ldr	r3, [r2, #12]
 8006296:	f043 0302 	orr.w	r3, r3, #2
 800629a:	60d3      	str	r3, [r2, #12]
        HAL_RNG_ErrorCallback(hrng);
 800629c:	f7ff ffca 	bl	8006234 <HAL_RNG_ErrorCallback>
        return HAL_ERROR;
 80062a0:	4620      	mov	r0, r4
}
 80062a2:	b002      	add	sp, #8
 80062a4:	bd10      	pop	{r4, pc}
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80062a6:	6859      	ldr	r1, [r3, #4]
 80062a8:	0649      	lsls	r1, r1, #25
 80062aa:	d40d      	bmi.n	80062c8 <RNG_RecoverSeedError+0x90>
    count = RNG_TIMEOUT_VALUE;
 80062ac:	2302      	movs	r3, #2
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	e003      	b.n	80062ba <RNG_RecoverSeedError+0x82>
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	075b      	lsls	r3, r3, #29
 80062b8:	d5cb      	bpl.n	8006252 <RNG_RecoverSeedError+0x1a>
      count-- ;
 80062ba:	9b01      	ldr	r3, [sp, #4]
 80062bc:	3b01      	subs	r3, #1
 80062be:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f5      	bne.n	80062b2 <RNG_RecoverSeedError+0x7a>
 80062c6:	e7e1      	b.n	800628c <RNG_RecoverSeedError+0x54>
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80062c8:	6859      	ldr	r1, [r3, #4]
 80062ca:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80062ce:	6059      	str	r1, [r3, #4]
 80062d0:	e7ec      	b.n	80062ac <RNG_RecoverSeedError+0x74>
 80062d2:	bf00      	nop

080062d4 <HAL_RNG_GenerateRandomNumber>:
{
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrng);
 80062d6:	7a03      	ldrb	r3, [r0, #8]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d041      	beq.n	8006360 <HAL_RNG_GenerateRandomNumber+0x8c>
 80062dc:	2501      	movs	r5, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 80062de:	7a43      	ldrb	r3, [r0, #9]
 80062e0:	4604      	mov	r4, r0
 80062e2:	42ab      	cmp	r3, r5
  __HAL_LOCK(hrng);
 80062e4:	7205      	strb	r5, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 80062e6:	d005      	beq.n	80062f4 <HAL_RNG_GenerateRandomNumber+0x20>
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80062e8:	2304      	movs	r3, #4
 80062ea:	60c3      	str	r3, [r0, #12]
  __HAL_UNLOCK(hrng);
 80062ec:	2300      	movs	r3, #0
 80062ee:	7223      	strb	r3, [r4, #8]
}
 80062f0:	4628      	mov	r0, r5
 80062f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80062f4:	2202      	movs	r2, #2
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80062f6:	6803      	ldr	r3, [r0, #0]
 80062f8:	460f      	mov	r7, r1
    hrng->State = HAL_RNG_STATE_BUSY;
 80062fa:	7242      	strb	r2, [r0, #9]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80062fc:	685d      	ldr	r5, [r3, #4]
 80062fe:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8006302:	d116      	bne.n	8006332 <HAL_RNG_GenerateRandomNumber+0x5e>
    tickstart = HAL_GetTick();
 8006304:	f7fb f940 	bl	8001588 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006308:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800630a:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	07d0      	lsls	r0, r2, #31
 8006310:	d417      	bmi.n	8006342 <HAL_RNG_GenerateRandomNumber+0x6e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006312:	f7fb f939 	bl	8001588 <HAL_GetTick>
 8006316:	1b83      	subs	r3, r0, r6
 8006318:	2b02      	cmp	r3, #2
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800631a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800631c:	d9f6      	bls.n	800630c <HAL_RNG_GenerateRandomNumber+0x38>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	f012 0201 	ands.w	r2, r2, #1
 8006324:	d1f2      	bne.n	800630c <HAL_RNG_GenerateRandomNumber+0x38>
          hrng->State = HAL_RNG_STATE_READY;
 8006326:	2501      	movs	r5, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006328:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 800632a:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 800632c:	7265      	strb	r5, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800632e:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 8006330:	e7de      	b.n	80062f0 <HAL_RNG_GenerateRandomNumber+0x1c>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8006332:	2308      	movs	r3, #8
 8006334:	60c3      	str	r3, [r0, #12]
      status = RNG_RecoverSeedError(hrng);
 8006336:	f7ff ff7f 	bl	8006238 <RNG_RecoverSeedError>
      if (status == HAL_ERROR)
 800633a:	2801      	cmp	r0, #1
      status = RNG_RecoverSeedError(hrng);
 800633c:	4605      	mov	r5, r0
      if (status == HAL_ERROR)
 800633e:	d1e1      	bne.n	8006304 <HAL_RNG_GenerateRandomNumber+0x30>
 8006340:	e7d6      	b.n	80062f0 <HAL_RNG_GenerateRandomNumber+0x1c>
    hrng->RandomNumber = hrng->Instance->DR;
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	6122      	str	r2, [r4, #16]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006346:	6859      	ldr	r1, [r3, #4]
 8006348:	0649      	lsls	r1, r1, #25
 800634a:	d50c      	bpl.n	8006366 <HAL_RNG_GenerateRandomNumber+0x92>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800634c:	2208      	movs	r2, #8
      status = HAL_ERROR;
 800634e:	2501      	movs	r5, #1
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8006350:	60e2      	str	r2, [r4, #12]
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	605a      	str	r2, [r3, #4]
    hrng->State = HAL_RNG_STATE_READY;
 800635a:	2301      	movs	r3, #1
 800635c:	7263      	strb	r3, [r4, #9]
 800635e:	e7c5      	b.n	80062ec <HAL_RNG_GenerateRandomNumber+0x18>
  __HAL_LOCK(hrng);
 8006360:	2502      	movs	r5, #2
}
 8006362:	4628      	mov	r0, r5
 8006364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *random32bit = hrng->RandomNumber;
 8006366:	603a      	str	r2, [r7, #0]
 8006368:	e7f7      	b.n	800635a <HAL_RNG_GenerateRandomNumber+0x86>
 800636a:	bf00      	nop

0800636c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800636c:	6802      	ldr	r2, [r0, #0]
{
 800636e:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8006370:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006372:	6991      	ldr	r1, [r2, #24]
 8006374:	f041 0108 	orr.w	r1, r1, #8
 8006378:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800637a:	6801      	ldr	r1, [r0, #0]
 800637c:	698a      	ldr	r2, [r1, #24]
 800637e:	f042 0210 	orr.w	r2, r2, #16
 8006382:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006384:	6801      	ldr	r1, [r0, #0]
 8006386:	680a      	ldr	r2, [r1, #0]
 8006388:	f022 0201 	bic.w	r2, r2, #1
 800638c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800638e:	6801      	ldr	r1, [r0, #0]
 8006390:	4a27      	ldr	r2, [pc, #156]	; (8006430 <SPI_CloseTransfer+0xc4>)
 8006392:	690c      	ldr	r4, [r1, #16]
 8006394:	4022      	ands	r2, r4
 8006396:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006398:	6801      	ldr	r1, [r0, #0]
 800639a:	688a      	ldr	r2, [r1, #8]
 800639c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80063a0:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063a2:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80063a6:	2a04      	cmp	r2, #4
 80063a8:	d001      	beq.n	80063ae <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80063aa:	069c      	lsls	r4, r3, #26
 80063ac:	d433      	bmi.n	8006416 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063ae:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80063b2:	2a03      	cmp	r2, #3
 80063b4:	d001      	beq.n	80063ba <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80063b6:	0659      	lsls	r1, r3, #25
 80063b8:	d421      	bmi.n	80063fe <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80063ba:	059a      	lsls	r2, r3, #22
 80063bc:	d50a      	bpl.n	80063d4 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063be:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80063c2:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80063cc:	698a      	ldr	r2, [r1, #24]
 80063ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063d2:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80063d4:	05db      	lsls	r3, r3, #23
 80063d6:	d50a      	bpl.n	80063ee <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063d8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80063dc:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063de:	f043 0308 	orr.w	r3, r3, #8
 80063e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80063e6:	6993      	ldr	r3, [r2, #24]
 80063e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ec:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80063ee:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 80063f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 80063f4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80063f8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 80063fc:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063fe:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006402:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006404:	f042 0204 	orr.w	r2, r2, #4
 8006408:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800640c:	698a      	ldr	r2, [r1, #24]
 800640e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006412:	618a      	str	r2, [r1, #24]
 8006414:	e7d1      	b.n	80063ba <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006416:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800641a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800641c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006420:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006424:	698a      	ldr	r2, [r1, #24]
 8006426:	f042 0220 	orr.w	r2, r2, #32
 800642a:	618a      	str	r2, [r1, #24]
 800642c:	e7bf      	b.n	80063ae <SPI_CloseTransfer+0x42>
 800642e:	bf00      	nop
 8006430:	fffffc90 	.word	0xfffffc90

08006434 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006434:	2800      	cmp	r0, #0
 8006436:	f000 80be 	beq.w	80065b6 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800643a:	4a62      	ldr	r2, [pc, #392]	; (80065c4 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800643c:	2100      	movs	r1, #0
{
 800643e:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006440:	6803      	ldr	r3, [r0, #0]
 8006442:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006444:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006446:	4293      	cmp	r3, r2
 8006448:	d015      	beq.n	8006476 <HAL_SPI_Init+0x42>
 800644a:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800644e:	4293      	cmp	r3, r2
 8006450:	d011      	beq.n	8006476 <HAL_SPI_Init+0x42>
 8006452:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006456:	4293      	cmp	r3, r2
 8006458:	68c2      	ldr	r2, [r0, #12]
 800645a:	f000 80a5 	beq.w	80065a8 <HAL_SPI_Init+0x174>
 800645e:	2a0f      	cmp	r2, #15
 8006460:	d807      	bhi.n	8006472 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006462:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006464:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006466:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8006468:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800646a:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800646e:	2a08      	cmp	r2, #8
 8006470:	d914      	bls.n	800649c <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 8006472:	2001      	movs	r0, #1
}
 8006474:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 8006476:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006478:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800647a:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800647c:	4851      	ldr	r0, [pc, #324]	; (80065c4 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800647e:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8006480:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 8006482:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006486:	4950      	ldr	r1, [pc, #320]	; (80065c8 <HAL_SPI_Init+0x194>)
 8006488:	428b      	cmp	r3, r1
 800648a:	bf18      	it	ne
 800648c:	4283      	cmpne	r3, r0
 800648e:	d003      	beq.n	8006498 <HAL_SPI_Init+0x64>
 8006490:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006494:	428b      	cmp	r3, r1
 8006496:	d101      	bne.n	800649c <HAL_SPI_Init+0x68>
 8006498:	2a10      	cmp	r2, #16
 800649a:	d8ea      	bhi.n	8006472 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800649c:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 80064a0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80064a4:	2a00      	cmp	r2, #0
 80064a6:	d078      	beq.n	800659a <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 80064a8:	2202      	movs	r2, #2
 80064aa:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	f022 0201 	bic.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064b6:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80064b8:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064ba:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80064be:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064c6:	d058      	beq.n	800657a <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80064c8:	0249      	lsls	r1, r1, #9
 80064ca:	d502      	bpl.n	80064d2 <HAL_SPI_Init+0x9e>
 80064cc:	68e1      	ldr	r1, [r4, #12]
 80064ce:	2906      	cmp	r1, #6
 80064d0:	d84c      	bhi.n	800656c <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80064d2:	6819      	ldr	r1, [r3, #0]
 80064d4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80064d8:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80064da:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80064dc:	69e3      	ldr	r3, [r4, #28]
 80064de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80064e0:	432b      	orrs	r3, r5
 80064e2:	6821      	ldr	r1, [r4, #0]
 80064e4:	4303      	orrs	r3, r0
 80064e6:	68e0      	ldr	r0, [r4, #12]
 80064e8:	4303      	orrs	r3, r0
 80064ea:	4313      	orrs	r3, r2
 80064ec:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80064ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80064f0:	69a0      	ldr	r0, [r4, #24]
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 80064f8:	432b      	orrs	r3, r5
 80064fa:	430b      	orrs	r3, r1
 80064fc:	6921      	ldr	r1, [r4, #16]
 80064fe:	4303      	orrs	r3, r0
 8006500:	6960      	ldr	r0, [r4, #20]
 8006502:	430b      	orrs	r3, r1
 8006504:	6a21      	ldr	r1, [r4, #32]
 8006506:	4303      	orrs	r3, r0
 8006508:	6860      	ldr	r0, [r4, #4]
 800650a:	430b      	orrs	r3, r1
 800650c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800650e:	4303      	orrs	r3, r0
 8006510:	68a0      	ldr	r0, [r4, #8]
 8006512:	430b      	orrs	r3, r1
 8006514:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006516:	4303      	orrs	r3, r0
 8006518:	430b      	orrs	r3, r1
 800651a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800651c:	430b      	orrs	r3, r1
 800651e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006520:	6863      	ldr	r3, [r4, #4]
 8006522:	b96b      	cbnz	r3, 8006540 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006524:	6822      	ldr	r2, [r4, #0]
 8006526:	6893      	ldr	r3, [r2, #8]
 8006528:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800652c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006530:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	6893      	ldr	r3, [r2, #8]
 8006536:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800653a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800653e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006540:	6822      	ldr	r2, [r4, #0]
 8006542:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006544:	f023 0301 	bic.w	r3, r3, #1
 8006548:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	025b      	lsls	r3, r3, #9
 800654e:	d506      	bpl.n	800655e <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006550:	6822      	ldr	r2, [r4, #0]
 8006552:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006554:	68d3      	ldr	r3, [r2, #12]
 8006556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800655a:	430b      	orrs	r3, r1
 800655c:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800655e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006560:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006562:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006566:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800656a:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800656c:	6819      	ldr	r1, [r3, #0]
 800656e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006570:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006574:	4301      	orrs	r1, r0
 8006576:	6019      	str	r1, [r3, #0]
 8006578:	e7af      	b.n	80064da <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800657a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800657e:	d01c      	beq.n	80065ba <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006580:	2900      	cmp	r1, #0
 8006582:	d1a1      	bne.n	80064c8 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006584:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006586:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800658a:	d1a2      	bne.n	80064d2 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800658c:	6819      	ldr	r1, [r3, #0]
 800658e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8006592:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006594:	e9d4 3100 	ldrd	r3, r1, [r4]
 8006598:	e796      	b.n	80064c8 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800659a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800659c:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80065a0:	f7fa fdac 	bl	80010fc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	e77f      	b.n	80064a8 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80065a8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80065aa:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80065ac:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 80065ae:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 80065b0:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80065b4:	e770      	b.n	8006498 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 80065b6:	2001      	movs	r0, #1
}
 80065b8:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80065ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80065bc:	2900      	cmp	r1, #0
 80065be:	d0e5      	beq.n	800658c <HAL_SPI_Init+0x158>
 80065c0:	e784      	b.n	80064cc <HAL_SPI_Init+0x98>
 80065c2:	bf00      	nop
 80065c4:	40013000 	.word	0x40013000
 80065c8:	40003800 	.word	0x40003800

080065cc <HAL_SPI_Receive_DMA>:
{
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 80065ce:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	f000 80a9 	beq.w	800672a <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 80065d8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80065dc:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 80065de:	2201      	movs	r2, #1
 80065e0:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80065e2:	b2de      	uxtb	r6, r3
 80065e4:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 80065e6:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 80065ea:	f040 8093 	bne.w	8006714 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 80065ee:	2900      	cmp	r1, #0
 80065f0:	f000 808b 	beq.w	800670a <HAL_SPI_Receive_DMA+0x13e>
 80065f4:	fab5 f385 	clz	r3, r5
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	2d00      	cmp	r5, #0
 80065fc:	f000 8085 	beq.w	800670a <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006600:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006602:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006604:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006606:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800660a:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800660e:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 8006612:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006614:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006618:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800661c:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006620:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 8006624:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006628:	d07a      	beq.n	8006720 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800662a:	68d3      	ldr	r3, [r2, #12]
 800662c:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8006630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006634:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006636:	68e3      	ldr	r3, [r4, #12]
 8006638:	2b0f      	cmp	r3, #15
 800663a:	d861      	bhi.n	8006700 <HAL_SPI_Receive_DMA+0x134>
 800663c:	2b07      	cmp	r3, #7
 800663e:	f200 8092 	bhi.w	8006766 <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	6893      	ldr	r3, [r2, #8]
 8006646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800664a:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800664c:	68e3      	ldr	r3, [r4, #12]
 800664e:	2b07      	cmp	r3, #7
 8006650:	d86e      	bhi.n	8006730 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006652:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006654:	699a      	ldr	r2, [r3, #24]
 8006656:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800665a:	d107      	bne.n	800666c <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800665c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006660:	b292      	uxth	r2, r2
 8006662:	3201      	adds	r2, #1
 8006664:	0852      	lsrs	r2, r2, #1
 8006666:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006670:	d106      	bne.n	8006680 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8006672:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006676:	b292      	uxth	r2, r2
 8006678:	3203      	adds	r2, #3
 800667a:	0892      	lsrs	r2, r2, #2
 800667c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006680:	4a3e      	ldr	r2, [pc, #248]	; (800677c <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 8006682:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006684:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006686:	4a3e      	ldr	r2, [pc, #248]	; (8006780 <HAL_SPI_Receive_DMA+0x1b4>)
 8006688:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800668a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800668c:	4a3d      	ldr	r2, [pc, #244]	; (8006784 <HAL_SPI_Receive_DMA+0x1b8>)
 800668e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006690:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8006692:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006694:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 8006696:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800669a:	6821      	ldr	r1, [r4, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066a0:	3130      	adds	r1, #48	; 0x30
 80066a2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80066a4:	f7fc fbb8 	bl	8002e18 <HAL_DMA_Start_IT>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d150      	bne.n	800674e <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80066ac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80066ae:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80066b0:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80066b2:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80066b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80066b8:	4b33      	ldr	r3, [pc, #204]	; (8006788 <HAL_SPI_Receive_DMA+0x1bc>)
 80066ba:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80066be:	bf18      	it	ne
 80066c0:	432b      	orrne	r3, r5
 80066c2:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80066c4:	6822      	ldr	r2, [r4, #0]
 80066c6:	6893      	ldr	r3, [r2, #8]
 80066c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066cc:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80066ce:	6822      	ldr	r2, [r4, #0]
 80066d0:	6913      	ldr	r3, [r2, #16]
 80066d2:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 80066d6:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	6813      	ldr	r3, [r2, #0]
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066e2:	6863      	ldr	r3, [r4, #4]
 80066e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066e8:	d104      	bne.n	80066f4 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	6813      	ldr	r3, [r2, #0]
 80066ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066f2:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 80066f4:	2300      	movs	r3, #0
  return errorcode;
 80066f6:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 80066f8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80066fc:	4630      	mov	r0, r6
 80066fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006700:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006708:	d09b      	beq.n	8006642 <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800670a:	2300      	movs	r3, #0
 800670c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006710:	4630      	mov	r0, r6
 8006712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8006714:	2300      	movs	r3, #0
    return errorcode;
 8006716:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 8006718:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800671c:	4630      	mov	r0, r6
 800671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 8006720:	6813      	ldr	r3, [r2, #0]
 8006722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	e785      	b.n	8006636 <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800672a:	2602      	movs	r6, #2
}
 800672c:	4630      	mov	r0, r6
 800672e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006730:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006732:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006734:	d8a4      	bhi.n	8006680 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006736:	699a      	ldr	r2, [r3, #24]
 8006738:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800673c:	d1a0      	bne.n	8006680 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800673e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006742:	b292      	uxth	r2, r2
 8006744:	3201      	adds	r2, #1
 8006746:	0852      	lsrs	r2, r2, #1
 8006748:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800674c:	e798      	b.n	8006680 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800674e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006752:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 8006754:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006758:	f043 0310 	orr.w	r3, r3, #16
 800675c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006760:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8006764:	e7d4      	b.n	8006710 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006766:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676e:	f43f af68 	beq.w	8006642 <HAL_SPI_Receive_DMA+0x76>
 8006772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006776:	d1c8      	bne.n	800670a <HAL_SPI_Receive_DMA+0x13e>
 8006778:	e763      	b.n	8006642 <HAL_SPI_Receive_DMA+0x76>
 800677a:	bf00      	nop
 800677c:	08006a1d 	.word	0x08006a1d
 8006780:	080069cd 	.word	0x080069cd
 8006784:	08006a3d 	.word	0x08006a3d
 8006788:	ffff0000 	.word	0xffff0000

0800678c <HAL_SPI_TransmitReceive_DMA>:
{
 800678c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006790:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8006792:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006796:	2b01      	cmp	r3, #1
 8006798:	f000 809a 	beq.w	80068d0 <HAL_SPI_TransmitReceive_DMA+0x144>
 800679c:	2301      	movs	r3, #1
 800679e:	4604      	mov	r4, r0
 80067a0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 80067a4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	b2de      	uxtb	r6, r3
 80067ac:	d158      	bne.n	8006860 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80067ae:	2d00      	cmp	r5, #0
 80067b0:	bf18      	it	ne
 80067b2:	2a00      	cmpne	r2, #0
 80067b4:	d04e      	beq.n	8006854 <HAL_SPI_TransmitReceive_DMA+0xc8>
 80067b6:	fab1 f381 	clz	r3, r1
 80067ba:	095b      	lsrs	r3, r3, #5
 80067bc:	2900      	cmp	r1, #0
 80067be:	d049      	beq.n	8006854 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80067c0:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80067c2:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067c4:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
 80067c6:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80067c8:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
 80067cc:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067d0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
 80067d4:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
 80067d8:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
 80067dc:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80067e0:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
 80067e4:	68d3      	ldr	r3, [r2, #12]
 80067e6:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 80067ea:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80067ec:	6802      	ldr	r2, [r0, #0]
 80067ee:	6893      	ldr	r3, [r2, #8]
 80067f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80067f4:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80067f6:	68c3      	ldr	r3, [r0, #12]
 80067f8:	2b0f      	cmp	r3, #15
 80067fa:	d938      	bls.n	800686e <HAL_SPI_TransmitReceive_DMA+0xe2>
 80067fc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80067fe:	699a      	ldr	r2, [r3, #24]
 8006800:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006804:	d126      	bne.n	8006854 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006806:	4a6c      	ldr	r2, [pc, #432]	; (80069b8 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
 8006808:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800680c:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 80069c4 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006812:	4a6a      	ldr	r2, [pc, #424]	; (80069bc <HAL_SPI_TransmitReceive_DMA+0x230>)
 8006814:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006816:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006818:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800681a:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800681e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006820:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 8006824:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8006828:	6821      	ldr	r1, [r4, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800682e:	3130      	adds	r1, #48	; 0x30
 8006830:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006832:	f7fc faf1 	bl	8002e18 <HAL_DMA_Start_IT>
 8006836:	4607      	mov	r7, r0
 8006838:	2800      	cmp	r0, #0
 800683a:	d04d      	beq.n	80068d8 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800683c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006840:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 8006842:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006846:	f043 0310 	orr.w	r3, r3, #16
 800684a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800684e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8006852:	e002      	b.n	800685a <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
 8006854:	2300      	movs	r3, #0
 8006856:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800685a:	4630      	mov	r0, r6
 800685c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 8006860:	2300      	movs	r3, #0
    return errorcode;
 8006862:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 8006864:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 8006868:	4630      	mov	r0, r6
 800686a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800686e:	2b07      	cmp	r3, #7
 8006870:	d87f      	bhi.n	8006972 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006872:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006874:	6993      	ldr	r3, [r2, #24]
 8006876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800687a:	d107      	bne.n	800688c <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800687c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8006880:	b29b      	uxth	r3, r3
 8006882:	3301      	adds	r3, #1
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800688a:	6993      	ldr	r3, [r2, #24]
 800688c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006890:	d106      	bne.n	80068a0 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006892:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8006896:	b29b      	uxth	r3, r3
 8006898:	3303      	adds	r3, #3
 800689a:	089b      	lsrs	r3, r3, #2
 800689c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068a2:	699a      	ldr	r2, [r3, #24]
 80068a4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80068a8:	d107      	bne.n	80068ba <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80068aa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80068ae:	b292      	uxth	r2, r2
 80068b0:	3201      	adds	r2, #1
 80068b2:	0852      	lsrs	r2, r2, #1
 80068b4:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80068be:	d1a2      	bne.n	8006806 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80068c0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80068c4:	b292      	uxth	r2, r2
 80068c6:	3203      	adds	r2, #3
 80068c8:	0892      	lsrs	r2, r2, #2
 80068ca:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 80068ce:	e79a      	b.n	8006806 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
 80068d0:	2602      	movs	r6, #2
}
 80068d2:	4630      	mov	r0, r6
 80068d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80068d8:	6822      	ldr	r2, [r4, #0]
 80068da:	6893      	ldr	r3, [r2, #8]
 80068dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068e0:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80068e2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80068e4:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80068e6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80068e8:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80068ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80068ec:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 80068ee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80068f0:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
 80068f4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80068f8:	6822      	ldr	r2, [r4, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80068fe:	3220      	adds	r2, #32
 8006900:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006902:	f7fc fa89 	bl	8002e18 <HAL_DMA_Start_IT>
 8006906:	bb40      	cbnz	r0, 800695a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006908:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800690a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800690c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800690e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006914:	4b2a      	ldr	r3, [pc, #168]	; (80069c0 <HAL_SPI_TransmitReceive_DMA+0x234>)
 8006916:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800691a:	bf18      	it	ne
 800691c:	432b      	orrne	r3, r5
 800691e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006920:	6822      	ldr	r2, [r4, #0]
 8006922:	6893      	ldr	r3, [r2, #8]
 8006924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006928:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800692a:	6822      	ldr	r2, [r4, #0]
 800692c:	6913      	ldr	r3, [r2, #16]
 800692e:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 8006932:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8006934:	6822      	ldr	r2, [r4, #0]
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800693e:	6863      	ldr	r3, [r4, #4]
 8006940:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006944:	d104      	bne.n	8006950 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006946:	6822      	ldr	r2, [r4, #0]
 8006948:	6813      	ldr	r3, [r2, #0]
 800694a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800694e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8006950:	2300      	movs	r3, #0
  return errorcode;
 8006952:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 8006954:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 8006958:	e77f      	b.n	800685a <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800695a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800695e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 8006960:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006964:	f043 0310 	orr.w	r3, r3, #16
 8006968:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800696c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8006970:	e773      	b.n	800685a <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006972:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800697a:	d003      	beq.n	8006984 <HAL_SPI_TransmitReceive_DMA+0x1f8>
 800697c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006980:	f47f af68 	bne.w	8006854 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006984:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8006986:	6989      	ldr	r1, [r1, #24]
 8006988:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800698c:	d107      	bne.n	800699e <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800698e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8006992:	b292      	uxth	r2, r2
 8006994:	3201      	adds	r2, #1
 8006996:	0852      	lsrs	r2, r2, #1
 8006998:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80069a2:	f47f af30 	bne.w	8006806 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80069a6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80069aa:	b292      	uxth	r2, r2
 80069ac:	3201      	adds	r2, #1
 80069ae:	0852      	lsrs	r2, r2, #1
 80069b0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 80069b4:	e727      	b.n	8006806 <HAL_SPI_TransmitReceive_DMA+0x7a>
 80069b6:	bf00      	nop
 80069b8:	08006a2d 	.word	0x08006a2d
 80069bc:	080069f5 	.word	0x080069f5
 80069c0:	ffff0000 	.word	0xffff0000
 80069c4:	08006a3d 	.word	0x08006a3d

080069c8 <HAL_SPI_TxCpltCallback>:
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop

080069cc <SPI_DMAReceiveCplt>:
{
 80069cc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80069d0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80069d4:	2b07      	cmp	r3, #7
 80069d6:	d009      	beq.n	80069ec <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80069d8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e0:	d005      	beq.n	80069ee <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80069e2:	6802      	ldr	r2, [r0, #0]
 80069e4:	6913      	ldr	r3, [r2, #16]
 80069e6:	f043 0308 	orr.w	r3, r3, #8
 80069ea:	6113      	str	r3, [r2, #16]
}
 80069ec:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 80069ee:	f7fa fa4d 	bl	8000e8c <HAL_SPI_RxCpltCallback>
}
 80069f2:	bd08      	pop	{r3, pc}

080069f4 <SPI_DMATransmitReceiveCplt>:
{
 80069f4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80069f8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80069fc:	2b07      	cmp	r3, #7
 80069fe:	d009      	beq.n	8006a14 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006a00:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a08:	d005      	beq.n	8006a16 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006a0a:	6802      	ldr	r2, [r0, #0]
 8006a0c:	6913      	ldr	r3, [r2, #16]
 8006a0e:	f043 0308 	orr.w	r3, r3, #8
 8006a12:	6113      	str	r3, [r2, #16]
}
 8006a14:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 8006a16:	f7fa fa33 	bl	8000e80 <HAL_SPI_TxRxCpltCallback>
}
 8006a1a:	bd08      	pop	{r3, pc}

08006a1c <SPI_DMAHalfReceiveCplt>:
{
 8006a1c:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006a1e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006a20:	f7fa fa52 	bl	8000ec8 <HAL_SPI_RxHalfCpltCallback>
}
 8006a24:	bd08      	pop	{r3, pc}
 8006a26:	bf00      	nop

08006a28 <HAL_SPI_TxRxHalfCpltCallback>:
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop

08006a2c <SPI_DMAHalfTransmitReceiveCplt>:
{
 8006a2c:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006a2e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006a30:	f7ff fffa 	bl	8006a28 <HAL_SPI_TxRxHalfCpltCallback>
}
 8006a34:	bd08      	pop	{r3, pc}
 8006a36:	bf00      	nop

08006a38 <HAL_SPI_ErrorCallback>:
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop

08006a3c <SPI_DMAError>:
{
 8006a3c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a3e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006a40:	f7fd fa20 	bl	8003e84 <HAL_DMA_GetError>
 8006a44:	2802      	cmp	r0, #2
 8006a46:	d100      	bne.n	8006a4a <SPI_DMAError+0xe>
}
 8006a48:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006a4e:	6991      	ldr	r1, [r2, #24]
 8006a50:	f041 0108 	orr.w	r1, r1, #8
 8006a54:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006a56:	6821      	ldr	r1, [r4, #0]
 8006a58:	698a      	ldr	r2, [r1, #24]
 8006a5a:	f042 0210 	orr.w	r2, r2, #16
 8006a5e:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 8006a60:	6821      	ldr	r1, [r4, #0]
 8006a62:	680a      	ldr	r2, [r1, #0]
 8006a64:	f022 0201 	bic.w	r2, r2, #1
 8006a68:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a6a:	6821      	ldr	r1, [r4, #0]
 8006a6c:	4a2c      	ldr	r2, [pc, #176]	; (8006b20 <SPI_DMAError+0xe4>)
 8006a6e:	6908      	ldr	r0, [r1, #16]
 8006a70:	4002      	ands	r2, r0
 8006a72:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a74:	6821      	ldr	r1, [r4, #0]
 8006a76:	688a      	ldr	r2, [r1, #8]
 8006a78:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a7c:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a7e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006a82:	2a04      	cmp	r2, #4
 8006a84:	d001      	beq.n	8006a8a <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006a86:	0698      	lsls	r0, r3, #26
 8006a88:	d43d      	bmi.n	8006b06 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a8a:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006a8e:	2a03      	cmp	r2, #3
 8006a90:	d001      	beq.n	8006a96 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a92:	0659      	lsls	r1, r3, #25
 8006a94:	d42b      	bmi.n	8006aee <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006a96:	059a      	lsls	r2, r3, #22
 8006a98:	d50a      	bpl.n	8006ab0 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a9a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a9e:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006aa0:	f042 0201 	orr.w	r2, r2, #1
 8006aa4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006aa8:	698a      	ldr	r2, [r1, #24]
 8006aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aae:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006ab0:	05db      	lsls	r3, r3, #23
 8006ab2:	d50a      	bpl.n	8006aca <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ab4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ab8:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006aba:	f043 0308 	orr.w	r3, r3, #8
 8006abe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ac2:	6993      	ldr	r3, [r2, #24]
 8006ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac8:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8006aca:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8006acc:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 8006ace:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8006ad0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006ad4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ad8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006adc:	f043 0310 	orr.w	r3, r3, #16
 8006ae0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006ae4:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8006ae8:	f7ff ffa6 	bl	8006a38 <HAL_SPI_ErrorCallback>
}
 8006aec:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006aee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006af2:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006af4:	f042 0204 	orr.w	r2, r2, #4
 8006af8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006afc:	698a      	ldr	r2, [r1, #24]
 8006afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b02:	618a      	str	r2, [r1, #24]
 8006b04:	e7c7      	b.n	8006a96 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b06:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b0a:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b10:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b14:	698a      	ldr	r2, [r1, #24]
 8006b16:	f042 0220 	orr.w	r2, r2, #32
 8006b1a:	618a      	str	r2, [r1, #24]
 8006b1c:	e7b5      	b.n	8006a8a <SPI_DMAError+0x4e>
 8006b1e:	bf00      	nop
 8006b20:	fffffc90 	.word	0xfffffc90

08006b24 <SPI_DMAAbortOnError>:
{
 8006b24:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 8006b26:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b28:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006b30:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006b34:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006b38:	f7ff ff7e 	bl	8006a38 <HAL_SPI_ErrorCallback>
}
 8006b3c:	bd08      	pop	{r3, pc}
 8006b3e:	bf00      	nop

08006b40 <HAL_SPI_SuspendCallback>:
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop

08006b44 <HAL_SPI_IRQHandler>:
{
 8006b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 8006b48:	6802      	ldr	r2, [r0, #0]
{
 8006b4a:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006b4c:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006b4e:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006b50:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 8006b52:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 8006b56:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006b5a:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 8006b5c:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006b5e:	d502      	bpl.n	8006b66 <HAL_SPI_IRQHandler+0x22>
 8006b60:	0709      	lsls	r1, r1, #28
 8006b62:	f100 80e1 	bmi.w	8006d28 <HAL_SPI_IRQHandler+0x1e4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006b66:	f005 0364 	and.w	r3, r5, #100	; 0x64
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d044      	beq.n	8006bf8 <HAL_SPI_IRQHandler+0xb4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006b6e:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d04a      	beq.n	8006c0c <HAL_SPI_IRQHandler+0xc8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006b76:	f005 0326 	and.w	r3, r5, #38	; 0x26
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	f000 80ea 	beq.w	8006d54 <HAL_SPI_IRQHandler+0x210>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006b80:	072b      	lsls	r3, r5, #28
 8006b82:	d563      	bpl.n	8006c4c <HAL_SPI_IRQHandler+0x108>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b84:	6993      	ldr	r3, [r2, #24]
 8006b86:	f043 0308 	orr.w	r3, r3, #8
 8006b8a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b8c:	6821      	ldr	r1, [r4, #0]
 8006b8e:	698b      	ldr	r3, [r1, #24]
 8006b90:	f043 0310 	orr.w	r3, r3, #16
 8006b94:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006b96:	6821      	ldr	r1, [r4, #0]
 8006b98:	698b      	ldr	r3, [r1, #24]
 8006b9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b9e:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006ba0:	6821      	ldr	r1, [r4, #0]
 8006ba2:	690b      	ldr	r3, [r1, #16]
 8006ba4:	f023 0308 	bic.w	r3, r3, #8
 8006ba8:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8006bb2:	d135      	bne.n	8006c20 <HAL_SPI_IRQHandler+0xdc>
      while (hspi->RxXferCount != 0UL)
 8006bb4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d030      	beq.n	8006c20 <HAL_SPI_IRQHandler+0xdc>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006bbe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006bc0:	e00f      	b.n	8006be2 <HAL_SPI_IRQHandler+0x9e>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006bc8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006bca:	3104      	adds	r1, #4
        hspi->RxXferCount--;
 8006bcc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006bd0:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8006bda:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	b1f3      	cbz	r3, 8006c20 <HAL_SPI_IRQHandler+0xdc>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006be2:	68e3      	ldr	r3, [r4, #12]
 8006be4:	2b0f      	cmp	r3, #15
 8006be6:	d8ec      	bhi.n	8006bc2 <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006be8:	2b07      	cmp	r3, #7
 8006bea:	f240 80ac 	bls.w	8006d46 <HAL_SPI_IRQHandler+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006bee:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8006bf0:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bf2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006bf4:	3102      	adds	r1, #2
 8006bf6:	e7e9      	b.n	8006bcc <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006bfc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006bfe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006c00:	4620      	mov	r0, r4
 8006c02:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006c04:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d102      	bne.n	8006c12 <HAL_SPI_IRQHandler+0xce>
    hspi->RxISR(hspi);
 8006c0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006c12:	f005 0526 	and.w	r5, r5, #38	; 0x26
 8006c16:	2d02      	cmp	r5, #2
 8006c18:	f000 809c 	beq.w	8006d54 <HAL_SPI_IRQHandler+0x210>
}
 8006c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 8006c20:	4620      	mov	r0, r4
 8006c22:	f7ff fba3 	bl	800636c <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c2c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 8085 	bne.w	8006d40 <HAL_SPI_IRQHandler+0x1fc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006c36:	2e05      	cmp	r6, #5
 8006c38:	f000 8091 	beq.w	8006d5e <HAL_SPI_IRQHandler+0x21a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006c3c:	2e04      	cmp	r6, #4
 8006c3e:	f000 8091 	beq.w	8006d64 <HAL_SPI_IRQHandler+0x220>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006c42:	2e03      	cmp	r6, #3
 8006c44:	d1ea      	bne.n	8006c1c <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_TxCpltCallback(hspi);
 8006c46:	f7ff febf 	bl	80069c8 <HAL_SPI_TxCpltCallback>
 8006c4a:	e7e7      	b.n	8006c1c <HAL_SPI_IRQHandler+0xd8>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006c4c:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006c50:	d0e4      	beq.n	8006c1c <HAL_SPI_IRQHandler+0xd8>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006c52:	0668      	lsls	r0, r5, #25
 8006c54:	d509      	bpl.n	8006c6a <HAL_SPI_IRQHandler+0x126>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c56:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c5a:	f043 0304 	orr.w	r3, r3, #4
 8006c5e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c62:	6993      	ldr	r3, [r2, #24]
 8006c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c68:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006c6a:	05a9      	lsls	r1, r5, #22
 8006c6c:	d50a      	bpl.n	8006c84 <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c6e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c72:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c7c:	6993      	ldr	r3, [r2, #24]
 8006c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c82:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006c84:	05ea      	lsls	r2, r5, #23
 8006c86:	d50a      	bpl.n	8006c9e <HAL_SPI_IRQHandler+0x15a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c88:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c8c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c8e:	f043 0308 	orr.w	r3, r3, #8
 8006c92:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c96:	6993      	ldr	r3, [r2, #24]
 8006c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c9c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006c9e:	06ab      	lsls	r3, r5, #26
 8006ca0:	d50a      	bpl.n	8006cb8 <HAL_SPI_IRQHandler+0x174>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006ca2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006ca6:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cb0:	6993      	ldr	r3, [r2, #24]
 8006cb2:	f043 0320 	orr.w	r3, r3, #32
 8006cb6:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cb8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0ad      	beq.n	8006c1c <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE(hspi);
 8006cc0:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006cc2:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006cc6:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006cc8:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006ccc:	f023 0301 	bic.w	r3, r3, #1
 8006cd0:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006cd2:	6822      	ldr	r2, [r4, #0]
 8006cd4:	4b25      	ldr	r3, [pc, #148]	; (8006d6c <HAL_SPI_IRQHandler+0x228>)
 8006cd6:	6911      	ldr	r1, [r2, #16]
 8006cd8:	ea03 0301 	and.w	r3, r3, r1
 8006cdc:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006cde:	d12b      	bne.n	8006d38 <HAL_SPI_IRQHandler+0x1f4>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ce0:	6822      	ldr	r2, [r4, #0]
 8006ce2:	6893      	ldr	r3, [r2, #8]
 8006ce4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006ce8:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8006cea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006cec:	b15b      	cbz	r3, 8006d06 <HAL_SPI_IRQHandler+0x1c2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006cee:	4a20      	ldr	r2, [pc, #128]	; (8006d70 <HAL_SPI_IRQHandler+0x22c>)
 8006cf0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006cf2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006cf4:	f7fc fb5c 	bl	80033b0 <HAL_DMA_Abort_IT>
 8006cf8:	b128      	cbz	r0, 8006d06 <HAL_SPI_IRQHandler+0x1c2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006cfa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d02:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8006d06:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d087      	beq.n	8006c1c <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d0c:	4a18      	ldr	r2, [pc, #96]	; (8006d70 <HAL_SPI_IRQHandler+0x22c>)
 8006d0e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d10:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006d12:	f7fc fb4d 	bl	80033b0 <HAL_DMA_Abort_IT>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d080      	beq.n	8006c1c <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d1a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d22:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006d26:	e779      	b.n	8006c1c <HAL_SPI_IRQHandler+0xd8>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006d28:	6993      	ldr	r3, [r2, #24]
 8006d2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d2e:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 8006d30:	f7ff ff06 	bl	8006b40 <HAL_SPI_SuspendCallback>
}
 8006d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8006d38:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8006d3a:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8006d3c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006d40:	f7ff fe7a 	bl	8006a38 <HAL_SPI_ErrorCallback>
 8006d44:	e76a      	b.n	8006c1c <HAL_SPI_IRQHandler+0xd8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d4c:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d4e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006d50:	3101      	adds	r1, #1
 8006d52:	e73b      	b.n	8006bcc <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 8006d54:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006d56:	4620      	mov	r0, r4
}
 8006d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8006d5c:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 8006d5e:	f7fa f88f 	bl	8000e80 <HAL_SPI_TxRxCpltCallback>
 8006d62:	e75b      	b.n	8006c1c <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_RxCpltCallback(hspi);
 8006d64:	f7fa f892 	bl	8000e8c <HAL_SPI_RxCpltCallback>
 8006d68:	e758      	b.n	8006c1c <HAL_SPI_IRQHandler+0xd8>
 8006d6a:	bf00      	nop
 8006d6c:	fffffc94 	.word	0xfffffc94
 8006d70:	08006b25 	.word	0x08006b25

08006d74 <tThreshold_init>:
}



void tThreshold_init (tThreshold* const th, float low, float high, LEAF* const leaf)
{
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	ed2d 8b02 	vpush	{d8}
	tThreshold_initToPool(th, low, high, &leaf->mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006d7a:	698d      	ldr	r5, [r1, #24]
{
 8006d7c:	eeb0 8a40 	vmov.f32	s16, s0
 8006d80:	eef0 8a60 	vmov.f32	s17, s1
 8006d84:	4604      	mov	r4, r0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8006d86:	4629      	mov	r1, r5
 8006d88:	2010      	movs	r0, #16
 8006d8a:	f000 faff 	bl	800738c <mpool_alloc>
    t->mempool = m;
    
    t->highThresh = high;
    t->lowThresh = low;

    t->currentValue = 0;
 8006d8e:	2300      	movs	r3, #0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8006d90:	6020      	str	r0, [r4, #0]
    t->mempool = m;
 8006d92:	6005      	str	r5, [r0, #0]
    t->highThresh = high;
 8006d94:	edc0 8a01 	vstr	s17, [r0, #4]
    t->lowThresh = low;
 8006d98:	ed80 8a02 	vstr	s16, [r0, #8]
    t->currentValue = 0;
 8006d9c:	60c3      	str	r3, [r0, #12]
}
 8006d9e:	ecbd 8b02 	vpop	{d8}
 8006da2:	bd38      	pop	{r3, r4, r5, pc}

08006da4 <tThreshold_tick>:
    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 8006da4:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 8006da6:	edd3 7a01 	vldr	s15, [r3, #4]
 8006daa:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db2:	d803      	bhi.n	8006dbc <tThreshold_tick+0x18>
    {
    	t->currentValue = 1;
 8006db4:	2201      	movs	r2, #1
 8006db6:	4610      	mov	r0, r2
 8006db8:	60da      	str	r2, [r3, #12]
 8006dba:	4770      	bx	lr
    }
    else if (in <= t->lowThresh)
 8006dbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8006dc0:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc8:	db03      	blt.n	8006dd2 <tThreshold_tick+0x2e>
	{
    	t->currentValue = 0;
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4610      	mov	r0, r2
 8006dce:	60da      	str	r2, [r3, #12]
	}

    return t->currentValue;
}
 8006dd0:	4770      	bx	lr
    return t->currentValue;
 8006dd2:	68d8      	ldr	r0, [r3, #12]
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop

08006dd8 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006dde:	698d      	ldr	r5, [r1, #24]
{
 8006de0:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006de2:	201c      	movs	r0, #28
{
 8006de4:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006de8:	4629      	mov	r1, r5
{
 8006dea:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006dee:	f000 facd 	bl	800738c <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8006df2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8006df6:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006df8:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8006dfa:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8006dfc:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8006e00:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8006e04:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8006e08:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8006e0a:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8006e0c:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8006e0e:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8006e10:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8006e14:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8006e18:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8006e1c:	ecbd 8b02 	vpop	{d8}
 8006e20:	bd38      	pop	{r3, r4, r5, pc}
 8006e22:	bf00      	nop

08006e24 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8006e24:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 8006e26:	edd3 7a01 	vldr	s15, [r3, #4]
 8006e2a:	eef4 7ac0 	vcmpe.f32	s15, s0
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8006e2e:	ee70 6a67 	vsub.f32	s13, s0, s15
    if (in >= s->prevOut)
 8006e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8006e36:	bf94      	ite	ls
 8006e38:	ed93 7a04 	vldrls	s14, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8006e3c:	ed93 7a05 	vldrhi	s14, [r3, #20]
 8006e40:	eee6 7a87 	vfma.f32	s15, s13, s14
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006e44:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006e80 <tSlide_tick+0x5c>
 8006e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e50:	d408      	bmi.n	8006e64 <tSlide_tick+0x40>
#endif
    s->prevIn = in;
 8006e52:	ed83 0a03 	vstr	s0, [r3, #12]
    s->prevOut = s->currentOut;
    return s->currentOut;
}
 8006e56:	eeb0 0a67 	vmov.f32	s0, s15
 8006e5a:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8006e5e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006e62:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006e64:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006e84 <tSlide_tick+0x60>
    s->prevIn = in;
 8006e68:	ed83 0a03 	vstr	s0, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006e6c:	eef0 7a47 	vmov.f32	s15, s14
 8006e70:	ed83 7a02 	vstr	s14, [r3, #8]
}
 8006e74:	eeb0 0a67 	vmov.f32	s0, s15
    s->prevOut = s->currentOut;
 8006e78:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	006ce3ee 	.word	0x006ce3ee
 8006e84:	00000000 	.word	0x00000000

08006e88 <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006e8e:	698c      	ldr	r4, [r1, #24]
{
 8006e90:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8006e92:	2018      	movs	r0, #24
{
 8006e94:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8006e98:	4621      	mov	r1, r4
 8006e9a:	f000 fadb 	bl	8007454 <mpool_calloc>
 8006e9e:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8006ea0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006ea2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006ea6:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8006ea8:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006eaa:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8006eae:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006eb0:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8006eb4:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8006eb6:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006eba:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006ebe:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8006ec2:	ecbd 8b02 	vpop	{d8}
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}

08006ec8 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8006ec8:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8006eca:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ece:	ed93 7a02 	vldr	s14, [r3, #8]
 8006ed2:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8006ed6:	ed83 0a01 	vstr	s0, [r3, #4]
 8006eda:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8006ede:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ee2:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8006ee6:	4770      	bx	lr

08006ee8 <tVZFilter_calcCoeffs>:
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8006ee8:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8006eea:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006eec:	eddf 7a98 	vldr	s15, [pc, #608]	; 8007150 <tVZFilter_calcCoeffs+0x268>
{
 8006ef0:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006ef4:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8006ef8:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8006efc:	ee68 8a87 	vmul.f32	s17, s17, s14
 8006f00:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8006f04:	eeb0 0a68 	vmov.f32	s0, s17
 8006f08:	f000 fdcc 	bl	8007aa4 <tanf>
    
    switch( f->type )
 8006f0c:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006f0e:	eeb0 8a40 	vmov.f32	s16, s0
 8006f12:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8006f16:	2b0a      	cmp	r3, #10
 8006f18:	f200 8117 	bhi.w	800714a <tVZFilter_calcCoeffs+0x262>
 8006f1c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006f20:	002f0026 	.word	0x002f0026
 8006f24:	00410038 	.word	0x00410038
 8006f28:	0056004d 	.word	0x0056004d
 8006f2c:	00a1008b 	.word	0x00a1008b
 8006f30:	010a00b7 	.word	0x010a00b7
 8006f34:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8006f36:	edd4 7a05 	vldr	s15, [r4, #20]
 8006f3a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f3e:	eeb1 7a67 	vneg.f32	s14, s15
 8006f42:	61e3      	str	r3, [r4, #28]
 8006f44:	6263      	str	r3, [r4, #36]	; 0x24
 8006f46:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8006f4e:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006f52:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8006f56:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006f5a:	eee7 6a88 	vfma.f32	s13, s15, s16
 8006f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f62:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8006f66:	ecbd 8b02 	vpop	{d8}
 8006f6a:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006f72:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006f76:	61e3      	str	r3, [r4, #28]
 8006f78:	6223      	str	r3, [r4, #32]
 8006f7a:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8006f7c:	e7e5      	b.n	8006f4a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006f84:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8006f88:	6223      	str	r3, [r4, #32]
 8006f8a:	6263      	str	r3, [r4, #36]	; 0x24
 8006f8c:	61e2      	str	r2, [r4, #28]
            break;
 8006f8e:	e7dc      	b.n	8006f4a <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8006f90:	2300      	movs	r3, #0
 8006f92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006f96:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8006f9a:	61e3      	str	r3, [r4, #28]
 8006f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8006f9e:	6222      	str	r2, [r4, #32]
            break;
 8006fa0:	e7d3      	b.n	8006f4a <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006fa2:	edd4 7a05 	vldr	s15, [r4, #20]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8006fac:	61e3      	str	r3, [r4, #28]
 8006fae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006fb2:	6263      	str	r3, [r4, #36]	; 0x24
 8006fb4:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8006fb8:	e7c7      	b.n	8006f4a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006fba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006fbe:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006fc0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006fc4:	6222      	str	r2, [r4, #32]
 8006fc6:	61e3      	str	r3, [r4, #28]
 8006fc8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8006fca:	e7be      	b.n	8006f4a <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8006fcc:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8006fd0:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8006fd4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006fd8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006fdc:	f000 fb80 	bl	80076e0 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8006fe0:	ee28 0a80 	vmul.f32	s0, s17, s0
 8006fe4:	f000 fd5e 	bl	8007aa4 <tanf>
            float r  = f->g/wl;
 8006fe8:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8006fec:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8006ff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ff4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8006ff8:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8006ffc:	ed84 7a07 	vstr	s14, [r4, #28]
 8007000:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8007004:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8007008:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800700c:	eef0 6a47 	vmov.f32	s13, s14
 8007010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007014:	ee77 7a45 	vsub.f32	s15, s14, s10
 8007018:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800701c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8007020:	eef1 7ac7 	vsqrt.f32	s15, s14
 8007024:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007028:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800702c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007030:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8007034:	e789      	b.n	8006f4a <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8007036:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800703a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800703e:	edd4 7a05 	vldr	s15, [r4, #20]
 8007042:	eef1 6ac7 	vsqrt.f32	s13, s14
 8007046:	ed84 7a07 	vstr	s14, [r4, #28]
 800704a:	6263      	str	r3, [r4, #36]	; 0x24
 800704c:	ee27 6a27 	vmul.f32	s12, s14, s15
 8007050:	ed84 6a08 	vstr	s12, [r4, #32]
 8007054:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007058:	ee80 8a07 	vdiv.f32	s16, s0, s14
 800705c:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8007060:	e773      	b.n	8006f4a <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8007062:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8007066:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800706a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800706e:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8007072:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8007076:	61e3      	str	r3, [r4, #28]
 8007078:	ee27 6a27 	vmul.f32	s12, s14, s15
 800707c:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007080:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8007084:	ee20 8a07 	vmul.f32	s16, s0, s14
 8007088:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 800708c:	e75d      	b.n	8006f4a <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 800708e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007092:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8007096:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800709a:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8007154 <tVZFilter_calcCoeffs+0x26c>
 800709e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 80070a2:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80070a6:	eeb0 0a48 	vmov.f32	s0, s16
 80070aa:	eea7 0a67 	vfms.f32	s0, s14, s15
 80070ae:	f000 f94f 	bl	8007350 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80070b2:	eddf 0a28 	vldr	s1, [pc, #160]	; 8007154 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80070b6:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80070ba:	eeb0 0a68 	vmov.f32	s0, s17
 80070be:	f000 f94b 	bl	8007358 <minimum>
            f->cB = 1.0f-x*x;
 80070c2:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070c6:	edd4 7a05 	vldr	s15, [r4, #20]
 80070ca:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 80070ce:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070d2:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80070d6:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80070da:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070de:	ee76 5a06 	vadd.f32	s11, s12, s12
 80070e2:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 80070e6:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070ea:	eee6 7a06 	vfma.f32	s15, s12, s12
 80070ee:	eee0 7a00 	vfma.f32	s15, s0, s0
 80070f2:	eee0 7a65 	vfms.f32	s15, s0, s11
 80070f6:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80070fa:	f000 f8cd 	bl	8007298 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 80070fe:	edd4 5a07 	vldr	s11, [r4, #28]
 8007102:	ed94 6a08 	vldr	s12, [r4, #32]
 8007106:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 800710a:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800710e:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8007112:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007116:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800711a:	ee65 5a80 	vmul.f32	s11, s11, s0
 800711e:	ee26 6a00 	vmul.f32	s12, s12, s0
 8007122:	ee66 6a80 	vmul.f32	s13, s13, s0
 8007126:	edc4 5a07 	vstr	s11, [r4, #28]
 800712a:	ed84 6a08 	vstr	s12, [r4, #32]
 800712e:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 8007132:	e70a      	b.n	8006f4a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8007134:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8007138:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 800713c:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 800713e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8007142:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8007146:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8007148:	e6ff      	b.n	8006f4a <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800714a:	edd4 7a05 	vldr	s15, [r4, #20]
 800714e:	e6fc      	b.n	8006f4a <tVZFilter_calcCoeffs+0x62>
 8007150:	40490fdb 	.word	0x40490fdb
 8007154:	00000000 	.word	0x00000000

08007158 <tVZFilter_initToPool>:
{
 8007158:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 800715a:	6817      	ldr	r7, [r2, #0]
{
 800715c:	4605      	mov	r5, r0
 800715e:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8007160:	204c      	movs	r0, #76	; 0x4c
 8007162:	4639      	mov	r1, r7
{
 8007164:	ed2d 8b04 	vpush	{d8-d9}
 8007168:	b083      	sub	sp, #12
 800716a:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800716e:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8007172:	ed9f 8a42 	vldr	s16, [pc, #264]	; 800727c <tVZFilter_initToPool+0x124>
{
 8007176:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800717a:	f000 f907 	bl	800738c <mpool_alloc>
 800717e:	6028      	str	r0, [r5, #0]
 8007180:	4604      	mov	r4, r0
    f->mempool = m;
 8007182:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007184:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 8007188:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800718a:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 800718e:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007192:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 8007280 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
 8007196:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800719a:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80071a2:	f000 f89b 	bl	80072dc <LEAF_clip>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80071a6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8007284 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
 80071aa:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80071ae:	ee20 6a09 	vmul.f32	s12, s0, s18
 80071b2:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 80071b6:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 80071ba:	4b33      	ldr	r3, [pc, #204]	; (8007288 <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80071bc:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 80071c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 80071c2:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 80071c6:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80071ca:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80071ce:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 80071d2:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 80071d4:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 80071d8:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 80071dc:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 80071e0:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 80071e4:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80071e8:	f000 fc5c 	bl	8007aa4 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80071ec:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800728c <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80071f0:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80071f4:	eef0 0a68 	vmov.f32	s1, s17
 80071f8:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 80071fc:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80071fe:	f000 f86d 	bl	80072dc <LEAF_clip>
 8007202:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8007206:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800720a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 800720e:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
 8007212:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8007214:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007218:	f000 fa62 	bl	80076e0 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800721c:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8007220:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8007224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007228:	ee67 7a89 	vmul.f32	s15, s15, s18
 800722c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007230:	f000 fc38 	bl	8007aa4 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8007234:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8007238:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 800723c:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800723e:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8007242:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8007246:	ee27 7a07 	vmul.f32	s14, s14, s14
 800724a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800724e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007252:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007256:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800725a:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800725e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007262:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 8007266:	f7ff fe3f 	bl	8006ee8 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 800726a:	4628      	mov	r0, r5
}
 800726c:	b003      	add	sp, #12
 800726e:	ecbd 8b04 	vpop	{d8-d9}
 8007272:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 8007276:	f7ff be37 	b.w	8006ee8 <tVZFilter_calcCoeffs>
 800727a:	bf00      	nop
 800727c:	00000000 	.word	0x00000000
 8007280:	40490fdb 	.word	0x40490fdb
 8007284:	3fb504f3 	.word	0x3fb504f3
 8007288:	3f3504f3 	.word	0x3f3504f3
 800728c:	42c80000 	.word	0x42c80000

08007290 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8007290:	3218      	adds	r2, #24
 8007292:	f7ff bf61 	b.w	8007158 <tVZFilter_initToPool>
 8007296:	bf00      	nop

08007298 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8007298:	ee10 2a10 	vmov	r2, s0
 800729c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 80072a0:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80072a2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80072a6:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 80072aa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80072ae:	ee00 3a10 	vmov	s0, r3
 80072b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80072b6:	eea0 7a67 	vfms.f32	s14, s0, s15
 80072ba:	ee60 7a07 	vmul.f32	s15, s0, s14
 80072be:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 80072c2:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 80072c6:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 80072ca:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 80072ce:	336e      	adds	r3, #110	; 0x6e
}
 80072d0:	ee00 3a10 	vmov	s0, r3
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	5f3759df 	.word	0x5f3759df

080072dc <LEAF_clip>:
float LEAF_clip(float min, float val, float max)
#endif
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 80072dc:	eeb4 0ac1 	vcmpe.f32	s0, s2
 80072e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e4:	dd05      	ble.n	80072f2 <LEAF_clip+0x16>
 80072e6:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 80072ea:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 80072ee:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 80072f2:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80072f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fa:	dc01      	bgt.n	8007300 <LEAF_clip+0x24>
    {
        return tempmin;
    }
    else if (val > tempmax)
 80072fc:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop

08007304 <LEAF_generate_atodb>:
    }
}


void LEAF_generate_atodb(float* buffer, int size)
{
 8007304:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
 8007306:	1e4b      	subs	r3, r1, #1
 8007308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    for (int i = 0; i < size; i++)
 800730c:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8007316:	ed2d 8b04 	vpush	{d8-d9}
    float increment = 1.0f / (float)(size-1);
 800731a:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 800731e:	dd12      	ble.n	8007346 <LEAF_generate_atodb+0x42>
 8007320:	4604      	mov	r4, r0
    float x = 0.0f;
 8007322:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800734c <LEAF_generate_atodb+0x48>
 8007326:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 800732a:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 800732e:	eeb0 0a48 	vmov.f32	s0, s16
 8007332:	f000 fb7b 	bl	8007a2c <log10f>
 8007336:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 800733a:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 800733e:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8007342:	42a5      	cmp	r5, r4
 8007344:	d1f3      	bne.n	800732e <LEAF_generate_atodb+0x2a>
}
 8007346:	ecbd 8b04 	vpop	{d8-d9}
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	00000000 	.word	0x00000000

08007350 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8007350:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop

08007358 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8007358:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop

08007360 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8007360:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8007362:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8007364:	2510      	movs	r5, #16
    pool->usize  = 0;
 8007366:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8007368:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800736a:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
 800736c:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
 800736e:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8007372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007374:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 8007376:	440b      	add	r3, r1
 8007378:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 800737a:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 800737e:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8007380:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 8007384:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8007386:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 8007388:	6183      	str	r3, [r0, #24]
}
 800738a:	4770      	bx	lr

0800738c <mpool_alloc>:
{
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 800738e:	684a      	ldr	r2, [r1, #4]
{
 8007390:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8007392:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8007394:	3301      	adds	r3, #1
 8007396:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8007398:	694b      	ldr	r3, [r1, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d04a      	beq.n	8007434 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800739e:	1dc4      	adds	r4, r0, #7
 80073a0:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 80073a4:	e002      	b.n	80073ac <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 80073a6:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d043      	beq.n	8007434 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	42a2      	cmp	r2, r4
 80073b0:	d3f9      	bcc.n	80073a6 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 80073b2:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80073b4:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 80073b6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80073ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80073bc:	4281      	cmp	r1, r0
 80073be:	d246      	bcs.n	800744e <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80073c0:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 80073c4:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 80073c6:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80073c8:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 80073ca:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 80073cc:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 80073ce:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 80073d2:	4429      	add	r1, r5
 80073d4:	5111      	str	r1, [r2, r4]
    node->size = size;
 80073d6:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 80073d8:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 80073dc:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80073e0:	429a      	cmp	r2, r3
        pool->head = new_node;
 80073e2:	bf08      	it	eq
 80073e4:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	b10a      	cbz	r2, 80073f0 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 80073ec:	6899      	ldr	r1, [r3, #8]
 80073ee:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	b10a      	cbz	r2, 80073f8 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 80073f4:	6859      	ldr	r1, [r3, #4]
 80073f6:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 80073f8:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80073fa:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 80073fc:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8007400:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007404:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007408:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800740a:	4422      	add	r2, r4
 800740c:	4402      	add	r2, r0
 800740e:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8007412:	694a      	ldr	r2, [r1, #20]
 8007414:	42aa      	cmp	r2, r5
 8007416:	dd0b      	ble.n	8007430 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8007418:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 800741a:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800741c:	b14a      	cbz	r2, 8007432 <mpool_alloc+0xa6>
 800741e:	1e41      	subs	r1, r0, #1
 8007420:	460a      	mov	r2, r1
 8007422:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007426:	68dc      	ldr	r4, [r3, #12]
 8007428:	3202      	adds	r2, #2
 800742a:	1a12      	subs	r2, r2, r0
 800742c:	42a2      	cmp	r2, r4
 800742e:	d3f7      	bcc.n	8007420 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
 8007430:	6818      	ldr	r0, [r3, #0]
}
 8007432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8007434:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8007438:	1a9b      	subs	r3, r3, r2
 800743a:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800743c:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8007440:	bf8c      	ite	hi
 8007442:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007444:	2100      	movls	r1, #0
 8007446:	f000 f88f 	bl	8007568 <LEAF_internalErrorCallback>
        return NULL;
 800744a:	2000      	movs	r0, #0
}
 800744c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 800744e:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8007450:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8007452:	e7c3      	b.n	80073dc <mpool_alloc+0x50>

08007454 <mpool_calloc>:
{
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8007456:	684a      	ldr	r2, [r1, #4]
{
 8007458:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 800745a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800745c:	3301      	adds	r3, #1
 800745e:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8007460:	694b      	ldr	r3, [r1, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d044      	beq.n	80074f0 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8007466:	1dc4      	adds	r4, r0, #7
 8007468:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 800746c:	e002      	b.n	8007474 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 800746e:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8007470:	2b00      	cmp	r3, #0
 8007472:	d03d      	beq.n	80074f0 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	42a2      	cmp	r2, r4
 8007478:	d3f9      	bcc.n	800746e <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 800747a:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800747c:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 800747e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007482:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007484:	4281      	cmp	r1, r0
 8007486:	d240      	bcs.n	800750a <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007488:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800748c:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 800748e:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007490:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8007492:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8007494:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 8007496:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 800749a:	4429      	add	r1, r5
 800749c:	5111      	str	r1, [r2, r4]
    node->size = size;
 800749e:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 80074a0:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 80074a4:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80074a8:	429a      	cmp	r2, r3
        pool->head = new_node;
 80074aa:	bf08      	it	eq
 80074ac:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	b10a      	cbz	r2, 80074b8 <mpool_calloc+0x64>
        node->next->prev = node->prev;
 80074b4:	6899      	ldr	r1, [r3, #8]
 80074b6:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	b10a      	cbz	r2, 80074c0 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 80074bc:	6859      	ldr	r1, [r3, #4]
 80074be:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 80074c0:	2200      	movs	r2, #0
    node->prev = NULL;
 80074c2:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80074c6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80074ca:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80074ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80074d0:	4401      	add	r1, r0
 80074d2:	68d8      	ldr	r0, [r3, #12]
 80074d4:	4401      	add	r1, r0
 80074d6:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 80074da:	68d9      	ldr	r1, [r3, #12]
 80074dc:	b131      	cbz	r1, 80074ec <mpool_calloc+0x98>
 80074de:	4610      	mov	r0, r2
 80074e0:	6819      	ldr	r1, [r3, #0]
 80074e2:	5488      	strb	r0, [r1, r2]
 80074e4:	3201      	adds	r2, #1
 80074e6:	68d9      	ldr	r1, [r3, #12]
 80074e8:	4291      	cmp	r1, r2
 80074ea:	d8f9      	bhi.n	80074e0 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 80074ec:	6818      	ldr	r0, [r3, #0]
}
 80074ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80074f0:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80074f8:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80074fc:	bf8c      	ite	hi
 80074fe:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007500:	2100      	movls	r1, #0
 8007502:	f000 f831 	bl	8007568 <LEAF_internalErrorCallback>
        return NULL;
 8007506:	2000      	movs	r0, #0
}
 8007508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 800750a:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 800750c:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 800750e:	e7c9      	b.n	80074a4 <mpool_calloc+0x50>

08007510 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop

08007514 <LEAF_init>:
{
 8007514:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 8007516:	6200      	str	r0, [r0, #32]
{
 8007518:	4604      	mov	r4, r0
 800751a:	461d      	mov	r5, r3
 800751c:	ed2d 8b02 	vpush	{d8}
 8007520:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 8007524:	f7ff ff1c 	bl	8007360 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 8007528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800752c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8007560 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 8007530:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8007532:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 8007534:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 8007538:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 800753c:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 800753e:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 8007540:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8007544:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 8007548:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800754c:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8007550:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8007554:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8007558:	ecbd 8b02 	vpop	{d8}
 800755c:	bd38      	pop	{r3, r4, r5, pc}
 800755e:	bf00      	nop
 8007560:	40c90fdb 	.word	0x40c90fdb
 8007564:	08007511 	.word	0x08007511

08007568 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8007568:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 800756a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800756e:	2401      	movs	r4, #1
 8007570:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 8007572:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 8007576:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007578:	4718      	bx	r3
 800757a:	bf00      	nop

0800757c <memset>:
 800757c:	4402      	add	r2, r0
 800757e:	4603      	mov	r3, r0
 8007580:	4293      	cmp	r3, r2
 8007582:	d100      	bne.n	8007586 <memset+0xa>
 8007584:	4770      	bx	lr
 8007586:	f803 1b01 	strb.w	r1, [r3], #1
 800758a:	e7f9      	b.n	8007580 <memset+0x4>

0800758c <__errno>:
 800758c:	4b01      	ldr	r3, [pc, #4]	; (8007594 <__errno+0x8>)
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20000060 	.word	0x20000060

08007598 <__libc_init_array>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	4d0d      	ldr	r5, [pc, #52]	; (80075d0 <__libc_init_array+0x38>)
 800759c:	4c0d      	ldr	r4, [pc, #52]	; (80075d4 <__libc_init_array+0x3c>)
 800759e:	1b64      	subs	r4, r4, r5
 80075a0:	10a4      	asrs	r4, r4, #2
 80075a2:	2600      	movs	r6, #0
 80075a4:	42a6      	cmp	r6, r4
 80075a6:	d109      	bne.n	80075bc <__libc_init_array+0x24>
 80075a8:	4d0b      	ldr	r5, [pc, #44]	; (80075d8 <__libc_init_array+0x40>)
 80075aa:	4c0c      	ldr	r4, [pc, #48]	; (80075dc <__libc_init_array+0x44>)
 80075ac:	f001 f822 	bl	80085f4 <_init>
 80075b0:	1b64      	subs	r4, r4, r5
 80075b2:	10a4      	asrs	r4, r4, #2
 80075b4:	2600      	movs	r6, #0
 80075b6:	42a6      	cmp	r6, r4
 80075b8:	d105      	bne.n	80075c6 <__libc_init_array+0x2e>
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c0:	4798      	blx	r3
 80075c2:	3601      	adds	r6, #1
 80075c4:	e7ee      	b.n	80075a4 <__libc_init_array+0xc>
 80075c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ca:	4798      	blx	r3
 80075cc:	3601      	adds	r6, #1
 80075ce:	e7f2      	b.n	80075b6 <__libc_init_array+0x1e>
 80075d0:	08008dd8 	.word	0x08008dd8
 80075d4:	08008dd8 	.word	0x08008dd8
 80075d8:	08008dd8 	.word	0x08008dd8
 80075dc:	08008ddc 	.word	0x08008ddc

080075e0 <logf>:
 80075e0:	ee10 3a10 	vmov	r3, s0
 80075e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80075e8:	b410      	push	{r4}
 80075ea:	d055      	beq.n	8007698 <logf+0xb8>
 80075ec:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 80075f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80075f4:	d31a      	bcc.n	800762c <logf+0x4c>
 80075f6:	005a      	lsls	r2, r3, #1
 80075f8:	d104      	bne.n	8007604 <logf+0x24>
 80075fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075fe:	2001      	movs	r0, #1
 8007600:	f000 b9f2 	b.w	80079e8 <__math_divzerof>
 8007604:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007608:	d043      	beq.n	8007692 <logf+0xb2>
 800760a:	2b00      	cmp	r3, #0
 800760c:	db02      	blt.n	8007614 <logf+0x34>
 800760e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8007612:	d303      	bcc.n	800761c <logf+0x3c>
 8007614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007618:	f000 b9f8 	b.w	8007a0c <__math_invalidf>
 800761c:	eddf 7a20 	vldr	s15, [pc, #128]	; 80076a0 <logf+0xc0>
 8007620:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007624:	ee10 3a10 	vmov	r3, s0
 8007628:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800762c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8007630:	491c      	ldr	r1, [pc, #112]	; (80076a4 <logf+0xc4>)
 8007632:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8007636:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800763a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800763e:	0dd4      	lsrs	r4, r2, #23
 8007640:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8007644:	05e4      	lsls	r4, r4, #23
 8007646:	ed90 6b00 	vldr	d6, [r0]
 800764a:	1b1b      	subs	r3, r3, r4
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8007654:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007658:	15d2      	asrs	r2, r2, #23
 800765a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800765e:	ed90 6b02 	vldr	d6, [r0, #8]
 8007662:	ee20 4b00 	vmul.f64	d4, d0, d0
 8007666:	ee07 2a90 	vmov	s15, r2
 800766a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800766e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007672:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8007676:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800767a:	eea5 7b00 	vfma.f64	d7, d5, d0
 800767e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8007682:	ee30 0b06 	vadd.f64	d0, d0, d6
 8007686:	eea5 7b04 	vfma.f64	d7, d5, d4
 800768a:	eea4 0b07 	vfma.f64	d0, d4, d7
 800768e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80076a8 <logf+0xc8>
 800769c:	e7f9      	b.n	8007692 <logf+0xb2>
 800769e:	bf00      	nop
 80076a0:	4b000000 	.word	0x4b000000
 80076a4:	080087b8 	.word	0x080087b8
 80076a8:	00000000 	.word	0x00000000

080076ac <checkint>:
 80076ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80076b0:	2b7e      	cmp	r3, #126	; 0x7e
 80076b2:	dd10      	ble.n	80076d6 <checkint+0x2a>
 80076b4:	2b96      	cmp	r3, #150	; 0x96
 80076b6:	dc0c      	bgt.n	80076d2 <checkint+0x26>
 80076b8:	2201      	movs	r2, #1
 80076ba:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80076be:	fa02 f303 	lsl.w	r3, r2, r3
 80076c2:	1e5a      	subs	r2, r3, #1
 80076c4:	4202      	tst	r2, r0
 80076c6:	d106      	bne.n	80076d6 <checkint+0x2a>
 80076c8:	4203      	tst	r3, r0
 80076ca:	bf0c      	ite	eq
 80076cc:	2002      	moveq	r0, #2
 80076ce:	2001      	movne	r0, #1
 80076d0:	4770      	bx	lr
 80076d2:	2002      	movs	r0, #2
 80076d4:	4770      	bx	lr
 80076d6:	2000      	movs	r0, #0
 80076d8:	4770      	bx	lr
 80076da:	0000      	movs	r0, r0
 80076dc:	0000      	movs	r0, r0
	...

080076e0 <powf>:
 80076e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076e2:	ee10 1a10 	vmov	r1, s0
 80076e6:	ee10 4a90 	vmov	r4, s1
 80076ea:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80076ee:	0062      	lsls	r2, r4, #1
 80076f0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80076f4:	eef0 7a40 	vmov.f32	s15, s0
 80076f8:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 80076fc:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8007700:	d252      	bcs.n	80077a8 <powf+0xc8>
 8007702:	4298      	cmp	r0, r3
 8007704:	d252      	bcs.n	80077ac <powf+0xcc>
 8007706:	2000      	movs	r0, #0
 8007708:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800770c:	4a9e      	ldr	r2, [pc, #632]	; (8007988 <powf+0x2a8>)
 800770e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007712:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8007716:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800771a:	0ddb      	lsrs	r3, r3, #23
 800771c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8007720:	05db      	lsls	r3, r3, #23
 8007722:	ed94 5b00 	vldr	d5, [r4]
 8007726:	1ac9      	subs	r1, r1, r3
 8007728:	ee07 1a90 	vmov	s15, r1
 800772c:	15db      	asrs	r3, r3, #23
 800772e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007732:	eea5 6b07 	vfma.f64	d6, d5, d7
 8007736:	ed94 5b02 	vldr	d5, [r4, #8]
 800773a:	ee26 2b06 	vmul.f64	d2, d6, d6
 800773e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 800774a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800774e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007752:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8007756:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 800775a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800775e:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8007762:	eea6 5b04 	vfma.f64	d5, d6, d4
 8007766:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 800776a:	eea6 7b04 	vfma.f64	d7, d6, d4
 800776e:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 8007772:	eea2 7b05 	vfma.f64	d7, d2, d5
 8007776:	eea3 7b01 	vfma.f64	d7, d3, d1
 800777a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800777e:	ee16 3a90 	vmov	r3, s13
 8007782:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8007786:	f248 03bf 	movw	r3, #32959	; 0x80bf
 800778a:	429a      	cmp	r2, r3
 800778c:	f0c0 80b0 	bcc.w	80078f0 <powf+0x210>
 8007790:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8007968 <powf+0x288>
 8007794:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779c:	dd78      	ble.n	8007890 <powf+0x1b0>
 800779e:	b003      	add	sp, #12
 80077a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077a4:	f000 b91a 	b.w	80079dc <__math_oflowf>
 80077a8:	4298      	cmp	r0, r3
 80077aa:	d32d      	bcc.n	8007808 <powf+0x128>
 80077ac:	b952      	cbnz	r2, 80077c4 <powf+0xe4>
 80077ae:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 80077b2:	0049      	lsls	r1, r1, #1
 80077b4:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 80077b8:	f240 80c8 	bls.w	800794c <powf+0x26c>
 80077bc:	ee37 0aa0 	vadd.f32	s0, s15, s1
 80077c0:	b003      	add	sp, #12
 80077c2:	bd30      	pop	{r4, r5, pc}
 80077c4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80077c8:	d105      	bne.n	80077d6 <powf+0xf6>
 80077ca:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80077ce:	0064      	lsls	r4, r4, #1
 80077d0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80077d4:	e7f0      	b.n	80077b8 <powf+0xd8>
 80077d6:	0049      	lsls	r1, r1, #1
 80077d8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 80077dc:	d8ee      	bhi.n	80077bc <powf+0xdc>
 80077de:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80077e2:	d1eb      	bne.n	80077bc <powf+0xdc>
 80077e4:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 80077e8:	f000 80b0 	beq.w	800794c <powf+0x26c>
 80077ec:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 80077f0:	ea6f 0404 	mvn.w	r4, r4
 80077f4:	bf34      	ite	cc
 80077f6:	2100      	movcc	r1, #0
 80077f8:	2101      	movcs	r1, #1
 80077fa:	0fe4      	lsrs	r4, r4, #31
 80077fc:	42a1      	cmp	r1, r4
 80077fe:	f040 80a8 	bne.w	8007952 <powf+0x272>
 8007802:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8007806:	e7db      	b.n	80077c0 <powf+0xe0>
 8007808:	004d      	lsls	r5, r1, #1
 800780a:	1e6a      	subs	r2, r5, #1
 800780c:	429a      	cmp	r2, r3
 800780e:	d31c      	bcc.n	800784a <powf+0x16a>
 8007810:	2900      	cmp	r1, #0
 8007812:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007816:	da0f      	bge.n	8007838 <powf+0x158>
 8007818:	ee10 0a90 	vmov	r0, s1
 800781c:	f7ff ff46 	bl	80076ac <checkint>
 8007820:	2801      	cmp	r0, #1
 8007822:	d109      	bne.n	8007838 <powf+0x158>
 8007824:	eeb1 0a40 	vneg.f32	s0, s0
 8007828:	b945      	cbnz	r5, 800783c <powf+0x15c>
 800782a:	2c00      	cmp	r4, #0
 800782c:	dac8      	bge.n	80077c0 <powf+0xe0>
 800782e:	b003      	add	sp, #12
 8007830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007834:	f000 b8d8 	b.w	80079e8 <__math_divzerof>
 8007838:	2000      	movs	r0, #0
 800783a:	e7f5      	b.n	8007828 <powf+0x148>
 800783c:	2c00      	cmp	r4, #0
 800783e:	dabf      	bge.n	80077c0 <powf+0xe0>
 8007840:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007844:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007848:	e7ba      	b.n	80077c0 <powf+0xe0>
 800784a:	2900      	cmp	r1, #0
 800784c:	da1e      	bge.n	800788c <powf+0x1ac>
 800784e:	ee10 0a90 	vmov	r0, s1
 8007852:	f7ff ff2b 	bl	80076ac <checkint>
 8007856:	b920      	cbnz	r0, 8007862 <powf+0x182>
 8007858:	b003      	add	sp, #12
 800785a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800785e:	f000 b8d5 	b.w	8007a0c <__math_invalidf>
 8007862:	1e43      	subs	r3, r0, #1
 8007864:	4258      	negs	r0, r3
 8007866:	4158      	adcs	r0, r3
 8007868:	0400      	lsls	r0, r0, #16
 800786a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800786e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007872:	f4bf af49 	bcs.w	8007708 <powf+0x28>
 8007876:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800798c <powf+0x2ac>
 800787a:	ee27 0a87 	vmul.f32	s0, s15, s14
 800787e:	ee10 3a10 	vmov	r3, s0
 8007882:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007886:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800788a:	e73d      	b.n	8007708 <powf+0x28>
 800788c:	2000      	movs	r0, #0
 800788e:	e7ee      	b.n	800786e <powf+0x18e>
 8007890:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8007970 <powf+0x290>
 8007894:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789c:	dd10      	ble.n	80078c0 <powf+0x1e0>
 800789e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d158      	bne.n	8007958 <powf+0x278>
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	eddd 7a00 	vldr	s15, [sp]
 80078ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078b4:	eef4 7a47 	vcmp.f32	s15, s14
 80078b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078bc:	f47f af6f 	bne.w	800779e <powf+0xbe>
 80078c0:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007978 <powf+0x298>
 80078c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80078c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078cc:	d804      	bhi.n	80078d8 <powf+0x1f8>
 80078ce:	b003      	add	sp, #12
 80078d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078d4:	f000 b876 	b.w	80079c4 <__math_uflowf>
 80078d8:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8007980 <powf+0x2a0>
 80078dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80078e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e4:	d504      	bpl.n	80078f0 <powf+0x210>
 80078e6:	b003      	add	sp, #12
 80078e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078ec:	f000 b870 	b.w	80079d0 <__math_may_uflowf>
 80078f0:	4b27      	ldr	r3, [pc, #156]	; (8007990 <powf+0x2b0>)
 80078f2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80078f6:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 80078fa:	ee36 7b05 	vadd.f64	d7, d6, d5
 80078fe:	ee17 2a10 	vmov	r2, s14
 8007902:	ee37 7b45 	vsub.f64	d7, d7, d5
 8007906:	f002 011f 	and.w	r1, r2, #31
 800790a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800790e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8007912:	ee27 4b07 	vmul.f64	d4, d7, d7
 8007916:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800791a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 800791e:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8007922:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007926:	686d      	ldr	r5, [r5, #4]
 8007928:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 800792c:	1882      	adds	r2, r0, r2
 800792e:	2300      	movs	r3, #0
 8007930:	1918      	adds	r0, r3, r4
 8007932:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8007936:	eea7 0b05 	vfma.f64	d0, d7, d5
 800793a:	ec41 0b17 	vmov	d7, r0, r1
 800793e:	eea6 0b04 	vfma.f64	d0, d6, d4
 8007942:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007946:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800794a:	e739      	b.n	80077c0 <powf+0xe0>
 800794c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007950:	e736      	b.n	80077c0 <powf+0xe0>
 8007952:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007994 <powf+0x2b4>
 8007956:	e733      	b.n	80077c0 <powf+0xe0>
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	eddd 7a01 	vldr	s15, [sp, #4]
 800795e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007966:	e7a5      	b.n	80078b4 <powf+0x1d4>
 8007968:	ffd1d571 	.word	0xffd1d571
 800796c:	405fffff 	.word	0x405fffff
 8007970:	ffa3aae2 	.word	0xffa3aae2
 8007974:	405fffff 	.word	0x405fffff
 8007978:	00000000 	.word	0x00000000
 800797c:	c062c000 	.word	0xc062c000
 8007980:	00000000 	.word	0x00000000
 8007984:	c062a000 	.word	0xc062a000
 8007988:	08008c78 	.word	0x08008c78
 800798c:	4b000000 	.word	0x4b000000
 8007990:	08008670 	.word	0x08008670
 8007994:	00000000 	.word	0x00000000

08007998 <with_errnof>:
 8007998:	b513      	push	{r0, r1, r4, lr}
 800799a:	4604      	mov	r4, r0
 800799c:	ed8d 0a01 	vstr	s0, [sp, #4]
 80079a0:	f7ff fdf4 	bl	800758c <__errno>
 80079a4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80079a8:	6004      	str	r4, [r0, #0]
 80079aa:	b002      	add	sp, #8
 80079ac:	bd10      	pop	{r4, pc}

080079ae <xflowf>:
 80079ae:	b130      	cbz	r0, 80079be <xflowf+0x10>
 80079b0:	eef1 7a40 	vneg.f32	s15, s0
 80079b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80079b8:	2022      	movs	r0, #34	; 0x22
 80079ba:	f7ff bfed 	b.w	8007998 <with_errnof>
 80079be:	eef0 7a40 	vmov.f32	s15, s0
 80079c2:	e7f7      	b.n	80079b4 <xflowf+0x6>

080079c4 <__math_uflowf>:
 80079c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80079cc <__math_uflowf+0x8>
 80079c8:	f7ff bff1 	b.w	80079ae <xflowf>
 80079cc:	10000000 	.word	0x10000000

080079d0 <__math_may_uflowf>:
 80079d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80079d8 <__math_may_uflowf+0x8>
 80079d4:	f7ff bfeb 	b.w	80079ae <xflowf>
 80079d8:	1a200000 	.word	0x1a200000

080079dc <__math_oflowf>:
 80079dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80079e4 <__math_oflowf+0x8>
 80079e0:	f7ff bfe5 	b.w	80079ae <xflowf>
 80079e4:	70000000 	.word	0x70000000

080079e8 <__math_divzerof>:
 80079e8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8007a08 <__math_divzerof+0x20>
 80079ec:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80079f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079f4:	2800      	cmp	r0, #0
 80079f6:	f04f 0022 	mov.w	r0, #34	; 0x22
 80079fa:	fe47 7a27 	vseleq.f32	s15, s14, s15
 80079fe:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007a02:	f7ff bfc9 	b.w	8007998 <with_errnof>
 8007a06:	bf00      	nop
 8007a08:	00000000 	.word	0x00000000

08007a0c <__math_invalidf>:
 8007a0c:	eef0 7a40 	vmov.f32	s15, s0
 8007a10:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007a14:	eef4 7a67 	vcmp.f32	s15, s15
 8007a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8007a20:	d602      	bvs.n	8007a28 <__math_invalidf+0x1c>
 8007a22:	2021      	movs	r0, #33	; 0x21
 8007a24:	f7ff bfb8 	b.w	8007998 <with_errnof>
 8007a28:	4770      	bx	lr
	...

08007a2c <log10f>:
 8007a2c:	b508      	push	{r3, lr}
 8007a2e:	ed2d 8b02 	vpush	{d8}
 8007a32:	eeb0 8a40 	vmov.f32	s16, s0
 8007a36:	f000 f941 	bl	8007cbc <__ieee754_log10f>
 8007a3a:	eeb4 8a48 	vcmp.f32	s16, s16
 8007a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a42:	d60f      	bvs.n	8007a64 <log10f+0x38>
 8007a44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4c:	d80a      	bhi.n	8007a64 <log10f+0x38>
 8007a4e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a56:	d108      	bne.n	8007a6a <log10f+0x3e>
 8007a58:	f7ff fd98 	bl	800758c <__errno>
 8007a5c:	2322      	movs	r3, #34	; 0x22
 8007a5e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007a80 <log10f+0x54>
 8007a62:	6003      	str	r3, [r0, #0]
 8007a64:	ecbd 8b02 	vpop	{d8}
 8007a68:	bd08      	pop	{r3, pc}
 8007a6a:	f7ff fd8f 	bl	800758c <__errno>
 8007a6e:	ecbd 8b02 	vpop	{d8}
 8007a72:	2321      	movs	r3, #33	; 0x21
 8007a74:	6003      	str	r3, [r0, #0]
 8007a76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a7a:	4802      	ldr	r0, [pc, #8]	; (8007a84 <log10f+0x58>)
 8007a7c:	f000 b80c 	b.w	8007a98 <nanf>
 8007a80:	ff800000 	.word	0xff800000
 8007a84:	080088d8 	.word	0x080088d8

08007a88 <fabsf>:
 8007a88:	ee10 3a10 	vmov	r3, s0
 8007a8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a90:	ee00 3a10 	vmov	s0, r3
 8007a94:	4770      	bx	lr
	...

08007a98 <nanf>:
 8007a98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007aa0 <nanf+0x8>
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	7fc00000 	.word	0x7fc00000

08007aa4 <tanf>:
 8007aa4:	ee10 3a10 	vmov	r3, s0
 8007aa8:	b507      	push	{r0, r1, r2, lr}
 8007aaa:	4a12      	ldr	r2, [pc, #72]	; (8007af4 <tanf+0x50>)
 8007aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	dc07      	bgt.n	8007ac4 <tanf+0x20>
 8007ab4:	eddf 0a10 	vldr	s1, [pc, #64]	; 8007af8 <tanf+0x54>
 8007ab8:	2001      	movs	r0, #1
 8007aba:	b003      	add	sp, #12
 8007abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ac0:	f000 b81c 	b.w	8007afc <__kernel_tanf>
 8007ac4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007ac8:	db04      	blt.n	8007ad4 <tanf+0x30>
 8007aca:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007ace:	b003      	add	sp, #12
 8007ad0:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ad4:	4668      	mov	r0, sp
 8007ad6:	f000 f949 	bl	8007d6c <__ieee754_rem_pio2f>
 8007ada:	0040      	lsls	r0, r0, #1
 8007adc:	f000 0002 	and.w	r0, r0, #2
 8007ae0:	eddd 0a01 	vldr	s1, [sp, #4]
 8007ae4:	ed9d 0a00 	vldr	s0, [sp]
 8007ae8:	f1c0 0001 	rsb	r0, r0, #1
 8007aec:	f000 f806 	bl	8007afc <__kernel_tanf>
 8007af0:	e7ed      	b.n	8007ace <tanf+0x2a>
 8007af2:	bf00      	nop
 8007af4:	3f490fda 	.word	0x3f490fda
 8007af8:	00000000 	.word	0x00000000

08007afc <__kernel_tanf>:
 8007afc:	b508      	push	{r3, lr}
 8007afe:	ee10 3a10 	vmov	r3, s0
 8007b02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b06:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8007b0a:	eef0 7a40 	vmov.f32	s15, s0
 8007b0e:	da17      	bge.n	8007b40 <__kernel_tanf+0x44>
 8007b10:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8007b14:	ee17 1a10 	vmov	r1, s14
 8007b18:	bb41      	cbnz	r1, 8007b6c <__kernel_tanf+0x70>
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	d108      	bne.n	8007b32 <__kernel_tanf+0x36>
 8007b20:	f7ff ffb2 	bl	8007a88 <fabsf>
 8007b24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b28:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b30:	bd08      	pop	{r3, pc}
 8007b32:	2801      	cmp	r0, #1
 8007b34:	d0fa      	beq.n	8007b2c <__kernel_tanf+0x30>
 8007b36:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007b3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007b3e:	e7f5      	b.n	8007b2c <__kernel_tanf+0x30>
 8007b40:	494c      	ldr	r1, [pc, #304]	; (8007c74 <__kernel_tanf+0x178>)
 8007b42:	428a      	cmp	r2, r1
 8007b44:	db12      	blt.n	8007b6c <__kernel_tanf+0x70>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8007c78 <__kernel_tanf+0x17c>
 8007b4c:	bfb8      	it	lt
 8007b4e:	eef1 7a40 	vneglt.f32	s15, s0
 8007b52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b56:	eddf 7a49 	vldr	s15, [pc, #292]	; 8007c7c <__kernel_tanf+0x180>
 8007b5a:	bfb8      	it	lt
 8007b5c:	eef1 0a60 	vneglt.f32	s1, s1
 8007b60:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007b64:	eddf 0a46 	vldr	s1, [pc, #280]	; 8007c80 <__kernel_tanf+0x184>
 8007b68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b6c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007b70:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c84 <__kernel_tanf+0x188>
 8007b74:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8007c88 <__kernel_tanf+0x18c>
 8007b78:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8007c8c <__kernel_tanf+0x190>
 8007b7c:	493d      	ldr	r1, [pc, #244]	; (8007c74 <__kernel_tanf+0x178>)
 8007b7e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007b82:	428a      	cmp	r2, r1
 8007b84:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007b88:	eddf 5a41 	vldr	s11, [pc, #260]	; 8007c90 <__kernel_tanf+0x194>
 8007b8c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007b90:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007c94 <__kernel_tanf+0x198>
 8007b94:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007b98:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c98 <__kernel_tanf+0x19c>
 8007b9c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007ba0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8007c9c <__kernel_tanf+0x1a0>
 8007ba4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007ba8:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8007ca0 <__kernel_tanf+0x1a4>
 8007bac:	eee7 5a05 	vfma.f32	s11, s14, s10
 8007bb0:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007ca4 <__kernel_tanf+0x1a8>
 8007bb4:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007bb8:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8007ca8 <__kernel_tanf+0x1ac>
 8007bbc:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007bc0:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007cac <__kernel_tanf+0x1b0>
 8007bc4:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007bc8:	eddf 5a39 	vldr	s11, [pc, #228]	; 8007cb0 <__kernel_tanf+0x1b4>
 8007bcc:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007bd0:	eeb0 7a46 	vmov.f32	s14, s12
 8007bd4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007bd8:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8007bdc:	eeb0 6a60 	vmov.f32	s12, s1
 8007be0:	eea7 6a05 	vfma.f32	s12, s14, s10
 8007be4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8007cb4 <__kernel_tanf+0x1b8>
 8007be8:	eee6 0a26 	vfma.f32	s1, s12, s13
 8007bec:	eee5 0a07 	vfma.f32	s1, s10, s14
 8007bf0:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8007bf4:	db1d      	blt.n	8007c32 <__kernel_tanf+0x136>
 8007bf6:	ee07 0a10 	vmov	s14, r0
 8007bfa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007bfe:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8007c02:	ee76 6a87 	vadd.f32	s13, s13, s14
 8007c06:	179b      	asrs	r3, r3, #30
 8007c08:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	f1c3 0301 	rsb	r3, r3, #1
 8007c14:	ee76 6a60 	vsub.f32	s13, s12, s1
 8007c18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c1c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007c20:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007c24:	ee07 3a90 	vmov	s15, r3
 8007c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c30:	e77c      	b.n	8007b2c <__kernel_tanf+0x30>
 8007c32:	2801      	cmp	r0, #1
 8007c34:	d01b      	beq.n	8007c6e <__kernel_tanf+0x172>
 8007c36:	4b20      	ldr	r3, [pc, #128]	; (8007cb8 <__kernel_tanf+0x1bc>)
 8007c38:	ee16 2a90 	vmov	r2, s13
 8007c3c:	401a      	ands	r2, r3
 8007c3e:	ee05 2a90 	vmov	s11, r2
 8007c42:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c4a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007c4e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8007c52:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8007c56:	ee16 2a10 	vmov	r2, s12
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	ee07 3a90 	vmov	s15, r3
 8007c60:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007c64:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8007c68:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007c6c:	e75e      	b.n	8007b2c <__kernel_tanf+0x30>
 8007c6e:	eef0 7a66 	vmov.f32	s15, s13
 8007c72:	e75b      	b.n	8007b2c <__kernel_tanf+0x30>
 8007c74:	3f2ca140 	.word	0x3f2ca140
 8007c78:	3f490fda 	.word	0x3f490fda
 8007c7c:	33222168 	.word	0x33222168
 8007c80:	00000000 	.word	0x00000000
 8007c84:	b79bae5f 	.word	0xb79bae5f
 8007c88:	38a3f445 	.word	0x38a3f445
 8007c8c:	37d95384 	.word	0x37d95384
 8007c90:	3a1a26c8 	.word	0x3a1a26c8
 8007c94:	3b6b6916 	.word	0x3b6b6916
 8007c98:	3cb327a4 	.word	0x3cb327a4
 8007c9c:	3e088889 	.word	0x3e088889
 8007ca0:	3895c07a 	.word	0x3895c07a
 8007ca4:	398137b9 	.word	0x398137b9
 8007ca8:	3abede48 	.word	0x3abede48
 8007cac:	3c11371f 	.word	0x3c11371f
 8007cb0:	3d5d0dd1 	.word	0x3d5d0dd1
 8007cb4:	3eaaaaab 	.word	0x3eaaaaab
 8007cb8:	fffff000 	.word	0xfffff000

08007cbc <__ieee754_log10f>:
 8007cbc:	b508      	push	{r3, lr}
 8007cbe:	ee10 2a10 	vmov	r2, s0
 8007cc2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007cc6:	ed2d 8b02 	vpush	{d8}
 8007cca:	d108      	bne.n	8007cde <__ieee754_log10f+0x22>
 8007ccc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007d54 <__ieee754_log10f+0x98>
 8007cd0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007d58 <__ieee754_log10f+0x9c>
 8007cd4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007cd8:	ecbd 8b02 	vpop	{d8}
 8007cdc:	bd08      	pop	{r3, pc}
 8007cde:	2a00      	cmp	r2, #0
 8007ce0:	da02      	bge.n	8007ce8 <__ieee754_log10f+0x2c>
 8007ce2:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007ce6:	e7f3      	b.n	8007cd0 <__ieee754_log10f+0x14>
 8007ce8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007cec:	db02      	blt.n	8007cf4 <__ieee754_log10f+0x38>
 8007cee:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007cf2:	e7f1      	b.n	8007cd8 <__ieee754_log10f+0x1c>
 8007cf4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007cf8:	bfbf      	itttt	lt
 8007cfa:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8007d5c <__ieee754_log10f+0xa0>
 8007cfe:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007d02:	f06f 0118 	mvnlt.w	r1, #24
 8007d06:	ee17 2a90 	vmovlt	r2, s15
 8007d0a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007d0e:	bfa8      	it	ge
 8007d10:	2100      	movge	r1, #0
 8007d12:	3b7f      	subs	r3, #127	; 0x7f
 8007d14:	440b      	add	r3, r1
 8007d16:	0fd9      	lsrs	r1, r3, #31
 8007d18:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007d24:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8007d28:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007d2c:	ee00 3a10 	vmov	s0, r3
 8007d30:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007d34:	f7ff fc54 	bl	80075e0 <logf>
 8007d38:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007d60 <__ieee754_log10f+0xa4>
 8007d3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d40:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007d64 <__ieee754_log10f+0xa8>
 8007d44:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007d48:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007d68 <__ieee754_log10f+0xac>
 8007d4c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007d50:	e7c2      	b.n	8007cd8 <__ieee754_log10f+0x1c>
 8007d52:	bf00      	nop
 8007d54:	cc000000 	.word	0xcc000000
 8007d58:	00000000 	.word	0x00000000
 8007d5c:	4c000000 	.word	0x4c000000
 8007d60:	3ede5bd9 	.word	0x3ede5bd9
 8007d64:	355427db 	.word	0x355427db
 8007d68:	3e9a2080 	.word	0x3e9a2080

08007d6c <__ieee754_rem_pio2f>:
 8007d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d6e:	ee10 6a10 	vmov	r6, s0
 8007d72:	4b86      	ldr	r3, [pc, #536]	; (8007f8c <__ieee754_rem_pio2f+0x220>)
 8007d74:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007d78:	429d      	cmp	r5, r3
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	dc05      	bgt.n	8007d8c <__ieee754_rem_pio2f+0x20>
 8007d80:	2300      	movs	r3, #0
 8007d82:	ed80 0a00 	vstr	s0, [r0]
 8007d86:	6043      	str	r3, [r0, #4]
 8007d88:	2000      	movs	r0, #0
 8007d8a:	e020      	b.n	8007dce <__ieee754_rem_pio2f+0x62>
 8007d8c:	4b80      	ldr	r3, [pc, #512]	; (8007f90 <__ieee754_rem_pio2f+0x224>)
 8007d8e:	429d      	cmp	r5, r3
 8007d90:	dc38      	bgt.n	8007e04 <__ieee754_rem_pio2f+0x98>
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8007f94 <__ieee754_rem_pio2f+0x228>
 8007d98:	4b7f      	ldr	r3, [pc, #508]	; (8007f98 <__ieee754_rem_pio2f+0x22c>)
 8007d9a:	f025 050f 	bic.w	r5, r5, #15
 8007d9e:	dd18      	ble.n	8007dd2 <__ieee754_rem_pio2f+0x66>
 8007da0:	429d      	cmp	r5, r3
 8007da2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007da6:	bf09      	itett	eq
 8007da8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8007f9c <__ieee754_rem_pio2f+0x230>
 8007dac:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8007fa0 <__ieee754_rem_pio2f+0x234>
 8007db0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007db4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8007fa4 <__ieee754_rem_pio2f+0x238>
 8007db8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007dbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007dc0:	edc0 6a00 	vstr	s13, [r0]
 8007dc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007dc8:	edc0 7a01 	vstr	s15, [r0, #4]
 8007dcc:	2001      	movs	r0, #1
 8007dce:	b007      	add	sp, #28
 8007dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd2:	429d      	cmp	r5, r3
 8007dd4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007dd8:	bf09      	itett	eq
 8007dda:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8007f9c <__ieee754_rem_pio2f+0x230>
 8007dde:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8007fa0 <__ieee754_rem_pio2f+0x234>
 8007de2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007de6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8007fa4 <__ieee754_rem_pio2f+0x238>
 8007dea:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007dee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007df2:	edc0 6a00 	vstr	s13, [r0]
 8007df6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007dfa:	edc0 7a01 	vstr	s15, [r0, #4]
 8007dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e02:	e7e4      	b.n	8007dce <__ieee754_rem_pio2f+0x62>
 8007e04:	4b68      	ldr	r3, [pc, #416]	; (8007fa8 <__ieee754_rem_pio2f+0x23c>)
 8007e06:	429d      	cmp	r5, r3
 8007e08:	dc71      	bgt.n	8007eee <__ieee754_rem_pio2f+0x182>
 8007e0a:	f7ff fe3d 	bl	8007a88 <fabsf>
 8007e0e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007fac <__ieee754_rem_pio2f+0x240>
 8007e12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007e16:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e22:	ee17 0a90 	vmov	r0, s15
 8007e26:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007f94 <__ieee754_rem_pio2f+0x228>
 8007e2a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007e2e:	281f      	cmp	r0, #31
 8007e30:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007fa0 <__ieee754_rem_pio2f+0x234>
 8007e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e38:	eeb1 6a47 	vneg.f32	s12, s14
 8007e3c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007e40:	ee16 2a90 	vmov	r2, s13
 8007e44:	dc1c      	bgt.n	8007e80 <__ieee754_rem_pio2f+0x114>
 8007e46:	495a      	ldr	r1, [pc, #360]	; (8007fb0 <__ieee754_rem_pio2f+0x244>)
 8007e48:	1e47      	subs	r7, r0, #1
 8007e4a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007e4e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007e52:	428b      	cmp	r3, r1
 8007e54:	d014      	beq.n	8007e80 <__ieee754_rem_pio2f+0x114>
 8007e56:	6022      	str	r2, [r4, #0]
 8007e58:	ed94 7a00 	vldr	s14, [r4]
 8007e5c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007e60:	2e00      	cmp	r6, #0
 8007e62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007e66:	ed84 0a01 	vstr	s0, [r4, #4]
 8007e6a:	dab0      	bge.n	8007dce <__ieee754_rem_pio2f+0x62>
 8007e6c:	eeb1 7a47 	vneg.f32	s14, s14
 8007e70:	eeb1 0a40 	vneg.f32	s0, s0
 8007e74:	ed84 7a00 	vstr	s14, [r4]
 8007e78:	ed84 0a01 	vstr	s0, [r4, #4]
 8007e7c:	4240      	negs	r0, r0
 8007e7e:	e7a6      	b.n	8007dce <__ieee754_rem_pio2f+0x62>
 8007e80:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007e84:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8007e88:	2908      	cmp	r1, #8
 8007e8a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007e8e:	dde2      	ble.n	8007e56 <__ieee754_rem_pio2f+0xea>
 8007e90:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007f9c <__ieee754_rem_pio2f+0x230>
 8007e94:	eef0 6a40 	vmov.f32	s13, s0
 8007e98:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007e9c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8007ea0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007ea4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007fa4 <__ieee754_rem_pio2f+0x238>
 8007ea8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007eac:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007eb0:	ee15 2a90 	vmov	r2, s11
 8007eb4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007eb8:	1a5b      	subs	r3, r3, r1
 8007eba:	2b19      	cmp	r3, #25
 8007ebc:	dc04      	bgt.n	8007ec8 <__ieee754_rem_pio2f+0x15c>
 8007ebe:	edc4 5a00 	vstr	s11, [r4]
 8007ec2:	eeb0 0a66 	vmov.f32	s0, s13
 8007ec6:	e7c7      	b.n	8007e58 <__ieee754_rem_pio2f+0xec>
 8007ec8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007fb4 <__ieee754_rem_pio2f+0x248>
 8007ecc:	eeb0 0a66 	vmov.f32	s0, s13
 8007ed0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007ed4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007ed8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007fb8 <__ieee754_rem_pio2f+0x24c>
 8007edc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007ee0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007ee4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007ee8:	ed84 7a00 	vstr	s14, [r4]
 8007eec:	e7b4      	b.n	8007e58 <__ieee754_rem_pio2f+0xec>
 8007eee:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007ef2:	db06      	blt.n	8007f02 <__ieee754_rem_pio2f+0x196>
 8007ef4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007ef8:	edc0 7a01 	vstr	s15, [r0, #4]
 8007efc:	edc0 7a00 	vstr	s15, [r0]
 8007f00:	e742      	b.n	8007d88 <__ieee754_rem_pio2f+0x1c>
 8007f02:	15ea      	asrs	r2, r5, #23
 8007f04:	3a86      	subs	r2, #134	; 0x86
 8007f06:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f12:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007fbc <__ieee754_rem_pio2f+0x250>
 8007f16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007f1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f1e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007f22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007f26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007f2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f32:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007f36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007f3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f42:	edcd 7a05 	vstr	s15, [sp, #20]
 8007f46:	d11e      	bne.n	8007f86 <__ieee754_rem_pio2f+0x21a>
 8007f48:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f50:	bf14      	ite	ne
 8007f52:	2302      	movne	r3, #2
 8007f54:	2301      	moveq	r3, #1
 8007f56:	491a      	ldr	r1, [pc, #104]	; (8007fc0 <__ieee754_rem_pio2f+0x254>)
 8007f58:	9101      	str	r1, [sp, #4]
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	9100      	str	r1, [sp, #0]
 8007f5e:	a803      	add	r0, sp, #12
 8007f60:	4621      	mov	r1, r4
 8007f62:	f000 f82f 	bl	8007fc4 <__kernel_rem_pio2f>
 8007f66:	2e00      	cmp	r6, #0
 8007f68:	f6bf af31 	bge.w	8007dce <__ieee754_rem_pio2f+0x62>
 8007f6c:	edd4 7a00 	vldr	s15, [r4]
 8007f70:	eef1 7a67 	vneg.f32	s15, s15
 8007f74:	edc4 7a00 	vstr	s15, [r4]
 8007f78:	edd4 7a01 	vldr	s15, [r4, #4]
 8007f7c:	eef1 7a67 	vneg.f32	s15, s15
 8007f80:	edc4 7a01 	vstr	s15, [r4, #4]
 8007f84:	e77a      	b.n	8007e7c <__ieee754_rem_pio2f+0x110>
 8007f86:	2303      	movs	r3, #3
 8007f88:	e7e5      	b.n	8007f56 <__ieee754_rem_pio2f+0x1ea>
 8007f8a:	bf00      	nop
 8007f8c:	3f490fd8 	.word	0x3f490fd8
 8007f90:	4016cbe3 	.word	0x4016cbe3
 8007f94:	3fc90f80 	.word	0x3fc90f80
 8007f98:	3fc90fd0 	.word	0x3fc90fd0
 8007f9c:	37354400 	.word	0x37354400
 8007fa0:	37354443 	.word	0x37354443
 8007fa4:	2e85a308 	.word	0x2e85a308
 8007fa8:	43490f80 	.word	0x43490f80
 8007fac:	3f22f984 	.word	0x3f22f984
 8007fb0:	080088dc 	.word	0x080088dc
 8007fb4:	2e85a300 	.word	0x2e85a300
 8007fb8:	248d3132 	.word	0x248d3132
 8007fbc:	43800000 	.word	0x43800000
 8007fc0:	0800895c 	.word	0x0800895c

08007fc4 <__kernel_rem_pio2f>:
 8007fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	ed2d 8b04 	vpush	{d8-d9}
 8007fcc:	b0d9      	sub	sp, #356	; 0x164
 8007fce:	4688      	mov	r8, r1
 8007fd0:	9002      	str	r0, [sp, #8]
 8007fd2:	49b8      	ldr	r1, [pc, #736]	; (80082b4 <__kernel_rem_pio2f+0x2f0>)
 8007fd4:	9866      	ldr	r0, [sp, #408]	; 0x198
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8007fdc:	9901      	ldr	r1, [sp, #4]
 8007fde:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8007fe0:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8007fe4:	1d11      	adds	r1, r2, #4
 8007fe6:	db25      	blt.n	8008034 <__kernel_rem_pio2f+0x70>
 8007fe8:	1ed0      	subs	r0, r2, #3
 8007fea:	bf48      	it	mi
 8007fec:	1d10      	addmi	r0, r2, #4
 8007fee:	10c0      	asrs	r0, r0, #3
 8007ff0:	1c45      	adds	r5, r0, #1
 8007ff2:	00e9      	lsls	r1, r5, #3
 8007ff4:	eba0 070b 	sub.w	r7, r0, fp
 8007ff8:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80082c4 <__kernel_rem_pio2f+0x300>
 8007ffc:	9103      	str	r1, [sp, #12]
 8007ffe:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008002:	eb0a 0c0b 	add.w	ip, sl, fp
 8008006:	ae1c      	add	r6, sp, #112	; 0x70
 8008008:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800800c:	2400      	movs	r4, #0
 800800e:	4564      	cmp	r4, ip
 8008010:	dd12      	ble.n	8008038 <__kernel_rem_pio2f+0x74>
 8008012:	9901      	ldr	r1, [sp, #4]
 8008014:	ac1c      	add	r4, sp, #112	; 0x70
 8008016:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800801a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800801e:	f04f 0c00 	mov.w	ip, #0
 8008022:	45d4      	cmp	ip, sl
 8008024:	dc27      	bgt.n	8008076 <__kernel_rem_pio2f+0xb2>
 8008026:	f8dd e008 	ldr.w	lr, [sp, #8]
 800802a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80082c4 <__kernel_rem_pio2f+0x300>
 800802e:	4627      	mov	r7, r4
 8008030:	2600      	movs	r6, #0
 8008032:	e016      	b.n	8008062 <__kernel_rem_pio2f+0x9e>
 8008034:	2000      	movs	r0, #0
 8008036:	e7db      	b.n	8007ff0 <__kernel_rem_pio2f+0x2c>
 8008038:	42e7      	cmn	r7, r4
 800803a:	bf5d      	ittte	pl
 800803c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8008040:	ee07 1a90 	vmovpl	s15, r1
 8008044:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008048:	eef0 7a47 	vmovmi.f32	s15, s14
 800804c:	ece6 7a01 	vstmia	r6!, {s15}
 8008050:	3401      	adds	r4, #1
 8008052:	e7dc      	b.n	800800e <__kernel_rem_pio2f+0x4a>
 8008054:	ecfe 6a01 	vldmia	lr!, {s13}
 8008058:	ed97 7a00 	vldr	s14, [r7]
 800805c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008060:	3601      	adds	r6, #1
 8008062:	455e      	cmp	r6, fp
 8008064:	f1a7 0704 	sub.w	r7, r7, #4
 8008068:	ddf4      	ble.n	8008054 <__kernel_rem_pio2f+0x90>
 800806a:	ece9 7a01 	vstmia	r9!, {s15}
 800806e:	f10c 0c01 	add.w	ip, ip, #1
 8008072:	3404      	adds	r4, #4
 8008074:	e7d5      	b.n	8008022 <__kernel_rem_pio2f+0x5e>
 8008076:	a908      	add	r1, sp, #32
 8008078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800807c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008080:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80082c0 <__kernel_rem_pio2f+0x2fc>
 8008084:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80082bc <__kernel_rem_pio2f+0x2f8>
 8008088:	9105      	str	r1, [sp, #20]
 800808a:	9304      	str	r3, [sp, #16]
 800808c:	4656      	mov	r6, sl
 800808e:	00b3      	lsls	r3, r6, #2
 8008090:	9306      	str	r3, [sp, #24]
 8008092:	ab58      	add	r3, sp, #352	; 0x160
 8008094:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008098:	ac08      	add	r4, sp, #32
 800809a:	ab44      	add	r3, sp, #272	; 0x110
 800809c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80080a0:	46a4      	mov	ip, r4
 80080a2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80080a6:	4637      	mov	r7, r6
 80080a8:	2f00      	cmp	r7, #0
 80080aa:	f1a0 0004 	sub.w	r0, r0, #4
 80080ae:	dc4a      	bgt.n	8008146 <__kernel_rem_pio2f+0x182>
 80080b0:	4628      	mov	r0, r5
 80080b2:	9207      	str	r2, [sp, #28]
 80080b4:	f000 fa3a 	bl	800852c <scalbnf>
 80080b8:	eeb0 8a40 	vmov.f32	s16, s0
 80080bc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80080c0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80080c4:	f000 f9f0 	bl	80084a8 <floorf>
 80080c8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80080cc:	eea0 8a67 	vfms.f32	s16, s0, s15
 80080d0:	2d00      	cmp	r5, #0
 80080d2:	9a07      	ldr	r2, [sp, #28]
 80080d4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80080d8:	ee17 9a90 	vmov	r9, s15
 80080dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080e0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80080e4:	dd41      	ble.n	800816a <__kernel_rem_pio2f+0x1a6>
 80080e6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80080ea:	ab08      	add	r3, sp, #32
 80080ec:	f1c5 0e08 	rsb	lr, r5, #8
 80080f0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80080f4:	fa47 f00e 	asr.w	r0, r7, lr
 80080f8:	4481      	add	r9, r0
 80080fa:	fa00 f00e 	lsl.w	r0, r0, lr
 80080fe:	1a3f      	subs	r7, r7, r0
 8008100:	f1c5 0007 	rsb	r0, r5, #7
 8008104:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008108:	4107      	asrs	r7, r0
 800810a:	2f00      	cmp	r7, #0
 800810c:	dd3c      	ble.n	8008188 <__kernel_rem_pio2f+0x1c4>
 800810e:	f04f 0e00 	mov.w	lr, #0
 8008112:	f109 0901 	add.w	r9, r9, #1
 8008116:	4671      	mov	r1, lr
 8008118:	4576      	cmp	r6, lr
 800811a:	dc67      	bgt.n	80081ec <__kernel_rem_pio2f+0x228>
 800811c:	2d00      	cmp	r5, #0
 800811e:	dd03      	ble.n	8008128 <__kernel_rem_pio2f+0x164>
 8008120:	2d01      	cmp	r5, #1
 8008122:	d074      	beq.n	800820e <__kernel_rem_pio2f+0x24a>
 8008124:	2d02      	cmp	r5, #2
 8008126:	d07b      	beq.n	8008220 <__kernel_rem_pio2f+0x25c>
 8008128:	2f02      	cmp	r7, #2
 800812a:	d12d      	bne.n	8008188 <__kernel_rem_pio2f+0x1c4>
 800812c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008130:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008134:	b341      	cbz	r1, 8008188 <__kernel_rem_pio2f+0x1c4>
 8008136:	4628      	mov	r0, r5
 8008138:	9207      	str	r2, [sp, #28]
 800813a:	f000 f9f7 	bl	800852c <scalbnf>
 800813e:	9a07      	ldr	r2, [sp, #28]
 8008140:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008144:	e020      	b.n	8008188 <__kernel_rem_pio2f+0x1c4>
 8008146:	ee60 7a28 	vmul.f32	s15, s0, s17
 800814a:	3f01      	subs	r7, #1
 800814c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008154:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008158:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800815c:	ecac 0a01 	vstmia	ip!, {s0}
 8008160:	ed90 0a00 	vldr	s0, [r0]
 8008164:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008168:	e79e      	b.n	80080a8 <__kernel_rem_pio2f+0xe4>
 800816a:	d105      	bne.n	8008178 <__kernel_rem_pio2f+0x1b4>
 800816c:	1e70      	subs	r0, r6, #1
 800816e:	ab08      	add	r3, sp, #32
 8008170:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008174:	11ff      	asrs	r7, r7, #7
 8008176:	e7c8      	b.n	800810a <__kernel_rem_pio2f+0x146>
 8008178:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800817c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008184:	da30      	bge.n	80081e8 <__kernel_rem_pio2f+0x224>
 8008186:	2700      	movs	r7, #0
 8008188:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800818c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008190:	f040 809a 	bne.w	80082c8 <__kernel_rem_pio2f+0x304>
 8008194:	1e74      	subs	r4, r6, #1
 8008196:	46a4      	mov	ip, r4
 8008198:	2100      	movs	r1, #0
 800819a:	45d4      	cmp	ip, sl
 800819c:	da47      	bge.n	800822e <__kernel_rem_pio2f+0x26a>
 800819e:	2900      	cmp	r1, #0
 80081a0:	d063      	beq.n	800826a <__kernel_rem_pio2f+0x2a6>
 80081a2:	ab08      	add	r3, sp, #32
 80081a4:	3d08      	subs	r5, #8
 80081a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d07f      	beq.n	80082ae <__kernel_rem_pio2f+0x2ea>
 80081ae:	4628      	mov	r0, r5
 80081b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80081b4:	f000 f9ba 	bl	800852c <scalbnf>
 80081b8:	1c63      	adds	r3, r4, #1
 80081ba:	aa44      	add	r2, sp, #272	; 0x110
 80081bc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80082c0 <__kernel_rem_pio2f+0x2fc>
 80081c0:	0099      	lsls	r1, r3, #2
 80081c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80081c6:	4623      	mov	r3, r4
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f280 80ad 	bge.w	8008328 <__kernel_rem_pio2f+0x364>
 80081ce:	4623      	mov	r3, r4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f2c0 80cb 	blt.w	800836c <__kernel_rem_pio2f+0x3a8>
 80081d6:	aa44      	add	r2, sp, #272	; 0x110
 80081d8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80081dc:	4e36      	ldr	r6, [pc, #216]	; (80082b8 <__kernel_rem_pio2f+0x2f4>)
 80081de:	eddf 7a39 	vldr	s15, [pc, #228]	; 80082c4 <__kernel_rem_pio2f+0x300>
 80081e2:	2000      	movs	r0, #0
 80081e4:	1ae2      	subs	r2, r4, r3
 80081e6:	e0b6      	b.n	8008356 <__kernel_rem_pio2f+0x392>
 80081e8:	2702      	movs	r7, #2
 80081ea:	e790      	b.n	800810e <__kernel_rem_pio2f+0x14a>
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	b949      	cbnz	r1, 8008204 <__kernel_rem_pio2f+0x240>
 80081f0:	b118      	cbz	r0, 80081fa <__kernel_rem_pio2f+0x236>
 80081f2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80081f6:	6020      	str	r0, [r4, #0]
 80081f8:	2001      	movs	r0, #1
 80081fa:	f10e 0e01 	add.w	lr, lr, #1
 80081fe:	3404      	adds	r4, #4
 8008200:	4601      	mov	r1, r0
 8008202:	e789      	b.n	8008118 <__kernel_rem_pio2f+0x154>
 8008204:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008208:	6020      	str	r0, [r4, #0]
 800820a:	4608      	mov	r0, r1
 800820c:	e7f5      	b.n	80081fa <__kernel_rem_pio2f+0x236>
 800820e:	1e74      	subs	r4, r6, #1
 8008210:	ab08      	add	r3, sp, #32
 8008212:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008216:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800821a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800821e:	e783      	b.n	8008128 <__kernel_rem_pio2f+0x164>
 8008220:	1e74      	subs	r4, r6, #1
 8008222:	ab08      	add	r3, sp, #32
 8008224:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008228:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800822c:	e7f5      	b.n	800821a <__kernel_rem_pio2f+0x256>
 800822e:	ab08      	add	r3, sp, #32
 8008230:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8008234:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008238:	4301      	orrs	r1, r0
 800823a:	e7ae      	b.n	800819a <__kernel_rem_pio2f+0x1d6>
 800823c:	3001      	adds	r0, #1
 800823e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8008242:	2f00      	cmp	r7, #0
 8008244:	d0fa      	beq.n	800823c <__kernel_rem_pio2f+0x278>
 8008246:	9b06      	ldr	r3, [sp, #24]
 8008248:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800824c:	eb0d 0403 	add.w	r4, sp, r3
 8008250:	9b01      	ldr	r3, [sp, #4]
 8008252:	18f7      	adds	r7, r6, r3
 8008254:	ab1c      	add	r3, sp, #112	; 0x70
 8008256:	f106 0c01 	add.w	ip, r6, #1
 800825a:	3c4c      	subs	r4, #76	; 0x4c
 800825c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008260:	4430      	add	r0, r6
 8008262:	4560      	cmp	r0, ip
 8008264:	da04      	bge.n	8008270 <__kernel_rem_pio2f+0x2ac>
 8008266:	4606      	mov	r6, r0
 8008268:	e711      	b.n	800808e <__kernel_rem_pio2f+0xca>
 800826a:	9c05      	ldr	r4, [sp, #20]
 800826c:	2001      	movs	r0, #1
 800826e:	e7e6      	b.n	800823e <__kernel_rem_pio2f+0x27a>
 8008270:	9b04      	ldr	r3, [sp, #16]
 8008272:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008276:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800827a:	9306      	str	r3, [sp, #24]
 800827c:	ee07 3a90 	vmov	s15, r3
 8008280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008284:	2600      	movs	r6, #0
 8008286:	ece7 7a01 	vstmia	r7!, {s15}
 800828a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80082c4 <__kernel_rem_pio2f+0x300>
 800828e:	46b9      	mov	r9, r7
 8008290:	455e      	cmp	r6, fp
 8008292:	dd04      	ble.n	800829e <__kernel_rem_pio2f+0x2da>
 8008294:	ece4 7a01 	vstmia	r4!, {s15}
 8008298:	f10c 0c01 	add.w	ip, ip, #1
 800829c:	e7e1      	b.n	8008262 <__kernel_rem_pio2f+0x29e>
 800829e:	ecfe 6a01 	vldmia	lr!, {s13}
 80082a2:	ed39 7a01 	vldmdb	r9!, {s14}
 80082a6:	3601      	adds	r6, #1
 80082a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80082ac:	e7f0      	b.n	8008290 <__kernel_rem_pio2f+0x2cc>
 80082ae:	3c01      	subs	r4, #1
 80082b0:	e777      	b.n	80081a2 <__kernel_rem_pio2f+0x1de>
 80082b2:	bf00      	nop
 80082b4:	08008dcc 	.word	0x08008dcc
 80082b8:	08008da0 	.word	0x08008da0
 80082bc:	43800000 	.word	0x43800000
 80082c0:	3b800000 	.word	0x3b800000
 80082c4:	00000000 	.word	0x00000000
 80082c8:	9b03      	ldr	r3, [sp, #12]
 80082ca:	eeb0 0a48 	vmov.f32	s0, s16
 80082ce:	1a98      	subs	r0, r3, r2
 80082d0:	f000 f92c 	bl	800852c <scalbnf>
 80082d4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80082bc <__kernel_rem_pio2f+0x2f8>
 80082d8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80082dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e0:	db19      	blt.n	8008316 <__kernel_rem_pio2f+0x352>
 80082e2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80082c0 <__kernel_rem_pio2f+0x2fc>
 80082e6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80082ea:	aa08      	add	r2, sp, #32
 80082ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082f0:	1c74      	adds	r4, r6, #1
 80082f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082f6:	3508      	adds	r5, #8
 80082f8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80082fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008300:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008304:	ee10 3a10 	vmov	r3, s0
 8008308:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800830c:	ee17 3a90 	vmov	r3, s15
 8008310:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008314:	e74b      	b.n	80081ae <__kernel_rem_pio2f+0x1ea>
 8008316:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800831a:	aa08      	add	r2, sp, #32
 800831c:	ee10 3a10 	vmov	r3, s0
 8008320:	4634      	mov	r4, r6
 8008322:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008326:	e742      	b.n	80081ae <__kernel_rem_pio2f+0x1ea>
 8008328:	a808      	add	r0, sp, #32
 800832a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800832e:	9001      	str	r0, [sp, #4]
 8008330:	ee07 0a90 	vmov	s15, r0
 8008334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008338:	3b01      	subs	r3, #1
 800833a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800833e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008342:	ed62 7a01 	vstmdb	r2!, {s15}
 8008346:	e73f      	b.n	80081c8 <__kernel_rem_pio2f+0x204>
 8008348:	ecf6 6a01 	vldmia	r6!, {s13}
 800834c:	ecb5 7a01 	vldmia	r5!, {s14}
 8008350:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008354:	3001      	adds	r0, #1
 8008356:	4550      	cmp	r0, sl
 8008358:	dc01      	bgt.n	800835e <__kernel_rem_pio2f+0x39a>
 800835a:	4290      	cmp	r0, r2
 800835c:	ddf4      	ble.n	8008348 <__kernel_rem_pio2f+0x384>
 800835e:	a858      	add	r0, sp, #352	; 0x160
 8008360:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008364:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8008368:	3b01      	subs	r3, #1
 800836a:	e731      	b.n	80081d0 <__kernel_rem_pio2f+0x20c>
 800836c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800836e:	2b02      	cmp	r3, #2
 8008370:	dc09      	bgt.n	8008386 <__kernel_rem_pio2f+0x3c2>
 8008372:	2b00      	cmp	r3, #0
 8008374:	dc2b      	bgt.n	80083ce <__kernel_rem_pio2f+0x40a>
 8008376:	d044      	beq.n	8008402 <__kernel_rem_pio2f+0x43e>
 8008378:	f009 0007 	and.w	r0, r9, #7
 800837c:	b059      	add	sp, #356	; 0x164
 800837e:	ecbd 8b04 	vpop	{d8-d9}
 8008382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008386:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008388:	2b03      	cmp	r3, #3
 800838a:	d1f5      	bne.n	8008378 <__kernel_rem_pio2f+0x3b4>
 800838c:	aa30      	add	r2, sp, #192	; 0xc0
 800838e:	1f0b      	subs	r3, r1, #4
 8008390:	4413      	add	r3, r2
 8008392:	461a      	mov	r2, r3
 8008394:	4620      	mov	r0, r4
 8008396:	2800      	cmp	r0, #0
 8008398:	f1a2 0204 	sub.w	r2, r2, #4
 800839c:	dc52      	bgt.n	8008444 <__kernel_rem_pio2f+0x480>
 800839e:	4622      	mov	r2, r4
 80083a0:	2a01      	cmp	r2, #1
 80083a2:	f1a3 0304 	sub.w	r3, r3, #4
 80083a6:	dc5d      	bgt.n	8008464 <__kernel_rem_pio2f+0x4a0>
 80083a8:	ab30      	add	r3, sp, #192	; 0xc0
 80083aa:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80082c4 <__kernel_rem_pio2f+0x300>
 80083ae:	440b      	add	r3, r1
 80083b0:	2c01      	cmp	r4, #1
 80083b2:	dc67      	bgt.n	8008484 <__kernel_rem_pio2f+0x4c0>
 80083b4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80083b8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80083bc:	2f00      	cmp	r7, #0
 80083be:	d167      	bne.n	8008490 <__kernel_rem_pio2f+0x4cc>
 80083c0:	edc8 6a00 	vstr	s13, [r8]
 80083c4:	ed88 7a01 	vstr	s14, [r8, #4]
 80083c8:	edc8 7a02 	vstr	s15, [r8, #8]
 80083cc:	e7d4      	b.n	8008378 <__kernel_rem_pio2f+0x3b4>
 80083ce:	ab30      	add	r3, sp, #192	; 0xc0
 80083d0:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80082c4 <__kernel_rem_pio2f+0x300>
 80083d4:	440b      	add	r3, r1
 80083d6:	4622      	mov	r2, r4
 80083d8:	2a00      	cmp	r2, #0
 80083da:	da24      	bge.n	8008426 <__kernel_rem_pio2f+0x462>
 80083dc:	b34f      	cbz	r7, 8008432 <__kernel_rem_pio2f+0x46e>
 80083de:	eef1 7a47 	vneg.f32	s15, s14
 80083e2:	edc8 7a00 	vstr	s15, [r8]
 80083e6:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80083ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083ee:	aa31      	add	r2, sp, #196	; 0xc4
 80083f0:	2301      	movs	r3, #1
 80083f2:	429c      	cmp	r4, r3
 80083f4:	da20      	bge.n	8008438 <__kernel_rem_pio2f+0x474>
 80083f6:	b10f      	cbz	r7, 80083fc <__kernel_rem_pio2f+0x438>
 80083f8:	eef1 7a67 	vneg.f32	s15, s15
 80083fc:	edc8 7a01 	vstr	s15, [r8, #4]
 8008400:	e7ba      	b.n	8008378 <__kernel_rem_pio2f+0x3b4>
 8008402:	ab30      	add	r3, sp, #192	; 0xc0
 8008404:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80082c4 <__kernel_rem_pio2f+0x300>
 8008408:	440b      	add	r3, r1
 800840a:	2c00      	cmp	r4, #0
 800840c:	da05      	bge.n	800841a <__kernel_rem_pio2f+0x456>
 800840e:	b10f      	cbz	r7, 8008414 <__kernel_rem_pio2f+0x450>
 8008410:	eef1 7a67 	vneg.f32	s15, s15
 8008414:	edc8 7a00 	vstr	s15, [r8]
 8008418:	e7ae      	b.n	8008378 <__kernel_rem_pio2f+0x3b4>
 800841a:	ed33 7a01 	vldmdb	r3!, {s14}
 800841e:	3c01      	subs	r4, #1
 8008420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008424:	e7f1      	b.n	800840a <__kernel_rem_pio2f+0x446>
 8008426:	ed73 7a01 	vldmdb	r3!, {s15}
 800842a:	3a01      	subs	r2, #1
 800842c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008430:	e7d2      	b.n	80083d8 <__kernel_rem_pio2f+0x414>
 8008432:	eef0 7a47 	vmov.f32	s15, s14
 8008436:	e7d4      	b.n	80083e2 <__kernel_rem_pio2f+0x41e>
 8008438:	ecb2 7a01 	vldmia	r2!, {s14}
 800843c:	3301      	adds	r3, #1
 800843e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008442:	e7d6      	b.n	80083f2 <__kernel_rem_pio2f+0x42e>
 8008444:	edd2 7a00 	vldr	s15, [r2]
 8008448:	edd2 6a01 	vldr	s13, [r2, #4]
 800844c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008450:	3801      	subs	r0, #1
 8008452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008456:	ed82 7a00 	vstr	s14, [r2]
 800845a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800845e:	edc2 7a01 	vstr	s15, [r2, #4]
 8008462:	e798      	b.n	8008396 <__kernel_rem_pio2f+0x3d2>
 8008464:	edd3 7a00 	vldr	s15, [r3]
 8008468:	edd3 6a01 	vldr	s13, [r3, #4]
 800846c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008470:	3a01      	subs	r2, #1
 8008472:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008476:	ed83 7a00 	vstr	s14, [r3]
 800847a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847e:	edc3 7a01 	vstr	s15, [r3, #4]
 8008482:	e78d      	b.n	80083a0 <__kernel_rem_pio2f+0x3dc>
 8008484:	ed33 7a01 	vldmdb	r3!, {s14}
 8008488:	3c01      	subs	r4, #1
 800848a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800848e:	e78f      	b.n	80083b0 <__kernel_rem_pio2f+0x3ec>
 8008490:	eef1 6a66 	vneg.f32	s13, s13
 8008494:	eeb1 7a47 	vneg.f32	s14, s14
 8008498:	edc8 6a00 	vstr	s13, [r8]
 800849c:	ed88 7a01 	vstr	s14, [r8, #4]
 80084a0:	eef1 7a67 	vneg.f32	s15, s15
 80084a4:	e790      	b.n	80083c8 <__kernel_rem_pio2f+0x404>
 80084a6:	bf00      	nop

080084a8 <floorf>:
 80084a8:	ee10 3a10 	vmov	r3, s0
 80084ac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80084b0:	3a7f      	subs	r2, #127	; 0x7f
 80084b2:	2a16      	cmp	r2, #22
 80084b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084b8:	dc2a      	bgt.n	8008510 <floorf+0x68>
 80084ba:	2a00      	cmp	r2, #0
 80084bc:	da11      	bge.n	80084e2 <floorf+0x3a>
 80084be:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008520 <floorf+0x78>
 80084c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80084c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80084ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ce:	dd05      	ble.n	80084dc <floorf+0x34>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	da23      	bge.n	800851c <floorf+0x74>
 80084d4:	4a13      	ldr	r2, [pc, #76]	; (8008524 <floorf+0x7c>)
 80084d6:	2900      	cmp	r1, #0
 80084d8:	bf18      	it	ne
 80084da:	4613      	movne	r3, r2
 80084dc:	ee00 3a10 	vmov	s0, r3
 80084e0:	4770      	bx	lr
 80084e2:	4911      	ldr	r1, [pc, #68]	; (8008528 <floorf+0x80>)
 80084e4:	4111      	asrs	r1, r2
 80084e6:	420b      	tst	r3, r1
 80084e8:	d0fa      	beq.n	80084e0 <floorf+0x38>
 80084ea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008520 <floorf+0x78>
 80084ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80084f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80084f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fa:	ddef      	ble.n	80084dc <floorf+0x34>
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bfbe      	ittt	lt
 8008500:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008504:	fa40 f202 	asrlt.w	r2, r0, r2
 8008508:	189b      	addlt	r3, r3, r2
 800850a:	ea23 0301 	bic.w	r3, r3, r1
 800850e:	e7e5      	b.n	80084dc <floorf+0x34>
 8008510:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008514:	d3e4      	bcc.n	80084e0 <floorf+0x38>
 8008516:	ee30 0a00 	vadd.f32	s0, s0, s0
 800851a:	4770      	bx	lr
 800851c:	2300      	movs	r3, #0
 800851e:	e7dd      	b.n	80084dc <floorf+0x34>
 8008520:	7149f2ca 	.word	0x7149f2ca
 8008524:	bf800000 	.word	0xbf800000
 8008528:	007fffff 	.word	0x007fffff

0800852c <scalbnf>:
 800852c:	ee10 3a10 	vmov	r3, s0
 8008530:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008534:	d02a      	beq.n	800858c <scalbnf+0x60>
 8008536:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800853a:	d302      	bcc.n	8008542 <scalbnf+0x16>
 800853c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008540:	4770      	bx	lr
 8008542:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008546:	d122      	bne.n	800858e <scalbnf+0x62>
 8008548:	4b23      	ldr	r3, [pc, #140]	; (80085d8 <scalbnf+0xac>)
 800854a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80085dc <scalbnf+0xb0>
 800854e:	4298      	cmp	r0, r3
 8008550:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008554:	db16      	blt.n	8008584 <scalbnf+0x58>
 8008556:	ee10 3a10 	vmov	r3, s0
 800855a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800855e:	3a19      	subs	r2, #25
 8008560:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008564:	4288      	cmp	r0, r1
 8008566:	dd14      	ble.n	8008592 <scalbnf+0x66>
 8008568:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80085e0 <scalbnf+0xb4>
 800856c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80085e4 <scalbnf+0xb8>
 8008570:	ee10 3a10 	vmov	r3, s0
 8008574:	eeb0 7a67 	vmov.f32	s14, s15
 8008578:	2b00      	cmp	r3, #0
 800857a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800857e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008582:	4770      	bx	lr
 8008584:	eddf 7a18 	vldr	s15, [pc, #96]	; 80085e8 <scalbnf+0xbc>
 8008588:	ee27 0a80 	vmul.f32	s0, s15, s0
 800858c:	4770      	bx	lr
 800858e:	0dd2      	lsrs	r2, r2, #23
 8008590:	e7e6      	b.n	8008560 <scalbnf+0x34>
 8008592:	4410      	add	r0, r2
 8008594:	28fe      	cmp	r0, #254	; 0xfe
 8008596:	dce7      	bgt.n	8008568 <scalbnf+0x3c>
 8008598:	2800      	cmp	r0, #0
 800859a:	dd06      	ble.n	80085aa <scalbnf+0x7e>
 800859c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80085a0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80085a4:	ee00 3a10 	vmov	s0, r3
 80085a8:	4770      	bx	lr
 80085aa:	f110 0f16 	cmn.w	r0, #22
 80085ae:	da09      	bge.n	80085c4 <scalbnf+0x98>
 80085b0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80085e8 <scalbnf+0xbc>
 80085b4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80085ec <scalbnf+0xc0>
 80085b8:	ee10 3a10 	vmov	r3, s0
 80085bc:	eeb0 7a67 	vmov.f32	s14, s15
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	e7da      	b.n	800857a <scalbnf+0x4e>
 80085c4:	3019      	adds	r0, #25
 80085c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80085ca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80085ce:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80085f0 <scalbnf+0xc4>
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	e7d7      	b.n	8008588 <scalbnf+0x5c>
 80085d8:	ffff3cb0 	.word	0xffff3cb0
 80085dc:	4c000000 	.word	0x4c000000
 80085e0:	7149f2ca 	.word	0x7149f2ca
 80085e4:	f149f2ca 	.word	0xf149f2ca
 80085e8:	0da24260 	.word	0x0da24260
 80085ec:	8da24260 	.word	0x8da24260
 80085f0:	33000000 	.word	0x33000000

080085f4 <_init>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr

08008600 <_fini>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr
