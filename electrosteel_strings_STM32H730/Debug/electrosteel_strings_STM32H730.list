
electrosteel_strings_STM32H730.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008380  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  08008650  08008650  00018650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008dcc  08008dcc  00018dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008dd0  08008dd0  00018dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08008dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000790  24000078  08008e4c  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24000808  08008e4c  00020808  2**0
                  ALLOC
  8 .RAM_D1       0004baf0  24000e20  08008e4c  00020e20  2**5
                  ALLOC
  9 .RAM_D2       000001e0  30000000  30000000  00030000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002a0bd  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000444a  00000000  00000000  0004a163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0001e66a  00000000  00000000  0004e5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0006cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004648  00000000  00000000  0006e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003692d  00000000  00000000  000728c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ba9  00000000  00000000  000a91f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015b89f  00000000  00000000  000d0d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022c63d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb4  00000000  00000000  0022c690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008638 	.word	0x08008638

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	08008638 	.word	0x08008638

08000310 <randomNumber>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
float randomNumber(void) {
 8000310:	b500      	push	{lr}
 8000312:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000314:	4807      	ldr	r0, [pc, #28]	; (8000334 <randomNumber+0x24>)
 8000316:	a901      	add	r1, sp, #4
 8000318:	f006 f824 	bl	8006364 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800031c:	eddd 7a01 	vldr	s15, [sp, #4]
 8000320:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000338 <randomNumber+0x28>
 8000324:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8000328:	ee27 0a80 	vmul.f32	s0, s15, s0
 800032c:	b003      	add	sp, #12
 800032e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000332:	bf00      	nop
 8000334:	24000378 	.word	0x24000378
 8000338:	2f80000d 	.word	0x2f80000d

0800033c <SystemClock_Config>:
{
 800033c:	b510      	push	{r4, lr}
 800033e:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000340:	224c      	movs	r2, #76	; 0x4c
 8000342:	2100      	movs	r1, #0
 8000344:	a80a      	add	r0, sp, #40	; 0x28
 8000346:	f007 f945 	bl	80075d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034a:	2220      	movs	r2, #32
 800034c:	2100      	movs	r1, #0
 800034e:	a802      	add	r0, sp, #8
 8000350:	f007 f940 	bl	80075d4 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000354:	2002      	movs	r0, #2
 8000356:	f003 ff2d 	bl	80041b4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800035a:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <SystemClock_Config+0xa8>)
 800035c:	2300      	movs	r3, #0
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	6993      	ldr	r3, [r2, #24]
 8000362:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	6993      	ldr	r3, [r2, #24]
 800036a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000372:	6993      	ldr	r3, [r2, #24]
 8000374:	049b      	lsls	r3, r3, #18
 8000376:	d5fc      	bpl.n	8000372 <SystemClock_Config+0x36>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800037a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800037c:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800037e:	2021      	movs	r0, #33	; 0x21
 8000380:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000384:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000386:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 420;
 8000388:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800038a:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800038c:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 420;
 8000390:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000394:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039a:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800039e:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLN = 420;
 80003a2:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f003 ffad 	bl	8004304 <HAL_RCC_OscConfig>
 80003aa:	b108      	cbz	r0, 80003b0 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ae:	e7fe      	b.n	80003ae <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	223f      	movs	r2, #63	; 0x3f
 80003b2:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b4:	4621      	mov	r1, r4
 80003b6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80003bc:	2200      	movs	r2, #0
 80003be:	2308      	movs	r3, #8
 80003c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80003c4:	2240      	movs	r2, #64	; 0x40
 80003c6:	2340      	movs	r3, #64	; 0x40
 80003c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80003cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003d0:	2340      	movs	r3, #64	; 0x40
 80003d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d6:	f004 fadf 	bl	8004998 <HAL_RCC_ClockConfig>
 80003da:	b108      	cbz	r0, 80003e0 <SystemClock_Config+0xa4>
 80003dc:	b672      	cpsid	i
  while (1)
 80003de:	e7fe      	b.n	80003de <SystemClock_Config+0xa2>
}
 80003e0:	b01e      	add	sp, #120	; 0x78
 80003e2:	bd10      	pop	{r4, pc}
 80003e4:	58024800 	.word	0x58024800

080003e8 <MPU_Conf>:
{
 80003e8:	b500      	push	{lr}
 80003ea:	b085      	sub	sp, #20
	  HAL_MPU_Disable();
 80003ec:	f002 f9b8 	bl	8002760 <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80003f0:	2301      	movs	r3, #1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 80003f2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <MPU_Conf+0x2c>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80003f8:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80003fa:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80003fe:	9303      	str	r3, [sp, #12]
 8000400:	e9cd 1201 	strd	r1, r2, [sp, #4]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000404:	f002 f9ca 	bl	800279c <HAL_MPU_ConfigRegion>
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000408:	2004      	movs	r0, #4
 800040a:	f002 f9b7 	bl	800277c <HAL_MPU_Enable>
}
 800040e:	b005      	add	sp, #20
 8000410:	f85d fb04 	ldr.w	pc, [sp], #4
 8000414:	0301000e 	.word	0x0301000e

08000418 <main>:
{
 8000418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800041c:	ed2d 8b06 	vpush	{d8-d10}
 8000420:	b094      	sub	sp, #80	; 0x50
	MPU_Conf();
 8000422:	f7ff ffe1 	bl	80003e8 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000426:	4ac6      	ldr	r2, [pc, #792]	; (8000740 <main+0x328>)
 8000428:	6953      	ldr	r3, [r2, #20]
 800042a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800042e:	d111      	bne.n	8000454 <main+0x3c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000434:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000438:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800043c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000440:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000444:	6953      	ldr	r3, [r2, #20]
 8000446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800044a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800044c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000450:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000454:	48ba      	ldr	r0, [pc, #744]	; (8000740 <main+0x328>)
 8000456:	6943      	ldr	r3, [r0, #20]
 8000458:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800045c:	d124      	bne.n	80004a8 <main+0x90>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800045e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000462:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000466:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800046a:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800046e:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000472:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000476:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000478:	ea04 010c 	and.w	r1, r4, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800047c:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800047e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000482:	3b01      	subs	r3, #1
 8000484:	1c5e      	adds	r6, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000486:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800048a:	d1f8      	bne.n	800047e <main+0x66>
    } while(sets-- != 0U);
 800048c:	3c20      	subs	r4, #32
 800048e:	f114 0f20 	cmn.w	r4, #32
 8000492:	d1f1      	bne.n	8000478 <main+0x60>
 8000494:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000498:	6943      	ldr	r3, [r0, #20]
 800049a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800049e:	6143      	str	r3, [r0, #20]
 80004a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004a4:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004a8:	4da6      	ldr	r5, [pc, #664]	; (8000744 <main+0x32c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	2400      	movs	r4, #0
  HAL_Init();
 80004ac:	f001 f836 	bl	800151c <HAL_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004b0:	2600      	movs	r6, #0
  SystemClock_Config();
 80004b2:	f7ff ff43 	bl	800033c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80004b8:	4622      	mov	r2, r4
 80004ba:	f248 0101 	movw	r1, #32769	; 0x8001
 80004be:	48a2      	ldr	r0, [pc, #648]	; (8000748 <main+0x330>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004c0:	2700      	movs	r7, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80004c6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80004d6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80004ee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	9302      	str	r3, [sp, #8]
 80004f8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000506:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800050a:	f003 0304 	and.w	r3, r3, #4
 800050e:	9303      	str	r3, [sp, #12]
 8000510:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800051e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	9304      	str	r3, [sp, #16]
 8000528:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800052a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800052e:	f043 0308 	orr.w	r3, r3, #8
 8000532:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000536:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800053a:	f003 0308 	and.w	r3, r3, #8
 800053e:	9305      	str	r3, [sp, #20]
 8000540:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000542:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800054a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800054e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000556:	9306      	str	r3, [sp, #24]
 8000558:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 800055a:	f003 fe27 	bl	80041ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800055e:	4622      	mov	r2, r4
 8000560:	2110      	movs	r1, #16
 8000562:	487a      	ldr	r0, [pc, #488]	; (800074c <main+0x334>)
 8000564:	f003 fe22 	bl	80041ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 8000568:	f248 0201 	movw	r2, #32769	; 0x8001
 800056c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800056e:	a90a      	add	r1, sp, #40	; 0x28
 8000570:	4875      	ldr	r0, [pc, #468]	; (8000748 <main+0x330>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 8000572:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000576:	2200      	movs	r2, #0
 8000578:	2303      	movs	r3, #3
 800057a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800057e:	f003 fcd9 	bl	8003f34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000582:	2210      	movs	r2, #16
 8000584:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000586:	a90a      	add	r1, sp, #40	; 0x28
 8000588:	4870      	ldr	r0, [pc, #448]	; (800074c <main+0x334>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800058a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800058e:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000592:	f003 fccf 	bl	8003f34 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000596:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800059a:	4622      	mov	r2, r4
 800059c:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	f043 0301 	orr.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005a2:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a4:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 80005a8:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80005ac:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005b8:	f002 f870 	bl	800269c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005bc:	200b      	movs	r0, #11
 80005be:	f002 f8ab 	bl	8002718 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 80005c2:	4622      	mov	r2, r4
 80005c4:	2101      	movs	r1, #1
 80005c6:	200c      	movs	r0, #12
 80005c8:	f002 f868 	bl	800269c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005cc:	200c      	movs	r0, #12
 80005ce:	f002 f8a3 	bl	8002718 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80005d2:	4621      	mov	r1, r4
 80005d4:	4622      	mov	r2, r4
 80005d6:	200d      	movs	r0, #13
 80005d8:	f002 f860 	bl	800269c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80005dc:	200d      	movs	r0, #13
 80005de:	f002 f89b 	bl	8002718 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80005e2:	485b      	ldr	r0, [pc, #364]	; (8000750 <main+0x338>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e8:	495a      	ldr	r1, [pc, #360]	; (8000754 <main+0x33c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ea:	6084      	str	r4, [r0, #8]
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80005ec:	6584      	str	r4, [r0, #88]	; 0x58
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ee:	e9c0 1300 	strd	r1, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80005f2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005fa:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 80005fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000602:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000606:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800060a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800060e:	e9c0 4414 	strd	r4, r4, [r0, #80]	; 0x50
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000612:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000616:	2407      	movs	r4, #7
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800061c:	60c4      	str	r4, [r0, #12]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800061e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000620:	f005 ff50 	bl	80064c4 <HAL_SPI_Init>
 8000624:	b108      	cbz	r0, 800062a <main+0x212>
  __ASM volatile ("cpsid i" : : : "memory");
 8000626:	b672      	cpsid	i
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0x210>
  hspi3.Instance = SPI3;
 800062a:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <main+0x340>)
 800062c:	4a4b      	ldr	r2, [pc, #300]	; (800075c <main+0x344>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800062e:	e9c3 0001 	strd	r0, r0, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000632:	e9c3 4003 	strd	r4, r0, [r3, #12]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000636:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800063a:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800063e:	e9c3 000f 	strd	r0, r0, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000642:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000646:	e9c3 0013 	strd	r0, r0, [r3, #76]	; 0x4c
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800064a:	e9c3 0015 	strd	r0, r0, [r3, #84]	; 0x54
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800064e:	e9c3 6708 	strd	r6, r7, [r3, #32]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000652:	4618      	mov	r0, r3
  hspi3.Instance = SPI3;
 8000654:	601a      	str	r2, [r3, #0]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000656:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800065a:	f005 ff33 	bl	80064c4 <HAL_SPI_Init>
 800065e:	b108      	cbz	r0, 8000664 <main+0x24c>
 8000660:	b672      	cpsid	i
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0x24a>
  hspi2.Instance = SPI2;
 8000664:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <main+0x348>)
 8000666:	4a3f      	ldr	r2, [pc, #252]	; (8000764 <main+0x34c>)
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000668:	6198      	str	r0, [r3, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800066a:	60dc      	str	r4, [r3, #12]
  hspi2.Instance = SPI2;
 800066c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800066e:	e9c3 0001 	strd	r0, r0, [r3, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000672:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000676:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800067a:	e9c3 000f 	strd	r0, r0, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800067e:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000682:	e9c3 0013 	strd	r0, r0, [r3, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000686:	e9c3 0015 	strd	r0, r0, [r3, #84]	; 0x54
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800068a:	e9c3 6708 	strd	r6, r7, [r3, #32]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800068e:	4618      	mov	r0, r3
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000690:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000694:	f005 ff16 	bl	80064c4 <HAL_SPI_Init>
 8000698:	4605      	mov	r5, r0
 800069a:	bb88      	cbnz	r0, 8000700 <main+0x2e8>
  ADC_ChannelConfTypeDef sConfig = {0};
 800069c:	4601      	mov	r1, r0
 800069e:	2224      	movs	r2, #36	; 0x24
  ADC_MultiModeTypeDef multimode = {0};
 80006a0:	9009      	str	r0, [sp, #36]	; 0x24
  hadc1.Instance = ADC1;
 80006a2:	4c31      	ldr	r4, [pc, #196]	; (8000768 <main+0x350>)
  ADC_MultiModeTypeDef multimode = {0};
 80006a4:	e9cd 0007 	strd	r0, r0, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006a8:	a80a      	add	r0, sp, #40	; 0x28
 80006aa:	f006 ff93 	bl	80075d4 <memset>
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006ae:	2303      	movs	r3, #3
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80006b0:	f240 4201 	movw	r2, #1025	; 0x401
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b4:	4620      	mov	r0, r4
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006b6:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80006bc:	6562      	str	r2, [r4, #84]	; 0x54
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006be:	2202      	movs	r2, #2
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006c0:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80006c2:	2301      	movs	r3, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c4:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.OversamplingMode = ENABLE;
 80006c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006cc:	2320      	movs	r3, #32
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ce:	6425      	str	r5, [r4, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80006d0:	6525      	str	r5, [r4, #80]	; 0x50
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  hadc1.Instance = ADC1;
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <main+0x354>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006d8:	2201      	movs	r2, #1
  hadc1.Instance = ADC1;
 80006da:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006dc:	2308      	movs	r3, #8
 80006de:	e9c4 2304 	strd	r2, r3, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e6:	8323      	strh	r3, [r4, #24]
  hadc1.Init.NbrOfConversion = 12;
 80006e8:	230c      	movs	r3, #12
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ea:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 12;
 80006ee:	61e3      	str	r3, [r4, #28]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f4:	f001 fddc 	bl	80022b0 <HAL_ADC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b118      	cbz	r0, 8000704 <main+0x2ec>
 80006fc:	b672      	cpsid	i
  while (1)
 80006fe:	e7fe      	b.n	80006fe <main+0x2e6>
 8000700:	b672      	cpsid	i
 8000702:	e7fe      	b.n	8000702 <main+0x2ea>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000704:	a907      	add	r1, sp, #28
 8000706:	4620      	mov	r0, r4
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000708:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800070a:	f001 ff2f 	bl	800256c <HAL_ADCEx_MultiModeConfigChannel>
 800070e:	b108      	cbz	r0, 8000714 <main+0x2fc>
 8000710:	b672      	cpsid	i
  while (1)
 8000712:	e7fe      	b.n	8000712 <main+0x2fa>
  sConfig.Channel = ADC_CHANNEL_16;
 8000714:	4a16      	ldr	r2, [pc, #88]	; (8000770 <main+0x358>)
 8000716:	2306      	movs	r3, #6
  sConfig.OffsetSignedSaturation = DISABLE;
 8000718:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071c:	a90a      	add	r1, sp, #40	; 0x28
 800071e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_16;
 8000720:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000724:	2204      	movs	r2, #4
 8000726:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800072a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800072e:	2204      	movs	r2, #4
 8000730:	2300      	movs	r3, #0
 8000732:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	f001 f8d9 	bl	80018ec <HAL_ADC_ConfigChannel>
 800073a:	b1d8      	cbz	r0, 8000774 <main+0x35c>
 800073c:	b672      	cpsid	i
  while (1)
 800073e:	e7fe      	b.n	800073e <main+0x326>
 8000740:	e000ed00 	.word	0xe000ed00
 8000744:	58024400 	.word	0x58024400
 8000748:	58020c00 	.word	0x58020c00
 800074c:	58020400 	.word	0x58020400
 8000750:	2400038c 	.word	0x2400038c
 8000754:	40013000 	.word	0x40013000
 8000758:	240004a0 	.word	0x240004a0
 800075c:	40003c00 	.word	0x40003c00
 8000760:	24000418 	.word	0x24000418
 8000764:	40003800 	.word	0x40003800
 8000768:	240001a0 	.word	0x240001a0
 800076c:	40022000 	.word	0x40022000
 8000770:	43210000 	.word	0x43210000
  sConfig.Channel = ADC_CHANNEL_17;
 8000774:	4a96      	ldr	r2, [pc, #600]	; (80009d0 <main+0x5b8>)
 8000776:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	a90a      	add	r1, sp, #40	; 0x28
 800077a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_17;
 800077c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	f001 f8b4 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000784:	b108      	cbz	r0, 800078a <main+0x372>
 8000786:	b672      	cpsid	i
  while (1)
 8000788:	e7fe      	b.n	8000788 <main+0x370>
  sConfig.Channel = ADC_CHANNEL_14;
 800078a:	4a92      	ldr	r2, [pc, #584]	; (80009d4 <main+0x5bc>)
 800078c:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	a90a      	add	r1, sp, #40	; 0x28
 8000790:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 8000792:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000796:	f001 f8a9 	bl	80018ec <HAL_ADC_ConfigChannel>
 800079a:	b108      	cbz	r0, 80007a0 <main+0x388>
 800079c:	b672      	cpsid	i
  while (1)
 800079e:	e7fe      	b.n	800079e <main+0x386>
  sConfig.Channel = ADC_CHANNEL_15;
 80007a0:	488d      	ldr	r0, [pc, #564]	; (80009d8 <main+0x5c0>)
 80007a2:	2118      	movs	r1, #24
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80007a4:	2305      	movs	r3, #5
  sConfig.Channel = ADC_CHANNEL_15;
 80007a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007aa:	a90a      	add	r1, sp, #40	; 0x28
 80007ac:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80007ae:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	f001 f89c 	bl	80018ec <HAL_ADC_ConfigChannel>
 80007b4:	b108      	cbz	r0, 80007ba <main+0x3a2>
 80007b6:	b672      	cpsid	i
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <main+0x3a0>
  sConfig.Channel = ADC_CHANNEL_18;
 80007ba:	4e88      	ldr	r6, [pc, #544]	; (80009dc <main+0x5c4>)
 80007bc:	f44f 7780 	mov.w	r7, #256	; 0x100
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80007c0:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c2:	4620      	mov	r0, r4
 80007c4:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80007c6:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Channel = ADC_CHANNEL_18;
 80007c8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007cc:	f001 f88e 	bl	80018ec <HAL_ADC_ConfigChannel>
 80007d0:	b108      	cbz	r0, 80007d6 <main+0x3be>
 80007d2:	b672      	cpsid	i
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <main+0x3bc>
  sConfig.Channel = ADC_CHANNEL_19;
 80007d6:	4a82      	ldr	r2, [pc, #520]	; (80009e0 <main+0x5c8>)
 80007d8:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007dc:	a90a      	add	r1, sp, #40	; 0x28
 80007de:	4881      	ldr	r0, [pc, #516]	; (80009e4 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_19;
 80007e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	f001 f882 	bl	80018ec <HAL_ADC_ConfigChannel>
 80007e8:	b108      	cbz	r0, 80007ee <main+0x3d6>
 80007ea:	b672      	cpsid	i
  while (1)
 80007ec:	e7fe      	b.n	80007ec <main+0x3d4>
  sConfig.Channel = ADC_CHANNEL_3;
 80007ee:	4a7e      	ldr	r2, [pc, #504]	; (80009e8 <main+0x5d0>)
 80007f0:	f44f 7386 	mov.w	r3, #268	; 0x10c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f4:	a90a      	add	r1, sp, #40	; 0x28
 80007f6:	487b      	ldr	r0, [pc, #492]	; (80009e4 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_3;
 80007f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	f001 f876 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000800:	b108      	cbz	r0, 8000806 <main+0x3ee>
 8000802:	b672      	cpsid	i
  while (1)
 8000804:	e7fe      	b.n	8000804 <main+0x3ec>
  sConfig.Channel = ADC_CHANNEL_7;
 8000806:	a36c      	add	r3, pc, #432	; (adr r3, 80009b8 <main+0x5a0>)
 8000808:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080c:	a90a      	add	r1, sp, #40	; 0x28
 800080e:	4875      	ldr	r0, [pc, #468]	; (80009e4 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_7;
 8000810:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	f001 f86a 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000818:	b108      	cbz	r0, 800081e <main+0x406>
 800081a:	b672      	cpsid	i
  while (1)
 800081c:	e7fe      	b.n	800081c <main+0x404>
  sConfig.Channel = ADC_CHANNEL_4;
 800081e:	4a73      	ldr	r2, [pc, #460]	; (80009ec <main+0x5d4>)
 8000820:	f44f 738c 	mov.w	r3, #280	; 0x118
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000824:	a90a      	add	r1, sp, #40	; 0x28
 8000826:	486f      	ldr	r0, [pc, #444]	; (80009e4 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_4;
 8000828:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	f001 f85e 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000830:	b108      	cbz	r0, 8000836 <main+0x41e>
 8000832:	b672      	cpsid	i
  while (1)
 8000834:	e7fe      	b.n	8000834 <main+0x41c>
  sConfig.Channel = ADC_CHANNEL_8;
 8000836:	4a6e      	ldr	r2, [pc, #440]	; (80009f0 <main+0x5d8>)
 8000838:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083c:	a90a      	add	r1, sp, #40	; 0x28
 800083e:	4869      	ldr	r0, [pc, #420]	; (80009e4 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_8;
 8000840:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	f001 f852 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000848:	b108      	cbz	r0, 800084e <main+0x436>
 800084a:	b672      	cpsid	i
  while (1)
 800084c:	e7fe      	b.n	800084c <main+0x434>
  sConfig.Channel = ADC_CHANNEL_9;
 800084e:	a35c      	add	r3, pc, #368	; (adr r3, 80009c0 <main+0x5a8>)
 8000850:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000854:	a90a      	add	r1, sp, #40	; 0x28
 8000856:	4863      	ldr	r0, [pc, #396]	; (80009e4 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_9;
 8000858:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085c:	f001 f846 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000860:	b108      	cbz	r0, 8000866 <main+0x44e>
 8000862:	b672      	cpsid	i
  while (1)
 8000864:	e7fe      	b.n	8000864 <main+0x44c>
  sConfig.Channel = ADC_CHANNEL_5;
 8000866:	a358      	add	r3, pc, #352	; (adr r3, 80009c8 <main+0x5b0>)
 8000868:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086c:	a90a      	add	r1, sp, #40	; 0x28
 800086e:	485d      	ldr	r0, [pc, #372]	; (80009e4 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_5;
 8000870:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	f001 f83a 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	b108      	cbz	r0, 8000880 <main+0x468>
 800087c:	b672      	cpsid	i
  while (1)
 800087e:	e7fe      	b.n	800087e <main+0x466>
  hrng.Instance = RNG;
 8000880:	485c      	ldr	r0, [pc, #368]	; (80009f4 <main+0x5dc>)
 8000882:	4a5d      	ldr	r2, [pc, #372]	; (80009f8 <main+0x5e0>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000884:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000888:	f005 fcb0 	bl	80061ec <HAL_RNG_Init>
 800088c:	4604      	mov	r4, r0
 800088e:	b108      	cbz	r0, 8000894 <main+0x47c>
 8000890:	b672      	cpsid	i
  while (1)
 8000892:	e7fe      	b.n	8000892 <main+0x47a>
  return __builtin_arm_get_fpscr();
 8000894:	eef1 3a10 	vmrs	r3, fpscr
   tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8000898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 800089c:	eee1 3a10 	vmsr	fpscr, r3
   for (int i = 0; i < 4; i++)
 80008a0:	4956      	ldr	r1, [pc, #344]	; (80009fc <main+0x5e4>)
 	  SPI_TX[i] = counter++;
 80008a2:	4b57      	ldr	r3, [pc, #348]	; (8000a00 <main+0x5e8>)
 80008a4:	780a      	ldrb	r2, [r1, #0]
 	  SPI_PLUCK_TX[i] = 0;
 80008a6:	6218      	str	r0, [r3, #32]
 	  SPI_TX[i] = counter++;
 80008a8:	1c55      	adds	r5, r2, #1
 80008aa:	f362 0007 	bfi	r0, r2, #0, #8
 80008ae:	4f55      	ldr	r7, [pc, #340]	; (8000a04 <main+0x5ec>)
 80008b0:	f365 200f 	bfi	r0, r5, #8, #8
 80008b4:	1c95      	adds	r5, r2, #2
 80008b6:	4e54      	ldr	r6, [pc, #336]	; (8000a08 <main+0x5f0>)
 80008b8:	f365 4017 	bfi	r0, r5, #16, #8
 80008bc:	1cd5      	adds	r5, r2, #3
 80008be:	3204      	adds	r2, #4
 80008c0:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8000a40 <main+0x628>
 80008c4:	f365 601f 	bfi	r0, r5, #24, #8
 80008c8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8000a44 <main+0x62c>
 80008cc:	700a      	strb	r2, [r1, #0]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80008ce:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80008d2:	2208      	movs	r2, #8
 	  SPI_TX[i] = counter++;
 80008d4:	f843 0b20 	str.w	r0, [r3], #32
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80008d8:	484c      	ldr	r0, [pc, #304]	; (8000a0c <main+0x5f4>)
 	  SPI_PLUCK_TX[i] = 0;
 80008da:	615c      	str	r4, [r3, #20]
 80008dc:	831c      	strh	r4, [r3, #24]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80008de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8000a48 <main+0x630>
   	tThreshold_init(&threshold[i],700.0f, 1300.0f, &leaf);
 80008e2:	4d4b      	ldr	r5, [pc, #300]	; (8000a10 <main+0x5f8>)
 80008e4:	ed9f aa4b 	vldr	s20, [pc, #300]	; 8000a14 <main+0x5fc>
 80008e8:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8000a18 <main+0x600>
   	tSlide_init(&fastSlide[i],1.0f,400.0f, &leaf); //1110
 80008ec:	eddf 9a4b 	vldr	s19, [pc, #300]	; 8000a1c <main+0x604>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 80008f0:	eddf 8a4b 	vldr	s17, [pc, #300]	; 8000a20 <main+0x608>
 80008f4:	ed9f 8a4b 	vldr	s16, [pc, #300]	; 8000a24 <main+0x60c>
 	  SPI_PLUCK_TX[i] = 0;
 80008f8:	e9c3 4401 	strd	r4, r4, [r3, #4]
 80008fc:	e9c3 4403 	strd	r4, r4, [r3, #12]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 8000900:	f005 ff80 	bl	8006804 <HAL_SPI_Receive_DMA>
   HAL_Delay(10);
 8000904:	200a      	movs	r0, #10
 8000906:	f000 fe4b 	bl	80015a0 <HAL_Delay>
   HAL_Delay(10);
 800090a:	200a      	movs	r0, #10
 800090c:	f000 fe48 	bl	80015a0 <HAL_Delay>
   LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8000910:	4b45      	ldr	r3, [pc, #276]	; (8000a28 <main+0x610>)
 8000912:	4a46      	ldr	r2, [pc, #280]	; (8000a2c <main+0x614>)
 8000914:	4946      	ldr	r1, [pc, #280]	; (8000a30 <main+0x618>)
 8000916:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000a34 <main+0x61c>
 800091a:	483d      	ldr	r0, [pc, #244]	; (8000a10 <main+0x5f8>)
 800091c:	f006 fdfc 	bl	8007518 <LEAF_init>
   	tThreshold_init(&threshold[i],700.0f, 1300.0f, &leaf);
 8000920:	eb0a 0004 	add.w	r0, sl, r4
 8000924:	eeb0 0a49 	vmov.f32	s0, s18
 8000928:	eef0 0a4a 	vmov.f32	s1, s20
 800092c:	4629      	mov	r1, r5
 800092e:	f006 fa23 	bl	8006d78 <tThreshold_init>
   	tSlide_init(&fastSlide[i],1.0f,400.0f, &leaf); //1110
 8000932:	eb09 0004 	add.w	r0, r9, r4
 8000936:	eef0 0a69 	vmov.f32	s1, s19
 800093a:	4629      	mov	r1, r5
 800093c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000940:	f006 fa4c 	bl	8006ddc <tSlide_init>
   	tSlide_init(&slowSlide[i],1.0f,700.0f, &leaf); //1110
 8000944:	eb08 0004 	add.w	r0, r8, r4
 8000948:	eef0 0a49 	vmov.f32	s1, s18
 800094c:	4629      	mov	r1, r5
 800094e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   for (int i = 0; i < NUM_STRINGS; i++)
 8000952:	3404      	adds	r4, #4
   	tSlide_init(&slowSlide[i],1.0f,700.0f, &leaf); //1110
 8000954:	f006 fa42 	bl	8006ddc <tSlide_init>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 8000958:	eef0 0a68 	vmov.f32	s1, s17
 800095c:	462a      	mov	r2, r5
 800095e:	4638      	mov	r0, r7
 8000960:	eeb0 0a48 	vmov.f32	s0, s16
 8000964:	2101      	movs	r1, #1
 8000966:	f006 fc95 	bl	8007294 <tVZFilter_init>
   		tHighpass_init(&opticalHighpass[i][j], 10.0f, &leaf);//100
 800096a:	4630      	mov	r0, r6
 800096c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000970:	4629      	mov	r1, r5
 8000972:	f006 fa8b 	bl	8006e8c <tHighpass_init>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 8000976:	1d38      	adds	r0, r7, #4
 8000978:	eef0 0a68 	vmov.f32	s1, s17
 800097c:	462a      	mov	r2, r5
 800097e:	eeb0 0a48 	vmov.f32	s0, s16
 8000982:	2101      	movs	r1, #1
 8000984:	f006 fc86 	bl	8007294 <tVZFilter_init>
   		tHighpass_init(&opticalHighpass[i][j], 10.0f, &leaf);//100
 8000988:	1d30      	adds	r0, r6, #4
 800098a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800098e:	4629      	mov	r1, r5
 8000990:	f006 fa7c 	bl	8006e8c <tHighpass_init>
   for (int i = 0; i < NUM_STRINGS; i++)
 8000994:	2c30      	cmp	r4, #48	; 0x30
 8000996:	f107 0708 	add.w	r7, r7, #8
 800099a:	f106 0608 	add.w	r6, r6, #8
 800099e:	d1bf      	bne.n	8000920 <main+0x508>
   LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 80009a0:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80009a4:	4824      	ldr	r0, [pc, #144]	; (8000a38 <main+0x620>)
 80009a6:	f006 fcaf 	bl	8007308 <LEAF_generate_atodb>
   HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values1,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 80009aa:	22c0      	movs	r2, #192	; 0xc0
 80009ac:	4923      	ldr	r1, [pc, #140]	; (8000a3c <main+0x624>)
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <main+0x5cc>)
 80009b0:	f001 fb44 	bl	800203c <HAL_ADC_Start_DMA>
   while (1)
 80009b4:	e7fe      	b.n	80009b4 <main+0x59c>
 80009b6:	bf00      	nop
 80009b8:	1d500080 	.word	0x1d500080
 80009bc:	00000112 	.word	0x00000112
 80009c0:	25b00200 	.word	0x25b00200
 80009c4:	00000206 	.word	0x00000206
 80009c8:	14f00020 	.word	0x14f00020
 80009cc:	0000020c 	.word	0x0000020c
 80009d0:	47520000 	.word	0x47520000
 80009d4:	3ac04000 	.word	0x3ac04000
 80009d8:	3ef08000 	.word	0x3ef08000
 80009dc:	4b840000 	.word	0x4b840000
 80009e0:	4fb80000 	.word	0x4fb80000
 80009e4:	240001a0 	.word	0x240001a0
 80009e8:	0c900008 	.word	0x0c900008
 80009ec:	10c00010 	.word	0x10c00010
 80009f0:	21800100 	.word	0x21800100
 80009f4:	24000378 	.word	0x24000378
 80009f8:	48021800 	.word	0x48021800
 80009fc:	24000104 	.word	0x24000104
 8000a00:	30000000 	.word	0x30000000
 8000a04:	24000608 	.word	0x24000608
 8000a08:	240005a8 	.word	0x240005a8
 8000a0c:	24000418 	.word	0x24000418
 8000a10:	24000558 	.word	0x24000558
 8000a14:	44a28000 	.word	0x44a28000
 8000a18:	442f0000 	.word	0x442f0000
 8000a1c:	43c80000 	.word	0x43c80000
 8000a20:	3f4ccccd 	.word	0x3f4ccccd
 8000a24:	468ca000 	.word	0x468ca000
 8000a28:	08000311 	.word	0x08000311
 8000a2c:	00033450 	.word	0x00033450
 8000a30:	240194c0 	.word	0x240194c0
 8000a34:	473b8000 	.word	0x473b8000
 8000a38:	24000e20 	.word	0x24000e20
 8000a3c:	30000060 	.word	0x30000060
 8000a40:	240007d4 	.word	0x240007d4
 8000a44:	24000170 	.word	0x24000170
 8000a48:	240006f8 	.word	0x240006f8

08000a4c <attackDetectPeak2>:
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8000a4c:	ee07 1a90 	vmov	s15, r1
 8000a50:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8000be8 <attackDetectPeak2+0x19c>
 8000a54:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8000bec <attackDetectPeak2+0x1a0>
 8000a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8000a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8000a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a64:	4f62      	ldr	r7, [pc, #392]	; (8000bf0 <attackDetectPeak2+0x1a4>)
 8000a66:	00c6      	lsls	r6, r0, #3
{
 8000a68:	4604      	mov	r4, r0
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a6a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8000a6e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000a72:	00a5      	lsls	r5, r4, #2
{
 8000a74:	ed2d 8b02 	vpush	{d8}
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a78:	f006 fa28 	bl	8006ecc <tHighpass_tick>
 8000a7c:	1d30      	adds	r0, r6, #4
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a7e:	4e5d      	ldr	r6, [pc, #372]	; (8000bf4 <attackDetectPeak2+0x1a8>)
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a80:	4438      	add	r0, r7
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000a82:	4f5d      	ldr	r7, [pc, #372]	; (8000bf8 <attackDetectPeak2+0x1ac>)
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a84:	f006 fa22 	bl	8006ecc <tHighpass_tick>
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000a88:	485c      	ldr	r0, [pc, #368]	; (8000bfc <attackDetectPeak2+0x1b0>)
 8000a8a:	eeb0 0ac0 	vabs.f32	s0, s0
 8000a8e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000a92:	f006 f9c9 	bl	8006e28 <tSlide_tick>
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a96:	485a      	ldr	r0, [pc, #360]	; (8000c00 <attackDetectPeak2+0x1b4>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000a98:	4b5a      	ldr	r3, [pc, #360]	; (8000c04 <attackDetectPeak2+0x1b8>)
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a9a:	4428      	add	r0, r5
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000a9c:	ed83 0a00 	vstr	s0, [r3]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000aa0:	f006 f9c2 	bl	8006e28 <tSlide_tick>
 8000aa4:	eef0 0a40 	vmov.f32	s1, s0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000aa8:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8000c08 <attackDetectPeak2+0x1bc>
 8000aac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000ab0:	edc6 0a00 	vstr	s1, [r6]
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000ab4:	f006 fc14 	bl	80072e0 <LEAF_clip>
 8000ab8:	eeb0 7a40 	vmov.f32	s14, s0
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000abc:	eddf 7a53 	vldr	s15, [pc, #332]	; 8000c0c <attackDetectPeak2+0x1c0>
 8000ac0:	4b53      	ldr	r3, [pc, #332]	; (8000c10 <attackDetectPeak2+0x1c4>)
 8000ac2:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8000ac6:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8000c14 <attackDetectPeak2+0x1c8>
 8000aca:	ee67 7a27 	vmul.f32	s15, s14, s15
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000ace:	ed86 7a00 	vstr	s14, [r6]
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ad6:	ee17 2a90 	vmov	r2, s15
 8000ada:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000ade:	edd3 0a00 	vldr	s1, [r3]
 8000ae2:	f006 fbfd 	bl	80072e0 <LEAF_clip>
 8000ae6:	ed87 0a00 	vstr	s0, [r7]
	if (whichString == 0)
 8000aea:	b914      	cbnz	r4, 8000af2 <attackDetectPeak2+0xa6>
		dbSmoothedStorage = dbSmoothed2;
 8000aec:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <attackDetectPeak2+0x1cc>)
 8000aee:	ed83 0a00 	vstr	s0, [r3]
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8000af2:	edd6 8a00 	vldr	s17, [r6]
 8000af6:	eddf 7a49 	vldr	s15, [pc, #292]	; 8000c1c <attackDetectPeak2+0x1d0>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000afa:	4e49      	ldr	r6, [pc, #292]	; (8000c20 <attackDetectPeak2+0x1d4>)
	integerVersions[whichString] = integerVersion;
 8000afc:	4b49      	ldr	r3, [pc, #292]	; (8000c24 <attackDetectPeak2+0x1d8>)
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8000afe:	ee68 8aa7 	vmul.f32	s17, s17, s15
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000b02:	1972      	adds	r2, r6, r5
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b04:	4848      	ldr	r0, [pc, #288]	; (8000c28 <attackDetectPeak2+0x1dc>)
	integerVersions[whichString] = integerVersion;
 8000b06:	442b      	add	r3, r5
		armed[whichString] = 1;
 8000b08:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8000c34 <attackDetectPeak2+0x1e8>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000b0c:	ed92 8a00 	vldr	s16, [r2]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b10:	4428      	add	r0, r5
	integerVersions[whichString] = integerVersion;
 8000b12:	edc3 8a00 	vstr	s17, [r3]
	slopeStorage[whichString] = slope;
 8000b16:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <attackDetectPeak2+0x1e0>)
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000b18:	ee30 8a48 	vsub.f32	s16, s0, s16
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b1c:	eeb0 0a68 	vmov.f32	s0, s17
	slopeStorage[whichString] = slope;
 8000b20:	442b      	add	r3, r5
 8000b22:	ed83 8a00 	vstr	s16, [r3]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b26:	f006 f93f 	bl	8006da8 <tThreshold_tick>
 8000b2a:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <attackDetectPeak2+0x1e4>)
	if ((slope > .5f) && (threshOut > 0))//.3
 8000b2c:	2800      	cmp	r0, #0
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b2e:	6018      	str	r0, [r3, #0]
	if ((slope > .5f) && (threshOut > 0))//.3
 8000b30:	dd06      	ble.n	8000b40 <attackDetectPeak2+0xf4>
 8000b32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8000b36:	eeb4 8a67 	vcmp.f32	s16, s15
 8000b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3e:	dc0c      	bgt.n	8000b5a <attackDetectPeak2+0x10e>
	if (armed[whichString] == 1)
 8000b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d00b      	beq.n	8000b60 <attackDetectPeak2+0x114>
{
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	prevdbSmoothed2[whichString] = dbSmoothed2;
 8000b4c:	4435      	add	r5, r6
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	602b      	str	r3, [r5, #0]
}
 8000b52:	ecbd 8b02 	vpop	{d8}
 8000b56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		armed[whichString] = 1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
		if (integerVersion > stringMaxes[whichString])
 8000b60:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000c38 <attackDetectPeak2+0x1ec>
 8000b64:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8000b68:	ee07 3a90 	vmov	s15, r3
 8000b6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b70:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b78:	d505      	bpl.n	8000b86 <attackDetectPeak2+0x13a>
			stringMaxes[whichString] = integerVersion;
 8000b7a:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8000b7e:	ee18 3a90 	vmov	r3, s17
 8000b82:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
		armedCounter[whichString]++;
 8000b86:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8000c3c <attackDetectPeak2+0x1f0>
		if (slope <= 0.0f)
 8000b8a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
			downCounter[whichString]++;
 8000b8e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8000c40 <attackDetectPeak2+0x1f4>
		armedCounter[whichString]++;
 8000b92:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
		if (slope <= 0.0f)
 8000b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		armedCounter[whichString]++;
 8000b9a:	f103 0301 	add.w	r3, r3, #1
 8000b9e:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			downCounter[whichString]++;
 8000ba2:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8000ba6:	bf9c      	itt	ls
 8000ba8:	3301      	addls	r3, #1
 8000baa:	f84b 3024 	strls.w	r3, [fp, r4, lsl #2]
		if (downCounter[whichString] > 256)
 8000bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb2:	ddc9      	ble.n	8000b48 <attackDetectPeak2+0xfc>
			output = LEAF_clip(0.0f, output, 65535.0f);
 8000bb4:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8000bb8:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000c1c <attackDetectPeak2+0x1d0>
 8000bbc:	ee07 3a90 	vmov	s15, r3
 8000bc0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000c08 <attackDetectPeak2+0x1bc>
 8000bc4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8000bc8:	f006 fb8a 	bl	80072e0 <LEAF_clip>
	return (int)output;
 8000bcc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			armed[whichString] = 0;
 8000bd0:	2300      	movs	r3, #0
	return (int)output;
 8000bd2:	ee17 0a90 	vmov	r0, s15
			armed[whichString] = 0;
 8000bd6:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
			armedCounter[whichString] = 0;
 8000bda:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			downCounter[whichString] = 0;
 8000bde:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
			stringMaxes[whichString] = 0;
 8000be2:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
 8000be6:	e7b1      	b.n	8000b4c <attackDetectPeak2+0x100>
 8000be8:	47000000 	.word	0x47000000
 8000bec:	37fffffc 	.word	0x37fffffc
 8000bf0:	240005a8 	.word	0x240005a8
 8000bf4:	24000098 	.word	0x24000098
 8000bf8:	24000108 	.word	0x24000108
 8000bfc:	24000170 	.word	0x24000170
 8000c00:	240006f8 	.word	0x240006f8
 8000c04:	24000094 	.word	0x24000094
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	46c34e00 	.word	0x46c34e00
 8000c10:	24000e20 	.word	0x24000e20
 8000c14:	c21c0000 	.word	0xc21c0000
 8000c18:	2400010c 	.word	0x2400010c
 8000c1c:	477fff00 	.word	0x477fff00
 8000c20:	24000698 	.word	0x24000698
 8000c24:	24000528 	.word	0x24000528
 8000c28:	240007d4 	.word	0x240007d4
 8000c2c:	240006c8 	.word	0x240006c8
 8000c30:	240007d0 	.word	0x240007d0
 8000c34:	240000a4 	.word	0x240000a4
 8000c38:	24000728 	.word	0x24000728
 8000c3c:	240000d4 	.word	0x240000d4
 8000c40:	24000140 	.word	0x24000140

08000c44 <ADC_Frame>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
{
 8000c46:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000c48:	4865      	ldr	r0, [pc, #404]	; (8000de0 <ADC_Frame+0x19c>)
 8000c4a:	4611      	mov	r1, r2
{
 8000c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c50:	b087      	sub	sp, #28
 8000c52:	461c      	mov	r4, r3
 8000c54:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8000e08 <ADC_Frame+0x1c4>
 8000c58:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000c5a:	f003 faa7 	bl	80041ac <HAL_GPIO_WritePin>
	int changeHappened = 0;
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4b60      	ldr	r3, [pc, #384]	; (8000de4 <ADC_Frame+0x1a0>)
 8000c62:	4621      	mov	r1, r4
 8000c64:	4860      	ldr	r0, [pc, #384]	; (8000de8 <ADC_Frame+0x1a4>)
 8000c66:	9200      	str	r2, [sp, #0]
 8000c68:	eb04 0244 	add.w	r2, r4, r4, lsl #1
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000c6c:	3107      	adds	r1, #7
 8000c6e:	9003      	str	r0, [sp, #12]
 8000c70:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000c74:	3b40      	subs	r3, #64	; 0x40
 8000c76:	9104      	str	r1, [sp, #16]
 8000c78:	9201      	str	r2, [sp, #4]
 8000c7a:	4a5c      	ldr	r2, [pc, #368]	; (8000dec <ADC_Frame+0x1a8>)
 8000c7c:	9305      	str	r3, [sp, #20]
		if (howManyFrames > 0)
 8000c7e:	f8db 3000 	ldr.w	r3, [fp]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	dd02      	ble.n	8000c8c <ADC_Frame+0x48>
			howManyFrames--;
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f8cb 3000 	str.w	r3, [fp]
			string_values[k] = ADC_values1[(i*NUM_ADC_CHANNELS) + k];
 8000c8c:	9801      	ldr	r0, [sp, #4]
 8000c8e:	9c03      	ldr	r4, [sp, #12]
 8000c90:	8801      	ldrh	r1, [r0, #0]
 8000c92:	8843      	ldrh	r3, [r0, #2]
 8000c94:	f8df a150 	ldr.w	sl, [pc, #336]	; 8000de8 <ADC_Frame+0x1a4>
 8000c98:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8000e0c <ADC_Frame+0x1c8>
 8000c9c:	4f54      	ldr	r7, [pc, #336]	; (8000df0 <ADC_Frame+0x1ac>)
 8000c9e:	4d55      	ldr	r5, [pc, #340]	; (8000df4 <ADC_Frame+0x1b0>)
 8000ca0:	4e55      	ldr	r6, [pc, #340]	; (8000df8 <ADC_Frame+0x1b4>)
 8000ca2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8000e10 <ADC_Frame+0x1cc>
 8000ca6:	f8cd a00c 	str.w	sl, [sp, #12]
 8000caa:	e9c4 1300 	strd	r1, r3, [r4]
 8000cae:	8881      	ldrh	r1, [r0, #4]
 8000cb0:	88c3      	ldrh	r3, [r0, #6]
 8000cb2:	e9c4 1302 	strd	r1, r3, [r4, #8]
 8000cb6:	8901      	ldrh	r1, [r0, #8]
 8000cb8:	8943      	ldrh	r3, [r0, #10]
 8000cba:	e9c4 1304 	strd	r1, r3, [r4, #16]
 8000cbe:	8981      	ldrh	r1, [r0, #12]
 8000cc0:	89c3      	ldrh	r3, [r0, #14]
 8000cc2:	e9c4 1306 	strd	r1, r3, [r4, #24]
 8000cc6:	8a01      	ldrh	r1, [r0, #16]
 8000cc8:	8a43      	ldrh	r3, [r0, #18]
 8000cca:	e9c4 1308 	strd	r1, r3, [r4, #32]
 8000cce:	8a81      	ldrh	r1, [r0, #20]
 8000cd0:	8ac3      	ldrh	r3, [r0, #22]
 8000cd2:	e9c4 130a 	strd	r1, r3, [r4, #40]	; 0x28
 8000cd6:	2401      	movs	r4, #1
 8000cd8:	e025      	b.n	8000d26 <ADC_Frame+0xe2>
				stringTouchRH[j] = (RHbits[0] >> j) & 1;
 8000cda:	6813      	ldr	r3, [r2, #0]
 8000cdc:	4103      	asrs	r3, r0
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	802b      	strh	r3, [r5, #0]
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000ce4:	f7ff feb2 	bl	8000a4c <attackDetectPeak2>
			if (howManyFrames == 0)
 8000ce8:	f8db 3000 	ldr.w	r3, [fp]
 8000cec:	4a3f      	ldr	r2, [pc, #252]	; (8000dec <ADC_Frame+0x1a8>)
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000cee:	6030      	str	r0, [r6, #0]
			if (howManyFrames == 0)
 8000cf0:	b98b      	cbnz	r3, 8000d16 <ADC_Frame+0xd2>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	dd2e      	ble.n	8000d54 <ADC_Frame+0x110>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b94b      	cbnz	r3, 8000d0e <ADC_Frame+0xca>
					stringSounding[j] = 1;
 8000cfa:	2301      	movs	r3, #1
					SPI_PLUCK_TX[(j * 2) + 2] = (didPlucked[j] & 0xff);
 8000cfc:	f888 0002 	strb.w	r0, [r8, #2]
					pluckValues[j] = didPlucked[j];
 8000d00:	f8c9 0000 	str.w	r0, [r9]
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] >> 8);
 8000d04:	1200      	asrs	r0, r0, #8
					stringSounding[j] = 1;
 8000d06:	603b      	str	r3, [r7, #0]
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] >> 8);
 8000d08:	f888 0001 	strb.w	r0, [r8, #1]
					changeHappened = 1;
 8000d0c:	9300      	str	r3, [sp, #0]
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8000d0e:	882b      	ldrh	r3, [r5, #0]
 8000d10:	bb33      	cbnz	r3, 8000d60 <ADC_Frame+0x11c>
		for (int j = 0; j < 12; j++)
 8000d12:	2c0c      	cmp	r4, #12
 8000d14:	d034      	beq.n	8000d80 <ADC_Frame+0x13c>
 8000d16:	3401      	adds	r4, #1
 8000d18:	f108 0802 	add.w	r8, r8, #2
 8000d1c:	f109 0904 	add.w	r9, r9, #4
 8000d20:	3704      	adds	r7, #4
 8000d22:	3502      	adds	r5, #2
 8000d24:	3604      	adds	r6, #4
 8000d26:	1e60      	subs	r0, r4, #1
			int tempInt = string_values[j];
 8000d28:	f85a 1b04 	ldr.w	r1, [sl], #4
			if (j < 8)
 8000d2c:	2807      	cmp	r0, #7
 8000d2e:	d9d4      	bls.n	8000cda <ADC_Frame+0x96>
				stringTouchRH[j] = (RHbits[1] >> (j-8)) & 1;
 8000d30:	6853      	ldr	r3, [r2, #4]
 8000d32:	f1a4 0c09 	sub.w	ip, r4, #9
 8000d36:	fa43 f30c 	asr.w	r3, r3, ip
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	802b      	strh	r3, [r5, #0]
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d40:	f7ff fe84 	bl	8000a4c <attackDetectPeak2>
			if (howManyFrames == 0)
 8000d44:	f8db 3000 	ldr.w	r3, [fp]
 8000d48:	4a28      	ldr	r2, [pc, #160]	; (8000dec <ADC_Frame+0x1a8>)
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d4a:	6030      	str	r0, [r6, #0]
			if (howManyFrames == 0)
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1e0      	bne.n	8000d12 <ADC_Frame+0xce>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 8000d50:	2800      	cmp	r0, #0
 8000d52:	dcd0      	bgt.n	8000cf6 <ADC_Frame+0xb2>
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8000d54:	882b      	ldrh	r3, [r5, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0db      	beq.n	8000d12 <ADC_Frame+0xce>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0d8      	beq.n	8000d12 <ADC_Frame+0xce>
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 8000d60:	f04f 0300 	mov.w	r3, #0
		for (int j = 0; j < 12; j++)
 8000d64:	2c0c      	cmp	r4, #12
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 8000d66:	f888 3001 	strb.w	r3, [r8, #1]
					SPI_PLUCK_TX[(j * 2) + 2] = 0;
 8000d6a:	f888 3002 	strb.w	r3, [r8, #2]
					pluckValues[j] = 0;
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	f8c9 3000 	str.w	r3, [r9]
					stringSounding[j] = 0;
 8000d76:	603b      	str	r3, [r7, #0]
					changeHappened = 1;
 8000d78:	f04f 0301 	mov.w	r3, #1
 8000d7c:	9300      	str	r3, [sp, #0]
		for (int j = 0; j < 12; j++)
 8000d7e:	d1ca      	bne.n	8000d16 <ADC_Frame+0xd2>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000d80:	9901      	ldr	r1, [sp, #4]
 8000d82:	9b02      	ldr	r3, [sp, #8]
 8000d84:	3118      	adds	r1, #24
 8000d86:	3301      	adds	r3, #1
 8000d88:	9101      	str	r1, [sp, #4]
 8000d8a:	9904      	ldr	r1, [sp, #16]
 8000d8c:	9302      	str	r3, [sp, #8]
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	f77f af75 	ble.w	8000c7e <ADC_Frame+0x3a>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2101      	movs	r1, #1
 8000d98:	4811      	ldr	r0, [pc, #68]	; (8000de0 <ADC_Frame+0x19c>)
 8000d9a:	f003 fa07 	bl	80041ac <HAL_GPIO_WritePin>
	if (changeHappened)
 8000d9e:	9b00      	ldr	r3, [sp, #0]
 8000da0:	b1db      	cbz	r3, 8000dda <ADC_Frame+0x196>
		SPI_PLUCK_TX[0] = 254;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <ADC_Frame+0x1b8>)
 8000da4:	21fe      	movs	r1, #254	; 0xfe
		SPI_PLUCK_TX[25] = 253;
 8000da6:	22fd      	movs	r2, #253	; 0xfd
		SPI_PLUCK_TX[0] = 254;
 8000da8:	f883 1020 	strb.w	r1, [r3, #32]
		SPI_PLUCK_TX[25] = 253;
 8000dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  __ASM volatile ("dsb 0xF":::"memory");
 8000db0:	f3bf 8f4f 	dsb	sy
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000db4:	9905      	ldr	r1, [sp, #20]
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <ADC_Frame+0x1bc>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000db8:	f101 0220 	add.w	r2, r1, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000dbc:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
 8000dc0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8000dc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dc8:	f3bf 8f6f 	isb	sy
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 26);
 8000dcc:	221a      	movs	r2, #26
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <ADC_Frame+0x1c0>)
}
 8000dd0:	b007      	add	sp, #28
 8000dd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 26);
 8000dd6:	f005 bc41 	b.w	800665c <HAL_SPI_Transmit_DMA>
}
 8000dda:	b007      	add	sp, #28
 8000ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de0:	58020c00 	.word	0x58020c00
 8000de4:	30000060 	.word	0x30000060
 8000de8:	240007a0 	.word	0x240007a0
 8000dec:	2400009c 	.word	0x2400009c
 8000df0:	24000758 	.word	0x24000758
 8000df4:	24000788 	.word	0x24000788
 8000df8:	24000110 	.word	0x24000110
 8000dfc:	30000000 	.word	0x30000000
 8000e00:	e000ed00 	.word	0xe000ed00
 8000e04:	2400038c 	.word	0x2400038c
 8000e08:	24000000 	.word	0x24000000
 8000e0c:	24000668 	.word	0x24000668
 8000e10:	30000020 	.word	0x30000020

08000e14 <HAL_ADC_ConvCpltCallback>:
	ADC_Frame(ADC_FRAME_SIZE);
 8000e14:	2008      	movs	r0, #8
 8000e16:	f7ff bf15 	b.w	8000c44 <ADC_Frame>
 8000e1a:	bf00      	nop

08000e1c <HAL_ADC_ConvHalfCpltCallback>:
	ADC_Frame(0);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff bf11 	b.w	8000c44 <ADC_Frame>
 8000e22:	bf00      	nop

08000e24 <HAL_SPI_RxCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	480a      	ldr	r0, [pc, #40]	; (8000e54 <HAL_SPI_RxCpltCallback+0x30>)
{
 8000e2a:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e2c:	f003 f9be 	bl	80041ac <HAL_GPIO_WritePin>
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_SPI_RxCpltCallback+0x34>)
 8000e32:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8000e36:	2afe      	cmp	r2, #254	; 0xfe
 8000e38:	d000      	beq.n	8000e3c <HAL_SPI_RxCpltCallback+0x18>
}
 8000e3a:	bd08      	pop	{r3, pc}
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000e3c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8000e40:	2afd      	cmp	r2, #253	; 0xfd
 8000e42:	d1fa      	bne.n	8000e3a <HAL_SPI_RxCpltCallback+0x16>
			RHbits[i] = SPI_RX[i+4];
 8000e44:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_SPI_RxCpltCallback+0x38>)
 8000e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e4e:	e9c2 1300 	strd	r1, r3, [r2]
}
 8000e52:	bd08      	pop	{r3, pc}
 8000e54:	58020400 	.word	0x58020400
 8000e58:	30000000 	.word	0x30000000
 8000e5c:	2400009c 	.word	0x2400009c

08000e60 <HAL_SPI_RxHalfCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <HAL_SPI_RxHalfCpltCallback+0x30>)
{
 8000e66:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e68:	f003 f9a0 	bl	80041ac <HAL_GPIO_WritePin>
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_SPI_RxHalfCpltCallback+0x34>)
 8000e6e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000e72:	2afe      	cmp	r2, #254	; 0xfe
 8000e74:	d000      	beq.n	8000e78 <HAL_SPI_RxHalfCpltCallback+0x18>
}
 8000e76:	bd08      	pop	{r3, pc}
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 8000e78:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000e7c:	2afd      	cmp	r2, #253	; 0xfd
 8000e7e:	d1fa      	bne.n	8000e76 <HAL_SPI_RxHalfCpltCallback+0x16>
			RHbits[i] = SPI_RX[i];
 8000e80:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_SPI_RxHalfCpltCallback+0x38>)
 8000e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e8a:	e9c2 1300 	strd	r1, r3, [r2]
}
 8000e8e:	bd08      	pop	{r3, pc}
 8000e90:	58020400 	.word	0x58020400
 8000e94:	30000000 	.word	0x30000000
 8000e98:	2400009c 	.word	0x2400009c

08000e9c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <Error_Handler+0x2>

08000ea0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <HAL_MspInit+0x20>)
{
 8000ea2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ea8:	f042 0202 	orr.w	r2, r2, #2
 8000eac:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebc:	b002      	add	sp, #8
 8000ebe:	4770      	bx	lr
 8000ec0:	58024400 	.word	0x58024400

08000ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	2100      	movs	r1, #0
{
 8000eca:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ecc:	22b8      	movs	r2, #184	; 0xb8
 8000ece:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	9108      	str	r1, [sp, #32]
 8000ed2:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000ed6:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eda:	f006 fb7b 	bl	80075d4 <memset>
  if(hadc->Instance==ADC1)
 8000ede:	4b4f      	ldr	r3, [pc, #316]	; (800101c <HAL_ADC_MspInit+0x158>)
 8000ee0:	6822      	ldr	r2, [r4, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d001      	beq.n	8000eea <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ee6:	b038      	add	sp, #224	; 0xe0
 8000ee8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000eee:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef0:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ef2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000ef6:	2219      	movs	r2, #25
 8000ef8:	23dc      	movs	r3, #220	; 0xdc
 8000efa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000efe:	2204      	movs	r2, #4
 8000f00:	2302      	movs	r3, #2
 8000f02:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f06:	f44f 7300 	mov.w	r3, #512	; 0x200
    PeriphClkInitStruct.PLL3.PLL3R = 5;
 8000f0a:	2205      	movs	r2, #5
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f0c:	931a      	str	r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.PLL3.PLL3R = 5;
 8000f12:	9218      	str	r2, [sp, #96]	; 0x60
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000f14:	9332      	str	r3, [sp, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f16:	f003 ffef 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d177      	bne.n	800100e <HAL_ADC_MspInit+0x14a>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f1e:	4b40      	ldr	r3, [pc, #256]	; (8001020 <HAL_ADC_MspInit+0x15c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	4840      	ldr	r0, [pc, #256]	; (8001024 <HAL_ADC_MspInit+0x160>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f24:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    hdma_adc1.Instance = DMA1_Stream2;
 8000f28:	4d3f      	ldr	r5, [pc, #252]	; (8001028 <HAL_ADC_MspInit+0x164>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f2a:	f042 0220 	orr.w	r2, r2, #32
 8000f2e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000f32:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f36:	f002 0220 	and.w	r2, r2, #32
 8000f3a:	9200      	str	r2, [sp, #0]
 8000f3c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f4e:	f002 0201 	and.w	r2, r2, #1
 8000f52:	9201      	str	r2, [sp, #4]
 8000f54:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f5a:	f042 0204 	orr.w	r2, r2, #4
 8000f5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f66:	f002 0204 	and.w	r2, r2, #4
 8000f6a:	9202      	str	r2, [sp, #8]
 8000f6c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f72:	f042 0202 	orr.w	r2, r2, #2
 8000f76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f7a:	22ff      	movs	r2, #255	; 0xff
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f88:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f002 ffcf 	bl	8003f34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f96:	2230      	movs	r2, #48	; 0x30
 8000f98:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9a:	a904      	add	r1, sp, #16
 8000f9c:	4823      	ldr	r0, [pc, #140]	; (800102c <HAL_ADC_MspInit+0x168>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa4:	f002 ffc6 	bl	8003f34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fa8:	2203      	movs	r2, #3
 8000faa:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	4820      	ldr	r0, [pc, #128]	; (8001030 <HAL_ADC_MspInit+0x16c>)
 8000fae:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f002 ffbd 	bl	8003f34 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream2;
 8000fba:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <HAL_ADC_MspInit+0x170>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fbc:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fbe:	4628      	mov	r0, r5
    hdma_adc1.Instance = DMA1_Stream2;
 8000fc0:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fc6:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fcc:	612a      	str	r2, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fd2:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd8:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fda:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000fdc:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fde:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fe0:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fe2:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fe6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fea:	2304      	movs	r3, #4
 8000fec:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ff0:	f001 fcea 	bl	80029c8 <HAL_DMA_Init>
 8000ff4:	b970      	cbnz	r0, 8001014 <HAL_ADC_MspInit+0x150>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ffa:	65a5      	str	r5, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ffc:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ffe:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001000:	f001 fb4c 	bl	800269c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001004:	2012      	movs	r0, #18
 8001006:	f001 fb87 	bl	8002718 <HAL_NVIC_EnableIRQ>
}
 800100a:	b038      	add	sp, #224	; 0xe0
 800100c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800100e:	f7ff ff45 	bl	8000e9c <Error_Handler>
 8001012:	e784      	b.n	8000f1e <HAL_ADC_MspInit+0x5a>
      Error_Handler();
 8001014:	f7ff ff42 	bl	8000e9c <Error_Handler>
 8001018:	e7ed      	b.n	8000ff6 <HAL_ADC_MspInit+0x132>
 800101a:	bf00      	nop
 800101c:	40022000 	.word	0x40022000
 8001020:	58024400 	.word	0x58024400
 8001024:	58020000 	.word	0x58020000
 8001028:	24000210 	.word	0x24000210
 800102c:	58020800 	.word	0x58020800
 8001030:	58020400 	.word	0x58020400
 8001034:	40020040 	.word	0x40020040

08001038 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001038:	b510      	push	{r4, lr}
 800103a:	b0b0      	sub	sp, #192	; 0xc0
 800103c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103e:	22b8      	movs	r2, #184	; 0xb8
 8001040:	2100      	movs	r1, #0
 8001042:	a802      	add	r0, sp, #8
 8001044:	f006 fac6 	bl	80075d4 <memset>
  if(hrng->Instance==RNG)
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_RNG_MspInit+0x54>)
 800104a:	6822      	ldr	r2, [r4, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d001      	beq.n	8001054 <HAL_RNG_MspInit+0x1c>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001050:	b030      	add	sp, #192	; 0xc0
 8001052:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001054:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001058:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105a:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800105c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001060:	f003 ff4a 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001064:	b970      	cbnz	r0, 8001084 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_RNG_MspInit+0x58>)
 8001068:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800106c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001070:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8001074:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	9b01      	ldr	r3, [sp, #4]
}
 8001080:	b030      	add	sp, #192	; 0xc0
 8001082:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001084:	f7ff ff0a 	bl	8000e9c <Error_Handler>
 8001088:	e7ed      	b.n	8001066 <HAL_RNG_MspInit+0x2e>
 800108a:	bf00      	nop
 800108c:	48021800 	.word	0x48021800
 8001090:	58024400 	.word	0x58024400

08001094 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001094:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8001098:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	2100      	movs	r1, #0
{
 800109c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800109e:	22b8      	movs	r2, #184	; 0xb8
 80010a0:	a80e      	add	r0, sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	910c      	str	r1, [sp, #48]	; 0x30
 80010a4:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80010a8:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f006 fa92 	bl	80075d4 <memset>
  if(hspi->Instance==SPI1)
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	4a9f      	ldr	r2, [pc, #636]	; (8001330 <HAL_SPI_MspInit+0x29c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d009      	beq.n	80010cc <HAL_SPI_MspInit+0x38>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80010b8:	4a9e      	ldr	r2, [pc, #632]	; (8001334 <HAL_SPI_MspInit+0x2a0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d07c      	beq.n	80011b8 <HAL_SPI_MspInit+0x124>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80010be:	4a9e      	ldr	r2, [pc, #632]	; (8001338 <HAL_SPI_MspInit+0x2a4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	f000 80d6 	beq.w	8001272 <HAL_SPI_MspInit+0x1de>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010c6:	b03c      	add	sp, #240	; 0xf0
 80010c8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d2:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010d4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d8:	f003 ff0e 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	2800      	cmp	r0, #0
 80010de:	f040 811a 	bne.w	8001316 <HAL_SPI_MspInit+0x282>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e2:	4b96      	ldr	r3, [pc, #600]	; (800133c <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010e4:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010e6:	f04f 0800 	mov.w	r8, #0
 80010ea:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ee:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f2:	4893      	ldr	r0, [pc, #588]	; (8001340 <HAL_SPI_MspInit+0x2ac>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdma_spi1_tx.Instance = DMA1_Stream0;
 80010f8:	4d92      	ldr	r5, [pc, #584]	; (8001344 <HAL_SPI_MspInit+0x2b0>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80010fe:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001102:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001106:	9200      	str	r2, [sp, #0]
 8001108:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800110a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800110e:	f042 0208 	orr.w	r2, r2, #8
 8001112:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001116:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800111a:	f002 0208 	and.w	r2, r2, #8
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001122:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800112a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800112e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001134:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800113c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800113e:	9902      	ldr	r1, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001140:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001142:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001146:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114a:	f002 fef3 	bl	8003f34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800114e:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8001152:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001154:	a908      	add	r1, sp, #32
 8001156:	487c      	ldr	r0, [pc, #496]	; (8001348 <HAL_SPI_MspInit+0x2b4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001158:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800115a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800115e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001162:	f002 fee7 	bl	8003f34 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001166:	4979      	ldr	r1, [pc, #484]	; (800134c <HAL_SPI_MspInit+0x2b8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001168:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800116a:	2300      	movs	r3, #0
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800116c:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800116e:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001170:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001172:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001176:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001178:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800117c:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800117e:	2204      	movs	r2, #4
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001180:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001182:	60eb      	str	r3, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001184:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001186:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001188:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800118c:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001190:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001194:	f001 fc18 	bl	80029c8 <HAL_DMA_Init>
 8001198:	2800      	cmp	r0, #0
 800119a:	f040 80b9 	bne.w	8001310 <HAL_SPI_MspInit+0x27c>
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2101      	movs	r1, #1
 80011a2:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011a4:	67a5      	str	r5, [r4, #120]	; 0x78
 80011a6:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80011a8:	f001 fa78 	bl	800269c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011ac:	2023      	movs	r0, #35	; 0x23
 80011ae:	f001 fab3 	bl	8002718 <HAL_NVIC_EnableIRQ>
}
 80011b2:	b03c      	add	sp, #240	; 0xf0
 80011b4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011bc:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011be:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c4:	f003 fe98 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	f040 80a7 	bne.w	800131c <HAL_SPI_MspInit+0x288>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011d0:	2005      	movs	r0, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	a908      	add	r1, sp, #32
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011d4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80011d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011dc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80011e0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80011e4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011e8:	9203      	str	r2, [sp, #12]
 80011ea:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011f0:	f042 0202 	orr.w	r2, r2, #2
 80011f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011f8:	f44f 4270 	mov.w	r2, #61440	; 0xf000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001200:	900c      	str	r0, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	4852      	ldr	r0, [pc, #328]	; (8001350 <HAL_SPI_MspInit+0x2bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800120a:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	9d04      	ldr	r5, [sp, #16]
    hdma_spi2_rx.Instance = DMA1_Stream1;
 800120e:	4d51      	ldr	r5, [pc, #324]	; (8001354 <HAL_SPI_MspInit+0x2c0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001210:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001214:	2200      	movs	r2, #0
 8001216:	2302      	movs	r3, #2
 8001218:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f002 fe8a 	bl	8003f34 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001220:	494d      	ldr	r1, [pc, #308]	; (8001358 <HAL_SPI_MspInit+0x2c4>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001222:	2227      	movs	r2, #39	; 0x27
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001224:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001226:	4628      	mov	r0, r5
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001228:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800122a:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001232:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001236:	6129      	str	r1, [r5, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001238:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800123c:	61ea      	str	r2, [r5, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800123e:	2204      	movs	r2, #4
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001240:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001244:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001248:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800124c:	e9c5 1208 	strd	r1, r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001250:	f001 fbba 	bl	80029c8 <HAL_DMA_Init>
 8001254:	2800      	cmp	r0, #0
 8001256:	d164      	bne.n	8001322 <HAL_SPI_MspInit+0x28e>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2102      	movs	r1, #2
 800125c:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800125e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001260:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001262:	f001 fa1b 	bl	800269c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001266:	2024      	movs	r0, #36	; 0x24
 8001268:	f001 fa56 	bl	8002718 <HAL_NVIC_EnableIRQ>
}
 800126c:	b03c      	add	sp, #240	; 0xf0
 800126e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001272:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001276:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001278:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800127a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127e:	f003 fe3b 	bl	8004ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001282:	2800      	cmp	r0, #0
 8001284:	d150      	bne.n	8001328 <HAL_SPI_MspInit+0x294>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001286:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001288:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800128c:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800128e:	2406      	movs	r4, #6
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001290:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001294:	f04f 0800 	mov.w	r8, #0
 8001298:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_SPI3_CLK_ENABLE();
 800129c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012a0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80012a4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80012a8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80012ac:	9205      	str	r2, [sp, #20]
 80012ae:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012b4:	f042 0201 	orr.w	r2, r2, #1
 80012b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012c0:	f002 0201 	and.w	r2, r2, #1
 80012c4:	9206      	str	r2, [sp, #24]
 80012c6:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012cc:	f042 0204 	orr.w	r2, r2, #4
 80012d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d8:	940c      	str	r4, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012de:	e9cd 0108 	strd	r0, r1, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	a908      	add	r1, sp, #32
 80012e6:	481d      	ldr	r0, [pc, #116]	; (800135c <HAL_SPI_MspInit+0x2c8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e8:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012ea:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f002 fe21 	bl	8003f34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012f2:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80012f6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	a908      	add	r1, sp, #32
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <HAL_SPI_MspInit+0x2cc>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012fc:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012fe:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8001302:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f002 fe15 	bl	8003f34 <HAL_GPIO_Init>
}
 800130a:	b03c      	add	sp, #240	; 0xf0
 800130c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 8001310:	f7ff fdc4 	bl	8000e9c <Error_Handler>
 8001314:	e743      	b.n	800119e <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 8001316:	f7ff fdc1 	bl	8000e9c <Error_Handler>
 800131a:	e6e2      	b.n	80010e2 <HAL_SPI_MspInit+0x4e>
      Error_Handler();
 800131c:	f7ff fdbe 	bl	8000e9c <Error_Handler>
 8001320:	e755      	b.n	80011ce <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 8001322:	f7ff fdbb 	bl	8000e9c <Error_Handler>
 8001326:	e797      	b.n	8001258 <HAL_SPI_MspInit+0x1c4>
      Error_Handler();
 8001328:	f7ff fdb8 	bl	8000e9c <Error_Handler>
 800132c:	e7ab      	b.n	8001286 <HAL_SPI_MspInit+0x1f2>
 800132e:	bf00      	nop
 8001330:	40013000 	.word	0x40013000
 8001334:	40003800 	.word	0x40003800
 8001338:	40003c00 	.word	0x40003c00
 800133c:	58024400 	.word	0x58024400
 8001340:	58020c00 	.word	0x58020c00
 8001344:	24000288 	.word	0x24000288
 8001348:	58021800 	.word	0x58021800
 800134c:	40020010 	.word	0x40020010
 8001350:	58020400 	.word	0x58020400
 8001354:	24000300 	.word	0x24000300
 8001358:	40020028 	.word	0x40020028
 800135c:	58020000 	.word	0x58020000
 8001360:	58020800 	.word	0x58020800

08001364 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler>
 8001366:	bf00      	nop

08001368 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <HardFault_Handler>
 800136a:	bf00      	nop

0800136c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler>
 800136e:	bf00      	nop

08001370 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <BusFault_Handler>
 8001372:	bf00      	nop

08001374 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler>
 8001376:	bf00      	nop

08001378 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop

0800137c <DebugMon_Handler>:
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <PendSV_Handler>:
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop

08001384 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 b8fa 	b.w	800157c <HAL_IncTick>

08001388 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001388:	4801      	ldr	r0, [pc, #4]	; (8001390 <DMA1_Stream0_IRQHandler+0x8>)
 800138a:	f002 b96d 	b.w	8003668 <HAL_DMA_IRQHandler>
 800138e:	bf00      	nop
 8001390:	24000288 	.word	0x24000288

08001394 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001394:	4801      	ldr	r0, [pc, #4]	; (800139c <DMA1_Stream1_IRQHandler+0x8>)
 8001396:	f002 b967 	b.w	8003668 <HAL_DMA_IRQHandler>
 800139a:	bf00      	nop
 800139c:	24000300 	.word	0x24000300

080013a0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013a0:	4801      	ldr	r0, [pc, #4]	; (80013a8 <DMA1_Stream2_IRQHandler+0x8>)
 80013a2:	f002 b961 	b.w	8003668 <HAL_DMA_IRQHandler>
 80013a6:	bf00      	nop
 80013a8:	24000210 	.word	0x24000210

080013ac <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013ac:	4801      	ldr	r0, [pc, #4]	; (80013b4 <ADC_IRQHandler+0x8>)
 80013ae:	f000 b913 	b.w	80015d8 <HAL_ADC_IRQHandler>
 80013b2:	bf00      	nop
 80013b4:	240001a0 	.word	0x240001a0

080013b8 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013b8:	4801      	ldr	r0, [pc, #4]	; (80013c0 <SPI1_IRQHandler+0x8>)
 80013ba:	f005 bbc3 	b.w	8006b44 <HAL_SPI_IRQHandler>
 80013be:	bf00      	nop
 80013c0:	2400038c 	.word	0x2400038c

080013c4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80013c4:	4801      	ldr	r0, [pc, #4]	; (80013cc <SPI2_IRQHandler+0x8>)
 80013c6:	f005 bbbd 	b.w	8006b44 <HAL_SPI_IRQHandler>
 80013ca:	bf00      	nop
 80013cc:	24000418 	.word	0x24000418

080013d0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013d0:	4922      	ldr	r1, [pc, #136]	; (800145c <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013d2:	4a23      	ldr	r2, [pc, #140]	; (8001460 <SystemInit+0x90>)
{
 80013d4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80013da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013e2:	6813      	ldr	r3, [r2, #0]
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	2b06      	cmp	r3, #6
 80013ea:	d805      	bhi.n	80013f8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ec:	6813      	ldr	r3, [r2, #0]
 80013ee:	f023 030f 	bic.w	r3, r3, #15
 80013f2:	f043 0307 	orr.w	r3, r3, #7
 80013f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013fa:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 80013fe:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001400:	4817      	ldr	r0, [pc, #92]	; (8001460 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8001402:	f041 0101 	orr.w	r1, r1, #1
 8001406:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001408:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800140a:	6819      	ldr	r1, [r3, #0]
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001410:	6803      	ldr	r3, [r0, #0]
 8001412:	071b      	lsls	r3, r3, #28
 8001414:	d505      	bpl.n	8001422 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001416:	6803      	ldr	r3, [r0, #0]
 8001418:	f023 030f 	bic.w	r3, r3, #15
 800141c:	f043 0307 	orr.w	r3, r3, #7
 8001420:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <SystemInit+0x94>)
 8001424:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001426:	4911      	ldr	r1, [pc, #68]	; (800146c <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8001428:	4c11      	ldr	r4, [pc, #68]	; (8001470 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 800142a:	4812      	ldr	r0, [pc, #72]	; (8001474 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 800142c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800142e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001430:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001432:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001434:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8001438:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800143a:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800143e:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8001442:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8001446:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 800144a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800144e:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001450:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001452:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00
 8001460:	52002000 	.word	0x52002000
 8001464:	58024400 	.word	0x58024400
 8001468:	eaf6ed7f 	.word	0xeaf6ed7f
 800146c:	01010280 	.word	0x01010280
 8001470:	02020200 	.word	0x02020200
 8001474:	01ff0000 	.word	0x01ff0000
 8001478:	52004000 	.word	0x52004000

0800147c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001480:	f7ff ffa6 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001486:	490d      	ldr	r1, [pc, #52]	; (80014bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800149c:	4c0a      	ldr	r4, [pc, #40]	; (80014c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014aa:	f006 f86f 	bl	800758c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ae:	f7fe ffb3 	bl	8000418 <main>
  bx  lr
 80014b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014bc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80014c0:	08008dd4 	.word	0x08008dd4
  ldr r2, =_sbss
 80014c4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80014c8:	24000808 	.word	0x24000808

080014cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC3_IRQHandler>
	...

080014d0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_InitTick+0x40>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b90b      	cbnz	r3, 80014da <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014d8:	4770      	bx	lr
{
 80014da:	b510      	push	{r4, lr}
 80014dc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <HAL_InitTick+0x44>)
 80014e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e8:	6810      	ldr	r0, [r2, #0]
 80014ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ee:	f001 f921 	bl	8002734 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	2c0f      	cmp	r4, #15
 80014f4:	d800      	bhi.n	80014f8 <HAL_InitTick+0x28>
 80014f6:	b108      	cbz	r0, 80014fc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80014f8:	2001      	movs	r0, #1
}
 80014fa:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	4621      	mov	r1, r4
 8001500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001504:	f001 f8ca 	bl	800269c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_InitTick+0x48>)
 800150a:	2000      	movs	r0, #0
 800150c:	601c      	str	r4, [r3, #0]
}
 800150e:	bd10      	pop	{r4, pc}
 8001510:	2400000c 	.word	0x2400000c
 8001514:	24000004 	.word	0x24000004
 8001518:	24000010 	.word	0x24000010

0800151c <HAL_Init>:
{
 800151c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151e:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001520:	4c12      	ldr	r4, [pc, #72]	; (800156c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001522:	f001 f8a9 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001526:	f003 f997 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_Init+0x54>)
 800152c:	4911      	ldr	r1, [pc, #68]	; (8001574 <HAL_Init+0x58>)
 800152e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001530:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001532:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001536:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800153a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800153c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800153e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001542:	490d      	ldr	r1, [pc, #52]	; (8001578 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001544:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001548:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800154a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800154e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001550:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001552:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001554:	f7ff ffbc 	bl	80014d0 <HAL_InitTick>
 8001558:	b110      	cbz	r0, 8001560 <HAL_Init+0x44>
    return HAL_ERROR;
 800155a:	2401      	movs	r4, #1
}
 800155c:	4620      	mov	r0, r4
 800155e:	bd10      	pop	{r4, pc}
 8001560:	4604      	mov	r4, r0
  HAL_MspInit();
 8001562:	f7ff fc9d 	bl	8000ea0 <HAL_MspInit>
}
 8001566:	4620      	mov	r0, r4
 8001568:	bd10      	pop	{r4, pc}
 800156a:	bf00      	nop
 800156c:	24000008 	.word	0x24000008
 8001570:	58024400 	.word	0x58024400
 8001574:	08008650 	.word	0x08008650
 8001578:	24000004 	.word	0x24000004

0800157c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_IncTick+0x10>)
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_IncTick+0x14>)
 8001580:	6811      	ldr	r1, [r2, #0]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	440b      	add	r3, r1
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	24000804 	.word	0x24000804
 8001590:	2400000c 	.word	0x2400000c

08001594 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001594:	4b01      	ldr	r3, [pc, #4]	; (800159c <HAL_GetTick+0x8>)
 8001596:	6818      	ldr	r0, [r3, #0]
}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	24000804 	.word	0x24000804

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b538      	push	{r3, r4, r5, lr}
 80015a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff fff6 	bl	8001594 <HAL_GetTick>
 80015a8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	1c63      	adds	r3, r4, #1
 80015ac:	d002      	beq.n	80015b4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_Delay+0x20>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	1b43      	subs	r3, r0, r5
 80015ba:	42a3      	cmp	r3, r4
 80015bc:	d3fa      	bcc.n	80015b4 <HAL_Delay+0x14>
  {
  }
}
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	2400000c 	.word	0x2400000c

080015c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80015c4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015c6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80015c8:	f7ff fc28 	bl	8000e1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015cc:	bd08      	pop	{r3, pc}
 80015ce:	bf00      	nop

080015d0 <HAL_ADC_LevelOutOfWindowCallback>:
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop

080015d4 <HAL_ADC_ErrorCallback>:
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop

080015d8 <HAL_ADC_IRQHandler>:
{
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015da:	4a8f      	ldr	r2, [pc, #572]	; (8001818 <HAL_ADC_IRQHandler+0x240>)
{
 80015dc:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015de:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015e0:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015e2:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80015e4:	685f      	ldr	r7, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015e6:	f000 8097 	beq.w	8001718 <HAL_ADC_IRQHandler+0x140>
 80015ea:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f000 8092 	beq.w	8001718 <HAL_ADC_IRQHandler+0x140>
 80015f4:	4b89      	ldr	r3, [pc, #548]	; (800181c <HAL_ADC_IRQHandler+0x244>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015f6:	689d      	ldr	r5, [r3, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80015f8:	07b0      	lsls	r0, r6, #30
 80015fa:	f005 051f 	and.w	r5, r5, #31
 80015fe:	d502      	bpl.n	8001606 <HAL_ADC_IRQHandler+0x2e>
 8001600:	07b9      	lsls	r1, r7, #30
 8001602:	f100 80ad 	bmi.w	8001760 <HAL_ADC_IRQHandler+0x188>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001606:	0773      	lsls	r3, r6, #29
 8001608:	d57b      	bpl.n	8001702 <HAL_ADC_IRQHandler+0x12a>
 800160a:	0778      	lsls	r0, r7, #29
 800160c:	d579      	bpl.n	8001702 <HAL_ADC_IRQHandler+0x12a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800160e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001610:	06db      	lsls	r3, r3, #27
 8001612:	d403      	bmi.n	800161c <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001614:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	6623      	str	r3, [r4, #96]	; 0x60
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800161c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001624:	d11c      	bne.n	8001660 <HAL_ADC_IRQHandler+0x88>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001626:	4a7e      	ldr	r2, [pc, #504]	; (8001820 <HAL_ADC_IRQHandler+0x248>)
 8001628:	4293      	cmp	r3, r2
 800162a:	f000 80eb 	beq.w	8001804 <HAL_ADC_IRQHandler+0x22c>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800162e:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001630:	0490      	lsls	r0, r2, #18
 8001632:	d415      	bmi.n	8001660 <HAL_ADC_IRQHandler+0x88>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	0711      	lsls	r1, r2, #28
 8001638:	d512      	bpl.n	8001660 <HAL_ADC_IRQHandler+0x88>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	0752      	lsls	r2, r2, #29
 800163e:	f100 80fa 	bmi.w	8001836 <HAL_ADC_IRQHandler+0x25e>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	f022 020c 	bic.w	r2, r2, #12
 8001648:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800164a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800164c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001650:	6623      	str	r3, [r4, #96]	; 0x60
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001652:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001654:	04d8      	lsls	r0, r3, #19
 8001656:	d403      	bmi.n	8001660 <HAL_ADC_IRQHandler+0x88>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001658:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8001660:	4620      	mov	r0, r4
 8001662:	f7ff fbd7 	bl	8000e14 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	220c      	movs	r2, #12
 800166a:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800166c:	06b1      	lsls	r1, r6, #26
 800166e:	d54e      	bpl.n	800170e <HAL_ADC_IRQHandler+0x136>
 8001670:	06ba      	lsls	r2, r7, #26
 8001672:	d54c      	bpl.n	800170e <HAL_ADC_IRQHandler+0x136>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001674:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001676:	06d9      	lsls	r1, r3, #27
 8001678:	d403      	bmi.n	8001682 <HAL_ADC_IRQHandler+0xaa>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800167a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800167c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001680:	6623      	str	r3, [r4, #96]	; 0x60
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001682:	6823      	ldr	r3, [r4, #0]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001684:	4966      	ldr	r1, [pc, #408]	; (8001820 <HAL_ADC_IRQHandler+0x248>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001688:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800168a:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800168c:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8001690:	d074      	beq.n	800177c <HAL_ADC_IRQHandler+0x1a4>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001692:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001694:	b9d2      	cbnz	r2, 80016cc <HAL_ADC_IRQHandler+0xf4>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001696:	018a      	lsls	r2, r1, #6
 8001698:	f100 80ac 	bmi.w	80017f4 <HAL_ADC_IRQHandler+0x21c>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	0650      	lsls	r0, r2, #25
 80016a0:	d514      	bpl.n	80016cc <HAL_ADC_IRQHandler+0xf4>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80016a2:	0289      	lsls	r1, r1, #10
 80016a4:	d412      	bmi.n	80016cc <HAL_ADC_IRQHandler+0xf4>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	0712      	lsls	r2, r2, #28
 80016aa:	f100 80cf 	bmi.w	800184c <HAL_ADC_IRQHandler+0x274>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016b4:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016bc:	6623      	str	r3, [r4, #96]	; 0x60
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016c0:	05db      	lsls	r3, r3, #23
 80016c2:	d403      	bmi.n	80016cc <HAL_ADC_IRQHandler+0xf4>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016cc:	4620      	mov	r0, r4
 80016ce:	f000 ff43 	bl	8002558 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	2260      	movs	r2, #96	; 0x60
 80016d6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016d8:	0630      	lsls	r0, r6, #24
 80016da:	d501      	bpl.n	80016e0 <HAL_ADC_IRQHandler+0x108>
 80016dc:	0639      	lsls	r1, r7, #24
 80016de:	d461      	bmi.n	80017a4 <HAL_ADC_IRQHandler+0x1cc>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80016e0:	05f2      	lsls	r2, r6, #23
 80016e2:	d501      	bpl.n	80016e8 <HAL_ADC_IRQHandler+0x110>
 80016e4:	05fb      	lsls	r3, r7, #23
 80016e6:	d468      	bmi.n	80017ba <HAL_ADC_IRQHandler+0x1e2>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80016e8:	05b0      	lsls	r0, r6, #22
 80016ea:	d501      	bpl.n	80016f0 <HAL_ADC_IRQHandler+0x118>
 80016ec:	05b9      	lsls	r1, r7, #22
 80016ee:	d44d      	bmi.n	800178c <HAL_ADC_IRQHandler+0x1b4>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80016f0:	06f2      	lsls	r2, r6, #27
 80016f2:	d501      	bpl.n	80016f8 <HAL_ADC_IRQHandler+0x120>
 80016f4:	06fb      	lsls	r3, r7, #27
 80016f6:	d411      	bmi.n	800171c <HAL_ADC_IRQHandler+0x144>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80016f8:	0570      	lsls	r0, r6, #21
 80016fa:	d501      	bpl.n	8001700 <HAL_ADC_IRQHandler+0x128>
 80016fc:	0579      	lsls	r1, r7, #21
 80016fe:	d468      	bmi.n	80017d2 <HAL_ADC_IRQHandler+0x1fa>
}
 8001700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001702:	0731      	lsls	r1, r6, #28
 8001704:	d5b2      	bpl.n	800166c <HAL_ADC_IRQHandler+0x94>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001706:	073a      	lsls	r2, r7, #28
 8001708:	d481      	bmi.n	800160e <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800170a:	06b1      	lsls	r1, r6, #26
 800170c:	d4b0      	bmi.n	8001670 <HAL_ADC_IRQHandler+0x98>
 800170e:	0673      	lsls	r3, r6, #25
 8001710:	d5e2      	bpl.n	80016d8 <HAL_ADC_IRQHandler+0x100>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001712:	0678      	lsls	r0, r7, #25
 8001714:	d5e0      	bpl.n	80016d8 <HAL_ADC_IRQHandler+0x100>
 8001716:	e7ad      	b.n	8001674 <HAL_ADC_IRQHandler+0x9c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <HAL_ADC_IRQHandler+0x24c>)
 800171a:	e76c      	b.n	80015f6 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800171c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800171e:	b183      	cbz	r3, 8001742 <HAL_ADC_IRQHandler+0x16a>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001720:	6823      	ldr	r3, [r4, #0]
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001722:	2d00      	cmp	r5, #0
 8001724:	d073      	beq.n	800180e <HAL_ADC_IRQHandler+0x236>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001726:	4a3c      	ldr	r2, [pc, #240]	; (8001818 <HAL_ADC_IRQHandler+0x240>)
 8001728:	4293      	cmp	r3, r2
 800172a:	f000 808d 	beq.w	8001848 <HAL_ADC_IRQHandler+0x270>
 800172e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001732:	4293      	cmp	r3, r2
 8001734:	f000 8088 	beq.w	8001848 <HAL_ADC_IRQHandler+0x270>
 8001738:	4a38      	ldr	r2, [pc, #224]	; (800181c <HAL_ADC_IRQHandler+0x244>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800173a:	6892      	ldr	r2, [r2, #8]
 800173c:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8001740:	d00b      	beq.n	800175a <HAL_ADC_IRQHandler+0x182>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001742:	6e23      	ldr	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8001744:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174a:	6623      	str	r3, [r4, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800174c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	6663      	str	r3, [r4, #100]	; 0x64
      HAL_ADC_ErrorCallback(hadc);
 8001754:	f7ff ff3e 	bl	80015d4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	2210      	movs	r2, #16
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e7cb      	b.n	80016f8 <HAL_ADC_IRQHandler+0x120>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001760:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001762:	06da      	lsls	r2, r3, #27
 8001764:	d403      	bmi.n	800176e <HAL_ADC_IRQHandler+0x196>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001766:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800176c:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800176e:	4620      	mov	r0, r4
 8001770:	f000 fefa 	bl	8002568 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	2202      	movs	r2, #2
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e744      	b.n	8001606 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800177c:	1fa9      	subs	r1, r5, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800177e:	2901      	cmp	r1, #1
 8001780:	d987      	bls.n	8001692 <HAL_ADC_IRQHandler+0xba>
 8001782:	2d00      	cmp	r5, #0
 8001784:	d085      	beq.n	8001692 <HAL_ADC_IRQHandler+0xba>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001786:	4924      	ldr	r1, [pc, #144]	; (8001818 <HAL_ADC_IRQHandler+0x240>)
 8001788:	68c9      	ldr	r1, [r1, #12]
 800178a:	e783      	b.n	8001694 <HAL_ADC_IRQHandler+0xbc>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800178c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800178e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001794:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001796:	f000 fee5 	bl	8002564 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e7a5      	b.n	80016f0 <HAL_ADC_IRQHandler+0x118>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017a6:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017ae:	f7ff ff0f 	bl	80015d0 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e792      	b.n	80016e0 <HAL_ADC_IRQHandler+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017bc:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c2:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017c4:	f000 fecc 	bl	8002560 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e78a      	b.n	80016e8 <HAL_ADC_IRQHandler+0x110>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d8:	6822      	ldr	r2, [r4, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017da:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6623      	str	r3, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80017e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	6663      	str	r3, [r4, #100]	; 0x64
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017ea:	6011      	str	r1, [r2, #0]
}
 80017ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017f0:	f000 beb4 	b.w	800255c <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017f4:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80017f8:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80017fc:	4302      	orrs	r2, r0
 80017fe:	f47f af65 	bne.w	80016cc <HAL_ADC_IRQHandler+0xf4>
 8001802:	e74b      	b.n	800169c <HAL_ADC_IRQHandler+0xc4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001804:	2d09      	cmp	r5, #9
 8001806:	d90f      	bls.n	8001828 <HAL_ADC_IRQHandler+0x250>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001808:	4a03      	ldr	r2, [pc, #12]	; (8001818 <HAL_ADC_IRQHandler+0x240>)
 800180a:	68d2      	ldr	r2, [r2, #12]
 800180c:	e710      	b.n	8001630 <HAL_ADC_IRQHandler+0x58>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	0795      	lsls	r5, r2, #30
 8001812:	d0a2      	beq.n	800175a <HAL_ADC_IRQHandler+0x182>
 8001814:	e795      	b.n	8001742 <HAL_ADC_IRQHandler+0x16a>
 8001816:	bf00      	nop
 8001818:	40022000 	.word	0x40022000
 800181c:	58026300 	.word	0x58026300
 8001820:	40022100 	.word	0x40022100
 8001824:	40022300 	.word	0x40022300
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001828:	f240 2221 	movw	r2, #545	; 0x221
 800182c:	40ea      	lsrs	r2, r5
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800182e:	07d2      	lsls	r2, r2, #31
 8001830:	f53f aefd 	bmi.w	800162e <HAL_ADC_IRQHandler+0x56>
 8001834:	e7e8      	b.n	8001808 <HAL_ADC_IRQHandler+0x230>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001836:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6663      	str	r3, [r4, #100]	; 0x64
 8001846:	e70b      	b.n	8001660 <HAL_ADC_IRQHandler+0x88>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001848:	4a05      	ldr	r2, [pc, #20]	; (8001860 <HAL_ADC_IRQHandler+0x288>)
 800184a:	e776      	b.n	800173a <HAL_ADC_IRQHandler+0x162>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	6623      	str	r3, [r4, #96]	; 0x60
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001854:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6663      	str	r3, [r4, #100]	; 0x64
 800185c:	e736      	b.n	80016cc <HAL_ADC_IRQHandler+0xf4>
 800185e:	bf00      	nop
 8001860:	40022300 	.word	0x40022300

08001864 <ADC_DMAConvCplt>:
{
 8001864:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001866:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001868:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800186a:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800186e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001870:	d11d      	bne.n	80018ae <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001872:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001878:	661a      	str	r2, [r3, #96]	; 0x60
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800187a:	680a      	ldr	r2, [r1, #0]
 800187c:	f012 0f08 	tst.w	r2, #8
 8001880:	68ca      	ldr	r2, [r1, #12]
 8001882:	d01b      	beq.n	80018bc <ADC_DMAConvCplt+0x58>
 8001884:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001888:	d10d      	bne.n	80018a6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800188a:	68ca      	ldr	r2, [r1, #12]
 800188c:	0494      	lsls	r4, r2, #18
 800188e:	d40a      	bmi.n	80018a6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001890:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001892:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001896:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800189a:	04d1      	lsls	r1, r2, #19
 800189c:	d403      	bmi.n	80018a6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800189e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	661a      	str	r2, [r3, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fab4 	bl	8000e14 <HAL_ADC_ConvCpltCallback>
}
 80018ac:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018ae:	06d2      	lsls	r2, r2, #27
 80018b0:	d40a      	bmi.n	80018c8 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80018bc:	0790      	lsls	r0, r2, #30
 80018be:	d0e7      	beq.n	8001890 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff faa7 	bl	8000e14 <HAL_ADC_ConvCpltCallback>
 80018c6:	e7f1      	b.n	80018ac <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fe83 	bl	80015d4 <HAL_ADC_ErrorCallback>
}
 80018ce:	bd10      	pop	{r4, pc}

080018d0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018d0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018d2:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018d4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80018d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018da:	6603      	str	r3, [r0, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6643      	str	r3, [r0, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018e4:	f7ff fe76 	bl	80015d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018e8:	bd08      	pop	{r3, pc}
 80018ea:	bf00      	nop

080018ec <HAL_ADC_ConfigChannel>:
{
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80018ee:	2200      	movs	r2, #0
{
 80018f0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80018f2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80018f4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 80018f8:	2a01      	cmp	r2, #1
 80018fa:	f000 8113 	beq.w	8001b24 <HAL_ADC_ConfigChannel+0x238>
 80018fe:	4603      	mov	r3, r0
 8001900:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001902:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001904:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001908:	6894      	ldr	r4, [r2, #8]
 800190a:	0764      	lsls	r4, r4, #29
 800190c:	d508      	bpl.n	8001920 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800190e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001910:	f042 0220 	orr.w	r2, r2, #32
 8001914:	661a      	str	r2, [r3, #96]	; 0x60
  __HAL_UNLOCK(hadc);
 8001916:	2200      	movs	r2, #0
 8001918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800191c:	b003      	add	sp, #12
 800191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hadc->Instance != ADC3)
 8001920:	4cad      	ldr	r4, [pc, #692]	; (8001bd8 <HAL_ADC_ConfigChannel+0x2ec>)
 8001922:	42a2      	cmp	r2, r4
 8001924:	d00f      	beq.n	8001946 <HAL_ADC_ConfigChannel+0x5a>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001926:	680c      	ldr	r4, [r1, #0]
 8001928:	f3c4 0513 	ubfx	r5, r4, #0, #20
 800192c:	2d00      	cmp	r5, #0
 800192e:	f000 80e0 	beq.w	8001af2 <HAL_ADC_ConfigChannel+0x206>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001936:	b114      	cbz	r4, 800193e <HAL_ADC_ConfigChannel+0x52>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001938:	fab4 f484 	clz	r4, r4
 800193c:	40a0      	lsls	r0, r4
 800193e:	69d4      	ldr	r4, [r2, #28]
 8001940:	4320      	orrs	r0, r4
 8001942:	61d0      	str	r0, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001948:	f102 0030 	add.w	r0, r2, #48	; 0x30
  MODIFY_REG(*preg,
 800194c:	251f      	movs	r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800194e:	09a2      	lsrs	r2, r4, #6
  MODIFY_REG(*preg,
 8001950:	f004 0c1f 	and.w	ip, r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001954:	f002 040c 	and.w	r4, r2, #12
  MODIFY_REG(*preg,
 8001958:	680a      	ldr	r2, [r1, #0]
 800195a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800195e:	fa02 f20c 	lsl.w	r2, r2, ip
 8001962:	fa05 fc0c 	lsl.w	ip, r5, ip
 8001966:	5825      	ldr	r5, [r4, r0]
 8001968:	ea25 0c0c 	bic.w	ip, r5, ip
 800196c:	ea42 020c 	orr.w	r2, r2, ip
 8001970:	5022      	str	r2, [r4, r0]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001972:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001974:	6890      	ldr	r0, [r2, #8]
 8001976:	0747      	lsls	r7, r0, #29
 8001978:	d46c      	bmi.n	8001a54 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800197a:	6895      	ldr	r5, [r2, #8]
 800197c:	f015 0508 	ands.w	r5, r5, #8
 8001980:	d163      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x15e>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001982:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 8001984:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001986:	3214      	adds	r2, #20
      if (hadc->Instance == ADC3)
 8001988:	4e93      	ldr	r6, [pc, #588]	; (8001bd8 <HAL_ADC_ConfigChannel+0x2ec>)
 800198a:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 800198e:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001992:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8001996:	fa00 fe04 	lsl.w	lr, r0, r4
 800199a:	6888      	ldr	r0, [r1, #8]
 800199c:	fa00 f404 	lsl.w	r4, r0, r4
 80019a0:	f85c 0002 	ldr.w	r0, [ip, r2]
 80019a4:	ea20 000e 	bic.w	r0, r0, lr
 80019a8:	4320      	orrs	r0, r4
 80019aa:	f84c 0002 	str.w	r0, [ip, r2]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	42b0      	cmp	r0, r6
 80019b2:	4602      	mov	r2, r0
 80019b4:	f000 80a1 	beq.w	8001afa <HAL_ADC_ConfigChannel+0x20e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019b8:	4888      	ldr	r0, [pc, #544]	; (8001bdc <HAL_ADC_ConfigChannel+0x2f0>)
 80019ba:	6800      	ldr	r0, [r0, #0]
 80019bc:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80019c0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80019c4:	f000 80cf 	beq.w	8001b66 <HAL_ADC_ConfigChannel+0x27a>
 80019c8:	68d0      	ldr	r0, [r2, #12]
 80019ca:	68d4      	ldr	r4, [r2, #12]
 80019cc:	06c6      	lsls	r6, r0, #27
 80019ce:	f100 80d2 	bmi.w	8001b76 <HAL_ADC_ConfigChannel+0x28a>
 80019d2:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80019d6:	6948      	ldr	r0, [r1, #20]
 80019d8:	0064      	lsls	r4, r4, #1
 80019da:	fa00 f404 	lsl.w	r4, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019de:	690e      	ldr	r6, [r1, #16]
 80019e0:	2e04      	cmp	r6, #4
 80019e2:	f000 80a2 	beq.w	8001b2a <HAL_ADC_ConfigChannel+0x23e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e6:	3260      	adds	r2, #96	; 0x60
    MODIFY_REG(*preg,
 80019e8:	6808      	ldr	r0, [r1, #0]
 80019ea:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80019ee:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80019f2:	f007 4c00 	and.w	ip, r7, #2147483648	; 0x80000000
 80019f6:	ea40 000c 	orr.w	r0, r0, ip
 80019fa:	4320      	orrs	r0, r4
 80019fc:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        if (hadc->Instance == ADC3)
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	4a75      	ldr	r2, [pc, #468]	; (8001bd8 <HAL_ADC_ConfigChannel+0x2ec>)
 8001a04:	4290      	cmp	r0, r2
 8001a06:	f000 8153 	beq.w	8001cb0 <HAL_ADC_ConfigChannel+0x3c4>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001a0a:	690c      	ldr	r4, [r1, #16]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0c:	3060      	adds	r0, #96	; 0x60
 8001a0e:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
 8001a12:	2a01      	cmp	r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a14:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8001a18:	bf0c      	ite	eq
 8001a1a:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8001a1e:	2600      	movne	r6, #0
 8001a20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a24:	4332      	orrs	r2, r6
 8001a26:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001a2a:	7e0c      	ldrb	r4, [r1, #24]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	2c01      	cmp	r4, #1
 8001a30:	690a      	ldr	r2, [r1, #16]
 8001a32:	d104      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a34:	f002 021f 	and.w	r2, r2, #31
 8001a38:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8001a3c:	4095      	lsls	r5, r2
 8001a3e:	6902      	ldr	r2, [r0, #16]
 8001a40:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001a44:	4315      	orrs	r5, r2
 8001a46:	6105      	str	r5, [r0, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a48:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a4a:	6890      	ldr	r0, [r2, #8]
 8001a4c:	07c0      	lsls	r0, r0, #31
 8001a4e:	d505      	bpl.n	8001a5c <HAL_ADC_ConfigChannel+0x170>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a50:	2000      	movs	r0, #0
 8001a52:	e760      	b.n	8001916 <HAL_ADC_ConfigChannel+0x2a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a54:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a56:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a58:	07c0      	lsls	r0, r0, #31
 8001a5a:	d4f9      	bmi.n	8001a50 <HAL_ADC_ConfigChannel+0x164>
  if (ADCx == ADC3)
 8001a5c:	4c5e      	ldr	r4, [pc, #376]	; (8001bd8 <HAL_ADC_ConfigChannel+0x2ec>)
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a5e:	6808      	ldr	r0, [r1, #0]
 8001a60:	42a2      	cmp	r2, r4
 8001a62:	68cd      	ldr	r5, [r1, #12]
 8001a64:	f000 813e 	beq.w	8001ce4 <HAL_ADC_ConfigChannel+0x3f8>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001a68:	f005 0418 	and.w	r4, r5, #24
 8001a6c:	4d5c      	ldr	r5, [pc, #368]	; (8001be0 <HAL_ADC_ConfigChannel+0x2f4>)
 8001a6e:	40e5      	lsrs	r5, r4
 8001a70:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
 8001a74:	4005      	ands	r5, r0
 8001a76:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8001a7a:	ea24 0000 	bic.w	r0, r4, r0
 8001a7e:	4328      	orrs	r0, r5
 8001a80:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a84:	4a57      	ldr	r2, [pc, #348]	; (8001be4 <HAL_ADC_ConfigChannel+0x2f8>)
 8001a86:	68c8      	ldr	r0, [r1, #12]
 8001a88:	4290      	cmp	r0, r2
 8001a8a:	f000 80e8 	beq.w	8001c5e <HAL_ADC_ConfigChannel+0x372>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a8e:	6808      	ldr	r0, [r1, #0]
 8001a90:	2800      	cmp	r0, #0
 8001a92:	dadd      	bge.n	8001a50 <HAL_ADC_ConfigChannel+0x164>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a94:	681c      	ldr	r4, [r3, #0]
 8001a96:	4a54      	ldr	r2, [pc, #336]	; (8001be8 <HAL_ADC_ConfigChannel+0x2fc>)
 8001a98:	4294      	cmp	r4, r2
 8001a9a:	f000 80cb 	beq.w	8001c34 <HAL_ADC_ConfigChannel+0x348>
 8001a9e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001aa2:	4294      	cmp	r4, r2
 8001aa4:	f000 80c6 	beq.w	8001c34 <HAL_ADC_ConfigChannel+0x348>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aa8:	4d50      	ldr	r5, [pc, #320]	; (8001bec <HAL_ADC_ConfigChannel+0x300>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aaa:	494b      	ldr	r1, [pc, #300]	; (8001bd8 <HAL_ADC_ConfigChannel+0x2ec>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aac:	68aa      	ldr	r2, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aae:	6889      	ldr	r1, [r1, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ab0:	f002 76e0 	and.w	r6, r2, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ab4:	43c9      	mvns	r1, r1
 8001ab6:	f001 0101 	and.w	r1, r1, #1
 8001aba:	2900      	cmp	r1, #0
 8001abc:	f000 8122 	beq.w	8001d04 <HAL_ADC_ConfigChannel+0x418>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ac0:	494b      	ldr	r1, [pc, #300]	; (8001bf0 <HAL_ADC_ConfigChannel+0x304>)
 8001ac2:	4288      	cmp	r0, r1
 8001ac4:	f000 81cc 	beq.w	8001e60 <HAL_ADC_ConfigChannel+0x574>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ac8:	494a      	ldr	r1, [pc, #296]	; (8001bf4 <HAL_ADC_ConfigChannel+0x308>)
 8001aca:	4288      	cmp	r0, r1
 8001acc:	f000 81eb 	beq.w	8001ea6 <HAL_ADC_ConfigChannel+0x5ba>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ad0:	4949      	ldr	r1, [pc, #292]	; (8001bf8 <HAL_ADC_ConfigChannel+0x30c>)
 8001ad2:	4288      	cmp	r0, r1
 8001ad4:	d1bc      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x164>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ad6:	0257      	lsls	r7, r2, #9
 8001ad8:	d4ba      	bmi.n	8001a50 <HAL_ADC_ConfigChannel+0x164>
 8001ada:	4a3f      	ldr	r2, [pc, #252]	; (8001bd8 <HAL_ADC_ConfigChannel+0x2ec>)
 8001adc:	4294      	cmp	r4, r2
 8001ade:	d1b7      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x164>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ae0:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001ae8:	4332      	orrs	r2, r6
 8001aea:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001aee:	60aa      	str	r2, [r5, #8]
}
 8001af0:	e711      	b.n	8001916 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001af2:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001af6:	40a0      	lsls	r0, r4
 8001af8:	e721      	b.n	800193e <HAL_ADC_ConfigChannel+0x52>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001afa:	690c      	ldr	r4, [r1, #16]
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001afc:	68c2      	ldr	r2, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001afe:	2c04      	cmp	r4, #4
 8001b00:	d040      	beq.n	8001b84 <HAL_ADC_ConfigChannel+0x298>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b02:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001b06:	0050      	lsls	r0, r2, #1
 8001b08:	694a      	ldr	r2, [r1, #20]
 8001b0a:	4082      	lsls	r2, r0
    MODIFY_REG(*preg,
 8001b0c:	6808      	ldr	r0, [r1, #0]
 8001b0e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001b12:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b14:	4839      	ldr	r0, [pc, #228]	; (8001bfc <HAL_ADC_ConfigChannel+0x310>)
    MODIFY_REG(*preg,
 8001b16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b1a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8001b1e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001b22:	e76d      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x114>
  __HAL_LOCK(hadc);
 8001b24:	2002      	movs	r0, #2
}
 8001b26:	b003      	add	sp, #12
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b2a:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001b2c:	680d      	ldr	r5, [r1, #0]
 8001b2e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001b32:	06a8      	lsls	r0, r5, #26
 8001b34:	ebb4 6f85 	cmp.w	r4, r5, lsl #26
 8001b38:	d074      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0x338>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b3a:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001b3c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001b40:	4284      	cmp	r4, r0
 8001b42:	d067      	beq.n	8001c14 <HAL_ADC_ConfigChannel+0x328>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b44:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8001b46:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001b4a:	4284      	cmp	r4, r0
 8001b4c:	d05a      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x318>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b4e:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 8001b50:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001b54:	4284      	cmp	r4, r0
 8001b56:	f47f af78 	bne.w	8001a4a <HAL_ADC_ConfigChannel+0x15e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001b5a:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001b5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001b60:	66d0      	str	r0, [r2, #108]	; 0x6c
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	e771      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b66:	68d4      	ldr	r4, [r2, #12]
 8001b68:	6948      	ldr	r0, [r1, #20]
 8001b6a:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8001b6e:	0064      	lsls	r4, r4, #1
 8001b70:	fa00 f404 	lsl.w	r4, r0, r4
 8001b74:	e733      	b.n	80019de <HAL_ADC_ConfigChannel+0xf2>
 8001b76:	0864      	lsrs	r4, r4, #1
 8001b78:	6948      	ldr	r0, [r1, #20]
 8001b7a:	f004 0408 	and.w	r4, r4, #8
 8001b7e:	fa00 f404 	lsl.w	r4, r0, r4
 8001b82:	e72c      	b.n	80019de <HAL_ADC_ConfigChannel+0xf2>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b84:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b86:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8001b88:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8001b8c:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8001b8e:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	f040 8134 	bne.w	8001e00 <HAL_ADC_ConfigChannel+0x514>
 8001b98:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001b9c:	4294      	cmp	r4, r2
 8001b9e:	f000 81b5 	beq.w	8001f0c <HAL_ADC_ConfigChannel+0x620>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba2:	4d16      	ldr	r5, [pc, #88]	; (8001bfc <HAL_ADC_ConfigChannel+0x310>)
 8001ba4:	4e16      	ldr	r6, [pc, #88]	; (8001c00 <HAL_ADC_ConfigChannel+0x314>)
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ba6:	686c      	ldr	r4, [r5, #4]
 8001ba8:	686c      	ldr	r4, [r5, #4]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001baa:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001bae:	42a2      	cmp	r2, r4
 8001bb0:	f000 81c5 	beq.w	8001f3e <HAL_ADC_ConfigChannel+0x652>
 8001bb4:	68ac      	ldr	r4, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb6:	f105 0608 	add.w	r6, r5, #8
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bba:	68ac      	ldr	r4, [r5, #8]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bbc:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001bc0:	4294      	cmp	r4, r2
 8001bc2:	f000 8180 	beq.w	8001ec6 <HAL_ADC_ConfigChannel+0x5da>
 8001bc6:	68ec      	ldr	r4, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc8:	350c      	adds	r5, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bca:	682c      	ldr	r4, [r5, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bcc:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001bd0:	42a2      	cmp	r2, r4
 8001bd2:	d03e      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0x366>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	e738      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x15e>
 8001bd8:	58026000 	.word	0x58026000
 8001bdc:	5c001000 	.word	0x5c001000
 8001be0:	000fffff 	.word	0x000fffff
 8001be4:	47ff0000 	.word	0x47ff0000
 8001be8:	40022000 	.word	0x40022000
 8001bec:	58026300 	.word	0x58026300
 8001bf0:	c7520000 	.word	0xc7520000
 8001bf4:	c3210000 	.word	0xc3210000
 8001bf8:	cb840000 	.word	0xcb840000
 8001bfc:	58026060 	.word	0x58026060
 8001c00:	58026064 	.word	0x58026064
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c04:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001c06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c0a:	6690      	str	r0, [r2, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c0c:	6808      	ldr	r0, [r1, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	0680      	lsls	r0, r0, #26
 8001c12:	e79c      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x262>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001c14:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001c16:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c1a:	6650      	str	r0, [r2, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c1c:	6808      	ldr	r0, [r1, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	0680      	lsls	r0, r0, #26
 8001c22:	e78f      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x258>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c24:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001c26:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c2a:	6610      	str	r0, [r2, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c2c:	6808      	ldr	r0, [r1, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	0680      	lsls	r0, r0, #26
 8001c32:	e782      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x24e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c34:	49ad      	ldr	r1, [pc, #692]	; (8001eec <HAL_ADC_ConfigChannel+0x600>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c36:	4dae      	ldr	r5, [pc, #696]	; (8001ef0 <HAL_ADC_ConfigChannel+0x604>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c38:	f501 7180 	add.w	r1, r1, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c3c:	68aa      	ldr	r2, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c3e:	f851 6cf8 	ldr.w	r6, [r1, #-248]
 8001c42:	6889      	ldr	r1, [r1, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c44:	4331      	orrs	r1, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c46:	f002 76e0 	and.w	r6, r2, #29360128	; 0x1c00000
 8001c4a:	43c9      	mvns	r1, r1
 8001c4c:	f001 0101 	and.w	r1, r1, #1
 8001c50:	e733      	b.n	8001aba <HAL_ADC_ConfigChannel+0x1ce>
    MODIFY_REG(*preg,
 8001c52:	682a      	ldr	r2, [r5, #0]
 8001c54:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c58:	602a      	str	r2, [r5, #0]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	e6f5      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c5e:	680e      	ldr	r6, [r1, #0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c60:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c62:	f3c6 0213 	ubfx	r2, r6, #0, #20
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d152      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x424>
 8001c6a:	0eb0      	lsrs	r0, r6, #26
 8001c6c:	3001      	adds	r0, #1
 8001c6e:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c72:	2e09      	cmp	r6, #9
 8001c74:	f200 808e 	bhi.w	8001d94 <HAL_ADC_ConfigChannel+0x4a8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c78:	0685      	lsls	r5, r0, #26
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001c80:	40b2      	lsls	r2, r6
 8001c82:	4315      	orrs	r5, r2
 8001c84:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001c88:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c8a:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c8c:	0dd5      	lsrs	r5, r2, #23
 8001c8e:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8001c90:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8001c94:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c96:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001c9a:	fa00 f602 	lsl.w	r6, r0, r2
 8001c9e:	5928      	ldr	r0, [r5, r4]
 8001ca0:	ea20 0006 	bic.w	r0, r0, r6
 8001ca4:	688e      	ldr	r6, [r1, #8]
 8001ca6:	fa06 f202 	lsl.w	r2, r6, r2
 8001caa:	4302      	orrs	r2, r0
 8001cac:	512a      	str	r2, [r5, r4]
}
 8001cae:	e6ee      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x1a2>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb0:	4f90      	ldr	r7, [pc, #576]	; (8001ef4 <HAL_ADC_ConfigChannel+0x608>)
 8001cb2:	690c      	ldr	r4, [r1, #16]
    MODIFY_REG(*preg,
 8001cb4:	69ce      	ldr	r6, [r1, #28]
 8001cb6:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 8001cba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001cbe:	4332      	orrs	r2, r6
 8001cc0:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001cc4:	f891 2020 	ldrb.w	r2, [r1, #32]
 8001cc8:	2a01      	cmp	r2, #1
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	bf08      	it	eq
 8001cce:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
  if (ADCx == ADC3)
 8001cd2:	4282      	cmp	r2, r0
 8001cd4:	d054      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0x494>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cd6:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd8:	07c0      	lsls	r0, r0, #31
 8001cda:	f53f aeb9 	bmi.w	8001a50 <HAL_ADC_ConfigChannel+0x164>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cde:	6808      	ldr	r0, [r1, #0]
 8001ce0:	68cd      	ldr	r5, [r1, #12]
  if (ADCx == ADC3)
 8001ce2:	e6c1      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x17c>
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001ce4:	4c84      	ldr	r4, [pc, #528]	; (8001ef8 <HAL_ADC_ConfigChannel+0x60c>)
 8001ce6:	f005 0518 	and.w	r5, r5, #24
 8001cea:	fa24 f505 	lsr.w	r5, r4, r5
 8001cee:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8001cf2:	4005      	ands	r5, r0
 8001cf4:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8001cf8:	ea24 0000 	bic.w	r0, r4, r0
 8001cfc:	4328      	orrs	r0, r5
 8001cfe:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8001d02:	e6bf      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x198>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          tmp_hal_status = HAL_ERROR;
 8001d06:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d08:	f042 0220 	orr.w	r2, r2, #32
 8001d0c:	661a      	str	r2, [r3, #96]	; 0x60
          tmp_hal_status = HAL_ERROR;
 8001d0e:	e602      	b.n	8001916 <HAL_ADC_ConfigChannel+0x2a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	fa96 f2a6 	rbit	r2, r6
  if (value == 0U)
 8001d14:	2a00      	cmp	r2, #0
 8001d16:	d04b      	beq.n	8001db0 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8001d18:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d1c:	3201      	adds	r2, #1
 8001d1e:	f002 021f 	and.w	r2, r2, #31
 8001d22:	2a09      	cmp	r2, #9
 8001d24:	d944      	bls.n	8001db0 <HAL_ADC_ConfigChannel+0x4c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	fa96 f2a6 	rbit	r2, r6
  if (value == 0U)
 8001d2a:	2a00      	cmp	r2, #0
 8001d2c:	f000 8121 	beq.w	8001f72 <HAL_ADC_ConfigChannel+0x686>
  return __builtin_clz(value);
 8001d30:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d34:	3201      	adds	r2, #1
 8001d36:	0692      	lsls	r2, r2, #26
 8001d38:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	fa96 f0a6 	rbit	r0, r6
  if (value == 0U)
 8001d40:	2800      	cmp	r0, #0
 8001d42:	f000 8114 	beq.w	8001f6e <HAL_ADC_ConfigChannel+0x682>
  return __builtin_clz(value);
 8001d46:	fab0 f080 	clz	r0, r0
 8001d4a:	2501      	movs	r5, #1
 8001d4c:	3001      	adds	r0, #1
 8001d4e:	f000 001f 	and.w	r0, r0, #31
 8001d52:	fa05 f000 	lsl.w	r0, r5, r0
 8001d56:	4310      	orrs	r0, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	fa96 f6a6 	rbit	r6, r6
  if (value == 0U)
 8001d5c:	2e00      	cmp	r6, #0
 8001d5e:	f000 8104 	beq.w	8001f6a <HAL_ADC_ConfigChannel+0x67e>
  return __builtin_clz(value);
 8001d62:	fab6 f686 	clz	r6, r6
 8001d66:	1c72      	adds	r2, r6, #1
 8001d68:	f06f 061d 	mvn.w	r6, #29
 8001d6c:	f002 051f 	and.w	r5, r2, #31
 8001d70:	2203      	movs	r2, #3
 8001d72:	fb12 6205 	smlabb	r2, r2, r5, r6
 8001d76:	0512      	lsls	r2, r2, #20
 8001d78:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d7c:	4302      	orrs	r2, r0
 8001d7e:	e785      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x3a0>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d80:	6908      	ldr	r0, [r1, #16]
    MODIFY_REG(*preg,
 8001d82:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
 8001d86:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001d8a:	4315      	orrs	r5, r2
 8001d8c:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	e65a      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d94:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001d98:	2501      	movs	r5, #1
 8001d9a:	0680      	lsls	r0, r0, #26
 8001d9c:	3a1e      	subs	r2, #30
 8001d9e:	fa05 f606 	lsl.w	r6, r5, r6
 8001da2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001da6:	0512      	lsls	r2, r2, #20
 8001da8:	4330      	orrs	r0, r6
 8001daa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001dae:	e7e5      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x490>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	fa96 f2a6 	rbit	r2, r6
  if (value == 0U)
 8001db4:	2a00      	cmp	r2, #0
 8001db6:	f000 80e4 	beq.w	8001f82 <HAL_ADC_ConfigChannel+0x696>
  return __builtin_clz(value);
 8001dba:	fab2 f282 	clz	r2, r2
 8001dbe:	3201      	adds	r2, #1
 8001dc0:	0692      	lsls	r2, r2, #26
 8001dc2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	fa96 f0a6 	rbit	r0, r6
  if (value == 0U)
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	f000 80d7 	beq.w	8001f7e <HAL_ADC_ConfigChannel+0x692>
  return __builtin_clz(value);
 8001dd0:	fab0 f080 	clz	r0, r0
 8001dd4:	2501      	movs	r5, #1
 8001dd6:	3001      	adds	r0, #1
 8001dd8:	f000 001f 	and.w	r0, r0, #31
 8001ddc:	fa05 f000 	lsl.w	r0, r5, r0
 8001de0:	ea42 0500 	orr.w	r5, r2, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	fa96 f2a6 	rbit	r2, r6
  if (value == 0U)
 8001de8:	2a00      	cmp	r2, #0
 8001dea:	f000 80c5 	beq.w	8001f78 <HAL_ADC_ConfigChannel+0x68c>
  return __builtin_clz(value);
 8001dee:	fab2 f282 	clz	r2, r2
 8001df2:	3201      	adds	r2, #1
 8001df4:	f002 021f 	and.w	r2, r2, #31
 8001df8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001dfc:	0512      	lsls	r2, r2, #20
 8001dfe:	e744      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x39e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e04:	b11d      	cbz	r5, 8001e0e <HAL_ADC_ConfigChannel+0x522>
  return __builtin_clz(value);
 8001e06:	fab5 f585 	clz	r5, r5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e0a:	42ac      	cmp	r4, r5
 8001e0c:	d07e      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x620>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0e:	4c39      	ldr	r4, [pc, #228]	; (8001ef4 <HAL_ADC_ConfigChannel+0x608>)
 8001e10:	4e3a      	ldr	r6, [pc, #232]	; (8001efc <HAL_ADC_ConfigChannel+0x610>)
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e12:	6865      	ldr	r5, [r4, #4]
 8001e14:	6864      	ldr	r4, [r4, #4]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e16:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e1e:	b125      	cbz	r5, 8001e2a <HAL_ADC_ConfigChannel+0x53e>
  return __builtin_clz(value);
 8001e20:	fab5 f585 	clz	r5, r5
 8001e24:	42ac      	cmp	r4, r5
 8001e26:	f000 808a 	beq.w	8001f3e <HAL_ADC_ConfigChannel+0x652>
 8001e2a:	6e84      	ldr	r4, [r0, #104]	; 0x68
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2c:	f100 0668 	add.w	r6, r0, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e30:	6e84      	ldr	r4, [r0, #104]	; 0x68
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e32:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e3a:	b11d      	cbz	r5, 8001e44 <HAL_ADC_ConfigChannel+0x558>
  return __builtin_clz(value);
 8001e3c:	fab5 f585 	clz	r5, r5
 8001e40:	42ac      	cmp	r4, r5
 8001e42:	d040      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0x5da>
 8001e44:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e46:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e4a:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e4c:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	f43f aebd 	beq.w	8001bd4 <HAL_ADC_ConfigChannel+0x2e8>
  return __builtin_clz(value);
 8001e5a:	fab2 f282 	clz	r2, r2
 8001e5e:	e6b7      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x2e4>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e60:	0212      	lsls	r2, r2, #8
 8001e62:	f53f adf5 	bmi.w	8001a50 <HAL_ADC_ConfigChannel+0x164>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e66:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <HAL_ADC_ConfigChannel+0x614>)
 8001e68:	4294      	cmp	r4, r2
 8001e6a:	f47f adf1 	bne.w	8001a50 <HAL_ADC_ConfigChannel+0x164>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e6e:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <HAL_ADC_ConfigChannel+0x618>)
 8001e70:	4825      	ldr	r0, [pc, #148]	; (8001f08 <HAL_ADC_ConfigChannel+0x61c>)
 8001e72:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e74:	68a9      	ldr	r1, [r5, #8]
 8001e76:	0992      	lsrs	r2, r2, #6
 8001e78:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001e7c:	fba0 0202 	umull	r0, r2, r0, r2
 8001e80:	4331      	orrs	r1, r6
 8001e82:	0992      	lsrs	r2, r2, #6
 8001e84:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001e88:	3201      	adds	r2, #1
 8001e8a:	60a9      	str	r1, [r5, #8]
 8001e8c:	0052      	lsls	r2, r2, #1
 8001e8e:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001e90:	9a01      	ldr	r2, [sp, #4]
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	f43f addc 	beq.w	8001a50 <HAL_ADC_ConfigChannel+0x164>
                wait_loop_index--;
 8001e98:	9a01      	ldr	r2, [sp, #4]
 8001e9a:	3a01      	subs	r2, #1
 8001e9c:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001e9e:	9a01      	ldr	r2, [sp, #4]
 8001ea0:	2a00      	cmp	r2, #0
 8001ea2:	d1f9      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x5ac>
 8001ea4:	e5d4      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x164>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ea6:	f012 7080 	ands.w	r0, r2, #16777216	; 0x1000000
 8001eaa:	f47f add1 	bne.w	8001a50 <HAL_ADC_ConfigChannel+0x164>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eae:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <HAL_ADC_ConfigChannel+0x614>)
 8001eb0:	4294      	cmp	r4, r2
 8001eb2:	f47f adcd 	bne.w	8001a50 <HAL_ADC_ConfigChannel+0x164>
 8001eb6:	68aa      	ldr	r2, [r5, #8]
 8001eb8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001ebc:	4332      	orrs	r2, r6
 8001ebe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001ec2:	60aa      	str	r2, [r5, #8]
}
 8001ec4:	e527      	b.n	8001916 <HAL_ADC_ConfigChannel+0x2a>
    MODIFY_REG(*preg,
 8001ec6:	6832      	ldr	r2, [r6, #0]
 8001ec8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ecc:	6032      	str	r2, [r6, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ece:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ed0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed2:	f100 056c 	add.w	r5, r0, #108	; 0x6c
 8001ed6:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ed8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8001eda:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8001ede:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001ee2:	2e00      	cmp	r6, #0
 8001ee4:	d1b4      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x564>
 8001ee6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001eea:	e671      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x2e4>
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	40022300 	.word	0x40022300
 8001ef4:	58026060 	.word	0x58026060
 8001ef8:	000fffff 	.word	0x000fffff
 8001efc:	58026064 	.word	0x58026064
 8001f00:	58026000 	.word	0x58026000
 8001f04:	24000004 	.word	0x24000004
 8001f08:	053e2d63 	.word	0x053e2d63
    MODIFY_REG(*preg,
 8001f0c:	481e      	ldr	r0, [pc, #120]	; (8001f88 <HAL_ADC_ConfigChannel+0x69c>)
 8001f0e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001f10:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f14:	6602      	str	r2, [r0, #96]	; 0x60
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f16:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f18:	6e42      	ldr	r2, [r0, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1a:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8001f1e:	680a      	ldr	r2, [r1, #0]
 8001f20:	f100 0664 	add.w	r6, r0, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f24:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8001f26:	f3c2 0713 	ubfx	r7, r2, #0, #20
 8001f2a:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001f2e:	2f00      	cmp	r7, #0
 8001f30:	f47f af73 	bne.w	8001e1a <HAL_ADC_ConfigChannel+0x52e>
 8001f34:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001f38:	4294      	cmp	r4, r2
 8001f3a:	f47f ae3b 	bne.w	8001bb4 <HAL_ADC_ConfigChannel+0x2c8>
    MODIFY_REG(*preg,
 8001f3e:	6832      	ldr	r2, [r6, #0]
 8001f40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f44:	6032      	str	r2, [r6, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f46:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f48:	6e82      	ldr	r2, [r0, #104]	; 0x68
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4a:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8001f4e:	680a      	ldr	r2, [r1, #0]
 8001f50:	f100 0668 	add.w	r6, r0, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f54:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8001f56:	f3c2 0713 	ubfx	r7, r2, #0, #20
 8001f5a:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001f5e:	2f00      	cmp	r7, #0
 8001f60:	f47f af69 	bne.w	8001e36 <HAL_ADC_ConfigChannel+0x54a>
 8001f64:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001f68:	e62a      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x2d4>
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_ADC_ConfigChannel+0x6a0>)
 8001f6c:	e706      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x490>
 8001f6e:	2002      	movs	r0, #2
 8001f70:	e6f1      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x46a>
 8001f72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f76:	e6e1      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x450>
 8001f78:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001f7c:	e685      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x39e>
 8001f7e:	2002      	movs	r0, #2
 8001f80:	e72e      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x4f4>
 8001f82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f86:	e71e      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x4da>
 8001f88:	58026000 	.word	0x58026000
 8001f8c:	fe500000 	.word	0xfe500000

08001f90 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f90:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	07d1      	lsls	r1, r2, #31
 8001f96:	d501      	bpl.n	8001f9c <ADC_Enable+0xc>
  return HAL_OK;
 8001f98:	2000      	movs	r0, #0
}
 8001f9a:	4770      	bx	lr
{
 8001f9c:	b570      	push	{r4, r5, r6, lr}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f9e:	4a21      	ldr	r2, [pc, #132]	; (8002024 <ADC_Enable+0x94>)
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	6899      	ldr	r1, [r3, #8]
 8001fa4:	4211      	tst	r1, r2
 8001fa6:	d12c      	bne.n	8002002 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <ADC_Enable+0x98>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001fb4:	f7ff faee 	bl	8001594 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	4a1c      	ldr	r2, [pc, #112]	; (800202c <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8001fbc:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d028      	beq.n	8002014 <ADC_Enable+0x84>
 8001fc2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d024      	beq.n	8002014 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fca:	4a19      	ldr	r2, [pc, #100]	; (8002030 <ADC_Enable+0xa0>)
 8001fcc:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	07d6      	lsls	r6, r2, #31
 8001fd2:	d414      	bmi.n	8001ffe <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8001fd4:	4e14      	ldr	r6, [pc, #80]	; (8002028 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fd6:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fd8:	07d0      	lsls	r0, r2, #31
 8001fda:	d404      	bmi.n	8001fe6 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	4032      	ands	r2, r6
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fe6:	f7ff fad5 	bl	8001594 <HAL_GetTick>
 8001fea:	1b43      	subs	r3, r0, r5
 8001fec:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fee:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ff0:	d902      	bls.n	8001ff8 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	07d1      	lsls	r1, r2, #31
 8001ff6:	d504      	bpl.n	8002002 <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	07d2      	lsls	r2, r2, #31
 8001ffc:	d5eb      	bpl.n	8001fd6 <ADC_Enable+0x46>
  return HAL_OK;
 8001ffe:	2000      	movs	r0, #0
}
 8002000:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002002:	6e23      	ldr	r3, [r4, #96]	; 0x60
            return HAL_ERROR;
 8002004:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002006:	f043 0310 	orr.w	r3, r3, #16
 800200a:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800200e:	4303      	orrs	r3, r0
 8002010:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002012:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <ADC_Enable+0xa4>)
 8002016:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002018:	06d2      	lsls	r2, r2, #27
 800201a:	d0d8      	beq.n	8001fce <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800201e:	4293      	cmp	r3, r2
 8002020:	d1d5      	bne.n	8001fce <ADC_Enable+0x3e>
 8002022:	e7ec      	b.n	8001ffe <ADC_Enable+0x6e>
 8002024:	8000003f 	.word	0x8000003f
 8002028:	7fffffc0 	.word	0x7fffffc0
 800202c:	40022000 	.word	0x40022000
 8002030:	58026300 	.word	0x58026300
 8002034:	40022300 	.word	0x40022300
 8002038:	40022100 	.word	0x40022100

0800203c <HAL_ADC_Start_DMA>:
{
 800203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002040:	4d46      	ldr	r5, [pc, #280]	; (800215c <HAL_ADC_Start_DMA+0x120>)
{
 8002042:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002044:	6800      	ldr	r0, [r0, #0]
{
 8002046:	460f      	mov	r7, r1
 8002048:	4616      	mov	r6, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800204a:	42a8      	cmp	r0, r5
 800204c:	d019      	beq.n	8002082 <HAL_ADC_Start_DMA+0x46>
 800204e:	4b44      	ldr	r3, [pc, #272]	; (8002160 <HAL_ADC_Start_DMA+0x124>)
 8002050:	4298      	cmp	r0, r3
 8002052:	d016      	beq.n	8002082 <HAL_ADC_Start_DMA+0x46>
 8002054:	4d43      	ldr	r5, [pc, #268]	; (8002164 <HAL_ADC_Start_DMA+0x128>)
 8002056:	68ab      	ldr	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002058:	6880      	ldr	r0, [r0, #8]
 800205a:	0742      	lsls	r2, r0, #29
 800205c:	d416      	bmi.n	800208c <HAL_ADC_Start_DMA+0x50>
    __HAL_LOCK(hadc);
 800205e:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 8002062:	2a01      	cmp	r2, #1
 8002064:	d012      	beq.n	800208c <HAL_ADC_Start_DMA+0x50>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002066:	f003 081f 	and.w	r8, r3, #31
 800206a:	2201      	movs	r2, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800206c:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8002070:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002074:	d90d      	bls.n	8002092 <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8002076:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 8002078:	2001      	movs	r0, #1
      __HAL_UNLOCK(hadc);
 800207a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002082:	4d39      	ldr	r5, [pc, #228]	; (8002168 <HAL_ADC_Start_DMA+0x12c>)
 8002084:	68ab      	ldr	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002086:	6880      	ldr	r0, [r0, #8]
 8002088:	0742      	lsls	r2, r0, #29
 800208a:	d5e8      	bpl.n	800205e <HAL_ADC_Start_DMA+0x22>
    tmp_hal_status = HAL_BUSY;
 800208c:	2002      	movs	r0, #2
}
 800208e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002092:	f240 2321 	movw	r3, #545	; 0x221
 8002096:	fa23 f308 	lsr.w	r3, r3, r8
 800209a:	43db      	mvns	r3, r3
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800209c:	ea13 0502 	ands.w	r5, r3, r2
 80020a0:	d1e9      	bne.n	8002076 <HAL_ADC_Start_DMA+0x3a>
      tmp_hal_status = ADC_Enable(hadc);
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7ff ff74 	bl	8001f90 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d146      	bne.n	800213a <HAL_ADC_Start_DMA+0xfe>
        ADC_STATE_CLR_SET(hadc->State,
 80020ac:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_ADC_Start_DMA+0x130>)
 80020b0:	4013      	ands	r3, r2
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020b2:	6822      	ldr	r2, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6623      	str	r3, [r4, #96]	; 0x60
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020ba:	4b29      	ldr	r3, [pc, #164]	; (8002160 <HAL_ADC_Start_DMA+0x124>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020bc:	429a      	cmp	r2, r3
 80020be:	d102      	bne.n	80020c6 <HAL_ADC_Start_DMA+0x8a>
 80020c0:	f1b8 0f00 	cmp.w	r8, #0
 80020c4:	d103      	bne.n	80020ce <HAL_ADC_Start_DMA+0x92>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80020c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020cc:	6623      	str	r3, [r4, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80020d0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80020d4:	d035      	beq.n	8002142 <HAL_ADC_Start_DMA+0x106>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020d8:	f023 0306 	bic.w	r3, r3, #6
 80020dc:	6663      	str	r3, [r4, #100]	; 0x64
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020e0:	4a23      	ldr	r2, [pc, #140]	; (8002170 <HAL_ADC_Start_DMA+0x134>)
        if (hadc->Instance == ADC3)
 80020e2:	4924      	ldr	r1, [pc, #144]	; (8002174 <HAL_ADC_Start_DMA+0x138>)
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020e4:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020e6:	4a24      	ldr	r2, [pc, #144]	; (8002178 <HAL_ADC_Start_DMA+0x13c>)
 80020e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020ec:	4a23      	ldr	r2, [pc, #140]	; (800217c <HAL_ADC_Start_DMA+0x140>)
 80020ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020f0:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020f2:	221c      	movs	r2, #28
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 80020f8:	2300      	movs	r3, #0
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020fa:	6822      	ldr	r2, [r4, #0]
        __HAL_UNLOCK(hadc);
 80020fc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002100:	6853      	ldr	r3, [r2, #4]
 8002102:	f043 0310 	orr.w	r3, r3, #16
 8002106:	6053      	str	r3, [r2, #4]
        if (hadc->Instance == ADC3)
 8002108:	6822      	ldr	r2, [r4, #0]
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800210a:	68d3      	ldr	r3, [r2, #12]
 800210c:	428a      	cmp	r2, r1
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	d018      	beq.n	8002146 <HAL_ADC_Start_DMA+0x10a>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002114:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002116:	430b      	orrs	r3, r1
 8002118:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800211a:	6821      	ldr	r1, [r4, #0]
 800211c:	4633      	mov	r3, r6
 800211e:	463a      	mov	r2, r7
 8002120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002122:	3140      	adds	r1, #64	; 0x40
 8002124:	f000 fea4 	bl	8002e70 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002128:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_ADC_Start_DMA+0x144>)
 800212c:	6891      	ldr	r1, [r2, #8]
 800212e:	400b      	ands	r3, r1
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6093      	str	r3, [r2, #8]
}
 8002136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 800213a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
}
 800213e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 8002142:	6663      	str	r3, [r4, #100]	; 0x64
 8002144:	e7cb      	b.n	80020de <HAL_ADC_Start_DMA+0xa2>
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002146:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800214a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800214e:	60d3      	str	r3, [r2, #12]
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002150:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002152:	68d3      	ldr	r3, [r2, #12]
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	60d3      	str	r3, [r2, #12]
}
 800215a:	e7de      	b.n	800211a <HAL_ADC_Start_DMA+0xde>
 800215c:	40022000 	.word	0x40022000
 8002160:	40022100 	.word	0x40022100
 8002164:	58026300 	.word	0x58026300
 8002168:	40022300 	.word	0x40022300
 800216c:	fffff0fe 	.word	0xfffff0fe
 8002170:	08001865 	.word	0x08001865
 8002174:	58026000 	.word	0x58026000
 8002178:	080015c5 	.word	0x080015c5
 800217c:	080018d1 	.word	0x080018d1
 8002180:	7fffffc0 	.word	0x7fffffc0

08002184 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002184:	b510      	push	{r4, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002186:	4a44      	ldr	r2, [pc, #272]	; (8002298 <ADC_ConfigureBoostMode+0x114>)
{
 8002188:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800218a:	6803      	ldr	r3, [r0, #0]
 800218c:	4293      	cmp	r3, r2
 800218e:	d025      	beq.n	80021dc <ADC_ConfigureBoostMode+0x58>
 8002190:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002194:	4293      	cmp	r3, r2
 8002196:	d021      	beq.n	80021dc <ADC_ConfigureBoostMode+0x58>
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <ADC_ConfigureBoostMode+0x118>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80021a0:	d021      	beq.n	80021e6 <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80021a2:	f002 fd2d 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80021a6:	6863      	ldr	r3, [r4, #4]
 80021a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ac:	d06b      	beq.n	8002286 <ADC_ConfigureBoostMode+0x102>
 80021ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021b2:	d05b      	beq.n	800226c <ADC_ConfigureBoostMode+0xe8>
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b8:	d065      	beq.n	8002286 <ADC_ConfigureBoostMode+0x102>
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
  if (freq <= 6250000UL)
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <ADC_ConfigureBoostMode+0x11c>)
 80021bc:	4298      	cmp	r0, r3
 80021be:	d92f      	bls.n	8002220 <ADC_ConfigureBoostMode+0x9c>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
  }
  else if (freq <= 12500000UL)
 80021c0:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <ADC_ConfigureBoostMode+0x120>)
 80021c2:	4298      	cmp	r0, r3
 80021c4:	d94a      	bls.n	800225c <ADC_ConfigureBoostMode+0xd8>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
  }
  else if (freq <= 25000000UL)
 80021c6:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <ADC_ConfigureBoostMode+0x124>)
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021c8:	6822      	ldr	r2, [r4, #0]
  else if (freq <= 25000000UL)
 80021ca:	4298      	cmp	r0, r3
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021cc:	6893      	ldr	r3, [r2, #8]
  else if (freq <= 25000000UL)
 80021ce:	d856      	bhi.n	800227e <ADC_ConfigureBoostMode+0xfa>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d8:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80021da:	bd10      	pop	{r4, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80021dc:	4b33      	ldr	r3, [pc, #204]	; (80022ac <ADC_ConfigureBoostMode+0x128>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80021e4:	d1dd      	bne.n	80021a2 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80021e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021ea:	2100      	movs	r1, #0
 80021ec:	f003 fe50 	bl	8005e90 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80021f0:	6863      	ldr	r3, [r4, #4]
 80021f2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021f6:	d04d      	beq.n	8002294 <ADC_ConfigureBoostMode+0x110>
 80021f8:	d808      	bhi.n	800220c <ADC_ConfigureBoostMode+0x88>
 80021fa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021fe:	d03c      	beq.n	800227a <ADC_ConfigureBoostMode+0xf6>
 8002200:	d914      	bls.n	800222c <ADC_ConfigureBoostMode+0xa8>
 8002202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002206:	d1d8      	bne.n	80021ba <ADC_ConfigureBoostMode+0x36>
        freq /= 32UL;
 8002208:	0940      	lsrs	r0, r0, #5
        break;
 800220a:	e7d6      	b.n	80021ba <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 800220c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002210:	d031      	beq.n	8002276 <ADC_ConfigureBoostMode+0xf2>
 8002212:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002216:	d1d0      	bne.n	80021ba <ADC_ConfigureBoostMode+0x36>
  if (freq <= 6250000UL)
 8002218:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <ADC_ConfigureBoostMode+0x11c>)
 800221a:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 800221e:	d31d      	bcc.n	800225c <ADC_ConfigureBoostMode+0xd8>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002220:	6822      	ldr	r2, [r4, #0]
 8002222:	6893      	ldr	r3, [r2, #8]
 8002224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002228:	6093      	str	r3, [r2, #8]
}
 800222a:	bd10      	pop	{r4, pc}
    switch (hadc->Init.ClockPrescaler)
 800222c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002230:	d006      	beq.n	8002240 <ADC_ConfigureBoostMode+0xbc>
 8002232:	d90a      	bls.n	800224a <ADC_ConfigureBoostMode+0xc6>
 8002234:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002238:	d002      	beq.n	8002240 <ADC_ConfigureBoostMode+0xbc>
 800223a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800223e:	d1bc      	bne.n	80021ba <ADC_ConfigureBoostMode+0x36>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002240:	0c9b      	lsrs	r3, r3, #18
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002248:	e7b7      	b.n	80021ba <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 800224a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800224e:	d0f7      	beq.n	8002240 <ADC_ConfigureBoostMode+0xbc>
 8002250:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002254:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002258:	d0f2      	beq.n	8002240 <ADC_ConfigureBoostMode+0xbc>
 800225a:	e7ae      	b.n	80021ba <ADC_ConfigureBoostMode+0x36>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800225c:	6822      	ldr	r2, [r4, #0]
 800225e:	6893      	ldr	r3, [r2, #8]
 8002260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	6093      	str	r3, [r2, #8]
}
 800226a:	bd10      	pop	{r4, pc}
        freq /= 4UL;
 800226c:	0880      	lsrs	r0, r0, #2
  if (freq <= 6250000UL)
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <ADC_ConfigureBoostMode+0x11c>)
 8002270:	4298      	cmp	r0, r3
 8002272:	d9d5      	bls.n	8002220 <ADC_ConfigureBoostMode+0x9c>
 8002274:	e7a4      	b.n	80021c0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8002276:	09c0      	lsrs	r0, r0, #7
        break;
 8002278:	e79f      	b.n	80021ba <ADC_ConfigureBoostMode+0x36>
        freq /= 16UL;
 800227a:	0900      	lsrs	r0, r0, #4
        break;
 800227c:	e79d      	b.n	80021ba <ADC_ConfigureBoostMode+0x36>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800227e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002282:	6093      	str	r3, [r2, #8]
}
 8002284:	bd10      	pop	{r4, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002286:	0c1b      	lsrs	r3, r3, #16
 8002288:	fbb0 f0f3 	udiv	r0, r0, r3
  if (freq <= 6250000UL)
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <ADC_ConfigureBoostMode+0x11c>)
 800228e:	4298      	cmp	r0, r3
 8002290:	d9c6      	bls.n	8002220 <ADC_ConfigureBoostMode+0x9c>
 8002292:	e795      	b.n	80021c0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8002294:	0980      	lsrs	r0, r0, #6
        break;
 8002296:	e790      	b.n	80021ba <ADC_ConfigureBoostMode+0x36>
 8002298:	40022000 	.word	0x40022000
 800229c:	58026300 	.word	0x58026300
 80022a0:	00bebc21 	.word	0x00bebc21
 80022a4:	017d7841 	.word	0x017d7841
 80022a8:	02faf081 	.word	0x02faf081
 80022ac:	40022300 	.word	0x40022300

080022b0 <HAL_ADC_Init>:
{
 80022b0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80022b2:	2300      	movs	r3, #0
{
 80022b4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80022b6:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80022b8:	2800      	cmp	r0, #0
 80022ba:	f000 80e1 	beq.w	8002480 <HAL_ADC_Init+0x1d0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022be:	6e05      	ldr	r5, [r0, #96]	; 0x60
 80022c0:	4604      	mov	r4, r0
 80022c2:	2d00      	cmp	r5, #0
 80022c4:	f000 80c0 	beq.w	8002448 <HAL_ADC_Init+0x198>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022c8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	0095      	lsls	r5, r2, #2
 80022ce:	d504      	bpl.n	80022da <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022d0:	6899      	ldr	r1, [r3, #8]
 80022d2:	4a94      	ldr	r2, [pc, #592]	; (8002524 <HAL_ADC_Init+0x274>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022d8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	00d0      	lsls	r0, r2, #3
 80022de:	d417      	bmi.n	8002310 <HAL_ADC_Init+0x60>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022e0:	4a91      	ldr	r2, [pc, #580]	; (8002528 <HAL_ADC_Init+0x278>)
 80022e2:	4992      	ldr	r1, [pc, #584]	; (800252c <HAL_ADC_Init+0x27c>)
 80022e4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCx->CR,
 80022e6:	6898      	ldr	r0, [r3, #8]
 80022e8:	0992      	lsrs	r2, r2, #6
 80022ea:	fba1 1202 	umull	r1, r2, r1, r2
 80022ee:	4990      	ldr	r1, [pc, #576]	; (8002530 <HAL_ADC_Init+0x280>)
 80022f0:	0992      	lsrs	r2, r2, #6
 80022f2:	4001      	ands	r1, r0
 80022f4:	3201      	adds	r2, #1
 80022f6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80022fa:	6099      	str	r1, [r3, #8]
 80022fc:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 80022fe:	9b01      	ldr	r3, [sp, #4]
 8002300:	b12b      	cbz	r3, 800230e <HAL_ADC_Init+0x5e>
      wait_loop_index--;
 8002302:	9b01      	ldr	r3, [sp, #4]
 8002304:	3b01      	subs	r3, #1
 8002306:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002308:	9b01      	ldr	r3, [sp, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f9      	bne.n	8002302 <HAL_ADC_Init+0x52>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800230e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	00d1      	lsls	r1, r2, #3
 8002314:	d413      	bmi.n	800233e <HAL_ADC_Init+0x8e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002316:	6e22      	ldr	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 8002318:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231a:	f042 0210 	orr.w	r2, r2, #16
 800231e:	6622      	str	r2, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002320:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002322:	432a      	orrs	r2, r5
 8002324:	6662      	str	r2, [r4, #100]	; 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	0752      	lsls	r2, r2, #29
 800232a:	d50c      	bpl.n	8002346 <HAL_ADC_Init+0x96>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800232c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 8002330:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002332:	f043 0310 	orr.w	r3, r3, #16
}
 8002336:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002338:	6623      	str	r3, [r4, #96]	; 0x60
}
 800233a:	b002      	add	sp, #8
 800233c:	bd70      	pop	{r4, r5, r6, pc}
 800233e:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002340:	2500      	movs	r5, #0
 8002342:	0752      	lsls	r2, r2, #29
 8002344:	d4f2      	bmi.n	800232c <HAL_ADC_Init+0x7c>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002346:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002348:	f012 0210 	ands.w	r2, r2, #16
 800234c:	d1ef      	bne.n	800232e <HAL_ADC_Init+0x7e>
    ADC_STATE_CLR_SET(hadc->State,
 800234e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002350:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002354:	f041 0102 	orr.w	r1, r1, #2
 8002358:	6621      	str	r1, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800235a:	6899      	ldr	r1, [r3, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235c:	07ce      	lsls	r6, r1, #31
 800235e:	d414      	bmi.n	800238a <HAL_ADC_Init+0xda>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002360:	4974      	ldr	r1, [pc, #464]	; (8002534 <HAL_ADC_Init+0x284>)
 8002362:	428b      	cmp	r3, r1
 8002364:	f000 80a4 	beq.w	80024b0 <HAL_ADC_Init+0x200>
 8002368:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800236c:	428b      	cmp	r3, r1
 800236e:	f000 809f 	beq.w	80024b0 <HAL_ADC_Init+0x200>
 8002372:	4971      	ldr	r1, [pc, #452]	; (8002538 <HAL_ADC_Init+0x288>)
 8002374:	6889      	ldr	r1, [r1, #8]
 8002376:	07c9      	lsls	r1, r1, #31
 8002378:	d407      	bmi.n	800238a <HAL_ADC_Init+0xda>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800237a:	4970      	ldr	r1, [pc, #448]	; (800253c <HAL_ADC_Init+0x28c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800237c:	688b      	ldr	r3, [r1, #8]
 800237e:	6860      	ldr	r0, [r4, #4]
 8002380:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002384:	4303      	orrs	r3, r0
 8002386:	608b      	str	r3, [r1, #8]
    if (hadc->Instance == ADC3)
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	496b      	ldr	r1, [pc, #428]	; (8002538 <HAL_ADC_Init+0x288>)
 800238c:	428b      	cmp	r3, r1
 800238e:	d061      	beq.n	8002454 <HAL_ADC_Init+0x1a4>
                  hadc->Init.Overrun                                                    |
 8002390:	68a0      	ldr	r0, [r4, #8]
 8002392:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002394:	f894 1020 	ldrb.w	r1, [r4, #32]
                  hadc->Init.Overrun                                                    |
 8002398:	4302      	orrs	r2, r0
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800239a:	7e60      	ldrb	r0, [r4, #25]
                  hadc->Init.Overrun                                                    |
 800239c:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023a4:	2901      	cmp	r1, #1
 80023a6:	d103      	bne.n	80023b0 <HAL_ADC_Init+0x100>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80023aa:	3901      	subs	r1, #1
 80023ac:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80023b2:	b121      	cbz	r1, 80023be <HAL_ADC_Init+0x10e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023b4:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80023b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80023ba:	4301      	orrs	r1, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023bc:	430a      	orrs	r2, r1
    if (hadc->Instance == ADC3)
 80023be:	495e      	ldr	r1, [pc, #376]	; (8002538 <HAL_ADC_Init+0x288>)
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80023c0:	68d8      	ldr	r0, [r3, #12]
    if (hadc->Instance == ADC3)
 80023c2:	428b      	cmp	r3, r1
 80023c4:	d068      	beq.n	8002498 <HAL_ADC_Init+0x1e8>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023c6:	495e      	ldr	r1, [pc, #376]	; (8002540 <HAL_ADC_Init+0x290>)
 80023c8:	4001      	ands	r1, r0
 80023ca:	430a      	orrs	r2, r1
 80023cc:	60da      	str	r2, [r3, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ce:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d0:	6893      	ldr	r3, [r2, #8]
 80023d2:	f013 0f04 	tst.w	r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023d6:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d8:	d126      	bne.n	8002428 <HAL_ADC_Init+0x178>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023da:	071b      	lsls	r3, r3, #28
 80023dc:	d424      	bmi.n	8002428 <HAL_ADC_Init+0x178>
      if (hadc->Instance == ADC3)
 80023de:	4b56      	ldr	r3, [pc, #344]	; (8002538 <HAL_ADC_Init+0x288>)
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f000 8084 	beq.w	80024ee <HAL_ADC_Init+0x23e>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023e6:	7e21      	ldrb	r1, [r4, #24]
        tmpCFGR = (
 80023e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023ea:	ea43 3181 	orr.w	r1, r3, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023ee:	68d0      	ldr	r0, [r2, #12]
 80023f0:	4b54      	ldr	r3, [pc, #336]	; (8002544 <HAL_ADC_Init+0x294>)
 80023f2:	4003      	ands	r3, r0
 80023f4:	430b      	orrs	r3, r1
 80023f6:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80023f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
        if (hadc->Instance == ADC3)
 80023fc:	6822      	ldr	r2, [r4, #0]
      if (hadc->Init.OversamplingMode == ENABLE)
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d061      	beq.n	80024c6 <HAL_ADC_Init+0x216>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002402:	6913      	ldr	r3, [r2, #16]
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800240a:	6822      	ldr	r2, [r4, #0]
 800240c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800240e:	6913      	ldr	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 8002410:	4949      	ldr	r1, [pc, #292]	; (8002538 <HAL_ADC_Init+0x288>)
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002412:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002416:	4303      	orrs	r3, r0
 8002418:	6113      	str	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 800241a:	6822      	ldr	r2, [r4, #0]
 800241c:	428a      	cmp	r2, r1
 800241e:	d003      	beq.n	8002428 <HAL_ADC_Init+0x178>
        ADC_ConfigureBoostMode(hadc);
 8002420:	4620      	mov	r0, r4
 8002422:	f7ff feaf 	bl	8002184 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002426:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002428:	6923      	ldr	r3, [r4, #16]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d02c      	beq.n	8002488 <HAL_ADC_Init+0x1d8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800242e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002430:	f023 030f 	bic.w	r3, r3, #15
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002436:	6e23      	ldr	r3, [r4, #96]	; 0x60
}
 8002438:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800243a:	f023 0303 	bic.w	r3, r3, #3
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6623      	str	r3, [r4, #96]	; 0x60
}
 8002444:	b002      	add	sp, #8
 8002446:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8002448:	f7fe fd3c 	bl	8000ec4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800244c:	6665      	str	r5, [r4, #100]	; 0x64
    hadc->Lock = HAL_UNLOCKED;
 800244e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
 8002452:	e739      	b.n	80022c8 <HAL_ADC_Init+0x18>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002454:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002456:	68e0      	ldr	r0, [r4, #12]
 8002458:	4308      	orrs	r0, r1
 800245a:	7e61      	ldrb	r1, [r4, #25]
 800245c:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002460:	68a1      	ldr	r1, [r4, #8]
 8002462:	2908      	cmp	r1, #8
 8002464:	d006      	beq.n	8002474 <HAL_ADC_Init+0x1c4>
 8002466:	290c      	cmp	r1, #12
 8002468:	d048      	beq.n	80024fc <HAL_ADC_Init+0x24c>
 800246a:	291c      	cmp	r1, #28
 800246c:	d057      	beq.n	800251e <HAL_ADC_Init+0x26e>
 800246e:	2918      	cmp	r1, #24
 8002470:	bf08      	it	eq
 8002472:	2218      	moveq	r2, #24
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002474:	f894 1020 	ldrb.w	r1, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002478:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800247c:	4302      	orrs	r2, r0
 800247e:	e791      	b.n	80023a4 <HAL_ADC_Init+0xf4>
    return HAL_ERROR;
 8002480:	2501      	movs	r5, #1
}
 8002482:	4628      	mov	r0, r5
 8002484:	b002      	add	sp, #8
 8002486:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002488:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800248a:	69e3      	ldr	r3, [r4, #28]
 800248c:	f021 010f 	bic.w	r1, r1, #15
 8002490:	3b01      	subs	r3, #1
 8002492:	430b      	orrs	r3, r1
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	e7ce      	b.n	8002436 <HAL_ADC_Init+0x186>
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002498:	492b      	ldr	r1, [pc, #172]	; (8002548 <HAL_ADC_Init+0x298>)
 800249a:	4001      	ands	r1, r0
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024a0:	6822      	ldr	r2, [r4, #0]
 80024a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024a4:	6913      	ldr	r3, [r2, #16]
 80024a6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80024aa:	430b      	orrs	r3, r1
 80024ac:	6113      	str	r3, [r2, #16]
 80024ae:	e78e      	b.n	80023ce <HAL_ADC_Init+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024b0:	4920      	ldr	r1, [pc, #128]	; (8002534 <HAL_ADC_Init+0x284>)
 80024b2:	6888      	ldr	r0, [r1, #8]
 80024b4:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80024b8:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ba:	4301      	orrs	r1, r0
 80024bc:	07c8      	lsls	r0, r1, #31
 80024be:	f53f af64 	bmi.w	800238a <HAL_ADC_Init+0xda>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024c2:	4922      	ldr	r1, [pc, #136]	; (800254c <HAL_ADC_Init+0x29c>)
 80024c4:	e75a      	b.n	800237c <HAL_ADC_Init+0xcc>
        if (hadc->Instance == ADC3)
 80024c6:	4b1c      	ldr	r3, [pc, #112]	; (8002538 <HAL_ADC_Init+0x288>)
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d019      	beq.n	8002500 <HAL_ADC_Init+0x250>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024cc:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80024ce:	6910      	ldr	r0, [r2, #16]
 80024d0:	e9d4 1312 	ldrd	r1, r3, [r4, #72]	; 0x48
 80024d4:	3901      	subs	r1, #1
 80024d6:	4333      	orrs	r3, r6
 80024d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80024dc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80024de:	430b      	orrs	r3, r1
 80024e0:	491b      	ldr	r1, [pc, #108]	; (8002550 <HAL_ADC_Init+0x2a0>)
 80024e2:	4001      	ands	r1, r0
 80024e4:	430b      	orrs	r3, r1
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6113      	str	r3, [r2, #16]
 80024ec:	e78d      	b.n	800240a <HAL_ADC_Init+0x15a>
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024f2:	7e21      	ldrb	r1, [r4, #24]
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024f4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80024f6:	ea43 3181 	orr.w	r1, r3, r1, lsl #14
 80024fa:	e778      	b.n	80023ee <HAL_ADC_Init+0x13e>
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80024fc:	2208      	movs	r2, #8
 80024fe:	e7b9      	b.n	8002474 <HAL_ADC_Init+0x1c4>
          MODIFY_REG(hadc->Instance->CFGR2,
 8002500:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002502:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002504:	6910      	ldr	r0, [r2, #16]
 8002506:	430b      	orrs	r3, r1
 8002508:	4912      	ldr	r1, [pc, #72]	; (8002554 <HAL_ADC_Init+0x2a4>)
 800250a:	4001      	ands	r1, r0
 800250c:	430b      	orrs	r3, r1
 800250e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002510:	430b      	orrs	r3, r1
 8002512:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002514:	430b      	orrs	r3, r1
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6113      	str	r3, [r2, #16]
 800251c:	e775      	b.n	800240a <HAL_ADC_Init+0x15a>
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800251e:	2210      	movs	r2, #16
 8002520:	e7a8      	b.n	8002474 <HAL_ADC_Init+0x1c4>
 8002522:	bf00      	nop
 8002524:	5fffffc0 	.word	0x5fffffc0
 8002528:	24000004 	.word	0x24000004
 800252c:	053e2d63 	.word	0x053e2d63
 8002530:	6fffffc0 	.word	0x6fffffc0
 8002534:	40022000 	.word	0x40022000
 8002538:	58026000 	.word	0x58026000
 800253c:	58026300 	.word	0x58026300
 8002540:	fff0c003 	.word	0xfff0c003
 8002544:	ffffbffc 	.word	0xffffbffc
 8002548:	fff04007 	.word	0xfff04007
 800254c:	40022300 	.word	0x40022300
 8002550:	fc00f81e 	.word	0xfc00f81e
 8002554:	fc00f81f 	.word	0xfc00f81f

08002558 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop

0800255c <HAL_ADCEx_InjectedQueueOverflowCallback>:
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop

08002560 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop

08002564 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop

08002568 <HAL_ADCEx_EndOfSamplingCallback>:
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop

0800256c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800256c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002570:	2b01      	cmp	r3, #1
 8002572:	d049      	beq.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x9c>

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002574:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002576:	2301      	movs	r3, #1
{
 8002578:	b470      	push	{r4, r5, r6}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800257a:	4d3a      	ldr	r5, [pc, #232]	; (8002664 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
{
 800257c:	b09d      	sub	sp, #116	; 0x74
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800257e:	6804      	ldr	r4, [r0, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002580:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002582:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 8002584:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002588:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800258a:	d009      	beq.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	6e01      	ldr	r1, [r0, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800258e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002592:	f041 0120 	orr.w	r1, r1, #32
 8002596:	6601      	str	r1, [r0, #96]	; 0x60
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002598:	4618      	mov	r0, r3
 800259a:	b01d      	add	sp, #116	; 0x74
 800259c:	bc70      	pop	{r4, r5, r6}
 800259e:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025a0:	4b31      	ldr	r3, [pc, #196]	; (8002668 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	0752      	lsls	r2, r2, #29
 80025a6:	d50c      	bpl.n	80025c2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80025a8:	68a3      	ldr	r3, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025aa:	6e02      	ldr	r2, [r0, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	6602      	str	r2, [r0, #96]	; 0x60
  __HAL_UNLOCK(hadc);
 80025b4:	2200      	movs	r2, #0
 80025b6:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	b01d      	add	sp, #116	; 0x74
 80025be:	bc70      	pop	{r4, r5, r6}
 80025c0:	4770      	bx	lr
 80025c2:	68a2      	ldr	r2, [r4, #8]
 80025c4:	0755      	lsls	r5, r2, #29
 80025c6:	d4f0      	bmi.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025c8:	680a      	ldr	r2, [r1, #0]
 80025ca:	b302      	cbz	r2, 800260e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80025cc:	4d27      	ldr	r5, [pc, #156]	; (800266c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 80025ce:	684e      	ldr	r6, [r1, #4]
 80025d0:	68aa      	ldr	r2, [r5, #8]
 80025d2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80025d6:	4332      	orrs	r2, r6
 80025d8:	60aa      	str	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025da:	6802      	ldr	r2, [r0, #0]
 80025dc:	42a2      	cmp	r2, r4
 80025de:	d036      	beq.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d034      	beq.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d036      	beq.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
        MODIFY_REG(tmpADC_Common->CCR,
 80025f2:	680a      	ldr	r2, [r1, #0]
 80025f4:	4c1d      	ldr	r4, [pc, #116]	; (800266c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 80025f6:	6889      	ldr	r1, [r1, #8]
 80025f8:	68a3      	ldr	r3, [r4, #8]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	491d      	ldr	r1, [pc, #116]	; (8002674 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 80025fe:	4019      	ands	r1, r3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002600:	2300      	movs	r3, #0
        MODIFY_REG(tmpADC_Common->CCR,
 8002602:	430a      	orrs	r2, r1
 8002604:	60a2      	str	r2, [r4, #8]
 8002606:	e7d5      	b.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8002608:	2302      	movs	r3, #2
}
 800260a:	4618      	mov	r0, r3
 800260c:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800260e:	4917      	ldr	r1, [pc, #92]	; (800266c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8002610:	688a      	ldr	r2, [r1, #8]
 8002612:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002616:	608a      	str	r2, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002618:	6802      	ldr	r2, [r0, #0]
 800261a:	42a2      	cmp	r2, r4
 800261c:	d00e      	beq.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800261e:	429a      	cmp	r2, r3
 8002620:	d00c      	beq.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	43db      	mvns	r3, r3
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	b1c3      	cbz	r3, 8002660 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800262e:	490f      	ldr	r1, [pc, #60]	; (800266c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002630:	2300      	movs	r3, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8002634:	688c      	ldr	r4, [r1, #8]
 8002636:	4022      	ands	r2, r4
 8002638:	608a      	str	r2, [r1, #8]
 800263a:	e7bb      	b.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 800263c:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8002640:	6892      	ldr	r2, [r2, #8]
 8002642:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002644:	4313      	orrs	r3, r2
 8002646:	43db      	mvns	r3, r3
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	e7ee      	b.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8002652:	6892      	ldr	r2, [r2, #8]
 8002654:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002656:	4313      	orrs	r3, r2
 8002658:	43db      	mvns	r3, r3
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	e7c6      	b.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0x82>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	e7a7      	b.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8002664:	40022000 	.word	0x40022000
 8002668:	40022100 	.word	0x40022100
 800266c:	40022300 	.word	0x40022300
 8002670:	58026000 	.word	0x58026000
 8002674:	fffff0e0 	.word	0xfffff0e0

08002678 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4906      	ldr	r1, [pc, #24]	; (8002694 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800267e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002682:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002688:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800268e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002690:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00
 8002698:	05fa0000 	.word	0x05fa0000

0800269c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269e:	b500      	push	{lr}
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ae:	f1be 0f04 	cmp.w	lr, #4
 80026b2:	bf28      	it	cs
 80026b4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b8:	f1bc 0f06 	cmp.w	ip, #6
 80026bc:	d91a      	bls.n	80026f4 <HAL_NVIC_SetPriority+0x58>
 80026be:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80026c4:	fa0c fc03 	lsl.w	ip, ip, r3
 80026c8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80026d0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80026d6:	ea21 010c 	bic.w	r1, r1, ip
 80026da:	fa01 f103 	lsl.w	r1, r1, r3
 80026de:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80026e2:	db0a      	blt.n	80026fa <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	0109      	lsls	r1, r1, #4
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_NVIC_SetPriority+0x74>)
 80026e8:	b2c9      	uxtb	r1, r1
 80026ea:	4403      	add	r3, r0
 80026ec:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80026f4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	4613      	mov	r3, r2
 80026f8:	e7e8      	b.n	80026cc <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	f000 000f 	and.w	r0, r0, #15
 80026fe:	0109      	lsls	r1, r1, #4
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_NVIC_SetPriority+0x78>)
 8002702:	b2c9      	uxtb	r1, r1
 8002704:	4403      	add	r3, r0
 8002706:	7619      	strb	r1, [r3, #24]
 8002708:	f85d fb04 	ldr.w	pc, [sp], #4
 800270c:	e000ed00 	.word	0xe000ed00
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ecfc 	.word	0xe000ecfc

08002718 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002718:	2800      	cmp	r0, #0
 800271a:	db07      	blt.n	800272c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271c:	2301      	movs	r3, #1
 800271e:	f000 011f 	and.w	r1, r0, #31
 8002722:	4a03      	ldr	r2, [pc, #12]	; (8002730 <HAL_NVIC_EnableIRQ+0x18>)
 8002724:	0940      	lsrs	r0, r0, #5
 8002726:	408b      	lsls	r3, r1
 8002728:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000e100 	.word	0xe000e100

08002734 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	1e43      	subs	r3, r0, #1
 8002736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273a:	d20c      	bcs.n	8002756 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	4906      	ldr	r1, [pc, #24]	; (800275c <HAL_SYSTICK_Config+0x28>)
 8002744:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002748:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002752:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002756:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002760:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002766:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800276a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800276e:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8002770:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_MPU_Enable+0x1c>)
 800277e:	f040 0001 	orr.w	r0, r0, #1
 8002782:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002788:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800278e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002792:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800279c:	7843      	ldrb	r3, [r0, #1]
 800279e:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <HAL_MPU_ConfigRegion+0x5c>)
 80027a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 80027a4:	7803      	ldrb	r3, [r0, #0]
 80027a6:	b313      	cbz	r3, 80027ee <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80027a8:	6843      	ldr	r3, [r0, #4]
 80027aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027ae:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027b0:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027b4:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80027b6:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027b8:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80027bc:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027c0:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027c2:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027c4:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027c8:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027cc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027d0:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027d2:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027d6:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80027de:	7a01      	ldrb	r1, [r0, #8]
 80027e0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80027e4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80027ec:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 80027ee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80027f2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027fc:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <DMA_CalcBaseAndBitshift+0xd4>)
 80027fe:	4935      	ldr	r1, [pc, #212]	; (80028d4 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8002800:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002802:	4d35      	ldr	r5, [pc, #212]	; (80028d8 <DMA_CalcBaseAndBitshift+0xdc>)
 8002804:	6802      	ldr	r2, [r0, #0]
 8002806:	4c35      	ldr	r4, [pc, #212]	; (80028dc <DMA_CalcBaseAndBitshift+0xe0>)
 8002808:	42aa      	cmp	r2, r5
 800280a:	bf18      	it	ne
 800280c:	429a      	cmpne	r2, r3
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	428a      	cmp	r2, r1
 8002816:	bf08      	it	eq
 8002818:	f043 0301 	orreq.w	r3, r3, #1
 800281c:	3130      	adds	r1, #48	; 0x30
 800281e:	42a2      	cmp	r2, r4
 8002820:	bf08      	it	eq
 8002822:	f043 0301 	orreq.w	r3, r3, #1
 8002826:	3430      	adds	r4, #48	; 0x30
 8002828:	428a      	cmp	r2, r1
 800282a:	bf08      	it	eq
 800282c:	f043 0301 	orreq.w	r3, r3, #1
 8002830:	3130      	adds	r1, #48	; 0x30
 8002832:	42a2      	cmp	r2, r4
 8002834:	bf08      	it	eq
 8002836:	f043 0301 	orreq.w	r3, r3, #1
 800283a:	3430      	adds	r4, #48	; 0x30
 800283c:	428a      	cmp	r2, r1
 800283e:	bf08      	it	eq
 8002840:	f043 0301 	orreq.w	r3, r3, #1
 8002844:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002848:	42a2      	cmp	r2, r4
 800284a:	bf08      	it	eq
 800284c:	f043 0301 	orreq.w	r3, r3, #1
 8002850:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8002854:	428a      	cmp	r2, r1
 8002856:	bf08      	it	eq
 8002858:	f043 0301 	orreq.w	r3, r3, #1
 800285c:	3130      	adds	r1, #48	; 0x30
 800285e:	42a2      	cmp	r2, r4
 8002860:	bf08      	it	eq
 8002862:	f043 0301 	orreq.w	r3, r3, #1
 8002866:	3430      	adds	r4, #48	; 0x30
 8002868:	428a      	cmp	r2, r1
 800286a:	bf08      	it	eq
 800286c:	f043 0301 	orreq.w	r3, r3, #1
 8002870:	3130      	adds	r1, #48	; 0x30
 8002872:	42a2      	cmp	r2, r4
 8002874:	bf08      	it	eq
 8002876:	f043 0301 	orreq.w	r3, r3, #1
 800287a:	3430      	adds	r4, #48	; 0x30
 800287c:	428a      	cmp	r2, r1
 800287e:	bf08      	it	eq
 8002880:	f043 0301 	orreq.w	r3, r3, #1
 8002884:	3130      	adds	r1, #48	; 0x30
 8002886:	42a2      	cmp	r2, r4
 8002888:	bf08      	it	eq
 800288a:	f043 0301 	orreq.w	r3, r3, #1
 800288e:	428a      	cmp	r2, r1
 8002890:	bf08      	it	eq
 8002892:	f043 0301 	orreq.w	r3, r3, #1
 8002896:	b913      	cbnz	r3, 800289e <DMA_CalcBaseAndBitshift+0xa2>
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <DMA_CalcBaseAndBitshift+0xe4>)
 800289a:	429a      	cmp	r2, r3
 800289c:	d113      	bne.n	80028c6 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800289e:	b2d3      	uxtb	r3, r2
 80028a0:	4910      	ldr	r1, [pc, #64]	; (80028e4 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80028a2:	4c11      	ldr	r4, [pc, #68]	; (80028e8 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80028a4:	3b10      	subs	r3, #16
 80028a6:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 80028aa:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80028ae:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80028b2:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80028b6:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80028b8:	bf88      	it	hi
 80028ba:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80028bc:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80028be:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bc30      	pop	{r4, r5}
 80028c4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80028c6:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 80028ca:	6583      	str	r3, [r0, #88]	; 0x58
 80028cc:	e7f8      	b.n	80028c0 <DMA_CalcBaseAndBitshift+0xc4>
 80028ce:	bf00      	nop
 80028d0:	40020010 	.word	0x40020010
 80028d4:	40020040 	.word	0x40020040
 80028d8:	40020028 	.word	0x40020028
 80028dc:	40020058 	.word	0x40020058
 80028e0:	400204b8 	.word	0x400204b8
 80028e4:	aaaaaaab 	.word	0xaaaaaaab
 80028e8:	08008660 	.word	0x08008660
 80028ec:	fffffc00 	.word	0xfffffc00

080028f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80028f0:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028f2:	4a29      	ldr	r2, [pc, #164]	; (8002998 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80028f4:	4929      	ldr	r1, [pc, #164]	; (800299c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 80028f6:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028f8:	4d29      	ldr	r5, [pc, #164]	; (80029a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80028fa:	4c2a      	ldr	r4, [pc, #168]	; (80029a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 80028fc:	42ab      	cmp	r3, r5
 80028fe:	bf18      	it	ne
 8002900:	4293      	cmpne	r3, r2
 8002902:	bf0c      	ite	eq
 8002904:	2201      	moveq	r2, #1
 8002906:	2200      	movne	r2, #0
 8002908:	428b      	cmp	r3, r1
 800290a:	bf08      	it	eq
 800290c:	f042 0201 	orreq.w	r2, r2, #1
 8002910:	3128      	adds	r1, #40	; 0x28
 8002912:	42a3      	cmp	r3, r4
 8002914:	bf08      	it	eq
 8002916:	f042 0201 	orreq.w	r2, r2, #1
 800291a:	3428      	adds	r4, #40	; 0x28
 800291c:	428b      	cmp	r3, r1
 800291e:	bf08      	it	eq
 8002920:	f042 0201 	orreq.w	r2, r2, #1
 8002924:	3128      	adds	r1, #40	; 0x28
 8002926:	42a3      	cmp	r3, r4
 8002928:	bf08      	it	eq
 800292a:	f042 0201 	orreq.w	r2, r2, #1
 800292e:	428b      	cmp	r3, r1
 8002930:	bf08      	it	eq
 8002932:	f042 0201 	orreq.w	r2, r2, #1
 8002936:	b912      	cbnz	r2, 800293e <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8002938:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d113      	bne.n	8002966 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4c1a      	ldr	r4, [pc, #104]	; (80029ac <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002942:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002944:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002946:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002948:	4d1a      	ldr	r5, [pc, #104]	; (80029b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800294a:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800294e:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002950:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002954:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002958:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800295e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002960:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002962:	bc30      	pop	{r4, r5}
 8002964:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002966:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002968:	4913      	ldr	r1, [pc, #76]	; (80029b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800296a:	4c14      	ldr	r4, [pc, #80]	; (80029bc <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800296c:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800296e:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002970:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002972:	fba4 2302 	umull	r2, r3, r4, r2
 8002976:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800297a:	d800      	bhi.n	800297e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 800297c:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800297e:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002980:	f003 051f 	and.w	r5, r3, #31
 8002984:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002986:	4c0f      	ldr	r4, [pc, #60]	; (80029c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002988:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800298a:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800298c:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800298e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002990:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002992:	6602      	str	r2, [r0, #96]	; 0x60
}
 8002994:	e7e5      	b.n	8002962 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8002996:	bf00      	nop
 8002998:	58025408 	.word	0x58025408
 800299c:	58025430 	.word	0x58025430
 80029a0:	5802541c 	.word	0x5802541c
 80029a4:	58025444 	.word	0x58025444
 80029a8:	58025494 	.word	0x58025494
 80029ac:	cccccccd 	.word	0xcccccccd
 80029b0:	16009600 	.word	0x16009600
 80029b4:	58025880 	.word	0x58025880
 80029b8:	bffdfbf0 	.word	0xbffdfbf0
 80029bc:	aaaaaaab 	.word	0xaaaaaaab
 80029c0:	10008200 	.word	0x10008200
 80029c4:	40020880 	.word	0x40020880

080029c8 <HAL_DMA_Init>:
{
 80029c8:	b538      	push	{r3, r4, r5, lr}
 80029ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029cc:	f7fe fde2 	bl	8001594 <HAL_GetTick>
  if(hdma == NULL)
 80029d0:	2c00      	cmp	r4, #0
 80029d2:	f000 8166 	beq.w	8002ca2 <HAL_DMA_Init+0x2da>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029d6:	6822      	ldr	r2, [r4, #0]
 80029d8:	4605      	mov	r5, r0
 80029da:	4ba4      	ldr	r3, [pc, #656]	; (8002c6c <HAL_DMA_Init+0x2a4>)
 80029dc:	429a      	cmp	r2, r3
 80029de:	d048      	beq.n	8002a72 <HAL_DMA_Init+0xaa>
 80029e0:	3318      	adds	r3, #24
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d045      	beq.n	8002a72 <HAL_DMA_Init+0xaa>
 80029e6:	3330      	adds	r3, #48	; 0x30
 80029e8:	49a1      	ldr	r1, [pc, #644]	; (8002c70 <HAL_DMA_Init+0x2a8>)
 80029ea:	428a      	cmp	r2, r1
 80029ec:	bf18      	it	ne
 80029ee:	429a      	cmpne	r2, r3
 80029f0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80029f4:	bf0c      	ite	eq
 80029f6:	2301      	moveq	r3, #1
 80029f8:	2300      	movne	r3, #0
 80029fa:	428a      	cmp	r2, r1
 80029fc:	bf08      	it	eq
 80029fe:	f043 0301 	orreq.w	r3, r3, #1
 8002a02:	3118      	adds	r1, #24
 8002a04:	428a      	cmp	r2, r1
 8002a06:	bf08      	it	eq
 8002a08:	f043 0301 	orreq.w	r3, r3, #1
 8002a0c:	3118      	adds	r1, #24
 8002a0e:	428a      	cmp	r2, r1
 8002a10:	bf08      	it	eq
 8002a12:	f043 0301 	orreq.w	r3, r3, #1
 8002a16:	3118      	adds	r1, #24
 8002a18:	428a      	cmp	r2, r1
 8002a1a:	bf08      	it	eq
 8002a1c:	f043 0301 	orreq.w	r3, r3, #1
 8002a20:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002a24:	428a      	cmp	r2, r1
 8002a26:	bf08      	it	eq
 8002a28:	f043 0301 	orreq.w	r3, r3, #1
 8002a2c:	3118      	adds	r1, #24
 8002a2e:	428a      	cmp	r2, r1
 8002a30:	bf08      	it	eq
 8002a32:	f043 0301 	orreq.w	r3, r3, #1
 8002a36:	3118      	adds	r1, #24
 8002a38:	428a      	cmp	r2, r1
 8002a3a:	bf08      	it	eq
 8002a3c:	f043 0301 	orreq.w	r3, r3, #1
 8002a40:	3118      	adds	r1, #24
 8002a42:	428a      	cmp	r2, r1
 8002a44:	bf08      	it	eq
 8002a46:	f043 0301 	orreq.w	r3, r3, #1
 8002a4a:	3118      	adds	r1, #24
 8002a4c:	428a      	cmp	r2, r1
 8002a4e:	bf08      	it	eq
 8002a50:	f043 0301 	orreq.w	r3, r3, #1
 8002a54:	3118      	adds	r1, #24
 8002a56:	428a      	cmp	r2, r1
 8002a58:	bf08      	it	eq
 8002a5a:	f043 0301 	orreq.w	r3, r3, #1
 8002a5e:	3118      	adds	r1, #24
 8002a60:	428a      	cmp	r2, r1
 8002a62:	bf08      	it	eq
 8002a64:	f043 0301 	orreq.w	r3, r3, #1
 8002a68:	b91b      	cbnz	r3, 8002a72 <HAL_DMA_Init+0xaa>
 8002a6a:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <HAL_DMA_Init+0x2ac>)
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	f040 8180 	bne.w	8002d72 <HAL_DMA_Init+0x3aa>
    __HAL_UNLOCK(hdma);
 8002a72:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a74:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8002a76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a7a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002a7e:	6813      	ldr	r3, [r2, #0]
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e005      	b.n	8002a94 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a88:	f7fe fd84 	bl	8001594 <HAL_GetTick>
 8002a8c:	1b43      	subs	r3, r0, r5
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	f200 80e5 	bhi.w	8002c5e <HAL_DMA_Init+0x296>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	07d2      	lsls	r2, r2, #31
 8002a9a:	d4f5      	bmi.n	8002a88 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8002a9c:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8002aa2:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002aa4:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aac:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aae:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	69a1      	ldr	r1, [r4, #24]
 8002ab4:	ea42 0201 	orr.w	r2, r2, r1
 8002ab8:	69e1      	ldr	r1, [r4, #28]
 8002aba:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8002abe:	6a21      	ldr	r1, [r4, #32]
 8002ac0:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ac4:	496c      	ldr	r1, [pc, #432]	; (8002c78 <HAL_DMA_Init+0x2b0>)
 8002ac6:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 8002aca:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ace:	d103      	bne.n	8002ad8 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ad0:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8002ad4:	4301      	orrs	r1, r0
 8002ad6:	430a      	orrs	r2, r1
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ad8:	6861      	ldr	r1, [r4, #4]
 8002ada:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8002ade:	281f      	cmp	r0, #31
 8002ae0:	f240 80d4 	bls.w	8002c8c <HAL_DMA_Init+0x2c4>
 8002ae4:	f1a1 004f 	sub.w	r0, r1, #79	; 0x4f
 8002ae8:	2803      	cmp	r0, #3
 8002aea:	f200 80d5 	bhi.w	8002c98 <HAL_DMA_Init+0x2d0>
        registerValue |= DMA_SxCR_TRBUFF;
 8002aee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002af2:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002af4:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8002af6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002af8:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002afa:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002afc:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002b00:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b04:	d10e      	bne.n	8002b24 <HAL_DMA_Init+0x15c>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b06:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8002b0a:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b0c:	b150      	cbz	r0, 8002b24 <HAL_DMA_Init+0x15c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b0e:	69a5      	ldr	r5, [r4, #24]
 8002b10:	2d00      	cmp	r5, #0
 8002b12:	f040 8108 	bne.w	8002d26 <HAL_DMA_Init+0x35e>
    switch (hdma->Init.FIFOThreshold)
 8002b16:	2a01      	cmp	r2, #1
 8002b18:	f000 8126 	beq.w	8002d68 <HAL_DMA_Init+0x3a0>
 8002b1c:	f032 0202 	bics.w	r2, r2, #2
 8002b20:	f000 8109 	beq.w	8002d36 <HAL_DMA_Init+0x36e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002b24:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b26:	4620      	mov	r0, r4
 8002b28:	f7ff fe68 	bl	80027fc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b2c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002b2e:	233f      	movs	r3, #63	; 0x3f
 8002b30:	f002 021f 	and.w	r2, r2, #31
 8002b34:	4093      	lsls	r3, r2
 8002b36:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b38:	6822      	ldr	r2, [r4, #0]
 8002b3a:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <HAL_DMA_Init+0x2a4>)
 8002b3c:	484f      	ldr	r0, [pc, #316]	; (8002c7c <HAL_DMA_Init+0x2b4>)
 8002b3e:	494c      	ldr	r1, [pc, #304]	; (8002c70 <HAL_DMA_Init+0x2a8>)
 8002b40:	4282      	cmp	r2, r0
 8002b42:	bf18      	it	ne
 8002b44:	429a      	cmpne	r2, r3
 8002b46:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	428a      	cmp	r2, r1
 8002b52:	bf08      	it	eq
 8002b54:	f043 0301 	orreq.w	r3, r3, #1
 8002b58:	3130      	adds	r1, #48	; 0x30
 8002b5a:	4282      	cmp	r2, r0
 8002b5c:	bf08      	it	eq
 8002b5e:	f043 0301 	orreq.w	r3, r3, #1
 8002b62:	3030      	adds	r0, #48	; 0x30
 8002b64:	428a      	cmp	r2, r1
 8002b66:	bf08      	it	eq
 8002b68:	f043 0301 	orreq.w	r3, r3, #1
 8002b6c:	3130      	adds	r1, #48	; 0x30
 8002b6e:	4282      	cmp	r2, r0
 8002b70:	bf08      	it	eq
 8002b72:	f043 0301 	orreq.w	r3, r3, #1
 8002b76:	3030      	adds	r0, #48	; 0x30
 8002b78:	428a      	cmp	r2, r1
 8002b7a:	bf08      	it	eq
 8002b7c:	f043 0301 	orreq.w	r3, r3, #1
 8002b80:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002b84:	4282      	cmp	r2, r0
 8002b86:	bf08      	it	eq
 8002b88:	f043 0301 	orreq.w	r3, r3, #1
 8002b8c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002b90:	428a      	cmp	r2, r1
 8002b92:	bf08      	it	eq
 8002b94:	f043 0301 	orreq.w	r3, r3, #1
 8002b98:	3130      	adds	r1, #48	; 0x30
 8002b9a:	4282      	cmp	r2, r0
 8002b9c:	bf08      	it	eq
 8002b9e:	f043 0301 	orreq.w	r3, r3, #1
 8002ba2:	3030      	adds	r0, #48	; 0x30
 8002ba4:	428a      	cmp	r2, r1
 8002ba6:	bf08      	it	eq
 8002ba8:	f043 0301 	orreq.w	r3, r3, #1
 8002bac:	3130      	adds	r1, #48	; 0x30
 8002bae:	4282      	cmp	r2, r0
 8002bb0:	bf08      	it	eq
 8002bb2:	f043 0301 	orreq.w	r3, r3, #1
 8002bb6:	3030      	adds	r0, #48	; 0x30
 8002bb8:	428a      	cmp	r2, r1
 8002bba:	bf08      	it	eq
 8002bbc:	f043 0301 	orreq.w	r3, r3, #1
 8002bc0:	3130      	adds	r1, #48	; 0x30
 8002bc2:	4282      	cmp	r2, r0
 8002bc4:	bf08      	it	eq
 8002bc6:	f043 0301 	orreq.w	r3, r3, #1
 8002bca:	3030      	adds	r0, #48	; 0x30
 8002bcc:	428a      	cmp	r2, r1
 8002bce:	bf08      	it	eq
 8002bd0:	f043 0301 	orreq.w	r3, r3, #1
 8002bd4:	492a      	ldr	r1, [pc, #168]	; (8002c80 <HAL_DMA_Init+0x2b8>)
 8002bd6:	4282      	cmp	r2, r0
 8002bd8:	bf08      	it	eq
 8002bda:	f043 0301 	orreq.w	r3, r3, #1
 8002bde:	4829      	ldr	r0, [pc, #164]	; (8002c84 <HAL_DMA_Init+0x2bc>)
 8002be0:	428a      	cmp	r2, r1
 8002be2:	bf08      	it	eq
 8002be4:	f043 0301 	orreq.w	r3, r3, #1
 8002be8:	3128      	adds	r1, #40	; 0x28
 8002bea:	4282      	cmp	r2, r0
 8002bec:	bf08      	it	eq
 8002bee:	f043 0301 	orreq.w	r3, r3, #1
 8002bf2:	3028      	adds	r0, #40	; 0x28
 8002bf4:	428a      	cmp	r2, r1
 8002bf6:	bf08      	it	eq
 8002bf8:	f043 0301 	orreq.w	r3, r3, #1
 8002bfc:	3128      	adds	r1, #40	; 0x28
 8002bfe:	4282      	cmp	r2, r0
 8002c00:	bf08      	it	eq
 8002c02:	f043 0301 	orreq.w	r3, r3, #1
 8002c06:	3028      	adds	r0, #40	; 0x28
 8002c08:	428a      	cmp	r2, r1
 8002c0a:	bf08      	it	eq
 8002c0c:	f043 0301 	orreq.w	r3, r3, #1
 8002c10:	3128      	adds	r1, #40	; 0x28
 8002c12:	4282      	cmp	r2, r0
 8002c14:	bf08      	it	eq
 8002c16:	f043 0301 	orreq.w	r3, r3, #1
 8002c1a:	428a      	cmp	r2, r1
 8002c1c:	bf08      	it	eq
 8002c1e:	f043 0301 	orreq.w	r3, r3, #1
 8002c22:	b913      	cbnz	r3, 8002c2a <HAL_DMA_Init+0x262>
 8002c24:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <HAL_DMA_Init+0x2c0>)
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d113      	bne.n	8002c52 <HAL_DMA_Init+0x28a>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7ff fe60 	bl	80028f0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c30:	68a3      	ldr	r3, [r4, #8]
 8002c32:	2b80      	cmp	r3, #128	; 0x80
 8002c34:	d037      	beq.n	8002ca6 <HAL_DMA_Init+0x2de>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c36:	7922      	ldrb	r2, [r4, #4]
 8002c38:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002c3a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c3c:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8002c40:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c42:	6861      	ldr	r1, [r4, #4]
 8002c44:	1e4b      	subs	r3, r1, #1
 8002c46:	2b07      	cmp	r3, #7
 8002c48:	d931      	bls.n	8002cae <HAL_DMA_Init+0x2e6>
      hdma->DMAmuxRequestGen = 0U;
 8002c4a:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c4c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c50:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c52:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002c54:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c56:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002c58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002c5c:	bd38      	pop	{r3, r4, r5, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c5e:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c60:	2303      	movs	r3, #3
        return HAL_ERROR;
 8002c62:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c64:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c66:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
 8002c6c:	40020010 	.word	0x40020010
 8002c70:	40020040 	.word	0x40020040
 8002c74:	400204b8 	.word	0x400204b8
 8002c78:	fe10803f 	.word	0xfe10803f
 8002c7c:	40020028 	.word	0x40020028
 8002c80:	58025408 	.word	0x58025408
 8002c84:	5802541c 	.word	0x5802541c
 8002c88:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c8c:	4d6c      	ldr	r5, [pc, #432]	; (8002e40 <HAL_DMA_Init+0x478>)
 8002c8e:	fa25 f000 	lsr.w	r0, r5, r0
 8002c92:	07c0      	lsls	r0, r0, #31
 8002c94:	f53f af2b 	bmi.w	8002aee <HAL_DMA_Init+0x126>
 8002c98:	3974      	subs	r1, #116	; 0x74
 8002c9a:	2903      	cmp	r1, #3
 8002c9c:	f63f af29 	bhi.w	8002af2 <HAL_DMA_Init+0x12a>
 8002ca0:	e725      	b.n	8002aee <HAL_DMA_Init+0x126>
    return HAL_ERROR;
 8002ca2:	2001      	movs	r0, #1
}
 8002ca4:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	6063      	str	r3, [r4, #4]
 8002cac:	e7c4      	b.n	8002c38 <HAL_DMA_Init+0x270>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cae:	6820      	ldr	r0, [r4, #0]
 8002cb0:	4a64      	ldr	r2, [pc, #400]	; (8002e44 <HAL_DMA_Init+0x47c>)
 8002cb2:	4d65      	ldr	r5, [pc, #404]	; (8002e48 <HAL_DMA_Init+0x480>)
 8002cb4:	42a8      	cmp	r0, r5
 8002cb6:	bf18      	it	ne
 8002cb8:	4290      	cmpne	r0, r2
 8002cba:	f105 0514 	add.w	r5, r5, #20
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2201      	moveq	r2, #1
 8002cc2:	2200      	movne	r2, #0
 8002cc4:	42a8      	cmp	r0, r5
 8002cc6:	bf08      	it	eq
 8002cc8:	f042 0201 	orreq.w	r2, r2, #1
 8002ccc:	3514      	adds	r5, #20
 8002cce:	42a8      	cmp	r0, r5
 8002cd0:	bf08      	it	eq
 8002cd2:	f042 0201 	orreq.w	r2, r2, #1
 8002cd6:	3514      	adds	r5, #20
 8002cd8:	42a8      	cmp	r0, r5
 8002cda:	bf08      	it	eq
 8002cdc:	f042 0201 	orreq.w	r2, r2, #1
 8002ce0:	3514      	adds	r5, #20
 8002ce2:	42a8      	cmp	r0, r5
 8002ce4:	bf08      	it	eq
 8002ce6:	f042 0201 	orreq.w	r2, r2, #1
 8002cea:	3514      	adds	r5, #20
 8002cec:	42a8      	cmp	r0, r5
 8002cee:	bf08      	it	eq
 8002cf0:	f042 0201 	orreq.w	r2, r2, #1
 8002cf4:	b93a      	cbnz	r2, 8002d06 <HAL_DMA_Init+0x33e>
 8002cf6:	4a55      	ldr	r2, [pc, #340]	; (8002e4c <HAL_DMA_Init+0x484>)
 8002cf8:	4290      	cmp	r0, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_DMA_Init+0x33e>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cfc:	4a54      	ldr	r2, [pc, #336]	; (8002e50 <HAL_DMA_Init+0x488>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cfe:	4855      	ldr	r0, [pc, #340]	; (8002e54 <HAL_DMA_Init+0x48c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d00:	440a      	add	r2, r1
 8002d02:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d04:	e003      	b.n	8002d0e <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d06:	4a54      	ldr	r2, [pc, #336]	; (8002e58 <HAL_DMA_Init+0x490>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002d08:	4854      	ldr	r0, [pc, #336]	; (8002e5c <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d0a:	440a      	add	r2, r1
 8002d0c:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d14:	2100      	movs	r1, #0
 8002d16:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002d1a:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d1c:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d1e:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	e795      	b.n	8002c52 <HAL_DMA_Init+0x28a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d26:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8002d2a:	d00e      	beq.n	8002d4a <HAL_DMA_Init+0x382>
    switch (hdma->Init.FIFOThreshold)
 8002d2c:	2a02      	cmp	r2, #2
 8002d2e:	d905      	bls.n	8002d3c <HAL_DMA_Init+0x374>
 8002d30:	2a03      	cmp	r2, #3
 8002d32:	f47f aef7 	bne.w	8002b24 <HAL_DMA_Init+0x15c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d36:	01c2      	lsls	r2, r0, #7
 8002d38:	f57f aef4 	bpl.w	8002b24 <HAL_DMA_Init+0x15c>
          hdma->State = HAL_DMA_STATE_READY;
 8002d3c:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d3e:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8002d40:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d42:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002d44:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002d48:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8002d4a:	2a03      	cmp	r2, #3
 8002d4c:	f63f aeea 	bhi.w	8002b24 <HAL_DMA_Init+0x15c>
 8002d50:	a501      	add	r5, pc, #4	; (adr r5, 8002d58 <HAL_DMA_Init+0x390>)
 8002d52:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d3d 	.word	0x08002d3d
 8002d5c:	08002d37 	.word	0x08002d37
 8002d60:	08002d3d 	.word	0x08002d3d
 8002d64:	08002d69 	.word	0x08002d69
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d68:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002d6c:	f47f aeda 	bne.w	8002b24 <HAL_DMA_Init+0x15c>
 8002d70:	e7e4      	b.n	8002d3c <HAL_DMA_Init+0x374>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d72:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <HAL_DMA_Init+0x47c>)
 8002d74:	4834      	ldr	r0, [pc, #208]	; (8002e48 <HAL_DMA_Init+0x480>)
 8002d76:	493a      	ldr	r1, [pc, #232]	; (8002e60 <HAL_DMA_Init+0x498>)
 8002d78:	4282      	cmp	r2, r0
 8002d7a:	bf18      	it	ne
 8002d7c:	429a      	cmpne	r2, r3
 8002d7e:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	428a      	cmp	r2, r1
 8002d8a:	bf08      	it	eq
 8002d8c:	f043 0301 	orreq.w	r3, r3, #1
 8002d90:	3128      	adds	r1, #40	; 0x28
 8002d92:	4282      	cmp	r2, r0
 8002d94:	bf08      	it	eq
 8002d96:	f043 0301 	orreq.w	r3, r3, #1
 8002d9a:	3028      	adds	r0, #40	; 0x28
 8002d9c:	428a      	cmp	r2, r1
 8002d9e:	bf08      	it	eq
 8002da0:	f043 0301 	orreq.w	r3, r3, #1
 8002da4:	3128      	adds	r1, #40	; 0x28
 8002da6:	4282      	cmp	r2, r0
 8002da8:	bf08      	it	eq
 8002daa:	f043 0301 	orreq.w	r3, r3, #1
 8002dae:	428a      	cmp	r2, r1
 8002db0:	bf08      	it	eq
 8002db2:	f043 0301 	orreq.w	r3, r3, #1
 8002db6:	b913      	cbnz	r3, 8002dbe <HAL_DMA_Init+0x3f6>
 8002db8:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <HAL_DMA_Init+0x484>)
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d139      	bne.n	8002e32 <HAL_DMA_Init+0x46a>
    __HAL_UNLOCK(hdma);
 8002dbe:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dc0:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002dc2:	4928      	ldr	r1, [pc, #160]	; (8002e64 <HAL_DMA_Init+0x49c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dc4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002dc8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002dcc:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002dce:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dd0:	68a3      	ldr	r3, [r4, #8]
 8002dd2:	2b40      	cmp	r3, #64	; 0x40
 8002dd4:	d02b      	beq.n	8002e2e <HAL_DMA_Init+0x466>
 8002dd6:	2b80      	cmp	r3, #128	; 0x80
 8002dd8:	bf0c      	ite	eq
 8002dda:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8002dde:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002de0:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8002de4:	08db      	lsrs	r3, r3, #3
 8002de6:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002dea:	6965      	ldr	r5, [r4, #20]
 8002dec:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002df0:	69a5      	ldr	r5, [r4, #24]
 8002df2:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002df6:	69e5      	ldr	r5, [r4, #28]
 8002df8:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002dfc:	6a25      	ldr	r5, [r4, #32]
 8002dfe:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8002e02:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e04:	4918      	ldr	r1, [pc, #96]	; (8002e68 <HAL_DMA_Init+0x4a0>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e06:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e08:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e0a:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e0c:	6822      	ldr	r2, [r4, #0]
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_DMA_Init+0x4a4>)
 8002e10:	4411      	add	r1, r2
 8002e12:	fba3 2301 	umull	r2, r3, r3, r1
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e1c:	f7ff fcee 	bl	80027fc <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e22:	2301      	movs	r3, #1
 8002e24:	f002 021f 	and.w	r2, r2, #31
 8002e28:	4093      	lsls	r3, r2
 8002e2a:	6043      	str	r3, [r0, #4]
 8002e2c:	e684      	b.n	8002b38 <HAL_DMA_Init+0x170>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e2e:	2010      	movs	r0, #16
 8002e30:	e7d6      	b.n	8002de0 <HAL_DMA_Init+0x418>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e32:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e34:	2303      	movs	r3, #3
    return HAL_ERROR;
 8002e36:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e38:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002e3e:	bd38      	pop	{r3, r4, r5, pc}
 8002e40:	c3c0003f 	.word	0xc3c0003f
 8002e44:	58025408 	.word	0x58025408
 8002e48:	5802541c 	.word	0x5802541c
 8002e4c:	58025494 	.word	0x58025494
 8002e50:	1000823f 	.word	0x1000823f
 8002e54:	40020940 	.word	0x40020940
 8002e58:	1600963f 	.word	0x1600963f
 8002e5c:	58025940 	.word	0x58025940
 8002e60:	58025430 	.word	0x58025430
 8002e64:	fffe000f 	.word	0xfffe000f
 8002e68:	a7fdabf8 	.word	0xa7fdabf8
 8002e6c:	cccccccd 	.word	0xcccccccd

08002e70 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8002e70:	2800      	cmp	r0, #0
 8002e72:	f000 8270 	beq.w	8003356 <HAL_DMA_Start_IT+0x4e6>
 8002e76:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8002e78:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002e7c:	2801      	cmp	r0, #1
 8002e7e:	f000 826c 	beq.w	800335a <HAL_DMA_Start_IT+0x4ea>
 8002e82:	2001      	movs	r0, #1
{
 8002e84:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e86:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002e8a:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e8e:	4284      	cmp	r4, r0
 8002e90:	d008      	beq.n	8002ea4 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8002e96:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e98:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002e9c:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8002ea0:	bc70      	pop	{r4, r5, r6}
 8002ea2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea4:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8002ea6:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eaa:	4ea2      	ldr	r6, [pc, #648]	; (8003134 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eac:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8002eb6:	6820      	ldr	r0, [r4, #0]
 8002eb8:	f020 0001 	bic.w	r0, r0, #1
 8002ebc:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ebe:	489e      	ldr	r0, [pc, #632]	; (8003138 <HAL_DMA_Start_IT+0x2c8>)
 8002ec0:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec4:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ec8:	42b4      	cmp	r4, r6
 8002eca:	bf18      	it	ne
 8002ecc:	4284      	cmpne	r4, r0
 8002ece:	f106 0618 	add.w	r6, r6, #24
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2001      	moveq	r0, #1
 8002ed6:	2000      	movne	r0, #0
 8002ed8:	42b4      	cmp	r4, r6
 8002eda:	bf08      	it	eq
 8002edc:	f040 0001 	orreq.w	r0, r0, #1
 8002ee0:	3618      	adds	r6, #24
 8002ee2:	42b4      	cmp	r4, r6
 8002ee4:	bf08      	it	eq
 8002ee6:	f040 0001 	orreq.w	r0, r0, #1
 8002eea:	3618      	adds	r6, #24
 8002eec:	42b4      	cmp	r4, r6
 8002eee:	bf08      	it	eq
 8002ef0:	f040 0001 	orreq.w	r0, r0, #1
 8002ef4:	3618      	adds	r6, #24
 8002ef6:	42b4      	cmp	r4, r6
 8002ef8:	bf08      	it	eq
 8002efa:	f040 0001 	orreq.w	r0, r0, #1
 8002efe:	3618      	adds	r6, #24
 8002f00:	42b4      	cmp	r4, r6
 8002f02:	bf08      	it	eq
 8002f04:	f040 0001 	orreq.w	r0, r0, #1
 8002f08:	3618      	adds	r6, #24
 8002f0a:	42b4      	cmp	r4, r6
 8002f0c:	bf08      	it	eq
 8002f0e:	f040 0001 	orreq.w	r0, r0, #1
 8002f12:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8002f16:	42b4      	cmp	r4, r6
 8002f18:	bf08      	it	eq
 8002f1a:	f040 0001 	orreq.w	r0, r0, #1
 8002f1e:	3618      	adds	r6, #24
 8002f20:	42b4      	cmp	r4, r6
 8002f22:	bf08      	it	eq
 8002f24:	f040 0001 	orreq.w	r0, r0, #1
 8002f28:	3618      	adds	r6, #24
 8002f2a:	42b4      	cmp	r4, r6
 8002f2c:	bf08      	it	eq
 8002f2e:	f040 0001 	orreq.w	r0, r0, #1
 8002f32:	3618      	adds	r6, #24
 8002f34:	42b4      	cmp	r4, r6
 8002f36:	bf08      	it	eq
 8002f38:	f040 0001 	orreq.w	r0, r0, #1
 8002f3c:	3618      	adds	r6, #24
 8002f3e:	42b4      	cmp	r4, r6
 8002f40:	bf08      	it	eq
 8002f42:	f040 0001 	orreq.w	r0, r0, #1
 8002f46:	3618      	adds	r6, #24
 8002f48:	42b4      	cmp	r4, r6
 8002f4a:	bf08      	it	eq
 8002f4c:	f040 0001 	orreq.w	r0, r0, #1
 8002f50:	3618      	adds	r6, #24
 8002f52:	42b4      	cmp	r4, r6
 8002f54:	bf08      	it	eq
 8002f56:	f040 0001 	orreq.w	r0, r0, #1
 8002f5a:	3618      	adds	r6, #24
 8002f5c:	42b4      	cmp	r4, r6
 8002f5e:	bf08      	it	eq
 8002f60:	f040 0001 	orreq.w	r0, r0, #1
 8002f64:	4e75      	ldr	r6, [pc, #468]	; (800313c <HAL_DMA_Start_IT+0x2cc>)
 8002f66:	42b4      	cmp	r4, r6
 8002f68:	bf08      	it	eq
 8002f6a:	f040 0001 	orreq.w	r0, r0, #1
 8002f6e:	3614      	adds	r6, #20
 8002f70:	42b4      	cmp	r4, r6
 8002f72:	bf08      	it	eq
 8002f74:	f040 0001 	orreq.w	r0, r0, #1
 8002f78:	3614      	adds	r6, #20
 8002f7a:	42b4      	cmp	r4, r6
 8002f7c:	bf08      	it	eq
 8002f7e:	f040 0001 	orreq.w	r0, r0, #1
 8002f82:	3614      	adds	r6, #20
 8002f84:	42b4      	cmp	r4, r6
 8002f86:	bf08      	it	eq
 8002f88:	f040 0001 	orreq.w	r0, r0, #1
 8002f8c:	3614      	adds	r6, #20
 8002f8e:	42b4      	cmp	r4, r6
 8002f90:	bf08      	it	eq
 8002f92:	f040 0001 	orreq.w	r0, r0, #1
 8002f96:	3614      	adds	r6, #20
 8002f98:	42b4      	cmp	r4, r6
 8002f9a:	bf08      	it	eq
 8002f9c:	f040 0001 	orreq.w	r0, r0, #1
 8002fa0:	3614      	adds	r6, #20
 8002fa2:	42b4      	cmp	r4, r6
 8002fa4:	bf08      	it	eq
 8002fa6:	f040 0001 	orreq.w	r0, r0, #1
 8002faa:	b910      	cbnz	r0, 8002fb2 <HAL_DMA_Start_IT+0x142>
 8002fac:	4864      	ldr	r0, [pc, #400]	; (8003140 <HAL_DMA_Start_IT+0x2d0>)
 8002fae:	4284      	cmp	r4, r0
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fb2:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 8002fb6:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002fb8:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8002fbc:	b110      	cbz	r0, 8002fc4 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fbe:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 8002fc2:	6044      	str	r4, [r0, #4]
 8002fc4:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fc8:	485b      	ldr	r0, [pc, #364]	; (8003138 <HAL_DMA_Start_IT+0x2c8>)
 8002fca:	4e5a      	ldr	r6, [pc, #360]	; (8003134 <HAL_DMA_Start_IT+0x2c4>)
 8002fcc:	42b4      	cmp	r4, r6
 8002fce:	bf18      	it	ne
 8002fd0:	4284      	cmpne	r4, r0
 8002fd2:	f106 0618 	add.w	r6, r6, #24
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2001      	moveq	r0, #1
 8002fda:	2000      	movne	r0, #0
 8002fdc:	42b4      	cmp	r4, r6
 8002fde:	bf08      	it	eq
 8002fe0:	f040 0001 	orreq.w	r0, r0, #1
 8002fe4:	3618      	adds	r6, #24
 8002fe6:	42b4      	cmp	r4, r6
 8002fe8:	bf08      	it	eq
 8002fea:	f040 0001 	orreq.w	r0, r0, #1
 8002fee:	3618      	adds	r6, #24
 8002ff0:	42b4      	cmp	r4, r6
 8002ff2:	bf08      	it	eq
 8002ff4:	f040 0001 	orreq.w	r0, r0, #1
 8002ff8:	3618      	adds	r6, #24
 8002ffa:	42b4      	cmp	r4, r6
 8002ffc:	bf08      	it	eq
 8002ffe:	f040 0001 	orreq.w	r0, r0, #1
 8003002:	3618      	adds	r6, #24
 8003004:	42b4      	cmp	r4, r6
 8003006:	bf08      	it	eq
 8003008:	f040 0001 	orreq.w	r0, r0, #1
 800300c:	3618      	adds	r6, #24
 800300e:	42b4      	cmp	r4, r6
 8003010:	bf08      	it	eq
 8003012:	f040 0001 	orreq.w	r0, r0, #1
 8003016:	f506 7656 	add.w	r6, r6, #856	; 0x358
 800301a:	42b4      	cmp	r4, r6
 800301c:	bf08      	it	eq
 800301e:	f040 0001 	orreq.w	r0, r0, #1
 8003022:	3618      	adds	r6, #24
 8003024:	42b4      	cmp	r4, r6
 8003026:	bf08      	it	eq
 8003028:	f040 0001 	orreq.w	r0, r0, #1
 800302c:	3618      	adds	r6, #24
 800302e:	42b4      	cmp	r4, r6
 8003030:	bf08      	it	eq
 8003032:	f040 0001 	orreq.w	r0, r0, #1
 8003036:	3618      	adds	r6, #24
 8003038:	42b4      	cmp	r4, r6
 800303a:	bf08      	it	eq
 800303c:	f040 0001 	orreq.w	r0, r0, #1
 8003040:	3618      	adds	r6, #24
 8003042:	42b4      	cmp	r4, r6
 8003044:	bf08      	it	eq
 8003046:	f040 0001 	orreq.w	r0, r0, #1
 800304a:	3618      	adds	r6, #24
 800304c:	42b4      	cmp	r4, r6
 800304e:	bf08      	it	eq
 8003050:	f040 0001 	orreq.w	r0, r0, #1
 8003054:	3618      	adds	r6, #24
 8003056:	42b4      	cmp	r4, r6
 8003058:	bf08      	it	eq
 800305a:	f040 0001 	orreq.w	r0, r0, #1
 800305e:	b918      	cbnz	r0, 8003068 <HAL_DMA_Start_IT+0x1f8>
 8003060:	4838      	ldr	r0, [pc, #224]	; (8003144 <HAL_DMA_Start_IT+0x2d4>)
 8003062:	4284      	cmp	r4, r0
 8003064:	f040 817b 	bne.w	800335e <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003068:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800306c:	f000 041f 	and.w	r4, r0, #31
 8003070:	203f      	movs	r0, #63	; 0x3f
 8003072:	40a0      	lsls	r0, r4
 8003074:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003076:	f8dc 4000 	ldr.w	r4, [ip]
 800307a:	6820      	ldr	r0, [r4, #0]
 800307c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8003080:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003082:	f8dc 0000 	ldr.w	r0, [ip]
 8003086:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003088:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800308c:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800308e:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003092:	f000 815b 	beq.w	800334c <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003096:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003098:	f8dc 3000 	ldr.w	r3, [ip]
 800309c:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800309e:	f8dc 4000 	ldr.w	r4, [ip]
 80030a2:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_DMA_Start_IT+0x2c8>)
 80030a4:	4923      	ldr	r1, [pc, #140]	; (8003134 <HAL_DMA_Start_IT+0x2c4>)
 80030a6:	4a28      	ldr	r2, [pc, #160]	; (8003148 <HAL_DMA_Start_IT+0x2d8>)
 80030a8:	428c      	cmp	r4, r1
 80030aa:	bf18      	it	ne
 80030ac:	429c      	cmpne	r4, r3
 80030ae:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	4294      	cmp	r4, r2
 80030ba:	bf08      	it	eq
 80030bc:	f043 0301 	orreq.w	r3, r3, #1
 80030c0:	3230      	adds	r2, #48	; 0x30
 80030c2:	428c      	cmp	r4, r1
 80030c4:	bf08      	it	eq
 80030c6:	f043 0301 	orreq.w	r3, r3, #1
 80030ca:	3130      	adds	r1, #48	; 0x30
 80030cc:	4294      	cmp	r4, r2
 80030ce:	bf08      	it	eq
 80030d0:	f043 0301 	orreq.w	r3, r3, #1
 80030d4:	3230      	adds	r2, #48	; 0x30
 80030d6:	428c      	cmp	r4, r1
 80030d8:	bf08      	it	eq
 80030da:	f043 0301 	orreq.w	r3, r3, #1
 80030de:	3130      	adds	r1, #48	; 0x30
 80030e0:	4294      	cmp	r4, r2
 80030e2:	bf08      	it	eq
 80030e4:	f043 0301 	orreq.w	r3, r3, #1
 80030e8:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80030ec:	428c      	cmp	r4, r1
 80030ee:	bf08      	it	eq
 80030f0:	f043 0301 	orreq.w	r3, r3, #1
 80030f4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80030f8:	4294      	cmp	r4, r2
 80030fa:	bf08      	it	eq
 80030fc:	f043 0301 	orreq.w	r3, r3, #1
 8003100:	3230      	adds	r2, #48	; 0x30
 8003102:	428c      	cmp	r4, r1
 8003104:	bf08      	it	eq
 8003106:	f043 0301 	orreq.w	r3, r3, #1
 800310a:	3130      	adds	r1, #48	; 0x30
 800310c:	4294      	cmp	r4, r2
 800310e:	bf08      	it	eq
 8003110:	f043 0301 	orreq.w	r3, r3, #1
 8003114:	3230      	adds	r2, #48	; 0x30
 8003116:	428c      	cmp	r4, r1
 8003118:	bf08      	it	eq
 800311a:	f043 0301 	orreq.w	r3, r3, #1
 800311e:	3130      	adds	r1, #48	; 0x30
 8003120:	4294      	cmp	r4, r2
 8003122:	bf08      	it	eq
 8003124:	f043 0301 	orreq.w	r3, r3, #1
 8003128:	3230      	adds	r2, #48	; 0x30
 800312a:	428c      	cmp	r4, r1
 800312c:	bf08      	it	eq
 800312e:	f043 0301 	orreq.w	r3, r3, #1
 8003132:	e00b      	b.n	800314c <HAL_DMA_Start_IT+0x2dc>
 8003134:	40020028 	.word	0x40020028
 8003138:	40020010 	.word	0x40020010
 800313c:	58025408 	.word	0x58025408
 8003140:	58025494 	.word	0x58025494
 8003144:	400204b8 	.word	0x400204b8
 8003148:	40020040 	.word	0x40020040
 800314c:	4294      	cmp	r4, r2
 800314e:	bf08      	it	eq
 8003150:	f043 0301 	orreq.w	r3, r3, #1
 8003154:	b91b      	cbnz	r3, 800315e <HAL_DMA_Start_IT+0x2ee>
 8003156:	4b9b      	ldr	r3, [pc, #620]	; (80033c4 <HAL_DMA_Start_IT+0x554>)
 8003158:	429c      	cmp	r4, r3
 800315a:	f040 8143 	bne.w	80033e4 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	f023 031e 	bic.w	r3, r3, #30
 8003164:	f043 0316 	orr.w	r3, r3, #22
 8003168:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800316a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800316e:	b12b      	cbz	r3, 800317c <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003170:	f8dc 2000 	ldr.w	r2, [ip]
 8003174:	6813      	ldr	r3, [r2, #0]
 8003176:	f043 0308 	orr.w	r3, r3, #8
 800317a:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800317c:	f8dc 4000 	ldr.w	r4, [ip]
 8003180:	4b91      	ldr	r3, [pc, #580]	; (80033c8 <HAL_DMA_Start_IT+0x558>)
 8003182:	4992      	ldr	r1, [pc, #584]	; (80033cc <HAL_DMA_Start_IT+0x55c>)
 8003184:	4a92      	ldr	r2, [pc, #584]	; (80033d0 <HAL_DMA_Start_IT+0x560>)
 8003186:	428c      	cmp	r4, r1
 8003188:	bf18      	it	ne
 800318a:	429c      	cmpne	r4, r3
 800318c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	4294      	cmp	r4, r2
 8003198:	bf08      	it	eq
 800319a:	f043 0301 	orreq.w	r3, r3, #1
 800319e:	3230      	adds	r2, #48	; 0x30
 80031a0:	428c      	cmp	r4, r1
 80031a2:	bf08      	it	eq
 80031a4:	f043 0301 	orreq.w	r3, r3, #1
 80031a8:	3130      	adds	r1, #48	; 0x30
 80031aa:	4294      	cmp	r4, r2
 80031ac:	bf08      	it	eq
 80031ae:	f043 0301 	orreq.w	r3, r3, #1
 80031b2:	3230      	adds	r2, #48	; 0x30
 80031b4:	428c      	cmp	r4, r1
 80031b6:	bf08      	it	eq
 80031b8:	f043 0301 	orreq.w	r3, r3, #1
 80031bc:	3130      	adds	r1, #48	; 0x30
 80031be:	4294      	cmp	r4, r2
 80031c0:	bf08      	it	eq
 80031c2:	f043 0301 	orreq.w	r3, r3, #1
 80031c6:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80031ca:	428c      	cmp	r4, r1
 80031cc:	bf08      	it	eq
 80031ce:	f043 0301 	orreq.w	r3, r3, #1
 80031d2:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80031d6:	4294      	cmp	r4, r2
 80031d8:	bf08      	it	eq
 80031da:	f043 0301 	orreq.w	r3, r3, #1
 80031de:	3230      	adds	r2, #48	; 0x30
 80031e0:	428c      	cmp	r4, r1
 80031e2:	bf08      	it	eq
 80031e4:	f043 0301 	orreq.w	r3, r3, #1
 80031e8:	3130      	adds	r1, #48	; 0x30
 80031ea:	4294      	cmp	r4, r2
 80031ec:	bf08      	it	eq
 80031ee:	f043 0301 	orreq.w	r3, r3, #1
 80031f2:	3230      	adds	r2, #48	; 0x30
 80031f4:	428c      	cmp	r4, r1
 80031f6:	bf08      	it	eq
 80031f8:	f043 0301 	orreq.w	r3, r3, #1
 80031fc:	3130      	adds	r1, #48	; 0x30
 80031fe:	4294      	cmp	r4, r2
 8003200:	bf08      	it	eq
 8003202:	f043 0301 	orreq.w	r3, r3, #1
 8003206:	3230      	adds	r2, #48	; 0x30
 8003208:	428c      	cmp	r4, r1
 800320a:	bf08      	it	eq
 800320c:	f043 0301 	orreq.w	r3, r3, #1
 8003210:	3130      	adds	r1, #48	; 0x30
 8003212:	4294      	cmp	r4, r2
 8003214:	bf08      	it	eq
 8003216:	f043 0301 	orreq.w	r3, r3, #1
 800321a:	4a6e      	ldr	r2, [pc, #440]	; (80033d4 <HAL_DMA_Start_IT+0x564>)
 800321c:	428c      	cmp	r4, r1
 800321e:	bf08      	it	eq
 8003220:	f043 0301 	orreq.w	r3, r3, #1
 8003224:	496c      	ldr	r1, [pc, #432]	; (80033d8 <HAL_DMA_Start_IT+0x568>)
 8003226:	4294      	cmp	r4, r2
 8003228:	bf08      	it	eq
 800322a:	f043 0301 	orreq.w	r3, r3, #1
 800322e:	3228      	adds	r2, #40	; 0x28
 8003230:	428c      	cmp	r4, r1
 8003232:	bf08      	it	eq
 8003234:	f043 0301 	orreq.w	r3, r3, #1
 8003238:	3128      	adds	r1, #40	; 0x28
 800323a:	4294      	cmp	r4, r2
 800323c:	bf08      	it	eq
 800323e:	f043 0301 	orreq.w	r3, r3, #1
 8003242:	3228      	adds	r2, #40	; 0x28
 8003244:	428c      	cmp	r4, r1
 8003246:	bf08      	it	eq
 8003248:	f043 0301 	orreq.w	r3, r3, #1
 800324c:	3128      	adds	r1, #40	; 0x28
 800324e:	4294      	cmp	r4, r2
 8003250:	bf08      	it	eq
 8003252:	f043 0301 	orreq.w	r3, r3, #1
 8003256:	3228      	adds	r2, #40	; 0x28
 8003258:	428c      	cmp	r4, r1
 800325a:	bf08      	it	eq
 800325c:	f043 0301 	orreq.w	r3, r3, #1
 8003260:	4294      	cmp	r4, r2
 8003262:	bf08      	it	eq
 8003264:	f043 0301 	orreq.w	r3, r3, #1
 8003268:	b913      	cbnz	r3, 8003270 <HAL_DMA_Start_IT+0x400>
 800326a:	4b5c      	ldr	r3, [pc, #368]	; (80033dc <HAL_DMA_Start_IT+0x56c>)
 800326c:	429c      	cmp	r4, r3
 800326e:	d111      	bne.n	8003294 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003270:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	03d2      	lsls	r2, r2, #15
 8003278:	d503      	bpl.n	8003282 <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003280:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8003282:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 8003286:	b11b      	cbz	r3, 8003290 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 8003294:	4b4c      	ldr	r3, [pc, #304]	; (80033c8 <HAL_DMA_Start_IT+0x558>)
 8003296:	494d      	ldr	r1, [pc, #308]	; (80033cc <HAL_DMA_Start_IT+0x55c>)
 8003298:	4a4d      	ldr	r2, [pc, #308]	; (80033d0 <HAL_DMA_Start_IT+0x560>)
 800329a:	428c      	cmp	r4, r1
 800329c:	bf18      	it	ne
 800329e:	429c      	cmpne	r4, r3
 80032a0:	484f      	ldr	r0, [pc, #316]	; (80033e0 <HAL_DMA_Start_IT+0x570>)
 80032a2:	f101 0160 	add.w	r1, r1, #96	; 0x60
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	4294      	cmp	r4, r2
 80032ae:	bf08      	it	eq
 80032b0:	f043 0301 	orreq.w	r3, r3, #1
 80032b4:	3230      	adds	r2, #48	; 0x30
 80032b6:	4284      	cmp	r4, r0
 80032b8:	bf08      	it	eq
 80032ba:	f043 0301 	orreq.w	r3, r3, #1
 80032be:	3060      	adds	r0, #96	; 0x60
 80032c0:	4294      	cmp	r4, r2
 80032c2:	bf08      	it	eq
 80032c4:	f043 0301 	orreq.w	r3, r3, #1
 80032c8:	3230      	adds	r2, #48	; 0x30
 80032ca:	428c      	cmp	r4, r1
 80032cc:	bf08      	it	eq
 80032ce:	f043 0301 	orreq.w	r3, r3, #1
 80032d2:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 80032d6:	4294      	cmp	r4, r2
 80032d8:	bf08      	it	eq
 80032da:	f043 0301 	orreq.w	r3, r3, #1
 80032de:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80032e2:	4284      	cmp	r4, r0
 80032e4:	bf08      	it	eq
 80032e6:	f043 0301 	orreq.w	r3, r3, #1
 80032ea:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 80032ee:	4294      	cmp	r4, r2
 80032f0:	bf08      	it	eq
 80032f2:	f043 0301 	orreq.w	r3, r3, #1
 80032f6:	3230      	adds	r2, #48	; 0x30
 80032f8:	428c      	cmp	r4, r1
 80032fa:	bf08      	it	eq
 80032fc:	f043 0301 	orreq.w	r3, r3, #1
 8003300:	3160      	adds	r1, #96	; 0x60
 8003302:	4294      	cmp	r4, r2
 8003304:	bf08      	it	eq
 8003306:	f043 0301 	orreq.w	r3, r3, #1
 800330a:	3230      	adds	r2, #48	; 0x30
 800330c:	4284      	cmp	r4, r0
 800330e:	bf08      	it	eq
 8003310:	f043 0301 	orreq.w	r3, r3, #1
 8003314:	4294      	cmp	r4, r2
 8003316:	bf08      	it	eq
 8003318:	f043 0301 	orreq.w	r3, r3, #1
 800331c:	3230      	adds	r2, #48	; 0x30
 800331e:	428c      	cmp	r4, r1
 8003320:	bf08      	it	eq
 8003322:	f043 0301 	orreq.w	r3, r3, #1
 8003326:	4294      	cmp	r4, r2
 8003328:	bf08      	it	eq
 800332a:	f043 0301 	orreq.w	r3, r3, #1
 800332e:	b933      	cbnz	r3, 800333e <HAL_DMA_Start_IT+0x4ce>
 8003330:	3060      	adds	r0, #96	; 0x60
 8003332:	1a20      	subs	r0, r4, r0
 8003334:	fab0 f080 	clz	r0, r0
 8003338:	0940      	lsrs	r0, r0, #5
 800333a:	2800      	cmp	r0, #0
 800333c:	d03d      	beq.n	80033ba <HAL_DMA_Start_IT+0x54a>
 800333e:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6023      	str	r3, [r4, #0]
}
 8003348:	bc70      	pop	{r4, r5, r6}
 800334a:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800334c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800334e:	f8dc 3000 	ldr.w	r3, [ip]
 8003352:	60d9      	str	r1, [r3, #12]
 8003354:	e6a3      	b.n	800309e <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 8003356:	2001      	movs	r0, #1
 8003358:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800335a:	2002      	movs	r0, #2
}
 800335c:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800335e:	481d      	ldr	r0, [pc, #116]	; (80033d4 <HAL_DMA_Start_IT+0x564>)
 8003360:	4e1d      	ldr	r6, [pc, #116]	; (80033d8 <HAL_DMA_Start_IT+0x568>)
 8003362:	42b4      	cmp	r4, r6
 8003364:	bf18      	it	ne
 8003366:	4284      	cmpne	r4, r0
 8003368:	f106 0614 	add.w	r6, r6, #20
 800336c:	bf0c      	ite	eq
 800336e:	2001      	moveq	r0, #1
 8003370:	2000      	movne	r0, #0
 8003372:	42b4      	cmp	r4, r6
 8003374:	bf08      	it	eq
 8003376:	f040 0001 	orreq.w	r0, r0, #1
 800337a:	3614      	adds	r6, #20
 800337c:	42b4      	cmp	r4, r6
 800337e:	bf08      	it	eq
 8003380:	f040 0001 	orreq.w	r0, r0, #1
 8003384:	3614      	adds	r6, #20
 8003386:	42b4      	cmp	r4, r6
 8003388:	bf08      	it	eq
 800338a:	f040 0001 	orreq.w	r0, r0, #1
 800338e:	3614      	adds	r6, #20
 8003390:	42b4      	cmp	r4, r6
 8003392:	bf08      	it	eq
 8003394:	f040 0001 	orreq.w	r0, r0, #1
 8003398:	3614      	adds	r6, #20
 800339a:	42b4      	cmp	r4, r6
 800339c:	bf08      	it	eq
 800339e:	f040 0001 	orreq.w	r0, r0, #1
 80033a2:	b910      	cbnz	r0, 80033aa <HAL_DMA_Start_IT+0x53a>
 80033a4:	480d      	ldr	r0, [pc, #52]	; (80033dc <HAL_DMA_Start_IT+0x56c>)
 80033a6:	4284      	cmp	r4, r0
 80033a8:	d11c      	bne.n	80033e4 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80033aa:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 80033ae:	f000 041f 	and.w	r4, r0, #31
 80033b2:	2001      	movs	r0, #1
 80033b4:	40a0      	lsls	r0, r4
 80033b6:	6068      	str	r0, [r5, #4]
 80033b8:	e663      	b.n	8003082 <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6023      	str	r3, [r4, #0]
 80033c2:	e56d      	b.n	8002ea0 <HAL_DMA_Start_IT+0x30>
 80033c4:	400204b8 	.word	0x400204b8
 80033c8:	40020010 	.word	0x40020010
 80033cc:	40020028 	.word	0x40020028
 80033d0:	40020040 	.word	0x40020040
 80033d4:	58025408 	.word	0x58025408
 80033d8:	5802541c 	.word	0x5802541c
 80033dc:	58025494 	.word	0x58025494
 80033e0:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	f023 030e 	bic.w	r3, r3, #14
 80033ea:	f043 030a 	orr.w	r3, r3, #10
 80033ee:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80033f0:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f43f aec1 	beq.w	800317c <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80033fa:	f8dc 2000 	ldr.w	r2, [ip]
 80033fe:	6813      	ldr	r3, [r2, #0]
 8003400:	f043 0304 	orr.w	r3, r3, #4
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e6b9      	b.n	800317c <HAL_DMA_Start_IT+0x30c>

08003408 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8003408:	2800      	cmp	r0, #0
 800340a:	d065      	beq.n	80034d8 <HAL_DMA_Abort_IT+0xd0>
{
 800340c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003410:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003414:	4603      	mov	r3, r0
 8003416:	2a02      	cmp	r2, #2
 8003418:	d159      	bne.n	80034ce <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800341a:	6801      	ldr	r1, [r0, #0]
 800341c:	4883      	ldr	r0, [pc, #524]	; (800362c <HAL_DMA_Abort_IT+0x224>)
 800341e:	4281      	cmp	r1, r0
 8003420:	d04b      	beq.n	80034ba <HAL_DMA_Abort_IT+0xb2>
 8003422:	4c83      	ldr	r4, [pc, #524]	; (8003630 <HAL_DMA_Abort_IT+0x228>)
 8003424:	42a1      	cmp	r1, r4
 8003426:	d048      	beq.n	80034ba <HAL_DMA_Abort_IT+0xb2>
 8003428:	f8df a228 	ldr.w	sl, [pc, #552]	; 8003654 <HAL_DMA_Abort_IT+0x24c>
 800342c:	f8df b214 	ldr.w	fp, [pc, #532]	; 8003644 <HAL_DMA_Abort_IT+0x23c>
 8003430:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8003658 <HAL_DMA_Abort_IT+0x250>
 8003434:	4559      	cmp	r1, fp
 8003436:	bf18      	it	ne
 8003438:	4551      	cmpne	r1, sl
 800343a:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800365c <HAL_DMA_Abort_IT+0x254>
 800343e:	f8df e220 	ldr.w	lr, [pc, #544]	; 8003660 <HAL_DMA_Abort_IT+0x258>
 8003442:	bf0c      	ite	eq
 8003444:	2201      	moveq	r2, #1
 8003446:	2200      	movne	r2, #0
 8003448:	f8df c218 	ldr.w	ip, [pc, #536]	; 8003664 <HAL_DMA_Abort_IT+0x25c>
 800344c:	4549      	cmp	r1, r9
 800344e:	bf08      	it	eq
 8003450:	f042 0201 	orreq.w	r2, r2, #1
 8003454:	4d77      	ldr	r5, [pc, #476]	; (8003634 <HAL_DMA_Abort_IT+0x22c>)
 8003456:	4f78      	ldr	r7, [pc, #480]	; (8003638 <HAL_DMA_Abort_IT+0x230>)
 8003458:	4541      	cmp	r1, r8
 800345a:	bf08      	it	eq
 800345c:	f042 0201 	orreq.w	r2, r2, #1
 8003460:	4e76      	ldr	r6, [pc, #472]	; (800363c <HAL_DMA_Abort_IT+0x234>)
 8003462:	4571      	cmp	r1, lr
 8003464:	bf08      	it	eq
 8003466:	f042 0201 	orreq.w	r2, r2, #1
 800346a:	4561      	cmp	r1, ip
 800346c:	bf08      	it	eq
 800346e:	f042 0201 	orreq.w	r2, r2, #1
 8003472:	42a9      	cmp	r1, r5
 8003474:	bf08      	it	eq
 8003476:	f042 0201 	orreq.w	r2, r2, #1
 800347a:	3518      	adds	r5, #24
 800347c:	42a9      	cmp	r1, r5
 800347e:	bf08      	it	eq
 8003480:	f042 0201 	orreq.w	r2, r2, #1
 8003484:	3518      	adds	r5, #24
 8003486:	42a9      	cmp	r1, r5
 8003488:	bf08      	it	eq
 800348a:	f042 0201 	orreq.w	r2, r2, #1
 800348e:	3518      	adds	r5, #24
 8003490:	42a9      	cmp	r1, r5
 8003492:	bf08      	it	eq
 8003494:	f042 0201 	orreq.w	r2, r2, #1
 8003498:	3548      	adds	r5, #72	; 0x48
 800349a:	42b9      	cmp	r1, r7
 800349c:	bf08      	it	eq
 800349e:	f042 0201 	orreq.w	r2, r2, #1
 80034a2:	42b1      	cmp	r1, r6
 80034a4:	bf08      	it	eq
 80034a6:	f042 0201 	orreq.w	r2, r2, #1
 80034aa:	42a9      	cmp	r1, r5
 80034ac:	bf08      	it	eq
 80034ae:	f042 0201 	orreq.w	r2, r2, #1
 80034b2:	b912      	cbnz	r2, 80034ba <HAL_DMA_Abort_IT+0xb2>
 80034b4:	4a62      	ldr	r2, [pc, #392]	; (8003640 <HAL_DMA_Abort_IT+0x238>)
 80034b6:	4291      	cmp	r1, r2
 80034b8:	d110      	bne.n	80034dc <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 80034ba:	2204      	movs	r2, #4
  return HAL_OK;
 80034bc:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80034c2:	680b      	ldr	r3, [r1, #0]
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	600b      	str	r3, [r1, #0]
}
 80034ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ce:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80034d0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
}
 80034d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 80034d8:	2001      	movs	r0, #1
}
 80034da:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034dc:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034de:	4c54      	ldr	r4, [pc, #336]	; (8003630 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034e0:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034e4:	4857      	ldr	r0, [pc, #348]	; (8003644 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034e6:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	680a      	ldr	r2, [r1, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034f2:	4a4e      	ldr	r2, [pc, #312]	; (800362c <HAL_DMA_Abort_IT+0x224>)
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	42a1      	cmp	r1, r4
 80034f8:	bf18      	it	ne
 80034fa:	4291      	cmpne	r1, r2
 80034fc:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8003500:	bf0c      	ite	eq
 8003502:	2201      	moveq	r2, #1
 8003504:	2200      	movne	r2, #0
 8003506:	4281      	cmp	r1, r0
 8003508:	bf08      	it	eq
 800350a:	f042 0201 	orreq.w	r2, r2, #1
 800350e:	3030      	adds	r0, #48	; 0x30
 8003510:	42a1      	cmp	r1, r4
 8003512:	bf08      	it	eq
 8003514:	f042 0201 	orreq.w	r2, r2, #1
 8003518:	3430      	adds	r4, #48	; 0x30
 800351a:	4281      	cmp	r1, r0
 800351c:	bf08      	it	eq
 800351e:	f042 0201 	orreq.w	r2, r2, #1
 8003522:	3030      	adds	r0, #48	; 0x30
 8003524:	42a1      	cmp	r1, r4
 8003526:	bf08      	it	eq
 8003528:	f042 0201 	orreq.w	r2, r2, #1
 800352c:	3430      	adds	r4, #48	; 0x30
 800352e:	4281      	cmp	r1, r0
 8003530:	bf08      	it	eq
 8003532:	f042 0201 	orreq.w	r2, r2, #1
 8003536:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800353a:	42a1      	cmp	r1, r4
 800353c:	bf08      	it	eq
 800353e:	f042 0201 	orreq.w	r2, r2, #1
 8003542:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003546:	4281      	cmp	r1, r0
 8003548:	bf08      	it	eq
 800354a:	f042 0201 	orreq.w	r2, r2, #1
 800354e:	3030      	adds	r0, #48	; 0x30
 8003550:	42a1      	cmp	r1, r4
 8003552:	bf08      	it	eq
 8003554:	f042 0201 	orreq.w	r2, r2, #1
 8003558:	3430      	adds	r4, #48	; 0x30
 800355a:	4281      	cmp	r1, r0
 800355c:	bf08      	it	eq
 800355e:	f042 0201 	orreq.w	r2, r2, #1
 8003562:	3030      	adds	r0, #48	; 0x30
 8003564:	42a1      	cmp	r1, r4
 8003566:	bf08      	it	eq
 8003568:	f042 0201 	orreq.w	r2, r2, #1
 800356c:	3430      	adds	r4, #48	; 0x30
 800356e:	4281      	cmp	r1, r0
 8003570:	bf08      	it	eq
 8003572:	f042 0201 	orreq.w	r2, r2, #1
 8003576:	3030      	adds	r0, #48	; 0x30
 8003578:	42a1      	cmp	r1, r4
 800357a:	bf08      	it	eq
 800357c:	f042 0201 	orreq.w	r2, r2, #1
 8003580:	3430      	adds	r4, #48	; 0x30
 8003582:	4281      	cmp	r1, r0
 8003584:	bf08      	it	eq
 8003586:	f042 0201 	orreq.w	r2, r2, #1
 800358a:	482f      	ldr	r0, [pc, #188]	; (8003648 <HAL_DMA_Abort_IT+0x240>)
 800358c:	42a1      	cmp	r1, r4
 800358e:	bf08      	it	eq
 8003590:	f042 0201 	orreq.w	r2, r2, #1
 8003594:	4c2d      	ldr	r4, [pc, #180]	; (800364c <HAL_DMA_Abort_IT+0x244>)
 8003596:	4281      	cmp	r1, r0
 8003598:	bf08      	it	eq
 800359a:	f042 0201 	orreq.w	r2, r2, #1
 800359e:	3028      	adds	r0, #40	; 0x28
 80035a0:	42a1      	cmp	r1, r4
 80035a2:	bf08      	it	eq
 80035a4:	f042 0201 	orreq.w	r2, r2, #1
 80035a8:	3428      	adds	r4, #40	; 0x28
 80035aa:	4281      	cmp	r1, r0
 80035ac:	bf08      	it	eq
 80035ae:	f042 0201 	orreq.w	r2, r2, #1
 80035b2:	3028      	adds	r0, #40	; 0x28
 80035b4:	42a1      	cmp	r1, r4
 80035b6:	bf08      	it	eq
 80035b8:	f042 0201 	orreq.w	r2, r2, #1
 80035bc:	3428      	adds	r4, #40	; 0x28
 80035be:	4281      	cmp	r1, r0
 80035c0:	bf08      	it	eq
 80035c2:	f042 0201 	orreq.w	r2, r2, #1
 80035c6:	3028      	adds	r0, #40	; 0x28
 80035c8:	42a1      	cmp	r1, r4
 80035ca:	bf08      	it	eq
 80035cc:	f042 0201 	orreq.w	r2, r2, #1
 80035d0:	4281      	cmp	r1, r0
 80035d2:	bf08      	it	eq
 80035d4:	f042 0201 	orreq.w	r2, r2, #1
 80035d8:	b912      	cbnz	r2, 80035e0 <HAL_DMA_Abort_IT+0x1d8>
 80035da:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <HAL_DMA_Abort_IT+0x248>)
 80035dc:	4291      	cmp	r1, r2
 80035de:	d117      	bne.n	8003610 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035e0:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035e2:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035e4:	6801      	ldr	r1, [r0, #0]
 80035e6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80035ea:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ec:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035f0:	f001 011f 	and.w	r1, r1, #31
 80035f4:	408a      	lsls	r2, r1
 80035f6:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035f8:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 80035fc:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80035fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003600:	b132      	cbz	r2, 8003610 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003602:	6811      	ldr	r1, [r2, #0]
 8003604:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003608:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800360a:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 800360e:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8003610:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8003612:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8003614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8003616:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800361a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800361e:	b11a      	cbz	r2, 8003628 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 8003620:	4618      	mov	r0, r3
 8003622:	4790      	blx	r2
  return HAL_OK;
 8003624:	4620      	mov	r0, r4
 8003626:	e755      	b.n	80034d4 <HAL_DMA_Abort_IT+0xcc>
 8003628:	4610      	mov	r0, r2
 800362a:	e753      	b.n	80034d4 <HAL_DMA_Abort_IT+0xcc>
 800362c:	40020010 	.word	0x40020010
 8003630:	40020028 	.word	0x40020028
 8003634:	40020410 	.word	0x40020410
 8003638:	40020470 	.word	0x40020470
 800363c:	40020488 	.word	0x40020488
 8003640:	400204b8 	.word	0x400204b8
 8003644:	40020040 	.word	0x40020040
 8003648:	58025408 	.word	0x58025408
 800364c:	5802541c 	.word	0x5802541c
 8003650:	58025494 	.word	0x58025494
 8003654:	40020058 	.word	0x40020058
 8003658:	40020070 	.word	0x40020070
 800365c:	40020088 	.word	0x40020088
 8003660:	400200a0 	.word	0x400200a0
 8003664:	400200b8 	.word	0x400200b8

08003668 <HAL_DMA_IRQHandler>:
{
 8003668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800366c:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800366e:	4b9e      	ldr	r3, [pc, #632]	; (80038e8 <HAL_DMA_IRQHandler+0x280>)
{
 8003670:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003672:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8003674:	681e      	ldr	r6, [r3, #0]
{
 8003676:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
 8003678:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800367a:	6803      	ldr	r3, [r0, #0]
 800367c:	4a9b      	ldr	r2, [pc, #620]	; (80038ec <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
 800367e:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003680:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 8003682:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003684:	d048      	beq.n	8003718 <HAL_DMA_IRQHandler+0xb0>
 8003686:	3218      	adds	r2, #24
 8003688:	4293      	cmp	r3, r2
 800368a:	d045      	beq.n	8003718 <HAL_DMA_IRQHandler+0xb0>
 800368c:	3218      	adds	r2, #24
 800368e:	4f98      	ldr	r7, [pc, #608]	; (80038f0 <HAL_DMA_IRQHandler+0x288>)
 8003690:	42bb      	cmp	r3, r7
 8003692:	bf18      	it	ne
 8003694:	4293      	cmpne	r3, r2
 8003696:	f107 0718 	add.w	r7, r7, #24
 800369a:	bf0c      	ite	eq
 800369c:	2201      	moveq	r2, #1
 800369e:	2200      	movne	r2, #0
 80036a0:	42bb      	cmp	r3, r7
 80036a2:	bf08      	it	eq
 80036a4:	f042 0201 	orreq.w	r2, r2, #1
 80036a8:	3718      	adds	r7, #24
 80036aa:	42bb      	cmp	r3, r7
 80036ac:	bf08      	it	eq
 80036ae:	f042 0201 	orreq.w	r2, r2, #1
 80036b2:	3718      	adds	r7, #24
 80036b4:	42bb      	cmp	r3, r7
 80036b6:	bf08      	it	eq
 80036b8:	f042 0201 	orreq.w	r2, r2, #1
 80036bc:	3718      	adds	r7, #24
 80036be:	42bb      	cmp	r3, r7
 80036c0:	bf08      	it	eq
 80036c2:	f042 0201 	orreq.w	r2, r2, #1
 80036c6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80036ca:	42bb      	cmp	r3, r7
 80036cc:	bf08      	it	eq
 80036ce:	f042 0201 	orreq.w	r2, r2, #1
 80036d2:	3718      	adds	r7, #24
 80036d4:	42bb      	cmp	r3, r7
 80036d6:	bf08      	it	eq
 80036d8:	f042 0201 	orreq.w	r2, r2, #1
 80036dc:	3718      	adds	r7, #24
 80036de:	42bb      	cmp	r3, r7
 80036e0:	bf08      	it	eq
 80036e2:	f042 0201 	orreq.w	r2, r2, #1
 80036e6:	3718      	adds	r7, #24
 80036e8:	42bb      	cmp	r3, r7
 80036ea:	bf08      	it	eq
 80036ec:	f042 0201 	orreq.w	r2, r2, #1
 80036f0:	3718      	adds	r7, #24
 80036f2:	42bb      	cmp	r3, r7
 80036f4:	bf08      	it	eq
 80036f6:	f042 0201 	orreq.w	r2, r2, #1
 80036fa:	3718      	adds	r7, #24
 80036fc:	42bb      	cmp	r3, r7
 80036fe:	bf08      	it	eq
 8003700:	f042 0201 	orreq.w	r2, r2, #1
 8003704:	3718      	adds	r7, #24
 8003706:	42bb      	cmp	r3, r7
 8003708:	bf08      	it	eq
 800370a:	f042 0201 	orreq.w	r2, r2, #1
 800370e:	b91a      	cbnz	r2, 8003718 <HAL_DMA_IRQHandler+0xb0>
 8003710:	4a78      	ldr	r2, [pc, #480]	; (80038f4 <HAL_DMA_IRQHandler+0x28c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	f040 82b3 	bne.w	8003c7e <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003718:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
 800371c:	2208      	movs	r2, #8
 800371e:	f000 011f 	and.w	r1, r0, #31
 8003722:	408a      	lsls	r2, r1
 8003724:	4222      	tst	r2, r4
 8003726:	f040 81a5 	bne.w	8003a74 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800372a:	fa24 f201 	lsr.w	r2, r4, r1
 800372e:	07d2      	lsls	r2, r2, #31
 8003730:	d511      	bpl.n	8003756 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	0612      	lsls	r2, r2, #24
 8003736:	f140 8269 	bpl.w	8003c0c <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800373a:	2301      	movs	r3, #1
 800373c:	fa03 f101 	lsl.w	r1, r3, r1
 8003740:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003742:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003746:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800374a:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800374e:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003752:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003756:	f04f 0c04 	mov.w	ip, #4
 800375a:	fa0c fc01 	lsl.w	ip, ip, r1
 800375e:	ea1c 0f04 	tst.w	ip, r4
 8003762:	d062      	beq.n	800382a <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003764:	f8d8 2000 	ldr.w	r2, [r8]
 8003768:	4f60      	ldr	r7, [pc, #384]	; (80038ec <HAL_DMA_IRQHandler+0x284>)
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_DMA_IRQHandler+0x290>)
 800376c:	429a      	cmp	r2, r3
 800376e:	bf18      	it	ne
 8003770:	42ba      	cmpne	r2, r7
 8003772:	f103 0318 	add.w	r3, r3, #24
 8003776:	bf0c      	ite	eq
 8003778:	2701      	moveq	r7, #1
 800377a:	2700      	movne	r7, #0
 800377c:	429a      	cmp	r2, r3
 800377e:	bf08      	it	eq
 8003780:	f047 0701 	orreq.w	r7, r7, #1
 8003784:	3318      	adds	r3, #24
 8003786:	429a      	cmp	r2, r3
 8003788:	bf08      	it	eq
 800378a:	f047 0701 	orreq.w	r7, r7, #1
 800378e:	3318      	adds	r3, #24
 8003790:	429a      	cmp	r2, r3
 8003792:	bf08      	it	eq
 8003794:	f047 0701 	orreq.w	r7, r7, #1
 8003798:	3318      	adds	r3, #24
 800379a:	429a      	cmp	r2, r3
 800379c:	bf08      	it	eq
 800379e:	f047 0701 	orreq.w	r7, r7, #1
 80037a2:	3318      	adds	r3, #24
 80037a4:	429a      	cmp	r2, r3
 80037a6:	bf08      	it	eq
 80037a8:	f047 0701 	orreq.w	r7, r7, #1
 80037ac:	3318      	adds	r3, #24
 80037ae:	429a      	cmp	r2, r3
 80037b0:	bf08      	it	eq
 80037b2:	f047 0701 	orreq.w	r7, r7, #1
 80037b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80037ba:	429a      	cmp	r2, r3
 80037bc:	bf08      	it	eq
 80037be:	f047 0701 	orreq.w	r7, r7, #1
 80037c2:	3318      	adds	r3, #24
 80037c4:	429a      	cmp	r2, r3
 80037c6:	bf08      	it	eq
 80037c8:	f047 0701 	orreq.w	r7, r7, #1
 80037cc:	3318      	adds	r3, #24
 80037ce:	429a      	cmp	r2, r3
 80037d0:	bf08      	it	eq
 80037d2:	f047 0701 	orreq.w	r7, r7, #1
 80037d6:	3318      	adds	r3, #24
 80037d8:	429a      	cmp	r2, r3
 80037da:	bf08      	it	eq
 80037dc:	f047 0701 	orreq.w	r7, r7, #1
 80037e0:	3318      	adds	r3, #24
 80037e2:	429a      	cmp	r2, r3
 80037e4:	bf08      	it	eq
 80037e6:	f047 0701 	orreq.w	r7, r7, #1
 80037ea:	3318      	adds	r3, #24
 80037ec:	429a      	cmp	r2, r3
 80037ee:	bf08      	it	eq
 80037f0:	f047 0701 	orreq.w	r7, r7, #1
 80037f4:	3318      	adds	r3, #24
 80037f6:	429a      	cmp	r2, r3
 80037f8:	bf08      	it	eq
 80037fa:	f047 0701 	orreq.w	r7, r7, #1
 80037fe:	4613      	mov	r3, r2
 8003800:	b91f      	cbnz	r7, 800380a <HAL_DMA_IRQHandler+0x1a2>
 8003802:	4f3c      	ldr	r7, [pc, #240]	; (80038f4 <HAL_DMA_IRQHandler+0x28c>)
 8003804:	42ba      	cmp	r2, r7
 8003806:	f040 8277 	bne.w	8003cf8 <HAL_DMA_IRQHandler+0x690>
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	0797      	lsls	r7, r2, #30
 800380e:	f140 8209 	bpl.w	8003c24 <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003812:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003816:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800381a:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800381e:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003822:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003826:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800382a:	f04f 0c10 	mov.w	ip, #16
 800382e:	fa0c fc01 	lsl.w	ip, ip, r1
 8003832:	ea1c 0f04 	tst.w	ip, r4
 8003836:	d079      	beq.n	800392c <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003838:	f8d8 2000 	ldr.w	r2, [r8]
 800383c:	4f2b      	ldr	r7, [pc, #172]	; (80038ec <HAL_DMA_IRQHandler+0x284>)
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <HAL_DMA_IRQHandler+0x290>)
 8003840:	429a      	cmp	r2, r3
 8003842:	bf18      	it	ne
 8003844:	42ba      	cmpne	r2, r7
 8003846:	f103 0318 	add.w	r3, r3, #24
 800384a:	bf0c      	ite	eq
 800384c:	2701      	moveq	r7, #1
 800384e:	2700      	movne	r7, #0
 8003850:	429a      	cmp	r2, r3
 8003852:	bf08      	it	eq
 8003854:	f047 0701 	orreq.w	r7, r7, #1
 8003858:	3318      	adds	r3, #24
 800385a:	429a      	cmp	r2, r3
 800385c:	bf08      	it	eq
 800385e:	f047 0701 	orreq.w	r7, r7, #1
 8003862:	3318      	adds	r3, #24
 8003864:	429a      	cmp	r2, r3
 8003866:	bf08      	it	eq
 8003868:	f047 0701 	orreq.w	r7, r7, #1
 800386c:	3318      	adds	r3, #24
 800386e:	429a      	cmp	r2, r3
 8003870:	bf08      	it	eq
 8003872:	f047 0701 	orreq.w	r7, r7, #1
 8003876:	3318      	adds	r3, #24
 8003878:	429a      	cmp	r2, r3
 800387a:	bf08      	it	eq
 800387c:	f047 0701 	orreq.w	r7, r7, #1
 8003880:	3318      	adds	r3, #24
 8003882:	429a      	cmp	r2, r3
 8003884:	bf08      	it	eq
 8003886:	f047 0701 	orreq.w	r7, r7, #1
 800388a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800388e:	429a      	cmp	r2, r3
 8003890:	bf08      	it	eq
 8003892:	f047 0701 	orreq.w	r7, r7, #1
 8003896:	3318      	adds	r3, #24
 8003898:	429a      	cmp	r2, r3
 800389a:	bf08      	it	eq
 800389c:	f047 0701 	orreq.w	r7, r7, #1
 80038a0:	3318      	adds	r3, #24
 80038a2:	429a      	cmp	r2, r3
 80038a4:	bf08      	it	eq
 80038a6:	f047 0701 	orreq.w	r7, r7, #1
 80038aa:	3318      	adds	r3, #24
 80038ac:	429a      	cmp	r2, r3
 80038ae:	bf08      	it	eq
 80038b0:	f047 0701 	orreq.w	r7, r7, #1
 80038b4:	3318      	adds	r3, #24
 80038b6:	429a      	cmp	r2, r3
 80038b8:	bf08      	it	eq
 80038ba:	f047 0701 	orreq.w	r7, r7, #1
 80038be:	3318      	adds	r3, #24
 80038c0:	429a      	cmp	r2, r3
 80038c2:	bf08      	it	eq
 80038c4:	f047 0701 	orreq.w	r7, r7, #1
 80038c8:	3318      	adds	r3, #24
 80038ca:	429a      	cmp	r2, r3
 80038cc:	bf08      	it	eq
 80038ce:	f047 0701 	orreq.w	r7, r7, #1
 80038d2:	4613      	mov	r3, r2
 80038d4:	b91f      	cbnz	r7, 80038de <HAL_DMA_IRQHandler+0x276>
 80038d6:	4f07      	ldr	r7, [pc, #28]	; (80038f4 <HAL_DMA_IRQHandler+0x28c>)
 80038d8:	42ba      	cmp	r2, r7
 80038da:	f040 814b 	bne.w	8003b74 <HAL_DMA_IRQHandler+0x50c>
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	0710      	lsls	r0, r2, #28
 80038e2:	f140 818c 	bpl.w	8003bfe <HAL_DMA_IRQHandler+0x596>
 80038e6:	e009      	b.n	80038fc <HAL_DMA_IRQHandler+0x294>
 80038e8:	24000004 	.word	0x24000004
 80038ec:	40020010 	.word	0x40020010
 80038f0:	40020058 	.word	0x40020058
 80038f4:	400204b8 	.word	0x400204b8
 80038f8:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038fc:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003900:	f8d8 3000 	ldr.w	r3, [r8]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	0352      	lsls	r2, r2, #13
 8003908:	f100 8195 	bmi.w	8003c36 <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	05d7      	lsls	r7, r2, #23
 8003910:	d403      	bmi.n	800391a <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	f022 0208 	bic.w	r2, r2, #8
 8003918:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800391a:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 800391e:	b10b      	cbz	r3, 8003924 <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
 8003920:	4640      	mov	r0, r8
 8003922:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003924:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 8003928:	f001 011f 	and.w	r1, r1, #31
 800392c:	2320      	movs	r3, #32
 800392e:	fa03 f101 	lsl.w	r1, r3, r1
 8003932:	4221      	tst	r1, r4
 8003934:	d069      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003936:	f8d8 3000 	ldr.w	r3, [r8]
 800393a:	4a97      	ldr	r2, [pc, #604]	; (8003b98 <HAL_DMA_IRQHandler+0x530>)
 800393c:	4c97      	ldr	r4, [pc, #604]	; (8003b9c <HAL_DMA_IRQHandler+0x534>)
 800393e:	42a3      	cmp	r3, r4
 8003940:	bf18      	it	ne
 8003942:	4293      	cmpne	r3, r2
 8003944:	f104 0418 	add.w	r4, r4, #24
 8003948:	bf0c      	ite	eq
 800394a:	2201      	moveq	r2, #1
 800394c:	2200      	movne	r2, #0
 800394e:	42a3      	cmp	r3, r4
 8003950:	bf08      	it	eq
 8003952:	f042 0201 	orreq.w	r2, r2, #1
 8003956:	3418      	adds	r4, #24
 8003958:	42a3      	cmp	r3, r4
 800395a:	bf08      	it	eq
 800395c:	f042 0201 	orreq.w	r2, r2, #1
 8003960:	3418      	adds	r4, #24
 8003962:	42a3      	cmp	r3, r4
 8003964:	bf08      	it	eq
 8003966:	f042 0201 	orreq.w	r2, r2, #1
 800396a:	3418      	adds	r4, #24
 800396c:	42a3      	cmp	r3, r4
 800396e:	bf08      	it	eq
 8003970:	f042 0201 	orreq.w	r2, r2, #1
 8003974:	3418      	adds	r4, #24
 8003976:	42a3      	cmp	r3, r4
 8003978:	bf08      	it	eq
 800397a:	f042 0201 	orreq.w	r2, r2, #1
 800397e:	3418      	adds	r4, #24
 8003980:	42a3      	cmp	r3, r4
 8003982:	bf08      	it	eq
 8003984:	f042 0201 	orreq.w	r2, r2, #1
 8003988:	f504 7456 	add.w	r4, r4, #856	; 0x358
 800398c:	42a3      	cmp	r3, r4
 800398e:	bf08      	it	eq
 8003990:	f042 0201 	orreq.w	r2, r2, #1
 8003994:	3418      	adds	r4, #24
 8003996:	42a3      	cmp	r3, r4
 8003998:	bf08      	it	eq
 800399a:	f042 0201 	orreq.w	r2, r2, #1
 800399e:	3418      	adds	r4, #24
 80039a0:	42a3      	cmp	r3, r4
 80039a2:	bf08      	it	eq
 80039a4:	f042 0201 	orreq.w	r2, r2, #1
 80039a8:	3418      	adds	r4, #24
 80039aa:	42a3      	cmp	r3, r4
 80039ac:	bf08      	it	eq
 80039ae:	f042 0201 	orreq.w	r2, r2, #1
 80039b2:	3418      	adds	r4, #24
 80039b4:	42a3      	cmp	r3, r4
 80039b6:	bf08      	it	eq
 80039b8:	f042 0201 	orreq.w	r2, r2, #1
 80039bc:	3418      	adds	r4, #24
 80039be:	42a3      	cmp	r3, r4
 80039c0:	bf08      	it	eq
 80039c2:	f042 0201 	orreq.w	r2, r2, #1
 80039c6:	3418      	adds	r4, #24
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	bf08      	it	eq
 80039cc:	f042 0201 	orreq.w	r2, r2, #1
 80039d0:	b91a      	cbnz	r2, 80039da <HAL_DMA_IRQHandler+0x372>
 80039d2:	4a73      	ldr	r2, [pc, #460]	; (8003ba0 <HAL_DMA_IRQHandler+0x538>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	f040 80da 	bne.w	8003b8e <HAL_DMA_IRQHandler+0x526>
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	06dc      	lsls	r4, r3, #27
 80039de:	d514      	bpl.n	8003a0a <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039e0:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039e2:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	f000 80de 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039ec:	f8d8 3000 	ldr.w	r3, [r8]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	0352      	lsls	r2, r2, #13
 80039f4:	f140 8129 	bpl.w	8003c4a <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	031b      	lsls	r3, r3, #12
 80039fc:	f140 8134 	bpl.w	8003c68 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
 8003a00:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8003a04:	b10b      	cbz	r3, 8003a0a <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
 8003a06:	4640      	mov	r0, r8
 8003a08:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a0a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80f2 	beq.w	8003bf8 <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a14:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8003a18:	07df      	lsls	r7, r3, #31
 8003a1a:	d521      	bpl.n	8003a60 <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
 8003a1c:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a20:	2104      	movs	r1, #4
 8003a22:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8003a26:	6813      	ldr	r3, [r2, #0]
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a30:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a34:	fba3 3606 	umull	r3, r6, r3, r6
 8003a38:	0ab6      	lsrs	r6, r6, #10
 8003a3a:	e002      	b.n	8003a42 <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a3c:	6813      	ldr	r3, [r2, #0]
 8003a3e:	07dd      	lsls	r5, r3, #31
 8003a40:	d504      	bpl.n	8003a4c <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
 8003a42:	9b01      	ldr	r3, [sp, #4]
 8003a44:	3301      	adds	r3, #1
 8003a46:	42b3      	cmp	r3, r6
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	d9f7      	bls.n	8003a3c <HAL_DMA_IRQHandler+0x3d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a4c:	6813      	ldr	r3, [r2, #0]
 8003a4e:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a50:	bf4c      	ite	mi
 8003a52:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003a54:	2301      	movpl	r3, #1
 8003a56:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8003a60:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80c7 	beq.w	8003bf8 <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
 8003a6a:	4640      	mov	r0, r8
}
 8003a6c:	b002      	add	sp, #8
 8003a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8003a72:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	0752      	lsls	r2, r2, #29
 8003a78:	d514      	bpl.n	8003aa4 <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	f022 0204 	bic.w	r2, r2, #4
 8003a80:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a82:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8003a86:	f003 021f 	and.w	r2, r3, #31
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	4093      	lsls	r3, r2
 8003a8e:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a90:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a94:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a98:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a9c:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003aa0:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aa4:	fa24 f301 	lsr.w	r3, r4, r1
 8003aa8:	07df      	lsls	r7, r3, #31
 8003aaa:	f57f ae54 	bpl.w	8003756 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003aae:	f8d8 2000 	ldr.w	r2, [r8]
 8003ab2:	4f39      	ldr	r7, [pc, #228]	; (8003b98 <HAL_DMA_IRQHandler+0x530>)
 8003ab4:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <HAL_DMA_IRQHandler+0x534>)
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	bf18      	it	ne
 8003aba:	42ba      	cmpne	r2, r7
 8003abc:	f103 0318 	add.w	r3, r3, #24
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2701      	moveq	r7, #1
 8003ac4:	2700      	movne	r7, #0
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	bf08      	it	eq
 8003aca:	f047 0701 	orreq.w	r7, r7, #1
 8003ace:	3318      	adds	r3, #24
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	bf08      	it	eq
 8003ad4:	f047 0701 	orreq.w	r7, r7, #1
 8003ad8:	3318      	adds	r3, #24
 8003ada:	429a      	cmp	r2, r3
 8003adc:	bf08      	it	eq
 8003ade:	f047 0701 	orreq.w	r7, r7, #1
 8003ae2:	3318      	adds	r3, #24
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	bf08      	it	eq
 8003ae8:	f047 0701 	orreq.w	r7, r7, #1
 8003aec:	3318      	adds	r3, #24
 8003aee:	429a      	cmp	r2, r3
 8003af0:	bf08      	it	eq
 8003af2:	f047 0701 	orreq.w	r7, r7, #1
 8003af6:	3318      	adds	r3, #24
 8003af8:	429a      	cmp	r2, r3
 8003afa:	bf08      	it	eq
 8003afc:	f047 0701 	orreq.w	r7, r7, #1
 8003b00:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003b04:	429a      	cmp	r2, r3
 8003b06:	bf08      	it	eq
 8003b08:	f047 0701 	orreq.w	r7, r7, #1
 8003b0c:	3318      	adds	r3, #24
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	bf08      	it	eq
 8003b12:	f047 0701 	orreq.w	r7, r7, #1
 8003b16:	3318      	adds	r3, #24
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	bf08      	it	eq
 8003b1c:	f047 0701 	orreq.w	r7, r7, #1
 8003b20:	3318      	adds	r3, #24
 8003b22:	429a      	cmp	r2, r3
 8003b24:	bf08      	it	eq
 8003b26:	f047 0701 	orreq.w	r7, r7, #1
 8003b2a:	3318      	adds	r3, #24
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	bf08      	it	eq
 8003b30:	f047 0701 	orreq.w	r7, r7, #1
 8003b34:	3318      	adds	r3, #24
 8003b36:	429a      	cmp	r2, r3
 8003b38:	bf08      	it	eq
 8003b3a:	f047 0701 	orreq.w	r7, r7, #1
 8003b3e:	3318      	adds	r3, #24
 8003b40:	429a      	cmp	r2, r3
 8003b42:	bf08      	it	eq
 8003b44:	f047 0701 	orreq.w	r7, r7, #1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	2f00      	cmp	r7, #0
 8003b4c:	f47f adf1 	bne.w	8003732 <HAL_DMA_IRQHandler+0xca>
 8003b50:	4f13      	ldr	r7, [pc, #76]	; (8003ba0 <HAL_DMA_IRQHandler+0x538>)
 8003b52:	42ba      	cmp	r2, r7
 8003b54:	f43f aded 	beq.w	8003732 <HAL_DMA_IRQHandler+0xca>
 8003b58:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	408b      	lsls	r3, r1
 8003b5e:	4223      	tst	r3, r4
 8003b60:	f040 80ca 	bne.w	8003cf8 <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b64:	f04f 0c10 	mov.w	ip, #16
 8003b68:	fa0c fc01 	lsl.w	ip, ip, r1
 8003b6c:	ea14 0f0c 	tst.w	r4, ip
 8003b70:	f43f aedc 	beq.w	800392c <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b74:	6813      	ldr	r3, [r2, #0]
 8003b76:	0759      	lsls	r1, r3, #29
 8003b78:	f53f aec0 	bmi.w	80038fc <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b7c:	f000 0e1f 	and.w	lr, r0, #31
 8003b80:	2120      	movs	r1, #32
 8003b82:	fa01 f10e 	lsl.w	r1, r1, lr
 8003b86:	420c      	tst	r4, r1
 8003b88:	f43f af3f 	beq.w	8003a0a <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	0798      	lsls	r0, r3, #30
 8003b92:	f57f af3a 	bpl.w	8003a0a <HAL_DMA_IRQHandler+0x3a2>
 8003b96:	e723      	b.n	80039e0 <HAL_DMA_IRQHandler+0x378>
 8003b98:	40020010 	.word	0x40020010
 8003b9c:	40020028 	.word	0x40020028
 8003ba0:	400204b8 	.word	0x400204b8
 8003ba4:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ba8:	f8d8 2000 	ldr.w	r2, [r8]
 8003bac:	6813      	ldr	r3, [r2, #0]
 8003bae:	f023 0316 	bic.w	r3, r3, #22
 8003bb2:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003bb4:	f8d8 2000 	ldr.w	r2, [r8]
 8003bb8:	6953      	ldr	r3, [r2, #20]
 8003bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bbe:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bc0:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d055      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003bc8:	f8d8 2000 	ldr.w	r2, [r8]
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	f023 0308 	bic.w	r3, r3, #8
 8003bd2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bd4:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
 8003bd8:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8003bda:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bdc:	f002 021f 	and.w	r2, r2, #31
 8003be0:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 8003be2:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003be4:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8003be6:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8003bea:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003bee:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f47f af39 	bne.w	8003a6a <HAL_DMA_IRQHandler+0x402>
}
 8003bf8:	b002      	add	sp, #8
 8003bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bfe:	2220      	movs	r2, #32
 8003c00:	fa02 f101 	lsl.w	r1, r2, r1
 8003c04:	420c      	tst	r4, r1
 8003c06:	f47f aee8 	bne.w	80039da <HAL_DMA_IRQHandler+0x372>
 8003c0a:	e6fe      	b.n	8003a0a <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c0c:	f04f 0c04 	mov.w	ip, #4
 8003c10:	fa0c fc01 	lsl.w	ip, ip, r1
 8003c14:	ea14 0f0c 	tst.w	r4, ip
 8003c18:	f43f ae07 	beq.w	800382a <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	0797      	lsls	r7, r2, #30
 8003c20:	f53f adf7 	bmi.w	8003812 <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c24:	f04f 0c10 	mov.w	ip, #16
 8003c28:	fa0c fc01 	lsl.w	ip, ip, r1
 8003c2c:	ea14 0f0c 	tst.w	r4, ip
 8003c30:	f47f ae55 	bne.w	80038de <HAL_DMA_IRQHandler+0x276>
 8003c34:	e67a      	b.n	800392c <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	031b      	lsls	r3, r3, #12
 8003c3a:	f57f ae6e 	bpl.w	800391a <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c3e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f47f ae6c 	bne.w	8003920 <HAL_DMA_IRQHandler+0x2b8>
 8003c48:	e66c      	b.n	8003924 <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003c50:	f47f aed6 	bne.w	8003a00 <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	f021 0110 	bic.w	r1, r1, #16
 8003c5a:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003c5c:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8003c5e:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003c62:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8003c66:	e6cb      	b.n	8003a00 <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
 8003c68:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f47f aeca 	bne.w	8003a06 <HAL_DMA_IRQHandler+0x39e>
 8003c72:	e6ca      	b.n	8003a0a <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c74:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1a5      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x560>
 8003c7c:	e7aa      	b.n	8003bd4 <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c7e:	4aa0      	ldr	r2, [pc, #640]	; (8003f00 <HAL_DMA_IRQHandler+0x898>)
 8003c80:	4ca0      	ldr	r4, [pc, #640]	; (8003f04 <HAL_DMA_IRQHandler+0x89c>)
 8003c82:	42a3      	cmp	r3, r4
 8003c84:	bf18      	it	ne
 8003c86:	4293      	cmpne	r3, r2
 8003c88:	f104 0414 	add.w	r4, r4, #20
 8003c8c:	bf0c      	ite	eq
 8003c8e:	2201      	moveq	r2, #1
 8003c90:	2200      	movne	r2, #0
 8003c92:	42a3      	cmp	r3, r4
 8003c94:	bf08      	it	eq
 8003c96:	f042 0201 	orreq.w	r2, r2, #1
 8003c9a:	3414      	adds	r4, #20
 8003c9c:	42a3      	cmp	r3, r4
 8003c9e:	bf08      	it	eq
 8003ca0:	f042 0201 	orreq.w	r2, r2, #1
 8003ca4:	3414      	adds	r4, #20
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	bf08      	it	eq
 8003caa:	f042 0201 	orreq.w	r2, r2, #1
 8003cae:	3414      	adds	r4, #20
 8003cb0:	42a3      	cmp	r3, r4
 8003cb2:	bf08      	it	eq
 8003cb4:	f042 0201 	orreq.w	r2, r2, #1
 8003cb8:	3414      	adds	r4, #20
 8003cba:	42a3      	cmp	r3, r4
 8003cbc:	bf08      	it	eq
 8003cbe:	f042 0201 	orreq.w	r2, r2, #1
 8003cc2:	b912      	cbnz	r2, 8003cca <HAL_DMA_IRQHandler+0x662>
 8003cc4:	4a90      	ldr	r2, [pc, #576]	; (8003f08 <HAL_DMA_IRQHandler+0x8a0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d196      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cca:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
 8003cce:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003cd0:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cd2:	f004 041f 	and.w	r4, r4, #31
 8003cd6:	40a6      	lsls	r6, r4
 8003cd8:	420e      	tst	r6, r1
 8003cda:	d019      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x6a8>
 8003cdc:	0750      	lsls	r0, r2, #29
 8003cde:	d517      	bpl.n	8003d10 <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce0:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ce2:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce4:	d549      	bpl.n	8003d7a <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ce6:	03d2      	lsls	r2, r2, #15
 8003ce8:	f100 809f 	bmi.w	8003e2a <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cec:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f47f aeba 	bne.w	8003a6a <HAL_DMA_IRQHandler+0x402>
 8003cf6:	e77f      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cf8:	f000 011f 	and.w	r1, r0, #31
 8003cfc:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d00:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d02:	fa0c fc01 	lsl.w	ip, ip, r1
 8003d06:	ea14 0f0c 	tst.w	r4, ip
 8003d0a:	f47f af33 	bne.w	8003b74 <HAL_DMA_IRQHandler+0x50c>
 8003d0e:	e60d      	b.n	800392c <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d10:	2602      	movs	r6, #2
 8003d12:	40a6      	lsls	r6, r4
 8003d14:	420e      	tst	r6, r1
 8003d16:	d00e      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x6ce>
 8003d18:	0797      	lsls	r7, r2, #30
 8003d1a:	d50c      	bpl.n	8003d36 <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d1c:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d1e:	0415      	lsls	r5, r2, #16
 8003d20:	f140 8089 	bpl.w	8003e36 <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d24:	03d4      	lsls	r4, r2, #15
 8003d26:	f100 80e4 	bmi.w	8003ef2 <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
 8003d2a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f47f ae9b 	bne.w	8003a6a <HAL_DMA_IRQHandler+0x402>
 8003d34:	e760      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d36:	2608      	movs	r6, #8
 8003d38:	fa06 f404 	lsl.w	r4, r6, r4
 8003d3c:	420c      	tst	r4, r1
 8003d3e:	f43f af5b 	beq.w	8003bf8 <HAL_DMA_IRQHandler+0x590>
 8003d42:	0711      	lsls	r1, r2, #28
 8003d44:	f57f af58 	bpl.w	8003bf8 <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d48:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d4a:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d4c:	f021 010e 	bic.w	r1, r1, #14
 8003d50:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8003d52:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d54:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 8003d62:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d66:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8003d6a:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003d6e:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f47f ae79 	bne.w	8003a6a <HAL_DMA_IRQHandler+0x402>
 8003d78:	e73e      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d7a:	0693      	lsls	r3, r2, #26
 8003d7c:	d455      	bmi.n	8003e2a <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d7e:	f8d8 2000 	ldr.w	r2, [r8]
 8003d82:	4b62      	ldr	r3, [pc, #392]	; (8003f0c <HAL_DMA_IRQHandler+0x8a4>)
 8003d84:	4c62      	ldr	r4, [pc, #392]	; (8003f10 <HAL_DMA_IRQHandler+0x8a8>)
 8003d86:	4963      	ldr	r1, [pc, #396]	; (8003f14 <HAL_DMA_IRQHandler+0x8ac>)
 8003d88:	42a2      	cmp	r2, r4
 8003d8a:	bf18      	it	ne
 8003d8c:	429a      	cmpne	r2, r3
 8003d8e:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	428a      	cmp	r2, r1
 8003d9a:	bf08      	it	eq
 8003d9c:	f043 0301 	orreq.w	r3, r3, #1
 8003da0:	3130      	adds	r1, #48	; 0x30
 8003da2:	42a2      	cmp	r2, r4
 8003da4:	bf08      	it	eq
 8003da6:	f043 0301 	orreq.w	r3, r3, #1
 8003daa:	3430      	adds	r4, #48	; 0x30
 8003dac:	428a      	cmp	r2, r1
 8003dae:	bf08      	it	eq
 8003db0:	f043 0301 	orreq.w	r3, r3, #1
 8003db4:	3130      	adds	r1, #48	; 0x30
 8003db6:	42a2      	cmp	r2, r4
 8003db8:	bf08      	it	eq
 8003dba:	f043 0301 	orreq.w	r3, r3, #1
 8003dbe:	3430      	adds	r4, #48	; 0x30
 8003dc0:	428a      	cmp	r2, r1
 8003dc2:	bf08      	it	eq
 8003dc4:	f043 0301 	orreq.w	r3, r3, #1
 8003dc8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003dcc:	42a2      	cmp	r2, r4
 8003dce:	bf08      	it	eq
 8003dd0:	f043 0301 	orreq.w	r3, r3, #1
 8003dd4:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003dd8:	428a      	cmp	r2, r1
 8003dda:	bf08      	it	eq
 8003ddc:	f043 0301 	orreq.w	r3, r3, #1
 8003de0:	3130      	adds	r1, #48	; 0x30
 8003de2:	42a2      	cmp	r2, r4
 8003de4:	bf08      	it	eq
 8003de6:	f043 0301 	orreq.w	r3, r3, #1
 8003dea:	3430      	adds	r4, #48	; 0x30
 8003dec:	428a      	cmp	r2, r1
 8003dee:	bf08      	it	eq
 8003df0:	f043 0301 	orreq.w	r3, r3, #1
 8003df4:	3130      	adds	r1, #48	; 0x30
 8003df6:	42a2      	cmp	r2, r4
 8003df8:	bf08      	it	eq
 8003dfa:	f043 0301 	orreq.w	r3, r3, #1
 8003dfe:	3430      	adds	r4, #48	; 0x30
 8003e00:	428a      	cmp	r2, r1
 8003e02:	bf08      	it	eq
 8003e04:	f043 0301 	orreq.w	r3, r3, #1
 8003e08:	3130      	adds	r1, #48	; 0x30
 8003e0a:	42a2      	cmp	r2, r4
 8003e0c:	bf08      	it	eq
 8003e0e:	f043 0301 	orreq.w	r3, r3, #1
 8003e12:	428a      	cmp	r2, r1
 8003e14:	bf08      	it	eq
 8003e16:	f043 0301 	orreq.w	r3, r3, #1
 8003e1a:	b913      	cbnz	r3, 8003e22 <HAL_DMA_IRQHandler+0x7ba>
 8003e1c:	4b3e      	ldr	r3, [pc, #248]	; (8003f18 <HAL_DMA_IRQHandler+0x8b0>)
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d17c      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x8b4>
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	f023 0308 	bic.w	r3, r3, #8
 8003e28:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003e2a:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f47f ae1b 	bne.w	8003a6a <HAL_DMA_IRQHandler+0x402>
 8003e34:	e6e0      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e36:	0690      	lsls	r0, r2, #26
 8003e38:	d45b      	bmi.n	8003ef2 <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e3a:	f8d8 2000 	ldr.w	r2, [r8]
 8003e3e:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <HAL_DMA_IRQHandler+0x8a4>)
 8003e40:	4c33      	ldr	r4, [pc, #204]	; (8003f10 <HAL_DMA_IRQHandler+0x8a8>)
 8003e42:	4934      	ldr	r1, [pc, #208]	; (8003f14 <HAL_DMA_IRQHandler+0x8ac>)
 8003e44:	42a2      	cmp	r2, r4
 8003e46:	bf18      	it	ne
 8003e48:	429a      	cmpne	r2, r3
 8003e4a:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	428a      	cmp	r2, r1
 8003e56:	bf08      	it	eq
 8003e58:	f043 0301 	orreq.w	r3, r3, #1
 8003e5c:	3130      	adds	r1, #48	; 0x30
 8003e5e:	42a2      	cmp	r2, r4
 8003e60:	bf08      	it	eq
 8003e62:	f043 0301 	orreq.w	r3, r3, #1
 8003e66:	3430      	adds	r4, #48	; 0x30
 8003e68:	428a      	cmp	r2, r1
 8003e6a:	bf08      	it	eq
 8003e6c:	f043 0301 	orreq.w	r3, r3, #1
 8003e70:	3130      	adds	r1, #48	; 0x30
 8003e72:	42a2      	cmp	r2, r4
 8003e74:	bf08      	it	eq
 8003e76:	f043 0301 	orreq.w	r3, r3, #1
 8003e7a:	3430      	adds	r4, #48	; 0x30
 8003e7c:	428a      	cmp	r2, r1
 8003e7e:	bf08      	it	eq
 8003e80:	f043 0301 	orreq.w	r3, r3, #1
 8003e84:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003e88:	42a2      	cmp	r2, r4
 8003e8a:	bf08      	it	eq
 8003e8c:	f043 0301 	orreq.w	r3, r3, #1
 8003e90:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003e94:	428a      	cmp	r2, r1
 8003e96:	bf08      	it	eq
 8003e98:	f043 0301 	orreq.w	r3, r3, #1
 8003e9c:	3130      	adds	r1, #48	; 0x30
 8003e9e:	42a2      	cmp	r2, r4
 8003ea0:	bf08      	it	eq
 8003ea2:	f043 0301 	orreq.w	r3, r3, #1
 8003ea6:	3430      	adds	r4, #48	; 0x30
 8003ea8:	428a      	cmp	r2, r1
 8003eaa:	bf08      	it	eq
 8003eac:	f043 0301 	orreq.w	r3, r3, #1
 8003eb0:	3130      	adds	r1, #48	; 0x30
 8003eb2:	42a2      	cmp	r2, r4
 8003eb4:	bf08      	it	eq
 8003eb6:	f043 0301 	orreq.w	r3, r3, #1
 8003eba:	3430      	adds	r4, #48	; 0x30
 8003ebc:	428a      	cmp	r2, r1
 8003ebe:	bf08      	it	eq
 8003ec0:	f043 0301 	orreq.w	r3, r3, #1
 8003ec4:	3130      	adds	r1, #48	; 0x30
 8003ec6:	42a2      	cmp	r2, r4
 8003ec8:	bf08      	it	eq
 8003eca:	f043 0301 	orreq.w	r3, r3, #1
 8003ece:	428a      	cmp	r2, r1
 8003ed0:	bf08      	it	eq
 8003ed2:	f043 0301 	orreq.w	r3, r3, #1
 8003ed6:	b913      	cbnz	r3, 8003ede <HAL_DMA_IRQHandler+0x876>
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <HAL_DMA_IRQHandler+0x8b0>)
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d123      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x8be>
 8003ede:	6813      	ldr	r3, [r2, #0]
 8003ee0:	f023 0314 	bic.w	r3, r3, #20
 8003ee4:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003ee6:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8003ee8:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 8003eea:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003eee:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8003ef2:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f47f adb7 	bne.w	8003a6a <HAL_DMA_IRQHandler+0x402>
 8003efc:	e67c      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x590>
 8003efe:	bf00      	nop
 8003f00:	58025408 	.word	0x58025408
 8003f04:	5802541c 	.word	0x5802541c
 8003f08:	58025494 	.word	0x58025494
 8003f0c:	40020010 	.word	0x40020010
 8003f10:	40020028 	.word	0x40020028
 8003f14:	40020040 	.word	0x40020040
 8003f18:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f1c:	6813      	ldr	r3, [r2, #0]
 8003f1e:	f023 0304 	bic.w	r3, r3, #4
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	e781      	b.n	8003e2a <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	f023 030a 	bic.w	r3, r3, #10
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	e7da      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x87e>

08003f30 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8003f30:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8003f32:	4770      	bx	lr

08003f34 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f34:	680b      	ldr	r3, [r1, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8114 	beq.w	8004164 <HAL_GPIO_Init+0x230>
 8003f3c:	f04f 0c00 	mov.w	ip, #0
{
 8003f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8003f44:	4662      	mov	r2, ip
{
 8003f46:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f48:	4d8e      	ldr	r5, [pc, #568]	; (8004184 <HAL_GPIO_Init+0x250>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f4a:	4f8f      	ldr	r7, [pc, #572]	; (8004188 <HAL_GPIO_Init+0x254>)
 8003f4c:	f8df 8250 	ldr.w	r8, [pc, #592]	; 80041a0 <HAL_GPIO_Init+0x26c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f50:	f04f 0901 	mov.w	r9, #1
 8003f54:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8003f58:	ea19 0e03 	ands.w	lr, r9, r3
 8003f5c:	f000 80bc 	beq.w	80040d8 <HAL_GPIO_Init+0x1a4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f60:	684b      	ldr	r3, [r1, #4]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	1e5c      	subs	r4, r3, #1
 8003f68:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f6a:	f04f 0403 	mov.w	r4, #3
 8003f6e:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f72:	f240 80bb 	bls.w	80040ec <HAL_GPIO_Init+0x1b8>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f76:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d026      	beq.n	8003fca <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 8003f7c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f7e:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f82:	688b      	ldr	r3, [r1, #8]
 8003f84:	fa03 f30c 	lsl.w	r3, r3, ip
 8003f88:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8003f8c:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f8e:	684b      	ldr	r3, [r1, #4]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d118      	bne.n	8003fca <HAL_GPIO_Init+0x96>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f98:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8003f9c:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fa0:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8003fa4:	230f      	movs	r3, #15
 8003fa6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8003faa:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3U];
 8003fae:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fb2:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fb6:	690b      	ldr	r3, [r1, #16]
 8003fb8:	fa03 f30b 	lsl.w	r3, r3, fp
 8003fbc:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003fc0:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fc4:	684b      	ldr	r3, [r1, #4]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 8003fca:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fce:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fd2:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd6:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8003fd8:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fda:	684b      	ldr	r3, [r1, #4]
 8003fdc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003fe0:	d079      	beq.n	80040d6 <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8003fe6:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fea:	f002 0903 	and.w	r9, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fee:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ff8:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffc:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8004000:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004004:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004010:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8004014:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004018:	fa03 f309 	lsl.w	r3, r3, r9
 800401c:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004020:	d025      	beq.n	800406e <HAL_GPIO_Init+0x13a>
 8004022:	4540      	cmp	r0, r8
 8004024:	f000 8082 	beq.w	800412c <HAL_GPIO_Init+0x1f8>
 8004028:	4e58      	ldr	r6, [pc, #352]	; (800418c <HAL_GPIO_Init+0x258>)
 800402a:	42b0      	cmp	r0, r6
 800402c:	f000 8085 	beq.w	800413a <HAL_GPIO_Init+0x206>
 8004030:	4e57      	ldr	r6, [pc, #348]	; (8004190 <HAL_GPIO_Init+0x25c>)
 8004032:	42b0      	cmp	r0, r6
 8004034:	d073      	beq.n	800411e <HAL_GPIO_Init+0x1ea>
 8004036:	4e57      	ldr	r6, [pc, #348]	; (8004194 <HAL_GPIO_Init+0x260>)
 8004038:	42b0      	cmp	r0, r6
 800403a:	f000 808c 	beq.w	8004156 <HAL_GPIO_Init+0x222>
 800403e:	4e56      	ldr	r6, [pc, #344]	; (8004198 <HAL_GPIO_Init+0x264>)
 8004040:	42b0      	cmp	r0, r6
 8004042:	f000 8090 	beq.w	8004166 <HAL_GPIO_Init+0x232>
 8004046:	4e55      	ldr	r6, [pc, #340]	; (800419c <HAL_GPIO_Init+0x268>)
 8004048:	42b0      	cmp	r0, r6
 800404a:	d07d      	beq.n	8004148 <HAL_GPIO_Init+0x214>
 800404c:	f8df a154 	ldr.w	sl, [pc, #340]	; 80041a4 <HAL_GPIO_Init+0x270>
 8004050:	4550      	cmp	r0, sl
 8004052:	f000 808f 	beq.w	8004174 <HAL_GPIO_Init+0x240>
 8004056:	f8df a150 	ldr.w	sl, [pc, #336]	; 80041a8 <HAL_GPIO_Init+0x274>
 800405a:	4550      	cmp	r0, sl
 800405c:	bf0c      	ite	eq
 800405e:	f04f 0a09 	moveq.w	sl, #9
 8004062:	f04f 0a0a 	movne.w	sl, #10
 8004066:	fa0a f909 	lsl.w	r9, sl, r9
 800406a:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800406e:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004074:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 8004076:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 800407a:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800407c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004080:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 8004082:	bf54      	ite	pl
 8004084:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8004086:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 800408a:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800408e:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 8004090:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004094:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004098:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 800409a:	bf54      	ite	pl
 800409c:	4023      	andpl	r3, r4
          temp |= iocurrent;
 800409e:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 80040a2:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040a6:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80040a8:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040ac:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040b0:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 80040b2:	bf54      	ite	pl
 80040b4:	4023      	andpl	r3, r4
          temp |= iocurrent;
 80040b6:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 80040ba:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040be:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 80040c0:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c4:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 80040c6:	bf54      	ite	pl
 80040c8:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80040ca:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040ce:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80040d2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040d6:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 80040d8:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040da:	f10c 0c02 	add.w	ip, ip, #2
 80040de:	fa33 f402 	lsrs.w	r4, r3, r2
 80040e2:	f47f af35 	bne.w	8003f50 <HAL_GPIO_Init+0x1c>
  }
}
 80040e6:	b003      	add	sp, #12
 80040e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80040ec:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040ee:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040f2:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040f4:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040f6:	fa03 f30c 	lsl.w	r3, r3, ip
 80040fa:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80040fe:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004100:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8004102:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004106:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800410a:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800410e:	4093      	lsls	r3, r2
 8004110:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 8004114:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004116:	684b      	ldr	r3, [r1, #4]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	e72c      	b.n	8003f78 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800411e:	f04f 0a03 	mov.w	sl, #3
 8004122:	fa0a f909 	lsl.w	r9, sl, r9
 8004126:	ea43 0309 	orr.w	r3, r3, r9
 800412a:	e7a0      	b.n	800406e <HAL_GPIO_Init+0x13a>
 800412c:	f04f 0a01 	mov.w	sl, #1
 8004130:	fa0a f909 	lsl.w	r9, sl, r9
 8004134:	ea43 0309 	orr.w	r3, r3, r9
 8004138:	e799      	b.n	800406e <HAL_GPIO_Init+0x13a>
 800413a:	f04f 0a02 	mov.w	sl, #2
 800413e:	fa0a f909 	lsl.w	r9, sl, r9
 8004142:	ea43 0309 	orr.w	r3, r3, r9
 8004146:	e792      	b.n	800406e <HAL_GPIO_Init+0x13a>
 8004148:	f04f 0a06 	mov.w	sl, #6
 800414c:	fa0a f909 	lsl.w	r9, sl, r9
 8004150:	ea43 0309 	orr.w	r3, r3, r9
 8004154:	e78b      	b.n	800406e <HAL_GPIO_Init+0x13a>
 8004156:	f04f 0a04 	mov.w	sl, #4
 800415a:	fa0a f909 	lsl.w	r9, sl, r9
 800415e:	ea43 0309 	orr.w	r3, r3, r9
 8004162:	e784      	b.n	800406e <HAL_GPIO_Init+0x13a>
 8004164:	4770      	bx	lr
 8004166:	f04f 0a05 	mov.w	sl, #5
 800416a:	fa0a f909 	lsl.w	r9, sl, r9
 800416e:	ea43 0309 	orr.w	r3, r3, r9
 8004172:	e77c      	b.n	800406e <HAL_GPIO_Init+0x13a>
 8004174:	f04f 0a07 	mov.w	sl, #7
 8004178:	fa0a f909 	lsl.w	r9, sl, r9
 800417c:	ea43 0309 	orr.w	r3, r3, r9
 8004180:	e775      	b.n	800406e <HAL_GPIO_Init+0x13a>
 8004182:	bf00      	nop
 8004184:	58024400 	.word	0x58024400
 8004188:	58020000 	.word	0x58020000
 800418c:	58020800 	.word	0x58020800
 8004190:	58020c00 	.word	0x58020c00
 8004194:	58021000 	.word	0x58021000
 8004198:	58021400 	.word	0x58021400
 800419c:	58021800 	.word	0x58021800
 80041a0:	58020400 	.word	0x58020400
 80041a4:	58021c00 	.word	0x58021c00
 80041a8:	58022400 	.word	0x58022400

080041ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041ac:	b902      	cbnz	r2, 80041b0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041ae:	0409      	lsls	r1, r1, #16
 80041b0:	6181      	str	r1, [r0, #24]
  }
}
 80041b2:	4770      	bx	lr

080041b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041b4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80041b6:	4c10      	ldr	r4, [pc, #64]	; (80041f8 <HAL_PWREx_ConfigSupply+0x44>)
 80041b8:	68e3      	ldr	r3, [r4, #12]
 80041ba:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041be:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80041c0:	d105      	bne.n	80041ce <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041c2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80041c6:	1a18      	subs	r0, r3, r0
 80041c8:	bf18      	it	ne
 80041ca:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80041cc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80041ce:	f023 0307 	bic.w	r3, r3, #7
 80041d2:	4318      	orrs	r0, r3
 80041d4:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80041d6:	f7fd f9dd 	bl	8001594 <HAL_GetTick>
 80041da:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041dc:	e005      	b.n	80041ea <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80041de:	f7fd f9d9 	bl	8001594 <HAL_GetTick>
 80041e2:	1b40      	subs	r0, r0, r5
 80041e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80041e8:	d804      	bhi.n	80041f4 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041ea:	6863      	ldr	r3, [r4, #4]
 80041ec:	049b      	lsls	r3, r3, #18
 80041ee:	d5f6      	bpl.n	80041de <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 80041f0:	2000      	movs	r0, #0
}
 80041f2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80041f4:	2001      	movs	r0, #1
}
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	58024800 	.word	0x58024800

080041fc <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041fc:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80041fe:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004202:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004204:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8004206:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800420a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800420c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004210:	d038      	beq.n	8004284 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004212:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004216:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800421a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800421e:	fb05 f101 	mul.w	r1, r5, r1
 8004222:	2a01      	cmp	r2, #1
 8004224:	ee07 1a90 	vmov	s15, r1
 8004228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800422c:	d002      	beq.n	8004234 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800422e:	2a02      	cmp	r2, #2
 8004230:	d04e      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8004232:	b34a      	cbz	r2, 8004288 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004234:	ee07 0a90 	vmov	s15, r0
 8004238:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80042f0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800423c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8004246:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80042f4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800424a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424e:	ee06 3a90 	vmov	s13, r3
 8004252:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8004256:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800425a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800425e:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004262:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004266:	4b21      	ldr	r3, [pc, #132]	; (80042ec <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800426e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004270:	ee07 3a90 	vmov	s15, r3
 8004274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800427c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004280:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8004284:	bc30      	pop	{r4, r5}
 8004286:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	0692      	lsls	r2, r2, #26
 800428c:	d527      	bpl.n	80042de <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800428e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004290:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004294:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004296:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800429c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042a4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80042f4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80042a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042ac:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ae:	ee06 3a90 	vmov	s13, r3
 80042b2:	ee05 2a90 	vmov	s11, r2
 80042b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80042ba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80042be:	ee76 6a86 	vadd.f32	s13, s13, s12
 80042c2:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80042c6:	eee7 6a05 	vfma.f32	s13, s14, s10
 80042ca:	ee66 6a26 	vmul.f32	s13, s12, s13
 80042ce:	e7ca      	b.n	8004266 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042d0:	ee07 0a90 	vmov	s15, r0
 80042d4:	eddf 6a09 	vldr	s13, [pc, #36]	; 80042fc <HAL_RCC_GetSysClockFreq.part.0+0x100>
 80042d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042dc:	e7b0      	b.n	8004240 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042de:	ee07 0a90 	vmov	s15, r0
 80042e2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004300 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 80042e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ea:	e7a9      	b.n	8004240 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80042ec:	58024400 	.word	0x58024400
 80042f0:	4a742400 	.word	0x4a742400
 80042f4:	39000000 	.word	0x39000000
 80042f8:	03d09000 	.word	0x03d09000
 80042fc:	4bbebc20 	.word	0x4bbebc20
 8004300:	4c742400 	.word	0x4c742400

08004304 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004304:	2800      	cmp	r0, #0
 8004306:	f000 81c4 	beq.w	8004692 <HAL_RCC_OscConfig+0x38e>
{
 800430a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430c:	6803      	ldr	r3, [r0, #0]
 800430e:	4604      	mov	r4, r0
 8004310:	07d9      	lsls	r1, r3, #31
 8004312:	d52e      	bpl.n	8004372 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004314:	4993      	ldr	r1, [pc, #588]	; (8004564 <HAL_RCC_OscConfig+0x260>)
 8004316:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004318:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800431a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800431e:	2a10      	cmp	r2, #16
 8004320:	f000 80f0 	beq.w	8004504 <HAL_RCC_OscConfig+0x200>
 8004324:	2a18      	cmp	r2, #24
 8004326:	f000 80e8 	beq.w	80044fa <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432a:	6863      	ldr	r3, [r4, #4]
 800432c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004330:	f000 8109 	beq.w	8004546 <HAL_RCC_OscConfig+0x242>
 8004334:	2b00      	cmp	r3, #0
 8004336:	f040 8166 	bne.w	8004606 <HAL_RCC_OscConfig+0x302>
 800433a:	4b8a      	ldr	r3, [pc, #552]	; (8004564 <HAL_RCC_OscConfig+0x260>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800434a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800434c:	6863      	ldr	r3, [r4, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 813a 	beq.w	80045c8 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8004354:	f7fd f91e 	bl	8001594 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004358:	4e82      	ldr	r6, [pc, #520]	; (8004564 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800435a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800435c:	e005      	b.n	800436a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435e:	f7fd f919 	bl	8001594 <HAL_GetTick>
 8004362:	1b40      	subs	r0, r0, r5
 8004364:	2864      	cmp	r0, #100	; 0x64
 8004366:	f200 812d 	bhi.w	80045c4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800436a:	6833      	ldr	r3, [r6, #0]
 800436c:	039b      	lsls	r3, r3, #14
 800436e:	d5f6      	bpl.n	800435e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	079d      	lsls	r5, r3, #30
 8004374:	d47e      	bmi.n	8004474 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004376:	06d9      	lsls	r1, r3, #27
 8004378:	d528      	bpl.n	80043cc <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437a:	4a7a      	ldr	r2, [pc, #488]	; (8004564 <HAL_RCC_OscConfig+0x260>)
 800437c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800437e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004380:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004384:	2b08      	cmp	r3, #8
 8004386:	f000 80cd 	beq.w	8004524 <HAL_RCC_OscConfig+0x220>
 800438a:	2b18      	cmp	r3, #24
 800438c:	f000 80c5 	beq.w	800451a <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004390:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8004392:	4d74      	ldr	r5, [pc, #464]	; (8004564 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8155 	beq.w	8004644 <HAL_RCC_OscConfig+0x340>
        __HAL_RCC_CSI_ENABLE();
 800439a:	682b      	ldr	r3, [r5, #0]
 800439c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043a2:	f7fd f8f7 	bl	8001594 <HAL_GetTick>
 80043a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043a8:	e005      	b.n	80043b6 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043aa:	f7fd f8f3 	bl	8001594 <HAL_GetTick>
 80043ae:	1b80      	subs	r0, r0, r6
 80043b0:	2802      	cmp	r0, #2
 80043b2:	f200 8107 	bhi.w	80045c4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043b6:	682b      	ldr	r3, [r5, #0]
 80043b8:	05db      	lsls	r3, r3, #23
 80043ba:	d5f6      	bpl.n	80043aa <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043bc:	68eb      	ldr	r3, [r5, #12]
 80043be:	6a22      	ldr	r2, [r4, #32]
 80043c0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80043c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80043c8:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	071d      	lsls	r5, r3, #28
 80043ce:	d516      	bpl.n	80043fe <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043d0:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80043d2:	4d64      	ldr	r5, [pc, #400]	; (8004564 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8105 	beq.w	80045e4 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_LSI_ENABLE();
 80043da:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80043e2:	f7fd f8d7 	bl	8001594 <HAL_GetTick>
 80043e6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043e8:	e005      	b.n	80043f6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ea:	f7fd f8d3 	bl	8001594 <HAL_GetTick>
 80043ee:	1b80      	subs	r0, r0, r6
 80043f0:	2802      	cmp	r0, #2
 80043f2:	f200 80e7 	bhi.w	80045c4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043f6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80043f8:	0798      	lsls	r0, r3, #30
 80043fa:	d5f6      	bpl.n	80043ea <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	069a      	lsls	r2, r3, #26
 8004400:	d516      	bpl.n	8004430 <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004402:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8004404:	4d57      	ldr	r5, [pc, #348]	; (8004564 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 810b 	beq.w	8004622 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSI48_ENABLE();
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004412:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004414:	f7fd f8be 	bl	8001594 <HAL_GetTick>
 8004418:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800441a:	e005      	b.n	8004428 <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800441c:	f7fd f8ba 	bl	8001594 <HAL_GetTick>
 8004420:	1b80      	subs	r0, r0, r6
 8004422:	2802      	cmp	r0, #2
 8004424:	f200 80ce 	bhi.w	80045c4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	049f      	lsls	r7, r3, #18
 800442c:	d5f6      	bpl.n	800441c <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	0759      	lsls	r1, r3, #29
 8004432:	f100 808e 	bmi.w	8004552 <HAL_RCC_OscConfig+0x24e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004436:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004438:	b1d0      	cbz	r0, 8004470 <HAL_RCC_OscConfig+0x16c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800443a:	4d4a      	ldr	r5, [pc, #296]	; (8004564 <HAL_RCC_OscConfig+0x260>)
 800443c:	692b      	ldr	r3, [r5, #16]
 800443e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004442:	2b18      	cmp	r3, #24
 8004444:	f000 818c 	beq.w	8004760 <HAL_RCC_OscConfig+0x45c>
        __HAL_RCC_PLL_DISABLE();
 8004448:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800444c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004450:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004452:	f000 8120 	beq.w	8004696 <HAL_RCC_OscConfig+0x392>
        tickstart = HAL_GetTick();
 8004456:	f7fd f89d 	bl	8001594 <HAL_GetTick>
 800445a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800445c:	e005      	b.n	800446a <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445e:	f7fd f899 	bl	8001594 <HAL_GetTick>
 8004462:	1b00      	subs	r0, r0, r4
 8004464:	2802      	cmp	r0, #2
 8004466:	f200 80ad 	bhi.w	80045c4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800446a:	682b      	ldr	r3, [r5, #0]
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	d4f6      	bmi.n	800445e <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 8004470:	2000      	movs	r0, #0
}
 8004472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004474:	4a3b      	ldr	r2, [pc, #236]	; (8004564 <HAL_RCC_OscConfig+0x260>)
 8004476:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004478:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800447a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800447e:	d122      	bne.n	80044c6 <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004480:	4b38      	ldr	r3, [pc, #224]	; (8004564 <HAL_RCC_OscConfig+0x260>)
 8004482:	68e2      	ldr	r2, [r4, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	0759      	lsls	r1, r3, #29
 8004488:	d501      	bpl.n	800448e <HAL_RCC_OscConfig+0x18a>
 800448a:	2a00      	cmp	r2, #0
 800448c:	d043      	beq.n	8004516 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800448e:	4d35      	ldr	r5, [pc, #212]	; (8004564 <HAL_RCC_OscConfig+0x260>)
 8004490:	682b      	ldr	r3, [r5, #0]
 8004492:	f023 0319 	bic.w	r3, r3, #25
 8004496:	4313      	orrs	r3, r2
 8004498:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800449a:	f7fd f87b 	bl	8001594 <HAL_GetTick>
 800449e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044a0:	e005      	b.n	80044ae <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a2:	f7fd f877 	bl	8001594 <HAL_GetTick>
 80044a6:	1b80      	subs	r0, r0, r6
 80044a8:	2802      	cmp	r0, #2
 80044aa:	f200 808b 	bhi.w	80045c4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ae:	682b      	ldr	r3, [r5, #0]
 80044b0:	075b      	lsls	r3, r3, #29
 80044b2:	d5f6      	bpl.n	80044a2 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b4:	686b      	ldr	r3, [r5, #4]
 80044b6:	6922      	ldr	r2, [r4, #16]
 80044b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80044c0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	e757      	b.n	8004376 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044c6:	2b18      	cmp	r3, #24
 80044c8:	f000 80df 	beq.w	800468a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044cc:	4d25      	ldr	r5, [pc, #148]	; (8004564 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044ce:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044d0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044d2:	2a00      	cmp	r2, #0
 80044d4:	f000 80c8 	beq.w	8004668 <HAL_RCC_OscConfig+0x364>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044d8:	f023 0319 	bic.w	r3, r3, #25
 80044dc:	4313      	orrs	r3, r2
 80044de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80044e0:	f7fd f858 	bl	8001594 <HAL_GetTick>
 80044e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044e6:	e004      	b.n	80044f2 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e8:	f7fd f854 	bl	8001594 <HAL_GetTick>
 80044ec:	1b80      	subs	r0, r0, r6
 80044ee:	2802      	cmp	r0, #2
 80044f0:	d868      	bhi.n	80045c4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	075f      	lsls	r7, r3, #29
 80044f6:	d5f7      	bpl.n	80044e8 <HAL_RCC_OscConfig+0x1e4>
 80044f8:	e7dc      	b.n	80044b4 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80044fa:	f001 0103 	and.w	r1, r1, #3
 80044fe:	2902      	cmp	r1, #2
 8004500:	f47f af13 	bne.w	800432a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	4a17      	ldr	r2, [pc, #92]	; (8004564 <HAL_RCC_OscConfig+0x260>)
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	0392      	lsls	r2, r2, #14
 800450a:	f57f af32 	bpl.w	8004372 <HAL_RCC_OscConfig+0x6e>
 800450e:	6862      	ldr	r2, [r4, #4]
 8004510:	2a00      	cmp	r2, #0
 8004512:	f47f af2e 	bne.w	8004372 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8004516:	2001      	movs	r0, #1
}
 8004518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800451a:	f002 0203 	and.w	r2, r2, #3
 800451e:	2a01      	cmp	r2, #1
 8004520:	f47f af36 	bne.w	8004390 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <HAL_RCC_OscConfig+0x260>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	05da      	lsls	r2, r3, #23
 800452a:	d502      	bpl.n	8004532 <HAL_RCC_OscConfig+0x22e>
 800452c:	69e3      	ldr	r3, [r4, #28]
 800452e:	2b80      	cmp	r3, #128	; 0x80
 8004530:	d1f1      	bne.n	8004516 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004532:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <HAL_RCC_OscConfig+0x260>)
 8004534:	6a21      	ldr	r1, [r4, #32]
 8004536:	68d3      	ldr	r3, [r2, #12]
 8004538:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800453c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004540:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004542:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004544:	e742      	b.n	80043cc <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004546:	4a07      	ldr	r2, [pc, #28]	; (8004564 <HAL_RCC_OscConfig+0x260>)
 8004548:	6813      	ldr	r3, [r2, #0]
 800454a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e6fc      	b.n	800434c <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8004552:	4d05      	ldr	r5, [pc, #20]	; (8004568 <HAL_RCC_OscConfig+0x264>)
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800455c:	f7fd f81a 	bl	8001594 <HAL_GetTick>
 8004560:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x272>
 8004564:	58024400 	.word	0x58024400
 8004568:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456c:	f7fd f812 	bl	8001594 <HAL_GetTick>
 8004570:	1b80      	subs	r0, r0, r6
 8004572:	2864      	cmp	r0, #100	; 0x64
 8004574:	d826      	bhi.n	80045c4 <HAL_RCC_OscConfig+0x2c0>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004576:	682b      	ldr	r3, [r5, #0]
 8004578:	05da      	lsls	r2, r3, #23
 800457a:	d5f7      	bpl.n	800456c <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457c:	68a3      	ldr	r3, [r4, #8]
 800457e:	2b01      	cmp	r3, #1
 8004580:	f000 814d 	beq.w	800481e <HAL_RCC_OscConfig+0x51a>
 8004584:	2b00      	cmp	r3, #0
 8004586:	f040 8157 	bne.w	8004838 <HAL_RCC_OscConfig+0x534>
 800458a:	4ba8      	ldr	r3, [pc, #672]	; (800482c <HAL_RCC_OscConfig+0x528>)
 800458c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	671a      	str	r2, [r3, #112]	; 0x70
 8004594:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004596:	f022 0204 	bic.w	r2, r2, #4
 800459a:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800459c:	68a3      	ldr	r3, [r4, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 812c 	beq.w	80047fc <HAL_RCC_OscConfig+0x4f8>
      tickstart = HAL_GetTick();
 80045a4:	f7fc fff6 	bl	8001594 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045a8:	4ea0      	ldr	r6, [pc, #640]	; (800482c <HAL_RCC_OscConfig+0x528>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80045ae:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045b0:	e004      	b.n	80045bc <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b2:	f7fc ffef 	bl	8001594 <HAL_GetTick>
 80045b6:	1b40      	subs	r0, r0, r5
 80045b8:	42b8      	cmp	r0, r7
 80045ba:	d803      	bhi.n	80045c4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045bc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80045be:	079b      	lsls	r3, r3, #30
 80045c0:	d5f7      	bpl.n	80045b2 <HAL_RCC_OscConfig+0x2ae>
 80045c2:	e738      	b.n	8004436 <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 80045c4:	2003      	movs	r0, #3
}
 80045c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 80045c8:	f7fc ffe4 	bl	8001594 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045cc:	4e97      	ldr	r6, [pc, #604]	; (800482c <HAL_RCC_OscConfig+0x528>)
        tickstart = HAL_GetTick();
 80045ce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045d0:	e004      	b.n	80045dc <HAL_RCC_OscConfig+0x2d8>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d2:	f7fc ffdf 	bl	8001594 <HAL_GetTick>
 80045d6:	1b40      	subs	r0, r0, r5
 80045d8:	2864      	cmp	r0, #100	; 0x64
 80045da:	d8f3      	bhi.n	80045c4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045dc:	6833      	ldr	r3, [r6, #0]
 80045de:	039f      	lsls	r7, r3, #14
 80045e0:	d4f7      	bmi.n	80045d2 <HAL_RCC_OscConfig+0x2ce>
 80045e2:	e6c5      	b.n	8004370 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80045e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80045e6:	f023 0301 	bic.w	r3, r3, #1
 80045ea:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80045ec:	f7fc ffd2 	bl	8001594 <HAL_GetTick>
 80045f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045f2:	e004      	b.n	80045fe <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f4:	f7fc ffce 	bl	8001594 <HAL_GetTick>
 80045f8:	1b80      	subs	r0, r0, r6
 80045fa:	2802      	cmp	r0, #2
 80045fc:	d8e2      	bhi.n	80045c4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004600:	0799      	lsls	r1, r3, #30
 8004602:	d4f7      	bmi.n	80045f4 <HAL_RCC_OscConfig+0x2f0>
 8004604:	e6fa      	b.n	80043fc <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004606:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800460a:	4b88      	ldr	r3, [pc, #544]	; (800482c <HAL_RCC_OscConfig+0x528>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	f47f ae96 	bne.w	800433e <HAL_RCC_OscConfig+0x3a>
 8004612:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e694      	b.n	800434c <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004628:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800462a:	f7fc ffb3 	bl	8001594 <HAL_GetTick>
 800462e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004630:	e004      	b.n	800463c <HAL_RCC_OscConfig+0x338>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004632:	f7fc ffaf 	bl	8001594 <HAL_GetTick>
 8004636:	1b80      	subs	r0, r0, r6
 8004638:	2802      	cmp	r0, #2
 800463a:	d8c3      	bhi.n	80045c4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	0498      	lsls	r0, r3, #18
 8004640:	d4f7      	bmi.n	8004632 <HAL_RCC_OscConfig+0x32e>
 8004642:	e6f4      	b.n	800442e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800464c:	f7fc ffa2 	bl	8001594 <HAL_GetTick>
 8004650:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004652:	e004      	b.n	800465e <HAL_RCC_OscConfig+0x35a>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004654:	f7fc ff9e 	bl	8001594 <HAL_GetTick>
 8004658:	1b80      	subs	r0, r0, r6
 800465a:	2802      	cmp	r0, #2
 800465c:	d8b2      	bhi.n	80045c4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800465e:	682b      	ldr	r3, [r5, #0]
 8004660:	05df      	lsls	r7, r3, #23
 8004662:	d4f7      	bmi.n	8004654 <HAL_RCC_OscConfig+0x350>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	e6b1      	b.n	80043cc <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800466e:	f7fc ff91 	bl	8001594 <HAL_GetTick>
 8004672:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004674:	e004      	b.n	8004680 <HAL_RCC_OscConfig+0x37c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004676:	f7fc ff8d 	bl	8001594 <HAL_GetTick>
 800467a:	1b80      	subs	r0, r0, r6
 800467c:	2802      	cmp	r0, #2
 800467e:	d8a1      	bhi.n	80045c4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	0758      	lsls	r0, r3, #29
 8004684:	d4f7      	bmi.n	8004676 <HAL_RCC_OscConfig+0x372>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	e675      	b.n	8004376 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800468a:	0790      	lsls	r0, r2, #30
 800468c:	f47f af1e 	bne.w	80044cc <HAL_RCC_OscConfig+0x1c8>
 8004690:	e6f6      	b.n	8004480 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 8004692:	2001      	movs	r0, #1
}
 8004694:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004696:	f7fc ff7d 	bl	8001594 <HAL_GetTick>
 800469a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800469c:	e004      	b.n	80046a8 <HAL_RCC_OscConfig+0x3a4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469e:	f7fc ff79 	bl	8001594 <HAL_GetTick>
 80046a2:	1b80      	subs	r0, r0, r6
 80046a4:	2802      	cmp	r0, #2
 80046a6:	d88d      	bhi.n	80045c4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	0199      	lsls	r1, r3, #6
 80046ac:	d4f7      	bmi.n	800469e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ae:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80046b0:	4b5f      	ldr	r3, [pc, #380]	; (8004830 <HAL_RCC_OscConfig+0x52c>)
 80046b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80046b4:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046b6:	495f      	ldr	r1, [pc, #380]	; (8004834 <HAL_RCC_OscConfig+0x530>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046b8:	4e5c      	ldr	r6, [pc, #368]	; (800482c <HAL_RCC_OscConfig+0x528>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ba:	4313      	orrs	r3, r2
 80046bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80046be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80046c2:	62ab      	str	r3, [r5, #40]	; 0x28
 80046c4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80046c8:	3b01      	subs	r3, #1
 80046ca:	3a01      	subs	r2, #1
 80046cc:	025b      	lsls	r3, r3, #9
 80046ce:	0412      	lsls	r2, r2, #16
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80046d6:	4313      	orrs	r3, r2
 80046d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80046da:	3a01      	subs	r2, #1
 80046dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e0:	4313      	orrs	r3, r2
 80046e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80046e4:	3a01      	subs	r2, #1
 80046e6:	0612      	lsls	r2, r2, #24
 80046e8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80046ec:	4313      	orrs	r3, r2
 80046ee:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80046f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046f8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80046fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80046fc:	4011      	ands	r1, r2
 80046fe:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004702:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004704:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004706:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004708:	f023 030c 	bic.w	r3, r3, #12
 800470c:	4313      	orrs	r3, r2
 800470e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004710:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004712:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004714:	f023 0302 	bic.w	r3, r3, #2
 8004718:	4313      	orrs	r3, r2
 800471a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800471c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800471e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004722:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004724:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800472a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800472c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800472e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004732:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004734:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004742:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004744:	f7fc ff26 	bl	8001594 <HAL_GetTick>
 8004748:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800474a:	e005      	b.n	8004758 <HAL_RCC_OscConfig+0x454>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fc ff22 	bl	8001594 <HAL_GetTick>
 8004750:	1b00      	subs	r0, r0, r4
 8004752:	2802      	cmp	r0, #2
 8004754:	f63f af36 	bhi.w	80045c4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004758:	6833      	ldr	r3, [r6, #0]
 800475a:	019a      	lsls	r2, r3, #6
 800475c:	d5f6      	bpl.n	800474c <HAL_RCC_OscConfig+0x448>
 800475e:	e687      	b.n	8004470 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004760:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004762:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004764:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004766:	f43f ae84 	beq.w	8004472 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800476e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004770:	428b      	cmp	r3, r1
 8004772:	f47f aed0 	bne.w	8004516 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004776:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800477c:	429a      	cmp	r2, r3
 800477e:	f47f aeca 	bne.w	8004516 <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004782:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004784:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8004788:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	f47f aec3 	bne.w	8004516 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004792:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8004796:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	f47f aebc 	bne.w	8004516 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800479e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047a0:	f3c6 4206 	ubfx	r2, r6, #16, #7
 80047a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047a6:	429a      	cmp	r2, r3
 80047a8:	f47f aeb5 	bne.w	8004516 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80047ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047ae:	f3c6 6606 	ubfx	r6, r6, #24, #7
 80047b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047b4:	429e      	cmp	r6, r3
 80047b6:	f47f aeae 	bne.w	8004516 <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80047ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80047bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80047be:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80047c2:	429a      	cmp	r2, r3
 80047c4:	f43f ae54 	beq.w	8004470 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 80047c8:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_RCC_OscConfig+0x528>)
 80047ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80047d2:	f7fc fedf 	bl	8001594 <HAL_GetTick>
 80047d6:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80047d8:	f7fc fedc 	bl	8001594 <HAL_GetTick>
 80047dc:	42a8      	cmp	r0, r5
 80047de:	d0fb      	beq.n	80047d8 <HAL_RCC_OscConfig+0x4d4>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047e0:	4a12      	ldr	r2, [pc, #72]	; (800482c <HAL_RCC_OscConfig+0x528>)
  return HAL_OK;
 80047e2:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80047e6:	4b13      	ldr	r3, [pc, #76]	; (8004834 <HAL_RCC_OscConfig+0x530>)
 80047e8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80047ea:	4023      	ands	r3, r4
 80047ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80047f0:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80047f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80047fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 80047fc:	f7fc feca 	bl	8001594 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004800:	4e0a      	ldr	r6, [pc, #40]	; (800482c <HAL_RCC_OscConfig+0x528>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004802:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004806:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004808:	e005      	b.n	8004816 <HAL_RCC_OscConfig+0x512>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fc fec3 	bl	8001594 <HAL_GetTick>
 800480e:	1b40      	subs	r0, r0, r5
 8004810:	42b8      	cmp	r0, r7
 8004812:	f63f aed7 	bhi.w	80045c4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004816:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004818:	0798      	lsls	r0, r3, #30
 800481a:	d4f6      	bmi.n	800480a <HAL_RCC_OscConfig+0x506>
 800481c:	e60b      	b.n	8004436 <HAL_RCC_OscConfig+0x132>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800481e:	4a03      	ldr	r2, [pc, #12]	; (800482c <HAL_RCC_OscConfig+0x528>)
 8004820:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
 8004828:	e6b8      	b.n	800459c <HAL_RCC_OscConfig+0x298>
 800482a:	bf00      	nop
 800482c:	58024400 	.word	0x58024400
 8004830:	fffffc0c 	.word	0xfffffc0c
 8004834:	ffff0007 	.word	0xffff0007
 8004838:	2b05      	cmp	r3, #5
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_RCC_OscConfig+0x550>)
 800483c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800483e:	f47f aea6 	bne.w	800458e <HAL_RCC_OscConfig+0x28a>
 8004842:	f042 0204 	orr.w	r2, r2, #4
 8004846:	671a      	str	r2, [r3, #112]	; 0x70
 8004848:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	671a      	str	r2, [r3, #112]	; 0x70
 8004850:	e6a4      	b.n	800459c <HAL_RCC_OscConfig+0x298>
 8004852:	bf00      	nop
 8004854:	58024400 	.word	0x58024400

08004858 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004858:	4a47      	ldr	r2, [pc, #284]	; (8004978 <HAL_RCC_GetSysClockFreq+0x120>)
 800485a:	6913      	ldr	r3, [r2, #16]
 800485c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004860:	2b10      	cmp	r3, #16
 8004862:	d004      	beq.n	800486e <HAL_RCC_GetSysClockFreq+0x16>
 8004864:	2b18      	cmp	r3, #24
 8004866:	d00d      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x2c>
 8004868:	b11b      	cbz	r3, 8004872 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800486a:	4844      	ldr	r0, [pc, #272]	; (800497c <HAL_RCC_GetSysClockFreq+0x124>)
 800486c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800486e:	4844      	ldr	r0, [pc, #272]	; (8004980 <HAL_RCC_GetSysClockFreq+0x128>)
 8004870:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	0699      	lsls	r1, r3, #26
 8004876:	d54a      	bpl.n	800490e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004878:	6813      	ldr	r3, [r2, #0]
 800487a:	4842      	ldr	r0, [pc, #264]	; (8004984 <HAL_RCC_GetSysClockFreq+0x12c>)
 800487c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004880:	40d8      	lsrs	r0, r3
 8004882:	4770      	bx	lr
{
 8004884:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004886:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004888:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800488a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800488c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004890:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004892:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004896:	d038      	beq.n	800490a <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004898:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800489c:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048a0:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048a4:	fb05 f101 	mul.w	r1, r5, r1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	ee07 1a90 	vmov	s15, r1
 80048ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 80048b2:	d002      	beq.n	80048ba <HAL_RCC_GetSysClockFreq+0x62>
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d02c      	beq.n	8004912 <HAL_RCC_GetSysClockFreq+0xba>
 80048b8:	b393      	cbz	r3, 8004920 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048ba:	ee07 0a90 	vmov	s15, r0
 80048be:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004988 <HAL_RCC_GetSysClockFreq+0x130>
 80048c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80048c8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80048cc:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800498c <HAL_RCC_GetSysClockFreq+0x134>
 80048d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d4:	ee06 3a90 	vmov	s13, r3
 80048d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80048dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80048e0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80048e4:	eee7 6a25 	vfma.f32	s13, s14, s11
 80048e8:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80048ec:	4b22      	ldr	r3, [pc, #136]	; (8004978 <HAL_RCC_GetSysClockFreq+0x120>)
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80048f4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004906:	ee17 0a90 	vmov	r0, s15
}
 800490a:	bc30      	pop	{r4, r5}
 800490c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800490e:	481d      	ldr	r0, [pc, #116]	; (8004984 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8004910:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004912:	ee07 0a90 	vmov	s15, r0
 8004916:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004990 <HAL_RCC_GetSysClockFreq+0x138>
 800491a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800491e:	e7d2      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004920:	6813      	ldr	r3, [r2, #0]
 8004922:	069b      	lsls	r3, r3, #26
 8004924:	d520      	bpl.n	8004968 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004926:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004928:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800492c:	4915      	ldr	r1, [pc, #84]	; (8004984 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800492e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004932:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004934:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800498c <HAL_RCC_GetSysClockFreq+0x134>
 8004940:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004944:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004946:	ee06 3a90 	vmov	s13, r3
 800494a:	ee05 1a90 	vmov	s11, r1
 800494e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004952:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004956:	ee76 6a86 	vadd.f32	s13, s13, s12
 800495a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800495e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8004962:	ee66 6a26 	vmul.f32	s13, s12, s13
 8004966:	e7c1      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004968:	ee07 0a90 	vmov	s15, r0
 800496c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004994 <HAL_RCC_GetSysClockFreq+0x13c>
 8004970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004974:	e7a7      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x6e>
 8004976:	bf00      	nop
 8004978:	58024400 	.word	0x58024400
 800497c:	003d0900 	.word	0x003d0900
 8004980:	017d7840 	.word	0x017d7840
 8004984:	03d09000 	.word	0x03d09000
 8004988:	4a742400 	.word	0x4a742400
 800498c:	39000000 	.word	0x39000000
 8004990:	4bbebc20 	.word	0x4bbebc20
 8004994:	4c742400 	.word	0x4c742400

08004998 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004998:	2800      	cmp	r0, #0
 800499a:	f000 811a 	beq.w	8004bd2 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800499e:	4a92      	ldr	r2, [pc, #584]	; (8004be8 <HAL_RCC_ClockConfig+0x250>)
{
 80049a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a4:	6813      	ldr	r3, [r2, #0]
 80049a6:	4604      	mov	r4, r0
 80049a8:	460d      	mov	r5, r1
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	428b      	cmp	r3, r1
 80049b0:	d20c      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	6813      	ldr	r3, [r2, #0]
 80049b4:	f023 030f 	bic.w	r3, r3, #15
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049bc:	6813      	ldr	r3, [r2, #0]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	428b      	cmp	r3, r1
 80049c4:	d002      	beq.n	80049cc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80049c6:	2001      	movs	r0, #1
}
 80049c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	075f      	lsls	r7, r3, #29
 80049d0:	d50c      	bpl.n	80049ec <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049d2:	4986      	ldr	r1, [pc, #536]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 80049d4:	6920      	ldr	r0, [r4, #16]
 80049d6:	698a      	ldr	r2, [r1, #24]
 80049d8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80049dc:	4290      	cmp	r0, r2
 80049de:	d905      	bls.n	80049ec <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049e0:	698b      	ldr	r3, [r1, #24]
 80049e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e6:	4303      	orrs	r3, r0
 80049e8:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	071e      	lsls	r6, r3, #28
 80049ee:	d50c      	bpl.n	8004a0a <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049f0:	497e      	ldr	r1, [pc, #504]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 80049f2:	6960      	ldr	r0, [r4, #20]
 80049f4:	69ca      	ldr	r2, [r1, #28]
 80049f6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80049fa:	4290      	cmp	r0, r2
 80049fc:	d905      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049fe:	69cb      	ldr	r3, [r1, #28]
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	4303      	orrs	r3, r0
 8004a06:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	06d8      	lsls	r0, r3, #27
 8004a0c:	d50c      	bpl.n	8004a28 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a0e:	4977      	ldr	r1, [pc, #476]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004a10:	69a0      	ldr	r0, [r4, #24]
 8004a12:	69ca      	ldr	r2, [r1, #28]
 8004a14:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004a18:	4290      	cmp	r0, r2
 8004a1a:	d905      	bls.n	8004a28 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a1c:	69cb      	ldr	r3, [r1, #28]
 8004a1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a22:	4303      	orrs	r3, r0
 8004a24:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	0699      	lsls	r1, r3, #26
 8004a2a:	d50c      	bpl.n	8004a46 <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a2c:	496f      	ldr	r1, [pc, #444]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004a2e:	69e0      	ldr	r0, [r4, #28]
 8004a30:	6a0a      	ldr	r2, [r1, #32]
 8004a32:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004a36:	4290      	cmp	r0, r2
 8004a38:	d905      	bls.n	8004a46 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a3a:	6a0b      	ldr	r3, [r1, #32]
 8004a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a40:	4303      	orrs	r3, r0
 8004a42:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	079a      	lsls	r2, r3, #30
 8004a48:	f140 8083 	bpl.w	8004b52 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a4c:	4867      	ldr	r0, [pc, #412]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004a4e:	68e1      	ldr	r1, [r4, #12]
 8004a50:	6982      	ldr	r2, [r0, #24]
 8004a52:	f002 020f 	and.w	r2, r2, #15
 8004a56:	4291      	cmp	r1, r2
 8004a58:	f240 80a9 	bls.w	8004bae <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a5c:	6983      	ldr	r3, [r0, #24]
 8004a5e:	f023 030f 	bic.w	r3, r3, #15
 8004a62:	4319      	orrs	r1, r3
 8004a64:	6181      	str	r1, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	07df      	lsls	r7, r3, #31
 8004a6a:	d474      	bmi.n	8004b56 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a6c:	079f      	lsls	r7, r3, #30
 8004a6e:	d507      	bpl.n	8004a80 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a70:	4a5e      	ldr	r2, [pc, #376]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004a72:	68e1      	ldr	r1, [r4, #12]
 8004a74:	6993      	ldr	r3, [r2, #24]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	428b      	cmp	r3, r1
 8004a7c:	f200 80a0 	bhi.w	8004bc0 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a80:	4a59      	ldr	r2, [pc, #356]	; (8004be8 <HAL_RCC_ClockConfig+0x250>)
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	42ab      	cmp	r3, r5
 8004a8a:	d909      	bls.n	8004aa0 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8c:	6813      	ldr	r3, [r2, #0]
 8004a8e:	f023 030f 	bic.w	r3, r3, #15
 8004a92:	432b      	orrs	r3, r5
 8004a94:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	6813      	ldr	r3, [r2, #0]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	42ab      	cmp	r3, r5
 8004a9e:	d192      	bne.n	80049c6 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	075e      	lsls	r6, r3, #29
 8004aa4:	d50c      	bpl.n	8004ac0 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004aa6:	4951      	ldr	r1, [pc, #324]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004aa8:	6920      	ldr	r0, [r4, #16]
 8004aaa:	698a      	ldr	r2, [r1, #24]
 8004aac:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004ab0:	4290      	cmp	r0, r2
 8004ab2:	d205      	bcs.n	8004ac0 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ab4:	698b      	ldr	r3, [r1, #24]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	4303      	orrs	r3, r0
 8004abc:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	071d      	lsls	r5, r3, #28
 8004ac2:	d50c      	bpl.n	8004ade <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ac4:	4949      	ldr	r1, [pc, #292]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004ac6:	6960      	ldr	r0, [r4, #20]
 8004ac8:	69ca      	ldr	r2, [r1, #28]
 8004aca:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004ace:	4290      	cmp	r0, r2
 8004ad0:	d205      	bcs.n	8004ade <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ad2:	69cb      	ldr	r3, [r1, #28]
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad8:	4303      	orrs	r3, r0
 8004ada:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	06d8      	lsls	r0, r3, #27
 8004ae0:	d50c      	bpl.n	8004afc <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ae2:	4942      	ldr	r1, [pc, #264]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004ae4:	69a0      	ldr	r0, [r4, #24]
 8004ae6:	69ca      	ldr	r2, [r1, #28]
 8004ae8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004aec:	4290      	cmp	r0, r2
 8004aee:	d205      	bcs.n	8004afc <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004af0:	69cb      	ldr	r3, [r1, #28]
 8004af2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004af6:	4303      	orrs	r3, r0
 8004af8:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	0699      	lsls	r1, r3, #26
 8004afe:	d50b      	bpl.n	8004b18 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b00:	4a3a      	ldr	r2, [pc, #232]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004b02:	69e1      	ldr	r1, [r4, #28]
 8004b04:	6a13      	ldr	r3, [r2, #32]
 8004b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b0a:	4299      	cmp	r1, r3
 8004b0c:	d204      	bcs.n	8004b18 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b0e:	6a13      	ldr	r3, [r2, #32]
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b18:	f7ff fe9e 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8004b1c:	4a33      	ldr	r2, [pc, #204]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4833      	ldr	r0, [pc, #204]	; (8004bf0 <HAL_RCC_ClockConfig+0x258>)
 8004b22:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b24:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b26:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8004b2a:	4d32      	ldr	r5, [pc, #200]	; (8004bf4 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b2c:	f002 020f 	and.w	r2, r2, #15
 8004b30:	4c31      	ldr	r4, [pc, #196]	; (8004bf8 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b32:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b34:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b36:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8004b3a:	4830      	ldr	r0, [pc, #192]	; (8004bfc <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b3c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b40:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8004b42:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8004b44:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b46:	40d3      	lsrs	r3, r2
 8004b48:	6023      	str	r3, [r4, #0]
}
 8004b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8004b4e:	f7fc bcbf 	b.w	80014d0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b52:	07db      	lsls	r3, r3, #31
 8004b54:	d594      	bpl.n	8004a80 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b56:	4a25      	ldr	r2, [pc, #148]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004b58:	68a1      	ldr	r1, [r4, #8]
 8004b5a:	6993      	ldr	r3, [r2, #24]
 8004b5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b64:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b66:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b68:	2902      	cmp	r1, #2
 8004b6a:	d034      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b6c:	2903      	cmp	r1, #3
 8004b6e:	d02d      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b70:	2901      	cmp	r1, #1
 8004b72:	d035      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b74:	075b      	lsls	r3, r3, #29
 8004b76:	f57f af26 	bpl.w	80049c6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b7a:	4e1c      	ldr	r6, [pc, #112]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b7c:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b80:	6933      	ldr	r3, [r6, #16]
 8004b82:	f023 0307 	bic.w	r3, r3, #7
 8004b86:	430b      	orrs	r3, r1
 8004b88:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8004b8a:	f7fc fd03 	bl	8001594 <HAL_GetTick>
 8004b8e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b90:	e004      	b.n	8004b9c <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b92:	f7fc fcff 	bl	8001594 <HAL_GetTick>
 8004b96:	1bc0      	subs	r0, r0, r7
 8004b98:	4540      	cmp	r0, r8
 8004b9a:	d81f      	bhi.n	8004bdc <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9c:	6933      	ldr	r3, [r6, #16]
 8004b9e:	6862      	ldr	r2, [r4, #4]
 8004ba0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ba4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004ba8:	d1f3      	bne.n	8004b92 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	e75e      	b.n	8004a6c <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bae:	07da      	lsls	r2, r3, #31
 8004bb0:	d4d1      	bmi.n	8004b56 <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004bb2:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <HAL_RCC_ClockConfig+0x254>)
 8004bb4:	6993      	ldr	r3, [r2, #24]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	428b      	cmp	r3, r1
 8004bbc:	f67f af60 	bls.w	8004a80 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc0:	6993      	ldr	r3, [r2, #24]
 8004bc2:	f023 030f 	bic.w	r3, r3, #15
 8004bc6:	4319      	orrs	r1, r3
 8004bc8:	6191      	str	r1, [r2, #24]
 8004bca:	e759      	b.n	8004a80 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bcc:	0198      	lsls	r0, r3, #6
 8004bce:	d4d4      	bmi.n	8004b7a <HAL_RCC_ClockConfig+0x1e2>
 8004bd0:	e6f9      	b.n	80049c6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004bd2:	2001      	movs	r0, #1
}
 8004bd4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bd6:	039e      	lsls	r6, r3, #14
 8004bd8:	d4cf      	bmi.n	8004b7a <HAL_RCC_ClockConfig+0x1e2>
 8004bda:	e6f4      	b.n	80049c6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004bdc:	2003      	movs	r0, #3
 8004bde:	e6f3      	b.n	80049c8 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004be0:	05da      	lsls	r2, r3, #23
 8004be2:	d4ca      	bmi.n	8004b7a <HAL_RCC_ClockConfig+0x1e2>
 8004be4:	e6ef      	b.n	80049c6 <HAL_RCC_ClockConfig+0x2e>
 8004be6:	bf00      	nop
 8004be8:	52002000 	.word	0x52002000
 8004bec:	58024400 	.word	0x58024400
 8004bf0:	08008650 	.word	0x08008650
 8004bf4:	24000004 	.word	0x24000004
 8004bf8:	24000008 	.word	0x24000008
 8004bfc:	24000010 	.word	0x24000010

08004c00 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c00:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c02:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c04:	6913      	ldr	r3, [r2, #16]
 8004c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d01a      	beq.n	8004c44 <HAL_RCC_GetHCLKFreq+0x44>
 8004c0e:	2b18      	cmp	r3, #24
 8004c10:	d023      	beq.n	8004c5a <HAL_RCC_GetHCLKFreq+0x5a>
 8004c12:	b1cb      	cbz	r3, 8004c48 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8004c14:	4814      	ldr	r0, [pc, #80]	; (8004c68 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c16:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <HAL_RCC_GetHCLKFreq+0x64>)
 8004c18:	4914      	ldr	r1, [pc, #80]	; (8004c6c <HAL_RCC_GetHCLKFreq+0x6c>)
 8004c1a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c1c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c1e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c22:	4c13      	ldr	r4, [pc, #76]	; (8004c70 <HAL_RCC_GetHCLKFreq+0x70>)
 8004c24:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c28:	4d12      	ldr	r5, [pc, #72]	; (8004c74 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c2a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c2c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c2e:	f002 021f 	and.w	r2, r2, #31
 8004c32:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c36:	f003 001f 	and.w	r0, r3, #31
 8004c3a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8004c3e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c40:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c44:	480c      	ldr	r0, [pc, #48]	; (8004c78 <HAL_RCC_GetHCLKFreq+0x78>)
 8004c46:	e7e6      	b.n	8004c16 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c48:	6813      	ldr	r3, [r2, #0]
 8004c4a:	069b      	lsls	r3, r3, #26
 8004c4c:	d508      	bpl.n	8004c60 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	480a      	ldr	r0, [pc, #40]	; (8004c7c <HAL_RCC_GetHCLKFreq+0x7c>)
 8004c52:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004c56:	40d0      	lsrs	r0, r2
 8004c58:	e7dd      	b.n	8004c16 <HAL_RCC_GetHCLKFreq+0x16>
 8004c5a:	f7ff facf 	bl	80041fc <HAL_RCC_GetSysClockFreq.part.0>
 8004c5e:	e7da      	b.n	8004c16 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c60:	4806      	ldr	r0, [pc, #24]	; (8004c7c <HAL_RCC_GetHCLKFreq+0x7c>)
 8004c62:	e7d8      	b.n	8004c16 <HAL_RCC_GetHCLKFreq+0x16>
 8004c64:	58024400 	.word	0x58024400
 8004c68:	003d0900 	.word	0x003d0900
 8004c6c:	08008650 	.word	0x08008650
 8004c70:	24000008 	.word	0x24000008
 8004c74:	24000004 	.word	0x24000004
 8004c78:	017d7840 	.word	0x017d7840
 8004c7c:	03d09000 	.word	0x03d09000

08004c80 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c80:	4a1c      	ldr	r2, [pc, #112]	; (8004cf4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c82:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c84:	6913      	ldr	r3, [r2, #16]
 8004c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c8a:	2b10      	cmp	r3, #16
 8004c8c:	d021      	beq.n	8004cd2 <HAL_RCC_GetPCLK1Freq+0x52>
 8004c8e:	2b18      	cmp	r3, #24
 8004c90:	d02b      	beq.n	8004cea <HAL_RCC_GetPCLK1Freq+0x6a>
 8004c92:	b303      	cbz	r3, 8004cd6 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8004c94:	4818      	ldr	r0, [pc, #96]	; (8004cf8 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c96:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <HAL_RCC_GetPCLK1Freq+0x74>)
 8004c98:	4918      	ldr	r1, [pc, #96]	; (8004cfc <HAL_RCC_GetPCLK1Freq+0x7c>)
 8004c9a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8004c9c:	4d18      	ldr	r5, [pc, #96]	; (8004d00 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c9e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ca2:	4c18      	ldr	r4, [pc, #96]	; (8004d04 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ca4:	5ccb      	ldrb	r3, [r1, r3]
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cae:	6990      	ldr	r0, [r2, #24]
 8004cb0:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8004cb4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cb6:	5c08      	ldrb	r0, [r1, r0]
 8004cb8:	f000 001f 	and.w	r0, r0, #31
 8004cbc:	40c3      	lsrs	r3, r0
 8004cbe:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004cc0:	69d2      	ldr	r2, [r2, #28]
 8004cc2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004cc6:	5c88      	ldrb	r0, [r1, r2]
 8004cc8:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ccc:	fa23 f000 	lsr.w	r0, r3, r0
 8004cd0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd2:	480d      	ldr	r0, [pc, #52]	; (8004d08 <HAL_RCC_GetPCLK1Freq+0x88>)
 8004cd4:	e7df      	b.n	8004c96 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cd6:	6813      	ldr	r3, [r2, #0]
 8004cd8:	069b      	lsls	r3, r3, #26
 8004cda:	d509      	bpl.n	8004cf0 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cdc:	6810      	ldr	r0, [r2, #0]
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004ce0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8004ce4:	fa23 f000 	lsr.w	r0, r3, r0
 8004ce8:	e7d5      	b.n	8004c96 <HAL_RCC_GetPCLK1Freq+0x16>
 8004cea:	f7ff fa87 	bl	80041fc <HAL_RCC_GetSysClockFreq.part.0>
 8004cee:	e7d2      	b.n	8004c96 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cf0:	4806      	ldr	r0, [pc, #24]	; (8004d0c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004cf2:	e7d0      	b.n	8004c96 <HAL_RCC_GetPCLK1Freq+0x16>
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	003d0900 	.word	0x003d0900
 8004cfc:	08008650 	.word	0x08008650
 8004d00:	24000004 	.word	0x24000004
 8004d04:	24000008 	.word	0x24000008
 8004d08:	017d7840 	.word	0x017d7840
 8004d0c:	03d09000 	.word	0x03d09000

08004d10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d12:	4c3a      	ldr	r4, [pc, #232]	; (8004dfc <RCCEx_PLL2_Config+0xec>)
 8004d14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d067      	beq.n	8004dee <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	4606      	mov	r6, r0
 8004d22:	460f      	mov	r7, r1
 8004d24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d28:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fc fc33 	bl	8001594 <HAL_GetTick>
 8004d2e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d30:	e004      	b.n	8004d3c <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d32:	f7fc fc2f 	bl	8001594 <HAL_GetTick>
 8004d36:	1b43      	subs	r3, r0, r5
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d856      	bhi.n	8004dea <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	011a      	lsls	r2, r3, #4
 8004d40:	d4f7      	bmi.n	8004d32 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d44:	6832      	ldr	r2, [r6, #0]
 8004d46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d4a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004d4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d50:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	3a01      	subs	r2, #1
 8004d58:	025b      	lsls	r3, r3, #9
 8004d5a:	0412      	lsls	r2, r2, #16
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004d62:	4313      	orrs	r3, r2
 8004d64:	6872      	ldr	r2, [r6, #4]
 8004d66:	3a01      	subs	r2, #1
 8004d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	6932      	ldr	r2, [r6, #16]
 8004d70:	3a01      	subs	r2, #1
 8004d72:	0612      	lsls	r2, r2, #24
 8004d74:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d7e:	6972      	ldr	r2, [r6, #20]
 8004d80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d84:	4313      	orrs	r3, r2
 8004d86:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d8a:	69b3      	ldr	r3, [r6, #24]
 8004d8c:	f022 0220 	bic.w	r2, r2, #32
 8004d90:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d94:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d98:	f022 0210 	bic.w	r2, r2, #16
 8004d9c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004da0:	69f2      	ldr	r2, [r6, #28]
 8004da2:	400b      	ands	r3, r1
 8004da4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004da8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004daa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004dac:	f043 0310 	orr.w	r3, r3, #16
 8004db0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004db2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004db4:	b1ef      	cbz	r7, 8004df2 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004db6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004db8:	bf0c      	ite	eq
 8004dba:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dbe:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8004dc2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004dc4:	4c0d      	ldr	r4, [pc, #52]	; (8004dfc <RCCEx_PLL2_Config+0xec>)
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dcc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dce:	f7fc fbe1 	bl	8001594 <HAL_GetTick>
 8004dd2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dd4:	e004      	b.n	8004de0 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dd6:	f7fc fbdd 	bl	8001594 <HAL_GetTick>
 8004dda:	1b40      	subs	r0, r0, r5
 8004ddc:	2802      	cmp	r0, #2
 8004dde:	d804      	bhi.n	8004dea <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	d5f7      	bpl.n	8004dd6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8004de6:	2000      	movs	r0, #0
}
 8004de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004dea:	2003      	movs	r0, #3
}
 8004dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004dee:	2001      	movs	r0, #1
}
 8004df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004df6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004df8:	e7e4      	b.n	8004dc4 <RCCEx_PLL2_Config+0xb4>
 8004dfa:	bf00      	nop
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	ffff0007 	.word	0xffff0007

08004e04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e06:	4c3a      	ldr	r4, [pc, #232]	; (8004ef0 <RCCEx_PLL3_Config+0xec>)
 8004e08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d067      	beq.n	8004ee2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	4606      	mov	r6, r0
 8004e16:	460f      	mov	r7, r1
 8004e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1e:	f7fc fbb9 	bl	8001594 <HAL_GetTick>
 8004e22:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e24:	e004      	b.n	8004e30 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e26:	f7fc fbb5 	bl	8001594 <HAL_GetTick>
 8004e2a:	1b43      	subs	r3, r0, r5
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d856      	bhi.n	8004ede <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	009a      	lsls	r2, r3, #2
 8004e34:	d4f7      	bmi.n	8004e26 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e38:	6832      	ldr	r2, [r6, #0]
 8004e3a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004e3e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004e42:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e44:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	3a01      	subs	r2, #1
 8004e4c:	025b      	lsls	r3, r3, #9
 8004e4e:	0412      	lsls	r2, r2, #16
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004e56:	4313      	orrs	r3, r2
 8004e58:	6872      	ldr	r2, [r6, #4]
 8004e5a:	3a01      	subs	r2, #1
 8004e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e60:	4313      	orrs	r3, r2
 8004e62:	6932      	ldr	r2, [r6, #16]
 8004e64:	3a01      	subs	r2, #1
 8004e66:	0612      	lsls	r2, r2, #24
 8004e68:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e72:	6972      	ldr	r2, [r6, #20]
 8004e74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e7e:	69b3      	ldr	r3, [r6, #24]
 8004e80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e84:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e86:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e88:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e90:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e92:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004e94:	69f2      	ldr	r2, [r6, #28]
 8004e96:	400b      	ands	r3, r1
 8004e98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004e9c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004ea8:	b1ef      	cbz	r7, 8004ee6 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eaa:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004eac:	bf0c      	ite	eq
 8004eae:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eb2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8004eb6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004eb8:	4c0d      	ldr	r4, [pc, #52]	; (8004ef0 <RCCEx_PLL3_Config+0xec>)
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec2:	f7fc fb67 	bl	8001594 <HAL_GetTick>
 8004ec6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ec8:	e004      	b.n	8004ed4 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004eca:	f7fc fb63 	bl	8001594 <HAL_GetTick>
 8004ece:	1b40      	subs	r0, r0, r5
 8004ed0:	2802      	cmp	r0, #2
 8004ed2:	d804      	bhi.n	8004ede <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	d5f7      	bpl.n	8004eca <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8004eda:	2000      	movs	r0, #0
}
 8004edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004ede:	2003      	movs	r0, #3
}
 8004ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004ee2:	2001      	movs	r0, #1
}
 8004ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ee6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004eea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004eec:	e7e4      	b.n	8004eb8 <RCCEx_PLL3_Config+0xb4>
 8004eee:	bf00      	nop
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	ffff0007 	.word	0xffff0007

08004ef8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004efc:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8004f00:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f02:	0118      	lsls	r0, r3, #4
 8004f04:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8004f08:	d51c      	bpl.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f0a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004f0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004f10:	f000 8529 	beq.w	8005966 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8004f14:	d823      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x66>
 8004f16:	2900      	cmp	r1, #0
 8004f18:	f000 8427 	beq.w	800576a <HAL_RCCEx_PeriphCLKConfig+0x872>
 8004f1c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004f20:	d120      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f22:	2102      	movs	r1, #2
 8004f24:	f104 0008 	add.w	r0, r4, #8
 8004f28:	f7ff fef2 	bl	8004d10 <RCCEx_PLL2_Config>
 8004f2c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8004f2e:	b93e      	cbnz	r6, 8004f40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f30:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004f32:	4a96      	ldr	r2, [pc, #600]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004f34:	2600      	movs	r6, #0
 8004f36:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004f38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f3c:	4319      	orrs	r1, r3
 8004f3e:	6511      	str	r1, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f40:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f44:	05d9      	lsls	r1, r3, #23
 8004f46:	d511      	bpl.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f48:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004f4a:	2904      	cmp	r1, #4
 8004f4c:	f200 858a 	bhi.w	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
 8004f50:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004f54:	051b0514 	.word	0x051b0514
 8004f58:	02e10522 	.word	0x02e10522
 8004f5c:	02e1      	.short	0x02e1
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f5e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8004f62:	d0e6      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f64:	05d9      	lsls	r1, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f66:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f6a:	d4ed      	bmi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f6c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f6e:	055f      	lsls	r7, r3, #21
 8004f70:	d51a      	bpl.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004f72:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004f76:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004f7a:	f000 8524 	beq.w	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8004f7e:	f200 80c4 	bhi.w	800510a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004f82:	2900      	cmp	r1, #0
 8004f84:	f000 8405 	beq.w	8005792 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004f88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004f8c:	f040 80c7 	bne.w	800511e <HAL_RCCEx_PeriphCLKConfig+0x226>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f90:	2100      	movs	r1, #0
 8004f92:	f104 0008 	add.w	r0, r4, #8
 8004f96:	f7ff febb 	bl	8004d10 <RCCEx_PLL2_Config>
 8004f9a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004f9c:	2d00      	cmp	r5, #0
 8004f9e:	f000 83b8 	beq.w	8005712 <HAL_RCCEx_PeriphCLKConfig+0x81a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004fa2:	462e      	mov	r6, r5
 8004fa4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004fa8:	0518      	lsls	r0, r3, #20
 8004faa:	d51a      	bpl.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004fac:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004fb0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004fb4:	f000 84f7 	beq.w	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004fb8:	f200 80b4 	bhi.w	8005124 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8004fbc:	2900      	cmp	r1, #0
 8004fbe:	f000 83dc 	beq.w	800577a <HAL_RCCEx_PeriphCLKConfig+0x882>
 8004fc2:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8004fc6:	f040 80b7 	bne.w	8005138 <HAL_RCCEx_PeriphCLKConfig+0x240>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fca:	2100      	movs	r1, #0
 8004fcc:	f104 0008 	add.w	r0, r4, #8
 8004fd0:	f7ff fe9e 	bl	8004d10 <RCCEx_PLL2_Config>
 8004fd4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	f000 83b0 	beq.w	800573c <HAL_RCCEx_PeriphCLKConfig+0x844>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004fdc:	462e      	mov	r6, r5
 8004fde:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004fe2:	0199      	lsls	r1, r3, #6
 8004fe4:	d51a      	bpl.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->OspiClockSelection)
 8004fe6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004fe8:	2920      	cmp	r1, #32
 8004fea:	f000 8490 	beq.w	800590e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004fee:	f200 80a6 	bhi.w	800513e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8004ff2:	b139      	cbz	r1, 8005004 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ff4:	2910      	cmp	r1, #16
 8004ff6:	f040 80a5 	bne.w	8005144 <HAL_RCCEx_PeriphCLKConfig+0x24c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ffa:	4a64      	ldr	r2, [pc, #400]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004ffc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005002:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005004:	2d00      	cmp	r5, #0
 8005006:	f040 83cf 	bne.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800500a:	4a60      	ldr	r2, [pc, #384]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800500c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800500e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005010:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005014:	430b      	orrs	r3, r1
 8005016:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005018:	e9d4 3200 	ldrd	r3, r2, [r4]
 800501c:	04df      	lsls	r7, r3, #19
 800501e:	d519      	bpl.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005020:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005022:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005026:	f000 84c6 	beq.w	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 800502a:	f200 808e 	bhi.w	800514a <HAL_RCCEx_PeriphCLKConfig+0x252>
 800502e:	2900      	cmp	r1, #0
 8005030:	f000 83a9 	beq.w	8005786 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8005034:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005038:	f040 808f 	bne.w	800515a <HAL_RCCEx_PeriphCLKConfig+0x262>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800503c:	2100      	movs	r1, #0
 800503e:	f104 0008 	add.w	r0, r4, #8
 8005042:	f7ff fe65 	bl	8004d10 <RCCEx_PLL2_Config>
 8005046:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005048:	2d00      	cmp	r5, #0
 800504a:	f000 836d 	beq.w	8005728 <HAL_RCCEx_PeriphCLKConfig+0x830>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800504e:	462e      	mov	r6, r5
 8005050:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005054:	0498      	lsls	r0, r3, #18
 8005056:	d51c      	bpl.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005058:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800505a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800505e:	f000 8442 	beq.w	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005062:	d87d      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8005064:	b149      	cbz	r1, 800507a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005066:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800506a:	f040 8081 	bne.w	8005170 <HAL_RCCEx_PeriphCLKConfig+0x278>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800506e:	2101      	movs	r1, #1
 8005070:	f104 0008 	add.w	r0, r4, #8
 8005074:	f7ff fe4c 	bl	8004d10 <RCCEx_PLL2_Config>
 8005078:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800507a:	2d00      	cmp	r5, #0
 800507c:	f040 83c1 	bne.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005080:	4a42      	ldr	r2, [pc, #264]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005082:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005084:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005086:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800508a:	430b      	orrs	r3, r1
 800508c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800508e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005092:	0459      	lsls	r1, r3, #17
 8005094:	d51d      	bpl.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005096:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800509a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800509e:	f000 842c 	beq.w	80058fa <HAL_RCCEx_PeriphCLKConfig+0xa02>
 80050a2:	d868      	bhi.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 80050a4:	b141      	cbz	r1, 80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80050a6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80050aa:	d16c      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x28e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050ac:	2101      	movs	r1, #1
 80050ae:	f104 0008 	add.w	r0, r4, #8
 80050b2:	f7ff fe2d 	bl	8004d10 <RCCEx_PLL2_Config>
 80050b6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	f040 839e 	bne.w	80057fa <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050be:	4a33      	ldr	r2, [pc, #204]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80050c0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80050c4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050c6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80050ca:	430b      	orrs	r3, r1
 80050cc:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050ce:	e9d4 3200 	ldrd	r3, r2, [r4]
 80050d2:	041f      	lsls	r7, r3, #16
 80050d4:	d50d      	bpl.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->FdcanClockSelection)
 80050d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80050d8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80050dc:	f000 83de 	beq.w	800589c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80050e0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80050e4:	f000 8233 	beq.w	800554e <HAL_RCCEx_PeriphCLKConfig+0x656>
 80050e8:	2900      	cmp	r1, #0
 80050ea:	f000 8236 	beq.w	800555a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80050ee:	2601      	movs	r6, #1
 80050f0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80050f2:	01d8      	lsls	r0, r3, #7
 80050f4:	d558      	bpl.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    switch (PeriphClkInit->FmcClockSelection)
 80050f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80050f8:	2903      	cmp	r1, #3
 80050fa:	f200 84bd 	bhi.w	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xb80>
 80050fe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005102:	004d      	.short	0x004d
 8005104:	004703d6 	.word	0x004703d6
 8005108:	004d      	.short	0x004d
    switch (PeriphClkInit->Sai4AClockSelection)
 800510a:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 800510e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005112:	f43f af43 	beq.w	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005116:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800511a:	f43f af3f 	beq.w	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800511e:	2601      	movs	r6, #1
 8005120:	4635      	mov	r5, r6
 8005122:	e741      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005124:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8005128:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800512c:	f43f af53 	beq.w	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005130:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8005134:	f43f af4f 	beq.w	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005138:	2601      	movs	r6, #1
 800513a:	4635      	mov	r5, r6
 800513c:	e751      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    switch (PeriphClkInit->OspiClockSelection)
 800513e:	2930      	cmp	r1, #48	; 0x30
 8005140:	f43f af60 	beq.w	8005004 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005144:	2601      	movs	r6, #1
 8005146:	4635      	mov	r5, r6
 8005148:	e768      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Spi123ClockSelection)
 800514a:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800514e:	f43f af7b 	beq.w	8005048 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8005152:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005156:	f43f af77 	beq.w	8005048 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800515a:	2601      	movs	r6, #1
 800515c:	4635      	mov	r5, r6
 800515e:	e779      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005160:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8005164:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8005168:	d087      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x182>
 800516a:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800516e:	d084      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005170:	2601      	movs	r6, #1
 8005172:	4635      	mov	r5, r6
 8005174:	e78d      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005176:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800517a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800517e:	d09b      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005180:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8005184:	d098      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005186:	2601      	movs	r6, #1
 8005188:	4635      	mov	r5, r6
 800518a:	e7a2      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 800518c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005190:	2102      	movs	r1, #2
 8005192:	f104 0008 	add.w	r0, r4, #8
 8005196:	f7ff fdbb 	bl	8004d10 <RCCEx_PLL2_Config>
 800519a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800519c:	2d00      	cmp	r5, #0
 800519e:	f000 8334 	beq.w	800580a <HAL_RCCEx_PeriphCLKConfig+0x912>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051a2:	462e      	mov	r6, r5
 80051a4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80051a8:	0259      	lsls	r1, r3, #9
 80051aa:	f100 820c 	bmi.w	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80051ae:	07d9      	lsls	r1, r3, #31
 80051b0:	d52f      	bpl.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->Usart16ClockSelection)
 80051b2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80051b4:	2928      	cmp	r1, #40	; 0x28
 80051b6:	d82a      	bhi.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x316>
 80051b8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80051bc:	002901f8 	.word	0x002901f8
 80051c0:	00290029 	.word	0x00290029
 80051c4:	00290029 	.word	0x00290029
 80051c8:	00290029 	.word	0x00290029
 80051cc:	00290421 	.word	0x00290421
 80051d0:	00290029 	.word	0x00290029
 80051d4:	00290029 	.word	0x00290029
 80051d8:	00290029 	.word	0x00290029
 80051dc:	002901f2 	.word	0x002901f2
 80051e0:	00290029 	.word	0x00290029
 80051e4:	00290029 	.word	0x00290029
 80051e8:	00290029 	.word	0x00290029
 80051ec:	002901f8 	.word	0x002901f8
 80051f0:	00290029 	.word	0x00290029
 80051f4:	00290029 	.word	0x00290029
 80051f8:	00290029 	.word	0x00290029
 80051fc:	002901f8 	.word	0x002901f8
 8005200:	00290029 	.word	0x00290029
 8005204:	00290029 	.word	0x00290029
 8005208:	00290029 	.word	0x00290029
 800520c:	01f8      	.short	0x01f8
 800520e:	2601      	movs	r6, #1
 8005210:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005212:	079f      	lsls	r7, r3, #30
 8005214:	d517      	bpl.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005216:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005218:	2905      	cmp	r1, #5
 800521a:	f200 8429 	bhi.w	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 800521e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005222:	000c      	.short	0x000c
 8005224:	000603e4 	.word	0x000603e4
 8005228:	000c000c 	.word	0x000c000c
 800522c:	000c      	.short	0x000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800522e:	2101      	movs	r1, #1
 8005230:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005234:	f7ff fde6 	bl	8004e04 <RCCEx_PLL3_Config>
 8005238:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800523a:	2d00      	cmp	r5, #0
 800523c:	f000 82cf 	beq.w	80057de <HAL_RCCEx_PeriphCLKConfig+0x8e6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005240:	462e      	mov	r6, r5
 8005242:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005246:	0758      	lsls	r0, r3, #29
 8005248:	d518      	bpl.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x384>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800524a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800524e:	2905      	cmp	r1, #5
 8005250:	f200 840b 	bhi.w	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8005254:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005258:	03bf000c 	.word	0x03bf000c
 800525c:	000c0006 	.word	0x000c0006
 8005260:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005264:	2101      	movs	r1, #1
 8005266:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800526a:	f7ff fdcb 	bl	8004e04 <RCCEx_PLL3_Config>
 800526e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005270:	2d00      	cmp	r5, #0
 8005272:	f000 82a9 	beq.w	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005276:	462e      	mov	r6, r5
 8005278:	e9d4 3200 	ldrd	r3, r2, [r4]
 800527c:	0699      	lsls	r1, r3, #26
 800527e:	d51f      	bpl.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005280:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005284:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005288:	f000 834b 	beq.w	8005922 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800528c:	f200 810d 	bhi.w	80054aa <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 8005290:	b149      	cbz	r1, 80052a6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005292:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005296:	f040 8112 	bne.w	80054be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800529a:	2100      	movs	r1, #0
 800529c:	f104 0008 	add.w	r0, r4, #8
 80052a0:	f7ff fd36 	bl	8004d10 <RCCEx_PLL2_Config>
 80052a4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80052a6:	2d00      	cmp	r5, #0
 80052a8:	f040 8286 	bne.w	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ac:	4ab1      	ldr	r2, [pc, #708]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 80052ae:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80052b2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80052b4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80052c0:	065f      	lsls	r7, r3, #25
 80052c2:	d51f      	bpl.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052c4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80052c8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80052cc:	f000 8301 	beq.w	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80052d0:	f200 80f8 	bhi.w	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80052d4:	b149      	cbz	r1, 80052ea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80052d6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052da:	f040 80fd 	bne.w	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052de:	2100      	movs	r1, #0
 80052e0:	f104 0008 	add.w	r0, r4, #8
 80052e4:	f7ff fd14 	bl	8004d10 <RCCEx_PLL2_Config>
 80052e8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80052ea:	2d00      	cmp	r5, #0
 80052ec:	f040 8281 	bne.w	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052f0:	4aa0      	ldr	r2, [pc, #640]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 80052f2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80052f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80052f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80052fc:	430b      	orrs	r3, r1
 80052fe:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005300:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005304:	0618      	lsls	r0, r3, #24
 8005306:	d51f      	bpl.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005308:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800530c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005310:	f000 82d5 	beq.w	80058be <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 8005314:	f200 80e3 	bhi.w	80054de <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8005318:	b149      	cbz	r1, 800532e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800531a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800531e:	f040 80e8 	bne.w	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005322:	2100      	movs	r1, #0
 8005324:	f104 0008 	add.w	r0, r4, #8
 8005328:	f7ff fcf2 	bl	8004d10 <RCCEx_PLL2_Config>
 800532c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800532e:	2d00      	cmp	r5, #0
 8005330:	f040 823e 	bne.w	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005334:	4a8f      	ldr	r2, [pc, #572]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005336:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800533a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800533c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005340:	430b      	orrs	r3, r1
 8005342:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005344:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005348:	0719      	lsls	r1, r3, #28
 800534a:	d50d      	bpl.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x470>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800534c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005350:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005354:	f000 82fb 	beq.w	800594e <HAL_RCCEx_PeriphCLKConfig+0xa56>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005358:	4986      	ldr	r1, [pc, #536]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800535a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800535c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005360:	4313      	orrs	r3, r2
 8005362:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005364:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005368:	06df      	lsls	r7, r3, #27
 800536a:	d50d      	bpl.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x490>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800536c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8005370:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005374:	f000 82df 	beq.w	8005936 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005378:	497e      	ldr	r1, [pc, #504]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800537a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800537c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005380:	4313      	orrs	r3, r2
 8005382:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005384:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005388:	0318      	lsls	r0, r3, #12
 800538a:	d50e      	bpl.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
    switch (PeriphClkInit->AdcClockSelection)
 800538c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005390:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005394:	f000 80c7 	beq.w	8005526 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8005398:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800539c:	f000 80c9 	beq.w	8005532 <HAL_RCCEx_PeriphCLKConfig+0x63a>
 80053a0:	2900      	cmp	r1, #0
 80053a2:	f000 8267 	beq.w	8005874 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80053a6:	2601      	movs	r6, #1
 80053a8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053aa:	0359      	lsls	r1, r3, #13
 80053ac:	d50f      	bpl.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    switch (PeriphClkInit->UsbClockSelection)
 80053ae:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80053b2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80053b6:	f000 80df 	beq.w	8005578 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80053ba:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80053be:	f000 80e1 	beq.w	8005584 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80053c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80053c6:	f000 825e 	beq.w	8005886 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 80053ca:	2601      	movs	r6, #1
 80053cc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053ce:	03df      	lsls	r7, r3, #15
 80053d0:	d509      	bpl.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    switch (PeriphClkInit->SdmmcClockSelection)
 80053d2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80053d4:	2900      	cmp	r1, #0
 80053d6:	f000 8237 	beq.w	8005848 <HAL_RCCEx_PeriphCLKConfig+0x950>
 80053da:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80053de:	f000 81b8 	beq.w	8005752 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 80053e2:	2601      	movs	r6, #1
 80053e4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053e6:	0098      	lsls	r0, r3, #2
 80053e8:	f100 8171 	bmi.w	80056ce <HAL_RCCEx_PeriphCLKConfig+0x7d6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053ec:	0399      	lsls	r1, r3, #14
 80053ee:	d50b      	bpl.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x510>
    switch (PeriphClkInit->RngClockSelection)
 80053f0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80053f2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80053f6:	f000 821e 	beq.w	8005836 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80053fa:	d97d      	bls.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80053fc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005400:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005404:	d07a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005406:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005408:	02df      	lsls	r7, r3, #11
 800540a:	d508      	bpl.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x526>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800540c:	4a59      	ldr	r2, [pc, #356]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800540e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005410:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005412:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005416:	430b      	orrs	r3, r1
 8005418:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800541a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800541e:	029d      	lsls	r5, r3, #10
 8005420:	d508      	bpl.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x53c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005422:	4a54      	ldr	r2, [pc, #336]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005424:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005426:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005428:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542c:	430b      	orrs	r3, r1
 800542e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005430:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005434:	0058      	lsls	r0, r3, #1
 8005436:	d50b      	bpl.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x558>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005438:	4b4e      	ldr	r3, [pc, #312]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005440:	611a      	str	r2, [r3, #16]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8005448:	430a      	orrs	r2, r1
 800544a:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800544c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	da08      	bge.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005454:	4a47      	ldr	r2, [pc, #284]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005456:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005458:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800545a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800545e:	430b      	orrs	r3, r1
 8005460:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005462:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005466:	0219      	lsls	r1, r3, #8
 8005468:	d508      	bpl.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800546a:	4a42      	ldr	r2, [pc, #264]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800546c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005470:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005472:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005476:	430b      	orrs	r3, r1
 8005478:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800547a:	6862      	ldr	r2, [r4, #4]
 800547c:	07d3      	lsls	r3, r2, #31
 800547e:	f100 8101 	bmi.w	8005684 <HAL_RCCEx_PeriphCLKConfig+0x78c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005482:	0797      	lsls	r7, r2, #30
 8005484:	f100 810b 	bmi.w	800569e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005488:	0755      	lsls	r5, r2, #29
 800548a:	f100 8115 	bmi.w	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800548e:	0710      	lsls	r0, r2, #28
 8005490:	f100 80ed 	bmi.w	800566e <HAL_RCCEx_PeriphCLKConfig+0x776>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005494:	06d1      	lsls	r1, r2, #27
 8005496:	f100 80dc 	bmi.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800549a:	0692      	lsls	r2, r2, #26
 800549c:	f100 8123 	bmi.w	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    return HAL_OK;
 80054a0:	1e30      	subs	r0, r6, #0
 80054a2:	bf18      	it	ne
 80054a4:	2001      	movne	r0, #1
}
 80054a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 80054aa:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80054ae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80054b2:	f43f aef8 	beq.w	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80054b6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80054ba:	f43f aef4 	beq.w	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80054be:	2601      	movs	r6, #1
 80054c0:	4635      	mov	r5, r6
 80054c2:	e6fd      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054c4:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 80054c8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80054cc:	f43f af0d 	beq.w	80052ea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80054d0:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 80054d4:	f43f af09 	beq.w	80052ea <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80054d8:	2601      	movs	r6, #1
 80054da:	4635      	mov	r5, r6
 80054dc:	e712      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80054de:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 80054e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80054e6:	f43f af22 	beq.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80054ea:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 80054ee:	f43f af1e 	beq.w	800532e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80054f2:	2601      	movs	r6, #1
 80054f4:	4635      	mov	r5, r6
 80054f6:	e727      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->RngClockSelection)
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d184      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    if (ret == HAL_OK)
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	f040 8196 	bne.w	800582e <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005502:	4a1c      	ldr	r2, [pc, #112]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005504:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005506:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550c:	430b      	orrs	r3, r1
 800550e:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005510:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005514:	e778      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x510>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005516:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005518:	2d00      	cmp	r5, #0
 800551a:	f000 80f0 	beq.w	80056fe <HAL_RCCEx_PeriphCLKConfig+0x806>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800551e:	462e      	mov	r6, r5
 8005520:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005524:	e523      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005526:	2102      	movs	r1, #2
 8005528:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800552c:	f7ff fc6a 	bl	8004e04 <RCCEx_PLL3_Config>
 8005530:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005532:	2d00      	cmp	r5, #0
 8005534:	f040 8134 	bne.w	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005538:	4a0e      	ldr	r2, [pc, #56]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800553a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800553e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005540:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005544:	430b      	orrs	r3, r1
 8005546:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005548:	e9d4 3200 	ldrd	r3, r2, [r4]
 800554c:	e72d      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800554e:	2101      	movs	r1, #1
 8005550:	f104 0008 	add.w	r0, r4, #8
 8005554:	f7ff fbdc 	bl	8004d10 <RCCEx_PLL2_Config>
 8005558:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800555a:	2d00      	cmp	r5, #0
 800555c:	f040 8163 	bne.w	8005826 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005560:	4a04      	ldr	r2, [pc, #16]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005562:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005564:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005566:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800556a:	430b      	orrs	r3, r1
 800556c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800556e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005572:	e5be      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005574:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005578:	2101      	movs	r1, #1
 800557a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800557e:	f7ff fc41 	bl	8004e04 <RCCEx_PLL3_Config>
 8005582:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005584:	2d00      	cmp	r5, #0
 8005586:	f040 814a 	bne.w	800581e <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800558a:	4ab8      	ldr	r2, [pc, #736]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800558c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005590:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005592:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005596:	430b      	orrs	r3, r1
 8005598:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800559a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800559e:	e716      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x4d6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055a0:	2101      	movs	r1, #1
 80055a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80055a6:	f7ff fc2d 	bl	8004e04 <RCCEx_PLL3_Config>
 80055aa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80055ac:	2d00      	cmp	r5, #0
 80055ae:	f040 8107 	bne.w	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055b2:	4aae      	ldr	r2, [pc, #696]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80055b4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80055b6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80055b8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80055bc:	430b      	orrs	r3, r1
 80055be:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80055c4:	e625      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055c6:	4faa      	ldr	r7, [pc, #680]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ce:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80055d0:	f7fb ffe0 	bl	8001594 <HAL_GetTick>
 80055d4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055d6:	e006      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d8:	f7fb ffdc 	bl	8001594 <HAL_GetTick>
 80055dc:	eba0 0008 	sub.w	r0, r0, r8
 80055e0:	2864      	cmp	r0, #100	; 0x64
 80055e2:	f200 8216 	bhi.w	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	05db      	lsls	r3, r3, #23
 80055ea:	d5f5      	bpl.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    if (ret == HAL_OK)
 80055ec:	2d00      	cmp	r5, #0
 80055ee:	f040 8234 	bne.w	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xb62>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80055f2:	4b9e      	ldr	r3, [pc, #632]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80055f4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80055f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80055fa:	4051      	eors	r1, r2
 80055fc:	f411 7f40 	tst.w	r1, #768	; 0x300
 8005600:	d00d      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x726>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005602:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005604:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005606:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800560a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800560e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005610:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005612:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005616:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005618:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800561a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800561e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005622:	f000 81fc 	beq.w	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xb26>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005626:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800562a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562e:	f000 820a 	beq.w	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8005632:	4a8e      	ldr	r2, [pc, #568]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005634:	6913      	ldr	r3, [r2, #16]
 8005636:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800563a:	6113      	str	r3, [r2, #16]
 800563c:	4a8b      	ldr	r2, [pc, #556]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800563e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005642:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005648:	430b      	orrs	r3, r1
 800564a:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800564c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005650:	e5ad      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005652:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8005656:	2101      	movs	r1, #1
 8005658:	4628      	mov	r0, r5
 800565a:	f7ff fbd3 	bl	8004e04 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800565e:	2800      	cmp	r0, #0
 8005660:	f000 811a 	beq.w	8005898 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005664:	6863      	ldr	r3, [r4, #4]
 8005666:	069b      	lsls	r3, r3, #26
 8005668:	d546      	bpl.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x800>
 800566a:	4606      	mov	r6, r0
 800566c:	e03d      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800566e:	2100      	movs	r1, #0
 8005670:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005674:	f7ff fbc6 	bl	8004e04 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005678:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800567a:	2800      	cmp	r0, #0
 800567c:	f43f af0a 	beq.w	8005494 <HAL_RCCEx_PeriphCLKConfig+0x59c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005680:	4606      	mov	r6, r0
 8005682:	e707      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005684:	2100      	movs	r1, #0
 8005686:	f104 0008 	add.w	r0, r4, #8
 800568a:	f7ff fb41 	bl	8004d10 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800568e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005690:	2800      	cmp	r0, #0
 8005692:	f43f aef6 	beq.w	8005482 <HAL_RCCEx_PeriphCLKConfig+0x58a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005696:	0797      	lsls	r7, r2, #30
 8005698:	4606      	mov	r6, r0
 800569a:	f57f aef5 	bpl.w	8005488 <HAL_RCCEx_PeriphCLKConfig+0x590>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800569e:	2101      	movs	r1, #1
 80056a0:	f104 0008 	add.w	r0, r4, #8
 80056a4:	f7ff fb34 	bl	8004d10 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80056a8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80056aa:	2800      	cmp	r0, #0
 80056ac:	f43f aeec 	beq.w	8005488 <HAL_RCCEx_PeriphCLKConfig+0x590>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80056b0:	0755      	lsls	r5, r2, #29
 80056b2:	4606      	mov	r6, r0
 80056b4:	f57f aeeb 	bpl.w	800548e <HAL_RCCEx_PeriphCLKConfig+0x596>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056b8:	2102      	movs	r1, #2
 80056ba:	f104 0008 	add.w	r0, r4, #8
 80056be:	f7ff fb27 	bl	8004d10 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80056c2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80056c4:	2800      	cmp	r0, #0
 80056c6:	f43f aee2 	beq.w	800548e <HAL_RCCEx_PeriphCLKConfig+0x596>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80056ca:	4606      	mov	r6, r0
 80056cc:	e6df      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x596>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056ce:	2102      	movs	r1, #2
 80056d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80056d4:	f7ff fb96 	bl	8004e04 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056d8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056dc:	2800      	cmp	r0, #0
 80056de:	f43f ae85 	beq.w	80053ec <HAL_RCCEx_PeriphCLKConfig+0x4f4>
      status = HAL_ERROR;
 80056e2:	2601      	movs	r6, #1
 80056e4:	e682      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x4f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056e6:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056ea:	2102      	movs	r1, #2
 80056ec:	4628      	mov	r0, r5
 80056ee:	f7ff fb89 	bl	8004e04 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f43f aed4 	beq.w	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
  return HAL_ERROR;
 80056f8:	2001      	movs	r0, #1
}
 80056fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056fe:	4a5b      	ldr	r2, [pc, #364]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005700:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005702:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005704:	f023 0307 	bic.w	r3, r3, #7
 8005708:	430b      	orrs	r3, r1
 800570a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800570c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005710:	e42d      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005712:	4a56      	ldr	r2, [pc, #344]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005714:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005718:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800571a:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800571e:	430b      	orrs	r3, r1
 8005720:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005722:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005726:	e43f      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005728:	4a50      	ldr	r2, [pc, #320]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800572a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800572c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005732:	430b      	orrs	r3, r1
 8005734:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005736:	e9d4 3200 	ldrd	r3, r2, [r4]
 800573a:	e48b      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800573c:	4a4b      	ldr	r2, [pc, #300]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800573e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8005742:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005744:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005748:	430b      	orrs	r3, r1
 800574a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800574c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005750:	e447      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005752:	2102      	movs	r1, #2
 8005754:	f104 0008 	add.w	r0, r4, #8
 8005758:	f7ff fada 	bl	8004d10 <RCCEx_PLL2_Config>
 800575c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800575e:	2d00      	cmp	r5, #0
 8005760:	d079      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x95e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005762:	462e      	mov	r6, r5
 8005764:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005768:	e63d      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800576a:	4a40      	ldr	r2, [pc, #256]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800576c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800576e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005772:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005774:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005776:	f7ff bbdc 	b.w	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800577a:	4a3c      	ldr	r2, [pc, #240]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800577c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800577e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005782:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005784:	e427      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xde>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005786:	4a39      	ldr	r2, [pc, #228]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005788:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800578a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800578e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005790:	e45a      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x150>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005792:	4a36      	ldr	r2, [pc, #216]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005794:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800579a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800579c:	f7ff bbfe 	b.w	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xa4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057a0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057a4:	462e      	mov	r6, r5
 80057a6:	e600      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057ac:	462e      	mov	r6, r5
 80057ae:	e435      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x124>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80057b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057b4:	462e      	mov	r6, r5
 80057b6:	e5c7      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057bc:	462e      	mov	r6, r5
 80057be:	e57f      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057c4:	462e      	mov	r6, r5
 80057c6:	e524      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057c8:	4a28      	ldr	r2, [pc, #160]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80057ca:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80057ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80057d0:	f023 0307 	bic.w	r3, r3, #7
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057dc:	e54e      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x384>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80057de:	4a23      	ldr	r2, [pc, #140]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80057e0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80057e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80057e4:	f023 0307 	bic.w	r3, r3, #7
 80057e8:	430b      	orrs	r3, r1
 80057ea:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057ec:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057f0:	e529      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80057f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057f6:	462e      	mov	r6, r5
 80057f8:	e584      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057fa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057fe:	462e      	mov	r6, r5
 8005800:	e467      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005802:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005806:	462e      	mov	r6, r5
 8005808:	e443      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800580a:	4a18      	ldr	r2, [pc, #96]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800580c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800580e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005810:	f023 0303 	bic.w	r3, r3, #3
 8005814:	430b      	orrs	r3, r1
 8005816:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005818:	e9d4 3200 	ldrd	r3, r2, [r4]
 800581c:	e4c4      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800581e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005822:	462e      	mov	r6, r5
 8005824:	e5d3      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x4d6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005826:	e9d4 3200 	ldrd	r3, r2, [r4]
 800582a:	462e      	mov	r6, r5
 800582c:	e461      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800582e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005832:	462e      	mov	r6, r5
 8005834:	e5e8      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005836:	4a0d      	ldr	r2, [pc, #52]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005838:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800583a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800583e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005840:	2d00      	cmp	r5, #0
 8005842:	f43f ae5e 	beq.w	8005502 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8005846:	e7f2      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x936>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005848:	4a08      	ldr	r2, [pc, #32]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800584a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800584c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005850:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005852:	2d00      	cmp	r5, #0
 8005854:	d185      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005856:	4a05      	ldr	r2, [pc, #20]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005858:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800585a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800585c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005860:	430b      	orrs	r3, r1
 8005862:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005864:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005868:	e5bd      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800586a:	bf00      	nop
 800586c:	58024400 	.word	0x58024400
 8005870:	58024800 	.word	0x58024800
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005874:	f104 0008 	add.w	r0, r4, #8
 8005878:	f7ff fa4a 	bl	8004d10 <RCCEx_PLL2_Config>
 800587c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800587e:	2d00      	cmp	r5, #0
 8005880:	f43f ae5a 	beq.w	8005538 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8005884:	e78c      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005886:	4a7e      	ldr	r2, [pc, #504]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
 8005888:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800588a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800588e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005890:	2d00      	cmp	r5, #0
 8005892:	f43f ae7a 	beq.w	800558a <HAL_RCCEx_PeriphCLKConfig+0x692>
 8005896:	e7c2      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x926>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005898:	6862      	ldr	r2, [r4, #4]
 800589a:	e5fe      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800589c:	4a78      	ldr	r2, [pc, #480]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
 800589e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	f43f ae5a 	beq.w	8005560 <HAL_RCCEx_PeriphCLKConfig+0x668>
 80058ac:	e7bb      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x92e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ae:	4a74      	ldr	r2, [pc, #464]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
 80058b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	d0a6      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x912>
 80058bc:	e471      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058be:	2102      	movs	r1, #2
 80058c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058c4:	f7ff fa9e 	bl	8004e04 <RCCEx_PLL3_Config>
 80058c8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80058ca:	2d00      	cmp	r5, #0
 80058cc:	f43f ad32 	beq.w	8005334 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 80058d0:	e76e      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058d2:	2102      	movs	r1, #2
 80058d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058d8:	f7ff fa94 	bl	8004e04 <RCCEx_PLL3_Config>
 80058dc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80058de:	2d00      	cmp	r5, #0
 80058e0:	f43f ad06 	beq.w	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80058e4:	e785      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058e6:	2101      	movs	r1, #1
 80058e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058ec:	f7ff fa8a 	bl	8004e04 <RCCEx_PLL3_Config>
 80058f0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80058f2:	2d00      	cmp	r5, #0
 80058f4:	f43f abc4 	beq.w	8005080 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80058f8:	e783      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058fa:	2101      	movs	r1, #1
 80058fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005900:	f7ff fa80 	bl	8004e04 <RCCEx_PLL3_Config>
 8005904:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005906:	2d00      	cmp	r5, #0
 8005908:	f43f abd9 	beq.w	80050be <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800590c:	e775      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800590e:	2102      	movs	r1, #2
 8005910:	f104 0008 	add.w	r0, r4, #8
 8005914:	f7ff f9fc 	bl	8004d10 <RCCEx_PLL2_Config>
 8005918:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800591a:	2d00      	cmp	r5, #0
 800591c:	f43f ab75 	beq.w	800500a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005920:	e742      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005922:	2102      	movs	r1, #2
 8005924:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005928:	f7ff fa6c 	bl	8004e04 <RCCEx_PLL3_Config>
 800592c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800592e:	2d00      	cmp	r5, #0
 8005930:	f43f acbc 	beq.w	80052ac <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8005934:	e740      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005936:	2102      	movs	r1, #2
 8005938:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800593c:	f7ff fa62 	bl	8004e04 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005940:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005944:	2800      	cmp	r0, #0
 8005946:	f43f ad17 	beq.w	8005378 <HAL_RCCEx_PeriphCLKConfig+0x480>
        status = HAL_ERROR;
 800594a:	2601      	movs	r6, #1
 800594c:	e514      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x480>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800594e:	2102      	movs	r1, #2
 8005950:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005954:	f7ff fa56 	bl	8004e04 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005958:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800595c:	2800      	cmp	r0, #0
 800595e:	f43f acfb 	beq.w	8005358 <HAL_RCCEx_PeriphCLKConfig+0x460>
        status = HAL_ERROR;
 8005962:	2601      	movs	r6, #1
 8005964:	e4f8      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x460>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005966:	2102      	movs	r1, #2
 8005968:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800596c:	f7ff fa4a 	bl	8004e04 <RCCEx_PLL3_Config>
 8005970:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8005972:	2e00      	cmp	r6, #0
 8005974:	f43f aadc 	beq.w	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8005978:	f7ff bae2 	b.w	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x48>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800597c:	4a40      	ldr	r2, [pc, #256]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
        break;
 800597e:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005980:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005986:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005988:	e5c6      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x620>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800598a:	2100      	movs	r1, #0
 800598c:	f104 0008 	add.w	r0, r4, #8
 8005990:	f7ff f9be 	bl	8004d10 <RCCEx_PLL2_Config>
 8005994:	4605      	mov	r5, r0
        break;
 8005996:	e5bf      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x620>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005998:	2100      	movs	r1, #0
 800599a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800599e:	f7ff fa31 	bl	8004e04 <RCCEx_PLL3_Config>
 80059a2:	4605      	mov	r5, r0
        break;
 80059a4:	e5b8      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x620>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059a6:	2100      	movs	r1, #0
 80059a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80059ac:	f7ff fa2a 	bl	8004e04 <RCCEx_PLL3_Config>
 80059b0:	4605      	mov	r5, r0
        break;
 80059b2:	f7ff bb10 	b.w	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xde>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059b6:	2100      	movs	r1, #0
 80059b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80059bc:	f7ff fa22 	bl	8004e04 <RCCEx_PLL3_Config>
 80059c0:	4605      	mov	r5, r0
        break;
 80059c2:	f7ff bb41 	b.w	8005048 <HAL_RCCEx_PeriphCLKConfig+0x150>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059c6:	2100      	movs	r1, #0
 80059c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80059cc:	f7ff fa1a 	bl	8004e04 <RCCEx_PLL3_Config>
 80059d0:	4605      	mov	r5, r0
        break;
 80059d2:	f7ff bae3 	b.w	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xa4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059d6:	2101      	movs	r1, #1
 80059d8:	f104 0008 	add.w	r0, r4, #8
 80059dc:	f7ff f998 	bl	8004d10 <RCCEx_PLL2_Config>
 80059e0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80059e2:	2d00      	cmp	r5, #0
 80059e4:	f43f aef0 	beq.w	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 80059e8:	e445      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059ea:	2101      	movs	r1, #1
 80059ec:	f104 0008 	add.w	r0, r4, #8
 80059f0:	f7ff f98e 	bl	8004d10 <RCCEx_PLL2_Config>
 80059f4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80059f6:	2d00      	cmp	r5, #0
 80059f8:	f43f aef1 	beq.w	80057de <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 80059fc:	e420      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x348>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059fe:	2101      	movs	r1, #1
 8005a00:	f104 0008 	add.w	r0, r4, #8
 8005a04:	f7ff f984 	bl	8004d10 <RCCEx_PLL2_Config>
 8005a08:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005a0a:	2d00      	cmp	r5, #0
 8005a0c:	f43f add1 	beq.w	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8005a10:	e6d6      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
            ret = HAL_TIMEOUT;
 8005a12:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a14:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 8005a18:	4635      	mov	r5, r6
 8005a1a:	f7ff bbc8 	b.w	80051ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        tickstart = HAL_GetTick();
 8005a1e:	f7fb fdb9 	bl	8001594 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a22:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8005a80 <HAL_RCCEx_PeriphCLKConfig+0xb88>
        tickstart = HAL_GetTick();
 8005a26:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a28:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xb40>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2e:	f7fb fdb1 	bl	8001594 <HAL_GetTick>
 8005a32:	1bc0      	subs	r0, r0, r7
 8005a34:	4548      	cmp	r0, r9
 8005a36:	d8ec      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a38:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005a3c:	0798      	lsls	r0, r3, #30
 8005a3e:	d5f6      	bpl.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xb36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a40:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8005a44:	e5ef      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x72e>
 8005a46:	490e      	ldr	r1, [pc, #56]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
 8005a48:	4b0e      	ldr	r3, [pc, #56]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xb8c>)
 8005a4a:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8005a4e:	690a      	ldr	r2, [r1, #16]
 8005a50:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005a54:	4313      	orrs	r3, r2
 8005a56:	610b      	str	r3, [r1, #16]
 8005a58:	e5f0      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x744>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a5a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005a5e:	462e      	mov	r6, r5
 8005a60:	f7ff bba5 	b.w	80051ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a64:	2601      	movs	r6, #1
 8005a66:	f7ff ba81 	b.w	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005a6a:	2601      	movs	r6, #1
 8005a6c:	4635      	mov	r5, r6
 8005a6e:	e405      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x384>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a70:	2601      	movs	r6, #1
 8005a72:	4635      	mov	r5, r6
 8005a74:	f7ff bbe7 	b.w	8005246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch (PeriphClkInit->FmcClockSelection)
 8005a78:	2601      	movs	r6, #1
 8005a7a:	4635      	mov	r5, r6
 8005a7c:	f7ff bb94 	b.w	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005a80:	58024400 	.word	0x58024400
 8005a84:	00ffffcf 	.word	0x00ffffcf

08005a88 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a88:	4b4f      	ldr	r3, [pc, #316]	; (8005bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8005a8a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a8c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a8e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a90:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8005a92:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a96:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a9a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8005a9c:	d05c      	beq.n	8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a9e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005aa2:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aa6:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005aaa:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005aae:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005ab0:	ee07 4a90 	vmov	s15, r4
 8005ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005ab8:	d003      	beq.n	8005ac2 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8005aba:	2902      	cmp	r1, #2
 8005abc:	d075      	beq.n	8005baa <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8005abe:	2900      	cmp	r1, #0
 8005ac0:	d04f      	beq.n	8005b62 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ac2:	ee07 2a90 	vmov	s15, r2
 8005ac6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8005bcc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005ad4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005adc:	ee06 3a90 	vmov	s13, r3
 8005ae0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005ae4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005ae8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005aec:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005af0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005af4:	4a34      	ldr	r2, [pc, #208]	; (8005bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8005af6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005afa:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005afc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005b00:	ee07 3a10 	vmov	s14, r3
 8005b04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005b08:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b0a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b16:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005b1c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005b20:	ee07 3a10 	vmov	s14, r3
 8005b24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005b28:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b34:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b38:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005b3a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b46:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b4e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005b52:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005b56:	4770      	bx	lr
 8005b58:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b5a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b5e:	6082      	str	r2, [r0, #8]
}
 8005b60:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b62:	6819      	ldr	r1, [r3, #0]
 8005b64:	0689      	lsls	r1, r1, #26
 8005b66:	d527      	bpl.n	8005bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b68:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b6a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b6e:	4919      	ldr	r1, [pc, #100]	; (8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b70:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b76:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b7e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b86:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b88:	ee06 3a90 	vmov	s13, r3
 8005b8c:	ee05 1a90 	vmov	s11, r1
 8005b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005b94:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005b98:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005b9c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005ba0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005ba4:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005ba8:	e7a4      	b.n	8005af4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005baa:	ee07 2a90 	vmov	s15, r2
 8005bae:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8005bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bb6:	e78a      	b.n	8005ace <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bb8:	ee07 2a90 	vmov	s15, r2
 8005bbc:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8005bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bc4:	e783      	b.n	8005ace <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005bc6:	bf00      	nop
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	4a742400 	.word	0x4a742400
 8005bd0:	39000000 	.word	0x39000000
 8005bd4:	03d09000 	.word	0x03d09000
 8005bd8:	4bbebc20 	.word	0x4bbebc20
 8005bdc:	4c742400 	.word	0x4c742400

08005be0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005be0:	4b4f      	ldr	r3, [pc, #316]	; (8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8005be2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005be4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005be6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005be8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8005bea:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005bee:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005bf2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8005bf4:	d05c      	beq.n	8005cb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005bf6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005bfa:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bfe:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c02:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005c06:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c08:	ee07 4a90 	vmov	s15, r4
 8005c0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005c10:	d003      	beq.n	8005c1a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8005c12:	2902      	cmp	r1, #2
 8005c14:	d075      	beq.n	8005d02 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8005c16:	2900      	cmp	r1, #0
 8005c18:	d04f      	beq.n	8005cba <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c1a:	ee07 2a90 	vmov	s15, r2
 8005c1e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8005c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005c2c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c34:	ee06 3a90 	vmov	s13, r3
 8005c38:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005c3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005c40:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005c44:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005c48:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c4c:	4a34      	ldr	r2, [pc, #208]	; (8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8005c4e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005c52:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005c54:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005c58:	ee07 3a10 	vmov	s14, r3
 8005c5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005c60:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c62:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c6e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005c72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005c74:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005c78:	ee07 3a10 	vmov	s14, r3
 8005c7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005c80:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c8c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c90:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005c92:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c9e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005caa:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005cae:	4770      	bx	lr
 8005cb0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005cb2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005cb6:	6082      	str	r2, [r0, #8]
}
 8005cb8:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cba:	6819      	ldr	r1, [r3, #0]
 8005cbc:	0689      	lsls	r1, r1, #26
 8005cbe:	d527      	bpl.n	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cc0:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cc2:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cc6:	4919      	ldr	r1, [pc, #100]	; (8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cc8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cce:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cd6:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cde:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ce0:	ee06 3a90 	vmov	s13, r3
 8005ce4:	ee05 1a90 	vmov	s11, r1
 8005ce8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005cec:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005cf0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005cf4:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005cf8:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005cfc:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005d00:	e7a4      	b.n	8005c4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d02:	ee07 2a90 	vmov	s15, r2
 8005d06:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8005d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d0e:	e78a      	b.n	8005c26 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d10:	ee07 2a90 	vmov	s15, r2
 8005d14:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005d34 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8005d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d1c:	e783      	b.n	8005c26 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8005d1e:	bf00      	nop
 8005d20:	58024400 	.word	0x58024400
 8005d24:	4a742400 	.word	0x4a742400
 8005d28:	39000000 	.word	0x39000000
 8005d2c:	03d09000 	.word	0x03d09000
 8005d30:	4bbebc20 	.word	0x4bbebc20
 8005d34:	4c742400 	.word	0x4c742400

08005d38 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d38:	4b4f      	ldr	r3, [pc, #316]	; (8005e78 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8005d3a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d3c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005d3e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005d40:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8005d42:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005d46:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d4a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8005d4c:	d05c      	beq.n	8005e08 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d4e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005d52:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d56:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d5a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005d5e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d60:	ee07 4a90 	vmov	s15, r4
 8005d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005d68:	d07e      	beq.n	8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8005d6a:	2902      	cmp	r1, #2
 8005d6c:	d075      	beq.n	8005e5a <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8005d6e:	2900      	cmp	r1, #0
 8005d70:	d04f      	beq.n	8005e12 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d72:	ee07 2a90 	vmov	s15, r2
 8005d76:	eddf 6a41 	vldr	s13, [pc, #260]	; 8005e7c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d80:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005d84:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8005d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8c:	ee06 3a90 	vmov	s13, r3
 8005d90:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005d94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005d98:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005d9c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005da0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005da4:	4a34      	ldr	r2, [pc, #208]	; (8005e78 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8005da6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005daa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005dac:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005db0:	ee07 3a10 	vmov	s14, r3
 8005db4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005db8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005dba:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc6:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005dca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005dcc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005dd0:	ee07 3a10 	vmov	s14, r3
 8005dd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005dd8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005de8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005dea:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dfe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005e02:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005e06:	4770      	bx	lr
 8005e08:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e0a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e0e:	6082      	str	r2, [r0, #8]
}
 8005e10:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e12:	6819      	ldr	r1, [r3, #0]
 8005e14:	0689      	lsls	r1, r1, #26
 8005e16:	d5ac      	bpl.n	8005d72 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e18:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e1a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e1e:	4919      	ldr	r1, [pc, #100]	; (8005e84 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e20:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e26:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e2e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005e80 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8005e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e36:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e38:	ee06 3a90 	vmov	s13, r3
 8005e3c:	ee05 1a90 	vmov	s11, r1
 8005e40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005e44:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005e48:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005e4c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005e50:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005e54:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005e58:	e7a4      	b.n	8005da4 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e5a:	ee07 2a90 	vmov	s15, r2
 8005e5e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005e88 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8005e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e66:	e78a      	b.n	8005d7e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e68:	ee07 2a90 	vmov	s15, r2
 8005e6c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005e8c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8005e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e74:	e783      	b.n	8005d7e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8005e76:	bf00      	nop
 8005e78:	58024400 	.word	0x58024400
 8005e7c:	4c742400 	.word	0x4c742400
 8005e80:	39000000 	.word	0x39000000
 8005e84:	03d09000 	.word	0x03d09000
 8005e88:	4bbebc20 	.word	0x4bbebc20
 8005e8c:	4a742400 	.word	0x4a742400

08005e90 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e90:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8005e94:	430b      	orrs	r3, r1
{
 8005e96:	b500      	push	{lr}
 8005e98:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e9a:	d076      	beq.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005e9c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	d035      	beq.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005ea4:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	f000 80ca 	beq.w	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005eae:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	d07c      	beq.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005eb6:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	f000 80d7 	beq.w	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005ec0:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	f000 8130 	beq.w	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005eca:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	f000 8144 	beq.w	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005ed4:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	f000 8107 	beq.w	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005ede:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8005ee2:	ea50 0301 	orrs.w	r3, r0, r1
 8005ee6:	d13a      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005ee8:	4b97      	ldr	r3, [pc, #604]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8005ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ef4:	f000 8082 	beq.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005efc:	f000 815e 	beq.w	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8005f00:	bb6b      	cbnz	r3, 8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f02:	4b91      	ldr	r3, [pc, #580]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005f0a:	d03b      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          frequency = HSE_VALUE;
 8005f0c:	488f      	ldr	r0, [pc, #572]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f0e:	e039      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005f10:	4a8d      	ldr	r2, [pc, #564]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f12:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005f14:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8005f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f1c:	f000 808c 	beq.w	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005f20:	d921      	bls.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8005f22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f26:	d02c      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005f28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f2c:	d117      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f2e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f30:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f36:	0749      	lsls	r1, r1, #29
 8005f38:	d502      	bpl.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80c9 	beq.w	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f40:	4a81      	ldr	r2, [pc, #516]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	05d0      	lsls	r0, r2, #23
 8005f46:	d503      	bpl.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8005f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f4c:	f000 80cc 	beq.w	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f50:	4a7d      	ldr	r2, [pc, #500]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	0391      	lsls	r1, r2, #14
 8005f56:	d502      	bpl.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8005f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f5c:	d0d6      	beq.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    switch (srcclk)
 8005f5e:	2000      	movs	r0, #0
}
 8005f60:	b005      	add	sp, #20
 8005f62:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03f      	beq.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f6e:	d1f6      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f70:	6810      	ldr	r0, [r2, #0]
 8005f72:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005f76:	d005      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f78:	a801      	add	r0, sp, #4
 8005f7a:	f7ff fd85 	bl	8005a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f7e:	9801      	ldr	r0, [sp, #4]
 8005f80:	e000      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f82:	4873      	ldr	r0, [pc, #460]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8005f84:	b005      	add	sp, #20
 8005f86:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005f8a:	4b6f      	ldr	r3, [pc, #444]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8e:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d8e3      	bhi.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8005f96:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08005ffd 	.word	0x08005ffd
 8005fa0:	08006009 	.word	0x08006009
 8005fa4:	08006019 	.word	0x08006019
 8005fa8:	08005f83 	.word	0x08005f83
 8005fac:	08006015 	.word	0x08006015
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005fb0:	4a65      	ldr	r2, [pc, #404]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005fb2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005fb4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8005fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fbc:	d03c      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005fbe:	d935      	bls.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8005fc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fc4:	d0dd      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fca:	d1c8      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fcc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fce:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fd4:	0752      	lsls	r2, r2, #29
 8005fd6:	d5b3      	bpl.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1b1      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fdc:	4b5a      	ldr	r3, [pc, #360]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005fde:	485d      	ldr	r0, [pc, #372]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005fe6:	40d8      	lsrs	r0, r3
 8005fe8:	e7cc      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fea:	6810      	ldr	r0, [r2, #0]
 8005fec:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005ff0:	d0c8      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ff2:	a801      	add	r0, sp, #4
 8005ff4:	f7ff fea0 	bl	8005d38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ff8:	9802      	ldr	r0, [sp, #8]
 8005ffa:	e7c3      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ffc:	4b52      	ldr	r3, [pc, #328]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006004:	d0be      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006006:	e7f4      	b.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006008:	4b4f      	ldr	r3, [pc, #316]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006010:	d0b8      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006012:	e7b1      	b.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006014:	4a4c      	ldr	r2, [pc, #304]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006016:	e78a      	b.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006018:	4b4b      	ldr	r3, [pc, #300]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006020:	d0b0      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006022:	a801      	add	r0, sp, #4
 8006024:	f7ff fddc 	bl	8005be0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006028:	9801      	ldr	r0, [sp, #4]
 800602a:	e7ab      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    switch (srcclk)
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0dc      	beq.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8006030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006034:	d09c      	beq.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006036:	e792      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006038:	6810      	ldr	r0, [r2, #0]
 800603a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800603e:	d0a1      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006040:	e7ef      	b.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006042:	4a41      	ldr	r2, [pc, #260]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006044:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006046:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800604a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800604e:	d0f3      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8006050:	d805      	bhi.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0c9      	beq.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8006056:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800605a:	d089      	beq.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800605c:	e77f      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 800605e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006062:	d08e      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006064:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006068:	f43f af61 	beq.w	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800606c:	e777      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800606e:	4a36      	ldr	r2, [pc, #216]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006070:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006072:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8006076:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800607a:	d025      	beq.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800607c:	d80f      	bhi.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800607e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006082:	d048      	beq.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8006084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006088:	d116      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800608a:	6810      	ldr	r0, [r2, #0]
 800608c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006090:	f43f af78 	beq.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006094:	a801      	add	r0, sp, #4
 8006096:	f7ff fda3 	bl	8005be0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800609a:	9802      	ldr	r0, [sp, #8]
 800609c:	e772      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    switch (srcclk)
 800609e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060a2:	d01c      	beq.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
 80060a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060a8:	f47f af59 	bne.w	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060ac:	6810      	ldr	r0, [r2, #0]
 80060ae:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80060b2:	f43f af67 	beq.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80060b6:	e729      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    switch (srcclk)
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f47f af50 	bne.w	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
}
 80060be:	b005      	add	sp, #20
 80060c0:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80060c4:	f7fe bddc 	b.w	8004c80 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060c8:	6810      	ldr	r0, [r2, #0]
 80060ca:	f010 0004 	ands.w	r0, r0, #4
 80060ce:	f43f af59 	beq.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060d2:	6813      	ldr	r3, [r2, #0]
 80060d4:	481f      	ldr	r0, [pc, #124]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80060d6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80060da:	40d8      	lsrs	r0, r3
 80060dc:	e752      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80060de:	6810      	ldr	r0, [r2, #0]
 80060e0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80060e4:	f43f af4e 	beq.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          frequency = CSI_VALUE;
 80060e8:	481b      	ldr	r0, [pc, #108]	; (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80060ea:	e74b      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80060ec:	4a16      	ldr	r2, [pc, #88]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80060ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80060f0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 80060f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060f8:	d067      	beq.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80060fa:	d83e      	bhi.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80060fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006100:	d05c      	beq.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006106:	d140      	bne.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006110:	f43f af38 	beq.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006114:	e7be      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006116:	6810      	ldr	r0, [r2, #0]
 8006118:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800611c:	f43f af32 	beq.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006120:	a801      	add	r0, sp, #4
 8006122:	f7ff fcb1 	bl	8005a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006126:	9802      	ldr	r0, [sp, #8]
 8006128:	e72c      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800612a:	4a07      	ldr	r2, [pc, #28]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800612c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800612e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8006132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006136:	d037      	beq.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800613c:	f43f af46 	beq.w	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8006140:	2b00      	cmp	r3, #0
 8006142:	f47f af0c 	bne.w	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8006146:	e713      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006148:	58024400 	.word	0x58024400
 800614c:	017d7840 	.word	0x017d7840
 8006150:	00bb8000 	.word	0x00bb8000
 8006154:	03d09000 	.word	0x03d09000
 8006158:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800615c:	4b21      	ldr	r3, [pc, #132]	; (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800615e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8006160:	03d2      	lsls	r2, r2, #15
 8006162:	f57f af4c 	bpl.w	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800616c:	f43f af0a 	beq.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006170:	a801      	add	r0, sp, #4
 8006172:	f7ff fc89 	bl	8005a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006176:	9803      	ldr	r0, [sp, #12]
 8006178:	e704      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    switch (srcclk)
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617e:	d02a      	beq.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8006180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006184:	f43f aebd 	beq.w	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8006188:	e6e9      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 800618a:	2b00      	cmp	r3, #0
 800618c:	f47f aee7 	bne.w	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006190:	f7fe fd36 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8006194:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006196:	4a14      	ldr	r2, [pc, #80]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800619e:	5cd3      	ldrb	r3, [r2, r3]
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	40d8      	lsrs	r0, r3
        break;
 80061a6:	e6ed      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061a8:	6810      	ldr	r0, [r2, #0]
 80061aa:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80061ae:	f43f aee9 	beq.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061b2:	a801      	add	r0, sp, #4
 80061b4:	f7ff fd14 	bl	8005be0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80061b8:	9803      	ldr	r0, [sp, #12]
 80061ba:	e6e3      	b.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80061c4:	f43f aede 	beq.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80061c8:	e7aa      	b.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061ca:	6810      	ldr	r0, [r2, #0]
 80061cc:	f010 0004 	ands.w	r0, r0, #4
 80061d0:	f43f aed8 	beq.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80061d4:	e702      	b.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061d6:	4b03      	ldr	r3, [pc, #12]	; (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80061de:	f43f aed1 	beq.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80061e2:	e781      	b.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80061e4:	58024400 	.word	0x58024400
 80061e8:	08008650 	.word	0x08008650

080061ec <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d063      	beq.n	80062b8 <HAL_RNG_Init+0xcc>
{
 80061f0:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80061f2:	7a43      	ldrb	r3, [r0, #9]
 80061f4:	4604      	mov	r4, r0
 80061f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d052      	beq.n	80062a4 <HAL_RNG_Init+0xb8>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 80061fe:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8006200:	2202      	movs	r2, #2

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8006202:	4b2e      	ldr	r3, [pc, #184]	; (80062bc <HAL_RNG_Init+0xd0>)
  hrng->State = HAL_RNG_STATE_BUSY;
 8006204:	7262      	strb	r2, [r4, #9]
  __HAL_RNG_DISABLE(hrng);
 8006206:	680a      	ldr	r2, [r1, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8006208:	482d      	ldr	r0, [pc, #180]	; (80062c0 <HAL_RNG_Init+0xd4>)
  __HAL_RNG_DISABLE(hrng);
 800620a:	f022 0204 	bic.w	r2, r2, #4
 800620e:	600a      	str	r2, [r1, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8006210:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006214:	6815      	ldr	r5, [r2, #0]
 8006216:	402b      	ands	r3, r5
 8006218:	430b      	orrs	r3, r1
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800621a:	f247 2174 	movw	r1, #29300	; 0x7274
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800621e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006222:	6013      	str	r3, [r2, #0]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	6118      	str	r0, [r3, #16]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	6119      	str	r1, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800622c:	6822      	ldr	r2, [r4, #0]
 800622e:	6813      	ldr	r3, [r2, #0]
 8006230:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006234:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006236:	f7fb f9ad 	bl	8001594 <HAL_GetTick>

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800623a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800623c:	4605      	mov	r5, r0
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	0051      	lsls	r1, r2, #1
 8006242:	d50d      	bpl.n	8006260 <HAL_RNG_Init+0x74>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006244:	f7fb f9a6 	bl	8001594 <HAL_GetTick>
 8006248:	1b40      	subs	r0, r0, r5
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800624a:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800624c:	2802      	cmp	r0, #2
 800624e:	d9f6      	bls.n	800623e <HAL_RNG_Init+0x52>
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	0052      	lsls	r2, r2, #1
 8006254:	d5f3      	bpl.n	800623e <HAL_RNG_Init+0x52>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8006256:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006258:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 800625a:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800625c:	60e3      	str	r3, [r4, #12]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800625e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_RNG_ENABLE(hrng);
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	f042 0204 	orr.w	r2, r2, #4
 8006266:	601a      	str	r2, [r3, #0]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	0658      	lsls	r0, r3, #25
 800626e:	d503      	bpl.n	8006278 <HAL_RNG_Init+0x8c>
    hrng->State = HAL_RNG_STATE_ERROR;
 8006270:	2304      	movs	r3, #4
    return HAL_ERROR;
 8006272:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8006274:	7263      	strb	r3, [r4, #9]
}
 8006276:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8006278:	f7fb f98c 	bl	8001594 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800627c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800627e:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	0759      	lsls	r1, r3, #29
 8006284:	d512      	bpl.n	80062ac <HAL_RNG_Init+0xc0>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006286:	f7fb f985 	bl	8001594 <HAL_GetTick>
 800628a:	1b40      	subs	r0, r0, r5
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800628c:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800628e:	2802      	cmp	r0, #2
 8006290:	d9f6      	bls.n	8006280 <HAL_RNG_Init+0x94>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	0752      	lsls	r2, r2, #29
 8006296:	d5f3      	bpl.n	8006280 <HAL_RNG_Init+0x94>
        hrng->State = HAL_RNG_STATE_ERROR;
 8006298:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800629a:	2302      	movs	r3, #2
        return HAL_ERROR;
 800629c:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 800629e:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80062a0:	60e3      	str	r3, [r4, #12]
}
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80062a4:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 80062a6:	f7fa fec7 	bl	8001038 <HAL_RNG_MspInit>
 80062aa:	e7a8      	b.n	80061fe <HAL_RNG_Init+0x12>
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062ac:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 80062ae:	2201      	movs	r2, #1
  return HAL_OK;
 80062b0:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 80062b2:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062b4:	60e3      	str	r3, [r4, #12]
}
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80062b8:	2001      	movs	r0, #1
}
 80062ba:	4770      	bx	lr
 80062bc:	bfffffdf 	.word	0xbfffffdf
 80062c0:	17590abc 	.word	0x17590abc

080062c4 <HAL_RNG_ErrorCallback>:
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop

080062c8 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 80062c8:	b510      	push	{r4, lr}
  __IO uint32_t count = 0U;
 80062ca:	2300      	movs	r3, #0
{
 80062cc:	b082      	sub	sp, #8
 80062ce:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 80062d0:	9301      	str	r3, [sp, #4]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 80062d2:	6803      	ldr	r3, [r0, #0]
 80062d4:	6859      	ldr	r1, [r3, #4]
 80062d6:	074c      	lsls	r4, r1, #29
 80062d8:	d40a      	bmi.n	80062f0 <RNG_RecoverSeedError+0x28>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80062da:	6859      	ldr	r1, [r3, #4]
 80062dc:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80062e0:	6059      	str	r1, [r3, #4]
        return HAL_ERROR;
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 80062e2:	68d3      	ldr	r3, [r2, #12]
  return HAL_OK;
 80062e4:	2000      	movs	r0, #0
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 80062e6:	f023 0308 	bic.w	r3, r3, #8
 80062ea:	60d3      	str	r3, [r2, #12]
}
 80062ec:	b002      	add	sp, #8
 80062ee:	bd10      	pop	{r4, pc}
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80062f0:	6819      	ldr	r1, [r3, #0]
    count = RNG_TIMEOUT_VALUE;
 80062f2:	2002      	movs	r0, #2
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80062f4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80062f8:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80062fa:	6811      	ldr	r1, [r2, #0]
 80062fc:	680b      	ldr	r3, [r1, #0]
 80062fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006302:	600b      	str	r3, [r1, #0]
    count = RNG_TIMEOUT_VALUE;
 8006304:	9001      	str	r0, [sp, #4]
 8006306:	e003      	b.n	8006310 <RNG_RecoverSeedError+0x48>
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 8006308:	6813      	ldr	r3, [r2, #0]
 800630a:	6819      	ldr	r1, [r3, #0]
 800630c:	0048      	lsls	r0, r1, #1
 800630e:	d512      	bpl.n	8006336 <RNG_RecoverSeedError+0x6e>
      count-- ;
 8006310:	9b01      	ldr	r3, [sp, #4]
 8006312:	3b01      	subs	r3, #1
 8006314:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8006316:	9b01      	ldr	r3, [sp, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1f5      	bne.n	8006308 <RNG_RecoverSeedError+0x40>
        hrng->State = HAL_RNG_STATE_READY;
 800631c:	2401      	movs	r4, #1
        __HAL_UNLOCK(hrng);
 800631e:	7213      	strb	r3, [r2, #8]
        HAL_RNG_ErrorCallback(hrng);
 8006320:	4610      	mov	r0, r2
        hrng->State = HAL_RNG_STATE_READY;
 8006322:	7254      	strb	r4, [r2, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8006324:	68d3      	ldr	r3, [r2, #12]
 8006326:	f043 0302 	orr.w	r3, r3, #2
 800632a:	60d3      	str	r3, [r2, #12]
        HAL_RNG_ErrorCallback(hrng);
 800632c:	f7ff ffca 	bl	80062c4 <HAL_RNG_ErrorCallback>
        return HAL_ERROR;
 8006330:	4620      	mov	r0, r4
}
 8006332:	b002      	add	sp, #8
 8006334:	bd10      	pop	{r4, pc}
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006336:	6859      	ldr	r1, [r3, #4]
 8006338:	0649      	lsls	r1, r1, #25
 800633a:	d40d      	bmi.n	8006358 <RNG_RecoverSeedError+0x90>
    count = RNG_TIMEOUT_VALUE;
 800633c:	2302      	movs	r3, #2
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	e003      	b.n	800634a <RNG_RecoverSeedError+0x82>
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 8006342:	6813      	ldr	r3, [r2, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	075b      	lsls	r3, r3, #29
 8006348:	d5cb      	bpl.n	80062e2 <RNG_RecoverSeedError+0x1a>
      count-- ;
 800634a:	9b01      	ldr	r3, [sp, #4]
 800634c:	3b01      	subs	r3, #1
 800634e:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8006350:	9b01      	ldr	r3, [sp, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f5      	bne.n	8006342 <RNG_RecoverSeedError+0x7a>
 8006356:	e7e1      	b.n	800631c <RNG_RecoverSeedError+0x54>
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8006358:	6859      	ldr	r1, [r3, #4]
 800635a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800635e:	6059      	str	r1, [r3, #4]
 8006360:	e7ec      	b.n	800633c <RNG_RecoverSeedError+0x74>
 8006362:	bf00      	nop

08006364 <HAL_RNG_GenerateRandomNumber>:
{
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrng);
 8006366:	7a03      	ldrb	r3, [r0, #8]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d041      	beq.n	80063f0 <HAL_RNG_GenerateRandomNumber+0x8c>
 800636c:	2501      	movs	r5, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 800636e:	7a43      	ldrb	r3, [r0, #9]
 8006370:	4604      	mov	r4, r0
 8006372:	42ab      	cmp	r3, r5
  __HAL_LOCK(hrng);
 8006374:	7205      	strb	r5, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8006376:	d005      	beq.n	8006384 <HAL_RNG_GenerateRandomNumber+0x20>
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006378:	2304      	movs	r3, #4
 800637a:	60c3      	str	r3, [r0, #12]
  __HAL_UNLOCK(hrng);
 800637c:	2300      	movs	r3, #0
 800637e:	7223      	strb	r3, [r4, #8]
}
 8006380:	4628      	mov	r0, r5
 8006382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8006384:	2202      	movs	r2, #2
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006386:	6803      	ldr	r3, [r0, #0]
 8006388:	460f      	mov	r7, r1
    hrng->State = HAL_RNG_STATE_BUSY;
 800638a:	7242      	strb	r2, [r0, #9]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800638c:	685d      	ldr	r5, [r3, #4]
 800638e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8006392:	d116      	bne.n	80063c2 <HAL_RNG_GenerateRandomNumber+0x5e>
    tickstart = HAL_GetTick();
 8006394:	f7fb f8fe 	bl	8001594 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006398:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800639a:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	07d0      	lsls	r0, r2, #31
 80063a0:	d417      	bmi.n	80063d2 <HAL_RNG_GenerateRandomNumber+0x6e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80063a2:	f7fb f8f7 	bl	8001594 <HAL_GetTick>
 80063a6:	1b83      	subs	r3, r0, r6
 80063a8:	2b02      	cmp	r3, #2
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80063aa:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80063ac:	d9f6      	bls.n	800639c <HAL_RNG_GenerateRandomNumber+0x38>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	f012 0201 	ands.w	r2, r2, #1
 80063b4:	d1f2      	bne.n	800639c <HAL_RNG_GenerateRandomNumber+0x38>
          hrng->State = HAL_RNG_STATE_READY;
 80063b6:	2501      	movs	r5, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80063b8:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 80063ba:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 80063bc:	7265      	strb	r5, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80063be:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 80063c0:	e7de      	b.n	8006380 <HAL_RNG_GenerateRandomNumber+0x1c>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80063c2:	2308      	movs	r3, #8
 80063c4:	60c3      	str	r3, [r0, #12]
      status = RNG_RecoverSeedError(hrng);
 80063c6:	f7ff ff7f 	bl	80062c8 <RNG_RecoverSeedError>
      if (status == HAL_ERROR)
 80063ca:	2801      	cmp	r0, #1
      status = RNG_RecoverSeedError(hrng);
 80063cc:	4605      	mov	r5, r0
      if (status == HAL_ERROR)
 80063ce:	d1e1      	bne.n	8006394 <HAL_RNG_GenerateRandomNumber+0x30>
 80063d0:	e7d6      	b.n	8006380 <HAL_RNG_GenerateRandomNumber+0x1c>
    hrng->RandomNumber = hrng->Instance->DR;
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	6122      	str	r2, [r4, #16]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80063d6:	6859      	ldr	r1, [r3, #4]
 80063d8:	0649      	lsls	r1, r1, #25
 80063da:	d50c      	bpl.n	80063f6 <HAL_RNG_GenerateRandomNumber+0x92>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80063dc:	2208      	movs	r2, #8
      status = HAL_ERROR;
 80063de:	2501      	movs	r5, #1
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80063e0:	60e2      	str	r2, [r4, #12]
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	f022 0201 	bic.w	r2, r2, #1
 80063e8:	605a      	str	r2, [r3, #4]
    hrng->State = HAL_RNG_STATE_READY;
 80063ea:	2301      	movs	r3, #1
 80063ec:	7263      	strb	r3, [r4, #9]
 80063ee:	e7c5      	b.n	800637c <HAL_RNG_GenerateRandomNumber+0x18>
  __HAL_LOCK(hrng);
 80063f0:	2502      	movs	r5, #2
}
 80063f2:	4628      	mov	r0, r5
 80063f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *random32bit = hrng->RandomNumber;
 80063f6:	603a      	str	r2, [r7, #0]
 80063f8:	e7f7      	b.n	80063ea <HAL_RNG_GenerateRandomNumber+0x86>
 80063fa:	bf00      	nop

080063fc <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80063fc:	6802      	ldr	r2, [r0, #0]
{
 80063fe:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8006400:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006402:	6991      	ldr	r1, [r2, #24]
 8006404:	f041 0108 	orr.w	r1, r1, #8
 8006408:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800640a:	6801      	ldr	r1, [r0, #0]
 800640c:	698a      	ldr	r2, [r1, #24]
 800640e:	f042 0210 	orr.w	r2, r2, #16
 8006412:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006414:	6801      	ldr	r1, [r0, #0]
 8006416:	680a      	ldr	r2, [r1, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800641e:	6801      	ldr	r1, [r0, #0]
 8006420:	4a27      	ldr	r2, [pc, #156]	; (80064c0 <SPI_CloseTransfer+0xc4>)
 8006422:	690c      	ldr	r4, [r1, #16]
 8006424:	4022      	ands	r2, r4
 8006426:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006428:	6801      	ldr	r1, [r0, #0]
 800642a:	688a      	ldr	r2, [r1, #8]
 800642c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006430:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006432:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006436:	2a04      	cmp	r2, #4
 8006438:	d001      	beq.n	800643e <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800643a:	069c      	lsls	r4, r3, #26
 800643c:	d433      	bmi.n	80064a6 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800643e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006442:	2a03      	cmp	r2, #3
 8006444:	d001      	beq.n	800644a <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006446:	0659      	lsls	r1, r3, #25
 8006448:	d421      	bmi.n	800648e <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800644a:	059a      	lsls	r2, r3, #22
 800644c:	d50a      	bpl.n	8006464 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800644e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006452:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006454:	f042 0201 	orr.w	r2, r2, #1
 8006458:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800645c:	698a      	ldr	r2, [r1, #24]
 800645e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006462:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006464:	05db      	lsls	r3, r3, #23
 8006466:	d50a      	bpl.n	800647e <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006468:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800646c:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800646e:	f043 0308 	orr.w	r3, r3, #8
 8006472:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006476:	6993      	ldr	r3, [r2, #24]
 8006478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800647e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8006480:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8006484:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006488:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800648c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800648e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006492:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006494:	f042 0204 	orr.w	r2, r2, #4
 8006498:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800649c:	698a      	ldr	r2, [r1, #24]
 800649e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064a2:	618a      	str	r2, [r1, #24]
 80064a4:	e7d1      	b.n	800644a <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80064a6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80064aa:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80064ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064b0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80064b4:	698a      	ldr	r2, [r1, #24]
 80064b6:	f042 0220 	orr.w	r2, r2, #32
 80064ba:	618a      	str	r2, [r1, #24]
 80064bc:	e7bf      	b.n	800643e <SPI_CloseTransfer+0x42>
 80064be:	bf00      	nop
 80064c0:	fffffc90 	.word	0xfffffc90

080064c4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80064c4:	2800      	cmp	r0, #0
 80064c6:	f000 80be 	beq.w	8006646 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80064ca:	4a62      	ldr	r2, [pc, #392]	; (8006654 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064cc:	2100      	movs	r1, #0
{
 80064ce:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80064d0:	6803      	ldr	r3, [r0, #0]
 80064d2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064d4:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d015      	beq.n	8006506 <HAL_SPI_Init+0x42>
 80064da:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 80064de:	4293      	cmp	r3, r2
 80064e0:	d011      	beq.n	8006506 <HAL_SPI_Init+0x42>
 80064e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064e6:	4293      	cmp	r3, r2
 80064e8:	68c2      	ldr	r2, [r0, #12]
 80064ea:	f000 80a5 	beq.w	8006638 <HAL_SPI_Init+0x174>
 80064ee:	2a0f      	cmp	r2, #15
 80064f0:	d807      	bhi.n	8006502 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80064f2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80064f4:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80064f6:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 80064f8:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 80064fa:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80064fe:	2a08      	cmp	r2, #8
 8006500:	d914      	bls.n	800652c <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 8006502:	2001      	movs	r0, #1
}
 8006504:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 8006506:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006508:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800650a:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800650c:	4d51      	ldr	r5, [pc, #324]	; (8006654 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800650e:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
 8006510:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006512:	4951      	ldr	r1, [pc, #324]	; (8006658 <HAL_SPI_Init+0x194>)
 8006514:	428b      	cmp	r3, r1
 8006516:	bf18      	it	ne
 8006518:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
 800651a:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800651e:	d003      	beq.n	8006528 <HAL_SPI_Init+0x64>
 8006520:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006524:	428b      	cmp	r3, r1
 8006526:	d101      	bne.n	800652c <HAL_SPI_Init+0x68>
 8006528:	2a10      	cmp	r2, #16
 800652a:	d8ea      	bhi.n	8006502 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800652c:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006530:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8006534:	2a00      	cmp	r2, #0
 8006536:	d078      	beq.n	800662a <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006538:	2202      	movs	r2, #2
 800653a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	f022 0201 	bic.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006546:	6822      	ldr	r2, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006548:	69a0      	ldr	r0, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800654a:	6891      	ldr	r1, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800654c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8006550:	6863      	ldr	r3, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006552:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006556:	d058      	beq.n	800660a <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006558:	0258      	lsls	r0, r3, #9
 800655a:	d502      	bpl.n	8006562 <HAL_SPI_Init+0x9e>
 800655c:	68e3      	ldr	r3, [r4, #12]
 800655e:	2b06      	cmp	r3, #6
 8006560:	d84c      	bhi.n	80065fc <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006562:	6813      	ldr	r3, [r2, #0]
 8006564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006568:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800656a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800656c:	69e3      	ldr	r3, [r4, #28]
 800656e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006570:	432b      	orrs	r3, r5
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	4303      	orrs	r3, r0
 8006576:	68e0      	ldr	r0, [r4, #12]
 8006578:	4303      	orrs	r3, r0
 800657a:	430b      	orrs	r3, r1
 800657c:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800657e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006580:	69a0      	ldr	r0, [r4, #24]
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 8006588:	432b      	orrs	r3, r5
 800658a:	430b      	orrs	r3, r1
 800658c:	6921      	ldr	r1, [r4, #16]
 800658e:	4303      	orrs	r3, r0
 8006590:	6960      	ldr	r0, [r4, #20]
 8006592:	430b      	orrs	r3, r1
 8006594:	6a21      	ldr	r1, [r4, #32]
 8006596:	4303      	orrs	r3, r0
 8006598:	6860      	ldr	r0, [r4, #4]
 800659a:	430b      	orrs	r3, r1
 800659c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800659e:	4303      	orrs	r3, r0
 80065a0:	68a0      	ldr	r0, [r4, #8]
 80065a2:	430b      	orrs	r3, r1
 80065a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80065a6:	4303      	orrs	r3, r0
 80065a8:	430b      	orrs	r3, r1
 80065aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80065ac:	430b      	orrs	r3, r1
 80065ae:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80065b0:	6863      	ldr	r3, [r4, #4]
 80065b2:	b96b      	cbnz	r3, 80065d0 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	6893      	ldr	r3, [r2, #8]
 80065b8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80065bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065c0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80065c2:	6822      	ldr	r2, [r4, #0]
 80065c4:	6893      	ldr	r3, [r2, #8]
 80065c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065ce:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065d0:	6822      	ldr	r2, [r4, #0]
 80065d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80065da:	6863      	ldr	r3, [r4, #4]
 80065dc:	025b      	lsls	r3, r3, #9
 80065de:	d506      	bpl.n	80065ee <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80065e0:	6822      	ldr	r2, [r4, #0]
 80065e2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80065e4:	68d3      	ldr	r3, [r2, #12]
 80065e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065ea:	430b      	orrs	r3, r1
 80065ec:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065ee:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80065f0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065f2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80065f6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80065fa:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80065fc:	6813      	ldr	r3, [r2, #0]
 80065fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006604:	4303      	orrs	r3, r0
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	e7af      	b.n	800656a <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800660a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800660e:	d01c      	beq.n	800664a <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1a1      	bne.n	8006558 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800661a:	d1a2      	bne.n	8006562 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800661c:	6813      	ldr	r3, [r2, #0]
 800661e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006622:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006624:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006628:	e796      	b.n	8006558 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800662a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800662c:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006630:	f7fa fd30 	bl	8001094 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	e77f      	b.n	8006538 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006638:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800663a:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800663c:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800663e:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 8006640:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006644:	e770      	b.n	8006528 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 8006646:	2001      	movs	r0, #1
}
 8006648:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800664a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0e5      	beq.n	800661c <HAL_SPI_Init+0x158>
 8006650:	e784      	b.n	800655c <HAL_SPI_Init+0x98>
 8006652:	bf00      	nop
 8006654:	40013000 	.word	0x40013000
 8006658:	40003800 	.word	0x40003800

0800665c <HAL_SPI_Transmit_DMA>:
{
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800665e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006662:	2b01      	cmp	r3, #1
 8006664:	f000 80a4 	beq.w	80067b0 <HAL_SPI_Transmit_DMA+0x154>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006668:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800666c:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800666e:	2201      	movs	r2, #1
 8006670:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006672:	b2de      	uxtb	r6, r3
 8006674:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 8006676:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800667a:	d174      	bne.n	8006766 <HAL_SPI_Transmit_DMA+0x10a>
  if ((pData == NULL) || (Size == 0UL))
 800667c:	2900      	cmp	r1, #0
 800667e:	d06d      	beq.n	800675c <HAL_SPI_Transmit_DMA+0x100>
 8006680:	fab5 f385 	clz	r3, r5
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	2d00      	cmp	r5, #0
 8006688:	d068      	beq.n	800675c <HAL_SPI_Transmit_DMA+0x100>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800668a:	6882      	ldr	r2, [r0, #8]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800668c:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800668e:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006690:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->TxXferSize  = Size;
 8006694:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006698:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_TX(hspi);
 800669c:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800669e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 80066a2:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->TxXferCount = Size;
 80066a4:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferSize  = (uint16_t)0UL;
 80066a8:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80066ac:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 80066b0:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b4:	d077      	beq.n	80067a6 <HAL_SPI_Transmit_DMA+0x14a>
    SPI_2LINES_TX(hspi);
 80066b6:	68d3      	ldr	r3, [r2, #12]
 80066b8:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 80066bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c0:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	2b0f      	cmp	r3, #15
 80066c6:	d954      	bls.n	8006772 <HAL_SPI_Transmit_DMA+0x116>
 80066c8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80066d0:	d144      	bne.n	800675c <HAL_SPI_Transmit_DMA+0x100>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80066d2:	4a48      	ldr	r2, [pc, #288]	; (80067f4 <HAL_SPI_Transmit_DMA+0x198>)
  hspi->hdmatx->XferAbortCallback = NULL;
 80066d4:	2700      	movs	r7, #0
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80066d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80066d8:	4a47      	ldr	r2, [pc, #284]	; (80067f8 <HAL_SPI_Transmit_DMA+0x19c>)
 80066da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80066dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80066de:	4a47      	ldr	r2, [pc, #284]	; (80067fc <HAL_SPI_Transmit_DMA+0x1a0>)
 80066e0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80066e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80066e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80066e6:	651f      	str	r7, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80066e8:	6822      	ldr	r2, [r4, #0]
 80066ea:	6893      	ldr	r3, [r2, #8]
 80066ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066f0:	6093      	str	r3, [r2, #8]
                                 hspi->TxXferCount))
 80066f2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80066f6:	6822      	ldr	r2, [r4, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80066fc:	3220      	adds	r2, #32
 80066fe:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006700:	f7fc fbb6 	bl	8002e70 <HAL_DMA_Start_IT>
 8006704:	2800      	cmp	r0, #0
 8006706:	d156      	bne.n	80067b6 <HAL_SPI_Transmit_DMA+0x15a>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006708:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800670a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800670c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800670e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006714:	4b3a      	ldr	r3, [pc, #232]	; (8006800 <HAL_SPI_Transmit_DMA+0x1a4>)
 8006716:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800671a:	bf18      	it	ne
 800671c:	432b      	orrne	r3, r5
 800671e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	6893      	ldr	r3, [r2, #8]
 8006724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006728:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	6913      	ldr	r3, [r2, #16]
 800672e:	f443 7348 	orr.w	r3, r3, #800	; 0x320
 8006732:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8006734:	6822      	ldr	r2, [r4, #0]
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673e:	6863      	ldr	r3, [r4, #4]
 8006740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006744:	d104      	bne.n	8006750 <HAL_SPI_Transmit_DMA+0xf4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006746:	6822      	ldr	r2, [r4, #0]
 8006748:	6813      	ldr	r3, [r2, #0]
 800674a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800674e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8006750:	2300      	movs	r3, #0
  return errorcode;
 8006752:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 8006754:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006758:	4630      	mov	r0, r6
 800675a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800675c:	2300      	movs	r3, #0
 800675e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006762:	4630      	mov	r0, r6
 8006764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8006766:	2300      	movs	r3, #0
    return errorcode;
 8006768:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800676a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800676e:	4630      	mov	r0, r6
 8006770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006772:	2b07      	cmp	r3, #7
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006774:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006776:	699a      	ldr	r2, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006778:	d829      	bhi.n	80067ce <HAL_SPI_Transmit_DMA+0x172>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800677a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800677e:	d107      	bne.n	8006790 <HAL_SPI_Transmit_DMA+0x134>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006780:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8006784:	b292      	uxth	r2, r2
 8006786:	3201      	adds	r2, #1
 8006788:	0852      	lsrs	r2, r2, #1
 800678a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006794:	d19d      	bne.n	80066d2 <HAL_SPI_Transmit_DMA+0x76>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006796:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800679a:	b292      	uxth	r2, r2
 800679c:	3203      	adds	r2, #3
 800679e:	0892      	lsrs	r2, r2, #2
 80067a0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 80067a4:	e795      	b.n	80066d2 <HAL_SPI_Transmit_DMA+0x76>
    SPI_1LINE_TX(hspi);
 80067a6:	6813      	ldr	r3, [r2, #0]
 80067a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	e788      	b.n	80066c2 <HAL_SPI_Transmit_DMA+0x66>
  __HAL_LOCK(hspi);
 80067b0:	2602      	movs	r6, #2
}
 80067b2:	4630      	mov	r0, r6
 80067b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067b6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80067ba:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 80067bc:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067c0:	f043 0310 	orr.w	r3, r3, #16
 80067c4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80067c8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 80067cc:	e7c9      	b.n	8006762 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80067ce:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80067d2:	d006      	beq.n	80067e2 <HAL_SPI_Transmit_DMA+0x186>
 80067d4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80067d8:	d1c0      	bne.n	800675c <HAL_SPI_Transmit_DMA+0x100>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80067da:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80067de:	f47f af78 	bne.w	80066d2 <HAL_SPI_Transmit_DMA+0x76>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80067e2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80067e6:	b292      	uxth	r2, r2
 80067e8:	3201      	adds	r2, #1
 80067ea:	0852      	lsrs	r2, r2, #1
 80067ec:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 80067f0:	e76f      	b.n	80066d2 <HAL_SPI_Transmit_DMA+0x76>
 80067f2:	bf00      	nop
 80067f4:	08006a21 	.word	0x08006a21
 80067f8:	080069c9 	.word	0x080069c9
 80067fc:	08006a3d 	.word	0x08006a3d
 8006800:	ffff0000 	.word	0xffff0000

08006804 <HAL_SPI_Receive_DMA>:
{
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8006806:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800680a:	2b01      	cmp	r3, #1
 800680c:	f000 80a9 	beq.w	8006962 <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006810:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006814:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 8006816:	2201      	movs	r2, #1
 8006818:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800681a:	b2de      	uxtb	r6, r3
 800681c:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800681e:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 8006822:	f040 8093 	bne.w	800694c <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 8006826:	2900      	cmp	r1, #0
 8006828:	f000 808b 	beq.w	8006942 <HAL_SPI_Receive_DMA+0x13e>
 800682c:	fab5 f385 	clz	r3, r5
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	2d00      	cmp	r5, #0
 8006834:	f000 8085 	beq.w	8006942 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006838:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800683a:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800683c:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800683e:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 8006842:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006846:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800684a:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800684c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006850:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 8006854:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006858:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800685c:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006860:	d07a      	beq.n	8006958 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 8006862:	68d3      	ldr	r3, [r2, #12]
 8006864:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8006868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800686c:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	2b0f      	cmp	r3, #15
 8006872:	d861      	bhi.n	8006938 <HAL_SPI_Receive_DMA+0x134>
 8006874:	2b07      	cmp	r3, #7
 8006876:	f200 8092 	bhi.w	800699e <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800687a:	6822      	ldr	r2, [r4, #0]
 800687c:	6893      	ldr	r3, [r2, #8]
 800687e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006882:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006884:	68e3      	ldr	r3, [r4, #12]
 8006886:	2b07      	cmp	r3, #7
 8006888:	d86e      	bhi.n	8006968 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800688a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006892:	d107      	bne.n	80068a4 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006894:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006898:	b292      	uxth	r2, r2
 800689a:	3201      	adds	r2, #1
 800689c:	0852      	lsrs	r2, r2, #1
 800689e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80068a2:	699a      	ldr	r2, [r3, #24]
 80068a4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80068a8:	d106      	bne.n	80068b8 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80068aa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80068ae:	b292      	uxth	r2, r2
 80068b0:	3203      	adds	r2, #3
 80068b2:	0892      	lsrs	r2, r2, #2
 80068b4:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80068b8:	4a3e      	ldr	r2, [pc, #248]	; (80069b4 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 80068ba:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80068bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80068be:	4a3e      	ldr	r2, [pc, #248]	; (80069b8 <HAL_SPI_Receive_DMA+0x1b4>)
 80068c0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80068c4:	4a3d      	ldr	r2, [pc, #244]	; (80069bc <HAL_SPI_Receive_DMA+0x1b8>)
 80068c6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 80068ca:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068cc:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 80068ce:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80068d2:	6821      	ldr	r1, [r4, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068d8:	3130      	adds	r1, #48	; 0x30
 80068da:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80068dc:	f7fc fac8 	bl	8002e70 <HAL_DMA_Start_IT>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d150      	bne.n	8006986 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80068e4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80068e6:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80068e8:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80068ea:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80068ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80068f0:	4b33      	ldr	r3, [pc, #204]	; (80069c0 <HAL_SPI_Receive_DMA+0x1bc>)
 80068f2:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80068f6:	bf18      	it	ne
 80068f8:	432b      	orrne	r3, r5
 80068fa:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80068fc:	6822      	ldr	r2, [r4, #0]
 80068fe:	6893      	ldr	r3, [r2, #8]
 8006900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006904:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	6913      	ldr	r3, [r2, #16]
 800690a:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800690e:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8006910:	6822      	ldr	r2, [r4, #0]
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800691a:	6863      	ldr	r3, [r4, #4]
 800691c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006920:	d104      	bne.n	800692c <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	6813      	ldr	r3, [r2, #0]
 8006926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800692a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800692c:	2300      	movs	r3, #0
  return errorcode;
 800692e:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 8006930:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006934:	4630      	mov	r0, r6
 8006936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006938:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006940:	d09b      	beq.n	800687a <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 8006942:	2300      	movs	r3, #0
 8006944:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006948:	4630      	mov	r0, r6
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800694c:	2300      	movs	r3, #0
    return errorcode;
 800694e:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 8006950:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 8006954:	4630      	mov	r0, r6
 8006956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 8006958:	6813      	ldr	r3, [r2, #0]
 800695a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	e785      	b.n	800686e <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 8006962:	2602      	movs	r6, #2
}
 8006964:	4630      	mov	r0, r6
 8006966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006968:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800696a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800696c:	d8a4      	bhi.n	80068b8 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800696e:	699a      	ldr	r2, [r3, #24]
 8006970:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006974:	d1a0      	bne.n	80068b8 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006976:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800697a:	b292      	uxth	r2, r2
 800697c:	3201      	adds	r2, #1
 800697e:	0852      	lsrs	r2, r2, #1
 8006980:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 8006984:	e798      	b.n	80068b8 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006986:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800698a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800698c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006990:	f043 0310 	orr.w	r3, r3, #16
 8006994:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006998:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800699c:	e7d4      	b.n	8006948 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800699e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a6:	f43f af68 	beq.w	800687a <HAL_SPI_Receive_DMA+0x76>
 80069aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ae:	d1c8      	bne.n	8006942 <HAL_SPI_Receive_DMA+0x13e>
 80069b0:	e763      	b.n	800687a <HAL_SPI_Receive_DMA+0x76>
 80069b2:	bf00      	nop
 80069b4:	08006a2d 	.word	0x08006a2d
 80069b8:	080069f1 	.word	0x080069f1
 80069bc:	08006a3d 	.word	0x08006a3d
 80069c0:	ffff0000 	.word	0xffff0000

080069c4 <HAL_SPI_TxCpltCallback>:
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop

080069c8 <SPI_DMATransmitCplt>:
{
 80069c8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80069cc:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80069d0:	2b07      	cmp	r3, #7
 80069d2:	d009      	beq.n	80069e8 <SPI_DMATransmitCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80069d4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069dc:	d005      	beq.n	80069ea <SPI_DMATransmitCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80069de:	6802      	ldr	r2, [r0, #0]
 80069e0:	6913      	ldr	r3, [r2, #16]
 80069e2:	f043 0308 	orr.w	r3, r3, #8
 80069e6:	6113      	str	r3, [r2, #16]
}
 80069e8:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 80069ea:	f7ff ffeb 	bl	80069c4 <HAL_SPI_TxCpltCallback>
}
 80069ee:	bd08      	pop	{r3, pc}

080069f0 <SPI_DMAReceiveCplt>:
{
 80069f0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80069f4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80069f8:	2b07      	cmp	r3, #7
 80069fa:	d009      	beq.n	8006a10 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80069fc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a04:	d005      	beq.n	8006a12 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006a06:	6802      	ldr	r2, [r0, #0]
 8006a08:	6913      	ldr	r3, [r2, #16]
 8006a0a:	f043 0308 	orr.w	r3, r3, #8
 8006a0e:	6113      	str	r3, [r2, #16]
}
 8006a10:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8006a12:	f7fa fa07 	bl	8000e24 <HAL_SPI_RxCpltCallback>
}
 8006a16:	bd08      	pop	{r3, pc}

08006a18 <HAL_SPI_TxRxCpltCallback>:
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop

08006a1c <HAL_SPI_TxHalfCpltCallback>:
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop

08006a20 <SPI_DMAHalfTransmitCplt>:
{
 8006a20:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006a22:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006a24:	f7ff fffa 	bl	8006a1c <HAL_SPI_TxHalfCpltCallback>
}
 8006a28:	bd08      	pop	{r3, pc}
 8006a2a:	bf00      	nop

08006a2c <SPI_DMAHalfReceiveCplt>:
{
 8006a2c:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006a2e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006a30:	f7fa fa16 	bl	8000e60 <HAL_SPI_RxHalfCpltCallback>
}
 8006a34:	bd08      	pop	{r3, pc}
 8006a36:	bf00      	nop

08006a38 <HAL_SPI_ErrorCallback>:
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop

08006a3c <SPI_DMAError>:
{
 8006a3c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a3e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006a40:	f7fd fa76 	bl	8003f30 <HAL_DMA_GetError>
 8006a44:	2802      	cmp	r0, #2
 8006a46:	d100      	bne.n	8006a4a <SPI_DMAError+0xe>
}
 8006a48:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006a4e:	6991      	ldr	r1, [r2, #24]
 8006a50:	f041 0108 	orr.w	r1, r1, #8
 8006a54:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006a56:	6821      	ldr	r1, [r4, #0]
 8006a58:	698a      	ldr	r2, [r1, #24]
 8006a5a:	f042 0210 	orr.w	r2, r2, #16
 8006a5e:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 8006a60:	6821      	ldr	r1, [r4, #0]
 8006a62:	680a      	ldr	r2, [r1, #0]
 8006a64:	f022 0201 	bic.w	r2, r2, #1
 8006a68:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a6a:	6821      	ldr	r1, [r4, #0]
 8006a6c:	4a2c      	ldr	r2, [pc, #176]	; (8006b20 <SPI_DMAError+0xe4>)
 8006a6e:	6908      	ldr	r0, [r1, #16]
 8006a70:	4002      	ands	r2, r0
 8006a72:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a74:	6821      	ldr	r1, [r4, #0]
 8006a76:	688a      	ldr	r2, [r1, #8]
 8006a78:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a7c:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a7e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006a82:	2a04      	cmp	r2, #4
 8006a84:	d001      	beq.n	8006a8a <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006a86:	0698      	lsls	r0, r3, #26
 8006a88:	d43d      	bmi.n	8006b06 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a8a:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006a8e:	2a03      	cmp	r2, #3
 8006a90:	d001      	beq.n	8006a96 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a92:	0659      	lsls	r1, r3, #25
 8006a94:	d42b      	bmi.n	8006aee <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006a96:	059a      	lsls	r2, r3, #22
 8006a98:	d50a      	bpl.n	8006ab0 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a9a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a9e:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006aa0:	f042 0201 	orr.w	r2, r2, #1
 8006aa4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006aa8:	698a      	ldr	r2, [r1, #24]
 8006aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aae:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006ab0:	05db      	lsls	r3, r3, #23
 8006ab2:	d50a      	bpl.n	8006aca <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ab4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ab8:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006aba:	f043 0308 	orr.w	r3, r3, #8
 8006abe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ac2:	6993      	ldr	r3, [r2, #24]
 8006ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac8:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8006aca:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8006acc:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 8006ace:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8006ad0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006ad4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ad8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006adc:	f043 0310 	orr.w	r3, r3, #16
 8006ae0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006ae4:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8006ae8:	f7ff ffa6 	bl	8006a38 <HAL_SPI_ErrorCallback>
}
 8006aec:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006aee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006af2:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006af4:	f042 0204 	orr.w	r2, r2, #4
 8006af8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006afc:	698a      	ldr	r2, [r1, #24]
 8006afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b02:	618a      	str	r2, [r1, #24]
 8006b04:	e7c7      	b.n	8006a96 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b06:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b0a:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b10:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b14:	698a      	ldr	r2, [r1, #24]
 8006b16:	f042 0220 	orr.w	r2, r2, #32
 8006b1a:	618a      	str	r2, [r1, #24]
 8006b1c:	e7b5      	b.n	8006a8a <SPI_DMAError+0x4e>
 8006b1e:	bf00      	nop
 8006b20:	fffffc90 	.word	0xfffffc90

08006b24 <SPI_DMAAbortOnError>:
{
 8006b24:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 8006b26:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b28:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006b30:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006b34:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006b38:	f7ff ff7e 	bl	8006a38 <HAL_SPI_ErrorCallback>
}
 8006b3c:	bd08      	pop	{r3, pc}
 8006b3e:	bf00      	nop

08006b40 <HAL_SPI_SuspendCallback>:
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop

08006b44 <HAL_SPI_IRQHandler>:
{
 8006b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 8006b48:	6802      	ldr	r2, [r0, #0]
{
 8006b4a:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006b4c:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006b4e:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006b50:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 8006b52:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 8006b56:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006b5a:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 8006b5c:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006b5e:	d502      	bpl.n	8006b66 <HAL_SPI_IRQHandler+0x22>
 8006b60:	0709      	lsls	r1, r1, #28
 8006b62:	f100 80e2 	bmi.w	8006d2a <HAL_SPI_IRQHandler+0x1e6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006b66:	f005 0364 	and.w	r3, r5, #100	; 0x64
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d045      	beq.n	8006bfa <HAL_SPI_IRQHandler+0xb6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006b6e:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d04b      	beq.n	8006c0e <HAL_SPI_IRQHandler+0xca>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006b76:	f005 0326 	and.w	r3, r5, #38	; 0x26
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	f000 80ec 	beq.w	8006d58 <HAL_SPI_IRQHandler+0x214>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006b80:	072b      	lsls	r3, r5, #28
 8006b82:	d564      	bpl.n	8006c4e <HAL_SPI_IRQHandler+0x10a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b84:	6993      	ldr	r3, [r2, #24]
 8006b86:	f043 0308 	orr.w	r3, r3, #8
 8006b8a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b8c:	6821      	ldr	r1, [r4, #0]
 8006b8e:	698b      	ldr	r3, [r1, #24]
 8006b90:	f043 0310 	orr.w	r3, r3, #16
 8006b94:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006b96:	6821      	ldr	r1, [r4, #0]
 8006b98:	698b      	ldr	r3, [r1, #24]
 8006b9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b9e:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006ba0:	6821      	ldr	r1, [r4, #0]
 8006ba2:	690b      	ldr	r3, [r1, #16]
 8006ba4:	f023 0308 	bic.w	r3, r3, #8
 8006ba8:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8006bb2:	d136      	bne.n	8006c22 <HAL_SPI_IRQHandler+0xde>
      while (hspi->RxXferCount != 0UL)
 8006bb4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d031      	beq.n	8006c22 <HAL_SPI_IRQHandler+0xde>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006bbe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006bc0:	e00f      	b.n	8006be2 <HAL_SPI_IRQHandler+0x9e>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006bc8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006bca:	3104      	adds	r1, #4
 8006bcc:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8006bce:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8006bda:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	b1fb      	cbz	r3, 8006c22 <HAL_SPI_IRQHandler+0xde>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006be2:	68e3      	ldr	r3, [r4, #12]
 8006be4:	2b0f      	cmp	r3, #15
 8006be6:	d8ec      	bhi.n	8006bc2 <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006be8:	2b07      	cmp	r3, #7
 8006bea:	f240 80ad 	bls.w	8006d48 <HAL_SPI_IRQHandler+0x204>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006bee:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8006bf0:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bf2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006bf4:	3102      	adds	r1, #2
 8006bf6:	6661      	str	r1, [r4, #100]	; 0x64
 8006bf8:	e7e9      	b.n	8006bce <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006bfe:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006c00:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006c02:	4620      	mov	r0, r4
 8006c04:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006c06:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d102      	bne.n	8006c14 <HAL_SPI_IRQHandler+0xd0>
    hspi->RxISR(hspi);
 8006c0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006c10:	4620      	mov	r0, r4
 8006c12:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006c14:	f005 0526 	and.w	r5, r5, #38	; 0x26
 8006c18:	2d02      	cmp	r5, #2
 8006c1a:	f000 809d 	beq.w	8006d58 <HAL_SPI_IRQHandler+0x214>
}
 8006c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 8006c22:	4620      	mov	r0, r4
 8006c24:	f7ff fbea 	bl	80063fc <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c2e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f040 8085 	bne.w	8006d42 <HAL_SPI_IRQHandler+0x1fe>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006c38:	2e05      	cmp	r6, #5
 8006c3a:	f000 8092 	beq.w	8006d62 <HAL_SPI_IRQHandler+0x21e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006c3e:	2e04      	cmp	r6, #4
 8006c40:	f000 8092 	beq.w	8006d68 <HAL_SPI_IRQHandler+0x224>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006c44:	2e03      	cmp	r6, #3
 8006c46:	d1ea      	bne.n	8006c1e <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_TxCpltCallback(hspi);
 8006c48:	f7ff febc 	bl	80069c4 <HAL_SPI_TxCpltCallback>
 8006c4c:	e7e7      	b.n	8006c1e <HAL_SPI_IRQHandler+0xda>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006c4e:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006c52:	d0e4      	beq.n	8006c1e <HAL_SPI_IRQHandler+0xda>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006c54:	0668      	lsls	r0, r5, #25
 8006c56:	d509      	bpl.n	8006c6c <HAL_SPI_IRQHandler+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c58:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c5c:	f043 0304 	orr.w	r3, r3, #4
 8006c60:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c64:	6993      	ldr	r3, [r2, #24]
 8006c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c6a:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006c6c:	05a9      	lsls	r1, r5, #22
 8006c6e:	d50a      	bpl.n	8006c86 <HAL_SPI_IRQHandler+0x142>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c70:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c74:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c7e:	6993      	ldr	r3, [r2, #24]
 8006c80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c84:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006c86:	05ea      	lsls	r2, r5, #23
 8006c88:	d50a      	bpl.n	8006ca0 <HAL_SPI_IRQHandler+0x15c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c8a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c8e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c90:	f043 0308 	orr.w	r3, r3, #8
 8006c94:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c98:	6993      	ldr	r3, [r2, #24]
 8006c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c9e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006ca0:	06ab      	lsls	r3, r5, #26
 8006ca2:	d50a      	bpl.n	8006cba <HAL_SPI_IRQHandler+0x176>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006ca4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006ca8:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cb2:	6993      	ldr	r3, [r2, #24]
 8006cb4:	f043 0320 	orr.w	r3, r3, #32
 8006cb8:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0ad      	beq.n	8006c1e <HAL_SPI_IRQHandler+0xda>
      __HAL_SPI_DISABLE(hspi);
 8006cc2:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006cc4:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006cc8:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006cca:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006cd4:	6822      	ldr	r2, [r4, #0]
 8006cd6:	4b26      	ldr	r3, [pc, #152]	; (8006d70 <HAL_SPI_IRQHandler+0x22c>)
 8006cd8:	6911      	ldr	r1, [r2, #16]
 8006cda:	ea03 0301 	and.w	r3, r3, r1
 8006cde:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006ce0:	d12b      	bne.n	8006d3a <HAL_SPI_IRQHandler+0x1f6>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	6893      	ldr	r3, [r2, #8]
 8006ce6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006cea:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8006cec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006cee:	b15b      	cbz	r3, 8006d08 <HAL_SPI_IRQHandler+0x1c4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006cf0:	4a20      	ldr	r2, [pc, #128]	; (8006d74 <HAL_SPI_IRQHandler+0x230>)
 8006cf2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006cf4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006cf6:	f7fc fb87 	bl	8003408 <HAL_DMA_Abort_IT>
 8006cfa:	b128      	cbz	r0, 8006d08 <HAL_SPI_IRQHandler+0x1c4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006cfc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d04:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8006d08:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d087      	beq.n	8006c1e <HAL_SPI_IRQHandler+0xda>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d0e:	4a19      	ldr	r2, [pc, #100]	; (8006d74 <HAL_SPI_IRQHandler+0x230>)
 8006d10:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d12:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006d14:	f7fc fb78 	bl	8003408 <HAL_DMA_Abort_IT>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d080      	beq.n	8006c1e <HAL_SPI_IRQHandler+0xda>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d1c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d24:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006d28:	e779      	b.n	8006c1e <HAL_SPI_IRQHandler+0xda>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006d2a:	6993      	ldr	r3, [r2, #24]
 8006d2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d30:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 8006d32:	f7ff ff05 	bl	8006b40 <HAL_SPI_SuspendCallback>
}
 8006d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8006d3a:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8006d3c:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8006d3e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006d42:	f7ff fe79 	bl	8006a38 <HAL_SPI_ErrorCallback>
 8006d46:	e76a      	b.n	8006c1e <HAL_SPI_IRQHandler+0xda>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d4e:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d50:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006d52:	3101      	adds	r1, #1
 8006d54:	6661      	str	r1, [r4, #100]	; 0x64
 8006d56:	e73a      	b.n	8006bce <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 8006d58:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006d5a:	4620      	mov	r0, r4
}
 8006d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8006d60:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 8006d62:	f7ff fe59 	bl	8006a18 <HAL_SPI_TxRxCpltCallback>
 8006d66:	e75a      	b.n	8006c1e <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_RxCpltCallback(hspi);
 8006d68:	f7fa f85c 	bl	8000e24 <HAL_SPI_RxCpltCallback>
 8006d6c:	e757      	b.n	8006c1e <HAL_SPI_IRQHandler+0xda>
 8006d6e:	bf00      	nop
 8006d70:	fffffc94 	.word	0xfffffc94
 8006d74:	08006b25 	.word	0x08006b25

08006d78 <tThreshold_init>:
}



void tThreshold_init (tThreshold* const th, float low, float high, LEAF* const leaf)
{
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	ed2d 8b02 	vpush	{d8}
	tThreshold_initToPool(th, low, high, &leaf->mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006d7e:	698d      	ldr	r5, [r1, #24]
{
 8006d80:	eeb0 8a40 	vmov.f32	s16, s0
 8006d84:	eef0 8a60 	vmov.f32	s17, s1
 8006d88:	4604      	mov	r4, r0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	2010      	movs	r0, #16
 8006d8e:	f000 faff 	bl	8007390 <mpool_alloc>
    t->mempool = m;
    
    t->highThresh = high;
    t->lowThresh = low;

    t->currentValue = 0;
 8006d92:	2300      	movs	r3, #0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8006d94:	6020      	str	r0, [r4, #0]
    t->mempool = m;
 8006d96:	6005      	str	r5, [r0, #0]
    t->highThresh = high;
 8006d98:	edc0 8a01 	vstr	s17, [r0, #4]
    t->lowThresh = low;
 8006d9c:	ed80 8a02 	vstr	s16, [r0, #8]
    t->currentValue = 0;
 8006da0:	60c3      	str	r3, [r0, #12]
}
 8006da2:	ecbd 8b02 	vpop	{d8}
 8006da6:	bd38      	pop	{r3, r4, r5, pc}

08006da8 <tThreshold_tick>:
    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 8006da8:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 8006daa:	edd3 7a01 	vldr	s15, [r3, #4]
 8006dae:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db6:	d803      	bhi.n	8006dc0 <tThreshold_tick+0x18>
    {
    	t->currentValue = 1;
 8006db8:	2201      	movs	r2, #1
 8006dba:	4610      	mov	r0, r2
 8006dbc:	60da      	str	r2, [r3, #12]
 8006dbe:	4770      	bx	lr
    }
    else if (in <= t->lowThresh)
 8006dc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8006dc4:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dcc:	db03      	blt.n	8006dd6 <tThreshold_tick+0x2e>
	{
    	t->currentValue = 0;
 8006dce:	2200      	movs	r2, #0
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	60da      	str	r2, [r3, #12]
	}

    return t->currentValue;
}
 8006dd4:	4770      	bx	lr
    return t->currentValue;
 8006dd6:	68d8      	ldr	r0, [r3, #12]
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop

08006ddc <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006de2:	698d      	ldr	r5, [r1, #24]
{
 8006de4:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006de6:	201c      	movs	r0, #28
{
 8006de8:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006dec:	4629      	mov	r1, r5
{
 8006dee:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006df2:	f000 facd 	bl	8007390 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8006df6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8006dfa:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006dfc:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8006dfe:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8006e00:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8006e04:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8006e08:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8006e0c:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8006e0e:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8006e10:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8006e12:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8006e14:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8006e18:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8006e1c:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8006e20:	ecbd 8b02 	vpop	{d8}
 8006e24:	bd38      	pop	{r3, r4, r5, pc}
 8006e26:	bf00      	nop

08006e28 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8006e28:	6803      	ldr	r3, [r0, #0]
{
 8006e2a:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
 8006e2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006e32:	eef4 7ac0 	vcmpe.f32	s15, s0
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8006e36:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
 8006e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8006e3e:	bf94      	ite	ls
 8006e40:	edd3 6a04 	vldrls	s13, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8006e44:	edd3 6a05 	vldrhi	s13, [r3, #20]
 8006e48:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006e4c:	eeb0 0a67 	vmov.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006e50:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8006e84 <tSlide_tick+0x5c>
 8006e54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5c:	d406      	bmi.n	8006e6c <tSlide_tick+0x44>
 8006e5e:	ed83 0a02 	vstr	s0, [r3, #8]
#endif
    s->prevIn = in;
 8006e62:	ed83 7a03 	vstr	s14, [r3, #12]
    s->prevOut = s->currentOut;
 8006e66:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 8006e6a:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006e6c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8006e88 <tSlide_tick+0x60>
    s->prevIn = in;
 8006e70:	ed83 7a03 	vstr	s14, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006e74:	eeb0 0a67 	vmov.f32	s0, s15
 8006e78:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8006e7c:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	006ce3ee 	.word	0x006ce3ee
 8006e88:	00000000 	.word	0x00000000

08006e8c <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006e92:	698c      	ldr	r4, [r1, #24]
{
 8006e94:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8006e96:	2018      	movs	r0, #24
{
 8006e98:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	f000 fadb 	bl	8007458 <mpool_calloc>
 8006ea2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8006ea4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006ea6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006eaa:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8006eac:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006eae:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8006eb2:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006eb4:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8006eb8:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8006eba:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006ebe:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006ec2:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8006ec6:	ecbd 8b02 	vpop	{d8}
 8006eca:	bd38      	pop	{r3, r4, r5, pc}

08006ecc <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8006ecc:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8006ece:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ed2:	ed93 7a02 	vldr	s14, [r3, #8]
 8006ed6:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8006eda:	ed83 0a01 	vstr	s0, [r3, #4]
 8006ede:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8006ee2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006ee6:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8006eea:	4770      	bx	lr

08006eec <tVZFilter_calcCoeffs>:
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8006eec:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8006eee:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006ef0:	eddf 7a98 	vldr	s15, [pc, #608]	; 8007154 <tVZFilter_calcCoeffs+0x268>
{
 8006ef4:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006ef8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8006efc:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8006f00:	ee68 8a87 	vmul.f32	s17, s17, s14
 8006f04:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8006f08:	eeb0 0a68 	vmov.f32	s0, s17
 8006f0c:	f000 fd98 	bl	8007a40 <tanf>
    
    switch( f->type )
 8006f10:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006f12:	eeb0 8a40 	vmov.f32	s16, s0
 8006f16:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8006f1a:	2b0a      	cmp	r3, #10
 8006f1c:	f200 8117 	bhi.w	800714e <tVZFilter_calcCoeffs+0x262>
 8006f20:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006f24:	002f0026 	.word	0x002f0026
 8006f28:	00410038 	.word	0x00410038
 8006f2c:	0056004d 	.word	0x0056004d
 8006f30:	00a1008b 	.word	0x00a1008b
 8006f34:	010a00b7 	.word	0x010a00b7
 8006f38:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8006f3a:	edd4 7a05 	vldr	s15, [r4, #20]
 8006f3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f42:	eeb1 7a67 	vneg.f32	s14, s15
 8006f46:	61e3      	str	r3, [r4, #28]
 8006f48:	6263      	str	r3, [r4, #36]	; 0x24
 8006f4a:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8006f52:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006f56:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8006f5a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006f5e:	eee7 6a88 	vfma.f32	s13, s15, s16
 8006f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f66:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8006f6a:	ecbd 8b02 	vpop	{d8}
 8006f6e:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006f70:	2300      	movs	r3, #0
 8006f72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8006f76:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006f7a:	61e3      	str	r3, [r4, #28]
 8006f7c:	6223      	str	r3, [r4, #32]
 8006f7e:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8006f80:	e7e5      	b.n	8006f4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8006f82:	2300      	movs	r3, #0
 8006f84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8006f88:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8006f8c:	6223      	str	r3, [r4, #32]
 8006f8e:	6263      	str	r3, [r4, #36]	; 0x24
 8006f90:	61e2      	str	r2, [r4, #28]
            break;
 8006f92:	e7dc      	b.n	8006f4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8006f94:	2300      	movs	r3, #0
 8006f96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8006f9a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8006f9e:	61e3      	str	r3, [r4, #28]
 8006fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8006fa2:	6222      	str	r2, [r4, #32]
            break;
 8006fa4:	e7d3      	b.n	8006f4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006fa6:	edd4 7a05 	vldr	s15, [r4, #20]
 8006faa:	2300      	movs	r3, #0
 8006fac:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8006fb0:	61e3      	str	r3, [r4, #28]
 8006fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006fb6:	6263      	str	r3, [r4, #36]	; 0x24
 8006fb8:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8006fbc:	e7c7      	b.n	8006f4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006fbe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006fc2:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 8006fc4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006fc8:	6222      	str	r2, [r4, #32]
 8006fca:	61e3      	str	r3, [r4, #28]
 8006fcc:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8006fce:	e7be      	b.n	8006f4e <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8006fd0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8006fd4:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8006fd8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006fdc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006fe0:	f000 fbce 	bl	8007780 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8006fe4:	ee28 0a80 	vmul.f32	s0, s17, s0
 8006fe8:	f000 fd2a 	bl	8007a40 <tanf>
            float r  = f->g/wl;
 8006fec:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8006ff0:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8006ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ff8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8006ffc:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007000:	ed84 7a07 	vstr	s14, [r4, #28]
 8007004:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8007008:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800700c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8007010:	eef0 6a47 	vmov.f32	s13, s14
 8007014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007018:	ee77 7a45 	vsub.f32	s15, s14, s10
 800701c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007020:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8007024:	eef1 7ac7 	vsqrt.f32	s15, s14
 8007028:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800702c:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8007030:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007034:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8007038:	e789      	b.n	8006f4e <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 800703a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800703e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007042:	edd4 7a05 	vldr	s15, [r4, #20]
 8007046:	eef1 6ac7 	vsqrt.f32	s13, s14
 800704a:	ed84 7a07 	vstr	s14, [r4, #28]
 800704e:	6263      	str	r3, [r4, #36]	; 0x24
 8007050:	ee27 6a27 	vmul.f32	s12, s14, s15
 8007054:	ed84 6a08 	vstr	s12, [r4, #32]
 8007058:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800705c:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8007060:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8007064:	e773      	b.n	8006f4e <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8007066:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800706a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800706e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007072:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8007076:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 800707a:	61e3      	str	r3, [r4, #28]
 800707c:	ee27 6a27 	vmul.f32	s12, s14, s15
 8007080:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007084:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8007088:	ee20 8a07 	vmul.f32	s16, s0, s14
 800708c:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8007090:	e75d      	b.n	8006f4e <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 8007092:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007096:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800709a:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800709e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8007158 <tVZFilter_calcCoeffs+0x26c>
 80070a2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 80070a6:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80070aa:	eeb0 0a48 	vmov.f32	s0, s16
 80070ae:	eea7 0a67 	vfms.f32	s0, s14, s15
 80070b2:	f000 f94f 	bl	8007354 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80070b6:	eddf 0a28 	vldr	s1, [pc, #160]	; 8007158 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80070ba:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80070be:	eeb0 0a68 	vmov.f32	s0, s17
 80070c2:	f000 f94b 	bl	800735c <minimum>
            f->cB = 1.0f-x*x;
 80070c6:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070ca:	edd4 7a05 	vldr	s15, [r4, #20]
 80070ce:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 80070d2:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070d6:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80070da:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80070de:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070e2:	ee76 5a06 	vadd.f32	s11, s12, s12
 80070e6:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 80070ea:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070ee:	eee6 7a06 	vfma.f32	s15, s12, s12
 80070f2:	eee0 7a00 	vfma.f32	s15, s0, s0
 80070f6:	eee0 7a65 	vfms.f32	s15, s0, s11
 80070fa:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80070fe:	f000 f8cd 	bl	800729c <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8007102:	edd4 5a07 	vldr	s11, [r4, #28]
 8007106:	ed94 6a08 	vldr	s12, [r4, #32]
 800710a:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 800710e:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007112:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8007116:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800711a:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800711e:	ee65 5a80 	vmul.f32	s11, s11, s0
 8007122:	ee26 6a00 	vmul.f32	s12, s12, s0
 8007126:	ee26 0a80 	vmul.f32	s0, s13, s0
 800712a:	edc4 5a07 	vstr	s11, [r4, #28]
 800712e:	ed84 6a08 	vstr	s12, [r4, #32]
 8007132:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8007136:	e70a      	b.n	8006f4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8007138:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800713c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8007140:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8007142:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8007146:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 800714a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800714c:	e6ff      	b.n	8006f4e <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
 800714e:	edd4 7a05 	vldr	s15, [r4, #20]
 8007152:	e6fc      	b.n	8006f4e <tVZFilter_calcCoeffs+0x62>
 8007154:	40490fdb 	.word	0x40490fdb
 8007158:	00000000 	.word	0x00000000

0800715c <tVZFilter_initToPool>:
{
 800715c:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 800715e:	6817      	ldr	r7, [r2, #0]
{
 8007160:	4605      	mov	r5, r0
 8007162:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8007164:	204c      	movs	r0, #76	; 0x4c
 8007166:	4639      	mov	r1, r7
{
 8007168:	ed2d 8b04 	vpush	{d8-d9}
 800716c:	b083      	sub	sp, #12
 800716e:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007172:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8007176:	ed9f 8a42 	vldr	s16, [pc, #264]	; 8007280 <tVZFilter_initToPool+0x124>
{
 800717a:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800717e:	f000 f907 	bl	8007390 <mpool_alloc>
 8007182:	6028      	str	r0, [r5, #0]
 8007184:	4604      	mov	r4, r0
    f->mempool = m;
 8007186:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007188:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 800718c:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800718e:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 8007192:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007196:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 8007284 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
 800719a:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800719e:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80071a6:	f000 f89b 	bl	80072e0 <LEAF_clip>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80071aa:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8007288 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
 80071ae:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80071b2:	ee20 6a09 	vmul.f32	s12, s0, s18
 80071b6:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 80071ba:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 80071be:	4b33      	ldr	r3, [pc, #204]	; (800728c <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80071c0:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 80071c4:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 80071c6:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 80071ca:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80071ce:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80071d2:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 80071d6:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 80071d8:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 80071dc:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 80071e0:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 80071e4:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 80071e8:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80071ec:	f000 fc28 	bl	8007a40 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80071f0:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8007290 <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80071f4:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80071f8:	eef0 0a68 	vmov.f32	s1, s17
 80071fc:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 8007200:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8007202:	f000 f86d 	bl	80072e0 <LEAF_clip>
 8007206:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800720a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800720e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8007212:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
 8007216:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8007218:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800721c:	f000 fab0 	bl	8007780 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8007220:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8007224:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8007228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800722c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8007230:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007234:	f000 fc04 	bl	8007a40 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8007238:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800723c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8007240:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8007242:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8007246:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800724a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800724e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007252:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007256:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800725a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800725e:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8007262:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007266:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 800726a:	f7ff fe3f 	bl	8006eec <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 800726e:	4628      	mov	r0, r5
}
 8007270:	b003      	add	sp, #12
 8007272:	ecbd 8b04 	vpop	{d8-d9}
 8007276:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 800727a:	f7ff be37 	b.w	8006eec <tVZFilter_calcCoeffs>
 800727e:	bf00      	nop
 8007280:	00000000 	.word	0x00000000
 8007284:	40490fdb 	.word	0x40490fdb
 8007288:	3fb504f3 	.word	0x3fb504f3
 800728c:	3f3504f3 	.word	0x3f3504f3
 8007290:	42c80000 	.word	0x42c80000

08007294 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8007294:	3218      	adds	r2, #24
 8007296:	f7ff bf61 	b.w	800715c <tVZFilter_initToPool>
 800729a:	bf00      	nop

0800729c <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 800729c:	ee10 2a10 	vmov	r2, s0
 80072a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 80072a4:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80072a6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80072aa:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 80072ae:	ee60 7a27 	vmul.f32	s15, s0, s15
 80072b2:	ee00 3a10 	vmov	s0, r3
 80072b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80072ba:	eea0 7a67 	vfms.f32	s14, s0, s15
 80072be:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 80072c2:	ee10 3a10 	vmov	r3, s0
 80072c6:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 80072ca:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 80072ce:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 80072d2:	336e      	adds	r3, #110	; 0x6e
}
 80072d4:	ee00 3a10 	vmov	s0, r3
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	5f3759df 	.word	0x5f3759df

080072e0 <LEAF_clip>:
float LEAF_clip(float min, float val, float max)
#endif
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 80072e0:	eeb4 0ac1 	vcmpe.f32	s0, s2
 80072e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e8:	dd05      	ble.n	80072f6 <LEAF_clip+0x16>
 80072ea:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 80072ee:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 80072f2:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 80072f6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80072fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fe:	dc01      	bgt.n	8007304 <LEAF_clip+0x24>
    {
        return tempmin;
    }
    else if (val > tempmax)
 8007300:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop

08007308 <LEAF_generate_atodb>:
    }
}


void LEAF_generate_atodb(float* buffer, int size)
{
 8007308:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
 800730a:	1e4b      	subs	r3, r1, #1
 800730c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    for (int i = 0; i < size; i++)
 8007310:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800731a:	ed2d 8b04 	vpush	{d8-d9}
    float increment = 1.0f / (float)(size-1);
 800731e:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 8007322:	dd12      	ble.n	800734a <LEAF_generate_atodb+0x42>
 8007324:	4604      	mov	r4, r0
    float x = 0.0f;
 8007326:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007350 <LEAF_generate_atodb+0x48>
 800732a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 800732e:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 8007332:	eeb0 0a48 	vmov.f32	s0, s16
 8007336:	f000 fbaf 	bl	8007a98 <log10f>
 800733a:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 800733e:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 8007342:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8007346:	42a5      	cmp	r5, r4
 8007348:	d1f3      	bne.n	8007332 <LEAF_generate_atodb+0x2a>
}
 800734a:	ecbd 8b04 	vpop	{d8-d9}
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	00000000 	.word	0x00000000

08007354 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8007354:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop

0800735c <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 800735c:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop

08007364 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8007364:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8007366:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8007368:	2510      	movs	r5, #16
    pool->usize  = 0;
 800736a:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800736c:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800736e:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
 8007370:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
 8007372:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8007376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007378:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 800737a:	440b      	add	r3, r1
 800737c:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 800737e:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 8007382:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8007384:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 8007388:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800738a:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 800738c:	6183      	str	r3, [r0, #24]
}
 800738e:	4770      	bx	lr

08007390 <mpool_alloc>:
{
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8007392:	684a      	ldr	r2, [r1, #4]
{
 8007394:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8007396:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8007398:	3301      	adds	r3, #1
 800739a:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 800739c:	694b      	ldr	r3, [r1, #20]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d04a      	beq.n	8007438 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80073a2:	1dc4      	adds	r4, r0, #7
 80073a4:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 80073a8:	e002      	b.n	80073b0 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 80073aa:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d043      	beq.n	8007438 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	42a2      	cmp	r2, r4
 80073b4:	d3f9      	bcc.n	80073aa <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 80073b6:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80073b8:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 80073ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80073be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80073c0:	4281      	cmp	r1, r0
 80073c2:	d246      	bcs.n	8007452 <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80073c4:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 80073c8:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 80073ca:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80073cc:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 80073ce:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 80073d0:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 80073d2:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 80073d6:	4429      	add	r1, r5
 80073d8:	5111      	str	r1, [r2, r4]
    node->size = size;
 80073da:	60e8      	str	r0, [r5, #12]
    node->next = next;
 80073dc:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 80073e0:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80073e4:	429a      	cmp	r2, r3
        pool->head = new_node;
 80073e6:	bf08      	it	eq
 80073e8:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	b10a      	cbz	r2, 80073f4 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 80073f0:	6899      	ldr	r1, [r3, #8]
 80073f2:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	b10a      	cbz	r2, 80073fc <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 80073f8:	6859      	ldr	r1, [r3, #4]
 80073fa:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 80073fc:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80073fe:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 8007400:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8007404:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007408:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800740c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800740e:	4422      	add	r2, r4
 8007410:	4402      	add	r2, r0
 8007412:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8007416:	694a      	ldr	r2, [r1, #20]
 8007418:	42aa      	cmp	r2, r5
 800741a:	dd0b      	ble.n	8007434 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800741c:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 800741e:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8007420:	b14a      	cbz	r2, 8007436 <mpool_alloc+0xa6>
 8007422:	1e41      	subs	r1, r0, #1
 8007424:	460a      	mov	r2, r1
 8007426:	f801 5f01 	strb.w	r5, [r1, #1]!
 800742a:	68dc      	ldr	r4, [r3, #12]
 800742c:	3202      	adds	r2, #2
 800742e:	1a12      	subs	r2, r2, r0
 8007430:	4294      	cmp	r4, r2
 8007432:	d8f7      	bhi.n	8007424 <mpool_alloc+0x94>
    return node_to_alloc->pool;
 8007434:	6818      	ldr	r0, [r3, #0]
}
 8007436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8007438:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007440:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8007444:	bf8c      	ite	hi
 8007446:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007448:	2100      	movls	r1, #0
 800744a:	f000 f88f 	bl	800756c <LEAF_internalErrorCallback>
        return NULL;
 800744e:	2000      	movs	r0, #0
}
 8007450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 8007452:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8007454:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8007456:	e7c3      	b.n	80073e0 <mpool_alloc+0x50>

08007458 <mpool_calloc>:
{
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 800745a:	684a      	ldr	r2, [r1, #4]
{
 800745c:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 800745e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8007460:	3301      	adds	r3, #1
 8007462:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8007464:	694b      	ldr	r3, [r1, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d044      	beq.n	80074f4 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800746a:	1dc4      	adds	r4, r0, #7
 800746c:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8007470:	e002      	b.n	8007478 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8007472:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8007474:	2b00      	cmp	r3, #0
 8007476:	d03d      	beq.n	80074f4 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	42a2      	cmp	r2, r4
 800747c:	d3f9      	bcc.n	8007472 <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 800747e:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8007480:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8007482:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007486:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007488:	4281      	cmp	r1, r0
 800748a:	d240      	bcs.n	800750e <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800748c:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8007490:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8007492:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007494:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8007496:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8007498:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 800749a:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 800749e:	4429      	add	r1, r5
 80074a0:	5111      	str	r1, [r2, r4]
    node->size = size;
 80074a2:	60e8      	str	r0, [r5, #12]
    node->next = next;
 80074a4:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 80074a8:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80074ac:	429a      	cmp	r2, r3
        pool->head = new_node;
 80074ae:	bf08      	it	eq
 80074b0:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	b10a      	cbz	r2, 80074bc <mpool_calloc+0x64>
        node->next->prev = node->prev;
 80074b8:	6899      	ldr	r1, [r3, #8]
 80074ba:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	b10a      	cbz	r2, 80074c4 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 80074c0:	6859      	ldr	r1, [r3, #4]
 80074c2:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 80074c4:	2200      	movs	r2, #0
    node->prev = NULL;
 80074c6:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80074ca:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80074ce:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80074d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80074d4:	4401      	add	r1, r0
 80074d6:	68d8      	ldr	r0, [r3, #12]
 80074d8:	4401      	add	r1, r0
 80074da:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 80074de:	68d9      	ldr	r1, [r3, #12]
 80074e0:	b131      	cbz	r1, 80074f0 <mpool_calloc+0x98>
 80074e2:	4610      	mov	r0, r2
 80074e4:	6819      	ldr	r1, [r3, #0]
 80074e6:	5488      	strb	r0, [r1, r2]
 80074e8:	3201      	adds	r2, #1
 80074ea:	68d9      	ldr	r1, [r3, #12]
 80074ec:	4291      	cmp	r1, r2
 80074ee:	d8f9      	bhi.n	80074e4 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 80074f0:	6818      	ldr	r0, [r3, #0]
}
 80074f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80074f4:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80074f8:	1a9b      	subs	r3, r3, r2
 80074fa:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80074fc:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8007500:	bf8c      	ite	hi
 8007502:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007504:	2100      	movls	r1, #0
 8007506:	f000 f831 	bl	800756c <LEAF_internalErrorCallback>
        return NULL;
 800750a:	2000      	movs	r0, #0
}
 800750c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 800750e:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8007510:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8007512:	e7c9      	b.n	80074a8 <mpool_calloc+0x50>

08007514 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop

08007518 <LEAF_init>:
{
 8007518:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 800751a:	6200      	str	r0, [r0, #32]
{
 800751c:	4604      	mov	r4, r0
 800751e:	461d      	mov	r5, r3
 8007520:	ed2d 8b02 	vpush	{d8}
 8007524:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 8007528:	f7ff ff1c 	bl	8007364 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 800752c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8007530:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8007564 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 8007534:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8007536:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 8007538:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 800753c:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 8007540:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 8007542:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 8007544:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8007548:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 800754c:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8007550:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8007554:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8007558:	edc4 7a03 	vstr	s15, [r4, #12]
}
 800755c:	ecbd 8b02 	vpop	{d8}
 8007560:	bd38      	pop	{r3, r4, r5, pc}
 8007562:	bf00      	nop
 8007564:	40c90fdb 	.word	0x40c90fdb
 8007568:	08007515 	.word	0x08007515

0800756c <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800756c:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 800756e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8007572:	2401      	movs	r4, #1
 8007574:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 8007576:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 800757a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800757c:	4718      	bx	r3
 800757e:	bf00      	nop

08007580 <__errno>:
 8007580:	4b01      	ldr	r3, [pc, #4]	; (8007588 <__errno+0x8>)
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	24000014 	.word	0x24000014

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4d0d      	ldr	r5, [pc, #52]	; (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	; (80075c8 <__libc_init_array+0x3c>)
 8007592:	1b64      	subs	r4, r4, r5
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2600      	movs	r6, #0
 8007598:	42a6      	cmp	r6, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4d0b      	ldr	r5, [pc, #44]	; (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	; (80075d0 <__libc_init_array+0x44>)
 80075a0:	f001 f84a 	bl	8008638 <_init>
 80075a4:	1b64      	subs	r4, r4, r5
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2600      	movs	r6, #0
 80075aa:	42a6      	cmp	r6, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b4:	4798      	blx	r3
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80075be:	4798      	blx	r3
 80075c0:	3601      	adds	r6, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	08008dcc 	.word	0x08008dcc
 80075c8:	08008dcc 	.word	0x08008dcc
 80075cc:	08008dcc 	.word	0x08008dcc
 80075d0:	08008dd0 	.word	0x08008dd0

080075d4 <memset>:
 80075d4:	4402      	add	r2, r0
 80075d6:	4603      	mov	r3, r0
 80075d8:	4293      	cmp	r3, r2
 80075da:	d100      	bne.n	80075de <memset+0xa>
 80075dc:	4770      	bx	lr
 80075de:	f803 1b01 	strb.w	r1, [r3], #1
 80075e2:	e7f9      	b.n	80075d8 <memset+0x4>

080075e4 <with_errnof>:
 80075e4:	b513      	push	{r0, r1, r4, lr}
 80075e6:	4604      	mov	r4, r0
 80075e8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80075ec:	f7ff ffc8 	bl	8007580 <__errno>
 80075f0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80075f4:	6004      	str	r4, [r0, #0]
 80075f6:	b002      	add	sp, #8
 80075f8:	bd10      	pop	{r4, pc}

080075fa <xflowf>:
 80075fa:	b130      	cbz	r0, 800760a <xflowf+0x10>
 80075fc:	eef1 7a40 	vneg.f32	s15, s0
 8007600:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007604:	2022      	movs	r0, #34	; 0x22
 8007606:	f7ff bfed 	b.w	80075e4 <with_errnof>
 800760a:	eef0 7a40 	vmov.f32	s15, s0
 800760e:	e7f7      	b.n	8007600 <xflowf+0x6>

08007610 <__math_uflowf>:
 8007610:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007618 <__math_uflowf+0x8>
 8007614:	f7ff bff1 	b.w	80075fa <xflowf>
 8007618:	10000000 	.word	0x10000000

0800761c <__math_may_uflowf>:
 800761c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007624 <__math_may_uflowf+0x8>
 8007620:	f7ff bfeb 	b.w	80075fa <xflowf>
 8007624:	1a200000 	.word	0x1a200000

08007628 <__math_oflowf>:
 8007628:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007630 <__math_oflowf+0x8>
 800762c:	f7ff bfe5 	b.w	80075fa <xflowf>
 8007630:	70000000 	.word	0x70000000

08007634 <__math_divzerof>:
 8007634:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007638:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800763c:	2800      	cmp	r0, #0
 800763e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8007642:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007650 <__math_divzerof+0x1c>
 8007646:	2022      	movs	r0, #34	; 0x22
 8007648:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800764c:	f7ff bfca 	b.w	80075e4 <with_errnof>
 8007650:	00000000 	.word	0x00000000

08007654 <__math_invalidf>:
 8007654:	eef0 7a40 	vmov.f32	s15, s0
 8007658:	ee30 7a40 	vsub.f32	s14, s0, s0
 800765c:	eef4 7a67 	vcmp.f32	s15, s15
 8007660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007664:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8007668:	d602      	bvs.n	8007670 <__math_invalidf+0x1c>
 800766a:	2021      	movs	r0, #33	; 0x21
 800766c:	f7ff bfba 	b.w	80075e4 <with_errnof>
 8007670:	4770      	bx	lr

08007672 <fabsf>:
 8007672:	ee10 3a10 	vmov	r3, s0
 8007676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800767a:	ee00 3a10 	vmov	s0, r3
 800767e:	4770      	bx	lr

08007680 <logf>:
 8007680:	ee10 3a10 	vmov	r3, s0
 8007684:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007688:	b410      	push	{r4}
 800768a:	d055      	beq.n	8007738 <logf+0xb8>
 800768c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8007690:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007694:	d31a      	bcc.n	80076cc <logf+0x4c>
 8007696:	005a      	lsls	r2, r3, #1
 8007698:	d104      	bne.n	80076a4 <logf+0x24>
 800769a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800769e:	2001      	movs	r0, #1
 80076a0:	f7ff bfc8 	b.w	8007634 <__math_divzerof>
 80076a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80076a8:	d043      	beq.n	8007732 <logf+0xb2>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	db02      	blt.n	80076b4 <logf+0x34>
 80076ae:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80076b2:	d303      	bcc.n	80076bc <logf+0x3c>
 80076b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076b8:	f7ff bfcc 	b.w	8007654 <__math_invalidf>
 80076bc:	eddf 7a20 	vldr	s15, [pc, #128]	; 8007740 <logf+0xc0>
 80076c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80076c4:	ee10 3a10 	vmov	r3, s0
 80076c8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80076cc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80076d0:	491c      	ldr	r1, [pc, #112]	; (8007744 <logf+0xc4>)
 80076d2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 80076d6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80076da:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80076de:	0dd4      	lsrs	r4, r2, #23
 80076e0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80076e4:	05e4      	lsls	r4, r4, #23
 80076e6:	ed90 6b00 	vldr	d6, [r0]
 80076ea:	1b1b      	subs	r3, r3, r4
 80076ec:	ee07 3a90 	vmov	s15, r3
 80076f0:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 80076f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80076f8:	15d2      	asrs	r2, r2, #23
 80076fa:	eea6 0b07 	vfma.f64	d0, d6, d7
 80076fe:	ed90 6b02 	vldr	d6, [r0, #8]
 8007702:	ee20 4b00 	vmul.f64	d4, d0, d0
 8007706:	ee07 2a90 	vmov	s15, r2
 800770a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800770e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007712:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8007716:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800771a:	eea5 7b00 	vfma.f64	d7, d5, d0
 800771e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8007722:	ee30 0b06 	vadd.f64	d0, d0, d6
 8007726:	eea5 7b04 	vfma.f64	d7, d5, d4
 800772a:	eea4 0b07 	vfma.f64	d0, d4, d7
 800772e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007732:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007748 <logf+0xc8>
 800773c:	e7f9      	b.n	8007732 <logf+0xb2>
 800773e:	bf00      	nop
 8007740:	4b000000 	.word	0x4b000000
 8007744:	080087b0 	.word	0x080087b0
 8007748:	00000000 	.word	0x00000000

0800774c <checkint>:
 800774c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007750:	2b7e      	cmp	r3, #126	; 0x7e
 8007752:	dd10      	ble.n	8007776 <checkint+0x2a>
 8007754:	2b96      	cmp	r3, #150	; 0x96
 8007756:	dc0c      	bgt.n	8007772 <checkint+0x26>
 8007758:	2201      	movs	r2, #1
 800775a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800775e:	fa02 f303 	lsl.w	r3, r2, r3
 8007762:	1e5a      	subs	r2, r3, #1
 8007764:	4202      	tst	r2, r0
 8007766:	d106      	bne.n	8007776 <checkint+0x2a>
 8007768:	4203      	tst	r3, r0
 800776a:	bf0c      	ite	eq
 800776c:	2002      	moveq	r0, #2
 800776e:	2001      	movne	r0, #1
 8007770:	4770      	bx	lr
 8007772:	2002      	movs	r0, #2
 8007774:	4770      	bx	lr
 8007776:	2000      	movs	r0, #0
 8007778:	4770      	bx	lr
 800777a:	0000      	movs	r0, r0
 800777c:	0000      	movs	r0, r0
	...

08007780 <powf>:
 8007780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007782:	ee10 1a10 	vmov	r1, s0
 8007786:	ee10 4a90 	vmov	r4, s1
 800778a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800778e:	0062      	lsls	r2, r4, #1
 8007790:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007794:	eef0 7a40 	vmov.f32	s15, s0
 8007798:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800779c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80077a0:	d252      	bcs.n	8007848 <powf+0xc8>
 80077a2:	4298      	cmp	r0, r3
 80077a4:	d252      	bcs.n	800784c <powf+0xcc>
 80077a6:	2000      	movs	r0, #0
 80077a8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80077ac:	4ca0      	ldr	r4, [pc, #640]	; (8007a30 <powf+0x2b0>)
 80077ae:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80077b2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80077b6:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 80077ba:	0dd2      	lsrs	r2, r2, #23
 80077bc:	05d2      	lsls	r2, r2, #23
 80077be:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 80077c2:	1a8b      	subs	r3, r1, r2
 80077c4:	ed95 6b00 	vldr	d6, [r5]
 80077c8:	ee07 3a90 	vmov	s15, r3
 80077cc:	15d2      	asrs	r2, r2, #23
 80077ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80077d2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80077d6:	ed95 6b02 	vldr	d6, [r5, #8]
 80077da:	ee25 2b05 	vmul.f64	d2, d5, d5
 80077de:	ee22 1b02 	vmul.f64	d1, d2, d2
 80077e2:	ee07 2a90 	vmov	s15, r2
 80077e6:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 80077ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80077ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80077f2:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 80077f6:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 80077fa:	eea5 3b06 	vfma.f64	d3, d5, d6
 80077fe:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8007802:	eea5 6b04 	vfma.f64	d6, d5, d4
 8007806:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 800780a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800780e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8007812:	eea2 7b06 	vfma.f64	d7, d2, d6
 8007816:	eea3 7b01 	vfma.f64	d7, d3, d1
 800781a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800781e:	ee10 3a90 	vmov	r3, s1
 8007822:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8007826:	f248 03bf 	movw	r3, #32959	; 0x80bf
 800782a:	429a      	cmp	r2, r3
 800782c:	f0c0 80b1 	bcc.w	8007992 <powf+0x212>
 8007830:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8007a10 <powf+0x290>
 8007834:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783c:	dd79      	ble.n	8007932 <powf+0x1b2>
 800783e:	b003      	add	sp, #12
 8007840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007844:	f7ff bef0 	b.w	8007628 <__math_oflowf>
 8007848:	4298      	cmp	r0, r3
 800784a:	d32d      	bcc.n	80078a8 <powf+0x128>
 800784c:	b952      	cbnz	r2, 8007864 <powf+0xe4>
 800784e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8007858:	f240 80c9 	bls.w	80079ee <powf+0x26e>
 800785c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8007860:	b003      	add	sp, #12
 8007862:	bd30      	pop	{r4, r5, pc}
 8007864:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8007868:	d105      	bne.n	8007876 <powf+0xf6>
 800786a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800786e:	0064      	lsls	r4, r4, #1
 8007870:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007874:	e7f0      	b.n	8007858 <powf+0xd8>
 8007876:	004b      	lsls	r3, r1, #1
 8007878:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800787c:	d8ee      	bhi.n	800785c <powf+0xdc>
 800787e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8007882:	d1eb      	bne.n	800785c <powf+0xdc>
 8007884:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007888:	f000 80b1 	beq.w	80079ee <powf+0x26e>
 800788c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007890:	ea6f 0404 	mvn.w	r4, r4
 8007894:	bf34      	ite	cc
 8007896:	2300      	movcc	r3, #0
 8007898:	2301      	movcs	r3, #1
 800789a:	0fe4      	lsrs	r4, r4, #31
 800789c:	42a3      	cmp	r3, r4
 800789e:	f040 80a9 	bne.w	80079f4 <powf+0x274>
 80078a2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80078a6:	e7db      	b.n	8007860 <powf+0xe0>
 80078a8:	004d      	lsls	r5, r1, #1
 80078aa:	1e6a      	subs	r2, r5, #1
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d31c      	bcc.n	80078ea <powf+0x16a>
 80078b0:	2900      	cmp	r1, #0
 80078b2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80078b6:	da0f      	bge.n	80078d8 <powf+0x158>
 80078b8:	ee10 0a90 	vmov	r0, s1
 80078bc:	f7ff ff46 	bl	800774c <checkint>
 80078c0:	2801      	cmp	r0, #1
 80078c2:	d109      	bne.n	80078d8 <powf+0x158>
 80078c4:	eeb1 0a40 	vneg.f32	s0, s0
 80078c8:	b945      	cbnz	r5, 80078dc <powf+0x15c>
 80078ca:	2c00      	cmp	r4, #0
 80078cc:	dac8      	bge.n	8007860 <powf+0xe0>
 80078ce:	b003      	add	sp, #12
 80078d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078d4:	f7ff beae 	b.w	8007634 <__math_divzerof>
 80078d8:	2000      	movs	r0, #0
 80078da:	e7f5      	b.n	80078c8 <powf+0x148>
 80078dc:	2c00      	cmp	r4, #0
 80078de:	dabf      	bge.n	8007860 <powf+0xe0>
 80078e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80078e4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80078e8:	e7ba      	b.n	8007860 <powf+0xe0>
 80078ea:	2900      	cmp	r1, #0
 80078ec:	da1f      	bge.n	800792e <powf+0x1ae>
 80078ee:	ee10 0a90 	vmov	r0, s1
 80078f2:	f7ff ff2b 	bl	800774c <checkint>
 80078f6:	b920      	cbnz	r0, 8007902 <powf+0x182>
 80078f8:	b003      	add	sp, #12
 80078fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078fe:	f7ff bea9 	b.w	8007654 <__math_invalidf>
 8007902:	2801      	cmp	r0, #1
 8007904:	bf14      	ite	ne
 8007906:	2000      	movne	r0, #0
 8007908:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800790c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007910:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007914:	f4bf af48 	bcs.w	80077a8 <powf+0x28>
 8007918:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8007a34 <powf+0x2b4>
 800791c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007920:	ee10 3a10 	vmov	r3, s0
 8007924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007928:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800792c:	e73c      	b.n	80077a8 <powf+0x28>
 800792e:	2000      	movs	r0, #0
 8007930:	e7ee      	b.n	8007910 <powf+0x190>
 8007932:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8007a18 <powf+0x298>
 8007936:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793e:	dd10      	ble.n	8007962 <powf+0x1e2>
 8007940:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8007944:	2800      	cmp	r0, #0
 8007946:	d158      	bne.n	80079fa <powf+0x27a>
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	eddd 7a00 	vldr	s15, [sp]
 800794e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007956:	eef4 7a47 	vcmp.f32	s15, s14
 800795a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795e:	f47f af6e 	bne.w	800783e <powf+0xbe>
 8007962:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007a20 <powf+0x2a0>
 8007966:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800796a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796e:	d804      	bhi.n	800797a <powf+0x1fa>
 8007970:	b003      	add	sp, #12
 8007972:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007976:	f7ff be4b 	b.w	8007610 <__math_uflowf>
 800797a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8007a28 <powf+0x2a8>
 800797e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007986:	d504      	bpl.n	8007992 <powf+0x212>
 8007988:	b003      	add	sp, #12
 800798a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800798e:	f7ff be45 	b.w	800761c <__math_may_uflowf>
 8007992:	4b29      	ldr	r3, [pc, #164]	; (8007a38 <powf+0x2b8>)
 8007994:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8007998:	ee30 6b07 	vadd.f64	d6, d0, d7
 800799c:	ee16 2a10 	vmov	r2, s12
 80079a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80079a4:	f002 011f 	and.w	r1, r2, #31
 80079a8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80079ac:	ee30 7b47 	vsub.f64	d7, d0, d7
 80079b0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80079b4:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80079b8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80079bc:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80079c0:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80079c4:	eea7 6b05 	vfma.f64	d6, d7, d5
 80079c8:	686d      	ldr	r5, [r5, #4]
 80079ca:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80079ce:	1882      	adds	r2, r0, r2
 80079d0:	2300      	movs	r3, #0
 80079d2:	1918      	adds	r0, r3, r4
 80079d4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80079d8:	eea7 0b05 	vfma.f64	d0, d7, d5
 80079dc:	ec41 0b17 	vmov	d7, r0, r1
 80079e0:	eea6 0b04 	vfma.f64	d0, d6, d4
 80079e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80079e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80079ec:	e738      	b.n	8007860 <powf+0xe0>
 80079ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80079f2:	e735      	b.n	8007860 <powf+0xe0>
 80079f4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007a3c <powf+0x2bc>
 80079f8:	e732      	b.n	8007860 <powf+0xe0>
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	eddd 7a01 	vldr	s15, [sp, #4]
 8007a00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a08:	e7a5      	b.n	8007956 <powf+0x1d6>
 8007a0a:	bf00      	nop
 8007a0c:	f3af 8000 	nop.w
 8007a10:	ffd1d571 	.word	0xffd1d571
 8007a14:	405fffff 	.word	0x405fffff
 8007a18:	ffa3aae2 	.word	0xffa3aae2
 8007a1c:	405fffff 	.word	0x405fffff
 8007a20:	00000000 	.word	0x00000000
 8007a24:	c062c000 	.word	0xc062c000
 8007a28:	00000000 	.word	0x00000000
 8007a2c:	c062a000 	.word	0xc062a000
 8007a30:	080088d0 	.word	0x080088d0
 8007a34:	4b000000 	.word	0x4b000000
 8007a38:	08008668 	.word	0x08008668
 8007a3c:	00000000 	.word	0x00000000

08007a40 <tanf>:
 8007a40:	ee10 3a10 	vmov	r3, s0
 8007a44:	b507      	push	{r0, r1, r2, lr}
 8007a46:	4a12      	ldr	r2, [pc, #72]	; (8007a90 <tanf+0x50>)
 8007a48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	dc07      	bgt.n	8007a60 <tanf+0x20>
 8007a50:	eddf 0a10 	vldr	s1, [pc, #64]	; 8007a94 <tanf+0x54>
 8007a54:	2001      	movs	r0, #1
 8007a56:	b003      	add	sp, #12
 8007a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a5c:	f000 bc54 	b.w	8008308 <__kernel_tanf>
 8007a60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a64:	db04      	blt.n	8007a70 <tanf+0x30>
 8007a66:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007a6a:	b003      	add	sp, #12
 8007a6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a70:	4668      	mov	r0, sp
 8007a72:	f000 f897 	bl	8007ba4 <__ieee754_rem_pio2f>
 8007a76:	0040      	lsls	r0, r0, #1
 8007a78:	f000 0002 	and.w	r0, r0, #2
 8007a7c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007a80:	ed9d 0a00 	vldr	s0, [sp]
 8007a84:	f1c0 0001 	rsb	r0, r0, #1
 8007a88:	f000 fc3e 	bl	8008308 <__kernel_tanf>
 8007a8c:	e7ed      	b.n	8007a6a <tanf+0x2a>
 8007a8e:	bf00      	nop
 8007a90:	3f490fda 	.word	0x3f490fda
 8007a94:	00000000 	.word	0x00000000

08007a98 <log10f>:
 8007a98:	b508      	push	{r3, lr}
 8007a9a:	ed2d 8b02 	vpush	{d8}
 8007a9e:	eeb0 8a40 	vmov.f32	s16, s0
 8007aa2:	f000 f827 	bl	8007af4 <__ieee754_log10f>
 8007aa6:	eeb4 8a48 	vcmp.f32	s16, s16
 8007aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aae:	d60f      	bvs.n	8007ad0 <log10f+0x38>
 8007ab0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab8:	d80a      	bhi.n	8007ad0 <log10f+0x38>
 8007aba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac2:	d108      	bne.n	8007ad6 <log10f+0x3e>
 8007ac4:	f7ff fd5c 	bl	8007580 <__errno>
 8007ac8:	2322      	movs	r3, #34	; 0x22
 8007aca:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007aec <log10f+0x54>
 8007ace:	6003      	str	r3, [r0, #0]
 8007ad0:	ecbd 8b02 	vpop	{d8}
 8007ad4:	bd08      	pop	{r3, pc}
 8007ad6:	f7ff fd53 	bl	8007580 <__errno>
 8007ada:	ecbd 8b02 	vpop	{d8}
 8007ade:	2321      	movs	r3, #33	; 0x21
 8007ae0:	6003      	str	r3, [r0, #0]
 8007ae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007ae6:	4802      	ldr	r0, [pc, #8]	; (8007af0 <log10f+0x58>)
 8007ae8:	f000 bd30 	b.w	800854c <nanf>
 8007aec:	ff800000 	.word	0xff800000
 8007af0:	080089f8 	.word	0x080089f8

08007af4 <__ieee754_log10f>:
 8007af4:	b508      	push	{r3, lr}
 8007af6:	ee10 2a10 	vmov	r2, s0
 8007afa:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007afe:	ed2d 8b02 	vpush	{d8}
 8007b02:	d108      	bne.n	8007b16 <__ieee754_log10f+0x22>
 8007b04:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007b8c <__ieee754_log10f+0x98>
 8007b08:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007b90 <__ieee754_log10f+0x9c>
 8007b0c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007b10:	ecbd 8b02 	vpop	{d8}
 8007b14:	bd08      	pop	{r3, pc}
 8007b16:	2a00      	cmp	r2, #0
 8007b18:	da02      	bge.n	8007b20 <__ieee754_log10f+0x2c>
 8007b1a:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007b1e:	e7f3      	b.n	8007b08 <__ieee754_log10f+0x14>
 8007b20:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007b24:	db02      	blt.n	8007b2c <__ieee754_log10f+0x38>
 8007b26:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b2a:	e7f1      	b.n	8007b10 <__ieee754_log10f+0x1c>
 8007b2c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007b30:	bfbf      	itttt	lt
 8007b32:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8007b94 <__ieee754_log10f+0xa0>
 8007b36:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007b3a:	f06f 0118 	mvnlt.w	r1, #24
 8007b3e:	ee17 2a90 	vmovlt	r2, s15
 8007b42:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007b46:	bfa8      	it	ge
 8007b48:	2100      	movge	r1, #0
 8007b4a:	3b7f      	subs	r3, #127	; 0x7f
 8007b4c:	440b      	add	r3, r1
 8007b4e:	0fd9      	lsrs	r1, r3, #31
 8007b50:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007b54:	ee07 3a90 	vmov	s15, r3
 8007b58:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007b5c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8007b60:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007b64:	ee00 3a10 	vmov	s0, r3
 8007b68:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007b6c:	f7ff fd88 	bl	8007680 <logf>
 8007b70:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007b98 <__ieee754_log10f+0xa4>
 8007b74:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007b78:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007b9c <__ieee754_log10f+0xa8>
 8007b7c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007b80:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007ba0 <__ieee754_log10f+0xac>
 8007b84:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007b88:	e7c2      	b.n	8007b10 <__ieee754_log10f+0x1c>
 8007b8a:	bf00      	nop
 8007b8c:	cc000000 	.word	0xcc000000
 8007b90:	00000000 	.word	0x00000000
 8007b94:	4c000000 	.word	0x4c000000
 8007b98:	3ede5bd9 	.word	0x3ede5bd9
 8007b9c:	355427db 	.word	0x355427db
 8007ba0:	3e9a2080 	.word	0x3e9a2080

08007ba4 <__ieee754_rem_pio2f>:
 8007ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ba6:	ee10 6a10 	vmov	r6, s0
 8007baa:	4b8e      	ldr	r3, [pc, #568]	; (8007de4 <__ieee754_rem_pio2f+0x240>)
 8007bac:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007bb0:	429d      	cmp	r5, r3
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	eef0 7a40 	vmov.f32	s15, s0
 8007bb8:	4604      	mov	r4, r0
 8007bba:	dc05      	bgt.n	8007bc8 <__ieee754_rem_pio2f+0x24>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	ed80 0a00 	vstr	s0, [r0]
 8007bc2:	6043      	str	r3, [r0, #4]
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	e01a      	b.n	8007bfe <__ieee754_rem_pio2f+0x5a>
 8007bc8:	4b87      	ldr	r3, [pc, #540]	; (8007de8 <__ieee754_rem_pio2f+0x244>)
 8007bca:	429d      	cmp	r5, r3
 8007bcc:	dc46      	bgt.n	8007c5c <__ieee754_rem_pio2f+0xb8>
 8007bce:	2e00      	cmp	r6, #0
 8007bd0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007dec <__ieee754_rem_pio2f+0x248>
 8007bd4:	4b86      	ldr	r3, [pc, #536]	; (8007df0 <__ieee754_rem_pio2f+0x24c>)
 8007bd6:	f025 050f 	bic.w	r5, r5, #15
 8007bda:	dd1f      	ble.n	8007c1c <__ieee754_rem_pio2f+0x78>
 8007bdc:	429d      	cmp	r5, r3
 8007bde:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007be2:	d00e      	beq.n	8007c02 <__ieee754_rem_pio2f+0x5e>
 8007be4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007df4 <__ieee754_rem_pio2f+0x250>
 8007be8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007bec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007bf0:	ed80 0a00 	vstr	s0, [r0]
 8007bf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	edc4 7a01 	vstr	s15, [r4, #4]
 8007bfe:	b007      	add	sp, #28
 8007c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c02:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007df8 <__ieee754_rem_pio2f+0x254>
 8007c06:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007dfc <__ieee754_rem_pio2f+0x258>
 8007c0a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007c0e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007c12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c16:	edc0 6a00 	vstr	s13, [r0]
 8007c1a:	e7eb      	b.n	8007bf4 <__ieee754_rem_pio2f+0x50>
 8007c1c:	429d      	cmp	r5, r3
 8007c1e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007c22:	d00e      	beq.n	8007c42 <__ieee754_rem_pio2f+0x9e>
 8007c24:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007df4 <__ieee754_rem_pio2f+0x250>
 8007c28:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007c2c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007c30:	ed80 0a00 	vstr	s0, [r0]
 8007c34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c3c:	edc4 7a01 	vstr	s15, [r4, #4]
 8007c40:	e7dd      	b.n	8007bfe <__ieee754_rem_pio2f+0x5a>
 8007c42:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007df8 <__ieee754_rem_pio2f+0x254>
 8007c46:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007dfc <__ieee754_rem_pio2f+0x258>
 8007c4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007c4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007c52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c56:	edc0 6a00 	vstr	s13, [r0]
 8007c5a:	e7eb      	b.n	8007c34 <__ieee754_rem_pio2f+0x90>
 8007c5c:	4b68      	ldr	r3, [pc, #416]	; (8007e00 <__ieee754_rem_pio2f+0x25c>)
 8007c5e:	429d      	cmp	r5, r3
 8007c60:	dc72      	bgt.n	8007d48 <__ieee754_rem_pio2f+0x1a4>
 8007c62:	f7ff fd06 	bl	8007672 <fabsf>
 8007c66:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007e04 <__ieee754_rem_pio2f+0x260>
 8007c6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007c6e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007c72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c7a:	ee17 0a90 	vmov	r0, s15
 8007c7e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007dec <__ieee754_rem_pio2f+0x248>
 8007c82:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007c86:	281f      	cmp	r0, #31
 8007c88:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007df4 <__ieee754_rem_pio2f+0x250>
 8007c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c90:	eeb1 6a47 	vneg.f32	s12, s14
 8007c94:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007c98:	ee16 2a90 	vmov	r2, s13
 8007c9c:	dc1c      	bgt.n	8007cd8 <__ieee754_rem_pio2f+0x134>
 8007c9e:	495a      	ldr	r1, [pc, #360]	; (8007e08 <__ieee754_rem_pio2f+0x264>)
 8007ca0:	1e47      	subs	r7, r0, #1
 8007ca2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007ca6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007caa:	428b      	cmp	r3, r1
 8007cac:	d014      	beq.n	8007cd8 <__ieee754_rem_pio2f+0x134>
 8007cae:	6022      	str	r2, [r4, #0]
 8007cb0:	ed94 7a00 	vldr	s14, [r4]
 8007cb4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007cb8:	2e00      	cmp	r6, #0
 8007cba:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007cbe:	ed84 0a01 	vstr	s0, [r4, #4]
 8007cc2:	da9c      	bge.n	8007bfe <__ieee754_rem_pio2f+0x5a>
 8007cc4:	eeb1 7a47 	vneg.f32	s14, s14
 8007cc8:	eeb1 0a40 	vneg.f32	s0, s0
 8007ccc:	ed84 7a00 	vstr	s14, [r4]
 8007cd0:	ed84 0a01 	vstr	s0, [r4, #4]
 8007cd4:	4240      	negs	r0, r0
 8007cd6:	e792      	b.n	8007bfe <__ieee754_rem_pio2f+0x5a>
 8007cd8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007cdc:	15eb      	asrs	r3, r5, #23
 8007cde:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007ce2:	2d08      	cmp	r5, #8
 8007ce4:	dde3      	ble.n	8007cae <__ieee754_rem_pio2f+0x10a>
 8007ce6:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007df8 <__ieee754_rem_pio2f+0x254>
 8007cea:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007dfc <__ieee754_rem_pio2f+0x258>
 8007cee:	eef0 6a40 	vmov.f32	s13, s0
 8007cf2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007cf6:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007cfa:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007cfe:	eef0 7a40 	vmov.f32	s15, s0
 8007d02:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007d06:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007d0a:	ee15 2a90 	vmov	r2, s11
 8007d0e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007d12:	1a5b      	subs	r3, r3, r1
 8007d14:	2b19      	cmp	r3, #25
 8007d16:	dc04      	bgt.n	8007d22 <__ieee754_rem_pio2f+0x17e>
 8007d18:	edc4 5a00 	vstr	s11, [r4]
 8007d1c:	eeb0 0a66 	vmov.f32	s0, s13
 8007d20:	e7c6      	b.n	8007cb0 <__ieee754_rem_pio2f+0x10c>
 8007d22:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007e0c <__ieee754_rem_pio2f+0x268>
 8007d26:	eeb0 0a66 	vmov.f32	s0, s13
 8007d2a:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007d2e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007d32:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007e10 <__ieee754_rem_pio2f+0x26c>
 8007d36:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007d3a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007d3e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007d42:	ed84 7a00 	vstr	s14, [r4]
 8007d46:	e7b3      	b.n	8007cb0 <__ieee754_rem_pio2f+0x10c>
 8007d48:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007d4c:	db06      	blt.n	8007d5c <__ieee754_rem_pio2f+0x1b8>
 8007d4e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007d52:	edc0 7a01 	vstr	s15, [r0, #4]
 8007d56:	edc0 7a00 	vstr	s15, [r0]
 8007d5a:	e733      	b.n	8007bc4 <__ieee754_rem_pio2f+0x20>
 8007d5c:	15ea      	asrs	r2, r5, #23
 8007d5e:	3a86      	subs	r2, #134	; 0x86
 8007d60:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007d64:	ee07 3a90 	vmov	s15, r3
 8007d68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d6c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007e14 <__ieee754_rem_pio2f+0x270>
 8007d70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007d74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d78:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007d7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007d88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d8c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007d90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d9c:	edcd 7a05 	vstr	s15, [sp, #20]
 8007da0:	d11e      	bne.n	8007de0 <__ieee754_rem_pio2f+0x23c>
 8007da2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007daa:	bf14      	ite	ne
 8007dac:	2302      	movne	r3, #2
 8007dae:	2301      	moveq	r3, #1
 8007db0:	4919      	ldr	r1, [pc, #100]	; (8007e18 <__ieee754_rem_pio2f+0x274>)
 8007db2:	9101      	str	r1, [sp, #4]
 8007db4:	2102      	movs	r1, #2
 8007db6:	9100      	str	r1, [sp, #0]
 8007db8:	a803      	add	r0, sp, #12
 8007dba:	4621      	mov	r1, r4
 8007dbc:	f000 f82e 	bl	8007e1c <__kernel_rem_pio2f>
 8007dc0:	2e00      	cmp	r6, #0
 8007dc2:	f6bf af1c 	bge.w	8007bfe <__ieee754_rem_pio2f+0x5a>
 8007dc6:	edd4 7a00 	vldr	s15, [r4]
 8007dca:	eef1 7a67 	vneg.f32	s15, s15
 8007dce:	edc4 7a00 	vstr	s15, [r4]
 8007dd2:	edd4 7a01 	vldr	s15, [r4, #4]
 8007dd6:	eef1 7a67 	vneg.f32	s15, s15
 8007dda:	edc4 7a01 	vstr	s15, [r4, #4]
 8007dde:	e779      	b.n	8007cd4 <__ieee754_rem_pio2f+0x130>
 8007de0:	2303      	movs	r3, #3
 8007de2:	e7e5      	b.n	8007db0 <__ieee754_rem_pio2f+0x20c>
 8007de4:	3f490fd8 	.word	0x3f490fd8
 8007de8:	4016cbe3 	.word	0x4016cbe3
 8007dec:	3fc90f80 	.word	0x3fc90f80
 8007df0:	3fc90fd0 	.word	0x3fc90fd0
 8007df4:	37354443 	.word	0x37354443
 8007df8:	37354400 	.word	0x37354400
 8007dfc:	2e85a308 	.word	0x2e85a308
 8007e00:	43490f80 	.word	0x43490f80
 8007e04:	3f22f984 	.word	0x3f22f984
 8007e08:	080089fc 	.word	0x080089fc
 8007e0c:	2e85a300 	.word	0x2e85a300
 8007e10:	248d3132 	.word	0x248d3132
 8007e14:	43800000 	.word	0x43800000
 8007e18:	08008a7c 	.word	0x08008a7c

08007e1c <__kernel_rem_pio2f>:
 8007e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e20:	ed2d 8b04 	vpush	{d8-d9}
 8007e24:	b0d9      	sub	sp, #356	; 0x164
 8007e26:	4688      	mov	r8, r1
 8007e28:	9002      	str	r0, [sp, #8]
 8007e2a:	49bb      	ldr	r1, [pc, #748]	; (8008118 <__kernel_rem_pio2f+0x2fc>)
 8007e2c:	9866      	ldr	r0, [sp, #408]	; 0x198
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8007e34:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8007e38:	1e59      	subs	r1, r3, #1
 8007e3a:	1d13      	adds	r3, r2, #4
 8007e3c:	db27      	blt.n	8007e8e <__kernel_rem_pio2f+0x72>
 8007e3e:	f1b2 0b03 	subs.w	fp, r2, #3
 8007e42:	bf48      	it	mi
 8007e44:	f102 0b04 	addmi.w	fp, r2, #4
 8007e48:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8007e4c:	1c45      	adds	r5, r0, #1
 8007e4e:	00ec      	lsls	r4, r5, #3
 8007e50:	1a47      	subs	r7, r0, r1
 8007e52:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008128 <__kernel_rem_pio2f+0x30c>
 8007e56:	9403      	str	r4, [sp, #12]
 8007e58:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8007e5c:	eb0a 0c01 	add.w	ip, sl, r1
 8007e60:	ae1c      	add	r6, sp, #112	; 0x70
 8007e62:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8007e66:	2400      	movs	r4, #0
 8007e68:	4564      	cmp	r4, ip
 8007e6a:	dd12      	ble.n	8007e92 <__kernel_rem_pio2f+0x76>
 8007e6c:	9b01      	ldr	r3, [sp, #4]
 8007e6e:	ac1c      	add	r4, sp, #112	; 0x70
 8007e70:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007e74:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8007e78:	f04f 0c00 	mov.w	ip, #0
 8007e7c:	45d4      	cmp	ip, sl
 8007e7e:	dc27      	bgt.n	8007ed0 <__kernel_rem_pio2f+0xb4>
 8007e80:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007e84:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008128 <__kernel_rem_pio2f+0x30c>
 8007e88:	4627      	mov	r7, r4
 8007e8a:	2600      	movs	r6, #0
 8007e8c:	e016      	b.n	8007ebc <__kernel_rem_pio2f+0xa0>
 8007e8e:	2000      	movs	r0, #0
 8007e90:	e7dc      	b.n	8007e4c <__kernel_rem_pio2f+0x30>
 8007e92:	42e7      	cmn	r7, r4
 8007e94:	bf5d      	ittte	pl
 8007e96:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8007e9a:	ee07 3a90 	vmovpl	s15, r3
 8007e9e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007ea2:	eef0 7a47 	vmovmi.f32	s15, s14
 8007ea6:	ece6 7a01 	vstmia	r6!, {s15}
 8007eaa:	3401      	adds	r4, #1
 8007eac:	e7dc      	b.n	8007e68 <__kernel_rem_pio2f+0x4c>
 8007eae:	ecf9 6a01 	vldmia	r9!, {s13}
 8007eb2:	ed97 7a00 	vldr	s14, [r7]
 8007eb6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007eba:	3601      	adds	r6, #1
 8007ebc:	428e      	cmp	r6, r1
 8007ebe:	f1a7 0704 	sub.w	r7, r7, #4
 8007ec2:	ddf4      	ble.n	8007eae <__kernel_rem_pio2f+0x92>
 8007ec4:	eceb 7a01 	vstmia	fp!, {s15}
 8007ec8:	f10c 0c01 	add.w	ip, ip, #1
 8007ecc:	3404      	adds	r4, #4
 8007ece:	e7d5      	b.n	8007e7c <__kernel_rem_pio2f+0x60>
 8007ed0:	ab08      	add	r3, sp, #32
 8007ed2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007ed6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008124 <__kernel_rem_pio2f+0x308>
 8007eda:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008120 <__kernel_rem_pio2f+0x304>
 8007ede:	9304      	str	r3, [sp, #16]
 8007ee0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8007ee4:	4656      	mov	r6, sl
 8007ee6:	00b3      	lsls	r3, r6, #2
 8007ee8:	9305      	str	r3, [sp, #20]
 8007eea:	ab58      	add	r3, sp, #352	; 0x160
 8007eec:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8007ef0:	ac08      	add	r4, sp, #32
 8007ef2:	ab44      	add	r3, sp, #272	; 0x110
 8007ef4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8007ef8:	46a4      	mov	ip, r4
 8007efa:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8007efe:	4637      	mov	r7, r6
 8007f00:	2f00      	cmp	r7, #0
 8007f02:	f1a0 0004 	sub.w	r0, r0, #4
 8007f06:	dc4f      	bgt.n	8007fa8 <__kernel_rem_pio2f+0x18c>
 8007f08:	4628      	mov	r0, r5
 8007f0a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007f0e:	f000 fb23 	bl	8008558 <scalbnf>
 8007f12:	eeb0 8a40 	vmov.f32	s16, s0
 8007f16:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007f1a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007f1e:	f000 fad3 	bl	80084c8 <floorf>
 8007f22:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007f26:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007f2a:	2d00      	cmp	r5, #0
 8007f2c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007f30:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007f34:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007f38:	ee17 9a90 	vmov	r9, s15
 8007f3c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007f40:	dd44      	ble.n	8007fcc <__kernel_rem_pio2f+0x1b0>
 8007f42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8007f46:	ab08      	add	r3, sp, #32
 8007f48:	f1c5 0e08 	rsb	lr, r5, #8
 8007f4c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8007f50:	fa47 f00e 	asr.w	r0, r7, lr
 8007f54:	4481      	add	r9, r0
 8007f56:	fa00 f00e 	lsl.w	r0, r0, lr
 8007f5a:	1a3f      	subs	r7, r7, r0
 8007f5c:	f1c5 0007 	rsb	r0, r5, #7
 8007f60:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8007f64:	4107      	asrs	r7, r0
 8007f66:	2f00      	cmp	r7, #0
 8007f68:	dd3f      	ble.n	8007fea <__kernel_rem_pio2f+0x1ce>
 8007f6a:	f04f 0e00 	mov.w	lr, #0
 8007f6e:	f109 0901 	add.w	r9, r9, #1
 8007f72:	4673      	mov	r3, lr
 8007f74:	4576      	cmp	r6, lr
 8007f76:	dc6b      	bgt.n	8008050 <__kernel_rem_pio2f+0x234>
 8007f78:	2d00      	cmp	r5, #0
 8007f7a:	dd04      	ble.n	8007f86 <__kernel_rem_pio2f+0x16a>
 8007f7c:	2d01      	cmp	r5, #1
 8007f7e:	d078      	beq.n	8008072 <__kernel_rem_pio2f+0x256>
 8007f80:	2d02      	cmp	r5, #2
 8007f82:	f000 8081 	beq.w	8008088 <__kernel_rem_pio2f+0x26c>
 8007f86:	2f02      	cmp	r7, #2
 8007f88:	d12f      	bne.n	8007fea <__kernel_rem_pio2f+0x1ce>
 8007f8a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007f8e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007f92:	b353      	cbz	r3, 8007fea <__kernel_rem_pio2f+0x1ce>
 8007f94:	4628      	mov	r0, r5
 8007f96:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007f9a:	f000 fadd 	bl	8008558 <scalbnf>
 8007f9e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007fa2:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007fa6:	e020      	b.n	8007fea <__kernel_rem_pio2f+0x1ce>
 8007fa8:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007fac:	3f01      	subs	r7, #1
 8007fae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fb6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007fba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007fbe:	ecac 0a01 	vstmia	ip!, {s0}
 8007fc2:	ed90 0a00 	vldr	s0, [r0]
 8007fc6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007fca:	e799      	b.n	8007f00 <__kernel_rem_pio2f+0xe4>
 8007fcc:	d105      	bne.n	8007fda <__kernel_rem_pio2f+0x1be>
 8007fce:	1e70      	subs	r0, r6, #1
 8007fd0:	ab08      	add	r3, sp, #32
 8007fd2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8007fd6:	11ff      	asrs	r7, r7, #7
 8007fd8:	e7c5      	b.n	8007f66 <__kernel_rem_pio2f+0x14a>
 8007fda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007fde:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe6:	da31      	bge.n	800804c <__kernel_rem_pio2f+0x230>
 8007fe8:	2700      	movs	r7, #0
 8007fea:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff2:	f040 809b 	bne.w	800812c <__kernel_rem_pio2f+0x310>
 8007ff6:	1e74      	subs	r4, r6, #1
 8007ff8:	46a4      	mov	ip, r4
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	45d4      	cmp	ip, sl
 8007ffe:	da4a      	bge.n	8008096 <__kernel_rem_pio2f+0x27a>
 8008000:	2800      	cmp	r0, #0
 8008002:	d07a      	beq.n	80080fa <__kernel_rem_pio2f+0x2de>
 8008004:	ab08      	add	r3, sp, #32
 8008006:	3d08      	subs	r5, #8
 8008008:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 8081 	beq.w	8008114 <__kernel_rem_pio2f+0x2f8>
 8008012:	4628      	mov	r0, r5
 8008014:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008018:	00a5      	lsls	r5, r4, #2
 800801a:	f000 fa9d 	bl	8008558 <scalbnf>
 800801e:	aa44      	add	r2, sp, #272	; 0x110
 8008020:	1d2b      	adds	r3, r5, #4
 8008022:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008124 <__kernel_rem_pio2f+0x308>
 8008026:	18d1      	adds	r1, r2, r3
 8008028:	4622      	mov	r2, r4
 800802a:	2a00      	cmp	r2, #0
 800802c:	f280 80ae 	bge.w	800818c <__kernel_rem_pio2f+0x370>
 8008030:	4622      	mov	r2, r4
 8008032:	2a00      	cmp	r2, #0
 8008034:	f2c0 80cc 	blt.w	80081d0 <__kernel_rem_pio2f+0x3b4>
 8008038:	a944      	add	r1, sp, #272	; 0x110
 800803a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800803e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800811c <__kernel_rem_pio2f+0x300>
 8008042:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008128 <__kernel_rem_pio2f+0x30c>
 8008046:	2000      	movs	r0, #0
 8008048:	1aa1      	subs	r1, r4, r2
 800804a:	e0b6      	b.n	80081ba <__kernel_rem_pio2f+0x39e>
 800804c:	2702      	movs	r7, #2
 800804e:	e78c      	b.n	8007f6a <__kernel_rem_pio2f+0x14e>
 8008050:	6820      	ldr	r0, [r4, #0]
 8008052:	b94b      	cbnz	r3, 8008068 <__kernel_rem_pio2f+0x24c>
 8008054:	b118      	cbz	r0, 800805e <__kernel_rem_pio2f+0x242>
 8008056:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800805a:	6020      	str	r0, [r4, #0]
 800805c:	2001      	movs	r0, #1
 800805e:	f10e 0e01 	add.w	lr, lr, #1
 8008062:	3404      	adds	r4, #4
 8008064:	4603      	mov	r3, r0
 8008066:	e785      	b.n	8007f74 <__kernel_rem_pio2f+0x158>
 8008068:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800806c:	6020      	str	r0, [r4, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	e7f5      	b.n	800805e <__kernel_rem_pio2f+0x242>
 8008072:	1e74      	subs	r4, r6, #1
 8008074:	a808      	add	r0, sp, #32
 8008076:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800807a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800807e:	f10d 0c20 	add.w	ip, sp, #32
 8008082:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008086:	e77e      	b.n	8007f86 <__kernel_rem_pio2f+0x16a>
 8008088:	1e74      	subs	r4, r6, #1
 800808a:	a808      	add	r0, sp, #32
 800808c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008090:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008094:	e7f3      	b.n	800807e <__kernel_rem_pio2f+0x262>
 8008096:	ab08      	add	r3, sp, #32
 8008098:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800809c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80080a0:	4318      	orrs	r0, r3
 80080a2:	e7ab      	b.n	8007ffc <__kernel_rem_pio2f+0x1e0>
 80080a4:	f10c 0c01 	add.w	ip, ip, #1
 80080a8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80080ac:	2c00      	cmp	r4, #0
 80080ae:	d0f9      	beq.n	80080a4 <__kernel_rem_pio2f+0x288>
 80080b0:	9b05      	ldr	r3, [sp, #20]
 80080b2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80080b6:	eb0d 0003 	add.w	r0, sp, r3
 80080ba:	9b01      	ldr	r3, [sp, #4]
 80080bc:	18f4      	adds	r4, r6, r3
 80080be:	ab1c      	add	r3, sp, #112	; 0x70
 80080c0:	1c77      	adds	r7, r6, #1
 80080c2:	384c      	subs	r0, #76	; 0x4c
 80080c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080c8:	4466      	add	r6, ip
 80080ca:	42be      	cmp	r6, r7
 80080cc:	f6ff af0b 	blt.w	8007ee6 <__kernel_rem_pio2f+0xca>
 80080d0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80080d4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080e0:	f04f 0c00 	mov.w	ip, #0
 80080e4:	ece4 7a01 	vstmia	r4!, {s15}
 80080e8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008128 <__kernel_rem_pio2f+0x30c>
 80080ec:	46a1      	mov	r9, r4
 80080ee:	458c      	cmp	ip, r1
 80080f0:	dd07      	ble.n	8008102 <__kernel_rem_pio2f+0x2e6>
 80080f2:	ece0 7a01 	vstmia	r0!, {s15}
 80080f6:	3701      	adds	r7, #1
 80080f8:	e7e7      	b.n	80080ca <__kernel_rem_pio2f+0x2ae>
 80080fa:	9804      	ldr	r0, [sp, #16]
 80080fc:	f04f 0c01 	mov.w	ip, #1
 8008100:	e7d2      	b.n	80080a8 <__kernel_rem_pio2f+0x28c>
 8008102:	ecfe 6a01 	vldmia	lr!, {s13}
 8008106:	ed39 7a01 	vldmdb	r9!, {s14}
 800810a:	f10c 0c01 	add.w	ip, ip, #1
 800810e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008112:	e7ec      	b.n	80080ee <__kernel_rem_pio2f+0x2d2>
 8008114:	3c01      	subs	r4, #1
 8008116:	e775      	b.n	8008004 <__kernel_rem_pio2f+0x1e8>
 8008118:	08008dc0 	.word	0x08008dc0
 800811c:	08008d94 	.word	0x08008d94
 8008120:	43800000 	.word	0x43800000
 8008124:	3b800000 	.word	0x3b800000
 8008128:	00000000 	.word	0x00000000
 800812c:	9b03      	ldr	r3, [sp, #12]
 800812e:	eeb0 0a48 	vmov.f32	s0, s16
 8008132:	1a98      	subs	r0, r3, r2
 8008134:	f000 fa10 	bl	8008558 <scalbnf>
 8008138:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008120 <__kernel_rem_pio2f+0x304>
 800813c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008144:	db19      	blt.n	800817a <__kernel_rem_pio2f+0x35e>
 8008146:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008124 <__kernel_rem_pio2f+0x308>
 800814a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800814e:	aa08      	add	r2, sp, #32
 8008150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008154:	1c74      	adds	r4, r6, #1
 8008156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800815a:	3508      	adds	r5, #8
 800815c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008164:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008168:	ee10 3a10 	vmov	r3, s0
 800816c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008170:	ee17 3a90 	vmov	r3, s15
 8008174:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008178:	e74b      	b.n	8008012 <__kernel_rem_pio2f+0x1f6>
 800817a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800817e:	aa08      	add	r2, sp, #32
 8008180:	ee10 3a10 	vmov	r3, s0
 8008184:	4634      	mov	r4, r6
 8008186:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800818a:	e742      	b.n	8008012 <__kernel_rem_pio2f+0x1f6>
 800818c:	a808      	add	r0, sp, #32
 800818e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008192:	9001      	str	r0, [sp, #4]
 8008194:	ee07 0a90 	vmov	s15, r0
 8008198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800819c:	3a01      	subs	r2, #1
 800819e:	ee67 7a80 	vmul.f32	s15, s15, s0
 80081a2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80081a6:	ed61 7a01 	vstmdb	r1!, {s15}
 80081aa:	e73e      	b.n	800802a <__kernel_rem_pio2f+0x20e>
 80081ac:	ecfc 6a01 	vldmia	ip!, {s13}
 80081b0:	ecb6 7a01 	vldmia	r6!, {s14}
 80081b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80081b8:	3001      	adds	r0, #1
 80081ba:	4550      	cmp	r0, sl
 80081bc:	dc01      	bgt.n	80081c2 <__kernel_rem_pio2f+0x3a6>
 80081be:	4288      	cmp	r0, r1
 80081c0:	ddf4      	ble.n	80081ac <__kernel_rem_pio2f+0x390>
 80081c2:	a858      	add	r0, sp, #352	; 0x160
 80081c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081c8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80081cc:	3a01      	subs	r2, #1
 80081ce:	e730      	b.n	8008032 <__kernel_rem_pio2f+0x216>
 80081d0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80081d2:	2a02      	cmp	r2, #2
 80081d4:	dc09      	bgt.n	80081ea <__kernel_rem_pio2f+0x3ce>
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	dc2a      	bgt.n	8008230 <__kernel_rem_pio2f+0x414>
 80081da:	d043      	beq.n	8008264 <__kernel_rem_pio2f+0x448>
 80081dc:	f009 0007 	and.w	r0, r9, #7
 80081e0:	b059      	add	sp, #356	; 0x164
 80081e2:	ecbd 8b04 	vpop	{d8-d9}
 80081e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ea:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d1f5      	bne.n	80081dc <__kernel_rem_pio2f+0x3c0>
 80081f0:	ab30      	add	r3, sp, #192	; 0xc0
 80081f2:	442b      	add	r3, r5
 80081f4:	461a      	mov	r2, r3
 80081f6:	4619      	mov	r1, r3
 80081f8:	4620      	mov	r0, r4
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f1a1 0104 	sub.w	r1, r1, #4
 8008200:	dc51      	bgt.n	80082a6 <__kernel_rem_pio2f+0x48a>
 8008202:	4621      	mov	r1, r4
 8008204:	2901      	cmp	r1, #1
 8008206:	f1a2 0204 	sub.w	r2, r2, #4
 800820a:	dc5c      	bgt.n	80082c6 <__kernel_rem_pio2f+0x4aa>
 800820c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008128 <__kernel_rem_pio2f+0x30c>
 8008210:	3304      	adds	r3, #4
 8008212:	2c01      	cmp	r4, #1
 8008214:	dc67      	bgt.n	80082e6 <__kernel_rem_pio2f+0x4ca>
 8008216:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800821a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800821e:	2f00      	cmp	r7, #0
 8008220:	d167      	bne.n	80082f2 <__kernel_rem_pio2f+0x4d6>
 8008222:	edc8 6a00 	vstr	s13, [r8]
 8008226:	ed88 7a01 	vstr	s14, [r8, #4]
 800822a:	edc8 7a02 	vstr	s15, [r8, #8]
 800822e:	e7d5      	b.n	80081dc <__kernel_rem_pio2f+0x3c0>
 8008230:	aa30      	add	r2, sp, #192	; 0xc0
 8008232:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008128 <__kernel_rem_pio2f+0x30c>
 8008236:	4413      	add	r3, r2
 8008238:	4622      	mov	r2, r4
 800823a:	2a00      	cmp	r2, #0
 800823c:	da24      	bge.n	8008288 <__kernel_rem_pio2f+0x46c>
 800823e:	b34f      	cbz	r7, 8008294 <__kernel_rem_pio2f+0x478>
 8008240:	eef1 7a47 	vneg.f32	s15, s14
 8008244:	edc8 7a00 	vstr	s15, [r8]
 8008248:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800824c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008250:	aa31      	add	r2, sp, #196	; 0xc4
 8008252:	2301      	movs	r3, #1
 8008254:	429c      	cmp	r4, r3
 8008256:	da20      	bge.n	800829a <__kernel_rem_pio2f+0x47e>
 8008258:	b10f      	cbz	r7, 800825e <__kernel_rem_pio2f+0x442>
 800825a:	eef1 7a67 	vneg.f32	s15, s15
 800825e:	edc8 7a01 	vstr	s15, [r8, #4]
 8008262:	e7bb      	b.n	80081dc <__kernel_rem_pio2f+0x3c0>
 8008264:	aa30      	add	r2, sp, #192	; 0xc0
 8008266:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008128 <__kernel_rem_pio2f+0x30c>
 800826a:	4413      	add	r3, r2
 800826c:	2c00      	cmp	r4, #0
 800826e:	da05      	bge.n	800827c <__kernel_rem_pio2f+0x460>
 8008270:	b10f      	cbz	r7, 8008276 <__kernel_rem_pio2f+0x45a>
 8008272:	eef1 7a67 	vneg.f32	s15, s15
 8008276:	edc8 7a00 	vstr	s15, [r8]
 800827a:	e7af      	b.n	80081dc <__kernel_rem_pio2f+0x3c0>
 800827c:	ed33 7a01 	vldmdb	r3!, {s14}
 8008280:	3c01      	subs	r4, #1
 8008282:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008286:	e7f1      	b.n	800826c <__kernel_rem_pio2f+0x450>
 8008288:	ed73 7a01 	vldmdb	r3!, {s15}
 800828c:	3a01      	subs	r2, #1
 800828e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008292:	e7d2      	b.n	800823a <__kernel_rem_pio2f+0x41e>
 8008294:	eef0 7a47 	vmov.f32	s15, s14
 8008298:	e7d4      	b.n	8008244 <__kernel_rem_pio2f+0x428>
 800829a:	ecb2 7a01 	vldmia	r2!, {s14}
 800829e:	3301      	adds	r3, #1
 80082a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082a4:	e7d6      	b.n	8008254 <__kernel_rem_pio2f+0x438>
 80082a6:	edd1 7a00 	vldr	s15, [r1]
 80082aa:	edd1 6a01 	vldr	s13, [r1, #4]
 80082ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80082b2:	3801      	subs	r0, #1
 80082b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082b8:	ed81 7a00 	vstr	s14, [r1]
 80082bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c0:	edc1 7a01 	vstr	s15, [r1, #4]
 80082c4:	e799      	b.n	80081fa <__kernel_rem_pio2f+0x3de>
 80082c6:	edd2 7a00 	vldr	s15, [r2]
 80082ca:	edd2 6a01 	vldr	s13, [r2, #4]
 80082ce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80082d2:	3901      	subs	r1, #1
 80082d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082d8:	ed82 7a00 	vstr	s14, [r2]
 80082dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e0:	edc2 7a01 	vstr	s15, [r2, #4]
 80082e4:	e78e      	b.n	8008204 <__kernel_rem_pio2f+0x3e8>
 80082e6:	ed33 7a01 	vldmdb	r3!, {s14}
 80082ea:	3c01      	subs	r4, #1
 80082ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082f0:	e78f      	b.n	8008212 <__kernel_rem_pio2f+0x3f6>
 80082f2:	eef1 6a66 	vneg.f32	s13, s13
 80082f6:	eeb1 7a47 	vneg.f32	s14, s14
 80082fa:	edc8 6a00 	vstr	s13, [r8]
 80082fe:	ed88 7a01 	vstr	s14, [r8, #4]
 8008302:	eef1 7a67 	vneg.f32	s15, s15
 8008306:	e790      	b.n	800822a <__kernel_rem_pio2f+0x40e>

08008308 <__kernel_tanf>:
 8008308:	b508      	push	{r3, lr}
 800830a:	ee10 3a10 	vmov	r3, s0
 800830e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008312:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8008316:	eef0 7a40 	vmov.f32	s15, s0
 800831a:	da17      	bge.n	800834c <__kernel_tanf+0x44>
 800831c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8008320:	ee17 1a10 	vmov	r1, s14
 8008324:	bb41      	cbnz	r1, 8008378 <__kernel_tanf+0x70>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	4313      	orrs	r3, r2
 800832a:	d108      	bne.n	800833e <__kernel_tanf+0x36>
 800832c:	f7ff f9a1 	bl	8007672 <fabsf>
 8008330:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008334:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008338:	eeb0 0a67 	vmov.f32	s0, s15
 800833c:	bd08      	pop	{r3, pc}
 800833e:	2801      	cmp	r0, #1
 8008340:	d0fa      	beq.n	8008338 <__kernel_tanf+0x30>
 8008342:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008346:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800834a:	e7f5      	b.n	8008338 <__kernel_tanf+0x30>
 800834c:	494c      	ldr	r1, [pc, #304]	; (8008480 <__kernel_tanf+0x178>)
 800834e:	428a      	cmp	r2, r1
 8008350:	db12      	blt.n	8008378 <__kernel_tanf+0x70>
 8008352:	2b00      	cmp	r3, #0
 8008354:	bfb8      	it	lt
 8008356:	eef1 7a40 	vneglt.f32	s15, s0
 800835a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8008484 <__kernel_tanf+0x17c>
 800835e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008362:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8008488 <__kernel_tanf+0x180>
 8008366:	bfb8      	it	lt
 8008368:	eef1 0a60 	vneglt.f32	s1, s1
 800836c:	ee70 0a60 	vsub.f32	s1, s0, s1
 8008370:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8008374:	eddf 0a45 	vldr	s1, [pc, #276]	; 800848c <__kernel_tanf+0x184>
 8008378:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008490 <__kernel_tanf+0x188>
 800837c:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8008494 <__kernel_tanf+0x18c>
 8008380:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8008498 <__kernel_tanf+0x190>
 8008384:	493e      	ldr	r1, [pc, #248]	; (8008480 <__kernel_tanf+0x178>)
 8008386:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800838a:	428a      	cmp	r2, r1
 800838c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008390:	eea7 6a25 	vfma.f32	s12, s14, s11
 8008394:	eddf 5a41 	vldr	s11, [pc, #260]	; 800849c <__kernel_tanf+0x194>
 8008398:	eee6 5a07 	vfma.f32	s11, s12, s14
 800839c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80084a0 <__kernel_tanf+0x198>
 80083a0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80083a4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80084a4 <__kernel_tanf+0x19c>
 80083a8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80083ac:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80084a8 <__kernel_tanf+0x1a0>
 80083b0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80083b4:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80084ac <__kernel_tanf+0x1a4>
 80083b8:	eee7 5a05 	vfma.f32	s11, s14, s10
 80083bc:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80084b0 <__kernel_tanf+0x1a8>
 80083c0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80083c4:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80084b4 <__kernel_tanf+0x1ac>
 80083c8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80083cc:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80084b8 <__kernel_tanf+0x1b0>
 80083d0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80083d4:	eddf 5a39 	vldr	s11, [pc, #228]	; 80084bc <__kernel_tanf+0x1b4>
 80083d8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80083dc:	eeb0 7a46 	vmov.f32	s14, s12
 80083e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80083e4:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80083e8:	eeb0 6a60 	vmov.f32	s12, s1
 80083ec:	eea7 6a05 	vfma.f32	s12, s14, s10
 80083f0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80084c0 <__kernel_tanf+0x1b8>
 80083f4:	eee6 0a26 	vfma.f32	s1, s12, s13
 80083f8:	eee5 0a07 	vfma.f32	s1, s10, s14
 80083fc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008400:	db1d      	blt.n	800843e <__kernel_tanf+0x136>
 8008402:	ee06 0a90 	vmov	s13, r0
 8008406:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800840a:	ee27 6a07 	vmul.f32	s12, s14, s14
 800840e:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008412:	179b      	asrs	r3, r3, #30
 8008414:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	f1c3 0301 	rsb	r3, r3, #1
 8008420:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008424:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8008428:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800842c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008430:	ee07 3a90 	vmov	s15, r3
 8008434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008438:	ee67 7a80 	vmul.f32	s15, s15, s0
 800843c:	e77c      	b.n	8008338 <__kernel_tanf+0x30>
 800843e:	2801      	cmp	r0, #1
 8008440:	d01b      	beq.n	800847a <__kernel_tanf+0x172>
 8008442:	4b20      	ldr	r3, [pc, #128]	; (80084c4 <__kernel_tanf+0x1bc>)
 8008444:	ee17 2a10 	vmov	r2, s14
 8008448:	401a      	ands	r2, r3
 800844a:	ee06 2a10 	vmov	s12, r2
 800844e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008452:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008456:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800845a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800845e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008462:	ee16 2a90 	vmov	r2, s13
 8008466:	4013      	ands	r3, r2
 8008468:	ee07 3a90 	vmov	s15, r3
 800846c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008470:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8008474:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008478:	e75e      	b.n	8008338 <__kernel_tanf+0x30>
 800847a:	eef0 7a47 	vmov.f32	s15, s14
 800847e:	e75b      	b.n	8008338 <__kernel_tanf+0x30>
 8008480:	3f2ca140 	.word	0x3f2ca140
 8008484:	3f490fda 	.word	0x3f490fda
 8008488:	33222168 	.word	0x33222168
 800848c:	00000000 	.word	0x00000000
 8008490:	b79bae5f 	.word	0xb79bae5f
 8008494:	38a3f445 	.word	0x38a3f445
 8008498:	37d95384 	.word	0x37d95384
 800849c:	3a1a26c8 	.word	0x3a1a26c8
 80084a0:	3b6b6916 	.word	0x3b6b6916
 80084a4:	3cb327a4 	.word	0x3cb327a4
 80084a8:	3e088889 	.word	0x3e088889
 80084ac:	3895c07a 	.word	0x3895c07a
 80084b0:	398137b9 	.word	0x398137b9
 80084b4:	3abede48 	.word	0x3abede48
 80084b8:	3c11371f 	.word	0x3c11371f
 80084bc:	3d5d0dd1 	.word	0x3d5d0dd1
 80084c0:	3eaaaaab 	.word	0x3eaaaaab
 80084c4:	fffff000 	.word	0xfffff000

080084c8 <floorf>:
 80084c8:	ee10 3a10 	vmov	r3, s0
 80084cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80084d0:	3a7f      	subs	r2, #127	; 0x7f
 80084d2:	2a16      	cmp	r2, #22
 80084d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084d8:	dc2a      	bgt.n	8008530 <floorf+0x68>
 80084da:	2a00      	cmp	r2, #0
 80084dc:	da11      	bge.n	8008502 <floorf+0x3a>
 80084de:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008540 <floorf+0x78>
 80084e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80084e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80084ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ee:	dd05      	ble.n	80084fc <floorf+0x34>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	da23      	bge.n	800853c <floorf+0x74>
 80084f4:	4a13      	ldr	r2, [pc, #76]	; (8008544 <floorf+0x7c>)
 80084f6:	2900      	cmp	r1, #0
 80084f8:	bf18      	it	ne
 80084fa:	4613      	movne	r3, r2
 80084fc:	ee00 3a10 	vmov	s0, r3
 8008500:	4770      	bx	lr
 8008502:	4911      	ldr	r1, [pc, #68]	; (8008548 <floorf+0x80>)
 8008504:	4111      	asrs	r1, r2
 8008506:	420b      	tst	r3, r1
 8008508:	d0fa      	beq.n	8008500 <floorf+0x38>
 800850a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008540 <floorf+0x78>
 800850e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008512:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851a:	ddef      	ble.n	80084fc <floorf+0x34>
 800851c:	2b00      	cmp	r3, #0
 800851e:	bfbe      	ittt	lt
 8008520:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008524:	fa40 f202 	asrlt.w	r2, r0, r2
 8008528:	189b      	addlt	r3, r3, r2
 800852a:	ea23 0301 	bic.w	r3, r3, r1
 800852e:	e7e5      	b.n	80084fc <floorf+0x34>
 8008530:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008534:	d3e4      	bcc.n	8008500 <floorf+0x38>
 8008536:	ee30 0a00 	vadd.f32	s0, s0, s0
 800853a:	4770      	bx	lr
 800853c:	2300      	movs	r3, #0
 800853e:	e7dd      	b.n	80084fc <floorf+0x34>
 8008540:	7149f2ca 	.word	0x7149f2ca
 8008544:	bf800000 	.word	0xbf800000
 8008548:	007fffff 	.word	0x007fffff

0800854c <nanf>:
 800854c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008554 <nanf+0x8>
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	7fc00000 	.word	0x7fc00000

08008558 <scalbnf>:
 8008558:	ee10 3a10 	vmov	r3, s0
 800855c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008560:	d024      	beq.n	80085ac <scalbnf+0x54>
 8008562:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008566:	d302      	bcc.n	800856e <scalbnf+0x16>
 8008568:	ee30 0a00 	vadd.f32	s0, s0, s0
 800856c:	4770      	bx	lr
 800856e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008572:	d121      	bne.n	80085b8 <scalbnf+0x60>
 8008574:	4b29      	ldr	r3, [pc, #164]	; (800861c <scalbnf+0xc4>)
 8008576:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8008620 <scalbnf+0xc8>
 800857a:	4298      	cmp	r0, r3
 800857c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008580:	db15      	blt.n	80085ae <scalbnf+0x56>
 8008582:	ee10 3a10 	vmov	r3, s0
 8008586:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800858a:	3a19      	subs	r2, #25
 800858c:	4402      	add	r2, r0
 800858e:	2afe      	cmp	r2, #254	; 0xfe
 8008590:	dd14      	ble.n	80085bc <scalbnf+0x64>
 8008592:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008624 <scalbnf+0xcc>
 8008596:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008628 <scalbnf+0xd0>
 800859a:	ee10 3a10 	vmov	r3, s0
 800859e:	eeb0 7a67 	vmov.f32	s14, s15
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	fe67 7aa6 	vselge.f32	s15, s15, s13
 80085a8:	ee27 0a27 	vmul.f32	s0, s14, s15
 80085ac:	4770      	bx	lr
 80085ae:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800862c <scalbnf+0xd4>
 80085b2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80085b6:	4770      	bx	lr
 80085b8:	0dd2      	lsrs	r2, r2, #23
 80085ba:	e7e7      	b.n	800858c <scalbnf+0x34>
 80085bc:	2a00      	cmp	r2, #0
 80085be:	dd06      	ble.n	80085ce <scalbnf+0x76>
 80085c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80085c4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80085c8:	ee00 3a10 	vmov	s0, r3
 80085cc:	4770      	bx	lr
 80085ce:	f112 0f16 	cmn.w	r2, #22
 80085d2:	da19      	bge.n	8008608 <scalbnf+0xb0>
 80085d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80085d8:	4298      	cmp	r0, r3
 80085da:	ee10 3a10 	vmov	r3, s0
 80085de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085e2:	dd09      	ble.n	80085f8 <scalbnf+0xa0>
 80085e4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008624 <scalbnf+0xcc>
 80085e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8008628 <scalbnf+0xd0>
 80085ec:	eef0 7a40 	vmov.f32	s15, s0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	fe00 0a07 	vseleq.f32	s0, s0, s14
 80085f6:	e7dc      	b.n	80085b2 <scalbnf+0x5a>
 80085f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800862c <scalbnf+0xd4>
 80085fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008630 <scalbnf+0xd8>
 8008600:	eef0 7a40 	vmov.f32	s15, s0
 8008604:	2b00      	cmp	r3, #0
 8008606:	e7f4      	b.n	80085f2 <scalbnf+0x9a>
 8008608:	3219      	adds	r2, #25
 800860a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800860e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008612:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008634 <scalbnf+0xdc>
 8008616:	ee07 3a10 	vmov	s14, r3
 800861a:	e7c5      	b.n	80085a8 <scalbnf+0x50>
 800861c:	ffff3cb0 	.word	0xffff3cb0
 8008620:	4c000000 	.word	0x4c000000
 8008624:	7149f2ca 	.word	0x7149f2ca
 8008628:	f149f2ca 	.word	0xf149f2ca
 800862c:	0da24260 	.word	0x0da24260
 8008630:	8da24260 	.word	0x8da24260
 8008634:	33000000 	.word	0x33000000

08008638 <_init>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	bf00      	nop
 800863c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863e:	bc08      	pop	{r3}
 8008640:	469e      	mov	lr, r3
 8008642:	4770      	bx	lr

08008644 <_fini>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	bf00      	nop
 8008648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864a:	bc08      	pop	{r3}
 800864c:	469e      	mov	lr, r3
 800864e:	4770      	bx	lr
