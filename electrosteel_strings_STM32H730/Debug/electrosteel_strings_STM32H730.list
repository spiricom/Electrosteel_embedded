
electrosteel_strings_STM32H730.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  08008670  08008670  00018670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008dec  08008dec  00018dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008df0  08008df0  00018df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08008df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000790  24000078  08008e6c  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24000808  08008e6c  00020808  2**0
                  ALLOC
  8 .RAM_D1       0004baf0  24000e20  08008e6c  00020e20  2**5
                  ALLOC
  9 .RAM_D2       000001e0  30000000  30000000  00030000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002a0bd  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000444a  00000000  00000000  0004a163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0001e66a  00000000  00000000  0004e5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0006cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004648  00000000  00000000  0006e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003692d  00000000  00000000  000728c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027bb1  00000000  00000000  000a91f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015b89d  00000000  00000000  000d0da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022c643  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb4  00000000  00000000  0022c694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008658 	.word	0x08008658

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	08008658 	.word	0x08008658

08000310 <randomNumber>:

}

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
float randomNumber(void) {
 8000310:	b500      	push	{lr}
 8000312:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000314:	4807      	ldr	r0, [pc, #28]	; (8000334 <randomNumber+0x24>)
 8000316:	a901      	add	r1, sp, #4
 8000318:	f006 f834 	bl	8006384 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800031c:	eddd 7a01 	vldr	s15, [sp, #4]
 8000320:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000338 <randomNumber+0x28>
 8000324:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8000328:	ee27 0a80 	vmul.f32	s0, s15, s0
 800032c:	b003      	add	sp, #12
 800032e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000332:	bf00      	nop
 8000334:	24000378 	.word	0x24000378
 8000338:	2f80000d 	.word	0x2f80000d
 800033c:	00000000 	.word	0x00000000

08000340 <SystemClock_Config>:
{
 8000340:	b510      	push	{r4, lr}
 8000342:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000344:	224c      	movs	r2, #76	; 0x4c
 8000346:	2100      	movs	r1, #0
 8000348:	a80a      	add	r0, sp, #40	; 0x28
 800034a:	f007 f953 	bl	80075f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034e:	2220      	movs	r2, #32
 8000350:	2100      	movs	r1, #0
 8000352:	a802      	add	r0, sp, #8
 8000354:	f007 f94e 	bl	80075f4 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000358:	2002      	movs	r0, #2
 800035a:	f003 ff3b 	bl	80041d4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800035e:	4a28      	ldr	r2, [pc, #160]	; (8000400 <SystemClock_Config+0xc0>)
 8000360:	2300      	movs	r3, #0
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	6993      	ldr	r3, [r2, #24]
 8000366:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	6993      	ldr	r3, [r2, #24]
 800036e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000372:	9301      	str	r3, [sp, #4]
 8000374:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000376:	6993      	ldr	r3, [r2, #24]
 8000378:	049b      	lsls	r3, r3, #18
 800037a:	d5fc      	bpl.n	8000376 <SystemClock_Config+0x36>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800037c:	4a21      	ldr	r2, [pc, #132]	; (8000404 <SystemClock_Config+0xc4>)
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037e:	2402      	movs	r4, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000382:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000384:	f023 0303 	bic.w	r3, r3, #3
 8000388:	f043 0302 	orr.w	r3, r3, #2
 800038c:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800038e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000390:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000392:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000394:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 420;
 8000396:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000398:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800039a:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80003f8 <SystemClock_Config+0xb8>
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800039e:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 420;
 80003a2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003a6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003aa:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003ae:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLN = 420;
 80003b2:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f003 ffb5 	bl	8004324 <HAL_RCC_OscConfig>
 80003ba:	b108      	cbz	r0, 80003c0 <SystemClock_Config+0x80>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003bc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003be:	e7fe      	b.n	80003be <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	223f      	movs	r2, #63	; 0x3f
 80003c2:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c4:	4621      	mov	r1, r4
 80003c6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80003cc:	2200      	movs	r2, #0
 80003ce:	2308      	movs	r3, #8
 80003d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80003d4:	2240      	movs	r2, #64	; 0x40
 80003d6:	2340      	movs	r3, #64	; 0x40
 80003d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80003dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003e0:	2340      	movs	r3, #64	; 0x40
 80003e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e6:	f004 fae7 	bl	80049b8 <HAL_RCC_ClockConfig>
 80003ea:	b108      	cbz	r0, 80003f0 <SystemClock_Config+0xb0>
 80003ec:	b672      	cpsid	i
  while (1)
 80003ee:	e7fe      	b.n	80003ee <SystemClock_Config+0xae>
}
 80003f0:	b01e      	add	sp, #120	; 0x78
 80003f2:	bd10      	pop	{r4, pc}
 80003f4:	f3af 8000 	nop.w
 80003f8:	00000021 	.word	0x00000021
 80003fc:	00010000 	.word	0x00010000
 8000400:	58024800 	.word	0x58024800
 8000404:	58024400 	.word	0x58024400

08000408 <MPU_Conf>:
{
 8000408:	b500      	push	{lr}
 800040a:	b085      	sub	sp, #20
	  HAL_MPU_Disable();
 800040c:	f002 f9b8 	bl	8002780 <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000410:	2301      	movs	r3, #1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 8000412:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000416:	4a07      	ldr	r2, [pc, #28]	; (8000434 <MPU_Conf+0x2c>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000418:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800041a:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800041e:	9303      	str	r3, [sp, #12]
 8000420:	e9cd 1201 	strd	r1, r2, [sp, #4]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000424:	f002 f9ca 	bl	80027bc <HAL_MPU_ConfigRegion>
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000428:	2004      	movs	r0, #4
 800042a:	f002 f9b7 	bl	800279c <HAL_MPU_Enable>
}
 800042e:	b005      	add	sp, #20
 8000430:	f85d fb04 	ldr.w	pc, [sp], #4
 8000434:	0301000e 	.word	0x0301000e

08000438 <main>:
{
 8000438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800043c:	ed2d 8b06 	vpush	{d8-d10}
 8000440:	b094      	sub	sp, #80	; 0x50
	MPU_Conf();
 8000442:	f7ff ffe1 	bl	8000408 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000446:	4ac6      	ldr	r2, [pc, #792]	; (8000760 <main+0x328>)
 8000448:	6953      	ldr	r3, [r2, #20]
 800044a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800044e:	d111      	bne.n	8000474 <main+0x3c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000450:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000454:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000458:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800045c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000460:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000464:	6953      	ldr	r3, [r2, #20]
 8000466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800046c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000470:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000474:	48ba      	ldr	r0, [pc, #744]	; (8000760 <main+0x328>)
 8000476:	6943      	ldr	r3, [r0, #20]
 8000478:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800047c:	d124      	bne.n	80004c8 <main+0x90>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800047e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000482:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000486:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800048a:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800048e:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000492:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000496:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000498:	ea04 010c 	and.w	r1, r4, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800049c:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800049e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004a2:	3b01      	subs	r3, #1
 80004a4:	1c5e      	adds	r6, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004a6:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80004aa:	d1f8      	bne.n	800049e <main+0x66>
    } while(sets-- != 0U);
 80004ac:	3c20      	subs	r4, #32
 80004ae:	f114 0f20 	cmn.w	r4, #32
 80004b2:	d1f1      	bne.n	8000498 <main+0x60>
 80004b4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004b8:	6943      	ldr	r3, [r0, #20]
 80004ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004be:	6143      	str	r3, [r0, #20]
 80004c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004c4:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004c8:	4da6      	ldr	r5, [pc, #664]	; (8000764 <main+0x32c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	2400      	movs	r4, #0
  HAL_Init();
 80004cc:	f001 f836 	bl	800153c <HAL_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004d0:	2600      	movs	r6, #0
  SystemClock_Config();
 80004d2:	f7ff ff35 	bl	8000340 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80004d8:	4622      	mov	r2, r4
 80004da:	f248 0101 	movw	r1, #32769	; 0x8001
 80004de:	48a2      	ldr	r0, [pc, #648]	; (8000768 <main+0x330>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004e0:	2700      	movs	r7, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80004e6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80004f6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800050e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000526:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	9303      	str	r3, [sp, #12]
 8000530:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000536:	f043 0302 	orr.w	r3, r3, #2
 800053a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800053e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	9304      	str	r3, [sp, #16]
 8000548:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800054e:	f043 0308 	orr.w	r3, r3, #8
 8000552:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000556:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800055a:	f003 0308 	and.w	r3, r3, #8
 800055e:	9305      	str	r3, [sp, #20]
 8000560:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000562:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800056a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800056e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000576:	9306      	str	r3, [sp, #24]
 8000578:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 800057a:	f003 fe27 	bl	80041cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800057e:	4622      	mov	r2, r4
 8000580:	2110      	movs	r1, #16
 8000582:	487a      	ldr	r0, [pc, #488]	; (800076c <main+0x334>)
 8000584:	f003 fe22 	bl	80041cc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 8000588:	f248 0201 	movw	r2, #32769	; 0x8001
 800058c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800058e:	a90a      	add	r1, sp, #40	; 0x28
 8000590:	4875      	ldr	r0, [pc, #468]	; (8000768 <main+0x330>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 8000592:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000596:	2200      	movs	r2, #0
 8000598:	2303      	movs	r3, #3
 800059a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059e:	f003 fcd9 	bl	8003f54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005a2:	2210      	movs	r2, #16
 80005a4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a6:	a90a      	add	r1, sp, #40	; 0x28
 80005a8:	4870      	ldr	r0, [pc, #448]	; (800076c <main+0x334>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80005ae:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f003 fccf 	bl	8003f54 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b6:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005ba:	4622      	mov	r2, r4
 80005bc:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005be:	f043 0301 	orr.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005c2:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c4:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 80005c8:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80005cc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005d8:	f002 f870 	bl	80026bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005dc:	200b      	movs	r0, #11
 80005de:	f002 f8ab 	bl	8002738 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 80005e2:	4622      	mov	r2, r4
 80005e4:	2101      	movs	r1, #1
 80005e6:	200c      	movs	r0, #12
 80005e8:	f002 f868 	bl	80026bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005ec:	200c      	movs	r0, #12
 80005ee:	f002 f8a3 	bl	8002738 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80005f2:	4621      	mov	r1, r4
 80005f4:	4622      	mov	r2, r4
 80005f6:	200d      	movs	r0, #13
 80005f8:	f002 f860 	bl	80026bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80005fc:	200d      	movs	r0, #13
 80005fe:	f002 f89b 	bl	8002738 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8000602:	485b      	ldr	r0, [pc, #364]	; (8000770 <main+0x338>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000604:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000608:	495a      	ldr	r1, [pc, #360]	; (8000774 <main+0x33c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060a:	6084      	str	r4, [r0, #8]
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800060c:	6584      	str	r4, [r0, #88]	; 0x58
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800060e:	e9c0 1300 	strd	r1, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000612:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000616:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800061a:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 800061e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000622:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000626:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800062a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800062e:	e9c0 4414 	strd	r4, r4, [r0, #80]	; 0x50
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000632:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000636:	2407      	movs	r4, #7
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800063c:	60c4      	str	r4, [r0, #12]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800063e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000640:	f005 ff50 	bl	80064e4 <HAL_SPI_Init>
 8000644:	b108      	cbz	r0, 800064a <main+0x212>
  __ASM volatile ("cpsid i" : : : "memory");
 8000646:	b672      	cpsid	i
  while (1)
 8000648:	e7fe      	b.n	8000648 <main+0x210>
  hspi3.Instance = SPI3;
 800064a:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <main+0x340>)
 800064c:	4a4b      	ldr	r2, [pc, #300]	; (800077c <main+0x344>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800064e:	e9c3 0001 	strd	r0, r0, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000652:	e9c3 4003 	strd	r4, r0, [r3, #12]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000656:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800065a:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800065e:	e9c3 000f 	strd	r0, r0, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000662:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000666:	e9c3 0013 	strd	r0, r0, [r3, #76]	; 0x4c
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800066a:	e9c3 0015 	strd	r0, r0, [r3, #84]	; 0x54
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066e:	e9c3 6708 	strd	r6, r7, [r3, #32]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000672:	4618      	mov	r0, r3
  hspi3.Instance = SPI3;
 8000674:	601a      	str	r2, [r3, #0]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000676:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800067a:	f005 ff33 	bl	80064e4 <HAL_SPI_Init>
 800067e:	b108      	cbz	r0, 8000684 <main+0x24c>
 8000680:	b672      	cpsid	i
  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0x24a>
  hspi2.Instance = SPI2;
 8000684:	4b3e      	ldr	r3, [pc, #248]	; (8000780 <main+0x348>)
 8000686:	4a3f      	ldr	r2, [pc, #252]	; (8000784 <main+0x34c>)
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000688:	6198      	str	r0, [r3, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800068a:	60dc      	str	r4, [r3, #12]
  hspi2.Instance = SPI2;
 800068c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	e9c3 0001 	strd	r0, r0, [r3, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000692:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000696:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800069a:	e9c3 000f 	strd	r0, r0, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800069e:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006a2:	e9c3 0013 	strd	r0, r0, [r3, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006a6:	e9c3 0015 	strd	r0, r0, [r3, #84]	; 0x54
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006aa:	e9c3 6708 	strd	r6, r7, [r3, #32]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006ae:	4618      	mov	r0, r3
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b0:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006b4:	f005 ff16 	bl	80064e4 <HAL_SPI_Init>
 80006b8:	4605      	mov	r5, r0
 80006ba:	bb88      	cbnz	r0, 8000720 <main+0x2e8>
  ADC_ChannelConfTypeDef sConfig = {0};
 80006bc:	4601      	mov	r1, r0
 80006be:	2224      	movs	r2, #36	; 0x24
  ADC_MultiModeTypeDef multimode = {0};
 80006c0:	9009      	str	r0, [sp, #36]	; 0x24
  hadc1.Instance = ADC1;
 80006c2:	4c31      	ldr	r4, [pc, #196]	; (8000788 <main+0x350>)
  ADC_MultiModeTypeDef multimode = {0};
 80006c4:	e9cd 0007 	strd	r0, r0, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c8:	a80a      	add	r0, sp, #40	; 0x28
 80006ca:	f006 ff93 	bl	80075f4 <memset>
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006ce:	2303      	movs	r3, #3
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80006d0:	f240 4201 	movw	r2, #1025	; 0x401
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d4:	4620      	mov	r0, r4
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006d6:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80006dc:	6562      	str	r2, [r4, #84]	; 0x54
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006de:	2202      	movs	r2, #2
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006e0:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80006e2:	2301      	movs	r3, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e4:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.OversamplingMode = ENABLE;
 80006e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006ec:	2320      	movs	r3, #32
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ee:	6425      	str	r5, [r4, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80006f0:	6525      	str	r5, [r4, #80]	; 0x50
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  hadc1.Instance = ADC1;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <main+0x354>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006f8:	2201      	movs	r2, #1
  hadc1.Instance = ADC1;
 80006fa:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006fc:	2308      	movs	r3, #8
 80006fe:	e9c4 2304 	strd	r2, r3, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000706:	8323      	strh	r3, [r4, #24]
  hadc1.Init.NbrOfConversion = 12;
 8000708:	230c      	movs	r3, #12
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070a:	e9c4 670a 	strd	r6, r7, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 12;
 800070e:	61e3      	str	r3, [r4, #28]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000710:	e9c4 5501 	strd	r5, r5, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	f001 fddc 	bl	80022d0 <HAL_ADC_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	b118      	cbz	r0, 8000724 <main+0x2ec>
 800071c:	b672      	cpsid	i
  while (1)
 800071e:	e7fe      	b.n	800071e <main+0x2e6>
 8000720:	b672      	cpsid	i
 8000722:	e7fe      	b.n	8000722 <main+0x2ea>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000724:	a907      	add	r1, sp, #28
 8000726:	4620      	mov	r0, r4
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000728:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072a:	f001 ff2f 	bl	800258c <HAL_ADCEx_MultiModeConfigChannel>
 800072e:	b108      	cbz	r0, 8000734 <main+0x2fc>
 8000730:	b672      	cpsid	i
  while (1)
 8000732:	e7fe      	b.n	8000732 <main+0x2fa>
  sConfig.Channel = ADC_CHANNEL_16;
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <main+0x358>)
 8000736:	2306      	movs	r3, #6
  sConfig.OffsetSignedSaturation = DISABLE;
 8000738:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	a90a      	add	r1, sp, #40	; 0x28
 800073e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_16;
 8000740:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000744:	2204      	movs	r2, #4
 8000746:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800074a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800074e:	2204      	movs	r2, #4
 8000750:	2300      	movs	r3, #0
 8000752:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	f001 f8d9 	bl	800190c <HAL_ADC_ConfigChannel>
 800075a:	b1d8      	cbz	r0, 8000794 <main+0x35c>
 800075c:	b672      	cpsid	i
  while (1)
 800075e:	e7fe      	b.n	800075e <main+0x326>
 8000760:	e000ed00 	.word	0xe000ed00
 8000764:	58024400 	.word	0x58024400
 8000768:	58020c00 	.word	0x58020c00
 800076c:	58020400 	.word	0x58020400
 8000770:	2400038c 	.word	0x2400038c
 8000774:	40013000 	.word	0x40013000
 8000778:	240004a0 	.word	0x240004a0
 800077c:	40003c00 	.word	0x40003c00
 8000780:	24000418 	.word	0x24000418
 8000784:	40003800 	.word	0x40003800
 8000788:	240001a0 	.word	0x240001a0
 800078c:	40022000 	.word	0x40022000
 8000790:	43210000 	.word	0x43210000
  sConfig.Channel = ADC_CHANNEL_17;
 8000794:	4a96      	ldr	r2, [pc, #600]	; (80009f0 <main+0x5b8>)
 8000796:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	a90a      	add	r1, sp, #40	; 0x28
 800079a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_17;
 800079c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	f001 f8b4 	bl	800190c <HAL_ADC_ConfigChannel>
 80007a4:	b108      	cbz	r0, 80007aa <main+0x372>
 80007a6:	b672      	cpsid	i
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x370>
  sConfig.Channel = ADC_CHANNEL_14;
 80007aa:	4a92      	ldr	r2, [pc, #584]	; (80009f4 <main+0x5bc>)
 80007ac:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ae:	a90a      	add	r1, sp, #40	; 0x28
 80007b0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 80007b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b6:	f001 f8a9 	bl	800190c <HAL_ADC_ConfigChannel>
 80007ba:	b108      	cbz	r0, 80007c0 <main+0x388>
 80007bc:	b672      	cpsid	i
  while (1)
 80007be:	e7fe      	b.n	80007be <main+0x386>
  sConfig.Channel = ADC_CHANNEL_15;
 80007c0:	488d      	ldr	r0, [pc, #564]	; (80009f8 <main+0x5c0>)
 80007c2:	2118      	movs	r1, #24
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80007c4:	2305      	movs	r3, #5
  sConfig.Channel = ADC_CHANNEL_15;
 80007c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	a90a      	add	r1, sp, #40	; 0x28
 80007cc:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80007ce:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	f001 f89c 	bl	800190c <HAL_ADC_ConfigChannel>
 80007d4:	b108      	cbz	r0, 80007da <main+0x3a2>
 80007d6:	b672      	cpsid	i
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <main+0x3a0>
  sConfig.Channel = ADC_CHANNEL_18;
 80007da:	4e88      	ldr	r6, [pc, #544]	; (80009fc <main+0x5c4>)
 80007dc:	f44f 7780 	mov.w	r7, #256	; 0x100
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80007e0:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e2:	4620      	mov	r0, r4
 80007e4:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80007e6:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Channel = ADC_CHANNEL_18;
 80007e8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ec:	f001 f88e 	bl	800190c <HAL_ADC_ConfigChannel>
 80007f0:	b108      	cbz	r0, 80007f6 <main+0x3be>
 80007f2:	b672      	cpsid	i
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <main+0x3bc>
  sConfig.Channel = ADC_CHANNEL_19;
 80007f6:	4a82      	ldr	r2, [pc, #520]	; (8000a00 <main+0x5c8>)
 80007f8:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	a90a      	add	r1, sp, #40	; 0x28
 80007fe:	4881      	ldr	r0, [pc, #516]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_19;
 8000800:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	f001 f882 	bl	800190c <HAL_ADC_ConfigChannel>
 8000808:	b108      	cbz	r0, 800080e <main+0x3d6>
 800080a:	b672      	cpsid	i
  while (1)
 800080c:	e7fe      	b.n	800080c <main+0x3d4>
  sConfig.Channel = ADC_CHANNEL_3;
 800080e:	4a7e      	ldr	r2, [pc, #504]	; (8000a08 <main+0x5d0>)
 8000810:	f44f 7386 	mov.w	r3, #268	; 0x10c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000814:	a90a      	add	r1, sp, #40	; 0x28
 8000816:	487b      	ldr	r0, [pc, #492]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_3;
 8000818:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	f001 f876 	bl	800190c <HAL_ADC_ConfigChannel>
 8000820:	b108      	cbz	r0, 8000826 <main+0x3ee>
 8000822:	b672      	cpsid	i
  while (1)
 8000824:	e7fe      	b.n	8000824 <main+0x3ec>
  sConfig.Channel = ADC_CHANNEL_7;
 8000826:	a36c      	add	r3, pc, #432	; (adr r3, 80009d8 <main+0x5a0>)
 8000828:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	a90a      	add	r1, sp, #40	; 0x28
 800082e:	4875      	ldr	r0, [pc, #468]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_7;
 8000830:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000834:	f001 f86a 	bl	800190c <HAL_ADC_ConfigChannel>
 8000838:	b108      	cbz	r0, 800083e <main+0x406>
 800083a:	b672      	cpsid	i
  while (1)
 800083c:	e7fe      	b.n	800083c <main+0x404>
  sConfig.Channel = ADC_CHANNEL_4;
 800083e:	4a73      	ldr	r2, [pc, #460]	; (8000a0c <main+0x5d4>)
 8000840:	f44f 738c 	mov.w	r3, #280	; 0x118
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	a90a      	add	r1, sp, #40	; 0x28
 8000846:	486f      	ldr	r0, [pc, #444]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_4;
 8000848:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	f001 f85e 	bl	800190c <HAL_ADC_ConfigChannel>
 8000850:	b108      	cbz	r0, 8000856 <main+0x41e>
 8000852:	b672      	cpsid	i
  while (1)
 8000854:	e7fe      	b.n	8000854 <main+0x41c>
  sConfig.Channel = ADC_CHANNEL_8;
 8000856:	4a6e      	ldr	r2, [pc, #440]	; (8000a10 <main+0x5d8>)
 8000858:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085c:	a90a      	add	r1, sp, #40	; 0x28
 800085e:	4869      	ldr	r0, [pc, #420]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_8;
 8000860:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000864:	f001 f852 	bl	800190c <HAL_ADC_ConfigChannel>
 8000868:	b108      	cbz	r0, 800086e <main+0x436>
 800086a:	b672      	cpsid	i
  while (1)
 800086c:	e7fe      	b.n	800086c <main+0x434>
  sConfig.Channel = ADC_CHANNEL_9;
 800086e:	a35c      	add	r3, pc, #368	; (adr r3, 80009e0 <main+0x5a8>)
 8000870:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	a90a      	add	r1, sp, #40	; 0x28
 8000876:	4863      	ldr	r0, [pc, #396]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_9;
 8000878:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087c:	f001 f846 	bl	800190c <HAL_ADC_ConfigChannel>
 8000880:	b108      	cbz	r0, 8000886 <main+0x44e>
 8000882:	b672      	cpsid	i
  while (1)
 8000884:	e7fe      	b.n	8000884 <main+0x44c>
  sConfig.Channel = ADC_CHANNEL_5;
 8000886:	a358      	add	r3, pc, #352	; (adr r3, 80009e8 <main+0x5b0>)
 8000888:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088c:	a90a      	add	r1, sp, #40	; 0x28
 800088e:	485d      	ldr	r0, [pc, #372]	; (8000a04 <main+0x5cc>)
  sConfig.Channel = ADC_CHANNEL_5;
 8000890:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	f001 f83a 	bl	800190c <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	b108      	cbz	r0, 80008a0 <main+0x468>
 800089c:	b672      	cpsid	i
  while (1)
 800089e:	e7fe      	b.n	800089e <main+0x466>
  hrng.Instance = RNG;
 80008a0:	485c      	ldr	r0, [pc, #368]	; (8000a14 <main+0x5dc>)
 80008a2:	4a5d      	ldr	r2, [pc, #372]	; (8000a18 <main+0x5e0>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80008a4:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008a8:	f005 fcb0 	bl	800620c <HAL_RNG_Init>
 80008ac:	4604      	mov	r4, r0
 80008ae:	b108      	cbz	r0, 80008b4 <main+0x47c>
 80008b0:	b672      	cpsid	i
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <main+0x47a>
  return __builtin_arm_get_fpscr();
 80008b4:	eef1 3a10 	vmrs	r3, fpscr
   tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 80008b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 80008bc:	eee1 3a10 	vmsr	fpscr, r3
   for (int i = 0; i < 4; i++)
 80008c0:	4956      	ldr	r1, [pc, #344]	; (8000a1c <main+0x5e4>)
 	  SPI_TX[i] = counter++;
 80008c2:	4b57      	ldr	r3, [pc, #348]	; (8000a20 <main+0x5e8>)
 80008c4:	780a      	ldrb	r2, [r1, #0]
 	  SPI_PLUCK_TX[i] = 0;
 80008c6:	6218      	str	r0, [r3, #32]
 	  SPI_TX[i] = counter++;
 80008c8:	1c55      	adds	r5, r2, #1
 80008ca:	f362 0007 	bfi	r0, r2, #0, #8
 80008ce:	4f55      	ldr	r7, [pc, #340]	; (8000a24 <main+0x5ec>)
 80008d0:	f365 200f 	bfi	r0, r5, #8, #8
 80008d4:	1c95      	adds	r5, r2, #2
 80008d6:	4e54      	ldr	r6, [pc, #336]	; (8000a28 <main+0x5f0>)
 80008d8:	f365 4017 	bfi	r0, r5, #16, #8
 80008dc:	1cd5      	adds	r5, r2, #3
 80008de:	3204      	adds	r2, #4
 80008e0:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8000a60 <main+0x628>
 80008e4:	f365 601f 	bfi	r0, r5, #24, #8
 80008e8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8000a64 <main+0x62c>
 80008ec:	700a      	strb	r2, [r1, #0]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80008ee:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80008f2:	2208      	movs	r2, #8
 	  SPI_TX[i] = counter++;
 80008f4:	f843 0b20 	str.w	r0, [r3], #32
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80008f8:	484c      	ldr	r0, [pc, #304]	; (8000a2c <main+0x5f4>)
 	  SPI_PLUCK_TX[i] = 0;
 80008fa:	615c      	str	r4, [r3, #20]
 80008fc:	831c      	strh	r4, [r3, #24]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80008fe:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8000a68 <main+0x630>
   	tThreshold_init(&threshold[i],700.0f, 1300.0f, &leaf);
 8000902:	4d4b      	ldr	r5, [pc, #300]	; (8000a30 <main+0x5f8>)
 8000904:	ed9f aa4b 	vldr	s20, [pc, #300]	; 8000a34 <main+0x5fc>
 8000908:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8000a38 <main+0x600>
   	tSlide_init(&fastSlide[i],1.0f,400.0f, &leaf); //1110
 800090c:	eddf 9a4b 	vldr	s19, [pc, #300]	; 8000a3c <main+0x604>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 8000910:	eddf 8a4b 	vldr	s17, [pc, #300]	; 8000a40 <main+0x608>
 8000914:	ed9f 8a4b 	vldr	s16, [pc, #300]	; 8000a44 <main+0x60c>
 	  SPI_PLUCK_TX[i] = 0;
 8000918:	e9c3 4401 	strd	r4, r4, [r3, #4]
 800091c:	e9c3 4403 	strd	r4, r4, [r3, #12]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 8000920:	f005 ff80 	bl	8006824 <HAL_SPI_Receive_DMA>
   HAL_Delay(10);
 8000924:	200a      	movs	r0, #10
 8000926:	f000 fe4b 	bl	80015c0 <HAL_Delay>
   HAL_Delay(10);
 800092a:	200a      	movs	r0, #10
 800092c:	f000 fe48 	bl	80015c0 <HAL_Delay>
   LEAF_init(&leaf, SAMPLE_RATE, mediumMemory, MEDIUM_MEM_SIZE, &randomNumber);
 8000930:	4b45      	ldr	r3, [pc, #276]	; (8000a48 <main+0x610>)
 8000932:	4a46      	ldr	r2, [pc, #280]	; (8000a4c <main+0x614>)
 8000934:	4946      	ldr	r1, [pc, #280]	; (8000a50 <main+0x618>)
 8000936:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000a54 <main+0x61c>
 800093a:	483d      	ldr	r0, [pc, #244]	; (8000a30 <main+0x5f8>)
 800093c:	f006 fdfc 	bl	8007538 <LEAF_init>
   	tThreshold_init(&threshold[i],700.0f, 1300.0f, &leaf);
 8000940:	eb0a 0004 	add.w	r0, sl, r4
 8000944:	eeb0 0a49 	vmov.f32	s0, s18
 8000948:	eef0 0a4a 	vmov.f32	s1, s20
 800094c:	4629      	mov	r1, r5
 800094e:	f006 fa23 	bl	8006d98 <tThreshold_init>
   	tSlide_init(&fastSlide[i],1.0f,400.0f, &leaf); //1110
 8000952:	eb09 0004 	add.w	r0, r9, r4
 8000956:	eef0 0a69 	vmov.f32	s1, s19
 800095a:	4629      	mov	r1, r5
 800095c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000960:	f006 fa4c 	bl	8006dfc <tSlide_init>
   	tSlide_init(&slowSlide[i],1.0f,700.0f, &leaf); //1110
 8000964:	eb08 0004 	add.w	r0, r8, r4
 8000968:	eef0 0a49 	vmov.f32	s1, s18
 800096c:	4629      	mov	r1, r5
 800096e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   for (int i = 0; i < NUM_STRINGS; i++)
 8000972:	3404      	adds	r4, #4
   	tSlide_init(&slowSlide[i],1.0f,700.0f, &leaf); //1110
 8000974:	f006 fa42 	bl	8006dfc <tSlide_init>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 8000978:	eef0 0a68 	vmov.f32	s1, s17
 800097c:	462a      	mov	r2, r5
 800097e:	4638      	mov	r0, r7
 8000980:	eeb0 0a48 	vmov.f32	s0, s16
 8000984:	2101      	movs	r1, #1
 8000986:	f006 fc95 	bl	80072b4 <tVZFilter_init>
   		tHighpass_init(&opticalHighpass[i][j], 10.0f, &leaf);//100
 800098a:	4630      	mov	r0, r6
 800098c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000990:	4629      	mov	r1, r5
 8000992:	f006 fa8b 	bl	8006eac <tHighpass_init>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 8000996:	1d38      	adds	r0, r7, #4
 8000998:	eef0 0a68 	vmov.f32	s1, s17
 800099c:	462a      	mov	r2, r5
 800099e:	eeb0 0a48 	vmov.f32	s0, s16
 80009a2:	2101      	movs	r1, #1
 80009a4:	f006 fc86 	bl	80072b4 <tVZFilter_init>
   		tHighpass_init(&opticalHighpass[i][j], 10.0f, &leaf);//100
 80009a8:	1d30      	adds	r0, r6, #4
 80009aa:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80009ae:	4629      	mov	r1, r5
 80009b0:	f006 fa7c 	bl	8006eac <tHighpass_init>
   for (int i = 0; i < NUM_STRINGS; i++)
 80009b4:	2c30      	cmp	r4, #48	; 0x30
 80009b6:	f107 0708 	add.w	r7, r7, #8
 80009ba:	f106 0608 	add.w	r6, r6, #8
 80009be:	d1bf      	bne.n	8000940 <main+0x508>
   LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 80009c0:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80009c4:	4824      	ldr	r0, [pc, #144]	; (8000a58 <main+0x620>)
 80009c6:	f006 fcaf 	bl	8007328 <LEAF_generate_atodb>
   HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values1,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 80009ca:	22c0      	movs	r2, #192	; 0xc0
 80009cc:	4923      	ldr	r1, [pc, #140]	; (8000a5c <main+0x624>)
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <main+0x5cc>)
 80009d0:	f001 fb44 	bl	800205c <HAL_ADC_Start_DMA>
   while (1)
 80009d4:	e7fe      	b.n	80009d4 <main+0x59c>
 80009d6:	bf00      	nop
 80009d8:	1d500080 	.word	0x1d500080
 80009dc:	00000112 	.word	0x00000112
 80009e0:	25b00200 	.word	0x25b00200
 80009e4:	00000206 	.word	0x00000206
 80009e8:	14f00020 	.word	0x14f00020
 80009ec:	0000020c 	.word	0x0000020c
 80009f0:	47520000 	.word	0x47520000
 80009f4:	3ac04000 	.word	0x3ac04000
 80009f8:	3ef08000 	.word	0x3ef08000
 80009fc:	4b840000 	.word	0x4b840000
 8000a00:	4fb80000 	.word	0x4fb80000
 8000a04:	240001a0 	.word	0x240001a0
 8000a08:	0c900008 	.word	0x0c900008
 8000a0c:	10c00010 	.word	0x10c00010
 8000a10:	21800100 	.word	0x21800100
 8000a14:	24000378 	.word	0x24000378
 8000a18:	48021800 	.word	0x48021800
 8000a1c:	24000104 	.word	0x24000104
 8000a20:	30000000 	.word	0x30000000
 8000a24:	24000608 	.word	0x24000608
 8000a28:	240005a8 	.word	0x240005a8
 8000a2c:	24000418 	.word	0x24000418
 8000a30:	24000558 	.word	0x24000558
 8000a34:	44a28000 	.word	0x44a28000
 8000a38:	442f0000 	.word	0x442f0000
 8000a3c:	43c80000 	.word	0x43c80000
 8000a40:	3f4ccccd 	.word	0x3f4ccccd
 8000a44:	468ca000 	.word	0x468ca000
 8000a48:	08000311 	.word	0x08000311
 8000a4c:	00033450 	.word	0x00033450
 8000a50:	240194c0 	.word	0x240194c0
 8000a54:	473b8000 	.word	0x473b8000
 8000a58:	24000e20 	.word	0x24000e20
 8000a5c:	30000060 	.word	0x30000060
 8000a60:	240007d4 	.word	0x240007d4
 8000a64:	24000170 	.word	0x24000170
 8000a68:	240006f8 	.word	0x240006f8

08000a6c <attackDetectPeak2>:
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8000a6c:	ee07 1a90 	vmov	s15, r1
 8000a70:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8000c08 <attackDetectPeak2+0x19c>
 8000a74:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8000c0c <attackDetectPeak2+0x1a0>
 8000a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8000a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 8000a80:	ee77 7ac7 	vsub.f32	s15, s15, s14
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a84:	4f62      	ldr	r7, [pc, #392]	; (8000c10 <attackDetectPeak2+0x1a4>)
 8000a86:	00c6      	lsls	r6, r0, #3
{
 8000a88:	4604      	mov	r4, r0
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a8a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8000a8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000a92:	00a5      	lsls	r5, r4, #2
{
 8000a94:	ed2d 8b02 	vpush	{d8}
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a98:	f006 fa28 	bl	8006eec <tHighpass_tick>
 8000a9c:	1d30      	adds	r0, r6, #4
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a9e:	4e5d      	ldr	r6, [pc, #372]	; (8000c14 <attackDetectPeak2+0x1a8>)
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000aa0:	4438      	add	r0, r7
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000aa2:	4f5d      	ldr	r7, [pc, #372]	; (8000c18 <attackDetectPeak2+0x1ac>)
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000aa4:	f006 fa22 	bl	8006eec <tHighpass_tick>
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000aa8:	485c      	ldr	r0, [pc, #368]	; (8000c1c <attackDetectPeak2+0x1b0>)
 8000aaa:	eeb0 0ac0 	vabs.f32	s0, s0
 8000aae:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000ab2:	f006 f9c9 	bl	8006e48 <tSlide_tick>
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000ab6:	485a      	ldr	r0, [pc, #360]	; (8000c20 <attackDetectPeak2+0x1b4>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000ab8:	4b5a      	ldr	r3, [pc, #360]	; (8000c24 <attackDetectPeak2+0x1b8>)
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000aba:	4428      	add	r0, r5
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000abc:	ed83 0a00 	vstr	s0, [r3]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000ac0:	f006 f9c2 	bl	8006e48 <tSlide_tick>
 8000ac4:	eef0 0a40 	vmov.f32	s1, s0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000ac8:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8000c28 <attackDetectPeak2+0x1bc>
 8000acc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000ad0:	edc6 0a00 	vstr	s1, [r6]
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000ad4:	f006 fc14 	bl	8007300 <LEAF_clip>
 8000ad8:	eeb0 7a40 	vmov.f32	s14, s0
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000adc:	eddf 7a53 	vldr	s15, [pc, #332]	; 8000c2c <attackDetectPeak2+0x1c0>
 8000ae0:	4b53      	ldr	r3, [pc, #332]	; (8000c30 <attackDetectPeak2+0x1c4>)
 8000ae2:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8000ae6:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8000c34 <attackDetectPeak2+0x1c8>
 8000aea:	ee67 7a27 	vmul.f32	s15, s14, s15
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000aee:	ed86 7a00 	vstr	s14, [r6]
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af6:	ee17 2a90 	vmov	r2, s15
 8000afa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000afe:	edd3 0a00 	vldr	s1, [r3]
 8000b02:	f006 fbfd 	bl	8007300 <LEAF_clip>
 8000b06:	ed87 0a00 	vstr	s0, [r7]
	if (whichString == 0)
 8000b0a:	b914      	cbnz	r4, 8000b12 <attackDetectPeak2+0xa6>
		dbSmoothedStorage = dbSmoothed2;
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <attackDetectPeak2+0x1cc>)
 8000b0e:	ed83 0a00 	vstr	s0, [r3]
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8000b12:	edd6 8a00 	vldr	s17, [r6]
 8000b16:	eddf 7a49 	vldr	s15, [pc, #292]	; 8000c3c <attackDetectPeak2+0x1d0>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000b1a:	4e49      	ldr	r6, [pc, #292]	; (8000c40 <attackDetectPeak2+0x1d4>)
	integerVersions[whichString] = integerVersion;
 8000b1c:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <attackDetectPeak2+0x1d8>)
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8000b1e:	ee68 8aa7 	vmul.f32	s17, s17, s15
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000b22:	1972      	adds	r2, r6, r5
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b24:	4848      	ldr	r0, [pc, #288]	; (8000c48 <attackDetectPeak2+0x1dc>)
	integerVersions[whichString] = integerVersion;
 8000b26:	442b      	add	r3, r5
		armed[whichString] = 1;
 8000b28:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8000c54 <attackDetectPeak2+0x1e8>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000b2c:	ed92 8a00 	vldr	s16, [r2]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b30:	4428      	add	r0, r5
	integerVersions[whichString] = integerVersion;
 8000b32:	edc3 8a00 	vstr	s17, [r3]
	slopeStorage[whichString] = slope;
 8000b36:	4b45      	ldr	r3, [pc, #276]	; (8000c4c <attackDetectPeak2+0x1e0>)
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000b38:	ee30 8a48 	vsub.f32	s16, s0, s16
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b3c:	eeb0 0a68 	vmov.f32	s0, s17
	slopeStorage[whichString] = slope;
 8000b40:	442b      	add	r3, r5
 8000b42:	ed83 8a00 	vstr	s16, [r3]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b46:	f006 f93f 	bl	8006dc8 <tThreshold_tick>
 8000b4a:	4b41      	ldr	r3, [pc, #260]	; (8000c50 <attackDetectPeak2+0x1e4>)
	if ((slope > .5f) && (threshOut > 0))//.3
 8000b4c:	2800      	cmp	r0, #0
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000b4e:	6018      	str	r0, [r3, #0]
	if ((slope > .5f) && (threshOut > 0))//.3
 8000b50:	dd06      	ble.n	8000b60 <attackDetectPeak2+0xf4>
 8000b52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8000b56:	eeb4 8a67 	vcmp.f32	s16, s15
 8000b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5e:	dc0c      	bgt.n	8000b7a <attackDetectPeak2+0x10e>
	if (armed[whichString] == 1)
 8000b60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d00b      	beq.n	8000b80 <attackDetectPeak2+0x114>
{
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	prevdbSmoothed2[whichString] = dbSmoothed2;
 8000b6c:	4435      	add	r5, r6
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	602b      	str	r3, [r5, #0]
}
 8000b72:	ecbd 8b02 	vpop	{d8}
 8000b76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		armed[whichString] = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
		if (integerVersion > stringMaxes[whichString])
 8000b80:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000c58 <attackDetectPeak2+0x1ec>
 8000b84:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8000b88:	ee07 3a90 	vmov	s15, r3
 8000b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b90:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b98:	d505      	bpl.n	8000ba6 <attackDetectPeak2+0x13a>
			stringMaxes[whichString] = integerVersion;
 8000b9a:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8000b9e:	ee18 3a90 	vmov	r3, s17
 8000ba2:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
		armedCounter[whichString]++;
 8000ba6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8000c5c <attackDetectPeak2+0x1f0>
		if (slope <= 0.0f)
 8000baa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
			downCounter[whichString]++;
 8000bae:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8000c60 <attackDetectPeak2+0x1f4>
		armedCounter[whichString]++;
 8000bb2:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
		if (slope <= 0.0f)
 8000bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		armedCounter[whichString]++;
 8000bba:	f103 0301 	add.w	r3, r3, #1
 8000bbe:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			downCounter[whichString]++;
 8000bc2:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8000bc6:	bf9c      	itt	ls
 8000bc8:	3301      	addls	r3, #1
 8000bca:	f84b 3024 	strls.w	r3, [fp, r4, lsl #2]
		if (downCounter[whichString] > 256)
 8000bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd2:	ddc9      	ble.n	8000b68 <attackDetectPeak2+0xfc>
			output = LEAF_clip(0.0f, output, 65535.0f);
 8000bd4:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8000bd8:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000c3c <attackDetectPeak2+0x1d0>
 8000bdc:	ee07 3a90 	vmov	s15, r3
 8000be0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000c28 <attackDetectPeak2+0x1bc>
 8000be4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8000be8:	f006 fb8a 	bl	8007300 <LEAF_clip>
	return (int)output;
 8000bec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			armed[whichString] = 0;
 8000bf0:	2300      	movs	r3, #0
	return (int)output;
 8000bf2:	ee17 0a90 	vmov	r0, s15
			armed[whichString] = 0;
 8000bf6:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
			armedCounter[whichString] = 0;
 8000bfa:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			downCounter[whichString] = 0;
 8000bfe:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
			stringMaxes[whichString] = 0;
 8000c02:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
 8000c06:	e7b1      	b.n	8000b6c <attackDetectPeak2+0x100>
 8000c08:	47000000 	.word	0x47000000
 8000c0c:	37fffffc 	.word	0x37fffffc
 8000c10:	240005a8 	.word	0x240005a8
 8000c14:	24000098 	.word	0x24000098
 8000c18:	24000108 	.word	0x24000108
 8000c1c:	24000170 	.word	0x24000170
 8000c20:	240006f8 	.word	0x240006f8
 8000c24:	24000094 	.word	0x24000094
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	46c34e00 	.word	0x46c34e00
 8000c30:	24000e20 	.word	0x24000e20
 8000c34:	c21c0000 	.word	0xc21c0000
 8000c38:	2400010c 	.word	0x2400010c
 8000c3c:	477fff00 	.word	0x477fff00
 8000c40:	24000698 	.word	0x24000698
 8000c44:	24000528 	.word	0x24000528
 8000c48:	240007d4 	.word	0x240007d4
 8000c4c:	240006c8 	.word	0x240006c8
 8000c50:	240007d0 	.word	0x240007d0
 8000c54:	240000a4 	.word	0x240000a4
 8000c58:	24000728 	.word	0x24000728
 8000c5c:	240000d4 	.word	0x240000d4
 8000c60:	24000140 	.word	0x24000140

08000c64 <ADC_Frame>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
{
 8000c66:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000c68:	4865      	ldr	r0, [pc, #404]	; (8000e00 <ADC_Frame+0x19c>)
 8000c6a:	4611      	mov	r1, r2
{
 8000c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c70:	b087      	sub	sp, #28
 8000c72:	461c      	mov	r4, r3
 8000c74:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8000e28 <ADC_Frame+0x1c4>
 8000c78:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000c7a:	f003 faa7 	bl	80041cc <HAL_GPIO_WritePin>
	int changeHappened = 0;
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4b60      	ldr	r3, [pc, #384]	; (8000e04 <ADC_Frame+0x1a0>)
 8000c82:	4621      	mov	r1, r4
 8000c84:	4860      	ldr	r0, [pc, #384]	; (8000e08 <ADC_Frame+0x1a4>)
 8000c86:	9200      	str	r2, [sp, #0]
 8000c88:	eb04 0244 	add.w	r2, r4, r4, lsl #1
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000c8c:	3107      	adds	r1, #7
 8000c8e:	9003      	str	r0, [sp, #12]
 8000c90:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8000c94:	3b40      	subs	r3, #64	; 0x40
 8000c96:	9104      	str	r1, [sp, #16]
 8000c98:	9201      	str	r2, [sp, #4]
 8000c9a:	4a5c      	ldr	r2, [pc, #368]	; (8000e0c <ADC_Frame+0x1a8>)
 8000c9c:	9305      	str	r3, [sp, #20]
		if (howManyFrames > 0)
 8000c9e:	f8db 3000 	ldr.w	r3, [fp]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	dd02      	ble.n	8000cac <ADC_Frame+0x48>
			howManyFrames--;
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f8cb 3000 	str.w	r3, [fp]
			string_values[k] = ADC_values1[(i*NUM_ADC_CHANNELS) + k];
 8000cac:	9801      	ldr	r0, [sp, #4]
 8000cae:	9c03      	ldr	r4, [sp, #12]
 8000cb0:	8801      	ldrh	r1, [r0, #0]
 8000cb2:	8843      	ldrh	r3, [r0, #2]
 8000cb4:	f8df a150 	ldr.w	sl, [pc, #336]	; 8000e08 <ADC_Frame+0x1a4>
 8000cb8:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8000e2c <ADC_Frame+0x1c8>
 8000cbc:	4f54      	ldr	r7, [pc, #336]	; (8000e10 <ADC_Frame+0x1ac>)
 8000cbe:	4d55      	ldr	r5, [pc, #340]	; (8000e14 <ADC_Frame+0x1b0>)
 8000cc0:	4e55      	ldr	r6, [pc, #340]	; (8000e18 <ADC_Frame+0x1b4>)
 8000cc2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8000e30 <ADC_Frame+0x1cc>
 8000cc6:	f8cd a00c 	str.w	sl, [sp, #12]
 8000cca:	e9c4 1300 	strd	r1, r3, [r4]
 8000cce:	8881      	ldrh	r1, [r0, #4]
 8000cd0:	88c3      	ldrh	r3, [r0, #6]
 8000cd2:	e9c4 1302 	strd	r1, r3, [r4, #8]
 8000cd6:	8901      	ldrh	r1, [r0, #8]
 8000cd8:	8943      	ldrh	r3, [r0, #10]
 8000cda:	e9c4 1304 	strd	r1, r3, [r4, #16]
 8000cde:	8981      	ldrh	r1, [r0, #12]
 8000ce0:	89c3      	ldrh	r3, [r0, #14]
 8000ce2:	e9c4 1306 	strd	r1, r3, [r4, #24]
 8000ce6:	8a01      	ldrh	r1, [r0, #16]
 8000ce8:	8a43      	ldrh	r3, [r0, #18]
 8000cea:	e9c4 1308 	strd	r1, r3, [r4, #32]
 8000cee:	8a81      	ldrh	r1, [r0, #20]
 8000cf0:	8ac3      	ldrh	r3, [r0, #22]
 8000cf2:	e9c4 130a 	strd	r1, r3, [r4, #40]	; 0x28
 8000cf6:	2401      	movs	r4, #1
 8000cf8:	e025      	b.n	8000d46 <ADC_Frame+0xe2>
				stringTouchRH[j] = (RHbits[0] >> j) & 1;
 8000cfa:	6813      	ldr	r3, [r2, #0]
 8000cfc:	4103      	asrs	r3, r0
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	802b      	strh	r3, [r5, #0]
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d04:	f7ff feb2 	bl	8000a6c <attackDetectPeak2>
			if (howManyFrames == 0)
 8000d08:	f8db 3000 	ldr.w	r3, [fp]
 8000d0c:	4a3f      	ldr	r2, [pc, #252]	; (8000e0c <ADC_Frame+0x1a8>)
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d0e:	6030      	str	r0, [r6, #0]
			if (howManyFrames == 0)
 8000d10:	b98b      	cbnz	r3, 8000d36 <ADC_Frame+0xd2>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 8000d12:	2800      	cmp	r0, #0
 8000d14:	dd2e      	ble.n	8000d74 <ADC_Frame+0x110>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b94b      	cbnz	r3, 8000d2e <ADC_Frame+0xca>
					stringSounding[j] = 1;
 8000d1a:	2301      	movs	r3, #1
					SPI_PLUCK_TX[(j * 2) + 2] = (didPlucked[j] & 0xff);
 8000d1c:	f888 0002 	strb.w	r0, [r8, #2]
					pluckValues[j] = didPlucked[j];
 8000d20:	f8c9 0000 	str.w	r0, [r9]
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] >> 8);
 8000d24:	1200      	asrs	r0, r0, #8
					stringSounding[j] = 1;
 8000d26:	603b      	str	r3, [r7, #0]
					SPI_PLUCK_TX[(j * 2) + 1] = (didPlucked[j] >> 8);
 8000d28:	f888 0001 	strb.w	r0, [r8, #1]
					changeHappened = 1;
 8000d2c:	9300      	str	r3, [sp, #0]
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8000d2e:	882b      	ldrh	r3, [r5, #0]
 8000d30:	bb33      	cbnz	r3, 8000d80 <ADC_Frame+0x11c>
		for (int j = 0; j < 12; j++)
 8000d32:	2c0c      	cmp	r4, #12
 8000d34:	d034      	beq.n	8000da0 <ADC_Frame+0x13c>
 8000d36:	3401      	adds	r4, #1
 8000d38:	f108 0802 	add.w	r8, r8, #2
 8000d3c:	f109 0904 	add.w	r9, r9, #4
 8000d40:	3704      	adds	r7, #4
 8000d42:	3502      	adds	r5, #2
 8000d44:	3604      	adds	r6, #4
 8000d46:	1e60      	subs	r0, r4, #1
			int tempInt = string_values[j];
 8000d48:	f85a 1b04 	ldr.w	r1, [sl], #4
			if (j < 8)
 8000d4c:	2807      	cmp	r0, #7
 8000d4e:	d9d4      	bls.n	8000cfa <ADC_Frame+0x96>
				stringTouchRH[j] = (RHbits[1] >> (j-8)) & 1;
 8000d50:	6853      	ldr	r3, [r2, #4]
 8000d52:	f1a4 0c09 	sub.w	ip, r4, #9
 8000d56:	fa43 f30c 	asr.w	r3, r3, ip
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	802b      	strh	r3, [r5, #0]
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d60:	f7ff fe84 	bl	8000a6c <attackDetectPeak2>
			if (howManyFrames == 0)
 8000d64:	f8db 3000 	ldr.w	r3, [fp]
 8000d68:	4a28      	ldr	r2, [pc, #160]	; (8000e0c <ADC_Frame+0x1a8>)
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d6a:	6030      	str	r0, [r6, #0]
			if (howManyFrames == 0)
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1e0      	bne.n	8000d32 <ADC_Frame+0xce>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 8000d70:	2800      	cmp	r0, #0
 8000d72:	dcd0      	bgt.n	8000d16 <ADC_Frame+0xb2>
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8000d74:	882b      	ldrh	r3, [r5, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0db      	beq.n	8000d32 <ADC_Frame+0xce>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0d8      	beq.n	8000d32 <ADC_Frame+0xce>
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 8000d80:	f04f 0300 	mov.w	r3, #0
		for (int j = 0; j < 12; j++)
 8000d84:	2c0c      	cmp	r4, #12
					SPI_PLUCK_TX[(j * 2) + 1] = 0;
 8000d86:	f888 3001 	strb.w	r3, [r8, #1]
					SPI_PLUCK_TX[(j * 2) + 2] = 0;
 8000d8a:	f888 3002 	strb.w	r3, [r8, #2]
					pluckValues[j] = 0;
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	f8c9 3000 	str.w	r3, [r9]
					stringSounding[j] = 0;
 8000d96:	603b      	str	r3, [r7, #0]
					changeHappened = 1;
 8000d98:	f04f 0301 	mov.w	r3, #1
 8000d9c:	9300      	str	r3, [sp, #0]
		for (int j = 0; j < 12; j++)
 8000d9e:	d1ca      	bne.n	8000d36 <ADC_Frame+0xd2>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000da0:	9901      	ldr	r1, [sp, #4]
 8000da2:	9b02      	ldr	r3, [sp, #8]
 8000da4:	3118      	adds	r1, #24
 8000da6:	3301      	adds	r3, #1
 8000da8:	9101      	str	r1, [sp, #4]
 8000daa:	9904      	ldr	r1, [sp, #16]
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	428b      	cmp	r3, r1
 8000db0:	f77f af75 	ble.w	8000c9e <ADC_Frame+0x3a>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2101      	movs	r1, #1
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <ADC_Frame+0x19c>)
 8000dba:	f003 fa07 	bl	80041cc <HAL_GPIO_WritePin>
	if (changeHappened)
 8000dbe:	9b00      	ldr	r3, [sp, #0]
 8000dc0:	b1db      	cbz	r3, 8000dfa <ADC_Frame+0x196>
		SPI_PLUCK_TX[0] = 254;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <ADC_Frame+0x1b8>)
 8000dc4:	21fe      	movs	r1, #254	; 0xfe
		SPI_PLUCK_TX[25] = 253;
 8000dc6:	22fd      	movs	r2, #253	; 0xfd
		SPI_PLUCK_TX[0] = 254;
 8000dc8:	f883 1020 	strb.w	r1, [r3, #32]
		SPI_PLUCK_TX[25] = 253;
 8000dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000dd4:	9905      	ldr	r1, [sp, #20]
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <ADC_Frame+0x1bc>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000dd8:	f101 0220 	add.w	r2, r1, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000ddc:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
 8000de0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8000de4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000de8:	f3bf 8f6f 	isb	sy
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 26);
 8000dec:	221a      	movs	r2, #26
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <ADC_Frame+0x1c0>)
}
 8000df0:	b007      	add	sp, #28
 8000df2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 26);
 8000df6:	f005 bc41 	b.w	800667c <HAL_SPI_Transmit_DMA>
}
 8000dfa:	b007      	add	sp, #28
 8000dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e00:	58020c00 	.word	0x58020c00
 8000e04:	30000060 	.word	0x30000060
 8000e08:	240007a0 	.word	0x240007a0
 8000e0c:	2400009c 	.word	0x2400009c
 8000e10:	24000758 	.word	0x24000758
 8000e14:	24000788 	.word	0x24000788
 8000e18:	24000110 	.word	0x24000110
 8000e1c:	30000000 	.word	0x30000000
 8000e20:	e000ed00 	.word	0xe000ed00
 8000e24:	2400038c 	.word	0x2400038c
 8000e28:	24000000 	.word	0x24000000
 8000e2c:	24000668 	.word	0x24000668
 8000e30:	30000020 	.word	0x30000020

08000e34 <HAL_ADC_ConvCpltCallback>:
	ADC_Frame(ADC_FRAME_SIZE);
 8000e34:	2008      	movs	r0, #8
 8000e36:	f7ff bf15 	b.w	8000c64 <ADC_Frame>
 8000e3a:	bf00      	nop

08000e3c <HAL_ADC_ConvHalfCpltCallback>:
	ADC_Frame(0);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff bf11 	b.w	8000c64 <ADC_Frame>
 8000e42:	bf00      	nop

08000e44 <HAL_SPI_RxCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2110      	movs	r1, #16
 8000e48:	480a      	ldr	r0, [pc, #40]	; (8000e74 <HAL_SPI_RxCpltCallback+0x30>)
{
 8000e4a:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e4c:	f003 f9be 	bl	80041cc <HAL_GPIO_WritePin>
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_SPI_RxCpltCallback+0x34>)
 8000e52:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8000e56:	2afe      	cmp	r2, #254	; 0xfe
 8000e58:	d000      	beq.n	8000e5c <HAL_SPI_RxCpltCallback+0x18>
}
 8000e5a:	bd08      	pop	{r3, pc}
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000e5c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8000e60:	2afd      	cmp	r2, #253	; 0xfd
 8000e62:	d1fa      	bne.n	8000e5a <HAL_SPI_RxCpltCallback+0x16>
			RHbits[i] = SPI_RX[i+4];
 8000e64:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_SPI_RxCpltCallback+0x38>)
 8000e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e6e:	e9c2 1300 	strd	r1, r3, [r2]
}
 8000e72:	bd08      	pop	{r3, pc}
 8000e74:	58020400 	.word	0x58020400
 8000e78:	30000000 	.word	0x30000000
 8000e7c:	2400009c 	.word	0x2400009c

08000e80 <HAL_SPI_RxHalfCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2110      	movs	r1, #16
 8000e84:	480a      	ldr	r0, [pc, #40]	; (8000eb0 <HAL_SPI_RxHalfCpltCallback+0x30>)
{
 8000e86:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e88:	f003 f9a0 	bl	80041cc <HAL_GPIO_WritePin>
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_SPI_RxHalfCpltCallback+0x34>)
 8000e8e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000e92:	2afe      	cmp	r2, #254	; 0xfe
 8000e94:	d000      	beq.n	8000e98 <HAL_SPI_RxHalfCpltCallback+0x18>
}
 8000e96:	bd08      	pop	{r3, pc}
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 8000e98:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000e9c:	2afd      	cmp	r2, #253	; 0xfd
 8000e9e:	d1fa      	bne.n	8000e96 <HAL_SPI_RxHalfCpltCallback+0x16>
			RHbits[i] = SPI_RX[i];
 8000ea0:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_SPI_RxHalfCpltCallback+0x38>)
 8000ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000eaa:	e9c2 1300 	strd	r1, r3, [r2]
}
 8000eae:	bd08      	pop	{r3, pc}
 8000eb0:	58020400 	.word	0x58020400
 8000eb4:	30000000 	.word	0x30000000
 8000eb8:	2400009c 	.word	0x2400009c

08000ebc <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <Error_Handler+0x2>

08000ec0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_MspInit+0x20>)
{
 8000ec2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ec8:	f042 0202 	orr.w	r2, r2, #2
 8000ecc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000edc:	b002      	add	sp, #8
 8000ede:	4770      	bx	lr
 8000ee0:	58024400 	.word	0x58024400

08000ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b570      	push	{r4, r5, r6, lr}
 8000ee6:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	2100      	movs	r1, #0
{
 8000eea:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	22b8      	movs	r2, #184	; 0xb8
 8000eee:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	9108      	str	r1, [sp, #32]
 8000ef2:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000ef6:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000efa:	f006 fb7b 	bl	80075f4 <memset>
  if(hadc->Instance==ADC1)
 8000efe:	4b4f      	ldr	r3, [pc, #316]	; (800103c <HAL_ADC_MspInit+0x158>)
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d001      	beq.n	8000f0a <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f06:	b038      	add	sp, #224	; 0xe0
 8000f08:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f0e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f10:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f12:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000f16:	2219      	movs	r2, #25
 8000f18:	23dc      	movs	r3, #220	; 0xdc
 8000f1a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000f1e:	2204      	movs	r2, #4
 8000f20:	2302      	movs	r3, #2
 8000f22:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f26:	f44f 7300 	mov.w	r3, #512	; 0x200
    PeriphClkInitStruct.PLL3.PLL3R = 5;
 8000f2a:	2205      	movs	r2, #5
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f2c:	931a      	str	r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.PLL3.PLL3R = 5;
 8000f32:	9218      	str	r2, [sp, #96]	; 0x60
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000f34:	9332      	str	r3, [sp, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f36:	f003 ffef 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d177      	bne.n	800102e <HAL_ADC_MspInit+0x14a>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f3e:	4b40      	ldr	r3, [pc, #256]	; (8001040 <HAL_ADC_MspInit+0x15c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	4840      	ldr	r0, [pc, #256]	; (8001044 <HAL_ADC_MspInit+0x160>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f44:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    hdma_adc1.Instance = DMA1_Stream2;
 8000f48:	4d3f      	ldr	r5, [pc, #252]	; (8001048 <HAL_ADC_MspInit+0x164>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f4a:	f042 0220 	orr.w	r2, r2, #32
 8000f4e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000f52:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f56:	f002 0220 	and.w	r2, r2, #32
 8000f5a:	9200      	str	r2, [sp, #0]
 8000f5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f6e:	f002 0201 	and.w	r2, r2, #1
 8000f72:	9201      	str	r2, [sp, #4]
 8000f74:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f7a:	f042 0204 	orr.w	r2, r2, #4
 8000f7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f86:	f002 0204 	and.w	r2, r2, #4
 8000f8a:	9202      	str	r2, [sp, #8]
 8000f8c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f92:	f042 0202 	orr.w	r2, r2, #2
 8000f96:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f9a:	22ff      	movs	r2, #255	; 0xff
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fa8:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fae:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f002 ffcf 	bl	8003f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fb6:	2230      	movs	r2, #48	; 0x30
 8000fb8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	a904      	add	r1, sp, #16
 8000fbc:	4823      	ldr	r0, [pc, #140]	; (800104c <HAL_ADC_MspInit+0x168>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f002 ffc6 	bl	8003f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fc8:	2203      	movs	r2, #3
 8000fca:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	4820      	ldr	r0, [pc, #128]	; (8001050 <HAL_ADC_MspInit+0x16c>)
 8000fce:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f002 ffbd 	bl	8003f54 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream2;
 8000fda:	4a1e      	ldr	r2, [pc, #120]	; (8001054 <HAL_ADC_MspInit+0x170>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fdc:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fde:	4628      	mov	r0, r5
    hdma_adc1.Instance = DMA1_Stream2;
 8000fe0:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fe6:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fec:	612a      	str	r2, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff2:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff8:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffa:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000ffc:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ffe:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001000:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001002:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001006:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800100a:	2304      	movs	r3, #4
 800100c:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001010:	f001 fcea 	bl	80029e8 <HAL_DMA_Init>
 8001014:	b970      	cbnz	r0, 8001034 <HAL_ADC_MspInit+0x150>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800101a:	65a5      	str	r5, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800101c:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800101e:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001020:	f001 fb4c 	bl	80026bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001024:	2012      	movs	r0, #18
 8001026:	f001 fb87 	bl	8002738 <HAL_NVIC_EnableIRQ>
}
 800102a:	b038      	add	sp, #224	; 0xe0
 800102c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800102e:	f7ff ff45 	bl	8000ebc <Error_Handler>
 8001032:	e784      	b.n	8000f3e <HAL_ADC_MspInit+0x5a>
      Error_Handler();
 8001034:	f7ff ff42 	bl	8000ebc <Error_Handler>
 8001038:	e7ed      	b.n	8001016 <HAL_ADC_MspInit+0x132>
 800103a:	bf00      	nop
 800103c:	40022000 	.word	0x40022000
 8001040:	58024400 	.word	0x58024400
 8001044:	58020000 	.word	0x58020000
 8001048:	24000210 	.word	0x24000210
 800104c:	58020800 	.word	0x58020800
 8001050:	58020400 	.word	0x58020400
 8001054:	40020040 	.word	0x40020040

08001058 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001058:	b510      	push	{r4, lr}
 800105a:	b0b0      	sub	sp, #192	; 0xc0
 800105c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105e:	22b8      	movs	r2, #184	; 0xb8
 8001060:	2100      	movs	r1, #0
 8001062:	a802      	add	r0, sp, #8
 8001064:	f006 fac6 	bl	80075f4 <memset>
  if(hrng->Instance==RNG)
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_RNG_MspInit+0x54>)
 800106a:	6822      	ldr	r2, [r4, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <HAL_RNG_MspInit+0x1c>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001070:	b030      	add	sp, #192	; 0xc0
 8001072:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001074:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001078:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107a:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800107c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001080:	f003 ff4a 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	b970      	cbnz	r0, 80010a4 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_RNG_MspInit+0x58>)
 8001088:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800108c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001090:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8001094:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	9b01      	ldr	r3, [sp, #4]
}
 80010a0:	b030      	add	sp, #192	; 0xc0
 80010a2:	bd10      	pop	{r4, pc}
      Error_Handler();
 80010a4:	f7ff ff0a 	bl	8000ebc <Error_Handler>
 80010a8:	e7ed      	b.n	8001086 <HAL_RNG_MspInit+0x2e>
 80010aa:	bf00      	nop
 80010ac:	48021800 	.word	0x48021800
 80010b0:	58024400 	.word	0x58024400

080010b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80010b8:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	2100      	movs	r1, #0
{
 80010bc:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010be:	22b8      	movs	r2, #184	; 0xb8
 80010c0:	a80e      	add	r0, sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	910c      	str	r1, [sp, #48]	; 0x30
 80010c4:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80010c8:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f006 fa92 	bl	80075f4 <memset>
  if(hspi->Instance==SPI1)
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	4a9f      	ldr	r2, [pc, #636]	; (8001350 <HAL_SPI_MspInit+0x29c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d009      	beq.n	80010ec <HAL_SPI_MspInit+0x38>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80010d8:	4a9e      	ldr	r2, [pc, #632]	; (8001354 <HAL_SPI_MspInit+0x2a0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d07c      	beq.n	80011d8 <HAL_SPI_MspInit+0x124>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80010de:	4a9e      	ldr	r2, [pc, #632]	; (8001358 <HAL_SPI_MspInit+0x2a4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	f000 80d6 	beq.w	8001292 <HAL_SPI_MspInit+0x1de>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010e6:	b03c      	add	sp, #240	; 0xf0
 80010e8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010f0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f8:	f003 ff0e 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	2800      	cmp	r0, #0
 80010fe:	f040 811a 	bne.w	8001336 <HAL_SPI_MspInit+0x282>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001102:	4b96      	ldr	r3, [pc, #600]	; (800135c <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001104:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001106:	f04f 0800 	mov.w	r8, #0
 800110a:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001112:	4893      	ldr	r0, [pc, #588]	; (8001360 <HAL_SPI_MspInit+0x2ac>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001114:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001118:	4d92      	ldr	r5, [pc, #584]	; (8001364 <HAL_SPI_MspInit+0x2b0>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800111a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800111e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001122:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800112a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800112e:	f042 0208 	orr.w	r2, r2, #8
 8001132:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001136:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800113a:	f002 0208 	and.w	r2, r2, #8
 800113e:	9201      	str	r2, [sp, #4]
 8001140:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001142:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800114a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800114e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001154:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800115c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800115e:	9902      	ldr	r1, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001160:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001162:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001166:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116a:	f002 fef3 	bl	8003f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800116e:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8001172:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001174:	a908      	add	r1, sp, #32
 8001176:	487c      	ldr	r0, [pc, #496]	; (8001368 <HAL_SPI_MspInit+0x2b4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001178:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800117a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800117e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001182:	f002 fee7 	bl	8003f54 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001186:	4979      	ldr	r1, [pc, #484]	; (800136c <HAL_SPI_MspInit+0x2b8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001188:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118a:	2300      	movs	r3, #0
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800118c:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118e:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001190:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001192:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001196:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001198:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800119c:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800119e:	2204      	movs	r2, #4
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011a0:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a2:	60eb      	str	r3, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a4:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a6:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011a8:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011ac:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011b0:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011b4:	f001 fc18 	bl	80029e8 <HAL_DMA_Init>
 80011b8:	2800      	cmp	r0, #0
 80011ba:	f040 80b9 	bne.w	8001330 <HAL_SPI_MspInit+0x27c>
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2101      	movs	r1, #1
 80011c2:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011c4:	67a5      	str	r5, [r4, #120]	; 0x78
 80011c6:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80011c8:	f001 fa78 	bl	80026bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011cc:	2023      	movs	r0, #35	; 0x23
 80011ce:	f001 fab3 	bl	8002738 <HAL_NVIC_EnableIRQ>
}
 80011d2:	b03c      	add	sp, #240	; 0xf0
 80011d4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011dc:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011de:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e4:	f003 fe98 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	2800      	cmp	r0, #0
 80011ea:	f040 80a7 	bne.w	800133c <HAL_SPI_MspInit+0x288>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011ee:	4b5b      	ldr	r3, [pc, #364]	; (800135c <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011f0:	2005      	movs	r0, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	a908      	add	r1, sp, #32
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011f4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80011f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011fc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001200:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001204:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001208:	9203      	str	r2, [sp, #12]
 800120a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001210:	f042 0202 	orr.w	r2, r2, #2
 8001214:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001218:	f44f 4270 	mov.w	r2, #61440	; 0xf000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001220:	900c      	str	r0, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	4852      	ldr	r0, [pc, #328]	; (8001370 <HAL_SPI_MspInit+0x2bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800122a:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	9d04      	ldr	r5, [sp, #16]
    hdma_spi2_rx.Instance = DMA1_Stream1;
 800122e:	4d51      	ldr	r5, [pc, #324]	; (8001374 <HAL_SPI_MspInit+0x2c0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001230:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001234:	2200      	movs	r2, #0
 8001236:	2302      	movs	r3, #2
 8001238:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f002 fe8a 	bl	8003f54 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001240:	494d      	ldr	r1, [pc, #308]	; (8001378 <HAL_SPI_MspInit+0x2c4>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001242:	2227      	movs	r2, #39	; 0x27
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001244:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001246:	4628      	mov	r0, r5
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001248:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800124a:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800124e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001252:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001256:	6129      	str	r1, [r5, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001258:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800125c:	61ea      	str	r2, [r5, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800125e:	2204      	movs	r2, #4
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001260:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001264:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001268:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800126c:	e9c5 1208 	strd	r1, r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001270:	f001 fbba 	bl	80029e8 <HAL_DMA_Init>
 8001274:	2800      	cmp	r0, #0
 8001276:	d164      	bne.n	8001342 <HAL_SPI_MspInit+0x28e>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2102      	movs	r1, #2
 800127c:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800127e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001280:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001282:	f001 fa1b 	bl	80026bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001286:	2024      	movs	r0, #36	; 0x24
 8001288:	f001 fa56 	bl	8002738 <HAL_NVIC_EnableIRQ>
}
 800128c:	b03c      	add	sp, #240	; 0xf0
 800128e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001296:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001298:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800129a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129e:	f003 fe3b 	bl	8004f18 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d150      	bne.n	8001348 <HAL_SPI_MspInit+0x294>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012ac:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ae:	2406      	movs	r4, #6
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012b0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012b4:	f04f 0800 	mov.w	r8, #0
 80012b8:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012c0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80012c4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80012c8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80012cc:	9205      	str	r2, [sp, #20]
 80012ce:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012d4:	f042 0201 	orr.w	r2, r2, #1
 80012d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012e0:	f002 0201 	and.w	r2, r2, #1
 80012e4:	9206      	str	r2, [sp, #24]
 80012e6:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012ec:	f042 0204 	orr.w	r2, r2, #4
 80012f0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012f8:	940c      	str	r4, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	a908      	add	r1, sp, #32
 8001306:	481d      	ldr	r0, [pc, #116]	; (800137c <HAL_SPI_MspInit+0x2c8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800130a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f002 fe21 	bl	8003f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001312:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001316:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	a908      	add	r1, sp, #32
 800131a:	4819      	ldr	r0, [pc, #100]	; (8001380 <HAL_SPI_MspInit+0x2cc>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800131c:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800131e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8001322:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001326:	f002 fe15 	bl	8003f54 <HAL_GPIO_Init>
}
 800132a:	b03c      	add	sp, #240	; 0xf0
 800132c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 8001330:	f7ff fdc4 	bl	8000ebc <Error_Handler>
 8001334:	e743      	b.n	80011be <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 8001336:	f7ff fdc1 	bl	8000ebc <Error_Handler>
 800133a:	e6e2      	b.n	8001102 <HAL_SPI_MspInit+0x4e>
      Error_Handler();
 800133c:	f7ff fdbe 	bl	8000ebc <Error_Handler>
 8001340:	e755      	b.n	80011ee <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 8001342:	f7ff fdbb 	bl	8000ebc <Error_Handler>
 8001346:	e797      	b.n	8001278 <HAL_SPI_MspInit+0x1c4>
      Error_Handler();
 8001348:	f7ff fdb8 	bl	8000ebc <Error_Handler>
 800134c:	e7ab      	b.n	80012a6 <HAL_SPI_MspInit+0x1f2>
 800134e:	bf00      	nop
 8001350:	40013000 	.word	0x40013000
 8001354:	40003800 	.word	0x40003800
 8001358:	40003c00 	.word	0x40003c00
 800135c:	58024400 	.word	0x58024400
 8001360:	58020c00 	.word	0x58020c00
 8001364:	24000288 	.word	0x24000288
 8001368:	58021800 	.word	0x58021800
 800136c:	40020010 	.word	0x40020010
 8001370:	58020400 	.word	0x58020400
 8001374:	24000300 	.word	0x24000300
 8001378:	40020028 	.word	0x40020028
 800137c:	58020000 	.word	0x58020000
 8001380:	58020800 	.word	0x58020800

08001384 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <NMI_Handler>
 8001386:	bf00      	nop

08001388 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <HardFault_Handler>
 800138a:	bf00      	nop

0800138c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <MemManage_Handler>
 800138e:	bf00      	nop

08001390 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <BusFault_Handler>
 8001392:	bf00      	nop

08001394 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler>
 8001396:	bf00      	nop

08001398 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <DebugMon_Handler>:
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <PendSV_Handler>:
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop

080013a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f000 b8fa 	b.w	800159c <HAL_IncTick>

080013a8 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80013a8:	4801      	ldr	r0, [pc, #4]	; (80013b0 <DMA1_Stream0_IRQHandler+0x8>)
 80013aa:	f002 b96d 	b.w	8003688 <HAL_DMA_IRQHandler>
 80013ae:	bf00      	nop
 80013b0:	24000288 	.word	0x24000288

080013b4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80013b4:	4801      	ldr	r0, [pc, #4]	; (80013bc <DMA1_Stream1_IRQHandler+0x8>)
 80013b6:	f002 b967 	b.w	8003688 <HAL_DMA_IRQHandler>
 80013ba:	bf00      	nop
 80013bc:	24000300 	.word	0x24000300

080013c0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013c0:	4801      	ldr	r0, [pc, #4]	; (80013c8 <DMA1_Stream2_IRQHandler+0x8>)
 80013c2:	f002 b961 	b.w	8003688 <HAL_DMA_IRQHandler>
 80013c6:	bf00      	nop
 80013c8:	24000210 	.word	0x24000210

080013cc <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013cc:	4801      	ldr	r0, [pc, #4]	; (80013d4 <ADC_IRQHandler+0x8>)
 80013ce:	f000 b913 	b.w	80015f8 <HAL_ADC_IRQHandler>
 80013d2:	bf00      	nop
 80013d4:	240001a0 	.word	0x240001a0

080013d8 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013d8:	4801      	ldr	r0, [pc, #4]	; (80013e0 <SPI1_IRQHandler+0x8>)
 80013da:	f005 bbc3 	b.w	8006b64 <HAL_SPI_IRQHandler>
 80013de:	bf00      	nop
 80013e0:	2400038c 	.word	0x2400038c

080013e4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80013e4:	4801      	ldr	r0, [pc, #4]	; (80013ec <SPI2_IRQHandler+0x8>)
 80013e6:	f005 bbbd 	b.w	8006b64 <HAL_SPI_IRQHandler>
 80013ea:	bf00      	nop
 80013ec:	24000418 	.word	0x24000418

080013f0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f0:	4922      	ldr	r1, [pc, #136]	; (800147c <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f2:	4a23      	ldr	r2, [pc, #140]	; (8001480 <SystemInit+0x90>)
{
 80013f4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80013fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	2b06      	cmp	r3, #6
 800140a:	d805      	bhi.n	8001418 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800140c:	6813      	ldr	r3, [r2, #0]
 800140e:	f023 030f 	bic.w	r3, r3, #15
 8001412:	f043 0307 	orr.w	r3, r3, #7
 8001416:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800141a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800141c:	4a1a      	ldr	r2, [pc, #104]	; (8001488 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 800141e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001420:	4817      	ldr	r0, [pc, #92]	; (8001480 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8001422:	f041 0101 	orr.w	r1, r1, #1
 8001426:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001428:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800142a:	6819      	ldr	r1, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001430:	6803      	ldr	r3, [r0, #0]
 8001432:	071b      	lsls	r3, r3, #28
 8001434:	d505      	bpl.n	8001442 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001436:	6803      	ldr	r3, [r0, #0]
 8001438:	f023 030f 	bic.w	r3, r3, #15
 800143c:	f043 0307 	orr.w	r3, r3, #7
 8001440:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <SystemInit+0x94>)
 8001444:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001446:	4911      	ldr	r1, [pc, #68]	; (800148c <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8001448:	4c11      	ldr	r4, [pc, #68]	; (8001490 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 800144c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800144e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001450:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001452:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001454:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8001458:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800145a:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 800145e:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8001460:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8001462:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8001464:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8001466:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 800146a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800146e:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001470:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001472:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	52002000 	.word	0x52002000
 8001484:	58024400 	.word	0x58024400
 8001488:	eaf6ed7f 	.word	0xeaf6ed7f
 800148c:	01010280 	.word	0x01010280
 8001490:	02020200 	.word	0x02020200
 8001494:	01ff0000 	.word	0x01ff0000
 8001498:	52004000 	.word	0x52004000

0800149c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014a0:	f7ff ffa6 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014a6:	490d      	ldr	r1, [pc, #52]	; (80014dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014bc:	4c0a      	ldr	r4, [pc, #40]	; (80014e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ca:	f006 f86f 	bl	80075ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ce:	f7fe ffb3 	bl	8000438 <main>
  bx  lr
 80014d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014dc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80014e0:	08008df4 	.word	0x08008df4
  ldr r2, =_sbss
 80014e4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80014e8:	24000808 	.word	0x24000808

080014ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC3_IRQHandler>
	...

080014f0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_InitTick+0x40>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b90b      	cbnz	r3, 80014fa <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80014f6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014f8:	4770      	bx	lr
{
 80014fa:	b510      	push	{r4, lr}
 80014fc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <HAL_InitTick+0x44>)
 8001504:	fbb0 f3f3 	udiv	r3, r0, r3
 8001508:	6810      	ldr	r0, [r2, #0]
 800150a:	fbb0 f0f3 	udiv	r0, r0, r3
 800150e:	f001 f921 	bl	8002754 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	2c0f      	cmp	r4, #15
 8001514:	d800      	bhi.n	8001518 <HAL_InitTick+0x28>
 8001516:	b108      	cbz	r0, 800151c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001518:	2001      	movs	r0, #1
}
 800151a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	4621      	mov	r1, r4
 8001520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001524:	f001 f8ca 	bl	80026bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_InitTick+0x48>)
 800152a:	2000      	movs	r0, #0
 800152c:	601c      	str	r4, [r3, #0]
}
 800152e:	bd10      	pop	{r4, pc}
 8001530:	2400000c 	.word	0x2400000c
 8001534:	24000004 	.word	0x24000004
 8001538:	24000010 	.word	0x24000010

0800153c <HAL_Init>:
{
 800153c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153e:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001540:	4c12      	ldr	r4, [pc, #72]	; (800158c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001542:	f001 f8a9 	bl	8002698 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001546:	f003 f997 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_Init+0x54>)
 800154c:	4911      	ldr	r1, [pc, #68]	; (8001594 <HAL_Init+0x58>)
 800154e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001550:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001552:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001556:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800155a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800155c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800155e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001562:	490d      	ldr	r1, [pc, #52]	; (8001598 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001564:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001568:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800156a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800156e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001570:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001572:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001574:	f7ff ffbc 	bl	80014f0 <HAL_InitTick>
 8001578:	b110      	cbz	r0, 8001580 <HAL_Init+0x44>
    return HAL_ERROR;
 800157a:	2401      	movs	r4, #1
}
 800157c:	4620      	mov	r0, r4
 800157e:	bd10      	pop	{r4, pc}
 8001580:	4604      	mov	r4, r0
  HAL_MspInit();
 8001582:	f7ff fc9d 	bl	8000ec0 <HAL_MspInit>
}
 8001586:	4620      	mov	r0, r4
 8001588:	bd10      	pop	{r4, pc}
 800158a:	bf00      	nop
 800158c:	24000008 	.word	0x24000008
 8001590:	58024400 	.word	0x58024400
 8001594:	08008670 	.word	0x08008670
 8001598:	24000004 	.word	0x24000004

0800159c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800159c:	4a03      	ldr	r2, [pc, #12]	; (80015ac <HAL_IncTick+0x10>)
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <HAL_IncTick+0x14>)
 80015a0:	6811      	ldr	r1, [r2, #0]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	440b      	add	r3, r1
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	24000804 	.word	0x24000804
 80015b0:	2400000c 	.word	0x2400000c

080015b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015b4:	4b01      	ldr	r3, [pc, #4]	; (80015bc <HAL_GetTick+0x8>)
 80015b6:	6818      	ldr	r0, [r3, #0]
}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	24000804 	.word	0x24000804

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b538      	push	{r3, r4, r5, lr}
 80015c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff fff6 	bl	80015b4 <HAL_GetTick>
 80015c8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	1c63      	adds	r3, r4, #1
 80015cc:	d002      	beq.n	80015d4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_Delay+0x20>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d4:	f7ff ffee 	bl	80015b4 <HAL_GetTick>
 80015d8:	1b43      	subs	r3, r0, r5
 80015da:	42a3      	cmp	r3, r4
 80015dc:	d3fa      	bcc.n	80015d4 <HAL_Delay+0x14>
  {
  }
}
 80015de:	bd38      	pop	{r3, r4, r5, pc}
 80015e0:	2400000c 	.word	0x2400000c

080015e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80015e4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80015e8:	f7ff fc28 	bl	8000e3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015ec:	bd08      	pop	{r3, pc}
 80015ee:	bf00      	nop

080015f0 <HAL_ADC_LevelOutOfWindowCallback>:
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <HAL_ADC_ErrorCallback>:
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <HAL_ADC_IRQHandler>:
{
 80015f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015fa:	4a8f      	ldr	r2, [pc, #572]	; (8001838 <HAL_ADC_IRQHandler+0x240>)
{
 80015fc:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015fe:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001600:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001602:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001604:	685f      	ldr	r7, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001606:	f000 8097 	beq.w	8001738 <HAL_ADC_IRQHandler+0x140>
 800160a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800160e:	4293      	cmp	r3, r2
 8001610:	f000 8092 	beq.w	8001738 <HAL_ADC_IRQHandler+0x140>
 8001614:	4b89      	ldr	r3, [pc, #548]	; (800183c <HAL_ADC_IRQHandler+0x244>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001616:	689d      	ldr	r5, [r3, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001618:	07b0      	lsls	r0, r6, #30
 800161a:	f005 051f 	and.w	r5, r5, #31
 800161e:	d502      	bpl.n	8001626 <HAL_ADC_IRQHandler+0x2e>
 8001620:	07b9      	lsls	r1, r7, #30
 8001622:	f100 80ad 	bmi.w	8001780 <HAL_ADC_IRQHandler+0x188>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001626:	0773      	lsls	r3, r6, #29
 8001628:	d57b      	bpl.n	8001722 <HAL_ADC_IRQHandler+0x12a>
 800162a:	0778      	lsls	r0, r7, #29
 800162c:	d579      	bpl.n	8001722 <HAL_ADC_IRQHandler+0x12a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800162e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001630:	06db      	lsls	r3, r3, #27
 8001632:	d403      	bmi.n	800163c <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001634:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	6623      	str	r3, [r4, #96]	; 0x60
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800163c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001644:	d11c      	bne.n	8001680 <HAL_ADC_IRQHandler+0x88>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001646:	4a7e      	ldr	r2, [pc, #504]	; (8001840 <HAL_ADC_IRQHandler+0x248>)
 8001648:	4293      	cmp	r3, r2
 800164a:	f000 80eb 	beq.w	8001824 <HAL_ADC_IRQHandler+0x22c>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800164e:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001650:	0490      	lsls	r0, r2, #18
 8001652:	d415      	bmi.n	8001680 <HAL_ADC_IRQHandler+0x88>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	0711      	lsls	r1, r2, #28
 8001658:	d512      	bpl.n	8001680 <HAL_ADC_IRQHandler+0x88>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	0752      	lsls	r2, r2, #29
 800165e:	f100 80fa 	bmi.w	8001856 <HAL_ADC_IRQHandler+0x25e>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	f022 020c 	bic.w	r2, r2, #12
 8001668:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800166a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800166c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001670:	6623      	str	r3, [r4, #96]	; 0x60
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001672:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001674:	04d8      	lsls	r0, r3, #19
 8001676:	d403      	bmi.n	8001680 <HAL_ADC_IRQHandler+0x88>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001678:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8001680:	4620      	mov	r0, r4
 8001682:	f7ff fbd7 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	220c      	movs	r2, #12
 800168a:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800168c:	06b1      	lsls	r1, r6, #26
 800168e:	d54e      	bpl.n	800172e <HAL_ADC_IRQHandler+0x136>
 8001690:	06ba      	lsls	r2, r7, #26
 8001692:	d54c      	bpl.n	800172e <HAL_ADC_IRQHandler+0x136>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001694:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001696:	06d9      	lsls	r1, r3, #27
 8001698:	d403      	bmi.n	80016a2 <HAL_ADC_IRQHandler+0xaa>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800169a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800169c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a0:	6623      	str	r3, [r4, #96]	; 0x60
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80016a2:	6823      	ldr	r3, [r4, #0]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016a4:	4966      	ldr	r1, [pc, #408]	; (8001840 <HAL_ADC_IRQHandler+0x248>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a8:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016aa:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016ac:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 80016b0:	d074      	beq.n	800179c <HAL_ADC_IRQHandler+0x1a4>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016b2:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80016b4:	b9d2      	cbnz	r2, 80016ec <HAL_ADC_IRQHandler+0xf4>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80016b6:	018a      	lsls	r2, r1, #6
 80016b8:	f100 80ac 	bmi.w	8001814 <HAL_ADC_IRQHandler+0x21c>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	0650      	lsls	r0, r2, #25
 80016c0:	d514      	bpl.n	80016ec <HAL_ADC_IRQHandler+0xf4>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80016c2:	0289      	lsls	r1, r1, #10
 80016c4:	d412      	bmi.n	80016ec <HAL_ADC_IRQHandler+0xf4>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	0712      	lsls	r2, r2, #28
 80016ca:	f100 80cf 	bmi.w	800186c <HAL_ADC_IRQHandler+0x274>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016d4:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016dc:	6623      	str	r3, [r4, #96]	; 0x60
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016e0:	05db      	lsls	r3, r3, #23
 80016e2:	d403      	bmi.n	80016ec <HAL_ADC_IRQHandler+0xf4>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016ec:	4620      	mov	r0, r4
 80016ee:	f000 ff43 	bl	8002578 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	2260      	movs	r2, #96	; 0x60
 80016f6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016f8:	0630      	lsls	r0, r6, #24
 80016fa:	d501      	bpl.n	8001700 <HAL_ADC_IRQHandler+0x108>
 80016fc:	0639      	lsls	r1, r7, #24
 80016fe:	d461      	bmi.n	80017c4 <HAL_ADC_IRQHandler+0x1cc>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001700:	05f2      	lsls	r2, r6, #23
 8001702:	d501      	bpl.n	8001708 <HAL_ADC_IRQHandler+0x110>
 8001704:	05fb      	lsls	r3, r7, #23
 8001706:	d468      	bmi.n	80017da <HAL_ADC_IRQHandler+0x1e2>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001708:	05b0      	lsls	r0, r6, #22
 800170a:	d501      	bpl.n	8001710 <HAL_ADC_IRQHandler+0x118>
 800170c:	05b9      	lsls	r1, r7, #22
 800170e:	d44d      	bmi.n	80017ac <HAL_ADC_IRQHandler+0x1b4>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001710:	06f2      	lsls	r2, r6, #27
 8001712:	d501      	bpl.n	8001718 <HAL_ADC_IRQHandler+0x120>
 8001714:	06fb      	lsls	r3, r7, #27
 8001716:	d411      	bmi.n	800173c <HAL_ADC_IRQHandler+0x144>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001718:	0570      	lsls	r0, r6, #21
 800171a:	d501      	bpl.n	8001720 <HAL_ADC_IRQHandler+0x128>
 800171c:	0579      	lsls	r1, r7, #21
 800171e:	d468      	bmi.n	80017f2 <HAL_ADC_IRQHandler+0x1fa>
}
 8001720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001722:	0731      	lsls	r1, r6, #28
 8001724:	d5b2      	bpl.n	800168c <HAL_ADC_IRQHandler+0x94>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001726:	073a      	lsls	r2, r7, #28
 8001728:	d481      	bmi.n	800162e <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800172a:	06b1      	lsls	r1, r6, #26
 800172c:	d4b0      	bmi.n	8001690 <HAL_ADC_IRQHandler+0x98>
 800172e:	0673      	lsls	r3, r6, #25
 8001730:	d5e2      	bpl.n	80016f8 <HAL_ADC_IRQHandler+0x100>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001732:	0678      	lsls	r0, r7, #25
 8001734:	d5e0      	bpl.n	80016f8 <HAL_ADC_IRQHandler+0x100>
 8001736:	e7ad      	b.n	8001694 <HAL_ADC_IRQHandler+0x9c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <HAL_ADC_IRQHandler+0x24c>)
 800173a:	e76c      	b.n	8001616 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800173c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800173e:	b183      	cbz	r3, 8001762 <HAL_ADC_IRQHandler+0x16a>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001740:	6823      	ldr	r3, [r4, #0]
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001742:	2d00      	cmp	r5, #0
 8001744:	d073      	beq.n	800182e <HAL_ADC_IRQHandler+0x236>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001746:	4a3c      	ldr	r2, [pc, #240]	; (8001838 <HAL_ADC_IRQHandler+0x240>)
 8001748:	4293      	cmp	r3, r2
 800174a:	f000 808d 	beq.w	8001868 <HAL_ADC_IRQHandler+0x270>
 800174e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001752:	4293      	cmp	r3, r2
 8001754:	f000 8088 	beq.w	8001868 <HAL_ADC_IRQHandler+0x270>
 8001758:	4a38      	ldr	r2, [pc, #224]	; (800183c <HAL_ADC_IRQHandler+0x244>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800175a:	6892      	ldr	r2, [r2, #8]
 800175c:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8001760:	d00b      	beq.n	800177a <HAL_ADC_IRQHandler+0x182>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001762:	6e23      	ldr	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8001764:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176a:	6623      	str	r3, [r4, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800176c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	6663      	str	r3, [r4, #100]	; 0x64
      HAL_ADC_ErrorCallback(hadc);
 8001774:	f7ff ff3e 	bl	80015f4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	2210      	movs	r2, #16
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e7cb      	b.n	8001718 <HAL_ADC_IRQHandler+0x120>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001780:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001782:	06da      	lsls	r2, r3, #27
 8001784:	d403      	bmi.n	800178e <HAL_ADC_IRQHandler+0x196>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001786:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800178c:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800178e:	4620      	mov	r0, r4
 8001790:	f000 fefa 	bl	8002588 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	2202      	movs	r2, #2
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e744      	b.n	8001626 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800179c:	1fa9      	subs	r1, r5, #6
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800179e:	2901      	cmp	r1, #1
 80017a0:	d987      	bls.n	80016b2 <HAL_ADC_IRQHandler+0xba>
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d085      	beq.n	80016b2 <HAL_ADC_IRQHandler+0xba>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017a6:	4924      	ldr	r1, [pc, #144]	; (8001838 <HAL_ADC_IRQHandler+0x240>)
 80017a8:	68c9      	ldr	r1, [r1, #12]
 80017aa:	e783      	b.n	80016b4 <HAL_ADC_IRQHandler+0xbc>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017ae:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b4:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017b6:	f000 fee5 	bl	8002584 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e7a5      	b.n	8001710 <HAL_ADC_IRQHandler+0x118>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017c6:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017cc:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017ce:	f7ff ff0f 	bl	80015f0 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e792      	b.n	8001700 <HAL_ADC_IRQHandler+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017da:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017dc:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e2:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017e4:	f000 fecc 	bl	8002580 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e78a      	b.n	8001708 <HAL_ADC_IRQHandler+0x110>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f8:	6822      	ldr	r2, [r4, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017fa:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	6623      	str	r3, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6663      	str	r3, [r4, #100]	; 0x64
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800180a:	6011      	str	r1, [r2, #0]
}
 800180c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001810:	f000 beb4 	b.w	800257c <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001814:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001818:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800181c:	4302      	orrs	r2, r0
 800181e:	f47f af65 	bne.w	80016ec <HAL_ADC_IRQHandler+0xf4>
 8001822:	e74b      	b.n	80016bc <HAL_ADC_IRQHandler+0xc4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001824:	2d09      	cmp	r5, #9
 8001826:	d90f      	bls.n	8001848 <HAL_ADC_IRQHandler+0x250>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001828:	4a03      	ldr	r2, [pc, #12]	; (8001838 <HAL_ADC_IRQHandler+0x240>)
 800182a:	68d2      	ldr	r2, [r2, #12]
 800182c:	e710      	b.n	8001650 <HAL_ADC_IRQHandler+0x58>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	0795      	lsls	r5, r2, #30
 8001832:	d0a2      	beq.n	800177a <HAL_ADC_IRQHandler+0x182>
 8001834:	e795      	b.n	8001762 <HAL_ADC_IRQHandler+0x16a>
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000
 800183c:	58026300 	.word	0x58026300
 8001840:	40022100 	.word	0x40022100
 8001844:	40022300 	.word	0x40022300
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001848:	f240 2221 	movw	r2, #545	; 0x221
 800184c:	40ea      	lsrs	r2, r5
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800184e:	07d2      	lsls	r2, r2, #31
 8001850:	f53f aefd 	bmi.w	800164e <HAL_ADC_IRQHandler+0x56>
 8001854:	e7e8      	b.n	8001828 <HAL_ADC_IRQHandler+0x230>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001856:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6663      	str	r3, [r4, #100]	; 0x64
 8001866:	e70b      	b.n	8001680 <HAL_ADC_IRQHandler+0x88>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001868:	4a05      	ldr	r2, [pc, #20]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 800186a:	e776      	b.n	800175a <HAL_ADC_IRQHandler+0x162>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	6623      	str	r3, [r4, #96]	; 0x60
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6663      	str	r3, [r4, #100]	; 0x64
 800187c:	e736      	b.n	80016ec <HAL_ADC_IRQHandler+0xf4>
 800187e:	bf00      	nop
 8001880:	40022300 	.word	0x40022300

08001884 <ADC_DMAConvCplt>:
{
 8001884:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001886:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001888:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800188a:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800188e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001890:	d11d      	bne.n	80018ce <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001892:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001898:	661a      	str	r2, [r3, #96]	; 0x60
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800189a:	680a      	ldr	r2, [r1, #0]
 800189c:	f012 0f08 	tst.w	r2, #8
 80018a0:	68ca      	ldr	r2, [r1, #12]
 80018a2:	d01b      	beq.n	80018dc <ADC_DMAConvCplt+0x58>
 80018a4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80018a8:	d10d      	bne.n	80018c6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80018aa:	68ca      	ldr	r2, [r1, #12]
 80018ac:	0494      	lsls	r4, r2, #18
 80018ae:	d40a      	bmi.n	80018c6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b6:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ba:	04d1      	lsls	r1, r2, #19
 80018bc:	d403      	bmi.n	80018c6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	661a      	str	r2, [r3, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fab4 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
}
 80018cc:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018ce:	06d2      	lsls	r2, r2, #27
 80018d0:	d40a      	bmi.n	80018e8 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80018dc:	0790      	lsls	r0, r2, #30
 80018de:	d0e7      	beq.n	80018b0 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff faa7 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
 80018e6:	e7f1      	b.n	80018cc <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fe83 	bl	80015f4 <HAL_ADC_ErrorCallback>
}
 80018ee:	bd10      	pop	{r4, pc}

080018f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018f0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018f2:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018f4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80018f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018fa:	6603      	str	r3, [r0, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018fc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6643      	str	r3, [r0, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001904:	f7ff fe76 	bl	80015f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001908:	bd08      	pop	{r3, pc}
 800190a:	bf00      	nop

0800190c <HAL_ADC_ConfigChannel>:
{
 800190c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 800190e:	2200      	movs	r2, #0
{
 8001910:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8001912:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001914:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8001918:	2a01      	cmp	r2, #1
 800191a:	f000 8113 	beq.w	8001b44 <HAL_ADC_ConfigChannel+0x238>
 800191e:	4603      	mov	r3, r0
 8001920:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001922:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001924:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001928:	6894      	ldr	r4, [r2, #8]
 800192a:	0764      	lsls	r4, r4, #29
 800192c:	d508      	bpl.n	8001940 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001930:	f042 0220 	orr.w	r2, r2, #32
 8001934:	661a      	str	r2, [r3, #96]	; 0x60
  __HAL_UNLOCK(hadc);
 8001936:	2200      	movs	r2, #0
 8001938:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800193c:	b003      	add	sp, #12
 800193e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hadc->Instance != ADC3)
 8001940:	4cad      	ldr	r4, [pc, #692]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2ec>)
 8001942:	42a2      	cmp	r2, r4
 8001944:	d00f      	beq.n	8001966 <HAL_ADC_ConfigChannel+0x5a>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001946:	680c      	ldr	r4, [r1, #0]
 8001948:	f3c4 0513 	ubfx	r5, r4, #0, #20
 800194c:	2d00      	cmp	r5, #0
 800194e:	f000 80e0 	beq.w	8001b12 <HAL_ADC_ConfigChannel+0x206>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001956:	b114      	cbz	r4, 800195e <HAL_ADC_ConfigChannel+0x52>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001958:	fab4 f484 	clz	r4, r4
 800195c:	40a0      	lsls	r0, r4
 800195e:	69d4      	ldr	r4, [r2, #28]
 8001960:	4320      	orrs	r0, r4
 8001962:	61d0      	str	r0, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001968:	f102 0030 	add.w	r0, r2, #48	; 0x30
  MODIFY_REG(*preg,
 800196c:	251f      	movs	r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800196e:	09a2      	lsrs	r2, r4, #6
  MODIFY_REG(*preg,
 8001970:	f004 0c1f 	and.w	ip, r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001974:	f002 040c 	and.w	r4, r2, #12
  MODIFY_REG(*preg,
 8001978:	680a      	ldr	r2, [r1, #0]
 800197a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800197e:	fa02 f20c 	lsl.w	r2, r2, ip
 8001982:	fa05 fc0c 	lsl.w	ip, r5, ip
 8001986:	5825      	ldr	r5, [r4, r0]
 8001988:	ea25 0c0c 	bic.w	ip, r5, ip
 800198c:	ea42 020c 	orr.w	r2, r2, ip
 8001990:	5022      	str	r2, [r4, r0]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001992:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001994:	6890      	ldr	r0, [r2, #8]
 8001996:	0747      	lsls	r7, r0, #29
 8001998:	d46c      	bmi.n	8001a74 <HAL_ADC_ConfigChannel+0x168>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800199a:	6895      	ldr	r5, [r2, #8]
 800199c:	f015 0508 	ands.w	r5, r5, #8
 80019a0:	d163      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x15e>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019a2:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
 80019a4:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019a6:	3214      	adds	r2, #20
      if (hadc->Instance == ADC3)
 80019a8:	4e93      	ldr	r6, [pc, #588]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2ec>)
 80019aa:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 80019ae:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019b2:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 80019b6:	fa00 fe04 	lsl.w	lr, r0, r4
 80019ba:	6888      	ldr	r0, [r1, #8]
 80019bc:	fa00 f404 	lsl.w	r4, r0, r4
 80019c0:	f85c 0002 	ldr.w	r0, [ip, r2]
 80019c4:	ea20 000e 	bic.w	r0, r0, lr
 80019c8:	4320      	orrs	r0, r4
 80019ca:	f84c 0002 	str.w	r0, [ip, r2]
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	42b0      	cmp	r0, r6
 80019d2:	4602      	mov	r2, r0
 80019d4:	f000 80a1 	beq.w	8001b1a <HAL_ADC_ConfigChannel+0x20e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019d8:	4888      	ldr	r0, [pc, #544]	; (8001bfc <HAL_ADC_ConfigChannel+0x2f0>)
 80019da:	6800      	ldr	r0, [r0, #0]
 80019dc:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80019e0:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80019e4:	f000 80cf 	beq.w	8001b86 <HAL_ADC_ConfigChannel+0x27a>
 80019e8:	68d0      	ldr	r0, [r2, #12]
 80019ea:	68d4      	ldr	r4, [r2, #12]
 80019ec:	06c6      	lsls	r6, r0, #27
 80019ee:	f100 80d2 	bmi.w	8001b96 <HAL_ADC_ConfigChannel+0x28a>
 80019f2:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80019f6:	6948      	ldr	r0, [r1, #20]
 80019f8:	0064      	lsls	r4, r4, #1
 80019fa:	fa00 f404 	lsl.w	r4, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019fe:	690e      	ldr	r6, [r1, #16]
 8001a00:	2e04      	cmp	r6, #4
 8001a02:	f000 80a2 	beq.w	8001b4a <HAL_ADC_ConfigChannel+0x23e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a06:	3260      	adds	r2, #96	; 0x60
    MODIFY_REG(*preg,
 8001a08:	6808      	ldr	r0, [r1, #0]
 8001a0a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8001a0e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001a12:	f007 4c00 	and.w	ip, r7, #2147483648	; 0x80000000
 8001a16:	ea40 000c 	orr.w	r0, r0, ip
 8001a1a:	4320      	orrs	r0, r4
 8001a1c:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        if (hadc->Instance == ADC3)
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	4a75      	ldr	r2, [pc, #468]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2ec>)
 8001a24:	4290      	cmp	r0, r2
 8001a26:	f000 8153 	beq.w	8001cd0 <HAL_ADC_ConfigChannel+0x3c4>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001a2a:	690c      	ldr	r4, [r1, #16]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a2c:	3060      	adds	r0, #96	; 0x60
 8001a2e:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
 8001a32:	2a01      	cmp	r2, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a34:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8001a38:	bf0c      	ite	eq
 8001a3a:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8001a3e:	2600      	movne	r6, #0
 8001a40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a44:	4332      	orrs	r2, r6
 8001a46:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001a4a:	7e0c      	ldrb	r4, [r1, #24]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	2c01      	cmp	r4, #1
 8001a50:	690a      	ldr	r2, [r1, #16]
 8001a52:	d104      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a54:	f002 021f 	and.w	r2, r2, #31
 8001a58:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8001a5c:	4095      	lsls	r5, r2
 8001a5e:	6902      	ldr	r2, [r0, #16]
 8001a60:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001a64:	4315      	orrs	r5, r2
 8001a66:	6105      	str	r5, [r0, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a68:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a6a:	6890      	ldr	r0, [r2, #8]
 8001a6c:	07c0      	lsls	r0, r0, #31
 8001a6e:	d505      	bpl.n	8001a7c <HAL_ADC_ConfigChannel+0x170>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a70:	2000      	movs	r0, #0
 8001a72:	e760      	b.n	8001936 <HAL_ADC_ConfigChannel+0x2a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a74:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a76:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a78:	07c0      	lsls	r0, r0, #31
 8001a7a:	d4f9      	bmi.n	8001a70 <HAL_ADC_ConfigChannel+0x164>
  if (ADCx == ADC3)
 8001a7c:	4c5e      	ldr	r4, [pc, #376]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2ec>)
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a7e:	6808      	ldr	r0, [r1, #0]
 8001a80:	42a2      	cmp	r2, r4
 8001a82:	68cd      	ldr	r5, [r1, #12]
 8001a84:	f000 813e 	beq.w	8001d04 <HAL_ADC_ConfigChannel+0x3f8>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001a88:	f005 0418 	and.w	r4, r5, #24
 8001a8c:	4d5c      	ldr	r5, [pc, #368]	; (8001c00 <HAL_ADC_ConfigChannel+0x2f4>)
 8001a8e:	40e5      	lsrs	r5, r4
 8001a90:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
 8001a94:	4005      	ands	r5, r0
 8001a96:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8001a9a:	ea24 0000 	bic.w	r0, r4, r0
 8001a9e:	4328      	orrs	r0, r5
 8001aa0:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001aa4:	4a57      	ldr	r2, [pc, #348]	; (8001c04 <HAL_ADC_ConfigChannel+0x2f8>)
 8001aa6:	68c8      	ldr	r0, [r1, #12]
 8001aa8:	4290      	cmp	r0, r2
 8001aaa:	f000 80e8 	beq.w	8001c7e <HAL_ADC_ConfigChannel+0x372>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001aae:	6808      	ldr	r0, [r1, #0]
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	dadd      	bge.n	8001a70 <HAL_ADC_ConfigChannel+0x164>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ab4:	681c      	ldr	r4, [r3, #0]
 8001ab6:	4a54      	ldr	r2, [pc, #336]	; (8001c08 <HAL_ADC_ConfigChannel+0x2fc>)
 8001ab8:	4294      	cmp	r4, r2
 8001aba:	f000 80cb 	beq.w	8001c54 <HAL_ADC_ConfigChannel+0x348>
 8001abe:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001ac2:	4294      	cmp	r4, r2
 8001ac4:	f000 80c6 	beq.w	8001c54 <HAL_ADC_ConfigChannel+0x348>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ac8:	4d50      	ldr	r5, [pc, #320]	; (8001c0c <HAL_ADC_ConfigChannel+0x300>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aca:	494b      	ldr	r1, [pc, #300]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2ec>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001acc:	68aa      	ldr	r2, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ace:	6889      	ldr	r1, [r1, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ad0:	f002 76e0 	and.w	r6, r2, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ad4:	43c9      	mvns	r1, r1
 8001ad6:	f001 0101 	and.w	r1, r1, #1
 8001ada:	2900      	cmp	r1, #0
 8001adc:	f000 8122 	beq.w	8001d24 <HAL_ADC_ConfigChannel+0x418>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ae0:	494b      	ldr	r1, [pc, #300]	; (8001c10 <HAL_ADC_ConfigChannel+0x304>)
 8001ae2:	4288      	cmp	r0, r1
 8001ae4:	f000 81cc 	beq.w	8001e80 <HAL_ADC_ConfigChannel+0x574>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ae8:	494a      	ldr	r1, [pc, #296]	; (8001c14 <HAL_ADC_ConfigChannel+0x308>)
 8001aea:	4288      	cmp	r0, r1
 8001aec:	f000 81eb 	beq.w	8001ec6 <HAL_ADC_ConfigChannel+0x5ba>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001af0:	4949      	ldr	r1, [pc, #292]	; (8001c18 <HAL_ADC_ConfigChannel+0x30c>)
 8001af2:	4288      	cmp	r0, r1
 8001af4:	d1bc      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x164>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001af6:	0257      	lsls	r7, r2, #9
 8001af8:	d4ba      	bmi.n	8001a70 <HAL_ADC_ConfigChannel+0x164>
 8001afa:	4a3f      	ldr	r2, [pc, #252]	; (8001bf8 <HAL_ADC_ConfigChannel+0x2ec>)
 8001afc:	4294      	cmp	r4, r2
 8001afe:	d1b7      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x164>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b00:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b02:	2000      	movs	r0, #0
 8001b04:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001b08:	4332      	orrs	r2, r6
 8001b0a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001b0e:	60aa      	str	r2, [r5, #8]
}
 8001b10:	e711      	b.n	8001936 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b12:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001b16:	40a0      	lsls	r0, r4
 8001b18:	e721      	b.n	800195e <HAL_ADC_ConfigChannel+0x52>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b1a:	690c      	ldr	r4, [r1, #16]
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b1c:	68c2      	ldr	r2, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b1e:	2c04      	cmp	r4, #4
 8001b20:	d040      	beq.n	8001ba4 <HAL_ADC_ConfigChannel+0x298>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b22:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001b26:	0050      	lsls	r0, r2, #1
 8001b28:	694a      	ldr	r2, [r1, #20]
 8001b2a:	4082      	lsls	r2, r0
    MODIFY_REG(*preg,
 8001b2c:	6808      	ldr	r0, [r1, #0]
 8001b2e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001b32:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b34:	4839      	ldr	r0, [pc, #228]	; (8001c1c <HAL_ADC_ConfigChannel+0x310>)
    MODIFY_REG(*preg,
 8001b36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b3a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8001b3e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001b42:	e76d      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x114>
  __HAL_LOCK(hadc);
 8001b44:	2002      	movs	r0, #2
}
 8001b46:	b003      	add	sp, #12
 8001b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b4a:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001b4c:	680d      	ldr	r5, [r1, #0]
 8001b4e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001b52:	06a8      	lsls	r0, r5, #26
 8001b54:	ebb4 6f85 	cmp.w	r4, r5, lsl #26
 8001b58:	d074      	beq.n	8001c44 <HAL_ADC_ConfigChannel+0x338>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b5a:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001b5c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001b60:	4284      	cmp	r4, r0
 8001b62:	d067      	beq.n	8001c34 <HAL_ADC_ConfigChannel+0x328>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b64:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8001b66:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001b6a:	4284      	cmp	r4, r0
 8001b6c:	d05a      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0x318>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b6e:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 8001b70:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001b74:	4284      	cmp	r4, r0
 8001b76:	f47f af78 	bne.w	8001a6a <HAL_ADC_ConfigChannel+0x15e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001b7a:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001b7c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001b80:	66d0      	str	r0, [r2, #108]	; 0x6c
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	e771      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b86:	68d4      	ldr	r4, [r2, #12]
 8001b88:	6948      	ldr	r0, [r1, #20]
 8001b8a:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8001b8e:	0064      	lsls	r4, r4, #1
 8001b90:	fa00 f404 	lsl.w	r4, r0, r4
 8001b94:	e733      	b.n	80019fe <HAL_ADC_ConfigChannel+0xf2>
 8001b96:	0864      	lsrs	r4, r4, #1
 8001b98:	6948      	ldr	r0, [r1, #20]
 8001b9a:	f004 0408 	and.w	r4, r4, #8
 8001b9e:	fa00 f404 	lsl.w	r4, r0, r4
 8001ba2:	e72c      	b.n	80019fe <HAL_ADC_ConfigChannel+0xf2>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ba4:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ba6:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8001ba8:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8001bac:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8001bae:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001bb2:	2d00      	cmp	r5, #0
 8001bb4:	f040 8134 	bne.w	8001e20 <HAL_ADC_ConfigChannel+0x514>
 8001bb8:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001bbc:	4294      	cmp	r4, r2
 8001bbe:	f000 81b5 	beq.w	8001f2c <HAL_ADC_ConfigChannel+0x620>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc2:	4d16      	ldr	r5, [pc, #88]	; (8001c1c <HAL_ADC_ConfigChannel+0x310>)
 8001bc4:	4e16      	ldr	r6, [pc, #88]	; (8001c20 <HAL_ADC_ConfigChannel+0x314>)
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bc6:	686c      	ldr	r4, [r5, #4]
 8001bc8:	686c      	ldr	r4, [r5, #4]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bca:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001bce:	42a2      	cmp	r2, r4
 8001bd0:	f000 81c5 	beq.w	8001f5e <HAL_ADC_ConfigChannel+0x652>
 8001bd4:	68ac      	ldr	r4, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd6:	f105 0608 	add.w	r6, r5, #8
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bda:	68ac      	ldr	r4, [r5, #8]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bdc:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001be0:	4294      	cmp	r4, r2
 8001be2:	f000 8180 	beq.w	8001ee6 <HAL_ADC_ConfigChannel+0x5da>
 8001be6:	68ec      	ldr	r4, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be8:	350c      	adds	r5, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bea:	682c      	ldr	r4, [r5, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bec:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001bf0:	42a2      	cmp	r2, r4
 8001bf2:	d03e      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x366>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	e738      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x15e>
 8001bf8:	58026000 	.word	0x58026000
 8001bfc:	5c001000 	.word	0x5c001000
 8001c00:	000fffff 	.word	0x000fffff
 8001c04:	47ff0000 	.word	0x47ff0000
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	58026300 	.word	0x58026300
 8001c10:	c7520000 	.word	0xc7520000
 8001c14:	c3210000 	.word	0xc3210000
 8001c18:	cb840000 	.word	0xcb840000
 8001c1c:	58026060 	.word	0x58026060
 8001c20:	58026064 	.word	0x58026064
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c24:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001c26:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c2a:	6690      	str	r0, [r2, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c2c:	6808      	ldr	r0, [r1, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	0680      	lsls	r0, r0, #26
 8001c32:	e79c      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x262>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001c34:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001c36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c3a:	6650      	str	r0, [r2, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c3c:	6808      	ldr	r0, [r1, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	0680      	lsls	r0, r0, #26
 8001c42:	e78f      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x258>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c44:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001c46:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c4a:	6610      	str	r0, [r2, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c4c:	6808      	ldr	r0, [r1, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	0680      	lsls	r0, r0, #26
 8001c52:	e782      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x24e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c54:	49ad      	ldr	r1, [pc, #692]	; (8001f0c <HAL_ADC_ConfigChannel+0x600>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c56:	4dae      	ldr	r5, [pc, #696]	; (8001f10 <HAL_ADC_ConfigChannel+0x604>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c58:	f501 7180 	add.w	r1, r1, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c5c:	68aa      	ldr	r2, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c5e:	f851 6cf8 	ldr.w	r6, [r1, #-248]
 8001c62:	6889      	ldr	r1, [r1, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c64:	4331      	orrs	r1, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c66:	f002 76e0 	and.w	r6, r2, #29360128	; 0x1c00000
 8001c6a:	43c9      	mvns	r1, r1
 8001c6c:	f001 0101 	and.w	r1, r1, #1
 8001c70:	e733      	b.n	8001ada <HAL_ADC_ConfigChannel+0x1ce>
    MODIFY_REG(*preg,
 8001c72:	682a      	ldr	r2, [r5, #0]
 8001c74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c78:	602a      	str	r2, [r5, #0]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	e6f5      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c7e:	680e      	ldr	r6, [r1, #0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c80:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c82:	f3c6 0213 	ubfx	r2, r6, #0, #20
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d152      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x424>
 8001c8a:	0eb0      	lsrs	r0, r6, #26
 8001c8c:	3001      	adds	r0, #1
 8001c8e:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c92:	2e09      	cmp	r6, #9
 8001c94:	f200 808e 	bhi.w	8001db4 <HAL_ADC_ConfigChannel+0x4a8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c98:	0685      	lsls	r5, r0, #26
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001ca0:	40b2      	lsls	r2, r6
 8001ca2:	4315      	orrs	r5, r2
 8001ca4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001ca8:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001caa:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cac:	0dd5      	lsrs	r5, r2, #23
 8001cae:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8001cb0:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8001cb4:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cb6:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001cba:	fa00 f602 	lsl.w	r6, r0, r2
 8001cbe:	5928      	ldr	r0, [r5, r4]
 8001cc0:	ea20 0006 	bic.w	r0, r0, r6
 8001cc4:	688e      	ldr	r6, [r1, #8]
 8001cc6:	fa06 f202 	lsl.w	r2, r6, r2
 8001cca:	4302      	orrs	r2, r0
 8001ccc:	512a      	str	r2, [r5, r4]
}
 8001cce:	e6ee      	b.n	8001aae <HAL_ADC_ConfigChannel+0x1a2>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd0:	4f90      	ldr	r7, [pc, #576]	; (8001f14 <HAL_ADC_ConfigChannel+0x608>)
 8001cd2:	690c      	ldr	r4, [r1, #16]
    MODIFY_REG(*preg,
 8001cd4:	69ce      	ldr	r6, [r1, #28]
 8001cd6:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 8001cda:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001cde:	4332      	orrs	r2, r6
 8001ce0:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001ce4:	f891 2020 	ldrb.w	r2, [r1, #32]
 8001ce8:	2a01      	cmp	r2, #1
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	bf08      	it	eq
 8001cee:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
  if (ADCx == ADC3)
 8001cf2:	4282      	cmp	r2, r0
 8001cf4:	d054      	beq.n	8001da0 <HAL_ADC_ConfigChannel+0x494>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cf6:	6890      	ldr	r0, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cf8:	07c0      	lsls	r0, r0, #31
 8001cfa:	f53f aeb9 	bmi.w	8001a70 <HAL_ADC_ConfigChannel+0x164>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001cfe:	6808      	ldr	r0, [r1, #0]
 8001d00:	68cd      	ldr	r5, [r1, #12]
  if (ADCx == ADC3)
 8001d02:	e6c1      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x17c>
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001d04:	4c84      	ldr	r4, [pc, #528]	; (8001f18 <HAL_ADC_ConfigChannel+0x60c>)
 8001d06:	f005 0518 	and.w	r5, r5, #24
 8001d0a:	fa24 f505 	lsr.w	r5, r4, r5
 8001d0e:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8001d12:	4005      	ands	r5, r0
 8001d14:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8001d18:	ea24 0000 	bic.w	r0, r4, r0
 8001d1c:	4328      	orrs	r0, r5
 8001d1e:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8001d22:	e6bf      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x198>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          tmp_hal_status = HAL_ERROR;
 8001d26:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d28:	f042 0220 	orr.w	r2, r2, #32
 8001d2c:	661a      	str	r2, [r3, #96]	; 0x60
          tmp_hal_status = HAL_ERROR;
 8001d2e:	e602      	b.n	8001936 <HAL_ADC_ConfigChannel+0x2a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	fa96 f2a6 	rbit	r2, r6
  if (value == 0U)
 8001d34:	2a00      	cmp	r2, #0
 8001d36:	d04b      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8001d38:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d3c:	3201      	adds	r2, #1
 8001d3e:	f002 021f 	and.w	r2, r2, #31
 8001d42:	2a09      	cmp	r2, #9
 8001d44:	d944      	bls.n	8001dd0 <HAL_ADC_ConfigChannel+0x4c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	fa96 f2a6 	rbit	r2, r6
  if (value == 0U)
 8001d4a:	2a00      	cmp	r2, #0
 8001d4c:	f000 8121 	beq.w	8001f92 <HAL_ADC_ConfigChannel+0x686>
  return __builtin_clz(value);
 8001d50:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d54:	3201      	adds	r2, #1
 8001d56:	0692      	lsls	r2, r2, #26
 8001d58:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	fa96 f0a6 	rbit	r0, r6
  if (value == 0U)
 8001d60:	2800      	cmp	r0, #0
 8001d62:	f000 8114 	beq.w	8001f8e <HAL_ADC_ConfigChannel+0x682>
  return __builtin_clz(value);
 8001d66:	fab0 f080 	clz	r0, r0
 8001d6a:	2501      	movs	r5, #1
 8001d6c:	3001      	adds	r0, #1
 8001d6e:	f000 001f 	and.w	r0, r0, #31
 8001d72:	fa05 f000 	lsl.w	r0, r5, r0
 8001d76:	4310      	orrs	r0, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	fa96 f6a6 	rbit	r6, r6
  if (value == 0U)
 8001d7c:	2e00      	cmp	r6, #0
 8001d7e:	f000 8104 	beq.w	8001f8a <HAL_ADC_ConfigChannel+0x67e>
  return __builtin_clz(value);
 8001d82:	fab6 f686 	clz	r6, r6
 8001d86:	1c72      	adds	r2, r6, #1
 8001d88:	f06f 061d 	mvn.w	r6, #29
 8001d8c:	f002 051f 	and.w	r5, r2, #31
 8001d90:	2203      	movs	r2, #3
 8001d92:	fb12 6205 	smlabb	r2, r2, r5, r6
 8001d96:	0512      	lsls	r2, r2, #20
 8001d98:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d9c:	4302      	orrs	r2, r0
 8001d9e:	e785      	b.n	8001cac <HAL_ADC_ConfigChannel+0x3a0>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da0:	6908      	ldr	r0, [r1, #16]
    MODIFY_REG(*preg,
 8001da2:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
 8001da6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001daa:	4315      	orrs	r5, r2
 8001dac:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	e65a      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8001db8:	2501      	movs	r5, #1
 8001dba:	0680      	lsls	r0, r0, #26
 8001dbc:	3a1e      	subs	r2, #30
 8001dbe:	fa05 f606 	lsl.w	r6, r5, r6
 8001dc2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001dc6:	0512      	lsls	r2, r2, #20
 8001dc8:	4330      	orrs	r0, r6
 8001dca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001dce:	e7e5      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x490>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	fa96 f2a6 	rbit	r2, r6
  if (value == 0U)
 8001dd4:	2a00      	cmp	r2, #0
 8001dd6:	f000 80e4 	beq.w	8001fa2 <HAL_ADC_ConfigChannel+0x696>
  return __builtin_clz(value);
 8001dda:	fab2 f282 	clz	r2, r2
 8001dde:	3201      	adds	r2, #1
 8001de0:	0692      	lsls	r2, r2, #26
 8001de2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	fa96 f0a6 	rbit	r0, r6
  if (value == 0U)
 8001dea:	2800      	cmp	r0, #0
 8001dec:	f000 80d7 	beq.w	8001f9e <HAL_ADC_ConfigChannel+0x692>
  return __builtin_clz(value);
 8001df0:	fab0 f080 	clz	r0, r0
 8001df4:	2501      	movs	r5, #1
 8001df6:	3001      	adds	r0, #1
 8001df8:	f000 001f 	and.w	r0, r0, #31
 8001dfc:	fa05 f000 	lsl.w	r0, r5, r0
 8001e00:	ea42 0500 	orr.w	r5, r2, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	fa96 f2a6 	rbit	r2, r6
  if (value == 0U)
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	f000 80c5 	beq.w	8001f98 <HAL_ADC_ConfigChannel+0x68c>
  return __builtin_clz(value);
 8001e0e:	fab2 f282 	clz	r2, r2
 8001e12:	3201      	adds	r2, #1
 8001e14:	f002 021f 	and.w	r2, r2, #31
 8001e18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e1c:	0512      	lsls	r2, r2, #20
 8001e1e:	e744      	b.n	8001caa <HAL_ADC_ConfigChannel+0x39e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e24:	b11d      	cbz	r5, 8001e2e <HAL_ADC_ConfigChannel+0x522>
  return __builtin_clz(value);
 8001e26:	fab5 f585 	clz	r5, r5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e2a:	42ac      	cmp	r4, r5
 8001e2c:	d07e      	beq.n	8001f2c <HAL_ADC_ConfigChannel+0x620>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2e:	4c39      	ldr	r4, [pc, #228]	; (8001f14 <HAL_ADC_ConfigChannel+0x608>)
 8001e30:	4e3a      	ldr	r6, [pc, #232]	; (8001f1c <HAL_ADC_ConfigChannel+0x610>)
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e32:	6865      	ldr	r5, [r4, #4]
 8001e34:	6864      	ldr	r4, [r4, #4]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e36:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e3e:	b125      	cbz	r5, 8001e4a <HAL_ADC_ConfigChannel+0x53e>
  return __builtin_clz(value);
 8001e40:	fab5 f585 	clz	r5, r5
 8001e44:	42ac      	cmp	r4, r5
 8001e46:	f000 808a 	beq.w	8001f5e <HAL_ADC_ConfigChannel+0x652>
 8001e4a:	6e84      	ldr	r4, [r0, #104]	; 0x68
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e4c:	f100 0668 	add.w	r6, r0, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e50:	6e84      	ldr	r4, [r0, #104]	; 0x68
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e52:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e5a:	b11d      	cbz	r5, 8001e64 <HAL_ADC_ConfigChannel+0x558>
  return __builtin_clz(value);
 8001e5c:	fab5 f585 	clz	r5, r5
 8001e60:	42ac      	cmp	r4, r5
 8001e62:	d040      	beq.n	8001ee6 <HAL_ADC_ConfigChannel+0x5da>
 8001e64:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e66:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e6a:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e6c:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001e74:	2a00      	cmp	r2, #0
 8001e76:	f43f aebd 	beq.w	8001bf4 <HAL_ADC_ConfigChannel+0x2e8>
  return __builtin_clz(value);
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	e6b7      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x2e4>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e80:	0212      	lsls	r2, r2, #8
 8001e82:	f53f adf5 	bmi.w	8001a70 <HAL_ADC_ConfigChannel+0x164>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e86:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <HAL_ADC_ConfigChannel+0x614>)
 8001e88:	4294      	cmp	r4, r2
 8001e8a:	f47f adf1 	bne.w	8001a70 <HAL_ADC_ConfigChannel+0x164>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e8e:	4a25      	ldr	r2, [pc, #148]	; (8001f24 <HAL_ADC_ConfigChannel+0x618>)
 8001e90:	4825      	ldr	r0, [pc, #148]	; (8001f28 <HAL_ADC_ConfigChannel+0x61c>)
 8001e92:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e94:	68a9      	ldr	r1, [r5, #8]
 8001e96:	0992      	lsrs	r2, r2, #6
 8001e98:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001e9c:	fba0 0202 	umull	r0, r2, r0, r2
 8001ea0:	4331      	orrs	r1, r6
 8001ea2:	0992      	lsrs	r2, r2, #6
 8001ea4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001ea8:	3201      	adds	r2, #1
 8001eaa:	60a9      	str	r1, [r5, #8]
 8001eac:	0052      	lsls	r2, r2, #1
 8001eae:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001eb0:	9a01      	ldr	r2, [sp, #4]
 8001eb2:	2a00      	cmp	r2, #0
 8001eb4:	f43f addc 	beq.w	8001a70 <HAL_ADC_ConfigChannel+0x164>
                wait_loop_index--;
 8001eb8:	9a01      	ldr	r2, [sp, #4]
 8001eba:	3a01      	subs	r2, #1
 8001ebc:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001ebe:	9a01      	ldr	r2, [sp, #4]
 8001ec0:	2a00      	cmp	r2, #0
 8001ec2:	d1f9      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x5ac>
 8001ec4:	e5d4      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x164>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ec6:	f012 7080 	ands.w	r0, r2, #16777216	; 0x1000000
 8001eca:	f47f add1 	bne.w	8001a70 <HAL_ADC_ConfigChannel+0x164>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ece:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <HAL_ADC_ConfigChannel+0x614>)
 8001ed0:	4294      	cmp	r4, r2
 8001ed2:	f47f adcd 	bne.w	8001a70 <HAL_ADC_ConfigChannel+0x164>
 8001ed6:	68aa      	ldr	r2, [r5, #8]
 8001ed8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001edc:	4332      	orrs	r2, r6
 8001ede:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001ee2:	60aa      	str	r2, [r5, #8]
}
 8001ee4:	e527      	b.n	8001936 <HAL_ADC_ConfigChannel+0x2a>
    MODIFY_REG(*preg,
 8001ee6:	6832      	ldr	r2, [r6, #0]
 8001ee8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eec:	6032      	str	r2, [r6, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eee:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ef0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef2:	f100 056c 	add.w	r5, r0, #108	; 0x6c
 8001ef6:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ef8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8001efa:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8001efe:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001f02:	2e00      	cmp	r6, #0
 8001f04:	d1b4      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x564>
 8001f06:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001f0a:	e671      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x2e4>
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	40022300 	.word	0x40022300
 8001f14:	58026060 	.word	0x58026060
 8001f18:	000fffff 	.word	0x000fffff
 8001f1c:	58026064 	.word	0x58026064
 8001f20:	58026000 	.word	0x58026000
 8001f24:	24000004 	.word	0x24000004
 8001f28:	053e2d63 	.word	0x053e2d63
    MODIFY_REG(*preg,
 8001f2c:	481e      	ldr	r0, [pc, #120]	; (8001fa8 <HAL_ADC_ConfigChannel+0x69c>)
 8001f2e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001f30:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f34:	6602      	str	r2, [r0, #96]	; 0x60
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f36:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f38:	6e42      	ldr	r2, [r0, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3a:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8001f3e:	680a      	ldr	r2, [r1, #0]
 8001f40:	f100 0664 	add.w	r6, r0, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f44:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8001f46:	f3c2 0713 	ubfx	r7, r2, #0, #20
 8001f4a:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001f4e:	2f00      	cmp	r7, #0
 8001f50:	f47f af73 	bne.w	8001e3a <HAL_ADC_ConfigChannel+0x52e>
 8001f54:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001f58:	4294      	cmp	r4, r2
 8001f5a:	f47f ae3b 	bne.w	8001bd4 <HAL_ADC_ConfigChannel+0x2c8>
    MODIFY_REG(*preg,
 8001f5e:	6832      	ldr	r2, [r6, #0]
 8001f60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f64:	6032      	str	r2, [r6, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f66:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f68:	6e82      	ldr	r2, [r0, #104]	; 0x68
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6a:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8001f6e:	680a      	ldr	r2, [r1, #0]
 8001f70:	f100 0668 	add.w	r6, r0, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f74:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8001f76:	f3c2 0713 	ubfx	r7, r2, #0, #20
 8001f7a:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001f7e:	2f00      	cmp	r7, #0
 8001f80:	f47f af69 	bne.w	8001e56 <HAL_ADC_ConfigChannel+0x54a>
 8001f84:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001f88:	e62a      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x2d4>
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_ADC_ConfigChannel+0x6a0>)
 8001f8c:	e706      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x490>
 8001f8e:	2002      	movs	r0, #2
 8001f90:	e6f1      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x46a>
 8001f92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f96:	e6e1      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x450>
 8001f98:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001f9c:	e685      	b.n	8001caa <HAL_ADC_ConfigChannel+0x39e>
 8001f9e:	2002      	movs	r0, #2
 8001fa0:	e72e      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x4f4>
 8001fa2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fa6:	e71e      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x4da>
 8001fa8:	58026000 	.word	0x58026000
 8001fac:	fe500000 	.word	0xfe500000

08001fb0 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	07d1      	lsls	r1, r2, #31
 8001fb6:	d501      	bpl.n	8001fbc <ADC_Enable+0xc>
  return HAL_OK;
 8001fb8:	2000      	movs	r0, #0
}
 8001fba:	4770      	bx	lr
{
 8001fbc:	b570      	push	{r4, r5, r6, lr}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001fbe:	4a21      	ldr	r2, [pc, #132]	; (8002044 <ADC_Enable+0x94>)
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	6899      	ldr	r1, [r3, #8]
 8001fc4:	4211      	tst	r1, r2
 8001fc6:	d12c      	bne.n	8002022 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8001fc8:	6899      	ldr	r1, [r3, #8]
 8001fca:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <ADC_Enable+0x98>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001fd4:	f7ff faee 	bl	80015b4 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8001fdc:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d028      	beq.n	8002034 <ADC_Enable+0x84>
 8001fe2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d024      	beq.n	8002034 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fea:	4a19      	ldr	r2, [pc, #100]	; (8002050 <ADC_Enable+0xa0>)
 8001fec:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	07d6      	lsls	r6, r2, #31
 8001ff2:	d414      	bmi.n	800201e <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8001ff4:	4e14      	ldr	r6, [pc, #80]	; (8002048 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ff6:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ff8:	07d0      	lsls	r0, r2, #31
 8001ffa:	d404      	bmi.n	8002006 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	4032      	ands	r2, r6
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002006:	f7ff fad5 	bl	80015b4 <HAL_GetTick>
 800200a:	1b43      	subs	r3, r0, r5
 800200c:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800200e:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002010:	d902      	bls.n	8002018 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	07d1      	lsls	r1, r2, #31
 8002016:	d504      	bpl.n	8002022 <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	07d2      	lsls	r2, r2, #31
 800201c:	d5eb      	bpl.n	8001ff6 <ADC_Enable+0x46>
  return HAL_OK;
 800201e:	2000      	movs	r0, #0
}
 8002020:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002022:	6e23      	ldr	r3, [r4, #96]	; 0x60
            return HAL_ERROR;
 8002024:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800202e:	4303      	orrs	r3, r0
 8002030:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002032:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002034:	4a07      	ldr	r2, [pc, #28]	; (8002054 <ADC_Enable+0xa4>)
 8002036:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002038:	06d2      	lsls	r2, r2, #27
 800203a:	d0d8      	beq.n	8001fee <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800203e:	4293      	cmp	r3, r2
 8002040:	d1d5      	bne.n	8001fee <ADC_Enable+0x3e>
 8002042:	e7ec      	b.n	800201e <ADC_Enable+0x6e>
 8002044:	8000003f 	.word	0x8000003f
 8002048:	7fffffc0 	.word	0x7fffffc0
 800204c:	40022000 	.word	0x40022000
 8002050:	58026300 	.word	0x58026300
 8002054:	40022300 	.word	0x40022300
 8002058:	40022100 	.word	0x40022100

0800205c <HAL_ADC_Start_DMA>:
{
 800205c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002060:	4d46      	ldr	r5, [pc, #280]	; (800217c <HAL_ADC_Start_DMA+0x120>)
{
 8002062:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002064:	6800      	ldr	r0, [r0, #0]
{
 8002066:	460f      	mov	r7, r1
 8002068:	4616      	mov	r6, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800206a:	42a8      	cmp	r0, r5
 800206c:	d019      	beq.n	80020a2 <HAL_ADC_Start_DMA+0x46>
 800206e:	4b44      	ldr	r3, [pc, #272]	; (8002180 <HAL_ADC_Start_DMA+0x124>)
 8002070:	4298      	cmp	r0, r3
 8002072:	d016      	beq.n	80020a2 <HAL_ADC_Start_DMA+0x46>
 8002074:	4d43      	ldr	r5, [pc, #268]	; (8002184 <HAL_ADC_Start_DMA+0x128>)
 8002076:	68ab      	ldr	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002078:	6880      	ldr	r0, [r0, #8]
 800207a:	0742      	lsls	r2, r0, #29
 800207c:	d416      	bmi.n	80020ac <HAL_ADC_Start_DMA+0x50>
    __HAL_LOCK(hadc);
 800207e:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 8002082:	2a01      	cmp	r2, #1
 8002084:	d012      	beq.n	80020ac <HAL_ADC_Start_DMA+0x50>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002086:	f003 081f 	and.w	r8, r3, #31
 800208a:	2201      	movs	r2, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800208c:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8002090:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002094:	d90d      	bls.n	80020b2 <HAL_ADC_Start_DMA+0x56>
      __HAL_UNLOCK(hadc);
 8002096:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 8002098:	2001      	movs	r0, #1
      __HAL_UNLOCK(hadc);
 800209a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800209e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020a2:	4d39      	ldr	r5, [pc, #228]	; (8002188 <HAL_ADC_Start_DMA+0x12c>)
 80020a4:	68ab      	ldr	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020a6:	6880      	ldr	r0, [r0, #8]
 80020a8:	0742      	lsls	r2, r0, #29
 80020aa:	d5e8      	bpl.n	800207e <HAL_ADC_Start_DMA+0x22>
    tmp_hal_status = HAL_BUSY;
 80020ac:	2002      	movs	r0, #2
}
 80020ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020b2:	f240 2321 	movw	r3, #545	; 0x221
 80020b6:	fa23 f308 	lsr.w	r3, r3, r8
 80020ba:	43db      	mvns	r3, r3
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020bc:	ea13 0502 	ands.w	r5, r3, r2
 80020c0:	d1e9      	bne.n	8002096 <HAL_ADC_Start_DMA+0x3a>
      tmp_hal_status = ADC_Enable(hadc);
 80020c2:	4620      	mov	r0, r4
 80020c4:	f7ff ff74 	bl	8001fb0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80020c8:	2800      	cmp	r0, #0
 80020ca:	d146      	bne.n	800215a <HAL_ADC_Start_DMA+0xfe>
        ADC_STATE_CLR_SET(hadc->State,
 80020cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_ADC_Start_DMA+0x130>)
 80020d0:	4013      	ands	r3, r2
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020d2:	6822      	ldr	r2, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	6623      	str	r3, [r4, #96]	; 0x60
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020da:	4b29      	ldr	r3, [pc, #164]	; (8002180 <HAL_ADC_Start_DMA+0x124>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020dc:	429a      	cmp	r2, r3
 80020de:	d102      	bne.n	80020e6 <HAL_ADC_Start_DMA+0x8a>
 80020e0:	f1b8 0f00 	cmp.w	r8, #0
 80020e4:	d103      	bne.n	80020ee <HAL_ADC_Start_DMA+0x92>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80020e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020ec:	6623      	str	r3, [r4, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80020f0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80020f4:	d035      	beq.n	8002162 <HAL_ADC_Start_DMA+0x106>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020f8:	f023 0306 	bic.w	r3, r3, #6
 80020fc:	6663      	str	r3, [r4, #100]	; 0x64
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002100:	4a23      	ldr	r2, [pc, #140]	; (8002190 <HAL_ADC_Start_DMA+0x134>)
        if (hadc->Instance == ADC3)
 8002102:	4924      	ldr	r1, [pc, #144]	; (8002194 <HAL_ADC_Start_DMA+0x138>)
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002104:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002106:	4a24      	ldr	r2, [pc, #144]	; (8002198 <HAL_ADC_Start_DMA+0x13c>)
 8002108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800210c:	4a23      	ldr	r2, [pc, #140]	; (800219c <HAL_ADC_Start_DMA+0x140>)
 800210e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002110:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002112:	221c      	movs	r2, #28
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8002118:	2300      	movs	r3, #0
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800211a:	6822      	ldr	r2, [r4, #0]
        __HAL_UNLOCK(hadc);
 800211c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002120:	6853      	ldr	r3, [r2, #4]
 8002122:	f043 0310 	orr.w	r3, r3, #16
 8002126:	6053      	str	r3, [r2, #4]
        if (hadc->Instance == ADC3)
 8002128:	6822      	ldr	r2, [r4, #0]
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800212a:	68d3      	ldr	r3, [r2, #12]
 800212c:	428a      	cmp	r2, r1
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	d018      	beq.n	8002166 <HAL_ADC_Start_DMA+0x10a>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002134:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002136:	430b      	orrs	r3, r1
 8002138:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800213a:	6821      	ldr	r1, [r4, #0]
 800213c:	4633      	mov	r3, r6
 800213e:	463a      	mov	r2, r7
 8002140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002142:	3140      	adds	r1, #64	; 0x40
 8002144:	f000 fea4 	bl	8002e90 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002148:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_ADC_Start_DMA+0x144>)
 800214c:	6891      	ldr	r1, [r2, #8]
 800214e:	400b      	ands	r3, r1
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6093      	str	r3, [r2, #8]
}
 8002156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 800215a:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
}
 800215e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 8002162:	6663      	str	r3, [r4, #100]	; 0x64
 8002164:	e7cb      	b.n	80020fe <HAL_ADC_Start_DMA+0xa2>
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002166:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800216a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800216e:	60d3      	str	r3, [r2, #12]
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002170:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002172:	68d3      	ldr	r3, [r2, #12]
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	60d3      	str	r3, [r2, #12]
}
 800217a:	e7de      	b.n	800213a <HAL_ADC_Start_DMA+0xde>
 800217c:	40022000 	.word	0x40022000
 8002180:	40022100 	.word	0x40022100
 8002184:	58026300 	.word	0x58026300
 8002188:	40022300 	.word	0x40022300
 800218c:	fffff0fe 	.word	0xfffff0fe
 8002190:	08001885 	.word	0x08001885
 8002194:	58026000 	.word	0x58026000
 8002198:	080015e5 	.word	0x080015e5
 800219c:	080018f1 	.word	0x080018f1
 80021a0:	7fffffc0 	.word	0x7fffffc0

080021a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80021a4:	b510      	push	{r4, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80021a6:	4a44      	ldr	r2, [pc, #272]	; (80022b8 <ADC_ConfigureBoostMode+0x114>)
{
 80021a8:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80021aa:	6803      	ldr	r3, [r0, #0]
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d025      	beq.n	80021fc <ADC_ConfigureBoostMode+0x58>
 80021b0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d021      	beq.n	80021fc <ADC_ConfigureBoostMode+0x58>
 80021b8:	4b40      	ldr	r3, [pc, #256]	; (80022bc <ADC_ConfigureBoostMode+0x118>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80021c0:	d021      	beq.n	8002206 <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80021c2:	f002 fd2d 	bl	8004c20 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80021c6:	6863      	ldr	r3, [r4, #4]
 80021c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021cc:	d06b      	beq.n	80022a6 <ADC_ConfigureBoostMode+0x102>
 80021ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021d2:	d05b      	beq.n	800228c <ADC_ConfigureBoostMode+0xe8>
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d8:	d065      	beq.n	80022a6 <ADC_ConfigureBoostMode+0x102>
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
  if (freq <= 6250000UL)
 80021da:	4b39      	ldr	r3, [pc, #228]	; (80022c0 <ADC_ConfigureBoostMode+0x11c>)
 80021dc:	4298      	cmp	r0, r3
 80021de:	d92f      	bls.n	8002240 <ADC_ConfigureBoostMode+0x9c>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
  }
  else if (freq <= 12500000UL)
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <ADC_ConfigureBoostMode+0x120>)
 80021e2:	4298      	cmp	r0, r3
 80021e4:	d94a      	bls.n	800227c <ADC_ConfigureBoostMode+0xd8>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
  }
  else if (freq <= 25000000UL)
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <ADC_ConfigureBoostMode+0x124>)
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021e8:	6822      	ldr	r2, [r4, #0]
  else if (freq <= 25000000UL)
 80021ea:	4298      	cmp	r0, r3
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021ec:	6893      	ldr	r3, [r2, #8]
  else if (freq <= 25000000UL)
 80021ee:	d856      	bhi.n	800229e <ADC_ConfigureBoostMode+0xfa>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f8:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80021fa:	bd10      	pop	{r4, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80021fc:	4b33      	ldr	r3, [pc, #204]	; (80022cc <ADC_ConfigureBoostMode+0x128>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002204:	d1dd      	bne.n	80021c2 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002206:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800220a:	2100      	movs	r1, #0
 800220c:	f003 fe50 	bl	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002210:	6863      	ldr	r3, [r4, #4]
 8002212:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002216:	d04d      	beq.n	80022b4 <ADC_ConfigureBoostMode+0x110>
 8002218:	d808      	bhi.n	800222c <ADC_ConfigureBoostMode+0x88>
 800221a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800221e:	d03c      	beq.n	800229a <ADC_ConfigureBoostMode+0xf6>
 8002220:	d914      	bls.n	800224c <ADC_ConfigureBoostMode+0xa8>
 8002222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002226:	d1d8      	bne.n	80021da <ADC_ConfigureBoostMode+0x36>
        freq /= 32UL;
 8002228:	0940      	lsrs	r0, r0, #5
        break;
 800222a:	e7d6      	b.n	80021da <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 800222c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002230:	d031      	beq.n	8002296 <ADC_ConfigureBoostMode+0xf2>
 8002232:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002236:	d1d0      	bne.n	80021da <ADC_ConfigureBoostMode+0x36>
  if (freq <= 6250000UL)
 8002238:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <ADC_ConfigureBoostMode+0x11c>)
 800223a:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 800223e:	d31d      	bcc.n	800227c <ADC_ConfigureBoostMode+0xd8>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002240:	6822      	ldr	r2, [r4, #0]
 8002242:	6893      	ldr	r3, [r2, #8]
 8002244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002248:	6093      	str	r3, [r2, #8]
}
 800224a:	bd10      	pop	{r4, pc}
    switch (hadc->Init.ClockPrescaler)
 800224c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002250:	d006      	beq.n	8002260 <ADC_ConfigureBoostMode+0xbc>
 8002252:	d90a      	bls.n	800226a <ADC_ConfigureBoostMode+0xc6>
 8002254:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002258:	d002      	beq.n	8002260 <ADC_ConfigureBoostMode+0xbc>
 800225a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800225e:	d1bc      	bne.n	80021da <ADC_ConfigureBoostMode+0x36>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002260:	0c9b      	lsrs	r3, r3, #18
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002268:	e7b7      	b.n	80021da <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 800226a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800226e:	d0f7      	beq.n	8002260 <ADC_ConfigureBoostMode+0xbc>
 8002270:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002274:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002278:	d0f2      	beq.n	8002260 <ADC_ConfigureBoostMode+0xbc>
 800227a:	e7ae      	b.n	80021da <ADC_ConfigureBoostMode+0x36>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800227c:	6822      	ldr	r2, [r4, #0]
 800227e:	6893      	ldr	r3, [r2, #8]
 8002280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6093      	str	r3, [r2, #8]
}
 800228a:	bd10      	pop	{r4, pc}
        freq /= 4UL;
 800228c:	0880      	lsrs	r0, r0, #2
  if (freq <= 6250000UL)
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <ADC_ConfigureBoostMode+0x11c>)
 8002290:	4298      	cmp	r0, r3
 8002292:	d9d5      	bls.n	8002240 <ADC_ConfigureBoostMode+0x9c>
 8002294:	e7a4      	b.n	80021e0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8002296:	09c0      	lsrs	r0, r0, #7
        break;
 8002298:	e79f      	b.n	80021da <ADC_ConfigureBoostMode+0x36>
        freq /= 16UL;
 800229a:	0900      	lsrs	r0, r0, #4
        break;
 800229c:	e79d      	b.n	80021da <ADC_ConfigureBoostMode+0x36>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800229e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022a2:	6093      	str	r3, [r2, #8]
}
 80022a4:	bd10      	pop	{r4, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	fbb0 f0f3 	udiv	r0, r0, r3
  if (freq <= 6250000UL)
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <ADC_ConfigureBoostMode+0x11c>)
 80022ae:	4298      	cmp	r0, r3
 80022b0:	d9c6      	bls.n	8002240 <ADC_ConfigureBoostMode+0x9c>
 80022b2:	e795      	b.n	80021e0 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 80022b4:	0980      	lsrs	r0, r0, #6
        break;
 80022b6:	e790      	b.n	80021da <ADC_ConfigureBoostMode+0x36>
 80022b8:	40022000 	.word	0x40022000
 80022bc:	58026300 	.word	0x58026300
 80022c0:	00bebc21 	.word	0x00bebc21
 80022c4:	017d7841 	.word	0x017d7841
 80022c8:	02faf081 	.word	0x02faf081
 80022cc:	40022300 	.word	0x40022300

080022d0 <HAL_ADC_Init>:
{
 80022d0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80022d2:	2300      	movs	r3, #0
{
 80022d4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80022d6:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80022d8:	2800      	cmp	r0, #0
 80022da:	f000 80e1 	beq.w	80024a0 <HAL_ADC_Init+0x1d0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022de:	6e05      	ldr	r5, [r0, #96]	; 0x60
 80022e0:	4604      	mov	r4, r0
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	f000 80c0 	beq.w	8002468 <HAL_ADC_Init+0x198>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022e8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	0095      	lsls	r5, r2, #2
 80022ee:	d504      	bpl.n	80022fa <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022f0:	6899      	ldr	r1, [r3, #8]
 80022f2:	4a94      	ldr	r2, [pc, #592]	; (8002544 <HAL_ADC_Init+0x274>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022f8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	00d0      	lsls	r0, r2, #3
 80022fe:	d417      	bmi.n	8002330 <HAL_ADC_Init+0x60>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002300:	4a91      	ldr	r2, [pc, #580]	; (8002548 <HAL_ADC_Init+0x278>)
 8002302:	4992      	ldr	r1, [pc, #584]	; (800254c <HAL_ADC_Init+0x27c>)
 8002304:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8002306:	6898      	ldr	r0, [r3, #8]
 8002308:	0992      	lsrs	r2, r2, #6
 800230a:	fba1 1202 	umull	r1, r2, r1, r2
 800230e:	4990      	ldr	r1, [pc, #576]	; (8002550 <HAL_ADC_Init+0x280>)
 8002310:	0992      	lsrs	r2, r2, #6
 8002312:	4001      	ands	r1, r0
 8002314:	3201      	adds	r2, #1
 8002316:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800231a:	6099      	str	r1, [r3, #8]
 800231c:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 800231e:	9b01      	ldr	r3, [sp, #4]
 8002320:	b12b      	cbz	r3, 800232e <HAL_ADC_Init+0x5e>
      wait_loop_index--;
 8002322:	9b01      	ldr	r3, [sp, #4]
 8002324:	3b01      	subs	r3, #1
 8002326:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002328:	9b01      	ldr	r3, [sp, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f9      	bne.n	8002322 <HAL_ADC_Init+0x52>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800232e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	00d1      	lsls	r1, r2, #3
 8002334:	d413      	bmi.n	800235e <HAL_ADC_Init+0x8e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002336:	6e22      	ldr	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 8002338:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233a:	f042 0210 	orr.w	r2, r2, #16
 800233e:	6622      	str	r2, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002340:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002342:	432a      	orrs	r2, r5
 8002344:	6662      	str	r2, [r4, #100]	; 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	0752      	lsls	r2, r2, #29
 800234a:	d50c      	bpl.n	8002366 <HAL_ADC_Init+0x96>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800234c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 8002350:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002352:	f043 0310 	orr.w	r3, r3, #16
}
 8002356:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002358:	6623      	str	r3, [r4, #96]	; 0x60
}
 800235a:	b002      	add	sp, #8
 800235c:	bd70      	pop	{r4, r5, r6, pc}
 800235e:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002360:	2500      	movs	r5, #0
 8002362:	0752      	lsls	r2, r2, #29
 8002364:	d4f2      	bmi.n	800234c <HAL_ADC_Init+0x7c>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002366:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002368:	f012 0210 	ands.w	r2, r2, #16
 800236c:	d1ef      	bne.n	800234e <HAL_ADC_Init+0x7e>
    ADC_STATE_CLR_SET(hadc->State,
 800236e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002370:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002374:	f041 0102 	orr.w	r1, r1, #2
 8002378:	6621      	str	r1, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800237a:	6899      	ldr	r1, [r3, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800237c:	07ce      	lsls	r6, r1, #31
 800237e:	d414      	bmi.n	80023aa <HAL_ADC_Init+0xda>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002380:	4974      	ldr	r1, [pc, #464]	; (8002554 <HAL_ADC_Init+0x284>)
 8002382:	428b      	cmp	r3, r1
 8002384:	f000 80a4 	beq.w	80024d0 <HAL_ADC_Init+0x200>
 8002388:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800238c:	428b      	cmp	r3, r1
 800238e:	f000 809f 	beq.w	80024d0 <HAL_ADC_Init+0x200>
 8002392:	4971      	ldr	r1, [pc, #452]	; (8002558 <HAL_ADC_Init+0x288>)
 8002394:	6889      	ldr	r1, [r1, #8]
 8002396:	07c9      	lsls	r1, r1, #31
 8002398:	d407      	bmi.n	80023aa <HAL_ADC_Init+0xda>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800239a:	4970      	ldr	r1, [pc, #448]	; (800255c <HAL_ADC_Init+0x28c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800239c:	688b      	ldr	r3, [r1, #8]
 800239e:	6860      	ldr	r0, [r4, #4]
 80023a0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80023a4:	4303      	orrs	r3, r0
 80023a6:	608b      	str	r3, [r1, #8]
    if (hadc->Instance == ADC3)
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	496b      	ldr	r1, [pc, #428]	; (8002558 <HAL_ADC_Init+0x288>)
 80023ac:	428b      	cmp	r3, r1
 80023ae:	d061      	beq.n	8002474 <HAL_ADC_Init+0x1a4>
                  hadc->Init.Overrun                                                    |
 80023b0:	68a0      	ldr	r0, [r4, #8]
 80023b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023b4:	f894 1020 	ldrb.w	r1, [r4, #32]
                  hadc->Init.Overrun                                                    |
 80023b8:	4302      	orrs	r2, r0
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023ba:	7e60      	ldrb	r0, [r4, #25]
                  hadc->Init.Overrun                                                    |
 80023bc:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023c4:	2901      	cmp	r1, #1
 80023c6:	d103      	bne.n	80023d0 <HAL_ADC_Init+0x100>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80023ca:	3901      	subs	r1, #1
 80023cc:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80023d2:	b121      	cbz	r1, 80023de <HAL_ADC_Init+0x10e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023d4:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80023d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80023da:	4301      	orrs	r1, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023dc:	430a      	orrs	r2, r1
    if (hadc->Instance == ADC3)
 80023de:	495e      	ldr	r1, [pc, #376]	; (8002558 <HAL_ADC_Init+0x288>)
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80023e0:	68d8      	ldr	r0, [r3, #12]
    if (hadc->Instance == ADC3)
 80023e2:	428b      	cmp	r3, r1
 80023e4:	d068      	beq.n	80024b8 <HAL_ADC_Init+0x1e8>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023e6:	495e      	ldr	r1, [pc, #376]	; (8002560 <HAL_ADC_Init+0x290>)
 80023e8:	4001      	ands	r1, r0
 80023ea:	430a      	orrs	r2, r1
 80023ec:	60da      	str	r2, [r3, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ee:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023f0:	6893      	ldr	r3, [r2, #8]
 80023f2:	f013 0f04 	tst.w	r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023f6:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023f8:	d126      	bne.n	8002448 <HAL_ADC_Init+0x178>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023fa:	071b      	lsls	r3, r3, #28
 80023fc:	d424      	bmi.n	8002448 <HAL_ADC_Init+0x178>
      if (hadc->Instance == ADC3)
 80023fe:	4b56      	ldr	r3, [pc, #344]	; (8002558 <HAL_ADC_Init+0x288>)
 8002400:	429a      	cmp	r2, r3
 8002402:	f000 8084 	beq.w	800250e <HAL_ADC_Init+0x23e>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002406:	7e21      	ldrb	r1, [r4, #24]
        tmpCFGR = (
 8002408:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800240a:	ea43 3181 	orr.w	r1, r3, r1, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800240e:	68d0      	ldr	r0, [r2, #12]
 8002410:	4b54      	ldr	r3, [pc, #336]	; (8002564 <HAL_ADC_Init+0x294>)
 8002412:	4003      	ands	r3, r0
 8002414:	430b      	orrs	r3, r1
 8002416:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002418:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
        if (hadc->Instance == ADC3)
 800241c:	6822      	ldr	r2, [r4, #0]
      if (hadc->Init.OversamplingMode == ENABLE)
 800241e:	2b01      	cmp	r3, #1
 8002420:	d061      	beq.n	80024e6 <HAL_ADC_Init+0x216>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002422:	6913      	ldr	r3, [r2, #16]
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800242a:	6822      	ldr	r2, [r4, #0]
 800242c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800242e:	6913      	ldr	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 8002430:	4949      	ldr	r1, [pc, #292]	; (8002558 <HAL_ADC_Init+0x288>)
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002432:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002436:	4303      	orrs	r3, r0
 8002438:	6113      	str	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 800243a:	6822      	ldr	r2, [r4, #0]
 800243c:	428a      	cmp	r2, r1
 800243e:	d003      	beq.n	8002448 <HAL_ADC_Init+0x178>
        ADC_ConfigureBoostMode(hadc);
 8002440:	4620      	mov	r0, r4
 8002442:	f7ff feaf 	bl	80021a4 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002446:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002448:	6923      	ldr	r3, [r4, #16]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d02c      	beq.n	80024a8 <HAL_ADC_Init+0x1d8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800244e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002450:	f023 030f 	bic.w	r3, r3, #15
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002456:	6e23      	ldr	r3, [r4, #96]	; 0x60
}
 8002458:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6623      	str	r3, [r4, #96]	; 0x60
}
 8002464:	b002      	add	sp, #8
 8002466:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8002468:	f7fe fd3c 	bl	8000ee4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800246c:	6665      	str	r5, [r4, #100]	; 0x64
    hadc->Lock = HAL_UNLOCKED;
 800246e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
 8002472:	e739      	b.n	80022e8 <HAL_ADC_Init+0x18>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002474:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002476:	68e0      	ldr	r0, [r4, #12]
 8002478:	4308      	orrs	r0, r1
 800247a:	7e61      	ldrb	r1, [r4, #25]
 800247c:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002480:	68a1      	ldr	r1, [r4, #8]
 8002482:	2908      	cmp	r1, #8
 8002484:	d006      	beq.n	8002494 <HAL_ADC_Init+0x1c4>
 8002486:	290c      	cmp	r1, #12
 8002488:	d048      	beq.n	800251c <HAL_ADC_Init+0x24c>
 800248a:	291c      	cmp	r1, #28
 800248c:	d057      	beq.n	800253e <HAL_ADC_Init+0x26e>
 800248e:	2918      	cmp	r1, #24
 8002490:	bf08      	it	eq
 8002492:	2218      	moveq	r2, #24
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002494:	f894 1020 	ldrb.w	r1, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002498:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800249c:	4302      	orrs	r2, r0
 800249e:	e791      	b.n	80023c4 <HAL_ADC_Init+0xf4>
    return HAL_ERROR;
 80024a0:	2501      	movs	r5, #1
}
 80024a2:	4628      	mov	r0, r5
 80024a4:	b002      	add	sp, #8
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024aa:	69e3      	ldr	r3, [r4, #28]
 80024ac:	f021 010f 	bic.w	r1, r1, #15
 80024b0:	3b01      	subs	r3, #1
 80024b2:	430b      	orrs	r3, r1
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	e7ce      	b.n	8002456 <HAL_ADC_Init+0x186>
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80024b8:	492b      	ldr	r1, [pc, #172]	; (8002568 <HAL_ADC_Init+0x298>)
 80024ba:	4001      	ands	r1, r0
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024c0:	6822      	ldr	r2, [r4, #0]
 80024c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024c4:	6913      	ldr	r3, [r2, #16]
 80024c6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80024ca:	430b      	orrs	r3, r1
 80024cc:	6113      	str	r3, [r2, #16]
 80024ce:	e78e      	b.n	80023ee <HAL_ADC_Init+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024d0:	4920      	ldr	r1, [pc, #128]	; (8002554 <HAL_ADC_Init+0x284>)
 80024d2:	6888      	ldr	r0, [r1, #8]
 80024d4:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80024d8:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024da:	4301      	orrs	r1, r0
 80024dc:	07c8      	lsls	r0, r1, #31
 80024de:	f53f af64 	bmi.w	80023aa <HAL_ADC_Init+0xda>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024e2:	4922      	ldr	r1, [pc, #136]	; (800256c <HAL_ADC_Init+0x29c>)
 80024e4:	e75a      	b.n	800239c <HAL_ADC_Init+0xcc>
        if (hadc->Instance == ADC3)
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_ADC_Init+0x288>)
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d019      	beq.n	8002520 <HAL_ADC_Init+0x250>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024ec:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80024ee:	6910      	ldr	r0, [r2, #16]
 80024f0:	e9d4 1312 	ldrd	r1, r3, [r4, #72]	; 0x48
 80024f4:	3901      	subs	r1, #1
 80024f6:	4333      	orrs	r3, r6
 80024f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80024fc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80024fe:	430b      	orrs	r3, r1
 8002500:	491b      	ldr	r1, [pc, #108]	; (8002570 <HAL_ADC_Init+0x2a0>)
 8002502:	4001      	ands	r1, r0
 8002504:	430b      	orrs	r3, r1
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6113      	str	r3, [r2, #16]
 800250c:	e78d      	b.n	800242a <HAL_ADC_Init+0x15a>
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800250e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002512:	7e21      	ldrb	r1, [r4, #24]
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002514:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002516:	ea43 3181 	orr.w	r1, r3, r1, lsl #14
 800251a:	e778      	b.n	800240e <HAL_ADC_Init+0x13e>
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800251c:	2208      	movs	r2, #8
 800251e:	e7b9      	b.n	8002494 <HAL_ADC_Init+0x1c4>
          MODIFY_REG(hadc->Instance->CFGR2,
 8002520:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002522:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002524:	6910      	ldr	r0, [r2, #16]
 8002526:	430b      	orrs	r3, r1
 8002528:	4912      	ldr	r1, [pc, #72]	; (8002574 <HAL_ADC_Init+0x2a4>)
 800252a:	4001      	ands	r1, r0
 800252c:	430b      	orrs	r3, r1
 800252e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002530:	430b      	orrs	r3, r1
 8002532:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002534:	430b      	orrs	r3, r1
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6113      	str	r3, [r2, #16]
 800253c:	e775      	b.n	800242a <HAL_ADC_Init+0x15a>
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800253e:	2210      	movs	r2, #16
 8002540:	e7a8      	b.n	8002494 <HAL_ADC_Init+0x1c4>
 8002542:	bf00      	nop
 8002544:	5fffffc0 	.word	0x5fffffc0
 8002548:	24000004 	.word	0x24000004
 800254c:	053e2d63 	.word	0x053e2d63
 8002550:	6fffffc0 	.word	0x6fffffc0
 8002554:	40022000 	.word	0x40022000
 8002558:	58026000 	.word	0x58026000
 800255c:	58026300 	.word	0x58026300
 8002560:	fff0c003 	.word	0xfff0c003
 8002564:	ffffbffc 	.word	0xffffbffc
 8002568:	fff04007 	.word	0xfff04007
 800256c:	40022300 	.word	0x40022300
 8002570:	fc00f81e 	.word	0xfc00f81e
 8002574:	fc00f81f 	.word	0xfc00f81f

08002578 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop

0800257c <HAL_ADCEx_InjectedQueueOverflowCallback>:
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop

08002580 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop

08002584 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop

08002588 <HAL_ADCEx_EndOfSamplingCallback>:
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800258c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d049      	beq.n	8002628 <HAL_ADCEx_MultiModeConfigChannel+0x9c>

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002594:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002596:	2301      	movs	r3, #1
{
 8002598:	b470      	push	{r4, r5, r6}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800259a:	4d3a      	ldr	r5, [pc, #232]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
{
 800259c:	b09d      	sub	sp, #116	; 0x74
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800259e:	6804      	ldr	r4, [r0, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80025a0:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025a2:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 80025a4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80025a8:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025aa:	d009      	beq.n	80025c0 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ac:	6e01      	ldr	r1, [r0, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025ae:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b2:	f041 0120 	orr.w	r1, r1, #32
 80025b6:	6601      	str	r1, [r0, #96]	; 0x60
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	b01d      	add	sp, #116	; 0x74
 80025bc:	bc70      	pop	{r4, r5, r6}
 80025be:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025c0:	4b31      	ldr	r3, [pc, #196]	; (8002688 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	0752      	lsls	r2, r2, #29
 80025c6:	d50c      	bpl.n	80025e2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80025c8:	68a3      	ldr	r3, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ca:	6e02      	ldr	r2, [r0, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ce:	f042 0220 	orr.w	r2, r2, #32
 80025d2:	6602      	str	r2, [r0, #96]	; 0x60
  __HAL_UNLOCK(hadc);
 80025d4:	2200      	movs	r2, #0
 80025d6:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 80025da:	4618      	mov	r0, r3
 80025dc:	b01d      	add	sp, #116	; 0x74
 80025de:	bc70      	pop	{r4, r5, r6}
 80025e0:	4770      	bx	lr
 80025e2:	68a2      	ldr	r2, [r4, #8]
 80025e4:	0755      	lsls	r5, r2, #29
 80025e6:	d4f0      	bmi.n	80025ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025e8:	680a      	ldr	r2, [r1, #0]
 80025ea:	b302      	cbz	r2, 800262e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80025ec:	4d27      	ldr	r5, [pc, #156]	; (800268c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 80025ee:	684e      	ldr	r6, [r1, #4]
 80025f0:	68aa      	ldr	r2, [r5, #8]
 80025f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80025f6:	4332      	orrs	r2, r6
 80025f8:	60aa      	str	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025fa:	6802      	ldr	r2, [r0, #0]
 80025fc:	42a2      	cmp	r2, r4
 80025fe:	d036      	beq.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8002600:	429a      	cmp	r2, r3
 8002602:	d034      	beq.n	800266e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002604:	4b22      	ldr	r3, [pc, #136]	; (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	43db      	mvns	r3, r3
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d036      	beq.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
        MODIFY_REG(tmpADC_Common->CCR,
 8002612:	680a      	ldr	r2, [r1, #0]
 8002614:	4c1d      	ldr	r4, [pc, #116]	; (800268c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8002616:	6889      	ldr	r1, [r1, #8]
 8002618:	68a3      	ldr	r3, [r4, #8]
 800261a:	430a      	orrs	r2, r1
 800261c:	491d      	ldr	r1, [pc, #116]	; (8002694 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 800261e:	4019      	ands	r1, r3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002620:	2300      	movs	r3, #0
        MODIFY_REG(tmpADC_Common->CCR,
 8002622:	430a      	orrs	r2, r1
 8002624:	60a2      	str	r2, [r4, #8]
 8002626:	e7d5      	b.n	80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8002628:	2302      	movs	r3, #2
}
 800262a:	4618      	mov	r0, r3
 800262c:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800262e:	4917      	ldr	r1, [pc, #92]	; (800268c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8002630:	688a      	ldr	r2, [r1, #8]
 8002632:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002636:	608a      	str	r2, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002638:	6802      	ldr	r2, [r0, #0]
 800263a:	42a2      	cmp	r2, r4
 800263c:	d00e      	beq.n	800265c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800263e:	429a      	cmp	r2, r3
 8002640:	d00c      	beq.n	800265c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	43db      	mvns	r3, r3
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	b1c3      	cbz	r3, 8002680 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800264e:	490f      	ldr	r1, [pc, #60]	; (800268c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002650:	2300      	movs	r3, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002652:	4a10      	ldr	r2, [pc, #64]	; (8002694 <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8002654:	688c      	ldr	r4, [r1, #8]
 8002656:	4022      	ands	r2, r4
 8002658:	608a      	str	r2, [r1, #8]
 800265a:	e7bb      	b.n	80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 800265c:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8002660:	6892      	ldr	r2, [r2, #8]
 8002662:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002664:	4313      	orrs	r3, r2
 8002666:	43db      	mvns	r3, r3
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	e7ee      	b.n	800264c <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 800266e:	4a05      	ldr	r2, [pc, #20]	; (8002684 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8002672:	6892      	ldr	r2, [r2, #8]
 8002674:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002676:	4313      	orrs	r3, r2
 8002678:	43db      	mvns	r3, r3
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	e7c6      	b.n	800260e <HAL_ADCEx_MultiModeConfigChannel+0x82>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e7a7      	b.n	80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8002684:	40022000 	.word	0x40022000
 8002688:	40022100 	.word	0x40022100
 800268c:	40022300 	.word	0x40022300
 8002690:	58026000 	.word	0x58026000
 8002694:	fffff0e0 	.word	0xfffff0e0

08002698 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002698:	4906      	ldr	r1, [pc, #24]	; (80026b4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800269e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a8:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ac:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80026ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80026b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00
 80026b8:	05fa0000 	.word	0x05fa0000

080026bc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026be:	b500      	push	{lr}
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ce:	f1be 0f04 	cmp.w	lr, #4
 80026d2:	bf28      	it	cs
 80026d4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d8:	f1bc 0f06 	cmp.w	ip, #6
 80026dc:	d91a      	bls.n	8002714 <HAL_NVIC_SetPriority+0x58>
 80026de:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80026e4:	fa0c fc03 	lsl.w	ip, ip, r3
 80026e8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80026f0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80026f6:	ea21 010c 	bic.w	r1, r1, ip
 80026fa:	fa01 f103 	lsl.w	r1, r1, r3
 80026fe:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002702:	db0a      	blt.n	800271a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002704:	0109      	lsls	r1, r1, #4
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_NVIC_SetPriority+0x74>)
 8002708:	b2c9      	uxtb	r1, r1
 800270a:	4403      	add	r3, r0
 800270c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002710:	f85d fb04 	ldr.w	pc, [sp], #4
 8002714:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	4613      	mov	r3, r2
 8002718:	e7e8      	b.n	80026ec <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271a:	f000 000f 	and.w	r0, r0, #15
 800271e:	0109      	lsls	r1, r1, #4
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <HAL_NVIC_SetPriority+0x78>)
 8002722:	b2c9      	uxtb	r1, r1
 8002724:	4403      	add	r3, r0
 8002726:	7619      	strb	r1, [r3, #24]
 8002728:	f85d fb04 	ldr.w	pc, [sp], #4
 800272c:	e000ed00 	.word	0xe000ed00
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ecfc 	.word	0xe000ecfc

08002738 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002738:	2800      	cmp	r0, #0
 800273a:	db07      	blt.n	800274c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273c:	2301      	movs	r3, #1
 800273e:	f000 011f 	and.w	r1, r0, #31
 8002742:	4a03      	ldr	r2, [pc, #12]	; (8002750 <HAL_NVIC_EnableIRQ+0x18>)
 8002744:	0940      	lsrs	r0, r0, #5
 8002746:	408b      	lsls	r3, r1
 8002748:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000e100 	.word	0xe000e100

08002754 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	1e43      	subs	r3, r0, #1
 8002756:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275a:	d20c      	bcs.n	8002776 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002760:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002762:	4906      	ldr	r1, [pc, #24]	; (800277c <HAL_SYSTICK_Config+0x28>)
 8002764:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002768:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002772:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002774:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002776:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002780:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002786:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800278a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800278e:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8002790:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_MPU_Enable+0x1c>)
 800279e:	f040 0001 	orr.w	r0, r0, #1
 80027a2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80027a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80027ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80027b2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80027bc:	7843      	ldrb	r3, [r0, #1]
 80027be:	4a16      	ldr	r2, [pc, #88]	; (8002818 <HAL_MPU_ConfigRegion+0x5c>)
 80027c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 80027c4:	7803      	ldrb	r3, [r0, #0]
 80027c6:	b313      	cbz	r3, 800280e <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80027c8:	6843      	ldr	r3, [r0, #4]
 80027ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027ce:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027d0:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027d4:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80027d6:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027d8:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80027dc:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027e0:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027e2:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027e4:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027e8:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027ec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027f0:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027f2:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027f6:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80027fe:	7a01      	ldrb	r1, [r0, #8]
 8002800:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002804:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002808:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800280c:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 800280e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8002812:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800281c:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <DMA_CalcBaseAndBitshift+0xd4>)
 800281e:	4935      	ldr	r1, [pc, #212]	; (80028f4 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8002820:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002822:	4d35      	ldr	r5, [pc, #212]	; (80028f8 <DMA_CalcBaseAndBitshift+0xdc>)
 8002824:	6802      	ldr	r2, [r0, #0]
 8002826:	4c35      	ldr	r4, [pc, #212]	; (80028fc <DMA_CalcBaseAndBitshift+0xe0>)
 8002828:	42aa      	cmp	r2, r5
 800282a:	bf18      	it	ne
 800282c:	429a      	cmpne	r2, r3
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	428a      	cmp	r2, r1
 8002836:	bf08      	it	eq
 8002838:	f043 0301 	orreq.w	r3, r3, #1
 800283c:	3130      	adds	r1, #48	; 0x30
 800283e:	42a2      	cmp	r2, r4
 8002840:	bf08      	it	eq
 8002842:	f043 0301 	orreq.w	r3, r3, #1
 8002846:	3430      	adds	r4, #48	; 0x30
 8002848:	428a      	cmp	r2, r1
 800284a:	bf08      	it	eq
 800284c:	f043 0301 	orreq.w	r3, r3, #1
 8002850:	3130      	adds	r1, #48	; 0x30
 8002852:	42a2      	cmp	r2, r4
 8002854:	bf08      	it	eq
 8002856:	f043 0301 	orreq.w	r3, r3, #1
 800285a:	3430      	adds	r4, #48	; 0x30
 800285c:	428a      	cmp	r2, r1
 800285e:	bf08      	it	eq
 8002860:	f043 0301 	orreq.w	r3, r3, #1
 8002864:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002868:	42a2      	cmp	r2, r4
 800286a:	bf08      	it	eq
 800286c:	f043 0301 	orreq.w	r3, r3, #1
 8002870:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8002874:	428a      	cmp	r2, r1
 8002876:	bf08      	it	eq
 8002878:	f043 0301 	orreq.w	r3, r3, #1
 800287c:	3130      	adds	r1, #48	; 0x30
 800287e:	42a2      	cmp	r2, r4
 8002880:	bf08      	it	eq
 8002882:	f043 0301 	orreq.w	r3, r3, #1
 8002886:	3430      	adds	r4, #48	; 0x30
 8002888:	428a      	cmp	r2, r1
 800288a:	bf08      	it	eq
 800288c:	f043 0301 	orreq.w	r3, r3, #1
 8002890:	3130      	adds	r1, #48	; 0x30
 8002892:	42a2      	cmp	r2, r4
 8002894:	bf08      	it	eq
 8002896:	f043 0301 	orreq.w	r3, r3, #1
 800289a:	3430      	adds	r4, #48	; 0x30
 800289c:	428a      	cmp	r2, r1
 800289e:	bf08      	it	eq
 80028a0:	f043 0301 	orreq.w	r3, r3, #1
 80028a4:	3130      	adds	r1, #48	; 0x30
 80028a6:	42a2      	cmp	r2, r4
 80028a8:	bf08      	it	eq
 80028aa:	f043 0301 	orreq.w	r3, r3, #1
 80028ae:	428a      	cmp	r2, r1
 80028b0:	bf08      	it	eq
 80028b2:	f043 0301 	orreq.w	r3, r3, #1
 80028b6:	b913      	cbnz	r3, 80028be <DMA_CalcBaseAndBitshift+0xa2>
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <DMA_CalcBaseAndBitshift+0xe4>)
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d113      	bne.n	80028e6 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80028be:	b2d3      	uxtb	r3, r2
 80028c0:	4910      	ldr	r1, [pc, #64]	; (8002904 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80028c2:	4c11      	ldr	r4, [pc, #68]	; (8002908 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80028c4:	3b10      	subs	r3, #16
 80028c6:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 80028ca:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80028ce:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80028d2:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80028d6:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80028d8:	bf88      	it	hi
 80028da:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80028dc:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80028de:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bc30      	pop	{r4, r5}
 80028e4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80028e6:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 80028ea:	6583      	str	r3, [r0, #88]	; 0x58
 80028ec:	e7f8      	b.n	80028e0 <DMA_CalcBaseAndBitshift+0xc4>
 80028ee:	bf00      	nop
 80028f0:	40020010 	.word	0x40020010
 80028f4:	40020040 	.word	0x40020040
 80028f8:	40020028 	.word	0x40020028
 80028fc:	40020058 	.word	0x40020058
 8002900:	400204b8 	.word	0x400204b8
 8002904:	aaaaaaab 	.word	0xaaaaaaab
 8002908:	08008680 	.word	0x08008680
 800290c:	fffffc00 	.word	0xfffffc00

08002910 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002910:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002912:	4a29      	ldr	r2, [pc, #164]	; (80029b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8002914:	4929      	ldr	r1, [pc, #164]	; (80029bc <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8002916:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002918:	4d29      	ldr	r5, [pc, #164]	; (80029c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800291a:	4c2a      	ldr	r4, [pc, #168]	; (80029c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 800291c:	42ab      	cmp	r3, r5
 800291e:	bf18      	it	ne
 8002920:	4293      	cmpne	r3, r2
 8002922:	bf0c      	ite	eq
 8002924:	2201      	moveq	r2, #1
 8002926:	2200      	movne	r2, #0
 8002928:	428b      	cmp	r3, r1
 800292a:	bf08      	it	eq
 800292c:	f042 0201 	orreq.w	r2, r2, #1
 8002930:	3128      	adds	r1, #40	; 0x28
 8002932:	42a3      	cmp	r3, r4
 8002934:	bf08      	it	eq
 8002936:	f042 0201 	orreq.w	r2, r2, #1
 800293a:	3428      	adds	r4, #40	; 0x28
 800293c:	428b      	cmp	r3, r1
 800293e:	bf08      	it	eq
 8002940:	f042 0201 	orreq.w	r2, r2, #1
 8002944:	3128      	adds	r1, #40	; 0x28
 8002946:	42a3      	cmp	r3, r4
 8002948:	bf08      	it	eq
 800294a:	f042 0201 	orreq.w	r2, r2, #1
 800294e:	428b      	cmp	r3, r1
 8002950:	bf08      	it	eq
 8002952:	f042 0201 	orreq.w	r2, r2, #1
 8002956:	b912      	cbnz	r2, 800295e <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8002958:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d113      	bne.n	8002986 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4c1a      	ldr	r4, [pc, #104]	; (80029cc <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002962:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002964:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002966:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002968:	4d1a      	ldr	r5, [pc, #104]	; (80029d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800296a:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800296e:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002970:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002974:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002978:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800297e:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002980:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002982:	bc30      	pop	{r4, r5}
 8002984:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002986:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002988:	4913      	ldr	r1, [pc, #76]	; (80029d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800298a:	4c14      	ldr	r4, [pc, #80]	; (80029dc <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800298c:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800298e:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002990:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002992:	fba4 2302 	umull	r2, r3, r4, r2
 8002996:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800299a:	d800      	bhi.n	800299e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 800299c:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800299e:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80029a0:	f003 051f 	and.w	r5, r3, #31
 80029a4:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029a6:	4c0f      	ldr	r4, [pc, #60]	; (80029e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80029a8:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80029aa:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029ac:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80029ae:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80029b0:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80029b2:	6602      	str	r2, [r0, #96]	; 0x60
}
 80029b4:	e7e5      	b.n	8002982 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 80029b6:	bf00      	nop
 80029b8:	58025408 	.word	0x58025408
 80029bc:	58025430 	.word	0x58025430
 80029c0:	5802541c 	.word	0x5802541c
 80029c4:	58025444 	.word	0x58025444
 80029c8:	58025494 	.word	0x58025494
 80029cc:	cccccccd 	.word	0xcccccccd
 80029d0:	16009600 	.word	0x16009600
 80029d4:	58025880 	.word	0x58025880
 80029d8:	bffdfbf0 	.word	0xbffdfbf0
 80029dc:	aaaaaaab 	.word	0xaaaaaaab
 80029e0:	10008200 	.word	0x10008200
 80029e4:	40020880 	.word	0x40020880

080029e8 <HAL_DMA_Init>:
{
 80029e8:	b538      	push	{r3, r4, r5, lr}
 80029ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029ec:	f7fe fde2 	bl	80015b4 <HAL_GetTick>
  if(hdma == NULL)
 80029f0:	2c00      	cmp	r4, #0
 80029f2:	f000 8166 	beq.w	8002cc2 <HAL_DMA_Init+0x2da>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	4605      	mov	r5, r0
 80029fa:	4ba4      	ldr	r3, [pc, #656]	; (8002c8c <HAL_DMA_Init+0x2a4>)
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d048      	beq.n	8002a92 <HAL_DMA_Init+0xaa>
 8002a00:	3318      	adds	r3, #24
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d045      	beq.n	8002a92 <HAL_DMA_Init+0xaa>
 8002a06:	3330      	adds	r3, #48	; 0x30
 8002a08:	49a1      	ldr	r1, [pc, #644]	; (8002c90 <HAL_DMA_Init+0x2a8>)
 8002a0a:	428a      	cmp	r2, r1
 8002a0c:	bf18      	it	ne
 8002a0e:	429a      	cmpne	r2, r3
 8002a10:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	428a      	cmp	r2, r1
 8002a1c:	bf08      	it	eq
 8002a1e:	f043 0301 	orreq.w	r3, r3, #1
 8002a22:	3118      	adds	r1, #24
 8002a24:	428a      	cmp	r2, r1
 8002a26:	bf08      	it	eq
 8002a28:	f043 0301 	orreq.w	r3, r3, #1
 8002a2c:	3118      	adds	r1, #24
 8002a2e:	428a      	cmp	r2, r1
 8002a30:	bf08      	it	eq
 8002a32:	f043 0301 	orreq.w	r3, r3, #1
 8002a36:	3118      	adds	r1, #24
 8002a38:	428a      	cmp	r2, r1
 8002a3a:	bf08      	it	eq
 8002a3c:	f043 0301 	orreq.w	r3, r3, #1
 8002a40:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002a44:	428a      	cmp	r2, r1
 8002a46:	bf08      	it	eq
 8002a48:	f043 0301 	orreq.w	r3, r3, #1
 8002a4c:	3118      	adds	r1, #24
 8002a4e:	428a      	cmp	r2, r1
 8002a50:	bf08      	it	eq
 8002a52:	f043 0301 	orreq.w	r3, r3, #1
 8002a56:	3118      	adds	r1, #24
 8002a58:	428a      	cmp	r2, r1
 8002a5a:	bf08      	it	eq
 8002a5c:	f043 0301 	orreq.w	r3, r3, #1
 8002a60:	3118      	adds	r1, #24
 8002a62:	428a      	cmp	r2, r1
 8002a64:	bf08      	it	eq
 8002a66:	f043 0301 	orreq.w	r3, r3, #1
 8002a6a:	3118      	adds	r1, #24
 8002a6c:	428a      	cmp	r2, r1
 8002a6e:	bf08      	it	eq
 8002a70:	f043 0301 	orreq.w	r3, r3, #1
 8002a74:	3118      	adds	r1, #24
 8002a76:	428a      	cmp	r2, r1
 8002a78:	bf08      	it	eq
 8002a7a:	f043 0301 	orreq.w	r3, r3, #1
 8002a7e:	3118      	adds	r1, #24
 8002a80:	428a      	cmp	r2, r1
 8002a82:	bf08      	it	eq
 8002a84:	f043 0301 	orreq.w	r3, r3, #1
 8002a88:	b91b      	cbnz	r3, 8002a92 <HAL_DMA_Init+0xaa>
 8002a8a:	4b82      	ldr	r3, [pc, #520]	; (8002c94 <HAL_DMA_Init+0x2ac>)
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 8180 	bne.w	8002d92 <HAL_DMA_Init+0x3aa>
    __HAL_UNLOCK(hdma);
 8002a92:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a94:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8002a96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a9a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002a9e:	6813      	ldr	r3, [r2, #0]
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e005      	b.n	8002ab4 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aa8:	f7fe fd84 	bl	80015b4 <HAL_GetTick>
 8002aac:	1b43      	subs	r3, r0, r5
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	f200 80e5 	bhi.w	8002c7e <HAL_DMA_Init+0x296>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	07d2      	lsls	r2, r2, #31
 8002aba:	d4f5      	bmi.n	8002aa8 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8002abc:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac0:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8002ac2:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ac4:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002acc:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ace:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad2:	69a1      	ldr	r1, [r4, #24]
 8002ad4:	ea42 0201 	orr.w	r2, r2, r1
 8002ad8:	69e1      	ldr	r1, [r4, #28]
 8002ada:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ade:	6a21      	ldr	r1, [r4, #32]
 8002ae0:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae4:	496c      	ldr	r1, [pc, #432]	; (8002c98 <HAL_DMA_Init+0x2b0>)
 8002ae6:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 8002aea:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aee:	d103      	bne.n	8002af8 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af0:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8002af4:	4301      	orrs	r1, r0
 8002af6:	430a      	orrs	r2, r1
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002af8:	6861      	ldr	r1, [r4, #4]
 8002afa:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8002afe:	281f      	cmp	r0, #31
 8002b00:	f240 80d4 	bls.w	8002cac <HAL_DMA_Init+0x2c4>
 8002b04:	f1a1 004f 	sub.w	r0, r1, #79	; 0x4f
 8002b08:	2803      	cmp	r0, #3
 8002b0a:	f200 80d5 	bhi.w	8002cb8 <HAL_DMA_Init+0x2d0>
        registerValue |= DMA_SxCR_TRBUFF;
 8002b0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b12:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b14:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8002b16:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b18:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b1a:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b1c:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002b20:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b24:	d10e      	bne.n	8002b44 <HAL_DMA_Init+0x15c>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b26:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8002b2a:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b2c:	b150      	cbz	r0, 8002b44 <HAL_DMA_Init+0x15c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b2e:	69a5      	ldr	r5, [r4, #24]
 8002b30:	2d00      	cmp	r5, #0
 8002b32:	f040 8108 	bne.w	8002d46 <HAL_DMA_Init+0x35e>
    switch (hdma->Init.FIFOThreshold)
 8002b36:	2a01      	cmp	r2, #1
 8002b38:	f000 8126 	beq.w	8002d88 <HAL_DMA_Init+0x3a0>
 8002b3c:	f032 0202 	bics.w	r2, r2, #2
 8002b40:	f000 8109 	beq.w	8002d56 <HAL_DMA_Init+0x36e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002b44:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7ff fe68 	bl	800281c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b4c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002b4e:	233f      	movs	r3, #63	; 0x3f
 8002b50:	f002 021f 	and.w	r2, r2, #31
 8002b54:	4093      	lsls	r3, r2
 8002b56:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b58:	6822      	ldr	r2, [r4, #0]
 8002b5a:	4b4c      	ldr	r3, [pc, #304]	; (8002c8c <HAL_DMA_Init+0x2a4>)
 8002b5c:	484f      	ldr	r0, [pc, #316]	; (8002c9c <HAL_DMA_Init+0x2b4>)
 8002b5e:	494c      	ldr	r1, [pc, #304]	; (8002c90 <HAL_DMA_Init+0x2a8>)
 8002b60:	4282      	cmp	r2, r0
 8002b62:	bf18      	it	ne
 8002b64:	429a      	cmpne	r2, r3
 8002b66:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	428a      	cmp	r2, r1
 8002b72:	bf08      	it	eq
 8002b74:	f043 0301 	orreq.w	r3, r3, #1
 8002b78:	3130      	adds	r1, #48	; 0x30
 8002b7a:	4282      	cmp	r2, r0
 8002b7c:	bf08      	it	eq
 8002b7e:	f043 0301 	orreq.w	r3, r3, #1
 8002b82:	3030      	adds	r0, #48	; 0x30
 8002b84:	428a      	cmp	r2, r1
 8002b86:	bf08      	it	eq
 8002b88:	f043 0301 	orreq.w	r3, r3, #1
 8002b8c:	3130      	adds	r1, #48	; 0x30
 8002b8e:	4282      	cmp	r2, r0
 8002b90:	bf08      	it	eq
 8002b92:	f043 0301 	orreq.w	r3, r3, #1
 8002b96:	3030      	adds	r0, #48	; 0x30
 8002b98:	428a      	cmp	r2, r1
 8002b9a:	bf08      	it	eq
 8002b9c:	f043 0301 	orreq.w	r3, r3, #1
 8002ba0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002ba4:	4282      	cmp	r2, r0
 8002ba6:	bf08      	it	eq
 8002ba8:	f043 0301 	orreq.w	r3, r3, #1
 8002bac:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002bb0:	428a      	cmp	r2, r1
 8002bb2:	bf08      	it	eq
 8002bb4:	f043 0301 	orreq.w	r3, r3, #1
 8002bb8:	3130      	adds	r1, #48	; 0x30
 8002bba:	4282      	cmp	r2, r0
 8002bbc:	bf08      	it	eq
 8002bbe:	f043 0301 	orreq.w	r3, r3, #1
 8002bc2:	3030      	adds	r0, #48	; 0x30
 8002bc4:	428a      	cmp	r2, r1
 8002bc6:	bf08      	it	eq
 8002bc8:	f043 0301 	orreq.w	r3, r3, #1
 8002bcc:	3130      	adds	r1, #48	; 0x30
 8002bce:	4282      	cmp	r2, r0
 8002bd0:	bf08      	it	eq
 8002bd2:	f043 0301 	orreq.w	r3, r3, #1
 8002bd6:	3030      	adds	r0, #48	; 0x30
 8002bd8:	428a      	cmp	r2, r1
 8002bda:	bf08      	it	eq
 8002bdc:	f043 0301 	orreq.w	r3, r3, #1
 8002be0:	3130      	adds	r1, #48	; 0x30
 8002be2:	4282      	cmp	r2, r0
 8002be4:	bf08      	it	eq
 8002be6:	f043 0301 	orreq.w	r3, r3, #1
 8002bea:	3030      	adds	r0, #48	; 0x30
 8002bec:	428a      	cmp	r2, r1
 8002bee:	bf08      	it	eq
 8002bf0:	f043 0301 	orreq.w	r3, r3, #1
 8002bf4:	492a      	ldr	r1, [pc, #168]	; (8002ca0 <HAL_DMA_Init+0x2b8>)
 8002bf6:	4282      	cmp	r2, r0
 8002bf8:	bf08      	it	eq
 8002bfa:	f043 0301 	orreq.w	r3, r3, #1
 8002bfe:	4829      	ldr	r0, [pc, #164]	; (8002ca4 <HAL_DMA_Init+0x2bc>)
 8002c00:	428a      	cmp	r2, r1
 8002c02:	bf08      	it	eq
 8002c04:	f043 0301 	orreq.w	r3, r3, #1
 8002c08:	3128      	adds	r1, #40	; 0x28
 8002c0a:	4282      	cmp	r2, r0
 8002c0c:	bf08      	it	eq
 8002c0e:	f043 0301 	orreq.w	r3, r3, #1
 8002c12:	3028      	adds	r0, #40	; 0x28
 8002c14:	428a      	cmp	r2, r1
 8002c16:	bf08      	it	eq
 8002c18:	f043 0301 	orreq.w	r3, r3, #1
 8002c1c:	3128      	adds	r1, #40	; 0x28
 8002c1e:	4282      	cmp	r2, r0
 8002c20:	bf08      	it	eq
 8002c22:	f043 0301 	orreq.w	r3, r3, #1
 8002c26:	3028      	adds	r0, #40	; 0x28
 8002c28:	428a      	cmp	r2, r1
 8002c2a:	bf08      	it	eq
 8002c2c:	f043 0301 	orreq.w	r3, r3, #1
 8002c30:	3128      	adds	r1, #40	; 0x28
 8002c32:	4282      	cmp	r2, r0
 8002c34:	bf08      	it	eq
 8002c36:	f043 0301 	orreq.w	r3, r3, #1
 8002c3a:	428a      	cmp	r2, r1
 8002c3c:	bf08      	it	eq
 8002c3e:	f043 0301 	orreq.w	r3, r3, #1
 8002c42:	b913      	cbnz	r3, 8002c4a <HAL_DMA_Init+0x262>
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <HAL_DMA_Init+0x2c0>)
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d113      	bne.n	8002c72 <HAL_DMA_Init+0x28a>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f7ff fe60 	bl	8002910 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c50:	68a3      	ldr	r3, [r4, #8]
 8002c52:	2b80      	cmp	r3, #128	; 0x80
 8002c54:	d037      	beq.n	8002cc6 <HAL_DMA_Init+0x2de>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c56:	7922      	ldrb	r2, [r4, #4]
 8002c58:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002c5a:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c5c:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8002c60:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c62:	6861      	ldr	r1, [r4, #4]
 8002c64:	1e4b      	subs	r3, r1, #1
 8002c66:	2b07      	cmp	r3, #7
 8002c68:	d931      	bls.n	8002cce <HAL_DMA_Init+0x2e6>
      hdma->DMAmuxRequestGen = 0U;
 8002c6a:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c6c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c70:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c72:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002c74:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c76:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002c78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002c7c:	bd38      	pop	{r3, r4, r5, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c7e:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c80:	2303      	movs	r3, #3
        return HAL_ERROR;
 8002c82:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c84:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c86:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002c8a:	bd38      	pop	{r3, r4, r5, pc}
 8002c8c:	40020010 	.word	0x40020010
 8002c90:	40020040 	.word	0x40020040
 8002c94:	400204b8 	.word	0x400204b8
 8002c98:	fe10803f 	.word	0xfe10803f
 8002c9c:	40020028 	.word	0x40020028
 8002ca0:	58025408 	.word	0x58025408
 8002ca4:	5802541c 	.word	0x5802541c
 8002ca8:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002cac:	4d6c      	ldr	r5, [pc, #432]	; (8002e60 <HAL_DMA_Init+0x478>)
 8002cae:	fa25 f000 	lsr.w	r0, r5, r0
 8002cb2:	07c0      	lsls	r0, r0, #31
 8002cb4:	f53f af2b 	bmi.w	8002b0e <HAL_DMA_Init+0x126>
 8002cb8:	3974      	subs	r1, #116	; 0x74
 8002cba:	2903      	cmp	r1, #3
 8002cbc:	f63f af29 	bhi.w	8002b12 <HAL_DMA_Init+0x12a>
 8002cc0:	e725      	b.n	8002b0e <HAL_DMA_Init+0x126>
    return HAL_ERROR;
 8002cc2:	2001      	movs	r0, #1
}
 8002cc4:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	6063      	str	r3, [r4, #4]
 8002ccc:	e7c4      	b.n	8002c58 <HAL_DMA_Init+0x270>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cce:	6820      	ldr	r0, [r4, #0]
 8002cd0:	4a64      	ldr	r2, [pc, #400]	; (8002e64 <HAL_DMA_Init+0x47c>)
 8002cd2:	4d65      	ldr	r5, [pc, #404]	; (8002e68 <HAL_DMA_Init+0x480>)
 8002cd4:	42a8      	cmp	r0, r5
 8002cd6:	bf18      	it	ne
 8002cd8:	4290      	cmpne	r0, r2
 8002cda:	f105 0514 	add.w	r5, r5, #20
 8002cde:	bf0c      	ite	eq
 8002ce0:	2201      	moveq	r2, #1
 8002ce2:	2200      	movne	r2, #0
 8002ce4:	42a8      	cmp	r0, r5
 8002ce6:	bf08      	it	eq
 8002ce8:	f042 0201 	orreq.w	r2, r2, #1
 8002cec:	3514      	adds	r5, #20
 8002cee:	42a8      	cmp	r0, r5
 8002cf0:	bf08      	it	eq
 8002cf2:	f042 0201 	orreq.w	r2, r2, #1
 8002cf6:	3514      	adds	r5, #20
 8002cf8:	42a8      	cmp	r0, r5
 8002cfa:	bf08      	it	eq
 8002cfc:	f042 0201 	orreq.w	r2, r2, #1
 8002d00:	3514      	adds	r5, #20
 8002d02:	42a8      	cmp	r0, r5
 8002d04:	bf08      	it	eq
 8002d06:	f042 0201 	orreq.w	r2, r2, #1
 8002d0a:	3514      	adds	r5, #20
 8002d0c:	42a8      	cmp	r0, r5
 8002d0e:	bf08      	it	eq
 8002d10:	f042 0201 	orreq.w	r2, r2, #1
 8002d14:	b93a      	cbnz	r2, 8002d26 <HAL_DMA_Init+0x33e>
 8002d16:	4a55      	ldr	r2, [pc, #340]	; (8002e6c <HAL_DMA_Init+0x484>)
 8002d18:	4290      	cmp	r0, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_DMA_Init+0x33e>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d1c:	4a54      	ldr	r2, [pc, #336]	; (8002e70 <HAL_DMA_Init+0x488>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d1e:	4855      	ldr	r0, [pc, #340]	; (8002e74 <HAL_DMA_Init+0x48c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d20:	440a      	add	r2, r1
 8002d22:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d24:	e003      	b.n	8002d2e <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d26:	4a54      	ldr	r2, [pc, #336]	; (8002e78 <HAL_DMA_Init+0x490>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002d28:	4854      	ldr	r0, [pc, #336]	; (8002e7c <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d2a:	440a      	add	r2, r1
 8002d2c:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d34:	2100      	movs	r1, #0
 8002d36:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002d3a:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d3c:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d3e:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	e795      	b.n	8002c72 <HAL_DMA_Init+0x28a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d46:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8002d4a:	d00e      	beq.n	8002d6a <HAL_DMA_Init+0x382>
    switch (hdma->Init.FIFOThreshold)
 8002d4c:	2a02      	cmp	r2, #2
 8002d4e:	d905      	bls.n	8002d5c <HAL_DMA_Init+0x374>
 8002d50:	2a03      	cmp	r2, #3
 8002d52:	f47f aef7 	bne.w	8002b44 <HAL_DMA_Init+0x15c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d56:	01c2      	lsls	r2, r0, #7
 8002d58:	f57f aef4 	bpl.w	8002b44 <HAL_DMA_Init+0x15c>
          hdma->State = HAL_DMA_STATE_READY;
 8002d5c:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d5e:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8002d60:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d62:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002d64:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002d68:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8002d6a:	2a03      	cmp	r2, #3
 8002d6c:	f63f aeea 	bhi.w	8002b44 <HAL_DMA_Init+0x15c>
 8002d70:	a501      	add	r5, pc, #4	; (adr r5, 8002d78 <HAL_DMA_Init+0x390>)
 8002d72:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8002d76:	bf00      	nop
 8002d78:	08002d5d 	.word	0x08002d5d
 8002d7c:	08002d57 	.word	0x08002d57
 8002d80:	08002d5d 	.word	0x08002d5d
 8002d84:	08002d89 	.word	0x08002d89
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d88:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002d8c:	f47f aeda 	bne.w	8002b44 <HAL_DMA_Init+0x15c>
 8002d90:	e7e4      	b.n	8002d5c <HAL_DMA_Init+0x374>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d92:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <HAL_DMA_Init+0x47c>)
 8002d94:	4834      	ldr	r0, [pc, #208]	; (8002e68 <HAL_DMA_Init+0x480>)
 8002d96:	493a      	ldr	r1, [pc, #232]	; (8002e80 <HAL_DMA_Init+0x498>)
 8002d98:	4282      	cmp	r2, r0
 8002d9a:	bf18      	it	ne
 8002d9c:	429a      	cmpne	r2, r3
 8002d9e:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	428a      	cmp	r2, r1
 8002daa:	bf08      	it	eq
 8002dac:	f043 0301 	orreq.w	r3, r3, #1
 8002db0:	3128      	adds	r1, #40	; 0x28
 8002db2:	4282      	cmp	r2, r0
 8002db4:	bf08      	it	eq
 8002db6:	f043 0301 	orreq.w	r3, r3, #1
 8002dba:	3028      	adds	r0, #40	; 0x28
 8002dbc:	428a      	cmp	r2, r1
 8002dbe:	bf08      	it	eq
 8002dc0:	f043 0301 	orreq.w	r3, r3, #1
 8002dc4:	3128      	adds	r1, #40	; 0x28
 8002dc6:	4282      	cmp	r2, r0
 8002dc8:	bf08      	it	eq
 8002dca:	f043 0301 	orreq.w	r3, r3, #1
 8002dce:	428a      	cmp	r2, r1
 8002dd0:	bf08      	it	eq
 8002dd2:	f043 0301 	orreq.w	r3, r3, #1
 8002dd6:	b913      	cbnz	r3, 8002dde <HAL_DMA_Init+0x3f6>
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_DMA_Init+0x484>)
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d139      	bne.n	8002e52 <HAL_DMA_Init+0x46a>
    __HAL_UNLOCK(hdma);
 8002dde:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de0:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002de2:	4928      	ldr	r1, [pc, #160]	; (8002e84 <HAL_DMA_Init+0x49c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002de8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002dec:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002dee:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002df0:	68a3      	ldr	r3, [r4, #8]
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	d02b      	beq.n	8002e4e <HAL_DMA_Init+0x466>
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	bf0c      	ite	eq
 8002dfa:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8002dfe:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e00:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8002e04:	08db      	lsrs	r3, r3, #3
 8002e06:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e0a:	6965      	ldr	r5, [r4, #20]
 8002e0c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e10:	69a5      	ldr	r5, [r4, #24]
 8002e12:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e16:	69e5      	ldr	r5, [r4, #28]
 8002e18:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e1c:	6a25      	ldr	r5, [r4, #32]
 8002e1e:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8002e22:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e24:	4918      	ldr	r1, [pc, #96]	; (8002e88 <HAL_DMA_Init+0x4a0>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e26:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e28:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e2a:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e2c:	6822      	ldr	r2, [r4, #0]
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <HAL_DMA_Init+0x4a4>)
 8002e30:	4411      	add	r1, r2
 8002e32:	fba3 2301 	umull	r2, r3, r3, r1
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e3c:	f7ff fcee 	bl	800281c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e40:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e42:	2301      	movs	r3, #1
 8002e44:	f002 021f 	and.w	r2, r2, #31
 8002e48:	4093      	lsls	r3, r2
 8002e4a:	6043      	str	r3, [r0, #4]
 8002e4c:	e684      	b.n	8002b58 <HAL_DMA_Init+0x170>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e4e:	2010      	movs	r0, #16
 8002e50:	e7d6      	b.n	8002e00 <HAL_DMA_Init+0x418>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e52:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e54:	2303      	movs	r3, #3
    return HAL_ERROR;
 8002e56:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e58:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002e5e:	bd38      	pop	{r3, r4, r5, pc}
 8002e60:	c3c0003f 	.word	0xc3c0003f
 8002e64:	58025408 	.word	0x58025408
 8002e68:	5802541c 	.word	0x5802541c
 8002e6c:	58025494 	.word	0x58025494
 8002e70:	1000823f 	.word	0x1000823f
 8002e74:	40020940 	.word	0x40020940
 8002e78:	1600963f 	.word	0x1600963f
 8002e7c:	58025940 	.word	0x58025940
 8002e80:	58025430 	.word	0x58025430
 8002e84:	fffe000f 	.word	0xfffe000f
 8002e88:	a7fdabf8 	.word	0xa7fdabf8
 8002e8c:	cccccccd 	.word	0xcccccccd

08002e90 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8002e90:	2800      	cmp	r0, #0
 8002e92:	f000 8270 	beq.w	8003376 <HAL_DMA_Start_IT+0x4e6>
 8002e96:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8002e98:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002e9c:	2801      	cmp	r0, #1
 8002e9e:	f000 826c 	beq.w	800337a <HAL_DMA_Start_IT+0x4ea>
 8002ea2:	2001      	movs	r0, #1
{
 8002ea4:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ea6:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002eaa:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eae:	4284      	cmp	r4, r0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002eb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8002eb6:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002eb8:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002ebc:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8002ec0:	bc70      	pop	{r4, r5, r6}
 8002ec2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec4:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8002ec6:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eca:	4ea2      	ldr	r6, [pc, #648]	; (8003154 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ecc:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8002ed6:	6820      	ldr	r0, [r4, #0]
 8002ed8:	f020 0001 	bic.w	r0, r0, #1
 8002edc:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ede:	489e      	ldr	r0, [pc, #632]	; (8003158 <HAL_DMA_Start_IT+0x2c8>)
 8002ee0:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee4:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ee8:	42b4      	cmp	r4, r6
 8002eea:	bf18      	it	ne
 8002eec:	4284      	cmpne	r4, r0
 8002eee:	f106 0618 	add.w	r6, r6, #24
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2001      	moveq	r0, #1
 8002ef6:	2000      	movne	r0, #0
 8002ef8:	42b4      	cmp	r4, r6
 8002efa:	bf08      	it	eq
 8002efc:	f040 0001 	orreq.w	r0, r0, #1
 8002f00:	3618      	adds	r6, #24
 8002f02:	42b4      	cmp	r4, r6
 8002f04:	bf08      	it	eq
 8002f06:	f040 0001 	orreq.w	r0, r0, #1
 8002f0a:	3618      	adds	r6, #24
 8002f0c:	42b4      	cmp	r4, r6
 8002f0e:	bf08      	it	eq
 8002f10:	f040 0001 	orreq.w	r0, r0, #1
 8002f14:	3618      	adds	r6, #24
 8002f16:	42b4      	cmp	r4, r6
 8002f18:	bf08      	it	eq
 8002f1a:	f040 0001 	orreq.w	r0, r0, #1
 8002f1e:	3618      	adds	r6, #24
 8002f20:	42b4      	cmp	r4, r6
 8002f22:	bf08      	it	eq
 8002f24:	f040 0001 	orreq.w	r0, r0, #1
 8002f28:	3618      	adds	r6, #24
 8002f2a:	42b4      	cmp	r4, r6
 8002f2c:	bf08      	it	eq
 8002f2e:	f040 0001 	orreq.w	r0, r0, #1
 8002f32:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8002f36:	42b4      	cmp	r4, r6
 8002f38:	bf08      	it	eq
 8002f3a:	f040 0001 	orreq.w	r0, r0, #1
 8002f3e:	3618      	adds	r6, #24
 8002f40:	42b4      	cmp	r4, r6
 8002f42:	bf08      	it	eq
 8002f44:	f040 0001 	orreq.w	r0, r0, #1
 8002f48:	3618      	adds	r6, #24
 8002f4a:	42b4      	cmp	r4, r6
 8002f4c:	bf08      	it	eq
 8002f4e:	f040 0001 	orreq.w	r0, r0, #1
 8002f52:	3618      	adds	r6, #24
 8002f54:	42b4      	cmp	r4, r6
 8002f56:	bf08      	it	eq
 8002f58:	f040 0001 	orreq.w	r0, r0, #1
 8002f5c:	3618      	adds	r6, #24
 8002f5e:	42b4      	cmp	r4, r6
 8002f60:	bf08      	it	eq
 8002f62:	f040 0001 	orreq.w	r0, r0, #1
 8002f66:	3618      	adds	r6, #24
 8002f68:	42b4      	cmp	r4, r6
 8002f6a:	bf08      	it	eq
 8002f6c:	f040 0001 	orreq.w	r0, r0, #1
 8002f70:	3618      	adds	r6, #24
 8002f72:	42b4      	cmp	r4, r6
 8002f74:	bf08      	it	eq
 8002f76:	f040 0001 	orreq.w	r0, r0, #1
 8002f7a:	3618      	adds	r6, #24
 8002f7c:	42b4      	cmp	r4, r6
 8002f7e:	bf08      	it	eq
 8002f80:	f040 0001 	orreq.w	r0, r0, #1
 8002f84:	4e75      	ldr	r6, [pc, #468]	; (800315c <HAL_DMA_Start_IT+0x2cc>)
 8002f86:	42b4      	cmp	r4, r6
 8002f88:	bf08      	it	eq
 8002f8a:	f040 0001 	orreq.w	r0, r0, #1
 8002f8e:	3614      	adds	r6, #20
 8002f90:	42b4      	cmp	r4, r6
 8002f92:	bf08      	it	eq
 8002f94:	f040 0001 	orreq.w	r0, r0, #1
 8002f98:	3614      	adds	r6, #20
 8002f9a:	42b4      	cmp	r4, r6
 8002f9c:	bf08      	it	eq
 8002f9e:	f040 0001 	orreq.w	r0, r0, #1
 8002fa2:	3614      	adds	r6, #20
 8002fa4:	42b4      	cmp	r4, r6
 8002fa6:	bf08      	it	eq
 8002fa8:	f040 0001 	orreq.w	r0, r0, #1
 8002fac:	3614      	adds	r6, #20
 8002fae:	42b4      	cmp	r4, r6
 8002fb0:	bf08      	it	eq
 8002fb2:	f040 0001 	orreq.w	r0, r0, #1
 8002fb6:	3614      	adds	r6, #20
 8002fb8:	42b4      	cmp	r4, r6
 8002fba:	bf08      	it	eq
 8002fbc:	f040 0001 	orreq.w	r0, r0, #1
 8002fc0:	3614      	adds	r6, #20
 8002fc2:	42b4      	cmp	r4, r6
 8002fc4:	bf08      	it	eq
 8002fc6:	f040 0001 	orreq.w	r0, r0, #1
 8002fca:	b910      	cbnz	r0, 8002fd2 <HAL_DMA_Start_IT+0x142>
 8002fcc:	4864      	ldr	r0, [pc, #400]	; (8003160 <HAL_DMA_Start_IT+0x2d0>)
 8002fce:	4284      	cmp	r4, r0
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fd2:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 8002fd6:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002fd8:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8002fdc:	b110      	cbz	r0, 8002fe4 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fde:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 8002fe2:	6044      	str	r4, [r0, #4]
 8002fe4:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fe8:	485b      	ldr	r0, [pc, #364]	; (8003158 <HAL_DMA_Start_IT+0x2c8>)
 8002fea:	4e5a      	ldr	r6, [pc, #360]	; (8003154 <HAL_DMA_Start_IT+0x2c4>)
 8002fec:	42b4      	cmp	r4, r6
 8002fee:	bf18      	it	ne
 8002ff0:	4284      	cmpne	r4, r0
 8002ff2:	f106 0618 	add.w	r6, r6, #24
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2001      	moveq	r0, #1
 8002ffa:	2000      	movne	r0, #0
 8002ffc:	42b4      	cmp	r4, r6
 8002ffe:	bf08      	it	eq
 8003000:	f040 0001 	orreq.w	r0, r0, #1
 8003004:	3618      	adds	r6, #24
 8003006:	42b4      	cmp	r4, r6
 8003008:	bf08      	it	eq
 800300a:	f040 0001 	orreq.w	r0, r0, #1
 800300e:	3618      	adds	r6, #24
 8003010:	42b4      	cmp	r4, r6
 8003012:	bf08      	it	eq
 8003014:	f040 0001 	orreq.w	r0, r0, #1
 8003018:	3618      	adds	r6, #24
 800301a:	42b4      	cmp	r4, r6
 800301c:	bf08      	it	eq
 800301e:	f040 0001 	orreq.w	r0, r0, #1
 8003022:	3618      	adds	r6, #24
 8003024:	42b4      	cmp	r4, r6
 8003026:	bf08      	it	eq
 8003028:	f040 0001 	orreq.w	r0, r0, #1
 800302c:	3618      	adds	r6, #24
 800302e:	42b4      	cmp	r4, r6
 8003030:	bf08      	it	eq
 8003032:	f040 0001 	orreq.w	r0, r0, #1
 8003036:	f506 7656 	add.w	r6, r6, #856	; 0x358
 800303a:	42b4      	cmp	r4, r6
 800303c:	bf08      	it	eq
 800303e:	f040 0001 	orreq.w	r0, r0, #1
 8003042:	3618      	adds	r6, #24
 8003044:	42b4      	cmp	r4, r6
 8003046:	bf08      	it	eq
 8003048:	f040 0001 	orreq.w	r0, r0, #1
 800304c:	3618      	adds	r6, #24
 800304e:	42b4      	cmp	r4, r6
 8003050:	bf08      	it	eq
 8003052:	f040 0001 	orreq.w	r0, r0, #1
 8003056:	3618      	adds	r6, #24
 8003058:	42b4      	cmp	r4, r6
 800305a:	bf08      	it	eq
 800305c:	f040 0001 	orreq.w	r0, r0, #1
 8003060:	3618      	adds	r6, #24
 8003062:	42b4      	cmp	r4, r6
 8003064:	bf08      	it	eq
 8003066:	f040 0001 	orreq.w	r0, r0, #1
 800306a:	3618      	adds	r6, #24
 800306c:	42b4      	cmp	r4, r6
 800306e:	bf08      	it	eq
 8003070:	f040 0001 	orreq.w	r0, r0, #1
 8003074:	3618      	adds	r6, #24
 8003076:	42b4      	cmp	r4, r6
 8003078:	bf08      	it	eq
 800307a:	f040 0001 	orreq.w	r0, r0, #1
 800307e:	b918      	cbnz	r0, 8003088 <HAL_DMA_Start_IT+0x1f8>
 8003080:	4838      	ldr	r0, [pc, #224]	; (8003164 <HAL_DMA_Start_IT+0x2d4>)
 8003082:	4284      	cmp	r4, r0
 8003084:	f040 817b 	bne.w	800337e <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003088:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800308c:	f000 041f 	and.w	r4, r0, #31
 8003090:	203f      	movs	r0, #63	; 0x3f
 8003092:	40a0      	lsls	r0, r4
 8003094:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003096:	f8dc 4000 	ldr.w	r4, [ip]
 800309a:	6820      	ldr	r0, [r4, #0]
 800309c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80030a0:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80030a2:	f8dc 0000 	ldr.w	r0, [ip]
 80030a6:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a8:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80030ac:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80030ae:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030b2:	f000 815b 	beq.w	800336c <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80030b6:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80030b8:	f8dc 3000 	ldr.w	r3, [ip]
 80030bc:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030be:	f8dc 4000 	ldr.w	r4, [ip]
 80030c2:	4b25      	ldr	r3, [pc, #148]	; (8003158 <HAL_DMA_Start_IT+0x2c8>)
 80030c4:	4923      	ldr	r1, [pc, #140]	; (8003154 <HAL_DMA_Start_IT+0x2c4>)
 80030c6:	4a28      	ldr	r2, [pc, #160]	; (8003168 <HAL_DMA_Start_IT+0x2d8>)
 80030c8:	428c      	cmp	r4, r1
 80030ca:	bf18      	it	ne
 80030cc:	429c      	cmpne	r4, r3
 80030ce:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	4294      	cmp	r4, r2
 80030da:	bf08      	it	eq
 80030dc:	f043 0301 	orreq.w	r3, r3, #1
 80030e0:	3230      	adds	r2, #48	; 0x30
 80030e2:	428c      	cmp	r4, r1
 80030e4:	bf08      	it	eq
 80030e6:	f043 0301 	orreq.w	r3, r3, #1
 80030ea:	3130      	adds	r1, #48	; 0x30
 80030ec:	4294      	cmp	r4, r2
 80030ee:	bf08      	it	eq
 80030f0:	f043 0301 	orreq.w	r3, r3, #1
 80030f4:	3230      	adds	r2, #48	; 0x30
 80030f6:	428c      	cmp	r4, r1
 80030f8:	bf08      	it	eq
 80030fa:	f043 0301 	orreq.w	r3, r3, #1
 80030fe:	3130      	adds	r1, #48	; 0x30
 8003100:	4294      	cmp	r4, r2
 8003102:	bf08      	it	eq
 8003104:	f043 0301 	orreq.w	r3, r3, #1
 8003108:	f502 725c 	add.w	r2, r2, #880	; 0x370
 800310c:	428c      	cmp	r4, r1
 800310e:	bf08      	it	eq
 8003110:	f043 0301 	orreq.w	r3, r3, #1
 8003114:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003118:	4294      	cmp	r4, r2
 800311a:	bf08      	it	eq
 800311c:	f043 0301 	orreq.w	r3, r3, #1
 8003120:	3230      	adds	r2, #48	; 0x30
 8003122:	428c      	cmp	r4, r1
 8003124:	bf08      	it	eq
 8003126:	f043 0301 	orreq.w	r3, r3, #1
 800312a:	3130      	adds	r1, #48	; 0x30
 800312c:	4294      	cmp	r4, r2
 800312e:	bf08      	it	eq
 8003130:	f043 0301 	orreq.w	r3, r3, #1
 8003134:	3230      	adds	r2, #48	; 0x30
 8003136:	428c      	cmp	r4, r1
 8003138:	bf08      	it	eq
 800313a:	f043 0301 	orreq.w	r3, r3, #1
 800313e:	3130      	adds	r1, #48	; 0x30
 8003140:	4294      	cmp	r4, r2
 8003142:	bf08      	it	eq
 8003144:	f043 0301 	orreq.w	r3, r3, #1
 8003148:	3230      	adds	r2, #48	; 0x30
 800314a:	428c      	cmp	r4, r1
 800314c:	bf08      	it	eq
 800314e:	f043 0301 	orreq.w	r3, r3, #1
 8003152:	e00b      	b.n	800316c <HAL_DMA_Start_IT+0x2dc>
 8003154:	40020028 	.word	0x40020028
 8003158:	40020010 	.word	0x40020010
 800315c:	58025408 	.word	0x58025408
 8003160:	58025494 	.word	0x58025494
 8003164:	400204b8 	.word	0x400204b8
 8003168:	40020040 	.word	0x40020040
 800316c:	4294      	cmp	r4, r2
 800316e:	bf08      	it	eq
 8003170:	f043 0301 	orreq.w	r3, r3, #1
 8003174:	b91b      	cbnz	r3, 800317e <HAL_DMA_Start_IT+0x2ee>
 8003176:	4b9b      	ldr	r3, [pc, #620]	; (80033e4 <HAL_DMA_Start_IT+0x554>)
 8003178:	429c      	cmp	r4, r3
 800317a:	f040 8143 	bne.w	8003404 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	f023 031e 	bic.w	r3, r3, #30
 8003184:	f043 0316 	orr.w	r3, r3, #22
 8003188:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800318a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800318e:	b12b      	cbz	r3, 800319c <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003190:	f8dc 2000 	ldr.w	r2, [ip]
 8003194:	6813      	ldr	r3, [r2, #0]
 8003196:	f043 0308 	orr.w	r3, r3, #8
 800319a:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800319c:	f8dc 4000 	ldr.w	r4, [ip]
 80031a0:	4b91      	ldr	r3, [pc, #580]	; (80033e8 <HAL_DMA_Start_IT+0x558>)
 80031a2:	4992      	ldr	r1, [pc, #584]	; (80033ec <HAL_DMA_Start_IT+0x55c>)
 80031a4:	4a92      	ldr	r2, [pc, #584]	; (80033f0 <HAL_DMA_Start_IT+0x560>)
 80031a6:	428c      	cmp	r4, r1
 80031a8:	bf18      	it	ne
 80031aa:	429c      	cmpne	r4, r3
 80031ac:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	4294      	cmp	r4, r2
 80031b8:	bf08      	it	eq
 80031ba:	f043 0301 	orreq.w	r3, r3, #1
 80031be:	3230      	adds	r2, #48	; 0x30
 80031c0:	428c      	cmp	r4, r1
 80031c2:	bf08      	it	eq
 80031c4:	f043 0301 	orreq.w	r3, r3, #1
 80031c8:	3130      	adds	r1, #48	; 0x30
 80031ca:	4294      	cmp	r4, r2
 80031cc:	bf08      	it	eq
 80031ce:	f043 0301 	orreq.w	r3, r3, #1
 80031d2:	3230      	adds	r2, #48	; 0x30
 80031d4:	428c      	cmp	r4, r1
 80031d6:	bf08      	it	eq
 80031d8:	f043 0301 	orreq.w	r3, r3, #1
 80031dc:	3130      	adds	r1, #48	; 0x30
 80031de:	4294      	cmp	r4, r2
 80031e0:	bf08      	it	eq
 80031e2:	f043 0301 	orreq.w	r3, r3, #1
 80031e6:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80031ea:	428c      	cmp	r4, r1
 80031ec:	bf08      	it	eq
 80031ee:	f043 0301 	orreq.w	r3, r3, #1
 80031f2:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80031f6:	4294      	cmp	r4, r2
 80031f8:	bf08      	it	eq
 80031fa:	f043 0301 	orreq.w	r3, r3, #1
 80031fe:	3230      	adds	r2, #48	; 0x30
 8003200:	428c      	cmp	r4, r1
 8003202:	bf08      	it	eq
 8003204:	f043 0301 	orreq.w	r3, r3, #1
 8003208:	3130      	adds	r1, #48	; 0x30
 800320a:	4294      	cmp	r4, r2
 800320c:	bf08      	it	eq
 800320e:	f043 0301 	orreq.w	r3, r3, #1
 8003212:	3230      	adds	r2, #48	; 0x30
 8003214:	428c      	cmp	r4, r1
 8003216:	bf08      	it	eq
 8003218:	f043 0301 	orreq.w	r3, r3, #1
 800321c:	3130      	adds	r1, #48	; 0x30
 800321e:	4294      	cmp	r4, r2
 8003220:	bf08      	it	eq
 8003222:	f043 0301 	orreq.w	r3, r3, #1
 8003226:	3230      	adds	r2, #48	; 0x30
 8003228:	428c      	cmp	r4, r1
 800322a:	bf08      	it	eq
 800322c:	f043 0301 	orreq.w	r3, r3, #1
 8003230:	3130      	adds	r1, #48	; 0x30
 8003232:	4294      	cmp	r4, r2
 8003234:	bf08      	it	eq
 8003236:	f043 0301 	orreq.w	r3, r3, #1
 800323a:	4a6e      	ldr	r2, [pc, #440]	; (80033f4 <HAL_DMA_Start_IT+0x564>)
 800323c:	428c      	cmp	r4, r1
 800323e:	bf08      	it	eq
 8003240:	f043 0301 	orreq.w	r3, r3, #1
 8003244:	496c      	ldr	r1, [pc, #432]	; (80033f8 <HAL_DMA_Start_IT+0x568>)
 8003246:	4294      	cmp	r4, r2
 8003248:	bf08      	it	eq
 800324a:	f043 0301 	orreq.w	r3, r3, #1
 800324e:	3228      	adds	r2, #40	; 0x28
 8003250:	428c      	cmp	r4, r1
 8003252:	bf08      	it	eq
 8003254:	f043 0301 	orreq.w	r3, r3, #1
 8003258:	3128      	adds	r1, #40	; 0x28
 800325a:	4294      	cmp	r4, r2
 800325c:	bf08      	it	eq
 800325e:	f043 0301 	orreq.w	r3, r3, #1
 8003262:	3228      	adds	r2, #40	; 0x28
 8003264:	428c      	cmp	r4, r1
 8003266:	bf08      	it	eq
 8003268:	f043 0301 	orreq.w	r3, r3, #1
 800326c:	3128      	adds	r1, #40	; 0x28
 800326e:	4294      	cmp	r4, r2
 8003270:	bf08      	it	eq
 8003272:	f043 0301 	orreq.w	r3, r3, #1
 8003276:	3228      	adds	r2, #40	; 0x28
 8003278:	428c      	cmp	r4, r1
 800327a:	bf08      	it	eq
 800327c:	f043 0301 	orreq.w	r3, r3, #1
 8003280:	4294      	cmp	r4, r2
 8003282:	bf08      	it	eq
 8003284:	f043 0301 	orreq.w	r3, r3, #1
 8003288:	b913      	cbnz	r3, 8003290 <HAL_DMA_Start_IT+0x400>
 800328a:	4b5c      	ldr	r3, [pc, #368]	; (80033fc <HAL_DMA_Start_IT+0x56c>)
 800328c:	429c      	cmp	r4, r3
 800328e:	d111      	bne.n	80032b4 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003290:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	03d2      	lsls	r2, r2, #15
 8003298:	d503      	bpl.n	80032a2 <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a0:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80032a2:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 80032a6:	b11b      	cbz	r3, 80032b0 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 80032b4:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <HAL_DMA_Start_IT+0x558>)
 80032b6:	494d      	ldr	r1, [pc, #308]	; (80033ec <HAL_DMA_Start_IT+0x55c>)
 80032b8:	4a4d      	ldr	r2, [pc, #308]	; (80033f0 <HAL_DMA_Start_IT+0x560>)
 80032ba:	428c      	cmp	r4, r1
 80032bc:	bf18      	it	ne
 80032be:	429c      	cmpne	r4, r3
 80032c0:	484f      	ldr	r0, [pc, #316]	; (8003400 <HAL_DMA_Start_IT+0x570>)
 80032c2:	f101 0160 	add.w	r1, r1, #96	; 0x60
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	4294      	cmp	r4, r2
 80032ce:	bf08      	it	eq
 80032d0:	f043 0301 	orreq.w	r3, r3, #1
 80032d4:	3230      	adds	r2, #48	; 0x30
 80032d6:	4284      	cmp	r4, r0
 80032d8:	bf08      	it	eq
 80032da:	f043 0301 	orreq.w	r3, r3, #1
 80032de:	3060      	adds	r0, #96	; 0x60
 80032e0:	4294      	cmp	r4, r2
 80032e2:	bf08      	it	eq
 80032e4:	f043 0301 	orreq.w	r3, r3, #1
 80032e8:	3230      	adds	r2, #48	; 0x30
 80032ea:	428c      	cmp	r4, r1
 80032ec:	bf08      	it	eq
 80032ee:	f043 0301 	orreq.w	r3, r3, #1
 80032f2:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 80032f6:	4294      	cmp	r4, r2
 80032f8:	bf08      	it	eq
 80032fa:	f043 0301 	orreq.w	r3, r3, #1
 80032fe:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8003302:	4284      	cmp	r4, r0
 8003304:	bf08      	it	eq
 8003306:	f043 0301 	orreq.w	r3, r3, #1
 800330a:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 800330e:	4294      	cmp	r4, r2
 8003310:	bf08      	it	eq
 8003312:	f043 0301 	orreq.w	r3, r3, #1
 8003316:	3230      	adds	r2, #48	; 0x30
 8003318:	428c      	cmp	r4, r1
 800331a:	bf08      	it	eq
 800331c:	f043 0301 	orreq.w	r3, r3, #1
 8003320:	3160      	adds	r1, #96	; 0x60
 8003322:	4294      	cmp	r4, r2
 8003324:	bf08      	it	eq
 8003326:	f043 0301 	orreq.w	r3, r3, #1
 800332a:	3230      	adds	r2, #48	; 0x30
 800332c:	4284      	cmp	r4, r0
 800332e:	bf08      	it	eq
 8003330:	f043 0301 	orreq.w	r3, r3, #1
 8003334:	4294      	cmp	r4, r2
 8003336:	bf08      	it	eq
 8003338:	f043 0301 	orreq.w	r3, r3, #1
 800333c:	3230      	adds	r2, #48	; 0x30
 800333e:	428c      	cmp	r4, r1
 8003340:	bf08      	it	eq
 8003342:	f043 0301 	orreq.w	r3, r3, #1
 8003346:	4294      	cmp	r4, r2
 8003348:	bf08      	it	eq
 800334a:	f043 0301 	orreq.w	r3, r3, #1
 800334e:	b933      	cbnz	r3, 800335e <HAL_DMA_Start_IT+0x4ce>
 8003350:	3060      	adds	r0, #96	; 0x60
 8003352:	1a20      	subs	r0, r4, r0
 8003354:	fab0 f080 	clz	r0, r0
 8003358:	0940      	lsrs	r0, r0, #5
 800335a:	2800      	cmp	r0, #0
 800335c:	d03d      	beq.n	80033da <HAL_DMA_Start_IT+0x54a>
 800335e:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6023      	str	r3, [r4, #0]
}
 8003368:	bc70      	pop	{r4, r5, r6}
 800336a:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800336c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800336e:	f8dc 3000 	ldr.w	r3, [ip]
 8003372:	60d9      	str	r1, [r3, #12]
 8003374:	e6a3      	b.n	80030be <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 8003376:	2001      	movs	r0, #1
 8003378:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800337a:	2002      	movs	r0, #2
}
 800337c:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800337e:	481d      	ldr	r0, [pc, #116]	; (80033f4 <HAL_DMA_Start_IT+0x564>)
 8003380:	4e1d      	ldr	r6, [pc, #116]	; (80033f8 <HAL_DMA_Start_IT+0x568>)
 8003382:	42b4      	cmp	r4, r6
 8003384:	bf18      	it	ne
 8003386:	4284      	cmpne	r4, r0
 8003388:	f106 0614 	add.w	r6, r6, #20
 800338c:	bf0c      	ite	eq
 800338e:	2001      	moveq	r0, #1
 8003390:	2000      	movne	r0, #0
 8003392:	42b4      	cmp	r4, r6
 8003394:	bf08      	it	eq
 8003396:	f040 0001 	orreq.w	r0, r0, #1
 800339a:	3614      	adds	r6, #20
 800339c:	42b4      	cmp	r4, r6
 800339e:	bf08      	it	eq
 80033a0:	f040 0001 	orreq.w	r0, r0, #1
 80033a4:	3614      	adds	r6, #20
 80033a6:	42b4      	cmp	r4, r6
 80033a8:	bf08      	it	eq
 80033aa:	f040 0001 	orreq.w	r0, r0, #1
 80033ae:	3614      	adds	r6, #20
 80033b0:	42b4      	cmp	r4, r6
 80033b2:	bf08      	it	eq
 80033b4:	f040 0001 	orreq.w	r0, r0, #1
 80033b8:	3614      	adds	r6, #20
 80033ba:	42b4      	cmp	r4, r6
 80033bc:	bf08      	it	eq
 80033be:	f040 0001 	orreq.w	r0, r0, #1
 80033c2:	b910      	cbnz	r0, 80033ca <HAL_DMA_Start_IT+0x53a>
 80033c4:	480d      	ldr	r0, [pc, #52]	; (80033fc <HAL_DMA_Start_IT+0x56c>)
 80033c6:	4284      	cmp	r4, r0
 80033c8:	d11c      	bne.n	8003404 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80033ca:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 80033ce:	f000 041f 	and.w	r4, r0, #31
 80033d2:	2001      	movs	r0, #1
 80033d4:	40a0      	lsls	r0, r4
 80033d6:	6068      	str	r0, [r5, #4]
 80033d8:	e663      	b.n	80030a2 <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6023      	str	r3, [r4, #0]
 80033e2:	e56d      	b.n	8002ec0 <HAL_DMA_Start_IT+0x30>
 80033e4:	400204b8 	.word	0x400204b8
 80033e8:	40020010 	.word	0x40020010
 80033ec:	40020028 	.word	0x40020028
 80033f0:	40020040 	.word	0x40020040
 80033f4:	58025408 	.word	0x58025408
 80033f8:	5802541c 	.word	0x5802541c
 80033fc:	58025494 	.word	0x58025494
 8003400:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	f023 030e 	bic.w	r3, r3, #14
 800340a:	f043 030a 	orr.w	r3, r3, #10
 800340e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003410:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	f43f aec1 	beq.w	800319c <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800341a:	f8dc 2000 	ldr.w	r2, [ip]
 800341e:	6813      	ldr	r3, [r2, #0]
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e6b9      	b.n	800319c <HAL_DMA_Start_IT+0x30c>

08003428 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8003428:	2800      	cmp	r0, #0
 800342a:	d065      	beq.n	80034f8 <HAL_DMA_Abort_IT+0xd0>
{
 800342c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003430:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003434:	4603      	mov	r3, r0
 8003436:	2a02      	cmp	r2, #2
 8003438:	d159      	bne.n	80034ee <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800343a:	6801      	ldr	r1, [r0, #0]
 800343c:	4883      	ldr	r0, [pc, #524]	; (800364c <HAL_DMA_Abort_IT+0x224>)
 800343e:	4281      	cmp	r1, r0
 8003440:	d04b      	beq.n	80034da <HAL_DMA_Abort_IT+0xb2>
 8003442:	4c83      	ldr	r4, [pc, #524]	; (8003650 <HAL_DMA_Abort_IT+0x228>)
 8003444:	42a1      	cmp	r1, r4
 8003446:	d048      	beq.n	80034da <HAL_DMA_Abort_IT+0xb2>
 8003448:	f8df a228 	ldr.w	sl, [pc, #552]	; 8003674 <HAL_DMA_Abort_IT+0x24c>
 800344c:	f8df b214 	ldr.w	fp, [pc, #532]	; 8003664 <HAL_DMA_Abort_IT+0x23c>
 8003450:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8003678 <HAL_DMA_Abort_IT+0x250>
 8003454:	4559      	cmp	r1, fp
 8003456:	bf18      	it	ne
 8003458:	4551      	cmpne	r1, sl
 800345a:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800367c <HAL_DMA_Abort_IT+0x254>
 800345e:	f8df e220 	ldr.w	lr, [pc, #544]	; 8003680 <HAL_DMA_Abort_IT+0x258>
 8003462:	bf0c      	ite	eq
 8003464:	2201      	moveq	r2, #1
 8003466:	2200      	movne	r2, #0
 8003468:	f8df c218 	ldr.w	ip, [pc, #536]	; 8003684 <HAL_DMA_Abort_IT+0x25c>
 800346c:	4549      	cmp	r1, r9
 800346e:	bf08      	it	eq
 8003470:	f042 0201 	orreq.w	r2, r2, #1
 8003474:	4d77      	ldr	r5, [pc, #476]	; (8003654 <HAL_DMA_Abort_IT+0x22c>)
 8003476:	4f78      	ldr	r7, [pc, #480]	; (8003658 <HAL_DMA_Abort_IT+0x230>)
 8003478:	4541      	cmp	r1, r8
 800347a:	bf08      	it	eq
 800347c:	f042 0201 	orreq.w	r2, r2, #1
 8003480:	4e76      	ldr	r6, [pc, #472]	; (800365c <HAL_DMA_Abort_IT+0x234>)
 8003482:	4571      	cmp	r1, lr
 8003484:	bf08      	it	eq
 8003486:	f042 0201 	orreq.w	r2, r2, #1
 800348a:	4561      	cmp	r1, ip
 800348c:	bf08      	it	eq
 800348e:	f042 0201 	orreq.w	r2, r2, #1
 8003492:	42a9      	cmp	r1, r5
 8003494:	bf08      	it	eq
 8003496:	f042 0201 	orreq.w	r2, r2, #1
 800349a:	3518      	adds	r5, #24
 800349c:	42a9      	cmp	r1, r5
 800349e:	bf08      	it	eq
 80034a0:	f042 0201 	orreq.w	r2, r2, #1
 80034a4:	3518      	adds	r5, #24
 80034a6:	42a9      	cmp	r1, r5
 80034a8:	bf08      	it	eq
 80034aa:	f042 0201 	orreq.w	r2, r2, #1
 80034ae:	3518      	adds	r5, #24
 80034b0:	42a9      	cmp	r1, r5
 80034b2:	bf08      	it	eq
 80034b4:	f042 0201 	orreq.w	r2, r2, #1
 80034b8:	3548      	adds	r5, #72	; 0x48
 80034ba:	42b9      	cmp	r1, r7
 80034bc:	bf08      	it	eq
 80034be:	f042 0201 	orreq.w	r2, r2, #1
 80034c2:	42b1      	cmp	r1, r6
 80034c4:	bf08      	it	eq
 80034c6:	f042 0201 	orreq.w	r2, r2, #1
 80034ca:	42a9      	cmp	r1, r5
 80034cc:	bf08      	it	eq
 80034ce:	f042 0201 	orreq.w	r2, r2, #1
 80034d2:	b912      	cbnz	r2, 80034da <HAL_DMA_Abort_IT+0xb2>
 80034d4:	4a62      	ldr	r2, [pc, #392]	; (8003660 <HAL_DMA_Abort_IT+0x238>)
 80034d6:	4291      	cmp	r1, r2
 80034d8:	d110      	bne.n	80034fc <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 80034da:	2204      	movs	r2, #4
  return HAL_OK;
 80034dc:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80034e2:	680b      	ldr	r3, [r1, #0]
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	600b      	str	r3, [r1, #0]
}
 80034ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ee:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80034f0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f2:	655a      	str	r2, [r3, #84]	; 0x54
}
 80034f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 80034f8:	2001      	movs	r0, #1
}
 80034fa:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034fc:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034fe:	4c54      	ldr	r4, [pc, #336]	; (8003650 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003500:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003504:	4857      	ldr	r0, [pc, #348]	; (8003664 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003506:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	680a      	ldr	r2, [r1, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003512:	4a4e      	ldr	r2, [pc, #312]	; (800364c <HAL_DMA_Abort_IT+0x224>)
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	42a1      	cmp	r1, r4
 8003518:	bf18      	it	ne
 800351a:	4291      	cmpne	r1, r2
 800351c:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8003520:	bf0c      	ite	eq
 8003522:	2201      	moveq	r2, #1
 8003524:	2200      	movne	r2, #0
 8003526:	4281      	cmp	r1, r0
 8003528:	bf08      	it	eq
 800352a:	f042 0201 	orreq.w	r2, r2, #1
 800352e:	3030      	adds	r0, #48	; 0x30
 8003530:	42a1      	cmp	r1, r4
 8003532:	bf08      	it	eq
 8003534:	f042 0201 	orreq.w	r2, r2, #1
 8003538:	3430      	adds	r4, #48	; 0x30
 800353a:	4281      	cmp	r1, r0
 800353c:	bf08      	it	eq
 800353e:	f042 0201 	orreq.w	r2, r2, #1
 8003542:	3030      	adds	r0, #48	; 0x30
 8003544:	42a1      	cmp	r1, r4
 8003546:	bf08      	it	eq
 8003548:	f042 0201 	orreq.w	r2, r2, #1
 800354c:	3430      	adds	r4, #48	; 0x30
 800354e:	4281      	cmp	r1, r0
 8003550:	bf08      	it	eq
 8003552:	f042 0201 	orreq.w	r2, r2, #1
 8003556:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800355a:	42a1      	cmp	r1, r4
 800355c:	bf08      	it	eq
 800355e:	f042 0201 	orreq.w	r2, r2, #1
 8003562:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003566:	4281      	cmp	r1, r0
 8003568:	bf08      	it	eq
 800356a:	f042 0201 	orreq.w	r2, r2, #1
 800356e:	3030      	adds	r0, #48	; 0x30
 8003570:	42a1      	cmp	r1, r4
 8003572:	bf08      	it	eq
 8003574:	f042 0201 	orreq.w	r2, r2, #1
 8003578:	3430      	adds	r4, #48	; 0x30
 800357a:	4281      	cmp	r1, r0
 800357c:	bf08      	it	eq
 800357e:	f042 0201 	orreq.w	r2, r2, #1
 8003582:	3030      	adds	r0, #48	; 0x30
 8003584:	42a1      	cmp	r1, r4
 8003586:	bf08      	it	eq
 8003588:	f042 0201 	orreq.w	r2, r2, #1
 800358c:	3430      	adds	r4, #48	; 0x30
 800358e:	4281      	cmp	r1, r0
 8003590:	bf08      	it	eq
 8003592:	f042 0201 	orreq.w	r2, r2, #1
 8003596:	3030      	adds	r0, #48	; 0x30
 8003598:	42a1      	cmp	r1, r4
 800359a:	bf08      	it	eq
 800359c:	f042 0201 	orreq.w	r2, r2, #1
 80035a0:	3430      	adds	r4, #48	; 0x30
 80035a2:	4281      	cmp	r1, r0
 80035a4:	bf08      	it	eq
 80035a6:	f042 0201 	orreq.w	r2, r2, #1
 80035aa:	482f      	ldr	r0, [pc, #188]	; (8003668 <HAL_DMA_Abort_IT+0x240>)
 80035ac:	42a1      	cmp	r1, r4
 80035ae:	bf08      	it	eq
 80035b0:	f042 0201 	orreq.w	r2, r2, #1
 80035b4:	4c2d      	ldr	r4, [pc, #180]	; (800366c <HAL_DMA_Abort_IT+0x244>)
 80035b6:	4281      	cmp	r1, r0
 80035b8:	bf08      	it	eq
 80035ba:	f042 0201 	orreq.w	r2, r2, #1
 80035be:	3028      	adds	r0, #40	; 0x28
 80035c0:	42a1      	cmp	r1, r4
 80035c2:	bf08      	it	eq
 80035c4:	f042 0201 	orreq.w	r2, r2, #1
 80035c8:	3428      	adds	r4, #40	; 0x28
 80035ca:	4281      	cmp	r1, r0
 80035cc:	bf08      	it	eq
 80035ce:	f042 0201 	orreq.w	r2, r2, #1
 80035d2:	3028      	adds	r0, #40	; 0x28
 80035d4:	42a1      	cmp	r1, r4
 80035d6:	bf08      	it	eq
 80035d8:	f042 0201 	orreq.w	r2, r2, #1
 80035dc:	3428      	adds	r4, #40	; 0x28
 80035de:	4281      	cmp	r1, r0
 80035e0:	bf08      	it	eq
 80035e2:	f042 0201 	orreq.w	r2, r2, #1
 80035e6:	3028      	adds	r0, #40	; 0x28
 80035e8:	42a1      	cmp	r1, r4
 80035ea:	bf08      	it	eq
 80035ec:	f042 0201 	orreq.w	r2, r2, #1
 80035f0:	4281      	cmp	r1, r0
 80035f2:	bf08      	it	eq
 80035f4:	f042 0201 	orreq.w	r2, r2, #1
 80035f8:	b912      	cbnz	r2, 8003600 <HAL_DMA_Abort_IT+0x1d8>
 80035fa:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <HAL_DMA_Abort_IT+0x248>)
 80035fc:	4291      	cmp	r1, r2
 80035fe:	d117      	bne.n	8003630 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003600:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003602:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003604:	6801      	ldr	r1, [r0, #0]
 8003606:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800360a:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800360c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003610:	f001 011f 	and.w	r1, r1, #31
 8003614:	408a      	lsls	r2, r1
 8003616:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003618:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 800361c:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800361e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003620:	b132      	cbz	r2, 8003630 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003622:	6811      	ldr	r1, [r2, #0]
 8003624:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003628:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800362a:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 800362e:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8003630:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8003632:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8003634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8003636:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800363a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800363e:	b11a      	cbz	r2, 8003648 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 8003640:	4618      	mov	r0, r3
 8003642:	4790      	blx	r2
  return HAL_OK;
 8003644:	4620      	mov	r0, r4
 8003646:	e755      	b.n	80034f4 <HAL_DMA_Abort_IT+0xcc>
 8003648:	4610      	mov	r0, r2
 800364a:	e753      	b.n	80034f4 <HAL_DMA_Abort_IT+0xcc>
 800364c:	40020010 	.word	0x40020010
 8003650:	40020028 	.word	0x40020028
 8003654:	40020410 	.word	0x40020410
 8003658:	40020470 	.word	0x40020470
 800365c:	40020488 	.word	0x40020488
 8003660:	400204b8 	.word	0x400204b8
 8003664:	40020040 	.word	0x40020040
 8003668:	58025408 	.word	0x58025408
 800366c:	5802541c 	.word	0x5802541c
 8003670:	58025494 	.word	0x58025494
 8003674:	40020058 	.word	0x40020058
 8003678:	40020070 	.word	0x40020070
 800367c:	40020088 	.word	0x40020088
 8003680:	400200a0 	.word	0x400200a0
 8003684:	400200b8 	.word	0x400200b8

08003688 <HAL_DMA_IRQHandler>:
{
 8003688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800368c:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800368e:	4b9e      	ldr	r3, [pc, #632]	; (8003908 <HAL_DMA_IRQHandler+0x280>)
{
 8003690:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003692:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8003694:	681e      	ldr	r6, [r3, #0]
{
 8003696:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
 8003698:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800369a:	6803      	ldr	r3, [r0, #0]
 800369c:	4a9b      	ldr	r2, [pc, #620]	; (800390c <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
 800369e:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036a0:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 80036a2:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036a4:	d048      	beq.n	8003738 <HAL_DMA_IRQHandler+0xb0>
 80036a6:	3218      	adds	r2, #24
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d045      	beq.n	8003738 <HAL_DMA_IRQHandler+0xb0>
 80036ac:	3218      	adds	r2, #24
 80036ae:	4f98      	ldr	r7, [pc, #608]	; (8003910 <HAL_DMA_IRQHandler+0x288>)
 80036b0:	42bb      	cmp	r3, r7
 80036b2:	bf18      	it	ne
 80036b4:	4293      	cmpne	r3, r2
 80036b6:	f107 0718 	add.w	r7, r7, #24
 80036ba:	bf0c      	ite	eq
 80036bc:	2201      	moveq	r2, #1
 80036be:	2200      	movne	r2, #0
 80036c0:	42bb      	cmp	r3, r7
 80036c2:	bf08      	it	eq
 80036c4:	f042 0201 	orreq.w	r2, r2, #1
 80036c8:	3718      	adds	r7, #24
 80036ca:	42bb      	cmp	r3, r7
 80036cc:	bf08      	it	eq
 80036ce:	f042 0201 	orreq.w	r2, r2, #1
 80036d2:	3718      	adds	r7, #24
 80036d4:	42bb      	cmp	r3, r7
 80036d6:	bf08      	it	eq
 80036d8:	f042 0201 	orreq.w	r2, r2, #1
 80036dc:	3718      	adds	r7, #24
 80036de:	42bb      	cmp	r3, r7
 80036e0:	bf08      	it	eq
 80036e2:	f042 0201 	orreq.w	r2, r2, #1
 80036e6:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80036ea:	42bb      	cmp	r3, r7
 80036ec:	bf08      	it	eq
 80036ee:	f042 0201 	orreq.w	r2, r2, #1
 80036f2:	3718      	adds	r7, #24
 80036f4:	42bb      	cmp	r3, r7
 80036f6:	bf08      	it	eq
 80036f8:	f042 0201 	orreq.w	r2, r2, #1
 80036fc:	3718      	adds	r7, #24
 80036fe:	42bb      	cmp	r3, r7
 8003700:	bf08      	it	eq
 8003702:	f042 0201 	orreq.w	r2, r2, #1
 8003706:	3718      	adds	r7, #24
 8003708:	42bb      	cmp	r3, r7
 800370a:	bf08      	it	eq
 800370c:	f042 0201 	orreq.w	r2, r2, #1
 8003710:	3718      	adds	r7, #24
 8003712:	42bb      	cmp	r3, r7
 8003714:	bf08      	it	eq
 8003716:	f042 0201 	orreq.w	r2, r2, #1
 800371a:	3718      	adds	r7, #24
 800371c:	42bb      	cmp	r3, r7
 800371e:	bf08      	it	eq
 8003720:	f042 0201 	orreq.w	r2, r2, #1
 8003724:	3718      	adds	r7, #24
 8003726:	42bb      	cmp	r3, r7
 8003728:	bf08      	it	eq
 800372a:	f042 0201 	orreq.w	r2, r2, #1
 800372e:	b91a      	cbnz	r2, 8003738 <HAL_DMA_IRQHandler+0xb0>
 8003730:	4a78      	ldr	r2, [pc, #480]	; (8003914 <HAL_DMA_IRQHandler+0x28c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	f040 82b3 	bne.w	8003c9e <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003738:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
 800373c:	2208      	movs	r2, #8
 800373e:	f000 011f 	and.w	r1, r0, #31
 8003742:	408a      	lsls	r2, r1
 8003744:	4222      	tst	r2, r4
 8003746:	f040 81a5 	bne.w	8003a94 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800374a:	fa24 f201 	lsr.w	r2, r4, r1
 800374e:	07d2      	lsls	r2, r2, #31
 8003750:	d511      	bpl.n	8003776 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	0612      	lsls	r2, r2, #24
 8003756:	f140 8269 	bpl.w	8003c2c <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800375a:	2301      	movs	r3, #1
 800375c:	fa03 f101 	lsl.w	r1, r3, r1
 8003760:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003762:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003766:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800376a:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800376e:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003772:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003776:	f04f 0c04 	mov.w	ip, #4
 800377a:	fa0c fc01 	lsl.w	ip, ip, r1
 800377e:	ea1c 0f04 	tst.w	ip, r4
 8003782:	d062      	beq.n	800384a <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003784:	f8d8 2000 	ldr.w	r2, [r8]
 8003788:	4f60      	ldr	r7, [pc, #384]	; (800390c <HAL_DMA_IRQHandler+0x284>)
 800378a:	4b63      	ldr	r3, [pc, #396]	; (8003918 <HAL_DMA_IRQHandler+0x290>)
 800378c:	429a      	cmp	r2, r3
 800378e:	bf18      	it	ne
 8003790:	42ba      	cmpne	r2, r7
 8003792:	f103 0318 	add.w	r3, r3, #24
 8003796:	bf0c      	ite	eq
 8003798:	2701      	moveq	r7, #1
 800379a:	2700      	movne	r7, #0
 800379c:	429a      	cmp	r2, r3
 800379e:	bf08      	it	eq
 80037a0:	f047 0701 	orreq.w	r7, r7, #1
 80037a4:	3318      	adds	r3, #24
 80037a6:	429a      	cmp	r2, r3
 80037a8:	bf08      	it	eq
 80037aa:	f047 0701 	orreq.w	r7, r7, #1
 80037ae:	3318      	adds	r3, #24
 80037b0:	429a      	cmp	r2, r3
 80037b2:	bf08      	it	eq
 80037b4:	f047 0701 	orreq.w	r7, r7, #1
 80037b8:	3318      	adds	r3, #24
 80037ba:	429a      	cmp	r2, r3
 80037bc:	bf08      	it	eq
 80037be:	f047 0701 	orreq.w	r7, r7, #1
 80037c2:	3318      	adds	r3, #24
 80037c4:	429a      	cmp	r2, r3
 80037c6:	bf08      	it	eq
 80037c8:	f047 0701 	orreq.w	r7, r7, #1
 80037cc:	3318      	adds	r3, #24
 80037ce:	429a      	cmp	r2, r3
 80037d0:	bf08      	it	eq
 80037d2:	f047 0701 	orreq.w	r7, r7, #1
 80037d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80037da:	429a      	cmp	r2, r3
 80037dc:	bf08      	it	eq
 80037de:	f047 0701 	orreq.w	r7, r7, #1
 80037e2:	3318      	adds	r3, #24
 80037e4:	429a      	cmp	r2, r3
 80037e6:	bf08      	it	eq
 80037e8:	f047 0701 	orreq.w	r7, r7, #1
 80037ec:	3318      	adds	r3, #24
 80037ee:	429a      	cmp	r2, r3
 80037f0:	bf08      	it	eq
 80037f2:	f047 0701 	orreq.w	r7, r7, #1
 80037f6:	3318      	adds	r3, #24
 80037f8:	429a      	cmp	r2, r3
 80037fa:	bf08      	it	eq
 80037fc:	f047 0701 	orreq.w	r7, r7, #1
 8003800:	3318      	adds	r3, #24
 8003802:	429a      	cmp	r2, r3
 8003804:	bf08      	it	eq
 8003806:	f047 0701 	orreq.w	r7, r7, #1
 800380a:	3318      	adds	r3, #24
 800380c:	429a      	cmp	r2, r3
 800380e:	bf08      	it	eq
 8003810:	f047 0701 	orreq.w	r7, r7, #1
 8003814:	3318      	adds	r3, #24
 8003816:	429a      	cmp	r2, r3
 8003818:	bf08      	it	eq
 800381a:	f047 0701 	orreq.w	r7, r7, #1
 800381e:	4613      	mov	r3, r2
 8003820:	b91f      	cbnz	r7, 800382a <HAL_DMA_IRQHandler+0x1a2>
 8003822:	4f3c      	ldr	r7, [pc, #240]	; (8003914 <HAL_DMA_IRQHandler+0x28c>)
 8003824:	42ba      	cmp	r2, r7
 8003826:	f040 8277 	bne.w	8003d18 <HAL_DMA_IRQHandler+0x690>
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	0797      	lsls	r7, r2, #30
 800382e:	f140 8209 	bpl.w	8003c44 <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003832:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003836:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800383a:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800383e:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003842:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003846:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800384a:	f04f 0c10 	mov.w	ip, #16
 800384e:	fa0c fc01 	lsl.w	ip, ip, r1
 8003852:	ea1c 0f04 	tst.w	ip, r4
 8003856:	d079      	beq.n	800394c <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003858:	f8d8 2000 	ldr.w	r2, [r8]
 800385c:	4f2b      	ldr	r7, [pc, #172]	; (800390c <HAL_DMA_IRQHandler+0x284>)
 800385e:	4b2e      	ldr	r3, [pc, #184]	; (8003918 <HAL_DMA_IRQHandler+0x290>)
 8003860:	429a      	cmp	r2, r3
 8003862:	bf18      	it	ne
 8003864:	42ba      	cmpne	r2, r7
 8003866:	f103 0318 	add.w	r3, r3, #24
 800386a:	bf0c      	ite	eq
 800386c:	2701      	moveq	r7, #1
 800386e:	2700      	movne	r7, #0
 8003870:	429a      	cmp	r2, r3
 8003872:	bf08      	it	eq
 8003874:	f047 0701 	orreq.w	r7, r7, #1
 8003878:	3318      	adds	r3, #24
 800387a:	429a      	cmp	r2, r3
 800387c:	bf08      	it	eq
 800387e:	f047 0701 	orreq.w	r7, r7, #1
 8003882:	3318      	adds	r3, #24
 8003884:	429a      	cmp	r2, r3
 8003886:	bf08      	it	eq
 8003888:	f047 0701 	orreq.w	r7, r7, #1
 800388c:	3318      	adds	r3, #24
 800388e:	429a      	cmp	r2, r3
 8003890:	bf08      	it	eq
 8003892:	f047 0701 	orreq.w	r7, r7, #1
 8003896:	3318      	adds	r3, #24
 8003898:	429a      	cmp	r2, r3
 800389a:	bf08      	it	eq
 800389c:	f047 0701 	orreq.w	r7, r7, #1
 80038a0:	3318      	adds	r3, #24
 80038a2:	429a      	cmp	r2, r3
 80038a4:	bf08      	it	eq
 80038a6:	f047 0701 	orreq.w	r7, r7, #1
 80038aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80038ae:	429a      	cmp	r2, r3
 80038b0:	bf08      	it	eq
 80038b2:	f047 0701 	orreq.w	r7, r7, #1
 80038b6:	3318      	adds	r3, #24
 80038b8:	429a      	cmp	r2, r3
 80038ba:	bf08      	it	eq
 80038bc:	f047 0701 	orreq.w	r7, r7, #1
 80038c0:	3318      	adds	r3, #24
 80038c2:	429a      	cmp	r2, r3
 80038c4:	bf08      	it	eq
 80038c6:	f047 0701 	orreq.w	r7, r7, #1
 80038ca:	3318      	adds	r3, #24
 80038cc:	429a      	cmp	r2, r3
 80038ce:	bf08      	it	eq
 80038d0:	f047 0701 	orreq.w	r7, r7, #1
 80038d4:	3318      	adds	r3, #24
 80038d6:	429a      	cmp	r2, r3
 80038d8:	bf08      	it	eq
 80038da:	f047 0701 	orreq.w	r7, r7, #1
 80038de:	3318      	adds	r3, #24
 80038e0:	429a      	cmp	r2, r3
 80038e2:	bf08      	it	eq
 80038e4:	f047 0701 	orreq.w	r7, r7, #1
 80038e8:	3318      	adds	r3, #24
 80038ea:	429a      	cmp	r2, r3
 80038ec:	bf08      	it	eq
 80038ee:	f047 0701 	orreq.w	r7, r7, #1
 80038f2:	4613      	mov	r3, r2
 80038f4:	b91f      	cbnz	r7, 80038fe <HAL_DMA_IRQHandler+0x276>
 80038f6:	4f07      	ldr	r7, [pc, #28]	; (8003914 <HAL_DMA_IRQHandler+0x28c>)
 80038f8:	42ba      	cmp	r2, r7
 80038fa:	f040 814b 	bne.w	8003b94 <HAL_DMA_IRQHandler+0x50c>
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	0710      	lsls	r0, r2, #28
 8003902:	f140 818c 	bpl.w	8003c1e <HAL_DMA_IRQHandler+0x596>
 8003906:	e009      	b.n	800391c <HAL_DMA_IRQHandler+0x294>
 8003908:	24000004 	.word	0x24000004
 800390c:	40020010 	.word	0x40020010
 8003910:	40020058 	.word	0x40020058
 8003914:	400204b8 	.word	0x400204b8
 8003918:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800391c:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003920:	f8d8 3000 	ldr.w	r3, [r8]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	0352      	lsls	r2, r2, #13
 8003928:	f100 8195 	bmi.w	8003c56 <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	05d7      	lsls	r7, r2, #23
 8003930:	d403      	bmi.n	800393a <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	f022 0208 	bic.w	r2, r2, #8
 8003938:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800393a:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 800393e:	b10b      	cbz	r3, 8003944 <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
 8003940:	4640      	mov	r0, r8
 8003942:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003944:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 8003948:	f001 011f 	and.w	r1, r1, #31
 800394c:	2320      	movs	r3, #32
 800394e:	fa03 f101 	lsl.w	r1, r3, r1
 8003952:	4221      	tst	r1, r4
 8003954:	d069      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003956:	f8d8 3000 	ldr.w	r3, [r8]
 800395a:	4a97      	ldr	r2, [pc, #604]	; (8003bb8 <HAL_DMA_IRQHandler+0x530>)
 800395c:	4c97      	ldr	r4, [pc, #604]	; (8003bbc <HAL_DMA_IRQHandler+0x534>)
 800395e:	42a3      	cmp	r3, r4
 8003960:	bf18      	it	ne
 8003962:	4293      	cmpne	r3, r2
 8003964:	f104 0418 	add.w	r4, r4, #24
 8003968:	bf0c      	ite	eq
 800396a:	2201      	moveq	r2, #1
 800396c:	2200      	movne	r2, #0
 800396e:	42a3      	cmp	r3, r4
 8003970:	bf08      	it	eq
 8003972:	f042 0201 	orreq.w	r2, r2, #1
 8003976:	3418      	adds	r4, #24
 8003978:	42a3      	cmp	r3, r4
 800397a:	bf08      	it	eq
 800397c:	f042 0201 	orreq.w	r2, r2, #1
 8003980:	3418      	adds	r4, #24
 8003982:	42a3      	cmp	r3, r4
 8003984:	bf08      	it	eq
 8003986:	f042 0201 	orreq.w	r2, r2, #1
 800398a:	3418      	adds	r4, #24
 800398c:	42a3      	cmp	r3, r4
 800398e:	bf08      	it	eq
 8003990:	f042 0201 	orreq.w	r2, r2, #1
 8003994:	3418      	adds	r4, #24
 8003996:	42a3      	cmp	r3, r4
 8003998:	bf08      	it	eq
 800399a:	f042 0201 	orreq.w	r2, r2, #1
 800399e:	3418      	adds	r4, #24
 80039a0:	42a3      	cmp	r3, r4
 80039a2:	bf08      	it	eq
 80039a4:	f042 0201 	orreq.w	r2, r2, #1
 80039a8:	f504 7456 	add.w	r4, r4, #856	; 0x358
 80039ac:	42a3      	cmp	r3, r4
 80039ae:	bf08      	it	eq
 80039b0:	f042 0201 	orreq.w	r2, r2, #1
 80039b4:	3418      	adds	r4, #24
 80039b6:	42a3      	cmp	r3, r4
 80039b8:	bf08      	it	eq
 80039ba:	f042 0201 	orreq.w	r2, r2, #1
 80039be:	3418      	adds	r4, #24
 80039c0:	42a3      	cmp	r3, r4
 80039c2:	bf08      	it	eq
 80039c4:	f042 0201 	orreq.w	r2, r2, #1
 80039c8:	3418      	adds	r4, #24
 80039ca:	42a3      	cmp	r3, r4
 80039cc:	bf08      	it	eq
 80039ce:	f042 0201 	orreq.w	r2, r2, #1
 80039d2:	3418      	adds	r4, #24
 80039d4:	42a3      	cmp	r3, r4
 80039d6:	bf08      	it	eq
 80039d8:	f042 0201 	orreq.w	r2, r2, #1
 80039dc:	3418      	adds	r4, #24
 80039de:	42a3      	cmp	r3, r4
 80039e0:	bf08      	it	eq
 80039e2:	f042 0201 	orreq.w	r2, r2, #1
 80039e6:	3418      	adds	r4, #24
 80039e8:	42a3      	cmp	r3, r4
 80039ea:	bf08      	it	eq
 80039ec:	f042 0201 	orreq.w	r2, r2, #1
 80039f0:	b91a      	cbnz	r2, 80039fa <HAL_DMA_IRQHandler+0x372>
 80039f2:	4a73      	ldr	r2, [pc, #460]	; (8003bc0 <HAL_DMA_IRQHandler+0x538>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	f040 80da 	bne.w	8003bae <HAL_DMA_IRQHandler+0x526>
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	06dc      	lsls	r4, r3, #27
 80039fe:	d514      	bpl.n	8003a2a <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a00:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a02:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	f000 80de 	beq.w	8003bc8 <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	0352      	lsls	r2, r2, #13
 8003a14:	f140 8129 	bpl.w	8003c6a <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	031b      	lsls	r3, r3, #12
 8003a1c:	f140 8134 	bpl.w	8003c88 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
 8003a20:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8003a24:	b10b      	cbz	r3, 8003a2a <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
 8003a26:	4640      	mov	r0, r8
 8003a28:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a2a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80f2 	beq.w	8003c18 <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a34:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8003a38:	07df      	lsls	r7, r3, #31
 8003a3a:	d521      	bpl.n	8003a80 <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
 8003a3c:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a40:	2104      	movs	r1, #4
 8003a42:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a4e:	4b5d      	ldr	r3, [pc, #372]	; (8003bc4 <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a50:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a54:	fba3 3606 	umull	r3, r6, r3, r6
 8003a58:	0ab6      	lsrs	r6, r6, #10
 8003a5a:	e002      	b.n	8003a62 <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	07dd      	lsls	r5, r3, #31
 8003a60:	d504      	bpl.n	8003a6c <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
 8003a62:	9b01      	ldr	r3, [sp, #4]
 8003a64:	3301      	adds	r3, #1
 8003a66:	42b3      	cmp	r3, r6
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	d9f7      	bls.n	8003a5c <HAL_DMA_IRQHandler+0x3d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a6c:	6813      	ldr	r3, [r2, #0]
 8003a6e:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a70:	bf4c      	ite	mi
 8003a72:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003a74:	2301      	movpl	r3, #1
 8003a76:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8003a80:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80c7 	beq.w	8003c18 <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
 8003a8a:	4640      	mov	r0, r8
}
 8003a8c:	b002      	add	sp, #8
 8003a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8003a92:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	0752      	lsls	r2, r2, #29
 8003a98:	d514      	bpl.n	8003ac4 <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	f022 0204 	bic.w	r2, r2, #4
 8003aa0:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003aa2:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8003aa6:	f003 021f 	and.w	r2, r3, #31
 8003aaa:	2308      	movs	r3, #8
 8003aac:	4093      	lsls	r3, r2
 8003aae:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ab0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ab4:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003abc:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ac0:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ac4:	fa24 f301 	lsr.w	r3, r4, r1
 8003ac8:	07df      	lsls	r7, r3, #31
 8003aca:	f57f ae54 	bpl.w	8003776 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ace:	f8d8 2000 	ldr.w	r2, [r8]
 8003ad2:	4f39      	ldr	r7, [pc, #228]	; (8003bb8 <HAL_DMA_IRQHandler+0x530>)
 8003ad4:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <HAL_DMA_IRQHandler+0x534>)
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	bf18      	it	ne
 8003ada:	42ba      	cmpne	r2, r7
 8003adc:	f103 0318 	add.w	r3, r3, #24
 8003ae0:	bf0c      	ite	eq
 8003ae2:	2701      	moveq	r7, #1
 8003ae4:	2700      	movne	r7, #0
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	bf08      	it	eq
 8003aea:	f047 0701 	orreq.w	r7, r7, #1
 8003aee:	3318      	adds	r3, #24
 8003af0:	429a      	cmp	r2, r3
 8003af2:	bf08      	it	eq
 8003af4:	f047 0701 	orreq.w	r7, r7, #1
 8003af8:	3318      	adds	r3, #24
 8003afa:	429a      	cmp	r2, r3
 8003afc:	bf08      	it	eq
 8003afe:	f047 0701 	orreq.w	r7, r7, #1
 8003b02:	3318      	adds	r3, #24
 8003b04:	429a      	cmp	r2, r3
 8003b06:	bf08      	it	eq
 8003b08:	f047 0701 	orreq.w	r7, r7, #1
 8003b0c:	3318      	adds	r3, #24
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	bf08      	it	eq
 8003b12:	f047 0701 	orreq.w	r7, r7, #1
 8003b16:	3318      	adds	r3, #24
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	bf08      	it	eq
 8003b1c:	f047 0701 	orreq.w	r7, r7, #1
 8003b20:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003b24:	429a      	cmp	r2, r3
 8003b26:	bf08      	it	eq
 8003b28:	f047 0701 	orreq.w	r7, r7, #1
 8003b2c:	3318      	adds	r3, #24
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	bf08      	it	eq
 8003b32:	f047 0701 	orreq.w	r7, r7, #1
 8003b36:	3318      	adds	r3, #24
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	bf08      	it	eq
 8003b3c:	f047 0701 	orreq.w	r7, r7, #1
 8003b40:	3318      	adds	r3, #24
 8003b42:	429a      	cmp	r2, r3
 8003b44:	bf08      	it	eq
 8003b46:	f047 0701 	orreq.w	r7, r7, #1
 8003b4a:	3318      	adds	r3, #24
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	bf08      	it	eq
 8003b50:	f047 0701 	orreq.w	r7, r7, #1
 8003b54:	3318      	adds	r3, #24
 8003b56:	429a      	cmp	r2, r3
 8003b58:	bf08      	it	eq
 8003b5a:	f047 0701 	orreq.w	r7, r7, #1
 8003b5e:	3318      	adds	r3, #24
 8003b60:	429a      	cmp	r2, r3
 8003b62:	bf08      	it	eq
 8003b64:	f047 0701 	orreq.w	r7, r7, #1
 8003b68:	4613      	mov	r3, r2
 8003b6a:	2f00      	cmp	r7, #0
 8003b6c:	f47f adf1 	bne.w	8003752 <HAL_DMA_IRQHandler+0xca>
 8003b70:	4f13      	ldr	r7, [pc, #76]	; (8003bc0 <HAL_DMA_IRQHandler+0x538>)
 8003b72:	42ba      	cmp	r2, r7
 8003b74:	f43f aded 	beq.w	8003752 <HAL_DMA_IRQHandler+0xca>
 8003b78:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b7a:	2304      	movs	r3, #4
 8003b7c:	408b      	lsls	r3, r1
 8003b7e:	4223      	tst	r3, r4
 8003b80:	f040 80ca 	bne.w	8003d18 <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b84:	f04f 0c10 	mov.w	ip, #16
 8003b88:	fa0c fc01 	lsl.w	ip, ip, r1
 8003b8c:	ea14 0f0c 	tst.w	r4, ip
 8003b90:	f43f aedc 	beq.w	800394c <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b94:	6813      	ldr	r3, [r2, #0]
 8003b96:	0759      	lsls	r1, r3, #29
 8003b98:	f53f aec0 	bmi.w	800391c <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b9c:	f000 0e1f 	and.w	lr, r0, #31
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	fa01 f10e 	lsl.w	r1, r1, lr
 8003ba6:	420c      	tst	r4, r1
 8003ba8:	f43f af3f 	beq.w	8003a2a <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003bac:	4613      	mov	r3, r2
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0798      	lsls	r0, r3, #30
 8003bb2:	f57f af3a 	bpl.w	8003a2a <HAL_DMA_IRQHandler+0x3a2>
 8003bb6:	e723      	b.n	8003a00 <HAL_DMA_IRQHandler+0x378>
 8003bb8:	40020010 	.word	0x40020010
 8003bbc:	40020028 	.word	0x40020028
 8003bc0:	400204b8 	.word	0x400204b8
 8003bc4:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bc8:	f8d8 2000 	ldr.w	r2, [r8]
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	f023 0316 	bic.w	r3, r3, #22
 8003bd2:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003bd4:	f8d8 2000 	ldr.w	r2, [r8]
 8003bd8:	6953      	ldr	r3, [r2, #20]
 8003bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bde:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003be0:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d055      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003be8:	f8d8 2000 	ldr.w	r2, [r8]
 8003bec:	6813      	ldr	r3, [r2, #0]
 8003bee:	f023 0308 	bic.w	r3, r3, #8
 8003bf2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bf4:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
 8003bf8:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8003bfa:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bfc:	f002 021f 	and.w	r2, r2, #31
 8003c00:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 8003c02:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c04:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8003c06:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003c0e:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f47f af39 	bne.w	8003a8a <HAL_DMA_IRQHandler+0x402>
}
 8003c18:	b002      	add	sp, #8
 8003c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c1e:	2220      	movs	r2, #32
 8003c20:	fa02 f101 	lsl.w	r1, r2, r1
 8003c24:	420c      	tst	r4, r1
 8003c26:	f47f aee8 	bne.w	80039fa <HAL_DMA_IRQHandler+0x372>
 8003c2a:	e6fe      	b.n	8003a2a <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c2c:	f04f 0c04 	mov.w	ip, #4
 8003c30:	fa0c fc01 	lsl.w	ip, ip, r1
 8003c34:	ea14 0f0c 	tst.w	r4, ip
 8003c38:	f43f ae07 	beq.w	800384a <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	0797      	lsls	r7, r2, #30
 8003c40:	f53f adf7 	bmi.w	8003832 <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c44:	f04f 0c10 	mov.w	ip, #16
 8003c48:	fa0c fc01 	lsl.w	ip, ip, r1
 8003c4c:	ea14 0f0c 	tst.w	r4, ip
 8003c50:	f47f ae55 	bne.w	80038fe <HAL_DMA_IRQHandler+0x276>
 8003c54:	e67a      	b.n	800394c <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	031b      	lsls	r3, r3, #12
 8003c5a:	f57f ae6e 	bpl.w	800393a <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c5e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f47f ae6c 	bne.w	8003940 <HAL_DMA_IRQHandler+0x2b8>
 8003c68:	e66c      	b.n	8003944 <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003c70:	f47f aed6 	bne.w	8003a20 <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003c74:	6819      	ldr	r1, [r3, #0]
 8003c76:	f021 0110 	bic.w	r1, r1, #16
 8003c7a:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003c7c:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8003c7e:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003c82:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8003c86:	e6cb      	b.n	8003a20 <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
 8003c88:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f47f aeca 	bne.w	8003a26 <HAL_DMA_IRQHandler+0x39e>
 8003c92:	e6ca      	b.n	8003a2a <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c94:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1a5      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x560>
 8003c9c:	e7aa      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c9e:	4aa0      	ldr	r2, [pc, #640]	; (8003f20 <HAL_DMA_IRQHandler+0x898>)
 8003ca0:	4ca0      	ldr	r4, [pc, #640]	; (8003f24 <HAL_DMA_IRQHandler+0x89c>)
 8003ca2:	42a3      	cmp	r3, r4
 8003ca4:	bf18      	it	ne
 8003ca6:	4293      	cmpne	r3, r2
 8003ca8:	f104 0414 	add.w	r4, r4, #20
 8003cac:	bf0c      	ite	eq
 8003cae:	2201      	moveq	r2, #1
 8003cb0:	2200      	movne	r2, #0
 8003cb2:	42a3      	cmp	r3, r4
 8003cb4:	bf08      	it	eq
 8003cb6:	f042 0201 	orreq.w	r2, r2, #1
 8003cba:	3414      	adds	r4, #20
 8003cbc:	42a3      	cmp	r3, r4
 8003cbe:	bf08      	it	eq
 8003cc0:	f042 0201 	orreq.w	r2, r2, #1
 8003cc4:	3414      	adds	r4, #20
 8003cc6:	42a3      	cmp	r3, r4
 8003cc8:	bf08      	it	eq
 8003cca:	f042 0201 	orreq.w	r2, r2, #1
 8003cce:	3414      	adds	r4, #20
 8003cd0:	42a3      	cmp	r3, r4
 8003cd2:	bf08      	it	eq
 8003cd4:	f042 0201 	orreq.w	r2, r2, #1
 8003cd8:	3414      	adds	r4, #20
 8003cda:	42a3      	cmp	r3, r4
 8003cdc:	bf08      	it	eq
 8003cde:	f042 0201 	orreq.w	r2, r2, #1
 8003ce2:	b912      	cbnz	r2, 8003cea <HAL_DMA_IRQHandler+0x662>
 8003ce4:	4a90      	ldr	r2, [pc, #576]	; (8003f28 <HAL_DMA_IRQHandler+0x8a0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d196      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cea:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
 8003cee:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003cf0:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cf2:	f004 041f 	and.w	r4, r4, #31
 8003cf6:	40a6      	lsls	r6, r4
 8003cf8:	420e      	tst	r6, r1
 8003cfa:	d019      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x6a8>
 8003cfc:	0750      	lsls	r0, r2, #29
 8003cfe:	d517      	bpl.n	8003d30 <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d00:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003d02:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d04:	d549      	bpl.n	8003d9a <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d06:	03d2      	lsls	r2, r2, #15
 8003d08:	f100 809f 	bmi.w	8003e4a <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d0c:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f47f aeba 	bne.w	8003a8a <HAL_DMA_IRQHandler+0x402>
 8003d16:	e77f      	b.n	8003c18 <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d18:	f000 011f 	and.w	r1, r0, #31
 8003d1c:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d20:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d22:	fa0c fc01 	lsl.w	ip, ip, r1
 8003d26:	ea14 0f0c 	tst.w	r4, ip
 8003d2a:	f47f af33 	bne.w	8003b94 <HAL_DMA_IRQHandler+0x50c>
 8003d2e:	e60d      	b.n	800394c <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d30:	2602      	movs	r6, #2
 8003d32:	40a6      	lsls	r6, r4
 8003d34:	420e      	tst	r6, r1
 8003d36:	d00e      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x6ce>
 8003d38:	0797      	lsls	r7, r2, #30
 8003d3a:	d50c      	bpl.n	8003d56 <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d3c:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d3e:	0415      	lsls	r5, r2, #16
 8003d40:	f140 8089 	bpl.w	8003e56 <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d44:	03d4      	lsls	r4, r2, #15
 8003d46:	f100 80e4 	bmi.w	8003f12 <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
 8003d4a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f47f ae9b 	bne.w	8003a8a <HAL_DMA_IRQHandler+0x402>
 8003d54:	e760      	b.n	8003c18 <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d56:	2608      	movs	r6, #8
 8003d58:	fa06 f404 	lsl.w	r4, r6, r4
 8003d5c:	420c      	tst	r4, r1
 8003d5e:	f43f af5b 	beq.w	8003c18 <HAL_DMA_IRQHandler+0x590>
 8003d62:	0711      	lsls	r1, r2, #28
 8003d64:	f57f af58 	bpl.w	8003c18 <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d68:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d6a:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d6c:	f021 010e 	bic.w	r1, r1, #14
 8003d70:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8003d72:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d74:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 8003d82:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d86:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8003d8a:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f47f ae79 	bne.w	8003a8a <HAL_DMA_IRQHandler+0x402>
 8003d98:	e73e      	b.n	8003c18 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d9a:	0693      	lsls	r3, r2, #26
 8003d9c:	d455      	bmi.n	8003e4a <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d9e:	f8d8 2000 	ldr.w	r2, [r8]
 8003da2:	4b62      	ldr	r3, [pc, #392]	; (8003f2c <HAL_DMA_IRQHandler+0x8a4>)
 8003da4:	4c62      	ldr	r4, [pc, #392]	; (8003f30 <HAL_DMA_IRQHandler+0x8a8>)
 8003da6:	4963      	ldr	r1, [pc, #396]	; (8003f34 <HAL_DMA_IRQHandler+0x8ac>)
 8003da8:	42a2      	cmp	r2, r4
 8003daa:	bf18      	it	ne
 8003dac:	429a      	cmpne	r2, r3
 8003dae:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8003db2:	bf0c      	ite	eq
 8003db4:	2301      	moveq	r3, #1
 8003db6:	2300      	movne	r3, #0
 8003db8:	428a      	cmp	r2, r1
 8003dba:	bf08      	it	eq
 8003dbc:	f043 0301 	orreq.w	r3, r3, #1
 8003dc0:	3130      	adds	r1, #48	; 0x30
 8003dc2:	42a2      	cmp	r2, r4
 8003dc4:	bf08      	it	eq
 8003dc6:	f043 0301 	orreq.w	r3, r3, #1
 8003dca:	3430      	adds	r4, #48	; 0x30
 8003dcc:	428a      	cmp	r2, r1
 8003dce:	bf08      	it	eq
 8003dd0:	f043 0301 	orreq.w	r3, r3, #1
 8003dd4:	3130      	adds	r1, #48	; 0x30
 8003dd6:	42a2      	cmp	r2, r4
 8003dd8:	bf08      	it	eq
 8003dda:	f043 0301 	orreq.w	r3, r3, #1
 8003dde:	3430      	adds	r4, #48	; 0x30
 8003de0:	428a      	cmp	r2, r1
 8003de2:	bf08      	it	eq
 8003de4:	f043 0301 	orreq.w	r3, r3, #1
 8003de8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003dec:	42a2      	cmp	r2, r4
 8003dee:	bf08      	it	eq
 8003df0:	f043 0301 	orreq.w	r3, r3, #1
 8003df4:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003df8:	428a      	cmp	r2, r1
 8003dfa:	bf08      	it	eq
 8003dfc:	f043 0301 	orreq.w	r3, r3, #1
 8003e00:	3130      	adds	r1, #48	; 0x30
 8003e02:	42a2      	cmp	r2, r4
 8003e04:	bf08      	it	eq
 8003e06:	f043 0301 	orreq.w	r3, r3, #1
 8003e0a:	3430      	adds	r4, #48	; 0x30
 8003e0c:	428a      	cmp	r2, r1
 8003e0e:	bf08      	it	eq
 8003e10:	f043 0301 	orreq.w	r3, r3, #1
 8003e14:	3130      	adds	r1, #48	; 0x30
 8003e16:	42a2      	cmp	r2, r4
 8003e18:	bf08      	it	eq
 8003e1a:	f043 0301 	orreq.w	r3, r3, #1
 8003e1e:	3430      	adds	r4, #48	; 0x30
 8003e20:	428a      	cmp	r2, r1
 8003e22:	bf08      	it	eq
 8003e24:	f043 0301 	orreq.w	r3, r3, #1
 8003e28:	3130      	adds	r1, #48	; 0x30
 8003e2a:	42a2      	cmp	r2, r4
 8003e2c:	bf08      	it	eq
 8003e2e:	f043 0301 	orreq.w	r3, r3, #1
 8003e32:	428a      	cmp	r2, r1
 8003e34:	bf08      	it	eq
 8003e36:	f043 0301 	orreq.w	r3, r3, #1
 8003e3a:	b913      	cbnz	r3, 8003e42 <HAL_DMA_IRQHandler+0x7ba>
 8003e3c:	4b3e      	ldr	r3, [pc, #248]	; (8003f38 <HAL_DMA_IRQHandler+0x8b0>)
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d17c      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x8b4>
 8003e42:	6813      	ldr	r3, [r2, #0]
 8003e44:	f023 0308 	bic.w	r3, r3, #8
 8003e48:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003e4a:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f47f ae1b 	bne.w	8003a8a <HAL_DMA_IRQHandler+0x402>
 8003e54:	e6e0      	b.n	8003c18 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e56:	0690      	lsls	r0, r2, #26
 8003e58:	d45b      	bmi.n	8003f12 <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e5a:	f8d8 2000 	ldr.w	r2, [r8]
 8003e5e:	4b33      	ldr	r3, [pc, #204]	; (8003f2c <HAL_DMA_IRQHandler+0x8a4>)
 8003e60:	4c33      	ldr	r4, [pc, #204]	; (8003f30 <HAL_DMA_IRQHandler+0x8a8>)
 8003e62:	4934      	ldr	r1, [pc, #208]	; (8003f34 <HAL_DMA_IRQHandler+0x8ac>)
 8003e64:	42a2      	cmp	r2, r4
 8003e66:	bf18      	it	ne
 8003e68:	429a      	cmpne	r2, r3
 8003e6a:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	428a      	cmp	r2, r1
 8003e76:	bf08      	it	eq
 8003e78:	f043 0301 	orreq.w	r3, r3, #1
 8003e7c:	3130      	adds	r1, #48	; 0x30
 8003e7e:	42a2      	cmp	r2, r4
 8003e80:	bf08      	it	eq
 8003e82:	f043 0301 	orreq.w	r3, r3, #1
 8003e86:	3430      	adds	r4, #48	; 0x30
 8003e88:	428a      	cmp	r2, r1
 8003e8a:	bf08      	it	eq
 8003e8c:	f043 0301 	orreq.w	r3, r3, #1
 8003e90:	3130      	adds	r1, #48	; 0x30
 8003e92:	42a2      	cmp	r2, r4
 8003e94:	bf08      	it	eq
 8003e96:	f043 0301 	orreq.w	r3, r3, #1
 8003e9a:	3430      	adds	r4, #48	; 0x30
 8003e9c:	428a      	cmp	r2, r1
 8003e9e:	bf08      	it	eq
 8003ea0:	f043 0301 	orreq.w	r3, r3, #1
 8003ea4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003ea8:	42a2      	cmp	r2, r4
 8003eaa:	bf08      	it	eq
 8003eac:	f043 0301 	orreq.w	r3, r3, #1
 8003eb0:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003eb4:	428a      	cmp	r2, r1
 8003eb6:	bf08      	it	eq
 8003eb8:	f043 0301 	orreq.w	r3, r3, #1
 8003ebc:	3130      	adds	r1, #48	; 0x30
 8003ebe:	42a2      	cmp	r2, r4
 8003ec0:	bf08      	it	eq
 8003ec2:	f043 0301 	orreq.w	r3, r3, #1
 8003ec6:	3430      	adds	r4, #48	; 0x30
 8003ec8:	428a      	cmp	r2, r1
 8003eca:	bf08      	it	eq
 8003ecc:	f043 0301 	orreq.w	r3, r3, #1
 8003ed0:	3130      	adds	r1, #48	; 0x30
 8003ed2:	42a2      	cmp	r2, r4
 8003ed4:	bf08      	it	eq
 8003ed6:	f043 0301 	orreq.w	r3, r3, #1
 8003eda:	3430      	adds	r4, #48	; 0x30
 8003edc:	428a      	cmp	r2, r1
 8003ede:	bf08      	it	eq
 8003ee0:	f043 0301 	orreq.w	r3, r3, #1
 8003ee4:	3130      	adds	r1, #48	; 0x30
 8003ee6:	42a2      	cmp	r2, r4
 8003ee8:	bf08      	it	eq
 8003eea:	f043 0301 	orreq.w	r3, r3, #1
 8003eee:	428a      	cmp	r2, r1
 8003ef0:	bf08      	it	eq
 8003ef2:	f043 0301 	orreq.w	r3, r3, #1
 8003ef6:	b913      	cbnz	r3, 8003efe <HAL_DMA_IRQHandler+0x876>
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <HAL_DMA_IRQHandler+0x8b0>)
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d123      	bne.n	8003f46 <HAL_DMA_IRQHandler+0x8be>
 8003efe:	6813      	ldr	r3, [r2, #0]
 8003f00:	f023 0314 	bic.w	r3, r3, #20
 8003f04:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003f06:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8003f08:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003f0e:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8003f12:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f47f adb7 	bne.w	8003a8a <HAL_DMA_IRQHandler+0x402>
 8003f1c:	e67c      	b.n	8003c18 <HAL_DMA_IRQHandler+0x590>
 8003f1e:	bf00      	nop
 8003f20:	58025408 	.word	0x58025408
 8003f24:	5802541c 	.word	0x5802541c
 8003f28:	58025494 	.word	0x58025494
 8003f2c:	40020010 	.word	0x40020010
 8003f30:	40020028 	.word	0x40020028
 8003f34:	40020040 	.word	0x40020040
 8003f38:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f3c:	6813      	ldr	r3, [r2, #0]
 8003f3e:	f023 0304 	bic.w	r3, r3, #4
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e781      	b.n	8003e4a <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f46:	6813      	ldr	r3, [r2, #0]
 8003f48:	f023 030a 	bic.w	r3, r3, #10
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e7da      	b.n	8003f06 <HAL_DMA_IRQHandler+0x87e>

08003f50 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8003f50:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8003f52:	4770      	bx	lr

08003f54 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f54:	680b      	ldr	r3, [r1, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8114 	beq.w	8004184 <HAL_GPIO_Init+0x230>
 8003f5c:	f04f 0c00 	mov.w	ip, #0
{
 8003f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8003f64:	4662      	mov	r2, ip
{
 8003f66:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f68:	4d8e      	ldr	r5, [pc, #568]	; (80041a4 <HAL_GPIO_Init+0x250>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f6a:	4f8f      	ldr	r7, [pc, #572]	; (80041a8 <HAL_GPIO_Init+0x254>)
 8003f6c:	f8df 8250 	ldr.w	r8, [pc, #592]	; 80041c0 <HAL_GPIO_Init+0x26c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f70:	f04f 0901 	mov.w	r9, #1
 8003f74:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8003f78:	ea19 0e03 	ands.w	lr, r9, r3
 8003f7c:	f000 80bc 	beq.w	80040f8 <HAL_GPIO_Init+0x1a4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f80:	684b      	ldr	r3, [r1, #4]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	1e5c      	subs	r4, r3, #1
 8003f88:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f8a:	f04f 0403 	mov.w	r4, #3
 8003f8e:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f92:	f240 80bb 	bls.w	800410c <HAL_GPIO_Init+0x1b8>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f96:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d026      	beq.n	8003fea <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 8003f9c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f9e:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa2:	688b      	ldr	r3, [r1, #8]
 8003fa4:	fa03 f30c 	lsl.w	r3, r3, ip
 8003fa8:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8003fac:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fae:	684b      	ldr	r3, [r1, #4]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d118      	bne.n	8003fea <HAL_GPIO_Init+0x96>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fb8:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8003fbc:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fc0:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8003fc4:	230f      	movs	r3, #15
 8003fc6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8003fca:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3U];
 8003fce:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fd2:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fd6:	690b      	ldr	r3, [r1, #16]
 8003fd8:	fa03 f30b 	lsl.w	r3, r3, fp
 8003fdc:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003fe0:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe4:	684b      	ldr	r3, [r1, #4]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 8003fea:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fee:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ff2:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff6:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8003ff8:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ffa:	684b      	ldr	r3, [r1, #4]
 8003ffc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8004000:	d079      	beq.n	80040f6 <HAL_GPIO_Init+0x1a2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004002:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8004006:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800400a:	f002 0903 	and.w	r9, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800400e:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004018:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401c:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8004020:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004024:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004030:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8004034:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004038:	fa03 f309 	lsl.w	r3, r3, r9
 800403c:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004040:	d025      	beq.n	800408e <HAL_GPIO_Init+0x13a>
 8004042:	4540      	cmp	r0, r8
 8004044:	f000 8082 	beq.w	800414c <HAL_GPIO_Init+0x1f8>
 8004048:	4e58      	ldr	r6, [pc, #352]	; (80041ac <HAL_GPIO_Init+0x258>)
 800404a:	42b0      	cmp	r0, r6
 800404c:	f000 8085 	beq.w	800415a <HAL_GPIO_Init+0x206>
 8004050:	4e57      	ldr	r6, [pc, #348]	; (80041b0 <HAL_GPIO_Init+0x25c>)
 8004052:	42b0      	cmp	r0, r6
 8004054:	d073      	beq.n	800413e <HAL_GPIO_Init+0x1ea>
 8004056:	4e57      	ldr	r6, [pc, #348]	; (80041b4 <HAL_GPIO_Init+0x260>)
 8004058:	42b0      	cmp	r0, r6
 800405a:	f000 808c 	beq.w	8004176 <HAL_GPIO_Init+0x222>
 800405e:	4e56      	ldr	r6, [pc, #344]	; (80041b8 <HAL_GPIO_Init+0x264>)
 8004060:	42b0      	cmp	r0, r6
 8004062:	f000 8090 	beq.w	8004186 <HAL_GPIO_Init+0x232>
 8004066:	4e55      	ldr	r6, [pc, #340]	; (80041bc <HAL_GPIO_Init+0x268>)
 8004068:	42b0      	cmp	r0, r6
 800406a:	d07d      	beq.n	8004168 <HAL_GPIO_Init+0x214>
 800406c:	f8df a154 	ldr.w	sl, [pc, #340]	; 80041c4 <HAL_GPIO_Init+0x270>
 8004070:	4550      	cmp	r0, sl
 8004072:	f000 808f 	beq.w	8004194 <HAL_GPIO_Init+0x240>
 8004076:	f8df a150 	ldr.w	sl, [pc, #336]	; 80041c8 <HAL_GPIO_Init+0x274>
 800407a:	4550      	cmp	r0, sl
 800407c:	bf0c      	ite	eq
 800407e:	f04f 0a09 	moveq.w	sl, #9
 8004082:	f04f 0a0a 	movne.w	sl, #10
 8004086:	fa0a f909 	lsl.w	r9, sl, r9
 800408a:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800408e:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004094:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 8004096:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 800409a:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800409c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040a0:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 80040a2:	bf54      	ite	pl
 80040a4:	4023      	andpl	r3, r4
          temp |= iocurrent;
 80040a6:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 80040aa:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040ae:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 80040b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80040b4:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040b8:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 80040ba:	bf54      	ite	pl
 80040bc:	4023      	andpl	r3, r4
          temp |= iocurrent;
 80040be:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 80040c2:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040c6:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80040c8:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040cc:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040d0:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 80040d2:	bf54      	ite	pl
 80040d4:	4023      	andpl	r3, r4
          temp |= iocurrent;
 80040d6:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 80040da:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040de:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 80040e0:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040e4:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 80040e6:	bf54      	ite	pl
 80040e8:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80040ea:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040ee:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80040f2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040f6:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 80040f8:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040fa:	f10c 0c02 	add.w	ip, ip, #2
 80040fe:	fa33 f402 	lsrs.w	r4, r3, r2
 8004102:	f47f af35 	bne.w	8003f70 <HAL_GPIO_Init+0x1c>
  }
}
 8004106:	b003      	add	sp, #12
 8004108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800410c:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800410e:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004112:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004114:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004116:	fa03 f30c 	lsl.w	r3, r3, ip
 800411a:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 800411e:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004120:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8004122:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004126:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800412a:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412e:	4093      	lsls	r3, r2
 8004130:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 8004134:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004136:	684b      	ldr	r3, [r1, #4]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	e72c      	b.n	8003f98 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800413e:	f04f 0a03 	mov.w	sl, #3
 8004142:	fa0a f909 	lsl.w	r9, sl, r9
 8004146:	ea43 0309 	orr.w	r3, r3, r9
 800414a:	e7a0      	b.n	800408e <HAL_GPIO_Init+0x13a>
 800414c:	f04f 0a01 	mov.w	sl, #1
 8004150:	fa0a f909 	lsl.w	r9, sl, r9
 8004154:	ea43 0309 	orr.w	r3, r3, r9
 8004158:	e799      	b.n	800408e <HAL_GPIO_Init+0x13a>
 800415a:	f04f 0a02 	mov.w	sl, #2
 800415e:	fa0a f909 	lsl.w	r9, sl, r9
 8004162:	ea43 0309 	orr.w	r3, r3, r9
 8004166:	e792      	b.n	800408e <HAL_GPIO_Init+0x13a>
 8004168:	f04f 0a06 	mov.w	sl, #6
 800416c:	fa0a f909 	lsl.w	r9, sl, r9
 8004170:	ea43 0309 	orr.w	r3, r3, r9
 8004174:	e78b      	b.n	800408e <HAL_GPIO_Init+0x13a>
 8004176:	f04f 0a04 	mov.w	sl, #4
 800417a:	fa0a f909 	lsl.w	r9, sl, r9
 800417e:	ea43 0309 	orr.w	r3, r3, r9
 8004182:	e784      	b.n	800408e <HAL_GPIO_Init+0x13a>
 8004184:	4770      	bx	lr
 8004186:	f04f 0a05 	mov.w	sl, #5
 800418a:	fa0a f909 	lsl.w	r9, sl, r9
 800418e:	ea43 0309 	orr.w	r3, r3, r9
 8004192:	e77c      	b.n	800408e <HAL_GPIO_Init+0x13a>
 8004194:	f04f 0a07 	mov.w	sl, #7
 8004198:	fa0a f909 	lsl.w	r9, sl, r9
 800419c:	ea43 0309 	orr.w	r3, r3, r9
 80041a0:	e775      	b.n	800408e <HAL_GPIO_Init+0x13a>
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	58020000 	.word	0x58020000
 80041ac:	58020800 	.word	0x58020800
 80041b0:	58020c00 	.word	0x58020c00
 80041b4:	58021000 	.word	0x58021000
 80041b8:	58021400 	.word	0x58021400
 80041bc:	58021800 	.word	0x58021800
 80041c0:	58020400 	.word	0x58020400
 80041c4:	58021c00 	.word	0x58021c00
 80041c8:	58022400 	.word	0x58022400

080041cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041cc:	b902      	cbnz	r2, 80041d0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80041ce:	0409      	lsls	r1, r1, #16
 80041d0:	6181      	str	r1, [r0, #24]
  }
}
 80041d2:	4770      	bx	lr

080041d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041d4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80041d6:	4c10      	ldr	r4, [pc, #64]	; (8004218 <HAL_PWREx_ConfigSupply+0x44>)
 80041d8:	68e3      	ldr	r3, [r4, #12]
 80041da:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041de:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80041e0:	d105      	bne.n	80041ee <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041e2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80041e6:	1a18      	subs	r0, r3, r0
 80041e8:	bf18      	it	ne
 80041ea:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80041ec:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80041ee:	f023 0307 	bic.w	r3, r3, #7
 80041f2:	4318      	orrs	r0, r3
 80041f4:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 80041f6:	f7fd f9dd 	bl	80015b4 <HAL_GetTick>
 80041fa:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041fc:	e005      	b.n	800420a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80041fe:	f7fd f9d9 	bl	80015b4 <HAL_GetTick>
 8004202:	1b40      	subs	r0, r0, r5
 8004204:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004208:	d804      	bhi.n	8004214 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800420a:	6863      	ldr	r3, [r4, #4]
 800420c:	049b      	lsls	r3, r3, #18
 800420e:	d5f6      	bpl.n	80041fe <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8004210:	2000      	movs	r0, #0
}
 8004212:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004214:	2001      	movs	r0, #1
}
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	58024800 	.word	0x58024800

0800421c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800421c:	4b3b      	ldr	r3, [pc, #236]	; (800430c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800421e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004222:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004224:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8004226:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800422a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800422c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004230:	d038      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004232:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004236:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800423a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800423e:	fb05 f101 	mul.w	r1, r5, r1
 8004242:	2a01      	cmp	r2, #1
 8004244:	ee07 1a90 	vmov	s15, r1
 8004248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800424c:	d002      	beq.n	8004254 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800424e:	2a02      	cmp	r2, #2
 8004250:	d04e      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8004252:	b34a      	cbz	r2, 80042a8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004254:	ee07 0a90 	vmov	s15, r0
 8004258:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004310 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800425c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8004266:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8004314 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800426a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426e:	ee06 3a90 	vmov	s13, r3
 8004272:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8004276:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800427a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800427e:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004282:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004286:	4b21      	ldr	r3, [pc, #132]	; (800430c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800428e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004290:	ee07 3a90 	vmov	s15, r3
 8004294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800429c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80042a4:	bc30      	pop	{r4, r5}
 80042a6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	0692      	lsls	r2, r2, #26
 80042ac:	d527      	bpl.n	80042fe <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042ae:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042b0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042b4:	4a18      	ldr	r2, [pc, #96]	; (8004318 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042bc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042c4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8004314 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80042c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042cc:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ce:	ee06 3a90 	vmov	s13, r3
 80042d2:	ee05 2a90 	vmov	s11, r2
 80042d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80042da:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80042de:	ee76 6a86 	vadd.f32	s13, s13, s12
 80042e2:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 80042e6:	eee7 6a05 	vfma.f32	s13, s14, s10
 80042ea:	ee66 6a26 	vmul.f32	s13, s12, s13
 80042ee:	e7ca      	b.n	8004286 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042f0:	ee07 0a90 	vmov	s15, r0
 80042f4:	eddf 6a09 	vldr	s13, [pc, #36]	; 800431c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 80042f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042fc:	e7b0      	b.n	8004260 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042fe:	ee07 0a90 	vmov	s15, r0
 8004302:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004320 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8004306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800430a:	e7a9      	b.n	8004260 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800430c:	58024400 	.word	0x58024400
 8004310:	4a742400 	.word	0x4a742400
 8004314:	39000000 	.word	0x39000000
 8004318:	03d09000 	.word	0x03d09000
 800431c:	4bbebc20 	.word	0x4bbebc20
 8004320:	4c742400 	.word	0x4c742400

08004324 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004324:	2800      	cmp	r0, #0
 8004326:	f000 81c4 	beq.w	80046b2 <HAL_RCC_OscConfig+0x38e>
{
 800432a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432c:	6803      	ldr	r3, [r0, #0]
 800432e:	4604      	mov	r4, r0
 8004330:	07d9      	lsls	r1, r3, #31
 8004332:	d52e      	bpl.n	8004392 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004334:	4993      	ldr	r1, [pc, #588]	; (8004584 <HAL_RCC_OscConfig+0x260>)
 8004336:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004338:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800433e:	2a10      	cmp	r2, #16
 8004340:	f000 80f0 	beq.w	8004524 <HAL_RCC_OscConfig+0x200>
 8004344:	2a18      	cmp	r2, #24
 8004346:	f000 80e8 	beq.w	800451a <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800434a:	6863      	ldr	r3, [r4, #4]
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004350:	f000 8109 	beq.w	8004566 <HAL_RCC_OscConfig+0x242>
 8004354:	2b00      	cmp	r3, #0
 8004356:	f040 8166 	bne.w	8004626 <HAL_RCC_OscConfig+0x302>
 800435a:	4b8a      	ldr	r3, [pc, #552]	; (8004584 <HAL_RCC_OscConfig+0x260>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800436a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800436c:	6863      	ldr	r3, [r4, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 813a 	beq.w	80045e8 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8004374:	f7fd f91e 	bl	80015b4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004378:	4e82      	ldr	r6, [pc, #520]	; (8004584 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800437a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800437c:	e005      	b.n	800438a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437e:	f7fd f919 	bl	80015b4 <HAL_GetTick>
 8004382:	1b40      	subs	r0, r0, r5
 8004384:	2864      	cmp	r0, #100	; 0x64
 8004386:	f200 812d 	bhi.w	80045e4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800438a:	6833      	ldr	r3, [r6, #0]
 800438c:	039b      	lsls	r3, r3, #14
 800438e:	d5f6      	bpl.n	800437e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	079d      	lsls	r5, r3, #30
 8004394:	d47e      	bmi.n	8004494 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004396:	06d9      	lsls	r1, r3, #27
 8004398:	d528      	bpl.n	80043ec <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800439a:	4a7a      	ldr	r2, [pc, #488]	; (8004584 <HAL_RCC_OscConfig+0x260>)
 800439c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800439e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	f000 80cd 	beq.w	8004544 <HAL_RCC_OscConfig+0x220>
 80043aa:	2b18      	cmp	r3, #24
 80043ac:	f000 80c5 	beq.w	800453a <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80043b0:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80043b2:	4d74      	ldr	r5, [pc, #464]	; (8004584 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8155 	beq.w	8004664 <HAL_RCC_OscConfig+0x340>
        __HAL_RCC_CSI_ENABLE();
 80043ba:	682b      	ldr	r3, [r5, #0]
 80043bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043c2:	f7fd f8f7 	bl	80015b4 <HAL_GetTick>
 80043c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043c8:	e005      	b.n	80043d6 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043ca:	f7fd f8f3 	bl	80015b4 <HAL_GetTick>
 80043ce:	1b80      	subs	r0, r0, r6
 80043d0:	2802      	cmp	r0, #2
 80043d2:	f200 8107 	bhi.w	80045e4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043d6:	682b      	ldr	r3, [r5, #0]
 80043d8:	05db      	lsls	r3, r3, #23
 80043da:	d5f6      	bpl.n	80043ca <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043dc:	68eb      	ldr	r3, [r5, #12]
 80043de:	6a22      	ldr	r2, [r4, #32]
 80043e0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80043e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80043e8:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	071d      	lsls	r5, r3, #28
 80043ee:	d516      	bpl.n	800441e <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043f0:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80043f2:	4d64      	ldr	r5, [pc, #400]	; (8004584 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8105 	beq.w	8004604 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_LSI_ENABLE();
 80043fa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004402:	f7fd f8d7 	bl	80015b4 <HAL_GetTick>
 8004406:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004408:	e005      	b.n	8004416 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440a:	f7fd f8d3 	bl	80015b4 <HAL_GetTick>
 800440e:	1b80      	subs	r0, r0, r6
 8004410:	2802      	cmp	r0, #2
 8004412:	f200 80e7 	bhi.w	80045e4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004416:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004418:	0798      	lsls	r0, r3, #30
 800441a:	d5f6      	bpl.n	800440a <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	069a      	lsls	r2, r3, #26
 8004420:	d516      	bpl.n	8004450 <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004422:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8004424:	4d57      	ldr	r5, [pc, #348]	; (8004584 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 810b 	beq.w	8004642 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSI48_ENABLE();
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004432:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004434:	f7fd f8be 	bl	80015b4 <HAL_GetTick>
 8004438:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800443a:	e005      	b.n	8004448 <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800443c:	f7fd f8ba 	bl	80015b4 <HAL_GetTick>
 8004440:	1b80      	subs	r0, r0, r6
 8004442:	2802      	cmp	r0, #2
 8004444:	f200 80ce 	bhi.w	80045e4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	049f      	lsls	r7, r3, #18
 800444c:	d5f6      	bpl.n	800443c <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	0759      	lsls	r1, r3, #29
 8004452:	f100 808e 	bmi.w	8004572 <HAL_RCC_OscConfig+0x24e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004456:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004458:	b1d0      	cbz	r0, 8004490 <HAL_RCC_OscConfig+0x16c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800445a:	4d4a      	ldr	r5, [pc, #296]	; (8004584 <HAL_RCC_OscConfig+0x260>)
 800445c:	692b      	ldr	r3, [r5, #16]
 800445e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004462:	2b18      	cmp	r3, #24
 8004464:	f000 818c 	beq.w	8004780 <HAL_RCC_OscConfig+0x45c>
        __HAL_RCC_PLL_DISABLE();
 8004468:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800446c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004470:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004472:	f000 8120 	beq.w	80046b6 <HAL_RCC_OscConfig+0x392>
        tickstart = HAL_GetTick();
 8004476:	f7fd f89d 	bl	80015b4 <HAL_GetTick>
 800447a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800447c:	e005      	b.n	800448a <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447e:	f7fd f899 	bl	80015b4 <HAL_GetTick>
 8004482:	1b00      	subs	r0, r0, r4
 8004484:	2802      	cmp	r0, #2
 8004486:	f200 80ad 	bhi.w	80045e4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800448a:	682b      	ldr	r3, [r5, #0]
 800448c:	019b      	lsls	r3, r3, #6
 800448e:	d4f6      	bmi.n	800447e <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 8004490:	2000      	movs	r0, #0
}
 8004492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004494:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <HAL_RCC_OscConfig+0x260>)
 8004496:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004498:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800449a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800449e:	d122      	bne.n	80044e6 <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a0:	4b38      	ldr	r3, [pc, #224]	; (8004584 <HAL_RCC_OscConfig+0x260>)
 80044a2:	68e2      	ldr	r2, [r4, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	0759      	lsls	r1, r3, #29
 80044a8:	d501      	bpl.n	80044ae <HAL_RCC_OscConfig+0x18a>
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	d043      	beq.n	8004536 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044ae:	4d35      	ldr	r5, [pc, #212]	; (8004584 <HAL_RCC_OscConfig+0x260>)
 80044b0:	682b      	ldr	r3, [r5, #0]
 80044b2:	f023 0319 	bic.w	r3, r3, #25
 80044b6:	4313      	orrs	r3, r2
 80044b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80044ba:	f7fd f87b 	bl	80015b4 <HAL_GetTick>
 80044be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044c0:	e005      	b.n	80044ce <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c2:	f7fd f877 	bl	80015b4 <HAL_GetTick>
 80044c6:	1b80      	subs	r0, r0, r6
 80044c8:	2802      	cmp	r0, #2
 80044ca:	f200 808b 	bhi.w	80045e4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ce:	682b      	ldr	r3, [r5, #0]
 80044d0:	075b      	lsls	r3, r3, #29
 80044d2:	d5f6      	bpl.n	80044c2 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d4:	686b      	ldr	r3, [r5, #4]
 80044d6:	6922      	ldr	r2, [r4, #16]
 80044d8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80044e0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	e757      	b.n	8004396 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044e6:	2b18      	cmp	r3, #24
 80044e8:	f000 80df 	beq.w	80046aa <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044ec:	4d25      	ldr	r5, [pc, #148]	; (8004584 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044ee:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044f0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	f000 80c8 	beq.w	8004688 <HAL_RCC_OscConfig+0x364>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044f8:	f023 0319 	bic.w	r3, r3, #25
 80044fc:	4313      	orrs	r3, r2
 80044fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004500:	f7fd f858 	bl	80015b4 <HAL_GetTick>
 8004504:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004506:	e004      	b.n	8004512 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004508:	f7fd f854 	bl	80015b4 <HAL_GetTick>
 800450c:	1b80      	subs	r0, r0, r6
 800450e:	2802      	cmp	r0, #2
 8004510:	d868      	bhi.n	80045e4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	075f      	lsls	r7, r3, #29
 8004516:	d5f7      	bpl.n	8004508 <HAL_RCC_OscConfig+0x1e4>
 8004518:	e7dc      	b.n	80044d4 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800451a:	f001 0103 	and.w	r1, r1, #3
 800451e:	2902      	cmp	r1, #2
 8004520:	f47f af13 	bne.w	800434a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	4a17      	ldr	r2, [pc, #92]	; (8004584 <HAL_RCC_OscConfig+0x260>)
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	0392      	lsls	r2, r2, #14
 800452a:	f57f af32 	bpl.w	8004392 <HAL_RCC_OscConfig+0x6e>
 800452e:	6862      	ldr	r2, [r4, #4]
 8004530:	2a00      	cmp	r2, #0
 8004532:	f47f af2e 	bne.w	8004392 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8004536:	2001      	movs	r0, #1
}
 8004538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800453a:	f002 0203 	and.w	r2, r2, #3
 800453e:	2a01      	cmp	r2, #1
 8004540:	f47f af36 	bne.w	80043b0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <HAL_RCC_OscConfig+0x260>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	05da      	lsls	r2, r3, #23
 800454a:	d502      	bpl.n	8004552 <HAL_RCC_OscConfig+0x22e>
 800454c:	69e3      	ldr	r3, [r4, #28]
 800454e:	2b80      	cmp	r3, #128	; 0x80
 8004550:	d1f1      	bne.n	8004536 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004552:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <HAL_RCC_OscConfig+0x260>)
 8004554:	6a21      	ldr	r1, [r4, #32]
 8004556:	68d3      	ldr	r3, [r2, #12]
 8004558:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800455c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004560:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004562:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004564:	e742      	b.n	80043ec <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004566:	4a07      	ldr	r2, [pc, #28]	; (8004584 <HAL_RCC_OscConfig+0x260>)
 8004568:	6813      	ldr	r3, [r2, #0]
 800456a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	e6fc      	b.n	800436c <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8004572:	4d05      	ldr	r5, [pc, #20]	; (8004588 <HAL_RCC_OscConfig+0x264>)
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800457a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800457c:	f7fd f81a 	bl	80015b4 <HAL_GetTick>
 8004580:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x272>
 8004584:	58024400 	.word	0x58024400
 8004588:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458c:	f7fd f812 	bl	80015b4 <HAL_GetTick>
 8004590:	1b80      	subs	r0, r0, r6
 8004592:	2864      	cmp	r0, #100	; 0x64
 8004594:	d826      	bhi.n	80045e4 <HAL_RCC_OscConfig+0x2c0>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	05da      	lsls	r2, r3, #23
 800459a:	d5f7      	bpl.n	800458c <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459c:	68a3      	ldr	r3, [r4, #8]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	f000 814d 	beq.w	800483e <HAL_RCC_OscConfig+0x51a>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f040 8157 	bne.w	8004858 <HAL_RCC_OscConfig+0x534>
 80045aa:	4ba8      	ldr	r3, [pc, #672]	; (800484c <HAL_RCC_OscConfig+0x528>)
 80045ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	671a      	str	r2, [r3, #112]	; 0x70
 80045b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045b6:	f022 0204 	bic.w	r2, r2, #4
 80045ba:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045bc:	68a3      	ldr	r3, [r4, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 812c 	beq.w	800481c <HAL_RCC_OscConfig+0x4f8>
      tickstart = HAL_GetTick();
 80045c4:	f7fc fff6 	bl	80015b4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045c8:	4ea0      	ldr	r6, [pc, #640]	; (800484c <HAL_RCC_OscConfig+0x528>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80045ce:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045d0:	e004      	b.n	80045dc <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fc ffef 	bl	80015b4 <HAL_GetTick>
 80045d6:	1b40      	subs	r0, r0, r5
 80045d8:	42b8      	cmp	r0, r7
 80045da:	d803      	bhi.n	80045e4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045dc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80045de:	079b      	lsls	r3, r3, #30
 80045e0:	d5f7      	bpl.n	80045d2 <HAL_RCC_OscConfig+0x2ae>
 80045e2:	e738      	b.n	8004456 <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 80045e4:	2003      	movs	r0, #3
}
 80045e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 80045e8:	f7fc ffe4 	bl	80015b4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045ec:	4e97      	ldr	r6, [pc, #604]	; (800484c <HAL_RCC_OscConfig+0x528>)
        tickstart = HAL_GetTick();
 80045ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045f0:	e004      	b.n	80045fc <HAL_RCC_OscConfig+0x2d8>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f2:	f7fc ffdf 	bl	80015b4 <HAL_GetTick>
 80045f6:	1b40      	subs	r0, r0, r5
 80045f8:	2864      	cmp	r0, #100	; 0x64
 80045fa:	d8f3      	bhi.n	80045e4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045fc:	6833      	ldr	r3, [r6, #0]
 80045fe:	039f      	lsls	r7, r3, #14
 8004600:	d4f7      	bmi.n	80045f2 <HAL_RCC_OscConfig+0x2ce>
 8004602:	e6c5      	b.n	8004390 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004604:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800460c:	f7fc ffd2 	bl	80015b4 <HAL_GetTick>
 8004610:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004612:	e004      	b.n	800461e <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004614:	f7fc ffce 	bl	80015b4 <HAL_GetTick>
 8004618:	1b80      	subs	r0, r0, r6
 800461a:	2802      	cmp	r0, #2
 800461c:	d8e2      	bhi.n	80045e4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800461e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004620:	0799      	lsls	r1, r3, #30
 8004622:	d4f7      	bmi.n	8004614 <HAL_RCC_OscConfig+0x2f0>
 8004624:	e6fa      	b.n	800441c <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800462a:	4b88      	ldr	r3, [pc, #544]	; (800484c <HAL_RCC_OscConfig+0x528>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	f47f ae96 	bne.w	800435e <HAL_RCC_OscConfig+0x3a>
 8004632:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	e694      	b.n	800436c <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 8004642:	682b      	ldr	r3, [r5, #0]
 8004644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004648:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800464a:	f7fc ffb3 	bl	80015b4 <HAL_GetTick>
 800464e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004650:	e004      	b.n	800465c <HAL_RCC_OscConfig+0x338>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004652:	f7fc ffaf 	bl	80015b4 <HAL_GetTick>
 8004656:	1b80      	subs	r0, r0, r6
 8004658:	2802      	cmp	r0, #2
 800465a:	d8c3      	bhi.n	80045e4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	0498      	lsls	r0, r3, #18
 8004660:	d4f7      	bmi.n	8004652 <HAL_RCC_OscConfig+0x32e>
 8004662:	e6f4      	b.n	800444e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8004664:	682b      	ldr	r3, [r5, #0]
 8004666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800466a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800466c:	f7fc ffa2 	bl	80015b4 <HAL_GetTick>
 8004670:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004672:	e004      	b.n	800467e <HAL_RCC_OscConfig+0x35a>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004674:	f7fc ff9e 	bl	80015b4 <HAL_GetTick>
 8004678:	1b80      	subs	r0, r0, r6
 800467a:	2802      	cmp	r0, #2
 800467c:	d8b2      	bhi.n	80045e4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800467e:	682b      	ldr	r3, [r5, #0]
 8004680:	05df      	lsls	r7, r3, #23
 8004682:	d4f7      	bmi.n	8004674 <HAL_RCC_OscConfig+0x350>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	e6b1      	b.n	80043ec <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800468e:	f7fc ff91 	bl	80015b4 <HAL_GetTick>
 8004692:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004694:	e004      	b.n	80046a0 <HAL_RCC_OscConfig+0x37c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004696:	f7fc ff8d 	bl	80015b4 <HAL_GetTick>
 800469a:	1b80      	subs	r0, r0, r6
 800469c:	2802      	cmp	r0, #2
 800469e:	d8a1      	bhi.n	80045e4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	0758      	lsls	r0, r3, #29
 80046a4:	d4f7      	bmi.n	8004696 <HAL_RCC_OscConfig+0x372>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	e675      	b.n	8004396 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80046aa:	0790      	lsls	r0, r2, #30
 80046ac:	f47f af1e 	bne.w	80044ec <HAL_RCC_OscConfig+0x1c8>
 80046b0:	e6f6      	b.n	80044a0 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 80046b2:	2001      	movs	r0, #1
}
 80046b4:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80046b6:	f7fc ff7d 	bl	80015b4 <HAL_GetTick>
 80046ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046bc:	e004      	b.n	80046c8 <HAL_RCC_OscConfig+0x3a4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046be:	f7fc ff79 	bl	80015b4 <HAL_GetTick>
 80046c2:	1b80      	subs	r0, r0, r6
 80046c4:	2802      	cmp	r0, #2
 80046c6:	d88d      	bhi.n	80045e4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	0199      	lsls	r1, r3, #6
 80046cc:	d4f7      	bmi.n	80046be <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ce:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80046d0:	4b5f      	ldr	r3, [pc, #380]	; (8004850 <HAL_RCC_OscConfig+0x52c>)
 80046d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80046d4:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046d6:	495f      	ldr	r1, [pc, #380]	; (8004854 <HAL_RCC_OscConfig+0x530>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046d8:	4e5c      	ldr	r6, [pc, #368]	; (800484c <HAL_RCC_OscConfig+0x528>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046da:	4313      	orrs	r3, r2
 80046dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80046de:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80046e2:	62ab      	str	r3, [r5, #40]	; 0x28
 80046e4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80046e8:	3b01      	subs	r3, #1
 80046ea:	3a01      	subs	r2, #1
 80046ec:	025b      	lsls	r3, r3, #9
 80046ee:	0412      	lsls	r2, r2, #16
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80046f6:	4313      	orrs	r3, r2
 80046f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80046fa:	3a01      	subs	r2, #1
 80046fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004700:	4313      	orrs	r3, r2
 8004702:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004704:	3a01      	subs	r2, #1
 8004706:	0612      	lsls	r2, r2, #24
 8004708:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800470c:	4313      	orrs	r3, r2
 800470e:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8004710:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004718:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800471a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800471c:	4011      	ands	r1, r2
 800471e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004722:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004724:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004726:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004728:	f023 030c 	bic.w	r3, r3, #12
 800472c:	4313      	orrs	r3, r2
 800472e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004730:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004732:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004734:	f023 0302 	bic.w	r3, r3, #2
 8004738:	4313      	orrs	r3, r2
 800473a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800473c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800473e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004742:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004744:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800474c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800474e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004752:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004754:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004762:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004764:	f7fc ff26 	bl	80015b4 <HAL_GetTick>
 8004768:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800476a:	e005      	b.n	8004778 <HAL_RCC_OscConfig+0x454>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fc ff22 	bl	80015b4 <HAL_GetTick>
 8004770:	1b00      	subs	r0, r0, r4
 8004772:	2802      	cmp	r0, #2
 8004774:	f63f af36 	bhi.w	80045e4 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004778:	6833      	ldr	r3, [r6, #0]
 800477a:	019a      	lsls	r2, r3, #6
 800477c:	d5f6      	bpl.n	800476c <HAL_RCC_OscConfig+0x448>
 800477e:	e687      	b.n	8004490 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004780:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004782:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004784:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004786:	f43f ae84 	beq.w	8004492 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800478e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004790:	428b      	cmp	r3, r1
 8004792:	f47f aed0 	bne.w	8004536 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004796:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800479c:	429a      	cmp	r2, r3
 800479e:	f47f aeca 	bne.w	8004536 <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047a4:	f3c6 0208 	ubfx	r2, r6, #0, #9
 80047a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	f47f aec3 	bne.w	8004536 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047b2:	f3c6 2246 	ubfx	r2, r6, #9, #7
 80047b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	f47f aebc 	bne.w	8004536 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047c0:	f3c6 4206 	ubfx	r2, r6, #16, #7
 80047c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	f47f aeb5 	bne.w	8004536 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80047cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047ce:	f3c6 6606 	ubfx	r6, r6, #24, #7
 80047d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047d4:	429e      	cmp	r6, r3
 80047d6:	f47f aeae 	bne.w	8004536 <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80047da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80047dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80047de:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80047e2:	429a      	cmp	r2, r3
 80047e4:	f43f ae54 	beq.w	8004490 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 80047e8:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_RCC_OscConfig+0x528>)
 80047ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80047f2:	f7fc fedf 	bl	80015b4 <HAL_GetTick>
 80047f6:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80047f8:	f7fc fedc 	bl	80015b4 <HAL_GetTick>
 80047fc:	42a8      	cmp	r0, r5
 80047fe:	d0fb      	beq.n	80047f8 <HAL_RCC_OscConfig+0x4d4>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004800:	4a12      	ldr	r2, [pc, #72]	; (800484c <HAL_RCC_OscConfig+0x528>)
  return HAL_OK;
 8004802:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004804:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004806:	4b13      	ldr	r3, [pc, #76]	; (8004854 <HAL_RCC_OscConfig+0x530>)
 8004808:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800480a:	4023      	ands	r3, r4
 800480c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004810:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004812:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800481a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 800481c:	f7fc feca 	bl	80015b4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004820:	4e0a      	ldr	r6, [pc, #40]	; (800484c <HAL_RCC_OscConfig+0x528>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004826:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004828:	e005      	b.n	8004836 <HAL_RCC_OscConfig+0x512>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fc fec3 	bl	80015b4 <HAL_GetTick>
 800482e:	1b40      	subs	r0, r0, r5
 8004830:	42b8      	cmp	r0, r7
 8004832:	f63f aed7 	bhi.w	80045e4 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004836:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004838:	0798      	lsls	r0, r3, #30
 800483a:	d4f6      	bmi.n	800482a <HAL_RCC_OscConfig+0x506>
 800483c:	e60b      	b.n	8004456 <HAL_RCC_OscConfig+0x132>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800483e:	4a03      	ldr	r2, [pc, #12]	; (800484c <HAL_RCC_OscConfig+0x528>)
 8004840:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	e6b8      	b.n	80045bc <HAL_RCC_OscConfig+0x298>
 800484a:	bf00      	nop
 800484c:	58024400 	.word	0x58024400
 8004850:	fffffc0c 	.word	0xfffffc0c
 8004854:	ffff0007 	.word	0xffff0007
 8004858:	2b05      	cmp	r3, #5
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_RCC_OscConfig+0x550>)
 800485c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800485e:	f47f aea6 	bne.w	80045ae <HAL_RCC_OscConfig+0x28a>
 8004862:	f042 0204 	orr.w	r2, r2, #4
 8004866:	671a      	str	r2, [r3, #112]	; 0x70
 8004868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	671a      	str	r2, [r3, #112]	; 0x70
 8004870:	e6a4      	b.n	80045bc <HAL_RCC_OscConfig+0x298>
 8004872:	bf00      	nop
 8004874:	58024400 	.word	0x58024400

08004878 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004878:	4a47      	ldr	r2, [pc, #284]	; (8004998 <HAL_RCC_GetSysClockFreq+0x120>)
 800487a:	6913      	ldr	r3, [r2, #16]
 800487c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004880:	2b10      	cmp	r3, #16
 8004882:	d004      	beq.n	800488e <HAL_RCC_GetSysClockFreq+0x16>
 8004884:	2b18      	cmp	r3, #24
 8004886:	d00d      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x2c>
 8004888:	b11b      	cbz	r3, 8004892 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800488a:	4844      	ldr	r0, [pc, #272]	; (800499c <HAL_RCC_GetSysClockFreq+0x124>)
 800488c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800488e:	4844      	ldr	r0, [pc, #272]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x128>)
 8004890:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	0699      	lsls	r1, r3, #26
 8004896:	d54a      	bpl.n	800492e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004898:	6813      	ldr	r3, [r2, #0]
 800489a:	4842      	ldr	r0, [pc, #264]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x12c>)
 800489c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80048a0:	40d8      	lsrs	r0, r3
 80048a2:	4770      	bx	lr
{
 80048a4:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80048a8:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80048aa:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 80048ac:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048b0:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80048b2:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80048b6:	d038      	beq.n	800492a <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048b8:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80048bc:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048c0:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048c4:	fb05 f101 	mul.w	r1, r5, r1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	ee07 1a90 	vmov	s15, r1
 80048ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 80048d2:	d002      	beq.n	80048da <HAL_RCC_GetSysClockFreq+0x62>
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d02c      	beq.n	8004932 <HAL_RCC_GetSysClockFreq+0xba>
 80048d8:	b393      	cbz	r3, 8004940 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048da:	ee07 0a90 	vmov	s15, r0
 80048de:	eddf 6a32 	vldr	s13, [pc, #200]	; 80049a8 <HAL_RCC_GetSysClockFreq+0x130>
 80048e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80048e8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80048ec:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80049ac <HAL_RCC_GetSysClockFreq+0x134>
 80048f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f4:	ee06 3a90 	vmov	s13, r3
 80048f8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80048fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004900:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004904:	eee7 6a25 	vfma.f32	s13, s14, s11
 8004908:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800490c:	4b22      	ldr	r3, [pc, #136]	; (8004998 <HAL_RCC_GetSysClockFreq+0x120>)
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004914:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800491e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004926:	ee17 0a90 	vmov	r0, s15
}
 800492a:	bc30      	pop	{r4, r5}
 800492c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800492e:	481d      	ldr	r0, [pc, #116]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8004930:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004932:	ee07 0a90 	vmov	s15, r0
 8004936:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80049b0 <HAL_RCC_GetSysClockFreq+0x138>
 800493a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493e:	e7d2      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004940:	6813      	ldr	r3, [r2, #0]
 8004942:	069b      	lsls	r3, r3, #26
 8004944:	d520      	bpl.n	8004988 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004946:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004948:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800494c:	4915      	ldr	r1, [pc, #84]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800494e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004952:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004954:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800495c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80049ac <HAL_RCC_GetSysClockFreq+0x134>
 8004960:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004964:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004966:	ee06 3a90 	vmov	s13, r3
 800496a:	ee05 1a90 	vmov	s11, r1
 800496e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004972:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004976:	ee76 6a86 	vadd.f32	s13, s13, s12
 800497a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800497e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8004982:	ee66 6a26 	vmul.f32	s13, s12, s13
 8004986:	e7c1      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004988:	ee07 0a90 	vmov	s15, r0
 800498c:	eddf 6a09 	vldr	s13, [pc, #36]	; 80049b4 <HAL_RCC_GetSysClockFreq+0x13c>
 8004990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004994:	e7a7      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x6e>
 8004996:	bf00      	nop
 8004998:	58024400 	.word	0x58024400
 800499c:	003d0900 	.word	0x003d0900
 80049a0:	017d7840 	.word	0x017d7840
 80049a4:	03d09000 	.word	0x03d09000
 80049a8:	4a742400 	.word	0x4a742400
 80049ac:	39000000 	.word	0x39000000
 80049b0:	4bbebc20 	.word	0x4bbebc20
 80049b4:	4c742400 	.word	0x4c742400

080049b8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80049b8:	2800      	cmp	r0, #0
 80049ba:	f000 811a 	beq.w	8004bf2 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049be:	4a92      	ldr	r2, [pc, #584]	; (8004c08 <HAL_RCC_ClockConfig+0x250>)
{
 80049c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c4:	6813      	ldr	r3, [r2, #0]
 80049c6:	4604      	mov	r4, r0
 80049c8:	460d      	mov	r5, r1
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	428b      	cmp	r3, r1
 80049d0:	d20c      	bcs.n	80049ec <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	6813      	ldr	r3, [r2, #0]
 80049d4:	f023 030f 	bic.w	r3, r3, #15
 80049d8:	430b      	orrs	r3, r1
 80049da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049dc:	6813      	ldr	r3, [r2, #0]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	428b      	cmp	r3, r1
 80049e4:	d002      	beq.n	80049ec <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80049e6:	2001      	movs	r0, #1
}
 80049e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	075f      	lsls	r7, r3, #29
 80049f0:	d50c      	bpl.n	8004a0c <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049f2:	4986      	ldr	r1, [pc, #536]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 80049f4:	6920      	ldr	r0, [r4, #16]
 80049f6:	698a      	ldr	r2, [r1, #24]
 80049f8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80049fc:	4290      	cmp	r0, r2
 80049fe:	d905      	bls.n	8004a0c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a00:	698b      	ldr	r3, [r1, #24]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	4303      	orrs	r3, r0
 8004a08:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	071e      	lsls	r6, r3, #28
 8004a0e:	d50c      	bpl.n	8004a2a <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a10:	497e      	ldr	r1, [pc, #504]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004a12:	6960      	ldr	r0, [r4, #20]
 8004a14:	69ca      	ldr	r2, [r1, #28]
 8004a16:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004a1a:	4290      	cmp	r0, r2
 8004a1c:	d905      	bls.n	8004a2a <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a1e:	69cb      	ldr	r3, [r1, #28]
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	4303      	orrs	r3, r0
 8004a26:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	06d8      	lsls	r0, r3, #27
 8004a2c:	d50c      	bpl.n	8004a48 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a2e:	4977      	ldr	r1, [pc, #476]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004a30:	69a0      	ldr	r0, [r4, #24]
 8004a32:	69ca      	ldr	r2, [r1, #28]
 8004a34:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004a38:	4290      	cmp	r0, r2
 8004a3a:	d905      	bls.n	8004a48 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a3c:	69cb      	ldr	r3, [r1, #28]
 8004a3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a42:	4303      	orrs	r3, r0
 8004a44:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	0699      	lsls	r1, r3, #26
 8004a4a:	d50c      	bpl.n	8004a66 <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a4c:	496f      	ldr	r1, [pc, #444]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004a4e:	69e0      	ldr	r0, [r4, #28]
 8004a50:	6a0a      	ldr	r2, [r1, #32]
 8004a52:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004a56:	4290      	cmp	r0, r2
 8004a58:	d905      	bls.n	8004a66 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a5a:	6a0b      	ldr	r3, [r1, #32]
 8004a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a60:	4303      	orrs	r3, r0
 8004a62:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	079a      	lsls	r2, r3, #30
 8004a68:	f140 8083 	bpl.w	8004b72 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a6c:	4867      	ldr	r0, [pc, #412]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004a6e:	68e1      	ldr	r1, [r4, #12]
 8004a70:	6982      	ldr	r2, [r0, #24]
 8004a72:	f002 020f 	and.w	r2, r2, #15
 8004a76:	4291      	cmp	r1, r2
 8004a78:	f240 80a9 	bls.w	8004bce <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	6983      	ldr	r3, [r0, #24]
 8004a7e:	f023 030f 	bic.w	r3, r3, #15
 8004a82:	4319      	orrs	r1, r3
 8004a84:	6181      	str	r1, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	07df      	lsls	r7, r3, #31
 8004a8a:	d474      	bmi.n	8004b76 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a8c:	079f      	lsls	r7, r3, #30
 8004a8e:	d507      	bpl.n	8004aa0 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a90:	4a5e      	ldr	r2, [pc, #376]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004a92:	68e1      	ldr	r1, [r4, #12]
 8004a94:	6993      	ldr	r3, [r2, #24]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	428b      	cmp	r3, r1
 8004a9c:	f200 80a0 	bhi.w	8004be0 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa0:	4a59      	ldr	r2, [pc, #356]	; (8004c08 <HAL_RCC_ClockConfig+0x250>)
 8004aa2:	6813      	ldr	r3, [r2, #0]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	42ab      	cmp	r3, r5
 8004aaa:	d909      	bls.n	8004ac0 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aac:	6813      	ldr	r3, [r2, #0]
 8004aae:	f023 030f 	bic.w	r3, r3, #15
 8004ab2:	432b      	orrs	r3, r5
 8004ab4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	6813      	ldr	r3, [r2, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	42ab      	cmp	r3, r5
 8004abe:	d192      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	075e      	lsls	r6, r3, #29
 8004ac4:	d50c      	bpl.n	8004ae0 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ac6:	4951      	ldr	r1, [pc, #324]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004ac8:	6920      	ldr	r0, [r4, #16]
 8004aca:	698a      	ldr	r2, [r1, #24]
 8004acc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004ad0:	4290      	cmp	r0, r2
 8004ad2:	d205      	bcs.n	8004ae0 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ad4:	698b      	ldr	r3, [r1, #24]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	4303      	orrs	r3, r0
 8004adc:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	071d      	lsls	r5, r3, #28
 8004ae2:	d50c      	bpl.n	8004afe <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ae4:	4949      	ldr	r1, [pc, #292]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004ae6:	6960      	ldr	r0, [r4, #20]
 8004ae8:	69ca      	ldr	r2, [r1, #28]
 8004aea:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004aee:	4290      	cmp	r0, r2
 8004af0:	d205      	bcs.n	8004afe <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004af2:	69cb      	ldr	r3, [r1, #28]
 8004af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af8:	4303      	orrs	r3, r0
 8004afa:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	06d8      	lsls	r0, r3, #27
 8004b00:	d50c      	bpl.n	8004b1c <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b02:	4942      	ldr	r1, [pc, #264]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004b04:	69a0      	ldr	r0, [r4, #24]
 8004b06:	69ca      	ldr	r2, [r1, #28]
 8004b08:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004b0c:	4290      	cmp	r0, r2
 8004b0e:	d205      	bcs.n	8004b1c <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b10:	69cb      	ldr	r3, [r1, #28]
 8004b12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b16:	4303      	orrs	r3, r0
 8004b18:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	0699      	lsls	r1, r3, #26
 8004b1e:	d50b      	bpl.n	8004b38 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b20:	4a3a      	ldr	r2, [pc, #232]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004b22:	69e1      	ldr	r1, [r4, #28]
 8004b24:	6a13      	ldr	r3, [r2, #32]
 8004b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	d204      	bcs.n	8004b38 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b2e:	6a13      	ldr	r3, [r2, #32]
 8004b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b38:	f7ff fe9e 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8004b3c:	4a33      	ldr	r2, [pc, #204]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4833      	ldr	r0, [pc, #204]	; (8004c10 <HAL_RCC_ClockConfig+0x258>)
 8004b42:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b44:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b46:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8004b4a:	4d32      	ldr	r5, [pc, #200]	; (8004c14 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b4c:	f002 020f 	and.w	r2, r2, #15
 8004b50:	4c31      	ldr	r4, [pc, #196]	; (8004c18 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b52:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b54:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b56:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8004b5a:	4830      	ldr	r0, [pc, #192]	; (8004c1c <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b5c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b60:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8004b62:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8004b64:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b66:	40d3      	lsrs	r3, r2
 8004b68:	6023      	str	r3, [r4, #0]
}
 8004b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8004b6e:	f7fc bcbf 	b.w	80014f0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b72:	07db      	lsls	r3, r3, #31
 8004b74:	d594      	bpl.n	8004aa0 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b76:	4a25      	ldr	r2, [pc, #148]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004b78:	68a1      	ldr	r1, [r4, #8]
 8004b7a:	6993      	ldr	r3, [r2, #24]
 8004b7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b80:	430b      	orrs	r3, r1
 8004b82:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b84:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b86:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b88:	2902      	cmp	r1, #2
 8004b8a:	d034      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b8c:	2903      	cmp	r1, #3
 8004b8e:	d02d      	beq.n	8004bec <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b90:	2901      	cmp	r1, #1
 8004b92:	d035      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b94:	075b      	lsls	r3, r3, #29
 8004b96:	f57f af26 	bpl.w	80049e6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b9a:	4e1c      	ldr	r6, [pc, #112]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ba0:	6933      	ldr	r3, [r6, #16]
 8004ba2:	f023 0307 	bic.w	r3, r3, #7
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8004baa:	f7fc fd03 	bl	80015b4 <HAL_GetTick>
 8004bae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb0:	e004      	b.n	8004bbc <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb2:	f7fc fcff 	bl	80015b4 <HAL_GetTick>
 8004bb6:	1bc0      	subs	r0, r0, r7
 8004bb8:	4540      	cmp	r0, r8
 8004bba:	d81f      	bhi.n	8004bfc <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbc:	6933      	ldr	r3, [r6, #16]
 8004bbe:	6862      	ldr	r2, [r4, #4]
 8004bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bc4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004bc8:	d1f3      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	e75e      	b.n	8004a8c <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bce:	07da      	lsls	r2, r3, #31
 8004bd0:	d4d1      	bmi.n	8004b76 <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004bd2:	4a0e      	ldr	r2, [pc, #56]	; (8004c0c <HAL_RCC_ClockConfig+0x254>)
 8004bd4:	6993      	ldr	r3, [r2, #24]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	428b      	cmp	r3, r1
 8004bdc:	f67f af60 	bls.w	8004aa0 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be0:	6993      	ldr	r3, [r2, #24]
 8004be2:	f023 030f 	bic.w	r3, r3, #15
 8004be6:	4319      	orrs	r1, r3
 8004be8:	6191      	str	r1, [r2, #24]
 8004bea:	e759      	b.n	8004aa0 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bec:	0198      	lsls	r0, r3, #6
 8004bee:	d4d4      	bmi.n	8004b9a <HAL_RCC_ClockConfig+0x1e2>
 8004bf0:	e6f9      	b.n	80049e6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004bf2:	2001      	movs	r0, #1
}
 8004bf4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bf6:	039e      	lsls	r6, r3, #14
 8004bf8:	d4cf      	bmi.n	8004b9a <HAL_RCC_ClockConfig+0x1e2>
 8004bfa:	e6f4      	b.n	80049e6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004bfc:	2003      	movs	r0, #3
 8004bfe:	e6f3      	b.n	80049e8 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c00:	05da      	lsls	r2, r3, #23
 8004c02:	d4ca      	bmi.n	8004b9a <HAL_RCC_ClockConfig+0x1e2>
 8004c04:	e6ef      	b.n	80049e6 <HAL_RCC_ClockConfig+0x2e>
 8004c06:	bf00      	nop
 8004c08:	52002000 	.word	0x52002000
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	08008670 	.word	0x08008670
 8004c14:	24000004 	.word	0x24000004
 8004c18:	24000008 	.word	0x24000008
 8004c1c:	24000010 	.word	0x24000010

08004c20 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c20:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c22:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c24:	6913      	ldr	r3, [r2, #16]
 8004c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d01a      	beq.n	8004c64 <HAL_RCC_GetHCLKFreq+0x44>
 8004c2e:	2b18      	cmp	r3, #24
 8004c30:	d023      	beq.n	8004c7a <HAL_RCC_GetHCLKFreq+0x5a>
 8004c32:	b1cb      	cbz	r3, 8004c68 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8004c34:	4814      	ldr	r0, [pc, #80]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c36:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x64>)
 8004c38:	4914      	ldr	r1, [pc, #80]	; (8004c8c <HAL_RCC_GetHCLKFreq+0x6c>)
 8004c3a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c3c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c3e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c42:	4c13      	ldr	r4, [pc, #76]	; (8004c90 <HAL_RCC_GetHCLKFreq+0x70>)
 8004c44:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c48:	4d12      	ldr	r5, [pc, #72]	; (8004c94 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c4a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c4c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c4e:	f002 021f 	and.w	r2, r2, #31
 8004c52:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c56:	f003 001f 	and.w	r0, r3, #31
 8004c5a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8004c5e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c60:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c64:	480c      	ldr	r0, [pc, #48]	; (8004c98 <HAL_RCC_GetHCLKFreq+0x78>)
 8004c66:	e7e6      	b.n	8004c36 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	069b      	lsls	r3, r3, #26
 8004c6c:	d508      	bpl.n	8004c80 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	480a      	ldr	r0, [pc, #40]	; (8004c9c <HAL_RCC_GetHCLKFreq+0x7c>)
 8004c72:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004c76:	40d0      	lsrs	r0, r2
 8004c78:	e7dd      	b.n	8004c36 <HAL_RCC_GetHCLKFreq+0x16>
 8004c7a:	f7ff facf 	bl	800421c <HAL_RCC_GetSysClockFreq.part.0>
 8004c7e:	e7da      	b.n	8004c36 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c80:	4806      	ldr	r0, [pc, #24]	; (8004c9c <HAL_RCC_GetHCLKFreq+0x7c>)
 8004c82:	e7d8      	b.n	8004c36 <HAL_RCC_GetHCLKFreq+0x16>
 8004c84:	58024400 	.word	0x58024400
 8004c88:	003d0900 	.word	0x003d0900
 8004c8c:	08008670 	.word	0x08008670
 8004c90:	24000008 	.word	0x24000008
 8004c94:	24000004 	.word	0x24000004
 8004c98:	017d7840 	.word	0x017d7840
 8004c9c:	03d09000 	.word	0x03d09000

08004ca0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca0:	4a1c      	ldr	r2, [pc, #112]	; (8004d14 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca4:	6913      	ldr	r3, [r2, #16]
 8004ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d021      	beq.n	8004cf2 <HAL_RCC_GetPCLK1Freq+0x52>
 8004cae:	2b18      	cmp	r3, #24
 8004cb0:	d02b      	beq.n	8004d0a <HAL_RCC_GetPCLK1Freq+0x6a>
 8004cb2:	b303      	cbz	r3, 8004cf6 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8004cb4:	4818      	ldr	r0, [pc, #96]	; (8004d18 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004cb6:	4a17      	ldr	r2, [pc, #92]	; (8004d14 <HAL_RCC_GetPCLK1Freq+0x74>)
 8004cb8:	4918      	ldr	r1, [pc, #96]	; (8004d1c <HAL_RCC_GetPCLK1Freq+0x7c>)
 8004cba:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8004cbc:	4d18      	ldr	r5, [pc, #96]	; (8004d20 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004cbe:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cc2:	4c18      	ldr	r4, [pc, #96]	; (8004d24 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004cc4:	5ccb      	ldrb	r3, [r1, r3]
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cce:	6990      	ldr	r0, [r2, #24]
 8004cd0:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8004cd4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cd6:	5c08      	ldrb	r0, [r1, r0]
 8004cd8:	f000 001f 	and.w	r0, r0, #31
 8004cdc:	40c3      	lsrs	r3, r0
 8004cde:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ce0:	69d2      	ldr	r2, [r2, #28]
 8004ce2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004ce6:	5c88      	ldrb	r0, [r1, r2]
 8004ce8:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004cec:	fa23 f000 	lsr.w	r0, r3, r0
 8004cf0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf2:	480d      	ldr	r0, [pc, #52]	; (8004d28 <HAL_RCC_GetPCLK1Freq+0x88>)
 8004cf4:	e7df      	b.n	8004cb6 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	069b      	lsls	r3, r3, #26
 8004cfa:	d509      	bpl.n	8004d10 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cfc:	6810      	ldr	r0, [r2, #0]
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004d00:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8004d04:	fa23 f000 	lsr.w	r0, r3, r0
 8004d08:	e7d5      	b.n	8004cb6 <HAL_RCC_GetPCLK1Freq+0x16>
 8004d0a:	f7ff fa87 	bl	800421c <HAL_RCC_GetSysClockFreq.part.0>
 8004d0e:	e7d2      	b.n	8004cb6 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d10:	4806      	ldr	r0, [pc, #24]	; (8004d2c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004d12:	e7d0      	b.n	8004cb6 <HAL_RCC_GetPCLK1Freq+0x16>
 8004d14:	58024400 	.word	0x58024400
 8004d18:	003d0900 	.word	0x003d0900
 8004d1c:	08008670 	.word	0x08008670
 8004d20:	24000004 	.word	0x24000004
 8004d24:	24000008 	.word	0x24000008
 8004d28:	017d7840 	.word	0x017d7840
 8004d2c:	03d09000 	.word	0x03d09000

08004d30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d32:	4c3a      	ldr	r4, [pc, #232]	; (8004e1c <RCCEx_PLL2_Config+0xec>)
 8004d34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d067      	beq.n	8004e0e <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	4606      	mov	r6, r0
 8004d42:	460f      	mov	r7, r1
 8004d44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d48:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4a:	f7fc fc33 	bl	80015b4 <HAL_GetTick>
 8004d4e:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d50:	e004      	b.n	8004d5c <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d52:	f7fc fc2f 	bl	80015b4 <HAL_GetTick>
 8004d56:	1b43      	subs	r3, r0, r5
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d856      	bhi.n	8004e0a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	011a      	lsls	r2, r3, #4
 8004d60:	d4f7      	bmi.n	8004d52 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d64:	6832      	ldr	r2, [r6, #0]
 8004d66:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d6a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004d6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d70:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	3a01      	subs	r2, #1
 8004d78:	025b      	lsls	r3, r3, #9
 8004d7a:	0412      	lsls	r2, r2, #16
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004d82:	4313      	orrs	r3, r2
 8004d84:	6872      	ldr	r2, [r6, #4]
 8004d86:	3a01      	subs	r2, #1
 8004d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	6932      	ldr	r2, [r6, #16]
 8004d90:	3a01      	subs	r2, #1
 8004d92:	0612      	lsls	r2, r2, #24
 8004d94:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d9e:	6972      	ldr	r2, [r6, #20]
 8004da0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004da4:	4313      	orrs	r3, r2
 8004da6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004da8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004daa:	69b3      	ldr	r3, [r6, #24]
 8004dac:	f022 0220 	bic.w	r2, r2, #32
 8004db0:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004db2:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004db4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004db6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004db8:	f022 0210 	bic.w	r2, r2, #16
 8004dbc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dbe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004dc0:	69f2      	ldr	r2, [r6, #28]
 8004dc2:	400b      	ands	r3, r1
 8004dc4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004dc8:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004dcc:	f043 0310 	orr.w	r3, r3, #16
 8004dd0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004dd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004dd4:	b1ef      	cbz	r7, 8004e12 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dd6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dd8:	bf0c      	ite	eq
 8004dda:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dde:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8004de2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004de4:	4c0d      	ldr	r4, [pc, #52]	; (8004e1c <RCCEx_PLL2_Config+0xec>)
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dee:	f7fc fbe1 	bl	80015b4 <HAL_GetTick>
 8004df2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004df4:	e004      	b.n	8004e00 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004df6:	f7fc fbdd 	bl	80015b4 <HAL_GetTick>
 8004dfa:	1b40      	subs	r0, r0, r5
 8004dfc:	2802      	cmp	r0, #2
 8004dfe:	d804      	bhi.n	8004e0a <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	d5f7      	bpl.n	8004df6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8004e06:	2000      	movs	r0, #0
}
 8004e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004e0a:	2003      	movs	r0, #3
}
 8004e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004e0e:	2001      	movs	r0, #1
}
 8004e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e18:	e7e4      	b.n	8004de4 <RCCEx_PLL2_Config+0xb4>
 8004e1a:	bf00      	nop
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	ffff0007 	.word	0xffff0007

08004e24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e26:	4c3a      	ldr	r4, [pc, #232]	; (8004f10 <RCCEx_PLL3_Config+0xec>)
 8004e28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d067      	beq.n	8004f02 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e3e:	f7fc fbb9 	bl	80015b4 <HAL_GetTick>
 8004e42:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e44:	e004      	b.n	8004e50 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e46:	f7fc fbb5 	bl	80015b4 <HAL_GetTick>
 8004e4a:	1b43      	subs	r3, r0, r5
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d856      	bhi.n	8004efe <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	009a      	lsls	r2, r3, #2
 8004e54:	d4f7      	bmi.n	8004e46 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e58:	6832      	ldr	r2, [r6, #0]
 8004e5a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004e5e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004e62:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e64:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	3a01      	subs	r2, #1
 8004e6c:	025b      	lsls	r3, r3, #9
 8004e6e:	0412      	lsls	r2, r2, #16
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004e76:	4313      	orrs	r3, r2
 8004e78:	6872      	ldr	r2, [r6, #4]
 8004e7a:	3a01      	subs	r2, #1
 8004e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e80:	4313      	orrs	r3, r2
 8004e82:	6932      	ldr	r2, [r6, #16]
 8004e84:	3a01      	subs	r2, #1
 8004e86:	0612      	lsls	r2, r2, #24
 8004e88:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e92:	6972      	ldr	r2, [r6, #20]
 8004e94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e9e:	69b3      	ldr	r3, [r6, #24]
 8004ea0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ea4:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ea6:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ea8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004eaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eb0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004eb2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004eb4:	69f2      	ldr	r2, [r6, #28]
 8004eb6:	400b      	ands	r3, r1
 8004eb8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004ebc:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ebe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ec6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004ec8:	b1ef      	cbz	r7, 8004f06 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eca:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ecc:	bf0c      	ite	eq
 8004ece:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ed2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ed8:	4c0d      	ldr	r4, [pc, #52]	; (8004f10 <RCCEx_PLL3_Config+0xec>)
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee2:	f7fc fb67 	bl	80015b4 <HAL_GetTick>
 8004ee6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ee8:	e004      	b.n	8004ef4 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004eea:	f7fc fb63 	bl	80015b4 <HAL_GetTick>
 8004eee:	1b40      	subs	r0, r0, r5
 8004ef0:	2802      	cmp	r0, #2
 8004ef2:	d804      	bhi.n	8004efe <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	d5f7      	bpl.n	8004eea <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8004efa:	2000      	movs	r0, #0
}
 8004efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004efe:	2003      	movs	r0, #3
}
 8004f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004f02:	2001      	movs	r0, #1
}
 8004f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f0c:	e7e4      	b.n	8004ed8 <RCCEx_PLL3_Config+0xb4>
 8004f0e:	bf00      	nop
 8004f10:	58024400 	.word	0x58024400
 8004f14:	ffff0007 	.word	0xffff0007

08004f18 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f1c:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8004f20:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f22:	0118      	lsls	r0, r3, #4
 8004f24:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8004f28:	d51c      	bpl.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f2a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004f2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004f30:	f000 8529 	beq.w	8005986 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
 8004f34:	d823      	bhi.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x66>
 8004f36:	2900      	cmp	r1, #0
 8004f38:	f000 8427 	beq.w	800578a <HAL_RCCEx_PeriphCLKConfig+0x872>
 8004f3c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004f40:	d120      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f42:	2102      	movs	r1, #2
 8004f44:	f104 0008 	add.w	r0, r4, #8
 8004f48:	f7ff fef2 	bl	8004d30 <RCCEx_PLL2_Config>
 8004f4c:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8004f4e:	b93e      	cbnz	r6, 8004f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f50:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004f52:	4a96      	ldr	r2, [pc, #600]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004f54:	2600      	movs	r6, #0
 8004f56:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004f58:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f5c:	4319      	orrs	r1, r3
 8004f5e:	6511      	str	r1, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f60:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f64:	05d9      	lsls	r1, r3, #23
 8004f66:	d511      	bpl.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f68:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004f6a:	2904      	cmp	r1, #4
 8004f6c:	f200 858a 	bhi.w	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
 8004f70:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004f74:	051b0514 	.word	0x051b0514
 8004f78:	02e10522 	.word	0x02e10522
 8004f7c:	02e1      	.short	0x02e1
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f7e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8004f82:	d0e6      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f84:	05d9      	lsls	r1, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004f86:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f8a:	d4ed      	bmi.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f8c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f8e:	055f      	lsls	r7, r3, #21
 8004f90:	d51a      	bpl.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004f92:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004f96:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004f9a:	f000 8524 	beq.w	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8004f9e:	f200 80c4 	bhi.w	800512a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004fa2:	2900      	cmp	r1, #0
 8004fa4:	f000 8405 	beq.w	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004fa8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004fac:	f040 80c7 	bne.w	800513e <HAL_RCCEx_PeriphCLKConfig+0x226>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	f104 0008 	add.w	r0, r4, #8
 8004fb6:	f7ff febb 	bl	8004d30 <RCCEx_PLL2_Config>
 8004fba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004fbc:	2d00      	cmp	r5, #0
 8004fbe:	f000 83b8 	beq.w	8005732 <HAL_RCCEx_PeriphCLKConfig+0x81a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004fc2:	462e      	mov	r6, r5
 8004fc4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004fc8:	0518      	lsls	r0, r3, #20
 8004fca:	d51a      	bpl.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xea>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004fcc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004fd0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004fd4:	f000 84f7 	beq.w	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004fd8:	f200 80b4 	bhi.w	8005144 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	f000 83dc 	beq.w	800579a <HAL_RCCEx_PeriphCLKConfig+0x882>
 8004fe2:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8004fe6:	f040 80b7 	bne.w	8005158 <HAL_RCCEx_PeriphCLKConfig+0x240>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fea:	2100      	movs	r1, #0
 8004fec:	f104 0008 	add.w	r0, r4, #8
 8004ff0:	f7ff fe9e 	bl	8004d30 <RCCEx_PLL2_Config>
 8004ff4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004ff6:	2d00      	cmp	r5, #0
 8004ff8:	f000 83b0 	beq.w	800575c <HAL_RCCEx_PeriphCLKConfig+0x844>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ffc:	462e      	mov	r6, r5
 8004ffe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005002:	0199      	lsls	r1, r3, #6
 8005004:	d51a      	bpl.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->OspiClockSelection)
 8005006:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005008:	2920      	cmp	r1, #32
 800500a:	f000 8490 	beq.w	800592e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800500e:	f200 80a6 	bhi.w	800515e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8005012:	b139      	cbz	r1, 8005024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005014:	2910      	cmp	r1, #16
 8005016:	f040 80a5 	bne.w	8005164 <HAL_RCCEx_PeriphCLKConfig+0x24c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501a:	4a64      	ldr	r2, [pc, #400]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800501c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800501e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005022:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005024:	2d00      	cmp	r5, #0
 8005026:	f040 83cf 	bne.w	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800502a:	4a60      	ldr	r2, [pc, #384]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800502c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800502e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005030:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005034:	430b      	orrs	r3, r1
 8005036:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005038:	e9d4 3200 	ldrd	r3, r2, [r4]
 800503c:	04df      	lsls	r7, r3, #19
 800503e:	d519      	bpl.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005040:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005042:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005046:	f000 84c6 	beq.w	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xabe>
 800504a:	f200 808e 	bhi.w	800516a <HAL_RCCEx_PeriphCLKConfig+0x252>
 800504e:	2900      	cmp	r1, #0
 8005050:	f000 83a9 	beq.w	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8005054:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005058:	f040 808f 	bne.w	800517a <HAL_RCCEx_PeriphCLKConfig+0x262>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800505c:	2100      	movs	r1, #0
 800505e:	f104 0008 	add.w	r0, r4, #8
 8005062:	f7ff fe65 	bl	8004d30 <RCCEx_PLL2_Config>
 8005066:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005068:	2d00      	cmp	r5, #0
 800506a:	f000 836d 	beq.w	8005748 <HAL_RCCEx_PeriphCLKConfig+0x830>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800506e:	462e      	mov	r6, r5
 8005070:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005074:	0498      	lsls	r0, r3, #18
 8005076:	d51c      	bpl.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005078:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800507a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800507e:	f000 8442 	beq.w	8005906 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005082:	d87d      	bhi.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8005084:	b149      	cbz	r1, 800509a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005086:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800508a:	f040 8081 	bne.w	8005190 <HAL_RCCEx_PeriphCLKConfig+0x278>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800508e:	2101      	movs	r1, #1
 8005090:	f104 0008 	add.w	r0, r4, #8
 8005094:	f7ff fe4c 	bl	8004d30 <RCCEx_PLL2_Config>
 8005098:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800509a:	2d00      	cmp	r5, #0
 800509c:	f040 83c1 	bne.w	8005822 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80050a0:	4a42      	ldr	r2, [pc, #264]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80050a2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80050a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80050a6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80050aa:	430b      	orrs	r3, r1
 80050ac:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050ae:	e9d4 3200 	ldrd	r3, r2, [r4]
 80050b2:	0459      	lsls	r1, r3, #17
 80050b4:	d51d      	bpl.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch (PeriphClkInit->Spi6ClockSelection)
 80050b6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80050ba:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80050be:	f000 842c 	beq.w	800591a <HAL_RCCEx_PeriphCLKConfig+0xa02>
 80050c2:	d868      	bhi.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 80050c4:	b141      	cbz	r1, 80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80050c6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80050ca:	d16c      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050cc:	2101      	movs	r1, #1
 80050ce:	f104 0008 	add.w	r0, r4, #8
 80050d2:	f7ff fe2d 	bl	8004d30 <RCCEx_PLL2_Config>
 80050d6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80050d8:	2d00      	cmp	r5, #0
 80050da:	f040 839e 	bne.w	800581a <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050de:	4a33      	ldr	r2, [pc, #204]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80050e0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80050e4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050e6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80050ea:	430b      	orrs	r3, r1
 80050ec:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050ee:	e9d4 3200 	ldrd	r3, r2, [r4]
 80050f2:	041f      	lsls	r7, r3, #16
 80050f4:	d50d      	bpl.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->FdcanClockSelection)
 80050f6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80050f8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80050fc:	f000 83de 	beq.w	80058bc <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8005100:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005104:	f000 8233 	beq.w	800556e <HAL_RCCEx_PeriphCLKConfig+0x656>
 8005108:	2900      	cmp	r1, #0
 800510a:	f000 8236 	beq.w	800557a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800510e:	2601      	movs	r6, #1
 8005110:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005112:	01d8      	lsls	r0, r3, #7
 8005114:	d558      	bpl.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    switch (PeriphClkInit->FmcClockSelection)
 8005116:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005118:	2903      	cmp	r1, #3
 800511a:	f200 84bd 	bhi.w	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xb80>
 800511e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005122:	004d      	.short	0x004d
 8005124:	004703d6 	.word	0x004703d6
 8005128:	004d      	.short	0x004d
    switch (PeriphClkInit->Sai4AClockSelection)
 800512a:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 800512e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005132:	f43f af43 	beq.w	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005136:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800513a:	f43f af3f 	beq.w	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800513e:	2601      	movs	r6, #1
 8005140:	4635      	mov	r5, r6
 8005142:	e741      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005144:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8005148:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800514c:	f43f af53 	beq.w	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005150:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8005154:	f43f af4f 	beq.w	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005158:	2601      	movs	r6, #1
 800515a:	4635      	mov	r5, r6
 800515c:	e751      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xea>
    switch (PeriphClkInit->OspiClockSelection)
 800515e:	2930      	cmp	r1, #48	; 0x30
 8005160:	f43f af60 	beq.w	8005024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005164:	2601      	movs	r6, #1
 8005166:	4635      	mov	r5, r6
 8005168:	e768      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Spi123ClockSelection)
 800516a:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800516e:	f43f af7b 	beq.w	8005068 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8005172:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005176:	f43f af77 	beq.w	8005068 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800517a:	2601      	movs	r6, #1
 800517c:	4635      	mov	r5, r6
 800517e:	e779      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005180:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8005184:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8005188:	d087      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x182>
 800518a:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800518e:	d084      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005190:	2601      	movs	r6, #1
 8005192:	4635      	mov	r5, r6
 8005194:	e78d      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005196:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800519a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800519e:	d09b      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80051a0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80051a4:	d098      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80051a6:	2601      	movs	r6, #1
 80051a8:	4635      	mov	r5, r6
 80051aa:	e7a2      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 80051ac:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051b0:	2102      	movs	r1, #2
 80051b2:	f104 0008 	add.w	r0, r4, #8
 80051b6:	f7ff fdbb 	bl	8004d30 <RCCEx_PLL2_Config>
 80051ba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80051bc:	2d00      	cmp	r5, #0
 80051be:	f000 8334 	beq.w	800582a <HAL_RCCEx_PeriphCLKConfig+0x912>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051c2:	462e      	mov	r6, r5
 80051c4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80051c8:	0259      	lsls	r1, r3, #9
 80051ca:	f100 820c 	bmi.w	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80051ce:	07d9      	lsls	r1, r3, #31
 80051d0:	d52f      	bpl.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->Usart16ClockSelection)
 80051d2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80051d4:	2928      	cmp	r1, #40	; 0x28
 80051d6:	d82a      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x316>
 80051d8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80051dc:	002901f8 	.word	0x002901f8
 80051e0:	00290029 	.word	0x00290029
 80051e4:	00290029 	.word	0x00290029
 80051e8:	00290029 	.word	0x00290029
 80051ec:	00290421 	.word	0x00290421
 80051f0:	00290029 	.word	0x00290029
 80051f4:	00290029 	.word	0x00290029
 80051f8:	00290029 	.word	0x00290029
 80051fc:	002901f2 	.word	0x002901f2
 8005200:	00290029 	.word	0x00290029
 8005204:	00290029 	.word	0x00290029
 8005208:	00290029 	.word	0x00290029
 800520c:	002901f8 	.word	0x002901f8
 8005210:	00290029 	.word	0x00290029
 8005214:	00290029 	.word	0x00290029
 8005218:	00290029 	.word	0x00290029
 800521c:	002901f8 	.word	0x002901f8
 8005220:	00290029 	.word	0x00290029
 8005224:	00290029 	.word	0x00290029
 8005228:	00290029 	.word	0x00290029
 800522c:	01f8      	.short	0x01f8
 800522e:	2601      	movs	r6, #1
 8005230:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005232:	079f      	lsls	r7, r3, #30
 8005234:	d517      	bpl.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005236:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005238:	2905      	cmp	r1, #5
 800523a:	f200 8429 	bhi.w	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 800523e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005242:	000c      	.short	0x000c
 8005244:	000603e4 	.word	0x000603e4
 8005248:	000c000c 	.word	0x000c000c
 800524c:	000c      	.short	0x000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800524e:	2101      	movs	r1, #1
 8005250:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005254:	f7ff fde6 	bl	8004e24 <RCCEx_PLL3_Config>
 8005258:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800525a:	2d00      	cmp	r5, #0
 800525c:	f000 82cf 	beq.w	80057fe <HAL_RCCEx_PeriphCLKConfig+0x8e6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005260:	462e      	mov	r6, r5
 8005262:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005266:	0758      	lsls	r0, r3, #29
 8005268:	d518      	bpl.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x384>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800526a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800526e:	2905      	cmp	r1, #5
 8005270:	f200 840b 	bhi.w	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8005274:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005278:	03bf000c 	.word	0x03bf000c
 800527c:	000c0006 	.word	0x000c0006
 8005280:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005284:	2101      	movs	r1, #1
 8005286:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800528a:	f7ff fdcb 	bl	8004e24 <RCCEx_PLL3_Config>
 800528e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005290:	2d00      	cmp	r5, #0
 8005292:	f000 82a9 	beq.w	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005296:	462e      	mov	r6, r5
 8005298:	e9d4 3200 	ldrd	r3, r2, [r4]
 800529c:	0699      	lsls	r1, r3, #26
 800529e:	d51f      	bpl.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80052a0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80052a4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80052a8:	f000 834b 	beq.w	8005942 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80052ac:	f200 810d 	bhi.w	80054ca <HAL_RCCEx_PeriphCLKConfig+0x5b2>
 80052b0:	b149      	cbz	r1, 80052c6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80052b2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80052b6:	f040 8112 	bne.w	80054de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ba:	2100      	movs	r1, #0
 80052bc:	f104 0008 	add.w	r0, r4, #8
 80052c0:	f7ff fd36 	bl	8004d30 <RCCEx_PLL2_Config>
 80052c4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80052c6:	2d00      	cmp	r5, #0
 80052c8:	f040 8286 	bne.w	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052cc:	4ab1      	ldr	r2, [pc, #708]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 80052ce:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80052d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80052d4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80052d8:	430b      	orrs	r3, r1
 80052da:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052dc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80052e0:	065f      	lsls	r7, r3, #25
 80052e2:	d51f      	bpl.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052e4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80052e8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80052ec:	f000 8301 	beq.w	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80052f0:	f200 80f8 	bhi.w	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80052f4:	b149      	cbz	r1, 800530a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80052f6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052fa:	f040 80fd 	bne.w	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052fe:	2100      	movs	r1, #0
 8005300:	f104 0008 	add.w	r0, r4, #8
 8005304:	f7ff fd14 	bl	8004d30 <RCCEx_PLL2_Config>
 8005308:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800530a:	2d00      	cmp	r5, #0
 800530c:	f040 8281 	bne.w	8005812 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005310:	4aa0      	ldr	r2, [pc, #640]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005312:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8005316:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005318:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800531c:	430b      	orrs	r3, r1
 800531e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005320:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005324:	0618      	lsls	r0, r3, #24
 8005326:	d51f      	bpl.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005328:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800532c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005330:	f000 82d5 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 8005334:	f200 80e3 	bhi.w	80054fe <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8005338:	b149      	cbz	r1, 800534e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800533a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800533e:	f040 80e8 	bne.w	8005512 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005342:	2100      	movs	r1, #0
 8005344:	f104 0008 	add.w	r0, r4, #8
 8005348:	f7ff fcf2 	bl	8004d30 <RCCEx_PLL2_Config>
 800534c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800534e:	2d00      	cmp	r5, #0
 8005350:	f040 823e 	bne.w	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005354:	4a8f      	ldr	r2, [pc, #572]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005356:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800535a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800535c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005360:	430b      	orrs	r3, r1
 8005362:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005364:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005368:	0719      	lsls	r1, r3, #28
 800536a:	d50d      	bpl.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x470>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800536c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005370:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005374:	f000 82fb 	beq.w	800596e <HAL_RCCEx_PeriphCLKConfig+0xa56>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005378:	4986      	ldr	r1, [pc, #536]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800537a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800537c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005380:	4313      	orrs	r3, r2
 8005382:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005384:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005388:	06df      	lsls	r7, r3, #27
 800538a:	d50d      	bpl.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x490>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800538c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8005390:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005394:	f000 82df 	beq.w	8005956 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005398:	497e      	ldr	r1, [pc, #504]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800539a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800539c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a0:	4313      	orrs	r3, r2
 80053a2:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053a4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80053a8:	0318      	lsls	r0, r3, #12
 80053aa:	d50e      	bpl.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
    switch (PeriphClkInit->AdcClockSelection)
 80053ac:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80053b0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80053b4:	f000 80c7 	beq.w	8005546 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 80053b8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80053bc:	f000 80c9 	beq.w	8005552 <HAL_RCCEx_PeriphCLKConfig+0x63a>
 80053c0:	2900      	cmp	r1, #0
 80053c2:	f000 8267 	beq.w	8005894 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80053c6:	2601      	movs	r6, #1
 80053c8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053ca:	0359      	lsls	r1, r3, #13
 80053cc:	d50f      	bpl.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    switch (PeriphClkInit->UsbClockSelection)
 80053ce:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80053d2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80053d6:	f000 80df 	beq.w	8005598 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80053da:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80053de:	f000 80e1 	beq.w	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80053e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80053e6:	f000 825e 	beq.w	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 80053ea:	2601      	movs	r6, #1
 80053ec:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80053ee:	03df      	lsls	r7, r3, #15
 80053f0:	d509      	bpl.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    switch (PeriphClkInit->SdmmcClockSelection)
 80053f2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80053f4:	2900      	cmp	r1, #0
 80053f6:	f000 8237 	beq.w	8005868 <HAL_RCCEx_PeriphCLKConfig+0x950>
 80053fa:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80053fe:	f000 81b8 	beq.w	8005772 <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8005402:	2601      	movs	r6, #1
 8005404:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005406:	0098      	lsls	r0, r3, #2
 8005408:	f100 8171 	bmi.w	80056ee <HAL_RCCEx_PeriphCLKConfig+0x7d6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800540c:	0399      	lsls	r1, r3, #14
 800540e:	d50b      	bpl.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x510>
    switch (PeriphClkInit->RngClockSelection)
 8005410:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005412:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005416:	f000 821e 	beq.w	8005856 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800541a:	d97d      	bls.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800541c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005420:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005424:	d07a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005426:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005428:	02df      	lsls	r7, r3, #11
 800542a:	d508      	bpl.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x526>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800542c:	4a59      	ldr	r2, [pc, #356]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800542e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005430:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005432:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005436:	430b      	orrs	r3, r1
 8005438:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800543a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800543e:	029d      	lsls	r5, r3, #10
 8005440:	d508      	bpl.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x53c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005442:	4a54      	ldr	r2, [pc, #336]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005444:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005446:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800544c:	430b      	orrs	r3, r1
 800544e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005450:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005454:	0058      	lsls	r0, r3, #1
 8005456:	d50b      	bpl.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x558>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005458:	4b4e      	ldr	r3, [pc, #312]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005460:	611a      	str	r2, [r3, #16]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8005468:	430a      	orrs	r2, r1
 800546a:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800546c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	da08      	bge.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005474:	4a47      	ldr	r2, [pc, #284]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005476:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005478:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800547a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800547e:	430b      	orrs	r3, r1
 8005480:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005482:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005486:	0219      	lsls	r1, r3, #8
 8005488:	d508      	bpl.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800548a:	4a42      	ldr	r2, [pc, #264]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800548c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005490:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005492:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005496:	430b      	orrs	r3, r1
 8005498:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800549a:	6862      	ldr	r2, [r4, #4]
 800549c:	07d3      	lsls	r3, r2, #31
 800549e:	f100 8101 	bmi.w	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x78c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80054a2:	0797      	lsls	r7, r2, #30
 80054a4:	f100 810b 	bmi.w	80056be <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80054a8:	0755      	lsls	r5, r2, #29
 80054aa:	f100 8115 	bmi.w	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80054ae:	0710      	lsls	r0, r2, #28
 80054b0:	f100 80ed 	bmi.w	800568e <HAL_RCCEx_PeriphCLKConfig+0x776>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80054b4:	06d1      	lsls	r1, r2, #27
 80054b6:	f100 80dc 	bmi.w	8005672 <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80054ba:	0692      	lsls	r2, r2, #26
 80054bc:	f100 8123 	bmi.w	8005706 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    return HAL_OK;
 80054c0:	1e30      	subs	r0, r6, #0
 80054c2:	bf18      	it	ne
 80054c4:	2001      	movne	r0, #1
}
 80054c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 80054ca:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80054ce:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80054d2:	f43f aef8 	beq.w	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80054d6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80054da:	f43f aef4 	beq.w	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80054de:	2601      	movs	r6, #1
 80054e0:	4635      	mov	r5, r6
 80054e2:	e6fd      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054e4:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 80054e8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80054ec:	f43f af0d 	beq.w	800530a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80054f0:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 80054f4:	f43f af09 	beq.w	800530a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80054f8:	2601      	movs	r6, #1
 80054fa:	4635      	mov	r5, r6
 80054fc:	e712      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80054fe:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8005502:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005506:	f43f af22 	beq.w	800534e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800550a:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800550e:	f43f af1e 	beq.w	800534e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005512:	2601      	movs	r6, #1
 8005514:	4635      	mov	r5, r6
 8005516:	e727      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->RngClockSelection)
 8005518:	2900      	cmp	r1, #0
 800551a:	d184      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    if (ret == HAL_OK)
 800551c:	2d00      	cmp	r5, #0
 800551e:	f040 8196 	bne.w	800584e <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005522:	4a1c      	ldr	r2, [pc, #112]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005524:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005526:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552c:	430b      	orrs	r3, r1
 800552e:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005530:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005534:	e778      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x510>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005536:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005538:	2d00      	cmp	r5, #0
 800553a:	f000 80f0 	beq.w	800571e <HAL_RCCEx_PeriphCLKConfig+0x806>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800553e:	462e      	mov	r6, r5
 8005540:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005544:	e523      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005546:	2102      	movs	r1, #2
 8005548:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800554c:	f7ff fc6a 	bl	8004e24 <RCCEx_PLL3_Config>
 8005550:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005552:	2d00      	cmp	r5, #0
 8005554:	f040 8134 	bne.w	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005558:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 800555a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800555e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005560:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005564:	430b      	orrs	r3, r1
 8005566:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005568:	e9d4 3200 	ldrd	r3, r2, [r4]
 800556c:	e72d      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800556e:	2101      	movs	r1, #1
 8005570:	f104 0008 	add.w	r0, r4, #8
 8005574:	f7ff fbdc 	bl	8004d30 <RCCEx_PLL2_Config>
 8005578:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800557a:	2d00      	cmp	r5, #0
 800557c:	f040 8163 	bne.w	8005846 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005580:	4a04      	ldr	r2, [pc, #16]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x67c>)
 8005582:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005584:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005586:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800558a:	430b      	orrs	r3, r1
 800558c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800558e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005592:	e5be      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005594:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005598:	2101      	movs	r1, #1
 800559a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800559e:	f7ff fc41 	bl	8004e24 <RCCEx_PLL3_Config>
 80055a2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	f040 814a 	bne.w	800583e <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055aa:	4ab8      	ldr	r2, [pc, #736]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80055ac:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80055b0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80055b2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80055b6:	430b      	orrs	r3, r1
 80055b8:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80055be:	e716      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x4d6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055c0:	2101      	movs	r1, #1
 80055c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80055c6:	f7ff fc2d 	bl	8004e24 <RCCEx_PLL3_Config>
 80055ca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	f040 8107 	bne.w	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055d2:	4aae      	ldr	r2, [pc, #696]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80055d4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80055d6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80055d8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80055dc:	430b      	orrs	r3, r1
 80055de:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80055e4:	e625      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055e6:	4faa      	ldr	r7, [pc, #680]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ee:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80055f0:	f7fb ffe0 	bl	80015b4 <HAL_GetTick>
 80055f4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055f6:	e006      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f8:	f7fb ffdc 	bl	80015b4 <HAL_GetTick>
 80055fc:	eba0 0008 	sub.w	r0, r0, r8
 8005600:	2864      	cmp	r0, #100	; 0x64
 8005602:	f200 8216 	bhi.w	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	05db      	lsls	r3, r3, #23
 800560a:	d5f5      	bpl.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    if (ret == HAL_OK)
 800560c:	2d00      	cmp	r5, #0
 800560e:	f040 8234 	bne.w	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xb62>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005612:	4b9e      	ldr	r3, [pc, #632]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005614:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8005618:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800561a:	4051      	eors	r1, r2
 800561c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8005620:	d00d      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x726>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005624:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005626:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800562a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800562e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005630:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005632:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005636:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005638:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800563a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800563e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8005642:	f000 81fc 	beq.w	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xb26>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005646:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800564a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800564e:	f000 820a 	beq.w	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8005652:	4a8e      	ldr	r2, [pc, #568]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005654:	6913      	ldr	r3, [r2, #16]
 8005656:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800565a:	6113      	str	r3, [r2, #16]
 800565c:	4a8b      	ldr	r2, [pc, #556]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800565e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005662:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005668:	430b      	orrs	r3, r1
 800566a:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800566c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005670:	e5ad      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005672:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8005676:	2101      	movs	r1, #1
 8005678:	4628      	mov	r0, r5
 800567a:	f7ff fbd3 	bl	8004e24 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800567e:	2800      	cmp	r0, #0
 8005680:	f000 811a 	beq.w	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	069b      	lsls	r3, r3, #26
 8005688:	d546      	bpl.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x800>
 800568a:	4606      	mov	r6, r0
 800568c:	e03d      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800568e:	2100      	movs	r1, #0
 8005690:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005694:	f7ff fbc6 	bl	8004e24 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005698:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800569a:	2800      	cmp	r0, #0
 800569c:	f43f af0a 	beq.w	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80056a0:	4606      	mov	r6, r0
 80056a2:	e707      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056a4:	2100      	movs	r1, #0
 80056a6:	f104 0008 	add.w	r0, r4, #8
 80056aa:	f7ff fb41 	bl	8004d30 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80056ae:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80056b0:	2800      	cmp	r0, #0
 80056b2:	f43f aef6 	beq.w	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80056b6:	0797      	lsls	r7, r2, #30
 80056b8:	4606      	mov	r6, r0
 80056ba:	f57f aef5 	bpl.w	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056be:	2101      	movs	r1, #1
 80056c0:	f104 0008 	add.w	r0, r4, #8
 80056c4:	f7ff fb34 	bl	8004d30 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80056c8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f43f aeec 	beq.w	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x590>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80056d0:	0755      	lsls	r5, r2, #29
 80056d2:	4606      	mov	r6, r0
 80056d4:	f57f aeeb 	bpl.w	80054ae <HAL_RCCEx_PeriphCLKConfig+0x596>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056d8:	2102      	movs	r1, #2
 80056da:	f104 0008 	add.w	r0, r4, #8
 80056de:	f7ff fb27 	bl	8004d30 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80056e2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80056e4:	2800      	cmp	r0, #0
 80056e6:	f43f aee2 	beq.w	80054ae <HAL_RCCEx_PeriphCLKConfig+0x596>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80056ea:	4606      	mov	r6, r0
 80056ec:	e6df      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x596>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056ee:	2102      	movs	r1, #2
 80056f0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80056f4:	f7ff fb96 	bl	8004e24 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056f8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056fc:	2800      	cmp	r0, #0
 80056fe:	f43f ae85 	beq.w	800540c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
      status = HAL_ERROR;
 8005702:	2601      	movs	r6, #1
 8005704:	e682      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005706:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800570a:	2102      	movs	r1, #2
 800570c:	4628      	mov	r0, r5
 800570e:	f7ff fb89 	bl	8004e24 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005712:	2800      	cmp	r0, #0
 8005714:	f43f aed4 	beq.w	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
  return HAL_ERROR;
 8005718:	2001      	movs	r0, #1
}
 800571a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800571e:	4a5b      	ldr	r2, [pc, #364]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005720:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005722:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005724:	f023 0307 	bic.w	r3, r3, #7
 8005728:	430b      	orrs	r3, r1
 800572a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800572c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005730:	e42d      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005732:	4a56      	ldr	r2, [pc, #344]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005734:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005738:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800573a:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800573e:	430b      	orrs	r3, r1
 8005740:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005742:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005746:	e43f      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005748:	4a50      	ldr	r2, [pc, #320]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800574a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800574c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	430b      	orrs	r3, r1
 8005754:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005756:	e9d4 3200 	ldrd	r3, r2, [r4]
 800575a:	e48b      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800575c:	4a4b      	ldr	r2, [pc, #300]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800575e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8005762:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005764:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005768:	430b      	orrs	r3, r1
 800576a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800576c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005770:	e447      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005772:	2102      	movs	r1, #2
 8005774:	f104 0008 	add.w	r0, r4, #8
 8005778:	f7ff fada 	bl	8004d30 <RCCEx_PLL2_Config>
 800577c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800577e:	2d00      	cmp	r5, #0
 8005780:	d079      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x95e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005782:	462e      	mov	r6, r5
 8005784:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005788:	e63d      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800578a:	4a40      	ldr	r2, [pc, #256]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800578c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800578e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005792:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005794:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005796:	f7ff bbdc 	b.w	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800579a:	4a3c      	ldr	r2, [pc, #240]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800579c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800579e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80057a4:	e427      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xde>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a6:	4a39      	ldr	r2, [pc, #228]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80057a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ae:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80057b0:	e45a      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x150>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b2:	4a36      	ldr	r2, [pc, #216]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80057b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ba:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80057bc:	f7ff bbfe 	b.w	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057c4:	462e      	mov	r6, r5
 80057c6:	e600      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80057c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057cc:	462e      	mov	r6, r5
 80057ce:	e435      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x124>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80057d0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057d4:	462e      	mov	r6, r5
 80057d6:	e5c7      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057dc:	462e      	mov	r6, r5
 80057de:	e57f      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80057e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057e4:	462e      	mov	r6, r5
 80057e6:	e524      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057e8:	4a28      	ldr	r2, [pc, #160]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 80057ea:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80057ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80057f0:	f023 0307 	bic.w	r3, r3, #7
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057f8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057fc:	e54e      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x384>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80057fe:	4a23      	ldr	r2, [pc, #140]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005800:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005802:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005804:	f023 0307 	bic.w	r3, r3, #7
 8005808:	430b      	orrs	r3, r1
 800580a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800580c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005810:	e529      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005812:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005816:	462e      	mov	r6, r5
 8005818:	e584      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800581a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800581e:	462e      	mov	r6, r5
 8005820:	e467      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005822:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005826:	462e      	mov	r6, r5
 8005828:	e443      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800582a:	4a18      	ldr	r2, [pc, #96]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800582c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800582e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005830:	f023 0303 	bic.w	r3, r3, #3
 8005834:	430b      	orrs	r3, r1
 8005836:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005838:	e9d4 3200 	ldrd	r3, r2, [r4]
 800583c:	e4c4      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800583e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005842:	462e      	mov	r6, r5
 8005844:	e5d3      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x4d6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005846:	e9d4 3200 	ldrd	r3, r2, [r4]
 800584a:	462e      	mov	r6, r5
 800584c:	e461      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800584e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005852:	462e      	mov	r6, r5
 8005854:	e5e8      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005856:	4a0d      	ldr	r2, [pc, #52]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005858:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800585a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800585e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005860:	2d00      	cmp	r5, #0
 8005862:	f43f ae5e 	beq.w	8005522 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 8005866:	e7f2      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x936>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005868:	4a08      	ldr	r2, [pc, #32]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 800586a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800586c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005870:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005872:	2d00      	cmp	r5, #0
 8005874:	d185      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005876:	4a05      	ldr	r2, [pc, #20]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x974>)
 8005878:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800587a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800587c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005880:	430b      	orrs	r3, r1
 8005882:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005884:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005888:	e5bd      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800588a:	bf00      	nop
 800588c:	58024400 	.word	0x58024400
 8005890:	58024800 	.word	0x58024800
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005894:	f104 0008 	add.w	r0, r4, #8
 8005898:	f7ff fa4a 	bl	8004d30 <RCCEx_PLL2_Config>
 800589c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800589e:	2d00      	cmp	r5, #0
 80058a0:	f43f ae5a 	beq.w	8005558 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80058a4:	e78c      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a6:	4a7e      	ldr	r2, [pc, #504]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
 80058a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80058b0:	2d00      	cmp	r5, #0
 80058b2:	f43f ae7a 	beq.w	80055aa <HAL_RCCEx_PeriphCLKConfig+0x692>
 80058b6:	e7c2      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x926>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058b8:	6862      	ldr	r2, [r4, #4]
 80058ba:	e5fe      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058bc:	4a78      	ldr	r2, [pc, #480]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
 80058be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	f43f ae5a 	beq.w	8005580 <HAL_RCCEx_PeriphCLKConfig+0x668>
 80058cc:	e7bb      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x92e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ce:	4a74      	ldr	r2, [pc, #464]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
 80058d0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80058d8:	2d00      	cmp	r5, #0
 80058da:	d0a6      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x912>
 80058dc:	e471      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058de:	2102      	movs	r1, #2
 80058e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058e4:	f7ff fa9e 	bl	8004e24 <RCCEx_PLL3_Config>
 80058e8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	f43f ad32 	beq.w	8005354 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 80058f0:	e76e      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058f2:	2102      	movs	r1, #2
 80058f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058f8:	f7ff fa94 	bl	8004e24 <RCCEx_PLL3_Config>
 80058fc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80058fe:	2d00      	cmp	r5, #0
 8005900:	f43f ad06 	beq.w	8005310 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005904:	e785      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005906:	2101      	movs	r1, #1
 8005908:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800590c:	f7ff fa8a 	bl	8004e24 <RCCEx_PLL3_Config>
 8005910:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005912:	2d00      	cmp	r5, #0
 8005914:	f43f abc4 	beq.w	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005918:	e783      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800591a:	2101      	movs	r1, #1
 800591c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005920:	f7ff fa80 	bl	8004e24 <RCCEx_PLL3_Config>
 8005924:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005926:	2d00      	cmp	r5, #0
 8005928:	f43f abd9 	beq.w	80050de <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800592c:	e775      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800592e:	2102      	movs	r1, #2
 8005930:	f104 0008 	add.w	r0, r4, #8
 8005934:	f7ff f9fc 	bl	8004d30 <RCCEx_PLL2_Config>
 8005938:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800593a:	2d00      	cmp	r5, #0
 800593c:	f43f ab75 	beq.w	800502a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005940:	e742      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005942:	2102      	movs	r1, #2
 8005944:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005948:	f7ff fa6c 	bl	8004e24 <RCCEx_PLL3_Config>
 800594c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800594e:	2d00      	cmp	r5, #0
 8005950:	f43f acbc 	beq.w	80052cc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8005954:	e740      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005956:	2102      	movs	r1, #2
 8005958:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800595c:	f7ff fa62 	bl	8004e24 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005960:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005964:	2800      	cmp	r0, #0
 8005966:	f43f ad17 	beq.w	8005398 <HAL_RCCEx_PeriphCLKConfig+0x480>
        status = HAL_ERROR;
 800596a:	2601      	movs	r6, #1
 800596c:	e514      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x480>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800596e:	2102      	movs	r1, #2
 8005970:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005974:	f7ff fa56 	bl	8004e24 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005978:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800597c:	2800      	cmp	r0, #0
 800597e:	f43f acfb 	beq.w	8005378 <HAL_RCCEx_PeriphCLKConfig+0x460>
        status = HAL_ERROR;
 8005982:	2601      	movs	r6, #1
 8005984:	e4f8      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x460>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005986:	2102      	movs	r1, #2
 8005988:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800598c:	f7ff fa4a 	bl	8004e24 <RCCEx_PLL3_Config>
 8005990:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8005992:	2e00      	cmp	r6, #0
 8005994:	f43f aadc 	beq.w	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8005998:	f7ff bae2 	b.w	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800599c:	4a40      	ldr	r2, [pc, #256]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
        break;
 800599e:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80059a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059a6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80059a8:	e5c6      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x620>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059aa:	2100      	movs	r1, #0
 80059ac:	f104 0008 	add.w	r0, r4, #8
 80059b0:	f7ff f9be 	bl	8004d30 <RCCEx_PLL2_Config>
 80059b4:	4605      	mov	r5, r0
        break;
 80059b6:	e5bf      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x620>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059b8:	2100      	movs	r1, #0
 80059ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80059be:	f7ff fa31 	bl	8004e24 <RCCEx_PLL3_Config>
 80059c2:	4605      	mov	r5, r0
        break;
 80059c4:	e5b8      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x620>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059c6:	2100      	movs	r1, #0
 80059c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80059cc:	f7ff fa2a 	bl	8004e24 <RCCEx_PLL3_Config>
 80059d0:	4605      	mov	r5, r0
        break;
 80059d2:	f7ff bb10 	b.w	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xde>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059d6:	2100      	movs	r1, #0
 80059d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80059dc:	f7ff fa22 	bl	8004e24 <RCCEx_PLL3_Config>
 80059e0:	4605      	mov	r5, r0
        break;
 80059e2:	f7ff bb41 	b.w	8005068 <HAL_RCCEx_PeriphCLKConfig+0x150>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059e6:	2100      	movs	r1, #0
 80059e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80059ec:	f7ff fa1a 	bl	8004e24 <RCCEx_PLL3_Config>
 80059f0:	4605      	mov	r5, r0
        break;
 80059f2:	f7ff bae3 	b.w	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059f6:	2101      	movs	r1, #1
 80059f8:	f104 0008 	add.w	r0, r4, #8
 80059fc:	f7ff f998 	bl	8004d30 <RCCEx_PLL2_Config>
 8005a00:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005a02:	2d00      	cmp	r5, #0
 8005a04:	f43f aef0 	beq.w	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8005a08:	e445      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	f104 0008 	add.w	r0, r4, #8
 8005a10:	f7ff f98e 	bl	8004d30 <RCCEx_PLL2_Config>
 8005a14:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	f43f aef1 	beq.w	80057fe <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8005a1c:	e420      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x348>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a1e:	2101      	movs	r1, #1
 8005a20:	f104 0008 	add.w	r0, r4, #8
 8005a24:	f7ff f984 	bl	8004d30 <RCCEx_PLL2_Config>
 8005a28:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005a2a:	2d00      	cmp	r5, #0
 8005a2c:	f43f add1 	beq.w	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8005a30:	e6d6      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
            ret = HAL_TIMEOUT;
 8005a32:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a34:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 8005a38:	4635      	mov	r5, r6
 8005a3a:	f7ff bbc8 	b.w	80051ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        tickstart = HAL_GetTick();
 8005a3e:	f7fb fdb9 	bl	80015b4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a42:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
        tickstart = HAL_GetTick();
 8005a46:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a48:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a4c:	e004      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xb40>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a4e:	f7fb fdb1 	bl	80015b4 <HAL_GetTick>
 8005a52:	1bc0      	subs	r0, r0, r7
 8005a54:	4548      	cmp	r0, r9
 8005a56:	d8ec      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a58:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8005a5c:	0798      	lsls	r0, r3, #30
 8005a5e:	d5f6      	bpl.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xb36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a60:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8005a64:	e5ef      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x72e>
 8005a66:	490e      	ldr	r1, [pc, #56]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xb88>)
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xb8c>)
 8005a6a:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8005a6e:	690a      	ldr	r2, [r1, #16]
 8005a70:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8005a74:	4313      	orrs	r3, r2
 8005a76:	610b      	str	r3, [r1, #16]
 8005a78:	e5f0      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x744>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a7a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005a7e:	462e      	mov	r6, r5
 8005a80:	f7ff bba5 	b.w	80051ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a84:	2601      	movs	r6, #1
 8005a86:	f7ff ba81 	b.w	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005a8a:	2601      	movs	r6, #1
 8005a8c:	4635      	mov	r5, r6
 8005a8e:	e405      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x384>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a90:	2601      	movs	r6, #1
 8005a92:	4635      	mov	r5, r6
 8005a94:	f7ff bbe7 	b.w	8005266 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch (PeriphClkInit->FmcClockSelection)
 8005a98:	2601      	movs	r6, #1
 8005a9a:	4635      	mov	r5, r6
 8005a9c:	f7ff bb94 	b.w	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	00ffffcf 	.word	0x00ffffcf

08005aa8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aa8:	4b4f      	ldr	r3, [pc, #316]	; (8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8005aaa:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aac:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005aae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ab0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8005ab2:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005ab6:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005aba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8005abc:	d05c      	beq.n	8005b78 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005abe:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ac2:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ac6:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005aca:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005ace:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005ad0:	ee07 4a90 	vmov	s15, r4
 8005ad4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005ad8:	d003      	beq.n	8005ae2 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8005ada:	2902      	cmp	r1, #2
 8005adc:	d075      	beq.n	8005bca <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8005ade:	2900      	cmp	r1, #0
 8005ae0:	d04f      	beq.n	8005b82 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ae2:	ee07 2a90 	vmov	s15, r2
 8005ae6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005af4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afc:	ee06 3a90 	vmov	s13, r3
 8005b00:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005b04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005b08:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005b0c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005b10:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b14:	4a34      	ldr	r2, [pc, #208]	; (8005be8 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8005b16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005b1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005b1c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005b20:	ee07 3a10 	vmov	s14, r3
 8005b24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005b28:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b2a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b36:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b3a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005b3c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005b40:	ee07 3a10 	vmov	s14, r3
 8005b44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005b48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b54:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b58:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005b5a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b66:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b6e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005b72:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005b76:	4770      	bx	lr
 8005b78:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b7a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b7e:	6082      	str	r2, [r0, #8]
}
 8005b80:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	0689      	lsls	r1, r1, #26
 8005b86:	d527      	bpl.n	8005bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b88:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b8a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b8e:	4919      	ldr	r1, [pc, #100]	; (8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b90:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b96:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b9e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ba6:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ba8:	ee06 3a90 	vmov	s13, r3
 8005bac:	ee05 1a90 	vmov	s11, r1
 8005bb0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005bb4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005bb8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005bbc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005bc0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005bc4:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005bc8:	e7a4      	b.n	8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bca:	ee07 2a90 	vmov	s15, r2
 8005bce:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8005bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bd6:	e78a      	b.n	8005aee <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bd8:	ee07 2a90 	vmov	s15, r2
 8005bdc:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005bfc <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8005be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be4:	e783      	b.n	8005aee <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005be6:	bf00      	nop
 8005be8:	58024400 	.word	0x58024400
 8005bec:	4a742400 	.word	0x4a742400
 8005bf0:	39000000 	.word	0x39000000
 8005bf4:	03d09000 	.word	0x03d09000
 8005bf8:	4bbebc20 	.word	0x4bbebc20
 8005bfc:	4c742400 	.word	0x4c742400

08005c00 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c00:	4b4f      	ldr	r3, [pc, #316]	; (8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8005c02:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c04:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005c06:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c08:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8005c0a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005c0e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c12:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8005c14:	d05c      	beq.n	8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c16:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005c1a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c1e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c22:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005c26:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005c28:	ee07 4a90 	vmov	s15, r4
 8005c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005c30:	d003      	beq.n	8005c3a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8005c32:	2902      	cmp	r1, #2
 8005c34:	d075      	beq.n	8005d22 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8005c36:	2900      	cmp	r1, #0
 8005c38:	d04f      	beq.n	8005cda <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c3a:	ee07 2a90 	vmov	s15, r2
 8005c3e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8005c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005c4c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c54:	ee06 3a90 	vmov	s13, r3
 8005c58:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005c5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005c60:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005c64:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005c68:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c6c:	4a34      	ldr	r2, [pc, #208]	; (8005d40 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8005c6e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005c72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005c74:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005c78:	ee07 3a10 	vmov	s14, r3
 8005c7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005c80:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c82:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c8e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005c92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005c94:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005c98:	ee07 3a10 	vmov	s14, r3
 8005c9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ca0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cac:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005cb0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005cb2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cbe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005cca:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005cce:	4770      	bx	lr
 8005cd0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005cd2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005cd6:	6082      	str	r2, [r0, #8]
}
 8005cd8:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cda:	6819      	ldr	r1, [r3, #0]
 8005cdc:	0689      	lsls	r1, r1, #26
 8005cde:	d527      	bpl.n	8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ce0:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ce2:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ce6:	4919      	ldr	r1, [pc, #100]	; (8005d4c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ce8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cee:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cf6:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005d48 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cfe:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d00:	ee06 3a90 	vmov	s13, r3
 8005d04:	ee05 1a90 	vmov	s11, r1
 8005d08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005d0c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005d10:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005d14:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005d18:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005d1c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005d20:	e7a4      	b.n	8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d22:	ee07 2a90 	vmov	s15, r2
 8005d26:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005d50 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8005d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d2e:	e78a      	b.n	8005c46 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d30:	ee07 2a90 	vmov	s15, r2
 8005d34:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8005d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d3c:	e783      	b.n	8005c46 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8005d3e:	bf00      	nop
 8005d40:	58024400 	.word	0x58024400
 8005d44:	4a742400 	.word	0x4a742400
 8005d48:	39000000 	.word	0x39000000
 8005d4c:	03d09000 	.word	0x03d09000
 8005d50:	4bbebc20 	.word	0x4bbebc20
 8005d54:	4c742400 	.word	0x4c742400

08005d58 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d58:	4b4f      	ldr	r3, [pc, #316]	; (8005e98 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8005d5a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d5c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005d5e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005d60:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8005d62:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005d66:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d6a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8005d6c:	d05c      	beq.n	8005e28 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d6e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005d72:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d76:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d7a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005d7e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d80:	ee07 4a90 	vmov	s15, r4
 8005d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005d88:	d07e      	beq.n	8005e88 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8005d8a:	2902      	cmp	r1, #2
 8005d8c:	d075      	beq.n	8005e7a <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	d04f      	beq.n	8005e32 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d92:	ee07 2a90 	vmov	s15, r2
 8005d96:	eddf 6a41 	vldr	s13, [pc, #260]	; 8005e9c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8005da4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8005da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dac:	ee06 3a90 	vmov	s13, r3
 8005db0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005db4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005db8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005dbc:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005dc0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005dc4:	4a34      	ldr	r2, [pc, #208]	; (8005e98 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8005dc6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005dca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005dcc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005dd0:	ee07 3a10 	vmov	s14, r3
 8005dd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005dd8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005dda:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de6:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005dea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005dec:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005df0:	ee07 3a10 	vmov	s14, r3
 8005df4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005df8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e04:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005e08:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005e0a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e16:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005e22:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8005e26:	4770      	bx	lr
 8005e28:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e2a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e2e:	6082      	str	r2, [r0, #8]
}
 8005e30:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e32:	6819      	ldr	r1, [r3, #0]
 8005e34:	0689      	lsls	r1, r1, #26
 8005e36:	d5ac      	bpl.n	8005d92 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e38:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e3a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e3e:	4919      	ldr	r1, [pc, #100]	; (8005ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e40:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e46:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e4e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8005e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e56:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e58:	ee06 3a90 	vmov	s13, r3
 8005e5c:	ee05 1a90 	vmov	s11, r1
 8005e60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005e64:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005e68:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005e6c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005e70:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005e74:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005e78:	e7a4      	b.n	8005dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e7a:	ee07 2a90 	vmov	s15, r2
 8005e7e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8005e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e86:	e78a      	b.n	8005d9e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e88:	ee07 2a90 	vmov	s15, r2
 8005e8c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005eac <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8005e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e94:	e783      	b.n	8005d9e <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8005e96:	bf00      	nop
 8005e98:	58024400 	.word	0x58024400
 8005e9c:	4c742400 	.word	0x4c742400
 8005ea0:	39000000 	.word	0x39000000
 8005ea4:	03d09000 	.word	0x03d09000
 8005ea8:	4bbebc20 	.word	0x4bbebc20
 8005eac:	4a742400 	.word	0x4a742400

08005eb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005eb0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8005eb4:	430b      	orrs	r3, r1
{
 8005eb6:	b500      	push	{lr}
 8005eb8:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005eba:	d076      	beq.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005ebc:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	d035      	beq.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005ec4:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	f000 80ca 	beq.w	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005ece:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	d07c      	beq.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005ed6:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8005eda:	430b      	orrs	r3, r1
 8005edc:	f000 80d7 	beq.w	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005ee0:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	f000 8130 	beq.w	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005eea:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	f000 8144 	beq.w	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005ef4:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	f000 8107 	beq.w	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005efe:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8005f02:	ea50 0301 	orrs.w	r3, r0, r1
 8005f06:	d13a      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005f08:	4b97      	ldr	r3, [pc, #604]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8005f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f14:	f000 8082 	beq.w	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f1c:	f000 815e 	beq.w	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8005f20:	bb6b      	cbnz	r3, 8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f22:	4b91      	ldr	r3, [pc, #580]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005f2a:	d03b      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          frequency = HSE_VALUE;
 8005f2c:	488f      	ldr	r0, [pc, #572]	; (800616c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f2e:	e039      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005f30:	4a8d      	ldr	r2, [pc, #564]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f32:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005f34:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8005f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f3c:	f000 808c 	beq.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005f40:	d921      	bls.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8005f42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f46:	d02c      	beq.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005f48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f4c:	d117      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f4e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f50:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f56:	0749      	lsls	r1, r1, #29
 8005f58:	d502      	bpl.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 80c9 	beq.w	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f60:	4a81      	ldr	r2, [pc, #516]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f62:	6812      	ldr	r2, [r2, #0]
 8005f64:	05d0      	lsls	r0, r2, #23
 8005f66:	d503      	bpl.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8005f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f6c:	f000 80cc 	beq.w	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f70:	4a7d      	ldr	r2, [pc, #500]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	0391      	lsls	r1, r2, #14
 8005f76:	d502      	bpl.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8005f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f7c:	d0d6      	beq.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    switch (srcclk)
 8005f7e:	2000      	movs	r0, #0
}
 8005f80:	b005      	add	sp, #20
 8005f82:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d03f      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005f8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f8e:	d1f6      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f90:	6810      	ldr	r0, [r2, #0]
 8005f92:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005f96:	d005      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f98:	a801      	add	r0, sp, #4
 8005f9a:	f7ff fd85 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f9e:	9801      	ldr	r0, [sp, #4]
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005fa2:	4873      	ldr	r0, [pc, #460]	; (8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8005fa4:	b005      	add	sp, #20
 8005fa6:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005faa:	4b6f      	ldr	r3, [pc, #444]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fae:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d8e3      	bhi.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	0800601d 	.word	0x0800601d
 8005fc0:	08006029 	.word	0x08006029
 8005fc4:	08006039 	.word	0x08006039
 8005fc8:	08005fa3 	.word	0x08005fa3
 8005fcc:	08006035 	.word	0x08006035
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005fd0:	4a65      	ldr	r2, [pc, #404]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005fd2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005fd4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8005fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fdc:	d03c      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005fde:	d935      	bls.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8005fe0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fe4:	d0dd      	beq.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fea:	d1c8      	bne.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fee:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ff4:	0752      	lsls	r2, r2, #29
 8005ff6:	d5b3      	bpl.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1b1      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ffc:	4b5a      	ldr	r3, [pc, #360]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ffe:	485d      	ldr	r0, [pc, #372]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006006:	40d8      	lsrs	r0, r3
 8006008:	e7cc      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800600a:	6810      	ldr	r0, [r2, #0]
 800600c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006010:	d0c8      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006012:	a801      	add	r0, sp, #4
 8006014:	f7ff fea0 	bl	8005d58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006018:	9802      	ldr	r0, [sp, #8]
 800601a:	e7c3      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800601c:	4b52      	ldr	r3, [pc, #328]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8006024:	d0be      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006026:	e7f4      	b.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006028:	4b4f      	ldr	r3, [pc, #316]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006030:	d0b8      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006032:	e7b1      	b.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006034:	4a4c      	ldr	r2, [pc, #304]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006036:	e78a      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006038:	4b4b      	ldr	r3, [pc, #300]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006040:	d0b0      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006042:	a801      	add	r0, sp, #4
 8006044:	f7ff fddc 	bl	8005c00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006048:	9801      	ldr	r0, [sp, #4]
 800604a:	e7ab      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    switch (srcclk)
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0dc      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8006050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006054:	d09c      	beq.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006056:	e792      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006058:	6810      	ldr	r0, [r2, #0]
 800605a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800605e:	d0a1      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006060:	e7ef      	b.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006062:	4a41      	ldr	r2, [pc, #260]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006064:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006066:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800606a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800606e:	d0f3      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8006070:	d805      	bhi.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0c9      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8006076:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800607a:	d089      	beq.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800607c:	e77f      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 800607e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006082:	d08e      	beq.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006084:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006088:	f43f af61 	beq.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800608c:	e777      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800608e:	4a36      	ldr	r2, [pc, #216]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006090:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006092:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8006096:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800609a:	d025      	beq.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800609c:	d80f      	bhi.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800609e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a2:	d048      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 80060a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060a8:	d116      	bne.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060aa:	6810      	ldr	r0, [r2, #0]
 80060ac:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80060b0:	f43f af78 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060b4:	a801      	add	r0, sp, #4
 80060b6:	f7ff fda3 	bl	8005c00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060ba:	9802      	ldr	r0, [sp, #8]
 80060bc:	e772      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    switch (srcclk)
 80060be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060c2:	d01c      	beq.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
 80060c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060c8:	f47f af59 	bne.w	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060cc:	6810      	ldr	r0, [r2, #0]
 80060ce:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80060d2:	f43f af67 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80060d6:	e729      	b.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    switch (srcclk)
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f47f af50 	bne.w	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
}
 80060de:	b005      	add	sp, #20
 80060e0:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7fe bddc 	b.w	8004ca0 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060e8:	6810      	ldr	r0, [r2, #0]
 80060ea:	f010 0004 	ands.w	r0, r0, #4
 80060ee:	f43f af59 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060f2:	6813      	ldr	r3, [r2, #0]
 80060f4:	481f      	ldr	r0, [pc, #124]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80060f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80060fa:	40d8      	lsrs	r0, r3
 80060fc:	e752      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80060fe:	6810      	ldr	r0, [r2, #0]
 8006100:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8006104:	f43f af4e 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          frequency = CSI_VALUE;
 8006108:	481b      	ldr	r0, [pc, #108]	; (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800610a:	e74b      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800610c:	4a16      	ldr	r2, [pc, #88]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800610e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006110:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8006114:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006118:	d067      	beq.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800611a:	d83e      	bhi.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800611c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006120:	d05c      	beq.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006126:	d140      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006130:	f43f af38 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006134:	e7be      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006136:	6810      	ldr	r0, [r2, #0]
 8006138:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800613c:	f43f af32 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006140:	a801      	add	r0, sp, #4
 8006142:	f7ff fcb1 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006146:	9802      	ldr	r0, [sp, #8]
 8006148:	e72c      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800614a:	4a07      	ldr	r2, [pc, #28]	; (8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800614c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800614e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8006152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006156:	d037      	beq.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800615c:	f43f af46 	beq.w	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8006160:	2b00      	cmp	r3, #0
 8006162:	f47f af0c 	bne.w	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8006166:	e713      	b.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006168:	58024400 	.word	0x58024400
 800616c:	017d7840 	.word	0x017d7840
 8006170:	00bb8000 	.word	0x00bb8000
 8006174:	03d09000 	.word	0x03d09000
 8006178:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800617c:	4b21      	ldr	r3, [pc, #132]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800617e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8006180:	03d2      	lsls	r2, r2, #15
 8006182:	f57f af4c 	bpl.w	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800618c:	f43f af0a 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006190:	a801      	add	r0, sp, #4
 8006192:	f7ff fc89 	bl	8005aa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006196:	9803      	ldr	r0, [sp, #12]
 8006198:	e704      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
    switch (srcclk)
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619e:	d02a      	beq.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80061a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061a4:	f43f aebd 	beq.w	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80061a8:	e6e9      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f47f aee7 	bne.w	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80061b0:	f7fe fd36 	bl	8004c20 <HAL_RCC_GetHCLKFreq>
 80061b4:	4b13      	ldr	r3, [pc, #76]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80061b6:	4a14      	ldr	r2, [pc, #80]	; (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80061be:	5cd3      	ldrb	r3, [r2, r3]
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	40d8      	lsrs	r0, r3
        break;
 80061c6:	e6ed      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061c8:	6810      	ldr	r0, [r2, #0]
 80061ca:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80061ce:	f43f aee9 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061d2:	a801      	add	r0, sp, #4
 80061d4:	f7ff fd14 	bl	8005c00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80061d8:	9803      	ldr	r0, [sp, #12]
 80061da:	e6e3      	b.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061dc:	4b09      	ldr	r3, [pc, #36]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80061e4:	f43f aede 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80061e8:	e7aa      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061ea:	6810      	ldr	r0, [r2, #0]
 80061ec:	f010 0004 	ands.w	r0, r0, #4
 80061f0:	f43f aed8 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80061f4:	e702      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061f6:	4b03      	ldr	r3, [pc, #12]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80061fe:	f43f aed1 	beq.w	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006202:	e781      	b.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006204:	58024400 	.word	0x58024400
 8006208:	08008670 	.word	0x08008670

0800620c <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800620c:	2800      	cmp	r0, #0
 800620e:	d063      	beq.n	80062d8 <HAL_RNG_Init+0xcc>
{
 8006210:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006212:	7a43      	ldrb	r3, [r0, #9]
 8006214:	4604      	mov	r4, r0
 8006216:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800621a:	2b00      	cmp	r3, #0
 800621c:	d052      	beq.n	80062c4 <HAL_RNG_Init+0xb8>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800621e:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8006220:	2202      	movs	r2, #2

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8006222:	4b2e      	ldr	r3, [pc, #184]	; (80062dc <HAL_RNG_Init+0xd0>)
  hrng->State = HAL_RNG_STATE_BUSY;
 8006224:	7262      	strb	r2, [r4, #9]
  __HAL_RNG_DISABLE(hrng);
 8006226:	680a      	ldr	r2, [r1, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8006228:	482d      	ldr	r0, [pc, #180]	; (80062e0 <HAL_RNG_Init+0xd4>)
  __HAL_RNG_DISABLE(hrng);
 800622a:	f022 0204 	bic.w	r2, r2, #4
 800622e:	600a      	str	r2, [r1, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8006230:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006234:	6815      	ldr	r5, [r2, #0]
 8006236:	402b      	ands	r3, r5
 8006238:	430b      	orrs	r3, r1
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800623a:	f247 2174 	movw	r1, #29300	; 0x7274
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800623e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006242:	6013      	str	r3, [r2, #0]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	6118      	str	r0, [r3, #16]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	6119      	str	r1, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800624c:	6822      	ldr	r2, [r4, #0]
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006254:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006256:	f7fb f9ad 	bl	80015b4 <HAL_GetTick>

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800625a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800625c:	4605      	mov	r5, r0
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	0051      	lsls	r1, r2, #1
 8006262:	d50d      	bpl.n	8006280 <HAL_RNG_Init+0x74>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006264:	f7fb f9a6 	bl	80015b4 <HAL_GetTick>
 8006268:	1b40      	subs	r0, r0, r5
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800626a:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800626c:	2802      	cmp	r0, #2
 800626e:	d9f6      	bls.n	800625e <HAL_RNG_Init+0x52>
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	0052      	lsls	r2, r2, #1
 8006274:	d5f3      	bpl.n	800625e <HAL_RNG_Init+0x52>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8006276:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006278:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 800627a:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800627c:	60e3      	str	r3, [r4, #12]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800627e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_RNG_ENABLE(hrng);
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	f042 0204 	orr.w	r2, r2, #4
 8006286:	601a      	str	r2, [r3, #0]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	0658      	lsls	r0, r3, #25
 800628e:	d503      	bpl.n	8006298 <HAL_RNG_Init+0x8c>
    hrng->State = HAL_RNG_STATE_ERROR;
 8006290:	2304      	movs	r3, #4
    return HAL_ERROR;
 8006292:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8006294:	7263      	strb	r3, [r4, #9]
}
 8006296:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8006298:	f7fb f98c 	bl	80015b4 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800629c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800629e:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	0759      	lsls	r1, r3, #29
 80062a4:	d512      	bpl.n	80062cc <HAL_RNG_Init+0xc0>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80062a6:	f7fb f985 	bl	80015b4 <HAL_GetTick>
 80062aa:	1b40      	subs	r0, r0, r5
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80062ac:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80062ae:	2802      	cmp	r0, #2
 80062b0:	d9f6      	bls.n	80062a0 <HAL_RNG_Init+0x94>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	0752      	lsls	r2, r2, #29
 80062b6:	d5f3      	bpl.n	80062a0 <HAL_RNG_Init+0x94>
        hrng->State = HAL_RNG_STATE_ERROR;
 80062b8:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80062ba:	2302      	movs	r3, #2
        return HAL_ERROR;
 80062bc:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 80062be:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80062c0:	60e3      	str	r3, [r4, #12]
}
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80062c4:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 80062c6:	f7fa fec7 	bl	8001058 <HAL_RNG_MspInit>
 80062ca:	e7a8      	b.n	800621e <HAL_RNG_Init+0x12>
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062cc:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 80062ce:	2201      	movs	r2, #1
  return HAL_OK;
 80062d0:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 80062d2:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062d4:	60e3      	str	r3, [r4, #12]
}
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80062d8:	2001      	movs	r0, #1
}
 80062da:	4770      	bx	lr
 80062dc:	bfffffdf 	.word	0xbfffffdf
 80062e0:	17590abc 	.word	0x17590abc

080062e4 <HAL_RNG_ErrorCallback>:
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop

080062e8 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 80062e8:	b510      	push	{r4, lr}
  __IO uint32_t count = 0U;
 80062ea:	2300      	movs	r3, #0
{
 80062ec:	b082      	sub	sp, #8
 80062ee:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 80062f0:	9301      	str	r3, [sp, #4]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 80062f2:	6803      	ldr	r3, [r0, #0]
 80062f4:	6859      	ldr	r1, [r3, #4]
 80062f6:	074c      	lsls	r4, r1, #29
 80062f8:	d40a      	bmi.n	8006310 <RNG_RecoverSeedError+0x28>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80062fa:	6859      	ldr	r1, [r3, #4]
 80062fc:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006300:	6059      	str	r1, [r3, #4]
        return HAL_ERROR;
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8006302:	68d3      	ldr	r3, [r2, #12]
  return HAL_OK;
 8006304:	2000      	movs	r0, #0
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8006306:	f023 0308 	bic.w	r3, r3, #8
 800630a:	60d3      	str	r3, [r2, #12]
}
 800630c:	b002      	add	sp, #8
 800630e:	bd10      	pop	{r4, pc}
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8006310:	6819      	ldr	r1, [r3, #0]
    count = RNG_TIMEOUT_VALUE;
 8006312:	2002      	movs	r0, #2
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8006314:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006318:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800631a:	6811      	ldr	r1, [r2, #0]
 800631c:	680b      	ldr	r3, [r1, #0]
 800631e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006322:	600b      	str	r3, [r1, #0]
    count = RNG_TIMEOUT_VALUE;
 8006324:	9001      	str	r0, [sp, #4]
 8006326:	e003      	b.n	8006330 <RNG_RecoverSeedError+0x48>
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 8006328:	6813      	ldr	r3, [r2, #0]
 800632a:	6819      	ldr	r1, [r3, #0]
 800632c:	0048      	lsls	r0, r1, #1
 800632e:	d512      	bpl.n	8006356 <RNG_RecoverSeedError+0x6e>
      count-- ;
 8006330:	9b01      	ldr	r3, [sp, #4]
 8006332:	3b01      	subs	r3, #1
 8006334:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8006336:	9b01      	ldr	r3, [sp, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f5      	bne.n	8006328 <RNG_RecoverSeedError+0x40>
        hrng->State = HAL_RNG_STATE_READY;
 800633c:	2401      	movs	r4, #1
        __HAL_UNLOCK(hrng);
 800633e:	7213      	strb	r3, [r2, #8]
        HAL_RNG_ErrorCallback(hrng);
 8006340:	4610      	mov	r0, r2
        hrng->State = HAL_RNG_STATE_READY;
 8006342:	7254      	strb	r4, [r2, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8006344:	68d3      	ldr	r3, [r2, #12]
 8006346:	f043 0302 	orr.w	r3, r3, #2
 800634a:	60d3      	str	r3, [r2, #12]
        HAL_RNG_ErrorCallback(hrng);
 800634c:	f7ff ffca 	bl	80062e4 <HAL_RNG_ErrorCallback>
        return HAL_ERROR;
 8006350:	4620      	mov	r0, r4
}
 8006352:	b002      	add	sp, #8
 8006354:	bd10      	pop	{r4, pc}
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006356:	6859      	ldr	r1, [r3, #4]
 8006358:	0649      	lsls	r1, r1, #25
 800635a:	d40d      	bmi.n	8006378 <RNG_RecoverSeedError+0x90>
    count = RNG_TIMEOUT_VALUE;
 800635c:	2302      	movs	r3, #2
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	e003      	b.n	800636a <RNG_RecoverSeedError+0x82>
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 8006362:	6813      	ldr	r3, [r2, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	075b      	lsls	r3, r3, #29
 8006368:	d5cb      	bpl.n	8006302 <RNG_RecoverSeedError+0x1a>
      count-- ;
 800636a:	9b01      	ldr	r3, [sp, #4]
 800636c:	3b01      	subs	r3, #1
 800636e:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8006370:	9b01      	ldr	r3, [sp, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1f5      	bne.n	8006362 <RNG_RecoverSeedError+0x7a>
 8006376:	e7e1      	b.n	800633c <RNG_RecoverSeedError+0x54>
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8006378:	6859      	ldr	r1, [r3, #4]
 800637a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800637e:	6059      	str	r1, [r3, #4]
 8006380:	e7ec      	b.n	800635c <RNG_RecoverSeedError+0x74>
 8006382:	bf00      	nop

08006384 <HAL_RNG_GenerateRandomNumber>:
{
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrng);
 8006386:	7a03      	ldrb	r3, [r0, #8]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d041      	beq.n	8006410 <HAL_RNG_GenerateRandomNumber+0x8c>
 800638c:	2501      	movs	r5, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 800638e:	7a43      	ldrb	r3, [r0, #9]
 8006390:	4604      	mov	r4, r0
 8006392:	42ab      	cmp	r3, r5
  __HAL_LOCK(hrng);
 8006394:	7205      	strb	r5, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8006396:	d005      	beq.n	80063a4 <HAL_RNG_GenerateRandomNumber+0x20>
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006398:	2304      	movs	r3, #4
 800639a:	60c3      	str	r3, [r0, #12]
  __HAL_UNLOCK(hrng);
 800639c:	2300      	movs	r3, #0
 800639e:	7223      	strb	r3, [r4, #8]
}
 80063a0:	4628      	mov	r0, r5
 80063a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80063a4:	2202      	movs	r2, #2
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80063a6:	6803      	ldr	r3, [r0, #0]
 80063a8:	460f      	mov	r7, r1
    hrng->State = HAL_RNG_STATE_BUSY;
 80063aa:	7242      	strb	r2, [r0, #9]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80063ac:	685d      	ldr	r5, [r3, #4]
 80063ae:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80063b2:	d116      	bne.n	80063e2 <HAL_RNG_GenerateRandomNumber+0x5e>
    tickstart = HAL_GetTick();
 80063b4:	f7fb f8fe 	bl	80015b4 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80063b8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80063ba:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	07d0      	lsls	r0, r2, #31
 80063c0:	d417      	bmi.n	80063f2 <HAL_RNG_GenerateRandomNumber+0x6e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80063c2:	f7fb f8f7 	bl	80015b4 <HAL_GetTick>
 80063c6:	1b83      	subs	r3, r0, r6
 80063c8:	2b02      	cmp	r3, #2
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80063ca:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80063cc:	d9f6      	bls.n	80063bc <HAL_RNG_GenerateRandomNumber+0x38>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	f012 0201 	ands.w	r2, r2, #1
 80063d4:	d1f2      	bne.n	80063bc <HAL_RNG_GenerateRandomNumber+0x38>
          hrng->State = HAL_RNG_STATE_READY;
 80063d6:	2501      	movs	r5, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80063d8:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 80063da:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 80063dc:	7265      	strb	r5, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80063de:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 80063e0:	e7de      	b.n	80063a0 <HAL_RNG_GenerateRandomNumber+0x1c>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80063e2:	2308      	movs	r3, #8
 80063e4:	60c3      	str	r3, [r0, #12]
      status = RNG_RecoverSeedError(hrng);
 80063e6:	f7ff ff7f 	bl	80062e8 <RNG_RecoverSeedError>
      if (status == HAL_ERROR)
 80063ea:	2801      	cmp	r0, #1
      status = RNG_RecoverSeedError(hrng);
 80063ec:	4605      	mov	r5, r0
      if (status == HAL_ERROR)
 80063ee:	d1e1      	bne.n	80063b4 <HAL_RNG_GenerateRandomNumber+0x30>
 80063f0:	e7d6      	b.n	80063a0 <HAL_RNG_GenerateRandomNumber+0x1c>
    hrng->RandomNumber = hrng->Instance->DR;
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	6122      	str	r2, [r4, #16]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	0649      	lsls	r1, r1, #25
 80063fa:	d50c      	bpl.n	8006416 <HAL_RNG_GenerateRandomNumber+0x92>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80063fc:	2208      	movs	r2, #8
      status = HAL_ERROR;
 80063fe:	2501      	movs	r5, #1
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8006400:	60e2      	str	r2, [r4, #12]
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	f022 0201 	bic.w	r2, r2, #1
 8006408:	605a      	str	r2, [r3, #4]
    hrng->State = HAL_RNG_STATE_READY;
 800640a:	2301      	movs	r3, #1
 800640c:	7263      	strb	r3, [r4, #9]
 800640e:	e7c5      	b.n	800639c <HAL_RNG_GenerateRandomNumber+0x18>
  __HAL_LOCK(hrng);
 8006410:	2502      	movs	r5, #2
}
 8006412:	4628      	mov	r0, r5
 8006414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *random32bit = hrng->RandomNumber;
 8006416:	603a      	str	r2, [r7, #0]
 8006418:	e7f7      	b.n	800640a <HAL_RNG_GenerateRandomNumber+0x86>
 800641a:	bf00      	nop

0800641c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800641c:	6802      	ldr	r2, [r0, #0]
{
 800641e:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8006420:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006422:	6991      	ldr	r1, [r2, #24]
 8006424:	f041 0108 	orr.w	r1, r1, #8
 8006428:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800642a:	6801      	ldr	r1, [r0, #0]
 800642c:	698a      	ldr	r2, [r1, #24]
 800642e:	f042 0210 	orr.w	r2, r2, #16
 8006432:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006434:	6801      	ldr	r1, [r0, #0]
 8006436:	680a      	ldr	r2, [r1, #0]
 8006438:	f022 0201 	bic.w	r2, r2, #1
 800643c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800643e:	6801      	ldr	r1, [r0, #0]
 8006440:	4a27      	ldr	r2, [pc, #156]	; (80064e0 <SPI_CloseTransfer+0xc4>)
 8006442:	690c      	ldr	r4, [r1, #16]
 8006444:	4022      	ands	r2, r4
 8006446:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006448:	6801      	ldr	r1, [r0, #0]
 800644a:	688a      	ldr	r2, [r1, #8]
 800644c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006450:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006452:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006456:	2a04      	cmp	r2, #4
 8006458:	d001      	beq.n	800645e <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800645a:	069c      	lsls	r4, r3, #26
 800645c:	d433      	bmi.n	80064c6 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800645e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8006462:	2a03      	cmp	r2, #3
 8006464:	d001      	beq.n	800646a <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006466:	0659      	lsls	r1, r3, #25
 8006468:	d421      	bmi.n	80064ae <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800646a:	059a      	lsls	r2, r3, #22
 800646c:	d50a      	bpl.n	8006484 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800646e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006472:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006474:	f042 0201 	orr.w	r2, r2, #1
 8006478:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800647c:	698a      	ldr	r2, [r1, #24]
 800647e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006482:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006484:	05db      	lsls	r3, r3, #23
 8006486:	d50a      	bpl.n	800649e <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006488:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800648c:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800648e:	f043 0308 	orr.w	r3, r3, #8
 8006492:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006496:	6993      	ldr	r3, [r2, #24]
 8006498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800649c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800649e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 80064a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 80064a4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80064a8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 80064ac:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80064ae:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b2:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80064b4:	f042 0204 	orr.w	r2, r2, #4
 80064b8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064bc:	698a      	ldr	r2, [r1, #24]
 80064be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c2:	618a      	str	r2, [r1, #24]
 80064c4:	e7d1      	b.n	800646a <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80064c6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80064ca:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80064cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064d0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80064d4:	698a      	ldr	r2, [r1, #24]
 80064d6:	f042 0220 	orr.w	r2, r2, #32
 80064da:	618a      	str	r2, [r1, #24]
 80064dc:	e7bf      	b.n	800645e <SPI_CloseTransfer+0x42>
 80064de:	bf00      	nop
 80064e0:	fffffc90 	.word	0xfffffc90

080064e4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80064e4:	2800      	cmp	r0, #0
 80064e6:	f000 80be 	beq.w	8006666 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80064ea:	4a62      	ldr	r2, [pc, #392]	; (8006674 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ec:	2100      	movs	r1, #0
{
 80064ee:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80064f0:	6803      	ldr	r3, [r0, #0]
 80064f2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f4:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d015      	beq.n	8006526 <HAL_SPI_Init+0x42>
 80064fa:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 80064fe:	4293      	cmp	r3, r2
 8006500:	d011      	beq.n	8006526 <HAL_SPI_Init+0x42>
 8006502:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006506:	4293      	cmp	r3, r2
 8006508:	68c2      	ldr	r2, [r0, #12]
 800650a:	f000 80a5 	beq.w	8006658 <HAL_SPI_Init+0x174>
 800650e:	2a0f      	cmp	r2, #15
 8006510:	d807      	bhi.n	8006522 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006512:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006514:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006516:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8006518:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800651a:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800651e:	2a08      	cmp	r2, #8
 8006520:	d914      	bls.n	800654c <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 8006522:	2001      	movs	r0, #1
}
 8006524:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 8006526:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006528:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800652a:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800652c:	4d51      	ldr	r5, [pc, #324]	; (8006674 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800652e:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
 8006530:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006532:	4951      	ldr	r1, [pc, #324]	; (8006678 <HAL_SPI_Init+0x194>)
 8006534:	428b      	cmp	r3, r1
 8006536:	bf18      	it	ne
 8006538:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
 800653a:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800653e:	d003      	beq.n	8006548 <HAL_SPI_Init+0x64>
 8006540:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006544:	428b      	cmp	r3, r1
 8006546:	d101      	bne.n	800654c <HAL_SPI_Init+0x68>
 8006548:	2a10      	cmp	r2, #16
 800654a:	d8ea      	bhi.n	8006522 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800654c:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006550:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8006554:	2a00      	cmp	r2, #0
 8006556:	d078      	beq.n	800664a <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006558:	2202      	movs	r2, #2
 800655a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	f022 0201 	bic.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006566:	6822      	ldr	r2, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006568:	69a0      	ldr	r0, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800656a:	6891      	ldr	r1, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800656c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8006570:	6863      	ldr	r3, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006572:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006576:	d058      	beq.n	800662a <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006578:	0258      	lsls	r0, r3, #9
 800657a:	d502      	bpl.n	8006582 <HAL_SPI_Init+0x9e>
 800657c:	68e3      	ldr	r3, [r4, #12]
 800657e:	2b06      	cmp	r3, #6
 8006580:	d84c      	bhi.n	800661c <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006582:	6813      	ldr	r3, [r2, #0]
 8006584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006588:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800658a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800658c:	69e3      	ldr	r3, [r4, #28]
 800658e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006590:	432b      	orrs	r3, r5
 8006592:	6822      	ldr	r2, [r4, #0]
 8006594:	4303      	orrs	r3, r0
 8006596:	68e0      	ldr	r0, [r4, #12]
 8006598:	4303      	orrs	r3, r0
 800659a:	430b      	orrs	r3, r1
 800659c:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800659e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80065a0:	69a0      	ldr	r0, [r4, #24]
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 80065a8:	432b      	orrs	r3, r5
 80065aa:	430b      	orrs	r3, r1
 80065ac:	6921      	ldr	r1, [r4, #16]
 80065ae:	4303      	orrs	r3, r0
 80065b0:	6960      	ldr	r0, [r4, #20]
 80065b2:	430b      	orrs	r3, r1
 80065b4:	6a21      	ldr	r1, [r4, #32]
 80065b6:	4303      	orrs	r3, r0
 80065b8:	6860      	ldr	r0, [r4, #4]
 80065ba:	430b      	orrs	r3, r1
 80065bc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80065be:	4303      	orrs	r3, r0
 80065c0:	68a0      	ldr	r0, [r4, #8]
 80065c2:	430b      	orrs	r3, r1
 80065c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80065c6:	4303      	orrs	r3, r0
 80065c8:	430b      	orrs	r3, r1
 80065ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80065cc:	430b      	orrs	r3, r1
 80065ce:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80065d0:	6863      	ldr	r3, [r4, #4]
 80065d2:	b96b      	cbnz	r3, 80065f0 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80065d4:	6822      	ldr	r2, [r4, #0]
 80065d6:	6893      	ldr	r3, [r2, #8]
 80065d8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80065dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065e0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80065e2:	6822      	ldr	r2, [r4, #0]
 80065e4:	6893      	ldr	r3, [r2, #8]
 80065e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065ee:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80065fa:	6863      	ldr	r3, [r4, #4]
 80065fc:	025b      	lsls	r3, r3, #9
 80065fe:	d506      	bpl.n	800660e <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006600:	6822      	ldr	r2, [r4, #0]
 8006602:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006604:	68d3      	ldr	r3, [r2, #12]
 8006606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800660a:	430b      	orrs	r3, r1
 800660c:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800660e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006610:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006612:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006616:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800661a:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800661c:	6813      	ldr	r3, [r2, #0]
 800661e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006624:	4303      	orrs	r3, r0
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	e7af      	b.n	800658a <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800662a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800662e:	d01c      	beq.n	800666a <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1a1      	bne.n	8006578 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006634:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800663a:	d1a2      	bne.n	8006582 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800663c:	6813      	ldr	r3, [r2, #0]
 800663e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006642:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006644:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006648:	e796      	b.n	8006578 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800664a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800664c:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006650:	f7fa fd30 	bl	80010b4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	e77f      	b.n	8006558 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006658:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800665a:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800665c:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800665e:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 8006660:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006664:	e770      	b.n	8006548 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 8006666:	2001      	movs	r0, #1
}
 8006668:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800666a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0e5      	beq.n	800663c <HAL_SPI_Init+0x158>
 8006670:	e784      	b.n	800657c <HAL_SPI_Init+0x98>
 8006672:	bf00      	nop
 8006674:	40013000 	.word	0x40013000
 8006678:	40003800 	.word	0x40003800

0800667c <HAL_SPI_Transmit_DMA>:
{
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800667e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006682:	2b01      	cmp	r3, #1
 8006684:	f000 80a4 	beq.w	80067d0 <HAL_SPI_Transmit_DMA+0x154>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006688:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800668c:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800668e:	2201      	movs	r2, #1
 8006690:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006692:	b2de      	uxtb	r6, r3
 8006694:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 8006696:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800669a:	d174      	bne.n	8006786 <HAL_SPI_Transmit_DMA+0x10a>
  if ((pData == NULL) || (Size == 0UL))
 800669c:	2900      	cmp	r1, #0
 800669e:	d06d      	beq.n	800677c <HAL_SPI_Transmit_DMA+0x100>
 80066a0:	fab5 f385 	clz	r3, r5
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	2d00      	cmp	r5, #0
 80066a8:	d068      	beq.n	800677c <HAL_SPI_Transmit_DMA+0x100>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066aa:	6882      	ldr	r2, [r0, #8]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066ac:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066ae:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b0:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->TxXferSize  = Size;
 80066b4:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066b8:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_TX(hspi);
 80066bc:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066be:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 80066c2:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->TxXferCount = Size;
 80066c4:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferSize  = (uint16_t)0UL;
 80066c8:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80066cc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 80066d0:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d4:	d077      	beq.n	80067c6 <HAL_SPI_Transmit_DMA+0x14a>
    SPI_2LINES_TX(hspi);
 80066d6:	68d3      	ldr	r3, [r2, #12]
 80066d8:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 80066dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e0:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80066e2:	68e3      	ldr	r3, [r4, #12]
 80066e4:	2b0f      	cmp	r3, #15
 80066e6:	d954      	bls.n	8006792 <HAL_SPI_Transmit_DMA+0x116>
 80066e8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80066ea:	699a      	ldr	r2, [r3, #24]
 80066ec:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80066f0:	d144      	bne.n	800677c <HAL_SPI_Transmit_DMA+0x100>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80066f2:	4a48      	ldr	r2, [pc, #288]	; (8006814 <HAL_SPI_Transmit_DMA+0x198>)
  hspi->hdmatx->XferAbortCallback = NULL;
 80066f4:	2700      	movs	r7, #0
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80066f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80066f8:	4a47      	ldr	r2, [pc, #284]	; (8006818 <HAL_SPI_Transmit_DMA+0x19c>)
 80066fa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80066fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80066fe:	4a47      	ldr	r2, [pc, #284]	; (800681c <HAL_SPI_Transmit_DMA+0x1a0>)
 8006700:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006702:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8006704:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006706:	651f      	str	r7, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	6893      	ldr	r3, [r2, #8]
 800670c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006710:	6093      	str	r3, [r2, #8]
                                 hspi->TxXferCount))
 8006712:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8006716:	6822      	ldr	r2, [r4, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800671c:	3220      	adds	r2, #32
 800671e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006720:	f7fc fbb6 	bl	8002e90 <HAL_DMA_Start_IT>
 8006724:	2800      	cmp	r0, #0
 8006726:	d156      	bne.n	80067d6 <HAL_SPI_Transmit_DMA+0x15a>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006728:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800672a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800672c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800672e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006734:	4b3a      	ldr	r3, [pc, #232]	; (8006820 <HAL_SPI_Transmit_DMA+0x1a4>)
 8006736:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800673a:	bf18      	it	ne
 800673c:	432b      	orrne	r3, r5
 800673e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	6893      	ldr	r3, [r2, #8]
 8006744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006748:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	6913      	ldr	r3, [r2, #16]
 800674e:	f443 7348 	orr.w	r3, r3, #800	; 0x320
 8006752:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	f043 0301 	orr.w	r3, r3, #1
 800675c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800675e:	6863      	ldr	r3, [r4, #4]
 8006760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006764:	d104      	bne.n	8006770 <HAL_SPI_Transmit_DMA+0xf4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006766:	6822      	ldr	r2, [r4, #0]
 8006768:	6813      	ldr	r3, [r2, #0]
 800676a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800676e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8006770:	2300      	movs	r3, #0
  return errorcode;
 8006772:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 8006774:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006778:	4630      	mov	r0, r6
 800677a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800677c:	2300      	movs	r3, #0
 800677e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006782:	4630      	mov	r0, r6
 8006784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8006786:	2300      	movs	r3, #0
    return errorcode;
 8006788:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800678a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800678e:	4630      	mov	r0, r6
 8006790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006792:	2b07      	cmp	r3, #7
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006794:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006796:	699a      	ldr	r2, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006798:	d829      	bhi.n	80067ee <HAL_SPI_Transmit_DMA+0x172>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800679a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800679e:	d107      	bne.n	80067b0 <HAL_SPI_Transmit_DMA+0x134>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80067a0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80067a4:	b292      	uxth	r2, r2
 80067a6:	3201      	adds	r2, #1
 80067a8:	0852      	lsrs	r2, r2, #1
 80067aa:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80067ae:	699a      	ldr	r2, [r3, #24]
 80067b0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80067b4:	d19d      	bne.n	80066f2 <HAL_SPI_Transmit_DMA+0x76>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80067b6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80067ba:	b292      	uxth	r2, r2
 80067bc:	3203      	adds	r2, #3
 80067be:	0892      	lsrs	r2, r2, #2
 80067c0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 80067c4:	e795      	b.n	80066f2 <HAL_SPI_Transmit_DMA+0x76>
    SPI_1LINE_TX(hspi);
 80067c6:	6813      	ldr	r3, [r2, #0]
 80067c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e788      	b.n	80066e2 <HAL_SPI_Transmit_DMA+0x66>
  __HAL_LOCK(hspi);
 80067d0:	2602      	movs	r6, #2
}
 80067d2:	4630      	mov	r0, r6
 80067d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80067da:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 80067dc:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067e0:	f043 0310 	orr.w	r3, r3, #16
 80067e4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80067e8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 80067ec:	e7c9      	b.n	8006782 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80067ee:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80067f2:	d006      	beq.n	8006802 <HAL_SPI_Transmit_DMA+0x186>
 80067f4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80067f8:	d1c0      	bne.n	800677c <HAL_SPI_Transmit_DMA+0x100>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80067fa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80067fe:	f47f af78 	bne.w	80066f2 <HAL_SPI_Transmit_DMA+0x76>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006802:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8006806:	b292      	uxth	r2, r2
 8006808:	3201      	adds	r2, #1
 800680a:	0852      	lsrs	r2, r2, #1
 800680c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 8006810:	e76f      	b.n	80066f2 <HAL_SPI_Transmit_DMA+0x76>
 8006812:	bf00      	nop
 8006814:	08006a41 	.word	0x08006a41
 8006818:	080069e9 	.word	0x080069e9
 800681c:	08006a5d 	.word	0x08006a5d
 8006820:	ffff0000 	.word	0xffff0000

08006824 <HAL_SPI_Receive_DMA>:
{
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8006826:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800682a:	2b01      	cmp	r3, #1
 800682c:	f000 80a9 	beq.w	8006982 <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006830:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006834:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 8006836:	2201      	movs	r2, #1
 8006838:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800683a:	b2de      	uxtb	r6, r3
 800683c:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800683e:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 8006842:	f040 8093 	bne.w	800696c <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 8006846:	2900      	cmp	r1, #0
 8006848:	f000 808b 	beq.w	8006962 <HAL_SPI_Receive_DMA+0x13e>
 800684c:	fab5 f385 	clz	r3, r5
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	2d00      	cmp	r5, #0
 8006854:	f000 8085 	beq.w	8006962 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006858:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800685a:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800685c:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800685e:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 8006862:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006866:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800686a:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800686c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006870:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 8006874:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006878:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800687c:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006880:	d07a      	beq.n	8006978 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 8006882:	68d3      	ldr	r3, [r2, #12]
 8006884:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8006888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800688c:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800688e:	68e3      	ldr	r3, [r4, #12]
 8006890:	2b0f      	cmp	r3, #15
 8006892:	d861      	bhi.n	8006958 <HAL_SPI_Receive_DMA+0x134>
 8006894:	2b07      	cmp	r3, #7
 8006896:	f200 8092 	bhi.w	80069be <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	6893      	ldr	r3, [r2, #8]
 800689e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068a2:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80068a4:	68e3      	ldr	r3, [r4, #12]
 80068a6:	2b07      	cmp	r3, #7
 80068a8:	d86e      	bhi.n	8006988 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068aa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80068b2:	d107      	bne.n	80068c4 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80068b4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80068b8:	b292      	uxth	r2, r2
 80068ba:	3201      	adds	r2, #1
 80068bc:	0852      	lsrs	r2, r2, #1
 80068be:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80068c2:	699a      	ldr	r2, [r3, #24]
 80068c4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80068c8:	d106      	bne.n	80068d8 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80068ca:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80068ce:	b292      	uxth	r2, r2
 80068d0:	3203      	adds	r2, #3
 80068d2:	0892      	lsrs	r2, r2, #2
 80068d4:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80068d8:	4a3e      	ldr	r2, [pc, #248]	; (80069d4 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 80068da:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80068dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80068de:	4a3e      	ldr	r2, [pc, #248]	; (80069d8 <HAL_SPI_Receive_DMA+0x1b4>)
 80068e0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80068e4:	4a3d      	ldr	r2, [pc, #244]	; (80069dc <HAL_SPI_Receive_DMA+0x1b8>)
 80068e6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 80068ea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068ec:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 80068ee:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80068f2:	6821      	ldr	r1, [r4, #0]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068f8:	3130      	adds	r1, #48	; 0x30
 80068fa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80068fc:	f7fc fac8 	bl	8002e90 <HAL_DMA_Start_IT>
 8006900:	2800      	cmp	r0, #0
 8006902:	d150      	bne.n	80069a6 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006904:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006906:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006908:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800690a:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800690c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006910:	4b33      	ldr	r3, [pc, #204]	; (80069e0 <HAL_SPI_Receive_DMA+0x1bc>)
 8006912:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006916:	bf18      	it	ne
 8006918:	432b      	orrne	r3, r5
 800691a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	6893      	ldr	r3, [r2, #8]
 8006920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006924:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006926:	6822      	ldr	r2, [r4, #0]
 8006928:	6913      	ldr	r3, [r2, #16]
 800692a:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800692e:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8006930:	6822      	ldr	r2, [r4, #0]
 8006932:	6813      	ldr	r3, [r2, #0]
 8006934:	f043 0301 	orr.w	r3, r3, #1
 8006938:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800693a:	6863      	ldr	r3, [r4, #4]
 800693c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006940:	d104      	bne.n	800694c <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	6813      	ldr	r3, [r2, #0]
 8006946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800694a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800694c:	2300      	movs	r3, #0
  return errorcode;
 800694e:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 8006950:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006954:	4630      	mov	r0, r6
 8006956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006958:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006960:	d09b      	beq.n	800689a <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 8006962:	2300      	movs	r3, #0
 8006964:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006968:	4630      	mov	r0, r6
 800696a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800696c:	2300      	movs	r3, #0
    return errorcode;
 800696e:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 8006970:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 8006974:	4630      	mov	r0, r6
 8006976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 8006978:	6813      	ldr	r3, [r2, #0]
 800697a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	e785      	b.n	800688e <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 8006982:	2602      	movs	r6, #2
}
 8006984:	4630      	mov	r0, r6
 8006986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006988:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800698a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800698c:	d8a4      	bhi.n	80068d8 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800698e:	699a      	ldr	r2, [r3, #24]
 8006990:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006994:	d1a0      	bne.n	80068d8 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006996:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800699a:	b292      	uxth	r2, r2
 800699c:	3201      	adds	r2, #1
 800699e:	0852      	lsrs	r2, r2, #1
 80069a0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 80069a4:	e798      	b.n	80068d8 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80069aa:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 80069ac:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069b0:	f043 0310 	orr.w	r3, r3, #16
 80069b4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80069b8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 80069bc:	e7d4      	b.n	8006968 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80069be:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c6:	f43f af68 	beq.w	800689a <HAL_SPI_Receive_DMA+0x76>
 80069ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ce:	d1c8      	bne.n	8006962 <HAL_SPI_Receive_DMA+0x13e>
 80069d0:	e763      	b.n	800689a <HAL_SPI_Receive_DMA+0x76>
 80069d2:	bf00      	nop
 80069d4:	08006a4d 	.word	0x08006a4d
 80069d8:	08006a11 	.word	0x08006a11
 80069dc:	08006a5d 	.word	0x08006a5d
 80069e0:	ffff0000 	.word	0xffff0000

080069e4 <HAL_SPI_TxCpltCallback>:
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop

080069e8 <SPI_DMATransmitCplt>:
{
 80069e8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80069ec:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80069f0:	2b07      	cmp	r3, #7
 80069f2:	d009      	beq.n	8006a08 <SPI_DMATransmitCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80069f4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069fc:	d005      	beq.n	8006a0a <SPI_DMATransmitCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80069fe:	6802      	ldr	r2, [r0, #0]
 8006a00:	6913      	ldr	r3, [r2, #16]
 8006a02:	f043 0308 	orr.w	r3, r3, #8
 8006a06:	6113      	str	r3, [r2, #16]
}
 8006a08:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 8006a0a:	f7ff ffeb 	bl	80069e4 <HAL_SPI_TxCpltCallback>
}
 8006a0e:	bd08      	pop	{r3, pc}

08006a10 <SPI_DMAReceiveCplt>:
{
 8006a10:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a12:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006a14:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006a18:	2b07      	cmp	r3, #7
 8006a1a:	d009      	beq.n	8006a30 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006a1c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a24:	d005      	beq.n	8006a32 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006a26:	6802      	ldr	r2, [r0, #0]
 8006a28:	6913      	ldr	r3, [r2, #16]
 8006a2a:	f043 0308 	orr.w	r3, r3, #8
 8006a2e:	6113      	str	r3, [r2, #16]
}
 8006a30:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8006a32:	f7fa fa07 	bl	8000e44 <HAL_SPI_RxCpltCallback>
}
 8006a36:	bd08      	pop	{r3, pc}

08006a38 <HAL_SPI_TxRxCpltCallback>:
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop

08006a3c <HAL_SPI_TxHalfCpltCallback>:
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop

08006a40 <SPI_DMAHalfTransmitCplt>:
{
 8006a40:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006a42:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006a44:	f7ff fffa 	bl	8006a3c <HAL_SPI_TxHalfCpltCallback>
}
 8006a48:	bd08      	pop	{r3, pc}
 8006a4a:	bf00      	nop

08006a4c <SPI_DMAHalfReceiveCplt>:
{
 8006a4c:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006a4e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006a50:	f7fa fa16 	bl	8000e80 <HAL_SPI_RxHalfCpltCallback>
}
 8006a54:	bd08      	pop	{r3, pc}
 8006a56:	bf00      	nop

08006a58 <HAL_SPI_ErrorCallback>:
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop

08006a5c <SPI_DMAError>:
{
 8006a5c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a5e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006a60:	f7fd fa76 	bl	8003f50 <HAL_DMA_GetError>
 8006a64:	2802      	cmp	r0, #2
 8006a66:	d100      	bne.n	8006a6a <SPI_DMAError+0xe>
}
 8006a68:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 8006a6a:	6822      	ldr	r2, [r4, #0]
 8006a6c:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006a6e:	6991      	ldr	r1, [r2, #24]
 8006a70:	f041 0108 	orr.w	r1, r1, #8
 8006a74:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006a76:	6821      	ldr	r1, [r4, #0]
 8006a78:	698a      	ldr	r2, [r1, #24]
 8006a7a:	f042 0210 	orr.w	r2, r2, #16
 8006a7e:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 8006a80:	6821      	ldr	r1, [r4, #0]
 8006a82:	680a      	ldr	r2, [r1, #0]
 8006a84:	f022 0201 	bic.w	r2, r2, #1
 8006a88:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a8a:	6821      	ldr	r1, [r4, #0]
 8006a8c:	4a2c      	ldr	r2, [pc, #176]	; (8006b40 <SPI_DMAError+0xe4>)
 8006a8e:	6908      	ldr	r0, [r1, #16]
 8006a90:	4002      	ands	r2, r0
 8006a92:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a94:	6821      	ldr	r1, [r4, #0]
 8006a96:	688a      	ldr	r2, [r1, #8]
 8006a98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a9c:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a9e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006aa2:	2a04      	cmp	r2, #4
 8006aa4:	d001      	beq.n	8006aaa <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006aa6:	0698      	lsls	r0, r3, #26
 8006aa8:	d43d      	bmi.n	8006b26 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006aaa:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006aae:	2a03      	cmp	r2, #3
 8006ab0:	d001      	beq.n	8006ab6 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006ab2:	0659      	lsls	r1, r3, #25
 8006ab4:	d42b      	bmi.n	8006b0e <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006ab6:	059a      	lsls	r2, r3, #22
 8006ab8:	d50a      	bpl.n	8006ad0 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006aba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006abe:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006ac0:	f042 0201 	orr.w	r2, r2, #1
 8006ac4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ac8:	698a      	ldr	r2, [r1, #24]
 8006aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ace:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006ad0:	05db      	lsls	r3, r3, #23
 8006ad2:	d50a      	bpl.n	8006aea <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ad4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ad8:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ada:	f043 0308 	orr.w	r3, r3, #8
 8006ade:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ae2:	6993      	ldr	r3, [r2, #24]
 8006ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae8:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8006aea:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8006aec:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 8006aee:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8006af0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006af4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006af8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006afc:	f043 0310 	orr.w	r3, r3, #16
 8006b00:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006b04:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8006b08:	f7ff ffa6 	bl	8006a58 <HAL_SPI_ErrorCallback>
}
 8006b0c:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b0e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b12:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b14:	f042 0204 	orr.w	r2, r2, #4
 8006b18:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b1c:	698a      	ldr	r2, [r1, #24]
 8006b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b22:	618a      	str	r2, [r1, #24]
 8006b24:	e7c7      	b.n	8006ab6 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b26:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b2a:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006b2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b30:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006b34:	698a      	ldr	r2, [r1, #24]
 8006b36:	f042 0220 	orr.w	r2, r2, #32
 8006b3a:	618a      	str	r2, [r1, #24]
 8006b3c:	e7b5      	b.n	8006aaa <SPI_DMAError+0x4e>
 8006b3e:	bf00      	nop
 8006b40:	fffffc90 	.word	0xfffffc90

08006b44 <SPI_DMAAbortOnError>:
{
 8006b44:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 8006b46:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b48:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006b50:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006b54:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006b58:	f7ff ff7e 	bl	8006a58 <HAL_SPI_ErrorCallback>
}
 8006b5c:	bd08      	pop	{r3, pc}
 8006b5e:	bf00      	nop

08006b60 <HAL_SPI_SuspendCallback>:
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop

08006b64 <HAL_SPI_IRQHandler>:
{
 8006b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 8006b68:	6802      	ldr	r2, [r0, #0]
{
 8006b6a:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006b6c:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006b6e:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006b70:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 8006b72:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 8006b76:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006b7a:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 8006b7c:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006b7e:	d502      	bpl.n	8006b86 <HAL_SPI_IRQHandler+0x22>
 8006b80:	0709      	lsls	r1, r1, #28
 8006b82:	f100 80e2 	bmi.w	8006d4a <HAL_SPI_IRQHandler+0x1e6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006b86:	f005 0364 	and.w	r3, r5, #100	; 0x64
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d045      	beq.n	8006c1a <HAL_SPI_IRQHandler+0xb6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006b8e:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d04b      	beq.n	8006c2e <HAL_SPI_IRQHandler+0xca>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006b96:	f005 0326 	and.w	r3, r5, #38	; 0x26
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	f000 80ec 	beq.w	8006d78 <HAL_SPI_IRQHandler+0x214>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006ba0:	072b      	lsls	r3, r5, #28
 8006ba2:	d564      	bpl.n	8006c6e <HAL_SPI_IRQHandler+0x10a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006ba4:	6993      	ldr	r3, [r2, #24]
 8006ba6:	f043 0308 	orr.w	r3, r3, #8
 8006baa:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006bac:	6821      	ldr	r1, [r4, #0]
 8006bae:	698b      	ldr	r3, [r1, #24]
 8006bb0:	f043 0310 	orr.w	r3, r3, #16
 8006bb4:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006bb6:	6821      	ldr	r1, [r4, #0]
 8006bb8:	698b      	ldr	r3, [r1, #24]
 8006bba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bbe:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006bc0:	6821      	ldr	r1, [r4, #0]
 8006bc2:	690b      	ldr	r3, [r1, #16]
 8006bc4:	f023 0308 	bic.w	r3, r3, #8
 8006bc8:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8006bd2:	d136      	bne.n	8006c42 <HAL_SPI_IRQHandler+0xde>
      while (hspi->RxXferCount != 0UL)
 8006bd4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d031      	beq.n	8006c42 <HAL_SPI_IRQHandler+0xde>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006bde:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006be0:	e00f      	b.n	8006c02 <HAL_SPI_IRQHandler+0x9e>
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006be8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006bea:	3104      	adds	r1, #4
 8006bec:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8006bee:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8006bfa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	b1fb      	cbz	r3, 8006c42 <HAL_SPI_IRQHandler+0xde>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	2b0f      	cmp	r3, #15
 8006c06:	d8ec      	bhi.n	8006be2 <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c08:	2b07      	cmp	r3, #7
 8006c0a:	f240 80ad 	bls.w	8006d68 <HAL_SPI_IRQHandler+0x204>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006c0e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8006c10:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c12:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006c14:	3102      	adds	r1, #2
 8006c16:	6661      	str	r1, [r4, #100]	; 0x64
 8006c18:	e7e9      	b.n	8006bee <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006c1e:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006c20:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006c22:	4620      	mov	r0, r4
 8006c24:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006c26:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d102      	bne.n	8006c34 <HAL_SPI_IRQHandler+0xd0>
    hspi->RxISR(hspi);
 8006c2e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006c30:	4620      	mov	r0, r4
 8006c32:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006c34:	f005 0526 	and.w	r5, r5, #38	; 0x26
 8006c38:	2d02      	cmp	r5, #2
 8006c3a:	f000 809d 	beq.w	8006d78 <HAL_SPI_IRQHandler+0x214>
}
 8006c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 8006c42:	4620      	mov	r0, r4
 8006c44:	f7ff fbea 	bl	800641c <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c4e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f040 8085 	bne.w	8006d62 <HAL_SPI_IRQHandler+0x1fe>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006c58:	2e05      	cmp	r6, #5
 8006c5a:	f000 8092 	beq.w	8006d82 <HAL_SPI_IRQHandler+0x21e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006c5e:	2e04      	cmp	r6, #4
 8006c60:	f000 8092 	beq.w	8006d88 <HAL_SPI_IRQHandler+0x224>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006c64:	2e03      	cmp	r6, #3
 8006c66:	d1ea      	bne.n	8006c3e <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_TxCpltCallback(hspi);
 8006c68:	f7ff febc 	bl	80069e4 <HAL_SPI_TxCpltCallback>
 8006c6c:	e7e7      	b.n	8006c3e <HAL_SPI_IRQHandler+0xda>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006c6e:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006c72:	d0e4      	beq.n	8006c3e <HAL_SPI_IRQHandler+0xda>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006c74:	0668      	lsls	r0, r5, #25
 8006c76:	d509      	bpl.n	8006c8c <HAL_SPI_IRQHandler+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c78:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c7c:	f043 0304 	orr.w	r3, r3, #4
 8006c80:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c84:	6993      	ldr	r3, [r2, #24]
 8006c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c8a:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006c8c:	05a9      	lsls	r1, r5, #22
 8006c8e:	d50a      	bpl.n	8006ca6 <HAL_SPI_IRQHandler+0x142>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c90:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c94:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c96:	f043 0301 	orr.w	r3, r3, #1
 8006c9a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c9e:	6993      	ldr	r3, [r2, #24]
 8006ca0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ca4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006ca6:	05ea      	lsls	r2, r5, #23
 8006ca8:	d50a      	bpl.n	8006cc0 <HAL_SPI_IRQHandler+0x15c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006caa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006cae:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006cb0:	f043 0308 	orr.w	r3, r3, #8
 8006cb4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006cb8:	6993      	ldr	r3, [r2, #24]
 8006cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cbe:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006cc0:	06ab      	lsls	r3, r5, #26
 8006cc2:	d50a      	bpl.n	8006cda <HAL_SPI_IRQHandler+0x176>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006cc4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cc8:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cd2:	6993      	ldr	r3, [r2, #24]
 8006cd4:	f043 0320 	orr.w	r3, r3, #32
 8006cd8:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cda:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0ad      	beq.n	8006c3e <HAL_SPI_IRQHandler+0xda>
      __HAL_SPI_DISABLE(hspi);
 8006ce2:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006ce4:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006ce8:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006cea:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006cee:	f023 0301 	bic.w	r3, r3, #1
 8006cf2:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	4b26      	ldr	r3, [pc, #152]	; (8006d90 <HAL_SPI_IRQHandler+0x22c>)
 8006cf8:	6911      	ldr	r1, [r2, #16]
 8006cfa:	ea03 0301 	and.w	r3, r3, r1
 8006cfe:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006d00:	d12b      	bne.n	8006d5a <HAL_SPI_IRQHandler+0x1f6>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	6893      	ldr	r3, [r2, #8]
 8006d06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006d0a:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8006d0c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006d0e:	b15b      	cbz	r3, 8006d28 <HAL_SPI_IRQHandler+0x1c4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d10:	4a20      	ldr	r2, [pc, #128]	; (8006d94 <HAL_SPI_IRQHandler+0x230>)
 8006d12:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d14:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006d16:	f7fc fb87 	bl	8003428 <HAL_DMA_Abort_IT>
 8006d1a:	b128      	cbz	r0, 8006d28 <HAL_SPI_IRQHandler+0x1c4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d1c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d24:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8006d28:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d087      	beq.n	8006c3e <HAL_SPI_IRQHandler+0xda>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d2e:	4a19      	ldr	r2, [pc, #100]	; (8006d94 <HAL_SPI_IRQHandler+0x230>)
 8006d30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d32:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006d34:	f7fc fb78 	bl	8003428 <HAL_DMA_Abort_IT>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d080      	beq.n	8006c3e <HAL_SPI_IRQHandler+0xda>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d3c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d44:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006d48:	e779      	b.n	8006c3e <HAL_SPI_IRQHandler+0xda>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006d4a:	6993      	ldr	r3, [r2, #24]
 8006d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d50:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 8006d52:	f7ff ff05 	bl	8006b60 <HAL_SPI_SuspendCallback>
}
 8006d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8006d5a:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8006d5c:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8006d5e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006d62:	f7ff fe79 	bl	8006a58 <HAL_SPI_ErrorCallback>
 8006d66:	e76a      	b.n	8006c3e <HAL_SPI_IRQHandler+0xda>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d6e:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d70:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006d72:	3101      	adds	r1, #1
 8006d74:	6661      	str	r1, [r4, #100]	; 0x64
 8006d76:	e73a      	b.n	8006bee <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 8006d78:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006d7a:	4620      	mov	r0, r4
}
 8006d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8006d80:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 8006d82:	f7ff fe59 	bl	8006a38 <HAL_SPI_TxRxCpltCallback>
 8006d86:	e75a      	b.n	8006c3e <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_RxCpltCallback(hspi);
 8006d88:	f7fa f85c 	bl	8000e44 <HAL_SPI_RxCpltCallback>
 8006d8c:	e757      	b.n	8006c3e <HAL_SPI_IRQHandler+0xda>
 8006d8e:	bf00      	nop
 8006d90:	fffffc94 	.word	0xfffffc94
 8006d94:	08006b45 	.word	0x08006b45

08006d98 <tThreshold_init>:
}



void tThreshold_init (tThreshold* const th, float low, float high, LEAF* const leaf)
{
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	ed2d 8b02 	vpush	{d8}
	tThreshold_initToPool(th, low, high, &leaf->mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006d9e:	698d      	ldr	r5, [r1, #24]
{
 8006da0:	eeb0 8a40 	vmov.f32	s16, s0
 8006da4:	eef0 8a60 	vmov.f32	s17, s1
 8006da8:	4604      	mov	r4, r0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8006daa:	4629      	mov	r1, r5
 8006dac:	2010      	movs	r0, #16
 8006dae:	f000 faff 	bl	80073b0 <mpool_alloc>
    t->mempool = m;
    
    t->highThresh = high;
    t->lowThresh = low;

    t->currentValue = 0;
 8006db2:	2300      	movs	r3, #0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8006db4:	6020      	str	r0, [r4, #0]
    t->mempool = m;
 8006db6:	6005      	str	r5, [r0, #0]
    t->highThresh = high;
 8006db8:	edc0 8a01 	vstr	s17, [r0, #4]
    t->lowThresh = low;
 8006dbc:	ed80 8a02 	vstr	s16, [r0, #8]
    t->currentValue = 0;
 8006dc0:	60c3      	str	r3, [r0, #12]
}
 8006dc2:	ecbd 8b02 	vpop	{d8}
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}

08006dc8 <tThreshold_tick>:
    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 8006dc8:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 8006dca:	edd3 7a01 	vldr	s15, [r3, #4]
 8006dce:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd6:	d803      	bhi.n	8006de0 <tThreshold_tick+0x18>
    {
    	t->currentValue = 1;
 8006dd8:	2201      	movs	r2, #1
 8006dda:	4610      	mov	r0, r2
 8006ddc:	60da      	str	r2, [r3, #12]
 8006dde:	4770      	bx	lr
    }
    else if (in <= t->lowThresh)
 8006de0:	edd3 7a02 	vldr	s15, [r3, #8]
 8006de4:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dec:	db03      	blt.n	8006df6 <tThreshold_tick+0x2e>
	{
    	t->currentValue = 0;
 8006dee:	2200      	movs	r2, #0
 8006df0:	4610      	mov	r0, r2
 8006df2:	60da      	str	r2, [r3, #12]
	}

    return t->currentValue;
}
 8006df4:	4770      	bx	lr
    return t->currentValue;
 8006df6:	68d8      	ldr	r0, [r3, #12]
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop

08006dfc <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006e02:	698d      	ldr	r5, [r1, #24]
{
 8006e04:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006e06:	201c      	movs	r0, #28
{
 8006e08:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006e0c:	4629      	mov	r1, r5
{
 8006e0e:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006e12:	f000 facd 	bl	80073b0 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8006e16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8006e1a:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006e1c:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8006e1e:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8006e20:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8006e24:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8006e28:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8006e2c:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8006e2e:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8006e30:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8006e32:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8006e34:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8006e38:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8006e3c:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8006e40:	ecbd 8b02 	vpop	{d8}
 8006e44:	bd38      	pop	{r3, r4, r5, pc}
 8006e46:	bf00      	nop

08006e48 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8006e48:	6803      	ldr	r3, [r0, #0]
{
 8006e4a:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
 8006e4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006e52:	eef4 7ac0 	vcmpe.f32	s15, s0
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8006e56:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
 8006e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8006e5e:	bf94      	ite	ls
 8006e60:	edd3 6a04 	vldrls	s13, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8006e64:	edd3 6a05 	vldrhi	s13, [r3, #20]
 8006e68:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006e6c:	eeb0 0a67 	vmov.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006e70:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8006ea4 <tSlide_tick+0x5c>
 8006e74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e7c:	d406      	bmi.n	8006e8c <tSlide_tick+0x44>
 8006e7e:	ed83 0a02 	vstr	s0, [r3, #8]
#endif
    s->prevIn = in;
 8006e82:	ed83 7a03 	vstr	s14, [r3, #12]
    s->prevOut = s->currentOut;
 8006e86:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 8006e8a:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006e8c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8006ea8 <tSlide_tick+0x60>
    s->prevIn = in;
 8006e90:	ed83 7a03 	vstr	s14, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006e94:	eeb0 0a67 	vmov.f32	s0, s15
 8006e98:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8006e9c:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	006ce3ee 	.word	0x006ce3ee
 8006ea8:	00000000 	.word	0x00000000

08006eac <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006eb2:	698c      	ldr	r4, [r1, #24]
{
 8006eb4:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8006eb6:	2018      	movs	r0, #24
{
 8006eb8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	f000 fadb 	bl	8007478 <mpool_calloc>
 8006ec2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8006ec4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006ec6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006eca:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8006ecc:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006ece:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8006ed2:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006ed4:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8006ed8:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8006eda:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006ede:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006ee2:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8006ee6:	ecbd 8b02 	vpop	{d8}
 8006eea:	bd38      	pop	{r3, r4, r5, pc}

08006eec <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8006eec:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8006eee:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ef2:	ed93 7a02 	vldr	s14, [r3, #8]
 8006ef6:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8006efa:	ed83 0a01 	vstr	s0, [r3, #4]
 8006efe:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8006f02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006f06:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8006f0a:	4770      	bx	lr

08006f0c <tVZFilter_calcCoeffs>:
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8006f0c:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8006f0e:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006f10:	eddf 7a98 	vldr	s15, [pc, #608]	; 8007174 <tVZFilter_calcCoeffs+0x268>
{
 8006f14:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006f18:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8006f1c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8006f20:	ee68 8a87 	vmul.f32	s17, s17, s14
 8006f24:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8006f28:	eeb0 0a68 	vmov.f32	s0, s17
 8006f2c:	f000 fd98 	bl	8007a60 <tanf>
    
    switch( f->type )
 8006f30:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006f32:	eeb0 8a40 	vmov.f32	s16, s0
 8006f36:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8006f3a:	2b0a      	cmp	r3, #10
 8006f3c:	f200 8117 	bhi.w	800716e <tVZFilter_calcCoeffs+0x262>
 8006f40:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006f44:	002f0026 	.word	0x002f0026
 8006f48:	00410038 	.word	0x00410038
 8006f4c:	0056004d 	.word	0x0056004d
 8006f50:	00a1008b 	.word	0x00a1008b
 8006f54:	010a00b7 	.word	0x010a00b7
 8006f58:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8006f5a:	edd4 7a05 	vldr	s15, [r4, #20]
 8006f5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f62:	eeb1 7a67 	vneg.f32	s14, s15
 8006f66:	61e3      	str	r3, [r4, #28]
 8006f68:	6263      	str	r3, [r4, #36]	; 0x24
 8006f6a:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8006f72:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006f76:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8006f7a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006f7e:	eee7 6a88 	vfma.f32	s13, s15, s16
 8006f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f86:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8006f8a:	ecbd 8b02 	vpop	{d8}
 8006f8e:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006f90:	2300      	movs	r3, #0
 8006f92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8006f96:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006f9a:	61e3      	str	r3, [r4, #28]
 8006f9c:	6223      	str	r3, [r4, #32]
 8006f9e:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8006fa0:	e7e5      	b.n	8006f6e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8006fa8:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8006fac:	6223      	str	r3, [r4, #32]
 8006fae:	6263      	str	r3, [r4, #36]	; 0x24
 8006fb0:	61e2      	str	r2, [r4, #28]
            break;
 8006fb2:	e7dc      	b.n	8006f6e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8006fba:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8006fbe:	61e3      	str	r3, [r4, #28]
 8006fc0:	6263      	str	r3, [r4, #36]	; 0x24
 8006fc2:	6222      	str	r2, [r4, #32]
            break;
 8006fc4:	e7d3      	b.n	8006f6e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006fc6:	edd4 7a05 	vldr	s15, [r4, #20]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8006fd0:	61e3      	str	r3, [r4, #28]
 8006fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006fd6:	6263      	str	r3, [r4, #36]	; 0x24
 8006fd8:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8006fdc:	e7c7      	b.n	8006f6e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006fde:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006fe2:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 8006fe4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006fe8:	6222      	str	r2, [r4, #32]
 8006fea:	61e3      	str	r3, [r4, #28]
 8006fec:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8006fee:	e7be      	b.n	8006f6e <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8006ff0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8006ff4:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8006ff8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006ffc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007000:	f000 fbce 	bl	80077a0 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8007004:	ee28 0a80 	vmul.f32	s0, s17, s0
 8007008:	f000 fd2a 	bl	8007a60 <tanf>
            float r  = f->g/wl;
 800700c:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8007010:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8007014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007018:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800701c:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007020:	ed84 7a07 	vstr	s14, [r4, #28]
 8007024:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8007028:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800702c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8007030:	eef0 6a47 	vmov.f32	s13, s14
 8007034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007038:	ee77 7a45 	vsub.f32	s15, s14, s10
 800703c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007040:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8007044:	eef1 7ac7 	vsqrt.f32	s15, s14
 8007048:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800704c:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8007050:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007054:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8007058:	e789      	b.n	8006f6e <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 800705a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800705e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8007062:	edd4 7a05 	vldr	s15, [r4, #20]
 8007066:	eef1 6ac7 	vsqrt.f32	s13, s14
 800706a:	ed84 7a07 	vstr	s14, [r4, #28]
 800706e:	6263      	str	r3, [r4, #36]	; 0x24
 8007070:	ee27 6a27 	vmul.f32	s12, s14, s15
 8007074:	ed84 6a08 	vstr	s12, [r4, #32]
 8007078:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800707c:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8007080:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8007084:	e773      	b.n	8006f6e <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8007086:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800708a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800708e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007092:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8007096:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 800709a:	61e3      	str	r3, [r4, #28]
 800709c:	ee27 6a27 	vmul.f32	s12, s14, s15
 80070a0:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80070a4:	eeb1 7ae6 	vsqrt.f32	s14, s13
 80070a8:	ee20 8a07 	vmul.f32	s16, s0, s14
 80070ac:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 80070b0:	e75d      	b.n	8006f6e <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 80070b2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80070b6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80070ba:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80070be:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8007178 <tVZFilter_calcCoeffs+0x26c>
 80070c2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 80070c6:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80070ca:	eeb0 0a48 	vmov.f32	s0, s16
 80070ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 80070d2:	f000 f94f 	bl	8007374 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80070d6:	eddf 0a28 	vldr	s1, [pc, #160]	; 8007178 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80070da:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80070de:	eeb0 0a68 	vmov.f32	s0, s17
 80070e2:	f000 f94b 	bl	800737c <minimum>
            f->cB = 1.0f-x*x;
 80070e6:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070ea:	edd4 7a05 	vldr	s15, [r4, #20]
 80070ee:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 80070f2:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070f6:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80070fa:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80070fe:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007102:	ee76 5a06 	vadd.f32	s11, s12, s12
 8007106:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 800710a:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800710e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8007112:	eee0 7a00 	vfma.f32	s15, s0, s0
 8007116:	eee0 7a65 	vfms.f32	s15, s0, s11
 800711a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800711e:	f000 f8cd 	bl	80072bc <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8007122:	edd4 5a07 	vldr	s11, [r4, #28]
 8007126:	ed94 6a08 	vldr	s12, [r4, #32]
 800712a:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 800712e:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007132:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8007136:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800713a:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800713e:	ee65 5a80 	vmul.f32	s11, s11, s0
 8007142:	ee26 6a00 	vmul.f32	s12, s12, s0
 8007146:	ee26 0a80 	vmul.f32	s0, s13, s0
 800714a:	edc4 5a07 	vstr	s11, [r4, #28]
 800714e:	ed84 6a08 	vstr	s12, [r4, #32]
 8007152:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8007156:	e70a      	b.n	8006f6e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8007158:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800715c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8007160:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8007162:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8007166:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 800716a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800716c:	e6ff      	b.n	8006f6e <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
 800716e:	edd4 7a05 	vldr	s15, [r4, #20]
 8007172:	e6fc      	b.n	8006f6e <tVZFilter_calcCoeffs+0x62>
 8007174:	40490fdb 	.word	0x40490fdb
 8007178:	00000000 	.word	0x00000000

0800717c <tVZFilter_initToPool>:
{
 800717c:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 800717e:	6817      	ldr	r7, [r2, #0]
{
 8007180:	4605      	mov	r5, r0
 8007182:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8007184:	204c      	movs	r0, #76	; 0x4c
 8007186:	4639      	mov	r1, r7
{
 8007188:	ed2d 8b04 	vpush	{d8-d9}
 800718c:	b083      	sub	sp, #12
 800718e:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007192:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8007196:	ed9f 8a42 	vldr	s16, [pc, #264]	; 80072a0 <tVZFilter_initToPool+0x124>
{
 800719a:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800719e:	f000 f907 	bl	80073b0 <mpool_alloc>
 80071a2:	6028      	str	r0, [r5, #0]
 80071a4:	4604      	mov	r4, r0
    f->mempool = m;
 80071a6:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80071a8:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 80071ac:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80071ae:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 80071b2:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80071b6:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 80072a4 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
 80071ba:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80071be:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80071c6:	f000 f89b 	bl	8007300 <LEAF_clip>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80071ca:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80072a8 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
 80071ce:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80071d2:	ee20 6a09 	vmul.f32	s12, s0, s18
 80071d6:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 80071da:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 80071de:	4b33      	ldr	r3, [pc, #204]	; (80072ac <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80071e0:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 80071e4:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 80071e6:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 80071ea:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80071ee:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80071f2:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 80071f6:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 80071f8:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 80071fc:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8007200:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 8007204:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 8007208:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800720c:	f000 fc28 	bl	8007a60 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8007210:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80072b0 <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007214:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8007218:	eef0 0a68 	vmov.f32	s1, s17
 800721c:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 8007220:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8007222:	f000 f86d 	bl	8007300 <LEAF_clip>
 8007226:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800722a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800722e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8007232:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
 8007236:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8007238:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800723c:	f000 fab0 	bl	80077a0 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8007240:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8007244:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8007248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800724c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8007250:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007254:	f000 fc04 	bl	8007a60 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8007258:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800725c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8007260:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8007262:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8007266:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800726a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800726e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007272:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007276:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800727a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800727e:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8007282:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007286:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 800728a:	f7ff fe3f 	bl	8006f0c <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 800728e:	4628      	mov	r0, r5
}
 8007290:	b003      	add	sp, #12
 8007292:	ecbd 8b04 	vpop	{d8-d9}
 8007296:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 800729a:	f7ff be37 	b.w	8006f0c <tVZFilter_calcCoeffs>
 800729e:	bf00      	nop
 80072a0:	00000000 	.word	0x00000000
 80072a4:	40490fdb 	.word	0x40490fdb
 80072a8:	3fb504f3 	.word	0x3fb504f3
 80072ac:	3f3504f3 	.word	0x3f3504f3
 80072b0:	42c80000 	.word	0x42c80000

080072b4 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 80072b4:	3218      	adds	r2, #24
 80072b6:	f7ff bf61 	b.w	800717c <tVZFilter_initToPool>
 80072ba:	bf00      	nop

080072bc <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80072bc:	ee10 2a10 	vmov	r2, s0
 80072c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 80072c4:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80072c6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80072ca:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 80072ce:	ee60 7a27 	vmul.f32	s15, s0, s15
 80072d2:	ee00 3a10 	vmov	s0, r3
 80072d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80072da:	eea0 7a67 	vfms.f32	s14, s0, s15
 80072de:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 80072e2:	ee10 3a10 	vmov	r3, s0
 80072e6:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 80072ea:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 80072ee:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 80072f2:	336e      	adds	r3, #110	; 0x6e
}
 80072f4:	ee00 3a10 	vmov	s0, r3
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	5f3759df 	.word	0x5f3759df

08007300 <LEAF_clip>:
float LEAF_clip(float min, float val, float max)
#endif
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 8007300:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8007304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007308:	dd05      	ble.n	8007316 <LEAF_clip+0x16>
 800730a:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 800730e:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 8007312:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 8007316:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800731a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731e:	dc01      	bgt.n	8007324 <LEAF_clip+0x24>
    {
        return tempmin;
    }
    else if (val > tempmax)
 8007320:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop

08007328 <LEAF_generate_atodb>:
    }
}


void LEAF_generate_atodb(float* buffer, int size)
{
 8007328:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
 800732a:	1e4b      	subs	r3, r1, #1
 800732c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    for (int i = 0; i < size; i++)
 8007330:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800733a:	ed2d 8b04 	vpush	{d8-d9}
    float increment = 1.0f / (float)(size-1);
 800733e:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 8007342:	dd12      	ble.n	800736a <LEAF_generate_atodb+0x42>
 8007344:	4604      	mov	r4, r0
    float x = 0.0f;
 8007346:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007370 <LEAF_generate_atodb+0x48>
 800734a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 800734e:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 8007352:	eeb0 0a48 	vmov.f32	s0, s16
 8007356:	f000 fbaf 	bl	8007ab8 <log10f>
 800735a:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 800735e:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 8007362:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8007366:	42a5      	cmp	r5, r4
 8007368:	d1f3      	bne.n	8007352 <LEAF_generate_atodb+0x2a>
}
 800736a:	ecbd 8b04 	vpop	{d8-d9}
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	00000000 	.word	0x00000000

08007374 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8007374:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop

0800737c <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 800737c:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop

08007384 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8007384:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8007386:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8007388:	2510      	movs	r5, #16
    pool->usize  = 0;
 800738a:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800738c:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800738e:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
 8007390:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
 8007392:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8007396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007398:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 800739a:	440b      	add	r3, r1
 800739c:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 800739e:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 80073a2:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 80073a4:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 80073a8:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80073aa:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 80073ac:	6183      	str	r3, [r0, #24]
}
 80073ae:	4770      	bx	lr

080073b0 <mpool_alloc>:
{
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 80073b2:	684a      	ldr	r2, [r1, #4]
{
 80073b4:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 80073b6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80073b8:	3301      	adds	r3, #1
 80073ba:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 80073bc:	694b      	ldr	r3, [r1, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d04a      	beq.n	8007458 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80073c2:	1dc4      	adds	r4, r0, #7
 80073c4:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 80073c8:	e002      	b.n	80073d0 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 80073ca:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d043      	beq.n	8007458 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	42a2      	cmp	r2, r4
 80073d4:	d3f9      	bcc.n	80073ca <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 80073d6:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80073d8:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 80073da:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80073de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80073e0:	4281      	cmp	r1, r0
 80073e2:	d246      	bcs.n	8007472 <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80073e4:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 80073e8:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 80073ea:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80073ec:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 80073ee:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 80073f0:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 80073f2:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 80073f6:	4429      	add	r1, r5
 80073f8:	5111      	str	r1, [r2, r4]
    node->size = size;
 80073fa:	60e8      	str	r0, [r5, #12]
    node->next = next;
 80073fc:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8007400:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8007404:	429a      	cmp	r2, r3
        pool->head = new_node;
 8007406:	bf08      	it	eq
 8007408:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	b10a      	cbz	r2, 8007414 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 8007410:	6899      	ldr	r1, [r3, #8]
 8007412:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8007414:	689a      	ldr	r2, [r3, #8]
 8007416:	b10a      	cbz	r2, 800741c <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 8007418:	6859      	ldr	r1, [r3, #4]
 800741a:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 800741c:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800741e:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 8007420:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8007424:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007428:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800742c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800742e:	4422      	add	r2, r4
 8007430:	4402      	add	r2, r0
 8007432:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8007436:	694a      	ldr	r2, [r1, #20]
 8007438:	42aa      	cmp	r2, r5
 800743a:	dd0b      	ble.n	8007454 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800743c:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 800743e:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8007440:	b14a      	cbz	r2, 8007456 <mpool_alloc+0xa6>
 8007442:	1e41      	subs	r1, r0, #1
 8007444:	460a      	mov	r2, r1
 8007446:	f801 5f01 	strb.w	r5, [r1, #1]!
 800744a:	68dc      	ldr	r4, [r3, #12]
 800744c:	3202      	adds	r2, #2
 800744e:	1a12      	subs	r2, r2, r0
 8007450:	4294      	cmp	r4, r2
 8007452:	d8f7      	bhi.n	8007444 <mpool_alloc+0x94>
    return node_to_alloc->pool;
 8007454:	6818      	ldr	r0, [r3, #0]
}
 8007456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8007458:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 800745c:	1a9b      	subs	r3, r3, r2
 800745e:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007460:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8007464:	bf8c      	ite	hi
 8007466:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007468:	2100      	movls	r1, #0
 800746a:	f000 f88f 	bl	800758c <LEAF_internalErrorCallback>
        return NULL;
 800746e:	2000      	movs	r0, #0
}
 8007470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 8007472:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8007474:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8007476:	e7c3      	b.n	8007400 <mpool_alloc+0x50>

08007478 <mpool_calloc>:
{
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 800747a:	684a      	ldr	r2, [r1, #4]
{
 800747c:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 800747e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8007480:	3301      	adds	r3, #1
 8007482:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8007484:	694b      	ldr	r3, [r1, #20]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d044      	beq.n	8007514 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800748a:	1dc4      	adds	r4, r0, #7
 800748c:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8007490:	e002      	b.n	8007498 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8007492:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8007494:	2b00      	cmp	r3, #0
 8007496:	d03d      	beq.n	8007514 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	42a2      	cmp	r2, r4
 800749c:	d3f9      	bcc.n	8007492 <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 800749e:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80074a0:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 80074a2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80074a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80074a8:	4281      	cmp	r1, r0
 80074aa:	d240      	bcs.n	800752e <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80074ac:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 80074b0:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 80074b2:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80074b4:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 80074b6:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 80074b8:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 80074ba:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 80074be:	4429      	add	r1, r5
 80074c0:	5111      	str	r1, [r2, r4]
    node->size = size;
 80074c2:	60e8      	str	r0, [r5, #12]
    node->next = next;
 80074c4:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 80074c8:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80074cc:	429a      	cmp	r2, r3
        pool->head = new_node;
 80074ce:	bf08      	it	eq
 80074d0:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	b10a      	cbz	r2, 80074dc <mpool_calloc+0x64>
        node->next->prev = node->prev;
 80074d8:	6899      	ldr	r1, [r3, #8]
 80074da:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	b10a      	cbz	r2, 80074e4 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 80074e0:	6859      	ldr	r1, [r3, #4]
 80074e2:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 80074e4:	2200      	movs	r2, #0
    node->prev = NULL;
 80074e6:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80074ea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80074ee:	f8dc 000c 	ldr.w	r0, [ip, #12]
 80074f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80074f4:	4401      	add	r1, r0
 80074f6:	68d8      	ldr	r0, [r3, #12]
 80074f8:	4401      	add	r1, r0
 80074fa:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 80074fe:	68d9      	ldr	r1, [r3, #12]
 8007500:	b131      	cbz	r1, 8007510 <mpool_calloc+0x98>
 8007502:	4610      	mov	r0, r2
 8007504:	6819      	ldr	r1, [r3, #0]
 8007506:	5488      	strb	r0, [r1, r2]
 8007508:	3201      	adds	r2, #1
 800750a:	68d9      	ldr	r1, [r3, #12]
 800750c:	4291      	cmp	r1, r2
 800750e:	d8f9      	bhi.n	8007504 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 8007510:	6818      	ldr	r0, [r3, #0]
}
 8007512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8007514:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800751c:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8007520:	bf8c      	ite	hi
 8007522:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007524:	2100      	movls	r1, #0
 8007526:	f000 f831 	bl	800758c <LEAF_internalErrorCallback>
        return NULL;
 800752a:	2000      	movs	r0, #0
}
 800752c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 800752e:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8007530:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8007532:	e7c9      	b.n	80074c8 <mpool_calloc+0x50>

08007534 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop

08007538 <LEAF_init>:
{
 8007538:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 800753a:	6200      	str	r0, [r0, #32]
{
 800753c:	4604      	mov	r4, r0
 800753e:	461d      	mov	r5, r3
 8007540:	ed2d 8b02 	vpush	{d8}
 8007544:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 8007548:	f7ff ff1c 	bl	8007384 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 800754c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8007550:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8007584 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 8007554:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8007556:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 8007558:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 800755c:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 8007560:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 8007562:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 8007564:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8007568:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 800756c:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8007570:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8007574:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8007578:	edc4 7a03 	vstr	s15, [r4, #12]
}
 800757c:	ecbd 8b02 	vpop	{d8}
 8007580:	bd38      	pop	{r3, r4, r5, pc}
 8007582:	bf00      	nop
 8007584:	40c90fdb 	.word	0x40c90fdb
 8007588:	08007535 	.word	0x08007535

0800758c <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800758c:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 800758e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8007592:	2401      	movs	r4, #1
 8007594:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 8007596:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 800759a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800759c:	4718      	bx	r3
 800759e:	bf00      	nop

080075a0 <__errno>:
 80075a0:	4b01      	ldr	r3, [pc, #4]	; (80075a8 <__errno+0x8>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	24000014 	.word	0x24000014

080075ac <__libc_init_array>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4d0d      	ldr	r5, [pc, #52]	; (80075e4 <__libc_init_array+0x38>)
 80075b0:	4c0d      	ldr	r4, [pc, #52]	; (80075e8 <__libc_init_array+0x3c>)
 80075b2:	1b64      	subs	r4, r4, r5
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	2600      	movs	r6, #0
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	d109      	bne.n	80075d0 <__libc_init_array+0x24>
 80075bc:	4d0b      	ldr	r5, [pc, #44]	; (80075ec <__libc_init_array+0x40>)
 80075be:	4c0c      	ldr	r4, [pc, #48]	; (80075f0 <__libc_init_array+0x44>)
 80075c0:	f001 f84a 	bl	8008658 <_init>
 80075c4:	1b64      	subs	r4, r4, r5
 80075c6:	10a4      	asrs	r4, r4, #2
 80075c8:	2600      	movs	r6, #0
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	d105      	bne.n	80075da <__libc_init_array+0x2e>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d4:	4798      	blx	r3
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7ee      	b.n	80075b8 <__libc_init_array+0xc>
 80075da:	f855 3b04 	ldr.w	r3, [r5], #4
 80075de:	4798      	blx	r3
 80075e0:	3601      	adds	r6, #1
 80075e2:	e7f2      	b.n	80075ca <__libc_init_array+0x1e>
 80075e4:	08008dec 	.word	0x08008dec
 80075e8:	08008dec 	.word	0x08008dec
 80075ec:	08008dec 	.word	0x08008dec
 80075f0:	08008df0 	.word	0x08008df0

080075f4 <memset>:
 80075f4:	4402      	add	r2, r0
 80075f6:	4603      	mov	r3, r0
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d100      	bne.n	80075fe <memset+0xa>
 80075fc:	4770      	bx	lr
 80075fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007602:	e7f9      	b.n	80075f8 <memset+0x4>

08007604 <with_errnof>:
 8007604:	b513      	push	{r0, r1, r4, lr}
 8007606:	4604      	mov	r4, r0
 8007608:	ed8d 0a01 	vstr	s0, [sp, #4]
 800760c:	f7ff ffc8 	bl	80075a0 <__errno>
 8007610:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007614:	6004      	str	r4, [r0, #0]
 8007616:	b002      	add	sp, #8
 8007618:	bd10      	pop	{r4, pc}

0800761a <xflowf>:
 800761a:	b130      	cbz	r0, 800762a <xflowf+0x10>
 800761c:	eef1 7a40 	vneg.f32	s15, s0
 8007620:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007624:	2022      	movs	r0, #34	; 0x22
 8007626:	f7ff bfed 	b.w	8007604 <with_errnof>
 800762a:	eef0 7a40 	vmov.f32	s15, s0
 800762e:	e7f7      	b.n	8007620 <xflowf+0x6>

08007630 <__math_uflowf>:
 8007630:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007638 <__math_uflowf+0x8>
 8007634:	f7ff bff1 	b.w	800761a <xflowf>
 8007638:	10000000 	.word	0x10000000

0800763c <__math_may_uflowf>:
 800763c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007644 <__math_may_uflowf+0x8>
 8007640:	f7ff bfeb 	b.w	800761a <xflowf>
 8007644:	1a200000 	.word	0x1a200000

08007648 <__math_oflowf>:
 8007648:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007650 <__math_oflowf+0x8>
 800764c:	f7ff bfe5 	b.w	800761a <xflowf>
 8007650:	70000000 	.word	0x70000000

08007654 <__math_divzerof>:
 8007654:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007658:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800765c:	2800      	cmp	r0, #0
 800765e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8007662:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007670 <__math_divzerof+0x1c>
 8007666:	2022      	movs	r0, #34	; 0x22
 8007668:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800766c:	f7ff bfca 	b.w	8007604 <with_errnof>
 8007670:	00000000 	.word	0x00000000

08007674 <__math_invalidf>:
 8007674:	eef0 7a40 	vmov.f32	s15, s0
 8007678:	ee30 7a40 	vsub.f32	s14, s0, s0
 800767c:	eef4 7a67 	vcmp.f32	s15, s15
 8007680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007684:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8007688:	d602      	bvs.n	8007690 <__math_invalidf+0x1c>
 800768a:	2021      	movs	r0, #33	; 0x21
 800768c:	f7ff bfba 	b.w	8007604 <with_errnof>
 8007690:	4770      	bx	lr

08007692 <fabsf>:
 8007692:	ee10 3a10 	vmov	r3, s0
 8007696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800769a:	ee00 3a10 	vmov	s0, r3
 800769e:	4770      	bx	lr

080076a0 <logf>:
 80076a0:	ee10 3a10 	vmov	r3, s0
 80076a4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80076a8:	b410      	push	{r4}
 80076aa:	d055      	beq.n	8007758 <logf+0xb8>
 80076ac:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 80076b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80076b4:	d31a      	bcc.n	80076ec <logf+0x4c>
 80076b6:	005a      	lsls	r2, r3, #1
 80076b8:	d104      	bne.n	80076c4 <logf+0x24>
 80076ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076be:	2001      	movs	r0, #1
 80076c0:	f7ff bfc8 	b.w	8007654 <__math_divzerof>
 80076c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80076c8:	d043      	beq.n	8007752 <logf+0xb2>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	db02      	blt.n	80076d4 <logf+0x34>
 80076ce:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80076d2:	d303      	bcc.n	80076dc <logf+0x3c>
 80076d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d8:	f7ff bfcc 	b.w	8007674 <__math_invalidf>
 80076dc:	eddf 7a20 	vldr	s15, [pc, #128]	; 8007760 <logf+0xc0>
 80076e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80076e4:	ee10 3a10 	vmov	r3, s0
 80076e8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80076ec:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80076f0:	491c      	ldr	r1, [pc, #112]	; (8007764 <logf+0xc4>)
 80076f2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 80076f6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80076fa:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80076fe:	0dd4      	lsrs	r4, r2, #23
 8007700:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8007704:	05e4      	lsls	r4, r4, #23
 8007706:	ed90 6b00 	vldr	d6, [r0]
 800770a:	1b1b      	subs	r3, r3, r4
 800770c:	ee07 3a90 	vmov	s15, r3
 8007710:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8007714:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007718:	15d2      	asrs	r2, r2, #23
 800771a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800771e:	ed90 6b02 	vldr	d6, [r0, #8]
 8007722:	ee20 4b00 	vmul.f64	d4, d0, d0
 8007726:	ee07 2a90 	vmov	s15, r2
 800772a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800772e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007732:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8007736:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800773a:	eea5 7b00 	vfma.f64	d7, d5, d0
 800773e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8007742:	ee30 0b06 	vadd.f64	d0, d0, d6
 8007746:	eea5 7b04 	vfma.f64	d7, d5, d4
 800774a:	eea4 0b07 	vfma.f64	d0, d4, d7
 800774e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007768 <logf+0xc8>
 800775c:	e7f9      	b.n	8007752 <logf+0xb2>
 800775e:	bf00      	nop
 8007760:	4b000000 	.word	0x4b000000
 8007764:	080087d0 	.word	0x080087d0
 8007768:	00000000 	.word	0x00000000

0800776c <checkint>:
 800776c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007770:	2b7e      	cmp	r3, #126	; 0x7e
 8007772:	dd10      	ble.n	8007796 <checkint+0x2a>
 8007774:	2b96      	cmp	r3, #150	; 0x96
 8007776:	dc0c      	bgt.n	8007792 <checkint+0x26>
 8007778:	2201      	movs	r2, #1
 800777a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800777e:	fa02 f303 	lsl.w	r3, r2, r3
 8007782:	1e5a      	subs	r2, r3, #1
 8007784:	4202      	tst	r2, r0
 8007786:	d106      	bne.n	8007796 <checkint+0x2a>
 8007788:	4203      	tst	r3, r0
 800778a:	bf0c      	ite	eq
 800778c:	2002      	moveq	r0, #2
 800778e:	2001      	movne	r0, #1
 8007790:	4770      	bx	lr
 8007792:	2002      	movs	r0, #2
 8007794:	4770      	bx	lr
 8007796:	2000      	movs	r0, #0
 8007798:	4770      	bx	lr
 800779a:	0000      	movs	r0, r0
 800779c:	0000      	movs	r0, r0
	...

080077a0 <powf>:
 80077a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077a2:	ee10 1a10 	vmov	r1, s0
 80077a6:	ee10 4a90 	vmov	r4, s1
 80077aa:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80077ae:	0062      	lsls	r2, r4, #1
 80077b0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80077b4:	eef0 7a40 	vmov.f32	s15, s0
 80077b8:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 80077bc:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80077c0:	d252      	bcs.n	8007868 <powf+0xc8>
 80077c2:	4298      	cmp	r0, r3
 80077c4:	d252      	bcs.n	800786c <powf+0xcc>
 80077c6:	2000      	movs	r0, #0
 80077c8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80077cc:	4ca0      	ldr	r4, [pc, #640]	; (8007a50 <powf+0x2b0>)
 80077ce:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80077d2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80077d6:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 80077da:	0dd2      	lsrs	r2, r2, #23
 80077dc:	05d2      	lsls	r2, r2, #23
 80077de:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 80077e2:	1a8b      	subs	r3, r1, r2
 80077e4:	ed95 6b00 	vldr	d6, [r5]
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	15d2      	asrs	r2, r2, #23
 80077ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80077f2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80077f6:	ed95 6b02 	vldr	d6, [r5, #8]
 80077fa:	ee25 2b05 	vmul.f64	d2, d5, d5
 80077fe:	ee22 1b02 	vmul.f64	d1, d2, d2
 8007802:	ee07 2a90 	vmov	s15, r2
 8007806:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 800780a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800780e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007812:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8007816:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 800781a:	eea5 3b06 	vfma.f64	d3, d5, d6
 800781e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8007822:	eea5 6b04 	vfma.f64	d6, d5, d4
 8007826:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 800782a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800782e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8007832:	eea2 7b06 	vfma.f64	d7, d2, d6
 8007836:	eea3 7b01 	vfma.f64	d7, d3, d1
 800783a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800783e:	ee10 3a90 	vmov	r3, s1
 8007842:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8007846:	f248 03bf 	movw	r3, #32959	; 0x80bf
 800784a:	429a      	cmp	r2, r3
 800784c:	f0c0 80b1 	bcc.w	80079b2 <powf+0x212>
 8007850:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8007a30 <powf+0x290>
 8007854:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785c:	dd79      	ble.n	8007952 <powf+0x1b2>
 800785e:	b003      	add	sp, #12
 8007860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007864:	f7ff bef0 	b.w	8007648 <__math_oflowf>
 8007868:	4298      	cmp	r0, r3
 800786a:	d32d      	bcc.n	80078c8 <powf+0x128>
 800786c:	b952      	cbnz	r2, 8007884 <powf+0xe4>
 800786e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8007878:	f240 80c9 	bls.w	8007a0e <powf+0x26e>
 800787c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8007880:	b003      	add	sp, #12
 8007882:	bd30      	pop	{r4, r5, pc}
 8007884:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8007888:	d105      	bne.n	8007896 <powf+0xf6>
 800788a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800788e:	0064      	lsls	r4, r4, #1
 8007890:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8007894:	e7f0      	b.n	8007878 <powf+0xd8>
 8007896:	004b      	lsls	r3, r1, #1
 8007898:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800789c:	d8ee      	bhi.n	800787c <powf+0xdc>
 800789e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80078a2:	d1eb      	bne.n	800787c <powf+0xdc>
 80078a4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80078a8:	f000 80b1 	beq.w	8007a0e <powf+0x26e>
 80078ac:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80078b0:	ea6f 0404 	mvn.w	r4, r4
 80078b4:	bf34      	ite	cc
 80078b6:	2300      	movcc	r3, #0
 80078b8:	2301      	movcs	r3, #1
 80078ba:	0fe4      	lsrs	r4, r4, #31
 80078bc:	42a3      	cmp	r3, r4
 80078be:	f040 80a9 	bne.w	8007a14 <powf+0x274>
 80078c2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80078c6:	e7db      	b.n	8007880 <powf+0xe0>
 80078c8:	004d      	lsls	r5, r1, #1
 80078ca:	1e6a      	subs	r2, r5, #1
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d31c      	bcc.n	800790a <powf+0x16a>
 80078d0:	2900      	cmp	r1, #0
 80078d2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80078d6:	da0f      	bge.n	80078f8 <powf+0x158>
 80078d8:	ee10 0a90 	vmov	r0, s1
 80078dc:	f7ff ff46 	bl	800776c <checkint>
 80078e0:	2801      	cmp	r0, #1
 80078e2:	d109      	bne.n	80078f8 <powf+0x158>
 80078e4:	eeb1 0a40 	vneg.f32	s0, s0
 80078e8:	b945      	cbnz	r5, 80078fc <powf+0x15c>
 80078ea:	2c00      	cmp	r4, #0
 80078ec:	dac8      	bge.n	8007880 <powf+0xe0>
 80078ee:	b003      	add	sp, #12
 80078f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078f4:	f7ff beae 	b.w	8007654 <__math_divzerof>
 80078f8:	2000      	movs	r0, #0
 80078fa:	e7f5      	b.n	80078e8 <powf+0x148>
 80078fc:	2c00      	cmp	r4, #0
 80078fe:	dabf      	bge.n	8007880 <powf+0xe0>
 8007900:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007904:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007908:	e7ba      	b.n	8007880 <powf+0xe0>
 800790a:	2900      	cmp	r1, #0
 800790c:	da1f      	bge.n	800794e <powf+0x1ae>
 800790e:	ee10 0a90 	vmov	r0, s1
 8007912:	f7ff ff2b 	bl	800776c <checkint>
 8007916:	b920      	cbnz	r0, 8007922 <powf+0x182>
 8007918:	b003      	add	sp, #12
 800791a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800791e:	f7ff bea9 	b.w	8007674 <__math_invalidf>
 8007922:	2801      	cmp	r0, #1
 8007924:	bf14      	ite	ne
 8007926:	2000      	movne	r0, #0
 8007928:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800792c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007930:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007934:	f4bf af48 	bcs.w	80077c8 <powf+0x28>
 8007938:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8007a54 <powf+0x2b4>
 800793c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007940:	ee10 3a10 	vmov	r3, s0
 8007944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007948:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800794c:	e73c      	b.n	80077c8 <powf+0x28>
 800794e:	2000      	movs	r0, #0
 8007950:	e7ee      	b.n	8007930 <powf+0x190>
 8007952:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8007a38 <powf+0x298>
 8007956:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800795a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795e:	dd10      	ble.n	8007982 <powf+0x1e2>
 8007960:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8007964:	2800      	cmp	r0, #0
 8007966:	d158      	bne.n	8007a1a <powf+0x27a>
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	eddd 7a00 	vldr	s15, [sp]
 800796e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007976:	eef4 7a47 	vcmp.f32	s15, s14
 800797a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797e:	f47f af6e 	bne.w	800785e <powf+0xbe>
 8007982:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007a40 <powf+0x2a0>
 8007986:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800798a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800798e:	d804      	bhi.n	800799a <powf+0x1fa>
 8007990:	b003      	add	sp, #12
 8007992:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007996:	f7ff be4b 	b.w	8007630 <__math_uflowf>
 800799a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8007a48 <powf+0x2a8>
 800799e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80079a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a6:	d504      	bpl.n	80079b2 <powf+0x212>
 80079a8:	b003      	add	sp, #12
 80079aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079ae:	f7ff be45 	b.w	800763c <__math_may_uflowf>
 80079b2:	4b29      	ldr	r3, [pc, #164]	; (8007a58 <powf+0x2b8>)
 80079b4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 80079b8:	ee30 6b07 	vadd.f64	d6, d0, d7
 80079bc:	ee16 2a10 	vmov	r2, s12
 80079c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80079c4:	f002 011f 	and.w	r1, r2, #31
 80079c8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80079cc:	ee30 7b47 	vsub.f64	d7, d0, d7
 80079d0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80079d4:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80079d8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80079dc:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80079e0:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80079e4:	eea7 6b05 	vfma.f64	d6, d7, d5
 80079e8:	686d      	ldr	r5, [r5, #4]
 80079ea:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80079ee:	1882      	adds	r2, r0, r2
 80079f0:	2300      	movs	r3, #0
 80079f2:	1918      	adds	r0, r3, r4
 80079f4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80079f8:	eea7 0b05 	vfma.f64	d0, d7, d5
 80079fc:	ec41 0b17 	vmov	d7, r0, r1
 8007a00:	eea6 0b04 	vfma.f64	d0, d6, d4
 8007a04:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007a08:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007a0c:	e738      	b.n	8007880 <powf+0xe0>
 8007a0e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007a12:	e735      	b.n	8007880 <powf+0xe0>
 8007a14:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007a5c <powf+0x2bc>
 8007a18:	e732      	b.n	8007880 <powf+0xe0>
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	eddd 7a01 	vldr	s15, [sp, #4]
 8007a20:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a28:	e7a5      	b.n	8007976 <powf+0x1d6>
 8007a2a:	bf00      	nop
 8007a2c:	f3af 8000 	nop.w
 8007a30:	ffd1d571 	.word	0xffd1d571
 8007a34:	405fffff 	.word	0x405fffff
 8007a38:	ffa3aae2 	.word	0xffa3aae2
 8007a3c:	405fffff 	.word	0x405fffff
 8007a40:	00000000 	.word	0x00000000
 8007a44:	c062c000 	.word	0xc062c000
 8007a48:	00000000 	.word	0x00000000
 8007a4c:	c062a000 	.word	0xc062a000
 8007a50:	080088f0 	.word	0x080088f0
 8007a54:	4b000000 	.word	0x4b000000
 8007a58:	08008688 	.word	0x08008688
 8007a5c:	00000000 	.word	0x00000000

08007a60 <tanf>:
 8007a60:	ee10 3a10 	vmov	r3, s0
 8007a64:	b507      	push	{r0, r1, r2, lr}
 8007a66:	4a12      	ldr	r2, [pc, #72]	; (8007ab0 <tanf+0x50>)
 8007a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	dc07      	bgt.n	8007a80 <tanf+0x20>
 8007a70:	eddf 0a10 	vldr	s1, [pc, #64]	; 8007ab4 <tanf+0x54>
 8007a74:	2001      	movs	r0, #1
 8007a76:	b003      	add	sp, #12
 8007a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a7c:	f000 bc54 	b.w	8008328 <__kernel_tanf>
 8007a80:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a84:	db04      	blt.n	8007a90 <tanf+0x30>
 8007a86:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007a8a:	b003      	add	sp, #12
 8007a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a90:	4668      	mov	r0, sp
 8007a92:	f000 f897 	bl	8007bc4 <__ieee754_rem_pio2f>
 8007a96:	0040      	lsls	r0, r0, #1
 8007a98:	f000 0002 	and.w	r0, r0, #2
 8007a9c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007aa0:	ed9d 0a00 	vldr	s0, [sp]
 8007aa4:	f1c0 0001 	rsb	r0, r0, #1
 8007aa8:	f000 fc3e 	bl	8008328 <__kernel_tanf>
 8007aac:	e7ed      	b.n	8007a8a <tanf+0x2a>
 8007aae:	bf00      	nop
 8007ab0:	3f490fda 	.word	0x3f490fda
 8007ab4:	00000000 	.word	0x00000000

08007ab8 <log10f>:
 8007ab8:	b508      	push	{r3, lr}
 8007aba:	ed2d 8b02 	vpush	{d8}
 8007abe:	eeb0 8a40 	vmov.f32	s16, s0
 8007ac2:	f000 f827 	bl	8007b14 <__ieee754_log10f>
 8007ac6:	eeb4 8a48 	vcmp.f32	s16, s16
 8007aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ace:	d60f      	bvs.n	8007af0 <log10f+0x38>
 8007ad0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad8:	d80a      	bhi.n	8007af0 <log10f+0x38>
 8007ada:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae2:	d108      	bne.n	8007af6 <log10f+0x3e>
 8007ae4:	f7ff fd5c 	bl	80075a0 <__errno>
 8007ae8:	2322      	movs	r3, #34	; 0x22
 8007aea:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007b0c <log10f+0x54>
 8007aee:	6003      	str	r3, [r0, #0]
 8007af0:	ecbd 8b02 	vpop	{d8}
 8007af4:	bd08      	pop	{r3, pc}
 8007af6:	f7ff fd53 	bl	80075a0 <__errno>
 8007afa:	ecbd 8b02 	vpop	{d8}
 8007afe:	2321      	movs	r3, #33	; 0x21
 8007b00:	6003      	str	r3, [r0, #0]
 8007b02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007b06:	4802      	ldr	r0, [pc, #8]	; (8007b10 <log10f+0x58>)
 8007b08:	f000 bd30 	b.w	800856c <nanf>
 8007b0c:	ff800000 	.word	0xff800000
 8007b10:	08008a18 	.word	0x08008a18

08007b14 <__ieee754_log10f>:
 8007b14:	b508      	push	{r3, lr}
 8007b16:	ee10 2a10 	vmov	r2, s0
 8007b1a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007b1e:	ed2d 8b02 	vpush	{d8}
 8007b22:	d108      	bne.n	8007b36 <__ieee754_log10f+0x22>
 8007b24:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007bac <__ieee754_log10f+0x98>
 8007b28:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007bb0 <__ieee754_log10f+0x9c>
 8007b2c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007b30:	ecbd 8b02 	vpop	{d8}
 8007b34:	bd08      	pop	{r3, pc}
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	da02      	bge.n	8007b40 <__ieee754_log10f+0x2c>
 8007b3a:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007b3e:	e7f3      	b.n	8007b28 <__ieee754_log10f+0x14>
 8007b40:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007b44:	db02      	blt.n	8007b4c <__ieee754_log10f+0x38>
 8007b46:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b4a:	e7f1      	b.n	8007b30 <__ieee754_log10f+0x1c>
 8007b4c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007b50:	bfbf      	itttt	lt
 8007b52:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8007bb4 <__ieee754_log10f+0xa0>
 8007b56:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007b5a:	f06f 0118 	mvnlt.w	r1, #24
 8007b5e:	ee17 2a90 	vmovlt	r2, s15
 8007b62:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007b66:	bfa8      	it	ge
 8007b68:	2100      	movge	r1, #0
 8007b6a:	3b7f      	subs	r3, #127	; 0x7f
 8007b6c:	440b      	add	r3, r1
 8007b6e:	0fd9      	lsrs	r1, r3, #31
 8007b70:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007b74:	ee07 3a90 	vmov	s15, r3
 8007b78:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007b7c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8007b80:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007b84:	ee00 3a10 	vmov	s0, r3
 8007b88:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007b8c:	f7ff fd88 	bl	80076a0 <logf>
 8007b90:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007bb8 <__ieee754_log10f+0xa4>
 8007b94:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007b98:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007bbc <__ieee754_log10f+0xa8>
 8007b9c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007ba0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007bc0 <__ieee754_log10f+0xac>
 8007ba4:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007ba8:	e7c2      	b.n	8007b30 <__ieee754_log10f+0x1c>
 8007baa:	bf00      	nop
 8007bac:	cc000000 	.word	0xcc000000
 8007bb0:	00000000 	.word	0x00000000
 8007bb4:	4c000000 	.word	0x4c000000
 8007bb8:	3ede5bd9 	.word	0x3ede5bd9
 8007bbc:	355427db 	.word	0x355427db
 8007bc0:	3e9a2080 	.word	0x3e9a2080

08007bc4 <__ieee754_rem_pio2f>:
 8007bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bc6:	ee10 6a10 	vmov	r6, s0
 8007bca:	4b8e      	ldr	r3, [pc, #568]	; (8007e04 <__ieee754_rem_pio2f+0x240>)
 8007bcc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007bd0:	429d      	cmp	r5, r3
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	eef0 7a40 	vmov.f32	s15, s0
 8007bd8:	4604      	mov	r4, r0
 8007bda:	dc05      	bgt.n	8007be8 <__ieee754_rem_pio2f+0x24>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	ed80 0a00 	vstr	s0, [r0]
 8007be2:	6043      	str	r3, [r0, #4]
 8007be4:	2000      	movs	r0, #0
 8007be6:	e01a      	b.n	8007c1e <__ieee754_rem_pio2f+0x5a>
 8007be8:	4b87      	ldr	r3, [pc, #540]	; (8007e08 <__ieee754_rem_pio2f+0x244>)
 8007bea:	429d      	cmp	r5, r3
 8007bec:	dc46      	bgt.n	8007c7c <__ieee754_rem_pio2f+0xb8>
 8007bee:	2e00      	cmp	r6, #0
 8007bf0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007e0c <__ieee754_rem_pio2f+0x248>
 8007bf4:	4b86      	ldr	r3, [pc, #536]	; (8007e10 <__ieee754_rem_pio2f+0x24c>)
 8007bf6:	f025 050f 	bic.w	r5, r5, #15
 8007bfa:	dd1f      	ble.n	8007c3c <__ieee754_rem_pio2f+0x78>
 8007bfc:	429d      	cmp	r5, r3
 8007bfe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007c02:	d00e      	beq.n	8007c22 <__ieee754_rem_pio2f+0x5e>
 8007c04:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007e14 <__ieee754_rem_pio2f+0x250>
 8007c08:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007c0c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007c10:	ed80 0a00 	vstr	s0, [r0]
 8007c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c18:	2001      	movs	r0, #1
 8007c1a:	edc4 7a01 	vstr	s15, [r4, #4]
 8007c1e:	b007      	add	sp, #28
 8007c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c22:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007e18 <__ieee754_rem_pio2f+0x254>
 8007c26:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007e1c <__ieee754_rem_pio2f+0x258>
 8007c2a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007c2e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007c32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c36:	edc0 6a00 	vstr	s13, [r0]
 8007c3a:	e7eb      	b.n	8007c14 <__ieee754_rem_pio2f+0x50>
 8007c3c:	429d      	cmp	r5, r3
 8007c3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007c42:	d00e      	beq.n	8007c62 <__ieee754_rem_pio2f+0x9e>
 8007c44:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007e14 <__ieee754_rem_pio2f+0x250>
 8007c48:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007c4c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007c50:	ed80 0a00 	vstr	s0, [r0]
 8007c54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c5c:	edc4 7a01 	vstr	s15, [r4, #4]
 8007c60:	e7dd      	b.n	8007c1e <__ieee754_rem_pio2f+0x5a>
 8007c62:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007e18 <__ieee754_rem_pio2f+0x254>
 8007c66:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007e1c <__ieee754_rem_pio2f+0x258>
 8007c6a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007c6e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007c72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c76:	edc0 6a00 	vstr	s13, [r0]
 8007c7a:	e7eb      	b.n	8007c54 <__ieee754_rem_pio2f+0x90>
 8007c7c:	4b68      	ldr	r3, [pc, #416]	; (8007e20 <__ieee754_rem_pio2f+0x25c>)
 8007c7e:	429d      	cmp	r5, r3
 8007c80:	dc72      	bgt.n	8007d68 <__ieee754_rem_pio2f+0x1a4>
 8007c82:	f7ff fd06 	bl	8007692 <fabsf>
 8007c86:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007e24 <__ieee754_rem_pio2f+0x260>
 8007c8a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007c8e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007c92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c9a:	ee17 0a90 	vmov	r0, s15
 8007c9e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007e0c <__ieee754_rem_pio2f+0x248>
 8007ca2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007ca6:	281f      	cmp	r0, #31
 8007ca8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007e14 <__ieee754_rem_pio2f+0x250>
 8007cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb0:	eeb1 6a47 	vneg.f32	s12, s14
 8007cb4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007cb8:	ee16 2a90 	vmov	r2, s13
 8007cbc:	dc1c      	bgt.n	8007cf8 <__ieee754_rem_pio2f+0x134>
 8007cbe:	495a      	ldr	r1, [pc, #360]	; (8007e28 <__ieee754_rem_pio2f+0x264>)
 8007cc0:	1e47      	subs	r7, r0, #1
 8007cc2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007cc6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007cca:	428b      	cmp	r3, r1
 8007ccc:	d014      	beq.n	8007cf8 <__ieee754_rem_pio2f+0x134>
 8007cce:	6022      	str	r2, [r4, #0]
 8007cd0:	ed94 7a00 	vldr	s14, [r4]
 8007cd4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007cd8:	2e00      	cmp	r6, #0
 8007cda:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007cde:	ed84 0a01 	vstr	s0, [r4, #4]
 8007ce2:	da9c      	bge.n	8007c1e <__ieee754_rem_pio2f+0x5a>
 8007ce4:	eeb1 7a47 	vneg.f32	s14, s14
 8007ce8:	eeb1 0a40 	vneg.f32	s0, s0
 8007cec:	ed84 7a00 	vstr	s14, [r4]
 8007cf0:	ed84 0a01 	vstr	s0, [r4, #4]
 8007cf4:	4240      	negs	r0, r0
 8007cf6:	e792      	b.n	8007c1e <__ieee754_rem_pio2f+0x5a>
 8007cf8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007cfc:	15eb      	asrs	r3, r5, #23
 8007cfe:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007d02:	2d08      	cmp	r5, #8
 8007d04:	dde3      	ble.n	8007cce <__ieee754_rem_pio2f+0x10a>
 8007d06:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007e18 <__ieee754_rem_pio2f+0x254>
 8007d0a:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007e1c <__ieee754_rem_pio2f+0x258>
 8007d0e:	eef0 6a40 	vmov.f32	s13, s0
 8007d12:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007d16:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007d1a:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007d1e:	eef0 7a40 	vmov.f32	s15, s0
 8007d22:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007d26:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007d2a:	ee15 2a90 	vmov	r2, s11
 8007d2e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007d32:	1a5b      	subs	r3, r3, r1
 8007d34:	2b19      	cmp	r3, #25
 8007d36:	dc04      	bgt.n	8007d42 <__ieee754_rem_pio2f+0x17e>
 8007d38:	edc4 5a00 	vstr	s11, [r4]
 8007d3c:	eeb0 0a66 	vmov.f32	s0, s13
 8007d40:	e7c6      	b.n	8007cd0 <__ieee754_rem_pio2f+0x10c>
 8007d42:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007e2c <__ieee754_rem_pio2f+0x268>
 8007d46:	eeb0 0a66 	vmov.f32	s0, s13
 8007d4a:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007d4e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007d52:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007e30 <__ieee754_rem_pio2f+0x26c>
 8007d56:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007d5a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007d5e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007d62:	ed84 7a00 	vstr	s14, [r4]
 8007d66:	e7b3      	b.n	8007cd0 <__ieee754_rem_pio2f+0x10c>
 8007d68:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007d6c:	db06      	blt.n	8007d7c <__ieee754_rem_pio2f+0x1b8>
 8007d6e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007d72:	edc0 7a01 	vstr	s15, [r0, #4]
 8007d76:	edc0 7a00 	vstr	s15, [r0]
 8007d7a:	e733      	b.n	8007be4 <__ieee754_rem_pio2f+0x20>
 8007d7c:	15ea      	asrs	r2, r5, #23
 8007d7e:	3a86      	subs	r2, #134	; 0x86
 8007d80:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007d84:	ee07 3a90 	vmov	s15, r3
 8007d88:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d8c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007e34 <__ieee754_rem_pio2f+0x270>
 8007d90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d98:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007d9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007da0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007da4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007da8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007dac:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007db0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007db4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dbc:	edcd 7a05 	vstr	s15, [sp, #20]
 8007dc0:	d11e      	bne.n	8007e00 <__ieee754_rem_pio2f+0x23c>
 8007dc2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dca:	bf14      	ite	ne
 8007dcc:	2302      	movne	r3, #2
 8007dce:	2301      	moveq	r3, #1
 8007dd0:	4919      	ldr	r1, [pc, #100]	; (8007e38 <__ieee754_rem_pio2f+0x274>)
 8007dd2:	9101      	str	r1, [sp, #4]
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	9100      	str	r1, [sp, #0]
 8007dd8:	a803      	add	r0, sp, #12
 8007dda:	4621      	mov	r1, r4
 8007ddc:	f000 f82e 	bl	8007e3c <__kernel_rem_pio2f>
 8007de0:	2e00      	cmp	r6, #0
 8007de2:	f6bf af1c 	bge.w	8007c1e <__ieee754_rem_pio2f+0x5a>
 8007de6:	edd4 7a00 	vldr	s15, [r4]
 8007dea:	eef1 7a67 	vneg.f32	s15, s15
 8007dee:	edc4 7a00 	vstr	s15, [r4]
 8007df2:	edd4 7a01 	vldr	s15, [r4, #4]
 8007df6:	eef1 7a67 	vneg.f32	s15, s15
 8007dfa:	edc4 7a01 	vstr	s15, [r4, #4]
 8007dfe:	e779      	b.n	8007cf4 <__ieee754_rem_pio2f+0x130>
 8007e00:	2303      	movs	r3, #3
 8007e02:	e7e5      	b.n	8007dd0 <__ieee754_rem_pio2f+0x20c>
 8007e04:	3f490fd8 	.word	0x3f490fd8
 8007e08:	4016cbe3 	.word	0x4016cbe3
 8007e0c:	3fc90f80 	.word	0x3fc90f80
 8007e10:	3fc90fd0 	.word	0x3fc90fd0
 8007e14:	37354443 	.word	0x37354443
 8007e18:	37354400 	.word	0x37354400
 8007e1c:	2e85a308 	.word	0x2e85a308
 8007e20:	43490f80 	.word	0x43490f80
 8007e24:	3f22f984 	.word	0x3f22f984
 8007e28:	08008a1c 	.word	0x08008a1c
 8007e2c:	2e85a300 	.word	0x2e85a300
 8007e30:	248d3132 	.word	0x248d3132
 8007e34:	43800000 	.word	0x43800000
 8007e38:	08008a9c 	.word	0x08008a9c

08007e3c <__kernel_rem_pio2f>:
 8007e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	ed2d 8b04 	vpush	{d8-d9}
 8007e44:	b0d9      	sub	sp, #356	; 0x164
 8007e46:	4688      	mov	r8, r1
 8007e48:	9002      	str	r0, [sp, #8]
 8007e4a:	49bb      	ldr	r1, [pc, #748]	; (8008138 <__kernel_rem_pio2f+0x2fc>)
 8007e4c:	9866      	ldr	r0, [sp, #408]	; 0x198
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8007e54:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8007e58:	1e59      	subs	r1, r3, #1
 8007e5a:	1d13      	adds	r3, r2, #4
 8007e5c:	db27      	blt.n	8007eae <__kernel_rem_pio2f+0x72>
 8007e5e:	f1b2 0b03 	subs.w	fp, r2, #3
 8007e62:	bf48      	it	mi
 8007e64:	f102 0b04 	addmi.w	fp, r2, #4
 8007e68:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8007e6c:	1c45      	adds	r5, r0, #1
 8007e6e:	00ec      	lsls	r4, r5, #3
 8007e70:	1a47      	subs	r7, r0, r1
 8007e72:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008148 <__kernel_rem_pio2f+0x30c>
 8007e76:	9403      	str	r4, [sp, #12]
 8007e78:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8007e7c:	eb0a 0c01 	add.w	ip, sl, r1
 8007e80:	ae1c      	add	r6, sp, #112	; 0x70
 8007e82:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8007e86:	2400      	movs	r4, #0
 8007e88:	4564      	cmp	r4, ip
 8007e8a:	dd12      	ble.n	8007eb2 <__kernel_rem_pio2f+0x76>
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	ac1c      	add	r4, sp, #112	; 0x70
 8007e90:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007e94:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8007e98:	f04f 0c00 	mov.w	ip, #0
 8007e9c:	45d4      	cmp	ip, sl
 8007e9e:	dc27      	bgt.n	8007ef0 <__kernel_rem_pio2f+0xb4>
 8007ea0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007ea4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008148 <__kernel_rem_pio2f+0x30c>
 8007ea8:	4627      	mov	r7, r4
 8007eaa:	2600      	movs	r6, #0
 8007eac:	e016      	b.n	8007edc <__kernel_rem_pio2f+0xa0>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e7dc      	b.n	8007e6c <__kernel_rem_pio2f+0x30>
 8007eb2:	42e7      	cmn	r7, r4
 8007eb4:	bf5d      	ittte	pl
 8007eb6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8007eba:	ee07 3a90 	vmovpl	s15, r3
 8007ebe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007ec2:	eef0 7a47 	vmovmi.f32	s15, s14
 8007ec6:	ece6 7a01 	vstmia	r6!, {s15}
 8007eca:	3401      	adds	r4, #1
 8007ecc:	e7dc      	b.n	8007e88 <__kernel_rem_pio2f+0x4c>
 8007ece:	ecf9 6a01 	vldmia	r9!, {s13}
 8007ed2:	ed97 7a00 	vldr	s14, [r7]
 8007ed6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007eda:	3601      	adds	r6, #1
 8007edc:	428e      	cmp	r6, r1
 8007ede:	f1a7 0704 	sub.w	r7, r7, #4
 8007ee2:	ddf4      	ble.n	8007ece <__kernel_rem_pio2f+0x92>
 8007ee4:	eceb 7a01 	vstmia	fp!, {s15}
 8007ee8:	f10c 0c01 	add.w	ip, ip, #1
 8007eec:	3404      	adds	r4, #4
 8007eee:	e7d5      	b.n	8007e9c <__kernel_rem_pio2f+0x60>
 8007ef0:	ab08      	add	r3, sp, #32
 8007ef2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007ef6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008144 <__kernel_rem_pio2f+0x308>
 8007efa:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008140 <__kernel_rem_pio2f+0x304>
 8007efe:	9304      	str	r3, [sp, #16]
 8007f00:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8007f04:	4656      	mov	r6, sl
 8007f06:	00b3      	lsls	r3, r6, #2
 8007f08:	9305      	str	r3, [sp, #20]
 8007f0a:	ab58      	add	r3, sp, #352	; 0x160
 8007f0c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8007f10:	ac08      	add	r4, sp, #32
 8007f12:	ab44      	add	r3, sp, #272	; 0x110
 8007f14:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8007f18:	46a4      	mov	ip, r4
 8007f1a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8007f1e:	4637      	mov	r7, r6
 8007f20:	2f00      	cmp	r7, #0
 8007f22:	f1a0 0004 	sub.w	r0, r0, #4
 8007f26:	dc4f      	bgt.n	8007fc8 <__kernel_rem_pio2f+0x18c>
 8007f28:	4628      	mov	r0, r5
 8007f2a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007f2e:	f000 fb23 	bl	8008578 <scalbnf>
 8007f32:	eeb0 8a40 	vmov.f32	s16, s0
 8007f36:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007f3a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007f3e:	f000 fad3 	bl	80084e8 <floorf>
 8007f42:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007f46:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007f50:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007f54:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007f58:	ee17 9a90 	vmov	r9, s15
 8007f5c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007f60:	dd44      	ble.n	8007fec <__kernel_rem_pio2f+0x1b0>
 8007f62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8007f66:	ab08      	add	r3, sp, #32
 8007f68:	f1c5 0e08 	rsb	lr, r5, #8
 8007f6c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8007f70:	fa47 f00e 	asr.w	r0, r7, lr
 8007f74:	4481      	add	r9, r0
 8007f76:	fa00 f00e 	lsl.w	r0, r0, lr
 8007f7a:	1a3f      	subs	r7, r7, r0
 8007f7c:	f1c5 0007 	rsb	r0, r5, #7
 8007f80:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8007f84:	4107      	asrs	r7, r0
 8007f86:	2f00      	cmp	r7, #0
 8007f88:	dd3f      	ble.n	800800a <__kernel_rem_pio2f+0x1ce>
 8007f8a:	f04f 0e00 	mov.w	lr, #0
 8007f8e:	f109 0901 	add.w	r9, r9, #1
 8007f92:	4673      	mov	r3, lr
 8007f94:	4576      	cmp	r6, lr
 8007f96:	dc6b      	bgt.n	8008070 <__kernel_rem_pio2f+0x234>
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	dd04      	ble.n	8007fa6 <__kernel_rem_pio2f+0x16a>
 8007f9c:	2d01      	cmp	r5, #1
 8007f9e:	d078      	beq.n	8008092 <__kernel_rem_pio2f+0x256>
 8007fa0:	2d02      	cmp	r5, #2
 8007fa2:	f000 8081 	beq.w	80080a8 <__kernel_rem_pio2f+0x26c>
 8007fa6:	2f02      	cmp	r7, #2
 8007fa8:	d12f      	bne.n	800800a <__kernel_rem_pio2f+0x1ce>
 8007faa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007fae:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007fb2:	b353      	cbz	r3, 800800a <__kernel_rem_pio2f+0x1ce>
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007fba:	f000 fadd 	bl	8008578 <scalbnf>
 8007fbe:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8007fc2:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007fc6:	e020      	b.n	800800a <__kernel_rem_pio2f+0x1ce>
 8007fc8:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007fcc:	3f01      	subs	r7, #1
 8007fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fd6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007fda:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007fde:	ecac 0a01 	vstmia	ip!, {s0}
 8007fe2:	ed90 0a00 	vldr	s0, [r0]
 8007fe6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007fea:	e799      	b.n	8007f20 <__kernel_rem_pio2f+0xe4>
 8007fec:	d105      	bne.n	8007ffa <__kernel_rem_pio2f+0x1be>
 8007fee:	1e70      	subs	r0, r6, #1
 8007ff0:	ab08      	add	r3, sp, #32
 8007ff2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8007ff6:	11ff      	asrs	r7, r7, #7
 8007ff8:	e7c5      	b.n	8007f86 <__kernel_rem_pio2f+0x14a>
 8007ffa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007ffe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008006:	da31      	bge.n	800806c <__kernel_rem_pio2f+0x230>
 8008008:	2700      	movs	r7, #0
 800800a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800800e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008012:	f040 809b 	bne.w	800814c <__kernel_rem_pio2f+0x310>
 8008016:	1e74      	subs	r4, r6, #1
 8008018:	46a4      	mov	ip, r4
 800801a:	2000      	movs	r0, #0
 800801c:	45d4      	cmp	ip, sl
 800801e:	da4a      	bge.n	80080b6 <__kernel_rem_pio2f+0x27a>
 8008020:	2800      	cmp	r0, #0
 8008022:	d07a      	beq.n	800811a <__kernel_rem_pio2f+0x2de>
 8008024:	ab08      	add	r3, sp, #32
 8008026:	3d08      	subs	r5, #8
 8008028:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 8081 	beq.w	8008134 <__kernel_rem_pio2f+0x2f8>
 8008032:	4628      	mov	r0, r5
 8008034:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008038:	00a5      	lsls	r5, r4, #2
 800803a:	f000 fa9d 	bl	8008578 <scalbnf>
 800803e:	aa44      	add	r2, sp, #272	; 0x110
 8008040:	1d2b      	adds	r3, r5, #4
 8008042:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008144 <__kernel_rem_pio2f+0x308>
 8008046:	18d1      	adds	r1, r2, r3
 8008048:	4622      	mov	r2, r4
 800804a:	2a00      	cmp	r2, #0
 800804c:	f280 80ae 	bge.w	80081ac <__kernel_rem_pio2f+0x370>
 8008050:	4622      	mov	r2, r4
 8008052:	2a00      	cmp	r2, #0
 8008054:	f2c0 80cc 	blt.w	80081f0 <__kernel_rem_pio2f+0x3b4>
 8008058:	a944      	add	r1, sp, #272	; 0x110
 800805a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800805e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800813c <__kernel_rem_pio2f+0x300>
 8008062:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008148 <__kernel_rem_pio2f+0x30c>
 8008066:	2000      	movs	r0, #0
 8008068:	1aa1      	subs	r1, r4, r2
 800806a:	e0b6      	b.n	80081da <__kernel_rem_pio2f+0x39e>
 800806c:	2702      	movs	r7, #2
 800806e:	e78c      	b.n	8007f8a <__kernel_rem_pio2f+0x14e>
 8008070:	6820      	ldr	r0, [r4, #0]
 8008072:	b94b      	cbnz	r3, 8008088 <__kernel_rem_pio2f+0x24c>
 8008074:	b118      	cbz	r0, 800807e <__kernel_rem_pio2f+0x242>
 8008076:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800807a:	6020      	str	r0, [r4, #0]
 800807c:	2001      	movs	r0, #1
 800807e:	f10e 0e01 	add.w	lr, lr, #1
 8008082:	3404      	adds	r4, #4
 8008084:	4603      	mov	r3, r0
 8008086:	e785      	b.n	8007f94 <__kernel_rem_pio2f+0x158>
 8008088:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800808c:	6020      	str	r0, [r4, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	e7f5      	b.n	800807e <__kernel_rem_pio2f+0x242>
 8008092:	1e74      	subs	r4, r6, #1
 8008094:	a808      	add	r0, sp, #32
 8008096:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800809a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800809e:	f10d 0c20 	add.w	ip, sp, #32
 80080a2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80080a6:	e77e      	b.n	8007fa6 <__kernel_rem_pio2f+0x16a>
 80080a8:	1e74      	subs	r4, r6, #1
 80080aa:	a808      	add	r0, sp, #32
 80080ac:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80080b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80080b4:	e7f3      	b.n	800809e <__kernel_rem_pio2f+0x262>
 80080b6:	ab08      	add	r3, sp, #32
 80080b8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80080bc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80080c0:	4318      	orrs	r0, r3
 80080c2:	e7ab      	b.n	800801c <__kernel_rem_pio2f+0x1e0>
 80080c4:	f10c 0c01 	add.w	ip, ip, #1
 80080c8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80080cc:	2c00      	cmp	r4, #0
 80080ce:	d0f9      	beq.n	80080c4 <__kernel_rem_pio2f+0x288>
 80080d0:	9b05      	ldr	r3, [sp, #20]
 80080d2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80080d6:	eb0d 0003 	add.w	r0, sp, r3
 80080da:	9b01      	ldr	r3, [sp, #4]
 80080dc:	18f4      	adds	r4, r6, r3
 80080de:	ab1c      	add	r3, sp, #112	; 0x70
 80080e0:	1c77      	adds	r7, r6, #1
 80080e2:	384c      	subs	r0, #76	; 0x4c
 80080e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080e8:	4466      	add	r6, ip
 80080ea:	42be      	cmp	r6, r7
 80080ec:	f6ff af0b 	blt.w	8007f06 <__kernel_rem_pio2f+0xca>
 80080f0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80080f4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80080f8:	ee07 3a90 	vmov	s15, r3
 80080fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008100:	f04f 0c00 	mov.w	ip, #0
 8008104:	ece4 7a01 	vstmia	r4!, {s15}
 8008108:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008148 <__kernel_rem_pio2f+0x30c>
 800810c:	46a1      	mov	r9, r4
 800810e:	458c      	cmp	ip, r1
 8008110:	dd07      	ble.n	8008122 <__kernel_rem_pio2f+0x2e6>
 8008112:	ece0 7a01 	vstmia	r0!, {s15}
 8008116:	3701      	adds	r7, #1
 8008118:	e7e7      	b.n	80080ea <__kernel_rem_pio2f+0x2ae>
 800811a:	9804      	ldr	r0, [sp, #16]
 800811c:	f04f 0c01 	mov.w	ip, #1
 8008120:	e7d2      	b.n	80080c8 <__kernel_rem_pio2f+0x28c>
 8008122:	ecfe 6a01 	vldmia	lr!, {s13}
 8008126:	ed39 7a01 	vldmdb	r9!, {s14}
 800812a:	f10c 0c01 	add.w	ip, ip, #1
 800812e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008132:	e7ec      	b.n	800810e <__kernel_rem_pio2f+0x2d2>
 8008134:	3c01      	subs	r4, #1
 8008136:	e775      	b.n	8008024 <__kernel_rem_pio2f+0x1e8>
 8008138:	08008de0 	.word	0x08008de0
 800813c:	08008db4 	.word	0x08008db4
 8008140:	43800000 	.word	0x43800000
 8008144:	3b800000 	.word	0x3b800000
 8008148:	00000000 	.word	0x00000000
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	eeb0 0a48 	vmov.f32	s0, s16
 8008152:	1a98      	subs	r0, r3, r2
 8008154:	f000 fa10 	bl	8008578 <scalbnf>
 8008158:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008140 <__kernel_rem_pio2f+0x304>
 800815c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008164:	db19      	blt.n	800819a <__kernel_rem_pio2f+0x35e>
 8008166:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008144 <__kernel_rem_pio2f+0x308>
 800816a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800816e:	aa08      	add	r2, sp, #32
 8008170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008174:	1c74      	adds	r4, r6, #1
 8008176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800817a:	3508      	adds	r5, #8
 800817c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008184:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008188:	ee10 3a10 	vmov	r3, s0
 800818c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008190:	ee17 3a90 	vmov	r3, s15
 8008194:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008198:	e74b      	b.n	8008032 <__kernel_rem_pio2f+0x1f6>
 800819a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800819e:	aa08      	add	r2, sp, #32
 80081a0:	ee10 3a10 	vmov	r3, s0
 80081a4:	4634      	mov	r4, r6
 80081a6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80081aa:	e742      	b.n	8008032 <__kernel_rem_pio2f+0x1f6>
 80081ac:	a808      	add	r0, sp, #32
 80081ae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80081b2:	9001      	str	r0, [sp, #4]
 80081b4:	ee07 0a90 	vmov	s15, r0
 80081b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081bc:	3a01      	subs	r2, #1
 80081be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80081c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80081c6:	ed61 7a01 	vstmdb	r1!, {s15}
 80081ca:	e73e      	b.n	800804a <__kernel_rem_pio2f+0x20e>
 80081cc:	ecfc 6a01 	vldmia	ip!, {s13}
 80081d0:	ecb6 7a01 	vldmia	r6!, {s14}
 80081d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80081d8:	3001      	adds	r0, #1
 80081da:	4550      	cmp	r0, sl
 80081dc:	dc01      	bgt.n	80081e2 <__kernel_rem_pio2f+0x3a6>
 80081de:	4288      	cmp	r0, r1
 80081e0:	ddf4      	ble.n	80081cc <__kernel_rem_pio2f+0x390>
 80081e2:	a858      	add	r0, sp, #352	; 0x160
 80081e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081e8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80081ec:	3a01      	subs	r2, #1
 80081ee:	e730      	b.n	8008052 <__kernel_rem_pio2f+0x216>
 80081f0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80081f2:	2a02      	cmp	r2, #2
 80081f4:	dc09      	bgt.n	800820a <__kernel_rem_pio2f+0x3ce>
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	dc2a      	bgt.n	8008250 <__kernel_rem_pio2f+0x414>
 80081fa:	d043      	beq.n	8008284 <__kernel_rem_pio2f+0x448>
 80081fc:	f009 0007 	and.w	r0, r9, #7
 8008200:	b059      	add	sp, #356	; 0x164
 8008202:	ecbd 8b04 	vpop	{d8-d9}
 8008206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800820c:	2b03      	cmp	r3, #3
 800820e:	d1f5      	bne.n	80081fc <__kernel_rem_pio2f+0x3c0>
 8008210:	ab30      	add	r3, sp, #192	; 0xc0
 8008212:	442b      	add	r3, r5
 8008214:	461a      	mov	r2, r3
 8008216:	4619      	mov	r1, r3
 8008218:	4620      	mov	r0, r4
 800821a:	2800      	cmp	r0, #0
 800821c:	f1a1 0104 	sub.w	r1, r1, #4
 8008220:	dc51      	bgt.n	80082c6 <__kernel_rem_pio2f+0x48a>
 8008222:	4621      	mov	r1, r4
 8008224:	2901      	cmp	r1, #1
 8008226:	f1a2 0204 	sub.w	r2, r2, #4
 800822a:	dc5c      	bgt.n	80082e6 <__kernel_rem_pio2f+0x4aa>
 800822c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008148 <__kernel_rem_pio2f+0x30c>
 8008230:	3304      	adds	r3, #4
 8008232:	2c01      	cmp	r4, #1
 8008234:	dc67      	bgt.n	8008306 <__kernel_rem_pio2f+0x4ca>
 8008236:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800823a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800823e:	2f00      	cmp	r7, #0
 8008240:	d167      	bne.n	8008312 <__kernel_rem_pio2f+0x4d6>
 8008242:	edc8 6a00 	vstr	s13, [r8]
 8008246:	ed88 7a01 	vstr	s14, [r8, #4]
 800824a:	edc8 7a02 	vstr	s15, [r8, #8]
 800824e:	e7d5      	b.n	80081fc <__kernel_rem_pio2f+0x3c0>
 8008250:	aa30      	add	r2, sp, #192	; 0xc0
 8008252:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008148 <__kernel_rem_pio2f+0x30c>
 8008256:	4413      	add	r3, r2
 8008258:	4622      	mov	r2, r4
 800825a:	2a00      	cmp	r2, #0
 800825c:	da24      	bge.n	80082a8 <__kernel_rem_pio2f+0x46c>
 800825e:	b34f      	cbz	r7, 80082b4 <__kernel_rem_pio2f+0x478>
 8008260:	eef1 7a47 	vneg.f32	s15, s14
 8008264:	edc8 7a00 	vstr	s15, [r8]
 8008268:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800826c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008270:	aa31      	add	r2, sp, #196	; 0xc4
 8008272:	2301      	movs	r3, #1
 8008274:	429c      	cmp	r4, r3
 8008276:	da20      	bge.n	80082ba <__kernel_rem_pio2f+0x47e>
 8008278:	b10f      	cbz	r7, 800827e <__kernel_rem_pio2f+0x442>
 800827a:	eef1 7a67 	vneg.f32	s15, s15
 800827e:	edc8 7a01 	vstr	s15, [r8, #4]
 8008282:	e7bb      	b.n	80081fc <__kernel_rem_pio2f+0x3c0>
 8008284:	aa30      	add	r2, sp, #192	; 0xc0
 8008286:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008148 <__kernel_rem_pio2f+0x30c>
 800828a:	4413      	add	r3, r2
 800828c:	2c00      	cmp	r4, #0
 800828e:	da05      	bge.n	800829c <__kernel_rem_pio2f+0x460>
 8008290:	b10f      	cbz	r7, 8008296 <__kernel_rem_pio2f+0x45a>
 8008292:	eef1 7a67 	vneg.f32	s15, s15
 8008296:	edc8 7a00 	vstr	s15, [r8]
 800829a:	e7af      	b.n	80081fc <__kernel_rem_pio2f+0x3c0>
 800829c:	ed33 7a01 	vldmdb	r3!, {s14}
 80082a0:	3c01      	subs	r4, #1
 80082a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082a6:	e7f1      	b.n	800828c <__kernel_rem_pio2f+0x450>
 80082a8:	ed73 7a01 	vldmdb	r3!, {s15}
 80082ac:	3a01      	subs	r2, #1
 80082ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80082b2:	e7d2      	b.n	800825a <__kernel_rem_pio2f+0x41e>
 80082b4:	eef0 7a47 	vmov.f32	s15, s14
 80082b8:	e7d4      	b.n	8008264 <__kernel_rem_pio2f+0x428>
 80082ba:	ecb2 7a01 	vldmia	r2!, {s14}
 80082be:	3301      	adds	r3, #1
 80082c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082c4:	e7d6      	b.n	8008274 <__kernel_rem_pio2f+0x438>
 80082c6:	edd1 7a00 	vldr	s15, [r1]
 80082ca:	edd1 6a01 	vldr	s13, [r1, #4]
 80082ce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80082d2:	3801      	subs	r0, #1
 80082d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082d8:	ed81 7a00 	vstr	s14, [r1]
 80082dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e0:	edc1 7a01 	vstr	s15, [r1, #4]
 80082e4:	e799      	b.n	800821a <__kernel_rem_pio2f+0x3de>
 80082e6:	edd2 7a00 	vldr	s15, [r2]
 80082ea:	edd2 6a01 	vldr	s13, [r2, #4]
 80082ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80082f2:	3901      	subs	r1, #1
 80082f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082f8:	ed82 7a00 	vstr	s14, [r2]
 80082fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008300:	edc2 7a01 	vstr	s15, [r2, #4]
 8008304:	e78e      	b.n	8008224 <__kernel_rem_pio2f+0x3e8>
 8008306:	ed33 7a01 	vldmdb	r3!, {s14}
 800830a:	3c01      	subs	r4, #1
 800830c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008310:	e78f      	b.n	8008232 <__kernel_rem_pio2f+0x3f6>
 8008312:	eef1 6a66 	vneg.f32	s13, s13
 8008316:	eeb1 7a47 	vneg.f32	s14, s14
 800831a:	edc8 6a00 	vstr	s13, [r8]
 800831e:	ed88 7a01 	vstr	s14, [r8, #4]
 8008322:	eef1 7a67 	vneg.f32	s15, s15
 8008326:	e790      	b.n	800824a <__kernel_rem_pio2f+0x40e>

08008328 <__kernel_tanf>:
 8008328:	b508      	push	{r3, lr}
 800832a:	ee10 3a10 	vmov	r3, s0
 800832e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008332:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8008336:	eef0 7a40 	vmov.f32	s15, s0
 800833a:	da17      	bge.n	800836c <__kernel_tanf+0x44>
 800833c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8008340:	ee17 1a10 	vmov	r1, s14
 8008344:	bb41      	cbnz	r1, 8008398 <__kernel_tanf+0x70>
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	4313      	orrs	r3, r2
 800834a:	d108      	bne.n	800835e <__kernel_tanf+0x36>
 800834c:	f7ff f9a1 	bl	8007692 <fabsf>
 8008350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008354:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008358:	eeb0 0a67 	vmov.f32	s0, s15
 800835c:	bd08      	pop	{r3, pc}
 800835e:	2801      	cmp	r0, #1
 8008360:	d0fa      	beq.n	8008358 <__kernel_tanf+0x30>
 8008362:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008366:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800836a:	e7f5      	b.n	8008358 <__kernel_tanf+0x30>
 800836c:	494c      	ldr	r1, [pc, #304]	; (80084a0 <__kernel_tanf+0x178>)
 800836e:	428a      	cmp	r2, r1
 8008370:	db12      	blt.n	8008398 <__kernel_tanf+0x70>
 8008372:	2b00      	cmp	r3, #0
 8008374:	bfb8      	it	lt
 8008376:	eef1 7a40 	vneglt.f32	s15, s0
 800837a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80084a4 <__kernel_tanf+0x17c>
 800837e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008382:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80084a8 <__kernel_tanf+0x180>
 8008386:	bfb8      	it	lt
 8008388:	eef1 0a60 	vneglt.f32	s1, s1
 800838c:	ee70 0a60 	vsub.f32	s1, s0, s1
 8008390:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8008394:	eddf 0a45 	vldr	s1, [pc, #276]	; 80084ac <__kernel_tanf+0x184>
 8008398:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084b0 <__kernel_tanf+0x188>
 800839c:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80084b4 <__kernel_tanf+0x18c>
 80083a0:	ed9f 5a45 	vldr	s10, [pc, #276]	; 80084b8 <__kernel_tanf+0x190>
 80083a4:	493e      	ldr	r1, [pc, #248]	; (80084a0 <__kernel_tanf+0x178>)
 80083a6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80083aa:	428a      	cmp	r2, r1
 80083ac:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80083b0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80083b4:	eddf 5a41 	vldr	s11, [pc, #260]	; 80084bc <__kernel_tanf+0x194>
 80083b8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80083bc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80084c0 <__kernel_tanf+0x198>
 80083c0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80083c4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80084c4 <__kernel_tanf+0x19c>
 80083c8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80083cc:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80084c8 <__kernel_tanf+0x1a0>
 80083d0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80083d4:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80084cc <__kernel_tanf+0x1a4>
 80083d8:	eee7 5a05 	vfma.f32	s11, s14, s10
 80083dc:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80084d0 <__kernel_tanf+0x1a8>
 80083e0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80083e4:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80084d4 <__kernel_tanf+0x1ac>
 80083e8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80083ec:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80084d8 <__kernel_tanf+0x1b0>
 80083f0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80083f4:	eddf 5a39 	vldr	s11, [pc, #228]	; 80084dc <__kernel_tanf+0x1b4>
 80083f8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80083fc:	eeb0 7a46 	vmov.f32	s14, s12
 8008400:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008404:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8008408:	eeb0 6a60 	vmov.f32	s12, s1
 800840c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8008410:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80084e0 <__kernel_tanf+0x1b8>
 8008414:	eee6 0a26 	vfma.f32	s1, s12, s13
 8008418:	eee5 0a07 	vfma.f32	s1, s10, s14
 800841c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008420:	db1d      	blt.n	800845e <__kernel_tanf+0x136>
 8008422:	ee06 0a90 	vmov	s13, r0
 8008426:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800842a:	ee27 6a07 	vmul.f32	s12, s14, s14
 800842e:	ee37 7a00 	vadd.f32	s14, s14, s0
 8008432:	179b      	asrs	r3, r3, #30
 8008434:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	f1c3 0301 	rsb	r3, r3, #1
 8008440:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008444:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8008448:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800844c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008450:	ee07 3a90 	vmov	s15, r3
 8008454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008458:	ee67 7a80 	vmul.f32	s15, s15, s0
 800845c:	e77c      	b.n	8008358 <__kernel_tanf+0x30>
 800845e:	2801      	cmp	r0, #1
 8008460:	d01b      	beq.n	800849a <__kernel_tanf+0x172>
 8008462:	4b20      	ldr	r3, [pc, #128]	; (80084e4 <__kernel_tanf+0x1bc>)
 8008464:	ee17 2a10 	vmov	r2, s14
 8008468:	401a      	ands	r2, r3
 800846a:	ee06 2a10 	vmov	s12, r2
 800846e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008472:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008476:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800847a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800847e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008482:	ee16 2a90 	vmov	r2, s13
 8008486:	4013      	ands	r3, r2
 8008488:	ee07 3a90 	vmov	s15, r3
 800848c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008490:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8008494:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008498:	e75e      	b.n	8008358 <__kernel_tanf+0x30>
 800849a:	eef0 7a47 	vmov.f32	s15, s14
 800849e:	e75b      	b.n	8008358 <__kernel_tanf+0x30>
 80084a0:	3f2ca140 	.word	0x3f2ca140
 80084a4:	3f490fda 	.word	0x3f490fda
 80084a8:	33222168 	.word	0x33222168
 80084ac:	00000000 	.word	0x00000000
 80084b0:	b79bae5f 	.word	0xb79bae5f
 80084b4:	38a3f445 	.word	0x38a3f445
 80084b8:	37d95384 	.word	0x37d95384
 80084bc:	3a1a26c8 	.word	0x3a1a26c8
 80084c0:	3b6b6916 	.word	0x3b6b6916
 80084c4:	3cb327a4 	.word	0x3cb327a4
 80084c8:	3e088889 	.word	0x3e088889
 80084cc:	3895c07a 	.word	0x3895c07a
 80084d0:	398137b9 	.word	0x398137b9
 80084d4:	3abede48 	.word	0x3abede48
 80084d8:	3c11371f 	.word	0x3c11371f
 80084dc:	3d5d0dd1 	.word	0x3d5d0dd1
 80084e0:	3eaaaaab 	.word	0x3eaaaaab
 80084e4:	fffff000 	.word	0xfffff000

080084e8 <floorf>:
 80084e8:	ee10 3a10 	vmov	r3, s0
 80084ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80084f0:	3a7f      	subs	r2, #127	; 0x7f
 80084f2:	2a16      	cmp	r2, #22
 80084f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084f8:	dc2a      	bgt.n	8008550 <floorf+0x68>
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	da11      	bge.n	8008522 <floorf+0x3a>
 80084fe:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008560 <floorf+0x78>
 8008502:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008506:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800850a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850e:	dd05      	ble.n	800851c <floorf+0x34>
 8008510:	2b00      	cmp	r3, #0
 8008512:	da23      	bge.n	800855c <floorf+0x74>
 8008514:	4a13      	ldr	r2, [pc, #76]	; (8008564 <floorf+0x7c>)
 8008516:	2900      	cmp	r1, #0
 8008518:	bf18      	it	ne
 800851a:	4613      	movne	r3, r2
 800851c:	ee00 3a10 	vmov	s0, r3
 8008520:	4770      	bx	lr
 8008522:	4911      	ldr	r1, [pc, #68]	; (8008568 <floorf+0x80>)
 8008524:	4111      	asrs	r1, r2
 8008526:	420b      	tst	r3, r1
 8008528:	d0fa      	beq.n	8008520 <floorf+0x38>
 800852a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008560 <floorf+0x78>
 800852e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008532:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853a:	ddef      	ble.n	800851c <floorf+0x34>
 800853c:	2b00      	cmp	r3, #0
 800853e:	bfbe      	ittt	lt
 8008540:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008544:	fa40 f202 	asrlt.w	r2, r0, r2
 8008548:	189b      	addlt	r3, r3, r2
 800854a:	ea23 0301 	bic.w	r3, r3, r1
 800854e:	e7e5      	b.n	800851c <floorf+0x34>
 8008550:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008554:	d3e4      	bcc.n	8008520 <floorf+0x38>
 8008556:	ee30 0a00 	vadd.f32	s0, s0, s0
 800855a:	4770      	bx	lr
 800855c:	2300      	movs	r3, #0
 800855e:	e7dd      	b.n	800851c <floorf+0x34>
 8008560:	7149f2ca 	.word	0x7149f2ca
 8008564:	bf800000 	.word	0xbf800000
 8008568:	007fffff 	.word	0x007fffff

0800856c <nanf>:
 800856c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008574 <nanf+0x8>
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	7fc00000 	.word	0x7fc00000

08008578 <scalbnf>:
 8008578:	ee10 3a10 	vmov	r3, s0
 800857c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008580:	d024      	beq.n	80085cc <scalbnf+0x54>
 8008582:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008586:	d302      	bcc.n	800858e <scalbnf+0x16>
 8008588:	ee30 0a00 	vadd.f32	s0, s0, s0
 800858c:	4770      	bx	lr
 800858e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008592:	d121      	bne.n	80085d8 <scalbnf+0x60>
 8008594:	4b29      	ldr	r3, [pc, #164]	; (800863c <scalbnf+0xc4>)
 8008596:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8008640 <scalbnf+0xc8>
 800859a:	4298      	cmp	r0, r3
 800859c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80085a0:	db15      	blt.n	80085ce <scalbnf+0x56>
 80085a2:	ee10 3a10 	vmov	r3, s0
 80085a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80085aa:	3a19      	subs	r2, #25
 80085ac:	4402      	add	r2, r0
 80085ae:	2afe      	cmp	r2, #254	; 0xfe
 80085b0:	dd14      	ble.n	80085dc <scalbnf+0x64>
 80085b2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008644 <scalbnf+0xcc>
 80085b6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008648 <scalbnf+0xd0>
 80085ba:	ee10 3a10 	vmov	r3, s0
 80085be:	eeb0 7a67 	vmov.f32	s14, s15
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	fe67 7aa6 	vselge.f32	s15, s15, s13
 80085c8:	ee27 0a27 	vmul.f32	s0, s14, s15
 80085cc:	4770      	bx	lr
 80085ce:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800864c <scalbnf+0xd4>
 80085d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80085d6:	4770      	bx	lr
 80085d8:	0dd2      	lsrs	r2, r2, #23
 80085da:	e7e7      	b.n	80085ac <scalbnf+0x34>
 80085dc:	2a00      	cmp	r2, #0
 80085de:	dd06      	ble.n	80085ee <scalbnf+0x76>
 80085e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80085e4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80085e8:	ee00 3a10 	vmov	s0, r3
 80085ec:	4770      	bx	lr
 80085ee:	f112 0f16 	cmn.w	r2, #22
 80085f2:	da19      	bge.n	8008628 <scalbnf+0xb0>
 80085f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80085f8:	4298      	cmp	r0, r3
 80085fa:	ee10 3a10 	vmov	r3, s0
 80085fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008602:	dd09      	ble.n	8008618 <scalbnf+0xa0>
 8008604:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008644 <scalbnf+0xcc>
 8008608:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8008648 <scalbnf+0xd0>
 800860c:	eef0 7a40 	vmov.f32	s15, s0
 8008610:	2b00      	cmp	r3, #0
 8008612:	fe00 0a07 	vseleq.f32	s0, s0, s14
 8008616:	e7dc      	b.n	80085d2 <scalbnf+0x5a>
 8008618:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800864c <scalbnf+0xd4>
 800861c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008650 <scalbnf+0xd8>
 8008620:	eef0 7a40 	vmov.f32	s15, s0
 8008624:	2b00      	cmp	r3, #0
 8008626:	e7f4      	b.n	8008612 <scalbnf+0x9a>
 8008628:	3219      	adds	r2, #25
 800862a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800862e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008632:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008654 <scalbnf+0xdc>
 8008636:	ee07 3a10 	vmov	s14, r3
 800863a:	e7c5      	b.n	80085c8 <scalbnf+0x50>
 800863c:	ffff3cb0 	.word	0xffff3cb0
 8008640:	4c000000 	.word	0x4c000000
 8008644:	7149f2ca 	.word	0x7149f2ca
 8008648:	f149f2ca 	.word	0xf149f2ca
 800864c:	0da24260 	.word	0x0da24260
 8008650:	8da24260 	.word	0x8da24260
 8008654:	33000000 	.word	0x33000000

08008658 <_init>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	bf00      	nop
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr

08008664 <_fini>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	bf00      	nop
 8008668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866a:	bc08      	pop	{r3}
 800866c:	469e      	mov	lr, r3
 800866e:	4770      	bx	lr
