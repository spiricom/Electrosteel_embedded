
electrosteel_strings_STM32H730.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  080085a8  080085a8  000185a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  08008d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0001dd1c  20000064  08008ddc  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2001dd80  08008ddc  0002dd80  2**0
                  ALLOC
  8 .sram1_bss    000186a0  24000000  24000000  00030000  2**5
                  ALLOC
  9 .RAM_D2       000001a0  30000000  30000000  00030000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 12 .debug_info   000289f4  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004577  00000000  00000000  00048ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00013b2b  00000000  00000000  0004d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  00060b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000028a4  00000000  00000000  000621d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003632e  00000000  00000000  00064a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027050  00000000  00000000  0009adaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015b344  00000000  00000000  000c1dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dec  00000000  00000000  0021d140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00221f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000064 	.word	0x20000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800858c 	.word	0x0800858c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	20000068 	.word	0x20000068
 800030c:	0800858c 	.word	0x0800858c

08000310 <randomNumber>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
float randomNumber(void) {
 8000310:	b500      	push	{lr}
 8000312:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8000314:	4807      	ldr	r0, [pc, #28]	; (8000334 <randomNumber+0x24>)
 8000316:	a901      	add	r1, sp, #4
 8000318:	f005 ffec 	bl	80062f4 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800031c:	eddd 7a01 	vldr	s15, [sp, #4]
 8000320:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000338 <randomNumber+0x28>
 8000324:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 8000328:	ee27 0a80 	vmul.f32	s0, s15, s0
 800032c:	b003      	add	sp, #12
 800032e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000332:	bf00      	nop
 8000334:	20000340 	.word	0x20000340
 8000338:	2f80000d 	.word	0x2f80000d

0800033c <SystemClock_Config>:
{
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000340:	224c      	movs	r2, #76	; 0x4c
 8000342:	2100      	movs	r1, #0
 8000344:	a80a      	add	r0, sp, #40	; 0x28
 8000346:	f007 f8e5 	bl	8007514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034a:	2220      	movs	r2, #32
 800034c:	2100      	movs	r1, #0
 800034e:	a802      	add	r0, sp, #8
 8000350:	f007 f8e0 	bl	8007514 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000354:	2002      	movs	r0, #2
 8000356:	f003 fee5 	bl	8004124 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800035a:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <SystemClock_Config+0xa4>)
 800035c:	2300      	movs	r3, #0
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	6993      	ldr	r3, [r2, #24]
 8000362:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	6993      	ldr	r3, [r2, #24]
 800036a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000372:	6993      	ldr	r3, [r2, #24]
 8000374:	049b      	lsls	r3, r3, #18
 8000376:	d5fc      	bpl.n	8000372 <SystemClock_Config+0x36>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800037a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800037c:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800037e:	2021      	movs	r0, #33	; 0x21
 8000380:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000384:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000386:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 420;
 8000388:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800038a:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800038c:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 420;
 8000390:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000394:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 420;
 800039a:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039e:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003a2:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f003 ff67 	bl	8004278 <HAL_RCC_OscConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	b108      	cbz	r0, 80003b2 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ae:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003b2:	2240      	movs	r2, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003b6:	2308      	movs	r3, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	253f      	movs	r5, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ba:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2403      	movs	r4, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003be:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003c4:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003c6:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ce:	e9cd 3208 	strd	r3, r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d2:	f004 fa9d 	bl	8004910 <HAL_RCC_ClockConfig>
 80003d6:	b108      	cbz	r0, 80003dc <SystemClock_Config+0xa0>
 80003d8:	b672      	cpsid	i
  while (1)
 80003da:	e7fe      	b.n	80003da <SystemClock_Config+0x9e>
}
 80003dc:	b01f      	add	sp, #124	; 0x7c
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	58024800 	.word	0x58024800

080003e4 <MPU_Conf>:
{
 80003e4:	b500      	push	{lr}
 80003e6:	b085      	sub	sp, #20
	  HAL_MPU_Disable();
 80003e8:	f002 f9a0 	bl	800272c <HAL_MPU_Disable>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80003ec:	2301      	movs	r3, #1
	  MPU_InitStruct.BaseAddress = 0x30000000;
 80003ee:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80003f2:	4a07      	ldr	r2, [pc, #28]	; (8000410 <MPU_Conf+0x2c>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80003f4:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80003f6:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80003fa:	9303      	str	r3, [sp, #12]
 80003fc:	e9cd 1201 	strd	r1, r2, [sp, #4]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000400:	f002 f9b2 	bl	8002768 <HAL_MPU_ConfigRegion>
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000404:	2004      	movs	r0, #4
 8000406:	f002 f99f 	bl	8002748 <HAL_MPU_Enable>
}
 800040a:	b005      	add	sp, #20
 800040c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000410:	0301000e 	.word	0x0301000e

08000414 <main>:
{
 8000414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000418:	ed2d 8b06 	vpush	{d8-d10}
 800041c:	b094      	sub	sp, #80	; 0x50
	MPU_Conf();
 800041e:	f7ff ffe1 	bl	80003e4 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000422:	4ac1      	ldr	r2, [pc, #772]	; (8000728 <main+0x314>)
 8000424:	6953      	ldr	r3, [r2, #20]
 8000426:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800042a:	d111      	bne.n	8000450 <main+0x3c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800042c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000430:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000434:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000438:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800043c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000440:	6953      	ldr	r3, [r2, #20]
 8000442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000446:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000448:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800044c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000450:	48b5      	ldr	r0, [pc, #724]	; (8000728 <main+0x314>)
 8000452:	6943      	ldr	r3, [r0, #20]
 8000454:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000458:	d124      	bne.n	80004a4 <main+0x90>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800045a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800045e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000462:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000466:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800046a:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800046e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000472:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000474:	ea04 010c 	and.w	r1, r4, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000478:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800047a:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800047e:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000480:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000484:	1c5a      	adds	r2, r3, #1
 8000486:	d1f8      	bne.n	800047a <main+0x66>
    } while(sets-- != 0U);
 8000488:	3c20      	subs	r4, #32
 800048a:	f114 0f20 	cmn.w	r4, #32
 800048e:	d1f1      	bne.n	8000474 <main+0x60>
 8000490:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000494:	6943      	ldr	r3, [r0, #20]
 8000496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800049a:	6143      	str	r3, [r0, #20]
 800049c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004a0:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004a6:	4da1      	ldr	r5, [pc, #644]	; (800072c <main+0x318>)
  HAL_Init();
 80004a8:	f001 f842 	bl	8001530 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ac:	2601      	movs	r6, #1
  SystemClock_Config();
 80004ae:	f7ff ff45 	bl	800033c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 80004b4:	4622      	mov	r2, r4
 80004b6:	f248 0101 	movw	r1, #32769	; 0x8001
 80004ba:	489d      	ldr	r0, [pc, #628]	; (8000730 <main+0x31c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004bc:	2703      	movs	r7, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80004c2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004c6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ce:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80004d2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004da:	9302      	str	r3, [sp, #8]
 80004dc:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80004ea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	9303      	str	r3, [sp, #12]
 80004f4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80004fa:	f043 0304 	orr.w	r3, r3, #4
 80004fe:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000502:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	9304      	str	r3, [sp, #16]
 800050c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000512:	f043 0302 	orr.w	r3, r3, #2
 8000516:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800051a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	9305      	str	r3, [sp, #20]
 8000524:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000526:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000532:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000536:	f003 0308 	and.w	r3, r3, #8
 800053a:	9306      	str	r3, [sp, #24]
 800053c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800053e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000546:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800054a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800054e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000552:	9307      	str	r3, [sp, #28]
 8000554:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);
 8000556:	f003 fde1 	bl	800411c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800055a:	4622      	mov	r2, r4
 800055c:	2110      	movs	r1, #16
 800055e:	4875      	ldr	r0, [pc, #468]	; (8000734 <main+0x320>)
 8000560:	f003 fddc 	bl	800411c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 8000564:	f248 0301 	movw	r3, #32769	; 0x8001
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000568:	a90b      	add	r1, sp, #44	; 0x2c
 800056a:	4871      	ldr	r0, [pc, #452]	; (8000730 <main+0x31c>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0;
 800056c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800056e:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000574:	f003 fc98 	bl	8003ea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000578:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	a90b      	add	r1, sp, #44	; 0x2c
 800057c:	486d      	ldr	r0, [pc, #436]	; (8000734 <main+0x320>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000580:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000586:	f003 fc8f 	bl	8003ea8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800058e:	4622      	mov	r2, r4
 8000590:	4631      	mov	r1, r6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000592:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8000594:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000596:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 800059a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800059e:	4033      	ands	r3, r6
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 80005a4:	f002 f860 	bl	8002668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005a8:	200b      	movs	r0, #11
 80005aa:	f002 f89b 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 80005ae:	4622      	mov	r2, r4
 80005b0:	4631      	mov	r1, r6
 80005b2:	200c      	movs	r0, #12
 80005b4:	f002 f858 	bl	8002668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005b8:	200c      	movs	r0, #12
 80005ba:	f002 f893 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80005be:	4622      	mov	r2, r4
 80005c0:	4621      	mov	r1, r4
 80005c2:	200d      	movs	r0, #13
 80005c4:	f002 f850 	bl	8002668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80005c8:	200d      	movs	r0, #13
 80005ca:	f002 f88b 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80005ce:	485a      	ldr	r0, [pc, #360]	; (8000738 <main+0x324>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d4:	f8df c180 	ldr.w	ip, [pc, #384]	; 8000758 <main+0x344>
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80005d8:	f04f 5e00 	mov.w	lr, #536870912	; 0x20000000
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005dc:	6084      	str	r4, [r0, #8]
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80005de:	6584      	str	r4, [r0, #88]	; 0x58
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005e0:	e9c0 c300 	strd	ip, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80005e4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e8:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ec:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCPolynomial = 0x0;
 80005f0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80005f4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005f8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80005fc:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000600:	e9c0 4414 	strd	r4, r4, [r0, #80]	; 0x50
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000604:	e9c0 e306 	strd	lr, r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000608:	2407      	movs	r4, #7
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800060a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800060e:	60c4      	str	r4, [r0, #12]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000610:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000612:	f005 ff1f 	bl	8006454 <HAL_SPI_Init>
 8000616:	b108      	cbz	r0, 800061c <main+0x208>
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0x206>
  hspi3.Instance = SPI3;
 800061c:	4b47      	ldr	r3, [pc, #284]	; (800073c <main+0x328>)
 800061e:	4a48      	ldr	r2, [pc, #288]	; (8000740 <main+0x32c>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000620:	e9c3 0001 	strd	r0, r0, [r3, #4]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000624:	e9c3 4003 	strd	r4, r0, [r3, #12]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000628:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800062c:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi3.Init.CRCPolynomial = 0x0;
 8000630:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000634:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000638:	e9c3 000f 	strd	r0, r0, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800063c:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000640:	e9c3 0013 	strd	r0, r0, [r3, #76]	; 0x4c
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000644:	e9c3 0015 	strd	r0, r0, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000648:	4618      	mov	r0, r3
  hspi3.Instance = SPI3;
 800064a:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800064c:	f005 ff02 	bl	8006454 <HAL_SPI_Init>
 8000650:	b108      	cbz	r0, 8000656 <main+0x242>
 8000652:	b672      	cpsid	i
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0x240>
  hspi2.Instance = SPI2;
 8000656:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <main+0x330>)
 8000658:	4a3b      	ldr	r2, [pc, #236]	; (8000748 <main+0x334>)
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800065a:	6198      	str	r0, [r3, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800065c:	60dc      	str	r4, [r3, #12]
  hspi2.Instance = SPI2;
 800065e:	601a      	str	r2, [r3, #0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000660:	e9c3 0001 	strd	r0, r0, [r3, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000664:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000668:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi2.Init.CRCPolynomial = 0x0;
 800066c:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000670:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000674:	e9c3 000f 	strd	r0, r0, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000678:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800067c:	e9c3 0013 	strd	r0, r0, [r3, #76]	; 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000680:	e9c3 0015 	strd	r0, r0, [r3, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000684:	4618      	mov	r0, r3
 8000686:	f005 fee5 	bl	8006454 <HAL_SPI_Init>
 800068a:	4605      	mov	r5, r0
 800068c:	bb68      	cbnz	r0, 80006ea <main+0x2d6>
  ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	2224      	movs	r2, #36	; 0x24
 8000690:	4601      	mov	r1, r0
  ADC_MultiModeTypeDef multimode = {0};
 8000692:	900a      	str	r0, [sp, #40]	; 0x28
  hadc1.Instance = ADC1;
 8000694:	4c2d      	ldr	r4, [pc, #180]	; (800074c <main+0x338>)
  ADC_MultiModeTypeDef multimode = {0};
 8000696:	e9cd 0008 	strd	r0, r0, [sp, #32]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	a80b      	add	r0, sp, #44	; 0x2c
 800069c:	f006 ff3a 	bl	8007514 <memset>
  hadc1.Init.Oversampling.Ratio = 2;
 80006a0:	2302      	movs	r3, #2
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a2:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006a6:	2220      	movs	r2, #32
  hadc1.Init.Oversampling.Ratio = 2;
 80006a8:	64a3      	str	r3, [r4, #72]	; 0x48
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80006aa:	f240 4301 	movw	r3, #1025	; 0x401
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ae:	6425      	str	r5, [r4, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b0:	4620      	mov	r0, r4
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80006b2:	6563      	str	r3, [r4, #84]	; 0x54
  hadc1.Instance = ADC1;
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <main+0x33c>)
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80006b6:	6525      	str	r5, [r4, #80]	; 0x50
  hadc1.Instance = ADC1;
 80006b8:	6023      	str	r3, [r4, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006ba:	2308      	movs	r3, #8
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006bc:	6327      	str	r7, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006be:	6163      	str	r3, [r4, #20]
  hadc1.Init.NbrOfConversion = 10;
 80006c0:	230a      	movs	r3, #10
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006c2:	6126      	str	r6, [r4, #16]
  hadc1.Init.NbrOfConversion = 10;
 80006c4:	61e3      	str	r3, [r4, #28]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hadc1.Init.OversamplingMode = ENABLE;
 80006ca:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006ce:	64e2      	str	r2, [r4, #76]	; 0x4c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006d0:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006d2:	e9c4 5501 	strd	r5, r5, [r4, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d6:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006da:	f44f 7580 	mov.w	r5, #256	; 0x100
 80006de:	8325      	strh	r5, [r4, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e0:	f001 fdd0 	bl	8002284 <HAL_ADC_Init>
 80006e4:	b118      	cbz	r0, 80006ee <main+0x2da>
 80006e6:	b672      	cpsid	i
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x2d4>
 80006ea:	b672      	cpsid	i
 80006ec:	e7fe      	b.n	80006ec <main+0x2d8>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ee:	9008      	str	r0, [sp, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006f0:	a908      	add	r1, sp, #32
 80006f2:	4620      	mov	r0, r4
 80006f4:	f001 ff22 	bl	800253c <HAL_ADCEx_MultiModeConfigChannel>
 80006f8:	b108      	cbz	r0, 80006fe <main+0x2ea>
 80006fa:	b672      	cpsid	i
  while (1)
 80006fc:	e7fe      	b.n	80006fc <main+0x2e8>
  sConfig.Channel = ADC_CHANNEL_16;
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <main+0x340>)
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000700:	2206      	movs	r2, #6
  sConfig.Offset = 0;
 8000702:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.Channel = ADC_CHANNEL_16;
 8000706:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000708:	2304      	movs	r3, #4
  sConfig.OffsetSignedSaturation = DISABLE;
 800070a:	f88d 004d 	strb.w	r0, [sp, #77]	; 0x4d
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	4620      	mov	r0, r4
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000710:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000712:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000716:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800071a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071c:	f001 f8ea 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000720:	b1e0      	cbz	r0, 800075c <main+0x348>
 8000722:	b672      	cpsid	i
  while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x310>
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00
 800072c:	58024400 	.word	0x58024400
 8000730:	58020c00 	.word	0x58020c00
 8000734:	58020400 	.word	0x58020400
 8000738:	20000354 	.word	0x20000354
 800073c:	20000464 	.word	0x20000464
 8000740:	40003c00 	.word	0x40003c00
 8000744:	200003dc 	.word	0x200003dc
 8000748:	40003800 	.word	0x40003800
 800074c:	20000168 	.word	0x20000168
 8000750:	40022000 	.word	0x40022000
 8000754:	43210000 	.word	0x43210000
 8000758:	40013000 	.word	0x40013000
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800075c:	4a81      	ldr	r2, [pc, #516]	; (8000964 <main+0x550>)
 800075e:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	a90b      	add	r1, sp, #44	; 0x2c
 8000762:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000764:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	f001 f8c4 	bl	80018f4 <HAL_ADC_ConfigChannel>
 800076c:	b108      	cbz	r0, 8000772 <main+0x35e>
 800076e:	b672      	cpsid	i
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0x35c>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000772:	4a7d      	ldr	r2, [pc, #500]	; (8000968 <main+0x554>)
 8000774:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	a90b      	add	r1, sp, #44	; 0x2c
 8000778:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800077a:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077e:	f001 f8b9 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000782:	b108      	cbz	r0, 8000788 <main+0x374>
 8000784:	b672      	cpsid	i
  while (1)
 8000786:	e7fe      	b.n	8000786 <main+0x372>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000788:	4a78      	ldr	r2, [pc, #480]	; (800096c <main+0x558>)
 800078a:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	a90b      	add	r1, sp, #44	; 0x2c
 800078e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000790:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000794:	f001 f8ae 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000798:	b108      	cbz	r0, 800079e <main+0x38a>
 800079a:	b672      	cpsid	i
  while (1)
 800079c:	e7fe      	b.n	800079c <main+0x388>
  sConfig.Channel = ADC_CHANNEL_18;
 800079e:	4b74      	ldr	r3, [pc, #464]	; (8000970 <main+0x55c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	a90b      	add	r1, sp, #44	; 0x2c
 80007a2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_18;
 80007a4:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	f001 f8a4 	bl	80018f4 <HAL_ADC_ConfigChannel>
 80007ac:	b108      	cbz	r0, 80007b2 <main+0x39e>
 80007ae:	b672      	cpsid	i
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <main+0x39c>
  sConfig.Channel = ADC_CHANNEL_19;
 80007b2:	4a70      	ldr	r2, [pc, #448]	; (8000974 <main+0x560>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007b4:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	a90b      	add	r1, sp, #44	; 0x2c
 80007ba:	486f      	ldr	r0, [pc, #444]	; (8000978 <main+0x564>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007bc:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	f001 f898 	bl	80018f4 <HAL_ADC_ConfigChannel>
 80007c4:	b108      	cbz	r0, 80007ca <main+0x3b6>
 80007c6:	b672      	cpsid	i
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x3b4>
  sConfig.Channel = ADC_CHANNEL_3;
 80007ca:	4a6c      	ldr	r2, [pc, #432]	; (800097c <main+0x568>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80007cc:	f44f 7386 	mov.w	r3, #268	; 0x10c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	a90b      	add	r1, sp, #44	; 0x2c
 80007d2:	4869      	ldr	r0, [pc, #420]	; (8000978 <main+0x564>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80007d4:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	f001 f88c 	bl	80018f4 <HAL_ADC_ConfigChannel>
 80007dc:	b108      	cbz	r0, 80007e2 <main+0x3ce>
 80007de:	b672      	cpsid	i
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0x3cc>
  sConfig.Channel = ADC_CHANNEL_7;
 80007e2:	4a67      	ldr	r2, [pc, #412]	; (8000980 <main+0x56c>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80007e4:	f44f 7389 	mov.w	r3, #274	; 0x112
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	a90b      	add	r1, sp, #44	; 0x2c
 80007ea:	4863      	ldr	r0, [pc, #396]	; (8000978 <main+0x564>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80007ec:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	f001 f880 	bl	80018f4 <HAL_ADC_ConfigChannel>
 80007f4:	b108      	cbz	r0, 80007fa <main+0x3e6>
 80007f6:	b672      	cpsid	i
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <main+0x3e4>
  sConfig.Channel = ADC_CHANNEL_4;
 80007fa:	4a62      	ldr	r2, [pc, #392]	; (8000984 <main+0x570>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80007fc:	f44f 738c 	mov.w	r3, #280	; 0x118
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	a90b      	add	r1, sp, #44	; 0x2c
 8000802:	485d      	ldr	r0, [pc, #372]	; (8000978 <main+0x564>)
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000804:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000808:	f001 f874 	bl	80018f4 <HAL_ADC_ConfigChannel>
 800080c:	b108      	cbz	r0, 8000812 <main+0x3fe>
 800080e:	b672      	cpsid	i
  while (1)
 8000810:	e7fe      	b.n	8000810 <main+0x3fc>
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000812:	f44f 7300 	mov.w	r3, #512	; 0x200
  sConfig.Channel = ADC_CHANNEL_8;
 8000816:	4a5c      	ldr	r2, [pc, #368]	; (8000988 <main+0x574>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000818:	a90b      	add	r1, sp, #44	; 0x2c
 800081a:	4857      	ldr	r0, [pc, #348]	; (8000978 <main+0x564>)
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800081c:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000820:	f001 f868 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	b108      	cbz	r0, 800082c <main+0x418>
 8000828:	b672      	cpsid	i
  while (1)
 800082a:	e7fe      	b.n	800082a <main+0x416>
  hrng.Instance = RNG;
 800082c:	4857      	ldr	r0, [pc, #348]	; (800098c <main+0x578>)
 800082e:	4a58      	ldr	r2, [pc, #352]	; (8000990 <main+0x57c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000830:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000834:	f005 fca2 	bl	800617c <HAL_RNG_Init>
 8000838:	4604      	mov	r4, r0
 800083a:	b108      	cbz	r0, 8000840 <main+0x42c>
 800083c:	b672      	cpsid	i
  while (1)
 800083e:	e7fe      	b.n	800083e <main+0x42a>
  return __builtin_arm_get_fpscr();
 8000840:	eef1 3a10 	vmrs	r3, fpscr
   tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
 8000844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 8000848:	eee1 3a10 	vmsr	fpscr, r3
   for (int i = 0; i < 4; i++)
 800084c:	4951      	ldr	r1, [pc, #324]	; (8000994 <main+0x580>)
 	  SPI_TX[i] = counter++;
 800084e:	4b52      	ldr	r3, [pc, #328]	; (8000998 <main+0x584>)
 8000850:	780a      	ldrb	r2, [r1, #0]
 	  SPI_PLUCK_TX[i] = 0;
 8000852:	6218      	str	r0, [r3, #32]
 	  SPI_TX[i] = counter++;
 8000854:	1c55      	adds	r5, r2, #1
 8000856:	f362 0007 	bfi	r0, r2, #0, #8
 800085a:	4f50      	ldr	r7, [pc, #320]	; (800099c <main+0x588>)
 800085c:	f365 200f 	bfi	r0, r5, #8, #8
 8000860:	1c95      	adds	r5, r2, #2
 8000862:	4e4f      	ldr	r6, [pc, #316]	; (80009a0 <main+0x58c>)
 8000864:	f365 4017 	bfi	r0, r5, #16, #8
 8000868:	1cd5      	adds	r5, r2, #3
 800086a:	3204      	adds	r2, #4
 800086c:	f8df a168 	ldr.w	sl, [pc, #360]	; 80009d8 <main+0x5c4>
 8000870:	f365 601f 	bfi	r0, r5, #24, #8
 8000874:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80009dc <main+0x5c8>
 8000878:	700a      	strb	r2, [r1, #0]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 800087a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800087e:	2208      	movs	r2, #8
 	  SPI_TX[i] = counter++;
 8000880:	f843 0b20 	str.w	r0, [r3], #32
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 8000884:	4847      	ldr	r0, [pc, #284]	; (80009a4 <main+0x590>)
 	  SPI_PLUCK_TX[i] = 0;
 8000886:	615c      	str	r4, [r3, #20]
 8000888:	831c      	strh	r4, [r3, #24]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 800088a:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80009e0 <main+0x5cc>
   	tThreshold_init(&threshold[i],700.0f, 1300.0f, &leaf);
 800088e:	4d46      	ldr	r5, [pc, #280]	; (80009a8 <main+0x594>)
 8000890:	ed9f aa46 	vldr	s20, [pc, #280]	; 80009ac <main+0x598>
 8000894:	ed9f 9a46 	vldr	s18, [pc, #280]	; 80009b0 <main+0x59c>
   	tSlide_init(&fastSlide[i],1.0f,400.0f, &leaf); //1110
 8000898:	eddf 9a46 	vldr	s19, [pc, #280]	; 80009b4 <main+0x5a0>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 800089c:	eddf 8a46 	vldr	s17, [pc, #280]	; 80009b8 <main+0x5a4>
 80008a0:	ed9f 8a46 	vldr	s16, [pc, #280]	; 80009bc <main+0x5a8>
 	  SPI_PLUCK_TX[i] = 0;
 80008a4:	e9c3 4401 	strd	r4, r4, [r3, #4]
 80008a8:	e9c3 4403 	strd	r4, r4, [r3, #12]
   HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 8);
 80008ac:	f005 ff72 	bl	8006794 <HAL_SPI_Receive_DMA>
   HAL_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f000 fe7f 	bl	80015b4 <HAL_Delay>
   HAL_Delay(10);
 80008b6:	200a      	movs	r0, #10
 80008b8:	f000 fe7c 	bl	80015b4 <HAL_Delay>
   LEAF_init(&leaf, SAMPLE_RATE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
 80008bc:	4b40      	ldr	r3, [pc, #256]	; (80009c0 <main+0x5ac>)
 80008be:	4a41      	ldr	r2, [pc, #260]	; (80009c4 <main+0x5b0>)
 80008c0:	4941      	ldr	r1, [pc, #260]	; (80009c8 <main+0x5b4>)
 80008c2:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80009cc <main+0x5b8>
 80008c6:	4838      	ldr	r0, [pc, #224]	; (80009a8 <main+0x594>)
 80008c8:	f006 fdf0 	bl	80074ac <LEAF_init>
   	tThreshold_init(&threshold[i],700.0f, 1300.0f, &leaf);
 80008cc:	eb0a 0004 	add.w	r0, sl, r4
 80008d0:	eeb0 0a49 	vmov.f32	s0, s18
 80008d4:	eef0 0a4a 	vmov.f32	s1, s20
 80008d8:	4629      	mov	r1, r5
 80008da:	f006 fa17 	bl	8006d0c <tThreshold_init>
   	tSlide_init(&fastSlide[i],1.0f,400.0f, &leaf); //1110
 80008de:	eb09 0004 	add.w	r0, r9, r4
 80008e2:	eef0 0a69 	vmov.f32	s1, s19
 80008e6:	4629      	mov	r1, r5
 80008e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008ec:	f006 fa40 	bl	8006d70 <tSlide_init>
   	tSlide_init(&slowSlide[i],1.0f,700.0f, &leaf); //1110
 80008f0:	eb08 0004 	add.w	r0, r8, r4
 80008f4:	eef0 0a49 	vmov.f32	s1, s18
 80008f8:	4629      	mov	r1, r5
 80008fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   for (int i = 0; i < NUM_STRINGS; i++)
 80008fe:	3404      	adds	r4, #4
   	tSlide_init(&slowSlide[i],1.0f,700.0f, &leaf); //1110
 8000900:	f006 fa36 	bl	8006d70 <tSlide_init>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 8000904:	eef0 0a68 	vmov.f32	s1, s17
 8000908:	462a      	mov	r2, r5
 800090a:	4638      	mov	r0, r7
 800090c:	eeb0 0a48 	vmov.f32	s0, s16
 8000910:	2101      	movs	r1, #1
 8000912:	f006 fc89 	bl	8007228 <tVZFilter_init>
   		tHighpass_init(&opticalHighpass[i][j], 10.0f, &leaf);//100
 8000916:	4630      	mov	r0, r6
 8000918:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800091c:	4629      	mov	r1, r5
 800091e:	f006 fa7f 	bl	8006e20 <tHighpass_init>
   		tVZFilter_init(&opticalLowpass[i][j], Lowpass, 18000.0f, 0.8f, &leaf);//6000
 8000922:	1d38      	adds	r0, r7, #4
 8000924:	eef0 0a68 	vmov.f32	s1, s17
 8000928:	462a      	mov	r2, r5
 800092a:	eeb0 0a48 	vmov.f32	s0, s16
 800092e:	2101      	movs	r1, #1
 8000930:	f006 fc7a 	bl	8007228 <tVZFilter_init>
   		tHighpass_init(&opticalHighpass[i][j], 10.0f, &leaf);//100
 8000934:	1d30      	adds	r0, r6, #4
 8000936:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800093a:	4629      	mov	r1, r5
 800093c:	f006 fa70 	bl	8006e20 <tHighpass_init>
   for (int i = 0; i < NUM_STRINGS; i++)
 8000940:	2c28      	cmp	r4, #40	; 0x28
 8000942:	f107 0708 	add.w	r7, r7, #8
 8000946:	f106 0608 	add.w	r6, r6, #8
 800094a:	d1bf      	bne.n	80008cc <main+0x4b8>
   LEAF_generate_atodb(atodbTable, ATODB_TABLE_SIZE);
 800094c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000950:	481f      	ldr	r0, [pc, #124]	; (80009d0 <main+0x5bc>)
 8000952:	f006 fca3 	bl	800729c <LEAF_generate_atodb>
   HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_values1,NUM_ADC_CHANNELS * ADC_BUFFER_SIZE);
 8000956:	22a0      	movs	r2, #160	; 0xa0
 8000958:	491e      	ldr	r1, [pc, #120]	; (80009d4 <main+0x5c0>)
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <main+0x564>)
 800095c:	f001 fb5c 	bl	8002018 <HAL_ADC_Start_DMA>
   while (1)
 8000960:	e7fe      	b.n	8000960 <main+0x54c>
 8000962:	bf00      	nop
 8000964:	47520000 	.word	0x47520000
 8000968:	3ac04000 	.word	0x3ac04000
 800096c:	3ef08000 	.word	0x3ef08000
 8000970:	4b840000 	.word	0x4b840000
 8000974:	4fb80000 	.word	0x4fb80000
 8000978:	20000168 	.word	0x20000168
 800097c:	0c900008 	.word	0x0c900008
 8000980:	1d500080 	.word	0x1d500080
 8000984:	10c00010 	.word	0x10c00010
 8000988:	21800100 	.word	0x21800100
 800098c:	20000340 	.word	0x20000340
 8000990:	48021800 	.word	0x48021800
 8000994:	200000e4 	.word	0x200000e4
 8000998:	30000000 	.word	0x30000000
 800099c:	200005b4 	.word	0x200005b4
 80009a0:	20000564 	.word	0x20000564
 80009a4:	200003dc 	.word	0x200003dc
 80009a8:	20000514 	.word	0x20000514
 80009ac:	44a28000 	.word	0x44a28000
 80009b0:	442f0000 	.word	0x442f0000
 80009b4:	43c80000 	.word	0x43c80000
 80009b8:	3f4ccccd 	.word	0x3f4ccccd
 80009bc:	468ca000 	.word	0x468ca000
 80009c0:	08000311 	.word	0x08000311
 80009c4:	0001d4c0 	.word	0x0001d4c0
 80009c8:	200006a4 	.word	0x200006a4
 80009cc:	473b8000 	.word	0x473b8000
 80009d0:	24000000 	.word	0x24000000
 80009d4:	30000060 	.word	0x30000060
 80009d8:	2001dc1c 	.word	0x2001dc1c
 80009dc:	20000140 	.word	0x20000140
 80009e0:	2000067c 	.word	0x2000067c

080009e4 <attackDetectPeak2>:
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 80009e4:	ee07 1a90 	vmov	s15, r1
 80009e8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8000b88 <attackDetectPeak2+0x1a4>
 80009ec:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8000b8c <attackDetectPeak2+0x1a8>
 80009f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80009f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float tempSamp = (((float)tempInt - TWO_TO_15) * INV_TWO_TO_15);
 80009f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 80009fc:	4f64      	ldr	r7, [pc, #400]	; (8000b90 <attackDetectPeak2+0x1ac>)
 80009fe:	00c6      	lsls	r6, r0, #3
{
 8000a00:	4604      	mov	r4, r0
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a02:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8000a06:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000a0a:	00a5      	lsls	r5, r4, #2
{
 8000a0c:	ed2d 8b02 	vpush	{d8}
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a10:	f006 fa26 	bl	8006e60 <tHighpass_tick>
 8000a14:	1d30      	adds	r0, r6, #4
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a16:	4e5f      	ldr	r6, [pc, #380]	; (8000b94 <attackDetectPeak2+0x1b0>)
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a18:	4438      	add	r0, r7
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000a1a:	4f5f      	ldr	r7, [pc, #380]	; (8000b98 <attackDetectPeak2+0x1b4>)
		tempSamp = tHighpass_tick(&opticalHighpass[whichString][k], tempSamp);
 8000a1c:	f006 fa20 	bl	8006e60 <tHighpass_tick>
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000a20:	485e      	ldr	r0, [pc, #376]	; (8000b9c <attackDetectPeak2+0x1b8>)
 8000a22:	eeb0 0ac0 	vabs.f32	s0, s0
 8000a26:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000a2a:	f006 f9c7 	bl	8006dbc <tSlide_tick>
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a2e:	485c      	ldr	r0, [pc, #368]	; (8000ba0 <attackDetectPeak2+0x1bc>)
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000a30:	4b5c      	ldr	r3, [pc, #368]	; (8000ba4 <attackDetectPeak2+0x1c0>)
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a32:	4428      	add	r0, r5
	Dsmoothed = tSlide_tick(&fastSlide[whichString], tempAbs);
 8000a34:	ed83 0a00 	vstr	s0, [r3]
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a38:	f006 f9c0 	bl	8006dbc <tSlide_tick>
 8000a3c:	eef0 0a40 	vmov.f32	s1, s0
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000a40:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8000ba8 <attackDetectPeak2+0x1c4>
 8000a44:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	Dsmoothed2 = tSlide_tick(&slowSlide[whichString], Dsmoothed);
 8000a48:	edc6 0a00 	vstr	s1, [r6]
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000a4c:	f006 fc12 	bl	8007274 <LEAF_clip>
 8000a50:	eeb0 7a40 	vmov.f32	s14, s0
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000a54:	eddf 7a55 	vldr	s15, [pc, #340]	; 8000bac <attackDetectPeak2+0x1c8>
 8000a58:	4b55      	ldr	r3, [pc, #340]	; (8000bb0 <attackDetectPeak2+0x1cc>)
 8000a5a:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8000a5e:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8000bb4 <attackDetectPeak2+0x1d0>
 8000a62:	ee67 7a27 	vmul.f32	s15, s14, s15
	Dsmoothed2 = LEAF_clip(0.0f, Dsmoothed2, 1.0f);
 8000a66:	ed86 7a00 	vstr	s14, [r6]
	dbSmoothed2 = LEAF_clip(-39.0f, atodbTable[(uint32_t)(Dsmoothed2 * ATODB_TABLE_SIZE_MINUS_ONE)], 12.0f);//45
 8000a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a6e:	ee17 2a90 	vmov	r2, s15
 8000a72:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a76:	edd3 0a00 	vldr	s1, [r3]
 8000a7a:	f006 fbfb 	bl	8007274 <LEAF_clip>
 8000a7e:	ed87 0a00 	vstr	s0, [r7]
	if (whichString == 0)
 8000a82:	b914      	cbnz	r4, 8000a8a <attackDetectPeak2+0xa6>
		dbSmoothedStorage = dbSmoothed2;
 8000a84:	4b4c      	ldr	r3, [pc, #304]	; (8000bb8 <attackDetectPeak2+0x1d4>)
 8000a86:	ed83 0a00 	vstr	s0, [r3]
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8000a8a:	edd6 8a00 	vldr	s17, [r6]
 8000a8e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000bbc <attackDetectPeak2+0x1d8>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000a92:	4e4b      	ldr	r6, [pc, #300]	; (8000bc0 <attackDetectPeak2+0x1dc>)
	integerVersions[whichString] = integerVersion;
 8000a94:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <attackDetectPeak2+0x1e0>)
	float integerVersion = Dsmoothed2 * (TWO_TO_16 - 1);
 8000a96:	ee68 8a87 	vmul.f32	s17, s17, s14
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000a9a:	1972      	adds	r2, r6, r5
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000a9c:	484a      	ldr	r0, [pc, #296]	; (8000bc8 <attackDetectPeak2+0x1e4>)
	integerVersions[whichString] = integerVersion;
 8000a9e:	442b      	add	r3, r5
		armed[whichString] = 1;
 8000aa0:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8000bd4 <attackDetectPeak2+0x1f0>
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000aa4:	edd2 7a00 	vldr	s15, [r2]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000aa8:	4428      	add	r0, r5
	integerVersions[whichString] = integerVersion;
 8000aaa:	edc3 8a00 	vstr	s17, [r3]
	slopeStorage[whichString] = slope;
 8000aae:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <attackDetectPeak2+0x1e8>)
	float slope = (dbSmoothed2 - prevdbSmoothed2[whichString]);
 8000ab0:	ee30 8a67 	vsub.f32	s16, s0, s15
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000ab4:	eeb0 0a68 	vmov.f32	s0, s17
	slopeStorage[whichString] = slope;
 8000ab8:	442b      	add	r3, r5
 8000aba:	ed83 8a00 	vstr	s16, [r3]
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000abe:	f006 f93d 	bl	8006d3c <tThreshold_tick>
 8000ac2:	4b43      	ldr	r3, [pc, #268]	; (8000bd0 <attackDetectPeak2+0x1ec>)
	if ((slope > .5f) && (threshOut > 0))//.3
 8000ac4:	2800      	cmp	r0, #0
	threshOut = tThreshold_tick(&threshold[whichString], integerVersion);
 8000ac6:	6018      	str	r0, [r3, #0]
	if ((slope > .5f) && (threshOut > 0))//.3
 8000ac8:	dd06      	ble.n	8000ad8 <attackDetectPeak2+0xf4>
 8000aca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8000ace:	eeb4 8a67 	vcmp.f32	s16, s15
 8000ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad6:	dc0c      	bgt.n	8000af2 <attackDetectPeak2+0x10e>
	if (armed[whichString] == 1)
 8000ad8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d00b      	beq.n	8000af8 <attackDetectPeak2+0x114>
{
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	prevdbSmoothed2[whichString] = dbSmoothed2;
 8000ae4:	442e      	add	r6, r5
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	6033      	str	r3, [r6, #0]
}
 8000aea:	ecbd 8b02 	vpop	{d8}
 8000aee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		armed[whichString] = 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
		if (integerVersion > stringMaxes[whichString])
 8000af8:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8000bd8 <attackDetectPeak2+0x1f4>
 8000afc:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8000b00:	ee07 3a90 	vmov	s15, r3
 8000b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b08:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b10:	d505      	bpl.n	8000b1e <attackDetectPeak2+0x13a>
			stringMaxes[whichString] = integerVersion;
 8000b12:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8000b16:	ee18 3a90 	vmov	r3, s17
 8000b1a:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
		armedCounter[whichString]++;
 8000b1e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8000bdc <attackDetectPeak2+0x1f8>
		if (slope <= 0.0f)
 8000b22:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
			downCounter[whichString]++;
 8000b26:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8000be0 <attackDetectPeak2+0x1fc>
		armedCounter[whichString]++;
 8000b2a:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
		if (slope <= 0.0f)
 8000b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		armedCounter[whichString]++;
 8000b32:	f103 0301 	add.w	r3, r3, #1
 8000b36:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			downCounter[whichString]++;
 8000b3a:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 8000b3e:	bf9c      	itt	ls
 8000b40:	3301      	addls	r3, #1
 8000b42:	f84b 3024 	strls.w	r3, [fp, r4, lsl #2]
		if (downCounter[whichString] > 100)//was 256
 8000b46:	2b64      	cmp	r3, #100	; 0x64
 8000b48:	ddca      	ble.n	8000ae0 <attackDetectPeak2+0xfc>
			output = stringMaxes[whichString] * 1.75f;
 8000b4a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8000b4e:	eef7 0a0c 	vmov.f32	s1, #124	; 0x3fe00000  1.750
			output = LEAF_clip(0.0f, output, 65535.0f);
 8000b52:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8000bbc <attackDetectPeak2+0x1d8>
			output = stringMaxes[whichString] * 1.75f;
 8000b56:	ee07 3a90 	vmov	s15, r3
			output = LEAF_clip(0.0f, output, 65535.0f);
 8000b5a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000ba8 <attackDetectPeak2+0x1c4>
			output = stringMaxes[whichString] * 1.75f;
 8000b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			output = LEAF_clip(0.0f, output, 65535.0f);
 8000b62:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000b66:	f006 fb85 	bl	8007274 <LEAF_clip>
	return (int)output;
 8000b6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			armed[whichString] = 0;
 8000b6e:	2300      	movs	r3, #0
	return (int)output;
 8000b70:	ee17 0a90 	vmov	r0, s15
			armed[whichString] = 0;
 8000b74:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
			armedCounter[whichString] = 0;
 8000b78:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
			downCounter[whichString] = 0;
 8000b7c:	f84b 3024 	str.w	r3, [fp, r4, lsl #2]
			stringMaxes[whichString] = 0;
 8000b80:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
 8000b84:	e7ae      	b.n	8000ae4 <attackDetectPeak2+0x100>
 8000b86:	bf00      	nop
 8000b88:	47000000 	.word	0x47000000
 8000b8c:	37fffffc 	.word	0x37fffffc
 8000b90:	20000564 	.word	0x20000564
 8000b94:	20000084 	.word	0x20000084
 8000b98:	200000e8 	.word	0x200000e8
 8000b9c:	20000140 	.word	0x20000140
 8000ba0:	2000067c 	.word	0x2000067c
 8000ba4:	20000080 	.word	0x20000080
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	46c34e00 	.word	0x46c34e00
 8000bb0:	24000000 	.word	0x24000000
 8000bb4:	c21c0000 	.word	0xc21c0000
 8000bb8:	200000ec 	.word	0x200000ec
 8000bbc:	477fff00 	.word	0x477fff00
 8000bc0:	2000062c 	.word	0x2000062c
 8000bc4:	200004ec 	.word	0x200004ec
 8000bc8:	2001dc1c 	.word	0x2001dc1c
 8000bcc:	20000654 	.word	0x20000654
 8000bd0:	2001dc18 	.word	0x2001dc18
 8000bd4:	20000090 	.word	0x20000090
 8000bd8:	2001db64 	.word	0x2001db64
 8000bdc:	200000b8 	.word	0x200000b8
 8000be0:	20000118 	.word	0x20000118

08000be4 <ADC_Frame>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
{
 8000be6:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000be8:	4881      	ldr	r0, [pc, #516]	; (8000df0 <ADC_Frame+0x20c>)
 8000bea:	4611      	mov	r1, r2
{
 8000bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf0:	b085      	sub	sp, #20
 8000bf2:	461c      	mov	r4, r3
 8000bf4:	f8df a228 	ldr.w	sl, [pc, #552]	; 8000e20 <ADC_Frame+0x23c>
 8000bf8:	9301      	str	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000bfa:	f003 fa8f 	bl	800411c <HAL_GPIO_WritePin>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000bfe:	4a7d      	ldr	r2, [pc, #500]	; (8000df4 <ADC_Frame+0x210>)
 8000c00:	4621      	mov	r1, r4
 8000c02:	4b7d      	ldr	r3, [pc, #500]	; (8000df8 <ADC_Frame+0x214>)
 8000c04:	9202      	str	r2, [sp, #8]
 8000c06:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000c0a:	3107      	adds	r1, #7
 8000c0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000c10:	4a7a      	ldr	r2, [pc, #488]	; (8000dfc <ADC_Frame+0x218>)
 8000c12:	9103      	str	r1, [sp, #12]
 8000c14:	9300      	str	r3, [sp, #0]
		if (howManyFrames > 0)
 8000c16:	6813      	ldr	r3, [r2, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dd01      	ble.n	8000c20 <ADC_Frame+0x3c>
			howManyFrames--;
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	6013      	str	r3, [r2, #0]
			string_values[k] = ADC_values1[(i*NUM_ADC_CHANNELS) + k];
 8000c20:	9c00      	ldr	r4, [sp, #0]
 8000c22:	9d02      	ldr	r5, [sp, #8]
 8000c24:	8821      	ldrh	r1, [r4, #0]
 8000c26:	8863      	ldrh	r3, [r4, #2]
 8000c28:	88a0      	ldrh	r0, [r4, #4]
 8000c2a:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8000df4 <ADC_Frame+0x210>
 8000c2e:	4e74      	ldr	r6, [pc, #464]	; (8000e00 <ADC_Frame+0x21c>)
 8000c30:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8000e14 <ADC_Frame+0x230>
 8000c34:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8000e24 <ADC_Frame+0x240>
 8000c38:	4f72      	ldr	r7, [pc, #456]	; (8000e04 <ADC_Frame+0x220>)
 8000c3a:	f8cd b008 	str.w	fp, [sp, #8]
 8000c3e:	e9c5 1300 	strd	r1, r3, [r5]
 8000c42:	88e3      	ldrh	r3, [r4, #6]
 8000c44:	8921      	ldrh	r1, [r4, #8]
 8000c46:	e9c5 0302 	strd	r0, r3, [r5, #8]
 8000c4a:	8963      	ldrh	r3, [r4, #10]
 8000c4c:	89a0      	ldrh	r0, [r4, #12]
 8000c4e:	e9c5 1304 	strd	r1, r3, [r5, #16]
 8000c52:	89e3      	ldrh	r3, [r4, #14]
 8000c54:	8a21      	ldrh	r1, [r4, #16]
 8000c56:	e9c5 0306 	strd	r0, r3, [r5, #24]
 8000c5a:	8a63      	ldrh	r3, [r4, #18]
 8000c5c:	2401      	movs	r4, #1
 8000c5e:	6229      	str	r1, [r5, #32]
 8000c60:	626b      	str	r3, [r5, #36]	; 0x24
		for (int j = 0; j < NUM_STRINGS; j++)
 8000c62:	4d69      	ldr	r5, [pc, #420]	; (8000e08 <ADC_Frame+0x224>)
 8000c64:	e016      	b.n	8000c94 <ADC_Frame+0xb0>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b943      	cbnz	r3, 8000c7c <ADC_Frame+0x98>
					changeHappened = 1;
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4b67      	ldr	r3, [pc, #412]	; (8000e0c <ADC_Frame+0x228>)
					pluckValues[j] = didPlucked[j];
 8000c6e:	f8c8 0000 	str.w	r0, [r8]
					stringStates[j] = (uint16_t)didPlucked[j];
 8000c72:	b280      	uxth	r0, r0
					changeHappened = 1;
 8000c74:	6019      	str	r1, [r3, #0]
					stringStates[j] = (uint16_t)didPlucked[j];
 8000c76:	f8c9 0000 	str.w	r0, [r9]
					stringSounding[j] = 1;
 8000c7a:	6039      	str	r1, [r7, #0]
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8000c7c:	882b      	ldrh	r3, [r5, #0]
 8000c7e:	bb1b      	cbnz	r3, 8000cc8 <ADC_Frame+0xe4>
		for (int j = 0; j < NUM_STRINGS; j++)
 8000c80:	2c0a      	cmp	r4, #10
 8000c82:	d02e      	beq.n	8000ce2 <ADC_Frame+0xfe>
 8000c84:	3401      	adds	r4, #1
 8000c86:	3502      	adds	r5, #2
 8000c88:	3604      	adds	r6, #4
 8000c8a:	f109 0904 	add.w	r9, r9, #4
 8000c8e:	f108 0804 	add.w	r8, r8, #4
 8000c92:	3704      	adds	r7, #4
 8000c94:	1e60      	subs	r0, r4, #1
			int tempInt = string_values[j];
 8000c96:	f85b 1b04 	ldr.w	r1, [fp], #4
			if (j < 8)
 8000c9a:	2807      	cmp	r0, #7
 8000c9c:	d835      	bhi.n	8000d0a <ADC_Frame+0x126>
				stringTouchRH[j] = (RHbits[0] >> j) & 1;
 8000c9e:	f8da 3000 	ldr.w	r3, [sl]
 8000ca2:	4103      	asrs	r3, r0
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	802b      	strh	r3, [r5, #0]
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000caa:	f7ff fe9b 	bl	80009e4 <attackDetectPeak2>
			if (howManyFrames == 0)
 8000cae:	4a53      	ldr	r2, [pc, #332]	; (8000dfc <ADC_Frame+0x218>)
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000cb0:	6030      	str	r0, [r6, #0]
			if (howManyFrames == 0)
 8000cb2:	6813      	ldr	r3, [r2, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1e5      	bne.n	8000c84 <ADC_Frame+0xa0>
				if ((didPlucked[j] > 0) && (!stringSounding[j]))
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	dcd4      	bgt.n	8000c66 <ADC_Frame+0x82>
				if ((stringTouchRH[j]) && (stringSounding[j]))
 8000cbc:	882b      	ldrh	r3, [r5, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0de      	beq.n	8000c80 <ADC_Frame+0x9c>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0db      	beq.n	8000c80 <ADC_Frame+0x9c>
					stringStates[j] = 0;
 8000cc8:	2300      	movs	r3, #0
					changeHappened = 1;
 8000cca:	2101      	movs	r1, #1
		for (int j = 0; j < NUM_STRINGS; j++)
 8000ccc:	2c0a      	cmp	r4, #10
					stringStates[j] = 0;
 8000cce:	f8c9 3000 	str.w	r3, [r9]
					pluckValues[j] = 0;
 8000cd2:	f8c8 3000 	str.w	r3, [r8]
					changeHappened = 1;
 8000cd6:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <ADC_Frame+0x228>)
 8000cd8:	6019      	str	r1, [r3, #0]
					stringSounding[j] = 0;
 8000cda:	f04f 0300 	mov.w	r3, #0
 8000cde:	603b      	str	r3, [r7, #0]
		for (int j = 0; j < NUM_STRINGS; j++)
 8000ce0:	d1d0      	bne.n	8000c84 <ADC_Frame+0xa0>
	for (int i = offset; i < ADC_FRAME_SIZE + offset; i++)
 8000ce2:	9900      	ldr	r1, [sp, #0]
 8000ce4:	9b01      	ldr	r3, [sp, #4]
 8000ce6:	3114      	adds	r1, #20
 8000ce8:	3301      	adds	r3, #1
 8000cea:	9100      	str	r1, [sp, #0]
 8000cec:	9903      	ldr	r1, [sp, #12]
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	dd90      	ble.n	8000c16 <ADC_Frame+0x32>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	483d      	ldr	r0, [pc, #244]	; (8000df0 <ADC_Frame+0x20c>)
 8000cfa:	f003 fa0f 	bl	800411c <HAL_GPIO_WritePin>
	if (changeHappened)
 8000cfe:	4b43      	ldr	r3, [pc, #268]	; (8000e0c <ADC_Frame+0x228>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	b99b      	cbnz	r3, 8000d2c <ADC_Frame+0x148>
}
 8000d04:	b005      	add	sp, #20
 8000d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				stringTouchRH[j] = (RHbits[1] >> (j-8)) & 1;
 8000d0a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8000d0e:	f1a4 0c09 	sub.w	ip, r4, #9
 8000d12:	fa43 f30c 	asr.w	r3, r3, ip
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	802b      	strh	r3, [r5, #0]
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d1c:	f7ff fe62 	bl	80009e4 <attackDetectPeak2>
			if (howManyFrames == 0)
 8000d20:	4a36      	ldr	r2, [pc, #216]	; (8000dfc <ADC_Frame+0x218>)
			didPlucked[j] = attackDetectPeak2(j, tempInt);
 8000d22:	6030      	str	r0, [r6, #0]
			if (howManyFrames == 0)
 8000d24:	6813      	ldr	r3, [r2, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1aa      	bne.n	8000c80 <ADC_Frame+0x9c>
 8000d2a:	e7c5      	b.n	8000cb8 <ADC_Frame+0xd4>
		if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_READY)
 8000d2c:	4838      	ldr	r0, [pc, #224]	; (8000e10 <ADC_Frame+0x22c>)
 8000d2e:	f005 ffe9 	bl	8006d04 <HAL_SPI_GetState>
 8000d32:	2801      	cmp	r0, #1
 8000d34:	d1e6      	bne.n	8000d04 <ADC_Frame+0x120>
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d36:	4837      	ldr	r0, [pc, #220]	; (8000e14 <ADC_Frame+0x230>)
 8000d38:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <ADC_Frame+0x234>)
 8000d3a:	6802      	ldr	r2, [r0, #0]
 8000d3c:	0a11      	lsrs	r1, r2, #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d42:	6842      	ldr	r2, [r0, #4]
 8000d44:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d4c:	0a12      	lsrs	r2, r2, #8
 8000d4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8000d52:	6882      	ldr	r2, [r0, #8]
 8000d54:	0a11      	lsrs	r1, r2, #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d5a:	68c2      	ldr	r2, [r0, #12]
 8000d5c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d64:	0a12      	lsrs	r2, r2, #8
 8000d66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8000d6a:	6902      	ldr	r2, [r0, #16]
 8000d6c:	0a11      	lsrs	r1, r2, #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d72:	6942      	ldr	r2, [r0, #20]
 8000d74:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d7c:	0a12      	lsrs	r2, r2, #8
 8000d7e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8000d82:	6982      	ldr	r2, [r0, #24]
 8000d84:	0a11      	lsrs	r1, r2, #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d86:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d8a:	69c2      	ldr	r2, [r0, #28]
 8000d8c:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000d90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000d94:	0a12      	lsrs	r2, r2, #8
 8000d96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8000d9a:	e9d0 1208 	ldrd	r1, r2, [r0, #32]
			SPI_PLUCK_TX[0] = 254;
 8000d9e:	20fe      	movs	r0, #254	; 0xfe
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000da0:	0a0c      	lsrs	r4, r1, #8
				SPI_PLUCK_TX[(j * 2) + 2] = (stringStates[j] & 0xff);
 8000da2:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
 8000da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000daa:	0a11      	lsrs	r1, r2, #8
			SPI_PLUCK_TX[25] = 253;
 8000dac:	22fd      	movs	r2, #253	; 0xfd
				SPI_PLUCK_TX[(j * 2) + 1] = (stringStates[j] >> 8);
 8000dae:	f883 4031 	strb.w	r4, [r3, #49]	; 0x31
 8000db2:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
			SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)SPI_PLUCK_TX) & ~(uint32_t)0x1F), 26+32);
 8000db6:	f103 0120 	add.w	r1, r3, #32
			SPI_PLUCK_TX[0] = 254;
 8000dba:	f883 0020 	strb.w	r0, [r3, #32]
			SPI_PLUCK_TX[25] = 253;
 8000dbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc2:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000dc6:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <ADC_Frame+0x238>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000dc8:	3340      	adds	r3, #64	; 0x40
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000dca:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
 8000dce:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
 8000dd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd6:	f3bf 8f6f 	isb	sy
			HAL_SPI_Transmit_DMA(&hspi1, SPI_PLUCK_TX, 26);
 8000dda:	221a      	movs	r2, #26
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <ADC_Frame+0x22c>)
 8000dde:	f005 fc05 	bl	80065ec <HAL_SPI_Transmit_DMA>
			changeHappened = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <ADC_Frame+0x228>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	b005      	add	sp, #20
 8000dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dee:	bf00      	nop
 8000df0:	58020c00 	.word	0x58020c00
 8000df4:	2001dbf0 	.word	0x2001dbf0
 8000df8:	30000060 	.word	0x30000060
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	200000f0 	.word	0x200000f0
 8000e04:	2001db8c 	.word	0x2001db8c
 8000e08:	2001dbdc 	.word	0x2001dbdc
 8000e0c:	200000e0 	.word	0x200000e0
 8000e10:	20000354 	.word	0x20000354
 8000e14:	2001dbb4 	.word	0x2001dbb4
 8000e18:	30000000 	.word	0x30000000
 8000e1c:	e000ed00 	.word	0xe000ed00
 8000e20:	20000088 	.word	0x20000088
 8000e24:	20000604 	.word	0x20000604

08000e28 <HAL_ADC_ConvCpltCallback>:
	ADC_Frame(ADC_FRAME_SIZE);
 8000e28:	2008      	movs	r0, #8
 8000e2a:	f7ff bedb 	b.w	8000be4 <ADC_Frame>
 8000e2e:	bf00      	nop

08000e30 <HAL_ADC_ConvHalfCpltCallback>:
	ADC_Frame(0);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff bed7 	b.w	8000be4 <ADC_Frame>
 8000e36:	bf00      	nop

08000e38 <HAL_SPI_RxCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	480a      	ldr	r0, [pc, #40]	; (8000e68 <HAL_SPI_RxCpltCallback+0x30>)
{
 8000e3e:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e40:	f003 f96c 	bl	800411c <HAL_GPIO_WritePin>
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_SPI_RxCpltCallback+0x34>)
 8000e46:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8000e4a:	2afe      	cmp	r2, #254	; 0xfe
 8000e4c:	d000      	beq.n	8000e50 <HAL_SPI_RxCpltCallback+0x18>
}
 8000e4e:	bd08      	pop	{r3, pc}
	if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8000e50:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8000e54:	2afd      	cmp	r2, #253	; 0xfd
 8000e56:	d1fa      	bne.n	8000e4e <HAL_SPI_RxCpltCallback+0x16>
			RHbits[i] = SPI_RX[i+4];
 8000e58:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_SPI_RxCpltCallback+0x38>)
 8000e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e62:	e9c2 1300 	strd	r1, r3, [r2]
}
 8000e66:	bd08      	pop	{r3, pc}
 8000e68:	58020400 	.word	0x58020400
 8000e6c:	30000000 	.word	0x30000000
 8000e70:	20000088 	.word	0x20000088

08000e74 <HAL_SPI_RxHalfCpltCallback>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <HAL_SPI_RxHalfCpltCallback+0x30>)
{
 8000e7a:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000e7c:	f003 f94e 	bl	800411c <HAL_GPIO_WritePin>
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_SPI_RxHalfCpltCallback+0x34>)
 8000e82:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000e86:	2afe      	cmp	r2, #254	; 0xfe
 8000e88:	d000      	beq.n	8000e8c <HAL_SPI_RxHalfCpltCallback+0x18>
}
 8000e8a:	bd08      	pop	{r3, pc}
	if ((SPI_RX[2] == 254) && (SPI_RX[3] == 253))
 8000e8c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	d1fa      	bne.n	8000e8a <HAL_SPI_RxHalfCpltCallback+0x16>
			RHbits[i] = SPI_RX[i];
 8000e94:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_SPI_RxHalfCpltCallback+0x38>)
 8000e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e9e:	e9c2 1300 	strd	r1, r3, [r2]
}
 8000ea2:	bd08      	pop	{r3, pc}
 8000ea4:	58020400 	.word	0x58020400
 8000ea8:	30000000 	.word	0x30000000
 8000eac:	20000088 	.word	0x20000088

08000eb0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <Error_Handler+0x2>

08000eb4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <HAL_MspInit+0x20>)
{
 8000eb6:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000ebc:	f042 0202 	orr.w	r2, r2, #2
 8000ec0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed0:	b002      	add	sp, #8
 8000ed2:	4770      	bx	lr
 8000ed4:	58024400 	.word	0x58024400

08000ed8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b570      	push	{r4, r5, r6, lr}
 8000eda:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	2100      	movs	r1, #0
{
 8000ede:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee0:	22b8      	movs	r2, #184	; 0xb8
 8000ee2:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	9108      	str	r1, [sp, #32]
 8000ee6:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000eea:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eee:	f006 fb11 	bl	8007514 <memset>
  if(hadc->Instance==ADC1)
 8000ef2:	4b4f      	ldr	r3, [pc, #316]	; (8001030 <HAL_ADC_MspInit+0x158>)
 8000ef4:	6822      	ldr	r2, [r4, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d001      	beq.n	8000efe <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000efa:	b038      	add	sp, #224	; 0xe0
 8000efc:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000efe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f02:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f04:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 220;
 8000f0a:	2219      	movs	r2, #25
 8000f0c:	23dc      	movs	r3, #220	; 0xdc
 8000f0e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f12:	2204      	movs	r2, #4
 8000f14:	2302      	movs	r3, #2
 8000f16:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
    PeriphClkInitStruct.PLL3.PLL3R = 5;
 8000f1e:	2205      	movs	r2, #5
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f20:	931a      	str	r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.PLL3.PLL3R = 5;
 8000f26:	9218      	str	r2, [sp, #96]	; 0x60
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000f28:	9332      	str	r3, [sp, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	f003 ffa1 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	d177      	bne.n	8001022 <HAL_ADC_MspInit+0x14a>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f32:	4b40      	ldr	r3, [pc, #256]	; (8001034 <HAL_ADC_MspInit+0x15c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	4840      	ldr	r0, [pc, #256]	; (8001038 <HAL_ADC_MspInit+0x160>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f38:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    hdma_adc1.Instance = DMA1_Stream2;
 8000f3c:	4d3f      	ldr	r5, [pc, #252]	; (800103c <HAL_ADC_MspInit+0x164>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f3e:	f042 0220 	orr.w	r2, r2, #32
 8000f42:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000f46:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f4a:	f002 0220 	and.w	r2, r2, #32
 8000f4e:	9200      	str	r2, [sp, #0]
 8000f50:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f56:	f042 0201 	orr.w	r2, r2, #1
 8000f5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f62:	f002 0201 	and.w	r2, r2, #1
 8000f66:	9201      	str	r2, [sp, #4]
 8000f68:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f6e:	f042 0204 	orr.w	r2, r2, #4
 8000f72:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f7a:	f002 0204 	and.w	r2, r2, #4
 8000f7e:	9202      	str	r2, [sp, #8]
 8000f80:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f86:	f042 0202 	orr.w	r2, r2, #2
 8000f8a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f8e:	22ff      	movs	r2, #255	; 0xff
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f9c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000fa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f002 ff7f 	bl	8003ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fae:	a904      	add	r1, sp, #16
 8000fb0:	4823      	ldr	r0, [pc, #140]	; (8001040 <HAL_ADC_MspInit+0x168>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f002 ff76 	bl	8003ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	4820      	ldr	r0, [pc, #128]	; (8001044 <HAL_ADC_MspInit+0x16c>)
 8000fc2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f002 ff6d 	bl	8003ea8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream2;
 8000fce:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <HAL_ADC_MspInit+0x170>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fd0:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fd2:	4628      	mov	r0, r5
    hdma_adc1.Instance = DMA1_Stream2;
 8000fd4:	602a      	str	r2, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fda:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fe0:	612a      	str	r2, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe6:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fec:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fee:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8000ff0:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ff2:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ff4:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ff6:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ffa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ffe:	2304      	movs	r3, #4
 8001000:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001004:	f001 fcc2 	bl	800298c <HAL_DMA_Init>
 8001008:	b970      	cbnz	r0, 8001028 <HAL_ADC_MspInit+0x150>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800100e:	65a5      	str	r5, [r4, #88]	; 0x58
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001010:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001012:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001014:	f001 fb28 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001018:	2012      	movs	r0, #18
 800101a:	f001 fb63 	bl	80026e4 <HAL_NVIC_EnableIRQ>
}
 800101e:	b038      	add	sp, #224	; 0xe0
 8001020:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001022:	f7ff ff45 	bl	8000eb0 <Error_Handler>
 8001026:	e784      	b.n	8000f32 <HAL_ADC_MspInit+0x5a>
      Error_Handler();
 8001028:	f7ff ff42 	bl	8000eb0 <Error_Handler>
 800102c:	e7ed      	b.n	800100a <HAL_ADC_MspInit+0x132>
 800102e:	bf00      	nop
 8001030:	40022000 	.word	0x40022000
 8001034:	58024400 	.word	0x58024400
 8001038:	58020000 	.word	0x58020000
 800103c:	200001d8 	.word	0x200001d8
 8001040:	58020800 	.word	0x58020800
 8001044:	58020400 	.word	0x58020400
 8001048:	40020040 	.word	0x40020040

0800104c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800104c:	b510      	push	{r4, lr}
 800104e:	b0b0      	sub	sp, #192	; 0xc0
 8001050:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001052:	22b8      	movs	r2, #184	; 0xb8
 8001054:	2100      	movs	r1, #0
 8001056:	a802      	add	r0, sp, #8
 8001058:	f006 fa5c 	bl	8007514 <memset>
  if(hrng->Instance==RNG)
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_RNG_MspInit+0x54>)
 800105e:	6822      	ldr	r2, [r4, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d001      	beq.n	8001068 <HAL_RNG_MspInit+0x1c>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001064:	b030      	add	sp, #192	; 0xc0
 8001066:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001068:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106e:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001070:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001074:	f003 fefc 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 8001078:	b970      	cbnz	r0, 8001098 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_RNG_MspInit+0x58>)
 800107c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001084:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8001088:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800108c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	9b01      	ldr	r3, [sp, #4]
}
 8001094:	b030      	add	sp, #192	; 0xc0
 8001096:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001098:	f7ff ff0a 	bl	8000eb0 <Error_Handler>
 800109c:	e7ed      	b.n	800107a <HAL_RNG_MspInit+0x2e>
 800109e:	bf00      	nop
 80010a0:	48021800 	.word	0x48021800
 80010a4:	58024400 	.word	0x58024400

080010a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80010ac:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	2100      	movs	r1, #0
{
 80010b0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b2:	22b8      	movs	r2, #184	; 0xb8
 80010b4:	a80e      	add	r0, sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	910c      	str	r1, [sp, #48]	; 0x30
 80010b8:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80010bc:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f006 fa28 	bl	8007514 <memset>
  if(hspi->Instance==SPI1)
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	4a9f      	ldr	r2, [pc, #636]	; (8001344 <HAL_SPI_MspInit+0x29c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d009      	beq.n	80010e0 <HAL_SPI_MspInit+0x38>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80010cc:	4a9e      	ldr	r2, [pc, #632]	; (8001348 <HAL_SPI_MspInit+0x2a0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d07c      	beq.n	80011cc <HAL_SPI_MspInit+0x124>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80010d2:	4a9e      	ldr	r2, [pc, #632]	; (800134c <HAL_SPI_MspInit+0x2a4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	f000 80d6 	beq.w	8001286 <HAL_SPI_MspInit+0x1de>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010da:	b03c      	add	sp, #240	; 0xf0
 80010dc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e6:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ec:	f003 fec0 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 80010f0:	2800      	cmp	r0, #0
 80010f2:	f040 811a 	bne.w	800132a <HAL_SPI_MspInit+0x282>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f6:	4b96      	ldr	r3, [pc, #600]	; (8001350 <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010f8:	2605      	movs	r6, #5
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010fa:	f04f 0800 	mov.w	r8, #0
 80010fe:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001102:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001106:	4893      	ldr	r0, [pc, #588]	; (8001354 <HAL_SPI_MspInit+0x2ac>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001108:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800110c:	4d92      	ldr	r5, [pc, #584]	; (8001358 <HAL_SPI_MspInit+0x2b0>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001112:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001116:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001122:	f042 0208 	orr.w	r2, r2, #8
 8001126:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800112a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800112e:	f002 0208 	and.w	r2, r2, #8
 8001132:	9201      	str	r2, [sp, #4]
 8001134:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001136:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800113a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800113e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001142:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001148:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800114a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001150:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001152:	9902      	ldr	r1, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001154:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001156:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800115a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115e:	f002 fea3 	bl	8003ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001162:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8001166:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001168:	a908      	add	r1, sp, #32
 800116a:	487c      	ldr	r0, [pc, #496]	; (800135c <HAL_SPI_MspInit+0x2b4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800116c:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800116e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001172:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001176:	f002 fe97 	bl	8003ea8 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800117a:	4979      	ldr	r1, [pc, #484]	; (8001360 <HAL_SPI_MspInit+0x2b8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800117c:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800117e:	2300      	movs	r3, #0
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001180:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001182:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001184:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118a:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800118c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001190:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001192:	2204      	movs	r2, #4
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001194:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001196:	60eb      	str	r3, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001198:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119a:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800119c:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011a0:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011a4:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011a8:	f001 fbf0 	bl	800298c <HAL_DMA_Init>
 80011ac:	2800      	cmp	r0, #0
 80011ae:	f040 80b9 	bne.w	8001324 <HAL_SPI_MspInit+0x27c>
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011b8:	67a5      	str	r5, [r4, #120]	; 0x78
 80011ba:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80011bc:	f001 fa54 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011c0:	2023      	movs	r0, #35	; 0x23
 80011c2:	f001 fa8f 	bl	80026e4 <HAL_NVIC_EnableIRQ>
}
 80011c6:	b03c      	add	sp, #240	; 0xf0
 80011c8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d2:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011d4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f003 fe4a 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	2800      	cmp	r0, #0
 80011de:	f040 80a7 	bne.w	8001330 <HAL_SPI_MspInit+0x288>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011e2:	4b5b      	ldr	r3, [pc, #364]	; (8001350 <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011e4:	2005      	movs	r0, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	a908      	add	r1, sp, #32
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011e8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80011ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011f0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80011f4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80011f8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011fc:	9203      	str	r2, [sp, #12]
 80011fe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001204:	f042 0202 	orr.w	r2, r2, #2
 8001208:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800120c:	f44f 4270 	mov.w	r2, #61440	; 0xf000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001214:	900c      	str	r0, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	4852      	ldr	r0, [pc, #328]	; (8001364 <HAL_SPI_MspInit+0x2bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800121e:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	9d04      	ldr	r5, [sp, #16]
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001222:	4d51      	ldr	r5, [pc, #324]	; (8001368 <HAL_SPI_MspInit+0x2c0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001224:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001228:	2200      	movs	r2, #0
 800122a:	2302      	movs	r3, #2
 800122c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f002 fe3a 	bl	8003ea8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001234:	494d      	ldr	r1, [pc, #308]	; (800136c <HAL_SPI_MspInit+0x2c4>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001236:	2227      	movs	r2, #39	; 0x27
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001238:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800123a:	4628      	mov	r0, r5
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800123c:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800123e:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001242:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001246:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800124a:	6129      	str	r1, [r5, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800124c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001250:	61ea      	str	r2, [r5, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001252:	2204      	movs	r2, #4
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001254:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001258:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800125c:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001260:	e9c5 1208 	strd	r1, r2, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001264:	f001 fb92 	bl	800298c <HAL_DMA_Init>
 8001268:	2800      	cmp	r0, #0
 800126a:	d164      	bne.n	8001336 <HAL_SPI_MspInit+0x28e>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2102      	movs	r1, #2
 8001270:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001272:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001274:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8001276:	f001 f9f7 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800127a:	2024      	movs	r0, #36	; 0x24
 800127c:	f001 fa32 	bl	80026e4 <HAL_NVIC_EnableIRQ>
}
 8001280:	b03c      	add	sp, #240	; 0xf0
 8001282:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001286:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800128a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128c:	a80e      	add	r0, sp, #56	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800128e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001292:	f003 fded 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 8001296:	2800      	cmp	r0, #0
 8001298:	d150      	bne.n	800133c <HAL_SPI_MspInit+0x294>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800129a:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800129c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012a0:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012a2:	2406      	movs	r4, #6
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012a4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012a8:	f04f 0800 	mov.w	r8, #0
 80012ac:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012b4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80012b8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80012bc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80012c0:	9205      	str	r2, [sp, #20]
 80012c2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012c8:	f042 0201 	orr.w	r2, r2, #1
 80012cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012d4:	f002 0201 	and.w	r2, r2, #1
 80012d8:	9206      	str	r2, [sp, #24]
 80012da:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012e0:	f042 0204 	orr.w	r2, r2, #4
 80012e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ec:	940c      	str	r4, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	a908      	add	r1, sp, #32
 80012fa:	481d      	ldr	r0, [pc, #116]	; (8001370 <HAL_SPI_MspInit+0x2c8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fc:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012fe:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f002 fdd1 	bl	8003ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001306:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800130a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	a908      	add	r1, sp, #32
 800130e:	4819      	ldr	r0, [pc, #100]	; (8001374 <HAL_SPI_MspInit+0x2cc>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001310:	940c      	str	r4, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001312:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8001316:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	f002 fdc5 	bl	8003ea8 <HAL_GPIO_Init>
}
 800131e:	b03c      	add	sp, #240	; 0xf0
 8001320:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 8001324:	f7ff fdc4 	bl	8000eb0 <Error_Handler>
 8001328:	e743      	b.n	80011b2 <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 800132a:	f7ff fdc1 	bl	8000eb0 <Error_Handler>
 800132e:	e6e2      	b.n	80010f6 <HAL_SPI_MspInit+0x4e>
      Error_Handler();
 8001330:	f7ff fdbe 	bl	8000eb0 <Error_Handler>
 8001334:	e755      	b.n	80011e2 <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 8001336:	f7ff fdbb 	bl	8000eb0 <Error_Handler>
 800133a:	e797      	b.n	800126c <HAL_SPI_MspInit+0x1c4>
      Error_Handler();
 800133c:	f7ff fdb8 	bl	8000eb0 <Error_Handler>
 8001340:	e7ab      	b.n	800129a <HAL_SPI_MspInit+0x1f2>
 8001342:	bf00      	nop
 8001344:	40013000 	.word	0x40013000
 8001348:	40003800 	.word	0x40003800
 800134c:	40003c00 	.word	0x40003c00
 8001350:	58024400 	.word	0x58024400
 8001354:	58020c00 	.word	0x58020c00
 8001358:	20000250 	.word	0x20000250
 800135c:	58021800 	.word	0x58021800
 8001360:	40020010 	.word	0x40020010
 8001364:	58020400 	.word	0x58020400
 8001368:	200002c8 	.word	0x200002c8
 800136c:	40020028 	.word	0x40020028
 8001370:	58020000 	.word	0x58020000
 8001374:	58020800 	.word	0x58020800

08001378 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler>
 800137a:	bf00      	nop

0800137c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <HardFault_Handler>
 800137e:	bf00      	nop

08001380 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler>
 8001382:	bf00      	nop

08001384 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <BusFault_Handler>
 8001386:	bf00      	nop

08001388 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler>
 800138a:	bf00      	nop

0800138c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <DebugMon_Handler>:
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <PendSV_Handler>:
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001398:	f000 b8fa 	b.w	8001590 <HAL_IncTick>

0800139c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800139c:	4801      	ldr	r0, [pc, #4]	; (80013a4 <DMA1_Stream0_IRQHandler+0x8>)
 800139e:	f002 b947 	b.w	8003630 <HAL_DMA_IRQHandler>
 80013a2:	bf00      	nop
 80013a4:	20000250 	.word	0x20000250

080013a8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80013a8:	4801      	ldr	r0, [pc, #4]	; (80013b0 <DMA1_Stream1_IRQHandler+0x8>)
 80013aa:	f002 b941 	b.w	8003630 <HAL_DMA_IRQHandler>
 80013ae:	bf00      	nop
 80013b0:	200002c8 	.word	0x200002c8

080013b4 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013b4:	4801      	ldr	r0, [pc, #4]	; (80013bc <DMA1_Stream2_IRQHandler+0x8>)
 80013b6:	f002 b93b 	b.w	8003630 <HAL_DMA_IRQHandler>
 80013ba:	bf00      	nop
 80013bc:	200001d8 	.word	0x200001d8

080013c0 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013c0:	4801      	ldr	r0, [pc, #4]	; (80013c8 <ADC_IRQHandler+0x8>)
 80013c2:	f000 b913 	b.w	80015ec <HAL_ADC_IRQHandler>
 80013c6:	bf00      	nop
 80013c8:	20000168 	.word	0x20000168

080013cc <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013cc:	4801      	ldr	r0, [pc, #4]	; (80013d4 <SPI1_IRQHandler+0x8>)
 80013ce:	f005 bb81 	b.w	8006ad4 <HAL_SPI_IRQHandler>
 80013d2:	bf00      	nop
 80013d4:	20000354 	.word	0x20000354

080013d8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80013d8:	4801      	ldr	r0, [pc, #4]	; (80013e0 <SPI2_IRQHandler+0x8>)
 80013da:	f005 bb7b 	b.w	8006ad4 <HAL_SPI_IRQHandler>
 80013de:	bf00      	nop
 80013e0:	200003dc 	.word	0x200003dc

080013e4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013e4:	4922      	ldr	r1, [pc, #136]	; (8001470 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <SystemInit+0x90>)
{
 80013e8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80013ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f6:	6813      	ldr	r3, [r2, #0]
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	2b06      	cmp	r3, #6
 80013fe:	d805      	bhi.n	800140c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001400:	6813      	ldr	r3, [r2, #0]
 8001402:	f023 030f 	bic.w	r3, r3, #15
 8001406:	f043 0307 	orr.w	r3, r3, #7
 800140a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800140e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8001412:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001414:	4817      	ldr	r0, [pc, #92]	; (8001474 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8001416:	f041 0101 	orr.w	r1, r1, #1
 800141a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800141c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	400a      	ands	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001424:	6803      	ldr	r3, [r0, #0]
 8001426:	071b      	lsls	r3, r3, #28
 8001428:	d505      	bpl.n	8001436 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800142a:	6803      	ldr	r3, [r0, #0]
 800142c:	f023 030f 	bic.w	r3, r3, #15
 8001430:	f043 0307 	orr.w	r3, r3, #7
 8001434:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <SystemInit+0x94>)
 8001438:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800143a:	4911      	ldr	r1, [pc, #68]	; (8001480 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 800143c:	4c11      	ldr	r4, [pc, #68]	; (8001484 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 800143e:	4812      	ldr	r0, [pc, #72]	; (8001488 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8001440:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001442:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001444:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001446:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001448:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 800144c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800144e:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 8001452:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8001454:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8001456:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8001458:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800145a:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800145c:	480b      	ldr	r0, [pc, #44]	; (800148c <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 800145e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001462:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001464:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001466:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	52002000 	.word	0x52002000
 8001478:	58024400 	.word	0x58024400
 800147c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001480:	01010280 	.word	0x01010280
 8001484:	02020200 	.word	0x02020200
 8001488:	01ff0000 	.word	0x01ff0000
 800148c:	52004000 	.word	0x52004000

08001490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001494:	f7ff ffa6 	bl	80013e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	; (80014d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	; (80014dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014be:	f006 f837 	bl	8007530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7fe ffa7 	bl	8000414 <main>
  bx  lr
 80014c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80014d4:	08008d78 	.word	0x08008d78
  ldr r2, =_sbss
 80014d8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80014dc:	2001dd80 	.word	0x2001dd80

080014e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC3_IRQHandler>
	...

080014e4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_InitTick+0x40>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b90b      	cbnz	r3, 80014ee <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014ec:	4770      	bx	lr
{
 80014ee:	b510      	push	{r4, lr}
 80014f0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f6:	4a0c      	ldr	r2, [pc, #48]	; (8001528 <HAL_InitTick+0x44>)
 80014f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fc:	6810      	ldr	r0, [r2, #0]
 80014fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001502:	f001 f8fd 	bl	8002700 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	2c0f      	cmp	r4, #15
 8001508:	d800      	bhi.n	800150c <HAL_InitTick+0x28>
 800150a:	b108      	cbz	r0, 8001510 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800150c:	2001      	movs	r0, #1
}
 800150e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	4621      	mov	r1, r4
 8001514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001518:	f001 f8a6 	bl	8002668 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_InitTick+0x48>)
 800151e:	2000      	movs	r0, #0
 8001520:	601c      	str	r4, [r3, #0]
}
 8001522:	bd10      	pop	{r4, pc}
 8001524:	2000000c 	.word	0x2000000c
 8001528:	20000004 	.word	0x20000004
 800152c:	20000010 	.word	0x20000010

08001530 <HAL_Init>:
{
 8001530:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001532:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001534:	4c12      	ldr	r4, [pc, #72]	; (8001580 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001536:	f001 f885 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800153a:	f003 f947 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_Init+0x54>)
 8001540:	4911      	ldr	r1, [pc, #68]	; (8001588 <HAL_Init+0x58>)
 8001542:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001544:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001546:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800154a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800154e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001550:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001552:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001556:	490d      	ldr	r1, [pc, #52]	; (800158c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001558:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800155c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800155e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001562:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001564:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001566:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001568:	f7ff ffbc 	bl	80014e4 <HAL_InitTick>
 800156c:	b110      	cbz	r0, 8001574 <HAL_Init+0x44>
    return HAL_ERROR;
 800156e:	2401      	movs	r4, #1
}
 8001570:	4620      	mov	r0, r4
 8001572:	bd10      	pop	{r4, pc}
 8001574:	4604      	mov	r4, r0
  HAL_MspInit();
 8001576:	f7ff fc9d 	bl	8000eb4 <HAL_MspInit>
}
 800157a:	4620      	mov	r0, r4
 800157c:	bd10      	pop	{r4, pc}
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008
 8001584:	58024400 	.word	0x58024400
 8001588:	080085a8 	.word	0x080085a8
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001590:	4a03      	ldr	r2, [pc, #12]	; (80015a0 <HAL_IncTick+0x10>)
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <HAL_IncTick+0x14>)
 8001594:	6811      	ldr	r1, [r2, #0]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	440b      	add	r3, r1
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	2001dc44 	.word	0x2001dc44
 80015a4:	2000000c 	.word	0x2000000c

080015a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015a8:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <HAL_GetTick+0x8>)
 80015aa:	6818      	ldr	r0, [r3, #0]
}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	2001dc44 	.word	0x2001dc44

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b538      	push	{r3, r4, r5, lr}
 80015b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff fff6 	bl	80015a8 <HAL_GetTick>
 80015bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	1c63      	adds	r3, r4, #1
 80015c0:	d002      	beq.n	80015c8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <HAL_Delay+0x20>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c8:	f7ff ffee 	bl	80015a8 <HAL_GetTick>
 80015cc:	1b43      	subs	r3, r0, r5
 80015ce:	42a3      	cmp	r3, r4
 80015d0:	d3fa      	bcc.n	80015c8 <HAL_Delay+0x14>
  {
  }
}
 80015d2:	bd38      	pop	{r3, r4, r5, pc}
 80015d4:	2000000c 	.word	0x2000000c

080015d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80015d8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015da:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80015dc:	f7ff fc28 	bl	8000e30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015e0:	bd08      	pop	{r3, pc}
 80015e2:	bf00      	nop

080015e4 <HAL_ADC_LevelOutOfWindowCallback>:
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <HAL_ADC_ErrorCallback>:
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop

080015ec <HAL_ADC_IRQHandler>:
{
 80015ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015ee:	4a90      	ldr	r2, [pc, #576]	; (8001830 <HAL_ADC_IRQHandler+0x244>)
{
 80015f0:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015f2:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015f4:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015f6:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80015f8:	685f      	ldr	r7, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015fa:	f000 8097 	beq.w	800172c <HAL_ADC_IRQHandler+0x140>
 80015fe:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001602:	4293      	cmp	r3, r2
 8001604:	f000 8092 	beq.w	800172c <HAL_ADC_IRQHandler+0x140>
 8001608:	4b8a      	ldr	r3, [pc, #552]	; (8001834 <HAL_ADC_IRQHandler+0x248>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800160a:	689d      	ldr	r5, [r3, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800160c:	07b0      	lsls	r0, r6, #30
 800160e:	f005 051f 	and.w	r5, r5, #31
 8001612:	d502      	bpl.n	800161a <HAL_ADC_IRQHandler+0x2e>
 8001614:	07b9      	lsls	r1, r7, #30
 8001616:	f100 80ad 	bmi.w	8001774 <HAL_ADC_IRQHandler+0x188>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800161a:	0773      	lsls	r3, r6, #29
 800161c:	d57b      	bpl.n	8001716 <HAL_ADC_IRQHandler+0x12a>
 800161e:	0778      	lsls	r0, r7, #29
 8001620:	d579      	bpl.n	8001716 <HAL_ADC_IRQHandler+0x12a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001622:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001624:	06db      	lsls	r3, r3, #27
 8001626:	d403      	bmi.n	8001630 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001628:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6623      	str	r3, [r4, #96]	; 0x60
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001630:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001638:	d11c      	bne.n	8001674 <HAL_ADC_IRQHandler+0x88>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800163a:	4a7f      	ldr	r2, [pc, #508]	; (8001838 <HAL_ADC_IRQHandler+0x24c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	f000 80ea 	beq.w	8001816 <HAL_ADC_IRQHandler+0x22a>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001642:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001644:	0490      	lsls	r0, r2, #18
 8001646:	d415      	bmi.n	8001674 <HAL_ADC_IRQHandler+0x88>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	0711      	lsls	r1, r2, #28
 800164c:	d512      	bpl.n	8001674 <HAL_ADC_IRQHandler+0x88>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	0752      	lsls	r2, r2, #29
 8001652:	f100 80f5 	bmi.w	8001840 <HAL_ADC_IRQHandler+0x254>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	f022 020c 	bic.w	r2, r2, #12
 800165c:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800165e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001664:	6623      	str	r3, [r4, #96]	; 0x60
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001666:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001668:	04d8      	lsls	r0, r3, #19
 800166a:	d403      	bmi.n	8001674 <HAL_ADC_IRQHandler+0x88>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800166c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fbd7 	bl	8000e28 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	220c      	movs	r2, #12
 800167e:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001680:	06b1      	lsls	r1, r6, #26
 8001682:	d54e      	bpl.n	8001722 <HAL_ADC_IRQHandler+0x136>
 8001684:	06ba      	lsls	r2, r7, #26
 8001686:	d54c      	bpl.n	8001722 <HAL_ADC_IRQHandler+0x136>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001688:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800168a:	06d9      	lsls	r1, r3, #27
 800168c:	d403      	bmi.n	8001696 <HAL_ADC_IRQHandler+0xaa>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800168e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001690:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001694:	6623      	str	r3, [r4, #96]	; 0x60
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001696:	6823      	ldr	r3, [r4, #0]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001698:	4967      	ldr	r1, [pc, #412]	; (8001838 <HAL_ADC_IRQHandler+0x24c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800169a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800169c:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800169e:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016a0:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 80016a4:	d074      	beq.n	8001790 <HAL_ADC_IRQHandler+0x1a4>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016a6:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80016a8:	b9d2      	cbnz	r2, 80016e0 <HAL_ADC_IRQHandler+0xf4>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80016aa:	018a      	lsls	r2, r1, #6
 80016ac:	f100 80ab 	bmi.w	8001806 <HAL_ADC_IRQHandler+0x21a>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	0650      	lsls	r0, r2, #25
 80016b4:	d514      	bpl.n	80016e0 <HAL_ADC_IRQHandler+0xf4>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80016b6:	028a      	lsls	r2, r1, #10
 80016b8:	d412      	bmi.n	80016e0 <HAL_ADC_IRQHandler+0xf4>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	0710      	lsls	r0, r2, #28
 80016be:	f100 80ca 	bmi.w	8001856 <HAL_ADC_IRQHandler+0x26a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016c8:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016d0:	6623      	str	r3, [r4, #96]	; 0x60
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016d4:	05d9      	lsls	r1, r3, #23
 80016d6:	d403      	bmi.n	80016e0 <HAL_ADC_IRQHandler+0xf4>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016e0:	4620      	mov	r0, r4
 80016e2:	f000 ff21 	bl	8002528 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	2260      	movs	r2, #96	; 0x60
 80016ea:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016ec:	0632      	lsls	r2, r6, #24
 80016ee:	d501      	bpl.n	80016f4 <HAL_ADC_IRQHandler+0x108>
 80016f0:	063b      	lsls	r3, r7, #24
 80016f2:	d460      	bmi.n	80017b6 <HAL_ADC_IRQHandler+0x1ca>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80016f4:	05f0      	lsls	r0, r6, #23
 80016f6:	d501      	bpl.n	80016fc <HAL_ADC_IRQHandler+0x110>
 80016f8:	05f9      	lsls	r1, r7, #23
 80016fa:	d467      	bmi.n	80017cc <HAL_ADC_IRQHandler+0x1e0>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80016fc:	05b2      	lsls	r2, r6, #22
 80016fe:	d501      	bpl.n	8001704 <HAL_ADC_IRQHandler+0x118>
 8001700:	05bb      	lsls	r3, r7, #22
 8001702:	d44c      	bmi.n	800179e <HAL_ADC_IRQHandler+0x1b2>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001704:	06f0      	lsls	r0, r6, #27
 8001706:	d501      	bpl.n	800170c <HAL_ADC_IRQHandler+0x120>
 8001708:	06f9      	lsls	r1, r7, #27
 800170a:	d411      	bmi.n	8001730 <HAL_ADC_IRQHandler+0x144>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800170c:	0575      	lsls	r5, r6, #21
 800170e:	d501      	bpl.n	8001714 <HAL_ADC_IRQHandler+0x128>
 8001710:	0578      	lsls	r0, r7, #21
 8001712:	d467      	bmi.n	80017e4 <HAL_ADC_IRQHandler+0x1f8>
}
 8001714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001716:	0731      	lsls	r1, r6, #28
 8001718:	d5b2      	bpl.n	8001680 <HAL_ADC_IRQHandler+0x94>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800171a:	073a      	lsls	r2, r7, #28
 800171c:	d481      	bmi.n	8001622 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800171e:	06b1      	lsls	r1, r6, #26
 8001720:	d4b0      	bmi.n	8001684 <HAL_ADC_IRQHandler+0x98>
 8001722:	0673      	lsls	r3, r6, #25
 8001724:	d5e2      	bpl.n	80016ec <HAL_ADC_IRQHandler+0x100>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001726:	0678      	lsls	r0, r7, #25
 8001728:	d5e0      	bpl.n	80016ec <HAL_ADC_IRQHandler+0x100>
 800172a:	e7ad      	b.n	8001688 <HAL_ADC_IRQHandler+0x9c>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800172c:	4b43      	ldr	r3, [pc, #268]	; (800183c <HAL_ADC_IRQHandler+0x250>)
 800172e:	e76c      	b.n	800160a <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001730:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001732:	b183      	cbz	r3, 8001756 <HAL_ADC_IRQHandler+0x16a>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001734:	6823      	ldr	r3, [r4, #0]
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001736:	2d00      	cmp	r5, #0
 8001738:	d076      	beq.n	8001828 <HAL_ADC_IRQHandler+0x23c>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800173a:	4a3d      	ldr	r2, [pc, #244]	; (8001830 <HAL_ADC_IRQHandler+0x244>)
 800173c:	4293      	cmp	r3, r2
 800173e:	f000 8088 	beq.w	8001852 <HAL_ADC_IRQHandler+0x266>
 8001742:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001746:	4293      	cmp	r3, r2
 8001748:	f000 8083 	beq.w	8001852 <HAL_ADC_IRQHandler+0x266>
 800174c:	4a39      	ldr	r2, [pc, #228]	; (8001834 <HAL_ADC_IRQHandler+0x248>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800174e:	6892      	ldr	r2, [r2, #8]
 8001750:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8001754:	d00b      	beq.n	800176e <HAL_ADC_IRQHandler+0x182>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001756:	6e23      	ldr	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8001758:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800175a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175e:	6623      	str	r3, [r4, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	6663      	str	r3, [r4, #100]	; 0x64
      HAL_ADC_ErrorCallback(hadc);
 8001768:	f7ff ff3e 	bl	80015e8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	2210      	movs	r2, #16
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e7cb      	b.n	800170c <HAL_ADC_IRQHandler+0x120>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001774:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001776:	06da      	lsls	r2, r3, #27
 8001778:	d403      	bmi.n	8001782 <HAL_ADC_IRQHandler+0x196>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800177a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800177c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001780:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001782:	4620      	mov	r0, r4
 8001784:	f000 fed8 	bl	8002538 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	2202      	movs	r2, #2
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e744      	b.n	800161a <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001790:	21c1      	movs	r1, #193	; 0xc1
 8001792:	40e9      	lsrs	r1, r5
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001794:	07c9      	lsls	r1, r1, #31
 8001796:	d486      	bmi.n	80016a6 <HAL_ADC_IRQHandler+0xba>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001798:	4925      	ldr	r1, [pc, #148]	; (8001830 <HAL_ADC_IRQHandler+0x244>)
 800179a:	68c9      	ldr	r1, [r1, #12]
 800179c:	e784      	b.n	80016a8 <HAL_ADC_IRQHandler+0xbc>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800179e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017a0:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a6:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017a8:	f000 fec4 	bl	8002534 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	e7a6      	b.n	8001704 <HAL_ADC_IRQHandler+0x118>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017b8:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017be:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017c0:	f7ff ff10 	bl	80015e4 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e793      	b.n	80016f4 <HAL_ADC_IRQHandler+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017ce:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017d6:	f000 feab 	bl	8002530 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e78b      	b.n	80016fc <HAL_ADC_IRQHandler+0x110>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ea:	6822      	ldr	r2, [r4, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017ec:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f2:	6623      	str	r3, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80017f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6663      	str	r3, [r4, #100]	; 0x64
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017fc:	6011      	str	r1, [r2, #0]
}
 80017fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001802:	f000 be93 	b.w	800252c <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001806:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800180a:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800180e:	4302      	orrs	r2, r0
 8001810:	f47f af66 	bne.w	80016e0 <HAL_ADC_IRQHandler+0xf4>
 8001814:	e74c      	b.n	80016b0 <HAL_ADC_IRQHandler+0xc4>
 8001816:	f240 2221 	movw	r2, #545	; 0x221
 800181a:	40ea      	lsrs	r2, r5
 800181c:	07d2      	lsls	r2, r2, #31
 800181e:	f53f af10 	bmi.w	8001642 <HAL_ADC_IRQHandler+0x56>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001822:	4a03      	ldr	r2, [pc, #12]	; (8001830 <HAL_ADC_IRQHandler+0x244>)
 8001824:	68d2      	ldr	r2, [r2, #12]
 8001826:	e70d      	b.n	8001644 <HAL_ADC_IRQHandler+0x58>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	0792      	lsls	r2, r2, #30
 800182c:	d09f      	beq.n	800176e <HAL_ADC_IRQHandler+0x182>
 800182e:	e792      	b.n	8001756 <HAL_ADC_IRQHandler+0x16a>
 8001830:	40022000 	.word	0x40022000
 8001834:	58026300 	.word	0x58026300
 8001838:	40022100 	.word	0x40022100
 800183c:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001840:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001842:	f043 0310 	orr.w	r3, r3, #16
 8001846:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6663      	str	r3, [r4, #100]	; 0x64
 8001850:	e710      	b.n	8001674 <HAL_ADC_IRQHandler+0x88>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <HAL_ADC_IRQHandler+0x27c>)
 8001854:	e77b      	b.n	800174e <HAL_ADC_IRQHandler+0x162>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001856:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	6623      	str	r3, [r4, #96]	; 0x60
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6663      	str	r3, [r4, #100]	; 0x64
 8001866:	e73b      	b.n	80016e0 <HAL_ADC_IRQHandler+0xf4>
 8001868:	40022300 	.word	0x40022300

0800186c <ADC_DMAConvCplt>:
{
 800186c:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800186e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001870:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001872:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001876:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001878:	d11d      	bne.n	80018b6 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800187a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001880:	661a      	str	r2, [r3, #96]	; 0x60
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001882:	680a      	ldr	r2, [r1, #0]
 8001884:	f012 0f08 	tst.w	r2, #8
 8001888:	68ca      	ldr	r2, [r1, #12]
 800188a:	d01b      	beq.n	80018c4 <ADC_DMAConvCplt+0x58>
 800188c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001890:	d10d      	bne.n	80018ae <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001892:	68ca      	ldr	r2, [r1, #12]
 8001894:	0494      	lsls	r4, r2, #18
 8001896:	d40a      	bmi.n	80018ae <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800189a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800189e:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018a2:	04d1      	lsls	r1, r2, #19
 80018a4:	d403      	bmi.n	80018ae <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018a8:	f042 0201 	orr.w	r2, r2, #1
 80018ac:	661a      	str	r2, [r3, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff faba 	bl	8000e28 <HAL_ADC_ConvCpltCallback>
}
 80018b4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018b6:	06d2      	lsls	r2, r2, #27
 80018b8:	d40a      	bmi.n	80018d0 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80018c4:	0790      	lsls	r0, r2, #30
 80018c6:	d0e7      	beq.n	8001898 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff faad 	bl	8000e28 <HAL_ADC_ConvCpltCallback>
 80018ce:	e7f1      	b.n	80018b4 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fe89 	bl	80015e8 <HAL_ADC_ErrorCallback>
}
 80018d6:	bd10      	pop	{r4, pc}

080018d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018d8:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018da:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018dc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80018de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e2:	6603      	str	r3, [r0, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018e4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6643      	str	r3, [r0, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018ec:	f7ff fe7c 	bl	80015e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018f0:	bd08      	pop	{r3, pc}
 80018f2:	bf00      	nop

080018f4 <HAL_ADC_ConfigChannel>:
{
 80018f4:	b4f0      	push	{r4, r5, r6, r7}
  __IO uint32_t wait_loop_index = 0;
 80018f6:	2200      	movs	r2, #0
{
 80018f8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80018fa:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80018fc:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8001900:	2a01      	cmp	r2, #1
 8001902:	f000 813d 	beq.w	8001b80 <HAL_ADC_ConfigChannel+0x28c>
 8001906:	4603      	mov	r3, r0
 8001908:	2001      	movs	r0, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800190a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800190c:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001910:	6894      	ldr	r4, [r2, #8]
 8001912:	0765      	lsls	r5, r4, #29
 8001914:	d509      	bpl.n	800192a <HAL_ADC_ConfigChannel+0x36>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001916:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001918:	f042 0220 	orr.w	r2, r2, #32
 800191c:	661a      	str	r2, [r3, #96]	; 0x60
  __HAL_UNLOCK(hadc);
 800191e:	2200      	movs	r2, #0
 8001920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8001924:	b002      	add	sp, #8
 8001926:	bcf0      	pop	{r4, r5, r6, r7}
 8001928:	4770      	bx	lr
    if (hadc->Instance != ADC3)
 800192a:	4c97      	ldr	r4, [pc, #604]	; (8001b88 <HAL_ADC_ConfigChannel+0x294>)
 800192c:	42a2      	cmp	r2, r4
 800192e:	d00f      	beq.n	8001950 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001930:	680c      	ldr	r4, [r1, #0]
 8001932:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8001936:	2d00      	cmp	r5, #0
 8001938:	f000 80f9 	beq.w	8001b2e <HAL_ADC_ConfigChannel+0x23a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001940:	b114      	cbz	r4, 8001948 <HAL_ADC_ConfigChannel+0x54>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001942:	fab4 f484 	clz	r4, r4
 8001946:	40a0      	lsls	r0, r4
 8001948:	69d4      	ldr	r4, [r2, #28]
 800194a:	4320      	orrs	r0, r4
 800194c:	61d0      	str	r0, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001952:	f102 0030 	add.w	r0, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8001956:	251f      	movs	r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001958:	09a2      	lsrs	r2, r4, #6
  MODIFY_REG(*preg,
 800195a:	f004 0c1f 	and.w	ip, r4, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800195e:	f002 040c 	and.w	r4, r2, #12
  MODIFY_REG(*preg,
 8001962:	680a      	ldr	r2, [r1, #0]
 8001964:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001968:	fa02 f20c 	lsl.w	r2, r2, ip
 800196c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8001970:	5905      	ldr	r5, [r0, r4]
 8001972:	ea25 0c0c 	bic.w	ip, r5, ip
 8001976:	ea42 020c 	orr.w	r2, r2, ip
 800197a:	5102      	str	r2, [r0, r4]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800197c:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800197e:	6890      	ldr	r0, [r2, #8]
 8001980:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001984:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001986:	d166      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x162>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001988:	0704      	lsls	r4, r0, #28
 800198a:	d464      	bmi.n	8001a56 <HAL_ADC_ConfigChannel+0x162>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800198c:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800198e:	3214      	adds	r2, #20
  MODIFY_REG(*preg,
 8001990:	f04f 0c07 	mov.w	ip, #7
 8001994:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001996:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8001998:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800199c:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80019a0:	fa0c fc04 	lsl.w	ip, ip, r4
 80019a4:	fa06 f404 	lsl.w	r4, r6, r4
 80019a8:	5950      	ldr	r0, [r2, r5]
 80019aa:	ea20 000c 	bic.w	r0, r0, ip
 80019ae:	4320      	orrs	r0, r4
      if (hadc->Instance == ADC3)
 80019b0:	4c75      	ldr	r4, [pc, #468]	; (8001b88 <HAL_ADC_ConfigChannel+0x294>)
 80019b2:	5150      	str	r0, [r2, r5]
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	42a0      	cmp	r0, r4
 80019b8:	4602      	mov	r2, r0
 80019ba:	f000 80cb 	beq.w	8001b54 <HAL_ADC_ConfigChannel+0x260>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019be:	4873      	ldr	r0, [pc, #460]	; (8001b8c <HAL_ADC_ConfigChannel+0x298>)
 80019c0:	6800      	ldr	r0, [r0, #0]
 80019c2:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80019c6:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 80019ca:	68d0      	ldr	r0, [r2, #12]
 80019cc:	f000 8161 	beq.w	8001c92 <HAL_ADC_ConfigChannel+0x39e>
 80019d0:	f010 0f10 	tst.w	r0, #16
 80019d4:	694c      	ldr	r4, [r1, #20]
 80019d6:	68d0      	ldr	r0, [r2, #12]
 80019d8:	f040 8161 	bne.w	8001c9e <HAL_ADC_ConfigChannel+0x3aa>
 80019dc:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80019e0:	0040      	lsls	r0, r0, #1
 80019e2:	4084      	lsls	r4, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019e4:	690d      	ldr	r5, [r1, #16]
 80019e6:	2d04      	cmp	r5, #4
 80019e8:	f000 8135 	beq.w	8001c56 <HAL_ADC_ConfigChannel+0x362>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ec:	3260      	adds	r2, #96	; 0x60
    MODIFY_REG(*preg,
 80019ee:	6808      	ldr	r0, [r1, #0]
 80019f0:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 80019f4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80019f8:	f006 4c00 	and.w	ip, r6, #2147483648	; 0x80000000
 80019fc:	ea40 000c 	orr.w	r0, r0, ip
 8001a00:	4320      	orrs	r0, r4
 8001a02:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        if (hadc->Instance == ADC3)
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	4a5f      	ldr	r2, [pc, #380]	; (8001b88 <HAL_ADC_ConfigChannel+0x294>)
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0a:	690d      	ldr	r5, [r1, #16]
 8001a0c:	4290      	cmp	r0, r2
 8001a0e:	f000 81b7 	beq.w	8001d80 <HAL_ADC_ConfigChannel+0x48c>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001a12:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a16:	3060      	adds	r0, #96	; 0x60
 8001a18:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a1c:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
 8001a20:	fab4 f484 	clz	r4, r4
 8001a24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a28:	0964      	lsrs	r4, r4, #5
 8001a2a:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
 8001a2e:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001a32:	7e0a      	ldrb	r2, [r1, #24]
 8001a34:	681d      	ldr	r5, [r3, #0]
 8001a36:	f1a2 0201 	sub.w	r2, r2, #1
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a3a:	690c      	ldr	r4, [r1, #16]
 8001a3c:	6928      	ldr	r0, [r5, #16]
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	f004 041f 	and.w	r4, r4, #31
 8001a46:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8001a4a:	0952      	lsrs	r2, r2, #5
 8001a4c:	02d2      	lsls	r2, r2, #11
 8001a4e:	40a2      	lsls	r2, r4
 8001a50:	4302      	orrs	r2, r0
 8001a52:	612a      	str	r2, [r5, #16]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a54:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a56:	6890      	ldr	r0, [r2, #8]
 8001a58:	07c0      	lsls	r0, r0, #31
 8001a5a:	d466      	bmi.n	8001b2a <HAL_ADC_ConfigChannel+0x236>
  if (ADCx == ADC3)
 8001a5c:	4d4a      	ldr	r5, [pc, #296]	; (8001b88 <HAL_ADC_ConfigChannel+0x294>)
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a5e:	6808      	ldr	r0, [r1, #0]
 8001a60:	42aa      	cmp	r2, r5
 8001a62:	68cc      	ldr	r4, [r1, #12]
 8001a64:	d067      	beq.n	8001b36 <HAL_ADC_ConfigChannel+0x242>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001a66:	f004 0418 	and.w	r4, r4, #24
 8001a6a:	4d49      	ldr	r5, [pc, #292]	; (8001b90 <HAL_ADC_ConfigChannel+0x29c>)
 8001a6c:	40e5      	lsrs	r5, r4
 8001a6e:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
 8001a72:	4005      	ands	r5, r0
 8001a74:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8001a78:	ea24 0000 	bic.w	r0, r4, r0
 8001a7c:	4328      	orrs	r0, r5
 8001a7e:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a82:	4a44      	ldr	r2, [pc, #272]	; (8001b94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a84:	68c8      	ldr	r0, [r1, #12]
 8001a86:	4290      	cmp	r0, r2
 8001a88:	f000 8096 	beq.w	8001bb8 <HAL_ADC_ConfigChannel+0x2c4>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a8c:	6808      	ldr	r0, [r1, #0]
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	da4b      	bge.n	8001b2a <HAL_ADC_ConfigChannel+0x236>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a92:	681c      	ldr	r4, [r3, #0]
 8001a94:	4a40      	ldr	r2, [pc, #256]	; (8001b98 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a96:	4294      	cmp	r4, r2
 8001a98:	f000 8116 	beq.w	8001cc8 <HAL_ADC_ConfigChannel+0x3d4>
 8001a9c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001aa0:	4294      	cmp	r4, r2
 8001aa2:	f000 8111 	beq.w	8001cc8 <HAL_ADC_ConfigChannel+0x3d4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aa6:	4d3d      	ldr	r5, [pc, #244]	; (8001b9c <HAL_ADC_ConfigChannel+0x2a8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aa8:	4937      	ldr	r1, [pc, #220]	; (8001b88 <HAL_ADC_ConfigChannel+0x294>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aaa:	68aa      	ldr	r2, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aac:	6889      	ldr	r1, [r1, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aae:	f002 76e0 	and.w	r6, r2, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ab2:	43c9      	mvns	r1, r1
 8001ab4:	f001 0101 	and.w	r1, r1, #1
 8001ab8:	2900      	cmp	r1, #0
 8001aba:	f000 815b 	beq.w	8001d74 <HAL_ADC_ConfigChannel+0x480>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001abe:	4938      	ldr	r1, [pc, #224]	; (8001ba0 <HAL_ADC_ConfigChannel+0x2ac>)
 8001ac0:	4288      	cmp	r0, r1
 8001ac2:	d014      	beq.n	8001aee <HAL_ADC_ConfigChannel+0x1fa>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ac4:	4937      	ldr	r1, [pc, #220]	; (8001ba4 <HAL_ADC_ConfigChannel+0x2b0>)
 8001ac6:	4288      	cmp	r0, r1
 8001ac8:	f000 81b4 	beq.w	8001e34 <HAL_ADC_ConfigChannel+0x540>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001acc:	4936      	ldr	r1, [pc, #216]	; (8001ba8 <HAL_ADC_ConfigChannel+0x2b4>)
 8001ace:	4288      	cmp	r0, r1
 8001ad0:	d12b      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x236>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ad2:	0257      	lsls	r7, r2, #9
 8001ad4:	d429      	bmi.n	8001b2a <HAL_ADC_ConfigChannel+0x236>
 8001ad6:	4a2c      	ldr	r2, [pc, #176]	; (8001b88 <HAL_ADC_ConfigChannel+0x294>)
 8001ad8:	4294      	cmp	r4, r2
 8001ada:	d126      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x236>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001adc:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001ae4:	4332      	orrs	r2, r6
 8001ae6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001aea:	60aa      	str	r2, [r5, #8]
}
 8001aec:	e717      	b.n	800191e <HAL_ADC_ConfigChannel+0x2a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001aee:	0212      	lsls	r2, r2, #8
 8001af0:	d41b      	bmi.n	8001b2a <HAL_ADC_ConfigChannel+0x236>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001af2:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <HAL_ADC_ConfigChannel+0x294>)
 8001af4:	4294      	cmp	r4, r2
 8001af6:	d118      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x236>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001af8:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <HAL_ADC_ConfigChannel+0x2b8>)
 8001afa:	482d      	ldr	r0, [pc, #180]	; (8001bb0 <HAL_ADC_ConfigChannel+0x2bc>)
 8001afc:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001afe:	68a9      	ldr	r1, [r5, #8]
 8001b00:	0992      	lsrs	r2, r2, #6
 8001b02:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001b06:	fba0 0202 	umull	r0, r2, r0, r2
 8001b0a:	4331      	orrs	r1, r6
 8001b0c:	0992      	lsrs	r2, r2, #6
 8001b0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001b12:	3201      	adds	r2, #1
 8001b14:	60a9      	str	r1, [r5, #8]
 8001b16:	0052      	lsls	r2, r2, #1
 8001b18:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001b1a:	9a01      	ldr	r2, [sp, #4]
 8001b1c:	b12a      	cbz	r2, 8001b2a <HAL_ADC_ConfigChannel+0x236>
                wait_loop_index--;
 8001b1e:	9a01      	ldr	r2, [sp, #4]
 8001b20:	3a01      	subs	r2, #1
 8001b22:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001b24:	9a01      	ldr	r2, [sp, #4]
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d1f9      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x22a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	e6f7      	b.n	800191e <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b2e:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001b32:	40a0      	lsls	r0, r4
 8001b34:	e708      	b.n	8001948 <HAL_ADC_ConfigChannel+0x54>
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001b36:	f004 0418 	and.w	r4, r4, #24
 8001b3a:	4d15      	ldr	r5, [pc, #84]	; (8001b90 <HAL_ADC_ConfigChannel+0x29c>)
 8001b3c:	40e5      	lsrs	r5, r4
 8001b3e:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8001b42:	4005      	ands	r5, r0
 8001b44:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8001b48:	ea24 0000 	bic.w	r0, r4, r0
 8001b4c:	4328      	orrs	r0, r5
 8001b4e:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8001b52:	e796      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x18e>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b54:	e9d1 5204 	ldrd	r5, r2, [r1, #16]
 8001b58:	68c4      	ldr	r4, [r0, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b5a:	2d04      	cmp	r5, #4
 8001b5c:	f000 80c3 	beq.w	8001ce6 <HAL_ADC_ConfigChannel+0x3f2>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b60:	f3c4 04c1 	ubfx	r4, r4, #3, #2
    MODIFY_REG(*preg,
 8001b64:	6808      	ldr	r0, [r1, #0]
 8001b66:	0064      	lsls	r4, r4, #1
 8001b68:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001b6c:	40a2      	lsls	r2, r4
 8001b6e:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b70:	4810      	ldr	r0, [pc, #64]	; (8001bb4 <HAL_ADC_ConfigChannel+0x2c0>)
    MODIFY_REG(*preg,
 8001b72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b76:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8001b7a:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
 8001b7e:	e742      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x112>
  __HAL_LOCK(hadc);
 8001b80:	2002      	movs	r0, #2
}
 8001b82:	b002      	add	sp, #8
 8001b84:	bcf0      	pop	{r4, r5, r6, r7}
 8001b86:	4770      	bx	lr
 8001b88:	58026000 	.word	0x58026000
 8001b8c:	5c001000 	.word	0x5c001000
 8001b90:	000fffff 	.word	0x000fffff
 8001b94:	47ff0000 	.word	0x47ff0000
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	58026300 	.word	0x58026300
 8001ba0:	c7520000 	.word	0xc7520000
 8001ba4:	c3210000 	.word	0xc3210000
 8001ba8:	cb840000 	.word	0xcb840000
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	053e2d63 	.word	0x053e2d63
 8001bb4:	58026060 	.word	0x58026060
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bb8:	680d      	ldr	r5, [r1, #0]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bbc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8001bc0:	2a00      	cmp	r2, #0
 8001bc2:	d071      	beq.n	8001ca8 <HAL_ADC_ConfigChannel+0x3b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 8001bc8:	2a00      	cmp	r2, #0
 8001bca:	f000 80fd 	beq.w	8001dc8 <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8001bce:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd2:	3201      	adds	r2, #1
 8001bd4:	f002 021f 	and.w	r2, r2, #31
 8001bd8:	2a09      	cmp	r2, #9
 8001bda:	f240 80f5 	bls.w	8001dc8 <HAL_ADC_ConfigChannel+0x4d4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
 8001be2:	2c00      	cmp	r4, #0
 8001be4:	f000 81a9 	beq.w	8001f3a <HAL_ADC_ConfigChannel+0x646>
  return __builtin_clz(value);
 8001be8:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bec:	3401      	adds	r4, #1
 8001bee:	06a4      	lsls	r4, r4, #26
 8001bf0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	f000 819c 	beq.w	8001f36 <HAL_ADC_ConfigChannel+0x642>
  return __builtin_clz(value);
 8001bfe:	fab2 f282 	clz	r2, r2
 8001c02:	2601      	movs	r6, #1
 8001c04:	3201      	adds	r2, #1
 8001c06:	f002 021f 	and.w	r2, r2, #31
 8001c0a:	fa06 f202 	lsl.w	r2, r6, r2
 8001c0e:	4314      	orrs	r4, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	fa95 f5a5 	rbit	r5, r5
  if (value == 0U)
 8001c14:	2d00      	cmp	r5, #0
 8001c16:	f000 818c 	beq.w	8001f32 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8001c1a:	fab5 f585 	clz	r5, r5
 8001c1e:	2203      	movs	r2, #3
 8001c20:	f06f 061d 	mvn.w	r6, #29
 8001c24:	3501      	adds	r5, #1
 8001c26:	f005 051f 	and.w	r5, r5, #31
 8001c2a:	fb12 6205 	smlabb	r2, r2, r5, r6
 8001c2e:	0512      	lsls	r2, r2, #20
 8001c30:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c34:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c36:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8001c38:	2607      	movs	r6, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c3a:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 8001c3c:	f3c2 5204 	ubfx	r2, r2, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c40:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001c44:	4096      	lsls	r6, r2
 8001c46:	5944      	ldr	r4, [r0, r5]
 8001c48:	ea24 0406 	bic.w	r4, r4, r6
 8001c4c:	688e      	ldr	r6, [r1, #8]
 8001c4e:	4096      	lsls	r6, r2
 8001c50:	4334      	orrs	r4, r6
 8001c52:	5144      	str	r4, [r0, r5]
}
 8001c54:	e71a      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x198>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c56:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001c58:	680d      	ldr	r5, [r1, #0]
 8001c5a:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001c5e:	06a8      	lsls	r0, r5, #26
 8001c60:	ebb4 6f85 	cmp.w	r4, r5, lsl #26
 8001c64:	d078      	beq.n	8001d58 <HAL_ADC_ConfigChannel+0x464>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c66:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001c68:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001c6c:	4284      	cmp	r4, r0
 8001c6e:	d06b      	beq.n	8001d48 <HAL_ADC_ConfigChannel+0x454>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c70:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8001c72:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001c76:	4284      	cmp	r4, r0
 8001c78:	d05e      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x444>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c7a:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
 8001c7c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001c80:	4284      	cmp	r4, r0
 8001c82:	f47f aee8 	bne.w	8001a56 <HAL_ADC_ConfigChannel+0x162>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001c86:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001c88:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001c8c:	66d0      	str	r0, [r2, #108]	; 0x6c
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	e6e1      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x162>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c92:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001c96:	694c      	ldr	r4, [r1, #20]
 8001c98:	0040      	lsls	r0, r0, #1
 8001c9a:	4084      	lsls	r4, r0
 8001c9c:	e6a2      	b.n	80019e4 <HAL_ADC_ConfigChannel+0xf0>
 8001c9e:	0840      	lsrs	r0, r0, #1
 8001ca0:	f000 0008 	and.w	r0, r0, #8
 8001ca4:	4084      	lsls	r4, r0
 8001ca6:	e69d      	b.n	80019e4 <HAL_ADC_ConfigChannel+0xf0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ca8:	0eaa      	lsrs	r2, r5, #26
 8001caa:	3201      	adds	r2, #1
 8001cac:	f002 051f 	and.w	r5, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cb0:	2d09      	cmp	r5, #9
 8001cb2:	d87b      	bhi.n	8001dac <HAL_ADC_ConfigChannel+0x4b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cb4:	0694      	lsls	r4, r2, #26
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001cbc:	40aa      	lsls	r2, r5
 8001cbe:	4314      	orrs	r4, r2
 8001cc0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001cc4:	0512      	lsls	r2, r2, #20
 8001cc6:	e7b5      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x340>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cc8:	49a2      	ldr	r1, [pc, #648]	; (8001f54 <HAL_ADC_ConfigChannel+0x660>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cca:	4da3      	ldr	r5, [pc, #652]	; (8001f58 <HAL_ADC_ConfigChannel+0x664>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ccc:	f501 7180 	add.w	r1, r1, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cd0:	68aa      	ldr	r2, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cd2:	f851 6cf8 	ldr.w	r6, [r1, #-248]
 8001cd6:	6889      	ldr	r1, [r1, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cd8:	4331      	orrs	r1, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cda:	f002 76e0 	and.w	r6, r2, #29360128	; 0x1c00000
 8001cde:	43c9      	mvns	r1, r1
 8001ce0:	f001 0101 	and.w	r1, r1, #1
 8001ce4:	e6e8      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1c4>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ce6:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ce8:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8001cea:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8001cee:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8001cf0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001cf4:	2d00      	cmp	r5, #0
 8001cf6:	f040 80ad 	bne.w	8001e54 <HAL_ADC_ConfigChannel+0x560>
 8001cfa:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001cfe:	4294      	cmp	r4, r2
 8001d00:	f000 80d7 	beq.w	8001eb2 <HAL_ADC_ConfigChannel+0x5be>
 8001d04:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8001d06:	6e44      	ldr	r4, [r0, #100]	; 0x64
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d08:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001d0c:	42a2      	cmp	r2, r4
 8001d0e:	f000 811f 	beq.w	8001f50 <HAL_ADC_ConfigChannel+0x65c>
 8001d12:	4d92      	ldr	r5, [pc, #584]	; (8001f5c <HAL_ADC_ConfigChannel+0x668>)
 8001d14:	68ac      	ldr	r4, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d16:	f105 0608 	add.w	r6, r5, #8
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d1a:	68ac      	ldr	r4, [r5, #8]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d1c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001d20:	4294      	cmp	r4, r2
 8001d22:	f000 80f3 	beq.w	8001f0c <HAL_ADC_ConfigChannel+0x618>
 8001d26:	68ec      	ldr	r4, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d28:	350c      	adds	r5, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d2a:	682c      	ldr	r4, [r5, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d2c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001d30:	42a2      	cmp	r2, r4
 8001d32:	d019      	beq.n	8001d68 <HAL_ADC_ConfigChannel+0x474>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d34:	4602      	mov	r2, r0
 8001d36:	e68e      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x162>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d38:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001d3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d3e:	6690      	str	r0, [r2, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d40:	6808      	ldr	r0, [r1, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	0680      	lsls	r0, r0, #26
 8001d46:	e798      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x386>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d48:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001d4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d4e:	6650      	str	r0, [r2, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d50:	6808      	ldr	r0, [r1, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	0680      	lsls	r0, r0, #26
 8001d56:	e78b      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x37c>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d58:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001d5a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d5e:	6610      	str	r0, [r2, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d60:	6808      	ldr	r0, [r1, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	0680      	lsls	r0, r0, #26
 8001d66:	e77e      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x372>
    MODIFY_REG(*preg,
 8001d68:	682a      	ldr	r2, [r5, #0]
 8001d6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d6e:	602a      	str	r2, [r5, #0]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	e670      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x162>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          tmp_hal_status = HAL_ERROR;
 8001d76:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	661a      	str	r2, [r3, #96]	; 0x60
          tmp_hal_status = HAL_ERROR;
 8001d7e:	e5ce      	b.n	800191e <HAL_ADC_ConfigChannel+0x2a>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d80:	4c76      	ldr	r4, [pc, #472]	; (8001f5c <HAL_ADC_ConfigChannel+0x668>)
    MODIFY_REG(*preg,
 8001d82:	69ce      	ldr	r6, [r1, #28]
 8001d84:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 8001d88:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001d8c:	4332      	orrs	r2, r6
 8001d8e:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	690e      	ldr	r6, [r1, #16]
  if (ADCx == ADC3)
 8001d96:	4282      	cmp	r2, r0
 8001d98:	f891 5020 	ldrb.w	r5, [r1, #32]
 8001d9c:	d03b      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0x522>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d9e:	6890      	ldr	r0, [r2, #8]
 8001da0:	07c0      	lsls	r0, r0, #31
 8001da2:	f53f aec2 	bmi.w	8001b2a <HAL_ADC_ConfigChannel+0x236>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001da6:	6808      	ldr	r0, [r1, #0]
 8001da8:	68cc      	ldr	r4, [r1, #12]
  if (ADCx == ADC3)
 8001daa:	e65c      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x172>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dac:	0694      	lsls	r4, r2, #26
 8001dae:	2601      	movs	r6, #1
 8001db0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001db4:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8001db8:	fa06 f505 	lsl.w	r5, r6, r5
 8001dbc:	3a1e      	subs	r2, #30
 8001dbe:	432c      	orrs	r4, r5
 8001dc0:	0512      	lsls	r2, r2, #20
 8001dc2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001dc6:	e735      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x340>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
 8001dcc:	2c00      	cmp	r4, #0
 8001dce:	f000 80bc 	beq.w	8001f4a <HAL_ADC_ConfigChannel+0x656>
  return __builtin_clz(value);
 8001dd2:	fab4 f484 	clz	r4, r4
 8001dd6:	3401      	adds	r4, #1
 8001dd8:	06a4      	lsls	r4, r4, #26
 8001dda:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 8001de2:	2a00      	cmp	r2, #0
 8001de4:	f000 80af 	beq.w	8001f46 <HAL_ADC_ConfigChannel+0x652>
  return __builtin_clz(value);
 8001de8:	fab2 f282 	clz	r2, r2
 8001dec:	2601      	movs	r6, #1
 8001dee:	3201      	adds	r2, #1
 8001df0:	f002 021f 	and.w	r2, r2, #31
 8001df4:	fa06 f202 	lsl.w	r2, r6, r2
 8001df8:	4314      	orrs	r4, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	fa95 f5a5 	rbit	r5, r5
  if (value == 0U)
 8001dfe:	2d00      	cmp	r5, #0
 8001e00:	f000 809e 	beq.w	8001f40 <HAL_ADC_ConfigChannel+0x64c>
  return __builtin_clz(value);
 8001e04:	fab5 f285 	clz	r2, r5
 8001e08:	3201      	adds	r2, #1
 8001e0a:	f002 021f 	and.w	r2, r2, #31
 8001e0e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e12:	0512      	lsls	r2, r2, #20
 8001e14:	e70e      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x340>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001e16:	f1a5 0501 	sub.w	r5, r5, #1
    MODIFY_REG(*preg,
 8001e1a:	f854 2026 	ldr.w	r2, [r4, r6, lsl #2]
 8001e1e:	fab5 f585 	clz	r5, r5
 8001e22:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001e26:	096d      	lsrs	r5, r5, #5
 8001e28:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8001e2c:	f844 2026 	str.w	r2, [r4, r6, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	e610      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x162>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e34:	f012 7080 	ands.w	r0, r2, #16777216	; 0x1000000
 8001e38:	f47f ae77 	bne.w	8001b2a <HAL_ADC_ConfigChannel+0x236>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e3c:	4a48      	ldr	r2, [pc, #288]	; (8001f60 <HAL_ADC_ConfigChannel+0x66c>)
 8001e3e:	4294      	cmp	r4, r2
 8001e40:	f47f ae73 	bne.w	8001b2a <HAL_ADC_ConfigChannel+0x236>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e44:	68aa      	ldr	r2, [r5, #8]
 8001e46:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001e4a:	4332      	orrs	r2, r6
 8001e4c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001e50:	60aa      	str	r2, [r5, #8]
}
 8001e52:	e564      	b.n	800191e <HAL_ADC_ConfigChannel+0x2a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e58:	b11d      	cbz	r5, 8001e62 <HAL_ADC_ConfigChannel+0x56e>
  return __builtin_clz(value);
 8001e5a:	fab5 f585 	clz	r5, r5
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e5e:	42ac      	cmp	r4, r5
 8001e60:	d027      	beq.n	8001eb2 <HAL_ADC_ConfigChannel+0x5be>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e62:	4c3f      	ldr	r4, [pc, #252]	; (8001f60 <HAL_ADC_ConfigChannel+0x66c>)
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e64:	4f3f      	ldr	r7, [pc, #252]	; (8001f64 <HAL_ADC_ConfigChannel+0x670>)
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e66:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001e68:	6e64      	ldr	r4, [r4, #100]	; 0x64
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e6a:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e72:	b11d      	cbz	r5, 8001e7c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001e74:	fab5 f585 	clz	r5, r5
 8001e78:	42ac      	cmp	r4, r5
 8001e7a:	d032      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x5ee>
 8001e7c:	6e84      	ldr	r4, [r0, #104]	; 0x68
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e7e:	f100 0668 	add.w	r6, r0, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e82:	6e84      	ldr	r4, [r0, #104]	; 0x68
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e84:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8001e8c:	b11d      	cbz	r5, 8001e96 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8001e8e:	fab5 f585 	clz	r5, r5
 8001e92:	42ac      	cmp	r4, r5
 8001e94:	d03a      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x618>
 8001e96:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e98:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e9c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e9e:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001ea6:	2a00      	cmp	r2, #0
 8001ea8:	f43f af44 	beq.w	8001d34 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	e73e      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x43c>
    MODIFY_REG(*preg,
 8001eb2:	482b      	ldr	r0, [pc, #172]	; (8001f60 <HAL_ADC_ConfigChannel+0x66c>)
 8001eb4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001eb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eba:	6602      	str	r2, [r0, #96]	; 0x60
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ebc:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ebe:	6e42      	ldr	r2, [r0, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec0:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8001ec4:	680a      	ldr	r2, [r1, #0]
 8001ec6:	f100 0764 	add.w	r7, r0, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001eca:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8001ecc:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8001ed0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001ed4:	2e00      	cmp	r6, #0
 8001ed6:	d1ca      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x57a>
 8001ed8:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001edc:	4294      	cmp	r4, r2
 8001ede:	f47f af19 	bne.w	8001d14 <HAL_ADC_ConfigChannel+0x420>
    MODIFY_REG(*preg,
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ee8:	603a      	str	r2, [r7, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eea:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001eec:	6e82      	ldr	r2, [r0, #104]	; 0x68
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eee:	f100 0560 	add.w	r5, r0, #96	; 0x60
 8001ef2:	680a      	ldr	r2, [r1, #0]
 8001ef4:	f100 0668 	add.w	r6, r0, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ef8:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8001efa:	f3c2 0713 	ubfx	r7, r2, #0, #20
 8001efe:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001f02:	2f00      	cmp	r7, #0
 8001f04:	d1c0      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x594>
 8001f06:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001f0a:	e709      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x42c>
    MODIFY_REG(*preg,
 8001f0c:	6832      	ldr	r2, [r6, #0]
 8001f0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f12:	6032      	str	r2, [r6, #0]
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f14:	6818      	ldr	r0, [r3, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f16:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f18:	f100 056c 	add.w	r5, r0, #108	; 0x6c
 8001f1c:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f1e:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8001f20:	f3c2 0613 	ubfx	r6, r2, #0, #20
 8001f24:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8001f28:	2e00      	cmp	r6, #0
 8001f2a:	d1ba      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x5ae>
 8001f2c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001f30:	e6fe      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x43c>
 8001f32:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <HAL_ADC_ConfigChannel+0x674>)
 8001f34:	e67e      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x340>
 8001f36:	2202      	movs	r2, #2
 8001f38:	e669      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x31a>
 8001f3a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8001f3e:	e659      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x300>
 8001f40:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001f44:	e676      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x340>
 8001f46:	2202      	movs	r2, #2
 8001f48:	e756      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x504>
 8001f4a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8001f4e:	e746      	b.n	8001dde <HAL_ADC_ConfigChannel+0x4ea>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f50:	4f04      	ldr	r7, [pc, #16]	; (8001f64 <HAL_ADC_ConfigChannel+0x670>)
    MODIFY_REG(*preg,
 8001f52:	e7c6      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x5ee>
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40022300 	.word	0x40022300
 8001f5c:	58026060 	.word	0x58026060
 8001f60:	58026000 	.word	0x58026000
 8001f64:	58026064 	.word	0x58026064
 8001f68:	fe500000 	.word	0xfe500000

08001f6c <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f6c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	07d1      	lsls	r1, r2, #31
 8001f72:	d501      	bpl.n	8001f78 <ADC_Enable+0xc>
  return HAL_OK;
 8001f74:	2000      	movs	r0, #0
}
 8001f76:	4770      	bx	lr
{
 8001f78:	b570      	push	{r4, r5, r6, lr}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f7a:	4a21      	ldr	r2, [pc, #132]	; (8002000 <ADC_Enable+0x94>)
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	4211      	tst	r1, r2
 8001f82:	d12c      	bne.n	8001fde <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <ADC_Enable+0x98>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001f90:	f7ff fb0a 	bl	80015a8 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
 8001f98:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d028      	beq.n	8001ff0 <ADC_Enable+0x84>
 8001f9e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d024      	beq.n	8001ff0 <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fa6:	4a19      	ldr	r2, [pc, #100]	; (800200c <ADC_Enable+0xa0>)
 8001fa8:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	07d6      	lsls	r6, r2, #31
 8001fae:	d414      	bmi.n	8001fda <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
 8001fb0:	4e14      	ldr	r6, [pc, #80]	; (8002004 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	07d0      	lsls	r0, r2, #31
 8001fb6:	d404      	bmi.n	8001fc2 <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	4032      	ands	r2, r6
 8001fbc:	f042 0201 	orr.w	r2, r2, #1
 8001fc0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fc2:	f7ff faf1 	bl	80015a8 <HAL_GetTick>
 8001fc6:	1b43      	subs	r3, r0, r5
 8001fc8:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fca:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fcc:	d902      	bls.n	8001fd4 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	07d1      	lsls	r1, r2, #31
 8001fd2:	d504      	bpl.n	8001fde <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	07d2      	lsls	r2, r2, #31
 8001fd8:	d5eb      	bpl.n	8001fb2 <ADC_Enable+0x46>
  return HAL_OK;
 8001fda:	2000      	movs	r0, #0
}
 8001fdc:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fde:	6e23      	ldr	r3, [r4, #96]	; 0x60
            return HAL_ERROR;
 8001fe0:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe2:	f043 0310 	orr.w	r3, r3, #16
 8001fe6:	6623      	str	r3, [r4, #96]	; 0x60
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fea:	4303      	orrs	r3, r0
 8001fec:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001fee:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <ADC_Enable+0xa4>)
 8001ff2:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ff4:	06d2      	lsls	r2, r2, #27
 8001ff6:	d0d8      	beq.n	8001faa <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d1d5      	bne.n	8001faa <ADC_Enable+0x3e>
 8001ffe:	e7ec      	b.n	8001fda <ADC_Enable+0x6e>
 8002000:	8000003f 	.word	0x8000003f
 8002004:	7fffffc0 	.word	0x7fffffc0
 8002008:	40022000 	.word	0x40022000
 800200c:	58026300 	.word	0x58026300
 8002010:	40022300 	.word	0x40022300
 8002014:	40022100 	.word	0x40022100

08002018 <HAL_ADC_Start_DMA>:
{
 8002018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800201c:	4b44      	ldr	r3, [pc, #272]	; (8002130 <HAL_ADC_Start_DMA+0x118>)
{
 800201e:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002020:	6800      	ldr	r0, [r0, #0]
{
 8002022:	460e      	mov	r6, r1
 8002024:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002026:	4298      	cmp	r0, r3
 8002028:	d064      	beq.n	80020f4 <HAL_ADC_Start_DMA+0xdc>
 800202a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800202e:	4298      	cmp	r0, r3
 8002030:	d060      	beq.n	80020f4 <HAL_ADC_Start_DMA+0xdc>
 8002032:	4b40      	ldr	r3, [pc, #256]	; (8002134 <HAL_ADC_Start_DMA+0x11c>)
 8002034:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002036:	6885      	ldr	r5, [r0, #8]
 8002038:	f015 0504 	ands.w	r5, r5, #4
 800203c:	d160      	bne.n	8002100 <HAL_ADC_Start_DMA+0xe8>
    __HAL_LOCK(hadc);
 800203e:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 8002042:	2a01      	cmp	r2, #1
 8002044:	d05c      	beq.n	8002100 <HAL_ADC_Start_DMA+0xe8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002046:	f003 081f 	and.w	r8, r3, #31
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800204a:	f240 2321 	movw	r3, #545	; 0x221
    __HAL_LOCK(hadc);
 800204e:	2001      	movs	r0, #1
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002050:	fa23 f308 	lsr.w	r3, r3, r8
    __HAL_LOCK(hadc);
 8002054:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002058:	4003      	ands	r3, r0
 800205a:	d058      	beq.n	800210e <HAL_ADC_Start_DMA+0xf6>
      tmp_hal_status = ADC_Enable(hadc);
 800205c:	4620      	mov	r0, r4
 800205e:	f7ff ff85 	bl	8001f6c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002062:	2800      	cmp	r0, #0
 8002064:	d14f      	bne.n	8002106 <HAL_ADC_Start_DMA+0xee>
        ADC_STATE_CLR_SET(hadc->State,
 8002066:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002068:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_ADC_Start_DMA+0x120>)
 800206a:	4013      	ands	r3, r2
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800206c:	6822      	ldr	r2, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	6623      	str	r3, [r4, #96]	; 0x60
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_ADC_Start_DMA+0x124>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002076:	429a      	cmp	r2, r3
 8002078:	d102      	bne.n	8002080 <HAL_ADC_Start_DMA+0x68>
 800207a:	f1b8 0f00 	cmp.w	r8, #0
 800207e:	d103      	bne.n	8002088 <HAL_ADC_Start_DMA+0x70>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002080:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002082:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002086:	6623      	str	r3, [r4, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002088:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800208a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800208e:	d042      	beq.n	8002116 <HAL_ADC_Start_DMA+0xfe>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002092:	f023 0306 	bic.w	r3, r3, #6
 8002096:	6663      	str	r3, [r4, #100]	; 0x64
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800209a:	4a29      	ldr	r2, [pc, #164]	; (8002140 <HAL_ADC_Start_DMA+0x128>)
        if (hadc->Instance == ADC3)
 800209c:	4929      	ldr	r1, [pc, #164]	; (8002144 <HAL_ADC_Start_DMA+0x12c>)
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800209e:	63da      	str	r2, [r3, #60]	; 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020a0:	4a29      	ldr	r2, [pc, #164]	; (8002148 <HAL_ADC_Start_DMA+0x130>)
 80020a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020a6:	4a29      	ldr	r2, [pc, #164]	; (800214c <HAL_ADC_Start_DMA+0x134>)
 80020a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020aa:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020ac:	221c      	movs	r2, #28
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 80020b2:	2300      	movs	r3, #0
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020b4:	6822      	ldr	r2, [r4, #0]
        __HAL_UNLOCK(hadc);
 80020b6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020ba:	6853      	ldr	r3, [r2, #4]
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	6053      	str	r3, [r2, #4]
        if (hadc->Instance == ADC3)
 80020c2:	6822      	ldr	r2, [r4, #0]
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80020c4:	68d3      	ldr	r3, [r2, #12]
 80020c6:	428a      	cmp	r2, r1
 80020c8:	f023 0303 	bic.w	r3, r3, #3
 80020cc:	d025      	beq.n	800211a <HAL_ADC_Start_DMA+0x102>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80020ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80020d0:	430b      	orrs	r3, r1
 80020d2:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020d4:	6821      	ldr	r1, [r4, #0]
 80020d6:	463b      	mov	r3, r7
 80020d8:	4632      	mov	r2, r6
 80020da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020dc:	3140      	adds	r1, #64	; 0x40
 80020de:	f000 feab 	bl	8002e38 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020e2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_ADC_Start_DMA+0x138>)
 80020e6:	6891      	ldr	r1, [r2, #8]
 80020e8:	400b      	ands	r3, r1
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6093      	str	r3, [r2, #8]
}
 80020f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_ADC_Start_DMA+0x13c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020f6:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020f8:	6885      	ldr	r5, [r0, #8]
 80020fa:	f015 0504 	ands.w	r5, r5, #4
 80020fe:	d09e      	beq.n	800203e <HAL_ADC_Start_DMA+0x26>
    tmp_hal_status = HAL_BUSY;
 8002100:	2002      	movs	r0, #2
}
 8002102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8002106:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
}
 800210a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hadc);
 800210e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          ADC_CLEAR_ERRORCODE(hadc);
 8002116:	6663      	str	r3, [r4, #100]	; 0x64
 8002118:	e7be      	b.n	8002098 <HAL_ADC_Start_DMA+0x80>
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800211a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800211e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002122:	60d3      	str	r3, [r2, #12]
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002124:	6822      	ldr	r2, [r4, #0]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002126:	68d3      	ldr	r3, [r2, #12]
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	60d3      	str	r3, [r2, #12]
}
 800212e:	e7d1      	b.n	80020d4 <HAL_ADC_Start_DMA+0xbc>
 8002130:	40022000 	.word	0x40022000
 8002134:	58026300 	.word	0x58026300
 8002138:	fffff0fe 	.word	0xfffff0fe
 800213c:	40022100 	.word	0x40022100
 8002140:	0800186d 	.word	0x0800186d
 8002144:	58026000 	.word	0x58026000
 8002148:	080015d9 	.word	0x080015d9
 800214c:	080018d9 	.word	0x080018d9
 8002150:	7fffffc0 	.word	0x7fffffc0
 8002154:	40022300 	.word	0x40022300

08002158 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002158:	b510      	push	{r4, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800215a:	4a44      	ldr	r2, [pc, #272]	; (800226c <ADC_ConfigureBoostMode+0x114>)
{
 800215c:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800215e:	6803      	ldr	r3, [r0, #0]
 8002160:	4293      	cmp	r3, r2
 8002162:	d025      	beq.n	80021b0 <ADC_ConfigureBoostMode+0x58>
 8002164:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002168:	4293      	cmp	r3, r2
 800216a:	d021      	beq.n	80021b0 <ADC_ConfigureBoostMode+0x58>
 800216c:	4b40      	ldr	r3, [pc, #256]	; (8002270 <ADC_ConfigureBoostMode+0x118>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8002174:	d021      	beq.n	80021ba <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002176:	f002 fcff 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800217a:	6863      	ldr	r3, [r4, #4]
 800217c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002180:	d06b      	beq.n	800225a <ADC_ConfigureBoostMode+0x102>
 8002182:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002186:	d05b      	beq.n	8002240 <ADC_ConfigureBoostMode+0xe8>
 8002188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218c:	d065      	beq.n	800225a <ADC_ConfigureBoostMode+0x102>
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
  if (freq <= 6250000UL)
 800218e:	4b39      	ldr	r3, [pc, #228]	; (8002274 <ADC_ConfigureBoostMode+0x11c>)
 8002190:	4298      	cmp	r0, r3
 8002192:	d92f      	bls.n	80021f4 <ADC_ConfigureBoostMode+0x9c>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
  }
  else if (freq <= 12500000UL)
 8002194:	4b38      	ldr	r3, [pc, #224]	; (8002278 <ADC_ConfigureBoostMode+0x120>)
 8002196:	4298      	cmp	r0, r3
 8002198:	d94a      	bls.n	8002230 <ADC_ConfigureBoostMode+0xd8>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
  }
  else if (freq <= 25000000UL)
 800219a:	4b38      	ldr	r3, [pc, #224]	; (800227c <ADC_ConfigureBoostMode+0x124>)
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800219c:	6822      	ldr	r2, [r4, #0]
  else if (freq <= 25000000UL)
 800219e:	4298      	cmp	r0, r3
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021a0:	6893      	ldr	r3, [r2, #8]
  else if (freq <= 25000000UL)
 80021a2:	d856      	bhi.n	8002252 <ADC_ConfigureBoostMode+0xfa>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ac:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80021ae:	bd10      	pop	{r4, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80021b0:	4b33      	ldr	r3, [pc, #204]	; (8002280 <ADC_ConfigureBoostMode+0x128>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80021b8:	d1dd      	bne.n	8002176 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80021ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021be:	2100      	movs	r1, #0
 80021c0:	f003 fe2e 	bl	8005e20 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80021c4:	6863      	ldr	r3, [r4, #4]
 80021c6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021ca:	d04d      	beq.n	8002268 <ADC_ConfigureBoostMode+0x110>
 80021cc:	d808      	bhi.n	80021e0 <ADC_ConfigureBoostMode+0x88>
 80021ce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80021d2:	d03c      	beq.n	800224e <ADC_ConfigureBoostMode+0xf6>
 80021d4:	d914      	bls.n	8002200 <ADC_ConfigureBoostMode+0xa8>
 80021d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021da:	d1d8      	bne.n	800218e <ADC_ConfigureBoostMode+0x36>
        freq /= 32UL;
 80021dc:	0940      	lsrs	r0, r0, #5
        break;
 80021de:	e7d6      	b.n	800218e <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 80021e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021e4:	d031      	beq.n	800224a <ADC_ConfigureBoostMode+0xf2>
 80021e6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021ea:	d1d0      	bne.n	800218e <ADC_ConfigureBoostMode+0x36>
  if (freq <= 6250000UL)
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <ADC_ConfigureBoostMode+0x11c>)
 80021ee:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 80021f2:	d31d      	bcc.n	8002230 <ADC_ConfigureBoostMode+0xd8>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80021f4:	6822      	ldr	r2, [r4, #0]
 80021f6:	6893      	ldr	r3, [r2, #8]
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	6093      	str	r3, [r2, #8]
}
 80021fe:	bd10      	pop	{r4, pc}
    switch (hadc->Init.ClockPrescaler)
 8002200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002204:	d006      	beq.n	8002214 <ADC_ConfigureBoostMode+0xbc>
 8002206:	d90a      	bls.n	800221e <ADC_ConfigureBoostMode+0xc6>
 8002208:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800220c:	d002      	beq.n	8002214 <ADC_ConfigureBoostMode+0xbc>
 800220e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002212:	d1bc      	bne.n	800218e <ADC_ConfigureBoostMode+0x36>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002214:	0c9b      	lsrs	r3, r3, #18
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 800221c:	e7b7      	b.n	800218e <ADC_ConfigureBoostMode+0x36>
    switch (hadc->Init.ClockPrescaler)
 800221e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002222:	d0f7      	beq.n	8002214 <ADC_ConfigureBoostMode+0xbc>
 8002224:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002228:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800222c:	d0f2      	beq.n	8002214 <ADC_ConfigureBoostMode+0xbc>
 800222e:	e7ae      	b.n	800218e <ADC_ConfigureBoostMode+0x36>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002230:	6822      	ldr	r2, [r4, #0]
 8002232:	6893      	ldr	r3, [r2, #8]
 8002234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6093      	str	r3, [r2, #8]
}
 800223e:	bd10      	pop	{r4, pc}
        freq /= 4UL;
 8002240:	0880      	lsrs	r0, r0, #2
  if (freq <= 6250000UL)
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <ADC_ConfigureBoostMode+0x11c>)
 8002244:	4298      	cmp	r0, r3
 8002246:	d9d5      	bls.n	80021f4 <ADC_ConfigureBoostMode+0x9c>
 8002248:	e7a4      	b.n	8002194 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 800224a:	09c0      	lsrs	r0, r0, #7
        break;
 800224c:	e79f      	b.n	800218e <ADC_ConfigureBoostMode+0x36>
        freq /= 16UL;
 800224e:	0900      	lsrs	r0, r0, #4
        break;
 8002250:	e79d      	b.n	800218e <ADC_ConfigureBoostMode+0x36>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002252:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002256:	6093      	str	r3, [r2, #8]
}
 8002258:	bd10      	pop	{r4, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800225a:	0c1b      	lsrs	r3, r3, #16
 800225c:	fbb0 f0f3 	udiv	r0, r0, r3
  if (freq <= 6250000UL)
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <ADC_ConfigureBoostMode+0x11c>)
 8002262:	4298      	cmp	r0, r3
 8002264:	d9c6      	bls.n	80021f4 <ADC_ConfigureBoostMode+0x9c>
 8002266:	e795      	b.n	8002194 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8002268:	0980      	lsrs	r0, r0, #6
        break;
 800226a:	e790      	b.n	800218e <ADC_ConfigureBoostMode+0x36>
 800226c:	40022000 	.word	0x40022000
 8002270:	58026300 	.word	0x58026300
 8002274:	00bebc21 	.word	0x00bebc21
 8002278:	017d7841 	.word	0x017d7841
 800227c:	02faf081 	.word	0x02faf081
 8002280:	40022300 	.word	0x40022300

08002284 <HAL_ADC_Init>:
{
 8002284:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002286:	2300      	movs	r3, #0
{
 8002288:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 800228a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 800228c:	2800      	cmp	r0, #0
 800228e:	f000 80e2 	beq.w	8002456 <HAL_ADC_Init+0x1d2>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002292:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8002294:	4604      	mov	r4, r0
 8002296:	2d00      	cmp	r5, #0
 8002298:	f000 80c0 	beq.w	800241c <HAL_ADC_Init+0x198>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800229c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	0090      	lsls	r0, r2, #2
 80022a2:	d504      	bpl.n	80022ae <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022a4:	6899      	ldr	r1, [r3, #8]
 80022a6:	4a92      	ldr	r2, [pc, #584]	; (80024f0 <HAL_ADC_Init+0x26c>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ac:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	00d1      	lsls	r1, r2, #3
 80022b2:	d417      	bmi.n	80022e4 <HAL_ADC_Init+0x60>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022b4:	4a8f      	ldr	r2, [pc, #572]	; (80024f4 <HAL_ADC_Init+0x270>)
 80022b6:	4990      	ldr	r1, [pc, #576]	; (80024f8 <HAL_ADC_Init+0x274>)
 80022b8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCx->CR,
 80022ba:	6898      	ldr	r0, [r3, #8]
 80022bc:	0992      	lsrs	r2, r2, #6
 80022be:	fba1 1202 	umull	r1, r2, r1, r2
 80022c2:	498e      	ldr	r1, [pc, #568]	; (80024fc <HAL_ADC_Init+0x278>)
 80022c4:	0992      	lsrs	r2, r2, #6
 80022c6:	4001      	ands	r1, r0
 80022c8:	3201      	adds	r2, #1
 80022ca:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80022ce:	6099      	str	r1, [r3, #8]
 80022d0:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 80022d2:	9b01      	ldr	r3, [sp, #4]
 80022d4:	b12b      	cbz	r3, 80022e2 <HAL_ADC_Init+0x5e>
      wait_loop_index--;
 80022d6:	9b01      	ldr	r3, [sp, #4]
 80022d8:	3b01      	subs	r3, #1
 80022da:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80022dc:	9b01      	ldr	r3, [sp, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f9      	bne.n	80022d6 <HAL_ADC_Init+0x52>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	00d2      	lsls	r2, r2, #3
 80022e8:	d413      	bmi.n	8002312 <HAL_ADC_Init+0x8e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	6e22      	ldr	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80022ec:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ee:	f042 0210 	orr.w	r2, r2, #16
 80022f2:	6622      	str	r2, [r4, #96]	; 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022f6:	432a      	orrs	r2, r5
 80022f8:	6662      	str	r2, [r4, #100]	; 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	0756      	lsls	r6, r2, #29
 80022fe:	d50c      	bpl.n	800231a <HAL_ADC_Init+0x96>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002300:	6e23      	ldr	r3, [r4, #96]	; 0x60
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002302:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 8002304:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002306:	f043 0310 	orr.w	r3, r3, #16
}
 800230a:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800230e:	b002      	add	sp, #8
 8002310:	bd70      	pop	{r4, r5, r6, pc}
 8002312:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002314:	2500      	movs	r5, #0
 8002316:	0756      	lsls	r6, r2, #29
 8002318:	d4f2      	bmi.n	8002300 <HAL_ADC_Init+0x7c>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800231a:	6e26      	ldr	r6, [r4, #96]	; 0x60
 800231c:	f016 0610 	ands.w	r6, r6, #16
 8002320:	d1ef      	bne.n	8002302 <HAL_ADC_Init+0x7e>
    ADC_STATE_CLR_SET(hadc->State,
 8002322:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002324:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8002328:	f042 0202 	orr.w	r2, r2, #2
 800232c:	6622      	str	r2, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	07d0      	lsls	r0, r2, #31
 8002332:	d414      	bmi.n	800235e <HAL_ADC_Init+0xda>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002334:	4a72      	ldr	r2, [pc, #456]	; (8002500 <HAL_ADC_Init+0x27c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	f000 80a5 	beq.w	8002486 <HAL_ADC_Init+0x202>
 800233c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002340:	4293      	cmp	r3, r2
 8002342:	f000 80a0 	beq.w	8002486 <HAL_ADC_Init+0x202>
 8002346:	4a6f      	ldr	r2, [pc, #444]	; (8002504 <HAL_ADC_Init+0x280>)
 8002348:	6892      	ldr	r2, [r2, #8]
 800234a:	07d2      	lsls	r2, r2, #31
 800234c:	d407      	bmi.n	800235e <HAL_ADC_Init+0xda>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800234e:	4a6e      	ldr	r2, [pc, #440]	; (8002508 <HAL_ADC_Init+0x284>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002350:	6893      	ldr	r3, [r2, #8]
 8002352:	6861      	ldr	r1, [r4, #4]
 8002354:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002358:	430b      	orrs	r3, r1
 800235a:	6093      	str	r3, [r2, #8]
    if (hadc->Instance == ADC3)
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	4a69      	ldr	r2, [pc, #420]	; (8002504 <HAL_ADC_Init+0x280>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d061      	beq.n	8002428 <HAL_ADC_Init+0x1a4>
                  hadc->Init.Overrun                                                    |
 8002364:	68a0      	ldr	r0, [r4, #8]
 8002366:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002368:	f894 1020 	ldrb.w	r1, [r4, #32]
                  hadc->Init.Overrun                                                    |
 800236c:	4302      	orrs	r2, r0
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800236e:	7e60      	ldrb	r0, [r4, #25]
                  hadc->Init.Overrun                                                    |
 8002370:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002374:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002378:	2901      	cmp	r1, #1
 800237a:	d103      	bne.n	8002384 <HAL_ADC_Init+0x100>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800237c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800237e:	3901      	subs	r1, #1
 8002380:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002384:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002386:	b121      	cbz	r1, 8002392 <HAL_ADC_Init+0x10e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002388:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800238c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800238e:	4301      	orrs	r1, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002390:	430a      	orrs	r2, r1
    if (hadc->Instance == ADC3)
 8002392:	495c      	ldr	r1, [pc, #368]	; (8002504 <HAL_ADC_Init+0x280>)
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002394:	68d8      	ldr	r0, [r3, #12]
    if (hadc->Instance == ADC3)
 8002396:	428b      	cmp	r3, r1
 8002398:	d069      	beq.n	800246e <HAL_ADC_Init+0x1ea>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800239a:	495c      	ldr	r1, [pc, #368]	; (800250c <HAL_ADC_Init+0x288>)
 800239c:	4001      	ands	r1, r0
 800239e:	4311      	orrs	r1, r2
 80023a0:	60d9      	str	r1, [r3, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023a2:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023a4:	6893      	ldr	r3, [r2, #8]
 80023a6:	f013 0f04 	tst.w	r3, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023aa:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023ac:	d126      	bne.n	80023fc <HAL_ADC_Init+0x178>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023ae:	071b      	lsls	r3, r3, #28
 80023b0:	d424      	bmi.n	80023fc <HAL_ADC_Init+0x178>
      if (hadc->Instance == ADC3)
 80023b2:	4b54      	ldr	r3, [pc, #336]	; (8002504 <HAL_ADC_Init+0x280>)
 80023b4:	429a      	cmp	r2, r3
 80023b6:	f000 8085 	beq.w	80024c4 <HAL_ADC_Init+0x240>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023ba:	7e23      	ldrb	r3, [r4, #24]
        tmpCFGR = (
 80023bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80023be:	ea41 3183 	orr.w	r1, r1, r3, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023c2:	68d0      	ldr	r0, [r2, #12]
 80023c4:	4b52      	ldr	r3, [pc, #328]	; (8002510 <HAL_ADC_Init+0x28c>)
 80023c6:	4003      	ands	r3, r0
 80023c8:	430b      	orrs	r3, r1
 80023ca:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80023cc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
        if (hadc->Instance == ADC3)
 80023d0:	6822      	ldr	r2, [r4, #0]
      if (hadc->Init.OversamplingMode == ENABLE)
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d062      	beq.n	800249c <HAL_ADC_Init+0x218>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023d6:	6913      	ldr	r3, [r2, #16]
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023de:	6822      	ldr	r2, [r4, #0]
 80023e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80023e2:	6913      	ldr	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 80023e4:	4947      	ldr	r1, [pc, #284]	; (8002504 <HAL_ADC_Init+0x280>)
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023ea:	4303      	orrs	r3, r0
 80023ec:	6113      	str	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	428a      	cmp	r2, r1
 80023f2:	d003      	beq.n	80023fc <HAL_ADC_Init+0x178>
        ADC_ConfigureBoostMode(hadc);
 80023f4:	4620      	mov	r0, r4
 80023f6:	f7ff feaf 	bl	8002158 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023fa:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023fc:	6923      	ldr	r3, [r4, #16]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d02d      	beq.n	800245e <HAL_ADC_Init+0x1da>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002402:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002404:	f023 030f 	bic.w	r3, r3, #15
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800240a:	6e23      	ldr	r3, [r4, #96]	; 0x60
}
 800240c:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6623      	str	r3, [r4, #96]	; 0x60
}
 8002418:	b002      	add	sp, #8
 800241a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 800241c:	f7fe fd5c 	bl	8000ed8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002420:	6665      	str	r5, [r4, #100]	; 0x64
    hadc->Lock = HAL_UNLOCKED;
 8002422:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
 8002426:	e739      	b.n	800229c <HAL_ADC_Init+0x18>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002428:	68e2      	ldr	r2, [r4, #12]
 800242a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800242c:	ea41 0002 	orr.w	r0, r1, r2
 8002430:	7e62      	ldrb	r2, [r4, #25]
 8002432:	ea40 3042 	orr.w	r0, r0, r2, lsl #13
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002436:	68a2      	ldr	r2, [r4, #8]
 8002438:	2a08      	cmp	r2, #8
 800243a:	d005      	beq.n	8002448 <HAL_ADC_Init+0x1c4>
 800243c:	3a0c      	subs	r2, #12
 800243e:	2a10      	cmp	r2, #16
 8002440:	d802      	bhi.n	8002448 <HAL_ADC_Init+0x1c4>
 8002442:	4934      	ldr	r1, [pc, #208]	; (8002514 <HAL_ADC_Init+0x290>)
 8002444:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002448:	f894 1020 	ldrb.w	r1, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800244c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002450:	ea40 0206 	orr.w	r2, r0, r6
 8002454:	e790      	b.n	8002378 <HAL_ADC_Init+0xf4>
    return HAL_ERROR;
 8002456:	2501      	movs	r5, #1
}
 8002458:	4628      	mov	r0, r5
 800245a:	b002      	add	sp, #8
 800245c:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800245e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002460:	69e3      	ldr	r3, [r4, #28]
 8002462:	f021 010f 	bic.w	r1, r1, #15
 8002466:	3b01      	subs	r3, #1
 8002468:	430b      	orrs	r3, r1
 800246a:	6313      	str	r3, [r2, #48]	; 0x30
 800246c:	e7cd      	b.n	800240a <HAL_ADC_Init+0x186>
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800246e:	492a      	ldr	r1, [pc, #168]	; (8002518 <HAL_ADC_Init+0x294>)
 8002470:	4001      	ands	r1, r0
 8002472:	4311      	orrs	r1, r2
 8002474:	60d9      	str	r1, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002476:	6822      	ldr	r2, [r4, #0]
 8002478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800247a:	6913      	ldr	r3, [r2, #16]
 800247c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002480:	430b      	orrs	r3, r1
 8002482:	6113      	str	r3, [r2, #16]
 8002484:	e78d      	b.n	80023a2 <HAL_ADC_Init+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_ADC_Init+0x27c>)
 8002488:	6891      	ldr	r1, [r2, #8]
 800248a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800248e:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002490:	430a      	orrs	r2, r1
 8002492:	07d1      	lsls	r1, r2, #31
 8002494:	f53f af63 	bmi.w	800235e <HAL_ADC_Init+0xda>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002498:	4a20      	ldr	r2, [pc, #128]	; (800251c <HAL_ADC_Init+0x298>)
 800249a:	e759      	b.n	8002350 <HAL_ADC_Init+0xcc>
        if (hadc->Instance == ADC3)
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_ADC_Init+0x280>)
 800249e:	429a      	cmp	r2, r3
 80024a0:	d017      	beq.n	80024d2 <HAL_ADC_Init+0x24e>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024a2:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80024a4:	6910      	ldr	r0, [r2, #16]
 80024a6:	e9d4 1312 	ldrd	r1, r3, [r4, #72]	; 0x48
 80024aa:	3901      	subs	r1, #1
 80024ac:	4333      	orrs	r3, r6
 80024ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80024b2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80024b4:	430b      	orrs	r3, r1
 80024b6:	491a      	ldr	r1, [pc, #104]	; (8002520 <HAL_ADC_Init+0x29c>)
 80024b8:	4001      	ands	r1, r0
 80024ba:	430b      	orrs	r3, r1
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6113      	str	r3, [r2, #16]
 80024c2:	e78c      	b.n	80023de <HAL_ADC_Init+0x15a>
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024c4:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024c8:	7e23      	ldrb	r3, [r4, #24]
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ca:	0049      	lsls	r1, r1, #1
        tmpCFGR = (
 80024cc:	ea41 3183 	orr.w	r1, r1, r3, lsl #14
 80024d0:	e777      	b.n	80023c2 <HAL_ADC_Init+0x13e>
          MODIFY_REG(hadc->Instance->CFGR2,
 80024d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80024d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80024d6:	6910      	ldr	r0, [r2, #16]
 80024d8:	430b      	orrs	r3, r1
 80024da:	4912      	ldr	r1, [pc, #72]	; (8002524 <HAL_ADC_Init+0x2a0>)
 80024dc:	4001      	ands	r1, r0
 80024de:	430b      	orrs	r3, r1
 80024e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80024e2:	430b      	orrs	r3, r1
 80024e4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80024e6:	430b      	orrs	r3, r1
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6113      	str	r3, [r2, #16]
 80024ee:	e776      	b.n	80023de <HAL_ADC_Init+0x15a>
 80024f0:	5fffffc0 	.word	0x5fffffc0
 80024f4:	20000004 	.word	0x20000004
 80024f8:	053e2d63 	.word	0x053e2d63
 80024fc:	6fffffc0 	.word	0x6fffffc0
 8002500:	40022000 	.word	0x40022000
 8002504:	58026000 	.word	0x58026000
 8002508:	58026300 	.word	0x58026300
 800250c:	fff0c003 	.word	0xfff0c003
 8002510:	ffffbffc 	.word	0xffffbffc
 8002514:	080085b8 	.word	0x080085b8
 8002518:	fff04007 	.word	0xfff04007
 800251c:	40022300 	.word	0x40022300
 8002520:	fc00f81e 	.word	0xfc00f81e
 8002524:	fc00f81f 	.word	0xfc00f81f

08002528 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop

0800252c <HAL_ADCEx_InjectedQueueOverflowCallback>:
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop

08002530 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop

08002534 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop

08002538 <HAL_ADCEx_EndOfSamplingCallback>:
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop

0800253c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800253c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8002540:	2a01      	cmp	r2, #1
 8002542:	d048      	beq.n	80025d6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002544:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002546:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002548:	2001      	movs	r0, #1
{
 800254a:	b470      	push	{r4, r5, r6}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800254c:	4d38      	ldr	r5, [pc, #224]	; (8002630 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
{
 800254e:	b09d      	sub	sp, #116	; 0x74
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002550:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002552:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002554:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 8002556:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800255a:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800255c:	d008      	beq.n	8002570 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255e:	6e19      	ldr	r1, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002560:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002564:	f041 0120 	orr.w	r1, r1, #32
 8002568:	6619      	str	r1, [r3, #96]	; 0x60
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800256a:	b01d      	add	sp, #116	; 0x74
 800256c:	bc70      	pop	{r4, r5, r6}
 800256e:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002570:	4a30      	ldr	r2, [pc, #192]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8002572:	6890      	ldr	r0, [r2, #8]
 8002574:	0740      	lsls	r0, r0, #29
 8002576:	d50b      	bpl.n	8002590 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8002578:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 800257c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257e:	f042 0220 	orr.w	r2, r2, #32
 8002582:	661a      	str	r2, [r3, #96]	; 0x60
  __HAL_UNLOCK(hadc);
 8002584:	2200      	movs	r2, #0
 8002586:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800258a:	b01d      	add	sp, #116	; 0x74
 800258c:	bc70      	pop	{r4, r5, r6}
 800258e:	4770      	bx	lr
 8002590:	68a0      	ldr	r0, [r4, #8]
 8002592:	0745      	lsls	r5, r0, #29
 8002594:	d4f1      	bmi.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002596:	6808      	ldr	r0, [r1, #0]
 8002598:	b1f8      	cbz	r0, 80025da <HAL_ADCEx_MultiModeConfigChannel+0x9e>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800259a:	4d27      	ldr	r5, [pc, #156]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 800259c:	684e      	ldr	r6, [r1, #4]
 800259e:	68a8      	ldr	r0, [r5, #8]
 80025a0:	f420 4040 	bic.w	r0, r0, #49152	; 0xc000
 80025a4:	4330      	orrs	r0, r6
 80025a6:	60a8      	str	r0, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	42a0      	cmp	r0, r4
 80025ac:	d035      	beq.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0xde>
 80025ae:	4290      	cmp	r0, r2
 80025b0:	d033      	beq.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025b2:	4a22      	ldr	r2, [pc, #136]	; (800263c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 80025b4:	6892      	ldr	r2, [r2, #8]
 80025b6:	43d2      	mvns	r2, r2
 80025b8:	f002 0201 	and.w	r2, r2, #1
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d035      	beq.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        MODIFY_REG(tmpADC_Common->CCR,
 80025c0:	680a      	ldr	r2, [r1, #0]
 80025c2:	4c1d      	ldr	r4, [pc, #116]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 80025c4:	6889      	ldr	r1, [r1, #8]
 80025c6:	68a0      	ldr	r0, [r4, #8]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	491d      	ldr	r1, [pc, #116]	; (8002640 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80025cc:	4001      	ands	r1, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ce:	2000      	movs	r0, #0
        MODIFY_REG(tmpADC_Common->CCR,
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60a2      	str	r2, [r4, #8]
 80025d4:	e7d6      	b.n	8002584 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 80025d6:	2002      	movs	r0, #2
}
 80025d8:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80025da:	4817      	ldr	r0, [pc, #92]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 80025dc:	6881      	ldr	r1, [r0, #8]
 80025de:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 80025e2:	6081      	str	r1, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	42a1      	cmp	r1, r4
 80025e8:	d00e      	beq.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80025ea:	4291      	cmp	r1, r2
 80025ec:	d00c      	beq.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80025ee:	4a13      	ldr	r2, [pc, #76]	; (800263c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 80025f0:	6892      	ldr	r2, [r2, #8]
 80025f2:	43d2      	mvns	r2, r2
 80025f4:	f002 0201 	and.w	r2, r2, #1
 80025f8:	b1c2      	cbz	r2, 800262c <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025fa:	490f      	ldr	r1, [pc, #60]	; (8002638 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fc:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025fe:	4a10      	ldr	r2, [pc, #64]	; (8002640 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8002600:	688c      	ldr	r4, [r1, #8]
 8002602:	4022      	ands	r2, r4
 8002604:	608a      	str	r2, [r1, #8]
 8002606:	e7bd      	b.n	8002584 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8002608:	4909      	ldr	r1, [pc, #36]	; (8002630 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800260c:	6889      	ldr	r1, [r1, #8]
 800260e:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002610:	430a      	orrs	r2, r1
 8002612:	43d2      	mvns	r2, r2
 8002614:	f002 0201 	and.w	r2, r2, #1
 8002618:	e7ee      	b.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 800261a:	4805      	ldr	r0, [pc, #20]	; (8002630 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 800261c:	4a05      	ldr	r2, [pc, #20]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800261e:	6880      	ldr	r0, [r0, #8]
 8002620:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002622:	4302      	orrs	r2, r0
 8002624:	43d2      	mvns	r2, r2
 8002626:	f002 0201 	and.w	r2, r2, #1
 800262a:	e7c7      	b.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x80>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262c:	2000      	movs	r0, #0
 800262e:	e7a9      	b.n	8002584 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8002630:	40022000 	.word	0x40022000
 8002634:	40022100 	.word	0x40022100
 8002638:	40022300 	.word	0x40022300
 800263c:	58026000 	.word	0x58026000
 8002640:	fffff0e0 	.word	0xfffff0e0

08002644 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4906      	ldr	r1, [pc, #24]	; (8002660 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800264a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002654:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002658:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800265a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800265c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00
 8002664:	05fa0000 	.word	0x05fa0000

08002668 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266a:	b500      	push	{lr}
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002672:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267a:	f1be 0f04 	cmp.w	lr, #4
 800267e:	bf28      	it	cs
 8002680:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002684:	f1bc 0f06 	cmp.w	ip, #6
 8002688:	d91a      	bls.n	80026c0 <HAL_NVIC_SetPriority+0x58>
 800268a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002690:	fa0c fc03 	lsl.w	ip, ip, r3
 8002694:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800269c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269e:	fa0c fc0e 	lsl.w	ip, ip, lr
 80026a2:	ea21 010c 	bic.w	r1, r1, ip
 80026a6:	fa01 f103 	lsl.w	r1, r1, r3
 80026aa:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80026ae:	db0a      	blt.n	80026c6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	0109      	lsls	r1, r1, #4
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_NVIC_SetPriority+0x74>)
 80026b4:	b2c9      	uxtb	r1, r1
 80026b6:	4403      	add	r3, r0
 80026b8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80026c0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	4613      	mov	r3, r2
 80026c4:	e7e8      	b.n	8002698 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	f000 000f 	and.w	r0, r0, #15
 80026ca:	0109      	lsls	r1, r1, #4
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_NVIC_SetPriority+0x78>)
 80026ce:	b2c9      	uxtb	r1, r1
 80026d0:	4403      	add	r3, r0
 80026d2:	7619      	strb	r1, [r3, #24]
 80026d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80026d8:	e000ed00 	.word	0xe000ed00
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ecfc 	.word	0xe000ecfc

080026e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026e4:	2800      	cmp	r0, #0
 80026e6:	db07      	blt.n	80026f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e8:	2301      	movs	r3, #1
 80026ea:	f000 011f 	and.w	r1, r0, #31
 80026ee:	4a03      	ldr	r2, [pc, #12]	; (80026fc <HAL_NVIC_EnableIRQ+0x18>)
 80026f0:	0940      	lsrs	r0, r0, #5
 80026f2:	408b      	lsls	r3, r1
 80026f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100

08002700 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	1e43      	subs	r3, r0, #1
 8002702:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002706:	d20c      	bcs.n	8002722 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002708:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	4906      	ldr	r1, [pc, #24]	; (8002728 <HAL_SYSTICK_Config+0x28>)
 8002710:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002714:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002716:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002720:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002722:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800272c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002732:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002736:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 800273c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_MPU_Enable+0x1c>)
 800274a:	f040 0001 	orr.w	r0, r0, #1
 800274e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002754:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800275a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800275e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002768:	7843      	ldrb	r3, [r0, #1]
 800276a:	4a16      	ldr	r2, [pc, #88]	; (80027c4 <HAL_MPU_ConfigRegion+0x5c>)
 800276c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8002770:	7803      	ldrb	r3, [r0, #0]
 8002772:	b313      	cbz	r3, 80027ba <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002774:	6843      	ldr	r3, [r0, #4]
 8002776:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800277a:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800277c:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002780:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002782:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002784:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002788:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800278c:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800278e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002790:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002794:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002798:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800279c:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800279e:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027a2:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80027aa:	7a01      	ldrb	r1, [r0, #8]
 80027ac:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80027b0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027b4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80027b8:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 80027ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80027be:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027c8:	4b33      	ldr	r3, [pc, #204]	; (8002898 <DMA_CalcBaseAndBitshift+0xd0>)
{
 80027ca:	4601      	mov	r1, r0
 80027cc:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027ce:	4e33      	ldr	r6, [pc, #204]	; (800289c <DMA_CalcBaseAndBitshift+0xd4>)
 80027d0:	6802      	ldr	r2, [r0, #0]
 80027d2:	4d33      	ldr	r5, [pc, #204]	; (80028a0 <DMA_CalcBaseAndBitshift+0xd8>)
 80027d4:	42b2      	cmp	r2, r6
 80027d6:	bf18      	it	ne
 80027d8:	429a      	cmpne	r2, r3
 80027da:	4c32      	ldr	r4, [pc, #200]	; (80028a4 <DMA_CalcBaseAndBitshift+0xdc>)
 80027dc:	4832      	ldr	r0, [pc, #200]	; (80028a8 <DMA_CalcBaseAndBitshift+0xe0>)
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	42aa      	cmp	r2, r5
 80027e6:	bf08      	it	eq
 80027e8:	f043 0301 	orreq.w	r3, r3, #1
 80027ec:	42a2      	cmp	r2, r4
 80027ee:	bf08      	it	eq
 80027f0:	f043 0301 	orreq.w	r3, r3, #1
 80027f4:	3430      	adds	r4, #48	; 0x30
 80027f6:	4282      	cmp	r2, r0
 80027f8:	bf08      	it	eq
 80027fa:	f043 0301 	orreq.w	r3, r3, #1
 80027fe:	3030      	adds	r0, #48	; 0x30
 8002800:	42a2      	cmp	r2, r4
 8002802:	bf08      	it	eq
 8002804:	f043 0301 	orreq.w	r3, r3, #1
 8002808:	3430      	adds	r4, #48	; 0x30
 800280a:	4282      	cmp	r2, r0
 800280c:	bf08      	it	eq
 800280e:	f043 0301 	orreq.w	r3, r3, #1
 8002812:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002816:	42a2      	cmp	r2, r4
 8002818:	bf08      	it	eq
 800281a:	f043 0301 	orreq.w	r3, r3, #1
 800281e:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8002822:	4282      	cmp	r2, r0
 8002824:	bf08      	it	eq
 8002826:	f043 0301 	orreq.w	r3, r3, #1
 800282a:	3030      	adds	r0, #48	; 0x30
 800282c:	42a2      	cmp	r2, r4
 800282e:	bf08      	it	eq
 8002830:	f043 0301 	orreq.w	r3, r3, #1
 8002834:	3430      	adds	r4, #48	; 0x30
 8002836:	4282      	cmp	r2, r0
 8002838:	bf08      	it	eq
 800283a:	f043 0301 	orreq.w	r3, r3, #1
 800283e:	3030      	adds	r0, #48	; 0x30
 8002840:	42a2      	cmp	r2, r4
 8002842:	bf08      	it	eq
 8002844:	f043 0301 	orreq.w	r3, r3, #1
 8002848:	3430      	adds	r4, #48	; 0x30
 800284a:	4282      	cmp	r2, r0
 800284c:	bf08      	it	eq
 800284e:	f043 0301 	orreq.w	r3, r3, #1
 8002852:	3030      	adds	r0, #48	; 0x30
 8002854:	42a2      	cmp	r2, r4
 8002856:	bf08      	it	eq
 8002858:	f043 0301 	orreq.w	r3, r3, #1
 800285c:	4282      	cmp	r2, r0
 800285e:	bf08      	it	eq
 8002860:	f043 0301 	orreq.w	r3, r3, #1
 8002864:	b913      	cbnz	r3, 800286c <DMA_CalcBaseAndBitshift+0xa4>
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <DMA_CalcBaseAndBitshift+0xe4>)
 8002868:	429a      	cmp	r2, r3
 800286a:	d112      	bne.n	8002892 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800286c:	b2d3      	uxtb	r3, r2
 800286e:	4810      	ldr	r0, [pc, #64]	; (80028b0 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002870:	4c10      	ldr	r4, [pc, #64]	; (80028b4 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002872:	3b10      	subs	r3, #16
 8002874:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 8002878:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800287a:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800287e:	5c20      	ldrb	r0, [r4, r0]
 8002880:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002882:	480d      	ldr	r0, [pc, #52]	; (80028b8 <DMA_CalcBaseAndBitshift+0xf0>)
 8002884:	ea00 0002 	and.w	r0, r0, r2
 8002888:	bf88      	it	hi
 800288a:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800288c:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800288e:	bc70      	pop	{r4, r5, r6}
 8002890:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002892:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8002896:	e7f9      	b.n	800288c <DMA_CalcBaseAndBitshift+0xc4>
 8002898:	40020010 	.word	0x40020010
 800289c:	40020028 	.word	0x40020028
 80028a0:	40020040 	.word	0x40020040
 80028a4:	40020058 	.word	0x40020058
 80028a8:	40020070 	.word	0x40020070
 80028ac:	400204b8 	.word	0x400204b8
 80028b0:	aaaaaaab 	.word	0xaaaaaaab
 80028b4:	080085fc 	.word	0x080085fc
 80028b8:	fffffc00 	.word	0xfffffc00

080028bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80028bc:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028be:	4a27      	ldr	r2, [pc, #156]	; (800295c <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 80028c0:	4927      	ldr	r1, [pc, #156]	; (8002960 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 80028c2:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028c4:	4d27      	ldr	r5, [pc, #156]	; (8002964 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80028c6:	4c28      	ldr	r4, [pc, #160]	; (8002968 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80028c8:	42ab      	cmp	r3, r5
 80028ca:	bf18      	it	ne
 80028cc:	4293      	cmpne	r3, r2
 80028ce:	bf0c      	ite	eq
 80028d0:	2201      	moveq	r2, #1
 80028d2:	2200      	movne	r2, #0
 80028d4:	428b      	cmp	r3, r1
 80028d6:	bf08      	it	eq
 80028d8:	f042 0201 	orreq.w	r2, r2, #1
 80028dc:	3128      	adds	r1, #40	; 0x28
 80028de:	42a3      	cmp	r3, r4
 80028e0:	bf08      	it	eq
 80028e2:	f042 0201 	orreq.w	r2, r2, #1
 80028e6:	3428      	adds	r4, #40	; 0x28
 80028e8:	428b      	cmp	r3, r1
 80028ea:	bf08      	it	eq
 80028ec:	f042 0201 	orreq.w	r2, r2, #1
 80028f0:	3128      	adds	r1, #40	; 0x28
 80028f2:	42a3      	cmp	r3, r4
 80028f4:	bf08      	it	eq
 80028f6:	f042 0201 	orreq.w	r2, r2, #1
 80028fa:	428b      	cmp	r3, r1
 80028fc:	bf08      	it	eq
 80028fe:	f042 0201 	orreq.w	r2, r2, #1
 8002902:	b912      	cbnz	r2, 800290a <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8002904:	4a19      	ldr	r2, [pc, #100]	; (800296c <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d113      	bne.n	8002932 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4918      	ldr	r1, [pc, #96]	; (8002970 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800290e:	4a19      	ldr	r2, [pc, #100]	; (8002974 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002910:	3b08      	subs	r3, #8
 8002912:	4c19      	ldr	r4, [pc, #100]	; (8002978 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8002914:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002918:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800291a:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800291e:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002922:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800292a:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800292e:	bc30      	pop	{r4, r5}
 8002930:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002932:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002934:	4a11      	ldr	r2, [pc, #68]	; (800297c <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002936:	4c12      	ldr	r4, [pc, #72]	; (8002980 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8002938:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800293a:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800293c:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002940:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002942:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002946:	d800      	bhi.n	800294a <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8002948:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800294a:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800294c:	f001 041f 	and.w	r4, r1, #31
 8002950:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002952:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002954:	40a3      	lsls	r3, r4
 8002956:	4c0c      	ldr	r4, [pc, #48]	; (8002988 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002958:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800295a:	e7e5      	b.n	8002928 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 800295c:	58025408 	.word	0x58025408
 8002960:	58025430 	.word	0x58025430
 8002964:	5802541c 	.word	0x5802541c
 8002968:	58025444 	.word	0x58025444
 800296c:	58025494 	.word	0x58025494
 8002970:	cccccccd 	.word	0xcccccccd
 8002974:	16009600 	.word	0x16009600
 8002978:	58025880 	.word	0x58025880
 800297c:	bffdfbf0 	.word	0xbffdfbf0
 8002980:	aaaaaaab 	.word	0xaaaaaaab
 8002984:	10008200 	.word	0x10008200
 8002988:	40020880 	.word	0x40020880

0800298c <HAL_DMA_Init>:
{
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7fe fe0a 	bl	80015a8 <HAL_GetTick>
  if(hdma == NULL)
 8002994:	2c00      	cmp	r4, #0
 8002996:	f000 8166 	beq.w	8002c66 <HAL_DMA_Init+0x2da>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	4605      	mov	r5, r0
 800299e:	4ba4      	ldr	r3, [pc, #656]	; (8002c30 <HAL_DMA_Init+0x2a4>)
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d048      	beq.n	8002a36 <HAL_DMA_Init+0xaa>
 80029a4:	3318      	adds	r3, #24
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d045      	beq.n	8002a36 <HAL_DMA_Init+0xaa>
 80029aa:	3330      	adds	r3, #48	; 0x30
 80029ac:	49a1      	ldr	r1, [pc, #644]	; (8002c34 <HAL_DMA_Init+0x2a8>)
 80029ae:	428a      	cmp	r2, r1
 80029b0:	bf18      	it	ne
 80029b2:	429a      	cmpne	r2, r3
 80029b4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80029b8:	bf0c      	ite	eq
 80029ba:	2301      	moveq	r3, #1
 80029bc:	2300      	movne	r3, #0
 80029be:	428a      	cmp	r2, r1
 80029c0:	bf08      	it	eq
 80029c2:	f043 0301 	orreq.w	r3, r3, #1
 80029c6:	3118      	adds	r1, #24
 80029c8:	428a      	cmp	r2, r1
 80029ca:	bf08      	it	eq
 80029cc:	f043 0301 	orreq.w	r3, r3, #1
 80029d0:	3118      	adds	r1, #24
 80029d2:	428a      	cmp	r2, r1
 80029d4:	bf08      	it	eq
 80029d6:	f043 0301 	orreq.w	r3, r3, #1
 80029da:	3118      	adds	r1, #24
 80029dc:	428a      	cmp	r2, r1
 80029de:	bf08      	it	eq
 80029e0:	f043 0301 	orreq.w	r3, r3, #1
 80029e4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80029e8:	428a      	cmp	r2, r1
 80029ea:	bf08      	it	eq
 80029ec:	f043 0301 	orreq.w	r3, r3, #1
 80029f0:	3118      	adds	r1, #24
 80029f2:	428a      	cmp	r2, r1
 80029f4:	bf08      	it	eq
 80029f6:	f043 0301 	orreq.w	r3, r3, #1
 80029fa:	3118      	adds	r1, #24
 80029fc:	428a      	cmp	r2, r1
 80029fe:	bf08      	it	eq
 8002a00:	f043 0301 	orreq.w	r3, r3, #1
 8002a04:	3118      	adds	r1, #24
 8002a06:	428a      	cmp	r2, r1
 8002a08:	bf08      	it	eq
 8002a0a:	f043 0301 	orreq.w	r3, r3, #1
 8002a0e:	3118      	adds	r1, #24
 8002a10:	428a      	cmp	r2, r1
 8002a12:	bf08      	it	eq
 8002a14:	f043 0301 	orreq.w	r3, r3, #1
 8002a18:	3118      	adds	r1, #24
 8002a1a:	428a      	cmp	r2, r1
 8002a1c:	bf08      	it	eq
 8002a1e:	f043 0301 	orreq.w	r3, r3, #1
 8002a22:	3118      	adds	r1, #24
 8002a24:	428a      	cmp	r2, r1
 8002a26:	bf08      	it	eq
 8002a28:	f043 0301 	orreq.w	r3, r3, #1
 8002a2c:	b91b      	cbnz	r3, 8002a36 <HAL_DMA_Init+0xaa>
 8002a2e:	4b82      	ldr	r3, [pc, #520]	; (8002c38 <HAL_DMA_Init+0x2ac>)
 8002a30:	429a      	cmp	r2, r3
 8002a32:	f040 8180 	bne.w	8002d36 <HAL_DMA_Init+0x3aa>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a36:	2302      	movs	r3, #2
 8002a38:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8002a42:	6813      	ldr	r3, [r2, #0]
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e005      	b.n	8002a58 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4c:	f7fe fdac 	bl	80015a8 <HAL_GetTick>
 8002a50:	1b43      	subs	r3, r0, r5
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	f200 80e5 	bhi.w	8002c22 <HAL_DMA_Init+0x296>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	07d2      	lsls	r2, r2, #31
 8002a5e:	d4f5      	bmi.n	8002a4c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8002a60:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a64:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8002a66:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a68:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a70:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a72:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a76:	69a1      	ldr	r1, [r4, #24]
 8002a78:	ea42 0201 	orr.w	r2, r2, r1
 8002a7c:	69e1      	ldr	r1, [r4, #28]
 8002a7e:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a82:	6a21      	ldr	r1, [r4, #32]
 8002a84:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a88:	496c      	ldr	r1, [pc, #432]	; (8002c3c <HAL_DMA_Init+0x2b0>)
 8002a8a:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 8002a8e:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a92:	d103      	bne.n	8002a9c <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a94:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8002a98:	4301      	orrs	r1, r0
 8002a9a:	430a      	orrs	r2, r1
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002a9c:	6861      	ldr	r1, [r4, #4]
 8002a9e:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8002aa2:	281f      	cmp	r0, #31
 8002aa4:	f240 80d4 	bls.w	8002c50 <HAL_DMA_Init+0x2c4>
 8002aa8:	f1a1 004f 	sub.w	r0, r1, #79	; 0x4f
 8002aac:	2803      	cmp	r0, #3
 8002aae:	f200 80d5 	bhi.w	8002c5c <HAL_DMA_Init+0x2d0>
        registerValue |= DMA_SxCR_TRBUFF;
 8002ab2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ab6:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ab8:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8002aba:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002abc:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002abe:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ac0:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002ac4:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_DMA_Init+0x15c>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002aca:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8002ace:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ad0:	b150      	cbz	r0, 8002ae8 <HAL_DMA_Init+0x15c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ad2:	69a5      	ldr	r5, [r4, #24]
 8002ad4:	2d00      	cmp	r5, #0
 8002ad6:	f040 8108 	bne.w	8002cea <HAL_DMA_Init+0x35e>
    switch (hdma->Init.FIFOThreshold)
 8002ada:	2a01      	cmp	r2, #1
 8002adc:	f000 8126 	beq.w	8002d2c <HAL_DMA_Init+0x3a0>
 8002ae0:	f032 0202 	bics.w	r2, r2, #2
 8002ae4:	f000 8109 	beq.w	8002cfa <HAL_DMA_Init+0x36e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002ae8:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7ff fe6c 	bl	80027c8 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002af0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002af2:	233f      	movs	r3, #63	; 0x3f
 8002af4:	f002 021f 	and.w	r2, r2, #31
 8002af8:	4093      	lsls	r3, r2
 8002afa:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002afc:	6822      	ldr	r2, [r4, #0]
 8002afe:	4b4c      	ldr	r3, [pc, #304]	; (8002c30 <HAL_DMA_Init+0x2a4>)
 8002b00:	484f      	ldr	r0, [pc, #316]	; (8002c40 <HAL_DMA_Init+0x2b4>)
 8002b02:	494c      	ldr	r1, [pc, #304]	; (8002c34 <HAL_DMA_Init+0x2a8>)
 8002b04:	4282      	cmp	r2, r0
 8002b06:	bf18      	it	ne
 8002b08:	429a      	cmpne	r2, r3
 8002b0a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	428a      	cmp	r2, r1
 8002b16:	bf08      	it	eq
 8002b18:	f043 0301 	orreq.w	r3, r3, #1
 8002b1c:	3130      	adds	r1, #48	; 0x30
 8002b1e:	4282      	cmp	r2, r0
 8002b20:	bf08      	it	eq
 8002b22:	f043 0301 	orreq.w	r3, r3, #1
 8002b26:	3030      	adds	r0, #48	; 0x30
 8002b28:	428a      	cmp	r2, r1
 8002b2a:	bf08      	it	eq
 8002b2c:	f043 0301 	orreq.w	r3, r3, #1
 8002b30:	3130      	adds	r1, #48	; 0x30
 8002b32:	4282      	cmp	r2, r0
 8002b34:	bf08      	it	eq
 8002b36:	f043 0301 	orreq.w	r3, r3, #1
 8002b3a:	3030      	adds	r0, #48	; 0x30
 8002b3c:	428a      	cmp	r2, r1
 8002b3e:	bf08      	it	eq
 8002b40:	f043 0301 	orreq.w	r3, r3, #1
 8002b44:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8002b48:	4282      	cmp	r2, r0
 8002b4a:	bf08      	it	eq
 8002b4c:	f043 0301 	orreq.w	r3, r3, #1
 8002b50:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8002b54:	428a      	cmp	r2, r1
 8002b56:	bf08      	it	eq
 8002b58:	f043 0301 	orreq.w	r3, r3, #1
 8002b5c:	3130      	adds	r1, #48	; 0x30
 8002b5e:	4282      	cmp	r2, r0
 8002b60:	bf08      	it	eq
 8002b62:	f043 0301 	orreq.w	r3, r3, #1
 8002b66:	3030      	adds	r0, #48	; 0x30
 8002b68:	428a      	cmp	r2, r1
 8002b6a:	bf08      	it	eq
 8002b6c:	f043 0301 	orreq.w	r3, r3, #1
 8002b70:	3130      	adds	r1, #48	; 0x30
 8002b72:	4282      	cmp	r2, r0
 8002b74:	bf08      	it	eq
 8002b76:	f043 0301 	orreq.w	r3, r3, #1
 8002b7a:	3030      	adds	r0, #48	; 0x30
 8002b7c:	428a      	cmp	r2, r1
 8002b7e:	bf08      	it	eq
 8002b80:	f043 0301 	orreq.w	r3, r3, #1
 8002b84:	3130      	adds	r1, #48	; 0x30
 8002b86:	4282      	cmp	r2, r0
 8002b88:	bf08      	it	eq
 8002b8a:	f043 0301 	orreq.w	r3, r3, #1
 8002b8e:	3030      	adds	r0, #48	; 0x30
 8002b90:	428a      	cmp	r2, r1
 8002b92:	bf08      	it	eq
 8002b94:	f043 0301 	orreq.w	r3, r3, #1
 8002b98:	492a      	ldr	r1, [pc, #168]	; (8002c44 <HAL_DMA_Init+0x2b8>)
 8002b9a:	4282      	cmp	r2, r0
 8002b9c:	bf08      	it	eq
 8002b9e:	f043 0301 	orreq.w	r3, r3, #1
 8002ba2:	4829      	ldr	r0, [pc, #164]	; (8002c48 <HAL_DMA_Init+0x2bc>)
 8002ba4:	428a      	cmp	r2, r1
 8002ba6:	bf08      	it	eq
 8002ba8:	f043 0301 	orreq.w	r3, r3, #1
 8002bac:	3128      	adds	r1, #40	; 0x28
 8002bae:	4282      	cmp	r2, r0
 8002bb0:	bf08      	it	eq
 8002bb2:	f043 0301 	orreq.w	r3, r3, #1
 8002bb6:	3028      	adds	r0, #40	; 0x28
 8002bb8:	428a      	cmp	r2, r1
 8002bba:	bf08      	it	eq
 8002bbc:	f043 0301 	orreq.w	r3, r3, #1
 8002bc0:	3128      	adds	r1, #40	; 0x28
 8002bc2:	4282      	cmp	r2, r0
 8002bc4:	bf08      	it	eq
 8002bc6:	f043 0301 	orreq.w	r3, r3, #1
 8002bca:	3028      	adds	r0, #40	; 0x28
 8002bcc:	428a      	cmp	r2, r1
 8002bce:	bf08      	it	eq
 8002bd0:	f043 0301 	orreq.w	r3, r3, #1
 8002bd4:	3128      	adds	r1, #40	; 0x28
 8002bd6:	4282      	cmp	r2, r0
 8002bd8:	bf08      	it	eq
 8002bda:	f043 0301 	orreq.w	r3, r3, #1
 8002bde:	428a      	cmp	r2, r1
 8002be0:	bf08      	it	eq
 8002be2:	f043 0301 	orreq.w	r3, r3, #1
 8002be6:	b913      	cbnz	r3, 8002bee <HAL_DMA_Init+0x262>
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_DMA_Init+0x2c0>)
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d113      	bne.n	8002c16 <HAL_DMA_Init+0x28a>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f7ff fe64 	bl	80028bc <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bf4:	68a3      	ldr	r3, [r4, #8]
 8002bf6:	2b80      	cmp	r3, #128	; 0x80
 8002bf8:	d037      	beq.n	8002c6a <HAL_DMA_Init+0x2de>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bfa:	7922      	ldrb	r2, [r4, #4]
 8002bfc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002bfe:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c00:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8002c04:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c06:	6861      	ldr	r1, [r4, #4]
 8002c08:	1e4b      	subs	r3, r1, #1
 8002c0a:	2b07      	cmp	r3, #7
 8002c0c:	d931      	bls.n	8002c72 <HAL_DMA_Init+0x2e6>
      hdma->DMAmuxRequestGen = 0U;
 8002c0e:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c10:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c14:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c16:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002c18:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c1a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002c20:	bd38      	pop	{r3, r4, r5, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c22:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c24:	2303      	movs	r3, #3
        return HAL_ERROR;
 8002c26:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c28:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c2a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002c2e:	bd38      	pop	{r3, r4, r5, pc}
 8002c30:	40020010 	.word	0x40020010
 8002c34:	40020040 	.word	0x40020040
 8002c38:	400204b8 	.word	0x400204b8
 8002c3c:	fe10803f 	.word	0xfe10803f
 8002c40:	40020028 	.word	0x40020028
 8002c44:	58025408 	.word	0x58025408
 8002c48:	5802541c 	.word	0x5802541c
 8002c4c:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c50:	4d6d      	ldr	r5, [pc, #436]	; (8002e08 <HAL_DMA_Init+0x47c>)
 8002c52:	fa25 f000 	lsr.w	r0, r5, r0
 8002c56:	07c0      	lsls	r0, r0, #31
 8002c58:	f53f af2b 	bmi.w	8002ab2 <HAL_DMA_Init+0x126>
 8002c5c:	3974      	subs	r1, #116	; 0x74
 8002c5e:	2903      	cmp	r1, #3
 8002c60:	f63f af29 	bhi.w	8002ab6 <HAL_DMA_Init+0x12a>
 8002c64:	e725      	b.n	8002ab2 <HAL_DMA_Init+0x126>
    return HAL_ERROR;
 8002c66:	2001      	movs	r0, #1
}
 8002c68:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	6063      	str	r3, [r4, #4]
 8002c70:	e7c4      	b.n	8002bfc <HAL_DMA_Init+0x270>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c72:	6820      	ldr	r0, [r4, #0]
 8002c74:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_DMA_Init+0x480>)
 8002c76:	4d66      	ldr	r5, [pc, #408]	; (8002e10 <HAL_DMA_Init+0x484>)
 8002c78:	42a8      	cmp	r0, r5
 8002c7a:	bf18      	it	ne
 8002c7c:	4290      	cmpne	r0, r2
 8002c7e:	f105 0514 	add.w	r5, r5, #20
 8002c82:	bf0c      	ite	eq
 8002c84:	2201      	moveq	r2, #1
 8002c86:	2200      	movne	r2, #0
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	bf08      	it	eq
 8002c8c:	f042 0201 	orreq.w	r2, r2, #1
 8002c90:	3514      	adds	r5, #20
 8002c92:	42a8      	cmp	r0, r5
 8002c94:	bf08      	it	eq
 8002c96:	f042 0201 	orreq.w	r2, r2, #1
 8002c9a:	3514      	adds	r5, #20
 8002c9c:	42a8      	cmp	r0, r5
 8002c9e:	bf08      	it	eq
 8002ca0:	f042 0201 	orreq.w	r2, r2, #1
 8002ca4:	3514      	adds	r5, #20
 8002ca6:	42a8      	cmp	r0, r5
 8002ca8:	bf08      	it	eq
 8002caa:	f042 0201 	orreq.w	r2, r2, #1
 8002cae:	3514      	adds	r5, #20
 8002cb0:	42a8      	cmp	r0, r5
 8002cb2:	bf08      	it	eq
 8002cb4:	f042 0201 	orreq.w	r2, r2, #1
 8002cb8:	b93a      	cbnz	r2, 8002cca <HAL_DMA_Init+0x33e>
 8002cba:	4a56      	ldr	r2, [pc, #344]	; (8002e14 <HAL_DMA_Init+0x488>)
 8002cbc:	4290      	cmp	r0, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_DMA_Init+0x33e>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cc0:	4a55      	ldr	r2, [pc, #340]	; (8002e18 <HAL_DMA_Init+0x48c>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cc2:	4856      	ldr	r0, [pc, #344]	; (8002e1c <HAL_DMA_Init+0x490>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cc4:	440a      	add	r2, r1
 8002cc6:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cc8:	e003      	b.n	8002cd2 <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cca:	4a55      	ldr	r2, [pc, #340]	; (8002e20 <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002ccc:	4855      	ldr	r0, [pc, #340]	; (8002e24 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cce:	440a      	add	r2, r1
 8002cd0:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cd8:	2100      	movs	r1, #0
 8002cda:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002cde:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ce0:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce2:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	e795      	b.n	8002c16 <HAL_DMA_Init+0x28a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cea:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8002cee:	d00e      	beq.n	8002d0e <HAL_DMA_Init+0x382>
    switch (hdma->Init.FIFOThreshold)
 8002cf0:	2a02      	cmp	r2, #2
 8002cf2:	d905      	bls.n	8002d00 <HAL_DMA_Init+0x374>
 8002cf4:	2a03      	cmp	r2, #3
 8002cf6:	f47f aef7 	bne.w	8002ae8 <HAL_DMA_Init+0x15c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfa:	01c2      	lsls	r2, r0, #7
 8002cfc:	f57f aef4 	bpl.w	8002ae8 <HAL_DMA_Init+0x15c>
          hdma->State = HAL_DMA_STATE_READY;
 8002d00:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d02:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8002d04:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d06:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002d08:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002d0c:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8002d0e:	2a03      	cmp	r2, #3
 8002d10:	f63f aeea 	bhi.w	8002ae8 <HAL_DMA_Init+0x15c>
 8002d14:	a501      	add	r5, pc, #4	; (adr r5, 8002d1c <HAL_DMA_Init+0x390>)
 8002d16:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d01 	.word	0x08002d01
 8002d20:	08002cfb 	.word	0x08002cfb
 8002d24:	08002d01 	.word	0x08002d01
 8002d28:	08002d2d 	.word	0x08002d2d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d2c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002d30:	f47f aeda 	bne.w	8002ae8 <HAL_DMA_Init+0x15c>
 8002d34:	e7e4      	b.n	8002d00 <HAL_DMA_Init+0x374>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d36:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_DMA_Init+0x480>)
 8002d38:	4835      	ldr	r0, [pc, #212]	; (8002e10 <HAL_DMA_Init+0x484>)
 8002d3a:	493b      	ldr	r1, [pc, #236]	; (8002e28 <HAL_DMA_Init+0x49c>)
 8002d3c:	4282      	cmp	r2, r0
 8002d3e:	bf18      	it	ne
 8002d40:	429a      	cmpne	r2, r3
 8002d42:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	428a      	cmp	r2, r1
 8002d4e:	bf08      	it	eq
 8002d50:	f043 0301 	orreq.w	r3, r3, #1
 8002d54:	3128      	adds	r1, #40	; 0x28
 8002d56:	4282      	cmp	r2, r0
 8002d58:	bf08      	it	eq
 8002d5a:	f043 0301 	orreq.w	r3, r3, #1
 8002d5e:	3028      	adds	r0, #40	; 0x28
 8002d60:	428a      	cmp	r2, r1
 8002d62:	bf08      	it	eq
 8002d64:	f043 0301 	orreq.w	r3, r3, #1
 8002d68:	3128      	adds	r1, #40	; 0x28
 8002d6a:	4282      	cmp	r2, r0
 8002d6c:	bf08      	it	eq
 8002d6e:	f043 0301 	orreq.w	r3, r3, #1
 8002d72:	428a      	cmp	r2, r1
 8002d74:	bf08      	it	eq
 8002d76:	f043 0301 	orreq.w	r3, r3, #1
 8002d7a:	b913      	cbnz	r3, 8002d82 <HAL_DMA_Init+0x3f6>
 8002d7c:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_DMA_Init+0x488>)
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d13a      	bne.n	8002df8 <HAL_DMA_Init+0x46c>
    __HAL_UNLOCK(hdma);
 8002d82:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d84:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d86:	4929      	ldr	r1, [pc, #164]	; (8002e2c <HAL_DMA_Init+0x4a0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d88:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002d8c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d90:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d92:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d94:	68a3      	ldr	r3, [r4, #8]
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d02c      	beq.n	8002df4 <HAL_DMA_Init+0x468>
 8002d9a:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002da6:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8002daa:	08db      	lsrs	r3, r3, #3
 8002dac:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002db0:	6965      	ldr	r5, [r4, #20]
 8002db2:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002db6:	69a5      	ldr	r5, [r4, #24]
 8002db8:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dbc:	69e5      	ldr	r5, [r4, #28]
 8002dbe:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002dc2:	6a25      	ldr	r5, [r4, #32]
 8002dc4:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8002dc8:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dca:	4919      	ldr	r1, [pc, #100]	; (8002e30 <HAL_DMA_Init+0x4a4>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dcc:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_DMA_Init+0x4a8>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002dd0:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dd2:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dd4:	6822      	ldr	r2, [r4, #0]
 8002dd6:	4411      	add	r1, r2
 8002dd8:	fba3 2301 	umull	r2, r3, r3, r1
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002de2:	f7ff fcf1 	bl	80027c8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002de6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002de8:	2301      	movs	r3, #1
 8002dea:	f002 021f 	and.w	r2, r2, #31
 8002dee:	4093      	lsls	r3, r2
 8002df0:	6043      	str	r3, [r0, #4]
 8002df2:	e683      	b.n	8002afc <HAL_DMA_Init+0x170>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002df4:	2010      	movs	r0, #16
 8002df6:	e7d6      	b.n	8002da6 <HAL_DMA_Init+0x41a>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002df8:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002dfa:	2303      	movs	r3, #3
    return HAL_ERROR;
 8002dfc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dfe:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002e04:	bd38      	pop	{r3, r4, r5, pc}
 8002e06:	bf00      	nop
 8002e08:	c3c0003f 	.word	0xc3c0003f
 8002e0c:	58025408 	.word	0x58025408
 8002e10:	5802541c 	.word	0x5802541c
 8002e14:	58025494 	.word	0x58025494
 8002e18:	1000823f 	.word	0x1000823f
 8002e1c:	40020940 	.word	0x40020940
 8002e20:	1600963f 	.word	0x1600963f
 8002e24:	58025940 	.word	0x58025940
 8002e28:	58025430 	.word	0x58025430
 8002e2c:	fffe000f 	.word	0xfffe000f
 8002e30:	a7fdabf8 	.word	0xa7fdabf8
 8002e34:	cccccccd 	.word	0xcccccccd

08002e38 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	f000 8270 	beq.w	800331e <HAL_DMA_Start_IT+0x4e6>
 8002e3e:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8002e40:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002e44:	2801      	cmp	r0, #1
 8002e46:	f000 826c 	beq.w	8003322 <HAL_DMA_Start_IT+0x4ea>
 8002e4a:	2001      	movs	r0, #1
{
 8002e4c:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e4e:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8002e52:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e56:	4284      	cmp	r4, r0
 8002e58:	d008      	beq.n	8002e6c <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8002e5e:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e60:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002e64:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8002e68:	bc70      	pop	{r4, r5, r6}
 8002e6a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e6c:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8002e6e:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e72:	4ea2      	ldr	r6, [pc, #648]	; (80030fc <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e74:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8002e7e:	6820      	ldr	r0, [r4, #0]
 8002e80:	f020 0001 	bic.w	r0, r0, #1
 8002e84:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e86:	489e      	ldr	r0, [pc, #632]	; (8003100 <HAL_DMA_Start_IT+0x2c8>)
 8002e88:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e8c:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e90:	42b4      	cmp	r4, r6
 8002e92:	bf18      	it	ne
 8002e94:	4284      	cmpne	r4, r0
 8002e96:	f106 0618 	add.w	r6, r6, #24
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2001      	moveq	r0, #1
 8002e9e:	2000      	movne	r0, #0
 8002ea0:	42b4      	cmp	r4, r6
 8002ea2:	bf08      	it	eq
 8002ea4:	f040 0001 	orreq.w	r0, r0, #1
 8002ea8:	3618      	adds	r6, #24
 8002eaa:	42b4      	cmp	r4, r6
 8002eac:	bf08      	it	eq
 8002eae:	f040 0001 	orreq.w	r0, r0, #1
 8002eb2:	3618      	adds	r6, #24
 8002eb4:	42b4      	cmp	r4, r6
 8002eb6:	bf08      	it	eq
 8002eb8:	f040 0001 	orreq.w	r0, r0, #1
 8002ebc:	3618      	adds	r6, #24
 8002ebe:	42b4      	cmp	r4, r6
 8002ec0:	bf08      	it	eq
 8002ec2:	f040 0001 	orreq.w	r0, r0, #1
 8002ec6:	3618      	adds	r6, #24
 8002ec8:	42b4      	cmp	r4, r6
 8002eca:	bf08      	it	eq
 8002ecc:	f040 0001 	orreq.w	r0, r0, #1
 8002ed0:	3618      	adds	r6, #24
 8002ed2:	42b4      	cmp	r4, r6
 8002ed4:	bf08      	it	eq
 8002ed6:	f040 0001 	orreq.w	r0, r0, #1
 8002eda:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8002ede:	42b4      	cmp	r4, r6
 8002ee0:	bf08      	it	eq
 8002ee2:	f040 0001 	orreq.w	r0, r0, #1
 8002ee6:	3618      	adds	r6, #24
 8002ee8:	42b4      	cmp	r4, r6
 8002eea:	bf08      	it	eq
 8002eec:	f040 0001 	orreq.w	r0, r0, #1
 8002ef0:	3618      	adds	r6, #24
 8002ef2:	42b4      	cmp	r4, r6
 8002ef4:	bf08      	it	eq
 8002ef6:	f040 0001 	orreq.w	r0, r0, #1
 8002efa:	3618      	adds	r6, #24
 8002efc:	42b4      	cmp	r4, r6
 8002efe:	bf08      	it	eq
 8002f00:	f040 0001 	orreq.w	r0, r0, #1
 8002f04:	3618      	adds	r6, #24
 8002f06:	42b4      	cmp	r4, r6
 8002f08:	bf08      	it	eq
 8002f0a:	f040 0001 	orreq.w	r0, r0, #1
 8002f0e:	3618      	adds	r6, #24
 8002f10:	42b4      	cmp	r4, r6
 8002f12:	bf08      	it	eq
 8002f14:	f040 0001 	orreq.w	r0, r0, #1
 8002f18:	3618      	adds	r6, #24
 8002f1a:	42b4      	cmp	r4, r6
 8002f1c:	bf08      	it	eq
 8002f1e:	f040 0001 	orreq.w	r0, r0, #1
 8002f22:	3618      	adds	r6, #24
 8002f24:	42b4      	cmp	r4, r6
 8002f26:	bf08      	it	eq
 8002f28:	f040 0001 	orreq.w	r0, r0, #1
 8002f2c:	4e75      	ldr	r6, [pc, #468]	; (8003104 <HAL_DMA_Start_IT+0x2cc>)
 8002f2e:	42b4      	cmp	r4, r6
 8002f30:	bf08      	it	eq
 8002f32:	f040 0001 	orreq.w	r0, r0, #1
 8002f36:	3614      	adds	r6, #20
 8002f38:	42b4      	cmp	r4, r6
 8002f3a:	bf08      	it	eq
 8002f3c:	f040 0001 	orreq.w	r0, r0, #1
 8002f40:	3614      	adds	r6, #20
 8002f42:	42b4      	cmp	r4, r6
 8002f44:	bf08      	it	eq
 8002f46:	f040 0001 	orreq.w	r0, r0, #1
 8002f4a:	3614      	adds	r6, #20
 8002f4c:	42b4      	cmp	r4, r6
 8002f4e:	bf08      	it	eq
 8002f50:	f040 0001 	orreq.w	r0, r0, #1
 8002f54:	3614      	adds	r6, #20
 8002f56:	42b4      	cmp	r4, r6
 8002f58:	bf08      	it	eq
 8002f5a:	f040 0001 	orreq.w	r0, r0, #1
 8002f5e:	3614      	adds	r6, #20
 8002f60:	42b4      	cmp	r4, r6
 8002f62:	bf08      	it	eq
 8002f64:	f040 0001 	orreq.w	r0, r0, #1
 8002f68:	3614      	adds	r6, #20
 8002f6a:	42b4      	cmp	r4, r6
 8002f6c:	bf08      	it	eq
 8002f6e:	f040 0001 	orreq.w	r0, r0, #1
 8002f72:	b910      	cbnz	r0, 8002f7a <HAL_DMA_Start_IT+0x142>
 8002f74:	4864      	ldr	r0, [pc, #400]	; (8003108 <HAL_DMA_Start_IT+0x2d0>)
 8002f76:	4284      	cmp	r4, r0
 8002f78:	d10a      	bne.n	8002f90 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f7a:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 8002f7e:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002f80:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8002f84:	b110      	cbz	r0, 8002f8c <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f86:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 8002f8a:	6044      	str	r4, [r0, #4]
 8002f8c:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f90:	485b      	ldr	r0, [pc, #364]	; (8003100 <HAL_DMA_Start_IT+0x2c8>)
 8002f92:	4e5a      	ldr	r6, [pc, #360]	; (80030fc <HAL_DMA_Start_IT+0x2c4>)
 8002f94:	42b4      	cmp	r4, r6
 8002f96:	bf18      	it	ne
 8002f98:	4284      	cmpne	r4, r0
 8002f9a:	f106 0618 	add.w	r6, r6, #24
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2001      	moveq	r0, #1
 8002fa2:	2000      	movne	r0, #0
 8002fa4:	42b4      	cmp	r4, r6
 8002fa6:	bf08      	it	eq
 8002fa8:	f040 0001 	orreq.w	r0, r0, #1
 8002fac:	3618      	adds	r6, #24
 8002fae:	42b4      	cmp	r4, r6
 8002fb0:	bf08      	it	eq
 8002fb2:	f040 0001 	orreq.w	r0, r0, #1
 8002fb6:	3618      	adds	r6, #24
 8002fb8:	42b4      	cmp	r4, r6
 8002fba:	bf08      	it	eq
 8002fbc:	f040 0001 	orreq.w	r0, r0, #1
 8002fc0:	3618      	adds	r6, #24
 8002fc2:	42b4      	cmp	r4, r6
 8002fc4:	bf08      	it	eq
 8002fc6:	f040 0001 	orreq.w	r0, r0, #1
 8002fca:	3618      	adds	r6, #24
 8002fcc:	42b4      	cmp	r4, r6
 8002fce:	bf08      	it	eq
 8002fd0:	f040 0001 	orreq.w	r0, r0, #1
 8002fd4:	3618      	adds	r6, #24
 8002fd6:	42b4      	cmp	r4, r6
 8002fd8:	bf08      	it	eq
 8002fda:	f040 0001 	orreq.w	r0, r0, #1
 8002fde:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8002fe2:	42b4      	cmp	r4, r6
 8002fe4:	bf08      	it	eq
 8002fe6:	f040 0001 	orreq.w	r0, r0, #1
 8002fea:	3618      	adds	r6, #24
 8002fec:	42b4      	cmp	r4, r6
 8002fee:	bf08      	it	eq
 8002ff0:	f040 0001 	orreq.w	r0, r0, #1
 8002ff4:	3618      	adds	r6, #24
 8002ff6:	42b4      	cmp	r4, r6
 8002ff8:	bf08      	it	eq
 8002ffa:	f040 0001 	orreq.w	r0, r0, #1
 8002ffe:	3618      	adds	r6, #24
 8003000:	42b4      	cmp	r4, r6
 8003002:	bf08      	it	eq
 8003004:	f040 0001 	orreq.w	r0, r0, #1
 8003008:	3618      	adds	r6, #24
 800300a:	42b4      	cmp	r4, r6
 800300c:	bf08      	it	eq
 800300e:	f040 0001 	orreq.w	r0, r0, #1
 8003012:	3618      	adds	r6, #24
 8003014:	42b4      	cmp	r4, r6
 8003016:	bf08      	it	eq
 8003018:	f040 0001 	orreq.w	r0, r0, #1
 800301c:	3618      	adds	r6, #24
 800301e:	42b4      	cmp	r4, r6
 8003020:	bf08      	it	eq
 8003022:	f040 0001 	orreq.w	r0, r0, #1
 8003026:	b918      	cbnz	r0, 8003030 <HAL_DMA_Start_IT+0x1f8>
 8003028:	4838      	ldr	r0, [pc, #224]	; (800310c <HAL_DMA_Start_IT+0x2d4>)
 800302a:	4284      	cmp	r4, r0
 800302c:	f040 817b 	bne.w	8003326 <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003030:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8003034:	f000 041f 	and.w	r4, r0, #31
 8003038:	203f      	movs	r0, #63	; 0x3f
 800303a:	40a0      	lsls	r0, r4
 800303c:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800303e:	f8dc 4000 	ldr.w	r4, [ip]
 8003042:	6820      	ldr	r0, [r4, #0]
 8003044:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8003048:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800304a:	f8dc 0000 	ldr.w	r0, [ip]
 800304e:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003050:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8003054:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003056:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800305a:	f000 815b 	beq.w	8003314 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800305e:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003060:	f8dc 3000 	ldr.w	r3, [ip]
 8003064:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003066:	f8dc 4000 	ldr.w	r4, [ip]
 800306a:	4b25      	ldr	r3, [pc, #148]	; (8003100 <HAL_DMA_Start_IT+0x2c8>)
 800306c:	4923      	ldr	r1, [pc, #140]	; (80030fc <HAL_DMA_Start_IT+0x2c4>)
 800306e:	4a28      	ldr	r2, [pc, #160]	; (8003110 <HAL_DMA_Start_IT+0x2d8>)
 8003070:	428c      	cmp	r4, r1
 8003072:	bf18      	it	ne
 8003074:	429c      	cmpne	r4, r3
 8003076:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	4294      	cmp	r4, r2
 8003082:	bf08      	it	eq
 8003084:	f043 0301 	orreq.w	r3, r3, #1
 8003088:	3230      	adds	r2, #48	; 0x30
 800308a:	428c      	cmp	r4, r1
 800308c:	bf08      	it	eq
 800308e:	f043 0301 	orreq.w	r3, r3, #1
 8003092:	3130      	adds	r1, #48	; 0x30
 8003094:	4294      	cmp	r4, r2
 8003096:	bf08      	it	eq
 8003098:	f043 0301 	orreq.w	r3, r3, #1
 800309c:	3230      	adds	r2, #48	; 0x30
 800309e:	428c      	cmp	r4, r1
 80030a0:	bf08      	it	eq
 80030a2:	f043 0301 	orreq.w	r3, r3, #1
 80030a6:	3130      	adds	r1, #48	; 0x30
 80030a8:	4294      	cmp	r4, r2
 80030aa:	bf08      	it	eq
 80030ac:	f043 0301 	orreq.w	r3, r3, #1
 80030b0:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80030b4:	428c      	cmp	r4, r1
 80030b6:	bf08      	it	eq
 80030b8:	f043 0301 	orreq.w	r3, r3, #1
 80030bc:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80030c0:	4294      	cmp	r4, r2
 80030c2:	bf08      	it	eq
 80030c4:	f043 0301 	orreq.w	r3, r3, #1
 80030c8:	3230      	adds	r2, #48	; 0x30
 80030ca:	428c      	cmp	r4, r1
 80030cc:	bf08      	it	eq
 80030ce:	f043 0301 	orreq.w	r3, r3, #1
 80030d2:	3130      	adds	r1, #48	; 0x30
 80030d4:	4294      	cmp	r4, r2
 80030d6:	bf08      	it	eq
 80030d8:	f043 0301 	orreq.w	r3, r3, #1
 80030dc:	3230      	adds	r2, #48	; 0x30
 80030de:	428c      	cmp	r4, r1
 80030e0:	bf08      	it	eq
 80030e2:	f043 0301 	orreq.w	r3, r3, #1
 80030e6:	3130      	adds	r1, #48	; 0x30
 80030e8:	4294      	cmp	r4, r2
 80030ea:	bf08      	it	eq
 80030ec:	f043 0301 	orreq.w	r3, r3, #1
 80030f0:	3230      	adds	r2, #48	; 0x30
 80030f2:	428c      	cmp	r4, r1
 80030f4:	bf08      	it	eq
 80030f6:	f043 0301 	orreq.w	r3, r3, #1
 80030fa:	e00b      	b.n	8003114 <HAL_DMA_Start_IT+0x2dc>
 80030fc:	40020028 	.word	0x40020028
 8003100:	40020010 	.word	0x40020010
 8003104:	58025408 	.word	0x58025408
 8003108:	58025494 	.word	0x58025494
 800310c:	400204b8 	.word	0x400204b8
 8003110:	40020040 	.word	0x40020040
 8003114:	4294      	cmp	r4, r2
 8003116:	bf08      	it	eq
 8003118:	f043 0301 	orreq.w	r3, r3, #1
 800311c:	b91b      	cbnz	r3, 8003126 <HAL_DMA_Start_IT+0x2ee>
 800311e:	4b9b      	ldr	r3, [pc, #620]	; (800338c <HAL_DMA_Start_IT+0x554>)
 8003120:	429c      	cmp	r4, r3
 8003122:	f040 8143 	bne.w	80033ac <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	f023 031e 	bic.w	r3, r3, #30
 800312c:	f043 0316 	orr.w	r3, r3, #22
 8003130:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003132:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003136:	b12b      	cbz	r3, 8003144 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003138:	f8dc 2000 	ldr.w	r2, [ip]
 800313c:	6813      	ldr	r3, [r2, #0]
 800313e:	f043 0308 	orr.w	r3, r3, #8
 8003142:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003144:	f8dc 4000 	ldr.w	r4, [ip]
 8003148:	4b91      	ldr	r3, [pc, #580]	; (8003390 <HAL_DMA_Start_IT+0x558>)
 800314a:	4992      	ldr	r1, [pc, #584]	; (8003394 <HAL_DMA_Start_IT+0x55c>)
 800314c:	4a92      	ldr	r2, [pc, #584]	; (8003398 <HAL_DMA_Start_IT+0x560>)
 800314e:	428c      	cmp	r4, r1
 8003150:	bf18      	it	ne
 8003152:	429c      	cmpne	r4, r3
 8003154:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	4294      	cmp	r4, r2
 8003160:	bf08      	it	eq
 8003162:	f043 0301 	orreq.w	r3, r3, #1
 8003166:	3230      	adds	r2, #48	; 0x30
 8003168:	428c      	cmp	r4, r1
 800316a:	bf08      	it	eq
 800316c:	f043 0301 	orreq.w	r3, r3, #1
 8003170:	3130      	adds	r1, #48	; 0x30
 8003172:	4294      	cmp	r4, r2
 8003174:	bf08      	it	eq
 8003176:	f043 0301 	orreq.w	r3, r3, #1
 800317a:	3230      	adds	r2, #48	; 0x30
 800317c:	428c      	cmp	r4, r1
 800317e:	bf08      	it	eq
 8003180:	f043 0301 	orreq.w	r3, r3, #1
 8003184:	3130      	adds	r1, #48	; 0x30
 8003186:	4294      	cmp	r4, r2
 8003188:	bf08      	it	eq
 800318a:	f043 0301 	orreq.w	r3, r3, #1
 800318e:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8003192:	428c      	cmp	r4, r1
 8003194:	bf08      	it	eq
 8003196:	f043 0301 	orreq.w	r3, r3, #1
 800319a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800319e:	4294      	cmp	r4, r2
 80031a0:	bf08      	it	eq
 80031a2:	f043 0301 	orreq.w	r3, r3, #1
 80031a6:	3230      	adds	r2, #48	; 0x30
 80031a8:	428c      	cmp	r4, r1
 80031aa:	bf08      	it	eq
 80031ac:	f043 0301 	orreq.w	r3, r3, #1
 80031b0:	3130      	adds	r1, #48	; 0x30
 80031b2:	4294      	cmp	r4, r2
 80031b4:	bf08      	it	eq
 80031b6:	f043 0301 	orreq.w	r3, r3, #1
 80031ba:	3230      	adds	r2, #48	; 0x30
 80031bc:	428c      	cmp	r4, r1
 80031be:	bf08      	it	eq
 80031c0:	f043 0301 	orreq.w	r3, r3, #1
 80031c4:	3130      	adds	r1, #48	; 0x30
 80031c6:	4294      	cmp	r4, r2
 80031c8:	bf08      	it	eq
 80031ca:	f043 0301 	orreq.w	r3, r3, #1
 80031ce:	3230      	adds	r2, #48	; 0x30
 80031d0:	428c      	cmp	r4, r1
 80031d2:	bf08      	it	eq
 80031d4:	f043 0301 	orreq.w	r3, r3, #1
 80031d8:	3130      	adds	r1, #48	; 0x30
 80031da:	4294      	cmp	r4, r2
 80031dc:	bf08      	it	eq
 80031de:	f043 0301 	orreq.w	r3, r3, #1
 80031e2:	4a6e      	ldr	r2, [pc, #440]	; (800339c <HAL_DMA_Start_IT+0x564>)
 80031e4:	428c      	cmp	r4, r1
 80031e6:	bf08      	it	eq
 80031e8:	f043 0301 	orreq.w	r3, r3, #1
 80031ec:	496c      	ldr	r1, [pc, #432]	; (80033a0 <HAL_DMA_Start_IT+0x568>)
 80031ee:	4294      	cmp	r4, r2
 80031f0:	bf08      	it	eq
 80031f2:	f043 0301 	orreq.w	r3, r3, #1
 80031f6:	3228      	adds	r2, #40	; 0x28
 80031f8:	428c      	cmp	r4, r1
 80031fa:	bf08      	it	eq
 80031fc:	f043 0301 	orreq.w	r3, r3, #1
 8003200:	3128      	adds	r1, #40	; 0x28
 8003202:	4294      	cmp	r4, r2
 8003204:	bf08      	it	eq
 8003206:	f043 0301 	orreq.w	r3, r3, #1
 800320a:	3228      	adds	r2, #40	; 0x28
 800320c:	428c      	cmp	r4, r1
 800320e:	bf08      	it	eq
 8003210:	f043 0301 	orreq.w	r3, r3, #1
 8003214:	3128      	adds	r1, #40	; 0x28
 8003216:	4294      	cmp	r4, r2
 8003218:	bf08      	it	eq
 800321a:	f043 0301 	orreq.w	r3, r3, #1
 800321e:	3228      	adds	r2, #40	; 0x28
 8003220:	428c      	cmp	r4, r1
 8003222:	bf08      	it	eq
 8003224:	f043 0301 	orreq.w	r3, r3, #1
 8003228:	4294      	cmp	r4, r2
 800322a:	bf08      	it	eq
 800322c:	f043 0301 	orreq.w	r3, r3, #1
 8003230:	b913      	cbnz	r3, 8003238 <HAL_DMA_Start_IT+0x400>
 8003232:	4b5c      	ldr	r3, [pc, #368]	; (80033a4 <HAL_DMA_Start_IT+0x56c>)
 8003234:	429c      	cmp	r4, r3
 8003236:	d111      	bne.n	800325c <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003238:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	03d2      	lsls	r2, r2, #15
 8003240:	d503      	bpl.n	800324a <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003248:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800324a:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 800324e:	b11b      	cbz	r3, 8003258 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 800325c:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <HAL_DMA_Start_IT+0x558>)
 800325e:	494d      	ldr	r1, [pc, #308]	; (8003394 <HAL_DMA_Start_IT+0x55c>)
 8003260:	4a4d      	ldr	r2, [pc, #308]	; (8003398 <HAL_DMA_Start_IT+0x560>)
 8003262:	428c      	cmp	r4, r1
 8003264:	bf18      	it	ne
 8003266:	429c      	cmpne	r4, r3
 8003268:	484f      	ldr	r0, [pc, #316]	; (80033a8 <HAL_DMA_Start_IT+0x570>)
 800326a:	f101 0160 	add.w	r1, r1, #96	; 0x60
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	4294      	cmp	r4, r2
 8003276:	bf08      	it	eq
 8003278:	f043 0301 	orreq.w	r3, r3, #1
 800327c:	3230      	adds	r2, #48	; 0x30
 800327e:	4284      	cmp	r4, r0
 8003280:	bf08      	it	eq
 8003282:	f043 0301 	orreq.w	r3, r3, #1
 8003286:	3060      	adds	r0, #96	; 0x60
 8003288:	4294      	cmp	r4, r2
 800328a:	bf08      	it	eq
 800328c:	f043 0301 	orreq.w	r3, r3, #1
 8003290:	3230      	adds	r2, #48	; 0x30
 8003292:	428c      	cmp	r4, r1
 8003294:	bf08      	it	eq
 8003296:	f043 0301 	orreq.w	r3, r3, #1
 800329a:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 800329e:	4294      	cmp	r4, r2
 80032a0:	bf08      	it	eq
 80032a2:	f043 0301 	orreq.w	r3, r3, #1
 80032a6:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80032aa:	4284      	cmp	r4, r0
 80032ac:	bf08      	it	eq
 80032ae:	f043 0301 	orreq.w	r3, r3, #1
 80032b2:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 80032b6:	4294      	cmp	r4, r2
 80032b8:	bf08      	it	eq
 80032ba:	f043 0301 	orreq.w	r3, r3, #1
 80032be:	3230      	adds	r2, #48	; 0x30
 80032c0:	428c      	cmp	r4, r1
 80032c2:	bf08      	it	eq
 80032c4:	f043 0301 	orreq.w	r3, r3, #1
 80032c8:	3160      	adds	r1, #96	; 0x60
 80032ca:	4294      	cmp	r4, r2
 80032cc:	bf08      	it	eq
 80032ce:	f043 0301 	orreq.w	r3, r3, #1
 80032d2:	3230      	adds	r2, #48	; 0x30
 80032d4:	4284      	cmp	r4, r0
 80032d6:	bf08      	it	eq
 80032d8:	f043 0301 	orreq.w	r3, r3, #1
 80032dc:	4294      	cmp	r4, r2
 80032de:	bf08      	it	eq
 80032e0:	f043 0301 	orreq.w	r3, r3, #1
 80032e4:	3230      	adds	r2, #48	; 0x30
 80032e6:	428c      	cmp	r4, r1
 80032e8:	bf08      	it	eq
 80032ea:	f043 0301 	orreq.w	r3, r3, #1
 80032ee:	4294      	cmp	r4, r2
 80032f0:	bf08      	it	eq
 80032f2:	f043 0301 	orreq.w	r3, r3, #1
 80032f6:	b933      	cbnz	r3, 8003306 <HAL_DMA_Start_IT+0x4ce>
 80032f8:	3060      	adds	r0, #96	; 0x60
 80032fa:	1a20      	subs	r0, r4, r0
 80032fc:	fab0 f080 	clz	r0, r0
 8003300:	0940      	lsrs	r0, r0, #5
 8003302:	2800      	cmp	r0, #0
 8003304:	d03d      	beq.n	8003382 <HAL_DMA_Start_IT+0x54a>
 8003306:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003308:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6023      	str	r3, [r4, #0]
}
 8003310:	bc70      	pop	{r4, r5, r6}
 8003312:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003314:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003316:	f8dc 3000 	ldr.w	r3, [ip]
 800331a:	60d9      	str	r1, [r3, #12]
 800331c:	e6a3      	b.n	8003066 <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 800331e:	2001      	movs	r0, #1
 8003320:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8003322:	2002      	movs	r0, #2
}
 8003324:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003326:	481d      	ldr	r0, [pc, #116]	; (800339c <HAL_DMA_Start_IT+0x564>)
 8003328:	4e1d      	ldr	r6, [pc, #116]	; (80033a0 <HAL_DMA_Start_IT+0x568>)
 800332a:	42b4      	cmp	r4, r6
 800332c:	bf18      	it	ne
 800332e:	4284      	cmpne	r4, r0
 8003330:	f106 0614 	add.w	r6, r6, #20
 8003334:	bf0c      	ite	eq
 8003336:	2001      	moveq	r0, #1
 8003338:	2000      	movne	r0, #0
 800333a:	42b4      	cmp	r4, r6
 800333c:	bf08      	it	eq
 800333e:	f040 0001 	orreq.w	r0, r0, #1
 8003342:	3614      	adds	r6, #20
 8003344:	42b4      	cmp	r4, r6
 8003346:	bf08      	it	eq
 8003348:	f040 0001 	orreq.w	r0, r0, #1
 800334c:	3614      	adds	r6, #20
 800334e:	42b4      	cmp	r4, r6
 8003350:	bf08      	it	eq
 8003352:	f040 0001 	orreq.w	r0, r0, #1
 8003356:	3614      	adds	r6, #20
 8003358:	42b4      	cmp	r4, r6
 800335a:	bf08      	it	eq
 800335c:	f040 0001 	orreq.w	r0, r0, #1
 8003360:	3614      	adds	r6, #20
 8003362:	42b4      	cmp	r4, r6
 8003364:	bf08      	it	eq
 8003366:	f040 0001 	orreq.w	r0, r0, #1
 800336a:	b910      	cbnz	r0, 8003372 <HAL_DMA_Start_IT+0x53a>
 800336c:	480d      	ldr	r0, [pc, #52]	; (80033a4 <HAL_DMA_Start_IT+0x56c>)
 800336e:	4284      	cmp	r4, r0
 8003370:	d11c      	bne.n	80033ac <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003372:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8003376:	f000 041f 	and.w	r4, r0, #31
 800337a:	2001      	movs	r0, #1
 800337c:	40a0      	lsls	r0, r4
 800337e:	6068      	str	r0, [r5, #4]
 8003380:	e663      	b.n	800304a <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	e56d      	b.n	8002e68 <HAL_DMA_Start_IT+0x30>
 800338c:	400204b8 	.word	0x400204b8
 8003390:	40020010 	.word	0x40020010
 8003394:	40020028 	.word	0x40020028
 8003398:	40020040 	.word	0x40020040
 800339c:	58025408 	.word	0x58025408
 80033a0:	5802541c 	.word	0x5802541c
 80033a4:	58025494 	.word	0x58025494
 80033a8:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	f023 030e 	bic.w	r3, r3, #14
 80033b2:	f043 030a 	orr.w	r3, r3, #10
 80033b6:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80033b8:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f43f aec1 	beq.w	8003144 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80033c2:	f8dc 2000 	ldr.w	r2, [ip]
 80033c6:	6813      	ldr	r3, [r2, #0]
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e6b9      	b.n	8003144 <HAL_DMA_Start_IT+0x30c>

080033d0 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d065      	beq.n	80034a0 <HAL_DMA_Abort_IT+0xd0>
{
 80033d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80033dc:	4603      	mov	r3, r0
 80033de:	2a02      	cmp	r2, #2
 80033e0:	d159      	bne.n	8003496 <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033e2:	6801      	ldr	r1, [r0, #0]
 80033e4:	4883      	ldr	r0, [pc, #524]	; (80035f4 <HAL_DMA_Abort_IT+0x224>)
 80033e6:	4281      	cmp	r1, r0
 80033e8:	d04b      	beq.n	8003482 <HAL_DMA_Abort_IT+0xb2>
 80033ea:	4c83      	ldr	r4, [pc, #524]	; (80035f8 <HAL_DMA_Abort_IT+0x228>)
 80033ec:	42a1      	cmp	r1, r4
 80033ee:	d048      	beq.n	8003482 <HAL_DMA_Abort_IT+0xb2>
 80033f0:	f8df a228 	ldr.w	sl, [pc, #552]	; 800361c <HAL_DMA_Abort_IT+0x24c>
 80033f4:	f8df b214 	ldr.w	fp, [pc, #532]	; 800360c <HAL_DMA_Abort_IT+0x23c>
 80033f8:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8003620 <HAL_DMA_Abort_IT+0x250>
 80033fc:	4559      	cmp	r1, fp
 80033fe:	bf18      	it	ne
 8003400:	4551      	cmpne	r1, sl
 8003402:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8003624 <HAL_DMA_Abort_IT+0x254>
 8003406:	f8df e220 	ldr.w	lr, [pc, #544]	; 8003628 <HAL_DMA_Abort_IT+0x258>
 800340a:	bf0c      	ite	eq
 800340c:	2201      	moveq	r2, #1
 800340e:	2200      	movne	r2, #0
 8003410:	f8df c218 	ldr.w	ip, [pc, #536]	; 800362c <HAL_DMA_Abort_IT+0x25c>
 8003414:	4549      	cmp	r1, r9
 8003416:	bf08      	it	eq
 8003418:	f042 0201 	orreq.w	r2, r2, #1
 800341c:	4d77      	ldr	r5, [pc, #476]	; (80035fc <HAL_DMA_Abort_IT+0x22c>)
 800341e:	4f78      	ldr	r7, [pc, #480]	; (8003600 <HAL_DMA_Abort_IT+0x230>)
 8003420:	4541      	cmp	r1, r8
 8003422:	bf08      	it	eq
 8003424:	f042 0201 	orreq.w	r2, r2, #1
 8003428:	4e76      	ldr	r6, [pc, #472]	; (8003604 <HAL_DMA_Abort_IT+0x234>)
 800342a:	4571      	cmp	r1, lr
 800342c:	bf08      	it	eq
 800342e:	f042 0201 	orreq.w	r2, r2, #1
 8003432:	4561      	cmp	r1, ip
 8003434:	bf08      	it	eq
 8003436:	f042 0201 	orreq.w	r2, r2, #1
 800343a:	42a9      	cmp	r1, r5
 800343c:	bf08      	it	eq
 800343e:	f042 0201 	orreq.w	r2, r2, #1
 8003442:	3518      	adds	r5, #24
 8003444:	42a9      	cmp	r1, r5
 8003446:	bf08      	it	eq
 8003448:	f042 0201 	orreq.w	r2, r2, #1
 800344c:	3518      	adds	r5, #24
 800344e:	42a9      	cmp	r1, r5
 8003450:	bf08      	it	eq
 8003452:	f042 0201 	orreq.w	r2, r2, #1
 8003456:	3518      	adds	r5, #24
 8003458:	42a9      	cmp	r1, r5
 800345a:	bf08      	it	eq
 800345c:	f042 0201 	orreq.w	r2, r2, #1
 8003460:	3548      	adds	r5, #72	; 0x48
 8003462:	42b9      	cmp	r1, r7
 8003464:	bf08      	it	eq
 8003466:	f042 0201 	orreq.w	r2, r2, #1
 800346a:	42b1      	cmp	r1, r6
 800346c:	bf08      	it	eq
 800346e:	f042 0201 	orreq.w	r2, r2, #1
 8003472:	42a9      	cmp	r1, r5
 8003474:	bf08      	it	eq
 8003476:	f042 0201 	orreq.w	r2, r2, #1
 800347a:	b912      	cbnz	r2, 8003482 <HAL_DMA_Abort_IT+0xb2>
 800347c:	4a62      	ldr	r2, [pc, #392]	; (8003608 <HAL_DMA_Abort_IT+0x238>)
 800347e:	4291      	cmp	r1, r2
 8003480:	d110      	bne.n	80034a4 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003482:	2204      	movs	r2, #4
  return HAL_OK;
 8003484:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800348a:	680b      	ldr	r3, [r1, #0]
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	600b      	str	r3, [r1, #0]
}
 8003492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003496:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8003498:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
}
 800349c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 80034a0:	2001      	movs	r0, #1
}
 80034a2:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034a4:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034a6:	4c54      	ldr	r4, [pc, #336]	; (80035f8 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034a8:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ac:	4857      	ldr	r0, [pc, #348]	; (800360c <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034ae:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	680a      	ldr	r2, [r1, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ba:	4a4e      	ldr	r2, [pc, #312]	; (80035f4 <HAL_DMA_Abort_IT+0x224>)
 80034bc:	6819      	ldr	r1, [r3, #0]
 80034be:	42a1      	cmp	r1, r4
 80034c0:	bf18      	it	ne
 80034c2:	4291      	cmpne	r1, r2
 80034c4:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80034c8:	bf0c      	ite	eq
 80034ca:	2201      	moveq	r2, #1
 80034cc:	2200      	movne	r2, #0
 80034ce:	4281      	cmp	r1, r0
 80034d0:	bf08      	it	eq
 80034d2:	f042 0201 	orreq.w	r2, r2, #1
 80034d6:	3030      	adds	r0, #48	; 0x30
 80034d8:	42a1      	cmp	r1, r4
 80034da:	bf08      	it	eq
 80034dc:	f042 0201 	orreq.w	r2, r2, #1
 80034e0:	3430      	adds	r4, #48	; 0x30
 80034e2:	4281      	cmp	r1, r0
 80034e4:	bf08      	it	eq
 80034e6:	f042 0201 	orreq.w	r2, r2, #1
 80034ea:	3030      	adds	r0, #48	; 0x30
 80034ec:	42a1      	cmp	r1, r4
 80034ee:	bf08      	it	eq
 80034f0:	f042 0201 	orreq.w	r2, r2, #1
 80034f4:	3430      	adds	r4, #48	; 0x30
 80034f6:	4281      	cmp	r1, r0
 80034f8:	bf08      	it	eq
 80034fa:	f042 0201 	orreq.w	r2, r2, #1
 80034fe:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003502:	42a1      	cmp	r1, r4
 8003504:	bf08      	it	eq
 8003506:	f042 0201 	orreq.w	r2, r2, #1
 800350a:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800350e:	4281      	cmp	r1, r0
 8003510:	bf08      	it	eq
 8003512:	f042 0201 	orreq.w	r2, r2, #1
 8003516:	3030      	adds	r0, #48	; 0x30
 8003518:	42a1      	cmp	r1, r4
 800351a:	bf08      	it	eq
 800351c:	f042 0201 	orreq.w	r2, r2, #1
 8003520:	3430      	adds	r4, #48	; 0x30
 8003522:	4281      	cmp	r1, r0
 8003524:	bf08      	it	eq
 8003526:	f042 0201 	orreq.w	r2, r2, #1
 800352a:	3030      	adds	r0, #48	; 0x30
 800352c:	42a1      	cmp	r1, r4
 800352e:	bf08      	it	eq
 8003530:	f042 0201 	orreq.w	r2, r2, #1
 8003534:	3430      	adds	r4, #48	; 0x30
 8003536:	4281      	cmp	r1, r0
 8003538:	bf08      	it	eq
 800353a:	f042 0201 	orreq.w	r2, r2, #1
 800353e:	3030      	adds	r0, #48	; 0x30
 8003540:	42a1      	cmp	r1, r4
 8003542:	bf08      	it	eq
 8003544:	f042 0201 	orreq.w	r2, r2, #1
 8003548:	3430      	adds	r4, #48	; 0x30
 800354a:	4281      	cmp	r1, r0
 800354c:	bf08      	it	eq
 800354e:	f042 0201 	orreq.w	r2, r2, #1
 8003552:	482f      	ldr	r0, [pc, #188]	; (8003610 <HAL_DMA_Abort_IT+0x240>)
 8003554:	42a1      	cmp	r1, r4
 8003556:	bf08      	it	eq
 8003558:	f042 0201 	orreq.w	r2, r2, #1
 800355c:	4c2d      	ldr	r4, [pc, #180]	; (8003614 <HAL_DMA_Abort_IT+0x244>)
 800355e:	4281      	cmp	r1, r0
 8003560:	bf08      	it	eq
 8003562:	f042 0201 	orreq.w	r2, r2, #1
 8003566:	3028      	adds	r0, #40	; 0x28
 8003568:	42a1      	cmp	r1, r4
 800356a:	bf08      	it	eq
 800356c:	f042 0201 	orreq.w	r2, r2, #1
 8003570:	3428      	adds	r4, #40	; 0x28
 8003572:	4281      	cmp	r1, r0
 8003574:	bf08      	it	eq
 8003576:	f042 0201 	orreq.w	r2, r2, #1
 800357a:	3028      	adds	r0, #40	; 0x28
 800357c:	42a1      	cmp	r1, r4
 800357e:	bf08      	it	eq
 8003580:	f042 0201 	orreq.w	r2, r2, #1
 8003584:	3428      	adds	r4, #40	; 0x28
 8003586:	4281      	cmp	r1, r0
 8003588:	bf08      	it	eq
 800358a:	f042 0201 	orreq.w	r2, r2, #1
 800358e:	3028      	adds	r0, #40	; 0x28
 8003590:	42a1      	cmp	r1, r4
 8003592:	bf08      	it	eq
 8003594:	f042 0201 	orreq.w	r2, r2, #1
 8003598:	4281      	cmp	r1, r0
 800359a:	bf08      	it	eq
 800359c:	f042 0201 	orreq.w	r2, r2, #1
 80035a0:	b912      	cbnz	r2, 80035a8 <HAL_DMA_Abort_IT+0x1d8>
 80035a2:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <HAL_DMA_Abort_IT+0x248>)
 80035a4:	4291      	cmp	r1, r2
 80035a6:	d117      	bne.n	80035d8 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035a8:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035aa:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035ac:	6801      	ldr	r1, [r0, #0]
 80035ae:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80035b2:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035b4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035b8:	f001 011f 	and.w	r1, r1, #31
 80035bc:	408a      	lsls	r2, r1
 80035be:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035c0:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 80035c4:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80035c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035c8:	b132      	cbz	r2, 80035d8 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035ca:	6811      	ldr	r1, [r2, #0]
 80035cc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80035d0:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035d2:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 80035d6:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80035d8:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 80035da:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 80035dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 80035de:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80035e2:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80035e6:	b11a      	cbz	r2, 80035f0 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 80035e8:	4618      	mov	r0, r3
 80035ea:	4790      	blx	r2
  return HAL_OK;
 80035ec:	4620      	mov	r0, r4
 80035ee:	e755      	b.n	800349c <HAL_DMA_Abort_IT+0xcc>
 80035f0:	4610      	mov	r0, r2
 80035f2:	e753      	b.n	800349c <HAL_DMA_Abort_IT+0xcc>
 80035f4:	40020010 	.word	0x40020010
 80035f8:	40020028 	.word	0x40020028
 80035fc:	40020410 	.word	0x40020410
 8003600:	40020470 	.word	0x40020470
 8003604:	40020488 	.word	0x40020488
 8003608:	400204b8 	.word	0x400204b8
 800360c:	40020040 	.word	0x40020040
 8003610:	58025408 	.word	0x58025408
 8003614:	5802541c 	.word	0x5802541c
 8003618:	58025494 	.word	0x58025494
 800361c:	40020058 	.word	0x40020058
 8003620:	40020070 	.word	0x40020070
 8003624:	40020088 	.word	0x40020088
 8003628:	400200a0 	.word	0x400200a0
 800362c:	400200b8 	.word	0x400200b8

08003630 <HAL_DMA_IRQHandler>:
{
 8003630:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003632:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003634:	4b9a      	ldr	r3, [pc, #616]	; (80038a0 <HAL_DMA_IRQHandler+0x270>)
{
 8003636:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003638:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800363a:	681f      	ldr	r7, [r3, #0]
{
 800363c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800363e:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003640:	6803      	ldr	r3, [r0, #0]
 8003642:	4a98      	ldr	r2, [pc, #608]	; (80038a4 <HAL_DMA_IRQHandler+0x274>)
  tmpisr_dma  = regs_dma->ISR;
 8003644:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003646:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 8003648:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800364a:	d048      	beq.n	80036de <HAL_DMA_IRQHandler+0xae>
 800364c:	3218      	adds	r2, #24
 800364e:	4293      	cmp	r3, r2
 8003650:	d045      	beq.n	80036de <HAL_DMA_IRQHandler+0xae>
 8003652:	3218      	adds	r2, #24
 8003654:	4894      	ldr	r0, [pc, #592]	; (80038a8 <HAL_DMA_IRQHandler+0x278>)
 8003656:	4283      	cmp	r3, r0
 8003658:	bf18      	it	ne
 800365a:	4293      	cmpne	r3, r2
 800365c:	f100 0018 	add.w	r0, r0, #24
 8003660:	bf0c      	ite	eq
 8003662:	2201      	moveq	r2, #1
 8003664:	2200      	movne	r2, #0
 8003666:	4283      	cmp	r3, r0
 8003668:	bf08      	it	eq
 800366a:	f042 0201 	orreq.w	r2, r2, #1
 800366e:	3018      	adds	r0, #24
 8003670:	4283      	cmp	r3, r0
 8003672:	bf08      	it	eq
 8003674:	f042 0201 	orreq.w	r2, r2, #1
 8003678:	3018      	adds	r0, #24
 800367a:	4283      	cmp	r3, r0
 800367c:	bf08      	it	eq
 800367e:	f042 0201 	orreq.w	r2, r2, #1
 8003682:	3018      	adds	r0, #24
 8003684:	4283      	cmp	r3, r0
 8003686:	bf08      	it	eq
 8003688:	f042 0201 	orreq.w	r2, r2, #1
 800368c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8003690:	4283      	cmp	r3, r0
 8003692:	bf08      	it	eq
 8003694:	f042 0201 	orreq.w	r2, r2, #1
 8003698:	3018      	adds	r0, #24
 800369a:	4283      	cmp	r3, r0
 800369c:	bf08      	it	eq
 800369e:	f042 0201 	orreq.w	r2, r2, #1
 80036a2:	3018      	adds	r0, #24
 80036a4:	4283      	cmp	r3, r0
 80036a6:	bf08      	it	eq
 80036a8:	f042 0201 	orreq.w	r2, r2, #1
 80036ac:	3018      	adds	r0, #24
 80036ae:	4283      	cmp	r3, r0
 80036b0:	bf08      	it	eq
 80036b2:	f042 0201 	orreq.w	r2, r2, #1
 80036b6:	3018      	adds	r0, #24
 80036b8:	4283      	cmp	r3, r0
 80036ba:	bf08      	it	eq
 80036bc:	f042 0201 	orreq.w	r2, r2, #1
 80036c0:	3018      	adds	r0, #24
 80036c2:	4283      	cmp	r3, r0
 80036c4:	bf08      	it	eq
 80036c6:	f042 0201 	orreq.w	r2, r2, #1
 80036ca:	3018      	adds	r0, #24
 80036cc:	4283      	cmp	r3, r0
 80036ce:	bf08      	it	eq
 80036d0:	f042 0201 	orreq.w	r2, r2, #1
 80036d4:	b91a      	cbnz	r2, 80036de <HAL_DMA_IRQHandler+0xae>
 80036d6:	4a75      	ldr	r2, [pc, #468]	; (80038ac <HAL_DMA_IRQHandler+0x27c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	f040 8294 	bne.w	8003c06 <HAL_DMA_IRQHandler+0x5d6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036de:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
 80036e2:	2208      	movs	r2, #8
 80036e4:	f00e 011f 	and.w	r1, lr, #31
 80036e8:	408a      	lsls	r2, r1
 80036ea:	422a      	tst	r2, r5
 80036ec:	f040 8193 	bne.w	8003a16 <HAL_DMA_IRQHandler+0x3e6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036f0:	fa25 f201 	lsr.w	r2, r5, r1
 80036f4:	07d2      	lsls	r2, r2, #31
 80036f6:	d50e      	bpl.n	8003716 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	0612      	lsls	r2, r2, #24
 80036fc:	f140 824d 	bpl.w	8003b9a <HAL_DMA_IRQHandler+0x56a>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003700:	2301      	movs	r3, #1
 8003702:	408b      	lsls	r3, r1
 8003704:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003706:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003708:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800370c:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003710:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003714:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003716:	f04f 0c04 	mov.w	ip, #4
 800371a:	fa0c fc01 	lsl.w	ip, ip, r1
 800371e:	ea1c 0f05 	tst.w	ip, r5
 8003722:	d05f      	beq.n	80037e4 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003724:	6822      	ldr	r2, [r4, #0]
 8003726:	485f      	ldr	r0, [pc, #380]	; (80038a4 <HAL_DMA_IRQHandler+0x274>)
 8003728:	4b61      	ldr	r3, [pc, #388]	; (80038b0 <HAL_DMA_IRQHandler+0x280>)
 800372a:	429a      	cmp	r2, r3
 800372c:	bf18      	it	ne
 800372e:	4282      	cmpne	r2, r0
 8003730:	f103 0318 	add.w	r3, r3, #24
 8003734:	bf0c      	ite	eq
 8003736:	2001      	moveq	r0, #1
 8003738:	2000      	movne	r0, #0
 800373a:	429a      	cmp	r2, r3
 800373c:	bf08      	it	eq
 800373e:	f040 0001 	orreq.w	r0, r0, #1
 8003742:	3318      	adds	r3, #24
 8003744:	429a      	cmp	r2, r3
 8003746:	bf08      	it	eq
 8003748:	f040 0001 	orreq.w	r0, r0, #1
 800374c:	3318      	adds	r3, #24
 800374e:	429a      	cmp	r2, r3
 8003750:	bf08      	it	eq
 8003752:	f040 0001 	orreq.w	r0, r0, #1
 8003756:	3318      	adds	r3, #24
 8003758:	429a      	cmp	r2, r3
 800375a:	bf08      	it	eq
 800375c:	f040 0001 	orreq.w	r0, r0, #1
 8003760:	3318      	adds	r3, #24
 8003762:	429a      	cmp	r2, r3
 8003764:	bf08      	it	eq
 8003766:	f040 0001 	orreq.w	r0, r0, #1
 800376a:	3318      	adds	r3, #24
 800376c:	429a      	cmp	r2, r3
 800376e:	bf08      	it	eq
 8003770:	f040 0001 	orreq.w	r0, r0, #1
 8003774:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003778:	429a      	cmp	r2, r3
 800377a:	bf08      	it	eq
 800377c:	f040 0001 	orreq.w	r0, r0, #1
 8003780:	3318      	adds	r3, #24
 8003782:	429a      	cmp	r2, r3
 8003784:	bf08      	it	eq
 8003786:	f040 0001 	orreq.w	r0, r0, #1
 800378a:	3318      	adds	r3, #24
 800378c:	429a      	cmp	r2, r3
 800378e:	bf08      	it	eq
 8003790:	f040 0001 	orreq.w	r0, r0, #1
 8003794:	3318      	adds	r3, #24
 8003796:	429a      	cmp	r2, r3
 8003798:	bf08      	it	eq
 800379a:	f040 0001 	orreq.w	r0, r0, #1
 800379e:	3318      	adds	r3, #24
 80037a0:	429a      	cmp	r2, r3
 80037a2:	bf08      	it	eq
 80037a4:	f040 0001 	orreq.w	r0, r0, #1
 80037a8:	3318      	adds	r3, #24
 80037aa:	429a      	cmp	r2, r3
 80037ac:	bf08      	it	eq
 80037ae:	f040 0001 	orreq.w	r0, r0, #1
 80037b2:	3318      	adds	r3, #24
 80037b4:	429a      	cmp	r2, r3
 80037b6:	bf08      	it	eq
 80037b8:	f040 0001 	orreq.w	r0, r0, #1
 80037bc:	4613      	mov	r3, r2
 80037be:	b918      	cbnz	r0, 80037c8 <HAL_DMA_IRQHandler+0x198>
 80037c0:	483a      	ldr	r0, [pc, #232]	; (80038ac <HAL_DMA_IRQHandler+0x27c>)
 80037c2:	4282      	cmp	r2, r0
 80037c4:	f040 825a 	bne.w	8003c7c <HAL_DMA_IRQHandler+0x64c>
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	0790      	lsls	r0, r2, #30
 80037cc:	f140 81f1 	bpl.w	8003bb2 <HAL_DMA_IRQHandler+0x582>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037d0:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037d6:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037da:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037de:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037e2:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037e4:	f04f 0c10 	mov.w	ip, #16
 80037e8:	fa0c fc01 	lsl.w	ip, ip, r1
 80037ec:	ea1c 0f05 	tst.w	ip, r5
 80037f0:	d075      	beq.n	80038de <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	482b      	ldr	r0, [pc, #172]	; (80038a4 <HAL_DMA_IRQHandler+0x274>)
 80037f6:	4b2e      	ldr	r3, [pc, #184]	; (80038b0 <HAL_DMA_IRQHandler+0x280>)
 80037f8:	429a      	cmp	r2, r3
 80037fa:	bf18      	it	ne
 80037fc:	4282      	cmpne	r2, r0
 80037fe:	f103 0318 	add.w	r3, r3, #24
 8003802:	bf0c      	ite	eq
 8003804:	2001      	moveq	r0, #1
 8003806:	2000      	movne	r0, #0
 8003808:	429a      	cmp	r2, r3
 800380a:	bf08      	it	eq
 800380c:	f040 0001 	orreq.w	r0, r0, #1
 8003810:	3318      	adds	r3, #24
 8003812:	429a      	cmp	r2, r3
 8003814:	bf08      	it	eq
 8003816:	f040 0001 	orreq.w	r0, r0, #1
 800381a:	3318      	adds	r3, #24
 800381c:	429a      	cmp	r2, r3
 800381e:	bf08      	it	eq
 8003820:	f040 0001 	orreq.w	r0, r0, #1
 8003824:	3318      	adds	r3, #24
 8003826:	429a      	cmp	r2, r3
 8003828:	bf08      	it	eq
 800382a:	f040 0001 	orreq.w	r0, r0, #1
 800382e:	3318      	adds	r3, #24
 8003830:	429a      	cmp	r2, r3
 8003832:	bf08      	it	eq
 8003834:	f040 0001 	orreq.w	r0, r0, #1
 8003838:	3318      	adds	r3, #24
 800383a:	429a      	cmp	r2, r3
 800383c:	bf08      	it	eq
 800383e:	f040 0001 	orreq.w	r0, r0, #1
 8003842:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003846:	429a      	cmp	r2, r3
 8003848:	bf08      	it	eq
 800384a:	f040 0001 	orreq.w	r0, r0, #1
 800384e:	3318      	adds	r3, #24
 8003850:	429a      	cmp	r2, r3
 8003852:	bf08      	it	eq
 8003854:	f040 0001 	orreq.w	r0, r0, #1
 8003858:	3318      	adds	r3, #24
 800385a:	429a      	cmp	r2, r3
 800385c:	bf08      	it	eq
 800385e:	f040 0001 	orreq.w	r0, r0, #1
 8003862:	3318      	adds	r3, #24
 8003864:	429a      	cmp	r2, r3
 8003866:	bf08      	it	eq
 8003868:	f040 0001 	orreq.w	r0, r0, #1
 800386c:	3318      	adds	r3, #24
 800386e:	429a      	cmp	r2, r3
 8003870:	bf08      	it	eq
 8003872:	f040 0001 	orreq.w	r0, r0, #1
 8003876:	3318      	adds	r3, #24
 8003878:	429a      	cmp	r2, r3
 800387a:	bf08      	it	eq
 800387c:	f040 0001 	orreq.w	r0, r0, #1
 8003880:	3318      	adds	r3, #24
 8003882:	429a      	cmp	r2, r3
 8003884:	bf08      	it	eq
 8003886:	f040 0001 	orreq.w	r0, r0, #1
 800388a:	4613      	mov	r3, r2
 800388c:	b918      	cbnz	r0, 8003896 <HAL_DMA_IRQHandler+0x266>
 800388e:	4807      	ldr	r0, [pc, #28]	; (80038ac <HAL_DMA_IRQHandler+0x27c>)
 8003890:	4282      	cmp	r2, r0
 8003892:	f040 813c 	bne.w	8003b0e <HAL_DMA_IRQHandler+0x4de>
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	0712      	lsls	r2, r2, #28
 800389a:	f140 8177 	bpl.w	8003b8c <HAL_DMA_IRQHandler+0x55c>
 800389e:	e009      	b.n	80038b4 <HAL_DMA_IRQHandler+0x284>
 80038a0:	20000004 	.word	0x20000004
 80038a4:	40020010 	.word	0x40020010
 80038a8:	40020058 	.word	0x40020058
 80038ac:	400204b8 	.word	0x400204b8
 80038b0:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038b4:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	0350      	lsls	r0, r2, #13
 80038be:	f100 8181 	bmi.w	8003bc4 <HAL_DMA_IRQHandler+0x594>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	05d2      	lsls	r2, r2, #23
 80038c6:	d403      	bmi.n	80038d0 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	f022 0208 	bic.w	r2, r2, #8
 80038ce:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80038d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038d2:	b10b      	cbz	r3, 80038d8 <HAL_DMA_IRQHandler+0x2a8>
            hdma->XferHalfCpltCallback(hdma);
 80038d4:	4620      	mov	r0, r4
 80038d6:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80038da:	f001 011f 	and.w	r1, r1, #31
 80038de:	2320      	movs	r3, #32
 80038e0:	fa03 f101 	lsl.w	r1, r3, r1
 80038e4:	4229      	tst	r1, r5
 80038e6:	d066      	beq.n	80039b6 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	4a92      	ldr	r2, [pc, #584]	; (8003b34 <HAL_DMA_IRQHandler+0x504>)
 80038ec:	4892      	ldr	r0, [pc, #584]	; (8003b38 <HAL_DMA_IRQHandler+0x508>)
 80038ee:	4283      	cmp	r3, r0
 80038f0:	bf18      	it	ne
 80038f2:	4293      	cmpne	r3, r2
 80038f4:	f100 0018 	add.w	r0, r0, #24
 80038f8:	bf0c      	ite	eq
 80038fa:	2201      	moveq	r2, #1
 80038fc:	2200      	movne	r2, #0
 80038fe:	4283      	cmp	r3, r0
 8003900:	bf08      	it	eq
 8003902:	f042 0201 	orreq.w	r2, r2, #1
 8003906:	3018      	adds	r0, #24
 8003908:	4283      	cmp	r3, r0
 800390a:	bf08      	it	eq
 800390c:	f042 0201 	orreq.w	r2, r2, #1
 8003910:	3018      	adds	r0, #24
 8003912:	4283      	cmp	r3, r0
 8003914:	bf08      	it	eq
 8003916:	f042 0201 	orreq.w	r2, r2, #1
 800391a:	3018      	adds	r0, #24
 800391c:	4283      	cmp	r3, r0
 800391e:	bf08      	it	eq
 8003920:	f042 0201 	orreq.w	r2, r2, #1
 8003924:	3018      	adds	r0, #24
 8003926:	4283      	cmp	r3, r0
 8003928:	bf08      	it	eq
 800392a:	f042 0201 	orreq.w	r2, r2, #1
 800392e:	3018      	adds	r0, #24
 8003930:	4283      	cmp	r3, r0
 8003932:	bf08      	it	eq
 8003934:	f042 0201 	orreq.w	r2, r2, #1
 8003938:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800393c:	4283      	cmp	r3, r0
 800393e:	bf08      	it	eq
 8003940:	f042 0201 	orreq.w	r2, r2, #1
 8003944:	3018      	adds	r0, #24
 8003946:	4283      	cmp	r3, r0
 8003948:	bf08      	it	eq
 800394a:	f042 0201 	orreq.w	r2, r2, #1
 800394e:	3018      	adds	r0, #24
 8003950:	4283      	cmp	r3, r0
 8003952:	bf08      	it	eq
 8003954:	f042 0201 	orreq.w	r2, r2, #1
 8003958:	3018      	adds	r0, #24
 800395a:	4283      	cmp	r3, r0
 800395c:	bf08      	it	eq
 800395e:	f042 0201 	orreq.w	r2, r2, #1
 8003962:	3018      	adds	r0, #24
 8003964:	4283      	cmp	r3, r0
 8003966:	bf08      	it	eq
 8003968:	f042 0201 	orreq.w	r2, r2, #1
 800396c:	3018      	adds	r0, #24
 800396e:	4283      	cmp	r3, r0
 8003970:	bf08      	it	eq
 8003972:	f042 0201 	orreq.w	r2, r2, #1
 8003976:	3018      	adds	r0, #24
 8003978:	4283      	cmp	r3, r0
 800397a:	bf08      	it	eq
 800397c:	f042 0201 	orreq.w	r2, r2, #1
 8003980:	b91a      	cbnz	r2, 800398a <HAL_DMA_IRQHandler+0x35a>
 8003982:	4a6e      	ldr	r2, [pc, #440]	; (8003b3c <HAL_DMA_IRQHandler+0x50c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	f040 80cf 	bne.w	8003b28 <HAL_DMA_IRQHandler+0x4f8>
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	06dd      	lsls	r5, r3, #27
 800398e:	d512      	bpl.n	80039b6 <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003990:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003992:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003996:	2b04      	cmp	r3, #4
 8003998:	f000 80d4 	beq.w	8003b44 <HAL_DMA_IRQHandler+0x514>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	0352      	lsls	r2, r2, #13
 80039a2:	f140 8118 	bpl.w	8003bd6 <HAL_DMA_IRQHandler+0x5a6>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	031e      	lsls	r6, r3, #12
 80039aa:	f140 8123 	bpl.w	8003bf4 <HAL_DMA_IRQHandler+0x5c4>
          if(hdma->XferCpltCallback != NULL)
 80039ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80039b0:	b10b      	cbz	r3, 80039b6 <HAL_DMA_IRQHandler+0x386>
            hdma->XferCpltCallback(hdma);
 80039b2:	4620      	mov	r0, r4
 80039b4:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80e5 	beq.w	8003b88 <HAL_DMA_IRQHandler+0x558>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039c0:	07dd      	lsls	r5, r3, #31
 80039c2:	d51f      	bpl.n	8003a04 <HAL_DMA_IRQHandler+0x3d4>
        __HAL_DMA_DISABLE(hdma);
 80039c4:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80039c6:	2104      	movs	r1, #4
 80039c8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80039cc:	6813      	ldr	r3, [r2, #0]
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039d4:	4a5a      	ldr	r2, [pc, #360]	; (8003b40 <HAL_DMA_IRQHandler+0x510>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80039d6:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039d8:	fba2 7207 	umull	r7, r2, r2, r7
 80039dc:	0a92      	lsrs	r2, r2, #10
 80039de:	e002      	b.n	80039e6 <HAL_DMA_IRQHandler+0x3b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80039e0:	680b      	ldr	r3, [r1, #0]
 80039e2:	07d8      	lsls	r0, r3, #31
 80039e4:	d504      	bpl.n	80039f0 <HAL_DMA_IRQHandler+0x3c0>
          if (++count > timeout)
 80039e6:	9b01      	ldr	r3, [sp, #4]
 80039e8:	3301      	adds	r3, #1
 80039ea:	4293      	cmp	r3, r2
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	d9f7      	bls.n	80039e0 <HAL_DMA_IRQHandler+0x3b0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039f0:	680b      	ldr	r3, [r1, #0]
 80039f2:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80039f4:	bf4c      	ite	mi
 80039f6:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80039f8:	2301      	movpl	r3, #1
 80039fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80039fe:	2300      	movs	r3, #0
 8003a00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8003a04:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80be 	beq.w	8003b88 <HAL_DMA_IRQHandler+0x558>
        hdma->XferErrorCallback(hdma);
 8003a0c:	4620      	mov	r0, r4
}
 8003a0e:	b003      	add	sp, #12
 8003a10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8003a14:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	0752      	lsls	r2, r2, #29
 8003a1a:	d511      	bpl.n	8003a40 <HAL_DMA_IRQHandler+0x410>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	f022 0204 	bic.w	r2, r2, #4
 8003a22:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a24:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a26:	f003 021f 	and.w	r2, r3, #31
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	4093      	lsls	r3, r2
 8003a2e:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a30:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a32:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a36:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a3a:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a3e:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a40:	fa25 f301 	lsr.w	r3, r5, r1
 8003a44:	07d8      	lsls	r0, r3, #31
 8003a46:	f57f ae66 	bpl.w	8003716 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a4a:	6822      	ldr	r2, [r4, #0]
 8003a4c:	4839      	ldr	r0, [pc, #228]	; (8003b34 <HAL_DMA_IRQHandler+0x504>)
 8003a4e:	4b3a      	ldr	r3, [pc, #232]	; (8003b38 <HAL_DMA_IRQHandler+0x508>)
 8003a50:	429a      	cmp	r2, r3
 8003a52:	bf18      	it	ne
 8003a54:	4282      	cmpne	r2, r0
 8003a56:	f103 0318 	add.w	r3, r3, #24
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2001      	moveq	r0, #1
 8003a5e:	2000      	movne	r0, #0
 8003a60:	429a      	cmp	r2, r3
 8003a62:	bf08      	it	eq
 8003a64:	f040 0001 	orreq.w	r0, r0, #1
 8003a68:	3318      	adds	r3, #24
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	bf08      	it	eq
 8003a6e:	f040 0001 	orreq.w	r0, r0, #1
 8003a72:	3318      	adds	r3, #24
 8003a74:	429a      	cmp	r2, r3
 8003a76:	bf08      	it	eq
 8003a78:	f040 0001 	orreq.w	r0, r0, #1
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	bf08      	it	eq
 8003a82:	f040 0001 	orreq.w	r0, r0, #1
 8003a86:	3318      	adds	r3, #24
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	bf08      	it	eq
 8003a8c:	f040 0001 	orreq.w	r0, r0, #1
 8003a90:	3318      	adds	r3, #24
 8003a92:	429a      	cmp	r2, r3
 8003a94:	bf08      	it	eq
 8003a96:	f040 0001 	orreq.w	r0, r0, #1
 8003a9a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	bf08      	it	eq
 8003aa2:	f040 0001 	orreq.w	r0, r0, #1
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	bf08      	it	eq
 8003aac:	f040 0001 	orreq.w	r0, r0, #1
 8003ab0:	3318      	adds	r3, #24
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	bf08      	it	eq
 8003ab6:	f040 0001 	orreq.w	r0, r0, #1
 8003aba:	3318      	adds	r3, #24
 8003abc:	429a      	cmp	r2, r3
 8003abe:	bf08      	it	eq
 8003ac0:	f040 0001 	orreq.w	r0, r0, #1
 8003ac4:	3318      	adds	r3, #24
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	bf08      	it	eq
 8003aca:	f040 0001 	orreq.w	r0, r0, #1
 8003ace:	3318      	adds	r3, #24
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	bf08      	it	eq
 8003ad4:	f040 0001 	orreq.w	r0, r0, #1
 8003ad8:	3318      	adds	r3, #24
 8003ada:	429a      	cmp	r2, r3
 8003adc:	bf08      	it	eq
 8003ade:	f040 0001 	orreq.w	r0, r0, #1
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	f47f ae07 	bne.w	80036f8 <HAL_DMA_IRQHandler+0xc8>
 8003aea:	4814      	ldr	r0, [pc, #80]	; (8003b3c <HAL_DMA_IRQHandler+0x50c>)
 8003aec:	4282      	cmp	r2, r0
 8003aee:	f43f ae03 	beq.w	80036f8 <HAL_DMA_IRQHandler+0xc8>
 8003af2:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003af4:	2304      	movs	r3, #4
 8003af6:	408b      	lsls	r3, r1
 8003af8:	422b      	tst	r3, r5
 8003afa:	f040 80bf 	bne.w	8003c7c <HAL_DMA_IRQHandler+0x64c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003afe:	f04f 0c10 	mov.w	ip, #16
 8003b02:	fa0c fc01 	lsl.w	ip, ip, r1
 8003b06:	ea15 0f0c 	tst.w	r5, ip
 8003b0a:	f43f aee8 	beq.w	80038de <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b0e:	6813      	ldr	r3, [r2, #0]
 8003b10:	075b      	lsls	r3, r3, #29
 8003b12:	f53f aecf 	bmi.w	80038b4 <HAL_DMA_IRQHandler+0x284>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b16:	f00e 0e1f 	and.w	lr, lr, #31
 8003b1a:	2120      	movs	r1, #32
 8003b1c:	fa01 f10e 	lsl.w	r1, r1, lr
 8003b20:	420d      	tst	r5, r1
 8003b22:	f43f af48 	beq.w	80039b6 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b26:	4613      	mov	r3, r2
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	0798      	lsls	r0, r3, #30
 8003b2c:	f57f af43 	bpl.w	80039b6 <HAL_DMA_IRQHandler+0x386>
 8003b30:	e72e      	b.n	8003990 <HAL_DMA_IRQHandler+0x360>
 8003b32:	bf00      	nop
 8003b34:	40020010 	.word	0x40020010
 8003b38:	40020028 	.word	0x40020028
 8003b3c:	400204b8 	.word	0x400204b8
 8003b40:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	f023 0316 	bic.w	r3, r3, #22
 8003b4c:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	6953      	ldr	r3, [r2, #20]
 8003b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b56:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04f      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x5ce>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b5e:	6822      	ldr	r2, [r4, #0]
 8003b60:	6813      	ldr	r3, [r2, #0]
 8003b62:	f023 0308 	bic.w	r3, r3, #8
 8003b66:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b68:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003b6a:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8003b6c:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b6e:	f002 021f 	and.w	r2, r2, #31
 8003b72:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 8003b74:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b76:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
 8003b78:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003b7e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f47f af42 	bne.w	8003a0c <HAL_DMA_IRQHandler+0x3dc>
}
 8003b88:	b003      	add	sp, #12
 8003b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	fa02 f101 	lsl.w	r1, r2, r1
 8003b92:	420d      	tst	r5, r1
 8003b94:	f47f aef9 	bne.w	800398a <HAL_DMA_IRQHandler+0x35a>
 8003b98:	e70d      	b.n	80039b6 <HAL_DMA_IRQHandler+0x386>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b9a:	f04f 0c04 	mov.w	ip, #4
 8003b9e:	fa0c fc01 	lsl.w	ip, ip, r1
 8003ba2:	ea15 0f0c 	tst.w	r5, ip
 8003ba6:	f43f ae1d 	beq.w	80037e4 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	0790      	lsls	r0, r2, #30
 8003bae:	f53f ae0f 	bmi.w	80037d0 <HAL_DMA_IRQHandler+0x1a0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bb2:	f04f 0c10 	mov.w	ip, #16
 8003bb6:	fa0c fc01 	lsl.w	ip, ip, r1
 8003bba:	ea15 0f0c 	tst.w	r5, ip
 8003bbe:	f47f ae6a 	bne.w	8003896 <HAL_DMA_IRQHandler+0x266>
 8003bc2:	e68c      	b.n	80038de <HAL_DMA_IRQHandler+0x2ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	0319      	lsls	r1, r3, #12
 8003bc8:	f57f ae82 	bpl.w	80038d0 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003bcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f47f ae80 	bne.w	80038d4 <HAL_DMA_IRQHandler+0x2a4>
 8003bd4:	e680      	b.n	80038d8 <HAL_DMA_IRQHandler+0x2a8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003bdc:	f47f aee7 	bne.w	80039ae <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	f021 0110 	bic.w	r1, r1, #16
 8003be6:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003be8:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8003bea:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003bee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8003bf2:	e6dc      	b.n	80039ae <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1CpltCallback != NULL)
 8003bf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f47f aedb 	bne.w	80039b2 <HAL_DMA_IRQHandler+0x382>
 8003bfc:	e6db      	b.n	80039b6 <HAL_DMA_IRQHandler+0x386>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bfe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ac      	bne.n	8003b5e <HAL_DMA_IRQHandler+0x52e>
 8003c04:	e7b0      	b.n	8003b68 <HAL_DMA_IRQHandler+0x538>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c06:	4a9b      	ldr	r2, [pc, #620]	; (8003e74 <HAL_DMA_IRQHandler+0x844>)
 8003c08:	489b      	ldr	r0, [pc, #620]	; (8003e78 <HAL_DMA_IRQHandler+0x848>)
 8003c0a:	4283      	cmp	r3, r0
 8003c0c:	bf18      	it	ne
 8003c0e:	4293      	cmpne	r3, r2
 8003c10:	f100 0014 	add.w	r0, r0, #20
 8003c14:	bf0c      	ite	eq
 8003c16:	2201      	moveq	r2, #1
 8003c18:	2200      	movne	r2, #0
 8003c1a:	4283      	cmp	r3, r0
 8003c1c:	bf08      	it	eq
 8003c1e:	f042 0201 	orreq.w	r2, r2, #1
 8003c22:	3014      	adds	r0, #20
 8003c24:	4283      	cmp	r3, r0
 8003c26:	bf08      	it	eq
 8003c28:	f042 0201 	orreq.w	r2, r2, #1
 8003c2c:	3014      	adds	r0, #20
 8003c2e:	4283      	cmp	r3, r0
 8003c30:	bf08      	it	eq
 8003c32:	f042 0201 	orreq.w	r2, r2, #1
 8003c36:	3014      	adds	r0, #20
 8003c38:	4283      	cmp	r3, r0
 8003c3a:	bf08      	it	eq
 8003c3c:	f042 0201 	orreq.w	r2, r2, #1
 8003c40:	3014      	adds	r0, #20
 8003c42:	4283      	cmp	r3, r0
 8003c44:	bf08      	it	eq
 8003c46:	f042 0201 	orreq.w	r2, r2, #1
 8003c4a:	b912      	cbnz	r2, 8003c52 <HAL_DMA_IRQHandler+0x622>
 8003c4c:	4a8b      	ldr	r2, [pc, #556]	; (8003e7c <HAL_DMA_IRQHandler+0x84c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d19a      	bne.n	8003b88 <HAL_DMA_IRQHandler+0x558>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c52:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003c54:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c56:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c58:	f000 001f 	and.w	r0, r0, #31
 8003c5c:	4085      	lsls	r5, r0
 8003c5e:	420d      	tst	r5, r1
 8003c60:	d018      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x664>
 8003c62:	0757      	lsls	r7, r2, #29
 8003c64:	d516      	bpl.n	8003c94 <HAL_DMA_IRQHandler+0x664>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c66:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c68:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c6a:	d544      	bpl.n	8003cf6 <HAL_DMA_IRQHandler+0x6c6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c6c:	03d2      	lsls	r2, r2, #15
 8003c6e:	f100 8099 	bmi.w	8003da4 <HAL_DMA_IRQHandler+0x774>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f47f aec9 	bne.w	8003a0c <HAL_DMA_IRQHandler+0x3dc>
 8003c7a:	e785      	b.n	8003b88 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c7c:	f00e 011f 	and.w	r1, lr, #31
 8003c80:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c84:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c86:	fa0c fc01 	lsl.w	ip, ip, r1
 8003c8a:	ea15 0f0c 	tst.w	r5, ip
 8003c8e:	f47f af3e 	bne.w	8003b0e <HAL_DMA_IRQHandler+0x4de>
 8003c92:	e624      	b.n	80038de <HAL_DMA_IRQHandler+0x2ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c94:	2502      	movs	r5, #2
 8003c96:	4085      	lsls	r5, r0
 8003c98:	420d      	tst	r5, r1
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x688>
 8003c9c:	0797      	lsls	r7, r2, #30
 8003c9e:	d50b      	bpl.n	8003cb8 <HAL_DMA_IRQHandler+0x688>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ca0:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ca2:	0416      	lsls	r6, r2, #16
 8003ca4:	f140 8083 	bpl.w	8003dae <HAL_DMA_IRQHandler+0x77e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ca8:	03d5      	lsls	r5, r2, #15
 8003caa:	f100 80dd 	bmi.w	8003e68 <HAL_DMA_IRQHandler+0x838>
          if(hdma->XferM1CpltCallback != NULL)
 8003cae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f47f aeab 	bne.w	8003a0c <HAL_DMA_IRQHandler+0x3dc>
 8003cb6:	e767      	b.n	8003b88 <HAL_DMA_IRQHandler+0x558>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003cb8:	2508      	movs	r5, #8
 8003cba:	fa05 f000 	lsl.w	r0, r5, r0
 8003cbe:	4208      	tst	r0, r1
 8003cc0:	f43f af62 	beq.w	8003b88 <HAL_DMA_IRQHandler+0x558>
 8003cc4:	0711      	lsls	r1, r2, #28
 8003cc6:	f57f af5f 	bpl.w	8003b88 <HAL_DMA_IRQHandler+0x558>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cca:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ccc:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cce:	f021 010e 	bic.w	r1, r1, #14
 8003cd2:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8003cd4:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cd6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
 8003ce2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ce4:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8003ce6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003cea:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f47f ae8c 	bne.w	8003a0c <HAL_DMA_IRQHandler+0x3dc>
 8003cf4:	e748      	b.n	8003b88 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cf6:	0693      	lsls	r3, r2, #26
 8003cf8:	d454      	bmi.n	8003da4 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	4b60      	ldr	r3, [pc, #384]	; (8003e80 <HAL_DMA_IRQHandler+0x850>)
 8003cfe:	4861      	ldr	r0, [pc, #388]	; (8003e84 <HAL_DMA_IRQHandler+0x854>)
 8003d00:	4961      	ldr	r1, [pc, #388]	; (8003e88 <HAL_DMA_IRQHandler+0x858>)
 8003d02:	4282      	cmp	r2, r0
 8003d04:	bf18      	it	ne
 8003d06:	429a      	cmpne	r2, r3
 8003d08:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	428a      	cmp	r2, r1
 8003d14:	bf08      	it	eq
 8003d16:	f043 0301 	orreq.w	r3, r3, #1
 8003d1a:	3130      	adds	r1, #48	; 0x30
 8003d1c:	4282      	cmp	r2, r0
 8003d1e:	bf08      	it	eq
 8003d20:	f043 0301 	orreq.w	r3, r3, #1
 8003d24:	3030      	adds	r0, #48	; 0x30
 8003d26:	428a      	cmp	r2, r1
 8003d28:	bf08      	it	eq
 8003d2a:	f043 0301 	orreq.w	r3, r3, #1
 8003d2e:	3130      	adds	r1, #48	; 0x30
 8003d30:	4282      	cmp	r2, r0
 8003d32:	bf08      	it	eq
 8003d34:	f043 0301 	orreq.w	r3, r3, #1
 8003d38:	3030      	adds	r0, #48	; 0x30
 8003d3a:	428a      	cmp	r2, r1
 8003d3c:	bf08      	it	eq
 8003d3e:	f043 0301 	orreq.w	r3, r3, #1
 8003d42:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003d46:	4282      	cmp	r2, r0
 8003d48:	bf08      	it	eq
 8003d4a:	f043 0301 	orreq.w	r3, r3, #1
 8003d4e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003d52:	428a      	cmp	r2, r1
 8003d54:	bf08      	it	eq
 8003d56:	f043 0301 	orreq.w	r3, r3, #1
 8003d5a:	3130      	adds	r1, #48	; 0x30
 8003d5c:	4282      	cmp	r2, r0
 8003d5e:	bf08      	it	eq
 8003d60:	f043 0301 	orreq.w	r3, r3, #1
 8003d64:	3030      	adds	r0, #48	; 0x30
 8003d66:	428a      	cmp	r2, r1
 8003d68:	bf08      	it	eq
 8003d6a:	f043 0301 	orreq.w	r3, r3, #1
 8003d6e:	3130      	adds	r1, #48	; 0x30
 8003d70:	4282      	cmp	r2, r0
 8003d72:	bf08      	it	eq
 8003d74:	f043 0301 	orreq.w	r3, r3, #1
 8003d78:	3030      	adds	r0, #48	; 0x30
 8003d7a:	428a      	cmp	r2, r1
 8003d7c:	bf08      	it	eq
 8003d7e:	f043 0301 	orreq.w	r3, r3, #1
 8003d82:	3130      	adds	r1, #48	; 0x30
 8003d84:	4282      	cmp	r2, r0
 8003d86:	bf08      	it	eq
 8003d88:	f043 0301 	orreq.w	r3, r3, #1
 8003d8c:	428a      	cmp	r2, r1
 8003d8e:	bf08      	it	eq
 8003d90:	f043 0301 	orreq.w	r3, r3, #1
 8003d94:	b913      	cbnz	r3, 8003d9c <HAL_DMA_IRQHandler+0x76c>
 8003d96:	4b3d      	ldr	r3, [pc, #244]	; (8003e8c <HAL_DMA_IRQHandler+0x85c>)
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d179      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x860>
 8003d9c:	6813      	ldr	r3, [r2, #0]
 8003d9e:	f023 0308 	bic.w	r3, r3, #8
 8003da2:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f47f ae30 	bne.w	8003a0c <HAL_DMA_IRQHandler+0x3dc>
 8003dac:	e6ec      	b.n	8003b88 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003dae:	0690      	lsls	r0, r2, #26
 8003db0:	d45a      	bmi.n	8003e68 <HAL_DMA_IRQHandler+0x838>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <HAL_DMA_IRQHandler+0x850>)
 8003db6:	4833      	ldr	r0, [pc, #204]	; (8003e84 <HAL_DMA_IRQHandler+0x854>)
 8003db8:	4933      	ldr	r1, [pc, #204]	; (8003e88 <HAL_DMA_IRQHandler+0x858>)
 8003dba:	4282      	cmp	r2, r0
 8003dbc:	bf18      	it	ne
 8003dbe:	429a      	cmpne	r2, r3
 8003dc0:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	428a      	cmp	r2, r1
 8003dcc:	bf08      	it	eq
 8003dce:	f043 0301 	orreq.w	r3, r3, #1
 8003dd2:	3130      	adds	r1, #48	; 0x30
 8003dd4:	4282      	cmp	r2, r0
 8003dd6:	bf08      	it	eq
 8003dd8:	f043 0301 	orreq.w	r3, r3, #1
 8003ddc:	3030      	adds	r0, #48	; 0x30
 8003dde:	428a      	cmp	r2, r1
 8003de0:	bf08      	it	eq
 8003de2:	f043 0301 	orreq.w	r3, r3, #1
 8003de6:	3130      	adds	r1, #48	; 0x30
 8003de8:	4282      	cmp	r2, r0
 8003dea:	bf08      	it	eq
 8003dec:	f043 0301 	orreq.w	r3, r3, #1
 8003df0:	3030      	adds	r0, #48	; 0x30
 8003df2:	428a      	cmp	r2, r1
 8003df4:	bf08      	it	eq
 8003df6:	f043 0301 	orreq.w	r3, r3, #1
 8003dfa:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003dfe:	4282      	cmp	r2, r0
 8003e00:	bf08      	it	eq
 8003e02:	f043 0301 	orreq.w	r3, r3, #1
 8003e06:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003e0a:	428a      	cmp	r2, r1
 8003e0c:	bf08      	it	eq
 8003e0e:	f043 0301 	orreq.w	r3, r3, #1
 8003e12:	3130      	adds	r1, #48	; 0x30
 8003e14:	4282      	cmp	r2, r0
 8003e16:	bf08      	it	eq
 8003e18:	f043 0301 	orreq.w	r3, r3, #1
 8003e1c:	3030      	adds	r0, #48	; 0x30
 8003e1e:	428a      	cmp	r2, r1
 8003e20:	bf08      	it	eq
 8003e22:	f043 0301 	orreq.w	r3, r3, #1
 8003e26:	3130      	adds	r1, #48	; 0x30
 8003e28:	4282      	cmp	r2, r0
 8003e2a:	bf08      	it	eq
 8003e2c:	f043 0301 	orreq.w	r3, r3, #1
 8003e30:	3030      	adds	r0, #48	; 0x30
 8003e32:	428a      	cmp	r2, r1
 8003e34:	bf08      	it	eq
 8003e36:	f043 0301 	orreq.w	r3, r3, #1
 8003e3a:	3130      	adds	r1, #48	; 0x30
 8003e3c:	4282      	cmp	r2, r0
 8003e3e:	bf08      	it	eq
 8003e40:	f043 0301 	orreq.w	r3, r3, #1
 8003e44:	428a      	cmp	r2, r1
 8003e46:	bf08      	it	eq
 8003e48:	f043 0301 	orreq.w	r3, r3, #1
 8003e4c:	b913      	cbnz	r3, 8003e54 <HAL_DMA_IRQHandler+0x824>
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <HAL_DMA_IRQHandler+0x85c>)
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d122      	bne.n	8003e9a <HAL_DMA_IRQHandler+0x86a>
 8003e54:	6813      	ldr	r3, [r2, #0]
 8003e56:	f023 0314 	bic.w	r3, r3, #20
 8003e5a:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8003e5e:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 8003e60:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003e64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8003e68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f47f adce 	bne.w	8003a0c <HAL_DMA_IRQHandler+0x3dc>
 8003e70:	e68a      	b.n	8003b88 <HAL_DMA_IRQHandler+0x558>
 8003e72:	bf00      	nop
 8003e74:	58025408 	.word	0x58025408
 8003e78:	5802541c 	.word	0x5802541c
 8003e7c:	58025494 	.word	0x58025494
 8003e80:	40020010 	.word	0x40020010
 8003e84:	40020028 	.word	0x40020028
 8003e88:	40020040 	.word	0x40020040
 8003e8c:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e90:	6813      	ldr	r3, [r2, #0]
 8003e92:	f023 0304 	bic.w	r3, r3, #4
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	e784      	b.n	8003da4 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e9a:	6813      	ldr	r3, [r2, #0]
 8003e9c:	f023 030a 	bic.w	r3, r3, #10
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e7db      	b.n	8003e5c <HAL_DMA_IRQHandler+0x82c>

08003ea4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8003ea4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ea8:	680b      	ldr	r3, [r1, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8113 	beq.w	80040d6 <HAL_GPIO_Init+0x22e>
 8003eb0:	f04f 0c00 	mov.w	ip, #0
{
 8003eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8003eb8:	4662      	mov	r2, ip
{
 8003eba:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ebc:	4d8d      	ldr	r5, [pc, #564]	; (80040f4 <HAL_GPIO_Init+0x24c>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ebe:	4f8e      	ldr	r7, [pc, #568]	; (80040f8 <HAL_GPIO_Init+0x250>)
 8003ec0:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8004110 <HAL_GPIO_Init+0x268>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ec4:	f04f 0901 	mov.w	r9, #1
 8003ec8:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8003ecc:	ea19 0e03 	ands.w	lr, r9, r3
 8003ed0:	f000 80bb 	beq.w	800404a <HAL_GPIO_Init+0x1a2>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ed4:	684b      	ldr	r3, [r1, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	1e5c      	subs	r4, r3, #1
 8003edc:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ede:	f04f 0403 	mov.w	r4, #3
 8003ee2:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ee6:	f240 80ba 	bls.w	800405e <HAL_GPIO_Init+0x1b6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eea:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d026      	beq.n	8003f3e <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 8003ef0:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ef2:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef6:	688b      	ldr	r3, [r1, #8]
 8003ef8:	fa03 f30c 	lsl.w	r3, r3, ip
 8003efc:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8003f00:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f02:	684b      	ldr	r3, [r1, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d118      	bne.n	8003f3e <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
 8003f0c:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f10:	f002 0b07 	and.w	fp, r2, #7
 8003f14:	230f      	movs	r3, #15
 8003f16:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8003f1a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8003f1e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f22:	fa03 f30b 	lsl.w	r3, r3, fp
 8003f26:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f2a:	690b      	ldr	r3, [r1, #16]
 8003f2c:	fa03 f30b 	lsl.w	r3, r3, fp
 8003f30:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003f34:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f38:	684b      	ldr	r3, [r1, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 8003f3e:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f42:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f46:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f4a:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8003f4c:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f4e:	684b      	ldr	r3, [r1, #4]
 8003f50:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003f54:	d078      	beq.n	8004048 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f56:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8003f5a:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f5e:	f002 0903 	and.w	r9, r2, #3
 8003f62:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f66:	f043 0302 	orr.w	r3, r3, #2
 8003f6a:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f6e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f72:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f74:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8003f78:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f7c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f80:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003f8c:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f8e:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f92:	d025      	beq.n	8003fe0 <HAL_GPIO_Init+0x138>
 8003f94:	4540      	cmp	r0, r8
 8003f96:	f000 8082 	beq.w	800409e <HAL_GPIO_Init+0x1f6>
 8003f9a:	4e58      	ldr	r6, [pc, #352]	; (80040fc <HAL_GPIO_Init+0x254>)
 8003f9c:	42b0      	cmp	r0, r6
 8003f9e:	f000 8085 	beq.w	80040ac <HAL_GPIO_Init+0x204>
 8003fa2:	4e57      	ldr	r6, [pc, #348]	; (8004100 <HAL_GPIO_Init+0x258>)
 8003fa4:	42b0      	cmp	r0, r6
 8003fa6:	d073      	beq.n	8004090 <HAL_GPIO_Init+0x1e8>
 8003fa8:	4e56      	ldr	r6, [pc, #344]	; (8004104 <HAL_GPIO_Init+0x25c>)
 8003faa:	42b0      	cmp	r0, r6
 8003fac:	f000 808c 	beq.w	80040c8 <HAL_GPIO_Init+0x220>
 8003fb0:	4e55      	ldr	r6, [pc, #340]	; (8004108 <HAL_GPIO_Init+0x260>)
 8003fb2:	42b0      	cmp	r0, r6
 8003fb4:	f000 8090 	beq.w	80040d8 <HAL_GPIO_Init+0x230>
 8003fb8:	4e54      	ldr	r6, [pc, #336]	; (800410c <HAL_GPIO_Init+0x264>)
 8003fba:	42b0      	cmp	r0, r6
 8003fbc:	d07d      	beq.n	80040ba <HAL_GPIO_Init+0x212>
 8003fbe:	f8df a154 	ldr.w	sl, [pc, #340]	; 8004114 <HAL_GPIO_Init+0x26c>
 8003fc2:	4550      	cmp	r0, sl
 8003fc4:	f000 808f 	beq.w	80040e6 <HAL_GPIO_Init+0x23e>
 8003fc8:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8004118 <HAL_GPIO_Init+0x270>
 8003fcc:	4550      	cmp	r0, sl
 8003fce:	bf0c      	ite	eq
 8003fd0:	f04f 0a09 	moveq.w	sl, #9
 8003fd4:	f04f 0a0a 	movne.w	sl, #10
 8003fd8:	fa0a f909 	lsl.w	r9, sl, r9
 8003fdc:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fe0:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fe6:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 8003fe8:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 8003fec:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003fee:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ff2:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 8003ff4:	bf54      	ite	pl
 8003ff6:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8003ff8:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 8003ffc:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004000:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 8004002:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004006:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800400a:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 800400c:	bf54      	ite	pl
 800400e:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8004010:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 8004014:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004018:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800401a:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800401e:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004022:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8004024:	bf54      	ite	pl
 8004026:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8004028:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 800402c:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004030:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8004032:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004036:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8004038:	bf54      	ite	pl
 800403a:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 800403c:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004040:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8004044:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004048:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 800404a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800404c:	f10c 0c02 	add.w	ip, ip, #2
 8004050:	fa33 f402 	lsrs.w	r4, r3, r2
 8004054:	f47f af36 	bne.w	8003ec4 <HAL_GPIO_Init+0x1c>
  }
}
 8004058:	b003      	add	sp, #12
 800405a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800405e:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004060:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004064:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004066:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004068:	fa03 f30c 	lsl.w	r3, r3, ip
 800406c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8004070:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004072:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8004074:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004078:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800407c:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004080:	4093      	lsls	r3, r2
 8004082:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 8004086:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004088:	684b      	ldr	r3, [r1, #4]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	e72d      	b.n	8003eec <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004090:	f04f 0a03 	mov.w	sl, #3
 8004094:	fa0a f909 	lsl.w	r9, sl, r9
 8004098:	ea43 0309 	orr.w	r3, r3, r9
 800409c:	e7a0      	b.n	8003fe0 <HAL_GPIO_Init+0x138>
 800409e:	f04f 0a01 	mov.w	sl, #1
 80040a2:	fa0a f909 	lsl.w	r9, sl, r9
 80040a6:	ea43 0309 	orr.w	r3, r3, r9
 80040aa:	e799      	b.n	8003fe0 <HAL_GPIO_Init+0x138>
 80040ac:	f04f 0a02 	mov.w	sl, #2
 80040b0:	fa0a f909 	lsl.w	r9, sl, r9
 80040b4:	ea43 0309 	orr.w	r3, r3, r9
 80040b8:	e792      	b.n	8003fe0 <HAL_GPIO_Init+0x138>
 80040ba:	f04f 0a06 	mov.w	sl, #6
 80040be:	fa0a f909 	lsl.w	r9, sl, r9
 80040c2:	ea43 0309 	orr.w	r3, r3, r9
 80040c6:	e78b      	b.n	8003fe0 <HAL_GPIO_Init+0x138>
 80040c8:	f04f 0a04 	mov.w	sl, #4
 80040cc:	fa0a f909 	lsl.w	r9, sl, r9
 80040d0:	ea43 0309 	orr.w	r3, r3, r9
 80040d4:	e784      	b.n	8003fe0 <HAL_GPIO_Init+0x138>
 80040d6:	4770      	bx	lr
 80040d8:	f04f 0a05 	mov.w	sl, #5
 80040dc:	fa0a f909 	lsl.w	r9, sl, r9
 80040e0:	ea43 0309 	orr.w	r3, r3, r9
 80040e4:	e77c      	b.n	8003fe0 <HAL_GPIO_Init+0x138>
 80040e6:	f04f 0a07 	mov.w	sl, #7
 80040ea:	fa0a f909 	lsl.w	r9, sl, r9
 80040ee:	ea43 0309 	orr.w	r3, r3, r9
 80040f2:	e775      	b.n	8003fe0 <HAL_GPIO_Init+0x138>
 80040f4:	58024400 	.word	0x58024400
 80040f8:	58020000 	.word	0x58020000
 80040fc:	58020800 	.word	0x58020800
 8004100:	58020c00 	.word	0x58020c00
 8004104:	58021000 	.word	0x58021000
 8004108:	58021400 	.word	0x58021400
 800410c:	58021800 	.word	0x58021800
 8004110:	58020400 	.word	0x58020400
 8004114:	58021c00 	.word	0x58021c00
 8004118:	58022400 	.word	0x58022400

0800411c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800411c:	b902      	cbnz	r2, 8004120 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800411e:	0409      	lsls	r1, r1, #16
 8004120:	6181      	str	r1, [r0, #24]
  }
}
 8004122:	4770      	bx	lr

08004124 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004124:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004126:	4c10      	ldr	r4, [pc, #64]	; (8004168 <HAL_PWREx_ConfigSupply+0x44>)
 8004128:	68e3      	ldr	r3, [r4, #12]
 800412a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800412e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004130:	d105      	bne.n	800413e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004132:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004136:	1a18      	subs	r0, r3, r0
 8004138:	bf18      	it	ne
 800413a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800413c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800413e:	f023 0307 	bic.w	r3, r3, #7
 8004142:	4303      	orrs	r3, r0
 8004144:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8004146:	f7fd fa2f 	bl	80015a8 <HAL_GetTick>
 800414a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800414c:	e005      	b.n	800415a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800414e:	f7fd fa2b 	bl	80015a8 <HAL_GetTick>
 8004152:	1b40      	subs	r0, r0, r5
 8004154:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004158:	d804      	bhi.n	8004164 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800415a:	6863      	ldr	r3, [r4, #4]
 800415c:	049b      	lsls	r3, r3, #18
 800415e:	d5f6      	bpl.n	800414e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8004160:	2000      	movs	r0, #0
}
 8004162:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004164:	2001      	movs	r0, #1
}
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	58024800 	.word	0x58024800

0800416c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800416c:	4b3c      	ldr	r3, [pc, #240]	; (8004260 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800416e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004172:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004174:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8004176:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800417a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800417c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004180:	d038      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004182:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004186:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800418a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800418e:	fb05 f101 	mul.w	r1, r5, r1
 8004192:	2a01      	cmp	r2, #1
 8004194:	ee07 1a90 	vmov	s15, r1
 8004198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800419c:	d002      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800419e:	2a02      	cmp	r2, #2
 80041a0:	d050      	beq.n	8004244 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 80041a2:	b34a      	cbz	r2, 80041f8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041a4:	ee07 0a90 	vmov	s15, r0
 80041a8:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8004264 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80041ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80041b6:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8004268 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 80041ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80041c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ca:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80041ce:	eee7 7a06 	vfma.f32	s15, s14, s12
 80041d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80041de:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80041f4:	bc30      	pop	{r4, r5}
 80041f6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	0692      	lsls	r2, r2, #26
 80041fc:	d529      	bpl.n	8004252 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041fe:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004200:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004204:	4a19      	ldr	r2, [pc, #100]	; (800426c <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800420c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004214:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8004268 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8004218:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800421c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800421e:	ee06 3a10 	vmov	s12, r3
 8004222:	ee05 2a90 	vmov	s11, r2
 8004226:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800422a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800422e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8004232:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8004236:	eef0 7a46 	vmov.f32	s15, s12
 800423a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800423e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004242:	e7c8      	b.n	80041d6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004244:	ee07 0a90 	vmov	s15, r0
 8004248:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004270 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800424c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004250:	e7ae      	b.n	80041b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004252:	ee07 0a90 	vmov	s15, r0
 8004256:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004274 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 800425a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800425e:	e7a7      	b.n	80041b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8004260:	58024400 	.word	0x58024400
 8004264:	4a742400 	.word	0x4a742400
 8004268:	39000000 	.word	0x39000000
 800426c:	03d09000 	.word	0x03d09000
 8004270:	4bbebc20 	.word	0x4bbebc20
 8004274:	4c742400 	.word	0x4c742400

08004278 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004278:	2800      	cmp	r0, #0
 800427a:	f000 81c4 	beq.w	8004606 <HAL_RCC_OscConfig+0x38e>
{
 800427e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004280:	6803      	ldr	r3, [r0, #0]
 8004282:	4604      	mov	r4, r0
 8004284:	07d9      	lsls	r1, r3, #31
 8004286:	d52e      	bpl.n	80042e6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004288:	4993      	ldr	r1, [pc, #588]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
 800428a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800428c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800428e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004292:	2a10      	cmp	r2, #16
 8004294:	f000 80f0 	beq.w	8004478 <HAL_RCC_OscConfig+0x200>
 8004298:	2a18      	cmp	r2, #24
 800429a:	f000 80e8 	beq.w	800446e <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429e:	6863      	ldr	r3, [r4, #4]
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	f000 8109 	beq.w	80044ba <HAL_RCC_OscConfig+0x242>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f040 8166 	bne.w	800457a <HAL_RCC_OscConfig+0x302>
 80042ae:	4b8a      	ldr	r3, [pc, #552]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042be:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c0:	6863      	ldr	r3, [r4, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 813a 	beq.w	800453c <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 80042c8:	f7fd f96e 	bl	80015a8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042cc:	4e82      	ldr	r6, [pc, #520]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80042ce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042d0:	e005      	b.n	80042de <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d2:	f7fd f969 	bl	80015a8 <HAL_GetTick>
 80042d6:	1b40      	subs	r0, r0, r5
 80042d8:	2864      	cmp	r0, #100	; 0x64
 80042da:	f200 812d 	bhi.w	8004538 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042de:	6833      	ldr	r3, [r6, #0]
 80042e0:	039b      	lsls	r3, r3, #14
 80042e2:	d5f6      	bpl.n	80042d2 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	079d      	lsls	r5, r3, #30
 80042e8:	d47e      	bmi.n	80043e8 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042ea:	06d9      	lsls	r1, r3, #27
 80042ec:	d528      	bpl.n	8004340 <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ee:	4a7a      	ldr	r2, [pc, #488]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
 80042f0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	f000 80cd 	beq.w	8004498 <HAL_RCC_OscConfig+0x220>
 80042fe:	2b18      	cmp	r3, #24
 8004300:	f000 80c5 	beq.w	800448e <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004304:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8004306:	4d74      	ldr	r5, [pc, #464]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 8155 	beq.w	80045b8 <HAL_RCC_OscConfig+0x340>
        __HAL_RCC_CSI_ENABLE();
 800430e:	682b      	ldr	r3, [r5, #0]
 8004310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004314:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004316:	f7fd f947 	bl	80015a8 <HAL_GetTick>
 800431a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800431c:	e005      	b.n	800432a <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800431e:	f7fd f943 	bl	80015a8 <HAL_GetTick>
 8004322:	1b80      	subs	r0, r0, r6
 8004324:	2802      	cmp	r0, #2
 8004326:	f200 8107 	bhi.w	8004538 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800432a:	682b      	ldr	r3, [r5, #0]
 800432c:	05db      	lsls	r3, r3, #23
 800432e:	d5f6      	bpl.n	800431e <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004330:	68eb      	ldr	r3, [r5, #12]
 8004332:	6a22      	ldr	r2, [r4, #32]
 8004334:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8004338:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800433c:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	071d      	lsls	r5, r3, #28
 8004342:	d516      	bpl.n	8004372 <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004344:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004346:	4d64      	ldr	r5, [pc, #400]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8105 	beq.w	8004558 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_LSI_ENABLE();
 800434e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004356:	f7fd f927 	bl	80015a8 <HAL_GetTick>
 800435a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800435c:	e005      	b.n	800436a <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800435e:	f7fd f923 	bl	80015a8 <HAL_GetTick>
 8004362:	1b80      	subs	r0, r0, r6
 8004364:	2802      	cmp	r0, #2
 8004366:	f200 80e7 	bhi.w	8004538 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800436a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800436c:	0798      	lsls	r0, r3, #30
 800436e:	d5f6      	bpl.n	800435e <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	069a      	lsls	r2, r3, #26
 8004374:	d516      	bpl.n	80043a4 <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004376:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8004378:	4d57      	ldr	r5, [pc, #348]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 810b 	beq.w	8004596 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSI48_ENABLE();
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004386:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004388:	f7fd f90e 	bl	80015a8 <HAL_GetTick>
 800438c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800438e:	e005      	b.n	800439c <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004390:	f7fd f90a 	bl	80015a8 <HAL_GetTick>
 8004394:	1b80      	subs	r0, r0, r6
 8004396:	2802      	cmp	r0, #2
 8004398:	f200 80ce 	bhi.w	8004538 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	049f      	lsls	r7, r3, #18
 80043a0:	d5f6      	bpl.n	8004390 <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	0759      	lsls	r1, r3, #29
 80043a6:	f100 808e 	bmi.w	80044c6 <HAL_RCC_OscConfig+0x24e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80043ac:	b1d0      	cbz	r0, 80043e4 <HAL_RCC_OscConfig+0x16c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043ae:	4d4a      	ldr	r5, [pc, #296]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
 80043b0:	692b      	ldr	r3, [r5, #16]
 80043b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043b6:	2b18      	cmp	r3, #24
 80043b8:	f000 818c 	beq.w	80046d4 <HAL_RCC_OscConfig+0x45c>
        __HAL_RCC_PLL_DISABLE();
 80043bc:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043be:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80043c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043c4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c6:	f000 8120 	beq.w	800460a <HAL_RCC_OscConfig+0x392>
        tickstart = HAL_GetTick();
 80043ca:	f7fd f8ed 	bl	80015a8 <HAL_GetTick>
 80043ce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043d0:	e005      	b.n	80043de <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fd f8e9 	bl	80015a8 <HAL_GetTick>
 80043d6:	1b00      	subs	r0, r0, r4
 80043d8:	2802      	cmp	r0, #2
 80043da:	f200 80ad 	bhi.w	8004538 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043de:	682b      	ldr	r3, [r5, #0]
 80043e0:	019b      	lsls	r3, r3, #6
 80043e2:	d4f6      	bmi.n	80043d2 <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 80043e4:	2000      	movs	r0, #0
}
 80043e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e8:	4a3b      	ldr	r2, [pc, #236]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
 80043ea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043ee:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80043f2:	d122      	bne.n	800443a <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f4:	4b38      	ldr	r3, [pc, #224]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
 80043f6:	68e2      	ldr	r2, [r4, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	0759      	lsls	r1, r3, #29
 80043fc:	d501      	bpl.n	8004402 <HAL_RCC_OscConfig+0x18a>
 80043fe:	2a00      	cmp	r2, #0
 8004400:	d043      	beq.n	800448a <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004402:	4d35      	ldr	r5, [pc, #212]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	f023 0319 	bic.w	r3, r3, #25
 800440a:	4313      	orrs	r3, r2
 800440c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800440e:	f7fd f8cb 	bl	80015a8 <HAL_GetTick>
 8004412:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004414:	e005      	b.n	8004422 <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004416:	f7fd f8c7 	bl	80015a8 <HAL_GetTick>
 800441a:	1b80      	subs	r0, r0, r6
 800441c:	2802      	cmp	r0, #2
 800441e:	f200 808b 	bhi.w	8004538 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004422:	682b      	ldr	r3, [r5, #0]
 8004424:	075b      	lsls	r3, r3, #29
 8004426:	d5f6      	bpl.n	8004416 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004428:	686b      	ldr	r3, [r5, #4]
 800442a:	6922      	ldr	r2, [r4, #16]
 800442c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004430:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004434:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	e757      	b.n	80042ea <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800443a:	2b18      	cmp	r3, #24
 800443c:	f000 80df 	beq.w	80045fe <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004440:	4d25      	ldr	r5, [pc, #148]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004442:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004444:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004446:	2a00      	cmp	r2, #0
 8004448:	f000 80c8 	beq.w	80045dc <HAL_RCC_OscConfig+0x364>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800444c:	f023 0319 	bic.w	r3, r3, #25
 8004450:	4313      	orrs	r3, r2
 8004452:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004454:	f7fd f8a8 	bl	80015a8 <HAL_GetTick>
 8004458:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800445a:	e004      	b.n	8004466 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445c:	f7fd f8a4 	bl	80015a8 <HAL_GetTick>
 8004460:	1b80      	subs	r0, r0, r6
 8004462:	2802      	cmp	r0, #2
 8004464:	d868      	bhi.n	8004538 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004466:	682b      	ldr	r3, [r5, #0]
 8004468:	075f      	lsls	r7, r3, #29
 800446a:	d5f7      	bpl.n	800445c <HAL_RCC_OscConfig+0x1e4>
 800446c:	e7dc      	b.n	8004428 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800446e:	f001 0103 	and.w	r1, r1, #3
 8004472:	2902      	cmp	r1, #2
 8004474:	f47f af13 	bne.w	800429e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	0392      	lsls	r2, r2, #14
 800447e:	f57f af32 	bpl.w	80042e6 <HAL_RCC_OscConfig+0x6e>
 8004482:	6862      	ldr	r2, [r4, #4]
 8004484:	2a00      	cmp	r2, #0
 8004486:	f47f af2e 	bne.w	80042e6 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800448a:	2001      	movs	r0, #1
}
 800448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800448e:	f002 0203 	and.w	r2, r2, #3
 8004492:	2a01      	cmp	r2, #1
 8004494:	f47f af36 	bne.w	8004304 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	05da      	lsls	r2, r3, #23
 800449e:	d502      	bpl.n	80044a6 <HAL_RCC_OscConfig+0x22e>
 80044a0:	69e3      	ldr	r3, [r4, #28]
 80044a2:	2b80      	cmp	r3, #128	; 0x80
 80044a4:	d1f1      	bne.n	800448a <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044a6:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
 80044a8:	6a21      	ldr	r1, [r4, #32]
 80044aa:	68d3      	ldr	r3, [r2, #12]
 80044ac:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80044b0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80044b4:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b6:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044b8:	e742      	b.n	8004340 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ba:	4a07      	ldr	r2, [pc, #28]	; (80044d8 <HAL_RCC_OscConfig+0x260>)
 80044bc:	6813      	ldr	r3, [r2, #0]
 80044be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	e6fc      	b.n	80042c0 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 80044c6:	4d05      	ldr	r5, [pc, #20]	; (80044dc <HAL_RCC_OscConfig+0x264>)
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ce:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80044d0:	f7fd f86a 	bl	80015a8 <HAL_GetTick>
 80044d4:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x272>
 80044d8:	58024400 	.word	0x58024400
 80044dc:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e0:	f7fd f862 	bl	80015a8 <HAL_GetTick>
 80044e4:	1b80      	subs	r0, r0, r6
 80044e6:	2864      	cmp	r0, #100	; 0x64
 80044e8:	d826      	bhi.n	8004538 <HAL_RCC_OscConfig+0x2c0>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	05da      	lsls	r2, r3, #23
 80044ee:	d5f7      	bpl.n	80044e0 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f0:	68a3      	ldr	r3, [r4, #8]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	f000 814d 	beq.w	8004792 <HAL_RCC_OscConfig+0x51a>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f040 8157 	bne.w	80047ac <HAL_RCC_OscConfig+0x534>
 80044fe:	4ba8      	ldr	r3, [pc, #672]	; (80047a0 <HAL_RCC_OscConfig+0x528>)
 8004500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004502:	f022 0201 	bic.w	r2, r2, #1
 8004506:	671a      	str	r2, [r3, #112]	; 0x70
 8004508:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800450a:	f022 0204 	bic.w	r2, r2, #4
 800450e:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004510:	68a3      	ldr	r3, [r4, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 812c 	beq.w	8004770 <HAL_RCC_OscConfig+0x4f8>
      tickstart = HAL_GetTick();
 8004518:	f7fd f846 	bl	80015a8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800451c:	4ea0      	ldr	r6, [pc, #640]	; (80047a0 <HAL_RCC_OscConfig+0x528>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004522:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004524:	e004      	b.n	8004530 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fd f83f 	bl	80015a8 <HAL_GetTick>
 800452a:	1b40      	subs	r0, r0, r5
 800452c:	42b8      	cmp	r0, r7
 800452e:	d803      	bhi.n	8004538 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004530:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004532:	079b      	lsls	r3, r3, #30
 8004534:	d5f7      	bpl.n	8004526 <HAL_RCC_OscConfig+0x2ae>
 8004536:	e738      	b.n	80043aa <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 8004538:	2003      	movs	r0, #3
}
 800453a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 800453c:	f7fd f834 	bl	80015a8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004540:	4e97      	ldr	r6, [pc, #604]	; (80047a0 <HAL_RCC_OscConfig+0x528>)
        tickstart = HAL_GetTick();
 8004542:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004544:	e004      	b.n	8004550 <HAL_RCC_OscConfig+0x2d8>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004546:	f7fd f82f 	bl	80015a8 <HAL_GetTick>
 800454a:	1b40      	subs	r0, r0, r5
 800454c:	2864      	cmp	r0, #100	; 0x64
 800454e:	d8f3      	bhi.n	8004538 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004550:	6833      	ldr	r3, [r6, #0]
 8004552:	039f      	lsls	r7, r3, #14
 8004554:	d4f7      	bmi.n	8004546 <HAL_RCC_OscConfig+0x2ce>
 8004556:	e6c5      	b.n	80042e4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004558:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004560:	f7fd f822 	bl	80015a8 <HAL_GetTick>
 8004564:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004566:	e004      	b.n	8004572 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004568:	f7fd f81e 	bl	80015a8 <HAL_GetTick>
 800456c:	1b80      	subs	r0, r0, r6
 800456e:	2802      	cmp	r0, #2
 8004570:	d8e2      	bhi.n	8004538 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004572:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004574:	0799      	lsls	r1, r3, #30
 8004576:	d4f7      	bmi.n	8004568 <HAL_RCC_OscConfig+0x2f0>
 8004578:	e6fa      	b.n	8004370 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800457a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800457e:	4b88      	ldr	r3, [pc, #544]	; (80047a0 <HAL_RCC_OscConfig+0x528>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	f47f ae96 	bne.w	80042b2 <HAL_RCC_OscConfig+0x3a>
 8004586:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e694      	b.n	80042c0 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800459c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800459e:	f7fd f803 	bl	80015a8 <HAL_GetTick>
 80045a2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045a4:	e004      	b.n	80045b0 <HAL_RCC_OscConfig+0x338>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045a6:	f7fc ffff 	bl	80015a8 <HAL_GetTick>
 80045aa:	1b80      	subs	r0, r0, r6
 80045ac:	2802      	cmp	r0, #2
 80045ae:	d8c3      	bhi.n	8004538 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	0498      	lsls	r0, r3, #18
 80045b4:	d4f7      	bmi.n	80045a6 <HAL_RCC_OscConfig+0x32e>
 80045b6:	e6f4      	b.n	80043a2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80045c0:	f7fc fff2 	bl	80015a8 <HAL_GetTick>
 80045c4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045c6:	e004      	b.n	80045d2 <HAL_RCC_OscConfig+0x35a>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045c8:	f7fc ffee 	bl	80015a8 <HAL_GetTick>
 80045cc:	1b80      	subs	r0, r0, r6
 80045ce:	2802      	cmp	r0, #2
 80045d0:	d8b2      	bhi.n	8004538 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045d2:	682b      	ldr	r3, [r5, #0]
 80045d4:	05df      	lsls	r7, r3, #23
 80045d6:	d4f7      	bmi.n	80045c8 <HAL_RCC_OscConfig+0x350>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	e6b1      	b.n	8004340 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80045e2:	f7fc ffe1 	bl	80015a8 <HAL_GetTick>
 80045e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045e8:	e004      	b.n	80045f4 <HAL_RCC_OscConfig+0x37c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ea:	f7fc ffdd 	bl	80015a8 <HAL_GetTick>
 80045ee:	1b80      	subs	r0, r0, r6
 80045f0:	2802      	cmp	r0, #2
 80045f2:	d8a1      	bhi.n	8004538 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	0758      	lsls	r0, r3, #29
 80045f8:	d4f7      	bmi.n	80045ea <HAL_RCC_OscConfig+0x372>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	e675      	b.n	80042ea <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80045fe:	0790      	lsls	r0, r2, #30
 8004600:	f47f af1e 	bne.w	8004440 <HAL_RCC_OscConfig+0x1c8>
 8004604:	e6f6      	b.n	80043f4 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 8004606:	2001      	movs	r0, #1
}
 8004608:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800460a:	f7fc ffcd 	bl	80015a8 <HAL_GetTick>
 800460e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004610:	e004      	b.n	800461c <HAL_RCC_OscConfig+0x3a4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004612:	f7fc ffc9 	bl	80015a8 <HAL_GetTick>
 8004616:	1b80      	subs	r0, r0, r6
 8004618:	2802      	cmp	r0, #2
 800461a:	d88d      	bhi.n	8004538 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	0199      	lsls	r1, r3, #6
 8004620:	d4f7      	bmi.n	8004612 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004622:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004624:	4b5f      	ldr	r3, [pc, #380]	; (80047a4 <HAL_RCC_OscConfig+0x52c>)
 8004626:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004628:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800462a:	495f      	ldr	r1, [pc, #380]	; (80047a8 <HAL_RCC_OscConfig+0x530>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800462c:	4e5c      	ldr	r6, [pc, #368]	; (80047a0 <HAL_RCC_OscConfig+0x528>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800462e:	4313      	orrs	r3, r2
 8004630:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004632:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004636:	62ab      	str	r3, [r5, #40]	; 0x28
 8004638:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800463c:	3b01      	subs	r3, #1
 800463e:	3a01      	subs	r2, #1
 8004640:	025b      	lsls	r3, r3, #9
 8004642:	0412      	lsls	r2, r2, #16
 8004644:	b29b      	uxth	r3, r3
 8004646:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800464a:	4313      	orrs	r3, r2
 800464c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800464e:	3a01      	subs	r2, #1
 8004650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004654:	4313      	orrs	r3, r2
 8004656:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004658:	3a01      	subs	r2, #1
 800465a:	0612      	lsls	r2, r2, #24
 800465c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004660:	4313      	orrs	r3, r2
 8004662:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8004664:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800466c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800466e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004670:	4011      	ands	r1, r2
 8004672:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8004676:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004678:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800467a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800467c:	f023 030c 	bic.w	r3, r3, #12
 8004680:	4313      	orrs	r3, r2
 8004682:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004684:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004686:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004688:	f023 0302 	bic.w	r3, r3, #2
 800468c:	4313      	orrs	r3, r2
 800468e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004690:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004696:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004698:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800469a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80046a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80046a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046a6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80046a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80046b8:	f7fc ff76 	bl	80015a8 <HAL_GetTick>
 80046bc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046be:	e005      	b.n	80046cc <HAL_RCC_OscConfig+0x454>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fc ff72 	bl	80015a8 <HAL_GetTick>
 80046c4:	1b00      	subs	r0, r0, r4
 80046c6:	2802      	cmp	r0, #2
 80046c8:	f63f af36 	bhi.w	8004538 <HAL_RCC_OscConfig+0x2c0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046cc:	6833      	ldr	r3, [r6, #0]
 80046ce:	019a      	lsls	r2, r3, #6
 80046d0:	d5f6      	bpl.n	80046c0 <HAL_RCC_OscConfig+0x448>
 80046d2:	e687      	b.n	80043e4 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d4:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80046d6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046d8:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046da:	f43f ae84 	beq.w	80043e6 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046de:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80046e4:	428b      	cmp	r3, r1
 80046e6:	f47f aed0 	bne.w	800448a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046ea:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046f0:	429a      	cmp	r2, r3
 80046f2:	f47f aeca 	bne.w	800448a <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046f8:	f3c6 0208 	ubfx	r2, r6, #0, #9
 80046fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	f47f aec3 	bne.w	800448a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004704:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004706:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800470a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	f47f aebc 	bne.w	800448a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004712:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004714:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8004718:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	f47f aeb5 	bne.w	800448a <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004720:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004722:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8004726:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004728:	429e      	cmp	r6, r3
 800472a:	f47f aeae 	bne.w	800448a <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800472e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004730:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004732:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004736:	429a      	cmp	r2, r3
 8004738:	f43f ae54 	beq.w	80043e4 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 800473c:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <HAL_RCC_OscConfig+0x528>)
 800473e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8004746:	f7fc ff2f 	bl	80015a8 <HAL_GetTick>
 800474a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800474c:	f7fc ff2c 	bl	80015a8 <HAL_GetTick>
 8004750:	42a8      	cmp	r0, r5
 8004752:	d0fb      	beq.n	800474c <HAL_RCC_OscConfig+0x4d4>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004754:	4a12      	ldr	r2, [pc, #72]	; (80047a0 <HAL_RCC_OscConfig+0x528>)
  return HAL_OK;
 8004756:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004758:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <HAL_RCC_OscConfig+0x530>)
 800475c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800475e:	4023      	ands	r3, r4
 8004760:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004764:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004766:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 8004770:	f7fc ff1a 	bl	80015a8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004774:	4e0a      	ldr	r6, [pc, #40]	; (80047a0 <HAL_RCC_OscConfig+0x528>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004776:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800477a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800477c:	e005      	b.n	800478a <HAL_RCC_OscConfig+0x512>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477e:	f7fc ff13 	bl	80015a8 <HAL_GetTick>
 8004782:	1b40      	subs	r0, r0, r5
 8004784:	42b8      	cmp	r0, r7
 8004786:	f63f aed7 	bhi.w	8004538 <HAL_RCC_OscConfig+0x2c0>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800478a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800478c:	0798      	lsls	r0, r3, #30
 800478e:	d4f6      	bmi.n	800477e <HAL_RCC_OscConfig+0x506>
 8004790:	e60b      	b.n	80043aa <HAL_RCC_OscConfig+0x132>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004792:	4a03      	ldr	r2, [pc, #12]	; (80047a0 <HAL_RCC_OscConfig+0x528>)
 8004794:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6713      	str	r3, [r2, #112]	; 0x70
 800479c:	e6b8      	b.n	8004510 <HAL_RCC_OscConfig+0x298>
 800479e:	bf00      	nop
 80047a0:	58024400 	.word	0x58024400
 80047a4:	fffffc0c 	.word	0xfffffc0c
 80047a8:	ffff0007 	.word	0xffff0007
 80047ac:	2b05      	cmp	r3, #5
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x550>)
 80047b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047b2:	f47f aea6 	bne.w	8004502 <HAL_RCC_OscConfig+0x28a>
 80047b6:	f042 0204 	orr.w	r2, r2, #4
 80047ba:	671a      	str	r2, [r3, #112]	; 0x70
 80047bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	671a      	str	r2, [r3, #112]	; 0x70
 80047c4:	e6a4      	b.n	8004510 <HAL_RCC_OscConfig+0x298>
 80047c6:	bf00      	nop
 80047c8:	58024400 	.word	0x58024400

080047cc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047cc:	4a48      	ldr	r2, [pc, #288]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x124>)
 80047ce:	6913      	ldr	r3, [r2, #16]
 80047d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d004      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x16>
 80047d8:	2b18      	cmp	r3, #24
 80047da:	d00d      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0x2c>
 80047dc:	b11b      	cbz	r3, 80047e6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80047de:	4845      	ldr	r0, [pc, #276]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x128>)
 80047e0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047e2:	4845      	ldr	r0, [pc, #276]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80047e4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	0699      	lsls	r1, r3, #26
 80047ea:	d54a      	bpl.n	8004882 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047ec:	6813      	ldr	r3, [r2, #0]
 80047ee:	4843      	ldr	r0, [pc, #268]	; (80048fc <HAL_RCC_GetSysClockFreq+0x130>)
 80047f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80047f4:	40d8      	lsrs	r0, r3
 80047f6:	4770      	bx	lr
{
 80047f8:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80047fc:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047fe:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 8004800:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004804:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004806:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800480a:	d038      	beq.n	800487e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800480c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004810:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004814:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004818:	fb05 f101 	mul.w	r1, r5, r1
 800481c:	2b01      	cmp	r3, #1
 800481e:	ee07 1a90 	vmov	s15, r1
 8004822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 8004826:	d002      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0x62>
 8004828:	2b02      	cmp	r3, #2
 800482a:	d02c      	beq.n	8004886 <HAL_RCC_GetSysClockFreq+0xba>
 800482c:	b393      	cbz	r3, 8004894 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800482e:	ee07 0a90 	vmov	s15, r0
 8004832:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8004900 <HAL_RCC_GetSysClockFreq+0x134>
 8004836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800483a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800483c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004840:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8004904 <HAL_RCC_GetSysClockFreq+0x138>
 8004844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004848:	ee07 3a90 	vmov	s15, r3
 800484c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004854:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004858:	eee7 7a06 	vfma.f32	s15, s14, s12
 800485c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004860:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x124>)
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004868:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800487a:	ee17 0a90 	vmov	r0, s15
}
 800487e:	bc30      	pop	{r4, r5}
 8004880:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004882:	481e      	ldr	r0, [pc, #120]	; (80048fc <HAL_RCC_GetSysClockFreq+0x130>)
}
 8004884:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004886:	ee07 0a90 	vmov	s15, r0
 800488a:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8004908 <HAL_RCC_GetSysClockFreq+0x13c>
 800488e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004892:	e7d2      	b.n	800483a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004894:	6813      	ldr	r3, [r2, #0]
 8004896:	069b      	lsls	r3, r3, #26
 8004898:	d522      	bpl.n	80048e0 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800489a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800489c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048a0:	4916      	ldr	r1, [pc, #88]	; (80048fc <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048a8:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048b0:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8004904 <HAL_RCC_GetSysClockFreq+0x138>
 80048b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048b8:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048ba:	ee06 3a10 	vmov	s12, r3
 80048be:	ee05 1a90 	vmov	s11, r1
 80048c2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80048c6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80048ca:	ee36 6a26 	vadd.f32	s12, s12, s13
 80048ce:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80048d2:	eef0 7a46 	vmov.f32	s15, s12
 80048d6:	eee7 7a05 	vfma.f32	s15, s14, s10
 80048da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80048de:	e7bf      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e0:	ee07 0a90 	vmov	s15, r0
 80048e4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800490c <HAL_RCC_GetSysClockFreq+0x140>
 80048e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ec:	e7a5      	b.n	800483a <HAL_RCC_GetSysClockFreq+0x6e>
 80048ee:	bf00      	nop
 80048f0:	58024400 	.word	0x58024400
 80048f4:	003d0900 	.word	0x003d0900
 80048f8:	017d7840 	.word	0x017d7840
 80048fc:	03d09000 	.word	0x03d09000
 8004900:	4a742400 	.word	0x4a742400
 8004904:	39000000 	.word	0x39000000
 8004908:	4bbebc20 	.word	0x4bbebc20
 800490c:	4c742400 	.word	0x4c742400

08004910 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004910:	2800      	cmp	r0, #0
 8004912:	f000 811a 	beq.w	8004b4a <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004916:	4a92      	ldr	r2, [pc, #584]	; (8004b60 <HAL_RCC_ClockConfig+0x250>)
{
 8004918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800491c:	6813      	ldr	r3, [r2, #0]
 800491e:	4604      	mov	r4, r0
 8004920:	460d      	mov	r5, r1
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	428b      	cmp	r3, r1
 8004928:	d20c      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	6813      	ldr	r3, [r2, #0]
 800492c:	f023 030f 	bic.w	r3, r3, #15
 8004930:	430b      	orrs	r3, r1
 8004932:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004934:	6813      	ldr	r3, [r2, #0]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	428b      	cmp	r3, r1
 800493c:	d002      	beq.n	8004944 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800493e:	2001      	movs	r0, #1
}
 8004940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	075f      	lsls	r7, r3, #29
 8004948:	d50c      	bpl.n	8004964 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800494a:	4986      	ldr	r1, [pc, #536]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 800494c:	6920      	ldr	r0, [r4, #16]
 800494e:	698a      	ldr	r2, [r1, #24]
 8004950:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004954:	4290      	cmp	r0, r2
 8004956:	d905      	bls.n	8004964 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004958:	698b      	ldr	r3, [r1, #24]
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	4303      	orrs	r3, r0
 8004960:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	071e      	lsls	r6, r3, #28
 8004966:	d50c      	bpl.n	8004982 <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004968:	497e      	ldr	r1, [pc, #504]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 800496a:	6960      	ldr	r0, [r4, #20]
 800496c:	69ca      	ldr	r2, [r1, #28]
 800496e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004972:	4290      	cmp	r0, r2
 8004974:	d905      	bls.n	8004982 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004976:	69cb      	ldr	r3, [r1, #28]
 8004978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497c:	4303      	orrs	r3, r0
 800497e:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	06d8      	lsls	r0, r3, #27
 8004984:	d50c      	bpl.n	80049a0 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004986:	4977      	ldr	r1, [pc, #476]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 8004988:	69a0      	ldr	r0, [r4, #24]
 800498a:	69ca      	ldr	r2, [r1, #28]
 800498c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004990:	4290      	cmp	r0, r2
 8004992:	d905      	bls.n	80049a0 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004994:	69cb      	ldr	r3, [r1, #28]
 8004996:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800499a:	4303      	orrs	r3, r0
 800499c:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	0699      	lsls	r1, r3, #26
 80049a2:	d50c      	bpl.n	80049be <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049a4:	496f      	ldr	r1, [pc, #444]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 80049a6:	69e0      	ldr	r0, [r4, #28]
 80049a8:	6a0a      	ldr	r2, [r1, #32]
 80049aa:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80049ae:	4290      	cmp	r0, r2
 80049b0:	d905      	bls.n	80049be <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049b2:	6a0b      	ldr	r3, [r1, #32]
 80049b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b8:	4303      	orrs	r3, r0
 80049ba:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	079a      	lsls	r2, r3, #30
 80049c0:	f140 8083 	bpl.w	8004aca <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049c4:	4867      	ldr	r0, [pc, #412]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 80049c6:	68e1      	ldr	r1, [r4, #12]
 80049c8:	6982      	ldr	r2, [r0, #24]
 80049ca:	f002 020f 	and.w	r2, r2, #15
 80049ce:	4291      	cmp	r1, r2
 80049d0:	f240 80a9 	bls.w	8004b26 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	6983      	ldr	r3, [r0, #24]
 80049d6:	f023 030f 	bic.w	r3, r3, #15
 80049da:	430b      	orrs	r3, r1
 80049dc:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	07df      	lsls	r7, r3, #31
 80049e2:	d474      	bmi.n	8004ace <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e4:	079f      	lsls	r7, r3, #30
 80049e6:	d507      	bpl.n	80049f8 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049e8:	4a5e      	ldr	r2, [pc, #376]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 80049ea:	68e1      	ldr	r1, [r4, #12]
 80049ec:	6993      	ldr	r3, [r2, #24]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	428b      	cmp	r3, r1
 80049f4:	f200 80a0 	bhi.w	8004b38 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049f8:	4a59      	ldr	r2, [pc, #356]	; (8004b60 <HAL_RCC_ClockConfig+0x250>)
 80049fa:	6813      	ldr	r3, [r2, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	42ab      	cmp	r3, r5
 8004a02:	d909      	bls.n	8004a18 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a04:	6813      	ldr	r3, [r2, #0]
 8004a06:	f023 030f 	bic.w	r3, r3, #15
 8004a0a:	432b      	orrs	r3, r5
 8004a0c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	42ab      	cmp	r3, r5
 8004a16:	d192      	bne.n	800493e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	075e      	lsls	r6, r3, #29
 8004a1c:	d50c      	bpl.n	8004a38 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a1e:	4951      	ldr	r1, [pc, #324]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 8004a20:	6920      	ldr	r0, [r4, #16]
 8004a22:	698a      	ldr	r2, [r1, #24]
 8004a24:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004a28:	4290      	cmp	r0, r2
 8004a2a:	d205      	bcs.n	8004a38 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a2c:	698b      	ldr	r3, [r1, #24]
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a32:	4303      	orrs	r3, r0
 8004a34:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	071d      	lsls	r5, r3, #28
 8004a3a:	d50c      	bpl.n	8004a56 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a3c:	4949      	ldr	r1, [pc, #292]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 8004a3e:	6960      	ldr	r0, [r4, #20]
 8004a40:	69ca      	ldr	r2, [r1, #28]
 8004a42:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004a46:	4290      	cmp	r0, r2
 8004a48:	d205      	bcs.n	8004a56 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a4a:	69cb      	ldr	r3, [r1, #28]
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a50:	4303      	orrs	r3, r0
 8004a52:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	06d8      	lsls	r0, r3, #27
 8004a58:	d50c      	bpl.n	8004a74 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a5a:	4942      	ldr	r1, [pc, #264]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 8004a5c:	69a0      	ldr	r0, [r4, #24]
 8004a5e:	69ca      	ldr	r2, [r1, #28]
 8004a60:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004a64:	4290      	cmp	r0, r2
 8004a66:	d205      	bcs.n	8004a74 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a68:	69cb      	ldr	r3, [r1, #28]
 8004a6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a6e:	4303      	orrs	r3, r0
 8004a70:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	0699      	lsls	r1, r3, #26
 8004a76:	d50b      	bpl.n	8004a90 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a78:	4a3a      	ldr	r2, [pc, #232]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 8004a7a:	69e1      	ldr	r1, [r4, #28]
 8004a7c:	6a13      	ldr	r3, [r2, #32]
 8004a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a82:	4299      	cmp	r1, r3
 8004a84:	d204      	bcs.n	8004a90 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a86:	6a13      	ldr	r3, [r2, #32]
 8004a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a90:	f7ff fe9c 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 8004a94:	4a33      	ldr	r2, [pc, #204]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 8004a96:	4603      	mov	r3, r0
 8004a98:	4833      	ldr	r0, [pc, #204]	; (8004b68 <HAL_RCC_ClockConfig+0x258>)
 8004a9a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a9c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a9e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8004aa2:	4d32      	ldr	r5, [pc, #200]	; (8004b6c <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004aa4:	f002 020f 	and.w	r2, r2, #15
 8004aa8:	4c31      	ldr	r4, [pc, #196]	; (8004b70 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004aaa:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004aac:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004aae:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8004ab2:	4830      	ldr	r0, [pc, #192]	; (8004b74 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ab4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ab8:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8004aba:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8004abc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004abe:	40d3      	lsrs	r3, r2
 8004ac0:	6023      	str	r3, [r4, #0]
}
 8004ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8004ac6:	f7fc bd0d 	b.w	80014e4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aca:	07db      	lsls	r3, r3, #31
 8004acc:	d594      	bpl.n	80049f8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ace:	4a25      	ldr	r2, [pc, #148]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 8004ad0:	68a1      	ldr	r1, [r4, #8]
 8004ad2:	6993      	ldr	r3, [r2, #24]
 8004ad4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004adc:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ade:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae0:	2902      	cmp	r1, #2
 8004ae2:	d034      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae4:	2903      	cmp	r1, #3
 8004ae6:	d02d      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ae8:	2901      	cmp	r1, #1
 8004aea:	d035      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aec:	075b      	lsls	r3, r3, #29
 8004aee:	f57f af26 	bpl.w	800493e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004af2:	4e1c      	ldr	r6, [pc, #112]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af4:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004af8:	6933      	ldr	r3, [r6, #16]
 8004afa:	f023 0307 	bic.w	r3, r3, #7
 8004afe:	430b      	orrs	r3, r1
 8004b00:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8004b02:	f7fc fd51 	bl	80015a8 <HAL_GetTick>
 8004b06:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b08:	e004      	b.n	8004b14 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0a:	f7fc fd4d 	bl	80015a8 <HAL_GetTick>
 8004b0e:	1bc0      	subs	r0, r0, r7
 8004b10:	4540      	cmp	r0, r8
 8004b12:	d81f      	bhi.n	8004b54 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b14:	6933      	ldr	r3, [r6, #16]
 8004b16:	6862      	ldr	r2, [r4, #4]
 8004b18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b1c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004b20:	d1f3      	bne.n	8004b0a <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	e75e      	b.n	80049e4 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b26:	07da      	lsls	r2, r3, #31
 8004b28:	d4d1      	bmi.n	8004ace <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b2a:	4a0e      	ldr	r2, [pc, #56]	; (8004b64 <HAL_RCC_ClockConfig+0x254>)
 8004b2c:	6993      	ldr	r3, [r2, #24]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	428b      	cmp	r3, r1
 8004b34:	f67f af60 	bls.w	80049f8 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	6993      	ldr	r3, [r2, #24]
 8004b3a:	f023 030f 	bic.w	r3, r3, #15
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	6193      	str	r3, [r2, #24]
 8004b42:	e759      	b.n	80049f8 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b44:	0198      	lsls	r0, r3, #6
 8004b46:	d4d4      	bmi.n	8004af2 <HAL_RCC_ClockConfig+0x1e2>
 8004b48:	e6f9      	b.n	800493e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004b4a:	2001      	movs	r0, #1
}
 8004b4c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b4e:	039e      	lsls	r6, r3, #14
 8004b50:	d4cf      	bmi.n	8004af2 <HAL_RCC_ClockConfig+0x1e2>
 8004b52:	e6f4      	b.n	800493e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004b54:	2003      	movs	r0, #3
 8004b56:	e6f3      	b.n	8004940 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b58:	05da      	lsls	r2, r3, #23
 8004b5a:	d4ca      	bmi.n	8004af2 <HAL_RCC_ClockConfig+0x1e2>
 8004b5c:	e6ef      	b.n	800493e <HAL_RCC_ClockConfig+0x2e>
 8004b5e:	bf00      	nop
 8004b60:	52002000 	.word	0x52002000
 8004b64:	58024400 	.word	0x58024400
 8004b68:	080085a8 	.word	0x080085a8
 8004b6c:	20000004 	.word	0x20000004
 8004b70:	20000008 	.word	0x20000008
 8004b74:	20000010 	.word	0x20000010

08004b78 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b78:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b7a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b7c:	6913      	ldr	r3, [r2, #16]
 8004b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d01a      	beq.n	8004bbc <HAL_RCC_GetHCLKFreq+0x44>
 8004b86:	2b18      	cmp	r3, #24
 8004b88:	d023      	beq.n	8004bd2 <HAL_RCC_GetHCLKFreq+0x5a>
 8004b8a:	b1cb      	cbz	r3, 8004bc0 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8004b8c:	4814      	ldr	r0, [pc, #80]	; (8004be0 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <HAL_RCC_GetHCLKFreq+0x64>)
 8004b90:	4914      	ldr	r1, [pc, #80]	; (8004be4 <HAL_RCC_GetHCLKFreq+0x6c>)
 8004b92:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b94:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b96:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b9a:	4c13      	ldr	r4, [pc, #76]	; (8004be8 <HAL_RCC_GetHCLKFreq+0x70>)
 8004b9c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ba0:	4d12      	ldr	r5, [pc, #72]	; (8004bec <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ba2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ba4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ba6:	f002 021f 	and.w	r2, r2, #31
 8004baa:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bae:	f003 001f 	and.w	r0, r3, #31
 8004bb2:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8004bb6:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bb8:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bbc:	480c      	ldr	r0, [pc, #48]	; (8004bf0 <HAL_RCC_GetHCLKFreq+0x78>)
 8004bbe:	e7e6      	b.n	8004b8e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bc0:	6813      	ldr	r3, [r2, #0]
 8004bc2:	069b      	lsls	r3, r3, #26
 8004bc4:	d508      	bpl.n	8004bd8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	480a      	ldr	r0, [pc, #40]	; (8004bf4 <HAL_RCC_GetHCLKFreq+0x7c>)
 8004bca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004bce:	40d8      	lsrs	r0, r3
 8004bd0:	e7dd      	b.n	8004b8e <HAL_RCC_GetHCLKFreq+0x16>
 8004bd2:	f7ff facb 	bl	800416c <HAL_RCC_GetSysClockFreq.part.0>
 8004bd6:	e7da      	b.n	8004b8e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004bd8:	4806      	ldr	r0, [pc, #24]	; (8004bf4 <HAL_RCC_GetHCLKFreq+0x7c>)
 8004bda:	e7d8      	b.n	8004b8e <HAL_RCC_GetHCLKFreq+0x16>
 8004bdc:	58024400 	.word	0x58024400
 8004be0:	003d0900 	.word	0x003d0900
 8004be4:	080085a8 	.word	0x080085a8
 8004be8:	20000008 	.word	0x20000008
 8004bec:	20000004 	.word	0x20000004
 8004bf0:	017d7840 	.word	0x017d7840
 8004bf4:	03d09000 	.word	0x03d09000

08004bf8 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bfa:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bfc:	6913      	ldr	r3, [r2, #16]
 8004bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d021      	beq.n	8004c4a <HAL_RCC_GetPCLK1Freq+0x52>
 8004c06:	2b18      	cmp	r3, #24
 8004c08:	d02a      	beq.n	8004c60 <HAL_RCC_GetPCLK1Freq+0x68>
 8004c0a:	b303      	cbz	r3, 8004c4e <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8004c0c:	4818      	ldr	r0, [pc, #96]	; (8004c70 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c0e:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x74>)
 8004c10:	4918      	ldr	r1, [pc, #96]	; (8004c74 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8004c12:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c14:	4c18      	ldr	r4, [pc, #96]	; (8004c78 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c16:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8004c1a:	4d18      	ldr	r5, [pc, #96]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c1c:	5ccb      	ldrb	r3, [r1, r3]
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c24:	6993      	ldr	r3, [r2, #24]
 8004c26:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 8004c2a:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c2c:	5ccb      	ldrb	r3, [r1, r3]
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	fa20 f303 	lsr.w	r3, r0, r3
 8004c36:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c38:	69d2      	ldr	r2, [r2, #28]
 8004c3a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004c3e:	5c88      	ldrb	r0, [r1, r2]
 8004c40:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c44:	fa23 f000 	lsr.w	r0, r3, r0
 8004c48:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c4a:	480d      	ldr	r0, [pc, #52]	; (8004c80 <HAL_RCC_GetPCLK1Freq+0x88>)
 8004c4c:	e7df      	b.n	8004c0e <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c4e:	6813      	ldr	r3, [r2, #0]
 8004c50:	069b      	lsls	r3, r3, #26
 8004c52:	d508      	bpl.n	8004c66 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c54:	6813      	ldr	r3, [r2, #0]
 8004c56:	480b      	ldr	r0, [pc, #44]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004c58:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004c5c:	40d8      	lsrs	r0, r3
 8004c5e:	e7d6      	b.n	8004c0e <HAL_RCC_GetPCLK1Freq+0x16>
 8004c60:	f7ff fa84 	bl	800416c <HAL_RCC_GetSysClockFreq.part.0>
 8004c64:	e7d3      	b.n	8004c0e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c66:	4807      	ldr	r0, [pc, #28]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004c68:	e7d1      	b.n	8004c0e <HAL_RCC_GetPCLK1Freq+0x16>
 8004c6a:	bf00      	nop
 8004c6c:	58024400 	.word	0x58024400
 8004c70:	003d0900 	.word	0x003d0900
 8004c74:	080085a8 	.word	0x080085a8
 8004c78:	20000008 	.word	0x20000008
 8004c7c:	20000004 	.word	0x20000004
 8004c80:	017d7840 	.word	0x017d7840
 8004c84:	03d09000 	.word	0x03d09000

08004c88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c8a:	4c3a      	ldr	r4, [pc, #232]	; (8004d74 <RCCEx_PLL2_Config+0xec>)
 8004c8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d067      	beq.n	8004d66 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	4606      	mov	r6, r0
 8004c9a:	460f      	mov	r7, r1
 8004c9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ca0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca2:	f7fc fc81 	bl	80015a8 <HAL_GetTick>
 8004ca6:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ca8:	e004      	b.n	8004cb4 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004caa:	f7fc fc7d 	bl	80015a8 <HAL_GetTick>
 8004cae:	1b43      	subs	r3, r0, r5
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d856      	bhi.n	8004d62 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	011a      	lsls	r2, r3, #4
 8004cb8:	d4f7      	bmi.n	8004caa <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cbc:	6832      	ldr	r2, [r6, #0]
 8004cbe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004cc2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004cc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cc8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	3a01      	subs	r2, #1
 8004cd0:	025b      	lsls	r3, r3, #9
 8004cd2:	0412      	lsls	r2, r2, #16
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	6872      	ldr	r2, [r6, #4]
 8004cde:	3a01      	subs	r2, #1
 8004ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	6932      	ldr	r2, [r6, #16]
 8004ce8:	3a01      	subs	r2, #1
 8004cea:	0612      	lsls	r2, r2, #24
 8004cec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004cf6:	6972      	ldr	r2, [r6, #20]
 8004cf8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d02:	69b3      	ldr	r3, [r6, #24]
 8004d04:	f022 0220 	bic.w	r2, r2, #32
 8004d08:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d0a:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d0c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d10:	f022 0210 	bic.w	r2, r2, #16
 8004d14:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d16:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004d18:	69f2      	ldr	r2, [r6, #28]
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004d20:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d24:	f043 0310 	orr.w	r3, r3, #16
 8004d28:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004d2c:	b1ef      	cbz	r7, 8004d6a <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d2e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d30:	bf0c      	ite	eq
 8004d32:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d36:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8004d3a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d3c:	4c0d      	ldr	r4, [pc, #52]	; (8004d74 <RCCEx_PLL2_Config+0xec>)
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d44:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d46:	f7fc fc2f 	bl	80015a8 <HAL_GetTick>
 8004d4a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d4c:	e004      	b.n	8004d58 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d4e:	f7fc fc2b 	bl	80015a8 <HAL_GetTick>
 8004d52:	1b40      	subs	r0, r0, r5
 8004d54:	2802      	cmp	r0, #2
 8004d56:	d804      	bhi.n	8004d62 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	d5f7      	bpl.n	8004d4e <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8004d5e:	2000      	movs	r0, #0
}
 8004d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004d62:	2003      	movs	r0, #3
}
 8004d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004d66:	2001      	movs	r0, #1
}
 8004d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d70:	e7e4      	b.n	8004d3c <RCCEx_PLL2_Config+0xb4>
 8004d72:	bf00      	nop
 8004d74:	58024400 	.word	0x58024400
 8004d78:	ffff0007 	.word	0xffff0007

08004d7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d7e:	4c3a      	ldr	r4, [pc, #232]	; (8004e68 <RCCEx_PLL3_Config+0xec>)
 8004d80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d067      	beq.n	8004e5a <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	4606      	mov	r6, r0
 8004d8e:	460f      	mov	r7, r1
 8004d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d94:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d96:	f7fc fc07 	bl	80015a8 <HAL_GetTick>
 8004d9a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d9c:	e004      	b.n	8004da8 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d9e:	f7fc fc03 	bl	80015a8 <HAL_GetTick>
 8004da2:	1b43      	subs	r3, r0, r5
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d856      	bhi.n	8004e56 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	009a      	lsls	r2, r3, #2
 8004dac:	d4f7      	bmi.n	8004d9e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004dae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004db0:	6832      	ldr	r2, [r6, #0]
 8004db2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004db6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004dba:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dbc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	3a01      	subs	r2, #1
 8004dc4:	025b      	lsls	r3, r3, #9
 8004dc6:	0412      	lsls	r2, r2, #16
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	6872      	ldr	r2, [r6, #4]
 8004dd2:	3a01      	subs	r2, #1
 8004dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	6932      	ldr	r2, [r6, #16]
 8004ddc:	3a01      	subs	r2, #1
 8004dde:	0612      	lsls	r2, r2, #24
 8004de0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004de4:	4313      	orrs	r3, r2
 8004de6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004de8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004dea:	6972      	ldr	r2, [r6, #20]
 8004dec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004df0:	4313      	orrs	r3, r2
 8004df2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004df4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004df6:	69b3      	ldr	r3, [r6, #24]
 8004df8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004dfc:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e00:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e08:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004e0c:	69f2      	ldr	r2, [r6, #28]
 8004e0e:	400b      	ands	r3, r1
 8004e10:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004e14:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004e20:	b1ef      	cbz	r7, 8004e5e <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e22:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e24:	bf0c      	ite	eq
 8004e26:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e2a:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8004e2e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e30:	4c0d      	ldr	r4, [pc, #52]	; (8004e68 <RCCEx_PLL3_Config+0xec>)
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e38:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e3a:	f7fc fbb5 	bl	80015a8 <HAL_GetTick>
 8004e3e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e40:	e004      	b.n	8004e4c <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e42:	f7fc fbb1 	bl	80015a8 <HAL_GetTick>
 8004e46:	1b40      	subs	r0, r0, r5
 8004e48:	2802      	cmp	r0, #2
 8004e4a:	d804      	bhi.n	8004e56 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	d5f7      	bpl.n	8004e42 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8004e52:	2000      	movs	r0, #0
}
 8004e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004e56:	2003      	movs	r0, #3
}
 8004e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004e5a:	2001      	movs	r0, #1
}
 8004e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e64:	e7e4      	b.n	8004e30 <RCCEx_PLL3_Config+0xb4>
 8004e66:	bf00      	nop
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	ffff0007 	.word	0xffff0007

08004e70 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e74:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8004e78:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e7a:	0118      	lsls	r0, r3, #4
 8004e7c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8004e80:	d51c      	bpl.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e82:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004e84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004e88:	f000 852c 	beq.w	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004e8c:	d823      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8004e8e:	2900      	cmp	r1, #0
 8004e90:	f000 8429 	beq.w	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x876>
 8004e94:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004e98:	d120      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x6c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	f104 0008 	add.w	r0, r4, #8
 8004ea0:	f7ff fef2 	bl	8004c88 <RCCEx_PLL2_Config>
 8004ea4:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8004ea6:	b93e      	cbnz	r6, 8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ea8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004eaa:	4a96      	ldr	r2, [pc, #600]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004eac:	2600      	movs	r6, #0
 8004eae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004eb0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004eb8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004ebc:	05d9      	lsls	r1, r3, #23
 8004ebe:	d511      	bpl.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004ec0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004ec2:	2904      	cmp	r1, #4
 8004ec4:	f200 858d 	bhi.w	80059e2 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8004ec8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004ecc:	051e0517 	.word	0x051e0517
 8004ed0:	02e30525 	.word	0x02e30525
 8004ed4:	02e3      	.short	0x02e3
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ed6:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8004eda:	d0e6      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x3a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004edc:	05d9      	lsls	r1, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ede:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ee2:	d4ed      	bmi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004ee4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ee6:	055f      	lsls	r7, r3, #21
 8004ee8:	d51a      	bpl.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004eea:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8004eee:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8004ef2:	f000 8527 	beq.w	8005944 <HAL_RCCEx_PeriphCLKConfig+0xad4>
 8004ef6:	f200 80c4 	bhi.w	8005082 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004efa:	2900      	cmp	r1, #0
 8004efc:	f000 8407 	beq.w	800570e <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8004f00:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004f04:	f040 80c7 	bne.w	8005096 <HAL_RCCEx_PeriphCLKConfig+0x226>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f08:	2100      	movs	r1, #0
 8004f0a:	f104 0008 	add.w	r0, r4, #8
 8004f0e:	f7ff febb 	bl	8004c88 <RCCEx_PLL2_Config>
 8004f12:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004f14:	2d00      	cmp	r5, #0
 8004f16:	f000 83ba 	beq.w	800568e <HAL_RCCEx_PeriphCLKConfig+0x81e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f1a:	462e      	mov	r6, r5
 8004f1c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f20:	0518      	lsls	r0, r3, #20
 8004f22:	d51a      	bpl.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xea>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004f24:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8004f28:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8004f2c:	f000 84fa 	beq.w	8005924 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004f30:	f200 80b4 	bhi.w	800509c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8004f34:	2900      	cmp	r1, #0
 8004f36:	f000 83de 	beq.w	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8004f3a:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8004f3e:	f040 80b7 	bne.w	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f42:	2100      	movs	r1, #0
 8004f44:	f104 0008 	add.w	r0, r4, #8
 8004f48:	f7ff fe9e 	bl	8004c88 <RCCEx_PLL2_Config>
 8004f4c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004f4e:	2d00      	cmp	r5, #0
 8004f50:	f000 83b2 	beq.w	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f54:	462e      	mov	r6, r5
 8004f56:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f5a:	0199      	lsls	r1, r3, #6
 8004f5c:	d51a      	bpl.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->OspiClockSelection)
 8004f5e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004f60:	2920      	cmp	r1, #32
 8004f62:	f000 8493 	beq.w	800588c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8004f66:	f200 80a6 	bhi.w	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8004f6a:	b139      	cbz	r1, 8004f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f6c:	2910      	cmp	r1, #16
 8004f6e:	f040 80a5 	bne.w	80050bc <HAL_RCCEx_PeriphCLKConfig+0x24c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f72:	4a64      	ldr	r2, [pc, #400]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004f74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f7a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8004f7c:	2d00      	cmp	r5, #0
 8004f7e:	f040 83d1 	bne.w	8005724 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f82:	4a60      	ldr	r2, [pc, #384]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004f84:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004f86:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004f88:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f90:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f94:	04df      	lsls	r7, r3, #19
 8004f96:	d519      	bpl.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x15c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004f98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004f9a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004f9e:	f000 84c9 	beq.w	8005934 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8004fa2:	f200 808e 	bhi.w	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004fa6:	2900      	cmp	r1, #0
 8004fa8:	f000 83ab 	beq.w	8005702 <HAL_RCCEx_PeriphCLKConfig+0x892>
 8004fac:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004fb0:	f040 808f 	bne.w	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	f104 0008 	add.w	r0, r4, #8
 8004fba:	f7ff fe65 	bl	8004c88 <RCCEx_PLL2_Config>
 8004fbe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004fc0:	2d00      	cmp	r5, #0
 8004fc2:	f000 836f 	beq.w	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004fc6:	462e      	mov	r6, r5
 8004fc8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004fcc:	0498      	lsls	r0, r3, #18
 8004fce:	d51c      	bpl.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004fd0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004fd2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004fd6:	f000 8445 	beq.w	8005864 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 8004fda:	d87d      	bhi.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8004fdc:	b149      	cbz	r1, 8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004fde:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004fe2:	f040 8081 	bne.w	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	f104 0008 	add.w	r0, r4, #8
 8004fec:	f7ff fe4c 	bl	8004c88 <RCCEx_PLL2_Config>
 8004ff0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004ff2:	2d00      	cmp	r5, #0
 8004ff4:	f040 83c3 	bne.w	800577e <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ff8:	4a42      	ldr	r2, [pc, #264]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004ffa:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004ffc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004ffe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005002:	430b      	orrs	r3, r1
 8005004:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005006:	e9d4 3200 	ldrd	r3, r2, [r4]
 800500a:	0459      	lsls	r1, r3, #17
 800500c:	d51d      	bpl.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch (PeriphClkInit->Spi6ClockSelection)
 800500e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8005012:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005016:	f000 842f 	beq.w	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa08>
 800501a:	d868      	bhi.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800501c:	b141      	cbz	r1, 8005030 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800501e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005022:	d16c      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005024:	2101      	movs	r1, #1
 8005026:	f104 0008 	add.w	r0, r4, #8
 800502a:	f7ff fe2d 	bl	8004c88 <RCCEx_PLL2_Config>
 800502e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005030:	2d00      	cmp	r5, #0
 8005032:	f040 83a0 	bne.w	8005776 <HAL_RCCEx_PeriphCLKConfig+0x906>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005036:	4a33      	ldr	r2, [pc, #204]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005038:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800503c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800503e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005042:	430b      	orrs	r3, r1
 8005044:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005046:	e9d4 3200 	ldrd	r3, r2, [r4]
 800504a:	041f      	lsls	r7, r3, #16
 800504c:	d50d      	bpl.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->FdcanClockSelection)
 800504e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005050:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005054:	f000 83e0 	beq.w	8005818 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8005058:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800505c:	f000 8235 	beq.w	80054ca <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8005060:	2900      	cmp	r1, #0
 8005062:	f000 8238 	beq.w	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x666>
 8005066:	2601      	movs	r6, #1
 8005068:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800506a:	01d8      	lsls	r0, r3, #7
 800506c:	d557      	bpl.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    switch (PeriphClkInit->FmcClockSelection)
 800506e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005070:	2903      	cmp	r1, #3
 8005072:	f200 84c0 	bhi.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005076:	e8df f011 	tbh	[pc, r1, lsl #1]
 800507a:	004c      	.short	0x004c
 800507c:	03d80047 	.word	0x03d80047
 8005080:	004c      	.short	0x004c
    switch (PeriphClkInit->Sai4AClockSelection)
 8005082:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 8005086:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800508a:	f43f af43 	beq.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800508e:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8005092:	f43f af3f 	beq.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005096:	2601      	movs	r6, #1
 8005098:	4635      	mov	r5, r6
 800509a:	e741      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch (PeriphClkInit->Sai4BClockSelection)
 800509c:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 80050a0:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 80050a4:	f43f af53 	beq.w	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80050a8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80050ac:	f43f af4f 	beq.w	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80050b0:	2601      	movs	r6, #1
 80050b2:	4635      	mov	r5, r6
 80050b4:	e751      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xea>
    switch (PeriphClkInit->OspiClockSelection)
 80050b6:	2930      	cmp	r1, #48	; 0x30
 80050b8:	f43f af60 	beq.w	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80050bc:	2601      	movs	r6, #1
 80050be:	4635      	mov	r5, r6
 80050c0:	e768      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Spi123ClockSelection)
 80050c2:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80050c6:	f43f af7b 	beq.w	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80050ca:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80050ce:	f43f af77 	beq.w	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80050d2:	2601      	movs	r6, #1
 80050d4:	4635      	mov	r5, r6
 80050d6:	e779      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x15c>
    switch (PeriphClkInit->Spi45ClockSelection)
 80050d8:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 80050dc:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80050e0:	d087      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80050e2:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80050e6:	d084      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80050e8:	2601      	movs	r6, #1
 80050ea:	4635      	mov	r5, r6
 80050ec:	e78d      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch (PeriphClkInit->Spi6ClockSelection)
 80050ee:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80050f2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80050f6:	d09b      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80050f8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80050fc:	d098      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80050fe:	2601      	movs	r6, #1
 8005100:	4635      	mov	r5, r6
 8005102:	e7a2      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8005104:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005108:	4a34      	ldr	r2, [pc, #208]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800510a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800510c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005110:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005112:	2d00      	cmp	r5, #0
 8005114:	f000 8337 	beq.w	8005786 <HAL_RCCEx_PeriphCLKConfig+0x916>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005118:	462e      	mov	r6, r5
 800511a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800511e:	0259      	lsls	r1, r3, #9
 8005120:	f100 820f 	bmi.w	8005542 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005124:	07d9      	lsls	r1, r3, #31
 8005126:	d52f      	bpl.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x318>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005128:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800512a:	2928      	cmp	r1, #40	; 0x28
 800512c:	d82a      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800512e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005132:	01fb      	.short	0x01fb
 8005134:	00290029 	.word	0x00290029
 8005138:	00290029 	.word	0x00290029
 800513c:	00290029 	.word	0x00290029
 8005140:	01f50029 	.word	0x01f50029
 8005144:	00290029 	.word	0x00290029
 8005148:	00290029 	.word	0x00290029
 800514c:	00290029 	.word	0x00290029
 8005150:	04250029 	.word	0x04250029
 8005154:	00290029 	.word	0x00290029
 8005158:	00290029 	.word	0x00290029
 800515c:	00290029 	.word	0x00290029
 8005160:	01fb0029 	.word	0x01fb0029
 8005164:	00290029 	.word	0x00290029
 8005168:	00290029 	.word	0x00290029
 800516c:	00290029 	.word	0x00290029
 8005170:	01fb0029 	.word	0x01fb0029
 8005174:	00290029 	.word	0x00290029
 8005178:	00290029 	.word	0x00290029
 800517c:	00290029 	.word	0x00290029
 8005180:	01fb0029 	.word	0x01fb0029
 8005184:	2601      	movs	r6, #1
 8005186:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005188:	079f      	lsls	r7, r3, #30
 800518a:	d517      	bpl.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800518c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800518e:	2905      	cmp	r1, #5
 8005190:	f200 842d 	bhi.w	80059ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
 8005194:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005198:	0006000c 	.word	0x0006000c
 800519c:	000c03e8 	.word	0x000c03e8
 80051a0:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051a4:	2101      	movs	r1, #1
 80051a6:	f104 0008 	add.w	r0, r4, #8
 80051aa:	f7ff fd6d 	bl	8004c88 <RCCEx_PLL2_Config>
 80051ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	f000 82d2 	beq.w	800575a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051b6:	462e      	mov	r6, r5
 80051b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80051bc:	0758      	lsls	r0, r3, #29
 80051be:	d51b      	bpl.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80051c0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80051c4:	2905      	cmp	r1, #5
 80051c6:	f200 840f 	bhi.w	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80051ca:	e8df f011 	tbh	[pc, r1, lsl #1]
 80051ce:	000f      	.short	0x000f
 80051d0:	03c30009 	.word	0x03c30009
 80051d4:	000f000f 	.word	0x000f000f
 80051d8:	000f      	.short	0x000f
 80051da:	bf00      	nop
 80051dc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051e0:	2101      	movs	r1, #1
 80051e2:	f104 0008 	add.w	r0, r4, #8
 80051e6:	f7ff fd4f 	bl	8004c88 <RCCEx_PLL2_Config>
 80051ea:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80051ec:	2d00      	cmp	r5, #0
 80051ee:	f000 82a9 	beq.w	8005744 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051f2:	462e      	mov	r6, r5
 80051f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80051f8:	0699      	lsls	r1, r3, #26
 80051fa:	d51f      	bpl.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051fc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005200:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005204:	f000 834c 	beq.w	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005208:	f200 810d 	bhi.w	8005426 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 800520c:	b149      	cbz	r1, 8005222 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800520e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005212:	f040 8112 	bne.w	800543a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005216:	2100      	movs	r1, #0
 8005218:	f104 0008 	add.w	r0, r4, #8
 800521c:	f7ff fd34 	bl	8004c88 <RCCEx_PLL2_Config>
 8005220:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005222:	2d00      	cmp	r5, #0
 8005224:	f040 8286 	bne.w	8005734 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005228:	4ab1      	ldr	r2, [pc, #708]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 800522a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800522e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005230:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8005234:	430b      	orrs	r3, r1
 8005236:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005238:	e9d4 3200 	ldrd	r3, r2, [r4]
 800523c:	065f      	lsls	r7, r3, #25
 800523e:	d51f      	bpl.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005240:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8005244:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005248:	f000 8302 	beq.w	8005850 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800524c:	f200 80f8 	bhi.w	8005440 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005250:	b149      	cbz	r1, 8005266 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8005252:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005256:	f040 80fd 	bne.w	8005454 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800525a:	2100      	movs	r1, #0
 800525c:	f104 0008 	add.w	r0, r4, #8
 8005260:	f7ff fd12 	bl	8004c88 <RCCEx_PLL2_Config>
 8005264:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005266:	2d00      	cmp	r5, #0
 8005268:	f040 8281 	bne.w	800576e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800526c:	4aa0      	ldr	r2, [pc, #640]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 800526e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8005272:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005274:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005278:	430b      	orrs	r3, r1
 800527a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800527c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005280:	0618      	lsls	r0, r3, #24
 8005282:	d51f      	bpl.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005284:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005288:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800528c:	f000 82d6 	beq.w	800583c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005290:	f200 80e3 	bhi.w	800545a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8005294:	b149      	cbz	r1, 80052aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005296:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800529a:	f040 80e8 	bne.w	800546e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800529e:	2100      	movs	r1, #0
 80052a0:	f104 0008 	add.w	r0, r4, #8
 80052a4:	f7ff fcf0 	bl	8004c88 <RCCEx_PLL2_Config>
 80052a8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80052aa:	2d00      	cmp	r5, #0
 80052ac:	f040 823e 	bne.w	800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80052b0:	4a8f      	ldr	r2, [pc, #572]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80052b2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80052b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80052b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80052bc:	430b      	orrs	r3, r1
 80052be:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80052c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80052c4:	0719      	lsls	r1, r3, #28
 80052c6:	d50d      	bpl.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80052c8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80052cc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80052d0:	f000 82fc 	beq.w	80058cc <HAL_RCCEx_PeriphCLKConfig+0xa5c>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80052d4:	4986      	ldr	r1, [pc, #536]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80052d6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80052d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052dc:	4313      	orrs	r3, r2
 80052de:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80052e4:	06df      	lsls	r7, r3, #27
 80052e6:	d50d      	bpl.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x494>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80052e8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80052ec:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80052f0:	f000 82e0 	beq.w	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052f4:	497e      	ldr	r1, [pc, #504]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80052f6:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80052f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fc:	4313      	orrs	r3, r2
 80052fe:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005300:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005304:	0318      	lsls	r0, r3, #12
 8005306:	d50e      	bpl.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    switch (PeriphClkInit->AdcClockSelection)
 8005308:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800530c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005310:	f000 80c7 	beq.w	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8005314:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005318:	f000 80c9 	beq.w	80054ae <HAL_RCCEx_PeriphCLKConfig+0x63e>
 800531c:	2900      	cmp	r1, #0
 800531e:	f000 8267 	beq.w	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005322:	2601      	movs	r6, #1
 8005324:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005326:	0359      	lsls	r1, r3, #13
 8005328:	d50f      	bpl.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x4da>
    switch (PeriphClkInit->UsbClockSelection)
 800532a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800532e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005332:	f000 80df 	beq.w	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005336:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800533a:	f000 80e1 	beq.w	8005500 <HAL_RCCEx_PeriphCLKConfig+0x690>
 800533e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005342:	f000 825e 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x992>
 8005346:	2601      	movs	r6, #1
 8005348:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800534a:	03df      	lsls	r7, r3, #15
 800534c:	d509      	bpl.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->SdmmcClockSelection)
 800534e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005350:	2900      	cmp	r1, #0
 8005352:	f000 8237 	beq.w	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8005356:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800535a:	f000 81b8 	beq.w	80056ce <HAL_RCCEx_PeriphCLKConfig+0x85e>
 800535e:	2601      	movs	r6, #1
 8005360:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005362:	0098      	lsls	r0, r3, #2
 8005364:	f100 8171 	bmi.w	800564a <HAL_RCCEx_PeriphCLKConfig+0x7da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005368:	0399      	lsls	r1, r3, #14
 800536a:	d50b      	bpl.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch (PeriphClkInit->RngClockSelection)
 800536c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800536e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005372:	f000 821e 	beq.w	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x942>
 8005376:	d97d      	bls.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005378:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800537c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005380:	d07a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005382:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005384:	02df      	lsls	r7, r3, #11
 8005386:	d508      	bpl.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005388:	4a59      	ldr	r2, [pc, #356]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 800538a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800538c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800538e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005392:	430b      	orrs	r3, r1
 8005394:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005396:	e9d4 3200 	ldrd	r3, r2, [r4]
 800539a:	029d      	lsls	r5, r3, #10
 800539c:	d508      	bpl.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800539e:	4a54      	ldr	r2, [pc, #336]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80053a0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80053a2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80053a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053ac:	e9d4 3200 	ldrd	r3, r2, [r4]
 80053b0:	0058      	lsls	r0, r3, #1
 80053b2:	d50b      	bpl.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053b4:	4b4e      	ldr	r3, [pc, #312]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053bc:	611a      	str	r2, [r3, #16]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 80053c4:	430a      	orrs	r2, r1
 80053c6:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	da08      	bge.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053d0:	4a47      	ldr	r2, [pc, #284]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80053d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80053d4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80053d6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80053da:	430b      	orrs	r3, r1
 80053dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053de:	e9d4 3200 	ldrd	r3, r2, [r4]
 80053e2:	0219      	lsls	r1, r3, #8
 80053e4:	d508      	bpl.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053e6:	4a42      	ldr	r2, [pc, #264]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80053e8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80053ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80053ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80053f2:	430b      	orrs	r3, r1
 80053f4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80053f6:	6862      	ldr	r2, [r4, #4]
 80053f8:	07d3      	lsls	r3, r2, #31
 80053fa:	f100 8101 	bmi.w	8005600 <HAL_RCCEx_PeriphCLKConfig+0x790>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80053fe:	0797      	lsls	r7, r2, #30
 8005400:	f100 810b 	bmi.w	800561a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005404:	0755      	lsls	r5, r2, #29
 8005406:	f100 8115 	bmi.w	8005634 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800540a:	0710      	lsls	r0, r2, #28
 800540c:	f100 80ed 	bmi.w	80055ea <HAL_RCCEx_PeriphCLKConfig+0x77a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005410:	06d1      	lsls	r1, r2, #27
 8005412:	f100 80dc 	bmi.w	80055ce <HAL_RCCEx_PeriphCLKConfig+0x75e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005416:	0692      	lsls	r2, r2, #26
 8005418:	f100 8123 	bmi.w	8005662 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    return HAL_OK;
 800541c:	1e30      	subs	r0, r6, #0
 800541e:	bf18      	it	ne
 8005420:	2001      	movne	r0, #1
}
 8005422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005426:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800542a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800542e:	f43f aef8 	beq.w	8005222 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8005432:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8005436:	f43f aef4 	beq.w	8005222 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800543a:	2601      	movs	r6, #1
 800543c:	4635      	mov	r5, r6
 800543e:	e6fd      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005440:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8005444:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005448:	f43f af0d 	beq.w	8005266 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800544c:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8005450:	f43f af09 	beq.w	8005266 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8005454:	2601      	movs	r6, #1
 8005456:	4635      	mov	r5, r6
 8005458:	e712      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800545a:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800545e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005462:	f43f af22 	beq.w	80052aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8005466:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800546a:	f43f af1e 	beq.w	80052aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800546e:	2601      	movs	r6, #1
 8005470:	4635      	mov	r5, r6
 8005472:	e727      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    switch (PeriphClkInit->RngClockSelection)
 8005474:	2900      	cmp	r1, #0
 8005476:	d184      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x512>
    if (ret == HAL_OK)
 8005478:	2d00      	cmp	r5, #0
 800547a:	f040 8196 	bne.w	80057aa <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800547e:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 8005480:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005482:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005488:	430b      	orrs	r3, r1
 800548a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800548c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005490:	e778      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x514>
    switch (PeriphClkInit->Sai1ClockSelection)
 8005492:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005494:	2d00      	cmp	r5, #0
 8005496:	f000 80f0 	beq.w	800567a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800549a:	462e      	mov	r6, r5
 800549c:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054a0:	e521      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054a2:	2102      	movs	r1, #2
 80054a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80054a8:	f7ff fc68 	bl	8004d7c <RCCEx_PLL3_Config>
 80054ac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	f040 8134 	bne.w	800571c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054b4:	4a0e      	ldr	r2, [pc, #56]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80054b6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80054ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80054bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054c4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054c8:	e72d      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054ca:	2101      	movs	r1, #1
 80054cc:	f104 0008 	add.w	r0, r4, #8
 80054d0:	f7ff fbda 	bl	8004c88 <RCCEx_PLL2_Config>
 80054d4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	f040 8163 	bne.w	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054dc:	4a04      	ldr	r2, [pc, #16]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x680>)
 80054de:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80054e0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80054e2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80054e6:	430b      	orrs	r3, r1
 80054e8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054ee:	e5bc      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80054f0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054f4:	2101      	movs	r1, #1
 80054f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80054fa:	f7ff fc3f 	bl	8004d7c <RCCEx_PLL3_Config>
 80054fe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005500:	2d00      	cmp	r5, #0
 8005502:	f040 814a 	bne.w	800579a <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005506:	4ab8      	ldr	r2, [pc, #736]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005508:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800550c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800550e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005512:	430b      	orrs	r3, r1
 8005514:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005516:	e9d4 3200 	ldrd	r3, r2, [r4]
 800551a:	e716      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x4da>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800551c:	2101      	movs	r1, #1
 800551e:	f104 0008 	add.w	r0, r4, #8
 8005522:	f7ff fbb1 	bl	8004c88 <RCCEx_PLL2_Config>
 8005526:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005528:	2d00      	cmp	r5, #0
 800552a:	f040 8107 	bne.w	800573c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800552e:	4aae      	ldr	r2, [pc, #696]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005530:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005532:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005534:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005538:	430b      	orrs	r3, r1
 800553a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800553c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005540:	e622      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x318>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005542:	4faa      	ldr	r7, [pc, #680]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800554a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800554c:	f7fc f82c 	bl	80015a8 <HAL_GetTick>
 8005550:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005552:	e006      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005554:	f7fc f828 	bl	80015a8 <HAL_GetTick>
 8005558:	eba0 0008 	sub.w	r0, r0, r8
 800555c:	2864      	cmp	r0, #100	; 0x64
 800555e:	f200 8217 	bhi.w	8005990 <HAL_RCCEx_PeriphCLKConfig+0xb20>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	05db      	lsls	r3, r3, #23
 8005566:	d5f5      	bpl.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    if (ret == HAL_OK)
 8005568:	2d00      	cmp	r5, #0
 800556a:	f040 8235 	bne.w	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800556e:	4b9e      	ldr	r3, [pc, #632]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005570:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8005574:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005576:	4051      	eors	r1, r2
 8005578:	f411 7f40 	tst.w	r1, #768	; 0x300
 800557c:	d00d      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x72a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800557e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005580:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005582:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005586:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800558a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800558c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800558e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005592:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8005594:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005596:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800559a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800559e:	f000 81fd 	beq.w	800599c <HAL_RCCEx_PeriphCLKConfig+0xb2c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055a2:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80055a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055aa:	f000 820b 	beq.w	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xb54>
 80055ae:	4a8e      	ldr	r2, [pc, #568]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80055b0:	6913      	ldr	r3, [r2, #16]
 80055b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055b6:	6113      	str	r3, [r2, #16]
 80055b8:	4a8b      	ldr	r2, [pc, #556]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80055ba:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80055be:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80055c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80055c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80055cc:	e5aa      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055ce:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80055d2:	2101      	movs	r1, #1
 80055d4:	4628      	mov	r0, r5
 80055d6:	f7ff fbd1 	bl	8004d7c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80055da:	2800      	cmp	r0, #0
 80055dc:	f000 811a 	beq.w	8005814 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80055e0:	6863      	ldr	r3, [r4, #4]
 80055e2:	069b      	lsls	r3, r3, #26
 80055e4:	d546      	bpl.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x804>
 80055e6:	4606      	mov	r6, r0
 80055e8:	e03d      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055ea:	2100      	movs	r1, #0
 80055ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80055f0:	f7ff fbc4 	bl	8004d7c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80055f4:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80055f6:	2800      	cmp	r0, #0
 80055f8:	f43f af0a 	beq.w	8005410 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80055fc:	4606      	mov	r6, r0
 80055fe:	e707      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005600:	2100      	movs	r1, #0
 8005602:	f104 0008 	add.w	r0, r4, #8
 8005606:	f7ff fb3f 	bl	8004c88 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800560a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800560c:	2800      	cmp	r0, #0
 800560e:	f43f aef6 	beq.w	80053fe <HAL_RCCEx_PeriphCLKConfig+0x58e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005612:	0797      	lsls	r7, r2, #30
 8005614:	4606      	mov	r6, r0
 8005616:	f57f aef5 	bpl.w	8005404 <HAL_RCCEx_PeriphCLKConfig+0x594>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800561a:	2101      	movs	r1, #1
 800561c:	f104 0008 	add.w	r0, r4, #8
 8005620:	f7ff fb32 	bl	8004c88 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005624:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005626:	2800      	cmp	r0, #0
 8005628:	f43f aeec 	beq.w	8005404 <HAL_RCCEx_PeriphCLKConfig+0x594>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800562c:	0755      	lsls	r5, r2, #29
 800562e:	4606      	mov	r6, r0
 8005630:	f57f aeeb 	bpl.w	800540a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005634:	2102      	movs	r1, #2
 8005636:	f104 0008 	add.w	r0, r4, #8
 800563a:	f7ff fb25 	bl	8004c88 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800563e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005640:	2800      	cmp	r0, #0
 8005642:	f43f aee2 	beq.w	800540a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005646:	4606      	mov	r6, r0
 8005648:	e6df      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800564a:	2102      	movs	r1, #2
 800564c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005650:	f7ff fb94 	bl	8004d7c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005654:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005658:	2800      	cmp	r0, #0
 800565a:	f43f ae85 	beq.w	8005368 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
      status = HAL_ERROR;
 800565e:	2601      	movs	r6, #1
 8005660:	e682      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005662:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005666:	2102      	movs	r1, #2
 8005668:	4628      	mov	r0, r5
 800566a:	f7ff fb87 	bl	8004d7c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800566e:	2800      	cmp	r0, #0
 8005670:	f43f aed4 	beq.w	800541c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
  return HAL_ERROR;
 8005674:	2001      	movs	r0, #1
}
 8005676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800567a:	4a5b      	ldr	r2, [pc, #364]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800567c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800567e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005680:	f023 0307 	bic.w	r3, r3, #7
 8005684:	430b      	orrs	r3, r1
 8005686:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005688:	e9d4 3200 	ldrd	r3, r2, [r4]
 800568c:	e42b      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800568e:	4a56      	ldr	r2, [pc, #344]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005690:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005694:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005696:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800569a:	430b      	orrs	r3, r1
 800569c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800569e:	e9d4 3200 	ldrd	r3, r2, [r4]
 80056a2:	e43d      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80056a4:	4a50      	ldr	r2, [pc, #320]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80056a6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80056a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80056aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ae:	430b      	orrs	r3, r1
 80056b0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056b2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80056b6:	e489      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80056b8:	4a4b      	ldr	r2, [pc, #300]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80056ba:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80056be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80056c0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80056c4:	430b      	orrs	r3, r1
 80056c6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80056c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80056cc:	e445      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056ce:	2102      	movs	r1, #2
 80056d0:	f104 0008 	add.w	r0, r4, #8
 80056d4:	f7ff fad8 	bl	8004c88 <RCCEx_PLL2_Config>
 80056d8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80056da:	2d00      	cmp	r5, #0
 80056dc:	d079      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x962>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056de:	462e      	mov	r6, r5
 80056e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80056e4:	e63d      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e6:	4a40      	ldr	r2, [pc, #256]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80056e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80056ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ee:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056f0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80056f2:	f7ff bbda 	b.w	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f6:	4a3c      	ldr	r2, [pc, #240]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80056f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80056fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fe:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005700:	e425      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xde>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005702:	4a39      	ldr	r2, [pc, #228]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005704:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800570a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800570c:	e458      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800570e:	4a36      	ldr	r2, [pc, #216]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005710:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005716:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005718:	f7ff bbfc 	b.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800571c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005720:	462e      	mov	r6, r5
 8005722:	e600      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005724:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005728:	462e      	mov	r6, r5
 800572a:	e433      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800572c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005730:	462e      	mov	r6, r5
 8005732:	e5c7      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005734:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005738:	462e      	mov	r6, r5
 800573a:	e57f      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800573c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005740:	462e      	mov	r6, r5
 8005742:	e521      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005744:	4a28      	ldr	r2, [pc, #160]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005746:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800574a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800574c:	f023 0307 	bic.w	r3, r3, #7
 8005750:	430b      	orrs	r3, r1
 8005752:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005754:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005758:	e54e      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800575a:	4a23      	ldr	r2, [pc, #140]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 800575c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800575e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005760:	f023 0307 	bic.w	r3, r3, #7
 8005764:	430b      	orrs	r3, r1
 8005766:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005768:	e9d4 3200 	ldrd	r3, r2, [r4]
 800576c:	e526      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800576e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005772:	462e      	mov	r6, r5
 8005774:	e584      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x410>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005776:	e9d4 3200 	ldrd	r3, r2, [r4]
 800577a:	462e      	mov	r6, r5
 800577c:	e465      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800577e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005782:	462e      	mov	r6, r5
 8005784:	e441      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005786:	4a18      	ldr	r2, [pc, #96]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 8005788:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800578a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800578c:	f023 0303 	bic.w	r3, r3, #3
 8005790:	430b      	orrs	r3, r1
 8005792:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005794:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005798:	e4c1      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800579a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800579e:	462e      	mov	r6, r5
 80057a0:	e5d3      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x4da>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057a6:	462e      	mov	r6, r5
 80057a8:	e45f      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057aa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057ae:	462e      	mov	r6, r5
 80057b0:	e5e8      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x514>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b2:	4a0d      	ldr	r2, [pc, #52]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80057b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80057bc:	2d00      	cmp	r5, #0
 80057be:	f43f ae5e 	beq.w	800547e <HAL_RCCEx_PeriphCLKConfig+0x60e>
 80057c2:	e7f2      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x93a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c4:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80057c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80057c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80057ce:	2d00      	cmp	r5, #0
 80057d0:	d185      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x86e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057d2:	4a05      	ldr	r2, [pc, #20]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x978>)
 80057d4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80057d6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80057d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057dc:	430b      	orrs	r3, r1
 80057de:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057e4:	e5bd      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80057e6:	bf00      	nop
 80057e8:	58024400 	.word	0x58024400
 80057ec:	58024800 	.word	0x58024800
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057f0:	f104 0008 	add.w	r0, r4, #8
 80057f4:	f7ff fa48 	bl	8004c88 <RCCEx_PLL2_Config>
 80057f8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80057fa:	2d00      	cmp	r5, #0
 80057fc:	f43f ae5a 	beq.w	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x644>
 8005800:	e78c      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005802:	4a7f      	ldr	r2, [pc, #508]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 8005804:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800580a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800580c:	2d00      	cmp	r5, #0
 800580e:	f43f ae7a 	beq.w	8005506 <HAL_RCCEx_PeriphCLKConfig+0x696>
 8005812:	e7c2      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x92a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005814:	6862      	ldr	r2, [r4, #4]
 8005816:	e5fe      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005818:	4a79      	ldr	r2, [pc, #484]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 800581a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800581c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005820:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8005822:	2d00      	cmp	r5, #0
 8005824:	f43f ae5a 	beq.w	80054dc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005828:	e7bb      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x932>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800582a:	2102      	movs	r1, #2
 800582c:	f104 0008 	add.w	r0, r4, #8
 8005830:	f7ff fa2a 	bl	8004c88 <RCCEx_PLL2_Config>
 8005834:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005836:	2d00      	cmp	r5, #0
 8005838:	d0a5      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x916>
 800583a:	e46d      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800583c:	2102      	movs	r1, #2
 800583e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005842:	f7ff fa9b 	bl	8004d7c <RCCEx_PLL3_Config>
 8005846:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005848:	2d00      	cmp	r5, #0
 800584a:	f43f ad31 	beq.w	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800584e:	e76d      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005850:	2102      	movs	r1, #2
 8005852:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005856:	f7ff fa91 	bl	8004d7c <RCCEx_PLL3_Config>
 800585a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800585c:	2d00      	cmp	r5, #0
 800585e:	f43f ad05 	beq.w	800526c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005862:	e784      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005864:	2101      	movs	r1, #1
 8005866:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800586a:	f7ff fa87 	bl	8004d7c <RCCEx_PLL3_Config>
 800586e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005870:	2d00      	cmp	r5, #0
 8005872:	f43f abc1 	beq.w	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005876:	e782      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x90e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005878:	2101      	movs	r1, #1
 800587a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800587e:	f7ff fa7d 	bl	8004d7c <RCCEx_PLL3_Config>
 8005882:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005884:	2d00      	cmp	r5, #0
 8005886:	f43f abd6 	beq.w	8005036 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800588a:	e774      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x906>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800588c:	2102      	movs	r1, #2
 800588e:	f104 0008 	add.w	r0, r4, #8
 8005892:	f7ff f9f9 	bl	8004c88 <RCCEx_PLL2_Config>
 8005896:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005898:	2d00      	cmp	r5, #0
 800589a:	f43f ab72 	beq.w	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800589e:	e741      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058a0:	2102      	movs	r1, #2
 80058a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058a6:	f7ff fa69 	bl	8004d7c <RCCEx_PLL3_Config>
 80058aa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80058ac:	2d00      	cmp	r5, #0
 80058ae:	f43f acbb 	beq.w	8005228 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80058b2:	e73f      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058b4:	2102      	movs	r1, #2
 80058b6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058ba:	f7ff fa5f 	bl	8004d7c <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058be:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f43f ad16 	beq.w	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
        status = HAL_ERROR;
 80058c8:	2601      	movs	r6, #1
 80058ca:	e513      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058cc:	2102      	movs	r1, #2
 80058ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058d2:	f7ff fa53 	bl	8004d7c <RCCEx_PLL3_Config>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80058d6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058da:	2800      	cmp	r0, #0
 80058dc:	f43f acfa 	beq.w	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
        status = HAL_ERROR;
 80058e0:	2601      	movs	r6, #1
 80058e2:	e4f7      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058e4:	2102      	movs	r1, #2
 80058e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80058ea:	f7ff fa47 	bl	8004d7c <RCCEx_PLL3_Config>
 80058ee:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80058f0:	2e00      	cmp	r6, #0
 80058f2:	f43f aad9 	beq.w	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x38>
 80058f6:	f7ff badf 	b.w	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058fa:	4a41      	ldr	r2, [pc, #260]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
        break;
 80058fc:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005904:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8005906:	e5c5      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005908:	2100      	movs	r1, #0
 800590a:	f104 0008 	add.w	r0, r4, #8
 800590e:	f7ff f9bb 	bl	8004c88 <RCCEx_PLL2_Config>
 8005912:	4605      	mov	r5, r0
        break;
 8005914:	e5be      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005916:	2100      	movs	r1, #0
 8005918:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800591c:	f7ff fa2e 	bl	8004d7c <RCCEx_PLL3_Config>
 8005920:	4605      	mov	r5, r0
        break;
 8005922:	e5b7      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005924:	2100      	movs	r1, #0
 8005926:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800592a:	f7ff fa27 	bl	8004d7c <RCCEx_PLL3_Config>
 800592e:	4605      	mov	r5, r0
        break;
 8005930:	f7ff bb0d 	b.w	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xde>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005934:	2100      	movs	r1, #0
 8005936:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800593a:	f7ff fa1f 	bl	8004d7c <RCCEx_PLL3_Config>
 800593e:	4605      	mov	r5, r0
        break;
 8005940:	f7ff bb3e 	b.w	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005944:	2100      	movs	r1, #0
 8005946:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800594a:	f7ff fa17 	bl	8004d7c <RCCEx_PLL3_Config>
 800594e:	4605      	mov	r5, r0
        break;
 8005950:	f7ff bae0 	b.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005954:	2101      	movs	r1, #1
 8005956:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800595a:	f7ff fa0f 	bl	8004d7c <RCCEx_PLL3_Config>
 800595e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005960:	2d00      	cmp	r5, #0
 8005962:	f43f aeef 	beq.w	8005744 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8005966:	e444      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005968:	2101      	movs	r1, #1
 800596a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800596e:	f7ff fa05 	bl	8004d7c <RCCEx_PLL3_Config>
 8005972:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005974:	2d00      	cmp	r5, #0
 8005976:	f43f aef0 	beq.w	800575a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800597a:	e41c      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x346>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800597c:	2101      	movs	r1, #1
 800597e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005982:	f7ff f9fb 	bl	8004d7c <RCCEx_PLL3_Config>
 8005986:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005988:	2d00      	cmp	r5, #0
 800598a:	f43f add0 	beq.w	800552e <HAL_RCCEx_PeriphCLKConfig+0x6be>
 800598e:	e6d5      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
        status = ret;
 8005990:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005992:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005996:	4635      	mov	r5, r6
 8005998:	f7ff bbc4 	b.w	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        tickstart = HAL_GetTick();
 800599c:	f7fb fe04 	bl	80015a8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059a0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8005a00 <HAL_RCCEx_PeriphCLKConfig+0xb90>
        tickstart = HAL_GetTick();
 80059a4:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a6:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059aa:	e004      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ac:	f7fb fdfc 	bl	80015a8 <HAL_GetTick>
 80059b0:	1bc0      	subs	r0, r0, r7
 80059b2:	4548      	cmp	r0, r9
 80059b4:	d8ec      	bhi.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xb20>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059b6:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80059ba:	0798      	lsls	r0, r3, #30
 80059bc:	d5f6      	bpl.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xb3c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059be:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80059c2:	e5ee      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x732>
 80059c4:	490e      	ldr	r1, [pc, #56]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xb90>)
 80059c6:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0xb94>)
 80059c8:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 80059cc:	690a      	ldr	r2, [r1, #16]
 80059ce:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80059d2:	4313      	orrs	r3, r2
 80059d4:	610b      	str	r3, [r1, #16]
 80059d6:	e5ef      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80059dc:	462e      	mov	r6, r5
 80059de:	f7ff bba1 	b.w	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Sai1ClockSelection)
 80059e2:	2601      	movs	r6, #1
 80059e4:	f7ff ba7e 	b.w	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80059e8:	2601      	movs	r6, #1
 80059ea:	4635      	mov	r5, r6
 80059ec:	e404      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80059ee:	2601      	movs	r6, #1
 80059f0:	4635      	mov	r5, r6
 80059f2:	f7ff bbe3 	b.w	80051bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
    switch (PeriphClkInit->FmcClockSelection)
 80059f6:	2601      	movs	r6, #1
 80059f8:	4635      	mov	r5, r6
 80059fa:	f7ff bb90 	b.w	800511e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80059fe:	bf00      	nop
 8005a00:	58024400 	.word	0x58024400
 8005a04:	00ffffcf 	.word	0x00ffffcf

08005a08 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a08:	4a50      	ldr	r2, [pc, #320]	; (8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 8005a0a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a0e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a10:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8005a12:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a16:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a1a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8005a1c:	d05d      	beq.n	8005ada <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a1e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a22:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a26:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a2a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005a2e:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a30:	ee07 4a90 	vmov	s15, r4
 8005a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005a38:	d003      	beq.n	8005a42 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8005a3a:	2902      	cmp	r1, #2
 8005a3c:	d078      	beq.n	8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 8005a3e:	2900      	cmp	r1, #0
 8005a40:	d050      	beq.n	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8005a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a4e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005a50:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8005a54:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8005b54 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8005a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a68:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005a6c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005a70:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a74:	4a35      	ldr	r2, [pc, #212]	; (8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8005a76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005a7a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005a7c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8005a88:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a8a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a92:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005a96:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005a9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005a9c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005aa0:	ee07 3a90 	vmov	s15, r3
 8005aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aa8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005ab4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ab8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005aba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005abe:	ee07 3a10 	vmov	s14, r3
 8005ac2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ac6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad2:	ee17 3a90 	vmov	r3, s15
 8005ad6:	6083      	str	r3, [r0, #8]
}
 8005ad8:	4770      	bx	lr
 8005ada:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005adc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ae0:	6083      	str	r3, [r0, #8]
}
 8005ae2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae4:	6811      	ldr	r1, [r2, #0]
 8005ae6:	0689      	lsls	r1, r1, #26
 8005ae8:	d529      	bpl.n	8005b3e <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aea:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aec:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005af0:	4919      	ldr	r1, [pc, #100]	; (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005af6:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005af8:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b00:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005b54 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8005b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b08:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b0a:	ee06 3a10 	vmov	s12, r3
 8005b0e:	ee05 1a90 	vmov	s11, r1
 8005b12:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005b16:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005b1a:	ee36 6a26 	vadd.f32	s12, s12, s13
 8005b1e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8005b22:	eef0 7a46 	vmov.f32	s15, s12
 8005b26:	eee7 7a05 	vfma.f32	s15, s14, s10
 8005b2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b2e:	e7a1      	b.n	8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b30:	ee07 3a90 	vmov	s15, r3
 8005b34:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8005b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b3c:	e787      	b.n	8005a4e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8005b60 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 8005b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b4a:	e780      	b.n	8005a4e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	4a742400 	.word	0x4a742400
 8005b54:	39000000 	.word	0x39000000
 8005b58:	03d09000 	.word	0x03d09000
 8005b5c:	4bbebc20 	.word	0x4bbebc20
 8005b60:	4c742400 	.word	0x4c742400

08005b64 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b64:	4a50      	ldr	r2, [pc, #320]	; (8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 8005b66:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b68:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b6a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b6c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8005b6e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b72:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b76:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8005b78:	d05d      	beq.n	8005c36 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b7a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b7e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b82:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b86:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005b8a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b8c:	ee07 4a90 	vmov	s15, r4
 8005b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005b94:	d003      	beq.n	8005b9e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8005b96:	2902      	cmp	r1, #2
 8005b98:	d078      	beq.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 8005b9a:	2900      	cmp	r1, #0
 8005b9c:	d050      	beq.n	8005c40 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8005cac <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8005ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005baa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005bac:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8005bb0:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8005cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bc4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005bc8:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005bcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005bd0:	4a35      	ldr	r2, [pc, #212]	; (8005ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 8005bd2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005bd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005bd8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005bdc:	ee07 3a90 	vmov	s15, r3
 8005be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8005be4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005be6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bee:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005bf2:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005bf6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005bf8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005bfc:	ee07 3a90 	vmov	s15, r3
 8005c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c04:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005c08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005c10:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c14:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005c16:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005c1a:	ee07 3a10 	vmov	s14, r3
 8005c1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005c22:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c2e:	ee17 3a90 	vmov	r3, s15
 8005c32:	6083      	str	r3, [r0, #8]
}
 8005c34:	4770      	bx	lr
 8005c36:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c38:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c3c:	6083      	str	r3, [r0, #8]
}
 8005c3e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c40:	6811      	ldr	r1, [r2, #0]
 8005c42:	0689      	lsls	r1, r1, #26
 8005c44:	d529      	bpl.n	8005c9a <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c46:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c48:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c4c:	4919      	ldr	r1, [pc, #100]	; (8005cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c52:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c54:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c5c:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8005cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c64:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c66:	ee06 3a10 	vmov	s12, r3
 8005c6a:	ee05 1a90 	vmov	s11, r1
 8005c6e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005c72:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005c76:	ee36 6a26 	vadd.f32	s12, s12, s13
 8005c7a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8005c7e:	eef0 7a46 	vmov.f32	s15, s12
 8005c82:	eee7 7a05 	vfma.f32	s15, s14, s10
 8005c86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c8a:	e7a1      	b.n	8005bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8005cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8005c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c98:	e787      	b.n	8005baa <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8005cbc <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 8005ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ca6:	e780      	b.n	8005baa <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8005ca8:	58024400 	.word	0x58024400
 8005cac:	4a742400 	.word	0x4a742400
 8005cb0:	39000000 	.word	0x39000000
 8005cb4:	03d09000 	.word	0x03d09000
 8005cb8:	4bbebc20 	.word	0x4bbebc20
 8005cbc:	4c742400 	.word	0x4c742400

08005cc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cc0:	4a51      	ldr	r2, [pc, #324]	; (8005e08 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 8005cc2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cc4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005cc6:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005cc8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 8005cca:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005cce:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cd2:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8005cd4:	d05e      	beq.n	8005d94 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cd6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005cda:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cde:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005ce2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8005ce6:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005ce8:	ee07 4a90 	vmov	s15, r4
 8005cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8005cf0:	f000 8082 	beq.w	8005df8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 8005cf4:	2902      	cmp	r1, #2
 8005cf6:	d078      	beq.n	8005dea <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	d050      	beq.n	8005d9e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cfc:	ee07 3a90 	vmov	s15, r3
 8005d00:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8005e0c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8005d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d08:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d0a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8005d0e:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8005e10 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8005d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d22:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005d26:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005d2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005d2e:	4a36      	ldr	r2, [pc, #216]	; (8005e08 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 8005d30:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005d34:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d36:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8005d42:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005d44:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005d48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005d50:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005d54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d56:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d62:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005d6e:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005d72:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005d74:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005d78:	ee07 3a10 	vmov	s14, r3
 8005d7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d80:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d8c:	ee17 3a90 	vmov	r3, s15
 8005d90:	6083      	str	r3, [r0, #8]
}
 8005d92:	4770      	bx	lr
 8005d94:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d96:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005d9a:	6083      	str	r3, [r0, #8]
}
 8005d9c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d9e:	6811      	ldr	r1, [r2, #0]
 8005da0:	0689      	lsls	r1, r1, #26
 8005da2:	d5ab      	bpl.n	8005cfc <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005da4:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005da6:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005daa:	491a      	ldr	r1, [pc, #104]	; (8005e14 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005db0:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005db2:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dba:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8005e10 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8005dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dc2:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc4:	ee06 3a10 	vmov	s12, r3
 8005dc8:	ee05 1a90 	vmov	s11, r1
 8005dcc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005dd0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005dd4:	ee36 6a26 	vadd.f32	s12, s12, s13
 8005dd8:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8005ddc:	eef0 7a46 	vmov.f32	s15, s12
 8005de0:	eee7 7a05 	vfma.f32	s15, s14, s10
 8005de4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005de8:	e7a1      	b.n	8005d2e <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8005e18 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 8005df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df6:	e787      	b.n	8005d08 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8005e1c <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 8005e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e04:	e780      	b.n	8005d08 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 8005e06:	bf00      	nop
 8005e08:	58024400 	.word	0x58024400
 8005e0c:	4c742400 	.word	0x4c742400
 8005e10:	39000000 	.word	0x39000000
 8005e14:	03d09000 	.word	0x03d09000
 8005e18:	4bbebc20 	.word	0x4bbebc20
 8005e1c:	4a742400 	.word	0x4a742400

08005e20 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e20:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8005e24:	430b      	orrs	r3, r1
{
 8005e26:	b500      	push	{lr}
 8005e28:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e2a:	d075      	beq.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005e2c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8005e30:	430b      	orrs	r3, r1
 8005e32:	d034      	beq.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005e34:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	f000 80ca 	beq.w	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005e3e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8005e42:	430b      	orrs	r3, r1
 8005e44:	d07c      	beq.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005e46:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	f000 80d7 	beq.w	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e50:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8005e54:	430b      	orrs	r3, r1
 8005e56:	f000 8130 	beq.w	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e5a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	f000 8144 	beq.w	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e64:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	f000 8107 	beq.w	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005e6e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8005e72:	4308      	orrs	r0, r1
 8005e74:	d13a      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005e76:	4b98      	ldr	r3, [pc, #608]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8005e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e82:	f000 8083 	beq.w	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e8a:	f000 815f 	beq.w	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8005e8e:	bb6b      	cbnz	r3, 8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e90:	4b91      	ldr	r3, [pc, #580]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8005e98:	d03b      	beq.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          frequency = HSE_VALUE;
 8005e9a:	4890      	ldr	r0, [pc, #576]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e9c:	e039      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005e9e:	4a8e      	ldr	r2, [pc, #568]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ea0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005ea2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8005ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eaa:	f000 808d 	beq.w	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005eae:	d921      	bls.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8005eb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005eb4:	d02c      	beq.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005eb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005eba:	d117      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ebc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ebe:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ec0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ec4:	0749      	lsls	r1, r1, #29
 8005ec6:	d502      	bpl.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 80ca 	beq.w	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ece:	4a82      	ldr	r2, [pc, #520]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ed0:	6812      	ldr	r2, [r2, #0]
 8005ed2:	05d0      	lsls	r0, r2, #23
 8005ed4:	d503      	bpl.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8005ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eda:	f000 80cd 	beq.w	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ede:	4a7e      	ldr	r2, [pc, #504]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	0391      	lsls	r1, r2, #14
 8005ee4:	d502      	bpl.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eea:	d0d6      	beq.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    switch (srcclk)
 8005eec:	2000      	movs	r0, #0
}
 8005eee:	b005      	add	sp, #20
 8005ef0:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d040      	beq.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005efc:	d1f6      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005efe:	6810      	ldr	r0, [r2, #0]
 8005f00:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005f04:	d005      	beq.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f06:	a801      	add	r0, sp, #4
 8005f08:	f7ff fd7e 	bl	8005a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f0c:	9801      	ldr	r0, [sp, #4]
 8005f0e:	e000      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f10:	4873      	ldr	r0, [pc, #460]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8005f12:	b005      	add	sp, #20
 8005f14:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005f18:	4b6f      	ldr	r3, [pc, #444]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1c:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d8e3      	bhi.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f8d 	.word	0x08005f8d
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005fa9 	.word	0x08005fa9
 8005f38:	08005f11 	.word	0x08005f11
 8005f3c:	08005fa5 	.word	0x08005fa5
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005f40:	4a65      	ldr	r2, [pc, #404]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f42:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f44:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8005f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4c:	d03c      	beq.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005f4e:	d935      	bls.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8005f50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f54:	d0dc      	beq.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005f56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f5a:	d1c7      	bne.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f5c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f5e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f64:	0752      	lsls	r2, r2, #29
 8005f66:	d5b2      	bpl.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1b0      	bne.n	8005ece <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f6c:	4b5a      	ldr	r3, [pc, #360]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f6e:	485d      	ldr	r0, [pc, #372]	; (80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f76:	40d8      	lsrs	r0, r3
 8005f78:	e7cb      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f7a:	6810      	ldr	r0, [r2, #0]
 8005f7c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005f80:	d0c7      	beq.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f82:	a801      	add	r0, sp, #4
 8005f84:	f7ff fe9c 	bl	8005cc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f88:	9802      	ldr	r0, [sp, #8]
 8005f8a:	e7c2      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f8c:	4b52      	ldr	r3, [pc, #328]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8005f94:	d0bd      	beq.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005f96:	e7f4      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f98:	4b4f      	ldr	r3, [pc, #316]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8005fa0:	d0b7      	beq.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005fa2:	e7b0      	b.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fa4:	4a4c      	ldr	r2, [pc, #304]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005fa6:	e789      	b.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fa8:	4b4b      	ldr	r3, [pc, #300]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005fb0:	d0af      	beq.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fb2:	a801      	add	r0, sp, #4
 8005fb4:	f7ff fdd6 	bl	8005b64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005fb8:	9801      	ldr	r0, [sp, #4]
 8005fba:	e7aa      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    switch (srcclk)
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0dc      	beq.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc4:	d09b      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005fc6:	e791      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fc8:	6810      	ldr	r0, [r2, #0]
 8005fca:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8005fce:	d0a0      	beq.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005fd0:	e7ef      	b.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005fd2:	4a41      	ldr	r2, [pc, #260]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005fd4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005fd6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8005fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fde:	d0f3      	beq.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8005fe0:	d805      	bhi.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0c9      	beq.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005fe6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fea:	d088      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 8005fec:	e77e      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8005fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ff2:	d08d      	beq.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8005ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ff8:	f43f af60 	beq.w	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8005ffc:	e776      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005ffe:	4a36      	ldr	r2, [pc, #216]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006000:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006002:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8006006:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800600a:	d025      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800600c:	d80f      	bhi.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800600e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006012:	d048      	beq.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8006014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006018:	d116      	bne.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800601a:	6810      	ldr	r0, [r2, #0]
 800601c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8006020:	f43f af77 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006024:	a801      	add	r0, sp, #4
 8006026:	f7ff fd9d 	bl	8005b64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800602a:	9802      	ldr	r0, [sp, #8]
 800602c:	e771      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    switch (srcclk)
 800602e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006032:	d01c      	beq.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
 8006034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006038:	f47f af58 	bne.w	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800603c:	6810      	ldr	r0, [r2, #0]
 800603e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006042:	f43f af66 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006046:	e728      	b.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    switch (srcclk)
 8006048:	2b00      	cmp	r3, #0
 800604a:	f47f af4f 	bne.w	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
}
 800604e:	b005      	add	sp, #20
 8006050:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8006054:	f7fe bdd0 	b.w	8004bf8 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006058:	6810      	ldr	r0, [r2, #0]
 800605a:	f010 0004 	ands.w	r0, r0, #4
 800605e:	f43f af58 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006062:	6813      	ldr	r3, [r2, #0]
 8006064:	481f      	ldr	r0, [pc, #124]	; (80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8006066:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800606a:	40d8      	lsrs	r0, r3
 800606c:	e751      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800606e:	6810      	ldr	r0, [r2, #0]
 8006070:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8006074:	f43f af4d 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          frequency = CSI_VALUE;
 8006078:	481b      	ldr	r0, [pc, #108]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800607a:	e74a      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800607c:	4a16      	ldr	r2, [pc, #88]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800607e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006080:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8006084:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006088:	d067      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800608a:	d83e      	bhi.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800608c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006090:	d05c      	beq.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006096:	d140      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80060a0:	f43f af37 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80060a4:	e7be      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060a6:	6810      	ldr	r0, [r2, #0]
 80060a8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80060ac:	f43f af31 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060b0:	a801      	add	r0, sp, #4
 80060b2:	f7ff fca9 	bl	8005a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060b6:	9802      	ldr	r0, [sp, #8]
 80060b8:	e72b      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80060ba:	4a07      	ldr	r2, [pc, #28]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80060bc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80060be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 80060c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c6:	d037      	beq.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80060c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060cc:	f43f af46 	beq.w	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f47f af0b 	bne.w	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80060d6:	e712      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 80060d8:	58024400 	.word	0x58024400
 80060dc:	017d7840 	.word	0x017d7840
 80060e0:	00bb8000 	.word	0x00bb8000
 80060e4:	03d09000 	.word	0x03d09000
 80060e8:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80060ec:	4b21      	ldr	r3, [pc, #132]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80060ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 80060f0:	03d2      	lsls	r2, r2, #15
 80060f2:	f57f af4c 	bpl.w	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80060fc:	f43f af09 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006100:	a801      	add	r0, sp, #4
 8006102:	f7ff fc81 	bl	8005a08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006106:	9803      	ldr	r0, [sp, #12]
 8006108:	e703      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
    switch (srcclk)
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d02a      	beq.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8006110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006114:	f43f aebc 	beq.w	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
 8006118:	e6e8      	b.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800611a:	2b00      	cmp	r3, #0
 800611c:	f47f aee6 	bne.w	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006120:	f7fe fd2a 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8006124:	4b13      	ldr	r3, [pc, #76]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006126:	4a14      	ldr	r2, [pc, #80]	; (8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800612e:	5cd3      	ldrb	r3, [r2, r3]
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	40d8      	lsrs	r0, r3
        break;
 8006136:	e6ec      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006138:	6810      	ldr	r0, [r2, #0]
 800613a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800613e:	f43f aee8 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006142:	a801      	add	r0, sp, #4
 8006144:	f7ff fd0e 	bl	8005b64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006148:	9803      	ldr	r0, [sp, #12]
 800614a:	e6e2      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800614c:	4b09      	ldr	r3, [pc, #36]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8006154:	f43f aedd 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006158:	e7aa      	b.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800615a:	6810      	ldr	r0, [r2, #0]
 800615c:	f010 0004 	ands.w	r0, r0, #4
 8006160:	f43f aed7 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006164:	e702      	b.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006166:	4b03      	ldr	r3, [pc, #12]	; (8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800616e:	f43f aed0 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006172:	e781      	b.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006174:	58024400 	.word	0x58024400
 8006178:	080085a8 	.word	0x080085a8

0800617c <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800617c:	2800      	cmp	r0, #0
 800617e:	d063      	beq.n	8006248 <HAL_RNG_Init+0xcc>
{
 8006180:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006182:	7a43      	ldrb	r3, [r0, #9]
 8006184:	4604      	mov	r4, r0
 8006186:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800618a:	2b00      	cmp	r3, #0
 800618c:	d052      	beq.n	8006234 <HAL_RNG_Init+0xb8>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800618e:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8006190:	2202      	movs	r2, #2

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8006192:	4b2e      	ldr	r3, [pc, #184]	; (800624c <HAL_RNG_Init+0xd0>)
  hrng->State = HAL_RNG_STATE_BUSY;
 8006194:	7262      	strb	r2, [r4, #9]
  __HAL_RNG_DISABLE(hrng);
 8006196:	680a      	ldr	r2, [r1, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8006198:	482d      	ldr	r0, [pc, #180]	; (8006250 <HAL_RNG_Init+0xd4>)
  __HAL_RNG_DISABLE(hrng);
 800619a:	f022 0204 	bic.w	r2, r2, #4
 800619e:	600a      	str	r2, [r1, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 80061a0:	e9d4 2100 	ldrd	r2, r1, [r4]
 80061a4:	6815      	ldr	r5, [r2, #0]
 80061a6:	402b      	ands	r3, r5
 80061a8:	430b      	orrs	r3, r1
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 80061aa:	f247 2174 	movw	r1, #29300	; 0x7274
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 80061ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061b2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	6118      	str	r0, [r3, #16]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	6119      	str	r1, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	6813      	ldr	r3, [r2, #0]
 80061c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061c6:	f7fb f9ef 	bl	80015a8 <HAL_GetTick>

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80061ca:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80061cc:	4605      	mov	r5, r0
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	0051      	lsls	r1, r2, #1
 80061d2:	d50d      	bpl.n	80061f0 <HAL_RNG_Init+0x74>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80061d4:	f7fb f9e8 	bl	80015a8 <HAL_GetTick>
 80061d8:	1b40      	subs	r0, r0, r5
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80061da:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80061dc:	2802      	cmp	r0, #2
 80061de:	d9f6      	bls.n	80061ce <HAL_RNG_Init+0x52>
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	0052      	lsls	r2, r2, #1
 80061e4:	d5f3      	bpl.n	80061ce <HAL_RNG_Init+0x52>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80061e6:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80061e8:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 80061ea:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80061ec:	60e3      	str	r3, [r4, #12]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_RNG_ENABLE(hrng);
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	f042 0204 	orr.w	r2, r2, #4
 80061f6:	601a      	str	r2, [r3, #0]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	0658      	lsls	r0, r3, #25
 80061fe:	d503      	bpl.n	8006208 <HAL_RNG_Init+0x8c>
    hrng->State = HAL_RNG_STATE_ERROR;
 8006200:	2304      	movs	r3, #4
    return HAL_ERROR;
 8006202:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8006204:	7263      	strb	r3, [r4, #9]
}
 8006206:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8006208:	f7fb f9ce 	bl	80015a8 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800620c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800620e:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	0759      	lsls	r1, r3, #29
 8006214:	d512      	bpl.n	800623c <HAL_RNG_Init+0xc0>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006216:	f7fb f9c7 	bl	80015a8 <HAL_GetTick>
 800621a:	1b40      	subs	r0, r0, r5
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800621c:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800621e:	2802      	cmp	r0, #2
 8006220:	d9f6      	bls.n	8006210 <HAL_RNG_Init+0x94>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	0752      	lsls	r2, r2, #29
 8006226:	d5f3      	bpl.n	8006210 <HAL_RNG_Init+0x94>
        hrng->State = HAL_RNG_STATE_ERROR;
 8006228:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800622a:	2302      	movs	r3, #2
        return HAL_ERROR;
 800622c:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 800622e:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006230:	60e3      	str	r3, [r4, #12]
}
 8006232:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8006234:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8006236:	f7fa ff09 	bl	800104c <HAL_RNG_MspInit>
 800623a:	e7a8      	b.n	800618e <HAL_RNG_Init+0x12>
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800623c:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 800623e:	2201      	movs	r2, #1
  return HAL_OK;
 8006240:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8006242:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006244:	60e3      	str	r3, [r4, #12]
}
 8006246:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006248:	2001      	movs	r0, #1
}
 800624a:	4770      	bx	lr
 800624c:	bfffffdf 	.word	0xbfffffdf
 8006250:	17590abc 	.word	0x17590abc

08006254 <HAL_RNG_ErrorCallback>:
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop

08006258 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 8006258:	b510      	push	{r4, lr}
  __IO uint32_t count = 0U;
 800625a:	2300      	movs	r3, #0
{
 800625c:	b082      	sub	sp, #8
 800625e:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8006260:	9301      	str	r3, [sp, #4]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8006262:	6803      	ldr	r3, [r0, #0]
 8006264:	6859      	ldr	r1, [r3, #4]
 8006266:	074c      	lsls	r4, r1, #29
 8006268:	d40a      	bmi.n	8006280 <RNG_RecoverSeedError+0x28>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800626a:	6859      	ldr	r1, [r3, #4]
 800626c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006270:	6059      	str	r1, [r3, #4]
        return HAL_ERROR;
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8006272:	68d3      	ldr	r3, [r2, #12]
  return HAL_OK;
 8006274:	2000      	movs	r0, #0
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8006276:	f023 0308 	bic.w	r3, r3, #8
 800627a:	60d3      	str	r3, [r2, #12]
}
 800627c:	b002      	add	sp, #8
 800627e:	bd10      	pop	{r4, pc}
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8006280:	6819      	ldr	r1, [r3, #0]
    count = RNG_TIMEOUT_VALUE;
 8006282:	2002      	movs	r0, #2
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8006284:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006288:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800628a:	6811      	ldr	r1, [r2, #0]
 800628c:	680b      	ldr	r3, [r1, #0]
 800628e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006292:	600b      	str	r3, [r1, #0]
    count = RNG_TIMEOUT_VALUE;
 8006294:	9001      	str	r0, [sp, #4]
 8006296:	e003      	b.n	80062a0 <RNG_RecoverSeedError+0x48>
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 8006298:	6813      	ldr	r3, [r2, #0]
 800629a:	6819      	ldr	r1, [r3, #0]
 800629c:	0048      	lsls	r0, r1, #1
 800629e:	d512      	bpl.n	80062c6 <RNG_RecoverSeedError+0x6e>
      count-- ;
 80062a0:	9b01      	ldr	r3, [sp, #4]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f5      	bne.n	8006298 <RNG_RecoverSeedError+0x40>
        hrng->State = HAL_RNG_STATE_READY;
 80062ac:	2401      	movs	r4, #1
        __HAL_UNLOCK(hrng);
 80062ae:	7213      	strb	r3, [r2, #8]
        HAL_RNG_ErrorCallback(hrng);
 80062b0:	4610      	mov	r0, r2
        hrng->State = HAL_RNG_STATE_READY;
 80062b2:	7254      	strb	r4, [r2, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 80062b4:	68d3      	ldr	r3, [r2, #12]
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	60d3      	str	r3, [r2, #12]
        HAL_RNG_ErrorCallback(hrng);
 80062bc:	f7ff ffca 	bl	8006254 <HAL_RNG_ErrorCallback>
        return HAL_ERROR;
 80062c0:	4620      	mov	r0, r4
}
 80062c2:	b002      	add	sp, #8
 80062c4:	bd10      	pop	{r4, pc}
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80062c6:	6859      	ldr	r1, [r3, #4]
 80062c8:	0649      	lsls	r1, r1, #25
 80062ca:	d40d      	bmi.n	80062e8 <RNG_RecoverSeedError+0x90>
    count = RNG_TIMEOUT_VALUE;
 80062cc:	2302      	movs	r3, #2
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	e003      	b.n	80062da <RNG_RecoverSeedError+0x82>
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 80062d2:	6813      	ldr	r3, [r2, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	075b      	lsls	r3, r3, #29
 80062d8:	d5cb      	bpl.n	8006272 <RNG_RecoverSeedError+0x1a>
      count-- ;
 80062da:	9b01      	ldr	r3, [sp, #4]
 80062dc:	3b01      	subs	r3, #1
 80062de:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f5      	bne.n	80062d2 <RNG_RecoverSeedError+0x7a>
 80062e6:	e7e1      	b.n	80062ac <RNG_RecoverSeedError+0x54>
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80062e8:	6859      	ldr	r1, [r3, #4]
 80062ea:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80062ee:	6059      	str	r1, [r3, #4]
 80062f0:	e7ec      	b.n	80062cc <RNG_RecoverSeedError+0x74>
 80062f2:	bf00      	nop

080062f4 <HAL_RNG_GenerateRandomNumber>:
{
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrng);
 80062f6:	7a03      	ldrb	r3, [r0, #8]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d041      	beq.n	8006380 <HAL_RNG_GenerateRandomNumber+0x8c>
 80062fc:	2501      	movs	r5, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 80062fe:	7a43      	ldrb	r3, [r0, #9]
 8006300:	4604      	mov	r4, r0
 8006302:	42ab      	cmp	r3, r5
  __HAL_LOCK(hrng);
 8006304:	7205      	strb	r5, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8006306:	d005      	beq.n	8006314 <HAL_RNG_GenerateRandomNumber+0x20>
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006308:	2304      	movs	r3, #4
 800630a:	60c3      	str	r3, [r0, #12]
  __HAL_UNLOCK(hrng);
 800630c:	2300      	movs	r3, #0
 800630e:	7223      	strb	r3, [r4, #8]
}
 8006310:	4628      	mov	r0, r5
 8006312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8006314:	2202      	movs	r2, #2
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006316:	6803      	ldr	r3, [r0, #0]
 8006318:	460f      	mov	r7, r1
    hrng->State = HAL_RNG_STATE_BUSY;
 800631a:	7242      	strb	r2, [r0, #9]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800631c:	685d      	ldr	r5, [r3, #4]
 800631e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8006322:	d116      	bne.n	8006352 <HAL_RNG_GenerateRandomNumber+0x5e>
    tickstart = HAL_GetTick();
 8006324:	f7fb f940 	bl	80015a8 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006328:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800632a:	4606      	mov	r6, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	07d0      	lsls	r0, r2, #31
 8006330:	d417      	bmi.n	8006362 <HAL_RNG_GenerateRandomNumber+0x6e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006332:	f7fb f939 	bl	80015a8 <HAL_GetTick>
 8006336:	1b83      	subs	r3, r0, r6
 8006338:	2b02      	cmp	r3, #2
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800633a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800633c:	d9f6      	bls.n	800632c <HAL_RNG_GenerateRandomNumber+0x38>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	f012 0201 	ands.w	r2, r2, #1
 8006344:	d1f2      	bne.n	800632c <HAL_RNG_GenerateRandomNumber+0x38>
          hrng->State = HAL_RNG_STATE_READY;
 8006346:	2501      	movs	r5, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006348:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 800634a:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 800634c:	7265      	strb	r5, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800634e:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 8006350:	e7de      	b.n	8006310 <HAL_RNG_GenerateRandomNumber+0x1c>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8006352:	2308      	movs	r3, #8
 8006354:	60c3      	str	r3, [r0, #12]
      status = RNG_RecoverSeedError(hrng);
 8006356:	f7ff ff7f 	bl	8006258 <RNG_RecoverSeedError>
      if (status == HAL_ERROR)
 800635a:	2801      	cmp	r0, #1
      status = RNG_RecoverSeedError(hrng);
 800635c:	4605      	mov	r5, r0
      if (status == HAL_ERROR)
 800635e:	d1e1      	bne.n	8006324 <HAL_RNG_GenerateRandomNumber+0x30>
 8006360:	e7d6      	b.n	8006310 <HAL_RNG_GenerateRandomNumber+0x1c>
    hrng->RandomNumber = hrng->Instance->DR;
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	6122      	str	r2, [r4, #16]
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	0649      	lsls	r1, r1, #25
 800636a:	d50c      	bpl.n	8006386 <HAL_RNG_GenerateRandomNumber+0x92>
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800636c:	2208      	movs	r2, #8
      status = HAL_ERROR;
 800636e:	2501      	movs	r5, #1
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8006370:	60e2      	str	r2, [r4, #12]
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	f022 0201 	bic.w	r2, r2, #1
 8006378:	605a      	str	r2, [r3, #4]
    hrng->State = HAL_RNG_STATE_READY;
 800637a:	2301      	movs	r3, #1
 800637c:	7263      	strb	r3, [r4, #9]
 800637e:	e7c5      	b.n	800630c <HAL_RNG_GenerateRandomNumber+0x18>
  __HAL_LOCK(hrng);
 8006380:	2502      	movs	r5, #2
}
 8006382:	4628      	mov	r0, r5
 8006384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *random32bit = hrng->RandomNumber;
 8006386:	603a      	str	r2, [r7, #0]
 8006388:	e7f7      	b.n	800637a <HAL_RNG_GenerateRandomNumber+0x86>
 800638a:	bf00      	nop

0800638c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800638c:	6802      	ldr	r2, [r0, #0]
{
 800638e:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8006390:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006392:	6991      	ldr	r1, [r2, #24]
 8006394:	f041 0108 	orr.w	r1, r1, #8
 8006398:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800639a:	6801      	ldr	r1, [r0, #0]
 800639c:	698a      	ldr	r2, [r1, #24]
 800639e:	f042 0210 	orr.w	r2, r2, #16
 80063a2:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063a4:	6801      	ldr	r1, [r0, #0]
 80063a6:	680a      	ldr	r2, [r1, #0]
 80063a8:	f022 0201 	bic.w	r2, r2, #1
 80063ac:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80063ae:	6801      	ldr	r1, [r0, #0]
 80063b0:	4a27      	ldr	r2, [pc, #156]	; (8006450 <SPI_CloseTransfer+0xc4>)
 80063b2:	690c      	ldr	r4, [r1, #16]
 80063b4:	4022      	ands	r2, r4
 80063b6:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80063b8:	6801      	ldr	r1, [r0, #0]
 80063ba:	688a      	ldr	r2, [r1, #8]
 80063bc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80063c0:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063c2:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80063c6:	2a04      	cmp	r2, #4
 80063c8:	d001      	beq.n	80063ce <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80063ca:	069c      	lsls	r4, r3, #26
 80063cc:	d433      	bmi.n	8006436 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063ce:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 80063d2:	2a03      	cmp	r2, #3
 80063d4:	d001      	beq.n	80063da <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80063d6:	0659      	lsls	r1, r3, #25
 80063d8:	d421      	bmi.n	800641e <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80063da:	059a      	lsls	r2, r3, #22
 80063dc:	d50a      	bpl.n	80063f4 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063de:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80063e2:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063e4:	f042 0201 	orr.w	r2, r2, #1
 80063e8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80063ec:	698a      	ldr	r2, [r1, #24]
 80063ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f2:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80063f4:	05db      	lsls	r3, r3, #23
 80063f6:	d50a      	bpl.n	800640e <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063f8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80063fc:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80063fe:	f043 0308 	orr.w	r3, r3, #8
 8006402:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006406:	6993      	ldr	r3, [r2, #24]
 8006408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800640e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8006410:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8006414:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006418:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800641c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800641e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006422:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006424:	f042 0204 	orr.w	r2, r2, #4
 8006428:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800642c:	698a      	ldr	r2, [r1, #24]
 800642e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006432:	618a      	str	r2, [r1, #24]
 8006434:	e7d1      	b.n	80063da <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006436:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800643a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800643c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006440:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006444:	698a      	ldr	r2, [r1, #24]
 8006446:	f042 0220 	orr.w	r2, r2, #32
 800644a:	618a      	str	r2, [r1, #24]
 800644c:	e7bf      	b.n	80063ce <SPI_CloseTransfer+0x42>
 800644e:	bf00      	nop
 8006450:	fffffc90 	.word	0xfffffc90

08006454 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006454:	2800      	cmp	r0, #0
 8006456:	f000 80be 	beq.w	80065d6 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800645a:	4a62      	ldr	r2, [pc, #392]	; (80065e4 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800645c:	2100      	movs	r1, #0
{
 800645e:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006460:	6803      	ldr	r3, [r0, #0]
 8006462:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006464:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006466:	4293      	cmp	r3, r2
 8006468:	d015      	beq.n	8006496 <HAL_SPI_Init+0x42>
 800646a:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800646e:	4293      	cmp	r3, r2
 8006470:	d011      	beq.n	8006496 <HAL_SPI_Init+0x42>
 8006472:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006476:	4293      	cmp	r3, r2
 8006478:	68c2      	ldr	r2, [r0, #12]
 800647a:	f000 80a5 	beq.w	80065c8 <HAL_SPI_Init+0x174>
 800647e:	2a0f      	cmp	r2, #15
 8006480:	d807      	bhi.n	8006492 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006482:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006484:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006486:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8006488:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800648a:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800648e:	2a08      	cmp	r2, #8
 8006490:	d914      	bls.n	80064bc <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 8006492:	2001      	movs	r0, #1
}
 8006494:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 8006496:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006498:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800649a:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800649c:	4851      	ldr	r0, [pc, #324]	; (80065e4 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800649e:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 80064a0:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 80064a2:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80064a6:	4950      	ldr	r1, [pc, #320]	; (80065e8 <HAL_SPI_Init+0x194>)
 80064a8:	428b      	cmp	r3, r1
 80064aa:	bf18      	it	ne
 80064ac:	4283      	cmpne	r3, r0
 80064ae:	d003      	beq.n	80064b8 <HAL_SPI_Init+0x64>
 80064b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064b4:	428b      	cmp	r3, r1
 80064b6:	d101      	bne.n	80064bc <HAL_SPI_Init+0x68>
 80064b8:	2a10      	cmp	r2, #16
 80064ba:	d8ea      	bhi.n	8006492 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80064bc:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 80064c0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	d078      	beq.n	80065ba <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 80064c8:	2202      	movs	r2, #2
 80064ca:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064d6:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80064d8:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064da:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80064de:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064e6:	d058      	beq.n	800659a <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80064e8:	0249      	lsls	r1, r1, #9
 80064ea:	d502      	bpl.n	80064f2 <HAL_SPI_Init+0x9e>
 80064ec:	68e1      	ldr	r1, [r4, #12]
 80064ee:	2906      	cmp	r1, #6
 80064f0:	d84c      	bhi.n	800658c <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80064f2:	6819      	ldr	r1, [r3, #0]
 80064f4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80064f8:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80064fa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80064fc:	69e3      	ldr	r3, [r4, #28]
 80064fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006500:	432b      	orrs	r3, r5
 8006502:	6821      	ldr	r1, [r4, #0]
 8006504:	4303      	orrs	r3, r0
 8006506:	68e0      	ldr	r0, [r4, #12]
 8006508:	4303      	orrs	r3, r0
 800650a:	4313      	orrs	r3, r2
 800650c:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800650e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006510:	69a0      	ldr	r0, [r4, #24]
 8006512:	6822      	ldr	r2, [r4, #0]
 8006514:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 8006518:	432b      	orrs	r3, r5
 800651a:	430b      	orrs	r3, r1
 800651c:	6921      	ldr	r1, [r4, #16]
 800651e:	4303      	orrs	r3, r0
 8006520:	6960      	ldr	r0, [r4, #20]
 8006522:	430b      	orrs	r3, r1
 8006524:	6a21      	ldr	r1, [r4, #32]
 8006526:	4303      	orrs	r3, r0
 8006528:	6860      	ldr	r0, [r4, #4]
 800652a:	430b      	orrs	r3, r1
 800652c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800652e:	4303      	orrs	r3, r0
 8006530:	68a0      	ldr	r0, [r4, #8]
 8006532:	430b      	orrs	r3, r1
 8006534:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006536:	4303      	orrs	r3, r0
 8006538:	430b      	orrs	r3, r1
 800653a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800653c:	430b      	orrs	r3, r1
 800653e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	b96b      	cbnz	r3, 8006560 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006544:	6822      	ldr	r2, [r4, #0]
 8006546:	6893      	ldr	r3, [r2, #8]
 8006548:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800654c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006550:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	6893      	ldr	r3, [r2, #8]
 8006556:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800655a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800655e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800656a:	6863      	ldr	r3, [r4, #4]
 800656c:	025b      	lsls	r3, r3, #9
 800656e:	d506      	bpl.n	800657e <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006574:	68d3      	ldr	r3, [r2, #12]
 8006576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800657a:	430b      	orrs	r3, r1
 800657c:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800657e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006580:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006582:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006586:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800658a:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800658c:	6819      	ldr	r1, [r3, #0]
 800658e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006590:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006594:	4301      	orrs	r1, r0
 8006596:	6019      	str	r1, [r3, #0]
 8006598:	e7af      	b.n	80064fa <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800659a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800659e:	d01c      	beq.n	80065da <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80065a0:	2900      	cmp	r1, #0
 80065a2:	d1a1      	bne.n	80064e8 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80065a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80065a6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80065aa:	d1a2      	bne.n	80064f2 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80065ac:	6819      	ldr	r1, [r3, #0]
 80065ae:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80065b2:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80065b4:	e9d4 3100 	ldrd	r3, r1, [r4]
 80065b8:	e796      	b.n	80064e8 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 80065ba:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80065bc:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80065c0:	f7fa fd72 	bl	80010a8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	e77f      	b.n	80064c8 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80065c8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80065ca:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80065cc:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 80065ce:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 80065d0:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80065d4:	e770      	b.n	80064b8 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 80065d6:	2001      	movs	r0, #1
}
 80065d8:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80065da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80065dc:	2900      	cmp	r1, #0
 80065de:	d0e5      	beq.n	80065ac <HAL_SPI_Init+0x158>
 80065e0:	e784      	b.n	80064ec <HAL_SPI_Init+0x98>
 80065e2:	bf00      	nop
 80065e4:	40013000 	.word	0x40013000
 80065e8:	40003800 	.word	0x40003800

080065ec <HAL_SPI_Transmit_DMA>:
{
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 80065ee:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	f000 80a4 	beq.w	8006740 <HAL_SPI_Transmit_DMA+0x154>
  if (hspi->State != HAL_SPI_STATE_READY)
 80065f8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80065fc:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 80065fe:	2201      	movs	r2, #1
 8006600:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006602:	b2de      	uxtb	r6, r3
 8006604:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 8006606:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800660a:	d174      	bne.n	80066f6 <HAL_SPI_Transmit_DMA+0x10a>
  if ((pData == NULL) || (Size == 0UL))
 800660c:	2900      	cmp	r1, #0
 800660e:	d06d      	beq.n	80066ec <HAL_SPI_Transmit_DMA+0x100>
 8006610:	fab5 f385 	clz	r3, r5
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	2d00      	cmp	r5, #0
 8006618:	d068      	beq.n	80066ec <HAL_SPI_Transmit_DMA+0x100>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800661a:	6882      	ldr	r2, [r0, #8]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800661c:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800661e:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006620:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->TxXferSize  = Size;
 8006624:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006628:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_TX(hspi);
 800662c:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800662e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pRxBuffPtr  = NULL;
 8006632:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->TxXferCount = Size;
 8006634:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferSize  = (uint16_t)0UL;
 8006638:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800663c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8006640:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006644:	d077      	beq.n	8006736 <HAL_SPI_Transmit_DMA+0x14a>
    SPI_2LINES_TX(hspi);
 8006646:	68d3      	ldr	r3, [r2, #12]
 8006648:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800664c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006650:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006652:	68e3      	ldr	r3, [r4, #12]
 8006654:	2b0f      	cmp	r3, #15
 8006656:	d954      	bls.n	8006702 <HAL_SPI_Transmit_DMA+0x116>
 8006658:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006660:	d144      	bne.n	80066ec <HAL_SPI_Transmit_DMA+0x100>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006662:	4a48      	ldr	r2, [pc, #288]	; (8006784 <HAL_SPI_Transmit_DMA+0x198>)
  hspi->hdmatx->XferAbortCallback = NULL;
 8006664:	2700      	movs	r7, #0
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006666:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006668:	4a47      	ldr	r2, [pc, #284]	; (8006788 <HAL_SPI_Transmit_DMA+0x19c>)
 800666a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800666c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800666e:	4a47      	ldr	r2, [pc, #284]	; (800678c <HAL_SPI_Transmit_DMA+0x1a0>)
 8006670:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006672:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8006674:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006676:	651f      	str	r7, [r3, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	6893      	ldr	r3, [r2, #8]
 800667c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006680:	6093      	str	r3, [r2, #8]
                                 hspi->TxXferCount))
 8006682:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8006686:	6822      	ldr	r2, [r4, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800668c:	3220      	adds	r2, #32
 800668e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006690:	f7fc fbd2 	bl	8002e38 <HAL_DMA_Start_IT>
 8006694:	2800      	cmp	r0, #0
 8006696:	d156      	bne.n	8006746 <HAL_SPI_Transmit_DMA+0x15a>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006698:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800669a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800669c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800669e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80066a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80066a4:	4b3a      	ldr	r3, [pc, #232]	; (8006790 <HAL_SPI_Transmit_DMA+0x1a4>)
 80066a6:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80066aa:	bf18      	it	ne
 80066ac:	432b      	orrne	r3, r5
 80066ae:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80066b0:	6822      	ldr	r2, [r4, #0]
 80066b2:	6893      	ldr	r3, [r2, #8]
 80066b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b8:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80066ba:	6822      	ldr	r2, [r4, #0]
 80066bc:	6913      	ldr	r3, [r2, #16]
 80066be:	f443 7348 	orr.w	r3, r3, #800	; 0x320
 80066c2:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 80066c4:	6822      	ldr	r2, [r4, #0]
 80066c6:	6813      	ldr	r3, [r2, #0]
 80066c8:	f043 0301 	orr.w	r3, r3, #1
 80066cc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ce:	6863      	ldr	r3, [r4, #4]
 80066d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066d4:	d104      	bne.n	80066e0 <HAL_SPI_Transmit_DMA+0xf4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	6813      	ldr	r3, [r2, #0]
 80066da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066de:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 80066e0:	2300      	movs	r3, #0
  return errorcode;
 80066e2:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 80066e4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80066e8:	4630      	mov	r0, r6
 80066ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 80066ec:	2300      	movs	r3, #0
 80066ee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80066f2:	4630      	mov	r0, r6
 80066f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 80066f6:	2300      	movs	r3, #0
    return errorcode;
 80066f8:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 80066fa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 80066fe:	4630      	mov	r0, r6
 8006700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006702:	2b07      	cmp	r3, #7
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006704:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006706:	699a      	ldr	r2, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006708:	d829      	bhi.n	800675e <HAL_SPI_Transmit_DMA+0x172>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800670a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800670e:	d107      	bne.n	8006720 <HAL_SPI_Transmit_DMA+0x134>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006710:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8006714:	b292      	uxth	r2, r2
 8006716:	3201      	adds	r2, #1
 8006718:	0852      	lsrs	r2, r2, #1
 800671a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006724:	d19d      	bne.n	8006662 <HAL_SPI_Transmit_DMA+0x76>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8006726:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800672a:	b292      	uxth	r2, r2
 800672c:	3203      	adds	r2, #3
 800672e:	0892      	lsrs	r2, r2, #2
 8006730:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 8006734:	e795      	b.n	8006662 <HAL_SPI_Transmit_DMA+0x76>
    SPI_1LINE_TX(hspi);
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	e788      	b.n	8006652 <HAL_SPI_Transmit_DMA+0x66>
  __HAL_LOCK(hspi);
 8006740:	2602      	movs	r6, #2
}
 8006742:	4630      	mov	r0, r6
 8006744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006746:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800674a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800674c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006750:	f043 0310 	orr.w	r3, r3, #16
 8006754:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006758:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800675c:	e7c9      	b.n	80066f2 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800675e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006762:	d006      	beq.n	8006772 <HAL_SPI_Transmit_DMA+0x186>
 8006764:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006768:	d1c0      	bne.n	80066ec <HAL_SPI_Transmit_DMA+0x100>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800676a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800676e:	f47f af78 	bne.w	8006662 <HAL_SPI_Transmit_DMA+0x76>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8006772:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8006776:	b292      	uxth	r2, r2
 8006778:	3201      	adds	r2, #1
 800677a:	0852      	lsrs	r2, r2, #1
 800677c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 8006780:	e76f      	b.n	8006662 <HAL_SPI_Transmit_DMA+0x76>
 8006782:	bf00      	nop
 8006784:	080069b1 	.word	0x080069b1
 8006788:	08006959 	.word	0x08006959
 800678c:	080069cd 	.word	0x080069cd
 8006790:	ffff0000 	.word	0xffff0000

08006794 <HAL_SPI_Receive_DMA>:
{
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8006796:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800679a:	2b01      	cmp	r3, #1
 800679c:	f000 80a9 	beq.w	80068f2 <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 80067a0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80067a4:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 80067a6:	2201      	movs	r2, #1
 80067a8:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80067aa:	b2de      	uxtb	r6, r3
 80067ac:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 80067ae:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 80067b2:	f040 8093 	bne.w	80068dc <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 80067b6:	2900      	cmp	r1, #0
 80067b8:	f000 808b 	beq.w	80068d2 <HAL_SPI_Receive_DMA+0x13e>
 80067bc:	fab5 f385 	clz	r3, r5
 80067c0:	095b      	lsrs	r3, r3, #5
 80067c2:	2d00      	cmp	r5, #0
 80067c4:	f000 8085 	beq.w	80068d2 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067c8:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067ca:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067cc:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ce:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 80067d2:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067d6:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 80067da:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067dc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 80067e0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 80067e4:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80067e8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 80067ec:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067f0:	d07a      	beq.n	80068e8 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 80067f2:	68d3      	ldr	r3, [r2, #12]
 80067f4:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 80067f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067fc:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	2b0f      	cmp	r3, #15
 8006802:	d861      	bhi.n	80068c8 <HAL_SPI_Receive_DMA+0x134>
 8006804:	2b07      	cmp	r3, #7
 8006806:	f200 8092 	bhi.w	800692e <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800680a:	6822      	ldr	r2, [r4, #0]
 800680c:	6893      	ldr	r3, [r2, #8]
 800680e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006812:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006814:	68e3      	ldr	r3, [r4, #12]
 8006816:	2b07      	cmp	r3, #7
 8006818:	d86e      	bhi.n	80068f8 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800681a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006822:	d107      	bne.n	8006834 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006824:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006828:	b292      	uxth	r2, r2
 800682a:	3201      	adds	r2, #1
 800682c:	0852      	lsrs	r2, r2, #1
 800682e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006838:	d106      	bne.n	8006848 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800683a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800683e:	b292      	uxth	r2, r2
 8006840:	3203      	adds	r2, #3
 8006842:	0892      	lsrs	r2, r2, #2
 8006844:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006848:	4a3e      	ldr	r2, [pc, #248]	; (8006944 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800684a:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800684e:	4a3e      	ldr	r2, [pc, #248]	; (8006948 <HAL_SPI_Receive_DMA+0x1b4>)
 8006850:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006852:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006854:	4a3d      	ldr	r2, [pc, #244]	; (800694c <HAL_SPI_Receive_DMA+0x1b8>)
 8006856:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006858:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800685a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800685c:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800685e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8006862:	6821      	ldr	r1, [r4, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006868:	3130      	adds	r1, #48	; 0x30
 800686a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800686c:	f7fc fae4 	bl	8002e38 <HAL_DMA_Start_IT>
 8006870:	2800      	cmp	r0, #0
 8006872:	d150      	bne.n	8006916 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006874:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006876:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006878:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800687a:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800687c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8006880:	4b33      	ldr	r3, [pc, #204]	; (8006950 <HAL_SPI_Receive_DMA+0x1bc>)
 8006882:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006886:	bf18      	it	ne
 8006888:	432b      	orrne	r3, r5
 800688a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800688c:	6822      	ldr	r2, [r4, #0]
 800688e:	6893      	ldr	r3, [r2, #8]
 8006890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006894:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	6913      	ldr	r3, [r2, #16]
 800689a:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800689e:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 80068a0:	6822      	ldr	r2, [r4, #0]
 80068a2:	6813      	ldr	r3, [r2, #0]
 80068a4:	f043 0301 	orr.w	r3, r3, #1
 80068a8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068aa:	6863      	ldr	r3, [r4, #4]
 80068ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068b0:	d104      	bne.n	80068bc <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80068b2:	6822      	ldr	r2, [r4, #0]
 80068b4:	6813      	ldr	r3, [r2, #0]
 80068b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068ba:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 80068bc:	2300      	movs	r3, #0
  return errorcode;
 80068be:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 80068c0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80068c4:	4630      	mov	r0, r6
 80068c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80068c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068d0:	d09b      	beq.n	800680a <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 80068d2:	2300      	movs	r3, #0
 80068d4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 80068d8:	4630      	mov	r0, r6
 80068da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 80068dc:	2300      	movs	r3, #0
    return errorcode;
 80068de:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 80068e0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 80068e4:	4630      	mov	r0, r6
 80068e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 80068e8:	6813      	ldr	r3, [r2, #0]
 80068ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	e785      	b.n	80067fe <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 80068f2:	2602      	movs	r6, #2
}
 80068f4:	4630      	mov	r0, r6
 80068f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80068f8:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80068fa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80068fc:	d8a4      	bhi.n	8006848 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80068fe:	699a      	ldr	r2, [r3, #24]
 8006900:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006904:	d1a0      	bne.n	8006848 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8006906:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800690a:	b292      	uxth	r2, r2
 800690c:	3201      	adds	r2, #1
 800690e:	0852      	lsrs	r2, r2, #1
 8006910:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 8006914:	e798      	b.n	8006848 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006916:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800691a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800691c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006920:	f043 0310 	orr.w	r3, r3, #16
 8006924:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006928:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800692c:	e7d4      	b.n	80068d8 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800692e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006936:	f43f af68 	beq.w	800680a <HAL_SPI_Receive_DMA+0x76>
 800693a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800693e:	d1c8      	bne.n	80068d2 <HAL_SPI_Receive_DMA+0x13e>
 8006940:	e763      	b.n	800680a <HAL_SPI_Receive_DMA+0x76>
 8006942:	bf00      	nop
 8006944:	080069bd 	.word	0x080069bd
 8006948:	08006981 	.word	0x08006981
 800694c:	080069cd 	.word	0x080069cd
 8006950:	ffff0000 	.word	0xffff0000

08006954 <HAL_SPI_TxCpltCallback>:
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop

08006958 <SPI_DMATransmitCplt>:
{
 8006958:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800695a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800695c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006960:	2b07      	cmp	r3, #7
 8006962:	d009      	beq.n	8006978 <SPI_DMATransmitCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8006964:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696c:	d005      	beq.n	800697a <SPI_DMATransmitCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800696e:	6802      	ldr	r2, [r0, #0]
 8006970:	6913      	ldr	r3, [r2, #16]
 8006972:	f043 0308 	orr.w	r3, r3, #8
 8006976:	6113      	str	r3, [r2, #16]
}
 8006978:	bd08      	pop	{r3, pc}
      HAL_SPI_TxCpltCallback(hspi);
 800697a:	f7ff ffeb 	bl	8006954 <HAL_SPI_TxCpltCallback>
}
 800697e:	bd08      	pop	{r3, pc}

08006980 <SPI_DMAReceiveCplt>:
{
 8006980:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006982:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8006984:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006988:	2b07      	cmp	r3, #7
 800698a:	d009      	beq.n	80069a0 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800698c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006994:	d005      	beq.n	80069a2 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8006996:	6802      	ldr	r2, [r0, #0]
 8006998:	6913      	ldr	r3, [r2, #16]
 800699a:	f043 0308 	orr.w	r3, r3, #8
 800699e:	6113      	str	r3, [r2, #16]
}
 80069a0:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 80069a2:	f7fa fa49 	bl	8000e38 <HAL_SPI_RxCpltCallback>
}
 80069a6:	bd08      	pop	{r3, pc}

080069a8 <HAL_SPI_TxRxCpltCallback>:
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop

080069ac <HAL_SPI_TxHalfCpltCallback>:
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop

080069b0 <SPI_DMAHalfTransmitCplt>:
{
 80069b0:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 80069b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80069b4:	f7ff fffa 	bl	80069ac <HAL_SPI_TxHalfCpltCallback>
}
 80069b8:	bd08      	pop	{r3, pc}
 80069ba:	bf00      	nop

080069bc <SPI_DMAHalfReceiveCplt>:
{
 80069bc:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80069be:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80069c0:	f7fa fa58 	bl	8000e74 <HAL_SPI_RxHalfCpltCallback>
}
 80069c4:	bd08      	pop	{r3, pc}
 80069c6:	bf00      	nop

080069c8 <HAL_SPI_ErrorCallback>:
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop

080069cc <SPI_DMAError>:
{
 80069cc:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ce:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80069d0:	f7fd fa68 	bl	8003ea4 <HAL_DMA_GetError>
 80069d4:	2802      	cmp	r0, #2
 80069d6:	d100      	bne.n	80069da <SPI_DMAError+0xe>
}
 80069d8:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80069de:	6991      	ldr	r1, [r2, #24]
 80069e0:	f041 0108 	orr.w	r1, r1, #8
 80069e4:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80069e6:	6821      	ldr	r1, [r4, #0]
 80069e8:	698a      	ldr	r2, [r1, #24]
 80069ea:	f042 0210 	orr.w	r2, r2, #16
 80069ee:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 80069f0:	6821      	ldr	r1, [r4, #0]
 80069f2:	680a      	ldr	r2, [r1, #0]
 80069f4:	f022 0201 	bic.w	r2, r2, #1
 80069f8:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80069fa:	6821      	ldr	r1, [r4, #0]
 80069fc:	4a2c      	ldr	r2, [pc, #176]	; (8006ab0 <SPI_DMAError+0xe4>)
 80069fe:	6908      	ldr	r0, [r1, #16]
 8006a00:	4002      	ands	r2, r0
 8006a02:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a04:	6821      	ldr	r1, [r4, #0]
 8006a06:	688a      	ldr	r2, [r1, #8]
 8006a08:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a0c:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a0e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006a12:	2a04      	cmp	r2, #4
 8006a14:	d001      	beq.n	8006a1a <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006a16:	0698      	lsls	r0, r3, #26
 8006a18:	d43d      	bmi.n	8006a96 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a1a:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006a1e:	2a03      	cmp	r2, #3
 8006a20:	d001      	beq.n	8006a26 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a22:	0659      	lsls	r1, r3, #25
 8006a24:	d42b      	bmi.n	8006a7e <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006a26:	059a      	lsls	r2, r3, #22
 8006a28:	d50a      	bpl.n	8006a40 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a2a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a2e:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a38:	698a      	ldr	r2, [r1, #24]
 8006a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a3e:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006a40:	05db      	lsls	r3, r3, #23
 8006a42:	d50a      	bpl.n	8006a5a <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a44:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a48:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a4a:	f043 0308 	orr.w	r3, r3, #8
 8006a4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a52:	6993      	ldr	r3, [r2, #24]
 8006a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a58:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8006a5a:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8006a5c:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 8006a5e:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8006a60:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006a64:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a68:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006a6c:	f043 0310 	orr.w	r3, r3, #16
 8006a70:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006a74:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8006a78:	f7ff ffa6 	bl	80069c8 <HAL_SPI_ErrorCallback>
}
 8006a7c:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a7e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a82:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a84:	f042 0204 	orr.w	r2, r2, #4
 8006a88:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a8c:	698a      	ldr	r2, [r1, #24]
 8006a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a92:	618a      	str	r2, [r1, #24]
 8006a94:	e7c7      	b.n	8006a26 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006a96:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006a9a:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006a9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006aa0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006aa4:	698a      	ldr	r2, [r1, #24]
 8006aa6:	f042 0220 	orr.w	r2, r2, #32
 8006aaa:	618a      	str	r2, [r1, #24]
 8006aac:	e7b5      	b.n	8006a1a <SPI_DMAError+0x4e>
 8006aae:	bf00      	nop
 8006ab0:	fffffc90 	.word	0xfffffc90

08006ab4 <SPI_DMAAbortOnError>:
{
 8006ab4:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 8006ab6:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ab8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006ac0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006ac4:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006ac8:	f7ff ff7e 	bl	80069c8 <HAL_SPI_ErrorCallback>
}
 8006acc:	bd08      	pop	{r3, pc}
 8006ace:	bf00      	nop

08006ad0 <HAL_SPI_SuspendCallback>:
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop

08006ad4 <HAL_SPI_IRQHandler>:
{
 8006ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 8006ad8:	6802      	ldr	r2, [r0, #0]
{
 8006ada:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006adc:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006ade:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006ae0:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 8006ae2:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 8006ae6:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006aea:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 8006aec:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006aee:	d502      	bpl.n	8006af6 <HAL_SPI_IRQHandler+0x22>
 8006af0:	0709      	lsls	r1, r1, #28
 8006af2:	f100 80e1 	bmi.w	8006cb8 <HAL_SPI_IRQHandler+0x1e4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006af6:	f005 0364 	and.w	r3, r5, #100	; 0x64
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d044      	beq.n	8006b88 <HAL_SPI_IRQHandler+0xb4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006afe:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d04a      	beq.n	8006b9c <HAL_SPI_IRQHandler+0xc8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006b06:	f005 0326 	and.w	r3, r5, #38	; 0x26
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	f000 80ea 	beq.w	8006ce4 <HAL_SPI_IRQHandler+0x210>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006b10:	072b      	lsls	r3, r5, #28
 8006b12:	d563      	bpl.n	8006bdc <HAL_SPI_IRQHandler+0x108>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b14:	6993      	ldr	r3, [r2, #24]
 8006b16:	f043 0308 	orr.w	r3, r3, #8
 8006b1a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b1c:	6821      	ldr	r1, [r4, #0]
 8006b1e:	698b      	ldr	r3, [r1, #24]
 8006b20:	f043 0310 	orr.w	r3, r3, #16
 8006b24:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006b26:	6821      	ldr	r1, [r4, #0]
 8006b28:	698b      	ldr	r3, [r1, #24]
 8006b2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b2e:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006b30:	6821      	ldr	r1, [r4, #0]
 8006b32:	690b      	ldr	r3, [r1, #16]
 8006b34:	f023 0308 	bic.w	r3, r3, #8
 8006b38:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 8006b42:	d135      	bne.n	8006bb0 <HAL_SPI_IRQHandler+0xdc>
      while (hspi->RxXferCount != 0UL)
 8006b44:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d030      	beq.n	8006bb0 <HAL_SPI_IRQHandler+0xdc>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006b4e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006b50:	e00f      	b.n	8006b72 <HAL_SPI_IRQHandler+0x9e>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006b58:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006b5a:	3104      	adds	r1, #4
        hspi->RxXferCount--;
 8006b5c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006b60:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8006b6a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	b1f3      	cbz	r3, 8006bb0 <HAL_SPI_IRQHandler+0xdc>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b72:	68e3      	ldr	r3, [r4, #12]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d8ec      	bhi.n	8006b52 <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b78:	2b07      	cmp	r3, #7
 8006b7a:	f240 80ac 	bls.w	8006cd6 <HAL_SPI_IRQHandler+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b7e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8006b80:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b82:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006b84:	3102      	adds	r1, #2
 8006b86:	e7e9      	b.n	8006b5c <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 8006b88:	4620      	mov	r0, r4
 8006b8a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006b8c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006b8e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006b90:	4620      	mov	r0, r4
 8006b92:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006b94:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d102      	bne.n	8006ba2 <HAL_SPI_IRQHandler+0xce>
    hspi->RxISR(hspi);
 8006b9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006ba2:	f005 0526 	and.w	r5, r5, #38	; 0x26
 8006ba6:	2d02      	cmp	r5, #2
 8006ba8:	f000 809c 	beq.w	8006ce4 <HAL_SPI_IRQHandler+0x210>
}
 8006bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f7ff fbeb 	bl	800638c <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bbc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f040 8085 	bne.w	8006cd0 <HAL_SPI_IRQHandler+0x1fc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006bc6:	2e05      	cmp	r6, #5
 8006bc8:	f000 8091 	beq.w	8006cee <HAL_SPI_IRQHandler+0x21a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006bcc:	2e04      	cmp	r6, #4
 8006bce:	f000 8091 	beq.w	8006cf4 <HAL_SPI_IRQHandler+0x220>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006bd2:	2e03      	cmp	r6, #3
 8006bd4:	d1ea      	bne.n	8006bac <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_TxCpltCallback(hspi);
 8006bd6:	f7ff febd 	bl	8006954 <HAL_SPI_TxCpltCallback>
 8006bda:	e7e7      	b.n	8006bac <HAL_SPI_IRQHandler+0xd8>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006bdc:	f415 7f58 	tst.w	r5, #864	; 0x360
 8006be0:	d0e4      	beq.n	8006bac <HAL_SPI_IRQHandler+0xd8>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006be2:	0668      	lsls	r0, r5, #25
 8006be4:	d509      	bpl.n	8006bfa <HAL_SPI_IRQHandler+0x126>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006be6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006bea:	f043 0304 	orr.w	r3, r3, #4
 8006bee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bf2:	6993      	ldr	r3, [r2, #24]
 8006bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006bfa:	05a9      	lsls	r1, r5, #22
 8006bfc:	d50a      	bpl.n	8006c14 <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bfe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c02:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c04:	f043 0301 	orr.w	r3, r3, #1
 8006c08:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c0c:	6993      	ldr	r3, [r2, #24]
 8006c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c12:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006c14:	05ea      	lsls	r2, r5, #23
 8006c16:	d50a      	bpl.n	8006c2e <HAL_SPI_IRQHandler+0x15a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c18:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c1c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c1e:	f043 0308 	orr.w	r3, r3, #8
 8006c22:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c26:	6993      	ldr	r3, [r2, #24]
 8006c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006c2e:	06ab      	lsls	r3, r5, #26
 8006c30:	d50a      	bpl.n	8006c48 <HAL_SPI_IRQHandler+0x174>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006c32:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006c36:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006c40:	6993      	ldr	r3, [r2, #24]
 8006c42:	f043 0320 	orr.w	r3, r3, #32
 8006c46:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c48:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0ad      	beq.n	8006bac <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE(hspi);
 8006c50:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006c52:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006c56:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006c58:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <HAL_SPI_IRQHandler+0x228>)
 8006c66:	6911      	ldr	r1, [r2, #16]
 8006c68:	ea03 0301 	and.w	r3, r3, r1
 8006c6c:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006c6e:	d12b      	bne.n	8006cc8 <HAL_SPI_IRQHandler+0x1f4>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006c70:	6822      	ldr	r2, [r4, #0]
 8006c72:	6893      	ldr	r3, [r2, #8]
 8006c74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006c78:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 8006c7a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006c7c:	b15b      	cbz	r3, 8006c96 <HAL_SPI_IRQHandler+0x1c2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c7e:	4a20      	ldr	r2, [pc, #128]	; (8006d00 <HAL_SPI_IRQHandler+0x22c>)
 8006c80:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c82:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006c84:	f7fc fba4 	bl	80033d0 <HAL_DMA_Abort_IT>
 8006c88:	b128      	cbz	r0, 8006c96 <HAL_SPI_IRQHandler+0x1c2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c8a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c92:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 8006c96:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d087      	beq.n	8006bac <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c9c:	4a18      	ldr	r2, [pc, #96]	; (8006d00 <HAL_SPI_IRQHandler+0x22c>)
 8006c9e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006ca0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006ca2:	f7fc fb95 	bl	80033d0 <HAL_DMA_Abort_IT>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d080      	beq.n	8006bac <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006caa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006cb6:	e779      	b.n	8006bac <HAL_SPI_IRQHandler+0xd8>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006cb8:	6993      	ldr	r3, [r2, #24]
 8006cba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cbe:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 8006cc0:	f7ff ff06 	bl	8006ad0 <HAL_SPI_SuspendCallback>
}
 8006cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8006cc8:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8006cca:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8006ccc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006cd0:	f7ff fe7a 	bl	80069c8 <HAL_SPI_ErrorCallback>
 8006cd4:	e76a      	b.n	8006bac <HAL_SPI_IRQHandler+0xd8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cdc:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cde:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006ce0:	3101      	adds	r1, #1
 8006ce2:	e73b      	b.n	8006b5c <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 8006ce4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006ce6:	4620      	mov	r0, r4
}
 8006ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8006cec:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 8006cee:	f7ff fe5b 	bl	80069a8 <HAL_SPI_TxRxCpltCallback>
 8006cf2:	e75b      	b.n	8006bac <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_RxCpltCallback(hspi);
 8006cf4:	f7fa f8a0 	bl	8000e38 <HAL_SPI_RxCpltCallback>
 8006cf8:	e758      	b.n	8006bac <HAL_SPI_IRQHandler+0xd8>
 8006cfa:	bf00      	nop
 8006cfc:	fffffc94 	.word	0xfffffc94
 8006d00:	08006ab5 	.word	0x08006ab5

08006d04 <HAL_SPI_GetState>:
  return hspi->State;
 8006d04:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
}
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop

08006d0c <tThreshold_init>:
}



void tThreshold_init (tThreshold* const th, float low, float high, LEAF* const leaf)
{
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	ed2d 8b02 	vpush	{d8}
	tThreshold_initToPool(th, low, high, &leaf->mempool);
}

void tThreshold_initToPool (tThreshold* const th, float low, float high, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006d12:	698d      	ldr	r5, [r1, #24]
{
 8006d14:	eeb0 8a40 	vmov.f32	s16, s0
 8006d18:	eef0 8a60 	vmov.f32	s17, s1
 8006d1c:	4604      	mov	r4, r0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8006d1e:	4629      	mov	r1, r5
 8006d20:	2010      	movs	r0, #16
 8006d22:	f000 faff 	bl	8007324 <mpool_alloc>
    t->mempool = m;
    
    t->highThresh = high;
    t->lowThresh = low;

    t->currentValue = 0;
 8006d26:	2300      	movs	r3, #0
    _tThreshold* t = *th = (_tThreshold*) mpool_alloc(sizeof(_tThreshold), m);
 8006d28:	6020      	str	r0, [r4, #0]
    t->mempool = m;
 8006d2a:	6005      	str	r5, [r0, #0]
    t->highThresh = high;
 8006d2c:	edc0 8a01 	vstr	s17, [r0, #4]
    t->lowThresh = low;
 8006d30:	ed80 8a02 	vstr	s16, [r0, #8]
    t->currentValue = 0;
 8006d34:	60c3      	str	r3, [r0, #12]
}
 8006d36:	ecbd 8b02 	vpop	{d8}
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}

08006d3c <tThreshold_tick>:
    mpool_free((char*)t, t->mempool);
}

int tThreshold_tick(tThreshold* const th, float in)
{
    _tThreshold* t = *th;
 8006d3c:	6803      	ldr	r3, [r0, #0]

    if (in >= t->highThresh)
 8006d3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d42:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4a:	d803      	bhi.n	8006d54 <tThreshold_tick+0x18>
    {
    	t->currentValue = 1;
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	4610      	mov	r0, r2
 8006d50:	60da      	str	r2, [r3, #12]
 8006d52:	4770      	bx	lr
    }
    else if (in <= t->lowThresh)
 8006d54:	edd3 7a02 	vldr	s15, [r3, #8]
 8006d58:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d60:	db03      	blt.n	8006d6a <tThreshold_tick+0x2e>
	{
    	t->currentValue = 0;
 8006d62:	2200      	movs	r2, #0
 8006d64:	4610      	mov	r0, r2
 8006d66:	60da      	str	r2, [r3, #12]
	}

    return t->currentValue;
}
 8006d68:	4770      	bx	lr
    return t->currentValue;
 8006d6a:	68d8      	ldr	r0, [r3, #12]
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop

08006d70 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006d76:	698d      	ldr	r5, [r1, #24]
{
 8006d78:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006d7a:	201c      	movs	r0, #28
{
 8006d7c:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006d80:	4629      	mov	r1, r5
{
 8006d82:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006d86:	f000 facd 	bl	8007324 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8006d8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8006d8e:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8006d90:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8006d92:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8006d94:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8006d98:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8006d9c:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8006da0:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8006da2:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8006da4:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8006da6:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8006da8:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8006dac:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8006db0:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8006db4:	ecbd 8b02 	vpop	{d8}
 8006db8:	bd38      	pop	{r3, r4, r5, pc}
 8006dba:	bf00      	nop

08006dbc <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8006dbc:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 8006dbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8006dc2:	eef4 7ac0 	vcmpe.f32	s15, s0
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8006dc6:	ee70 6a67 	vsub.f32	s13, s0, s15
    if (in >= s->prevOut)
 8006dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8006dce:	bf94      	ite	ls
 8006dd0:	ed93 7a04 	vldrls	s14, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8006dd4:	ed93 7a05 	vldrhi	s14, [r3, #20]
 8006dd8:	eee6 7a87 	vfma.f32	s15, s13, s14
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006ddc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006e18 <tSlide_tick+0x5c>
 8006de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de8:	d408      	bmi.n	8006dfc <tSlide_tick+0x40>
#endif
    s->prevIn = in;
 8006dea:	ed83 0a03 	vstr	s0, [r3, #12]
    s->prevOut = s->currentOut;
    return s->currentOut;
}
 8006dee:	eeb0 0a67 	vmov.f32	s0, s15
 8006df2:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8006df6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006dfa:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006dfc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006e1c <tSlide_tick+0x60>
    s->prevIn = in;
 8006e00:	ed83 0a03 	vstr	s0, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 8006e04:	eef0 7a47 	vmov.f32	s15, s14
 8006e08:	ed83 7a02 	vstr	s14, [r3, #8]
}
 8006e0c:	eeb0 0a67 	vmov.f32	s0, s15
    s->prevOut = s->currentOut;
 8006e10:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	006ce3ee 	.word	0x006ce3ee
 8006e1c:	00000000 	.word	0x00000000

08006e20 <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8006e26:	698c      	ldr	r4, [r1, #24]
{
 8006e28:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8006e2a:	2018      	movs	r0, #24
{
 8006e2c:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8006e30:	4621      	mov	r1, r4
 8006e32:	f000 fadb 	bl	80073ec <mpool_calloc>
 8006e36:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8006e38:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006e3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006e3e:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8006e40:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006e42:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8006e46:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006e48:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8006e4c:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8006e4e:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8006e52:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8006e56:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8006e5a:	ecbd 8b02 	vpop	{d8}
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}

08006e60 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8006e60:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8006e62:	edd3 7a01 	vldr	s15, [r3, #4]
 8006e66:	ed93 7a02 	vldr	s14, [r3, #8]
 8006e6a:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8006e6e:	ed83 0a01 	vstr	s0, [r3, #4]
 8006e72:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8006e76:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006e7a:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8006e7e:	4770      	bx	lr

08006e80 <tVZFilter_calcCoeffs>:
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8006e80:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8006e82:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006e84:	eddf 7a98 	vldr	s15, [pc, #608]	; 80070e8 <tVZFilter_calcCoeffs+0x268>
{
 8006e88:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006e8c:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8006e90:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8006e94:	ee68 8a87 	vmul.f32	s17, s17, s14
 8006e98:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8006e9c:	eeb0 0a68 	vmov.f32	s0, s17
 8006ea0:	f000 fdcc 	bl	8007a3c <tanf>
    
    switch( f->type )
 8006ea4:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8006ea6:	eeb0 8a40 	vmov.f32	s16, s0
 8006eaa:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8006eae:	2b0a      	cmp	r3, #10
 8006eb0:	f200 8117 	bhi.w	80070e2 <tVZFilter_calcCoeffs+0x262>
 8006eb4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006eb8:	002f0026 	.word	0x002f0026
 8006ebc:	00410038 	.word	0x00410038
 8006ec0:	0056004d 	.word	0x0056004d
 8006ec4:	00a1008b 	.word	0x00a1008b
 8006ec8:	010a00b7 	.word	0x010a00b7
 8006ecc:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8006ece:	edd4 7a05 	vldr	s15, [r4, #20]
 8006ed2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006ed6:	eeb1 7a67 	vneg.f32	s14, s15
 8006eda:	61e3      	str	r3, [r4, #28]
 8006edc:	6263      	str	r3, [r4, #36]	; 0x24
 8006ede:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8006ee6:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006eea:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8006eee:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8006ef2:	eee7 6a88 	vfma.f32	s13, s15, s16
 8006ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006efa:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8006efe:	ecbd 8b02 	vpop	{d8}
 8006f02:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006f0a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006f0e:	61e3      	str	r3, [r4, #28]
 8006f10:	6223      	str	r3, [r4, #32]
 8006f12:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8006f14:	e7e5      	b.n	8006ee2 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8006f16:	2300      	movs	r3, #0
 8006f18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006f1c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8006f20:	6223      	str	r3, [r4, #32]
 8006f22:	6263      	str	r3, [r4, #36]	; 0x24
 8006f24:	61e2      	str	r2, [r4, #28]
            break;
 8006f26:	e7dc      	b.n	8006ee2 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006f2e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8006f32:	61e3      	str	r3, [r4, #28]
 8006f34:	6263      	str	r3, [r4, #36]	; 0x24
 8006f36:	6222      	str	r2, [r4, #32]
            break;
 8006f38:	e7d3      	b.n	8006ee2 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006f3a:	edd4 7a05 	vldr	s15, [r4, #20]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8006f44:	61e3      	str	r3, [r4, #28]
 8006f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f4a:	6263      	str	r3, [r4, #36]	; 0x24
 8006f4c:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8006f50:	e7c7      	b.n	8006ee2 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006f52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f56:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8006f58:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8006f5c:	6222      	str	r2, [r4, #32]
 8006f5e:	61e3      	str	r3, [r4, #28]
 8006f60:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8006f62:	e7be      	b.n	8006ee2 <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8006f64:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8006f68:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8006f6c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006f70:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006f74:	f000 fb80 	bl	8007678 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8006f78:	ee28 0a80 	vmul.f32	s0, s17, s0
 8006f7c:	f000 fd5e 	bl	8007a3c <tanf>
            float r  = f->g/wl;
 8006f80:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8006f84:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8006f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f8c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8006f90:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8006f94:	ed84 7a07 	vstr	s14, [r4, #28]
 8006f98:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8006f9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8006fa0:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8006fa4:	eef0 6a47 	vmov.f32	s13, s14
 8006fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fac:	ee77 7a45 	vsub.f32	s15, s14, s10
 8006fb0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006fb4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8006fb8:	eef1 7ac7 	vsqrt.f32	s15, s14
 8006fbc:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8006fc0:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8006fc4:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8006fc8:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8006fcc:	e789      	b.n	8006ee2 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8006fce:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8006fd2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8006fd6:	edd4 7a05 	vldr	s15, [r4, #20]
 8006fda:	eef1 6ac7 	vsqrt.f32	s13, s14
 8006fde:	ed84 7a07 	vstr	s14, [r4, #28]
 8006fe2:	6263      	str	r3, [r4, #36]	; 0x24
 8006fe4:	ee27 6a27 	vmul.f32	s12, s14, s15
 8006fe8:	ed84 6a08 	vstr	s12, [r4, #32]
 8006fec:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8006ff0:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8006ff4:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8006ff8:	e773      	b.n	8006ee2 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8006ffa:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8006ffe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007002:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007006:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800700a:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 800700e:	61e3      	str	r3, [r4, #28]
 8007010:	ee27 6a27 	vmul.f32	s12, s14, s15
 8007014:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8007018:	eeb1 7ae6 	vsqrt.f32	s14, s13
 800701c:	ee20 8a07 	vmul.f32	s16, s0, s14
 8007020:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8007024:	e75d      	b.n	8006ee2 <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 8007026:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800702a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800702e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8007032:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80070ec <tVZFilter_calcCoeffs+0x26c>
 8007036:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 800703a:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800703e:	eeb0 0a48 	vmov.f32	s0, s16
 8007042:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007046:	f000 f94f 	bl	80072e8 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800704a:	eddf 0a28 	vldr	s1, [pc, #160]	; 80070ec <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800704e:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8007052:	eeb0 0a68 	vmov.f32	s0, s17
 8007056:	f000 f94b 	bl	80072f0 <minimum>
            f->cB = 1.0f-x*x;
 800705a:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800705e:	edd4 7a05 	vldr	s15, [r4, #20]
 8007062:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8007066:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800706a:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800706e:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8007072:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007076:	ee76 5a06 	vadd.f32	s11, s12, s12
 800707a:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 800707e:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8007082:	eee6 7a06 	vfma.f32	s15, s12, s12
 8007086:	eee0 7a00 	vfma.f32	s15, s0, s0
 800708a:	eee0 7a65 	vfms.f32	s15, s0, s11
 800708e:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8007092:	f000 f8cd 	bl	8007230 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8007096:	edd4 5a07 	vldr	s11, [r4, #28]
 800709a:	ed94 6a08 	vldr	s12, [r4, #32]
 800709e:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 80070a2:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070a6:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 80070aa:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80070ae:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 80070b2:	ee65 5a80 	vmul.f32	s11, s11, s0
 80070b6:	ee26 6a00 	vmul.f32	s12, s12, s0
 80070ba:	ee66 6a80 	vmul.f32	s13, s13, s0
 80070be:	edc4 5a07 	vstr	s11, [r4, #28]
 80070c2:	ed84 6a08 	vstr	s12, [r4, #32]
 80070c6:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 80070ca:	e70a      	b.n	8006ee2 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 80070cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 80070d0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 80070d4:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 80070d6:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 80070da:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 80070de:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80070e0:	e6ff      	b.n	8006ee2 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80070e2:	edd4 7a05 	vldr	s15, [r4, #20]
 80070e6:	e6fc      	b.n	8006ee2 <tVZFilter_calcCoeffs+0x62>
 80070e8:	40490fdb 	.word	0x40490fdb
 80070ec:	00000000 	.word	0x00000000

080070f0 <tVZFilter_initToPool>:
{
 80070f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 80070f2:	6817      	ldr	r7, [r2, #0]
{
 80070f4:	4605      	mov	r5, r0
 80070f6:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 80070f8:	204c      	movs	r0, #76	; 0x4c
 80070fa:	4639      	mov	r1, r7
{
 80070fc:	ed2d 8b04 	vpush	{d8-d9}
 8007100:	b083      	sub	sp, #12
 8007102:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007106:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800710a:	ed9f 8a42 	vldr	s16, [pc, #264]	; 8007214 <tVZFilter_initToPool+0x124>
{
 800710e:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8007112:	f000 f907 	bl	8007324 <mpool_alloc>
 8007116:	6028      	str	r0, [r5, #0]
 8007118:	4604      	mov	r4, r0
    f->mempool = m;
 800711a:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800711c:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 8007120:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007122:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 8007126:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800712a:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 8007218 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
 800712e:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007132:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800713a:	f000 f89b 	bl	8007274 <LEAF_clip>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 800713e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800721c <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
 8007142:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007146:	ee20 6a09 	vmul.f32	s12, s0, s18
 800714a:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 800714e:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 8007152:	4b33      	ldr	r3, [pc, #204]	; (8007220 <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8007154:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 8007158:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 800715a:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 800715e:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8007162:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007166:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 800716a:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 800716c:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 8007170:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8007174:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 8007178:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 800717c:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007180:	f000 fc5c 	bl	8007a3c <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8007184:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8007224 <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8007188:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 800718c:	eef0 0a68 	vmov.f32	s1, s17
 8007190:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 8007194:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8007196:	f000 f86d 	bl	8007274 <LEAF_clip>
 800719a:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800719e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80071a2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80071a6:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
 80071aa:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80071ac:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80071b0:	f000 fa62 	bl	8007678 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80071b4:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80071b8:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80071bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071c0:	ee67 7a89 	vmul.f32	s15, s15, s18
 80071c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80071c8:	f000 fc38 	bl	8007a3c <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80071cc:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80071d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 80071d4:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80071d6:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80071da:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80071de:	ee27 7a07 	vmul.f32	s14, s14, s14
 80071e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80071e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80071ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80071ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80071f2:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 80071f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80071fa:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 80071fe:	f7ff fe3f 	bl	8006e80 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 8007202:	4628      	mov	r0, r5
}
 8007204:	b003      	add	sp, #12
 8007206:	ecbd 8b04 	vpop	{d8-d9}
 800720a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 800720e:	f7ff be37 	b.w	8006e80 <tVZFilter_calcCoeffs>
 8007212:	bf00      	nop
 8007214:	00000000 	.word	0x00000000
 8007218:	40490fdb 	.word	0x40490fdb
 800721c:	3fb504f3 	.word	0x3fb504f3
 8007220:	3f3504f3 	.word	0x3f3504f3
 8007224:	42c80000 	.word	0x42c80000

08007228 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8007228:	3218      	adds	r2, #24
 800722a:	f7ff bf61 	b.w	80070f0 <tVZFilter_initToPool>
 800722e:	bf00      	nop

08007230 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8007230:	ee10 2a10 	vmov	r2, s0
 8007234:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 8007238:	4b0d      	ldr	r3, [pc, #52]	; (8007270 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 800723a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800723e:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8007242:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007246:	ee00 3a10 	vmov	s0, r3
 800724a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800724e:	eea0 7a67 	vfms.f32	s14, s0, s15
 8007252:	ee60 7a07 	vmul.f32	s15, s0, s14
 8007256:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 800725a:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 800725e:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8007262:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8007266:	336e      	adds	r3, #110	; 0x6e
}
 8007268:	ee00 3a10 	vmov	s0, r3
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	5f3759df 	.word	0x5f3759df

08007274 <LEAF_clip>:
float LEAF_clip(float min, float val, float max)
#endif
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 8007274:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8007278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727c:	dd05      	ble.n	800728a <LEAF_clip+0x16>
 800727e:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 8007282:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 8007286:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 800728a:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007292:	dc01      	bgt.n	8007298 <LEAF_clip+0x24>
    {
        return tempmin;
    }
    else if (val > tempmax)
 8007294:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop

0800729c <LEAF_generate_atodb>:
    }
}


void LEAF_generate_atodb(float* buffer, int size)
{
 800729c:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
 800729e:	1e4b      	subs	r3, r1, #1
 80072a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    for (int i = 0; i < size; i++)
 80072a4:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80072ae:	ed2d 8b04 	vpush	{d8-d9}
    float increment = 1.0f / (float)(size-1);
 80072b2:	eec7 8a27 	vdiv.f32	s17, s14, s15
    for (int i = 0; i < size; i++)
 80072b6:	dd12      	ble.n	80072de <LEAF_generate_atodb+0x42>
 80072b8:	4604      	mov	r4, r0
    float x = 0.0f;
 80072ba:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80072e4 <LEAF_generate_atodb+0x48>
 80072be:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}


float atodb(float a)
{
    return 20.0f*log10f(a);
 80072c2:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 80072c6:	eeb0 0a48 	vmov.f32	s0, s16
 80072ca:	f000 fb7b 	bl	80079c4 <log10f>
 80072ce:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 80072d2:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 80072d6:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 80072da:	42a5      	cmp	r5, r4
 80072dc:	d1f3      	bne.n	80072c6 <LEAF_generate_atodb+0x2a>
}
 80072de:	ecbd 8b04 	vpop	{d8-d9}
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	00000000 	.word	0x00000000

080072e8 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 80072e8:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop

080072f0 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 80072f0:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop

080072f8 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80072f8:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 80072fa:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80072fc:	2510      	movs	r5, #16
    pool->usize  = 0;
 80072fe:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8007300:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8007302:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
 8007304:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
 8007306:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800730a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730c:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 800730e:	440b      	add	r3, r1
 8007310:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8007312:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 8007316:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8007318:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 800731c:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800731e:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 8007320:	6183      	str	r3, [r0, #24]
}
 8007322:	4770      	bx	lr

08007324 <mpool_alloc>:
{
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8007326:	684a      	ldr	r2, [r1, #4]
{
 8007328:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 800732a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800732c:	3301      	adds	r3, #1
 800732e:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8007330:	694b      	ldr	r3, [r1, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d04a      	beq.n	80073cc <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8007336:	1dc4      	adds	r4, r0, #7
 8007338:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 800733c:	e002      	b.n	8007344 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 800733e:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8007340:	2b00      	cmp	r3, #0
 8007342:	d043      	beq.n	80073cc <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	42a2      	cmp	r2, r4
 8007348:	d3f9      	bcc.n	800733e <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 800734a:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800734c:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 800734e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007352:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007354:	4281      	cmp	r1, r0
 8007356:	d246      	bcs.n	80073e6 <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007358:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800735c:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 800735e:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007360:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8007362:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8007364:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 8007366:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 800736a:	4429      	add	r1, r5
 800736c:	5111      	str	r1, [r2, r4]
    node->size = size;
 800736e:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8007370:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8007374:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8007378:	429a      	cmp	r2, r3
        pool->head = new_node;
 800737a:	bf08      	it	eq
 800737c:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	b10a      	cbz	r2, 8007388 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 8007384:	6899      	ldr	r1, [r3, #8]
 8007386:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	b10a      	cbz	r2, 8007390 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 800738c:	6859      	ldr	r1, [r3, #4]
 800738e:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 8007390:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8007392:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 8007394:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8007398:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800739c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80073a0:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80073a2:	4422      	add	r2, r4
 80073a4:	4402      	add	r2, r0
 80073a6:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 80073aa:	694a      	ldr	r2, [r1, #20]
 80073ac:	42aa      	cmp	r2, r5
 80073ae:	dd0b      	ble.n	80073c8 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80073b0:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 80073b2:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80073b4:	b14a      	cbz	r2, 80073ca <mpool_alloc+0xa6>
 80073b6:	1e41      	subs	r1, r0, #1
 80073b8:	460a      	mov	r2, r1
 80073ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 80073be:	68dc      	ldr	r4, [r3, #12]
 80073c0:	3202      	adds	r2, #2
 80073c2:	1a12      	subs	r2, r2, r0
 80073c4:	42a2      	cmp	r2, r4
 80073c6:	d3f7      	bcc.n	80073b8 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
 80073c8:	6818      	ldr	r0, [r3, #0]
}
 80073ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80073cc:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80073d0:	1a9b      	subs	r3, r3, r2
 80073d2:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80073d4:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80073d8:	bf8c      	ite	hi
 80073da:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80073dc:	2100      	movls	r1, #0
 80073de:	f000 f88f 	bl	8007500 <LEAF_internalErrorCallback>
        return NULL;
 80073e2:	2000      	movs	r0, #0
}
 80073e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 80073e6:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 80073e8:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 80073ea:	e7c3      	b.n	8007374 <mpool_alloc+0x50>

080073ec <mpool_calloc>:
{
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 80073ee:	684a      	ldr	r2, [r1, #4]
{
 80073f0:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 80073f2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80073f4:	3301      	adds	r3, #1
 80073f6:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 80073f8:	694b      	ldr	r3, [r1, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d044      	beq.n	8007488 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80073fe:	1dc4      	adds	r4, r0, #7
 8007400:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8007404:	e002      	b.n	800740c <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8007406:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8007408:	2b00      	cmp	r3, #0
 800740a:	d03d      	beq.n	8007488 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	42a2      	cmp	r2, r4
 8007410:	d3f9      	bcc.n	8007406 <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8007412:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8007414:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8007416:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800741a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800741c:	4281      	cmp	r1, r0
 800741e:	d240      	bcs.n	80074a2 <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007420:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8007424:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8007426:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8007428:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 800742a:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 800742c:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 800742e:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8007432:	4429      	add	r1, r5
 8007434:	5111      	str	r1, [r2, r4]
    node->size = size;
 8007436:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8007438:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 800743c:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8007440:	429a      	cmp	r2, r3
        pool->head = new_node;
 8007442:	bf08      	it	eq
 8007444:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	b10a      	cbz	r2, 8007450 <mpool_calloc+0x64>
        node->next->prev = node->prev;
 800744c:	6899      	ldr	r1, [r3, #8]
 800744e:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	b10a      	cbz	r2, 8007458 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8007458:	2200      	movs	r2, #0
    node->prev = NULL;
 800745a:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800745e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8007462:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8007466:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007468:	4401      	add	r1, r0
 800746a:	68d8      	ldr	r0, [r3, #12]
 800746c:	4401      	add	r1, r0
 800746e:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 8007472:	68d9      	ldr	r1, [r3, #12]
 8007474:	b131      	cbz	r1, 8007484 <mpool_calloc+0x98>
 8007476:	4610      	mov	r0, r2
 8007478:	6819      	ldr	r1, [r3, #0]
 800747a:	5488      	strb	r0, [r1, r2]
 800747c:	3201      	adds	r2, #1
 800747e:	68d9      	ldr	r1, [r3, #12]
 8007480:	4291      	cmp	r1, r2
 8007482:	d8f9      	bhi.n	8007478 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 8007484:	6818      	ldr	r0, [r3, #0]
}
 8007486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8007488:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 800748c:	1a9b      	subs	r3, r3, r2
 800748e:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007490:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8007494:	bf8c      	ite	hi
 8007496:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8007498:	2100      	movls	r1, #0
 800749a:	f000 f831 	bl	8007500 <LEAF_internalErrorCallback>
        return NULL;
 800749e:	2000      	movs	r0, #0
}
 80074a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 80074a2:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 80074a4:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 80074a6:	e7c9      	b.n	800743c <mpool_calloc+0x50>

080074a8 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop

080074ac <LEAF_init>:
{
 80074ac:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 80074ae:	6200      	str	r0, [r0, #32]
{
 80074b0:	4604      	mov	r4, r0
 80074b2:	461d      	mov	r5, r3
 80074b4:	ed2d 8b02 	vpush	{d8}
 80074b8:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 80074bc:	f7ff ff1c 	bl	80072f8 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 80074c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 80074c4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80074f8 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 80074c8:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 80074ca:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 80074cc:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 80074d0:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 80074d4:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 80074d6:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 80074d8:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 80074dc:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 80074e0:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 80074e4:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 80074e8:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 80074ec:	edc4 7a03 	vstr	s15, [r4, #12]
}
 80074f0:	ecbd 8b02 	vpop	{d8}
 80074f4:	bd38      	pop	{r3, r4, r5, pc}
 80074f6:	bf00      	nop
 80074f8:	40c90fdb 	.word	0x40c90fdb
 80074fc:	080074a9 	.word	0x080074a9

08007500 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8007500:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 8007502:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8007506:	2401      	movs	r4, #1
 8007508:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 800750a:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 800750e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007510:	4718      	bx	r3
 8007512:	bf00      	nop

08007514 <memset>:
 8007514:	4402      	add	r2, r0
 8007516:	4603      	mov	r3, r0
 8007518:	4293      	cmp	r3, r2
 800751a:	d100      	bne.n	800751e <memset+0xa>
 800751c:	4770      	bx	lr
 800751e:	f803 1b01 	strb.w	r1, [r3], #1
 8007522:	e7f9      	b.n	8007518 <memset+0x4>

08007524 <__errno>:
 8007524:	4b01      	ldr	r3, [pc, #4]	; (800752c <__errno+0x8>)
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	20000060 	.word	0x20000060

08007530 <__libc_init_array>:
 8007530:	b570      	push	{r4, r5, r6, lr}
 8007532:	4d0d      	ldr	r5, [pc, #52]	; (8007568 <__libc_init_array+0x38>)
 8007534:	4c0d      	ldr	r4, [pc, #52]	; (800756c <__libc_init_array+0x3c>)
 8007536:	1b64      	subs	r4, r4, r5
 8007538:	10a4      	asrs	r4, r4, #2
 800753a:	2600      	movs	r6, #0
 800753c:	42a6      	cmp	r6, r4
 800753e:	d109      	bne.n	8007554 <__libc_init_array+0x24>
 8007540:	4d0b      	ldr	r5, [pc, #44]	; (8007570 <__libc_init_array+0x40>)
 8007542:	4c0c      	ldr	r4, [pc, #48]	; (8007574 <__libc_init_array+0x44>)
 8007544:	f001 f822 	bl	800858c <_init>
 8007548:	1b64      	subs	r4, r4, r5
 800754a:	10a4      	asrs	r4, r4, #2
 800754c:	2600      	movs	r6, #0
 800754e:	42a6      	cmp	r6, r4
 8007550:	d105      	bne.n	800755e <__libc_init_array+0x2e>
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	f855 3b04 	ldr.w	r3, [r5], #4
 8007558:	4798      	blx	r3
 800755a:	3601      	adds	r6, #1
 800755c:	e7ee      	b.n	800753c <__libc_init_array+0xc>
 800755e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007562:	4798      	blx	r3
 8007564:	3601      	adds	r6, #1
 8007566:	e7f2      	b.n	800754e <__libc_init_array+0x1e>
 8007568:	08008d70 	.word	0x08008d70
 800756c:	08008d70 	.word	0x08008d70
 8007570:	08008d70 	.word	0x08008d70
 8007574:	08008d74 	.word	0x08008d74

08007578 <logf>:
 8007578:	ee10 3a10 	vmov	r3, s0
 800757c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007580:	b410      	push	{r4}
 8007582:	d055      	beq.n	8007630 <logf+0xb8>
 8007584:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8007588:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800758c:	d31a      	bcc.n	80075c4 <logf+0x4c>
 800758e:	005a      	lsls	r2, r3, #1
 8007590:	d104      	bne.n	800759c <logf+0x24>
 8007592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007596:	2001      	movs	r0, #1
 8007598:	f000 b9f2 	b.w	8007980 <__math_divzerof>
 800759c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80075a0:	d043      	beq.n	800762a <logf+0xb2>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	db02      	blt.n	80075ac <logf+0x34>
 80075a6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80075aa:	d303      	bcc.n	80075b4 <logf+0x3c>
 80075ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b0:	f000 b9f8 	b.w	80079a4 <__math_invalidf>
 80075b4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8007638 <logf+0xc0>
 80075b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80075bc:	ee10 3a10 	vmov	r3, s0
 80075c0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80075c4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80075c8:	491c      	ldr	r1, [pc, #112]	; (800763c <logf+0xc4>)
 80075ca:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 80075ce:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80075d2:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80075d6:	0dd4      	lsrs	r4, r2, #23
 80075d8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80075dc:	05e4      	lsls	r4, r4, #23
 80075de:	ed90 6b00 	vldr	d6, [r0]
 80075e2:	1b1b      	subs	r3, r3, r4
 80075e4:	ee07 3a90 	vmov	s15, r3
 80075e8:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 80075ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80075f0:	15d2      	asrs	r2, r2, #23
 80075f2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80075f6:	ed90 6b02 	vldr	d6, [r0, #8]
 80075fa:	ee20 4b00 	vmul.f64	d4, d0, d0
 80075fe:	ee07 2a90 	vmov	s15, r2
 8007602:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007606:	eea7 6b05 	vfma.f64	d6, d7, d5
 800760a:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800760e:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8007612:	eea5 7b00 	vfma.f64	d7, d5, d0
 8007616:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800761a:	ee30 0b06 	vadd.f64	d0, d0, d6
 800761e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8007622:	eea4 0b07 	vfma.f64	d0, d4, d7
 8007626:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800762a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8007640 <logf+0xc8>
 8007634:	e7f9      	b.n	800762a <logf+0xb2>
 8007636:	bf00      	nop
 8007638:	4b000000 	.word	0x4b000000
 800763c:	08008750 	.word	0x08008750
 8007640:	00000000 	.word	0x00000000

08007644 <checkint>:
 8007644:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007648:	2b7e      	cmp	r3, #126	; 0x7e
 800764a:	dd10      	ble.n	800766e <checkint+0x2a>
 800764c:	2b96      	cmp	r3, #150	; 0x96
 800764e:	dc0c      	bgt.n	800766a <checkint+0x26>
 8007650:	2201      	movs	r2, #1
 8007652:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007656:	fa02 f303 	lsl.w	r3, r2, r3
 800765a:	1e5a      	subs	r2, r3, #1
 800765c:	4202      	tst	r2, r0
 800765e:	d106      	bne.n	800766e <checkint+0x2a>
 8007660:	4203      	tst	r3, r0
 8007662:	bf0c      	ite	eq
 8007664:	2002      	moveq	r0, #2
 8007666:	2001      	movne	r0, #1
 8007668:	4770      	bx	lr
 800766a:	2002      	movs	r0, #2
 800766c:	4770      	bx	lr
 800766e:	2000      	movs	r0, #0
 8007670:	4770      	bx	lr
 8007672:	0000      	movs	r0, r0
 8007674:	0000      	movs	r0, r0
	...

08007678 <powf>:
 8007678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800767a:	ee10 1a10 	vmov	r1, s0
 800767e:	ee10 4a90 	vmov	r4, s1
 8007682:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8007686:	0062      	lsls	r2, r4, #1
 8007688:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800768c:	eef0 7a40 	vmov.f32	s15, s0
 8007690:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8007694:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8007698:	d252      	bcs.n	8007740 <powf+0xc8>
 800769a:	4298      	cmp	r0, r3
 800769c:	d252      	bcs.n	8007744 <powf+0xcc>
 800769e:	2000      	movs	r0, #0
 80076a0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 80076a4:	4a9e      	ldr	r2, [pc, #632]	; (8007920 <powf+0x2a8>)
 80076a6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80076aa:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80076ae:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 80076b2:	0ddb      	lsrs	r3, r3, #23
 80076b4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80076b8:	05db      	lsls	r3, r3, #23
 80076ba:	ed94 5b00 	vldr	d5, [r4]
 80076be:	1ac9      	subs	r1, r1, r3
 80076c0:	ee07 1a90 	vmov	s15, r1
 80076c4:	15db      	asrs	r3, r3, #23
 80076c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80076ca:	eea5 6b07 	vfma.f64	d6, d5, d7
 80076ce:	ed94 5b02 	vldr	d5, [r4, #8]
 80076d2:	ee26 2b06 	vmul.f64	d2, d6, d6
 80076d6:	ee22 1b02 	vmul.f64	d1, d2, d2
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 80076e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80076e6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80076ea:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 80076ee:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 80076f2:	eea6 3b05 	vfma.f64	d3, d6, d5
 80076f6:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 80076fa:	eea6 5b04 	vfma.f64	d5, d6, d4
 80076fe:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 8007702:	eea6 7b04 	vfma.f64	d7, d6, d4
 8007706:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 800770a:	eea2 7b05 	vfma.f64	d7, d2, d5
 800770e:	eea3 7b01 	vfma.f64	d7, d3, d1
 8007712:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007716:	ee16 3a90 	vmov	r3, s13
 800771a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800771e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8007722:	429a      	cmp	r2, r3
 8007724:	f0c0 80b0 	bcc.w	8007888 <powf+0x210>
 8007728:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8007900 <powf+0x288>
 800772c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007734:	dd78      	ble.n	8007828 <powf+0x1b0>
 8007736:	b003      	add	sp, #12
 8007738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800773c:	f000 b91a 	b.w	8007974 <__math_oflowf>
 8007740:	4298      	cmp	r0, r3
 8007742:	d32d      	bcc.n	80077a0 <powf+0x128>
 8007744:	b952      	cbnz	r2, 800775c <powf+0xe4>
 8007746:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 800774a:	0049      	lsls	r1, r1, #1
 800774c:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 8007750:	f240 80c8 	bls.w	80078e4 <powf+0x26c>
 8007754:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8007758:	b003      	add	sp, #12
 800775a:	bd30      	pop	{r4, r5, pc}
 800775c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8007760:	d105      	bne.n	800776e <powf+0xf6>
 8007762:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8007766:	0064      	lsls	r4, r4, #1
 8007768:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800776c:	e7f0      	b.n	8007750 <powf+0xd8>
 800776e:	0049      	lsls	r1, r1, #1
 8007770:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8007774:	d8ee      	bhi.n	8007754 <powf+0xdc>
 8007776:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800777a:	d1eb      	bne.n	8007754 <powf+0xdc>
 800777c:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8007780:	f000 80b0 	beq.w	80078e4 <powf+0x26c>
 8007784:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8007788:	ea6f 0404 	mvn.w	r4, r4
 800778c:	bf34      	ite	cc
 800778e:	2100      	movcc	r1, #0
 8007790:	2101      	movcs	r1, #1
 8007792:	0fe4      	lsrs	r4, r4, #31
 8007794:	42a1      	cmp	r1, r4
 8007796:	f040 80a8 	bne.w	80078ea <powf+0x272>
 800779a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800779e:	e7db      	b.n	8007758 <powf+0xe0>
 80077a0:	004d      	lsls	r5, r1, #1
 80077a2:	1e6a      	subs	r2, r5, #1
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d31c      	bcc.n	80077e2 <powf+0x16a>
 80077a8:	2900      	cmp	r1, #0
 80077aa:	ee20 0a00 	vmul.f32	s0, s0, s0
 80077ae:	da0f      	bge.n	80077d0 <powf+0x158>
 80077b0:	ee10 0a90 	vmov	r0, s1
 80077b4:	f7ff ff46 	bl	8007644 <checkint>
 80077b8:	2801      	cmp	r0, #1
 80077ba:	d109      	bne.n	80077d0 <powf+0x158>
 80077bc:	eeb1 0a40 	vneg.f32	s0, s0
 80077c0:	b945      	cbnz	r5, 80077d4 <powf+0x15c>
 80077c2:	2c00      	cmp	r4, #0
 80077c4:	dac8      	bge.n	8007758 <powf+0xe0>
 80077c6:	b003      	add	sp, #12
 80077c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077cc:	f000 b8d8 	b.w	8007980 <__math_divzerof>
 80077d0:	2000      	movs	r0, #0
 80077d2:	e7f5      	b.n	80077c0 <powf+0x148>
 80077d4:	2c00      	cmp	r4, #0
 80077d6:	dabf      	bge.n	8007758 <powf+0xe0>
 80077d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80077dc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80077e0:	e7ba      	b.n	8007758 <powf+0xe0>
 80077e2:	2900      	cmp	r1, #0
 80077e4:	da1e      	bge.n	8007824 <powf+0x1ac>
 80077e6:	ee10 0a90 	vmov	r0, s1
 80077ea:	f7ff ff2b 	bl	8007644 <checkint>
 80077ee:	b920      	cbnz	r0, 80077fa <powf+0x182>
 80077f0:	b003      	add	sp, #12
 80077f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077f6:	f000 b8d5 	b.w	80079a4 <__math_invalidf>
 80077fa:	1e43      	subs	r3, r0, #1
 80077fc:	4258      	negs	r0, r3
 80077fe:	4158      	adcs	r0, r3
 8007800:	0400      	lsls	r0, r0, #16
 8007802:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007806:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800780a:	f4bf af49 	bcs.w	80076a0 <powf+0x28>
 800780e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8007924 <powf+0x2ac>
 8007812:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007816:	ee10 3a10 	vmov	r3, s0
 800781a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800781e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8007822:	e73d      	b.n	80076a0 <powf+0x28>
 8007824:	2000      	movs	r0, #0
 8007826:	e7ee      	b.n	8007806 <powf+0x18e>
 8007828:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8007908 <powf+0x290>
 800782c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007834:	dd10      	ble.n	8007858 <powf+0x1e0>
 8007836:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800783a:	2800      	cmp	r0, #0
 800783c:	d158      	bne.n	80078f0 <powf+0x278>
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	eddd 7a00 	vldr	s15, [sp]
 8007844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800784c:	eef4 7a47 	vcmp.f32	s15, s14
 8007850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007854:	f47f af6f 	bne.w	8007736 <powf+0xbe>
 8007858:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007910 <powf+0x298>
 800785c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007864:	d804      	bhi.n	8007870 <powf+0x1f8>
 8007866:	b003      	add	sp, #12
 8007868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800786c:	f000 b876 	b.w	800795c <__math_uflowf>
 8007870:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8007918 <powf+0x2a0>
 8007874:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787c:	d504      	bpl.n	8007888 <powf+0x210>
 800787e:	b003      	add	sp, #12
 8007880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007884:	f000 b870 	b.w	8007968 <__math_may_uflowf>
 8007888:	4b27      	ldr	r3, [pc, #156]	; (8007928 <powf+0x2b0>)
 800788a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800788e:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 8007892:	ee36 7b05 	vadd.f64	d7, d6, d5
 8007896:	ee17 2a10 	vmov	r2, s14
 800789a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800789e:	f002 011f 	and.w	r1, r2, #31
 80078a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80078a6:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80078aa:	ee27 4b07 	vmul.f64	d4, d7, d7
 80078ae:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80078b2:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80078b6:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80078ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80078be:	686d      	ldr	r5, [r5, #4]
 80078c0:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80078c4:	1882      	adds	r2, r0, r2
 80078c6:	2300      	movs	r3, #0
 80078c8:	1918      	adds	r0, r3, r4
 80078ca:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80078ce:	eea7 0b05 	vfma.f64	d0, d7, d5
 80078d2:	ec41 0b17 	vmov	d7, r0, r1
 80078d6:	eea6 0b04 	vfma.f64	d0, d6, d4
 80078da:	ee20 0b07 	vmul.f64	d0, d0, d7
 80078de:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80078e2:	e739      	b.n	8007758 <powf+0xe0>
 80078e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80078e8:	e736      	b.n	8007758 <powf+0xe0>
 80078ea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800792c <powf+0x2b4>
 80078ee:	e733      	b.n	8007758 <powf+0xe0>
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	eddd 7a01 	vldr	s15, [sp, #4]
 80078f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80078fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078fe:	e7a5      	b.n	800784c <powf+0x1d4>
 8007900:	ffd1d571 	.word	0xffd1d571
 8007904:	405fffff 	.word	0x405fffff
 8007908:	ffa3aae2 	.word	0xffa3aae2
 800790c:	405fffff 	.word	0x405fffff
 8007910:	00000000 	.word	0x00000000
 8007914:	c062c000 	.word	0xc062c000
 8007918:	00000000 	.word	0x00000000
 800791c:	c062a000 	.word	0xc062a000
 8007920:	08008c10 	.word	0x08008c10
 8007924:	4b000000 	.word	0x4b000000
 8007928:	08008608 	.word	0x08008608
 800792c:	00000000 	.word	0x00000000

08007930 <with_errnof>:
 8007930:	b513      	push	{r0, r1, r4, lr}
 8007932:	4604      	mov	r4, r0
 8007934:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007938:	f7ff fdf4 	bl	8007524 <__errno>
 800793c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007940:	6004      	str	r4, [r0, #0]
 8007942:	b002      	add	sp, #8
 8007944:	bd10      	pop	{r4, pc}

08007946 <xflowf>:
 8007946:	b130      	cbz	r0, 8007956 <xflowf+0x10>
 8007948:	eef1 7a40 	vneg.f32	s15, s0
 800794c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007950:	2022      	movs	r0, #34	; 0x22
 8007952:	f7ff bfed 	b.w	8007930 <with_errnof>
 8007956:	eef0 7a40 	vmov.f32	s15, s0
 800795a:	e7f7      	b.n	800794c <xflowf+0x6>

0800795c <__math_uflowf>:
 800795c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007964 <__math_uflowf+0x8>
 8007960:	f7ff bff1 	b.w	8007946 <xflowf>
 8007964:	10000000 	.word	0x10000000

08007968 <__math_may_uflowf>:
 8007968:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007970 <__math_may_uflowf+0x8>
 800796c:	f7ff bfeb 	b.w	8007946 <xflowf>
 8007970:	1a200000 	.word	0x1a200000

08007974 <__math_oflowf>:
 8007974:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800797c <__math_oflowf+0x8>
 8007978:	f7ff bfe5 	b.w	8007946 <xflowf>
 800797c:	70000000 	.word	0x70000000

08007980 <__math_divzerof>:
 8007980:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80079a0 <__math_divzerof+0x20>
 8007984:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8007988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800798c:	2800      	cmp	r0, #0
 800798e:	f04f 0022 	mov.w	r0, #34	; 0x22
 8007992:	fe47 7a27 	vseleq.f32	s15, s14, s15
 8007996:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800799a:	f7ff bfc9 	b.w	8007930 <with_errnof>
 800799e:	bf00      	nop
 80079a0:	00000000 	.word	0x00000000

080079a4 <__math_invalidf>:
 80079a4:	eef0 7a40 	vmov.f32	s15, s0
 80079a8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80079ac:	eef4 7a67 	vcmp.f32	s15, s15
 80079b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80079b8:	d602      	bvs.n	80079c0 <__math_invalidf+0x1c>
 80079ba:	2021      	movs	r0, #33	; 0x21
 80079bc:	f7ff bfb8 	b.w	8007930 <with_errnof>
 80079c0:	4770      	bx	lr
	...

080079c4 <log10f>:
 80079c4:	b508      	push	{r3, lr}
 80079c6:	ed2d 8b02 	vpush	{d8}
 80079ca:	eeb0 8a40 	vmov.f32	s16, s0
 80079ce:	f000 f941 	bl	8007c54 <__ieee754_log10f>
 80079d2:	eeb4 8a48 	vcmp.f32	s16, s16
 80079d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079da:	d60f      	bvs.n	80079fc <log10f+0x38>
 80079dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80079e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e4:	d80a      	bhi.n	80079fc <log10f+0x38>
 80079e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80079ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ee:	d108      	bne.n	8007a02 <log10f+0x3e>
 80079f0:	f7ff fd98 	bl	8007524 <__errno>
 80079f4:	2322      	movs	r3, #34	; 0x22
 80079f6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007a18 <log10f+0x54>
 80079fa:	6003      	str	r3, [r0, #0]
 80079fc:	ecbd 8b02 	vpop	{d8}
 8007a00:	bd08      	pop	{r3, pc}
 8007a02:	f7ff fd8f 	bl	8007524 <__errno>
 8007a06:	ecbd 8b02 	vpop	{d8}
 8007a0a:	2321      	movs	r3, #33	; 0x21
 8007a0c:	6003      	str	r3, [r0, #0]
 8007a0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a12:	4802      	ldr	r0, [pc, #8]	; (8007a1c <log10f+0x58>)
 8007a14:	f000 b80c 	b.w	8007a30 <nanf>
 8007a18:	ff800000 	.word	0xff800000
 8007a1c:	08008870 	.word	0x08008870

08007a20 <fabsf>:
 8007a20:	ee10 3a10 	vmov	r3, s0
 8007a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a28:	ee00 3a10 	vmov	s0, r3
 8007a2c:	4770      	bx	lr
	...

08007a30 <nanf>:
 8007a30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007a38 <nanf+0x8>
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	7fc00000 	.word	0x7fc00000

08007a3c <tanf>:
 8007a3c:	ee10 3a10 	vmov	r3, s0
 8007a40:	b507      	push	{r0, r1, r2, lr}
 8007a42:	4a12      	ldr	r2, [pc, #72]	; (8007a8c <tanf+0x50>)
 8007a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	dc07      	bgt.n	8007a5c <tanf+0x20>
 8007a4c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8007a90 <tanf+0x54>
 8007a50:	2001      	movs	r0, #1
 8007a52:	b003      	add	sp, #12
 8007a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a58:	f000 b81c 	b.w	8007a94 <__kernel_tanf>
 8007a5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a60:	db04      	blt.n	8007a6c <tanf+0x30>
 8007a62:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007a66:	b003      	add	sp, #12
 8007a68:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a6c:	4668      	mov	r0, sp
 8007a6e:	f000 f949 	bl	8007d04 <__ieee754_rem_pio2f>
 8007a72:	0040      	lsls	r0, r0, #1
 8007a74:	f000 0002 	and.w	r0, r0, #2
 8007a78:	eddd 0a01 	vldr	s1, [sp, #4]
 8007a7c:	ed9d 0a00 	vldr	s0, [sp]
 8007a80:	f1c0 0001 	rsb	r0, r0, #1
 8007a84:	f000 f806 	bl	8007a94 <__kernel_tanf>
 8007a88:	e7ed      	b.n	8007a66 <tanf+0x2a>
 8007a8a:	bf00      	nop
 8007a8c:	3f490fda 	.word	0x3f490fda
 8007a90:	00000000 	.word	0x00000000

08007a94 <__kernel_tanf>:
 8007a94:	b508      	push	{r3, lr}
 8007a96:	ee10 3a10 	vmov	r3, s0
 8007a9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a9e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8007aa2:	eef0 7a40 	vmov.f32	s15, s0
 8007aa6:	da17      	bge.n	8007ad8 <__kernel_tanf+0x44>
 8007aa8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8007aac:	ee17 1a10 	vmov	r1, s14
 8007ab0:	bb41      	cbnz	r1, 8007b04 <__kernel_tanf+0x70>
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	d108      	bne.n	8007aca <__kernel_tanf+0x36>
 8007ab8:	f7ff ffb2 	bl	8007a20 <fabsf>
 8007abc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ac0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ac8:	bd08      	pop	{r3, pc}
 8007aca:	2801      	cmp	r0, #1
 8007acc:	d0fa      	beq.n	8007ac4 <__kernel_tanf+0x30>
 8007ace:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007ad2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007ad6:	e7f5      	b.n	8007ac4 <__kernel_tanf+0x30>
 8007ad8:	494c      	ldr	r1, [pc, #304]	; (8007c0c <__kernel_tanf+0x178>)
 8007ada:	428a      	cmp	r2, r1
 8007adc:	db12      	blt.n	8007b04 <__kernel_tanf+0x70>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8007c10 <__kernel_tanf+0x17c>
 8007ae4:	bfb8      	it	lt
 8007ae6:	eef1 7a40 	vneglt.f32	s15, s0
 8007aea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007aee:	eddf 7a49 	vldr	s15, [pc, #292]	; 8007c14 <__kernel_tanf+0x180>
 8007af2:	bfb8      	it	lt
 8007af4:	eef1 0a60 	vneglt.f32	s1, s1
 8007af8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007afc:	eddf 0a46 	vldr	s1, [pc, #280]	; 8007c18 <__kernel_tanf+0x184>
 8007b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b04:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007b08:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c1c <__kernel_tanf+0x188>
 8007b0c:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8007c20 <__kernel_tanf+0x18c>
 8007b10:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8007c24 <__kernel_tanf+0x190>
 8007b14:	493d      	ldr	r1, [pc, #244]	; (8007c0c <__kernel_tanf+0x178>)
 8007b16:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007b1a:	428a      	cmp	r2, r1
 8007b1c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007b20:	eddf 5a41 	vldr	s11, [pc, #260]	; 8007c28 <__kernel_tanf+0x194>
 8007b24:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007b28:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007c2c <__kernel_tanf+0x198>
 8007b2c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007b30:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c30 <__kernel_tanf+0x19c>
 8007b34:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007b38:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8007c34 <__kernel_tanf+0x1a0>
 8007b3c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007b40:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8007c38 <__kernel_tanf+0x1a4>
 8007b44:	eee7 5a05 	vfma.f32	s11, s14, s10
 8007b48:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007c3c <__kernel_tanf+0x1a8>
 8007b4c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007b50:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8007c40 <__kernel_tanf+0x1ac>
 8007b54:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007b58:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007c44 <__kernel_tanf+0x1b0>
 8007b5c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007b60:	eddf 5a39 	vldr	s11, [pc, #228]	; 8007c48 <__kernel_tanf+0x1b4>
 8007b64:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007b68:	eeb0 7a46 	vmov.f32	s14, s12
 8007b6c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007b70:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8007b74:	eeb0 6a60 	vmov.f32	s12, s1
 8007b78:	eea7 6a05 	vfma.f32	s12, s14, s10
 8007b7c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8007c4c <__kernel_tanf+0x1b8>
 8007b80:	eee6 0a26 	vfma.f32	s1, s12, s13
 8007b84:	eee5 0a07 	vfma.f32	s1, s10, s14
 8007b88:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8007b8c:	db1d      	blt.n	8007bca <__kernel_tanf+0x136>
 8007b8e:	ee07 0a10 	vmov	s14, r0
 8007b92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b96:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8007b9a:	ee76 6a87 	vadd.f32	s13, s13, s14
 8007b9e:	179b      	asrs	r3, r3, #30
 8007ba0:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	f1c3 0301 	rsb	r3, r3, #1
 8007bac:	ee76 6a60 	vsub.f32	s13, s12, s1
 8007bb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007bb4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007bb8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007bbc:	ee07 3a90 	vmov	s15, r3
 8007bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bc8:	e77c      	b.n	8007ac4 <__kernel_tanf+0x30>
 8007bca:	2801      	cmp	r0, #1
 8007bcc:	d01b      	beq.n	8007c06 <__kernel_tanf+0x172>
 8007bce:	4b20      	ldr	r3, [pc, #128]	; (8007c50 <__kernel_tanf+0x1bc>)
 8007bd0:	ee16 2a90 	vmov	r2, s13
 8007bd4:	401a      	ands	r2, r3
 8007bd6:	ee05 2a90 	vmov	s11, r2
 8007bda:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007be2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007be6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8007bea:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8007bee:	ee16 2a10 	vmov	r2, s12
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007bfc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8007c00:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007c04:	e75e      	b.n	8007ac4 <__kernel_tanf+0x30>
 8007c06:	eef0 7a66 	vmov.f32	s15, s13
 8007c0a:	e75b      	b.n	8007ac4 <__kernel_tanf+0x30>
 8007c0c:	3f2ca140 	.word	0x3f2ca140
 8007c10:	3f490fda 	.word	0x3f490fda
 8007c14:	33222168 	.word	0x33222168
 8007c18:	00000000 	.word	0x00000000
 8007c1c:	b79bae5f 	.word	0xb79bae5f
 8007c20:	38a3f445 	.word	0x38a3f445
 8007c24:	37d95384 	.word	0x37d95384
 8007c28:	3a1a26c8 	.word	0x3a1a26c8
 8007c2c:	3b6b6916 	.word	0x3b6b6916
 8007c30:	3cb327a4 	.word	0x3cb327a4
 8007c34:	3e088889 	.word	0x3e088889
 8007c38:	3895c07a 	.word	0x3895c07a
 8007c3c:	398137b9 	.word	0x398137b9
 8007c40:	3abede48 	.word	0x3abede48
 8007c44:	3c11371f 	.word	0x3c11371f
 8007c48:	3d5d0dd1 	.word	0x3d5d0dd1
 8007c4c:	3eaaaaab 	.word	0x3eaaaaab
 8007c50:	fffff000 	.word	0xfffff000

08007c54 <__ieee754_log10f>:
 8007c54:	b508      	push	{r3, lr}
 8007c56:	ee10 2a10 	vmov	r2, s0
 8007c5a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007c5e:	ed2d 8b02 	vpush	{d8}
 8007c62:	d108      	bne.n	8007c76 <__ieee754_log10f+0x22>
 8007c64:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007cec <__ieee754_log10f+0x98>
 8007c68:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007cf0 <__ieee754_log10f+0x9c>
 8007c6c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007c70:	ecbd 8b02 	vpop	{d8}
 8007c74:	bd08      	pop	{r3, pc}
 8007c76:	2a00      	cmp	r2, #0
 8007c78:	da02      	bge.n	8007c80 <__ieee754_log10f+0x2c>
 8007c7a:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007c7e:	e7f3      	b.n	8007c68 <__ieee754_log10f+0x14>
 8007c80:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007c84:	db02      	blt.n	8007c8c <__ieee754_log10f+0x38>
 8007c86:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c8a:	e7f1      	b.n	8007c70 <__ieee754_log10f+0x1c>
 8007c8c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007c90:	bfbf      	itttt	lt
 8007c92:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8007cf4 <__ieee754_log10f+0xa0>
 8007c96:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007c9a:	f06f 0118 	mvnlt.w	r1, #24
 8007c9e:	ee17 2a90 	vmovlt	r2, s15
 8007ca2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007ca6:	bfa8      	it	ge
 8007ca8:	2100      	movge	r1, #0
 8007caa:	3b7f      	subs	r3, #127	; 0x7f
 8007cac:	440b      	add	r3, r1
 8007cae:	0fd9      	lsrs	r1, r3, #31
 8007cb0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007cb4:	ee07 3a90 	vmov	s15, r3
 8007cb8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007cbc:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8007cc0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007cc4:	ee00 3a10 	vmov	s0, r3
 8007cc8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007ccc:	f7ff fc54 	bl	8007578 <logf>
 8007cd0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007cf8 <__ieee754_log10f+0xa4>
 8007cd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007cd8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007cfc <__ieee754_log10f+0xa8>
 8007cdc:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007ce0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007d00 <__ieee754_log10f+0xac>
 8007ce4:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007ce8:	e7c2      	b.n	8007c70 <__ieee754_log10f+0x1c>
 8007cea:	bf00      	nop
 8007cec:	cc000000 	.word	0xcc000000
 8007cf0:	00000000 	.word	0x00000000
 8007cf4:	4c000000 	.word	0x4c000000
 8007cf8:	3ede5bd9 	.word	0x3ede5bd9
 8007cfc:	355427db 	.word	0x355427db
 8007d00:	3e9a2080 	.word	0x3e9a2080

08007d04 <__ieee754_rem_pio2f>:
 8007d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d06:	ee10 6a10 	vmov	r6, s0
 8007d0a:	4b86      	ldr	r3, [pc, #536]	; (8007f24 <__ieee754_rem_pio2f+0x220>)
 8007d0c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007d10:	429d      	cmp	r5, r3
 8007d12:	b087      	sub	sp, #28
 8007d14:	4604      	mov	r4, r0
 8007d16:	dc05      	bgt.n	8007d24 <__ieee754_rem_pio2f+0x20>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	ed80 0a00 	vstr	s0, [r0]
 8007d1e:	6043      	str	r3, [r0, #4]
 8007d20:	2000      	movs	r0, #0
 8007d22:	e020      	b.n	8007d66 <__ieee754_rem_pio2f+0x62>
 8007d24:	4b80      	ldr	r3, [pc, #512]	; (8007f28 <__ieee754_rem_pio2f+0x224>)
 8007d26:	429d      	cmp	r5, r3
 8007d28:	dc38      	bgt.n	8007d9c <__ieee754_rem_pio2f+0x98>
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8007f2c <__ieee754_rem_pio2f+0x228>
 8007d30:	4b7f      	ldr	r3, [pc, #508]	; (8007f30 <__ieee754_rem_pio2f+0x22c>)
 8007d32:	f025 050f 	bic.w	r5, r5, #15
 8007d36:	dd18      	ble.n	8007d6a <__ieee754_rem_pio2f+0x66>
 8007d38:	429d      	cmp	r5, r3
 8007d3a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007d3e:	bf09      	itett	eq
 8007d40:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8007f34 <__ieee754_rem_pio2f+0x230>
 8007d44:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8007f38 <__ieee754_rem_pio2f+0x234>
 8007d48:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007d4c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8007f3c <__ieee754_rem_pio2f+0x238>
 8007d50:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007d54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d58:	edc0 6a00 	vstr	s13, [r0]
 8007d5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d60:	edc0 7a01 	vstr	s15, [r0, #4]
 8007d64:	2001      	movs	r0, #1
 8007d66:	b007      	add	sp, #28
 8007d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d6a:	429d      	cmp	r5, r3
 8007d6c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007d70:	bf09      	itett	eq
 8007d72:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8007f34 <__ieee754_rem_pio2f+0x230>
 8007d76:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8007f38 <__ieee754_rem_pio2f+0x234>
 8007d7a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007d7e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8007f3c <__ieee754_rem_pio2f+0x238>
 8007d82:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007d86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d8a:	edc0 6a00 	vstr	s13, [r0]
 8007d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d92:	edc0 7a01 	vstr	s15, [r0, #4]
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d9a:	e7e4      	b.n	8007d66 <__ieee754_rem_pio2f+0x62>
 8007d9c:	4b68      	ldr	r3, [pc, #416]	; (8007f40 <__ieee754_rem_pio2f+0x23c>)
 8007d9e:	429d      	cmp	r5, r3
 8007da0:	dc71      	bgt.n	8007e86 <__ieee754_rem_pio2f+0x182>
 8007da2:	f7ff fe3d 	bl	8007a20 <fabsf>
 8007da6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007f44 <__ieee754_rem_pio2f+0x240>
 8007daa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007dae:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007dba:	ee17 0a90 	vmov	r0, s15
 8007dbe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007f2c <__ieee754_rem_pio2f+0x228>
 8007dc2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007dc6:	281f      	cmp	r0, #31
 8007dc8:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007f38 <__ieee754_rem_pio2f+0x234>
 8007dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd0:	eeb1 6a47 	vneg.f32	s12, s14
 8007dd4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007dd8:	ee16 2a90 	vmov	r2, s13
 8007ddc:	dc1c      	bgt.n	8007e18 <__ieee754_rem_pio2f+0x114>
 8007dde:	495a      	ldr	r1, [pc, #360]	; (8007f48 <__ieee754_rem_pio2f+0x244>)
 8007de0:	1e47      	subs	r7, r0, #1
 8007de2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007de6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007dea:	428b      	cmp	r3, r1
 8007dec:	d014      	beq.n	8007e18 <__ieee754_rem_pio2f+0x114>
 8007dee:	6022      	str	r2, [r4, #0]
 8007df0:	ed94 7a00 	vldr	s14, [r4]
 8007df4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007df8:	2e00      	cmp	r6, #0
 8007dfa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007dfe:	ed84 0a01 	vstr	s0, [r4, #4]
 8007e02:	dab0      	bge.n	8007d66 <__ieee754_rem_pio2f+0x62>
 8007e04:	eeb1 7a47 	vneg.f32	s14, s14
 8007e08:	eeb1 0a40 	vneg.f32	s0, s0
 8007e0c:	ed84 7a00 	vstr	s14, [r4]
 8007e10:	ed84 0a01 	vstr	s0, [r4, #4]
 8007e14:	4240      	negs	r0, r0
 8007e16:	e7a6      	b.n	8007d66 <__ieee754_rem_pio2f+0x62>
 8007e18:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007e1c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8007e20:	2908      	cmp	r1, #8
 8007e22:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007e26:	dde2      	ble.n	8007dee <__ieee754_rem_pio2f+0xea>
 8007e28:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007f34 <__ieee754_rem_pio2f+0x230>
 8007e2c:	eef0 6a40 	vmov.f32	s13, s0
 8007e30:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007e34:	ee70 7a66 	vsub.f32	s15, s0, s13
 8007e38:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007e3c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007f3c <__ieee754_rem_pio2f+0x238>
 8007e40:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007e44:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007e48:	ee15 2a90 	vmov	r2, s11
 8007e4c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007e50:	1a5b      	subs	r3, r3, r1
 8007e52:	2b19      	cmp	r3, #25
 8007e54:	dc04      	bgt.n	8007e60 <__ieee754_rem_pio2f+0x15c>
 8007e56:	edc4 5a00 	vstr	s11, [r4]
 8007e5a:	eeb0 0a66 	vmov.f32	s0, s13
 8007e5e:	e7c7      	b.n	8007df0 <__ieee754_rem_pio2f+0xec>
 8007e60:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007f4c <__ieee754_rem_pio2f+0x248>
 8007e64:	eeb0 0a66 	vmov.f32	s0, s13
 8007e68:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007e6c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007e70:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007f50 <__ieee754_rem_pio2f+0x24c>
 8007e74:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007e78:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007e7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007e80:	ed84 7a00 	vstr	s14, [r4]
 8007e84:	e7b4      	b.n	8007df0 <__ieee754_rem_pio2f+0xec>
 8007e86:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007e8a:	db06      	blt.n	8007e9a <__ieee754_rem_pio2f+0x196>
 8007e8c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007e90:	edc0 7a01 	vstr	s15, [r0, #4]
 8007e94:	edc0 7a00 	vstr	s15, [r0]
 8007e98:	e742      	b.n	8007d20 <__ieee754_rem_pio2f+0x1c>
 8007e9a:	15ea      	asrs	r2, r5, #23
 8007e9c:	3a86      	subs	r2, #134	; 0x86
 8007e9e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007eaa:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007f54 <__ieee754_rem_pio2f+0x250>
 8007eae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007eb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007eb6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007eba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ebe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007ec2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007ec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007eca:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007ece:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ed2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eda:	edcd 7a05 	vstr	s15, [sp, #20]
 8007ede:	d11e      	bne.n	8007f1e <__ieee754_rem_pio2f+0x21a>
 8007ee0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee8:	bf14      	ite	ne
 8007eea:	2302      	movne	r3, #2
 8007eec:	2301      	moveq	r3, #1
 8007eee:	491a      	ldr	r1, [pc, #104]	; (8007f58 <__ieee754_rem_pio2f+0x254>)
 8007ef0:	9101      	str	r1, [sp, #4]
 8007ef2:	2102      	movs	r1, #2
 8007ef4:	9100      	str	r1, [sp, #0]
 8007ef6:	a803      	add	r0, sp, #12
 8007ef8:	4621      	mov	r1, r4
 8007efa:	f000 f82f 	bl	8007f5c <__kernel_rem_pio2f>
 8007efe:	2e00      	cmp	r6, #0
 8007f00:	f6bf af31 	bge.w	8007d66 <__ieee754_rem_pio2f+0x62>
 8007f04:	edd4 7a00 	vldr	s15, [r4]
 8007f08:	eef1 7a67 	vneg.f32	s15, s15
 8007f0c:	edc4 7a00 	vstr	s15, [r4]
 8007f10:	edd4 7a01 	vldr	s15, [r4, #4]
 8007f14:	eef1 7a67 	vneg.f32	s15, s15
 8007f18:	edc4 7a01 	vstr	s15, [r4, #4]
 8007f1c:	e77a      	b.n	8007e14 <__ieee754_rem_pio2f+0x110>
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e7e5      	b.n	8007eee <__ieee754_rem_pio2f+0x1ea>
 8007f22:	bf00      	nop
 8007f24:	3f490fd8 	.word	0x3f490fd8
 8007f28:	4016cbe3 	.word	0x4016cbe3
 8007f2c:	3fc90f80 	.word	0x3fc90f80
 8007f30:	3fc90fd0 	.word	0x3fc90fd0
 8007f34:	37354400 	.word	0x37354400
 8007f38:	37354443 	.word	0x37354443
 8007f3c:	2e85a308 	.word	0x2e85a308
 8007f40:	43490f80 	.word	0x43490f80
 8007f44:	3f22f984 	.word	0x3f22f984
 8007f48:	08008874 	.word	0x08008874
 8007f4c:	2e85a300 	.word	0x2e85a300
 8007f50:	248d3132 	.word	0x248d3132
 8007f54:	43800000 	.word	0x43800000
 8007f58:	080088f4 	.word	0x080088f4

08007f5c <__kernel_rem_pio2f>:
 8007f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f60:	ed2d 8b04 	vpush	{d8-d9}
 8007f64:	b0d9      	sub	sp, #356	; 0x164
 8007f66:	4688      	mov	r8, r1
 8007f68:	9002      	str	r0, [sp, #8]
 8007f6a:	49b8      	ldr	r1, [pc, #736]	; (800824c <__kernel_rem_pio2f+0x2f0>)
 8007f6c:	9866      	ldr	r0, [sp, #408]	; 0x198
 8007f6e:	9301      	str	r3, [sp, #4]
 8007f70:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8007f74:	9901      	ldr	r1, [sp, #4]
 8007f76:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8007f78:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8007f7c:	1d11      	adds	r1, r2, #4
 8007f7e:	db25      	blt.n	8007fcc <__kernel_rem_pio2f+0x70>
 8007f80:	1ed0      	subs	r0, r2, #3
 8007f82:	bf48      	it	mi
 8007f84:	1d10      	addmi	r0, r2, #4
 8007f86:	10c0      	asrs	r0, r0, #3
 8007f88:	1c45      	adds	r5, r0, #1
 8007f8a:	00e9      	lsls	r1, r5, #3
 8007f8c:	eba0 070b 	sub.w	r7, r0, fp
 8007f90:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800825c <__kernel_rem_pio2f+0x300>
 8007f94:	9103      	str	r1, [sp, #12]
 8007f96:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8007f9a:	eb0a 0c0b 	add.w	ip, sl, fp
 8007f9e:	ae1c      	add	r6, sp, #112	; 0x70
 8007fa0:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8007fa4:	2400      	movs	r4, #0
 8007fa6:	4564      	cmp	r4, ip
 8007fa8:	dd12      	ble.n	8007fd0 <__kernel_rem_pio2f+0x74>
 8007faa:	9901      	ldr	r1, [sp, #4]
 8007fac:	ac1c      	add	r4, sp, #112	; 0x70
 8007fae:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007fb2:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8007fb6:	f04f 0c00 	mov.w	ip, #0
 8007fba:	45d4      	cmp	ip, sl
 8007fbc:	dc27      	bgt.n	800800e <__kernel_rem_pio2f+0xb2>
 8007fbe:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007fc2:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800825c <__kernel_rem_pio2f+0x300>
 8007fc6:	4627      	mov	r7, r4
 8007fc8:	2600      	movs	r6, #0
 8007fca:	e016      	b.n	8007ffa <__kernel_rem_pio2f+0x9e>
 8007fcc:	2000      	movs	r0, #0
 8007fce:	e7db      	b.n	8007f88 <__kernel_rem_pio2f+0x2c>
 8007fd0:	42e7      	cmn	r7, r4
 8007fd2:	bf5d      	ittte	pl
 8007fd4:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8007fd8:	ee07 1a90 	vmovpl	s15, r1
 8007fdc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007fe0:	eef0 7a47 	vmovmi.f32	s15, s14
 8007fe4:	ece6 7a01 	vstmia	r6!, {s15}
 8007fe8:	3401      	adds	r4, #1
 8007fea:	e7dc      	b.n	8007fa6 <__kernel_rem_pio2f+0x4a>
 8007fec:	ecfe 6a01 	vldmia	lr!, {s13}
 8007ff0:	ed97 7a00 	vldr	s14, [r7]
 8007ff4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007ff8:	3601      	adds	r6, #1
 8007ffa:	455e      	cmp	r6, fp
 8007ffc:	f1a7 0704 	sub.w	r7, r7, #4
 8008000:	ddf4      	ble.n	8007fec <__kernel_rem_pio2f+0x90>
 8008002:	ece9 7a01 	vstmia	r9!, {s15}
 8008006:	f10c 0c01 	add.w	ip, ip, #1
 800800a:	3404      	adds	r4, #4
 800800c:	e7d5      	b.n	8007fba <__kernel_rem_pio2f+0x5e>
 800800e:	a908      	add	r1, sp, #32
 8008010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008014:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008018:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8008258 <__kernel_rem_pio2f+0x2fc>
 800801c:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8008254 <__kernel_rem_pio2f+0x2f8>
 8008020:	9105      	str	r1, [sp, #20]
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	4656      	mov	r6, sl
 8008026:	00b3      	lsls	r3, r6, #2
 8008028:	9306      	str	r3, [sp, #24]
 800802a:	ab58      	add	r3, sp, #352	; 0x160
 800802c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008030:	ac08      	add	r4, sp, #32
 8008032:	ab44      	add	r3, sp, #272	; 0x110
 8008034:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008038:	46a4      	mov	ip, r4
 800803a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800803e:	4637      	mov	r7, r6
 8008040:	2f00      	cmp	r7, #0
 8008042:	f1a0 0004 	sub.w	r0, r0, #4
 8008046:	dc4a      	bgt.n	80080de <__kernel_rem_pio2f+0x182>
 8008048:	4628      	mov	r0, r5
 800804a:	9207      	str	r2, [sp, #28]
 800804c:	f000 fa3a 	bl	80084c4 <scalbnf>
 8008050:	eeb0 8a40 	vmov.f32	s16, s0
 8008054:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008058:	ee28 0a00 	vmul.f32	s0, s16, s0
 800805c:	f000 f9f0 	bl	8008440 <floorf>
 8008060:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008064:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008068:	2d00      	cmp	r5, #0
 800806a:	9a07      	ldr	r2, [sp, #28]
 800806c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008070:	ee17 9a90 	vmov	r9, s15
 8008074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008078:	ee38 8a67 	vsub.f32	s16, s16, s15
 800807c:	dd41      	ble.n	8008102 <__kernel_rem_pio2f+0x1a6>
 800807e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8008082:	ab08      	add	r3, sp, #32
 8008084:	f1c5 0e08 	rsb	lr, r5, #8
 8008088:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800808c:	fa47 f00e 	asr.w	r0, r7, lr
 8008090:	4481      	add	r9, r0
 8008092:	fa00 f00e 	lsl.w	r0, r0, lr
 8008096:	1a3f      	subs	r7, r7, r0
 8008098:	f1c5 0007 	rsb	r0, r5, #7
 800809c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80080a0:	4107      	asrs	r7, r0
 80080a2:	2f00      	cmp	r7, #0
 80080a4:	dd3c      	ble.n	8008120 <__kernel_rem_pio2f+0x1c4>
 80080a6:	f04f 0e00 	mov.w	lr, #0
 80080aa:	f109 0901 	add.w	r9, r9, #1
 80080ae:	4671      	mov	r1, lr
 80080b0:	4576      	cmp	r6, lr
 80080b2:	dc67      	bgt.n	8008184 <__kernel_rem_pio2f+0x228>
 80080b4:	2d00      	cmp	r5, #0
 80080b6:	dd03      	ble.n	80080c0 <__kernel_rem_pio2f+0x164>
 80080b8:	2d01      	cmp	r5, #1
 80080ba:	d074      	beq.n	80081a6 <__kernel_rem_pio2f+0x24a>
 80080bc:	2d02      	cmp	r5, #2
 80080be:	d07b      	beq.n	80081b8 <__kernel_rem_pio2f+0x25c>
 80080c0:	2f02      	cmp	r7, #2
 80080c2:	d12d      	bne.n	8008120 <__kernel_rem_pio2f+0x1c4>
 80080c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80080c8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80080cc:	b341      	cbz	r1, 8008120 <__kernel_rem_pio2f+0x1c4>
 80080ce:	4628      	mov	r0, r5
 80080d0:	9207      	str	r2, [sp, #28]
 80080d2:	f000 f9f7 	bl	80084c4 <scalbnf>
 80080d6:	9a07      	ldr	r2, [sp, #28]
 80080d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80080dc:	e020      	b.n	8008120 <__kernel_rem_pio2f+0x1c4>
 80080de:	ee60 7a28 	vmul.f32	s15, s0, s17
 80080e2:	3f01      	subs	r7, #1
 80080e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080ec:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80080f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80080f4:	ecac 0a01 	vstmia	ip!, {s0}
 80080f8:	ed90 0a00 	vldr	s0, [r0]
 80080fc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008100:	e79e      	b.n	8008040 <__kernel_rem_pio2f+0xe4>
 8008102:	d105      	bne.n	8008110 <__kernel_rem_pio2f+0x1b4>
 8008104:	1e70      	subs	r0, r6, #1
 8008106:	ab08      	add	r3, sp, #32
 8008108:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800810c:	11ff      	asrs	r7, r7, #7
 800810e:	e7c8      	b.n	80080a2 <__kernel_rem_pio2f+0x146>
 8008110:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008114:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811c:	da30      	bge.n	8008180 <__kernel_rem_pio2f+0x224>
 800811e:	2700      	movs	r7, #0
 8008120:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008128:	f040 809a 	bne.w	8008260 <__kernel_rem_pio2f+0x304>
 800812c:	1e74      	subs	r4, r6, #1
 800812e:	46a4      	mov	ip, r4
 8008130:	2100      	movs	r1, #0
 8008132:	45d4      	cmp	ip, sl
 8008134:	da47      	bge.n	80081c6 <__kernel_rem_pio2f+0x26a>
 8008136:	2900      	cmp	r1, #0
 8008138:	d063      	beq.n	8008202 <__kernel_rem_pio2f+0x2a6>
 800813a:	ab08      	add	r3, sp, #32
 800813c:	3d08      	subs	r5, #8
 800813e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d07f      	beq.n	8008246 <__kernel_rem_pio2f+0x2ea>
 8008146:	4628      	mov	r0, r5
 8008148:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800814c:	f000 f9ba 	bl	80084c4 <scalbnf>
 8008150:	1c63      	adds	r3, r4, #1
 8008152:	aa44      	add	r2, sp, #272	; 0x110
 8008154:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008258 <__kernel_rem_pio2f+0x2fc>
 8008158:	0099      	lsls	r1, r3, #2
 800815a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800815e:	4623      	mov	r3, r4
 8008160:	2b00      	cmp	r3, #0
 8008162:	f280 80ad 	bge.w	80082c0 <__kernel_rem_pio2f+0x364>
 8008166:	4623      	mov	r3, r4
 8008168:	2b00      	cmp	r3, #0
 800816a:	f2c0 80cb 	blt.w	8008304 <__kernel_rem_pio2f+0x3a8>
 800816e:	aa44      	add	r2, sp, #272	; 0x110
 8008170:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008174:	4e36      	ldr	r6, [pc, #216]	; (8008250 <__kernel_rem_pio2f+0x2f4>)
 8008176:	eddf 7a39 	vldr	s15, [pc, #228]	; 800825c <__kernel_rem_pio2f+0x300>
 800817a:	2000      	movs	r0, #0
 800817c:	1ae2      	subs	r2, r4, r3
 800817e:	e0b6      	b.n	80082ee <__kernel_rem_pio2f+0x392>
 8008180:	2702      	movs	r7, #2
 8008182:	e790      	b.n	80080a6 <__kernel_rem_pio2f+0x14a>
 8008184:	6820      	ldr	r0, [r4, #0]
 8008186:	b949      	cbnz	r1, 800819c <__kernel_rem_pio2f+0x240>
 8008188:	b118      	cbz	r0, 8008192 <__kernel_rem_pio2f+0x236>
 800818a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800818e:	6020      	str	r0, [r4, #0]
 8008190:	2001      	movs	r0, #1
 8008192:	f10e 0e01 	add.w	lr, lr, #1
 8008196:	3404      	adds	r4, #4
 8008198:	4601      	mov	r1, r0
 800819a:	e789      	b.n	80080b0 <__kernel_rem_pio2f+0x154>
 800819c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80081a0:	6020      	str	r0, [r4, #0]
 80081a2:	4608      	mov	r0, r1
 80081a4:	e7f5      	b.n	8008192 <__kernel_rem_pio2f+0x236>
 80081a6:	1e74      	subs	r4, r6, #1
 80081a8:	ab08      	add	r3, sp, #32
 80081aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80081ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80081b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80081b6:	e783      	b.n	80080c0 <__kernel_rem_pio2f+0x164>
 80081b8:	1e74      	subs	r4, r6, #1
 80081ba:	ab08      	add	r3, sp, #32
 80081bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80081c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80081c4:	e7f5      	b.n	80081b2 <__kernel_rem_pio2f+0x256>
 80081c6:	ab08      	add	r3, sp, #32
 80081c8:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80081cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80081d0:	4301      	orrs	r1, r0
 80081d2:	e7ae      	b.n	8008132 <__kernel_rem_pio2f+0x1d6>
 80081d4:	3001      	adds	r0, #1
 80081d6:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80081da:	2f00      	cmp	r7, #0
 80081dc:	d0fa      	beq.n	80081d4 <__kernel_rem_pio2f+0x278>
 80081de:	9b06      	ldr	r3, [sp, #24]
 80081e0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80081e4:	eb0d 0403 	add.w	r4, sp, r3
 80081e8:	9b01      	ldr	r3, [sp, #4]
 80081ea:	18f7      	adds	r7, r6, r3
 80081ec:	ab1c      	add	r3, sp, #112	; 0x70
 80081ee:	f106 0c01 	add.w	ip, r6, #1
 80081f2:	3c4c      	subs	r4, #76	; 0x4c
 80081f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80081f8:	4430      	add	r0, r6
 80081fa:	4560      	cmp	r0, ip
 80081fc:	da04      	bge.n	8008208 <__kernel_rem_pio2f+0x2ac>
 80081fe:	4606      	mov	r6, r0
 8008200:	e711      	b.n	8008026 <__kernel_rem_pio2f+0xca>
 8008202:	9c05      	ldr	r4, [sp, #20]
 8008204:	2001      	movs	r0, #1
 8008206:	e7e6      	b.n	80081d6 <__kernel_rem_pio2f+0x27a>
 8008208:	9b04      	ldr	r3, [sp, #16]
 800820a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800820e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008212:	9306      	str	r3, [sp, #24]
 8008214:	ee07 3a90 	vmov	s15, r3
 8008218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800821c:	2600      	movs	r6, #0
 800821e:	ece7 7a01 	vstmia	r7!, {s15}
 8008222:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800825c <__kernel_rem_pio2f+0x300>
 8008226:	46b9      	mov	r9, r7
 8008228:	455e      	cmp	r6, fp
 800822a:	dd04      	ble.n	8008236 <__kernel_rem_pio2f+0x2da>
 800822c:	ece4 7a01 	vstmia	r4!, {s15}
 8008230:	f10c 0c01 	add.w	ip, ip, #1
 8008234:	e7e1      	b.n	80081fa <__kernel_rem_pio2f+0x29e>
 8008236:	ecfe 6a01 	vldmia	lr!, {s13}
 800823a:	ed39 7a01 	vldmdb	r9!, {s14}
 800823e:	3601      	adds	r6, #1
 8008240:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008244:	e7f0      	b.n	8008228 <__kernel_rem_pio2f+0x2cc>
 8008246:	3c01      	subs	r4, #1
 8008248:	e777      	b.n	800813a <__kernel_rem_pio2f+0x1de>
 800824a:	bf00      	nop
 800824c:	08008d64 	.word	0x08008d64
 8008250:	08008d38 	.word	0x08008d38
 8008254:	43800000 	.word	0x43800000
 8008258:	3b800000 	.word	0x3b800000
 800825c:	00000000 	.word	0x00000000
 8008260:	9b03      	ldr	r3, [sp, #12]
 8008262:	eeb0 0a48 	vmov.f32	s0, s16
 8008266:	1a98      	subs	r0, r3, r2
 8008268:	f000 f92c 	bl	80084c4 <scalbnf>
 800826c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008254 <__kernel_rem_pio2f+0x2f8>
 8008270:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008278:	db19      	blt.n	80082ae <__kernel_rem_pio2f+0x352>
 800827a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008258 <__kernel_rem_pio2f+0x2fc>
 800827e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008282:	aa08      	add	r2, sp, #32
 8008284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008288:	1c74      	adds	r4, r6, #1
 800828a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800828e:	3508      	adds	r5, #8
 8008290:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008298:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800829c:	ee10 3a10 	vmov	r3, s0
 80082a0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80082a4:	ee17 3a90 	vmov	r3, s15
 80082a8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80082ac:	e74b      	b.n	8008146 <__kernel_rem_pio2f+0x1ea>
 80082ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80082b2:	aa08      	add	r2, sp, #32
 80082b4:	ee10 3a10 	vmov	r3, s0
 80082b8:	4634      	mov	r4, r6
 80082ba:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80082be:	e742      	b.n	8008146 <__kernel_rem_pio2f+0x1ea>
 80082c0:	a808      	add	r0, sp, #32
 80082c2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80082c6:	9001      	str	r0, [sp, #4]
 80082c8:	ee07 0a90 	vmov	s15, r0
 80082cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082d0:	3b01      	subs	r3, #1
 80082d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80082d6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80082da:	ed62 7a01 	vstmdb	r2!, {s15}
 80082de:	e73f      	b.n	8008160 <__kernel_rem_pio2f+0x204>
 80082e0:	ecf6 6a01 	vldmia	r6!, {s13}
 80082e4:	ecb5 7a01 	vldmia	r5!, {s14}
 80082e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80082ec:	3001      	adds	r0, #1
 80082ee:	4550      	cmp	r0, sl
 80082f0:	dc01      	bgt.n	80082f6 <__kernel_rem_pio2f+0x39a>
 80082f2:	4290      	cmp	r0, r2
 80082f4:	ddf4      	ble.n	80082e0 <__kernel_rem_pio2f+0x384>
 80082f6:	a858      	add	r0, sp, #352	; 0x160
 80082f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80082fc:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8008300:	3b01      	subs	r3, #1
 8008302:	e731      	b.n	8008168 <__kernel_rem_pio2f+0x20c>
 8008304:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008306:	2b02      	cmp	r3, #2
 8008308:	dc09      	bgt.n	800831e <__kernel_rem_pio2f+0x3c2>
 800830a:	2b00      	cmp	r3, #0
 800830c:	dc2b      	bgt.n	8008366 <__kernel_rem_pio2f+0x40a>
 800830e:	d044      	beq.n	800839a <__kernel_rem_pio2f+0x43e>
 8008310:	f009 0007 	and.w	r0, r9, #7
 8008314:	b059      	add	sp, #356	; 0x164
 8008316:	ecbd 8b04 	vpop	{d8-d9}
 800831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008320:	2b03      	cmp	r3, #3
 8008322:	d1f5      	bne.n	8008310 <__kernel_rem_pio2f+0x3b4>
 8008324:	aa30      	add	r2, sp, #192	; 0xc0
 8008326:	1f0b      	subs	r3, r1, #4
 8008328:	4413      	add	r3, r2
 800832a:	461a      	mov	r2, r3
 800832c:	4620      	mov	r0, r4
 800832e:	2800      	cmp	r0, #0
 8008330:	f1a2 0204 	sub.w	r2, r2, #4
 8008334:	dc52      	bgt.n	80083dc <__kernel_rem_pio2f+0x480>
 8008336:	4622      	mov	r2, r4
 8008338:	2a01      	cmp	r2, #1
 800833a:	f1a3 0304 	sub.w	r3, r3, #4
 800833e:	dc5d      	bgt.n	80083fc <__kernel_rem_pio2f+0x4a0>
 8008340:	ab30      	add	r3, sp, #192	; 0xc0
 8008342:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800825c <__kernel_rem_pio2f+0x300>
 8008346:	440b      	add	r3, r1
 8008348:	2c01      	cmp	r4, #1
 800834a:	dc67      	bgt.n	800841c <__kernel_rem_pio2f+0x4c0>
 800834c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008350:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008354:	2f00      	cmp	r7, #0
 8008356:	d167      	bne.n	8008428 <__kernel_rem_pio2f+0x4cc>
 8008358:	edc8 6a00 	vstr	s13, [r8]
 800835c:	ed88 7a01 	vstr	s14, [r8, #4]
 8008360:	edc8 7a02 	vstr	s15, [r8, #8]
 8008364:	e7d4      	b.n	8008310 <__kernel_rem_pio2f+0x3b4>
 8008366:	ab30      	add	r3, sp, #192	; 0xc0
 8008368:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800825c <__kernel_rem_pio2f+0x300>
 800836c:	440b      	add	r3, r1
 800836e:	4622      	mov	r2, r4
 8008370:	2a00      	cmp	r2, #0
 8008372:	da24      	bge.n	80083be <__kernel_rem_pio2f+0x462>
 8008374:	b34f      	cbz	r7, 80083ca <__kernel_rem_pio2f+0x46e>
 8008376:	eef1 7a47 	vneg.f32	s15, s14
 800837a:	edc8 7a00 	vstr	s15, [r8]
 800837e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008382:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008386:	aa31      	add	r2, sp, #196	; 0xc4
 8008388:	2301      	movs	r3, #1
 800838a:	429c      	cmp	r4, r3
 800838c:	da20      	bge.n	80083d0 <__kernel_rem_pio2f+0x474>
 800838e:	b10f      	cbz	r7, 8008394 <__kernel_rem_pio2f+0x438>
 8008390:	eef1 7a67 	vneg.f32	s15, s15
 8008394:	edc8 7a01 	vstr	s15, [r8, #4]
 8008398:	e7ba      	b.n	8008310 <__kernel_rem_pio2f+0x3b4>
 800839a:	ab30      	add	r3, sp, #192	; 0xc0
 800839c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800825c <__kernel_rem_pio2f+0x300>
 80083a0:	440b      	add	r3, r1
 80083a2:	2c00      	cmp	r4, #0
 80083a4:	da05      	bge.n	80083b2 <__kernel_rem_pio2f+0x456>
 80083a6:	b10f      	cbz	r7, 80083ac <__kernel_rem_pio2f+0x450>
 80083a8:	eef1 7a67 	vneg.f32	s15, s15
 80083ac:	edc8 7a00 	vstr	s15, [r8]
 80083b0:	e7ae      	b.n	8008310 <__kernel_rem_pio2f+0x3b4>
 80083b2:	ed33 7a01 	vldmdb	r3!, {s14}
 80083b6:	3c01      	subs	r4, #1
 80083b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083bc:	e7f1      	b.n	80083a2 <__kernel_rem_pio2f+0x446>
 80083be:	ed73 7a01 	vldmdb	r3!, {s15}
 80083c2:	3a01      	subs	r2, #1
 80083c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083c8:	e7d2      	b.n	8008370 <__kernel_rem_pio2f+0x414>
 80083ca:	eef0 7a47 	vmov.f32	s15, s14
 80083ce:	e7d4      	b.n	800837a <__kernel_rem_pio2f+0x41e>
 80083d0:	ecb2 7a01 	vldmia	r2!, {s14}
 80083d4:	3301      	adds	r3, #1
 80083d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083da:	e7d6      	b.n	800838a <__kernel_rem_pio2f+0x42e>
 80083dc:	edd2 7a00 	vldr	s15, [r2]
 80083e0:	edd2 6a01 	vldr	s13, [r2, #4]
 80083e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80083e8:	3801      	subs	r0, #1
 80083ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083ee:	ed82 7a00 	vstr	s14, [r2]
 80083f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f6:	edc2 7a01 	vstr	s15, [r2, #4]
 80083fa:	e798      	b.n	800832e <__kernel_rem_pio2f+0x3d2>
 80083fc:	edd3 7a00 	vldr	s15, [r3]
 8008400:	edd3 6a01 	vldr	s13, [r3, #4]
 8008404:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008408:	3a01      	subs	r2, #1
 800840a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800840e:	ed83 7a00 	vstr	s14, [r3]
 8008412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008416:	edc3 7a01 	vstr	s15, [r3, #4]
 800841a:	e78d      	b.n	8008338 <__kernel_rem_pio2f+0x3dc>
 800841c:	ed33 7a01 	vldmdb	r3!, {s14}
 8008420:	3c01      	subs	r4, #1
 8008422:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008426:	e78f      	b.n	8008348 <__kernel_rem_pio2f+0x3ec>
 8008428:	eef1 6a66 	vneg.f32	s13, s13
 800842c:	eeb1 7a47 	vneg.f32	s14, s14
 8008430:	edc8 6a00 	vstr	s13, [r8]
 8008434:	ed88 7a01 	vstr	s14, [r8, #4]
 8008438:	eef1 7a67 	vneg.f32	s15, s15
 800843c:	e790      	b.n	8008360 <__kernel_rem_pio2f+0x404>
 800843e:	bf00      	nop

08008440 <floorf>:
 8008440:	ee10 3a10 	vmov	r3, s0
 8008444:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008448:	3a7f      	subs	r2, #127	; 0x7f
 800844a:	2a16      	cmp	r2, #22
 800844c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008450:	dc2a      	bgt.n	80084a8 <floorf+0x68>
 8008452:	2a00      	cmp	r2, #0
 8008454:	da11      	bge.n	800847a <floorf+0x3a>
 8008456:	eddf 7a18 	vldr	s15, [pc, #96]	; 80084b8 <floorf+0x78>
 800845a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800845e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008466:	dd05      	ble.n	8008474 <floorf+0x34>
 8008468:	2b00      	cmp	r3, #0
 800846a:	da23      	bge.n	80084b4 <floorf+0x74>
 800846c:	4a13      	ldr	r2, [pc, #76]	; (80084bc <floorf+0x7c>)
 800846e:	2900      	cmp	r1, #0
 8008470:	bf18      	it	ne
 8008472:	4613      	movne	r3, r2
 8008474:	ee00 3a10 	vmov	s0, r3
 8008478:	4770      	bx	lr
 800847a:	4911      	ldr	r1, [pc, #68]	; (80084c0 <floorf+0x80>)
 800847c:	4111      	asrs	r1, r2
 800847e:	420b      	tst	r3, r1
 8008480:	d0fa      	beq.n	8008478 <floorf+0x38>
 8008482:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80084b8 <floorf+0x78>
 8008486:	ee30 0a27 	vadd.f32	s0, s0, s15
 800848a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800848e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008492:	ddef      	ble.n	8008474 <floorf+0x34>
 8008494:	2b00      	cmp	r3, #0
 8008496:	bfbe      	ittt	lt
 8008498:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800849c:	fa40 f202 	asrlt.w	r2, r0, r2
 80084a0:	189b      	addlt	r3, r3, r2
 80084a2:	ea23 0301 	bic.w	r3, r3, r1
 80084a6:	e7e5      	b.n	8008474 <floorf+0x34>
 80084a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80084ac:	d3e4      	bcc.n	8008478 <floorf+0x38>
 80084ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 80084b2:	4770      	bx	lr
 80084b4:	2300      	movs	r3, #0
 80084b6:	e7dd      	b.n	8008474 <floorf+0x34>
 80084b8:	7149f2ca 	.word	0x7149f2ca
 80084bc:	bf800000 	.word	0xbf800000
 80084c0:	007fffff 	.word	0x007fffff

080084c4 <scalbnf>:
 80084c4:	ee10 3a10 	vmov	r3, s0
 80084c8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80084cc:	d02a      	beq.n	8008524 <scalbnf+0x60>
 80084ce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80084d2:	d302      	bcc.n	80084da <scalbnf+0x16>
 80084d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80084d8:	4770      	bx	lr
 80084da:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80084de:	d122      	bne.n	8008526 <scalbnf+0x62>
 80084e0:	4b23      	ldr	r3, [pc, #140]	; (8008570 <scalbnf+0xac>)
 80084e2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008574 <scalbnf+0xb0>
 80084e6:	4298      	cmp	r0, r3
 80084e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80084ec:	db16      	blt.n	800851c <scalbnf+0x58>
 80084ee:	ee10 3a10 	vmov	r3, s0
 80084f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80084f6:	3a19      	subs	r2, #25
 80084f8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80084fc:	4288      	cmp	r0, r1
 80084fe:	dd14      	ble.n	800852a <scalbnf+0x66>
 8008500:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8008578 <scalbnf+0xb4>
 8008504:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800857c <scalbnf+0xb8>
 8008508:	ee10 3a10 	vmov	r3, s0
 800850c:	eeb0 7a67 	vmov.f32	s14, s15
 8008510:	2b00      	cmp	r3, #0
 8008512:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8008516:	ee27 0a87 	vmul.f32	s0, s15, s14
 800851a:	4770      	bx	lr
 800851c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008580 <scalbnf+0xbc>
 8008520:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008524:	4770      	bx	lr
 8008526:	0dd2      	lsrs	r2, r2, #23
 8008528:	e7e6      	b.n	80084f8 <scalbnf+0x34>
 800852a:	4410      	add	r0, r2
 800852c:	28fe      	cmp	r0, #254	; 0xfe
 800852e:	dce7      	bgt.n	8008500 <scalbnf+0x3c>
 8008530:	2800      	cmp	r0, #0
 8008532:	dd06      	ble.n	8008542 <scalbnf+0x7e>
 8008534:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008538:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800853c:	ee00 3a10 	vmov	s0, r3
 8008540:	4770      	bx	lr
 8008542:	f110 0f16 	cmn.w	r0, #22
 8008546:	da09      	bge.n	800855c <scalbnf+0x98>
 8008548:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008580 <scalbnf+0xbc>
 800854c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008584 <scalbnf+0xc0>
 8008550:	ee10 3a10 	vmov	r3, s0
 8008554:	eeb0 7a67 	vmov.f32	s14, s15
 8008558:	2b00      	cmp	r3, #0
 800855a:	e7da      	b.n	8008512 <scalbnf+0x4e>
 800855c:	3019      	adds	r0, #25
 800855e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008562:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008566:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008588 <scalbnf+0xc4>
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	e7d7      	b.n	8008520 <scalbnf+0x5c>
 8008570:	ffff3cb0 	.word	0xffff3cb0
 8008574:	4c000000 	.word	0x4c000000
 8008578:	7149f2ca 	.word	0x7149f2ca
 800857c:	f149f2ca 	.word	0xf149f2ca
 8008580:	0da24260 	.word	0x0da24260
 8008584:	8da24260 	.word	0x8da24260
 8008588:	33000000 	.word	0x33000000

0800858c <_init>:
 800858c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858e:	bf00      	nop
 8008590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008592:	bc08      	pop	{r3}
 8008594:	469e      	mov	lr, r3
 8008596:	4770      	bx	lr

08008598 <_fini>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	bf00      	nop
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr
